{"sha": "92bc13234630d8ac1953a864c7ae8da649a3f660", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJiYzEzMjM0NjMwZDhhYzE5NTNhODY0YzdhZThkYTY0OWEzZjY2MA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-12-31T18:58:09Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-12-31T18:58:09Z"}, "message": "cp-tree.def (RETURN_INIT): Remove.\n\n\t* cp-tree.def (RETURN_INIT): Remove.\n\t* cp-tree.h (DECL_IN_MEMORY_P): Remove.\n\t(scope_kind): Add sk_block, sk_try, sk_catch, sk_for.\n\t(note_level_for_for): Remove.\n\t(note_level_for_try): Likewise.\n\t(note_level_for_catch): Likewise.\n\t(finish_named_return_value): Likewise.\n\t(do_pushlevel): Change prototype.\n\t(pending_lang_change): Remove.\n\t* decl.c (begin_scope): Handle sk_block, sk_try, sk_catch,\n\tsk_for.\n\t(note_level_for_for): Remove.\n\t(note_level_for_try): Likewise.\n\t(note_level_for_catch): Likewise.\n\t(maybe_inject_for_scope_var): Remove use of DECL_IN_MEMORY_P.\n\t* parser.c (cp_parser_context_free_list): Make it \"deletable\".\n\t(cp_parser_template_argument): Remove misleading comment.\n\t* pt.c (tsubst_expr): Remove RETURN_INIT code.\n\t* semantics.c (genrtl_named_return_value): Remove.\n\t(do_pushlevel): Take a scope kind as an argument.\n\t(begin_if_stmt): Adjust.\n\t(begin_while_stmt): Likewise.\n\t(begin_for_stmt): Likewise.\n\t(finish_for_init_stmt): Likewise.\n\t(begin_switch_stmt): Likewise.\n\t(begin_handler): Likewise.\n\t(begin_compound_stmt): Likewise.\n\t(finish_named_return_value): Remove.\n\t(cp_expand_stmt): Remove RETURN_INIT case.\n\t* tree.c (cp_statement_code_p): Remove RETURN_INIT case.\n\n\t* g++.dg/init/array9.C: New test.\n\nFrom-SVN: r60707", "tree": {"sha": "75008f51394accf5a67fb07eb529be4f21dec5b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75008f51394accf5a67fb07eb529be4f21dec5b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92bc13234630d8ac1953a864c7ae8da649a3f660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92bc13234630d8ac1953a864c7ae8da649a3f660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92bc13234630d8ac1953a864c7ae8da649a3f660", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92bc13234630d8ac1953a864c7ae8da649a3f660/comments", "author": null, "committer": null, "parents": [{"sha": "abda8efedaa6fe00a1264fc0d022c789f4eb005b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abda8efedaa6fe00a1264fc0d022c789f4eb005b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abda8efedaa6fe00a1264fc0d022c789f4eb005b"}], "stats": {"total": 232, "additions": 76, "deletions": 156}, "files": [{"sha": "921c0de4ec5f9a85011f3dcaff4bb0f044b963e7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=92bc13234630d8ac1953a864c7ae8da649a3f660", "patch": "@@ -1,3 +1,36 @@\n+2002-12-31  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.def (RETURN_INIT): Remove.\n+\t* cp-tree.h (DECL_IN_MEMORY_P): Remove.\n+\t(scope_kind): Add sk_block, sk_try, sk_catch, sk_for.\n+\t(note_level_for_for): Remove.\n+\t(note_level_for_try): Likewise.\n+\t(note_level_for_catch): Likewise.\n+\t(finish_named_return_value): Likewise.\n+\t(do_pushlevel): Change prototype.\n+\t(pending_lang_change): Remove.\n+\t* decl.c (begin_scope): Handle sk_block, sk_try, sk_catch,\n+\tsk_for.\n+\t(note_level_for_for): Remove.\n+\t(note_level_for_try): Likewise.\n+\t(note_level_for_catch): Likewise.\n+\t(maybe_inject_for_scope_var): Remove use of DECL_IN_MEMORY_P.\n+\t* parser.c (cp_parser_context_free_list): Make it \"deletable\".\n+\t(cp_parser_template_argument): Remove misleading comment.\n+\t* pt.c (tsubst_expr): Remove RETURN_INIT code.\n+\t* semantics.c (genrtl_named_return_value): Remove.\n+\t(do_pushlevel): Take a scope kind as an argument.\n+\t(begin_if_stmt): Adjust.\n+\t(begin_while_stmt): Likewise.\n+\t(begin_for_stmt): Likewise.\n+\t(finish_for_init_stmt): Likewise.\n+\t(begin_switch_stmt): Likewise.\n+\t(begin_handler): Likewise.\n+\t(begin_compound_stmt): Likewise.\n+\t(finish_named_return_value): Remove.\n+\t(cp_expand_stmt): Remove RETURN_INIT case.\n+\t* tree.c (cp_statement_code_p): Remove RETURN_INIT case.\n+\t\n 2002-12-31  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/9112"}, {"sha": "caec9cdfe76c55b4a88e7cacb6d09354dc399602", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=92bc13234630d8ac1953a864c7ae8da649a3f660", "patch": "@@ -256,7 +256,6 @@ DEFTREECODE (PSEUDO_DTOR_EXPR, \"pseudo_dtor_expr\", 'e', 3)\n /* CTOR_INITIALIZER is a placeholder in template code for a call to\n    setup_vtbl_pointer (and appears in all functions, not just ctors).  */\n DEFTREECODE (CTOR_INITIALIZER, \"ctor_initializer\", 'e', 1)\n-DEFTREECODE (RETURN_INIT, \"return_init\", 'e', 2)\n DEFTREECODE (TRY_BLOCK, \"try_block\", 'e', 2)\n DEFTREECODE (EH_SPEC_BLOCK, \"eh_spec_block\", 'e', 2)\n /* A HANDLER wraps a catch handler for the HANDLER_TYPE.  If this is"}, {"sha": "3346a1fe86df42e894e0bd0a4406124fd768ec5c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=92bc13234630d8ac1953a864c7ae8da649a3f660", "patch": "@@ -1857,14 +1857,6 @@ struct lang_decl GTY(())\n        && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (DECL)))\t\\\n    || (flag_syntax_only && TREE_USED (DECL)))\n \n-/* Nonzero iff DECL is memory-based.  The DECL_RTL of\n-   certain const variables might be a CONST_INT, or a REG\n-   in some cases.  We cannot use `memory_operand' as a test\n-   here because on most RISC machines, a variable's address\n-   is not, by itself, a legitimate address.  */\n-#define DECL_IN_MEMORY_P(NODE) \\\n-  (DECL_RTL_SET_P (NODE) && GET_CODE (DECL_RTL (NODE)) == MEM)\n-\n /* For a FUNCTION_DECL or a VAR_DECL, the language linkage for the\n    declaration.  Some entities (like a member function in a local\n    class, or a local variable) do not have linkage at all, and this\n@@ -3043,6 +3035,11 @@ typedef enum cp_lvalue_kind {\n \n /* The kinds of scopes we recognize.  */\n typedef enum scope_kind {\n+  sk_block,          /* An ordinary block scope.  */\n+  sk_try,\t     /* A try-block.  */\n+  sk_catch,          /* A catch-block.  */\n+  sk_for,            /* The scope of the variable declared in a\n+\t\t\tfor-init-statement.  */\n   sk_template_parms, /* A scope for template parameters.  */\n   sk_template_spec   /* A scope corresponding to a template\n \t\t\tspecialization.  There is never anything in\n@@ -3689,9 +3686,6 @@ extern void set_class_shadows\t\t\tPARAMS ((tree));\n extern void maybe_push_cleanup_level\t\tPARAMS ((tree));\n extern void begin_scope                         PARAMS ((scope_kind));\n extern void finish_scope                        PARAMS ((void));\n-extern void note_level_for_for\t\t\tPARAMS ((void));\n-extern void note_level_for_try\t\t\tPARAMS ((void));\n-extern void note_level_for_catch\t\tPARAMS ((void));\n extern void resume_level\t\t\tPARAMS ((struct cp_binding_level *));\n extern void delete_block\t\t\tPARAMS ((tree));\n extern void add_block_current_level\t\tPARAMS ((tree));\n@@ -4224,10 +4218,9 @@ extern tree finish_sizeof\t\t\tPARAMS ((tree));\n extern tree finish_alignof\t\t\tPARAMS ((tree));\n extern void finish_decl_cleanup                 PARAMS ((tree, tree));\n extern void finish_eh_cleanup                   PARAMS ((tree));\n-extern void finish_named_return_value           PARAMS ((tree, tree));\n extern void expand_body                         PARAMS ((tree));\n extern tree nullify_returns_r\t\t      PARAMS ((tree *, int *, void *));\n-extern void do_pushlevel                        PARAMS ((void));\n+extern void do_pushlevel                        (scope_kind);\n extern tree do_poplevel                         PARAMS ((void));\n extern void begin_mem_initializers              (void);\n extern void finish_mem_initializers             PARAMS ((tree));\n@@ -4427,9 +4420,6 @@ extern tree mangle_ref_init_variable            PARAMS ((tree));\n /* in dump.c */\n extern int cp_dump_tree                         PARAMS ((void *, tree));\n \n-/* in parser.c */\n-extern int pending_lang_change;\n-\n /* -- end of C++ */\n \n #endif /* ! GCC_CP_TREE_H */"}, {"sha": "6cdbb763d2f1e782b0d8efd03f27631d3e79ef47", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=92bc13234630d8ac1953a864c7ae8da649a3f660", "patch": "@@ -855,6 +855,21 @@ begin_scope (sk)\n \n   switch (sk)\n     {\n+    case sk_block:\n+      break;\n+\n+    case sk_try:\n+      current_binding_level->is_try_scope = 1;\n+      break;\n+\n+    case sk_catch:\n+      current_binding_level->is_catch_scope = 1;\n+      break;\n+\n+    case sk_for:\n+      current_binding_level->is_for_scope = 1;\n+      break;\n+\n     case sk_template_spec:\n       current_binding_level->template_spec_p = 1;\n       /* Fall through.  */\n@@ -876,28 +891,6 @@ finish_scope ()\n   poplevel (0, 0, 0);\n }\n \n-void\n-note_level_for_for ()\n-{\n-  current_binding_level->is_for_scope = 1;\n-}\n-\n-/* Record that the current binding level represents a try block.  */\n-\n-void\n-note_level_for_try ()\n-{\n-  current_binding_level->is_try_scope = 1;\n-}\n-\n-/* Record that the current binding level represents a catch block.  */\n-\n-void\n-note_level_for_catch ()\n-{\n-  current_binding_level->is_catch_scope = 1;\n-}\n-\n /* For a binding between a name and an entity at a block scope,\n    this is the `struct cp_binding_level' for the block.  */\n #define BINDING_LEVEL(NODE) \\\n@@ -1394,7 +1387,7 @@ poplevel (keep, reverse, functionbody)\n \n   /* We still support the old for-scope rules, whereby the variables\n      in a for-init statement were in scope after the for-statement\n-     ended.  We only use the new rules in flag_new_for_scope is\n+     ended.  We only use the new rules if flag_new_for_scope is\n      nonzero.  */\n   leaving_for_scope\n     = current_binding_level->is_for_scope && flag_new_for_scope == 1;\n@@ -8199,8 +8192,6 @@ maybe_inject_for_scope_var (decl)\n \t    = DECL_SHADOWED_FOR_VAR (BINDING_VALUE (outer_binding));\n \t  current_binding_level->is_for_scope = 0;\n \t}\n-      else if (DECL_IN_MEMORY_P (decl))\n-\tpreserve_temp_slots (DECL_RTL (decl));\n     }\n }\n "}, {"sha": "a4953c888cbba26db01923097b24508571b424a2", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=92bc13234630d8ac1953a864c7ae8da649a3f660", "patch": "@@ -1198,7 +1198,7 @@ static cp_parser_context *cp_parser_context_new\n \n /* Class variables.  */\n \n-static GTY(()) cp_parser_context* cp_parser_context_free_list;\n+static GTY((deletable (\"\"))) cp_parser_context* cp_parser_context_free_list;\n \n /* Constructors and destructors.  */\n \n@@ -8332,7 +8332,6 @@ cp_parser_template_argument (parser)\n \n      Therefore, we try a type-id first.  */\n   cp_parser_parse_tentatively (parser);\n-  /* Otherwise, try a type-id.  */\n   argument = cp_parser_type_id (parser);\n   /* If the next token isn't a `,' or a `>', then this argument wasn't\n      really finished.  */"}, {"sha": "6613fae6566e2ba520c4f841f878c4f37ab0286d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=92bc13234630d8ac1953a864c7ae8da649a3f660", "patch": "@@ -7483,13 +7483,6 @@ tsubst_expr (t, args, complain, in_decl)\n     \n   switch (TREE_CODE (t))\n     {\n-    case RETURN_INIT:\n-      prep_stmt (t);\n-      finish_named_return_value\n-\t(TREE_OPERAND (t, 0),\n-\t tsubst_expr (TREE_OPERAND (t, 1), args, complain, in_decl));\n-      break;\n-\n     case CTOR_INITIALIZER:\n       prep_stmt (t);\n       finish_mem_initializers (tsubst_initializer_list "}, {"sha": "f93773f95ba4e5387eb8b3ffdf40f50fcba07f69", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 104, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=92bc13234630d8ac1953a864c7ae8da649a3f660", "patch": "@@ -58,7 +58,6 @@ static void emit_associated_thunks PARAMS ((tree));\n static void genrtl_try_block PARAMS ((tree));\n static void genrtl_eh_spec_block PARAMS ((tree));\n static void genrtl_handler PARAMS ((tree));\n-static void genrtl_named_return_value PARAMS ((void));\n static void cp_expand_stmt PARAMS ((tree));\n static void genrtl_start_function PARAMS ((tree));\n static void genrtl_finish_function PARAMS ((tree));\n@@ -145,13 +144,13 @@ do_poplevel ()\n /* Begin a new scope.  */ \n \n void\n-do_pushlevel ()\n+do_pushlevel (scope_kind sk)\n {\n   if (stmts_are_full_exprs_p ())\n     {\n       if (!processing_template_decl)\n \tadd_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);\n-      pushlevel (0);\n+      begin_scope (sk);\n     }\n }\n \n@@ -245,7 +244,7 @@ tree\n begin_if_stmt ()\n {\n   tree r;\n-  do_pushlevel ();\n+  do_pushlevel (sk_block);\n   r = build_stmt (IF_STMT, NULL_TREE, NULL_TREE, NULL_TREE);\n   add_stmt (r);\n   return r;\n@@ -309,7 +308,7 @@ begin_while_stmt ()\n   tree r;\n   r = build_stmt (WHILE_STMT, NULL_TREE, NULL_TREE);\n   add_stmt (r);\n-  do_pushlevel ();\n+  do_pushlevel (sk_block);\n   return r;\n }\n \n@@ -429,10 +428,7 @@ begin_for_stmt ()\n \t\t  NULL_TREE, NULL_TREE);\n   NEW_FOR_SCOPE_P (r) = flag_new_for_scope > 0;\n   if (NEW_FOR_SCOPE_P (r))\n-    {\n-      do_pushlevel ();\n-      note_level_for_for ();\n-    }\n+    do_pushlevel (sk_for);\n   add_stmt (r);\n \n   return r;\n@@ -447,7 +443,7 @@ finish_for_init_stmt (for_stmt)\n {\n   if (last_tree != for_stmt)\n     RECHAIN_STMTS (for_stmt, FOR_INIT_STMT (for_stmt));\n-  do_pushlevel ();\n+  do_pushlevel (sk_block);\n }\n \n /* Finish the COND of a for-statement, which may be given by\n@@ -534,7 +530,7 @@ tree\n begin_switch_stmt ()\n {\n   tree r;\n-  do_pushlevel ();\n+  do_pushlevel (sk_block);\n   r = build_stmt (SWITCH_STMT, NULL_TREE, NULL_TREE, NULL_TREE);\n   add_stmt (r);\n   return r;\n@@ -766,8 +762,7 @@ begin_handler ()\n   add_stmt (r);\n   /* Create a binding level for the eh_info and the exception object\n      cleanup.  */\n-  do_pushlevel ();\n-  note_level_for_catch ();\n+  do_pushlevel (sk_catch);\n   return r;\n }\n \n@@ -834,11 +829,7 @@ begin_compound_stmt (has_no_scope)\n   last_expr_type = NULL_TREE;\n \n   if (!has_no_scope)\n-    {\n-      do_pushlevel ();\n-      if (is_try)\n-      \tnote_level_for_try ();\n-    }\n+    do_pushlevel (is_try ? sk_try : sk_block);\n   else\n     /* Normally, we try hard to keep the BLOCK for a\n        statement-expression.  But, if it's a statement-expression with\n@@ -1013,88 +1004,6 @@ finish_eh_cleanup (cleanup)\n   add_stmt (r);\n }\n \n-/* Generate the RTL for a RETURN_INIT.  */\n-\n-static void\n-genrtl_named_return_value ()\n-{\n-  tree decl = DECL_RESULT (current_function_decl);\n-\n-  /* If this named return value comes in a register, put it in a\n-     pseudo-register.  */\n-  if (DECL_REGISTER (decl))\n-    {\n-      /* Note that the mode of the old DECL_RTL may be wider than the\n-\t mode of DECL_RESULT, depending on the calling conventions for\n-\t the processor.  For example, on the Alpha, a 32-bit integer\n-\t is returned in a DImode register -- the DECL_RESULT has\n-\t SImode but the DECL_RTL for the DECL_RESULT has DImode.  So,\n-\t here, we use the mode the back-end has already assigned for\n-\t the return value.  */\n-      SET_DECL_RTL (decl, gen_reg_rtx (GET_MODE (DECL_RTL (decl))));\n-      if (TREE_ADDRESSABLE (decl))\n-\tput_var_into_stack (decl);\n-    }\n-\n-  emit_local_var (decl);\n-}\n-\n-/* Bind a name and initialization to the return value of\n-   the current function.  */\n-\n-void\n-finish_named_return_value (return_id, init)\n-     tree return_id, init;\n-{\n-  tree decl = DECL_RESULT (current_function_decl);\n-\n-  /* Give this error as many times as there are occurrences, so that\n-     users can use Emacs compilation buffers to find and fix all such\n-     places.  */\n-  if (pedantic)\n-    pedwarn (\"ISO C++ does not permit named return values\");\n-  cp_deprecated (\"the named return value extension\");\n-\n-  if (return_id != NULL_TREE)\n-    {\n-      if (DECL_NAME (decl) == NULL_TREE)\n-\tDECL_NAME (decl) = return_id;\n-      else\n-\t{\n-\t  error (\"return identifier `%D' already in place\", return_id);\n-\t  return;\n-\t}\n-    }\n-\n-  /* Can't let this happen for constructors.  */\n-  if (DECL_CONSTRUCTOR_P (current_function_decl))\n-    {\n-      error (\"can't redefine default return value for constructors\");\n-      return;\n-    }\n-\n-  /* If we have a named return value, put that in our scope as well.  */\n-  if (DECL_NAME (decl) != NULL_TREE)\n-    {\n-      /* Let `cp_finish_decl' know that this initializer is ok.  */\n-      DECL_INITIAL (decl) = init;\n-      if (doing_semantic_analysis_p ())\n-\tpushdecl (decl);\n-      if (!processing_template_decl) \n-\t{\n-\t  cp_finish_decl (decl, init, NULL_TREE, 0);\n-\t  add_stmt (build_stmt (RETURN_INIT, NULL_TREE, NULL_TREE));\n-\t}\n-      else\n-\tadd_stmt (build_stmt (RETURN_INIT, return_id, init));\n-    }\n-\n-  /* Don't use tree-inlining for functions with named return values.\n-     That doesn't work properly because we don't do any translation of\n-     the RETURN_INITs when they are copied.  */\n-  DECL_UNINLINABLE (current_function_decl) = 1;\n-}\n-\n /* Begin processing a mem-initializer-list.  */\n \n void\n@@ -2267,10 +2176,6 @@ cp_expand_stmt (t)\n       genrtl_handler (t);\n       break;\n \n-    case RETURN_INIT:\n-      genrtl_named_return_value ();\n-      break;\n-\n     case USING_STMT:\n       break;\n     "}, {"sha": "707b5fcca7609890f4ac6c9bb21c138933e36a65", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=92bc13234630d8ac1953a864c7ae8da649a3f660", "patch": "@@ -1104,7 +1104,6 @@ cp_statement_code_p (code)\n   switch (code)\n     {\n     case CTOR_INITIALIZER:\n-    case RETURN_INIT:\n     case TRY_BLOCK:\n     case HANDLER:\n     case EH_SPEC_BLOCK:"}, {"sha": "f3378e4af02b2b35673692ea250387d7b7698580", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92bc13234630d8ac1953a864c7ae8da649a3f660", "patch": "@@ -1,5 +1,7 @@\n 2002-12-31  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* g++.dg/init/array9.C: New test.\n+\n \tPR c++/9112\n \t* g++.dg/parse/expr1.C: New test.\n "}, {"sha": "d37e00e5b0e4342ecd5873b163815547b6cee12c", "filename": "gcc/testsuite/g++.dg/init/array9.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92bc13234630d8ac1953a864c7ae8da649a3f660/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Farray9.C?ref=92bc13234630d8ac1953a864c7ae8da649a3f660", "patch": "@@ -0,0 +1,9 @@\n+struct T {\n+  T ();\n+};\n+\n+void f () {\n+  T t[2];\n+  for (int i = 0; i < 10; ++i);\n+  int i = 0;\n+}"}]}