{"sha": "eb80a362bc7b382baf8541e84ccab33a887dd58a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI4MGEzNjJiYzdiMzgyYmFmODU0MWU4NGNjYWIzM2E4ODdkZDU4YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-09T23:30:37Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-01-09T23:30:37Z"}, "message": "compiler: move some escape check to Mark_address_taken\n    \n    Move some check of escape state earlier, from get_backend to\n    Mark_address_taken. So we can reclaim escape analysis Nodes\n    before kicking off the backend (not done in this CL). Also it\n    makes it easier to check variables and closures do not escape\n    when the escape analysis is run for the runtime package (also\n    not done in this CL).\n    \n    Reviewed-on: https://go-review.googlesource.com/85735\n\nFrom-SVN: r256406", "tree": {"sha": "10f75f4863f960463d056f07e7684bacf25e5850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10f75f4863f960463d056f07e7684bacf25e5850"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb80a362bc7b382baf8541e84ccab33a887dd58a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb80a362bc7b382baf8541e84ccab33a887dd58a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb80a362bc7b382baf8541e84ccab33a887dd58a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb80a362bc7b382baf8541e84ccab33a887dd58a/comments", "author": null, "committer": null, "parents": [{"sha": "41a6da2de5102b6052175c82ad2fb2357c9eceab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a6da2de5102b6052175c82ad2fb2357c9eceab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a6da2de5102b6052175c82ad2fb2357c9eceab"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "b3f314a967cd2115875001a15b05245ddfd05d48", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb80a362bc7b382baf8541e84ccab33a887dd58a/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb80a362bc7b382baf8541e84ccab33a887dd58a/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=eb80a362bc7b382baf8541e84ccab33a887dd58a", "patch": "@@ -1,4 +1,4 @@\n-cf5a64066fa21b20beae0b895c05d26af53e13e0\n+584fdecefce831c3471dbd4857ba0ce0be2b5212\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "319fc9e693474c812e4e051538280bb59cec4430", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb80a362bc7b382baf8541e84ccab33a887dd58a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb80a362bc7b382baf8541e84ccab33a887dd58a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=eb80a362bc7b382baf8541e84ccab33a887dd58a", "patch": "@@ -12383,9 +12383,7 @@ Allocation_expression::do_get_backend(Translate_context* context)\n   Gogo* gogo = context->gogo();\n   Location loc = this->location();\n \n-  Node* n = Node::make_node(this);\n-  if (this->allocate_on_stack_\n-      || (n->encoding() & ESCAPE_MASK) == int(Node::ESCAPE_NONE))\n+  if (this->allocate_on_stack_)\n     {\n       int64_t size;\n       bool ok = this->type_->backend_type_size(gogo, &size);\n@@ -13161,13 +13159,8 @@ Slice_construction_expression::do_get_backend(Translate_context* context)\n     }\n   else\n     {\n+      go_assert(this->storage_escapes_ || this->element_count() == 0);\n       space = Expression::make_heap_expression(this->array_val_, loc);\n-      Node* n = Node::make_node(this);\n-      if ((n->encoding() & ESCAPE_MASK) == int(Node::ESCAPE_NONE))\n-\t{\n-\t  n = Node::make_node(space);\n-\t  n->set_encoding(Node::ESCAPE_NONE);\n-\t}\n     }\n \n   // Build a constructor for the slice.\n@@ -14261,8 +14254,7 @@ Heap_expression::do_get_backend(Translate_context* context)\n   Btype* btype = this->type()->get_backend(gogo);\n \n   Expression* alloc = Expression::make_allocation(etype, loc);\n-  Node* n = Node::make_node(this);\n-  if ((n->encoding() & ESCAPE_MASK) == int(Node::ESCAPE_NONE))\n+  if (this->allocate_on_stack_)\n     alloc->allocation_expression()->set_allocate_on_stack();\n   Bexpression* space = alloc->get_backend(context);\n "}, {"sha": "6b00cab92e39337725377460ac2c1008cde96206", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb80a362bc7b382baf8541e84ccab33a887dd58a/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb80a362bc7b382baf8541e84ccab33a887dd58a/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=eb80a362bc7b382baf8541e84ccab33a887dd58a", "patch": "@@ -3870,13 +3870,17 @@ class Heap_expression : public Expression\n  public:\n   Heap_expression(Expression* expr, Location location)\n     : Expression(EXPRESSION_HEAP, location),\n-      expr_(expr)\n+      expr_(expr), allocate_on_stack_(false)\n   { }\n \n   Expression*\n   expr() const\n   { return this->expr_; }\n \n+  void\n+  set_allocate_on_stack()\n+  { this->allocate_on_stack_ = true; }\n+\n  protected:\n   int\n   do_traverse(Traverse* traverse)\n@@ -3910,6 +3914,8 @@ class Heap_expression : public Expression\n  private:\n   // The expression which is being put on the heap.\n   Expression* expr_;\n+  // Whether or not this is a stack allocation.\n+  bool allocate_on_stack_;\n };\n \n // A receive expression."}, {"sha": "77a59ac4c7c260a76803521e0b4dba3485991ff3", "filename": "gcc/go/gofrontend/wb.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb80a362bc7b382baf8541e84ccab33a887dd58a/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb80a362bc7b382baf8541e84ccab33a887dd58a/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fwb.cc?ref=eb80a362bc7b382baf8541e84ccab33a887dd58a", "patch": "@@ -65,6 +65,25 @@ Mark_address_taken::expression(Expression** pexpr)\n       aie->array()->address_taken(escapes);\n     }\n \n+  if (expr->allocation_expression() != NULL)\n+    {\n+      Node* n = Node::make_node(expr);\n+      if ((n->encoding() & ESCAPE_MASK) == Node::ESCAPE_NONE)\n+        expr->allocation_expression()->set_allocate_on_stack();\n+    }\n+  if (expr->heap_expression() != NULL)\n+    {\n+      Node* n = Node::make_node(expr);\n+      if ((n->encoding() & ESCAPE_MASK) == Node::ESCAPE_NONE)\n+        expr->heap_expression()->set_allocate_on_stack();\n+    }\n+  if (expr->slice_literal() != NULL)\n+    {\n+      Node* n = Node::make_node(expr);\n+      if ((n->encoding() & ESCAPE_MASK) == Node::ESCAPE_NONE)\n+        expr->slice_literal()->set_storage_does_not_escape();\n+    }\n+\n   // Rewrite non-escaping makeslice with constant size to stack allocation.\n   Unsafe_type_conversion_expression* uce =\n     expr->unsafe_conversion_expression();"}]}