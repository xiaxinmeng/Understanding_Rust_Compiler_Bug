{"sha": "7bad794aa005aa3ee52fc9c872051d8346c09a24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JhZDc5NGFhMDA1YWEzZWU1MmZjOWM4NzIwNTFkODM0NmMwOWEyNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-08T10:48:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-08T10:48:54Z"}, "message": "c-lex.c (c_lex_with_flags): For CPP_COMMENT token with PREV_FALLTHROUGH...\n\n\t* c-lex.c (c_lex_with_flags) <case CPP_COMMENT>: For CPP_COMMENT\n\ttoken with PREV_FALLTHROUGH, skip all following CPP_PADDING and\n\tCPP_COMMENT tokens and set add_flags to PREV_FALLTHROUGH afterwards.\n\n\t* doc/invoke.texi (-Wimplicit-fallthrough): Document the accepted\n\tFALLTHRU comment styles.\n\n\t* lex.c (fallthrough_comment_p): Fix off-by-one size comparison\n\terrors, cleanup.\n\t(_cpp_lex_direct): Allow arbitrary comments in between\n\tfallthrough_comment_p comment and following token.\n\n\t* c-c++-common/Wimplicit-fallthrough-23.c: New test.\n\t* c-c++-common/Wimplicit-fallthrough-24.c: New test.\n\nFrom-SVN: r240884", "tree": {"sha": "dbcbde73147d32631dd626a01571e5964d9ff5fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbcbde73147d32631dd626a01571e5964d9ff5fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bad794aa005aa3ee52fc9c872051d8346c09a24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bad794aa005aa3ee52fc9c872051d8346c09a24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bad794aa005aa3ee52fc9c872051d8346c09a24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bad794aa005aa3ee52fc9c872051d8346c09a24/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6dc29c6db124fab32ab9b69cfb283e078cc881fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc29c6db124fab32ab9b69cfb283e078cc881fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dc29c6db124fab32ab9b69cfb283e078cc881fc"}], "stats": {"total": 228, "additions": 203, "deletions": 25}, "files": [{"sha": "353fdba709cd4cc12756e594d82afb05dc91eb8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bad794aa005aa3ee52fc9c872051d8346c09a24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bad794aa005aa3ee52fc9c872051d8346c09a24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bad794aa005aa3ee52fc9c872051d8346c09a24", "patch": "@@ -1,3 +1,8 @@\n+2016-10-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* doc/invoke.texi (-Wimplicit-fallthrough): Document the accepted\n+\tFALLTHRU comment styles.\n+\n 2016-10-07  Andrew Pinski  <apinski@cavium.com>\n \n \t* config/aarch64/aarch64-arches.def (AARCH64_ARCH): #undef at the end."}, {"sha": "9f6b16d7306cac4b1ebc259593e6ee98803a2b10", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bad794aa005aa3ee52fc9c872051d8346c09a24/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bad794aa005aa3ee52fc9c872051d8346c09a24/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7bad794aa005aa3ee52fc9c872051d8346c09a24", "patch": "@@ -1,3 +1,9 @@\n+2016-10-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-lex.c (c_lex_with_flags) <case CPP_COMMENT>: For CPP_COMMENT\n+\ttoken with PREV_FALLTHROUGH, skip all following CPP_PADDING and\n+\tCPP_COMMENT tokens and set add_flags to PREV_FALLTHROUGH afterwards.\n+\n 2016-10-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tImplement LWG2296 helper intrinsic"}, {"sha": "e3803b0186cd5d42fd2701a572bad9bb1c08d3ae", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bad794aa005aa3ee52fc9c872051d8346c09a24/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bad794aa005aa3ee52fc9c872051d8346c09a24/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=7bad794aa005aa3ee52fc9c872051d8346c09a24", "patch": "@@ -596,9 +596,21 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n     case CPP_MACRO_ARG:\n       gcc_unreachable ();\n \n-    /* CPP_COMMENT will appear when compiling with -C and should be\n-       ignored.  */\n-     case CPP_COMMENT:\n+    /* CPP_COMMENT will appear when compiling with -C.  Ignore, except\n+       when it is a FALLTHROUGH comment, in that case set\n+       PREV_FALLTHROUGH flag on the next non-comment token.  */\n+    case CPP_COMMENT:\n+      if (tok->flags & PREV_FALLTHROUGH)\n+\t{\n+\t  do\n+\t    {\n+\t      tok = cpp_get_token_with_location (parse_in, loc);\n+\t      type = tok->type;\n+\t    }\n+\t  while (type == CPP_PADDING || type == CPP_COMMENT);\n+\t  add_flags |= PREV_FALLTHROUGH;\n+\t  goto retry_after_at;\n+\t}\n        goto retry;\n \n     default:"}, {"sha": "e1a3e5f291faebd42e08387d108b942f3d40ac75", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bad794aa005aa3ee52fc9c872051d8346c09a24/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bad794aa005aa3ee52fc9c872051d8346c09a24/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7bad794aa005aa3ee52fc9c872051d8346c09a24", "patch": "@@ -4170,10 +4170,26 @@ C++17 provides a standard way to suppress the @option{-Wimplicit-fallthrough}\n warning using @code{[[fallthrough]];} instead of the GNU attribute.  In C++11\n or C++14 users can use @code{[[gnu::fallthrough]];}, which is a GNU extension.\n Instead of the these attributes, it is also possible to add a \"falls through\"\n-comment to silence the warning.  GCC accepts a wide range of such comments,\n-for example all of \"Falls through.\", \"fallthru\", \"FALLS-THROUGH\" work.  This\n-comment needs to consist of two words merely, optionally followed by periods\n-or whitespaces.\n+comment to silence the warning.  The whole body of the C or C++ style comment\n+should match one of the following regular expressions:\n+\n+@itemize @bullet\n+\n+@item @code{-fallthrough}\n+\n+@item @code{@@fallthrough@@}\n+\n+@item @code{[ \\t]*FALL(S | |-)?THR(OUGH|U)\\.?[ \\t]*}\n+\n+@item @code{[ \\t]*Fall((s | |-)[Tt]|t)hr(ough|u)\\.?[ \\t]*}\n+\n+@item @code{[ \\t]*fall(s | |-)?thr(ough|u)\\.?[ \\t]*}\n+\n+@end itemize\n+\n+and the comment needs to be followed after optional whitespace and other comments\n+by @code{case} or @code{default} keywords or by a user label that preceeds some\n+@code{case} or @code{default} label.\n \n @smallexample\n @group"}, {"sha": "1868c4cca8f6291b19daae38111ec19f0abeed6b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bad794aa005aa3ee52fc9c872051d8346c09a24/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bad794aa005aa3ee52fc9c872051d8346c09a24/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7bad794aa005aa3ee52fc9c872051d8346c09a24", "patch": "@@ -1,3 +1,8 @@\n+2016-10-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/Wimplicit-fallthrough-23.c: New test.\n+\t* c-c++-common/Wimplicit-fallthrough-24.c: New test.\n+\n 2016-10-07  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* gfortran.dg/dec_union_11.f90: New testcase."}, {"sha": "137b517c2dd225a62ee251e9d33e8b1a25afecbe", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-23.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bad794aa005aa3ee52fc9c872051d8346c09a24/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bad794aa005aa3ee52fc9c872051d8346c09a24/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-23.c?ref=7bad794aa005aa3ee52fc9c872051d8346c09a24", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wimplicit-fallthrough\" } */\n+\n+void bar (int);\n+\n+void\n+foo (int i)\n+{\n+  switch (i)\n+    {\n+    case 1:\n+      bar (1);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /* FALLTHROUGH */\n+    case 2:\n+      bar (2);\n+      break;\n+    case 3:\n+      bar (3);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /* FALLS THRU.  */\n+      /* Some other comment.  */\n+    case 4:\n+      bar (4);\n+      break;\n+    case 7:\n+      bar (7);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /* Some comment.  */\n+      /* fallthrough.  */\n+      /* Some other comment.  */\n+      /* And yet another.  */\n+    case 8:\n+      bar (8);\n+      break;\n+    case 15:\n+      bar (15);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /*-fallthrough*/\n+    case 16:\n+      bar (16);\n+      break;\n+    case 17:\n+      bar (17);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /*@fallthrough@*/\n+    case 18:\n+      bar (18);\n+      break;\n+    case 23:\n+      bar (23);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /*fallthru*/\n+    case 24:\n+      bar (24);\n+      break;\n+    case 31:\n+      bar (31);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /*Falls thru*/\n+    case 32:\n+      bar (32);\n+      break;\n+    case 33:\n+      bar (33);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /*Fall-through*/\n+    case 34:\n+      bar (34);\n+      break;\n+    default:\n+      break;\n+    }\n+  switch (i)\n+    {\n+    case 1:\n+      bar (1);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      // FALLTHROUGH\n+    case 2:\n+      bar (2);\n+      break;\n+    case 3:\n+      bar (3);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      // FALLS THRU.  \n+      // Some other comment.\n+    case 4:\n+      bar (4);\n+      break;\n+    case 7:\n+      bar (7);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      // Some comment.\n+      // fallthrough\n+      // Some other comment.\n+      // And yet another.\n+    case 8:\n+      bar (8);\n+      break;\n+    case 15:\n+      bar (15);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      //-fallthrough\n+    case 16:\n+      bar (16);\n+      break;\n+    case 17:\n+      bar (17);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      //@fallthrough@\n+    case 18:\n+      bar (18);\n+      break;\n+    case 23:\n+      bar (23);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      //fallthru\n+    case 24:\n+      bar (24);\n+      break;\n+    case 31:\n+      bar (31);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      //Falls thru\n+    case 32:\n+      bar (32);\n+      break;\n+    case 33:\n+      bar (33);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      //Fall-through\n+    case 34:\n+      bar (34);\n+      break;\n+    default:\n+      break;\n+    }\n+}"}, {"sha": "15f33c670c2433a714501f0250699f7bf73aa315", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-24.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bad794aa005aa3ee52fc9c872051d8346c09a24/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bad794aa005aa3ee52fc9c872051d8346c09a24/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-24.c?ref=7bad794aa005aa3ee52fc9c872051d8346c09a24", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wimplicit-fallthrough -C\" } */\n+\n+#include \"Wimplicit-fallthrough-23.c\""}, {"sha": "faecb162caf173ce7fdb4b91f1ff5e568059a03e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bad794aa005aa3ee52fc9c872051d8346c09a24/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bad794aa005aa3ee52fc9c872051d8346c09a24/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7bad794aa005aa3ee52fc9c872051d8346c09a24", "patch": "@@ -1,3 +1,10 @@\n+2016-10-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lex.c (fallthrough_comment_p): Fix off-by-one size comparison\n+\terrors, cleanup.\n+\t(_cpp_lex_direct): Allow arbitrary comments in between\n+\tfallthrough_comment_p comment and following token.\n+\n 2016-10-04  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \tPR target/77847"}, {"sha": "d960aa869e4c7277ae1f78b280cb49e6af4e0e18", "filename": "libcpp/lex.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bad794aa005aa3ee52fc9c872051d8346c09a24/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bad794aa005aa3ee52fc9c872051d8346c09a24/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=7bad794aa005aa3ee52fc9c872051d8346c09a24", "patch": "@@ -2061,7 +2061,7 @@ fallthrough_comment_p (cpp_reader *pfile, const unsigned char *comment_start)\n     }\n   /* Whole comment contents (regex):\n      [ \\t]*FALL(S | |-)?THR(OUGH|U)\\.?[ \\t]*\n-     [ \\t]*Fall(s | |-)?[Tt]hr(ough|u)\\.?[ \\t]*\n+     [ \\t]*Fall((s | |-)[Tt]|t)hr(ough|u)\\.?[ \\t]*\n      [ \\t]*fall(s | |-)?thr(ough|u)\\.?[ \\t]*\n    */\n   else\n@@ -2071,30 +2071,27 @@ fallthrough_comment_p (cpp_reader *pfile, const unsigned char *comment_start)\n       unsigned char f = *from;\n       if (f != 'F' && f != 'f')\n \treturn false;\n-      if ((size_t) (pfile->buffer->cur - from) < sizeof \"fallthrough\")\n+      if ((size_t) (pfile->buffer->cur - from) < sizeof \"fallthru\" - 1)\n \treturn false;\n       bool all_upper = false;\n       if (f == 'F' && memcmp (from + 1, \"ALL\", sizeof \"ALL\" - 1) == 0)\n \tall_upper = true;\n       else if (memcmp (from + 1, \"all\", sizeof \"all\" - 1))\n \treturn false;\n-      if (from[sizeof \"fall\" - 1] == (all_upper ? 'S' : 's')\n-\t  && from[sizeof \"falls\" - 1] == ' ')\n-\tfrom += sizeof \"falls \" - 1;\n-      else if (from[sizeof \"fall\" - 1] == ' '\n-\t       || from[sizeof \"fall\" - 1] == '-')\n-\tfrom += sizeof \"fall \" - 1;\n-      else if (from[sizeof \"fall\" - 1] != (all_upper ? 'T' : 't'))\n+      from += sizeof \"fall\" - 1;\n+      if (*from == (all_upper ? 'S' : 's') && from[1] == ' ')\n+\tfrom += 2;\n+      else if (*from == ' ' || *from == '-')\n+\tfrom++;\n+      else if (*from != (all_upper ? 'T' : 't'))\n \treturn false;\n-      else\n-\tfrom += sizeof \"fall\" - 1;\n       if ((f == 'f' || *from != 'T') && (all_upper || *from != 't'))\n \treturn false;\n-      if ((size_t) (pfile->buffer->cur - from) < sizeof \"thru\")\n+      if ((size_t) (pfile->buffer->cur - from) < sizeof \"thru\" - 1)\n \treturn false;\n       if (memcmp (from + 1, all_upper ? \"HRU\" : \"hru\", sizeof \"hru\" - 1))\n \t{\n-\t  if ((size_t) (pfile->buffer->cur - from) < sizeof \"through\")\n+\t  if ((size_t) (pfile->buffer->cur - from) < sizeof \"through\" - 1)\n \t    return false;\n \t  if (memcmp (from + 1, all_upper ? \"HROUGH\" : \"hrough\",\n \t\t      sizeof \"hrough\" - 1))\n@@ -2399,7 +2396,8 @@ _cpp_lex_direct (cpp_reader *pfile)\n {\n   cppchar_t c;\n   cpp_buffer *buffer;\n-  const unsigned char *comment_start = NULL;\n+  const unsigned char *comment_start;\n+  bool fallthrough_comment = false;\n   cpp_token *result = pfile->cur_token++;\n \n  fresh_line:\n@@ -2427,7 +2425,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t  return result;\n \t}\n       if (buffer != pfile->buffer)\n-\tcomment_start = NULL;\n+\tfallthrough_comment = false;\n       if (!pfile->keep_tokens)\n \t{\n \t  pfile->cur_run = &pfile->base_run;\n@@ -2536,8 +2534,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t}\n \n       /* Signal FALLTHROUGH comment followed by another token.  */\n-      if (comment_start\n-\t  && fallthrough_comment_p (pfile, comment_start))\n+      if (fallthrough_comment)\n \tresult->flags |= PREV_FALLTHROUGH;\n       break;\n \n@@ -2624,13 +2621,16 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t  break;\n \t}\n \n+      if (fallthrough_comment_p (pfile, comment_start))\n+\tfallthrough_comment = true;\n+\n       if (!pfile->state.save_comments)\n \t{\n \t  result->flags |= PREV_WHITE;\n \t  goto update_tokens_line;\n \t}\n \n-      if (fallthrough_comment_p (pfile, comment_start))\n+      if (fallthrough_comment)\n \tresult->flags |= PREV_FALLTHROUGH;\n \n       /* Save the comment as a token in its own right.  */"}]}