{"sha": "4a18c06666f71af6337a76be16d4deb67f57eb51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGExOGMwNjY2NmY3MWFmNjMzN2E3NmJlMTZkNGRlYjY3ZjU3ZWI1MQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-07-19T13:28:21Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-07-19T13:28:21Z"}, "message": "class.c (add_implicitly_declared_members): Use classtype_has_move_assign_or_move_ctor_p.\n\n\t* class.c (add_implicitly_declared_members): Use\n\tclasstype_has_move_assign_or_move_ctor_p.\n\t(classtype_has_move_assign_or_move_ctor,\n\tclasstype_has_user_move_assign_or_move_ctor_p): Merge into ...\n\t(classtype_has_move_assign_or_move_ctor_p): ... this new function.\n\t* cp-tree.h (classtype_has_user_move_assign_or_move_ctor_p):\n\tReplace with ...\n\t(classtype_has_move_assign_or_move_ctor_p): ... this.\n\t* method.c (maybe_explain_implicit_delete, lazily_declare_fn): Adjust.\n\t* tree.c (type_has_nontrivial_copy_init): Adjust.\n\nFrom-SVN: r250344", "tree": {"sha": "788e26e4b28be4752664e9f6f6445a3f394107e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/788e26e4b28be4752664e9f6f6445a3f394107e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a18c06666f71af6337a76be16d4deb67f57eb51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a18c06666f71af6337a76be16d4deb67f57eb51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a18c06666f71af6337a76be16d4deb67f57eb51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a18c06666f71af6337a76be16d4deb67f57eb51/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1eba0867060b1643d71d4185fbc23995248092bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eba0867060b1643d71d4185fbc23995248092bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eba0867060b1643d71d4185fbc23995248092bf"}], "stats": {"total": 66, "additions": 31, "deletions": 35}, "files": [{"sha": "597c6b3f6c8bc48824766e71aba30000921aabb3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a18c06666f71af6337a76be16d4deb67f57eb51/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a18c06666f71af6337a76be16d4deb67f57eb51/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4a18c06666f71af6337a76be16d4deb67f57eb51", "patch": "@@ -1,5 +1,16 @@\n 2017-07-19  Nathan Sidwell  <nathan@acm.org>\n \n+\t* class.c (add_implicitly_declared_members): Use\n+\tclasstype_has_move_assign_or_move_ctor_p.\n+\t(classtype_has_move_assign_or_move_ctor,\n+\tclasstype_has_user_move_assign_or_move_ctor_p): Merge into ...\n+\t(classtype_has_move_assign_or_move_ctor_p): ... this new function.\n+\t* cp-tree.h (classtype_has_user_move_assign_or_move_ctor_p):\n+\tReplace with ...\n+\t(classtype_has_move_assign_or_move_ctor_p): ... this.\n+\t* method.c (maybe_explain_implicit_delete, lazily_declare_fn): Adjust.\n+\t* tree.c (type_has_nontrivial_copy_init): Adjust.\n+\n \t* cp-tree.h (PACK_EXPANSION_PARAMETER_PACKS,\n \tPACK_EXPANSION_EXTRA_ARGS): Use TYPE_{MIN,MAX}_VALUE_RAW.\n "}, {"sha": "4b9b93a77a778131bbb4870848142d87170f316e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 15, "deletions": 30, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a18c06666f71af6337a76be16d4deb67f57eb51/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a18c06666f71af6337a76be16d4deb67f57eb51/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=4a18c06666f71af6337a76be16d4deb67f57eb51", "patch": "@@ -150,7 +150,6 @@ static void build_base_fields (record_layout_info, splay_tree, tree *);\n static void check_methods (tree);\n static void remove_zero_width_bit_fields (tree);\n static bool accessible_nvdtor_p (tree);\n-static bool classtype_has_move_assign_or_move_ctor (tree);\n \n /* Used by find_flexarrays and related functions.  */\n struct flexmems_t;\n@@ -3385,7 +3384,7 @@ add_implicitly_declared_members (tree t, tree* access_decls,\n   bool move_ok = false;\n   if (cxx_dialect >= cxx11 && CLASSTYPE_LAZY_DESTRUCTOR (t)\n       && !TYPE_HAS_COPY_CTOR (t) && !TYPE_HAS_COPY_ASSIGN (t)\n-      && !classtype_has_move_assign_or_move_ctor (t))\n+      && !classtype_has_move_assign_or_move_ctor_p (t, false))\n     move_ok = true;\n \n   /* [class.ctor]\n@@ -5457,50 +5456,36 @@ type_has_virtual_destructor (tree type)\n   return (dtor && DECL_VIRTUAL_P (dtor));\n }\n \n-/* Returns true iff class T has move assignment or move constructor.  */\n+/* Returns true iff T, a class, has a move-assignment or\n+   move-constructor.  Does not lazily declare either.\n+   If USER_P is false, any move function will do.  If it is true, the\n+   move function must be user-declared.\n \n-static bool\n-classtype_has_move_assign_or_move_ctor (tree t)\n-{\n-  gcc_assert (!CLASSTYPE_LAZY_MOVE_CTOR (t)\n-\t      && !CLASSTYPE_LAZY_MOVE_ASSIGN (t));\n-\n-  for (ovl_iterator iter (lookup_fnfields_slot_nolazy\n-\t\t\t  (t, ctor_identifier)); iter; ++iter)\n-    if (move_fn_p (*iter))\n-      return true;\n-\n-  for (ovl_iterator iter (lookup_fnfields_slot_nolazy\n-\t\t\t  (t, cp_assignment_operator_id (NOP_EXPR)));\n-       iter; ++iter)\n-    if (move_fn_p (*iter))\n-      return true;\n-\n-  return false;\n-}\n-\n-/* Returns true iff T, a class, has a user-declared move-assignment or\n-   move-constructor.  Note that this is different from\n-   \"user-provided\", which doesn't include functions that are defaulted\n-   in the class.  */\n+   Note that user-declared here is different from \"user-provided\",\n+   which doesn't include functions that are defaulted in the\n+   class.  */\n \n bool\n-classtype_has_user_move_assign_or_move_ctor_p (tree t)\n+classtype_has_move_assign_or_move_ctor_p (tree t, bool user_p)\n {\n+  gcc_assert (user_p\n+\t      || (!CLASSTYPE_LAZY_MOVE_CTOR (t)\n+\t\t  && !CLASSTYPE_LAZY_MOVE_ASSIGN (t)));\n+\n   if (!CLASSTYPE_METHOD_VEC (t))\n     return false;\n \n   if (!CLASSTYPE_LAZY_MOVE_CTOR (t))\n     for (ovl_iterator iter (lookup_fnfields_slot_nolazy (t, ctor_identifier));\n \t iter; ++iter)\n-      if (!DECL_ARTIFICIAL (*iter) && move_fn_p (*iter))\n+      if ((!user_p || !DECL_ARTIFICIAL (*iter)) && move_fn_p (*iter))\n \treturn true;\n \n   if (!CLASSTYPE_LAZY_MOVE_ASSIGN (t))\n     for (ovl_iterator iter (lookup_fnfields_slot_nolazy\n \t\t\t    (t, cp_assignment_operator_id (NOP_EXPR)));\n \t iter; ++iter)\n-      if (!DECL_ARTIFICIAL (*iter) && move_fn_p (*iter))\n+      if ((!user_p || !DECL_ARTIFICIAL (*iter)) && move_fn_p (*iter))\n \treturn true;\n   \n   return false;"}, {"sha": "a76906d1bafaf11335fab594df3512e39b1cd42b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a18c06666f71af6337a76be16d4deb67f57eb51/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a18c06666f71af6337a76be16d4deb67f57eb51/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4a18c06666f71af6337a76be16d4deb67f57eb51", "patch": "@@ -6023,7 +6023,7 @@ extern tree default_init_uninitialized_part (tree);\n extern bool trivial_default_constructor_is_constexpr (tree);\n extern bool type_has_constexpr_default_constructor (tree);\n extern bool type_has_virtual_destructor\t\t(tree);\n-extern bool classtype_has_user_move_assign_or_move_ctor_p (tree);\n+extern bool classtype_has_move_assign_or_move_ctor_p (tree, bool user_declared);\n extern bool type_build_ctor_call\t\t(tree);\n extern bool type_build_dtor_call\t\t(tree);\n extern void explain_non_literal_class\t\t(tree);"}, {"sha": "3c57b41c8d9977b35eb86b3972c42708061a6a27", "filename": "gcc/cp/method.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a18c06666f71af6337a76be16d4deb67f57eb51/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a18c06666f71af6337a76be16d4deb67f57eb51/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=4a18c06666f71af6337a76be16d4deb67f57eb51", "patch": "@@ -1809,7 +1809,7 @@ maybe_explain_implicit_delete (tree decl)\n \t}\n       else if (DECL_ARTIFICIAL (decl)\n \t       && (sfk == sfk_copy_assignment || sfk == sfk_copy_constructor)\n-\t       && classtype_has_user_move_assign_or_move_ctor_p (ctype))\n+\t       && classtype_has_move_assign_or_move_ctor_p (ctype, true))\n \t{\n \t  inform (DECL_SOURCE_LOCATION (decl),\n \t\t  \"%q#D is implicitly declared as deleted because %qT \"\n@@ -2371,10 +2371,10 @@ lazily_declare_fn (special_function_kind sfk, tree type)\n      move assignment operator, the implicitly declared copy constructor is\n      defined as deleted.... */\n   if ((sfk == sfk_copy_assignment || sfk == sfk_copy_constructor)\n-      && classtype_has_user_move_assign_or_move_ctor_p (type))\n+      && classtype_has_move_assign_or_move_ctor_p (type, true))\n     DECL_DELETED_FN (fn) = true;\n \n-  /* A destructor may be virtual.  */\n+  /* Destructors and assignment operators may be virtual.  */\n   if (sfk == sfk_destructor\n       || sfk == sfk_move_assignment\n       || sfk == sfk_copy_assignment)"}, {"sha": "2122450c653eb991bb846366ae750ef9cd3a3847", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a18c06666f71af6337a76be16d4deb67f57eb51/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a18c06666f71af6337a76be16d4deb67f57eb51/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4a18c06666f71af6337a76be16d4deb67f57eb51", "patch": "@@ -3976,7 +3976,7 @@ type_has_nontrivial_copy_init (const_tree type)\n       else if (CLASSTYPE_LAZY_COPY_CTOR (t))\n \t{\n \t  saw_copy = true;\n-\t  if (classtype_has_user_move_assign_or_move_ctor_p (t))\n+\t  if (classtype_has_move_assign_or_move_ctor_p (t, true))\n \t    /* [class.copy]/8 If the class definition declares a move\n \t       constructor or move assignment operator, the implicitly declared\n \t       copy constructor is defined as deleted.... */;"}]}