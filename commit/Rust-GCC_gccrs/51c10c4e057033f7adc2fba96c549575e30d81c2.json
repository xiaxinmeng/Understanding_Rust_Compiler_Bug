{"sha": "51c10c4e057033f7adc2fba96c549575e30d81c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFjMTBjNGUwNTcwMzNmN2FkYzJmYmE5NmM1NDk1NzVlMzBkODFjMg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1998-09-03T17:49:11Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1998-09-03T17:49:11Z"}, "message": "Change (reg:CC 17) to (reg:SI 17)\n\nFrom-SVN: r22221", "tree": {"sha": "ca5ab859ac0991a1ea32b8bce01ea2922a98c3ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca5ab859ac0991a1ea32b8bce01ea2922a98c3ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51c10c4e057033f7adc2fba96c549575e30d81c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c10c4e057033f7adc2fba96c549575e30d81c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51c10c4e057033f7adc2fba96c549575e30d81c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c10c4e057033f7adc2fba96c549575e30d81c2/comments", "author": null, "committer": null, "parents": [{"sha": "7f84cec92c19faa9e728407d8809dbf5562f17f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f84cec92c19faa9e728407d8809dbf5562f17f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f84cec92c19faa9e728407d8809dbf5562f17f0"}], "stats": {"total": 80, "additions": 41, "deletions": 39}, "files": [{"sha": "2c025c6fd51dd7e34f0c801237e330c599240419", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51c10c4e057033f7adc2fba96c549575e30d81c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51c10c4e057033f7adc2fba96c549575e30d81c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51c10c4e057033f7adc2fba96c549575e30d81c2", "patch": "@@ -1,3 +1,9 @@\n+Tue Sep  1 11:30:33 1998  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* config/m32r/m32r.md: Change (reg:CC 17) to (reg:SI 17).\n+\t* config/m32r/m32r.h: Make register 17 be fixed.\n+\t* config/m32r/m32r.c: Use SImode for cc operations.\n+\n Thu Sep  3 18:17:34 1998 Benjamin Kosnik  <bkoz@cygnus.com>\n \n \t* invoke.texi (Warning Options): Add -Wnon-template-friend"}, {"sha": "f88f35b68f4368a336008503b09227bacc45452f", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51c10c4e057033f7adc2fba96c549575e30d81c2/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51c10c4e057033f7adc2fba96c549575e30d81c2/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=51c10c4e057033f7adc2fba96c549575e30d81c2", "patch": "@@ -898,7 +898,7 @@ m32r_select_cc_mode (op, x, y)\n      int op;\n      rtx x, y;\n {\n-  return (int)CCmode;\n+  return (int)SImode;\n }\n \n /* X and Y are two things to compare using CODE.  Emit the compare insn and\n@@ -2150,7 +2150,7 @@ carry_compare_operand (op, int_mode)\n {\n   rtx x;\n \n-  if (GET_MODE (op) != CCmode && GET_MODE (op) != VOIDmode)\n+  if (GET_MODE (op) != SImode && GET_MODE (op) != VOIDmode)\n     return FALSE;\n \n   if (GET_CODE (op) != NE && GET_CODE (op) != EQ)\n@@ -2179,7 +2179,8 @@ emit_cond_move (operands, insn)\n      rtx   insn;\n {\n   static char buffer [100];\n-\n+  char * dest = reg_names [REGNO (operands [0])];\n+  \n   buffer [0] = 0;\n   \n   /* Destination must be a register.  */\n@@ -2190,7 +2191,6 @@ emit_cond_move (operands, insn)\n   if (! conditional_move_operand (operands [3], SImode))\n     abort();\n       \n-\n   /* Check to see if the test is reversed.  */\n   if (GET_CODE (operands [1]) == NE)\n     {\n@@ -2199,24 +2199,13 @@ emit_cond_move (operands, insn)\n       operands [3] = tmp;\n     }\n \n-  /* Catch a special case where 0 or 1 is being loaded into the destination.\n-     Since we already have these values in the C bit we can use a special\n-     instruction.  */\n-  if (zero_and_one (operands [2], operands [3]))\n-    {\n-      char * dest = reg_names [REGNO (operands [0])];\n-      \n-      sprintf (buffer, \"mvfc %s, cbr\", dest);\n-\n-      /* If the true value was '0' then we need to invert the results of the move.  */\n-      if (INTVAL (operands [2]) == 0)\n-\tsprintf (buffer + strlen (buffer), \"\\n\\txor3 %s, %s, #1\",\n-\t\t dest, dest);\n-      \n-      return buffer;\n-    }\n-\n-\n+  sprintf (buffer, \"mvfc %s, cbr\", dest);\n+  \n+  /* If the true value was '0' then we need to invert the results of the move.  */\n+  if (INTVAL (operands [2]) == 0)\n+    sprintf (buffer + strlen (buffer), \"\\n\\txor3 %s, %s, #1\",\n+\t     dest, dest);\n+  \n   return buffer;\n }\n "}, {"sha": "3435a177dcd45ce09b9ba681b663c861e28aaa4a", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51c10c4e057033f7adc2fba96c549575e30d81c2/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51c10c4e057033f7adc2fba96c549575e30d81c2/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=51c10c4e057033f7adc2fba96c549575e30d81c2", "patch": "@@ -434,7 +434,7 @@ if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n #define FIXED_REGISTERS \\\n { 0, 0, 0, 0, 0, 0, 0, 0,\t\\\n   0, 0, 0, 0, 0, 0, 0, 1,\t\\\n-  1, 0 }\n+  1, 1 }\n \n \n /* 1 for registers not available across function calls."}, {"sha": "5349ca82558ddd3cf79e6d450afdbc5708b70345", "filename": "gcc/config/m32r/m32r.md", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51c10c4e057033f7adc2fba96c549575e30d81c2/gcc%2Fconfig%2Fm32r%2Fm32r.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51c10c4e057033f7adc2fba96c549575e30d81c2/gcc%2Fconfig%2Fm32r%2Fm32r.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.md?ref=51c10c4e057033f7adc2fba96c549575e30d81c2", "patch": "@@ -802,7 +802,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"%0\")\n \t\t (match_operand:DI 2 \"register_operand\" \"r\")))\n-   (clobber (reg:CC 17))]\n+   (clobber (reg:SI 17))]\n   \"\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")\n@@ -839,7 +839,7 @@\n }\")\n \n (define_insn \"*clear_c\"\n-  [(set (reg:CC 17)\n+  [(set (reg:SI 17)\n \t(const_int 0))\n    (use (match_operand:SI 0 \"register_operand\" \"r\"))]\n   \"\"\n@@ -851,8 +851,8 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t\t (plus:SI (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t  (reg:CC 17))))\n-   (set (reg:CC 17)\n+\t\t\t  (reg:SI 17))))\n+   (set (reg:SI 17)\n \t(unspec [(const_int 0)] 3))]\n   \"\"\n   \"addx %0,%2\"\n@@ -872,7 +872,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t  (match_operand:DI 2 \"register_operand\" \"r\")))\n-   (clobber (reg:CC 17))]\n+   (clobber (reg:SI 17))]\n   \"\"\n   \"#\"\n   [(set_attr \"type\" \"multi\")\n@@ -912,8 +912,8 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t\t  (minus:SI (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t    (reg:CC 17))))\n-   (set (reg:CC 17)\n+\t\t\t    (reg:SI 17))))\n+   (set (reg:SI 17)\n \t(unspec [(const_int 0)] 3))]\n   \"\"\n   \"subx %0,%2\"\n@@ -1080,8 +1080,8 @@\n ;; preferred.\n \n (define_expand \"cmpsi\"\n-  [(set (reg:CC 17)\n-\t(compare:CC (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (reg:SI 17)\n+\t(compare:SI (match_operand:SI 0 \"register_operand\" \"\")\n \t\t    (match_operand:SI 1 \"nonmemory_operand\" \"\")))]\n   \"\"\n   \"\n@@ -1097,8 +1097,8 @@\n ;; is quite inefficient.  However, it is rarely used.\n \n (define_insn \"cmp_eqsi_insn\"\n-  [(set (reg:CC 17)\n-\t(eq:CC (match_operand:SI 0 \"register_operand\" \"r,r\")\n+  [(set (reg:SI 17)\n+\t(eq:SI (match_operand:SI 0 \"register_operand\" \"r,r\")\n \t       (match_operand:SI 1 \"reg_or_cmp_int16_operand\" \"r,P\")))\n    (clobber (match_scratch:SI 2 \"=&r,&r\"))]\n   \"\"\n@@ -1122,8 +1122,8 @@\n    (set_attr \"length\" \"8,8\")])\n \n (define_insn \"cmp_ltsi_insn\"\n-  [(set (reg:CC 17)\n-\t(lt:CC (match_operand:SI 0 \"register_operand\" \"r,r\")\n+  [(set (reg:SI 17)\n+\t(lt:SI (match_operand:SI 0 \"register_operand\" \"r,r\")\n \t       (match_operand:SI 1 \"reg_or_int16_operand\" \"r,J\")))]\n   \"\"\n   \"@\n@@ -1133,8 +1133,8 @@\n    (set_attr \"length\" \"2,4\")])\n \n (define_insn \"cmp_ltusi_insn\"\n-  [(set (reg:CC 17)\n-\t(ltu:CC (match_operand:SI 0 \"register_operand\" \"r,r\")\n+  [(set (reg:SI 17)\n+\t(ltu:SI (match_operand:SI 0 \"register_operand\" \"r,r\")\n \t        (match_operand:SI 1 \"reg_or_uint16_operand\" \"r,K\")))]\n   \"\"\n   \"@\n@@ -1691,7 +1691,14 @@\n   ]\n )\n \n-\n+(define_insn \"movcc_insn\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(reg:SI 17))]\n+  \"\"\n+  \"mvfc %0, cbr\"\n+  [(set_attr \"type\" \"misc\")\n+   (set_attr \"length\" \"2\")]\n+)\n \n \f\n ;; Split up troublesome insns for better scheduling."}]}