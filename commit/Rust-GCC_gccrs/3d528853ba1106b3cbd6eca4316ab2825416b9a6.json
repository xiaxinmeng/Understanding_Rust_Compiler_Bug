{"sha": "3d528853ba1106b3cbd6eca4316ab2825416b9a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q1Mjg4NTNiYTExMDZiM2NiZDZlY2E0MzE2YWIyODI1NDE2YjlhNg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-05-06T03:47:57Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-05-06T03:47:57Z"}, "message": "generalize build_case_label to the rest of the compiler\n\ngeneralize build_case_label to the rest of the compiler\ngcc/ada/\n\t* gcc-interface/trans.c (Case_Statement_to_gnu): Call\n\tbuild_case_label.\n\ngcc/\n\t* except.c (sjlj_emit_dispatch_table): Call build_case_label.\n\t* gimplify.c (gimplify_switch_expr): Likewise.\n\t* omp-low.c (expand_omp_sections): Likewise.\n\t* tree-eh.c (lower_try_finally_switch): Likewise.\n\t(lower_eh_dispatch): Likewise.\n\t* tree.h (build_case_label): Declare.\n\t* tree.c (build_case_label): Define.\n\ngcc/c-family/\n\t* c-common.c (c_add_case_label): Omit the loc argument to\n\tbuild_case_label.\n\t* c-common.h (build_case_label): Remove.\n\t* c-semantics.c (build_case_label): Remove.\n\ngcc/cp/\n\t* decl.c (finish_case_label): Omit the loc argument to\n\tbuild_case_label.\n\ngcc/fortran/\n\t* trans-decl.c (gfc_trans_entry_master_switch): Call build_case_label.\n\t* trans-io.c (add_case): Likewise.\n\t* trans-stmt.c (gfc_trans_integer_select): Likewise.\n\t(gfc_trans_character_select): Likewise.\n\ngcc/go/\n\t* go-gcc.cc (Gcc_backend::switch_statement): Call build_case_label.\n\ngcc/java/\n\t* expr.c (expand_java_switch): Call build_case_label.\n\t(expand_java_add_case): Likewise.\n\nFrom-SVN: r173467", "tree": {"sha": "039393d181bb08f19b86318385c11bae2f698e2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/039393d181bb08f19b86318385c11bae2f698e2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d528853ba1106b3cbd6eca4316ab2825416b9a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d528853ba1106b3cbd6eca4316ab2825416b9a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d528853ba1106b3cbd6eca4316ab2825416b9a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d528853ba1106b3cbd6eca4316ab2825416b9a6/comments", "author": null, "committer": null, "parents": [{"sha": "d7d058c58a02241c63e6c3cc0099bc5d7f68a153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d058c58a02241c63e6c3cc0099bc5d7f68a153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7d058c58a02241c63e6c3cc0099bc5d7f68a153"}], "stats": {"total": 170, "additions": 107, "deletions": 63}, "files": [{"sha": "2d5bd492966f9821e23c27b5e8b60be84601b3e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -1,3 +1,13 @@\n+2011-05-05  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* except.c (sjlj_emit_dispatch_table): Call build_case_label.\n+\t* gimplify.c (gimplify_switch_expr): Likewise.\n+\t* omp-low.c (expand_omp_sections): Likewise.\n+\t* tree-eh.c (lower_try_finally_switch): Likewise.\n+\t(lower_eh_dispatch): Likewise.\n+\t* tree.h (build_case_label): Declare.\n+\t* tree.c (build_case_label): Define.\n+\n 2011-05-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/40975"}, {"sha": "18c56d0af994ad8896cc9906bd681b48ebffb0e1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -1,3 +1,8 @@\n+2011-05-05  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* gcc-interface/trans.c (Case_Statement_to_gnu): Call\n+\tbuild_case_label.\n+\n 2011-05-05  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* gcc-interface/decl.c (intrin_arglists_compatible_p): Use iterators"}, {"sha": "dc79c6fd27087ef0e51cffe7107d5d275c55cf56", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -2028,9 +2028,8 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n \t  if ((!gnu_low || TREE_CODE (gnu_low) == INTEGER_CST)\n \t      && (!gnu_high || TREE_CODE (gnu_high) == INTEGER_CST))\n \t    {\n-\t      add_stmt_with_node (build3\n-\t\t\t\t  (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t\t   gnu_low, gnu_high,\n+\t      add_stmt_with_node (build_case_label\n+\t\t\t\t  (gnu_low, gnu_high,\n \t\t\t\t   create_artificial_label (input_location)),\n \t\t\t\t  gnat_choice);\n \t      choices_added_p = true;"}, {"sha": "9fa7e29b82b525d2efece8c4ab79f9cb7012b587", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -1,3 +1,10 @@\n+2011-05-05  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* c-common.c (c_add_case_label): Omit the loc argument to\n+\tbuild_case_label.\n+\t* c-common.h (build_case_label): Remove.\n+\t* c-semantics.c (build_case_label): Remove.\n+\n 2011-05-05  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-objc.h (objc_start_method_definition): Update prototype."}, {"sha": "41cb7176554d1f8dd8f6df51604e636290b6314b", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -5327,7 +5327,7 @@ c_add_case_label (location_t loc, splay_tree cases, tree cond, tree orig_type,\n     }\n \n   /* Add a CASE_LABEL to the statement-tree.  */\n-  case_label = add_stmt (build_case_label (loc, low_value, high_value, label));\n+  case_label = add_stmt (build_case_label (low_value, high_value, label));\n   /* Register this case label in the splay tree.  */\n   splay_tree_insert (cases,\n \t\t     (splay_tree_key) low_value,"}, {"sha": "420b877f09d5caff3eeb833d8aae1e03dafa3447", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -831,7 +831,6 @@ extern void warn_for_omitted_condop (location_t, tree);\n \n extern tree do_case (location_t, tree, tree);\n extern tree build_stmt (location_t, enum tree_code, ...);\n-extern tree build_case_label (location_t, tree, tree, tree);\n extern tree build_real_imag_expr (location_t, enum tree_code, tree);\n \n /* These functions must be defined by each front-end which implements"}, {"sha": "a5bd9bacb088f15c17d68e0c738b57356a39e90d", "filename": "gcc/c-family/c-semantics.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fc-family%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fc-family%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-semantics.c?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -131,15 +131,6 @@ build_stmt (location_t loc, enum tree_code code, ...)\n   return ret;\n }\n \n-/* Create a CASE_LABEL_EXPR tree node and return it.  */\n-\n-tree\n-build_case_label (location_t loc,\n-\t\t  tree low_value, tree high_value, tree label_decl)\n-{\n-  return build_stmt (loc, CASE_LABEL_EXPR, low_value, high_value, label_decl);\n-}\n-\n /* Build a REALPART_EXPR or IMAGPART_EXPR, according to CODE, from ARG.  */\n \n tree"}, {"sha": "9dbb57f1049d055177dd9c31bf23b9e77101b4d2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -1,3 +1,8 @@\n+2011-05-05  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* decl.c (finish_case_label): Omit the loc argument to\n+\tbuild_case_label.\n+\n 2011-05-05  Jason Merrill  <jason@redhat.com>\n \n \t* cp-tree.h (REFERENCE_REF_P): Just check the type."}, {"sha": "3622c2ceae6d579b5e26f80f30b6b7159376d3eb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -2970,7 +2970,7 @@ finish_case_label (location_t loc, tree low_value, tree high_value)\n       /* For templates, just add the case label; we'll do semantic\n \t analysis at instantiation-time.  */\n       label = build_decl (loc, LABEL_DECL, NULL_TREE, NULL_TREE);\n-      return add_stmt (build_case_label (loc, low_value, high_value, label));\n+      return add_stmt (build_case_label (low_value, high_value, label));\n     }\n \n   /* Find the condition on which this switch statement depends.  */"}, {"sha": "9578e2e907fe330d22c77adf8334131704fa7391", "filename": "gcc/except.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -1285,12 +1285,11 @@ sjlj_emit_dispatch_table (rtx dispatch_label, int num_dispatch)\n \n \tif (num_dispatch > 1)\n \t  {\n-\t    tree t_label, case_elt;\n+\t    tree t_label, case_elt, t;\n \n \t    t_label = create_artificial_label (UNKNOWN_LOCATION);\n-\t    case_elt = build3 (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t       build_int_cst (integer_type_node, disp_index),\n-\t\t\t       NULL, t_label);\n+\t    t = build_int_cst (integer_type_node, disp_index);\n+\t    case_elt = build_case_label (t, NULL, t_label);\n \t    gimple_switch_set_label (switch_stmt, disp_index, case_elt);\n \n \t    label = label_rtx (t_label);"}, {"sha": "da6d2ab6331745671c3f16ee5211e17654c77ae7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -1,3 +1,10 @@\n+2011-05-05  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* trans-decl.c (gfc_trans_entry_master_switch): Call build_case_label.\n+\t* trans-io.c (add_case): Likewise.\n+\t* trans-stmt.c (gfc_trans_integer_select): Likewise.\n+\t(gfc_trans_character_select): Likewise.\n+\n 2011-05-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* trans-decl.c (trans_function_start): Do not set"}, {"sha": "63f03de5ae180a863ea3b06f20bfcb85fed0c08f", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -4347,7 +4347,7 @@ gfc_trans_entry_master_switch (gfc_entry_list * el)\n       /* Add the case label.  */\n       label = gfc_build_label_decl (NULL_TREE);\n       val = build_int_cst (gfc_array_index_type, el->id);\n-      tmp = build3_v (CASE_LABEL_EXPR, val, NULL_TREE, label);\n+      tmp = build_case_label (val, NULL_TREE, label);\n       gfc_add_expr_to_block (&block, tmp);\n \n       /* And jump to the actual entry point.  */"}, {"sha": "4e019a36c514980fc84556c1342256152eab8ace", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -832,7 +832,7 @@ add_case (int label_value, gfc_st_label * label, stmtblock_t * body)\n   tmp = gfc_build_label_decl (NULL_TREE);\n \n   /* And the case itself.  */\n-  tmp = build3_v (CASE_LABEL_EXPR, value, NULL_TREE, tmp);\n+  tmp = build_case_label (value, NULL_TREE, tmp);\n   gfc_add_expr_to_block (body, tmp);\n \n   /* Jump to the label.  */"}, {"sha": "d2a0a5fc90de0c3859bca2513ffb9c5916dc71d0", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -1770,8 +1770,7 @@ gfc_trans_integer_select (gfc_code * code)\n \n \t  /* Add this case label.\n              Add parameter 'label', make it match GCC backend.  */\n-\t  tmp = fold_build3_loc (input_location, CASE_LABEL_EXPR,\n-\t\t\t\t void_type_node, low, high, label);\n+\t  tmp = build_case_label (low, high, label);\n \t  gfc_add_expr_to_block (&body, tmp);\n \t}\n \n@@ -2048,8 +2047,7 @@ gfc_trans_character_select (gfc_code *code)\n \n \t\t  /* Add this case label.\n \t\t     Add parameter 'label', make it match GCC backend.  */\n-\t\t  tmp = fold_build3_loc (input_location, CASE_LABEL_EXPR,\n-\t\t\t\t\t void_type_node, low, high, label);\n+\t\t  tmp = build_case_label (low, high, label);\n \t\t  gfc_add_expr_to_block (&body, tmp);\n \t\t}\n \n@@ -2128,12 +2126,10 @@ gfc_trans_character_select (gfc_code *code)\n       for (d = c->ext.block.case_list; d; d = d->next)\n         {\n \t  label = gfc_build_label_decl (NULL_TREE);\n-\t  tmp = fold_build3_loc (input_location, CASE_LABEL_EXPR,\n-\t\t\t\t void_type_node,\n-\t\t\t\t (d->low == NULL && d->high == NULL)\n-\t\t\t\t ? NULL : build_int_cst (integer_type_node,\n-\t\t\t\t\t\t\t d->n),\n-\t\t\t\t NULL, label);\n+\t  tmp = build_case_label ((d->low == NULL && d->high == NULL)\n+\t\t\t\t  ? NULL\n+\t\t\t\t  : build_int_cst (integer_type_node, d->n),\n+\t\t\t\t  NULL, label);\n           gfc_add_expr_to_block (&body, tmp);\n         }\n "}, {"sha": "700aa238e699b0d109b5623d2932711df0c8041a", "filename": "gcc/gimplify.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -1584,10 +1584,11 @@ gimplify_switch_expr (tree *expr_p, gimple_seq *pre_p)\n \t\t\tbreak;\n \t\t    }\n \t\t  if (i == len)\n-\t\t    default_case = build3 (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t\t\t   NULL_TREE, NULL_TREE,\n-\t\t\t\t\t   CASE_LABEL (VEC_index (tree,\n-\t\t\t\t\t\t\t\t  labels, 0)));\n+\t\t    {\n+\t\t      tree label = CASE_LABEL (VEC_index (tree, labels, 0));\n+\t\t      default_case = build_case_label (NULL_TREE, NULL_TREE,\n+\t\t\t\t\t\t       label);\n+\t\t    }\n \t\t}\n \t    }\n \n@@ -1596,9 +1597,8 @@ gimplify_switch_expr (tree *expr_p, gimple_seq *pre_p)\n \t      gimple new_default;\n \n \t      default_case\n-\t\t= build3 (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t  NULL_TREE, NULL_TREE,\n-\t\t\t  create_artificial_label (UNKNOWN_LOCATION));\n+\t\t= build_case_label (NULL_TREE, NULL_TREE,\n+\t\t\t\t    create_artificial_label (UNKNOWN_LOCATION));\n \t      new_default = gimple_build_label (CASE_LABEL (default_case));\n \t      gimplify_seq_add_stmt (&switch_body_seq, new_default);\n \t    }"}, {"sha": "6df65976ccbdf11337b3fe330293bb9ffc2d541b", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -1,3 +1,7 @@\n+2011-05-05  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* go-gcc.cc (Gcc_backend::switch_statement): Call build_case_label.\n+\n 2011-05-04  Ian Lance Taylor  <iant@google.com>\n \n \t* go-gcc.cc (Gcc_backend::struct_type): Call fill_in_struct."}, {"sha": "f5a6fb579ac002f49abd93e9c145c7b24cc0bf4b", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -835,8 +835,7 @@ Gcc_backend::switch_statement(\n \t\t\t\t ? EXPR_LOCATION((*ps)->get_tree())\n \t\t\t\t : UNKNOWN_LOCATION);\n \t  tree label = create_artificial_label(loc);\n-\t  tree c = build3_loc(loc, CASE_LABEL_EXPR, void_type_node, NULL_TREE,\n-\t\t\t      NULL_TREE, label);\n+\t  tree c = build_case_label(NULL_TREE, NULL_TREE, label);\n \t  append_to_statement_list(c, &stmt_list);\n \t}\n       else\n@@ -850,8 +849,7 @@ Gcc_backend::switch_statement(\n \t\treturn this->error_statement();\n \t      source_location loc = EXPR_LOCATION(t);\n \t      tree label = create_artificial_label(loc);\n-\t      tree c = build3_loc(loc, CASE_LABEL_EXPR, void_type_node,\n-\t\t\t\t  (*pcv)->get_tree(), NULL_TREE, label);\n+\t      tree c = build_case_label((*pcv)->get_tree(), NULL_TREE, label);\n \t      append_to_statement_list(c, &stmt_list);\n \t    }\n \t}"}, {"sha": "7dea6e43f543694b830fd89d169da71f37abda6d", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -1,3 +1,8 @@\n+2011-05-05  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* expr.c (expand_java_switch): Call build_case_label.\n+\t(expand_java_add_case): Likewise.\n+\n 2011-04-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/48819"}, {"sha": "3be1cff7d3fa21042176ceb0b2b5661a0686d59e", "filename": "gcc/java/expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -1874,8 +1874,8 @@ expand_java_switch (tree selector, int default_pc)\n \t\t\tNULL_TREE, NULL_TREE);\n   java_add_stmt (switch_expr);\n \n-  x = build3 (CASE_LABEL_EXPR, void_type_node, NULL_TREE, NULL_TREE,\n-\t      create_artificial_label (input_location));\n+  x = build_case_label (NULL_TREE, NULL_TREE,\n+\t\t\tcreate_artificial_label (input_location));\n   append_to_statement_list (x, &SWITCH_BODY (switch_expr));\n \n   x = build1 (GOTO_EXPR, void_type_node, lookup_label (default_pc));\n@@ -1891,8 +1891,8 @@ expand_java_add_case (tree switch_expr, int match, int target_pc)\n \n   value = build_int_cst (TREE_TYPE (switch_expr), match);\n   \n-  x = build3 (CASE_LABEL_EXPR, void_type_node, value, NULL_TREE,\n-\t      create_artificial_label (input_location));\n+  x = build_case_label (value, NULL_TREE,\n+\t\t\tcreate_artificial_label (input_location));\n   append_to_statement_list (x, &SWITCH_BODY (switch_expr));\n \n   x = build1 (GOTO_EXPR, void_type_node, lookup_label (target_pc));"}, {"sha": "e4bf141b908cb41883d92a7013820fabc9b741ce", "filename": "gcc/omp-low.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -4774,8 +4774,7 @@ expand_omp_sections (struct omp_region *region)\n   i = 0;\n   if (exit_reachable)\n     {\n-      t = build3 (CASE_LABEL_EXPR, void_type_node,\n-\t\t  build_int_cst (unsigned_type_node, 0), NULL, l2);\n+      t = build_case_label (build_int_cst (unsigned_type_node, 0), NULL, l2);\n       VEC_quick_push (tree, label_vec, t);\n       i++;\n     }\n@@ -4800,7 +4799,7 @@ expand_omp_sections (struct omp_region *region)\n \n       t = gimple_block_label (s_entry_bb);\n       u = build_int_cst (unsigned_type_node, casei);\n-      u = build3 (CASE_LABEL_EXPR, void_type_node, u, NULL, t);\n+      u = build_case_label (u, NULL, t);\n       VEC_quick_push (tree, label_vec, u);\n \n       si = gsi_last_bb (s_entry_bb);\n@@ -4821,7 +4820,7 @@ expand_omp_sections (struct omp_region *region)\n \n   /* Error handling code goes in DEFAULT_BB.  */\n   t = gimple_block_label (default_bb);\n-  u = build3 (CASE_LABEL_EXPR, void_type_node, NULL, NULL, t);\n+  u = build_case_label (NULL, NULL, t);\n   make_edge (l0_bb, default_bb, 0);\n \n   stmt = gimple_build_switch_vec (vmain, u, label_vec);"}, {"sha": "cd6c428c1725a481a68acd3fb14444276dcf41ae", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -1340,9 +1340,9 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n \t\t\t\t\t      fallthru_index));\n       gimple_seq_add_stmt (&tf->top_p_seq, x);\n \n-      last_case = build3 (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t  build_int_cst (integer_type_node, fallthru_index),\n-\t\t\t  NULL, create_artificial_label (tf_loc));\n+      tmp = build_int_cst (integer_type_node, fallthru_index);\n+      last_case = build_case_label (tmp, NULL,\n+\t\t\t\t    create_artificial_label (tf_loc));\n       VEC_quick_push (tree, case_label_vec, last_case);\n       last_case_index++;\n \n@@ -1365,9 +1365,9 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n       x = gimple_build_goto (finally_label);\n       gimple_seq_add_stmt (&eh_seq, x);\n \n-      last_case = build3 (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t  build_int_cst (integer_type_node, eh_index),\n-\t\t\t  NULL, create_artificial_label (tf_loc));\n+      tmp = build_int_cst (integer_type_node, eh_index);\n+      last_case = build_case_label (tmp, NULL,\n+\t\t\t\t    create_artificial_label (tf_loc));\n       VEC_quick_push (tree, case_label_vec, last_case);\n       last_case_index++;\n \n@@ -1419,9 +1419,9 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n         {\n           tree case_lab;\n           void **slot;\n-          case_lab = build3 (CASE_LABEL_EXPR, void_type_node,\n-                             build_int_cst (integer_type_node, switch_id),\n-\t\t\t     NULL, create_artificial_label (tf_loc));\n+\t  tmp = build_int_cst (integer_type_node, switch_id);\n+          case_lab = build_case_label (tmp, NULL,\n+\t\t\t\t       create_artificial_label (tf_loc));\n           /* We store the cont_stmt in the pointer map, so that we can recover\n              it in the loop below.  */\n           if (!cont_map)\n@@ -3132,8 +3132,8 @@ lower_eh_dispatch (basic_block src, gimple stmt)\n \t\t   blocks at the end of this pass.  */\n \t\tif (! pointer_set_contains (seen_values, TREE_VALUE (flt_node)))\n \t\t  {\n-\t\t    tree t = build3 (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t\t     TREE_VALUE (flt_node), NULL, lab);\n+\t\t    tree t = build_case_label (TREE_VALUE (flt_node),\n+\t\t\t\t\t       NULL, lab);\n \t\t    VEC_safe_push (tree, heap, labels, t);\n \t\t    pointer_set_insert (seen_values, TREE_VALUE (flt_node));\n \t\t    have_label = true;\n@@ -3181,8 +3181,7 @@ lower_eh_dispatch (basic_block src, gimple stmt)\n \t    gsi_insert_before (&gsi, x, GSI_SAME_STMT);\n \n \t    /* Turn the default label into a default case.  */\n-\t    default_label = build3 (CASE_LABEL_EXPR, void_type_node,\n-\t\t\t\t    NULL, NULL, default_label);\n+\t    default_label = build_case_label (NULL, NULL, default_label);\n \t    sort_case_labels (labels);\n \n \t    x = gimple_build_switch_vec (filter, default_label, labels);"}, {"sha": "7fd078db1a27980c32d34b3a2e1ce4b3afebbcce", "filename": "gcc/tree.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -1653,6 +1653,23 @@ make_tree_binfo_stat (unsigned base_binfos MEM_STAT_DECL)\n   return t;\n }\n \n+/* Create a CASE_LABEL_EXPR tree node and return it.  */\n+\n+tree\n+build_case_label (tree low_value, tree high_value, tree label_decl)\n+{\n+  tree t = make_node (CASE_LABEL_EXPR);\n+\n+  TREE_TYPE (t) = void_type_node;\n+  SET_EXPR_LOCATION (t, DECL_SOURCE_LOCATION (label_decl));\n+\n+  CASE_LOW (t) = low_value;\n+  CASE_HIGH (t) = high_value;\n+  CASE_LABEL (t) = label_decl;\n+  CASE_CHAIN (t) = NULL_TREE;\n+\n+  return t;\n+}\n \n /* Build a newly constructed TREE_VEC node of length LEN.  */\n "}, {"sha": "d0cd3e05b25e071f5c921384f08624f9bcdbe70f", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d528853ba1106b3cbd6eca4316ab2825416b9a6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3d528853ba1106b3cbd6eca4316ab2825416b9a6", "patch": "@@ -4036,6 +4036,10 @@ extern tree copy_node_stat (tree MEM_STAT_DECL);\n \n extern tree copy_list (tree);\n \n+/* Make a CASE_LABEL_EXPR.  */\n+\n+extern tree build_case_label (tree, tree, tree);\n+\n /* Make a BINFO.  */\n extern tree make_tree_binfo_stat (unsigned MEM_STAT_DECL);\n #define make_tree_binfo(t) make_tree_binfo_stat (t MEM_STAT_INFO)"}]}