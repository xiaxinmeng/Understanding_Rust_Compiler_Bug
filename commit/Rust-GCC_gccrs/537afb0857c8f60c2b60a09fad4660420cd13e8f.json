{"sha": "537afb0857c8f60c2b60a09fad4660420cd13e8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM3YWZiMDg1N2M4ZjYwYzJiNjBhMDlmYWQ0NjYwNDIwY2QxM2U4Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-08-03T12:00:46Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-08-03T12:00:46Z"}, "message": "aarch64: Tweak the cost of elementwise stores\n\nWhen the vectoriser scalarises a strided store, it counts one\nscalar_store for each element plus one vec_to_scalar extraction\nfor each element.  However, extracting element 0 is free on AArch64,\nso it should have zero cost.\n\nI don't have a testcase that requires this for existing -mtune\noptions, but it becomes more important with a later patch.\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_is_store_elt_extraction): New\n\tfunction, split out from...\n\t(aarch64_detect_vector_stmt_subtype): ...here.\n\t(aarch64_add_stmt_cost): Treat extracting element 0 as free.", "tree": {"sha": "0b4dbd4d9ccad0cb3f10c76b9f24f8bdd8dbf375", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b4dbd4d9ccad0cb3f10c76b9f24f8bdd8dbf375"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/537afb0857c8f60c2b60a09fad4660420cd13e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/537afb0857c8f60c2b60a09fad4660420cd13e8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/537afb0857c8f60c2b60a09fad4660420cd13e8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/537afb0857c8f60c2b60a09fad4660420cd13e8f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78770e0e5d9fef70679e1db4eb2fb06596fbb2f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78770e0e5d9fef70679e1db4eb2fb06596fbb2f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78770e0e5d9fef70679e1db4eb2fb06596fbb2f8"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "084f8caa0daf172a279f977a425530fcb08100d0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/537afb0857c8f60c2b60a09fad4660420cd13e8f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/537afb0857c8f60c2b60a09fad4660420cd13e8f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=537afb0857c8f60c2b60a09fad4660420cd13e8f", "patch": "@@ -14622,6 +14622,18 @@ aarch64_builtin_vectorization_cost (enum vect_cost_for_stmt type_of_cost,\n     }\n }\n \n+/* Return true if an operaton of kind KIND for STMT_INFO represents\n+   the extraction of an element from a vector in preparation for\n+   storing the element to memory.  */\n+static bool\n+aarch64_is_store_elt_extraction (vect_cost_for_stmt kind,\n+\t\t\t\t stmt_vec_info stmt_info)\n+{\n+  return (kind == vec_to_scalar\n+\t  && STMT_VINFO_DATA_REF (stmt_info)\n+\t  && DR_IS_WRITE (STMT_VINFO_DATA_REF (stmt_info)));\n+}\n+\n /* Return true if STMT_INFO represents part of a reduction.  */\n static bool\n aarch64_is_reduction (stmt_vec_info stmt_info)\n@@ -14959,9 +14971,7 @@ aarch64_detect_vector_stmt_subtype (vec_info *vinfo, vect_cost_for_stmt kind,\n   /* Detect cases in which vec_to_scalar is describing the extraction of a\n      vector element in preparation for a scalar store.  The store itself is\n      costed separately.  */\n-  if (kind == vec_to_scalar\n-      && STMT_VINFO_DATA_REF (stmt_info)\n-      && DR_IS_WRITE (STMT_VINFO_DATA_REF (stmt_info)))\n+  if (aarch64_is_store_elt_extraction (kind, stmt_info))\n     return simd_costs->store_elt_extra_cost;\n \n   /* Detect SVE gather loads, which are costed as a single scalar_load\n@@ -15382,6 +15392,12 @@ aarch64_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \t  if (vectype && aarch64_sve_only_stmt_p (stmt_info, vectype))\n \t    costs->saw_sve_only_op = true;\n \n+\t  /* If we scalarize a strided store, the vectorizer costs one\n+\t     vec_to_scalar for each element.  However, we can store the first\n+\t     element using an FP store without a separate extract step.  */\n+\t  if (aarch64_is_store_elt_extraction (kind, stmt_info))\n+\t    count -= 1;\n+\n \t  stmt_cost = aarch64_detect_scalar_stmt_subtype\n \t    (vinfo, kind, stmt_info, stmt_cost);\n "}]}