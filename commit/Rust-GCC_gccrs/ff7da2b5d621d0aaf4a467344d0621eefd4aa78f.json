{"sha": "ff7da2b5d621d0aaf4a467344d0621eefd4aa78f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY3ZGEyYjVkNjIxZDBhYWY0YTQ2NzM0NGQwNjIxZWVmZDRhYTc4Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-06-01T13:57:32Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-06-01T13:57:32Z"}, "message": "Cleanup global decl stream reference streaming, part 1\n\nThis patch further simplifies way we reffer to global stream.  Every function\nsection has vector of references to global trees which are populated during\nstreaming.  This vector is for some reason divided into field_decls, fn_decls,\ntype_decls, types, namespace_decls, labels_decls and var_decls which contains\nalso other things.\n\nThere is no benefit for this split except perhaps for making the indexes\nbit smaller and possibly better encodable by ulebs.  This however does not\npay back and makes things unnecesarily complex.\nWe may want to re-add multiple tables if we start streaming something else than\ntrees into the global stream, but that would not work with current\ninfrastructure anyway.\n\nThe patch drops different streams and I checked that it results in reduction of\nglobal stream and apparently very small increase in function streams but it may\nbe just because I updated tree in between the tests. This will be fixed by\nincremental patch.\n\n[WPA] Compression: 86220483 input bytes, 217762146 uncompressed bytes (ratio: 2.525643)\n[WPA] Compression: 111735464 input bytes, 297410918 uncompressed bytes (ratio: 2.661741)\n[WPA] Size of mmap'd section decls: 86220483 bytes\n[WPA] Size of mmap'd section function_body: 14353447 bytes\n\nto:\n\n[WPA] Compression: 85754594 input bytes, 216006049 uncompressed bytes (ratio: 2.518886)\n[WPA] Compression: 111370381 input bytes, 295746052 uncompressed bytes (ratio: 2.655518)\n[WPA] Size of mmap'd section decls: 85754594 bytes\n[WPA] Size of mmap'd section function_body: 14447946 bytes\n\nThe patch also removes some of ugly macro generators of accessors functions and\nmakes it easier to further optimize the way we stream references to trees which\nI plan to do incrementally.\n\nI also made the API for streaming referneces symmetric.  I.e. you\nstream out by\n  lto_output_var_decl_ref\nand stream in by\n  lto_input_var_decl_ref\n\ninstead streaming out by\n  lto_output_var_decl_index\nand streaming in by\n  decl_index = streamer_read_uhwi (ib);\n  lto_file_decl_data_get_fn_decl (file_data, decl_index);\n\nlto-bootstrapped/regtested x86_64-linux, will commit it shortly.\n\ngcc/ChangeLog:\n\n2020-06-01  Jan Hubicka  <hubicka@ucw.cz>\n\n\t* ipa-reference.c (stream_out_bitmap): Use lto_output_var_decl_ref.\n\t(ipa_reference_read_optimization_summary): Use lto_intput_var_decl_ref.\n\t* lto-cgraph.c (lto_output_node): Likewise.\n\t(lto_output_varpool_node): Likewise.\n\t(output_offload_tables): Likewise.\n\t(input_node): Likewise.\n\t(input_varpool_node): Likewise.\n\t(input_offload_tables): Likewise.\n\t* lto-streamer-in.c (lto_input_tree_ref): Declare.\n\t(lto_input_var_decl_ref): Declare.\n\t(lto_input_fn_decl_ref): Declare.\n\t* lto-streamer-out.c (lto_indexable_tree_ref): Use only one decl stream.\n\t(lto_output_var_decl_index): Rename to ..\n\t(lto_output_var_decl_ref): ... this.\n\t(lto_output_fn_decl_index): Rename to ...\n\t(lto_output_fn_decl_ref): ... this.\n\t* lto-streamer.h (enum lto_decl_stream_e_t): Remove per-type streams.\n\t(DEFINE_DECL_STREAM_FUNCS): Remove.\n\t(lto_output_var_decl_index): Remove.\n\t(lto_output_fn_decl_index): Remove.\n\t(lto_output_var_decl_ref): Declare.\n\t(lto_output_fn_decl_ref): Declare.\n\t(lto_input_var_decl_ref): Declare.\n\t(lto_input_fn_decl_ref): Declare.", "tree": {"sha": "a0e9ee399c1b3a9360691446bca622ae11e2d109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0e9ee399c1b3a9360691446bca622ae11e2d109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff7da2b5d621d0aaf4a467344d0621eefd4aa78f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7da2b5d621d0aaf4a467344d0621eefd4aa78f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff7da2b5d621d0aaf4a467344d0621eefd4aa78f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7da2b5d621d0aaf4a467344d0621eefd4aa78f/comments", "author": null, "committer": null, "parents": [{"sha": "c055929ff2de906b7706428d42152b1a51cb3b0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c055929ff2de906b7706428d42152b1a51cb3b0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c055929ff2de906b7706428d42152b1a51cb3b0a"}], "stats": {"total": 167, "additions": 64, "deletions": 103}, "files": [{"sha": "c9bc1485a0ce769579948cb479ac051ec00c5db3", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7da2b5d621d0aaf4a467344d0621eefd4aa78f/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7da2b5d621d0aaf4a467344d0621eefd4aa78f/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=ff7da2b5d621d0aaf4a467344d0621eefd4aa78f", "patch": "@@ -1039,7 +1039,7 @@ stream_out_bitmap (struct lto_simple_output_block *ob,\n   EXECUTE_IF_AND_IN_BITMAP (bits, ltrans_statics, 0, index, bi)\n     {\n       tree decl = (*reference_vars_to_consider) [index];\n-      lto_output_var_decl_index (ob->decl_state, ob->main_stream, decl);\n+      lto_output_var_decl_ref (ob->decl_state, ob->main_stream, decl);\n     }\n }\n \n@@ -1158,9 +1158,7 @@ ipa_reference_read_optimization_summary (void)\n \t    fprintf (dump_file, \"all module statics:\");\n \t  for (i = 0; i < (unsigned int)b_count; i++)\n \t    {\n-\t      unsigned int var_index = streamer_read_uhwi (ib);\n-\t      tree v_decl = lto_file_decl_data_get_var_decl (file_data,\n-\t\t\t\t\t\t\t     var_index);\n+\t      tree v_decl = lto_input_var_decl_ref (ib, file_data);\n \t      bool existed;\n \t      bitmap_set_bit (all_module_statics,\n \t\t\t      ipa_reference_var_get_or_insert_uid\n@@ -1206,9 +1204,7 @@ ipa_reference_read_optimization_summary (void)\n \t\t    (&optimization_summary_obstack);\n \t\t  for (j = 0; j < (unsigned int)v_count; j++)\n \t\t    {\n-\t\t      unsigned int var_index = streamer_read_uhwi (ib);\n-\t\t      tree v_decl = lto_file_decl_data_get_var_decl (file_data,\n-\t\t\t\t\t\t\t\t     var_index);\n+\t\t      tree v_decl = lto_input_var_decl_ref (ib, file_data);\n \t\t      bitmap_set_bit (info->statics_read,\n \t\t\t\t      ipa_reference_var_uid (v_decl));\n \t\t      if (dump_file)\n@@ -1235,9 +1231,7 @@ ipa_reference_read_optimization_summary (void)\n \t\t    (&optimization_summary_obstack);\n \t\t  for (j = 0; j < (unsigned int)v_count; j++)\n \t\t    {\n-\t\t      unsigned int var_index = streamer_read_uhwi (ib);\n-\t\t      tree v_decl = lto_file_decl_data_get_var_decl (file_data,\n-\t\t\t\t\t\t\t\t     var_index);\n+\t\t      tree v_decl = lto_input_var_decl_ref (ib, file_data);\n \t\t      bitmap_set_bit (info->statics_written,\n \t\t\t\t      ipa_reference_var_uid (v_decl));\n \t\t      if (dump_file)"}, {"sha": "a671c671fa78feb9eb3e2286e062b544e40c36ea", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7da2b5d621d0aaf4a467344d0621eefd4aa78f/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7da2b5d621d0aaf4a467344d0621eefd4aa78f/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=ff7da2b5d621d0aaf4a467344d0621eefd4aa78f", "patch": "@@ -451,7 +451,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n     streamer_write_hwi_stream (ob->main_stream, ref);\n \n \n-  lto_output_fn_decl_index (ob->decl_state, ob->main_stream, node->decl);\n+  lto_output_fn_decl_ref (ob->decl_state, ob->main_stream, node->decl);\n   node->count.stream_out (ob->main_stream);\n   streamer_write_hwi_stream (ob->main_stream, node->count_materialization_scale);\n \n@@ -591,7 +591,7 @@ lto_output_varpool_node (struct lto_simple_output_block *ob, varpool_node *node,\n   streamer_write_enum (ob->main_stream, LTO_symtab_tags, LTO_symtab_last_tag,\n \t\t       LTO_symtab_variable);\n   streamer_write_hwi_stream (ob->main_stream, node->order);\n-  lto_output_var_decl_index (ob->decl_state, ob->main_stream, node->decl);\n+  lto_output_var_decl_ref (ob->decl_state, ob->main_stream, node->decl);\n   bp = bitpack_create (ob->main_stream);\n   bp_pack_value (&bp, node->externally_visible, 1);\n   bp_pack_value (&bp, node->no_reorder, 1);\n@@ -1071,16 +1071,16 @@ output_offload_tables (void)\n     {\n       streamer_write_enum (ob->main_stream, LTO_symtab_tags,\n \t\t\t   LTO_symtab_last_tag, LTO_symtab_unavail_node);\n-      lto_output_fn_decl_index (ob->decl_state, ob->main_stream,\n-\t\t\t\t(*offload_funcs)[i]);\n+      lto_output_fn_decl_ref (ob->decl_state, ob->main_stream,\n+\t\t\t      (*offload_funcs)[i]);\n     }\n \n   for (unsigned i = 0; i < vec_safe_length (offload_vars); i++)\n     {\n       streamer_write_enum (ob->main_stream, LTO_symtab_tags,\n \t\t\t   LTO_symtab_last_tag, LTO_symtab_variable);\n-      lto_output_var_decl_index (ob->decl_state, ob->main_stream,\n-\t\t\t\t (*offload_vars)[i]);\n+      lto_output_var_decl_ref (ob->decl_state, ob->main_stream,\n+\t\t\t       (*offload_vars)[i]);\n     }\n \n   streamer_write_uhwi_stream (ob->main_stream, 0);\n@@ -1219,7 +1219,6 @@ input_node (struct lto_file_decl_data *file_data,\n   tree fn_decl;\n   struct cgraph_node *node;\n   struct bitpack_d bp;\n-  unsigned decl_index;\n   int ref = LCC_NOT_FOUND, ref2 = LCC_NOT_FOUND;\n   int clone_ref;\n   int order;\n@@ -1229,8 +1228,7 @@ input_node (struct lto_file_decl_data *file_data,\n   order = streamer_read_hwi (ib) + file_data->order_base;\n   clone_ref = streamer_read_hwi (ib);\n \n-  decl_index = streamer_read_uhwi (ib);\n-  fn_decl = lto_file_decl_data_get_fn_decl (file_data, decl_index);\n+  fn_decl = lto_input_fn_decl_ref (ib, file_data);\n \n   if (clone_ref != LCC_NOT_FOUND)\n     {\n@@ -1339,7 +1337,6 @@ static varpool_node *\n input_varpool_node (struct lto_file_decl_data *file_data,\n \t\t    class lto_input_block *ib)\n {\n-  int decl_index;\n   tree var_decl;\n   varpool_node *node;\n   struct bitpack_d bp;\n@@ -1349,8 +1346,7 @@ input_varpool_node (struct lto_file_decl_data *file_data,\n   const char *section;\n \n   order = streamer_read_hwi (ib) + file_data->order_base;\n-  decl_index = streamer_read_uhwi (ib);\n-  var_decl = lto_file_decl_data_get_var_decl (file_data, decl_index);\n+  var_decl = lto_input_var_decl_ref (ib, file_data);\n \n   /* Declaration of functions can be already merged with a declaration\n      from other input file.  We keep cgraph unmerged until after streaming\n@@ -1781,9 +1777,8 @@ input_offload_tables (bool do_force_output)\n \t{\n \t  if (tag == LTO_symtab_unavail_node)\n \t    {\n-\t      int decl_index = streamer_read_uhwi (ib);\n \t      tree fn_decl\n-\t\t= lto_file_decl_data_get_fn_decl (file_data, decl_index);\n+\t\t= lto_input_fn_decl_ref (ib, file_data);\n \t      vec_safe_push (offload_funcs, fn_decl);\n \n \t      /* Prevent IPA from removing fn_decl as unreachable, since there\n@@ -1794,9 +1789,8 @@ input_offload_tables (bool do_force_output)\n \t    }\n \t  else if (tag == LTO_symtab_variable)\n \t    {\n-\t      int decl_index = streamer_read_uhwi (ib);\n \t      tree var_decl\n-\t\t= lto_file_decl_data_get_var_decl (file_data, decl_index);\n+\t\t= lto_input_var_decl_ref (ib, file_data);\n \t      vec_safe_push (offload_vars, var_decl);\n \n \t      /* Prevent IPA from removing var_decl as unused, since there"}, {"sha": "d77b4f5e9ffe7fe08e5eaa477be040f18f1767fe", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7da2b5d621d0aaf4a467344d0621eefd4aa78f/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7da2b5d621d0aaf4a467344d0621eefd4aa78f/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=ff7da2b5d621d0aaf4a467344d0621eefd4aa78f", "patch": "@@ -320,36 +320,16 @@ lto_input_tree_ref (class lto_input_block *ib, class data_in *data_in,\n \n   switch (tag)\n     {\n-    case LTO_type_ref:\n-      ix_u = streamer_read_uhwi (ib);\n-      result = lto_file_decl_data_get_type (data_in->file_data, ix_u);\n-      break;\n-\n     case LTO_ssa_name_ref:\n       ix_u = streamer_read_uhwi (ib);\n       result = (*SSANAMES (fn))[ix_u];\n       break;\n \n+    case LTO_type_ref:\n     case LTO_field_decl_ref:\n-      ix_u = streamer_read_uhwi (ib);\n-      result = lto_file_decl_data_get_field_decl (data_in->file_data, ix_u);\n-      break;\n-\n     case LTO_function_decl_ref:\n-      ix_u = streamer_read_uhwi (ib);\n-      result = lto_file_decl_data_get_fn_decl (data_in->file_data, ix_u);\n-      break;\n-\n     case LTO_type_decl_ref:\n-      ix_u = streamer_read_uhwi (ib);\n-      result = lto_file_decl_data_get_type_decl (data_in->file_data, ix_u);\n-      break;\n-\n     case LTO_namespace_decl_ref:\n-      ix_u = streamer_read_uhwi (ib);\n-      result = lto_file_decl_data_get_namespace_decl (data_in->file_data, ix_u);\n-      break;\n-\n     case LTO_global_decl_ref:\n     case LTO_result_decl_ref:\n     case LTO_const_decl_ref:\n@@ -358,7 +338,8 @@ lto_input_tree_ref (class lto_input_block *ib, class data_in *data_in,\n     case LTO_translation_unit_decl_ref:\n     case LTO_namelist_decl_ref:\n       ix_u = streamer_read_uhwi (ib);\n-      result = lto_file_decl_data_get_var_decl (data_in->file_data, ix_u);\n+      result = (*data_in->file_data->current_decl_state\n+\t\t->streams[LTO_DECL_STREAM])[ix_u];\n       break;\n \n     default:\n@@ -370,6 +351,30 @@ lto_input_tree_ref (class lto_input_block *ib, class data_in *data_in,\n   return result;\n }\n \n+/* Read VAR_DECL reference to DATA from IB.  */\n+\n+tree\n+lto_input_var_decl_ref (lto_input_block *ib, lto_file_decl_data *file_data)\n+{\n+  unsigned int ix_u = streamer_read_uhwi (ib);\n+  tree result = (*file_data->current_decl_state\n+\t\t ->streams[LTO_DECL_STREAM])[ix_u];\n+  gcc_assert (TREE_CODE (result) == VAR_DECL);\n+  return result;\n+}\n+\n+/* Read VAR_DECL reference to DATA from IB.  */\n+\n+tree\n+lto_input_fn_decl_ref (lto_input_block *ib, lto_file_decl_data *file_data)\n+{\n+  unsigned int ix_u = streamer_read_uhwi (ib);\n+  tree result = (*file_data->current_decl_state\n+\t\t ->streams[LTO_DECL_STREAM])[ix_u];\n+  gcc_assert (TREE_CODE (result) == FUNCTION_DECL);\n+  return result;\n+}\n+\n \n /* Read and return a double-linked list of catch handlers from input\n    block IB, using descriptors in DATA_IN.  */"}, {"sha": "a44ed0037eefe876a1ab63d4815e836695bc1e6a", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7da2b5d621d0aaf4a467344d0621eefd4aa78f/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7da2b5d621d0aaf4a467344d0621eefd4aa78f/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=ff7da2b5d621d0aaf4a467344d0621eefd4aa78f", "patch": "@@ -260,7 +260,7 @@ lto_indexable_tree_ref (struct output_block *ob, tree expr,\n   if (TYPE_P (expr))\n     {\n       *tag = LTO_type_ref;\n-      encoder = LTO_DECL_STREAM_TYPE;\n+      encoder = LTO_DECL_STREAM;\n     }\n   else\n     {\n@@ -275,12 +275,12 @@ lto_indexable_tree_ref (struct output_block *ob, tree expr,\n \n \tcase FIELD_DECL:\n \t  *tag = LTO_field_decl_ref;\n-\t  encoder = LTO_DECL_STREAM_FIELD_DECL;\n+\t  encoder = LTO_DECL_STREAM;\n \t  break;\n \n \tcase FUNCTION_DECL:\n \t  *tag = LTO_function_decl_ref;\n-\t  encoder = LTO_DECL_STREAM_FN_DECL;\n+\t  encoder = LTO_DECL_STREAM;\n \t  break;\n \n \tcase VAR_DECL:\n@@ -290,37 +290,37 @@ lto_indexable_tree_ref (struct output_block *ob, tree expr,\n \t  /* FALLTHRU */\n \tcase PARM_DECL:\n \t  *tag = LTO_global_decl_ref;\n-\t  encoder = LTO_DECL_STREAM_VAR_DECL;\n+\t  encoder = LTO_DECL_STREAM;\n \t  break;\n \n \tcase CONST_DECL:\n \t  *tag = LTO_const_decl_ref;\n-\t  encoder = LTO_DECL_STREAM_VAR_DECL;\n+\t  encoder = LTO_DECL_STREAM;\n \t  break;\n \n \tcase TYPE_DECL:\n \t  *tag = LTO_type_decl_ref;\n-\t  encoder = LTO_DECL_STREAM_TYPE_DECL;\n+\t  encoder = LTO_DECL_STREAM;\n \t  break;\n \n \tcase NAMESPACE_DECL:\n \t  *tag = LTO_namespace_decl_ref;\n-\t  encoder = LTO_DECL_STREAM_NAMESPACE_DECL;\n+\t  encoder = LTO_DECL_STREAM;\n \t  break;\n \n \tcase LABEL_DECL:\n \t  *tag = LTO_label_decl_ref;\n-\t  encoder = LTO_DECL_STREAM_VAR_DECL;\n+\t  encoder = LTO_DECL_STREAM;\n \t  break;\n \n \tcase RESULT_DECL:\n \t  *tag = LTO_result_decl_ref;\n-\t  encoder = LTO_DECL_STREAM_VAR_DECL;\n+\t  encoder = LTO_DECL_STREAM;\n \t  break;\n \n \tcase TRANSLATION_UNIT_DECL:\n \t  *tag = LTO_translation_unit_decl_ref;\n-\t  encoder = LTO_DECL_STREAM_VAR_DECL;\n+\t  encoder = LTO_DECL_STREAM;\n \t  break;\n \n \tdefault:\n@@ -336,25 +336,25 @@ lto_indexable_tree_ref (struct output_block *ob, tree expr,\n /* Output a static or extern var DECL to OBS.  */\n \n void\n-lto_output_var_decl_index (struct lto_out_decl_state *decl_state,\n-\t\t\t   struct lto_output_stream * obs, tree decl)\n+lto_output_var_decl_ref (struct lto_out_decl_state *decl_state,\n+\t\t\t struct lto_output_stream * obs, tree decl)\n {\n   gcc_checking_assert (TREE_CODE (decl) == VAR_DECL);\n   streamer_write_uhwi_stream\n-     (obs, lto_get_index (&decl_state->streams[LTO_DECL_STREAM_VAR_DECL],\n+     (obs, lto_get_index (&decl_state->streams[LTO_DECL_STREAM],\n \t\t\t  decl));\n }\n \n \n /* Output a static or extern var DECL to OBS.  */\n \n void\n-lto_output_fn_decl_index (struct lto_out_decl_state *decl_state,\n-\t\t\t  struct lto_output_stream * obs, tree decl)\n+lto_output_fn_decl_ref (struct lto_out_decl_state *decl_state,\n+\t\t\tstruct lto_output_stream * obs, tree decl)\n {\n   gcc_checking_assert (TREE_CODE (decl) == FUNCTION_DECL);\n   streamer_write_uhwi_stream\n-     (obs, lto_get_index (&decl_state->streams[LTO_DECL_STREAM_FN_DECL], decl));\n+     (obs, lto_get_index (&decl_state->streams[LTO_DECL_STREAM], decl));\n }\n \n /* Return true if EXPR is a tree node that can be written to disk.  */"}, {"sha": "fc7e43124201e97eedcd11a47ba3f4975c4c1730", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 7, "deletions": 39, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7da2b5d621d0aaf4a467344d0621eefd4aa78f/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7da2b5d621d0aaf4a467344d0621eefd4aa78f/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=ff7da2b5d621d0aaf4a467344d0621eefd4aa78f", "patch": "@@ -249,38 +249,12 @@ enum lto_section_type\n /* Indices to the various function, type and symbol streams. */\n enum lto_decl_stream_e_t\n {\n-  LTO_DECL_STREAM_TYPE = 0,\t\t/* Must be first. */\n-  LTO_DECL_STREAM_FIELD_DECL,\n-  LTO_DECL_STREAM_FN_DECL,\n-  LTO_DECL_STREAM_VAR_DECL,\n-  LTO_DECL_STREAM_TYPE_DECL,\n-  LTO_DECL_STREAM_NAMESPACE_DECL,\n-  LTO_DECL_STREAM_LABEL_DECL,\n+  LTO_DECL_STREAM = 0,\t\t/* Must be first.  */\n   LTO_N_DECL_STREAMS\n };\n \n typedef enum ld_plugin_symbol_resolution ld_plugin_symbol_resolution_t;\n \n-\n-/* Macro to define convenience functions for type and decl streams\n-   in lto_file_decl_data.  */\n-#define DEFINE_DECL_STREAM_FUNCS(UPPER_NAME, name) \\\n-static inline tree \\\n-lto_file_decl_data_get_ ## name (struct lto_file_decl_data *data, \\\n-\t\t\t\t unsigned int idx) \\\n-{ \\\n-  struct lto_in_decl_state *state = data->current_decl_state; \\\n-   return (*state->streams[LTO_DECL_STREAM_## UPPER_NAME])[idx]; \\\n-} \\\n-\\\n-static inline unsigned int \\\n-lto_file_decl_data_num_ ## name ## s (struct lto_file_decl_data *data) \\\n-{ \\\n-  struct lto_in_decl_state *state = data->current_decl_state; \\\n-  return vec_safe_length (state->streams[LTO_DECL_STREAM_## UPPER_NAME]); \\\n-}\n-\n-\n /* Return a char pointer to the start of a data stream for an lto pass\n    or function.  The first parameter is the file data that contains\n    the information.  The second parameter is the type of information\n@@ -908,10 +882,12 @@ extern struct output_block *create_output_block (enum lto_section_type);\n extern void destroy_output_block (struct output_block *);\n extern void lto_output_tree (struct output_block *, tree, bool, bool);\n extern void stream_write_tree_ref (struct output_block *, tree);\n-extern void lto_output_var_decl_index (struct lto_out_decl_state *,\n-\t\t\t\t       struct lto_output_stream *, tree);\n-extern void lto_output_fn_decl_index (struct lto_out_decl_state *,\n-\t\t\t\t      struct lto_output_stream *, tree);\n+extern void lto_output_var_decl_ref (struct lto_out_decl_state *,\n+\t\t\t\t     struct lto_output_stream *, tree);\n+extern void lto_output_fn_decl_ref (struct lto_out_decl_state *,\n+\t\t\t\t    struct lto_output_stream *, tree);\n+extern tree lto_input_var_decl_ref (lto_input_block *, lto_file_decl_data *);\n+extern tree lto_input_fn_decl_ref (lto_input_block *, lto_file_decl_data *);\n extern void lto_output_toplevel_asms (void);\n extern void produce_asm (struct output_block *ob, tree fn);\n extern void lto_output ();\n@@ -1251,14 +1227,6 @@ lsei_start_variable_in_partition (lto_symtab_encoder_t encoder)\n   return lsei;\n }\n \n-DEFINE_DECL_STREAM_FUNCS (TYPE, type)\n-DEFINE_DECL_STREAM_FUNCS (FIELD_DECL, field_decl)\n-DEFINE_DECL_STREAM_FUNCS (FN_DECL, fn_decl)\n-DEFINE_DECL_STREAM_FUNCS (VAR_DECL, var_decl)\n-DEFINE_DECL_STREAM_FUNCS (TYPE_DECL, type_decl)\n-DEFINE_DECL_STREAM_FUNCS (NAMESPACE_DECL, namespace_decl)\n-DEFINE_DECL_STREAM_FUNCS (LABEL_DECL, label_decl)\n-\n /* Entry for the delayed registering of decl -> DIE references.  */\n struct dref_entry {\n     tree decl;"}]}