{"sha": "e808f3fdfa8f31066da19011b55acb8c0446c72d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgwOGYzZmRmYThmMzEwNjZkYTE5MDExYjU1YWNiOGMwNDQ2YzcyZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-09-30T15:31:29Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-09-30T18:59:53Z"}, "message": "PR c/97206 - ICE in composite_type on declarations of a similar array types\n\ngcc/ChangeLog:\n\n\tPR c/97206\n\t* attribs.c (attr_access::array_as_string): Avoid modifying a shared\n\ttype in place and use build_type_attribute_qual_variant instead.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/97206\n\t* gcc.dg/Warray-parameter-7.c: New test.\n\t* gcc.dg/Warray-parameter-8.c: New test.\n\t* gcc.dg/Wvla-parameter-5.c: New test.", "tree": {"sha": "c263bdab839225d79c50032b48ec97d7acf0fab0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c263bdab839225d79c50032b48ec97d7acf0fab0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e808f3fdfa8f31066da19011b55acb8c0446c72d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e808f3fdfa8f31066da19011b55acb8c0446c72d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e808f3fdfa8f31066da19011b55acb8c0446c72d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e808f3fdfa8f31066da19011b55acb8c0446c72d/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73ae6eb572515ad627b575a7fbdfdd47a4368e1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73ae6eb572515ad627b575a7fbdfdd47a4368e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73ae6eb572515ad627b575a7fbdfdd47a4368e1c"}], "stats": {"total": 120, "additions": 97, "deletions": 23}, "files": [{"sha": "3f6ec3d3aa39bfdc5ccfb840b07fef487d36fdc0", "filename": "gcc/attribs.c", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e808f3fdfa8f31066da19011b55acb8c0446c72d/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e808f3fdfa8f31066da19011b55acb8c0446c72d/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=e808f3fdfa8f31066da19011b55acb8c0446c72d", "patch": "@@ -2256,15 +2256,14 @@ attr_access::array_as_string (tree type) const\n \n   if (this->str)\n     {\n-      /* For array parameters (but not pointers) create an array type\n-\t that corresponds to the form of the parameter including its\n+      /* For array parameters (but not pointers) create a temporary array\n+\t type that corresponds to the form of the parameter including its\n \t qualifiers even though they apply to the pointer, not the array\n \t type.  */\n       const bool vla_p = minsize == HOST_WIDE_INT_M1U;\n       tree eltype = TREE_TYPE (type);\n-      tree artype;\n-\n       tree index_type = NULL_TREE;\n+\n       if (minsize == HOST_WIDE_INT_M1U)\n \t{\n \t  /* Determine if this is a VLA (an array whose most significant\n@@ -2278,28 +2277,24 @@ attr_access::array_as_string (tree type) const\n       else  if (minsize)\n \tindex_type = build_index_type (size_int (minsize - 1));\n \n-      artype = build_array_type (eltype, index_type);\n-\n+      tree arat = NULL_TREE;\n       if (static_p || vla_p)\n \t{\n \t  tree flag = static_p ? integer_one_node : NULL_TREE;\n \t  /* Hack: there's no language-independent way to encode\n \t     the \"static\" specifier or the \"*\" notation in an array type.\n-\t     Temporarily add an attribute to have the pretty printer add\n-\t     \"static\" or \"*\", and remove it later.  The static notation\n-\t     is only valid in the most significant bound but [*] can be\n-\t     used for any bound.  Because [*] is represented the same as\n-\t     [0] this hack only works for the most significant bound like\n-\t     static and the others are rendered as [0].  */\n-\t  tree at = tree_cons (get_identifier (\"array\"), flag, NULL_TREE);\n-\t  TYPE_ATTRIBUTES (artype) = at;\n+\t     Add a \"fake\" attribute to have the pretty-printer add \"static\"\n+\t     or \"*\".  The \"[static N]\" notation is only valid in the most\n+\t     significant bound but [*] can be used for any bound.  Because\n+\t     [*] is represented the same as [0] this hack only works for\n+\t     the most significant bound like static and the others are\n+\t     rendered as [0].  */\n+\t  arat = build_tree_list (get_identifier (\"array\"), flag);\n \t}\n \n-      TYPE_ATOMIC (artype) = TYPE_ATOMIC (type);\n-      TYPE_READONLY (artype) = TYPE_READONLY (type);\n-      TYPE_RESTRICT (artype) = TYPE_RESTRICT (type);\n-      TYPE_VOLATILE (artype) = TYPE_VOLATILE (type);\n-      type = artype;\n+      const int quals = TYPE_QUALS (type);\n+      type = build_array_type (eltype, index_type);\n+      type = build_type_attribute_qual_variant (type, arat, quals);\n     }\n \n   /* Format the type using the current pretty printer.  The generic tree\n@@ -2309,10 +2304,6 @@ attr_access::array_as_string (tree type) const\n   typstr = pp_formatted_text (pp);\n   delete pp;\n \n-  if (this->str)\n-    /* Remove the attribute that wasn't installed by decl_attributes.  */\n-    TYPE_ATTRIBUTES (type) = NULL_TREE;\n-\n   return typstr;\n }\n "}, {"sha": "4863045be78ac72c8340481527f2956c39543b13", "filename": "gcc/testsuite/gcc.dg/Warray-parameter-7.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e808f3fdfa8f31066da19011b55acb8c0446c72d/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-parameter-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e808f3fdfa8f31066da19011b55acb8c0446c72d/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-parameter-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-parameter-7.c?ref=e808f3fdfa8f31066da19011b55acb8c0446c72d", "patch": "@@ -0,0 +1,25 @@\n+/* PR c/97206 - ICE in composite_type on declarations of a similar array types\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+__attribute__((__access__(__write_only__, 1))) void\n+f1 (char* restrict);\n+\n+void f1 (char*);\n+\n+char a1[];\n+char a1[] = { };\n+\n+\n+void f2 (char[restrict]);\n+void f2 (char*);\n+\n+char a2[];\n+char a2[] = { };\n+\n+\n+void f3 (char*);\n+void f3 (char[const]);\n+\n+extern const char a3[];\n+extern const char a3[1];"}, {"sha": "b152702b847bc06e137ab9cfaeeddf1aee398389", "filename": "gcc/testsuite/gcc.dg/Warray-parameter-8.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e808f3fdfa8f31066da19011b55acb8c0446c72d/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-parameter-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e808f3fdfa8f31066da19011b55acb8c0446c72d/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-parameter-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-parameter-8.c?ref=e808f3fdfa8f31066da19011b55acb8c0446c72d", "patch": "@@ -0,0 +1,36 @@\n+/* Verify that combinations of array type qualifiers render correctly.\n+   { dg-do compile }\n+   { dg-options \"-Warray-parameter\" } */\n+\n+void fatm (int[_Atomic 1]);       // { dg-message \"previously declared as 'int\\\\\\[_Atomic 1]\" }\n+void fatm (int[_Atomic 2]);       // { dg-warning \"argument 1 of type 'int\\\\\\[_Atomic 2]' with mismatched bound\" }\n+\n+\n+void fcst (int[const 2]);         // { dg-message \"previously declared as 'int\\\\\\[const 2]\" }\n+void fcst (int[const 3]);         // { dg-warning \"argument 1 of type 'int\\\\\\[const 3]' with mismatched bound\" }\n+\n+\n+void frst (int[restrict 3]);      // { dg-message \"previously declared as 'int\\\\\\[restrict 3]\" }\n+void frst (int[restrict 4]);      // { dg-warning \"argument 1 of type 'int\\\\\\[restrict 4]' with mismatched bound\" }\n+\n+void fvol (int[volatile 4]);      // { dg-message \"previously declared as 'int\\\\\\[volatile 4]\" }\n+void fvol (int[volatile 5]);      // { dg-warning \"argument 1 of type 'int\\\\\\[volatile 5]' with mismatched bound\" }\n+\n+\n+void fcr (int[const restrict 1]);   // { dg-message \"previously declared as 'int\\\\\\[\\(const restrict|restrict const\\) 1]\" }\n+void fcr (int[restrict volatile 2]); // { dg-warning \"argument 1 of type 'int\\\\\\[\\(restrict volatile|volatile restrict\\) 2]' with mismatched bound\" }\n+void fcr (int[const restrict volatile 3]);  // { dg-warning \"argument 1 of type 'int\\\\\\[const volatile restrict 3]' with mismatched bound\" }\n+\n+\n+extern int n;\n+\n+void fcx_n (int [const 1][n]);      // { dg-message \"previously declared as 'int\\\\\\[const 1]\\\\\\[n]'\" \"note\" }\n+void fcx_n (int [restrict 2][n]);   // { dg-warning \"argument 1 of type 'int\\\\\\[restrict 2]\\\\\\[n]' with mismatched bound\" }\n+\n+\n+extern int n1, n2;\n+\n+/* The mismatch in the array bound should be diagnosed but the mismatch\n+   in the VLA should not be without -Wvla-parameter.  */\n+void fc3_n1 (int [const 3][n1]);   // { dg-message \"previously declared as 'int\\\\\\[const 3]\\\\\\[n1]'\" \"note\" }\n+void fc3_n1 (int [const 5][n2]);   // { dg-warning \"argument 1 of type 'int\\\\\\[const 5]\\\\\\[n2]' with mismatched bound\" }"}, {"sha": "16b40d9539a396a9175f1bf4cb860621c2d09e28", "filename": "gcc/testsuite/gcc.dg/Wvla-parameter-5.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e808f3fdfa8f31066da19011b55acb8c0446c72d/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e808f3fdfa8f31066da19011b55acb8c0446c72d/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-5.c?ref=e808f3fdfa8f31066da19011b55acb8c0446c72d", "patch": "@@ -0,0 +1,22 @@\n+/* Verify that combinations of array type qualifiers render correctly.\n+   { dg-do compile }\n+   { dg-options \"-Wvla-parameter\" } */\n+\n+extern int n1, n2;\n+\n+void fcx_n1 (int [const][n1]);     // { dg-message \"previously declared as 'int\\\\\\[const]\\\\\\[n1]' with bound 'n1'\" \"note\" }\n+void fcx_n1 (int [const][n2]);     // { dg-warning \"argument 1 of type 'int\\\\\\[const]\\\\\\[n2]' declared with mismatched bound 'n2'\" }\n+\n+/* The mismatch in the array bound should not be diagnosed without\n+   -Warray-parameter but the mismatch in the VLA should still be\n+   diagnosed.  */\n+void fc3_n1 (int [const 3][n1]);   // { dg-message \"previously declared as 'int\\\\\\[const 3]\\\\\\[n1]' with bound 'n1'\" \"note\" }\n+void fc3_n1 (int [const 5][n2]);   // { dg-warning \"argument 1 of type 'int\\\\\\[const 5]\\\\\\[n2]' declared with mismatched bound 'n2'\" }\n+\n+\n+void frx_n1 (int [restrict][n1]);  // { dg-message \"previously declared as 'int\\\\\\[restrict]\\\\\\[n1]' with bound 'n1'\" \"note\" }\n+void frx_n1 (int [restrict][n2]);  // { dg-warning \"argument 1 of type 'int\\\\\\[restrict]\\\\\\[n2]' declared with mismatched bound 'n2'\" }\n+\n+\n+void fvx_n2 (int [volatile][n2]);  // { dg-message \"previously declared as 'int\\\\\\[volatile]\\\\\\[n2]' with bound 'n2'\" \"note\" }\n+void fvx_n2 (int [volatile][n1]);  // { dg-warning \"argument 1 of type 'int\\\\\\[volatile]\\\\\\[n1]' declared with mismatched bound 'n1'\" }"}]}