{"sha": "ca7c2b85296ad76d29df2519a0977b26a5135aff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E3YzJiODUyOTZhZDc2ZDI5ZGYyNTE5YTA5NzdiMjZhNTEzNWFmZg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-10-25T03:28:00Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-10-25T03:28:00Z"}, "message": "natRuntime.cc (_Jv_SetDLLSearchPath): New function.\n\n\t* java/lang/natRuntime.cc (_Jv_SetDLLSearchPath): New function.\n\t(_Jv_FindSymbolInExecutable): Removed argument name.\n\t(insertSystemProperties): Call _Jv_SetDLLSearchPath if\n\tjava.library.path is set.\n\n\t* gij.cc (help): Document --showversion.\n\t(version): Don't exit.\n\t(main): Handle --showversion.  Exit if --version given.\n\nFrom-SVN: r58520", "tree": {"sha": "243b0dfebdb97fccd2f16106858d75fb715cf163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/243b0dfebdb97fccd2f16106858d75fb715cf163"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca7c2b85296ad76d29df2519a0977b26a5135aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca7c2b85296ad76d29df2519a0977b26a5135aff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca7c2b85296ad76d29df2519a0977b26a5135aff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca7c2b85296ad76d29df2519a0977b26a5135aff/comments", "author": null, "committer": null, "parents": [{"sha": "3752ac0803ae8d51297fcd46ba2f827bf50571fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3752ac0803ae8d51297fcd46ba2f827bf50571fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3752ac0803ae8d51297fcd46ba2f827bf50571fb"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "4db95b01eea118a570e4df42e3c1b6060e13cfcf", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7c2b85296ad76d29df2519a0977b26a5135aff/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7c2b85296ad76d29df2519a0977b26a5135aff/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ca7c2b85296ad76d29df2519a0977b26a5135aff", "patch": "@@ -1,3 +1,14 @@\n+2002-10-24  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/natRuntime.cc (_Jv_SetDLLSearchPath): New function.\n+\t(_Jv_FindSymbolInExecutable): Removed argument name.\n+\t(insertSystemProperties): Call _Jv_SetDLLSearchPath if\n+\tjava.library.path is set.\n+\n+\t* gij.cc (help): Document --showversion.\n+\t(version): Don't exit.\n+\t(main): Handle --showversion.  Exit if --version given.\n+\n 2002-10-23  Tom Tromey  <tromey@redhat.com>\n \n \t* jni.cc (_Jv_JNI_AllocObject): Removed old FIXME comment."}, {"sha": "293f3c30fd86f0ff7c575500223cf77b967b0ba4", "filename": "libjava/gij.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7c2b85296ad76d29df2519a0977b26a5135aff/libjava%2Fgij.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7c2b85296ad76d29df2519a0977b26a5135aff/libjava%2Fgij.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgij.cc?ref=ca7c2b85296ad76d29df2519a0977b26a5135aff", "patch": "@@ -34,6 +34,7 @@ help ()\n   printf (\"  --help            print this help, then exit\\n\");\n   printf (\"  --ms=NUMBER       set initial heap size\\n\");\n   printf (\"  --mx=NUMBER       set maximum heap size\\n\");\n+  printf (\"  --showversion     print version number, then keep going\\n\");\n   printf (\"  --version         print version number, then exit\\n\");\n   printf (\"\\nOptions can be specified with `-' or `--'.\\n\");\n   printf (\"\\nSee http://gcc.gnu.org/java/ for information on reporting bugs\\n\");\n@@ -47,7 +48,6 @@ version ()\n   printf (\"Copyright (C) 2002 Free Software Foundation, Inc.\\n\");\n   printf (\"This is free software; see the source for copying conditions.  There is NO\\n\");\n   printf (\"warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\");\n-  exit (0);\n }\n \n int\n@@ -93,6 +93,11 @@ main (int argc, const char **argv)\n       if (! strcmp (arg, \"-help\"))\n \thelp ();\n       else if (! strcmp (arg, \"-version\"))\n+\t{\n+\t  version ();\n+\t  exit (0);\n+\t}\n+      else if (! strcmp (arg, \"-showversion\"))\n \tversion ();\n       /* FIXME: use getopt and avoid the ugliness here.\n \t We at least need to handle the argument in a better way.  */"}, {"sha": "0dcf5786d2f2d14430fe2e662e11dd668dede997", "filename": "libjava/java/lang/natRuntime.cc", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7c2b85296ad76d29df2519a0977b26a5135aff/libjava%2Fjava%2Flang%2FnatRuntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7c2b85296ad76d29df2519a0977b26a5135aff/libjava%2Fjava%2Flang%2FnatRuntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatRuntime.cc?ref=ca7c2b85296ad76d29df2519a0977b26a5135aff", "patch": "@@ -102,14 +102,26 @@ _Jv_FindSymbolInExecutable (const char *symname)\n   return NULL;\n }\n \n+void\n+_Jv_SetDLLSearchPath (const char *path)\n+{\n+  lt_dlsetsearchpath (path);\n+}\n+\n #else\n \n void *\n-_Jv_FindSymbolInExecutable (const char *symname)\n+_Jv_FindSymbolInExecutable (const char *)\n {\n   return NULL;\n }\n \n+void\n+_Jv_SetDLLSearchPath (const char *)\n+{\n+  // Nothing.\n+}\n+\n #endif /* USE_LTDL */\n \n \f\n@@ -538,6 +550,25 @@ java::lang::Runtime::insertSystemProperties (java::util::Properties *newprops)\n \n   // Allow platform specific settings and overrides.\n   _Jv_platform_initProperties (newprops);\n+\n+  // If java.library.path is set, tell libltdl so we search the new\n+  // directories as well.  FIXME: does this work properly on Windows?\n+  String *path = newprops->getProperty(JvNewStringLatin1(\"java.library.path\"));\n+  if (path)\n+    {\n+      char *val = (char *) _Jv_Malloc (JvGetStringUTFLength (path) + 1);\n+      jsize total = JvGetStringUTFRegion (path, 0, path->length(), val);\n+      val[total] = '\\0';\n+      _Jv_SetDLLSearchPath (val);\n+      _Jv_Free (val);\n+    }\n+  else\n+    {\n+      // Set a value for user code to see.\n+      // FIXME: JDK sets this to the actual path used, including\n+      // LD_LIBRARY_PATH, etc.\n+      SET (\"java.library.path\", \"\");\n+    }\n }\n \n java::lang::Process *"}]}