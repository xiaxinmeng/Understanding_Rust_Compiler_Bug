{"sha": "c6b37fab7b8d0e54cdc893076767bfd44556def5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZiMzdmYWI3YjhkMGU1NGNkYzg5MzA3Njc2N2JmZDQ0NTU2ZGVmNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-07-10T08:24:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-07-10T08:24:05Z"}, "message": "i386: Rename patterns for vec_widen_<s>mult_even/odd_<mode>\n\n        * config/i386/sse.md (vec_widen_umult_even_v8si): Rename from\n        avx2_umulv4siv4di3.\n        (vec_widen_umult_even_v4si): Rename from sse2_umulv2siv2di3.\n        (vec_widen_smult_even_v8si): Rename from avx2_mulv4siv4di3.\n        (mulv4si3): Remove XOP test shadowed by SSE4 test.\n        * config/i386/i386.c (bdesc_args): Update pattern names.\n        (ix86_expand_sse2_mulvxdi3): Likewise.\n        (ix86_expand_mul_widen_evenodd): Likewise.  Remove XOP test\n        shadowed by SSE4 test.\n\nFrom-SVN: r189404", "tree": {"sha": "bdacabf4b95689f37fb9b21487f054a74f629920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdacabf4b95689f37fb9b21487f054a74f629920"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6b37fab7b8d0e54cdc893076767bfd44556def5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b37fab7b8d0e54cdc893076767bfd44556def5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6b37fab7b8d0e54cdc893076767bfd44556def5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6b37fab7b8d0e54cdc893076767bfd44556def5/comments", "author": null, "committer": null, "parents": [{"sha": "3f30a9a6aabcc7408bec1e42736889e3edd9f289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f30a9a6aabcc7408bec1e42736889e3edd9f289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f30a9a6aabcc7408bec1e42736889e3edd9f289"}], "stats": {"total": 59, "additions": 29, "deletions": 30}, "files": [{"sha": "aa9cbaa3882c54f1414fe5f50a0f2e898c1252e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b37fab7b8d0e54cdc893076767bfd44556def5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b37fab7b8d0e54cdc893076767bfd44556def5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6b37fab7b8d0e54cdc893076767bfd44556def5", "patch": "@@ -1,5 +1,15 @@\n 2012-07-10  Richard Henderson  <rth@redhat.com>\n \n+\t* config/i386/sse.md (vec_widen_umult_even_v8si): Rename from\n+\tavx2_umulv4siv4di3.\n+\t(vec_widen_umult_even_v4si): Rename from sse2_umulv2siv2di3.\n+\t(vec_widen_smult_even_v8si): Rename from avx2_mulv4siv4di3.\n+\t(mulv4si3): Remove XOP test shadowed by SSE4 test.\n+\t* config/i386/i386.c (bdesc_args): Update pattern names.\n+\t(ix86_expand_sse2_mulvxdi3): Likewise.\n+\t(ix86_expand_mul_widen_evenodd): Likewise.  Remove XOP test\n+\tshadowed by SSE4 test.\n+\n \t* tree.def (VEC_WIDEN_MULT_EVEN_EXPR, VEC_WIDEN_MULT_ODD_EXPR): New.\n \t* cfgexpand.c (expand_debug_expr): Handle them.\n \t* expr.c (expand_expr_real_2): Likewise."}, {"sha": "3cb34cea569ec3596d4eb691ffc3eaba4b40d782", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b37fab7b8d0e54cdc893076767bfd44556def5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b37fab7b8d0e54cdc893076767bfd44556def5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c6b37fab7b8d0e54cdc893076767bfd44556def5", "patch": "@@ -26619,8 +26619,8 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_psadbw, \"__builtin_ia32_psadbw128\", IX86_BUILTIN_PSADBW128, UNKNOWN, (int) V2DI_FTYPE_V16QI_V16QI },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulv1siv1di3, \"__builtin_ia32_pmuludq\", IX86_BUILTIN_PMULUDQ, UNKNOWN, (int) V1DI_FTYPE_V2SI_V2SI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulv2siv2di3, \"__builtin_ia32_pmuludq128\", IX86_BUILTIN_PMULUDQ128, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulv2siv2di3, \"__builtin_vw_umul_even_v4si\", IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V4SI, UNKNOWN, (int) V2UDI_FTYPE_V4USI_V4USI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_widen_umult_even_v4si, \"__builtin_ia32_pmuludq128\", IX86_BUILTIN_PMULUDQ128, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_widen_umult_even_v4si, \"__builtin_vw_umul_even_v4si\", IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V4SI, UNKNOWN, (int) V2UDI_FTYPE_V4USI_V4USI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_widen_smult_even_v4si, \"__builtin_ia32_vw_smul_even_v4si\", IX86_BUILTIN_VEC_WIDEN_SMUL_EVEN_V4SI, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_widen_umult_odd_v4si, \"__builtin_ia32_vw_umul_odd_v4si\", IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V4SI, UNKNOWN, (int) V2UDI_FTYPE_V4USI_V4USI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_widen_smult_odd_v4si, \"__builtin_ia32_vw_smul_odd_v4si\", IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n@@ -27015,15 +27015,15 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_zero_extendv8hiv8si2  , \"__builtin_ia32_pmovzxwd256\", IX86_BUILTIN_PMOVZXWD256, UNKNOWN, (int) V8SI_FTYPE_V8HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_zero_extendv4hiv4di2  , \"__builtin_ia32_pmovzxwq256\", IX86_BUILTIN_PMOVZXWQ256, UNKNOWN, (int) V4DI_FTYPE_V8HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_zero_extendv4siv4di2  , \"__builtin_ia32_pmovzxdq256\", IX86_BUILTIN_PMOVZXDQ256, UNKNOWN, (int) V4DI_FTYPE_V4SI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_mulv4siv4di3  , \"__builtin_ia32_pmuldq256\"  , IX86_BUILTIN_PMULDQ256  , UNKNOWN, (int) V4DI_FTYPE_V8SI_V8SI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_vec_widen_smult_even_v8si, \"__builtin_ia32_pmuldq256\", IX86_BUILTIN_PMULDQ256, UNKNOWN, (int) V4DI_FTYPE_V8SI_V8SI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_vec_widen_smult_odd_v8si, \"__builtin_ia32_vw_smul_odd_v8si\", IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V8SI, UNKNOWN, (int) V4DI_FTYPE_V8SI_V8SI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_umulhrswv16hi3 , \"__builtin_ia32_pmulhrsw256\", IX86_BUILTIN_PMULHRSW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_umulv16hi3_highpart, \"__builtin_ia32_pmulhuw256\" , IX86_BUILTIN_PMULHUW256 , UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_smulv16hi3_highpart, \"__builtin_ia32_pmulhw256\"  , IX86_BUILTIN_PMULHW256  , UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_mulv16hi3, \"__builtin_ia32_pmullw256\"  , IX86_BUILTIN_PMULLW256  , UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_mulv8si3, \"__builtin_ia32_pmulld256\"  , IX86_BUILTIN_PMULLD256  , UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_umulv4siv4di3  , \"__builtin_ia32_pmuludq256\" , IX86_BUILTIN_PMULUDQ256 , UNKNOWN, (int) V4DI_FTYPE_V8SI_V8SI },\n-  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_umulv4siv4di3  , \"__builtin_i386_vw_umul_even_v8si\" , IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V8SI, UNKNOWN, (int) V4UDI_FTYPE_V8USI_V8USI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_vec_widen_umult_even_v8si, \"__builtin_ia32_pmuludq256\", IX86_BUILTIN_PMULUDQ256, UNKNOWN, (int) V4DI_FTYPE_V8SI_V8SI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_vec_widen_umult_even_v8si, \"__builtin_i386_vw_umul_even_v8si\", IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V8SI, UNKNOWN, (int) V4UDI_FTYPE_V8USI_V8USI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_vec_widen_umult_odd_v8si, \"__builtin_ia32_vw_umul_odd_v8si\", IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V8SI, UNKNOWN, (int) V4UDI_FTYPE_V8USI_V8USI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_iorv4di3, \"__builtin_ia32_por256\", IX86_BUILTIN_POR256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_psadbw, \"__builtin_ia32_psadbw256\", IX86_BUILTIN_PSADBW256, UNKNOWN, (int) V16HI_FTYPE_V32QI_V32QI },\n@@ -38803,19 +38803,14 @@ ix86_expand_mul_widen_evenodd (rtx dest, rtx op1, rtx op2,\n   if (mode == V8SImode)\n     {\n       if (uns_p)\n-\tx = gen_avx2_umulv4siv4di3 (dest, op1, op2);\n+\tx = gen_vec_widen_umult_even_v8si (dest, op1, op2);\n       else\n-\tx = gen_avx2_mulv4siv4di3 (dest, op1, op2);\n+\tx = gen_vec_widen_smult_even_v8si (dest, op1, op2);\n     }\n   else if (uns_p)\n-    x = gen_sse2_umulv2siv2di3 (dest, op1, op2);\n+    x = gen_vec_widen_umult_even_v4si (dest, op1, op2);\n   else if (TARGET_SSE4_1)\n     x = gen_sse4_1_mulv2siv2di3 (dest, op1, op2);\n-  else if (TARGET_XOP)\n-    {\n-      x = force_reg (wmode, CONST0_RTX (wmode));\n-      x = gen_xop_pmacsdql (dest, op1, op2, x);\n-    }\n   else\n     {\n       rtx s1, s2, t0, t1, t2;\n@@ -38833,12 +38828,12 @@ ix86_expand_mul_widen_evenodd (rtx dest, rtx op1, rtx op2,\n       /* Multiply LO(A) * HI(B), and vice-versa.  */\n       t1 = gen_reg_rtx (wmode);\n       t2 = gen_reg_rtx (wmode);\n-      emit_insn (gen_sse2_umulv2siv2di3 (t1, s1, op2));\n-      emit_insn (gen_sse2_umulv2siv2di3 (t2, s2, op1));\n+      emit_insn (gen_vec_widen_umult_even_v4si (t1, s1, op2));\n+      emit_insn (gen_vec_widen_umult_even_v4si (t2, s2, op1));\n \n       /* Multiply LO(A) * LO(B).  */\n       t0 = gen_reg_rtx (wmode);\n-      emit_insn (gen_sse2_umulv2siv2di3 (t0, op1, op2));\n+      emit_insn (gen_vec_widen_umult_even_v4si (t0, op1, op2));\n \n       /* Combine and shift the highparts into place.  */\n       t1 = expand_binop (wmode, add_optab, t1, t2, t1, 1, OPTAB_DIRECT);\n@@ -39013,12 +39008,12 @@ ix86_expand_sse2_mulvxdi3 (rtx op0, rtx op1, rtx op2)\n \n       if (mode == V2DImode)\n \t{\n-\t  umul = gen_sse2_umulv2siv2di3;\n+\t  umul = gen_vec_widen_umult_even_v4si;\n \t  nmode = V4SImode;\n \t}\n       else if (mode == V4DImode)\n \t{\n-\t  umul = gen_avx2_umulv4siv4di3;\n+\t  umul = gen_vec_widen_umult_even_v8si;\n \t  nmode = V8SImode;\n \t}\n       else"}, {"sha": "532ebddd668e941c4a9d70324c111a5cd2522735", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6b37fab7b8d0e54cdc893076767bfd44556def5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6b37fab7b8d0e54cdc893076767bfd44556def5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c6b37fab7b8d0e54cdc893076767bfd44556def5", "patch": "@@ -5277,7 +5277,7 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_expand \"avx2_umulv4siv4di3\"\n+(define_expand \"vec_widen_umult_even_v8si\"\n   [(set (match_operand:V4DI 0 \"register_operand\")\n \t(mult:V4DI\n \t  (zero_extend:V4DI\n@@ -5293,7 +5293,7 @@\n   \"TARGET_AVX2\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V8SImode, operands);\")\n \n-(define_insn \"*avx_umulv4siv4di3\"\n+(define_insn \"*vec_widen_umult_even_v8si\"\n   [(set (match_operand:V4DI 0 \"register_operand\" \"=x\")\n \t(mult:V4DI\n \t  (zero_extend:V4DI\n@@ -5312,7 +5312,7 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_expand \"sse2_umulv2siv2di3\"\n+(define_expand \"vec_widen_umult_even_v4si\"\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(mult:V2DI\n \t  (zero_extend:V2DI\n@@ -5326,7 +5326,7 @@\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V4SImode, operands);\")\n \n-(define_insn \"*sse2_umulv2siv2di3\"\n+(define_insn \"*vec_widen_umult_even_v4si\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n \t(mult:V2DI\n \t  (zero_extend:V2DI\n@@ -5347,7 +5347,7 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_expand \"avx2_mulv4siv4di3\"\n+(define_expand \"vec_widen_smult_even_v8si\"\n   [(set (match_operand:V4DI 0 \"register_operand\")\n \t(mult:V4DI\n \t  (sign_extend:V4DI\n@@ -5363,7 +5363,7 @@\n   \"TARGET_AVX2\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V8SImode, operands);\")\n \n-(define_insn \"*avx2_mulv4siv4di3\"\n+(define_insn \"*vec_widen_smult_even_v8si\"\n   [(set (match_operand:V4DI 0 \"register_operand\" \"=x\")\n \t(mult:V4DI\n \t  (sign_extend:V4DI\n@@ -5564,12 +5564,6 @@\n \toperands[2] = force_const_mem (<MODE>mode, operands[2]);\n       ix86_fixup_binary_operands_no_copy (MULT, <MODE>mode, operands);\n     }\n-  else if (TARGET_XOP)\n-    {\n-      rtx z = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\n-      emit_insn (gen_xop_pmacsdd (operands[0], operands[1], operands[2], z));\n-      DONE;\n-    }\n   else\n     {\n       ix86_expand_sse2_mulv4si3 (operands[0], operands[1], operands[2]);"}]}