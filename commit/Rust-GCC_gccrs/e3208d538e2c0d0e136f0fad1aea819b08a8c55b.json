{"sha": "e3208d538e2c0d0e136f0fad1aea819b08a8c55b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyMDhkNTM4ZTJjMGQwZTEzNmYwZmFkMWFlYTgxOWIwOGE4YzU1Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-06-30T16:29:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-06-30T16:29:12Z"}, "message": "alpha.c (reg_or_6bit_operand): Recognize CONSTANT_P_RTX.\n\n        * alpha.c (reg_or_6bit_operand): Recognize CONSTANT_P_RTX.\n        (reg_or_8bit_operand, cint8_operand, add_operand): Likewise.\n        (sext_add_operand, and_operand, or_operand): Likewise.\n        (reg_or_cint_operand, some_operand, input_operand): Likewise.\n        * alpha.h (PREDICATE_CODES): Add CONSTANT_P_RTX where needed.\n\nFrom-SVN: r20847", "tree": {"sha": "1fa197795b4ca9e8a3089109d57da55a7425bdba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fa197795b4ca9e8a3089109d57da55a7425bdba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3208d538e2c0d0e136f0fad1aea819b08a8c55b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3208d538e2c0d0e136f0fad1aea819b08a8c55b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3208d538e2c0d0e136f0fad1aea819b08a8c55b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3208d538e2c0d0e136f0fad1aea819b08a8c55b/comments", "author": null, "committer": null, "parents": [{"sha": "cff48d8f76463f870df7340253373b7c84b52f7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cff48d8f76463f870df7340253373b7c84b52f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cff48d8f76463f870df7340253373b7c84b52f7f"}], "stats": {"total": 86, "additions": 50, "deletions": 36}, "files": [{"sha": "2ba9ac3d7c4fab898a7b783a306dd014f617160a", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3208d538e2c0d0e136f0fad1aea819b08a8c55b/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3208d538e2c0d0e136f0fad1aea819b08a8c55b/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=e3208d538e2c0d0e136f0fad1aea819b08a8c55b", "patch": "@@ -337,6 +337,7 @@ reg_or_6bit_operand (op, mode)\n {\n   return ((GET_CODE (op) == CONST_INT\n \t   && (unsigned HOST_WIDE_INT) INTVAL (op) < 64)\n+\t  || GET_CODE (op) == CONSTANT_P_RTX\n \t  || register_operand (op, mode));\n }\n \n@@ -350,6 +351,7 @@ reg_or_8bit_operand (op, mode)\n {\n   return ((GET_CODE (op) == CONST_INT\n \t   && (unsigned HOST_WIDE_INT) INTVAL (op) < 0x100)\n+\t  || GET_CODE (op) == CONSTANT_P_RTX\n \t  || register_operand (op, mode));\n }\n \n@@ -360,8 +362,9 @@ cint8_operand (op, mode)\n      register rtx op;\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n-  return (GET_CODE (op) == CONST_INT\n-\t  && (unsigned HOST_WIDE_INT) INTVAL (op) < 0x100);\n+  return ((GET_CODE (op) == CONST_INT\n+\t   && (unsigned HOST_WIDE_INT) INTVAL (op) < 0x100)\n+\t  || GET_CODE (op) == CONSTANT_P_RTX);\n }\n \n /* Return 1 if the operand is a valid second operand to an add insn.  */\n@@ -375,6 +378,8 @@ add_operand (op, mode)\n     return (CONST_OK_FOR_LETTER_P (INTVAL (op), 'K')\n \t    || CONST_OK_FOR_LETTER_P (INTVAL (op), 'L')\n \t    || CONST_OK_FOR_LETTER_P (INTVAL (op), 'O'));\n+  else if (GET_CODE (op) == CONSTANT_P_RTX)\n+    return 1;\n \n   return register_operand (op, mode);\n }\n@@ -390,6 +395,8 @@ sext_add_operand (op, mode)\n   if (GET_CODE (op) == CONST_INT)\n     return ((unsigned HOST_WIDE_INT) INTVAL (op) < 255\n \t    || (unsigned HOST_WIDE_INT) (- INTVAL (op)) < 255);\n+  else if (GET_CODE (op) == CONSTANT_P_RTX)\n+    return 1;\n \n   return register_operand (op, mode);\n }\n@@ -420,6 +427,8 @@ and_operand (op, mode)\n     return ((unsigned HOST_WIDE_INT) INTVAL (op) < 0x100\n \t    || (unsigned HOST_WIDE_INT) ~ INTVAL (op) < 0x100\n \t    || zap_mask (INTVAL (op)));\n+  else if (GET_CODE (op) == CONSTANT_P_RTX)\n+    return 1;\n \n   return register_operand (op, mode);\n }\n@@ -434,6 +443,8 @@ or_operand (op, mode)\n   if (GET_CODE (op) == CONST_INT)\n     return ((unsigned HOST_WIDE_INT) INTVAL (op) < 0x100\n \t    || (unsigned HOST_WIDE_INT) ~ INTVAL (op) < 0x100);\n+  else if (GET_CODE (op) == CONSTANT_P_RTX)\n+    return 1;\n \n   return register_operand (op, mode);\n }\n@@ -532,7 +543,9 @@ reg_or_cint_operand (op, mode)\n     register rtx op;\n     enum machine_mode mode;\n {\n-     return GET_CODE (op) == CONST_INT || register_operand (op, mode);\n+     return (GET_CODE (op) == CONST_INT\n+\t     || GET_CODE (op) == CONSTANT_P_RTX\n+\t     || register_operand (op, mode));\n }\n \n /* Return 1 if OP is something that can be reloaded into a register;\n@@ -548,8 +561,8 @@ some_operand (op, mode)\n \n   switch (GET_CODE (op))\n     {\n-    case REG:  case MEM:  case CONST_DOUBLE:\n-    case CONST_INT:  case LABEL_REF:  case SYMBOL_REF:  case CONST:\n+    case REG:  case MEM:  case CONST_DOUBLE:  case CONST_INT:  case LABEL_REF:\n+    case SYMBOL_REF:  case CONST:  case CONSTANT_P_RTX:\n       return 1;\n \n     case SUBREG:\n@@ -580,7 +593,7 @@ input_operand (op, mode)\n     case LABEL_REF:\n     case SYMBOL_REF:\n     case CONST:\n-        /* This handles both the Windows/NT and OSF cases.  */\n+      /* This handles both the Windows/NT and OSF cases.  */\n       return mode == ptr_mode || mode == DImode;\n \n     case REG:\n@@ -598,6 +611,7 @@ input_operand (op, mode)\n       return GET_MODE_CLASS (mode) == MODE_FLOAT && op == CONST0_RTX (mode);\n \n     case CONST_INT:\n+    case CONSTANT_P_RTX:\n       return mode == QImode || mode == HImode || add_operand (op, mode);\n \n     default:"}, {"sha": "39b173513599b0d492e7c595929a7e6fcf643e11", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3208d538e2c0d0e136f0fad1aea819b08a8c55b/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3208d538e2c0d0e136f0fad1aea819b08a8c55b/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=e3208d538e2c0d0e136f0fad1aea819b08a8c55b", "patch": "@@ -2181,36 +2181,36 @@ do {\t\t\t\t\t\t\t\t\t\\\n }\n /* Define the codes that are matched by predicates in alpha.c.  */\n \n-#define PREDICATE_CODES \\\n-  {\"reg_or_0_operand\", {SUBREG, REG, CONST_INT}},\t\\\n-  {\"reg_or_6bit_operand\", {SUBREG, REG, CONST_INT}},\t\\\n-  {\"reg_or_8bit_operand\", {SUBREG, REG, CONST_INT}},\t\\\n-  {\"cint8_operand\", {CONST_INT}},                       \\\n-  {\"reg_or_cint_operand\", {SUBREG, REG, CONST_INT}},\t\\\n-  {\"add_operand\", {SUBREG, REG, CONST_INT}},\t\t\\\n-  {\"sext_add_operand\", {SUBREG, REG, CONST_INT}},\t\\\n-  {\"const48_operand\", {CONST_INT}},\t\t\t\\\n-  {\"and_operand\", {SUBREG, REG, CONST_INT}},\t\t\\\n-  {\"or_operand\", {SUBREG, REG, CONST_INT}},\t\t\\\n-  {\"mode_mask_operand\", {CONST_INT}},\t\t\t\\\n-  {\"mul8_operand\", {CONST_INT}},\t\t\t\\\n-  {\"mode_width_operand\", {CONST_INT}},\t\t\t\\\n-  {\"reg_or_fp0_operand\", {SUBREG, REG, CONST_DOUBLE}},\t\\\n-  {\"alpha_comparison_operator\", {EQ, LE, LT, LEU, LTU}}, \\\n-  {\"alpha_swapped_comparison_operator\", {EQ, GE, GT, GEU, GTU}}, \\\n-  {\"signed_comparison_operator\", {EQ, NE, LE, LT, GE, GT}}, \\\n-  {\"divmod_operator\", {DIV, MOD, UDIV, UMOD}},\t\t\\\n-  {\"fp0_operand\", {CONST_DOUBLE}},\t\t\t\\\n-  {\"current_file_function_operand\", {SYMBOL_REF}},\t\\\n-  {\"call_operand\", {REG, SYMBOL_REF}},\t\t\t\\\n-  {\"input_operand\", {SUBREG, REG, MEM, CONST_INT, CONST_DOUBLE,\t\\\n-\t\t     SYMBOL_REF, CONST, LABEL_REF}},\t\\\n-  {\"some_operand\", {SUBREG, REG, MEM, CONST_INT, CONST_DOUBLE, \\\n-\t\t    SYMBOL_REF, CONST, LABEL_REF}},\t\\\n-  {\"aligned_memory_operand\", {MEM}},\t\t\t\\\n-  {\"unaligned_memory_operand\", {MEM}},\t\t\t\\\n-  {\"reg_or_unaligned_mem_operand\", {SUBREG, REG, MEM}},\t\\\n-  {\"any_memory_operand\", {MEM}},\t\t\t\\\n+#define PREDICATE_CODES \t\t\t\t\t\t\\\n+  {\"reg_or_0_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n+  {\"reg_or_6bit_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n+  {\"reg_or_8bit_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n+  {\"cint8_operand\", {CONST_INT, CONSTANT_P_RTX}},                       \\\n+  {\"reg_or_cint_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n+  {\"add_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\t\\\n+  {\"sext_add_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\\\n+  {\"const48_operand\", {CONST_INT}},\t\t\t\t\t\\\n+  {\"and_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\t\\\n+  {\"or_operand\", {SUBREG, REG, CONST_INT, CONSTANT_P_RTX}},\t\t\\\n+  {\"mode_mask_operand\", {CONST_INT}},\t\t\t\t\t\\\n+  {\"mul8_operand\", {CONST_INT}},\t\t\t\t\t\\\n+  {\"mode_width_operand\", {CONST_INT}},\t\t\t\t\t\\\n+  {\"reg_or_fp0_operand\", {SUBREG, REG, CONST_DOUBLE}},\t\t\t\\\n+  {\"alpha_comparison_operator\", {EQ, LE, LT, LEU, LTU}},\t\t\\\n+  {\"alpha_swapped_comparison_operator\", {EQ, GE, GT, GEU, GTU}},\t\\\n+  {\"signed_comparison_operator\", {EQ, NE, LE, LT, GE, GT}},\t\t\\\n+  {\"divmod_operator\", {DIV, MOD, UDIV, UMOD}},\t\t\t\t\\\n+  {\"fp0_operand\", {CONST_DOUBLE}},\t\t\t\t\t\\\n+  {\"current_file_function_operand\", {SYMBOL_REF}},\t\t\t\\\n+  {\"call_operand\", {REG, SYMBOL_REF}},\t\t\t\t\t\\\n+  {\"input_operand\", {SUBREG, REG, MEM, CONST_INT, CONST_DOUBLE,\t\t\\\n+\t\t     SYMBOL_REF, CONST, LABEL_REF, CONSTANT_P_RTX}},\t\\\n+  {\"some_operand\", {SUBREG, REG, MEM, CONST_INT, CONST_DOUBLE,\t\t\\\n+\t\t    SYMBOL_REF, CONST, LABEL_REF, CONSTANT_P_RTX}},\t\\\n+  {\"aligned_memory_operand\", {MEM}},\t\t\t\t\t\\\n+  {\"unaligned_memory_operand\", {MEM}},\t\t\t\t\t\\\n+  {\"reg_or_unaligned_mem_operand\", {SUBREG, REG, MEM}},\t\t\t\\\n+  {\"any_memory_operand\", {MEM}},\t\t\t\t\t\\\n   {\"hard_fp_register_operand\", {SUBREG, REG}},\n \f\n /* Tell collect that the object format is ECOFF.  */"}]}