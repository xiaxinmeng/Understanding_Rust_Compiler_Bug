{"sha": "1ace9b605280a3134cc93f924420dd77d3b176be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFjZTliNjA1MjgwYTMxMzRjYzkzZjkyNDQyMGRkNzdkM2IxNzZiZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1995-11-27T22:10:51Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1995-11-27T22:10:51Z"}, "message": "Initial revision\n\nFrom-SVN: r10615", "tree": {"sha": "22271529628d2247a6047751fb2d02efe4a16c1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22271529628d2247a6047751fb2d02efe4a16c1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ace9b605280a3134cc93f924420dd77d3b176be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ace9b605280a3134cc93f924420dd77d3b176be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ace9b605280a3134cc93f924420dd77d3b176be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ace9b605280a3134cc93f924420dd77d3b176be/comments", "author": null, "committer": null, "parents": [{"sha": "b01c45558a9f8f150ee3333e9bedad1113b03613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b01c45558a9f8f150ee3333e9bedad1113b03613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b01c45558a9f8f150ee3333e9bedad1113b03613"}], "stats": {"total": 1334, "additions": 1334, "deletions": 0}, "files": [{"sha": "a3e4995f92985074b1037a3ddd244c0a59af36d7", "filename": "gcc/config/pa/lib1funcs.asm", "status": "added", "additions": 1138, "deletions": 0, "changes": 1138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ace9b605280a3134cc93f924420dd77d3b176be/gcc%2Fconfig%2Fpa%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ace9b605280a3134cc93f924420dd77d3b176be/gcc%2Fconfig%2Fpa%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Flib1funcs.asm?ref=1ace9b605280a3134cc93f924420dd77d3b176be", "patch": "@@ -0,0 +1,1138 @@\n+;  Low level integer divide, multiply, remainder, etc routines for the HPPA.\n+;  Copyright (C) 1995 Free Software Foundation, Inc.\n+\n+;  This file is part of GNU CC.\n+\n+;  GNU CC is free software; you can redistribute it and/or modify\n+;  it under the terms of the GNU General Public License as published by\n+;  the Free Software Foundation; either version 2, or (at your option)\n+;  any later version.\n+\n+;  GNU CC is distributed in the hope that it will be useful,\n+;  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;  GNU General Public License for more details.\n+\n+;  You should have received a copy of the GNU General Public License\n+;  along with GNU CC; see the file COPYING.  If not, write to\n+;  the Free Software Foundation, 59 Temple Place - Suite 330,\n+;  Boston, MA 02111-1307, USA.\n+\n+#ifdef L_dyncall\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.export\t$$dyncall\n+$$dyncall\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tbb,>=,n\t%r22,30,L$1\t\t; branch if not plabel address\n+\tdepi\t0,31,2,%r22\t\t; clear the two least significant bits\n+\tldw\t4(%sr0,%r22),%r19\t; load new LTP value\n+\tldw\t0(%sr0,%r22),%r22\t; load address of target\n+L$1\tldsid\t(%sr0,%r22),%r1\t\t; get the \"space ident\" selected by r22\n+\tmtsp\t%r1,%sr0\t\t; move that space identifier into sr0\n+\tbe\t0(%sr0,%r22)\t\t; branch to the real target\n+\tstw\t%r2,-24(%sr0,%r30)\t; save return address into frame marker\n+\t.exit\n+\t.procend\n+#endif\n+\n+\n+#ifdef L_multiply\n+#define\top0\t%r26\n+#define\top1\t%r25\n+#define res\t%r29\n+#define ret\t%r31\n+#define tmp\t%r1\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align 4\n+\t.export\t$$mulU\n+\t.export\t$$mulI\n+$$mulU\n+$$mulI\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\taddi,tr\t\t0,%r0,res\t; clear out res, skip next insn\n+L$loop\tzdep\t\top1,26,27,op1\t; shift up op1 by 5\n+L$lo\tzdep\t\top0,30,5,tmp\t; extract next 5 bits and shift up\n+\tblr\t\ttmp,%r0\n+\textru\t\top0,26,27,op0\t; shift down op0 by 5\n+L$0\tcomib,<>\t0,op0,L$lo\n+\tzdep\t\top1,26,27,op1\t; shift up op1 by 5\n+\tbv\t\t%r0(ret)\n+\tnop\n+L$1\tb\t\tL$loop\n+\taddl\t\top1,res,res\n+\tnop\n+\tnop\n+L$2\tb\t\tL$loop\n+\tsh1addl\t\top1,res,res\n+\tnop\n+\tnop\n+L$3\tsh1addl\t\top1,op1,tmp\t; 3x\n+\tb\t\tL$loop\n+\taddl\t\ttmp,res,res\n+\tnop\n+L$4\tb\t\tL$loop\n+\tsh2addl\t\top1,res,res\n+\tnop\n+\tnop\n+L$5\tsh2addl\t\top1,op1,tmp\t; 5x\n+\tb\t\tL$loop\n+\taddl\t\ttmp,res,res\n+\tnop\n+L$6\tsh1addl\t\top1,op1,tmp\t; 3x\n+\tb\t\tL$loop\n+\tsh1addl\t\ttmp,res,res\n+\tnop\n+L$7\tzdep\t\top1,28,29,tmp\t; 8x\n+\tsub\t\ttmp,op1,tmp\t; 7x\n+\tb\t\tL$loop\n+\taddl\t\ttmp,res,res\n+L$8\tb\t\tL$loop\n+\tsh3addl\t\top1,res,res\n+\tnop\n+\tnop\n+L$9\tsh3addl\t\top1,op1,tmp\t; 9x\n+\tb\t\tL$loop\n+\taddl\t\ttmp,res,res\n+\tnop\n+L$10\tsh2addl\t\top1,op1,tmp\t; 5x\n+\tb\t\tL$loop\n+\tsh1addl\t\ttmp,res,res\n+\tnop\n+L$11\tsh2addl\t\top1,op1,tmp\t; 5x\n+\tsh1addl\t\ttmp,op1,tmp\t; 11x\n+\tb\t\tL$loop\n+\taddl\t\ttmp,res,res\n+L$12\tsh1addl\t\top1,op1,tmp\t; 3x\n+\tb\t\tL$loop\n+\tsh2addl\t\ttmp,res,res\n+\tnop\n+L$13\tsh1addl\t\top1,op1,tmp\t; 3x\n+\tsh2addl\t\ttmp,op1,tmp\t; 13x\n+\tb\t\tL$loop\n+\taddl\t\ttmp,res,res\n+L$14\tzdep\t\top1,28,29,tmp\t; 8x\n+\tsub\t\ttmp,op1,tmp\t; 7x\n+\tb\t\tL$loop\n+\tsh1addl\t\ttmp,res,res\n+L$15\tzdep\t\top1,27,28,tmp\t; 16x\n+\tsub\t\ttmp,op1,tmp\t; 15x\n+\tb\t\tL$loop\n+\taddl\t\ttmp,res,res\n+L$16\tzdep\t\top1,27,28,tmp\t; 16x\n+\tb\t\tL$loop\n+\taddl\t\ttmp,res,res\n+\tnop\n+L$17\tzdep\t\top1,27,28,tmp\t; 16x\n+\taddl\t\ttmp,op1,tmp\t; 17x\n+\tb\t\tL$loop\n+\taddl\t\ttmp,res,res\n+L$18\tsh3addl\t\top1,op1,tmp\t; 9x\n+\tb\t\tL$loop\n+\tsh1addl\t\ttmp,res,res\n+\tnop\n+L$19\tsh3addl\t\top1,op1,tmp\t; 9x\n+\tsh1addl\t\ttmp,op1,tmp\t; 19x\n+\tb\t\tL$loop\n+\taddl\t\ttmp,res,res\n+L$20\tsh2addl\t\top1,op1,tmp\t; 5x\n+\tb\t\tL$loop\n+\tsh2addl\t\ttmp,res,res\n+\tnop\n+L$21\tsh2addl\t\top1,op1,tmp\t; 5x\n+\tsh2addl\t\ttmp,op1,tmp\t; 21x\n+\tb\t\tL$loop\n+\taddl\t\ttmp,res,res\n+L$22\tsh2addl\t\top1,op1,tmp\t; 5x\n+\tsh1addl\t\ttmp,op1,tmp\t; 11x\n+\tb\t\tL$loop\n+\tsh1addl\t\ttmp,res,res\n+L$23\tsh1addl\t\top1,op1,tmp\t; 3x\n+\tsh3addl\t\ttmp,res,res\t; += 8x3\n+\tb\t\tL$loop\n+\tsub\t\tres,op1,res\t; -= x\n+L$24\tsh1addl\t\top1,op1,tmp\t; 3x\n+\tb\t\tL$loop\n+\tsh3addl\t\ttmp,res,res\t; += 8x3\n+\tnop\n+L$25\tsh2addl\t\top1,op1,tmp\t; 5x\n+\tsh2addl\t\ttmp,tmp,tmp\t; 25x\n+\tb\t\tL$loop\n+\taddl\t\ttmp,res,res\n+L$26\tsh1addl\t\top1,op1,tmp\t; 3x\n+\tsh2addl\t\ttmp,op1,tmp\t; 13x\n+\tb\t\tL$loop\n+\tsh1addl\t\ttmp,res,res\t; += 2x13\n+L$27\tsh1addl\t\top1,op1,tmp\t; 3x\n+\tsh3addl\t\ttmp,tmp,tmp\t; 27x\n+\tb\t\tL$loop\n+\taddl\t\ttmp,res,res\n+L$28\tzdep\t\top1,28,29,tmp\t; 8x\n+\tsub\t\ttmp,op1,tmp\t; 7x\n+\tb\t\tL$loop\n+\tsh2addl\t\ttmp,res,res\t; += 4x7\n+L$29\tsh1addl\t\top1,op1,tmp\t; 3x\n+\tsub\t\tres,tmp,res\t; -= 3x\n+\tb\t\tL$foo\n+\tzdep\t\top1,26,27,tmp\t; 32x\n+L$30\tzdep\t\top1,27,28,tmp\t; 16x\n+\tsub\t\ttmp,op1,tmp\t; 15x\n+\tb\t\tL$loop\n+\tsh1addl\t\ttmp,res,res\t; += 2x15\n+L$31\tzdep\t\top1,26,27,tmp\t; 32x\n+\tsub\t\ttmp,op1,tmp\t; 31x\n+L$foo\tb\t\tL$loop\n+\taddl\t\ttmp,res,res\n+\t.exit\n+\t.procend\n+#endif\n+\n+\n+#ifdef L_divU\n+#define dividend %r26\n+#define divisor %r25\n+#define tmp %r1\n+#define quotient %r29\n+#define ret %r31\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align 4\n+\t.export\t$$divU\n+$$divU\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tcomb,<\t\tdivisor,0,L$largedivisor\n+\t sub\t\t%r0,divisor,%r1\t\t; clear cy as side-effect\n+\tds\t\t%r0,%r1,%r0\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r0,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,quotient\n+\tds\t\t%r1,divisor,%r1\n+\tbv\t\t0(ret)\n+\taddc\t\tquotient,quotient,quotient\n+L$largedivisor\n+\tcomclr,<<\tdividend,divisor,quotient\n+\tldi\t\t1,quotient\n+\tbv,n\t\t0(ret)\n+\t.exit\n+\t.procend\n+#endif\n+\n+\n+#ifdef L_remU\n+#define dividend %r26\n+#define divisor %r25\n+#define quotient %r29\n+#define tmp %r1\n+#define ret %r31\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align 4\n+\t.export\t$$remU\n+$$remU\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tcomb,<\t\tdivisor,0,L$largedivisor\n+\t sub\t\t%r0,divisor,%r1\t\t; clear cy as side-effect\n+\tds\t\t%r0,%r1,%r0\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r0,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,quotient\n+\tds\t\t%r1,divisor,%r1\n+\tcomclr,>=\t%r1,%r0,%r0\n+\taddl\t\t%r1,divisor,%r1\n+\tbv\t\t0(ret)\n+\tcopy\t\t%r1,quotient\n+L$largedivisor\n+\tsub,>>=\t\tdividend,divisor,quotient\n+\tcopy\t\tdividend,quotient\n+\tbv,n\t\t0(ret)\n+\t.exit\n+\t.procend\n+#endif\n+\n+\n+#ifdef L_divI\n+#define dividend %r26\n+#define divisor %r25\n+#define quotient %r29\n+#define tmp %r1\n+#define ret %r31\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align 4\n+\t.export\t$$divI\n+$$divI\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\txor\t\tdividend,divisor,quotient\t; result sign\n+\tcomclr,>=\tdivisor,%r0,%r0\t\t\t; get absolute values\n+\tsub\t\t%r0,divisor,divisor\n+\tcomclr,>=\tdividend,%r0,%r0\n+\tsub\t\t%r0,dividend,dividend\n+\n+\tcomb,<\t\tdivisor,0,L$largedivisor\n+\t sub\t\t%r0,divisor,%r1\t\t; clear cy as side-effect\n+\tds\t\t%r0,%r1,%r0\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r0,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tcomclr,>=\t%r1,%r0,%r0\n+\taddl\t\t%r1,divisor,%r1\n+\tcomclr,>=\tquotient,%r0,%r0\t; skip of no need to negate\n+\tsub\t\t%r0,dividend,dividend\n+\tbv\t\t0(ret)\n+\tcopy\t\tdividend,quotient\n+L$largedivisor\n+\tcomclr,<<\tdividend,divisor,quotient\n+\tldi\t\t1,quotient\n+\tbv,n\t\t0(ret)\n+\t.exit\n+\t.procend\n+#endif\n+\n+\n+#ifdef L_remI\n+#define dividend %r26\n+#define divisor %r25\n+#define quotient %r29\n+#define tmp %r1\n+#define ret %r31\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align 4\n+\t.export\t$$remI\n+$$remI\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\txor\t\tdividend,%r0,quotient\t\t; result sign\n+\tcomclr,>=\tdivisor,%r0,%r0\t\t\t; get absolute values\n+\tsub\t\t%r0,divisor,divisor\n+\tcomclr,>=\tdividend,%r0,%r0\n+\tsub\t\t%r0,dividend,dividend\n+\n+\tcomb,<\t\tdivisor,0,L$largedivisor\n+\t sub\t\t%r0,divisor,%r1\t\t; clear cy as side-effect\n+\tds\t\t%r0,%r1,%r0\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r0,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tds\t\t%r1,divisor,%r1\n+\taddc\t\tdividend,dividend,dividend\n+\tcomclr,>=\t%r1,%r0,%r0\n+\taddl\t\t%r1,divisor,%r1\n+\tcomclr,>=\tquotient,%r0,%r0\t; skip of no need to negate\n+\tsub\t\t%r0,%r1,%r1\n+\tbv\t\t0(ret)\n+\tcopy\t\t%r1,quotient\n+L$largedivisor\n+\tsub,>>=\t\tdividend,divisor,quotient\n+\tcopy\t\tdividend,quotient\n+\tbv,n\t\t0(ret)\n+\t.exit\n+\t.procend\n+#endif\n+\n+\n+#if defined (L_divU_3) && !defined (SMALL_LIB)\n+#undef L_divU_3\n+#define dividend %r26\n+#define divisor %r25\n+#define tmp %r1\n+#define result %r29\n+#define ret %r31\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align 4\n+\t.export\t$$divU_3\n+$$divU_3\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tsh2add\t%r26,%r26,%r29\t\t; r29 = lo(101 x r)\n+\tshd\t%r0,%r26,30,%r1\t\t;  r1 = hi(100 x r)\n+\taddc\t%r1,%r0,%r1\t\t;  r1 = hi(101 x r)\n+; r in r1,,r29\n+\tzdep\t%r29,27,28,%r25\t\t; r25 = lo(10000 x r)\n+\tadd\t%r25,%r29,%r25\t\t; r25 = lo(10001 x r)\n+\tshd\t%r1,%r29,28,%r29\t; r29 = hi(10000 x r)\n+\taddc\t%r29,%r1,%r29\t\t; r29 = hi(10001 x r)\n+; r in r29,,r25\n+\tzdep\t%r25,23,24,%r1\t\t;  r1 = lo(100000000 x r)\n+\tadd\t%r1,%r25,%r1\t\t;  r1 = lo(100000001 x r)\n+\tshd\t%r29,%r25,24,%r25\t; r25 = hi(100000000 x r)\n+\taddc\t%r25,%r29,%r25\t\t; r25 = hi(100000001 x r)\n+; r in r25,,r1\n+\tzdep\t%r1,15,16,%r29\n+\tadd\t%r29,%r1,%r29\n+\tshd\t%r25,%r1,16,%r1\n+\taddc\t%r1,%r25,%r1\n+; r in r1,,r29\n+\tsh1add\t%r29,%r26,%r0\t\t;  r0 = lo(10 x r) + dividend\n+\tshd\t%r1,%r29,31,%r29\t; r29 = hi(10 x r)\n+\taddc\t%r29,%r0,%r29\n+\tbv\t0(ret)\n+\textru\t%r29,30,31,result\n+\t.exit\n+\t.procend\n+#endif\n+\n+\n+#if defined (L_divU_5) && !defined (SMALL_LIB)\n+#undef L_divU_5\n+#define dividend %r26\n+#define divisor %r25\n+#define tmp %r1\n+#define result %r29\n+#define ret %r31\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align 4\n+\t.export\t$$divU_5\n+$$divU_5\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tsh1add\t%r26,%r26,%r29\t\t; r29 = lo(11 x r)\n+\tshd\t%r0,%r26,31,%r1\t\t;  r1 = hi(10 x r)\n+\taddc\t%r1,%r0,%r1\t\t;  r1 = hi(11 x r)\n+; r in r1,,r29\n+\tzdep\t%r29,27,28,%r25\t\t; r25 = lo(10000 x r)\n+\tadd\t%r25,%r29,%r25\t\t; r25 = lo(10001 x r)\n+\tshd\t%r1,%r29,28,%r29\t; r29 = hi(10000 x r)\n+\taddc\t%r29,%r1,%r29\t\t; r29 = hi(10001 x r)\n+; r in r29,,r25\n+\tzdep\t%r25,23,24,%r1\t\t;  r1 = lo(100000000 x r)\n+\tadd\t%r1,%r25,%r1\t\t;  r1 = lo(100000001 x r)\n+\tshd\t%r29,%r25,24,%r25\t; r25 = hi(100000000 x r)\n+\taddc\t%r25,%r29,%r25\t\t; r25 = hi(100000001 x r)\n+; r in r25,,r1\n+\tzdep\t%r1,15,16,%r29\n+\tadd\t%r29,%r1,%r29\n+\tshd\t%r25,%r1,16,%r1\n+\taddc\t%r1,%r25,%r1\n+; r in r1,,r29\n+\tsh2add\t%r29,%r26,%r0\t\t;  r0 = lo(1000 x r) + dividend\n+\tshd\t%r1,%r29,30,%r29\t; r29 = hi(1000 x r)\n+\taddc\t%r29,%r0,%r29\n+\tbv\t0(ret)\n+\textru\t%r29,29,30,result\n+\t.exit\n+\t.procend\n+#endif\n+\n+\n+#if defined (L_divU_6) && !defined (SMALL_LIB)\n+#undef L_divU_6\n+#define dividend %r26\n+#define divisor %r25\n+#define tmp %r1\n+#define result %r29\n+#define ret %r31\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align 4\n+\t.export\t$$divU_6\n+$$divU_6\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tsh2add\t%r26,%r26,%r29\t\t; r29 = lo(101 x r)\n+\tshd\t%r0,%r26,30,%r1\t\t;  r1 = hi(100 x r)\n+\taddc\t%r1,%r0,%r1\t\t;  r1 = hi(101 x r)\n+; r in r1,,r29\n+\tzdep\t%r29,27,28,%r25\t\t; r25 = lo(10000 x r)\n+\tadd\t%r25,%r29,%r25\t\t; r25 = lo(10001 x r)\n+\tshd\t%r1,%r29,28,%r29\t; r29 = hi(10000 x r)\n+\taddc\t%r29,%r1,%r29\t\t; r29 = hi(10001 x r)\n+; r in r29,,r25\n+\tzdep\t%r25,23,24,%r1\t\t;  r1 = lo(100000000 x r)\n+\tadd\t%r1,%r25,%r1\t\t;  r1 = lo(100000001 x r)\n+\tshd\t%r29,%r25,24,%r25\t; r25 = hi(100000000 x r)\n+\taddc\t%r25,%r29,%r25\t\t; r25 = hi(100000001 x r)\n+; r in r25,,r1\n+\tzdep\t%r1,15,16,%r29\n+\tadd\t%r29,%r1,%r29\n+\tshd\t%r25,%r1,16,%r1\n+\taddc\t%r1,%r25,%r1\n+; r in r1,,r29\n+\tsh1add\t%r29,%r26,%r0\t\t;  r0 = lo(10 x r) + dividend\n+\tshd\t%r1,%r29,31,%r29\t; r29 = hi(10 x r)\n+\taddc\t%r29,%r0,%r29\n+\tbv\t0(ret)\n+\textru\t%r29,29,30,result\n+\t.exit\n+\t.procend\n+#endif\n+\n+\n+#if defined (L_divU_9) && !defined (SMALL_LIB)\n+#undef L_divU_9\n+#define dividend %r26\n+#define divisor %r25\n+#define tmp %r1\n+#define result %r29\n+#define ret %r31\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align 4\n+\t.export\t$$divU_9\n+$$divU_9\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tzdep\t%r26,28,29,%r29\n+\tsub\t%r29,%r26,%r29\n+\tshd\t0,%r26,29,%r1\n+\tsubb\t%r1,0,%r1\t\t/* 111 */\n+\n+\tzdep\t%r29,25,26,%r25\n+\tadd\t%r25,%r29,%r25\n+\tshd\t%r1,%r29,26,%r29\n+\taddc\t%r29,%r1,%r29\t\t/* 111000111 */\n+\n+\tsh3add\t%r25,%r26,%r1\n+\tshd\t%r29,%r25,29,%r25\n+\taddc\t%r25,0,%r25\t\t/* 111000111001 */\n+\n+\tzdep\t%r1,16,17,%r29\n+\tsub\t%r29,%r1,%r29\n+\tshd\t%r25,%r1,17,%r1\n+\tsubb\t%r1,%r25,%r1\t\t/* 111000111000111000111000111 */\n+\n+\tsh3add\t%r29,%r26,%r0\n+\tshd\t%r1,%r29,29,%r29\n+\taddc\t%r29,0,%r29\t\t/* 111000111000111000111000111001 */\n+\tbv\t0(ret)\n+\textru\t%r29,30,31,result\n+\t.exit\n+\t.procend\n+#endif\n+\n+\n+#if defined (L_divU_10) && !defined (SMALL_LIB)\n+#undef L_divU_10\n+#define dividend %r26\n+#define divisor %r25\n+#define tmp %r1\n+#define result %r29\n+#define ret %r31\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align 4\n+\t.export\t$$divU_10\n+$$divU_10\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tsh1add\t%r26,%r26,%r29\t\t; r29 = lo(11 x r)\n+\tshd\t%r0,%r26,31,%r1\t\t;  r1 = hi(10 x r)\n+\taddc\t%r1,%r0,%r1\t\t;  r1 = hi(11 x r)\n+; r in r1,,r29\n+\tzdep\t%r29,27,28,%r25\t\t; r25 = lo(10000 x r)\n+\tadd\t%r25,%r29,%r25\t\t; r25 = lo(10001 x r)\n+\tshd\t%r1,%r29,28,%r29\t; r29 = hi(10000 x r)\n+\taddc\t%r29,%r1,%r29\t\t; r29 = hi(10001 x r)\n+; r in r29,,r25\n+\tzdep\t%r25,23,24,%r1\t\t;  r1 = lo(100000000 x r)\n+\tadd\t%r1,%r25,%r1\t\t;  r1 = lo(100000001 x r)\n+\tshd\t%r29,%r25,24,%r25\t; r25 = hi(100000000 x r)\n+\taddc\t%r25,%r29,%r25\t\t; r25 = hi(100000001 x r)\n+; r in r25,,r1\n+\tzdep\t%r1,15,16,%r29\n+\tadd\t%r29,%r1,%r29\n+\tshd\t%r25,%r1,16,%r1\n+\taddc\t%r1,%r25,%r1\n+; r in r1,,r29\n+\tsh2add\t%r29,%r26,%r0\t\t;  r0 = lo(1000 x r) + dividend\n+\tshd\t%r1,%r29,30,%r29\t; r29 = hi(1000 x r)\n+\taddc\t%r29,%r0,%r29\n+\tbv\t0(ret)\n+\textru\t%r29,28,29,result\n+\t.exit\n+\t.procend\n+#endif\n+\n+\n+#if defined (L_divU_12) && !defined (SMALL_LIB)\n+#undef L_divU_12\n+#define dividend %r26\n+#define divisor %r25\n+#define tmp %r1\n+#define result %r29\n+#define ret %r31\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align 4\n+\t.export\t$$divU_12\n+$$divU_12\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tsh2add\t%r26,%r26,%r29\t\t; r29 = lo(101 x r)\n+\tshd\t%r0,%r26,30,%r1\t\t;  r1 = hi(100 x r)\n+\taddc\t%r1,%r0,%r1\t\t;  r1 = hi(101 x r)\n+; r in r1,,r29\n+\tzdep\t%r29,27,28,%r25\t\t; r25 = lo(10000 x r)\n+\tadd\t%r25,%r29,%r25\t\t; r25 = lo(10001 x r)\n+\tshd\t%r1,%r29,28,%r29\t; r29 = hi(10000 x r)\n+\taddc\t%r29,%r1,%r29\t\t; r29 = hi(10001 x r)\n+; r in r29,,r25\n+\tzdep\t%r25,23,24,%r1\t\t;  r1 = lo(100000000 x r)\n+\tadd\t%r1,%r25,%r1\t\t;  r1 = lo(100000001 x r)\n+\tshd\t%r29,%r25,24,%r25\t; r25 = hi(100000000 x r)\n+\taddc\t%r25,%r29,%r25\t\t; r25 = hi(100000001 x r)\n+; r in r25,,r1\n+\tzdep\t%r1,15,16,%r29\n+\tadd\t%r29,%r1,%r29\n+\tshd\t%r25,%r1,16,%r1\n+\taddc\t%r1,%r25,%r1\n+; r in r1,,r29\n+\tsh1add\t%r29,%r26,%r0\t\t;  r0 = lo(10 x r) + dividend\n+\tshd\t%r1,%r29,31,%r29\t; r29 = hi(10 x r)\n+\taddc\t%r29,%r0,%r29\n+\tbv\t0(ret)\n+\textru\t%r29,28,29,result\n+\t.exit\n+\t.procend\n+#endif\n+\n+\n+#ifdef L_divU_3\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divU_3\n+$$divU_3\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divU\n+\tldi\t\t3,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divU,MILLICODE\n+#endif\n+\n+#ifdef L_divU_5\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divU_5\n+$$divU_5\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divU\n+\tldi\t\t5,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divU,MILLICODE\n+#endif\n+\n+#ifdef L_divU_6\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divU_6\n+$$divU_6\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divU\n+\tldi\t\t6,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divU,MILLICODE\n+#endif\n+\n+#ifdef L_divU_7\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divU_7\n+$$divU_7\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divU\n+\tldi\t\t7,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divU,MILLICODE\n+#endif\n+\n+#ifdef L_divU_9\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divU_9\n+$$divU_9\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divU\n+\tldi\t\t9,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divU,MILLICODE\n+#endif\n+\n+#ifdef L_divU_10\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divU_10\n+$$divU_10\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divU\n+\tldi\t\t10,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divU,MILLICODE\n+#endif\n+\n+#ifdef L_divU_12\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divU_12\n+$$divU_12\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divU\n+\tldi\t\t12,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divU,MILLICODE\n+#endif\n+\n+#ifdef L_divU_14\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divU_14\n+$$divU_14\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divU\n+\tldi\t\t14,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divU,MILLICODE\n+#endif\n+\n+#ifdef L_divU_15\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divU_15\n+$$divU_15\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divU\n+\tldi\t\t15,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divU,MILLICODE\n+#endif\n+\n+#ifdef L_divI_3\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divI_3\n+$$divI_3\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divI\n+\tldi\t\t3,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divI,MILLICODE\n+#endif\n+\n+#ifdef L_divI_5\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divI_5\n+$$divI_5\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divI\n+\tldi\t\t5,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divI,MILLICODE\n+#endif\n+\n+#ifdef L_divI_6\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divI_6\n+$$divI_6\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divI\n+\tldi\t\t6,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divI,MILLICODE\n+#endif\n+\n+#ifdef L_divI_7\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divI_7\n+$$divI_7\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divI\n+\tldi\t\t7,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divI,MILLICODE\n+#endif\n+\n+#ifdef L_divI_9\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divI_9\n+$$divI_9\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divI\n+\tldi\t\t9,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divI,MILLICODE\n+#endif\n+\n+#ifdef L_divI_10\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divI_10\n+$$divI_10\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divI\n+\tldi\t\t10,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divI,MILLICODE\n+#endif\n+\n+#ifdef L_divI_12\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divI_12\n+$$divI_12\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divI\n+\tldi\t\t12,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divI,MILLICODE\n+#endif\n+\n+#ifdef L_divI_14\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divI_14\n+$$divI_14\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divI\n+\tldi\t\t14,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divI,MILLICODE\n+#endif\n+\n+#ifdef L_divI_15\n+\t.space\t$TEXT$\n+\t.subspa\t$MILLICODE$,quad=0,align=8,access=0x2c,sort=8\n+\t.align\t4\n+\t.export\t$$divI_15\n+$$divI_15\n+\t.proc\n+\t.callinfo\tframe=0,no_calls\n+\t.entry\n+\tb\t\t$$divI\n+\tldi\t\t15,%r25\n+\t.exit\n+\t.procend\n+\t.import\t\t$$divI,MILLICODE\n+#endif"}, {"sha": "e618cbf58813718abc2b9ebf5a39a0f07199b55e", "filename": "gcc/config/pa/pa-pro.h", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ace9b605280a3134cc93f924420dd77d3b176be/gcc%2Fconfig%2Fpa%2Fpa-pro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ace9b605280a3134cc93f924420dd77d3b176be/gcc%2Fconfig%2Fpa%2Fpa-pro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-pro.h?ref=1ace9b605280a3134cc93f924420dd77d3b176be", "patch": "@@ -0,0 +1,105 @@\n+/* Definitions of target machine for GNU compiler, for PRO.\n+   Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#ifndef TARGET_DEFAULT\n+/* JUMP_IN_DELAY + PORTABLE_RUNTIME + GAS + NO_SPAEC_REGS */\n+#define TARGET_DEFAULT (4 + 8 + 64 + 128)\n+#endif\n+\n+/* Global constructor and destructor support.  */\n+/* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n+ \n+   Note that we want to give these sections the SHF_WRITE attribute\n+   because these sections will actually contain data (i.e. tables of\n+   addresses of functions in the current root executable or shared library\n+   file) and, in the case of a shared library, the relocatable addresses\n+   will have to be properly resolved/relocated (and then written into) by\n+   the dynamic linker when it actually attaches the given shared library\n+   to the executing process.  */\n+ \n+#define CTORS_SECTION_ASM_OP    \"\\t.section\\t\\\".ctors\\\",#alloc,#write\"\n+#define DTORS_SECTION_ASM_OP    \"\\t.section\\t\\\".dtors\\\",#alloc,#write\"\n+\n+#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+ctors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_ctors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_ctors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+dtors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_dtors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_dtors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  */\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    dtors_section ();                   \t\t\t\t\\\n+    fprintf (FILE, \"\\t.word\\t \");\t\t\t\t\\\n+    assemble_name (FILE, NAME);              \t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global constructors.  */\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    ctors_section ();\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t.word\\t \");\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#include \"pa/pa.h\"\n+\n+/* Make GCC agree with types.h.  */\n+#undef SIZE_TYPE\n+#undef PTRDIFF_TYPE\n+\n+#define SIZE_TYPE \"unsigned int\"\n+#define PTRDIFF_TYPE \"int\"\n+\n+/* Like the default, except no -lg.  */\n+#undef LIB_SPEC\n+#define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p: -L/lib/libp/ -lc}%{pg: -L/lib/libp/ -lc}\"\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dhppa -DPWB -Acpu(hppa) -Amachine(hppa)\"\n+\n+/* hpux8 and later have C++ compatable include files, so do not\n+   pretend they are `extern \"C\"'.  */\n+#define NO_IMPLICIT_EXTERN_C\n+\n+/* We don't want a crt0.o to get linked in automatically, we want the\n+   linker script to pull it in.\n+ */\n+#define STARTFILE_SPEC \"\""}, {"sha": "5541e4b36113ffca38d254615a40d67aa0593d88", "filename": "gcc/config/pa/t-pro", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ace9b605280a3134cc93f924420dd77d3b176be/gcc%2Fconfig%2Fpa%2Ft-pro", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ace9b605280a3134cc93f924420dd77d3b176be/gcc%2Fconfig%2Fpa%2Ft-pro", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-pro?ref=1ace9b605280a3134cc93f924420dd77d3b176be", "patch": "@@ -0,0 +1,30 @@\n+LIBGCC1=libgcc1.null\n+CROSS_LIBGCC1 = libgcc1.null\n+LIB1ASMSRC =\n+LIB1ASMFUNCS =\n+\n+LIBGCC1_TEST =\n+\n+ADA_CFLAGS=-mdisable-indexing\n+\n+LIB2FUNCS_EXTRA=fp-bit.c dp-bit.c lib2funcs.asm\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+lib2funcs.asm: $(srcdir)/config/pa/lib2funcs.asm\n+\trm -f lib2funcs.asm\n+\tcp $(srcdir)/config/pa/lib2funcs.asm .\n+\n+# Build the libraries for both hard and soft floating point\n+\n+MULTILIB_OPTIONS=msoft-float\n+MULTILIB_DIRNAMES=soft-float\n+MULTILIB_MATCHES=\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib"}, {"sha": "66ec811b4acc01809a478ea702f0b5f4cf041872", "filename": "gcc/config/pa/xm-papro.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ace9b605280a3134cc93f924420dd77d3b176be/gcc%2Fconfig%2Fpa%2Fxm-papro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ace9b605280a3134cc93f924420dd77d3b176be/gcc%2Fconfig%2Fpa%2Fxm-papro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fxm-papro.h?ref=1ace9b605280a3134cc93f924420dd77d3b176be", "patch": "@@ -0,0 +1,61 @@\n+/* Configuration for GNU C-compiler for PA-RISC.\n+   Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n+   Contributed by Michael Tiemann (tiemann@cygnus.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+extern int errno;\n+\n+/* #defines that need visibility everywhere.  */\n+#define FALSE 0\n+#define TRUE 1\n+\n+/* This describes the machine the compiler is hosted on.  */\n+#define HOST_BITS_PER_CHAR 8\n+#define HOST_BITS_PER_SHORT 16\n+#define HOST_BITS_PER_INT 32\n+#define HOST_BITS_PER_LONG 32\n+#define HOST_BITS_PER_LONGLONG 64\n+\n+/* Doubles are stored in memory with the high order word first.  This\n+   matters when cross-compiling.  */\n+#define HOST_WORDS_BIG_ENDIAN 1\n+\n+/* Place any machine-dependent include files here, in case we\n+   are bootstrapping.  */\n+\n+/* target machine dependencies.\n+   tm.h is a symbolic link to the actual target specific file.   */\n+#include \"tm.h\"\n+\n+/* Arguments to use with `exit'.  */\n+#define SUCCESS_EXIT_CODE 0\n+#define FATAL_EXIT_CODE 33\n+\n+/* Don't try to use sys_siglist.  */\n+#define NO_SYS_SIGLIST\n+\n+/* We have strerror, don't try to use sys_errlist.  */\n+#define HAVE_STRERROR\n+\n+/* HP's compiler has problems with enum bitfields.  */\n+#define ONLY_INT_FIELDS\n+\n+/* Always claim to use C alloca; this prevents losing if building with\n+   gcc -fno-builtin ... */\n+#define USE_C_ALLOCA"}]}