{"sha": "5799f73221dddf783210a43c6a6eeb75afe10efd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc5OWY3MzIyMWRkZGY3ODMyMTBhNDNjNmE2ZWViNzVhZmUxMGVmZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-08-23T13:18:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-08-23T13:18:37Z"}, "message": "builtins.c (expand_builtin_mathfn): Wrap argument in save_expr directly instead of re-building the call.\n\n2007-08-23  Richard Guenther  <rguenther@suse.de>\n\n\t* builtins.c (expand_builtin_mathfn): Wrap argument in\n\tsave_expr directly instead of re-building the call.\n\t(expand_builtin_mathfn_2): Likewise.\n\t(expand_builtin_mathfn_3): Likewise.\n\t(expand_builtin_interclass_mathfn): Likewise.\n\t(expand_builtin_int_roundingfn): Set arg.\n\t(expand_builtin_int_roundingfn_2): Likewise.\n\nFrom-SVN: r127740", "tree": {"sha": "e11529b035cce6fab4cc4de9836d5eb43e064596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e11529b035cce6fab4cc4de9836d5eb43e064596"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5799f73221dddf783210a43c6a6eeb75afe10efd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5799f73221dddf783210a43c6a6eeb75afe10efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5799f73221dddf783210a43c6a6eeb75afe10efd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5799f73221dddf783210a43c6a6eeb75afe10efd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db8092dc4c678051e1d4e3935a901dbeeef95562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db8092dc4c678051e1d4e3935a901dbeeef95562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db8092dc4c678051e1d4e3935a901dbeeef95562"}], "stats": {"total": 61, "additions": 21, "deletions": 40}, "files": [{"sha": "fbfee2bde8813663cae4469f156b55f67bf5e4ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5799f73221dddf783210a43c6a6eeb75afe10efd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5799f73221dddf783210a43c6a6eeb75afe10efd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5799f73221dddf783210a43c6a6eeb75afe10efd", "patch": "@@ -1,3 +1,13 @@\n+2007-08-23  Richard Guenther  <rguenther@suse.de>\n+\n+\t* builtins.c (expand_builtin_mathfn): Wrap argument in\n+\tsave_expr directly instead of re-building the call.\n+\t(expand_builtin_mathfn_2): Likewise.\n+\t(expand_builtin_mathfn_3): Likewise.\n+\t(expand_builtin_interclass_mathfn): Likewise.\n+\t(expand_builtin_int_roundingfn): Set arg.\n+\t(expand_builtin_int_roundingfn_2): Likewise.\n+\n 2007-08-23  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* config/i386/sse.md (*sse_and<mode>3, *sse_ior<mode>3,"}, {"sha": "2814d3079694cee4ab49c0584764480acbe3d002", "filename": "gcc/builtins.c", "status": "modified", "additions": 11, "deletions": 40, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5799f73221dddf783210a43c6a6eeb75afe10efd/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5799f73221dddf783210a43c6a6eeb75afe10efd/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5799f73221dddf783210a43c6a6eeb75afe10efd", "patch": "@@ -1813,7 +1813,7 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n   tree fndecl = get_callee_fndecl (exp);\n   enum machine_mode mode;\n   bool errno_set = false;\n-  tree arg, narg;\n+  tree arg;\n \n   if (!validate_arglist (exp, REAL_TYPE, VOID_TYPE))\n     return NULL_RTX;\n@@ -1886,12 +1886,7 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n       /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n \t need to expand the argument again.  This way, we will not perform\n \t side-effects more the once.  */\n-      narg = builtin_save_expr (arg);\n-      if (narg != arg)\n-\t{\n-\t  arg = narg;\n-\t  exp = build_call_expr (fndecl, 1, arg);\n-\t}\n+      CALL_EXPR_ARG (exp, 0) = arg = builtin_save_expr (arg);\n \n       op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n \n@@ -1979,10 +1974,9 @@ expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n   rtx op0, op1, insns;\n   int op1_type = REAL_TYPE;\n   tree fndecl = get_callee_fndecl (exp);\n-  tree arg0, arg1, narg;\n+  tree arg0, arg1;\n   enum machine_mode mode;\n   bool errno_set = true;\n-  bool stable = true;\n \n   switch (DECL_FUNCTION_CODE (fndecl))\n     {\n@@ -2039,21 +2033,8 @@ expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n     errno_set = false;\n \n   /* Always stabilize the argument list.  */\n-  narg = builtin_save_expr (arg1);\n-  if (narg != arg1)\n-    {\n-      arg1 = narg;\n-      stable = false;\n-    }\n-  narg = builtin_save_expr (arg0);\n-  if (narg != arg0)\n-    {\n-      arg0 = narg;\n-      stable = false;\n-    }\n-\n-  if (! stable)\n-    exp = build_call_expr (fndecl, 2, arg0, arg1);\n+  CALL_EXPR_ARG (exp, 0) = arg0 = builtin_save_expr (arg0);\n+  CALL_EXPR_ARG (exp, 1) = arg1 = builtin_save_expr (arg1);\n \n   op0 = expand_expr (arg0, subtarget, VOIDmode, EXPAND_NORMAL);\n   op1 = expand_normal (arg1);\n@@ -2099,7 +2080,7 @@ expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n   rtx op0, insns;\n   tree fndecl = get_callee_fndecl (exp);\n   enum machine_mode mode;\n-  tree arg, narg;\n+  tree arg;\n \n   if (!validate_arglist (exp, REAL_TYPE, VOID_TYPE))\n     return NULL_RTX;\n@@ -2139,12 +2120,7 @@ expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n       /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n \t need to expand the argument again.  This way, we will not perform\n \t side-effects more the once.  */\n-      narg = save_expr (arg);\n-      if (narg != arg)\n-\t{\n-\t  arg = narg;\n-\t  exp = build_call_expr (fndecl, 1, arg);\n-\t}\n+      CALL_EXPR_ARG (exp, 0) = arg = builtin_save_expr (arg);\n \n       op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n \n@@ -2211,7 +2187,7 @@ expand_builtin_interclass_mathfn (tree exp, rtx target, rtx subtarget)\n   tree fndecl = get_callee_fndecl (exp);\n   enum machine_mode mode;\n   bool errno_set = false;\n-  tree arg, narg;\n+  tree arg;\n \n   if (!validate_arglist (exp, REAL_TYPE, VOID_TYPE))\n     return NULL_RTX;\n@@ -2257,12 +2233,7 @@ expand_builtin_interclass_mathfn (tree exp, rtx target, rtx subtarget)\n       /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n \t need to expand the argument again.  This way, we will not perform\n \t side-effects more the once.  */\n-      narg = builtin_save_expr (arg);\n-      if (narg != arg)\n-\t{\n-\t  arg = narg;\n-\t  exp = build_call_expr (fndecl, 1, arg);\n-\t}\n+      CALL_EXPR_ARG (exp, 0) = arg = builtin_save_expr (arg);\n \n       op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n \n@@ -2549,7 +2520,7 @@ expand_builtin_int_roundingfn (tree exp, rtx target, rtx subtarget)\n   /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n      need to expand the argument again.  This way, we will not perform\n      side-effects more the once.  */\n-  CALL_EXPR_ARG (exp, 0) = builtin_save_expr (arg);\n+  CALL_EXPR_ARG (exp, 0) = arg = builtin_save_expr (arg);\n \n   op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n \n@@ -2673,7 +2644,7 @@ expand_builtin_int_roundingfn_2 (tree exp, rtx target, rtx subtarget)\n   /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n      need to expand the argument again.  This way, we will not perform\n      side-effects more the once.  */\n-  CALL_EXPR_ARG (exp, 0) = builtin_save_expr (arg);\n+  CALL_EXPR_ARG (exp, 0) = arg = builtin_save_expr (arg);\n \n   op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n "}]}