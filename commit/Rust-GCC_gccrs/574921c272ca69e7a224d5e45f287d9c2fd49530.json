{"sha": "574921c272ca69e7a224d5e45f287d9c2fd49530", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc0OTIxYzI3MmNhNjllN2EyMjRkNWU0NWYyODdkOWMyZmQ0OTUzMA==", "commit": {"author": {"name": "Roman Gareev", "email": "gareevroman@gmail.com", "date": "2014-08-05T03:41:29Z"}, "committer": {"name": "Roman Gareev", "email": "romangareev@gcc.gnu.org", "date": "2014-08-05T03:41:29Z"}, "message": "graphite-isl-ast-to-gimple.c: Add a new struct ast_build_info.\n\n[gcc/]\n\n\t* graphite-isl-ast-to-gimple.c: Add a new struct ast_build_info.\n\t(translate_isl_ast_for_loop): Add checking of the \n\tflag_loop_parallelize_all.\n\t(ast_build_before_for): New function.\n\t(scop_to_isl_ast): Add checking of the \n\tflag_loop_parallelize_all.\n\t* graphite-dependences.c: Move the defenition of the\n\tscop_get_dependences from graphite-optimize-isl.c to this file.\n\t(apply_schedule_on_deps): Add checking of the ux's emptiness.\n\t(carries_deps): Add checking of the x's value.\n\t* graphite-optimize-isl.c: Move the defenition of the\n\tscop_get_dependences to graphite-dependences.c.\n\t* graphite-poly.h: Add declarations of scop_get_dependences\n\tand carries_deps.\n\nFrom-SVN: r213619", "tree": {"sha": "9a96a394ec62b7802faa234bd03fae43b9e630c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a96a394ec62b7802faa234bd03fae43b9e630c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/574921c272ca69e7a224d5e45f287d9c2fd49530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574921c272ca69e7a224d5e45f287d9c2fd49530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/574921c272ca69e7a224d5e45f287d9c2fd49530", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574921c272ca69e7a224d5e45f287d9c2fd49530/comments", "author": {"login": "gareevroman", "id": 6114710, "node_id": "MDQ6VXNlcjYxMTQ3MTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6114710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gareevroman", "html_url": "https://github.com/gareevroman", "followers_url": "https://api.github.com/users/gareevroman/followers", "following_url": "https://api.github.com/users/gareevroman/following{/other_user}", "gists_url": "https://api.github.com/users/gareevroman/gists{/gist_id}", "starred_url": "https://api.github.com/users/gareevroman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gareevroman/subscriptions", "organizations_url": "https://api.github.com/users/gareevroman/orgs", "repos_url": "https://api.github.com/users/gareevroman/repos", "events_url": "https://api.github.com/users/gareevroman/events{/privacy}", "received_events_url": "https://api.github.com/users/gareevroman/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5975cebfbe3666fe53f98e88cfbe6933978895b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5975cebfbe3666fe53f98e88cfbe6933978895b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5975cebfbe3666fe53f98e88cfbe6933978895b"}], "stats": {"total": 152, "additions": 120, "deletions": 32}, "files": [{"sha": "92345ba8ef5ef89d298a13a2d6950cc6f447dbaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574921c272ca69e7a224d5e45f287d9c2fd49530/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574921c272ca69e7a224d5e45f287d9c2fd49530/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=574921c272ca69e7a224d5e45f287d9c2fd49530", "patch": "@@ -1,3 +1,20 @@\n+2014-08-05  Roman Gareev  <gareevroman@gmail.com>\n+\n+\t* graphite-isl-ast-to-gimple.c: Add a new struct ast_build_info.\n+\t(translate_isl_ast_for_loop): Add checking of the \n+\tflag_loop_parallelize_all.\n+\t(ast_build_before_for): New function.\n+\t(scop_to_isl_ast): Add checking of the \n+\tflag_loop_parallelize_all.\n+\t* graphite-dependences.c: Move the defenition of the\n+\tscop_get_dependences from graphite-optimize-isl.c to this file.\n+\t(apply_schedule_on_deps): Add checking of the ux's emptiness.\n+\t(carries_deps): Add checking of the x's value.\n+\t* graphite-optimize-isl.c: Move the defenition of the\n+\tscop_get_dependences to graphite-dependences.c.\n+\t* graphite-poly.h: Add declarations of scop_get_dependences\n+\tand carries_deps.\n+\n 2014-08-04  Rohit  <rohitarulraj@freescale.com>\n \n \tPR target/60102"}, {"sha": "a02bc23b6eea77b3c888971a8c3298cbd2e22df3", "filename": "gcc/graphite-dependences.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574921c272ca69e7a224d5e45f287d9c2fd49530/gcc%2Fgraphite-dependences.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574921c272ca69e7a224d5e45f287d9c2fd49530/gcc%2Fgraphite-dependences.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-dependences.c?ref=574921c272ca69e7a224d5e45f287d9c2fd49530", "patch": "@@ -53,6 +53,35 @@ along with GCC; see the file COPYING3.  If not see\n #include \"graphite-poly.h\"\n #include \"graphite-htab.h\"\n \n+isl_union_map *\n+scop_get_dependences (scop_p scop)\n+{\n+  isl_union_map *dependences;\n+\n+  if (!scop->must_raw)\n+    compute_deps (scop, SCOP_BBS (scop),\n+\t\t  &scop->must_raw, &scop->may_raw,\n+\t\t  &scop->must_raw_no_source, &scop->may_raw_no_source,\n+\t\t  &scop->must_war, &scop->may_war,\n+\t\t  &scop->must_war_no_source, &scop->may_war_no_source,\n+\t\t  &scop->must_waw, &scop->may_waw,\n+\t\t  &scop->must_waw_no_source, &scop->may_waw_no_source);\n+\n+  dependences = isl_union_map_copy (scop->must_raw);\n+  dependences = isl_union_map_union (dependences,\n+\t\t\t\t     isl_union_map_copy (scop->must_war));\n+  dependences = isl_union_map_union (dependences,\n+\t\t\t\t     isl_union_map_copy (scop->must_waw));\n+  dependences = isl_union_map_union (dependences,\n+\t\t\t\t     isl_union_map_copy (scop->may_raw));\n+  dependences = isl_union_map_union (dependences,\n+\t\t\t\t     isl_union_map_copy (scop->may_war));\n+  dependences = isl_union_map_union (dependences,\n+\t\t\t\t     isl_union_map_copy (scop->may_waw));\n+\n+  return dependences;\n+}\n+\n /* Add the constraints from the set S to the domain of MAP.  */\n \n static isl_map *\n@@ -263,6 +292,11 @@ apply_schedule_on_deps (__isl_keep isl_union_map *schedule,\n   ux = isl_union_map_copy (deps);\n   ux = isl_union_map_apply_domain (ux, isl_union_map_copy (trans));\n   ux = isl_union_map_apply_range (ux, trans);\n+  if (isl_union_map_is_empty (ux))\n+    {\n+      isl_union_map_free (ux);\n+      return NULL;\n+    }\n   x = isl_map_from_union_map (ux);\n \n   return x;\n@@ -300,7 +334,7 @@ no_violations (__isl_keep isl_union_map *schedule,\n    in which all the inputs before DEPTH occur at the same time as the\n    output, and the input at DEPTH occurs before output.  */\n \n-static bool\n+bool\n carries_deps (__isl_keep isl_union_map *schedule,\n \t      __isl_keep isl_union_map *deps,\n \t      int depth)\n@@ -315,6 +349,8 @@ carries_deps (__isl_keep isl_union_map *schedule,\n     return false;\n \n   x = apply_schedule_on_deps (schedule, deps);\n+  if (x == NULL)\n+    return false;\n   space = isl_map_get_space (x);\n   space = isl_space_range (space);\n   lex = isl_map_lex_le (space);"}, {"sha": "8af6c7f9fd0ff8ff1aef4ce9a937707d6a802306", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574921c272ca69e7a224d5e45f287d9c2fd49530/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574921c272ca69e7a224d5e45f287d9c2fd49530/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=574921c272ca69e7a224d5e45f287d9c2fd49530", "patch": "@@ -73,6 +73,14 @@ static int max_mode_int_precision =\n static int graphite_expression_type_precision = 128 <= max_mode_int_precision ?\n \t\t\t\t\t\t128 : max_mode_int_precision;\n \n+struct ast_build_info\n+{\n+  ast_build_info()\n+    : is_parallelizable(false)\n+  { };\n+  bool is_parallelizable;\n+};\n+\n /* Converts a GMP constant VAL to a tree and returns it.  */\n \n static tree\n@@ -435,7 +443,15 @@ translate_isl_ast_for_loop (loop_p context_loop,\n   redirect_edge_succ_nodup (next_e, after);\n   set_immediate_dominator (CDI_DOMINATORS, next_e->dest, next_e->src);\n \n-  /* TODO: Add checking for the loop parallelism.  */\n+  if (flag_loop_parallelize_all)\n+  {\n+    isl_id *id = isl_ast_node_get_annotation (node_for);\n+    gcc_assert (id);\n+    ast_build_info *for_info = (ast_build_info *) isl_id_get_user (id);\n+    loop->can_be_parallel = for_info->is_parallelizable;\n+    free (for_info);\n+    isl_id_free (id);\n+  }\n \n   return last_e;\n }\n@@ -834,6 +850,23 @@ generate_isl_schedule (scop_p scop)\n   return schedule_isl;\n }\n \n+/* This method is executed before the construction of a for node.  */\n+static __isl_give isl_id *\n+ast_build_before_for (__isl_keep isl_ast_build *build, void *user)\n+{\n+  isl_union_map *dependences = (isl_union_map *) user;\n+  ast_build_info *for_info = XNEW (struct ast_build_info);\n+  isl_union_map *schedule = isl_ast_build_get_schedule (build);\n+  isl_space *schedule_space = isl_ast_build_get_schedule_space (build);\n+  int dimension = isl_space_dim (schedule_space, isl_dim_out);\n+  for_info->is_parallelizable =\n+    !carries_deps (schedule, dependences, dimension);\n+  isl_union_map_free (schedule);\n+  isl_space_free (schedule_space);\n+  isl_id *id = isl_id_alloc (isl_ast_build_get_ctx (build), \"\", for_info);\n+  return id;\n+}\n+\n static __isl_give isl_ast_node *\n scop_to_isl_ast (scop_p scop, ivs_params &ip)\n {\n@@ -846,8 +879,18 @@ scop_to_isl_ast (scop_p scop, ivs_params &ip)\n   add_parameters_to_ivs_params (scop, ip);\n   isl_union_map *schedule_isl = generate_isl_schedule (scop);\n   isl_ast_build *context_isl = generate_isl_context (scop);\n+  isl_union_map *dependences = NULL;\n+  if (flag_loop_parallelize_all)\n+  {\n+    dependences = scop_get_dependences (scop);\n+    context_isl =\n+      isl_ast_build_set_before_each_for (context_isl, ast_build_before_for,\n+\t\t\t\t\t dependences);\n+  }\n   isl_ast_node *ast_isl = isl_ast_build_ast_from_schedule (context_isl,\n \t\t\t\t\t\t\t   schedule_isl);\n+  if(dependences)\n+    isl_union_map_free (dependences);\n   isl_ast_build_free (context_isl);\n   return ast_isl;\n }\n@@ -908,7 +951,20 @@ graphite_regenerate_ast_isl (scop_p scop)\n   ivs_params_clear (ip);\n   isl_ast_node_free (root_node);\n   timevar_pop (TV_GRAPHITE_CODE_GEN);\n-  /* TODO: Add dump  */\n+\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    {\n+      loop_p loop;\n+      int num_no_dependency = 0;\n+\n+      FOR_EACH_LOOP (loop, 0)\n+\tif (loop->can_be_parallel)\n+\t  num_no_dependency++;\n+\n+      fprintf (dump_file, \"\\n%d loops carried no dependency.\\n\",\n+\t       num_no_dependency);\n+    }\n+\n   return !graphite_regenerate_error;\n }\n #endif"}, {"sha": "7f61ff06ac8717cd6ccdd6e7de4ad6980d68b7f9", "filename": "gcc/graphite-optimize-isl.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574921c272ca69e7a224d5e45f287d9c2fd49530/gcc%2Fgraphite-optimize-isl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574921c272ca69e7a224d5e45f287d9c2fd49530/gcc%2Fgraphite-optimize-isl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-optimize-isl.c?ref=574921c272ca69e7a224d5e45f287d9c2fd49530", "patch": "@@ -65,35 +65,6 @@ scop_get_domains (scop_p scop ATTRIBUTE_UNUSED)\n   return res;\n }\n \n-static isl_union_map *\n-scop_get_dependences (scop_p scop)\n-{\n-  isl_union_map *dependences;\n-\n-  if (!scop->must_raw)\n-    compute_deps (scop, SCOP_BBS (scop),\n-\t\t  &scop->must_raw, &scop->may_raw,\n-\t\t  &scop->must_raw_no_source, &scop->may_raw_no_source,\n-\t\t  &scop->must_war, &scop->may_war,\n-\t\t  &scop->must_war_no_source, &scop->may_war_no_source,\n-\t\t  &scop->must_waw, &scop->may_waw,\n-\t\t  &scop->must_waw_no_source, &scop->may_waw_no_source);\n-\n-  dependences = isl_union_map_copy (scop->must_raw);\n-  dependences = isl_union_map_union (dependences,\n-\t\t\t\t     isl_union_map_copy (scop->must_war));\n-  dependences = isl_union_map_union (dependences,\n-\t\t\t\t     isl_union_map_copy (scop->must_waw));\n-  dependences = isl_union_map_union (dependences,\n-\t\t\t\t     isl_union_map_copy (scop->may_raw));\n-  dependences = isl_union_map_union (dependences,\n-\t\t\t\t     isl_union_map_copy (scop->may_war));\n-  dependences = isl_union_map_union (dependences,\n-\t\t\t\t     isl_union_map_copy (scop->may_waw));\n-\n-  return dependences;\n-}\n-\n /* getTileMap - Create a map that describes a n-dimensonal tiling.\n   \n    getTileMap creates a map from a n-dimensional scattering space into an"}, {"sha": "8381619fc94e433d76faf542bda80ead5a420f2e", "filename": "gcc/graphite-poly.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/574921c272ca69e7a224d5e45f287d9c2fd49530/gcc%2Fgraphite-poly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/574921c272ca69e7a224d5e45f287d9c2fd49530/gcc%2Fgraphite-poly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-poly.h?ref=574921c272ca69e7a224d5e45f287d9c2fd49530", "patch": "@@ -1551,4 +1551,12 @@ compute_deps (scop_p scop, vec<poly_bb_p> pbbs,\n \t      isl_union_map **must_waw_no_source,\n \t      isl_union_map **may_waw_no_source);\n \n+isl_union_map *\n+scop_get_dependences (scop_p scop);\n+\n+bool\n+carries_deps (__isl_keep isl_union_map *schedule,\n+\t      __isl_keep isl_union_map *deps,\n+\t      int depth);\n+\n #endif"}]}