{"sha": "886c07bcc7d1cd0d7159dcba88df6161b7f4b156", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg2YzA3YmNjN2QxY2QwZDcxNTlkY2JhODhkZjYxNjFiN2Y0YjE1Ng==", "commit": {"author": {"name": "Tim Josling", "email": "tej@melbpc.org.au", "date": "2003-05-09T21:43:54Z"}, "committer": {"name": "Tim Josling", "email": "timjosling@gcc.gnu.org", "date": "2003-05-09T21:43:54Z"}, "message": "Treelang fixes including built failures on PPC and others.\n\nFrom-SVN: r66647", "tree": {"sha": "8439fc0e799f5fba76ae0d889da6cc9b6918f57b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8439fc0e799f5fba76ae0d889da6cc9b6918f57b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/886c07bcc7d1cd0d7159dcba88df6161b7f4b156", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886c07bcc7d1cd0d7159dcba88df6161b7f4b156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/886c07bcc7d1cd0d7159dcba88df6161b7f4b156", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886c07bcc7d1cd0d7159dcba88df6161b7f4b156/comments", "author": null, "committer": null, "parents": [{"sha": "1476c9d9eeea8d3401ee864a3f3eeb2b1e6e0ccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1476c9d9eeea8d3401ee864a3f3eeb2b1e6e0ccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1476c9d9eeea8d3401ee864a3f3eeb2b1e6e0ccb"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "2e3d1d7e8c06b544832574059f98a41caae428d3", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886c07bcc7d1cd0d7159dcba88df6161b7f4b156/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886c07bcc7d1cd0d7159dcba88df6161b7f4b156/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=886c07bcc7d1cd0d7159dcba88df6161b7f4b156", "patch": "@@ -1,3 +1,18 @@\n+2003-05-09  Tim Josling  <tej@melbpc.org.au>\n+\n+\t* Make-lang.in (TREE_BE_LIBS): Add C_TARGET_OBJS to object files\n+\tto link (needed by some front ends such as PPC).\n+\n+\t* treetree.c (tree_code_create_function_initial): Fix long line.\n+\tInitialize tree_code_int_size and tree_code_char_size to\n+\tmeaningful values.\n+\t(tree_code_get_numeric_type): Add check that size1 parameter is\n+\tvalid.\n+\n+\t* parse.y: Fix extra long lines in prototypes.\n+\n+\t* treelang.h: Fix extra long lines in macro definitions.\n+\n 2003-05-07  Zack Weinberg  <zack@codesourcery.com>\n \n \t* Make-lang.in: Set -Wno-error for treelang/lex.o."}, {"sha": "0027eab7fbf5f3e709d2ccb99cde15264c935f69", "filename": "gcc/treelang/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886c07bcc7d1cd0d7159dcba88df6161b7f4b156/gcc%2Ftreelang%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886c07bcc7d1cd0d7159dcba88df6161b7f4b156/gcc%2Ftreelang%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FMake-lang.in?ref=886c07bcc7d1cd0d7159dcba88df6161b7f4b156", "patch": "@@ -47,7 +47,7 @@ TREELANGSED = sed\n TREELANGSEDFLAGS = -n\n \n # back end compiler libraries etc\n-TREE_BE_LIBS = $(BACKEND) $(LIBIBERTY) $(INTLLIBS) $(LIBS) $(LIBDEPS)\n+TREE_BE_LIBS = $(C_TARGET_OBJS) $(BACKEND) $(LIBIBERTY) $(INTLLIBS) $(LIBS) $(LIBDEPS)\n GCC_EXTRAS = -B./ -B$(build_tooldir)/bin/ -isystem $(build_tooldir)/include\n \n # ./xgcc is the just built compiler. See GCC_FOR_TARGET in the GCC Makefile.in."}, {"sha": "5222a885dcfa585541c58518fcd65cdfb3e7f891", "filename": "gcc/treelang/parse.y", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886c07bcc7d1cd0d7159dcba88df6161b7f4b156/gcc%2Ftreelang%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886c07bcc7d1cd0d7159dcba88df6161b7f4b156/gcc%2Ftreelang%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Fparse.y?ref=886c07bcc7d1cd0d7159dcba88df6161b7f4b156", "patch": "@@ -81,7 +81,8 @@ void print_token (FILE * file, unsigned int type ATTRIBUTE_UNUSED, YYSTYPE value\n static struct prod_token_parm_item *reverse_prod_list (struct prod_token_parm_item *old_first);\n static void ensure_not_void (unsigned int type, struct prod_token_parm_item* name);\n static int check_type_match (int type_num, struct prod_token_parm_item *exp);\n-static int get_common_type (struct prod_token_parm_item *type1, struct prod_token_parm_item *type2);\n+static int get_common_type (struct prod_token_parm_item *type1,\n+                            struct prod_token_parm_item *type2);\n static struct prod_token_parm_item *make_integer_constant (struct prod_token_parm_item* value);\n static struct prod_token_parm_item *make_plus_expression\n   (struct prod_token_parm_item* tok, struct prod_token_parm_item* op1,\n@@ -306,7 +307,8 @@ storage typename NAME LEFT_PARENTHESIS parameters RIGHT_PARENTHESIS SEMICOLON {\n         abort ();\n       this_parms->tp.par.variable_name = this_parm_var->tp.pro.main_token->tp.tok.chars;\n       this_parms->category = parameter_category;\n-      this_parms->type = NUMERIC_TYPE (( (struct prod_token_parm_item*)EXPRESSION_TYPE (this_parm_var)));\n+      this_parms->type = NUMERIC_TYPE \n+        (( (struct prod_token_parm_item*)EXPRESSION_TYPE (this_parm_var)));\n       if (last_parms)\n         {\n           last_parms->tp.par.next = this_parms;"}, {"sha": "656f41826d4479b33eeb1a6c52fef1783f53941a", "filename": "gcc/treelang/treelang.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886c07bcc7d1cd0d7159dcba88df6161b7f4b156/gcc%2Ftreelang%2Ftreelang.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886c07bcc7d1cd0d7159dcba88df6161b7f4b156/gcc%2Ftreelang%2Ftreelang.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreelang.h?ref=886c07bcc7d1cd0d7159dcba88df6161b7f4b156", "patch": "@@ -62,7 +62,8 @@ struct token_part GTY(())\n \n /* Definitions for fields in production.  */\n #define NESTING_LEVEL(a) a->tp.pro.info[0]  /* Level used for variable definitions.  */\n-#define NUMERIC_TYPE(a)  a->tp.pro.info[1]  /* Numeric type used in type definitions and expressions.  */\n+/* Numeric type used in type definitions and expressions.  */\n+#define NUMERIC_TYPE(a)  a->tp.pro.info[1]  \n #define SUB_COUNT 5\n #define SYMBOL_TABLE_NAME(a) (a->tp.pro.sub[0]) /* Name token.  */\n #define EXPRESSION_TYPE(a) (a->tp.pro.sub[1]) /* Type identifier.  */\n@@ -71,7 +72,8 @@ struct token_part GTY(())\n #define VARIABLE(a) (a->tp.pro.sub[2]) /* Parameter variable ptr.  */\n #define VAR_INIT(a) (a->tp.pro.sub[2]) /* Variable init.  */\n #define OP2(a) (a->tp.pro.sub[3]) /* Exp operand2.  */\n-#define FIRST_PARMS(a) (a->tp.pro.sub[3]) /* Function parameters linked via struct tree_parameter_list.  */\n+/* Function parameters linked via struct tree_parameter_list.  */\n+#define FIRST_PARMS(a) (a->tp.pro.sub[3])\n #define OP3(a) (a->tp.pro.sub[4]) /* Exp operand3.  */\n #define STORAGE_CLASS_TOKEN(a) (a->tp.pro.sub[4]) /* Storage class token.  */\n #define STORAGE_CLASS(a) a->tp.pro.flag1 /* Values in treetree.h.  */"}, {"sha": "397f436e18a156b9cb363aae6e8acae7f2c44f25", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886c07bcc7d1cd0d7159dcba88df6161b7f4b156/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886c07bcc7d1cd0d7159dcba88df6161b7f4b156/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=886c07bcc7d1cd0d7159dcba88df6161b7f4b156", "patch": "@@ -143,8 +143,9 @@ const char *const tree_code_name[] = {\n \n /* Number of bits in int and char - accessed by front end.  */\n \n-unsigned int tree_code_int_size = 0;\n-unsigned int tree_code_char_size = 0;\n+unsigned int tree_code_int_size = SIZEOF_INT * HOST_BITS_PER_CHAR;\n+\n+unsigned int tree_code_char_size = HOST_BITS_PER_CHAR;\n \n /* Return the tree stuff for this type TYPE_NUM.  */\n \n@@ -327,7 +328,8 @@ tree_code_create_function_initial (tree prev_saved,\n \n   /* Prepare creation of rtl for a new function.  */\n \n-  resultdecl = DECL_RESULT (fn_decl) = build_decl (RESULT_DECL, NULL_TREE, TREE_TYPE (TREE_TYPE (fn_decl)));\n+  resultdecl = DECL_RESULT (fn_decl) \n+    = build_decl (RESULT_DECL, NULL_TREE, TREE_TYPE (TREE_TYPE (fn_decl)));\n   DECL_CONTEXT (DECL_RESULT (fn_decl)) = fn_decl;\n   DECL_SOURCE_LOCATION (resultdecl) = loc;\n \n@@ -779,6 +781,8 @@ tree\n tree_code_get_numeric_type (unsigned int size1, unsigned int sign1)\n {\n   tree ret1;\n+  if (!size1)\n+    abort ();\n   if (size1 == tree_code_int_size)\n     {\n       if (sign1)"}]}