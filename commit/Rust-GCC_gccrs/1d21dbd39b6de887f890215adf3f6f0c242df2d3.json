{"sha": "1d21dbd39b6de887f890215adf3f6f0c242df2d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQyMWRiZDM5YjZkZTg4N2Y4OTAyMTVhZGYzZjZmMGMyNDJkZjJkMw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1991-12-23T16:38:26Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1991-12-23T16:38:26Z"}, "message": "Initial revision\n\nFrom-SVN: r128", "tree": {"sha": "af9441188c64ad05cb8ad4fdf6db208976e6090e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af9441188c64ad05cb8ad4fdf6db208976e6090e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d21dbd39b6de887f890215adf3f6f0c242df2d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d21dbd39b6de887f890215adf3f6f0c242df2d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d21dbd39b6de887f890215adf3f6f0c242df2d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d21dbd39b6de887f890215adf3f6f0c242df2d3/comments", "author": null, "committer": null, "parents": [{"sha": "2817655c4a1a4e003ccf7bf8a43efd5d2bc6a973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2817655c4a1a4e003ccf7bf8a43efd5d2bc6a973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2817655c4a1a4e003ccf7bf8a43efd5d2bc6a973"}], "stats": {"total": 186, "additions": 186, "deletions": 0}, "files": [{"sha": "160e5abb54326870c0773b5958d3404cef1cfb3b", "filename": "gcc/config/i386/osfrose.h", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d21dbd39b6de887f890215adf3f6f0c242df2d3/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d21dbd39b6de887f890215adf3f6f0c242df2d3/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=1d21dbd39b6de887f890215adf3f6f0c242df2d3", "patch": "@@ -0,0 +1,186 @@\n+/* Definitions of target machine for GNU compiler.  \n+   Encore Multimax (OSF/1 with OSF/rose) version.\n+   Copyright (C) 1991 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"i386gas.h\"\n+\n+#define OSF_OS\n+\n+/* Use a more friendly abort which prints internal compiler error,\n+   rather than just dumping core.  */\n+\n+#ifndef abort\n+#define abort fancy_abort\n+#endif\n+\n+/* Prefix that appears before all global/static identifiers, except for\n+   temporary labels.  */\n+\n+#define IDENTIFIER_PREFIX \"_\"\n+\n+/* Suffix that appears after all global/static identifiers, except for\n+   temporary labels.  */\n+\n+#define IDENTIFIER_SUFFIX \"\"\n+\n+/* Change default predefines.  */\n+#ifdef CPP_PREDEFINES\n+#undef CPP_PREDEFINES\n+#endif\n+#define CPP_PREDEFINES \"-DOSF -DOSF1 -Dunix -Di386\"\n+\n+#ifdef  CPP_SPEC  \n+#undef  CPP_SPEC\n+#endif\n+#define CPP_SPEC       \"%{.S:\t-D__LANGUAGE_ASSEMBLY__\t\t\t\\\n+\t\t\t\t-D_LANGUAGE_ASSEMBLY\t\t\t\\\n+\t\t\t\t%{!ansi:-DLANGUAGE_ASSEMBLY}}\t\t\\\n+\t\t\t %{!.S:\t-D__LANGUAGE_C__\t\t\t\\\n+\t\t\t\t-D_LANGUAGE_C\t\t\t\t\\\n+\t\t\t\t%{!ansi:-DLANGUAGE_C}}\"\n+\n+#ifdef  CC1_SPEC\n+#undef  CC1_SPEC\n+#endif\n+#define CC1_SPEC       \"\"\n+\n+#ifdef ASM_SPEC\n+#undef ASM_SPEC\n+#endif\n+#define ASM_SPEC       \"\"\n+\n+#ifdef  LINK_SPEC\n+#undef  LINK_SPEC\n+#endif\n+#define LINK_SPEC      \"%{v*: -v}                           \\\n+                        %{pic-none: -noshrlib} %{noshrlib}  \\\n+\t\t\t%{!pic-none: -warn_nopic}           \\\n+                        %{nostdlib} %{glue}\"\n+\n+#ifdef  LIB_SPEC\n+#undef  LIB_SPEC\n+#endif\n+\n+/* For now, force static libraries instead of shared, but do so that\n+   does not use -noshrlib, since the old linker does not provide it.  */\n+\n+#define LIB_SPEC \"%{!pic-none: %{!pic-lib: -L/usr/ccs/lib }} -lc\"\n+\n+#ifdef  LIBG_SPEC\n+#undef  LIBG_SPEC\n+#endif\n+#define LIBG_SPEC      \"\"\n+\n+#ifdef  STARTFILE_SPEC  \n+#undef  STARTFILE_SPEC\n+#endif\n+#define STARTFILE_SPEC \"%{pg:gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}\"\n+\n+#ifdef  MACHINE_TYPE\n+#undef  MACHINE_TYPE\n+#endif\n+\n+#define MACHINE_TYPE   ((!TARGET_486) ? \"80386 running OSF/1 with OSF/rose objects\" :  \\\n+                                        \"80486 running OSF/1 with OSF/rose objects\")\n+\n+#if 0\n+#ifdef  MD_EXEC_PREFIX  \n+#undef  MD_EXEC_PREFIX\n+#endif\n+#define MD_EXEC_PREFIX\t\t\"/usr/ccs/gcc/\"\n+\n+#ifdef  MD_STARTFILE_PREFIX  \n+#undef  MD_STARTFILE_PREFIX\n+#endif\n+#define MD_STARTFILE_PREFIX\t\"/usr/ccs/lib/\"\n+#endif\n+\n+/* Tell final.c we don't need a label passed to mcount.  */\n+#define NO_PROFILE_DATA\n+\n+#undef  FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO) fprintf (FILE, \"\\tcall _mcount\\n\")\n+\n+/* Tell collect that the object format is OSF/rose.  */\n+#define OBJECT_FORMAT_ROSE\n+\f\n+\n+/* Defines to be able to build gnulib with GCC.  */\n+\n+#define perform_udivsi3(a,b)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n+  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  dx = 0;\t\t\t\t\t\t\t\t\\\n+  ax = a;\t\t\t\t\t\t\t\t\\\n+  asm (\"divl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b), \"d\" (dx));\t\\\n+  return ax;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define perform_divsi3(a,b)\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n+  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  ax = a;\t\t\t\t\t\t\t\t\\\n+  asm (\"cltd\\n\\tidivl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b));\t\\\n+  return ax;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define perform_umodsi3(a,b)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n+  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  dx = 0;\t\t\t\t\t\t\t\t\\\n+  ax = a;\t\t\t\t\t\t\t\t\\\n+  asm (\"divl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b), \"d\" (dx));\t\\\n+  return dx;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define perform_modsi3(a,b)\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n+  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  ax = a;\t\t\t\t\t\t\t\t\\\n+  asm (\"cltd\\n\\tidivl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b));\t\\\n+  return dx;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define perform_fix_truncdfsi2(a)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  auto unsigned short ostatus;\t\t\t\t\t\t\\\n+  auto unsigned short nstatus;\t\t\t\t\t\t\\\n+  auto int ret;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  &ostatus;\t\t\t/* guarantee these land in memory */\t\\\n+  &nstatus;\t\t\t\t\t\t\t\t\\\n+  &ret;\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  asm volatile (\"fnstcw %0\" : \"=m\" (ostatus));\t\t\t\t\\\n+  nstatus = ostatus | 0x0c00;\t\t\t\t\t\t\\\n+  asm volatile (\"fldcw %0\" : /* no outputs */ : \"m\" (nstatus));\t\t\\\n+  asm volatile (\"fldl %0\" : /* no outputs */ : \"m\" (a));\t\t\\\n+  asm volatile (\"fistpl %0\" : \"=m\" (ret));\t\t\t\t\\\n+  asm volatile (\"fldcw %0\" : /* no outputs */ : \"m\" (nstatus));\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  return ret;\t\t\t\t\t\t\t\t\\\n+}"}]}