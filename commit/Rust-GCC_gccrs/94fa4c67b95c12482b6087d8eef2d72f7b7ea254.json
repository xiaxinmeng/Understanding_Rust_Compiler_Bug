{"sha": "94fa4c67b95c12482b6087d8eef2d72f7b7ea254", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRmYTRjNjdiOTVjMTI0ODJiNjA4N2Q4ZWVmMmQ3MmY3YjdlYTI1NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-20T07:17:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-20T07:17:40Z"}, "message": "openmp: Handle explicit linear clause properly in combined constructs with target [PR99928]\n\nlinear clause should have the effect of firstprivate+lastprivate (or for IVs\nnot declared in the construct lastprivate) on outer constructs and eventually\nmap(tofrom:) on target when combined with it.\n\n2021-05-20  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/99928\n\t* gimplify.c (gimplify_scan_omp_clauses) <case OMP_CLAUSE_LINEAR>: For\n\texplicit linear clause when combined with target, make it map(tofrom:)\n\tinstead of no clause or firstprivate.\n\n\t* c-c++-common/gomp/pr99928-4.c: Remove all xfails.\n\t* c-c++-common/gomp/pr99928-5.c: Likewise.", "tree": {"sha": "9ff38f86b4b294f4de1f3d6e7ab9deedee21182f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ff38f86b4b294f4de1f3d6e7ab9deedee21182f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94fa4c67b95c12482b6087d8eef2d72f7b7ea254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94fa4c67b95c12482b6087d8eef2d72f7b7ea254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94fa4c67b95c12482b6087d8eef2d72f7b7ea254", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94fa4c67b95c12482b6087d8eef2d72f7b7ea254/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b536797f7e43c55072a3215735f5833f1d6d218", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b536797f7e43c55072a3215735f5833f1d6d218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b536797f7e43c55072a3215735f5833f1d6d218"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "719a4e16391622c76e91658db450e6165b7b912f", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94fa4c67b95c12482b6087d8eef2d72f7b7ea254/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94fa4c67b95c12482b6087d8eef2d72f7b7ea254/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=94fa4c67b95c12482b6087d8eef2d72f7b7ea254", "patch": "@@ -8884,9 +8884,8 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t  else if (octx\n \t\t\t   && octx->region_type == ORT_COMBINED_TARGET)\n \t\t    {\n-\t\t      flags &= ~GOVD_LASTPRIVATE;\n-\t\t      if (flags == GOVD_SEEN)\n-\t\t\tbreak;\n+\t\t      if (flags & GOVD_LASTPRIVATE)\n+\t\t\tflags = GOVD_SEEN | GOVD_MAP;\n \t\t    }\n \t\t  else\n \t\t    break;"}, {"sha": "f35e7343db49da060c8e1d29b5deb574c9990765", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-4.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94fa4c67b95c12482b6087d8eef2d72f7b7ea254/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94fa4c67b95c12482b6087d8eef2d72f7b7ea254/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-4.c?ref=94fa4c67b95c12482b6087d8eef2d72f7b7ea254", "patch": "@@ -44,15 +44,15 @@ bar (void)\n   #pragma omp parallel master taskloop simd linear (l04)\n   for (int i = 0; i < 64; i++)\n     l04++;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l05\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l05\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l05\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*shared\\\\(l05\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp for\\[^\\n\\r]*linear\\\\(l05:1\\\\)\" \"gimple\" } } */\n   #pragma omp target parallel for linear (l05)\n   for (int i = 0; i < 64; i++)\n     l05++;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l06\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l06\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(l06\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*firstprivate\\\\(l06\\\\)\" \"gimple\" } } *//* FIXME.  */\n@@ -61,8 +61,8 @@ bar (void)\n   #pragma omp target parallel for simd linear (l06)\n   for (int i = 0; i < 64; i++)\n     l06++;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l07\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l07\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:l07\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(l07\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(l07:1\\\\)\" \"gimple\" } } */\n   #pragma omp target simd linear (l07)\n   for (int i = 0; i < 64; i++)"}, {"sha": "7405188556ee59e5a21bf763619c94ad7ba598a6", "filename": "gcc/testsuite/c-c++-common/gomp/pr99928-5.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94fa4c67b95c12482b6087d8eef2d72f7b7ea254/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94fa4c67b95c12482b6087d8eef2d72f7b7ea254/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr99928-5.c?ref=94fa4c67b95c12482b6087d8eef2d72f7b7ea254", "patch": "@@ -52,22 +52,22 @@ bar (void)\n   #pragma omp parallel master taskloop simd linear (j05)\n   for (j05 = 0; j05 < 64; j05++)\n     ;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j06\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j06\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j06\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j06\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j06\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n   /* { dg-final { scan-tree-dump-not \"omp for\\[^\\n\\r]*lastprivate\\\\(j06\\\\)\" \"gimple\" } } *//* FIXME.  */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j06:1\\\\)\" \"gimple\" } } */\n   #pragma omp target parallel for simd linear (j06)\n   for (j06 = 0; j06 < 64; j06++)\n     ;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j07\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j07\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j07\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j07\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j07:1\\\\)\" \"gimple\" } } */\n   #pragma omp target simd linear (j07)\n   for (j07 = 0; j07 < 64; j07++)\n     ;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j08\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j08\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j08\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp parallel\\[^\\n\\r]*lastprivate\\\\(j08\\\\)\" \"gimple\" } } *//* FIXME: This should be on for instead.  */\n@@ -76,8 +76,8 @@ bar (void)\n   #pragma omp target teams distribute parallel for simd linear (j08)\n   for (j08 = 0; j08 < 64; j08++)\n     ;\n-  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j09\" \"gimple\" { xfail *-*-* } } } */\n-  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j09\\\\)\" \"gimple\" { xfail *-*-* } } } */\n+  /* { dg-final { scan-tree-dump \"omp target\\[^\\n\\r]*map\\\\(tofrom:j09\" \"gimple\" } } */\n+  /* { dg-final { scan-tree-dump-not \"omp target\\[^\\n\\r]*firstprivate\\\\(j09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp teams\\[^\\n\\r]*shared\\\\(j09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp distribute\\[^\\n\\r]*lastprivate\\\\(j09\\\\)\" \"gimple\" } } */\n   /* { dg-final { scan-tree-dump \"omp simd\\[^\\n\\r]*linear\\\\(j09:1\\\\)\" \"gimple\" } } */"}]}