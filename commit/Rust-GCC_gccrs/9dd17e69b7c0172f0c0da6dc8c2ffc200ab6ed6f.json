{"sha": "9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRkMTdlNjliN2MwMTcyZjBjMGRhNmRjOGMyZmZjMjAwYWI2ZWQ2Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-02-22T22:54:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-02-22T22:54:49Z"}, "message": "hash-aux.cc: Rename to...\n\n2010-02-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* src/hash-aux.cc: Rename to...\n\t* src/hash-string-aux.cc: ... this.\n\t* src/hash-long-double-aux.cc: New.\n\t* src/hash_c++0x.cc: Adjust.\n\t* src/hash_tr1.cc: Likewise.\n\t* src/compatibility-c++0x.cc: Likewise.\n\nFrom-SVN: r156981", "tree": {"sha": "202225fd61afbf03bfc857ac7b7be1ca34214e35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/202225fd61afbf03bfc857ac7b7be1ca34214e35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f/comments", "author": null, "committer": null, "parents": [{"sha": "09d6794b5ec620f508dec3b0a55ecf5b21e93d91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09d6794b5ec620f508dec3b0a55ecf5b21e93d91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09d6794b5ec620f508dec3b0a55ecf5b21e93d91"}], "stats": {"total": 119, "additions": 64, "deletions": 55}, "files": [{"sha": "c32971f1ff47419f05e434e30eaaadee9c8bb11a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f", "patch": "@@ -1,3 +1,12 @@\n+2010-02-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* src/hash-aux.cc: Rename to...\n+\t* src/hash-string-aux.cc: ... this.\n+\t* src/hash-long-double-aux.cc: New.\n+\t* src/hash_c++0x.cc: Adjust.\n+\t* src/hash_tr1.cc: Likewise.\n+\t* src/compatibility-c++0x.cc: Likewise.\n+\n 2010-02-22  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/xml/class.txml: Adjust biblio markup."}, {"sha": "abdc72c0832a86c7cb4dc08aa7d757820c7068b3", "filename": "libstdc++-v3/src/compatibility-c++0x.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc?ref=9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f", "patch": "@@ -50,7 +50,7 @@ namespace std\n   // We need these due to the symbols exported since GLIBCXX_3.4.10.\n   // See libstdc++/41662 for details.\n \n-#include \"hash-aux.cc\"\n+#include \"hash-string-aux.cc\"\n \n   template<>\n     size_t"}, {"sha": "5b8bbfdd49decb81b25397299891ca4c59b99840", "filename": "libstdc++-v3/src/hash-long-double-aux.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f/libstdc%2B%2B-v3%2Fsrc%2Fhash-long-double-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f/libstdc%2B%2B-v3%2Fsrc%2Fhash-long-double-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash-long-double-aux.cc?ref=9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f", "patch": "@@ -0,0 +1,50 @@\n+//  std::hash and std::tr1::hash definitions, long double bits -*- C++ -*-\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+  // For long double, careful with random padding bits (e.g., on x86,\n+  // 10 bytes -> 12 bytes) and resort to frexp.\n+  template<>\n+    size_t\n+    hash<long double>::operator()(long double __val) const\n+    {\n+      size_t __result = 0;\n+\n+      int __exponent;\n+      __val = __builtin_frexpl(__val, &__exponent);\n+      __val = __val < 0.0l ? -(__val + 0.5l) : __val;\n+\n+      const long double __mult = __SIZE_MAX__ + 1.0l;\n+      __val *= __mult;\n+\n+      // Try to use all the bits of the mantissa (really necessary only\n+      // on 32-bit targets, at least for 80-bit floating point formats).\n+      const size_t __hibits = (size_t)__val;\n+      __val = (__val - (long double)__hibits) * __mult;\n+\n+      const size_t __coeff = __SIZE_MAX__ / __LDBL_MAX_EXP__;\n+\n+      __result = __hibits + (size_t)__val + __coeff * __exponent;\n+\n+      return __result;\n+    }"}, {"sha": "1da015c1fd5b0edde5f0c85da03427dad2c2c40c", "filename": "libstdc++-v3/src/hash-string-aux.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f/libstdc%2B%2B-v3%2Fsrc%2Fhash-string-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f/libstdc%2B%2B-v3%2Fsrc%2Fhash-string-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash-string-aux.cc?ref=9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f", "patch": "@@ -1,4 +1,4 @@\n-//  std::hash and std::tr1::hash definitions -*- C++ -*-\n+//  std::hash and std::tr1::hash definitions, string bits -*- C++ -*-\n \n // Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n //", "previous_filename": "libstdc++-v3/src/hash-aux.cc"}, {"sha": "ba007f84b54bdae403ee4ca756ae60cc257d0826", "filename": "libstdc++-v3/src/hash_c++0x.cc", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f/libstdc%2B%2B-v3%2Fsrc%2Fhash_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f/libstdc%2B%2B-v3%2Fsrc%2Fhash_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash_c%2B%2B0x.cc?ref=9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f", "patch": "@@ -30,29 +30,5 @@\n \n namespace std\n {\n-  /// std::hash specialization for long double.\n-  template<>\n-    size_t\n-    hash<long double>::operator()(long double __val) const\n-    {\n-      size_t __result = 0;\n-\n-      int __exponent;\n-      __val = __builtin_frexpl(__val, &__exponent);\n-      __val = __val < 0.0l ? -(__val + 0.5l) : __val;\n-\n-      const long double __mult = __SIZE_MAX__ + 1.0l;\n-      __val *= __mult;\n-\n-      // Try to use all the bits of the mantissa (really necessary only\n-      // on 32-bit targets, at least for 80-bit floating point formats).\n-      const size_t __hibits = (size_t)__val;\n-      __val = (__val - (long double)__hibits) * __mult;\n-\n-      const size_t __coeff = __SIZE_MAX__ / __LDBL_MAX_EXP__;\n-\n-      __result = __hibits + (size_t)__val + __coeff * __exponent;\n-\t\n-      return __result;\n-    }  \n+#include \"hash-long-double-aux.cc\"\n }"}, {"sha": "0dca086b95c972a65017a7e4c740f5b2f5d57916", "filename": "libstdc++-v3/src/hash_tr1.cc", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f/libstdc%2B%2B-v3%2Fsrc%2Fhash_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f/libstdc%2B%2B-v3%2Fsrc%2Fhash_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fhash_tr1.cc?ref=9dd17e69b7c0172f0c0da6dc8c2ffc200ab6ed6f", "patch": "@@ -29,33 +29,7 @@ namespace std\n {\n   namespace tr1 \n   {\n-#include \"hash-aux.cc\"\n-\n-    // For long double, careful with random padding bits (e.g., on x86,\n-    // 10 bytes -> 12 bytes) and resort to frexp.\n-    template<>\n-      size_t\n-      hash<long double>::operator()(long double __val) const\n-      {\n-\tsize_t __result = 0;\n-\n-\tint __exponent;\n-\t__val = __builtin_frexpl(__val, &__exponent);\n-\t__val = __val < 0.0l ? -(__val + 0.5l) : __val;\n-\n-\tconst long double __mult = __SIZE_MAX__ + 1.0l;\n-\t__val *= __mult;\n-\n-\t// Try to use all the bits of the mantissa (really necessary only\n-\t// on 32-bit targets, at least for 80-bit floating point formats).\n-\tconst size_t __hibits = (size_t)__val;\n-\t__val = (__val - (long double)__hibits) * __mult;\n-\n-\tconst size_t __coeff = __SIZE_MAX__ / __LDBL_MAX_EXP__;\n-\n-\t__result = __hibits + (size_t)__val + __coeff * __exponent;\n-\n-\treturn __result;\n-      }\n+#include \"hash-long-double-aux.cc\"\n+#include \"hash-string-aux.cc\"\n   }\n }"}]}