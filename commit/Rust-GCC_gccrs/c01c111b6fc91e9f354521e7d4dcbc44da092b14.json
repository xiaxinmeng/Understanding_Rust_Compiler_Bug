{"sha": "c01c111b6fc91e9f354521e7d4dcbc44da092b14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAxYzExMWI2ZmM5MWU5ZjM1NDUyMWU3ZDRkY2JjNDRkYTA5MmIxNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-08-28T15:03:43Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-08-28T15:03:43Z"}, "message": "lto.c (compare_tree_sccs_1): Drop DECL_ERROR_ISSUED, DECL_DEFER_OUTPUT and DECL_IN_TEXT_SECTION.\n\n\n\n\t* lto.c (compare_tree_sccs_1): Drop DECL_ERROR_ISSUED,\n\tDECL_DEFER_OUTPUT and DECL_IN_TEXT_SECTION.\n\t(unify_scc): Do checking assert.\n\n\t* lto-streamer-out.c (DFS_write_tree_body): Drop\n\tBINFO_INHERITANCE_CHAIN, BINFO_SUBVTT_INDEX and BINFO_VPTR_INDEX.\n\t(hash_tree): Do not hash DECL_DEFER_OUTPUT, BINFO_INHERITANCE_CHAIN,\n\tBINFO_SUBVTT_INDEX, BINFO_VPTR_INDEX, DECL_IN_TEXT_SECTION.\n\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields):\n\tDo not read DECL_ERROR_ISSUED.\n\t(unpack_ts_decl_with_vis_value_fields): Do not read\n\tDECL_DEFER_OUTPUT.\n\t(lto_input_ts_binfo_tree_pointers): Do not read BINFO_INHERITANCE_CHAIN,\n        BINFO_SUBVTT_INDEX, BINFO_VPTR_INDEX\n\t* tree-streamer-out.c (pack_ts_decl_common_value_fields): Do not\n\twrite DECL_ERROR_ISSUED..\n\t(pack_ts_decl_with_vis_value_fields): Do not write\n\tDECL_DEFER_OUTPUT.\n\t(write_ts_binfo_tree_pointers): Do not read BINFO_INHERITANCE_CHAIN,\n        BINFO_SUBVTT_INDEX, BINFO_VPTR_INDEX\n\t* print-tree.c (print_node): Do not print DECL_ERROR_ISSUED.\n\t* tree.h (tree_decl_common): Update comment.\n\t(DECL_ERROR_ISSUED): Remove.\n\nFrom-SVN: r202052", "tree": {"sha": "a404cd6df99bc5486816e875d5a53aead207efd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a404cd6df99bc5486816e875d5a53aead207efd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c01c111b6fc91e9f354521e7d4dcbc44da092b14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01c111b6fc91e9f354521e7d4dcbc44da092b14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c01c111b6fc91e9f354521e7d4dcbc44da092b14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c01c111b6fc91e9f354521e7d4dcbc44da092b14/comments", "author": null, "committer": null, "parents": [{"sha": "9bb6628ec5e2e4510dc3a4b44145e2c2184dd3c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb6628ec5e2e4510dc3a4b44145e2c2184dd3c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bb6628ec5e2e4510dc3a4b44145e2c2184dd3c6"}], "stats": {"total": 92, "additions": 49, "deletions": 43}, "files": [{"sha": "a19826b3e68677d0eade8f3f91591bacc5b7c81a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01c111b6fc91e9f354521e7d4dcbc44da092b14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01c111b6fc91e9f354521e7d4dcbc44da092b14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c01c111b6fc91e9f354521e7d4dcbc44da092b14", "patch": "@@ -1,3 +1,25 @@\n+2013-08-28  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-streamer-out.c (DFS_write_tree_body): Drop\n+\tBINFO_INHERITANCE_CHAIN, BINFO_SUBVTT_INDEX and BINFO_VPTR_INDEX.\n+\t(hash_tree): Do not hash DECL_DEFER_OUTPUT, BINFO_INHERITANCE_CHAIN,\n+\tBINFO_SUBVTT_INDEX, BINFO_VPTR_INDEX, DECL_IN_TEXT_SECTION.\n+\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields):\n+\tDo not read DECL_ERROR_ISSUED.\n+\t(unpack_ts_decl_with_vis_value_fields): Do not read\n+\tDECL_DEFER_OUTPUT.\n+\t(lto_input_ts_binfo_tree_pointers): Do not read BINFO_INHERITANCE_CHAIN,\n+        BINFO_SUBVTT_INDEX, BINFO_VPTR_INDEX\n+\t* tree-streamer-out.c (pack_ts_decl_common_value_fields): Do not\n+\twrite DECL_ERROR_ISSUED..\n+\t(pack_ts_decl_with_vis_value_fields): Do not write\n+\tDECL_DEFER_OUTPUT.\n+\t(write_ts_binfo_tree_pointers): Do not read BINFO_INHERITANCE_CHAIN,\n+        BINFO_SUBVTT_INDEX, BINFO_VPTR_INDEX\n+\t* print-tree.c (print_node): Do not print DECL_ERROR_ISSUED.\n+\t* tree.h (tree_decl_common): Update comment.\n+\t(DECL_ERROR_ISSUED): Remove.\n+\n 2013-08-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/58257"}, {"sha": "d11756842d36f1d9838a5e96c8fa7958379aad35", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01c111b6fc91e9f354521e7d4dcbc44da092b14/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01c111b6fc91e9f354521e7d4dcbc44da092b14/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=c01c111b6fc91e9f354521e7d4dcbc44da092b14", "patch": "@@ -642,9 +642,8 @@ DFS_write_tree_body (struct output_block *ob,\n       FOR_EACH_VEC_SAFE_ELT (BINFO_BASE_ACCESSES (expr), i, t)\n \tDFS_follow_tree_edge (t);\n \n-      DFS_follow_tree_edge (BINFO_INHERITANCE_CHAIN (expr));\n-      DFS_follow_tree_edge (BINFO_SUBVTT_INDEX (expr));\n-      DFS_follow_tree_edge (BINFO_VPTR_INDEX (expr));\n+      /* Do not walk BINFO_INHERITANCE_CHAIN, BINFO_SUBVTT_INDEX\n+\t and BINFO_VPTR_INDEX; these are used by C++ FE only.  */\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n@@ -748,7 +747,6 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n       v = iterative_hash_host_wide_int (DECL_ALIGN (t), v);\n       if (code == LABEL_DECL)\n \t{\n-\t  v = iterative_hash_host_wide_int (DECL_ERROR_ISSUED (t), v);\n \t  v = iterative_hash_host_wide_int (EH_LANDING_PAD_NR (t), v);\n \t  v = iterative_hash_host_wide_int (LABEL_DECL_UID (t), v);\n \t}\n@@ -781,20 +779,19 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_WITH_VIS))\n     {\n-      v = iterative_hash_host_wide_int (DECL_DEFER_OUTPUT (t)\n-\t\t\t\t\t| (DECL_COMMON (t) << 1)\n-\t\t\t\t\t| (DECL_DLLIMPORT_P (t) << 2)\n-\t\t\t\t\t| (DECL_WEAK (t) << 3)\n-\t\t\t\t\t| (DECL_SEEN_IN_BIND_EXPR_P (t) << 4)\n-\t\t\t\t\t| (DECL_COMDAT (t) << 5)\n+      v = iterative_hash_host_wide_int ((DECL_COMMON (t))\n+\t\t\t\t\t| (DECL_DLLIMPORT_P (t) << 1)\n+\t\t\t\t\t| (DECL_WEAK (t) << 2)\n+\t\t\t\t\t| (DECL_SEEN_IN_BIND_EXPR_P (t) << 3)\n+\t\t\t\t\t| (DECL_COMDAT (t) << 4)\n \t\t\t\t\t| (DECL_VISIBILITY_SPECIFIED (t) << 6),\n \t\t\t\t\tv);\n       v = iterative_hash_host_wide_int (DECL_VISIBILITY (t), v);\n       if (code == VAR_DECL)\n \t{\n+\t  /* DECL_IN_TEXT_SECTION is set during final asm output only.  */\n \t  v = iterative_hash_host_wide_int (DECL_HARD_REGISTER (t)\n-\t\t\t\t\t    | (DECL_IN_TEXT_SECTION (t) << 1)\n-\t\t\t\t\t    | (DECL_IN_CONSTANT_POOL (t) << 2),\n+\t\t\t\t\t    | (DECL_IN_CONSTANT_POOL (t) << 1),\n \t\t\t\t\t    v);\n \t  v = iterative_hash_host_wide_int (DECL_TLS_MODEL (t), v);\n \t}\n@@ -1021,9 +1018,8 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n       visit (BINFO_VPTR_FIELD (t));\n       FOR_EACH_VEC_SAFE_ELT (BINFO_BASE_ACCESSES (t), i, b)\n \tvisit (b);\n-      visit (BINFO_INHERITANCE_CHAIN (t));\n-      visit (BINFO_SUBVTT_INDEX (t));\n-      visit (BINFO_VPTR_INDEX (t));\n+      /* Do not walk BINFO_INHERITANCE_CHAIN, BINFO_SUBVTT_INDEX\n+\t and BINFO_VPTR_INDEX; these are used by C++ FE only.  */\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))"}, {"sha": "0fb1fc0eedd354d66ddb2e02f7dbc0e6c7a91ae1", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01c111b6fc91e9f354521e7d4dcbc44da092b14/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01c111b6fc91e9f354521e7d4dcbc44da092b14/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=c01c111b6fc91e9f354521e7d4dcbc44da092b14", "patch": "@@ -1,3 +1,9 @@\n+2013-08-28  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto.c (compare_tree_sccs_1): Drop DECL_ERROR_ISSUED,\n+\tDECL_DEFER_OUTPUT and DECL_IN_TEXT_SECTION.\n+\t(unify_scc): Do checking assert.\n+\n 2013-08-06  Jan Hubicka  <jh@suse.cz>\n \t    Martin Liska  <marxin.liska@gmail.com>\n "}, {"sha": "d3d9fabc15133f6b94dfa34bcf393a3f38dc6743", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01c111b6fc91e9f354521e7d4dcbc44da092b14/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01c111b6fc91e9f354521e7d4dcbc44da092b14/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=c01c111b6fc91e9f354521e7d4dcbc44da092b14", "patch": "@@ -1431,9 +1431,8 @@ maybe_remember_with_vars_binfo (tree t)\n   n = vec_safe_length (BINFO_BASE_ACCESSES (t));\n   for (i = 0; i < n; i++)\n     MAYBE_REMEMBER_WITH_VARS (BINFO_BASE_ACCESS (t, i));\n-  MAYBE_REMEMBER_WITH_VARS (BINFO_INHERITANCE_CHAIN (t));\n-  MAYBE_REMEMBER_WITH_VARS (BINFO_SUBVTT_INDEX (t));\n-  MAYBE_REMEMBER_WITH_VARS (BINFO_VPTR_INDEX (t));\n+  /* Do not walk BINFO_INHERITANCE_CHAIN, BINFO_SUBVTT_INDEX\n+     and BINFO_VPTR_INDEX; these are used by C++ FE only.  */\n   n = BINFO_N_BASE_BINFOS (t);\n   for (i = 0; i < n; i++)\n     MAYBE_REMEMBER_WITH_VARS (BINFO_BASE_BINFO (t, i));\n@@ -1823,7 +1822,6 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       compare_values (DECL_ALIGN);\n       if (code == LABEL_DECL)\n \t{\n-\t  compare_values (DECL_ERROR_ISSUED);\n \t  compare_values (EH_LANDING_PAD_NR);\n \t  compare_values (LABEL_DECL_UID);\n \t}\n@@ -1854,7 +1852,6 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_WITH_VIS))\n     {\n-      compare_values (DECL_DEFER_OUTPUT);\n       compare_values (DECL_COMMON);\n       compare_values (DECL_DLLIMPORT_P);\n       compare_values (DECL_WEAK);\n@@ -1865,7 +1862,7 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       if (code == VAR_DECL)\n \t{\n \t  compare_values (DECL_HARD_REGISTER);\n-\t  compare_values (DECL_IN_TEXT_SECTION);\n+          /* DECL_IN_TEXT_SECTION is set during final asm output only.  */\n \t  compare_values (DECL_IN_CONSTANT_POOL);\n \t  compare_values (DECL_TLS_MODEL);\n \t}\n@@ -2167,12 +2164,8 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       compare_tree_edges (BINFO_OFFSET (t1), BINFO_OFFSET (t2));\n       compare_tree_edges (BINFO_VTABLE (t1), BINFO_VTABLE (t2));\n       compare_tree_edges (BINFO_VPTR_FIELD (t1), BINFO_VPTR_FIELD (t2));\n-      compare_tree_edges (BINFO_INHERITANCE_CHAIN (t1),\n-\t\t\t  BINFO_INHERITANCE_CHAIN (t2));\n-      compare_tree_edges (BINFO_SUBVTT_INDEX (t1),\n-\t\t\t  BINFO_SUBVTT_INDEX (t2));\n-      compare_tree_edges (BINFO_VPTR_INDEX (t1),\n-\t\t\t  BINFO_VPTR_INDEX (t2));\n+      /* Do not walk BINFO_INHERITANCE_CHAIN, BINFO_SUBVTT_INDEX\n+\t and BINFO_VPTR_INDEX; these are used by C++ FE only.  */\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n@@ -2284,7 +2277,7 @@ unify_scc (struct streamer_tree_cache_d *cache, unsigned from,\n       for (unsigned i = 0; i < scc->len; ++i)\n \t{\n \t  TREE_VISITED (scc->entries[i]) = 1;\n-\t  gcc_assert (!TREE_ASM_WRITTEN (scc->entries[i]));\n+\t  gcc_checking_assert (!TREE_ASM_WRITTEN (scc->entries[i]));\n \t}\n \n       tree *map = XALLOCAVEC (tree, 2 * len);"}, {"sha": "1ee27428714c0394183d260deafd55aaab1d2e22", "filename": "gcc/print-tree.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01c111b6fc91e9f354521e7d4dcbc44da092b14/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01c111b6fc91e9f354521e7d4dcbc44da092b14/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=c01c111b6fc91e9f354521e7d4dcbc44da092b14", "patch": "@@ -409,8 +409,6 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n       if (code == FIELD_DECL && DECL_NONADDRESSABLE_P (node))\n \tfputs (\" nonaddressable\", file);\n \n-      if (code == LABEL_DECL && DECL_ERROR_ISSUED (node))\n-\tfputs (\" error-issued\", file);\n       if (code == LABEL_DECL && EH_LANDING_PAD_NR (node))\n \tfprintf (file, \" landing-pad:%d\", EH_LANDING_PAD_NR (node));\n "}, {"sha": "095d55936a37b75909ff68d36de55164aff5ea9a", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01c111b6fc91e9f354521e7d4dcbc44da092b14/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01c111b6fc91e9f354521e7d4dcbc44da092b14/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=c01c111b6fc91e9f354521e7d4dcbc44da092b14", "patch": "@@ -180,7 +180,6 @@ pack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n       /* Note that we do not write LABEL_DECL_UID.  The reader will\n \t always assume an initial value of -1 so that the\n \t label_to_block_map is recreated by gimple_set_bb.  */\n-      bp_pack_value (bp, DECL_ERROR_ISSUED (expr), 1);\n       bp_pack_var_len_unsigned (bp, EH_LANDING_PAD_NR (expr));\n     }\n \n@@ -225,7 +224,6 @@ pack_ts_decl_wrtl_value_fields (struct bitpack_d *bp, tree expr)\n static void\n pack_ts_decl_with_vis_value_fields (struct bitpack_d *bp, tree expr)\n {\n-  bp_pack_value (bp, DECL_DEFER_OUTPUT (expr), 1);\n   bp_pack_value (bp, DECL_COMMON (expr), 1);\n   bp_pack_value (bp, DECL_DLLIMPORT_P (expr), 1);\n   bp_pack_value (bp, DECL_WEAK (expr), 1);\n@@ -237,7 +235,7 @@ pack_ts_decl_with_vis_value_fields (struct bitpack_d *bp, tree expr)\n   if (TREE_CODE (expr) == VAR_DECL)\n     {\n       bp_pack_value (bp, DECL_HARD_REGISTER (expr), 1);\n-      bp_pack_value (bp, DECL_IN_TEXT_SECTION (expr), 1);\n+      /* DECL_IN_TEXT_SECTION is set during final asm output only. */\n       bp_pack_value (bp, DECL_IN_CONSTANT_POOL (expr), 1);\n       bp_pack_value (bp, DECL_TLS_MODEL (expr),  3);\n     }\n@@ -815,9 +813,8 @@ write_ts_binfo_tree_pointers (struct output_block *ob, tree expr, bool ref_p)\n   FOR_EACH_VEC_SAFE_ELT (BINFO_BASE_ACCESSES (expr), i, t)\n     stream_write_tree (ob, t, ref_p);\n \n-  stream_write_tree (ob, BINFO_INHERITANCE_CHAIN (expr), ref_p);\n-  stream_write_tree (ob, BINFO_SUBVTT_INDEX (expr), ref_p);\n-  stream_write_tree (ob, BINFO_VPTR_INDEX (expr), ref_p);\n+  /* Do not walk BINFO_INHERITANCE_CHAIN, BINFO_SUBVTT_INDEX\n+     and BINFO_VPTR_INDEX; these are used by C++ FE only.  */\n }\n \n "}, {"sha": "501448aa0b9d8d78019b86deeeb06c44a26154a6", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c01c111b6fc91e9f354521e7d4dcbc44da092b14/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c01c111b6fc91e9f354521e7d4dcbc44da092b14/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c01c111b6fc91e9f354521e7d4dcbc44da092b14", "patch": "@@ -2880,8 +2880,7 @@ struct GTY(()) tree_decl_common {\n   unsigned lang_flag_7 : 1;\n   unsigned lang_flag_8 : 1;\n \n-  /* In LABEL_DECL, this is DECL_ERROR_ISSUED.\n-     In VAR_DECL and PARM_DECL, this is DECL_REGISTER.  */\n+  /* In VAR_DECL and PARM_DECL, this is DECL_REGISTER.  */\n   unsigned decl_flag_0 : 1;\n   /* In FIELD_DECL, this is DECL_BIT_FIELD\n      In VAR_DECL and FUNCTION_DECL, this is DECL_EXTERNAL.\n@@ -3073,11 +3072,6 @@ struct GTY(()) tree_field_decl {\n #define EH_LANDING_PAD_NR(NODE) \\\n   (LABEL_DECL_CHECK (NODE)->label_decl.eh_landing_pad_nr)\n \n-/* In LABEL_DECL nodes, nonzero means that an error message about\n-   jumping into such a binding contour has been printed for this label.  */\n-#define DECL_ERROR_ISSUED(NODE) \\\n-  (LABEL_DECL_CHECK (NODE)->decl_common.decl_flag_0)\n-\n struct GTY(()) tree_label_decl {\n   struct tree_decl_with_rtl common;\n   int label_decl_uid;"}]}