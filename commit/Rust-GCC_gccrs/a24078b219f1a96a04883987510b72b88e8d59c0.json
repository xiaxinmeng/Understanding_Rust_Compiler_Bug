{"sha": "a24078b219f1a96a04883987510b72b88e8d59c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI0MDc4YjIxOWYxYTk2YTA0ODgzOTg3NTEwYjcyYjg4ZThkNTljMA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2009-03-29T14:57:02Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-03-29T14:57:02Z"}, "message": "i386-protos.h (ix86_agi_dependent): New.\n\n2009-03-29  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386-protos.h (ix86_agi_dependent): New.\n\n\t* config/i386/i386.c (ix86_agi_dependent): Rewrite.\n\t(ix86_adjust_cost): Updated.\n\nFrom-SVN: r145235", "tree": {"sha": "b4c7b7fbf727ee3499a8c04c51efc78803921f37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4c7b7fbf727ee3499a8c04c51efc78803921f37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a24078b219f1a96a04883987510b72b88e8d59c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a24078b219f1a96a04883987510b72b88e8d59c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a24078b219f1a96a04883987510b72b88e8d59c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a24078b219f1a96a04883987510b72b88e8d59c0/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3379ae7f3b65e899f9b7812e27a43625c6b497f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3379ae7f3b65e899f9b7812e27a43625c6b497f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3379ae7f3b65e899f9b7812e27a43625c6b497f7"}], "stats": {"total": 77, "additions": 39, "deletions": 38}, "files": [{"sha": "0f8d30cab8d4cf2a34dada168f31b3390ee4cd53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a24078b219f1a96a04883987510b72b88e8d59c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a24078b219f1a96a04883987510b72b88e8d59c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a24078b219f1a96a04883987510b72b88e8d59c0", "patch": "@@ -1,3 +1,10 @@\n+2009-03-29  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386-protos.h (ix86_agi_dependent): New.\n+\n+\t* config/i386/i386.c (ix86_agi_dependent): Rewrite.\n+\t(ix86_adjust_cost): Updated.\n+\n 2009-03-29  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/28850"}, {"sha": "d6b3078169225e91a008d738745a69314cf356f3", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a24078b219f1a96a04883987510b72b88e8d59c0/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a24078b219f1a96a04883987510b72b88e8d59c0/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=a24078b219f1a96a04883987510b72b88e8d59c0", "patch": "@@ -85,6 +85,7 @@ extern void ix86_fixup_binary_operands_no_copy (enum rtx_code,\n extern void ix86_expand_binary_operator (enum rtx_code,\n \t\t\t\t\t enum machine_mode, rtx[]);\n extern int ix86_binary_operator_ok (enum rtx_code, enum machine_mode, rtx[]);\n+extern bool ix86_agi_dependent (rtx set_insn, rtx use_insn);\n extern void ix86_expand_unary_operator (enum rtx_code, enum machine_mode,\n \t\t\t\t\trtx[]);\n extern rtx ix86_build_const_vector (enum machine_mode, bool, rtx);"}, {"sha": "4a6d601ce45e7f81b0e4628a5961b5a8b2ce1034", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 31, "deletions": 38, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a24078b219f1a96a04883987510b72b88e8d59c0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a24078b219f1a96a04883987510b72b88e8d59c0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a24078b219f1a96a04883987510b72b88e8d59c0", "patch": "@@ -19070,41 +19070,21 @@ ix86_flags_dependent (rtx insn, rtx dep_insn, enum attr_type insn_type)\n   return 1;\n }\n \n-/* A subroutine of ix86_adjust_cost -- return true iff INSN has a memory\n-   address with operands set by DEP_INSN.  */\n+/* Return true iff USE_INSN has a memory address with operands set by\n+   SET_INSN.  */\n \n-static int\n-ix86_agi_dependent (rtx insn, rtx dep_insn, enum attr_type insn_type)\n+bool\n+ix86_agi_dependent (rtx set_insn, rtx use_insn)\n {\n-  rtx addr;\n-\n-  if (insn_type == TYPE_LEA\n-      && TARGET_PENTIUM)\n-    {\n-      addr = PATTERN (insn);\n-\n-      if (GET_CODE (addr) == PARALLEL)\n-\taddr = XVECEXP (addr, 0, 0);\n-\n-      gcc_assert (GET_CODE (addr) == SET);\n-\n-      addr = SET_SRC (addr);\n-    }\n-  else\n-    {\n-      int i;\n-      extract_insn_cached (insn);\n-      for (i = recog_data.n_operands - 1; i >= 0; --i)\n-\tif (MEM_P (recog_data.operand[i]))\n-\t  {\n-\t    addr = XEXP (recog_data.operand[i], 0);\n-\t    goto found;\n-\t  }\n-      return 0;\n-    found:;\n-    }\n-\n-  return modified_in_p (addr, dep_insn);\n+  int i;\n+  extract_insn_cached (use_insn);\n+  for (i = recog_data.n_operands - 1; i >= 0; --i)\n+    if (MEM_P (recog_data.operand[i]))\n+      {\n+\trtx addr = XEXP (recog_data.operand[i], 0);\n+\treturn modified_in_p (addr, set_insn) != 0;\n+      }\n+  return false;\n }\n \n static int\n@@ -19132,7 +19112,20 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n     {\n     case PROCESSOR_PENTIUM:\n       /* Address Generation Interlock adds a cycle of latency.  */\n-      if (ix86_agi_dependent (insn, dep_insn, insn_type))\n+      if (insn_type == TYPE_LEA)\n+\t{\n+\t  rtx addr = PATTERN (insn);\n+\n+\t  if (GET_CODE (addr) == PARALLEL)\n+\t    addr = XVECEXP (addr, 0, 0);\n+\n+\t  gcc_assert (GET_CODE (addr) == SET);\n+\n+\t  addr = SET_SRC (addr);\n+\t  if (modified_in_p (addr, dep_insn))\n+\t    cost += 1;\n+\t}\n+      else if (ix86_agi_dependent (dep_insn, insn))\n \tcost += 1;\n \n       /* ??? Compares pair with jump/setcc.  */\n@@ -19142,7 +19135,7 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n       /* Floating point stores require value to be ready one cycle earlier.  */\n       if (insn_type == TYPE_FMOV\n \t  && get_attr_memory (insn) == MEMORY_STORE\n-\t  && !ix86_agi_dependent (insn, dep_insn, insn_type))\n+\t  && !ix86_agi_dependent (dep_insn, insn))\n \tcost += 1;\n       break;\n \n@@ -19165,7 +19158,7 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n \t in parallel with previous instruction in case\n \t previous instruction is not needed to compute the address.  */\n       if ((memory == MEMORY_LOAD || memory == MEMORY_BOTH)\n-\t  && !ix86_agi_dependent (insn, dep_insn, insn_type))\n+\t  && !ix86_agi_dependent (dep_insn, insn))\n \t{\n \t  /* Claim moves to take one cycle, as core can issue one load\n \t     at time and the next load can start cycle later.  */\n@@ -19194,7 +19187,7 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n \t in parallel with previous instruction in case\n \t previous instruction is not needed to compute the address.  */\n       if ((memory == MEMORY_LOAD || memory == MEMORY_BOTH)\n-\t  && !ix86_agi_dependent (insn, dep_insn, insn_type))\n+\t  && !ix86_agi_dependent (dep_insn, insn))\n \t{\n \t  /* Claim moves to take one cycle, as core can issue one load\n \t     at time and the next load can start cycle later.  */\n@@ -19219,7 +19212,7 @@ ix86_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n \t in parallel with previous instruction in case\n \t previous instruction is not needed to compute the address.  */\n       if ((memory == MEMORY_LOAD || memory == MEMORY_BOTH)\n-\t  && !ix86_agi_dependent (insn, dep_insn, insn_type))\n+\t  && !ix86_agi_dependent (dep_insn, insn))\n \t{\n \t  enum attr_unit unit = get_attr_unit (insn);\n \t  int loadcost = 3;"}]}