{"sha": "da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE1N2QxYjk4ZjhjYTlkMTMwNGZlNjZmZjE0MzE1ZjEyY2UyYTE0Zg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-18T23:28:20Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-18T23:28:20Z"}, "message": "In gcc/: 2010-10-18 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/:\n2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Implemented parsing @synthesize and @dynamic for Objective-C.\n        * c-parser.c (c_parser_external_declaration): Recognize\n        RID_AT_SYNTHESIZE and RID_AT_DYNAMIC.\n        (c_parser_objc_at_synthesize_declaration): New.\n        (c_parser_objc_at_dynamic_declaration): New.\n\n2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * c-parser.c (c_parser_objc_class_declaration): After finding an\n        error, parse the whole declaration then reset parser->error.\n\nIn gcc/cp/:\n2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Implemented parsing @synthesize and @dynamic for Objective-C++.\n        * parser.c (cp_parser_objc_method_definition_list): Recognize\n        RID_AT_SYNTHESIZE and RID_AT_DYNAMIC.\n        (cp_parser_objc_at_dynamic_declaration): New.\n        (cp_parser_objc_at_synthesize_declaration): New.\n\n2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * parser.c (cp_parser_objc_identifier_list): Check the return\n        value of cp_parser_identifier and react if it is error_mark_node.\n\nIn gcc/objc/:\n2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Implemented parsing @synthesize and @dynamic for\n        Objective-C/Objective-C++.\n        * objc-act.c (objc_add_synthesize_declaration): New.\n        (objc_add_dynamic_declaration): New.\n\n2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc-act.c (lookup_and_install_protocols): Return NULL if passed\n        error_mark_node.\n\nIn gcc/testsuite/:\n2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        Implemented parsing @synthesize and @dynamic for\n        Objective-C/Objective-C++.\n        * objc.dg/property/dynamic-1.m: New.\n        * objc.dg/property/synthesize-1.m: New.\n        * obj-c++.dg/property/dynamic-1.mm: New.\n        * obj-c++.dg/property/synthesize-1.mm: New.\n\n2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc.dg/at-class-1.m: New.\n        * objc.dg/at-class-1.mm: New.\n\nFrom-SVN: r165667", "tree": {"sha": "59330bf1f36ce8580abaac8db170b72523706080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59330bf1f36ce8580abaac8db170b72523706080"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0069111f9c747028548f8c5dd7b91c4e5358039d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0069111f9c747028548f8c5dd7b91c4e5358039d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0069111f9c747028548f8c5dd7b91c4e5358039d"}], "stats": {"total": 533, "additions": 526, "deletions": 7}, "files": [{"sha": "edbf40ace31dcfbda86dd342c411e24e46087e6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -1,3 +1,16 @@\n+2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tImplemented parsing @synthesize and @dynamic for Objective-C.\n+\t* c-parser.c (c_parser_external_declaration): Recognize\n+\tRID_AT_SYNTHESIZE and RID_AT_DYNAMIC.\n+\t(c_parser_objc_at_synthesize_declaration): New.\n+\t(c_parser_objc_at_dynamic_declaration): New.\n+\n+2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\t\n+\t* c-parser.c (c_parser_objc_class_declaration): After finding an\n+\terror, parse the whole declaration then reset parser->error.\n+\t\n 2010-10-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/46041"}, {"sha": "1f8726cd8303c2ed3f119222abfbfdf75e93005a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -1,3 +1,14 @@\n+2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tImplemented parsing @synthesize and @dynamic for\n+\tObjective-C/Objective-C++.\n+\t* c-common.h (enum rid): Add RID_AT_SYNTHESIZE and RID_AT_DYNAMIC.\n+\t(objc_add_synthesize_declaration): New.\n+\t(objc_add_dynamic_declaration): New.\n+\t* c-common.c (c_common_reswords): Add synthesize and dynamic.\n+\t* stub-objc.c (objc_add_synthesize_declaration): New.\n+\t(objc_add_dynamic_declaration): New.\n+\t\n 2010-10-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/46041"}, {"sha": "3716b5b14c4a7715ded7b800b27bae6ba5cee62f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -545,6 +545,8 @@ const struct c_common_resword c_common_reswords[] =\n   { \"required\",\t\tRID_AT_REQUIRED,\tD_OBJC },\n   { \"property\",\t\tRID_AT_PROPERTY,\tD_OBJC },\n   { \"package\",\t\tRID_AT_PACKAGE,\t\tD_OBJC },\n+  { \"synthesize\",\tRID_AT_SYNTHESIZE,\tD_OBJC },\n+  { \"dynamic\",\t\tRID_AT_DYNAMIC,\t\tD_OBJC },\n   /* These are recognized only in protocol-qualifier context\n      (see above) */\n   { \"bycopy\",\t\tRID_BYCOPY,\t\tD_OBJC },"}, {"sha": "6b8a8f4375e4005cd6c97e3fdb31d544b274c45b", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -148,6 +148,7 @@ enum rid\n   RID_AT_THROW,\t   RID_AT_TRY,       RID_AT_CATCH,\n   RID_AT_FINALLY,  RID_AT_SYNCHRONIZED, \n   RID_AT_OPTIONAL, RID_AT_REQUIRED, RID_AT_PROPERTY,\n+  RID_AT_SYNTHESIZE, RID_AT_DYNAMIC,\n   RID_AT_INTERFACE,\n   RID_AT_IMPLEMENTATION,\n \n@@ -1045,6 +1046,8 @@ extern bool  objc_method_decl (enum tree_code);\n extern void objc_add_property_variable (tree);\n extern tree objc_build_getter_call (tree, tree);\n extern tree objc_build_setter_call (tree, tree);\n+extern void objc_add_synthesize_declaration (location_t, tree);\n+extern void objc_add_dynamic_declaration (location_t, tree);\n \n /* The following are provided by the C and C++ front-ends, and called by\n    ObjC/ObjC++.  */"}, {"sha": "a1ea03330e2730d4329ff5121c0f4fafada01436", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -349,6 +349,18 @@ objc_build_setter_call (tree ARG_UNUSED (lhs), tree ARG_UNUSED (rhs))\n   return 0;\n }\n \n+void\n+objc_add_synthesize_declaration (location_t ARG_UNUSED (start_locus), \n+\t\t\t\t tree ARG_UNUSED (property_and_ivar_list))\n+{\n+}\n+\n+void\n+objc_add_dynamic_declaration (location_t ARG_UNUSED (start_locus), \n+\t\t\t      tree ARG_UNUSED (property_list))\n+{\n+}\n+\n tree\n objc_build_throw_stmt (location_t ARG_UNUSED (loc), tree ARG_UNUSED (expr))\n {"}, {"sha": "d234218b3234401ee9c866b94d94f8cf732eea45", "filename": "gcc/c-parser.c", "status": "modified", "additions": 126, "deletions": 1, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -1082,6 +1082,8 @@ static tree c_parser_objc_receiver (c_parser *);\n static tree c_parser_objc_message_args (c_parser *);\n static tree c_parser_objc_keywordexpr (c_parser *);\n static void c_parser_objc_at_property (c_parser *) ;\n+static void c_parser_objc_at_synthesize_declaration (c_parser *);\n+static void c_parser_objc_at_dynamic_declaration (c_parser *);\n static bool c_parser_objc_diagnose_bad_element_prefix\n   (c_parser *, struct c_declspecs *);\n \n@@ -1185,6 +1187,14 @@ c_parser_external_declaration (c_parser *parser)\n \t  gcc_assert (c_dialect_objc ());\n \t  c_parser_objc_at_property (parser);\n \t  break;\n+\tcase RID_AT_SYNTHESIZE:\n+\t  gcc_assert (c_dialect_objc ());\n+\t  c_parser_objc_at_synthesize_declaration (parser);\n+\t  break;\n+\tcase RID_AT_DYNAMIC:\n+\t  gcc_assert (c_dialect_objc ());\n+\t  c_parser_objc_at_dynamic_declaration (parser);\n+\t  break;\n \tcase RID_AT_END:\n \t  gcc_assert (c_dialect_objc ());\n \t  c_parser_consume_token (parser);\n@@ -6763,7 +6773,9 @@ c_parser_objc_class_declaration (c_parser *parser)\n       if (c_parser_next_token_is_not (parser, CPP_NAME))\n \t{\n \t  c_parser_error (parser, \"expected identifier\");\n-\t  break;\n+\t  c_parser_skip_until_found (parser, CPP_SEMICOLON, NULL);\n+\t  parser->error = false;\n+\t  return;\n \t}\n       id = c_parser_peek_token (parser)->value;\n       list = chainon (list, build_tree_list (NULL_TREE, id));\n@@ -7689,6 +7701,119 @@ c_parser_objc_at_property (c_parser *parser)\n   c_parser_skip_until_found (parser, CPP_SEMICOLON, \"expected %<;%>\");\n }\n \n+/* Parse an Objective-C @synthesize declaration.  The syntax is:\n+\n+   objc-synthesize-declaration:\n+     @synthesize objc-synthesize-identifier-list ;\n+\n+   objc-synthesize-identifier-list:\n+     objc-synthesize-identifier\n+     objc-synthesize-identifier-list, objc-synthesize-identifier\n+\n+   objc-synthesize-identifier\n+     identifier\n+     identifier = identifier\n+\n+  For example:\n+    @synthesize MyProperty;\n+    @synthesize OneProperty, AnotherProperty=MyIvar, YetAnotherProperty;\n+\n+  PS: This function is identical to cp_parser_objc_at_synthesize_declaration\n+  for C++.  Keep them in sync.\n+*/\n+static void\n+c_parser_objc_at_synthesize_declaration (c_parser *parser)\n+{\n+  tree list = NULL_TREE;\n+  location_t loc;\n+  gcc_assert (c_parser_next_token_is_keyword (parser, RID_AT_SYNTHESIZE));\n+  loc = c_parser_peek_token (parser)->location;\n+\n+  c_parser_consume_token (parser);\n+  while (true)\n+    {\n+      tree property, ivar;\n+      if (c_parser_next_token_is_not (parser, CPP_NAME))\n+\t{\n+\t  c_parser_error (parser, \"expected identifier\");\n+\t  c_parser_skip_until_found (parser, CPP_SEMICOLON, NULL);\n+\t  /* Once we find the semicolon, we can resume normal parsing.\n+\t     We have to reset parser->error manually because\n+\t     c_parser_skip_until_found() won't reset it for us if the\n+\t     next token is precisely a semicolon.  */\n+\t  parser->error = false;\n+\t  return;\n+\t}\n+      property = c_parser_peek_token (parser)->value;\n+      c_parser_consume_token (parser);\n+      if (c_parser_next_token_is (parser, CPP_EQ))\n+\t{\n+\t  c_parser_consume_token (parser);\n+\t  if (c_parser_next_token_is_not (parser, CPP_NAME))\n+\t    {\n+\t      c_parser_error (parser, \"expected identifier\");\n+\t      c_parser_skip_until_found (parser, CPP_SEMICOLON, NULL);\n+\t      parser->error = false;\n+\t      return;\n+\t    }\n+\t  ivar = c_parser_peek_token (parser)->value;\n+\t  c_parser_consume_token (parser);\n+\t}\n+      else\n+\tivar = NULL_TREE;\n+      list = chainon (list, build_tree_list (ivar, property));\n+      if (c_parser_next_token_is (parser, CPP_COMMA))\n+\tc_parser_consume_token (parser);\n+      else\n+\tbreak;\n+    }\n+  c_parser_skip_until_found (parser, CPP_SEMICOLON, \"expected %<;%>\");\n+  objc_add_synthesize_declaration (loc, list);\n+}\n+\n+/* Parse an Objective-C @dynamic declaration.  The syntax is:\n+\n+   objc-dynamic-declaration:\n+     @dynamic identifier-list ;\n+\n+   For example:\n+     @dynamic MyProperty;\n+     @dynamic MyProperty, AnotherProperty;\n+\n+  PS: This function is identical to cp_parser_objc_at_dynamic_declaration\n+  for C++.  Keep them in sync.\n+*/\n+static void\n+c_parser_objc_at_dynamic_declaration (c_parser *parser)\n+{\n+  tree list = NULL_TREE;\n+  location_t loc;\n+  gcc_assert (c_parser_next_token_is_keyword (parser, RID_AT_DYNAMIC));\n+  loc = c_parser_peek_token (parser)->location;\n+\n+  c_parser_consume_token (parser);\n+  while (true)\n+    {\n+      tree property;\n+      if (c_parser_next_token_is_not (parser, CPP_NAME))\n+\t{\n+\t  c_parser_error (parser, \"expected identifier\");\n+\t  c_parser_skip_until_found (parser, CPP_SEMICOLON, NULL);\n+\t  parser->error = false;\n+\t  return;\n+\t}\n+      property = c_parser_peek_token (parser)->value;\n+      list = chainon (list, build_tree_list (NULL_TREE, property));\n+      c_parser_consume_token (parser);\n+      if (c_parser_next_token_is (parser, CPP_COMMA))\n+\tc_parser_consume_token (parser);\n+      else\n+\tbreak;\n+    }\n+  c_parser_skip_until_found (parser, CPP_SEMICOLON, \"expected %<;%>\");\n+  objc_add_dynamic_declaration (loc, list);\n+}\n+\n \f\n /* Handle pragmas.  Some OpenMP pragmas are associated with, and therefore\n    should be considered, statements.  ALLOW_STMT is true if we're within"}, {"sha": "5447b4525baf1008bd0088fa2e9e186d5a5c0cef", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -1,3 +1,16 @@\n+2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tImplemented parsing @synthesize and @dynamic for Objective-C++.\n+\t* parser.c (cp_parser_objc_method_definition_list): Recognize\n+\tRID_AT_SYNTHESIZE and RID_AT_DYNAMIC.\n+\t(cp_parser_objc_at_dynamic_declaration): New.\n+\t(cp_parser_objc_at_synthesize_declaration): New.\n+\n+2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\t\n+\n+\t* parser.c (cp_parser_objc_identifier_list): Check the return\n+\tvalue of cp_parser_identifier and react if it is error_mark_node.\n+\n 2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n \t\n \tMerge from apple/trunk branch on FSF servers."}, {"sha": "477348661bd21f7a23a443d741b87da137650fd2", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 124, "deletions": 6, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -2100,6 +2100,10 @@ static bool cp_parser_objc_valid_prefix_attributes\n   (cp_parser *, tree *);\n static void cp_parser_objc_at_property \n   (cp_parser *) ;\n+static void cp_parser_objc_at_synthesize_declaration \n+  (cp_parser *) ;\n+static void cp_parser_objc_at_dynamic_declaration\n+  (cp_parser *) ;\n static void cp_parser_objc_property_decl \n   (cp_parser *) ;\n \n@@ -21270,18 +21274,29 @@ cp_parser_objc_selector_expression (cp_parser* parser)\n static tree\n cp_parser_objc_identifier_list (cp_parser* parser)\n {\n-  tree list = build_tree_list (NULL_TREE, cp_parser_identifier (parser));\n-  cp_token *sep = cp_lexer_peek_token (parser->lexer);\n+  tree identifier;\n+  tree list;\n+  cp_token *sep;\n+\n+  identifier = cp_parser_identifier (parser);\n+  if (identifier == error_mark_node)\n+    return error_mark_node;      \n+\n+  list = build_tree_list (NULL_TREE, identifier);\n+  sep = cp_lexer_peek_token (parser->lexer);\n \n   while (sep->type == CPP_COMMA)\n     {\n       cp_lexer_consume_token (parser->lexer);  /* Eat ','.  */\n-      list = chainon (list,\n-\t\t      build_tree_list (NULL_TREE,\n-\t\t\t\t       cp_parser_identifier (parser)));\n+      identifier = cp_parser_identifier (parser);\n+      if (identifier == error_mark_node)\n+\treturn list;\n+\n+      list = chainon (list, build_tree_list (NULL_TREE,\n+\t\t\t\t\t     identifier));\n       sep = cp_lexer_peek_token (parser->lexer);\n     }\n-\n+  \n   return list;\n }\n \n@@ -21790,6 +21805,10 @@ cp_parser_objc_method_definition_list (cp_parser* parser)\n \t}\n       else if (token->keyword == RID_AT_PROPERTY)\n \tcp_parser_objc_at_property (parser);\n+      else if (token->keyword == RID_AT_SYNTHESIZE)\n+\tcp_parser_objc_at_synthesize_declaration (parser);\n+      else if (token->keyword == RID_AT_DYNAMIC)\n+\tcp_parser_objc_at_dynamic_declaration (parser);\n       else if (token->keyword == RID_ATTRIBUTE \n       \t       && cp_parser_objc_method_maybe_bad_prefix_attributes(parser))\n \twarning_at (token->location, OPT_Wattributes,\n@@ -22422,6 +22441,105 @@ cp_parser_objc_at_property (cp_parser *parser)\n   /* ... and the property declaration(s).  */\n   cp_parser_objc_property_decl (parser);\n }\n+\n+/* Parse an Objective-C++ @synthesize declaration.  The syntax is:\n+\n+   objc-synthesize-declaration:\n+     @synthesize objc-synthesize-identifier-list ;\n+\n+   objc-synthesize-identifier-list:\n+     objc-synthesize-identifier\n+     objc-synthesize-identifier-list, objc-synthesize-identifier\n+\n+   objc-synthesize-identifier\n+     identifier\n+     identifier = identifier\n+\n+  For example:\n+    @synthesize MyProperty;\n+    @synthesize OneProperty, AnotherProperty=MyIvar, YetAnotherProperty;\n+\n+  PS: This function is identical to c_parser_objc_at_synthesize_declaration\n+  for C.  Keep them in sync.\n+*/\n+static void \n+cp_parser_objc_at_synthesize_declaration (cp_parser *parser)\n+{\n+  tree list = NULL_TREE;\n+  location_t loc;\n+  loc = cp_lexer_peek_token (parser->lexer)->location;\n+\n+  cp_lexer_consume_token (parser->lexer);  /* Eat '@synthesize'.  */\n+  while (true)\n+    {\n+      tree property, ivar;\n+      property = cp_parser_identifier (parser);\n+      if (property == error_mark_node)\n+\t{\n+\t  cp_parser_consume_semicolon_at_end_of_statement (parser);\n+\t  return;\n+\t}\n+      if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))\n+\t{\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  ivar = cp_parser_identifier (parser);\n+\t  if (ivar == error_mark_node)\n+\t    {\n+\t      cp_parser_consume_semicolon_at_end_of_statement (parser);\n+\t      return;\n+\t    }\n+\t}\n+      else\n+\tivar = NULL_TREE;\n+      list = chainon (list, build_tree_list (ivar, property));\n+      if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))\n+\tcp_lexer_consume_token (parser->lexer);\n+      else\n+\tbreak;\n+    }\n+  cp_parser_consume_semicolon_at_end_of_statement (parser);\n+  objc_add_synthesize_declaration (loc, list);\n+}\n+\n+/* Parse an Objective-C++ @dynamic declaration.  The syntax is:\n+\n+   objc-dynamic-declaration:\n+     @dynamic identifier-list ;\n+\n+   For example:\n+     @dynamic MyProperty;\n+     @dynamic MyProperty, AnotherProperty;\n+\n+  PS: This function is identical to c_parser_objc_at_dynamic_declaration\n+  for C.  Keep them in sync.\n+*/\n+static void \n+cp_parser_objc_at_dynamic_declaration (cp_parser *parser)\n+{\n+  tree list = NULL_TREE;\n+  location_t loc;\n+  loc = cp_lexer_peek_token (parser->lexer)->location;\n+\n+  cp_lexer_consume_token (parser->lexer);  /* Eat '@dynamic'.  */\n+  while (true)\n+    {\n+      tree property;\n+      property = cp_parser_identifier (parser);\n+      if (property == error_mark_node)\n+\t{\n+\t  cp_parser_consume_semicolon_at_end_of_statement (parser);\n+\t  return;\n+\t}\n+      list = chainon (list, build_tree_list (NULL, property));\n+      if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))\n+\tcp_lexer_consume_token (parser->lexer);\n+      else\n+\tbreak;\n+    }\n+  cp_parser_consume_semicolon_at_end_of_statement (parser);\n+  objc_add_dynamic_declaration (loc, list);\n+}\n+\n \f\n /* OpenMP 2.5 parsing routines.  */\n "}, {"sha": "745b7bb9ba194bc112e92432dd417a040c3442ef", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -1,3 +1,15 @@\n+2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tImplemented parsing @synthesize and @dynamic for\n+\tObjective-C/Objective-C++.\n+\t* objc-act.c (objc_add_synthesize_declaration): New.\n+\t(objc_add_dynamic_declaration): New.\n+\n+2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\t\n+\n+\t* objc-act.c (lookup_and_install_protocols): Return NULL if passed\n+\terror_mark_node.\n+\t\n 2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tMerge from 'apple/trunk' branch on FSF servers."}, {"sha": "048d2ae74b0d952d1c5e3e4b0f3caeeca477758e", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -2114,6 +2114,9 @@ lookup_and_install_protocols (tree protocols)\n   tree proto;\n   tree return_value = NULL_TREE;\n \n+  if (protocols == error_mark_node)\n+    return NULL;\n+\n   for (proto = protocols; proto; proto = TREE_CHAIN (proto))\n     {\n       tree ident = TREE_VALUE (proto);\n@@ -8701,6 +8704,55 @@ objc_synthesize_setter (tree klass, tree class_method, tree property)\n   objc_finish_method_definition (fn);\n }\n \n+/* This function is called by the parser after a @synthesize\n+   expression is parsed.  'start_locus' is the location of the\n+   @synthesize expression, and 'property_and_ivar_list' is a chained\n+   list of the property and ivar names.\n+ */\n+void\n+objc_add_synthesize_declaration (location_t start_locus ATTRIBUTE_UNUSED, tree property_and_ivar_list ATTRIBUTE_UNUSED)\n+{\n+  if (property_and_ivar_list == error_mark_node)\n+    return;\n+\n+  if (!objc_implementation_context)\n+    {\n+      /* We can get here only in Objective-C; the Objective-C++ parser\n+\t detects the problem while parsing, outputs the error\n+\t \"misplaced '@synthesize' Objective-C++ construct\" and skips\n+\t the declaration.  */\n+      error (\"%<@synthesize%> not in @implementation context\");\n+      return;\n+    }\n+\n+  /* TODO */\n+  error (\"%<@synthesize%> is not supported in this version of the compiler\");\n+}\n+\n+/* This function is called by the parser after a @dynamic expression\n+   is parsed.  'start_locus' is the location of the @dynamic\n+   expression, and 'property_list' is a chained list of all the\n+   property names.  */\n+void\n+objc_add_dynamic_declaration (location_t start_locus ATTRIBUTE_UNUSED, tree property_list ATTRIBUTE_UNUSED)\n+{\n+  if (property_list == error_mark_node)\n+    return;\n+\n+  if (!objc_implementation_context)\n+    {\n+      /* We can get here only in Objective-C; the Objective-C++ parser\n+\t detects the problem while parsing, outputs the error\n+\t \"misplaced '@dynamic' Objective-C++ construct\" and skips the\n+\t declaration.  */\n+      error (\"%<@dynamic%> not in @implementation context\");\n+      return;\n+    }\n+\n+  /* TODO */\n+  error (\"%<@dynamic%> is not supported in this version of the compiler\");\n+}\n+\n /* Main routine to generate code/data for all the property information for \n    current implementation (class or category). CLASS is the interface where\n    ivars are declared.  CLASS_METHODS is where methods are found which"}, {"sha": "2c64ae9beda977d26f848a5a1867cfe58ee52c59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -1,3 +1,17 @@\n+2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tImplemented parsing @synthesize and @dynamic for\n+\tObjective-C/Objective-C++.\n+\t* objc.dg/property/dynamic-1.m: New.\n+\t* objc.dg/property/synthesize-1.m: New.\n+\t* obj-c++.dg/property/dynamic-1.mm: New.\n+\t* obj-c++.dg/property/synthesize-1.mm: New.\n+\n+2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\t\n+\n+\t* objc.dg/at-class-1.m: New.\n+\t* objc.dg/at-class-1.mm: New.\t\n+\t\n 2010-10-18  Steve Ellcey  <sje@cup.hp.com>\n \n \t* gcc.c-torture/compile/920625-1.c: Remove dg-prune-output lines."}, {"sha": "63721aa991703e72ba3516fa94e04c7e24eb8b4f", "filename": "gcc/testsuite/obj-c++.dg/at-class-1.mm", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fat-class-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fat-class-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fat-class-1.mm?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -0,0 +1,11 @@\n+/* Test @class.  */\n+/* { dg-do compile } */\n+\n+@class Object; /* Ok */\n+\n+@class Object, ;                            /* { dg-error \"expected identifier\" } */\n+@class Object, ;                            /* { dg-error \"expected identifier\" } */\n+@class Object, AnotherObject, ;             /* { dg-error \"expected identifier\" } */\n+@class Object, AnotherObject, TestObject ;  /* Ok */\n+\n+@class Object                               /* { dg-error \"expected .;.\" } */"}, {"sha": "d66ef282e01d4c88d94c8b99d493235260a0c7e7", "filename": "gcc/testsuite/obj-c++.dg/property/dynamic-1.mm", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdynamic-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdynamic-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdynamic-1.mm?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation MyRootClass\n+@end\n+\n+@dynamic isa;           /* { dg-error \"misplaced .@dynamic. Objective-C.. construct\" } */\n+\n+@interface Test : MyRootClass\n+{\n+  int v1;\n+  int v2;\n+  int v3;\n+  int v4;\n+}\n+@end\n+\n+@implementation Test\n+@dynamic;            /* { dg-error \"expected identifier\" } */\n+@dynamic v1, ;       /* { dg-error \"expected identifier\" } */\n+@dynamic v1, v2, v3; /* { dg-error \".@dynamic. is not supported in this version of the compiler\" } */\n+@dynamic v4;         /* { dg-error \".@dynamic. is not supported in this version of the compiler\" } */\n+@end"}, {"sha": "fb9b38ea1d8e7622e25d00c0edd44f32194135f4", "filename": "gcc/testsuite/obj-c++.dg/property/synthesize-1.mm", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fsynthesize-1.mm?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation MyRootClass\n+@end\n+\n+@synthesize isa;                    /* { dg-error \"misplaced .@synthesize. Objective-C.. construct\" } */\n+\n+@interface Test : MyRootClass\n+{\n+  int v1;\n+  int v2;\n+  int v3;\n+  int v4;\n+}\n+@end\n+\n+@implementation Test\n+@synthesize;                        /* { dg-error \"expected identifier\" } */\n+@synthesize v1, ;                   /* { dg-error \"expected identifier\" } */\n+@synthesize v1, v2 = ;              /* { dg-error \"expected identifier\" } */\n+@synthesize v1, v2=v2, v3 = v3,v4;  /* { dg-error \".@synthesize. is not supported in this version of the compiler\" } */\n+@synthesize v4;                     /* { dg-error \".@synthesize. is not supported in this version of the compiler\" } */\n+@end"}, {"sha": "63721aa991703e72ba3516fa94e04c7e24eb8b4f", "filename": "gcc/testsuite/objc.dg/at-class-1.m", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Ftestsuite%2Fobjc.dg%2Fat-class-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Ftestsuite%2Fobjc.dg%2Fat-class-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fat-class-1.m?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -0,0 +1,11 @@\n+/* Test @class.  */\n+/* { dg-do compile } */\n+\n+@class Object; /* Ok */\n+\n+@class Object, ;                            /* { dg-error \"expected identifier\" } */\n+@class Object, ;                            /* { dg-error \"expected identifier\" } */\n+@class Object, AnotherObject, ;             /* { dg-error \"expected identifier\" } */\n+@class Object, AnotherObject, TestObject ;  /* Ok */\n+\n+@class Object                               /* { dg-error \"expected .;.\" } */"}, {"sha": "b91a030a89d49e1705d45e24ec824fb9858043ba", "filename": "gcc/testsuite/objc.dg/property/dynamic-1.m", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdynamic-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdynamic-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdynamic-1.m?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation MyRootClass\n+@end\n+\n+@dynamic isa;           /* { dg-error \".@dynamic. not in @implementation context\" } */\n+\n+@interface Test : MyRootClass\n+{\n+  int v1;\n+  int v2;\n+  int v3;\n+  int v4;\n+}\n+@end\n+\n+@implementation Test\n+@dynamic;            /* { dg-error \"expected identifier\" } */\n+@dynamic v1, ;       /* { dg-error \"expected identifier\" } */\n+@dynamic v1, v2, v3; /* { dg-error \".@dynamic. is not supported in this version of the compiler\" } */\n+@dynamic v4;         /* { dg-error \".@dynamic. is not supported in this version of the compiler\" } */\n+@end"}, {"sha": "09085d82e745648321add90093b21773c7ea1614", "filename": "gcc/testsuite/objc.dg/property/synthesize-1.m", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fsynthesize-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da57d1b98f8ca9d1304fe66ff14315f12ce2a14f/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fsynthesize-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fsynthesize-1.m?ref=da57d1b98f8ca9d1304fe66ff14315f12ce2a14f", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+\n+#include <objc/objc.h>\n+\n+@interface MyRootClass\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation MyRootClass\n+@end\n+\n+@synthesize isa;                    /* { dg-error \".@synthesize. not in @implementation context\" } */\n+\n+@interface Test : MyRootClass\n+{\n+  int v1;\n+  int v2;\n+  int v3;\n+  int v4;\n+}\n+@end\n+\n+@implementation Test\n+@synthesize;                        /* { dg-error \"expected identifier\" } */\n+@synthesize v1, ;                   /* { dg-error \"expected identifier\" } */\n+@synthesize v1, v2 = ;              /* { dg-error \"expected identifier\" } */\n+@synthesize v1, v2=v2, v3 = v3,v4;  /* { dg-error \".@synthesize. is not supported in this version of the compiler\" } */\n+@synthesize v4;                     /* { dg-error \".@synthesize. is not supported in this version of the compiler\" } */\n+@end"}]}