{"sha": "b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFlNGY0ZGQ1Yzk1YmJhNWIxYmQ5MDE5MTM1YzIxMzNkOWE1M2YzZA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-09-17T20:49:34Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-09-17T20:49:34Z"}, "message": "sparc.md (UNSPEC_EDGE8, [...]): New unspecs.\n\n\t* config/sparc/sparc.md (UNSPEC_EDGE8, UNSPEC_EDGE8L,\n\tUNSPEC_EDGE16, UNSPEC_EDGE16L, UNSPEC_EDGE32, UNSPEC_EDGE32L):\n\tNew unspecs.\n\t(define_attr type): New type 'edge'.\n\t(edge8_vis, edge8l_vis, edge16_vis, edge16l_vis, edge32_vis,\n\tedge32l_vis): New patterns.\n\t* config/sparc/ultra1_2.md: Add insn reservation for 'edge'.\n\t* config/sparc/ultra3.md: Likewise.\n\t* config/sparc/niagara.md: Likewise.\n\t* config/sparc/niagara2.md: Likewise.\n\t* config/sparc/sparc.d (sparc_vis_init_builtins): Generate\n\tbuiltins for VIS edge instructions.\n\t* config/sparc/visintrin.h (__vis_edge8, __vis_edge8l)\n\t(__vis_edge16, __vis_edge16l, __vis_edge32, __vis_edge32l): New\n\tintrinsics.\n\t(__v8qi, __v4qi): Make unsigned.\n\t(__vis_faligndatadi, ___vis_faligndatav2si, __vis_faligndatav4hi,\n\t__vis_faligndatav8qi, __vis_fmul8x16au, __vis_fmul8x16al,\n\t__vis_fpack32): Fix types.\n\t* doc/extend.texi: Document new 'edge' VIS intrinsics.\n\nFrom-SVN: r178931", "tree": {"sha": "049bbcfa0bf973df9d117daf3f467395b5d97af9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/049bbcfa0bf973df9d117daf3f467395b5d97af9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a0436cb79ccf797d0dbc02175fce1a254a1a691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0436cb79ccf797d0dbc02175fce1a254a1a691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a0436cb79ccf797d0dbc02175fce1a254a1a691"}], "stats": {"total": 196, "additions": 178, "deletions": 18}, "files": [{"sha": "201d17c6444b26bcec6b8773ae2093deefd5810c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d", "patch": "@@ -1,3 +1,26 @@\n+2011-09-17  David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc.md (UNSPEC_EDGE8, UNSPEC_EDGE8L,\n+\tUNSPEC_EDGE16, UNSPEC_EDGE16L, UNSPEC_EDGE32, UNSPEC_EDGE32L):\n+\tNew unspecs.\n+\t(define_attr type): New type 'edge'.\n+\t(edge8_vis, edge8l_vis, edge16_vis, edge16l_vis, edge32_vis,\n+\tedge32l_vis): New patterns.\n+\t* config/sparc/ultra1_2.md: Add insn reservation for 'edge'.\n+\t* config/sparc/ultra3.md: Likewise.\n+\t* config/sparc/niagara.md: Likewise.\n+\t* config/sparc/niagara2.md: Likewise.\n+\t* config/sparc/sparc.d (sparc_vis_init_builtins): Generate\n+\tbuiltins for VIS edge instructions.\n+\t* config/sparc/visintrin.h (__vis_edge8, __vis_edge8l)\n+\t(__vis_edge16, __vis_edge16l, __vis_edge32, __vis_edge32l): New\n+\tintrinsics.\n+\t(__v8qi, __v4qi): Make unsigned.\n+\t(__vis_faligndatadi, ___vis_faligndatav2si, __vis_faligndatav4hi,\n+\t__vis_faligndatav8qi, __vis_fmul8x16au, __vis_fmul8x16al,\n+\t__vis_fpack32): Fix types.\n+\t* doc/extend.texi: Document new 'edge' VIS intrinsics.\n+\n 2011-09-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/sse.md (VIMAX_AVX2): Change V4DI to V2TI."}, {"sha": "a618b195a435576b03edffccfb7e0b4a5a341cde", "filename": "gcc/config/sparc/niagara.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fconfig%2Fsparc%2Fniagara.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fconfig%2Fsparc%2Fniagara.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fniagara.md?ref=b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d", "patch": "@@ -114,5 +114,5 @@\n  */\n (define_insn_reservation \"niag_vis\" 8\n   (and (eq_attr \"cpu\" \"niagara\")\n-    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist\"))\n+    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist,edge\"))\n   \"niag_pipe*8\")"}, {"sha": "999e13beaa485d47ef2c408c3c0915ce0cb19d40", "filename": "gcc/config/sparc/niagara2.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fconfig%2Fsparc%2Fniagara2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fconfig%2Fsparc%2Fniagara2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fniagara2.md?ref=b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d", "patch": "@@ -86,5 +86,5 @@\n \n (define_insn_reservation \"niag2_vis\" 6\n   (and (eq_attr \"cpu\" \"niagara2,niagara3\")\n-    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist\"))\n+    (eq_attr \"type\" \"fga,fgm_pack,fgm_mul,fgm_cmp,fgm_pdist,edge\"))\n   \"niag2_pipe*6\")"}, {"sha": "7e124a0eb15cc60e9ab37be8705c0cd4f0e23185", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d", "patch": "@@ -9169,6 +9169,20 @@ sparc_vis_init_builtins (void)\n   /* Pixel distance.  */\n   def_builtin (\"__builtin_vis_pdist\", CODE_FOR_pdist_vis,\n \t       di_ftype_v8qi_v8qi_di);\n+\n+  /* Edge handling.  */\n+  def_builtin (\"__builtin_vis_edge8\", CODE_FOR_edge8_vis,\n+               di_ftype_di_di);\n+  def_builtin (\"__builtin_vis_edge8l\", CODE_FOR_edge8l_vis,\n+               di_ftype_di_di);\n+  def_builtin (\"__builtin_vis_edge16\", CODE_FOR_edge16_vis,\n+               di_ftype_di_di);\n+  def_builtin (\"__builtin_vis_edge16l\", CODE_FOR_edge16l_vis,\n+               di_ftype_di_di);\n+  def_builtin (\"__builtin_vis_edge32\", CODE_FOR_edge32_vis,\n+               di_ftype_di_di);\n+  def_builtin (\"__builtin_vis_edge32l\", CODE_FOR_edge32l_vis,\n+               di_ftype_di_di);\n }\n \n /* Handle TARGET_EXPAND_BUILTIN target hook."}, {"sha": "483dea13dbca6a66afb8fd73efc000eb29bd1193", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 75, "deletions": 1, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d", "patch": "@@ -60,6 +60,12 @@\n    (UNSPEC_ALIGNDATA\t\t48)\n    (UNSPEC_ALIGNADDR\t\t49)\n    (UNSPEC_PDIST\t\t50)\n+   (UNSPEC_EDGE8\t\t51)\n+   (UNSPEC_EDGE8L\t\t52)\n+   (UNSPEC_EDGE16\t\t53)\n+   (UNSPEC_EDGE16L\t\t54)\n+   (UNSPEC_EDGE32\t\t55)\n+   (UNSPEC_EDGE32L\t\t56)\n \n    (UNSPEC_SP_SET\t\t60)\n    (UNSPEC_SP_TEST\t\t61)\n@@ -142,7 +148,7 @@\n    fpcmp,\n    fpmul,fpdivs,fpdivd,\n    fpsqrts,fpsqrtd,\n-   fga,fgm_pack,fgm_mul,fgm_pdist,fgm_cmp,\n+   fga,fgm_pack,fgm_mul,fgm_pdist,fgm_cmp,edge,\n    cmove,\n    ialuX,\n    multi,savew,flushw,iflush,trap\"\n@@ -7803,4 +7809,72 @@\n   [(set_attr \"type\" \"fga\")\n    (set_attr \"fptype\" \"double\")])\n \n+;; Edge instructions produce condition codes equivalent to a 'subcc'\n+;; with the same operands.\n+(define_insn \"edge8_vis\"\n+  [(set (reg:CCX_NOOV 100)\n+        (compare:CCX_NOOV (minus:DI (match_operand:DI 1 \"register_operand\" \"rJ\")\n+\t\t\t  \t    (match_operand:DI 2 \"register_operand\" \"rJ\"))\n+\t\t\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE8))]\n+  \"TARGET_VIS\"\n+  \"edge8\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"edge\")])\n+\n+(define_insn \"edge8l_vis\"\n+  [(set (reg:CCX_NOOV 100)\n+        (compare:CCX_NOOV (minus:DI (match_operand:DI 1 \"register_operand\" \"rJ\")\n+\t\t\t  \t    (match_operand:DI 2 \"register_operand\" \"rJ\"))\n+\t\t\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE8L))]\n+  \"TARGET_VIS\"\n+  \"edge8l\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"edge\")])\n+\n+(define_insn \"edge16_vis\"\n+  [(set (reg:CCX_NOOV 100)\n+        (compare:CCX_NOOV (minus:DI (match_operand:DI 1 \"register_operand\" \"rJ\")\n+\t\t\t  \t    (match_operand:DI 2 \"register_operand\" \"rJ\"))\n+\t\t\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE16))]\n+  \"TARGET_VIS\"\n+  \"edge16\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"edge\")])\n+\n+(define_insn \"edge16l_vis\"\n+  [(set (reg:CCX_NOOV 100)\n+        (compare:CCX_NOOV (minus:DI (match_operand:DI 1 \"register_operand\" \"rJ\")\n+\t\t\t  \t    (match_operand:DI 2 \"register_operand\" \"rJ\"))\n+\t\t\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE16L))]\n+  \"TARGET_VIS\"\n+  \"edge16l\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"edge\")])\n+\n+(define_insn \"edge32_vis\"\n+  [(set (reg:CCX_NOOV 100)\n+        (compare:CCX_NOOV (minus:DI (match_operand:DI 1 \"register_operand\" \"rJ\")\n+\t\t\t  \t    (match_operand:DI 2 \"register_operand\" \"rJ\"))\n+\t\t\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE32))]\n+  \"TARGET_VIS\"\n+  \"edge32\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"edge\")])\n+\n+(define_insn \"edge32l_vis\"\n+  [(set (reg:CCX_NOOV 100)\n+        (compare:CCX_NOOV (minus:DI (match_operand:DI 1 \"register_operand\" \"rJ\")\n+\t\t\t  \t    (match_operand:DI 2 \"register_operand\" \"rJ\"))\n+\t\t\t  (const_int 0)))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_EDGE32L))]\n+  \"TARGET_VIS\"\n+  \"edge32l\\t%r1, %r2, %0\"\n+  [(set_attr \"type\" \"edge\")])\n+\n (include \"sync.md\")"}, {"sha": "a24cb81aef2cbc85cc898880cd9d886a35b334a3", "filename": "gcc/config/sparc/ultra1_2.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fconfig%2Fsparc%2Fultra1_2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fconfig%2Fsparc%2Fultra1_2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fultra1_2.md?ref=b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d", "patch": "@@ -94,7 +94,7 @@\n \n (define_insn_reservation \"us1_simple_ieu1\" 1\n   (and (eq_attr \"cpu\" \"ultrasparc\")\n-    (eq_attr \"type\" \"compare\"))\n+    (eq_attr \"type\" \"compare,edge\"))\n   \"us1_ieu1 + us1_slot012\")\n \n (define_insn_reservation \"us1_ialuX\" 1"}, {"sha": "d438812683f03debfd5861193563dbee62efe855", "filename": "gcc/config/sparc/ultra3.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fconfig%2Fsparc%2Fultra3.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fconfig%2Fsparc%2Fultra3.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fultra3.md?ref=b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d", "patch": "@@ -36,7 +36,7 @@\n \n (define_insn_reservation \"us3_single\" 1\n   (and (eq_attr \"cpu\" \"ultrasparc3\")\n-    (eq_attr \"type\" \"multi,savew,flushw,iflush,trap\"))\n+    (eq_attr \"type\" \"multi,savew,flushw,iflush,trap,edge\"))\n   \"us3_single_issue\")\n \n (define_insn_reservation \"us3_integer\" 1"}, {"sha": "25d7bab9b1e75a21f47a1fcead00c02cbfc1b270", "filename": "gcc/config/sparc/visintrin.h", "status": "modified", "additions": 55, "deletions": 13, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvisintrin.h?ref=b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d", "patch": "@@ -27,8 +27,8 @@\n typedef int __v2si __attribute__ ((__vector_size__ (8)));\n typedef short __v4hi __attribute__ ((__vector_size__ (8)));\n typedef short __v2hi __attribute__ ((__vector_size__ (4)));\n-typedef char __v8qi __attribute__ ((__vector_size__ (8)));\n-typedef char __v4qi __attribute__ ((__vector_size__ (4)));\n+typedef unsigned char __v8qi __attribute__ ((__vector_size__ (8)));\n+typedef unsigned char __v4qi __attribute__ ((__vector_size__ (4)));\n typedef int __i64 __attribute__ ((__mode__ (DI)));\n \n extern __inline void *\n@@ -40,30 +40,30 @@ __vis_alignaddr (void *__A, long __B)\n \n extern __inline __i64\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-__vis_faligndatadi (__i64 __A)\n+__vis_faligndatadi (__i64 __A, __i64 __B)\n {\n-  return __builtin_vis_faligndatadi (__A);\n+  return __builtin_vis_faligndatadi (__A, __B);\n }\n \n extern __inline __v2si\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-__vis_faligndatav2si (__v2si __A)\n+__vis_faligndatav2si (__v2si __A, __v2si __B)\n {\n-  return __builtin_vis_faligndatav2si (__A);\n+  return __builtin_vis_faligndatav2si (__A, __B);\n }\n \n extern __inline __v4hi\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-__vis_faligndatav4hi (__v4hi __A)\n+__vis_faligndatav4hi (__v4hi __A, __v4hi __B)\n {\n-  return __builtin_vis_faligndatav4hi (__A);\n+  return __builtin_vis_faligndatav4hi (__A, __B);\n }\n \n extern __inline __v8qi\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-__vis_faligndatav8qi (__v8qi __A)\n+__vis_faligndatav8qi (__v8qi __A, __v8qi __B)\n {\n-  return __builtin_vis_faligndatav8qi (__A);\n+  return __builtin_vis_faligndatav8qi (__A, __B);\n }\n \n extern __inline __v4hi\n@@ -82,14 +82,14 @@ __vis_fmul8x16 (__v4qi __A, __v4hi __B)\n \n extern __inline __v4hi\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-__vis_fmul8x16au (__v4qi __A, __v4hi __B)\n+__vis_fmul8x16au (__v4qi __A, __v2hi __B)\n {\n   return __builtin_vis_fmul8x16au (__A, __B);\n }\n \n extern __inline __v4hi\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-__vis_fmul8x16al (__v4qi __A, __v4hi __B)\n+__vis_fmul8x16al (__v4qi __A, __v2hi __B)\n {\n   return __builtin_vis_fmul8x16al (__A, __B);\n }\n@@ -131,7 +131,7 @@ __vis_fpack16 (__v4hi __A)\n \n extern __inline __v8qi\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n-__vis_fpack32 (__v2si __A, __v2si __B)\n+__vis_fpack32 (__v2si __A, __v8qi __B)\n {\n   return __builtin_vis_fpack32 (__A, __B);\n }\n@@ -157,4 +157,46 @@ __vis_pdist (__v8qi __A, __v8qi __B, __i64 __C)\n   return __builtin_vis_pdist (__A, __B, __C);\n }\n \n+extern __inline __i64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_edge8 (__i64 __A, __i64 __B)\n+{\n+  return __builtin_vis_edge8 (__A, __B);\n+}\n+\n+extern __inline __i64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_edge8l (__i64 __A, __i64 __B)\n+{\n+  return __builtin_vis_edge8l (__A, __B);\n+}\n+\n+extern __inline __i64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_edge16 (__i64 __A, __i64 __B)\n+{\n+  return __builtin_vis_edge16 (__A, __B);\n+}\n+\n+extern __inline __i64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_edge16l (__i64 __A, __i64 __B)\n+{\n+  return __builtin_vis_edge16l (__A, __B);\n+}\n+\n+extern __inline __i64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_edge32 (__i64 __A, __i64 __B)\n+{\n+  return __builtin_vis_edge32 (__A, __B);\n+}\n+\n+extern __inline __i64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_edge32l (__i64 __A, __i64 __B)\n+{\n+  return __builtin_vis_edge32l (__A, __B);\n+}\n+\n #endif  /* _VISINTRIN_H_INCLUDED */"}, {"sha": "75f4874ad1fba4dfd932ce8eb64e1caa39d44014", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b1e4f4dd5c95bba5b1bd9019135c2133d9a53f3d", "patch": "@@ -12957,6 +12957,13 @@ v2hi __builtin_vis_fpackfix (v2si);\n v8qi __builtin_vis_fpmerge (v4qi, v4qi);\n \n int64_t __builtin_vis_pdist (v8qi, v8qi, int64_t);\n+\n+int64_t __builtin_vis_edge8 (int64_t, int64_t);\n+int64_t __builtin_vis_edge8l (int64_t, int64_t);\n+int64_t __builtin_vis_edge16 (int64_t, int64_t);\n+int64_t __builtin_vis_edge16l (int64_t, int64_t);\n+int64_t __builtin_vis_edge32 (int64_t, int64_t);\n+int64_t __builtin_vis_edge32l (int64_t, int64_t);\n @end smallexample\n \n @node SPU Built-in Functions"}]}