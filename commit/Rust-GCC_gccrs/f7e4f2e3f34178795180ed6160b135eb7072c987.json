{"sha": "f7e4f2e3f34178795180ed6160b135eb7072c987", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdlNGYyZTNmMzQxNzg3OTUxODBlZDYxNjBiMTM1ZWI3MDcyYzk4Nw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-06-13T17:14:42Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-06-13T17:14:42Z"}, "message": "C: fixits for named initializers\n\ngcc/c/ChangeLog:\n\t* c-parser.c (c_parser_initelt): Provide location of name for new\n\tlocation_t param of set_init_label.\n\t* c-tree.h (set_init_label): Add location_t param.\n\t* c-typeck.c (set_init_index): Add \"fieldname_loc\" location_t\n\tparam and use it when issuing error messages about unrecognized\n\tfield names.  Attempt to provide a fixit hint if appropriate,\n\totherwise update the error message to provide the type name.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/c99-init-2.c (c): Update expected error message.\n\t* gcc.dg/init-bad-8.c (foo): Likewise.\n\t* gcc.dg/spellcheck-fields-3.c: New test case.\n\nFrom-SVN: r237387", "tree": {"sha": "2eb2383fe9349016fa39c6cb44fb770d7da1cc4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2eb2383fe9349016fa39c6cb44fb770d7da1cc4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7e4f2e3f34178795180ed6160b135eb7072c987", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e4f2e3f34178795180ed6160b135eb7072c987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7e4f2e3f34178795180ed6160b135eb7072c987", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e4f2e3f34178795180ed6160b135eb7072c987/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a0fa907139874e1c08f35a9de900548597a3e1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0fa907139874e1c08f35a9de900548597a3e1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a0fa907139874e1c08f35a9de900548597a3e1b"}], "stats": {"total": 111, "additions": 106, "deletions": 5}, "files": [{"sha": "08fc250f79a1fa23749f3d091db62072ae353919", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=f7e4f2e3f34178795180ed6160b135eb7072c987", "patch": "@@ -1,3 +1,13 @@\n+2016-06-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-parser.c (c_parser_initelt): Provide location of name for new\n+\tlocation_t param of set_init_label.\n+\t* c-tree.h (set_init_label): Add location_t param.\n+\t* c-typeck.c (set_init_index): Add \"fieldname_loc\" location_t\n+\tparam and use it when issuing error messages about unrecognized\n+\tfield names.  Attempt to provide a fixit hint if appropriate,\n+\totherwise update the error message to provide the type name.\n+\n 2016-06-10  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR c/71381"}, {"sha": "ff32479685e517c9ab5c31324b8d4f3bb12bad97", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=f7e4f2e3f34178795180ed6160b135eb7072c987", "patch": "@@ -4397,6 +4397,7 @@ c_parser_initelt (c_parser *parser, struct obstack * braced_init_obstack)\n       /* Old-style structure member designator.  */\n       set_init_label (c_parser_peek_token (parser)->location,\n \t\t      c_parser_peek_token (parser)->value,\n+\t\t      c_parser_peek_token (parser)->location,\n \t\t      braced_init_obstack);\n       /* Use the colon as the error location.  */\n       pedwarn (c_parser_peek_2nd_token (parser)->location, OPT_Wpedantic,\n@@ -4426,6 +4427,7 @@ c_parser_initelt (c_parser *parser, struct obstack * braced_init_obstack)\n \t      if (c_parser_next_token_is (parser, CPP_NAME))\n \t\t{\n \t\t  set_init_label (des_loc, c_parser_peek_token (parser)->value,\n+\t\t\t\t  c_parser_peek_token (parser)->location,\n \t\t\t\t  braced_init_obstack);\n \t\t  c_parser_consume_token (parser);\n \t\t}"}, {"sha": "8f10a13f763795d5ed6b3837572d66334ecf534d", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=f7e4f2e3f34178795180ed6160b135eb7072c987", "patch": "@@ -639,7 +639,7 @@ extern void finish_implicit_inits (location_t, struct obstack *);\n extern void push_init_level (location_t, int, struct obstack *);\n extern struct c_expr pop_init_level (location_t, int, struct obstack *);\n extern void set_init_index (location_t, tree, tree, struct obstack *);\n-extern void set_init_label (location_t, tree, struct obstack *);\n+extern void set_init_label (location_t, tree, location_t, struct obstack *);\n extern void process_init_element (location_t, struct c_expr, bool,\n \t\t\t\t  struct obstack *);\n extern tree build_compound_literal (location_t, tree, tree, bool);"}, {"sha": "ea04d5eed76d719d39db217d2ab74808b766e0a9", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=f7e4f2e3f34178795180ed6160b135eb7072c987", "patch": "@@ -8211,7 +8211,7 @@ set_init_index (location_t loc, tree first, tree last,\n /* Within a struct initializer, specify the next field to be initialized.  */\n \n void\n-set_init_label (location_t loc, tree fieldname,\n+set_init_label (location_t loc, tree fieldname, location_t fieldname_loc,\n \t\tstruct obstack *braced_init_obstack)\n {\n   tree field;\n@@ -8230,7 +8230,24 @@ set_init_label (location_t loc, tree fieldname,\n   field = lookup_field (constructor_type, fieldname);\n \n   if (field == 0)\n-    error_at (loc, \"unknown field %qE specified in initializer\", fieldname);\n+    {\n+      tree guessed_id = lookup_field_fuzzy (constructor_type, fieldname);\n+      if (guessed_id)\n+\t{\n+\t  rich_location rich_loc (line_table, fieldname_loc);\n+\t  source_range component_range =\n+\t    get_range_from_loc (line_table, fieldname_loc);\n+\t  rich_loc.add_fixit_replace (component_range,\n+\t\t\t\t      IDENTIFIER_POINTER (guessed_id));\n+\t  error_at_rich_loc\n+\t    (&rich_loc,\n+\t     \"%qT has no member named %qE; did you mean %qE?\",\n+\t     constructor_type, fieldname, guessed_id);\n+\t}\n+      else\n+\terror_at (fieldname_loc, \"%qT has no member named %qE\",\n+\t\t  constructor_type, fieldname);\n+    }\n   else\n     do\n       {"}, {"sha": "878dfe021978391e39032a99a1ed8c47098519ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7e4f2e3f34178795180ed6160b135eb7072c987", "patch": "@@ -1,3 +1,9 @@\n+2016-06-13  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/c99-init-2.c (c): Update expected error message.\n+\t* gcc.dg/init-bad-8.c (foo): Likewise.\n+\t* gcc.dg/spellcheck-fields-3.c: New test case.\n+\n 2016-06-13  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/predict-1.c: Distinguish between \"loop iv compare\""}, {"sha": "c07005be249d7c4e3e8a256cc88cf7c4fe6e46be", "filename": "gcc/testsuite/gcc.dg/c99-init-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-init-2.c?ref=f7e4f2e3f34178795180ed6160b135eb7072c987", "patch": "@@ -9,7 +9,7 @@ typedef struct {\n } A;\n A a = { [2] = 1 };\t\t\t/* { dg-error \"(array index in non-array)|(near initialization)\" } */\n int b[] = { .B = 1 };\t\t\t/* { dg-error \"(field name not in record)|(near initialization)\" } */\n-A c[] = { [0].D = 1 };\t\t\t/* { dg-error \"unknown field\" } */\n+A c[] = { [0].D = 1 };\t\t\t/* { dg-error \"15: has no member named .D.\" } */\n int d;\n int e = { d++ };\t\t\t/* { dg-error \"(is not constant)|(near initialization)\" } */\n A f[2] = { [0].C[0] = 1, [2] = { 2, { 1, 2 } } };/* { dg-error \"(array index in initializer exceeds array bounds)|(near initialization)\" } */"}, {"sha": "f7b0f7f688651a47dee4888a48446d652b8d372a", "filename": "gcc/testsuite/gcc.dg/init-bad-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-bad-8.c?ref=f7e4f2e3f34178795180ed6160b135eb7072c987", "patch": "@@ -6,5 +6,5 @@ struct S { int i, j, k; };\n void\n foo (void)\n {\n-  struct S s = { .i = 1, .j = 2, .l = 4}; /* { dg-error \"34:unknown field .l. specified in initializer\" } */\n+  struct S s = { .i = 1, .j = 2, .l = 4}; /* { dg-error \"35: .struct S. has no member named .l.\" } */\n }"}, {"sha": "003a0b5ea26611d828f2736d7380d5b49609bfb7", "filename": "gcc/testsuite/gcc.dg/spellcheck-fields-3.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-fields-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e4f2e3f34178795180ed6160b135eb7072c987/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-fields-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-fields-3.c?ref=f7e4f2e3f34178795180ed6160b135eb7072c987", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdiagnostics-show-caret -std=c99\" } */\n+\n+/* Tests of incorrect name initializers.\n+   Verify that we get underlines and, where appropriate, fixit hints.  */\n+\n+struct foo\n+{\n+  int foo;\n+  int bar;\n+};\n+\n+union u\n+{\n+  int color;\n+  int shape;\n+};\n+\n+/* Old-style named initializers.  */\n+\n+struct foo old_style_f = {\n+ foa: 1, /* { dg-error \".struct foo. has no member named .foa.; did you mean .foo.\" } */\n+/* { dg-begin-multiline-output \"\" }\n+  foa: 1,\n+  ^~~\n+  foo\n+   { dg-end-multiline-output \"\" } */\n+\n+ this_does_not_match: 3 /* { dg-error \".struct foo. has no member named .this_does_not_match.\" } */\n+\n+/* { dg-begin-multiline-output \"\" }\n+  this_does_not_match: 3\n+  ^~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+};\n+\n+union u old_style_u = { colour: 3 }; /* { dg-error \".union u. has no member named .colour.; did you mean .color.?\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ union u old_style_u = { colour: 3 };\n+                         ^~~~~~\n+                         color\n+   { dg-end-multiline-output \"\" } */\n+\n+/* C99-style named initializers.  */\n+\n+struct foo c99_style_f = {\n+  .foa = 1, /* { dg-error \".struct foo. has no member named .foa.; did you mean .foo.\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   .foa = 1,\n+    ^~~\n+    foo\n+   { dg-end-multiline-output \"\" } */\n+\n+  .this_does_not_match = 3 /* { dg-error \".struct foo. has no member named .this_does_not_match.\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   .this_does_not_match = 3\n+    ^~~~~~~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+};\n+\n+union u c99_style_u = { .colour=3 }; /* { dg-error \".union u. has no member named .colour.; did you mean .color.?\" } */\n+/* { dg-begin-multiline-output \"\" }\n+ union u c99_style_u = { .colour=3 };\n+                          ^~~~~~\n+                          color\n+   { dg-end-multiline-output \"\" } */"}]}