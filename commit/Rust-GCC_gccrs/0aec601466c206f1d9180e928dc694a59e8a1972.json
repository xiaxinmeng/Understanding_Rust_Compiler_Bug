{"sha": "0aec601466c206f1d9180e928dc694a59e8a1972", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFlYzYwMTQ2NmMyMDZmMWQ5MTgwZTkyOGRjNjk0YTU5ZThhMTk3Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-12-15T12:30:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-12-15T12:30:46Z"}, "message": "re PR other/18665 (-ftrapv borks up simple integer arithmetic)\n\n\tPR other/18665\n\t* libgcc-std.ver (GCC_3.4.4): Inherit from GCC_3.4.2.\n\tExport __absvti2, __addvti3, __mulvti3, __negvti2 and __subvti3.\n\t* libgcc2.c (__addvsi3): Rename to __addvSI3.\n\tNew version if COMPAT_SIMODE_TRAPPING_ARITHMETIC.\n\t(__addvdi3): Rename to __addvDI3.\n\t(__subvsi3): Rename to __subvSI3.  Use word type for the result.\n\tNew version if COMPAT_SIMODE_TRAPPING_ARITHMETIC.\n\t(__subvdi3): Rename to __subvDI3.\n\t(_mulvsi3): Rename to _mulvSI3.\n\tNew version if COMPAT_SIMODE_TRAPPING_ARITHMETIC.\n\t(_mulvdi3): Rename to _mulvDI3.\n\t(__negvsi2): Rename to __negvSI2.\n\tNew version if COMPAT_SIMODE_TRAPPING_ARITHMETIC.\n\t(__negvdi2): Rename to __negvDI2.\n\t(__absvsi2): Rename to __absvSI2.\n\tNew version if COMPAT_SIMODE_TRAPPING_ARITHMETIC.\n\t(__absvdi2): Rename to __absvDI2.\n\t* libgcc2.h (64-bit targets): Define COMPAT_SIMODE_TRAPPING_ARITHMETIC.\n\t(__absvSI2, __addvSI3, __subvSI3, __mulvSI3, __negvSI2, __absvDI2,\n\t__addvDI3, __subvDI3, __mulvDI3, __negvDI2): Define to the appropriate\n\tsymbol and declare.\n\t(__absvsi2, __addvsi3, __subvsi3, __mulvsi3, __negvsi2): Declare if\n\tCOMPAT_SIMODE_TRAPPING_ARITHMETIC.\n\nFrom-SVN: r92187", "tree": {"sha": "a698a04e69a5f69e0c6f90b595a9fd86164c143d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a698a04e69a5f69e0c6f90b595a9fd86164c143d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0aec601466c206f1d9180e928dc694a59e8a1972", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aec601466c206f1d9180e928dc694a59e8a1972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aec601466c206f1d9180e928dc694a59e8a1972", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aec601466c206f1d9180e928dc694a59e8a1972/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c331bf080274e520ae3ac9238c73625c9981dedc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c331bf080274e520ae3ac9238c73625c9981dedc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c331bf080274e520ae3ac9238c73625c9981dedc"}], "stats": {"total": 264, "additions": 242, "deletions": 22}, "files": [{"sha": "db68ea6ef94ef96f0c51403e876e2057b0e40fbd", "filename": "gcc/libgcc-std.ver", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aec601466c206f1d9180e928dc694a59e8a1972/gcc%2Flibgcc-std.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aec601466c206f1d9180e928dc694a59e8a1972/gcc%2Flibgcc-std.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc-std.ver?ref=0aec601466c206f1d9180e928dc694a59e8a1972", "patch": "@@ -223,3 +223,13 @@ GCC_3.4.2 {\n   __enable_execute_stack\n   __trampoline_setup\n }\n+\n+%inherit GCC_3.4.4 GCC_3.4.2\n+GCC_3.4.4 {\n+  # libgcc2 TImode arithmetic (for 64-bit targets).\n+  __absvti2\n+  __addvti3\n+  __mulvti3\n+  __negvti2\n+  __subvti3\n+}"}, {"sha": "1b1455d5d8d785870a71c8ccd621dc9ff8d8cbef", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 81, "deletions": 12, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aec601466c206f1d9180e928dc694a59e8a1972/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aec601466c206f1d9180e928dc694a59e8a1972/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=0aec601466c206f1d9180e928dc694a59e8a1972", "patch": "@@ -73,7 +73,7 @@ __negdi2 (DWtype u)\n \n #ifdef L_addvsi3\n Wtype\n-__addvsi3 (Wtype a, Wtype b)\n+__addvSI3 (Wtype a, Wtype b)\n {\n   const Wtype w = a + b;\n \n@@ -82,11 +82,23 @@ __addvsi3 (Wtype a, Wtype b)\n \n   return w;\n }\n+#ifdef COMPAT_SIMODE_TRAPPING_ARITHMETIC\n+SItype\n+__addvsi3 (SItype a, SItype b)\n+{\n+  const SItype w = a + b;\n+\n+  if (b >= 0 ? w < a : w > a)\n+    abort ();\n+\n+  return w;\n+}\n+#endif /* COMPAT_SIMODE_TRAPPING_ARITHMETIC */\n #endif\n \f\n #ifdef L_addvdi3\n DWtype\n-__addvdi3 (DWtype a, DWtype b)\n+__addvDI3 (DWtype a, DWtype b)\n {\n   const DWtype w = a + b;\n \n@@ -99,20 +111,32 @@ __addvdi3 (DWtype a, DWtype b)\n \f\n #ifdef L_subvsi3\n Wtype\n-__subvsi3 (Wtype a, Wtype b)\n+__subvSI3 (Wtype a, Wtype b)\n {\n-  const DWtype w = a - b;\n+  const Wtype w = a - b;\n \n   if (b >= 0 ? w > a : w < a)\n     abort ();\n \n   return w;\n }\n+#ifdef COMPAT_SIMODE_TRAPPING_ARITHMETIC\n+SItype\n+__subvsi3 (SItype a, SItype b)\n+{\n+  const SItype w = a - b;\n+\n+  if (b >= 0 ? w > a : w < a)\n+    abort ();\n+\n+  return w;\n+}\n+#endif /* COMPAT_SIMODE_TRAPPING_ARITHMETIC */\n #endif\n \f\n #ifdef L_subvdi3\n DWtype\n-__subvdi3 (DWtype a, DWtype b)\n+__subvDI3 (DWtype a, DWtype b)\n {\n   const DWtype w = a - b;\n \n@@ -126,7 +150,7 @@ __subvdi3 (DWtype a, DWtype b)\n #ifdef L_mulvsi3\n #define WORD_SIZE (sizeof (Wtype) * BITS_PER_UNIT)\n Wtype\n-__mulvsi3 (Wtype a, Wtype b)\n+__mulvSI3 (Wtype a, Wtype b)\n {\n   const DWtype w = (DWtype) a * (DWtype) b;\n \n@@ -135,11 +159,25 @@ __mulvsi3 (Wtype a, Wtype b)\n \n   return w;\n }\n+#ifdef COMPAT_SIMODE_TRAPPING_ARITHMETIC\n+#undef WORD_SIZE\n+#define WORD_SIZE (sizeof (SItype) * BITS_PER_UNIT)\n+SItype\n+__mulvsi3 (SItype a, SItype b)\n+{\n+  const DItype w = (DItype) a * (DItype) b;\n+\n+  if ((SItype) (w >> WORD_SIZE) != (SItype) w >> (WORD_SIZE-1))\n+    abort ();\n+\n+  return w;\n+}\n+#endif /* COMPAT_SIMODE_TRAPPING_ARITHMETIC */\n #endif\n \f\n #ifdef L_negvsi2\n Wtype\n-__negvsi2 (Wtype a)\n+__negvSI2 (Wtype a)\n {\n   const Wtype w = -a;\n \n@@ -148,11 +186,23 @@ __negvsi2 (Wtype a)\n \n    return w;\n }\n+#ifdef COMPAT_SIMODE_TRAPPING_ARITHMETIC\n+SItype\n+__negvsi2 (SItype a)\n+{\n+  const SItype w = -a;\n+\n+  if (a >= 0 ? w > 0 : w < 0)\n+    abort ();\n+\n+   return w;\n+}\n+#endif /* COMPAT_SIMODE_TRAPPING_ARITHMETIC */\n #endif\n \f\n #ifdef L_negvdi2\n DWtype\n-__negvdi2 (DWtype a)\n+__negvDI2 (DWtype a)\n {\n   const DWtype w = -a;\n \n@@ -165,10 +215,28 @@ __negvdi2 (DWtype a)\n \f\n #ifdef L_absvsi2\n Wtype\n-__absvsi2 (Wtype a)\n+__absvSI2 (Wtype a)\n {\n   Wtype w = a;\n \n+  if (a < 0)\n+#ifdef L_negvsi2\n+    w = __negvSI2 (a);\n+#else\n+    w = -a;\n+\n+  if (w < 0)\n+    abort ();\n+#endif\n+\n+   return w;\n+}\n+#ifdef COMPAT_SIMODE_TRAPPING_ARITHMETIC\n+SItype\n+__absvsi2 (SItype a)\n+{\n+  SItype w = a;\n+\n   if (a < 0)\n #ifdef L_negvsi2\n     w = __negvsi2 (a);\n@@ -181,17 +249,18 @@ __absvsi2 (Wtype a)\n \n    return w;\n }\n+#endif /* COMPAT_SIMODE_TRAPPING_ARITHMETIC */\n #endif\n \f\n #ifdef L_absvdi2\n DWtype\n-__absvdi2 (DWtype a)\n+__absvDI2 (DWtype a)\n {\n   DWtype w = a;\n \n   if (a < 0)\n #ifdef L_negvdi2\n-    w = __negvdi2 (a);\n+    w = __negvDI2 (a);\n #else\n     w = -a;\n \n@@ -206,7 +275,7 @@ __absvdi2 (DWtype a)\n #ifdef L_mulvdi3\n #define WORD_SIZE (sizeof (Wtype) * BITS_PER_UNIT)\n DWtype\n-__mulvdi3 (DWtype u, DWtype v)\n+__mulvDI3 (DWtype u, DWtype v)\n {\n   /* The unchecked multiplication needs 3 Wtype x Wtype multiplications,\n      but the checked multiplication needs only two.  */"}, {"sha": "f6b8fa43aef382957c813851b2b5d46c5627fbb7", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 40, "deletions": 10, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aec601466c206f1d9180e928dc694a59e8a1972/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aec601466c206f1d9180e928dc694a59e8a1972/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=0aec601466c206f1d9180e928dc694a59e8a1972", "patch": "@@ -139,6 +139,16 @@ typedef int word_type __attribute__ ((mode (__word__)));\n #define float bogus_type\n #define double bogus_type\n \n+/* Versions prior to 3.4.4 were not taking into account the word size for\n+   the 5 trapping arithmetic functions absv, addv, subv, mulv and negv.  As\n+   a consequence, the si and di variants were always and the only ones emitted.\n+   To maintain backward compatibility, COMPAT_SIMODE_TRAPPING_ARITHMETIC is\n+   defined on platforms where it makes sense to still have the si variants\n+   emitted.  As a bonus, their implementation is now correct.  Note that the\n+   same mechanism should have been implemented for the di variants, but it\n+   turns out that no platform would define COMPAT_DIMODE_TRAPPING_ARITHMETIC\n+   if it existed.  */\n+\n #if MIN_UNITS_PER_WORD > 4\n #define W_TYPE_SIZE (8 * BITS_PER_UNIT)\n #define Wtype\tDItype\n@@ -149,6 +159,7 @@ typedef int word_type __attribute__ ((mode (__word__)));\n #define UDWtype\tUTItype\n #define __NW(a,b)\t__ ## a ## di ## b\n #define __NDW(a,b)\t__ ## a ## ti ## b\n+#define COMPAT_SIMODE_TRAPPING_ARITHMETIC\n #elif MIN_UNITS_PER_WORD > 2 \\\n       || (MIN_UNITS_PER_WORD > 1 && LONG_LONG_TYPE_SIZE > 32)\n #define W_TYPE_SIZE (4 * BITS_PER_UNIT)\n@@ -214,6 +225,17 @@ typedef int word_type __attribute__ ((mode (__word__)));\n #define __fixunsdfSI\t__NW(fixunsdf,)\n #define __fixunssfSI\t__NW(fixunssf,)\n \n+#define __absvSI2\t__NW(absv,2)\n+#define __addvSI3\t__NW(addv,3)\n+#define __subvSI3\t__NW(subv,3)\n+#define __mulvSI3\t__NW(mulv,3)\n+#define __negvSI2\t__NW(negv,2)\n+#define __absvDI2\t__NDW(absv,2)\n+#define __addvDI3\t__NDW(addv,3)\n+#define __subvDI3\t__NDW(subv,3)\n+#define __mulvDI3\t__NDW(mulv,3)\n+#define __negvDI2\t__NDW(negv,2)\n+\n #define __ffsSI2\t__NW(ffs,2)\n #define __clzSI2\t__NW(clz,2)\n #define __ctzSI2\t__NW(ctz,2)\n@@ -255,16 +277,24 @@ extern UWtype __udiv_w_sdiv (UWtype *, UWtype, UWtype, UWtype);\n extern word_type __cmpdi2 (DWtype, DWtype);\n extern word_type __ucmpdi2 (DWtype, DWtype);\n \n-extern Wtype __absvsi2 (Wtype);\n-extern DWtype __absvdi2 (DWtype);\n-extern Wtype __addvsi3 (Wtype, Wtype);\n-extern DWtype __addvdi3 (DWtype, DWtype);\n-extern Wtype __subvsi3 (Wtype, Wtype);\n-extern DWtype __subvdi3 (DWtype, DWtype);\n-extern Wtype __mulvsi3 (Wtype, Wtype);\n-extern DWtype __mulvdi3 (DWtype, DWtype);\n-extern Wtype __negvsi2 (Wtype);\n-extern DWtype __negvdi2 (DWtype);\n+extern Wtype __absvSI2 (Wtype);\n+extern Wtype __addvSI3 (Wtype, Wtype);\n+extern Wtype __subvSI3 (Wtype, Wtype);\n+extern Wtype __mulvSI3 (Wtype, Wtype);\n+extern Wtype __negvSI2 (Wtype);\n+extern DWtype __absvDI2 (DWtype);\n+extern DWtype __addvDI3 (DWtype, DWtype);\n+extern DWtype __subvDI3 (DWtype, DWtype);\n+extern DWtype __mulvDI3 (DWtype, DWtype);\n+extern DWtype __negvDI2 (DWtype);\n+\n+#ifdef COMPAT_SIMODE_TRAPPING_ARITHMETIC\n+extern SItype __absvsi2 (SItype);\n+extern SItype __addvsi3 (SItype, SItype);\n+extern SItype __subvsi3 (SItype, SItype);\n+extern SItype __mulvsi3 (SItype, SItype);\n+extern SItype __negvsi2 (SItype);\n+#endif /* COMPAT_SIMODE_TRAPPING_ARITHMETIC */\n \n #if BITS_PER_UNIT == 8\n extern DWtype __fixdfdi (DFtype);"}, {"sha": "37a59e22412099f5436ccf7450bd461f46a58851", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aec601466c206f1d9180e928dc694a59e8a1972/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aec601466c206f1d9180e928dc694a59e8a1972/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0aec601466c206f1d9180e928dc694a59e8a1972", "patch": "@@ -1,3 +1,7 @@\n+2004-12-15  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/ftrapv-2.c: New test.\n+\n 2004-12-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR 18981"}, {"sha": "de66129ba70aea27667c288b8117fba354393d6e", "filename": "gcc/testsuite/gcc.dg/ftrapv-2.c", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aec601466c206f1d9180e928dc694a59e8a1972/gcc%2Ftestsuite%2Fgcc.dg%2Fftrapv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aec601466c206f1d9180e928dc694a59e8a1972/gcc%2Ftestsuite%2Fgcc.dg%2Fftrapv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fftrapv-2.c?ref=0aec601466c206f1d9180e928dc694a59e8a1972", "patch": "@@ -0,0 +1,107 @@\n+/* Copyright (C) 2004 Free Software Foundation.\n+\n+   PR other/18665\n+   Verify that -ftrapv doesn't produce bogus results\n+   on 64-bit platforms.\n+\n+   Written by Eric Botcazou  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-ftrapv\" } */\n+\n+extern void abort(void);\n+\n+int __attribute__((noinline))\n+iabsv(int a)\n+{\n+  return abs(a);\n+}\n+\n+int __attribute__((noinline))\n+iaddv(int a, int b)\n+{\n+  return a + b;\n+}\n+\n+int __attribute__((noinline))\n+isubv(int a, int b)\n+{\n+  return a - b;\n+}\n+\n+int __attribute__((noinline))\n+imulv(int a, int b)\n+{\n+  return a * b;\n+}\n+\n+int __attribute__((noinline))\n+inegv(int a)\n+{\n+  return -a;\n+}\n+\n+long __attribute__((noinline))\n+labsv(long a)\n+{\n+  return abs(a);\n+}\n+\n+long __attribute__((noinline))\n+laddv(long a, long b)\n+{\n+  return a + b;\n+}\n+\n+long __attribute__((noinline))\n+lsubv(long a, long b)\n+{\n+  return a - b;\n+}\n+\n+long __attribute__((noinline))\n+lmulv(long a, long b)\n+{\n+  return a * b;\n+}\n+\n+long __attribute__((noinline))\n+lnegv(long a)\n+{\n+  return -a;\n+}\n+\n+int main(void)\n+{\n+  if (iabsv (-1) != 1)\n+    abort ();\n+\n+  if (iaddv (2,-3) != -1)\n+    abort ();\n+\n+  if (isubv (2,3) != -1)\n+    abort ();\n+\n+  if (imulv (-2,3) != -6)\n+    abort ();\n+\n+  if (inegv (-1) != 1)\n+    abort ();\n+\n+  if (labsv (-1L) != 1L)\n+    abort ();\n+\n+  if (laddv (2L,-3L) != -1L)\n+    abort ();\n+\n+  if (lsubv (2L,3L) != -1L)\n+    abort ();\n+\n+  if (lmulv (-2L,3L) != -6L)\n+    abort ();\n+\n+  if (lnegv (-1L) != 1L)\n+    abort ();\n+\n+  return 0;\n+}"}]}