{"sha": "2f77200b3f168ebf0b07acd63d68096d8840fc1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3NzIwMGIzZjE2OGViZjBiMDdhY2Q2M2Q2ODA5NmQ4ODQwZmMxZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2014-10-07T08:26:50Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2014-10-07T08:26:50Z"}, "message": "pr63270.h: New test.\n\n\t* g++.dg/lto/pr63270.h: New test.\n\t* g++.dg/lto/pr63270_0.C (int main): Implementation replaced with\n\tinclude.\n\t* g++.dg/lto/pr63270_2.C: New test.\n\nFrom-SVN: r215967", "tree": {"sha": "66b919e7fb4720ad67a3acf85ac367ae976ef6c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66b919e7fb4720ad67a3acf85ac367ae976ef6c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f77200b3f168ebf0b07acd63d68096d8840fc1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f77200b3f168ebf0b07acd63d68096d8840fc1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f77200b3f168ebf0b07acd63d68096d8840fc1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f77200b3f168ebf0b07acd63d68096d8840fc1d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a35c1ac710c0bbd03f00380179a375c45c81f08a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a35c1ac710c0bbd03f00380179a375c45c81f08a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a35c1ac710c0bbd03f00380179a375c45c81f08a"}], "stats": {"total": 148, "additions": 84, "deletions": 64}, "files": [{"sha": "cc757a02406ed6882da996377e4d0a73a197f363", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f77200b3f168ebf0b07acd63d68096d8840fc1d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f77200b3f168ebf0b07acd63d68096d8840fc1d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f77200b3f168ebf0b07acd63d68096d8840fc1d", "patch": "@@ -1,3 +1,10 @@\n+2014-10-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/lto/pr63270.h: New test.\n+\t* g++.dg/lto/pr63270_0.C (int main): Implementation replaced with\n+\tinclude.\n+\t* g++.dg/lto/pr63270_2.C: New test.\n+\n 2014-10-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/lto16.adb: New test."}, {"sha": "a0a0f58370c076465570a986406f5502e8a795cf", "filename": "gcc/testsuite/g++.dg/lto/pr63270.h", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f77200b3f168ebf0b07acd63d68096d8840fc1d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f77200b3f168ebf0b07acd63d68096d8840fc1d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270.h?ref=2f77200b3f168ebf0b07acd63d68096d8840fc1d", "patch": "@@ -0,0 +1,68 @@\n+typedef unsigned long uintptr_t;\n+namespace v8 {\n+class Extension;\n+namespace internal {\n+class A {\n+public:\n+  A(int) {};\n+};\n+class B {\n+public:\n+  B(int) {};\n+};\n+class Scanner;\n+class FuncNameInferrer;\n+template <typename Traits> class ParserBase : Traits {\n+  class FunctionState;\n+  bool parenthesized_function_;\n+  typename Traits::Type::Scope *scope_;\n+  FunctionState *function_state_;\n+  v8::Extension *extension_;\n+  FuncNameInferrer *fni_;\n+  Scanner *scanner_;\n+  uintptr_t stack_limit_;\n+  bool stack_overflow_;\n+  bool allow_lazy_;\n+  bool allow_natives_syntax_;\n+  bool allow_generators_;\n+  bool allow_for_of_;\n+  typename Traits::Type::Zone *zone_;\n+};\n+class PreParserScope;\n+class F;\n+class PreParserTraits {\n+public:\n+  struct Type {\n+    typedef PreParserScope Scope;\n+    typedef void Zone;\n+  };\n+\n+private:\n+  F *pre_parser_;\n+};\n+class F : ParserBase<PreParserTraits> {};\n+class C {\n+public:\n+  struct Type {\n+    typedef v8::internal::FuncNameInferrer Scope;\n+    typedef int Zone;\n+  };\n+};\n+class G : ParserBase<C> {\n+public:\n+  static int m_fn1();\n+  static int test();\n+  F reusable_preparser_;\n+};\n+class D {\n+public:\n+  D(int a) : function_(0), context_(0), nested_scope_chain_(0) { G::test(); }\n+  B function_;\n+  B context_;\n+  A nested_scope_chain_;\n+};\n+}\n+}\n+\n+\n+"}, {"sha": "924b238499aab0af9b6f438e69655be6d692b2ce", "filename": "gcc/testsuite/g++.dg/lto/pr63270_0.C", "status": "modified", "additions": 1, "deletions": 64, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f77200b3f168ebf0b07acd63d68096d8840fc1d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f77200b3f168ebf0b07acd63d68096d8840fc1d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270_0.C?ref=2f77200b3f168ebf0b07acd63d68096d8840fc1d", "patch": "@@ -1,70 +1,7 @@\n // { dg-lto-do link }\n // { dg-lto-options {{-flto -O2 -Wno-odr}} }\n-typedef unsigned long uintptr_t;\n-namespace v8 {\n-class Extension;\n-namespace internal {\n-class A {\n-public:\n-  A(int);\n-};\n-class B {\n-public:\n-  B(int);\n-};\n-class Scanner;\n-class FuncNameInferrer;\n-template <typename Traits> class ParserBase : Traits {\n-  class FunctionState;\n-  bool parenthesized_function_;\n-  typename Traits::Type::Scope *scope_;\n-  FunctionState *function_state_;\n-  v8::Extension *extension_;\n-  FuncNameInferrer *fni_;\n-  Scanner *scanner_;\n-  uintptr_t stack_limit_;\n-  bool stack_overflow_;\n-  bool allow_lazy_;\n-  bool allow_natives_syntax_;\n-  bool allow_generators_;\n-  bool allow_for_of_;\n-  typename Traits::Type::Zone *zone_;\n-};\n-class PreParserScope;\n-class F;\n-class PreParserTraits {\n-public:\n-  struct Type {\n-    typedef PreParserScope Scope;\n-    typedef void Zone;\n-  };\n \n-private:\n-  F *pre_parser_;\n-};\n-class F : ParserBase<PreParserTraits> {};\n-class C {\n-public:\n-  struct Type {\n-    typedef v8::internal::FuncNameInferrer Scope;\n-    typedef int Zone;\n-  };\n-};\n-class G : ParserBase<C> {\n-public:\n-  static int m_fn1();\n-  F reusable_preparser_;\n-};\n-class D {\n-public:\n-  D(int) : function_(0), context_(0), nested_scope_chain_(0) { G::m_fn1(); }\n-  B function_;\n-  B context_;\n-  A nested_scope_chain_;\n-};\n-void fn1() { D(0); }\n-}\n-}\n+#include \"pr63270.h\"\n \n int main()\n {"}, {"sha": "e45ae686028b296507f2788d843eb33f1620396f", "filename": "gcc/testsuite/g++.dg/lto/pr63270_2.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f77200b3f168ebf0b07acd63d68096d8840fc1d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f77200b3f168ebf0b07acd63d68096d8840fc1d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr63270_2.C?ref=2f77200b3f168ebf0b07acd63d68096d8840fc1d", "patch": "@@ -0,0 +1,8 @@\n+// { dg-options \"-fno-lto\" }\n+\n+#include \"pr63270.h\"\n+\n+int v8::internal::G::test()\n+{\n+  return 2;\n+}"}]}