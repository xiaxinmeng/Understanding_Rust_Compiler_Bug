{"sha": "92f59e47f5a468b96b12b15233a6729904b1a1ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJmNTllNDdmNWE0NjhiOTZiMTJiMTUyMzNhNjcyOTkwNGIxYTFlZQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2021-04-06T15:41:49Z"}, "committer": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2021-05-02T19:16:49Z"}, "message": "aix: Redesign section encoding and selection\n\nAIX symbol references can refer to either the symbol (a label) or a\nsymbol with a qualifier (the storage mapping class).  The storage mapping\nclass provide information about the underlying COFF section into which the\nsymbol will be placed, e.g. [RO] for read-only in the text section,\n[RW] for read-writer in the data section, or [BS] for the BSS section.\nA label is distinct from a qualname in the assembler language, e.g.,\nfoo and foo[RW] are different, but the symbol table of an object file strips\nthe storage mapping class from the name, so that it no longer is relevant\nwhen referring to symbols across object files and libraries.\n\n\t.csect .data[RW]\ni:\n\nis a label \"i\" in the .data CSECT, which has storage mapping class [RW]\nso that it is placed in the read-write COFF section.\n\n\t.csect i[RW]\n\nis a CSECT \"i[RW]\".  BSS does not allow interior labels.\n\nThe AIX port of GCC had been emitting the storage mapping class where\nappropriate but not consistently using the storage mapping class on\nthe DECL or SYM name.  This patch updates the section encoding to properly\nplace storage mapping class on symbol names and remove the decorations\nplaced when emitting the symbol.\n\nThe mapping classes correspond to sections and the encoding choices must\nexactly match the section choices made by get_section, so the logic for\nthe computation of reloc in get_variable_section is split into its own\nfunction that XCOFF encode section info can call.\n\ngcc/ChangeLog:\n\n\t* varasm.c (compute_reloc_for_var): Split out from...\n\t(get_variable_section): Use it.\n\t* output.h (compute_reloc_for_var): Declare.\n\t* config/rs6000/rs6000-protos.h\n\t(rs6000_xcoff_asm_output_aligned_decl_common): Change alignment to\n\tunsigned int.\n\t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address_aix):\n\tDon't append storage mapping class to symbol.\n\t(rs6000_xcoff_asm_named_section): Add BS and UL mapping classes.\n\tDon't convert TLS BSS to common.\n\t(rs6000_xcoff_unique_section): Don't fall back to select_secton.\n\t(rs6000_xcoff_section_type_flags): Add SECTION_BSS if DECL is\n\tbss_initializer.\n\t(rs6000_xcoff_asm_globalize_decl_name): Don't strip storage\n\tmapping class.\n\t(rs6000_xcoff_asm_output_aligned_decl_common): Align is unsigned int.\n\tIf align is 0 from TLS class, use the same rules as varasm.c\n\tIf not common, switch to BSS section manually.\n\tIf common, emit appropriate comm or lcomm directive.\n\t(rs6000_xcoff_encode_section_info): Add logic to append all\n\tstorage mapping classes.\n\t(rs6000_asm_weaken_decl): Adjust for qualname symbols.\n\t* config/rs6000/xcoff.h (ASM_OUTPUT_ALIGNED_DECL_LOCAL): Use\n\trs6000_xcoff_asm_output_aligned_decl_common.\n\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Use\n\trs6000_xcoff_asm_output_aligned_decl_common.\n\t(ASM_OUTPUT_TLS_COMMON): Use\n\trs6000_xcoff_asm_output_aligned_decl_common.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/ext/visibility/fvisibility-inlines-hidden-4.C: Expect [BS]\n\tmapping class on AIX.\n\t* gcc.c-torture/compile/pr61159.c: XFAIL on AIX.\n\t* gcc.c-torture/execute/alias-2.c: Same.\n\t* gcc.dg/alias-7.c: Same.", "tree": {"sha": "6387debcf41b07488ef0f6ef7707ecc130dbff26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6387debcf41b07488ef0f6ef7707ecc130dbff26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92f59e47f5a468b96b12b15233a6729904b1a1ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f59e47f5a468b96b12b15233a6729904b1a1ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92f59e47f5a468b96b12b15233a6729904b1a1ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92f59e47f5a468b96b12b15233a6729904b1a1ee/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a13a50047ef1814a7bda2392f728bf28f81b17ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a13a50047ef1814a7bda2392f728bf28f81b17ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a13a50047ef1814a7bda2392f728bf28f81b17ce"}], "stats": {"total": 243, "additions": 133, "deletions": 110}, "files": [{"sha": "bef727e0a64c5baae39ffd41d1c8090c128ff591", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=92f59e47f5a468b96b12b15233a6729904b1a1ee", "patch": "@@ -243,7 +243,7 @@ extern void rs6000_xcoff_declare_object_name (FILE *, const char *, tree);\n extern void rs6000_xcoff_asm_output_aligned_decl_common (FILE *, tree,\n \t\t\t\t\t\t\t const char *,\n \t\t\t\t\t\t\t unsigned HOST_WIDE_INT,\n-\t\t\t\t\t\t\t unsigned HOST_WIDE_INT);\n+\t\t\t\t\t\t\t unsigned int);\n extern void rs6000_elf_declare_function_name (FILE *, const char *, tree);\n extern bool rs6000_elf_in_small_data_p (const_tree);\n "}, {"sha": "0e9cf178245c7ce115bddabf43e9fc4ff4b2dea2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 98, "deletions": 62, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=92f59e47f5a468b96b12b15233a6729904b1a1ee", "patch": "@@ -9311,29 +9311,12 @@ rs6000_got_sym (void)\n static rtx\n rs6000_legitimize_tls_address_aix (rtx addr, enum tls_model model)\n {\n-  rtx sym, mem, tocref, tlsreg, tmpreg, dest, tlsaddr;\n+  rtx sym, mem, tocref, tlsreg, tmpreg, dest;\n   const char *name;\n   char *tlsname;\n \n-  name = XSTR (addr, 0);\n-  /* Append TLS CSECT qualifier, unless the symbol already is qualified\n-     or the symbol will be in TLS private data section.  */\n-  if (name[strlen (name) - 1] != ']'\n-      && (TREE_PUBLIC (SYMBOL_REF_DECL (addr))\n-\t  || bss_initializer_p (SYMBOL_REF_DECL (addr))))\n-    {\n-      tlsname = XALLOCAVEC (char, strlen (name) + 4);\n-      strcpy (tlsname, name);\n-      strcat (tlsname,\n-\t      bss_initializer_p (SYMBOL_REF_DECL (addr)) ? \"[UL]\" : \"[TL]\");\n-      tlsaddr = copy_rtx (addr);\n-      XSTR (tlsaddr, 0) = ggc_strdup (tlsname);\n-    }\n-  else\n-    tlsaddr = addr;\n-\n   /* Place addr into TOC constant pool.  */\n-  sym = force_const_mem (GET_MODE (tlsaddr), tlsaddr);\n+  sym = force_const_mem (GET_MODE (addr), addr);\n \n   /* Output the TOC entry and create the MEM referencing the value.  */\n   if (constant_pool_expr_p (XEXP (sym, 0))\n@@ -21238,10 +21221,11 @@ rs6000_xcoff_asm_named_section (const char *name, unsigned int flags,\n \t\t\t\ttree decl ATTRIBUTE_UNUSED)\n {\n   int smclass;\n-  static const char * const suffix[5] = { \"PR\", \"RO\", \"RW\", \"TL\", \"XO\" };\n+  static const char * const suffix[7]\n+    = { \"PR\", \"RO\", \"RW\", \"BS\", \"TL\", \"UL\", \"XO\" };\n \n   if (flags & SECTION_EXCLUDE)\n-    smclass = 4;\n+    smclass = 6;\n   else if (flags & SECTION_DEBUG)\n     {\n       fprintf (asm_out_file, \"\\t.dwsect %s\\n\", name);\n@@ -21250,9 +21234,19 @@ rs6000_xcoff_asm_named_section (const char *name, unsigned int flags,\n   else if (flags & SECTION_CODE)\n     smclass = 0;\n   else if (flags & SECTION_TLS)\n-    smclass = 3;\n+    {\n+      if (flags & SECTION_BSS)\n+\tsmclass = 5;\n+      else\n+\tsmclass = 4;\n+    }\n   else if (flags & SECTION_WRITE)\n-    smclass = 2;\n+    {\n+      if (flags & SECTION_BSS)\n+\tsmclass = 3;\n+      else\n+\tsmclass = 2;\n+    }\n   else\n     smclass = 1;\n \n@@ -21291,11 +21285,7 @@ rs6000_xcoff_select_section (tree decl, int reloc,\n       if (TREE_CODE (decl) == VAR_DECL && DECL_THREAD_LOCAL_P (decl))\n \t{\n \t  if (bss_initializer_p (decl))\n-\t    {\n-\t      /* Convert to COMMON to emit in BSS.  */\n-\t      DECL_COMMON (decl) = 1;\n-\t      return tls_comm_section;\n-\t    }\n+\t    return tls_comm_section;\n \t  else if (TREE_PUBLIC (decl))\n \t    return tls_data_section;\n \t  else\n@@ -21315,17 +21305,6 @@ rs6000_xcoff_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED)\n {\n   const char *name;\n \n-  /* Use select_section for private data and uninitialized data with\n-     alignment <= BIGGEST_ALIGNMENT.  */\n-  if (!TREE_PUBLIC (decl)\n-      || DECL_COMMON (decl)\n-      || (DECL_INITIAL (decl) == NULL_TREE\n-\t  && DECL_ALIGN (decl) <= BIGGEST_ALIGNMENT)\n-      || DECL_INITIAL (decl) == error_mark_node\n-      || (flag_zero_initialized_in_bss\n-\t  && initializer_zerop (DECL_INITIAL (decl))))\n-    return;\n-\n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n   name = (*targetm.strip_name_encoding) (name);\n   set_decl_section_name (decl, name);\n@@ -21370,6 +21349,9 @@ rs6000_xcoff_section_type_flags (tree decl, const char *name, int reloc)\n   unsigned int align;\n   unsigned int flags = default_section_type_flags (decl, name, reloc);\n \n+  if (decl && DECL_P (decl) && VAR_P (decl) && bss_initializer_p (decl))\n+    flags |= SECTION_BSS;\n+\n   /* Align to at least UNIT size.  */\n   if ((flags & SECTION_CODE) != 0 || !decl || !DECL_P (decl))\n     align = MIN_UNITS_PER_WORD;\n@@ -21632,7 +21614,7 @@ rs6000_xcoff_asm_globalize_decl_name (FILE *stream, tree decl)\n {\n   const char *name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n   fputs (GLOBAL_ASM_OP, stream);\n-  RS6000_OUTPUT_BASENAME (stream, name);\n+  assemble_name (stream, name);\n #ifdef HAVE_GAS_HIDDEN\n   fputs (rs6000_xcoff_visibility (decl), stream);\n #endif\n@@ -21647,27 +21629,50 @@ rs6000_xcoff_asm_output_aligned_decl_common (FILE *stream,\n \t\t\t\t\t     tree decl ATTRIBUTE_UNUSED,\n \t\t\t\t\t     const char *name,\n \t\t\t\t\t     unsigned HOST_WIDE_INT size,\n-\t\t\t\t\t     unsigned HOST_WIDE_INT align)\n+\t\t\t\t\t     unsigned int align)\n {\n-  unsigned HOST_WIDE_INT align2 = 2;\n+  unsigned int align2 = 2;\n+\n+  if (align == 0)\n+    align = DATA_ABI_ALIGNMENT (TREE_TYPE (decl), DECL_ALIGN (decl));\n \n   if (align > 32)\n     align2 = floor_log2 (align / BITS_PER_UNIT);\n   else if (size > 4)\n     align2 = 3;\n \n-  fputs (COMMON_ASM_OP, stream);\n-  RS6000_OUTPUT_BASENAME (stream, name);\n+  if (! DECL_COMMON (decl))\n+    {\n+      /* Forget section.  */\n+      in_section = NULL;\n+\n+      /* Globalize TLS BSS.  */\n+      if (TREE_PUBLIC (decl) && DECL_THREAD_LOCAL_P (decl))\n+\tfprintf (stream, \"\\t.globl %s\\n\", name);\n \n-  fprintf (stream,\n-\t   \",\" HOST_WIDE_INT_PRINT_UNSIGNED \",\" HOST_WIDE_INT_PRINT_UNSIGNED,\n-\t   size, align2);\n+      /* Switch to section and skip space.  */\n+      fprintf (stream, \"\\t.csect %s,%u\\n\", name, align2);\n+      ASM_DECLARE_OBJECT_NAME (stream, name, decl);\n+      ASM_OUTPUT_SKIP (stream, size ? size : 1);\n+      return;\n+    }\n+\n+  if (TREE_PUBLIC (decl))\n+    {\n+      fprintf (stream,\n+\t       \"\\t.comm %s,\" HOST_WIDE_INT_PRINT_UNSIGNED \",%u\" ,\n+\t       name, size, align2);\n \n #ifdef HAVE_GAS_HIDDEN\n-  if (decl != NULL)\n-    fputs (rs6000_xcoff_visibility (decl), stream);\n+      if (decl != NULL)\n+\tfputs (rs6000_xcoff_visibility (decl), stream);\n #endif\n-  putc ('\\n', stream);\n+      putc ('\\n', stream);\n+    }\n+  else\n+      fprintf (stream,\n+\t       \"\\t.lcomm %s,\" HOST_WIDE_INT_PRINT_UNSIGNED \",%s,%u\\n\",\n+\t       (*targetm.strip_name_encoding) (name), size, name, align2);\n }\n \n /* This macro produces the initial definition of a object (variable) name.\n@@ -21733,19 +21738,50 @@ rs6000_xcoff_encode_section_info (tree decl, rtx rtl, int first)\n \n   SYMBOL_REF_FLAGS (symbol) = flags;\n \n-  /* Append mapping class to extern decls.  */\n   symname = XSTR (symbol, 0);\n-  if (decl /* sync condition with assemble_external () */\n-      && DECL_P (decl) && DECL_EXTERNAL (decl) && TREE_PUBLIC (decl)\n-      && ((TREE_CODE (decl) == VAR_DECL && !DECL_THREAD_LOCAL_P (decl))\n-\t  || TREE_CODE (decl) == FUNCTION_DECL)\n+\n+  /* Append CSECT mapping class, unless the symbol already is qualified.  */\n+  if (decl\n+      && DECL_P (decl)\n+      && VAR_OR_FUNCTION_DECL_P (decl)\n+      && lookup_attribute (\"alias\", DECL_ATTRIBUTES (decl)) == NULL_TREE\n       && symname[strlen (symname) - 1] != ']')\n     {\n-      char *newname = (char *) alloca (strlen (symname) + 5);\n-      strcpy (newname, symname);\n-      strcat (newname, (TREE_CODE (decl) == FUNCTION_DECL\n-\t\t\t? \"[DS]\" : \"[UA]\"));\n-      XSTR (symbol, 0) = ggc_strdup (newname);\n+      const char *smclass = NULL;\n+\n+      if (TREE_CODE (decl) == FUNCTION_DECL)\n+\t{\n+\t  if (DECL_EXTERNAL (decl))\n+\t    smclass = \"[DS]\";\n+\t}\n+      else if (DECL_THREAD_LOCAL_P (decl))\n+\t{\n+\t  if (bss_initializer_p (decl))\n+\t    smclass = \"[UL]\";\n+\t  else if (flag_data_sections)\n+\t    smclass = \"[TL]\";\n+\t}\n+      else if (DECL_EXTERNAL (decl))\n+\tsmclass = \"[UA]\";\n+      else if (bss_initializer_p (decl))\n+\tsmclass = \"[BS]\";\n+      else if (flag_data_sections)\n+\t{\n+\t  /* This must exactly match the logic of select section.  */\n+\t  if (decl_readonly_section (decl, compute_reloc_for_var (decl)))\n+\t    smclass = \"[RO]\";\n+\t  else\n+\t    smclass = \"[RW]\";\n+\t}\n+\n+      if (smclass != NULL)\n+\t{\n+\t  char *newname = XALLOCAVEC (char, strlen (symname) + 5);\n+\n+\t  strcpy (newname, symname);\n+\t  strcat (newname, smclass);\n+\t  XSTR (symbol, 0) = ggc_strdup (newname);\n+\t}\n     }\n }\n #endif /* HAVE_AS_TLS */\n@@ -21756,11 +21792,11 @@ rs6000_asm_weaken_decl (FILE *stream, tree decl,\n \t\t\tconst char *name, const char *val)\n {\n   fputs (\"\\t.weak\\t\", stream);\n-  RS6000_OUTPUT_BASENAME (stream, name);\n+  assemble_name (stream, name);\n   if (decl && TREE_CODE (decl) == FUNCTION_DECL\n       && DEFAULT_ABI == ABI_AIX && DOT_SYMBOLS)\n     {\n-      if (TARGET_XCOFF)\t\t\t\t\t\t\n+      if (TARGET_XCOFF && name[strlen (name) - 1] != ']')\n \tfputs (\"[DS]\", stream);\n #if TARGET_XCOFF && HAVE_GAS_HIDDEN\n       if (TARGET_XCOFF)"}, {"sha": "5ba565f63bb93e7197f3cb6dd2050c3e690dc2fd", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 5, "deletions": 39, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=92f59e47f5a468b96b12b15233a6729904b1a1ee", "patch": "@@ -104,6 +104,8 @@\n #define TARGET_ENCODE_SECTION_INFO rs6000_xcoff_encode_section_info\n #endif\n #define ASM_OUTPUT_ALIGNED_DECL_COMMON  rs6000_xcoff_asm_output_aligned_decl_common\n+#define ASM_OUTPUT_ALIGNED_DECL_LOCAL  rs6000_xcoff_asm_output_aligned_decl_common\n+#define ASM_OUTPUT_ALIGNED_BSS  rs6000_xcoff_asm_output_aligned_decl_common\n \n /* FP save and restore routines.  */\n #define\tSAVE_FP_PREFIX \"._savef\"\n@@ -218,48 +220,12 @@\n    to define a global common symbol.  */\n \n #define COMMON_ASM_OP \"\\t.comm \"\n-\n-/* This says how to output an assembler line\n-   to define a local common symbol.\n-   The assembler in AIX 6.1 and later supports an alignment argument.\n-   For earlier releases of AIX, we try to maintain\n-   alignment after preceding TOC section if it was aligned\n-   for 64-bit mode.  */\n-\n #define LOCAL_COMMON_ASM_OP \"\\t.lcomm \"\n \n-#if TARGET_AIX_VERSION >= 61\n-#define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\\\n-  do { fputs (LOCAL_COMMON_ASM_OP, (FILE));\t\t\t\\\n-       RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\t\\\n-       if ((ALIGN) > 32)\t\t\t\t\t\\\n-\t fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%s%u_,%u\\n\",\t\\\n-\t\t  (SIZE), xcoff_bss_section_name,\t\t\t\\\n-\t\t  floor_log2 ((ALIGN) / BITS_PER_UNIT),\t\t\t\\\n-\t\t  floor_log2 ((ALIGN) / BITS_PER_UNIT));\t\t\\\n-       else if ((SIZE) > 4)\t\t\t\t\t\\\n-\t fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%s3_,3\\n\",\t\\\n-\t\t  (SIZE), xcoff_bss_section_name);\t\t\\\n-       else\t\t\t\t\t\t\t\\\n-\t fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%s,2\\n\",\t\\\n-\t\t  (SIZE), xcoff_bss_section_name);\t\t\\\n-     } while (0)\n-#endif\n-\n-#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n-  do { fputs (LOCAL_COMMON_ASM_OP, (FILE));\t\t\\\n-       RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\\\n-       fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%s\\n\", \\\n-\t\t(TARGET_32BIT ? (SIZE) : (ROUNDED)),\t\\\n-\t\txcoff_bss_section_name);\t\t\\\n-     } while (0)\n-\n #ifdef HAVE_AS_TLS\n-#define ASM_OUTPUT_TLS_COMMON(FILE, DECL, NAME, SIZE)\t\\\n-  do { fputs (COMMON_ASM_OP, (FILE));\t\t\t\\\n-       RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\\\n-       fprintf ((FILE), \"[UL],\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", \\\n-       (SIZE));\t\t\t\t\t\t\\\n+#define ASM_OUTPUT_TLS_COMMON(FILE, DECL, NAME, SIZE)   \\\n+  do { \\\n+       rs6000_xcoff_asm_output_aligned_decl_common ((FILE), (DECL), (NAME), (SIZE), 0); \\\n   } while (0)\n #endif\n "}, {"sha": "73ca4545f4f0b1f1dd22ca3572f6b868b4800c3b", "filename": "gcc/output.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=92f59e47f5a468b96b12b15233a6729904b1a1ee", "patch": "@@ -349,6 +349,9 @@ extern bool decl_readonly_section (const_tree, int);\n    given a constant expression.  */\n extern int compute_reloc_for_constant (tree);\n \n+/* This can be used to compute RELOC for get_variable_section.  */\n+extern int compute_reloc_for_var (tree);\n+\n /* User label prefix in effect for this compilation.  */\n extern const char *user_label_prefix;\n "}, {"sha": "0450af5c40c3a9a8ed8f5a4423dfc16cc38cf070", "filename": "gcc/testsuite/g++.dg/ext/visibility/fvisibility-inlines-hidden-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-inlines-hidden-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-inlines-hidden-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Ffvisibility-inlines-hidden-4.C?ref=92f59e47f5a468b96b12b15233a6729904b1a1ee", "patch": "@@ -6,7 +6,7 @@\n /* { dg-final { scan-not-hidden \"_ZZ3barvE1n\" } } */\n /* { dg-final { scan-not-hidden \"_Z3fooIiEvv\" } } */\n /* { dg-final { scan-hidden \"_Z3fooIvEvv\" } } */\n-/* { dg-final { scan-hidden \"_ZZN1A5innerEvE1n\" } } */\n+/* { dg-final { scan-hidden \"_ZZN1A5innerEvE1n(\\\\\\[BS\\\\\\])?\" } } */\n \n inline int * bar()\n {"}, {"sha": "dadd9c08444a2b1e95a8635ed76f625b07f495ea", "filename": "gcc/testsuite/gcc.c-torture/compile/pr61159.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr61159.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr61159.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr61159.c?ref=92f59e47f5a468b96b12b15233a6729904b1a1ee", "patch": "@@ -1,5 +1,6 @@\n /* { dg-require-alias \"\" } */\n /* { dg-require-weak \"\" } */\n+/* { dg-xfail-if \"weak alias\" { powerpc-ibm-aix* } } */\n \n static int dummy = 0;\n extern int foo __attribute__((__weak__, __alias__(\"dummy\")));"}, {"sha": "6aeb0c23e865dbdfacdac6dd5d3529d0a4aa441c", "filename": "gcc/testsuite/gcc.c-torture/execute/alias-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falias-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falias-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falias-2.c?ref=92f59e47f5a468b96b12b15233a6729904b1a1ee", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-alias \"\" } */\n+/* { dg-skip-if \"BSS alias\" { powerpc-ibm-aix* } } */\n int a[10]={};\n extern int b[10] __attribute__ ((alias(\"a\")));\n int off;"}, {"sha": "e0c24bd63a279a384a0330000b80552a7f67053c", "filename": "gcc/testsuite/gcc.dg/alias-7.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Ftestsuite%2Fgcc.dg%2Falias-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Ftestsuite%2Fgcc.dg%2Falias-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Falias-7.c?ref=92f59e47f5a468b96b12b15233a6729904b1a1ee", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run } */\n /* { dg-require-alias \"\" } */\n /* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"weak alias\" { powerpc-ibm-aix* } } */\n \n extern void abort (void);\n "}, {"sha": "97c1e6fff254fee778b0281a5642756e3819924e", "filename": "gcc/varasm.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92f59e47f5a468b96b12b15233a6729904b1a1ee/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=92f59e47f5a468b96b12b15233a6729904b1a1ee", "patch": "@@ -1202,6 +1202,25 @@ get_variable_align (tree decl)\n   return align;\n }\n \n+/* Compute reloc for get_variable_section.  The return value\n+   is a mask for which bit 1 indicates a global relocation, and bit 0\n+   indicates a local relocation.  */\n+\n+int\n+compute_reloc_for_var (tree decl)\n+{\n+  int reloc;\n+\n+  if (DECL_INITIAL (decl) == error_mark_node)\n+    reloc = contains_pointers_p (TREE_TYPE (decl)) ? 3 : 0;\n+  else if (DECL_INITIAL (decl))\n+    reloc = compute_reloc_for_constant (DECL_INITIAL (decl));\n+  else\n+    reloc = 0;\n+\n+  return reloc;\n+}\n+\n /* Return the section into which the given VAR_DECL or CONST_DECL\n    should be placed.  PREFER_NOSWITCH_P is true if a noswitch\n    section should be used wherever possible.  */\n@@ -1239,12 +1258,7 @@ get_variable_section (tree decl, bool prefer_noswitch_p)\n \treturn comm_section;\n     }\n \n-  if (DECL_INITIAL (decl) == error_mark_node)\n-    reloc = contains_pointers_p (TREE_TYPE (decl)) ? 3 : 0;\n-  else if (DECL_INITIAL (decl))\n-    reloc = compute_reloc_for_constant (DECL_INITIAL (decl));\n-  else\n-    reloc = 0;\n+  reloc = compute_reloc_for_var (decl);\n \n   resolve_unique_section (decl, reloc, flag_data_sections);\n   if (IN_NAMED_SECTION (decl))\n@@ -7252,7 +7266,8 @@ compute_reloc_for_rtx_1 (const_rtx x)\n \n /* Like compute_reloc_for_constant, except for an RTX.  The return value\n    is a mask for which bit 1 indicates a global relocation, and bit 0\n-   indicates a local relocation.  */\n+   indicates a local relocation.  Used by default_select_rtx_section\n+   and default_elf_select_rtx_section.  */\n \n static int\n compute_reloc_for_rtx (const_rtx x)"}]}