{"sha": "3afd2e20078216bf8c188d3d95326d92bfd0459f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FmZDJlMjAwNzgyMTZiZjhjMTg4ZDNkOTUzMjZkOTJiZmQwNDU5Zg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-09-15T14:48:29Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-09-15T14:48:29Z"}, "message": "re PR c++/12184 (ICE with trying to convert an incomplete type)\n\ncp:\n\tPR c++/12184\n\t* typeck.c (convert_arguments): Return error_mark_node for an\n\tincomplete parameter. Make error message more informative.\ntestsuite:\n\tPR c++/12184\n\t* g++.dg/expr/call2.C: New test.\n\nFrom-SVN: r71402", "tree": {"sha": "2561c593f7768837b808e9a8736bf10674dbc17c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2561c593f7768837b808e9a8736bf10674dbc17c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3afd2e20078216bf8c188d3d95326d92bfd0459f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3afd2e20078216bf8c188d3d95326d92bfd0459f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3afd2e20078216bf8c188d3d95326d92bfd0459f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3afd2e20078216bf8c188d3d95326d92bfd0459f/comments", "author": null, "committer": null, "parents": [{"sha": "2352184a1f8bf7d868be39e39c6dea68d8aa33a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2352184a1f8bf7d868be39e39c6dea68d8aa33a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2352184a1f8bf7d868be39e39c6dea68d8aa33a4"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "815a5538bff1c42bf1aa4c43269b4d4861af83d4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3afd2e20078216bf8c188d3d95326d92bfd0459f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3afd2e20078216bf8c188d3d95326d92bfd0459f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3afd2e20078216bf8c188d3d95326d92bfd0459f", "patch": "@@ -1,3 +1,9 @@\n+2003-09-15  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/12184\n+\t* typeck.c (convert_arguments): Return error_mark_node for an\n+\tincomplete parameter. Make error message more informative.\n+\n 2003-09-12  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/3907"}, {"sha": "28ed0bcd232b81339fff238cfb21964b95b624ad", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3afd2e20078216bf8c188d3d95326d92bfd0459f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3afd2e20078216bf8c188d3d95326d92bfd0459f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3afd2e20078216bf8c188d3d95326d92bfd0459f", "patch": "@@ -5254,12 +5254,14 @@ instantiate_class_template (tree type)\n \t\t  if (TYPE_LANG_SPECIFIC (tag) && CLASSTYPE_IS_TEMPLATE (tag))\n \t\t    /* Unfortunately, lookup_template_class sets\n \t\t       CLASSTYPE_IMPLICIT_INSTANTIATION for a partial\n-\t\t       instantiation (i.e., for the type of a member template\n-\t\t       class nested within a template class.)  This behavior is\n-\t\t       required for maybe_process_partial_specialization to work\n-\t\t       correctly, but is not accurate in this case; the TAG is not\n-\t\t       an instantiation of anything.  (The corresponding\n-\t\t       TEMPLATE_DECL is an instantiation, but the TYPE is not.) */\n+\t\t       instantiation (i.e., for the type of a member\n+\t\t       template class nested within a template class.)\n+\t\t       This behavior is required for\n+\t\t       maybe_process_partial_specialization to work\n+\t\t       correctly, but is not accurate in this case;\n+\t\t       the TAG is not an instantiation of anything.\n+\t\t       (The corresponding TEMPLATE_DECL is an\n+\t\t       instantiation, but the TYPE is not.) */\n \t\t    CLASSTYPE_USE_TEMPLATE (newtag) = 0;\n \n \t\t  /* Now, we call pushtag to put this NEWTAG into the scope of"}, {"sha": "8f1171f8ee1f8c06ca85219226f82c2208477102", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3afd2e20078216bf8c188d3d95326d92bfd0459f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3afd2e20078216bf8c188d3d95326d92bfd0459f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3afd2e20078216bf8c188d3d95326d92bfd0459f", "patch": "@@ -2532,8 +2532,12 @@ convert_arguments (tree typelist, tree values, tree fndecl, int flags)\n \n \t  if (!COMPLETE_TYPE_P (complete_type (type)))\n \t    {\n-\t      error (\"parameter type of called function is incomplete\");\n-\t      parmval = val;\n+\t      if (fndecl)\n+\t\terror (\"parameter %P of `%D' has incomplete type `%T'\",\n+\t\t       i, fndecl, type);\n+\t      else\n+\t\terror (\"parameter %P has incomplete type `%T'\", i, type);\n+\t      parmval = error_mark_node;\n \t    }\n \t  else\n \t    {"}, {"sha": "82de8cebc1eebdfca9d70c44e358c3aa45d524f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3afd2e20078216bf8c188d3d95326d92bfd0459f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3afd2e20078216bf8c188d3d95326d92bfd0459f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3afd2e20078216bf8c188d3d95326d92bfd0459f", "patch": "@@ -1,3 +1,8 @@\n+2003-09-15  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/12184\n+\t* g++.dg/expr/call2.C: New test.\n+\n 2003-09-15  Andreas Jaeger  <aj@suse.de>\n \n \t* gcc.dg/Wold-style-definition-1.c: New test."}, {"sha": "3b7398a8bf79b0318b64398c7fb4838c6dfc0a06", "filename": "gcc/testsuite/g++.dg/expr/call2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3afd2e20078216bf8c188d3d95326d92bfd0459f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3afd2e20078216bf8c188d3d95326d92bfd0459f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fcall2.C?ref=3afd2e20078216bf8c188d3d95326d92bfd0459f", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 11 Sep 2003 <nathan@codesourcery.com>\n+// Origin: Wolfgang Bangerth <bangerth@dealii.org> \n+// PR c++/12184. ICE\n+\n+class C; \n+class D;\n+bool mm(D); \n+ \n+void g(C& f) { \n+  mm(f); // { dg-error \"parameter\" \"\" }\n+}"}]}