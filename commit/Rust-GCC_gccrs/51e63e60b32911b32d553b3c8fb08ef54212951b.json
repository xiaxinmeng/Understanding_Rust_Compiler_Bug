{"sha": "51e63e60b32911b32d553b3c8fb08ef54212951b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFlNjNlNjBiMzI5MTFiMzJkNTUzYjNjOGZiMDhlZjU0MjEyOTUxYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-10-26T09:20:14Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-10-26T09:20:14Z"}, "message": "c-lex.c (get_nonpadding_token): Remove.\n\n\t* c-lex.c (get_nonpadding_token): Remove.\n\t(c_lex_with_flags): Push timevar and eat padding here.  Improve\n\tstray token diagnostic.\n\t(lex_string): Replace logic with switch statement, eat padding\n\ttoken here.\n\t* cp/parser.c (cp_lexer_get_preprocessor_token): Remove unneeded\n\tpadding token checking.\ntestsuite:\n\t* gcc.dg/cpp/direct2.c: Adjust expected errors, robustify parser\n\tresyncing.\n\t* gcc.dg/cpp/direct2s.c: Likewise.\n\nFrom-SVN: r89577", "tree": {"sha": "8b1dcd7ea7fe58c697f075ec9c7cdad1138aaa85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b1dcd7ea7fe58c697f075ec9c7cdad1138aaa85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51e63e60b32911b32d553b3c8fb08ef54212951b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e63e60b32911b32d553b3c8fb08ef54212951b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e63e60b32911b32d553b3c8fb08ef54212951b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e63e60b32911b32d553b3c8fb08ef54212951b/comments", "author": null, "committer": null, "parents": [{"sha": "bbdb90f76b20f62039880c986107e57f44ad3995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdb90f76b20f62039880c986107e57f44ad3995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbdb90f76b20f62039880c986107e57f44ad3995"}], "stats": {"total": 261, "additions": 153, "deletions": 108}, "files": [{"sha": "c75df2bafc5351a4e9951f58b35ca6cce4900555", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e63e60b32911b32d553b3c8fb08ef54212951b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e63e60b32911b32d553b3c8fb08ef54212951b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51e63e60b32911b32d553b3c8fb08ef54212951b", "patch": "@@ -1,3 +1,11 @@\n+2004-10-26  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-lex.c (get_nonpadding_token): Remove.\n+\t(c_lex_with_flags): Push timevar and eat padding here.  Improve\n+\tstray token diagnostic.\n+\t(lex_string): Replace logic with switch statement, eat padding\n+\ttoken here.\n+\n 2004-10-26  Geoffrey Keating  <geoffk@apple.com>\n \n \tPR 18149"}, {"sha": "415785d2242107df3039e7006a57de963ce4ea57", "filename": "gcc/c-lex.c", "status": "modified", "additions": 100, "deletions": 71, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e63e60b32911b32d553b3c8fb08ef54212951b/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e63e60b32911b32d553b3c8fb08ef54212951b/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=51e63e60b32911b32d553b3c8fb08ef54212951b", "patch": "@@ -327,32 +327,28 @@ cb_undef (cpp_reader * ARG_UNUSED (pfile), source_location loc,\n \t\t\t (const char *) NODE_NAME (node));\n }\n \f\n-static inline const cpp_token *\n-get_nonpadding_token (void)\n-{\n-  const cpp_token *tok;\n-  timevar_push (TV_CPP);\n-  do\n-    tok = cpp_get_token (parse_in);\n-  while (tok->type == CPP_PADDING);\n-  timevar_pop (TV_CPP);\n-\n-  return tok;\n-}\n+/* Read a token and return its type.  Fill *VALUE with its value, if\n+   applicable.  Fill *CPP_FLAGS with the token's flags, if it is\n+   non-NULL.  */\n \n enum cpp_ttype\n c_lex_with_flags (tree *value, unsigned char *cpp_flags)\n {\n-  const cpp_token *tok;\n-  location_t atloc;\n   static bool no_more_pch;\n+  const cpp_token *tok;\n+  enum cpp_ttype type;\n \n+  timevar_push (TV_CPP);\n  retry:\n-  tok = get_nonpadding_token ();\n-\n+  tok = cpp_get_token (parse_in);\n+  type = tok->type;\n+  \n  retry_after_at:\n-  switch (tok->type)\n+  switch (type)\n     {\n+    case CPP_PADDING:\n+      goto retry;\n+      \n     case CPP_NAME:\n       *value = HT_IDENT_TO_GCC_IDENT (HT_NODE (tok->val.node));\n       break;\n@@ -384,33 +380,52 @@ c_lex_with_flags (tree *value, unsigned char *cpp_flags)\n \n     case CPP_ATSIGN:\n       /* An @ may give the next token special significance in Objective-C.  */\n-      atloc = input_location;\n-      tok = get_nonpadding_token ();\n       if (c_dialect_objc ())\n \t{\n-\t  tree val;\n-\t  switch (tok->type)\n+\t  location_t atloc = input_location;\n+\t  \n+\tretry_at:\n+\t  tok = cpp_get_token (parse_in);\n+\t  type = tok->type;\n+\t  switch (type)\n \t    {\n+\t    case CPP_PADDING:\n+\t      goto retry_at;\n+\t      \n+\t    case CPP_STRING:\n+\t    case CPP_WSTRING:\n+\t      type = lex_string (tok, value, true);\n+\t      break;\n+\n \t    case CPP_NAME:\n-\t      val = HT_IDENT_TO_GCC_IDENT (HT_NODE (tok->val.node));\n-\t      if (objc_is_reserved_word (val))\n+\t      *value = HT_IDENT_TO_GCC_IDENT (HT_NODE (tok->val.node));\n+\t      if (objc_is_reserved_word (*value))\n \t\t{\n-\t\t  *value = val;\n-\t\t  return CPP_AT_NAME;\n+\t\t  type = CPP_AT_NAME;\n+\t\t  break;\n \t\t}\n-\t      break;\n-\n-\t    case CPP_STRING:\n-\t    case CPP_WSTRING:\n-\t      return lex_string (tok, value, true);\n+\t      /* FALLTHROUGH */\n \n-\t    default: break;\n+\t    default:\n+\t      /* ... or not.  */\n+\t      error (\"%Hstray %<@%> in program\", &atloc);\n+\t      goto retry_after_at;\n \t    }\n+\t  break;\n \t}\n \n-      /* ... or not.  */\n-      error (\"%Hstray '@' in program\", &atloc);\n-      goto retry_after_at;\n+      /* FALLTHROUGH */\n+    case CPP_HASH:\n+    case CPP_PASTE:\n+      {\n+\tunsigned char name[4];\n+\t\n+\t*cpp_spell_token (parse_in, tok, name) = 0;\n+\t\n+\terror (\"stray %qs in program\", name);\n+      }\n+      \n+      goto retry;\n \n     case CPP_OTHER:\n       {\n@@ -419,9 +434,9 @@ c_lex_with_flags (tree *value, unsigned char *cpp_flags)\n \tif (c == '\"' || c == '\\'')\n \t  error (\"missing terminating %c character\", (int) c);\n \telse if (ISGRAPH (c))\n-\t  error (\"stray '%c' in program\", (int) c);\n+\t  error (\"stray %qc in program\", (int) c);\n \telse\n-\t  error (\"stray '\\\\%o' in program\", (int) c);\n+\t  error (\"stray %<\\\\%o%> in program\", (int) c);\n       }\n       goto retry;\n \n@@ -433,8 +448,12 @@ c_lex_with_flags (tree *value, unsigned char *cpp_flags)\n     case CPP_STRING:\n     case CPP_WSTRING:\n       if (!c_lex_return_raw_strings)\n-\treturn lex_string (tok, value, false);\n-      /* else fall through */\n+\t{\n+\t  type = lex_string (tok, value, false);\n+\t  break;\n+\t}\n+      \n+      /* FALLTHROUGH */\n \n     case CPP_PRAGMA:\n       *value = build_string (tok->val.str.len, (char *) tok->val.str.text);\n@@ -451,15 +470,18 @@ c_lex_with_flags (tree *value, unsigned char *cpp_flags)\n       break;\n     }\n \n+  if (cpp_flags)\n+    *cpp_flags = tok->flags;\n+\n   if (!no_more_pch)\n     {\n       no_more_pch = true;\n       c_common_no_more_pch ();\n     }\n-\n-  if (cpp_flags)\n-    *cpp_flags = tok->flags;\n-  return tok->type;\n+  \n+  timevar_pop (TV_CPP);\n+  \n+  return type;\n }\n \n enum cpp_ttype\n@@ -690,7 +712,7 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string)\n {\n   tree value;\n   bool wide = false;\n-  size_t count = 1;\n+  size_t concats = 0;\n   struct obstack str_ob;\n   cpp_string istr;\n \n@@ -702,51 +724,58 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string)\n   if (tok->type == CPP_WSTRING)\n     wide = true;\n \n-  tok = get_nonpadding_token ();\n-  if (c_dialect_objc () && tok->type == CPP_ATSIGN)\n-    {\n-      objc_string = true;\n-      tok = get_nonpadding_token ();\n-    }\n-  if (tok->type == CPP_STRING || tok->type == CPP_WSTRING)\n+ retry:\n+  tok = cpp_get_token (parse_in);\n+  switch (tok->type)\n     {\n-      gcc_obstack_init (&str_ob);\n-      obstack_grow (&str_ob, &str, sizeof (cpp_string));\n-\n-      do\n+    case CPP_PADDING:\n+      goto retry;\n+    case CPP_ATSIGN:\n+      if (c_dialect_objc ())\n \t{\n-\t  count++;\n-\t  if (tok->type == CPP_WSTRING)\n-\t    wide = true;\n-\t  obstack_grow (&str_ob, &tok->val.str, sizeof (cpp_string));\n-\n-\t  tok = get_nonpadding_token ();\n-\t  if (c_dialect_objc () && tok->type == CPP_ATSIGN)\n-\t    {\n-\t      objc_string = true;\n-\t      tok = get_nonpadding_token ();\n-\t    }\n+\t  objc_string = true;\n+\t  goto retry;\n+\t}\n+      /* FALLTHROUGH */\n+      \n+    default:\n+      break;\n+      \n+    case CPP_WSTRING:\n+      wide = true;\n+      /* FALLTHROUGH */\n+      \n+    case CPP_STRING:\n+      if (!concats)\n+\t{\n+\t  gcc_obstack_init (&str_ob);\n+\t  obstack_grow (&str_ob, &str, sizeof (cpp_string));\n \t}\n-      while (tok->type == CPP_STRING || tok->type == CPP_WSTRING);\n-      strs = (cpp_string *) obstack_finish (&str_ob);\n+\t\n+      concats++;\n+      obstack_grow (&str_ob, &tok->val.str, sizeof (cpp_string));\n+      goto retry;\n     }\n \n   /* We have read one more token than we want.  */\n   _cpp_backup_tokens (parse_in, 1);\n+  if (concats)\n+    strs = (cpp_string *) obstack_finish (&str_ob);\n \n-  if (count > 1 && !objc_string && warn_traditional && !in_system_header)\n+  if (concats && !objc_string && warn_traditional && !in_system_header)\n     warning (\"traditional C rejects string constant concatenation\");\n \n   if ((c_lex_string_translate\n        ? cpp_interpret_string : cpp_interpret_string_notranslate)\n-      (parse_in, strs, count, &istr, wide))\n+      (parse_in, strs, concats + 1, &istr, wide))\n     {\n       value = build_string (istr.len, (char *) istr.text);\n       free ((void *) istr.text);\n \n       if (c_lex_string_translate == -1)\n \t{\n-\t  int xlated = cpp_interpret_string_notranslate (parse_in, strs, count,\n+\t  int xlated = cpp_interpret_string_notranslate (parse_in, strs,\n+\t\t\t\t\t\t\t concats + 1,\n \t\t\t\t\t\t\t &istr, wide);\n \t  /* Assume that, if we managed to translate the string above,\n \t     then the untranslated parsing will always succeed.  */\n@@ -782,7 +811,7 @@ lex_string (const cpp_token *tok, tree *valp, bool objc_string)\n   TREE_TYPE (value) = wide ? wchar_array_type_node : char_array_type_node;\n   *valp = fix_string_type (value);\n \n-  if (strs != &str)\n+  if (concats)\n     obstack_free (&str_ob, 0);\n \n   return objc_string ? CPP_OBJC_STRING : wide ? CPP_WSTRING : CPP_STRING;"}, {"sha": "39f6e4127efcec1c6b3cc317bf1d61593643d7c3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e63e60b32911b32d553b3c8fb08ef54212951b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e63e60b32911b32d553b3c8fb08ef54212951b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=51e63e60b32911b32d553b3c8fb08ef54212951b", "patch": "@@ -1,3 +1,8 @@\n+2004-10-26  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* parser.c (cp_lexer_get_preprocessor_token): Remove unneeded\n+\tpadding token checking.\n+\n 2004-10-25  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/18121"}, {"sha": "fe3b3c6174486ce3f62164251953a6f808af9ae5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e63e60b32911b32d553b3c8fb08ef54212951b/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e63e60b32911b32d553b3c8fb08ef54212951b/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=51e63e60b32911b32d553b3c8fb08ef54212951b", "patch": "@@ -374,30 +374,9 @@ cp_lexer_get_preprocessor_token (cp_lexer *lexer ATTRIBUTE_UNUSED ,\n                                  cp_token *token)\n {\n   static int is_extern_c = 0;\n-  bool done;\n \n-  done = false;\n-  /* Keep going until we get a token we like.  */\n-  while (!done)\n-    {\n-      /* Get a new token from the preprocessor.  */\n-      token->type = c_lex_with_flags (&token->value, &token->flags);\n-      /* Issue messages about tokens we cannot process.  */\n-      switch (token->type)\n-\t{\n-\tcase CPP_ATSIGN:\n-\tcase CPP_HASH:\n-\tcase CPP_PASTE:\n-\t  error (\"invalid token\");\n-\t  break;\n-\n-\tdefault:\n-\t  /* This is a good token, so we exit the loop.  */\n-\t  done = true;\n-\t  break;\n-\t}\n-    }\n-  /* Now we've got our token.  */\n+   /* Get a new token from the preprocessor.  */\n+  token->type = c_lex_with_flags (&token->value, &token->flags);\n   token->location = input_location;\n   token->in_system_header = in_system_header;\n "}, {"sha": "e8a8ec6bc07c3de744c1a6efeda5886b889d0a9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e63e60b32911b32d553b3c8fb08ef54212951b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e63e60b32911b32d553b3c8fb08ef54212951b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=51e63e60b32911b32d553b3c8fb08ef54212951b", "patch": "@@ -1,3 +1,9 @@\n+2004-10-26  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gcc.dg/cpp/direct2.c: Adjust expected errors, robustify parser\n+\tresyncing.\n+\t* gcc.dg/cpp/direct2s.c: Likewise.\n+\n 2004-10-25  Geoffrey Keating  <geoffk@apple.com>\n \n \t* objc.dg/image-info.m: Update for changes to section selection."}, {"sha": "433cf934f19b34f53f57a6a4e63cc8b05ff8d995", "filename": "gcc/testsuite/gcc.dg/cpp/direct2.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e63e60b32911b32d553b3c8fb08ef54212951b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e63e60b32911b32d553b3c8fb08ef54212951b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2.c?ref=51e63e60b32911b32d553b3c8fb08ef54212951b", "patch": "@@ -10,15 +10,24 @@\n #define HASHDEFINE #define\n #define HASHINCLUDE #include\n \n-HASH include \"somerandomfile\" /*{ dg-error \"syntax|parse\" \"non-include\" }*/\n+HASH include \"somerandomfile\" /*{ dg-error \"stray\" \"non-include\" }*/\n /*{ dg-bogus \"No such\" \"don't execute non-include\" { target *-*-* } 13 }*/\n-HASHINCLUDE <somerandomfile> /*{ dg-error \"syntax|parse\" \"non-include 2\" }*/\n-/*{ dg-bogus \"No such\" \"don't execute non-include 2\" { target *-*-* } 15 }*/\n+int resync_parser_1; /*{ dg-error \"parse\" \"\" }*/\n \n-void g ()\n+HASHINCLUDE <somerandomfile> /*{ dg-error \"stray\" \"non-include 2\" }*/\n+/*{ dg-bogus \"No such\" \"don't execute non-include 2\" { target *-*-* } 17 }*/\n+int resync_parser_2;\n+\n+void g1 ()\n+{\n+HASH define X 1 /* { dg-error \"stray|undeclared|parse|for each\" \"# from macro\" } */\n+  int resync_parser_3;\n+}\n+\n+void g2 ()\n {\n-HASH define X 1 /* { dg-error \"syntax error\" \"# from macro\" } */\n-HASHDEFINE  Y 1 /* { dg-error \"syntax error\" \"#define from macro\" } */\n+HASHDEFINE  Y 1 /* { dg-error \"stray|undeclared|parse|for each\" \"#define from macro\" } */\n+  int resync_parser_4;\n }\n \n #pragma GCC dependency \"direct2.c\"\n@@ -34,4 +43,4 @@ void f ()\n #define starslash *##/\n \n slashstar starslash /* { dg-error \"(parse|syntax) error\" \"not a comment\" } */\n-/* { dg-warning \"does not give\" \"paste warning(s)\" { target *-*-* } 36 } */\n+/* { dg-warning \"does not give\" \"paste warning(s)\" { target *-*-* } 45 } */"}, {"sha": "939a213771deaa9492886822e42bef8cb363b60c", "filename": "gcc/testsuite/gcc.dg/cpp/direct2s.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e63e60b32911b32d553b3c8fb08ef54212951b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2s.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e63e60b32911b32d553b3c8fb08ef54212951b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2s.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirect2s.c?ref=51e63e60b32911b32d553b3c8fb08ef54212951b", "patch": "@@ -12,18 +12,27 @@\n #define HASHDEFINE #define\n #define HASHINCLUDE #include\n \n-HASH include \"somerandomfile\" /*{ dg-error \"syntax|parse\" \"non-include\" }*/\n+HASH include \"somerandomfile\" /*{ dg-error \"stray\" \"non-include\" }*/\n /*{ dg-bogus \"No such\" \"don't execute non-include\" { target *-*-* } 15 }*/\n-HASHINCLUDE <somerandomfile> /*{ dg-error \"syntax|parse\" \"non-include 2\" }*/\n-/*{ dg-bogus \"No such\" \"don't execute non-include 2\" { target *-*-* } 17 }*/\n+int resync_parser_1; /*{ dg-error \"parse\" \"\" }*/\n \n-void g ()\n+HASHINCLUDE <somerandomfile> /*{ dg-error \"stray\" \"non-include 2\" }*/\n+/*{ dg-bogus \"No such\" \"don't execute non-include 2\" { target *-*-* } 18 }*/\n+int resync_parser_2;\n+\n+void g1 ()\n+{\n+HASH define X 1 /* { dg-error \"stray|undeclared|parse|for each\" \"# from macro\" } */\n+  int resync_parser_3;\n+}\n+\n+void g2 ()\n {\n-HASH define X 1 /* { dg-error \"syntax error\" \"# from macro\" } */\n-HASHDEFINE  Y 1 /* { dg-error \"syntax error\" \"#define from macro\" } */\n+HASHDEFINE  Y 1 /* { dg-error \"stray|undeclared|parse|for each\" \"#define from macro\" } */\n+  int resync_parser_4;\n }\n \n-#pragma GCC dependency \"direct2s.c\"\n+#pragma GCC dependency \"direct2.c\"\n #\n \n void f ()"}]}