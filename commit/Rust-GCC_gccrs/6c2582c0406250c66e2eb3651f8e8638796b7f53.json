{"sha": "6c2582c0406250c66e2eb3651f8e8638796b7f53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMyNTgyYzA0MDYyNTBjNjZlMmViMzY1MWY4ZTg2Mzg3OTZiN2Y1Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-27T21:08:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-27T21:08:15Z"}, "message": "libstdc++: Fix view adaptors for mixed-const sentinels and iterators (PR 95322)\n\nThe bug report is that transform_view's sentinel<false> cannot be\ncompared to its iterator<true>.  The comparison is supposed to use\noperator==(iterator<Const>, sentinel<Const>) after converting\nsentinel<false> to sentinel<true>. However, the operator== is a hidden\nfriend so is not a candidate when comparing iterator<true> with\nsentinel<false>. The required conversion would only happen if we'd found\nthe operator, but we can't find the operator until after the conversion\nhappens.\n\nA new LWG issue has been reported, but not yet assigned a number.  The\nsolution suggested by Casey Carter is to make the hidden friends of the\nsentinel types work with iterators of any const-ness, so that no\nconversions are required.\n\nPatrick Palka observed that join_view has a similar problem and a\nsimilar fix is used for its sentinel.\n\n\tPR libstdc++/95322\n\t* include/std/ranges (transform_view::_Sentinel): Allow hidden\n\tfriends to work with _Iterator<true> and _Iterator<false>.\n\t(join_view::_Sentinel): Likewise.\n\t* testsuite/std/ranges/adaptors/95322.cc: New test.", "tree": {"sha": "3a392876a1e7470675545fe94a6e58779c8d5048", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a392876a1e7470675545fe94a6e58779c8d5048"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c2582c0406250c66e2eb3651f8e8638796b7f53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c2582c0406250c66e2eb3651f8e8638796b7f53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c2582c0406250c66e2eb3651f8e8638796b7f53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c2582c0406250c66e2eb3651f8e8638796b7f53/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "979e89a9a94f66241fa8355e2b2e8f4a680c83e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979e89a9a94f66241fa8355e2b2e8f4a680c83e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/979e89a9a94f66241fa8355e2b2e8f4a680c83e1"}], "stats": {"total": 115, "additions": 68, "deletions": 47}, "files": [{"sha": "b8023e67c9fa8bd6c48c174c377ccea00021f26d", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 40, "deletions": 27, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2582c0406250c66e2eb3651f8e8638796b7f53/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2582c0406250c66e2eb3651f8e8638796b7f53/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=6c2582c0406250c66e2eb3651f8e8638796b7f53", "patch": "@@ -1853,7 +1853,7 @@ namespace views\n \t  { return ranges::iter_swap(__x._M_current, __y._M_current); }\n \n \t  friend _Iterator<!_Const>;\n-\t  friend _Sentinel<_Const>;\n+\t  template<bool> friend struct _Sentinel;\n \t};\n \n       template<bool _Const>\n@@ -1863,13 +1863,15 @@ namespace views\n \t  using _Parent = __detail::__maybe_const_t<_Const, transform_view>;\n \t  using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n \n-\t  constexpr range_difference_t<_Base>\n-\t  __distance_from(const _Iterator<_Const>& __i) const\n-\t  { return _M_end - __i._M_current; }\n+\t  template<bool _Const2>\n+\t    constexpr range_difference_t<_Base>\n+\t    __distance_from(const _Iterator<_Const2>& __i) const\n+\t    { return _M_end - __i._M_current; }\n \n-\t  constexpr bool\n-\t  __equal(const _Iterator<_Const>& __i) const\n-\t  { return __i._M_current == _M_end; }\n+\t  template<bool _Const2>\n+\t    constexpr bool\n+\t    __equal(const _Iterator<_Const2>& __i) const\n+\t    { return __i._M_current == _M_end; }\n \n \t  sentinel_t<_Base> _M_end = sentinel_t<_Base>();\n \n@@ -1892,19 +1894,26 @@ namespace views\n \t  base() const\n \t  { return _M_end; }\n \n-\t  friend constexpr bool\n-\t  operator==(const _Iterator<_Const>& __x, const _Sentinel& __y)\n-\t  { return __y.__equal(__x); }\n-\n-\t  friend constexpr range_difference_t<_Base>\n-\t  operator-(const _Iterator<_Const>& __x, const _Sentinel& __y)\n-\t    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<_Base>>\n-\t  { return -__y.__distance_from(__x); }\n-\n-\t  friend constexpr range_difference_t<_Base>\n-\t  operator-(const _Sentinel& __y, const _Iterator<_Const>& __x)\n-\t    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<_Base>>\n-\t  { return __y.__distance_from(__x); }\n+\t  template<bool _Const2>\n+\t    requires sentinel_for<sentinel_t<_Base>,\n+\t\t       iterator_t<__detail::__maybe_const_t<_Const2, _Vp>>>\n+\t    friend constexpr bool\n+\t    operator==(const _Iterator<_Const2>& __x, const _Sentinel& __y)\n+\t    { return __y.__equal(__x); }\n+\n+\t  template<bool _Const2>\n+\t    requires sized_sentinel_for<sentinel_t<_Base>,\n+\t\t       iterator_t<__detail::__maybe_const_t<_Const2, _Vp>>>\n+\t    friend constexpr range_difference_t<_Base>\n+\t    operator-(const _Iterator<_Const2>& __x, const _Sentinel& __y)\n+\t    { return -__y.__distance_from(__x); }\n+\n+\t  template<bool _Const2>\n+\t    requires sized_sentinel_for<sentinel_t<_Base>,\n+\t\t       iterator_t<__detail::__maybe_const_t<_Const2, _Vp>>>\n+\t    friend constexpr range_difference_t<_Base>\n+\t    operator-(const _Sentinel& __y, const _Iterator<_Const2>& __x)\n+\t    { return __y.__distance_from(__x); }\n \n \t  friend _Sentinel<!_Const>;\n \t};\n@@ -2571,7 +2580,7 @@ namespace views\n \t  { return ranges::iter_swap(__x._M_inner, __y._M_inner); }\n \n \t  friend _Iterator<!_Const>;\n-\t  friend _Sentinel<_Const>;\n+\t  template<bool> friend struct _Sentinel;\n \t};\n \n       template<bool _Const>\n@@ -2581,9 +2590,10 @@ namespace views\n \t  using _Parent = __detail::__maybe_const_t<_Const, join_view>;\n \t  using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n \n-\t  constexpr bool\n-\t  __equal(const _Iterator<_Const>& __i) const\n-\t  { return __i._M_outer == _M_end; }\n+\t  template<bool _Const2>\n+\t    constexpr bool\n+\t    __equal(const _Iterator<_Const2>& __i) const\n+\t    { return __i._M_outer == _M_end; }\n \n \t  sentinel_t<_Base> _M_end = sentinel_t<_Base>();\n \n@@ -2601,9 +2611,12 @@ namespace views\n \t    : _M_end(std::move(__s._M_end))\n \t  { }\n \n-\t  friend constexpr bool\n-\t  operator==(const _Iterator<_Const>& __x, const _Sentinel& __y)\n-\t  { return __y.__equal(__x); }\n+\t  template<bool _Const2>\n+\t    requires sentinel_for<sentinel_t<_Base>,\n+\t\t       iterator_t<__detail::__maybe_const_t<_Const2, _Vp>>>\n+\t    friend constexpr bool\n+\t    operator==(const _Iterator<_Const2>& __x, const _Sentinel& __y)\n+\t    { return __y.__equal(__x); }\n \n \t  friend _Sentinel<!_Const>;\n \t};"}, {"sha": "9279d5520a870b85ebfca8371975bcacb8038959", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/95322.cc", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c2582c0406250c66e2eb3651f8e8638796b7f53/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F95322.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c2582c0406250c66e2eb3651f8e8638796b7f53/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F95322.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F95322.cc?ref=6c2582c0406250c66e2eb3651f8e8638796b7f53", "patch": "@@ -15,36 +15,44 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++2a\" }\n+// { dg-options \"-std=gnu++20\" }\n // { dg-do run { target c++2a } }\n \n #include <ranges>\n-#include <list>\n-#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n \n-namespace ranges = std::ranges;\n-namespace views = std::views;\n+using __gnu_test::test_forward_range;\n \n void\n test01()\n {\n-  std::list container{1, 2, 3, 4, 5};\n-  auto v = (container\n-\t    | views::take(3)\n-\t    | views::transform(std::negate{})\n-\t    | views::common);\n-  auto i = ranges::cbegin(v);\n-  VERIFY( *i == -1 );\n-  ++i;\n-  VERIFY( *i == -2 );\n-  ++i;\n-  VERIFY( *i == -3 );\n-  ++i;\n-  VERIFY( i == ranges::end(v) );\n+  // PR libstdc++/95322\n+  int a[2]{1, 2};\n+  test_forward_range<int> v{a};\n+  auto view1 = v | std::views::take(2);\n+  auto view2 = view1 | std::views::transform(std::identity{});\n+  const bool eq = std::ranges::cbegin(view2) == std::ranges::end(view2);\n+  VERIFY( !eq );\n }\n \n-int\n-main()\n+void\n+test02()\n+{\n+  using irange = test_forward_range<int>;\n+\n+  int a[2]{1, 2};\n+  int b[3]{3, 4, 5};\n+  irange u[2]{ irange{a}, irange{b} };\n+  test_forward_range<irange> v{u};\n+  auto view = (std::views::counted(v.begin(), 2)\n+\t       | std::views::transform(std::identity{})\n+\t       | std::views::join);\n+  const bool eq = std::ranges::cbegin(view) == std::ranges::end(view);\n+  VERIFY( !eq );\n+}\n+\n+int main()\n {\n   test01();\n+  test02();\n }"}]}