{"sha": "e73f7547c50e91654c691a620a949085645c4e51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTczZjc1NDdjNTBlOTE2NTRjNjkxYTYyMGE5NDkwODU2NDVjNGU1MQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-08T23:15:31Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-08-08T23:15:31Z"}, "message": "re PR c/28875 (\"-Wextra -Wno-unused-parameter -Wall\" doesn't work as expected)\n\n2008-08-08  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\n\tPR 28875\n\t* flags.h (set_Wunused): Delete\n\t* toplev.c (process_options): Handle Wunused flags here.\n\t* opts.c (maybe_warn_unused_parameter): Delete.\n\t(common_handle_option): Replace set_Wunused by warn_unused.\n\t(set_Wextra): Do not handle Wunused-parameter here.\n\t(set_Wunused): Delete.\n\t* c-opts.c (c_common_handle_option): Replace set_Wunused by\n\twarn_unused.\n\t* common.opt (Wunused): Add Var and Init.\n\t(Wunused-function): Likewise.\n\t(Wunused-label): Likewise.\n\t(Wunused-parameter): Likewise.\n\t(Wunused-value): Likewise.\n\t(Wunused-variable): Likewise.\nfortran/\n\t* options.c (set_Wall): Replace set_Wunused by warn_unused.\njava/\t\n\t* lang.c (java_handle_option): Replace set_Wunused with\n\twarn_unused.\ntestsuite/\n\t* gcc.dg/unused-6-no.c: New.\n\t* gcc.dg/unused-6-WallWextra.c: New.\n\nFrom-SVN: r138890", "tree": {"sha": "78d365c089bbd5db307fb058a73ce73b455dad1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78d365c089bbd5db307fb058a73ce73b455dad1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e73f7547c50e91654c691a620a949085645c4e51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73f7547c50e91654c691a620a949085645c4e51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e73f7547c50e91654c691a620a949085645c4e51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e73f7547c50e91654c691a620a949085645c4e51/comments", "author": null, "committer": null, "parents": [{"sha": "d40c9e333328e700c7a6f50f7e007dcd9dfcf84c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40c9e333328e700c7a6f50f7e007dcd9dfcf84c"}], "stats": {"total": 141, "additions": 92, "deletions": 49}, "files": [{"sha": "569efd1f5b321b9df8a5a29c412f311c896de59f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73f7547c50e91654c691a620a949085645c4e51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73f7547c50e91654c691a620a949085645c4e51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e73f7547c50e91654c691a620a949085645c4e51", "patch": "@@ -1,17 +1,35 @@\n+2008-08-08  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 28875\n+\t* flags.h (set_Wunused): Delete\n+\t* toplev.c (process_options): Handle Wunused flags here.\n+\t* opts.c (maybe_warn_unused_parameter): Delete.\n+\t(common_handle_option): Replace set_Wunused by warn_unused.\n+\t(set_Wextra): Do not handle Wunused-parameter here.\n+\t(set_Wunused): Delete.\n+\t* c-opts.c (c_common_handle_option): Replace set_Wunused by\n+\twarn_unused.\n+\t* common.opt (Wunused): Add Var and Init.\n+\t(Wunused-function): Likewise.\n+\t(Wunused-label): Likewise.\n+\t(Wunused-parameter): Likewise.\n+\t(Wunused-value): Likewise.\n+\t(Wunused-variable): Likewise.\n+\t\n 2008-08-08  Peter Bergner  <bergner@vnet.ibm.com>\n \n-        * doc/invoke.texi: Add cpu_type power7.\n-        * config.in (HAVE_AS_VSX): New.\n-        * config.gcc: Add cpu_type power7.\n-        * configure.ac (HAVE_AS_VSX): Check for assembler support of the\n-        VSX instructions.\n-        * configure: Regenerate.\n-        * config/rs6000/rs6000.c (rs6000_override_options): Alias power7 to\n-        power5.\n-        * config/rs6000/rs6000.h (ASM_CPU_POWER7_SPEC): Define.\n-        (ASM_CPU_SPEC): Pass %(asm_cpu_power7) for -mcpu=power7.\n-        (EXTRA_SPECS): Add asm_cpu_power7 spec string.\n- \n+\t* doc/invoke.texi: Add cpu_type power7.\n+\t* config.in (HAVE_AS_VSX): New.\n+\t* config.gcc: Add cpu_type power7.\n+\t* configure.ac (HAVE_AS_VSX): Check for assembler support of the\n+\tVSX instructions.\n+\t* configure: Regenerate.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Alias power7 to\n+\tpower5.\n+\t* config/rs6000/rs6000.h (ASM_CPU_POWER7_SPEC): Define.\n+\t(ASM_CPU_SPEC): Pass %(asm_cpu_power7) for -mcpu=power7.\n+\t(EXTRA_SPECS): Add asm_cpu_power7 spec string.\n+\n 2008-08-08  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* tree-vect-transform.c (vectorizable_conversion): Pass the integral"}, {"sha": "83e2ed14c4ea53cd4e2bbcff07f586a115e8ede7", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=e73f7547c50e91654c691a620a949085645c4e51", "patch": "@@ -376,7 +376,7 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       break;\n \n     case OPT_Wall:\n-      set_Wunused (value);\n+      warn_unused = value;\n       set_Wformat (value);\n       set_Wimplicit (value);\n       warn_char_subscripts = value;"}, {"sha": "9b1972b8c4a62b6651843e971dc7e31176058d60", "filename": "gcc/common.opt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e73f7547c50e91654c691a620a949085645c4e51", "patch": "@@ -210,27 +210,27 @@ Common Var(warn_notreached) Warning\n Warn about code that will never be executed\n \n Wunused\n-Common Warning\n+Common Var(warn_unused) Init(0) Warning\n Enable all -Wunused- warnings\n \n Wunused-function\n-Common Var(warn_unused_function) Warning\n+Common Var(warn_unused_function) Init(-1) Warning\n Warn when a function is unused\n \n Wunused-label\n-Common Var(warn_unused_label) Warning\n+Common Var(warn_unused_label) Init(-1) Warning\n Warn when a label is unused\n \n Wunused-parameter\n-Common Var(warn_unused_parameter) Warning\n+Common Var(warn_unused_parameter) Init(-1) Warning\n Warn when a function parameter is unused\n \n Wunused-value\n-Common Var(warn_unused_value) Warning\n+Common Var(warn_unused_value) Init(-1) Warning\n Warn when an expression value is unused\n \n Wunused-variable\n-Common Var(warn_unused_variable) Warning\n+Common Var(warn_unused_variable) Init(-1) Warning\n Warn when a variable is unused\n \n Wcoverage-mismatch"}, {"sha": "ceff962d98a474264f007d5f9999adf9aa34d04e", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=e73f7547c50e91654c691a620a949085645c4e51", "patch": "@@ -115,12 +115,6 @@ extern int optimize_size;\n \n extern bool extra_warnings;\n \n-/* Nonzero to warn about unused variables, functions et.al.  Use\n-   set_Wunused() to update the -Wunused-* flags that correspond to the\n-   -Wunused option.  */\n-\n-extern void set_Wunused (int setting);\n-\n /* Used to set the level of -Wstrict-aliasing, when no level is specified.  \n    The external way to set the default level is to use\n    -Wstrict-aliasing=level.  "}, {"sha": "6e37b804d8e50b178fd1ae285e1b6519121f91dd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e73f7547c50e91654c691a620a949085645c4e51", "patch": "@@ -1,3 +1,8 @@\n+2008-08-08  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 28875\n+\t* options.c (set_Wall): Replace set_Wunused by warn_unused.\n+\n 2008-08-08  Daniel Kraft  <d@domob.eu>\n \n \t* gfortran.h (gfc_finalizer):  Replaced member `procedure' by two"}, {"sha": "4ecb8f998e33ff4a865f8da7f486b02d75b42108", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=e73f7547c50e91654c691a620a949085645c4e51", "patch": "@@ -376,7 +376,7 @@ set_Wall (int setting)\n   gfc_option.warn_intrinsics_std = setting;\n   gfc_option.warn_character_truncation = setting;\n \n-  set_Wunused (setting);\n+  warn_unused = setting;\n   warn_return_type = setting;\n   warn_switch = setting;\n "}, {"sha": "ba39be4297161cc1ec42439d35f54c9c13dea7e4", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e73f7547c50e91654c691a620a949085645c4e51", "patch": "@@ -1,3 +1,9 @@\n+2008-08-08  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 28875\n+\t* lang.c (java_handle_option): Replace set_Wunused with\n+\twarn_unused.\n+\n 2008-07-30  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* gcj.texi: Update copyright years.  Do not list GPL as"}, {"sha": "d049aeb2bc162166d4b1da64d0cc3185f18e8c4c", "filename": "gcc/java/lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=e73f7547c50e91654c691a620a949085645c4e51", "patch": "@@ -221,7 +221,7 @@ java_handle_option (size_t scode, const char *arg, int value)\n       flag_wall = value;\n       /* When -Wall given, enable -Wunused.  We do this because the C\n \t compiler does it, and people expect it.  */\n-      set_Wunused (value);\n+      warn_unused = value;\n       break;\n \n     case OPT_fenable_assertions_:"}, {"sha": "8dd8b8265fdf00df908f29d85ebbaef38bfe3184", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=e73f7547c50e91654c691a620a949085645c4e51", "patch": "@@ -63,9 +63,6 @@ HOST_WIDE_INT larger_than_size;\n bool warn_frame_larger_than;\n HOST_WIDE_INT frame_larger_than_size;\n \n-/* Hack for cooperation between set_Wunused and set_Wextra.  */\n-static bool maybe_warn_unused_parameter;\n-\n /* Type(s) of debugging information we are producing (if any).  See\n    flags.h for the definitions of the different possible types of\n    debugging information.  */\n@@ -1667,7 +1664,7 @@ common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_Wunused:\n-      set_Wunused (value);\n+      warn_unused = value;\n       break;\n \n     case OPT_aux_info:\n@@ -2037,7 +2034,6 @@ static void\n set_Wextra (int setting)\n {\n   extra_warnings = setting;\n-  warn_unused_parameter = (setting && maybe_warn_unused_parameter);\n \n   /* We save the value of warn_uninitialized, since if they put\n      -Wuninitialized on the command line, we need to generate a\n@@ -2048,23 +2044,6 @@ set_Wextra (int setting)\n     warn_uninitialized = 2;\n }\n \n-/* Initialize unused warning flags.  */\n-void\n-set_Wunused (int setting)\n-{\n-  warn_unused_function = setting;\n-  warn_unused_label = setting;\n-  /* Unused function parameter warnings are reported when either\n-     ``-Wextra -Wunused'' or ``-Wunused-parameter'' is specified.\n-     Thus, if -Wextra has already been seen, set warn_unused_parameter;\n-     otherwise set maybe_warn_extra_parameter, which will be picked up\n-     by set_Wextra.  */\n-  maybe_warn_unused_parameter = setting;\n-  warn_unused_parameter = (setting && extra_warnings);\n-  warn_unused_variable = setting;\n-  warn_unused_value = setting;\n-}\n-\n /* Used to set the level of strict aliasing warnings, \n    when no level is specified (i.e., when -Wstrict-aliasing, and not\n    -Wstrict-aliasing=level was given)."}, {"sha": "db2088fac1a161dd3fd7d28ee921c0cf04a99f63", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e73f7547c50e91654c691a620a949085645c4e51", "patch": "@@ -1,3 +1,9 @@\n+2008-08-08  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\tPR 28875\n+\t* gcc.dg/unused-6-no.c: New.\n+\t* gcc.dg/unused-6-WallWextra.c: New.\n+\n 2008-08-08  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \tPR c++/35985"}, {"sha": "d2d80be062a0a8d04d27be9d0994e52e389e7463", "filename": "gcc/testsuite/gcc.dg/unused-6-WallWextra.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Ftestsuite%2Fgcc.dg%2Funused-6-WallWextra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Ftestsuite%2Fgcc.dg%2Funused-6-WallWextra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funused-6-WallWextra.c?ref=e73f7547c50e91654c691a620a949085645c4e51", "patch": "@@ -0,0 +1,11 @@\n+/* PR 28875 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -Wextra -Wall\" } */\n+static int t(int i) /* { dg-warning \"unused parameter\" \"unused parameter warning\" } */\n+{\n+  return 0;\n+}\n+int tt()\n+{\n+  return t(0);\n+}"}, {"sha": "0923cfb8132df28f81121b51d05f6246f0749084", "filename": "gcc/testsuite/gcc.dg/unused-6-no.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Ftestsuite%2Fgcc.dg%2Funused-6-no.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Ftestsuite%2Fgcc.dg%2Funused-6-no.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funused-6-no.c?ref=e73f7547c50e91654c691a620a949085645c4e51", "patch": "@@ -0,0 +1,11 @@\n+/* PR 28875 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -Wextra -Wno-unused-parameter -Wall\" } */\n+static int t(int i) /* { dg-bogus \"unused parameter\" \"unused parameter warning\" } */\n+{\n+  return 0;\n+}\n+int tt()\n+{\n+  return t(0);\n+}"}, {"sha": "bb49a970b49b510f0622fc9bcf9cc0609fb898be", "filename": "gcc/toplev.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e73f7547c50e91654c691a620a949085645c4e51/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=e73f7547c50e91654c691a620a949085645c4e51", "patch": "@@ -1644,6 +1644,19 @@ process_options (void)\n      This can happen with incorrect pre-processed input. */\n   debug_hooks = &do_nothing_debug_hooks;\n \n+  /* This replaces set_Wunused.  */\n+  if (warn_unused_function == -1)\n+    warn_unused_function = warn_unused;\n+  if (warn_unused_label == -1)\n+    warn_unused_label = warn_unused;\n+  /* Wunused-parameter is enabled if both -Wunused -Wextra are enabled.  */\n+  if (warn_unused_parameter == -1)\n+    warn_unused_parameter = (warn_unused && extra_warnings);\n+  if (warn_unused_variable == -1)\n+    warn_unused_variable = warn_unused;\n+  if (warn_unused_value == -1)\n+    warn_unused_value = warn_unused;\n+\n   /* Allow the front end to perform consistency checks and do further\n      initialization based on the command line options.  This hook also\n      sets the original filename if appropriate (e.g. foo.i -> foo.c)"}]}