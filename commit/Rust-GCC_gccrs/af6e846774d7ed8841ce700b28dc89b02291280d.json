{"sha": "af6e846774d7ed8841ce700b28dc89b02291280d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY2ZTg0Njc3NGQ3ZWQ4ODQxY2U3MDBiMjhkYzg5YjAyMjkxMjgwZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2014-01-15T21:41:03Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2014-01-15T21:41:03Z"}, "message": "re PR debug/54694 (internal compiler error: in dwarf2out_frame_debug_expr, at dwarf2out.c:2387)\n\nPR debug/54694\n\nDiagnose frame_pointer_required vs fixed hfp\n\nFrom-SVN: r206647", "tree": {"sha": "d1d3786b095e17f4905aa5aaa2fd19078f41d1a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1d3786b095e17f4905aa5aaa2fd19078f41d1a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af6e846774d7ed8841ce700b28dc89b02291280d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af6e846774d7ed8841ce700b28dc89b02291280d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af6e846774d7ed8841ce700b28dc89b02291280d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af6e846774d7ed8841ce700b28dc89b02291280d/comments", "author": null, "committer": null, "parents": [{"sha": "4583fada2d37b41c5681b9f381f9251c1a5356dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4583fada2d37b41c5681b9f381f9251c1a5356dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4583fada2d37b41c5681b9f381f9251c1a5356dc"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "075582a896f576dbeff6d2c77cfd209aba5c6790", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af6e846774d7ed8841ce700b28dc89b02291280d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af6e846774d7ed8841ce700b28dc89b02291280d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=af6e846774d7ed8841ce700b28dc89b02291280d", "patch": "@@ -1,3 +1,11 @@\n+2014-01-15  Richard Henderson <rth@redhat.com>\n+\n+\tPR debug/54694\n+\t* reginfo.c (global_regs_decl): Globalize.\n+\t* rtl.h (global_regs_decl): Declare.\n+\t* ira.c (do_reload): Diagnose frame_pointer_needed and it\n+\treserved via global_regs.\n+\n 2014-01-15  Teresa Johnson  <tejohnson@google.com>\n \n \t* tree-ssa-sccvn.c (visit_reference_op_call): Handle NULL vdef."}, {"sha": "ee6010ad0397cd0fa33325406bead17e5b8cf360", "filename": "gcc/ira.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af6e846774d7ed8841ce700b28dc89b02291280d/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af6e846774d7ed8841ce700b28dc89b02291280d/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=af6e846774d7ed8841ce700b28dc89b02291280d", "patch": "@@ -5532,6 +5532,18 @@ do_reload (void)\n   if (need_dce && optimize)\n     run_fast_dce ();\n \n+  /* Diagnose uses of the hard frame pointer when it is used as a global\n+     register.  Often we can get away with letting the user appropriate\n+     the frame pointer, but we should let them know when code generation\n+     makes that impossible.  */\n+  if (global_regs[HARD_FRAME_POINTER_REGNUM] && frame_pointer_needed)\n+    {\n+      tree decl = global_regs_decl[HARD_FRAME_POINTER_REGNUM];\n+      error_at (DECL_SOURCE_LOCATION (current_function_decl),\n+                \"frame pointer required, but reserved\");\n+      inform (DECL_SOURCE_LOCATION (decl), \"for %qD\", decl);\n+    }\n+\n   timevar_pop (TV_IRA);\n }\n \f"}, {"sha": "bdb980da3e11a8b5f93997e32ec7e8b5585a2d66", "filename": "gcc/reginfo.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af6e846774d7ed8841ce700b28dc89b02291280d/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af6e846774d7ed8841ce700b28dc89b02291280d/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=af6e846774d7ed8841ce700b28dc89b02291280d", "patch": "@@ -86,7 +86,7 @@ static const char initial_call_really_used_regs[] = CALL_REALLY_USED_REGISTERS;\n char global_regs[FIRST_PSEUDO_REGISTER];\n \n /* Declaration for the global register. */\n-static tree GTY(()) global_regs_decl[FIRST_PSEUDO_REGISTER];\n+tree global_regs_decl[FIRST_PSEUDO_REGISTER];\n \n /* Same information as REGS_INVALIDATED_BY_CALL but in regset form to be used\n    in dataflow more conveniently.  */"}, {"sha": "10ee818a84d7fc4da64f38f7f7d7f8d384495b90", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af6e846774d7ed8841ce700b28dc89b02291280d/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af6e846774d7ed8841ce700b28dc89b02291280d/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=af6e846774d7ed8841ce700b28dc89b02291280d", "patch": "@@ -2795,6 +2795,8 @@ extern void _fatal_insn (const char *, const_rtx, const char *, int, const char\n #define fatal_insn_not_found(insn) \\\n \t_fatal_insn_not_found (insn, __FILE__, __LINE__, __FUNCTION__)\n \n+/* reginfo.c */\n+extern tree GTY(()) global_regs_decl[FIRST_PSEUDO_REGISTER];\n \n \n #endif /* ! GCC_RTL_H */"}, {"sha": "bcf82c2a16df16bfabdc65e364e9e23870098a59", "filename": "gcc/testsuite/gcc.target/i386/pr54694.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af6e846774d7ed8841ce700b28dc89b02291280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54694.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af6e846774d7ed8841ce700b28dc89b02291280d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54694.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54694.c?ref=af6e846774d7ed8841ce700b28dc89b02291280d", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+register void *hfp __asm__(\"%ebp\");\t/* { dg-message \"note: for\" } */\n+\n+extern void g(void *);\n+\n+void f(int x)\t\t\t/* { dg-error \"frame pointer required\" } */\n+{\n+  g(__builtin_alloca(x));\n+}"}]}