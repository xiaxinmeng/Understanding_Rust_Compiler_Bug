{"sha": "9ec98e13b932b9d8404d8d8d61357662e80b35d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVjOThlMTNiOTMyYjlkODQwNGQ4ZDhkNjEzNTc2NjJlODBiMzVkMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-20T14:26:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-02-20T14:26:06Z"}, "message": "[multiple changes]\n\n2015-02-20  Tristan Gingold  <gingold@adacore.com>\n\n\t* opt.ads (GNAT_Mode_Config): New variable.\n\t* opt.adb (Set_Opt_Config_Switches): Consider GNAT_Mode_Config\n\tto set Assertions_Enabled.\n\t* switch-c.adb (Scan_Front_End_Switches): Set GNAT_Mode_Config\n\tfor -gnatg.\n\n2015-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* s-valllu.ads (Scan_Raw_Long_Long_Unsigned): Add an additional\n\tcomment regarding the handling of unterminated fixed-point\n\tconstants.\n\t* s-valuns.ads (Scan_Raw_Unsigned): Add comments\n\tcorresponding to those previously added for\n\tSystem.Val_LLU.Scan_Raw_Long_Long_Unsigned.\n\nFrom-SVN: r220866", "tree": {"sha": "f950b17bcbf2a70920676833247f508791695dab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f950b17bcbf2a70920676833247f508791695dab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ec98e13b932b9d8404d8d8d61357662e80b35d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ec98e13b932b9d8404d8d8d61357662e80b35d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ec98e13b932b9d8404d8d8d61357662e80b35d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ec98e13b932b9d8404d8d8d61357662e80b35d1/comments", "author": null, "committer": null, "parents": [{"sha": "cd8e18e73d8b84988d3c495f3eb8b3baf960b04e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8e18e73d8b84988d3c495f3eb8b3baf960b04e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd8e18e73d8b84988d3c495f3eb8b3baf960b04e"}], "stats": {"total": 92, "additions": 84, "deletions": 8}, "files": [{"sha": "55002a7e29daaefcbf14207a5669028ecadc680a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec98e13b932b9d8404d8d8d61357662e80b35d1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec98e13b932b9d8404d8d8d61357662e80b35d1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9ec98e13b932b9d8404d8d8d61357662e80b35d1", "patch": "@@ -1,3 +1,20 @@\n+2015-02-20  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* opt.ads (GNAT_Mode_Config): New variable.\n+\t* opt.adb (Set_Opt_Config_Switches): Consider GNAT_Mode_Config\n+\tto set Assertions_Enabled.\n+\t* switch-c.adb (Scan_Front_End_Switches): Set GNAT_Mode_Config\n+\tfor -gnatg.\n+\n+2015-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-valllu.ads (Scan_Raw_Long_Long_Unsigned): Add an additional\n+\tcomment regarding the handling of unterminated fixed-point\n+\tconstants.\n+\t* s-valuns.ads (Scan_Raw_Unsigned): Add comments\n+\tcorresponding to those previously added for\n+\tSystem.Val_LLU.Scan_Raw_Long_Long_Unsigned.\n+\n 2015-02-20  Olivier Hainque  <hainque@adacore.com>\n \n \t* g-allein.ads, g-alveop.ads, g-alveop.adb: Code clean ups."}, {"sha": "64680968a61ddba59d537fdec42d7918275fc86b", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec98e13b932b9d8404d8d8d61357662e80b35d1/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec98e13b932b9d8404d8d8d61357662e80b35d1/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=9ec98e13b932b9d8404d8d8d61357662e80b35d1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -187,9 +187,10 @@ package body Opt is\n          --  we do not expect to get any warnings from compiling such a unit.\n \n          --  For an internal unit, assertions/debug pragmas are off unless this\n-         --  is the main unit and they were explicitly enabled. We also make\n-         --  sure we do not assume that values are necessarily valid and that\n-         --  SPARK_Mode is set to its configuration value.\n+         --  is the main unit and they were explicitly enabled, or unless the\n+         --  main unit was compiled in GNAT mode. We also make sure we do not\n+         --  assume that values are necessarily valid and that SPARK_Mode is\n+         --  set to its configuration value.\n \n          if Main_Unit then\n             Assertions_Enabled       := Assertions_Enabled_Config;\n@@ -198,7 +199,11 @@ package body Opt is\n             SPARK_Mode               := SPARK_Mode_Config;\n             SPARK_Mode_Pragma        := SPARK_Mode_Pragma_Config;\n          else\n-            Assertions_Enabled       := False;\n+            if GNAT_Mode_Config then\n+               Assertions_Enabled    := Assertions_Enabled_Config;\n+            else\n+               Assertions_Enabled    := False;\n+            end if;\n             Assume_No_Invalid_Values := False;\n             Check_Policy_List        := Empty;\n             SPARK_Mode               := None;"}, {"sha": "72a5280521bd53fe200b1d9ed8cb24898947a672", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec98e13b932b9d8404d8d8d61357662e80b35d1/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec98e13b932b9d8404d8d8d61357662e80b35d1/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=9ec98e13b932b9d8404d8d8d61357662e80b35d1", "patch": "@@ -2154,6 +2154,12 @@ package Opt is\n    --  GNAT\n    --  True if compiling in GNAT system mode (-gnatg switch)\n \n+   GNAT_Mode_Config : Boolean := False;\n+   --  GNAT\n+   --  True if -gnatg switch is present. GNAT_Mode may be temporary set to\n+   --  True during the analysis of a system unit, but GNAT_Mode_Config must\n+   --  not changed once scanned.\n+\n    --  Setting this switch has the following effects on the language that is\n    --  accepted. Note that several of the following have the effect of changing\n    --  an error to a warning. But warnings are usually treated as fatal errors"}, {"sha": "216ce21351b3d4834d63f8f092642d461784d311", "filename": "gcc/ada/s-valllu.ads", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec98e13b932b9d8404d8d8d61357662e80b35d1/gcc%2Fada%2Fs-valllu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec98e13b932b9d8404d8d8d61357662e80b35d1/gcc%2Fada%2Fs-valllu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valllu.ads?ref=9ec98e13b932b9d8404d8d8d61357662e80b35d1", "patch": "@@ -62,7 +62,7 @@ package System.Val_LLU is\n    --\n    --  Note: these rules correspond to the requirements for leaving the pointer\n    --  positioned in Text_IO.Get. Note that the rules as stated in the RM would\n-   --  seem to imply that for a case like\n+   --  seem to imply that for a case like:\n    --\n    --    8#12345670009#\n    --\n@@ -92,6 +92,15 @@ package System.Val_LLU is\n    --  then the pointer is also left at the initial # character, but constraint\n    --  error is raised reflecting the encounter of an out of range digit.\n    --\n+   --  Finally if we have an unterminated fixed-point constant where the final\n+   --  # or : character is missing, Constraint_Error is raised and the pointer\n+   --  is left pointing past the last digit, as in:\n+   --\n+   --   8#22\n+   --\n+   --  This string results in a Constraint_Error with the pointer pointing\n+   --  past the second 2.\n+   --\n    --  Note: if Str is empty, i.e. if Max is less than Ptr, then this is a\n    --  special case of an all-blank string, and Ptr is unchanged, and hence\n    --  is greater than Max as required in this case."}, {"sha": "cdea7409e234d7b594532bc919de32c03bd7c908", "filename": "gcc/ada/s-valuns.ads", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec98e13b932b9d8404d8d8d61357662e80b35d1/gcc%2Fada%2Fs-valuns.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec98e13b932b9d8404d8d8d61357662e80b35d1/gcc%2Fada%2Fs-valuns.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valuns.ads?ref=9ec98e13b932b9d8404d8d8d61357662e80b35d1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -61,7 +61,45 @@ package System.Val_Uns is\n    --  Constraint_Error is raised.\n    --\n    --  Note: these rules correspond to the requirements for leaving the pointer\n-   --  positioned in Text_IO.Get\n+   --  positioned in Text_IO.Get. Note that the rules as stated in the RM would\n+   --  seem to imply that for a case like:\n+   --\n+   --    8#12345670009#\n+   --\n+   --  the pointer should be left at the first # having scanned out the longest\n+   --  valid integer literal (8), but in fact in this case the pointer points\n+   --  past the final # and Constraint_Error is raised. This is the behavior\n+   --  expected for Text_IO and enforced by the ACATS tests.\n+   --\n+   --  If a based literal is malformed in that a character other than a valid\n+   --  hexadecimal digit is encountered during scanning out the digits after\n+   --  the # (this includes the case of using the wrong terminator, : instead\n+   --  of # or vice versa) there are two cases. If all the digits before the\n+   --  non-digit are in range of the base, as in\n+   --\n+   --    8#100x00#\n+   --    8#100:\n+   --\n+   --  then in this case, the \"base\" value before the initial # is returned as\n+   --  the result, and the pointer points to the initial # character on return.\n+   --\n+   --  If an out of range digit has been detected before the invalid character,\n+   --  as in:\n+   --\n+   --   8#900x00#\n+   --   8#900:\n+   --\n+   --  then the pointer is also left at the initial # character, but constraint\n+   --  error is raised reflecting the encounter of an out of range digit.\n+   --\n+   --  Finally if we have an unterminated fixed-point constant where the final\n+   --  # or : character is missing, Constraint_Error is raised and the pointer\n+   --  is left pointing past the last digit, as in:\n+   --\n+   --   8#22\n+   --\n+   --  This string results in a Constraint_Error with the pointer pointing\n+   --  past the second 2.\n    --\n    --  Note: if Str is empty, i.e. if Max is less than Ptr, then this is a\n    --  special case of an all-blank string, and Ptr is unchanged, and hence"}, {"sha": "7e8f50e099dd8d586d0063b105f3efff329b1835", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ec98e13b932b9d8404d8d8d61357662e80b35d1/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ec98e13b932b9d8404d8d8d61357662e80b35d1/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=9ec98e13b932b9d8404d8d8d61357662e80b35d1", "patch": "@@ -821,6 +821,7 @@ package body Switch.C is\n             when 'g' =>\n                Ptr := Ptr + 1;\n                GNAT_Mode := True;\n+               GNAT_Mode_Config := True;\n                Identifier_Character_Set := 'n';\n                System_Extend_Unit := Empty;\n                Warning_Mode := Treat_As_Error;"}]}