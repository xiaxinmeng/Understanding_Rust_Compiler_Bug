{"sha": "f3344569038591116cc3b5d775443a576d1b7f96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMzNDQ1NjkwMzg1OTExMTZjYzNiNWQ3NzU0NDNhNTc2ZDFiN2Y5Ng==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2015-08-08T11:07:34Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2015-08-08T11:07:34Z"}, "message": "Implement N4089 Safe conversions in unique_ptr<T[]> (LWG 2118) and N4366 LWG 2228...\n\n2015-08-08  Ville Voutilainen  <ville.voutilainen@gmail.com>\n\n\tImplement N4089 Safe conversions in unique_ptr<T[]> (LWG 2118)\n\tand N4366 LWG 2228: Missing SFINAE rule in unique_ptr\n\ttemplated assignment\n\t* include/bits/unique_ptr.h\n\t(__remove_cv, __is_derived_Tp): Remove.\n\t(default_delete::default_delete(const default_delete<_Up[]>)):\n\tConstrain with array convertibility.\n\t(default_delete::operator(_Up*)): Turn into a template,\n\tconstrain with array convertibility.\n\t(__safe_conversion_up): New, single object version.\n\t(unique_ptr(unique_ptr<_Up, _Ep>&&)): Constrain with deleter\n\tconvertibility.\n\t(unique_ptr::operator=(unique_ptr<_Up, _Ep>&&)): Likewise, and add\n\tis_assignable as a constraint.\n\t(__safe_conversion_up): Array version, renamed from __safe_conversion,\n\tupdated to implement N4089.\n\t(__safe_conversion_raw): New.\n\t(unique_ptr(_Up)): Turn into a template, constrain with array\n\tconvertibility.\n\t(unique_ptr(_Up,\n        typename conditional<is_reference<deleter_type>::value,\n        deleter_type, const deleter_type&>::type)): Likewise.\n\t(unique_ptr(_Up, typename\n \tremove_reference<deleter_type>::type&&)): Likewise.\n\t(unique_ptr(unique_ptr<_Up, _Ep>&&)): Likewise.\n\t(operator=(unique_ptr<_Up, _Ep>&&)): Likewise, and add\n\tis_assignable as a constraint (array version).\n\t(reset(_Up)): Turn into a template, constrain with array\n\tconvertibility.\n\t(reset(nullptr_t)): New.\n\t* testsuite/20_util/default_delete/48631_neg.cc: Adjust.\n\t* testsuite/20_util/unique_ptr/assign/48635.cc: Likewise.\n\t* testsuite/20_util/unique_ptr/assign/48635_neg.cc: Likewise.\n\t* testsuite/20_util/unique_ptr/assign/cv_qual.cc: Likewise.\n\t* testsuite/20_util/unique_ptr/cons/cv_qual.cc: Likewise.\n\t* testsuite/20_util/unique_ptr/dr2228.cc: New.\n\t* testsuite/20_util/unique_ptr/modifiers/cv_qual.cc: Adjust.\n\nFrom-SVN: r226733", "tree": {"sha": "97230bb560a8b0cb2868d38cf3d214654664119c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97230bb560a8b0cb2868d38cf3d214654664119c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3344569038591116cc3b5d775443a576d1b7f96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3344569038591116cc3b5d775443a576d1b7f96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3344569038591116cc3b5d775443a576d1b7f96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3344569038591116cc3b5d775443a576d1b7f96/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d251765bed679b14b4f9f2d5ade7870b7b9d7c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d251765bed679b14b4f9f2d5ade7870b7b9d7c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d251765bed679b14b4f9f2d5ade7870b7b9d7c5"}], "stats": {"total": 335, "additions": 233, "deletions": 102}, "files": [{"sha": "fc8b2b8a153730b4cb634ed323c411ef84eebcb3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f3344569038591116cc3b5d775443a576d1b7f96", "patch": "@@ -1,3 +1,43 @@\n+2015-08-08  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement N4089 Safe conversions in unique_ptr<T[]> (LWG 2118)\n+\tand N4366 LWG 2228: Missing SFINAE rule in unique_ptr\n+\ttemplated assignment\n+\t* include/bits/unique_ptr.h\n+\t(__remove_cv, __is_derived_Tp): Remove.\n+\t(default_delete::default_delete(const default_delete<_Up[]>)):\n+\tConstrain with array convertibility.\n+\t(default_delete::operator(_Up*)): Turn into a template,\n+\tconstrain with array convertibility.\n+\t(__safe_conversion_up): New, single object version.\n+\t(unique_ptr(unique_ptr<_Up, _Ep>&&)): Constrain with deleter\n+\tconvertibility.\n+\t(unique_ptr::operator=(unique_ptr<_Up, _Ep>&&)): Likewise, and add\n+\tis_assignable as a constraint.\n+\t(__safe_conversion_up): Array version, renamed from __safe_conversion,\n+\tupdated to implement N4089.\n+\t(__safe_conversion_raw): New.\n+\t(unique_ptr(_Up)): Turn into a template, constrain with array\n+\tconvertibility.\n+\t(unique_ptr(_Up,\n+\ttypename conditional<is_reference<deleter_type>::value,\n+\tdeleter_type, const deleter_type&>::type)): Likewise.\n+\t(unique_ptr(_Up, typename\n+\tremove_reference<deleter_type>::type&&)): Likewise.\n+\t(unique_ptr(unique_ptr<_Up, _Ep>&&)): Likewise.\n+\t(operator=(unique_ptr<_Up, _Ep>&&)): Likewise, and add\n+\tis_assignable as a constraint (array version).\n+\t(reset(_Up)): Turn into a template, constrain with array\n+\tconvertibility.\n+\t(reset(nullptr_t)): New.\n+\t* testsuite/20_util/default_delete/48631_neg.cc: Adjust.\n+\t* testsuite/20_util/unique_ptr/assign/48635.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/assign/48635_neg.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/assign/cv_qual.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/cons/cv_qual.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/dr2228.cc: New.\n+\t* testsuite/20_util/unique_ptr/modifiers/cv_qual.cc: Adjust.\n+\n 2015-08-05  Nikolai Bozhenov  <n.bozhenov@samsung.com>\n \n \t* testsuite/20_util/enable_shared_from_this/cons/constexpr.cc: Remove"}, {"sha": "8ab55da75d310811363cc1651d3d00bec9a4c9cf", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 95, "deletions": 73, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=f3344569038591116cc3b5d775443a576d1b7f96", "patch": "@@ -83,16 +83,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct default_delete<_Tp[]>\n     {\n-    private:\n-      template<typename _Up>\n-\tusing __remove_cv = typename remove_cv<_Up>::type;\n-\n-      // Like is_base_of<_Tp, _Up> but false if unqualified types are the same\n-      template<typename _Up>\n-\tusing __is_derived_Tp\n-\t  = __and_< is_base_of<_Tp, _Up>,\n-\t\t    __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;\n-\n     public:\n       /// Default constructor\n       constexpr default_delete() noexcept = default;\n@@ -107,21 +97,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * pointer to the base type.\n        */\n       template<typename _Up, typename = typename\n-\t       enable_if<!__is_derived_Tp<_Up>::value>::type>\n+\t       enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type>\n         default_delete(const default_delete<_Up[]>&) noexcept { }\n \n       /// Calls @c delete[] @p __ptr\n-      void\n-      operator()(_Tp* __ptr) const\n+      template<typename _Up>\n+      typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type\n+\toperator()(_Up* __ptr) const\n       {\n \tstatic_assert(sizeof(_Tp)>0,\n \t\t      \"can't delete pointer to incomplete type\");\n \tdelete [] __ptr;\n       }\n-\n-      template<typename _Up>\n-\ttypename enable_if<__is_derived_Tp<_Up>::value>::type\n-\toperator()(_Up*) const = delete;\n     };\n \n   /// 20.7.1.2 unique_ptr for single objects.\n@@ -151,6 +138,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Tp                       element_type;\n       typedef _Dp                       deleter_type;\n \n+\n+      // helper template for detecting a safe conversion from another\n+      // unique_ptr\n+      template<typename _Up, typename _Ep>\n+\tusing __safe_conversion_up = __and_<\n+\t        is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,\n+                __not_<is_array<_Up>>,\n+                __or_<__and_<is_reference<deleter_type>,\n+                             is_same<deleter_type, _Ep>>,\n+                      __and_<__not_<is_reference<deleter_type>>,\n+                             is_convertible<_Ep, deleter_type>>\n+                >\n+              >;\n+\n       // Constructors.\n \n       /// Default constructor, creates a unique_ptr that owns nothing.\n@@ -212,8 +213,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * and @p __u has a compatible deleter type.\n        */\n       template<typename _Up, typename _Ep, typename = _Require<\n-\t       is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,\n-\t       __not_<is_array<_Up>>,\n+               __safe_conversion_up<_Up, _Ep>,\n \t       typename conditional<is_reference<_Dp>::value,\n \t\t\t\t    is_same<_Ep, _Dp>,\n \t\t\t\t    is_convertible<_Ep, _Dp>>::type>>\n@@ -261,11 +261,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * Invokes the deleter first if this object owns a pointer.\n        */\n       template<typename _Up, typename _Ep>\n-\ttypename enable_if< __and_<\n-\t  is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,\n-\t  __not_<is_array<_Up>>\n-\t  >::value,\n-\t  unique_ptr&>::type\n+        typename enable_if< __and_<\n+          __safe_conversion_up<_Up, _Ep>,\n+          is_assignable<deleter_type&, _Ep&&>\n+          >::value,\n+          unique_ptr&>::type\n \toperator=(unique_ptr<_Up, _Ep>&& __u) noexcept\n \t{\n \t  reset(__u.release());\n@@ -391,23 +391,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  = __and_< is_base_of<_Tp, _Up>,\n \t\t    __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;\n \n-      template<typename _Up, typename _Ep,\n-\t       typename _Tp_pointer = typename _Pointer::type,\n-\t       typename _Up_pointer = typename unique_ptr<_Up, _Ep>::pointer>\n-\tusing __safe_conversion = __and_<\n-\t    is_convertible<_Up_pointer, _Tp_pointer>,\n-\t    is_array<_Up>,\n-\t    __or_<__not_<is_pointer<_Up_pointer>>,\n-\t\t  __not_<is_pointer<_Tp_pointer>>,\n-\t\t  __not_<__is_derived_Tp<typename remove_extent<_Up>::type>>\n-\t    >\n-\t  >;\n \n     public:\n       typedef typename _Pointer::type\tpointer;\n       typedef _Tp\t\t \telement_type;\n       typedef _Dp                       deleter_type;\n \n+      // helper template for detecting a safe conversion from another\n+      // unique_ptr\n+      template<typename _Up, typename _Ep,\n+               typename _Up_up = unique_ptr<_Up, _Ep>,\n+\t       typename _Up_element_type = typename _Up_up::element_type>\n+\tusing __safe_conversion_up = __and_<\n+          is_array<_Up>,\n+          is_same<pointer, element_type*>,\n+          is_same<typename _Up_up::pointer, _Up_element_type*>,\n+          is_convertible<_Up_element_type(*)[], element_type(*)[]>,\n+          __or_<__and_<is_reference<deleter_type>, is_same<deleter_type, _Ep>>,\n+                __and_<__not_<is_reference<deleter_type>>,\n+                       is_convertible<_Ep, deleter_type>>>\n+        >;\n+\n+      // helper template for detecting a safe conversion from a raw pointer\n+      template<typename _Up>\n+        using __safe_conversion_raw = __and_<\n+          __or_<__or_<is_same<_Up, pointer>,\n+                      is_same<_Up, nullptr_t>>,\n+                __and_<is_pointer<_Up>,\n+                       is_same<pointer, element_type*>,\n+                       is_convertible<\n+                         typename remove_pointer<_Up>::type(*)[],\n+                         element_type(*)[]>\n+                >\n+          >\n+        >;\n+\n       // Constructors.\n \n       /// Default constructor, creates a unique_ptr that owns nothing.\n@@ -418,42 +436,48 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /** Takes ownership of a pointer.\n        *\n-       * @param __p  A pointer to an array of @c element_type\n+       * @param __p  A pointer to an array of a type safely convertible\n+       * to an array of @c element_type\n        *\n        * The deleter will be value-initialized.\n        */\n+      template<typename _Up,\n+               typename = typename enable_if<\n+                 __safe_conversion_raw<_Up>::value, bool>::type>\n       explicit\n-      unique_ptr(pointer __p) noexcept\n+      unique_ptr(_Up __p) noexcept\n       : _M_t(__p, deleter_type())\n       { static_assert(!is_pointer<deleter_type>::value,\n \t\t      \"constructed with null function pointer deleter\"); }\n \n-      // Disable construction from convertible pointer types.\n-      template<typename _Up, typename = _Require<is_pointer<pointer>,\n-\t       is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>\n-\texplicit\n-\tunique_ptr(_Up* __p) = delete;\n-\n       /** Takes ownership of a pointer.\n        *\n-       * @param __p  A pointer to an array of @c element_type\n+       * @param __p  A pointer to an array of a type safely convertible\n+       * to an array of @c element_type\n        * @param __d  A reference to a deleter.\n        *\n        * The deleter will be initialized with @p __d\n        */\n-      unique_ptr(pointer __p,\n-\t  typename conditional<is_reference<deleter_type>::value,\n-\t      deleter_type, const deleter_type&>::type __d) noexcept\n+      template<typename _Up,\n+               typename = typename enable_if<\n+                 __safe_conversion_raw<_Up>::value, bool>::type>\n+      unique_ptr(_Up __p,\n+                 typename conditional<is_reference<deleter_type>::value,\n+                 deleter_type, const deleter_type&>::type __d) noexcept\n       : _M_t(__p, __d) { }\n \n       /** Takes ownership of a pointer.\n        *\n-       * @param __p  A pointer to an array of @c element_type\n+       * @param __p  A pointer to an array of a type safely convertible\n+       * to an array of @c element_type\n        * @param __d  A reference to a deleter.\n        *\n        * The deleter will be initialized with @p std::move(__d)\n        */\n-      unique_ptr(pointer __p, typename\n+      template<typename _Up,\n+               typename = typename enable_if<\n+                 __safe_conversion_raw<_Up>::value, bool>::type>\n+      unique_ptr(_Up __p, typename\n \t\t remove_reference<deleter_type>::type&& __d) noexcept\n       : _M_t(std::move(__p), std::move(__d))\n       { static_assert(!is_reference<deleter_type>::value,\n@@ -467,11 +491,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }\n \n       template<typename _Up, typename _Ep,\n-\t       typename = _Require<__safe_conversion<_Up, _Ep>,\n-\t\t typename conditional<is_reference<_Dp>::value,\n-\t\t\t\t      is_same<_Ep, _Dp>,\n-\t\t\t\t      is_convertible<_Ep, _Dp>>::type\n-\t       >>\n+\t       typename = _Require<__safe_conversion_up<_Up, _Ep>>>\n \tunique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept\n \t: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))\n \t{ }\n@@ -510,7 +530,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        */\n       template<typename _Up, typename _Ep>\n \ttypename\n-\tenable_if<__safe_conversion<_Up, _Ep>::value, unique_ptr&>::type\n+\tenable_if<__and_<__safe_conversion_up<_Up, _Ep>,\n+                         is_assignable<deleter_type&, _Ep&&>\n+                  >::value,\n+                  unique_ptr&>::type\n \toperator=(unique_ptr<_Up, _Ep>&& __u) noexcept\n \t{\n \t  reset(__u.release());\n@@ -572,19 +595,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        * The deleter will be invoked if a pointer is already owned.\n        */\n+      template <typename _Up,\n+                typename = _Require<\n+                  __or_<is_same<_Up, pointer>,\n+                        __and_<is_same<pointer, element_type*>,\n+                               is_pointer<_Up>,\n+                               is_convertible<\n+                                 typename remove_pointer<_Up>::type(*)[],\n+                                 element_type(*)[]\n+                               >\n+                        >\n+                  >\n+               >>\n       void\n-      reset(pointer __p = pointer()) noexcept\n+      reset(_Up __p) noexcept\n       {\n \tusing std::swap;\n \tswap(std::get<0>(_M_t), __p);\n \tif (__p != nullptr)\n \t  get_deleter()(__p);\n       }\n \n-      // Disable resetting from convertible pointer types.\n-      template<typename _Up, typename = _Require<is_pointer<pointer>,\n-\t       is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>\n-\tvoid reset(_Up*) = delete;\n+      void reset(nullptr_t = nullptr) noexcept\n+      {\n+        reset(pointer());\n+      }\n \n       /// Exchange the pointer and deleter with another object.\n       void\n@@ -597,19 +632,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Disable copy from lvalue.\n       unique_ptr(const unique_ptr&) = delete;\n       unique_ptr& operator=(const unique_ptr&) = delete;\n-\n-      // Disable construction from convertible pointer types.\n-      template<typename _Up, typename = _Require<is_pointer<pointer>,\n-\t       is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>\n-\tunique_ptr(_Up*, typename\n-\t\t   conditional<is_reference<deleter_type>::value,\n-\t\t   deleter_type, const deleter_type&>::type) = delete;\n-\n-      // Disable construction from convertible pointer types.\n-      template<typename _Up, typename = _Require<is_pointer<pointer>,\n-\t       is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>\n-\tunique_ptr(_Up*, typename\n-\t\t   remove_reference<deleter_type>::type&&) = delete;\n     };\n \n   template<typename _Tp, typename _Dp>"}, {"sha": "6ee12787271a59e319ce793c7182100673989977", "filename": "libstdc++-v3/testsuite/20_util/default_delete/48631_neg.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2F48631_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2F48631_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2F48631_neg.cc?ref=f3344569038591116cc3b5d775443a576d1b7f96", "patch": "@@ -26,6 +26,5 @@ struct D : B { };\n // libstdc++/48631\n D d;\n std::default_delete<B[]> db;\n-typedef decltype(db(&d)) type; // { dg-error \"use of deleted function\" }\n-// { dg-prune-output \"declared\" }\n-// { dg-prune-output \"invalid\" }\n+typedef decltype(db(&d)) type; // { dg-error \"no match\" }\n+// { dg-error \"no type\" \"\" { target *-*-* } 106 }"}, {"sha": "37d6c36ecb1513b226b9015b1000944a6877df49", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/48635.cc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635.cc?ref=f3344569038591116cc3b5d775443a576d1b7f96", "patch": "@@ -59,16 +59,8 @@ void test01()\n \n   DDeleter dd;\n \n-  std::unique_ptr<int, DDeleter&> p1t(nullptr, dd);\n-  std::unique_ptr<int, Deleter&> p2t(nullptr, d);\n-  p2t = std::move(p1t);\n-\n   std::unique_ptr<int[], Deleter&> p1a(nullptr, d), p2a(nullptr, d);\n   p2a = std::move(p1a);\n-\n-  std::unique_ptr<int[], DDeleter&> p1at(nullptr, dd);\n-  std::unique_ptr<int[], Deleter&> p2at(nullptr, d);\n-  p2at = std::move(p1at);\n }\n \n int main()"}, {"sha": "68be4c41e7085fc06357541e4f1b2e15ea099fe2", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/48635_neg.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635_neg.cc?ref=f3344569038591116cc3b5d775443a576d1b7f96", "patch": "@@ -24,7 +24,7 @@ struct D;\n \n struct B\n {\n- B& operator=(D&) = delete; // { dg-error \"declared here\" }\n+ B& operator=(D&) = delete;\n \n  template<class T>\n    void operator()(T*) const {}\n@@ -39,12 +39,14 @@ void f()\n   D d;\n \n   std::unique_ptr<int, B&> ub(nullptr, b);\n+  std::unique_ptr<int, B> ub2(nullptr, b);\n   std::unique_ptr<int, D&> ud(nullptr, d);\n-  ub = std::move(ud);\n-// { dg-error \"use of deleted function\" \"\" { target *-*-* } 272 }\n+  ub = std::move(ud); // { dg-error \"no match\" }\n+  ub2 = ud; // { dg-error \"no match\" }\n+// { dg-error \"no type\" \"\" { target *-*-* } 269 }\n \n   std::unique_ptr<int[], B&> uba(nullptr, b);\n   std::unique_ptr<int[], D&> uda(nullptr, d);\n-  uba = std::move(uda);\n-// { dg-error \"use of deleted function\" \"\" { target *-*-* } 517 }\n+  uba = std::move(uda); // { dg-error \"no match\" }\n+// { dg-error \"no type\" \"\" { target *-*-* } 537 }\n }"}, {"sha": "da73fccacec949f4f77d9926c100bd298e89c04a", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/cv_qual.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fcv_qual.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fcv_qual.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fcv_qual.cc?ref=f3344569038591116cc3b5d775443a576d1b7f96", "patch": "@@ -82,8 +82,10 @@ struct deleter\n void\n test04()\n {\n-  // Allow conversions from user-defined pointer-like types\n+  // Disallow conversions from incompatible deleter\n   std::unique_ptr<B[], deleter<A_pointer>> p;\n   std::unique_ptr<A[], deleter<A*>> upA;\n-  upA = std::move(p);\n+  upA = std::move(p);  // { dg-error \"no match\" }\n+  // { dg-error \"no type\" \"\" { target *-*-* } 537 }\n+  // { dg-error \"no matching function\" \"\" { target *-*-* } 614 }\n }"}, {"sha": "f399b7cb2a07a3aa1ade0b5f4ab48562f45e0c11", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/cv_qual.cc", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fcv_qual.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fcv_qual.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fcv_qual.cc?ref=f3344569038591116cc3b5d775443a576d1b7f96", "patch": "@@ -88,11 +88,25 @@ void\n test07()\n {\n   // Allow conversions from user-defined pointer-like types\n+  // for the single-object version\n   A_pointer p;\n-  std::unique_ptr<A[]> upA(p);\n-  std::unique_ptr<const A[]> cA(p);\n-  std::unique_ptr<volatile A[]> vA(p);\n-  std::unique_ptr<const volatile A[]> cvA(p);\n+  std::unique_ptr<A> upA(p);\n+  std::unique_ptr<const A> cA(p);\n+  std::unique_ptr<volatile A> vA(p);\n+  std::unique_ptr<const volatile A> cvA(p);\n+  // Allow conversions from user-defined pointer-like types\n+  // for the array version when the type is converted explicitly\n+  std::unique_ptr<A[]> upA2((A*)p);\n+  std::unique_ptr<const A[]> cA2((A*)p);\n+  std::unique_ptr<volatile A[]> vA2((A*)p);\n+  std::unique_ptr<const volatile A[]> cvA2((A*)p);\n+  // Disallow conversions from user-defined pointer-like types\n+  // for the array version\n+  std::unique_ptr<A[]> upA3(p); // { dg-error \"no matching function\" }\n+  std::unique_ptr<const A[]> cA3(p); // { dg-error \"no matching function\" }\n+  std::unique_ptr<volatile A[]> vA3(p); // { dg-error \"no matching function\" }\n+  std::unique_ptr<const volatile A[]> cvA3(p); // { dg-error \"no matching function\" }\n+  // { dg-error \"no type\" \"\" { target *-*-* } 445 }\n }\n \n template<typename T>\n@@ -108,8 +122,8 @@ struct deleter\n void\n test08()\n {\n-  // Allow conversions from user-defined pointer-like types\n+  // Disallow conversions from non-assignable deleter\n   std::unique_ptr<B[], deleter<A_pointer>> p;\n-  std::unique_ptr<A[], deleter<A*>> upA(std::move(p));\n+  std::unique_ptr<A[], deleter<A*>> upA(std::move(p)); // { dg-error \"no matching function\" }\n }\n "}, {"sha": "ae996daad2d7db4185d4916a46bc364932828793", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/dr2228.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fdr2228.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fdr2228.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fdr2228.cc?ref=f3344569038591116cc3b5d775443a576d1b7f96", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <type_traits>\n+\n+struct do_nothing\n+{\n+    template <class T>\n+    void operator()(T*) {}\n+};\n+\n+int\n+main()\n+{\n+    int i = 0;\n+    std::unique_ptr<int, do_nothing> p1(&i);\n+    std::unique_ptr<int> p2;\n+    static_assert(!std::is_assignable<decltype(p2), decltype(p1)>::value, \"\");\n+\n+}"}, {"sha": "4ae2f9de48bd228c597bf191824c3160435e3944", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/modifiers/cv_qual.cc", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Fcv_qual.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3344569038591116cc3b5d775443a576d1b7f96/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Fcv_qual.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Fcv_qual.cc?ref=f3344569038591116cc3b5d775443a576d1b7f96", "patch": "@@ -66,14 +66,36 @@ struct A_pointer { operator A*() const { return nullptr; } };\n void\n test07()\n {\n-  // Allow conversions from user-defined pointer-like types\n   A_pointer p;\n-  std::unique_ptr<A[]> upA;\n+  // Allow conversions from user-defined pointer-like types\n+  // for the single-object version\n+  std::unique_ptr<A> upA;\n   upA.reset(p);\n-  std::unique_ptr<const A[]> cA;\n+  std::unique_ptr<const A> cA;\n   cA.reset(p);\n-  std::unique_ptr<volatile A[]> vA;\n+  std::unique_ptr<volatile A> vA;\n   vA.reset(p);\n-  std::unique_ptr<const volatile A[]> cvA;\n+  std::unique_ptr<const volatile A> cvA;\n   cvA.reset(p);\n+  // Allow conversions from user-defined pointer-like types\n+  // for the array version when the type is converted explicitly\n+  std::unique_ptr<A[]> upA2;\n+  upA2.reset((A*)p);\n+  std::unique_ptr<const A[]> cA2;\n+  cA2.reset((A*)p);\n+  std::unique_ptr<volatile A[]> vA2;\n+  vA2.reset((A*)p);\n+  std::unique_ptr<const volatile A[]> cvA2;\n+  cvA2.reset((A*)p);\n+  // Disallow conversions from user-defined pointer-like types\n+  // for the array version\n+  std::unique_ptr<A[]> upA3;\n+  upA3.reset(p); // { dg-error \"no matching function\" }\n+  std::unique_ptr<const A[]> cA3;\n+  cA3.reset(p); // { dg-error \"no matching function\" }\n+  std::unique_ptr<volatile A[]> vA3;\n+  vA3.reset(p); // { dg-error \"no matching function\" }\n+  std::unique_ptr<const volatile A[]> cvA3;\n+  cvA3.reset(p); // { dg-error \"no matching function\" }\n+  // { dg-error \"no matching function\" \"\" { target *-*-* } 614 }\n }"}]}