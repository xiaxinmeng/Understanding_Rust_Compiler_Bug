{"sha": "f0e5e942351ba2b2637efdcb092adc4eeb92fcc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBlNWU5NDIzNTFiYTJiMjYzN2VmZGNiMDkyYWRjNGVlYjkyZmNjMw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2018-06-06T22:54:17Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2018-06-06T22:54:17Z"}, "message": "re PR target/85657 (Make __ibm128 a separate type, even if long double uses the IBM double-double format)\n\n[gcc]\n2018-06-06  Michael Meissner  <meissner@linux.ibm.com>\n\n\tPR target/85657\n\t* config/rs6000/rs6000-builtin.def (BU_IBM128_2): New helper\n\tmacro for __ibm128 built-in functions.\n\t(PACK_IF): Add __ibm128 pack/unpack functions.\n\t(UNPACK_IF): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Do not\n\tenable long double built-in functions if long double is IEEE\n\t128-bit floating point.\n\t(rs6000_invalid_builtin): Update long double built-in function\n\terror message.\n\t(rs6000_expand_builtin): For PACK_IF and UNPACK_IF built-in\n\tfunctions, adjust the built-in function to use the long double\n\tbuilt-in function if __ibm128 and long double are the same type.\n\t* doc/extend.texi (PowerPC builtins): Update documention for\n\t__builtin_{,un}pack_longdouble.  Add documentation for\n\t__builtin_{,un}pack_ibm128.\n\n[gcc/testsuite]\n2018-06-06  Michael Meissner  <meissner@linux.ibm.com>\n\n\tPR target/85657\n\t* gcc.target/powerpc/pr85657-4.c: New tests.\n\t* gcc.target/powerpc/pr85657-5.c: Likewise.\n\t* gcc.target/powerpc/pr85657-6.c: Likewise.\n\nFrom-SVN: r261253", "tree": {"sha": "598a1f9722200d8c4339c9a6fb32b277ed497953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/598a1f9722200d8c4339c9a6fb32b277ed497953"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0e5e942351ba2b2637efdcb092adc4eeb92fcc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e5e942351ba2b2637efdcb092adc4eeb92fcc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0e5e942351ba2b2637efdcb092adc4eeb92fcc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e5e942351ba2b2637efdcb092adc4eeb92fcc3/comments", "author": null, "committer": null, "parents": [{"sha": "a983358b0e0cb900d15ab15644dc436df3f15458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a983358b0e0cb900d15ab15644dc436df3f15458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a983358b0e0cb900d15ab15644dc436df3f15458"}], "stats": {"total": 107, "additions": 98, "deletions": 9}, "files": [{"sha": "6d5a9b0dc9f1036d51a4fa50de659cba9b30e6f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e5e942351ba2b2637efdcb092adc4eeb92fcc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e5e942351ba2b2637efdcb092adc4eeb92fcc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f0e5e942351ba2b2637efdcb092adc4eeb92fcc3", "patch": "@@ -18,6 +18,23 @@\n \tlong double is IBM extended double.  Make __float128 use the long\n \tdouble type if long double is IEEE 128-bit.\n \n+\tPR target/85657\n+\t* config/rs6000/rs6000-builtin.def (BU_IBM128_2): New helper\n+\tmacro for __ibm128 built-in functions.\n+\t(PACK_IF): Add __ibm128 pack/unpack functions.\n+\t(UNPACK_IF): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Do not\n+\tenable long double built-in functions if long double is IEEE\n+\t128-bit floating point.\n+\t(rs6000_invalid_builtin): Update long double built-in function\n+\terror message.\n+\t(rs6000_expand_builtin): For PACK_IF and UNPACK_IF built-in\n+\tfunctions, adjust the built-in function to use the long double\n+\tbuilt-in function if __ibm128 and long double are the same type.\n+\t* doc/extend.texi (PowerPC builtins): Update documention for\n+\t__builtin_{,un}pack_longdouble.  Add documentation for\n+\t__builtin_{,un}pack_ibm128.\n+\n 2018-06-06  Jim Wilson  <jimw@sifive.com>\n \n \t* config/riscv/riscv.c (enum riscv_privilege_levels): New."}, {"sha": "98702c7cf793d50d0c8e2d4e45626684198baf56", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e5e942351ba2b2637efdcb092adc4eeb92fcc3/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e5e942351ba2b2637efdcb092adc4eeb92fcc3/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=f0e5e942351ba2b2637efdcb092adc4eeb92fcc3", "patch": "@@ -628,6 +628,17 @@\n \t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+/* 128-bit __ibm128 floating point builtins (use -mfloat128 to indicate that\n+   __ibm128 is available).  */\n+#define BU_IBM128_2(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n+  RS6000_BUILTIN_2 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    (RS6000_BTM_HARD_FLOAT\t\t/* MASK */\t\\\n+\t\t     | RS6000_BTM_FLOAT128),\t\t\t\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n /* Miscellaneous builtins for instructions added in ISA 3.0.  These\n    instructions don't require either the DFP or VSX options, just the basic\n    ISA 3.0 enablement since they operate on general purpose registers.  */\n@@ -2324,6 +2335,9 @@ BU_P9_64BIT_MISC_0 (DARN,\t\"darn\",\t\t\tMISC, darn)\n BU_LDBL128_2 (PACK_TF,\t\t\"pack_longdouble\",\tCONST,\tpacktf)\n BU_LDBL128_2 (UNPACK_TF,\t\"unpack_longdouble\",\tCONST,\tunpacktf)\n \n+BU_IBM128_2 (PACK_IF,\t\t\"pack_ibm128\",\t\tCONST,\tpackif)\n+BU_IBM128_2 (UNPACK_IF,\t\t\"unpack_ibm128\",\tCONST,\tunpackif)\n+\n BU_P7_MISC_2 (PACK_V1TI,\t\"pack_vector_int128\",\tCONST,\tpackv1ti)\n BU_P7_MISC_2 (UNPACK_V1TI,\t\"unpack_vector_int128\",\tCONST,\tunpackv1ti)\n "}, {"sha": "04186a07cd280e3a145c76634b413b1f4de258a2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e5e942351ba2b2637efdcb092adc4eeb92fcc3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e5e942351ba2b2637efdcb092adc4eeb92fcc3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f0e5e942351ba2b2637efdcb092adc4eeb92fcc3", "patch": "@@ -3907,7 +3907,9 @@ rs6000_builtin_mask_calculate (void)\n \t  | ((TARGET_HTM)\t\t    ? RS6000_BTM_HTM\t   : 0)\n \t  | ((TARGET_DFP)\t\t    ? RS6000_BTM_DFP\t   : 0)\n \t  | ((TARGET_HARD_FLOAT)\t    ? RS6000_BTM_HARD_FLOAT : 0)\n-\t  | ((TARGET_LONG_DOUBLE_128)\t    ? RS6000_BTM_LDBL128   : 0)\n+\t  | ((TARGET_LONG_DOUBLE_128\n+\t      && TARGET_HARD_FLOAT\n+\t      && !TARGET_IEEEQUAD)\t    ? RS6000_BTM_LDBL128   : 0)\n \t  | ((TARGET_FLOAT128_TYPE)\t    ? RS6000_BTM_FLOAT128  : 0)\n \t  | ((TARGET_FLOAT128_HW)\t    ? RS6000_BTM_FLOAT128_HW : 0));\n }\n@@ -15339,10 +15341,15 @@ rs6000_invalid_builtin (enum rs6000_builtins fncode)\n   else if ((fnmask & RS6000_BTM_P9_MISC) == RS6000_BTM_P9_MISC)\n     error (\"builtin function %qs requires the %qs option\", name,\n \t   \"-mcpu=power9\");\n-  else if ((fnmask & (RS6000_BTM_HARD_FLOAT | RS6000_BTM_LDBL128))\n-\t   == (RS6000_BTM_HARD_FLOAT | RS6000_BTM_LDBL128))\n-    error (\"builtin function %qs requires the %qs and %qs options\",\n-\t   name, \"-mhard-float\", \"-mlong-double-128\");\n+  else if ((fnmask & RS6000_BTM_LDBL128) == RS6000_BTM_LDBL128)\n+    {\n+      if (!TARGET_HARD_FLOAT)\n+\terror (\"builtin function %qs requires the %qs option\", name,\n+\t       \"-mhard-float\");\n+      else\n+\terror (\"builtin function %qs requires the %qs option\", name,\n+\t       TARGET_IEEEQUAD ? \"-mabi=ibmlongdouble\" : \"-mlong-double-128\");\n+    }\n   else if ((fnmask & RS6000_BTM_HARD_FLOAT) != 0)\n     error (\"builtin function %qs requires the %qs option\", name,\n \t   \"-mhard-float\");\n@@ -16213,6 +16220,26 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t}\n       break;\n \n+      /* For the pack and unpack int128 routines, fix up the builtin so it\n+\t uses the correct IBM128 type.  */\n+    case MISC_BUILTIN_PACK_IF:\n+      if (TARGET_LONG_DOUBLE_128 && !TARGET_IEEEQUAD)\n+\t{\n+\t  icode = CODE_FOR_packtf;\n+\t  fcode = MISC_BUILTIN_PACK_TF;\n+\t  uns_fcode = (size_t)fcode;\n+\t}\n+      break;\n+\n+    case MISC_BUILTIN_UNPACK_IF:\n+      if (TARGET_LONG_DOUBLE_128 && !TARGET_IEEEQUAD)\n+\t{\n+\t  icode = CODE_FOR_unpacktf;\n+\t  fcode = MISC_BUILTIN_UNPACK_TF;\n+\t  uns_fcode = (size_t)fcode;\n+\t}\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "46b9a9251ce06cfb6de099a41b26fb1724310bfa", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e5e942351ba2b2637efdcb092adc4eeb92fcc3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e5e942351ba2b2637efdcb092adc4eeb92fcc3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f0e5e942351ba2b2637efdcb092adc4eeb92fcc3", "patch": "@@ -15801,6 +15801,8 @@ processors:\n @smallexample\n uint64_t __builtin_ppc_get_timebase ();\n unsigned long __builtin_ppc_mftb ();\n+__ibm128 __builtin_unpack_ibm128 (__ibm128, int);\n+__ibm128 __builtin_pack_ibm128 (double, double);\n @end smallexample\n \n The @code{__builtin_ppc_get_timebase} and @code{__builtin_ppc_mftb}\n@@ -15883,10 +15885,32 @@ the reciprocal estimate instructions.\n The following functions require @option{-mhard-float} and\n @option{-mmultiple} options.\n \n-@smallexample\n-long double __builtin_pack_longdouble (double, double);\n-double __builtin_unpack_longdouble (long double, int);\n-@end smallexample\n+The @code{__builtin_unpack_longdouble} function takes a\n+@code{long double} argument and a compile time constant of 0 or 1.  If\n+the constant is 0, the first @code{double} within the\n+@code{long double} is returned, otherwise the second @code{double}\n+is returned.  The @code{__builtin_unpack_longdouble} function is only\n+availble if @code{long double} uses the IBM extended double\n+representation.\n+\n+The @code{__builtin_pack_longdouble} function takes two @code{double}\n+arguments and returns a @code{long double} value that combines the two\n+arguments.  The @code{__builtin_pack_longdouble} function is only\n+availble if @code{long double} uses the IBM extended double\n+representation.\n+\n+The @code{__builtin_unpack_ibm128} function takes a @code{__ibm128}\n+argument and a compile time constant of 0 or 1.  If the constant is 0,\n+the first @code{double} within the @code{__ibm128} is returned,\n+otherwise the second @code{double} is returned.\n+\n+The @code{__builtin_pack_ibm128} function takes two @code{double}\n+arguments and returns a @code{__ibm128} value that combines the two\n+arguments.\n+\n+Additional built-in functions are available for the 64-bit PowerPC\n+family of processors, for efficient use of 128-bit floating point\n+(@code{__float128}) values.\n \n @node Basic PowerPC Built-in Functions Available on ISA 2.06\n @subsubsection Basic PowerPC Built-in Functions Available on ISA 2.06"}, {"sha": "1bb75b2e00b1d7783f21abf03a12a61d36f60314", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e5e942351ba2b2637efdcb092adc4eeb92fcc3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e5e942351ba2b2637efdcb092adc4eeb92fcc3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f0e5e942351ba2b2637efdcb092adc4eeb92fcc3", "patch": "@@ -1,3 +1,10 @@\n+2018-06-06  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR target/85657\n+\t* gcc.target/powerpc/pr85657-4.c: New tests.\n+\t* gcc.target/powerpc/pr85657-5.c: Likewise.\n+\t* gcc.target/powerpc/pr85657-6.c: Likewise.\n+\n 2018-06-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/85641"}]}