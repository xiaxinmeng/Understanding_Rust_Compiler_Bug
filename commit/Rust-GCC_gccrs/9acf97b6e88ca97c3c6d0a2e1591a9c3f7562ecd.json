{"sha": "9acf97b6e88ca97c3c6d0a2e1591a9c3f7562ecd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFjZjk3YjZlODhjYTk3YzNjNmQwYTJlMTU5MWE5YzNmNzU2MmVjZA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2004-05-07T03:09:15Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2004-05-07T03:09:15Z"}, "message": "re PR target/15202 ([3.4 only] ICE in reload_cse_simplify_operands, at postreload.c)\n\n\tPR target/15202\n\t* pa.md (movdi, movsi, movhi, movqi): Support move from shift amount\n\tregister to general register.\n\nFrom-SVN: r81598", "tree": {"sha": "9abf5e78a3c6ea7fd64f044f0c4130f0cf02ee2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9abf5e78a3c6ea7fd64f044f0c4130f0cf02ee2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9acf97b6e88ca97c3c6d0a2e1591a9c3f7562ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9acf97b6e88ca97c3c6d0a2e1591a9c3f7562ecd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9acf97b6e88ca97c3c6d0a2e1591a9c3f7562ecd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9acf97b6e88ca97c3c6d0a2e1591a9c3f7562ecd/comments", "author": null, "committer": null, "parents": [{"sha": "19fb36e3238d30da0e1c982e848ade71c378ed76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19fb36e3238d30da0e1c982e848ade71c378ed76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19fb36e3238d30da0e1c982e848ade71c378ed76"}], "stats": {"total": 62, "additions": 37, "deletions": 25}, "files": [{"sha": "c87394fb900e21a32e2af5a595a4418630d2270d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acf97b6e88ca97c3c6d0a2e1591a9c3f7562ecd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acf97b6e88ca97c3c6d0a2e1591a9c3f7562ecd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9acf97b6e88ca97c3c6d0a2e1591a9c3f7562ecd", "patch": "@@ -1,3 +1,9 @@\n+2004-05-06  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR target/15202\n+\t* pa.md (movdi, movsi, movhi, movqi): Support move from shift amount\n+\tregister to general register.\n+\n 2004-05-07  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/rs6000.h (STACK_BOUNDARY): Use 128 bit for either"}, {"sha": "1f3e2618eb2639da7cbc369f7a53f311a7568cb5", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9acf97b6e88ca97c3c6d0a2e1591a9c3f7562ecd/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9acf97b6e88ca97c3c6d0a2e1591a9c3f7562ecd/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=9acf97b6e88ca97c3c6d0a2e1591a9c3f7562ecd", "patch": "@@ -2264,9 +2264,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"move_dest_operand\"\n-\t\t\t  \"=r,r,r,r,r,r,Q,!*q,!*f,*f,T\")\n+\t\t\t  \"=r,r,r,r,r,r,Q,!*q,!r,!*f,*f,T\")\n \t(match_operand:SI 1 \"move_src_operand\"\n-\t\t\t  \"A,r,J,N,K,RQ,rM,!rM,!*fM,RT,*f\"))]\n+\t\t\t  \"A,r,J,N,K,RQ,rM,!rM,!*q,!*fM,RT,*f\"))]\n   \"(register_operand (operands[0], SImode)\n     || reg_or_0_operand (operands[1], SImode))\n    && !TARGET_SOFT_FLOAT\"\n@@ -2279,12 +2279,13 @@\n    ldw%M1 %1,%0\n    stw%M0 %r1,%0\n    mtsar %r1\n+   {mfctl|mfctl,w} %%sar,%0\n    fcpy,sgl %f1,%0\n    fldw%F1 %1,%0\n    fstw%F0 %1,%0\"\n-  [(set_attr \"type\" \"load,move,move,move,shift,load,store,move,fpalu,fpload,fpstore\")\n+  [(set_attr \"type\" \"load,move,move,move,shift,load,store,move,move,fpalu,fpload,fpstore\")\n    (set_attr \"pa_combine_type\" \"addmove\")\n-   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4,4\")])\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4,4,4\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"indexed_memory_operand\" \"=R\")\n@@ -2433,9 +2434,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"move_dest_operand\"\n-\t\t\t  \"=r,r,r,r,r,r,Q,!*q\")\n+\t\t\t  \"=r,r,r,r,r,r,Q,!*q,!r\")\n \t(match_operand:SI 1 \"move_src_operand\"\n-\t\t\t  \"A,r,J,N,K,RQ,rM,!rM\"))]\n+\t\t\t  \"A,r,J,N,K,RQ,rM,!rM,!*q\"))]\n   \"(register_operand (operands[0], SImode)\n     || reg_or_0_operand (operands[1], SImode))\n    && TARGET_SOFT_FLOAT\"\n@@ -2447,10 +2448,11 @@\n    {zdepi|depwi,z} %Z1,%0\n    ldw%M1 %1,%0\n    stw%M0 %r1,%0\n-   mtsar %r1\"\n-  [(set_attr \"type\" \"load,move,move,move,move,load,store,move\")\n+   mtsar %r1\n+   {mfctl|mfctl,w} %%sar,%0\"\n+  [(set_attr \"type\" \"load,move,move,move,move,load,store,move,move\")\n    (set_attr \"pa_combine_type\" \"addmove\")\n-   (set_attr \"length\" \"4,4,4,4,4,4,4,4\")])\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4\")])\n \n ;; Load or store with base-register modification.\n (define_insn \"\"\n@@ -2865,9 +2867,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"move_dest_operand\"\n-\t \t\t  \"=r,r,r,r,r,Q,!*q,!*f\")\n+\t \t\t  \"=r,r,r,r,r,Q,!*q,!r,!*f\")\n \t(match_operand:HI 1 \"move_src_operand\"\n-\t\t\t  \"r,J,N,K,RQ,rM,!rM,!*fM\"))]\n+\t\t\t  \"r,J,N,K,RQ,rM,!rM,!*q,!*fM\"))]\n   \"register_operand (operands[0], HImode)\n    || reg_or_0_operand (operands[1], HImode)\"\n   \"@\n@@ -2878,10 +2880,11 @@\n    ldh%M1 %1,%0\n    sth%M0 %r1,%0\n    mtsar %r1\n+   mfctr %sar,%0\n    fcpy,sgl %f1,%0\"\n-  [(set_attr \"type\" \"move,move,move,shift,load,store,move,fpalu\")\n+  [(set_attr \"type\" \"move,move,move,shift,load,store,move,move,fpalu\")\n    (set_attr \"pa_combine_type\" \"addmove\")\n-   (set_attr \"length\" \"4,4,4,4,4,4,4,4\")])\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4\")])\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -2989,9 +2992,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"move_dest_operand\"\n-\t\t\t  \"=r,r,r,r,r,Q,!*q,!*f\")\n+\t\t\t  \"=r,r,r,r,r,Q,!*q,!r,!*f\")\n \t(match_operand:QI 1 \"move_src_operand\"\n-\t\t\t  \"r,J,N,K,RQ,rM,!rM,!*fM\"))]\n+\t\t\t  \"r,J,N,K,RQ,rM,!rM,!*q,!*fM\"))]\n   \"register_operand (operands[0], QImode)\n    || reg_or_0_operand (operands[1], QImode)\"\n   \"@\n@@ -3002,10 +3005,11 @@\n    ldb%M1 %1,%0\n    stb%M0 %r1,%0\n    mtsar %r1\n+   {mfctl|mfctl,w} %%sar,%0\n    fcpy,sgl %f1,%0\"\n-  [(set_attr \"type\" \"move,move,move,shift,load,store,move,fpalu\")\n+  [(set_attr \"type\" \"move,move,move,shift,load,store,move,move,fpalu\")\n    (set_attr \"pa_combine_type\" \"addmove\")\n-   (set_attr \"length\" \"4,4,4,4,4,4,4,4\")])\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4\")])\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n@@ -3956,9 +3960,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"move_dest_operand\"\n-\t\t\t  \"=!*r,*r,*r,*r,*r,Q,!*q,f,f,T\")\n+\t\t\t  \"=!*r,*r,*r,*r,*r,Q,!*q,!r,f,f,T\")\n \t(match_operand:DF 1 \"move_src_operand\"\n-\t\t\t  \"!*r,J,N,K,RQ,*rM,!*rM,fM,RT,f\"))]\n+\t\t\t  \"!*r,J,N,K,RQ,*rM,!*rM,!*q,fM,RT,f\"))]\n   \"(register_operand (operands[0], DFmode)\n     || reg_or_0_operand (operands[1], DFmode))\n    && !TARGET_SOFT_FLOAT && TARGET_64BIT\"\n@@ -3970,12 +3974,13 @@\n    ldd%M1 %1,%0\n    std%M0 %r1,%0\n    mtsar %r1\n+   {mfctl|mfctl,w} %%sar,%0\n    fcpy,dbl %f1,%0\n    fldd%F1 %1,%0\n    fstd%F0 %1,%0\"\n-  [(set_attr \"type\" \"move,move,move,shift,load,store,move,fpalu,fpload,fpstore\")\n+  [(set_attr \"type\" \"move,move,move,shift,load,store,move,move,fpalu,fpload,fpstore\")\n    (set_attr \"pa_combine_type\" \"addmove\")\n-   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4\")])\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4,4\")])\n \n \f\n (define_expand \"movdi\"\n@@ -4080,9 +4085,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"move_dest_operand\"\n-\t\t\t  \"=r,r,r,r,r,r,Q,!*q,!*f,*f,T\")\n+\t\t\t  \"=r,r,r,r,r,r,Q,!*q,!r,!*f,*f,T\")\n \t(match_operand:DI 1 \"move_src_operand\"\n-\t\t\t  \"A,r,J,N,K,RQ,rM,!rM,!*fM,RT,*f\"))]\n+\t\t\t  \"A,r,J,N,K,RQ,rM,!rM,!*q,!*fM,RT,*f\"))]\n   \"(register_operand (operands[0], DImode)\n     || reg_or_0_operand (operands[1], DImode))\n    && !TARGET_SOFT_FLOAT && TARGET_64BIT\"\n@@ -4095,12 +4100,13 @@\n    ldd%M1 %1,%0\n    std%M0 %r1,%0\n    mtsar %r1\n+   {mfctl|mfctl,w} %%sar,%0\n    fcpy,dbl %f1,%0\n    fldd%F1 %1,%0\n    fstd%F0 %1,%0\"\n-  [(set_attr \"type\" \"load,move,move,move,shift,load,store,move,fpalu,fpload,fpstore\")\n+  [(set_attr \"type\" \"load,move,move,move,shift,load,store,move,move,fpalu,fpload,fpstore\")\n    (set_attr \"pa_combine_type\" \"addmove\")\n-   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4,4\")])\n+   (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,4,4,4\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"indexed_memory_operand\" \"=R\")"}]}