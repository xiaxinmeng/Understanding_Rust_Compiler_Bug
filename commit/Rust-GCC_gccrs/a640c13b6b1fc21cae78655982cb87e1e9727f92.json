{"sha": "a640c13b6b1fc21cae78655982cb87e1e9727f92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY0MGMxM2I2YjFmYzIxY2FlNzg2NTU5ODJjYjg3ZTFlOTcyN2Y5Mg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2009-01-18T09:11:10Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2009-01-18T09:11:10Z"}, "message": "extend.texi, [...]: Fix typos.\n\n\t* doc/extend.texi, doc/gimple.texi, doc/invoke.texi,\n\tdoc/md.texi, doc/sourcebuild.texi, doc/tm.texi: Fix typos.\n\tFollow spelling conventions.\n\nFrom-SVN: r143481", "tree": {"sha": "68e01241a4be4700c2f958ef5b4d62099aec2be3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68e01241a4be4700c2f958ef5b4d62099aec2be3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a640c13b6b1fc21cae78655982cb87e1e9727f92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a640c13b6b1fc21cae78655982cb87e1e9727f92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a640c13b6b1fc21cae78655982cb87e1e9727f92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a640c13b6b1fc21cae78655982cb87e1e9727f92/comments", "author": null, "committer": null, "parents": [{"sha": "dba2cc0ce9134b5d3bb8a97d70ffe129beebf5a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dba2cc0ce9134b5d3bb8a97d70ffe129beebf5a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dba2cc0ce9134b5d3bb8a97d70ffe129beebf5a0"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "4c7b7065422662df7d73d269c07946520346fc15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a640c13b6b1fc21cae78655982cb87e1e9727f92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a640c13b6b1fc21cae78655982cb87e1e9727f92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a640c13b6b1fc21cae78655982cb87e1e9727f92", "patch": "@@ -1,3 +1,9 @@\n+2009-01-18  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* doc/extend.texi, doc/gimple.texi, doc/invoke.texi,\n+\tdoc/md.texi, doc/sourcebuild.texi, doc/tm.texi: Fix typos.\n+\tFollow spelling conventions.\n+\n 2009-01-18  Ben Elliston  <bje@au.ibm.com>\n \n \t* bitmap.c (bitmap_obstack_alloc_stat): Adjust cast to eliminate"}, {"sha": "f131a4da2ba24b16bd3327b9c98ae570da2a4451", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a640c13b6b1fc21cae78655982cb87e1e9727f92/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a640c13b6b1fc21cae78655982cb87e1e9727f92/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a640c13b6b1fc21cae78655982cb87e1e9727f92", "patch": "@@ -2782,7 +2782,7 @@ with modern codes that keep a 16-byte stack for SSE compatibility.\n @cindex @code{resbank} attribute\n On the SH2A target, this attribute enables the high-speed register\n saving and restoration using a register bank for @code{interrupt_handler}\n-routines.  Saving to the bank is performed automatcially after the CPU\n+routines.  Saving to the bank is performed automatically after the CPU\n accepts an interrupt that uses a register bank.\n \n The nineteen 32-bit registers comprising general register R0 to R14,"}, {"sha": "d8e5e27dc3fe19235e5641ab699253cda2be7c42", "filename": "gcc/doc/gimple.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a640c13b6b1fc21cae78655982cb87e1e9727f92/gcc%2Fdoc%2Fgimple.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a640c13b6b1fc21cae78655982cb87e1e9727f92/gcc%2Fdoc%2Fgimple.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgimple.texi?ref=a640c13b6b1fc21cae78655982cb87e1e9727f92", "patch": "@@ -109,7 +109,7 @@ structure takes 4 words (32 bytes) on 64 bit hosts:\n @item @code{visited}\t\t\t@tab 1\n @item @code{nontemporal_move}\t\t@tab 1\n @item @code{plf}\t\t\t@tab 2\n-@item @code{modifed}\t\t\t@tab 1\n+@item @code{modified}\t\t\t@tab 1\n @item @code{has_volatile_ops}\t\t@tab 1\n @item @code{references_memory_p}\t@tab 1\n @item @code{uid}\t\t\t@tab 32"}, {"sha": "bdeb2b11207e1314b9532e2bc3bd0f0b456b3507", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a640c13b6b1fc21cae78655982cb87e1e9727f92/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a640c13b6b1fc21cae78655982cb87e1e9727f92/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a640c13b6b1fc21cae78655982cb87e1e9727f92", "patch": "@@ -1387,14 +1387,14 @@ is currently only supported when compiling C or C++.\n \n The compiler can accept several base standards, such as @samp{c89} or\n @samp{c++98}, and GNU dialects of those standards, such as\n-@samp{gnu89} or @samp{gnu++98}.  By specifing a base standard, the\n+@samp{gnu89} or @samp{gnu++98}.  By specifying a base standard, the\n compiler will accept all programs following that standard and those\n using GNU extensions that do not contradict it.  For example,\n @samp{-std=c89} turns off certain features of GCC that are\n incompatible with ISO C90, such as the @code{asm} and @code{typeof}\n keywords, but not other GNU extensions that do not have a meaning in\n ISO C90, such as omitting the middle term of a @code{?:}\n-expression. On the other hand, by specifing a GNU dialect of a\n+expression. On the other hand, by specifying a GNU dialect of a\n standard, all features the compiler support are enabled, even when\n those features change the meaning of the base standard and some\n strict-conforming programs may be rejected.  The particular standard\n@@ -6605,7 +6605,7 @@ compiling and when linking your program.\n The following options are enabled: @code{-fprofile-arcs}, @code{-fprofile-values}, @code{-fvpt}.\n \n If @var{path} is specified, GCC will look at the @var{path} to find\n-the profile feeedback data files. See @option{-fprofile-dir}.\n+the profile feedback data files. See @option{-fprofile-dir}.\n \n @item -fprofile-use\n @itemx -fprofile-use=@var{path}\n@@ -7601,8 +7601,8 @@ optimizing at @option{-O3} and above.  For some sorts of source code\n the enhanced partial redundancy elimination optimization can run away,\n consuming all of the memory available on the host machine.  This\n parameter sets a limit on the length of the sets that are computed,\n-which prevents the runaway behaviour.  Setting a value of 0 for\n-this paramter will allow an unlimited set length.\n+which prevents the runaway behavior.  Setting a value of 0 for\n+this parameter will allow an unlimited set length.\n \n @item sccvn-max-scc-size\n Maximum size of a strongly connected component (SCC) during SCCVN\n@@ -9077,7 +9077,7 @@ best available method for the selected processor.  The default setting is\n Only generate absolute relocations on word sized values (i.e. R_ARM_ABS32).\n This is enabled by default on targets (uClinux, SymbianOS) where the runtime\n loader imposes this restriction, and when @option{-fpic} or @option{-fPIC}\n-is speficied.\n+is specified.\n \n @end table\n \n@@ -13317,7 +13317,7 @@ Disables warnings about the generation of inefficient code.  These\n warnings can be generated, for example, when compiling code which\n performs byte-level memory operations on the MAC AE type.  The MAC AE has\n no hardware support for byte-level memory operations, so all byte\n-load/stores must be synthesised from word load/store operations.  This is\n+load/stores must be synthesized from word load/store operations.  This is\n inefficient and a warning will be generated indicating to the programmer\n that they should rewrite the code to avoid byte operations, or to target\n an AE type which has the necessary hardware support.  This option enables"}, {"sha": "68b9a87e5c6162f61b84f4397ab755442c020702", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a640c13b6b1fc21cae78655982cb87e1e9727f92/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a640c13b6b1fc21cae78655982cb87e1e9727f92/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=a640c13b6b1fc21cae78655982cb87e1e9727f92", "patch": "@@ -3149,7 +3149,7 @@ A definition of another insn attribute used to describe for what\n reason an insn alternative might be available or\n not.  E.g. @code{cpu_facility} as in the example below.\n @item\n-An assignement for the second attribute to each insn definition\n+An assignment for the second attribute to each insn definition\n combining instructions which are not all available under the same\n circumstances.  (Note: It obviously only makes sense for definitions\n with more than one alternative.  Otherwise the insn pattern should be"}, {"sha": "fb639826f319d0572fad9b98e34cf607cd95efbd", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a640c13b6b1fc21cae78655982cb87e1e9727f92/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a640c13b6b1fc21cae78655982cb87e1e9727f92/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=a640c13b6b1fc21cae78655982cb87e1e9727f92", "patch": "@@ -1575,7 +1575,7 @@ Finalize use of torture lists.\n @end table\n \n The @file{.exp} file for a set of tests that use torture options must\n-include calls to these three procecures if:\n+include calls to these three procedures if:\n \n @itemize @bullet\n @item It calls @code{gcc-dg-runtest} and overrides @var{DG_TORTURE_OPTIONS}."}, {"sha": "d748a754e2d1dc7f9dfffdc08f90e4fa7e24a1b1", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a640c13b6b1fc21cae78655982cb87e1e9727f92/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a640c13b6b1fc21cae78655982cb87e1e9727f92/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a640c13b6b1fc21cae78655982cb87e1e9727f92", "patch": "@@ -6386,7 +6386,7 @@ Return a pointer to a store large enough to hold target scheduling context.\n @deftypefn {Target Hook} void TARGET_SCHED_INIT_SCHED_CONTEXT (void *@var{tc}, bool @var{clean_p})\n Initialize store pointed to by @var{tc} to hold target scheduling context.\n It @var{clean_p} is true then initialize @var{tc} as if scheduler is at the\n-beginning of the block.  Overwise, make a copy of the current context in\n+beginning of the block.  Otherwise, make a copy of the current context in\n @var{tc}.\n @end deftypefn\n \n@@ -6409,7 +6409,7 @@ Return a pointer to a store large enough to hold target scheduling context.\n @deftypefn {Target Hook} void TARGET_SCHED_INIT_SCHED_CONTEXT (void *@var{tc}, bool @var{clean_p})\n Initialize store pointed to by @var{tc} to hold target scheduling context.\n It @var{clean_p} is true then initialize @var{tc} as if scheduler is at the\n-beginning of the block.  Overwise, make a copy of the current context in\n+beginning of the block.  Otherwise, make a copy of the current context in\n @var{tc}.\n @end deftypefn\n \n@@ -9365,7 +9365,7 @@ For targets whose psABI does not provide Thread Local Storage via\n specific relocations and instruction sequences, an emulation layer is\n used.  A set of target hooks allows this emulation layer to be\n configured for the requirements of a particular target.  For instance\n-the psABI may infact specify TLS support in terms of an emulation\n+the psABI may in fact specify TLS support in terms of an emulation\n layer.\n \n The emulation layer works by creating a control object for every TLS"}]}