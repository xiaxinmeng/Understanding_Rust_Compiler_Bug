{"sha": "17e9e88c2e9329a033e2559ae20105490d46ca4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdlOWU4OGMyZTkzMjlhMDMzZTI1NTlhZTIwMTA1NDkwZDQ2Y2E0Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2001-12-28T09:55:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2001-12-28T09:55:14Z"}, "message": "sparc.h (ASM_PREFERRED_EH_DATA_FORMAT, [...]): Define.\n\n\t* config/sparc/sparc.h (ASM_PREFERRED_EH_DATA_FORMAT,\n\tASM_OUTPUT_DWARF_PCREL): Define.\n\t* config/sparc/sol2.h (ASM_PREFERRED_EH_DATA_FORMAT): Define.\n\t* configure.in (HAVE_AS_SPARC_UA_PCREL): Check whether as supports\n\t.uaword %r_disp32() and linker handles it correctly.\n\t* configure, config.in: Rebuilt.\n\nFrom-SVN: r48344", "tree": {"sha": "5146166a87e177804669e56c1b3162ff14652854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5146166a87e177804669e56c1b3162ff14652854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17e9e88c2e9329a033e2559ae20105490d46ca4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e9e88c2e9329a033e2559ae20105490d46ca4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17e9e88c2e9329a033e2559ae20105490d46ca4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e9e88c2e9329a033e2559ae20105490d46ca4b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad47f1e56e6dc41ee774c52b7fa259d7eebb2aaa"}], "stats": {"total": 114, "additions": 105, "deletions": 9}, "files": [{"sha": "035d743462efa225eea071f0c93b396e874988cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e9e88c2e9329a033e2559ae20105490d46ca4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e9e88c2e9329a033e2559ae20105490d46ca4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17e9e88c2e9329a033e2559ae20105490d46ca4b", "patch": "@@ -1,3 +1,12 @@\n+2001-12-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/sparc/sparc.h (ASM_PREFERRED_EH_DATA_FORMAT,\n+\tASM_OUTPUT_DWARF_PCREL): Define.\n+\t* config/sparc/sol2.h (ASM_PREFERRED_EH_DATA_FORMAT): Define.\n+\t* configure.in (HAVE_AS_SPARC_UA_PCREL): Check whether as supports\n+\t.uaword %r_disp32() and linker handles it correctly.\n+\t* configure, config.in: Rebuilt.\n+\n 2001-12-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-typeck.c (store_init_value): If initializing object with array"}, {"sha": "099a0d2cd477bd739187dc6d01f62c75b750014f", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e9e88c2e9329a033e2559ae20105490d46ca4b/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e9e88c2e9329a033e2559ae20105490d46ca4b/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=17e9e88c2e9329a033e2559ae20105490d46ca4b", "patch": "@@ -535,6 +535,9 @@\n /* Define if your assembler supports -relax option. */\n #undef HAVE_AS_RELAX_OPTION\n \n+/* Define if your assembler and linker support unaligned PC relative relocs. */\n+#undef HAVE_AS_SPARC_UA_PCREL\n+\n /* Define if the assembler supports 64bit sparc. */\n #undef AS_SPARC64_FLAG\n "}, {"sha": "46e80c121cb7bb66a007e85f6d2989ce7d9447b5", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e9e88c2e9329a033e2559ae20105490d46ca4b/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e9e88c2e9329a033e2559ae20105490d46ca4b/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=17e9e88c2e9329a033e2559ae20105490d46ca4b", "patch": "@@ -184,6 +184,17 @@ Boston, MA 02111-1307, USA.  */\n    || (CHAR) == 'h' \\\n    || (CHAR) == 'x' \\\n    || (CHAR) == 'z')\n+\n+/* Select a format to encode pointers in exception handling data.  CODE\n+   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n+   true if the symbol may be affected by dynamic relocations.\n+\n+   Some Solaris dynamic linkers don't handle unaligned section relative\n+   relocs properly, so force them to be aligned.  */\n+#ifndef HAVE_AS_SPARC_UA_PCREL\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)\t\t\\\n+  ((flag_pic || GLOBAL) ? DW_EH_PE_aligned : DW_EH_PE_absptr)\n+#endif\n \f\n /* ??? This does not work in SunOS 4.x, so it is not enabled in sparc.h.\n    Instead, it is enabled here, because it does work under Solaris.  */"}, {"sha": "3785bad240b56d5f7a2ce35e490ed520fba78324", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e9e88c2e9329a033e2559ae20105490d46ca4b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e9e88c2e9329a033e2559ae20105490d46ca4b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=17e9e88c2e9329a033e2559ae20105490d46ca4b", "patch": "@@ -1969,6 +1969,32 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define EH_RETURN_DATA_REGNO(N) ((N) < 4 ? (N) + 24 : INVALID_REGNUM)\n #define EH_RETURN_STACKADJ_RTX\tgen_rtx_REG (Pmode, 1)\t/* %g1 */\n #define EH_RETURN_HANDLER_RTX\tgen_rtx_REG (Pmode, 31)\t/* %i7 */\n+\n+/* Select a format to encode pointers in exception handling data.  CODE\n+   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n+   true if the symbol may be affected by dynamic relocations.\n+\n+   If assembler and linker properly support .uaword %r_disp32(foo),\n+   then use PC relative 32-bit relocations instead of absolute relocs\n+   for shared libraries.  On sparc64, use pc relative 32-bit relocs even\n+   for binaries, to save memory.  */\n+#ifdef HAVE_AS_SPARC_UA_PCREL\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)\t\t\t\\\n+  (flag_pic\t\t\t\t\t\t\t\t\\\n+   ? (GLOBAL ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | DW_EH_PE_sdata4\\\n+   : ((TARGET_ARCH64 && ! GLOBAL)\t\t\t\t\t\\\n+      ? (DW_EH_PE_pcrel | DW_EH_PE_sdata4)\t\t\t\t\\\n+      : DW_EH_PE_absptr))\n+\n+/* Emit a PC-relative relocation.  */\n+#define ASM_OUTPUT_DWARF_PCREL(FILE, SIZE, LABEL)\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    fputs (integer_asm_op (SIZE, FALSE), FILE);\t\t\\\n+    fprintf (FILE, \"%%r_disp%d(\", SIZE * 8);\t\t\\\n+    assemble_name (FILE, LABEL);\t\t\t\\\n+    fputc (')', FILE);\t\t\t\t\t\\\n+  } while (0)\n+#endif\n \f\n /* Addressing modes, and classification of registers for them.  */\n "}, {"sha": "cebe4ff026971ab1fec744524c41f8eb9e2349e8", "filename": "gcc/configure", "status": "modified", "additions": 37, "deletions": 9, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e9e88c2e9329a033e2559ae20105490d46ca4b/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e9e88c2e9329a033e2559ae20105490d46ca4b/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=17e9e88c2e9329a033e2559ae20105490d46ca4b", "patch": "@@ -7408,10 +7408,38 @@ EOF\n \n     fi\n \n+    echo $ac_n \"checking assembler and linker support unaligned pc related relocs\"\"... $ac_c\" 1>&6\n+echo \"configure:7413: checking assembler and linker support unaligned pc related relocs\" >&5\n+if eval \"test \\\"`echo '$''{'gcc_cv_as_sparc_ua_pcrel'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  \n+\tgcc_cv_as_sparc_ua_pcrel=unknown\n+\tif test x$gcc_cv_as != x -a x$gcc_cv_ld != x; then\n+\t    gcc_cv_as_sparc_ua_pcrel=no\n+\t    echo \".text; foo: nop; .data; .align 4; .byte 0; .uaword %r_disp32(foo)\" > conftest.s\n+\t    if $gcc_cv_as -K PIC -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t\tif $gcc_cv_ld -o conftest conftest.o -G > /dev/null 2>&1; then\n+\t\t    gcc_cv_as_sparc_ua_pcrel=yes\n+\t\tfi\n+\t    fi\n+\t    rm -f conftest.s conftest.o conftest\n+\tfi\n+    \n+fi\n+\n+echo \"$ac_t\"\"$gcc_cv_as_sparc_ua_pcrel\" 1>&6\n+    if test \"x$gcc_cv_as_sparc_ua_pcrel\" = xyes; then\n+\tcat >> confdefs.h <<\\EOF\n+#define HAVE_AS_SPARC_UA_PCREL 1\n+EOF\n+\n+    fi\n+\n     case \"$tm_file\" in\n     *64*)\n \techo $ac_n \"checking for 64 bit support in assembler ($gcc_cv_as)\"\"... $ac_c\" 1>&6\n-echo \"configure:7415: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n+echo \"configure:7442: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_flags64'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7456,7 +7484,7 @@ EOF\n \n     if test \"x$gcc_cv_as_flags64\" != xno; then\n \techo $ac_n \"checking for assembler offsetable %lo() support\"\"... $ac_c\" 1>&6\n-echo \"configure:7460: checking for assembler offsetable %lo() support\" >&5\n+echo \"configure:7487: checking for assembler offsetable %lo() support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_offsetable_lo10'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -7496,7 +7524,7 @@ EOF\n \n   i[34567]86-*-* | x86_64-*-*)\n     echo $ac_n \"checking assembler instructions\"\"... $ac_c\" 1>&6\n-echo \"configure:7500: checking assembler instructions\" >&5\n+echo \"configure:7527: checking assembler instructions\" >&5\n     gcc_cv_as_instructions=\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n       if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -7523,7 +7551,7 @@ EOF\n     echo \"$ac_t\"\"$gcc_cv_as_instructions\" 1>&6\n \n     echo $ac_n \"checking assembler GOTOFF in data directives\"\"... $ac_c\" 1>&6\n-echo \"configure:7527: checking assembler GOTOFF in data directives\" >&5\n+echo \"configure:7554: checking assembler GOTOFF in data directives\" >&5\n     gcc_cv_as_gotoff_in_data=no\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x\n     then\n@@ -7553,7 +7581,7 @@ EOF\n esac\n \n echo $ac_n \"checking assembler dwarf2 debug_line support\"\"... $ac_c\" 1>&6\n-echo \"configure:7557: checking assembler dwarf2 debug_line support\" >&5\n+echo \"configure:7584: checking assembler dwarf2 debug_line support\" >&5\n gcc_cv_as_dwarf2_debug_line=no\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n@@ -7609,7 +7637,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_dwarf2_debug_line\" 1>&6\n \n echo $ac_n \"checking assembler --gdwarf2 support\"\"... $ac_c\" 1>&6\n-echo \"configure:7613: checking assembler --gdwarf2 support\" >&5\n+echo \"configure:7640: checking assembler --gdwarf2 support\" >&5\n gcc_cv_as_gdwarf2_flag=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n then\n@@ -7638,7 +7666,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_gdwarf2_flag\" 1>&6\n \n echo $ac_n \"checking assembler --gstabs support\"\"... $ac_c\" 1>&6\n-echo \"configure:7642: checking assembler --gstabs support\" >&5\n+echo \"configure:7669: checking assembler --gstabs support\" >&5\n gcc_cv_as_gstabs_flag=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x;\n then\n@@ -7666,7 +7694,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_gstabs_flag\" 1>&6\n \n echo $ac_n \"checking linker PT_GNU_EH_FRAME support\"\"... $ac_c\" 1>&6\n-echo \"configure:7670: checking linker PT_GNU_EH_FRAME support\" >&5\n+echo \"configure:7697: checking linker PT_GNU_EH_FRAME support\" >&5\n gcc_cv_ld_eh_frame_hdr=no\n if test x$gcc_cv_gld_major_version != x -a x$gcc_cv_gld_minor_version != x; then\n   if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 12 -o \"$gcc_cv_gld_major_version\" -gt 2 && grep 'EMUL = elf' ../ld/Makefile > /dev/null; then\n@@ -7829,7 +7857,7 @@ fi\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:7833: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:7860: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\""}, {"sha": "e4f1b9ecc7c00d6ebc5eaeb8a34d8ca16a5af0a9", "filename": "gcc/configure.in", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17e9e88c2e9329a033e2559ae20105490d46ca4b/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17e9e88c2e9329a033e2559ae20105490d46ca4b/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=17e9e88c2e9329a033e2559ae20105490d46ca4b", "patch": "@@ -1706,6 +1706,25 @@ EOF\n \t\t[Define if your assembler supports -relax option.])\n     fi\n \n+    AC_CACHE_CHECK([assembler and linker support unaligned pc related relocs],\n+\tgcc_cv_as_sparc_ua_pcrel, [\n+\tgcc_cv_as_sparc_ua_pcrel=unknown\n+\tif test x$gcc_cv_as != x -a x$gcc_cv_ld != x; then\n+\t    gcc_cv_as_sparc_ua_pcrel=no\n+\t    echo \".text; foo: nop; .data; .align 4; .byte 0; .uaword %r_disp32(foo)\" > conftest.s\n+\t    if $gcc_cv_as -K PIC -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t\tif $gcc_cv_ld -o conftest conftest.o -G > /dev/null 2>&1; then\n+\t\t    gcc_cv_as_sparc_ua_pcrel=yes\n+\t\tfi\n+\t    fi\n+\t    rm -f conftest.s conftest.o conftest\n+\tfi\n+    ])\n+    if test \"x$gcc_cv_as_sparc_ua_pcrel\" = xyes; then\n+\tAC_DEFINE(HAVE_AS_SPARC_UA_PCREL, 1,\n+\t\t[Define if your assembler and linker support unaligned PC relative relocs.])\n+    fi\n+\n     case \"$tm_file\" in\n     *64*)\n \tAC_CACHE_CHECK([for 64 bit support in assembler ($gcc_cv_as)],"}]}