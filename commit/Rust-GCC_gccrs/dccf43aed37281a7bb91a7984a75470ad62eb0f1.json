{"sha": "dccf43aed37281a7bb91a7984a75470ad62eb0f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNjZjQzYWVkMzcyODFhN2JiOTFhNzk4NGE3NTQ3MGFkNjJlYjBmMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-14T16:24:31Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-14T16:24:31Z"}, "message": "Make more use of gimple-fold.h in tree-vect-loop.c\n\nThis patch makes the vectoriser use the gimple-fold.h routines\nin more cases, instead of vect_init_vector.  Later patches want\nto use the same interface to handle variable-length vectors.\n\n2017-09-14  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-vect-loop.c (vectorizable_induction): Use gimple_build instead\n\tof vect_init_vector.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r252763", "tree": {"sha": "c21c0358a4a4c3ca03d13aae79b8af5c1c535545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c21c0358a4a4c3ca03d13aae79b8af5c1c535545"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dccf43aed37281a7bb91a7984a75470ad62eb0f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dccf43aed37281a7bb91a7984a75470ad62eb0f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dccf43aed37281a7bb91a7984a75470ad62eb0f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dccf43aed37281a7bb91a7984a75470ad62eb0f1/comments", "author": null, "committer": null, "parents": [{"sha": "e7c45b6600acfdc0930b980a45a364f77844139a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7c45b6600acfdc0930b980a45a364f77844139a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7c45b6600acfdc0930b980a45a364f77844139a"}], "stats": {"total": 38, "additions": 26, "deletions": 12}, "files": [{"sha": "12863fa0ed993a4f1775a44d6511b145c519934b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dccf43aed37281a7bb91a7984a75470ad62eb0f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dccf43aed37281a7bb91a7984a75470ad62eb0f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dccf43aed37281a7bb91a7984a75470ad62eb0f1", "patch": "@@ -1,3 +1,10 @@\n+2017-09-14  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-vect-loop.c (vectorizable_induction): Use gimple_build instead\n+\tof vect_init_vector.\n+\n 2017-09-14  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "6746696343b280e2ac376883c16f523e7b17db14", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dccf43aed37281a7bb91a7984a75470ad62eb0f1/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dccf43aed37281a7bb91a7984a75470ad62eb0f1/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=dccf43aed37281a7bb91a7984a75470ad62eb0f1", "patch": "@@ -6839,18 +6839,21 @@ vectorizable_induction (gimple *phi,\n     {\n       /* iv_loop is the loop to be vectorized. Generate:\n \t  vec_step = [VF*S, VF*S, VF*S, VF*S]  */\n+      gimple_seq seq = NULL;\n       if (SCALAR_FLOAT_TYPE_P (TREE_TYPE (step_expr)))\n \t{\n \t  expr = build_int_cst (integer_type_node, vf);\n-\t  expr = fold_convert (TREE_TYPE (step_expr), expr);\n+\t  expr = gimple_build (&seq, FLOAT_EXPR, TREE_TYPE (step_expr), expr);\n \t}\n       else\n \texpr = build_int_cst (TREE_TYPE (step_expr), vf);\n-      new_name = fold_build2 (MULT_EXPR, TREE_TYPE (step_expr),\n-\t\t\t      expr, step_expr);\n-      if (TREE_CODE (step_expr) == SSA_NAME)\n-\tnew_name = vect_init_vector (phi, new_name,\n-\t\t\t\t     TREE_TYPE (step_expr), NULL);\n+      new_name = gimple_build (&seq, MULT_EXPR, TREE_TYPE (step_expr),\n+\t\t\t       expr, step_expr);\n+      if (seq)\n+\t{\n+\t  new_bb = gsi_insert_seq_on_edge_immediate (pe, seq);\n+\t  gcc_assert (!new_bb);\n+\t}\n     }\n \n   t = unshare_expr (new_name);\n@@ -6899,6 +6902,7 @@ vectorizable_induction (gimple *phi,\n \n   if (ncopies > 1)\n     {\n+      gimple_seq seq = NULL;\n       stmt_vec_info prev_stmt_vinfo;\n       /* FORNOW. This restriction should be relaxed.  */\n       gcc_assert (!nested_in_vect_loop);\n@@ -6907,15 +6911,18 @@ vectorizable_induction (gimple *phi,\n       if (SCALAR_FLOAT_TYPE_P (TREE_TYPE (step_expr)))\n \t{\n \t  expr = build_int_cst (integer_type_node, nunits);\n-\t  expr = fold_convert (TREE_TYPE (step_expr), expr);\n+\t  expr = gimple_build (&seq, FLOAT_EXPR, TREE_TYPE (step_expr), expr);\n \t}\n       else\n \texpr = build_int_cst (TREE_TYPE (step_expr), nunits);\n-      new_name = fold_build2 (MULT_EXPR, TREE_TYPE (step_expr),\n-\t\t\t      expr, step_expr);\n-      if (TREE_CODE (step_expr) == SSA_NAME)\n-\tnew_name = vect_init_vector (phi, new_name,\n-\t\t\t\t     TREE_TYPE (step_expr), NULL);\n+      new_name = gimple_build (&seq, MULT_EXPR, TREE_TYPE (step_expr),\n+\t\t\t       expr, step_expr);\n+      if (seq)\n+\t{\n+\t  new_bb = gsi_insert_seq_on_edge_immediate (pe, seq);\n+\t  gcc_assert (!new_bb);\n+\t}\n+\n       t = unshare_expr (new_name);\n       gcc_assert (CONSTANT_CLASS_P (new_name)\n \t\t  || TREE_CODE (new_name) == SSA_NAME);"}]}