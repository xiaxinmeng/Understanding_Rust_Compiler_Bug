{"sha": "1e03060224b7b01b4da4aa423610e99abd1b2b17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUwMzA2MDIyNGI3YjAxYjRkYTRhYTQyMzYxMGU5OWFiZDFiMmIxNw==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-04-29T16:09:45Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-04-29T16:09:45Z"}, "message": "Fix path handling\n\nFrom-SVN: r173172", "tree": {"sha": "8819a99c59909482bcff04edd036a3e90a9a3141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8819a99c59909482bcff04edd036a3e90a9a3141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e03060224b7b01b4da4aa423610e99abd1b2b17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e03060224b7b01b4da4aa423610e99abd1b2b17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e03060224b7b01b4da4aa423610e99abd1b2b17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e03060224b7b01b4da4aa423610e99abd1b2b17/comments", "author": null, "committer": null, "parents": [{"sha": "848eab5c43de5cc6f60263a1ba76d740fbeb5318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/848eab5c43de5cc6f60263a1ba76d740fbeb5318", "html_url": "https://github.com/Rust-GCC/gccrs/commit/848eab5c43de5cc6f60263a1ba76d740fbeb5318"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "79a1b7f99dce494b4028ee3ef8ad011dccbac5cd", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e03060224b7b01b4da4aa423610e99abd1b2b17/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e03060224b7b01b4da4aa423610e99abd1b2b17/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=1e03060224b7b01b4da4aa423610e99abd1b2b17", "patch": "@@ -1,3 +1,18 @@\n+2011-04-29  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* io/unix.c (min): New macro.\n+\t(unpack_filename): Return errno number for errors.\n+\t(regular_file): Use appropriately sized buffer for path.\n+\t(compare_file_filename): Likewise.\n+\t(find_file): Likewise.\n+\t(delete_file): Likewise.\n+\t(file_exists): Likewise.\n+\t(file_size): Likewise.\n+\t(inquire_sequential): Likewise.\n+\t(inquire_direct): Likewise.\n+\t(inquire_formatted): Likewise.\n+\t(inquire_access): Likewise.\n+\n 2011-04-29  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/48488"}, {"sha": "4e4bc3b1ee5fa26a492db5b3b52bc2d240416be6", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e03060224b7b01b4da4aa423610e99abd1b2b17/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e03060224b7b01b4da4aa423610e99abd1b2b17/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=1e03060224b7b01b4da4aa423610e99abd1b2b17", "patch": "@@ -41,6 +41,13 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <errno.h>\n \n \n+/* min macro that evaluates its arguments only once.  */\n+#define min(a,b)\t\t\\\n+  ({ typeof (a) _a = (a);\t\\\n+    typeof (b) _b = (b);\t\\\n+    _a < _b ? _a : _b; })\n+\n+\n /* For mingw, we don't identify files by their inode number, but by a\n    64-bit identifier created from a BY_HANDLE_FILE_INFORMATION. */\n #ifdef __MINGW32__\n@@ -996,10 +1003,10 @@ int\n unpack_filename (char *cstring, const char *fstring, int len)\n {\n   if (fstring == NULL)\n-    return 1;\n+    return EFAULT;\n   len = fstrlen (fstring, len);\n   if (len >= PATH_MAX)\n-    return 1;\n+    return ENAMETOOLONG;\n \n   memmove (cstring, fstring, len);\n   cstring[len] = '\\0';\n@@ -1124,15 +1131,17 @@ tempfile (st_parameter_open *opp)\n static int\n regular_file (st_parameter_open *opp, unit_flags *flags)\n {\n-  char path[PATH_MAX + 1];\n+  char path[min(PATH_MAX, opp->file_len + 1)];\n   int mode;\n   int rwflag;\n   int crflag;\n   int fd;\n+  int err;\n \n-  if (unpack_filename (path, opp->file, opp->file_len))\n+  err = unpack_filename (path, opp->file, opp->file_len);\n+  if (err)\n     {\n-      errno = ENOENT;\t\t/* Fake an OS error */\n+      errno = err;\t\t/* Fake an OS error */\n       return -1;\n     }\n \n@@ -1406,7 +1415,7 @@ st_printf (const char *format, ...)\n int\n compare_file_filename (gfc_unit *u, const char *name, int len)\n {\n-  char path[PATH_MAX + 1];\n+  char path[min(PATH_MAX, len + 1)];\n   struct stat st;\n #ifdef HAVE_WORKING_STAT\n   unix_stream *s;\n@@ -1506,7 +1515,7 @@ find_file0 (gfc_unit *u, FIND_FILE0_DECL)\n gfc_unit *\n find_file (const char *file, gfc_charlen_type file_len)\n {\n-  char path[PATH_MAX + 1];\n+  char path[min(PATH_MAX, file_len + 1)];\n   struct stat st[1];\n   gfc_unit *u;\n #if defined(__MINGW32__) && !HAVE_WORKING_STAT\n@@ -1625,11 +1634,12 @@ flush_all_units (void)\n int\n delete_file (gfc_unit * u)\n {\n-  char path[PATH_MAX + 1];\n+  char path[min(PATH_MAX, u->file_len + 1)];\n+  int err = unpack_filename (path, u->file, u->file_len);\n \n-  if (unpack_filename (path, u->file, u->file_len))\n+  if (err)\n     {\t\t\t\t/* Shouldn't be possible */\n-      errno = ENOENT;\n+      errno = err;\n       return 1;\n     }\n \n@@ -1643,7 +1653,7 @@ delete_file (gfc_unit * u)\n int\n file_exists (const char *file, gfc_charlen_type file_len)\n {\n-  char path[PATH_MAX + 1];\n+  char path[min(PATH_MAX, file_len + 1)];\n \n   if (unpack_filename (path, file, file_len))\n     return 0;\n@@ -1657,7 +1667,7 @@ file_exists (const char *file, gfc_charlen_type file_len)\n GFC_IO_INT\n file_size (const char *file, gfc_charlen_type file_len)\n {\n-  char path[PATH_MAX + 1];\n+  char path[min(PATH_MAX, file_len + 1)];\n   struct stat statbuf;\n \n   if (unpack_filename (path, file, file_len))\n@@ -1678,7 +1688,7 @@ static const char yes[] = \"YES\", no[] = \"NO\", unknown[] = \"UNKNOWN\";\n const char *\n inquire_sequential (const char *string, int len)\n {\n-  char path[PATH_MAX + 1];\n+  char path[min(PATH_MAX, len + 1)];\n   struct stat statbuf;\n \n   if (string == NULL ||\n@@ -1702,7 +1712,7 @@ inquire_sequential (const char *string, int len)\n const char *\n inquire_direct (const char *string, int len)\n {\n-  char path[PATH_MAX + 1];\n+  char path[min(PATH_MAX, len + 1)];\n   struct stat statbuf;\n \n   if (string == NULL ||\n@@ -1726,7 +1736,7 @@ inquire_direct (const char *string, int len)\n const char *\n inquire_formatted (const char *string, int len)\n {\n-  char path[PATH_MAX + 1];\n+  char path[min(PATH_MAX, len + 1)];\n   struct stat statbuf;\n \n   if (string == NULL ||\n@@ -1761,7 +1771,7 @@ inquire_unformatted (const char *string, int len)\n static const char *\n inquire_access (const char *string, int len, int mode)\n {\n-  char path[PATH_MAX + 1];\n+  char path[min(PATH_MAX, len + 1)];\n \n   if (string == NULL || unpack_filename (path, string, len) ||\n       access (path, mode) < 0)"}]}