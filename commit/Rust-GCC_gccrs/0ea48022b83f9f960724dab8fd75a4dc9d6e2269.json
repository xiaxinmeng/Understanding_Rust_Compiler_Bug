{"sha": "0ea48022b83f9f960724dab8fd75a4dc9d6e2269", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVhNDgwMjJiODNmOWY5NjA3MjRkYWI4ZmQ3NWE0ZGM5ZDZlMjI2OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-06-04T11:56:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-06-04T11:56:34Z"}, "message": "re PR tree-optimization/60098 (DSE fails to DSE errno settings)\n\n2014-06-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/60098\n\t* tree-ssa-dse.c (dse_possible_dead_store_p): Walk until\n\twe hit a kill.\n\t(dse_optimize_stmt): Simplify, now that we found a kill\n\tearlier.\n\n\t* gcc.dg/tree-ssa/ssa-dse-15.c: New testcase.\n\nFrom-SVN: r211224", "tree": {"sha": "9d7f8187797e52edfb85679cb98bbe97912f3ae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d7f8187797e52edfb85679cb98bbe97912f3ae2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ea48022b83f9f960724dab8fd75a4dc9d6e2269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea48022b83f9f960724dab8fd75a4dc9d6e2269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea48022b83f9f960724dab8fd75a4dc9d6e2269", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea48022b83f9f960724dab8fd75a4dc9d6e2269/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1259d34e96d27a830254cf19bb7c921cd14e4c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1259d34e96d27a830254cf19bb7c921cd14e4c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1259d34e96d27a830254cf19bb7c921cd14e4c6"}], "stats": {"total": 121, "additions": 74, "deletions": 47}, "files": [{"sha": "645dc0b4cc09db4ea422af57de757f8d885b2ffa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea48022b83f9f960724dab8fd75a4dc9d6e2269/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea48022b83f9f960724dab8fd75a4dc9d6e2269/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ea48022b83f9f960724dab8fd75a4dc9d6e2269", "patch": "@@ -1,3 +1,11 @@\n+2014-06-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/60098\n+\t* tree-ssa-dse.c (dse_possible_dead_store_p): Walk until\n+\twe hit a kill.\n+\t(dse_optimize_stmt): Simplify, now that we found a kill\n+\tearlier.\n+\n 2014-06-04  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-alias.c (stmt_may_clobber_ref_p): Improve handling"}, {"sha": "883a2bd43b2f40095400f87239d57075d999f913", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea48022b83f9f960724dab8fd75a4dc9d6e2269/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea48022b83f9f960724dab8fd75a4dc9d6e2269/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ea48022b83f9f960724dab8fd75a4dc9d6e2269", "patch": "@@ -1,3 +1,8 @@\n+2014-06-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/60098\n+\t* gcc.dg/tree-ssa/ssa-dse-15.c: New testcase.\n+\n 2014-06-04  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/ssa-dse-16.c: New testcase."}, {"sha": "cfddb30e4fa3398c262273f3ca5733a6413834fa", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-15.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea48022b83f9f960724dab8fd75a4dc9d6e2269/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea48022b83f9f960724dab8fd75a4dc9d6e2269/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-15.c?ref=0ea48022b83f9f960724dab8fd75a4dc9d6e2269", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dse1-details\" } */\n+\n+void *foo (int *p)\n+{\n+  void *q;\n+  /* We should be able to DSE this store (p may point to errno).  */\n+  *p = 0;\n+  q = __builtin_malloc (4);\n+  *p = 0;\n+  return q;\n+}\n+\n+int j;\n+void bar (int *i)\n+{\n+  /* This store is dead as well.  */\n+  j = 1;\n+  *i = 0;\n+  j = 2;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Deleted dead store\" 2 \"dse1\" } } */\n+/* { dg-final { cleanup-tree-dump \"dse1\" } } */"}, {"sha": "1d752e378a2042b73a7a7ad7e41dbbc6ba176a55", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 37, "deletions": 47, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ea48022b83f9f960724dab8fd75a4dc9d6e2269/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ea48022b83f9f960724dab8fd75a4dc9d6e2269/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=0ea48022b83f9f960724dab8fd75a4dc9d6e2269", "patch": "@@ -198,10 +198,8 @@ dse_possible_dead_store_p (gimple stmt, gimple *use_stmt)\n \t  break;\n \t}\n     }\n-  /* We deliberately stop on clobbering statements and not only on\n-     killing ones to make walking cheaper.  Otherwise we can just\n-     continue walking until both stores have equal reference trees.  */\n-  while (!stmt_may_clobber_ref_p (temp, gimple_assign_lhs (stmt)));\n+  /* Continue walking until we reach a kill.  */\n+  while (!stmt_kills_ref_p (temp, gimple_assign_lhs (stmt)));\n \n   *use_stmt = temp;\n \n@@ -248,57 +246,49 @@ dse_optimize_stmt (gimple_stmt_iterator *gsi)\n       if (!dse_possible_dead_store_p (stmt, &use_stmt))\n \treturn;\n \n+      /* Now we know that use_stmt kills the LHS of stmt.  */\n+\n       /* But only remove *this_2(D) ={v} {CLOBBER} if killed by\n \t another clobber stmt.  */\n       if (gimple_clobber_p (stmt)\n \t  && !gimple_clobber_p (use_stmt))\n \treturn;\n \n-      /* If we have precisely one immediate use at this point and the\n-\t stores are to the same memory location or there is a chain of\n-\t virtual uses from stmt and the stmt which stores to that same\n-\t memory location, then we may have found redundant store.  */\n-      if ((gimple_has_lhs (use_stmt)\n-\t   && (operand_equal_p (gimple_assign_lhs (stmt),\n-\t\t\t\tgimple_get_lhs (use_stmt), 0)))\n-\t  || stmt_kills_ref_p (use_stmt, gimple_assign_lhs (stmt)))\n+      basic_block bb;\n+\n+      /* If use_stmt is or might be a nop assignment, e.g. for\n+\t   struct { ... } S a, b, *p; ...\n+\t   b = a; b = b;\n+\t or\n+\t   b = a; b = *p; where p might be &b,\n+\t or\n+           *p = a; *p = b; where p might be &b,\n+\t or\n+           *p = *u; *p = *v; where p might be v, then USE_STMT\n+         acts as a use as well as definition, so store in STMT\n+         is not dead.  */\n+      if (stmt != use_stmt\n+\t  && ref_maybe_used_by_stmt_p (use_stmt, gimple_assign_lhs (stmt)))\n+\treturn;\n+\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n-\t  basic_block bb;\n-\n-\t  /* If use_stmt is or might be a nop assignment, e.g. for\n-\t     struct { ... } S a, b, *p; ...\n-\t     b = a; b = b;\n-\t     or\n-\t     b = a; b = *p; where p might be &b,\n-\t     or\n-\t     *p = a; *p = b; where p might be &b,\n-\t     or\n-\t     *p = *u; *p = *v; where p might be v, then USE_STMT\n-\t     acts as a use as well as definition, so store in STMT\n-\t     is not dead.  */\n-\t  if (stmt != use_stmt\n-\t      && ref_maybe_used_by_stmt_p (use_stmt, gimple_assign_lhs (stmt)))\n-\t    return;\n-\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-            {\n-              fprintf (dump_file, \"  Deleted dead store '\");\n-              print_gimple_stmt (dump_file, gsi_stmt (*gsi), dump_flags, 0);\n-              fprintf (dump_file, \"'\\n\");\n-            }\n-\n-\t  /* Then we need to fix the operand of the consuming stmt.  */\n-\t  unlink_stmt_vdef (stmt);\n-\n-\t  /* Remove the dead store.  */\n-\t  bb = gimple_bb (stmt);\n-\t  if (gsi_remove (gsi, true))\n-\t    bitmap_set_bit (need_eh_cleanup, bb->index);\n-\n-\t  /* And release any SSA_NAMEs set in this statement back to the\n-\t     SSA_NAME manager.  */\n-\t  release_defs (stmt);\n+\t  fprintf (dump_file, \"  Deleted dead store '\");\n+\t  print_gimple_stmt (dump_file, gsi_stmt (*gsi), dump_flags, 0);\n+\t  fprintf (dump_file, \"'\\n\");\n \t}\n+\n+      /* Then we need to fix the operand of the consuming stmt.  */\n+      unlink_stmt_vdef (stmt);\n+\n+      /* Remove the dead store.  */\n+      bb = gimple_bb (stmt);\n+      if (gsi_remove (gsi, true))\n+\tbitmap_set_bit (need_eh_cleanup, bb->index);\n+\n+      /* And release any SSA_NAMEs set in this statement back to the\n+\t SSA_NAME manager.  */\n+      release_defs (stmt);\n     }\n }\n "}]}