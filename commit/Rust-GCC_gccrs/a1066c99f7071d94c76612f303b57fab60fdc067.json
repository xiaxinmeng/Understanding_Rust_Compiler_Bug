{"sha": "a1066c99f7071d94c76612f303b57fab60fdc067", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEwNjZjOTlmNzA3MWQ5NGM3NjYxMmYzMDNiNTdmYWI2MGZkYzA2Nw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-08-24T23:42:35Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-08-24T23:42:35Z"}, "message": "error.c (tree_formatting_info): New data type.\n\n\t* error.c (tree_formatting_info): New data type.\n\t(tree_being_formatted): New macro.\n\t(tree_formatting_flags): Likewise.\n\t(put_whitespace): Likewise.\n\t(print_tree_identifier): Likewise.\n\t(print_identifier): Likewise.\n\t(cp_tree_printer, print_function_argument_list, print_declaration,\n\tprint_expression, print_function_declaration,\n\tprint_function_parameter, print_type, print_cv_qualifier): New\n\tfunctions.\n\t(init_error): Initialize lang_printer.\n\nFrom-SVN: r35965", "tree": {"sha": "a0e39f1e5abddfc001c1974b26591b0d2c1542d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0e39f1e5abddfc001c1974b26591b0d2c1542d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1066c99f7071d94c76612f303b57fab60fdc067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1066c99f7071d94c76612f303b57fab60fdc067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1066c99f7071d94c76612f303b57fab60fdc067", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1066c99f7071d94c76612f303b57fab60fdc067/comments", "author": null, "committer": null, "parents": [{"sha": "58d8c980111f84752e21b29c1be802ab6d66a689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58d8c980111f84752e21b29c1be802ab6d66a689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58d8c980111f84752e21b29c1be802ab6d66a689"}], "stats": {"total": 204, "additions": 202, "deletions": 2}, "files": [{"sha": "d0d7e0dee496f1566cb5683c094eeb992fd15505", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1066c99f7071d94c76612f303b57fab60fdc067/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1066c99f7071d94c76612f303b57fab60fdc067/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a1066c99f7071d94c76612f303b57fab60fdc067", "patch": "@@ -1,3 +1,17 @@\n+2000-08-25  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* error.c (tree_formatting_info): New data type.\n+\t(tree_being_formatted): New macro.\n+\t(tree_formatting_flags): Likewise.\n+\t(put_whitespace): Likewise.\n+\t(print_tree_identifier): Likewise.\n+\t(print_identifier): Likewise.\n+\t(cp_tree_printer, print_function_argument_list, print_declaration,\n+\tprint_expression, print_function_declaration,\n+\tprint_function_parameter, print_type, print_cv_qualifier): New\n+\tfunctions. \n+\t(init_error): Initialize lang_printer.\n+\n 2000-08-24  Jason Merrill  <jason@redhat.com>\n \n \t* typeck.c (build_ptrmemfunc): Just reinterpret if there's no"}, {"sha": "74d3cba3d046dd231fd64f632ee3276777c935c3", "filename": "gcc/cp/error.c", "status": "modified", "additions": 188, "deletions": 2, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1066c99f7071d94c76612f303b57fab60fdc067/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1066c99f7071d94c76612f303b57fab60fdc067/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=a1066c99f7071d94c76612f303b57fab60fdc067", "patch": "@@ -27,11 +27,30 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"diagnostic.h\"\n \n+enum pad { none, before, after };\n+\n+/* This data structure bundles altogether, all the information necessary\n+   for pretty-printing a C++ source-level entity represented by a tree.  */\n+typedef struct\n+{\n+  tree decl;\n+  int flags;\n+  enum pad pad;\n+} tree_formatting_info, *tfi_t;\n+\n+#define tree_being_formatted(TFI) (TFI)->decl\n+#define tree_formatting_flags(TFI) (TFI)->flags\n+#define put_whitespace(TFI) (TFI)->pad\n+\n typedef const char *cp_printer ();\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n+#define print_tree_identifier(BUFFER, TID) \\\n+   output_add_string (BUFFER, IDENTIFIER_POINTER (TID))\n+#define print_identifier(BUFFER, ID) output_add_string (BUFFER, ID)\n+\n /* Obstack where we build text strings for overloading, etc.  */\n static struct obstack scratch_obstack;\n static char *scratch_firstobj;\n@@ -56,8 +75,6 @@ static char *scratch_firstobj;\n \n # define NEXT_CODE(t) (TREE_CODE (TREE_TYPE (t)))\n \n-enum pad { none, before, after };\n-\n static const char *args_to_string\t\tPARAMS ((tree, int));\n static const char *assop_to_string\t\tPARAMS ((enum tree_code, int));\n static const char *code_to_string\t\tPARAMS ((enum tree_code, int));\n@@ -109,6 +126,15 @@ static void cp_diagnostic_finalizer PARAMS ((output_buffer *,\n static void cp_print_error_function PARAMS ((output_buffer *,\n                                              diagnostic_context *));\n \n+static int cp_tree_printer PARAMS ((output_buffer *));\n+static void print_function_argument_list PARAMS ((output_buffer *, tfi_t));\n+static void print_declaration PARAMS ((output_buffer *, tfi_t));\n+static void print_expression PARAMS ((output_buffer *, tfi_t));\n+static void print_function_declaration PARAMS ((output_buffer *, tfi_t));\n+static void print_function_parameter PARAMS ((output_buffer *, int));\n+static void print_type PARAMS ((output_buffer *, tfi_t));\n+static void print_cv_qualifier PARAMS ((output_buffer *, tfi_t));\n+\n \n #define A args_to_string\n #define C code_to_string\n@@ -156,6 +182,8 @@ init_error ()\n   print_error_function = lang_print_error_function;\n   lang_diagnostic_starter = cp_diagnostic_starter;\n   lang_diagnostic_finalizer = cp_diagnostic_finalizer;\n+\n+  lang_printer = cp_tree_printer;\n }\n \n /* Dump a scope, if deemed necessary.  */\n@@ -2596,3 +2624,161 @@ print_instantiation_context ()\n     (diagnostic_buffer, current_instantiation (), input_filename, lineno);\n   flush_diagnostic_buffer ();\n }\n+\f\n+/* Called from output_format -- during diagnostic message processing --\n+   to handle C++ specific format specifier with the following meanings:\n+   %A   function argument-list.\n+   %D   declaration.\n+   %E   expression.\n+   %F   function declaration.\n+   %P   function parameter whose position is indicated by an integer.\n+   %T   type.\n+   %V   cv-qualifier.  */\n+static int\n+cp_tree_printer (buffer)\n+     output_buffer *buffer;\n+{\n+  int be_verbose = 0;\n+  tree_formatting_info tfi;\n+  \n+  put_whitespace (&tfi) = none;\n+\n+  if (*output_buffer_text_cursor (buffer) == '+')\n+    ++output_buffer_text_cursor (buffer);\n+  if (*output_buffer_text_cursor (buffer) == '#')\n+    {\n+      be_verbose = 1;\n+      ++output_buffer_text_cursor (buffer);\n+    }\n+\n+  if (*output_buffer_text_cursor (buffer) == 'P')\n+      print_function_parameter\n+        (buffer, va_arg (output_buffer_format_args (buffer), int));\n+  else\n+    {\n+      tree_being_formatted (&tfi) =\n+        va_arg (output_buffer_format_args (buffer), tree);\n+\n+      switch (*output_buffer_text_cursor (buffer))\n+        {\n+        case 'A':\n+          print_function_argument_list (buffer, &tfi);\n+          break;\n+\n+        case 'D':\n+          print_declaration (buffer, &tfi);\n+          break;\n+\n+        case 'E':\n+          print_expression (buffer, &tfi);\n+          break;\n+          \n+        case 'F':\n+          print_function_declaration (buffer, &tfi);\n+          break;\n+\n+        case 'T':\n+          print_type (buffer, &tfi);\n+          break;\n+          \n+        case 'V':\n+          print_cv_qualifier (buffer, &tfi);\n+          break;\n+          \n+        default:\n+          return 0;\n+        }\n+    }\n+  \n+  return 1;\n+}\n+\n+/* Print a function argument-list represented by tree_being_formatted (TFI)\n+   onto BUFFER.  */\n+static void\n+print_function_argument_list (buffer, tfi)\n+     output_buffer *buffer __attribute__ ((__unused__));\n+     tfi_t tfi __attribute__  ((__unused__));\n+{\n+}\n+\n+/* Print a declaration represented by tree_being_formatted (TFI)\n+   onto buffer.  */   \n+static void\n+print_declaration (buffer, tfi)\n+     output_buffer *buffer __attribute__ ((__unused__));\n+     tfi_t tfi __attribute__ ((__unused__));\n+{\n+}\n+\n+/* Print an expression represented by tree_being_formatted (TFI)\n+   onto BUFFER.  */\n+static void\n+print_expression (buffer, tfi)\n+     output_buffer *buffer __attribute__ ((__unused__));\n+     tfi_t tfi __attribute__ ((__unused__));\n+{\n+}\n+\n+/* Print a function declaration represented by tree_being_formatted (TFI)\n+   onto BUFFER.  */\n+static void\n+print_function_declaration (buffer, tfi)\n+     output_buffer *buffer __attribute__ ((__unused__));\n+     tfi_t tfi __attribute__ ((__unused__));\n+{\n+}\n+\n+/* Print a type represented by tree_being_formattted (TFI) onto BUFFER.  */\n+static void\n+print_type (buffer, tfi)\n+     output_buffer *buffer __attribute__ ((__unused__));\n+     tfi_t tfi __attribute__ ((__unused__));\n+{\n+}\n+\n+/* Print the N'th function parameter onto BUFFER.  A negative value of N\n+   means the implicit \"this\" parameter of a member function.  */\n+static void\n+print_function_parameter (buffer, n)\n+     output_buffer *buffer;\n+     int n;\n+{\n+  if (n < 0)\n+    print_identifier (buffer, \"this\");\n+  else\n+    output_decimal (buffer, n + 1);\n+}\n+\n+/* Print the cv-quafilers of tree_being_formatted (TFI) onto BUFFER.  */\n+static void\n+print_cv_qualifier (buffer, tfi)\n+     output_buffer *buffer;\n+     tree_formatting_info *tfi;\n+{\n+  int cv = TYPE_QUALS (tree_being_formatted (tfi));\n+  int pad_after = after == put_whitespace (tfi);\n+  static const int mask[]\n+    = {TYPE_QUAL_CONST, TYPE_QUAL_VOLATILE, TYPE_QUAL_RESTRICT};\n+  static const char *const qualifier[]\n+    = { \"const\", \"volatile\", \"__restrict__\" };\n+\n+  if (cv != 0)\n+    {\n+      int i;\n+      for (i = 0; i != 3; ++i)\n+        if (mask[i] & cv)\n+          {\n+            if (put_whitespace (tfi) == before)\n+              output_add_space (buffer);\n+            print_identifier (buffer, qualifier[i]);\n+            put_whitespace (tfi) = before;\n+          }\n+      \n+      if (pad_after)\n+        {\n+          output_add_space (buffer);\n+          put_whitespace (tfi) = none;\n+        }\n+    }\n+}"}]}