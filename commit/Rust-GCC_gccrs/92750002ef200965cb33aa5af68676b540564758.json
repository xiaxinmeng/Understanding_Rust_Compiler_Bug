{"sha": "92750002ef200965cb33aa5af68676b540564758", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI3NTAwMDJlZjIwMDk2NWNiMzNhYTVhZjY4Njc2YjU0MDU2NDc1OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-24T15:17:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-24T15:17:43Z"}, "message": "PR libstdc++/90220 Fix std::any_cast for array types\n\nAlthough the std::any constructors use decay_t to determine the type of\nthe contained value, std::any_cast should use the un-decayed type (and\nso always fail for function and array types that decay to pointers).\n\nUsing remove_cv_t is correct, because the condition for std::any_cast\nto return non-null is operand.type() == typeid(T) and typeid ignores\ntop-level cv-qualifiers.\n\n\tPR libstdc++/90220\n\t* include/std/any (__any_caster): Use remove_cv_t instead of decay_t.\n\tAvoid a runtime check for types that can never be stored in std::any.\n\t* testsuite/20_util/any/misc/any_cast.cc: Test std::any_cast with\n\tarray types.\n\nFrom-SVN: r270547", "tree": {"sha": "fa0e6eb0d5e98c5c22274cde7daca42c26449e3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa0e6eb0d5e98c5c22274cde7daca42c26449e3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92750002ef200965cb33aa5af68676b540564758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92750002ef200965cb33aa5af68676b540564758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92750002ef200965cb33aa5af68676b540564758", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92750002ef200965cb33aa5af68676b540564758/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "540bc8a8b1ff0aeb19ba6ac6304dd2e2075412c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/540bc8a8b1ff0aeb19ba6ac6304dd2e2075412c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/540bc8a8b1ff0aeb19ba6ac6304dd2e2075412c7"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "2ab686ba3bb346ae8a7ea2c9659b027f59135aea", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92750002ef200965cb33aa5af68676b540564758/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92750002ef200965cb33aa5af68676b540564758/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=92750002ef200965cb33aa5af68676b540564758", "patch": "@@ -1,5 +1,11 @@\n 2019-04-24  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/90220\n+\t* include/std/any (__any_caster): Use remove_cv_t instead of decay_t.\n+\tAvoid a runtime check for types that can never be stored in std::any.\n+\t* testsuite/20_util/any/misc/any_cast.cc: Test std::any_cast with\n+\tarray types.\n+\n \tPR libstdc++/90220 (partial)\n \t* include/std/any (any_cast<T>(any*), any_cast<T>(const any*)): Do\n \tnot attempt ill-formed static_cast to pointers to non-object types."}, {"sha": "29fe03e2b82a5f562d7bd9fdeb5ea27c04ac424b", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92750002ef200965cb33aa5af68676b540564758/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92750002ef200965cb33aa5af68676b540564758/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=92750002ef200965cb33aa5af68676b540564758", "patch": "@@ -506,14 +506,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     void* __any_caster(const any* __any)\n     {\n-      if constexpr (is_copy_constructible_v<decay_t<_Tp>>)\n+      // any_cast<T> returns non-null if __any->type() == typeid(T) and\n+      // typeid(T) ignores cv-qualifiers so remove them:\n+      using _Up = remove_cv_t<_Tp>;\n+      // The contained value has a decayed type, so if decay_t<U> is not U,\n+      // then it's not possible to have a contained value of type U:\n+      if constexpr (!is_same_v<decay_t<_Up>, _Up>)\n+\treturn nullptr;\n+      // Only copy constructible types can be used for contained values:\n+      else if constexpr (!is_copy_constructible_v<_Up>)\n+\treturn nullptr;\n+      // This check is equivalent to __any->type() == typeid(_Tp)\n+      else if (__any->_M_manager == &any::_Manager<_Up>::_S_manage)\n \t{\n-\t  if (__any->_M_manager == &any::_Manager<decay_t<_Tp>>::_S_manage)\n-\t    {\n-\t      any::_Arg __arg;\n-\t      __any->_M_manager(any::_Op_access, __any, &__arg);\n-\t      return __arg._M_obj;\n-\t    }\n+\t  any::_Arg __arg;\n+\t  __any->_M_manager(any::_Op_access, __any, &__arg);\n+\t  return __arg._M_obj;\n \t}\n       return nullptr;\n     }"}, {"sha": "b7fbbc5ee9503766ed2e73e2a7798c12cf340aee", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92750002ef200965cb33aa5af68676b540564758/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92750002ef200965cb33aa5af68676b540564758/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc?ref=92750002ef200965cb33aa5af68676b540564758", "patch": "@@ -154,6 +154,22 @@ void test06()\n   }\n }\n \n+void test07()\n+{\n+  int arr[3];\n+  any a(arr);\n+  VERIFY( a.type() == typeid(int*) );\t// contained value is decayed\n+\n+  int (*p1)[3] = any_cast<int[3]>(&a);\n+  VERIFY( a.type() != typeid(int[3]) ); // so any_cast should return nullptr\n+  VERIFY( p1 == nullptr );\n+  int (*p2)[] = any_cast<int[]>(&a);\n+  VERIFY( a.type() != typeid(int[]) );\t// so any_cast should return nullptr\n+  VERIFY( p2 == nullptr );\n+  const int (*p3)[] = any_cast<int[]>(&std::as_const(a));\n+  VERIFY( p3 == nullptr );\n+}\n+\n int main()\n {\n   test01();\n@@ -162,4 +178,5 @@ int main()\n   test04();\n   test05();\n   test06();\n+  test07();\n }"}]}