{"sha": "ac699a047f74de2bb8f1d538b07c89075cd25c84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM2OTlhMDQ3Zjc0ZGUyYmI4ZjFkNTM4YjA3Yzg5MDc1Y2QyNWM4NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-05-05T15:43:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-05-05T15:43:22Z"}, "message": "re PR tree-optimization/80558 (VRP not handling x & -2 well)\n\n\tPR tree-optimization/80558\n\t* tree-vrp.c (extract_range_from_binary_expr_1): Optimize\n\t[x, y] op z into [x op, y op z] for op & or | if conditions\n\tare met.\n\n\t* gcc.dg/tree-ssa/vrp115.c: New test.\n\nFrom-SVN: r247641", "tree": {"sha": "d406a59213928fe0dded5f9492923ddd28567856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d406a59213928fe0dded5f9492923ddd28567856"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac699a047f74de2bb8f1d538b07c89075cd25c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac699a047f74de2bb8f1d538b07c89075cd25c84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac699a047f74de2bb8f1d538b07c89075cd25c84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac699a047f74de2bb8f1d538b07c89075cd25c84/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "655b5fc85b56cf9ac46af952041abf56ca383faa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/655b5fc85b56cf9ac46af952041abf56ca383faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/655b5fc85b56cf9ac46af952041abf56ca383faa"}], "stats": {"total": 115, "additions": 114, "deletions": 1}, "files": [{"sha": "51471bfc8fefb16f16b1e597c32c7ffa1fde8fbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac699a047f74de2bb8f1d538b07c89075cd25c84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac699a047f74de2bb8f1d538b07c89075cd25c84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac699a047f74de2bb8f1d538b07c89075cd25c84", "patch": "@@ -1,3 +1,10 @@\n+2017-05-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/80558\n+\t* tree-vrp.c (extract_range_from_binary_expr_1): Optimize\n+\t[x, y] op z into [x op, y op z] for op & or | if conditions\n+\tare met.\n+\n 2017-05-05  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Prakhar Bahuguna  <prakhar.bahuguna@arm.com>\n "}, {"sha": "7a1b00207aedfd5ab342c8ab95ba6916f5e7ddb4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac699a047f74de2bb8f1d538b07c89075cd25c84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac699a047f74de2bb8f1d538b07c89075cd25c84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac699a047f74de2bb8f1d538b07c89075cd25c84", "patch": "@@ -1,3 +1,8 @@\n+2017-05-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/80558\n+\t* gcc.dg/tree-ssa/vrp115.c: New test.\n+\n 2017-05-05  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \t    Prakhar Bahuguna  <prakhar.bahuguna@arm.com>"}, {"sha": "6d1c9c50b37c4512d97d7ab874e0e0832a71da6f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp115.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac699a047f74de2bb8f1d538b07c89075cd25c84/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp115.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac699a047f74de2bb8f1d538b07c89075cd25c84/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp115.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp115.c?ref=ac699a047f74de2bb8f1d538b07c89075cd25c84", "patch": "@@ -0,0 +1,50 @@\n+/* PR tree-optimization/80558 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"evrp\" } } */\n+\n+void link_error (void);\n+\n+void\n+f1 (int x)\n+{\n+  if (x >= 5 && x <= 19)\n+    {\n+      x &= -2;\n+      if (x < 4 || x > 18)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f2 (int x)\n+{\n+  if (x >= 5 && x <= 19)\n+    {\n+      x |= 7;\n+      if (x < 7 || x > 23)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f3 (int x)\n+{\n+  if (x >= -18 && x <= 19)\n+    {\n+      x |= 7;\n+      if (x < -17 || x > 23)\n+\tlink_error ();\n+    }\n+}\n+\n+void\n+f4 (int x)\n+{\n+  if (x >= 1603 && x <= 2015)\n+    {\n+      x &= 496;\n+      if (x < 64 || x > 464)\n+\tlink_error ();\n+    }\n+}"}, {"sha": "cf50e908257c00bd9ecd5f1274cdaf5fa0896949", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac699a047f74de2bb8f1d538b07c89075cd25c84/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac699a047f74de2bb8f1d538b07c89075cd25c84/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ac699a047f74de2bb8f1d538b07c89075cd25c84", "patch": "@@ -2865,8 +2865,59 @@ extract_range_from_binary_expr_1 (value_range *vr,\n \t\t\t\t\t\t  &may_be_nonzero1,\n \t\t\t\t\t\t  &must_be_nonzero1);\n \n+      if (code == BIT_AND_EXPR || code == BIT_IOR_EXPR)\n+\t{\n+\t  value_range *vr0p = NULL, *vr1p = NULL;\n+\t  if (range_int_cst_singleton_p (&vr1))\n+\t    {\n+\t      vr0p = &vr0;\n+\t      vr1p = &vr1;\n+\t    }\n+\t  else if (range_int_cst_singleton_p (&vr0))\n+\t    {\n+\t      vr0p = &vr1;\n+\t      vr1p = &vr0;\n+\t    }\n+\t  /* For op & or | attempt to optimize:\n+\t     [x, y] op z into [x op z, y op z]\n+\t     if z is a constant which (for op | its bitwise not) has n\n+\t     consecutive least significant bits cleared followed by m 1\n+\t     consecutive bits set immediately above it and either\n+\t     m + n == precision, or (x >> (m + n)) == (y >> (m + n)).\n+\t     The least significant n bits of all the values in the range are\n+\t     cleared or set, the m bits above it are preserved and any bits\n+\t     above these are required to be the same for all values in the\n+\t     range.  */\n+\t  if (vr0p && range_int_cst_p (vr0p))\n+\t    {\n+\t      wide_int w = vr1p->min;\n+\t      int m = 0, n = 0;\n+\t      if (code == BIT_IOR_EXPR)\n+\t\tw = ~w;\n+\t      if (wi::eq_p (w, 0))\n+\t\tn = TYPE_PRECISION (expr_type);\n+\t      else\n+\t\t{\n+\t\t  n = wi::ctz (w);\n+\t\t  w = ~(w | wi::mask (n, false, w.get_precision ()));\n+\t\t  if (wi::eq_p (w, 0))\n+\t\t    m = TYPE_PRECISION (expr_type) - n;\n+\t\t  else\n+\t\t    m = wi::ctz (w) - n;\n+\t\t}\n+\t      wide_int mask = wi::mask (m + n, true, w.get_precision ());\n+\t      if (wi::eq_p (mask & vr0p->min, mask & vr0p->max))\n+\t\t{\n+\t\t  min = int_const_binop (code, vr0p->min, vr1p->min);\n+\t\t  max = int_const_binop (code, vr0p->max, vr1p->min);\n+\t\t}\n+\t    }\n+\t}\n+\n       type = VR_RANGE;\n-      if (code == BIT_AND_EXPR)\n+      if (min && max)\n+\t/* Optimized above already.  */;\n+      else if (code == BIT_AND_EXPR)\n \t{\n \t  min = wide_int_to_tree (expr_type,\n \t\t\t\t  must_be_nonzero0 & must_be_nonzero1);"}]}