{"sha": "2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYxNWUyNTVlZGEzYTBlZjRlOGYwN2MwMTc2MTk4ZWMwYTFiZTdjNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-04-12T22:47:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-04-12T22:47:34Z"}, "message": "recog.c (offsettable_address_p): Match the logic in adjust_address.\n\n        * recog.c (offsettable_address_p): Match the logic in adjust_address.\n\n        * config/sparc/sparc.h (LEGITIMIZE_RELOAD_ADDRESS): Handle TFmode\n        in 64-bit mode only.  Use only for 32-bit or MEDLOW.\n\nFrom-SVN: r52250", "tree": {"sha": "20073095e154766bb4d21c028a51e77ddd6319b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20073095e154766bb4d21c028a51e77ddd6319b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5/comments", "author": null, "committer": null, "parents": [{"sha": "ef290537a3018e8ce7f449b8b3dfefa7efcc2be6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef290537a3018e8ce7f449b8b3dfefa7efcc2be6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef290537a3018e8ce7f449b8b3dfefa7efcc2be6"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "805698266fc12d954cf188ef0155b98bbfeab83d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5", "patch": "@@ -1,3 +1,10 @@\n+2002-04-12  Richard Henderson  <rth@redhat.com>\n+\n+\t* recog.c (offsettable_address_p): Match the logic in adjust_address.\n+\n+\t* config/sparc/sparc.h (LEGITIMIZE_RELOAD_ADDRESS): Handle TFmode\n+\tin 64-bit mode only.  Use only for 32-bit or MEDLOW.\n+\n 2002-04-12  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* config/alpha/osf.h (LINK_SPEC): Pass -S to silence ld warnings."}, {"sha": "d48b8ddb07a9da216697b7b599493eadc49ac042", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5", "patch": "@@ -2336,12 +2336,13 @@ do {                                                                    \\\n   /* Decompose SImode constants into hi+lo_sum.  We do have to \t\t\\\n      rerecognize what we produce, so be careful.  */\t\t\t\\\n   if (CONSTANT_P (X)\t\t\t\t\t\t\t\\\n-      && (MODE != TFmode || TARGET_V9)\t\t\t\t\t\\\n+      && (MODE != TFmode || TARGET_ARCH64)\t\t\t\t\\\n       && GET_MODE (X) == SImode\t\t\t\t\t\t\\\n       && GET_CODE (X) != LO_SUM && GET_CODE (X) != HIGH\t\t\t\\\n       && ! (flag_pic\t\t\t\t\t\t\t\\\n \t    && (symbolic_operand (X, Pmode)\t\t\t\t\\\n-\t\t|| pic_address_needs_scratch (X))))\t\t\t\\\n+\t\t|| pic_address_needs_scratch (X)))\t\t\t\\\n+      && sparc_cmodel <= CM_MEDLOW)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       X = gen_rtx_LO_SUM (GET_MODE (X),\t\t\t\t\t\\\n \t\t\t  gen_rtx_HIGH (GET_MODE (X), X), X);\t\t\\"}, {"sha": "2720d8e07e347d927c36c94f93b43e5bd2a0ac99", "filename": "gcc/recog.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=2f15e255eda3a0ef4e8f07c0176198ec0a1be7c5", "patch": "@@ -1969,7 +1969,9 @@ offsettable_address_p (strictp, mode, y)\n      of the specified mode.  We assume that if Y and Y+c are\n      valid addresses then so is Y+d for all 0<d<c.  adjust_address will\n      go inside a LO_SUM here, so we do so as well.  */\n-  if (GET_CODE (y) == LO_SUM)\n+  if (GET_CODE (y) == LO_SUM\n+      && mode != BLKmode\n+      && mode_sz <= GET_MODE_ALIGNMENT (mode) / BITS_PER_UNIT)\n     z = gen_rtx_LO_SUM (GET_MODE (y), XEXP (y, 0),\n \t\t\tplus_constant (XEXP (y, 1), mode_sz - 1));\n   else"}]}