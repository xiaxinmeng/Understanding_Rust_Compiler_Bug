{"sha": "ef8288f7deed988dc714fea3b0dc293890a835a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY4Mjg4ZjdkZWVkOTg4ZGM3MTRmZWEzYjBkYzI5Mzg5MGE4MzVhNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-01-25T10:47:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-01-25T10:47:46Z"}, "message": "dwarf2out.c (dwarf2out_init): Use ggc_add_rtx_varray_root.\n\n        * dwarf2out.c (dwarf2out_init): Use ggc_add_rtx_varray_root.\n        * ggc-common.c (ggc_add_rtx_varray_root): New.\n        (ggc_mark_rtx_varray): New.\n        (ggc_mark_rtx_varray_ptr): New.  Shift all ggc_mark_foo_ptr\n        functions down below ggc_mark_foo.\n        * ggc.h (ggc_add_rtx_varray_root, ggc_mark_rtx_varray): Declare.\n\nFrom-SVN: r31607", "tree": {"sha": "4f0cef56ae8d1550a0b43eef22201fc1b5484acf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f0cef56ae8d1550a0b43eef22201fc1b5484acf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef8288f7deed988dc714fea3b0dc293890a835a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8288f7deed988dc714fea3b0dc293890a835a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8288f7deed988dc714fea3b0dc293890a835a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8288f7deed988dc714fea3b0dc293890a835a6/comments", "author": null, "committer": null, "parents": [{"sha": "41bd3d41301e812200371a73c7eddd1b0f0ddf44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41bd3d41301e812200371a73c7eddd1b0f0ddf44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41bd3d41301e812200371a73c7eddd1b0f0ddf44"}], "stats": {"total": 150, "additions": 98, "deletions": 52}, "files": [{"sha": "edc2475892804523942e994aa169fb86b9466bbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8288f7deed988dc714fea3b0dc293890a835a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8288f7deed988dc714fea3b0dc293890a835a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef8288f7deed988dc714fea3b0dc293890a835a6", "patch": "@@ -1,3 +1,12 @@\n+2000-01-25  Richard Henderson  <rth@cygnus.com>\n+\n+\t* dwarf2out.c (dwarf2out_init): Use ggc_add_rtx_varray_root.\n+\t* ggc-common.c (ggc_add_rtx_varray_root): New.\n+\t(ggc_mark_rtx_varray): New.\n+\t(ggc_mark_rtx_varray_ptr): New.  Shift all ggc_mark_foo_ptr\n+\tfunctions down below ggc_mark_foo.\n+\t* ggc.h (ggc_add_rtx_varray_root, ggc_mark_rtx_varray): Declare.\n+\n 2000-01-25  Richard Henderson  <rth@cygnus.com>\n \n \t* alpha.c (secondary_reload_class): Don't allocate a secondary"}, {"sha": "2ca007a4b057c2d63ead10c217bb2607e16527c4", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8288f7deed988dc714fea3b0dc293890a835a6/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8288f7deed988dc714fea3b0dc293890a835a6/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ef8288f7deed988dc714fea3b0dc293890a835a6", "patch": "@@ -9829,7 +9829,7 @@ dwarf2out_init (asm_out_file, main_input_filename)\n   if (ggc_p)\n     {\n       VARRAY_RTX_INIT (used_rtx_varray, 32, \"used_rtx_varray\");\n-      ggc_add_tree_varray_root (&used_rtx_varray, 1);\n+      ggc_add_rtx_varray_root (&used_rtx_varray, 1);\n     }\n \n   ASM_GENERATE_INTERNAL_LABEL (text_end_label, TEXT_END_LABEL, 0);"}, {"sha": "bc2a9dc4c01efd6ca1afec1eca82b7c443330f0f", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 86, "deletions": 51, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8288f7deed988dc714fea3b0dc293890a835a6/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8288f7deed988dc714fea3b0dc293890a835a6/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=ef8288f7deed988dc714fea3b0dc293890a835a6", "patch": "@@ -35,6 +35,7 @@ static ggc_statistics *ggc_stats;\n \n static void ggc_mark_rtx_ptr PARAMS ((void *));\n static void ggc_mark_tree_ptr PARAMS ((void *));\n+static void ggc_mark_rtx_varray_ptr PARAMS ((void *));\n static void ggc_mark_tree_varray_ptr PARAMS ((void *));\n static void ggc_mark_tree_hash_table_ptr PARAMS ((void *));\n static void ggc_mark_string_ptr PARAMS ((void *));\n@@ -56,57 +57,6 @@ struct ggc_root\n \n static struct ggc_root *roots;\n \n-/* Type-correct function to pass to ggc_add_root.  It just forwards\n-   *ELT (which is an rtx) to ggc_mark_tree_varray.  */\n-\n-static void\n-ggc_mark_rtx_ptr (elt)\n-     void *elt;\n-{\n-  ggc_mark_rtx (*(rtx *) elt);\n-}\n-\n-/* Type-correct function to pass to ggc_add_root.  It just forwards\n-   *ELT (which is a tree) to ggc_mark_tree.  */\n-\n-static void\n-ggc_mark_tree_ptr (elt)\n-     void *elt;\n-{\n-  ggc_mark_tree (*(tree *) elt);\n-}\n-\n-/* Type-correct function to pass to ggc_add_root.  It just forwards\n-   ELT (which is really a varray_type *) to ggc_mark_tree_varray.  */\n-\n-static void\n-ggc_mark_tree_varray_ptr (elt)\n-     void *elt;\n-{\n-  ggc_mark_tree_varray (*(varray_type *) elt);\n-}\n-\n-/* Type-correct function to pass to ggc_add_root.  It just forwards\n-   ELT (which is really a struct hash_table **) to\n-   ggc_mark_tree_hash_table.  */\n-\n-static void\n-ggc_mark_tree_hash_table_ptr (elt)\n-     void *elt;\n-{\n-  ggc_mark_tree_hash_table (*(struct hash_table **) elt);\n-}\n-\n-/* Type-correct function to pass to ggc_add_root.  It just forwards\n-   ELT (which is really a char **) to ggc_mark_string.  */\n-\n-static void\n-ggc_mark_string_ptr (elt)\n-     void *elt;\n-{\n-  ggc_mark_string (*(char **) elt);\n-}\n-\n /* Add BASE as a new garbage collection root.  It is an array of\n    length NELT with each element SIZE bytes long.  CB is a \n    function that will be called with a pointer to each element\n@@ -150,6 +100,17 @@ ggc_add_tree_root (base, nelt)\n   ggc_add_root (base, nelt, sizeof(tree), ggc_mark_tree_ptr);\n }\n \n+/* Register a varray of rtxs as a GC root.  */\n+\n+void\n+ggc_add_rtx_varray_root (base, nelt)\n+     varray_type *base;\n+     int nelt;\n+{\n+  ggc_add_root (base, nelt, sizeof (varray_type), \n+\t\tggc_mark_rtx_varray_ptr);\n+}\n+\n /* Register a varray of trees as a GC root.  */\n \n void\n@@ -476,6 +437,19 @@ ggc_mark_tree_children (t)\n     }\n }\n \n+/* Mark all the elements of the varray V, which contains rtxs.  */\n+\n+void\n+ggc_mark_rtx_varray (v)\n+     varray_type v;\n+{\n+  int i;\n+\n+  if (v)\n+    for (i = v->num_elements - 1; i >= 0; --i) \n+      ggc_mark_rtx (VARRAY_RTX (v, i));\n+}\n+\n /* Mark all the elements of the varray V, which contains trees.  */\n \n void\n@@ -509,6 +483,67 @@ ggc_mark_tree_hash_table (ht)\n   hash_traverse (ht, ggc_mark_tree_hash_table_entry, /*info=*/0);\n }\n \n+/* Type-correct function to pass to ggc_add_root.  It just forwards\n+   *ELT (which is an rtx) to ggc_mark_rtx.  */\n+\n+static void\n+ggc_mark_rtx_ptr (elt)\n+     void *elt;\n+{\n+  ggc_mark_rtx (*(rtx *) elt);\n+}\n+\n+/* Type-correct function to pass to ggc_add_root.  It just forwards\n+   *ELT (which is a tree) to ggc_mark_tree.  */\n+\n+static void\n+ggc_mark_tree_ptr (elt)\n+     void *elt;\n+{\n+  ggc_mark_tree (*(tree *) elt);\n+}\n+\n+/* Type-correct function to pass to ggc_add_root.  It just forwards\n+   ELT (which is really a varray_type *) to ggc_mark_rtx_varray.  */\n+\n+static void\n+ggc_mark_rtx_varray_ptr (elt)\n+     void *elt;\n+{\n+  ggc_mark_rtx_varray (*(varray_type *) elt);\n+}\n+\n+/* Type-correct function to pass to ggc_add_root.  It just forwards\n+   ELT (which is really a varray_type *) to ggc_mark_tree_varray.  */\n+\n+static void\n+ggc_mark_tree_varray_ptr (elt)\n+     void *elt;\n+{\n+  ggc_mark_tree_varray (*(varray_type *) elt);\n+}\n+\n+/* Type-correct function to pass to ggc_add_root.  It just forwards\n+   ELT (which is really a struct hash_table **) to\n+   ggc_mark_tree_hash_table.  */\n+\n+static void\n+ggc_mark_tree_hash_table_ptr (elt)\n+     void *elt;\n+{\n+  ggc_mark_tree_hash_table (*(struct hash_table **) elt);\n+}\n+\n+/* Type-correct function to pass to ggc_add_root.  It just forwards\n+   ELT (which is really a char **) to ggc_mark_string.  */\n+\n+static void\n+ggc_mark_string_ptr (elt)\n+     void *elt;\n+{\n+  ggc_mark_string (*(char **) elt);\n+}\n+\n /* Allocate a gc-able string.  If CONTENTS is null, then the memory will\n    be uninitialized.  If LENGTH is -1, then CONTENTS is assumed to be a\n    null-terminated string and the memory sized accordingly.  Otherwise,"}, {"sha": "1782a4ddfa78716e561e35fb4c8cc84ec59b601b", "filename": "gcc/ggc.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8288f7deed988dc714fea3b0dc293890a835a6/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8288f7deed988dc714fea3b0dc293890a835a6/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=ef8288f7deed988dc714fea3b0dc293890a835a6", "patch": "@@ -50,12 +50,14 @@ void ggc_add_root PARAMS ((void *base, int nelt, int size, void (*)(void *)));\n void ggc_add_rtx_root PARAMS ((struct rtx_def **, int nelt));\n void ggc_add_tree_root PARAMS ((union tree_node **, int nelt));\n void ggc_add_string_root PARAMS ((char **, int nelt));\n+void ggc_add_rtx_varray_root PARAMS ((struct varray_head_tag **, int nelt));\n void ggc_add_tree_varray_root PARAMS ((struct varray_head_tag **, int nelt));\n void ggc_add_tree_hash_table_root PARAMS ((struct hash_table **, int nelt));\n void ggc_del_root PARAMS ((void *base));\n \n /* Mark nodes from the gc_add_root callback.  These functions follow\n    pointers to mark other objects too.  */\n+extern void ggc_mark_rtx_varray PARAMS ((struct varray_head_tag *));\n extern void ggc_mark_tree_varray PARAMS ((struct varray_head_tag *));\n extern void ggc_mark_tree_hash_table PARAMS ((struct hash_table *));\n extern void ggc_mark_roots PARAMS ((void));"}]}