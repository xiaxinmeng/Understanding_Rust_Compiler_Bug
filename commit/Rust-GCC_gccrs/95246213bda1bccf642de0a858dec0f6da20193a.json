{"sha": "95246213bda1bccf642de0a858dec0f6da20193a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTUyNDYyMTNiZGExYmNjZjY0MmRlMGE4NThkZWMwZjZkYTIwMTkzYQ==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1993-03-03T14:47:15Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1993-03-03T14:47:15Z"}, "message": "(ashlsi3): Use lhs_lshift_operand for operand 1.\n\nCall gen_zvdep_imm when operand 1 is a CONST_INT.\n(zvdep_imm): New pattern.\n(ashift recognizer for [reg const_int]): Use %P and %L\noutput modifiers.\n(ashiftrt recognizer for [reg const_int]): Likewise.\n(lshrsi3): Likewise.\n(rotrsi3): Reduce integer argument to 5 bits.\nRemove some empty lines.\n\nFrom-SVN: r3622", "tree": {"sha": "40129841f82c744d539fb2b280b782ed183965da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40129841f82c744d539fb2b280b782ed183965da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95246213bda1bccf642de0a858dec0f6da20193a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95246213bda1bccf642de0a858dec0f6da20193a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95246213bda1bccf642de0a858dec0f6da20193a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95246213bda1bccf642de0a858dec0f6da20193a/comments", "author": null, "committer": null, "parents": [{"sha": "e150ae4fbecd5ef948cbe161e45958c75f9d21e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e150ae4fbecd5ef948cbe161e45958c75f9d21e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e150ae4fbecd5ef948cbe161e45958c75f9d21e9"}], "stats": {"total": 83, "additions": 40, "deletions": 43}, "files": [{"sha": "ba2b9d22066aefacb0007faa53988b9f6217003e", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 40, "deletions": 43, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95246213bda1bccf642de0a858dec0f6da20193a/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95246213bda1bccf642de0a858dec0f6da20193a/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=95246213bda1bccf642de0a858dec0f6da20193a", "patch": "@@ -2206,7 +2206,7 @@\n \n (define_expand \"ashlsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(ashift:SI (match_operand:SI 1 \"arith5_operand\" \"\")\n+\t(ashift:SI (match_operand:SI 1 \"lhs_lshift_operand\" \"\")\n \t\t   (match_operand:SI 2 \"arith32_operand\" \"\")))]\n   \"\"\n   \"\n@@ -2215,7 +2215,10 @@\n     {\n       rtx temp = gen_reg_rtx (SImode);\n       emit_insn (gen_subsi3 (temp, GEN_INT (31), operands[2]));\n-      emit_insn (gen_zvdep32 (operands[0], operands[1], temp));\n+\tif (GET_CODE (operands[1]) == CONST_INT)\n+\t  emit_insn (gen_zvdep_imm (operands[0], operands[1], temp));\n+\telse\n+\t  emit_insn (gen_zvdep32 (operands[0], operands[1], temp));\n       DONE;\n     }\n   /* Make sure both inputs are not constants, \n@@ -2228,17 +2231,14 @@\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n   \"\"\n-  \"*\n-{\n-  rtx xoperands[4];\n-  xoperands[0] = operands[0];\n-  xoperands[1] = operands[1];\n-  xoperands[2] = GEN_INT (31 - (INTVAL (operands[2]) & 31));\n-  xoperands[3] = GEN_INT (32 - (INTVAL (operands[2]) & 31));\n-  output_asm_insn (\\\"zdep %1,%2,%3,%0\\\", xoperands);\n-  return \\\"\\\";\n-}\")\n+  \"zdep %1,%P2,%L2,%0\")\n \n+; Match cases of op1 a CONST_INT here that zvdep_imm doesn't handle.\n+; Doing it like this makes slightly better code since reload can\n+; replace a register with a known value in range -16..15 with a\n+; constant.  Ideally, we would like to merge zvdep32 and zvdep_imm,\n+; but since we have no more CONST_OK... characters, that is not\n+; possible.\n (define_insn \"zvdep32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(ashift:SI (match_operand:SI 1 \"arith5_operand\" \"r,L\")\n@@ -2249,6 +2249,20 @@\n    zvdep %1,32,%0\n    zvdepi %1,32,%0\")\n \n+(define_insn \"zvdep_imm\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ashift:SI (match_operand:SI 1 \"lhs_lshift_cint_operand\" \"\")\n+\t\t   (minus:SI (const_int 31)\n+\t\t\t     (match_operand:SI 2 \"register_operand\" \"q\"))))]\n+  \"\"\n+  \"*\n+{\n+  int x = INTVAL (operands[1]);\n+  operands[2] = GEN_INT (4 + exact_log2 ((x >> 4) + 1));\n+  operands[1] = GEN_INT ((x & 0xf) - 0x10);\n+  return \\\"zvdepi %1,%2,%0\\\";\n+}\")\n+\n (define_expand \"ashrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"\")\n@@ -2270,16 +2284,7 @@\n \t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n   \"\"\n-  \"*\n-{\n-  rtx xoperands[4];\n-  xoperands[0] = operands[0];\n-  xoperands[1] = operands[1];\n-  xoperands[2] = GEN_INT (31 - (INTVAL (operands[2]) & 31));\n-  xoperands[3] = GEN_INT (32 - (INTVAL (operands[2]) & 31));\n-  output_asm_insn (\\\"extrs %1,%2,%3,%0\\\", xoperands);\n-  return \\\"\\\";\n-}\")\n+  \"extrs %1,%P2,%L2,%0\")\n \n (define_insn \"vextrs32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n@@ -2290,31 +2295,26 @@\n   \"vextrs %1,32,%0\")\n \n (define_insn \"lshrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t     (match_operand:SI 2 \"arith32_operand\" \"qn\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n+\t\t     (match_operand:SI 2 \"arith32_operand\" \"q,n\")))]\n   \"\"\n-  \"*\n-{\n-  if (GET_CODE (operands[2]) == CONST_INT)\n-    {\n-      operands[3] = GEN_INT (32 - (INTVAL (operands[2]) & 31));\n-      operands[2] = GEN_INT (31 - (INTVAL (operands[2]) & 31));\n-      return \\\"extru %1,%2,%3,%0\\\";\n-    }\n-  else\n-    return \\\"vshd 0,%1,%0\\\";\n-}\")\n+  \"@\n+   vshd 0,%1,%0\n+   extru %1,%P2,%L2,%0\")\n \n (define_insn \"rotrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(rotatert:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t     (match_operand:SI 2 \"arith32_operand\" \"qn\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(rotatert:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n+\t\t     (match_operand:SI 2 \"arith32_operand\" \"q,n\")))]\n   \"\"\n   \"*\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n-    return \\\"shd %1,%1,%2,%0\\\";\n+    {\n+      operands[2] = GEN_INT (INTVAL (operands[2]) & 31);\n+      return \\\"shd %1,%1,%2,%0\\\";\n+    }\n   else\n     return \\\"vshd %1,%1,%0\\\";\n }\")\n@@ -2367,7 +2367,6 @@\n   operands[2] = GEN_INT (31 - cnt);\n   return \\\"zdep %1,%2,%3,%0\\\";\n }\")\n-\n \f\n ;; Unconditional and other jump instructions.\n \n@@ -2439,7 +2438,6 @@\n }\"\n  [(set_attr \"length\" \"3\")])\n \n-\n ;; Need nops for the calls because execution is supposed to continue\n ;; past; we don't want to nullify an instruction that we need.\n ;;- jump to subroutine\n@@ -2682,7 +2680,6 @@\n     }\n }\")\n \n-\n (define_peephole \n   [(set (match_operand 3 \"register_operand\" \"+fx\")\n \t(plus (match_operand 4 \"register_operand\" \"fx\")"}]}