{"sha": "6cdb14286db4ace59759757ce2b1fab2d03a04c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNkYjE0Mjg2ZGI0YWNlNTk3NTk3NTdjZTJiMWZhYjJkMDNhMDRjMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-04-07T21:47:03Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-04-07T21:47:03Z"}, "message": "semantics.c (finish_decltype_type): Simplify handling of unknown type.\n\n\t* semantics.c (finish_decltype_type): Simplify handling of unknown\n\ttype.\n\nFrom-SVN: r172140", "tree": {"sha": "dc38818ae6c5a4ea6506df3e61e93dfad7a4d25e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc38818ae6c5a4ea6506df3e61e93dfad7a4d25e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cdb14286db4ace59759757ce2b1fab2d03a04c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cdb14286db4ace59759757ce2b1fab2d03a04c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cdb14286db4ace59759757ce2b1fab2d03a04c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cdb14286db4ace59759757ce2b1fab2d03a04c2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b97c77f8caedb9434ef5feab416154403d24123", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b97c77f8caedb9434ef5feab416154403d24123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b97c77f8caedb9434ef5feab416154403d24123"}], "stats": {"total": 44, "additions": 12, "deletions": 32}, "files": [{"sha": "e194e33a7cd53f6f80e8bfe3f39282101c3a4ffe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cdb14286db4ace59759757ce2b1fab2d03a04c2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cdb14286db4ace59759757ce2b1fab2d03a04c2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6cdb14286db4ace59759757ce2b1fab2d03a04c2", "patch": "@@ -1,5 +1,8 @@\n 2011-04-07  Jason Merrill  <jason@redhat.com>\n \n+\t* semantics.c (finish_decltype_type): Simplify handling of unknown\n+\ttype.\n+\n \t* semantics.c (finish_decltype_type): Add complain parm.\n \t* cp-tree.h: Adjust.\n \t* parser.c (cp_parser_decltype): Adjust."}, {"sha": "5cbba334dbebbb03c81a2ea3d1f4cbf70795ffc9", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 32, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cdb14286db4ace59759757ce2b1fab2d03a04c2/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cdb14286db4ace59759757ce2b1fab2d03a04c2/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6cdb14286db4ace59759757ce2b1fab2d03a04c2", "patch": "@@ -4788,7 +4788,6 @@ tree\n finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n \t\t      tsubst_flags_t complain)\n {\n-  tree orig_expr = expr;\n   tree type = NULL_TREE;\n \n   if (!expr || error_operand_p (expr))\n@@ -4826,6 +4825,13 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n \n   expr = resolve_nondeduced_context (expr);\n \n+  if (type_unknown_p (expr))\n+    {\n+      if (complain & tf_error)\n+\terror (\"decltype cannot resolve address of overloaded function\");\n+      return error_mark_node;\n+    }\n+\n   /* To get the size of a static data member declared as an array of\n      unknown bound, we need to instantiate it.  */\n   if (TREE_CODE (expr) == VAR_DECL\n@@ -4855,28 +4861,9 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n         expr = TREE_OPERAND (expr, 1);\n \n       if (TREE_CODE (expr) == BASELINK)\n-        /* See through BASELINK nodes to the underlying functions.  */\n+        /* See through BASELINK nodes to the underlying function.  */\n         expr = BASELINK_FUNCTIONS (expr);\n \n-      if (TREE_CODE (expr) == TEMPLATE_ID_EXPR)\n-\texpr = TREE_OPERAND (expr, 0);\n-\n-      if (TREE_CODE (expr) == OVERLOAD)\n-        {\n-          if (OVL_CHAIN (expr)\n-\t      || TREE_CODE (OVL_FUNCTION (expr)) == TEMPLATE_DECL)\n-            {\n-\t      if (complain & tf_error)\n-\t\terror (\"%qE refers to a set of overloaded functions\",\n-\t\t       orig_expr);\n-              return error_mark_node;\n-            }\n-          else\n-            /* An overload set containing only one function: just look\n-               at that function.  */\n-            expr = OVL_FUNCTION (expr);\n-        }\n-\n       switch (TREE_CODE (expr))\n         {\n         case FIELD_DECL:\n@@ -4918,10 +4905,7 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n           break;\n \n         default:\n-\t  gcc_assert (TYPE_P (expr) || DECL_P (expr)\n-\t\t      || TREE_CODE (expr) == SCOPE_REF);\n-\t  if (complain & tf_error)\n-\t    error (\"argument to decltype must be an expression\");\n+\t  gcc_unreachable ();\n           return error_mark_node;\n         }\n     }\n@@ -4957,13 +4941,6 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n \t}\n     }\n \n-  if (!type || type == unknown_type_node)\n-    {\n-      if (complain & tf_error)\n-\terror (\"type of %qE is unknown\", expr);\n-      return error_mark_node;\n-    }\n-\n   return type;\n }\n "}]}