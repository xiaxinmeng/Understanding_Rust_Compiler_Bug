{"sha": "30e8d8754d68eeadb7c27e84edd61a78eb6c1801", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBlOGQ4NzU0ZDY4ZWVhZGI3YzI3ZTg0ZWRkNjFhNzhlYjZjMTgwMQ==", "commit": {"author": {"name": "Senthil Kumar Selvaraj", "email": "senthil_kumar.selvaraj@atmel.com", "date": "2016-08-03T11:50:32Z"}, "committer": {"name": "Senthil Kumar Selvaraj", "email": "saaadhu@gcc.gnu.org", "date": "2016-08-03T11:50:32Z"}, "message": "Fix tests that break unnecessarily for avr.\n\nRequire int32plus for tests that assume so, and conditionally skip pr44024.c,\n as it only works if the target allows deletion of null pointer checks.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.dg/init-excess-2.c: Require int32plus.\n\t* gcc.dg/pr44024.c: Skip if target keeps null pointer checks.\n\t* gcc.dg/pr59963-2.c: Require int32plus.\n\t* gcc.dg/pr71084.c: Cast pointer to intprt_t.\n\t* gcc.dg/unroll-7.c: Require int32plus.\n\nFrom-SVN: r239065", "tree": {"sha": "7eb5f39654ea961848bb2cd9696cf4a998a6cf86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eb5f39654ea961848bb2cd9696cf4a998a6cf86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30e8d8754d68eeadb7c27e84edd61a78eb6c1801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30e8d8754d68eeadb7c27e84edd61a78eb6c1801", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30e8d8754d68eeadb7c27e84edd61a78eb6c1801", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30e8d8754d68eeadb7c27e84edd61a78eb6c1801/comments", "author": null, "committer": {"login": "saaadhu", "id": 532256, "node_id": "MDQ6VXNlcjUzMjI1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/532256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saaadhu", "html_url": "https://github.com/saaadhu", "followers_url": "https://api.github.com/users/saaadhu/followers", "following_url": "https://api.github.com/users/saaadhu/following{/other_user}", "gists_url": "https://api.github.com/users/saaadhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/saaadhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saaadhu/subscriptions", "organizations_url": "https://api.github.com/users/saaadhu/orgs", "repos_url": "https://api.github.com/users/saaadhu/repos", "events_url": "https://api.github.com/users/saaadhu/events{/privacy}", "received_events_url": "https://api.github.com/users/saaadhu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "860271ec6cd4c9419f91eac6cea76ea574397d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860271ec6cd4c9419f91eac6cea76ea574397d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/860271ec6cd4c9419f91eac6cea76ea574397d5c"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "4de987dd9d14e1d307e6089ae496b168bd5bfe1c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30e8d8754d68eeadb7c27e84edd61a78eb6c1801/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30e8d8754d68eeadb7c27e84edd61a78eb6c1801/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30e8d8754d68eeadb7c27e84edd61a78eb6c1801", "patch": "@@ -1,3 +1,11 @@\n+2016-08-03  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+\n+\t* gcc.dg/init-excess-2.c: Require int32plus.\n+\t* gcc.dg/pr44024.c: Skip if target keeps null pointer checks.\n+\t* gcc.dg/pr59963-2.c: Require int32plus.\n+\t* gcc.dg/pr71084.c: Cast pointer to intprt_t.\n+\t* gcc.dg/unroll-7.c: Require int32plus.\n+\n 2016-08-02  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/34114"}, {"sha": "0e91b60950b3daa421a612a57ab5f7247caa79a7", "filename": "gcc/testsuite/gcc.dg/init-excess-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30e8d8754d68eeadb7c27e84edd61a78eb6c1801/gcc%2Ftestsuite%2Fgcc.dg%2Finit-excess-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30e8d8754d68eeadb7c27e84edd61a78eb6c1801/gcc%2Ftestsuite%2Fgcc.dg%2Finit-excess-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-excess-2.c?ref=30e8d8754d68eeadb7c27e84edd61a78eb6c1801", "patch": "@@ -3,6 +3,7 @@\n    c/71115 - Missing warning: excess elements in struct initializer.  */\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n+/* { dg-require-effective-target int32plus } */\n \n #include <stddef.h>\n "}, {"sha": "3bcf4311c747d113a9b2a33a4faa5cd4b6620be6", "filename": "gcc/testsuite/gcc.dg/pr44024.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30e8d8754d68eeadb7c27e84edd61a78eb6c1801/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44024.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30e8d8754d68eeadb7c27e84edd61a78eb6c1801/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44024.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr44024.c?ref=30e8d8754d68eeadb7c27e84edd61a78eb6c1801", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do link } */\n /* { dg-options \"-O1 -fdelete-null-pointer-checks -fdump-tree-ccp1\" } */\n+/* { dg-skip-if \"\" keeps_null_pointer_checks } */\n \n void foo();\n void link_error (void);"}, {"sha": "8eb1a796bbc8b20a30a50d63ebcdfb2b8808d6f0", "filename": "gcc/testsuite/gcc.dg/pr59963-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30e8d8754d68eeadb7c27e84edd61a78eb6c1801/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30e8d8754d68eeadb7c27e84edd61a78eb6c1801/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59963-2.c?ref=30e8d8754d68eeadb7c27e84edd61a78eb6c1801", "patch": "@@ -1,6 +1,7 @@\n /* PR c/59963 */\n /* { dg-do compile } */\n /* { dg-options \"-Woverflow -Wconversion\" } */\n+/* { dg-require-effective-target int32plus } */\n \n extern void bar (unsigned char);\n extern void bar8 (unsigned char, unsigned char, unsigned char, unsigned char,"}, {"sha": "392c5ca2394643be1f86b6e5cd99f1a21d51e84a", "filename": "gcc/testsuite/gcc.dg/pr71084.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30e8d8754d68eeadb7c27e84edd61a78eb6c1801/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71084.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30e8d8754d68eeadb7c27e84edd61a78eb6c1801/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71084.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr71084.c?ref=30e8d8754d68eeadb7c27e84edd61a78eb6c1801", "patch": "@@ -2,6 +2,8 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n \n+__extension__ typedef __INTPTR_TYPE__ intptr_t;\n+\n void babl_format (void);\n void gimp_drawable_get_format (void);\n int _setjmp (void);\n@@ -32,7 +34,7 @@ void fn1 ()\n \tgimp_drawable_get_format();\n       }\n   for (; run_height;)\n-    for (; run_i < (long)fn1; ++run_i)\n+    for (; run_i < (long)(intptr_t)fn1; ++run_i)\n       for (; width;)\n         ;\n }"}, {"sha": "70b92ba080fff92919effc73e972fe75778b0ccd", "filename": "gcc/testsuite/gcc.dg/unroll-7.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30e8d8754d68eeadb7c27e84edd61a78eb6c1801/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30e8d8754d68eeadb7c27e84edd61a78eb6c1801/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funroll-7.c?ref=30e8d8754d68eeadb7c27e84edd61a78eb6c1801", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-rtl-loop2_unroll -funroll-loops\" } */\n+/* { dg-require-effective-target int32plus } */\n+\n int t(int *a)\n {\n   int i;"}]}