{"sha": "eb686064cad732d3bd2caeffde4e0f14f2aa0354", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI2ODYwNjRjYWQ3MzJkM2JkMmNhZWZmZGU0ZTBmMTRmMmFhMDM1NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-01-26T19:34:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-01-26T19:34:06Z"}, "message": "add comments\n\nFrom-SVN: r24873", "tree": {"sha": "3de0e51202e2556f60aa3b59b7aeb04e3dc14b5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3de0e51202e2556f60aa3b59b7aeb04e3dc14b5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb686064cad732d3bd2caeffde4e0f14f2aa0354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb686064cad732d3bd2caeffde4e0f14f2aa0354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb686064cad732d3bd2caeffde4e0f14f2aa0354", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb686064cad732d3bd2caeffde4e0f14f2aa0354/comments", "author": null, "committer": null, "parents": [{"sha": "ea0f9a859f7c58841f7a7993799033585aaf962a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea0f9a859f7c58841f7a7993799033585aaf962a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea0f9a859f7c58841f7a7993799033585aaf962a"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "4e6cf2f097a39c24d93252c74f25829e11f51416", "filename": "gcc/tlink.c", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb686064cad732d3bd2caeffde4e0f14f2aa0354/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb686064cad732d3bd2caeffde4e0f14f2aa0354/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=eb686064cad732d3bd2caeffde4e0f14f2aa0354", "patch": "@@ -47,7 +47,8 @@ extern int prepends_underscore;\n \n static int tlink_verbose;\n \f\n-/* Hash table code.  */\n+/* Hash table boilerplate for working with hash.[ch].  We have hash tables\n+   for symbol names, file names, and demangled symbols.  */\n \n typedef struct symbol_hash_entry\n {\n@@ -75,6 +76,9 @@ typedef struct demangled_hash_entry\n \n static struct hash_table symbol_table;\n \n+/* Create a new entry for the symbol hash table.\n+   Passed to hash_table_init.  */\n+\n static struct hash_entry *\n symbol_hash_newfunc (entry, table, string)\n      struct hash_entry *entry;\n@@ -99,6 +103,8 @@ symbol_hash_newfunc (entry, table, string)\n   return (struct hash_entry *) ret;\n }\n \n+/* Look up an entry in the symbol hash table.  */\n+\n static struct symbol_hash_entry *\n symbol_hash_lookup (string, create)\n      const char *string;\n@@ -111,6 +117,9 @@ symbol_hash_lookup (string, create)\n \n static struct hash_table file_table;\n \n+/* Create a new entry for the file hash table.\n+   Passed to hash_table_init.  */\n+\n static struct hash_entry *\n file_hash_newfunc (entry, table, string)\n      struct hash_entry *entry;\n@@ -135,6 +144,8 @@ file_hash_newfunc (entry, table, string)\n   return (struct hash_entry *) ret;\n }\n \n+/* Look up an entry in the file hash table.  */\n+\n static struct file_hash_entry *\n file_hash_lookup (string)\n      const char *string;\n@@ -146,6 +157,9 @@ file_hash_lookup (string)\n \n static struct hash_table demangled_table;\n \n+/* Create a new entry for the demangled name hash table.\n+   Passed to hash_table_init.  */\n+\n static struct hash_entry *\n demangled_hash_newfunc (entry, table, string)\n      struct hash_entry *entry;\n@@ -167,6 +181,8 @@ demangled_hash_newfunc (entry, table, string)\n   return (struct hash_entry *) ret;\n }\n \n+/* Look up an entry in the demangled name hash table.  */\n+\n static struct demangled_hash_entry *\n demangled_hash_lookup (string, create)\n      const char *string;\n@@ -252,6 +268,8 @@ file_pop ()\n \f\n /* Other machinery.  */\n \n+/* Initialize the tlink machinery.  Called from do_tlink.  */\n+\n static void\n tlink_init ()\n {\n@@ -334,6 +352,12 @@ pfgets (stream)\n \f\n /* Real tlink code.  */\n \n+/* Subroutine of read_repo_file.  We are reading the repo file for file F,\n+   which is coming in on STREAM, and the symbol that comes next in STREAM\n+   is offerred, chosen or provided if CHOSEN is 0, 1 or 2, respectively.\n+\n+   XXX \"provided\" is unimplemented, both here and in the compiler.  */\n+\n static void\n freadsym (stream, f, chosen)\n      FILE *stream;\n@@ -349,12 +373,16 @@ freadsym (stream, f, chosen)\n \n   if (sym->file == NULL)\n     {\n+      /* We didn't have this symbol already, so we choose this file.  */\n+\n       symbol_push (sym);\n       sym->file = f;\n       sym->chosen = chosen;\n     }\n   else if (chosen)\n     {\n+      /* We want this file; cast aside any pretender.  */\n+\n       if (sym->chosen && sym->file != f)\n \t{\n \t  if (sym->chosen == 1)\n@@ -371,6 +399,8 @@ freadsym (stream, f, chosen)\n     }\n }\n \n+/* Read in the repo file denoted by F, and record all its information.  */\n+\n static void\n read_repo_file (f)\n      file *f;\n@@ -414,6 +444,11 @@ read_repo_file (f)\n     f->dir = \".\";\n }\n \n+/* We might want to modify LINE, which is a symbol line from file F.  We do\n+   this if either we saw an error message referring to the symbol in\n+   question, or we have already allocated the symbol to another file and\n+   this one wants to emit it as well.  */\n+\n static void\n maybe_tweak (line, f)\n      char *line;\n@@ -434,6 +469,11 @@ maybe_tweak (line, f)\n     }\n }\n \n+/* Update the repo files for each of the object files we have adjusted and\n+   recompile.\n+\n+   XXX Should this use collect_execute instead of system?  */\n+\n static int\n recompile_files ()\n {\n@@ -484,6 +524,9 @@ recompile_files ()\n   return 1;\n }\n \n+/* The first phase of processing: determine which object files have\n+   .rpo files associated with them, and read in the information.  */\n+\n static int\n read_repo_files (object_lst)\n      char **object_lst;\n@@ -509,6 +552,8 @@ read_repo_files (object_lst)\n   return (symbol_stack != NULL);\n }\n \n+/* Add the demangled forms of any new symbols to the hash table.  */\n+\n static void\n demangle_new_symbols ()\n {\n@@ -528,6 +573,9 @@ demangle_new_symbols ()\n     }\n }\n \n+/* Step through the output of the linker, in the file named FNAME, and\n+   adjust the settings for each symbol encountered.  */\n+\n static int\n scan_linker_output (fname)\n      char *fname;\n@@ -607,6 +655,15 @@ scan_linker_output (fname)\n   return (file_stack != NULL);\n }\n \n+/* Entry point for tlink.  Called from main in collect2.c.\n+\n+   Iteratively try to provide definitions for all the unresolved symbols\n+   mentioned in the linker error messages.\n+\n+   LD_ARGV is an array of arguments for the linker.\n+   OBJECT_LST is an array of object files that we may be able to recompile\n+     to provide missing definitions.  Currently ignored.  */\n+\n void\n do_tlink (ld_argv, object_lst)\n      char **ld_argv, **object_lst;"}]}