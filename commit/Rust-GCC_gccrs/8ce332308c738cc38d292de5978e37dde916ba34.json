{"sha": "8ce332308c738cc38d292de5978e37dde916ba34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNlMzMyMzA4YzczOGNjMzhkMjkyZGU1OTc4ZTM3ZGRlOTE2YmEzNA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-06-28T00:30:31Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-06-28T00:30:31Z"}, "message": "* c-format.c (check_format_string, get_constant)\n\t* cfgrtl.c (rtl_split_edge):\n\tMark the definition static, matching the forward declaration.\ncp:\n\t* decl.c (build_typename_type)\n\t* mangle.c (write_template_template_arg)\n\t* parser.c (cp_parser_scope_through_which_access_occurs)\n\t* pt.c (push_access_scope_real, push_access_scope, pop_access_scope)\n\t* repo.c (get_base_filename)\n\t* semantics.c (maybe_convert_cond):\n\tMark the definition static, matching the forward declaration.\njava:\n\t* class.c (build_method_symbols_entry)\n\t* expr.c (get_offset_table_index)\n\t* jcf-parse.c (jcf_parse):\n\tMark the definition static, matching the forward declaration.\n\nFrom-SVN: r68622", "tree": {"sha": "1bf05e7aec3517a89d71382e39dbbc8e0fecfab2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bf05e7aec3517a89d71382e39dbbc8e0fecfab2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ce332308c738cc38d292de5978e37dde916ba34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ce332308c738cc38d292de5978e37dde916ba34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ce332308c738cc38d292de5978e37dde916ba34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ce332308c738cc38d292de5978e37dde916ba34/comments", "author": null, "committer": null, "parents": [{"sha": "711f0333a210c7adf51645e4605e702855d4dc76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/711f0333a210c7adf51645e4605e702855d4dc76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/711f0333a210c7adf51645e4605e702855d4dc76"}], "stats": {"total": 75, "additions": 49, "deletions": 26}, "files": [{"sha": "60e018b22345a091ac7a7f7016973d85645eaa09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ce332308c738cc38d292de5978e37dde916ba34", "patch": "@@ -1,3 +1,9 @@\n+2003-06-27  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-format.c (check_format_string, get_constant)\n+\t* cfgrtl.c (rtl_split_edge):\n+\tMark the definition static, matching the forward declaration.\n+\n 2003-06-27  Gunther Nikl <gni@gecko.de>\n \n \t* unwind-c.c (PERSONALITY_FUNCTION): Delete duplicate define.\n@@ -11,9 +17,9 @@\n \n \t* config/s390/s390.h (SECONDARY_OUTPUT_RELOAD_CLASS): Define.\n \t* config/s390/s390.c (s390_secondary_output_reload_class): New function.\n-\t* config/s390/s390-protos.h (s390_secondary_output_reload_class): \n+\t* config/s390/s390-protos.h (s390_secondary_output_reload_class):\n \tDeclare it.\n-\t* config/s390/s390.md (\"reload_outti\", \"reload_outdi\", \n+\t* config/s390/s390.md (\"reload_outti\", \"reload_outdi\",\n \t\"reload_outdf\"): New expanders.\n \n \t* config/s390/s390.md (\"movti\" + splitters): Handle non-offsettable\n@@ -63,9 +69,9 @@\n \n 2003-06-27  Ulrich Weigand  <uweigand@de.ibm.com>\n \n-        * ggc-page.c (inverse_table): Change type of mult to size_t.\n-        (compute_inverse): Compute inverse using size_t, not unsigned int.\n-        Compute inverse also for sizes larger than half a machine page.\n+\t* ggc-page.c (inverse_table): Change type of mult to size_t.\n+\t(compute_inverse): Compute inverse using size_t, not unsigned int.\n+\tCompute inverse also for sizes larger than half a machine page.\n \n Fri Jun 27 18:36:12 CEST 2003  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "5bae1c21b4a0b0ee2c845e050311234bef6dd61e", "filename": "gcc/c-format.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=8ce332308c738cc38d292de5978e37dde916ba34", "patch": "@@ -116,7 +116,7 @@ handle_format_arg_attribute (tree *node, tree name ATTRIBUTE_UNUSED,\n \n /* Verify that the format_num argument is actually a string, in case\n    the format attribute is in error.  */\n-bool\n+static bool\n check_format_string (tree argument, unsigned HOST_WIDE_INT format_num,\n \t\t     int flags, bool *no_add_attrs)\n {\n@@ -146,7 +146,7 @@ check_format_string (tree argument, unsigned HOST_WIDE_INT format_num,\n /* Strip any conversions from the expression, verify it is a constant,\n    and store its value. If validated_p is true, abort on errors.\n    Returns true on success, false otherwise.  */\n-bool\n+static bool\n get_constant(tree expr, unsigned HOST_WIDE_INT *value, int validated_p)\n {\n   while (TREE_CODE (expr) == NOP_EXPR"}, {"sha": "af13138f0b428741d6d8beb35bbe0aa5efcfcd97", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=8ce332308c738cc38d292de5978e37dde916ba34", "patch": "@@ -1200,7 +1200,7 @@ back_edge_of_syntactic_loop_p (basic_block bb1, basic_block bb2)\n    The case of a block ending in an unconditional jump to a\n    block with multiple predecessors is not handled optimally.  */\n \n-basic_block\n+static basic_block\n rtl_split_edge (edge edge_in)\n {\n   basic_block bb;"}, {"sha": "3e878d8a1f93fedeae808709c3f4c643fe7eedbe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8ce332308c738cc38d292de5978e37dde916ba34", "patch": "@@ -1,3 +1,13 @@\n+2003-06-27  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* decl.c (build_typename_type)\n+\t* mangle.c (write_template_template_arg)\n+\t* parser.c (cp_parser_scope_through_which_access_occurs)\n+\t* pt.c (push_access_scope_real, push_access_scope, pop_access_scope)\n+\t* repo.c (get_base_filename)\n+\t* semantics.c (maybe_convert_cond):\n+\tMark the definition static, matching the forward declaration.\n+\n 2003-06-27  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/10468\n@@ -24,10 +34,10 @@\n \n 2003-06-26  Giovanni Bajo  <giovannibajo@libero.it>\n \n-        PR c++/8266\n-        * pt.c (check_explicit_specialization): When looking up a\n-        template function from an identifier outside class-scope, bind\n-        it to CP_DECL_CONTEXT.\n+\tPR c++/8266\n+\t* pt.c (check_explicit_specialization): When looking up a\n+\ttemplate function from an identifier outside class-scope, bind\n+\tit to CP_DECL_CONTEXT.\n \n 2003-06-25  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -43,7 +53,7 @@\n \t* cp-tree.h (perform_direct_initialization_if_possible): Declare it.\n \t* typeck.c (check_for_casting_away_constness): New function.\n \t(build_static_cast): Rewrite.\n-\t\n+\n 2003-06-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* call.c (enforce_access): Assert we get a binfo.\n@@ -178,15 +188,15 @@ Mon Jun 23 19:41:27 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t* decl2.c (get_guard): Use pushdecl_top_level_and_finish.\n \t* rtti.c (get_tinfo_decl): Use pushdecl_top_level_and_finish.\n \t(tinfo_base_init): Likewise.\n-\t\n+\n 2003-06-19  Matt Austern  <austern@apple.com>\n \n \tPR c++/11228\n \t* init.c (build_zero_init): Assert that number of array elements\n \tis an integer constant.\n \t(build_default_init) Don't use build_zero_init for arrays with\n \tvariable number of elements.\n-\t\n+\n 2003-06-19  Andreas Jaeger  <aj@suse.de>\n \n \t* cp-tree.h: Remove duplicated declarations."}, {"sha": "67babc26284938c80cf2ab004daa9a9d4edf6af2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8ce332308c738cc38d292de5978e37dde916ba34", "patch": "@@ -5415,7 +5415,7 @@ typename_compare (const void * k1, const void * k2)\n \n static GTY ((param_is (union tree_node))) htab_t typename_htab;\n \n-tree\n+static tree\n build_typename_type (tree context, tree name, tree fullname)\n {\n   tree t;"}, {"sha": "4885ee78d5e51c4d15e69b1040203ad67a7959de", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=8ce332308c738cc38d292de5978e37dde916ba34", "patch": "@@ -2138,7 +2138,7 @@ write_template_arg (tree node)\n \t\t\t::= <name>\n \t\t\t::= <substitution>  */\n \n-void\n+static void\n write_template_template_arg (const tree decl)\n {\n   MANGLE_TRACE_TREE (\"template-template-arg\", decl);"}, {"sha": "21166190b8baa2a13b774c20ba56284baaa2fd39", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8ce332308c738cc38d292de5978e37dde916ba34", "patch": "@@ -1786,7 +1786,7 @@ cp_parser_is_keyword (cp_token* token, enum rid keyword)\n    or `x', respectively.  If the DECL was named as `A::B' then\n    NESTED_NAME_SPECIFIER is `A'.  */\n \n-tree\n+static tree\n cp_parser_scope_through_which_access_occurs (tree decl, \n \t\t\t\t\t     tree object_type,\n \t\t\t\t\t     tree nested_name_specifier)"}, {"sha": "1b56f53df8c3acfcfcaec12f5c0fa6ab519e695c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8ce332308c738cc38d292de5978e37dde916ba34", "patch": "@@ -180,7 +180,7 @@ static tree tsubst_copy_and_build (tree, tree, tsubst_flags_t, tree);\n    template argument for TEMPLATE_DECL.  If CONTEXT is not NULL_TREE, \n    this is used instead of the context of T.  */\n \n-void\n+static void\n push_access_scope_real (tree t, tree args, tree context)\n {\n   if (TREE_CODE (t) == FUNCTION_DECL || DECL_FUNCTION_TEMPLATE_P (t))\n@@ -227,7 +227,7 @@ push_access_scope_real (tree t, tree args, tree context)\n \n /* Like push_access_scope_real, but always uses DECL_CONTEXT.  */\n \n-void\n+static void\n push_access_scope (tree t)\n {\n   push_access_scope_real (t, NULL_TREE, NULL_TREE);\n@@ -236,7 +236,7 @@ push_access_scope (tree t)\n /* Restore the scope set up by push_access_scope.  T is the node we\n    are processing.  */\n \n-void\n+static void\n pop_access_scope (tree t)\n {\n   if (TREE_CODE (t) == FUNCTION_DECL || DECL_FUNCTION_TEMPLATE_P (t))"}, {"sha": "7b7b48cecd57c3c2b729286698f27f7965877429", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=8ce332308c738cc38d292de5978e37dde916ba34", "patch": "@@ -234,7 +234,7 @@ extract_string (char **pp)\n   return obstack_finish (&temporary_obstack);\n }\n \n-const char *\n+static const char *\n get_base_filename (const char *filename)\n {\n   char *p = getenv (\"COLLECT_GCC_OPTIONS\");"}, {"sha": "aaf8be405a4fda7205c48d9ae8d22a35f2f5b877", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8ce332308c738cc38d292de5978e37dde916ba34", "patch": "@@ -393,7 +393,7 @@ finish_goto_stmt (tree destination)\n /* COND is the condition-expression for an if, while, etc.,\n    statement.  Convert it to a boolean value, if appropriate.  */\n \n-tree\n+static tree\n maybe_convert_cond (tree cond)\n {\n   /* Empty conditions remain empty.  */"}, {"sha": "655111c18da707a1f52c9ccf57e3af0c8d6f9bbd", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=8ce332308c738cc38d292de5978e37dde916ba34", "patch": "@@ -1,3 +1,10 @@\n+2003-06-27  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* class.c (build_method_symbols_entry)\n+\t* expr.c (get_offset_table_index)\n+\t* jcf-parse.c (jcf_parse):\n+\tMark the definition static, matching the forward declaration.\n+\n 2003-06-26  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* lang.c (java_handle_option): Don't check for missing arguments."}, {"sha": "443cfc557d8e472ab7e651a3988d5b8075617c1a", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=8ce332308c738cc38d292de5978e37dde916ba34", "patch": "@@ -2042,7 +2042,7 @@ emit_register_classes (void)\n \n /* Make a method_symbol_type (_Jv_MethodSymbol) node for METHOD. */\n \n-tree\n+static tree\n build_method_symbols_entry (tree method)\n {\n   tree clname, name, signature, method_symbol;"}, {"sha": "a69798720546f0f5a3490e065ec8f027af4bde8e", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=8ce332308c738cc38d292de5978e37dde916ba34", "patch": "@@ -1821,7 +1821,7 @@ invoke_build_dtable (int is_invoke_interface, tree arg_list)\n    METHOD. If this method has not been seen before, it will be added to the \n    otable_methods. If it has, the existing otable slot will be reused. */\n \n-int\n+static int\n get_offset_table_index (tree method)\n {\n   int i = 1;"}, {"sha": "23939271061b9d2ac88ae3cd35d7da4a4dbd4de2", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce332308c738cc38d292de5978e37dde916ba34/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=8ce332308c738cc38d292de5978e37dde916ba34", "patch": "@@ -607,7 +607,7 @@ load_class (tree class_or_name, int verbose)\n \n /* Parse the .class file JCF. */\n \n-void\n+static void\n jcf_parse (JCF* jcf)\n {\n   int i, code;"}]}