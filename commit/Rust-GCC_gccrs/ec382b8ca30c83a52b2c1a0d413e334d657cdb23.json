{"sha": "ec382b8ca30c83a52b2c1a0d413e334d657cdb23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMzODJiOGNhMzBjODNhNTJiMmMxYTBkNDEzZTMzNGQ2NTdjZGIyMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-12-10T07:46:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-12-10T07:46:12Z"}, "message": "i386.c (ix86_function_regparm): Ditto.\n\n\t* config/i386/i386.c (ix86_function_regparm): Ditto. Use REGPARM_MAX\n\tto check that no regparm hard register is taken by a fixed register\n\tvariable. Check up to and including DI_REG when adjusting regparm\n\tvalue due to fixed regs usage.\n\t(rep_prefix_usable): Check fixed_regs array, not global_regs array for\n\tavailable hard registers.\n\t(ix86_expand_strlen): Ditto.\n\t* config/i386/i386.md (strmov): Ditto.\n\t(cmpstrnsi): Ditto.\n\nFrom-SVN: r130737", "tree": {"sha": "2830f7184b743b518465dec9680e641f55fd0b8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2830f7184b743b518465dec9680e641f55fd0b8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec382b8ca30c83a52b2c1a0d413e334d657cdb23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec382b8ca30c83a52b2c1a0d413e334d657cdb23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec382b8ca30c83a52b2c1a0d413e334d657cdb23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec382b8ca30c83a52b2c1a0d413e334d657cdb23/comments", "author": null, "committer": null, "parents": [{"sha": "466e4b7a17c37f586dc9000bd040f37463e64f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/466e4b7a17c37f586dc9000bd040f37463e64f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/466e4b7a17c37f586dc9000bd040f37463e64f54"}], "stats": {"total": 47, "additions": 30, "deletions": 17}, "files": [{"sha": "ded5d4259e4bc10b1cb6e765dc3a918271c6f10a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec382b8ca30c83a52b2c1a0d413e334d657cdb23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec382b8ca30c83a52b2c1a0d413e334d657cdb23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec382b8ca30c83a52b2c1a0d413e334d657cdb23", "patch": "@@ -1,3 +1,15 @@\n+2007-12-10 Uros Bizjak <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_function_regparm): Ditto. Use REGPARM_MAX\n+\tto check that no regparm hard register is taken by a fixed register\n+\tvariable. Check up to and including DI_REG when adjusting regparm\n+\tvalue due to fixed regs usage.\n+\t(rep_prefix_usable): Check fixed_regs array, not global_regs array for\n+\tavailable hard registers.\n+\t(ix86_expand_strlen): Ditto.\n+\t* config/i386/i386.md (strmov): Ditto.\n+\t(cmpstrnsi): Ditto.\n+\n 2007-12-10  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* genopinit.c: Include tm_p.h in generated file.\n@@ -160,8 +172,7 @@\n \t(execute_fold_all_builtins): Call it for BUILT_IN_VA_START,\n \tBUILT_IN_VA_COPY and BUILT_IN_VA_END.\n \n-\t* target.h (struct ggc_target): Add expand_builtin_va_start\n-\thook.\n+\t* target.h (struct ggc_target): Add expand_builtin_va_start hook.\n \t* target-def.h (TARGET_EXPAND_BUILTIN_VA_START): Define.\n \t(TARGET_INITIALIZER): Add it.\n \t* builtins.c (expand_builtin_va_start): Use\n@@ -238,7 +249,7 @@\n \t* mips/mips.c (mips_va_start): Made static.\n \t(TARGET_EXPAND_BUILTIN_VA_START): Define.\n \n-2007-12-05  Uros Bizjak  <ubizjak@gmail.com>\n+2007-12-06  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* tree-ssa-loop.c (gate_tree_parallelize_loops): Return true when\n \t\"flag_tree_parallelize_loops > 1\"."}, {"sha": "ef5b7a93d89e0cf8aa33a0a1eac6d0a377183484", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec382b8ca30c83a52b2c1a0d413e334d657cdb23/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec382b8ca30c83a52b2c1a0d413e334d657cdb23/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ec382b8ca30c83a52b2c1a0d413e334d657cdb23", "patch": "@@ -3203,9 +3203,9 @@ ix86_function_regparm (const_tree type, const_tree decl)\n \t  struct function *f;\n \n \t  /* Make sure no regparm register is taken by a\n-\t     fixed register or global register variable.  */\n-\t  for (local_regparm = 0; local_regparm < 3; local_regparm++)\n-\t    if (global_regs[local_regparm] || fixed_regs[local_regparm])\n+\t     fixed register variable.  */\n+\t  for (local_regparm = 0; local_regparm < REGPARM_MAX; local_regparm++)\n+\t    if (fixed_regs[local_regparm])\n \t      break;\n \n \t  /* We can't use regparm(3) for nested functions as these use\n@@ -3227,13 +3227,14 @@ ix86_function_regparm (const_tree type, const_tree decl)\n \t\t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (decl)))))\n \t    local_regparm = 2;\n \n-\t  /* Each global register variable or fixed register usage\n-\t     increases register pressure, so less registers should be\n-\t     used for argument passing.  This functionality can be\n-\t     overriden by explicit regparm value.  */\n-\t  for (regno = 0; regno < 6; regno++)\n-\t    if (global_regs[regno] || fixed_regs[regno])\n+\t  /* Each fixed register usage increases register pressure,\n+\t     so less registers should be used for argument passing.\n+\t     This functionality can be overriden by an explicit\n+\t     regparm value.  */\n+\t  for (regno = 0; regno <= DI_REG; regno++)\n+\t    if (fixed_regs[regno])\n \t      globals++;\n+\n \t  local_regparm\n \t    = globals < local_regparm ? local_regparm - globals : 0;\n \n@@ -15108,8 +15109,9 @@ decide_alg (HOST_WIDE_INT count, HOST_WIDE_INT expected_size, bool memset,\n      additionally, memset wants eax and memcpy wants esi.  Don't\n      consider such algorithms if the user has appropriated those\n      registers for their own purposes.\t*/\n-  bool rep_prefix_usable = !(global_regs[CX_REG] || global_regs[DI_REG]\n-                             || (memset ? global_regs[AX_REG] : global_regs[SI_REG]));\n+  bool rep_prefix_usable = !(fixed_regs[CX_REG] || fixed_regs[DI_REG]\n+                             || (memset\n+\t\t\t\t ? fixed_regs[AX_REG] : fixed_regs[SI_REG]));\n \n #define ALG_USABLE_P(alg) (rep_prefix_usable\t\t\t\\\n \t\t\t   || (alg != rep_prefix_1_byte\t\t\\\n@@ -16084,7 +16086,7 @@ ix86_expand_strlen (rtx out, rtx src, rtx eoschar, rtx align)\n       rtx unspec;\n \n       /* Can't use this if the user has appropriated eax, ecx, or edi.  */\n-      if (global_regs[AX_REG] || global_regs[CX_REG] || global_regs[DI_REG])\n+      if (fixed_regs[AX_REG] || fixed_regs[CX_REG] || fixed_regs[DI_REG])\n         return false;\n \n       scratch2 = gen_reg_rtx (Pmode);"}, {"sha": "c53ea7fe8947328069d6e4f2d8fdcba05ded6b80", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec382b8ca30c83a52b2c1a0d413e334d657cdb23/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec382b8ca30c83a52b2c1a0d413e334d657cdb23/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ec382b8ca30c83a52b2c1a0d413e334d657cdb23", "patch": "@@ -18714,7 +18714,7 @@\n \n   /* Can't use this if the user has appropriated esi or edi.  */\n   if ((TARGET_SINGLE_STRINGOP || optimize_size)\n-      && !(global_regs[SI_REG] || global_regs[DI_REG]))\n+      && !(fixed_regs[SI_REG] || fixed_regs[DI_REG]))\n     {\n       emit_insn (gen_strmov_singleop (operands[0], operands[1],\n \t\t\t\t      operands[2], operands[3],\n@@ -19200,7 +19200,7 @@\n   rtx addr1, addr2, out, outlow, count, countreg, align;\n \n   /* Can't use this if the user has appropriated esi or edi.  */\n-  if (global_regs[SI_REG] || global_regs[DI_REG])\n+  if (fixed_regs[SI_REG] || fixed_regs[DI_REG])\n     FAIL;\n \n   out = operands[0];"}]}