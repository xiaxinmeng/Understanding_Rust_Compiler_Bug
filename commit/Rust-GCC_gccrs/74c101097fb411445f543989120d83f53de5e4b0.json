{"sha": "74c101097fb411445f543989120d83f53de5e4b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRjMTAxMDk3ZmI0MTE0NDVmNTQzOTg5MTIwZDgzZjUzZGU1ZTRiMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-31T15:46:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-31T15:46:40Z"}, "message": "[multiple changes]\n\n2014-01-31  Robert Dewar  <dewar@adacore.com>\n\n\t* erroutc.adb (Validate_Specific_Warnings): Warnings are\n\tcontrolled -gnatw.W.\n\t* gnat_ugn.texi: Document new warnings controlled by -gnatw.w.\n\t* opt.ads (Warn_On_Warnings_Off): Now controls more cases.\n\n2014-01-31  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_disp.adb: Update comments.\n\n2014-01-31  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration,\n\tSave_Global_References): Guard access to expression in aspect.\n\n2014-01-31  Yannick Moy  <moy@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma/Pragma_SPARK_Mode):\n\tIssue an error when the pragma is applied to a generic unit,\n\ta generic declaration, or inside a generic.\n\n2014-01-31  Yannick Moy  <moy@adacore.com>\n\n\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Set SPARK_Mode on renaming\n\tentity.\n\nFrom-SVN: r207352", "tree": {"sha": "4fda15b7420fcb4e776f65c08c1e8528e66d9d78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fda15b7420fcb4e776f65c08c1e8528e66d9d78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74c101097fb411445f543989120d83f53de5e4b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c101097fb411445f543989120d83f53de5e4b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74c101097fb411445f543989120d83f53de5e4b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c101097fb411445f543989120d83f53de5e4b0/comments", "author": null, "committer": null, "parents": [{"sha": "bdfb8ec4aaf389281c221776f8d2cfd965557cda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfb8ec4aaf389281c221776f8d2cfd965557cda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdfb8ec4aaf389281c221776f8d2cfd965557cda"}], "stats": {"total": 101, "additions": 82, "deletions": 19}, "files": [{"sha": "12f5d5a70bf4f3f8ef219417cf67ae1316324c5a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=74c101097fb411445f543989120d83f53de5e4b0", "patch": "@@ -1,3 +1,30 @@\n+2014-01-31  Robert Dewar  <dewar@adacore.com>\n+\n+\t* erroutc.adb (Validate_Specific_Warnings): Warnings are\n+\tcontrolled -gnatw.W.\n+\t* gnat_ugn.texi: Document new warnings controlled by -gnatw.w.\n+\t* opt.ads (Warn_On_Warnings_Off): Now controls more cases.\n+\n+2014-01-31  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_disp.adb: Update comments.\n+\n+2014-01-31  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Generic_Subprogram_Declaration,\n+\tSave_Global_References): Guard access to expression in aspect.\n+\n+2014-01-31  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma/Pragma_SPARK_Mode):\n+\tIssue an error when the pragma is applied to a generic unit,\n+\ta generic declaration, or inside a generic.\n+\n+2014-01-31  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Subprogram_Renaming): Set SPARK_Mode on renaming\n+\tentity.\n+\n 2014-01-31  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch9.adb, s-tassta.adb, s-tposen.adb, s-tposen.ads: Minor"}, {"sha": "3387623b8ff7da53af95091895e2c95a5623a854", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=74c101097fb411445f543989120d83f53de5e4b0", "patch": "@@ -1300,6 +1300,10 @@ package body Erroutc is\n \n    procedure Validate_Specific_Warnings (Eproc : Error_Msg_Proc) is\n    begin\n+      if not Warn_On_Warnings_Off then\n+         return;\n+      end if;\n+\n       for J in Specific_Warnings.First .. Specific_Warnings.Last loop\n          declare\n             SWE : Specific_Warning_Entry renames Specific_Warnings.Table (J);\n@@ -1311,7 +1315,7 @@ package body Erroutc is\n \n                if SWE.Open then\n                   Eproc.all\n-                    (\"?pragma Warnings Off with no matching Warnings On\",\n+                    (\"?W?pragma Warnings Off with no matching Warnings On\",\n                      SWE.Start);\n \n                --  Warn for ineffective Warnings (Off, ..)\n@@ -1332,7 +1336,7 @@ package body Erroutc is\n                    (SWE.Msg'Length > 2 and then SWE.Msg (1 .. 2) = \"-W\")\n                then\n                   Eproc.all\n-                    (\"?no warning suppressed by this pragma\", SWE.Start);\n+                    (\"?W?no warning suppressed by this pragma\", SWE.Start);\n                end if;\n             end if;\n          end;"}, {"sha": "dca778cc64f9ea20c18e87b748ae7b9c1ebd360a", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=74c101097fb411445f543989120d83f53de5e4b0", "patch": "@@ -3526,8 +3526,9 @@ package body Exp_Disp is\n             --  entry protected types (in s-tposen). However, it was removed\n             --  by also testing for no No_Select_Statements restriction in\n             --  Exp_Utils.Corresponding_Runtime_Package. This simplified the\n-            --  implementation of s-tposen, which was initially created for\n-            --  the Ravenscar profile.\n+            --  implementation of s-tposen.adb and provided consistency between\n+            --  all versions of System.Tasking.Protected_Objects.Single_Entry\n+            --  (s-tposen*.adb).\n \n             case Corresponding_Runtime_Package (Conc_Typ) is\n                when System_Tasking_Protected_Objects_Entries =>"}, {"sha": "b6d05cdb7af462d26800e35a0d3fe5efca19c2c7", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=74c101097fb411445f543989120d83f53de5e4b0", "patch": "@@ -5690,20 +5690,22 @@ as shown in the following example.\n @end smallexample\n \n @item -gnatw.w\n-@emph{Activate warnings on unnecessary Warnings Off pragmas}\n+@emph{Activate warnings on Warnings Off pragmas}\n @cindex @option{-gnatw.w} (@command{gcc})\n @cindex Warnings Off control\n This switch activates warnings for use of @code{pragma Warnings (Off, entity)}\n where either the pragma is entirely useless (because it suppresses no\n warnings), or it could be replaced by @code{pragma Unreferenced} or\n @code{pragma Unmodified}. The default is that these warnings are not given.\n Note that this warning is not included in -gnatwa, it must be\n-activated explicitly.\n+activated explicitly. Also activates warnings for the case of\n+Warnings (Off, String), where either there is no matching\n+Warnings (On, String), or the Warnings (Off) did not suppress any warning.\n \n @item -gnatw.W\n @emph{Suppress warnings on unnecessary Warnings Off pragmas}\n @cindex @option{-gnatw.W} (@command{gcc})\n-This switch suppresses warnings for use of @code{pragma Warnings (Off, entity)}.\n+This switch suppresses warnings for use of @code{pragma Warnings (Off, ...)}.\n \n @item -gnatwx\n @emph{Activate warnings on Export/Import pragmas.}"}, {"sha": "95f87e81629a46ef49725953a3052f7bf8963638", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=74c101097fb411445f543989120d83f53de5e4b0", "patch": "@@ -1729,7 +1729,10 @@ package Opt is\n    --  GNAT\n    --  Set to True to generate warnings for use of Pragma Warnings (Off, ent),\n    --  where either the pragma is never used, or it could be replaced by a\n-   --  pragma Unmodified or Unreferenced. Modified by use of -gnatw.w/.W.\n+   --  pragma Unmodified or Unreferenced. Also generates warnings for pragma\n+   --  Warning (Off, string) which either has no matching pragma Warning On,\n+   --  or where no warning has been suppressed by the use of the pragma.\n+   --  Modified by use of -gnatw.w/.W.\n \n    type Warning_Mode_Type is (Suppress, Normal, Treat_As_Error);\n    Warning_Mode : Warning_Mode_Type := Normal;"}, {"sha": "78881a9033477426499d51fd5527395c613eb575", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=74c101097fb411445f543989120d83f53de5e4b0", "patch": "@@ -3251,7 +3251,9 @@ package body Sem_Ch12 is\n          begin\n             Aspect := First (Aspect_Specifications (N));\n             while Present (Aspect) loop\n-               if Get_Aspect_Id (Aspect) /= Aspect_Warnings then\n+               if Get_Aspect_Id (Aspect) /= Aspect_Warnings\n+                 and then Present (Expression (Aspect))\n+               then\n                   Analyze (Expression (Aspect));\n                end if;\n \n@@ -3260,7 +3262,10 @@ package body Sem_Ch12 is\n \n             Aspect := First (Aspect_Specifications (Original_Node (N)));\n             while Present (Aspect) loop\n-               Save_Global_References (Expression (Aspect));\n+               if Present (Expression (Aspect)) then\n+                  Save_Global_References (Expression (Aspect));\n+               end if;\n+\n                Next (Aspect);\n             end loop;\n          end;\n@@ -13729,16 +13734,19 @@ package body Sem_Ch12 is\n          end if;\n \n          --  If a node has aspects, references within their expressions must\n-         --  be saved separately, given that they are not directly in the\n-         --  tree.\n+         --  be saved separately, given they are not directly in the tree.\n \n          if Has_Aspects (N) then\n             declare\n                Aspect : Node_Id;\n+\n             begin\n                Aspect := First (Aspect_Specifications (N));\n                while Present (Aspect) loop\n-                  Save_Global_References (Expression (Aspect));\n+                  if Present (Expression (Aspect)) then\n+                     Save_Global_References (Expression (Aspect));\n+                  end if;\n+\n                   Next (Aspect);\n                end loop;\n             end;"}, {"sha": "773929dcf3ab61e1e6b9d180211e7b67da02b695", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=74c101097fb411445f543989120d83f53de5e4b0", "patch": "@@ -2386,6 +2386,11 @@ package body Sem_Ch8 is\n          Set_Is_Pure (New_S, Is_Pure (Current_Scope));\n       end if;\n \n+      --  Set SPARK mode from current context\n+\n+      Set_SPARK_Pragma (New_S, SPARK_Mode_Pragma);\n+      Set_SPARK_Pragma_Inherited (New_S, True);\n+\n       Rename_Spec := Find_Corresponding_Spec (N);\n \n       --  Case of Renaming_As_Body"}, {"sha": "6e29b8b5fcdff1944b12df262fa74f8468c043fb", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c101097fb411445f543989120d83f53de5e4b0/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=74c101097fb411445f543989120d83f53de5e4b0", "patch": "@@ -19160,6 +19160,10 @@ package body Sem_Prag is\n             Check_No_Identifiers;\n             Check_At_Most_N_Arguments (1);\n \n+            if Inside_A_Generic then\n+               Error_Pragma (\"incorrect placement of pragma% in a generic\");\n+            end if;\n+\n             --  Check the legality of the mode (no argument = ON)\n \n             if Arg_Count = 1 then\n@@ -19192,6 +19196,15 @@ package body Sem_Prag is\n             elsif Nkind (Context) = N_Compilation_Unit then\n                Check_Valid_Configuration_Pragma;\n \n+               if Nkind (Unit (Context)) in N_Generic_Declaration\n+                 or else (Present (Library_Unit (Context))\n+                           and then Nkind (Unit (Library_Unit (Context))) in\n+                                                        N_Generic_Declaration)\n+               then\n+                  Error_Pragma\n+                    (\"incorrect placement of pragma% in a generic unit\");\n+               end if;\n+\n                SPARK_Mode_Pragma := N;\n                SPARK_Mode := Mode_Id;\n \n@@ -19219,11 +19232,13 @@ package body Sem_Prag is\n                   elsif not Comes_From_Source (Stmt) then\n                      null;\n \n+                  elsif Nkind (Stmt) in N_Generic_Declaration then\n+                     Error_Pragma\n+                       (\"incorrect placement of pragma% on a generic\");\n+\n                   --  The pragma applies to a package declaration\n \n-                  elsif Nkind_In (Stmt, N_Generic_Package_Declaration,\n-                                        N_Package_Declaration)\n-                  then\n+                  elsif Nkind (Stmt) = N_Package_Declaration then\n                      Spec_Id := Defining_Entity (Stmt);\n                      Check_Library_Level_Entity (Spec_Id);\n                      Check_Pragma_Conformance\n@@ -19239,9 +19254,7 @@ package body Sem_Prag is\n \n                   --  The pragma applies to a subprogram declaration\n \n-                  elsif Nkind_In (Stmt, N_Generic_Subprogram_Declaration,\n-                                        N_Subprogram_Declaration)\n-                  then\n+                  elsif Nkind (Stmt) = N_Subprogram_Declaration then\n                      Spec_Id := Defining_Entity (Stmt);\n                      Check_Library_Level_Entity (Spec_Id);\n                      Check_Pragma_Conformance"}]}