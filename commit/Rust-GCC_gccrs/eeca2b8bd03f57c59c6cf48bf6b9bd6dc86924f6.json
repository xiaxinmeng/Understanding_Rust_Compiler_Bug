{"sha": "eeca2b8bd03f57c59c6cf48bf6b9bd6dc86924f6", "node_id": "C_kwDOANBUbNoAKGVlY2EyYjhiZDAzZjU3YzU5YzZjZjQ4YmY2YjliZDZkYzg2OTI0ZjY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-19T16:58:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-19T16:58:59Z"}, "message": "sparc: Preserve ORIGINAL_REGNO in epilogue_renumber [PR105257]\n\nThe following testcase ICEs, because the pic register is\n(reg:DI 24 %i0 [109]) and is used in the delay slot of a return.\nWe invoke epilogue_renumber and that changes it to\n(reg:DI 8 %o0) which no longer satisfies sparc_pic_register_p\npredicate, so we don't recognize the insn anymore.\n\nThe following patch fixes that by preserving ORIGINAL_REGNO if\nspecified, so we get (reg:DI 8 %o0 [109]) instead.\n\n2022-04-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/105257\n\t* config/sparc/sparc.cc (epilogue_renumber): If ORIGINAL_REGNO,\n\tuse gen_raw_REG instead of gen_rtx_REG and copy over also\n\tORIGINAL_REGNO.  Use return 0; instead of /* fallthrough */.\n\n\t* gcc.dg/pr105257.c: New test.", "tree": {"sha": "ccc98793e6bc5039fe7df862c95a90f5d25eba58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccc98793e6bc5039fe7df862c95a90f5d25eba58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeca2b8bd03f57c59c6cf48bf6b9bd6dc86924f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeca2b8bd03f57c59c6cf48bf6b9bd6dc86924f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeca2b8bd03f57c59c6cf48bf6b9bd6dc86924f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeca2b8bd03f57c59c6cf48bf6b9bd6dc86924f6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb03e424598d30fed68801af6d6ef6236d32e32e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb03e424598d30fed68801af6d6ef6236d32e32e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb03e424598d30fed68801af6d6ef6236d32e32e"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "467a9f171d2c0a398fb8a9bb892588fe0cc88b3c", "filename": "gcc/config/sparc/sparc.cc", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeca2b8bd03f57c59c6cf48bf6b9bd6dc86924f6/gcc%2Fconfig%2Fsparc%2Fsparc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeca2b8bd03f57c59c6cf48bf6b9bd6dc86924f6/gcc%2Fconfig%2Fsparc%2Fsparc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.cc?ref=eeca2b8bd03f57c59c6cf48bf6b9bd6dc86924f6", "patch": "@@ -8884,8 +8884,20 @@ epilogue_renumber (rtx *where, int test)\n       if (REGNO (*where) >= 8 && REGNO (*where) < 24)      /* oX or lX */\n \treturn 1;\n       if (! test && REGNO (*where) >= 24 && REGNO (*where) < 32)\n-\t*where = gen_rtx_REG (GET_MODE (*where), OUTGOING_REGNO (REGNO(*where)));\n-      /* fallthrough */\n+\t{\n+\t  if (ORIGINAL_REGNO (*where))\n+\t    {\n+\t      rtx n = gen_raw_REG (GET_MODE (*where),\n+\t\t\t\t   OUTGOING_REGNO (REGNO (*where)));\n+\t      ORIGINAL_REGNO (n) = ORIGINAL_REGNO (*where);\n+\t      *where = n;\n+\t    }\n+\t  else\n+\t    *where = gen_rtx_REG (GET_MODE (*where),\n+\t\t\t\t  OUTGOING_REGNO (REGNO (*where)));\n+\t}\n+      return 0;\n+\n     case SCRATCH:\n     case PC:\n     case CONST_INT:"}, {"sha": "4232942d7919f382b30d637af561654eb2b56856", "filename": "gcc/testsuite/gcc.dg/pr105257.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeca2b8bd03f57c59c6cf48bf6b9bd6dc86924f6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105257.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeca2b8bd03f57c59c6cf48bf6b9bd6dc86924f6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105257.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105257.c?ref=eeca2b8bd03f57c59c6cf48bf6b9bd6dc86924f6", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/105257 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-fpic\" { target fpic } } */\n+\n+extern int sigsetjmp (void **, int);\n+void *buf[32];\n+void (*fn) (void);\n+\n+const char *\n+bar (void)\n+{\n+  sigsetjmp (buf, 0);\n+  fn ();\n+  return \"\";\n+}"}]}