{"sha": "84d8756de1f15d0d04a959133930bfc95e3c5acb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRkODc1NmRlMWYxNWQwZDA0YTk1OTEzMzkzMGJmYzk1ZTNjNWFjYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2003-04-29T22:38:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-04-29T22:38:09Z"}, "message": "* tree.c (save_expr): Don't fold a COMPONENT_REF.\n\nFrom-SVN: r66264", "tree": {"sha": "53c57435c363b6dbb8c6da7f848536313fdc98a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53c57435c363b6dbb8c6da7f848536313fdc98a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84d8756de1f15d0d04a959133930bfc95e3c5acb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84d8756de1f15d0d04a959133930bfc95e3c5acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84d8756de1f15d0d04a959133930bfc95e3c5acb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84d8756de1f15d0d04a959133930bfc95e3c5acb/comments", "author": null, "committer": null, "parents": [{"sha": "1f6f0cb610621cec5a80b54ba850fee18d4282ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6f0cb610621cec5a80b54ba850fee18d4282ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f6f0cb610621cec5a80b54ba850fee18d4282ad"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "61ec00e07059c50a1cedeefcefa58906f83c761e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84d8756de1f15d0d04a959133930bfc95e3c5acb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84d8756de1f15d0d04a959133930bfc95e3c5acb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84d8756de1f15d0d04a959133930bfc95e3c5acb", "patch": "@@ -1,3 +1,7 @@\n+2003-04-29  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* tree.c (save_expr): Don't fold a COMPONENT_REF.\n+\n 2003-04-29  Olivier Hainque <hainque@act-europe.fr>\n \n \t* calls.c (expand_call): When modes of target and valreg match,\tforce"}, {"sha": "7deaa65640982f558a6c6d0fc80e9c3e595f4c14", "filename": "gcc/tree.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84d8756de1f15d0d04a959133930bfc95e3c5acb/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84d8756de1f15d0d04a959133930bfc95e3c5acb/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=84d8756de1f15d0d04a959133930bfc95e3c5acb", "patch": "@@ -1378,14 +1378,21 @@ tree\n save_expr (expr)\n      tree expr;\n {\n-  tree t = fold (expr);\n-  tree inner = skip_simple_arithmetic (t);\n+  tree t = expr;\n+  tree inner;\n+\n+  /* Don't fold a COMPONENT_EXPR: if the operand was a CONSTRUCTOR (the\n+     only time it will fold), it can cause problems with PLACEHOLDER_EXPRs\n+     in Ada.  Moreover, it isn't at all clear why we fold here at all.  */\n+  if (TREE_CODE (t) != COMPONENT_REF)\n+    t = fold (t);\n \n   /* If the tree evaluates to a constant, then we don't want to hide that\n      fact (i.e. this allows further folding, and direct checks for constants).\n      However, a read-only object that has side effects cannot be bypassed.\n      Since it is no problem to reevaluate literals, we just return the\n      literal node.  */\n+  inner = skip_simple_arithmetic (t);\n   if (TREE_CONSTANT (inner)\n       || (TREE_READONLY (inner) && ! TREE_SIDE_EFFECTS (inner))\n       || TREE_CODE (inner) == SAVE_EXPR"}]}