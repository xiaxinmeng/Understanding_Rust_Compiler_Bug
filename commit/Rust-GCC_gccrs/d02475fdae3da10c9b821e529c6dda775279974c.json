{"sha": "d02475fdae3da10c9b821e529c6dda775279974c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAyNDc1ZmRhZTNkYTEwYzliODIxZTUyOWM2ZGRhNzc1Mjc5OTc0Yw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-04-29T07:00:50Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-04-29T07:00:50Z"}, "message": "re PR libstdc++/5280 (Problems with named locales and iostreams (gnulocale))\n\n\n2002-04-28  Benjamin Kosnik  <bkoz@redhat.com>\n\n        PR libstdc++/5280\n        * config/io/basic_file_stdio.h (__basic_file::sys_getc): Return int.\n        (__basic_file::sys_ungetc): Take int.\n        * config/io/basic_file_stdio.cc (__basic_file::sys_ungetc): Same.\n        * include/bits/fstream.tcc (basic_filebuf::_M_underflow_common):\n        Use sys_getc for unbuffered input.\n        * testsuite/27_io/narrow_stream_objects.cc (test06): New.\n\n        * src/ios.cc (_M_grow_words): Adjust error checking.\n        * testsuite/27_io/ios_base_storage.cc: Same.\n\nFrom-SVN: r52879", "tree": {"sha": "d1753560c9bea2394fc6f1e1f074278827a71eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1753560c9bea2394fc6f1e1f074278827a71eec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d02475fdae3da10c9b821e529c6dda775279974c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02475fdae3da10c9b821e529c6dda775279974c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d02475fdae3da10c9b821e529c6dda775279974c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d02475fdae3da10c9b821e529c6dda775279974c/comments", "author": null, "committer": null, "parents": [{"sha": "189ab118de817bf9ec6a3f77712f8c2112cdc7b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/189ab118de817bf9ec6a3f77712f8c2112cdc7b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/189ab118de817bf9ec6a3f77712f8c2112cdc7b6"}], "stats": {"total": 116, "additions": 78, "deletions": 38}, "files": [{"sha": "e1b79dbab323ca823de8cac3e42d026256d576d2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02475fdae3da10c9b821e529c6dda775279974c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02475fdae3da10c9b821e529c6dda775279974c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d02475fdae3da10c9b821e529c6dda775279974c", "patch": "@@ -1,3 +1,16 @@\n+2002-04-28  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/5280\n+\t* config/io/basic_file_stdio.h (__basic_file::sys_getc): Return int.\n+\t(__basic_file::sys_ungetc): Take int.\n+\t* config/io/basic_file_stdio.cc (__basic_file::sys_ungetc): Same.\n+\t* include/bits/fstream.tcc (basic_filebuf::_M_underflow_common):\n+\tUse sys_getc for unbuffered input.\n+\t* testsuite/27_io/narrow_stream_objects.cc (test06): New.\n+\t\n+\t* src/ios.cc (_M_grow_words): Adjust error checking.\n+\t* testsuite/27_io/ios_base_storage.cc: Same.\n+\n 2002-04-28  Peter Schmid  <schmid@snake.iap.physik.tu-darmstadt.de>\n \n \t* include/ext/stl_hashtable.h: Import __iterator_category"}, {"sha": "25c93e322dc8f50dee10dafef7685214899cb43c", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02475fdae3da10c9b821e529c6dda775279974c/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02475fdae3da10c9b821e529c6dda775279974c/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=d02475fdae3da10c9b821e529c6dda775279974c", "patch": "@@ -81,11 +81,13 @@ namespace std\n     return __ret;\n   }\n \n-  char\n-  __basic_file<char>::sys_getc() { return getc (_M_cfile); }\n+  int\n+  __basic_file<char>::sys_getc() \n+  { return getc(_M_cfile); }\n   \n-  char\n-  __basic_file<char>::sys_ungetc(char __s) { return ungetc (__s, _M_cfile); }\n+  int\n+  __basic_file<char>::sys_ungetc(int __c) \n+  { return ungetc(__c, _M_cfile); }\n   \n   __basic_file<char>* \n   __basic_file<char>::open(const char* __name, ios_base::openmode __mode, "}, {"sha": "137dfec94991637d199ccea9c1ecb160123be0ec", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02475fdae3da10c9b821e529c6dda775279974c/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02475fdae3da10c9b821e529c6dda775279974c/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=d02475fdae3da10c9b821e529c6dda775279974c", "patch": "@@ -72,11 +72,11 @@ namespace std\n       __basic_file*\n       sys_open(__c_file* __file, ios_base::openmode __mode);\n \n-      char\n+      int\n       sys_getc();\n \n-      char\n-      sys_ungetc(char);\n+      int\n+      sys_ungetc(int);\n \n       __basic_file* \n       close(); "}, {"sha": "2ca89c32fc2e2d5819a9ce7612f3e9f85e3b1b0d", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02475fdae3da10c9b821e529c6dda775279974c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02475fdae3da10c9b821e529c6dda775279974c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=d02475fdae3da10c9b821e529c6dda775279974c", "patch": "@@ -224,6 +224,17 @@ namespace std\n \t\treturn traits_type::to_int_type(*_M_in_cur);\n \t    }\n \n+\t  // Check for unbuffered stream.\n+\t  if (_M_buf_size == 1)\n+\t    {\n+\t      __ret = _M_file.sys_getc();\n+\t      *_M_in_cur = traits_type::to_char_type(__ret);\n+\t      _M_set_determinate(1);\n+\t      if (__testout)\n+\t\t_M_out_cur = _M_in_cur;\n+\t      return __ret;\n+\t    }\n+\n \t  // Sync internal and external buffers.\n \t  // NB: __testget -> __testput as _M_buf_unified here.\n \t  bool __testget = _M_in_cur && _M_in_beg < _M_in_cur;\n@@ -278,14 +289,6 @@ namespace std\n \t\t  __ret = traits_type::to_int_type(*_M_in_cur);\n \t\t  if (__bump)\n \t\t    _M_in_cur_move(1);\n-\t\t  else if (_M_buf_size == 1)\n-\t\t    {\n-\t\t      // If we are synced with stdio, we have to unget the\n-\t\t      // character we just read so that the file pointer\n-\t\t      // doesn't move.\n-\t\t      _M_file.sys_ungetc(*_M_in_cur);\n-\t\t      _M_set_indeterminate();\n-\t\t    }\n \t\t}\t   \n \t    }\n \t}"}, {"sha": "8e834fd65b01dfaaf7e595cf5ff517cb071248fa", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02475fdae3da10c9b821e529c6dda775279974c/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02475fdae3da10c9b821e529c6dda775279974c/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=d02475fdae3da10c9b821e529c6dda775279974c", "patch": "@@ -226,33 +226,35 @@ namespace std\n     // Precondition: _M_word_size <= ix\n     int newsize = _S_local_word_size;\n     _Words* words = _M_local_word;\n-    int i = 0;\n     if (ix > _S_local_word_size - 1)\n       {\n-\tconst int max = numeric_limits<int>::max();\n-\tif (ix < max)\n-\t  newsize = ix + 1;\n+\tif (ix < numeric_limits<int>::max())\n+\t  {\n+\t    newsize = ix + 1;\n+\t    try\n+\t      { words = new _Words[newsize]; }\n+\t    catch (...)\n+\t      {\n+\t\tdelete [] _M_word;\n+\t\t_M_word = 0;\n+\t\t_M_streambuf_state |= badbit;\n+\t\tif (_M_streambuf_state & _M_exception)\n+\t\t  __throw_ios_failure(\"ios_base::_M_grow_words failure\");\n+\t\treturn _M_word_zero;\n+\t      }\n+\t    for (int i = 0; i < _M_word_size; i++) \n+\t      words[i] = _M_word[i];\n+\t    if (_M_word && _M_word != _M_local_word) \n+\t      {\n+\t\tdelete [] _M_word;\n+\t\t_M_word = 0;\n+\t      }\n+\t  }\n \telse\n-\t  newsize = max;\n-\n-\ttry\n-\t  { words = new _Words[newsize]; }\n-\tcatch (...)\n \t  {\n-\t    delete [] _M_word;\n-\t    _M_word = 0;\n \t    _M_streambuf_state |= badbit;\n-\t    if (_M_streambuf_state & _M_exception)\n-\t      __throw_ios_failure(\"ios_base::_M_grow_words caused exception\");\n \t    return _M_word_zero;\n \t  }\n-\tfor (; i < _M_word_size; i++) \n-\t  words[i] = _M_word[i];\n-\tif (_M_word && _M_word != _M_local_word) \n-\t  {\n-\t    delete [] _M_word;\n-\t    _M_word = 0;\n-\t  }\n       }\n     _M_word = words;\n     _M_word_size = newsize;\n@@ -351,4 +353,3 @@ namespace std\n     return __ret; \n   }\n }  // namespace std\n-"}, {"sha": "c39d0302716dcecf6cc7323a87a7897b046f22d2", "filename": "libstdc++-v3/testsuite/27_io/ios_base_storage.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02475fdae3da10c9b821e529c6dda775279974c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_storage.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02475fdae3da10c9b821e529c6dda775279974c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_storage.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base_storage.cc?ref=d02475fdae3da10c9b821e529c6dda775279974c", "patch": "@@ -45,7 +45,7 @@ void test01()\n void test02()\n {\n   bool test = true;\n-  int max = std::numeric_limits<int>::max();\n+  int max = std::numeric_limits<int>::max() - 1;\n   std::stringbuf        strbuf;\n   std::ios              ios(&strbuf);\n "}, {"sha": "27291be00fc25dad13c419a5ae78ba2e1a244634", "filename": "libstdc++-v3/testsuite/27_io/narrow_stream_objects.cc", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d02475fdae3da10c9b821e529c6dda775279974c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d02475fdae3da10c9b821e529c6dda775279974c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc?ref=d02475fdae3da10c9b821e529c6dda775279974c", "patch": "@@ -1,6 +1,6 @@\n // 2000-08-02 bkoz\n \n-// Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -145,6 +145,26 @@ void test05()\n   std::cout << \"hello \" << s << std::endl;\n }\n \n+// libstdc++/5280\n+// Interactive test: input \"1234^D^D\" for i should terminate for EOF.\n+void test06()\n+{\n+  using namespace std;\n+  int i;\n+  cin >> i;\n+  if (!cin.good()) \n+    {\n+      cerr << endl;\n+      cerr << \"i == \" << i << endl;\n+      cerr << \"cin.rdstate() == \" << cin.rdstate() << endl;\n+      cerr << \"cin.bad() == \" << cin.bad() << endl;      \n+      cerr << \"cin.fail() == \" << cin.fail() << endl;      \n+      cerr << \"cin.eof() == \" << cin.eof() << endl;\n+    }   \n+  else\n+    cerr << \"i == \" << i << endl;\n+}\n+\n int \n main()\n {\n@@ -154,5 +174,6 @@ main()\n   // test03();\n   // test04();\n   // test05();\n+  // test06();\n   return 0;\n }"}]}