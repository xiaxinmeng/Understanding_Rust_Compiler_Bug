{"sha": "0e5b7cfaabe3016b8fdbdb58306797198348aec8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU1YjdjZmFhYmUzMDE2YjhmZGJkYjU4MzA2Nzk3MTk4MzQ4YWVjOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-06-09T18:34:05Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-06-09T18:34:05Z"}, "message": "revert: re PR c++/15815 (Update #pragma interface and #pragma implementation documentation.)\n\n\tRevert:\n\tPR c++/15815\n\t2004-06-07  Mark Mitchell  <mark@codesourcery.com>\n\t* doc/extend.texi: Deprecate #pragma interface and #pragma\n\timplementation.\n\n\tRevert:\n\tPR c++/15815\n\t2004-06-07  Mark Mitchell  <mark@codesourcery.com>\n\t* lex.c (handle_pragma_interface): Deprecate.\n\t(handle_pragma_implementation): Likewise.\n\nFrom-SVN: r82847", "tree": {"sha": "6cd9dbd8864e82c00b64e338419a2d6787bb0b33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cd9dbd8864e82c00b64e338419a2d6787bb0b33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e5b7cfaabe3016b8fdbdb58306797198348aec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e5b7cfaabe3016b8fdbdb58306797198348aec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e5b7cfaabe3016b8fdbdb58306797198348aec8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e5b7cfaabe3016b8fdbdb58306797198348aec8/comments", "author": null, "committer": null, "parents": [{"sha": "5162e02a26ed0bc8ba29a5caae71f807f50c8875", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5162e02a26ed0bc8ba29a5caae71f807f50c8875", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5162e02a26ed0bc8ba29a5caae71f807f50c8875"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "1184df74999f8671c45974d18d1bcdb173dc96a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5b7cfaabe3016b8fdbdb58306797198348aec8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5b7cfaabe3016b8fdbdb58306797198348aec8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e5b7cfaabe3016b8fdbdb58306797198348aec8", "patch": "@@ -1,3 +1,11 @@\n+2004-06-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tRevert:\n+\tPR c++/15815\n+\t2004-06-07  Mark Mitchell  <mark@codesourcery.com>\n+\t* doc/extend.texi: Deprecate #pragma interface and #pragma\n+\timplementation.\n+\n 2004-06-09  David S. Miller  <davem@nuts.davemloft.net>\n \n \t* config/sparc/sparc.h (MOVE_RATIO): New definition."}, {"sha": "8699c9818fc0cb745d522c983fe6af50536d8041", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5b7cfaabe3016b8fdbdb58306797198348aec8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5b7cfaabe3016b8fdbdb58306797198348aec8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0e5b7cfaabe3016b8fdbdb58306797198348aec8", "patch": "@@ -1,3 +1,11 @@\n+2004-06-09  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tRevert:\n+\tPR c++/15815\n+\t2004-06-07  Mark Mitchell  <mark@codesourcery.com>\n+\t* lex.c (handle_pragma_interface): Deprecate.\n+\t(handle_pragma_implementation): Likewise.\n+\n 2004-06-09  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* g++spec.c (lang_specific_driver): Remove check for -lm"}, {"sha": "d10fa2e37585698ed2814d6fd7370a5c8943af0d", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5b7cfaabe3016b8fdbdb58306797198348aec8/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5b7cfaabe3016b8fdbdb58306797198348aec8/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=0e5b7cfaabe3016b8fdbdb58306797198348aec8", "patch": "@@ -529,9 +529,6 @@ handle_pragma_interface (cpp_reader* dfile ATTRIBUTE_UNUSED )\n   struct c_fileinfo *finfo;\n   const char *main_filename;\n \n-  warning (\"`#pragma interface' is deprecated and will be removed in a \"\n-\t   \"future version of GCC\");\n-\n   if (fname == (tree)-1)\n     return;\n   else if (fname == 0)\n@@ -574,9 +571,6 @@ handle_pragma_implementation (cpp_reader* dfile ATTRIBUTE_UNUSED )\n   const char *main_filename;\n   struct impl_files *ifiles = impl_file_chain;\n \n-  warning (\"`#pragma implementation' is deprecated and will be removed in a \"\n-\t   \"future version of GCC\");\n-\n   if (fname == (tree)-1)\n     return;\n "}, {"sha": "204c64b100663e052288dbd69fbc70ed111bb992", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e5b7cfaabe3016b8fdbdb58306797198348aec8/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e5b7cfaabe3016b8fdbdb58306797198348aec8/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=0e5b7cfaabe3016b8fdbdb58306797198348aec8", "patch": "@@ -7942,9 +7942,6 @@ use of the header file.\n @item #pragma interface\n @itemx #pragma interface \"@var{subdir}/@var{objects}.h\"\n @kindex #pragma interface\n-This @samp{#pragma} has been deprecated and will be removed in a\n-future release of GCC.\n-\n Use this directive in @emph{header files} that define object classes, to save\n space in most of the object files that use those classes.  Normally,\n local copies of certain information (backup copies of inline member\n@@ -7965,9 +7962,6 @@ implementation}.\n @item #pragma implementation\n @itemx #pragma implementation \"@var{objects}.h\"\n @kindex #pragma implementation\n-This @samp{#pragma} has been deprecated and will be removed in a\n-future release of GCC.\n-\n Use this pragma in a @emph{main input file}, when you want full output from\n included header files to be generated (and made globally visible).  The\n included header file, in turn, should use @samp{#pragma interface}."}]}