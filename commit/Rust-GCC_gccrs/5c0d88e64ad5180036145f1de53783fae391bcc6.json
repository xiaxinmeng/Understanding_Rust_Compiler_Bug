{"sha": "5c0d88e64ad5180036145f1de53783fae391bcc6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMwZDg4ZTY0YWQ1MTgwMDM2MTQ1ZjFkZTUzNzgzZmFlMzkxYmNjNg==", "commit": {"author": {"name": "Changpeng Fang", "email": "changpeng.fang@amd.com", "date": "2011-06-29T17:53:49Z"}, "committer": {"name": "Changpeng Fang", "email": "cfang@gcc.gnu.org", "date": "2011-06-29T17:53:49Z"}, "message": "Auto-vectorizer generates 128-bit AVX insns by default for bdver1.\n\n\t* config/i386/i386.opt (mprefer-avx128): Redefine the flag as a Mask option.\n\t* config/i386/i386.h (ix86_tune_indices): Add X86_TUNE_AVX128_OPTIMAL entry.\n\t(TARGET_AVX128_OPTIMAL): New definition.\n\t* config/i386/i386.c (initial_ix86_tune_features): Initialize\n\tX86_TUNE_AVX128_OPTIMAL entry.\n\t(ix86_option_override_internal): Enable the generation\n\tof the 128-bit instructions when TARGET_AVX128_OPTIMAL is set.\n\t(ix86_preferred_simd_mode): Use TARGET_PREFER_AVX128.\n\t(ix86_autovectorize_vector_sizes): Use TARGET_PREFER_AVX128.\n\nFrom-SVN: r175661", "tree": {"sha": "27d28736764410b2e6f2d4484a38e12e0a3ff7fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27d28736764410b2e6f2d4484a38e12e0a3ff7fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c0d88e64ad5180036145f1de53783fae391bcc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0d88e64ad5180036145f1de53783fae391bcc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c0d88e64ad5180036145f1de53783fae391bcc6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0d88e64ad5180036145f1de53783fae391bcc6/comments", "author": {"login": "changpeng", "id": 4239661, "node_id": "MDQ6VXNlcjQyMzk2NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4239661?v=4", "gravatar_id": "", "url": "https://api.github.com/users/changpeng", "html_url": "https://github.com/changpeng", "followers_url": "https://api.github.com/users/changpeng/followers", "following_url": "https://api.github.com/users/changpeng/following{/other_user}", "gists_url": "https://api.github.com/users/changpeng/gists{/gist_id}", "starred_url": "https://api.github.com/users/changpeng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/changpeng/subscriptions", "organizations_url": "https://api.github.com/users/changpeng/orgs", "repos_url": "https://api.github.com/users/changpeng/repos", "events_url": "https://api.github.com/users/changpeng/events{/privacy}", "received_events_url": "https://api.github.com/users/changpeng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "55d80bc439380c02b8110662016d35dfc01b4cf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55d80bc439380c02b8110662016d35dfc01b4cf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55d80bc439380c02b8110662016d35dfc01b4cf0"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "97e17fabff6f75dfef910e6c258469e9dda04df9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0d88e64ad5180036145f1de53783fae391bcc6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0d88e64ad5180036145f1de53783fae391bcc6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c0d88e64ad5180036145f1de53783fae391bcc6", "patch": "@@ -1,3 +1,15 @@\n+2011-06-29  Changpeng Fang <changpeng.fang@amd.com>\n+\n+\t* config/i386/i386.opt (mprefer-avx128): Redefine the flag as a Mask option.\n+\t* config/i386/i386.h (ix86_tune_indices): Add X86_TUNE_AVX128_OPTIMAL entry.\n+\t(TARGET_AVX128_OPTIMAL): New definition.\n+\t* config/i386/i386.c (initial_ix86_tune_features): Initialize\n+\tX86_TUNE_AVX128_OPTIMAL entry.\n+\t(ix86_option_override_internal): Enable the generation\n+\tof the 128-bit instructions when TARGET_AVX128_OPTIMAL is set.\n+\t(ix86_preferred_simd_mode): Use TARGET_PREFER_AVX128.\n+\t(ix86_autovectorize_vector_sizes): Use TARGET_PREFER_AVX128.\n+\n 2011-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR tree-optimization/49539"}, {"sha": "b3434dd96d9a36f9960c903c9525ee14d6c9acc4", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0d88e64ad5180036145f1de53783fae391bcc6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0d88e64ad5180036145f1de53783fae391bcc6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5c0d88e64ad5180036145f1de53783fae391bcc6", "patch": "@@ -2089,7 +2089,11 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   /* X86_SOFTARE_PREFETCHING_BENEFICIAL: Enable software prefetching\n      at -O3.  For the moment, the prefetching seems badly tuned for Intel\n      chips.  */\n-  m_K6_GEODE | m_AMD_MULTIPLE\n+  m_K6_GEODE | m_AMD_MULTIPLE,\n+\n+  /* X86_TUNE_AVX128_OPTIMAL: Enable 128-bit AVX instruction generation for\n+     the auto-vectorizer.  */\n+  m_BDVER1\n };\n \n /* Feature tests against the various architecture variations.  */\n@@ -2623,6 +2627,7 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n     { \"-mvzeroupper\",\t\t\tMASK_VZEROUPPER },\n     { \"-mavx256-split-unaligned-load\",\tMASK_AVX256_SPLIT_UNALIGNED_LOAD},\n     { \"-mavx256-split-unaligned-store\",\tMASK_AVX256_SPLIT_UNALIGNED_STORE},\n+    { \"-mprefer-avx128\",\t\tMASK_PREFER_AVX128},\n   };\n \n   const char *opts[ARRAY_SIZE (isa_opts) + ARRAY_SIZE (flag_opts) + 6][2];\n@@ -3672,6 +3677,9 @@ ix86_option_override_internal (bool main_args_p)\n \t  if ((x86_avx256_split_unaligned_store & ix86_tune_mask)\n \t      && !(target_flags_explicit & MASK_AVX256_SPLIT_UNALIGNED_STORE))\n \t    target_flags |= MASK_AVX256_SPLIT_UNALIGNED_STORE;\n+\t  /* Enable 128-bit AVX instruction generation for the auto-vectorizer.  */\n+\t  if (TARGET_AVX128_OPTIMAL && !(target_flags_explicit & MASK_PREFER_AVX128))\n+\t    target_flags |= MASK_PREFER_AVX128;\n \t}\n     }\n   else \n@@ -34614,15 +34622,15 @@ ix86_preferred_simd_mode (enum machine_mode mode)\n       return V2DImode;\n \n     case SFmode:\n-      if (TARGET_AVX && !flag_prefer_avx128)\n+      if (TARGET_AVX && !TARGET_PREFER_AVX128)\n \treturn V8SFmode;\n       else\n \treturn V4SFmode;\n \n     case DFmode:\n       if (!TARGET_VECTORIZE_DOUBLE)\n \treturn word_mode;\n-      else if (TARGET_AVX && !flag_prefer_avx128)\n+      else if (TARGET_AVX && !TARGET_PREFER_AVX128)\n \treturn V4DFmode;\n       else if (TARGET_SSE2)\n \treturn V2DFmode;\n@@ -34639,7 +34647,7 @@ ix86_preferred_simd_mode (enum machine_mode mode)\n static unsigned int\n ix86_autovectorize_vector_sizes (void)\n {\n-  return (TARGET_AVX && !flag_prefer_avx128) ? 32 | 16 : 0;\n+  return (TARGET_AVX && !TARGET_PREFER_AVX128) ? 32 | 16 : 0;\n }\n \n /* Initialize the GCC target structure.  */"}, {"sha": "d9317ed739c93d93d3d76ed147057149a8835b1c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0d88e64ad5180036145f1de53783fae391bcc6/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0d88e64ad5180036145f1de53783fae391bcc6/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=5c0d88e64ad5180036145f1de53783fae391bcc6", "patch": "@@ -312,6 +312,7 @@ enum ix86_tune_indices {\n   X86_TUNE_OPT_AGU,\n   X86_TUNE_VECTORIZE_DOUBLE,\n   X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL,\n+  X86_TUNE_AVX128_OPTIMAL,\n \n   X86_TUNE_LAST\n };\n@@ -410,7 +411,8 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n \tix86_tune_features[X86_TUNE_VECTORIZE_DOUBLE]\n #define TARGET_SOFTWARE_PREFETCHING_BENEFICIAL \\\n \tix86_tune_features[X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL]\n-\n+#define TARGET_AVX128_OPTIMAL \\\n+\tix86_tune_features[X86_TUNE_AVX128_OPTIMAL]\n /* Feature tests against the various architecture variations.  */\n enum ix86_arch_indices {\n   X86_ARCH_CMOVE,\t\t/* || TARGET_SSE */"}, {"sha": "9886b7bbce49f6a8c25278103d065bb7676bcb9e", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c0d88e64ad5180036145f1de53783fae391bcc6/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c0d88e64ad5180036145f1de53783fae391bcc6/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=5c0d88e64ad5180036145f1de53783fae391bcc6", "patch": "@@ -388,7 +388,7 @@ Do dispatch scheduling if processor is bdver1 and Haifa scheduling\n is selected.\n \n mprefer-avx128\n-Target Report Var(flag_prefer_avx128) Init(0)\n+Target Report Mask(PREFER_AVX128) SAVE\n Use 128-bit AVX instructions instead of 256-bit AVX instructions in the auto-vectorizer.\n \n ;; ISA support"}]}