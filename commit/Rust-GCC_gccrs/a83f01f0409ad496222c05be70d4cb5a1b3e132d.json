{"sha": "a83f01f0409ad496222c05be70d4cb5a1b3e132d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgzZjAxZjA0MDlhZDQ5NjIyMmMwNWJlNzBkNGNiNWExYjNlMTMyZA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-12-16T16:23:50Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-12-16T16:23:50Z"}, "message": "ChangeLog, [...]: Fix spelling errors.\n\n\t* ChangeLog, Make-lang.in, class.c, expr.c, gcj.texi, java-tree.h,\n\tjcf-parse.c, jcf-write.c, lex.c, parse.h, parse.y, verify.c: Fix\n\tspelling errors.\n\nFrom-SVN: r48075", "tree": {"sha": "e33afaec1a48dabdfffb966214f02786bf95c440", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e33afaec1a48dabdfffb966214f02786bf95c440"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a83f01f0409ad496222c05be70d4cb5a1b3e132d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a83f01f0409ad496222c05be70d4cb5a1b3e132d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a83f01f0409ad496222c05be70d4cb5a1b3e132d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a83f01f0409ad496222c05be70d4cb5a1b3e132d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5868edbb704f78353a0d88907914148e58c2cd7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5868edbb704f78353a0d88907914148e58c2cd7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5868edbb704f78353a0d88907914148e58c2cd7c"}], "stats": {"total": 96, "additions": 51, "deletions": 45}, "files": [{"sha": "078a2e793b8989521f5a252ce9ed1fd376604439", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=a83f01f0409ad496222c05be70d4cb5a1b3e132d", "patch": "@@ -1,3 +1,9 @@\n+2001-12-16  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* ChangeLog, Make-lang.in, class.c, expr.c, gcj.texi, java-tree.h,\n+\tjcf-parse.c, jcf-write.c, lex.c, parse.h, parse.y, verify.c: Fix\n+\tspelling errors.\n+\n 2001-12-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* lex.c (java_read_unicode, java_lex): Use hex_p/hex_value.\n@@ -20,7 +26,7 @@\n \t* class.c (build_method_symbols_entry): New function.\n \t(make_method_value): Set \"index\" to to method's vtable index for\n \tvirtual methods when indirect-dispatch is not used.\n-\t(make_class_data): For indirect-dispatch, dont emit the dtable_decl,\n+\t(make_class_data): For indirect-dispatch, don't emit the dtable_decl,\n \tand set vtable_method_count to -1. Set otable and otable_syms field\n \tif indirect-dispatch is used and there was something to put in them.\n \t(build_method_symbols_entry): New function.\n@@ -2340,7 +2346,7 @@ Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* jvgenmain.c (main_method_prefix): Global variable removed.\n \t(main_method_suffix): Likewise.\n \t(do_mangle_classname): New function.\n-\t(main): Call it. Format changed to accomodate new mangling scheme.\n+\t(main): Call it. Format changed to accommodate new mangling scheme.\n \t* lex.c: (utf8_cmp): Conditionally prototyped.\n \t(cxx_keywords): Moved from class.c, conditionally defined.\n \t(utf8_cmp, cxx_keyword_p): Likewise.\n@@ -2911,7 +2917,7 @@ Thu Nov 23 02:19:14 2000  J\"orn Rennecke <amylaar@redhat.com>\n \t* jcf-parse.c (get_constant): Don't mess with obstacks.\n \t(read_class): Likewise.\n \t(jcf_parse): Likewise.\n-\t* lex.c (expresion_obstack): Remove.\n+\t* lex.c (expression_obstack): Remove.\n \t(java_lex): Don't use obstack_free.\n \t* parse.h (exit_java_complete_class): Don't mess with obstacks.\n \t(MANGLE_OUTER_LOCAL_VARIABLE_NAME): Adjust.\n@@ -2921,7 +2927,7 @@ Thu Nov 23 02:19:14 2000  J\"orn Rennecke <amylaar@redhat.com>\n \t(add_inner_class_fields): Adjust calls to MANGLE_* macros.\n \t(lookup_field_wrapper): Likewise.\n \t(obtain_incomplete_type): Don't mess with obstacks.\n-\t(build_alias_initializer_paramter_list): Adjust calls to MANGLE_*\n+\t(build_alias_initializer_parameter_list): Adjust calls to MANGLE_*\n \tmacros.\n \t(craft_constructor): Don't mess with obstacks.\n \t(safe_layout_class): Likewise.\n@@ -3460,7 +3466,7 @@ Sun Aug  6 00:47:24 2000  Ovidiu Predescu  <ovidiu@cup.hp.com>\n \tentering the function. `fprintf' format modified not to use\n \tINNER_QUALIFIER.\n \t(report_class_declaration): Assign `package_name' and\n-\t`current_class' to NULL separatly.\n+\t`current_class' to NULL separately.\n \n 2000-07-31  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n@@ -4468,7 +4474,7 @@ Mon Mar 13 12:21:13 2000  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \t(maybe_make_nested_class_name): Mark nested class name as\n \tqualified when necessary.\n \t(end_class_declaration): Don't call java_parse_context_resume when\n-\tone or more error occured.\n+\tone or more error occurred.\n \t(add_inner_class_fields): Use SET_CPC_INITIALIZER_STMT.\n \t(register_fields): Use SET_CPC_STATIC_INITIALIZER_STMT and\n \tSET_CPC_INITIALIZER_STMT.\n@@ -4771,7 +4777,7 @@ Sat Feb 12 04:34:04 2000  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (outer_field_access_fix): First parameter now a tree\n \tnode. Check for assignement to final. First argument to\n-\tbuild_outer_field_access_fix modified to accomodate prototype.\n+\tbuild_outer_field_access_fix modified to accommodate prototype.\n \t(build_outer_field_access): Don't check for assignment to final\n \there.\n \t(java_complete_lhs): MODIFY_EXPR case: Check for `error_mark_node'\n@@ -5729,7 +5735,7 @@ Wed Dec  1 04:25:06 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n Tue Nov 30 12:36:15 1999  Anthony Green  <green@cygnus.com>\n \n \t* verify.c (verify_jvm_instructions): Create new return label\n-\tchain if non existant (don't rely on the verified state of the jsr\n+\tchain if non existent (don't rely on the verified state of the jsr\n \ttarget.)\n \n Tue Nov 30 12:28:34 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n@@ -11705,7 +11711,7 @@ Tue Apr 14 15:59:54 1998  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \t(yyerror): New static elc. Removed static error_line, error_pos.\n \tNew local code_from_source. Save ctxp->elc into elc at the first\n \tpass. Call java_get_line_col to get a string of the line where\n-\tthe error occured.\n+\tthe error occurred.\n \t(debug_line): Removed static function.\n \t(parse_error_context, parse_warning_context): Parameter cl is now\n \ta WFL node. Use its value to initialize ctxp->elc.\n@@ -12277,7 +12283,7 @@ Fri Oct 17 15:56:37 1997  Per Bothner  <bothner@cygnus.com>\n \n \t* java-tree.h (PUSH_FIELD):  Set DECL_ARTIFICIAL.\n \t* class.c (make_class_data):  Don't build fields_decl if no fields.\n-\tWhen building fields_decl, skip if DECL_ARTIFICAL.\n+\tWhen building fields_decl, skip if DECL_ARTIFICIAL.\n \n \t* expr.c (java_stack_swap):  Update stack_type_map.\n \t* verify.c (merge_types):  Handle array types better.\n@@ -12835,7 +12841,7 @@ Tue May  6 22:08:24 1997  Per Bothner  <bothner@deneb.cygnus.com>\n \t* java-opcodes.h:  Use javaop.def to avoid duplicated list.\n \t* javaop.def:  Rename invokevirt -> invokevirtual.\n \t* lang.c (use_handles):  Removed.\n-\t* parse.c:  Add support for ConstantValue atribute.\n+\t* parse.c:  Add support for ConstantValue attribute.\n \tHandle nested loading of a class.  (JPOOL_UTF):  New.\n \n Tue Mar 11 20:11:05 1997  Per Bothner  <bothner@deneb.cygnus.com>"}, {"sha": "1a8f595a82224ed503ade2cbcb9f3909d6b9c33b", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=a83f01f0409ad496222c05be70d4cb5a1b3e132d", "patch": "@@ -53,7 +53,7 @@ GCJ = gcj\n java: jc1$(exeext) $(GCJ)$(exeext) jvgenmain$(exeext) \\\n       gcjh$(exeext) jv-scan$(exeext) jcf-dump$(exeext)\n \n-# Define the name of target independant tools to be installed in $(bindir)\n+# Define the name of target independent tools to be installed in $(bindir)\n # Names are subject to changes\n JAVA_TARGET_INDEPENDENT_BIN_TOOLS = gcjh jv-scan jcf-dump\n "}, {"sha": "3e56959715f376bcace7a4706cb9e298500d7c28", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=a83f01f0409ad496222c05be70d4cb5a1b3e132d", "patch": "@@ -351,7 +351,7 @@ push_class (class_type, class_name)\n   signature = identifier_subst (class_name, \"L\", '.', '/', \";\");\n   IDENTIFIER_SIGNATURE_TYPE (signature) = build_pointer_type (class_type);\n \n-  /* Setting DECL_ARTIFICAL forces dbxout.c to specific the type is\n+  /* Setting DECL_ARTIFICIAL forces dbxout.c to specific the type is\n      both a typedef and in the struct name-space.  We may want to re-visit\n      this later, but for now it reduces the changes needed for gdb. */\n   DECL_ARTIFICIAL (decl) = 1;\n@@ -786,7 +786,7 @@ set_constant_value (field, constant)\n   if (field == NULL_TREE)\n     warning (\"misplaced ConstantValue attribute (not in any field)\");\n   else if (DECL_INITIAL (field) != NULL_TREE)\n-    warning (\"duplicate ConstanValue atribute for field '%s'\",\n+    warning (\"duplicate ConstantValue attribute for field '%s'\",\n \t     IDENTIFIER_POINTER (DECL_NAME (field)));\n   else\n     {"}, {"sha": "53234c176582ac7adcd6b060d1373b9fcb22f614", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=a83f01f0409ad496222c05be70d4cb5a1b3e132d", "patch": "@@ -2395,7 +2395,7 @@ load_type_state (label)\n }\n \n /* Do the expansion of a Java switch. With Gcc, switches are front-end\n-   dependant things, but they rely on gcc routines. This function is\n+   dependent things, but they rely on gcc routines. This function is\n    placed here because it uses things defined locally in parse.y. */\n \n static tree"}, {"sha": "43d4c936a7a8c2a5ef59e22a5af38788e80cc52e", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=a83f01f0409ad496222c05be70d4cb5a1b3e132d", "patch": "@@ -278,7 +278,7 @@ The classfile built by @code{gcj} for the class @code{java.lang.Object}\n attribute @code{gnu.gcj.gcj-compiled}. The compiler looks for this\n attribute when loading @code{java.lang.Object} and will report an error\n if it isn't found, unless it compiles to bytecode (the option\n-@code{-fforce-classes-archive-check} can be used to overide this\n+@code{-fforce-classes-archive-check} can be used to override this\n behavior in this particular case.)\n \n @table @gcctabopt"}, {"sha": "649a288b27bc8f79ad022e5f5bcbd62c1b6250d6", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=a83f01f0409ad496222c05be70d4cb5a1b3e132d", "patch": "@@ -1263,7 +1263,7 @@ struct rtx_def * java_lang_expand_expr PARAMS ((tree, rtx, enum machine_mode,\n #define ID_INIT_P(ID)   ((ID) == init_identifier_node)\n /* Match ID to either `$finit$' or `finit$', so that `$finit$'\n    continues to be recognized as an equivalent to `finit$' which is\n-   now the prefered name used for the field initialization special\n+   now the preferred name used for the field initialization special\n    method.  */\n #define ID_FINIT_P(ID)  ((ID) == finit_identifier_node \\\n \t\t\t || (ID) == finit_leg_identifier_node)\n@@ -1322,7 +1322,7 @@ extern char *instruction_bits;\n #define BCODE_JUMP_TARGET 2\n \n /* True iff there is a return to this location.\n-   (I.e. the preceedng instruction was a call.) */\n+   (I.e. the preceding instruction was a call.) */\n #define BCODE_RETURN_TARGET 4\n \n /* True iff this is the start of an exception handler. */\n@@ -1417,12 +1417,12 @@ extern tree *type_map;\n   TYPE_LANG_FLAG_5 (TYPE)\n \n /* True if class TYPE is currently being laid out. Helps in detection\n-   of inheritance cycle occuring as a side effect of performing the\n+   of inheritance cycle occurring as a side effect of performing the\n    layout of a class.  */\n #define CLASS_BEING_LAIDOUT(TYPE) TYPE_LANG_FLAG_6 (TYPE)\n \n /* True if class TYPE is currently being laid out. Helps in detection\n-   of inheritance cycle occuring as a side effect of performing the\n+   of inheritance cycle occurring as a side effect of performing the\n    layout of a class.  */\n #define CLASS_BEING_LAIDOUT(TYPE) TYPE_LANG_FLAG_6 (TYPE)\n "}, {"sha": "52de111b0dc35bd5f8e46aa5fae605bbf97056de", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=a83f01f0409ad496222c05be70d4cb5a1b3e132d", "patch": "@@ -1260,7 +1260,7 @@ process_zip_dir (FILE *finput)\n       class_name_in_zip_dir = ZIPDIR_FILENAME (zdir);\n \n       /* We choose to not to process entries with a zero size or entries\n-\t not bearing the .class extention.  */\n+\t not bearing the .class extension.  */\n       if (!zdir->size || !zdir->filename_offset ||\n \t  strncmp (&class_name_in_zip_dir[zdir->filename_length-6], \n \t\t   \".class\", 6))"}, {"sha": "c6de1fe9b47e1a80ae485239c18bd1fce8f88cc2", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=a83f01f0409ad496222c05be70d4cb5a1b3e132d", "patch": "@@ -105,7 +105,7 @@ struct chunk\n    to the beginning of the block.\n \n    If (pc < 0), the jcf_block is not an actual block (i.e. it has no\n-   assocated code yet), but it is an undefined label.\n+   associated code yet), but it is an undefined label.\n */\n \n struct jcf_block\n@@ -2671,7 +2671,7 @@ perform_relocations (state)\n \t  /* new_ptr and old_ptr point into the old and new buffers,\n \t     respectively.  (If no relocations cause the buffer to\n \t     grow, the buffer will be the same buffer, and new_ptr==old_ptr.)\n-\t     The bytes at higher adress have been copied and relocations\n+\t     The bytes at higher address have been copied and relocations\n \t     handled; those at lower addresses remain to process. */\n \n \t  /* Lower old index of piece to be copied with no relocation."}, {"sha": "adc5951db4bd68edafcef88b9400a891923bdf4e", "filename": "gcc/java/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=a83f01f0409ad496222c05be70d4cb5a1b3e132d", "patch": "@@ -1657,7 +1657,7 @@ java_lex (java_lval)\n /* This is called by the parser to see if an error should be generated\n    due to numeric overflow.  This function only handles the particular\n    case of the largest negative value, and is only called in the case\n-   where this value is not preceeded by `-'.  */\n+   where this value is not preceded by `-'.  */\n static void\n error_if_numeric_overflow (value)\n      tree value;"}, {"sha": "1cc4b0b01f594b840e31d6ba2123d06b5770c080", "filename": "gcc/java/parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=a83f01f0409ad496222c05be70d4cb5a1b3e132d", "patch": "@@ -235,7 +235,7 @@ extern tree stabilize_reference PARAMS ((tree));\n   }\n \n /* Build the string parm$<O> and store in into the identifier N. This\n-   is used to contruct the name of hidden parameters used to\n+   is used to construct the name of hidden parameters used to\n    initialize outer scope aliases.  */\n #define MANGLE_ALIAS_INITIALIZER_PARAMETER_NAME_ID(N, O)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "296563ca9b8018e9a9c9b8eb6738e1acae521174", "filename": "gcc/java/parse.y", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=a83f01f0409ad496222c05be70d4cb5a1b3e132d", "patch": "@@ -1598,7 +1598,7 @@ switch_statement:\n \tswitch_block\n \t\t{ \n \t\t  /* Make into \"proper list\" of COMPOUND_EXPRs.\n-\t\t     I.e. make the last statment also have its own\n+\t\t     I.e. make the last statement also have its own\n \t\t     COMPOUND_EXPR. */\n \t\t  maybe_absorb_scoping_blocks ();\n \t\t  TREE_OPERAND ($1, 1) = exit_block ();\n@@ -3852,7 +3852,7 @@ create_interface (flags, id, super)\n   if ((flags & ACC_ABSTRACT) && flag_redundant)\n     parse_warning_context \n       (MODIFIER_WFL (ABSTRACT_TK),\n-       \"Redundant use of `abstract' modifier. Interface `%s' is implicitely abstract\", IDENTIFIER_POINTER (raw_name));\n+       \"Redundant use of `abstract' modifier. Interface `%s' is implicitly abstract\", IDENTIFIER_POINTER (raw_name));\n \n   /* Create a new decl if DECL is NULL, otherwise fix it */\n   decl = maybe_create_class_interface_decl (decl, raw_name, q_name, id);\n@@ -4063,13 +4063,13 @@ static void\n end_class_declaration (resume)\n      int resume;\n {\n-  /* If an error occured, context weren't pushed and won't need to be\n+  /* If an error occurred, context weren't pushed and won't need to be\n      popped by a resume. */\n-  int no_error_occured = ctxp->next && GET_CPC () != error_mark_node;\n+  int no_error_occurred = ctxp->next && GET_CPC () != error_mark_node;\n \n   java_parser_context_pop_initialized_field ();\n   POP_CPC ();\n-  if (resume && no_error_occured)\n+  if (resume && no_error_occurred)\n     java_parser_context_resume ();\n \n   /* We're ending a class declaration, this is a good time to reset\n@@ -5634,7 +5634,7 @@ java_complete_class ()\n \t\t  tree mdecl = JDEP_DECL (dep), signature;\n \t\t  /* Recompute and reset the signature, check first that\n \t\t     all types are now defined. If they're not,\n-\t\t     dont build the signature. */\n+\t\t     don't build the signature. */\n \t\t  if (check_method_types_complete (mdecl))\n \t\t    {\n \t\t      signature = build_java_signature (TREE_TYPE (mdecl));\n@@ -6257,7 +6257,7 @@ java_check_methods (class_decl)\n }\n \n /* Check all the methods of CLASS_DECL. Methods are first completed\n-   then checked according to regular method existance rules.  If no\n+   then checked according to regular method existence rules.  If no\n    constructor for CLASS_DECL were encountered, then build its\n    declaration.  */\n \n@@ -6874,7 +6874,7 @@ read_import_dir (wfl)\n }\n \n /* Possibly find a type in the import on demands specified\n-   types. Returns 1 if an error occured, 0 otherwise. Run throught the\n+   types. Returns 1 if an error occurred, 0 otherwise. Run through the\n    entire list, to detected potential double definitions.  */\n \t\t \n static int\n@@ -7374,7 +7374,7 @@ create_artificial_method (class, flags, type, name, args)\n   return mdecl;\n }\n \n-/* Starts the body if an artifical method.  */\n+/* Starts the body if an artificial method.  */\n \n static void\n start_artificial_method_body (mdecl)\n@@ -9239,7 +9239,7 @@ static_ref_err (wfl, field_id, class_type)\n      IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (class_type))));\n }\n \n-/* 15.10.1 Field Acess Using a Primary and/or Expression Name.\n+/* 15.10.1 Field Access Using a Primary and/or Expression Name.\n    We return something suitable to generate the field access. We also\n    return the field decl in FIELD_DECL and its type in FIELD_TYPE.  If\n    recipient's address can be null. */\n@@ -9536,7 +9536,7 @@ resolve_qualified_expression_name (wfl, found_decl, where_found, type_found)\n \t      parse_error_context (wfl, \"Can't reference `this' before the superclass constructor has been called\");\n \t      return 1;\n \t    }\n-\t  /* We have to generate code for intermediate acess */\n+\t  /* We have to generate code for intermediate access */\n \t  if (!from_type || TREE_TYPE (TREE_TYPE (current_this)) == type)\n \t    {\n \t      *where_found = decl = current_this;\n@@ -9914,7 +9914,7 @@ not_accessible_p (reference, member, where, from_super)\n       if (where && !inherits_from_p (reference, where))\n \treturn 1;\n \n-      /* Otherwise, access is granted if occuring from the class where\n+      /* Otherwise, access is granted if occurring from the class where\n \t member is declared or a subclass of it. Find the right\n \t context to perform the check */\n       if (PURE_INNER_CLASS_TYPE_P (reference))\n@@ -9943,7 +9943,7 @@ not_accessible_p (reference, member, where, from_super)\n       return 1;\n     }\n \n-  /* Default access are permitted only when occuring within the\n+  /* Default access are permitted only when occurring within the\n      package in which the type (REFERENCE) is declared. In other words,\n      REFERENCE is defined in the current package */\n   if (ctxp->package)\n@@ -12274,7 +12274,7 @@ build_expr_block (body, decls)\n   return node;\n }\n \n-/* Create a new function block and link it approriately to current\n+/* Create a new function block and link it appropriately to current\n    function block chain */\n \n static tree\n@@ -12535,7 +12535,7 @@ patch_assignment (node, wfl_op1)\n     {\n       lhs_type = TREE_TYPE (lvalue);\n     }\n-  /* Or Lhs can be a array acccess. Should that be lvalue ? FIXME +\n+  /* Or Lhs can be a array access. Should that be lvalue ? FIXME +\n      comment on reason why */\n   else if (TREE_CODE (wfl_op1) == ARRAY_REF)\n     {\n@@ -13342,7 +13342,7 @@ patch_binop (node, wfl_op1, wfl_op2)\n \t}\n \n       /* Unary numeric promotion (5.6.1) is performed on each operand\n-         separatly */\n+         separately */\n       op1 = do_unary_numeric_promotion (op1);\n       op2 = do_unary_numeric_promotion (op2);\n \n@@ -14813,7 +14813,7 @@ build_new_loop (loop_body)\n        COMPOUND_EXPR\t\t(loop main body)\n          EXIT_EXPR\t\t(this order is for while/for loops.\n          LABELED_BLOCK_EXPR      the order is reversed for do loops)\n-           LABEL_DECL           (a continue occuring here branches at the \n+           LABEL_DECL           (a continue occurring here branches at the \n            BODY\t\t\t end of this labeled block)\n        INCREMENT\t\t(if any)\n \n@@ -15449,7 +15449,7 @@ patch_throw_statement (node, wfl_op1)\n \n   SET_WFL_OPERATOR (wfl_operator, node, wfl_op1);\n   /* An instance can't throw a checked exception unless that exception\n-     is explicitely declared in the `throws' clause of each\n+     is explicitly declared in the `throws' clause of each\n      constructor. This doesn't apply to anonymous classes, since they\n      don't have declared constructors. */\n   if (!unchecked_ok "}, {"sha": "f5542489b116cb66f46fbb398555e785081564e5", "filename": "gcc/java/verify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a83f01f0409ad496222c05be70d4cb5a1b3e132d/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=a83f01f0409ad496222c05be70d4cb5a1b3e132d", "patch": "@@ -66,7 +66,7 @@ push_pending_label (target_label)\n \n /* Note that TARGET_LABEL is a possible successor instruction.\n    Merge the type state etc.\n-   Return NULL on sucess, or an error message on failure. */\n+   Return NULL on success, or an error message on failure. */\n \n static const char *\n check_pending_block (target_label)\n@@ -414,7 +414,7 @@ pop_argument_types (arg_types)\n #define BCODE byte_ops\n \n /* Verify the bytecodes of the current method.\n-   Return 1 on sucess, 0 on failure. */\n+   Return 1 on success, 0 on failure. */\n int\n verify_jvm_instructions (jcf, byte_ops, length)\n      JCF* jcf;"}]}