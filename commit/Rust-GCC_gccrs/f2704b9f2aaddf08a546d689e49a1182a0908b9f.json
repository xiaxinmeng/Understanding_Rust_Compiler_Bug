{"sha": "f2704b9f2aaddf08a546d689e49a1182a0908b9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI3MDRiOWYyYWFkZGYwOGE1NDZkNjg5ZTQ5YTExODJhMDkwOGI5Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-03-29T20:34:34Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-03-29T20:34:34Z"}, "message": "stor-layout.c (bit_from_pos, [...]): New functions.\n\n\t* stor-layout.c (bit_from_pos, byte_from_pos): New functions.\n\t(pos_from_byte, pos_from_bit, normalize_offset): Likewise.\n\t(normalize_rli, rli_size_so_far, rli_size_unit_so_far): Use them.\n\t* tree.c (bit_position, byte_position): Likewise.\n\t* tree.h: Declare new functions.\n\nFrom-SVN: r32813", "tree": {"sha": "113b51730f955c5321c5845dfbce388eaf91bb66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/113b51730f955c5321c5845dfbce388eaf91bb66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2704b9f2aaddf08a546d689e49a1182a0908b9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2704b9f2aaddf08a546d689e49a1182a0908b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2704b9f2aaddf08a546d689e49a1182a0908b9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2704b9f2aaddf08a546d689e49a1182a0908b9f/comments", "author": null, "committer": null, "parents": [{"sha": "2e3120e80da860959971db00816e1e5cfc2c93fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3120e80da860959971db00816e1e5cfc2c93fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e3120e80da860959971db00816e1e5cfc2c93fb"}], "stats": {"total": 137, "additions": 104, "deletions": 33}, "files": [{"sha": "428eccbe673601b216f63caf56eff5bc314213b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2704b9f2aaddf08a546d689e49a1182a0908b9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2704b9f2aaddf08a546d689e49a1182a0908b9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2704b9f2aaddf08a546d689e49a1182a0908b9f", "patch": "@@ -1,3 +1,11 @@\n+Wed Mar 29 15:39:10 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* stor-layout.c (bit_from_pos, byte_from_pos): New functions.\n+\t(pos_from_byte, pos_from_bit, normalize_offset): Likewise.\n+\t(normalize_rli, rli_size_so_far, rli_size_unit_so_far): Use them.\n+\t* tree.c (bit_position, byte_position): Likewise.\n+\t* tree.h: Declare new functions.\n+\n 2000-03-29  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/arm/arm.c: Minor formatting changes/"}, {"sha": "966945fe9a2892014d206af2f29f8cd56721094e", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 83, "deletions": 23, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2704b9f2aaddf08a546d689e49a1182a0908b9f/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2704b9f2aaddf08a546d689e49a1182a0908b9f/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=f2704b9f2aaddf08a546d689e49a1182a0908b9f", "patch": "@@ -433,6 +433,86 @@ start_record_layout (t)\n   return rli;\n }\n \n+/* These four routines perform computations that convert between\n+   the offset/bitpos forms and byte and bit offsets.  */\n+\n+tree\n+bit_from_pos (offset, bitpos)\n+     tree offset, bitpos;\n+{\n+  return size_binop (PLUS_EXPR, bitpos,\n+\t\t     size_binop (MULT_EXPR, convert (bitsizetype, offset),\n+\t\t\t\t bitsize_unit_node));\n+}\n+\n+tree\n+byte_from_pos (offset, bitpos)\n+     tree offset, bitpos;\n+{\n+  return size_binop (PLUS_EXPR, offset,\n+\t\t     convert (sizetype,\n+\t\t\t      size_binop (CEIL_DIV_EXPR, bitpos,\n+\t\t\t\t\t  bitsize_unit_node)));\n+}\n+\n+void\n+pos_from_byte (poffset, pbitpos, off_align, pos)\n+     tree *poffset, *pbitpos;\n+     unsigned int off_align;\n+     tree pos;\n+{\n+  *poffset\n+    = size_binop (MULT_EXPR,\n+\t\t  convert (sizetype,\n+\t\t\t   size_binop (FLOOR_DIV_EXPR, pos,\n+\t\t\t\t       bitsize_int (off_align\n+\t\t\t\t\t\t    / BITS_PER_UNIT))),\n+\t\t  size_int (off_align / BITS_PER_UNIT));\n+  *pbitpos = size_binop (MULT_EXPR,\n+\t\t\t size_binop (FLOOR_MOD_EXPR, pos,\n+\t\t\t\t     bitsize_int (off_align / BITS_PER_UNIT)),\n+\t\t\t bitsize_unit_node);\n+}\n+\n+void\n+pos_from_bit (poffset, pbitpos, off_align, pos)\n+     tree *poffset, *pbitpos;\n+     unsigned int off_align;\n+     tree pos;\n+{\n+  *poffset = size_binop (MULT_EXPR,\n+\t\t\t convert (sizetype,\n+\t\t\t\t  size_binop (FLOOR_DIV_EXPR, pos,\n+\t\t\t\t\t      bitsize_int (off_align))),\n+\t\t\t size_int (off_align / BITS_PER_UNIT));\n+  *pbitpos = size_binop (FLOOR_MOD_EXPR, pos, bitsize_int (off_align));\n+}\n+\n+/* Given a pointer to bit and byte offsets and an offset alignment,\n+   normalize the offsets so they are within the alignment.  */\n+\n+void\n+normalize_offset (poffset, pbitpos, off_align)\n+     tree *poffset, *pbitpos;\n+     unsigned int off_align;\n+{\n+  /* If the bit position is now larger than it should be, adjust it\n+     downwards.  */\n+  if (compare_tree_int (*pbitpos, off_align) >= 0)\n+    {\n+      tree extra_aligns = size_binop (FLOOR_DIV_EXPR, *pbitpos,\n+\t\t\t\t      bitsize_int (off_align));\n+\n+      *poffset\n+\t= size_binop (PLUS_EXPR, *poffset,\n+\t\t      size_binop (MULT_EXPR, convert (sizetype, extra_aligns),\n+\t\t\t\t  size_int (off_align / BITS_PER_UNIT)));\n+\t\t\t\t\n+      *pbitpos\n+\t= size_binop (FLOOR_MOD_EXPR, *pbitpos, bitsize_int (off_align));\n+    }\n+}\n+\n /* Print debugging information about the information in RLI.  */\n \n void\n@@ -462,22 +542,7 @@ void\n normalize_rli (rli)\n      record_layout_info rli;\n {\n-  /* If the bit position is now larger than it should be, adjust it\n-     downwards.  */\n-  if (compare_tree_int (rli->bitpos, rli->offset_align) >= 0)\n-    {\n-      tree extra_aligns = size_binop (FLOOR_DIV_EXPR, rli->bitpos,\n-\t\t\t\t      bitsize_int (rli->offset_align));\n-\n-      rli->offset\n-\t= size_binop (PLUS_EXPR, rli->offset,\n-\t\t      size_binop (MULT_EXPR, convert (sizetype, extra_aligns),\n-\t\t\t\t  size_int (rli->offset_align\n-\t\t\t\t\t    / BITS_PER_UNIT)));\n-\t\t\t\t\n-      rli->bitpos = size_binop (FLOOR_MOD_EXPR, rli->bitpos,\n-\t\t\t\tbitsize_int (rli->offset_align));\n-    }\n+  normalize_offset (&rli->offset, &rli->bitpos, rli->offset_align);\n }\n \n /* Returns the size in bytes allocated so far.  */\n@@ -486,10 +551,7 @@ tree\n rli_size_unit_so_far (rli)\n      record_layout_info rli;\n {\n-  return size_binop (PLUS_EXPR, rli->offset,\n-\t\t     convert (sizetype,\n-\t\t\t      size_binop (CEIL_DIV_EXPR, rli->bitpos,\n-\t\t\t\t\t  bitsize_unit_node)));\n+  return byte_from_pos (rli->offset, rli->bitpos);\n }\n \n /* Returns the size in bits allocated so far.  */\n@@ -498,9 +560,7 @@ tree\n rli_size_so_far (rli)\n      record_layout_info rli;\n {\n-  return size_binop (PLUS_EXPR, rli->bitpos,\n-\t\t     size_binop (MULT_EXPR, convert (bitsizetype, rli->offset),\n-\t\t\t\t bitsize_unit_node));\n+  return bit_from_pos (rli->offset, rli->bitpos);\n }\n \n /* Called from place_field to handle unions.  */"}, {"sha": "826327e0ee6833224960384254023534098d2e18", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2704b9f2aaddf08a546d689e49a1182a0908b9f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2704b9f2aaddf08a546d689e49a1182a0908b9f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f2704b9f2aaddf08a546d689e49a1182a0908b9f", "patch": "@@ -2321,11 +2321,9 @@ tree\n bit_position (field)\n      tree field;\n {\n-  return size_binop (PLUS_EXPR, DECL_FIELD_BIT_OFFSET (field),\n-\t\t     size_binop (MULT_EXPR,\n-\t\t\t\t convert (bitsizetype,\n-\t\t\t\t\t  DECL_FIELD_OFFSET (field)),\n-\t\t\t\t bitsize_unit_node));\n+\n+  return bit_from_pos (DECL_FIELD_OFFSET (field),\n+\t\t       DECL_FIELD_BIT_OFFSET (field));\n }\n \n /* Likewise, but return as an integer.  Abort if it cannot be represented\n@@ -2346,11 +2344,8 @@ tree\n byte_position (field)\n      tree field;\n {\n-  return size_binop (PLUS_EXPR, DECL_FIELD_OFFSET (field),\n-\t\t     convert (sizetype,\n-\t\t\t      size_binop (FLOOR_DIV_EXPR,\n-\t\t\t\t\t  DECL_FIELD_BIT_OFFSET (field),\n-\t\t\t\t\t  bitsize_unit_node)));\n+  return byte_from_pos (DECL_FIELD_OFFSET (field),\n+\t\t\tDECL_FIELD_BIT_OFFSET (field));\n }\n \n /* Likewise, but return as an integer.  Abort if it cannot be represented"}, {"sha": "95f68ab93f1d4564edf489ab84f84135bcdeffea", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2704b9f2aaddf08a546d689e49a1182a0908b9f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2704b9f2aaddf08a546d689e49a1182a0908b9f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f2704b9f2aaddf08a546d689e49a1182a0908b9f", "patch": "@@ -1802,6 +1802,14 @@ typedef struct record_layout_info\n } *record_layout_info;\n \n extern record_layout_info start_record_layout PARAMS ((tree));\n+extern tree bit_from_pos\t\tPARAMS ((tree, tree));\n+extern tree byte_from_pos\t\tPARAMS ((tree, tree));\n+extern void pos_from_byte\t\tPARAMS ((tree *, tree *, unsigned int,\n+\t\t\t\t\t\t tree));\n+extern void pos_from_bit\t\tPARAMS ((tree *, tree *, unsigned int,\n+\t\t\t\t\t\t tree));\n+extern void normalize_offset\t\tPARAMS ((tree *, tree *,\n+\t\t\t\t\t\t unsigned int));\n extern tree rli_size_unit_so_far\tPARAMS ((record_layout_info));\n extern tree rli_size_so_far\t\tPARAMS ((record_layout_info));\n extern void normalize_rli\t\tPARAMS ((record_layout_info));"}]}