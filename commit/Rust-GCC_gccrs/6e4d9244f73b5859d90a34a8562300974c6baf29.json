{"sha": "6e4d9244f73b5859d90a34a8562300974c6baf29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU0ZDkyNDRmNzNiNTg1OWQ5MGEzNGE4NTYyMzAwOTc0YzZiYWYyOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-12-07T23:43:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-12-07T23:43:40Z"}, "message": "configure.ac: Check for ieeefp.h.\n\n\t* configure.ac: Check for ieeefp.h.  Check for fabsf in libm.\n\t* configure: Regenerate.\n\t* config.h.in: Likewise.\n\t* c99_protos.h: New file.\n\t* libgfortran.h: Include c99_protos.h and conditionally ieeefp.h.\n\t* intrinsics/c99_functions.c (fabsf): New function.\n\nFrom-SVN: r91832", "tree": {"sha": "7397b8cae4794ec49536905235d48066a52a6dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7397b8cae4794ec49536905235d48066a52a6dc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e4d9244f73b5859d90a34a8562300974c6baf29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4d9244f73b5859d90a34a8562300974c6baf29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e4d9244f73b5859d90a34a8562300974c6baf29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e4d9244f73b5859d90a34a8562300974c6baf29/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c08f800e9a244f29fd5e4124ed1ed6e3205aca25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08f800e9a244f29fd5e4124ed1ed6e3205aca25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c08f800e9a244f29fd5e4124ed1ed6e3205aca25"}], "stats": {"total": 237, "additions": 235, "deletions": 2}, "files": [{"sha": "1372c7cf413798546fa69b6c6dab3664b0b993f5", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4d9244f73b5859d90a34a8562300974c6baf29/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4d9244f73b5859d90a34a8562300974c6baf29/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6e4d9244f73b5859d90a34a8562300974c6baf29", "patch": "@@ -1,3 +1,12 @@\n+2004-12-07  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* configure.ac: Check for ieeefp.h.  Check for fabsf in libm.\n+\t* configure: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* c99_protos.h: New file.\n+\t* libgfortran.h: Include c99_protos.h and conditionally ieeefp.h.\n+\t* intrinsics/c99_functions.c (fabsf): New function.\n+\n 2004-12-06  Richard Henderson  <rth@redhat.com>\n \n \t* intrinsics/cshift0.c, intrinsics/eoshift0.c, intrinsics/eoshift2.c,"}, {"sha": "18fc36bcb98151ea2745f6217b42e69e86b6bbec", "filename": "libgfortran/c99_protos.h", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4d9244f73b5859d90a34a8562300974c6baf29/libgfortran%2Fc99_protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4d9244f73b5859d90a34a8562300974c6baf29/libgfortran%2Fc99_protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fc99_protos.h?ref=6e4d9244f73b5859d90a34a8562300974c6baf29", "patch": "@@ -0,0 +1,126 @@\n+/* Declarations of various C99 functions \n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Lesser General Public\n+License as published by the Free Software Foundation; either\n+version 2.1 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU Lesser General Public License for more details.\n+\n+You should have received a copy of the GNU Lesser General Public\n+License along with libgfortran; see the file COPYING.LIB.  If not,\n+write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+\n+#ifndef C99_PROTOS_H\n+#define C99_PROTOS_H\n+\n+#ifndef HAVE_ACOSF\n+extern float acosf(float);\n+#endif\n+\n+#ifndef HAVE_ASINF\n+extern float asinf(float);\n+#endif\n+\n+#ifndef HAVE_ATAN2F\n+extern float atan2f(float, float);\n+#endif\n+\n+#ifndef HAVE_ATANF\n+extern float atanf(float);\n+#endif\n+\n+#ifndef HAVE_CEILF\n+extern float ceilf(float);\n+#endif\n+\n+#ifndef HAVE_COPYSIGNF\n+extern float copysignf(float, float);\n+#endif\n+\n+#ifndef HAVE_COSF\n+extern float cosf(float);\n+#endif\n+\n+#ifndef HAVE_COSHF\n+extern float coshf(float);\n+#endif\n+\n+#ifndef HAVE_EXPF\n+extern float expf(float);\n+#endif\n+\n+#ifndef HAVE_FABSF\n+extern float fabsf(float);\n+#endif\n+\n+#ifndef HAVE_FLOORF\n+extern float floorf(float);\n+#endif\n+\n+#ifndef HAVE_FREXPF\n+extern float frexpf(float, int *);\n+#endif\n+\n+#ifndef HAVE_HYPOTF\n+extern float hypotf(float, float);\n+#endif\n+\n+#ifndef HAVE_LOGF\n+extern float logf(float);\n+#endif\n+\n+#ifndef HAVE_LOG10F\n+extern float log10f(float);\n+#endif\n+\n+#ifndef HAVE_SCALBNF\n+extern float scalbnf(float, int);\n+#endif\n+\n+#ifndef HAVE_SINF\n+extern float sinf(float);\n+#endif\n+\n+#ifndef HAVE_SINHF\n+extern float sinhf(float);\n+#endif\n+\n+#ifndef HAVE_SQRTF\n+extern float sqrtf(float);\n+#endif\n+\n+#ifndef HAVE_TANF\n+extern float tanf(float);\n+#endif\n+\n+#ifndef HAVE_TANHF\n+extern float tanhf(float);\n+#endif\n+\n+#ifndef HAVE_NEXTAFTERF\n+extern float nextafterf(float, float);\n+#endif\n+\n+#ifndef HAVE_POWF\n+extern float powf(float, float);\n+#endif\n+\n+#ifndef HAVE_ROUND\n+extern double round(double);\n+#endif\n+\n+#ifndef HAVE_ROUNDF\n+extern float roundf(float);\n+#endif\n+\n+#endif  /* C99_PROTOS_H  */\n+"}, {"sha": "a705e84be28c13f23ae96112ebf3687c8859b5d8", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4d9244f73b5859d90a34a8562300974c6baf29/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4d9244f73b5859d90a34a8562300974c6baf29/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=6e4d9244f73b5859d90a34a8562300974c6baf29", "patch": "@@ -45,6 +45,9 @@\n /* libm includes expf */\n #undef HAVE_EXPF\n \n+/* libm includes fabsf */\n+#undef HAVE_FABSF\n+\n /* libm includes finite */\n #undef HAVE_FINITE\n \n@@ -75,6 +78,9 @@\n /* libm includes hypotf */\n #undef HAVE_HYPOTF\n \n+/* Define to 1 if you have the <ieeefp.h> header file. */\n+#undef HAVE_IEEEFP_H\n+\n /* Define to 1 if you have the <inttypes.h> header file. */\n #undef HAVE_INTTYPES_H\n "}, {"sha": "485391dcab23108b4f25ce637494cd97d3157a9a", "filename": "libgfortran/configure", "status": "modified", "additions": 79, "deletions": 1, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4d9244f73b5859d90a34a8562300974c6baf29/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4d9244f73b5859d90a34a8562300974c6baf29/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=6e4d9244f73b5859d90a34a8562300974c6baf29", "patch": "@@ -6450,7 +6450,8 @@ done\n \n \n \n-for ac_header in sys/mman.h sys/types.h sys/stat.h\n+\n+for ac_header in sys/mman.h sys/types.h sys/stat.h ieeefp.h\n do\n as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n@@ -8195,6 +8196,83 @@ _ACEOF\n \n fi\n \n+echo \"$as_me:$LINENO: checking for fabsf in -lm\" >&5\n+echo $ECHO_N \"checking for fabsf in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_fabsf+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char fabsf ();\n+int\n+main ()\n+{\n+fabsf ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_fabsf=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_fabsf=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_fabsf\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_fabsf\" >&6\n+if test $ac_cv_lib_m_fabsf = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_FABSF 1\n+_ACEOF\n+\n+fi\n+\n echo \"$as_me:$LINENO: checking for floorf in -lm\" >&5\n echo $ECHO_N \"checking for floorf in -lm... $ECHO_C\" >&6\n if test \"${ac_cv_lib_m_floorf+set}\" = set; then"}, {"sha": "6fd3f50806984a18ff91efb5ad8a9264c7aa3e84", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4d9244f73b5859d90a34a8562300974c6baf29/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4d9244f73b5859d90a34a8562300974c6baf29/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=6e4d9244f73b5859d90a34a8562300974c6baf29", "patch": "@@ -148,7 +148,7 @@ AC_TYPE_OFF_T\n AC_STDC_HEADERS\n AC_HAVE_HEADERS(stdlib.h stdio.h string.h stddef.h math.h unistd.h)\n AC_CHECK_HEADERS(time.h sys/params.h sys/time.h sys/times.h sys/resource.h)\n-AC_CHECK_HEADERS(sys/mman.h sys/types.h sys/stat.h)\n+AC_CHECK_HEADERS(sys/mman.h sys/types.h sys/stat.h ieeefp.h)\n AC_CHECK_HEADER([complex.h],[AC_DEFINE([HAVE_COMPLEX_H], [1], [complex.h exists])])\n \n AC_CHECK_MEMBERS([struct stat.st_blksize])\n@@ -177,6 +177,7 @@ AC_CHECK_LIB([m],[copysignf],[AC_DEFINE([HAVE_COPYSIGNF],[1],[libm includes copy\n AC_CHECK_LIB([m],[cosf],[AC_DEFINE([HAVE_COSF],[1],[libm includes cosf])])\n AC_CHECK_LIB([m],[coshf],[AC_DEFINE([HAVE_COSHF],[1],[libm includes coshf])])\n AC_CHECK_LIB([m],[expf],[AC_DEFINE([HAVE_EXPF],[1],[libm includes expf])])\n+AC_CHECK_LIB([m],[fabsf],[AC_DEFINE([HAVE_FABSF],[1],[libm includes fabsf])])\n AC_CHECK_LIB([m],[floorf],[AC_DEFINE([HAVE_FLOORF],[1],[libm includes floorf])])\n AC_CHECK_LIB([m],[frexpf],[AC_DEFINE([HAVE_FREXPF],[1],[libm includes frexpf])])\n AC_CHECK_LIB([m],[hypotf],[AC_DEFINE([HAVE_HYPOTF],[1],[libm includes hypotf])])"}, {"sha": "e3e0d6c8517921281001a0004f16807e375d089d", "filename": "libgfortran/intrinsics/c99_functions.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4d9244f73b5859d90a34a8562300974c6baf29/libgfortran%2Fintrinsics%2Fc99_functions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4d9244f73b5859d90a34a8562300974c6baf29/libgfortran%2Fintrinsics%2Fc99_functions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fc99_functions.c?ref=6e4d9244f73b5859d90a34a8562300974c6baf29", "patch": "@@ -97,6 +97,14 @@ expf(float x)\n }\n #endif\n \n+#ifndef HAVE_FABSF\n+float\n+fabsf(float x)\n+{\n+  return (float) fabs(x);\n+}\n+#endif\n+\n #ifndef HAVE_FLOORF\n float\n floorf(float x)"}, {"sha": "3732707dca85cb2ad9cc30fd3703bfd7c81d38f0", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e4d9244f73b5859d90a34a8562300974c6baf29/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e4d9244f73b5859d90a34a8562300974c6baf29/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=6e4d9244f73b5859d90a34a8562300974c6baf29", "patch": "@@ -32,13 +32,18 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n #include \"config.h\"\n+#include \"c99_protos.h\"\n \n #if HAVE_COMPLEX_H\n # include <complex.h>\n #else\n #define complex __complex__\n #endif\n \n+#if HAVE_IEEEFP_H\n+#include <ieeefp.h>\n+#endif\n+\n #if HAVE_STDINT_H\n #include <stdint.h>\n #endif"}]}