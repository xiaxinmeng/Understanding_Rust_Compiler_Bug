{"sha": "cdd1ba62102cd0196d6692b1af256680151fc222", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RkMWJhNjIxMDJjZDAxOTZkNjY5MmIxYWYyNTY2ODAxNTFmYzIyMg==", "commit": {"author": {"name": "Samuel Bronson", "email": "naesten@gmail.com", "date": "2014-07-11T13:43:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-07-11T13:43:07Z"}, "message": "re PR libstdc++/58962 (Pretty printers use obsolete Python syntax)\n\n2014-07-11  Samuel Bronson  <naesten@gmail.com>\n\t    Matthias Klose  <doko@ubuntu.com>\n\n\tPR libstdc++/58962\n\t* python/libstdcxx/v6/printers.py: Port to Python 2+3\n\t(imap): New compat function.\n\t(izip): Likewise.\n\t(Iterator): New mixin to allow writing iterators in Python 3 style\n\tregardless of which version we're running on.\n\t[Python3] (long) New compat alias for \"int\".\n\t* testsuite/lib/gdb-test.exp: Port to Python 2+3 (print syntax)\n\nCo-Authored-By: Matthias Klose <doko@ubuntu.com>\n\nFrom-SVN: r212453", "tree": {"sha": "220ede585b1fc412d0aed322e6ac7e8c72a58c98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/220ede585b1fc412d0aed322e6ac7e8c72a58c98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdd1ba62102cd0196d6692b1af256680151fc222", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd1ba62102cd0196d6692b1af256680151fc222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd1ba62102cd0196d6692b1af256680151fc222", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd1ba62102cd0196d6692b1af256680151fc222/comments", "author": {"login": "SamB", "id": 13903, "node_id": "MDQ6VXNlcjEzOTAz", "avatar_url": "https://avatars.githubusercontent.com/u/13903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SamB", "html_url": "https://github.com/SamB", "followers_url": "https://api.github.com/users/SamB/followers", "following_url": "https://api.github.com/users/SamB/following{/other_user}", "gists_url": "https://api.github.com/users/SamB/gists{/gist_id}", "starred_url": "https://api.github.com/users/SamB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SamB/subscriptions", "organizations_url": "https://api.github.com/users/SamB/orgs", "repos_url": "https://api.github.com/users/SamB/repos", "events_url": "https://api.github.com/users/SamB/events{/privacy}", "received_events_url": "https://api.github.com/users/SamB/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21e8fb22580939c384699b75bcc0d7490beba819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e8fb22580939c384699b75bcc0d7490beba819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21e8fb22580939c384699b75bcc0d7490beba819"}], "stats": {"total": 126, "additions": 91, "deletions": 35}, "files": [{"sha": "29fbb3051fa7f8332e23e9770395fe8b118b158f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd1ba62102cd0196d6692b1af256680151fc222/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd1ba62102cd0196d6692b1af256680151fc222/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cdd1ba62102cd0196d6692b1af256680151fc222", "patch": "@@ -1,3 +1,15 @@\n+2014-07-11  Samuel Bronson  <naesten@gmail.com>\n+\t    Matthias Klose  <doko@ubuntu.com>\n+\n+\tPR libstdc++/58962\n+\t* python/libstdcxx/v6/printers.py: Port to Python 2+3\n+\t(imap): New compat function.\n+\t(izip): Likewise.\n+\t(Iterator): New mixin to allow writing iterators in Python 3 style\n+\tregardless of which version we're running on.\n+\t[Python3] (long) New compat alias for \"int\".\n+\t* testsuite/lib/gdb-test.exp: Port to Python 2+3 (print syntax)\n+\n 2014-07-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/experimental/any (any::_Manager_alloc::_Data): Reorder"}, {"sha": "1fa08fbd572a0f6c041f024ec84dd5e03329fd5f", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 77, "deletions": 33, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd1ba62102cd0196d6692b1af256680151fc222/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd1ba62102cd0196d6692b1af256680151fc222/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=cdd1ba62102cd0196d6692b1af256680151fc222", "patch": "@@ -1,4 +1,4 @@\n-# Pretty-printers for libstc++.\n+# Pretty-printers for libstdc++.\n \n # Copyright (C) 2008-2014 Free Software Foundation, Inc.\n \n@@ -18,6 +18,50 @@\n import gdb\n import itertools\n import re\n+import sys\n+\n+### Python 2 + Python 3 compatibility code\n+\n+# Resources about compatibility:\n+#\n+#  * <http://pythonhosted.org/six/>: Documentation of the \"six\" module\n+\n+# FIXME: The handling of e.g. std::basic_string (at least on char)\n+# probably needs updating to work with Python 3's new string rules.\n+#\n+# In particular, Python 3 has a separate type (called byte) for\n+# bytestrings, and a special b\"\" syntax for the byte literals; the old\n+# str() type has been redefined to always store Unicode text.\n+#\n+# We probably can't do much about this until this GDB PR is addressed:\n+# <https://sourceware.org/bugzilla/show_bug.cgi?id=17138>\n+\n+if sys.version_info[0] > 2:\n+    ### Python 3 stuff\n+    Iterator = object\n+    # Python 3 folds these into the normal functions.\n+    imap = map\n+    izip = zip\n+    # Also, int subsumes long\n+    long = int\n+else:\n+    ### Python 2 stuff\n+    class Iterator:\n+        \"\"\"Compatibility mixin for iterators\n+\n+        Instead of writing next() methods for iterators, write\n+        __next__() methods and use this mixin to make them work in\n+        Python 2 as well as Python 3.\n+\n+        Idea stolen from the \"six\" documentation:\n+        <http://pythonhosted.org/six/#six.Iterator>\n+        \"\"\"\n+\n+        def next(self):\n+            return self.__next__()\n+\n+    # In Python 2, we still need these from itertools\n+    from itertools import imap, izip\n \n # Try to use the new-style pretty-printing if available.\n _use_gdb_pp = True\n@@ -87,7 +131,7 @@ def to_string (self):\n class StdListPrinter:\n     \"Print a std::list\"\n \n-    class _iterator:\n+    class _iterator(Iterator):\n         def __init__(self, nodetype, head):\n             self.nodetype = nodetype\n             self.base = head['_M_next']\n@@ -97,7 +141,7 @@ def __init__(self, nodetype, head):\n         def __iter__(self):\n             return self\n \n-        def next(self):\n+        def __next__(self):\n             if self.base == self.head:\n                 raise StopIteration\n             elt = self.base.cast(self.nodetype).dereference()\n@@ -135,7 +179,7 @@ def to_string(self):\n class StdSlistPrinter:\n     \"Print a __gnu_cxx::slist\"\n \n-    class _iterator:\n+    class _iterator(Iterator):\n         def __init__(self, nodetype, head):\n             self.nodetype = nodetype\n             self.base = head['_M_head']['_M_next']\n@@ -144,7 +188,7 @@ def __init__(self, nodetype, head):\n         def __iter__(self):\n             return self\n \n-        def next(self):\n+        def __next__(self):\n             if self.base == 0:\n                 raise StopIteration\n             elt = self.base.cast(self.nodetype).dereference()\n@@ -180,7 +224,7 @@ def to_string(self):\n class StdVectorPrinter:\n     \"Print a std::vector\"\n \n-    class _iterator:\n+    class _iterator(Iterator):\n         def __init__ (self, start, finish, bitvec):\n             self.bitvec = bitvec\n             if bitvec:\n@@ -198,7 +242,7 @@ def __init__ (self, start, finish, bitvec):\n         def __iter__(self):\n             return self\n \n-        def next(self):\n+        def __next__(self):\n             count = self.count\n             self.count = self.count + 1\n             if self.bitvec:\n@@ -265,7 +309,7 @@ def to_string(self):\n class StdTuplePrinter:\n     \"Print a std::tuple\"\n \n-    class _iterator:\n+    class _iterator(Iterator):\n         def __init__ (self, head):\n             self.head = head\n \n@@ -282,7 +326,7 @@ def __init__ (self, head):\n         def __iter__ (self):\n             return self\n \n-        def next (self):\n+        def __next__ (self):\n             nodes = self.head.type.fields ()\n             # Check for further recursions in the inheritance tree.\n             if len (nodes) == 0:\n@@ -341,7 +385,7 @@ def display_hint (self):\n             return self.visualizer.display_hint ()\n         return None\n \n-class RbtreeIterator:\n+class RbtreeIterator(Iterator):\n     def __init__(self, rbtree):\n         self.size = rbtree['_M_t']['_M_impl']['_M_node_count']\n         self.node = rbtree['_M_t']['_M_impl']['_M_header']['_M_left']\n@@ -353,7 +397,7 @@ def __iter__(self):\n     def __len__(self):\n         return int (self.size)\n \n-    def next(self):\n+    def __next__(self):\n         if self.count == self.size:\n             raise StopIteration\n         result = self.node\n@@ -422,7 +466,7 @@ class StdMapPrinter:\n     \"Print a std::map or std::multimap\"\n \n     # Turn an RbtreeIterator into a pretty-print iterator.\n-    class _iter:\n+    class _iter(Iterator):\n         def __init__(self, rbiter, type):\n             self.rbiter = rbiter\n             self.count = 0\n@@ -431,9 +475,9 @@ def __init__(self, rbiter, type):\n         def __iter__(self):\n             return self\n \n-        def next(self):\n+        def __next__(self):\n             if self.count % 2 == 0:\n-                n = self.rbiter.next()\n+                n = next(self.rbiter)\n                 n = n.cast(self.type).dereference()\n                 n = get_value_from_Rb_tree_node(n)\n                 self.pair = n\n@@ -465,7 +509,7 @@ class StdSetPrinter:\n     \"Print a std::set or std::multiset\"\n \n     # Turn an RbtreeIterator into a pretty-print iterator.\n-    class _iter:\n+    class _iter(Iterator):\n         def __init__(self, rbiter, type):\n             self.rbiter = rbiter\n             self.count = 0\n@@ -474,8 +518,8 @@ def __init__(self, rbiter, type):\n         def __iter__(self):\n             return self\n \n-        def next(self):\n-            item = self.rbiter.next()\n+        def __next__(self):\n+            item = next(self.rbiter)\n             item = item.cast(self.type).dereference()\n             item = get_value_from_Rb_tree_node(item)\n             # FIXME: this is weird ... what to do?\n@@ -541,7 +585,7 @@ def children (self):\n class StdDequePrinter:\n     \"Print a std::deque\"\n \n-    class _iter:\n+    class _iter(Iterator):\n         def __init__(self, node, start, end, last, buffer_size):\n             self.node = node\n             self.p = start\n@@ -553,7 +597,7 @@ def __init__(self, node, start, end, last, buffer_size):\n         def __iter__(self):\n             return self\n \n-        def next(self):\n+        def __next__(self):\n             if self.p == self.last:\n                 raise StopIteration\n \n@@ -638,7 +682,7 @@ def to_string(self):\n     def display_hint (self):\n         return 'string'\n \n-class Tr1HashtableIterator:\n+class Tr1HashtableIterator(Iterator):\n     def __init__ (self, hash):\n         self.buckets = hash['_M_buckets']\n         self.bucket = 0\n@@ -654,7 +698,7 @@ def __init__ (self, hash):\n     def __iter__ (self):\n         return self\n \n-    def next (self):\n+    def __next__ (self):\n         if self.node == 0:\n             raise StopIteration\n         node = self.node.cast(self.node_type)\n@@ -669,15 +713,15 @@ def next (self):\n                 self.bucket = self.bucket + 1\n         return result\n \n-class StdHashtableIterator:\n+class StdHashtableIterator(Iterator):\n     def __init__(self, hash):\n         self.node = hash['_M_before_begin']['_M_nxt']\n         self.node_type = find_type(hash.type, '__node_type').pointer()\n \n     def __iter__(self):\n         return self\n \n-    def next(self):\n+    def __next__(self):\n         if self.node == 0:\n             raise StopIteration\n         elt = self.node.cast(self.node_type).dereference()\n@@ -706,10 +750,10 @@ def format_count (i):\n         return '[%d]' % i\n \n     def children (self):\n-        counter = itertools.imap (self.format_count, itertools.count())\n+        counter = imap (self.format_count, itertools.count())\n         if self.typename.startswith('std::tr1'):\n-            return itertools.izip (counter, Tr1HashtableIterator (self.hashtable()))\n-        return itertools.izip (counter, StdHashtableIterator (self.hashtable()))\n+            return izip (counter, Tr1HashtableIterator (self.hashtable()))\n+        return izip (counter, StdHashtableIterator (self.hashtable()))\n \n class Tr1UnorderedMapPrinter:\n     \"Print a tr1::unordered_map\"\n@@ -741,15 +785,15 @@ def format_count (i):\n         return '[%d]' % i\n \n     def children (self):\n-        counter = itertools.imap (self.format_count, itertools.count())\n+        counter = imap (self.format_count, itertools.count())\n         # Map over the hash table and flatten the result.\n         if self.typename.startswith('std::tr1'):\n-            data = self.flatten (itertools.imap (self.format_one, Tr1HashtableIterator (self.hashtable())))\n+            data = self.flatten (imap (self.format_one, Tr1HashtableIterator (self.hashtable())))\n             # Zip the two iterators together.\n-            return itertools.izip (counter, data)\n-        data = self.flatten (itertools.imap (self.format_one, StdHashtableIterator (self.hashtable())))\n+            return izip (counter, data)\n+        data = self.flatten (imap (self.format_one, StdHashtableIterator (self.hashtable())))\n         # Zip the two iterators together.\n-        return itertools.izip (counter, data)\n+        return izip (counter, data)\n         \n \n     def display_hint (self):\n@@ -758,7 +802,7 @@ def display_hint (self):\n class StdForwardListPrinter:\n     \"Print a std::forward_list\"\n \n-    class _iterator:\n+    class _iterator(Iterator):\n         def __init__(self, nodetype, head):\n             self.nodetype = nodetype\n             self.base = head['_M_next']\n@@ -767,7 +811,7 @@ def __init__(self, nodetype, head):\n         def __iter__(self):\n             return self\n \n-        def next(self):\n+        def __next__(self):\n             if self.base == 0:\n                 raise StopIteration\n             elt = self.base.cast(self.nodetype).dereference()"}, {"sha": "2169f26d2179c2b81b6977a78f2237939c66b433", "filename": "libstdc++-v3/testsuite/lib/gdb-test.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd1ba62102cd0196d6692b1af256680151fc222/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd1ba62102cd0196d6692b1af256680151fc222/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fgdb-test.exp?ref=cdd1ba62102cd0196d6692b1af256680151fc222", "patch": "@@ -91,7 +91,7 @@ proc gdb-test { marker {selector {}} } {\n \t}\n     }\n \n-    set do_whatis_tests [gdb_batch_check \"python print gdb.type_printers\" \\\n+    set do_whatis_tests [gdb_batch_check \"python print(gdb.type_printers)\" \\\n \t\t\t   \"\\\\\\[\\\\\\]\"]\n     if {!$do_whatis_tests} {\n \tsend_log \"skipping 'whatis' tests - gdb too old\"\n@@ -252,6 +252,6 @@ proc gdb_batch_check {command pattern} {\n # but not earlier versions.\n # Return 1 if the version is ok, 0 otherwise.\n proc gdb_version_check {} {\n-    return [gdb_batch_check \"python print gdb.lookup_global_symbol\" \\\n+    return [gdb_batch_check \"python print(gdb.lookup_global_symbol)\" \\\n \t      \"<built-in function lookup_global_symbol>\"]\n }"}]}