{"sha": "1ab656771ad71a14ccc39b3f38efd54a83473a86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFiNjU2NzcxYWQ3MWExNGNjYzM5YjNmMzhlZmQ1NGE4MzQ3M2E4Ng==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-09-28T23:44:48Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-09-28T23:44:48Z"}, "message": "time_members_gnu.h (__timepunct::_M_get_helper): Add.\n\n\n2001-09-28  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/locale/time_members_gnu.h (__timepunct::_M_get_helper): Add.\n\t(__timepunct::_M_put_helper): Add.\n\t* config/locale/time_members_generic.h: Same.\n\t* include/bits/locale_facets.h (__match_parallel): Remove. Format.\n\t(__timepunct): Add data members.\n\t(__timepunct::_M_days): Add.\n\t(__timepunct::_M_days_abbreviated): Add.\n\t(__timepunct::_M_months): Add.\n\t(__timepunct::_M_months_abbreviated): Add.\n\t(__timepunct::_M_initialize_timepunct): Add.\n\t* include/bits/locale_facets.tcc: Same.\n\t* src/locale-inst.cc: Remove instantiations for __match_parallel.\n\t* acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Add CTIME_CC.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* testsuite/22_locale/time_put_members_char.cc: Mark XFAIL.\n\t* testsuite/22_locale/time_put_members_char.cc (test01): New file.\n\t* testsuite/22_locale/time_get.cc: New file.\n\nFrom-SVN: r45868", "tree": {"sha": "684e546d2b29fa36fbd78496cc7dfc2128b47c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/684e546d2b29fa36fbd78496cc7dfc2128b47c0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ab656771ad71a14ccc39b3f38efd54a83473a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab656771ad71a14ccc39b3f38efd54a83473a86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab656771ad71a14ccc39b3f38efd54a83473a86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab656771ad71a14ccc39b3f38efd54a83473a86/comments", "author": null, "committer": null, "parents": [{"sha": "5bc108773768215e0b4aa22298fc54bd52e8dd1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bc108773768215e0b4aa22298fc54bd52e8dd1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bc108773768215e0b4aa22298fc54bd52e8dd1c"}], "stats": {"total": 5811, "additions": 3514, "deletions": 2297}, "files": [{"sha": "a21754780308facf5e79e9e7bf4c054f4dadec34", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86", "patch": "@@ -1,3 +1,24 @@\n+2001-09-28  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/locale/time_members_gnu.h (__timepunct::_M_get_helper): Add.\n+\t(__timepunct::_M_put_helper): Add.\n+\t* config/locale/time_members_generic.h: Same.\n+\t* include/bits/locale_facets.h (__match_parallel): Remove. Format.\n+\t(__timepunct): Add data members.\n+\t(__timepunct::_M_days): Add.\n+\t(__timepunct::_M_days_abbreviated): Add.\n+\t(__timepunct::_M_months): Add.\n+\t(__timepunct::_M_months_abbreviated): Add.\n+\t(__timepunct::_M_initialize_timepunct): Add.\n+\t* include/bits/locale_facets.tcc: Same. \n+\t* src/locale-inst.cc: Remove instantiations for __match_parallel.\n+\t* acinclude.m4 (GLIBCPP_ENABLE_CLOCALE): Add CTIME_CC.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* testsuite/22_locale/time_put_members_char.cc: Mark XFAIL.\n+\t* testsuite/22_locale/time_put_members_char.cc (test01): New file.\n+\t* testsuite/22_locale/time_get.cc: New file.\n+\n 2001-09-28  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init): Use"}, {"sha": "836193ea90abd0fb3e35d8d7d6fdbcb00921d5a3", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86", "patch": "@@ -1064,6 +1064,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMONEY_CC=config/locale/moneypunct_members_generic.cc\n       CNUMERIC_CC=config/locale/numpunct_members_generic.cc\n       CTIME_H=config/locale/time_members_generic.h\n+      CTIME_CC=config/locale/time_members_generic.cc\n       ;;\n     xgnu)\n       AC_MSG_RESULT(gnu)\n@@ -1093,6 +1094,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMONEY_CC=config/locale/moneypunct_members_gnu.cc\n       CNUMERIC_CC=config/locale/numpunct_members_gnu.cc\n       CTIME_H=config/locale/time_members_gnu.h\n+      CTIME_CC=config/locale/time_members_gnu.cc\n       ;;\n     xieee_1003.1)\n       AC_MSG_RESULT(generic)\n@@ -1109,6 +1111,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMONEY_CC=config/locale/moneypunct_members_generic.cc\n       CNUMERIC_CC=config/locale/numpunct_members_generic.cc\n       CTIME_H=config/locale/time_members_generic.h\n+      CTIME_CC=config/locale/time_members_generic.cc\n       ;;\n     *)\n       echo \"$enable_clocale is an unknown locale package\" 1>&2\n@@ -1131,6 +1134,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   AC_LINK_FILES($CMESSAGES_CC, src/messages.cc)\n   AC_LINK_FILES($CMONEY_CC, src/moneypunct.cc)\n   AC_LINK_FILES($CNUMERIC_CC, src/numpunct.cc)\n+  AC_LINK_FILES($CTIME_CC, src/time.cc)\n ])\n \n "}, {"sha": "2b0aff5c27afd4a0bd36d06caa2ac9887fbf792d", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86", "patch": "@@ -1076,6 +1076,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMONEY_CC=config/locale/moneypunct_members_generic.cc\n       CNUMERIC_CC=config/locale/numpunct_members_generic.cc\n       CTIME_H=config/locale/time_members_generic.h\n+      CTIME_CC=config/locale/time_members_generic.cc\n       ;;\n     xgnu)\n       AC_MSG_RESULT(gnu)\n@@ -1105,6 +1106,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMONEY_CC=config/locale/moneypunct_members_gnu.cc\n       CNUMERIC_CC=config/locale/numpunct_members_gnu.cc\n       CTIME_H=config/locale/time_members_gnu.h\n+      CTIME_CC=config/locale/time_members_gnu.cc\n       ;;\n     xieee_1003.1)\n       AC_MSG_RESULT(generic)\n@@ -1121,6 +1123,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n       CMONEY_CC=config/locale/moneypunct_members_generic.cc\n       CNUMERIC_CC=config/locale/numpunct_members_generic.cc\n       CTIME_H=config/locale/time_members_generic.h\n+      CTIME_CC=config/locale/time_members_generic.cc\n       ;;\n     *)\n       echo \"$enable_clocale is an unknown locale package\" 1>&2\n@@ -1143,6 +1146,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CLOCALE, [\n   AC_LINK_FILES($CMESSAGES_CC, src/messages.cc)\n   AC_LINK_FILES($CMONEY_CC, src/moneypunct.cc)\n   AC_LINK_FILES($CNUMERIC_CC, src/numpunct.cc)\n+  AC_LINK_FILES($CTIME_CC, src/time.cc)\n ])\n \n "}, {"sha": "d1c10511ce5349da7864b10ee62267cf6ff4c87a", "filename": "libstdc++-v3/config/locale/time_members_generic.cc", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_generic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_generic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_generic.cc?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86", "patch": "@@ -0,0 +1,106 @@\n+// std::time_get, std::time_put implementation, GNU version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.5.1.2 - time_get virtual functions\n+// ISO C++ 14882: 22.2.5.3.2 - time_put virtual functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+\n+namespace std\n+{\n+  template<> \n+    void\n+    __timepunct<char>::_M_initialize_timepunct(__c_locale)\n+    { \n+      // \"C\" locale\n+      _M_date_format = \"%m/%d/%Y\";\n+      _M_date_era_format = \"%m/%d/%Y\";\n+      _M_time_format = \"%H:%M:%S\";\n+      _M_time_era_format = \"%H:%M:%S\";\n+      _M_am = \"AM\";\n+      _M_pm = \"PM\";\n+\t  \n+      // Day names, starting with \"C\"'s Sunday.\n+      _M_day1 = \"Sunday\";\n+      _M_day2 = \"Monday\";\n+      _M_day3 = \"Tuesday\";\n+      _M_day4 = \"Wednesday\";\n+      _M_day5 = \"Thursday\";\n+      _M_day6 = \"Friday\";\n+      _M_day7 = \"Saturday\";\n+\n+      // Abbreviated day names, starting with \"C\"'s Sun.\n+      _M_day_a1 = \"Sun\";\n+      _M_day_a2 = \"Mon\";\n+      _M_day_a3 = \"Tue\";\n+      _M_day_a4 = \"Wed\";\n+      _M_day_a5 = \"Thu\";\n+      _M_day_a6 = \"Fri\";\n+      _M_day_a7 = \"Sat\";\n+\n+      // Month names, starting with \"C\"'s January.\n+      _M_month01 = \"January\";\n+      _M_month02 = \"February\";\n+      _M_month03 = \"March\";\n+      _M_month04 = \"April\";\n+      _M_month05 = \"May\";\n+      _M_month06 = \"June\";\n+      _M_month07 = \"July\";\n+      _M_month08 = \"August\";\n+      _M_month09 = \"September\";\n+      _M_month10 = \"October\";\n+      _M_month11 = \"November\";\n+      _M_month12 = \"December\";\n+\n+      // Abbreviated month names, starting with \"C\"'s Jan.\n+      _M_month_a01 = \"Jan\";\n+      _M_month_a02 = \"Feb\";\n+      _M_month_a03 = \"Mar\";\n+      _M_month_a04 = \"Apr\";\n+      _M_month_a05 = \"May\";\n+      _M_month_a06 = \"Jun\";\n+      _M_month_a07 = \"July\";\n+      _M_month_a08 = \"Aug\";\n+      _M_month_a09 = \"Sep\";\n+      _M_month_a10 = \"Oct\";\n+      _M_month_a11 = \"Nov\";\n+      _M_month_a12 = \"Dec\";\n+    }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<> \n+    void\n+    __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale)\n+    { }\n+#endif\n+}"}, {"sha": "88b8208feab90d6543525f13f63087a3ec2cf038", "filename": "libstdc++-v3/config/locale/time_members_generic.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_generic.h?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86", "patch": "@@ -36,10 +36,19 @@\n \n   template<typename _CharT>\n     void\n-    __timepunct<_CharT>::_M_put_helper(char* __s, size_t __maxlen, \n-\t\t\t\t       const char* __format, \n-\t\t\t\t       const tm* __tm) const\n+    __timepunct<_CharT>::\n+    _M_put_helper(char* __s, size_t __maxlen, const char* __format, \n+\t\t  const tm* __tm) const\n     {\n       setlocale(LC_ALL, _M_name_timepunct);\n       strftime(__s, __maxlen, __format, __tm); \n     }\n+\n+  template<typename _CharT>\n+    void\n+    __timepunct<_CharT>::\n+    _M_get_helper(const char*, const char*, tm*) const\n+    {\n+      setlocale(LC_ALL, _M_name_timepunct);\n+      // strptime(__s, __format, __tm);\n+    }"}, {"sha": "4f4789a3cada4d30dbc870ed620eec50076abe16", "filename": "libstdc++-v3/config/locale/time_members_gnu.cc", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_gnu.cc?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86", "patch": "@@ -0,0 +1,176 @@\n+// std::time_get, std::time_put implementation, GNU version -*- C++ -*-\n+\n+// Copyright (C) 2001 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.2.5.1.2 - time_get virtual functions\n+// ISO C++ 14882: 22.2.5.3.2 - time_put virtual functions\n+//\n+\n+// Written by Benjamin Kosnik <bkoz@redhat.com>\n+\n+#include <locale>\n+\n+namespace std\n+{\n+  template<> \n+    void\n+    __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc)\n+    {\n+      if (!__cloc)\n+\t{\n+\t  // \"C\" locale\n+\t  _M_date_format = \"%m/%d/%Y\";\n+\t  _M_date_era_format = \"%m/%d/%Y\";\n+\t  _M_time_format = \"%H:%M:%S\";\n+\t  _M_time_era_format = \"%H:%M:%S\";\n+\t  _M_am = \"AM\";\n+\t  _M_pm = \"PM\";\n+\t  \n+\t  // Day names, starting with \"C\"'s Sunday.\n+\t  _M_day1 = \"Sunday\";\n+\t  _M_day2 = \"Monday\";\n+\t  _M_day3 = \"Tuesday\";\n+\t  _M_day4 = \"Wednesday\";\n+\t  _M_day5 = \"Thursday\";\n+\t  _M_day6 = \"Friday\";\n+\t  _M_day7 = \"Saturday\";\n+\n+\t  // Abbreviated day names, starting with \"C\"'s Sun.\n+\t  _M_day_a1 = \"Sun\";\n+\t  _M_day_a2 = \"Mon\";\n+\t  _M_day_a3 = \"Tue\";\n+\t  _M_day_a4 = \"Wed\";\n+\t  _M_day_a5 = \"Thu\";\n+\t  _M_day_a6 = \"Fri\";\n+\t  _M_day_a7 = \"Sat\";\n+\n+\t  // Month names, starting with \"C\"'s January.\n+\t  _M_month01 = \"January\";\n+\t  _M_month02 = \"February\";\n+\t  _M_month03 = \"March\";\n+\t  _M_month04 = \"April\";\n+\t  _M_month05 = \"May\";\n+\t  _M_month06 = \"June\";\n+\t  _M_month07 = \"July\";\n+\t  _M_month08 = \"August\";\n+\t  _M_month09 = \"September\";\n+\t  _M_month10 = \"October\";\n+\t  _M_month11 = \"November\";\n+\t  _M_month12 = \"December\";\n+\n+\t  // Abbreviated month names, starting with \"C\"'s Jan.\n+\t  _M_month_a01 = \"Jan\";\n+\t  _M_month_a02 = \"Feb\";\n+\t  _M_month_a03 = \"Mar\";\n+\t  _M_month_a04 = \"Apr\";\n+\t  _M_month_a05 = \"May\";\n+\t  _M_month_a06 = \"Jun\";\n+\t  _M_month_a07 = \"July\";\n+\t  _M_month_a08 = \"Aug\";\n+\t  _M_month_a09 = \"Sep\";\n+\t  _M_month_a10 = \"Oct\";\n+\t  _M_month_a11 = \"Nov\";\n+\t  _M_month_a12 = \"Dec\";\n+\t}\n+      else\n+\t{\n+\t  _M_c_locale_timepunct = _S_clone_c_locale(__cloc); \n+\n+\t  _M_date_format = __nl_langinfo_l(D_FMT, __cloc);\n+\t  _M_date_era_format = __nl_langinfo_l(ERA_D_FMT, __cloc);\n+\t  _M_time_format = __nl_langinfo_l(T_FMT, __cloc);\n+\t  _M_time_era_format = __nl_langinfo_l(ERA_T_FMT, __cloc);\n+\t  _M_am = __nl_langinfo_l(AM_STR, __cloc);\n+\t  _M_pm = __nl_langinfo_l(PM_STR, __cloc);\n+\n+\t  // Day names, starting with \"C\"'s Sunday.\n+\t  _M_day1 = __nl_langinfo_l(DAY_1, __cloc);\n+\t  _M_day2 = __nl_langinfo_l(DAY_2, __cloc);\n+\t  _M_day3 = __nl_langinfo_l(DAY_3, __cloc);\n+\t  _M_day4 = __nl_langinfo_l(DAY_4, __cloc);\n+\t  _M_day5 = __nl_langinfo_l(DAY_5, __cloc);\n+\t  _M_day6 = __nl_langinfo_l(DAY_6, __cloc);\n+\t  _M_day7 = __nl_langinfo_l(DAY_7, __cloc);\n+\n+\t  // Abbreviated day names, starting with \"C\"'s Sun.\n+\t  _M_day_a1 = __nl_langinfo_l(ABDAY_1, __cloc);\n+\t  _M_day_a2 = __nl_langinfo_l(ABDAY_2, __cloc);\n+\t  _M_day_a3 = __nl_langinfo_l(ABDAY_3, __cloc);\n+\t  _M_day_a4 = __nl_langinfo_l(ABDAY_4, __cloc);\n+\t  _M_day_a5 = __nl_langinfo_l(ABDAY_5, __cloc);\n+\t  _M_day_a6 = __nl_langinfo_l(ABDAY_6, __cloc);\n+\t  _M_day_a7 = __nl_langinfo_l(ABDAY_7, __cloc);\n+\n+\t  // Month names, starting with \"C\"'s January.\n+\t  _M_month01 = __nl_langinfo_l(MON_1, __cloc);\n+\t  _M_month02 = __nl_langinfo_l(MON_2, __cloc);\n+\t  _M_month03 = __nl_langinfo_l(MON_3, __cloc);\n+\t  _M_month04 = __nl_langinfo_l(MON_4, __cloc);\n+\t  _M_month05 = __nl_langinfo_l(MON_5, __cloc);\n+\t  _M_month06 = __nl_langinfo_l(MON_6, __cloc);\n+\t  _M_month07 = __nl_langinfo_l(MON_7, __cloc);\n+\t  _M_month08 = __nl_langinfo_l(MON_8, __cloc);\n+\t  _M_month09 = __nl_langinfo_l(MON_9, __cloc);\n+\t  _M_month10 = __nl_langinfo_l(MON_10, __cloc);\n+\t  _M_month11 = __nl_langinfo_l(MON_11, __cloc);\n+\t  _M_month12 = __nl_langinfo_l(MON_12, __cloc);\n+\n+\t  // Abbreviated month names, starting with \"C\"'s Jan.\n+\t  _M_month_a01 = __nl_langinfo_l(ABMON_1, __cloc);\n+\t  _M_month_a02 = __nl_langinfo_l(ABMON_2, __cloc);\n+\t  _M_month_a03 = __nl_langinfo_l(ABMON_3, __cloc);\n+\t  _M_month_a04 = __nl_langinfo_l(ABMON_4, __cloc);\n+\t  _M_month_a05 = __nl_langinfo_l(ABMON_5, __cloc);\n+\t  _M_month_a06 = __nl_langinfo_l(ABMON_6, __cloc);\n+\t  _M_month_a07 = __nl_langinfo_l(ABMON_7, __cloc);\n+\t  _M_month_a08 = __nl_langinfo_l(ABMON_8, __cloc);\n+\t  _M_month_a09 = __nl_langinfo_l(ABMON_9, __cloc);\n+\t  _M_month_a10 = __nl_langinfo_l(ABMON_10, __cloc);\n+\t  _M_month_a11 = __nl_langinfo_l(ABMON_11, __cloc);\n+\t  _M_month_a12 = __nl_langinfo_l(ABMON_12, __cloc);\n+\t}\n+    }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<> \n+    void\n+    __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale __cloc)\n+    {\n+      if (!__cloc)\n+\t{\n+\t  // \"C\" locale\n+\t}\n+      else\n+\t{\n+\t  _M_c_locale_timepunct = _S_clone_c_locale(__cloc); \n+\t}\n+    }\n+#endif\n+}\n+"}, {"sha": "16c9ff39d183b945e9c09eb9dac8b33fff1fcfd0", "filename": "libstdc++-v3/config/locale/time_members_gnu.h", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_gnu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_gnu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Ftime_members_gnu.h?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86", "patch": "@@ -36,9 +36,9 @@\n \n   template<typename _CharT>\n     void\n-    __timepunct<_CharT>::_M_put_helper(char* __s, size_t __maxlen, \n-\t\t\t\t       const char* __format, \n-\t\t\t\t       const tm* __tm) const\n+    __timepunct<_CharT>::\n+    _M_put_helper(char* __s, size_t __maxlen, const char* __format, \n+\t\t  const tm* __tm) const\n     {\n #if 0\n       // Requires glibc 2.3\n@@ -49,5 +49,22 @@\n #else\n       setlocale(LC_ALL, _M_name_timepunct);\n       strftime(__s, __maxlen, __format, __tm);\n+#endif\n+    }\n+\n+  template<typename _CharT>\n+    void\n+    __timepunct<_CharT>::\n+    _M_get_helper(const char* __s, const char* __format, tm* __tm) const\n+    {\n+#if 0\n+      // Requires glibc 2.3\n+      if (_M_c_locale_timepunct)\n+\t__strptime_l(__s, _M_c_locale_timepunct, __format, __tm);\n+      else\n+\tstrptime(__s, __format, __tm);\n+#else\n+      setlocale(LC_ALL, _M_name_timepunct);\n+      strptime(__s, __format, __tm);\n #endif\n     }"}, {"sha": "64b0841294d2a3a3cbf68532099a425cf8141824", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 840, "deletions": 836, "changes": 1676, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86"}, {"sha": "0d2cc70377d395f497657fac61ba43a7fb32659f", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 239, "deletions": 86, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86", "patch": "@@ -168,7 +168,7 @@ namespace std\n       explicit \n       ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }\n \n-      static locale::id id;\n+      static locale::id \t\tid;\n \n    protected:\n       virtual \n@@ -569,7 +569,7 @@ namespace std\n       typedef _InIter  \t\t\titer_type;\n       typedef char_traits<_CharT> \t__traits_type;\n \n-      static locale::id id;\n+      static locale::id \t\tid;\n \n       explicit \n       num_get(size_t __refs = 0) : locale::facet(__refs) { }\n@@ -742,7 +742,7 @@ namespace std\n       typedef _CharT       char_type;\n       typedef _OutIter     iter_type;\n \n-      static locale::id id;\n+      static locale::id\t\tid;\n \n       explicit \n       num_put(size_t __refs = 0) : locale::facet(__refs) { }\n@@ -830,14 +830,14 @@ namespace std\n       typedef _CharT          \t\tchar_type;\n       typedef basic_string<_CharT> \tstring_type;\n \n-      static locale::id id;\n+      static locale::id \t\tid;\n \n     private:\n-      char_type \t_M_decimal_point;\n-      char_type \t_M_thousands_sep;\n-      string \t\t_M_grouping;\n-      string_type \t_M_truename;\n-      string_type \t_M_falsename;\n+      char_type \t\t\t_M_decimal_point;\n+      char_type \t\t\t_M_thousands_sep;\n+      string \t\t\t\t_M_grouping;\n+      string_type \t\t\t_M_truename;\n+      string_type \t\t\t_M_falsename;\n \n     public:\n       explicit \n@@ -900,12 +900,11 @@ namespace std\n   template<typename _CharT>\n     locale::id numpunct<_CharT>::id;\n \n+  // NB: Cannot be made generic. \n   template<typename _CharT>\n     void\n-    numpunct<_CharT>::_M_initialize_numpunct(__c_locale /*__cloc*/)\n-    { \n-      // NB: Cannot be made generic. \n-    }\n+    numpunct<_CharT>::_M_initialize_numpunct(__c_locale)\n+    { }\n \n   template<> \n     void\n@@ -957,7 +956,7 @@ namespace std\n       __c_locale\t\t\t_M_c_locale_collate;\n  \n     public:\n-      static locale::id id;\n+      static locale::id \t\tid;\n \n       explicit \n       collate(size_t __refs = 0)\n@@ -1064,134 +1063,285 @@ namespace std\n     {\n     public:\n       // Types:\n-      typedef _CharT          \t\tchar_type;\n-      typedef basic_string<_CharT> \tstring_type;\n+      typedef _CharT          \t\t__char_type;\n+      typedef basic_string<_CharT> \t__string_type;\n \n-      static locale::id id;\n+      static locale::id \t\tid;\n+\n+      // List of all known timezones, with GMT first.\n+      static const _CharT* \t\t_S_timezones[14];\n \n     protected:\n       __c_locale\t\t\t_M_c_locale_timepunct;\n-#if 1\n-      // Only needed if glibc < 2.3\n       const char*\t\t\t_M_name_timepunct;\n-#endif\n+      const _CharT* \t\t\t_M_date_format;\n+      const _CharT* \t\t\t_M_date_era_format;\n+      const _CharT* \t\t\t_M_time_format;\n+      const _CharT* \t\t\t_M_time_era_format;\n+      const _CharT* \t\t\t_M_am;\n+      const _CharT* \t\t\t_M_pm;\n+    \n+      // Day names, starting with \"C\"'s Sunday.\n+      const _CharT*  \t\t\t_M_day1;\n+      const _CharT*  \t\t\t_M_day2;\n+      const _CharT*  \t\t\t_M_day3;\n+      const _CharT*  \t\t\t_M_day4;\n+      const _CharT*  \t\t\t_M_day5;\n+      const _CharT*  \t\t\t_M_day6;\n+      const _CharT*  \t\t\t_M_day7;\n+\n+      // Abbreviated day names, starting with \"C\"'s Sun.\n+      const _CharT*  \t\t\t_M_day_a1;\n+      const _CharT*  \t\t\t_M_day_a2;\n+      const _CharT*  \t\t\t_M_day_a3;\n+      const _CharT*  \t\t\t_M_day_a4;\n+      const _CharT*  \t\t\t_M_day_a5;\n+      const _CharT*  \t\t\t_M_day_a6;\n+      const _CharT*  \t\t\t_M_day_a7;\n+\n+      // Month names, starting with \"C\"'s January.\n+      const _CharT*  \t\t\t_M_month01;\n+      const _CharT*  \t\t\t_M_month02;\n+      const _CharT*  \t\t\t_M_month03;\n+      const _CharT*  \t\t\t_M_month04;\n+      const _CharT*  \t\t\t_M_month05;\n+      const _CharT*  \t\t\t_M_month06;\n+      const _CharT*  \t\t\t_M_month07;\n+      const _CharT*  \t\t\t_M_month08;\n+      const _CharT*  \t\t\t_M_month09;\n+      const _CharT*  \t\t\t_M_month10;\n+      const _CharT*  \t\t\t_M_month11;\n+      const _CharT*  \t\t\t_M_month12;\n+\n+      // Abbreviated month names, starting with \"C\"'s Jan.\n+      const _CharT*  \t\t\t_M_month_a01;\n+      const _CharT*  \t\t\t_M_month_a02;\n+      const _CharT*  \t\t\t_M_month_a03;\n+      const _CharT*  \t\t\t_M_month_a04;\n+      const _CharT*  \t\t\t_M_month_a05;\n+      const _CharT*  \t\t\t_M_month_a06;\n+      const _CharT*  \t\t\t_M_month_a07;\n+      const _CharT*  \t\t\t_M_month_a08;\n+      const _CharT*  \t\t\t_M_month_a09;\n+      const _CharT*  \t\t\t_M_month_a10;\n+      const _CharT*  \t\t\t_M_month_a11;\n+      const _CharT*  \t\t\t_M_month_a12;\n \n     public:\n       explicit \n       __timepunct(size_t __refs = 0) \n-      : locale::facet(__refs), _M_c_locale_timepunct(NULL), \n-      _M_name_timepunct(\"C\")\n-      { \n-\t//\t_M_initialize_numpunct(); \n-      }\n+      : locale::facet(__refs), _M_name_timepunct(\"C\")\n+      { _M_initialize_timepunct(); }\n \n       explicit \n       __timepunct(__c_locale __cloc, const char* __s, size_t __refs = 0) \n-      : locale::facet(__refs)\n-      {\n-\t_M_name_timepunct = __s;\n-\tif (__cloc)\n-\t  _M_c_locale_timepunct = _S_clone_c_locale(__cloc); \n-      }\n+      : locale::facet(__refs), _M_name_timepunct(__s)\n+      { _M_initialize_timepunct(__cloc); }\n \n       void\n       _M_put_helper(char* __s, size_t __maxlen, const char* __format, \n \t\t    const tm* __tm) const;\n \n+      // Not used, at the moment. Likely to be strptime-ish.\n+      void\n+      _M_get_helper(const char* __s, const char* __format, tm* __tm) const;\n+\n+      const _CharT*\n+      _M_date_formats() const\n+      { return _M_date_format; }\n+\n+      const _CharT*\n+      _M_time_formats() const\n+      { return _M_time_format; }\n+\n+      void\n+      _M_days(const _CharT** __days) const\n+      { \n+\t__days[0] = _M_day1;\n+\t__days[1] = _M_day2;\n+\t__days[2] = _M_day3;\n+\t__days[3] = _M_day4;\n+\t__days[4] = _M_day5;\n+\t__days[5] = _M_day6;\n+\t__days[6] = _M_day7;\n+      }\n+\n+      void\n+      _M_days_abbreviated(const _CharT** __days) const\n+      { \n+\t__days[0] = _M_day_a1;\n+\t__days[1] = _M_day_a2;\n+\t__days[2] = _M_day_a3;\n+\t__days[3] = _M_day_a4;\n+\t__days[4] = _M_day_a5;\n+\t__days[5] = _M_day_a6;\n+\t__days[6] = _M_day_a7;\n+     }\n+\n+      void\n+      _M_months(const _CharT** __months) const\n+      { \n+\t__months[0] = _M_month01;\n+\t__months[1] = _M_month02;\n+\t__months[2] = _M_month03;\n+\t__months[3] = _M_month04;\n+\t__months[4] = _M_month05;\n+\t__months[5] = _M_month06;\n+\t__months[6] = _M_month07;\n+\t__months[7] = _M_month08;\n+\t__months[8] = _M_month09;\n+\t__months[9] = _M_month10;\n+\t__months[10] = _M_month11;\n+\t__months[11] = _M_month12;\n+      }\n+\n+      void\n+      _M_months_abbreviated(const _CharT** __months) const\n+      { \n+\t__months[0] = _M_month_a01;\n+\t__months[1] = _M_month_a02;\n+\t__months[2] = _M_month_a03;\n+\t__months[3] = _M_month_a04;\n+\t__months[4] = _M_month_a05;\n+\t__months[5] = _M_month_a06;\n+\t__months[6] = _M_month_a07;\n+\t__months[7] = _M_month_a08;\n+\t__months[8] = _M_month_a09;\n+\t__months[9] = _M_month_a10;\n+\t__months[10] = _M_month_a11;\n+\t__months[11] = _M_month_a12;\n+      }\n+\n     protected:\n       virtual \n       ~__timepunct()\n       {\n \tif (_M_c_locale_timepunct)\n \t  _S_destroy_c_locale(_M_c_locale_timepunct); \n       }\n+\n+      // For use at construction time only.\n+      void \n+      _M_initialize_timepunct(__c_locale __cloc = NULL);\n     };\n \n   template<typename _CharT>\n     locale::id __timepunct<_CharT>::id;\n \n+  template<> \n+    const char*\n+    __timepunct<char>::_S_timezones[14];\n+\n+  // Generic.\n+  template<typename _CharT>\n+    const _CharT* __timepunct<_CharT>::_S_timezones[14];\n+\n+  // NB: Cannot be made generic. \n+  template<typename _CharT>\n+    void\n+    __timepunct<_CharT>::_M_initialize_timepunct(__c_locale)\n+    { }\n+\n+  template<> \n+    void\n+    __timepunct<char>::_M_initialize_timepunct(__c_locale __cloc);\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<> \n+    const wchar_t*\n+    __timepunct<wchar_t>::_S_timezones[14];\n+\n+  template<> \n+    void\n+    __timepunct<wchar_t>::_M_initialize_timepunct(__c_locale __cloc);\n+#endif\n+\n   template<typename _CharT, typename _InIter>\n     class time_get : public locale::facet, public time_base\n     {\n     public:\n       // Types:\n-      typedef _CharT     char_type;\n-      typedef _InIter    iter_type;\n-\n-      static locale::id id;\n+      typedef _CharT     \t\tchar_type;\n+      typedef _InIter    \t\titer_type;\n+      typedef basic_string<_CharT> \t__string_type;\n \n-    protected:\n-      mutable basic_string<_CharT>* \t_M_daynames;\n-      mutable basic_string<_CharT>* \t_M_monthnames;\n+      static locale::id \t\tid;\n \n-    public:\n       explicit \n       time_get(size_t __refs = 0) \n-      : locale::facet (__refs), _M_daynames(0), _M_monthnames(0) { }\n+      : locale::facet (__refs) { }\n \n       dateorder \n       date_order()  const\n-      { return do_date_order(); }\n+      { return this->do_date_order(); }\n \n       iter_type \n-      get_time(iter_type __s, iter_type __end, ios_base& __io, \n-\t       ios_base::iostate& __err, tm* __t)  const\n-      { return do_get_time(__s, __end, __io, __err, __t); }\n+      get_time(iter_type __beg, iter_type __end, ios_base& __io, \n+\t       ios_base::iostate& __err, tm* __tm)  const\n+      { return this->do_get_time(__beg, __end, __io, __err, __tm); }\n \n       iter_type \n-      get_date(iter_type __s, iter_type __end, ios_base& __io,\n-\t       ios_base::iostate& __err, tm* __t)  const\n-      { return do_get_date(__s, __end, __io, __err, __t); }\n+      get_date(iter_type __beg, iter_type __end, ios_base& __io,\n+\t       ios_base::iostate& __err, tm* __tm)  const\n+      { return this->do_get_date(__beg, __end, __io, __err, __tm); }\n \n       iter_type \n-      get_weekday(iter_type __s, iter_type __end, ios_base& __io,\n-\t\t  ios_base::iostate& __err, tm* __t) const\n-      { return this->do_get_weekday(__s, __end, __io, __err, __t); }\n+      get_weekday(iter_type __beg, iter_type __end, ios_base& __io,\n+\t\t  ios_base::iostate& __err, tm* __tm) const\n+      { return this->do_get_weekday(__beg, __end, __io, __err, __tm); }\n \n       iter_type \n-      get_monthname(iter_type __s, iter_type __end, ios_base& __io, \n-\t\t    ios_base::iostate& __err, tm* __t) const\n-      { return this->do_get_monthname(__s, __end, __io, __err, __t); }\n+      get_monthname(iter_type __beg, iter_type __end, ios_base& __io, \n+\t\t    ios_base::iostate& __err, tm* __tm) const\n+      { return this->do_get_monthname(__beg, __end, __io, __err, __tm); }\n \n       iter_type \n-      get_year(iter_type __s, iter_type __end, ios_base& __io,\n-\t       ios_base::iostate& __err, tm* __t) const\n-      { return this->do_get_year(__s, __end, __io, __err, __t); }\n+      get_year(iter_type __beg, iter_type __end, ios_base& __io,\n+\t       ios_base::iostate& __err, tm* __tm) const\n+      { return this->do_get_year(__beg, __end, __io, __err, __tm); }\n \n     protected:\n       virtual \n-      ~time_get() \n-      {      \n-\tdelete [] _M_monthnames; \n-\tdelete [] _M_daynames; \n-      }\n+      ~time_get() { }\n \n       virtual dateorder \n-      do_date_order()  const\n-      { return time_base::ymd; }\n+      do_date_order() const;\n \n       virtual iter_type \n-      do_get_time(iter_type __s, iter_type /*__end*/, ios_base&,\n-\t\t  ios_base::iostate& /*__err*/, tm* /*__t*/) const\n-      { return __s; }\n+      do_get_time(iter_type __beg, iter_type __end, ios_base& __io,\n+\t\t  ios_base::iostate& __err, tm* __tm) const;\n \n       virtual iter_type \n-      do_get_date(iter_type __s, iter_type /*__end*/, ios_base&,\n-\t\t  ios_base::iostate& /*__err*/, tm* /*__t*/) const\n-      { return __s; }\n+      do_get_date(iter_type __beg, iter_type __end, ios_base& __io,\n+\t\t  ios_base::iostate& __err, tm* __tm) const;\n \n       virtual iter_type \n-      do_get_weekday(iter_type __s, iter_type __end, ios_base&,\n-\t\t     ios_base::iostate& __err, tm* __t) const;\n+      do_get_weekday(iter_type __beg, iter_type __end, ios_base&,\n+\t\t     ios_base::iostate& __err, tm* __tm) const;\n \n       virtual iter_type \n-      do_get_monthname(iter_type __s, iter_type __end, ios_base&, \n-\t\t       ios_base::iostate& __err, tm* __t) const;\n+      do_get_monthname(iter_type __beg, iter_type __end, ios_base&, \n+\t\t       ios_base::iostate& __err, tm* __tm) const;\n \n       virtual iter_type \n-      do_get_year(iter_type __s, iter_type /*__end*/, ios_base&,\n-\t\t   ios_base::iostate& /*__err*/, tm* /*__t*/) const\n-      { return __s; }\n+      do_get_year(iter_type __beg, iter_type __end, ios_base& __io,\n+\t\t  ios_base::iostate& __err, tm* __tm) const;\n+\n+      // Extract time component in the form of\n+      // [digitdigit][separator], with a maximum of two digits per\n+      // separator. Used by do_get_time.\n+      void\n+      _M_extract_time(iter_type& __beg, iter_type& __end, int& __member,\n+\t\t      int __min, int __max, const char_type __sep, \n+\t\t      bool __extract, const ctype<_CharT>& __ctype, \n+\t\t      ios_base::iostate& __err) const;\n+      \n+      // Extract day or month name, or any unique array of string\n+      // literals in a const _CharT* array.\n+      void\n+      _M_extract_name(iter_type& __beg, iter_type& __end, int& __member,\n+\t\t      const _CharT** __names, size_t __indexlen, \n+\t\t      ios_base::iostate& __err) const;\n     };\n \n   template<typename _CharT, typename _InIter>\n@@ -1201,12 +1351,14 @@ namespace std\n     class time_get_byname : public time_get<_CharT, _InIter>\n     {\n     public:\n-      typedef _CharT     char_type;\n-      typedef _InIter    iter_type;\n+      // Types:\n+      typedef _CharT     \t\tchar_type;\n+      typedef _InIter    \t\titer_type;\n \n       explicit \n       time_get_byname(const char*, size_t __refs = 0) \n       : time_get<_CharT, _InIter>(__refs) { }\n+\n     protected:\n       virtual \n       ~time_get_byname() { }\n@@ -1217,10 +1369,10 @@ namespace std\n     {\n     public:\n       // Types:\n-      typedef _CharT     char_type;\n-      typedef _OutIter   iter_type;\n+      typedef _CharT     \t\tchar_type;\n+      typedef _OutIter   \t\titer_type;\n \n-      static locale::id id;\n+      static locale::id \t     \tid;\n \n       explicit \n       time_put(size_t __refs = 0) \n@@ -1253,8 +1405,8 @@ namespace std\n     {\n     public:\n       // Types:\n-      typedef _CharT     char_type;\n-      typedef _OutIter   iter_type;\n+      typedef _CharT     \t\tchar_type;\n+      typedef _OutIter   \t\titer_type;\n \n       explicit \n       time_put_byname(const char* /*__s*/, size_t __refs = 0) \n@@ -1457,11 +1609,12 @@ namespace std\n     class money_get : public locale::facet\n     {\n     public:\n+      // Types:\n       typedef _CharT        \t\tchar_type;\n       typedef _InIter       \t\titer_type;\n       typedef basic_string<_CharT> \tstring_type;\n \n-      static locale::id id;\n+      static locale::id \t\tid;\n \n       explicit \n       money_get(size_t __refs = 0) : locale::facet(__refs) { }\n@@ -1500,7 +1653,7 @@ namespace std\n       typedef _OutIter            \titer_type;\n       typedef basic_string<_CharT>\tstring_type;\n \n-      static locale::id id;\n+      static locale::id \t\tid;\n \n       explicit \n       money_put(size_t __refs = 0) : locale::facet(__refs) { }\n@@ -1555,7 +1708,7 @@ namespace std\n #endif\n \n     public:\n-      static locale::id id;\n+      static locale::id \t\tid;\n \n       explicit \n       messages(size_t __refs = 0) "}, {"sha": "0f54fa0700d39e94969776a2b362d8d797c6503d", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 1462, "deletions": 1340, "changes": 2802, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86"}, {"sha": "71f3c1d2554bfe5970d594d4c6b04596cbaf5554", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86", "patch": "@@ -63,7 +63,7 @@ sources = \\\n \tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \\\n \tcomplex_io.cc functexcept.cc globals.cc ios.cc limits.cc \\\n \tlocale.cc locale-inst.cc localename.cc \\\n-\tcollate.cc messages.cc moneypunct.cc numpunct.cc \\\n+\tcollate.cc messages.cc moneypunct.cc numpunct.cc time.cc \\\n \tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \\\n \tvalarray-inst.cc wstring-inst.cc\n "}, {"sha": "ac40a911228870e085bf4887bf1ba3be6ea13d6c", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86", "patch": "@@ -189,7 +189,7 @@ sources = \\\n \tbasic_file.cc bitset.cc c++locale.cc cmath.cc codecvt.cc \\\n \tcomplex_io.cc functexcept.cc globals.cc ios.cc limits.cc \\\n \tlocale.cc locale-inst.cc localename.cc \\\n-\tcollate.cc messages.cc moneypunct.cc numpunct.cc \\\n+\tcollate.cc messages.cc moneypunct.cc numpunct.cc time.cc \\\n \tmisc-inst.cc stdexcept.cc stl-inst.cc string-inst.cc strstream.cc \\\n \tvalarray-inst.cc wstring-inst.cc\n \n@@ -271,7 +271,7 @@ LIBS = @LIBS@\n libstdc___la_OBJECTS =  basic_file.lo bitset.lo c++locale.lo cmath.lo \\\n codecvt.lo complex_io.lo functexcept.lo globals.lo ios.lo limits.lo \\\n locale.lo locale-inst.lo localename.lo collate.lo messages.lo \\\n-moneypunct.lo numpunct.lo misc-inst.lo stdexcept.lo stl-inst.lo \\\n+moneypunct.lo numpunct.lo time.lo misc-inst.lo stdexcept.lo stl-inst.lo \\\n string-inst.lo strstream.lo valarray-inst.lo wstring-inst.lo\n CXXFLAGS = @CXXFLAGS@\n CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)"}, {"sha": "ac072151f3f3fc1acae9ebbd98cb0aea9bcd079d", "filename": "libstdc++-v3/src/locale-inst.cc", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale-inst.cc?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86", "patch": "@@ -122,13 +122,9 @@ namespace std\n   // collate\n   template class collate<char>;\n   template class collate_byname<char>;\n-  template class _Weekdaynames<char, int>;\n-  template class _Monthnames<char, int>;\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template class collate<wchar_t>;\n   template class collate_byname<wchar_t>;\n-  template class _Weekdaynames<wchar_t, int>;\n-  template class _Monthnames<wchar_t, int>;\n #endif\n     \n   // use_facet\n@@ -243,30 +239,17 @@ namespace std\n \t\t   const vec_pfacet::value_type&);\n \n \n+  //\n+  // locale\n+  //\n   typedef istreambuf_iterator<char, char_traits<char> > istreambuf_iter;\n   typedef ostreambuf_iterator<char, char_traits<char> > ostreambuf_iter;\n \n-\n-  template \n-    istreambuf_iter \n-    __match_parallel<istreambuf_iter, char>\n-    (istreambuf_iter, istreambuf_iter, int, const string*, int*, int&, bool&);\n-\n-\n #ifdef _GLIBCPP_USE_WCHAR_T\n   typedef istreambuf_iterator<wchar_t,char_traits<wchar_t> > wistreambuf_iter;\n   typedef ostreambuf_iterator<wchar_t,char_traits<wchar_t> > wostreambuf_iter;\n-\n-  template \n-    wistreambuf_iter \n-    __match_parallel<wistreambuf_iter, wchar_t>\n-   (wistreambuf_iter, wistreambuf_iter, int, const wstring*, int*, int&, bool&);\n #endif\n \n-\n-  //\n-  // locale\n-  //\n   template \n     bool\n     locale::operator()(const string&, const string&) const;"}, {"sha": "02297d1d9ea430e94d98053de7161a410a38354e", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86", "patch": "@@ -434,6 +434,25 @@ namespace std\n   : ctype<char>(new mask[table_size], true, __refs)\n   { }\n \n+  // Definitions for static const data members of time_base\n+  template<> \n+    const char*\n+    __timepunct<char>::_S_timezones[14] =\n+    { \n+      \"GMT\", \"HST\", \"AKST\", \"PST\", \"MST\", \"CST\", \"EST\", \"AST\", \"NST\", \"CET\", \n+      \"IST\", \"EET\", \"CST\", \"JST\"  \n+    };\n+ \n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template<> \n+    const wchar_t*\n+    __timepunct<wchar_t>::_S_timezones[14] =\n+    { \n+      L\"GMT\", L\"HST\", L\"AKST\", L\"PST\", L\"MST\", L\"CST\", L\"EST\", L\"AST\", \n+      L\"NST\", L\"CET\", L\"IST\", L\"EET\", L\"CST\", L\"JST\"  \n+    };\n+#endif\n+\n   // Definitions for static const data members of money_base\n   const money_base::pattern \n   money_base::_S_default_pattern =  {{symbol, sign, none, value}};"}, {"sha": "701350b017e8fe2a619d51820f61b44447298826", "filename": "libstdc++-v3/testsuite/22_locale/time_get.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get.cc?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86", "patch": "@@ -0,0 +1,54 @@\n+// 2001-09-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.1  Template class time_get\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::time_get<char> test_type;\n+  typedef std::locale::facet base_type1;\n+  typedef std::time_base base_type2;\n+  const test_type& obj = std::use_facet<test_type>(std::locale()); \n+  const base_type1* base1 = &obj;\n+  const base_type2* base2 = &obj;\n+  \n+  // Check for required typedefs\n+  typedef test_type::char_type char_type;\n+  typedef test_type::iter_type iter_type;\n+}\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_time_get: public std::time_get<unsigned char> \n+{ };\n+\n+void test02()\n+{ \n+  gnu_time_get facet01;\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "7af11b1d6bc61a8dd873d273c4ac81749cda07e3", "filename": "libstdc++-v3/testsuite/22_locale/time_get_members_char.cc", "status": "added", "additions": 491, "deletions": 0, "changes": 491, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86", "patch": "@@ -0,0 +1,491 @@\n+// 2001-09-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// XXX This test is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef time_base::dateorder dateorder;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_hk != loc_c );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<char>& time_c = use_facet<__timepunct<char> >(loc_c); \n+  const __timepunct<char>& time_de = use_facet<__timepunct<char> >(loc_de); \n+  const __timepunct<char>& time_hk = use_facet<__timepunct<char> >(loc_hk); \n+  const __timepunct<char>& time_fr = use_facet<__timepunct<char> >(loc_fr); \n+\n+  const string empty;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  istringstream iss;\n+  const time_get<char>& tim_get = use_facet<time_get<char> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // create \"C\" time objects\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n+  const char* all = \"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n+                    \"%w %W %x %X %y %Y %Z %%\";\n+  const char* date = \"%A, the second of %B\";\n+  const char* date_ex = \"%Ex\";\n+\n+  // 1\n+  // dateorder date_order() const\n+  iss.imbue(loc_c);\n+  dateorder do1 = tim_get.date_order();\n+  //  VERIFY( do1 == time_base::mdy );\n+  VERIFY( do1 == time_base::no_order );\n+\n+  // 2\n+  // iter_type \n+  // get_time(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const\n+\n+  // sanity checks for \"C\" locale\n+  iss.str(\"12:00:00\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+  tim_get.get_time(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_sec == time_bday.tm_sec );\n+  VERIFY( time01.tm_min == time_bday.tm_min );\n+  VERIFY( time01.tm_hour == time_bday.tm_hour );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(\"12:00:00 \");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  errorstate = good;\n+  tim_get.get_time(is_it02, end, iss, errorstate, &time02);\n+  VERIFY( time01.tm_sec == time_bday.tm_sec );\n+  VERIFY( time01.tm_min == time_bday.tm_min );\n+  VERIFY( time01.tm_hour == time_bday.tm_hour );\n+  VERIFY( errorstate == good );\n+\n+  iss.str(\"12:61:00 \");\n+  iterator_type is_it03(iss);\n+  tm time03;\n+  errorstate = good;\n+  tim_get.get_time(is_it03, end, iss, errorstate, &time03);\n+  VERIFY( time01.tm_hour == time_bday.tm_hour );\n+  VERIFY( errorstate == ios_base::failbit );\n+\n+  iss.str(\"12:a:00 \");\n+  iterator_type is_it04(iss);\n+  tm time04;\n+  errorstate = good;\n+  tim_get.get_time(is_it04, end, iss, errorstate, &time04);\n+  VERIFY( time01.tm_hour == time_bday.tm_hour );\n+  VERIFY( *is_it04 == 'a');\n+  VERIFY( errorstate == ios_base::failbit );\n+\n+  // inspection of named locales, de_DE\n+  iss.imbue(loc_de);\n+  iss.str(\"12:00:00\");\n+  iterator_type is_it10(iss);\n+  tm time10;\n+  errorstate = good;\n+  tim_get.get_time(is_it10, end, iss, errorstate, &time10);\n+  VERIFY( time10.tm_sec == time_bday.tm_sec );\n+  VERIFY( time10.tm_min == time_bday.tm_min );\n+  VERIFY( time10.tm_hour == time_bday.tm_hour );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  // inspection of named locales, en_HK\n+  iss.imbue(loc_hk);\n+  iss.str(\"12:00:00 PST\"); \n+  // Hong Kong in California! Well, they have Paris in Vegas... this\n+  // is all a little disney-esque anyway. Besides, you can get decent\n+  // Dim Sum in San Francisco.\n+  iterator_type is_it20(iss);\n+  tm time20;\n+  errorstate = good;\n+  tim_get.get_time(is_it20, end, iss, errorstate, &time20);\n+  VERIFY( time10.tm_sec == time_bday.tm_sec );\n+  VERIFY( time10.tm_min == time_bday.tm_min );\n+  VERIFY( time10.tm_hour == time_bday.tm_hour );\n+  VERIFY( errorstate == ios_base::eofbit );\n+}\n+\n+void test02()\n+{\n+  using namespace std;\n+  typedef time_base::dateorder dateorder;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_hk != loc_c );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<char>& time_c = use_facet<__timepunct<char> >(loc_c); \n+  const __timepunct<char>& time_de = use_facet<__timepunct<char> >(loc_de); \n+  const __timepunct<char>& time_hk = use_facet<__timepunct<char> >(loc_hk); \n+  const __timepunct<char>& time_fr = use_facet<__timepunct<char> >(loc_fr); \n+\n+  const string empty;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  istringstream iss;\n+  const time_get<char>& tim_get = use_facet<time_get<char> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // create \"C\" time objects\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n+  const char* all = \"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n+                    \"%w %W %x %X %y %Y %Z %%\";\n+  const char* date = \"%A, the second of %B\";\n+  const char* date_ex = \"%Ex\";\n+\n+  // iter_type \n+  // get_weekday(iter_type, iter_type, ios_base&, \n+  //             ios_base::iostate&, tm*) const\n+\n+  // sanity checks for \"C\" locale\n+  iss.str(\"Sunday\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_wday == time_bday.tm_wday );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(\"Sun\");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it02, end, iss, errorstate, &time02);\n+  VERIFY( time02.tm_wday == time_bday.tm_wday );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(\"Sun \");\n+  iterator_type is_it03(iss);\n+  tm time03;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it03, end, iss, errorstate, &time03);\n+  VERIFY( time03.tm_wday == time_bday.tm_wday );\n+  VERIFY( errorstate == good );\n+  VERIFY( *is_it03 == ' ');\n+\n+  iss.str(\"San\");\n+  iterator_type is_it04(iss);\n+  tm time04;\n+  time04.tm_wday = 4;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it04, end, iss, errorstate, &time04);\n+  VERIFY( time04.tm_wday == 4 );\n+  VERIFY( *is_it04 == 'n');\n+  VERIFY( errorstate == ios_base::failbit );\n+\n+  iss.str(\"Tuesday \");\n+  iterator_type is_it05(iss);\n+  tm time05;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it05, end, iss, errorstate, &time05);\n+  VERIFY( time05.tm_wday == 2 );\n+  VERIFY( errorstate == good );\n+  VERIFY( *is_it05 == ' ');\n+\n+  iss.str(\"Tuesducky \"); // Kind of like Fryday, without the swirls.\n+  iterator_type is_it06(iss);\n+  tm time06;\n+  time06.tm_wday = 4;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it06, end, iss, errorstate, &time06);\n+  VERIFY( time06.tm_wday == 4 );\n+  VERIFY( errorstate == ios_base::failbit );\n+  VERIFY( *is_it05 == 'u');\n+\n+  // inspection of named locales, de_DE\n+  iss.imbue(loc_de);\n+  iss.str(\"Sonntag\");\n+  iterator_type is_it10(iss);\n+  tm time10;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it10, end, iss, errorstate, &time10);\n+  VERIFY( time10.tm_wday == time_bday.tm_wday );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  // inspection of named locales, en_HK\n+  iss.imbue(loc_hk);\n+  iss.str(\"Sunday\"); \n+  iterator_type is_it20(iss);\n+  tm time20;\n+  errorstate = good;\n+  tim_get.get_weekday(is_it20, end, iss, errorstate, &time20);\n+  VERIFY( time20.tm_wday == time_bday.tm_wday );\n+  VERIFY( errorstate == ios_base::eofbit );\n+}\n+\n+void test03()\n+{\n+  using namespace std;\n+  typedef time_base::dateorder dateorder;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_hk != loc_c );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<char>& time_c = use_facet<__timepunct<char> >(loc_c); \n+  const __timepunct<char>& time_de = use_facet<__timepunct<char> >(loc_de); \n+  const __timepunct<char>& time_hk = use_facet<__timepunct<char> >(loc_hk); \n+  const __timepunct<char>& time_fr = use_facet<__timepunct<char> >(loc_fr); \n+\n+  const string empty;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  istringstream iss;\n+  const time_get<char>& tim_get = use_facet<time_get<char> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // create \"C\" time objects\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n+  const char* all = \"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n+                    \"%w %W %x %X %y %Y %Z %%\";\n+  const char* date = \"%A, the second of %B\";\n+  const char* date_ex = \"%Ex\";\n+\n+  // iter_type \n+  // get_monthname(iter_type, iter_type, ios_base&, \n+  //               ios_base::iostate&, tm*) const\n+\n+  // sanity checks for \"C\" locale\n+  iss.str(\"April\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_wday == time_bday.tm_wday );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(\"Apr\");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it02, end, iss, errorstate, &time02);\n+  VERIFY( time02.tm_mon == time_bday.tm_mon );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(\"Apr \");\n+  iterator_type is_it03(iss);\n+  tm time03;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it03, end, iss, errorstate, &time03);\n+  VERIFY( time03.tm_mon == time_bday.tm_mon );\n+  VERIFY( errorstate == good );\n+  VERIFY( *is_it03 == ' ');\n+\n+  iss.str(\"Aar\");\n+  iterator_type is_it04(iss);\n+  tm time04;\n+  time04.tm_mon = 5;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it04, end, iss, errorstate, &time04);\n+  VERIFY( time04.tm_mon == 5 );\n+  VERIFY( *is_it04 == 'a');\n+  VERIFY( errorstate == ios_base::failbit );\n+\n+  iss.str(\"December \");\n+  iterator_type is_it05(iss);\n+  tm time05;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it05, end, iss, errorstate, &time05);\n+  VERIFY( time05.tm_mon == 11 );\n+  VERIFY( errorstate == good );\n+  VERIFY( *is_it05 == ' ');\n+\n+  iss.str(\"Decelember \"); \n+  iterator_type is_it06(iss);\n+  tm time06;\n+  time06.tm_mon = 4;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it06, end, iss, errorstate, &time06);\n+  VERIFY( time06.tm_mon == 4 );\n+  VERIFY( errorstate == ios_base::failbit );\n+  VERIFY( *is_it05 == 'l');\n+\n+  // inspection of named locales, de_DE\n+  iss.imbue(loc_de);\n+  iss.str(\"April\");\n+  iterator_type is_it10(iss);\n+  tm time10;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it10, end, iss, errorstate, &time10);\n+  VERIFY( time10.tm_mon == time_bday.tm_mon );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  // inspection of named locales, en_HK\n+  iss.imbue(loc_hk);\n+  iss.str(\"April\"); \n+  iterator_type is_it20(iss);\n+  tm time20;\n+  errorstate = good;\n+  tim_get.get_monthname(is_it20, end, iss, errorstate, &time20);\n+  VERIFY( time20.tm_mon == time_bday.tm_mon );\n+  VERIFY( errorstate == ios_base::eofbit );\n+}\n+\n+void test04()\n+{\n+  using namespace std;\n+  typedef time_base::dateorder dateorder;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_hk != loc_c );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<char>& time_c = use_facet<__timepunct<char> >(loc_c); \n+  const __timepunct<char>& time_de = use_facet<__timepunct<char> >(loc_de); \n+  const __timepunct<char>& time_hk = use_facet<__timepunct<char> >(loc_hk); \n+  const __timepunct<char>& time_fr = use_facet<__timepunct<char> >(loc_fr); \n+\n+  const string empty;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  istringstream iss;\n+  const time_get<char>& tim_get = use_facet<time_get<char> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // create \"C\" time objects\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n+  const char* all = \"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n+                    \"%w %W %x %X %y %Y %Z %%\";\n+  const char* date = \"%A, the second of %B\";\n+  const char* date_ex = \"%Ex\";\n+\n+  // iter_type \n+  // get_year(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const\n+\n+  // sanity checks for \"C\" locale\n+  iss.str(\"1971\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+  tim_get.get_year(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_year == time_bday.tm_year );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(\"1971 \");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  errorstate = good;\n+  tim_get.get_year(is_it02, end, iss, errorstate, &time02);\n+  VERIFY( time02.tm_year == time_bday.tm_year );\n+  VERIFY( errorstate == good );\n+  VERIFY( *is_it02 == ' ');\n+\n+  iss.str(\"197d1 \");\n+  iterator_type is_it03(iss);\n+  tm time03;\n+  time03.tm_year = 3;\n+  errorstate = good;\n+  tim_get.get_year(is_it03, end, iss, errorstate, &time03);\n+  VERIFY( time03.tm_year == 3 );\n+  VERIFY( errorstate == ios_base::failbit );\n+  VERIFY( *is_it03 == 'd');\n+\n+  iss.str(\"71d71\");\n+  iterator_type is_it04(iss);\n+  tm time04;\n+  errorstate = good;\n+  tim_get.get_year(is_it04, end, iss, errorstate, &time04);\n+  VERIFY( time04.tm_year == time_bday.tm_year );\n+  VERIFY( errorstate == good );\n+  VERIFY( *is_it03 == 'd');\n+\n+  iss.str(\"71\");\n+  iterator_type is_it05(iss);\n+  tm time05;\n+  errorstate = good;\n+  tim_get.get_year(is_it05, end, iss, errorstate, &time05);\n+  VERIFY( time05.tm_year == time_bday.tm_year );\n+  VERIFY( errorstate == ios_base::eofbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  return 0;\n+}"}, {"sha": "c751cbd3984d85384721d9a5c900cef922d546ee", "filename": "libstdc++-v3/testsuite/22_locale/time_put_members_char.cc", "status": "modified", "additions": 60, "deletions": 6, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ab656771ad71a14ccc39b3f38efd54a83473a86/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put_members_char.cc?ref=1ab656771ad71a14ccc39b3f38efd54a83473a86", "patch": "@@ -24,7 +24,9 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-// test string version\n+// XXX This test is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n void test01()\n {\n   using namespace std;\n@@ -42,11 +44,11 @@ void test01()\n   VERIFY( loc_hk != loc_de );\n   VERIFY( loc_de != loc_fr );\n \n-  // cache the moneypunct facets, for quicker gdb inspection\n-  const time_put<char>& timp_c = use_facet<time_put<char> >(loc_c); \n-  const time_put<char>& timp_de = use_facet<time_put<char> >(loc_de); \n-  const time_put<char>& timp_hk = use_facet<time_put<char> >(loc_hk); \n-  const time_put<char>& timp_fr = use_facet<time_put<char> >(loc_fr); \n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<char>& time_c = use_facet<__timepunct<char> >(loc_c); \n+  const __timepunct<char>& time_de = use_facet<__timepunct<char> >(loc_de); \n+  const __timepunct<char>& time_hk = use_facet<__timepunct<char> >(loc_hk); \n+  const __timepunct<char>& time_fr = use_facet<__timepunct<char> >(loc_fr); \n \n   // create an ostream-derived object, cache the time_put facet\n   const string empty;\n@@ -70,24 +72,76 @@ void test01()\n   string result1 = oss.str();\n   VERIFY( result1 == \"Sun\" );\n \n+  oss.str(empty);\n+  iterator_type os_it21 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x');\n+  string result21 = oss.str(); // \"04/04/71\"\n+  oss.str(empty);\n+  iterator_type os_it22 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X');\n+  string result22 = oss.str(); // \"12:00:00\"\n+  oss.str(empty);\n+  iterator_type os_it31 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x', 'E');\n+  string result31 = oss.str(); // \"04/04/71\"\n+  oss.str(empty);\n+  iterator_type os_it32 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X', 'E');\n+  string result32 = oss.str(); // \"12:00:00\"\n+\n   oss.str(empty);\n   oss.imbue(loc_de);\n   iterator_type os_it02 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'a');\n   string result2 = oss.str();\n   VERIFY( result2 == \"Son\" );\n \n+  oss.str(empty); // \"%d.%m.%Y\"\n+  iterator_type os_it23 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x');\n+  string result23 = oss.str(); // \"04.04.1971\"\n+  oss.str(empty); // \"%T\"\n+  iterator_type os_it24 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X');\n+  string result24 = oss.str(); // \"12:00:00\"\n+  oss.str(empty);\n+  iterator_type os_it33 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x', 'E');\n+  string result33 = oss.str(); // \"04.04.1971\"\n+  oss.str(empty);\n+  iterator_type os_it34 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X', 'E');\n+  string result34 = oss.str(); // \"12:00:00\"\n+\n   oss.str(empty);\n   oss.imbue(loc_hk);\n   iterator_type os_it03 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'a');\n   string result3 = oss.str();\n   VERIFY( result3 == \"Sun\" );\n \n+  oss.str(empty); // \"%A, %B %d, %Y\"\n+  iterator_type os_it25 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x');\n+  string result25 = oss.str(); // \"Sunday, April 04, 1971\"\n+  oss.str(empty); // \"%I:%M:%S %Z\"\n+  iterator_type os_it26 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X');\n+  string result26 = oss.str(); // \"12:00:00 PST\"\n+  oss.str(empty);\n+  iterator_type os_it35 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x', 'E');\n+  string result35 = oss.str(); // \"Sunday, April 04, 1971\"\n+  oss.str(empty);\n+  iterator_type os_it36 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X', 'E');\n+  string result36 = oss.str(); // \"12:00:00 PST\"\n+\n   oss.str(empty);\n   oss.imbue(loc_fr);\n   iterator_type os_it04 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'a');\n   string result4 = oss.str();\n   VERIFY( result4 == \"dim\" );\n \n+  oss.str(empty); // \"%d.%m.%Y\"\n+  iterator_type os_it27 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x');\n+  string result27 = oss.str(); // \"04.04.1971\"\n+  oss.str(empty); // \"%T\"\n+  iterator_type os_it28 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X');\n+  string result28 = oss.str(); // \"12:00:00\"\n+  oss.str(empty);\n+  iterator_type os_it37 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'x', 'E');\n+  string result37 = oss.str(); // \"04.04.1971\"\n+  oss.str(empty);\n+  iterator_type os_it38 = tim_put.put(oss.rdbuf(), oss, '*', &time1, 'X', 'E');\n+  string result38 = oss.str(); // \"12:00:00\"\n+\n   // 2\n   oss.str(empty);\n   oss.imbue(loc_c);"}]}