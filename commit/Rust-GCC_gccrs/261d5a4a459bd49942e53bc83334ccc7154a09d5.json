{"sha": "261d5a4a459bd49942e53bc83334ccc7154a09d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYxZDVhNGE0NTliZDQ5OTQyZTUzYmM4MzMzNGNjYzcxNTRhMDlkNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-22T13:48:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-27T11:04:18Z"}, "message": "libstdc++: Reduce header dependencies on <array> and <utility>\n\nThis refactoring reduces the memory usage and compilation time to parse\na number of headers that depend on std::pair, std::tuple or std::array.\nPreviously the headers for these class templates were all intertwined,\ndue to the common dependency on std::tuple_size, std::tuple_element and\ntheir std::get overloads. This decouples the headers by moving some\nparts of <utility> into a new <bits/utility.h> header. This means that\n<array> and <tuple> no longer need to include the whole of <utility>,\nand <tuple> no longer needs to include <array>.\n\nThis decoupling benefits headers such as <thread> and <scoped_allocator>\nwhich only need std::tuple, and so no longer have to parse std::array.\n\nSome other headers such as <any>, <optional> and <variant> no longer\nneed to include <utility> just for the std::in_place tag types, so\ndo not have to parse the std::pair definitions.\n\nRemoving direct uses of <utility> also means that the std::rel_ops\nnamespace is not transitively declared by other headers.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/Makefile.am: Add bits/utility.h header.\n\t* include/Makefile.in: Regenerate.\n\t* include/bits/utility.h: New file.\n\t* include/std/utility (tuple_size, tuple_element): Move\n\tto new header.\n\t* include/std/type_traits (__is_tuple_like_impl<tuple<T...>>):\n\tMove to <tuple>.\n\t(_Index_tuple, _Build_index_tuple, integer_sequence): Likewise.\n\t(in_place_t, in_place_index_t, in_place_type_t): Likewise.\n\t* include/bits/ranges_util.h: Include new header instead of\n\t<utility>.\n\t* include/bits/stl_pair.h (tuple_size, tuple_element): Move\n\tpartial specializations for std::pair here.\n\t(get): Move overloads for std::pair here.\n\t* include/std/any: Include new header instead of <utility>.\n\t* include/std/array: Likewise.\n\t* include/std/memory_resource: Likewise.\n\t* include/std/optional: Likewise.\n\t* include/std/variant: Likewise.\n\t* include/std/tuple: Likewise.\n\t(__is_tuple_like_impl<tuple<T...>>): Move here.\n\t(get) Declare overloads for std::array.\n\t* include/std/version (__cpp_lib_tuples_by_type): Change type\n\tto long.\n\t* testsuite/20_util/optional/84601.cc: Include <utility>.\n\t* testsuite/20_util/specialized_algorithms/uninitialized_fill/constrained.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/tuple_interface/get_neg.cc:\n\tAdjust dg-error line numbers.\n\t* testsuite/std/ranges/access/cbegin.cc: Include <utility>.\n\t* testsuite/std/ranges/access/cend.cc: Likewise.\n\t* testsuite/std/ranges/access/end.cc: Likewise.\n\t* testsuite/std/ranges/single_view.cc: Likewise.", "tree": {"sha": "dab5b16472ae1f39f8fc6b508b67333dd7c11c16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dab5b16472ae1f39f8fc6b508b67333dd7c11c16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/261d5a4a459bd49942e53bc83334ccc7154a09d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261d5a4a459bd49942e53bc83334ccc7154a09d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261d5a4a459bd49942e53bc83334ccc7154a09d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261d5a4a459bd49942e53bc83334ccc7154a09d5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcc7c6369f7fbf293f502d3d207a90b76cc2c62f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc7c6369f7fbf293f502d3d207a90b76cc2c62f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcc7c6369f7fbf293f502d3d207a90b76cc2c62f"}], "stats": {"total": 777, "additions": 433, "deletions": 344}, "files": [{"sha": "99eec558116b107e88a7c736cf7aad0c0df04a39", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -233,6 +233,7 @@ bits_headers = \\\n \t${bits_srcdir}/unordered_set.h \\\n \t${bits_srcdir}/uses_allocator.h \\\n \t${bits_srcdir}/uses_allocator_args.h \\\n+\t${bits_srcdir}/utility.h \\\n \t${bits_srcdir}/valarray_array.h \\\n \t${bits_srcdir}/valarray_array.tcc \\\n \t${bits_srcdir}/valarray_before.h \\"}, {"sha": "7e668b86bbb82b0cf10cc557d403607d65cddb30", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -583,6 +583,7 @@ bits_headers = \\\n \t${bits_srcdir}/unordered_set.h \\\n \t${bits_srcdir}/uses_allocator.h \\\n \t${bits_srcdir}/uses_allocator_args.h \\\n+\t${bits_srcdir}/utility.h \\\n \t${bits_srcdir}/valarray_array.h \\\n \t${bits_srcdir}/valarray_array.tcc \\\n \t${bits_srcdir}/valarray_before.h \\"}, {"sha": "0ca203dd4b0cbefc770561aba57c4fceeeaf5a9f", "filename": "libstdc++-v3/include/bits/ranges_util.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_util.h?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -32,6 +32,7 @@\n \n #if __cplusplus > 201703L\n # include <bits/ranges_base.h>\n+# include <bits/utility.h>\n \n #ifdef __cpp_lib_ranges\n namespace std _GLIBCXX_VISIBILITY(default)"}, {"sha": "329485ce3b29fbde9552ce254bb2901ca7185dca", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 151, "deletions": 4, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -56,12 +56,12 @@\n #ifndef _STL_PAIR_H\n #define _STL_PAIR_H 1\n \n-#include <bits/move.h> // for std::move / std::forward, and std::swap\n-\n #if __cplusplus >= 201103L\n-# include <type_traits> // for std::__decay_and_strip, std::is_reference_v\n+# include <type_traits>    // for std::__decay_and_strip\n+# include <bits/move.h>    // for std::move / std::forward, and std::swap\n+# include <bits/utility.h> // for std::tuple_element, std::tuple_size\n #endif\n-#if __cplusplus > 201703L\n+#if __cplusplus >= 202002L\n # include <compare>\n # define __cpp_lib_constexpr_utility 201811L\n #endif\n@@ -752,6 +752,153 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @}\n \n+#if __cplusplus >= 201103L\n+  // Various functions which give std::pair a tuple-like interface.\n+\n+  template<typename _T1, typename _T2>\n+    struct __is_tuple_like_impl<pair<_T1, _T2>> : true_type\n+    { };\n+\n+  /// Partial specialization for std::pair\n+  template<class _Tp1, class _Tp2>\n+    struct tuple_size<pair<_Tp1, _Tp2>>\n+    : public integral_constant<size_t, 2> { };\n+\n+  /// Partial specialization for std::pair\n+  template<class _Tp1, class _Tp2>\n+    struct tuple_element<0, pair<_Tp1, _Tp2>>\n+    { typedef _Tp1 type; };\n+\n+  /// Partial specialization for std::pair\n+  template<class _Tp1, class _Tp2>\n+    struct tuple_element<1, pair<_Tp1, _Tp2>>\n+    { typedef _Tp2 type; };\n+\n+  /// @cond undocumented\n+  template<size_t _Int>\n+    struct __pair_get;\n+\n+  template<>\n+    struct __pair_get<0>\n+    {\n+      template<typename _Tp1, typename _Tp2>\n+\tstatic constexpr _Tp1&\n+\t__get(pair<_Tp1, _Tp2>& __pair) noexcept\n+\t{ return __pair.first; }\n+\n+      template<typename _Tp1, typename _Tp2>\n+\tstatic constexpr _Tp1&&\n+\t__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept\n+\t{ return std::forward<_Tp1>(__pair.first); }\n+\n+      template<typename _Tp1, typename _Tp2>\n+\tstatic constexpr const _Tp1&\n+\t__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept\n+\t{ return __pair.first; }\n+\n+      template<typename _Tp1, typename _Tp2>\n+\tstatic constexpr const _Tp1&&\n+\t__const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept\n+\t{ return std::forward<const _Tp1>(__pair.first); }\n+    };\n+\n+  template<>\n+    struct __pair_get<1>\n+    {\n+      template<typename _Tp1, typename _Tp2>\n+\tstatic constexpr _Tp2&\n+\t__get(pair<_Tp1, _Tp2>& __pair) noexcept\n+\t{ return __pair.second; }\n+\n+      template<typename _Tp1, typename _Tp2>\n+\tstatic constexpr _Tp2&&\n+\t__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept\n+\t{ return std::forward<_Tp2>(__pair.second); }\n+\n+      template<typename _Tp1, typename _Tp2>\n+\tstatic constexpr const _Tp2&\n+\t__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept\n+\t{ return __pair.second; }\n+\n+      template<typename _Tp1, typename _Tp2>\n+\tstatic constexpr const _Tp2&&\n+\t__const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept\n+\t{ return std::forward<const _Tp2>(__pair.second); }\n+    };\n+  /// @endcond\n+\n+  /** @{\n+   * std::get overloads for accessing members of std::pair\n+   */\n+\n+  template<size_t _Int, class _Tp1, class _Tp2>\n+    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&\n+    get(pair<_Tp1, _Tp2>& __in) noexcept\n+    { return __pair_get<_Int>::__get(__in); }\n+\n+  template<size_t _Int, class _Tp1, class _Tp2>\n+    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&\n+    get(pair<_Tp1, _Tp2>&& __in) noexcept\n+    { return __pair_get<_Int>::__move_get(std::move(__in)); }\n+\n+  template<size_t _Int, class _Tp1, class _Tp2>\n+    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&\n+    get(const pair<_Tp1, _Tp2>& __in) noexcept\n+    { return __pair_get<_Int>::__const_get(__in); }\n+\n+  template<size_t _Int, class _Tp1, class _Tp2>\n+    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&\n+    get(const pair<_Tp1, _Tp2>&& __in) noexcept\n+    { return __pair_get<_Int>::__const_move_get(std::move(__in)); }\n+\n+#if __cplusplus >= 201402L\n+\n+#define __cpp_lib_tuples_by_type 201304L\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr _Tp&\n+    get(pair<_Tp, _Up>& __p) noexcept\n+    { return __p.first; }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr const _Tp&\n+    get(const pair<_Tp, _Up>& __p) noexcept\n+    { return __p.first; }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr _Tp&&\n+    get(pair<_Tp, _Up>&& __p) noexcept\n+    { return std::move(__p.first); }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr const _Tp&&\n+    get(const pair<_Tp, _Up>&& __p) noexcept\n+    { return std::move(__p.first); }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr _Tp&\n+    get(pair<_Up, _Tp>& __p) noexcept\n+    { return __p.second; }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr const _Tp&\n+    get(const pair<_Up, _Tp>& __p) noexcept\n+    { return __p.second; }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr _Tp&&\n+    get(pair<_Up, _Tp>&& __p) noexcept\n+    { return std::move(__p.second); }\n+\n+  template <typename _Tp, typename _Up>\n+    constexpr const _Tp&&\n+    get(const pair<_Up, _Tp>&& __p) noexcept\n+    { return std::move(__p.second); }\n+\n+#endif // C++14\n+  /// @}\n+#endif // C++11\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "96d350874d9287df2c2b1d50a1fd1ff06dffb604", "filename": "libstdc++-v3/include/bits/utility.h", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Futility.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Futility.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Futility.h?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -0,0 +1,205 @@\n+// Utilities used throughout the library -*- C++ -*-\n+\n+// Copyright (C) 2004-2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file include/bits/utility.h\n+ *  This is an internal header file, included by other library headers.\n+ *  Do not attempt to use it directly. @headername{utility}\n+ *\n+ *  This file contains the parts of `<utility>` needed by other headers,\n+ *  so they don't need to include the whole of `<utility>`.\n+ */\n+\n+#ifndef _GLIBCXX_UTILITY_H\n+#define _GLIBCXX_UTILITY_H 1\n+\n+#pragma GCC system_header\n+\n+#if __cplusplus >= 201103L\n+\n+#include <type_traits>\n+#include <bits/move.h>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  /// Finds the size of a given tuple type.\n+  template<typename _Tp>\n+    struct tuple_size;\n+\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 2313. tuple_size should always derive from integral_constant<size_t, N>\n+  // 2770. tuple_size<const T> specialization is not SFINAE compatible\n+\n+  template<typename _Tp,\n+\t   typename _Up = typename remove_cv<_Tp>::type,\n+\t   typename = typename enable_if<is_same<_Tp, _Up>::value>::type,\n+\t   size_t = tuple_size<_Tp>::value>\n+    using __enable_if_has_tuple_size = _Tp;\n+\n+  template<typename _Tp>\n+    struct tuple_size<const __enable_if_has_tuple_size<_Tp>>\n+    : public tuple_size<_Tp> { };\n+\n+  template<typename _Tp>\n+    struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>\n+    : public tuple_size<_Tp> { };\n+\n+  template<typename _Tp>\n+    struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>\n+    : public tuple_size<_Tp> { };\n+\n+  /// Gives the type of the ith element of a given tuple type.\n+  template<size_t __i, typename _Tp>\n+    struct tuple_element;\n+\n+  // Duplicate of C++14's tuple_element_t for internal use in C++11 mode\n+  template<size_t __i, typename _Tp>\n+    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;\n+\n+  template<size_t __i, typename _Tp>\n+    struct tuple_element<__i, const _Tp>\n+    {\n+      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;\n+    };\n+\n+  template<size_t __i, typename _Tp>\n+    struct tuple_element<__i, volatile _Tp>\n+    {\n+      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;\n+    };\n+\n+  template<size_t __i, typename _Tp>\n+    struct tuple_element<__i, const volatile _Tp>\n+    {\n+      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;\n+    };\n+\n+#if __cplusplus >= 201402L\n+// The standard says this macro and alias template should be in <tuple>\n+// but we define them here, to be available in <utility> and <array> too.\n+#define __cpp_lib_tuple_element_t 201402L\n+\n+  template<size_t __i, typename _Tp>\n+    using tuple_element_t = typename tuple_element<__i, _Tp>::type;\n+#endif // C++14\n+\n+  // Stores a tuple of indices.  Used by tuple and pair, and by bind() to\n+  // extract the elements in a tuple.\n+  template<size_t... _Indexes> struct _Index_tuple { };\n+\n+  // Builds an _Index_tuple<0, 1, 2, ..., _Num-1>.\n+  template<size_t _Num>\n+    struct _Build_index_tuple\n+    {\n+#if __has_builtin(__make_integer_seq)\n+      template<typename, size_t... _Indices>\n+\tusing _IdxTuple = _Index_tuple<_Indices...>;\n+\n+      // Clang defines __make_integer_seq for this purpose.\n+      using __type = __make_integer_seq<_IdxTuple, size_t, _Num>;\n+#else\n+      // For GCC and other compilers, use __integer_pack instead.\n+      using __type = _Index_tuple<__integer_pack(_Num)...>;\n+#endif\n+    };\n+\n+#if __cplusplus >= 201402L\n+\n+#define __cpp_lib_integer_sequence 201304L\n+\n+  /// Class template integer_sequence\n+  template<typename _Tp, _Tp... _Idx>\n+    struct integer_sequence\n+    {\n+      typedef _Tp value_type;\n+      static constexpr size_t size() noexcept { return sizeof...(_Idx); }\n+    };\n+\n+  /// Alias template make_integer_sequence\n+  template<typename _Tp, _Tp _Num>\n+    using make_integer_sequence\n+#if __has_builtin(__make_integer_seq)\n+      = __make_integer_seq<integer_sequence, _Tp, _Num>;\n+#else\n+      = integer_sequence<_Tp, __integer_pack(_Num)...>;\n+#endif\n+\n+  /// Alias template index_sequence\n+  template<size_t... _Idx>\n+    using index_sequence = integer_sequence<size_t, _Idx...>;\n+\n+  /// Alias template make_index_sequence\n+  template<size_t _Num>\n+    using make_index_sequence = make_integer_sequence<size_t, _Num>;\n+\n+  /// Alias template index_sequence_for\n+  template<typename... _Types>\n+    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;\n+\n+#if __cplusplus >= 201703L\n+\n+  //\n+  struct in_place_t {\n+    explicit in_place_t() = default;\n+  };\n+\n+  inline constexpr in_place_t in_place{};\n+\n+  template<typename _Tp> struct in_place_type_t\n+  {\n+    explicit in_place_type_t() = default;\n+  };\n+\n+  template<typename _Tp>\n+    inline constexpr in_place_type_t<_Tp> in_place_type{};\n+\n+  template<size_t _Idx> struct in_place_index_t\n+  {\n+    explicit in_place_index_t() = default;\n+  };\n+\n+  template<size_t _Idx>\n+    inline constexpr in_place_index_t<_Idx> in_place_index{};\n+\n+  template<typename>\n+    struct __is_in_place_type_impl : false_type\n+    { };\n+\n+  template<typename _Tp>\n+    struct __is_in_place_type_impl<in_place_type_t<_Tp>> : true_type\n+    { };\n+\n+  template<typename _Tp>\n+    struct __is_in_place_type\n+      : public __is_in_place_type_impl<_Tp>\n+    { };\n+#endif // C++17\n+#endif // C++14\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+\n+#endif // C++11\n+#endif /* _GLIBCXX_UTILITY_H */"}, {"sha": "1fce95730eaf1c91588c3499454b6d6eb22b87cc", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -33,10 +33,11 @@\n \n #if __cplusplus >= 201703L\n \n+#include <initializer_list>\n #include <typeinfo>\n #include <new>\n-#include <utility>\n #include <type_traits>\n+#include <bits/utility.h> // in_place_type_t\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {"}, {"sha": "ea8d3cb5f2e5716243599fc74746f672251f0db4", "filename": "libstdc++-v3/include/std/array", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -35,10 +35,14 @@\n # include <bits/c++0x_warning.h>\n #else\n \n-#include <utility>\n+#include <compare>\n+#include <initializer_list>\n+\n+#include <type_traits>\n #include <bits/functexcept.h>\n #include <bits/stl_algobase.h>\n-#include <bits/range_access.h>\n+#include <bits/range_access.h> // std::begin, std::end etc.\n+#include <bits/utility.h>      // std::index_sequence, std::tuple_size\n #include <debug/assertions.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -428,28 +432,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Tuple interface to class template array.\n \n-  /// tuple_size\n-  template<typename _Tp>\n-    struct tuple_size;\n-\n   /// Partial specialization for std::array\n-  template<typename _Tp, std::size_t _Nm>\n+  template<typename _Tp, size_t _Nm>\n     struct tuple_size<array<_Tp, _Nm>>\n-    : public integral_constant<std::size_t, _Nm> { };\n-\n-  /// tuple_element\n-  template<std::size_t _Int, typename _Tp>\n-    struct tuple_element;\n+    : public integral_constant<size_t, _Nm> { };\n \n   /// Partial specialization for std::array\n-  template<std::size_t _Int, typename _Tp, std::size_t _Nm>\n-    struct tuple_element<_Int, array<_Tp, _Nm>>\n+  template<size_t _Ind, typename _Tp, size_t _Nm>\n+    struct tuple_element<_Ind, array<_Tp, _Nm>>\n     {\n-      static_assert(_Int < _Nm, \"index is out of bounds\");\n-      typedef _Tp type;\n+      static_assert(_Ind < _Nm, \"array index is in range\");\n+      using type = _Tp;\n     };\n \n-  template<typename _Tp, std::size_t _Nm>\n+  template<typename _Tp, size_t _Nm>\n     struct __is_tuple_like_impl<array<_Tp, _Nm>> : true_type\n     { };\n "}, {"sha": "cdc5e5d98b10c824ed51e6ff61ab7fd64ea5a7ce", "filename": "libstdc++-v3/include/std/memory_resource", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -38,13 +38,13 @@\n #include <shared_mutex>\t\t\t// shared_mutex\n #include <bits/align.h>\t\t\t// align\n #include <bits/functexcept.h>\t\t// __throw_bad_array_new_length\n-#include <bits/uses_allocator.h>\t// __use_alloc\n+#include <bits/uses_allocator.h>\t// allocator_arg_t, __use_alloc\n #include <bits/uses_allocator_args.h>\t// uninitialized_construct_using_alloc\n #include <ext/numeric_traits.h>\n #include <debug/assertions.h>\n \n #if ! __cpp_lib_make_obj_using_allocator\n-# include <utility>\t\t\t// pair, index_sequence\n+# include <bits/utility.h>\t\t// index_sequence\n # include <tuple>\t\t\t// tuple, forward_as_tuple\n #endif\n \n@@ -338,10 +338,10 @@ namespace pmr\n       { return _M_resource; }\n \n     private:\n+#if ! __cpp_lib_make_obj_using_allocator\n       using __uses_alloc1_ = __uses_alloc1<polymorphic_allocator>;\n       using __uses_alloc2_ = __uses_alloc2<polymorphic_allocator>;\n \n-#if ! __cpp_lib_make_obj_using_allocator\n       template<typename _Ind, typename... _Args>\n \tstatic tuple<_Args&&...>\n \t_S_construct_p(__uses_alloc0, _Ind, tuple<_Args...>& __t)"}, {"sha": "df9ed0736b391d785486611c6d403f25193c3cf1", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -33,14 +33,14 @@\n \n #if __cplusplus >= 201703L\n \n-#include <utility>\n #include <type_traits>\n #include <exception>\n #include <new>\n #include <initializer_list>\n+#include <bits/enable_special_members.h>\n #include <bits/exception_defines.h>\n #include <bits/functional_hash.h>\n-#include <bits/enable_special_members.h>\n+#include <bits/utility.h> // in_place_t\n #if __cplusplus > 201703L\n # include <compare>\n #endif"}, {"sha": "1292aee45c03d7a5dcb328bd6eec94f31593edfd", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -35,10 +35,10 @@\n # include <bits/c++0x_warning.h>\n #else\n \n-#include <utility>\n-#include <array>\n-#include <bits/uses_allocator.h>\n-#include <bits/invoke.h>\n+#include <bits/stl_pair.h>\t\t// for std::pair\n+#include <bits/uses_allocator.h>\t// for std::allocator_arg_t\n+#include <bits/utility.h>\t\t// for std::get, std::tuple_size etc.\n+#include <bits/invoke.h>\t\t// for std::__invoke\n #if __cplusplus > 201703L\n # include <compare>\n # define __cpp_lib_constexpr_tuple 201811L\n@@ -1415,7 +1415,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201402L\n \n-#define __cpp_lib_tuples_by_type 201304\n+#define __cpp_lib_tuples_by_type 201304L\n \n   // Return the index of _Tp in _Types, if it occurs exactly once.\n   // Otherwise, return sizeof...(_Types).\n@@ -1613,6 +1613,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     forward_as_tuple(_Elements&&... __args) noexcept\n     { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }\n \n+  // Declarations of std::array and its std::get overloads, so that\n+  // std::tuple_cat can use them if <tuple> is included before <array>.\n+\n+  template<typename _Tp, size_t _Nm> struct array;\n+\n+  template<size_t _Int, typename _Tp, size_t _Nm>\n+    constexpr _Tp&\n+    get(array<_Tp, _Nm>&) noexcept;\n+\n+  template<size_t _Int, typename _Tp, size_t _Nm>\n+    constexpr _Tp&&\n+    get(array<_Tp, _Nm>&&) noexcept;\n+\n+  template<size_t _Int, typename _Tp, size_t _Nm>\n+    constexpr const _Tp&\n+    get(const array<_Tp, _Nm>&) noexcept;\n+\n+  template<size_t _Int, typename _Tp, size_t _Nm>\n+    constexpr const _Tp&&\n+    get(const array<_Tp, _Nm>&&) noexcept;\n+\n+\n   template<size_t, typename, typename, size_t>\n     struct __make_tuple_impl;\n \n@@ -1721,6 +1743,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n     };\n \n+  template<typename... _Tps>\n+    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type\n+    { };\n+\n   /// tuple_cat\n   template<typename... _Tpls, typename = typename\n            enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>"}, {"sha": "0d821f9c074ab2b0c06b71e9b54e42721e548cbe", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -41,9 +41,6 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  template<typename... _Elements>\n-    class tuple;\n-\n   template<typename _Tp>\n     class reference_wrapper;\n \n@@ -2680,10 +2677,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __is_tuple_like_impl : false_type\n     { };\n \n-  template<typename... _Tps>\n-    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type\n-    { };\n-\n   // Internal type trait that allows us to sfinae-protect tuple_cat.\n   template<typename _Tp>\n     struct __is_tuple_like"}, {"sha": "c2697f87dc5d7fbc151c9fb6f2e9663804d43467", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 10, "deletions": 298, "changes": 308, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -60,9 +60,8 @@\n /**\n  * @defgroup utilities Utilities\n  *\n- * Components deemed generally useful. Includes pair, tuple,\n- * forward/move helpers, ratio, function object, metaprogramming and\n- * type traits, time, date, and memory functions.\n+ * Basic function and class templates used with the rest of the library.\n+ * Includes pair, swap, forward/move helpers, declval, integer_sequence.\n  */\n \n #include <bits/c++config.h>\n@@ -71,218 +70,21 @@\n \n #if __cplusplus >= 201103L\n \n+#include <initializer_list>\n #include <type_traits>\n #include <bits/move.h>\n-#include <initializer_list>\n+#include <bits/utility.h>\n \n-#if __cplusplus > 201703L\n-#include <ext/numeric_traits.h>\n+#if __cplusplus >= 202002L\n+#include <ext/numeric_traits.h> // __is_standard_integer, __int_traits\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  /// Finds the size of a given tuple type.\n-  template<typename _Tp>\n-    struct tuple_size;\n-\n-  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  // 2313. tuple_size should always derive from integral_constant<size_t, N>\n-  // 2770. tuple_size<const T> specialization is not SFINAE compatible\n-\n-  template<typename _Tp,\n-\t   typename _Up = typename remove_cv<_Tp>::type,\n-\t   typename = typename enable_if<is_same<_Tp, _Up>::value>::type,\n-\t   size_t = tuple_size<_Tp>::value>\n-    using __enable_if_has_tuple_size = _Tp;\n-\n-  template<typename _Tp>\n-    struct tuple_size<const __enable_if_has_tuple_size<_Tp>>\n-    : public tuple_size<_Tp> { };\n-\n-  template<typename _Tp>\n-    struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>\n-    : public tuple_size<_Tp> { };\n-\n-  template<typename _Tp>\n-    struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>\n-    : public tuple_size<_Tp> { };\n-\n-  /// Gives the type of the ith element of a given tuple type.\n-  template<size_t __i, typename _Tp>\n-    struct tuple_element;\n-\n-  // Duplicate of C++14's tuple_element_t for internal use in C++11 mode\n-  template<size_t __i, typename _Tp>\n-    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;\n-\n-  template<size_t __i, typename _Tp>\n-    struct tuple_element<__i, const _Tp>\n-    {\n-      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;\n-    };\n-\n-  template<size_t __i, typename _Tp>\n-    struct tuple_element<__i, volatile _Tp>\n-    {\n-      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;\n-    };\n-\n-  template<size_t __i, typename _Tp>\n-    struct tuple_element<__i, const volatile _Tp>\n-    {\n-      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;\n-    };\n-\n-#if __cplusplus >= 201402L\n-// The standard says this macro and alias template should be in <tuple>\n-// but we define them here, to be available when the partial specializations\n-// of tuple_element<pair<T,U>> and tuple_element<array<T,N>> are defined.\n-#define __cpp_lib_tuple_element_t 201402L\n-\n-  template<size_t __i, typename _Tp>\n-    using tuple_element_t = typename tuple_element<__i, _Tp>::type;\n-#endif\n-\n-  // Various functions which give std::pair a tuple-like interface.\n-\n-  /// Partial specialization for std::pair\n-  template<typename _T1, typename _T2>\n-    struct __is_tuple_like_impl<pair<_T1, _T2>> : true_type\n-    { };\n-\n-  /// Partial specialization for std::pair\n-  template<class _Tp1, class _Tp2>\n-    struct tuple_size<pair<_Tp1, _Tp2>>\n-    : public integral_constant<size_t, 2> { };\n-\n-  /// Partial specialization for std::pair\n-  template<class _Tp1, class _Tp2>\n-    struct tuple_element<0, pair<_Tp1, _Tp2>>\n-    { typedef _Tp1 type; };\n-\n-  /// Partial specialization for std::pair\n-  template<class _Tp1, class _Tp2>\n-    struct tuple_element<1, pair<_Tp1, _Tp2>>\n-    { typedef _Tp2 type; };\n-\n-  template<size_t _Int>\n-    struct __pair_get;\n-\n-  template<>\n-    struct __pair_get<0>\n-    {\n-      template<typename _Tp1, typename _Tp2>\n-\tstatic constexpr _Tp1&\n-\t__get(pair<_Tp1, _Tp2>& __pair) noexcept\n-\t{ return __pair.first; }\n-\n-      template<typename _Tp1, typename _Tp2>\n-\tstatic constexpr _Tp1&&\n-\t__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept\n-\t{ return std::forward<_Tp1>(__pair.first); }\n-\n-      template<typename _Tp1, typename _Tp2>\n-\tstatic constexpr const _Tp1&\n-\t__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept\n-\t{ return __pair.first; }\n-\n-      template<typename _Tp1, typename _Tp2>\n-\tstatic constexpr const _Tp1&&\n-\t__const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept\n-\t{ return std::forward<const _Tp1>(__pair.first); }\n-    };\n-\n-  template<>\n-    struct __pair_get<1>\n-    {\n-      template<typename _Tp1, typename _Tp2>\n-\tstatic constexpr _Tp2&\n-\t__get(pair<_Tp1, _Tp2>& __pair) noexcept\n-\t{ return __pair.second; }\n-\n-      template<typename _Tp1, typename _Tp2>\n-\tstatic constexpr _Tp2&&\n-\t__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept\n-\t{ return std::forward<_Tp2>(__pair.second); }\n-\n-      template<typename _Tp1, typename _Tp2>\n-\tstatic constexpr const _Tp2&\n-\t__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept\n-\t{ return __pair.second; }\n-\n-      template<typename _Tp1, typename _Tp2>\n-\tstatic constexpr const _Tp2&&\n-\t__const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept\n-\t{ return std::forward<const _Tp2>(__pair.second); }\n-    };\n-\n-  template<size_t _Int, class _Tp1, class _Tp2>\n-    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&\n-    get(pair<_Tp1, _Tp2>& __in) noexcept\n-    { return __pair_get<_Int>::__get(__in); }\n-\n-  template<size_t _Int, class _Tp1, class _Tp2>\n-    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&\n-    get(pair<_Tp1, _Tp2>&& __in) noexcept\n-    { return __pair_get<_Int>::__move_get(std::move(__in)); }\n-\n-  template<size_t _Int, class _Tp1, class _Tp2>\n-    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&\n-    get(const pair<_Tp1, _Tp2>& __in) noexcept\n-    { return __pair_get<_Int>::__const_get(__in); }\n-\n-  template<size_t _Int, class _Tp1, class _Tp2>\n-    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&\n-    get(const pair<_Tp1, _Tp2>&& __in) noexcept\n-    { return __pair_get<_Int>::__const_move_get(std::move(__in)); }\n-\n #if __cplusplus >= 201402L\n-\n-#define __cpp_lib_tuples_by_type 201304\n-\n-  template <typename _Tp, typename _Up>\n-    constexpr _Tp&\n-    get(pair<_Tp, _Up>& __p) noexcept\n-    { return __p.first; }\n-\n-  template <typename _Tp, typename _Up>\n-    constexpr const _Tp&\n-    get(const pair<_Tp, _Up>& __p) noexcept\n-    { return __p.first; }\n-\n-  template <typename _Tp, typename _Up>\n-    constexpr _Tp&&\n-    get(pair<_Tp, _Up>&& __p) noexcept\n-    { return std::move(__p.first); }\n-\n-  template <typename _Tp, typename _Up>\n-    constexpr const _Tp&&\n-    get(const pair<_Tp, _Up>&& __p) noexcept\n-    { return std::move(__p.first); }\n-\n-  template <typename _Tp, typename _Up>\n-    constexpr _Tp&\n-    get(pair<_Up, _Tp>& __p) noexcept\n-    { return __p.second; }\n-\n-  template <typename _Tp, typename _Up>\n-    constexpr const _Tp&\n-    get(const pair<_Up, _Tp>& __p) noexcept\n-    { return __p.second; }\n-\n-  template <typename _Tp, typename _Up>\n-    constexpr _Tp&&\n-    get(pair<_Up, _Tp>&& __p) noexcept\n-    { return std::move(__p.second); }\n-\n-  template <typename _Tp, typename _Up>\n-    constexpr const _Tp&&\n-    get(const pair<_Up, _Tp>&& __p) noexcept\n-    { return std::move(__p.second); }\n-\n-#define __cpp_lib_exchange_function 201304\n+#define __cpp_lib_exchange_function 201304L\n \n   /// Assign @p __new_val to @p __obj and return its previous value.\n   template <typename _Tp, typename _Up = _Tp>\n@@ -291,100 +93,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     exchange(_Tp& __obj, _Up&& __new_val)\n     { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }\n \n-#endif // C++14\n-\n-  // Stores a tuple of indices.  Used by tuple and pair, and by bind() to\n-  // extract the elements in a tuple.\n-  template<size_t... _Indexes> struct _Index_tuple { };\n-\n-  // Builds an _Index_tuple<0, 1, 2, ..., _Num-1>.\n-  template<size_t _Num>\n-    struct _Build_index_tuple\n-    {\n-#if __has_builtin(__make_integer_seq)\n-      template<typename, size_t... _Indices>\n-        using _IdxTuple = _Index_tuple<_Indices...>;\n-\n-      // Clang defines __make_integer_seq for this purpose.\n-      using __type = __make_integer_seq<_IdxTuple, size_t, _Num>;\n-#else\n-      // For GCC and other compilers, use __integer_pack instead.\n-      using __type = _Index_tuple<__integer_pack(_Num)...>;\n-#endif\n-    };\n-\n-#if __cplusplus >= 201402L\n-\n-#define __cpp_lib_integer_sequence 201304\n-\n-  /// Class template integer_sequence\n-  template<typename _Tp, _Tp... _Idx>\n-    struct integer_sequence\n-    {\n-      typedef _Tp value_type;\n-      static constexpr size_t size() noexcept { return sizeof...(_Idx); }\n-    };\n-\n-  /// Alias template make_integer_sequence\n-  template<typename _Tp, _Tp _Num>\n-    using make_integer_sequence\n-#if __has_builtin(__make_integer_seq)\n-      = __make_integer_seq<integer_sequence, _Tp, _Num>;\n-#else\n-      = integer_sequence<_Tp, __integer_pack(_Num)...>;\n-#endif\n-\n-  /// Alias template index_sequence\n-  template<size_t... _Idx>\n-    using index_sequence = integer_sequence<size_t, _Idx...>;\n-\n-  /// Alias template make_index_sequence\n-  template<size_t _Num>\n-    using make_index_sequence = make_integer_sequence<size_t, _Num>;\n-\n-  /// Alias template index_sequence_for\n-  template<typename... _Types>\n-    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;\n-#endif\n-\n-#if __cplusplus > 201402L\n-\n-  struct in_place_t {\n-    explicit in_place_t() = default;\n-  };\n-\n-  inline constexpr in_place_t in_place{};\n-\n-  template<typename _Tp> struct in_place_type_t\n-  {\n-    explicit in_place_type_t() = default;\n-  };\n-\n-  template<typename _Tp>\n-    inline constexpr in_place_type_t<_Tp> in_place_type{};\n-\n-  template<size_t _Idx> struct in_place_index_t\n-  {\n-    explicit in_place_index_t() = default;\n-  };\n-\n-  template<size_t _Idx>\n-    inline constexpr in_place_index_t<_Idx> in_place_index{};\n-\n-  template<typename>\n-    struct __is_in_place_type_impl : false_type\n-    { };\n+#if __cplusplus >= 201703L\n \n-  template<typename _Tp>\n-    struct __is_in_place_type_impl<in_place_type_t<_Tp>> : true_type\n-    { };\n-\n-  template<typename _Tp>\n-    struct __is_in_place_type\n-      : public __is_in_place_type_impl<_Tp>\n-    { };\n-\n-#define  __cpp_lib_as_const 201510\n+#define  __cpp_lib_as_const 201510L\n   template<typename _Tp>\n     [[nodiscard]]\n     constexpr add_const_t<_Tp>&\n@@ -476,6 +187,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++23\n #endif // C++20\n #endif // C++17\n+#endif // C++14\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "6383cf4e50222499f5a6633247bb1a675a4d981a", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -33,18 +33,18 @@\n \n #if __cplusplus >= 201703L\n \n+#include <initializer_list>\n #include <type_traits>\n-#include <utility>\n #include <bits/enable_special_members.h>\n-#include <bits/functexcept.h>\n-#include <bits/move.h>\n+#include <bits/exception_defines.h>\n #include <bits/functional_hash.h>\n #include <bits/invoke.h>\n #include <ext/aligned_buffer.h>\n #include <bits/parse_numbers.h>\n #include <bits/stl_iterator_base_types.h>\n #include <bits/stl_iterator_base_funcs.h>\n #include <bits/stl_construct.h>\n+#include <bits/utility.h> // in_place_index_t\n #if __cplusplus > 201703L\n # include <compare>\n #endif"}, {"sha": "d5fa38d778699069f1a28914d3436e36972ef907", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -94,7 +94,7 @@\n # define __cpp_lib_string_udls 201304\n # define __cpp_lib_transparent_operators 201510\n # define __cpp_lib_tuple_element_t 201402L\n-# define __cpp_lib_tuples_by_type 201304\n+# define __cpp_lib_tuples_by_type 201304L\n #endif\n \n #if __cplusplus >= 201703L"}, {"sha": "fbfa8fdeebf23fab14f7134ec3c131073b90977d", "filename": "libstdc++-v3/testsuite/20_util/optional/84601.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2F84601.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2F84601.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2F84601.cc?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -1,6 +1,7 @@\n // { dg-do compile { target c++17 }  }\n \n #include <optional>\n+#include <utility>\n \n using pair_t = std::pair<int, int>;\n using opt_t = std::optional<pair_t>;"}, {"sha": "bce65cf0807bf45fae9238f7d0b5ecfdc7db6336", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_fill/constrained.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2Fconstrained.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2Fconstrained.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_fill%2Fconstrained.cc?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -25,6 +25,7 @@\n #include <span>\n #include <string>\n #include <vector>\n+#include <utility>\n \n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>"}, {"sha": "423594dd2b33bb75e12d4d5960f8e46b3c19e64f", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get_neg.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget_neg.cc?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -26,6 +26,6 @@ int n1 = std::get<1>(a);\n int n2 = std::get<1>(std::move(a));\n int n3 = std::get<1>(ca);\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 363 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 371 }\n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 379 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 367 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 375 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 383 }"}, {"sha": "7941563b124599b27910234bca79198b83a27b6e", "filename": "libstdc++-v3/testsuite/std/ranges/access/cbegin.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcbegin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcbegin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcbegin.cc?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -19,6 +19,7 @@\n // { dg-do run { target c++2a } }\n \n #include <ranges>\n+#include <utility> // as_const\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n "}, {"sha": "135bda80a6a949a42e94f5433b0de0de637d1f42", "filename": "libstdc++-v3/testsuite/std/ranges/access/cend.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcend.cc?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -19,6 +19,7 @@\n // { dg-do run { target c++2a } }\n \n #include <ranges>\n+#include <utility> // as_const\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n "}, {"sha": "7321a3088a411c68542fd2db5554c36aaa570377", "filename": "libstdc++-v3/testsuite/std/ranges/access/end.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend.cc?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -19,6 +19,7 @@\n // { dg-do run { target c++2a } }\n \n #include <ranges>\n+#include <utility> // as_const\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n "}, {"sha": "fe03cccf9cc6cfec62738707282c557bc14d4fdc", "filename": "libstdc++-v3/testsuite/std/ranges/single_view.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsingle_view.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261d5a4a459bd49942e53bc83334ccc7154a09d5/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsingle_view.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsingle_view.cc?ref=261d5a4a459bd49942e53bc83334ccc7154a09d5", "patch": "@@ -19,6 +19,7 @@\n // { dg-do run { target c++2a } }\n \n #include <ranges>\n+#include <utility> // as_const\n #include <testsuite_hooks.h>\n \n void"}]}