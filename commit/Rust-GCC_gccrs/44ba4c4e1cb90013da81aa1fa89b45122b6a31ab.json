{"sha": "44ba4c4e1cb90013da81aa1fa89b45122b6a31ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRiYTRjNGUxY2I5MDAxM2RhODFhYTFmYTg5YjQ1MTIyYjZhMzFhYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2007-04-13T23:43:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2007-04-13T23:43:18Z"}, "message": "re PR c++/31074 (Reference casting involving multiple inheritance produces bad pointer)\n\n        PR c++/31074\n        * call.c (reference_binding): Add c_cast_p parm.  If true,\n        add quals to TO as needed to make it reference-compatible.\n\nFrom-SVN: r123805", "tree": {"sha": "da8e16c89d428eff3f1285c537a96d013de3bed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da8e16c89d428eff3f1285c537a96d013de3bed5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44ba4c4e1cb90013da81aa1fa89b45122b6a31ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ba4c4e1cb90013da81aa1fa89b45122b6a31ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44ba4c4e1cb90013da81aa1fa89b45122b6a31ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44ba4c4e1cb90013da81aa1fa89b45122b6a31ab/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a7b07c6c1f2dec0104055d7a0a4a4f2bfc11729", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7b07c6c1f2dec0104055d7a0a4a4f2bfc11729", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a7b07c6c1f2dec0104055d7a0a4a4f2bfc11729"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "9d0ac8cc9dc0467fba8e378db833b7e23235c358", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44ba4c4e1cb90013da81aa1fa89b45122b6a31ab/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44ba4c4e1cb90013da81aa1fa89b45122b6a31ab/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=44ba4c4e1cb90013da81aa1fa89b45122b6a31ab", "patch": "@@ -1,3 +1,9 @@\n+2007-04-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/31074\n+\t* call.c (reference_binding): Add c_cast_p parm.  If true,\n+\tadd quals to TO as needed to make it reference-compatible.\n+\n 2007-04-11  Jan Hubicka  <jh@suse.cz>\n \n \t* cp/class.c (convert_to_base_statically): Fold produced tree; verify"}, {"sha": "0b0bb646d22294de0eea81a81b5fbf1e28ba7b3c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44ba4c4e1cb90013da81aa1fa89b45122b6a31ab/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44ba4c4e1cb90013da81aa1fa89b45122b6a31ab/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=44ba4c4e1cb90013da81aa1fa89b45122b6a31ab", "patch": "@@ -173,7 +173,7 @@ static struct z_candidate *add_function_candidate\n \t(struct z_candidate **, tree, tree, tree, tree, tree, int);\n static conversion *implicit_conversion (tree, tree, tree, bool, int);\n static conversion *standard_conversion (tree, tree, tree, bool, int);\n-static conversion *reference_binding (tree, tree, tree, int);\n+static conversion *reference_binding (tree, tree, tree, bool, int);\n static conversion *build_conv (conversion_kind, tree, conversion *);\n static bool is_subseq (conversion *, conversion *);\n static tree maybe_handle_ref_bind (conversion **);\n@@ -1105,10 +1105,11 @@ direct_reference_binding (tree type, conversion *conv)\n    purposes of reference binding.  For lvalue binding, either pass a\n    reference type to FROM or an lvalue expression to EXPR.  If the\n    reference will be bound to a temporary, NEED_TEMPORARY_P is set for\n-   the conversion returned.  */\n+   the conversion returned.  If C_CAST_P is true, this\n+   conversion is coming from a C-style cast.  */\n \n static conversion *\n-reference_binding (tree rto, tree rfrom, tree expr, int flags)\n+reference_binding (tree rto, tree rfrom, tree expr, bool c_cast_p, int flags)\n {\n   conversion *conv = NULL;\n   tree to = TREE_TYPE (rto);\n@@ -1138,6 +1139,11 @@ reference_binding (tree rto, tree rfrom, tree expr, int flags)\n      reference compatible.  We have do do this after stripping\n      references from FROM.  */\n   related_p = reference_related_p (to, from);\n+  /* If this is a C cast, first convert to an appropriately qualified\n+     type, so that we can later do a const_cast to the desired type.  */\n+  if (related_p && c_cast_p\n+      && !at_least_as_qualified_p (to, from))\n+    to = build_qualified_type (to, cp_type_quals (from));\n   compatible_p = reference_compatible_p (to, from);\n \n   if (lvalue_p && compatible_p)\n@@ -1247,7 +1253,7 @@ reference_binding (tree rto, tree rfrom, tree expr, int flags)\n   if (related_p && !at_least_as_qualified_p (to, from))\n     return NULL;\n \n-  conv = implicit_conversion (to, from, expr, /*c_cast_p=*/false,\n+  conv = implicit_conversion (to, from, expr, c_cast_p,\n \t\t\t      flags);\n   if (!conv)\n     return NULL;\n@@ -1277,7 +1283,7 @@ implicit_conversion (tree to, tree from, tree expr, bool c_cast_p,\n     return NULL;\n \n   if (TREE_CODE (to) == REFERENCE_TYPE)\n-    conv = reference_binding (to, from, expr, flags);\n+    conv = reference_binding (to, from, expr, c_cast_p, flags);\n   else\n     conv = standard_conversion (to, from, expr, c_cast_p, flags);\n \n@@ -6618,7 +6624,8 @@ initialize_reference (tree type, tree expr, tree decl, tree *cleanup)\n   /* Get the high-water mark for the CONVERSION_OBSTACK.  */\n   p = conversion_obstack_alloc (0);\n \n-  conv = reference_binding (type, TREE_TYPE (expr), expr, LOOKUP_NORMAL);\n+  conv = reference_binding (type, TREE_TYPE (expr), expr, /*c_cast_p=*/false,\n+\t\t\t    LOOKUP_NORMAL);\n   if (!conv || conv->bad_p)\n     {\n       if (!(TYPE_QUALS (TREE_TYPE (type)) & TYPE_QUAL_CONST)"}, {"sha": "118d9ad37295da8a2484e704f791ab920f0a2213", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44ba4c4e1cb90013da81aa1fa89b45122b6a31ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44ba4c4e1cb90013da81aa1fa89b45122b6a31ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44ba4c4e1cb90013da81aa1fa89b45122b6a31ab", "patch": "@@ -1,3 +1,8 @@\n+2007-04-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/31074\n+\t* conv3.C: New test.\n+\n 2007-04-13  Mike Stump  <mrs@apple.com>\n \n \t* obj-c++.dg/stubify-1.mm: Only run on powerpc."}, {"sha": "73d8c20f1430944c8ebffce50dce0e4b933ccd39", "filename": "gcc/testsuite/g++.dg/inherit/conv3.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44ba4c4e1cb90013da81aa1fa89b45122b6a31ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fconv3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44ba4c4e1cb90013da81aa1fa89b45122b6a31ab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fconv3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fconv3.C?ref=44ba4c4e1cb90013da81aa1fa89b45122b6a31ab", "patch": "@@ -0,0 +1,31 @@\n+// PR 31074\n+// Bug: The reference cast wasn't finding the desired static_cast followed by\n+// const_cast interpretation.\n+\n+struct Shape\n+{\n+  Shape() {}\n+  virtual ~Shape() {}\n+};\n+\n+struct Loop\n+{\n+  Loop() {}\n+  virtual ~Loop() {}\n+  virtual void func() {}\n+};\n+\n+struct Rect :\n+  public Shape,\n+  public Loop\n+{\n+  Rect() {}\n+  virtual ~Rect() {}\n+};\n+\n+int main ()\n+{\n+  const Rect* rect = new Rect();\n+  Loop &l = ((Loop&)(*rect));\n+  return (&l != (const Loop *)rect);\n+}"}]}