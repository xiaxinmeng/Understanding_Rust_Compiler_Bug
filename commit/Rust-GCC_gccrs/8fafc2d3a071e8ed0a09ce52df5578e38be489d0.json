{"sha": "8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZhZmMyZDNhMDcxZThlZDBhMDljZTUyZGY1NTc4ZTM4YmU0ODlkMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-11-07T16:55:49Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-11-07T16:55:49Z"}, "message": "exception.hpp (pb_ds): Modify for -fno-exceptions.\n\n2006-11-07  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/pb_ds/exception.hpp (pb_ds): Modify for -fno-exceptions.\n\t(__throw_container_error): New. Conditionalize based on __EXCEPTIONS.\n\t(__throw_insert_error): New.\n\t(__throw_join_error): New.\n\t(__throw_resize_error): New.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_prime_size_policy_imp.hpp: Use them.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_exponential_size_policy_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_load_check_resize_trigger_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_standard_resize_policy_imp.hpp: Same.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\tconstructor_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/pat_trie_/insert_join_fn_imps.hpp\n\t* include/ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp\n\t* include/ext/pb_ds/detail/pat_trie_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/bin_search_tree_/\n\tsplit_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tinsert_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tresize_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tinsert_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tconstructor_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\tresize_no_store_hash_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\tconstructors_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/ov_tree_map_/split_join_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/detail/list_update_map_/\n\tconstructor_destructor_fn_imps.hpp: Same.\n\t* include/ext/pb_ds/exception.hpp: Same.\t\n\t* src/functexcept.cc: Qualify abort with std.\n\nFrom-SVN: r118554", "tree": {"sha": "a8e951feb768a5597235e1a917dd3dac99a36528", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8e951feb768a5597235e1a917dd3dac99a36528"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/comments", "author": null, "committer": null, "parents": [{"sha": "8f81c3c650cb19b50c44d52639fc05738736c88a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f81c3c650cb19b50c44d52639fc05738736c88a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f81c3c650cb19b50c44d52639fc05738736c88a"}], "stats": {"total": 339, "additions": 185, "deletions": 154}, "files": [{"sha": "caca3e7a945177152543fe73b61c2850879135b6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -1,3 +1,51 @@\n+2006-11-07  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/pb_ds/exception.hpp (pb_ds): Modify for -fno-exceptions.\n+\t(__throw_container_error): New. Conditionalize based on __EXCEPTIONS.\n+\t(__throw_insert_error): New.\n+\t(__throw_join_error): New.\n+\t(__throw_resize_error): New.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_prime_size_policy_imp.hpp: Use them.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_exponential_size_policy_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_load_check_resize_trigger_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_standard_resize_policy_imp.hpp: Same.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\tconstructor_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/pat_trie_/insert_join_fn_imps.hpp\n+\t* include/ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp\n+\t* include/ext/pb_ds/detail/pat_trie_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/\n+\tsplit_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tinsert_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tresize_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tinsert_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tconstructor_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\tresize_no_store_hash_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\tconstructors_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/split_join_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/detail/list_update_map_/\n+\tconstructor_destructor_fn_imps.hpp: Same.\n+\t* include/ext/pb_ds/exception.hpp: Same.\t\n+\t* src/functexcept.cc: Qualify abort with std.\n+\n 2006-11-07  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/ext/pb_ds/exception.hpp: Add translation support to"}, {"sha": "a6ee920012797cd2dd10633d3723dc37a5eac4be", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -107,7 +107,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n       {\n         _GLIBCXX_DEBUG_ONLY(map_debug_base::clear();)\n \ts_node_allocator.deallocate(m_p_head, 1);\n-        throw;\n+        __throw_exception_again;\n       }\n   _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n }\n@@ -170,7 +170,7 @@ recursive_copy_node(const node_pointer p_nd)\n   catch(...)\n     {\n       s_node_allocator.deallocate(p_ret, 1);\n-      throw;\n+      __throw_exception_again;\n     }\n \n   p_ret->m_p_left = p_ret->m_p_right = NULL;\n@@ -183,7 +183,7 @@ recursive_copy_node(const node_pointer p_nd)\n   catch(...)\n     {\n       clear_imp(p_ret);\n-      throw;\n+      __throw_exception_again;\n     }\n \n   if (p_ret->m_p_left != NULL)"}, {"sha": "2c8e77dedf52d812e25dd983b208a04aa2229f07", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/split_join_fn_imps.hpp", "status": "modified", "additions": 29, "deletions": 58, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -50,37 +50,29 @@ PB_DS_CLASS_C_DEC::\n join_prep(PB_DS_CLASS_C_DEC& other)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-    if (other.m_size == 0)\n-      return (false);\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  if (other.m_size == 0)\n+    return false;\n \n   if (m_size == 0)\n     {\n       value_swap(other);\n-\n-      return (false);\n+      return false;\n     }\n \n-  const bool greater = Cmp_Fn::operator()(\n-\t\t\t\t\t  PB_DS_V2F(m_p_head->m_p_right->m_value),\n-\t\t\t\t\t  PB_DS_V2F(other.m_p_head->m_p_left->m_value));\n+  const bool greater = Cmp_Fn::operator()(PB_DS_V2F(m_p_head->m_p_right->m_value), PB_DS_V2F(other.m_p_head->m_p_left->m_value));\n \n-  const bool lesser = Cmp_Fn::operator()(\n-\t\t\t\t\t PB_DS_V2F(other.m_p_head->m_p_right->m_value),\n-\t\t\t\t\t PB_DS_V2F(m_p_head->m_p_left->m_value));\n+  const bool lesser = Cmp_Fn::operator()(PB_DS_V2F(other.m_p_head->m_p_right->m_value), PB_DS_V2F(m_p_head->m_p_left->m_value));\n \n-  if (!greater&&  !lesser)\n-    throw join_error();\n+  if (!greater && !lesser)\n+    __throw_join_error();\n \n   if (lesser)\n     value_swap(other);\n \n   m_size += other.m_size;\n-\n   _GLIBCXX_DEBUG_ONLY(map_debug_base::join(other);)\n-\n-    return (true);\n+  return true;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -89,7 +81,6 @@ PB_DS_CLASS_C_DEC::\n join_finish(PB_DS_CLASS_C_DEC& other)\n {\n   initialize_min_max();\n-\n   other.initialize();\n }\n \n@@ -99,53 +90,41 @@ PB_DS_CLASS_C_DEC::\n split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-    other.clear();\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  other.clear();\n \n   if (m_size == 0)\n     {\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-        return (false);\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      return false;\n     }\n \n   if (Cmp_Fn::operator()(r_key, PB_DS_V2F(m_p_head->m_p_left->m_value)))\n     {\n       value_swap(other);\n-\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-        return (false);\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      return false;\n     }\n \n-  if (!Cmp_Fn::operator()(\n-\t\t\t  r_key,\n-\t\t\t  PB_DS_V2F(m_p_head->m_p_right->m_value)))\n+  if (!Cmp_Fn::operator()(r_key, PB_DS_V2F(m_p_head->m_p_right->m_value)))\n     {\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-        return (false);\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      return false;\n     }\n \n   if (m_size == 1)\n     {\n       value_swap(other);\n-\n       _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-        return (false);\n+      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      return false;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(map_debug_base::split(\n-\t\t\t\t       r_key,(Cmp_Fn& )(*this),\n-\t\t\t\t       other);)\n-\n-    return (true);\n+  _GLIBCXX_DEBUG_ONLY(map_debug_base::split(r_key,(Cmp_Fn& )(*this), other);)\n+  return true;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -154,28 +133,20 @@ PB_DS_CLASS_C_DEC::\n split_finish(PB_DS_CLASS_C_DEC& other)\n {\n   other.initialize_min_max();\n-\n-  other.m_size =\n-    std::distance(other.begin(), other.end());\n-\n+  other.m_size = std::distance(other.begin(), other.end());\n   m_size -= other.m_size;\n-\n   initialize_min_max();\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n-recursive_count(node_pointer p_nd) const\n+recursive_count(node_pointer p) const\n {\n-  if (p_nd == NULL)\n-    return (0);\n-\n-  return (1 +\n-\t  recursive_count(p_nd->m_p_left) +\n-\t  recursive_count(p_nd->m_p_right));\n+  if (p == NULL)\n+    return 0;\n+  return 1 + recursive_count(p->m_p_left) + recursive_count(p->m_p_right);\n }\n "}, {"sha": "b43529beeb3da45bcf98972972c021df17ee6ad6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -65,14 +65,13 @@ copy_from_range(It first_it, It last_it)\n   while (first_it != last_it)\n     {\n       insert_value(*first_it, s_no_throw_copies_ind);\n-\n       ++first_it;\n     }\n \n   std::make_heap(m_a_entries, m_a_entries + m_size, static_cast<entry_cmp& >(*this));\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -82,7 +81,7 @@ binary_heap_() :\n   m_a_entries(s_entry_allocator.allocate(m_actual_size))\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -93,7 +92,7 @@ binary_heap_(const Cmp_Fn& r_cmp_fn) :\n   m_a_entries(s_entry_allocator.allocate(m_actual_size))\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -105,7 +104,7 @@ binary_heap_(const PB_DS_CLASS_C_DEC& other) :\n   m_a_entries(s_entry_allocator.allocate(m_actual_size))\n {\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    _GLIBCXX_DEBUG_ASSERT(m_a_entries != other.m_a_entries);\n+  _GLIBCXX_DEBUG_ASSERT(m_a_entries != other.m_a_entries);\n \n   const_iterator first_it = other.begin();\n   const_iterator last_it = other.end();\n@@ -115,7 +114,6 @@ binary_heap_(const PB_DS_CLASS_C_DEC& other) :\n       while (first_it != last_it)\n         {\n \t  insert_value(*first_it, s_no_throw_copies_ind);\n-\n \t  ++first_it;\n         }\n     }\n@@ -125,42 +123,35 @@ binary_heap_(const PB_DS_CLASS_C_DEC& other) :\n \terase_at(m_a_entries, i, s_no_throw_copies_ind);\n \n       s_entry_allocator.deallocate(m_a_entries, m_actual_size);\n-\n-      throw;\n+      __throw_exception_again;\n     }\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    _GLIBCXX_DEBUG_ASSERT(m_a_entries != other.m_a_entries);\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ASSERT(m_a_entries != other.m_a_entries);\n \n   value_swap(other);\n-\n   std::swap((entry_cmp& )(*this), (entry_cmp& )other);\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n value_swap(PB_DS_CLASS_C_DEC& other)\n {\n   std::swap(m_a_entries, other.m_a_entries);\n-\n   std::swap(m_size, other.m_size);\n-\n   std::swap(m_actual_size, other.m_actual_size);\n-\n-  static_cast<resize_policy* >(this)->swap(other);\n+  static_cast<resize_policy*>(this)->swap(other);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -169,7 +160,6 @@ PB_DS_CLASS_C_DEC::\n {\n   for (size_type i = 0; i < m_size; ++i)\n     erase_at(m_a_entries, i, s_no_throw_copies_ind);\n-\n   s_entry_allocator.deallocate(m_a_entries, m_actual_size);\n }\n "}, {"sha": "936d825e3249bfaffd25a9a8cd7dd0079afd75ad", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -91,7 +91,7 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n       if (a_other_entries != NULL)\n \ts_entry_allocator.deallocate(a_other_entries, other_actual_size);\n \n-      throw;\n+      __throw_exception_again;\n     };\n \n   for (size_type i = 0; i < other.m_size; ++i)\n@@ -129,9 +129,9 @@ PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n \n-    const size_type size = m_size + other.m_size;\n+  const size_type size = m_size + other.m_size;\n   const size_type actual_size = resize_policy::get_new_size_for_arbitrary(size);\n \n   entry_pointer a_entries = NULL;\n@@ -140,7 +140,6 @@ join(PB_DS_CLASS_C_DEC& other)\n   try\n     {\n       a_entries = s_entry_allocator.allocate(actual_size);\n-\n       a_other_entries = s_entry_allocator.allocate(resize_policy::min_size);\n     }\n   catch(...)\n@@ -151,7 +150,7 @@ join(PB_DS_CLASS_C_DEC& other)\n       if (a_other_entries != NULL)\n \ts_entry_allocator.deallocate(a_other_entries, resize_policy::min_size);\n \n-      throw;\n+      __throw_exception_again;\n     }\n \n   std::copy(m_a_entries, m_a_entries + m_size, a_entries);\n@@ -174,6 +173,6 @@ join(PB_DS_CLASS_C_DEC& other)\n   other.notify_arbitrary(resize_policy::min_size);\n \n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+}\n "}, {"sha": "7da4d8a1e7910f05327aa0ceadb1f3f5d24a57da", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -146,7 +146,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n     catch(...)\n       {\n         deallocate_all();\n-        throw;\n+        __throw_exception_again;\n       }\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n }"}, {"sha": "57f8b970d520993b8cc1ee310dc355fcf8405e86", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -103,7 +103,7 @@ resize_imp(size_type new_size)\n   catch(...)\n     {\n       ranged_hash_fn_base::notify_resized(old_size);\n-      throw;\n+      __throw_exception_again;\n     }\n \n   // At this point no exceptions can be thrown."}, {"sha": "1491a91671ec0fc7fc4309b242d12ebb1fccc3e6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -164,7 +164,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n   catch(...)\n     {\n       deallocate_all();\n-      throw;\n+      __throw_exception_again;\n     }\n   _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n }"}, {"sha": "98d597051bdc1c93215a510465ba252b85b0e542", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/insert_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -92,7 +92,7 @@ find_ins_pos(const_key_reference r_key, false_type)\n     }\n   resize_base::notify_insert_search_end();\n   if (ins_pos == m_num_e)\n-    throw insert_error();\n+    __throw_insert_error();\n   return ins_pos;\n }\n "}, {"sha": "b6445fae2e61aa2a96a62f93ff7cb0b6f9fc2989", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/insert_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -97,7 +97,7 @@ find_ins_pos(const_key_reference r_key, true_type)\n     }\n   resize_base::notify_insert_search_end();\n   if (ins_pos == m_num_e)\n-    throw insert_error();\n+    __throw_insert_error();\n   return std::make_pair(ins_pos, pos_hash_pair.second);\n }\n "}, {"sha": "4368d12d62613ed45270deaf226fcaeb13c34cc8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -114,7 +114,7 @@ resize_imp(size_type new_size)\n       m_num_e = old_size;\n       s_entry_allocator.deallocate(a_entries_resized, new_size);\n       ranged_probe_fn_base::notify_resized(old_size);\n-      throw;\n+      __throw_exception_again;\n     }\n \n   // At this point no exceptions can be thrown."}, {"sha": "2f4126a12d1eb0112925713175c8cd9c6615d68c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_no_store_hash_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -73,6 +73,6 @@ resize_imp_reassign(entry_pointer p_e, entry_array a_entries_resized,\n \t  _GLIBCXX_DEBUG_ASSERT(0);\n         };\n     }\n-  throw insert_error();\n+  __throw_insert_error();\n }\n "}, {"sha": "ac2ce14cc05e481ac2b82fdbb394c804b475e89f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_store_hash_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_store_hash_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -75,6 +75,6 @@ resize_imp_reassign(entry_pointer p_e, entry_array a_entries_resized,\n \t  _GLIBCXX_DEBUG_ASSERT(0);\n         };\n     }\n-  throw insert_error();\n+  __throw_insert_error();\n }\n "}, {"sha": "85d2511cac6cbb5584e45c1ea4161cc88f93a544", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 14, "deletions": 29, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -59,7 +59,7 @@ left_child_next_sibling_heap_() :\n   m_size(0)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -69,49 +69,39 @@ left_child_next_sibling_heap_(const Cmp_Fn& r_cmp_fn) :\n   m_size(0)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n-left_child_next_sibling_heap_(const PB_DS_CLASS_C_DEC& other) :\n-  Cmp_Fn(other),\n-  m_p_root(NULL),\n-  m_size(0)\n+left_child_next_sibling_heap_(const PB_DS_CLASS_C_DEC& other) \n+: Cmp_Fn(other), m_p_root(NULL), m_size(0)\n {\n   m_size = other.m_size;\n-\n   _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-    m_p_root = recursive_copy_node(other.m_p_root);\n-\n+  m_p_root = recursive_copy_node(other.m_p_root);\n   m_size = other.m_size;\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-\n-    value_swap(other);\n-\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  value_swap(other);\n   std::swap((Cmp_Fn& )(*this), (Cmp_Fn& )other);\n-\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n+  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n value_swap(PB_DS_CLASS_C_DEC& other)\n {\n   std::swap(m_p_root, other.m_p_root);\n-\n   std::swap(m_size, other.m_size);\n }\n \n@@ -139,8 +129,7 @@ recursive_copy_node(const_node_pointer p_nd)\n   catch(...)\n     {\n       s_node_allocator.deallocate(p_ret, 1);\n-\n-      throw;\n+      __throw_exception_again;\n     }\n \n   p_ret->m_p_l_child = p_ret->m_p_next_sibling =\n@@ -149,25 +138,21 @@ recursive_copy_node(const_node_pointer p_nd)\n   try\n     {\n       p_ret->m_p_l_child = recursive_copy_node(p_nd->m_p_l_child);\n-\n       p_ret->m_p_next_sibling = recursive_copy_node(p_nd->m_p_next_sibling);\n     }\n   catch(...)\n     {\n       clear_imp(p_ret);\n-\n-      throw;\n+      __throw_exception_again;\n     }\n \n   if (p_ret->m_p_l_child != NULL)\n     p_ret->m_p_l_child->m_p_prev_or_parent = p_ret;\n \n   if (p_ret->m_p_next_sibling != NULL)\n     p_ret->m_p_next_sibling->m_p_prev_or_parent =\n-      p_nd->m_p_next_sibling->m_p_prev_or_parent == p_nd?\n-      p_ret :\n-      NULL;\n+      p_nd->m_p_next_sibling->m_p_prev_or_parent == p_nd ? p_ret : NULL;\n \n-  return (p_ret);\n+  return p_ret;\n }\n "}, {"sha": "a311a79757dee0b609ea479edc629e7530621b8c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -107,7 +107,7 @@ m_p_l(NULL)\n   catch(...)\n     {\n       deallocate_all();\n-      throw;\n+      __throw_exception_again;\n     }\n   _GLIBCXX_DEBUG_ONLY(assert_valid();)\n }"}, {"sha": "3b6abcd6c7730db00d7b3acf77fbd4599e920201", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/split_join_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -122,8 +122,8 @@ join(PB_DS_CLASS_C_DEC& other)\n   const bool lesser = Cmp_Fn::operator()(PB_DS_V2F(*(other.end() - 1)),\n \t\t\t\t\t PB_DS_V2F(*begin()));\n \n-  if (!greater&&  !lesser)\n-    throw join_error();\n+  if (!greater && !lesser)\n+    __throw_join_error();\n \n   PB_DS_CLASS_C_DEC new_this(*this, *this);\n "}, {"sha": "a5a96a5a389379ea39ec2b5bc7690653dc74637a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -103,7 +103,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n   catch(...)\n     {\n       s_head_allocator.deallocate(m_p_head, 1);\n-      throw;\n+      __throw_exception_again;\n     }\n \n   m_p_head->m_p_min = leftmost_descendant(m_p_head->m_p_parent);\n@@ -203,7 +203,7 @@ recursive_copy_node(const_node_pointer p_other_nd)\n     {\n       while (child_i-- > 0)\n \tclear_imp(a_p_children[child_i]);\n-      throw;\n+      __throw_exception_again;\n     }\n \n   new (p_ret) internal_node(p_other_internal_nd->get_e_ind(),"}, {"sha": "4916ae34ff68a821c60466b8e8b0238607c4c1b5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/insert_join_fn_imps.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -95,7 +95,7 @@ join_prep(PB_DS_CLASS_C_DEC& other, split_join_branch_bag& r_bag)\n \t\t\t\t\t\t\t\t\t\t\t\tother.m_p_head->m_p_max)->value()),PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_min)->value()));\n \n   if (!greater && !lesser)\n-    throw join_error();\n+    __throw_join_error();\n \n   rec_join_prep(m_p_head->m_p_parent, other.m_p_head->m_p_parent, r_bag);\n   _GLIBCXX_DEBUG_ONLY(map_debug_base::join(other);)"}, {"sha": "bf04cb4ab7cb3ef5152286736e1afd8bf89944e8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/split_join_branch_bag.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_join_branch_bag.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_join_branch_bag.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_join_branch_bag.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -67,7 +67,7 @@ class split_join_branch_bag\n     catch(...)\n       {\n \ts_internal_node_allocator.deallocate(p_nd, 1);\n-\tthrow;\n+\t__throw_exception_again;\n       }\n   }\n "}, {"sha": "51cfc457c7d6c9e693e41c27bf6a3156c57cc746", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_exponential_size_policy_imp.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_exponential_size_policy_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_exponential_size_policy_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_exponential_size_policy_imp.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -70,7 +70,7 @@ get_nearest_larger_size(size_type size) const\n     {\n       const size_type next_ret = ret*  m_grow_factor;\n       if (next_ret < ret)\n-\tthrow insert_error();\n+\t__throw_insert_error();\n       ret = next_ret;\n     }\n   return ret;\n@@ -86,7 +86,7 @@ get_nearest_smaller_size(size_type size) const\n     {\n       const size_type next_ret = ret*  m_grow_factor;\n       if (next_ret < ret)\n-\tthrow resize_error();\n+\t__throw_resize_error();\n       if (next_ret >= size)\n \treturn (ret);\n       ret = next_ret;"}, {"sha": "f3c597f934087ff002a5f5fa68b49343ea3ae7a4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_load_check_resize_trigger_imp.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -275,7 +275,7 @@ set_loads(std::pair<float, float> load_pair)\n       m_next_shrink_size = old_next_shrink_size;\n       m_next_grow_size = old_next_grow_size;\n       m_resize_needed = old_resize_needed;\n-      throw;\n+      __throw_exception_again;\n     }\n }\n "}, {"sha": "3328c9158ac278037f70e6b8fb20ec5c65adad1f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_prime_size_policy_imp.hpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_prime_size_policy_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_prime_size_policy_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_prime_size_policy_imp.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -145,7 +145,7 @@ get_nearest_larger_size(size_type n) const\n \t\t     detail::g_a_sizes + detail::num_distinct_sizes, n);\n \n   if (p_upper == detail::g_a_sizes + detail::num_distinct_sizes)\n-    throw resize_error();\n+    __throw_resize_error();\n   return *p_upper;\n }\n "}, {"sha": "b8489915c8435b7c41a28acf5bbed38b0fe25071", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_standard_resize_policy_imp.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_standard_resize_policy_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_standard_resize_policy_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_standard_resize_policy_imp.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -200,7 +200,7 @@ resize(size_type new_size)\n       const size_type pot = size_policy_base::get_nearest_larger_size(actual_size);\n \n       if (pot == actual_size && pot < new_size)\n-\tthrow resize_error();\n+\t__throw_resize_error();\n       actual_size = pot;\n     }\n \n@@ -215,12 +215,12 @@ resize(size_type new_size)\n   catch(insert_error& )\n     {\n       m_size = old_size;\n-      throw resize_error();\n+      __throw_resize_error();\n     }\n   catch(...)\n     {\n       m_size = old_size;\n-      throw;\n+      __throw_exception_again;\n     }\n }\n "}, {"sha": "d8eff1749d1416da947eb1ab1b6c3f503f32d551", "filename": "libstdc++-v3/include/ext/pb_ds/exception.hpp", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fexception.hpp?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -51,6 +51,8 @@\n \n namespace pb_ds\n {\n+#if __EXCEPTIONS\n+\n   // Base class for exceptions.\n   struct container_error : public std::logic_error\n   {\n@@ -69,6 +71,42 @@ namespace pb_ds\n \n   // A container cannot be resized.\n   struct resize_error : public container_error { };\n+\n+  void\n+  __throw_container_error(void)\n+  { throw container_error(); }\n+\n+  void\n+  __throw_insert_error(void)\n+  { throw insert_error(); }\n+\n+  void\n+  __throw_join_error(void)\n+  { throw join_error(); }\n+\n+  void\n+  __throw_resize_error(void)\n+  { throw resize_error(); }\n+\n+#else\n+\n+  void\n+  __throw_container_error(void)\n+  { std::abort(); }\n+\n+  void\n+  __throw_insert_error(void)\n+  { std::abort(); }\n+\n+  void\n+  __throw_join_error(void)\n+  { std::abort(); }\n+\n+  void\n+  __throw_resize_error(void)\n+  { std::abort(); }\n+\n+#endif\n } // namespace pb_ds\n \n #endif"}, {"sha": "5e53f052d84dcefd023200ec043170905271c678", "filename": "libstdc++-v3/src/functexcept.cc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fafc2d3a071e8ed0a09ce52df5578e38be489d0/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc?ref=8fafc2d3a071e8ed0a09ce52df5578e38be489d0", "patch": "@@ -101,59 +101,59 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #else\n   void\n   __throw_bad_exception(void)\n-  { abort(); }\n+  { std::abort(); }\n \n   void\n   __throw_bad_alloc(void)\n-  { abort(); }\n+  { std::abort(); }\n \n   void\n   __throw_bad_cast(void)\n-  { abort(); }\n+  { std::abort(); }\n \n   void\n   __throw_bad_typeid(void)\n-  { abort(); }\n+  { std::abort(); }\n \n   void\n   __throw_logic_error(const char*)\n-  { abort(); }\n+  { std::abort(); }\n \n   void\n   __throw_domain_error(const char*)\n-  { abort(); }\n+  { std::abort(); }\n \n   void\n   __throw_invalid_argument(const char*)\n-  { abort(); }\n+  { std::abort(); }\n \n   void\n   __throw_length_error(const char*)\n-  { abort(); }\n+  { std::abort(); }\n \n   void\n   __throw_out_of_range(const char*)\n-  { abort(); }\n+  { std::abort(); }\n \n   void\n   __throw_runtime_error(const char*)\n-  { abort(); }\n+  { std::abort(); }\n \n   void\n   __throw_range_error(const char*)\n-  { abort(); }\n+  { std::abort(); }\n \n   void\n   __throw_overflow_error(const char*)\n-  { abort(); }\n+  { std::abort(); }\n \n   void\n   __throw_underflow_error(const char*)\n-  { abort(); }\n+  { std::abort(); }\n \n   void\n   __throw_ios_failure(const char*)\n-  { abort(); }\n+  { std::abort(); }\n #endif //__EXCEPTIONS\n \n _GLIBCXX_END_NAMESPACE"}]}