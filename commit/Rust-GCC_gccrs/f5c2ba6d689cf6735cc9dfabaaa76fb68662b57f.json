{"sha": "f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVjMmJhNmQ2ODljZjY3MzVjYzlkZmFiYWFhNzZmYjY4NjYyYjU3Zg==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2018-10-26T19:02:23Z"}, "committer": {"name": "Paul Clarke", "email": "pc@gcc.gnu.org", "date": "2018-10-26T19:02:23Z"}, "message": "[rs6000] Add tests for compatible implementations of x86 SSSE3 intrinsics\n\nThis is part 2/2 for contributing PPC64LE support for X86 SSSE3 instrisics.\nThis patch includes testsuite/gcc.target tests, copied from gcc.target/i386,\nfor the intrinsics defined in tmmintrin.h.\n\n[gcc/testsuite]\n\n2018-10-26  Paul A. Clarke  <pc@us.ibm.com>\n\n\t* gcc.target/powerpc/ssse3-check.h: New file.\n\t* gcc.target/powerpc/ssse3-vals.h: New file.\n\t* gcc.target/powerpc/ssse3-pabsb.c: New file.\n\t* gcc.target/powerpc/ssse3-pabsd.c: New file.\n\t* gcc.target/powerpc/ssse3-pabsw.c: New file.\n\t* gcc.target/powerpc/ssse3-palignr.c: New file.\n\t* gcc.target/powerpc/ssse3-phaddd.c: New file.\n\t* gcc.target/powerpc/ssse3-phaddsw.c: New file.\n\t* gcc.target/powerpc/ssse3-phaddw.c: New file.\n\t* gcc.target/powerpc/ssse3-phsubd.c: New file.\n\t* gcc.target/powerpc/ssse3-phsubsw.c: New file.\n\t* gcc.target/powerpc/ssse3-phsubw.c: New file.\n\t* gcc.target/powerpc/ssse3-pmaddubsw.c: New file.\n\t* gcc.target/powerpc/ssse3-pmulhrsw.c: New file.\n\t* gcc.target/powerpc/ssse3-pshufb.c: New file.\n\t* gcc.target/powerpc/ssse3-psignb.c: New file.\n\t* gcc.target/powerpc/ssse3-psignd.c: New file.\n\t* gcc.target/powerpc/ssse3-psignw.c: New file.\n\nFrom-SVN: r265544", "tree": {"sha": "f01e3ee635b5821e50c720994200826cbc2f204b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f01e3ee635b5821e50c720994200826cbc2f204b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1ddadacb897251343102842dbb9ce97d0bae73c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ddadacb897251343102842dbb9ce97d0bae73c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1ddadacb897251343102842dbb9ce97d0bae73c"}], "stats": {"total": 1713, "additions": 1713, "deletions": 0}, "files": [{"sha": "10b4f755149b29e1924caf71a432824741543b91", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -1,3 +1,24 @@\n+2018-10-26  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* gcc.target/powerpc/ssse3-check.h: New file.\n+\t* gcc.target/powerpc/ssse3-vals.h: New file.\n+\t* gcc.target/powerpc/ssse3-pabsb.c: New file.\n+\t* gcc.target/powerpc/ssse3-pabsd.c: New file.\n+\t* gcc.target/powerpc/ssse3-pabsw.c: New file.\n+\t* gcc.target/powerpc/ssse3-palignr.c: New file.\n+\t* gcc.target/powerpc/ssse3-phaddd.c: New file.\n+\t* gcc.target/powerpc/ssse3-phaddsw.c: New file.\n+\t* gcc.target/powerpc/ssse3-phaddw.c: New file.\n+\t* gcc.target/powerpc/ssse3-phsubd.c: New file.\n+\t* gcc.target/powerpc/ssse3-phsubsw.c: New file.\n+\t* gcc.target/powerpc/ssse3-phsubw.c: New file.\n+\t* gcc.target/powerpc/ssse3-pmaddubsw.c: New file.\n+\t* gcc.target/powerpc/ssse3-pmulhrsw.c: New file.\n+\t* gcc.target/powerpc/ssse3-pshufb.c: New file.\n+\t* gcc.target/powerpc/ssse3-psignb.c: New file.\n+\t* gcc.target/powerpc/ssse3-psignd.c: New file.\n+\t* gcc.target/powerpc/ssse3-psignw.c: New file.\n+\n 2018-10-26  Paul A. Clarke  <pc@us.ibm.com>\n \n \t* gcc.target/powerpc/mmx-packs.c: Enable 32 bit execution."}, {"sha": "9fbf3451523341cc813d1a5f5d9724c5353727e0", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-check.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-check.h?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,43 @@\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#include \"m128-check.h\"\n+\n+/* define DEBUG replace abort with printf on error.  */\n+//#define DEBUG 1\n+\n+#define TEST ssse3_test\n+\n+static void ssse3_test (void);\n+\n+static void\n+__attribute__ ((noinline))\n+do_test (void)\n+{\n+  ssse3_test ();\n+}\n+\n+int\n+main ()\n+{\n+#ifdef __BUILTIN_CPU_SUPPORTS__\n+  /* Most SSE intrinsic operations can be implemented via VMX\n+     instructions, but some operations may be faster / simpler\n+     using the POWER8 VSX instructions.  This is especially true\n+     when we are transferring / converting to / from __m64 types.\n+     The direct register transfer instructions from POWER8 are\n+     especially important.  So we test for arch_2_07.  */\n+  if (__builtin_cpu_supports (\"arch_2_07\"))\n+    {\n+      do_test ();\n+#ifdef DEBUG\n+      printf (\"PASSED\\n\");\n+#endif\n+    }\n+#ifdef DEBUG\n+  else\n+    printf (\"SKIPPED\\n\");\n+#endif\n+#endif /* __BUILTIN_CPU_SUPPORTS__ */\n+  return 0;\n+}"}, {"sha": "71203549df3caf2ac4128c84aaa55ca0c8a9f32d", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-pabsb.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsb.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,80 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include \"ssse3-vals.h\"\n+#include <tmmintrin.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_pabsb (int *i1, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  *(__m64 *) r = _mm_abs_pi8 (t1);\n+  _mm_empty ();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_pabsb128 (int *i1, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  *(__m128i *) r = _mm_abs_epi8 (t1);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (int *i1, int *r)\n+{\n+  char *b1 = (char *) i1;\n+  char *bout = (char *) r;\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    if (b1[i] < 0)\n+      bout[i] = -b1[i];\n+    else\n+      bout[i] = b1[i];\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 4)\n+    {\n+      /* Manually compute the result */\n+      compute_correct_result(&vals[i + 0], ck);\n+\n+#ifndef __AVX__\n+      /* Run the 64-bit tests */\n+      ssse3_test_pabsb (&vals[i + 0], &r[0]);\n+      ssse3_test_pabsb (&vals[i + 2], &r[2]);\n+      fail += chk_128 (ck, r);\n+#endif\n+\n+      /* Run the 128-bit tests */\n+      ssse3_test_pabsb128 (&vals[i + 0], r);\n+      fail += chk_128 (ck, r);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "fe5266eed25c1293bd4c95d22e18504cdd4108ad", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-pabsd.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsd.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include \"ssse3-vals.h\"\n+\n+#include <tmmintrin.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_pabsd (int *i1, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  *(__m64 *) r = _mm_abs_pi32 (t1);\n+  _mm_empty ();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_pabsd128 (int *i1, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  *(__m128i *) r = _mm_abs_epi32 (t1);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (int *i1, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (i1[i] < 0)\n+      r[i] = -i1[i];\n+    else\n+      r[i] = i1[i];\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 4)\n+    {\n+      /* Manually compute the result */\n+      compute_correct_result(&vals[i + 0], ck);\n+\n+#ifndef __AVX__\n+      /* Run the 64-bit tests */\n+      ssse3_test_pabsd (&vals[i + 0], &r[0]);\n+      ssse3_test_pabsd (&vals[i + 2], &r[2]);\n+      fail += chk_128 (ck, r);\n+#endif\n+\n+      /* Run the 128-bit tests */\n+      ssse3_test_pabsd128 (&vals[i + 0], r);\n+      fail += chk_128(ck, r);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "9633ef783c9b04e07f96a4877b7b5f980750b372", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-pabsw.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsw.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include \"ssse3-vals.h\"\n+\n+#include <tmmintrin.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_pabsw (int *i1, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  *(__m64 *) r = _mm_abs_pi16 (t1);\n+  _mm_empty ();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_pabsw128 (int *i1, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  *(__m128i *) r = _mm_abs_epi16 (t1);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (int *i1, int *r)\n+{\n+  short *s1 = (short *) i1;\n+  short *sout = (short *) r;\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    if (s1[i] < 0)\n+      sout[i] = -s1[i];\n+    else\n+      sout[i] = s1[i];\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 4)\n+    {\n+      /* Manually compute the result */\n+      compute_correct_result (&vals[i + 0], ck);\n+\n+#ifndef __AVX__\n+      /* Run the 64-bit tests */\n+      ssse3_test_pabsw (&vals[i + 0], &r[0]);\n+      ssse3_test_pabsw (&vals[i + 2], &r[2]);\n+      fail += chk_128 (ck, r);\n+#endif\n+\n+      /* Run the 128-bit tests */\n+      ssse3_test_pabsw128 (&vals[i + 0], r);\n+      fail += chk_128 (ck, r);\n+    }\n+  \n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "0e8491caa6ed3639b32aae261641f0a998470833", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-palignr.c", "status": "added", "additions": 279, "deletions": 0, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-palignr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-palignr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-palignr.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,279 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include \"ssse3-vals.h\"\n+\n+#include <tmmintrin.h>\n+#include <string.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_palignr (int *i1, int *i2, unsigned int imm, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  __m64 t2 = *(__m64 *) i2;\n+\n+  switch (imm)\n+    {\n+    case 0:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 0);\n+      break;\n+    case 1:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 1);\n+      break;\n+    case 2:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 2);\n+      break;\n+    case 3:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 3);\n+      break;\n+    case 4:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 4);\n+      break;\n+    case 5:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 5);\n+      break;\n+    case 6:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 6);\n+      break;\n+    case 7:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 7);\n+      break;\n+    case 8:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 8);\n+      break;\n+    case 9:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 9);\n+      break;\n+    case 10:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 10);\n+      break;\n+    case 11:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 11);\n+      break;\n+    case 12:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 12);\n+      break;\n+    case 13:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 13);\n+      break;\n+    case 14:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 14);\n+      break;\n+    case 15:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 15);\n+      break;\n+    default:\n+      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 16);\n+      break;\n+    }\n+\n+   _mm_empty();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_palignr128 (int *i1, int *i2, unsigned int imm, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  __m128i t2 = *(__m128i *) i2;\n+\n+  switch (imm)\n+    {\n+    case 0:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 0);\n+      break;\n+    case 1:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 1);\n+      break;\n+    case 2:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 2);\n+      break;\n+    case 3:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 3);\n+      break;\n+    case 4:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 4);\n+      break;\n+    case 5:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 5);\n+      break;\n+    case 6:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 6);\n+      break;\n+    case 7:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 7);\n+      break;\n+    case 8:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 8);\n+      break;\n+    case 9:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 9);\n+      break;\n+    case 10:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 10);\n+      break;\n+    case 11:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 11);\n+      break;\n+    case 12:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 12);\n+      break;\n+    case 13:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 13);\n+      break;\n+    case 14:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 14);\n+      break;\n+    case 15:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 15);\n+      break;\n+    case 16:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 16);\n+      break;\n+    case 17:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 17);\n+      break;\n+    case 18:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 18);\n+      break;\n+    case 19:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 19);\n+      break;\n+    case 20:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 20);\n+      break;\n+    case 21:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 21);\n+      break;\n+    case 22:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 22);\n+      break;\n+    case 23:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 23);\n+      break;\n+    case 24:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 24);\n+      break;\n+    case 25:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 25);\n+      break;\n+    case 26:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 26);\n+      break;\n+    case 27:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 27);\n+      break;\n+    case 28:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 28);\n+      break;\n+    case 29:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 29);\n+      break;\n+    case 30:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 30);\n+      break;\n+    case 31:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 31);\n+      break;\n+    default:\n+      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 32);\n+      break;\n+    }\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result_128 (int *i1, int *i2, unsigned int imm, int *r)\n+{\n+  char buf [32];\n+  char *bout = (char *) r;\n+  int i;\n+\n+  memcpy (&buf[0], i2, 16);\n+  memcpy (&buf[16], i1, 16);\n+\n+  for (i = 0; i < 16; i++)\n+    if (imm >= 32 || imm + i >= 32)\n+      bout[i] = 0;\n+    else\n+      bout[i] = buf[imm + i];\n+}\n+\n+#ifndef __AVX__\n+static void\n+compute_correct_result_64 (int *i1, int *i2, unsigned int imm, int *r)\n+{\n+  char buf [16];\n+  char *bout = (char *)r;\n+  int i;\n+\n+  /* Handle the first half */\n+  memcpy (&buf[0], i2, 8);\n+  memcpy (&buf[8], i1, 8);\n+\n+  for (i = 0; i < 8; i++)\n+    if (imm >= 16 || imm + i >= 16)\n+      bout[i] = 0;\n+    else\n+      bout[i] = buf[imm + i];\n+\n+  /* Handle the second half */\n+  memcpy (&buf[0], &i2[2], 8);\n+  memcpy (&buf[8], &i1[2], 8);\n+\n+  for (i = 0; i < 8; i++)\n+    if (imm >= 16 || imm + i >= 16)\n+      bout[i + 8] = 0;\n+    else\n+      bout[i + 8] = buf[imm + i];\n+}\n+#endif\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  unsigned int imm;\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 8)\n+    for (imm = 0; imm < 100; imm++)\n+      {\n+#ifndef __AVX__\n+\t/* Manually compute the result */\n+\tcompute_correct_result_64 (&vals[i + 0], &vals[i + 4], imm, ck);\n+\n+\t/* Run the 64-bit tests */\n+\tssse3_test_palignr (&vals[i + 0], &vals[i + 4], imm, &r[0]);\n+\tssse3_test_palignr (&vals[i + 2], &vals[i + 6], imm, &r[2]);\n+\tfail += chk_128 (ck, r);\n+#endif\n+\n+\t/* Recompute the results for 128-bits */\n+\tcompute_correct_result_128 (&vals[i + 0], &vals[i + 4], imm, ck);\n+\n+\t/* Run the 128-bit tests */\n+\tssse3_test_palignr128 (&vals[i + 0], &vals[i + 4], imm, r);\n+\tfail += chk_128 (ck, r);\n+      }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "2f0f8490893f6c905dc7c6d61d42f4ddd3b19894", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-phaddd.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddd.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include \"ssse3-vals.h\"\n+\n+#include <tmmintrin.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_phaddd (int *i1, int *i2, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  __m64 t2 = *(__m64 *) i2;\n+  *(__m64 *) r = _mm_hadd_pi32 (t1, t2);\n+  _mm_empty();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_phaddd128 (int *i1, int *i2, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  __m128i t2 = *(__m128i *) i2;\n+  *(__m128i *) r = _mm_hadd_epi32 (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result(int *i1, int *i2, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    r[i] = i1[2 * i] + i1[2 * i + 1];\n+  for (i = 0; i < 2; i++)\n+    r[i + 2] = i2[2 * i] + i2[2 * i + 1];\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  int fail = 0;\n+\n+\n+  for (i = 0; i < 256; i += 8)\n+    {\n+      /* Manually compute the result */\n+      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+\n+#ifndef __AVX__\n+      /* Run the 64-bit tests */\n+      ssse3_test_phaddd (&vals[i + 0], &vals[i + 2], &r[0]);\n+      ssse3_test_phaddd (&vals[i + 4], &vals[i + 6], &r[2]);\n+      fail += chk_128 (ck, r);\n+#endif\n+\n+      /* Run the 128-bit tests */\n+      ssse3_test_phaddd128 (&vals[i + 0], &vals[i + 4], r);\n+      fail += chk_128 (ck, r);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "52f39afd1342925c069f744a0deabbc947c1264f", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-phaddsw.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddsw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddsw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddsw.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,95 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include \"ssse3-vals.h\"\n+\n+#include <tmmintrin.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_phaddsw (int *i1, int *i2, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  __m64 t2 = *(__m64 *) i2;\n+  *(__m64 *) r = _mm_hadds_pi16 (t1, t2);\n+  _mm_empty ();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_phaddsw128 (int *i1, int *i2, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  __m128i t2 = *(__m128i *) i2;\n+ *(__m128i *) r = _mm_hadds_epi16 (t1, t2);\n+}\n+\n+static short\n+signed_saturate_to_word (int x)\n+{\n+  if (x > (int) 0x7fff)\n+    return 0x7fff;\n+\n+  if (x < (int) 0xffff8000)\n+    return 0x8000;\n+\n+  return (short) x;\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (int *i1, int *i2, int *r)\n+{\n+  short *s1 = (short *) i1;\n+  short *s2 = (short *) i2;\n+  short *sout = (short *) r;\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    sout[i] = signed_saturate_to_word(s1[2 * i] + s1[2 * i + 1]);\n+  for (i = 0; i < 4; i++)\n+    sout[i + 4] = signed_saturate_to_word(s2[2 * i] + s2[2 * i + 1]);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 8)\n+    {\n+      /* Manually compute the result */\n+      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+\n+#ifndef __AVX__\n+      /* Run the 64-bit tests */\n+      ssse3_test_phaddsw (&vals[i + 0], &vals[i + 2], &r[0]);\n+      ssse3_test_phaddsw (&vals[i + 4], &vals[i + 6], &r[2]);\n+      fail += chk_128 (ck, r);\n+#endif\n+\n+      /* Run the 128-bit tests */\n+      ssse3_test_phaddsw128 (&vals[i + 0], &vals[i + 4], r);\n+      fail += chk_128 (ck, r);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "96cf7f685c4ec5f76714058e5422c7e89e8bf469", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-phaddw.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddw.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include \"ssse3-vals.h\"\n+\n+#include <tmmintrin.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_phaddw (int *i1, int *i2, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  __m64 t2 = *(__m64 *) i2;\n+  *(__m64 *) r = _mm_hadd_pi16 (t1, t2);\n+  _mm_empty ();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_phaddw128 (int *i1, int *i2, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  __m128i t2 = *(__m128i *) i2;\n+  *(__m128i *) r = _mm_hadd_epi16 (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result(int *i1, int *i2, int *r)\n+{\n+  short *s1 = (short *) i1;\n+  short *s2 = (short *) i2;\n+  short *sout = (short *) r;\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    sout[i] = s1[2 * i] + s1[2 * i + 1];\n+\n+  for (i = 0; i < 4; i++)\n+    sout[i + 4] = s2[2 * i] + s2[2 * i + 1];\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 8)\n+    {\n+      /* Manually compute the result */\n+      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+\n+#ifndef __AVX__\n+      /* Run the 64-bit tests */\n+      ssse3_test_phaddw (&vals[i + 0], &vals[i + 2], &r[0]);\n+      ssse3_test_phaddw (&vals[i + 4], &vals[i + 6], &r[2]);\n+      fail += chk_128 (ck, r);\n+#endif\n+\n+      /* Run the 128-bit tests */\n+      ssse3_test_phaddw128 (&vals[i + 0], &vals[i + 4], r);\n+      fail += chk_128 (ck, r);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "098477977f7c4618b3db6a5616c69ca0981b8a19", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-phsubd.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubd.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,80 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include \"ssse3-vals.h\"\n+\n+#include <tmmintrin.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_phsubd (int *i1, int *i2, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  __m64 t2 = *(__m64 *) i2;\n+  *(__m64 *) r = _mm_hsub_pi32(t1, t2);\n+  _mm_empty ();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_phsubd128 (int *i1, int *i2, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  __m128i t2 = *(__m128i *) i2;\n+  *(__m128i *) r = _mm_hsub_epi32 (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (int *i1, int *i2, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 2; i++)\n+    r[i] = i1[2 * i] - i1[2 * i + 1];\n+  for (i = 0; i < 2; i++)\n+    r[i + 2] = i2[2 * i] - i2[2 * i + 1];\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 8)\n+    {\n+      /* Manually compute the result */\n+      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+\n+#ifndef __AVX__\n+      /* Run the 64-bit tests */\n+      ssse3_test_phsubd (&vals[i + 0], &vals[i + 2], &r[0]);\n+      ssse3_test_phsubd (&vals[i + 4], &vals[i + 6], &r[2]);\n+      fail += chk_128 (ck, r);\n+#endif\n+\n+      /* Run the 128-bit tests */\n+      ssse3_test_phsubd128 (&vals[i + 0], &vals[i + 4], r);\n+      fail += chk_128 (ck, r);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "52b36e0771caafaca574d347c5b16c79c1a01e22", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-phsubsw.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubsw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubsw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubsw.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,98 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include \"ssse3-vals.h\"\n+\n+#include <tmmintrin.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_phsubsw (int *i1, int *i2, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  __m64 t2 = *(__m64 *) i2;\n+\n+  *(__m64 *) r = _mm_hsubs_pi16 (t1, t2);\n+\n+  _mm_empty ();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_phsubsw128 (int *i1, int *i2, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  __m128i t2 = *(__m128i *) i2;\n+  *(__m128i *) r = _mm_hsubs_epi16 (t1, t2);\n+}\n+\n+static short\n+signed_saturate_to_word (int x)\n+{\n+  if (x > (int )0x7fff)\n+    return 0x7fff;\n+\n+  if (x < (int) 0xffff8000)\n+    return 0x8000;\n+\n+  return (short)x;\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (int *i1, int *i2, int *r)\n+{\n+  short *s1 = (short *) i1;\n+  short *s2 = (short *) i2;\n+  short *sout = (short *) r;\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    sout[i] = signed_saturate_to_word (s1[2 * i] - s1[2 * i + 1]);\n+\n+  for (i = 0; i < 4; i++)\n+    sout[i + 4] = signed_saturate_to_word (s2[2 * i] - s2[2 * i + 1]);\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 8)\n+    {\n+      /* Manually compute the result */\n+      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+\n+#ifndef __AVX__\n+      /* Run the 64-bit tests */\n+      ssse3_test_phsubsw (&vals[i + 0], &vals[i + 2], &r[0]);\n+      ssse3_test_phsubsw (&vals[i + 4], &vals[i + 6], &r[2]);\n+      fail += chk_128 (ck, r);\n+#endif\n+\n+      /* Run the 128-bit tests */\n+      ssse3_test_phsubsw128 (&vals[i + 0], &vals[i + 4], r);\n+      fail += chk_128 (ck, r);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "19d4168bc838b2044a96f35c16f2aa08faf12bb1", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-phsubw.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubw.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+#include \"ssse3-vals.h\"\n+\n+#include <tmmintrin.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_phsubw (int *i1, int *i2, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  __m64 t2 = *(__m64 *) i2;\n+  *(__m64 *) r = _mm_hsub_pi16 (t1, t2);\n+  _mm_empty ();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_phsubw128 (int *i1, int *i2, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  __m128i t2 = *(__m128i *) i2;\n+\n+  *(__m128i *) r = _mm_hsub_epi16 (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (int *i1, int *i2, int *r)\n+{\n+  short *s1 = (short *) i1;\n+  short *s2 = (short *) i2;\n+  short *sout = (short *) r;\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    sout[i] = s1[2 * i] - s1[2 * i + 1];\n+  for (i = 0; i < 4; i++)\n+    sout[i + 4] = s2[2 * i] - s2[2 * i + 1];\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 8)\n+    {\n+      /* Manually compute the result */\n+      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+\n+#ifndef __AVX__\n+      /* Run the 64-bit tests */\n+      ssse3_test_phsubw (&vals[i + 0], &vals[i + 2], &r[0]);\n+      ssse3_test_phsubw (&vals[i + 4], &vals[i + 6], &r[2]);\n+      fail += chk_128 (ck, r);\n+#endif\n+\n+      /* Run the 128-bit tests */\n+      ssse3_test_phsubw128 (&vals[i + 0], &vals[i + 4], r);\n+      fail += chk_128 (ck, r);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "1523a3467b5dc0b7d68a3849cf048841a2fddd57", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-pmaddubsw.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pmaddubsw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pmaddubsw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pmaddubsw.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,98 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include \"ssse3-vals.h\"\n+\n+#include <tmmintrin.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_pmaddubsw (int *i1, int *i2, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  __m64 t2 = *(__m64 *) i2;\n+  *(__m64 *) r = _mm_maddubs_pi16 (t1, t2);\n+  _mm_empty ();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_pmaddubsw128 (int *i1, int *i2, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  __m128i t2 = *(__m128i *) i2;\n+  *(__m128i *) r = _mm_maddubs_epi16 (t1, t2);\n+}\n+\n+static short\n+signed_saturate_to_word(int x)\n+{\n+  if (x > (int) 0x7fff)\n+    return 0x7fff;\n+\n+  if (x < (int) 0xffff8000)\n+    return 0x8000;\n+\n+  return (short) x;\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (int *i1, int *i2, int *r)\n+{\n+  unsigned char *ub1 = (unsigned char *) i1;\n+  char *sb2 = (char *) i2;\n+  short *sout = (short *) r;\n+  int t0;\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    { \n+      t0 = ((int) ub1[2 * i] * (int) sb2[2 * i] +\n+\t    (int) ub1[2 * i + 1] * (int) sb2[2 * i + 1]);\n+      sout[i] = signed_saturate_to_word (t0);\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 8)\n+    {\n+      /* Manually compute the result */\n+      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+\n+#ifndef __AVX__\n+      /* Run the 64-bit tests */\n+      ssse3_test_pmaddubsw (&vals[i + 0], &vals[i + 4], &r[0]);\n+      ssse3_test_pmaddubsw (&vals[i + 2], &vals[i + 6], &r[2]);\n+      fail += chk_128 (ck, r);\n+#endif\n+\n+      /* Run the 128-bit tests */\n+      ssse3_test_pmaddubsw128 (&vals[i + 0], &vals[i + 4], r);\n+      fail += chk_128 (ck, r);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "d084eb733bd1682bedb3268433393d5cf639c9b4", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-pmulhrsw.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pmulhrsw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pmulhrsw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pmulhrsw.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,85 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include \"ssse3-vals.h\"\n+\n+#include <tmmintrin.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_pmulhrsw (int *i1, int *i2, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  __m64 t2 = *(__m64 *) i2;\n+  *(__m64 *) r = _mm_mulhrs_pi16 (t1, t2);\n+  _mm_empty ();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_pmulhrsw128 (int *i1, int *i2, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  __m128i t2 = *(__m128i *) i2;\n+  *(__m128i *) r = _mm_mulhrs_epi16 (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (int *i1, int *i2, int *r)\n+{\n+  short *s1 = (short *) i1;\n+  short *s2 = (short *) i2;\n+  short *sout = (short *) r;\n+  int t0;\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      t0 = (((int) s1[i] * (int) s2[i]) >> 14) + 1;\n+      sout[i] = (short) (t0 >> 1);\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 8)\n+    {\n+      /* Manually compute the result */\n+      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+\n+#ifndef __AVX__\n+      /* Run the 64-bit tests */\n+      ssse3_test_pmulhrsw (&vals[i + 0], &vals[i + 4], &r[0]);\n+      ssse3_test_pmulhrsw (&vals[i + 2], &vals[i + 6], &r[2]);\n+      fail += chk_128 (ck, r);\n+#endif\n+\n+      /* Run the 128-bit tests */\n+      ssse3_test_pmulhrsw128 (&vals[i + 0], &vals[i + 4], r);\n+      fail += chk_128 (ck, r);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "d1726ff46ea05c7121fb490987ab30f9614fd4c3", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-pshufb.c", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pshufb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pshufb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pshufb.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,114 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include \"ssse3-vals.h\"\n+\n+#include <tmmintrin.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_pshufb (int *i1, int *i2, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  __m64 t2 = *(__m64 *) i2;\n+  *(__m64 *)r = _mm_shuffle_pi8 (t1, t2);\n+  _mm_empty ();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_pshufb128 (int *i1, int *i2, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  __m128i t2 = *(__m128i *) i2;\n+  *(__m128i *)r = _mm_shuffle_epi8 (t1, t2);\n+}\n+\n+#ifndef __AVX__\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result_64 (int *i1, int *i2, int *r)\n+{\n+  char *b1 = (char *) i1;\n+  char *b2 = (char *) i2;\n+  char *bout = (char *) r;\n+  int i;\n+  char select;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      select = b2[i];\n+      if (select & 0x80)\n+\tbout[i] = 0;\n+      else if (i < 8)\n+\tbout[i] = b1[select & 0x7];\n+      else\n+\tbout[i] = b1[8 + (select & 0x7)];\n+    }\n+}\n+#endif\n+\n+static void\n+compute_correct_result_128 (int *i1, int *i2, int *r)\n+{\n+  char *b1 = (char *) i1;\n+  char *b2 = (char *) i2;\n+  char *bout = (char *) r;\n+  int i;\n+  char select;\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      select = b2[i];\n+      if (select & 0x80)\n+\tbout[i] = 0;\n+      else\n+\tbout[i] = b1[select & 0xf];\n+    }\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 8)\n+    {\n+#ifndef __AVX__\n+      /* Manually compute the result */\n+      compute_correct_result_64 (&vals[i + 0], &vals[i + 4], ck);\n+\n+      /* Run the 64-bit tests */\n+      ssse3_test_pshufb (&vals[i + 0], &vals[i + 4], &r[0]);\n+      ssse3_test_pshufb (&vals[i + 2], &vals[i + 6], &r[2]);\n+      fail += chk_128 (ck, r);\n+#endif\n+\n+      /* Recompute the result for 128-bits */\n+      compute_correct_result_128 (&vals[i + 0], &vals[i + 4], ck);\n+\n+      /* Run the 128-bit tests */\n+      ssse3_test_pshufb128 (&vals[i + 0], &vals[i + 4], r);\n+      fail += chk_128 (ck, r);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "b44d76a48eda1c80e61a4c8ba5d8ed766ee3d228", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-psignb.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignb.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,85 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+#include \"ssse3-vals.h\"\n+\n+#include <tmmintrin.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_psignb (int *i1, int *i2, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  __m64 t2 = *(__m64 *) i2;\n+  *(__m64 *) r = _mm_sign_pi8 (t1, t2);\n+  _mm_empty ();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_psignb128 (int *i1, int *i2, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  __m128i t2 = *(__m128i *) i2;\n+  *(__m128i *) r = _mm_sign_epi8 (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (int *i1, int *i2, int *r)\n+{\n+  char *b1 = (char *) i1;\n+  char *b2 = (char *) i2;\n+  char *bout = (char *) r;\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    if (b2[i] < 0)\n+      bout[i] = -b1[i];\n+    else if (b2[i] == 0)\n+      bout[i] = 0;\n+    else\n+      bout[i] = b1[i];\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 8)\n+    {\n+      /* Manually compute the result */\n+      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+\n+#ifndef __AVX__\n+      /* Run the 64-bit tests */\n+      ssse3_test_psignb (&vals[i + 0], &vals[i + 4], &r[0]);\n+      ssse3_test_psignb (&vals[i + 2], &vals[i + 6], &r[2]);\n+      fail += chk_128 (ck, r);\n+#endif\n+\n+      /* Run the 128-bit tests */\n+      ssse3_test_psignb128 (&vals[i + 0], &vals[i + 4], r);\n+      fail += chk_128 (ck, r);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "eeee3daed6cac2fa883948148cdb5257602ae701", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-psignd.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignd.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,82 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+#include \"ssse3-vals.h\"\n+\n+#include <tmmintrin.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_psignd (int *i1, int *i2, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  __m64 t2 = *(__m64 *) i2;\n+  *(__m64 *) r = _mm_sign_pi32 (t1, t2);\n+  _mm_empty ();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_psignd128 (int *i1, int *i2, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  __m128i t2 = *(__m128i *) i2;\n+  *(__m128i *)r = _mm_sign_epi32 (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (int *i1, int *i2, int *r)\n+{\n+  int i;\n+\n+  for (i = 0; i < 4; i++)\n+    if (i2[i] < 0)\n+      r[i] = -i1[i];\n+    else if (i2[i] == 0)\n+      r[i] = 0;\n+    else\n+      r[i] = i1[i];\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 8)\n+    {\n+      /* Manually compute the result */\n+      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+\n+#ifndef __AVX__\n+      /* Run the 64-bit tests */\n+      ssse3_test_psignd (&vals[i + 0], &vals[i + 4], &r[0]);\n+      ssse3_test_psignd (&vals[i + 2], &vals[i + 6], &r[2]);\n+      fail += chk_128 (ck, r);\n+#endif\n+\n+      /* Run the 128-bit tests */\n+      ssse3_test_psignd128 (&vals[i + 0], &vals[i + 4], r);\n+      fail += chk_128 (ck, r);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "2efe524d3dbfc5f056f8b2735fc83c074e6758b9", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-psignw.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignw.c?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,85 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mpower8-vector -Wno-psabi\" } */\n+/* { dg-require-effective-target p8vector_hw } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"ssse3-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST ssse3_test\n+#endif\n+\n+#include CHECK_H\n+#include \"ssse3-vals.h\"\n+\n+#include <tmmintrin.h>\n+\n+#ifndef __AVX__\n+/* Test the 64-bit form */\n+static void\n+ssse3_test_psignw (int *i1, int *i2, int *r)\n+{\n+  __m64 t1 = *(__m64 *) i1;\n+  __m64 t2 = *(__m64 *) i2;\n+  *(__m64 *) r = _mm_sign_pi16 (t1, t2);\n+  _mm_empty ();\n+}\n+#endif\n+\n+/* Test the 128-bit form */\n+static void\n+ssse3_test_psignw128 (int *i1, int *i2, int *r)\n+{\n+  /* Assumes incoming pointers are 16-byte aligned */\n+  __m128i t1 = *(__m128i *) i1;\n+  __m128i t2 = *(__m128i *) i2;\n+ *(__m128i *) r = _mm_sign_epi16 (t1, t2);\n+}\n+\n+/* Routine to manually compute the results */\n+static void\n+compute_correct_result (int *i1, int *i2, int *r)\n+{\n+  short *s1 = (short *) i1;\n+  short *s2 = (short *) i2;\n+  short *sout = (short *) r;\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    if (s2[i] < 0)\n+      sout[i] = -s1[i];\n+    else if (s2[i] == 0)\n+      sout[i] = 0;\n+    else\n+      sout[i] = s1[i];\n+}\n+\n+static void\n+TEST (void)\n+{\n+  int i;\n+  int r [4] __attribute__ ((aligned(16)));\n+  int ck [4];\n+  int fail = 0;\n+\n+  for (i = 0; i < 256; i += 8)\n+    {\n+      /* Manually compute the result */\n+      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+\n+#ifndef __AVX__\n+      /* Run the 64-bit tests */\n+      ssse3_test_psignw (&vals[i + 0], &vals[i + 4], &r[0]);\n+      ssse3_test_psignw (&vals[i + 2], &vals[i + 6], &r[2]);\n+      fail += chk_128 (ck, r);\n+#endif\n+\n+      /* Run the 128-bit tests */\n+      ssse3_test_psignw128 (&vals[i + 0], &vals[i + 4], r);\n+      fail += chk_128 (ck, r);\n+    }\n+\n+  if (fail != 0)\n+    abort ();\n+}"}, {"sha": "048ca911c09c13f0dde1d1d542269fa312b2adb5", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-vals.h", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-vals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-vals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-vals.h?ref=f5c2ba6d689cf6735cc9dfabaaa76fb68662b57f", "patch": "@@ -0,0 +1,60 @@\n+/* Routine to check correctness of the results */\n+static int\n+chk_128 (int *v1, int *v2)\n+{\n+  int i;\n+  int n_fails = 0;\n+\n+  for (i = 0; i < 4; i++)\n+    if (v1[i] != v2[i])\n+      n_fails += 1;\n+\n+  return n_fails;\n+}\n+\n+static int vals [256] __attribute__ ((aligned(16))) =\n+{\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x5be800ee, 0x4f2d7b15,\n+  0x409d9291, 0xdd95f27f, 0x423986e3, 0x21a4d2cd, 0xa7056d84, 0x4f4e5a3b,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n+  0x73ef0244, 0xcd836329, 0x847f634f, 0xa7e3abcf, 0xb4c14764, 0x1ef42c06,\n+  0x504f29ac, 0x4ae7ca73, 0xaddde3c9, 0xf63ded2e, 0xa5d3553d, 0xa52ae05f,\n+  0x6fd3c83a, 0x7dc2b300, 0x76b05de7, 0xea8ebae5, 0x549568dd, 0x172f0358,\n+  0x917eadf0, 0x796fb0a7, 0xb39381af, 0xd0591d61, 0x731d2f17, 0xbc4b6f5d,\n+  0x8ec664c2, 0x3c199c19, 0x9c81db12, 0x6d85913b, 0x486107a9, 0xab6f4b26,\n+  0x5630d37c, 0x20836e85, 0x40d4e746, 0xdfbaba36, 0xbeacaa69, 0xb3c84083,\n+  0x8a688eb4, 0x08cde481, 0x66e7a190, 0x74ee1639, 0xb3942a19, 0xe0c40471,\n+  0x9b789489, 0x9751207a, 0x543a1524, 0x41da7ad6, 0x614bb563, 0xf86f57b1,\n+  0x69e62199, 0x2150cb12, 0x9ed74062, 0x429471f4, 0xad28502b, 0xf2e2d4d5,\n+  0x45b6ce09, 0xaaa5e649, 0xb46da484, 0x0a637515, 0xae7a3212, 0x5afc784c,\n+  0x776cfbbe, 0x9c542bb2, 0x64193aa8, 0x16e8a655, 0x4e3d2f92, 0xe05d7b72,\n+  0x89854ebc, 0x8c318814, 0xb81e76e0, 0x3f2625f5, 0x61b44852, 0x5209d7ad,\n+  0x842fe317, 0xd3cfcca1, 0x8d287cc7, 0x80f0c9a8, 0x4215f4e5, 0x563993d6,\n+  0x5d627433, 0xc4449e35, 0x5b4fe009, 0x3ef92286, 0xacbc8927, 0x549ab870,\n+  0x9ac5b959, 0xed8f1c91, 0x7ecf02cd, 0x989c0e8b, 0xa31d6918, 0x1dc2bcc1,\n+  0x99d3f3cc, 0x6857acc8, 0x45d7324a, 0xaebdf2e6, 0x7af2f2ae, 0x09716f73,\n+  0x7816e694, 0xc65493c0, 0x9f7e87bc, 0xaa96cd40, 0xbfb5bfc6, 0x01a2cce7,\n+  0x5f1d8c46, 0x45303efb, 0xb24607c3, 0xef2009a7, 0xba873753, 0xbefb14bc,\n+  0x74e53cd3, 0x70124708, 0x6eb4bdbd, 0xf3ba5e43, 0x4c94085f, 0x0c03e7e0,\n+  0x9a084931, 0x62735424, 0xaeee77c5, 0xdb34f90f, 0x6860cbdd, 0xaf77cf9f,\n+  0x95b28158, 0x23bd70d7, 0x9fbc3d88, 0x742e659e, 0x53bcfb48, 0xb8a63f6c,\n+  0x4dcf3373, 0x2b168627, 0x4fe20745, 0xd0af5e94, 0x22514e6a, 0xb8ef25c2,\n+  0x89ec781a, 0x13d9002b, 0x6d724500, 0x7fdbf63f, 0xb0e9ced5, 0xf919e0f3,\n+  0x00fef203, 0x8905d47a, 0x434e7517, 0x4aef8e2c, 0x689f51e8, 0xe513b7c3,\n+  0x72bbc5d2, 0x3a222f74, 0x05c3a0f9, 0xd5489d82, 0xb41fbe83, 0xec5d305f,\n+  0x5ea02b0b, 0xb176065b, 0xa8eb404e, 0x80349117, 0x210fd49e, 0x43898d0e,\n+  0x6c151b9c, 0x8742df18, 0x7b64de73, 0x1dbf52b2, 0x55c9cb19, 0xeb841f10,\n+  0x10b8ae76, 0x0764ecb6, 0xb7479018, 0x2672cb3f, 0x7ac9ac90, 0x4be5332c,\n+  0x8f1a0615, 0x4efb7a77, 0x16551a85, 0xdb2c3d66, 0x49179c07, 0x5dc4657e,\n+  0x5e76907e, 0xd7486a9c, 0x445204a4, 0x65cdc426, 0x33f86ded, 0xcba95dda,\n+  0x83351f16, 0xfedefad9, 0x639b620f, 0x86896a64, 0xba4099ba, 0x965f4a21,\n+  0x1247154f, 0x25604c42, 0x5862d692, 0xb1e9149e, 0x612516a5, 0x02c49bf8,\n+  0x631212bf, 0x9f69f54e, 0x168b63b0, 0x310a25ba, 0xa42a59cd, 0x084f0af9,\n+  0x44a06cec, 0x5c0cda40, 0xb932d721, 0x7c42bb0d, 0x213cd3f0, 0xedc7f5a4,\n+  0x7fb85859, 0x6b3da5ea, 0x61cd591e, 0xe8e9aa08, 0x4361fc34, 0x53d40d2a,\n+  0x0511ad1b, 0xf996b44c, 0xb5ead756, 0xc022138d, 0x6172adf1, 0xa4a0a3b4,\n+  0x8c2977b8, 0xa8e482ed, 0x04fcdd6b, 0x3f7b85d4, 0x4fca1e46, 0xa392ddca,\n+  0x569fc791, 0x346a706c, 0x543bf3eb, 0x895b3cde, 0x2146bb80, 0x26b3c168,\n+  0x929998db, 0x1ea472c9, 0x7207b36b, 0x6a8f10d4 \n+};"}]}