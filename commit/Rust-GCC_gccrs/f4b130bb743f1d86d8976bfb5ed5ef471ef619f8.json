{"sha": "f4b130bb743f1d86d8976bfb5ed5ef471ef619f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRiMTMwYmI3NDNmMWQ4NmQ4OTc2YmZiNWVkNWVmNDcxZWY2MTlmOA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-03-15T19:36:26Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-03-15T19:36:26Z"}, "message": "configure.ac (libffi_cv_as_x86_64_unwind_section_type): New test.\n\n\t* configure.ac (libffi_cv_as_x86_64_unwind_section_type): New test.\n\t* configure: Regenerate.\n\t* fficonfig.h.in: Regenerate.\n\t* libffi/src/x86/unix64.S (.eh_frame)\n\t[HAVE_AS_X86_64_UNWIND_SECTION_TYPE]: Use @unwind section type.\n\nFrom-SVN: r157466", "tree": {"sha": "b08b4948d80791b0d6ae7cf89ddff136424373b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b08b4948d80791b0d6ae7cf89ddff136424373b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4b130bb743f1d86d8976bfb5ed5ef471ef619f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b130bb743f1d86d8976bfb5ed5ef471ef619f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4b130bb743f1d86d8976bfb5ed5ef471ef619f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b130bb743f1d86d8976bfb5ed5ef471ef619f8/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7dee65d88aac66bb29077c470a10b6969ac8450d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dee65d88aac66bb29077c470a10b6969ac8450d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dee65d88aac66bb29077c470a10b6969ac8450d"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "200f5252d03a0b5b2c5d88a28a68a588a888b1f8", "filename": "libffi/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b130bb743f1d86d8976bfb5ed5ef471ef619f8/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b130bb743f1d86d8976bfb5ed5ef471ef619f8/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=f4b130bb743f1d86d8976bfb5ed5ef471ef619f8", "patch": "@@ -1,3 +1,11 @@\n+2010-03-15  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (libffi_cv_as_x86_64_unwind_section_type): New test.\n+\t* configure: Regenerate.\n+\t* fficonfig.h.in: Regenerate.\n+\t* libffi/src/x86/unix64.S (.eh_frame)\n+\t[HAVE_AS_X86_64_UNWIND_SECTION_TYPE]: Use @unwind section type.\n+\n 2010-02-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* doc/libffi.texi (The Closure API): Fix typo."}, {"sha": "5555e51289dd865aa723810fbd44d773fb52f032", "filename": "libffi/configure", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b130bb743f1d86d8976bfb5ed5ef471ef619f8/libffi%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b130bb743f1d86d8976bfb5ed5ef471ef619f8/libffi%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure?ref=f4b130bb743f1d86d8976bfb5ed5ef471ef619f8", "patch": "@@ -12419,6 +12419,29 @@ $as_echo \"#define FFI_MMAP_EXEC_WRIT 1\" >>confdefs.h\n      ;;\n esac\n \n+if test x$TARGET = xX86_64; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler supports unwind section type\" >&5\n+$as_echo_n \"checking assembler supports unwind section type... \" >&6; }\n+if test \"${libffi_cv_as_x86_64_unwind_section_type+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+\tlibffi_cv_as_x86_64_unwind_section_type=yes\n+\techo '.section .eh_frame,\"a\",@unwind' > conftest.s\n+\tif $CC $CFLAGS -c conftest.s 2>&1 | grep -i warning > /dev/null; then\n+\t    libffi_cv_as_x86_64_unwind_section_type=no\n+\tfi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libffi_cv_as_x86_64_unwind_section_type\" >&5\n+$as_echo \"$libffi_cv_as_x86_64_unwind_section_type\" >&6; }\n+    if test \"x$libffi_cv_as_x86_64_unwind_section_type\" = xyes; then\n+\n+$as_echo \"#define HAVE_AS_X86_64_UNWIND_SECTION_TYPE 1\" >>confdefs.h\n+\n+    fi\n+fi\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether .eh_frame section should be read-only\" >&5\n $as_echo_n \"checking whether .eh_frame section should be read-only... \" >&6; }\n if test \"${libffi_cv_ro_eh_frame+set}\" = set; then :"}, {"sha": "1b484f94bde071c9a08965dfac7b45ef9900be04", "filename": "libffi/configure.ac", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b130bb743f1d86d8976bfb5ed5ef471ef619f8/libffi%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b130bb743f1d86d8976bfb5ed5ef471ef619f8/libffi%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure.ac?ref=f4b130bb743f1d86d8976bfb5ed5ef471ef619f8", "patch": "@@ -284,6 +284,21 @@ case \"$target\" in\n      ;;\n esac\n \n+if test x$TARGET = xX86_64; then\n+    AC_CACHE_CHECK([assembler supports unwind section type],\n+\tlibffi_cv_as_x86_64_unwind_section_type, [\n+\tlibffi_cv_as_x86_64_unwind_section_type=yes\n+\techo '.section .eh_frame,\"a\",@unwind' > conftest.s\n+\tif $CC $CFLAGS -c conftest.s 2>&1 | grep -i warning > /dev/null; then\n+\t    libffi_cv_as_x86_64_unwind_section_type=no\n+\tfi\n+\t])\n+    if test \"x$libffi_cv_as_x86_64_unwind_section_type\" = xyes; then\n+\tAC_DEFINE(HAVE_AS_X86_64_UNWIND_SECTION_TYPE, 1,\n+\t\t  [Define if your assembler supports unwind section type.])\n+    fi\n+fi\n+\n AC_CACHE_CHECK([whether .eh_frame section should be read-only],\n     libffi_cv_ro_eh_frame, [\n \tlibffi_cv_ro_eh_frame=no"}, {"sha": "7231cc5ead3c59eba3ac56f385ea0de5d9df0f86", "filename": "libffi/fficonfig.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b130bb743f1d86d8976bfb5ed5ef471ef619f8/libffi%2Ffficonfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b130bb743f1d86d8976bfb5ed5ef471ef619f8/libffi%2Ffficonfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ffficonfig.h.in?ref=f4b130bb743f1d86d8976bfb5ed5ef471ef619f8", "patch": "@@ -43,6 +43,9 @@\n    */\n #undef HAVE_AS_SPARC_UA_PCREL\n \n+/* Define if your assembler supports unwind section type. */\n+#undef HAVE_AS_X86_64_UNWIND_SECTION_TYPE\n+\n /* Define if your assembler supports PC relative relocs. */\n #undef HAVE_AS_X86_PCREL\n "}, {"sha": "7a6619a54864482635051ffae3ac13449ab1b49a", "filename": "libffi/src/x86/unix64.S", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b130bb743f1d86d8976bfb5ed5ef471ef619f8/libffi%2Fsrc%2Fx86%2Funix64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b130bb743f1d86d8976bfb5ed5ef471ef619f8/libffi%2Fsrc%2Fx86%2Funix64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Funix64.S?ref=f4b130bb743f1d86d8976bfb5ed5ef471ef619f8", "patch": "@@ -324,7 +324,11 @@ ffi_closure_unix64:\n .LUW9:\n \t.size\tffi_closure_unix64,.-ffi_closure_unix64\n \n+#ifdef HAVE_AS_X86_64_UNWIND_SECTION_TYPE\n+\t.section\t.eh_frame,\"a\",@unwind\n+#else\n \t.section\t.eh_frame,\"a\",@progbits\n+#endif\n .Lframe1:\n \t.long\t.LECIE1-.LSCIE1\t\t/* CIE Length */\n .LSCIE1:"}]}