{"sha": "aa356b75ed99be1a2e60fbe7d77a95bc4ae2811c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEzNTZiNzVlZDk5YmUxYTJlNjBmYmU3ZDc3YTk1YmM0YWUyODExYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-12-04T05:27:02Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-12-04T05:27:02Z"}, "message": "For FMA4, force all operands into registers.\n\n2009-12-02  Richard Henderson  <rth@redhat.com>\n\n\t* config/i386/i386.c (ix86_fixup_binary_operands): For FMA4, force\n\tall operands into registers.\n\nFrom-SVN: r154969", "tree": {"sha": "adfb6be751e51461568782abc3fbb2ea6a6293ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adfb6be751e51461568782abc3fbb2ea6a6293ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa356b75ed99be1a2e60fbe7d77a95bc4ae2811c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa356b75ed99be1a2e60fbe7d77a95bc4ae2811c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa356b75ed99be1a2e60fbe7d77a95bc4ae2811c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa356b75ed99be1a2e60fbe7d77a95bc4ae2811c/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80c0adc635c392856f1a5ef0d89d8dd62ac960c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c0adc635c392856f1a5ef0d89d8dd62ac960c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80c0adc635c392856f1a5ef0d89d8dd62ac960c1"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "16e80f1497719fcc82b2214e8518cd22f30cdf1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa356b75ed99be1a2e60fbe7d77a95bc4ae2811c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa356b75ed99be1a2e60fbe7d77a95bc4ae2811c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa356b75ed99be1a2e60fbe7d77a95bc4ae2811c", "patch": "@@ -1,3 +1,8 @@\n+2009-12-02  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_fixup_binary_operands): For FMA4, force\n+\tall operands into registers.\n+\n 2009-12-02  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* config/i386/i386.c (ix86_expand_fma4_multiple_memory): Remove unused"}, {"sha": "436e93585a35a859ebcc1391d79396d4eea92c98", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa356b75ed99be1a2e60fbe7d77a95bc4ae2811c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa356b75ed99be1a2e60fbe7d77a95bc4ae2811c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=aa356b75ed99be1a2e60fbe7d77a95bc4ae2811c", "patch": "@@ -13384,6 +13384,16 @@ ix86_fixup_binary_operands (enum rtx_code code, enum machine_mode mode,\n   if (MEM_P (src1) && !rtx_equal_p (dst, src1))\n     src1 = force_reg (mode, src1);\n \n+  /* In order for the multiply-add patterns to get matched, we need\n+     to aid combine by forcing all operands into registers to start.  */\n+  if (optimize && TARGET_FMA4)\n+    {\n+      if (MEM_P (src2))\n+\tsrc2 = force_reg (GET_MODE (src2), src2);\n+      else if (MEM_P (src1))\n+\tsrc1 = force_reg (GET_MODE (src1), src1);\n+    }\n+\n   operands[1] = src1;\n   operands[2] = src2;\n   return dst;"}]}