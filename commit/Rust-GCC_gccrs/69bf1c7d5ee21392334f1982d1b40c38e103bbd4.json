{"sha": "69bf1c7d5ee21392334f1982d1b40c38e103bbd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjliZjFjN2Q1ZWUyMTM5MjMzNGYxOTgyZDFiNDBjMzhlMTAzYmJkNA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-12-01T15:39:08Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-12-02T19:36:26Z"}, "message": "c++: Fix ICE with inline variable in template [PR97975]\n\nIn this test, we have\n\n  static inline const int c = b;\n\nin a class template, and we call store_init_value as usual.  There, the\nvalue is\n\n  IMPLICIT_CONV_EXPR<const float>(b)\n\nwhich is is_nondependent_static_init_expression but isn't\nis_nondependent_constant_expression (they only differ in STRICT).\nWe call fold_non_dependent_expr, but that just returns the expression\nbecause it only instantiates is_nondependent_constant_expression\nexpressions.  Since we're not checking the initializer of a constexpr\nvariable, we go on to call maybe_constant_init, whereupon we crash\nbecause it tries to evaluate all is_nondependent_static_init_expression\nexpressions, which our value is, but it still contains a template code.\n\nI think the fix is to call fold_non_dependent_init instead of\nmaybe_constant_init, and only call fold_non_dependent_expr on the\n\"this is a constexpr variable\" path so as to avoid instantiating twice\nin a row.  Outside a template this should also avoid evaluating the\nvalue twice.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97975\n\t* constexpr.c (fold_non_dependent_init): Add a tree parameter.\n\tUse it.\n\t* cp-tree.h (fold_non_dependent_init): Add a tree parameter with\n\ta default value.\n\t* typeck2.c (store_init_value): Call fold_non_dependent_expr\n\tonly when checking the initializer for constexpr variables.\n\tCall fold_non_dependent_init instead of maybe_constant_init.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97975\n\t* g++.dg/cpp1z/inline-var8.C: New test.", "tree": {"sha": "c0610be323654e4840f9ca25f2bf661e6f2bc48f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0610be323654e4840f9ca25f2bf661e6f2bc48f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69bf1c7d5ee21392334f1982d1b40c38e103bbd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69bf1c7d5ee21392334f1982d1b40c38e103bbd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69bf1c7d5ee21392334f1982d1b40c38e103bbd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69bf1c7d5ee21392334f1982d1b40c38e103bbd4/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4192ffd74c69e3fb6d761becc8e5117c3de42052", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4192ffd74c69e3fb6d761becc8e5117c3de42052", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4192ffd74c69e3fb6d761becc8e5117c3de42052"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "9a1a1db1267e2c355cdb64ebb1906f12647ada97", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bf1c7d5ee21392334f1982d1b40c38e103bbd4/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bf1c7d5ee21392334f1982d1b40c38e103bbd4/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=69bf1c7d5ee21392334f1982d1b40c38e103bbd4", "patch": "@@ -7271,15 +7271,16 @@ maybe_fold_non_dependent_expr (tree expr,\n tree\n fold_non_dependent_init (tree t,\n \t\t\t tsubst_flags_t complain /*=tf_warning_or_error*/,\n-\t\t\t bool manifestly_const_eval /*=false*/)\n+\t\t\t bool manifestly_const_eval /*=false*/,\n+\t\t\t tree object /* = NULL_TREE */)\n {\n   if (t == NULL_TREE)\n     return NULL_TREE;\n \n   if (processing_template_decl)\n     {\n       t = fold_non_dependent_expr_template (t, complain,\n-\t\t\t\t\t    manifestly_const_eval, NULL_TREE);\n+\t\t\t\t\t    manifestly_const_eval, object);\n       /* maybe_constant_init does this stripping, so do it here too.  */\n       if (TREE_CODE (t) == TARGET_EXPR)\n \t{\n@@ -7290,7 +7291,7 @@ fold_non_dependent_init (tree t,\n       return t;\n     }\n \n-  return maybe_constant_init (t, NULL_TREE, manifestly_const_eval);\n+  return maybe_constant_init (t, object, manifestly_const_eval);\n }\n \n /* Like maybe_constant_value, but returns a CONSTRUCTOR directly, rather"}, {"sha": "41ae13b3dbdca712fb9067c2a24b8dd6d8ebfb6a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bf1c7d5ee21392334f1982d1b40c38e103bbd4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bf1c7d5ee21392334f1982d1b40c38e103bbd4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=69bf1c7d5ee21392334f1982d1b40c38e103bbd4", "patch": "@@ -8014,7 +8014,7 @@ extern tree maybe_fold_non_dependent_expr\t(tree,\n \t\t\t\t\t\t tsubst_flags_t = tf_warning_or_error);\n extern tree fold_non_dependent_init\t\t(tree,\n \t\t\t\t\t\t tsubst_flags_t = tf_warning_or_error,\n-\t\t\t\t\t\t bool = false);\n+\t\t\t\t\t\t bool = false, tree = NULL_TREE);\n extern tree fold_simple\t\t\t\t(tree);\n extern bool reduced_constant_expression_p       (tree);\n extern bool is_instantiation_of_constexpr       (tree);"}, {"sha": "575c609a365865a1d666464e394c0de82bc8329a", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bf1c7d5ee21392334f1982d1b40c38e103bbd4/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bf1c7d5ee21392334f1982d1b40c38e103bbd4/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=69bf1c7d5ee21392334f1982d1b40c38e103bbd4", "patch": "@@ -744,11 +744,13 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n     {\n       bool const_init;\n       tree oldval = value;\n-      value = fold_non_dependent_expr (value, tf_warning_or_error, true, decl);\n       if (DECL_DECLARED_CONSTEXPR_P (decl)\n \t  || (DECL_IN_AGGR_P (decl)\n \t      && DECL_INITIALIZED_IN_CLASS_P (decl)))\n \t{\n+\t  value = fold_non_dependent_expr (value, tf_warning_or_error,\n+\t\t\t\t\t   /*manifestly_const_eval=*/true,\n+\t\t\t\t\t   decl);\n \t  /* Diagnose a non-constant initializer for constexpr variable or\n \t     non-inline in-class-initialized static data member.  */\n \t  if (!require_constant_expression (value))\n@@ -762,7 +764,8 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n \t    value = cxx_constant_init (value, decl);\n \t}\n       else\n-\tvalue = maybe_constant_init (value, decl, true);\n+\tvalue = fold_non_dependent_init (value, tf_warning_or_error,\n+\t\t\t\t\t /*manifestly_const_eval=*/true, decl);\n       if (TREE_CODE (value) == CONSTRUCTOR && cp_has_mutable_p (type))\n \t/* Poison this CONSTRUCTOR so it can't be copied to another\n \t   constexpr variable.  */"}, {"sha": "8db3c19374d5e150dd3fd3b97910bce7e69ca40c", "filename": "gcc/testsuite/g++.dg/cpp1z/inline-var8.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bf1c7d5ee21392334f1982d1b40c38e103bbd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bf1c7d5ee21392334f1982d1b40c38e103bbd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Finline-var8.C?ref=69bf1c7d5ee21392334f1982d1b40c38e103bbd4", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/97975\n+// { dg-do compile { target c++17 } }\n+\n+template <class>\n+class A\n+{\n+  static const float b;\n+  static inline const int c = b;\n+};\n+\n+A<int> a;\n+\n+struct B\n+{\n+  static const float b;\n+  static inline const int c = b;\n+};"}]}