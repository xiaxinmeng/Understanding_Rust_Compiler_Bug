{"sha": "5752d1f7943db65667edeaf8481dc10b60a23197", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc1MmQxZjc5NDNkYjY1NjY3ZWRlYWY4NDgxZGMxMGI2MGEyMzE5Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-13T07:29:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-13T07:29:51Z"}, "message": "re PR target/82524 (expensive-optimizations produces wrong results)\n\n\tPR target/82524\n\t* config/i386/i386.md (addqi_ext_1, andqi_ext_1,\n\t*andqi_ext_1_cc, *<code>qi_ext_1, *xorqi_ext_1_cc): Change\n\t=Q constraints to +Q and into insn condition add check\n\tthat operands[0] and operands[1] are equal.\n\t(*addqi_ext_2, *andqi_ext_2, *<code>qi_ext_2): Change\n\t=Q constraints to +Q and into insn condition add check\n\tthat operands[0] is equal to either operands[1] or operands[2].\n\n\t* gcc.c-torture/execute/pr82524.c: New test.\n\nFrom-SVN: r253710", "tree": {"sha": "34ada7dd92163360dda28ca0bfa8dbae0ab5c47a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34ada7dd92163360dda28ca0bfa8dbae0ab5c47a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5752d1f7943db65667edeaf8481dc10b60a23197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5752d1f7943db65667edeaf8481dc10b60a23197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5752d1f7943db65667edeaf8481dc10b60a23197", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5752d1f7943db65667edeaf8481dc10b60a23197/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a0e4174cd80f8a17026d6c13af2802dc8a0146ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e4174cd80f8a17026d6c13af2802dc8a0146ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e4174cd80f8a17026d6c13af2802dc8a0146ad"}], "stats": {"total": 96, "additions": 80, "deletions": 16}, "files": [{"sha": "cb9f1a392aa902fcc3cfb2bbafdbca6652f29e35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5752d1f7943db65667edeaf8481dc10b60a23197/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5752d1f7943db65667edeaf8481dc10b60a23197/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5752d1f7943db65667edeaf8481dc10b60a23197", "patch": "@@ -1,5 +1,14 @@\n 2017-10-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/82524\n+\t* config/i386/i386.md (addqi_ext_1, andqi_ext_1,\n+\t*andqi_ext_1_cc, *<code>qi_ext_1, *xorqi_ext_1_cc): Change\n+\t=Q constraints to +Q and into insn condition add check\n+\tthat operands[0] and operands[1] are equal.\n+\t(*addqi_ext_2, *andqi_ext_2, *<code>qi_ext_2): Change\n+\t=Q constraints to +Q and into insn condition add check\n+\tthat operands[0] is equal to either operands[1] or operands[2].\n+\n \tPR target/82498\n \t* fold-const.c (fold_binary_loc) <bit_rotate>: Code cleanups,\n \tinstead of handling MINUS_EXPR twice (once for each argument),"}, {"sha": "3413b90028f5076f59b970864a794c2fc0684321", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5752d1f7943db65667edeaf8481dc10b60a23197/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5752d1f7943db65667edeaf8481dc10b60a23197/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5752d1f7943db65667edeaf8481dc10b60a23197", "patch": "@@ -6264,7 +6264,7 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"addqi_ext_1\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q,Q\")\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n \t(subreg:SI\n@@ -6275,7 +6275,8 @@\n \t\t\t       (const_int 8)) 0)\n \t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\")) 0))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n+  \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n+   rtx_equal_p (operands[0], operands[1])\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -6300,7 +6301,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*addqi_ext_2\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n \t(subreg:SI\n@@ -6314,7 +6315,9 @@\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)) 0))\n   (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n+  \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n+   rtx_equal_p (operands[0], operands[1])\n+   || rtx_equal_p (operands[0], operands[2])\"\n   \"add{b}\\t{%h2, %h0|%h0, %h2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n@@ -8998,7 +9001,7 @@\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"andqi_ext_1\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q,Q\")\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n \t(subreg:SI\n@@ -9009,7 +9012,8 @@\n \t\t\t       (const_int 8)) 0)\n \t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\")) 0))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n+  \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n+   rtx_equal_p (operands[0], operands[1])\"\n   \"and{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"isa\" \"*,nox64\")\n    (set_attr \"type\" \"alu\")\n@@ -9027,7 +9031,7 @@\n \t\t\t       (const_int 8)) 0)\n \t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\"))\n \t  (const_int 0)))\n-   (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q,Q\")\n+   (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n \t(subreg:SI\n@@ -9037,14 +9041,16 @@\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)\n \t    (match_dup 2)) 0))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   /* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n+   && rtx_equal_p (operands[0], operands[1])\"\n   \"and{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"isa\" \"*,nox64\")\n    (set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*andqi_ext_2\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n \t(subreg:SI\n@@ -9058,7 +9064,9 @@\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)) 0))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n+  \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n+   rtx_equal_p (operands[0], operands[1])\n+   || rtx_equal_p (operands[0], operands[2])\"\n   \"and{b}\\t{%h2, %h0|%h0, %h2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n@@ -9431,7 +9439,7 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*<code>qi_ext_1\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q,Q\")\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n \t(subreg:SI\n@@ -9442,14 +9450,16 @@\n \t\t\t       (const_int 8)) 0)\n \t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\")) 0))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n+  \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n+   /* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n+   && rtx_equal_p (operands[0], operands[1])\"\n   \"<logic>{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"isa\" \"*,nox64\")\n    (set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n \n (define_insn \"*<code>qi_ext_2\"\n-  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q\")\n+  [(set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n \t(subreg:SI\n@@ -9463,7 +9473,10 @@\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)) 0))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n+  \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n+   /* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n+   && (rtx_equal_p (operands[0], operands[1])\n+       || rtx_equal_p (operands[0], operands[2]))\"\n   \"<logic>{b}\\t{%h2, %h0|%h0, %h2}\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"QI\")])\n@@ -9552,7 +9565,7 @@\n \t\t\t       (const_int 8)) 0)\n \t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\"))\n \t  (const_int 0)))\n-   (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"=Q,Q\")\n+   (set (zero_extract:SI (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n \t\t\t (const_int 8)\n \t\t\t (const_int 8))\n \t(subreg:SI\n@@ -9562,7 +9575,9 @@\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0)\n \t  (match_dup 2)) 0))]\n-  \"ix86_match_ccmode (insn, CCNOmode)\"\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   /* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n+   && rtx_equal_p (operands[0], operands[1])\"\n   \"xor{b}\\t{%2, %h0|%h0, %2}\"\n   [(set_attr \"isa\" \"*,nox64\")\n    (set_attr \"type\" \"alu\")"}, {"sha": "566864c21836df63c82e3f68c7cea52ed492bf5a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5752d1f7943db65667edeaf8481dc10b60a23197/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5752d1f7943db65667edeaf8481dc10b60a23197/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5752d1f7943db65667edeaf8481dc10b60a23197", "patch": "@@ -1,5 +1,8 @@\n 2017-10-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/82524\n+\t* gcc.c-torture/execute/pr82524.c: New test.\n+\n \tPR target/82498\n \t* gcc.dg/tree-ssa/pr82498.c: New test.\n "}, {"sha": "07ac4b61916093586d461750a841d22ed51566e2", "filename": "gcc/testsuite/gcc.c-torture/execute/pr82524.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5752d1f7943db65667edeaf8481dc10b60a23197/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr82524.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5752d1f7943db65667edeaf8481dc10b60a23197/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr82524.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr82524.c?ref=5752d1f7943db65667edeaf8481dc10b60a23197", "patch": "@@ -0,0 +1,37 @@\n+/* PR target/82524 */\n+\n+struct S { unsigned char b, g, r, a; };\n+union U { struct S c; unsigned v; };\n+\n+static inline unsigned char\n+foo (unsigned char a, unsigned char b)\n+{\n+  return ((a + 1) * b) >> 8;\n+}\n+\n+__attribute__((noinline, noclone)) unsigned\n+bar (union U *x, union U *y)\n+{\n+  union U z;\n+  unsigned char v = x->c.a;\n+  unsigned char w = foo (y->c.a, 255 - v);\n+  z.c.r = foo (x->c.r, v) + foo (y->c.r, w);\n+  z.c.g = foo (x->c.g, v) + foo (y->c.g, w);\n+  z.c.b = foo (x->c.b, v) + foo (y->c.b, w);\n+  z.c.a = 0;\n+  return z.v;\n+}\n+\n+int\n+main ()\n+{\n+  union U a, b, c;\n+  if ((unsigned char) ~0 != 255 || sizeof (unsigned) != 4)\n+    return 0;\n+  a.c = (struct S) { 255, 255, 255, 0 };\n+  b.c = (struct S) { 255, 255, 255, 255 };\n+  c.v = bar (&a, &b);\n+  if (c.c.b != 255 || c.c.g != 255 || c.c.r != 255 || c.c.a != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}