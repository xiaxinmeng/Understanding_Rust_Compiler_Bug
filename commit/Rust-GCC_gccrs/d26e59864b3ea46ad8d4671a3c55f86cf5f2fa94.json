{"sha": "d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI2ZTU5ODY0YjNlYTQ2YWQ4ZDQ2NzFhM2M1NWY4NmNmNWYyZmE5NA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-05-10T17:23:31Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-05-10T17:23:31Z"}, "message": "mark EXPR_PACK_EXPANSION as typed only\n\nmark EXPR_PACK_EXPANSION as typed only\n        * cp-tree.def (EXPR_PACK_EXPANSION): Add an operand.\n        * cp-objcp-common.c (cp_common_init_ts): Mark it as TS_TYPED.\n        * cp-tree.h (PACK_EXPANSION_PARAMETER_PACKS): Use the new\n        operand of EXPR_PACK_EXPANSION.\n\t(cp_tree_operand_length): Declare.\n        * tree.c (cp_tree_operand_length): Define.\n\t(cp_tree_equal): Call it.\n        * pt.c (value_dependent_expr_P): Likewise.\n        * mangle.c (write_expression): Likewise.\n\nFrom-SVN: r173625", "tree": {"sha": "7c389e370937901a10bb25ff1bb73eb2135042bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c389e370937901a10bb25ff1bb73eb2135042bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94/comments", "author": null, "committer": null, "parents": [{"sha": "dbcc9f08d5631a29708cf859689a46a1895111fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbcc9f08d5631a29708cf859689a46a1895111fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbcc9f08d5631a29708cf859689a46a1895111fa"}], "stats": {"total": 103, "additions": 62, "deletions": 41}, "files": [{"sha": "f7a5683cd0b2418cb8c8b48acfd30b6ba414d3ba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94", "patch": "@@ -1,3 +1,15 @@\n+2011-05-10  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+        * cp-tree.def (EXPR_PACK_EXPANSION): Add an operand.\n+        * cp-objcp-common.c (cp_common_init_ts): Mark it as TS_TYPED.\n+        * cp-tree.h (PACK_EXPANSION_PARAMETER_PACKS): Use the new\n+        operand of EXPR_PACK_EXPANSION.\n+\t(cp_tree_operand_length): Declare.\n+        * tree.c (cp_tree_operand_length): Define.\n+\t(cp_tree_equal): Call it.\n+        * pt.c (value_dependent_expr_P): Likewise.\n+        * mangle.c (write_expression): Likewise.\n+\n 2011-05-09  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/48737"}, {"sha": "00f525bb1e65eee766cf1614b03f122b7f511c3d", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94", "patch": "@@ -241,11 +241,11 @@ cp_common_init_ts (void)\n   MARK_TS_COMMON (UNDERLYING_TYPE);\n   MARK_TS_COMMON (BASELINK);\n   MARK_TS_COMMON (TYPE_PACK_EXPANSION);\n-  MARK_TS_COMMON (EXPR_PACK_EXPANSION);\n   MARK_TS_COMMON (DECLTYPE_TYPE);\n   MARK_TS_COMMON (BOUND_TEMPLATE_TEMPLATE_PARM);\n   MARK_TS_COMMON (UNBOUND_CLASS_TEMPLATE);\n \n+  MARK_TS_TYPED (EXPR_PACK_EXPANSION);\n   MARK_TS_TYPED (SWITCH_STMT);\n   MARK_TS_TYPED (IF_STMT);\n   MARK_TS_TYPED (FOR_STMT);"}, {"sha": "001ef100a13d7f7b847b678d2ec91c449ff17f89", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94", "patch": "@@ -413,7 +413,7 @@ DEFTREECODE (TYPE_PACK_EXPANSION, \"type_pack_expansion\", tcc_type, 0)\n \n    EXPR_PACK_EXPANSION plays precisely the same role as TYPE_PACK_EXPANSION,\n    but will be used for expressions.  */\n-DEFTREECODE (EXPR_PACK_EXPANSION, \"expr_pack_expansion\", tcc_expression, 1)\n+DEFTREECODE (EXPR_PACK_EXPANSION, \"expr_pack_expansion\", tcc_expression, 2)\n \n /* Selects the Ith parameter out of an argument pack. This node will\n    be used when instantiating pack expansions; see"}, {"sha": "efcdeefd38db96f13c7fe187b41c2ab14d92511c", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94", "patch": "@@ -2734,7 +2734,10 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n \n /* The list of parameter packs used in the PACK_EXPANSION_* node. The\n    TREE_VALUE of each TREE_LIST contains the parameter packs.  */\n-#define PACK_EXPANSION_PARAMETER_PACKS(NODE) TREE_CHAIN (NODE)\n+#define PACK_EXPANSION_PARAMETER_PACKS(NODE)\t\t\\\n+  *(TREE_CODE (NODE) == EXPR_PACK_EXPANSION\t\t\\\n+    ? &TREE_OPERAND (NODE, 1)\t\t\t\t\\\n+    : &TREE_CHAIN (TYPE_PACK_EXPANSION_CHECK (NODE)))\n \n /* Determine if this is an argument pack.  */\n #define ARGUMENT_PACK_P(NODE)                          \\\n@@ -5430,6 +5433,7 @@ extern tree nonlambda_method_basetype\t\t(void);\n extern void maybe_add_lambda_conv_op            (tree);\n \n /* in tree.c */\n+extern int cp_tree_operand_length\t\t(const_tree);\n void cp_free_lang_data \t\t\t\t(tree t);\n extern tree force_target_expr\t\t\t(tree, tree, tsubst_flags_t);\n extern tree build_target_expr_with_type\t\t(tree, tree, tsubst_flags_t);"}, {"sha": "c1f3b44e9053258e3a8d16615e3186b59ca50dfa", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94", "patch": "@@ -2701,23 +2701,7 @@ write_expression (tree expr)\n \tdefault:\n \t  /* In the middle-end, some expressions have more operands than\n \t     they do in templates (and mangling).  */\n-\t  switch (code)\n-\t    {\n-\t    case PREINCREMENT_EXPR:\n-\t    case PREDECREMENT_EXPR:\n-\t    case POSTINCREMENT_EXPR:\n-\t    case POSTDECREMENT_EXPR:\n-\t      len = 1;\n-\t      break;\n-\n-\t    case ARRAY_REF:\n-\t      len = 2;\n-\t      break;\n-\n-\t    default:\n-\t      len = TREE_OPERAND_LENGTH (expr);\n-\t      break;\n-\t    }\n+\t  len = cp_tree_operand_length (expr);\n \n \t  for (i = 0; i < len; ++i)\n \t    {"}, {"sha": "f6392d63b818b29720c27325614ed09b00ee9fd4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94", "patch": "@@ -18279,35 +18279,30 @@ value_dependent_expression_p (tree expression)\n \t{\n \tcase tcc_reference:\n \tcase tcc_unary:\n-\t  return (value_dependent_expression_p\n-\t\t  (TREE_OPERAND (expression, 0)));\n-\n \tcase tcc_comparison:\n \tcase tcc_binary:\n-\t  return ((value_dependent_expression_p\n-\t\t   (TREE_OPERAND (expression, 0)))\n-\t\t  || (value_dependent_expression_p\n-\t\t      (TREE_OPERAND (expression, 1))));\n-\n \tcase tcc_expression:\n \tcase tcc_vl_exp:\n \t  {\n-\t    int i;\n-\t    for (i = 0; i < TREE_OPERAND_LENGTH (expression); ++i)\n-\t      /* In some cases, some of the operands may be missing.\n-\t\t (For example, in the case of PREDECREMENT_EXPR, the\n-\t\t amount to increment by may be missing.)  That doesn't\n-\t\t make the expression dependent.  */\n-\t      if (TREE_OPERAND (expression, i)\n-\t\t  && (value_dependent_expression_p\n-\t\t      (TREE_OPERAND (expression, i))))\n-\t\treturn true;\n-\t    return false;\n-\t  }\n+\t    int i, len = cp_tree_operand_length (expression);\n \n+\t    for (i = 0; i < len; i++)\n+\t      {\n+\t\ttree t = TREE_OPERAND (expression, i);\n+\n+\t\t/* In some cases, some of the operands may be missing.l\n+\t\t   (For example, in the case of PREDECREMENT_EXPR, the\n+\t\t   amount to increment by may be missing.)  That doesn't\n+\t\t   make the expression dependent.  */\n+\t\tif (t && value_dependent_expression_p (t))\n+\t\t  return true;\n+\t      }\n+\t  }\n+\t  break;\n \tdefault:\n \t  break;\n \t}\n+      break;\n     }\n \n   /* The expression is not value-dependent.  */"}, {"sha": "6b3680e80991540b6b2e7eeb29a00cdf52df60e5", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=d26e59864b3ea46ad8d4671a3c55f86cf5f2fa94", "patch": "@@ -2342,7 +2342,7 @@ cp_tree_equal (tree t1, tree t2)\n       {\n \tint i, n;\n \n-\tn = TREE_OPERAND_LENGTH (t1);\n+\tn = cp_tree_operand_length (t1);\n \tif (TREE_CODE_CLASS (code1) == tcc_vl_exp\n \t    && n != TREE_OPERAND_LENGTH (t2))\n \t  return false;\n@@ -3408,6 +3408,32 @@ c_register_addr_space (const char *word ATTRIBUTE_UNUSED,\n {\n }\n \n+/* Return the number of operands in T that we care about for things like\n+   mangling.  */\n+\n+int\n+cp_tree_operand_length (const_tree t)\n+{\n+  enum tree_code code = TREE_CODE (t);\n+\n+  switch (code)\n+    {\n+    case PREINCREMENT_EXPR:\n+    case PREDECREMENT_EXPR:\n+    case POSTINCREMENT_EXPR:\n+    case POSTDECREMENT_EXPR:\n+      return 1;\n+\n+    case ARRAY_REF:\n+      return 2;\n+\n+    case EXPR_PACK_EXPANSION:\n+      return 1;\n+\n+    default:\n+      return TREE_OPERAND_LENGTH (t);\n+    }\n+}\n \f\n #if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n /* Complain that some language-specific thing hanging off a tree"}]}