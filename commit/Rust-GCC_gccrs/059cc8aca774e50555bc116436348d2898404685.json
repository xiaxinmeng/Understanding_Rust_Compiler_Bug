{"sha": "059cc8aca774e50555bc116436348d2898404685", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU5Y2M4YWNhNzc0ZTUwNTU1YmMxMTY0MzYzNDhkMjg5ODQwNDY4NQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-03-29T13:14:06Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-03-29T13:14:06Z"}, "message": "i386: Enable AVX/AVX512 features only if supported by OSXSAVE\n\nEnable AVX and AVX512 features only if their states are supported by\nOSXSAVE.\n\n\tPR target/85100\n\t* config/i386/cpuinfo.c (XCR_XFEATURE_ENABLED_MASK): New.\n\t(XSTATE_FP): Likewise.\n\t(XSTATE_SSE): Likewise.\n\t(XSTATE_YMM): Likewise.\n\t(XSTATE_OPMASK): Likewise.\n\t(XSTATE_ZMM): Likewise.\n\t(XSTATE_HI_ZMM): Likewise.\n\t(XCR_AVX_ENABLED_MASK): Likewise.\n\t(XCR_AVX512F_ENABLED_MASK): Likewise.\n\t(get_available_features): Enable AVX and AVX512 features only\n\tif their states are supported by OSXSAVE.\n\nFrom-SVN: r258954", "tree": {"sha": "d4d2b77e0d7240fb023407adebe0c3b2ae7096f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4d2b77e0d7240fb023407adebe0c3b2ae7096f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/059cc8aca774e50555bc116436348d2898404685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/059cc8aca774e50555bc116436348d2898404685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/059cc8aca774e50555bc116436348d2898404685", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/059cc8aca774e50555bc116436348d2898404685/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7cb6c178884b04ab1befcf643d4e63f6b48a511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7cb6c178884b04ab1befcf643d4e63f6b48a511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7cb6c178884b04ab1befcf643d4e63f6b48a511"}], "stats": {"total": 149, "additions": 105, "deletions": 44}, "files": [{"sha": "ee8f40fa25b4ab4b8c3dbb94de33e69867f05212", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/059cc8aca774e50555bc116436348d2898404685/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/059cc8aca774e50555bc116436348d2898404685/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=059cc8aca774e50555bc116436348d2898404685", "patch": "@@ -1,3 +1,18 @@\n+2018-03-29  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/85100\n+\t* config/i386/cpuinfo.c (XCR_XFEATURE_ENABLED_MASK): New.\n+\t(XSTATE_FP): Likewise.\n+\t(XSTATE_SSE): Likewise.\n+\t(XSTATE_YMM): Likewise.\n+\t(XSTATE_OPMASK): Likewise.\n+\t(XSTATE_ZMM): Likewise.\n+\t(XSTATE_HI_ZMM): Likewise.\n+\t(XCR_AVX_ENABLED_MASK): Likewise.\n+\t(XCR_AVX512F_ENABLED_MASK): Likewise.\n+\t(get_available_features): Enable AVX and AVX512 features only\n+\tif their states are supported by OSXSAVE.\n+\n 2018-03-22  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n \n \tPR target/85025"}, {"sha": "1dac110a79ac6a4a554f0267faf843dddad5d053", "filename": "libgcc/config/i386/cpuinfo.c", "status": "modified", "additions": 90, "deletions": 44, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/059cc8aca774e50555bc116436348d2898404685/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/059cc8aca774e50555bc116436348d2898404685/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c?ref=059cc8aca774e50555bc116436348d2898404685", "patch": "@@ -240,6 +240,40 @@ get_available_features (unsigned int ecx, unsigned int edx,\n   unsigned int features = 0;\n   unsigned int features2 = 0;\n \n+  /* Get XCR_XFEATURE_ENABLED_MASK register with xgetbv.  */\n+#define XCR_XFEATURE_ENABLED_MASK\t0x0\n+#define XSTATE_FP\t\t\t0x1\n+#define XSTATE_SSE\t\t\t0x2\n+#define XSTATE_YMM\t\t\t0x4\n+#define XSTATE_OPMASK\t\t\t0x20\n+#define XSTATE_ZMM\t\t\t0x40\n+#define XSTATE_HI_ZMM\t\t\t0x80\n+\n+#define XCR_AVX_ENABLED_MASK \\\n+  (XSTATE_SSE | XSTATE_YMM)\n+#define XCR_AVX512F_ENABLED_MASK \\\n+  (XSTATE_SSE | XSTATE_YMM | XSTATE_OPMASK | XSTATE_ZMM | XSTATE_HI_ZMM)\n+\n+  /* Check if AVX and AVX512 are usable.  */\n+  int avx_usable = 0;\n+  int avx512_usable = 0;\n+  if ((ecx & bit_OSXSAVE))\n+    {\n+      /* Check if XMM, YMM, OPMASK, upper 256 bits of ZMM0-ZMM15 and\n+         ZMM16-ZMM31 states are supported by OSXSAVE.  */\n+      unsigned int xcrlow;\n+      unsigned int xcrhigh;\n+      asm (\".byte 0x0f, 0x01, 0xd0\"\n+\t   : \"=a\" (xcrlow), \"=d\" (xcrhigh)\n+\t   : \"c\" (XCR_XFEATURE_ENABLED_MASK));\n+      if ((xcrlow & XCR_AVX_ENABLED_MASK) == XCR_AVX_ENABLED_MASK)\n+\t{\n+\t  avx_usable = 1;\n+\t  avx512_usable = ((xcrlow & XCR_AVX512F_ENABLED_MASK)\n+\t\t\t   == XCR_AVX512F_ENABLED_MASK);\n+\t}\n+    }\n+\n #define set_feature(f) \\\n   if (f < 32) features |= (1U << f); else features2 |= (1U << (f - 32))\n \n@@ -265,55 +299,64 @@ get_available_features (unsigned int ecx, unsigned int edx,\n     set_feature (FEATURE_SSE4_1);\n   if (ecx & bit_SSE4_2)\n     set_feature (FEATURE_SSE4_2);\n-  if (ecx & bit_AVX)\n-    set_feature (FEATURE_AVX);\n-  if (ecx & bit_FMA)\n-    set_feature (FEATURE_FMA);\n+  if (avx_usable)\n+    {\n+      if (ecx & bit_AVX)\n+\tset_feature (FEATURE_AVX);\n+      if (ecx & bit_FMA)\n+\tset_feature (FEATURE_FMA);\n+    }\n \n   /* Get Advanced Features at level 7 (eax = 7, ecx = 0). */\n   if (max_cpuid_level >= 7)\n     {\n       __cpuid_count (7, 0, eax, ebx, ecx, edx);\n       if (ebx & bit_BMI)\n \tset_feature (FEATURE_BMI);\n-      if (ebx & bit_AVX2)\n-\tset_feature (FEATURE_AVX2);\n+      if (avx_usable)\n+\t{\n+\t  if (ebx & bit_AVX2)\n+\t    set_feature (FEATURE_AVX2);\n+\t}\n       if (ebx & bit_BMI2)\n \tset_feature (FEATURE_BMI2);\n-      if (ebx & bit_AVX512F)\n-\tset_feature (FEATURE_AVX512F);\n-      if (ebx & bit_AVX512VL)\n-\tset_feature (FEATURE_AVX512VL);\n-      if (ebx & bit_AVX512BW)\n-\tset_feature (FEATURE_AVX512BW);\n-      if (ebx & bit_AVX512DQ)\n-\tset_feature (FEATURE_AVX512DQ);\n-      if (ebx & bit_AVX512CD)\n-\tset_feature (FEATURE_AVX512CD);\n-      if (ebx & bit_AVX512PF)\n-\tset_feature (FEATURE_AVX512PF);\n-      if (ebx & bit_AVX512ER)\n-\tset_feature (FEATURE_AVX512ER);\n-      if (ebx & bit_AVX512IFMA)\n-\tset_feature (FEATURE_AVX512IFMA);\n-      if (ecx & bit_AVX512VBMI)\n-\tset_feature (FEATURE_AVX512VBMI);\n-      if (ecx & bit_AVX512VBMI2)\n-\tset_feature (FEATURE_AVX512VBMI2);\n-      if (ecx & bit_GFNI)\n-\tset_feature (FEATURE_GFNI);\n-      if (ecx & bit_VPCLMULQDQ)\n-\tset_feature (FEATURE_VPCLMULQDQ);\n-      if (ecx & bit_AVX512VNNI)\n-\tset_feature (FEATURE_AVX512VNNI);\n-      if (ecx & bit_AVX512BITALG)\n-\tset_feature (FEATURE_AVX512BITALG);\n-      if (ecx & bit_AVX512VPOPCNTDQ)\n-\tset_feature (FEATURE_AVX512VPOPCNTDQ);\n-      if (edx & bit_AVX5124VNNIW)\n-\tset_feature (FEATURE_AVX5124VNNIW);\n-      if (edx & bit_AVX5124FMAPS)\n-\tset_feature (FEATURE_AVX5124FMAPS);\n+      if (avx512_usable)\n+\t{\n+\t  if (ebx & bit_AVX512F)\n+\t    set_feature (FEATURE_AVX512F);\n+\t  if (ebx & bit_AVX512VL)\n+\t    set_feature (FEATURE_AVX512VL);\n+\t  if (ebx & bit_AVX512BW)\n+\t    set_feature (FEATURE_AVX512BW);\n+\t  if (ebx & bit_AVX512DQ)\n+\t    set_feature (FEATURE_AVX512DQ);\n+\t  if (ebx & bit_AVX512CD)\n+\t    set_feature (FEATURE_AVX512CD);\n+\t  if (ebx & bit_AVX512PF)\n+\t    set_feature (FEATURE_AVX512PF);\n+\t  if (ebx & bit_AVX512ER)\n+\t    set_feature (FEATURE_AVX512ER);\n+\t  if (ebx & bit_AVX512IFMA)\n+\t    set_feature (FEATURE_AVX512IFMA);\n+\t  if (ecx & bit_AVX512VBMI)\n+\t    set_feature (FEATURE_AVX512VBMI);\n+\t  if (ecx & bit_AVX512VBMI2)\n+\t    set_feature (FEATURE_AVX512VBMI2);\n+\t  if (ecx & bit_GFNI)\n+\t    set_feature (FEATURE_GFNI);\n+\t  if (ecx & bit_VPCLMULQDQ)\n+\t    set_feature (FEATURE_VPCLMULQDQ);\n+\t  if (ecx & bit_AVX512VNNI)\n+\t    set_feature (FEATURE_AVX512VNNI);\n+\t  if (ecx & bit_AVX512BITALG)\n+\t    set_feature (FEATURE_AVX512BITALG);\n+\t  if (ecx & bit_AVX512VPOPCNTDQ)\n+\t    set_feature (FEATURE_AVX512VPOPCNTDQ);\n+\t  if (edx & bit_AVX5124VNNIW)\n+\t    set_feature (FEATURE_AVX5124VNNIW);\n+\t  if (edx & bit_AVX5124FMAPS)\n+\t    set_feature (FEATURE_AVX5124FMAPS);\n+\t}\n     }\n \n   /* Check cpuid level of extended features.  */\n@@ -325,10 +368,13 @@ get_available_features (unsigned int ecx, unsigned int edx,\n \n       if (ecx & bit_SSE4a)\n \tset_feature (FEATURE_SSE4_A);\n-      if (ecx & bit_FMA4)\n-\tset_feature (FEATURE_FMA4);\n-      if (ecx & bit_XOP)\n-\tset_feature (FEATURE_XOP);\n+      if (avx_usable)\n+\t{\n+\t  if (ecx & bit_FMA4)\n+\t    set_feature (FEATURE_FMA4);\n+\t  if (ecx & bit_XOP)\n+\t    set_feature (FEATURE_XOP);\n+\t}\n     }\n     \n   __cpu_model.__cpu_features[0] = features;"}]}