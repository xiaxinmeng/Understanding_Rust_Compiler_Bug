{"sha": "bc73c4c24daec96ad3e7ff904645c3095a4febe9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM3M2M0YzI0ZGFlYzk2YWQzZTdmZjkwNDY0NWMzMDk1YTRmZWJlOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-10-29T09:17:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-10-29T09:17:48Z"}, "message": "[AArch64] Add main SVE ACLE tests\n\nNow that the PCS support is applied, this patch adds the main\nSVE ACLE tests.  The idea is to test various combinations of operands\nfor each ACLE function, with each combination using a specific register\nallocation and with each combination being wrapped its own test function.\nWe then compare the full assembly output of these test functions against\nthe expected/preferred sequences.  This provides both optimisation and\ncorrectness testing, since ultimately the ACLE functions are defined in\nterms of the underlying SVE instructions.\n\n2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\ngcc/testsuite/\n\t* g++.target/aarch64/sve/acle/aarch64-sve-acle-asm.exp: New file.\n\t* gcc.target/aarch64/sve/acle/aarch64-sve-acle-asm.exp: New file.\n\t* gcc.target/aarch64/sve/acle/asm: New test directory.\n\nCo-Authored-By: Kugan Vivekanandarajah <kuganv@linaro.org>\nCo-Authored-By: Prathamesh Kulkarni <prathamesh.kulkarni@linaro.org>\n\nFrom-SVN: r277565", "tree": {"sha": "b2d0937532fbd12541de56c1e2c5e18d93170d73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2d0937532fbd12541de56c1e2c5e18d93170d73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc73c4c24daec96ad3e7ff904645c3095a4febe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc73c4c24daec96ad3e7ff904645c3095a4febe9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc73c4c24daec96ad3e7ff904645c3095a4febe9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc73c4c24daec96ad3e7ff904645c3095a4febe9/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c600df9a4060da3c6121ff4d0b93f179eafd69d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c600df9a4060da3c6121ff4d0b93f179eafd69d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c600df9a4060da3c6121ff4d0b93f179eafd69d1"}], "stats": {"total": 223593, "additions": 223593, "deletions": 0}, "files": [{"sha": "c1df721a4a7a3b1e088dc2b62c71cbbb2ba34430", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -1,3 +1,11 @@\n+2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\t    Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* g++.target/aarch64/sve/acle/aarch64-sve-acle-asm.exp: New file.\n+\t* gcc.target/aarch64/sve/acle/aarch64-sve-acle-asm.exp: New file.\n+\t* gcc.target/aarch64/sve/acle/asm: New test directory.\n+\n 2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/pcs/aarch64-sve-pcs.exp: New file."}, {"sha": "e9d624ff80fcbf8e5b3459b1205368c2197ca452", "filename": "gcc/testsuite/g++.target/aarch64/sve/acle/aarch64-sve-acle-asm.exp", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle-asm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle-asm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle-asm.exp?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,83 @@\n+#  Assembly-based regression-test driver for the SVE ACLE\n+#  Copyright (C) 2009-2019 Free Software Foundation, Inc.\n+#\n+#  This file is part of GCC.\n+#\n+#  GCC is free software; you can redistribute it and/or modify it\n+#  under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 3, or (at your option)\n+#  any later version.\n+#\n+#  GCC is distributed in the hope that it will be useful, but\n+#  WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+#  General Public License for more details.\n+#\n+#  You should have received a copy of the GNU General Public License\n+#  along with GCC; see the file COPYING3.  If not see\n+#  <http://www.gnu.org/licenses/>.  */\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an AArch64 target.\n+if { ![istarget aarch64*-*-*] } {\n+    return\n+}\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Force SVE if we're not testing it already.\n+if { [check_effective_target_aarch64_sve] } {\n+    set sve_flags \"\"\n+} else {\n+    set sve_flags \"-march=armv8.2-a+sve\"\n+}\n+\n+global gcc_runtest_parallelize_limit_minor\n+if { [info exists gcc_runtest_parallelize_limit_minor] } {\n+    set old_limit_minor $gcc_runtest_parallelize_limit_minor\n+    set gcc_runtest_parallelize_limit_minor 1\n+}\n+\n+torture-init\n+set-torture-options {\n+    \"-std=c++98 -O0 -g\"\n+    \"-std=c++98 -O1 -g\"\n+    \"-std=c++11 -O2 -g\"\n+    \"-std=c++14 -O3 -g\"\n+    \"-std=c++17 -Og -g\"\n+    \"-std=c++2a -Os -g\"\n+    \"-std=gnu++98 -O2 -fno-schedule-insns -DCHECK_ASM --save-temps\"\n+    \"-std=gnu++11 -Ofast -g\"\n+    \"-std=gnu++17 -O3 -g\"\n+    \"-std=gnu++2a -O0 -g\"\n+} {\n+    \"-DTEST_FULL\"\n+    \"-DTEST_OVERLOADS\"\n+}\n+\n+# Main loop.\n+set gcc_subdir [string replace $subdir 0 2 gcc]\n+set files [glob -nocomplain $srcdir/$gcc_subdir/asm/*.c]\n+set save-dg-do-what-default ${dg-do-what-default}\n+if { [check_effective_target_aarch64_asm_sve_ok]\n+     && [check_effective_target_aarch64_variant_pcs] } {\n+    set dg-do-what-default assemble\n+} else {\n+    set dg-do-what-default compile\n+}\n+gcc-dg-runtest [lsort $files] \"\" \"$sve_flags -fno-ipa-icf\"\n+set dg-do-what-default ${save-dg-do-what-default}\n+\n+torture-finish\n+\n+if { [info exists gcc_runtest_parallelize_limit_minor] } {\n+    set gcc_runtest_parallelize_limit_minor $old_limit_minor\n+}\n+\n+# All done.\n+dg-finish"}, {"sha": "7ce85a4140706396d0ffe3324a765c2d2e5d288f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/aarch64-sve-acle-asm.exp", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle-asm.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle-asm.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Faarch64-sve-acle-asm.exp?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,79 @@\n+#  Assembly-based regression-test driver for the SVE ACLE\n+#  Copyright (C) 2009-2019 Free Software Foundation, Inc.\n+#\n+#  This file is part of GCC.\n+#\n+#  GCC is free software; you can redistribute it and/or modify it\n+#  under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 3, or (at your option)\n+#  any later version.\n+#\n+#  GCC is distributed in the hope that it will be useful, but\n+#  WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+#  General Public License for more details.\n+#\n+#  You should have received a copy of the GNU General Public License\n+#  along with GCC; see the file COPYING3.  If not see\n+#  <http://www.gnu.org/licenses/>.  */\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an AArch64 target.\n+if {![istarget aarch64*-*-*] } {\n+    return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Force SVE if we're not testing it already.\n+if { [check_effective_target_aarch64_sve] } {\n+    set sve_flags \"\"\n+} else {\n+    set sve_flags \"-march=armv8.2-a+sve\"\n+}\n+\n+global gcc_runtest_parallelize_limit_minor\n+if { [info exists gcc_runtest_parallelize_limit_minor] } {\n+    set old_limit_minor $gcc_runtest_parallelize_limit_minor\n+    set gcc_runtest_parallelize_limit_minor 1\n+}\n+\n+torture-init\n+set-torture-options {\n+    \"-std=c90 -O0 -g\"\n+    \"-std=c90 -O1 -g\"\n+    \"-std=c99 -O2 -g\"\n+    \"-std=c11 -O3 -g\"\n+    \"-std=gnu90 -O2 -fno-schedule-insns -DCHECK_ASM --save-temps\"\n+    \"-std=gnu99 -Ofast -g\"\n+    \"-std=gnu11 -Os -g\"\n+} {\n+    \"-DTEST_FULL\"\n+    \"-DTEST_OVERLOADS\"\n+}\n+\n+# Main loop.\n+set files [glob -nocomplain $srcdir/$subdir/asm/*.c]\n+set save-dg-do-what-default ${dg-do-what-default}\n+if { [check_effective_target_aarch64_asm_sve_ok]\n+     && [check_effective_target_aarch64_variant_pcs] } {\n+    set dg-do-what-default assemble\n+} else {\n+    set dg-do-what-default compile\n+}\n+gcc-dg-runtest [lsort $files] \"\" \"$sve_flags -fno-ipa-icf\"\n+set dg-do-what-default ${save-dg-do-what-default}\n+\n+torture-finish\n+\n+if { [info exists gcc_runtest_parallelize_limit_minor] } {\n+    set gcc_runtest_parallelize_limit_minor $old_limit_minor\n+}\n+\n+# All done.\n+dg-finish"}, {"sha": "c019f248d20aa97950095d2141cb370fcb479234", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abd_f16.c", "status": "added", "additions": 552, "deletions": 0, "changes": 552, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,552 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abd_f16_m_tied1:\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f16_m_tied1, svfloat16_t,\n+\t\tz0 = svabd_f16_m (p0, z0, z1),\n+\t\tz0 = svabd_m (p0, z0, z1))\n+\n+/*\n+** abd_f16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f16_m_tied2, svfloat16_t,\n+\t\tz0 = svabd_f16_m (p0, z1, z0),\n+\t\tz0 = svabd_m (p0, z1, z0))\n+\n+/*\n+** abd_f16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f16_m_untied, svfloat16_t,\n+\t\tz0 = svabd_f16_m (p0, z1, z2),\n+\t\tz0 = svabd_m (p0, z1, z2))\n+\n+/*\n+** abd_h4_f16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), h4\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_h4_f16_m_tied1, svfloat16_t, __fp16,\n+\t\t z0 = svabd_n_f16_m (p0, z0, d4),\n+\t\t z0 = svabd_m (p0, z0, d4))\n+\n+/*\n+** abd_h4_f16_m_untied:\n+**\tmov\t(z[0-9]+\\.h), h4\n+**\tmovprfx\tz0, z1\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_h4_f16_m_untied, svfloat16_t, __fp16,\n+\t\t z0 = svabd_n_f16_m (p0, z1, d4),\n+\t\t z0 = svabd_m (p0, z1, d4))\n+\n+/*\n+** abd_1_f16_m_tied1:\n+**\tfmov\t(z[0-9]+\\.h), #1\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f16_m_tied1, svfloat16_t,\n+\t\tz0 = svabd_n_f16_m (p0, z0, 1),\n+\t\tz0 = svabd_m (p0, z0, 1))\n+\n+/*\n+** abd_1_f16_m_untied: { xfail *-*-* }\n+**\tfmov\t(z[0-9]+\\.h), #1\\.0(?:e\\+0)?\n+**\tmovprfx\tz0, z1\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f16_m_untied, svfloat16_t,\n+\t\tz0 = svabd_n_f16_m (p0, z1, 1),\n+\t\tz0 = svabd_m (p0, z1, 1))\n+\n+/*\n+** abd_f16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svabd_f16_z (p0, z0, z1),\n+\t\tz0 = svabd_z (p0, z0, z1))\n+\n+/*\n+** abd_f16_z_tied2:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f16_z_tied2, svfloat16_t,\n+\t\tz0 = svabd_f16_z (p0, z1, z0),\n+\t\tz0 = svabd_z (p0, z1, z0))\n+\n+/*\n+** abd_f16_z_untied:\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, z2\\.h\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f16_z_untied, svfloat16_t,\n+\t\tz0 = svabd_f16_z (p0, z1, z2),\n+\t\tz0 = svabd_z (p0, z1, z2))\n+\n+/*\n+** abd_h4_f16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), h4\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_h4_f16_z_tied1, svfloat16_t, __fp16,\n+\t\t z0 = svabd_n_f16_z (p0, z0, d4),\n+\t\t z0 = svabd_z (p0, z0, d4))\n+\n+/*\n+** abd_h4_f16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), h4\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_h4_f16_z_untied, svfloat16_t, __fp16,\n+\t\t z0 = svabd_n_f16_z (p0, z1, d4),\n+\t\t z0 = svabd_z (p0, z1, d4))\n+\n+/*\n+** abd_1_f16_z_tied1:\n+**\tfmov\t(z[0-9]+\\.h), #1\\.0(?:e\\+0)?\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svabd_n_f16_z (p0, z0, 1),\n+\t\tz0 = svabd_z (p0, z0, 1))\n+\n+/*\n+** abd_1_f16_z_untied:\n+**\tfmov\t(z[0-9]+\\.h), #1\\.0(?:e\\+0)?\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f16_z_untied, svfloat16_t,\n+\t\tz0 = svabd_n_f16_z (p0, z1, 1),\n+\t\tz0 = svabd_z (p0, z1, 1))\n+\n+/*\n+** abd_0p5_f16_z_tied1:\n+**\tfmov\t(z[0-9]+\\.h), #(?:0\\.5|5\\.0e-1)\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_0p5_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svabd_n_f16_z (p0, z0, 0.5),\n+\t\tz0 = svabd_z (p0, z0, 0.5))\n+\n+/*\n+** abd_0p5_f16_z_untied:\n+**\tfmov\t(z[0-9]+\\.h), #(?:0\\.5|5\\.0e-1)\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_0p5_f16_z_untied, svfloat16_t,\n+\t\tz0 = svabd_n_f16_z (p0, z1, 0.5),\n+\t\tz0 = svabd_z (p0, z1, 0.5))\n+\n+/*\n+** abd_m1_f16_z_tied1:\n+**\tfmov\t(z[0-9]+\\.h), #-1\\.0(?:e\\+0)?\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m1_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svabd_n_f16_z (p0, z0, -1),\n+\t\tz0 = svabd_z (p0, z0, -1))\n+\n+/*\n+** abd_m1_f16_z_untied:\n+**\tfmov\t(z[0-9]+\\.h), #-1\\.0(?:e\\+0)?\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m1_f16_z_untied, svfloat16_t,\n+\t\tz0 = svabd_n_f16_z (p0, z1, -1),\n+\t\tz0 = svabd_z (p0, z1, -1))\n+\n+/*\n+** abd_m0p5_f16_z_tied1:\n+**\tfmov\t(z[0-9]+\\.h), #-(?:0\\.5|5\\.0e-1)\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m0p5_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svabd_n_f16_z (p0, z0, -0.5),\n+\t\tz0 = svabd_z (p0, z0, -0.5))\n+\n+/*\n+** abd_m0p5_f16_z_untied:\n+**\tfmov\t(z[0-9]+\\.h), #-(?:0\\.5|5\\.0e-1)\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m0p5_f16_z_untied, svfloat16_t,\n+\t\tz0 = svabd_n_f16_z (p0, z1, -0.5),\n+\t\tz0 = svabd_z (p0, z1, -0.5))\n+\n+/*\n+** abd_m2_f16_z:\n+**\tfmov\t(z[0-9]+\\.h), #-2\\.0(?:e\\+0)?\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m2_f16_z, svfloat16_t,\n+\t\tz0 = svabd_n_f16_z (p0, z0, -2),\n+\t\tz0 = svabd_z (p0, z0, -2))\n+\n+/*\n+** abd_f16_x_tied1:\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svabd_f16_x (p0, z0, z1),\n+\t\tz0 = svabd_x (p0, z0, z1))\n+\n+/*\n+** abd_f16_x_tied2:\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f16_x_tied2, svfloat16_t,\n+\t\tz0 = svabd_f16_x (p0, z1, z0),\n+\t\tz0 = svabd_x (p0, z1, z0))\n+\n+/*\n+** abd_f16_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+** |\n+**\tmovprfx\tz0, z2\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f16_x_untied, svfloat16_t,\n+\t\tz0 = svabd_f16_x (p0, z1, z2),\n+\t\tz0 = svabd_x (p0, z1, z2))\n+\n+/*\n+** abd_h4_f16_x_tied1:\n+**\tmov\t(z[0-9]+\\.h), h4\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_h4_f16_x_tied1, svfloat16_t, __fp16,\n+\t\t z0 = svabd_n_f16_x (p0, z0, d4),\n+\t\t z0 = svabd_x (p0, z0, d4))\n+\n+/*\n+** abd_h4_f16_x_untied:\n+**\tmov\tz0\\.h, h4\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_h4_f16_x_untied, svfloat16_t, __fp16,\n+\t\t z0 = svabd_n_f16_x (p0, z1, d4),\n+\t\t z0 = svabd_x (p0, z1, d4))\n+\n+/*\n+** abd_1_f16_x_tied1:\n+**\tfmov\t(z[0-9]+\\.h), #1\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (p0, z0, 1),\n+\t\tz0 = svabd_x (p0, z0, 1))\n+\n+/*\n+** abd_1_f16_x_untied:\n+**\tfmov\tz0\\.h, #1\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f16_x_untied, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (p0, z1, 1),\n+\t\tz0 = svabd_x (p0, z1, 1))\n+\n+/*\n+** abd_0p5_f16_x_tied1:\n+**\tfmov\t(z[0-9]+\\.h), #(?:0\\.5|5\\.0e-1)\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_0p5_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (p0, z0, 0.5),\n+\t\tz0 = svabd_x (p0, z0, 0.5))\n+\n+/*\n+** abd_0p5_f16_x_untied:\n+**\tfmov\tz0\\.h, #(?:0\\.5|5\\.0e-1)\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_0p5_f16_x_untied, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (p0, z1, 0.5),\n+\t\tz0 = svabd_x (p0, z1, 0.5))\n+\n+/*\n+** abd_m1_f16_x_tied1:\n+**\tfmov\t(z[0-9]+\\.h), #-1\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m1_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (p0, z0, -1),\n+\t\tz0 = svabd_x (p0, z0, -1))\n+\n+/*\n+** abd_m1_f16_x_untied:\n+**\tfmov\tz0\\.h, #-1\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m1_f16_x_untied, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (p0, z1, -1),\n+\t\tz0 = svabd_x (p0, z1, -1))\n+\n+/*\n+** abd_m0p5_f16_x_tied1:\n+**\tfmov\t(z[0-9]+\\.h), #-(?:0\\.5|5\\.0e-1)\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m0p5_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (p0, z0, -0.5),\n+\t\tz0 = svabd_x (p0, z0, -0.5))\n+\n+/*\n+** abd_m0p5_f16_x_untied:\n+**\tfmov\tz0\\.h, #-(?:0\\.5|5\\.0e-1)\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m0p5_f16_x_untied, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (p0, z1, -0.5),\n+\t\tz0 = svabd_x (p0, z1, -0.5))\n+\n+/*\n+** abd_2_f16_x_tied1:\n+**\tfmov\t(z[0-9]+\\.h), #2\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_2_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (p0, z0, 2),\n+\t\tz0 = svabd_x (p0, z0, 2))\n+\n+/*\n+** abd_2_f16_x_untied:\n+**\tfmov\tz0\\.h, #2\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_2_f16_x_untied, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (p0, z1, 2),\n+\t\tz0 = svabd_x (p0, z1, 2))\n+\n+/*\n+** ptrue_abd_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svabd_f16_x (svptrue_b16 (), z0, z1),\n+\t\tz0 = svabd_x (svptrue_b16 (), z0, z1))\n+\n+/*\n+** ptrue_abd_f16_x_tied2:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_f16_x_tied2, svfloat16_t,\n+\t\tz0 = svabd_f16_x (svptrue_b16 (), z1, z0),\n+\t\tz0 = svabd_x (svptrue_b16 (), z1, z0))\n+\n+/*\n+** ptrue_abd_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_f16_x_untied, svfloat16_t,\n+\t\tz0 = svabd_f16_x (svptrue_b16 (), z1, z2),\n+\t\tz0 = svabd_x (svptrue_b16 (), z1, z2))\n+\n+/*\n+** ptrue_abd_1_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_1_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (svptrue_b16 (), z0, 1),\n+\t\tz0 = svabd_x (svptrue_b16 (), z0, 1))\n+\n+/*\n+** ptrue_abd_1_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_1_f16_x_untied, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (svptrue_b16 (), z1, 1),\n+\t\tz0 = svabd_x (svptrue_b16 (), z1, 1))\n+\n+/*\n+** ptrue_abd_0p5_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_0p5_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (svptrue_b16 (), z0, 0.5),\n+\t\tz0 = svabd_x (svptrue_b16 (), z0, 0.5))\n+\n+/*\n+** ptrue_abd_0p5_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_0p5_f16_x_untied, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (svptrue_b16 (), z1, 0.5),\n+\t\tz0 = svabd_x (svptrue_b16 (), z1, 0.5))\n+\n+/*\n+** ptrue_abd_m1_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_m1_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (svptrue_b16 (), z0, -1),\n+\t\tz0 = svabd_x (svptrue_b16 (), z0, -1))\n+\n+/*\n+** ptrue_abd_m1_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_m1_f16_x_untied, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (svptrue_b16 (), z1, -1),\n+\t\tz0 = svabd_x (svptrue_b16 (), z1, -1))\n+\n+/*\n+** ptrue_abd_m0p5_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_m0p5_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (svptrue_b16 (), z0, -0.5),\n+\t\tz0 = svabd_x (svptrue_b16 (), z0, -0.5))\n+\n+/*\n+** ptrue_abd_m0p5_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_m0p5_f16_x_untied, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (svptrue_b16 (), z1, -0.5),\n+\t\tz0 = svabd_x (svptrue_b16 (), z1, -0.5))\n+\n+/*\n+** ptrue_abd_2_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_2_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (svptrue_b16 (), z0, 2),\n+\t\tz0 = svabd_x (svptrue_b16 (), z0, 2))\n+\n+/*\n+** ptrue_abd_2_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_2_f16_x_untied, svfloat16_t,\n+\t\tz0 = svabd_n_f16_x (svptrue_b16 (), z1, 2),\n+\t\tz0 = svabd_x (svptrue_b16 (), z1, 2))"}, {"sha": "bff37580c432032a3e4198010e60a5f8175b03ed", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abd_f32.c", "status": "added", "additions": 552, "deletions": 0, "changes": 552, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,552 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abd_f32_m_tied1:\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f32_m_tied1, svfloat32_t,\n+\t\tz0 = svabd_f32_m (p0, z0, z1),\n+\t\tz0 = svabd_m (p0, z0, z1))\n+\n+/*\n+** abd_f32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f32_m_tied2, svfloat32_t,\n+\t\tz0 = svabd_f32_m (p0, z1, z0),\n+\t\tz0 = svabd_m (p0, z1, z0))\n+\n+/*\n+** abd_f32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f32_m_untied, svfloat32_t,\n+\t\tz0 = svabd_f32_m (p0, z1, z2),\n+\t\tz0 = svabd_m (p0, z1, z2))\n+\n+/*\n+** abd_s4_f32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), s4\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_s4_f32_m_tied1, svfloat32_t, float,\n+\t\t z0 = svabd_n_f32_m (p0, z0, d4),\n+\t\t z0 = svabd_m (p0, z0, d4))\n+\n+/*\n+** abd_s4_f32_m_untied:\n+**\tmov\t(z[0-9]+\\.s), s4\n+**\tmovprfx\tz0, z1\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_s4_f32_m_untied, svfloat32_t, float,\n+\t\t z0 = svabd_n_f32_m (p0, z1, d4),\n+\t\t z0 = svabd_m (p0, z1, d4))\n+\n+/*\n+** abd_1_f32_m_tied1:\n+**\tfmov\t(z[0-9]+\\.s), #1\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f32_m_tied1, svfloat32_t,\n+\t\tz0 = svabd_n_f32_m (p0, z0, 1),\n+\t\tz0 = svabd_m (p0, z0, 1))\n+\n+/*\n+** abd_1_f32_m_untied: { xfail *-*-* }\n+**\tfmov\t(z[0-9]+\\.s), #1\\.0(?:e\\+0)?\n+**\tmovprfx\tz0, z1\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f32_m_untied, svfloat32_t,\n+\t\tz0 = svabd_n_f32_m (p0, z1, 1),\n+\t\tz0 = svabd_m (p0, z1, 1))\n+\n+/*\n+** abd_f32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svabd_f32_z (p0, z0, z1),\n+\t\tz0 = svabd_z (p0, z0, z1))\n+\n+/*\n+** abd_f32_z_tied2:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f32_z_tied2, svfloat32_t,\n+\t\tz0 = svabd_f32_z (p0, z1, z0),\n+\t\tz0 = svabd_z (p0, z1, z0))\n+\n+/*\n+** abd_f32_z_untied:\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, z2\\.s\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f32_z_untied, svfloat32_t,\n+\t\tz0 = svabd_f32_z (p0, z1, z2),\n+\t\tz0 = svabd_z (p0, z1, z2))\n+\n+/*\n+** abd_s4_f32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), s4\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_s4_f32_z_tied1, svfloat32_t, float,\n+\t\t z0 = svabd_n_f32_z (p0, z0, d4),\n+\t\t z0 = svabd_z (p0, z0, d4))\n+\n+/*\n+** abd_s4_f32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), s4\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_s4_f32_z_untied, svfloat32_t, float,\n+\t\t z0 = svabd_n_f32_z (p0, z1, d4),\n+\t\t z0 = svabd_z (p0, z1, d4))\n+\n+/*\n+** abd_1_f32_z_tied1:\n+**\tfmov\t(z[0-9]+\\.s), #1\\.0(?:e\\+0)?\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svabd_n_f32_z (p0, z0, 1),\n+\t\tz0 = svabd_z (p0, z0, 1))\n+\n+/*\n+** abd_1_f32_z_untied:\n+**\tfmov\t(z[0-9]+\\.s), #1\\.0(?:e\\+0)?\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f32_z_untied, svfloat32_t,\n+\t\tz0 = svabd_n_f32_z (p0, z1, 1),\n+\t\tz0 = svabd_z (p0, z1, 1))\n+\n+/*\n+** abd_0p5_f32_z_tied1:\n+**\tfmov\t(z[0-9]+\\.s), #(?:0\\.5|5\\.0e-1)\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_0p5_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svabd_n_f32_z (p0, z0, 0.5),\n+\t\tz0 = svabd_z (p0, z0, 0.5))\n+\n+/*\n+** abd_0p5_f32_z_untied:\n+**\tfmov\t(z[0-9]+\\.s), #(?:0\\.5|5\\.0e-1)\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_0p5_f32_z_untied, svfloat32_t,\n+\t\tz0 = svabd_n_f32_z (p0, z1, 0.5),\n+\t\tz0 = svabd_z (p0, z1, 0.5))\n+\n+/*\n+** abd_m1_f32_z_tied1:\n+**\tfmov\t(z[0-9]+\\.s), #-1\\.0(?:e\\+0)?\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m1_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svabd_n_f32_z (p0, z0, -1),\n+\t\tz0 = svabd_z (p0, z0, -1))\n+\n+/*\n+** abd_m1_f32_z_untied:\n+**\tfmov\t(z[0-9]+\\.s), #-1\\.0(?:e\\+0)?\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m1_f32_z_untied, svfloat32_t,\n+\t\tz0 = svabd_n_f32_z (p0, z1, -1),\n+\t\tz0 = svabd_z (p0, z1, -1))\n+\n+/*\n+** abd_m0p5_f32_z_tied1:\n+**\tfmov\t(z[0-9]+\\.s), #-(?:0\\.5|5\\.0e-1)\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m0p5_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svabd_n_f32_z (p0, z0, -0.5),\n+\t\tz0 = svabd_z (p0, z0, -0.5))\n+\n+/*\n+** abd_m0p5_f32_z_untied:\n+**\tfmov\t(z[0-9]+\\.s), #-(?:0\\.5|5\\.0e-1)\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m0p5_f32_z_untied, svfloat32_t,\n+\t\tz0 = svabd_n_f32_z (p0, z1, -0.5),\n+\t\tz0 = svabd_z (p0, z1, -0.5))\n+\n+/*\n+** abd_m2_f32_z:\n+**\tfmov\t(z[0-9]+\\.s), #-2\\.0(?:e\\+0)?\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m2_f32_z, svfloat32_t,\n+\t\tz0 = svabd_n_f32_z (p0, z0, -2),\n+\t\tz0 = svabd_z (p0, z0, -2))\n+\n+/*\n+** abd_f32_x_tied1:\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svabd_f32_x (p0, z0, z1),\n+\t\tz0 = svabd_x (p0, z0, z1))\n+\n+/*\n+** abd_f32_x_tied2:\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f32_x_tied2, svfloat32_t,\n+\t\tz0 = svabd_f32_x (p0, z1, z0),\n+\t\tz0 = svabd_x (p0, z1, z0))\n+\n+/*\n+** abd_f32_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+** |\n+**\tmovprfx\tz0, z2\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f32_x_untied, svfloat32_t,\n+\t\tz0 = svabd_f32_x (p0, z1, z2),\n+\t\tz0 = svabd_x (p0, z1, z2))\n+\n+/*\n+** abd_s4_f32_x_tied1:\n+**\tmov\t(z[0-9]+\\.s), s4\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_s4_f32_x_tied1, svfloat32_t, float,\n+\t\t z0 = svabd_n_f32_x (p0, z0, d4),\n+\t\t z0 = svabd_x (p0, z0, d4))\n+\n+/*\n+** abd_s4_f32_x_untied:\n+**\tmov\tz0\\.s, s4\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_s4_f32_x_untied, svfloat32_t, float,\n+\t\t z0 = svabd_n_f32_x (p0, z1, d4),\n+\t\t z0 = svabd_x (p0, z1, d4))\n+\n+/*\n+** abd_1_f32_x_tied1:\n+**\tfmov\t(z[0-9]+\\.s), #1\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (p0, z0, 1),\n+\t\tz0 = svabd_x (p0, z0, 1))\n+\n+/*\n+** abd_1_f32_x_untied:\n+**\tfmov\tz0\\.s, #1\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f32_x_untied, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (p0, z1, 1),\n+\t\tz0 = svabd_x (p0, z1, 1))\n+\n+/*\n+** abd_0p5_f32_x_tied1:\n+**\tfmov\t(z[0-9]+\\.s), #(?:0\\.5|5\\.0e-1)\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_0p5_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (p0, z0, 0.5),\n+\t\tz0 = svabd_x (p0, z0, 0.5))\n+\n+/*\n+** abd_0p5_f32_x_untied:\n+**\tfmov\tz0\\.s, #(?:0\\.5|5\\.0e-1)\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_0p5_f32_x_untied, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (p0, z1, 0.5),\n+\t\tz0 = svabd_x (p0, z1, 0.5))\n+\n+/*\n+** abd_m1_f32_x_tied1:\n+**\tfmov\t(z[0-9]+\\.s), #-1\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m1_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (p0, z0, -1),\n+\t\tz0 = svabd_x (p0, z0, -1))\n+\n+/*\n+** abd_m1_f32_x_untied:\n+**\tfmov\tz0\\.s, #-1\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m1_f32_x_untied, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (p0, z1, -1),\n+\t\tz0 = svabd_x (p0, z1, -1))\n+\n+/*\n+** abd_m0p5_f32_x_tied1:\n+**\tfmov\t(z[0-9]+\\.s), #-(?:0\\.5|5\\.0e-1)\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m0p5_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (p0, z0, -0.5),\n+\t\tz0 = svabd_x (p0, z0, -0.5))\n+\n+/*\n+** abd_m0p5_f32_x_untied:\n+**\tfmov\tz0\\.s, #-(?:0\\.5|5\\.0e-1)\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m0p5_f32_x_untied, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (p0, z1, -0.5),\n+\t\tz0 = svabd_x (p0, z1, -0.5))\n+\n+/*\n+** abd_2_f32_x_tied1:\n+**\tfmov\t(z[0-9]+\\.s), #2\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_2_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (p0, z0, 2),\n+\t\tz0 = svabd_x (p0, z0, 2))\n+\n+/*\n+** abd_2_f32_x_untied:\n+**\tfmov\tz0\\.s, #2\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_2_f32_x_untied, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (p0, z1, 2),\n+\t\tz0 = svabd_x (p0, z1, 2))\n+\n+/*\n+** ptrue_abd_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svabd_f32_x (svptrue_b32 (), z0, z1),\n+\t\tz0 = svabd_x (svptrue_b32 (), z0, z1))\n+\n+/*\n+** ptrue_abd_f32_x_tied2:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_f32_x_tied2, svfloat32_t,\n+\t\tz0 = svabd_f32_x (svptrue_b32 (), z1, z0),\n+\t\tz0 = svabd_x (svptrue_b32 (), z1, z0))\n+\n+/*\n+** ptrue_abd_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_f32_x_untied, svfloat32_t,\n+\t\tz0 = svabd_f32_x (svptrue_b32 (), z1, z2),\n+\t\tz0 = svabd_x (svptrue_b32 (), z1, z2))\n+\n+/*\n+** ptrue_abd_1_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_1_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (svptrue_b32 (), z0, 1),\n+\t\tz0 = svabd_x (svptrue_b32 (), z0, 1))\n+\n+/*\n+** ptrue_abd_1_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_1_f32_x_untied, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (svptrue_b32 (), z1, 1),\n+\t\tz0 = svabd_x (svptrue_b32 (), z1, 1))\n+\n+/*\n+** ptrue_abd_0p5_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_0p5_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (svptrue_b32 (), z0, 0.5),\n+\t\tz0 = svabd_x (svptrue_b32 (), z0, 0.5))\n+\n+/*\n+** ptrue_abd_0p5_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_0p5_f32_x_untied, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (svptrue_b32 (), z1, 0.5),\n+\t\tz0 = svabd_x (svptrue_b32 (), z1, 0.5))\n+\n+/*\n+** ptrue_abd_m1_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_m1_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (svptrue_b32 (), z0, -1),\n+\t\tz0 = svabd_x (svptrue_b32 (), z0, -1))\n+\n+/*\n+** ptrue_abd_m1_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_m1_f32_x_untied, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (svptrue_b32 (), z1, -1),\n+\t\tz0 = svabd_x (svptrue_b32 (), z1, -1))\n+\n+/*\n+** ptrue_abd_m0p5_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_m0p5_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (svptrue_b32 (), z0, -0.5),\n+\t\tz0 = svabd_x (svptrue_b32 (), z0, -0.5))\n+\n+/*\n+** ptrue_abd_m0p5_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_m0p5_f32_x_untied, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (svptrue_b32 (), z1, -0.5),\n+\t\tz0 = svabd_x (svptrue_b32 (), z1, -0.5))\n+\n+/*\n+** ptrue_abd_2_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_2_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (svptrue_b32 (), z0, 2),\n+\t\tz0 = svabd_x (svptrue_b32 (), z0, 2))\n+\n+/*\n+** ptrue_abd_2_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_2_f32_x_untied, svfloat32_t,\n+\t\tz0 = svabd_n_f32_x (svptrue_b32 (), z1, 2),\n+\t\tz0 = svabd_x (svptrue_b32 (), z1, 2))"}, {"sha": "c1e5f14e619a0d46b88d102ee0c729a0ca9a8821", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abd_f64.c", "status": "added", "additions": 552, "deletions": 0, "changes": 552, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,552 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abd_f64_m_tied1:\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f64_m_tied1, svfloat64_t,\n+\t\tz0 = svabd_f64_m (p0, z0, z1),\n+\t\tz0 = svabd_m (p0, z0, z1))\n+\n+/*\n+** abd_f64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f64_m_tied2, svfloat64_t,\n+\t\tz0 = svabd_f64_m (p0, z1, z0),\n+\t\tz0 = svabd_m (p0, z1, z0))\n+\n+/*\n+** abd_f64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f64_m_untied, svfloat64_t,\n+\t\tz0 = svabd_f64_m (p0, z1, z2),\n+\t\tz0 = svabd_m (p0, z1, z2))\n+\n+/*\n+** abd_d4_f64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), d4\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_d4_f64_m_tied1, svfloat64_t, double,\n+\t\t z0 = svabd_n_f64_m (p0, z0, d4),\n+\t\t z0 = svabd_m (p0, z0, d4))\n+\n+/*\n+** abd_d4_f64_m_untied:\n+**\tmov\t(z[0-9]+\\.d), d4\n+**\tmovprfx\tz0, z1\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_d4_f64_m_untied, svfloat64_t, double,\n+\t\t z0 = svabd_n_f64_m (p0, z1, d4),\n+\t\t z0 = svabd_m (p0, z1, d4))\n+\n+/*\n+** abd_1_f64_m_tied1:\n+**\tfmov\t(z[0-9]+\\.d), #1\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f64_m_tied1, svfloat64_t,\n+\t\tz0 = svabd_n_f64_m (p0, z0, 1),\n+\t\tz0 = svabd_m (p0, z0, 1))\n+\n+/*\n+** abd_1_f64_m_untied: { xfail *-*-* }\n+**\tfmov\t(z[0-9]+\\.d), #1\\.0(?:e\\+0)?\n+**\tmovprfx\tz0, z1\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f64_m_untied, svfloat64_t,\n+\t\tz0 = svabd_n_f64_m (p0, z1, 1),\n+\t\tz0 = svabd_m (p0, z1, 1))\n+\n+/*\n+** abd_f64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svabd_f64_z (p0, z0, z1),\n+\t\tz0 = svabd_z (p0, z0, z1))\n+\n+/*\n+** abd_f64_z_tied2:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f64_z_tied2, svfloat64_t,\n+\t\tz0 = svabd_f64_z (p0, z1, z0),\n+\t\tz0 = svabd_z (p0, z1, z0))\n+\n+/*\n+** abd_f64_z_untied:\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, z2\\.d\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f64_z_untied, svfloat64_t,\n+\t\tz0 = svabd_f64_z (p0, z1, z2),\n+\t\tz0 = svabd_z (p0, z1, z2))\n+\n+/*\n+** abd_d4_f64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), d4\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_d4_f64_z_tied1, svfloat64_t, double,\n+\t\t z0 = svabd_n_f64_z (p0, z0, d4),\n+\t\t z0 = svabd_z (p0, z0, d4))\n+\n+/*\n+** abd_d4_f64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), d4\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_d4_f64_z_untied, svfloat64_t, double,\n+\t\t z0 = svabd_n_f64_z (p0, z1, d4),\n+\t\t z0 = svabd_z (p0, z1, d4))\n+\n+/*\n+** abd_1_f64_z_tied1:\n+**\tfmov\t(z[0-9]+\\.d), #1\\.0(?:e\\+0)?\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svabd_n_f64_z (p0, z0, 1),\n+\t\tz0 = svabd_z (p0, z0, 1))\n+\n+/*\n+** abd_1_f64_z_untied:\n+**\tfmov\t(z[0-9]+\\.d), #1\\.0(?:e\\+0)?\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f64_z_untied, svfloat64_t,\n+\t\tz0 = svabd_n_f64_z (p0, z1, 1),\n+\t\tz0 = svabd_z (p0, z1, 1))\n+\n+/*\n+** abd_0p5_f64_z_tied1:\n+**\tfmov\t(z[0-9]+\\.d), #(?:0\\.5|5\\.0e-1)\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_0p5_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svabd_n_f64_z (p0, z0, 0.5),\n+\t\tz0 = svabd_z (p0, z0, 0.5))\n+\n+/*\n+** abd_0p5_f64_z_untied:\n+**\tfmov\t(z[0-9]+\\.d), #(?:0\\.5|5\\.0e-1)\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_0p5_f64_z_untied, svfloat64_t,\n+\t\tz0 = svabd_n_f64_z (p0, z1, 0.5),\n+\t\tz0 = svabd_z (p0, z1, 0.5))\n+\n+/*\n+** abd_m1_f64_z_tied1:\n+**\tfmov\t(z[0-9]+\\.d), #-1\\.0(?:e\\+0)?\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m1_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svabd_n_f64_z (p0, z0, -1),\n+\t\tz0 = svabd_z (p0, z0, -1))\n+\n+/*\n+** abd_m1_f64_z_untied:\n+**\tfmov\t(z[0-9]+\\.d), #-1\\.0(?:e\\+0)?\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m1_f64_z_untied, svfloat64_t,\n+\t\tz0 = svabd_n_f64_z (p0, z1, -1),\n+\t\tz0 = svabd_z (p0, z1, -1))\n+\n+/*\n+** abd_m0p5_f64_z_tied1:\n+**\tfmov\t(z[0-9]+\\.d), #-(?:0\\.5|5\\.0e-1)\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m0p5_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svabd_n_f64_z (p0, z0, -0.5),\n+\t\tz0 = svabd_z (p0, z0, -0.5))\n+\n+/*\n+** abd_m0p5_f64_z_untied:\n+**\tfmov\t(z[0-9]+\\.d), #-(?:0\\.5|5\\.0e-1)\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m0p5_f64_z_untied, svfloat64_t,\n+\t\tz0 = svabd_n_f64_z (p0, z1, -0.5),\n+\t\tz0 = svabd_z (p0, z1, -0.5))\n+\n+/*\n+** abd_m2_f64_z:\n+**\tfmov\t(z[0-9]+\\.d), #-2\\.0(?:e\\+0)?\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m2_f64_z, svfloat64_t,\n+\t\tz0 = svabd_n_f64_z (p0, z0, -2),\n+\t\tz0 = svabd_z (p0, z0, -2))\n+\n+/*\n+** abd_f64_x_tied1:\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svabd_f64_x (p0, z0, z1),\n+\t\tz0 = svabd_x (p0, z0, z1))\n+\n+/*\n+** abd_f64_x_tied2:\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f64_x_tied2, svfloat64_t,\n+\t\tz0 = svabd_f64_x (p0, z1, z0),\n+\t\tz0 = svabd_x (p0, z1, z0))\n+\n+/*\n+** abd_f64_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+** |\n+**\tmovprfx\tz0, z2\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_f64_x_untied, svfloat64_t,\n+\t\tz0 = svabd_f64_x (p0, z1, z2),\n+\t\tz0 = svabd_x (p0, z1, z2))\n+\n+/*\n+** abd_d4_f64_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), d4\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_d4_f64_x_tied1, svfloat64_t, double,\n+\t\t z0 = svabd_n_f64_x (p0, z0, d4),\n+\t\t z0 = svabd_x (p0, z0, d4))\n+\n+/*\n+** abd_d4_f64_x_untied:\n+**\tmov\tz0\\.d, d4\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (abd_d4_f64_x_untied, svfloat64_t, double,\n+\t\t z0 = svabd_n_f64_x (p0, z1, d4),\n+\t\t z0 = svabd_x (p0, z1, d4))\n+\n+/*\n+** abd_1_f64_x_tied1:\n+**\tfmov\t(z[0-9]+\\.d), #1\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (p0, z0, 1),\n+\t\tz0 = svabd_x (p0, z0, 1))\n+\n+/*\n+** abd_1_f64_x_untied:\n+**\tfmov\tz0\\.d, #1\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_f64_x_untied, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (p0, z1, 1),\n+\t\tz0 = svabd_x (p0, z1, 1))\n+\n+/*\n+** abd_0p5_f64_x_tied1:\n+**\tfmov\t(z[0-9]+\\.d), #(?:0\\.5|5\\.0e-1)\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_0p5_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (p0, z0, 0.5),\n+\t\tz0 = svabd_x (p0, z0, 0.5))\n+\n+/*\n+** abd_0p5_f64_x_untied:\n+**\tfmov\tz0\\.d, #(?:0\\.5|5\\.0e-1)\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_0p5_f64_x_untied, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (p0, z1, 0.5),\n+\t\tz0 = svabd_x (p0, z1, 0.5))\n+\n+/*\n+** abd_m1_f64_x_tied1:\n+**\tfmov\t(z[0-9]+\\.d), #-1\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m1_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (p0, z0, -1),\n+\t\tz0 = svabd_x (p0, z0, -1))\n+\n+/*\n+** abd_m1_f64_x_untied:\n+**\tfmov\tz0\\.d, #-1\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m1_f64_x_untied, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (p0, z1, -1),\n+\t\tz0 = svabd_x (p0, z1, -1))\n+\n+/*\n+** abd_m0p5_f64_x_tied1:\n+**\tfmov\t(z[0-9]+\\.d), #-(?:0\\.5|5\\.0e-1)\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m0p5_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (p0, z0, -0.5),\n+\t\tz0 = svabd_x (p0, z0, -0.5))\n+\n+/*\n+** abd_m0p5_f64_x_untied:\n+**\tfmov\tz0\\.d, #-(?:0\\.5|5\\.0e-1)\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_m0p5_f64_x_untied, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (p0, z1, -0.5),\n+\t\tz0 = svabd_x (p0, z1, -0.5))\n+\n+/*\n+** abd_2_f64_x_tied1:\n+**\tfmov\t(z[0-9]+\\.d), #2\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_2_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (p0, z0, 2),\n+\t\tz0 = svabd_x (p0, z0, 2))\n+\n+/*\n+** abd_2_f64_x_untied:\n+**\tfmov\tz0\\.d, #2\\.0(?:e\\+0)?\n+**\tfabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_2_f64_x_untied, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (p0, z1, 2),\n+\t\tz0 = svabd_x (p0, z1, 2))\n+\n+/*\n+** ptrue_abd_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svabd_f64_x (svptrue_b64 (), z0, z1),\n+\t\tz0 = svabd_x (svptrue_b64 (), z0, z1))\n+\n+/*\n+** ptrue_abd_f64_x_tied2:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_f64_x_tied2, svfloat64_t,\n+\t\tz0 = svabd_f64_x (svptrue_b64 (), z1, z0),\n+\t\tz0 = svabd_x (svptrue_b64 (), z1, z0))\n+\n+/*\n+** ptrue_abd_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_f64_x_untied, svfloat64_t,\n+\t\tz0 = svabd_f64_x (svptrue_b64 (), z1, z2),\n+\t\tz0 = svabd_x (svptrue_b64 (), z1, z2))\n+\n+/*\n+** ptrue_abd_1_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_1_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (svptrue_b64 (), z0, 1),\n+\t\tz0 = svabd_x (svptrue_b64 (), z0, 1))\n+\n+/*\n+** ptrue_abd_1_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_1_f64_x_untied, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (svptrue_b64 (), z1, 1),\n+\t\tz0 = svabd_x (svptrue_b64 (), z1, 1))\n+\n+/*\n+** ptrue_abd_0p5_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_0p5_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (svptrue_b64 (), z0, 0.5),\n+\t\tz0 = svabd_x (svptrue_b64 (), z0, 0.5))\n+\n+/*\n+** ptrue_abd_0p5_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_0p5_f64_x_untied, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (svptrue_b64 (), z1, 0.5),\n+\t\tz0 = svabd_x (svptrue_b64 (), z1, 0.5))\n+\n+/*\n+** ptrue_abd_m1_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_m1_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (svptrue_b64 (), z0, -1),\n+\t\tz0 = svabd_x (svptrue_b64 (), z0, -1))\n+\n+/*\n+** ptrue_abd_m1_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_m1_f64_x_untied, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (svptrue_b64 (), z1, -1),\n+\t\tz0 = svabd_x (svptrue_b64 (), z1, -1))\n+\n+/*\n+** ptrue_abd_m0p5_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_m0p5_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (svptrue_b64 (), z0, -0.5),\n+\t\tz0 = svabd_x (svptrue_b64 (), z0, -0.5))\n+\n+/*\n+** ptrue_abd_m0p5_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_m0p5_f64_x_untied, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (svptrue_b64 (), z1, -0.5),\n+\t\tz0 = svabd_x (svptrue_b64 (), z1, -0.5))\n+\n+/*\n+** ptrue_abd_2_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_2_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (svptrue_b64 (), z0, 2),\n+\t\tz0 = svabd_x (svptrue_b64 (), z0, 2))\n+\n+/*\n+** ptrue_abd_2_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abd_2_f64_x_untied, svfloat64_t,\n+\t\tz0 = svabd_n_f64_x (svptrue_b64 (), z1, 2),\n+\t\tz0 = svabd_x (svptrue_b64 (), z1, 2))"}, {"sha": "e2d0c0fb7ef3f9cd6f232bb5da7f5a46205a093f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abd_s16.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,237 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abd_s16_m_tied1:\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s16_m_tied1, svint16_t,\n+\t\tz0 = svabd_s16_m (p0, z0, z1),\n+\t\tz0 = svabd_m (p0, z0, z1))\n+\n+/*\n+** abd_s16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s16_m_tied2, svint16_t,\n+\t\tz0 = svabd_s16_m (p0, z1, z0),\n+\t\tz0 = svabd_m (p0, z1, z0))\n+\n+/*\n+** abd_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s16_m_untied, svint16_t,\n+\t\tz0 = svabd_s16_m (p0, z1, z2),\n+\t\tz0 = svabd_m (p0, z1, z2))\n+\n+/*\n+** abd_w0_s16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s16_m_tied1, svint16_t, int16_t,\n+\t\t z0 = svabd_n_s16_m (p0, z0, x0),\n+\t\t z0 = svabd_m (p0, z0, x0))\n+\n+/*\n+** abd_w0_s16_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s16_m_untied, svint16_t, int16_t,\n+\t\t z0 = svabd_n_s16_m (p0, z1, x0),\n+\t\t z0 = svabd_m (p0, z1, x0))\n+\n+/*\n+** abd_1_s16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s16_m_tied1, svint16_t,\n+\t\tz0 = svabd_n_s16_m (p0, z0, 1),\n+\t\tz0 = svabd_m (p0, z0, 1))\n+\n+/*\n+** abd_1_s16_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s16_m_untied, svint16_t,\n+\t\tz0 = svabd_n_s16_m (p0, z1, 1),\n+\t\tz0 = svabd_m (p0, z1, 1))\n+\n+/*\n+** abd_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s16_z_tied1, svint16_t,\n+\t\tz0 = svabd_s16_z (p0, z0, z1),\n+\t\tz0 = svabd_z (p0, z0, z1))\n+\n+/*\n+** abd_s16_z_tied2:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s16_z_tied2, svint16_t,\n+\t\tz0 = svabd_s16_z (p0, z1, z0),\n+\t\tz0 = svabd_z (p0, z1, z0))\n+\n+/*\n+** abd_s16_z_untied:\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, z2\\.h\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s16_z_untied, svint16_t,\n+\t\tz0 = svabd_s16_z (p0, z1, z2),\n+\t\tz0 = svabd_z (p0, z1, z2))\n+\n+/*\n+** abd_w0_s16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s16_z_tied1, svint16_t, int16_t,\n+\t\t z0 = svabd_n_s16_z (p0, z0, x0),\n+\t\t z0 = svabd_z (p0, z0, x0))\n+\n+/*\n+** abd_w0_s16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s16_z_untied, svint16_t, int16_t,\n+\t\t z0 = svabd_n_s16_z (p0, z1, x0),\n+\t\t z0 = svabd_z (p0, z1, x0))\n+\n+/*\n+** abd_1_s16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s16_z_tied1, svint16_t,\n+\t\tz0 = svabd_n_s16_z (p0, z0, 1),\n+\t\tz0 = svabd_z (p0, z0, 1))\n+\n+/*\n+** abd_1_s16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), #1\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s16_z_untied, svint16_t,\n+\t\tz0 = svabd_n_s16_z (p0, z1, 1),\n+\t\tz0 = svabd_z (p0, z1, 1))\n+\n+/*\n+** abd_s16_x_tied1:\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s16_x_tied1, svint16_t,\n+\t\tz0 = svabd_s16_x (p0, z0, z1),\n+\t\tz0 = svabd_x (p0, z0, z1))\n+\n+/*\n+** abd_s16_x_tied2:\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s16_x_tied2, svint16_t,\n+\t\tz0 = svabd_s16_x (p0, z1, z0),\n+\t\tz0 = svabd_x (p0, z1, z0))\n+\n+/*\n+** abd_s16_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+** |\n+**\tmovprfx\tz0, z2\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s16_x_untied, svint16_t,\n+\t\tz0 = svabd_s16_x (p0, z1, z2),\n+\t\tz0 = svabd_x (p0, z1, z2))\n+\n+/*\n+** abd_w0_s16_x_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s16_x_tied1, svint16_t, int16_t,\n+\t\t z0 = svabd_n_s16_x (p0, z0, x0),\n+\t\t z0 = svabd_x (p0, z0, x0))\n+\n+/*\n+** abd_w0_s16_x_untied:\n+**\tmov\tz0\\.h, w0\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s16_x_untied, svint16_t, int16_t,\n+\t\t z0 = svabd_n_s16_x (p0, z1, x0),\n+\t\t z0 = svabd_x (p0, z1, x0))\n+\n+/*\n+** abd_1_s16_x_tied1:\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s16_x_tied1, svint16_t,\n+\t\tz0 = svabd_n_s16_x (p0, z0, 1),\n+\t\tz0 = svabd_x (p0, z0, 1))\n+\n+/*\n+** abd_1_s16_x_untied:\n+**\tmov\tz0\\.h, #1\n+**\tsabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s16_x_untied, svint16_t,\n+\t\tz0 = svabd_n_s16_x (p0, z1, 1),\n+\t\tz0 = svabd_x (p0, z1, 1))"}, {"sha": "5c95ec04df11f01a9b965d04c8a439415c3b8ee8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abd_s32.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,237 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abd_s32_m_tied1:\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s32_m_tied1, svint32_t,\n+\t\tz0 = svabd_s32_m (p0, z0, z1),\n+\t\tz0 = svabd_m (p0, z0, z1))\n+\n+/*\n+** abd_s32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s32_m_tied2, svint32_t,\n+\t\tz0 = svabd_s32_m (p0, z1, z0),\n+\t\tz0 = svabd_m (p0, z1, z0))\n+\n+/*\n+** abd_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s32_m_untied, svint32_t,\n+\t\tz0 = svabd_s32_m (p0, z1, z2),\n+\t\tz0 = svabd_m (p0, z1, z2))\n+\n+/*\n+** abd_w0_s32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s32_m_tied1, svint32_t, int32_t,\n+\t\t z0 = svabd_n_s32_m (p0, z0, x0),\n+\t\t z0 = svabd_m (p0, z0, x0))\n+\n+/*\n+** abd_w0_s32_m_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s32_m_untied, svint32_t, int32_t,\n+\t\t z0 = svabd_n_s32_m (p0, z1, x0),\n+\t\t z0 = svabd_m (p0, z1, x0))\n+\n+/*\n+** abd_1_s32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s32_m_tied1, svint32_t,\n+\t\tz0 = svabd_n_s32_m (p0, z0, 1),\n+\t\tz0 = svabd_m (p0, z0, 1))\n+\n+/*\n+** abd_1_s32_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s32_m_untied, svint32_t,\n+\t\tz0 = svabd_n_s32_m (p0, z1, 1),\n+\t\tz0 = svabd_m (p0, z1, 1))\n+\n+/*\n+** abd_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s32_z_tied1, svint32_t,\n+\t\tz0 = svabd_s32_z (p0, z0, z1),\n+\t\tz0 = svabd_z (p0, z0, z1))\n+\n+/*\n+** abd_s32_z_tied2:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s32_z_tied2, svint32_t,\n+\t\tz0 = svabd_s32_z (p0, z1, z0),\n+\t\tz0 = svabd_z (p0, z1, z0))\n+\n+/*\n+** abd_s32_z_untied:\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, z2\\.s\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s32_z_untied, svint32_t,\n+\t\tz0 = svabd_s32_z (p0, z1, z2),\n+\t\tz0 = svabd_z (p0, z1, z2))\n+\n+/*\n+** abd_w0_s32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s32_z_tied1, svint32_t, int32_t,\n+\t\t z0 = svabd_n_s32_z (p0, z0, x0),\n+\t\t z0 = svabd_z (p0, z0, x0))\n+\n+/*\n+** abd_w0_s32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s32_z_untied, svint32_t, int32_t,\n+\t\t z0 = svabd_n_s32_z (p0, z1, x0),\n+\t\t z0 = svabd_z (p0, z1, x0))\n+\n+/*\n+** abd_1_s32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s32_z_tied1, svint32_t,\n+\t\tz0 = svabd_n_s32_z (p0, z0, 1),\n+\t\tz0 = svabd_z (p0, z0, 1))\n+\n+/*\n+** abd_1_s32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), #1\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s32_z_untied, svint32_t,\n+\t\tz0 = svabd_n_s32_z (p0, z1, 1),\n+\t\tz0 = svabd_z (p0, z1, 1))\n+\n+/*\n+** abd_s32_x_tied1:\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s32_x_tied1, svint32_t,\n+\t\tz0 = svabd_s32_x (p0, z0, z1),\n+\t\tz0 = svabd_x (p0, z0, z1))\n+\n+/*\n+** abd_s32_x_tied2:\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s32_x_tied2, svint32_t,\n+\t\tz0 = svabd_s32_x (p0, z1, z0),\n+\t\tz0 = svabd_x (p0, z1, z0))\n+\n+/*\n+** abd_s32_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+** |\n+**\tmovprfx\tz0, z2\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s32_x_untied, svint32_t,\n+\t\tz0 = svabd_s32_x (p0, z1, z2),\n+\t\tz0 = svabd_x (p0, z1, z2))\n+\n+/*\n+** abd_w0_s32_x_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s32_x_tied1, svint32_t, int32_t,\n+\t\t z0 = svabd_n_s32_x (p0, z0, x0),\n+\t\t z0 = svabd_x (p0, z0, x0))\n+\n+/*\n+** abd_w0_s32_x_untied:\n+**\tmov\tz0\\.s, w0\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s32_x_untied, svint32_t, int32_t,\n+\t\t z0 = svabd_n_s32_x (p0, z1, x0),\n+\t\t z0 = svabd_x (p0, z1, x0))\n+\n+/*\n+** abd_1_s32_x_tied1:\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s32_x_tied1, svint32_t,\n+\t\tz0 = svabd_n_s32_x (p0, z0, 1),\n+\t\tz0 = svabd_x (p0, z0, 1))\n+\n+/*\n+** abd_1_s32_x_untied:\n+**\tmov\tz0\\.s, #1\n+**\tsabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s32_x_untied, svint32_t,\n+\t\tz0 = svabd_n_s32_x (p0, z1, 1),\n+\t\tz0 = svabd_x (p0, z1, 1))"}, {"sha": "2402ecf2918ed430f031dd9e1a7ac137f66bc582", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abd_s64.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,237 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abd_s64_m_tied1:\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s64_m_tied1, svint64_t,\n+\t\tz0 = svabd_s64_m (p0, z0, z1),\n+\t\tz0 = svabd_m (p0, z0, z1))\n+\n+/*\n+** abd_s64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s64_m_tied2, svint64_t,\n+\t\tz0 = svabd_s64_m (p0, z1, z0),\n+\t\tz0 = svabd_m (p0, z1, z0))\n+\n+/*\n+** abd_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s64_m_untied, svint64_t,\n+\t\tz0 = svabd_s64_m (p0, z1, z2),\n+\t\tz0 = svabd_m (p0, z1, z2))\n+\n+/*\n+** abd_x0_s64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_x0_s64_m_tied1, svint64_t, int64_t,\n+\t\t z0 = svabd_n_s64_m (p0, z0, x0),\n+\t\t z0 = svabd_m (p0, z0, x0))\n+\n+/*\n+** abd_x0_s64_m_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_x0_s64_m_untied, svint64_t, int64_t,\n+\t\t z0 = svabd_n_s64_m (p0, z1, x0),\n+\t\t z0 = svabd_m (p0, z1, x0))\n+\n+/*\n+** abd_1_s64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s64_m_tied1, svint64_t,\n+\t\tz0 = svabd_n_s64_m (p0, z0, 1),\n+\t\tz0 = svabd_m (p0, z0, 1))\n+\n+/*\n+** abd_1_s64_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s64_m_untied, svint64_t,\n+\t\tz0 = svabd_n_s64_m (p0, z1, 1),\n+\t\tz0 = svabd_m (p0, z1, 1))\n+\n+/*\n+** abd_s64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s64_z_tied1, svint64_t,\n+\t\tz0 = svabd_s64_z (p0, z0, z1),\n+\t\tz0 = svabd_z (p0, z0, z1))\n+\n+/*\n+** abd_s64_z_tied2:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s64_z_tied2, svint64_t,\n+\t\tz0 = svabd_s64_z (p0, z1, z0),\n+\t\tz0 = svabd_z (p0, z1, z0))\n+\n+/*\n+** abd_s64_z_untied:\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, z2\\.d\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s64_z_untied, svint64_t,\n+\t\tz0 = svabd_s64_z (p0, z1, z2),\n+\t\tz0 = svabd_z (p0, z1, z2))\n+\n+/*\n+** abd_x0_s64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_x0_s64_z_tied1, svint64_t, int64_t,\n+\t\t z0 = svabd_n_s64_z (p0, z0, x0),\n+\t\t z0 = svabd_z (p0, z0, x0))\n+\n+/*\n+** abd_x0_s64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_x0_s64_z_untied, svint64_t, int64_t,\n+\t\t z0 = svabd_n_s64_z (p0, z1, x0),\n+\t\t z0 = svabd_z (p0, z1, x0))\n+\n+/*\n+** abd_1_s64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s64_z_tied1, svint64_t,\n+\t\tz0 = svabd_n_s64_z (p0, z0, 1),\n+\t\tz0 = svabd_z (p0, z0, 1))\n+\n+/*\n+** abd_1_s64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), #1\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s64_z_untied, svint64_t,\n+\t\tz0 = svabd_n_s64_z (p0, z1, 1),\n+\t\tz0 = svabd_z (p0, z1, 1))\n+\n+/*\n+** abd_s64_x_tied1:\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s64_x_tied1, svint64_t,\n+\t\tz0 = svabd_s64_x (p0, z0, z1),\n+\t\tz0 = svabd_x (p0, z0, z1))\n+\n+/*\n+** abd_s64_x_tied2:\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s64_x_tied2, svint64_t,\n+\t\tz0 = svabd_s64_x (p0, z1, z0),\n+\t\tz0 = svabd_x (p0, z1, z0))\n+\n+/*\n+** abd_s64_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+** |\n+**\tmovprfx\tz0, z2\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s64_x_untied, svint64_t,\n+\t\tz0 = svabd_s64_x (p0, z1, z2),\n+\t\tz0 = svabd_x (p0, z1, z2))\n+\n+/*\n+** abd_x0_s64_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_x0_s64_x_tied1, svint64_t, int64_t,\n+\t\t z0 = svabd_n_s64_x (p0, z0, x0),\n+\t\t z0 = svabd_x (p0, z0, x0))\n+\n+/*\n+** abd_x0_s64_x_untied:\n+**\tmov\tz0\\.d, x0\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_x0_s64_x_untied, svint64_t, int64_t,\n+\t\t z0 = svabd_n_s64_x (p0, z1, x0),\n+\t\t z0 = svabd_x (p0, z1, x0))\n+\n+/*\n+** abd_1_s64_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s64_x_tied1, svint64_t,\n+\t\tz0 = svabd_n_s64_x (p0, z0, 1),\n+\t\tz0 = svabd_x (p0, z0, 1))\n+\n+/*\n+** abd_1_s64_x_untied:\n+**\tmov\tz0\\.d, #1\n+**\tsabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s64_x_untied, svint64_t,\n+\t\tz0 = svabd_n_s64_x (p0, z1, 1),\n+\t\tz0 = svabd_x (p0, z1, 1))"}, {"sha": "49a2cc388f960848e15680219c098fdd0ab21671", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abd_s8.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,237 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abd_s8_m_tied1:\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s8_m_tied1, svint8_t,\n+\t\tz0 = svabd_s8_m (p0, z0, z1),\n+\t\tz0 = svabd_m (p0, z0, z1))\n+\n+/*\n+** abd_s8_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s8_m_tied2, svint8_t,\n+\t\tz0 = svabd_s8_m (p0, z1, z0),\n+\t\tz0 = svabd_m (p0, z1, z0))\n+\n+/*\n+** abd_s8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s8_m_untied, svint8_t,\n+\t\tz0 = svabd_s8_m (p0, z1, z2),\n+\t\tz0 = svabd_m (p0, z1, z2))\n+\n+/*\n+** abd_w0_s8_m_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s8_m_tied1, svint8_t, int8_t,\n+\t\t z0 = svabd_n_s8_m (p0, z0, x0),\n+\t\t z0 = svabd_m (p0, z0, x0))\n+\n+/*\n+** abd_w0_s8_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s8_m_untied, svint8_t, int8_t,\n+\t\t z0 = svabd_n_s8_m (p0, z1, x0),\n+\t\t z0 = svabd_m (p0, z1, x0))\n+\n+/*\n+** abd_1_s8_m_tied1:\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s8_m_tied1, svint8_t,\n+\t\tz0 = svabd_n_s8_m (p0, z0, 1),\n+\t\tz0 = svabd_m (p0, z0, 1))\n+\n+/*\n+** abd_1_s8_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s8_m_untied, svint8_t,\n+\t\tz0 = svabd_n_s8_m (p0, z1, 1),\n+\t\tz0 = svabd_m (p0, z1, 1))\n+\n+/*\n+** abd_s8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s8_z_tied1, svint8_t,\n+\t\tz0 = svabd_s8_z (p0, z0, z1),\n+\t\tz0 = svabd_z (p0, z0, z1))\n+\n+/*\n+** abd_s8_z_tied2:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s8_z_tied2, svint8_t,\n+\t\tz0 = svabd_s8_z (p0, z1, z0),\n+\t\tz0 = svabd_z (p0, z1, z0))\n+\n+/*\n+** abd_s8_z_untied:\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, z2\\.b\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s8_z_untied, svint8_t,\n+\t\tz0 = svabd_s8_z (p0, z1, z2),\n+\t\tz0 = svabd_z (p0, z1, z2))\n+\n+/*\n+** abd_w0_s8_z_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s8_z_tied1, svint8_t, int8_t,\n+\t\t z0 = svabd_n_s8_z (p0, z0, x0),\n+\t\t z0 = svabd_z (p0, z0, x0))\n+\n+/*\n+** abd_w0_s8_z_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, \\1\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, \\1\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s8_z_untied, svint8_t, int8_t,\n+\t\t z0 = svabd_n_s8_z (p0, z1, x0),\n+\t\t z0 = svabd_z (p0, z1, x0))\n+\n+/*\n+** abd_1_s8_z_tied1:\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s8_z_tied1, svint8_t,\n+\t\tz0 = svabd_n_s8_z (p0, z0, 1),\n+\t\tz0 = svabd_z (p0, z0, 1))\n+\n+/*\n+** abd_1_s8_z_untied:\n+**\tmov\t(z[0-9]+\\.b), #1\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, \\1\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, \\1\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s8_z_untied, svint8_t,\n+\t\tz0 = svabd_n_s8_z (p0, z1, 1),\n+\t\tz0 = svabd_z (p0, z1, 1))\n+\n+/*\n+** abd_s8_x_tied1:\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s8_x_tied1, svint8_t,\n+\t\tz0 = svabd_s8_x (p0, z0, z1),\n+\t\tz0 = svabd_x (p0, z0, z1))\n+\n+/*\n+** abd_s8_x_tied2:\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s8_x_tied2, svint8_t,\n+\t\tz0 = svabd_s8_x (p0, z1, z0),\n+\t\tz0 = svabd_x (p0, z1, z0))\n+\n+/*\n+** abd_s8_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+** |\n+**\tmovprfx\tz0, z2\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_s8_x_untied, svint8_t,\n+\t\tz0 = svabd_s8_x (p0, z1, z2),\n+\t\tz0 = svabd_x (p0, z1, z2))\n+\n+/*\n+** abd_w0_s8_x_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s8_x_tied1, svint8_t, int8_t,\n+\t\t z0 = svabd_n_s8_x (p0, z0, x0),\n+\t\t z0 = svabd_x (p0, z0, x0))\n+\n+/*\n+** abd_w0_s8_x_untied:\n+**\tmov\tz0\\.b, w0\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_s8_x_untied, svint8_t, int8_t,\n+\t\t z0 = svabd_n_s8_x (p0, z1, x0),\n+\t\t z0 = svabd_x (p0, z1, x0))\n+\n+/*\n+** abd_1_s8_x_tied1:\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s8_x_tied1, svint8_t,\n+\t\tz0 = svabd_n_s8_x (p0, z0, 1),\n+\t\tz0 = svabd_x (p0, z0, 1))\n+\n+/*\n+** abd_1_s8_x_untied:\n+**\tmov\tz0\\.b, #1\n+**\tsabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_s8_x_untied, svint8_t,\n+\t\tz0 = svabd_n_s8_x (p0, z1, 1),\n+\t\tz0 = svabd_x (p0, z1, 1))"}, {"sha": "60aa9429ea62b41c2ae098b4f2cf6c5357fdf9af", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abd_u16.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,237 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abd_u16_m_tied1:\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u16_m_tied1, svuint16_t,\n+\t\tz0 = svabd_u16_m (p0, z0, z1),\n+\t\tz0 = svabd_m (p0, z0, z1))\n+\n+/*\n+** abd_u16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u16_m_tied2, svuint16_t,\n+\t\tz0 = svabd_u16_m (p0, z1, z0),\n+\t\tz0 = svabd_m (p0, z1, z0))\n+\n+/*\n+** abd_u16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u16_m_untied, svuint16_t,\n+\t\tz0 = svabd_u16_m (p0, z1, z2),\n+\t\tz0 = svabd_m (p0, z1, z2))\n+\n+/*\n+** abd_w0_u16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u16_m_tied1, svuint16_t, uint16_t,\n+\t\t z0 = svabd_n_u16_m (p0, z0, x0),\n+\t\t z0 = svabd_m (p0, z0, x0))\n+\n+/*\n+** abd_w0_u16_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u16_m_untied, svuint16_t, uint16_t,\n+\t\t z0 = svabd_n_u16_m (p0, z1, x0),\n+\t\t z0 = svabd_m (p0, z1, x0))\n+\n+/*\n+** abd_1_u16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u16_m_tied1, svuint16_t,\n+\t\tz0 = svabd_n_u16_m (p0, z0, 1),\n+\t\tz0 = svabd_m (p0, z0, 1))\n+\n+/*\n+** abd_1_u16_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u16_m_untied, svuint16_t,\n+\t\tz0 = svabd_n_u16_m (p0, z1, 1),\n+\t\tz0 = svabd_m (p0, z1, 1))\n+\n+/*\n+** abd_u16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u16_z_tied1, svuint16_t,\n+\t\tz0 = svabd_u16_z (p0, z0, z1),\n+\t\tz0 = svabd_z (p0, z0, z1))\n+\n+/*\n+** abd_u16_z_tied2:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u16_z_tied2, svuint16_t,\n+\t\tz0 = svabd_u16_z (p0, z1, z0),\n+\t\tz0 = svabd_z (p0, z1, z0))\n+\n+/*\n+** abd_u16_z_untied:\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, z2\\.h\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u16_z_untied, svuint16_t,\n+\t\tz0 = svabd_u16_z (p0, z1, z2),\n+\t\tz0 = svabd_z (p0, z1, z2))\n+\n+/*\n+** abd_w0_u16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u16_z_tied1, svuint16_t, uint16_t,\n+\t\t z0 = svabd_n_u16_z (p0, z0, x0),\n+\t\t z0 = svabd_z (p0, z0, x0))\n+\n+/*\n+** abd_w0_u16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u16_z_untied, svuint16_t, uint16_t,\n+\t\t z0 = svabd_n_u16_z (p0, z1, x0),\n+\t\t z0 = svabd_z (p0, z1, x0))\n+\n+/*\n+** abd_1_u16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u16_z_tied1, svuint16_t,\n+\t\tz0 = svabd_n_u16_z (p0, z0, 1),\n+\t\tz0 = svabd_z (p0, z0, 1))\n+\n+/*\n+** abd_1_u16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), #1\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u16_z_untied, svuint16_t,\n+\t\tz0 = svabd_n_u16_z (p0, z1, 1),\n+\t\tz0 = svabd_z (p0, z1, 1))\n+\n+/*\n+** abd_u16_x_tied1:\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u16_x_tied1, svuint16_t,\n+\t\tz0 = svabd_u16_x (p0, z0, z1),\n+\t\tz0 = svabd_x (p0, z0, z1))\n+\n+/*\n+** abd_u16_x_tied2:\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u16_x_tied2, svuint16_t,\n+\t\tz0 = svabd_u16_x (p0, z1, z0),\n+\t\tz0 = svabd_x (p0, z1, z0))\n+\n+/*\n+** abd_u16_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+** |\n+**\tmovprfx\tz0, z2\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u16_x_untied, svuint16_t,\n+\t\tz0 = svabd_u16_x (p0, z1, z2),\n+\t\tz0 = svabd_x (p0, z1, z2))\n+\n+/*\n+** abd_w0_u16_x_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u16_x_tied1, svuint16_t, uint16_t,\n+\t\t z0 = svabd_n_u16_x (p0, z0, x0),\n+\t\t z0 = svabd_x (p0, z0, x0))\n+\n+/*\n+** abd_w0_u16_x_untied:\n+**\tmov\tz0\\.h, w0\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u16_x_untied, svuint16_t, uint16_t,\n+\t\t z0 = svabd_n_u16_x (p0, z1, x0),\n+\t\t z0 = svabd_x (p0, z1, x0))\n+\n+/*\n+** abd_1_u16_x_tied1:\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u16_x_tied1, svuint16_t,\n+\t\tz0 = svabd_n_u16_x (p0, z0, 1),\n+\t\tz0 = svabd_x (p0, z0, 1))\n+\n+/*\n+** abd_1_u16_x_untied:\n+**\tmov\tz0\\.h, #1\n+**\tuabd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u16_x_untied, svuint16_t,\n+\t\tz0 = svabd_n_u16_x (p0, z1, 1),\n+\t\tz0 = svabd_x (p0, z1, 1))"}, {"sha": "bc24107837c86f00cc9f8102d076c00cbcbc1761", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abd_u32.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,237 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abd_u32_m_tied1:\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u32_m_tied1, svuint32_t,\n+\t\tz0 = svabd_u32_m (p0, z0, z1),\n+\t\tz0 = svabd_m (p0, z0, z1))\n+\n+/*\n+** abd_u32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u32_m_tied2, svuint32_t,\n+\t\tz0 = svabd_u32_m (p0, z1, z0),\n+\t\tz0 = svabd_m (p0, z1, z0))\n+\n+/*\n+** abd_u32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u32_m_untied, svuint32_t,\n+\t\tz0 = svabd_u32_m (p0, z1, z2),\n+\t\tz0 = svabd_m (p0, z1, z2))\n+\n+/*\n+** abd_w0_u32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u32_m_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svabd_n_u32_m (p0, z0, x0),\n+\t\t z0 = svabd_m (p0, z0, x0))\n+\n+/*\n+** abd_w0_u32_m_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u32_m_untied, svuint32_t, uint32_t,\n+\t\t z0 = svabd_n_u32_m (p0, z1, x0),\n+\t\t z0 = svabd_m (p0, z1, x0))\n+\n+/*\n+** abd_1_u32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u32_m_tied1, svuint32_t,\n+\t\tz0 = svabd_n_u32_m (p0, z0, 1),\n+\t\tz0 = svabd_m (p0, z0, 1))\n+\n+/*\n+** abd_1_u32_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u32_m_untied, svuint32_t,\n+\t\tz0 = svabd_n_u32_m (p0, z1, 1),\n+\t\tz0 = svabd_m (p0, z1, 1))\n+\n+/*\n+** abd_u32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u32_z_tied1, svuint32_t,\n+\t\tz0 = svabd_u32_z (p0, z0, z1),\n+\t\tz0 = svabd_z (p0, z0, z1))\n+\n+/*\n+** abd_u32_z_tied2:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u32_z_tied2, svuint32_t,\n+\t\tz0 = svabd_u32_z (p0, z1, z0),\n+\t\tz0 = svabd_z (p0, z1, z0))\n+\n+/*\n+** abd_u32_z_untied:\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, z2\\.s\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u32_z_untied, svuint32_t,\n+\t\tz0 = svabd_u32_z (p0, z1, z2),\n+\t\tz0 = svabd_z (p0, z1, z2))\n+\n+/*\n+** abd_w0_u32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u32_z_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svabd_n_u32_z (p0, z0, x0),\n+\t\t z0 = svabd_z (p0, z0, x0))\n+\n+/*\n+** abd_w0_u32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u32_z_untied, svuint32_t, uint32_t,\n+\t\t z0 = svabd_n_u32_z (p0, z1, x0),\n+\t\t z0 = svabd_z (p0, z1, x0))\n+\n+/*\n+** abd_1_u32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u32_z_tied1, svuint32_t,\n+\t\tz0 = svabd_n_u32_z (p0, z0, 1),\n+\t\tz0 = svabd_z (p0, z0, 1))\n+\n+/*\n+** abd_1_u32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), #1\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u32_z_untied, svuint32_t,\n+\t\tz0 = svabd_n_u32_z (p0, z1, 1),\n+\t\tz0 = svabd_z (p0, z1, 1))\n+\n+/*\n+** abd_u32_x_tied1:\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u32_x_tied1, svuint32_t,\n+\t\tz0 = svabd_u32_x (p0, z0, z1),\n+\t\tz0 = svabd_x (p0, z0, z1))\n+\n+/*\n+** abd_u32_x_tied2:\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u32_x_tied2, svuint32_t,\n+\t\tz0 = svabd_u32_x (p0, z1, z0),\n+\t\tz0 = svabd_x (p0, z1, z0))\n+\n+/*\n+** abd_u32_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+** |\n+**\tmovprfx\tz0, z2\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u32_x_untied, svuint32_t,\n+\t\tz0 = svabd_u32_x (p0, z1, z2),\n+\t\tz0 = svabd_x (p0, z1, z2))\n+\n+/*\n+** abd_w0_u32_x_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u32_x_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svabd_n_u32_x (p0, z0, x0),\n+\t\t z0 = svabd_x (p0, z0, x0))\n+\n+/*\n+** abd_w0_u32_x_untied:\n+**\tmov\tz0\\.s, w0\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u32_x_untied, svuint32_t, uint32_t,\n+\t\t z0 = svabd_n_u32_x (p0, z1, x0),\n+\t\t z0 = svabd_x (p0, z1, x0))\n+\n+/*\n+** abd_1_u32_x_tied1:\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u32_x_tied1, svuint32_t,\n+\t\tz0 = svabd_n_u32_x (p0, z0, 1),\n+\t\tz0 = svabd_x (p0, z0, 1))\n+\n+/*\n+** abd_1_u32_x_untied:\n+**\tmov\tz0\\.s, #1\n+**\tuabd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u32_x_untied, svuint32_t,\n+\t\tz0 = svabd_n_u32_x (p0, z1, 1),\n+\t\tz0 = svabd_x (p0, z1, 1))"}, {"sha": "d2cdaa06a5a6648196de19854484dd6019de6e41", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abd_u64.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,237 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abd_u64_m_tied1:\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u64_m_tied1, svuint64_t,\n+\t\tz0 = svabd_u64_m (p0, z0, z1),\n+\t\tz0 = svabd_m (p0, z0, z1))\n+\n+/*\n+** abd_u64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u64_m_tied2, svuint64_t,\n+\t\tz0 = svabd_u64_m (p0, z1, z0),\n+\t\tz0 = svabd_m (p0, z1, z0))\n+\n+/*\n+** abd_u64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u64_m_untied, svuint64_t,\n+\t\tz0 = svabd_u64_m (p0, z1, z2),\n+\t\tz0 = svabd_m (p0, z1, z2))\n+\n+/*\n+** abd_x0_u64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_x0_u64_m_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svabd_n_u64_m (p0, z0, x0),\n+\t\t z0 = svabd_m (p0, z0, x0))\n+\n+/*\n+** abd_x0_u64_m_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_x0_u64_m_untied, svuint64_t, uint64_t,\n+\t\t z0 = svabd_n_u64_m (p0, z1, x0),\n+\t\t z0 = svabd_m (p0, z1, x0))\n+\n+/*\n+** abd_1_u64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u64_m_tied1, svuint64_t,\n+\t\tz0 = svabd_n_u64_m (p0, z0, 1),\n+\t\tz0 = svabd_m (p0, z0, 1))\n+\n+/*\n+** abd_1_u64_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u64_m_untied, svuint64_t,\n+\t\tz0 = svabd_n_u64_m (p0, z1, 1),\n+\t\tz0 = svabd_m (p0, z1, 1))\n+\n+/*\n+** abd_u64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u64_z_tied1, svuint64_t,\n+\t\tz0 = svabd_u64_z (p0, z0, z1),\n+\t\tz0 = svabd_z (p0, z0, z1))\n+\n+/*\n+** abd_u64_z_tied2:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u64_z_tied2, svuint64_t,\n+\t\tz0 = svabd_u64_z (p0, z1, z0),\n+\t\tz0 = svabd_z (p0, z1, z0))\n+\n+/*\n+** abd_u64_z_untied:\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, z2\\.d\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u64_z_untied, svuint64_t,\n+\t\tz0 = svabd_u64_z (p0, z1, z2),\n+\t\tz0 = svabd_z (p0, z1, z2))\n+\n+/*\n+** abd_x0_u64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_x0_u64_z_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svabd_n_u64_z (p0, z0, x0),\n+\t\t z0 = svabd_z (p0, z0, x0))\n+\n+/*\n+** abd_x0_u64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_x0_u64_z_untied, svuint64_t, uint64_t,\n+\t\t z0 = svabd_n_u64_z (p0, z1, x0),\n+\t\t z0 = svabd_z (p0, z1, x0))\n+\n+/*\n+** abd_1_u64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u64_z_tied1, svuint64_t,\n+\t\tz0 = svabd_n_u64_z (p0, z0, 1),\n+\t\tz0 = svabd_z (p0, z0, 1))\n+\n+/*\n+** abd_1_u64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), #1\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u64_z_untied, svuint64_t,\n+\t\tz0 = svabd_n_u64_z (p0, z1, 1),\n+\t\tz0 = svabd_z (p0, z1, 1))\n+\n+/*\n+** abd_u64_x_tied1:\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u64_x_tied1, svuint64_t,\n+\t\tz0 = svabd_u64_x (p0, z0, z1),\n+\t\tz0 = svabd_x (p0, z0, z1))\n+\n+/*\n+** abd_u64_x_tied2:\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u64_x_tied2, svuint64_t,\n+\t\tz0 = svabd_u64_x (p0, z1, z0),\n+\t\tz0 = svabd_x (p0, z1, z0))\n+\n+/*\n+** abd_u64_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+** |\n+**\tmovprfx\tz0, z2\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u64_x_untied, svuint64_t,\n+\t\tz0 = svabd_u64_x (p0, z1, z2),\n+\t\tz0 = svabd_x (p0, z1, z2))\n+\n+/*\n+** abd_x0_u64_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_x0_u64_x_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svabd_n_u64_x (p0, z0, x0),\n+\t\t z0 = svabd_x (p0, z0, x0))\n+\n+/*\n+** abd_x0_u64_x_untied:\n+**\tmov\tz0\\.d, x0\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_x0_u64_x_untied, svuint64_t, uint64_t,\n+\t\t z0 = svabd_n_u64_x (p0, z1, x0),\n+\t\t z0 = svabd_x (p0, z1, x0))\n+\n+/*\n+** abd_1_u64_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u64_x_tied1, svuint64_t,\n+\t\tz0 = svabd_n_u64_x (p0, z0, 1),\n+\t\tz0 = svabd_x (p0, z0, 1))\n+\n+/*\n+** abd_1_u64_x_untied:\n+**\tmov\tz0\\.d, #1\n+**\tuabd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u64_x_untied, svuint64_t,\n+\t\tz0 = svabd_n_u64_x (p0, z1, 1),\n+\t\tz0 = svabd_x (p0, z1, 1))"}, {"sha": "454ef153cc3c51b3595525e76ea0a0d7ca70805b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abd_u8.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabd_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,237 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abd_u8_m_tied1:\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u8_m_tied1, svuint8_t,\n+\t\tz0 = svabd_u8_m (p0, z0, z1),\n+\t\tz0 = svabd_m (p0, z0, z1))\n+\n+/*\n+** abd_u8_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u8_m_tied2, svuint8_t,\n+\t\tz0 = svabd_u8_m (p0, z1, z0),\n+\t\tz0 = svabd_m (p0, z1, z0))\n+\n+/*\n+** abd_u8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u8_m_untied, svuint8_t,\n+\t\tz0 = svabd_u8_m (p0, z1, z2),\n+\t\tz0 = svabd_m (p0, z1, z2))\n+\n+/*\n+** abd_w0_u8_m_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u8_m_tied1, svuint8_t, uint8_t,\n+\t\t z0 = svabd_n_u8_m (p0, z0, x0),\n+\t\t z0 = svabd_m (p0, z0, x0))\n+\n+/*\n+** abd_w0_u8_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u8_m_untied, svuint8_t, uint8_t,\n+\t\t z0 = svabd_n_u8_m (p0, z1, x0),\n+\t\t z0 = svabd_m (p0, z1, x0))\n+\n+/*\n+** abd_1_u8_m_tied1:\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u8_m_tied1, svuint8_t,\n+\t\tz0 = svabd_n_u8_m (p0, z0, 1),\n+\t\tz0 = svabd_m (p0, z0, 1))\n+\n+/*\n+** abd_1_u8_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u8_m_untied, svuint8_t,\n+\t\tz0 = svabd_n_u8_m (p0, z1, 1),\n+\t\tz0 = svabd_m (p0, z1, 1))\n+\n+/*\n+** abd_u8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u8_z_tied1, svuint8_t,\n+\t\tz0 = svabd_u8_z (p0, z0, z1),\n+\t\tz0 = svabd_z (p0, z0, z1))\n+\n+/*\n+** abd_u8_z_tied2:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u8_z_tied2, svuint8_t,\n+\t\tz0 = svabd_u8_z (p0, z1, z0),\n+\t\tz0 = svabd_z (p0, z1, z0))\n+\n+/*\n+** abd_u8_z_untied:\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, z2\\.b\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u8_z_untied, svuint8_t,\n+\t\tz0 = svabd_u8_z (p0, z1, z2),\n+\t\tz0 = svabd_z (p0, z1, z2))\n+\n+/*\n+** abd_w0_u8_z_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u8_z_tied1, svuint8_t, uint8_t,\n+\t\t z0 = svabd_n_u8_z (p0, z0, x0),\n+\t\t z0 = svabd_z (p0, z0, x0))\n+\n+/*\n+** abd_w0_u8_z_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, \\1\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, \\1\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u8_z_untied, svuint8_t, uint8_t,\n+\t\t z0 = svabd_n_u8_z (p0, z1, x0),\n+\t\t z0 = svabd_z (p0, z1, x0))\n+\n+/*\n+** abd_1_u8_z_tied1:\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u8_z_tied1, svuint8_t,\n+\t\tz0 = svabd_n_u8_z (p0, z0, 1),\n+\t\tz0 = svabd_z (p0, z0, 1))\n+\n+/*\n+** abd_1_u8_z_untied:\n+**\tmov\t(z[0-9]+\\.b), #1\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, \\1\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, \\1\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u8_z_untied, svuint8_t,\n+\t\tz0 = svabd_n_u8_z (p0, z1, 1),\n+\t\tz0 = svabd_z (p0, z1, 1))\n+\n+/*\n+** abd_u8_x_tied1:\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u8_x_tied1, svuint8_t,\n+\t\tz0 = svabd_u8_x (p0, z0, z1),\n+\t\tz0 = svabd_x (p0, z0, z1))\n+\n+/*\n+** abd_u8_x_tied2:\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u8_x_tied2, svuint8_t,\n+\t\tz0 = svabd_u8_x (p0, z1, z0),\n+\t\tz0 = svabd_x (p0, z1, z0))\n+\n+/*\n+** abd_u8_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+** |\n+**\tmovprfx\tz0, z2\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_u8_x_untied, svuint8_t,\n+\t\tz0 = svabd_u8_x (p0, z1, z2),\n+\t\tz0 = svabd_x (p0, z1, z2))\n+\n+/*\n+** abd_w0_u8_x_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u8_x_tied1, svuint8_t, uint8_t,\n+\t\t z0 = svabd_n_u8_x (p0, z0, x0),\n+\t\t z0 = svabd_x (p0, z0, x0))\n+\n+/*\n+** abd_w0_u8_x_untied:\n+**\tmov\tz0\\.b, w0\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (abd_w0_u8_x_untied, svuint8_t, uint8_t,\n+\t\t z0 = svabd_n_u8_x (p0, z1, x0),\n+\t\t z0 = svabd_x (p0, z1, x0))\n+\n+/*\n+** abd_1_u8_x_tied1:\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u8_x_tied1, svuint8_t,\n+\t\tz0 = svabd_n_u8_x (p0, z0, 1),\n+\t\tz0 = svabd_x (p0, z0, 1))\n+\n+/*\n+** abd_1_u8_x_untied:\n+**\tmov\tz0\\.b, #1\n+**\tuabd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abd_1_u8_x_untied, svuint8_t,\n+\t\tz0 = svabd_n_u8_x (p0, z1, 1),\n+\t\tz0 = svabd_x (p0, z1, 1))"}, {"sha": "2aa8736e645a58b2570ada42b3cbb29fb3b8b8c2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abs_f16.c", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,103 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abs_f16_m_tied12:\n+**\tfabs\tz0\\.h, p0/m, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f16_m_tied12, svfloat16_t,\n+\t\tz0 = svabs_f16_m (z0, p0, z0),\n+\t\tz0 = svabs_m (z0, p0, z0))\n+\n+/*\n+** abs_f16_m_tied1:\n+**\tfabs\tz0\\.h, p0/m, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f16_m_tied1, svfloat16_t,\n+\t\tz0 = svabs_f16_m (z0, p0, z1),\n+\t\tz0 = svabs_m (z0, p0, z1))\n+\n+/*\n+** abs_f16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfabs\tz0\\.h, p0/m, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f16_m_tied2, svfloat16_t,\n+\t\tz0 = svabs_f16_m (z1, p0, z0),\n+\t\tz0 = svabs_m (z1, p0, z0))\n+\n+/*\n+** abs_f16_m_untied:\n+**\tmovprfx\tz0, z2\n+**\tfabs\tz0\\.h, p0/m, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f16_m_untied, svfloat16_t,\n+\t\tz0 = svabs_f16_m (z2, p0, z1),\n+\t\tz0 = svabs_m (z2, p0, z1))\n+\n+/*\n+** abs_f16_z_tied1:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.h, p0/z, \\1\\.h\n+**\tfabs\tz0\\.h, p0/m, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svabs_f16_z (p0, z0),\n+\t\tz0 = svabs_z (p0, z0))\n+\n+/*\n+** abs_f16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfabs\tz0\\.h, p0/m, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f16_z_untied, svfloat16_t,\n+\t\tz0 = svabs_f16_z (p0, z1),\n+\t\tz0 = svabs_z (p0, z1))\n+\n+/*\n+** abs_f16_x_tied1:\n+**\tfabs\tz0\\.h, p0/m, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svabs_f16_x (p0, z0),\n+\t\tz0 = svabs_x (p0, z0))\n+\n+/*\n+** abs_f16_x_untied:\n+**\tfabs\tz0\\.h, p0/m, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f16_x_untied, svfloat16_t,\n+\t\tz0 = svabs_f16_x (p0, z1),\n+\t\tz0 = svabs_x (p0, z1))\n+\n+/*\n+** ptrue_abs_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abs_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svabs_f16_x (svptrue_b16 (), z0),\n+\t\tz0 = svabs_x (svptrue_b16 (), z0))\n+\n+/*\n+** ptrue_abs_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abs_f16_x_untied, svfloat16_t,\n+\t\tz0 = svabs_f16_x (svptrue_b16 (), z1),\n+\t\tz0 = svabs_x (svptrue_b16 (), z1))"}, {"sha": "30286afc7b7d0083a3a444c2bd4d6b90b1a93442", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abs_f32.c", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,103 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abs_f32_m_tied12:\n+**\tfabs\tz0\\.s, p0/m, z0\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f32_m_tied12, svfloat32_t,\n+\t\tz0 = svabs_f32_m (z0, p0, z0),\n+\t\tz0 = svabs_m (z0, p0, z0))\n+\n+/*\n+** abs_f32_m_tied1:\n+**\tfabs\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f32_m_tied1, svfloat32_t,\n+\t\tz0 = svabs_f32_m (z0, p0, z1),\n+\t\tz0 = svabs_m (z0, p0, z1))\n+\n+/*\n+** abs_f32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfabs\tz0\\.s, p0/m, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f32_m_tied2, svfloat32_t,\n+\t\tz0 = svabs_f32_m (z1, p0, z0),\n+\t\tz0 = svabs_m (z1, p0, z0))\n+\n+/*\n+** abs_f32_m_untied:\n+**\tmovprfx\tz0, z2\n+**\tfabs\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f32_m_untied, svfloat32_t,\n+\t\tz0 = svabs_f32_m (z2, p0, z1),\n+\t\tz0 = svabs_m (z2, p0, z1))\n+\n+/*\n+** abs_f32_z_tied1:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.s, p0/z, \\1\\.s\n+**\tfabs\tz0\\.s, p0/m, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svabs_f32_z (p0, z0),\n+\t\tz0 = svabs_z (p0, z0))\n+\n+/*\n+** abs_f32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfabs\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f32_z_untied, svfloat32_t,\n+\t\tz0 = svabs_f32_z (p0, z1),\n+\t\tz0 = svabs_z (p0, z1))\n+\n+/*\n+** abs_f32_x_tied1:\n+**\tfabs\tz0\\.s, p0/m, z0\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svabs_f32_x (p0, z0),\n+\t\tz0 = svabs_x (p0, z0))\n+\n+/*\n+** abs_f32_x_untied:\n+**\tfabs\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f32_x_untied, svfloat32_t,\n+\t\tz0 = svabs_f32_x (p0, z1),\n+\t\tz0 = svabs_x (p0, z1))\n+\n+/*\n+** ptrue_abs_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abs_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svabs_f32_x (svptrue_b32 (), z0),\n+\t\tz0 = svabs_x (svptrue_b32 (), z0))\n+\n+/*\n+** ptrue_abs_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abs_f32_x_untied, svfloat32_t,\n+\t\tz0 = svabs_f32_x (svptrue_b32 (), z1),\n+\t\tz0 = svabs_x (svptrue_b32 (), z1))"}, {"sha": "28ef9fbba23bcf405d0543ffee70b41246e23cd5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abs_f64.c", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,103 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abs_f64_m_tied12:\n+**\tfabs\tz0\\.d, p0/m, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f64_m_tied12, svfloat64_t,\n+\t\tz0 = svabs_f64_m (z0, p0, z0),\n+\t\tz0 = svabs_m (z0, p0, z0))\n+\n+/*\n+** abs_f64_m_tied1:\n+**\tfabs\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f64_m_tied1, svfloat64_t,\n+\t\tz0 = svabs_f64_m (z0, p0, z1),\n+\t\tz0 = svabs_m (z0, p0, z1))\n+\n+/*\n+** abs_f64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfabs\tz0\\.d, p0/m, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f64_m_tied2, svfloat64_t,\n+\t\tz0 = svabs_f64_m (z1, p0, z0),\n+\t\tz0 = svabs_m (z1, p0, z0))\n+\n+/*\n+** abs_f64_m_untied:\n+**\tmovprfx\tz0, z2\n+**\tfabs\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f64_m_untied, svfloat64_t,\n+\t\tz0 = svabs_f64_m (z2, p0, z1),\n+\t\tz0 = svabs_m (z2, p0, z1))\n+\n+/*\n+** abs_f64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tfabs\tz0\\.d, p0/m, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svabs_f64_z (p0, z0),\n+\t\tz0 = svabs_z (p0, z0))\n+\n+/*\n+** abs_f64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfabs\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f64_z_untied, svfloat64_t,\n+\t\tz0 = svabs_f64_z (p0, z1),\n+\t\tz0 = svabs_z (p0, z1))\n+\n+/*\n+** abs_f64_x_tied1:\n+**\tfabs\tz0\\.d, p0/m, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svabs_f64_x (p0, z0),\n+\t\tz0 = svabs_x (p0, z0))\n+\n+/*\n+** abs_f64_x_untied:\n+**\tfabs\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_f64_x_untied, svfloat64_t,\n+\t\tz0 = svabs_f64_x (p0, z1),\n+\t\tz0 = svabs_x (p0, z1))\n+\n+/*\n+** ptrue_abs_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abs_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svabs_f64_x (svptrue_b64 (), z0),\n+\t\tz0 = svabs_x (svptrue_b64 (), z0))\n+\n+/*\n+** ptrue_abs_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_abs_f64_x_untied, svfloat64_t,\n+\t\tz0 = svabs_f64_x (svptrue_b64 (), z1),\n+\t\tz0 = svabs_x (svptrue_b64 (), z1))"}, {"sha": "3b16a9c4f0380625e7a7155785d558053ad7ba1a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abs_s16.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abs_s16_m_tied12:\n+**\tabs\tz0\\.h, p0/m, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s16_m_tied12, svint16_t,\n+\t\tz0 = svabs_s16_m (z0, p0, z0),\n+\t\tz0 = svabs_m (z0, p0, z0))\n+\n+/*\n+** abs_s16_m_tied1:\n+**\tabs\tz0\\.h, p0/m, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s16_m_tied1, svint16_t,\n+\t\tz0 = svabs_s16_m (z0, p0, z1),\n+\t\tz0 = svabs_m (z0, p0, z1))\n+\n+/*\n+** abs_s16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tabs\tz0\\.h, p0/m, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s16_m_tied2, svint16_t,\n+\t\tz0 = svabs_s16_m (z1, p0, z0),\n+\t\tz0 = svabs_m (z1, p0, z0))\n+\n+/*\n+** abs_s16_m_untied:\n+**\tmovprfx\tz0, z2\n+**\tabs\tz0\\.h, p0/m, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s16_m_untied, svint16_t,\n+\t\tz0 = svabs_s16_m (z2, p0, z1),\n+\t\tz0 = svabs_m (z2, p0, z1))\n+\n+/*\n+** abs_s16_z_tied1:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.h, p0/z, \\1\\.h\n+**\tabs\tz0\\.h, p0/m, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s16_z_tied1, svint16_t,\n+\t\tz0 = svabs_s16_z (p0, z0),\n+\t\tz0 = svabs_z (p0, z0))\n+\n+/*\n+** abs_s16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tabs\tz0\\.h, p0/m, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s16_z_untied, svint16_t,\n+\t\tz0 = svabs_s16_z (p0, z1),\n+\t\tz0 = svabs_z (p0, z1))\n+\n+/*\n+** abs_s16_x_tied1:\n+**\tabs\tz0\\.h, p0/m, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s16_x_tied1, svint16_t,\n+\t\tz0 = svabs_s16_x (p0, z0),\n+\t\tz0 = svabs_x (p0, z0))\n+\n+/*\n+** abs_s16_x_untied:\n+**\tabs\tz0\\.h, p0/m, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s16_x_untied, svint16_t,\n+\t\tz0 = svabs_s16_x (p0, z1),\n+\t\tz0 = svabs_x (p0, z1))"}, {"sha": "14bcbd50c46f86c7fdd4e811d0240dfb4b5e814e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abs_s32.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abs_s32_m_tied12:\n+**\tabs\tz0\\.s, p0/m, z0\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s32_m_tied12, svint32_t,\n+\t\tz0 = svabs_s32_m (z0, p0, z0),\n+\t\tz0 = svabs_m (z0, p0, z0))\n+\n+/*\n+** abs_s32_m_tied1:\n+**\tabs\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s32_m_tied1, svint32_t,\n+\t\tz0 = svabs_s32_m (z0, p0, z1),\n+\t\tz0 = svabs_m (z0, p0, z1))\n+\n+/*\n+** abs_s32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tabs\tz0\\.s, p0/m, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s32_m_tied2, svint32_t,\n+\t\tz0 = svabs_s32_m (z1, p0, z0),\n+\t\tz0 = svabs_m (z1, p0, z0))\n+\n+/*\n+** abs_s32_m_untied:\n+**\tmovprfx\tz0, z2\n+**\tabs\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s32_m_untied, svint32_t,\n+\t\tz0 = svabs_s32_m (z2, p0, z1),\n+\t\tz0 = svabs_m (z2, p0, z1))\n+\n+/*\n+** abs_s32_z_tied1:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.s, p0/z, \\1\\.s\n+**\tabs\tz0\\.s, p0/m, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s32_z_tied1, svint32_t,\n+\t\tz0 = svabs_s32_z (p0, z0),\n+\t\tz0 = svabs_z (p0, z0))\n+\n+/*\n+** abs_s32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tabs\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s32_z_untied, svint32_t,\n+\t\tz0 = svabs_s32_z (p0, z1),\n+\t\tz0 = svabs_z (p0, z1))\n+\n+/*\n+** abs_s32_x_tied1:\n+**\tabs\tz0\\.s, p0/m, z0\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s32_x_tied1, svint32_t,\n+\t\tz0 = svabs_s32_x (p0, z0),\n+\t\tz0 = svabs_x (p0, z0))\n+\n+/*\n+** abs_s32_x_untied:\n+**\tabs\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s32_x_untied, svint32_t,\n+\t\tz0 = svabs_s32_x (p0, z1),\n+\t\tz0 = svabs_x (p0, z1))"}, {"sha": "c7b60ff484317e274f3b2e8c511b9525f92feb1a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abs_s64.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abs_s64_m_tied12:\n+**\tabs\tz0\\.d, p0/m, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s64_m_tied12, svint64_t,\n+\t\tz0 = svabs_s64_m (z0, p0, z0),\n+\t\tz0 = svabs_m (z0, p0, z0))\n+\n+/*\n+** abs_s64_m_tied1:\n+**\tabs\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s64_m_tied1, svint64_t,\n+\t\tz0 = svabs_s64_m (z0, p0, z1),\n+\t\tz0 = svabs_m (z0, p0, z1))\n+\n+/*\n+** abs_s64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tabs\tz0\\.d, p0/m, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s64_m_tied2, svint64_t,\n+\t\tz0 = svabs_s64_m (z1, p0, z0),\n+\t\tz0 = svabs_m (z1, p0, z0))\n+\n+/*\n+** abs_s64_m_untied:\n+**\tmovprfx\tz0, z2\n+**\tabs\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s64_m_untied, svint64_t,\n+\t\tz0 = svabs_s64_m (z2, p0, z1),\n+\t\tz0 = svabs_m (z2, p0, z1))\n+\n+/*\n+** abs_s64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tabs\tz0\\.d, p0/m, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s64_z_tied1, svint64_t,\n+\t\tz0 = svabs_s64_z (p0, z0),\n+\t\tz0 = svabs_z (p0, z0))\n+\n+/*\n+** abs_s64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tabs\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s64_z_untied, svint64_t,\n+\t\tz0 = svabs_s64_z (p0, z1),\n+\t\tz0 = svabs_z (p0, z1))\n+\n+/*\n+** abs_s64_x_tied1:\n+**\tabs\tz0\\.d, p0/m, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s64_x_tied1, svint64_t,\n+\t\tz0 = svabs_s64_x (p0, z0),\n+\t\tz0 = svabs_x (p0, z0))\n+\n+/*\n+** abs_s64_x_untied:\n+**\tabs\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s64_x_untied, svint64_t,\n+\t\tz0 = svabs_s64_x (p0, z1),\n+\t\tz0 = svabs_x (p0, z1))"}, {"sha": "0bc64c078a26a68e824d5f8535e6e287274025b2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/abs_s8.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fabs_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** abs_s8_m_tied12:\n+**\tabs\tz0\\.b, p0/m, z0\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s8_m_tied12, svint8_t,\n+\t\tz0 = svabs_s8_m (z0, p0, z0),\n+\t\tz0 = svabs_m (z0, p0, z0))\n+\n+/*\n+** abs_s8_m_tied1:\n+**\tabs\tz0\\.b, p0/m, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s8_m_tied1, svint8_t,\n+\t\tz0 = svabs_s8_m (z0, p0, z1),\n+\t\tz0 = svabs_m (z0, p0, z1))\n+\n+/*\n+** abs_s8_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tabs\tz0\\.b, p0/m, \\1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s8_m_tied2, svint8_t,\n+\t\tz0 = svabs_s8_m (z1, p0, z0),\n+\t\tz0 = svabs_m (z1, p0, z0))\n+\n+/*\n+** abs_s8_m_untied:\n+**\tmovprfx\tz0, z2\n+**\tabs\tz0\\.b, p0/m, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s8_m_untied, svint8_t,\n+\t\tz0 = svabs_s8_m (z2, p0, z1),\n+\t\tz0 = svabs_m (z2, p0, z1))\n+\n+/*\n+** abs_s8_z_tied1:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.b, p0/z, \\1\\.b\n+**\tabs\tz0\\.b, p0/m, \\1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s8_z_tied1, svint8_t,\n+\t\tz0 = svabs_s8_z (p0, z0),\n+\t\tz0 = svabs_z (p0, z0))\n+\n+/*\n+** abs_s8_z_untied:\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tabs\tz0\\.b, p0/m, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s8_z_untied, svint8_t,\n+\t\tz0 = svabs_s8_z (p0, z1),\n+\t\tz0 = svabs_z (p0, z1))\n+\n+/*\n+** abs_s8_x_tied1:\n+**\tabs\tz0\\.b, p0/m, z0\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s8_x_tied1, svint8_t,\n+\t\tz0 = svabs_s8_x (p0, z0),\n+\t\tz0 = svabs_x (p0, z0))\n+\n+/*\n+** abs_s8_x_untied:\n+**\tabs\tz0\\.b, p0/m, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (abs_s8_x_untied, svint8_t,\n+\t\tz0 = svabs_s8_x (p0, z1),\n+\t\tz0 = svabs_x (p0, z1))"}, {"sha": "acef17309b72207fe9196755d537faa1c60b7cfc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/acge_f16.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facge_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facge_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facge_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** acge_f16_tied:\n+** (\n+**\tfacge\tp0\\.h, p0/z, z0\\.h, z1\\.h\n+** |\n+**\tfacle\tp0\\.h, p0/z, z1\\.h, z0\\.h\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acge_f16_tied, svfloat16_t,\n+\t\tp0 = svacge_f16 (p0, z0, z1),\n+\t\tp0 = svacge (p0, z0, z1))\n+\n+/*\n+** acge_f16_untied:\n+** (\n+**\tfacge\tp0\\.h, p1/z, z0\\.h, z1\\.h\n+** |\n+**\tfacle\tp0\\.h, p1/z, z1\\.h, z0\\.h\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acge_f16_untied, svfloat16_t,\n+\t\tp0 = svacge_f16 (p1, z0, z1),\n+\t\tp0 = svacge (p1, z0, z1))\n+\n+/*\n+** acge_h4_f16:\n+**\tmov\t(z[0-9]+\\.h), h4\n+** (\n+**\tfacge\tp0\\.h, p1/z, z0\\.h, \\1\n+** |\n+**\tfacle\tp0\\.h, p1/z, \\1, z0\\.h\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_ZD (acge_h4_f16, svfloat16_t, float16_t,\n+\t\t p0 = svacge_n_f16 (p1, z0, d4),\n+\t\t p0 = svacge (p1, z0, d4))\n+\n+/*\n+** acge_0_f16:\n+**\tmov\t(z[0-9]+\\.h), #0\n+** (\n+**\tfacge\tp0\\.h, p1/z, z0\\.h, \\1\n+** |\n+**\tfacle\tp0\\.h, p1/z, \\1, z0\\.h\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acge_0_f16, svfloat16_t,\n+\t\tp0 = svacge_n_f16 (p1, z0, 0),\n+\t\tp0 = svacge (p1, z0, 0))\n+\n+/*\n+** acge_1_f16:\n+**\tfmov\t(z[0-9]+\\.h), #1\\.0(?:e\\+0)?\n+** (\n+**\tfacge\tp0\\.h, p1/z, z0\\.h, \\1\n+** |\n+**\tfacle\tp0\\.h, p1/z, \\1, z0\\.h\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acge_1_f16, svfloat16_t,\n+\t\tp0 = svacge_n_f16 (p1, z0, 1),\n+\t\tp0 = svacge (p1, z0, 1))"}, {"sha": "c3d195ab89fd94bad971bd5bf2209a8b94a9f8bc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/acge_f32.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facge_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facge_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facge_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** acge_f32_tied:\n+** (\n+**\tfacge\tp0\\.s, p0/z, z0\\.s, z1\\.s\n+** |\n+**\tfacle\tp0\\.s, p0/z, z1\\.s, z0\\.s\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acge_f32_tied, svfloat32_t,\n+\t\tp0 = svacge_f32 (p0, z0, z1),\n+\t\tp0 = svacge (p0, z0, z1))\n+\n+/*\n+** acge_f32_untied:\n+** (\n+**\tfacge\tp0\\.s, p1/z, z0\\.s, z1\\.s\n+** |\n+**\tfacle\tp0\\.s, p1/z, z1\\.s, z0\\.s\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acge_f32_untied, svfloat32_t,\n+\t\tp0 = svacge_f32 (p1, z0, z1),\n+\t\tp0 = svacge (p1, z0, z1))\n+\n+/*\n+** acge_s4_f32:\n+**\tmov\t(z[0-9]+\\.s), s4\n+** (\n+**\tfacge\tp0\\.s, p1/z, z0\\.s, \\1\n+** |\n+**\tfacle\tp0\\.s, p1/z, \\1, z0\\.s\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_ZD (acge_s4_f32, svfloat32_t, float32_t,\n+\t\t p0 = svacge_n_f32 (p1, z0, d4),\n+\t\t p0 = svacge (p1, z0, d4))\n+\n+/*\n+** acge_0_f32:\n+**\tmov\t(z[0-9]+\\.s), #0\n+** (\n+**\tfacge\tp0\\.s, p1/z, z0\\.s, \\1\n+** |\n+**\tfacle\tp0\\.s, p1/z, \\1, z0\\.s\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acge_0_f32, svfloat32_t,\n+\t\tp0 = svacge_n_f32 (p1, z0, 0),\n+\t\tp0 = svacge (p1, z0, 0))\n+\n+/*\n+** acge_1_f32:\n+**\tfmov\t(z[0-9]+\\.s), #1\\.0(?:e\\+0)?\n+** (\n+**\tfacge\tp0\\.s, p1/z, z0\\.s, \\1\n+** |\n+**\tfacle\tp0\\.s, p1/z, \\1, z0\\.s\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acge_1_f32, svfloat32_t,\n+\t\tp0 = svacge_n_f32 (p1, z0, 1),\n+\t\tp0 = svacge (p1, z0, 1))"}, {"sha": "207ce93a236a3eea22b8e99038791d66ac7244b6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/acge_f64.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facge_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facge_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facge_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** acge_f64_tied:\n+** (\n+**\tfacge\tp0\\.d, p0/z, z0\\.d, z1\\.d\n+** |\n+**\tfacle\tp0\\.d, p0/z, z1\\.d, z0\\.d\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acge_f64_tied, svfloat64_t,\n+\t\tp0 = svacge_f64 (p0, z0, z1),\n+\t\tp0 = svacge (p0, z0, z1))\n+\n+/*\n+** acge_f64_untied:\n+** (\n+**\tfacge\tp0\\.d, p1/z, z0\\.d, z1\\.d\n+** |\n+**\tfacle\tp0\\.d, p1/z, z1\\.d, z0\\.d\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acge_f64_untied, svfloat64_t,\n+\t\tp0 = svacge_f64 (p1, z0, z1),\n+\t\tp0 = svacge (p1, z0, z1))\n+\n+/*\n+** acge_d4_f64:\n+**\tmov\t(z[0-9]+\\.d), d4\n+** (\n+**\tfacge\tp0\\.d, p1/z, z0\\.d, \\1\n+** |\n+**\tfacle\tp0\\.d, p1/z, \\1, z0\\.d\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_ZD (acge_d4_f64, svfloat64_t, float64_t,\n+\t\t p0 = svacge_n_f64 (p1, z0, d4),\n+\t\t p0 = svacge (p1, z0, d4))\n+\n+/*\n+** acge_0_f64:\n+**\tmov\t(z[0-9]+\\.d), #0\n+** (\n+**\tfacge\tp0\\.d, p1/z, z0\\.d, \\1\n+** |\n+**\tfacle\tp0\\.d, p1/z, \\1, z0\\.d\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acge_0_f64, svfloat64_t,\n+\t\tp0 = svacge_n_f64 (p1, z0, 0),\n+\t\tp0 = svacge (p1, z0, 0))\n+\n+/*\n+** acge_1_f64:\n+**\tfmov\t(z[0-9]+\\.d), #1\\.0(?:e\\+0)?\n+** (\n+**\tfacge\tp0\\.d, p1/z, z0\\.d, \\1\n+** |\n+**\tfacle\tp0\\.d, p1/z, \\1, z0\\.d\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acge_1_f64, svfloat64_t,\n+\t\tp0 = svacge_n_f64 (p1, z0, 1),\n+\t\tp0 = svacge (p1, z0, 1))"}, {"sha": "53c63351cf1ababfd1e6b49cfff5fbd72afc8f01", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/acgt_f16.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facgt_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facgt_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facgt_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** acgt_f16_tied:\n+** (\n+**\tfacgt\tp0\\.h, p0/z, z0\\.h, z1\\.h\n+** |\n+**\tfaclt\tp0\\.h, p0/z, z1\\.h, z0\\.h\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acgt_f16_tied, svfloat16_t,\n+\t\tp0 = svacgt_f16 (p0, z0, z1),\n+\t\tp0 = svacgt (p0, z0, z1))\n+\n+/*\n+** acgt_f16_untied:\n+** (\n+**\tfacgt\tp0\\.h, p1/z, z0\\.h, z1\\.h\n+** |\n+**\tfaclt\tp0\\.h, p1/z, z1\\.h, z0\\.h\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acgt_f16_untied, svfloat16_t,\n+\t\tp0 = svacgt_f16 (p1, z0, z1),\n+\t\tp0 = svacgt (p1, z0, z1))\n+\n+/*\n+** acgt_h4_f16:\n+**\tmov\t(z[0-9]+\\.h), h4\n+** (\n+**\tfacgt\tp0\\.h, p1/z, z0\\.h, \\1\n+** |\n+**\tfaclt\tp0\\.h, p1/z, \\1, z0\\.h\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_ZD (acgt_h4_f16, svfloat16_t, float16_t,\n+\t\t p0 = svacgt_n_f16 (p1, z0, d4),\n+\t\t p0 = svacgt (p1, z0, d4))\n+\n+/*\n+** acgt_0_f16:\n+**\tmov\t(z[0-9]+\\.h), #0\n+** (\n+**\tfacgt\tp0\\.h, p1/z, z0\\.h, \\1\n+** |\n+**\tfaclt\tp0\\.h, p1/z, \\1, z0\\.h\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acgt_0_f16, svfloat16_t,\n+\t\tp0 = svacgt_n_f16 (p1, z0, 0),\n+\t\tp0 = svacgt (p1, z0, 0))\n+\n+/*\n+** acgt_1_f16:\n+**\tfmov\t(z[0-9]+\\.h), #1\\.0(?:e\\+0)?\n+** (\n+**\tfacgt\tp0\\.h, p1/z, z0\\.h, \\1\n+** |\n+**\tfaclt\tp0\\.h, p1/z, \\1, z0\\.h\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acgt_1_f16, svfloat16_t,\n+\t\tp0 = svacgt_n_f16 (p1, z0, 1),\n+\t\tp0 = svacgt (p1, z0, 1))"}, {"sha": "d71c84ea611dd4532847d606c9b148bcd680218b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/acgt_f32.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facgt_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facgt_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facgt_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** acgt_f32_tied:\n+** (\n+**\tfacgt\tp0\\.s, p0/z, z0\\.s, z1\\.s\n+** |\n+**\tfaclt\tp0\\.s, p0/z, z1\\.s, z0\\.s\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acgt_f32_tied, svfloat32_t,\n+\t\tp0 = svacgt_f32 (p0, z0, z1),\n+\t\tp0 = svacgt (p0, z0, z1))\n+\n+/*\n+** acgt_f32_untied:\n+** (\n+**\tfacgt\tp0\\.s, p1/z, z0\\.s, z1\\.s\n+** |\n+**\tfaclt\tp0\\.s, p1/z, z1\\.s, z0\\.s\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acgt_f32_untied, svfloat32_t,\n+\t\tp0 = svacgt_f32 (p1, z0, z1),\n+\t\tp0 = svacgt (p1, z0, z1))\n+\n+/*\n+** acgt_s4_f32:\n+**\tmov\t(z[0-9]+\\.s), s4\n+** (\n+**\tfacgt\tp0\\.s, p1/z, z0\\.s, \\1\n+** |\n+**\tfaclt\tp0\\.s, p1/z, \\1, z0\\.s\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_ZD (acgt_s4_f32, svfloat32_t, float32_t,\n+\t\t p0 = svacgt_n_f32 (p1, z0, d4),\n+\t\t p0 = svacgt (p1, z0, d4))\n+\n+/*\n+** acgt_0_f32:\n+**\tmov\t(z[0-9]+\\.s), #0\n+** (\n+**\tfacgt\tp0\\.s, p1/z, z0\\.s, \\1\n+** |\n+**\tfaclt\tp0\\.s, p1/z, \\1, z0\\.s\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acgt_0_f32, svfloat32_t,\n+\t\tp0 = svacgt_n_f32 (p1, z0, 0),\n+\t\tp0 = svacgt (p1, z0, 0))\n+\n+/*\n+** acgt_1_f32:\n+**\tfmov\t(z[0-9]+\\.s), #1\\.0(?:e\\+0)?\n+** (\n+**\tfacgt\tp0\\.s, p1/z, z0\\.s, \\1\n+** |\n+**\tfaclt\tp0\\.s, p1/z, \\1, z0\\.s\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acgt_1_f32, svfloat32_t,\n+\t\tp0 = svacgt_n_f32 (p1, z0, 1),\n+\t\tp0 = svacgt (p1, z0, 1))"}, {"sha": "15d549e1836e7388752389b907ffa74923c1c7e4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/acgt_f64.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facgt_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facgt_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facgt_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** acgt_f64_tied:\n+** (\n+**\tfacgt\tp0\\.d, p0/z, z0\\.d, z1\\.d\n+** |\n+**\tfaclt\tp0\\.d, p0/z, z1\\.d, z0\\.d\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acgt_f64_tied, svfloat64_t,\n+\t\tp0 = svacgt_f64 (p0, z0, z1),\n+\t\tp0 = svacgt (p0, z0, z1))\n+\n+/*\n+** acgt_f64_untied:\n+** (\n+**\tfacgt\tp0\\.d, p1/z, z0\\.d, z1\\.d\n+** |\n+**\tfaclt\tp0\\.d, p1/z, z1\\.d, z0\\.d\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acgt_f64_untied, svfloat64_t,\n+\t\tp0 = svacgt_f64 (p1, z0, z1),\n+\t\tp0 = svacgt (p1, z0, z1))\n+\n+/*\n+** acgt_d4_f64:\n+**\tmov\t(z[0-9]+\\.d), d4\n+** (\n+**\tfacgt\tp0\\.d, p1/z, z0\\.d, \\1\n+** |\n+**\tfaclt\tp0\\.d, p1/z, \\1, z0\\.d\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_ZD (acgt_d4_f64, svfloat64_t, float64_t,\n+\t\t p0 = svacgt_n_f64 (p1, z0, d4),\n+\t\t p0 = svacgt (p1, z0, d4))\n+\n+/*\n+** acgt_0_f64:\n+**\tmov\t(z[0-9]+\\.d), #0\n+** (\n+**\tfacgt\tp0\\.d, p1/z, z0\\.d, \\1\n+** |\n+**\tfaclt\tp0\\.d, p1/z, \\1, z0\\.d\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acgt_0_f64, svfloat64_t,\n+\t\tp0 = svacgt_n_f64 (p1, z0, 0),\n+\t\tp0 = svacgt (p1, z0, 0))\n+\n+/*\n+** acgt_1_f64:\n+**\tfmov\t(z[0-9]+\\.d), #1\\.0(?:e\\+0)?\n+** (\n+**\tfacgt\tp0\\.d, p1/z, z0\\.d, \\1\n+** |\n+**\tfaclt\tp0\\.d, p1/z, \\1, z0\\.d\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acgt_1_f64, svfloat64_t,\n+\t\tp0 = svacgt_n_f64 (p1, z0, 1),\n+\t\tp0 = svacgt (p1, z0, 1))"}, {"sha": "ed6721d57194597c417800709fb9faa06995057a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/acle_f16.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facle_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facle_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facle_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** acle_f16_tied:\n+** (\n+**\tfacge\tp0\\.h, p0/z, z1\\.h, z0\\.h\n+** |\n+**\tfacle\tp0\\.h, p0/z, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acle_f16_tied, svfloat16_t,\n+\t\tp0 = svacle_f16 (p0, z0, z1),\n+\t\tp0 = svacle (p0, z0, z1))\n+\n+/*\n+** acle_f16_untied:\n+** (\n+**\tfacge\tp0\\.h, p1/z, z1\\.h, z0\\.h\n+** |\n+**\tfacle\tp0\\.h, p1/z, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acle_f16_untied, svfloat16_t,\n+\t\tp0 = svacle_f16 (p1, z0, z1),\n+\t\tp0 = svacle (p1, z0, z1))\n+\n+/*\n+** acle_h4_f16:\n+**\tmov\t(z[0-9]+\\.h), h4\n+** (\n+**\tfacge\tp0\\.h, p1/z, \\1, z0\\.h\n+** |\n+**\tfacle\tp0\\.h, p1/z, z0\\.h, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_ZD (acle_h4_f16, svfloat16_t, float16_t,\n+\t\t p0 = svacle_n_f16 (p1, z0, d4),\n+\t\t p0 = svacle (p1, z0, d4))\n+\n+/*\n+** acle_0_f16:\n+**\tmov\t(z[0-9]+\\.h), #0\n+** (\n+**\tfacge\tp0\\.h, p1/z, \\1, z0\\.h\n+** |\n+**\tfacle\tp0\\.h, p1/z, z0\\.h, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acle_0_f16, svfloat16_t,\n+\t\tp0 = svacle_n_f16 (p1, z0, 0),\n+\t\tp0 = svacle (p1, z0, 0))\n+\n+/*\n+** acle_1_f16:\n+**\tfmov\t(z[0-9]+\\.h), #1\\.0(?:e\\+0)?\n+** (\n+**\tfacge\tp0\\.h, p1/z, \\1, z0\\.h\n+** |\n+**\tfacle\tp0\\.h, p1/z, z0\\.h, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acle_1_f16, svfloat16_t,\n+\t\tp0 = svacle_n_f16 (p1, z0, 1),\n+\t\tp0 = svacle (p1, z0, 1))"}, {"sha": "7fc9da701d34586b77f3c1f7ac42d45172337655", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/acle_f32.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facle_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facle_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facle_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** acle_f32_tied:\n+** (\n+**\tfacge\tp0\\.s, p0/z, z1\\.s, z0\\.s\n+** |\n+**\tfacle\tp0\\.s, p0/z, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acle_f32_tied, svfloat32_t,\n+\t\tp0 = svacle_f32 (p0, z0, z1),\n+\t\tp0 = svacle (p0, z0, z1))\n+\n+/*\n+** acle_f32_untied:\n+** (\n+**\tfacge\tp0\\.s, p1/z, z1\\.s, z0\\.s\n+** |\n+**\tfacle\tp0\\.s, p1/z, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acle_f32_untied, svfloat32_t,\n+\t\tp0 = svacle_f32 (p1, z0, z1),\n+\t\tp0 = svacle (p1, z0, z1))\n+\n+/*\n+** acle_s4_f32:\n+**\tmov\t(z[0-9]+\\.s), s4\n+** (\n+**\tfacge\tp0\\.s, p1/z, \\1, z0\\.s\n+** |\n+**\tfacle\tp0\\.s, p1/z, z0\\.s, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_ZD (acle_s4_f32, svfloat32_t, float32_t,\n+\t\t p0 = svacle_n_f32 (p1, z0, d4),\n+\t\t p0 = svacle (p1, z0, d4))\n+\n+/*\n+** acle_0_f32:\n+**\tmov\t(z[0-9]+\\.s), #0\n+** (\n+**\tfacge\tp0\\.s, p1/z, \\1, z0\\.s\n+** |\n+**\tfacle\tp0\\.s, p1/z, z0\\.s, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acle_0_f32, svfloat32_t,\n+\t\tp0 = svacle_n_f32 (p1, z0, 0),\n+\t\tp0 = svacle (p1, z0, 0))\n+\n+/*\n+** acle_1_f32:\n+**\tfmov\t(z[0-9]+\\.s), #1\\.0(?:e\\+0)?\n+** (\n+**\tfacge\tp0\\.s, p1/z, \\1, z0\\.s\n+** |\n+**\tfacle\tp0\\.s, p1/z, z0\\.s, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acle_1_f32, svfloat32_t,\n+\t\tp0 = svacle_n_f32 (p1, z0, 1),\n+\t\tp0 = svacle (p1, z0, 1))"}, {"sha": "ecbb8e5007c365da3f45bd76ef68775cf8e4ea45", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/acle_f64.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facle_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facle_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Facle_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** acle_f64_tied:\n+** (\n+**\tfacge\tp0\\.d, p0/z, z1\\.d, z0\\.d\n+** |\n+**\tfacle\tp0\\.d, p0/z, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acle_f64_tied, svfloat64_t,\n+\t\tp0 = svacle_f64 (p0, z0, z1),\n+\t\tp0 = svacle (p0, z0, z1))\n+\n+/*\n+** acle_f64_untied:\n+** (\n+**\tfacge\tp0\\.d, p1/z, z1\\.d, z0\\.d\n+** |\n+**\tfacle\tp0\\.d, p1/z, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acle_f64_untied, svfloat64_t,\n+\t\tp0 = svacle_f64 (p1, z0, z1),\n+\t\tp0 = svacle (p1, z0, z1))\n+\n+/*\n+** acle_d4_f64:\n+**\tmov\t(z[0-9]+\\.d), d4\n+** (\n+**\tfacge\tp0\\.d, p1/z, \\1, z0\\.d\n+** |\n+**\tfacle\tp0\\.d, p1/z, z0\\.d, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_ZD (acle_d4_f64, svfloat64_t, float64_t,\n+\t\t p0 = svacle_n_f64 (p1, z0, d4),\n+\t\t p0 = svacle (p1, z0, d4))\n+\n+/*\n+** acle_0_f64:\n+**\tmov\t(z[0-9]+\\.d), #0\n+** (\n+**\tfacge\tp0\\.d, p1/z, \\1, z0\\.d\n+** |\n+**\tfacle\tp0\\.d, p1/z, z0\\.d, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acle_0_f64, svfloat64_t,\n+\t\tp0 = svacle_n_f64 (p1, z0, 0),\n+\t\tp0 = svacle (p1, z0, 0))\n+\n+/*\n+** acle_1_f64:\n+**\tfmov\t(z[0-9]+\\.d), #1\\.0(?:e\\+0)?\n+** (\n+**\tfacge\tp0\\.d, p1/z, \\1, z0\\.d\n+** |\n+**\tfacle\tp0\\.d, p1/z, z0\\.d, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (acle_1_f64, svfloat64_t,\n+\t\tp0 = svacle_n_f64 (p1, z0, 1),\n+\t\tp0 = svacle (p1, z0, 1))"}, {"sha": "e5f5040c7d1b7a35c77b511669d4d53696f2d0eb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/aclt_f16.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faclt_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faclt_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faclt_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** aclt_f16_tied:\n+** (\n+**\tfacgt\tp0\\.h, p0/z, z1\\.h, z0\\.h\n+** |\n+**\tfaclt\tp0\\.h, p0/z, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (aclt_f16_tied, svfloat16_t,\n+\t\tp0 = svaclt_f16 (p0, z0, z1),\n+\t\tp0 = svaclt (p0, z0, z1))\n+\n+/*\n+** aclt_f16_untied:\n+** (\n+**\tfacgt\tp0\\.h, p1/z, z1\\.h, z0\\.h\n+** |\n+**\tfaclt\tp0\\.h, p1/z, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (aclt_f16_untied, svfloat16_t,\n+\t\tp0 = svaclt_f16 (p1, z0, z1),\n+\t\tp0 = svaclt (p1, z0, z1))\n+\n+/*\n+** aclt_h4_f16:\n+**\tmov\t(z[0-9]+\\.h), h4\n+** (\n+**\tfacgt\tp0\\.h, p1/z, \\1, z0\\.h\n+** |\n+**\tfaclt\tp0\\.h, p1/z, z0\\.h, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_ZD (aclt_h4_f16, svfloat16_t, float16_t,\n+\t\t p0 = svaclt_n_f16 (p1, z0, d4),\n+\t\t p0 = svaclt (p1, z0, d4))\n+\n+/*\n+** aclt_0_f16:\n+**\tmov\t(z[0-9]+\\.h), #0\n+** (\n+**\tfacgt\tp0\\.h, p1/z, \\1, z0\\.h\n+** |\n+**\tfaclt\tp0\\.h, p1/z, z0\\.h, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (aclt_0_f16, svfloat16_t,\n+\t\tp0 = svaclt_n_f16 (p1, z0, 0),\n+\t\tp0 = svaclt (p1, z0, 0))\n+\n+/*\n+** aclt_1_f16:\n+**\tfmov\t(z[0-9]+\\.h), #1\\.0(?:e\\+0)?\n+** (\n+**\tfacgt\tp0\\.h, p1/z, \\1, z0\\.h\n+** |\n+**\tfaclt\tp0\\.h, p1/z, z0\\.h, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (aclt_1_f16, svfloat16_t,\n+\t\tp0 = svaclt_n_f16 (p1, z0, 1),\n+\t\tp0 = svaclt (p1, z0, 1))"}, {"sha": "f40826445f8d50e23c5579b977016332b3797e7d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/aclt_f32.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faclt_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faclt_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faclt_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** aclt_f32_tied:\n+** (\n+**\tfacgt\tp0\\.s, p0/z, z1\\.s, z0\\.s\n+** |\n+**\tfaclt\tp0\\.s, p0/z, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (aclt_f32_tied, svfloat32_t,\n+\t\tp0 = svaclt_f32 (p0, z0, z1),\n+\t\tp0 = svaclt (p0, z0, z1))\n+\n+/*\n+** aclt_f32_untied:\n+** (\n+**\tfacgt\tp0\\.s, p1/z, z1\\.s, z0\\.s\n+** |\n+**\tfaclt\tp0\\.s, p1/z, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (aclt_f32_untied, svfloat32_t,\n+\t\tp0 = svaclt_f32 (p1, z0, z1),\n+\t\tp0 = svaclt (p1, z0, z1))\n+\n+/*\n+** aclt_s4_f32:\n+**\tmov\t(z[0-9]+\\.s), s4\n+** (\n+**\tfacgt\tp0\\.s, p1/z, \\1, z0\\.s\n+** |\n+**\tfaclt\tp0\\.s, p1/z, z0\\.s, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_ZD (aclt_s4_f32, svfloat32_t, float32_t,\n+\t\t p0 = svaclt_n_f32 (p1, z0, d4),\n+\t\t p0 = svaclt (p1, z0, d4))\n+\n+/*\n+** aclt_0_f32:\n+**\tmov\t(z[0-9]+\\.s), #0\n+** (\n+**\tfacgt\tp0\\.s, p1/z, \\1, z0\\.s\n+** |\n+**\tfaclt\tp0\\.s, p1/z, z0\\.s, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (aclt_0_f32, svfloat32_t,\n+\t\tp0 = svaclt_n_f32 (p1, z0, 0),\n+\t\tp0 = svaclt (p1, z0, 0))\n+\n+/*\n+** aclt_1_f32:\n+**\tfmov\t(z[0-9]+\\.s), #1\\.0(?:e\\+0)?\n+** (\n+**\tfacgt\tp0\\.s, p1/z, \\1, z0\\.s\n+** |\n+**\tfaclt\tp0\\.s, p1/z, z0\\.s, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (aclt_1_f32, svfloat32_t,\n+\t\tp0 = svaclt_n_f32 (p1, z0, 1),\n+\t\tp0 = svaclt (p1, z0, 1))"}, {"sha": "0170b330700167830f1a2cfa74fc2419f8d08748", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/aclt_f64.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faclt_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faclt_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faclt_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** aclt_f64_tied:\n+** (\n+**\tfacgt\tp0\\.d, p0/z, z1\\.d, z0\\.d\n+** |\n+**\tfaclt\tp0\\.d, p0/z, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (aclt_f64_tied, svfloat64_t,\n+\t\tp0 = svaclt_f64 (p0, z0, z1),\n+\t\tp0 = svaclt (p0, z0, z1))\n+\n+/*\n+** aclt_f64_untied:\n+** (\n+**\tfacgt\tp0\\.d, p1/z, z1\\.d, z0\\.d\n+** |\n+**\tfaclt\tp0\\.d, p1/z, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (aclt_f64_untied, svfloat64_t,\n+\t\tp0 = svaclt_f64 (p1, z0, z1),\n+\t\tp0 = svaclt (p1, z0, z1))\n+\n+/*\n+** aclt_d4_f64:\n+**\tmov\t(z[0-9]+\\.d), d4\n+** (\n+**\tfacgt\tp0\\.d, p1/z, \\1, z0\\.d\n+** |\n+**\tfaclt\tp0\\.d, p1/z, z0\\.d, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_ZD (aclt_d4_f64, svfloat64_t, float64_t,\n+\t\t p0 = svaclt_n_f64 (p1, z0, d4),\n+\t\t p0 = svaclt (p1, z0, d4))\n+\n+/*\n+** aclt_0_f64:\n+**\tmov\t(z[0-9]+\\.d), #0\n+** (\n+**\tfacgt\tp0\\.d, p1/z, \\1, z0\\.d\n+** |\n+**\tfaclt\tp0\\.d, p1/z, z0\\.d, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (aclt_0_f64, svfloat64_t,\n+\t\tp0 = svaclt_n_f64 (p1, z0, 0),\n+\t\tp0 = svaclt (p1, z0, 0))\n+\n+/*\n+** aclt_1_f64:\n+**\tfmov\t(z[0-9]+\\.d), #1\\.0(?:e\\+0)?\n+** (\n+**\tfacgt\tp0\\.d, p1/z, \\1, z0\\.d\n+** |\n+**\tfaclt\tp0\\.d, p1/z, z0\\.d, \\1\n+** )\n+**\tret\n+*/\n+TEST_COMPARE_Z (aclt_1_f64, svfloat64_t,\n+\t\tp0 = svaclt_n_f64 (p1, z0, 1),\n+\t\tp0 = svaclt (p1, z0, 1))"}, {"sha": "7228e5dd57d0f148c2ab0b160cdd3ad7aac344c4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/add_f16.c", "status": "added", "additions": 577, "deletions": 0, "changes": 577, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,577 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** add_f16_m_tied1:\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_m_tied1, svfloat16_t,\n+\t\tz0 = svadd_f16_m (p0, z0, z1),\n+\t\tz0 = svadd_m (p0, z0, z1))\n+\n+/*\n+** add_f16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_m_tied2, svfloat16_t,\n+\t\tz0 = svadd_f16_m (p0, z1, z0),\n+\t\tz0 = svadd_m (p0, z1, z0))\n+\n+/*\n+** add_f16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_m_untied, svfloat16_t,\n+\t\tz0 = svadd_f16_m (p0, z1, z2),\n+\t\tz0 = svadd_m (p0, z1, z2))\n+\n+/*\n+** add_h4_f16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), h4\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_h4_f16_m_tied1, svfloat16_t, __fp16,\n+\t\t z0 = svadd_n_f16_m (p0, z0, d4),\n+\t\t z0 = svadd_m (p0, z0, d4))\n+\n+/*\n+** add_h4_f16_m_untied:\n+**\tmov\t(z[0-9]+\\.h), h4\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_h4_f16_m_untied, svfloat16_t, __fp16,\n+\t\t z0 = svadd_n_f16_m (p0, z1, d4),\n+\t\t z0 = svadd_m (p0, z1, d4))\n+\n+/*\n+** add_1_f16_m_tied1:\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f16_m_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z0, 1),\n+\t\tz0 = svadd_m (p0, z0, 1))\n+\n+/*\n+** add_1_f16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f16_m_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z1, 1),\n+\t\tz0 = svadd_m (p0, z1, 1))\n+\n+/*\n+** add_0p5_f16_m_tied1:\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f16_m_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z0, 0.5),\n+\t\tz0 = svadd_m (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f16_m_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z1, 0.5),\n+\t\tz0 = svadd_m (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f16_m_tied1:\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f16_m_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z0, -1),\n+\t\tz0 = svadd_m (p0, z0, -1))\n+\n+/*\n+** add_m1_f16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f16_m_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z1, -1),\n+\t\tz0 = svadd_m (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f16_m_tied1:\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f16_m_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z0, -0.5),\n+\t\tz0 = svadd_m (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f16_m_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z1, -0.5),\n+\t\tz0 = svadd_m (p0, z1, -0.5))\n+\n+/*\n+** add_m2_f16_m:\n+**\tfmov\t(z[0-9]+\\.h), #-2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_f16_m, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z0, -2),\n+\t\tz0 = svadd_m (p0, z0, -2))\n+\n+/*\n+** add_f16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svadd_f16_z (p0, z0, z1),\n+\t\tz0 = svadd_z (p0, z0, z1))\n+\n+/*\n+** add_f16_z_tied2:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_z_tied2, svfloat16_t,\n+\t\tz0 = svadd_f16_z (p0, z1, z0),\n+\t\tz0 = svadd_z (p0, z1, z0))\n+\n+/*\n+** add_f16_z_untied:\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, z2\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_z_untied, svfloat16_t,\n+\t\tz0 = svadd_f16_z (p0, z1, z2),\n+\t\tz0 = svadd_z (p0, z1, z2))\n+\n+/*\n+** add_h4_f16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), h4\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_h4_f16_z_tied1, svfloat16_t, __fp16,\n+\t\t z0 = svadd_n_f16_z (p0, z0, d4),\n+\t\t z0 = svadd_z (p0, z0, d4))\n+\n+/*\n+** add_h4_f16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), h4\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_h4_f16_z_untied, svfloat16_t, __fp16,\n+\t\t z0 = svadd_n_f16_z (p0, z1, d4),\n+\t\t z0 = svadd_z (p0, z1, d4))\n+\n+/*\n+** add_1_f16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z0, 1),\n+\t\tz0 = svadd_z (p0, z0, 1))\n+\n+/*\n+** add_1_f16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f16_z_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z1, 1),\n+\t\tz0 = svadd_z (p0, z1, 1))\n+\n+/*\n+** add_0p5_f16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z0, 0.5),\n+\t\tz0 = svadd_z (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f16_z_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z1, 0.5),\n+\t\tz0 = svadd_z (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z0, -1),\n+\t\tz0 = svadd_z (p0, z0, -1))\n+\n+/*\n+** add_m1_f16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f16_z_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z1, -1),\n+\t\tz0 = svadd_z (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z0, -0.5),\n+\t\tz0 = svadd_z (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f16_z_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z1, -0.5),\n+\t\tz0 = svadd_z (p0, z1, -0.5))\n+\n+/*\n+** add_m2_f16_z:\n+**\tfmov\t(z[0-9]+\\.h), #-2\\.0(?:e\\+0)?\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_f16_z, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z0, -2),\n+\t\tz0 = svadd_z (p0, z0, -2))\n+\n+/*\n+** add_f16_x_tied1:\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_f16_x (p0, z0, z1),\n+\t\tz0 = svadd_x (p0, z0, z1))\n+\n+/*\n+** add_f16_x_tied2:\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_x_tied2, svfloat16_t,\n+\t\tz0 = svadd_f16_x (p0, z1, z0),\n+\t\tz0 = svadd_x (p0, z1, z0))\n+\n+/*\n+** add_f16_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+** |\n+**\tmovprfx\tz0, z2\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_f16_x (p0, z1, z2),\n+\t\tz0 = svadd_x (p0, z1, z2))\n+\n+/*\n+** add_h4_f16_x_tied1:\n+**\tmov\t(z[0-9]+\\.h), h4\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_h4_f16_x_tied1, svfloat16_t, __fp16,\n+\t\t z0 = svadd_n_f16_x (p0, z0, d4),\n+\t\t z0 = svadd_x (p0, z0, d4))\n+\n+/*\n+** add_h4_f16_x_untied:\n+**\tmov\tz0\\.h, h4\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_h4_f16_x_untied, svfloat16_t, __fp16,\n+\t\t z0 = svadd_n_f16_x (p0, z1, d4),\n+\t\t z0 = svadd_x (p0, z1, d4))\n+\n+/*\n+** add_1_f16_x_tied1:\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z0, 1),\n+\t\tz0 = svadd_x (p0, z0, 1))\n+\n+/*\n+** add_1_f16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z1, 1),\n+\t\tz0 = svadd_x (p0, z1, 1))\n+\n+/*\n+** add_0p5_f16_x_tied1:\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z0, 0.5),\n+\t\tz0 = svadd_x (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z1, 0.5),\n+\t\tz0 = svadd_x (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f16_x_tied1:\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z0, -1),\n+\t\tz0 = svadd_x (p0, z0, -1))\n+\n+/*\n+** add_m1_f16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z1, -1),\n+\t\tz0 = svadd_x (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f16_x_tied1:\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z0, -0.5),\n+\t\tz0 = svadd_x (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z1, -0.5),\n+\t\tz0 = svadd_x (p0, z1, -0.5))\n+\n+/*\n+** add_2_f16_x_tied1:\n+**\tfmov\t(z[0-9]+\\.h), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_2_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z0, 2),\n+\t\tz0 = svadd_x (p0, z0, 2))\n+\n+/*\n+** add_2_f16_x_untied:\n+**\tfmov\tz0\\.h, #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_2_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z1, 2),\n+\t\tz0 = svadd_x (p0, z1, 2))\n+\n+/*\n+** ptrue_add_f16_x_tied1:\n+**\tfadd\tz0\\.h, (z0\\.h, z1\\.h|z1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_f16_x (svptrue_b16 (), z0, z1),\n+\t\tz0 = svadd_x (svptrue_b16 (), z0, z1))\n+\n+/*\n+** ptrue_add_f16_x_tied2:\n+**\tfadd\tz0\\.h, (z0\\.h, z1\\.h|z1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f16_x_tied2, svfloat16_t,\n+\t\tz0 = svadd_f16_x (svptrue_b16 (), z1, z0),\n+\t\tz0 = svadd_x (svptrue_b16 (), z1, z0))\n+\n+/*\n+** ptrue_add_f16_x_untied:\n+**\tfadd\tz0\\.h, (z1\\.h, z2\\.h|z2\\.h, z1\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_f16_x (svptrue_b16 (), z1, z2),\n+\t\tz0 = svadd_x (svptrue_b16 (), z1, z2))\n+\n+/*\n+** ptrue_add_1_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_1_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z0, 1),\n+\t\tz0 = svadd_x (svptrue_b16 (), z0, 1))\n+\n+/*\n+** ptrue_add_1_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_1_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z1, 1),\n+\t\tz0 = svadd_x (svptrue_b16 (), z1, 1))\n+\n+/*\n+** ptrue_add_0p5_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_0p5_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z0, 0.5),\n+\t\tz0 = svadd_x (svptrue_b16 (), z0, 0.5))\n+\n+/*\n+** ptrue_add_0p5_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_0p5_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z1, 0.5),\n+\t\tz0 = svadd_x (svptrue_b16 (), z1, 0.5))\n+\n+/*\n+** ptrue_add_m1_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m1_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z0, -1),\n+\t\tz0 = svadd_x (svptrue_b16 (), z0, -1))\n+\n+/*\n+** ptrue_add_m1_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m1_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z1, -1),\n+\t\tz0 = svadd_x (svptrue_b16 (), z1, -1))\n+\n+/*\n+** ptrue_add_m0p5_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m0p5_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z0, -0.5),\n+\t\tz0 = svadd_x (svptrue_b16 (), z0, -0.5))\n+\n+/*\n+** ptrue_add_m0p5_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m0p5_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z1, -0.5),\n+\t\tz0 = svadd_x (svptrue_b16 (), z1, -0.5))\n+\n+/*\n+** ptrue_add_2_f16_x_tied1:\n+**\tfmov\t(z[0-9]+\\.h), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.h, (z0\\.h, \\1|\\1, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_2_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z0, 2),\n+\t\tz0 = svadd_x (svptrue_b16 (), z0, 2))\n+\n+/*\n+** ptrue_add_2_f16_x_untied:\n+**\tfmov\t(z[0-9]+\\.h), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.h, (z1\\.h, \\1|\\1, z1\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_2_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z1, 2),\n+\t\tz0 = svadd_x (svptrue_b16 (), z1, 2))"}, {"sha": "f6330acee1b244b4e3a43c81f10968af66e79b76", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/add_f16_notrap.c", "status": "added", "additions": 572, "deletions": 0, "changes": 572, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f16_notrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f16_notrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f16_notrap.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,572 @@\n+/* { dg-additional-options \"-fno-trapping-math\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** add_f16_m_tied1:\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_m_tied1, svfloat16_t,\n+\t\tz0 = svadd_f16_m (p0, z0, z1),\n+\t\tz0 = svadd_m (p0, z0, z1))\n+\n+/*\n+** add_f16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_m_tied2, svfloat16_t,\n+\t\tz0 = svadd_f16_m (p0, z1, z0),\n+\t\tz0 = svadd_m (p0, z1, z0))\n+\n+/*\n+** add_f16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_m_untied, svfloat16_t,\n+\t\tz0 = svadd_f16_m (p0, z1, z2),\n+\t\tz0 = svadd_m (p0, z1, z2))\n+\n+/*\n+** add_h4_f16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), h4\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_h4_f16_m_tied1, svfloat16_t, __fp16,\n+\t\t z0 = svadd_n_f16_m (p0, z0, d4),\n+\t\t z0 = svadd_m (p0, z0, d4))\n+\n+/*\n+** add_h4_f16_m_untied:\n+**\tmov\t(z[0-9]+\\.h), h4\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_h4_f16_m_untied, svfloat16_t, __fp16,\n+\t\t z0 = svadd_n_f16_m (p0, z1, d4),\n+\t\t z0 = svadd_m (p0, z1, d4))\n+\n+/*\n+** add_1_f16_m_tied1:\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f16_m_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z0, 1),\n+\t\tz0 = svadd_m (p0, z0, 1))\n+\n+/*\n+** add_1_f16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f16_m_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z1, 1),\n+\t\tz0 = svadd_m (p0, z1, 1))\n+\n+/*\n+** add_0p5_f16_m_tied1:\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f16_m_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z0, 0.5),\n+\t\tz0 = svadd_m (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f16_m_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z1, 0.5),\n+\t\tz0 = svadd_m (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f16_m_tied1:\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f16_m_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z0, -1),\n+\t\tz0 = svadd_m (p0, z0, -1))\n+\n+/*\n+** add_m1_f16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f16_m_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z1, -1),\n+\t\tz0 = svadd_m (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f16_m_tied1:\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f16_m_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z0, -0.5),\n+\t\tz0 = svadd_m (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f16_m_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z1, -0.5),\n+\t\tz0 = svadd_m (p0, z1, -0.5))\n+\n+/*\n+** add_m2_f16_m:\n+**\tfmov\t(z[0-9]+\\.h), #-2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_f16_m, svfloat16_t,\n+\t\tz0 = svadd_n_f16_m (p0, z0, -2),\n+\t\tz0 = svadd_m (p0, z0, -2))\n+\n+/*\n+** add_f16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svadd_f16_z (p0, z0, z1),\n+\t\tz0 = svadd_z (p0, z0, z1))\n+\n+/*\n+** add_f16_z_tied2:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_z_tied2, svfloat16_t,\n+\t\tz0 = svadd_f16_z (p0, z1, z0),\n+\t\tz0 = svadd_z (p0, z1, z0))\n+\n+/*\n+** add_f16_z_untied:\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, z2\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_z_untied, svfloat16_t,\n+\t\tz0 = svadd_f16_z (p0, z1, z2),\n+\t\tz0 = svadd_z (p0, z1, z2))\n+\n+/*\n+** add_h4_f16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), h4\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_h4_f16_z_tied1, svfloat16_t, __fp16,\n+\t\t z0 = svadd_n_f16_z (p0, z0, d4),\n+\t\t z0 = svadd_z (p0, z0, d4))\n+\n+/*\n+** add_h4_f16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), h4\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_h4_f16_z_untied, svfloat16_t, __fp16,\n+\t\t z0 = svadd_n_f16_z (p0, z1, d4),\n+\t\t z0 = svadd_z (p0, z1, d4))\n+\n+/*\n+** add_1_f16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z0, 1),\n+\t\tz0 = svadd_z (p0, z0, 1))\n+\n+/*\n+** add_1_f16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f16_z_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z1, 1),\n+\t\tz0 = svadd_z (p0, z1, 1))\n+\n+/*\n+** add_0p5_f16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z0, 0.5),\n+\t\tz0 = svadd_z (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f16_z_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z1, 0.5),\n+\t\tz0 = svadd_z (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z0, -1),\n+\t\tz0 = svadd_z (p0, z0, -1))\n+\n+/*\n+** add_m1_f16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f16_z_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z1, -1),\n+\t\tz0 = svadd_z (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f16_z_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z0, -0.5),\n+\t\tz0 = svadd_z (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f16_z_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z1, -0.5),\n+\t\tz0 = svadd_z (p0, z1, -0.5))\n+\n+/*\n+** add_m2_f16_z:\n+**\tfmov\t(z[0-9]+\\.h), #-2\\.0(?:e\\+0)?\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_f16_z, svfloat16_t,\n+\t\tz0 = svadd_n_f16_z (p0, z0, -2),\n+\t\tz0 = svadd_z (p0, z0, -2))\n+\n+/*\n+** add_f16_x_tied1:\n+**\tfadd\tz0\\.h, (z0\\.h, z1\\.h|z1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_f16_x (p0, z0, z1),\n+\t\tz0 = svadd_x (p0, z0, z1))\n+\n+/*\n+** add_f16_x_tied2:\n+**\tfadd\tz0\\.h, (z0\\.h, z1\\.h|z1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_x_tied2, svfloat16_t,\n+\t\tz0 = svadd_f16_x (p0, z1, z0),\n+\t\tz0 = svadd_x (p0, z1, z0))\n+\n+/*\n+** add_f16_x_untied:\n+**\tfadd\tz0\\.h, (z1\\.h, z2\\.h|z2\\.h, z1\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_f16_x (p0, z1, z2),\n+\t\tz0 = svadd_x (p0, z1, z2))\n+\n+/*\n+** add_h4_f16_x_tied1:\n+**\tmov\t(z[0-9]+\\.h), h4\n+**\tfadd\tz0\\.h, (z0\\.h, \\1|\\1, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_h4_f16_x_tied1, svfloat16_t, __fp16,\n+\t\t z0 = svadd_n_f16_x (p0, z0, d4),\n+\t\t z0 = svadd_x (p0, z0, d4))\n+\n+/*\n+** add_h4_f16_x_untied:\n+**\tmov\t(z[0-9]+\\.h), h4\n+**\tfadd\tz0\\.h, (z1\\.h, \\1|\\1, z1\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_h4_f16_x_untied, svfloat16_t, __fp16,\n+\t\t z0 = svadd_n_f16_x (p0, z1, d4),\n+\t\t z0 = svadd_x (p0, z1, d4))\n+\n+/*\n+** add_1_f16_x_tied1:\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z0, 1),\n+\t\tz0 = svadd_x (p0, z0, 1))\n+\n+/*\n+** add_1_f16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z1, 1),\n+\t\tz0 = svadd_x (p0, z1, 1))\n+\n+/*\n+** add_0p5_f16_x_tied1:\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z0, 0.5),\n+\t\tz0 = svadd_x (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z1, 0.5),\n+\t\tz0 = svadd_x (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f16_x_tied1:\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z0, -1),\n+\t\tz0 = svadd_x (p0, z0, -1))\n+\n+/*\n+** add_m1_f16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z1, -1),\n+\t\tz0 = svadd_x (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f16_x_tied1:\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z0, -0.5),\n+\t\tz0 = svadd_x (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.h, p0/m, z0\\.h, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z1, -0.5),\n+\t\tz0 = svadd_x (p0, z1, -0.5))\n+\n+/*\n+** add_2_f16_x_tied1:\n+**\tfmov\t(z[0-9]+\\.h), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.h, (z0\\.h, \\1|\\1, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_2_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z0, 2),\n+\t\tz0 = svadd_x (p0, z0, 2))\n+\n+/*\n+** add_2_f16_x_untied:\n+**\tfmov\t(z[0-9]+\\.h), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.h, (z1\\.h, \\1|\\1, z1\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_2_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (p0, z1, 2),\n+\t\tz0 = svadd_x (p0, z1, 2))\n+\n+/*\n+** ptrue_add_f16_x_tied1:\n+**\tfadd\tz0\\.h, (z0\\.h, z1\\.h|z1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_f16_x (svptrue_b16 (), z0, z1),\n+\t\tz0 = svadd_x (svptrue_b16 (), z0, z1))\n+\n+/*\n+** ptrue_add_f16_x_tied2:\n+**\tfadd\tz0\\.h, (z0\\.h, z1\\.h|z1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f16_x_tied2, svfloat16_t,\n+\t\tz0 = svadd_f16_x (svptrue_b16 (), z1, z0),\n+\t\tz0 = svadd_x (svptrue_b16 (), z1, z0))\n+\n+/*\n+** ptrue_add_f16_x_untied:\n+**\tfadd\tz0\\.h, (z1\\.h, z2\\.h|z2\\.h, z1\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_f16_x (svptrue_b16 (), z1, z2),\n+\t\tz0 = svadd_x (svptrue_b16 (), z1, z2))\n+\n+/*\n+** ptrue_add_1_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_1_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z0, 1),\n+\t\tz0 = svadd_x (svptrue_b16 (), z0, 1))\n+\n+/*\n+** ptrue_add_1_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_1_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z1, 1),\n+\t\tz0 = svadd_x (svptrue_b16 (), z1, 1))\n+\n+/*\n+** ptrue_add_0p5_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_0p5_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z0, 0.5),\n+\t\tz0 = svadd_x (svptrue_b16 (), z0, 0.5))\n+\n+/*\n+** ptrue_add_0p5_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_0p5_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z1, 0.5),\n+\t\tz0 = svadd_x (svptrue_b16 (), z1, 0.5))\n+\n+/*\n+** ptrue_add_m1_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m1_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z0, -1),\n+\t\tz0 = svadd_x (svptrue_b16 (), z0, -1))\n+\n+/*\n+** ptrue_add_m1_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m1_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z1, -1),\n+\t\tz0 = svadd_x (svptrue_b16 (), z1, -1))\n+\n+/*\n+** ptrue_add_m0p5_f16_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m0p5_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z0, -0.5),\n+\t\tz0 = svadd_x (svptrue_b16 (), z0, -0.5))\n+\n+/*\n+** ptrue_add_m0p5_f16_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m0p5_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z1, -0.5),\n+\t\tz0 = svadd_x (svptrue_b16 (), z1, -0.5))\n+\n+/*\n+** ptrue_add_2_f16_x_tied1:\n+**\tfmov\t(z[0-9]+\\.h), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.h, (z0\\.h, \\1|\\1, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_2_f16_x_tied1, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z0, 2),\n+\t\tz0 = svadd_x (svptrue_b16 (), z0, 2))\n+\n+/*\n+** ptrue_add_2_f16_x_untied:\n+**\tfmov\t(z[0-9]+\\.h), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.h, (z1\\.h, \\1|\\1, z1\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_2_f16_x_untied, svfloat16_t,\n+\t\tz0 = svadd_n_f16_x (svptrue_b16 (), z1, 2),\n+\t\tz0 = svadd_x (svptrue_b16 (), z1, 2))"}, {"sha": "b5f4e9623038a3a353ca70f9fe480ff734a7ad5e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/add_f32.c", "status": "added", "additions": 577, "deletions": 0, "changes": 577, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,577 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** add_f32_m_tied1:\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_m_tied1, svfloat32_t,\n+\t\tz0 = svadd_f32_m (p0, z0, z1),\n+\t\tz0 = svadd_m (p0, z0, z1))\n+\n+/*\n+** add_f32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_m_tied2, svfloat32_t,\n+\t\tz0 = svadd_f32_m (p0, z1, z0),\n+\t\tz0 = svadd_m (p0, z1, z0))\n+\n+/*\n+** add_f32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_m_untied, svfloat32_t,\n+\t\tz0 = svadd_f32_m (p0, z1, z2),\n+\t\tz0 = svadd_m (p0, z1, z2))\n+\n+/*\n+** add_s4_f32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), s4\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_s4_f32_m_tied1, svfloat32_t, float,\n+\t\t z0 = svadd_n_f32_m (p0, z0, d4),\n+\t\t z0 = svadd_m (p0, z0, d4))\n+\n+/*\n+** add_s4_f32_m_untied:\n+**\tmov\t(z[0-9]+\\.s), s4\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_s4_f32_m_untied, svfloat32_t, float,\n+\t\t z0 = svadd_n_f32_m (p0, z1, d4),\n+\t\t z0 = svadd_m (p0, z1, d4))\n+\n+/*\n+** add_1_f32_m_tied1:\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f32_m_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z0, 1),\n+\t\tz0 = svadd_m (p0, z0, 1))\n+\n+/*\n+** add_1_f32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f32_m_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z1, 1),\n+\t\tz0 = svadd_m (p0, z1, 1))\n+\n+/*\n+** add_0p5_f32_m_tied1:\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f32_m_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z0, 0.5),\n+\t\tz0 = svadd_m (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f32_m_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z1, 0.5),\n+\t\tz0 = svadd_m (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f32_m_tied1:\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f32_m_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z0, -1),\n+\t\tz0 = svadd_m (p0, z0, -1))\n+\n+/*\n+** add_m1_f32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f32_m_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z1, -1),\n+\t\tz0 = svadd_m (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f32_m_tied1:\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f32_m_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z0, -0.5),\n+\t\tz0 = svadd_m (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f32_m_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z1, -0.5),\n+\t\tz0 = svadd_m (p0, z1, -0.5))\n+\n+/*\n+** add_m2_f32_m:\n+**\tfmov\t(z[0-9]+\\.s), #-2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_f32_m, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z0, -2),\n+\t\tz0 = svadd_m (p0, z0, -2))\n+\n+/*\n+** add_f32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svadd_f32_z (p0, z0, z1),\n+\t\tz0 = svadd_z (p0, z0, z1))\n+\n+/*\n+** add_f32_z_tied2:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_z_tied2, svfloat32_t,\n+\t\tz0 = svadd_f32_z (p0, z1, z0),\n+\t\tz0 = svadd_z (p0, z1, z0))\n+\n+/*\n+** add_f32_z_untied:\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, z2\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_z_untied, svfloat32_t,\n+\t\tz0 = svadd_f32_z (p0, z1, z2),\n+\t\tz0 = svadd_z (p0, z1, z2))\n+\n+/*\n+** add_s4_f32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), s4\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_s4_f32_z_tied1, svfloat32_t, float,\n+\t\t z0 = svadd_n_f32_z (p0, z0, d4),\n+\t\t z0 = svadd_z (p0, z0, d4))\n+\n+/*\n+** add_s4_f32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), s4\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_s4_f32_z_untied, svfloat32_t, float,\n+\t\t z0 = svadd_n_f32_z (p0, z1, d4),\n+\t\t z0 = svadd_z (p0, z1, d4))\n+\n+/*\n+** add_1_f32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z0, 1),\n+\t\tz0 = svadd_z (p0, z0, 1))\n+\n+/*\n+** add_1_f32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f32_z_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z1, 1),\n+\t\tz0 = svadd_z (p0, z1, 1))\n+\n+/*\n+** add_0p5_f32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z0, 0.5),\n+\t\tz0 = svadd_z (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f32_z_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z1, 0.5),\n+\t\tz0 = svadd_z (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z0, -1),\n+\t\tz0 = svadd_z (p0, z0, -1))\n+\n+/*\n+** add_m1_f32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f32_z_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z1, -1),\n+\t\tz0 = svadd_z (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z0, -0.5),\n+\t\tz0 = svadd_z (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f32_z_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z1, -0.5),\n+\t\tz0 = svadd_z (p0, z1, -0.5))\n+\n+/*\n+** add_m2_f32_z:\n+**\tfmov\t(z[0-9]+\\.s), #-2\\.0(?:e\\+0)?\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_f32_z, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z0, -2),\n+\t\tz0 = svadd_z (p0, z0, -2))\n+\n+/*\n+** add_f32_x_tied1:\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_f32_x (p0, z0, z1),\n+\t\tz0 = svadd_x (p0, z0, z1))\n+\n+/*\n+** add_f32_x_tied2:\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_x_tied2, svfloat32_t,\n+\t\tz0 = svadd_f32_x (p0, z1, z0),\n+\t\tz0 = svadd_x (p0, z1, z0))\n+\n+/*\n+** add_f32_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+** |\n+**\tmovprfx\tz0, z2\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_f32_x (p0, z1, z2),\n+\t\tz0 = svadd_x (p0, z1, z2))\n+\n+/*\n+** add_s4_f32_x_tied1:\n+**\tmov\t(z[0-9]+\\.s), s4\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_s4_f32_x_tied1, svfloat32_t, float,\n+\t\t z0 = svadd_n_f32_x (p0, z0, d4),\n+\t\t z0 = svadd_x (p0, z0, d4))\n+\n+/*\n+** add_s4_f32_x_untied:\n+**\tmov\tz0\\.s, s4\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_s4_f32_x_untied, svfloat32_t, float,\n+\t\t z0 = svadd_n_f32_x (p0, z1, d4),\n+\t\t z0 = svadd_x (p0, z1, d4))\n+\n+/*\n+** add_1_f32_x_tied1:\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z0, 1),\n+\t\tz0 = svadd_x (p0, z0, 1))\n+\n+/*\n+** add_1_f32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z1, 1),\n+\t\tz0 = svadd_x (p0, z1, 1))\n+\n+/*\n+** add_0p5_f32_x_tied1:\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z0, 0.5),\n+\t\tz0 = svadd_x (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z1, 0.5),\n+\t\tz0 = svadd_x (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f32_x_tied1:\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z0, -1),\n+\t\tz0 = svadd_x (p0, z0, -1))\n+\n+/*\n+** add_m1_f32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z1, -1),\n+\t\tz0 = svadd_x (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f32_x_tied1:\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z0, -0.5),\n+\t\tz0 = svadd_x (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z1, -0.5),\n+\t\tz0 = svadd_x (p0, z1, -0.5))\n+\n+/*\n+** add_2_f32_x_tied1:\n+**\tfmov\t(z[0-9]+\\.s), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_2_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z0, 2),\n+\t\tz0 = svadd_x (p0, z0, 2))\n+\n+/*\n+** add_2_f32_x_untied:\n+**\tfmov\tz0\\.s, #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_2_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z1, 2),\n+\t\tz0 = svadd_x (p0, z1, 2))\n+\n+/*\n+** ptrue_add_f32_x_tied1:\n+**\tfadd\tz0\\.s, (z0\\.s, z1\\.s|z1\\.s, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_f32_x (svptrue_b32 (), z0, z1),\n+\t\tz0 = svadd_x (svptrue_b32 (), z0, z1))\n+\n+/*\n+** ptrue_add_f32_x_tied2:\n+**\tfadd\tz0\\.s, (z0\\.s, z1\\.s|z1\\.s, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f32_x_tied2, svfloat32_t,\n+\t\tz0 = svadd_f32_x (svptrue_b32 (), z1, z0),\n+\t\tz0 = svadd_x (svptrue_b32 (), z1, z0))\n+\n+/*\n+** ptrue_add_f32_x_untied:\n+**\tfadd\tz0\\.s, (z1\\.s, z2\\.s|z2\\.s, z1\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_f32_x (svptrue_b32 (), z1, z2),\n+\t\tz0 = svadd_x (svptrue_b32 (), z1, z2))\n+\n+/*\n+** ptrue_add_1_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_1_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z0, 1),\n+\t\tz0 = svadd_x (svptrue_b32 (), z0, 1))\n+\n+/*\n+** ptrue_add_1_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_1_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z1, 1),\n+\t\tz0 = svadd_x (svptrue_b32 (), z1, 1))\n+\n+/*\n+** ptrue_add_0p5_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_0p5_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z0, 0.5),\n+\t\tz0 = svadd_x (svptrue_b32 (), z0, 0.5))\n+\n+/*\n+** ptrue_add_0p5_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_0p5_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z1, 0.5),\n+\t\tz0 = svadd_x (svptrue_b32 (), z1, 0.5))\n+\n+/*\n+** ptrue_add_m1_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m1_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z0, -1),\n+\t\tz0 = svadd_x (svptrue_b32 (), z0, -1))\n+\n+/*\n+** ptrue_add_m1_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m1_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z1, -1),\n+\t\tz0 = svadd_x (svptrue_b32 (), z1, -1))\n+\n+/*\n+** ptrue_add_m0p5_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m0p5_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z0, -0.5),\n+\t\tz0 = svadd_x (svptrue_b32 (), z0, -0.5))\n+\n+/*\n+** ptrue_add_m0p5_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m0p5_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z1, -0.5),\n+\t\tz0 = svadd_x (svptrue_b32 (), z1, -0.5))\n+\n+/*\n+** ptrue_add_2_f32_x_tied1:\n+**\tfmov\t(z[0-9]+\\.s), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_2_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z0, 2),\n+\t\tz0 = svadd_x (svptrue_b32 (), z0, 2))\n+\n+/*\n+** ptrue_add_2_f32_x_untied:\n+**\tfmov\t(z[0-9]+\\.s), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.s, (z1\\.s, \\1|\\1, z1\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_2_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z1, 2),\n+\t\tz0 = svadd_x (svptrue_b32 (), z1, 2))"}, {"sha": "062e5fd672d983691cad60332965280848cae0bd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/add_f32_notrap.c", "status": "added", "additions": 572, "deletions": 0, "changes": 572, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f32_notrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f32_notrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f32_notrap.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,572 @@\n+/* { dg-additional-options \"-fno-trapping-math\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** add_f32_m_tied1:\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_m_tied1, svfloat32_t,\n+\t\tz0 = svadd_f32_m (p0, z0, z1),\n+\t\tz0 = svadd_m (p0, z0, z1))\n+\n+/*\n+** add_f32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_m_tied2, svfloat32_t,\n+\t\tz0 = svadd_f32_m (p0, z1, z0),\n+\t\tz0 = svadd_m (p0, z1, z0))\n+\n+/*\n+** add_f32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_m_untied, svfloat32_t,\n+\t\tz0 = svadd_f32_m (p0, z1, z2),\n+\t\tz0 = svadd_m (p0, z1, z2))\n+\n+/*\n+** add_s4_f32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), s4\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_s4_f32_m_tied1, svfloat32_t, float,\n+\t\t z0 = svadd_n_f32_m (p0, z0, d4),\n+\t\t z0 = svadd_m (p0, z0, d4))\n+\n+/*\n+** add_s4_f32_m_untied:\n+**\tmov\t(z[0-9]+\\.s), s4\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_s4_f32_m_untied, svfloat32_t, float,\n+\t\t z0 = svadd_n_f32_m (p0, z1, d4),\n+\t\t z0 = svadd_m (p0, z1, d4))\n+\n+/*\n+** add_1_f32_m_tied1:\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f32_m_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z0, 1),\n+\t\tz0 = svadd_m (p0, z0, 1))\n+\n+/*\n+** add_1_f32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f32_m_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z1, 1),\n+\t\tz0 = svadd_m (p0, z1, 1))\n+\n+/*\n+** add_0p5_f32_m_tied1:\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f32_m_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z0, 0.5),\n+\t\tz0 = svadd_m (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f32_m_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z1, 0.5),\n+\t\tz0 = svadd_m (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f32_m_tied1:\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f32_m_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z0, -1),\n+\t\tz0 = svadd_m (p0, z0, -1))\n+\n+/*\n+** add_m1_f32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f32_m_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z1, -1),\n+\t\tz0 = svadd_m (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f32_m_tied1:\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f32_m_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z0, -0.5),\n+\t\tz0 = svadd_m (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f32_m_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z1, -0.5),\n+\t\tz0 = svadd_m (p0, z1, -0.5))\n+\n+/*\n+** add_m2_f32_m:\n+**\tfmov\t(z[0-9]+\\.s), #-2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_f32_m, svfloat32_t,\n+\t\tz0 = svadd_n_f32_m (p0, z0, -2),\n+\t\tz0 = svadd_m (p0, z0, -2))\n+\n+/*\n+** add_f32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svadd_f32_z (p0, z0, z1),\n+\t\tz0 = svadd_z (p0, z0, z1))\n+\n+/*\n+** add_f32_z_tied2:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_z_tied2, svfloat32_t,\n+\t\tz0 = svadd_f32_z (p0, z1, z0),\n+\t\tz0 = svadd_z (p0, z1, z0))\n+\n+/*\n+** add_f32_z_untied:\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, z2\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_z_untied, svfloat32_t,\n+\t\tz0 = svadd_f32_z (p0, z1, z2),\n+\t\tz0 = svadd_z (p0, z1, z2))\n+\n+/*\n+** add_s4_f32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), s4\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_s4_f32_z_tied1, svfloat32_t, float,\n+\t\t z0 = svadd_n_f32_z (p0, z0, d4),\n+\t\t z0 = svadd_z (p0, z0, d4))\n+\n+/*\n+** add_s4_f32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), s4\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_s4_f32_z_untied, svfloat32_t, float,\n+\t\t z0 = svadd_n_f32_z (p0, z1, d4),\n+\t\t z0 = svadd_z (p0, z1, d4))\n+\n+/*\n+** add_1_f32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z0, 1),\n+\t\tz0 = svadd_z (p0, z0, 1))\n+\n+/*\n+** add_1_f32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f32_z_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z1, 1),\n+\t\tz0 = svadd_z (p0, z1, 1))\n+\n+/*\n+** add_0p5_f32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z0, 0.5),\n+\t\tz0 = svadd_z (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f32_z_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z1, 0.5),\n+\t\tz0 = svadd_z (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z0, -1),\n+\t\tz0 = svadd_z (p0, z0, -1))\n+\n+/*\n+** add_m1_f32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f32_z_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z1, -1),\n+\t\tz0 = svadd_z (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f32_z_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z0, -0.5),\n+\t\tz0 = svadd_z (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f32_z_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z1, -0.5),\n+\t\tz0 = svadd_z (p0, z1, -0.5))\n+\n+/*\n+** add_m2_f32_z:\n+**\tfmov\t(z[0-9]+\\.s), #-2\\.0(?:e\\+0)?\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_f32_z, svfloat32_t,\n+\t\tz0 = svadd_n_f32_z (p0, z0, -2),\n+\t\tz0 = svadd_z (p0, z0, -2))\n+\n+/*\n+** add_f32_x_tied1:\n+**\tfadd\tz0\\.s, (z0\\.s, z1\\.s|z1\\.s, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_f32_x (p0, z0, z1),\n+\t\tz0 = svadd_x (p0, z0, z1))\n+\n+/*\n+** add_f32_x_tied2:\n+**\tfadd\tz0\\.s, (z0\\.s, z1\\.s|z1\\.s, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_x_tied2, svfloat32_t,\n+\t\tz0 = svadd_f32_x (p0, z1, z0),\n+\t\tz0 = svadd_x (p0, z1, z0))\n+\n+/*\n+** add_f32_x_untied:\n+**\tfadd\tz0\\.s, (z1\\.s, z2\\.s|z2\\.s, z1\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_f32_x (p0, z1, z2),\n+\t\tz0 = svadd_x (p0, z1, z2))\n+\n+/*\n+** add_s4_f32_x_tied1:\n+**\tmov\t(z[0-9]+\\.s), s4\n+**\tfadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_s4_f32_x_tied1, svfloat32_t, float,\n+\t\t z0 = svadd_n_f32_x (p0, z0, d4),\n+\t\t z0 = svadd_x (p0, z0, d4))\n+\n+/*\n+** add_s4_f32_x_untied:\n+**\tmov\t(z[0-9]+\\.s), s4\n+**\tfadd\tz0\\.s, (z1\\.s, \\1|\\1, z1\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_s4_f32_x_untied, svfloat32_t, float,\n+\t\t z0 = svadd_n_f32_x (p0, z1, d4),\n+\t\t z0 = svadd_x (p0, z1, d4))\n+\n+/*\n+** add_1_f32_x_tied1:\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z0, 1),\n+\t\tz0 = svadd_x (p0, z0, 1))\n+\n+/*\n+** add_1_f32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z1, 1),\n+\t\tz0 = svadd_x (p0, z1, 1))\n+\n+/*\n+** add_0p5_f32_x_tied1:\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z0, 0.5),\n+\t\tz0 = svadd_x (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z1, 0.5),\n+\t\tz0 = svadd_x (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f32_x_tied1:\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z0, -1),\n+\t\tz0 = svadd_x (p0, z0, -1))\n+\n+/*\n+** add_m1_f32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z1, -1),\n+\t\tz0 = svadd_x (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f32_x_tied1:\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z0, -0.5),\n+\t\tz0 = svadd_x (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.s, p0/m, z0\\.s, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z1, -0.5),\n+\t\tz0 = svadd_x (p0, z1, -0.5))\n+\n+/*\n+** add_2_f32_x_tied1:\n+**\tfmov\t(z[0-9]+\\.s), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_2_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z0, 2),\n+\t\tz0 = svadd_x (p0, z0, 2))\n+\n+/*\n+** add_2_f32_x_untied:\n+**\tfmov\t(z[0-9]+\\.s), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.s, (z1\\.s, \\1|\\1, z1\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_2_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (p0, z1, 2),\n+\t\tz0 = svadd_x (p0, z1, 2))\n+\n+/*\n+** ptrue_add_f32_x_tied1:\n+**\tfadd\tz0\\.s, (z0\\.s, z1\\.s|z1\\.s, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_f32_x (svptrue_b32 (), z0, z1),\n+\t\tz0 = svadd_x (svptrue_b32 (), z0, z1))\n+\n+/*\n+** ptrue_add_f32_x_tied2:\n+**\tfadd\tz0\\.s, (z0\\.s, z1\\.s|z1\\.s, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f32_x_tied2, svfloat32_t,\n+\t\tz0 = svadd_f32_x (svptrue_b32 (), z1, z0),\n+\t\tz0 = svadd_x (svptrue_b32 (), z1, z0))\n+\n+/*\n+** ptrue_add_f32_x_untied:\n+**\tfadd\tz0\\.s, (z1\\.s, z2\\.s|z2\\.s, z1\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_f32_x (svptrue_b32 (), z1, z2),\n+\t\tz0 = svadd_x (svptrue_b32 (), z1, z2))\n+\n+/*\n+** ptrue_add_1_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_1_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z0, 1),\n+\t\tz0 = svadd_x (svptrue_b32 (), z0, 1))\n+\n+/*\n+** ptrue_add_1_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_1_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z1, 1),\n+\t\tz0 = svadd_x (svptrue_b32 (), z1, 1))\n+\n+/*\n+** ptrue_add_0p5_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_0p5_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z0, 0.5),\n+\t\tz0 = svadd_x (svptrue_b32 (), z0, 0.5))\n+\n+/*\n+** ptrue_add_0p5_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_0p5_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z1, 0.5),\n+\t\tz0 = svadd_x (svptrue_b32 (), z1, 0.5))\n+\n+/*\n+** ptrue_add_m1_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m1_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z0, -1),\n+\t\tz0 = svadd_x (svptrue_b32 (), z0, -1))\n+\n+/*\n+** ptrue_add_m1_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m1_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z1, -1),\n+\t\tz0 = svadd_x (svptrue_b32 (), z1, -1))\n+\n+/*\n+** ptrue_add_m0p5_f32_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m0p5_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z0, -0.5),\n+\t\tz0 = svadd_x (svptrue_b32 (), z0, -0.5))\n+\n+/*\n+** ptrue_add_m0p5_f32_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m0p5_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z1, -0.5),\n+\t\tz0 = svadd_x (svptrue_b32 (), z1, -0.5))\n+\n+/*\n+** ptrue_add_2_f32_x_tied1:\n+**\tfmov\t(z[0-9]+\\.s), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_2_f32_x_tied1, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z0, 2),\n+\t\tz0 = svadd_x (svptrue_b32 (), z0, 2))\n+\n+/*\n+** ptrue_add_2_f32_x_untied:\n+**\tfmov\t(z[0-9]+\\.s), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.s, (z1\\.s, \\1|\\1, z1\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_2_f32_x_untied, svfloat32_t,\n+\t\tz0 = svadd_n_f32_x (svptrue_b32 (), z1, 2),\n+\t\tz0 = svadd_x (svptrue_b32 (), z1, 2))"}, {"sha": "7185f3acf1e9518dba67be0ba78b9868fa4c1d69", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/add_f64.c", "status": "added", "additions": 577, "deletions": 0, "changes": 577, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,577 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** add_f64_m_tied1:\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_m_tied1, svfloat64_t,\n+\t\tz0 = svadd_f64_m (p0, z0, z1),\n+\t\tz0 = svadd_m (p0, z0, z1))\n+\n+/*\n+** add_f64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_m_tied2, svfloat64_t,\n+\t\tz0 = svadd_f64_m (p0, z1, z0),\n+\t\tz0 = svadd_m (p0, z1, z0))\n+\n+/*\n+** add_f64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_m_untied, svfloat64_t,\n+\t\tz0 = svadd_f64_m (p0, z1, z2),\n+\t\tz0 = svadd_m (p0, z1, z2))\n+\n+/*\n+** add_d4_f64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), d4\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_d4_f64_m_tied1, svfloat64_t, double,\n+\t\t z0 = svadd_n_f64_m (p0, z0, d4),\n+\t\t z0 = svadd_m (p0, z0, d4))\n+\n+/*\n+** add_d4_f64_m_untied:\n+**\tmov\t(z[0-9]+\\.d), d4\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_d4_f64_m_untied, svfloat64_t, double,\n+\t\t z0 = svadd_n_f64_m (p0, z1, d4),\n+\t\t z0 = svadd_m (p0, z1, d4))\n+\n+/*\n+** add_1_f64_m_tied1:\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f64_m_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z0, 1),\n+\t\tz0 = svadd_m (p0, z0, 1))\n+\n+/*\n+** add_1_f64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f64_m_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z1, 1),\n+\t\tz0 = svadd_m (p0, z1, 1))\n+\n+/*\n+** add_0p5_f64_m_tied1:\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f64_m_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z0, 0.5),\n+\t\tz0 = svadd_m (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f64_m_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z1, 0.5),\n+\t\tz0 = svadd_m (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f64_m_tied1:\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f64_m_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z0, -1),\n+\t\tz0 = svadd_m (p0, z0, -1))\n+\n+/*\n+** add_m1_f64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f64_m_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z1, -1),\n+\t\tz0 = svadd_m (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f64_m_tied1:\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f64_m_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z0, -0.5),\n+\t\tz0 = svadd_m (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f64_m_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z1, -0.5),\n+\t\tz0 = svadd_m (p0, z1, -0.5))\n+\n+/*\n+** add_m2_f64_m:\n+**\tfmov\t(z[0-9]+\\.d), #-2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_f64_m, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z0, -2),\n+\t\tz0 = svadd_m (p0, z0, -2))\n+\n+/*\n+** add_f64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svadd_f64_z (p0, z0, z1),\n+\t\tz0 = svadd_z (p0, z0, z1))\n+\n+/*\n+** add_f64_z_tied2:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_z_tied2, svfloat64_t,\n+\t\tz0 = svadd_f64_z (p0, z1, z0),\n+\t\tz0 = svadd_z (p0, z1, z0))\n+\n+/*\n+** add_f64_z_untied:\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, z2\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_z_untied, svfloat64_t,\n+\t\tz0 = svadd_f64_z (p0, z1, z2),\n+\t\tz0 = svadd_z (p0, z1, z2))\n+\n+/*\n+** add_d4_f64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), d4\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_d4_f64_z_tied1, svfloat64_t, double,\n+\t\t z0 = svadd_n_f64_z (p0, z0, d4),\n+\t\t z0 = svadd_z (p0, z0, d4))\n+\n+/*\n+** add_d4_f64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), d4\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_d4_f64_z_untied, svfloat64_t, double,\n+\t\t z0 = svadd_n_f64_z (p0, z1, d4),\n+\t\t z0 = svadd_z (p0, z1, d4))\n+\n+/*\n+** add_1_f64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z0, 1),\n+\t\tz0 = svadd_z (p0, z0, 1))\n+\n+/*\n+** add_1_f64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f64_z_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z1, 1),\n+\t\tz0 = svadd_z (p0, z1, 1))\n+\n+/*\n+** add_0p5_f64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z0, 0.5),\n+\t\tz0 = svadd_z (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f64_z_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z1, 0.5),\n+\t\tz0 = svadd_z (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z0, -1),\n+\t\tz0 = svadd_z (p0, z0, -1))\n+\n+/*\n+** add_m1_f64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f64_z_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z1, -1),\n+\t\tz0 = svadd_z (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z0, -0.5),\n+\t\tz0 = svadd_z (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f64_z_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z1, -0.5),\n+\t\tz0 = svadd_z (p0, z1, -0.5))\n+\n+/*\n+** add_m2_f64_z:\n+**\tfmov\t(z[0-9]+\\.d), #-2\\.0(?:e\\+0)?\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_f64_z, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z0, -2),\n+\t\tz0 = svadd_z (p0, z0, -2))\n+\n+/*\n+** add_f64_x_tied1:\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_f64_x (p0, z0, z1),\n+\t\tz0 = svadd_x (p0, z0, z1))\n+\n+/*\n+** add_f64_x_tied2:\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_x_tied2, svfloat64_t,\n+\t\tz0 = svadd_f64_x (p0, z1, z0),\n+\t\tz0 = svadd_x (p0, z1, z0))\n+\n+/*\n+** add_f64_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+** |\n+**\tmovprfx\tz0, z2\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_f64_x (p0, z1, z2),\n+\t\tz0 = svadd_x (p0, z1, z2))\n+\n+/*\n+** add_d4_f64_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), d4\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_d4_f64_x_tied1, svfloat64_t, double,\n+\t\t z0 = svadd_n_f64_x (p0, z0, d4),\n+\t\t z0 = svadd_x (p0, z0, d4))\n+\n+/*\n+** add_d4_f64_x_untied:\n+**\tmov\tz0\\.d, d4\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_d4_f64_x_untied, svfloat64_t, double,\n+\t\t z0 = svadd_n_f64_x (p0, z1, d4),\n+\t\t z0 = svadd_x (p0, z1, d4))\n+\n+/*\n+** add_1_f64_x_tied1:\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z0, 1),\n+\t\tz0 = svadd_x (p0, z0, 1))\n+\n+/*\n+** add_1_f64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z1, 1),\n+\t\tz0 = svadd_x (p0, z1, 1))\n+\n+/*\n+** add_0p5_f64_x_tied1:\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z0, 0.5),\n+\t\tz0 = svadd_x (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z1, 0.5),\n+\t\tz0 = svadd_x (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f64_x_tied1:\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z0, -1),\n+\t\tz0 = svadd_x (p0, z0, -1))\n+\n+/*\n+** add_m1_f64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z1, -1),\n+\t\tz0 = svadd_x (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f64_x_tied1:\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z0, -0.5),\n+\t\tz0 = svadd_x (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z1, -0.5),\n+\t\tz0 = svadd_x (p0, z1, -0.5))\n+\n+/*\n+** add_2_f64_x_tied1:\n+**\tfmov\t(z[0-9]+\\.d), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_2_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z0, 2),\n+\t\tz0 = svadd_x (p0, z0, 2))\n+\n+/*\n+** add_2_f64_x_untied:\n+**\tfmov\tz0\\.d, #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_2_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z1, 2),\n+\t\tz0 = svadd_x (p0, z1, 2))\n+\n+/*\n+** ptrue_add_f64_x_tied1:\n+**\tfadd\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_f64_x (svptrue_b64 (), z0, z1),\n+\t\tz0 = svadd_x (svptrue_b64 (), z0, z1))\n+\n+/*\n+** ptrue_add_f64_x_tied2:\n+**\tfadd\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f64_x_tied2, svfloat64_t,\n+\t\tz0 = svadd_f64_x (svptrue_b64 (), z1, z0),\n+\t\tz0 = svadd_x (svptrue_b64 (), z1, z0))\n+\n+/*\n+** ptrue_add_f64_x_untied:\n+**\tfadd\tz0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_f64_x (svptrue_b64 (), z1, z2),\n+\t\tz0 = svadd_x (svptrue_b64 (), z1, z2))\n+\n+/*\n+** ptrue_add_1_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_1_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z0, 1),\n+\t\tz0 = svadd_x (svptrue_b64 (), z0, 1))\n+\n+/*\n+** ptrue_add_1_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_1_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z1, 1),\n+\t\tz0 = svadd_x (svptrue_b64 (), z1, 1))\n+\n+/*\n+** ptrue_add_0p5_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_0p5_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z0, 0.5),\n+\t\tz0 = svadd_x (svptrue_b64 (), z0, 0.5))\n+\n+/*\n+** ptrue_add_0p5_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_0p5_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z1, 0.5),\n+\t\tz0 = svadd_x (svptrue_b64 (), z1, 0.5))\n+\n+/*\n+** ptrue_add_m1_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m1_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z0, -1),\n+\t\tz0 = svadd_x (svptrue_b64 (), z0, -1))\n+\n+/*\n+** ptrue_add_m1_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m1_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z1, -1),\n+\t\tz0 = svadd_x (svptrue_b64 (), z1, -1))\n+\n+/*\n+** ptrue_add_m0p5_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m0p5_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z0, -0.5),\n+\t\tz0 = svadd_x (svptrue_b64 (), z0, -0.5))\n+\n+/*\n+** ptrue_add_m0p5_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m0p5_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z1, -0.5),\n+\t\tz0 = svadd_x (svptrue_b64 (), z1, -0.5))\n+\n+/*\n+** ptrue_add_2_f64_x_tied1:\n+**\tfmov\t(z[0-9]+\\.d), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_2_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z0, 2),\n+\t\tz0 = svadd_x (svptrue_b64 (), z0, 2))\n+\n+/*\n+** ptrue_add_2_f64_x_untied:\n+**\tfmov\t(z[0-9]+\\.d), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.d, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_2_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z1, 2),\n+\t\tz0 = svadd_x (svptrue_b64 (), z1, 2))"}, {"sha": "6d095b507d4f94981784fa60f501091a73be8b65", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/add_f64_notrap.c", "status": "added", "additions": 572, "deletions": 0, "changes": 572, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f64_notrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f64_notrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_f64_notrap.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,572 @@\n+/* { dg-additional-options \"-fno-trapping-math\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** add_f64_m_tied1:\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_m_tied1, svfloat64_t,\n+\t\tz0 = svadd_f64_m (p0, z0, z1),\n+\t\tz0 = svadd_m (p0, z0, z1))\n+\n+/*\n+** add_f64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_m_tied2, svfloat64_t,\n+\t\tz0 = svadd_f64_m (p0, z1, z0),\n+\t\tz0 = svadd_m (p0, z1, z0))\n+\n+/*\n+** add_f64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_m_untied, svfloat64_t,\n+\t\tz0 = svadd_f64_m (p0, z1, z2),\n+\t\tz0 = svadd_m (p0, z1, z2))\n+\n+/*\n+** add_d4_f64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), d4\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_d4_f64_m_tied1, svfloat64_t, double,\n+\t\t z0 = svadd_n_f64_m (p0, z0, d4),\n+\t\t z0 = svadd_m (p0, z0, d4))\n+\n+/*\n+** add_d4_f64_m_untied:\n+**\tmov\t(z[0-9]+\\.d), d4\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_d4_f64_m_untied, svfloat64_t, double,\n+\t\t z0 = svadd_n_f64_m (p0, z1, d4),\n+\t\t z0 = svadd_m (p0, z1, d4))\n+\n+/*\n+** add_1_f64_m_tied1:\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f64_m_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z0, 1),\n+\t\tz0 = svadd_m (p0, z0, 1))\n+\n+/*\n+** add_1_f64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f64_m_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z1, 1),\n+\t\tz0 = svadd_m (p0, z1, 1))\n+\n+/*\n+** add_0p5_f64_m_tied1:\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f64_m_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z0, 0.5),\n+\t\tz0 = svadd_m (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f64_m_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z1, 0.5),\n+\t\tz0 = svadd_m (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f64_m_tied1:\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f64_m_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z0, -1),\n+\t\tz0 = svadd_m (p0, z0, -1))\n+\n+/*\n+** add_m1_f64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f64_m_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z1, -1),\n+\t\tz0 = svadd_m (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f64_m_tied1:\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f64_m_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z0, -0.5),\n+\t\tz0 = svadd_m (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f64_m_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z1, -0.5),\n+\t\tz0 = svadd_m (p0, z1, -0.5))\n+\n+/*\n+** add_m2_f64_m:\n+**\tfmov\t(z[0-9]+\\.d), #-2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_f64_m, svfloat64_t,\n+\t\tz0 = svadd_n_f64_m (p0, z0, -2),\n+\t\tz0 = svadd_m (p0, z0, -2))\n+\n+/*\n+** add_f64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svadd_f64_z (p0, z0, z1),\n+\t\tz0 = svadd_z (p0, z0, z1))\n+\n+/*\n+** add_f64_z_tied2:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_z_tied2, svfloat64_t,\n+\t\tz0 = svadd_f64_z (p0, z1, z0),\n+\t\tz0 = svadd_z (p0, z1, z0))\n+\n+/*\n+** add_f64_z_untied:\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, z2\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_z_untied, svfloat64_t,\n+\t\tz0 = svadd_f64_z (p0, z1, z2),\n+\t\tz0 = svadd_z (p0, z1, z2))\n+\n+/*\n+** add_d4_f64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), d4\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_d4_f64_z_tied1, svfloat64_t, double,\n+\t\t z0 = svadd_n_f64_z (p0, z0, d4),\n+\t\t z0 = svadd_z (p0, z0, d4))\n+\n+/*\n+** add_d4_f64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), d4\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_d4_f64_z_untied, svfloat64_t, double,\n+\t\t z0 = svadd_n_f64_z (p0, z1, d4),\n+\t\t z0 = svadd_z (p0, z1, d4))\n+\n+/*\n+** add_1_f64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z0, 1),\n+\t\tz0 = svadd_z (p0, z0, 1))\n+\n+/*\n+** add_1_f64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f64_z_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z1, 1),\n+\t\tz0 = svadd_z (p0, z1, 1))\n+\n+/*\n+** add_0p5_f64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z0, 0.5),\n+\t\tz0 = svadd_z (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f64_z_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z1, 0.5),\n+\t\tz0 = svadd_z (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z0, -1),\n+\t\tz0 = svadd_z (p0, z0, -1))\n+\n+/*\n+** add_m1_f64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f64_z_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z1, -1),\n+\t\tz0 = svadd_z (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f64_z_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z0, -0.5),\n+\t\tz0 = svadd_z (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f64_z_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z1, -0.5),\n+\t\tz0 = svadd_z (p0, z1, -0.5))\n+\n+/*\n+** add_m2_f64_z:\n+**\tfmov\t(z[0-9]+\\.d), #-2\\.0(?:e\\+0)?\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_f64_z, svfloat64_t,\n+\t\tz0 = svadd_n_f64_z (p0, z0, -2),\n+\t\tz0 = svadd_z (p0, z0, -2))\n+\n+/*\n+** add_f64_x_tied1:\n+**\tfadd\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_f64_x (p0, z0, z1),\n+\t\tz0 = svadd_x (p0, z0, z1))\n+\n+/*\n+** add_f64_x_tied2:\n+**\tfadd\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_x_tied2, svfloat64_t,\n+\t\tz0 = svadd_f64_x (p0, z1, z0),\n+\t\tz0 = svadd_x (p0, z1, z0))\n+\n+/*\n+** add_f64_x_untied:\n+**\tfadd\tz0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_f64_x (p0, z1, z2),\n+\t\tz0 = svadd_x (p0, z1, z2))\n+\n+/*\n+** add_d4_f64_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), d4\n+**\tfadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_d4_f64_x_tied1, svfloat64_t, double,\n+\t\t z0 = svadd_n_f64_x (p0, z0, d4),\n+\t\t z0 = svadd_x (p0, z0, d4))\n+\n+/*\n+** add_d4_f64_x_untied:\n+**\tmov\t(z[0-9]+\\.d), d4\n+**\tfadd\tz0\\.d, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZD (add_d4_f64_x_untied, svfloat64_t, double,\n+\t\t z0 = svadd_n_f64_x (p0, z1, d4),\n+\t\t z0 = svadd_x (p0, z1, d4))\n+\n+/*\n+** add_1_f64_x_tied1:\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z0, 1),\n+\t\tz0 = svadd_x (p0, z0, 1))\n+\n+/*\n+** add_1_f64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z1, 1),\n+\t\tz0 = svadd_x (p0, z1, 1))\n+\n+/*\n+** add_0p5_f64_x_tied1:\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z0, 0.5),\n+\t\tz0 = svadd_x (p0, z0, 0.5))\n+\n+/*\n+** add_0p5_f64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfadd\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_0p5_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z1, 0.5),\n+\t\tz0 = svadd_x (p0, z1, 0.5))\n+\n+/*\n+** add_m1_f64_x_tied1:\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z0, -1),\n+\t\tz0 = svadd_x (p0, z0, -1))\n+\n+/*\n+** add_m1_f64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #1\\.0\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z1, -1),\n+\t\tz0 = svadd_x (p0, z1, -1))\n+\n+/*\n+** add_m0p5_f64_x_tied1:\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z0, -0.5),\n+\t\tz0 = svadd_x (p0, z0, -0.5))\n+\n+/*\n+** add_m0p5_f64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tfsub\tz0\\.d, p0/m, z0\\.d, #0\\.5\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m0p5_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z1, -0.5),\n+\t\tz0 = svadd_x (p0, z1, -0.5))\n+\n+/*\n+** add_2_f64_x_tied1:\n+**\tfmov\t(z[0-9]+\\.d), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_2_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z0, 2),\n+\t\tz0 = svadd_x (p0, z0, 2))\n+\n+/*\n+** add_2_f64_x_untied:\n+**\tfmov\t(z[0-9]+\\.d), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.d, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_2_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (p0, z1, 2),\n+\t\tz0 = svadd_x (p0, z1, 2))\n+\n+/*\n+** ptrue_add_f64_x_tied1:\n+**\tfadd\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_f64_x (svptrue_b64 (), z0, z1),\n+\t\tz0 = svadd_x (svptrue_b64 (), z0, z1))\n+\n+/*\n+** ptrue_add_f64_x_tied2:\n+**\tfadd\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f64_x_tied2, svfloat64_t,\n+\t\tz0 = svadd_f64_x (svptrue_b64 (), z1, z0),\n+\t\tz0 = svadd_x (svptrue_b64 (), z1, z0))\n+\n+/*\n+** ptrue_add_f64_x_untied:\n+**\tfadd\tz0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_f64_x (svptrue_b64 (), z1, z2),\n+\t\tz0 = svadd_x (svptrue_b64 (), z1, z2))\n+\n+/*\n+** ptrue_add_1_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_1_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z0, 1),\n+\t\tz0 = svadd_x (svptrue_b64 (), z0, 1))\n+\n+/*\n+** ptrue_add_1_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_1_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z1, 1),\n+\t\tz0 = svadd_x (svptrue_b64 (), z1, 1))\n+\n+/*\n+** ptrue_add_0p5_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_0p5_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z0, 0.5),\n+\t\tz0 = svadd_x (svptrue_b64 (), z0, 0.5))\n+\n+/*\n+** ptrue_add_0p5_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_0p5_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z1, 0.5),\n+\t\tz0 = svadd_x (svptrue_b64 (), z1, 0.5))\n+\n+/*\n+** ptrue_add_m1_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m1_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z0, -1),\n+\t\tz0 = svadd_x (svptrue_b64 (), z0, -1))\n+\n+/*\n+** ptrue_add_m1_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m1_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z1, -1),\n+\t\tz0 = svadd_x (svptrue_b64 (), z1, -1))\n+\n+/*\n+** ptrue_add_m0p5_f64_x_tied1:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m0p5_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z0, -0.5),\n+\t\tz0 = svadd_x (svptrue_b64 (), z0, -0.5))\n+\n+/*\n+** ptrue_add_m0p5_f64_x_untied:\n+**\t...\n+**\tptrue\tp[0-9]+\\.b[^\\n]*\n+**\t...\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_m0p5_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z1, -0.5),\n+\t\tz0 = svadd_x (svptrue_b64 (), z1, -0.5))\n+\n+/*\n+** ptrue_add_2_f64_x_tied1:\n+**\tfmov\t(z[0-9]+\\.d), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_2_f64_x_tied1, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z0, 2),\n+\t\tz0 = svadd_x (svptrue_b64 (), z0, 2))\n+\n+/*\n+** ptrue_add_2_f64_x_untied:\n+**\tfmov\t(z[0-9]+\\.d), #2\\.0(?:e\\+0)?\n+**\tfadd\tz0\\.d, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (ptrue_add_2_f64_x_untied, svfloat64_t,\n+\t\tz0 = svadd_n_f64_x (svptrue_b64 (), z1, 2),\n+\t\tz0 = svadd_x (svptrue_b64 (), z1, 2))"}, {"sha": "c0883edf9ab4eedf5dca5104e1443b614397cad5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/add_s16.c", "status": "added", "additions": 377, "deletions": 0, "changes": 377, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,377 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** add_s16_m_tied1:\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s16_m_tied1, svint16_t,\n+\t\tz0 = svadd_s16_m (p0, z0, z1),\n+\t\tz0 = svadd_m (p0, z0, z1))\n+\n+/*\n+** add_s16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s16_m_tied2, svint16_t,\n+\t\tz0 = svadd_s16_m (p0, z1, z0),\n+\t\tz0 = svadd_m (p0, z1, z0))\n+\n+/*\n+** add_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s16_m_untied, svint16_t,\n+\t\tz0 = svadd_s16_m (p0, z1, z2),\n+\t\tz0 = svadd_m (p0, z1, z2))\n+\n+/*\n+** add_w0_s16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s16_m_tied1, svint16_t, int16_t,\n+\t\t z0 = svadd_n_s16_m (p0, z0, x0),\n+\t\t z0 = svadd_m (p0, z0, x0))\n+\n+/*\n+** add_w0_s16_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s16_m_untied, svint16_t, int16_t,\n+\t\t z0 = svadd_n_s16_m (p0, z1, x0),\n+\t\t z0 = svadd_m (p0, z1, x0))\n+\n+/*\n+** add_1_s16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s16_m_tied1, svint16_t,\n+\t\tz0 = svadd_n_s16_m (p0, z0, 1),\n+\t\tz0 = svadd_m (p0, z0, 1))\n+\n+/*\n+** add_1_s16_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s16_m_untied, svint16_t,\n+\t\tz0 = svadd_n_s16_m (p0, z1, 1),\n+\t\tz0 = svadd_m (p0, z1, 1))\n+\n+/*\n+** add_m2_s16_m:\n+**\tmov\t(z[0-9]+\\.h), #-2\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_s16_m, svint16_t,\n+\t\tz0 = svadd_n_s16_m (p0, z0, -2),\n+\t\tz0 = svadd_m (p0, z0, -2))\n+\n+/*\n+** add_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s16_z_tied1, svint16_t,\n+\t\tz0 = svadd_s16_z (p0, z0, z1),\n+\t\tz0 = svadd_z (p0, z0, z1))\n+\n+/*\n+** add_s16_z_tied2:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s16_z_tied2, svint16_t,\n+\t\tz0 = svadd_s16_z (p0, z1, z0),\n+\t\tz0 = svadd_z (p0, z1, z0))\n+\n+/*\n+** add_s16_z_untied:\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, z2\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s16_z_untied, svint16_t,\n+\t\tz0 = svadd_s16_z (p0, z1, z2),\n+\t\tz0 = svadd_z (p0, z1, z2))\n+\n+/*\n+** add_w0_s16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s16_z_tied1, svint16_t, int16_t,\n+\t\t z0 = svadd_n_s16_z (p0, z0, x0),\n+\t\t z0 = svadd_z (p0, z0, x0))\n+\n+/*\n+** add_w0_s16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s16_z_untied, svint16_t, int16_t,\n+\t\t z0 = svadd_n_s16_z (p0, z1, x0),\n+\t\t z0 = svadd_z (p0, z1, x0))\n+\n+/*\n+** add_1_s16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s16_z_tied1, svint16_t,\n+\t\tz0 = svadd_n_s16_z (p0, z0, 1),\n+\t\tz0 = svadd_z (p0, z0, 1))\n+\n+/*\n+** add_1_s16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), #1\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s16_z_untied, svint16_t,\n+\t\tz0 = svadd_n_s16_z (p0, z1, 1),\n+\t\tz0 = svadd_z (p0, z1, 1))\n+\n+/*\n+** add_s16_x_tied1:\n+**\tadd\tz0\\.h, (z0\\.h, z1\\.h|z1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s16_x_tied1, svint16_t,\n+\t\tz0 = svadd_s16_x (p0, z0, z1),\n+\t\tz0 = svadd_x (p0, z0, z1))\n+\n+/*\n+** add_s16_x_tied2:\n+**\tadd\tz0\\.h, (z0\\.h, z1\\.h|z1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s16_x_tied2, svint16_t,\n+\t\tz0 = svadd_s16_x (p0, z1, z0),\n+\t\tz0 = svadd_x (p0, z1, z0))\n+\n+/*\n+** add_s16_x_untied:\n+**\tadd\tz0\\.h, (z1\\.h, z2\\.h|z2\\.h, z1\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s16_x_untied, svint16_t,\n+\t\tz0 = svadd_s16_x (p0, z1, z2),\n+\t\tz0 = svadd_x (p0, z1, z2))\n+\n+/*\n+** add_w0_s16_x_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tadd\tz0\\.h, (z0\\.h, \\1|\\1, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s16_x_tied1, svint16_t, int16_t,\n+\t\t z0 = svadd_n_s16_x (p0, z0, x0),\n+\t\t z0 = svadd_x (p0, z0, x0))\n+\n+/*\n+** add_w0_s16_x_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tadd\tz0\\.h, (z1\\.h, \\1|\\1, z1\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s16_x_untied, svint16_t, int16_t,\n+\t\t z0 = svadd_n_s16_x (p0, z1, x0),\n+\t\t z0 = svadd_x (p0, z1, x0))\n+\n+/*\n+** add_1_s16_x_tied1:\n+**\tadd\tz0\\.h, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s16_x_tied1, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, 1),\n+\t\tz0 = svadd_x (p0, z0, 1))\n+\n+/*\n+** add_1_s16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.h, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s16_x_untied, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z1, 1),\n+\t\tz0 = svadd_x (p0, z1, 1))\n+\n+/*\n+** add_127_s16_x:\n+**\tadd\tz0\\.h, z0\\.h, #127\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_127_s16_x, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, 127),\n+\t\tz0 = svadd_x (p0, z0, 127))\n+\n+/*\n+** add_128_s16_x:\n+**\tadd\tz0\\.h, z0\\.h, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_128_s16_x, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, 128),\n+\t\tz0 = svadd_x (p0, z0, 128))\n+\n+/*\n+** add_255_s16_x:\n+**\tadd\tz0\\.h, z0\\.h, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_255_s16_x, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, 255),\n+\t\tz0 = svadd_x (p0, z0, 255))\n+\n+/*\n+** add_256_s16_x:\n+**\tadd\tz0\\.h, z0\\.h, #256\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_256_s16_x, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, 256),\n+\t\tz0 = svadd_x (p0, z0, 256))\n+\n+/*\n+** add_257_s16_x:\n+**\tmov\t(z[0-9]+)\\.b, #1\n+**\tadd\tz0\\.h, (z0\\.h, \\1\\.h|\\1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_257_s16_x, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, 257),\n+\t\tz0 = svadd_x (p0, z0, 257))\n+\n+/*\n+** add_512_s16_x:\n+**\tadd\tz0\\.h, z0\\.h, #512\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_512_s16_x, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, 512),\n+\t\tz0 = svadd_x (p0, z0, 512))\n+\n+/*\n+** add_65280_s16_x:\n+**\tadd\tz0\\.h, z0\\.h, #65280\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_65280_s16_x, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, 0xff00),\n+\t\tz0 = svadd_x (p0, z0, 0xff00))\n+\n+/*\n+** add_m1_s16_x:\n+**\tsub\tz0\\.h, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_s16_x, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, -1),\n+\t\tz0 = svadd_x (p0, z0, -1))\n+\n+/*\n+** add_m127_s16_x:\n+**\tsub\tz0\\.h, z0\\.h, #127\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m127_s16_x, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, -127),\n+\t\tz0 = svadd_x (p0, z0, -127))\n+\n+/*\n+** add_m128_s16_x:\n+**\tsub\tz0\\.h, z0\\.h, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m128_s16_x, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, -128),\n+\t\tz0 = svadd_x (p0, z0, -128))\n+\n+/*\n+** add_m255_s16_x:\n+**\tsub\tz0\\.h, z0\\.h, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m255_s16_x, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, -255),\n+\t\tz0 = svadd_x (p0, z0, -255))\n+\n+/*\n+** add_m256_s16_x:\n+**\tadd\tz0\\.h, z0\\.h, #65280\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m256_s16_x, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, -256),\n+\t\tz0 = svadd_x (p0, z0, -256))\n+\n+/*\n+** add_m257_s16_x:\n+**\tmov\t(z[0-9]+\\.h), #-257\n+**\tadd\tz0\\.h, (z0\\.h, \\1|\\1, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m257_s16_x, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, -257),\n+\t\tz0 = svadd_x (p0, z0, -257))\n+\n+/*\n+** add_m512_s16_x:\n+**\tadd\tz0\\.h, z0\\.h, #65024\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m512_s16_x, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, -512),\n+\t\tz0 = svadd_x (p0, z0, -512))\n+\n+/*\n+** add_m32768_s16_x:\n+**\tadd\tz0\\.h, z0\\.h, #32768\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m32768_s16_x, svint16_t,\n+\t\tz0 = svadd_n_s16_x (p0, z0, -0x8000),\n+\t\tz0 = svadd_x (p0, z0, -0x8000))"}, {"sha": "887038ba3c7db475cbe56e5d148367676ae07968", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/add_s32.c", "status": "added", "additions": 426, "deletions": 0, "changes": 426, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,426 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** add_s32_m_tied1:\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s32_m_tied1, svint32_t,\n+\t\tz0 = svadd_s32_m (p0, z0, z1),\n+\t\tz0 = svadd_m (p0, z0, z1))\n+\n+/*\n+** add_s32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s32_m_tied2, svint32_t,\n+\t\tz0 = svadd_s32_m (p0, z1, z0),\n+\t\tz0 = svadd_m (p0, z1, z0))\n+\n+/*\n+** add_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s32_m_untied, svint32_t,\n+\t\tz0 = svadd_s32_m (p0, z1, z2),\n+\t\tz0 = svadd_m (p0, z1, z2))\n+\n+/*\n+** add_w0_s32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s32_m_tied1, svint32_t, int32_t,\n+\t\t z0 = svadd_n_s32_m (p0, z0, x0),\n+\t\t z0 = svadd_m (p0, z0, x0))\n+\n+/*\n+** add_w0_s32_m_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s32_m_untied, svint32_t, int32_t,\n+\t\t z0 = svadd_n_s32_m (p0, z1, x0),\n+\t\t z0 = svadd_m (p0, z1, x0))\n+\n+/*\n+** add_1_s32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s32_m_tied1, svint32_t,\n+\t\tz0 = svadd_n_s32_m (p0, z0, 1),\n+\t\tz0 = svadd_m (p0, z0, 1))\n+\n+/*\n+** add_1_s32_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s32_m_untied, svint32_t,\n+\t\tz0 = svadd_n_s32_m (p0, z1, 1),\n+\t\tz0 = svadd_m (p0, z1, 1))\n+\n+/*\n+** add_m2_s32_m:\n+**\tmov\t(z[0-9]+\\.s), #-2\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_s32_m, svint32_t,\n+\t\tz0 = svadd_n_s32_m (p0, z0, -2),\n+\t\tz0 = svadd_m (p0, z0, -2))\n+\n+/*\n+** add_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s32_z_tied1, svint32_t,\n+\t\tz0 = svadd_s32_z (p0, z0, z1),\n+\t\tz0 = svadd_z (p0, z0, z1))\n+\n+/*\n+** add_s32_z_tied2:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s32_z_tied2, svint32_t,\n+\t\tz0 = svadd_s32_z (p0, z1, z0),\n+\t\tz0 = svadd_z (p0, z1, z0))\n+\n+/*\n+** add_s32_z_untied:\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, z2\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s32_z_untied, svint32_t,\n+\t\tz0 = svadd_s32_z (p0, z1, z2),\n+\t\tz0 = svadd_z (p0, z1, z2))\n+\n+/*\n+** add_w0_s32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s32_z_tied1, svint32_t, int32_t,\n+\t\t z0 = svadd_n_s32_z (p0, z0, x0),\n+\t\t z0 = svadd_z (p0, z0, x0))\n+\n+/*\n+** add_w0_s32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s32_z_untied, svint32_t, int32_t,\n+\t\t z0 = svadd_n_s32_z (p0, z1, x0),\n+\t\t z0 = svadd_z (p0, z1, x0))\n+\n+/*\n+** add_1_s32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s32_z_tied1, svint32_t,\n+\t\tz0 = svadd_n_s32_z (p0, z0, 1),\n+\t\tz0 = svadd_z (p0, z0, 1))\n+\n+/*\n+** add_1_s32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), #1\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s32_z_untied, svint32_t,\n+\t\tz0 = svadd_n_s32_z (p0, z1, 1),\n+\t\tz0 = svadd_z (p0, z1, 1))\n+\n+/*\n+** add_s32_x_tied1:\n+**\tadd\tz0\\.s, (z0\\.s, z1\\.s|z1\\.s, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s32_x_tied1, svint32_t,\n+\t\tz0 = svadd_s32_x (p0, z0, z1),\n+\t\tz0 = svadd_x (p0, z0, z1))\n+\n+/*\n+** add_s32_x_tied2:\n+**\tadd\tz0\\.s, (z0\\.s, z1\\.s|z1\\.s, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s32_x_tied2, svint32_t,\n+\t\tz0 = svadd_s32_x (p0, z1, z0),\n+\t\tz0 = svadd_x (p0, z1, z0))\n+\n+/*\n+** add_s32_x_untied:\n+**\tadd\tz0\\.s, (z1\\.s, z2\\.s|z2\\.s, z1\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s32_x_untied, svint32_t,\n+\t\tz0 = svadd_s32_x (p0, z1, z2),\n+\t\tz0 = svadd_x (p0, z1, z2))\n+\n+/*\n+** add_w0_s32_x_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s32_x_tied1, svint32_t, int32_t,\n+\t\t z0 = svadd_n_s32_x (p0, z0, x0),\n+\t\t z0 = svadd_x (p0, z0, x0))\n+\n+/*\n+** add_w0_s32_x_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tadd\tz0\\.s, (z1\\.s, \\1|\\1, z1\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s32_x_untied, svint32_t, int32_t,\n+\t\t z0 = svadd_n_s32_x (p0, z1, x0),\n+\t\t z0 = svadd_x (p0, z1, x0))\n+\n+/*\n+** add_1_s32_x_tied1:\n+**\tadd\tz0\\.s, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s32_x_tied1, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, 1),\n+\t\tz0 = svadd_x (p0, z0, 1))\n+\n+/*\n+** add_1_s32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.s, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s32_x_untied, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z1, 1),\n+\t\tz0 = svadd_x (p0, z1, 1))\n+\n+/*\n+** add_127_s32_x:\n+**\tadd\tz0\\.s, z0\\.s, #127\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_127_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, 127),\n+\t\tz0 = svadd_x (p0, z0, 127))\n+\n+/*\n+** add_128_s32_x:\n+**\tadd\tz0\\.s, z0\\.s, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_128_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, 128),\n+\t\tz0 = svadd_x (p0, z0, 128))\n+\n+/*\n+** add_255_s32_x:\n+**\tadd\tz0\\.s, z0\\.s, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_255_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, 255),\n+\t\tz0 = svadd_x (p0, z0, 255))\n+\n+/*\n+** add_256_s32_x:\n+**\tadd\tz0\\.s, z0\\.s, #256\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_256_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, 256),\n+\t\tz0 = svadd_x (p0, z0, 256))\n+\n+/*\n+** add_511_s32_x:\n+**\tmov\t(z[0-9]+\\.s), #511\n+**\tadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_511_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, 511),\n+\t\tz0 = svadd_x (p0, z0, 511))\n+\n+/*\n+** add_512_s32_x:\n+**\tadd\tz0\\.s, z0\\.s, #512\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_512_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, 512),\n+\t\tz0 = svadd_x (p0, z0, 512))\n+\n+/*\n+** add_65280_s32_x:\n+**\tadd\tz0\\.s, z0\\.s, #65280\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_65280_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, 0xff00),\n+\t\tz0 = svadd_x (p0, z0, 0xff00))\n+\n+/*\n+** add_65535_s32_x:\n+**\tmov\t(z[0-9]+\\.s), #65535\n+**\tadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_65535_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, 65535),\n+\t\tz0 = svadd_x (p0, z0, 65535))\n+\n+/*\n+** add_65536_s32_x:\n+**\tmov\t(z[0-9]+\\.s), #65536\n+**\tadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_65536_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, 65536),\n+\t\tz0 = svadd_x (p0, z0, 65536))\n+\n+/*\n+** add_m1_s32_x:\n+**\tsub\tz0\\.s, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, -1),\n+\t\tz0 = svadd_x (p0, z0, -1))\n+\n+/*\n+** add_m127_s32_x:\n+**\tsub\tz0\\.s, z0\\.s, #127\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m127_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, -127),\n+\t\tz0 = svadd_x (p0, z0, -127))\n+\n+/*\n+** add_m128_s32_x:\n+**\tsub\tz0\\.s, z0\\.s, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m128_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, -128),\n+\t\tz0 = svadd_x (p0, z0, -128))\n+\n+/*\n+** add_m255_s32_x:\n+**\tsub\tz0\\.s, z0\\.s, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m255_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, -255),\n+\t\tz0 = svadd_x (p0, z0, -255))\n+\n+/*\n+** add_m256_s32_x:\n+**\tsub\tz0\\.s, z0\\.s, #256\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m256_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, -256),\n+\t\tz0 = svadd_x (p0, z0, -256))\n+\n+/*\n+** add_m511_s32_x:\n+**\tmov\t(z[0-9]+\\.s), #-511\n+**\tadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m511_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, -511),\n+\t\tz0 = svadd_x (p0, z0, -511))\n+\n+/*\n+** add_m512_s32_x:\n+**\tsub\tz0\\.s, z0\\.s, #512\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m512_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, -512),\n+\t\tz0 = svadd_x (p0, z0, -512))\n+\n+/*\n+** add_m32768_s32_x:\n+**\tsub\tz0\\.s, z0\\.s, #32768\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m32768_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, -0x8000),\n+\t\tz0 = svadd_x (p0, z0, -0x8000))\n+\n+/*\n+** add_m65280_s32_x:\n+**\tsub\tz0\\.s, z0\\.s, #65280\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m65280_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, -0xff00),\n+\t\tz0 = svadd_x (p0, z0, -0xff00))\n+\n+/*\n+** add_m65535_s32_x:\n+**\tmov\t(z[0-9]+\\.s), #-65535\n+**\tadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m65535_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, -65535),\n+\t\tz0 = svadd_x (p0, z0, -65535))\n+\n+/*\n+** add_m65536_s32_x:\n+**\tmov\t(z[0-9]+\\.s), #-65536\n+**\tadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m65536_s32_x, svint32_t,\n+\t\tz0 = svadd_n_s32_x (p0, z0, -65536),\n+\t\tz0 = svadd_x (p0, z0, -65536))"}, {"sha": "aab63ef6211f3977fe9d1cc6e166ad079c262143", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/add_s64.c", "status": "added", "additions": 426, "deletions": 0, "changes": 426, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,426 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** add_s64_m_tied1:\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s64_m_tied1, svint64_t,\n+\t\tz0 = svadd_s64_m (p0, z0, z1),\n+\t\tz0 = svadd_m (p0, z0, z1))\n+\n+/*\n+** add_s64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s64_m_tied2, svint64_t,\n+\t\tz0 = svadd_s64_m (p0, z1, z0),\n+\t\tz0 = svadd_m (p0, z1, z0))\n+\n+/*\n+** add_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s64_m_untied, svint64_t,\n+\t\tz0 = svadd_s64_m (p0, z1, z2),\n+\t\tz0 = svadd_m (p0, z1, z2))\n+\n+/*\n+** add_x0_s64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_x0_s64_m_tied1, svint64_t, int64_t,\n+\t\t z0 = svadd_n_s64_m (p0, z0, x0),\n+\t\t z0 = svadd_m (p0, z0, x0))\n+\n+/*\n+** add_x0_s64_m_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_x0_s64_m_untied, svint64_t, int64_t,\n+\t\t z0 = svadd_n_s64_m (p0, z1, x0),\n+\t\t z0 = svadd_m (p0, z1, x0))\n+\n+/*\n+** add_1_s64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s64_m_tied1, svint64_t,\n+\t\tz0 = svadd_n_s64_m (p0, z0, 1),\n+\t\tz0 = svadd_m (p0, z0, 1))\n+\n+/*\n+** add_1_s64_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s64_m_untied, svint64_t,\n+\t\tz0 = svadd_n_s64_m (p0, z1, 1),\n+\t\tz0 = svadd_m (p0, z1, 1))\n+\n+/*\n+** add_m2_s64_m:\n+**\tmov\t(z[0-9]+\\.d), #-2\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_s64_m, svint64_t,\n+\t\tz0 = svadd_n_s64_m (p0, z0, -2),\n+\t\tz0 = svadd_m (p0, z0, -2))\n+\n+/*\n+** add_s64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s64_z_tied1, svint64_t,\n+\t\tz0 = svadd_s64_z (p0, z0, z1),\n+\t\tz0 = svadd_z (p0, z0, z1))\n+\n+/*\n+** add_s64_z_tied2:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s64_z_tied2, svint64_t,\n+\t\tz0 = svadd_s64_z (p0, z1, z0),\n+\t\tz0 = svadd_z (p0, z1, z0))\n+\n+/*\n+** add_s64_z_untied:\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, z2\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s64_z_untied, svint64_t,\n+\t\tz0 = svadd_s64_z (p0, z1, z2),\n+\t\tz0 = svadd_z (p0, z1, z2))\n+\n+/*\n+** add_x0_s64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_x0_s64_z_tied1, svint64_t, int64_t,\n+\t\t z0 = svadd_n_s64_z (p0, z0, x0),\n+\t\t z0 = svadd_z (p0, z0, x0))\n+\n+/*\n+** add_x0_s64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_x0_s64_z_untied, svint64_t, int64_t,\n+\t\t z0 = svadd_n_s64_z (p0, z1, x0),\n+\t\t z0 = svadd_z (p0, z1, x0))\n+\n+/*\n+** add_1_s64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s64_z_tied1, svint64_t,\n+\t\tz0 = svadd_n_s64_z (p0, z0, 1),\n+\t\tz0 = svadd_z (p0, z0, 1))\n+\n+/*\n+** add_1_s64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), #1\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s64_z_untied, svint64_t,\n+\t\tz0 = svadd_n_s64_z (p0, z1, 1),\n+\t\tz0 = svadd_z (p0, z1, 1))\n+\n+/*\n+** add_s64_x_tied1:\n+**\tadd\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s64_x_tied1, svint64_t,\n+\t\tz0 = svadd_s64_x (p0, z0, z1),\n+\t\tz0 = svadd_x (p0, z0, z1))\n+\n+/*\n+** add_s64_x_tied2:\n+**\tadd\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s64_x_tied2, svint64_t,\n+\t\tz0 = svadd_s64_x (p0, z1, z0),\n+\t\tz0 = svadd_x (p0, z1, z0))\n+\n+/*\n+** add_s64_x_untied:\n+**\tadd\tz0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s64_x_untied, svint64_t,\n+\t\tz0 = svadd_s64_x (p0, z1, z2),\n+\t\tz0 = svadd_x (p0, z1, z2))\n+\n+/*\n+** add_x0_s64_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_x0_s64_x_tied1, svint64_t, int64_t,\n+\t\t z0 = svadd_n_s64_x (p0, z0, x0),\n+\t\t z0 = svadd_x (p0, z0, x0))\n+\n+/*\n+** add_x0_s64_x_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tadd\tz0\\.d, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_x0_s64_x_untied, svint64_t, int64_t,\n+\t\t z0 = svadd_n_s64_x (p0, z1, x0),\n+\t\t z0 = svadd_x (p0, z1, x0))\n+\n+/*\n+** add_1_s64_x_tied1:\n+**\tadd\tz0\\.d, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s64_x_tied1, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, 1),\n+\t\tz0 = svadd_x (p0, z0, 1))\n+\n+/*\n+** add_1_s64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.d, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s64_x_untied, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z1, 1),\n+\t\tz0 = svadd_x (p0, z1, 1))\n+\n+/*\n+** add_127_s64_x:\n+**\tadd\tz0\\.d, z0\\.d, #127\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_127_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, 127),\n+\t\tz0 = svadd_x (p0, z0, 127))\n+\n+/*\n+** add_128_s64_x:\n+**\tadd\tz0\\.d, z0\\.d, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_128_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, 128),\n+\t\tz0 = svadd_x (p0, z0, 128))\n+\n+/*\n+** add_255_s64_x:\n+**\tadd\tz0\\.d, z0\\.d, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_255_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, 255),\n+\t\tz0 = svadd_x (p0, z0, 255))\n+\n+/*\n+** add_256_s64_x:\n+**\tadd\tz0\\.d, z0\\.d, #256\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_256_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, 256),\n+\t\tz0 = svadd_x (p0, z0, 256))\n+\n+/*\n+** add_511_s64_x:\n+**\tmov\t(z[0-9]+\\.d), #511\n+**\tadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_511_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, 511),\n+\t\tz0 = svadd_x (p0, z0, 511))\n+\n+/*\n+** add_512_s64_x:\n+**\tadd\tz0\\.d, z0\\.d, #512\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_512_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, 512),\n+\t\tz0 = svadd_x (p0, z0, 512))\n+\n+/*\n+** add_65280_s64_x:\n+**\tadd\tz0\\.d, z0\\.d, #65280\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_65280_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, 0xff00),\n+\t\tz0 = svadd_x (p0, z0, 0xff00))\n+\n+/*\n+** add_65535_s64_x:\n+**\tmov\t(z[0-9]+\\.d), #65535\n+**\tadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_65535_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, 65535),\n+\t\tz0 = svadd_x (p0, z0, 65535))\n+\n+/*\n+** add_65536_s64_x:\n+**\tmov\t(z[0-9]+\\.d), #65536\n+**\tadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_65536_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, 65536),\n+\t\tz0 = svadd_x (p0, z0, 65536))\n+\n+/*\n+** add_m1_s64_x:\n+**\tsub\tz0\\.d, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, -1),\n+\t\tz0 = svadd_x (p0, z0, -1))\n+\n+/*\n+** add_m127_s64_x:\n+**\tsub\tz0\\.d, z0\\.d, #127\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m127_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, -127),\n+\t\tz0 = svadd_x (p0, z0, -127))\n+\n+/*\n+** add_m128_s64_x:\n+**\tsub\tz0\\.d, z0\\.d, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m128_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, -128),\n+\t\tz0 = svadd_x (p0, z0, -128))\n+\n+/*\n+** add_m255_s64_x:\n+**\tsub\tz0\\.d, z0\\.d, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m255_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, -255),\n+\t\tz0 = svadd_x (p0, z0, -255))\n+\n+/*\n+** add_m256_s64_x:\n+**\tsub\tz0\\.d, z0\\.d, #256\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m256_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, -256),\n+\t\tz0 = svadd_x (p0, z0, -256))\n+\n+/*\n+** add_m511_s64_x:\n+**\tmov\t(z[0-9]+\\.d), #-511\n+**\tadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m511_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, -511),\n+\t\tz0 = svadd_x (p0, z0, -511))\n+\n+/*\n+** add_m512_s64_x:\n+**\tsub\tz0\\.d, z0\\.d, #512\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m512_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, -512),\n+\t\tz0 = svadd_x (p0, z0, -512))\n+\n+/*\n+** add_m32768_s64_x:\n+**\tsub\tz0\\.d, z0\\.d, #32768\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m32768_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, -0x8000),\n+\t\tz0 = svadd_x (p0, z0, -0x8000))\n+\n+/*\n+** add_m65280_s64_x:\n+**\tsub\tz0\\.d, z0\\.d, #65280\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m65280_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, -0xff00),\n+\t\tz0 = svadd_x (p0, z0, -0xff00))\n+\n+/*\n+** add_m65535_s64_x:\n+**\tmov\t(z[0-9]+\\.d), #-65535\n+**\tadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m65535_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, -65535),\n+\t\tz0 = svadd_x (p0, z0, -65535))\n+\n+/*\n+** add_m65536_s64_x:\n+**\tmov\t(z[0-9]+\\.d), #-65536\n+**\tadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m65536_s64_x, svint64_t,\n+\t\tz0 = svadd_n_s64_x (p0, z0, -65536),\n+\t\tz0 = svadd_x (p0, z0, -65536))"}, {"sha": "0889c189d59699e6fdbc1c91f8a36ab0f9296f52", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/add_s8.c", "status": "added", "additions": 294, "deletions": 0, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,294 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** add_s8_m_tied1:\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s8_m_tied1, svint8_t,\n+\t\tz0 = svadd_s8_m (p0, z0, z1),\n+\t\tz0 = svadd_m (p0, z0, z1))\n+\n+/*\n+** add_s8_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s8_m_tied2, svint8_t,\n+\t\tz0 = svadd_s8_m (p0, z1, z0),\n+\t\tz0 = svadd_m (p0, z1, z0))\n+\n+/*\n+** add_s8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s8_m_untied, svint8_t,\n+\t\tz0 = svadd_s8_m (p0, z1, z2),\n+\t\tz0 = svadd_m (p0, z1, z2))\n+\n+/*\n+** add_w0_s8_m_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s8_m_tied1, svint8_t, int8_t,\n+\t\t z0 = svadd_n_s8_m (p0, z0, x0),\n+\t\t z0 = svadd_m (p0, z0, x0))\n+\n+/*\n+** add_w0_s8_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s8_m_untied, svint8_t, int8_t,\n+\t\t z0 = svadd_n_s8_m (p0, z1, x0),\n+\t\t z0 = svadd_m (p0, z1, x0))\n+\n+/*\n+** add_1_s8_m_tied1:\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s8_m_tied1, svint8_t,\n+\t\tz0 = svadd_n_s8_m (p0, z0, 1),\n+\t\tz0 = svadd_m (p0, z0, 1))\n+\n+/*\n+** add_1_s8_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s8_m_untied, svint8_t,\n+\t\tz0 = svadd_n_s8_m (p0, z1, 1),\n+\t\tz0 = svadd_m (p0, z1, 1))\n+\n+/*\n+** add_m1_s8_m:\n+**\tmov\t(z[0-9]+\\.b), #-1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_s8_m, svint8_t,\n+\t\tz0 = svadd_n_s8_m (p0, z0, -1),\n+\t\tz0 = svadd_m (p0, z0, -1))\n+\n+/*\n+** add_s8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s8_z_tied1, svint8_t,\n+\t\tz0 = svadd_s8_z (p0, z0, z1),\n+\t\tz0 = svadd_z (p0, z0, z1))\n+\n+/*\n+** add_s8_z_tied2:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s8_z_tied2, svint8_t,\n+\t\tz0 = svadd_s8_z (p0, z1, z0),\n+\t\tz0 = svadd_z (p0, z1, z0))\n+\n+/*\n+** add_s8_z_untied:\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, z2\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s8_z_untied, svint8_t,\n+\t\tz0 = svadd_s8_z (p0, z1, z2),\n+\t\tz0 = svadd_z (p0, z1, z2))\n+\n+/*\n+** add_w0_s8_z_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s8_z_tied1, svint8_t, int8_t,\n+\t\t z0 = svadd_n_s8_z (p0, z0, x0),\n+\t\t z0 = svadd_z (p0, z0, x0))\n+\n+/*\n+** add_w0_s8_z_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, \\1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s8_z_untied, svint8_t, int8_t,\n+\t\t z0 = svadd_n_s8_z (p0, z1, x0),\n+\t\t z0 = svadd_z (p0, z1, x0))\n+\n+/*\n+** add_1_s8_z_tied1:\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s8_z_tied1, svint8_t,\n+\t\tz0 = svadd_n_s8_z (p0, z0, 1),\n+\t\tz0 = svadd_z (p0, z0, 1))\n+\n+/*\n+** add_1_s8_z_untied:\n+**\tmov\t(z[0-9]+\\.b), #1\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, \\1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s8_z_untied, svint8_t,\n+\t\tz0 = svadd_n_s8_z (p0, z1, 1),\n+\t\tz0 = svadd_z (p0, z1, 1))\n+\n+/*\n+** add_s8_x_tied1:\n+**\tadd\tz0\\.b, (z0\\.b, z1\\.b|z1\\.b, z0\\.b)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s8_x_tied1, svint8_t,\n+\t\tz0 = svadd_s8_x (p0, z0, z1),\n+\t\tz0 = svadd_x (p0, z0, z1))\n+\n+/*\n+** add_s8_x_tied2:\n+**\tadd\tz0\\.b, (z0\\.b, z1\\.b|z1\\.b, z0\\.b)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s8_x_tied2, svint8_t,\n+\t\tz0 = svadd_s8_x (p0, z1, z0),\n+\t\tz0 = svadd_x (p0, z1, z0))\n+\n+/*\n+** add_s8_x_untied:\n+**\tadd\tz0\\.b, (z1\\.b, z2\\.b|z2\\.b, z1\\.b)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_s8_x_untied, svint8_t,\n+\t\tz0 = svadd_s8_x (p0, z1, z2),\n+\t\tz0 = svadd_x (p0, z1, z2))\n+\n+/*\n+** add_w0_s8_x_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tadd\tz0\\.b, (z0\\.b, \\1|\\1, z0\\.b)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s8_x_tied1, svint8_t, int8_t,\n+\t\t z0 = svadd_n_s8_x (p0, z0, x0),\n+\t\t z0 = svadd_x (p0, z0, x0))\n+\n+/*\n+** add_w0_s8_x_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tadd\tz0\\.b, (z1\\.b, \\1|\\1, z1\\.b)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_s8_x_untied, svint8_t, int8_t,\n+\t\t z0 = svadd_n_s8_x (p0, z1, x0),\n+\t\t z0 = svadd_x (p0, z1, x0))\n+\n+/*\n+** add_1_s8_x_tied1:\n+**\tadd\tz0\\.b, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s8_x_tied1, svint8_t,\n+\t\tz0 = svadd_n_s8_x (p0, z0, 1),\n+\t\tz0 = svadd_x (p0, z0, 1))\n+\n+/*\n+** add_1_s8_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.b, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_s8_x_untied, svint8_t,\n+\t\tz0 = svadd_n_s8_x (p0, z1, 1),\n+\t\tz0 = svadd_x (p0, z1, 1))\n+\n+/*\n+** add_127_s8_x:\n+**\tadd\tz0\\.b, z0\\.b, #127\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_127_s8_x, svint8_t,\n+\t\tz0 = svadd_n_s8_x (p0, z0, 127),\n+\t\tz0 = svadd_x (p0, z0, 127))\n+\n+/*\n+** add_128_s8_x:\n+**\tadd\tz0\\.b, z0\\.b, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_128_s8_x, svint8_t,\n+\t\tz0 = svadd_n_s8_x (p0, z0, 128),\n+\t\tz0 = svadd_x (p0, z0, 128))\n+\n+/*\n+** add_255_s8_x:\n+**\tadd\tz0\\.b, z0\\.b, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_255_s8_x, svint8_t,\n+\t\tz0 = svadd_n_s8_x (p0, z0, 255),\n+\t\tz0 = svadd_x (p0, z0, 255))\n+\n+/*\n+** add_m1_s8_x:\n+**\tadd\tz0\\.b, z0\\.b, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_s8_x, svint8_t,\n+\t\tz0 = svadd_n_s8_x (p0, z0, -1),\n+\t\tz0 = svadd_x (p0, z0, -1))\n+\n+/*\n+** add_m127_s8_x:\n+**\tadd\tz0\\.b, z0\\.b, #129\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m127_s8_x, svint8_t,\n+\t\tz0 = svadd_n_s8_x (p0, z0, -127),\n+\t\tz0 = svadd_x (p0, z0, -127))\n+\n+/*\n+** add_m128_s8_x:\n+**\tadd\tz0\\.b, z0\\.b, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m128_s8_x, svint8_t,\n+\t\tz0 = svadd_n_s8_x (p0, z0, -128),\n+\t\tz0 = svadd_x (p0, z0, -128))"}, {"sha": "25cb90353d3b852334885c6eb306bb2e97452c2e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/add_u16.c", "status": "added", "additions": 377, "deletions": 0, "changes": 377, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,377 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** add_u16_m_tied1:\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u16_m_tied1, svuint16_t,\n+\t\tz0 = svadd_u16_m (p0, z0, z1),\n+\t\tz0 = svadd_m (p0, z0, z1))\n+\n+/*\n+** add_u16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u16_m_tied2, svuint16_t,\n+\t\tz0 = svadd_u16_m (p0, z1, z0),\n+\t\tz0 = svadd_m (p0, z1, z0))\n+\n+/*\n+** add_u16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u16_m_untied, svuint16_t,\n+\t\tz0 = svadd_u16_m (p0, z1, z2),\n+\t\tz0 = svadd_m (p0, z1, z2))\n+\n+/*\n+** add_w0_u16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u16_m_tied1, svuint16_t, uint16_t,\n+\t\t z0 = svadd_n_u16_m (p0, z0, x0),\n+\t\t z0 = svadd_m (p0, z0, x0))\n+\n+/*\n+** add_w0_u16_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u16_m_untied, svuint16_t, uint16_t,\n+\t\t z0 = svadd_n_u16_m (p0, z1, x0),\n+\t\t z0 = svadd_m (p0, z1, x0))\n+\n+/*\n+** add_1_u16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u16_m_tied1, svuint16_t,\n+\t\tz0 = svadd_n_u16_m (p0, z0, 1),\n+\t\tz0 = svadd_m (p0, z0, 1))\n+\n+/*\n+** add_1_u16_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u16_m_untied, svuint16_t,\n+\t\tz0 = svadd_n_u16_m (p0, z1, 1),\n+\t\tz0 = svadd_m (p0, z1, 1))\n+\n+/*\n+** add_m2_u16_m:\n+**\tmov\t(z[0-9]+\\.h), #-2\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_u16_m, svuint16_t,\n+\t\tz0 = svadd_n_u16_m (p0, z0, -2),\n+\t\tz0 = svadd_m (p0, z0, -2))\n+\n+/*\n+** add_u16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u16_z_tied1, svuint16_t,\n+\t\tz0 = svadd_u16_z (p0, z0, z1),\n+\t\tz0 = svadd_z (p0, z0, z1))\n+\n+/*\n+** add_u16_z_tied2:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u16_z_tied2, svuint16_t,\n+\t\tz0 = svadd_u16_z (p0, z1, z0),\n+\t\tz0 = svadd_z (p0, z1, z0))\n+\n+/*\n+** add_u16_z_untied:\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, z2\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u16_z_untied, svuint16_t,\n+\t\tz0 = svadd_u16_z (p0, z1, z2),\n+\t\tz0 = svadd_z (p0, z1, z2))\n+\n+/*\n+** add_w0_u16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u16_z_tied1, svuint16_t, uint16_t,\n+\t\t z0 = svadd_n_u16_z (p0, z0, x0),\n+\t\t z0 = svadd_z (p0, z0, x0))\n+\n+/*\n+** add_w0_u16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u16_z_untied, svuint16_t, uint16_t,\n+\t\t z0 = svadd_n_u16_z (p0, z1, x0),\n+\t\t z0 = svadd_z (p0, z1, x0))\n+\n+/*\n+** add_1_u16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u16_z_tied1, svuint16_t,\n+\t\tz0 = svadd_n_u16_z (p0, z0, 1),\n+\t\tz0 = svadd_z (p0, z0, 1))\n+\n+/*\n+** add_1_u16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), #1\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tadd\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tadd\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u16_z_untied, svuint16_t,\n+\t\tz0 = svadd_n_u16_z (p0, z1, 1),\n+\t\tz0 = svadd_z (p0, z1, 1))\n+\n+/*\n+** add_u16_x_tied1:\n+**\tadd\tz0\\.h, (z0\\.h, z1\\.h|z1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u16_x_tied1, svuint16_t,\n+\t\tz0 = svadd_u16_x (p0, z0, z1),\n+\t\tz0 = svadd_x (p0, z0, z1))\n+\n+/*\n+** add_u16_x_tied2:\n+**\tadd\tz0\\.h, (z0\\.h, z1\\.h|z1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u16_x_tied2, svuint16_t,\n+\t\tz0 = svadd_u16_x (p0, z1, z0),\n+\t\tz0 = svadd_x (p0, z1, z0))\n+\n+/*\n+** add_u16_x_untied:\n+**\tadd\tz0\\.h, (z1\\.h, z2\\.h|z2\\.h, z1\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u16_x_untied, svuint16_t,\n+\t\tz0 = svadd_u16_x (p0, z1, z2),\n+\t\tz0 = svadd_x (p0, z1, z2))\n+\n+/*\n+** add_w0_u16_x_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tadd\tz0\\.h, (z0\\.h, \\1|\\1, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u16_x_tied1, svuint16_t, uint16_t,\n+\t\t z0 = svadd_n_u16_x (p0, z0, x0),\n+\t\t z0 = svadd_x (p0, z0, x0))\n+\n+/*\n+** add_w0_u16_x_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tadd\tz0\\.h, (z1\\.h, \\1|\\1, z1\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u16_x_untied, svuint16_t, uint16_t,\n+\t\t z0 = svadd_n_u16_x (p0, z1, x0),\n+\t\t z0 = svadd_x (p0, z1, x0))\n+\n+/*\n+** add_1_u16_x_tied1:\n+**\tadd\tz0\\.h, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u16_x_tied1, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, 1),\n+\t\tz0 = svadd_x (p0, z0, 1))\n+\n+/*\n+** add_1_u16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.h, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u16_x_untied, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z1, 1),\n+\t\tz0 = svadd_x (p0, z1, 1))\n+\n+/*\n+** add_127_u16_x:\n+**\tadd\tz0\\.h, z0\\.h, #127\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_127_u16_x, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, 127),\n+\t\tz0 = svadd_x (p0, z0, 127))\n+\n+/*\n+** add_128_u16_x:\n+**\tadd\tz0\\.h, z0\\.h, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_128_u16_x, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, 128),\n+\t\tz0 = svadd_x (p0, z0, 128))\n+\n+/*\n+** add_255_u16_x:\n+**\tadd\tz0\\.h, z0\\.h, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_255_u16_x, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, 255),\n+\t\tz0 = svadd_x (p0, z0, 255))\n+\n+/*\n+** add_256_u16_x:\n+**\tadd\tz0\\.h, z0\\.h, #256\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_256_u16_x, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, 256),\n+\t\tz0 = svadd_x (p0, z0, 256))\n+\n+/*\n+** add_257_u16_x:\n+**\tmov\t(z[0-9]+)\\.b, #1\n+**\tadd\tz0\\.h, (z0\\.h, \\1\\.h|\\1\\.h, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_257_u16_x, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, 257),\n+\t\tz0 = svadd_x (p0, z0, 257))\n+\n+/*\n+** add_512_u16_x:\n+**\tadd\tz0\\.h, z0\\.h, #512\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_512_u16_x, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, 512),\n+\t\tz0 = svadd_x (p0, z0, 512))\n+\n+/*\n+** add_65280_u16_x:\n+**\tadd\tz0\\.h, z0\\.h, #65280\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_65280_u16_x, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, 0xff00),\n+\t\tz0 = svadd_x (p0, z0, 0xff00))\n+\n+/*\n+** add_m1_u16_x:\n+**\tsub\tz0\\.h, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_u16_x, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, -1),\n+\t\tz0 = svadd_x (p0, z0, -1))\n+\n+/*\n+** add_m127_u16_x:\n+**\tsub\tz0\\.h, z0\\.h, #127\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m127_u16_x, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, -127),\n+\t\tz0 = svadd_x (p0, z0, -127))\n+\n+/*\n+** add_m128_u16_x:\n+**\tsub\tz0\\.h, z0\\.h, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m128_u16_x, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, -128),\n+\t\tz0 = svadd_x (p0, z0, -128))\n+\n+/*\n+** add_m255_u16_x:\n+**\tsub\tz0\\.h, z0\\.h, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m255_u16_x, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, -255),\n+\t\tz0 = svadd_x (p0, z0, -255))\n+\n+/*\n+** add_m256_u16_x:\n+**\tadd\tz0\\.h, z0\\.h, #65280\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m256_u16_x, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, -256),\n+\t\tz0 = svadd_x (p0, z0, -256))\n+\n+/*\n+** add_m257_u16_x:\n+**\tmov\t(z[0-9]+\\.h), #-257\n+**\tadd\tz0\\.h, (z0\\.h, \\1|\\1, z0\\.h)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m257_u16_x, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, -257),\n+\t\tz0 = svadd_x (p0, z0, -257))\n+\n+/*\n+** add_m512_u16_x:\n+**\tadd\tz0\\.h, z0\\.h, #65024\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m512_u16_x, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, -512),\n+\t\tz0 = svadd_x (p0, z0, -512))\n+\n+/*\n+** add_m32768_u16_x:\n+**\tadd\tz0\\.h, z0\\.h, #32768\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m32768_u16_x, svuint16_t,\n+\t\tz0 = svadd_n_u16_x (p0, z0, -0x8000),\n+\t\tz0 = svadd_x (p0, z0, -0x8000))"}, {"sha": "ee979489b5295f138a68a7adcd67630991989a1a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/add_u32.c", "status": "added", "additions": 426, "deletions": 0, "changes": 426, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,426 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** add_u32_m_tied1:\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u32_m_tied1, svuint32_t,\n+\t\tz0 = svadd_u32_m (p0, z0, z1),\n+\t\tz0 = svadd_m (p0, z0, z1))\n+\n+/*\n+** add_u32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u32_m_tied2, svuint32_t,\n+\t\tz0 = svadd_u32_m (p0, z1, z0),\n+\t\tz0 = svadd_m (p0, z1, z0))\n+\n+/*\n+** add_u32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u32_m_untied, svuint32_t,\n+\t\tz0 = svadd_u32_m (p0, z1, z2),\n+\t\tz0 = svadd_m (p0, z1, z2))\n+\n+/*\n+** add_w0_u32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u32_m_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svadd_n_u32_m (p0, z0, x0),\n+\t\t z0 = svadd_m (p0, z0, x0))\n+\n+/*\n+** add_w0_u32_m_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u32_m_untied, svuint32_t, uint32_t,\n+\t\t z0 = svadd_n_u32_m (p0, z1, x0),\n+\t\t z0 = svadd_m (p0, z1, x0))\n+\n+/*\n+** add_1_u32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u32_m_tied1, svuint32_t,\n+\t\tz0 = svadd_n_u32_m (p0, z0, 1),\n+\t\tz0 = svadd_m (p0, z0, 1))\n+\n+/*\n+** add_1_u32_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u32_m_untied, svuint32_t,\n+\t\tz0 = svadd_n_u32_m (p0, z1, 1),\n+\t\tz0 = svadd_m (p0, z1, 1))\n+\n+/*\n+** add_m2_u32_m:\n+**\tmov\t(z[0-9]+\\.s), #-2\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_u32_m, svuint32_t,\n+\t\tz0 = svadd_n_u32_m (p0, z0, -2),\n+\t\tz0 = svadd_m (p0, z0, -2))\n+\n+/*\n+** add_u32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u32_z_tied1, svuint32_t,\n+\t\tz0 = svadd_u32_z (p0, z0, z1),\n+\t\tz0 = svadd_z (p0, z0, z1))\n+\n+/*\n+** add_u32_z_tied2:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u32_z_tied2, svuint32_t,\n+\t\tz0 = svadd_u32_z (p0, z1, z0),\n+\t\tz0 = svadd_z (p0, z1, z0))\n+\n+/*\n+** add_u32_z_untied:\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, z2\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u32_z_untied, svuint32_t,\n+\t\tz0 = svadd_u32_z (p0, z1, z2),\n+\t\tz0 = svadd_z (p0, z1, z2))\n+\n+/*\n+** add_w0_u32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u32_z_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svadd_n_u32_z (p0, z0, x0),\n+\t\t z0 = svadd_z (p0, z0, x0))\n+\n+/*\n+** add_w0_u32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u32_z_untied, svuint32_t, uint32_t,\n+\t\t z0 = svadd_n_u32_z (p0, z1, x0),\n+\t\t z0 = svadd_z (p0, z1, x0))\n+\n+/*\n+** add_1_u32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u32_z_tied1, svuint32_t,\n+\t\tz0 = svadd_n_u32_z (p0, z0, 1),\n+\t\tz0 = svadd_z (p0, z0, 1))\n+\n+/*\n+** add_1_u32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), #1\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tadd\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tadd\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u32_z_untied, svuint32_t,\n+\t\tz0 = svadd_n_u32_z (p0, z1, 1),\n+\t\tz0 = svadd_z (p0, z1, 1))\n+\n+/*\n+** add_u32_x_tied1:\n+**\tadd\tz0\\.s, (z0\\.s, z1\\.s|z1\\.s, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u32_x_tied1, svuint32_t,\n+\t\tz0 = svadd_u32_x (p0, z0, z1),\n+\t\tz0 = svadd_x (p0, z0, z1))\n+\n+/*\n+** add_u32_x_tied2:\n+**\tadd\tz0\\.s, (z0\\.s, z1\\.s|z1\\.s, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u32_x_tied2, svuint32_t,\n+\t\tz0 = svadd_u32_x (p0, z1, z0),\n+\t\tz0 = svadd_x (p0, z1, z0))\n+\n+/*\n+** add_u32_x_untied:\n+**\tadd\tz0\\.s, (z1\\.s, z2\\.s|z2\\.s, z1\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u32_x_untied, svuint32_t,\n+\t\tz0 = svadd_u32_x (p0, z1, z2),\n+\t\tz0 = svadd_x (p0, z1, z2))\n+\n+/*\n+** add_w0_u32_x_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u32_x_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svadd_n_u32_x (p0, z0, x0),\n+\t\t z0 = svadd_x (p0, z0, x0))\n+\n+/*\n+** add_w0_u32_x_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tadd\tz0\\.s, (z1\\.s, \\1|\\1, z1\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u32_x_untied, svuint32_t, uint32_t,\n+\t\t z0 = svadd_n_u32_x (p0, z1, x0),\n+\t\t z0 = svadd_x (p0, z1, x0))\n+\n+/*\n+** add_1_u32_x_tied1:\n+**\tadd\tz0\\.s, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u32_x_tied1, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, 1),\n+\t\tz0 = svadd_x (p0, z0, 1))\n+\n+/*\n+** add_1_u32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.s, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u32_x_untied, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z1, 1),\n+\t\tz0 = svadd_x (p0, z1, 1))\n+\n+/*\n+** add_127_u32_x:\n+**\tadd\tz0\\.s, z0\\.s, #127\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_127_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, 127),\n+\t\tz0 = svadd_x (p0, z0, 127))\n+\n+/*\n+** add_128_u32_x:\n+**\tadd\tz0\\.s, z0\\.s, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_128_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, 128),\n+\t\tz0 = svadd_x (p0, z0, 128))\n+\n+/*\n+** add_255_u32_x:\n+**\tadd\tz0\\.s, z0\\.s, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_255_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, 255),\n+\t\tz0 = svadd_x (p0, z0, 255))\n+\n+/*\n+** add_256_u32_x:\n+**\tadd\tz0\\.s, z0\\.s, #256\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_256_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, 256),\n+\t\tz0 = svadd_x (p0, z0, 256))\n+\n+/*\n+** add_511_u32_x:\n+**\tmov\t(z[0-9]+\\.s), #511\n+**\tadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_511_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, 511),\n+\t\tz0 = svadd_x (p0, z0, 511))\n+\n+/*\n+** add_512_u32_x:\n+**\tadd\tz0\\.s, z0\\.s, #512\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_512_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, 512),\n+\t\tz0 = svadd_x (p0, z0, 512))\n+\n+/*\n+** add_65280_u32_x:\n+**\tadd\tz0\\.s, z0\\.s, #65280\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_65280_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, 0xff00),\n+\t\tz0 = svadd_x (p0, z0, 0xff00))\n+\n+/*\n+** add_65535_u32_x:\n+**\tmov\t(z[0-9]+\\.s), #65535\n+**\tadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_65535_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, 65535),\n+\t\tz0 = svadd_x (p0, z0, 65535))\n+\n+/*\n+** add_65536_u32_x:\n+**\tmov\t(z[0-9]+\\.s), #65536\n+**\tadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_65536_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, 65536),\n+\t\tz0 = svadd_x (p0, z0, 65536))\n+\n+/*\n+** add_m1_u32_x:\n+**\tsub\tz0\\.s, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, -1),\n+\t\tz0 = svadd_x (p0, z0, -1))\n+\n+/*\n+** add_m127_u32_x:\n+**\tsub\tz0\\.s, z0\\.s, #127\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m127_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, -127),\n+\t\tz0 = svadd_x (p0, z0, -127))\n+\n+/*\n+** add_m128_u32_x:\n+**\tsub\tz0\\.s, z0\\.s, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m128_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, -128),\n+\t\tz0 = svadd_x (p0, z0, -128))\n+\n+/*\n+** add_m255_u32_x:\n+**\tsub\tz0\\.s, z0\\.s, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m255_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, -255),\n+\t\tz0 = svadd_x (p0, z0, -255))\n+\n+/*\n+** add_m256_u32_x:\n+**\tsub\tz0\\.s, z0\\.s, #256\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m256_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, -256),\n+\t\tz0 = svadd_x (p0, z0, -256))\n+\n+/*\n+** add_m511_u32_x:\n+**\tmov\t(z[0-9]+\\.s), #-511\n+**\tadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m511_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, -511),\n+\t\tz0 = svadd_x (p0, z0, -511))\n+\n+/*\n+** add_m512_u32_x:\n+**\tsub\tz0\\.s, z0\\.s, #512\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m512_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, -512),\n+\t\tz0 = svadd_x (p0, z0, -512))\n+\n+/*\n+** add_m32768_u32_x:\n+**\tsub\tz0\\.s, z0\\.s, #32768\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m32768_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, -0x8000),\n+\t\tz0 = svadd_x (p0, z0, -0x8000))\n+\n+/*\n+** add_m65280_u32_x:\n+**\tsub\tz0\\.s, z0\\.s, #65280\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m65280_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, -0xff00),\n+\t\tz0 = svadd_x (p0, z0, -0xff00))\n+\n+/*\n+** add_m65535_u32_x:\n+**\tmov\t(z[0-9]+\\.s), #-65535\n+**\tadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m65535_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, -65535),\n+\t\tz0 = svadd_x (p0, z0, -65535))\n+\n+/*\n+** add_m65536_u32_x:\n+**\tmov\t(z[0-9]+\\.s), #-65536\n+**\tadd\tz0\\.s, (z0\\.s, \\1|\\1, z0\\.s)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m65536_u32_x, svuint32_t,\n+\t\tz0 = svadd_n_u32_x (p0, z0, -65536),\n+\t\tz0 = svadd_x (p0, z0, -65536))"}, {"sha": "25d2972a695bf316fbd0b75d3b61078447843d6c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/add_u64.c", "status": "added", "additions": 426, "deletions": 0, "changes": 426, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,426 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** add_u64_m_tied1:\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u64_m_tied1, svuint64_t,\n+\t\tz0 = svadd_u64_m (p0, z0, z1),\n+\t\tz0 = svadd_m (p0, z0, z1))\n+\n+/*\n+** add_u64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u64_m_tied2, svuint64_t,\n+\t\tz0 = svadd_u64_m (p0, z1, z0),\n+\t\tz0 = svadd_m (p0, z1, z0))\n+\n+/*\n+** add_u64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u64_m_untied, svuint64_t,\n+\t\tz0 = svadd_u64_m (p0, z1, z2),\n+\t\tz0 = svadd_m (p0, z1, z2))\n+\n+/*\n+** add_x0_u64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_x0_u64_m_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svadd_n_u64_m (p0, z0, x0),\n+\t\t z0 = svadd_m (p0, z0, x0))\n+\n+/*\n+** add_x0_u64_m_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_x0_u64_m_untied, svuint64_t, uint64_t,\n+\t\t z0 = svadd_n_u64_m (p0, z1, x0),\n+\t\t z0 = svadd_m (p0, z1, x0))\n+\n+/*\n+** add_1_u64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u64_m_tied1, svuint64_t,\n+\t\tz0 = svadd_n_u64_m (p0, z0, 1),\n+\t\tz0 = svadd_m (p0, z0, 1))\n+\n+/*\n+** add_1_u64_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u64_m_untied, svuint64_t,\n+\t\tz0 = svadd_n_u64_m (p0, z1, 1),\n+\t\tz0 = svadd_m (p0, z1, 1))\n+\n+/*\n+** add_m2_u64_m:\n+**\tmov\t(z[0-9]+\\.d), #-2\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m2_u64_m, svuint64_t,\n+\t\tz0 = svadd_n_u64_m (p0, z0, -2),\n+\t\tz0 = svadd_m (p0, z0, -2))\n+\n+/*\n+** add_u64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u64_z_tied1, svuint64_t,\n+\t\tz0 = svadd_u64_z (p0, z0, z1),\n+\t\tz0 = svadd_z (p0, z0, z1))\n+\n+/*\n+** add_u64_z_tied2:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u64_z_tied2, svuint64_t,\n+\t\tz0 = svadd_u64_z (p0, z1, z0),\n+\t\tz0 = svadd_z (p0, z1, z0))\n+\n+/*\n+** add_u64_z_untied:\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, z2\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u64_z_untied, svuint64_t,\n+\t\tz0 = svadd_u64_z (p0, z1, z2),\n+\t\tz0 = svadd_z (p0, z1, z2))\n+\n+/*\n+** add_x0_u64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_x0_u64_z_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svadd_n_u64_z (p0, z0, x0),\n+\t\t z0 = svadd_z (p0, z0, x0))\n+\n+/*\n+** add_x0_u64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_x0_u64_z_untied, svuint64_t, uint64_t,\n+\t\t z0 = svadd_n_u64_z (p0, z1, x0),\n+\t\t z0 = svadd_z (p0, z1, x0))\n+\n+/*\n+** add_1_u64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u64_z_tied1, svuint64_t,\n+\t\tz0 = svadd_n_u64_z (p0, z0, 1),\n+\t\tz0 = svadd_z (p0, z0, 1))\n+\n+/*\n+** add_1_u64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), #1\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tadd\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tadd\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u64_z_untied, svuint64_t,\n+\t\tz0 = svadd_n_u64_z (p0, z1, 1),\n+\t\tz0 = svadd_z (p0, z1, 1))\n+\n+/*\n+** add_u64_x_tied1:\n+**\tadd\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u64_x_tied1, svuint64_t,\n+\t\tz0 = svadd_u64_x (p0, z0, z1),\n+\t\tz0 = svadd_x (p0, z0, z1))\n+\n+/*\n+** add_u64_x_tied2:\n+**\tadd\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u64_x_tied2, svuint64_t,\n+\t\tz0 = svadd_u64_x (p0, z1, z0),\n+\t\tz0 = svadd_x (p0, z1, z0))\n+\n+/*\n+** add_u64_x_untied:\n+**\tadd\tz0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u64_x_untied, svuint64_t,\n+\t\tz0 = svadd_u64_x (p0, z1, z2),\n+\t\tz0 = svadd_x (p0, z1, z2))\n+\n+/*\n+** add_x0_u64_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_x0_u64_x_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svadd_n_u64_x (p0, z0, x0),\n+\t\t z0 = svadd_x (p0, z0, x0))\n+\n+/*\n+** add_x0_u64_x_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tadd\tz0\\.d, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_x0_u64_x_untied, svuint64_t, uint64_t,\n+\t\t z0 = svadd_n_u64_x (p0, z1, x0),\n+\t\t z0 = svadd_x (p0, z1, x0))\n+\n+/*\n+** add_1_u64_x_tied1:\n+**\tadd\tz0\\.d, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u64_x_tied1, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, 1),\n+\t\tz0 = svadd_x (p0, z0, 1))\n+\n+/*\n+** add_1_u64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.d, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u64_x_untied, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z1, 1),\n+\t\tz0 = svadd_x (p0, z1, 1))\n+\n+/*\n+** add_127_u64_x:\n+**\tadd\tz0\\.d, z0\\.d, #127\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_127_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, 127),\n+\t\tz0 = svadd_x (p0, z0, 127))\n+\n+/*\n+** add_128_u64_x:\n+**\tadd\tz0\\.d, z0\\.d, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_128_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, 128),\n+\t\tz0 = svadd_x (p0, z0, 128))\n+\n+/*\n+** add_255_u64_x:\n+**\tadd\tz0\\.d, z0\\.d, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_255_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, 255),\n+\t\tz0 = svadd_x (p0, z0, 255))\n+\n+/*\n+** add_256_u64_x:\n+**\tadd\tz0\\.d, z0\\.d, #256\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_256_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, 256),\n+\t\tz0 = svadd_x (p0, z0, 256))\n+\n+/*\n+** add_511_u64_x:\n+**\tmov\t(z[0-9]+\\.d), #511\n+**\tadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_511_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, 511),\n+\t\tz0 = svadd_x (p0, z0, 511))\n+\n+/*\n+** add_512_u64_x:\n+**\tadd\tz0\\.d, z0\\.d, #512\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_512_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, 512),\n+\t\tz0 = svadd_x (p0, z0, 512))\n+\n+/*\n+** add_65280_u64_x:\n+**\tadd\tz0\\.d, z0\\.d, #65280\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_65280_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, 0xff00),\n+\t\tz0 = svadd_x (p0, z0, 0xff00))\n+\n+/*\n+** add_65535_u64_x:\n+**\tmov\t(z[0-9]+\\.d), #65535\n+**\tadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_65535_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, 65535),\n+\t\tz0 = svadd_x (p0, z0, 65535))\n+\n+/*\n+** add_65536_u64_x:\n+**\tmov\t(z[0-9]+\\.d), #65536\n+**\tadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_65536_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, 65536),\n+\t\tz0 = svadd_x (p0, z0, 65536))\n+\n+/*\n+** add_m1_u64_x:\n+**\tsub\tz0\\.d, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, -1),\n+\t\tz0 = svadd_x (p0, z0, -1))\n+\n+/*\n+** add_m127_u64_x:\n+**\tsub\tz0\\.d, z0\\.d, #127\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m127_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, -127),\n+\t\tz0 = svadd_x (p0, z0, -127))\n+\n+/*\n+** add_m128_u64_x:\n+**\tsub\tz0\\.d, z0\\.d, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m128_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, -128),\n+\t\tz0 = svadd_x (p0, z0, -128))\n+\n+/*\n+** add_m255_u64_x:\n+**\tsub\tz0\\.d, z0\\.d, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m255_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, -255),\n+\t\tz0 = svadd_x (p0, z0, -255))\n+\n+/*\n+** add_m256_u64_x:\n+**\tsub\tz0\\.d, z0\\.d, #256\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m256_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, -256),\n+\t\tz0 = svadd_x (p0, z0, -256))\n+\n+/*\n+** add_m511_u64_x:\n+**\tmov\t(z[0-9]+\\.d), #-511\n+**\tadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m511_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, -511),\n+\t\tz0 = svadd_x (p0, z0, -511))\n+\n+/*\n+** add_m512_u64_x:\n+**\tsub\tz0\\.d, z0\\.d, #512\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m512_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, -512),\n+\t\tz0 = svadd_x (p0, z0, -512))\n+\n+/*\n+** add_m32768_u64_x:\n+**\tsub\tz0\\.d, z0\\.d, #32768\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m32768_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, -0x8000),\n+\t\tz0 = svadd_x (p0, z0, -0x8000))\n+\n+/*\n+** add_m65280_u64_x:\n+**\tsub\tz0\\.d, z0\\.d, #65280\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m65280_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, -0xff00),\n+\t\tz0 = svadd_x (p0, z0, -0xff00))\n+\n+/*\n+** add_m65535_u64_x:\n+**\tmov\t(z[0-9]+\\.d), #-65535\n+**\tadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m65535_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, -65535),\n+\t\tz0 = svadd_x (p0, z0, -65535))\n+\n+/*\n+** add_m65536_u64_x:\n+**\tmov\t(z[0-9]+\\.d), #-65536\n+**\tadd\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m65536_u64_x, svuint64_t,\n+\t\tz0 = svadd_n_u64_x (p0, z0, -65536),\n+\t\tz0 = svadd_x (p0, z0, -65536))"}, {"sha": "06b68c97ce8c84494c960f28b2ae4c5dcafd0d03", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/add_u8.c", "status": "added", "additions": 294, "deletions": 0, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadd_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,294 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** add_u8_m_tied1:\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u8_m_tied1, svuint8_t,\n+\t\tz0 = svadd_u8_m (p0, z0, z1),\n+\t\tz0 = svadd_m (p0, z0, z1))\n+\n+/*\n+** add_u8_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u8_m_tied2, svuint8_t,\n+\t\tz0 = svadd_u8_m (p0, z1, z0),\n+\t\tz0 = svadd_m (p0, z1, z0))\n+\n+/*\n+** add_u8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u8_m_untied, svuint8_t,\n+\t\tz0 = svadd_u8_m (p0, z1, z2),\n+\t\tz0 = svadd_m (p0, z1, z2))\n+\n+/*\n+** add_w0_u8_m_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u8_m_tied1, svuint8_t, uint8_t,\n+\t\t z0 = svadd_n_u8_m (p0, z0, x0),\n+\t\t z0 = svadd_m (p0, z0, x0))\n+\n+/*\n+** add_w0_u8_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u8_m_untied, svuint8_t, uint8_t,\n+\t\t z0 = svadd_n_u8_m (p0, z1, x0),\n+\t\t z0 = svadd_m (p0, z1, x0))\n+\n+/*\n+** add_1_u8_m_tied1:\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u8_m_tied1, svuint8_t,\n+\t\tz0 = svadd_n_u8_m (p0, z0, 1),\n+\t\tz0 = svadd_m (p0, z0, 1))\n+\n+/*\n+** add_1_u8_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u8_m_untied, svuint8_t,\n+\t\tz0 = svadd_n_u8_m (p0, z1, 1),\n+\t\tz0 = svadd_m (p0, z1, 1))\n+\n+/*\n+** add_m1_u8_m:\n+**\tmov\t(z[0-9]+\\.b), #-1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_u8_m, svuint8_t,\n+\t\tz0 = svadd_n_u8_m (p0, z0, -1),\n+\t\tz0 = svadd_m (p0, z0, -1))\n+\n+/*\n+** add_u8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u8_z_tied1, svuint8_t,\n+\t\tz0 = svadd_u8_z (p0, z0, z1),\n+\t\tz0 = svadd_z (p0, z0, z1))\n+\n+/*\n+** add_u8_z_tied2:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u8_z_tied2, svuint8_t,\n+\t\tz0 = svadd_u8_z (p0, z1, z0),\n+\t\tz0 = svadd_z (p0, z1, z0))\n+\n+/*\n+** add_u8_z_untied:\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, z2\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u8_z_untied, svuint8_t,\n+\t\tz0 = svadd_u8_z (p0, z1, z2),\n+\t\tz0 = svadd_z (p0, z1, z2))\n+\n+/*\n+** add_w0_u8_z_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u8_z_tied1, svuint8_t, uint8_t,\n+\t\t z0 = svadd_n_u8_z (p0, z0, x0),\n+\t\t z0 = svadd_z (p0, z0, x0))\n+\n+/*\n+** add_w0_u8_z_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, \\1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u8_z_untied, svuint8_t, uint8_t,\n+\t\t z0 = svadd_n_u8_z (p0, z1, x0),\n+\t\t z0 = svadd_z (p0, z1, x0))\n+\n+/*\n+** add_1_u8_z_tied1:\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u8_z_tied1, svuint8_t,\n+\t\tz0 = svadd_n_u8_z (p0, z0, 1),\n+\t\tz0 = svadd_z (p0, z0, 1))\n+\n+/*\n+** add_1_u8_z_untied:\n+**\tmov\t(z[0-9]+\\.b), #1\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tadd\tz0\\.b, p0/m, z0\\.b, \\1\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, \\1\n+**\tadd\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u8_z_untied, svuint8_t,\n+\t\tz0 = svadd_n_u8_z (p0, z1, 1),\n+\t\tz0 = svadd_z (p0, z1, 1))\n+\n+/*\n+** add_u8_x_tied1:\n+**\tadd\tz0\\.b, (z0\\.b, z1\\.b|z1\\.b, z0\\.b)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u8_x_tied1, svuint8_t,\n+\t\tz0 = svadd_u8_x (p0, z0, z1),\n+\t\tz0 = svadd_x (p0, z0, z1))\n+\n+/*\n+** add_u8_x_tied2:\n+**\tadd\tz0\\.b, (z0\\.b, z1\\.b|z1\\.b, z0\\.b)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u8_x_tied2, svuint8_t,\n+\t\tz0 = svadd_u8_x (p0, z1, z0),\n+\t\tz0 = svadd_x (p0, z1, z0))\n+\n+/*\n+** add_u8_x_untied:\n+**\tadd\tz0\\.b, (z1\\.b, z2\\.b|z2\\.b, z1\\.b)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_u8_x_untied, svuint8_t,\n+\t\tz0 = svadd_u8_x (p0, z1, z2),\n+\t\tz0 = svadd_x (p0, z1, z2))\n+\n+/*\n+** add_w0_u8_x_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tadd\tz0\\.b, (z0\\.b, \\1|\\1, z0\\.b)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u8_x_tied1, svuint8_t, uint8_t,\n+\t\t z0 = svadd_n_u8_x (p0, z0, x0),\n+\t\t z0 = svadd_x (p0, z0, x0))\n+\n+/*\n+** add_w0_u8_x_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tadd\tz0\\.b, (z1\\.b, \\1|\\1, z1\\.b)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (add_w0_u8_x_untied, svuint8_t, uint8_t,\n+\t\t z0 = svadd_n_u8_x (p0, z1, x0),\n+\t\t z0 = svadd_x (p0, z1, x0))\n+\n+/*\n+** add_1_u8_x_tied1:\n+**\tadd\tz0\\.b, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u8_x_tied1, svuint8_t,\n+\t\tz0 = svadd_n_u8_x (p0, z0, 1),\n+\t\tz0 = svadd_x (p0, z0, 1))\n+\n+/*\n+** add_1_u8_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tadd\tz0\\.b, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_1_u8_x_untied, svuint8_t,\n+\t\tz0 = svadd_n_u8_x (p0, z1, 1),\n+\t\tz0 = svadd_x (p0, z1, 1))\n+\n+/*\n+** add_127_u8_x:\n+**\tadd\tz0\\.b, z0\\.b, #127\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_127_u8_x, svuint8_t,\n+\t\tz0 = svadd_n_u8_x (p0, z0, 127),\n+\t\tz0 = svadd_x (p0, z0, 127))\n+\n+/*\n+** add_128_u8_x:\n+**\tadd\tz0\\.b, z0\\.b, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_128_u8_x, svuint8_t,\n+\t\tz0 = svadd_n_u8_x (p0, z0, 128),\n+\t\tz0 = svadd_x (p0, z0, 128))\n+\n+/*\n+** add_255_u8_x:\n+**\tadd\tz0\\.b, z0\\.b, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_255_u8_x, svuint8_t,\n+\t\tz0 = svadd_n_u8_x (p0, z0, 255),\n+\t\tz0 = svadd_x (p0, z0, 255))\n+\n+/*\n+** add_m1_u8_x:\n+**\tadd\tz0\\.b, z0\\.b, #255\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m1_u8_x, svuint8_t,\n+\t\tz0 = svadd_n_u8_x (p0, z0, -1),\n+\t\tz0 = svadd_x (p0, z0, -1))\n+\n+/*\n+** add_m127_u8_x:\n+**\tadd\tz0\\.b, z0\\.b, #129\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m127_u8_x, svuint8_t,\n+\t\tz0 = svadd_n_u8_x (p0, z0, -127),\n+\t\tz0 = svadd_x (p0, z0, -127))\n+\n+/*\n+** add_m128_u8_x:\n+**\tadd\tz0\\.b, z0\\.b, #128\n+**\tret\n+*/\n+TEST_UNIFORM_Z (add_m128_u8_x, svuint8_t,\n+\t\tz0 = svadd_n_u8_x (p0, z0, -128),\n+\t\tz0 = svadd_x (p0, z0, -128))"}, {"sha": "6c6bfa1c294b30121709de18d992eccb5fbd1460", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/adda_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadda_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadda_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadda_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adda_d0_f16:\n+**\tfadda\th0, p0, h0, z2\\.h\n+**\tret\n+*/\n+TEST_FOLD_LEFT_D (adda_d0_f16, float16_t, svfloat16_t,\n+\t\t  d0 = svadda_f16 (p0, d0, z2),\n+\t\t  d0 = svadda (p0, d0, z2))\n+\n+/*\n+** adda_d1_f16:\n+**\tmov\tv0\\.h\\[0\\], v1\\.h\\[0\\]\n+**\tfadda\th0, p0, h0, z2\\.h\n+**\tret\n+*/\n+TEST_FOLD_LEFT_D (adda_d1_f16, float16_t, svfloat16_t,\n+\t\t  d0 = svadda_f16 (p0, d1, z2),\n+\t\t  d0 = svadda (p0, d1, z2))"}, {"sha": "8b2a1dd1c688aa4c07d5a558801756abaa001262", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/adda_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadda_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadda_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadda_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adda_d0_f32:\n+**\tfadda\ts0, p0, s0, z2\\.s\n+**\tret\n+*/\n+TEST_FOLD_LEFT_D (adda_d0_f32, float32_t, svfloat32_t,\n+\t\t  d0 = svadda_f32 (p0, d0, z2),\n+\t\t  d0 = svadda (p0, d0, z2))\n+\n+/*\n+** adda_d1_f32:\n+**\tfmov\ts0, s1\n+**\tfadda\ts0, p0, s0, z2\\.s\n+**\tret\n+*/\n+TEST_FOLD_LEFT_D (adda_d1_f32, float32_t, svfloat32_t,\n+\t\t  d0 = svadda_f32 (p0, d1, z2),\n+\t\t  d0 = svadda (p0, d1, z2))"}, {"sha": "90a56420a6ae300d805b2029018eae2181346d3d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/adda_f64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadda_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadda_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadda_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adda_d0_f64:\n+**\tfadda\td0, p0, d0, z2\\.d\n+**\tret\n+*/\n+TEST_FOLD_LEFT_D (adda_d0_f64, float64_t, svfloat64_t,\n+\t\t  d0 = svadda_f64 (p0, d0, z2),\n+\t\t  d0 = svadda (p0, d0, z2))\n+\n+/*\n+** adda_d1_f64:\n+**\tfmov\td0, d1\n+**\tfadda\td0, p0, d0, z2\\.d\n+**\tret\n+*/\n+TEST_FOLD_LEFT_D (adda_d1_f64, float64_t, svfloat64_t,\n+\t\t  d0 = svadda_f64 (p0, d1, z2),\n+\t\t  d0 = svadda (p0, d1, z2))"}, {"sha": "7bb0c1de474d0edebcbd64d780d539cf9039ec1d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/addv_f16.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addv_d0_f16_tied:\n+**\tfaddv\th0, p0, z0\\.h\n+**\tret\n+*/\n+TEST_REDUCTION_D (addv_d0_f16_tied, float16_t, svfloat16_t,\n+\t\t  d0 = svaddv_f16 (p0, z0),\n+\t\t  d0 = svaddv (p0, z0))\n+\n+/*\n+** addv_d0_f16_untied:\n+**\tfaddv\th0, p0, z1\\.h\n+**\tret\n+*/\n+TEST_REDUCTION_D (addv_d0_f16_untied, float16_t, svfloat16_t,\n+\t\t  d0 = svaddv_f16 (p0, z1),\n+\t\t  d0 = svaddv (p0, z1))"}, {"sha": "51c6219107b8dc2640c86122f9c619e9dd25794d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/addv_f32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addv_d0_f32_tied:\n+**\tfaddv\ts0, p0, z0\\.s\n+**\tret\n+*/\n+TEST_REDUCTION_D (addv_d0_f32_tied, float32_t, svfloat32_t,\n+\t\t  d0 = svaddv_f32 (p0, z0),\n+\t\t  d0 = svaddv (p0, z0))\n+\n+/*\n+** addv_d0_f32_untied:\n+**\tfaddv\ts0, p0, z1\\.s\n+**\tret\n+*/\n+TEST_REDUCTION_D (addv_d0_f32_untied, float32_t, svfloat32_t,\n+\t\t  d0 = svaddv_f32 (p0, z1),\n+\t\t  d0 = svaddv (p0, z1))"}, {"sha": "882866210c061001d6f98174ec8348ac54084ce8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/addv_f64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addv_d0_f64_tied:\n+**\tfaddv\td0, p0, z0\\.d\n+**\tret\n+*/\n+TEST_REDUCTION_D (addv_d0_f64_tied, float64_t, svfloat64_t,\n+\t\t  d0 = svaddv_f64 (p0, z0),\n+\t\t  d0 = svaddv (p0, z0))\n+\n+/*\n+** addv_d0_f64_untied:\n+**\tfaddv\td0, p0, z1\\.d\n+**\tret\n+*/\n+TEST_REDUCTION_D (addv_d0_f64_untied, float64_t, svfloat64_t,\n+\t\t  d0 = svaddv_f64 (p0, z1),\n+\t\t  d0 = svaddv (p0, z1))"}, {"sha": "05429a47e91bf2be52cf1516c6a6ab44cd6acf60", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/addv_s16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addv_x0_s16:\n+**\tsaddv\t(d[0-9]+), p0, z0\\.h\n+**\tfmov\tx0, \\1\n+**\tret\n+*/\n+TEST_REDUCTION_X (addv_x0_s16, int64_t, svint16_t,\n+\t\t  x0 = svaddv_s16 (p0, z0),\n+\t\t  x0 = svaddv (p0, z0))"}, {"sha": "5f7789a9aebcf049c5dcee30b6071262e929a846", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/addv_s32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addv_x0_s32:\n+**\tsaddv\t(d[0-9]+), p0, z0\\.s\n+**\tfmov\tx0, \\1\n+**\tret\n+*/\n+TEST_REDUCTION_X (addv_x0_s32, int64_t, svint32_t,\n+\t\t  x0 = svaddv_s32 (p0, z0),\n+\t\t  x0 = svaddv (p0, z0))"}, {"sha": "76c480091875b4a6e378a059cdf622d2ee58f354", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/addv_s64.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addv_x0_s64:\n+**\tuaddv\t(d[0-9]+), p0, z0\\.d\n+**\tfmov\tx0, \\1\n+**\tret\n+*/\n+TEST_REDUCTION_X (addv_x0_s64, int64_t, svint64_t,\n+\t\t  x0 = svaddv_s64 (p0, z0),\n+\t\t  x0 = svaddv (p0, z0))"}, {"sha": "8ccb2bf4f8bcfe52b3d7a9d2671741db62057cbd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/addv_s8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addv_x0_s8:\n+**\tsaddv\t(d[0-9]+), p0, z0\\.b\n+**\tfmov\tx0, \\1\n+**\tret\n+*/\n+TEST_REDUCTION_X (addv_x0_s8, int64_t, svint8_t,\n+\t\t  x0 = svaddv_s8 (p0, z0),\n+\t\t  x0 = svaddv (p0, z0))"}, {"sha": "6371921fe0cd8621a9c6e4a24c452d6e800a8a4d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/addv_u16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addv_x0_u16:\n+**\tuaddv\t(d[0-9]+), p0, z0\\.h\n+**\tfmov\tx0, \\1\n+**\tret\n+*/\n+TEST_REDUCTION_X (addv_x0_u16, uint64_t, svuint16_t,\n+\t\t  x0 = svaddv_u16 (p0, z0),\n+\t\t  x0 = svaddv (p0, z0))"}, {"sha": "bdd0ed1f9200652a31faa896d0ffc5e826548abd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/addv_u32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addv_x0_u32:\n+**\tuaddv\t(d[0-9]+), p0, z0\\.s\n+**\tfmov\tx0, \\1\n+**\tret\n+*/\n+TEST_REDUCTION_X (addv_x0_u32, uint64_t, svuint32_t,\n+\t\t  x0 = svaddv_u32 (p0, z0),\n+\t\t  x0 = svaddv (p0, z0))"}, {"sha": "7b1995d3f9d0c04a8ef3df84f2777d8506889bac", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/addv_u64.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addv_x0_u64:\n+**\tuaddv\t(d[0-9]+), p0, z0\\.d\n+**\tfmov\tx0, \\1\n+**\tret\n+*/\n+TEST_REDUCTION_X (addv_x0_u64, uint64_t, svuint64_t,\n+\t\t  x0 = svaddv_u64 (p0, z0),\n+\t\t  x0 = svaddv (p0, z0))"}, {"sha": "0e972f093066070d06107c48ed29769a27dff347", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/addv_u8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Faddv_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** addv_x0_u8:\n+**\tuaddv\t(d[0-9]+), p0, z0\\.b\n+**\tfmov\tx0, \\1\n+**\tret\n+*/\n+TEST_REDUCTION_X (addv_x0_u8, uint64_t, svuint8_t,\n+\t\t  x0 = svaddv_u8 (p0, z0),\n+\t\t  x0 = svaddv (p0, z0))"}, {"sha": "a61eec9712e3f148caa612a2b728ff010c3f86e2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/adrb.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadrb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadrb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadrb.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adrb_u32base_s32offset:\n+**\tadr\tz0\\.s, \\[z0\\.s, z1\\.s\\]\n+**\tret\n+*/\n+TEST_ADR (adrb_u32base_s32offset, svuint32_t, svint32_t,\n+\t  z0 = svadrb_u32base_s32offset (z0, z1),\n+\t  z0 = svadrb_offset (z0, z1))\n+\n+/*\n+** adrb_u32base_u32offset:\n+**\tadr\tz0\\.s, \\[z0\\.s, z1\\.s\\]\n+**\tret\n+*/\n+TEST_ADR (adrb_u32base_u32offset, svuint32_t, svuint32_t,\n+\t  z0 = svadrb_u32base_u32offset (z0, z1),\n+\t  z0 = svadrb_offset (z0, z1))\n+\n+/*\n+** adrb_u64base_s64offset:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d\\]\n+**\tret\n+*/\n+TEST_ADR (adrb_u64base_s64offset, svuint64_t, svint64_t,\n+\t  z0 = svadrb_u64base_s64offset (z0, z1),\n+\t  z0 = svadrb_offset (z0, z1))\n+\n+/*\n+** adrb_ext_u64base_s64offset:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d, sxtw\\]\n+**\tret\n+*/\n+TEST_ADR (adrb_ext_u64base_s64offset, svuint64_t, svint64_t,\n+\t  z0 = svadrb_u64base_s64offset (z0, svextw_s64_x (svptrue_b64 (), z1)),\n+\t  z0 = svadrb_offset (z0, svextw_x (svptrue_b64 (), z1)))\n+\n+/*\n+** adrb_u64base_u64offset:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d\\]\n+**\tret\n+*/\n+TEST_ADR (adrb_u64base_u64offset, svuint64_t, svuint64_t,\n+\t  z0 = svadrb_u64base_u64offset (z0, z1),\n+\t  z0 = svadrb_offset (z0, z1))\n+\n+/*\n+** adrb_ext_u64base_u64offset:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d, uxtw\\]\n+**\tret\n+*/\n+TEST_ADR (adrb_ext_u64base_u64offset, svuint64_t, svuint64_t,\n+\t  z0 = svadrb_u64base_u64offset (z0, svextw_u64_x (svptrue_b64 (), z1)),\n+\t  z0 = svadrb_offset (z0, svextw_x (svptrue_b64 (), z1)))"}, {"sha": "970485bd67d971e7c469a3aed08f7905ef659e85", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/adrd.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadrd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadrd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadrd.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adrd_u32base_s32index:\n+**\tadr\tz0\\.s, \\[z0\\.s, z1\\.s, lsl 3\\]\n+**\tret\n+*/\n+TEST_ADR (adrd_u32base_s32index, svuint32_t, svint32_t,\n+\t  z0 = svadrd_u32base_s32index (z0, z1),\n+\t  z0 = svadrd_index (z0, z1))\n+\n+/*\n+** adrd_u32base_u32index:\n+**\tadr\tz0\\.s, \\[z0\\.s, z1\\.s, lsl 3\\]\n+**\tret\n+*/\n+TEST_ADR (adrd_u32base_u32index, svuint32_t, svuint32_t,\n+\t  z0 = svadrd_u32base_u32index (z0, z1),\n+\t  z0 = svadrd_index (z0, z1))\n+\n+/*\n+** adrd_u64base_s64index:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d, lsl 3\\]\n+**\tret\n+*/\n+TEST_ADR (adrd_u64base_s64index, svuint64_t, svint64_t,\n+\t  z0 = svadrd_u64base_s64index (z0, z1),\n+\t  z0 = svadrd_index (z0, z1))\n+\n+/*\n+** adrd_ext_u64base_s64index:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d, sxtw 3\\]\n+**\tret\n+*/\n+TEST_ADR (adrd_ext_u64base_s64index, svuint64_t, svint64_t,\n+\t  z0 = svadrd_u64base_s64index (z0, svextw_s64_x (svptrue_b64 (), z1)),\n+\t  z0 = svadrd_index (z0, svextw_x (svptrue_b64 (), z1)))\n+\n+/*\n+** adrd_u64base_u64index:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d, lsl 3\\]\n+**\tret\n+*/\n+TEST_ADR (adrd_u64base_u64index, svuint64_t, svuint64_t,\n+\t  z0 = svadrd_u64base_u64index (z0, z1),\n+\t  z0 = svadrd_index (z0, z1))\n+\n+/*\n+** adrd_ext_u64base_u64index:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d, uxtw 3\\]\n+**\tret\n+*/\n+TEST_ADR (adrd_ext_u64base_u64index, svuint64_t, svuint64_t,\n+\t  z0 = svadrd_u64base_u64index (z0, svextw_u64_x (svptrue_b64 (), z1)),\n+\t  z0 = svadrd_index (z0, svextw_x (svptrue_b64 (), z1)))"}, {"sha": "d06f51fe35bc88d9ba47c53dd30b2ab6d0b82fb6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/adrh.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadrh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadrh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadrh.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adrh_u32base_s32index:\n+**\tadr\tz0\\.s, \\[z0\\.s, z1\\.s, lsl 1\\]\n+**\tret\n+*/\n+TEST_ADR (adrh_u32base_s32index, svuint32_t, svint32_t,\n+\t  z0 = svadrh_u32base_s32index (z0, z1),\n+\t  z0 = svadrh_index (z0, z1))\n+\n+/*\n+** adrh_u32base_u32index:\n+**\tadr\tz0\\.s, \\[z0\\.s, z1\\.s, lsl 1\\]\n+**\tret\n+*/\n+TEST_ADR (adrh_u32base_u32index, svuint32_t, svuint32_t,\n+\t  z0 = svadrh_u32base_u32index (z0, z1),\n+\t  z0 = svadrh_index (z0, z1))\n+\n+/*\n+** adrh_u64base_s64index:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d, lsl 1\\]\n+**\tret\n+*/\n+TEST_ADR (adrh_u64base_s64index, svuint64_t, svint64_t,\n+\t  z0 = svadrh_u64base_s64index (z0, z1),\n+\t  z0 = svadrh_index (z0, z1))\n+\n+/*\n+** adrh_ext_u64base_s64index:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d, sxtw 1\\]\n+**\tret\n+*/\n+TEST_ADR (adrh_ext_u64base_s64index, svuint64_t, svint64_t,\n+\t  z0 = svadrh_u64base_s64index (z0, svextw_s64_x (svptrue_b64 (), z1)),\n+\t  z0 = svadrh_index (z0, svextw_x (svptrue_b64 (), z1)))\n+\n+/*\n+** adrh_u64base_u64index:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d, lsl 1\\]\n+**\tret\n+*/\n+TEST_ADR (adrh_u64base_u64index, svuint64_t, svuint64_t,\n+\t  z0 = svadrh_u64base_u64index (z0, z1),\n+\t  z0 = svadrh_index (z0, z1))\n+\n+/*\n+** adrh_ext_u64base_u64index:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d, uxtw 1\\]\n+**\tret\n+*/\n+TEST_ADR (adrh_ext_u64base_u64index, svuint64_t, svuint64_t,\n+\t  z0 = svadrh_u64base_u64index (z0, svextw_u64_x (svptrue_b64 (), z1)),\n+\t  z0 = svadrh_index (z0, svextw_x (svptrue_b64 (), z1)))"}, {"sha": "b23f25a1125da4965eb70042e96c0de1f6a0f003", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/adrw.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadrw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadrw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fadrw.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** adrw_u32base_s32index:\n+**\tadr\tz0\\.s, \\[z0\\.s, z1\\.s, lsl 2\\]\n+**\tret\n+*/\n+TEST_ADR (adrw_u32base_s32index, svuint32_t, svint32_t,\n+\t  z0 = svadrw_u32base_s32index (z0, z1),\n+\t  z0 = svadrw_index (z0, z1))\n+\n+/*\n+** adrw_u32base_u32index:\n+**\tadr\tz0\\.s, \\[z0\\.s, z1\\.s, lsl 2\\]\n+**\tret\n+*/\n+TEST_ADR (adrw_u32base_u32index, svuint32_t, svuint32_t,\n+\t  z0 = svadrw_u32base_u32index (z0, z1),\n+\t  z0 = svadrw_index (z0, z1))\n+\n+/*\n+** adrw_u64base_s64index:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d, lsl 2\\]\n+**\tret\n+*/\n+TEST_ADR (adrw_u64base_s64index, svuint64_t, svint64_t,\n+\t  z0 = svadrw_u64base_s64index (z0, z1),\n+\t  z0 = svadrw_index (z0, z1))\n+\n+/*\n+** adrw_ext_u64base_s64index:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d, sxtw 2\\]\n+**\tret\n+*/\n+TEST_ADR (adrw_ext_u64base_s64index, svuint64_t, svint64_t,\n+\t  z0 = svadrw_u64base_s64index (z0, svextw_s64_x (svptrue_b64 (), z1)),\n+\t  z0 = svadrw_index (z0, svextw_x (svptrue_b64 (), z1)))\n+\n+/*\n+** adrw_u64base_u64index:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d, lsl 2\\]\n+**\tret\n+*/\n+TEST_ADR (adrw_u64base_u64index, svuint64_t, svuint64_t,\n+\t  z0 = svadrw_u64base_u64index (z0, z1),\n+\t  z0 = svadrw_index (z0, z1))\n+\n+/*\n+** adrw_ext_u64base_u64index:\n+**\tadr\tz0\\.d, \\[z0\\.d, z1\\.d, uxtw 2\\]\n+**\tret\n+*/\n+TEST_ADR (adrw_ext_u64base_u64index, svuint64_t, svuint64_t,\n+\t  z0 = svadrw_u64base_u64index (z0, svextw_u64_x (svptrue_b64 (), z1)),\n+\t  z0 = svadrw_index (z0, svextw_x (svptrue_b64 (), z1)))"}, {"sha": "f0c4ff1b159426f983e69d63c6cf0ff3c0ae29b5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/and_b.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_b.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** and_b_z_tied1:\n+**\tand\tp0\\.b, p3/z, (p0\\.b, p1\\.b|p1\\.b, p0\\.b)\n+**\tret\n+*/\n+TEST_UNIFORM_P (and_b_z_tied1,\n+\t\tp0 = svand_b_z (p3, p0, p1),\n+\t\tp0 = svand_z (p3, p0, p1))\n+\n+/*\n+** and_b_z_tied2:\n+**\tand\tp0\\.b, p3/z, (p0\\.b, p1\\.b|p1\\.b, p0\\.b)\n+**\tret\n+*/\n+TEST_UNIFORM_P (and_b_z_tied2,\n+\t\tp0 = svand_b_z (p3, p1, p0),\n+\t\tp0 = svand_z (p3, p1, p0))\n+\n+/*\n+** and_b_z_untied:\n+**\tand\tp0\\.b, p3/z, (p1\\.b, p2\\.b|p2\\.b, p1\\.b)\n+**\tret\n+*/\n+TEST_UNIFORM_P (and_b_z_untied,\n+\t\tp0 = svand_b_z (p3, p1, p2),\n+\t\tp0 = svand_z (p3, p1, p2))"}, {"sha": "d54613e915d221b02d957cf57c44d690328cb430", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/and_s16.c", "status": "added", "additions": 422, "deletions": 0, "changes": 422, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,422 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** and_s16_m_tied1:\n+**\tand\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s16_m_tied1, svint16_t,\n+\t\tz0 = svand_s16_m (p0, z0, z1),\n+\t\tz0 = svand_m (p0, z0, z1))\n+\n+/*\n+** and_s16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s16_m_tied2, svint16_t,\n+\t\tz0 = svand_s16_m (p0, z1, z0),\n+\t\tz0 = svand_m (p0, z1, z0))\n+\n+/*\n+** and_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s16_m_untied, svint16_t,\n+\t\tz0 = svand_s16_m (p0, z1, z2),\n+\t\tz0 = svand_m (p0, z1, z2))\n+\n+/*\n+** and_w0_s16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s16_m_tied1, svint16_t, int16_t,\n+\t\t z0 = svand_n_s16_m (p0, z0, x0),\n+\t\t z0 = svand_m (p0, z0, x0))\n+\n+/*\n+** and_w0_s16_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s16_m_untied, svint16_t, int16_t,\n+\t\t z0 = svand_n_s16_m (p0, z1, x0),\n+\t\t z0 = svand_m (p0, z1, x0))\n+\n+/*\n+** and_1_s16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s16_m_tied1, svint16_t,\n+\t\tz0 = svand_n_s16_m (p0, z0, 1),\n+\t\tz0 = svand_m (p0, z0, 1))\n+\n+/*\n+** and_1_s16_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s16_m_untied, svint16_t,\n+\t\tz0 = svand_n_s16_m (p0, z1, 1),\n+\t\tz0 = svand_m (p0, z1, 1))\n+\n+/*\n+** and_m2_s16_m:\n+**\tmov\t(z[0-9]+\\.h), #-2\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m2_s16_m, svint16_t,\n+\t\tz0 = svand_n_s16_m (p0, z0, -2),\n+\t\tz0 = svand_m (p0, z0, -2))\n+\n+/*\n+** and_255_s16_m_tied1:\n+**\tuxtb\tz0\\.h, p0/m, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s16_m_tied1, svint16_t,\n+\t\tz0 = svand_n_s16_m (p0, z0, 255),\n+\t\tz0 = svand_m (p0, z0, 255))\n+\n+/*\n+** and_255_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuxtb\tz0\\.h, p0/m, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s16_m_untied, svint16_t,\n+\t\tz0 = svand_n_s16_m (p0, z1, 255),\n+\t\tz0 = svand_m (p0, z1, 255))\n+\n+/*\n+** and_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s16_z_tied1, svint16_t,\n+\t\tz0 = svand_s16_z (p0, z0, z1),\n+\t\tz0 = svand_z (p0, z0, z1))\n+\n+/*\n+** and_s16_z_tied2:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s16_z_tied2, svint16_t,\n+\t\tz0 = svand_s16_z (p0, z1, z0),\n+\t\tz0 = svand_z (p0, z1, z0))\n+\n+/*\n+** and_s16_z_untied:\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, z2\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s16_z_untied, svint16_t,\n+\t\tz0 = svand_s16_z (p0, z1, z2),\n+\t\tz0 = svand_z (p0, z1, z2))\n+\n+/*\n+** and_w0_s16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s16_z_tied1, svint16_t, int16_t,\n+\t\t z0 = svand_n_s16_z (p0, z0, x0),\n+\t\t z0 = svand_z (p0, z0, x0))\n+\n+/*\n+** and_w0_s16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tand\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s16_z_untied, svint16_t, int16_t,\n+\t\t z0 = svand_n_s16_z (p0, z1, x0),\n+\t\t z0 = svand_z (p0, z1, x0))\n+\n+/*\n+** and_1_s16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s16_z_tied1, svint16_t,\n+\t\tz0 = svand_n_s16_z (p0, z0, 1),\n+\t\tz0 = svand_z (p0, z0, 1))\n+\n+/*\n+** and_1_s16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), #1\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tand\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s16_z_untied, svint16_t,\n+\t\tz0 = svand_n_s16_z (p0, z1, 1),\n+\t\tz0 = svand_z (p0, z1, 1))\n+\n+/*\n+** and_255_s16_z_tied1:\n+** (\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.h, p0/z, \\1\\.h\n+**\tuxtb\tz0\\.h, p0/m, \\1\\.h\n+** |\n+**\tmov\t(z[0-9]+\\.h), #255\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s16_z_tied1, svint16_t,\n+\t\tz0 = svand_n_s16_z (p0, z0, 255),\n+\t\tz0 = svand_z (p0, z0, 255))\n+\n+/*\n+** and_255_s16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tuxtb\tz0\\.h, p0/m, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s16_z_untied, svint16_t,\n+\t\tz0 = svand_n_s16_z (p0, z1, 255),\n+\t\tz0 = svand_z (p0, z1, 255))\n+\n+/*\n+** and_s16_x_tied1:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s16_x_tied1, svint16_t,\n+\t\tz0 = svand_s16_x (p0, z0, z1),\n+\t\tz0 = svand_x (p0, z0, z1))\n+\n+/*\n+** and_s16_x_tied2:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s16_x_tied2, svint16_t,\n+\t\tz0 = svand_s16_x (p0, z1, z0),\n+\t\tz0 = svand_x (p0, z1, z0))\n+\n+/*\n+** and_s16_x_untied:\n+**\tand\tz0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s16_x_untied, svint16_t,\n+\t\tz0 = svand_s16_x (p0, z1, z2),\n+\t\tz0 = svand_x (p0, z1, z2))\n+\n+/*\n+** and_w0_s16_x_tied1:\n+**\tmov\t(z[0-9]+)\\.h, w0\n+**\tand\tz0\\.d, (z0\\.d, \\1\\.d|\\1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s16_x_tied1, svint16_t, int16_t,\n+\t\t z0 = svand_n_s16_x (p0, z0, x0),\n+\t\t z0 = svand_x (p0, z0, x0))\n+\n+/*\n+** and_w0_s16_x_untied:\n+**\tmov\t(z[0-9]+)\\.h, w0\n+**\tand\tz0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s16_x_untied, svint16_t, int16_t,\n+\t\t z0 = svand_n_s16_x (p0, z1, x0),\n+\t\t z0 = svand_x (p0, z1, x0))\n+\n+/*\n+** and_1_s16_x_tied1:\n+**\tand\tz0\\.h, z0\\.h, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s16_x_tied1, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, 1),\n+\t\tz0 = svand_x (p0, z0, 1))\n+\n+/*\n+** and_1_s16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.h, z0\\.h, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s16_x_untied, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z1, 1),\n+\t\tz0 = svand_x (p0, z1, 1))\n+\n+/*\n+** and_127_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x7f\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_127_s16_x, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, 127),\n+\t\tz0 = svand_x (p0, z0, 127))\n+\n+/*\n+** and_128_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_128_s16_x, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, 128),\n+\t\tz0 = svand_x (p0, z0, 128))\n+\n+/*\n+** and_255_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s16_x, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, 255),\n+\t\tz0 = svand_x (p0, z0, 255))\n+\n+/*\n+** and_256_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x100\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_256_s16_x, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, 256),\n+\t\tz0 = svand_x (p0, z0, 256))\n+\n+/*\n+** and_257_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x101\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_257_s16_x, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, 257),\n+\t\tz0 = svand_x (p0, z0, 257))\n+\n+/*\n+** and_512_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x200\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_512_s16_x, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, 512),\n+\t\tz0 = svand_x (p0, z0, 512))\n+\n+/*\n+** and_65280_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65280_s16_x, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, 0xff00),\n+\t\tz0 = svand_x (p0, z0, 0xff00))\n+\n+/*\n+** and_m127_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff81\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m127_s16_x, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, -127),\n+\t\tz0 = svand_x (p0, z0, -127))\n+\n+/*\n+** and_m128_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m128_s16_x, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, -128),\n+\t\tz0 = svand_x (p0, z0, -128))\n+\n+/*\n+** and_m255_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff01\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m255_s16_x, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, -255),\n+\t\tz0 = svand_x (p0, z0, -255))\n+\n+/*\n+** and_m256_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m256_s16_x, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, -256),\n+\t\tz0 = svand_x (p0, z0, -256))\n+\n+/*\n+** and_m257_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xfeff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m257_s16_x, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, -257),\n+\t\tz0 = svand_x (p0, z0, -257))\n+\n+/*\n+** and_m512_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xfe00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m512_s16_x, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, -512),\n+\t\tz0 = svand_x (p0, z0, -512))\n+\n+/*\n+** and_m32768_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x8000\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m32768_s16_x, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, -0x8000),\n+\t\tz0 = svand_x (p0, z0, -0x8000))\n+\n+/*\n+** and_5_s16_x:\n+**\tmov\t(z[0-9]+)\\.h, #5\n+**\tand\tz0\\.d, (z0\\.d, \\1\\.d|\\1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_5_s16_x, svint16_t,\n+\t\tz0 = svand_n_s16_x (p0, z0, 5),\n+\t\tz0 = svand_x (p0, z0, 5))"}, {"sha": "7f4082b327b226b91b33ae5c21f7f32158a1a1c8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/and_s32.c", "status": "added", "additions": 464, "deletions": 0, "changes": 464, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,464 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** and_s32_m_tied1:\n+**\tand\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s32_m_tied1, svint32_t,\n+\t\tz0 = svand_s32_m (p0, z0, z1),\n+\t\tz0 = svand_m (p0, z0, z1))\n+\n+/*\n+** and_s32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s32_m_tied2, svint32_t,\n+\t\tz0 = svand_s32_m (p0, z1, z0),\n+\t\tz0 = svand_m (p0, z1, z0))\n+\n+/*\n+** and_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s32_m_untied, svint32_t,\n+\t\tz0 = svand_s32_m (p0, z1, z2),\n+\t\tz0 = svand_m (p0, z1, z2))\n+\n+/*\n+** and_w0_s32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s32_m_tied1, svint32_t, int32_t,\n+\t\t z0 = svand_n_s32_m (p0, z0, x0),\n+\t\t z0 = svand_m (p0, z0, x0))\n+\n+/*\n+** and_w0_s32_m_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s32_m_untied, svint32_t, int32_t,\n+\t\t z0 = svand_n_s32_m (p0, z1, x0),\n+\t\t z0 = svand_m (p0, z1, x0))\n+\n+/*\n+** and_1_s32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s32_m_tied1, svint32_t,\n+\t\tz0 = svand_n_s32_m (p0, z0, 1),\n+\t\tz0 = svand_m (p0, z0, 1))\n+\n+/*\n+** and_1_s32_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s32_m_untied, svint32_t,\n+\t\tz0 = svand_n_s32_m (p0, z1, 1),\n+\t\tz0 = svand_m (p0, z1, 1))\n+\n+/*\n+** and_m2_s32_m:\n+**\tmov\t(z[0-9]+\\.s), #-2\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m2_s32_m, svint32_t,\n+\t\tz0 = svand_n_s32_m (p0, z0, -2),\n+\t\tz0 = svand_m (p0, z0, -2))\n+\n+/*\n+** and_255_s32_m_tied1:\n+**\tuxtb\tz0\\.s, p0/m, z0\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s32_m_tied1, svint32_t,\n+\t\tz0 = svand_n_s32_m (p0, z0, 255),\n+\t\tz0 = svand_m (p0, z0, 255))\n+\n+/*\n+** and_255_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuxtb\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s32_m_untied, svint32_t,\n+\t\tz0 = svand_n_s32_m (p0, z1, 255),\n+\t\tz0 = svand_m (p0, z1, 255))\n+\n+/*\n+** and_65535_s32_m_tied1:\n+**\tuxth\tz0\\.s, p0/m, z0\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_s32_m_tied1, svint32_t,\n+\t\tz0 = svand_n_s32_m (p0, z0, 65535),\n+\t\tz0 = svand_m (p0, z0, 65535))\n+\n+/*\n+** and_65535_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuxth\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_s32_m_untied, svint32_t,\n+\t\tz0 = svand_n_s32_m (p0, z1, 65535),\n+\t\tz0 = svand_m (p0, z1, 65535))\n+\n+/*\n+** and_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s32_z_tied1, svint32_t,\n+\t\tz0 = svand_s32_z (p0, z0, z1),\n+\t\tz0 = svand_z (p0, z0, z1))\n+\n+/*\n+** and_s32_z_tied2:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s32_z_tied2, svint32_t,\n+\t\tz0 = svand_s32_z (p0, z1, z0),\n+\t\tz0 = svand_z (p0, z1, z0))\n+\n+/*\n+** and_s32_z_untied:\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, z2\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s32_z_untied, svint32_t,\n+\t\tz0 = svand_s32_z (p0, z1, z2),\n+\t\tz0 = svand_z (p0, z1, z2))\n+\n+/*\n+** and_w0_s32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s32_z_tied1, svint32_t, int32_t,\n+\t\t z0 = svand_n_s32_z (p0, z0, x0),\n+\t\t z0 = svand_z (p0, z0, x0))\n+\n+/*\n+** and_w0_s32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tand\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s32_z_untied, svint32_t, int32_t,\n+\t\t z0 = svand_n_s32_z (p0, z1, x0),\n+\t\t z0 = svand_z (p0, z1, x0))\n+\n+/*\n+** and_1_s32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s32_z_tied1, svint32_t,\n+\t\tz0 = svand_n_s32_z (p0, z0, 1),\n+\t\tz0 = svand_z (p0, z0, 1))\n+\n+/*\n+** and_1_s32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), #1\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tand\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s32_z_untied, svint32_t,\n+\t\tz0 = svand_n_s32_z (p0, z1, 1),\n+\t\tz0 = svand_z (p0, z1, 1))\n+\n+/*\n+** and_255_s32_z_tied1:\n+** (\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.s, p0/z, \\1\\.s\n+**\tuxtb\tz0\\.s, p0/m, \\1\\.s\n+** |\n+**\tmov\t(z[0-9]+\\.s), #255\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s32_z_tied1, svint32_t,\n+\t\tz0 = svand_n_s32_z (p0, z0, 255),\n+\t\tz0 = svand_z (p0, z0, 255))\n+\n+/*\n+** and_255_s32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tuxtb\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s32_z_untied, svint32_t,\n+\t\tz0 = svand_n_s32_z (p0, z1, 255),\n+\t\tz0 = svand_z (p0, z1, 255))\n+\n+/*\n+** and_65535_s32_z_tied1:\n+** (\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.s, p0/z, \\1\\.s\n+**\tuxth\tz0\\.s, p0/m, \\1\\.s\n+** |\n+**\tmov\t(z[0-9]+\\.s), #65535\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_s32_z_tied1, svint32_t,\n+\t\tz0 = svand_n_s32_z (p0, z0, 65535),\n+\t\tz0 = svand_z (p0, z0, 65535))\n+\n+/*\n+** and_65535_s32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tuxth\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_s32_z_untied, svint32_t,\n+\t\tz0 = svand_n_s32_z (p0, z1, 65535),\n+\t\tz0 = svand_z (p0, z1, 65535))\n+\n+/*\n+** and_s32_x_tied1:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s32_x_tied1, svint32_t,\n+\t\tz0 = svand_s32_x (p0, z0, z1),\n+\t\tz0 = svand_x (p0, z0, z1))\n+\n+/*\n+** and_s32_x_tied2:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s32_x_tied2, svint32_t,\n+\t\tz0 = svand_s32_x (p0, z1, z0),\n+\t\tz0 = svand_x (p0, z1, z0))\n+\n+/*\n+** and_s32_x_untied:\n+**\tand\tz0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s32_x_untied, svint32_t,\n+\t\tz0 = svand_s32_x (p0, z1, z2),\n+\t\tz0 = svand_x (p0, z1, z2))\n+\n+/*\n+** and_w0_s32_x_tied1:\n+**\tmov\t(z[0-9]+)\\.s, w0\n+**\tand\tz0\\.d, (z0\\.d, \\1\\.d|\\1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s32_x_tied1, svint32_t, int32_t,\n+\t\t z0 = svand_n_s32_x (p0, z0, x0),\n+\t\t z0 = svand_x (p0, z0, x0))\n+\n+/*\n+** and_w0_s32_x_untied:\n+**\tmov\t(z[0-9]+)\\.s, w0\n+**\tand\tz0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s32_x_untied, svint32_t, int32_t,\n+\t\t z0 = svand_n_s32_x (p0, z1, x0),\n+\t\t z0 = svand_x (p0, z1, x0))\n+\n+/*\n+** and_1_s32_x_tied1:\n+**\tand\tz0\\.s, z0\\.s, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s32_x_tied1, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, 1),\n+\t\tz0 = svand_x (p0, z0, 1))\n+\n+/*\n+** and_1_s32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.s, z0\\.s, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s32_x_untied, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z1, 1),\n+\t\tz0 = svand_x (p0, z1, 1))\n+\n+/*\n+** and_127_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0x7f\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_127_s32_x, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, 127),\n+\t\tz0 = svand_x (p0, z0, 127))\n+\n+/*\n+** and_128_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0x80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_128_s32_x, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, 128),\n+\t\tz0 = svand_x (p0, z0, 128))\n+\n+/*\n+** and_255_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s32_x, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, 255),\n+\t\tz0 = svand_x (p0, z0, 255))\n+\n+/*\n+** and_256_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0x100\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_256_s32_x, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, 256),\n+\t\tz0 = svand_x (p0, z0, 256))\n+\n+/* TODO: Bad code and needs fixing.  */\n+TEST_UNIFORM_Z (and_257_s32_x, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, 257),\n+\t\tz0 = svand_x (p0, z0, 257))\n+\n+/*\n+** and_512_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0x200\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_512_s32_x, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, 512),\n+\t\tz0 = svand_x (p0, z0, 512))\n+\n+/*\n+** and_65280_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xff00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65280_s32_x, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, 0xff00),\n+\t\tz0 = svand_x (p0, z0, 0xff00))\n+\n+/*\n+** and_m127_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xffffff81\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m127_s32_x, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, -127),\n+\t\tz0 = svand_x (p0, z0, -127))\n+\n+/*\n+** and_m128_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xffffff80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m128_s32_x, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, -128),\n+\t\tz0 = svand_x (p0, z0, -128))\n+\n+/*\n+** and_m255_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xffffff01\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m255_s32_x, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, -255),\n+\t\tz0 = svand_x (p0, z0, -255))\n+\n+/*\n+** and_m256_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xffffff00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m256_s32_x, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, -256),\n+\t\tz0 = svand_x (p0, z0, -256))\n+\n+/*\n+** and_m257_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xfffffeff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m257_s32_x, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, -257),\n+\t\tz0 = svand_x (p0, z0, -257))\n+\n+/*\n+** and_m512_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xfffffe00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m512_s32_x, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, -512),\n+\t\tz0 = svand_x (p0, z0, -512))\n+\n+/*\n+** and_m32768_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xffff8000\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m32768_s32_x, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, -0x8000),\n+\t\tz0 = svand_x (p0, z0, -0x8000))\n+\n+/*\n+** and_5_s32_x:\n+**\tmov\t(z[0-9]+)\\.s, #5\n+**\tand\tz0\\.d, (z0\\.d, \\1\\.d|\\1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_5_s32_x, svint32_t,\n+\t\tz0 = svand_n_s32_x (p0, z0, 5),\n+\t\tz0 = svand_x (p0, z0, 5))"}, {"sha": "8868258dca6525190dcfbcebca3c990e36b33db0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/and_s64.c", "status": "added", "additions": 510, "deletions": 0, "changes": 510, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,510 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** and_s64_m_tied1:\n+**\tand\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s64_m_tied1, svint64_t,\n+\t\tz0 = svand_s64_m (p0, z0, z1),\n+\t\tz0 = svand_m (p0, z0, z1))\n+\n+/*\n+** and_s64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s64_m_tied2, svint64_t,\n+\t\tz0 = svand_s64_m (p0, z1, z0),\n+\t\tz0 = svand_m (p0, z1, z0))\n+\n+/*\n+** and_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s64_m_untied, svint64_t,\n+\t\tz0 = svand_s64_m (p0, z1, z2),\n+\t\tz0 = svand_m (p0, z1, z2))\n+\n+/*\n+** and_x0_s64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_x0_s64_m_tied1, svint64_t, int64_t,\n+\t\t z0 = svand_n_s64_m (p0, z0, x0),\n+\t\t z0 = svand_m (p0, z0, x0))\n+\n+/*\n+** and_x0_s64_m_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_x0_s64_m_untied, svint64_t, int64_t,\n+\t\t z0 = svand_n_s64_m (p0, z1, x0),\n+\t\t z0 = svand_m (p0, z1, x0))\n+\n+/*\n+** and_1_s64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s64_m_tied1, svint64_t,\n+\t\tz0 = svand_n_s64_m (p0, z0, 1),\n+\t\tz0 = svand_m (p0, z0, 1))\n+\n+/*\n+** and_1_s64_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s64_m_untied, svint64_t,\n+\t\tz0 = svand_n_s64_m (p0, z1, 1),\n+\t\tz0 = svand_m (p0, z1, 1))\n+\n+/*\n+** and_m2_s64_m:\n+**\tmov\t(z[0-9]+\\.d), #-2\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m2_s64_m, svint64_t,\n+\t\tz0 = svand_n_s64_m (p0, z0, -2),\n+\t\tz0 = svand_m (p0, z0, -2))\n+\n+/*\n+** and_255_s64_m_tied1:\n+**\tuxtb\tz0\\.d, p0/m, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s64_m_tied1, svint64_t,\n+\t\tz0 = svand_n_s64_m (p0, z0, 255),\n+\t\tz0 = svand_m (p0, z0, 255))\n+\n+/*\n+** and_255_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuxtb\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s64_m_untied, svint64_t,\n+\t\tz0 = svand_n_s64_m (p0, z1, 255),\n+\t\tz0 = svand_m (p0, z1, 255))\n+\n+/*\n+** and_65535_s64_m_tied1:\n+**\tuxth\tz0\\.d, p0/m, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_s64_m_tied1, svint64_t,\n+\t\tz0 = svand_n_s64_m (p0, z0, 65535),\n+\t\tz0 = svand_m (p0, z0, 65535))\n+\n+/*\n+** and_65535_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuxth\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_s64_m_untied, svint64_t,\n+\t\tz0 = svand_n_s64_m (p0, z1, 65535),\n+\t\tz0 = svand_m (p0, z1, 65535))\n+\n+/*\n+** and_0xffffffff_s64_m_tied1:\n+**\tuxtw\tz0\\.d, p0/m, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_0xffffffff_s64_m_tied1, svint64_t,\n+\t\tz0 = svand_n_s64_m (p0, z0, 0xffffffff),\n+\t\tz0 = svand_m (p0, z0, 0xffffffff))\n+\n+/*\n+** and_0xffffffff_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuxtw\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_0xffffffff_s64_m_untied, svint64_t,\n+\t\tz0 = svand_n_s64_m (p0, z1, 0xffffffff),\n+\t\tz0 = svand_m (p0, z1, 0xffffffff))\n+\n+/*\n+** and_s64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s64_z_tied1, svint64_t,\n+\t\tz0 = svand_s64_z (p0, z0, z1),\n+\t\tz0 = svand_z (p0, z0, z1))\n+\n+/*\n+** and_s64_z_tied2:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s64_z_tied2, svint64_t,\n+\t\tz0 = svand_s64_z (p0, z1, z0),\n+\t\tz0 = svand_z (p0, z1, z0))\n+\n+/*\n+** and_s64_z_untied:\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, z2\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s64_z_untied, svint64_t,\n+\t\tz0 = svand_s64_z (p0, z1, z2),\n+\t\tz0 = svand_z (p0, z1, z2))\n+\n+/*\n+** and_x0_s64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_x0_s64_z_tied1, svint64_t, int64_t,\n+\t\t z0 = svand_n_s64_z (p0, z0, x0),\n+\t\t z0 = svand_z (p0, z0, x0))\n+\n+/*\n+** and_x0_s64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tand\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_x0_s64_z_untied, svint64_t, int64_t,\n+\t\t z0 = svand_n_s64_z (p0, z1, x0),\n+\t\t z0 = svand_z (p0, z1, x0))\n+\n+/*\n+** and_1_s64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s64_z_tied1, svint64_t,\n+\t\tz0 = svand_n_s64_z (p0, z0, 1),\n+\t\tz0 = svand_z (p0, z0, 1))\n+\n+/*\n+** and_1_s64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), #1\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tand\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s64_z_untied, svint64_t,\n+\t\tz0 = svand_n_s64_z (p0, z1, 1),\n+\t\tz0 = svand_z (p0, z1, 1))\n+\n+/*\n+** and_255_s64_z_tied1:\n+** (\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tuxtb\tz0\\.d, p0/m, \\1\n+** |\n+**\tmov\t(z[0-9]+\\.d), #255\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s64_z_tied1, svint64_t,\n+\t\tz0 = svand_n_s64_z (p0, z0, 255),\n+\t\tz0 = svand_z (p0, z0, 255))\n+\n+/*\n+** and_255_s64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tuxtb\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s64_z_untied, svint64_t,\n+\t\tz0 = svand_n_s64_z (p0, z1, 255),\n+\t\tz0 = svand_z (p0, z1, 255))\n+\n+/*\n+** and_65535_s64_z_tied1:\n+** (\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tuxth\tz0\\.d, p0/m, \\1\n+** |\n+**\tmov\t(z[0-9]+\\.d), #65535\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_s64_z_tied1, svint64_t,\n+\t\tz0 = svand_n_s64_z (p0, z0, 65535),\n+\t\tz0 = svand_z (p0, z0, 65535))\n+\n+/*\n+** and_65535_s64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tuxth\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_s64_z_untied, svint64_t,\n+\t\tz0 = svand_n_s64_z (p0, z1, 65535),\n+\t\tz0 = svand_z (p0, z1, 65535))\n+\n+/*\n+** and_0xffffffff_s64_z_tied1:\n+** (\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tuxtw\tz0\\.d, p0/m, \\1\n+** |\n+**\tmov\t(z[0-9]+\\.d), #4294967295\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_0xffffffff_s64_z_tied1, svint64_t,\n+\t\tz0 = svand_n_s64_z (p0, z0, 0xffffffff),\n+\t\tz0 = svand_z (p0, z0, 0xffffffff))\n+\n+/*\n+** and_0xffffffff_s64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tuxtw\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_0xffffffff_s64_z_untied, svint64_t,\n+\t\tz0 = svand_n_s64_z (p0, z1, 0xffffffff),\n+\t\tz0 = svand_z (p0, z1, 0xffffffff))\n+\n+/*\n+** and_s64_x_tied1:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s64_x_tied1, svint64_t,\n+\t\tz0 = svand_s64_x (p0, z0, z1),\n+\t\tz0 = svand_x (p0, z0, z1))\n+\n+/*\n+** and_s64_x_tied2:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s64_x_tied2, svint64_t,\n+\t\tz0 = svand_s64_x (p0, z1, z0),\n+\t\tz0 = svand_x (p0, z1, z0))\n+\n+/*\n+** and_s64_x_untied:\n+**\tand\tz0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s64_x_untied, svint64_t,\n+\t\tz0 = svand_s64_x (p0, z1, z2),\n+\t\tz0 = svand_x (p0, z1, z2))\n+\n+/*\n+** and_x0_s64_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tand\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_x0_s64_x_tied1, svint64_t, int64_t,\n+\t\t z0 = svand_n_s64_x (p0, z0, x0),\n+\t\t z0 = svand_x (p0, z0, x0))\n+\n+/*\n+** and_x0_s64_x_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tand\tz0\\.d, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_x0_s64_x_untied, svint64_t, int64_t,\n+\t\t z0 = svand_n_s64_x (p0, z1, x0),\n+\t\t z0 = svand_x (p0, z1, x0))\n+\n+/*\n+** and_1_s64_x_tied1:\n+**\tand\tz0\\.d, z0\\.d, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s64_x_tied1, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, 1),\n+\t\tz0 = svand_x (p0, z0, 1))\n+\n+/*\n+** and_1_s64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.d, z0\\.d, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s64_x_untied, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z1, 1),\n+\t\tz0 = svand_x (p0, z1, 1))\n+\n+/*\n+** and_127_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0x7f\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_127_s64_x, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, 127),\n+\t\tz0 = svand_x (p0, z0, 127))\n+\n+/*\n+** and_128_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0x80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_128_s64_x, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, 128),\n+\t\tz0 = svand_x (p0, z0, 128))\n+\n+/*\n+** and_255_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s64_x, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, 255),\n+\t\tz0 = svand_x (p0, z0, 255))\n+\n+/*\n+** and_256_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0x100\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_256_s64_x, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, 256),\n+\t\tz0 = svand_x (p0, z0, 256))\n+\n+/* TODO: Bad code and needs fixing.  */\n+TEST_UNIFORM_Z (and_257_s64_x, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, 257),\n+\t\tz0 = svand_x (p0, z0, 257))\n+\n+/*\n+** and_512_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0x200\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_512_s64_x, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, 512),\n+\t\tz0 = svand_x (p0, z0, 512))\n+\n+/*\n+** and_65280_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xff00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65280_s64_x, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, 0xff00),\n+\t\tz0 = svand_x (p0, z0, 0xff00))\n+\n+/*\n+** and_m127_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xffffffffffffff81\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m127_s64_x, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, -127),\n+\t\tz0 = svand_x (p0, z0, -127))\n+\n+/*\n+** and_m128_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xffffffffffffff80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m128_s64_x, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, -128),\n+\t\tz0 = svand_x (p0, z0, -128))\n+\n+/*\n+** and_m255_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xffffffffffffff01\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m255_s64_x, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, -255),\n+\t\tz0 = svand_x (p0, z0, -255))\n+\n+/*\n+** and_m256_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xffffffffffffff00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m256_s64_x, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, -256),\n+\t\tz0 = svand_x (p0, z0, -256))\n+\n+/*\n+** and_m257_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xfffffffffffffeff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m257_s64_x, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, -257),\n+\t\tz0 = svand_x (p0, z0, -257))\n+\n+/*\n+** and_m512_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xfffffffffffffe00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m512_s64_x, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, -512),\n+\t\tz0 = svand_x (p0, z0, -512))\n+\n+/*\n+** and_m32768_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xffffffffffff8000\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m32768_s64_x, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, -0x8000),\n+\t\tz0 = svand_x (p0, z0, -0x8000))\n+\n+/*\n+** and_5_s64_x:\n+**\tmov\t(z[0-9]+\\.d), #5\n+**\tand\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_5_s64_x, svint64_t,\n+\t\tz0 = svand_n_s64_x (p0, z0, 5),\n+\t\tz0 = svand_x (p0, z0, 5))"}, {"sha": "61d168d3fdf8968295724cdb0e63fcb087d30d27", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/and_s8.c", "status": "added", "additions": 294, "deletions": 0, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,294 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** and_s8_m_tied1:\n+**\tand\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s8_m_tied1, svint8_t,\n+\t\tz0 = svand_s8_m (p0, z0, z1),\n+\t\tz0 = svand_m (p0, z0, z1))\n+\n+/*\n+** and_s8_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s8_m_tied2, svint8_t,\n+\t\tz0 = svand_s8_m (p0, z1, z0),\n+\t\tz0 = svand_m (p0, z1, z0))\n+\n+/*\n+** and_s8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s8_m_untied, svint8_t,\n+\t\tz0 = svand_s8_m (p0, z1, z2),\n+\t\tz0 = svand_m (p0, z1, z2))\n+\n+/*\n+** and_w0_s8_m_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s8_m_tied1, svint8_t, int8_t,\n+\t\t z0 = svand_n_s8_m (p0, z0, x0),\n+\t\t z0 = svand_m (p0, z0, x0))\n+\n+/*\n+** and_w0_s8_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s8_m_untied, svint8_t, int8_t,\n+\t\t z0 = svand_n_s8_m (p0, z1, x0),\n+\t\t z0 = svand_m (p0, z1, x0))\n+\n+/*\n+** and_1_s8_m_tied1:\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s8_m_tied1, svint8_t,\n+\t\tz0 = svand_n_s8_m (p0, z0, 1),\n+\t\tz0 = svand_m (p0, z0, 1))\n+\n+/*\n+** and_1_s8_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s8_m_untied, svint8_t,\n+\t\tz0 = svand_n_s8_m (p0, z1, 1),\n+\t\tz0 = svand_m (p0, z1, 1))\n+\n+/*\n+** and_m2_s8_m:\n+**\tmov\t(z[0-9]+\\.b), #-2\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m2_s8_m, svint8_t,\n+\t\tz0 = svand_n_s8_m (p0, z0, -2),\n+\t\tz0 = svand_m (p0, z0, -2))\n+\n+/*\n+** and_s8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s8_z_tied1, svint8_t,\n+\t\tz0 = svand_s8_z (p0, z0, z1),\n+\t\tz0 = svand_z (p0, z0, z1))\n+\n+/*\n+** and_s8_z_tied2:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s8_z_tied2, svint8_t,\n+\t\tz0 = svand_s8_z (p0, z1, z0),\n+\t\tz0 = svand_z (p0, z1, z0))\n+\n+/*\n+** and_s8_z_untied:\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, z2\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s8_z_untied, svint8_t,\n+\t\tz0 = svand_s8_z (p0, z1, z2),\n+\t\tz0 = svand_z (p0, z1, z2))\n+\n+/*\n+** and_w0_s8_z_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s8_z_tied1, svint8_t, int8_t,\n+\t\t z0 = svand_n_s8_z (p0, z0, x0),\n+\t\t z0 = svand_z (p0, z0, x0))\n+\n+/*\n+** and_w0_s8_z_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, \\1\n+**\tand\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s8_z_untied, svint8_t, int8_t,\n+\t\t z0 = svand_n_s8_z (p0, z1, x0),\n+\t\t z0 = svand_z (p0, z1, x0))\n+\n+/*\n+** and_1_s8_z_tied1:\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s8_z_tied1, svint8_t,\n+\t\tz0 = svand_n_s8_z (p0, z0, 1),\n+\t\tz0 = svand_z (p0, z0, 1))\n+\n+/*\n+** and_1_s8_z_untied:\n+**\tmov\t(z[0-9]+\\.b), #1\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, \\1\n+**\tand\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s8_z_untied, svint8_t,\n+\t\tz0 = svand_n_s8_z (p0, z1, 1),\n+\t\tz0 = svand_z (p0, z1, 1))\n+\n+/*\n+** and_s8_x_tied1:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s8_x_tied1, svint8_t,\n+\t\tz0 = svand_s8_x (p0, z0, z1),\n+\t\tz0 = svand_x (p0, z0, z1))\n+\n+/*\n+** and_s8_x_tied2:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s8_x_tied2, svint8_t,\n+\t\tz0 = svand_s8_x (p0, z1, z0),\n+\t\tz0 = svand_x (p0, z1, z0))\n+\n+/*\n+** and_s8_x_untied:\n+**\tand\tz0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_s8_x_untied, svint8_t,\n+\t\tz0 = svand_s8_x (p0, z1, z2),\n+\t\tz0 = svand_x (p0, z1, z2))\n+\n+/*\n+** and_w0_s8_x_tied1:\n+**\tmov\t(z[0-9]+)\\.b, w0\n+**\tand\tz0\\.d, (z0\\.d, \\1\\.d|\\1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s8_x_tied1, svint8_t, int8_t,\n+\t\t z0 = svand_n_s8_x (p0, z0, x0),\n+\t\t z0 = svand_x (p0, z0, x0))\n+\n+/*\n+** and_w0_s8_x_untied:\n+**\tmov\t(z[0-9]+)\\.b, w0\n+**\tand\tz0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_s8_x_untied, svint8_t, int8_t,\n+\t\t z0 = svand_n_s8_x (p0, z1, x0),\n+\t\t z0 = svand_x (p0, z1, x0))\n+\n+/*\n+** and_1_s8_x_tied1:\n+**\tand\tz0\\.b, z0\\.b, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s8_x_tied1, svint8_t,\n+\t\tz0 = svand_n_s8_x (p0, z0, 1),\n+\t\tz0 = svand_x (p0, z0, 1))\n+\n+/*\n+** and_1_s8_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.b, z0\\.b, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_s8_x_untied, svint8_t,\n+\t\tz0 = svand_n_s8_x (p0, z1, 1),\n+\t\tz0 = svand_x (p0, z1, 1))\n+\n+/*\n+** and_127_s8_x:\n+**\tand\tz0\\.b, z0\\.b, #0x7f\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_127_s8_x, svint8_t,\n+\t\tz0 = svand_n_s8_x (p0, z0, 127),\n+\t\tz0 = svand_x (p0, z0, 127))\n+\n+/*\n+** and_128_s8_x:\n+**\tand\tz0\\.b, z0\\.b, #0x80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_128_s8_x, svint8_t,\n+\t\tz0 = svand_n_s8_x (p0, z0, 128),\n+\t\tz0 = svand_x (p0, z0, 128))\n+\n+/*\n+** and_255_s8_x:\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_s8_x, svint8_t,\n+\t\tz0 = svand_n_s8_x (p0, z0, 255),\n+\t\tz0 = svand_x (p0, z0, 255))\n+\n+/*\n+** and_m127_s8_x:\n+**\tand\tz0\\.b, z0\\.b, #0x81\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m127_s8_x, svint8_t,\n+\t\tz0 = svand_n_s8_x (p0, z0, -127),\n+\t\tz0 = svand_x (p0, z0, -127))\n+\n+/*\n+** and_m128_s8_x:\n+**\tand\tz0\\.b, z0\\.b, #0x80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m128_s8_x, svint8_t,\n+\t\tz0 = svand_n_s8_x (p0, z0, -128),\n+\t\tz0 = svand_x (p0, z0, -128))\n+\n+/*\n+** and_5_s8_x:\n+**\tmov\t(z[0-9]+)\\.b, #5\n+**\tand\tz0\\.d, (z0\\.d, \\1\\.d|\\1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_5_s8_x, svint8_t,\n+\t\tz0 = svand_n_s8_x (p0, z0, 5),\n+\t\tz0 = svand_x (p0, z0, 5))"}, {"sha": "875a08d71d1822c54b3d549ce46e6c951ef38bc6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/and_u16.c", "status": "added", "additions": 422, "deletions": 0, "changes": 422, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,422 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** and_u16_m_tied1:\n+**\tand\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u16_m_tied1, svuint16_t,\n+\t\tz0 = svand_u16_m (p0, z0, z1),\n+\t\tz0 = svand_m (p0, z0, z1))\n+\n+/*\n+** and_u16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u16_m_tied2, svuint16_t,\n+\t\tz0 = svand_u16_m (p0, z1, z0),\n+\t\tz0 = svand_m (p0, z1, z0))\n+\n+/*\n+** and_u16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u16_m_untied, svuint16_t,\n+\t\tz0 = svand_u16_m (p0, z1, z2),\n+\t\tz0 = svand_m (p0, z1, z2))\n+\n+/*\n+** and_w0_u16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u16_m_tied1, svuint16_t, uint16_t,\n+\t\t z0 = svand_n_u16_m (p0, z0, x0),\n+\t\t z0 = svand_m (p0, z0, x0))\n+\n+/*\n+** and_w0_u16_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u16_m_untied, svuint16_t, uint16_t,\n+\t\t z0 = svand_n_u16_m (p0, z1, x0),\n+\t\t z0 = svand_m (p0, z1, x0))\n+\n+/*\n+** and_1_u16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u16_m_tied1, svuint16_t,\n+\t\tz0 = svand_n_u16_m (p0, z0, 1),\n+\t\tz0 = svand_m (p0, z0, 1))\n+\n+/*\n+** and_1_u16_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u16_m_untied, svuint16_t,\n+\t\tz0 = svand_n_u16_m (p0, z1, 1),\n+\t\tz0 = svand_m (p0, z1, 1))\n+\n+/*\n+** and_m2_u16_m:\n+**\tmov\t(z[0-9]+\\.h), #-2\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m2_u16_m, svuint16_t,\n+\t\tz0 = svand_n_u16_m (p0, z0, -2),\n+\t\tz0 = svand_m (p0, z0, -2))\n+\n+/*\n+** and_255_u16_m_tied1:\n+**\tuxtb\tz0\\.h, p0/m, z0\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u16_m_tied1, svuint16_t,\n+\t\tz0 = svand_n_u16_m (p0, z0, 255),\n+\t\tz0 = svand_m (p0, z0, 255))\n+\n+/*\n+** and_255_u16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuxtb\tz0\\.h, p0/m, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u16_m_untied, svuint16_t,\n+\t\tz0 = svand_n_u16_m (p0, z1, 255),\n+\t\tz0 = svand_m (p0, z1, 255))\n+\n+/*\n+** and_u16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u16_z_tied1, svuint16_t,\n+\t\tz0 = svand_u16_z (p0, z0, z1),\n+\t\tz0 = svand_z (p0, z0, z1))\n+\n+/*\n+** and_u16_z_tied2:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u16_z_tied2, svuint16_t,\n+\t\tz0 = svand_u16_z (p0, z1, z0),\n+\t\tz0 = svand_z (p0, z1, z0))\n+\n+/*\n+** and_u16_z_untied:\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, z2\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u16_z_untied, svuint16_t,\n+\t\tz0 = svand_u16_z (p0, z1, z2),\n+\t\tz0 = svand_z (p0, z1, z2))\n+\n+/*\n+** and_w0_u16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u16_z_tied1, svuint16_t, uint16_t,\n+\t\t z0 = svand_n_u16_z (p0, z0, x0),\n+\t\t z0 = svand_z (p0, z0, x0))\n+\n+/*\n+** and_w0_u16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tand\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u16_z_untied, svuint16_t, uint16_t,\n+\t\t z0 = svand_n_u16_z (p0, z1, x0),\n+\t\t z0 = svand_z (p0, z1, x0))\n+\n+/*\n+** and_1_u16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u16_z_tied1, svuint16_t,\n+\t\tz0 = svand_n_u16_z (p0, z0, 1),\n+\t\tz0 = svand_z (p0, z0, 1))\n+\n+/*\n+** and_1_u16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), #1\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tand\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u16_z_untied, svuint16_t,\n+\t\tz0 = svand_n_u16_z (p0, z1, 1),\n+\t\tz0 = svand_z (p0, z1, 1))\n+\n+/*\n+** and_255_u16_z_tied1:\n+** (\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.h, p0/z, \\1\\.h\n+**\tuxtb\tz0\\.h, p0/m, \\1\\.h\n+** |\n+**\tmov\t(z[0-9]+\\.h), #255\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u16_z_tied1, svuint16_t,\n+\t\tz0 = svand_n_u16_z (p0, z0, 255),\n+\t\tz0 = svand_z (p0, z0, 255))\n+\n+/*\n+** and_255_u16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tuxtb\tz0\\.h, p0/m, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u16_z_untied, svuint16_t,\n+\t\tz0 = svand_n_u16_z (p0, z1, 255),\n+\t\tz0 = svand_z (p0, z1, 255))\n+\n+/*\n+** and_u16_x_tied1:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u16_x_tied1, svuint16_t,\n+\t\tz0 = svand_u16_x (p0, z0, z1),\n+\t\tz0 = svand_x (p0, z0, z1))\n+\n+/*\n+** and_u16_x_tied2:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u16_x_tied2, svuint16_t,\n+\t\tz0 = svand_u16_x (p0, z1, z0),\n+\t\tz0 = svand_x (p0, z1, z0))\n+\n+/*\n+** and_u16_x_untied:\n+**\tand\tz0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u16_x_untied, svuint16_t,\n+\t\tz0 = svand_u16_x (p0, z1, z2),\n+\t\tz0 = svand_x (p0, z1, z2))\n+\n+/*\n+** and_w0_u16_x_tied1:\n+**\tmov\t(z[0-9]+)\\.h, w0\n+**\tand\tz0\\.d, (z0\\.d, \\1\\.d|\\1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u16_x_tied1, svuint16_t, uint16_t,\n+\t\t z0 = svand_n_u16_x (p0, z0, x0),\n+\t\t z0 = svand_x (p0, z0, x0))\n+\n+/*\n+** and_w0_u16_x_untied:\n+**\tmov\t(z[0-9]+)\\.h, w0\n+**\tand\tz0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u16_x_untied, svuint16_t, uint16_t,\n+\t\t z0 = svand_n_u16_x (p0, z1, x0),\n+\t\t z0 = svand_x (p0, z1, x0))\n+\n+/*\n+** and_1_u16_x_tied1:\n+**\tand\tz0\\.h, z0\\.h, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u16_x_tied1, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, 1),\n+\t\tz0 = svand_x (p0, z0, 1))\n+\n+/*\n+** and_1_u16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.h, z0\\.h, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u16_x_untied, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z1, 1),\n+\t\tz0 = svand_x (p0, z1, 1))\n+\n+/*\n+** and_127_u16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x7f\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_127_u16_x, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, 127),\n+\t\tz0 = svand_x (p0, z0, 127))\n+\n+/*\n+** and_128_u16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_128_u16_x, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, 128),\n+\t\tz0 = svand_x (p0, z0, 128))\n+\n+/*\n+** and_255_u16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u16_x, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, 255),\n+\t\tz0 = svand_x (p0, z0, 255))\n+\n+/*\n+** and_256_u16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x100\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_256_u16_x, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, 256),\n+\t\tz0 = svand_x (p0, z0, 256))\n+\n+/*\n+** and_257_u16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x101\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_257_u16_x, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, 257),\n+\t\tz0 = svand_x (p0, z0, 257))\n+\n+/*\n+** and_512_u16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x200\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_512_u16_x, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, 512),\n+\t\tz0 = svand_x (p0, z0, 512))\n+\n+/*\n+** and_65280_u16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65280_u16_x, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, 0xff00),\n+\t\tz0 = svand_x (p0, z0, 0xff00))\n+\n+/*\n+** and_m127_u16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff81\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m127_u16_x, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, -127),\n+\t\tz0 = svand_x (p0, z0, -127))\n+\n+/*\n+** and_m128_u16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m128_u16_x, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, -128),\n+\t\tz0 = svand_x (p0, z0, -128))\n+\n+/*\n+** and_m255_u16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff01\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m255_u16_x, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, -255),\n+\t\tz0 = svand_x (p0, z0, -255))\n+\n+/*\n+** and_m256_u16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m256_u16_x, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, -256),\n+\t\tz0 = svand_x (p0, z0, -256))\n+\n+/*\n+** and_m257_u16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xfeff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m257_u16_x, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, -257),\n+\t\tz0 = svand_x (p0, z0, -257))\n+\n+/*\n+** and_m512_u16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xfe00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m512_u16_x, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, -512),\n+\t\tz0 = svand_x (p0, z0, -512))\n+\n+/*\n+** and_m32768_u16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x8000\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m32768_u16_x, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, -0x8000),\n+\t\tz0 = svand_x (p0, z0, -0x8000))\n+\n+/*\n+** and_5_u16_x:\n+**\tmov\t(z[0-9]+)\\.h, #5\n+**\tand\tz0\\.d, (z0\\.d, \\1\\.d|\\1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_5_u16_x, svuint16_t,\n+\t\tz0 = svand_n_u16_x (p0, z0, 5),\n+\t\tz0 = svand_x (p0, z0, 5))"}, {"sha": "80ff503963ff8f4d4ac5bc92ab43658d66a95f82", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/and_u32.c", "status": "added", "additions": 464, "deletions": 0, "changes": 464, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,464 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** and_u32_m_tied1:\n+**\tand\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u32_m_tied1, svuint32_t,\n+\t\tz0 = svand_u32_m (p0, z0, z1),\n+\t\tz0 = svand_m (p0, z0, z1))\n+\n+/*\n+** and_u32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u32_m_tied2, svuint32_t,\n+\t\tz0 = svand_u32_m (p0, z1, z0),\n+\t\tz0 = svand_m (p0, z1, z0))\n+\n+/*\n+** and_u32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u32_m_untied, svuint32_t,\n+\t\tz0 = svand_u32_m (p0, z1, z2),\n+\t\tz0 = svand_m (p0, z1, z2))\n+\n+/*\n+** and_w0_u32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u32_m_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svand_n_u32_m (p0, z0, x0),\n+\t\t z0 = svand_m (p0, z0, x0))\n+\n+/*\n+** and_w0_u32_m_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u32_m_untied, svuint32_t, uint32_t,\n+\t\t z0 = svand_n_u32_m (p0, z1, x0),\n+\t\t z0 = svand_m (p0, z1, x0))\n+\n+/*\n+** and_1_u32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u32_m_tied1, svuint32_t,\n+\t\tz0 = svand_n_u32_m (p0, z0, 1),\n+\t\tz0 = svand_m (p0, z0, 1))\n+\n+/*\n+** and_1_u32_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u32_m_untied, svuint32_t,\n+\t\tz0 = svand_n_u32_m (p0, z1, 1),\n+\t\tz0 = svand_m (p0, z1, 1))\n+\n+/*\n+** and_m2_u32_m:\n+**\tmov\t(z[0-9]+\\.s), #-2\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m2_u32_m, svuint32_t,\n+\t\tz0 = svand_n_u32_m (p0, z0, -2),\n+\t\tz0 = svand_m (p0, z0, -2))\n+\n+/*\n+** and_255_u32_m_tied1:\n+**\tuxtb\tz0\\.s, p0/m, z0\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u32_m_tied1, svuint32_t,\n+\t\tz0 = svand_n_u32_m (p0, z0, 255),\n+\t\tz0 = svand_m (p0, z0, 255))\n+\n+/*\n+** and_255_u32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuxtb\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u32_m_untied, svuint32_t,\n+\t\tz0 = svand_n_u32_m (p0, z1, 255),\n+\t\tz0 = svand_m (p0, z1, 255))\n+\n+/*\n+** and_65535_u32_m_tied1:\n+**\tuxth\tz0\\.s, p0/m, z0\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_u32_m_tied1, svuint32_t,\n+\t\tz0 = svand_n_u32_m (p0, z0, 65535),\n+\t\tz0 = svand_m (p0, z0, 65535))\n+\n+/*\n+** and_65535_u32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuxth\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_u32_m_untied, svuint32_t,\n+\t\tz0 = svand_n_u32_m (p0, z1, 65535),\n+\t\tz0 = svand_m (p0, z1, 65535))\n+\n+/*\n+** and_u32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u32_z_tied1, svuint32_t,\n+\t\tz0 = svand_u32_z (p0, z0, z1),\n+\t\tz0 = svand_z (p0, z0, z1))\n+\n+/*\n+** and_u32_z_tied2:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u32_z_tied2, svuint32_t,\n+\t\tz0 = svand_u32_z (p0, z1, z0),\n+\t\tz0 = svand_z (p0, z1, z0))\n+\n+/*\n+** and_u32_z_untied:\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, z2\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u32_z_untied, svuint32_t,\n+\t\tz0 = svand_u32_z (p0, z1, z2),\n+\t\tz0 = svand_z (p0, z1, z2))\n+\n+/*\n+** and_w0_u32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u32_z_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svand_n_u32_z (p0, z0, x0),\n+\t\t z0 = svand_z (p0, z0, x0))\n+\n+/*\n+** and_w0_u32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tand\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u32_z_untied, svuint32_t, uint32_t,\n+\t\t z0 = svand_n_u32_z (p0, z1, x0),\n+\t\t z0 = svand_z (p0, z1, x0))\n+\n+/*\n+** and_1_u32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u32_z_tied1, svuint32_t,\n+\t\tz0 = svand_n_u32_z (p0, z0, 1),\n+\t\tz0 = svand_z (p0, z0, 1))\n+\n+/*\n+** and_1_u32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), #1\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tand\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u32_z_untied, svuint32_t,\n+\t\tz0 = svand_n_u32_z (p0, z1, 1),\n+\t\tz0 = svand_z (p0, z1, 1))\n+\n+/*\n+** and_255_u32_z_tied1:\n+** (\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.s, p0/z, \\1\\.s\n+**\tuxtb\tz0\\.s, p0/m, \\1\\.s\n+** |\n+**\tmov\t(z[0-9]+\\.s), #255\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u32_z_tied1, svuint32_t,\n+\t\tz0 = svand_n_u32_z (p0, z0, 255),\n+\t\tz0 = svand_z (p0, z0, 255))\n+\n+/*\n+** and_255_u32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tuxtb\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u32_z_untied, svuint32_t,\n+\t\tz0 = svand_n_u32_z (p0, z1, 255),\n+\t\tz0 = svand_z (p0, z1, 255))\n+\n+/*\n+** and_65535_u32_z_tied1:\n+** (\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.s, p0/z, \\1\\.s\n+**\tuxth\tz0\\.s, p0/m, \\1\\.s\n+** |\n+**\tmov\t(z[0-9]+\\.s), #65535\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_u32_z_tied1, svuint32_t,\n+\t\tz0 = svand_n_u32_z (p0, z0, 65535),\n+\t\tz0 = svand_z (p0, z0, 65535))\n+\n+/*\n+** and_65535_u32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tuxth\tz0\\.s, p0/m, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_u32_z_untied, svuint32_t,\n+\t\tz0 = svand_n_u32_z (p0, z1, 65535),\n+\t\tz0 = svand_z (p0, z1, 65535))\n+\n+/*\n+** and_u32_x_tied1:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u32_x_tied1, svuint32_t,\n+\t\tz0 = svand_u32_x (p0, z0, z1),\n+\t\tz0 = svand_x (p0, z0, z1))\n+\n+/*\n+** and_u32_x_tied2:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u32_x_tied2, svuint32_t,\n+\t\tz0 = svand_u32_x (p0, z1, z0),\n+\t\tz0 = svand_x (p0, z1, z0))\n+\n+/*\n+** and_u32_x_untied:\n+**\tand\tz0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u32_x_untied, svuint32_t,\n+\t\tz0 = svand_u32_x (p0, z1, z2),\n+\t\tz0 = svand_x (p0, z1, z2))\n+\n+/*\n+** and_w0_u32_x_tied1:\n+**\tmov\t(z[0-9]+)\\.s, w0\n+**\tand\tz0\\.d, (z0\\.d, \\1\\.d|\\1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u32_x_tied1, svuint32_t, uint32_t,\n+\t\t z0 = svand_n_u32_x (p0, z0, x0),\n+\t\t z0 = svand_x (p0, z0, x0))\n+\n+/*\n+** and_w0_u32_x_untied:\n+**\tmov\t(z[0-9]+)\\.s, w0\n+**\tand\tz0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u32_x_untied, svuint32_t, uint32_t,\n+\t\t z0 = svand_n_u32_x (p0, z1, x0),\n+\t\t z0 = svand_x (p0, z1, x0))\n+\n+/*\n+** and_1_u32_x_tied1:\n+**\tand\tz0\\.s, z0\\.s, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u32_x_tied1, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, 1),\n+\t\tz0 = svand_x (p0, z0, 1))\n+\n+/*\n+** and_1_u32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.s, z0\\.s, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u32_x_untied, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z1, 1),\n+\t\tz0 = svand_x (p0, z1, 1))\n+\n+/*\n+** and_127_u32_x:\n+**\tand\tz0\\.s, z0\\.s, #0x7f\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_127_u32_x, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, 127),\n+\t\tz0 = svand_x (p0, z0, 127))\n+\n+/*\n+** and_128_u32_x:\n+**\tand\tz0\\.s, z0\\.s, #0x80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_128_u32_x, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, 128),\n+\t\tz0 = svand_x (p0, z0, 128))\n+\n+/*\n+** and_255_u32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u32_x, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, 255),\n+\t\tz0 = svand_x (p0, z0, 255))\n+\n+/*\n+** and_256_u32_x:\n+**\tand\tz0\\.s, z0\\.s, #0x100\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_256_u32_x, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, 256),\n+\t\tz0 = svand_x (p0, z0, 256))\n+\n+/* TODO: Bad code and needs fixing.  */\n+TEST_UNIFORM_Z (and_257_u32_x, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, 257),\n+\t\tz0 = svand_x (p0, z0, 257))\n+\n+/*\n+** and_512_u32_x:\n+**\tand\tz0\\.s, z0\\.s, #0x200\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_512_u32_x, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, 512),\n+\t\tz0 = svand_x (p0, z0, 512))\n+\n+/*\n+** and_65280_u32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xff00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65280_u32_x, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, 0xff00),\n+\t\tz0 = svand_x (p0, z0, 0xff00))\n+\n+/*\n+** and_m127_u32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xffffff81\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m127_u32_x, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, -127),\n+\t\tz0 = svand_x (p0, z0, -127))\n+\n+/*\n+** and_m128_u32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xffffff80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m128_u32_x, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, -128),\n+\t\tz0 = svand_x (p0, z0, -128))\n+\n+/*\n+** and_m255_u32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xffffff01\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m255_u32_x, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, -255),\n+\t\tz0 = svand_x (p0, z0, -255))\n+\n+/*\n+** and_m256_u32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xffffff00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m256_u32_x, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, -256),\n+\t\tz0 = svand_x (p0, z0, -256))\n+\n+/*\n+** and_m257_u32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xfffffeff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m257_u32_x, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, -257),\n+\t\tz0 = svand_x (p0, z0, -257))\n+\n+/*\n+** and_m512_u32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xfffffe00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m512_u32_x, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, -512),\n+\t\tz0 = svand_x (p0, z0, -512))\n+\n+/*\n+** and_m32768_u32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xffff8000\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m32768_u32_x, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, -0x8000),\n+\t\tz0 = svand_x (p0, z0, -0x8000))\n+\n+/*\n+** and_5_u32_x:\n+**\tmov\t(z[0-9]+)\\.s, #5\n+**\tand\tz0\\.d, (z0\\.d, \\1\\.d|\\1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_5_u32_x, svuint32_t,\n+\t\tz0 = svand_n_u32_x (p0, z0, 5),\n+\t\tz0 = svand_x (p0, z0, 5))"}, {"sha": "906b19c37353ccbbcd16bff30f73a49919f031a5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/and_u64.c", "status": "added", "additions": 510, "deletions": 0, "changes": 510, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,510 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** and_u64_m_tied1:\n+**\tand\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u64_m_tied1, svuint64_t,\n+\t\tz0 = svand_u64_m (p0, z0, z1),\n+\t\tz0 = svand_m (p0, z0, z1))\n+\n+/*\n+** and_u64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u64_m_tied2, svuint64_t,\n+\t\tz0 = svand_u64_m (p0, z1, z0),\n+\t\tz0 = svand_m (p0, z1, z0))\n+\n+/*\n+** and_u64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u64_m_untied, svuint64_t,\n+\t\tz0 = svand_u64_m (p0, z1, z2),\n+\t\tz0 = svand_m (p0, z1, z2))\n+\n+/*\n+** and_x0_u64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_x0_u64_m_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svand_n_u64_m (p0, z0, x0),\n+\t\t z0 = svand_m (p0, z0, x0))\n+\n+/*\n+** and_x0_u64_m_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_x0_u64_m_untied, svuint64_t, uint64_t,\n+\t\t z0 = svand_n_u64_m (p0, z1, x0),\n+\t\t z0 = svand_m (p0, z1, x0))\n+\n+/*\n+** and_1_u64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u64_m_tied1, svuint64_t,\n+\t\tz0 = svand_n_u64_m (p0, z0, 1),\n+\t\tz0 = svand_m (p0, z0, 1))\n+\n+/*\n+** and_1_u64_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u64_m_untied, svuint64_t,\n+\t\tz0 = svand_n_u64_m (p0, z1, 1),\n+\t\tz0 = svand_m (p0, z1, 1))\n+\n+/*\n+** and_m2_u64_m:\n+**\tmov\t(z[0-9]+\\.d), #-2\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m2_u64_m, svuint64_t,\n+\t\tz0 = svand_n_u64_m (p0, z0, -2),\n+\t\tz0 = svand_m (p0, z0, -2))\n+\n+/*\n+** and_255_u64_m_tied1:\n+**\tuxtb\tz0\\.d, p0/m, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u64_m_tied1, svuint64_t,\n+\t\tz0 = svand_n_u64_m (p0, z0, 255),\n+\t\tz0 = svand_m (p0, z0, 255))\n+\n+/*\n+** and_255_u64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuxtb\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u64_m_untied, svuint64_t,\n+\t\tz0 = svand_n_u64_m (p0, z1, 255),\n+\t\tz0 = svand_m (p0, z1, 255))\n+\n+/*\n+** and_65535_u64_m_tied1:\n+**\tuxth\tz0\\.d, p0/m, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_u64_m_tied1, svuint64_t,\n+\t\tz0 = svand_n_u64_m (p0, z0, 65535),\n+\t\tz0 = svand_m (p0, z0, 65535))\n+\n+/*\n+** and_65535_u64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuxth\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_u64_m_untied, svuint64_t,\n+\t\tz0 = svand_n_u64_m (p0, z1, 65535),\n+\t\tz0 = svand_m (p0, z1, 65535))\n+\n+/*\n+** and_0xffffffff_u64_m_tied1:\n+**\tuxtw\tz0\\.d, p0/m, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_0xffffffff_u64_m_tied1, svuint64_t,\n+\t\tz0 = svand_n_u64_m (p0, z0, 0xffffffff),\n+\t\tz0 = svand_m (p0, z0, 0xffffffff))\n+\n+/*\n+** and_0xffffffff_u64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tuxtw\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_0xffffffff_u64_m_untied, svuint64_t,\n+\t\tz0 = svand_n_u64_m (p0, z1, 0xffffffff),\n+\t\tz0 = svand_m (p0, z1, 0xffffffff))\n+\n+/*\n+** and_u64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u64_z_tied1, svuint64_t,\n+\t\tz0 = svand_u64_z (p0, z0, z1),\n+\t\tz0 = svand_z (p0, z0, z1))\n+\n+/*\n+** and_u64_z_tied2:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u64_z_tied2, svuint64_t,\n+\t\tz0 = svand_u64_z (p0, z1, z0),\n+\t\tz0 = svand_z (p0, z1, z0))\n+\n+/*\n+** and_u64_z_untied:\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, z2\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u64_z_untied, svuint64_t,\n+\t\tz0 = svand_u64_z (p0, z1, z2),\n+\t\tz0 = svand_z (p0, z1, z2))\n+\n+/*\n+** and_x0_u64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_x0_u64_z_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svand_n_u64_z (p0, z0, x0),\n+\t\t z0 = svand_z (p0, z0, x0))\n+\n+/*\n+** and_x0_u64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tand\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_x0_u64_z_untied, svuint64_t, uint64_t,\n+\t\t z0 = svand_n_u64_z (p0, z1, x0),\n+\t\t z0 = svand_z (p0, z1, x0))\n+\n+/*\n+** and_1_u64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u64_z_tied1, svuint64_t,\n+\t\tz0 = svand_n_u64_z (p0, z0, 1),\n+\t\tz0 = svand_z (p0, z0, 1))\n+\n+/*\n+** and_1_u64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), #1\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tand\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u64_z_untied, svuint64_t,\n+\t\tz0 = svand_n_u64_z (p0, z1, 1),\n+\t\tz0 = svand_z (p0, z1, 1))\n+\n+/*\n+** and_255_u64_z_tied1:\n+** (\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tuxtb\tz0\\.d, p0/m, \\1\n+** |\n+**\tmov\t(z[0-9]+\\.d), #255\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u64_z_tied1, svuint64_t,\n+\t\tz0 = svand_n_u64_z (p0, z0, 255),\n+\t\tz0 = svand_z (p0, z0, 255))\n+\n+/*\n+** and_255_u64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tuxtb\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u64_z_untied, svuint64_t,\n+\t\tz0 = svand_n_u64_z (p0, z1, 255),\n+\t\tz0 = svand_z (p0, z1, 255))\n+\n+/*\n+** and_65535_u64_z_tied1:\n+** (\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tuxth\tz0\\.d, p0/m, \\1\n+** |\n+**\tmov\t(z[0-9]+\\.d), #65535\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_u64_z_tied1, svuint64_t,\n+\t\tz0 = svand_n_u64_z (p0, z0, 65535),\n+\t\tz0 = svand_z (p0, z0, 65535))\n+\n+/*\n+** and_65535_u64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tuxth\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65535_u64_z_untied, svuint64_t,\n+\t\tz0 = svand_n_u64_z (p0, z1, 65535),\n+\t\tz0 = svand_z (p0, z1, 65535))\n+\n+/*\n+** and_0xffffffff_u64_z_tied1:\n+** (\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tuxtw\tz0\\.d, p0/m, \\1\n+** |\n+**\tmov\t(z[0-9]+\\.d), #4294967295\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_0xffffffff_u64_z_tied1, svuint64_t,\n+\t\tz0 = svand_n_u64_z (p0, z0, 0xffffffff),\n+\t\tz0 = svand_z (p0, z0, 0xffffffff))\n+\n+/*\n+** and_0xffffffff_u64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tuxtw\tz0\\.d, p0/m, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_0xffffffff_u64_z_untied, svuint64_t,\n+\t\tz0 = svand_n_u64_z (p0, z1, 0xffffffff),\n+\t\tz0 = svand_z (p0, z1, 0xffffffff))\n+\n+/*\n+** and_u64_x_tied1:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u64_x_tied1, svuint64_t,\n+\t\tz0 = svand_u64_x (p0, z0, z1),\n+\t\tz0 = svand_x (p0, z0, z1))\n+\n+/*\n+** and_u64_x_tied2:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u64_x_tied2, svuint64_t,\n+\t\tz0 = svand_u64_x (p0, z1, z0),\n+\t\tz0 = svand_x (p0, z1, z0))\n+\n+/*\n+** and_u64_x_untied:\n+**\tand\tz0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u64_x_untied, svuint64_t,\n+\t\tz0 = svand_u64_x (p0, z1, z2),\n+\t\tz0 = svand_x (p0, z1, z2))\n+\n+/*\n+** and_x0_u64_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tand\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_x0_u64_x_tied1, svuint64_t, uint64_t,\n+\t\t z0 = svand_n_u64_x (p0, z0, x0),\n+\t\t z0 = svand_x (p0, z0, x0))\n+\n+/*\n+** and_x0_u64_x_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tand\tz0\\.d, (z1\\.d, \\1|\\1, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_x0_u64_x_untied, svuint64_t, uint64_t,\n+\t\t z0 = svand_n_u64_x (p0, z1, x0),\n+\t\t z0 = svand_x (p0, z1, x0))\n+\n+/*\n+** and_1_u64_x_tied1:\n+**\tand\tz0\\.d, z0\\.d, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u64_x_tied1, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, 1),\n+\t\tz0 = svand_x (p0, z0, 1))\n+\n+/*\n+** and_1_u64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.d, z0\\.d, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u64_x_untied, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z1, 1),\n+\t\tz0 = svand_x (p0, z1, 1))\n+\n+/*\n+** and_127_u64_x:\n+**\tand\tz0\\.d, z0\\.d, #0x7f\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_127_u64_x, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, 127),\n+\t\tz0 = svand_x (p0, z0, 127))\n+\n+/*\n+** and_128_u64_x:\n+**\tand\tz0\\.d, z0\\.d, #0x80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_128_u64_x, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, 128),\n+\t\tz0 = svand_x (p0, z0, 128))\n+\n+/*\n+** and_255_u64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u64_x, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, 255),\n+\t\tz0 = svand_x (p0, z0, 255))\n+\n+/*\n+** and_256_u64_x:\n+**\tand\tz0\\.d, z0\\.d, #0x100\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_256_u64_x, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, 256),\n+\t\tz0 = svand_x (p0, z0, 256))\n+\n+/* TODO: Bad code and needs fixing.  */\n+TEST_UNIFORM_Z (and_257_u64_x, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, 257),\n+\t\tz0 = svand_x (p0, z0, 257))\n+\n+/*\n+** and_512_u64_x:\n+**\tand\tz0\\.d, z0\\.d, #0x200\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_512_u64_x, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, 512),\n+\t\tz0 = svand_x (p0, z0, 512))\n+\n+/*\n+** and_65280_u64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xff00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_65280_u64_x, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, 0xff00),\n+\t\tz0 = svand_x (p0, z0, 0xff00))\n+\n+/*\n+** and_m127_u64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xffffffffffffff81\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m127_u64_x, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, -127),\n+\t\tz0 = svand_x (p0, z0, -127))\n+\n+/*\n+** and_m128_u64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xffffffffffffff80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m128_u64_x, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, -128),\n+\t\tz0 = svand_x (p0, z0, -128))\n+\n+/*\n+** and_m255_u64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xffffffffffffff01\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m255_u64_x, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, -255),\n+\t\tz0 = svand_x (p0, z0, -255))\n+\n+/*\n+** and_m256_u64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xffffffffffffff00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m256_u64_x, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, -256),\n+\t\tz0 = svand_x (p0, z0, -256))\n+\n+/*\n+** and_m257_u64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xfffffffffffffeff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m257_u64_x, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, -257),\n+\t\tz0 = svand_x (p0, z0, -257))\n+\n+/*\n+** and_m512_u64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xfffffffffffffe00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m512_u64_x, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, -512),\n+\t\tz0 = svand_x (p0, z0, -512))\n+\n+/*\n+** and_m32768_u64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xffffffffffff8000\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m32768_u64_x, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, -0x8000),\n+\t\tz0 = svand_x (p0, z0, -0x8000))\n+\n+/*\n+** and_5_u64_x:\n+**\tmov\t(z[0-9]+\\.d), #5\n+**\tand\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_5_u64_x, svuint64_t,\n+\t\tz0 = svand_n_u64_x (p0, z0, 5),\n+\t\tz0 = svand_x (p0, z0, 5))"}, {"sha": "b0f1c9529f05d614a1b37bdba68caf843ae12f65", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/and_u8.c", "status": "added", "additions": 294, "deletions": 0, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fand_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,294 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** and_u8_m_tied1:\n+**\tand\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u8_m_tied1, svuint8_t,\n+\t\tz0 = svand_u8_m (p0, z0, z1),\n+\t\tz0 = svand_m (p0, z0, z1))\n+\n+/*\n+** and_u8_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u8_m_tied2, svuint8_t,\n+\t\tz0 = svand_u8_m (p0, z1, z0),\n+\t\tz0 = svand_m (p0, z1, z0))\n+\n+/*\n+** and_u8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u8_m_untied, svuint8_t,\n+\t\tz0 = svand_u8_m (p0, z1, z2),\n+\t\tz0 = svand_m (p0, z1, z2))\n+\n+/*\n+** and_w0_u8_m_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u8_m_tied1, svuint8_t, uint8_t,\n+\t\t z0 = svand_n_u8_m (p0, z0, x0),\n+\t\t z0 = svand_m (p0, z0, x0))\n+\n+/*\n+** and_w0_u8_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u8_m_untied, svuint8_t, uint8_t,\n+\t\t z0 = svand_n_u8_m (p0, z1, x0),\n+\t\t z0 = svand_m (p0, z1, x0))\n+\n+/*\n+** and_1_u8_m_tied1:\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u8_m_tied1, svuint8_t,\n+\t\tz0 = svand_n_u8_m (p0, z0, 1),\n+\t\tz0 = svand_m (p0, z0, 1))\n+\n+/*\n+** and_1_u8_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u8_m_untied, svuint8_t,\n+\t\tz0 = svand_n_u8_m (p0, z1, 1),\n+\t\tz0 = svand_m (p0, z1, 1))\n+\n+/*\n+** and_m2_u8_m:\n+**\tmov\t(z[0-9]+\\.b), #-2\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m2_u8_m, svuint8_t,\n+\t\tz0 = svand_n_u8_m (p0, z0, -2),\n+\t\tz0 = svand_m (p0, z0, -2))\n+\n+/*\n+** and_u8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u8_z_tied1, svuint8_t,\n+\t\tz0 = svand_u8_z (p0, z0, z1),\n+\t\tz0 = svand_z (p0, z0, z1))\n+\n+/*\n+** and_u8_z_tied2:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u8_z_tied2, svuint8_t,\n+\t\tz0 = svand_u8_z (p0, z1, z0),\n+\t\tz0 = svand_z (p0, z1, z0))\n+\n+/*\n+** and_u8_z_untied:\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, z2\\.b\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, z2\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u8_z_untied, svuint8_t,\n+\t\tz0 = svand_u8_z (p0, z1, z2),\n+\t\tz0 = svand_z (p0, z1, z2))\n+\n+/*\n+** and_w0_u8_z_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u8_z_tied1, svuint8_t, uint8_t,\n+\t\t z0 = svand_n_u8_z (p0, z0, x0),\n+\t\t z0 = svand_z (p0, z0, x0))\n+\n+/*\n+** and_w0_u8_z_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, \\1\n+**\tand\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u8_z_untied, svuint8_t, uint8_t,\n+\t\t z0 = svand_n_u8_z (p0, z1, x0),\n+\t\t z0 = svand_z (p0, z1, x0))\n+\n+/*\n+** and_1_u8_z_tied1:\n+**\tmov\t(z[0-9]+\\.b), #1\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u8_z_tied1, svuint8_t,\n+\t\tz0 = svand_n_u8_z (p0, z0, 1),\n+\t\tz0 = svand_z (p0, z0, 1))\n+\n+/*\n+** and_1_u8_z_untied:\n+**\tmov\t(z[0-9]+\\.b), #1\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tand\tz0\\.b, p0/m, z0\\.b, \\1\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, \\1\n+**\tand\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u8_z_untied, svuint8_t,\n+\t\tz0 = svand_n_u8_z (p0, z1, 1),\n+\t\tz0 = svand_z (p0, z1, 1))\n+\n+/*\n+** and_u8_x_tied1:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u8_x_tied1, svuint8_t,\n+\t\tz0 = svand_u8_x (p0, z0, z1),\n+\t\tz0 = svand_x (p0, z0, z1))\n+\n+/*\n+** and_u8_x_tied2:\n+**\tand\tz0\\.d, (z0\\.d, z1\\.d|z1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u8_x_tied2, svuint8_t,\n+\t\tz0 = svand_u8_x (p0, z1, z0),\n+\t\tz0 = svand_x (p0, z1, z0))\n+\n+/*\n+** and_u8_x_untied:\n+**\tand\tz0\\.d, (z1\\.d, z2\\.d|z2\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_u8_x_untied, svuint8_t,\n+\t\tz0 = svand_u8_x (p0, z1, z2),\n+\t\tz0 = svand_x (p0, z1, z2))\n+\n+/*\n+** and_w0_u8_x_tied1:\n+**\tmov\t(z[0-9]+)\\.b, w0\n+**\tand\tz0\\.d, (z0\\.d, \\1\\.d|\\1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u8_x_tied1, svuint8_t, uint8_t,\n+\t\t z0 = svand_n_u8_x (p0, z0, x0),\n+\t\t z0 = svand_x (p0, z0, x0))\n+\n+/*\n+** and_w0_u8_x_untied:\n+**\tmov\t(z[0-9]+)\\.b, w0\n+**\tand\tz0\\.d, (z1\\.d, \\1\\.d|\\1\\.d, z1\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (and_w0_u8_x_untied, svuint8_t, uint8_t,\n+\t\t z0 = svand_n_u8_x (p0, z1, x0),\n+\t\t z0 = svand_x (p0, z1, x0))\n+\n+/*\n+** and_1_u8_x_tied1:\n+**\tand\tz0\\.b, z0\\.b, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u8_x_tied1, svuint8_t,\n+\t\tz0 = svand_n_u8_x (p0, z0, 1),\n+\t\tz0 = svand_x (p0, z0, 1))\n+\n+/*\n+** and_1_u8_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.b, z0\\.b, #0x1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_1_u8_x_untied, svuint8_t,\n+\t\tz0 = svand_n_u8_x (p0, z1, 1),\n+\t\tz0 = svand_x (p0, z1, 1))\n+\n+/*\n+** and_127_u8_x:\n+**\tand\tz0\\.b, z0\\.b, #0x7f\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_127_u8_x, svuint8_t,\n+\t\tz0 = svand_n_u8_x (p0, z0, 127),\n+\t\tz0 = svand_x (p0, z0, 127))\n+\n+/*\n+** and_128_u8_x:\n+**\tand\tz0\\.b, z0\\.b, #0x80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_128_u8_x, svuint8_t,\n+\t\tz0 = svand_n_u8_x (p0, z0, 128),\n+\t\tz0 = svand_x (p0, z0, 128))\n+\n+/*\n+** and_255_u8_x:\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_255_u8_x, svuint8_t,\n+\t\tz0 = svand_n_u8_x (p0, z0, 255),\n+\t\tz0 = svand_x (p0, z0, 255))\n+\n+/*\n+** and_m127_u8_x:\n+**\tand\tz0\\.b, z0\\.b, #0x81\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m127_u8_x, svuint8_t,\n+\t\tz0 = svand_n_u8_x (p0, z0, -127),\n+\t\tz0 = svand_x (p0, z0, -127))\n+\n+/*\n+** and_m128_u8_x:\n+**\tand\tz0\\.b, z0\\.b, #0x80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_m128_u8_x, svuint8_t,\n+\t\tz0 = svand_n_u8_x (p0, z0, -128),\n+\t\tz0 = svand_x (p0, z0, -128))\n+\n+/*\n+** and_5_u8_x:\n+**\tmov\t(z[0-9]+)\\.b, #5\n+**\tand\tz0\\.d, (z0\\.d, \\1\\.d|\\1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (and_5_u8_x, svuint8_t,\n+\t\tz0 = svand_n_u8_x (p0, z0, 5),\n+\t\tz0 = svand_x (p0, z0, 5))"}, {"sha": "16761b823bd79862f464f015100bffb2d4d8a71d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/andv_s16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** andv_x0_s16:\n+**\tandv\th([0-9]+), p0, z0\\.h\n+**\tumov\tw0, v\\1\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_REDUCTION_X (andv_x0_s16, int16_t, svint16_t,\n+\t\t  x0 = svandv_s16 (p0, z0),\n+\t\t  x0 = svandv (p0, z0))"}, {"sha": "bccc91e219b71b9df464036dcb5fa0592e9398dd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/andv_s32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** andv_x0_s32:\n+**\tandv\t(s[0-9]+), p0, z0\\.s\n+**\tfmov\tw0, \\1\n+**\tret\n+*/\n+TEST_REDUCTION_X (andv_x0_s32, int32_t, svint32_t,\n+\t\t  x0 = svandv_s32 (p0, z0),\n+\t\t  x0 = svandv (p0, z0))"}, {"sha": "53488b6e38aadfded8c05bcd2ce241ad202f1f8f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/andv_s64.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** andv_x0_s64:\n+**\tandv\t(d[0-9]+), p0, z0\\.d\n+**\tfmov\tx0, \\1\n+**\tret\n+*/\n+TEST_REDUCTION_X (andv_x0_s64, int64_t, svint64_t,\n+\t\t  x0 = svandv_s64 (p0, z0),\n+\t\t  x0 = svandv (p0, z0))"}, {"sha": "052f74c7f0e6bfa4cf4e82dc27759464dde7862d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/andv_s8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** andv_x0_s8:\n+**\tandv\tb([0-9]+), p0, z0\\.b\n+**\tumov\tw0, v\\1\\.b\\[0\\]\n+**\tret\n+*/\n+TEST_REDUCTION_X (andv_x0_s8, int8_t, svint8_t,\n+\t\t  x0 = svandv_s8 (p0, z0),\n+\t\t  x0 = svandv (p0, z0))"}, {"sha": "03328022d1eb3e4ad5093e987942ea7118950dcd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/andv_u16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** andv_x0_u16:\n+**\tandv\th([0-9]+), p0, z0\\.h\n+**\tumov\tw0, v\\1\\.h\\[0\\]\n+**\tret\n+*/\n+TEST_REDUCTION_X (andv_x0_u16, uint16_t, svuint16_t,\n+\t\t  x0 = svandv_u16 (p0, z0),\n+\t\t  x0 = svandv (p0, z0))"}, {"sha": "a1677e7039efdf7fd7a33eb4a375c88d2b24afbd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/andv_u32.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** andv_x0_u32:\n+**\tandv\t(s[0-9]+), p0, z0\\.s\n+**\tfmov\tw0, \\1\n+**\tret\n+*/\n+TEST_REDUCTION_X (andv_x0_u32, uint32_t, svuint32_t,\n+\t\t  x0 = svandv_u32 (p0, z0),\n+\t\t  x0 = svandv (p0, z0))"}, {"sha": "d45422693a6ec179d06f5535251e6699af9b111a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/andv_u64.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** andv_x0_u64:\n+**\tandv\t(d[0-9]+), p0, z0\\.d\n+**\tfmov\tx0, \\1\n+**\tret\n+*/\n+TEST_REDUCTION_X (andv_x0_u64, uint64_t, svuint64_t,\n+\t\t  x0 = svandv_u64 (p0, z0),\n+\t\t  x0 = svandv (p0, z0))"}, {"sha": "b07f6b6e69cf0e81180fc1565cf86bd8150d9c72", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/andv_u8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fandv_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** andv_x0_u8:\n+**\tandv\tb([0-9]+), p0, z0\\.b\n+**\tumov\tw0, v\\1\\.b\\[0\\]\n+**\tret\n+*/\n+TEST_REDUCTION_X (andv_x0_u8, uint8_t, svuint8_t,\n+\t\t  x0 = svandv_u8 (p0, z0),\n+\t\t  x0 = svandv (p0, z0))"}, {"sha": "877bf10685a4b29cc0c6e067ce0cec61530df59f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/asr_s16.c", "status": "added", "additions": 340, "deletions": 0, "changes": 340, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,340 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** asr_s16_m_tied1:\n+**\tasr\tz0\\.h, p0/m, z0\\.h, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s16_m_tied1, svint16_t, svuint16_t,\n+\t     z0 = svasr_s16_m (p0, z0, z4),\n+\t     z0 = svasr_m (p0, z0, z4))\n+\n+/*\n+** asr_s16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tasr\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_s16_m_tied2, svint16_t, svuint16_t,\n+\t\t z0_res = svasr_s16_m (p0, z4, z0),\n+\t\t z0_res = svasr_m (p0, z4, z0))\n+\n+/*\n+** asr_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.h, p0/m, z0\\.h, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s16_m_untied, svint16_t, svuint16_t,\n+\t     z0 = svasr_s16_m (p0, z1, z4),\n+\t     z0 = svasr_m (p0, z1, z4))\n+\n+/*\n+** asr_w0_s16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tasr\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s16_m_tied1, svint16_t, uint16_t,\n+\t\t z0 = svasr_n_s16_m (p0, z0, x0),\n+\t\t z0 = svasr_m (p0, z0, x0))\n+\n+/*\n+** asr_w0_s16_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s16_m_untied, svint16_t, uint16_t,\n+\t\t z0 = svasr_n_s16_m (p0, z1, x0),\n+\t\t z0 = svasr_m (p0, z1, x0))\n+\n+/*\n+** asr_1_s16_m_tied1:\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s16_m_tied1, svint16_t,\n+\t\tz0 = svasr_n_s16_m (p0, z0, 1),\n+\t\tz0 = svasr_m (p0, z0, 1))\n+\n+/*\n+** asr_1_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s16_m_untied, svint16_t,\n+\t\tz0 = svasr_n_s16_m (p0, z1, 1),\n+\t\tz0 = svasr_m (p0, z1, 1))\n+\n+/*\n+** asr_15_s16_m_tied1:\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #15\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_15_s16_m_tied1, svint16_t,\n+\t\tz0 = svasr_n_s16_m (p0, z0, 15),\n+\t\tz0 = svasr_m (p0, z0, 15))\n+\n+/*\n+** asr_15_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #15\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_15_s16_m_untied, svint16_t,\n+\t\tz0 = svasr_n_s16_m (p0, z1, 15),\n+\t\tz0 = svasr_m (p0, z1, 15))\n+\n+/*\n+** asr_16_s16_m_tied1:\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_16_s16_m_tied1, svint16_t,\n+\t\tz0 = svasr_n_s16_m (p0, z0, 16),\n+\t\tz0 = svasr_m (p0, z0, 16))\n+\n+/*\n+** asr_16_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_16_s16_m_untied, svint16_t,\n+\t\tz0 = svasr_n_s16_m (p0, z1, 16),\n+\t\tz0 = svasr_m (p0, z1, 16))\n+\n+/*\n+** asr_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s16_z_tied1, svint16_t, svuint16_t,\n+\t     z0 = svasr_s16_z (p0, z0, z4),\n+\t     z0 = svasr_z (p0, z0, z4))\n+\n+/*\n+** asr_s16_z_tied2:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tasrr\tz0\\.h, p0/m, z0\\.h, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_s16_z_tied2, svint16_t, svuint16_t,\n+\t\t z0_res = svasr_s16_z (p0, z4, z0),\n+\t\t z0_res = svasr_z (p0, z4, z0))\n+\n+/*\n+** asr_s16_z_untied:\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, z4\\.h\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, z4\\.h\n+**\tasrr\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s16_z_untied, svint16_t, svuint16_t,\n+\t     z0 = svasr_s16_z (p0, z1, z4),\n+\t     z0 = svasr_z (p0, z1, z4))\n+\n+/*\n+** asr_w0_s16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s16_z_tied1, svint16_t, uint16_t,\n+\t\t z0 = svasr_n_s16_z (p0, z0, x0),\n+\t\t z0 = svasr_z (p0, z0, x0))\n+\n+/*\n+** asr_w0_s16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), w0\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tasrr\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s16_z_untied, svint16_t, uint16_t,\n+\t\t z0 = svasr_n_s16_z (p0, z1, x0),\n+\t\t z0 = svasr_z (p0, z1, x0))\n+\n+/*\n+** asr_1_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s16_z_tied1, svint16_t,\n+\t\tz0 = svasr_n_s16_z (p0, z0, 1),\n+\t\tz0 = svasr_z (p0, z0, 1))\n+\n+/*\n+** asr_1_s16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s16_z_untied, svint16_t,\n+\t\tz0 = svasr_n_s16_z (p0, z1, 1),\n+\t\tz0 = svasr_z (p0, z1, 1))\n+\n+/*\n+** asr_15_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #15\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_15_s16_z_tied1, svint16_t,\n+\t\tz0 = svasr_n_s16_z (p0, z0, 15),\n+\t\tz0 = svasr_z (p0, z0, 15))\n+\n+/*\n+** asr_15_s16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #15\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_15_s16_z_untied, svint16_t,\n+\t\tz0 = svasr_n_s16_z (p0, z1, 15),\n+\t\tz0 = svasr_z (p0, z1, 15))\n+\n+/*\n+** asr_16_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_16_s16_z_tied1, svint16_t,\n+\t\tz0 = svasr_n_s16_z (p0, z0, 16),\n+\t\tz0 = svasr_z (p0, z0, 16))\n+\n+/*\n+** asr_16_s16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_16_s16_z_untied, svint16_t,\n+\t\tz0 = svasr_n_s16_z (p0, z1, 16),\n+\t\tz0 = svasr_z (p0, z1, 16))\n+\n+/*\n+** asr_s16_x_tied1:\n+**\tasr\tz0\\.h, p0/m, z0\\.h, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s16_x_tied1, svint16_t, svuint16_t,\n+\t     z0 = svasr_s16_x (p0, z0, z4),\n+\t     z0 = svasr_x (p0, z0, z4))\n+\n+/*\n+** asr_s16_x_tied2:\n+**\tasrr\tz0\\.h, p0/m, z0\\.h, z4\\.h\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_s16_x_tied2, svint16_t, svuint16_t,\n+\t\t z0_res = svasr_s16_x (p0, z4, z0),\n+\t\t z0_res = svasr_x (p0, z4, z0))\n+\n+/*\n+** asr_s16_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.h, p0/m, z0\\.h, z4\\.h\n+** |\n+**\tmovprfx\tz0, z4\n+**\tasrr\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s16_x_untied, svint16_t, svuint16_t,\n+\t     z0 = svasr_s16_x (p0, z1, z4),\n+\t     z0 = svasr_x (p0, z1, z4))\n+\n+/*\n+** asr_w0_s16_x_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tasr\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s16_x_tied1, svint16_t, uint16_t,\n+\t\t z0 = svasr_n_s16_x (p0, z0, x0),\n+\t\t z0 = svasr_x (p0, z0, x0))\n+\n+/*\n+** asr_w0_s16_x_untied:\n+**\tmov\tz0\\.h, w0\n+**\tasrr\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s16_x_untied, svint16_t, uint16_t,\n+\t\t z0 = svasr_n_s16_x (p0, z1, x0),\n+\t\t z0 = svasr_x (p0, z1, x0))\n+\n+/*\n+** asr_1_s16_x_tied1:\n+**\tasr\tz0\\.h, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s16_x_tied1, svint16_t,\n+\t\tz0 = svasr_n_s16_x (p0, z0, 1),\n+\t\tz0 = svasr_x (p0, z0, 1))\n+\n+/*\n+** asr_1_s16_x_untied:\n+**\tasr\tz0\\.h, z1\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s16_x_untied, svint16_t,\n+\t\tz0 = svasr_n_s16_x (p0, z1, 1),\n+\t\tz0 = svasr_x (p0, z1, 1))\n+\n+/*\n+** asr_15_s16_x_tied1:\n+**\tasr\tz0\\.h, z0\\.h, #15\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_15_s16_x_tied1, svint16_t,\n+\t\tz0 = svasr_n_s16_x (p0, z0, 15),\n+\t\tz0 = svasr_x (p0, z0, 15))\n+\n+/*\n+** asr_15_s16_x_untied:\n+**\tasr\tz0\\.h, z1\\.h, #15\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_15_s16_x_untied, svint16_t,\n+\t\tz0 = svasr_n_s16_x (p0, z1, 15),\n+\t\tz0 = svasr_x (p0, z1, 15))\n+\n+/*\n+** asr_16_s16_x_tied1:\n+**\tasr\tz0\\.h, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_16_s16_x_tied1, svint16_t,\n+\t\tz0 = svasr_n_s16_x (p0, z0, 16),\n+\t\tz0 = svasr_x (p0, z0, 16))\n+\n+/*\n+** asr_16_s16_x_untied:\n+**\tasr\tz0\\.h, z1\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_16_s16_x_untied, svint16_t,\n+\t\tz0 = svasr_n_s16_x (p0, z1, 16),\n+\t\tz0 = svasr_x (p0, z1, 16))"}, {"sha": "0f5a373724385b2fed44534cad3a4bd973f38684", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/asr_s32.c", "status": "added", "additions": 340, "deletions": 0, "changes": 340, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,340 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** asr_s32_m_tied1:\n+**\tasr\tz0\\.s, p0/m, z0\\.s, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s32_m_tied1, svint32_t, svuint32_t,\n+\t     z0 = svasr_s32_m (p0, z0, z4),\n+\t     z0 = svasr_m (p0, z0, z4))\n+\n+/*\n+** asr_s32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tasr\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_s32_m_tied2, svint32_t, svuint32_t,\n+\t\t z0_res = svasr_s32_m (p0, z4, z0),\n+\t\t z0_res = svasr_m (p0, z4, z0))\n+\n+/*\n+** asr_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.s, p0/m, z0\\.s, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s32_m_untied, svint32_t, svuint32_t,\n+\t     z0 = svasr_s32_m (p0, z1, z4),\n+\t     z0 = svasr_m (p0, z1, z4))\n+\n+/*\n+** asr_w0_s32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tasr\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s32_m_tied1, svint32_t, uint32_t,\n+\t\t z0 = svasr_n_s32_m (p0, z0, x0),\n+\t\t z0 = svasr_m (p0, z0, x0))\n+\n+/*\n+** asr_w0_s32_m_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s32_m_untied, svint32_t, uint32_t,\n+\t\t z0 = svasr_n_s32_m (p0, z1, x0),\n+\t\t z0 = svasr_m (p0, z1, x0))\n+\n+/*\n+** asr_1_s32_m_tied1:\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s32_m_tied1, svint32_t,\n+\t\tz0 = svasr_n_s32_m (p0, z0, 1),\n+\t\tz0 = svasr_m (p0, z0, 1))\n+\n+/*\n+** asr_1_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s32_m_untied, svint32_t,\n+\t\tz0 = svasr_n_s32_m (p0, z1, 1),\n+\t\tz0 = svasr_m (p0, z1, 1))\n+\n+/*\n+** asr_31_s32_m_tied1:\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #31\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_31_s32_m_tied1, svint32_t,\n+\t\tz0 = svasr_n_s32_m (p0, z0, 31),\n+\t\tz0 = svasr_m (p0, z0, 31))\n+\n+/*\n+** asr_31_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #31\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_31_s32_m_untied, svint32_t,\n+\t\tz0 = svasr_n_s32_m (p0, z1, 31),\n+\t\tz0 = svasr_m (p0, z1, 31))\n+\n+/*\n+** asr_32_s32_m_tied1:\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_32_s32_m_tied1, svint32_t,\n+\t\tz0 = svasr_n_s32_m (p0, z0, 32),\n+\t\tz0 = svasr_m (p0, z0, 32))\n+\n+/*\n+** asr_32_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_32_s32_m_untied, svint32_t,\n+\t\tz0 = svasr_n_s32_m (p0, z1, 32),\n+\t\tz0 = svasr_m (p0, z1, 32))\n+\n+/*\n+** asr_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s32_z_tied1, svint32_t, svuint32_t,\n+\t     z0 = svasr_s32_z (p0, z0, z4),\n+\t     z0 = svasr_z (p0, z0, z4))\n+\n+/*\n+** asr_s32_z_tied2:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tasrr\tz0\\.s, p0/m, z0\\.s, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_s32_z_tied2, svint32_t, svuint32_t,\n+\t\t z0_res = svasr_s32_z (p0, z4, z0),\n+\t\t z0_res = svasr_z (p0, z4, z0))\n+\n+/*\n+** asr_s32_z_untied:\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, z4\\.s\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, z4\\.s\n+**\tasrr\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s32_z_untied, svint32_t, svuint32_t,\n+\t     z0 = svasr_s32_z (p0, z1, z4),\n+\t     z0 = svasr_z (p0, z1, z4))\n+\n+/*\n+** asr_w0_s32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s32_z_tied1, svint32_t, uint32_t,\n+\t\t z0 = svasr_n_s32_z (p0, z0, x0),\n+\t\t z0 = svasr_z (p0, z0, x0))\n+\n+/*\n+** asr_w0_s32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tasrr\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s32_z_untied, svint32_t, uint32_t,\n+\t\t z0 = svasr_n_s32_z (p0, z1, x0),\n+\t\t z0 = svasr_z (p0, z1, x0))\n+\n+/*\n+** asr_1_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s32_z_tied1, svint32_t,\n+\t\tz0 = svasr_n_s32_z (p0, z0, 1),\n+\t\tz0 = svasr_z (p0, z0, 1))\n+\n+/*\n+** asr_1_s32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s32_z_untied, svint32_t,\n+\t\tz0 = svasr_n_s32_z (p0, z1, 1),\n+\t\tz0 = svasr_z (p0, z1, 1))\n+\n+/*\n+** asr_31_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #31\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_31_s32_z_tied1, svint32_t,\n+\t\tz0 = svasr_n_s32_z (p0, z0, 31),\n+\t\tz0 = svasr_z (p0, z0, 31))\n+\n+/*\n+** asr_31_s32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #31\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_31_s32_z_untied, svint32_t,\n+\t\tz0 = svasr_n_s32_z (p0, z1, 31),\n+\t\tz0 = svasr_z (p0, z1, 31))\n+\n+/*\n+** asr_32_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_32_s32_z_tied1, svint32_t,\n+\t\tz0 = svasr_n_s32_z (p0, z0, 32),\n+\t\tz0 = svasr_z (p0, z0, 32))\n+\n+/*\n+** asr_32_s32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_32_s32_z_untied, svint32_t,\n+\t\tz0 = svasr_n_s32_z (p0, z1, 32),\n+\t\tz0 = svasr_z (p0, z1, 32))\n+\n+/*\n+** asr_s32_x_tied1:\n+**\tasr\tz0\\.s, p0/m, z0\\.s, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s32_x_tied1, svint32_t, svuint32_t,\n+\t     z0 = svasr_s32_x (p0, z0, z4),\n+\t     z0 = svasr_x (p0, z0, z4))\n+\n+/*\n+** asr_s32_x_tied2:\n+**\tasrr\tz0\\.s, p0/m, z0\\.s, z4\\.s\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_s32_x_tied2, svint32_t, svuint32_t,\n+\t\t z0_res = svasr_s32_x (p0, z4, z0),\n+\t\t z0_res = svasr_x (p0, z4, z0))\n+\n+/*\n+** asr_s32_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.s, p0/m, z0\\.s, z4\\.s\n+** |\n+**\tmovprfx\tz0, z4\n+**\tasrr\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s32_x_untied, svint32_t, svuint32_t,\n+\t     z0 = svasr_s32_x (p0, z1, z4),\n+\t     z0 = svasr_x (p0, z1, z4))\n+\n+/*\n+** asr_w0_s32_x_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tasr\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s32_x_tied1, svint32_t, uint32_t,\n+\t\t z0 = svasr_n_s32_x (p0, z0, x0),\n+\t\t z0 = svasr_x (p0, z0, x0))\n+\n+/*\n+** asr_w0_s32_x_untied:\n+**\tmov\tz0\\.s, w0\n+**\tasrr\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s32_x_untied, svint32_t, uint32_t,\n+\t\t z0 = svasr_n_s32_x (p0, z1, x0),\n+\t\t z0 = svasr_x (p0, z1, x0))\n+\n+/*\n+** asr_1_s32_x_tied1:\n+**\tasr\tz0\\.s, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s32_x_tied1, svint32_t,\n+\t\tz0 = svasr_n_s32_x (p0, z0, 1),\n+\t\tz0 = svasr_x (p0, z0, 1))\n+\n+/*\n+** asr_1_s32_x_untied:\n+**\tasr\tz0\\.s, z1\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s32_x_untied, svint32_t,\n+\t\tz0 = svasr_n_s32_x (p0, z1, 1),\n+\t\tz0 = svasr_x (p0, z1, 1))\n+\n+/*\n+** asr_31_s32_x_tied1:\n+**\tasr\tz0\\.s, z0\\.s, #31\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_31_s32_x_tied1, svint32_t,\n+\t\tz0 = svasr_n_s32_x (p0, z0, 31),\n+\t\tz0 = svasr_x (p0, z0, 31))\n+\n+/*\n+** asr_31_s32_x_untied:\n+**\tasr\tz0\\.s, z1\\.s, #31\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_31_s32_x_untied, svint32_t,\n+\t\tz0 = svasr_n_s32_x (p0, z1, 31),\n+\t\tz0 = svasr_x (p0, z1, 31))\n+\n+/*\n+** asr_32_s32_x_tied1:\n+**\tasr\tz0\\.s, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_32_s32_x_tied1, svint32_t,\n+\t\tz0 = svasr_n_s32_x (p0, z0, 32),\n+\t\tz0 = svasr_x (p0, z0, 32))\n+\n+/*\n+** asr_32_s32_x_untied:\n+**\tasr\tz0\\.s, z1\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_32_s32_x_untied, svint32_t,\n+\t\tz0 = svasr_n_s32_x (p0, z1, 32),\n+\t\tz0 = svasr_x (p0, z1, 32))"}, {"sha": "80cae07c3f4ed6de26678e1241bfbc47be87bfdf", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/asr_s64.c", "status": "added", "additions": 340, "deletions": 0, "changes": 340, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,340 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** asr_s64_m_tied1:\n+**\tasr\tz0\\.d, p0/m, z0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s64_m_tied1, svint64_t, svuint64_t,\n+\t     z0 = svasr_s64_m (p0, z0, z4),\n+\t     z0 = svasr_m (p0, z0, z4))\n+\n+/*\n+** asr_s64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tasr\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_s64_m_tied2, svint64_t, svuint64_t,\n+\t\t z0_res = svasr_s64_m (p0, z4, z0),\n+\t\t z0_res = svasr_m (p0, z4, z0))\n+\n+/*\n+** asr_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.d, p0/m, z0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s64_m_untied, svint64_t, svuint64_t,\n+\t     z0 = svasr_s64_m (p0, z1, z4),\n+\t     z0 = svasr_m (p0, z1, z4))\n+\n+/*\n+** asr_x0_s64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tasr\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_x0_s64_m_tied1, svint64_t, uint64_t,\n+\t\t z0 = svasr_n_s64_m (p0, z0, x0),\n+\t\t z0 = svasr_m (p0, z0, x0))\n+\n+/*\n+** asr_x0_s64_m_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_x0_s64_m_untied, svint64_t, uint64_t,\n+\t\t z0 = svasr_n_s64_m (p0, z1, x0),\n+\t\t z0 = svasr_m (p0, z1, x0))\n+\n+/*\n+** asr_1_s64_m_tied1:\n+**\tasr\tz0\\.d, p0/m, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s64_m_tied1, svint64_t,\n+\t\tz0 = svasr_n_s64_m (p0, z0, 1),\n+\t\tz0 = svasr_m (p0, z0, 1))\n+\n+/*\n+** asr_1_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.d, p0/m, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s64_m_untied, svint64_t,\n+\t\tz0 = svasr_n_s64_m (p0, z1, 1),\n+\t\tz0 = svasr_m (p0, z1, 1))\n+\n+/*\n+** asr_63_s64_m_tied1:\n+**\tasr\tz0\\.d, p0/m, z0\\.d, #63\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_63_s64_m_tied1, svint64_t,\n+\t\tz0 = svasr_n_s64_m (p0, z0, 63),\n+\t\tz0 = svasr_m (p0, z0, 63))\n+\n+/*\n+** asr_63_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.d, p0/m, z0\\.d, #63\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_63_s64_m_untied, svint64_t,\n+\t\tz0 = svasr_n_s64_m (p0, z1, 63),\n+\t\tz0 = svasr_m (p0, z1, 63))\n+\n+/*\n+** asr_64_s64_m_tied1:\n+**\tasr\tz0\\.d, p0/m, z0\\.d, #64\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_64_s64_m_tied1, svint64_t,\n+\t\tz0 = svasr_n_s64_m (p0, z0, 64),\n+\t\tz0 = svasr_m (p0, z0, 64))\n+\n+/*\n+** asr_64_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.d, p0/m, z0\\.d, #64\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_64_s64_m_untied, svint64_t,\n+\t\tz0 = svasr_n_s64_m (p0, z1, 64),\n+\t\tz0 = svasr_m (p0, z1, 64))\n+\n+/*\n+** asr_s64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tasr\tz0\\.d, p0/m, z0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s64_z_tied1, svint64_t, svuint64_t,\n+\t     z0 = svasr_s64_z (p0, z0, z4),\n+\t     z0 = svasr_z (p0, z0, z4))\n+\n+/*\n+** asr_s64_z_tied2:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tasrr\tz0\\.d, p0/m, z0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_s64_z_tied2, svint64_t, svuint64_t,\n+\t\t z0_res = svasr_s64_z (p0, z4, z0),\n+\t\t z0_res = svasr_z (p0, z4, z0))\n+\n+/*\n+** asr_s64_z_untied:\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tasr\tz0\\.d, p0/m, z0\\.d, z4\\.d\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, z4\\.d\n+**\tasrr\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s64_z_untied, svint64_t, svuint64_t,\n+\t     z0 = svasr_s64_z (p0, z1, z4),\n+\t     z0 = svasr_z (p0, z1, z4))\n+\n+/*\n+** asr_x0_s64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tasr\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_x0_s64_z_tied1, svint64_t, uint64_t,\n+\t\t z0 = svasr_n_s64_z (p0, z0, x0),\n+\t\t z0 = svasr_z (p0, z0, x0))\n+\n+/*\n+** asr_x0_s64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tasr\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tasrr\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_x0_s64_z_untied, svint64_t, uint64_t,\n+\t\t z0 = svasr_n_s64_z (p0, z1, x0),\n+\t\t z0 = svasr_z (p0, z1, x0))\n+\n+/*\n+** asr_1_s64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tasr\tz0\\.d, p0/m, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s64_z_tied1, svint64_t,\n+\t\tz0 = svasr_n_s64_z (p0, z0, 1),\n+\t\tz0 = svasr_z (p0, z0, 1))\n+\n+/*\n+** asr_1_s64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tasr\tz0\\.d, p0/m, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s64_z_untied, svint64_t,\n+\t\tz0 = svasr_n_s64_z (p0, z1, 1),\n+\t\tz0 = svasr_z (p0, z1, 1))\n+\n+/*\n+** asr_63_s64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tasr\tz0\\.d, p0/m, z0\\.d, #63\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_63_s64_z_tied1, svint64_t,\n+\t\tz0 = svasr_n_s64_z (p0, z0, 63),\n+\t\tz0 = svasr_z (p0, z0, 63))\n+\n+/*\n+** asr_63_s64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tasr\tz0\\.d, p0/m, z0\\.d, #63\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_63_s64_z_untied, svint64_t,\n+\t\tz0 = svasr_n_s64_z (p0, z1, 63),\n+\t\tz0 = svasr_z (p0, z1, 63))\n+\n+/*\n+** asr_64_s64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tasr\tz0\\.d, p0/m, z0\\.d, #64\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_64_s64_z_tied1, svint64_t,\n+\t\tz0 = svasr_n_s64_z (p0, z0, 64),\n+\t\tz0 = svasr_z (p0, z0, 64))\n+\n+/*\n+** asr_64_s64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tasr\tz0\\.d, p0/m, z0\\.d, #64\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_64_s64_z_untied, svint64_t,\n+\t\tz0 = svasr_n_s64_z (p0, z1, 64),\n+\t\tz0 = svasr_z (p0, z1, 64))\n+\n+/*\n+** asr_s64_x_tied1:\n+**\tasr\tz0\\.d, p0/m, z0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s64_x_tied1, svint64_t, svuint64_t,\n+\t     z0 = svasr_s64_x (p0, z0, z4),\n+\t     z0 = svasr_x (p0, z0, z4))\n+\n+/*\n+** asr_s64_x_tied2:\n+**\tasrr\tz0\\.d, p0/m, z0\\.d, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_s64_x_tied2, svint64_t, svuint64_t,\n+\t\t z0_res = svasr_s64_x (p0, z4, z0),\n+\t\t z0_res = svasr_x (p0, z4, z0))\n+\n+/*\n+** asr_s64_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.d, p0/m, z0\\.d, z4\\.d\n+** |\n+**\tmovprfx\tz0, z4\n+**\tasrr\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s64_x_untied, svint64_t, svuint64_t,\n+\t     z0 = svasr_s64_x (p0, z1, z4),\n+\t     z0 = svasr_x (p0, z1, z4))\n+\n+/*\n+** asr_x0_s64_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tasr\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_x0_s64_x_tied1, svint64_t, uint64_t,\n+\t\t z0 = svasr_n_s64_x (p0, z0, x0),\n+\t\t z0 = svasr_x (p0, z0, x0))\n+\n+/*\n+** asr_x0_s64_x_untied:\n+**\tmov\tz0\\.d, x0\n+**\tasrr\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_x0_s64_x_untied, svint64_t, uint64_t,\n+\t\t z0 = svasr_n_s64_x (p0, z1, x0),\n+\t\t z0 = svasr_x (p0, z1, x0))\n+\n+/*\n+** asr_1_s64_x_tied1:\n+**\tasr\tz0\\.d, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s64_x_tied1, svint64_t,\n+\t\tz0 = svasr_n_s64_x (p0, z0, 1),\n+\t\tz0 = svasr_x (p0, z0, 1))\n+\n+/*\n+** asr_1_s64_x_untied:\n+**\tasr\tz0\\.d, z1\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s64_x_untied, svint64_t,\n+\t\tz0 = svasr_n_s64_x (p0, z1, 1),\n+\t\tz0 = svasr_x (p0, z1, 1))\n+\n+/*\n+** asr_63_s64_x_tied1:\n+**\tasr\tz0\\.d, z0\\.d, #63\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_63_s64_x_tied1, svint64_t,\n+\t\tz0 = svasr_n_s64_x (p0, z0, 63),\n+\t\tz0 = svasr_x (p0, z0, 63))\n+\n+/*\n+** asr_63_s64_x_untied:\n+**\tasr\tz0\\.d, z1\\.d, #63\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_63_s64_x_untied, svint64_t,\n+\t\tz0 = svasr_n_s64_x (p0, z1, 63),\n+\t\tz0 = svasr_x (p0, z1, 63))\n+\n+/*\n+** asr_64_s64_x_tied1:\n+**\tasr\tz0\\.d, z0\\.d, #64\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_64_s64_x_tied1, svint64_t,\n+\t\tz0 = svasr_n_s64_x (p0, z0, 64),\n+\t\tz0 = svasr_x (p0, z0, 64))\n+\n+/*\n+** asr_64_s64_x_untied:\n+**\tasr\tz0\\.d, z1\\.d, #64\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_64_s64_x_untied, svint64_t,\n+\t\tz0 = svasr_n_s64_x (p0, z1, 64),\n+\t\tz0 = svasr_x (p0, z1, 64))"}, {"sha": "992e93fdef7a6a425d247229ebc14801caf02ef0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/asr_s8.c", "status": "added", "additions": 340, "deletions": 0, "changes": 340, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,340 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** asr_s8_m_tied1:\n+**\tasr\tz0\\.b, p0/m, z0\\.b, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s8_m_tied1, svint8_t, svuint8_t,\n+\t     z0 = svasr_s8_m (p0, z0, z4),\n+\t     z0 = svasr_m (p0, z0, z4))\n+\n+/*\n+** asr_s8_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tasr\tz0\\.b, p0/m, z0\\.b, \\1\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_s8_m_tied2, svint8_t, svuint8_t,\n+\t\t z0_res = svasr_s8_m (p0, z4, z0),\n+\t\t z0_res = svasr_m (p0, z4, z0))\n+\n+/*\n+** asr_s8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.b, p0/m, z0\\.b, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s8_m_untied, svint8_t, svuint8_t,\n+\t     z0 = svasr_s8_m (p0, z1, z4),\n+\t     z0 = svasr_m (p0, z1, z4))\n+\n+/*\n+** asr_w0_s8_m_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tasr\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s8_m_tied1, svint8_t, uint8_t,\n+\t\t z0 = svasr_n_s8_m (p0, z0, x0),\n+\t\t z0 = svasr_m (p0, z0, x0))\n+\n+/*\n+** asr_w0_s8_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s8_m_untied, svint8_t, uint8_t,\n+\t\t z0 = svasr_n_s8_m (p0, z1, x0),\n+\t\t z0 = svasr_m (p0, z1, x0))\n+\n+/*\n+** asr_1_s8_m_tied1:\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s8_m_tied1, svint8_t,\n+\t\tz0 = svasr_n_s8_m (p0, z0, 1),\n+\t\tz0 = svasr_m (p0, z0, 1))\n+\n+/*\n+** asr_1_s8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s8_m_untied, svint8_t,\n+\t\tz0 = svasr_n_s8_m (p0, z1, 1),\n+\t\tz0 = svasr_m (p0, z1, 1))\n+\n+/*\n+** asr_7_s8_m_tied1:\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #7\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_7_s8_m_tied1, svint8_t,\n+\t\tz0 = svasr_n_s8_m (p0, z0, 7),\n+\t\tz0 = svasr_m (p0, z0, 7))\n+\n+/*\n+** asr_7_s8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #7\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_7_s8_m_untied, svint8_t,\n+\t\tz0 = svasr_n_s8_m (p0, z1, 7),\n+\t\tz0 = svasr_m (p0, z1, 7))\n+\n+/*\n+** asr_8_s8_m_tied1:\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_8_s8_m_tied1, svint8_t,\n+\t\tz0 = svasr_n_s8_m (p0, z0, 8),\n+\t\tz0 = svasr_m (p0, z0, 8))\n+\n+/*\n+** asr_8_s8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_8_s8_m_untied, svint8_t,\n+\t\tz0 = svasr_n_s8_m (p0, z1, 8),\n+\t\tz0 = svasr_m (p0, z1, 8))\n+\n+/*\n+** asr_s8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s8_z_tied1, svint8_t, svuint8_t,\n+\t     z0 = svasr_s8_z (p0, z0, z4),\n+\t     z0 = svasr_z (p0, z0, z4))\n+\n+/*\n+** asr_s8_z_tied2:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tasrr\tz0\\.b, p0/m, z0\\.b, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_s8_z_tied2, svint8_t, svuint8_t,\n+\t\t z0_res = svasr_s8_z (p0, z4, z0),\n+\t\t z0_res = svasr_z (p0, z4, z0))\n+\n+/*\n+** asr_s8_z_untied:\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, z4\\.b\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, z4\\.b\n+**\tasrr\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s8_z_untied, svint8_t, svuint8_t,\n+\t     z0 = svasr_s8_z (p0, z1, z4),\n+\t     z0 = svasr_z (p0, z1, z4))\n+\n+/*\n+** asr_w0_s8_z_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s8_z_tied1, svint8_t, uint8_t,\n+\t\t z0 = svasr_n_s8_z (p0, z0, x0),\n+\t\t z0 = svasr_z (p0, z0, x0))\n+\n+/*\n+** asr_w0_s8_z_untied:\n+**\tmov\t(z[0-9]+\\.b), w0\n+** (\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, \\1\n+** |\n+**\tmovprfx\tz0\\.b, p0/z, \\1\n+**\tasrr\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s8_z_untied, svint8_t, uint8_t,\n+\t\t z0 = svasr_n_s8_z (p0, z1, x0),\n+\t\t z0 = svasr_z (p0, z1, x0))\n+\n+/*\n+** asr_1_s8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s8_z_tied1, svint8_t,\n+\t\tz0 = svasr_n_s8_z (p0, z0, 1),\n+\t\tz0 = svasr_z (p0, z0, 1))\n+\n+/*\n+** asr_1_s8_z_untied:\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s8_z_untied, svint8_t,\n+\t\tz0 = svasr_n_s8_z (p0, z1, 1),\n+\t\tz0 = svasr_z (p0, z1, 1))\n+\n+/*\n+** asr_7_s8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #7\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_7_s8_z_tied1, svint8_t,\n+\t\tz0 = svasr_n_s8_z (p0, z0, 7),\n+\t\tz0 = svasr_z (p0, z0, 7))\n+\n+/*\n+** asr_7_s8_z_untied:\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #7\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_7_s8_z_untied, svint8_t,\n+\t\tz0 = svasr_n_s8_z (p0, z1, 7),\n+\t\tz0 = svasr_z (p0, z1, 7))\n+\n+/*\n+** asr_8_s8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_8_s8_z_tied1, svint8_t,\n+\t\tz0 = svasr_n_s8_z (p0, z0, 8),\n+\t\tz0 = svasr_z (p0, z0, 8))\n+\n+/*\n+** asr_8_s8_z_untied:\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_8_s8_z_untied, svint8_t,\n+\t\tz0 = svasr_n_s8_z (p0, z1, 8),\n+\t\tz0 = svasr_z (p0, z1, 8))\n+\n+/*\n+** asr_s8_x_tied1:\n+**\tasr\tz0\\.b, p0/m, z0\\.b, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s8_x_tied1, svint8_t, svuint8_t,\n+\t     z0 = svasr_s8_x (p0, z0, z4),\n+\t     z0 = svasr_x (p0, z0, z4))\n+\n+/*\n+** asr_s8_x_tied2:\n+**\tasrr\tz0\\.b, p0/m, z0\\.b, z4\\.b\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_s8_x_tied2, svint8_t, svuint8_t,\n+\t\t z0_res = svasr_s8_x (p0, z4, z0),\n+\t\t z0_res = svasr_x (p0, z4, z0))\n+\n+/*\n+** asr_s8_x_untied:\n+** (\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.b, p0/m, z0\\.b, z4\\.b\n+** |\n+**\tmovprfx\tz0, z4\n+**\tasrr\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+** )\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_s8_x_untied, svint8_t, svuint8_t,\n+\t     z0 = svasr_s8_x (p0, z1, z4),\n+\t     z0 = svasr_x (p0, z1, z4))\n+\n+/*\n+** asr_w0_s8_x_tied1:\n+**\tmov\t(z[0-9]+\\.b), w0\n+**\tasr\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s8_x_tied1, svint8_t, uint8_t,\n+\t\t z0 = svasr_n_s8_x (p0, z0, x0),\n+\t\t z0 = svasr_x (p0, z0, x0))\n+\n+/*\n+** asr_w0_s8_x_untied:\n+**\tmov\tz0\\.b, w0\n+**\tasrr\tz0\\.b, p0/m, z0\\.b, z1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_w0_s8_x_untied, svint8_t, uint8_t,\n+\t\t z0 = svasr_n_s8_x (p0, z1, x0),\n+\t\t z0 = svasr_x (p0, z1, x0))\n+\n+/*\n+** asr_1_s8_x_tied1:\n+**\tasr\tz0\\.b, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s8_x_tied1, svint8_t,\n+\t\tz0 = svasr_n_s8_x (p0, z0, 1),\n+\t\tz0 = svasr_x (p0, z0, 1))\n+\n+/*\n+** asr_1_s8_x_untied:\n+**\tasr\tz0\\.b, z1\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_1_s8_x_untied, svint8_t,\n+\t\tz0 = svasr_n_s8_x (p0, z1, 1),\n+\t\tz0 = svasr_x (p0, z1, 1))\n+\n+/*\n+** asr_7_s8_x_tied1:\n+**\tasr\tz0\\.b, z0\\.b, #7\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_7_s8_x_tied1, svint8_t,\n+\t\tz0 = svasr_n_s8_x (p0, z0, 7),\n+\t\tz0 = svasr_x (p0, z0, 7))\n+\n+/*\n+** asr_7_s8_x_untied:\n+**\tasr\tz0\\.b, z1\\.b, #7\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_7_s8_x_untied, svint8_t,\n+\t\tz0 = svasr_n_s8_x (p0, z1, 7),\n+\t\tz0 = svasr_x (p0, z1, 7))\n+\n+/*\n+** asr_8_s8_x_tied1:\n+**\tasr\tz0\\.b, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_8_s8_x_tied1, svint8_t,\n+\t\tz0 = svasr_n_s8_x (p0, z0, 8),\n+\t\tz0 = svasr_x (p0, z0, 8))\n+\n+/*\n+** asr_8_s8_x_untied:\n+**\tasr\tz0\\.b, z1\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_8_s8_x_untied, svint8_t,\n+\t\tz0 = svasr_n_s8_x (p0, z1, 8),\n+\t\tz0 = svasr_x (p0, z1, 8))"}, {"sha": "b74ae33e100f1fe198dae1184ef95e3da3e37a08", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/asr_wide_s16.c", "status": "added", "additions": 325, "deletions": 0, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_wide_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_wide_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_wide_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,325 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** asr_wide_s16_m_tied1:\n+**\tasr\tz0\\.h, p0/m, z0\\.h, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s16_m_tied1, svint16_t, svuint64_t,\n+\t     z0 = svasr_wide_s16_m (p0, z0, z4),\n+\t     z0 = svasr_wide_m (p0, z0, z4))\n+\n+/*\n+** asr_wide_s16_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tasr\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_wide_s16_m_tied2, svint16_t, svuint64_t,\n+\t\t z0_res = svasr_wide_s16_m (p0, z4, z0),\n+\t\t z0_res = svasr_wide_m (p0, z4, z0))\n+\n+/*\n+** asr_wide_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.h, p0/m, z0\\.h, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s16_m_untied, svint16_t, svuint64_t,\n+\t     z0 = svasr_wide_s16_m (p0, z1, z4),\n+\t     z0 = svasr_wide_m (p0, z1, z4))\n+\n+/*\n+** asr_wide_x0_s16_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tasr\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s16_m_tied1, svint16_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s16_m (p0, z0, x0),\n+\t\t z0 = svasr_wide_m (p0, z0, x0))\n+\n+/*\n+** asr_wide_x0_s16_m_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s16_m_untied, svint16_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s16_m (p0, z1, x0),\n+\t\t z0 = svasr_wide_m (p0, z1, x0))\n+\n+/*\n+** asr_wide_1_s16_m_tied1:\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s16_m_tied1, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_m (p0, z0, 1),\n+\t\tz0 = svasr_wide_m (p0, z0, 1))\n+\n+/*\n+** asr_wide_1_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s16_m_untied, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_m (p0, z1, 1),\n+\t\tz0 = svasr_wide_m (p0, z1, 1))\n+\n+/*\n+** asr_wide_15_s16_m_tied1:\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #15\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_15_s16_m_tied1, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_m (p0, z0, 15),\n+\t\tz0 = svasr_wide_m (p0, z0, 15))\n+\n+/*\n+** asr_wide_15_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #15\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_15_s16_m_untied, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_m (p0, z1, 15),\n+\t\tz0 = svasr_wide_m (p0, z1, 15))\n+\n+/*\n+** asr_wide_16_s16_m_tied1:\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_16_s16_m_tied1, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_m (p0, z0, 16),\n+\t\tz0 = svasr_wide_m (p0, z0, 16))\n+\n+/*\n+** asr_wide_16_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_16_s16_m_untied, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_m (p0, z1, 16),\n+\t\tz0 = svasr_wide_m (p0, z1, 16))\n+\n+/*\n+** asr_wide_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s16_z_tied1, svint16_t, svuint64_t,\n+\t     z0 = svasr_wide_s16_z (p0, z0, z4),\n+\t     z0 = svasr_wide_z (p0, z0, z4))\n+\n+/*\n+** asr_wide_s16_z_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0\\.h, p0/z, z4\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_wide_s16_z_tied2, svint16_t, svuint64_t,\n+\t\t z0_res = svasr_wide_s16_z (p0, z4, z0),\n+\t\t z0_res = svasr_wide_z (p0, z4, z0))\n+\n+/*\n+** asr_wide_s16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s16_z_untied, svint16_t, svuint64_t,\n+\t     z0 = svasr_wide_s16_z (p0, z1, z4),\n+\t     z0 = svasr_wide_z (p0, z1, z4))\n+\n+/*\n+** asr_wide_x0_s16_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s16_z_tied1, svint16_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s16_z (p0, z0, x0),\n+\t\t z0 = svasr_wide_z (p0, z0, x0))\n+\n+/*\n+** asr_wide_x0_s16_z_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s16_z_untied, svint16_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s16_z (p0, z1, x0),\n+\t\t z0 = svasr_wide_z (p0, z1, x0))\n+\n+/*\n+** asr_wide_1_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s16_z_tied1, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_z (p0, z0, 1),\n+\t\tz0 = svasr_wide_z (p0, z0, 1))\n+\n+/*\n+** asr_wide_1_s16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s16_z_untied, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_z (p0, z1, 1),\n+\t\tz0 = svasr_wide_z (p0, z1, 1))\n+\n+/*\n+** asr_wide_15_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #15\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_15_s16_z_tied1, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_z (p0, z0, 15),\n+\t\tz0 = svasr_wide_z (p0, z0, 15))\n+\n+/*\n+** asr_wide_15_s16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #15\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_15_s16_z_untied, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_z (p0, z1, 15),\n+\t\tz0 = svasr_wide_z (p0, z1, 15))\n+\n+/*\n+** asr_wide_16_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_16_s16_z_tied1, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_z (p0, z0, 16),\n+\t\tz0 = svasr_wide_z (p0, z0, 16))\n+\n+/*\n+** asr_wide_16_s16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tasr\tz0\\.h, p0/m, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_16_s16_z_untied, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_z (p0, z1, 16),\n+\t\tz0 = svasr_wide_z (p0, z1, 16))\n+\n+/*\n+** asr_wide_s16_x_tied1:\n+**\tasr\tz0\\.h, z0\\.h, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s16_x_tied1, svint16_t, svuint64_t,\n+\t     z0 = svasr_wide_s16_x (p0, z0, z4),\n+\t     z0 = svasr_wide_x (p0, z0, z4))\n+\n+/*\n+** asr_wide_s16_x_tied2:\n+**\tasr\tz0\\.h, z4\\.h, z0\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_wide_s16_x_tied2, svint16_t, svuint64_t,\n+\t\t z0_res = svasr_wide_s16_x (p0, z4, z0),\n+\t\t z0_res = svasr_wide_x (p0, z4, z0))\n+\n+/*\n+** asr_wide_s16_x_untied:\n+**\tasr\tz0\\.h, z1\\.h, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s16_x_untied, svint16_t, svuint64_t,\n+\t     z0 = svasr_wide_s16_x (p0, z1, z4),\n+\t     z0 = svasr_wide_x (p0, z1, z4))\n+\n+/*\n+** asr_wide_x0_s16_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tasr\tz0\\.h, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s16_x_tied1, svint16_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s16_x (p0, z0, x0),\n+\t\t z0 = svasr_wide_x (p0, z0, x0))\n+\n+/*\n+** asr_wide_x0_s16_x_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tasr\tz0\\.h, z1\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s16_x_untied, svint16_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s16_x (p0, z1, x0),\n+\t\t z0 = svasr_wide_x (p0, z1, x0))\n+\n+/*\n+** asr_wide_1_s16_x_tied1:\n+**\tasr\tz0\\.h, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s16_x_tied1, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_x (p0, z0, 1),\n+\t\tz0 = svasr_wide_x (p0, z0, 1))\n+\n+/*\n+** asr_wide_1_s16_x_untied:\n+**\tasr\tz0\\.h, z1\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s16_x_untied, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_x (p0, z1, 1),\n+\t\tz0 = svasr_wide_x (p0, z1, 1))\n+\n+/*\n+** asr_wide_15_s16_x_tied1:\n+**\tasr\tz0\\.h, z0\\.h, #15\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_15_s16_x_tied1, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_x (p0, z0, 15),\n+\t\tz0 = svasr_wide_x (p0, z0, 15))\n+\n+/*\n+** asr_wide_15_s16_x_untied:\n+**\tasr\tz0\\.h, z1\\.h, #15\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_15_s16_x_untied, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_x (p0, z1, 15),\n+\t\tz0 = svasr_wide_x (p0, z1, 15))\n+\n+/*\n+** asr_wide_16_s16_x_tied1:\n+**\tasr\tz0\\.h, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_16_s16_x_tied1, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_x (p0, z0, 16),\n+\t\tz0 = svasr_wide_x (p0, z0, 16))\n+\n+/*\n+** asr_wide_16_s16_x_untied:\n+**\tasr\tz0\\.h, z1\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_16_s16_x_untied, svint16_t,\n+\t\tz0 = svasr_wide_n_s16_x (p0, z1, 16),\n+\t\tz0 = svasr_wide_x (p0, z1, 16))"}, {"sha": "8698aef26c64d6063154a50c412e5ef742e6e773", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/asr_wide_s32.c", "status": "added", "additions": 325, "deletions": 0, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_wide_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_wide_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_wide_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,325 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** asr_wide_s32_m_tied1:\n+**\tasr\tz0\\.s, p0/m, z0\\.s, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s32_m_tied1, svint32_t, svuint64_t,\n+\t     z0 = svasr_wide_s32_m (p0, z0, z4),\n+\t     z0 = svasr_wide_m (p0, z0, z4))\n+\n+/*\n+** asr_wide_s32_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tasr\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_wide_s32_m_tied2, svint32_t, svuint64_t,\n+\t\t z0_res = svasr_wide_s32_m (p0, z4, z0),\n+\t\t z0_res = svasr_wide_m (p0, z4, z0))\n+\n+/*\n+** asr_wide_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.s, p0/m, z0\\.s, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s32_m_untied, svint32_t, svuint64_t,\n+\t     z0 = svasr_wide_s32_m (p0, z1, z4),\n+\t     z0 = svasr_wide_m (p0, z1, z4))\n+\n+/*\n+** asr_wide_x0_s32_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tasr\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s32_m_tied1, svint32_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s32_m (p0, z0, x0),\n+\t\t z0 = svasr_wide_m (p0, z0, x0))\n+\n+/*\n+** asr_wide_x0_s32_m_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s32_m_untied, svint32_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s32_m (p0, z1, x0),\n+\t\t z0 = svasr_wide_m (p0, z1, x0))\n+\n+/*\n+** asr_wide_1_s32_m_tied1:\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s32_m_tied1, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_m (p0, z0, 1),\n+\t\tz0 = svasr_wide_m (p0, z0, 1))\n+\n+/*\n+** asr_wide_1_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s32_m_untied, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_m (p0, z1, 1),\n+\t\tz0 = svasr_wide_m (p0, z1, 1))\n+\n+/*\n+** asr_wide_31_s32_m_tied1:\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #31\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_31_s32_m_tied1, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_m (p0, z0, 31),\n+\t\tz0 = svasr_wide_m (p0, z0, 31))\n+\n+/*\n+** asr_wide_31_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #31\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_31_s32_m_untied, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_m (p0, z1, 31),\n+\t\tz0 = svasr_wide_m (p0, z1, 31))\n+\n+/*\n+** asr_wide_32_s32_m_tied1:\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_32_s32_m_tied1, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_m (p0, z0, 32),\n+\t\tz0 = svasr_wide_m (p0, z0, 32))\n+\n+/*\n+** asr_wide_32_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_32_s32_m_untied, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_m (p0, z1, 32),\n+\t\tz0 = svasr_wide_m (p0, z1, 32))\n+\n+/*\n+** asr_wide_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s32_z_tied1, svint32_t, svuint64_t,\n+\t     z0 = svasr_wide_s32_z (p0, z0, z4),\n+\t     z0 = svasr_wide_z (p0, z0, z4))\n+\n+/*\n+** asr_wide_s32_z_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0\\.s, p0/z, z4\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_wide_s32_z_tied2, svint32_t, svuint64_t,\n+\t\t z0_res = svasr_wide_s32_z (p0, z4, z0),\n+\t\t z0_res = svasr_wide_z (p0, z4, z0))\n+\n+/*\n+** asr_wide_s32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s32_z_untied, svint32_t, svuint64_t,\n+\t     z0 = svasr_wide_s32_z (p0, z1, z4),\n+\t     z0 = svasr_wide_z (p0, z1, z4))\n+\n+/*\n+** asr_wide_x0_s32_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s32_z_tied1, svint32_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s32_z (p0, z0, x0),\n+\t\t z0 = svasr_wide_z (p0, z0, x0))\n+\n+/*\n+** asr_wide_x0_s32_z_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s32_z_untied, svint32_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s32_z (p0, z1, x0),\n+\t\t z0 = svasr_wide_z (p0, z1, x0))\n+\n+/*\n+** asr_wide_1_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s32_z_tied1, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_z (p0, z0, 1),\n+\t\tz0 = svasr_wide_z (p0, z0, 1))\n+\n+/*\n+** asr_wide_1_s32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s32_z_untied, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_z (p0, z1, 1),\n+\t\tz0 = svasr_wide_z (p0, z1, 1))\n+\n+/*\n+** asr_wide_31_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #31\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_31_s32_z_tied1, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_z (p0, z0, 31),\n+\t\tz0 = svasr_wide_z (p0, z0, 31))\n+\n+/*\n+** asr_wide_31_s32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #31\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_31_s32_z_untied, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_z (p0, z1, 31),\n+\t\tz0 = svasr_wide_z (p0, z1, 31))\n+\n+/*\n+** asr_wide_32_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_32_s32_z_tied1, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_z (p0, z0, 32),\n+\t\tz0 = svasr_wide_z (p0, z0, 32))\n+\n+/*\n+** asr_wide_32_s32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tasr\tz0\\.s, p0/m, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_32_s32_z_untied, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_z (p0, z1, 32),\n+\t\tz0 = svasr_wide_z (p0, z1, 32))\n+\n+/*\n+** asr_wide_s32_x_tied1:\n+**\tasr\tz0\\.s, z0\\.s, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s32_x_tied1, svint32_t, svuint64_t,\n+\t     z0 = svasr_wide_s32_x (p0, z0, z4),\n+\t     z0 = svasr_wide_x (p0, z0, z4))\n+\n+/*\n+** asr_wide_s32_x_tied2:\n+**\tasr\tz0\\.s, z4\\.s, z0\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_wide_s32_x_tied2, svint32_t, svuint64_t,\n+\t\t z0_res = svasr_wide_s32_x (p0, z4, z0),\n+\t\t z0_res = svasr_wide_x (p0, z4, z0))\n+\n+/*\n+** asr_wide_s32_x_untied:\n+**\tasr\tz0\\.s, z1\\.s, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s32_x_untied, svint32_t, svuint64_t,\n+\t     z0 = svasr_wide_s32_x (p0, z1, z4),\n+\t     z0 = svasr_wide_x (p0, z1, z4))\n+\n+/*\n+** asr_wide_x0_s32_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tasr\tz0\\.s, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s32_x_tied1, svint32_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s32_x (p0, z0, x0),\n+\t\t z0 = svasr_wide_x (p0, z0, x0))\n+\n+/*\n+** asr_wide_x0_s32_x_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tasr\tz0\\.s, z1\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s32_x_untied, svint32_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s32_x (p0, z1, x0),\n+\t\t z0 = svasr_wide_x (p0, z1, x0))\n+\n+/*\n+** asr_wide_1_s32_x_tied1:\n+**\tasr\tz0\\.s, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s32_x_tied1, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_x (p0, z0, 1),\n+\t\tz0 = svasr_wide_x (p0, z0, 1))\n+\n+/*\n+** asr_wide_1_s32_x_untied:\n+**\tasr\tz0\\.s, z1\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s32_x_untied, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_x (p0, z1, 1),\n+\t\tz0 = svasr_wide_x (p0, z1, 1))\n+\n+/*\n+** asr_wide_31_s32_x_tied1:\n+**\tasr\tz0\\.s, z0\\.s, #31\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_31_s32_x_tied1, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_x (p0, z0, 31),\n+\t\tz0 = svasr_wide_x (p0, z0, 31))\n+\n+/*\n+** asr_wide_31_s32_x_untied:\n+**\tasr\tz0\\.s, z1\\.s, #31\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_31_s32_x_untied, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_x (p0, z1, 31),\n+\t\tz0 = svasr_wide_x (p0, z1, 31))\n+\n+/*\n+** asr_wide_32_s32_x_tied1:\n+**\tasr\tz0\\.s, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_32_s32_x_tied1, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_x (p0, z0, 32),\n+\t\tz0 = svasr_wide_x (p0, z0, 32))\n+\n+/*\n+** asr_wide_32_s32_x_untied:\n+**\tasr\tz0\\.s, z1\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_32_s32_x_untied, svint32_t,\n+\t\tz0 = svasr_wide_n_s32_x (p0, z1, 32),\n+\t\tz0 = svasr_wide_x (p0, z1, 32))"}, {"sha": "77b1669392dabf8bd8ae2fc324f3458e533720d2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/asr_wide_s8.c", "status": "added", "additions": 325, "deletions": 0, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_wide_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_wide_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasr_wide_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,325 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** asr_wide_s8_m_tied1:\n+**\tasr\tz0\\.b, p0/m, z0\\.b, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s8_m_tied1, svint8_t, svuint64_t,\n+\t     z0 = svasr_wide_s8_m (p0, z0, z4),\n+\t     z0 = svasr_wide_m (p0, z0, z4))\n+\n+/*\n+** asr_wide_s8_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z4\n+**\tasr\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_wide_s8_m_tied2, svint8_t, svuint64_t,\n+\t\t z0_res = svasr_wide_s8_m (p0, z4, z0),\n+\t\t z0_res = svasr_wide_m (p0, z4, z0))\n+\n+/*\n+** asr_wide_s8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.b, p0/m, z0\\.b, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s8_m_untied, svint8_t, svuint64_t,\n+\t     z0 = svasr_wide_s8_m (p0, z1, z4),\n+\t     z0 = svasr_wide_m (p0, z1, z4))\n+\n+/*\n+** asr_wide_x0_s8_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tasr\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s8_m_tied1, svint8_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s8_m (p0, z0, x0),\n+\t\t z0 = svasr_wide_m (p0, z0, x0))\n+\n+/*\n+** asr_wide_x0_s8_m_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s8_m_untied, svint8_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s8_m (p0, z1, x0),\n+\t\t z0 = svasr_wide_m (p0, z1, x0))\n+\n+/*\n+** asr_wide_1_s8_m_tied1:\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s8_m_tied1, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_m (p0, z0, 1),\n+\t\tz0 = svasr_wide_m (p0, z0, 1))\n+\n+/*\n+** asr_wide_1_s8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s8_m_untied, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_m (p0, z1, 1),\n+\t\tz0 = svasr_wide_m (p0, z1, 1))\n+\n+/*\n+** asr_wide_7_s8_m_tied1:\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #7\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_7_s8_m_tied1, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_m (p0, z0, 7),\n+\t\tz0 = svasr_wide_m (p0, z0, 7))\n+\n+/*\n+** asr_wide_7_s8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #7\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_7_s8_m_untied, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_m (p0, z1, 7),\n+\t\tz0 = svasr_wide_m (p0, z1, 7))\n+\n+/*\n+** asr_wide_8_s8_m_tied1:\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_8_s8_m_tied1, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_m (p0, z0, 8),\n+\t\tz0 = svasr_wide_m (p0, z0, 8))\n+\n+/*\n+** asr_wide_8_s8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_8_s8_m_untied, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_m (p0, z1, 8),\n+\t\tz0 = svasr_wide_m (p0, z1, 8))\n+\n+/*\n+** asr_wide_s8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s8_z_tied1, svint8_t, svuint64_t,\n+\t     z0 = svasr_wide_s8_z (p0, z0, z4),\n+\t     z0 = svasr_wide_z (p0, z0, z4))\n+\n+/*\n+** asr_wide_s8_z_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0\\.b, p0/z, z4\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_wide_s8_z_tied2, svint8_t, svuint64_t,\n+\t\t z0_res = svasr_wide_s8_z (p0, z4, z0),\n+\t\t z0_res = svasr_wide_z (p0, z4, z0))\n+\n+/*\n+** asr_wide_s8_z_untied:\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s8_z_untied, svint8_t, svuint64_t,\n+\t     z0 = svasr_wide_s8_z (p0, z1, z4),\n+\t     z0 = svasr_wide_z (p0, z1, z4))\n+\n+/*\n+** asr_wide_x0_s8_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s8_z_tied1, svint8_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s8_z (p0, z0, x0),\n+\t\t z0 = svasr_wide_z (p0, z0, x0))\n+\n+/*\n+** asr_wide_x0_s8_z_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s8_z_untied, svint8_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s8_z (p0, z1, x0),\n+\t\t z0 = svasr_wide_z (p0, z1, x0))\n+\n+/*\n+** asr_wide_1_s8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s8_z_tied1, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_z (p0, z0, 1),\n+\t\tz0 = svasr_wide_z (p0, z0, 1))\n+\n+/*\n+** asr_wide_1_s8_z_untied:\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s8_z_untied, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_z (p0, z1, 1),\n+\t\tz0 = svasr_wide_z (p0, z1, 1))\n+\n+/*\n+** asr_wide_7_s8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #7\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_7_s8_z_tied1, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_z (p0, z0, 7),\n+\t\tz0 = svasr_wide_z (p0, z0, 7))\n+\n+/*\n+** asr_wide_7_s8_z_untied:\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #7\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_7_s8_z_untied, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_z (p0, z1, 7),\n+\t\tz0 = svasr_wide_z (p0, z1, 7))\n+\n+/*\n+** asr_wide_8_s8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_8_s8_z_tied1, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_z (p0, z0, 8),\n+\t\tz0 = svasr_wide_z (p0, z0, 8))\n+\n+/*\n+** asr_wide_8_s8_z_untied:\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tasr\tz0\\.b, p0/m, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_8_s8_z_untied, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_z (p0, z1, 8),\n+\t\tz0 = svasr_wide_z (p0, z1, 8))\n+\n+/*\n+** asr_wide_s8_x_tied1:\n+**\tasr\tz0\\.b, z0\\.b, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s8_x_tied1, svint8_t, svuint64_t,\n+\t     z0 = svasr_wide_s8_x (p0, z0, z4),\n+\t     z0 = svasr_wide_x (p0, z0, z4))\n+\n+/*\n+** asr_wide_s8_x_tied2:\n+**\tasr\tz0\\.b, z4\\.b, z0\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z_REV (asr_wide_s8_x_tied2, svint8_t, svuint64_t,\n+\t\t z0_res = svasr_wide_s8_x (p0, z4, z0),\n+\t\t z0_res = svasr_wide_x (p0, z4, z0))\n+\n+/*\n+** asr_wide_s8_x_untied:\n+**\tasr\tz0\\.b, z1\\.b, z4\\.d\n+**\tret\n+*/\n+TEST_DUAL_Z (asr_wide_s8_x_untied, svint8_t, svuint64_t,\n+\t     z0 = svasr_wide_s8_x (p0, z1, z4),\n+\t     z0 = svasr_wide_x (p0, z1, z4))\n+\n+/*\n+** asr_wide_x0_s8_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tasr\tz0\\.b, z0\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s8_x_tied1, svint8_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s8_x (p0, z0, x0),\n+\t\t z0 = svasr_wide_x (p0, z0, x0))\n+\n+/*\n+** asr_wide_x0_s8_x_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tasr\tz0\\.b, z1\\.b, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (asr_wide_x0_s8_x_untied, svint8_t, uint64_t,\n+\t\t z0 = svasr_wide_n_s8_x (p0, z1, x0),\n+\t\t z0 = svasr_wide_x (p0, z1, x0))\n+\n+/*\n+** asr_wide_1_s8_x_tied1:\n+**\tasr\tz0\\.b, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s8_x_tied1, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_x (p0, z0, 1),\n+\t\tz0 = svasr_wide_x (p0, z0, 1))\n+\n+/*\n+** asr_wide_1_s8_x_untied:\n+**\tasr\tz0\\.b, z1\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_1_s8_x_untied, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_x (p0, z1, 1),\n+\t\tz0 = svasr_wide_x (p0, z1, 1))\n+\n+/*\n+** asr_wide_7_s8_x_tied1:\n+**\tasr\tz0\\.b, z0\\.b, #7\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_7_s8_x_tied1, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_x (p0, z0, 7),\n+\t\tz0 = svasr_wide_x (p0, z0, 7))\n+\n+/*\n+** asr_wide_7_s8_x_untied:\n+**\tasr\tz0\\.b, z1\\.b, #7\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_7_s8_x_untied, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_x (p0, z1, 7),\n+\t\tz0 = svasr_wide_x (p0, z1, 7))\n+\n+/*\n+** asr_wide_8_s8_x_tied1:\n+**\tasr\tz0\\.b, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_8_s8_x_tied1, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_x (p0, z0, 8),\n+\t\tz0 = svasr_wide_x (p0, z0, 8))\n+\n+/*\n+** asr_wide_8_s8_x_untied:\n+**\tasr\tz0\\.b, z1\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asr_wide_8_s8_x_untied, svint8_t,\n+\t\tz0 = svasr_wide_n_s8_x (p0, z1, 8),\n+\t\tz0 = svasr_wide_x (p0, z1, 8))"}, {"sha": "40bbce04216eca4d6116698718b1c67ebf3f86fa", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/asrd_s16.c", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasrd_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasrd_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasrd_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,177 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** asrd_1_s16_m_tied1:\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s16_m_tied1, svint16_t,\n+\t\tz0 = svasrd_n_s16_m (p0, z0, 1),\n+\t\tz0 = svasrd_m (p0, z0, 1))\n+\n+/*\n+** asrd_1_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s16_m_untied, svint16_t,\n+\t\tz0 = svasrd_n_s16_m (p0, z1, 1),\n+\t\tz0 = svasrd_m (p0, z1, 1))\n+\n+/*\n+** asrd_2_s16_m_tied1:\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s16_m_tied1, svint16_t,\n+\t\tz0 = svasrd_n_s16_m (p0, z0, 2),\n+\t\tz0 = svasrd_m (p0, z0, 2))\n+\n+/*\n+** asrd_2_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s16_m_untied, svint16_t,\n+\t\tz0 = svasrd_n_s16_m (p0, z1, 2),\n+\t\tz0 = svasrd_m (p0, z1, 2))\n+\n+/*\n+** asrd_16_s16_m_tied1:\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_16_s16_m_tied1, svint16_t,\n+\t\tz0 = svasrd_n_s16_m (p0, z0, 16),\n+\t\tz0 = svasrd_m (p0, z0, 16))\n+\n+/*\n+** asrd_16_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_16_s16_m_untied, svint16_t,\n+\t\tz0 = svasrd_n_s16_m (p0, z1, 16),\n+\t\tz0 = svasrd_m (p0, z1, 16))\n+\n+/*\n+** asrd_1_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s16_z_tied1, svint16_t,\n+\t\tz0 = svasrd_n_s16_z (p0, z0, 1),\n+\t\tz0 = svasrd_z (p0, z0, 1))\n+\n+/*\n+** asrd_1_s16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s16_z_untied, svint16_t,\n+\t\tz0 = svasrd_n_s16_z (p0, z1, 1),\n+\t\tz0 = svasrd_z (p0, z1, 1))\n+\n+/*\n+** asrd_2_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s16_z_tied1, svint16_t,\n+\t\tz0 = svasrd_n_s16_z (p0, z0, 2),\n+\t\tz0 = svasrd_z (p0, z0, 2))\n+\n+/*\n+** asrd_2_s16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s16_z_untied, svint16_t,\n+\t\tz0 = svasrd_n_s16_z (p0, z1, 2),\n+\t\tz0 = svasrd_z (p0, z1, 2))\n+\n+/*\n+** asrd_16_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_16_s16_z_tied1, svint16_t,\n+\t\tz0 = svasrd_n_s16_z (p0, z0, 16),\n+\t\tz0 = svasrd_z (p0, z0, 16))\n+\n+/*\n+** asrd_16_s16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_16_s16_z_untied, svint16_t,\n+\t\tz0 = svasrd_n_s16_z (p0, z1, 16),\n+\t\tz0 = svasrd_z (p0, z1, 16))\n+\n+/*\n+** asrd_1_s16_x_tied1:\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s16_x_tied1, svint16_t,\n+\t\tz0 = svasrd_n_s16_x (p0, z0, 1),\n+\t\tz0 = svasrd_x (p0, z0, 1))\n+\n+/*\n+** asrd_1_s16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s16_x_untied, svint16_t,\n+\t\tz0 = svasrd_n_s16_x (p0, z1, 1),\n+\t\tz0 = svasrd_x (p0, z1, 1))\n+\n+/*\n+** asrd_2_s16_x_tied1:\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s16_x_tied1, svint16_t,\n+\t\tz0 = svasrd_n_s16_x (p0, z0, 2),\n+\t\tz0 = svasrd_x (p0, z0, 2))\n+\n+/*\n+** asrd_2_s16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s16_x_untied, svint16_t,\n+\t\tz0 = svasrd_n_s16_x (p0, z1, 2),\n+\t\tz0 = svasrd_x (p0, z1, 2))\n+\n+/*\n+** asrd_16_s16_x_tied1:\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_16_s16_x_tied1, svint16_t,\n+\t\tz0 = svasrd_n_s16_x (p0, z0, 16),\n+\t\tz0 = svasrd_x (p0, z0, 16))\n+\n+/*\n+** asrd_16_s16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.h, p0/m, z0\\.h, #16\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_16_s16_x_untied, svint16_t,\n+\t\tz0 = svasrd_n_s16_x (p0, z1, 16),\n+\t\tz0 = svasrd_x (p0, z1, 16))"}, {"sha": "0760b03deedf37a0057113c111c785efc976a6c2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/asrd_s32.c", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasrd_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasrd_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasrd_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,177 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** asrd_1_s32_m_tied1:\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s32_m_tied1, svint32_t,\n+\t\tz0 = svasrd_n_s32_m (p0, z0, 1),\n+\t\tz0 = svasrd_m (p0, z0, 1))\n+\n+/*\n+** asrd_1_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s32_m_untied, svint32_t,\n+\t\tz0 = svasrd_n_s32_m (p0, z1, 1),\n+\t\tz0 = svasrd_m (p0, z1, 1))\n+\n+/*\n+** asrd_2_s32_m_tied1:\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s32_m_tied1, svint32_t,\n+\t\tz0 = svasrd_n_s32_m (p0, z0, 2),\n+\t\tz0 = svasrd_m (p0, z0, 2))\n+\n+/*\n+** asrd_2_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s32_m_untied, svint32_t,\n+\t\tz0 = svasrd_n_s32_m (p0, z1, 2),\n+\t\tz0 = svasrd_m (p0, z1, 2))\n+\n+/*\n+** asrd_32_s32_m_tied1:\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_32_s32_m_tied1, svint32_t,\n+\t\tz0 = svasrd_n_s32_m (p0, z0, 32),\n+\t\tz0 = svasrd_m (p0, z0, 32))\n+\n+/*\n+** asrd_32_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_32_s32_m_untied, svint32_t,\n+\t\tz0 = svasrd_n_s32_m (p0, z1, 32),\n+\t\tz0 = svasrd_m (p0, z1, 32))\n+\n+/*\n+** asrd_1_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s32_z_tied1, svint32_t,\n+\t\tz0 = svasrd_n_s32_z (p0, z0, 1),\n+\t\tz0 = svasrd_z (p0, z0, 1))\n+\n+/*\n+** asrd_1_s32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s32_z_untied, svint32_t,\n+\t\tz0 = svasrd_n_s32_z (p0, z1, 1),\n+\t\tz0 = svasrd_z (p0, z1, 1))\n+\n+/*\n+** asrd_2_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s32_z_tied1, svint32_t,\n+\t\tz0 = svasrd_n_s32_z (p0, z0, 2),\n+\t\tz0 = svasrd_z (p0, z0, 2))\n+\n+/*\n+** asrd_2_s32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s32_z_untied, svint32_t,\n+\t\tz0 = svasrd_n_s32_z (p0, z1, 2),\n+\t\tz0 = svasrd_z (p0, z1, 2))\n+\n+/*\n+** asrd_32_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_32_s32_z_tied1, svint32_t,\n+\t\tz0 = svasrd_n_s32_z (p0, z0, 32),\n+\t\tz0 = svasrd_z (p0, z0, 32))\n+\n+/*\n+** asrd_32_s32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_32_s32_z_untied, svint32_t,\n+\t\tz0 = svasrd_n_s32_z (p0, z1, 32),\n+\t\tz0 = svasrd_z (p0, z1, 32))\n+\n+/*\n+** asrd_1_s32_x_tied1:\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s32_x_tied1, svint32_t,\n+\t\tz0 = svasrd_n_s32_x (p0, z0, 1),\n+\t\tz0 = svasrd_x (p0, z0, 1))\n+\n+/*\n+** asrd_1_s32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s32_x_untied, svint32_t,\n+\t\tz0 = svasrd_n_s32_x (p0, z1, 1),\n+\t\tz0 = svasrd_x (p0, z1, 1))\n+\n+/*\n+** asrd_2_s32_x_tied1:\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s32_x_tied1, svint32_t,\n+\t\tz0 = svasrd_n_s32_x (p0, z0, 2),\n+\t\tz0 = svasrd_x (p0, z0, 2))\n+\n+/*\n+** asrd_2_s32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s32_x_untied, svint32_t,\n+\t\tz0 = svasrd_n_s32_x (p0, z1, 2),\n+\t\tz0 = svasrd_x (p0, z1, 2))\n+\n+/*\n+** asrd_32_s32_x_tied1:\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_32_s32_x_tied1, svint32_t,\n+\t\tz0 = svasrd_n_s32_x (p0, z0, 32),\n+\t\tz0 = svasrd_x (p0, z0, 32))\n+\n+/*\n+** asrd_32_s32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.s, p0/m, z0\\.s, #32\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_32_s32_x_untied, svint32_t,\n+\t\tz0 = svasrd_n_s32_x (p0, z1, 32),\n+\t\tz0 = svasrd_x (p0, z1, 32))"}, {"sha": "0ef26c9fe8103e9d04062b0494c7a61413f3d790", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/asrd_s64.c", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasrd_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasrd_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasrd_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,177 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** asrd_1_s64_m_tied1:\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s64_m_tied1, svint64_t,\n+\t\tz0 = svasrd_n_s64_m (p0, z0, 1),\n+\t\tz0 = svasrd_m (p0, z0, 1))\n+\n+/*\n+** asrd_1_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s64_m_untied, svint64_t,\n+\t\tz0 = svasrd_n_s64_m (p0, z1, 1),\n+\t\tz0 = svasrd_m (p0, z1, 1))\n+\n+/*\n+** asrd_2_s64_m_tied1:\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s64_m_tied1, svint64_t,\n+\t\tz0 = svasrd_n_s64_m (p0, z0, 2),\n+\t\tz0 = svasrd_m (p0, z0, 2))\n+\n+/*\n+** asrd_2_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s64_m_untied, svint64_t,\n+\t\tz0 = svasrd_n_s64_m (p0, z1, 2),\n+\t\tz0 = svasrd_m (p0, z1, 2))\n+\n+/*\n+** asrd_64_s64_m_tied1:\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #64\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_64_s64_m_tied1, svint64_t,\n+\t\tz0 = svasrd_n_s64_m (p0, z0, 64),\n+\t\tz0 = svasrd_m (p0, z0, 64))\n+\n+/*\n+** asrd_64_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #64\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_64_s64_m_untied, svint64_t,\n+\t\tz0 = svasrd_n_s64_m (p0, z1, 64),\n+\t\tz0 = svasrd_m (p0, z1, 64))\n+\n+/*\n+** asrd_1_s64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s64_z_tied1, svint64_t,\n+\t\tz0 = svasrd_n_s64_z (p0, z0, 1),\n+\t\tz0 = svasrd_z (p0, z0, 1))\n+\n+/*\n+** asrd_1_s64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s64_z_untied, svint64_t,\n+\t\tz0 = svasrd_n_s64_z (p0, z1, 1),\n+\t\tz0 = svasrd_z (p0, z1, 1))\n+\n+/*\n+** asrd_2_s64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s64_z_tied1, svint64_t,\n+\t\tz0 = svasrd_n_s64_z (p0, z0, 2),\n+\t\tz0 = svasrd_z (p0, z0, 2))\n+\n+/*\n+** asrd_2_s64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s64_z_untied, svint64_t,\n+\t\tz0 = svasrd_n_s64_z (p0, z1, 2),\n+\t\tz0 = svasrd_z (p0, z1, 2))\n+\n+/*\n+** asrd_64_s64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #64\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_64_s64_z_tied1, svint64_t,\n+\t\tz0 = svasrd_n_s64_z (p0, z0, 64),\n+\t\tz0 = svasrd_z (p0, z0, 64))\n+\n+/*\n+** asrd_64_s64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #64\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_64_s64_z_untied, svint64_t,\n+\t\tz0 = svasrd_n_s64_z (p0, z1, 64),\n+\t\tz0 = svasrd_z (p0, z1, 64))\n+\n+/*\n+** asrd_1_s64_x_tied1:\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s64_x_tied1, svint64_t,\n+\t\tz0 = svasrd_n_s64_x (p0, z0, 1),\n+\t\tz0 = svasrd_x (p0, z0, 1))\n+\n+/*\n+** asrd_1_s64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s64_x_untied, svint64_t,\n+\t\tz0 = svasrd_n_s64_x (p0, z1, 1),\n+\t\tz0 = svasrd_x (p0, z1, 1))\n+\n+/*\n+** asrd_2_s64_x_tied1:\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s64_x_tied1, svint64_t,\n+\t\tz0 = svasrd_n_s64_x (p0, z0, 2),\n+\t\tz0 = svasrd_x (p0, z0, 2))\n+\n+/*\n+** asrd_2_s64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s64_x_untied, svint64_t,\n+\t\tz0 = svasrd_n_s64_x (p0, z1, 2),\n+\t\tz0 = svasrd_x (p0, z1, 2))\n+\n+/*\n+** asrd_64_s64_x_tied1:\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #64\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_64_s64_x_tied1, svint64_t,\n+\t\tz0 = svasrd_n_s64_x (p0, z0, 64),\n+\t\tz0 = svasrd_x (p0, z0, 64))\n+\n+/*\n+** asrd_64_s64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.d, p0/m, z0\\.d, #64\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_64_s64_x_untied, svint64_t,\n+\t\tz0 = svasrd_n_s64_x (p0, z1, 64),\n+\t\tz0 = svasrd_x (p0, z1, 64))"}, {"sha": "9249ffbcb64c7d2c483f851333952127218d933e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/asrd_s8.c", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasrd_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasrd_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fasrd_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,177 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** asrd_1_s8_m_tied1:\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s8_m_tied1, svint8_t,\n+\t\tz0 = svasrd_n_s8_m (p0, z0, 1),\n+\t\tz0 = svasrd_m (p0, z0, 1))\n+\n+/*\n+** asrd_1_s8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s8_m_untied, svint8_t,\n+\t\tz0 = svasrd_n_s8_m (p0, z1, 1),\n+\t\tz0 = svasrd_m (p0, z1, 1))\n+\n+/*\n+** asrd_2_s8_m_tied1:\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s8_m_tied1, svint8_t,\n+\t\tz0 = svasrd_n_s8_m (p0, z0, 2),\n+\t\tz0 = svasrd_m (p0, z0, 2))\n+\n+/*\n+** asrd_2_s8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s8_m_untied, svint8_t,\n+\t\tz0 = svasrd_n_s8_m (p0, z1, 2),\n+\t\tz0 = svasrd_m (p0, z1, 2))\n+\n+/*\n+** asrd_8_s8_m_tied1:\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_8_s8_m_tied1, svint8_t,\n+\t\tz0 = svasrd_n_s8_m (p0, z0, 8),\n+\t\tz0 = svasrd_m (p0, z0, 8))\n+\n+/*\n+** asrd_8_s8_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_8_s8_m_untied, svint8_t,\n+\t\tz0 = svasrd_n_s8_m (p0, z1, 8),\n+\t\tz0 = svasrd_m (p0, z1, 8))\n+\n+/*\n+** asrd_1_s8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s8_z_tied1, svint8_t,\n+\t\tz0 = svasrd_n_s8_z (p0, z0, 1),\n+\t\tz0 = svasrd_z (p0, z0, 1))\n+\n+/*\n+** asrd_1_s8_z_untied:\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s8_z_untied, svint8_t,\n+\t\tz0 = svasrd_n_s8_z (p0, z1, 1),\n+\t\tz0 = svasrd_z (p0, z1, 1))\n+\n+/*\n+** asrd_2_s8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s8_z_tied1, svint8_t,\n+\t\tz0 = svasrd_n_s8_z (p0, z0, 2),\n+\t\tz0 = svasrd_z (p0, z0, 2))\n+\n+/*\n+** asrd_2_s8_z_untied:\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s8_z_untied, svint8_t,\n+\t\tz0 = svasrd_n_s8_z (p0, z1, 2),\n+\t\tz0 = svasrd_z (p0, z1, 2))\n+\n+/*\n+** asrd_8_s8_z_tied1:\n+**\tmovprfx\tz0\\.b, p0/z, z0\\.b\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_8_s8_z_tied1, svint8_t,\n+\t\tz0 = svasrd_n_s8_z (p0, z0, 8),\n+\t\tz0 = svasrd_z (p0, z0, 8))\n+\n+/*\n+** asrd_8_s8_z_untied:\n+**\tmovprfx\tz0\\.b, p0/z, z1\\.b\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_8_s8_z_untied, svint8_t,\n+\t\tz0 = svasrd_n_s8_z (p0, z1, 8),\n+\t\tz0 = svasrd_z (p0, z1, 8))\n+\n+/*\n+** asrd_1_s8_x_tied1:\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s8_x_tied1, svint8_t,\n+\t\tz0 = svasrd_n_s8_x (p0, z0, 1),\n+\t\tz0 = svasrd_x (p0, z0, 1))\n+\n+/*\n+** asrd_1_s8_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_1_s8_x_untied, svint8_t,\n+\t\tz0 = svasrd_n_s8_x (p0, z1, 1),\n+\t\tz0 = svasrd_x (p0, z1, 1))\n+\n+/*\n+** asrd_2_s8_x_tied1:\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s8_x_tied1, svint8_t,\n+\t\tz0 = svasrd_n_s8_x (p0, z0, 2),\n+\t\tz0 = svasrd_x (p0, z0, 2))\n+\n+/*\n+** asrd_2_s8_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #2\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_2_s8_x_untied, svint8_t,\n+\t\tz0 = svasrd_n_s8_x (p0, z1, 2),\n+\t\tz0 = svasrd_x (p0, z1, 2))\n+\n+/*\n+** asrd_8_s8_x_tied1:\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_8_s8_x_tied1, svint8_t,\n+\t\tz0 = svasrd_n_s8_x (p0, z0, 8),\n+\t\tz0 = svasrd_x (p0, z0, 8))\n+\n+/*\n+** asrd_8_s8_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tasrd\tz0\\.b, p0/m, z0\\.b, #8\n+**\tret\n+*/\n+TEST_UNIFORM_Z (asrd_8_s8_x_untied, svint8_t,\n+\t\tz0 = svasrd_n_s8_x (p0, z1, 8),\n+\t\tz0 = svasrd_x (p0, z1, 8))"}, {"sha": "9d41aeaa2fde5fe2e2022dd538e9d927918192f5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bic_b.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_b.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bic_b_z_tied1:\n+**\tbic\tp0\\.b, p3/z, p0\\.b, p1\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_P (bic_b_z_tied1,\n+\t\tp0 = svbic_b_z (p3, p0, p1),\n+\t\tp0 = svbic_z (p3, p0, p1))\n+\n+/*\n+** bic_b_z_tied2:\n+**\tbic\tp0\\.b, p3/z, p1\\.b, p0\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_P (bic_b_z_tied2,\n+\t\tp0 = svbic_b_z (p3, p1, p0),\n+\t\tp0 = svbic_z (p3, p1, p0))\n+\n+/*\n+** bic_b_z_untied:\n+**\tbic\tp0\\.b, p3/z, p1\\.b, p2\\.b\n+**\tret\n+*/\n+TEST_UNIFORM_P (bic_b_z_untied,\n+\t\tp0 = svbic_b_z (p3, p1, p2),\n+\t\tp0 = svbic_z (p3, p1, p2))"}, {"sha": "c80f5697f5f475cb052527b2a0af5c37b794ba3b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bic_s16.c", "status": "added", "additions": 367, "deletions": 0, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,367 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bic_s16_m_tied1:\n+**\tbic\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s16_m_tied1, svint16_t,\n+\t\tz0 = svbic_s16_m (p0, z0, z1),\n+\t\tz0 = svbic_m (p0, z0, z1))\n+\n+/*\n+** bic_s16_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbic\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s16_m_tied2, svint16_t,\n+\t\tz0 = svbic_s16_m (p0, z1, z0),\n+\t\tz0 = svbic_m (p0, z1, z0))\n+\n+/*\n+** bic_s16_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tbic\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s16_m_untied, svint16_t,\n+\t\tz0 = svbic_s16_m (p0, z1, z2),\n+\t\tz0 = svbic_m (p0, z1, z2))\n+\n+/*\n+** bic_w0_s16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tbic\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_w0_s16_m_tied1, svint16_t, int16_t,\n+\t\t z0 = svbic_n_s16_m (p0, z0, x0),\n+\t\t z0 = svbic_m (p0, z0, x0))\n+\n+/*\n+** bic_w0_s16_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0, z1\n+**\tbic\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_w0_s16_m_untied, svint16_t, int16_t,\n+\t\t z0 = svbic_n_s16_m (p0, z1, x0),\n+\t\t z0 = svbic_m (p0, z1, x0))\n+\n+/*\n+** bic_1_s16_m_tied1:\n+**\tmov\t(z[0-9]+\\.h), #-2\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s16_m_tied1, svint16_t,\n+\t\tz0 = svbic_n_s16_m (p0, z0, 1),\n+\t\tz0 = svbic_m (p0, z0, 1))\n+\n+/*\n+** bic_1_s16_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), #-2\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s16_m_untied, svint16_t,\n+\t\tz0 = svbic_n_s16_m (p0, z1, 1),\n+\t\tz0 = svbic_m (p0, z1, 1))\n+\n+/*\n+** bic_m2_s16_m:\n+**\tmov\t(z[0-9]+\\.h), #1\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m2_s16_m, svint16_t,\n+\t\tz0 = svbic_n_s16_m (p0, z0, -2),\n+\t\tz0 = svbic_m (p0, z0, -2))\n+\n+/*\n+** bic_s16_z_tied1:\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tbic\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s16_z_tied1, svint16_t,\n+\t\tz0 = svbic_s16_z (p0, z0, z1),\n+\t\tz0 = svbic_z (p0, z0, z1))\n+\n+/*\n+** bic_s16_z_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tbic\tz0\\.h, p0/m, z0\\.h, \\1\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s16_z_tied2, svint16_t,\n+\t\tz0 = svbic_s16_z (p0, z1, z0),\n+\t\tz0 = svbic_z (p0, z1, z0))\n+\n+/*\n+** bic_s16_z_untied:\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tbic\tz0\\.h, p0/m, z0\\.h, z2\\.h\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s16_z_untied, svint16_t,\n+\t\tz0 = svbic_s16_z (p0, z1, z2),\n+\t\tz0 = svbic_z (p0, z1, z2))\n+\n+/*\n+** bic_w0_s16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tbic\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_w0_s16_z_tied1, svint16_t, int16_t,\n+\t\t z0 = svbic_n_s16_z (p0, z0, x0),\n+\t\t z0 = svbic_z (p0, z0, x0))\n+\n+/*\n+** bic_w0_s16_z_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.h), w0\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tbic\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_w0_s16_z_untied, svint16_t, int16_t,\n+\t\t z0 = svbic_n_s16_z (p0, z1, x0),\n+\t\t z0 = svbic_z (p0, z1, x0))\n+\n+/*\n+** bic_1_s16_z_tied1:\n+**\tmov\t(z[0-9]+\\.h), #-2\n+**\tmovprfx\tz0\\.h, p0/z, z0\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s16_z_tied1, svint16_t,\n+\t\tz0 = svbic_n_s16_z (p0, z0, 1),\n+\t\tz0 = svbic_z (p0, z0, 1))\n+\n+/*\n+** bic_1_s16_z_untied:\n+**\tmov\t(z[0-9]+\\.h), #-2\n+** (\n+**\tmovprfx\tz0\\.h, p0/z, z1\\.h\n+**\tand\tz0\\.h, p0/m, z0\\.h, \\1\n+** |\n+**\tmovprfx\tz0\\.h, p0/z, \\1\n+**\tand\tz0\\.h, p0/m, z0\\.h, z1\\.h\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s16_z_untied, svint16_t,\n+\t\tz0 = svbic_n_s16_z (p0, z1, 1),\n+\t\tz0 = svbic_z (p0, z1, 1))\n+\n+/*\n+** bic_s16_x_tied1:\n+**\tbic\tz0\\.d, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s16_x_tied1, svint16_t,\n+\t\tz0 = svbic_s16_x (p0, z0, z1),\n+\t\tz0 = svbic_x (p0, z0, z1))\n+\n+/*\n+** bic_s16_x_tied2:\n+**\tbic\tz0\\.d, z1\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s16_x_tied2, svint16_t,\n+\t\tz0 = svbic_s16_x (p0, z1, z0),\n+\t\tz0 = svbic_x (p0, z1, z0))\n+\n+/*\n+** bic_s16_x_untied:\n+**\tbic\tz0\\.d, z1\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s16_x_untied, svint16_t,\n+\t\tz0 = svbic_s16_x (p0, z1, z2),\n+\t\tz0 = svbic_x (p0, z1, z2))\n+\n+/*\n+** bic_w0_s16_x_tied1:\n+**\tmov\t(z[0-9]+)\\.h, w0\n+**\tbic\tz0\\.d, z0\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_w0_s16_x_tied1, svint16_t, int16_t,\n+\t\t z0 = svbic_n_s16_x (p0, z0, x0),\n+\t\t z0 = svbic_x (p0, z0, x0))\n+\n+/*\n+** bic_w0_s16_x_untied:\n+**\tmov\t(z[0-9]+)\\.h, w0\n+**\tbic\tz0\\.d, z1\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_w0_s16_x_untied, svint16_t, int16_t,\n+\t\t z0 = svbic_n_s16_x (p0, z1, x0),\n+\t\t z0 = svbic_x (p0, z1, x0))\n+\n+/*\n+** bic_1_s16_x_tied1:\n+**\tand\tz0\\.h, z0\\.h, #0xfffe\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s16_x_tied1, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, 1),\n+\t\tz0 = svbic_x (p0, z0, 1))\n+\n+/*\n+** bic_1_s16_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.h, z0\\.h, #0xfffe\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s16_x_untied, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z1, 1),\n+\t\tz0 = svbic_x (p0, z1, 1))\n+\n+/*\n+** bic_127_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_127_s16_x, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, 127),\n+\t\tz0 = svbic_x (p0, z0, 127))\n+\n+/*\n+** bic_128_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff7f\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_128_s16_x, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, 128),\n+\t\tz0 = svbic_x (p0, z0, 128))\n+\n+/*\n+** bic_255_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_255_s16_x, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, 255),\n+\t\tz0 = svbic_x (p0, z0, 255))\n+\n+/*\n+** bic_256_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xfeff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_256_s16_x, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, 256),\n+\t\tz0 = svbic_x (p0, z0, 256))\n+\n+/*\n+** bic_257_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xfefe\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_257_s16_x, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, 257),\n+\t\tz0 = svbic_x (p0, z0, 257))\n+\n+/*\n+** bic_512_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xfdff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_512_s16_x, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, 512),\n+\t\tz0 = svbic_x (p0, z0, 512))\n+\n+/*\n+** bic_65280_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_65280_s16_x, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, 0xff00),\n+\t\tz0 = svbic_x (p0, z0, 0xff00))\n+\n+/*\n+** bic_m127_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x7e\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m127_s16_x, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, -127),\n+\t\tz0 = svbic_x (p0, z0, -127))\n+\n+/*\n+** bic_m128_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x7f\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m128_s16_x, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, -128),\n+\t\tz0 = svbic_x (p0, z0, -128))\n+\n+/*\n+** bic_m255_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xfe\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m255_s16_x, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, -255),\n+\t\tz0 = svbic_x (p0, z0, -255))\n+\n+/*\n+** bic_m256_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0xff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m256_s16_x, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, -256),\n+\t\tz0 = svbic_x (p0, z0, -256))\n+\n+/*\n+** bic_m257_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x100\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m257_s16_x, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, -257),\n+\t\tz0 = svbic_x (p0, z0, -257))\n+\n+/*\n+** bic_m512_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x1ff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m512_s16_x, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, -512),\n+\t\tz0 = svbic_x (p0, z0, -512))\n+\n+/*\n+** bic_m32768_s16_x:\n+**\tand\tz0\\.h, z0\\.h, #0x7fff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m32768_s16_x, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, -0x8000),\n+\t\tz0 = svbic_x (p0, z0, -0x8000))\n+\n+/*\n+** bic_5_s16_x:\n+**\tmov\t(z[0-9]+)\\.h, #-6\n+**\tand\tz0\\.d, (z0\\.d, \\1\\.d|\\1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_5_s16_x, svint16_t,\n+\t\tz0 = svbic_n_s16_x (p0, z0, 5),\n+\t\tz0 = svbic_x (p0, z0, 5))"}, {"sha": "9e388e499b84e5209f4a34fea04118799d0e85b3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bic_s32.c", "status": "added", "additions": 363, "deletions": 0, "changes": 363, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,363 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bic_s32_m_tied1:\n+**\tbic\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s32_m_tied1, svint32_t,\n+\t\tz0 = svbic_s32_m (p0, z0, z1),\n+\t\tz0 = svbic_m (p0, z0, z1))\n+\n+/*\n+** bic_s32_m_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbic\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s32_m_tied2, svint32_t,\n+\t\tz0 = svbic_s32_m (p0, z1, z0),\n+\t\tz0 = svbic_m (p0, z1, z0))\n+\n+/*\n+** bic_s32_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tbic\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s32_m_untied, svint32_t,\n+\t\tz0 = svbic_s32_m (p0, z1, z2),\n+\t\tz0 = svbic_m (p0, z1, z2))\n+\n+/*\n+** bic_w0_s32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tbic\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_w0_s32_m_tied1, svint32_t, int32_t,\n+\t\t z0 = svbic_n_s32_m (p0, z0, x0),\n+\t\t z0 = svbic_m (p0, z0, x0))\n+\n+/*\n+** bic_w0_s32_m_untied:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0, z1\n+**\tbic\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_w0_s32_m_untied, svint32_t, int32_t,\n+\t\t z0 = svbic_n_s32_m (p0, z1, x0),\n+\t\t z0 = svbic_m (p0, z1, x0))\n+\n+/*\n+** bic_1_s32_m_tied1:\n+**\tmov\t(z[0-9]+\\.s), #-2\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s32_m_tied1, svint32_t,\n+\t\tz0 = svbic_n_s32_m (p0, z0, 1),\n+\t\tz0 = svbic_m (p0, z0, 1))\n+\n+/*\n+** bic_1_s32_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.s), #-2\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s32_m_untied, svint32_t,\n+\t\tz0 = svbic_n_s32_m (p0, z1, 1),\n+\t\tz0 = svbic_m (p0, z1, 1))\n+\n+/*\n+** bic_m2_s32_m:\n+**\tmov\t(z[0-9]+\\.s), #1\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m2_s32_m, svint32_t,\n+\t\tz0 = svbic_n_s32_m (p0, z0, -2),\n+\t\tz0 = svbic_m (p0, z0, -2))\n+\n+/*\n+** bic_s32_z_tied1:\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tbic\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s32_z_tied1, svint32_t,\n+\t\tz0 = svbic_s32_z (p0, z0, z1),\n+\t\tz0 = svbic_z (p0, z0, z1))\n+\n+/*\n+** bic_s32_z_tied2:\n+**\tmov\t(z[0-9]+)\\.d, z0\\.d\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tbic\tz0\\.s, p0/m, z0\\.s, \\1\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s32_z_tied2, svint32_t,\n+\t\tz0 = svbic_s32_z (p0, z1, z0),\n+\t\tz0 = svbic_z (p0, z1, z0))\n+\n+/*\n+** bic_s32_z_untied:\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tbic\tz0\\.s, p0/m, z0\\.s, z2\\.s\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s32_z_untied, svint32_t,\n+\t\tz0 = svbic_s32_z (p0, z1, z2),\n+\t\tz0 = svbic_z (p0, z1, z2))\n+\n+/*\n+** bic_w0_s32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tbic\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_w0_s32_z_tied1, svint32_t, int32_t,\n+\t\t z0 = svbic_n_s32_z (p0, z0, x0),\n+\t\t z0 = svbic_z (p0, z0, x0))\n+\n+/*\n+** bic_w0_s32_z_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.s), w0\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tbic\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_w0_s32_z_untied, svint32_t, int32_t,\n+\t\t z0 = svbic_n_s32_z (p0, z1, x0),\n+\t\t z0 = svbic_z (p0, z1, x0))\n+\n+/*\n+** bic_1_s32_z_tied1:\n+**\tmov\t(z[0-9]+\\.s), #-2\n+**\tmovprfx\tz0\\.s, p0/z, z0\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s32_z_tied1, svint32_t,\n+\t\tz0 = svbic_n_s32_z (p0, z0, 1),\n+\t\tz0 = svbic_z (p0, z0, 1))\n+\n+/*\n+** bic_1_s32_z_untied:\n+**\tmov\t(z[0-9]+\\.s), #-2\n+** (\n+**\tmovprfx\tz0\\.s, p0/z, z1\\.s\n+**\tand\tz0\\.s, p0/m, z0\\.s, \\1\n+** |\n+**\tmovprfx\tz0\\.s, p0/z, \\1\n+**\tand\tz0\\.s, p0/m, z0\\.s, z1\\.s\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s32_z_untied, svint32_t,\n+\t\tz0 = svbic_n_s32_z (p0, z1, 1),\n+\t\tz0 = svbic_z (p0, z1, 1))\n+\n+/*\n+** bic_s32_x_tied1:\n+**\tbic\tz0\\.d, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s32_x_tied1, svint32_t,\n+\t\tz0 = svbic_s32_x (p0, z0, z1),\n+\t\tz0 = svbic_x (p0, z0, z1))\n+\n+/*\n+** bic_s32_x_tied2:\n+**\tbic\tz0\\.d, z1\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s32_x_tied2, svint32_t,\n+\t\tz0 = svbic_s32_x (p0, z1, z0),\n+\t\tz0 = svbic_x (p0, z1, z0))\n+\n+/*\n+** bic_s32_x_untied:\n+**\tbic\tz0\\.d, z1\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s32_x_untied, svint32_t,\n+\t\tz0 = svbic_s32_x (p0, z1, z2),\n+\t\tz0 = svbic_x (p0, z1, z2))\n+\n+/*\n+** bic_w0_s32_x_tied1:\n+**\tmov\t(z[0-9]+)\\.s, w0\n+**\tbic\tz0\\.d, z0\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_w0_s32_x_tied1, svint32_t, int32_t,\n+\t\t z0 = svbic_n_s32_x (p0, z0, x0),\n+\t\t z0 = svbic_x (p0, z0, x0))\n+\n+/*\n+** bic_w0_s32_x_untied:\n+**\tmov\t(z[0-9]+)\\.s, w0\n+**\tbic\tz0\\.d, z1\\.d, \\1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_w0_s32_x_untied, svint32_t, int32_t,\n+\t\t z0 = svbic_n_s32_x (p0, z1, x0),\n+\t\t z0 = svbic_x (p0, z1, x0))\n+\n+/*\n+** bic_1_s32_x_tied1:\n+**\tand\tz0\\.s, z0\\.s, #0xfffffffe\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s32_x_tied1, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, 1),\n+\t\tz0 = svbic_x (p0, z0, 1))\n+\n+/*\n+** bic_1_s32_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.s, z0\\.s, #0xfffffffe\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s32_x_untied, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z1, 1),\n+\t\tz0 = svbic_x (p0, z1, 1))\n+\n+/*\n+** bic_127_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xffffff80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_127_s32_x, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, 127),\n+\t\tz0 = svbic_x (p0, z0, 127))\n+\n+/*\n+** bic_128_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xffffff7f\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_128_s32_x, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, 128),\n+\t\tz0 = svbic_x (p0, z0, 128))\n+\n+/*\n+** bic_255_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xffffff00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_255_s32_x, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, 255),\n+\t\tz0 = svbic_x (p0, z0, 255))\n+\n+/*\n+** bic_256_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xfffffeff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_256_s32_x, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, 256),\n+\t\tz0 = svbic_x (p0, z0, 256))\n+\n+/* TODO: Bad code and needs fixing.  */\n+TEST_UNIFORM_Z (bic_257_s32_x, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, 257),\n+\t\tz0 = svbic_x (p0, z0, 257))\n+\n+/*\n+** bic_512_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xfffffdff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_512_s32_x, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, 512),\n+\t\tz0 = svbic_x (p0, z0, 512))\n+\n+/*\n+** bic_65280_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xffff00ff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_65280_s32_x, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, 0xff00),\n+\t\tz0 = svbic_x (p0, z0, 0xff00))\n+\n+/*\n+** bic_m127_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0x7e\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m127_s32_x, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, -127),\n+\t\tz0 = svbic_x (p0, z0, -127))\n+\n+/*\n+** bic_m128_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0x7f\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m128_s32_x, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, -128),\n+\t\tz0 = svbic_x (p0, z0, -128))\n+\n+/*\n+** bic_m255_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xfe\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m255_s32_x, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, -255),\n+\t\tz0 = svbic_x (p0, z0, -255))\n+\n+/*\n+** bic_m256_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0xff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m256_s32_x, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, -256),\n+\t\tz0 = svbic_x (p0, z0, -256))\n+\n+/*\n+** bic_m257_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0x100\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m257_s32_x, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, -257),\n+\t\tz0 = svbic_x (p0, z0, -257))\n+\n+/*\n+** bic_m512_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0x1ff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m512_s32_x, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, -512),\n+\t\tz0 = svbic_x (p0, z0, -512))\n+\n+/*\n+** bic_m32768_s32_x:\n+**\tand\tz0\\.s, z0\\.s, #0x7fff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m32768_s32_x, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, -0x8000),\n+\t\tz0 = svbic_x (p0, z0, -0x8000))\n+\n+/*\n+** bic_5_s32_x:\n+**\tmov\t(z[0-9]+)\\.s, #-6\n+**\tand\tz0\\.d, (z0\\.d, \\1\\.d|\\1\\.d, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_5_s32_x, svint32_t,\n+\t\tz0 = svbic_n_s32_x (p0, z0, 5),\n+\t\tz0 = svbic_x (p0, z0, 5))"}, {"sha": "bf95368154726c5f54856472f89d3b1302be092e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bic_s64.c", "status": "added", "additions": 363, "deletions": 0, "changes": 363, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9", "patch": "@@ -0,0 +1,363 @@\n+/* { dg-final { check-function-bodies \"**\" \"\" \"-DCHECK_ASM\" } } */\n+\n+#include \"test_sve_acle.h\"\n+\n+/*\n+** bic_s64_m_tied1:\n+**\tbic\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s64_m_tied1, svint64_t,\n+\t\tz0 = svbic_s64_m (p0, z0, z1),\n+\t\tz0 = svbic_m (p0, z0, z1))\n+\n+/*\n+** bic_s64_m_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0, z1\n+**\tbic\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s64_m_tied2, svint64_t,\n+\t\tz0 = svbic_s64_m (p0, z1, z0),\n+\t\tz0 = svbic_m (p0, z1, z0))\n+\n+/*\n+** bic_s64_m_untied:\n+**\tmovprfx\tz0, z1\n+**\tbic\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s64_m_untied, svint64_t,\n+\t\tz0 = svbic_s64_m (p0, z1, z2),\n+\t\tz0 = svbic_m (p0, z1, z2))\n+\n+/*\n+** bic_x0_s64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tbic\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_x0_s64_m_tied1, svint64_t, int64_t,\n+\t\t z0 = svbic_n_s64_m (p0, z0, x0),\n+\t\t z0 = svbic_m (p0, z0, x0))\n+\n+/*\n+** bic_x0_s64_m_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0, z1\n+**\tbic\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_x0_s64_m_untied, svint64_t, int64_t,\n+\t\t z0 = svbic_n_s64_m (p0, z1, x0),\n+\t\t z0 = svbic_m (p0, z1, x0))\n+\n+/*\n+** bic_1_s64_m_tied1:\n+**\tmov\t(z[0-9]+\\.d), #-2\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s64_m_tied1, svint64_t,\n+\t\tz0 = svbic_n_s64_m (p0, z0, 1),\n+\t\tz0 = svbic_m (p0, z0, 1))\n+\n+/*\n+** bic_1_s64_m_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.d), #-2\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s64_m_untied, svint64_t,\n+\t\tz0 = svbic_n_s64_m (p0, z1, 1),\n+\t\tz0 = svbic_m (p0, z1, 1))\n+\n+/*\n+** bic_m2_s64_m:\n+**\tmov\t(z[0-9]+\\.d), #1\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m2_s64_m, svint64_t,\n+\t\tz0 = svbic_n_s64_m (p0, z0, -2),\n+\t\tz0 = svbic_m (p0, z0, -2))\n+\n+/*\n+** bic_s64_z_tied1:\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tbic\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s64_z_tied1, svint64_t,\n+\t\tz0 = svbic_s64_z (p0, z0, z1),\n+\t\tz0 = svbic_z (p0, z0, z1))\n+\n+/*\n+** bic_s64_z_tied2:\n+**\tmov\t(z[0-9]+\\.d), z0\\.d\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tbic\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s64_z_tied2, svint64_t,\n+\t\tz0 = svbic_s64_z (p0, z1, z0),\n+\t\tz0 = svbic_z (p0, z1, z0))\n+\n+/*\n+** bic_s64_z_untied:\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tbic\tz0\\.d, p0/m, z0\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s64_z_untied, svint64_t,\n+\t\tz0 = svbic_s64_z (p0, z1, z2),\n+\t\tz0 = svbic_z (p0, z1, z2))\n+\n+/*\n+** bic_x0_s64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tbic\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_x0_s64_z_tied1, svint64_t, int64_t,\n+\t\t z0 = svbic_n_s64_z (p0, z0, x0),\n+\t\t z0 = svbic_z (p0, z0, x0))\n+\n+/*\n+** bic_x0_s64_z_untied: { xfail *-*-* }\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tbic\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_x0_s64_z_untied, svint64_t, int64_t,\n+\t\t z0 = svbic_n_s64_z (p0, z1, x0),\n+\t\t z0 = svbic_z (p0, z1, x0))\n+\n+/*\n+** bic_1_s64_z_tied1:\n+**\tmov\t(z[0-9]+\\.d), #-2\n+**\tmovprfx\tz0\\.d, p0/z, z0\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s64_z_tied1, svint64_t,\n+\t\tz0 = svbic_n_s64_z (p0, z0, 1),\n+\t\tz0 = svbic_z (p0, z0, 1))\n+\n+/*\n+** bic_1_s64_z_untied:\n+**\tmov\t(z[0-9]+\\.d), #-2\n+** (\n+**\tmovprfx\tz0\\.d, p0/z, z1\\.d\n+**\tand\tz0\\.d, p0/m, z0\\.d, \\1\n+** |\n+**\tmovprfx\tz0\\.d, p0/z, \\1\n+**\tand\tz0\\.d, p0/m, z0\\.d, z1\\.d\n+** )\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s64_z_untied, svint64_t,\n+\t\tz0 = svbic_n_s64_z (p0, z1, 1),\n+\t\tz0 = svbic_z (p0, z1, 1))\n+\n+/*\n+** bic_s64_x_tied1:\n+**\tbic\tz0\\.d, z0\\.d, z1\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s64_x_tied1, svint64_t,\n+\t\tz0 = svbic_s64_x (p0, z0, z1),\n+\t\tz0 = svbic_x (p0, z0, z1))\n+\n+/*\n+** bic_s64_x_tied2:\n+**\tbic\tz0\\.d, z1\\.d, z0\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s64_x_tied2, svint64_t,\n+\t\tz0 = svbic_s64_x (p0, z1, z0),\n+\t\tz0 = svbic_x (p0, z1, z0))\n+\n+/*\n+** bic_s64_x_untied:\n+**\tbic\tz0\\.d, z1\\.d, z2\\.d\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_s64_x_untied, svint64_t,\n+\t\tz0 = svbic_s64_x (p0, z1, z2),\n+\t\tz0 = svbic_x (p0, z1, z2))\n+\n+/*\n+** bic_x0_s64_x_tied1:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tbic\tz0\\.d, z0\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_x0_s64_x_tied1, svint64_t, int64_t,\n+\t\t z0 = svbic_n_s64_x (p0, z0, x0),\n+\t\t z0 = svbic_x (p0, z0, x0))\n+\n+/*\n+** bic_x0_s64_x_untied:\n+**\tmov\t(z[0-9]+\\.d), x0\n+**\tbic\tz0\\.d, z1\\.d, \\1\n+**\tret\n+*/\n+TEST_UNIFORM_ZX (bic_x0_s64_x_untied, svint64_t, int64_t,\n+\t\t z0 = svbic_n_s64_x (p0, z1, x0),\n+\t\t z0 = svbic_x (p0, z1, x0))\n+\n+/*\n+** bic_1_s64_x_tied1:\n+**\tand\tz0\\.d, z0\\.d, #0xfffffffffffffffe\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s64_x_tied1, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, 1),\n+\t\tz0 = svbic_x (p0, z0, 1))\n+\n+/*\n+** bic_1_s64_x_untied:\n+**\tmovprfx\tz0, z1\n+**\tand\tz0\\.d, z0\\.d, #0xfffffffffffffffe\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_1_s64_x_untied, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z1, 1),\n+\t\tz0 = svbic_x (p0, z1, 1))\n+\n+/*\n+** bic_127_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xffffffffffffff80\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_127_s64_x, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, 127),\n+\t\tz0 = svbic_x (p0, z0, 127))\n+\n+/*\n+** bic_128_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xffffffffffffff7f\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_128_s64_x, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, 128),\n+\t\tz0 = svbic_x (p0, z0, 128))\n+\n+/*\n+** bic_255_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xffffffffffffff00\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_255_s64_x, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, 255),\n+\t\tz0 = svbic_x (p0, z0, 255))\n+\n+/*\n+** bic_256_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xfffffffffffffeff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_256_s64_x, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, 256),\n+\t\tz0 = svbic_x (p0, z0, 256))\n+\n+/* TODO: Bad code and needs fixing.  */\n+TEST_UNIFORM_Z (bic_257_s64_x, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, 257),\n+\t\tz0 = svbic_x (p0, z0, 257))\n+\n+/*\n+** bic_512_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xfffffffffffffdff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_512_s64_x, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, 512),\n+\t\tz0 = svbic_x (p0, z0, 512))\n+\n+/*\n+** bic_65280_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xffffffffffff00ff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_65280_s64_x, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, 0xff00),\n+\t\tz0 = svbic_x (p0, z0, 0xff00))\n+\n+/*\n+** bic_m127_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0x7e\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m127_s64_x, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, -127),\n+\t\tz0 = svbic_x (p0, z0, -127))\n+\n+/*\n+** bic_m128_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0x7f\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m128_s64_x, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, -128),\n+\t\tz0 = svbic_x (p0, z0, -128))\n+\n+/*\n+** bic_m255_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xfe\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m255_s64_x, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, -255),\n+\t\tz0 = svbic_x (p0, z0, -255))\n+\n+/*\n+** bic_m256_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0xff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m256_s64_x, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, -256),\n+\t\tz0 = svbic_x (p0, z0, -256))\n+\n+/*\n+** bic_m257_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0x100\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m257_s64_x, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, -257),\n+\t\tz0 = svbic_x (p0, z0, -257))\n+\n+/*\n+** bic_m512_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0x1ff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m512_s64_x, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, -512),\n+\t\tz0 = svbic_x (p0, z0, -512))\n+\n+/*\n+** bic_m32768_s64_x:\n+**\tand\tz0\\.d, z0\\.d, #0x7fff\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_m32768_s64_x, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, -0x8000),\n+\t\tz0 = svbic_x (p0, z0, -0x8000))\n+\n+/*\n+** bic_5_s64_x:\n+**\tmov\t(z[0-9]+\\.d), #-6\n+**\tand\tz0\\.d, (z0\\.d, \\1|\\1, z0\\.d)\n+**\tret\n+*/\n+TEST_UNIFORM_Z (bic_5_s64_x, svint64_t,\n+\t\tz0 = svbic_n_s64_x (p0, z0, 5),\n+\t\tz0 = svbic_x (p0, z0, 5))"}, {"sha": "0958a34039394d79ecd00ac3c855c01cecbce86a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bic_s8.c", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "30209ffb418f410094afd9df594dad98aa380a5d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bic_u16.c", "status": "added", "additions": 367, "deletions": 0, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "b308b599b4342454424b869da4104619c14089e9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bic_u32.c", "status": "added", "additions": 363, "deletions": 0, "changes": 363, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "e82db1e94fd605347adf01b4a0b286747e0ed01c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bic_u64.c", "status": "added", "additions": 363, "deletions": 0, "changes": 363, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "80c489b9cdb2b6c6dfd3ab5377bc902f8ef86f6d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/bic_u8.c", "status": "added", "additions": 286, "deletions": 0, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbic_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "63426cf947d488dec24711530b4d3c95ec06968d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/brka_b.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbrka_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbrka_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbrka_b.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "4f9a2c2d7b99a7c2d2f7e036103099381ee86b2d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/brkb_b.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbrkb_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbrkb_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbrkb_b.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "229a5fff9eba28597cf8a0ea4314bdaa5ed263fc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/brkn_b.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbrkn_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbrkn_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbrkn_b.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "2c074e3893bd26bc823364d69ae4b5fda6973d37", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/brkpa_b.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbrkpa_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbrkpa_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbrkpa_b.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "b41797ee192415d6194f9d856403f7aa2bc7964d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/brkpb_b.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbrkpb_b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbrkpb_b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fbrkpb_b.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "e89c7845595457955298dfe7ac408a576eae81f3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cadd_f16.c", "status": "added", "additions": 251, "deletions": 0, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcadd_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcadd_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcadd_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "ed5c16ff3d2e2f191f27f36fb77c33dd8b426067", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cadd_f32.c", "status": "added", "additions": 251, "deletions": 0, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcadd_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcadd_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcadd_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "0ada881c5986213da99cf2fc979ae85fab380304", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cadd_f64.c", "status": "added", "additions": 251, "deletions": 0, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcadd_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcadd_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcadd_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "d9a980f60c0876d893092b7c0a432ce1f67d5dc6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clasta_f16.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "cac01fa6d6409c589232fe8abab4e4b22eaaa612", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clasta_f32.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "43b93553ba8c7ad93eb5d696a9dce6a05fa83b30", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clasta_f64.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "f5e4f85ce33e009fcdca409f5b9c36a415c0f328", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clasta_s16.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "fbd82e77825000814024acd99792ed6fcf07fa28", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clasta_s32.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "08edf157bb47fc408d33249b5cf4965845ff2894", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clasta_s64.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "286f16a9d8e0eded38393666489f4fd0d686ceb6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clasta_s8.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "40c6dca9081709f5b59dd3ae24c8105c2efdef87", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clasta_u16.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "6c46e13cf2a44e970f7cd7148bbc4751fd695652", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clasta_u32.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "99ad41e502e79a2e73b02b1555c1bc1cc9a421db", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clasta_u64.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "eb438f4ea2294d9079b7b21951b2e65e0fce9cde", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clasta_u8.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclasta_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "e56d7688a1c67673ea4e1b63a309ee89102c4767", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clastb_f16.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "c580d13064b8d0065b52a67bbedd6e3a3a924cbb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clastb_f32.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "217a76f5112d296dc71feca12b6b22e796fd3f47", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clastb_f64.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "37be28040284d6b980c6edaaa3ec30a88f2ad511", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clastb_s16.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "2e56c5a8f8315155fa6922186e7c7e46c08b2ec4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clastb_s32.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "9ce210aaec09dfc876985b56a715a3da602ae127", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clastb_s64.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "eb76c22cdb8b0623c121b4ef6ba04ad2a1758cec", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clastb_s8.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "5aea9c7bd01c1df0fd33822184e4ca9a6773f8c5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clastb_u16.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "47fcf4f27fad949df52e7af73e680f8f18c24e4a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clastb_u32.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "fb57afe8525e20c43acfa15e5f514ea0ae680fe1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clastb_u64.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "f3ca8492007ee63fa424a09c05697c67ffe01909", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clastb_u8.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclastb_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "7af312397b948ec655bcb231eaec8ec1d7ec39ac", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cls_s16.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcls_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcls_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcls_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "813876f6877f44d098b91f38188aa8ea1b4d22ae", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cls_s32.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcls_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcls_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcls_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "660a20556c80d5f28b58d99b07c36377efbcd05a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cls_s64.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcls_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcls_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcls_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "56f5c26086ff3aa973253db55a3b63ac2295109c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cls_s8.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcls_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcls_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcls_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "58f89005cd5af8ce98b8197d6d9c6dcf8c9eab6b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clz_s16.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "a9198070b580692f9be3defce9c98d8adece68e5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clz_s32.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "02c0c993e0b7e3faba2fe6d528dbd71254db176f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clz_s64.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "642d298c8efc940b2b188a8d3cac5b4a0373651e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clz_s8.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "f0872301759bfc7870786818fa42c4aa0a0ef997", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clz_u16.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "e0042413162b86bdd05229d63eeffc9af48520c4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clz_u32.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "e879e1b9a6ea4d4bf76e01972b84dc6f39684ee2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clz_u64.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "ce6cb8f45172b7a0f1d30ab849d374db5a3e80ec", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/clz_u8.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fclz_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "3bf44a59f09250dd2f7e8399da4244ed122423ff", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmla_f16.c", "status": "added", "additions": 675, "deletions": 0, "changes": 675, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmla_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmla_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmla_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "b266738b2484f208fbdff7b83488b7b623308feb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmla_f32.c", "status": "added", "additions": 675, "deletions": 0, "changes": 675, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmla_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmla_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmla_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "024ae5ce3ad9a313720f1a4cc6a476ddd23fcb44", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmla_f64.c", "status": "added", "additions": 675, "deletions": 0, "changes": 675, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmla_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmla_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmla_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "16f1b77ad3c6937a0d39393fd41debb715caa260", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmla_lane_f16.c", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmla_lane_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmla_lane_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmla_lane_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "85bff68fd8de29065dcc0c4797b3bde1b40d8e39", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmla_lane_f32.c", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmla_lane_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmla_lane_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmla_lane_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "7149ad3004acfde2097a32aac429333ef0747ed3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpeq_f16.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "05910bc50f5e2a9f0d1c3ac363c9ea27fcd50c09", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpeq_f32.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "f94bdfe2755344f4ddc7d7cc72cbfcc7c27ff04d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpeq_f64.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "b0befcb7795fe562e043a7a55687e29713b0fd50", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpeq_s16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "de48a2c386c1ae4f38040bd4ec83510cd65b3f4a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpeq_s32.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "ff976712a029e2ab77f2a17c2e91d36792fecc8c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpeq_s64.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "1325755a8f2525421fcde0796c3eed4d7a29ba7b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpeq_s8.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "91004692cdee78259b4ed22caf6b9bff2fb39375", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpeq_u16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "2cff56eb6ceb3004651f7cc87d213e7fd1c075d6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpeq_u32.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "0f02c99880a596a3c04ca0daa0ee9aa135345459", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpeq_u64.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "ccd9a61c60bd57e888a45f2f1643faa249acb39e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpeq_u8.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "c9712b3b459250b22e84a30ce9a65075ba676f5c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpeq_wide_s16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_wide_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_wide_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_wide_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "22bd99f57da707ddfb80a7b9f4fb707509a8c3ec", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpeq_wide_s32.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_wide_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_wide_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_wide_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "a9e9a0bf53be5ebd5cebf754d1aae7e8d384d533", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpeq_wide_s8.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_wide_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_wide_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpeq_wide_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "a6db8c16a8481b416fa746bed46f3caf2baf42ed", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_f16.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "ee2976e58249568648fe796c6a51a213bcd3b5b9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_f32.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "ceea0afe3ef647712d3c555ebbee088b04972499", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_f64.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "de9180b84637d9ca9e90bfd41d63d824d80e1940", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_s16.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "67286b1fe3271ebfd34c485e3efb1476382cc73a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_s32.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "02e3ac07a5055711b07a4fcd126c59ebbdbcb3bc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_s64.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "45c9c5f1031f428c87fca7f54ddca46fe008d1c1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_s8.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "7c7d2b30743dc2beaf3cd4fd9af0313c45270d87", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_u16.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "a2021ef50d20277bc9abdea9b2a8372bad98845e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_u32.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "0f91595902935c1359a55c1f641f9c441a30c862", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_u64.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "39f988d01da66f343ad41efbd3e6816cf920158a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_u8.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "0400d787107a0b3fbac7a08631ca12ad4fe8c986", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_wide_s16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "ad7b9c55bd681410f47982be2796fd99ef4e9bcb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_wide_s32.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "b03a42488901d62a0921ef986ad89f9cdcbc09af", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_wide_s8.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "966b1e554be0dd6f16f3c3d8ed4b0daebe7baac8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_wide_u16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "fdeb53a4659488a4b264b18276e5959d5e660cfd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_wide_u32.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "565093120270dc98a03503e90f3c3c5aa9b69129", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpge_wide_u8.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpge_wide_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "69b01579470a7e032db27fea7a1e1681f16831c4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_f16.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "7d66b67c365a3784da0d2d65d32939234b3d1a0e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_f32.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "f3a155476c900d4aa58bccb1beede5da9619bfc8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_f64.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "cc86c0c00a33620838926ce2994a83d196c0bf39", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_s16.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "75f0cc73709038832db4591c98b08f34bd69a4fb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_s32.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "dbfd55e6fc0a83bea3c01e1239c0512e772ea61b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_s64.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "710c2e602b0a301808c3e21690ff953a079750ba", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_s8.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "48e99c72c83a9cab7e918b5a43dd4bc482732137", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_u16.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "408037d720cfb3f4a290cc829cba8aeef0111fb6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_u32.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "f76a23e491b12ac9c529145ffcf4577419497b69", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_u64.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "4f28331f9e9ce551efcc51acd3d3f752af3bd2bb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_u8.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "07d3bbbd90e03e0f4ca7f5a40e98d048aacc8534", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_wide_s16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "f984362e68b0e0c4fcedcd78f8c603f6f9277715", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_wide_s32.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "07047a315f55411f1ede2018b5fae50612def733", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_wide_s8.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "bcffb88c096a8b8abdb3e6ff03614da2d3f2ed19", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_wide_u16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "65c0231e592dbca0ec105da5cef05edd1cf1aee0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_wide_u32.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "0d1142f27a1a4f2c287b84196961beddb54340dd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpgt_wide_u8.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpgt_wide_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "7d500590f1f62315886be0d07c1fd59a7b67494e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_f16.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "3df63fef762eb319ae4753f4875f5463cb059579", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_f32.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "5946a1b3ac2cbfd08999d32c10f724ed3d2a40b6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_f64.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "9b221bb4c20db8518d1e8bb6db78d36e3309b36e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_s16.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "b0c8367e24ed3be8dc233f6ef95b14a8502a2430", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_s32.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "faaa876142706d35ff3fae0fd836714085e0e00a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_s64.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "222487d75cf40c2888161f40e35c8af261cbc0f5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_s8.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "26af06e5285473a7293b9bfc0f6f6fb0fcb2f150", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_u16.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "cee2d14c8eab6355d15bac3b03c3f34bca80c22e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_u32.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "b8388bca8656199e057150d9d73d0c791b9b22a6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_u64.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "55a8d4f40b1d37c77e237e00f7a0f7ab78b4306c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_u8.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "f1f0b2ed620a6f827c42596a022f30e5f4e1a7db", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_wide_s16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "edc5513b67bae202706dd67b332a4e6921eb7a98", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_wide_s32.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "984044460ee090a45b568e56df1967f4238c6be3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_wide_s8.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "a39a1aad5c5565d493ccbf3a5fb5888c6d728597", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_wide_u16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "fe682c9e827f74d543277a08d29004783decadb2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_wide_u32.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "893dfa62738c69449743c5688c8b50a8293b6869", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmple_wide_u8.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmple_wide_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "598f673a815d10cc388f514dcf074c5814761897", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_f16.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "f9dea3665de1573f5a15f0681ad88c2f8fc19c89", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_f32.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "6f251db4f380780a0a392f32cd258b9bf8885372", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_f64.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "1e2bf9dde4e382a22c8de46623f99f6e68937c94", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_s16.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "8e2c02c4df7045475c2ab2834e5270013d6e2066", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_s32.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "818c9fba92b3aa5089f47225523b7cde3cc66080", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_s64.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "54b8dc408829c1a2ea412f135a11113581833478", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_s8.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "c0f2a05508e73a0dbc2dea2ea3e8fff768ac0f75", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_u16.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "3bb0b1464b297d96bf6c69729160ae1e9502c0dd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_u32.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "d9de5add2bca416bdd1fc11ef8a7b88e28b4f709", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_u64.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "42d5ad8689495c369fae9a8e80d538944c9336f6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_u8.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "a3c8942ba8d9ed039db4d9d7382662c4df5f2250", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_wide_s16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "b2cad6773e09d10f34d31f94cbcde18d7f6ddd4f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_wide_s32.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "1015fe3093a259db06981e502508eeb86a7214c7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_wide_s8.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "851400d36b31d5a36690c9787ce19c96f7430dce", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_wide_u16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "1f9652def17136d8979783c87323e75c645a9c52", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_wide_u32.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "95ef3cf16df008078c4bd1f2e048c896e59a6edd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmplt_wide_u8.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmplt_wide_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "63e203b0924d5adcdb59baa9ef1cc12b3a57663e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpne_f16.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "f81e2da511fd00a39d3c620ac8ed66d75f448b73", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpne_f32.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "22e4eeef4810e32f3f314e9c37247c4bb0c30467", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpne_f64.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "d8c743f8b2b1f18a8163d517aa1ff273469ebc04", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpne_s16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "0d3c35111ae7f7288405fe5342f10daff8a3d511", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpne_s32.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "4cf78f2dd3fea0c6496a27c5580f12f315e46604", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpne_s64.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "6409ecdd42bcd2d306ebc5f7ae3af8df06d5228f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpne_s8.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "4d22bc7d3f3e7eebe6171c1104bc269f3f258806", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpne_u16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "b7ca94a69e978ec8466591bf23d3115addab73a5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpne_u32.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "960ac85b1d20d9d01cb1c47d841c85b499c8f9f5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpne_u64.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "cb8496eabd9a049bfb48d5ae45f163da324b8d43", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpne_u8.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "4cb7586c9d2059c29749cc0d13a07c739a71a474", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpne_wide_s16.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_wide_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_wide_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_wide_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "633994ed3f4ced407d9d18f032e27693c3da2285", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpne_wide_s32.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_wide_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_wide_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_wide_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "de343f4cc6904fa52c3cc220b0661e7b651a49e7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpne_wide_s8.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_wide_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_wide_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpne_wide_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "8f702cddef8073d3dbd63b46a54d18fa3c667f51", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpuo_f16.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpuo_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpuo_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpuo_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "8827604aa3f035aaddb1b16004af4482a89cdce6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpuo_f32.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpuo_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpuo_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpuo_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "d7a71eca464d8c5d26c3197538267815a44cc216", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cmpuo_f64.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpuo_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpuo_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcmpuo_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "19d46be68b57cd154b1bd0b50633720646564100", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnot_s16.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "041b59a046ccaabf4be8fa88fcaecaa657ea5dde", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnot_s32.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "c7135cb9568937a96259474c3bc7577e5b0bbd45", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnot_s64.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "0560f97516b383e6357ebbe9c61b3f80a908e5a1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnot_s8.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "7ea9ff71ded6b856de614772c8a01714f6130723", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnot_u16.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "972c7751eb6bdb925617563430c321aab840ff4c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnot_u32.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "f25e001c56934865a1dec04387c31bad0224e3ba", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnot_u64.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "e135a72956afc336ab762fdb06e43273ca927931", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnot_u8.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnot_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "b8061bb80dda557a45f2700accc9aad200f462b1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnt_f16.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "b9292c97709dc1cb92b03ba15ec6abaa52126c2b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnt_f32.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "4976ee467a2a38705c98c1ae9397f044102e078a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnt_f64.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "a8ff8f3d2cfba2d7527a659a4f8c6f78dca5d885", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnt_s16.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "3d16041f24e2b43d534e16240b160a13650317fe", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnt_s32.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "8c8871ba5934a96c1a40045a9b36b6b0614cd9d5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnt_s64.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "8d85c8e51496fb3ec0e64ee26a74a909cc6b7312", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnt_s8.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_s8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "f173d3108f21b971953983595e61f56d4fa2942d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnt_u16.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "11969a6b6ed62a5db8d61f79aa4fcd2b798f2eab", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnt_u32.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "4eb69ea846e1ef7b1685ab1156c1661b597bb7de", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnt_u64.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "30e798302194b5c44f65568dddd9242980306590", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnt_u8.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnt_u8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "8b8fe8e4f2b6e4dc6d52806c0a86955dac95086b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cntb.c", "status": "added", "additions": 280, "deletions": 0, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntb.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "effc5668dbee6db59c8b28cad3ab0747a403d125", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cntb_pat.c", "status": "added", "additions": 432, "deletions": 0, "changes": 432, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntb_pat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntb_pat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntb_pat.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "0d0ed4849f1ca25c0adfe837c266cddc8076525d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cntd.c", "status": "added", "additions": 278, "deletions": 0, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntd.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "31ecde7ae1d7938214e732e021e77195ef29d8a7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cntd_pat.c", "status": "added", "additions": 426, "deletions": 0, "changes": 426, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntd_pat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntd_pat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntd_pat.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "c29930f1591a939adc389d04f66b5027d23aab01", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnth.c", "status": "added", "additions": 280, "deletions": 0, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnth.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnth.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnth.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "7a42e7ad963d6dc0a2ef0efa913215864d92ecc0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cnth_pat.c", "status": "added", "additions": 426, "deletions": 0, "changes": 426, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnth_pat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnth_pat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcnth_pat.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "d88b9e5f32c57131eb3c019d2dfeb8a2a477c0bd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cntp_b16.c", "status": "added", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntp_b16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntp_b16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntp_b16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "0da818895281f702dd48f7c537e1251000524849", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cntp_b32.c", "status": "added", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntp_b32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntp_b32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntp_b32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "6ddbaef5af1e2a2c11163419254ca969c1ecab93", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cntp_b64.c", "status": "added", "additions": 243, "deletions": 0, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntp_b64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntp_b64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntp_b64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "e02c02cd69504fa1901456f82015453f6d5f455f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cntp_b8.c", "status": "added", "additions": 253, "deletions": 0, "changes": 253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntp_b8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntp_b8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntp_b8.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "e26cc67a467eee96c1ae9e1bea217314c2abd30e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cntw.c", "status": "added", "additions": 279, "deletions": 0, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntw.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "ff6b7d882b383d8c1e45a1720c4de5a039fa0dd6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cntw_pat.c", "status": "added", "additions": 426, "deletions": 0, "changes": 426, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntw_pat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntw_pat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcntw_pat.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "2e80d6830ca53e21cac679f393631bffc9b9bd0c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/compact_f32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "e0bc33efec2cf693cbd7cfff47312db9567087af", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/compact_f64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "e4634982bf66b6c0355513369bd8801e21d140e6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/compact_s32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "71cb97b8a2a934e9ee7b2e180d2223ed2d8cb7bc", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/compact_s64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "954329a0b2fdd2aa3717e6fa571f7b05fe42cbf5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/compact_u32.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "ec664845f4a01233476be35f741dc8120b95f5d0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/compact_u64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcompact_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "b09e6ab1793f1b1a181e08606aa804531b2f709f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/create2_1.c", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate2_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate2_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate2_1.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "6b71bf38d69aa1f48774d2b1fa53894a326bd1c7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/create3_1.c", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate3_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate3_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate3_1.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "03b22d3c1ec052e172db2cc82a2ae0db06e8b54f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/create4_1.c", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate4_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate4_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcreate4_1.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "5dcd480464bc02875880cf08f53fbab7b53098ab", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cvt_f16.c", "status": "added", "additions": 731, "deletions": 0, "changes": 731, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "c1646993996d0f602252cfffd46794de00c426a1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cvt_f32.c", "status": "added", "additions": 549, "deletions": 0, "changes": 549, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "1d08e6ec503d17b0a84797d005613546c464006d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cvt_f64.c", "status": "added", "additions": 549, "deletions": 0, "changes": 549, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "81761ab092cb5fdcc1e861fa1538d6fccc2759d5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cvt_s16.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_s16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "d30da5cc53a184605c13e3be62f38ac008610fc8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cvt_s32.c", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_s32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "68cd80784deba6891bae5e6cedf12b3e530c8b82", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cvt_s64.c", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_s64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "4db0dffdd97798d61a75b06af0bbf4bdbece8676", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cvt_u16.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_u16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "52ef49fcf09264d73bdb187a3e6d62383d99c691", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cvt_u32.c", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_u32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "0c43758aeb44a9a1c586ba0a1045a1f0df9a3cc1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/cvt_u64.c", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fcvt_u64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "35f5c15891185bb5e312e17f86f03f1deabed53f", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/div_f16.c", "status": "added", "additions": 303, "deletions": 0, "changes": 303, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f16.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "40cc203da6788cebc6402b77e34f81aefe4277a0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/div_f32.c", "status": "added", "additions": 303, "deletions": 0, "changes": 303, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f32.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}, {"sha": "56acbbe95503216d949f9627718fa512e2341b2e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/div_f64.c", "status": "added", "additions": 303, "deletions": 0, "changes": 303, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc73c4c24daec96ad3e7ff904645c3095a4febe9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fdiv_f64.c?ref=bc73c4c24daec96ad3e7ff904645c3095a4febe9"}]}