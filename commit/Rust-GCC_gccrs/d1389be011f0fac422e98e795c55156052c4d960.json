{"sha": "d1389be011f0fac422e98e795c55156052c4d960", "node_id": "C_kwDOANBUbNoAKGQxMzg5YmUwMTFmMGZhYzQyMmU5OGU3OTVjNTUxNTYwNTJjNGQ5NjA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-24T09:37:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-24T09:37:50Z"}, "message": "libstdc++: Workaround buggy printf on Solaris in to_chars/float128_c++23.cc test [PR107815]\n\nAs mentioned in the PR, Solaris apparently can handle right\nprintf (\"%.0Lf\\n\", 1e+202L * __DBL_MAX__);\nwhich prints 511 chars long number, but can't handle\nprintf (\"%.0Lf\\n\", 1e+203L * __DBL_MAX__);\nnor\nprintf (\"%.0Lf\\n\", __LDBL_MAX__);\nproperly, instead of printing 512 chars long number for the former and\n4933 chars long number for the second, it handles them as\nif user asked for \"%.0Le\\n\" in those cases.\n\nThe following patch disables the single problematic value that fails\nin the test, and also fixes commented out debugging printouts.\n\n2022-11-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libstdc++/107815\n\t* testsuite/20_util/to_chars/float128_c++23.cc (test): Disable\n\t__FLT128_MAX__ test on Solaris.  Fix up commented out debugging\n\tprintouts.", "tree": {"sha": "a0cc609a4a03c3104d9f61dff1a0f253c57ad34d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0cc609a4a03c3104d9f61dff1a0f253c57ad34d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1389be011f0fac422e98e795c55156052c4d960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1389be011f0fac422e98e795c55156052c4d960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1389be011f0fac422e98e795c55156052c4d960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1389be011f0fac422e98e795c55156052c4d960/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "add0f941be18cdf962a0f300019acacbf2325d41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/add0f941be18cdf962a0f300019acacbf2325d41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/add0f941be18cdf962a0f300019acacbf2325d41"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "735a507827a29b402d44f961c81e53f079307afd", "filename": "libstdc++-v3/testsuite/20_util/to_chars/float128_c++23.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1389be011f0fac422e98e795c55156052c4d960/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Ffloat128_c%2B%2B23.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1389be011f0fac422e98e795c55156052c4d960/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Ffloat128_c%2B%2B23.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Ffloat128_c%2B%2B23.cc?ref=d1389be011f0fac422e98e795c55156052c4d960", "patch": "@@ -52,14 +52,17 @@ test(std::chars_format fmt = std::chars_format{})\n     std::numbers::inv_sqrt3_v<std::float128_t>,\n     std::numbers::egamma_v<std::float128_t>,\n     std::numbers::phi_v<std::float128_t>,\n+// Solaris has non-conforming printf, see PR98384 and PR107815.\n+#if !(defined(__sun__) && defined(__svr4__))\n     std::numeric_limits<std::float128_t>::max()\n+#endif\n   };\n   char str1[10000], str2[10000];\n   for (auto u : tests)\n     {\n       auto [ptr1, ec1] = std::to_chars(str1, str1 + sizeof(str1), u, fmt);\n       VERIFY( ec1 == std::errc() );\n-//    std::cout << i << ' ' << std::string_view (str1, ptr1) << '\\n';\n+//    std::cout << u << ' ' << std::string_view (str1, ptr1) << '\\n';\n       if (fmt == std::chars_format::fixed)\n \t{\n \t  auto [ptr2, ec2] = std::to_chars(str2, str2 + (ptr1 - str1), u, fmt);\n@@ -76,7 +79,7 @@ test(std::chars_format fmt = std::chars_format{})\n \n       auto [ptr5, ec5] = std::to_chars(str1, str1 + sizeof(str1), u, fmt, 90);\n       VERIFY( ec5 == std::errc() );\n-//    std::cout << i << ' ' << std::string_view (str1, ptr5) << '\\n';\n+//    std::cout << u << ' ' << std::string_view (str1, ptr5) << '\\n';\n       v = 4.0f128;\n       auto [ptr6, ec6] = std::from_chars(str1, ptr5, v,\n \t\t\t\t\t fmt == std::chars_format{}"}]}