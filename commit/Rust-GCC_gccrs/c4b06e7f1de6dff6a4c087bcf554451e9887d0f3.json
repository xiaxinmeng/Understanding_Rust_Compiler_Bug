{"sha": "c4b06e7f1de6dff6a4c087bcf554451e9887d0f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRiMDZlN2YxZGU2ZGZmNmE0YzA4N2JjZjU1NDQ1MWU5ODg3ZDBmMw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-09-19T14:33:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-09-19T14:33:51Z"}, "message": "PR libstdc++/82254 fix std::is_nothrow_invocable_r w.r.t throwing conversions\n\n\tPR libstdc++/82254\n\t* include/std/type_traits (__is_invocable): Add partial specialization\n\tfor INVOKE<void> case and remove is_void<R> check from partial\n\tspecialization for INVOKE<R> case.\n\t(__is_nt_invocable_impl): New helper for is_nothrow_invocable_r.\n\t(is_nothrow_invocable_r): Use __is_nt_invocable_impl.\n\t* testsuite/20_util/is_nothrow_invocable/value.cc: Add tests for\n\tconversions that can throw or fail to convert. Use static assert\n\tstrings to explain negative results.\n\t* testsuite/20_util/is_nothrow_invocable/value_ext.cc: Use\n\tis_nothrow_constructible in is_nt_invocable_conv.\n\nFrom-SVN: r252977", "tree": {"sha": "8663e2cd36d2eb27eef959675595ee25e8f9d74b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8663e2cd36d2eb27eef959675595ee25e8f9d74b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4b06e7f1de6dff6a4c087bcf554451e9887d0f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4b06e7f1de6dff6a4c087bcf554451e9887d0f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4b06e7f1de6dff6a4c087bcf554451e9887d0f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4b06e7f1de6dff6a4c087bcf554451e9887d0f3/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e32d238855968bce82a6cca4655298c42185508d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32d238855968bce82a6cca4655298c42185508d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e32d238855968bce82a6cca4655298c42185508d"}], "stats": {"total": 139, "additions": 115, "deletions": 24}, "files": [{"sha": "3c75c7639cad1b0fa2b8c76ac6222a6e96186eea", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b06e7f1de6dff6a4c087bcf554451e9887d0f3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b06e7f1de6dff6a4c087bcf554451e9887d0f3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c4b06e7f1de6dff6a4c087bcf554451e9887d0f3", "patch": "@@ -1,3 +1,17 @@\n+2017-09-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/82254\n+\t* include/std/type_traits (__is_invocable): Add partial specialization\n+\tfor INVOKE<void> case and remove is_void<R> check from partial\n+\tspecialization for INVOKE<R> case.\n+\t(__is_nt_invocable_impl): New helper for is_nothrow_invocable_r.\n+\t(is_nothrow_invocable_r): Use __is_nt_invocable_impl.\n+\t* testsuite/20_util/is_nothrow_invocable/value.cc: Add tests for\n+\tconversions that can throw or fail to convert. Use static assert\n+\tstrings to explain negative results.\n+\t* testsuite/20_util/is_nothrow_invocable/value_ext.cc: Use\n+\tis_nothrow_constructible in is_nt_invocable_conv.\n+\n 2017-09-18  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/81468"}, {"sha": "036f7667bd812652c12838c6dcdc41976235bec4", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b06e7f1de6dff6a4c087bcf554451e9887d0f3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b06e7f1de6dff6a4c087bcf554451e9887d0f3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=c4b06e7f1de6dff6a4c087bcf554451e9887d0f3", "patch": "@@ -2592,7 +2592,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Result, typename _Ret>\n     struct __is_invocable_impl<_Result, _Ret, __void_t<typename _Result::type>>\n-    : __or_<is_void<_Ret>, is_convertible<typename _Result::type, _Ret>>::type\n+    : is_convertible<typename _Result::type, _Ret>::type\n+    { };\n+\n+  template<typename _Result>\n+    struct __is_invocable_impl<_Result, void, __void_t<typename _Result::type>>\n+    : true_type\n     { };\n \n   template<typename _Fn, typename... _ArgTypes>\n@@ -2691,10 +2696,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n              __call_is_nothrow_<_Fn, _ArgTypes...>>::type\n     { };\n \n+  template<typename _Result, typename _Ret, typename = void>\n+    struct __is_nt_invocable_impl : false_type { };\n+\n+  template<typename _Result, typename _Ret>\n+    struct __is_nt_invocable_impl<_Result, _Ret,\n+\t\t\t\t  __void_t<typename _Result::type>>\n+    : __and_<is_convertible<typename _Result::type, _Ret>,\n+\t     is_nothrow_constructible<_Ret, typename _Result::type>>\n+    { };\n+\n+  template<typename _Result>\n+    struct __is_nt_invocable_impl<_Result, void,\n+\t\t\t\t  __void_t<typename _Result::type>>\n+    : true_type\n+    { };\n+\n   /// std::is_nothrow_invocable_r\n   template<typename _Ret, typename _Fn, typename... _ArgTypes>\n     struct is_nothrow_invocable_r\n-    : __and_<__is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, _Ret>,\n+    : __and_<__is_nt_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, _Ret>,\n              __call_is_nothrow_<_Fn, _ArgTypes...>>::type\n     { };\n "}, {"sha": "dfa76aae61c23acd8ac26315b41f81e8f786143e", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_invocable/value.cc", "status": "modified", "additions": 75, "deletions": 21, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b06e7f1de6dff6a4c087bcf554451e9887d0f3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b06e7f1de6dff6a4c087bcf554451e9887d0f3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue.cc?ref=c4b06e7f1de6dff6a4c087bcf554451e9887d0f3", "patch": "@@ -40,6 +40,10 @@ template<typename R, typename... T>\n \n void test01()\n {\n+  struct T { T(int) { } };\n+  struct NT { NT(int) noexcept { } };\n+  struct Ex { explicit Ex(int) noexcept { } };\n+\n   using func_type = void(*)();\n   static_assert( ! is_nt_invocable< func_type>(),     \"\");\n \n@@ -55,28 +59,46 @@ void test01()\n   static_assert( ! is_nt_invocable< mem_type, int >(),   \"\");\n   static_assert( ! is_nt_invocable< mem_type, int& >(),\t\"\");\n \n-  static_assert(   is_nt_invocable< mem_type, X& >(),       \"\");\n-  static_assert(   is_nt_invocable_r< int,  mem_type, X& >(), \"\");\n-  static_assert(   is_nt_invocable_r< int&, mem_type, X& >(), \"\");\n-  static_assert(   is_nt_invocable_r< long, mem_type, X& >(), \"\");\n-  static_assert(   is_nt_invocable_r< int&, mem_type, X* >(), \"\");\n+  static_assert(   is_nt_invocable< mem_type, X& >(),          \"\");\n+  static_assert(   is_nt_invocable_r< int,   mem_type, X& >(), \"\");\n+  static_assert(   is_nt_invocable_r< int&,  mem_type, X& >(), \"\");\n+  static_assert(   is_nt_invocable_r< long,  mem_type, X& >(), \"\");\n+  static_assert( ! is_nt_invocable_r< long&, mem_type, X& >(),\n+\t\t   \"conversion fails, cannot bind long& to int\");\n+  static_assert(   is_nt_invocable_r< int&,  mem_type, X* >(), \"\");\n+\n+  static_assert( ! is_nt_invocable_r< T,  mem_type, X& >(),\n+\t\t   \"conversion throws\");\n+  static_assert(   is_nt_invocable_r< NT, mem_type, X& >(), \"\");\n+  static_assert( ! is_nt_invocable_r< Ex, mem_type, X& >(),\n+\t\t   \"conversion fails, would use explicit constructor\");\n \n   using memfun_type = int (X::*)();\n \n-  static_assert( ! is_nt_invocable< memfun_type >(),     \"\");\n-  static_assert( ! is_nt_invocable< memfun_type, int >(),  \"\");\n-  static_assert( ! is_nt_invocable< memfun_type, int& >(), \"\");\n-  static_assert( ! is_nt_invocable< memfun_type, X& >(),   \"\");\n-  static_assert( ! is_nt_invocable< memfun_type, X* >(),   \"\");\n+  static_assert( ! is_nt_invocable< memfun_type >(),       \"no object\");\n+  static_assert( ! is_nt_invocable< memfun_type, int >(),  \"no object\");\n+  static_assert( ! is_nt_invocable< memfun_type, int& >(), \"no object\");\n+  static_assert( ! is_nt_invocable< memfun_type, X& >(),   \"call throws\");\n+  static_assert( ! is_nt_invocable< memfun_type, X* >(),   \"call throws\");\n+\n+  static_assert( ! is_nt_invocable_r< T,  memfun_type, X& >(), \"call throws\");\n+  static_assert( ! is_nt_invocable_r< NT, memfun_type, X& >(), \"call throws\");\n+  static_assert( ! is_nt_invocable_r< Ex, memfun_type, X& >(), \"call throws\");\n \n #if __cpp_noexcept_function_type\n   using memfun_type_nt = int (X::*)() noexcept;\n \n-  static_assert( ! is_nt_invocable< memfun_type_nt >(),\t    \"\");\n-  static_assert( ! is_nt_invocable< memfun_type_nt, int >(),  \"\");\n-  static_assert( ! is_nt_invocable< memfun_type_nt, int& >(), \"\");\n+  static_assert( ! is_nt_invocable< memfun_type_nt >(),\t      \"no object\");\n+  static_assert( ! is_nt_invocable< memfun_type_nt, int >(),  \"no object\");\n+  static_assert( ! is_nt_invocable< memfun_type_nt, int& >(), \"no object\");\n   static_assert(   is_nt_invocable< memfun_type_nt, X& >(),   \"\");\n   static_assert(   is_nt_invocable< memfun_type_nt, X* >(),   \"\");\n+\n+  static_assert( ! is_nt_invocable_r< T,  memfun_type_nt, X& >(),\n+\t\t   \"conversion throws\");\n+  static_assert(   is_nt_invocable_r< NT, memfun_type_nt, X& >(), \"\");\n+  static_assert( ! is_nt_invocable_r< Ex, memfun_type_nt, X& >(),\n+\t\t   \"conversion fails, would use explicit constructor\");\n #endif\n \n   struct F {\n@@ -89,12 +111,44 @@ void test01()\n   };\n   using CF = const F;\n \n-  static_assert( ! is_nt_invocable_r< int&,  F  >(), \"\");\n-  static_assert(   is_nt_invocable_r< long&, CF >(),  \"\");\n-  static_assert( ! is_nt_invocable_r< short&, F,   int >(), \"\" );\n-  static_assert(   is_nt_invocable_r< char&,  F&,  int >(), \"\" );\n-  static_assert(   is_nt_invocable_r< char&,  CF,  int >(), \"\" );\n-  static_assert(   is_nt_invocable_r< char&,  CF&, int >(), \"\" );\n-\n-  static_assert( ! is_nt_invocable< F, int, int >(), \"\");\n+  static_assert( ! is_nt_invocable< F  >(), \"call throws\");\n+  static_assert(   is_nt_invocable< CF >(), \"\");\n+\n+  static_assert( ! is_nt_invocable_r< int&,  F  >(), \"call throws\");\n+  static_assert(   is_nt_invocable_r< long&, CF >(), \"\");\n+  static_assert( ! is_nt_invocable_r< T,     F  >(), \"call throws\");\n+  static_assert( ! is_nt_invocable_r< NT,    F  >(), \"call throws\");\n+  static_assert( ! is_nt_invocable_r< Ex,    F  >(), \"call throws\");\n+  static_assert( ! is_nt_invocable_r< T,     CF >(), \"conversion throws\");\n+  static_assert(   is_nt_invocable_r< NT,    CF >(), \"\" );\n+  static_assert( ! is_nt_invocable_r< Ex,    CF >(), \"conversion fails\");\n+\n+  static_assert( ! is_nt_invocable< F,   int >(), \"call throws\");\n+  static_assert(   is_nt_invocable< F&,  int >(), \"\");\n+\n+  static_assert( ! is_nt_invocable_r< short&, F,   int >(),\n+\t\t   \"call throws\" );\n+  static_assert(   is_nt_invocable_r< char&,  F&,  int >(), \"\");\n+  static_assert( ! is_nt_invocable_r< T,      F&,  int >(),\n+\t\t   \"conversion throws\");\n+  static_assert(   is_nt_invocable_r< NT,     F&,  int >(), \"\");\n+  static_assert( ! is_nt_invocable_r< Ex,     F&,  int >(),\n+\t\t   \"conversion fails, would use explicit constructor\");\n+\n+  static_assert(   is_nt_invocable< CF,   int >(), \"\");\n+  static_assert(   is_nt_invocable< CF&,  int >(), \"\");\n+\n+  static_assert(   is_nt_invocable_r< char&,  CF,  int >(), \"\");\n+  static_assert(   is_nt_invocable_r< char&,  CF&, int >(), \"\");\n+\n+  static_assert( ! is_nt_invocable_r< T,      CF&, int >(),\n+\t\t   \"conversion throws\");\n+  static_assert(   is_nt_invocable_r< NT,     CF&, int >(), \"\");\n+  static_assert( ! is_nt_invocable_r< Ex,     CF&, int >(),\n+\t\t   \"conversion fails, would use explicit constructor\");\n+\n+  static_assert( ! is_nt_invocable< F, int, int >(),\n+\t\t   \"would call private member\");\n+  static_assert( ! is_nt_invocable_r<void, F, int, int >(),\n+\t\t   \"would call private member\");\n }"}, {"sha": "7fd3d92484333fdb52cf64e39a78384e29987f6c", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_invocable/value_ext.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4b06e7f1de6dff6a4c087bcf554451e9887d0f3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue_ext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4b06e7f1de6dff6a4c087bcf554451e9887d0f3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue_ext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_invocable%2Fvalue_ext.cc?ref=c4b06e7f1de6dff6a4c087bcf554451e9887d0f3", "patch": "@@ -27,7 +27,9 @@ template<typename... T>\n   constexpr bool is_nt_invocable_conv(std::true_type)\n   {\n     using result_type = typename std::__invoke_result<T...>::type;\n-    return std::is_void<R>::value || std::is_convertible<result_type, R>::value;\n+    return std::is_void<R>::value\n+      || (std::is_convertible<result_type, R>::value\n+\t  && std::is_nothrow_constructible<R, result_type>::value);\n   }\n \n template<typename R, typename... T>"}]}