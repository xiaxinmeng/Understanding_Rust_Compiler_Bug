{"sha": "47a50de993492168c324e97ed9c4eba52eda67e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdhNTBkZTk5MzQ5MjE2OGMzMjRlOTdlZDljNGViYTUyZWRhNjdlNA==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2001-03-16T05:57:30Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-03-16T05:57:30Z"}, "message": "parse.y (expand_start_java_method): Was only called once and had a misleading name...\n\n\n\t* parse.y (expand_start_java_method):  Was only called once and had a\n\tmisleading name, so inline in caller java_complete_expand_method.\n\t(enter_a_block):  Likewise inline in enter_block and remove.\n\nFrom-SVN: r40540", "tree": {"sha": "84eb2d9cd172ef438c3a3e643f810acd9cbe0969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84eb2d9cd172ef438c3a3e643f810acd9cbe0969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47a50de993492168c324e97ed9c4eba52eda67e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a50de993492168c324e97ed9c4eba52eda67e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47a50de993492168c324e97ed9c4eba52eda67e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a50de993492168c324e97ed9c4eba52eda67e4/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4763d38ff8d186978ef80fd23ee55a9655a774db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4763d38ff8d186978ef80fd23ee55a9655a774db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4763d38ff8d186978ef80fd23ee55a9655a774db"}], "stats": {"total": 95, "additions": 42, "deletions": 53}, "files": [{"sha": "578ea4ed16ed8899db8a0b1d1926dfae9994c6e5", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a50de993492168c324e97ed9c4eba52eda67e4/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a50de993492168c324e97ed9c4eba52eda67e4/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=47a50de993492168c324e97ed9c4eba52eda67e4", "patch": "@@ -1,5 +1,9 @@\n 2001-03-15  Per Bothner  <per@bothner.com>\n \n+\t* parse.y (expand_start_java_method):  Was only called once and had a\n+\tmisleading name, so inline in caller java_complete_expand_method.\n+\t(enter_a_block):  Likewise inline in enter_blck and remove.\n+\n \tRemove junk from when gcc/java was created (by copying from C/C++).\n \t* decl.c (keep_next_level_flag, keep_next_if_subblocks):  Remove.\n \t(struct binding_level):  Remove fields keep, keep_if_subblocks,"}, {"sha": "b40de8e81e9b15caccc12732934fb777c72428ec", "filename": "gcc/java/parse.y", "status": "modified", "additions": 38, "deletions": 53, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a50de993492168c324e97ed9c4eba52eda67e4/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a50de993492168c324e97ed9c4eba52eda67e4/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=47a50de993492168c324e97ed9c4eba52eda67e4", "patch": "@@ -116,7 +116,6 @@ static tree resolve_class PARAMS ((tree, tree, tree, tree));\n static void declare_local_variables PARAMS ((int, tree, tree));\n static void source_start_java_method PARAMS ((tree));\n static void source_end_java_method PARAMS ((void));\n-static void expand_start_java_method PARAMS ((tree));\n static tree find_name_in_single_imports PARAMS ((tree));\n static void check_abstract_method_header PARAMS ((tree));\n static tree lookup_java_interface_method2 PARAMS ((tree, tree));\n@@ -153,7 +152,6 @@ static int  unresolved_type_p PARAMS ((tree, tree *));\n static void create_jdep_list PARAMS ((struct parser_ctxt *));\n static tree build_expr_block PARAMS ((tree, tree));\n static tree enter_block PARAMS ((void));\n-static tree enter_a_block PARAMS ((tree));\n static tree exit_block PARAMS ((void));\n static tree lookup_name_in_blocks PARAMS ((tree));\n static void maybe_absorb_scoping_blocks PARAMS ((void));\n@@ -7108,46 +7106,6 @@ end_artificial_method_body (mdecl)\n   exit_block ();\n }\n \n-/* Called during expansion. Push decls formerly built from argument\n-   list so they're usable during expansion. */\n-\n-static void\n-expand_start_java_method (fndecl)\n-     tree fndecl;\n-{\n-  tree tem, *ptr;\n-\n-  current_function_decl = fndecl;\n-\n-  if (! quiet_flag)\n-    fprintf (stderr, \" [%s.\", lang_printable_name (DECL_CONTEXT (fndecl), 0));\n-  announce_function (fndecl);\n-  if (! quiet_flag)\n-    fprintf (stderr, \"]\");\n-\n-  pushlevel (1);\t\t/* Prepare for a parameter push */\n-  ptr = &DECL_ARGUMENTS (fndecl);\n-  tem  = BLOCK_EXPR_DECLS (DECL_FUNCTION_BODY (current_function_decl));\n-  while (tem)\n-    {\n-      tree next = TREE_CHAIN (tem);\n-      tree type = TREE_TYPE (tem);\n-      if (PROMOTE_PROTOTYPES\n-\t  && TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node)\n-\t  && INTEGRAL_TYPE_P (type))\n-\ttype = integer_type_node;\n-      DECL_ARG_TYPE (tem) = type;\n-      layout_decl (tem, 0);\n-      pushdecl (tem);\n-      *ptr = tem;\n-      ptr = &TREE_CHAIN (tem);\n-      tem = next;\n-    }\n-  *ptr = NULL_TREE;\n-  pushdecl_force_head (DECL_ARGUMENTS (fndecl));\n-  lineno = DECL_SOURCE_LINE_FIRST (fndecl);\n-}\n-\n /* Terminate a function and expand its body.  */\n \n static void\n@@ -7728,7 +7686,39 @@ java_complete_expand_method (mdecl)\n       tree fbody = DECL_FUNCTION_BODY (mdecl);\n       tree block_body = BLOCK_EXPR_BODY (fbody);\n       tree exception_copy = NULL_TREE;\n-      expand_start_java_method (mdecl);\n+      tree tem, *ptr;\n+\n+      current_function_decl = mdecl;\n+\n+      if (! quiet_flag)\n+\tfprintf (stderr, \" [%s.\",\n+\t\t lang_printable_name (DECL_CONTEXT (mdecl), 0));\n+      announce_function (mdecl);\n+      if (! quiet_flag)\n+\tfprintf (stderr, \"]\");\n+\n+      pushlevel (1);\t\t/* Prepare for a parameter push */\n+      ptr = &DECL_ARGUMENTS (mdecl);\n+      tem  = BLOCK_EXPR_DECLS (DECL_FUNCTION_BODY (current_function_decl));\n+      while (tem)\n+\t{\n+\t  tree next = TREE_CHAIN (tem);\n+\t  tree type = TREE_TYPE (tem);\n+\t  if (PROMOTE_PROTOTYPES\n+\t      && TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node)\n+\t      && INTEGRAL_TYPE_P (type))\n+\t    type = integer_type_node;\n+\t  DECL_ARG_TYPE (tem) = type;\n+\t  layout_decl (tem, 0);\n+\t  pushdecl (tem);\n+\t  *ptr = tem;\n+\t  ptr = &TREE_CHAIN (tem);\n+\t  tem = next;\n+\t}\n+      *ptr = NULL_TREE;\n+      pushdecl_force_head (DECL_ARGUMENTS (mdecl));\n+      lineno = DECL_SOURCE_LINE_FIRST (mdecl);\n+\n       build_result_decl (mdecl);\n \n       current_this \n@@ -11889,18 +11879,13 @@ build_expr_block (body, decls)\n static tree\n enter_block ()\n {\n-  return (enter_a_block (build_expr_block (NULL_TREE, NULL_TREE)));\n-}\n+  tree b = build_expr_block (NULL_TREE, NULL_TREE);\n \n-/* Link block B supercontext to the previous block. The current\n-   function DECL is used as supercontext when enter_a_block is called\n-   for the first time for a given function. The current function body\n-   (DECL_FUNCTION_BODY) is set to be block B.  */\n+  /* Link block B supercontext to the previous block. The current\n+     function DECL is used as supercontext when enter_a_block is called\n+     for the first time for a given function. The current function body\n+     (DECL_FUNCTION_BODY) is set to be block B.  */\n \n-static tree\n-enter_a_block (b)\n-     tree b;\n-{\n   tree fndecl = current_function_decl; \n \n   if (!fndecl) {"}]}