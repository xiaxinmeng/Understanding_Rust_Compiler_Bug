{"sha": "034f9101fd13d8da0ebf5162bd19bac08791a966", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM0ZjkxMDFmZDEzZDhkYTBlYmY1MTYyYmQxOWJhYzA4NzkxYTk2Ng==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-10T21:31:41Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-10T21:31:41Z"}, "message": "(expand_expr): Use a smaller alignment when reading from a field\nwith a variable offset.\n\nFrom-SVN: r6054", "tree": {"sha": "9d8171e17a6ac2dc2bf4eb0827c737e5f88eda8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d8171e17a6ac2dc2bf4eb0827c737e5f88eda8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/034f9101fd13d8da0ebf5162bd19bac08791a966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/034f9101fd13d8da0ebf5162bd19bac08791a966", "html_url": "https://github.com/Rust-GCC/gccrs/commit/034f9101fd13d8da0ebf5162bd19bac08791a966", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/034f9101fd13d8da0ebf5162bd19bac08791a966/comments", "author": null, "committer": null, "parents": [{"sha": "29d40fa4d84c0ad8389798f95c97e763f9f522aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29d40fa4d84c0ad8389798f95c97e763f9f522aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29d40fa4d84c0ad8389798f95c97e763f9f522aa"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "70636b6401c127bcd11f75f46e1028599520767a", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/034f9101fd13d8da0ebf5162bd19bac08791a966/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/034f9101fd13d8da0ebf5162bd19bac08791a966/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=034f9101fd13d8da0ebf5162bd19bac08791a966", "patch": "@@ -4314,6 +4314,7 @@ expand_expr (exp, target, tmode, modifier)\n \tint volatilep = 0;\n \ttree tem = get_inner_reference (exp, &bitsize, &bitpos, &offset,\n \t\t\t\t\t&mode1, &unsignedp, &volatilep);\n+\tint alignment;\n \n \t/* If we got back the original object, something is wrong.  Perhaps\n \t   we are evaluating an expression too early.  In any event, don't\n@@ -4337,6 +4338,7 @@ expand_expr (exp, target, tmode, modifier)\n \t      op0 = validize_mem (force_const_mem (mode, op0));\n \t  }\n \n+\talignment = TYPE_ALIGN (TREE_TYPE (tem)) / BITS_PER_UNIT;\n \tif (offset != 0)\n \t  {\n \t    rtx offset_rtx = expand_expr (offset, NULL_RTX, VOIDmode, 0);\n@@ -4346,6 +4348,14 @@ expand_expr (exp, target, tmode, modifier)\n \t    op0 = change_address (op0, VOIDmode,\n \t\t\t\t  gen_rtx (PLUS, Pmode, XEXP (op0, 0),\n \t\t\t\t\t   force_reg (Pmode, offset_rtx)));\n+\t  /* If we have a variable offset, the known alignment\n+\t     is only that of the innermost structure containing the field.\n+\t     (Actually, we could sometimes do better by using the\n+\t     size of an element of the innermost array, but no need.)  */\n+\t  if (TREE_CODE (exp) == COMPONENT_REF\n+\t      || TREE_CODE (exp) == BIT_FIELD_REF)\n+\t    alignment = (TYPE_ALIGN (TREE_TYPE (TREE_OPERAND (exp, 0)))\n+\t\t\t / BITS_PER_UNIT);\n \t  }\n \n \t/* Don't forget about volatility even if this is a bitfield.  */\n@@ -4382,7 +4392,7 @@ expand_expr (exp, target, tmode, modifier)\n \n \t    op0 = extract_bit_field (validize_mem (op0), bitsize, bitpos,\n \t\t\t\t     unsignedp, target, ext_mode, ext_mode,\n-\t\t\t\t     TYPE_ALIGN (TREE_TYPE (tem)) / BITS_PER_UNIT,\n+\t\t\t\t     alignment,\n \t\t\t\t     int_size_in_bytes (TREE_TYPE (tem)));\n \t    if (mode == BLKmode)\n \t      {"}]}