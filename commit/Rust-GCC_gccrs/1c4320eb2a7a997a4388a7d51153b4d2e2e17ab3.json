{"sha": "1c4320eb2a7a997a4388a7d51153b4d2e2e17ab3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM0MzIwZWIyYTdhOTk3YTQzODhhN2Q1MTE1M2I0ZDJlMmUxN2FiMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-05-21T15:31:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-05-21T15:31:28Z"}, "message": "[C++ PATCH] Using decls\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-05/msg01411.html\n\t* name-lookup.c (do_nonmember_using_decl): Drop INSERT_P\n\tparameter.  Document.\n\t(finish_nonmember_using_decl): Adjust do_nonmember_using_decl\n\tcalls.  Remove stray FIXME comment.\n\nFrom-SVN: r271471", "tree": {"sha": "2ff0bd9e20ededba9da8d9950f97aa811f658d4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ff0bd9e20ededba9da8d9950f97aa811f658d4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c4320eb2a7a997a4388a7d51153b4d2e2e17ab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4320eb2a7a997a4388a7d51153b4d2e2e17ab3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c4320eb2a7a997a4388a7d51153b4d2e2e17ab3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4320eb2a7a997a4388a7d51153b4d2e2e17ab3/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c365be6e199bcd3e20b36f7907ce5303af105a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c365be6e199bcd3e20b36f7907ce5303af105a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c365be6e199bcd3e20b36f7907ce5303af105a1"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "972bc36c0bed94c0be5f8b757afe6e00bd260486", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4320eb2a7a997a4388a7d51153b4d2e2e17ab3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4320eb2a7a997a4388a7d51153b4d2e2e17ab3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1c4320eb2a7a997a4388a7d51153b4d2e2e17ab3", "patch": "@@ -1,5 +1,10 @@\n 2019-05-21  Nathan Sidwell  <nathan@acm.org>\n \n+\t* name-lookup.c (do_nonmember_using_decl): Drop INSERT_P\n+\tparameter.  Document.\n+\t(finish_nonmember_using_decl): Adjust do_nonmember_using_decl\n+\tcalls.  Remove stray FIXME comment.\n+\n \t* name-lookup.h (struct cp_binding_level): Drop usings field.\n \t(finish_namespace_using_decl, finish_local_using_decl): Replace with ...\n \t(finish_nonmember_using_decl): ... this."}, {"sha": "0dcaf65165694053e964d7bc632d6bd2f0680746", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c4320eb2a7a997a4388a7d51153b4d2e2e17ab3/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c4320eb2a7a997a4388a7d51153b4d2e2e17ab3/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=1c4320eb2a7a997a4388a7d51153b4d2e2e17ab3", "patch": "@@ -3882,15 +3882,16 @@ pushdecl_outermost_localscope (tree x)\n   return ret;\n }\n \n-/* Process a local-scope or namespace-scope using declaration.\n-   FIXME\n-   is the nominated scope to search for NAME.  VALUE_P and TYPE_P\n-   point to the binding for NAME in the current scope and are\n-   updated.  */\n+/* Process a local-scope or namespace-scope using declaration.  LOOKUP\n+   is the result of qualified lookup (both value & type are\n+   significant).  FN_SCOPE_P indicates if we're at function-scope (as\n+   opposed to namespace-scope).  *VALUE_P and *TYPE_P are the current\n+   bindings, which are altered to reflect the newly brought in\n+   declarations.  */\n \n static bool\n do_nonmember_using_decl (name_lookup &lookup, bool fn_scope_p,\n-\t\t\t bool insert_p, tree *value_p, tree *type_p)\n+\t\t\t tree *value_p, tree *type_p)\n {\n   tree value = *value_p;\n   tree type = *type_p;\n@@ -3957,7 +3958,7 @@ do_nonmember_using_decl (name_lookup &lookup, bool fn_scope_p,\n \t\t}\n \t    }\n \n-\t  if (!found && insert_p)\n+\t  if (!found)\n \t    /* Unlike the decl-pushing case we don't drop anticipated\n \t       builtins here.  They don't cause a problem, and we'd\n \t       like to match them with a future declaration.  */\n@@ -3972,7 +3973,7 @@ do_nonmember_using_decl (name_lookup &lookup, bool fn_scope_p,\n       diagnose_name_conflict (lookup.value, value);\n       failed = true;\n     }\n-  else if (insert_p)\n+  else\n     value = lookup.value;\n \n   if (lookup.type && lookup.type != type)\n@@ -3982,21 +3983,18 @@ do_nonmember_using_decl (name_lookup &lookup, bool fn_scope_p,\n \t  diagnose_name_conflict (lookup.type, type);\n \t  failed = true;\n \t}\n-      else if (insert_p)\n+      else\n \ttype = lookup.type;\n     }\n \n-  if (insert_p)\n+  /* If value is empty, shift any class or enumeration name back.  */\n+  if (!value)\n     {\n-      /* If value is empty, shift any class or enumeration name back.  */\n-      if (!value)\n-\t{\n-\t  value = type;\n-\t  type = NULL_TREE;\n-\t}\n-      *value_p = value;\n-      *type_p = type;\n+      value = type;\n+      type = NULL_TREE;\n     }\n+  *value_p = value;\n+  *type_p = type;\n \n   return failed;\n }\n@@ -5080,7 +5078,7 @@ finish_nonmember_using_decl (tree scope, tree name)\n       tree value = MAYBE_STAT_DECL (*slot);\n       tree type = MAYBE_STAT_TYPE (*slot);\n \n-      do_nonmember_using_decl (lookup, false, true, &value, &type);\n+      do_nonmember_using_decl (lookup, false, &value, &type);\n \n       if (STAT_HACK_P (*slot))\n \t{\n@@ -5110,7 +5108,7 @@ finish_nonmember_using_decl (tree scope, tree name)\n       /* DR 36 questions why using-decls at function scope may not be\n \t duplicates.  Disallow it, as C++11 claimed and PR 20420\n \t implemented.  */\n-      do_nonmember_using_decl (lookup, true, true, &value, &type);\n+      do_nonmember_using_decl (lookup, true, &value, &type);\n \n       if (!value)\n \t;\n@@ -5123,7 +5121,6 @@ finish_nonmember_using_decl (tree scope, tree name)\n \t}\n       else\n \t/* Install the new binding.  */\n-\t// FIXME: Short circuit P_L_B\n \tpush_local_binding (name, value, true);\n \n       if (!type)"}]}