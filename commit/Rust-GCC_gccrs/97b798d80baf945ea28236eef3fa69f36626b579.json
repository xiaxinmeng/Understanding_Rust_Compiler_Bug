{"sha": "97b798d80baf945ea28236eef3fa69f36626b579", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdiNzk4ZDgwYmFmOTQ1ZWEyODIzNmVlZjNmYTY5ZjM2NjI2YjU3OQ==", "commit": {"author": {"name": "Joel Hutton", "email": "joel.hutton@arm.com", "date": "2020-09-30T14:08:13Z"}, "committer": {"name": "Joel Hutton", "email": "joel.hutton@arm.com", "date": "2020-09-30T14:16:29Z"}, "message": "[SLP][VECT] Add check to fix 96837\n\nThe following patch adds a simple check to prevent slp stmts from\nvector constructors being rearranged. vect_attempt_slp_rearrange_stmts\ntries to rearrange to avoid a load permutation.\n\nThis fixes PR target/96837\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=96827\n\ngcc/ChangeLog:\n\n2020-09-29  Joel Hutton  <joel.hutton@arm.com>\n\n\tPR target/96837\n\t* tree-vect-slp.c (vect_analyze_slp): Do not call\n\tvect_attempt_slp_rearrange_stmts for vector constructors.\n\ngcc/testsuite/ChangeLog:\n\n2020-09-29  Joel Hutton  <joel.hutton@arm.com>\n\n\tPR target/96837\n\t* gcc.dg/vect/bb-slp-49.c: New test.", "tree": {"sha": "6e1f24cccbeeb478f55aeda3f0cacc408d56a60b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e1f24cccbeeb478f55aeda3f0cacc408d56a60b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97b798d80baf945ea28236eef3fa69f36626b579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b798d80baf945ea28236eef3fa69f36626b579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97b798d80baf945ea28236eef3fa69f36626b579", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97b798d80baf945ea28236eef3fa69f36626b579/comments", "author": {"login": "JoelHutton", "id": 4455754, "node_id": "MDQ6VXNlcjQ0NTU3NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4455754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoelHutton", "html_url": "https://github.com/JoelHutton", "followers_url": "https://api.github.com/users/JoelHutton/followers", "following_url": "https://api.github.com/users/JoelHutton/following{/other_user}", "gists_url": "https://api.github.com/users/JoelHutton/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoelHutton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoelHutton/subscriptions", "organizations_url": "https://api.github.com/users/JoelHutton/orgs", "repos_url": "https://api.github.com/users/JoelHutton/repos", "events_url": "https://api.github.com/users/JoelHutton/events{/privacy}", "received_events_url": "https://api.github.com/users/JoelHutton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoelHutton", "id": 4455754, "node_id": "MDQ6VXNlcjQ0NTU3NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4455754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoelHutton", "html_url": "https://github.com/JoelHutton", "followers_url": "https://api.github.com/users/JoelHutton/followers", "following_url": "https://api.github.com/users/JoelHutton/following{/other_user}", "gists_url": "https://api.github.com/users/JoelHutton/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoelHutton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoelHutton/subscriptions", "organizations_url": "https://api.github.com/users/JoelHutton/orgs", "repos_url": "https://api.github.com/users/JoelHutton/repos", "events_url": "https://api.github.com/users/JoelHutton/events{/privacy}", "received_events_url": "https://api.github.com/users/JoelHutton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa248b8db9a7594fcc84e52a84d56526d4284ca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa248b8db9a7594fcc84e52a84d56526d4284ca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa248b8db9a7594fcc84e52a84d56526d4284ca8"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "e7101fcff4627bb545549bdfefd33c2ed58aee7b", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-49.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b798d80baf945ea28236eef3fa69f36626b579/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-49.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b798d80baf945ea28236eef3fa69f36626b579/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-49.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-49.c?ref=97b798d80baf945ea28236eef3fa69f36626b579", "patch": "@@ -0,0 +1,28 @@\n+/* This checks that vectorized constructors have the correct ordering. */\n+/* { dg-require-effective-target vect_int } */\n+\n+typedef int V __attribute__((__vector_size__(16)));\n+\n+__attribute__((__noipa__)) void\n+foo (unsigned int x, V *y)\n+{\n+  unsigned int a[4] = { x + 0, x + 2, x + 4, x + 6 };\n+  for (unsigned int i = 0; i < 3; ++i)\n+    if (a[i] == 1234)\n+      a[i]--;\n+  *y = (V) { a[3], a[2], a[1], a[0] };\n+}\n+\n+int\n+main ()\n+{\n+  V b;\n+  foo (0, &b);\n+  if (b[0] != 6 || b[1] != 4 || b[2] != 2 || b[3] != 0)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* See that we vectorize an SLP instance.  */\n+/* { dg-final { scan-tree-dump \"Analyzing vectorizable constructor\" \"slp1\" } } */\n+/* { dg-final { scan-tree-dump \"vectorizing stmts using SLP\" \"slp1\" } } */"}, {"sha": "e0614fb472f1584a937b1732b64b483b68cbd866", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97b798d80baf945ea28236eef3fa69f36626b579/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97b798d80baf945ea28236eef3fa69f36626b579/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=97b798d80baf945ea28236eef3fa69f36626b579", "patch": "@@ -2503,7 +2503,8 @@ vect_optimize_slp (vec_info *vinfo)\n       /* Reduction (there are no data-refs in the root).\n \t In reduction chain the order of the loads is not important.  */\n       if (!STMT_VINFO_DATA_REF (stmt_info)\n-\t  && !REDUC_GROUP_FIRST_ELEMENT (stmt_info))\n+\t  && !REDUC_GROUP_FIRST_ELEMENT (stmt_info)\n+\t  && !SLP_INSTANCE_ROOT_STMT (instance))\n \tvect_attempt_slp_rearrange_stmts (instance);\n     }\n "}]}