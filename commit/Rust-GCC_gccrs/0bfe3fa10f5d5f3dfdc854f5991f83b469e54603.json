{"sha": "0bfe3fa10f5d5f3dfdc854f5991f83b469e54603", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJmZTNmYTEwZjVkNWYzZGZkYzg1NGY1OTkxZjgzYjQ2OWU1NDYwMw==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-22T23:05:13Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-22T23:05:13Z"}, "message": "In libobjc/: 2010-12-22 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-12-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* init.c (duplicate_classes): New.\n\t(__objc_exec_class): Initialize duplicate_classes.\n\t(__objc_create_classes_tree): Ignore classes in the\n\tduplicate_classes table.\n\t(__objc_call_load_callback): Same.\n\t(__objc_init_class): If a duplicate class is found, add it to\n\tduplicate_classes instead of aborting.  Return YES if the class is\n\tnot a duplicate, and NO if it is.\n\t* objc-private/runtime.h (__objc_init_class): Updated prototype.\n\nFrom-SVN: r168183", "tree": {"sha": "85383fe2e6c72317b853c8b54568d8bf9a420e42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85383fe2e6c72317b853c8b54568d8bf9a420e42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bfe3fa10f5d5f3dfdc854f5991f83b469e54603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfe3fa10f5d5f3dfdc854f5991f83b469e54603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bfe3fa10f5d5f3dfdc854f5991f83b469e54603", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfe3fa10f5d5f3dfdc854f5991f83b469e54603/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9be8ba7e828bed6ebcbfdae4d2ca60333b8f6f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9be8ba7e828bed6ebcbfdae4d2ca60333b8f6f28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9be8ba7e828bed6ebcbfdae4d2ca60333b8f6f28"}], "stats": {"total": 80, "additions": 60, "deletions": 20}, "files": [{"sha": "d1521f94ce9675713775f6e4841c51218544c696", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfe3fa10f5d5f3dfdc854f5991f83b469e54603/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfe3fa10f5d5f3dfdc854f5991f83b469e54603/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=0bfe3fa10f5d5f3dfdc854f5991f83b469e54603", "patch": "@@ -1,3 +1,15 @@\n+2010-12-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* init.c (duplicate_classes): New.\n+\t(__objc_exec_class): Initialize duplicate_classes.\n+\t(__objc_create_classes_tree): Ignore classes in the\n+\tduplicate_classes table.\n+\t(__objc_call_load_callback): Same.\n+\t(__objc_init_class): If a duplicate class is found, add it to\n+\tduplicate_classes instead of aborting.  Return YES if the class is\n+\tnot a duplicate, and NO if it is.\n+\t* objc-private/runtime.h (__objc_init_class): Updated prototype.\n+\n 2010-12-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-private/objc-list.h: Reindented file.  No code changes."}, {"sha": "d19355e3270330b1d81d315ff34da3d36692fe0b", "filename": "libobjc/init.c", "status": "modified", "additions": 47, "deletions": 19, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfe3fa10f5d5f3dfdc854f5991f83b469e54603/libobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfe3fa10f5d5f3dfdc854f5991f83b469e54603/libobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Finit.c?ref=0bfe3fa10f5d5f3dfdc854f5991f83b469e54603", "patch": "@@ -56,6 +56,16 @@ static struct objc_list *unclaimed_proto_list = 0; \t/* !T:MUTEX */\n /* List of unresolved static instances.  */\n static struct objc_list *uninitialized_statics = 0; \t/* !T:MUTEX */\n \n+/* List of duplicated classes found while loading modules.  If we find\n+   a class twice, we ignore it the second time.  On some platforms,\n+   where the order in which modules are loaded is well defined, this\n+   allows you to replace a class in a shared library by linking in a\n+   new implementation which is loaded in in the right order, and which\n+   overrides the existing one.\n+\n+   Protected by __objc_runtime_mutex.  */\n+static cache_ptr duplicate_classes = NULL;\n+\n /* Global runtime \"write\" mutex.  Having a single mutex prevents\n    deadlocks, but reduces concurrency.  To improve concurrency, some\n    groups of functions in the runtime have their own separate mutex\n@@ -87,7 +97,7 @@ static void __objc_class_add_protocols (Class, struct objc_protocol_list *);\n /* Load callback hook.  */\n void (*_objc_load_callback) (Class class, struct objc_category *category) = 0; /* !T:SAFE */\n \n-/* Are all categories/classes resolved?  */\n+/* Are all categories/classes resolved ?  */\n BOOL __objc_dangling_categories = NO;           /* !T:UNUSED */\n \n /* Sends +load to all classes and categories in certain\n@@ -110,9 +120,11 @@ static void __objc_call_load_callback (struct objc_module *module);\n    installed in the runtime.  */\n static BOOL class_is_subclass_of_class (Class class, Class superclass);\n \n-typedef struct objc_class_tree {\n+typedef struct objc_class_tree\n+{\n   Class class;\n-  struct objc_list *subclasses; /* `head' is pointer to an objc_class_tree */\n+  struct objc_list *subclasses; /* `head' is a pointer to an\n+\t\t\t\t   objc_class_tree.  */\n } objc_class_tree;\n \n /* This is a linked list of objc_class_tree trees. The head of these\n@@ -583,6 +595,9 @@ __objc_exec_class (struct objc_module *module)\n       __objc_init_selector_tables ();\n       __objc_init_class_tables ();\n       __objc_init_dispatch_tables ();\n+      duplicate_classes = objc_hash_new (8,\n+\t\t\t\t\t (hash_func_type)objc_hash_ptr,\n+\t\t\t\t\t objc_compare_ptrs);\n       __objc_class_tree_list = list_cons (NULL, __objc_class_tree_list);\n       __objc_load_methods = objc_hash_new (128, \n \t\t\t\t\t   (hash_func_type)objc_hash_ptr,\n@@ -619,13 +634,14 @@ __objc_exec_class (struct objc_module *module)\n \t isn't and this crashes the program.  */\n       class->subclass_list = NULL;\n \n-      __objc_init_class (class);\n-\n-      /* Check to see if the superclass is known in this point. If\n-\t it's not add the class to the unresolved_classes list.  */\n-      if (superclass && ! objc_getClass (superclass))\n-\tunresolved_classes = list_cons (class, unresolved_classes);\n-   }\n+      if (__objc_init_class (class))\n+\t{\n+\t  /* Check to see if the superclass is known in this point. If\n+\t     it's not add the class to the unresolved_classes list.  */\n+\t  if (superclass && ! objc_getClass (superclass))\n+\t    unresolved_classes = list_cons (class, unresolved_classes);\n+\t}\n+    }\n \n   /* Process category information from the module.  */\n   for (i = 0; i < symtab->cat_def_cnt; ++i)\n@@ -637,7 +653,6 @@ __objc_exec_class (struct objc_module *module)\n \t methods.  */\n       if (class)\n \t{\n-\n \t  DEBUG_PRINTF (\"processing categories from (module,object): %s, %s\\n\",\n \t\t\tmodule->name,\n \t\t\tclass->name);\n@@ -808,7 +823,8 @@ __objc_create_classes_tree (struct objc_module *module)\n     {\n       Class class = (Class) symtab->defs[i];\n \n-      objc_tree_insert_class (class);\n+      if (!objc_hash_is_key_in_hash (duplicate_classes, class))\n+\tobjc_tree_insert_class (class);\n     }\n \n   /* Now iterate over \"claimed\" categories too (ie, categories that\n@@ -845,9 +861,12 @@ __objc_call_load_callback (struct objc_module *module)\n       for (i = 0; i < symtab->cls_def_cnt; i++)\n \t{\n \t  Class class = (Class) symtab->defs[i];\n-\t  \n-\t  /* Call the _objc_load_callback for this class.  */\n-\t  _objc_load_callback (class, 0);\n+\t\n+\t  if (!objc_hash_is_key_in_hash (duplicate_classes, class))\n+\t    {\n+\t      /* Call the _objc_load_callback for this class.  */\n+\t      _objc_load_callback (class, 0);\n+\t    }\n \t}\n       \n       /* Call the _objc_load_callback for categories.  Don't register\n@@ -874,8 +893,11 @@ init_check_module_version (struct objc_module *module)\n     }\n }\n \n-/* __objc_init_class must be called with __objc_runtime_mutex already locked.  */\n-void\n+/* __objc_init_class must be called with __objc_runtime_mutex already\n+   locked.  Return YES if the class could be setup; return NO if the\n+   class could not be setup because a class with the same name already\n+   exists.  */\n+BOOL\n __objc_init_class (Class class)\n {\n   /* Store the class in the class table and assign class numbers.  */\n@@ -895,10 +917,16 @@ __objc_init_class (Class class)\n       \n       if (class->protocols)\n \t__objc_init_protocols (class->protocols);\n+\n+      return YES;\n     }\n   else\n-    _objc_abort (\"Module contains duplicate class '%s'\\n\",\n-\t\t class->name);\n+    {\n+      /* The module contains a duplicate class.  Remember it so that\n+\t we will ignore it later.  */\n+      objc_hash_add (&duplicate_classes, class, class);\n+      return NO;\n+    }\n }\n \n /* __objc_init_protocol must be called with __objc_runtime_mutex"}, {"sha": "5406294f2c39571c1b8a39a1840ae1e76cad42f3", "filename": "libobjc/objc-private/runtime.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bfe3fa10f5d5f3dfdc854f5991f83b469e54603/libobjc%2Fobjc-private%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bfe3fa10f5d5f3dfdc854f5991f83b469e54603/libobjc%2Fobjc-private%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fruntime.h?ref=0bfe3fa10f5d5f3dfdc854f5991f83b469e54603", "patch": "@@ -57,7 +57,7 @@ extern void __objc_update_dispatch_table_for_class (Class);/* (objc-msg.c) */\n \n extern int  __objc_init_thread_system (void);    /* thread.c */\n extern int  __objc_fini_thread_system (void);    /* thread.c */\n-extern void __objc_init_class (Class class);  /* init.c */\n+extern BOOL __objc_init_class (Class class);  /* init.c */\n extern void class_add_method_list (Class, struct objc_method_list *);\n \n /* Registering instance methods as class methods for root classes */"}]}