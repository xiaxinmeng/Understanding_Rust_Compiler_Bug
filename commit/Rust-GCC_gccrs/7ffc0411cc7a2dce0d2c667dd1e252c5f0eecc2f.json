{"sha": "7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZmYzA0MTFjYzdhMmRjZTBkMmM2NjdkZDFlMjUyYzVmMGVlY2MyZg==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2005-10-24T19:20:38Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-10-24T19:20:38Z"}, "message": "re PR tree-optimization/24225 (ICE: segmentation fault in profile.c:branch_prob)\n\nPR tree-optimization/24225\n\ngcc/\n\t* profile.c (branch_prob): Look from end to start through a\n\tbasic block when looking for a locus.\n\ntestsuite/\n\t* gcc.dg/pr24225.c: New test.\n\nFrom-SVN: r105857", "tree": {"sha": "78d749862fc5fc748bcc0b95c662c0ae14a9f3ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78d749862fc5fc748bcc0b95c662c0ae14a9f3ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f/comments", "author": null, "committer": null, "parents": [{"sha": "77c4f044f6ed9067a72d516bc6b40728fb9756eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77c4f044f6ed9067a72d516bc6b40728fb9756eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77c4f044f6ed9067a72d516bc6b40728fb9756eb"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "b22e317e324c39ef8b2989ff414360a78793eaff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f", "patch": "@@ -1,3 +1,9 @@\n+2005-10-24  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR tree-optimization/24255\n+\t* profile.c (branch_prob): Look from end to start through a\n+\tbasic block when looking for a locus.\n+\n 2005-10-24  Richard Henderson  <rth@redhat.com>\n \n \t* pa.c (store_reg_modify): Set RTX_FRAME_RELATED_P on each set in\n@@ -83,7 +89,7 @@\n \n 2005-10-20  Steven Bosscher  <stevenb@suse.de>\n \n-\tPR tree-optimization/24225\n+\tPR tree-optimization/24307\n \t* tree-cfg.c (tree_find_edge_insert_loc): Handle naked RETURN_EXPR.\n \n 2005-10-20  Alexandre Oliva  <aoliva@redhat.com>"}, {"sha": "d260d66e1068faedc8657e359195a990b1aa01f9", "filename": "gcc/profile.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f", "patch": "@@ -806,22 +806,35 @@ branch_prob (void)\n \n       FOR_EACH_EDGE (e, ei, bb->succs)\n \t{\n-\t  tree last = last_stmt (bb);\n+\t  block_stmt_iterator bsi;\n+\t  tree last = NULL;\n+\n+\t  /* It may happen that there are compiler generated statements\n+\t     without a locus at all.  Go through the basic block from the\n+\t     last to the first statement looking for a locus.  */\n+\t  for (bsi = bsi_last (bb); !bsi_end_p (bsi); bsi_prev (&bsi))\n+\t    {\n+\t      last = bsi_stmt (bsi);\n+\t      if (EXPR_LOCUS (last))\n+\t\tbreak;\n+\t    }\n+\n \t  /* Edge with goto locus might get wrong coverage info unless\n \t     it is the only edge out of BB.   \n \t     Don't do that when the locuses match, so \n \t     if (blah) goto something;\n \t     is not computed twice.  */\n-\t  if (e->goto_locus && !single_succ_p (bb)\n+\t  if (last && EXPR_LOCUS (last)\n+\t      && e->goto_locus\n+\t      && !single_succ_p (bb)\n #ifdef USE_MAPPED_LOCATION\n \t      && (LOCATION_FILE (e->goto_locus)\n \t          != LOCATION_FILE (EXPR_LOCATION  (last))\n \t\t  || (LOCATION_LINE (e->goto_locus)\n \t\t      != LOCATION_LINE (EXPR_LOCATION  (last)))))\n #else\n \t      && (e->goto_locus->file != EXPR_LOCUS (last)->file\n-\t\t  || (e->goto_locus->line\n-\t\t      != EXPR_LOCUS (last)->line)))\n+\t\t  || (e->goto_locus->line != EXPR_LOCUS (last)->line)))\n #endif\n \t    {\n \t      basic_block new = split_edge (e);"}, {"sha": "f952b56f51000e3f330b7d0c12a2ce8572ece7d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f", "patch": "@@ -1,3 +1,7 @@\n+2005-10-24  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* gcc.dg/pr24225.c: New test.\n+\n 2005-10-24  Asher Langton  <langton2@llnl.gov>\n \n \t* gfortran.dg/dup_save_1.f90: New test."}, {"sha": "b364f820d4be95020a9200005042a6d30fc4625f", "filename": "gcc/testsuite/gcc.dg/pr24225.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr24225.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr24225.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr24225.c?ref=7ffc0411cc7a2dce0d2c667dd1e252c5f0eecc2f", "patch": "@@ -0,0 +1,15 @@\n+/* This was an ICE caused by the compiler-generated stack save/restore\n+   statements around s[b].  */\n+/* { dg-do compile} */\n+/* { dg-options \"-O1 -fprofile-arcs\" } */\n+\n+int\n+foo (int a, int b)\n+{\n+  if (a)\n+    return 1;\n+  {\n+    int s [b];\n+    return 0;\n+  }\n+}"}]}