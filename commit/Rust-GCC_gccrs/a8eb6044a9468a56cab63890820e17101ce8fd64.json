{"sha": "a8eb6044a9468a56cab63890820e17101ce8fd64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThlYjYwNDRhOTQ2OGE1NmNhYjYzODkwODIwZTE3MTAxY2U4ZmQ2NA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-05-04T20:03:55Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-05-04T20:03:55Z"}, "message": "cppinit.c (cpp_create_reader, [...]): Warn about trigraphs unless explicity set or -trigraphs.\n\n\t* cppinit.c (cpp_create_reader, post_options): Warn about\n\ttrigraphs unless explicity set or -trigraphs.\n\t* cpplex.c (warn_in_comment): New.\n\t(_cpp_process_line_notes): Better handling of -Wtrigraphs.\n\t(_cpp_skip_block_comment): Add call to _cpp_process_line_notes.\n\t* doc/cppopts.texi, doc/cpp.texi: Update.\ntestsuite:\n\t* gcc.dg/cpp/Wtrigraphs.c: Update.\n\t* gcc.dg/cpp/Wtrigraphs-2.c: New tests.\n\nFrom-SVN: r66459", "tree": {"sha": "db0e598a611fbe90ebcaf267b9665fd02c67a70f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db0e598a611fbe90ebcaf267b9665fd02c67a70f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8eb6044a9468a56cab63890820e17101ce8fd64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8eb6044a9468a56cab63890820e17101ce8fd64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8eb6044a9468a56cab63890820e17101ce8fd64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8eb6044a9468a56cab63890820e17101ce8fd64/comments", "author": null, "committer": null, "parents": [{"sha": "09780dfb652960d422da1c5a9d81dc536cdf09f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09780dfb652960d422da1c5a9d81dc536cdf09f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09780dfb652960d422da1c5a9d81dc536cdf09f4"}], "stats": {"total": 122, "additions": 102, "deletions": 20}, "files": [{"sha": "4066ee31dbdd9265c780c85e6c80a17cc107f305", "filename": "gcc/cppinit.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8eb6044a9468a56cab63890820e17101ce8fd64/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8eb6044a9468a56cab63890820e17101ce8fd64/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=a8eb6044a9468a56cab63890820e17101ce8fd64", "patch": "@@ -149,6 +149,7 @@ cpp_create_reader (lang, table)\n   CPP_OPTION (pfile, show_column) = 1;\n   CPP_OPTION (pfile, tabstop) = 8;\n   CPP_OPTION (pfile, operator_names) = 1;\n+  CPP_OPTION (pfile, warn_trigraphs) = 2;\n   CPP_OPTION (pfile, warn_endif_labels) = 1;\n   CPP_OPTION (pfile, warn_deprecated) = 1;\n   CPP_OPTION (pfile, warn_long_long) = !CPP_OPTION (pfile, c99);\n@@ -554,6 +555,9 @@ post_options (pfile)\n       CPP_OPTION (pfile, traditional) = 0;\n     }\n \n+  if (CPP_OPTION (pfile, warn_trigraphs) == 2)\n+    CPP_OPTION (pfile, warn_trigraphs) = !CPP_OPTION (pfile, trigraphs);\n+\n   if (CPP_OPTION (pfile, traditional))\n     {\n       /* Traditional CPP does not accurately track column information.  */"}, {"sha": "5f3e3f62fcb5ee617482893296cf624e2050a1ad", "filename": "gcc/cpplex.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8eb6044a9468a56cab63890820e17101ce8fd64/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8eb6044a9468a56cab63890820e17101ce8fd64/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=a8eb6044a9468a56cab63890820e17101ce8fd64", "patch": "@@ -63,6 +63,7 @@ static void save_comment PARAMS ((cpp_reader *, cpp_token *, const uchar *,\n \t\t\t\t  cppchar_t));\n static void create_literal PARAMS ((cpp_reader *, cpp_token *, const uchar *,\n \t\t\t\t    unsigned int, enum cpp_ttype));\n+static bool warn_in_comment PARAMS ((cpp_reader *, _cpp_line_note *));\n static int name_p PARAMS ((cpp_reader *, const cpp_string *));\n static cppchar_t maybe_read_ucn PARAMS ((cpp_reader *, const uchar **));\n static tokenrun *next_tokenrun PARAMS ((tokenrun *));\n@@ -180,6 +181,36 @@ _cpp_clean_line (pfile)\n   buffer->next_line = s + 1;\n }\n \n+/* Return true if the trigraph indicated by NOTE should be warned\n+   about in a comment.  */\n+static bool\n+warn_in_comment (pfile, note)\n+     cpp_reader *pfile;\n+     _cpp_line_note *note;\n+{\n+  const uchar *p;\n+\n+  /* Within comments we don't warn about trigraphs, unless the\n+     trigraph forms an escaped newline, as that may change\n+     behaviour.  */\n+  if (note->type != '/')\n+    return false;\n+\n+  /* If -trigraphs, then this was an escaped newline iff the next note\n+     is coincident.  */\n+  if (CPP_OPTION (pfile, trigraphs))\n+    return note[1].pos == note->pos;\n+\n+  /* Otherwise, see if this forms an escaped newline.  */\n+  p = note->pos + 3;\n+  while (is_nvspace (*p))\n+    p++;\n+\n+  /* There might have been escaped newlines between the trigraph and the\n+     newline we found.  Hence the position test.  */\n+  return (*p == '\\n' && p < note[1].pos);\n+}\n+\n /* Process the notes created by add_line_note as far as the current\n    location.  */\n void\n@@ -219,7 +250,8 @@ _cpp_process_line_notes (pfile, in_comment)\n \t}\n       else if (_cpp_trigraph_map[note->type])\n \t{\n-\t  if (!in_comment && CPP_OPTION (pfile, warn_trigraphs))\n+\t  if (CPP_OPTION (pfile, warn_trigraphs)\n+\t      && (!in_comment || warn_in_comment (pfile, note)))\n \t    {\n \t      if (CPP_OPTION (pfile, trigraphs))\n \t\tcpp_error_with_line (pfile, DL_WARNING, pfile->line, col,\n@@ -284,6 +316,7 @@ _cpp_skip_block_comment (pfile)\n \t}\n     }\n \n+  _cpp_process_line_notes (pfile, true);\n   return false;\n }\n "}, {"sha": "173e341fb830741ffc37781b3cb3c595501d525c", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8eb6044a9468a56cab63890820e17101ce8fd64/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8eb6044a9468a56cab63890820e17101ce8fd64/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=a8eb6044a9468a56cab63890820e17101ce8fd64", "patch": "@@ -293,16 +293,18 @@ obsolete systems that lack some of C's punctuation to use C@.  For\n example, @samp{??/} stands for @samp{\\}, so @t{'??/n'} is a character\n constant for a newline.\n \n-Trigraphs are not popular and many compilers implement them incorrectly.\n-Portable code should not rely on trigraphs being either converted or\n-ignored.  If you use the @option{-Wall} or @option{-Wtrigraphs} options,\n-GCC will warn you when a trigraph would change the meaning of your\n-program if it were converted.\n-\n-In a string constant, you can prevent a sequence of question marks from\n-being confused with a trigraph by inserting a backslash between the\n-question marks.  @t{\"(??\\?)\"} is the string @samp{(???)}, not\n-@samp{(?]}.  Traditional C compilers do not recognize this idiom.\n+Trigraphs are not popular and many compilers implement them\n+incorrectly.  Portable code should not rely on trigraphs being either\n+converted or ignored.  With @option{-Wtrigraphs} GCC will warn you\n+when a trigraph may change the meaning of your program if it were\n+converted.  @xref{Wtrigraphs}.\n+\n+In a string constant, you can prevent a sequence of question marks\n+from being confused with a trigraph by inserting a backslash between\n+the question marks, or by separating the string literal at the\n+trigraph and making use of string literal concatenation.  @t{\"(??\\?)\"}\n+is the string @samp{(???)}, not @samp{(?]}.  Traditional C compilers\n+do not recognize these idioms.\n \n The nine trigraphs and their replacements are\n "}, {"sha": "490905a065c59e6976c0fff8c50a240aa92efbc4", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8eb6044a9468a56cab63890820e17101ce8fd64/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8eb6044a9468a56cab63890820e17101ce8fd64/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=a8eb6044a9468a56cab63890820e17101ce8fd64", "patch": "@@ -69,10 +69,12 @@ use @option{-o} to specify the output file.\n \n @item -Wall\n @opindex Wall\n-Turns on all optional warnings which are desirable for normal code.  At\n-present this is @option{-Wcomment} and @option{-Wtrigraphs}.  Note that\n-many of the preprocessor's warnings are on by default and have no\n-options to control them.\n+Turns on all optional warnings which are desirable for normal code.\n+At present this is @option{-Wcomment}, @option{-Wtrigraphs},\n+@option{-Wmultichar} and a warning about integer promotion causing a\n+change of sign in @code{#if} expressions.  Note that many of the\n+preprocessor's warnings are on by default and have no options to\n+control them.\n \n @item -Wcomment\n @itemx -Wcomments\n@@ -84,10 +86,13 @@ comment, or whenever a backslash-newline appears in a @samp{//} comment.\n \n @item -Wtrigraphs\n @opindex Wtrigraphs\n-Warn if any trigraphs are encountered.  This option used to take effect\n-only if @option{-trigraphs} was also specified, but now works\n-independently.  Warnings are not given for trigraphs within comments, as\n-they do not affect the meaning of the program.\n+@anchor{Wtrigraphs}\n+Warn if any trigraphs that may change the meaning of a program are\n+encountered.  This option is in effect unless trigraphs are turned on,\n+and is implied by @option{-Wall}.  With the exception of a trigraph\n+that would form an escaped newline, warnings are not given for\n+trigraphs within comments as they do not affect the meaning of the\n+program.\n \n @item -Wtraditional\n @opindex Wtraditional"}, {"sha": "d1e822660bc81bfafa56c4c50c2c567279ef8c2b", "filename": "gcc/testsuite/gcc.dg/cpp/Wtrigraphs-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8eb6044a9468a56cab63890820e17101ce8fd64/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWtrigraphs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8eb6044a9468a56cab63890820e17101ce8fd64/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWtrigraphs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWtrigraphs-2.c?ref=a8eb6044a9468a56cab63890820e17101ce8fd64", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c99 -Wtrigraphs -fno-show-column\" } */\n+\n+/* Test we don't double warn for trigraphs immediately after preceding\n+   text.  Source Neil Booth.  4 May 2003.  */\n+\n+/* { dg-bogus \"ignored\" } Test ??< ??= a few ??/ random things in\n+   { dg-warning \"converted\" } some ??/\n+   { dg-bogus \"ignored\" } ??< comments.  */\n+\n+// { dg-bogus \"ignored\" } More ??/ comment ??> tests.\n+\n+// { dg-warning \"converted\" } Another ??/\n+   Test\n+\n+// { dg-warning \"converted\" } And another with space after ??/  \n+   the escape\n+\n+// { dg-bogus \"ignored\" } A tricky one ??/\\\n+"}, {"sha": "5ed6c98ad49ed7a71d1824f70c8bcbd33d457dcc", "filename": "gcc/testsuite/gcc.dg/cpp/Wtrigraphs.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8eb6044a9468a56cab63890820e17101ce8fd64/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWtrigraphs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8eb6044a9468a56cab63890820e17101ce8fd64/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWtrigraphs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWtrigraphs.c?ref=a8eb6044a9468a56cab63890820e17101ce8fd64", "patch": "@@ -1,9 +1,27 @@\n /* { dg-do preprocess } */\n-/* { dg-options \"-Wtrigraphs -fno-show-column\" } */\n+/* { dg-options \"-std=gnu99 -Wtrigraphs -fno-show-column\" } */\n \n /* Test we don't double warn for trigraphs immediately after preceding\n    text.  Source Neil Booth.  22 Nov 2000.  */\n \n abcdef??<\t\t\t/* { dg-warning \"ignored\" } */\n 123456??>\t\t\t/* { dg-warning \"ignored\" } */\n +??=\t\t\t\t/* { dg-warning \"ignored\" } */\n+\n+/* Test we warn of escaped newlines only in comments.  Source Neil\n+   Booth.  4 May 2003.  */\n+\n+/* { dg-bogus \"ignored\" } Test ??< ??= a few ??/ random things in\n+   { dg-warning \"ignored\" } some ??/\n+   { dg-bogus \"ignored\" } ??< comments.  */\n+\n+// { dg-bogus \"ignored\" } More ??/ comment ??> tests.\n+\n+// { dg-warning \"ignored\" } Another ??/\n+   Test\n+\n+// { dg-warning \"ignored\" } And another with space after ??/  \n+   the escape\n+\n+// { dg-bogus \"ignored\" } A tricky one ??/\\\n+"}]}