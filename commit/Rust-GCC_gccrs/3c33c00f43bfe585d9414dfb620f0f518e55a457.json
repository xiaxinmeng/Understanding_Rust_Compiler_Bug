{"sha": "3c33c00f43bfe585d9414dfb620f0f518e55a457", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MzM2MwMGY0M2JmZTU4NWQ5NDE0ZGZiNjIwZjBmNTE4ZTU1YTQ1Nw==", "commit": {"author": {"name": "Marius Hillenbrand", "email": "mhillen@linux.ibm.com", "date": "2021-05-04T11:30:05Z"}, "committer": {"name": "Marius Hillenbrand", "email": "mhillen@linux.ibm.com", "date": "2021-05-06T08:49:18Z"}, "message": "IBM Z: Fix error checking for builtin vec_permi\n\nThe builtin vec_permi is peculiar in that its immediate operand is\nencoded differently than the immediate operand that is backing the\nbuiltin. This fixes the check for the immediate operand, adding a\nregression test in the process.\n\nThis partially reverts commit 3191c1f4488d1f7563b563d7ae2a102a26f16d82\n\n2021-05-06  Marius Hillenbrand  <mhillen@linux.ibm.com>\n\ngcc/ChangeLog:\n\n\t* config/s390/s390-builtins.def (O_M5, O1_M5, ...): Remove unused macros.\n\t(s390_vec_permi_s64, s390_vec_permi_b64, s390_vec_permi_u64)\n\t(s390_vec_permi_dbl, s390_vpdi): Use the O3_U2 type for the immediate\n\toperand.\n\t* config/s390/s390.c (s390_const_operand_ok): Remove unused\n\tvalues.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/zvector/imm-range-error-1.c: Fix test for\n\t__builtin_s390_vpdi.\n\t* gcc.target/s390/zvector/vec-permi.c: New test for builtin\n\tvec_permi.", "tree": {"sha": "5ac7fc2f15a9cc93cebf4d580e8e581963da30d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ac7fc2f15a9cc93cebf4d580e8e581963da30d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c33c00f43bfe585d9414dfb620f0f518e55a457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c33c00f43bfe585d9414dfb620f0f518e55a457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c33c00f43bfe585d9414dfb620f0f518e55a457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c33c00f43bfe585d9414dfb620f0f518e55a457/comments", "author": {"login": "mhillenbrand", "id": 1150167, "node_id": "MDQ6VXNlcjExNTAxNjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1150167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mhillenbrand", "html_url": "https://github.com/mhillenbrand", "followers_url": "https://api.github.com/users/mhillenbrand/followers", "following_url": "https://api.github.com/users/mhillenbrand/following{/other_user}", "gists_url": "https://api.github.com/users/mhillenbrand/gists{/gist_id}", "starred_url": "https://api.github.com/users/mhillenbrand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mhillenbrand/subscriptions", "organizations_url": "https://api.github.com/users/mhillenbrand/orgs", "repos_url": "https://api.github.com/users/mhillenbrand/repos", "events_url": "https://api.github.com/users/mhillenbrand/events{/privacy}", "received_events_url": "https://api.github.com/users/mhillenbrand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mhillenbrand", "id": 1150167, "node_id": "MDQ6VXNlcjExNTAxNjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1150167?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mhillenbrand", "html_url": "https://github.com/mhillenbrand", "followers_url": "https://api.github.com/users/mhillenbrand/followers", "following_url": "https://api.github.com/users/mhillenbrand/following{/other_user}", "gists_url": "https://api.github.com/users/mhillenbrand/gists{/gist_id}", "starred_url": "https://api.github.com/users/mhillenbrand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mhillenbrand/subscriptions", "organizations_url": "https://api.github.com/users/mhillenbrand/orgs", "repos_url": "https://api.github.com/users/mhillenbrand/repos", "events_url": "https://api.github.com/users/mhillenbrand/events{/privacy}", "received_events_url": "https://api.github.com/users/mhillenbrand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad96c867e173c1ebcfc201b201adac5095683a08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad96c867e173c1ebcfc201b201adac5095683a08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad96c867e173c1ebcfc201b201adac5095683a08"}], "stats": {"total": 107, "additions": 76, "deletions": 31}, "files": [{"sha": "8ca002dc55aed754eefd90fa3bc88642f6530131", "filename": "gcc/config/s390/s390-builtins.def", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c33c00f43bfe585d9414dfb620f0f518e55a457/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c33c00f43bfe585d9414dfb620f0f518e55a457/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtins.def?ref=3c33c00f43bfe585d9414dfb620f0f518e55a457", "patch": "@@ -29,7 +29,6 @@\n #undef O_U16\n #undef O_U32\n \n-#undef O_M5\n #undef O_M12\n \n #undef O_S2\n@@ -89,11 +88,6 @@\n #undef O3_U32\n #undef O4_U32\n \n-#undef O1_M5\n-#undef O2_M5\n-#undef O3_M5\n-#undef O4_M5\n-\n #undef O1_M12\n #undef O2_M12\n #undef O3_M12\n@@ -164,20 +158,19 @@\n #define O_U16    8 /* unsigned 16 bit literal */\n #define O_U32    9 /* unsigned 32 bit literal */\n \n-#define O_M5    10 /* matches bitmask of 5 */\n-#define O_M12   11 /* matches bitmask of 12 */\n+#define O_M12   10 /* matches bitmask of 12 */\n \n-#define O_S2    12 /* signed  2 bit literal */\n-#define O_S3    13 /* signed  3 bit literal */\n-#define O_S4    14 /* signed  4 bit literal */\n-#define O_S5    15 /* signed  5 bit literal */\n-#define O_S8    16 /* signed  8 bit literal */\n-#define O_S12   17 /* signed 12 bit literal */\n-#define O_S16   18 /* signed 16 bit literal */\n-#define O_S32   19 /* signed 32 bit literal */\n+#define O_S2    11 /* signed  2 bit literal */\n+#define O_S3    12 /* signed  3 bit literal */\n+#define O_S4    13 /* signed  4 bit literal */\n+#define O_S5    14 /* signed  5 bit literal */\n+#define O_S8    15 /* signed  8 bit literal */\n+#define O_S12   16 /* signed 12 bit literal */\n+#define O_S16   17 /* signed 16 bit literal */\n+#define O_S32   18 /* signed 32 bit literal */\n \n-#define O_ELEM  20 /* Element selector requiring modulo arithmetic. */\n-#define O_LIT   21 /* Operand must be a literal fitting the target type.  */\n+#define O_ELEM  19 /* Element selector requiring modulo arithmetic. */\n+#define O_LIT   20 /* Operand must be a literal fitting the target type.  */\n \n #define O_SHIFT 5\n \n@@ -230,11 +223,6 @@\n #define O3_U32 (O_U32 << (2 * O_SHIFT))\n #define O4_U32 (O_U32 << (3 * O_SHIFT))\n \n-#define O1_M5 O_M5\n-#define O2_M5 (O_M5 << O_SHIFT)\n-#define O3_M5 (O_M5 << (2 * O_SHIFT))\n-#define O4_M5 (O_M5 << (3 * O_SHIFT))\n-\n #define O1_M12 O_M12\n #define O2_M12 (O_M12 << O_SHIFT)\n #define O3_M12 (O_M12 << (2 * O_SHIFT))\n@@ -671,12 +659,12 @@ OB_DEF_VAR (s390_vec_perm_dbl,          s390_vperm,         0,\n B_DEF      (s390_vperm,                 vec_permv16qi,      0,                  B_VX,               0,                  BT_FN_UV16QI_UV16QI_UV16QI_UV16QI)\n \n OB_DEF     (s390_vec_permi,             s390_vec_permi_s64, s390_vec_permi_dbl, B_VX,               BT_FN_OV4SI_OV4SI_OV4SI_INT)\n-OB_DEF_VAR (s390_vec_permi_s64,         s390_vpdi,          0,                  O3_M5,              BT_OV_V2DI_V2DI_V2DI_INT)\n-OB_DEF_VAR (s390_vec_permi_b64,         s390_vpdi,          0,                  O3_M5,              BT_OV_BV2DI_BV2DI_BV2DI_INT)\n-OB_DEF_VAR (s390_vec_permi_u64,         s390_vpdi,          0,                  O3_M5,              BT_OV_UV2DI_UV2DI_UV2DI_INT)\n-OB_DEF_VAR (s390_vec_permi_dbl,         s390_vpdi,          0,                  O3_M5,              BT_OV_V2DF_V2DF_V2DF_INT)\n+OB_DEF_VAR (s390_vec_permi_s64,         s390_vpdi,          0,                  O3_U2,              BT_OV_V2DI_V2DI_V2DI_INT)\n+OB_DEF_VAR (s390_vec_permi_b64,         s390_vpdi,          0,                  O3_U2,              BT_OV_BV2DI_BV2DI_BV2DI_INT)\n+OB_DEF_VAR (s390_vec_permi_u64,         s390_vpdi,          0,                  O3_U2,              BT_OV_UV2DI_UV2DI_UV2DI_INT)\n+OB_DEF_VAR (s390_vec_permi_dbl,         s390_vpdi,          0,                  O3_U2,              BT_OV_V2DF_V2DF_V2DF_INT)\n \n-B_DEF      (s390_vpdi,                  vec_permiv2di,      0,                  B_VX,               O3_M5,              BT_FN_UV2DI_UV2DI_UV2DI_INT)\n+B_DEF      (s390_vpdi,                  vec_permiv2di,      0,                  B_VX,               O3_U2,              BT_FN_UV2DI_UV2DI_UV2DI_INT)\n \n OB_DEF     (s390_vec_splat,             s390_vec_splat2_s8, s390_vec_splat2_dbl,B_VX,               BT_FN_OV4SI_OV4SI_UCHAR)\n OB_DEF_VAR (s390_vec_splat2_s8,         s390_vrepb,         0,                  O2_U4,              BT_OV_V16QI_V16QI_UCHAR)"}, {"sha": "6bbeb640e1fc958283314495e59774b390095379", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c33c00f43bfe585d9414dfb620f0f518e55a457/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c33c00f43bfe585d9414dfb620f0f518e55a457/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=3c33c00f43bfe585d9414dfb620f0f518e55a457", "patch": "@@ -734,11 +734,14 @@ s390_const_operand_ok (tree arg, int argnum, int op_flags, tree decl)\n {\n   if (O_UIMM_P (op_flags))\n     {\n-      unsigned HOST_WIDE_INT bitwidths[] = { 1, 2, 3, 4, 5, 8, 12, 16, 32, 4,  4 };\n-      unsigned HOST_WIDE_INT bitmasks[]  = { 0, 0, 0, 0, 0, 0,  0,  0,  0, 5, 12 };\n+      unsigned HOST_WIDE_INT bitwidths[] = { 1, 2, 3, 4, 5, 8, 12, 16, 32, 4 };\n+      unsigned HOST_WIDE_INT bitmasks[]  = { 0, 0, 0, 0, 0, 0,  0,  0,  0, 12 };\n       unsigned HOST_WIDE_INT bitwidth = bitwidths[op_flags - O_U1];\n       unsigned HOST_WIDE_INT bitmask = bitmasks[op_flags - O_U1];\n \n+      gcc_assert(ARRAY_SIZE(bitwidths) == (O_M12 - O_U1 + 1));\n+      gcc_assert(ARRAY_SIZE(bitmasks) == (O_M12 - O_U1 + 1));\n+\n       if (!tree_fits_uhwi_p (arg)\n \t  || tree_to_uhwi (arg) > (HOST_WIDE_INT_1U << bitwidth) - 1\n \t  || (bitmask && tree_to_uhwi (arg) & ~bitmask))"}, {"sha": "021c8d297d2da4ecfa21d206620fd098c300238e", "filename": "gcc/testsuite/gcc.target/s390/zvector/imm-range-error-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c33c00f43bfe585d9414dfb620f0f518e55a457/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fimm-range-error-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c33c00f43bfe585d9414dfb620f0f518e55a457/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fimm-range-error-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fimm-range-error-1.c?ref=3c33c00f43bfe585d9414dfb620f0f518e55a457", "patch": "@@ -22,5 +22,5 @@ main ()\n   __builtin_s390_vrepf (s,  4); /* { dg-error \"constant argument 2 for builtin '__builtin_s390_vrepf' is out of range \\\\(0..3\\\\)\" } */\n   __builtin_s390_vrepg (d,  2); /* { dg-error \"constant argument 2 for builtin '__builtin_s390_vrepg' is out of range \\\\(0..1\\\\)\" } */\n \n-  __builtin_s390_vpdi (d, d, 2); /* { dg-error \"constant argument 3 for builtin '__builtin_s390_vpdi' is invalid \\\\(0, 1, 4, 5\\\\)\" } */\n+  __builtin_s390_vpdi (d, d, 4); /* { dg-error \"constant argument 3 for builtin '__builtin_s390_vpdi' is out of range \\\\(0..3\\\\)\" } */\n }"}, {"sha": "c0a852b970300d3e064289ece6ab9aad98e07049", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-permi.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c33c00f43bfe585d9414dfb620f0f518e55a457/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-permi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c33c00f43bfe585d9414dfb620f0f518e55a457/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-permi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-permi.c?ref=3c33c00f43bfe585d9414dfb620f0f518e55a457", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=z13 -mzarch --save-temps\" } */\n+/* { dg-do run { target { s390_z13_hw } } } */\n+\n+/*\n+ * The vector intrinsic vec_permi(a, b, c) chooses one of the two eight-byte\n+ * vector elements in each of a and b, depending on the value of c. The valid\n+ * values for c differ from the encoding for the M4 field in assembly and in the\n+ * binary instruction.\n+ *\n+ * selection | c | encoding in assembly\n+ * a[0] b[0] | 0 | 0\n+ * a[0] b[1] | 1 | 1\n+ * a[1] b[0] | 2 | 4\n+ * a[1] b[1] | 3 | 5\n+ *\n+ * (i.e., indices a[i] b[j] are encoded for c as (i<<1) | j, yet for the\n+ * M4 field as (i<<2) | j.\n+ */\n+#include <assert.h>\n+#include <vecintrin.h>\n+\n+typedef unsigned long long uv2di __attribute__((vector_size(16)));\n+\n+__attribute__ ((noipa)) static uv2di\n+do_vec_permi(uv2di a, uv2di b, int c)\n+{\n+    switch(c) {\n+\tcase 0: return vec_permi(a, b, 0);\n+\tcase 1: return vec_permi(a, b, 1);\n+\tcase 2: return vec_permi(a, b, 2);\n+\tcase 3: return vec_permi(a, b, 3);\n+\tdefault: assert(0);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\n\\tvpdi\\t%v\\d+,%v\\d+,%v\\d+,0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\n\\tvpdi\\t%v\\d+,%v\\d+,%v\\d+,1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\n\\tvpdi\\t%v\\d+,%v\\d+,%v\\d+,4\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\n\\tvpdi\\t%v\\d+,%v\\d+,%v\\d+,5\\n} 1 } } */\n+\n+int\n+main (void)\n+{\n+    uv2di a = { 0xa0, 0xa1 };\n+    uv2di b = { 0xb0, 0xb1 };\n+\n+    for (int i = 0; i < 2; i++)\n+\tfor (int j = 0; j < 2; j++) {\n+\t    uv2di res = do_vec_permi(a, b, (i<<1)|j);\n+\t    assert(res[0] == a[i]);\n+\t    assert(res[1] == b[j]);\n+\t}\n+}"}]}