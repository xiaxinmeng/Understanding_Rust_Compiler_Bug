{"sha": "080a23bce12fa3f25860631f019777f728d2ef11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgwYTIzYmNlMTJmYTNmMjU4NjA2MzFmMDE5Nzc3ZjcyOGQyZWYxMQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-02T14:51:31Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-02T14:51:31Z"}, "message": "libstdc++: Add missing P0896 changes to <iterator>\n\nI noticed that the following changes from this paper were not yet\nimplemented.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_iterator.h (reverse_iterator::iter_move):\n\tDefine for C++20 as per P0896.\n\t(reverse_iterator::iter_swap): Likewise.\n\t(move_iterator::operator*): Apply P0896 changes for C++20.\n\t(move_iterator::operator[]): Likewise.\n\t* testsuite/24_iterators/reverse_iterator/cust.cc: New test.", "tree": {"sha": "0578968c2bb325e176b4a07a3e3d67030ea37d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0578968c2bb325e176b4a07a3e3d67030ea37d12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/080a23bce12fa3f25860631f019777f728d2ef11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/080a23bce12fa3f25860631f019777f728d2ef11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/080a23bce12fa3f25860631f019777f728d2ef11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/080a23bce12fa3f25860631f019777f728d2ef11/comments", "author": null, "committer": null, "parents": [{"sha": "251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/251950d899bc3c18b5775fe9fe20bebbdc8d15cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/251950d899bc3c18b5775fe9fe20bebbdc8d15cb"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "2259f7c8393fa6b62bc310af57a4252a8f946386", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080a23bce12fa3f25860631f019777f728d2ef11/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080a23bce12fa3f25860631f019777f728d2ef11/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=080a23bce12fa3f25860631f019777f728d2ef11", "patch": "@@ -362,6 +362,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator[](difference_type __n) const\n       { return *(*this + __n); }\n \n+#if __cplusplus > 201703L && __cpp_lib_concepts\n+      friend constexpr iter_rvalue_reference_t<_Iterator>\n+      iter_move(const reverse_iterator& __i)\n+      noexcept(is_nothrow_copy_constructible_v<_Iterator>\n+\t       && noexcept(ranges::iter_move(--std::declval<_Iterator&>())))\n+      {\n+\tauto __tmp = __i.base();\n+\treturn ranges::iter_move(--__tmp);\n+      }\n+\n+      template<indirectly_swappable<_Iterator> _Iter2>\n+\tfriend constexpr void\n+\titer_swap(const reverse_iterator& __x,\n+\t\t  const reverse_iterator<_Iter2>& __y)\n+\tnoexcept(is_nothrow_copy_constructible_v<_Iterator>\n+\t\t && is_nothrow_copy_constructible_v<_Iter2>\n+\t\t && noexcept(ranges::iter_swap(--std::declval<_Iterator&>(),\n+\t\t\t\t\t       --std::declval<_Iter2&>())))\n+\t{\n+\t  auto __xtmp = __x.base();\n+\t  auto __ytmp = __y.base();\n+\t  ranges::iter_swap(--__xtmp, --__ytmp);\n+\t}\n+#endif\n+\n     private:\n       template<typename _Tp>\n \tstatic _GLIBCXX17_CONSTEXPR _Tp*\n@@ -1379,7 +1404,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _GLIBCXX17_CONSTEXPR reference\n       operator*() const\n+#if __cplusplus > 201703L && __cpp_lib_concepts\n+      { return ranges::iter_move(_M_current); }\n+#else\n       { return static_cast<reference>(*_M_current); }\n+#endif\n \n       _GLIBCXX17_CONSTEXPR pointer\n       operator->() const\n@@ -1445,7 +1474,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _GLIBCXX17_CONSTEXPR reference\n       operator[](difference_type __n) const\n+#if __cplusplus > 201703L && __cpp_lib_concepts\n+      { return ranges::iter_move(_M_current + __n); }\n+#else\n       { return std::move(_M_current[__n]); }\n+#endif\n \n #if __cplusplus > 201703L && __cpp_lib_concepts\n       template<sentinel_for<_Iterator> _Sent>"}, {"sha": "ac86312fbe7de835d8eaf8553914bf015522445a", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/cust.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080a23bce12fa3f25860631f019777f728d2ef11/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fcust.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080a23bce12fa3f25860631f019777f728d2ef11/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fcust.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fcust.cc?ref=080a23bce12fa3f25860631f019777f728d2ef11", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2019-2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+// This test is an adaptation of 24_iterators/move_iterator/cust.cc.\n+\n+constexpr bool\n+test01()\n+{\n+  struct X\n+  {\n+    constexpr X(int i) noexcept : i(i) { }\n+    constexpr X(X&& x) noexcept : i(x.i) { x.i = -1; }\n+    constexpr X& operator=(X&& x) noexcept { i = x.i; x.i = 0; return *this; }\n+    int i;\n+  };\n+\n+  X arr[] = { 1, 2 };\n+  std::reverse_iterator<X*> i(arr + 1), j(arr + 2);\n+  static_assert(noexcept(std::ranges::iter_swap(i, j)));\n+  std::ranges::iter_swap(i, j);\n+  VERIFY( arr[0].i == 2 );\n+  VERIFY( arr[1].i == 1 );\n+\n+  static_assert(noexcept(std::ranges::iter_move(i)));\n+  X x = std::ranges::iter_move(i);\n+  VERIFY( arr[0].i == -1 );\n+  VERIFY( x.i == 2 );\n+\n+  return true;\n+}\n+\n+static_assert(test01());"}]}