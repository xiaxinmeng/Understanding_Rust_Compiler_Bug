{"sha": "5e7c77616e704623086a71bc9870dee9c580fb79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU3Yzc3NjE2ZTcwNDYyMzA4NmE3MWJjOTg3MGRlZTljNTgwZmI3OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-11-18T22:21:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-11-18T22:21:31Z"}, "message": "re PR middle-end/78419 (ICE with target_clone on invalid target)\n\n\tPR middle-end/78419\n\t* multiple_target.c (get_attr_len): Start with argnum and increment\n\targnum on every arg.  Use strchr in a loop instead of counting commas\n\tmanually.\n\t(get_attr_str): Increment argnum for every comma in the string.\n\t(separate_attrs): Use for instead of while loop, simplify.\n\t(expand_target_clones): Rename defenition argument to definition.\n\tFree attrs and attr_str even when diagnosing errors.  Temporarily\n\tchange input_location around targetm.target_option.valid_attribute_p\n\tcalls.  Don't emit warning or errors if that function fails.\n\n\t* gcc.target/i386/pr78419.c: New test.\n\nFrom-SVN: r242608", "tree": {"sha": "acf1794c26cb1e3b59a4151a8b8dcf6028251d3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acf1794c26cb1e3b59a4151a8b8dcf6028251d3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e7c77616e704623086a71bc9870dee9c580fb79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7c77616e704623086a71bc9870dee9c580fb79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e7c77616e704623086a71bc9870dee9c580fb79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7c77616e704623086a71bc9870dee9c580fb79/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c554a2ab8291d6f6c94325ea72cfbc7af3c1c55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c554a2ab8291d6f6c94325ea72cfbc7af3c1c55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c554a2ab8291d6f6c94325ea72cfbc7af3c1c55"}], "stats": {"total": 105, "additions": 69, "deletions": 36}, "files": [{"sha": "679386956083e058b581d4e82a87be7d57846e29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7c77616e704623086a71bc9870dee9c580fb79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7c77616e704623086a71bc9870dee9c580fb79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e7c77616e704623086a71bc9870dee9c580fb79", "patch": "@@ -1,5 +1,16 @@\n 2016-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/78419\n+\t* multiple_target.c (get_attr_len): Start with argnum and increment\n+\targnum on every arg.  Use strchr in a loop instead of counting commas\n+\tmanually.\n+\t(get_attr_str): Increment argnum for every comma in the string.\n+\t(separate_attrs): Use for instead of while loop, simplify.\n+\t(expand_target_clones): Rename defenition argument to definition.\n+\tFree attrs and attr_str even when diagnosing errors.  Temporarily\n+\tchange input_location around targetm.target_option.valid_attribute_p\n+\tcalls.  Don't emit warning or errors if that function fails.\n+\n \t* dwarf2out.c (size_of_discr_list): Fix typo in function comment.\n \n \tPR debug/78191"}, {"sha": "4ead0292138fdfef12eb2d3cc3911868ca0de13c", "filename": "gcc/multiple_target.c", "status": "modified", "additions": 32, "deletions": 36, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7c77616e704623086a71bc9870dee9c580fb79/gcc%2Fmultiple_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7c77616e704623086a71bc9870dee9c580fb79/gcc%2Fmultiple_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmultiple_target.c?ref=5e7c77616e704623086a71bc9870dee9c580fb79", "patch": "@@ -101,22 +101,18 @@ get_attr_len (tree arglist)\n {\n   tree arg;\n   int str_len_sum = 0;\n-  int argnum = 1;\n+  int argnum = 0;\n \n   for (arg = arglist; arg; arg = TREE_CHAIN (arg))\n     {\n-      unsigned int i;\n       const char *str = TREE_STRING_POINTER (TREE_VALUE (arg));\n-      int len = strlen (str);\n-\n+      size_t len = strlen (str);\n       str_len_sum += len + 1;\n-      if (arg != arglist)\n+      for (const char *p = strchr (str, ','); p; p = strchr (p + 1, ','))\n \targnum++;\n-      for (i = 0; i < strlen (str); i++)\n-\tif (str[i] == ',')\n-\t  argnum++;\n+      argnum++;\n     }\n-  if (argnum == 1)\n+  if (argnum <= 1)\n     return -1;\n   return str_len_sum;\n }\n@@ -134,8 +130,9 @@ get_attr_str (tree arglist, char *attr_str)\n   for (arg = arglist; arg; arg = TREE_CHAIN (arg))\n     {\n       const char *str = TREE_STRING_POINTER (TREE_VALUE (arg));\n-\n       size_t len = strlen (str);\n+      for (const char *p = strchr (str, ','); p; p = strchr (p + 1, ','))\n+\targnum++;\n       memcpy (attr_str + str_len_sum, str, len);\n       attr_str[str_len_sum + len] = TREE_CHAIN (arg) ? ',' : '\\0';\n       str_len_sum += len + 1;\n@@ -152,19 +149,16 @@ separate_attrs (char *attr_str, char **attrs)\n {\n   int i = 0;\n   bool has_default = false;\n-  char *attr = strtok (attr_str, \",\");\n \n-  while (attr != NULL)\n+  for (char *attr = strtok (attr_str, \",\");\n+       attr != NULL; attr = strtok (NULL, \",\"))\n     {\n       if (strcmp (attr, \"default\") == 0)\n \t{\n \t  has_default = true;\n-\t  attr = strtok (NULL, \",\");\n \t  continue;\n \t}\n-      attrs[i] = attr;\n-      attr = strtok (NULL, \",\");\n-      i++;\n+      attrs[i++] = attr;\n     }\n   if (!has_default)\n     return -1;\n@@ -235,7 +229,7 @@ create_target_clone (cgraph_node *node, bool definition, char *name)\n    create the appropriate clone for each valid target attribute.  */\n \n static bool\n-expand_target_clones (struct cgraph_node *node, bool defenition)\n+expand_target_clones (struct cgraph_node *node, bool definition)\n {\n   int i;\n   /* Parsing target attributes separated by comma.  */\n@@ -266,6 +260,8 @@ expand_target_clones (struct cgraph_node *node, bool defenition)\n     {\n       error_at (DECL_SOURCE_LOCATION (node->decl),\n \t\t\"default target was not set\");\n+      XDELETEVEC (attrs);\n+      XDELETEVEC (attr_str);\n       return false;\n     }\n \n@@ -286,22 +282,24 @@ expand_target_clones (struct cgraph_node *node, bool defenition)\n \n       create_new_asm_name (attr, suffix);\n       /* Create new target clone.  */\n-      cgraph_node *new_node = create_target_clone (node, defenition, suffix);\n+      cgraph_node *new_node = create_target_clone (node, definition, suffix);\n       XDELETEVEC (suffix);\n \n       /* Set new attribute for the clone.  */\n       tree attributes = make_attribute (\"target\", attr,\n \t\t\t\t\tDECL_ATTRIBUTES (new_node->decl));\n       DECL_ATTRIBUTES (new_node->decl) = attributes;\n+      location_t saved_loc = input_location;\n+      input_location = DECL_SOURCE_LOCATION (node->decl);\n       if (!targetm.target_option.valid_attribute_p (new_node->decl, NULL,\n-\t\t\t\t\t\t    TREE_VALUE (attributes), 0))\n+\t\t\t\t\t\t    TREE_VALUE (attributes),\n+\t\t\t\t\t\t    0))\n \t{\n-\t  warning_at (DECL_SOURCE_LOCATION (node->decl), 0,\n-\t\t      \"attribute(target_clones(\\\"%s\\\")) is not \"\n-\t\t      \"valid for current target\", attr);\n+\t  input_location = saved_loc;\n \t  continue;\n \t}\n \n+      input_location = saved_loc;\n       decl2_v = new_node->function_version ();\n       if (decl2_v != NULL)\n         continue;\n@@ -320,22 +318,20 @@ expand_target_clones (struct cgraph_node *node, bool defenition)\n       DECL_FUNCTION_VERSIONED (new_node->decl) = 1;\n     }\n \n-  /* Setting new attribute to initial function.  */\n-  tree attributes =  make_attribute (\"target\", \"default\",\n-\t\t\t\t     DECL_ATTRIBUTES (node->decl));\n-  DECL_ATTRIBUTES (node->decl) = attributes;\n-  if (!targetm.target_option.valid_attribute_p (node->decl, NULL,\n-\t\t\t\t\t\tTREE_VALUE (attributes), 0))\n-    {\n-      error_at (DECL_SOURCE_LOCATION (node->decl),\n-\t\t\"attribute(target_clones(\\\"default\\\")) is not \"\n-\t\t\"valid for current target\");\n-      return false;\n-    }\n-\n   XDELETEVEC (attrs);\n   XDELETEVEC (attr_str);\n-  return true;\n+\n+  /* Setting new attribute to initial function.  */\n+  tree attributes = make_attribute (\"target\", \"default\",\n+\t\t\t\t    DECL_ATTRIBUTES (node->decl));\n+  DECL_ATTRIBUTES (node->decl) = attributes;\n+  location_t saved_loc = input_location;\n+  input_location = DECL_SOURCE_LOCATION (node->decl);\n+  bool ret\n+    = targetm.target_option.valid_attribute_p (node->decl, NULL,\n+\t\t\t\t\t       TREE_VALUE (attributes), 0);\n+  input_location = saved_loc;\n+  return ret;\n }\n \n static bool target_clone_pass;"}, {"sha": "85bed9e2f458824bd7393b2e82e584d66d1d8753", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7c77616e704623086a71bc9870dee9c580fb79/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7c77616e704623086a71bc9870dee9c580fb79/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e7c77616e704623086a71bc9870dee9c580fb79", "patch": "@@ -1,5 +1,8 @@\n 2016-11-18  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/78419\n+\t* gcc.target/i386/pr78419.c: New test.\n+\n \tPR c++/77285\n \t* g++.dg/tls/pr77285-1.C: New test.\n \t* g++.dg/tls/pr77285-2.C: New test."}, {"sha": "1109193f72adb1687fb2c0e328cf4f7947684013", "filename": "gcc/testsuite/gcc.target/i386/pr78419.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7c77616e704623086a71bc9870dee9c580fb79/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78419.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7c77616e704623086a71bc9870dee9c580fb79/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78419.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr78419.c?ref=5e7c77616e704623086a71bc9870dee9c580fb79", "patch": "@@ -0,0 +1,23 @@\n+/* PR middle-end/78419 */\n+/* { dg-do compile } */\n+\n+static double bar (double *__restrict, double *__restrict, int)\n+__attribute__ ((target_clones(\"avx,foo,avx2,avx512f,default\")));\n+\n+double\n+foo (double *__restrict a, double *__restrict b, int n)\n+{\n+  return bar (a,b,n);\n+}\n+\n+double\n+bar (double *__restrict a, double *__restrict b, int n)\t/* { dg-error \"attribute\\[^\\n\\r]*foo\\[^\\n\\r]* is unknown\" } */\n+{\n+  double s;\n+  int i;\n+  s = 0.0;\n+  for (i=0; i<n; i++)\n+    s += a[i] + b[i];\n+\n+  return s;\n+}"}]}