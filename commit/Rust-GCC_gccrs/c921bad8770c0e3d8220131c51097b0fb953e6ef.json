{"sha": "c921bad8770c0e3d8220131c51097b0fb953e6ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkyMWJhZDg3NzBjMGUzZDgyMjAxMzFjNTEwOTdiMGZiOTUzZTZlZg==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2008-10-13T19:57:31Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2008-10-13T19:57:31Z"}, "message": "invoke.texi (-mgen-cell-microcode): Document.\n\n2008-10-13  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n            Kaushal Kantawala <Kaushal_Kantawala@playstation.sony.com>\n            Trevor Smigiel  <Trevor_Smigiel@playstation.sony.com>\n            Grace Cao  <grace_cao@playstation.sony.com>\n\n        * doc/invoke.texi (-mgen-cell-microcode): Document.\n        (-mwarn-cell-microcode): Document.\n        * cfglayout.c (locator_location): Export.\n        * rtl.h (locator_location): Define prototype.\n        * config/rs6000/predicates.md (cc_reg_not_micro_cr0_operand): New predicate.\n        * rs6000/rs6000-protos.h (rs6000_final_prescan_insn): Define prototype.\n        * config/rs6000/rs6000.opt (mgen-cell-microcode): New option.\n        (mwarn-cell-microcode): New option.\n        * rs6000/rs6000.c (rs6000_cell_dont_microcode): Delete unused variable.\n        (rs6000_override_options): Set rs6000_gen_cell_microcode if tuning for\n        cell and not already set.\n        Turn off string instructions if not generating cell microcode.\n        (rs6000_final_prescan_insn): New function that warns about microcoded\n        instructions.\n        * config/rs6000/rs6000.h (FINAL_PRESCAN_INSN): Define.\n        * config/rs6000/rs6000.md\n        Replace cc_reg_not_cr0_operand with cc_reg_not_micro_cr0_operand if\n        the instruction would have been microcoded on the Cell.\n        Set cell_micro to always on unnamed patterns for the string instructions.\n        (cell_micro): Update definition, remove load/store conditional microcoded.\n        (sign_extend:DI): Define new pattern for non microcoded version.\n        (sign_extend:SI): Likewise.\n        (compare (div:P)): Set cell_micro to not.\n        (andsi3): Define as an expand.\n        (andsi3_mc): New pattern.\n        (andsi3_nomc): New pattern.\n        (andsi3_internal0_nomc): New pattern.\n        (andsi3_internal2): Rename to ...\n        (andsi3_internal2_mc): this and enable iff generating microcode.\n        (andsi3_internal3): Rename to ...\n        (andsi3_internal3_mc): this and enable iff generating microcode.\n        (andsi3_internal4): Enable iif generating microcode.\n        (andsi3_internal5): Rename to ..\n        (andsi3_internal5_mc): this and enable iff generating microcode.\n        (andsi3_internal5_nomc): New pattern.\n        (extzvdi_internal1): Enable iff generating microcode.\n        (extzvdi_internal2): Likewise.\n        (rotlsi3_internal7): Set cell_micro to always if non immediate form.\n        (anddi3): Change to expand.\n        (anddi3_mc): Rename from anddi3.\n        (anddi3_no_mc): New pattern.\n        (anddi3_internal2): Rename to ..\n        (anddi3_internal2_mc): this and enable iff generating microcode.\n        (anddi3_internal2_nomc): New pattern.\n        (anddi3_internal3): Rename to ..\n        (anddi3_internal3_mc): this and enable iff generating microcode.\n        (anddi3_internal3_nomc): New pattern.\n        (movti_string): Set cell_micro to always if TARGET_STRING.\n        (stmsi8): Set cell_micro to always.\n        (stmsi7): Likewise.\n        (stmsi6): Likewise.\n        (stmsi5): Likewise.\n        (stmsi4): Likewise.\n        (stmsi3): Likewise.\n        (stmsi8_power): Likewise.\n        (stmsi7_power): Likewise.\n        (stmsi6_power): Likewise.\n        (stmsi5_power): Likewise.\n        (stmsi4_power): Likewise.\n        (stmsi3_power): Likewise.\n        (movsi_update2): Enable iff generating microcode.\n        (movhi_update3): Likewise.\n        (lmw): Set cell_micro to always.\n\n\n\nCo-Authored-By: Grace Cao <grace_cao@playstation.sony.com>\nCo-Authored-By: Kaushal Kantawala <Kaushal_Kantawala@playstation.sony.com>\nCo-Authored-By: Trevor Smigiel <Trevor_Smigiel@playstation.sony.com>\n\nFrom-SVN: r141094", "tree": {"sha": "5c0293cc20fc6138d89e5f322fbbe879ee0569c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c0293cc20fc6138d89e5f322fbbe879ee0569c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c921bad8770c0e3d8220131c51097b0fb953e6ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c921bad8770c0e3d8220131c51097b0fb953e6ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c921bad8770c0e3d8220131c51097b0fb953e6ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c921bad8770c0e3d8220131c51097b0fb953e6ef/comments", "author": null, "committer": null, "parents": [{"sha": "0adef32bee4f98513acb41813bba4f70bda7a050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0adef32bee4f98513acb41813bba4f70bda7a050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0adef32bee4f98513acb41813bba4f70bda7a050"}], "stats": {"total": 543, "additions": 404, "deletions": 139}, "files": [{"sha": "bbf7cd5f73e477008d35eeb18bccfcbce449a091", "filename": "gcc/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c921bad8770c0e3d8220131c51097b0fb953e6ef", "patch": "@@ -1,3 +1,72 @@\n+2008-10-13  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+            Kaushal Kantawala <Kaushal_Kantawala@playstation.sony.com>\n+            Trevor Smigiel  <Trevor_Smigiel@playstation.sony.com>\n+            Grace Cao  <grace_cao@playstation.sony.com>\n+\n+\t* doc/invoke.texi (-mgen-cell-microcode): Document.\n+\t(-mwarn-cell-microcode): Document.\n+\t* cfglayout.c (locator_location): Export.\n+\t* rtl.h (locator_location): Define prototype.\n+\t* config/rs6000/predicates.md (cc_reg_not_micro_cr0_operand): New predicate.\n+\t* rs6000/rs6000-protos.h (rs6000_final_prescan_insn): Define prototype.\n+\t* config/rs6000/rs6000.opt (mgen-cell-microcode): New option.\n+\t(mwarn-cell-microcode): New option.\n+\t* rs6000/rs6000.c (rs6000_cell_dont_microcode): Delete unused variable.\n+\t(rs6000_override_options): Set rs6000_gen_cell_microcode if tuning for\n+\tcell and not already set.\n+\tTurn off string instructions if not generating cell microcode.\n+\t(rs6000_final_prescan_insn): New function that warns about microcoded\n+\tinstructions.\n+\t* config/rs6000/rs6000.h (FINAL_PRESCAN_INSN): Define.\n+\t* config/rs6000/rs6000.md\n+\tReplace cc_reg_not_cr0_operand with cc_reg_not_micro_cr0_operand if\n+\tthe instruction would have been microcoded on the Cell.\n+\tSet cell_micro to always on unnamed patterns for the string instructions.\n+\t(cell_micro): Update definition, remove load/store conditional microcoded.\n+\t(sign_extend:DI): Define new pattern for non microcoded version.\n+\t(sign_extend:SI): Likewise.\n+\t(compare (div:P)): Set cell_micro to not.\n+\t(andsi3): Define as an expand.\n+\t(andsi3_mc): New pattern.\n+\t(andsi3_nomc): New pattern.\n+\t(andsi3_internal0_nomc): New pattern.\n+\t(andsi3_internal2): Rename to ...\n+\t(andsi3_internal2_mc): this and enable iff generating microcode.\n+\t(andsi3_internal3): Rename to ...\n+\t(andsi3_internal3_mc): this and enable iff generating microcode.\n+\t(andsi3_internal4): Enable iif generating microcode.\n+\t(andsi3_internal5): Rename to ..\n+\t(andsi3_internal5_mc): this and enable iff generating microcode.\n+\t(andsi3_internal5_nomc): New pattern.\n+\t(extzvdi_internal1): Enable iff generating microcode.\n+\t(extzvdi_internal2): Likewise.\n+\t(rotlsi3_internal7): Set cell_micro to always if non immediate form.\n+\t(anddi3): Change to expand.\n+\t(anddi3_mc): Rename from anddi3.\n+\t(anddi3_no_mc): New pattern.\n+\t(anddi3_internal2): Rename to ..\n+\t(anddi3_internal2_mc): this and enable iff generating microcode.\n+\t(anddi3_internal2_nomc): New pattern.\n+\t(anddi3_internal3): Rename to ..\n+\t(anddi3_internal3_mc): this and enable iff generating microcode.\n+\t(anddi3_internal3_nomc): New pattern.\n+\t(movti_string): Set cell_micro to always if TARGET_STRING.\n+\t(stmsi8): Set cell_micro to always.\n+\t(stmsi7): Likewise.\n+\t(stmsi6): Likewise.\n+\t(stmsi5): Likewise.\n+\t(stmsi4): Likewise.\n+\t(stmsi3): Likewise.\n+\t(stmsi8_power): Likewise.\n+\t(stmsi7_power): Likewise.\n+\t(stmsi6_power): Likewise.\n+\t(stmsi5_power): Likewise.\n+\t(stmsi4_power): Likewise.\n+\t(stmsi3_power): Likewise.\n+\t(movsi_update2): Enable iff generating microcode.\n+\t(movhi_update3): Likewise.\n+\t(lmw): Set cell_micro to always.\n+\n 2008-10-13  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/s390/s390.md (UNSPEC_POOL_OFFSET): New constant."}, {"sha": "27eb029d076688b67bdd35dc439d377aa6329f90", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=c921bad8770c0e3d8220131c51097b0fb953e6ef", "patch": "@@ -495,7 +495,7 @@ insn_scope (const_rtx insn)\n }\n \n /* Return line number of the statement specified by the locator.  */\n-static location_t\n+location_t\n locator_location (int loc)\n {\n   int max = VEC_length (int, locations_locators_locs);"}, {"sha": "a04a7d8cdbd20a144a9c45c1b4c84272097065ba", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=c921bad8770c0e3d8220131c51097b0fb953e6ef", "patch": "@@ -104,6 +104,14 @@\n \t\t     || REGNO (op) > LAST_VIRTUAL_REGISTER\n \t\t     || CR_REGNO_NOT_CR0_P (REGNO (op))\")))\n \n+;; Return 1 if op is a register that is a condition register field and if generating microcode, not cr0.\n+(define_predicate \"cc_reg_not_micro_cr0_operand\"\n+   (and (match_operand 0 \"register_operand\")\n+\t(match_test \"GET_CODE (op) != REG\n+\t\t     || REGNO (op) > LAST_VIRTUAL_REGISTER\n+\t\t     || (rs6000_gen_cell_microcode && CR_REGNO_NOT_CR0_P (REGNO (op)))\n+\t\t     || (!rs6000_gen_cell_microcode && CR_REGNO_P (REGNO (op)))\")))\n+\n ;; Return 1 if op is a constant integer valid for D field\n ;; or non-special register register.\n (define_predicate \"reg_or_short_operand\""}, {"sha": "0c5b11122b161ddd34b4400b211cde90613accc9", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=c921bad8770c0e3d8220131c51097b0fb953e6ef", "patch": "@@ -181,5 +181,7 @@ extern void rs6000_cpu_cpp_builtins (struct cpp_reader *);\n char *output_call (rtx, rtx *, int, int);\n #endif\n \n+void rs6000_final_prescan_insn (rtx, rtx *operand, int num_operands);\n+\n extern bool rs6000_hard_regno_mode_ok_p[][FIRST_PSEUDO_REGISTER];\n #endif  /* rs6000-protos.h */"}, {"sha": "05f4e26ea53c8415c168238bd778bbc0b2241ad7", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c921bad8770c0e3d8220131c51097b0fb953e6ef", "patch": "@@ -143,8 +143,6 @@ struct rs6000_cpu_select rs6000_select[3] =\n   { (const char *)0,\t\"-mtune=\",\t\t1,\t0 },\n };\n \n-static GTY(()) bool rs6000_cell_dont_microcode;\n-\n /* Always emit branch hint bits.  */\n static GTY(()) bool rs6000_always_hint;\n \n@@ -1609,9 +1607,16 @@ rs6000_override_options (const char *default_cpu)\n \terror (\"Spe not supported in this target\");\n     }\n \n+  /* Disable cell micro code if we are optimizing for the cell\n+     and not optimizing for size.  */\n+  if (rs6000_gen_cell_microcode == -1)\n+    rs6000_gen_cell_microcode = !(rs6000_cpu == PROCESSOR_CELL\n+                                  && !optimize_size);\n+\n   /* If we are optimizing big endian systems for space, use the load/store\n-     multiple and string instructions.  */\n-  if (BYTES_BIG_ENDIAN && optimize_size)\n+     multiple and string instructions unless we are not generating\n+     Cell microcode.  */\n+  if (BYTES_BIG_ENDIAN && optimize_size && !rs6000_gen_cell_microcode)\n     target_flags |= ~target_flags_explicit & (MASK_MULTIPLE | MASK_STRING);\n \n   /* Don't allow -mmultiple or -mstring on little endian systems\n@@ -22794,4 +22799,31 @@ rs6000_stack_protect_fail (void)\n \t : default_external_stack_protect_fail ();\n }\n \n+void\n+rs6000_final_prescan_insn (rtx insn, rtx *operand ATTRIBUTE_UNUSED,\n+\t\t\t   int num_operands ATTRIBUTE_UNUSED)\n+{\n+  if (rs6000_warn_cell_microcode)\n+    {\n+      const char *temp;\n+      int insn_code_number = recog_memoized (insn);\n+      location_t location = locator_location (INSN_LOCATOR (insn));\n+\n+      /* Punt on insns we cannot recognize.  */\n+      if (insn_code_number < 0)\n+\treturn;\n+\n+      temp = get_insn_template (insn_code_number, insn);\n+\n+      if (get_attr_cell_micro (insn) == CELL_MICRO_ALWAYS)\n+\twarning_at (location, OPT_mwarn_cell_microcode,\n+\t\t    \"emitting microcode insn %s\\t[%s] #%d\",\n+\t\t    temp, insn_data[INSN_CODE (insn)].name, INSN_UID (insn)); \n+      else if (get_attr_cell_micro (insn) == CELL_MICRO_CONDITIONAL)\n+\twarning_at (location, OPT_mwarn_cell_microcode,\n+\t\t    \"emitting conditional microcode insn %s\\t[%s] #%d\",\n+\t\t    temp, insn_data[INSN_CODE (insn)].name, INSN_UID (insn));\n+    }\n+}\n+\n #include \"gt-rs6000.h\""}, {"sha": "5874f366681be62f0e13767c341bf6cbc1e90dd9", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c921bad8770c0e3d8220131c51097b0fb953e6ef", "patch": "@@ -1905,7 +1905,8 @@ do {\t\t\t\t\t\t\t\t\\\n /* Define this if some processing needs to be done immediately before\n    emitting code for an insn.  */\n \n-/* #define FINAL_PRESCAN_INSN(INSN,OPERANDS,NOPERANDS) */\n+#define FINAL_PRESCAN_INSN(INSN,OPERANDS,NOPERANDS) \\\n+  rs6000_final_prescan_insn (INSN, OPERANDS, NOPERANDS)\n \n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */"}, {"sha": "4a49a5b505d1f14d6ded4850b32307156e3dd1bf", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 267, "deletions": 133, "changes": 400, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c921bad8770c0e3d8220131c51097b0fb953e6ef", "patch": "@@ -143,19 +143,11 @@\n \n \n ;; If this instruction is microcoded on the CELL processor\n-; The default for load and stores is conditional\n-; The default for load extended and the recorded instructions is always microcoded\n+; The default for load extended, the recorded instructions and rotate/shifts by a variable is always microcoded\n (define_attr \"cell_micro\" \"not,conditional,always\"\n-  (if_then_else (ior (ior (eq_attr \"type\" \"load\")\n-                          (eq_attr \"type\" \"store\"))\n-                     (ior (eq_attr \"type\" \"fpload\")\n-                          (eq_attr \"type\" \"fpstore\")))\n-\t        (const_string \"conditional\")\n-                (if_then_else (ior (eq_attr \"type\" \"load_ext\")\n-\t\t\t\t   (ior (eq_attr \"type\" \"compare\")\n-\t\t\t\t        (eq_attr \"type\" \"delayed_compare\")))\n+ (if_then_else (eq_attr \"type\" \"compare,delayed_compare,imul_compare,lmul_compare,load_ext,load_ext_ux,var_shift_rotate,var_delayed_compare\")\n \t\t\t      (const_string \"always\")\n-                              (const_string \"not\"))))\n+                              (const_string \"not\")))\n \n \n (automata_option \"ndfa\")\n@@ -259,7 +251,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:DI (match_operand:QHSI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 2 \"\"))]\n@@ -285,7 +277,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:DI (match_operand:QHSI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n@@ -318,7 +310,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (sign_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 2 \"\"))]\n@@ -344,7 +336,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (sign_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n@@ -366,12 +358,19 @@\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(sign_extend:DI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r\")))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_POWERPC64 && rs6000_gen_cell_microcode\"\n   \"@\n    lha%U1%X1 %0,%1\n    extsh %0,%1\"\n   [(set_attr \"type\" \"load_ext,exts\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(sign_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_POWERPC64 && !rs6000_gen_cell_microcode\"\n+  \"extsh %0,%1\"\n+  [(set_attr \"type\" \"exts\")])\n+\n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC (sign_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"r,r\"))\n@@ -385,7 +384,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (sign_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 2 \"\"))]\n@@ -411,7 +410,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (sign_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n@@ -433,12 +432,19 @@\n (define_insn \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(sign_extend:DI (match_operand:SI 1 \"lwa_operand\" \"m,r\")))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_POWERPC64 && rs6000_gen_cell_microcode\"\n   \"@\n    lwa%U1%X1 %0,%1\n    extsw %0,%1\"\n   [(set_attr \"type\" \"load_ext,exts\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n+\t(sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))]\n+  \"TARGET_POWERPC64 && !rs6000_gen_cell_microcode\"\n+  \"extsw %0,%1\"\n+  [(set_attr \"type\" \"exts\")])\n+\n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n@@ -452,7 +458,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 2 \"\"))]\n@@ -478,7 +484,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n@@ -519,7 +525,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 2 \"\"))]\n@@ -545,7 +551,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n@@ -593,7 +599,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (sign_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 2 \"\"))]\n@@ -619,7 +625,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (sign_extend:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n@@ -686,7 +692,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:HI 2 \"\"))]\n@@ -712,7 +718,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (set (match_operand:HI 0 \"gpc_reg_operand\" \"\")\n@@ -760,7 +766,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (sign_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:HI 2 \"\"))]\n@@ -786,7 +792,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (sign_extend:HI (match_operand:QI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (set (match_operand:HI 0 \"gpc_reg_operand\" \"\")\n@@ -855,7 +861,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 2 \"\"))]\n@@ -881,7 +887,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n@@ -903,12 +909,19 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(sign_extend:SI (match_operand:HI 1 \"reg_or_mem_operand\" \"m,r\")))]\n-  \"\"\n+  \"rs6000_gen_cell_microcode\"\n   \"@\n    lha%U1%X1 %0,%1\n    {exts|extsh} %0,%1\"\n   [(set_attr \"type\" \"load_ext,exts\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (sign_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))]\n+  \"!rs6000_gen_cell_microcode\"\n+  \"{exts|extsh} %0,%1\"\n+  [(set_attr \"type\" \"exts\")])\n+\n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC (sign_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"r,r\"))\n@@ -922,7 +935,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (sign_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 2 \"\"))]\n@@ -1479,7 +1492,7 @@\n })\n \f\n (define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (sign_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n@@ -1662,7 +1675,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (not:P (match_operand:P 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:P 2 \"\"))]\n@@ -1688,7 +1701,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (not:P (match_operand:P 1 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (set (match_operand:P 0 \"gpc_reg_operand\" \"\")\n@@ -2343,7 +2356,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (mult:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n@@ -2403,7 +2416,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (mult:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n@@ -2595,7 +2608,8 @@\n    {srai|sra<wd>i} %3,%1,%p2\\;{aze.|addze.} %3,%3\n    #\"\n   [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"8,12\")])\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"cell_micro\" \"not\")])\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n@@ -2624,7 +2638,8 @@\n    {srai|sra<wd>i} %0,%1,%p2\\;{aze.|addze.} %0,%0\n    #\"\n   [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"8,12\")])\n+   (set_attr \"length\" \"8,12\")\n+   (set_attr \"cell_micro\" \"not\")])\n \n (define_split\n   [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n@@ -2818,31 +2833,60 @@\n ;; plain 'andi' (only 'andi.'), no plain 'andis', and there are all\n ;; those rotate-and-mask operations.  Thus, the AND insns come first.\n \n-(define_insn \"andsi3\"\n+(define_expand \"andsi3\"\n+  [(parallel\n+    [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+\t  (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n+\t\t  (match_operand:SI 2 \"and_operand\" \"\")))\n+     (clobber (match_scratch:CC 3 \"\"))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"andsi3_mc\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r\")\n \t\t(match_operand:SI 2 \"and_operand\" \"?r,T,K,L\")))\n    (clobber (match_scratch:CC 3 \"=X,X,x,x\"))]\n-  \"\"\n+  \"rs6000_gen_cell_microcode\"\n   \"@\n    and %0,%1,%2\n    {rlinm|rlwinm} %0,%1,0,%m2,%M2\n    {andil.|andi.} %0,%1,%b2\n    {andiu.|andis.} %0,%1,%u2\"\n   [(set_attr \"type\" \"*,*,compare,compare\")])\n \n+(define_insn \"andsi3_nomc\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+\t(and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n+\t\t(match_operand:SI 2 \"and_operand\" \"?r,T\")))\n+   (clobber (match_scratch:CC 3 \"=X,X\"))]\n+  \"!rs6000_gen_cell_microcode\"\n+  \"@\n+   and %0,%1,%2\n+   {rlinm|rlwinm} %0,%1,0,%m2,%M2\")\n+\n+(define_insn \"andsi3_internal0_nomc\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n+        (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n+                (match_operand:SI 2 \"and_operand\" \"?r,T\")))]\n+  \"!rs6000_gen_cell_microcode\"\n+  \"@\n+   and %0,%1,%2\n+   {rlinm|rlwinm} %0,%1,0,%m2,%M2\")\n+\n+\n ;; Note to set cr's other than cr0 we do the and immediate and then\n ;; the test again -- this avoids a mfcr which on the higher end\n ;; machines causes an execution serialization\n \n-(define_insn \"*andsi3_internal2\"\n+(define_insn \"*andsi3_internal2_mc\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,x,x,?y,??y,??y,?y\")\n \t(compare:CC (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r,r,r\")\n \t\t\t    (match_operand:SI 2 \"and_operand\" \"r,K,L,T,r,K,L,T\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r,r,r,r,r,r,r\"))\n    (clobber (match_scratch:CC 4 \"=X,X,X,X,X,x,x,X\"))]\n-  \"TARGET_32BIT\"\n+  \"TARGET_32BIT && rs6000_gen_cell_microcode\"\n   \"@\n    and. %3,%1,%2\n    {andil.|andi.} %3,%1,%b2\n@@ -2855,14 +2899,14 @@\n   [(set_attr \"type\" \"compare,compare,compare,delayed_compare,compare,compare,compare,compare\")\n    (set_attr \"length\" \"4,4,4,4,8,8,8,8\")])\n \n-(define_insn \"*andsi3_internal3\"\n+(define_insn \"*andsi3_internal3_mc\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,x,x,?y,??y,??y,?y\")\n \t(compare:CC (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r,r,r\")\n \t\t\t    (match_operand:SI 2 \"and_operand\" \"r,K,L,T,r,K,L,T\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r,r,r,r,r,r,r\"))\n    (clobber (match_scratch:CC 4 \"=X,X,X,X,X,x,x,X\"))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && rs6000_gen_cell_microcode\"\n   \"@\n    #\n    {andil.|andi.} %3,%1,%b2\n@@ -2876,7 +2920,7 @@\n    (set_attr \"length\" \"8,4,4,4,8,8,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (and:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n \t\t\t     (match_operand:GPR 2 \"and_operand\" \"\"))\n \t\t    (const_int 0)))\n@@ -2921,7 +2965,7 @@\n \t(and:SI (match_dup 1)\n \t\t(match_dup 2)))\n    (clobber (match_scratch:CC 4 \"=X,X,X,X,X,x,x,X\"))]\n-  \"TARGET_32BIT\"\n+  \"TARGET_32BIT && rs6000_gen_cell_microcode\"\n   \"@\n    and. %0,%1,%2\n    {andil.|andi.} %0,%1,%b2\n@@ -2934,7 +2978,7 @@\n   [(set_attr \"type\" \"compare,compare,compare,delayed_compare,compare,compare,compare,compare\")\n    (set_attr \"length\" \"4,4,4,4,8,8,8,8\")])\n \n-(define_insn \"*andsi3_internal5\"\n+(define_insn \"*andsi3_internal5_mc\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,x,x,?y,??y,??y,?y\")\n \t(compare:CC (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r,r,r\")\n \t\t\t    (match_operand:SI 2 \"and_operand\" \"r,K,L,T,r,K,L,T\"))\n@@ -2943,7 +2987,7 @@\n \t(and:SI (match_dup 1)\n \t\t(match_dup 2)))\n    (clobber (match_scratch:CC 4 \"=X,X,X,X,X,x,x,X\"))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && rs6000_gen_cell_microcode\"\n   \"@\n    #\n    {andil.|andi.} %0,%1,%b2\n@@ -2956,8 +3000,22 @@\n   [(set_attr \"type\" \"compare,compare,compare,delayed_compare,compare,compare,compare,compare\")\n    (set_attr \"length\" \"8,4,4,4,8,8,8,8\")])\n \n+(define_insn \"*andsi3_internal5_nomc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y,??y,??y,?y\")\n+        (compare:CC (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n+                            (match_operand:SI 2 \"and_operand\" \"r,r,K,L,T\"))\n+                    (const_int 0)))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n+        (and:SI (match_dup 1)\n+                (match_dup 2)))\n+   (clobber (match_scratch:CC 4 \"=X,X,x,x,X\"))]\n+  \"TARGET_64BIT && !rs6000_gen_cell_microcode\"\n+  \"#\"\n+  [(set_attr \"type\" \"compare\")\n+   (set_attr \"length\" \"8,8,8,8,8\")])\n+\n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (and:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t    (match_operand:SI 2 \"and_operand\" \"\"))\n \t\t    (const_int 0)))\n@@ -3088,7 +3146,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n \t [(match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t  (match_operand:SI 2 \"gpc_reg_operand\" \"\")])\n@@ -3117,7 +3175,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n \t [(match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t  (match_operand:SI 2 \"gpc_reg_operand\" \"\")])\n@@ -3176,7 +3234,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n \t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n \t  (match_operand:SI 2 \"gpc_reg_operand\" \"\")])\n@@ -3205,7 +3263,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n \t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n \t  (match_operand:SI 2 \"gpc_reg_operand\" \"\")])\n@@ -3242,7 +3300,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n \t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n \t  (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"\"))])\n@@ -3271,7 +3329,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n \t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n \t  (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"\"))])\n@@ -3778,7 +3836,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extract:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"\"))\n@@ -3829,7 +3887,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 4 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extract:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"\"))\n@@ -3870,7 +3928,7 @@\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 4 \"=r\"))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && rs6000_gen_cell_microcode\"\n   \"*\n {\n   int start = INTVAL (operands[3]) & 63;\n@@ -3893,7 +3951,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(zero_extract:DI (match_dup 1) (match_dup 2) (match_dup 3)))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && rs6000_gen_cell_microcode\"\n   \"*\n {\n   int start = INTVAL (operands[3]) & 63;\n@@ -3934,7 +3992,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n \t\t    (const_int 0)))\n@@ -3964,7 +4022,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n \t\t    (const_int 0)))\n@@ -4007,7 +4065,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (and:SI\n \t\t     (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n@@ -4043,7 +4101,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 4 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (and:SI\n \t\t     (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n@@ -4066,7 +4124,11 @@\n \t  (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\")) 0)))]\n   \"\"\n-  \"{rl%I2nm|rlw%I2nm} %0,%1,%h2,0xff\")\n+  \"{rl%I2nm|rlw%I2nm} %0,%1,%h2,0xff\"\n+  [(set (attr \"cell_micro\")\n+     (if_then_else (match_operand:SI 2 \"const_int_operand\" \"\")\n+\t(const_string \"not\")\n+\t(const_string \"always\")))])\n \n (define_insn \"*rotlsi3_internal8\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n@@ -4086,7 +4148,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:SI\n \t\t     (subreg:QI\n \t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n@@ -4122,7 +4184,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:SI\n \t\t     (subreg:QI\n \t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n@@ -4169,7 +4231,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:SI\n \t\t     (subreg:HI\n \t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n@@ -4205,7 +4267,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:SI\n \t\t     (subreg:HI\n \t\t      (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n@@ -4408,7 +4470,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (and:SI (ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t    (match_operand:SI 2 \"const_int_operand\" \"\"))\n@@ -4441,7 +4503,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 4 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (and:SI (ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t    (match_operand:SI 2 \"const_int_operand\" \"\"))\n@@ -4653,7 +4715,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (and:SI (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t      (match_operand:SI 2 \"const_int_operand\" \"\"))\n@@ -4686,7 +4748,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 4 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (and:SI (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t      (match_operand:SI 2 \"const_int_operand\" \"\"))\n@@ -4728,7 +4790,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (zero_extend:SI\n \t  (subreg:QI\n@@ -4764,7 +4826,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (zero_extend:SI\n \t  (subreg:QI\n@@ -4807,7 +4869,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (zero_extend:SI\n \t  (subreg:HI\n@@ -4843,7 +4905,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (zero_extend:SI\n \t  (subreg:HI\n@@ -4971,7 +5033,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n \t\t    (const_int 0)))\n@@ -5035,7 +5097,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \f\n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n \t\t    (const_int 0)))\n@@ -6683,7 +6745,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (mult:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t     (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n@@ -6747,7 +6809,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t       (match_operand:DI 2 \"reg_or_cint_operand\" \"\"))\n \t\t    (const_int 0)))\n@@ -6777,7 +6839,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t       (match_operand:DI 2 \"reg_or_cint_operand\" \"\"))\n \t\t    (const_int 0)))\n@@ -6820,7 +6882,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (and:DI\n \t\t     (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t\t(match_operand:DI 2 \"reg_or_cint_operand\" \"\"))\n@@ -6856,7 +6918,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 4 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (and:DI\n \t\t     (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t\t(match_operand:DI 2 \"reg_or_cint_operand\" \"\"))\n@@ -6902,7 +6964,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:DI\n \t\t     (subreg:QI\n \t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n@@ -6938,7 +7000,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:DI\n \t\t     (subreg:QI\n \t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n@@ -6984,7 +7046,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:DI\n \t\t     (subreg:HI\n \t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n@@ -7020,7 +7082,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:DI\n \t\t     (subreg:HI\n \t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n@@ -7066,7 +7128,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:DI\n \t\t     (subreg:SI\n \t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n@@ -7102,7 +7164,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (zero_extend:DI\n \t\t     (subreg:SI\n \t\t      (rotate:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n@@ -7230,7 +7292,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (and:DI (ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t    (match_operand:SI 2 \"const_int_operand\" \"\"))\n@@ -7264,7 +7326,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 4 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (and:DI (ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t    (match_operand:SI 2 \"const_int_operand\" \"\"))\n@@ -7306,7 +7368,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (and:DI (ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t    (match_operand:SI 2 \"const_int_operand\" \"\"))\n@@ -7340,7 +7402,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 4 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (and:DI (ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t    (match_operand:SI 2 \"const_int_operand\" \"\"))\n@@ -7402,7 +7464,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (lshiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n \t\t    (const_int 0)))\n@@ -7432,7 +7494,7 @@\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (lshiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n \t\t    (const_int 0)))\n@@ -7540,12 +7602,21 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"anddi3\"\n+(define_expand \"anddi3\"\n+  [(parallel\n+    [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n+\t  (and:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n+\t\t  (match_operand:DI 2 \"and64_2_operand\" \"\")))\n+     (clobber (match_scratch:CC 3 \"\"))])]\n+  \"TARGET_POWERPC64\"\n+  \"\")\n+\n+(define_insn \"anddi3_mc\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r,r,r\")\n \t(and:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r\")\n \t\t(match_operand:DI 2 \"and64_2_operand\" \"?r,S,T,K,J,t\")))\n    (clobber (match_scratch:CC 3 \"=X,X,X,x,x,X\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_POWERPC64 && rs6000_gen_cell_microcode\"\n   \"@\n    and %0,%1,%2\n    rldic%B2 %0,%1,0,%S2\n@@ -7556,6 +7627,19 @@\n   [(set_attr \"type\" \"*,*,*,compare,compare,*\")\n    (set_attr \"length\" \"4,4,4,4,4,8\")])\n \n+(define_insn \"anddi3_nomc\"\n+  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n+\t(and:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,r,r\")\n+\t\t(match_operand:DI 2 \"and64_2_operand\" \"?r,S,T,t\")))\n+   (clobber (match_scratch:CC 3 \"=X,X,X,X\"))]\n+  \"TARGET_POWERPC64 && !rs6000_gen_cell_microcode\"\n+  \"@\n+   and %0,%1,%2\n+   rldic%B2 %0,%1,0,%S2\n+   rlwinm %0,%1,0,%m2,%M2\n+   #\"\n+  [(set_attr \"length\" \"4,4,4,8\")])\n+\n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(and:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n@@ -7577,14 +7661,14 @@\n   build_mask64_2_operands (operands[2], &operands[4]);\n })\n \n-(define_insn \"*anddi3_internal2\"\n+(define_insn \"*anddi3_internal2_mc\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,x,x,x,x,?y,?y,?y,??y,??y,?y\")\n \t(compare:CC (and:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r,r,r,r,r,r,r\")\n \t\t\t    (match_operand:DI 2 \"and64_2_operand\" \"r,S,T,K,J,t,r,S,T,K,J,t\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=r,r,r,r,r,r,r,r,r,r,r,r\"))\n    (clobber (match_scratch:CC 4 \"=X,X,X,X,X,X,X,X,X,x,x,X\"))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && rs6000_gen_cell_microcode\"\n   \"@\n    and. %3,%1,%2\n    rldic%B2. %3,%1,0,%S2\n@@ -7601,6 +7685,18 @@\n   [(set_attr \"type\" \"compare,compare,delayed_compare,compare,compare,compare,compare,compare,compare,compare,compare,compare\")\n    (set_attr \"length\" \"4,4,4,4,4,8,8,8,8,8,8,12\")])\n \n+(define_insn \"*anddi3_internal2_nomc\"\n+  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y,?y,??y,??y,?y\")\n+\t(compare:CC (and:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r\")\n+\t\t\t    (match_operand:DI 2 \"and64_2_operand\" \"t,r,S,K,J,t\"))\n+\t\t    (const_int 0)))\n+   (clobber (match_scratch:DI 3 \"=r,r,r,r,r,r\"))\n+   (clobber (match_scratch:CC 4 \"=X,X,X,x,x,X\"))]\n+  \"TARGET_64BIT && !rs6000_gen_cell_microcode\"\n+  \"#\"\n+  [(set_attr \"type\" \"delayed_compare,compare,compare,compare,compare,compare\")\n+   (set_attr \"length\" \"8,8,8,8,8,12\")])\n+\n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"\")\n         (compare:CC (and:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n@@ -7627,15 +7723,15 @@\n   build_mask64_2_operands (operands[2], &operands[5]);\n }\")\n \n-(define_insn \"*anddi3_internal3\"\n+(define_insn \"*anddi3_internal3_mc\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,x,x,x,x,?y,?y,?y,??y,??y,?y\")\n \t(compare:CC (and:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r,r,r,r,r,r,r\")\n \t\t\t    (match_operand:DI 2 \"and64_2_operand\" \"r,S,T,K,J,t,r,S,T,K,J,t\"))\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r,r,r,r,r,r,r,r,r\")\n \t(and:DI (match_dup 1) (match_dup 2)))\n    (clobber (match_scratch:CC 4 \"=X,X,X,X,X,X,X,X,X,x,x,X\"))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && rs6000_gen_cell_microcode\"\n   \"@\n    and. %0,%1,%2\n    rldic%B2. %0,%1,0,%S2\n@@ -7652,8 +7748,20 @@\n   [(set_attr \"type\" \"compare,compare,delayed_compare,compare,compare,compare,compare,compare,compare,compare,compare,compare\")\n    (set_attr \"length\" \"4,4,4,4,4,8,8,8,8,8,8,12\")])\n \n+(define_insn \"*anddi3_internal3_nomc\"\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y,?y,??y,??y,?y\")\n+\t(compare:CC (and:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,r,r,r,r\")\n+\t\t\t    (match_operand:DI 2 \"and64_2_operand\" \"t,r,S,K,J,t\"))\n+\t\t    (const_int 0)))\n+   (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r,r,r\")\n+\t(and:DI (match_dup 1) (match_dup 2)))\n+   (clobber (match_scratch:CC 4 \"=X,X,X,x,x,X\"))]\n+  \"TARGET_64BIT  && !rs6000_gen_cell_microcode\"\n+  \"#\"\n+  [(set_attr \"type\" \"delayed_compare,compare,compare,compare,compare,compare\")\n+   (set_attr \"length\" \"8,8,8,8,8,12\")])\n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (and:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t    (match_operand:DI 2 \"and64_2_operand\" \"\"))\n \t\t    (const_int 0)))\n@@ -7793,7 +7901,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n \t [(match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t  (match_operand:DI 2 \"gpc_reg_operand\" \"\")])\n@@ -7822,7 +7930,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n \t [(match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t  (match_operand:DI 2 \"gpc_reg_operand\" \"\")])\n@@ -7893,7 +8001,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n \t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n \t  (match_operand:DI 2 \"gpc_reg_operand\" \"\")])\n@@ -7922,7 +8030,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n \t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n \t  (match_operand:DI 2 \"gpc_reg_operand\" \"\")])\n@@ -7959,7 +8067,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n \t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n \t  (not:DI (match_operand:DI 2 \"gpc_reg_operand\" \"\"))])\n@@ -7988,7 +8096,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n \t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n \t  (not:DI (match_operand:DI 2 \"gpc_reg_operand\" \"\"))])\n@@ -8129,7 +8237,7 @@\n    (set_attr \"length\" \"4,4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 2 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 2 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (match_operand:P 1 \"gpc_reg_operand\" \"\")\n \t\t    (const_int 0)))\n    (set (match_operand:P 0 \"gpc_reg_operand\" \"\") (match_dup 1))]\n@@ -9160,7 +9268,10 @@\n       return \\\"#\\\";\n     }\n }\"\n-  [(set_attr \"type\" \"store_ux,store_ux,*,load_ux,load_ux,*\")])\n+  [(set_attr \"type\" \"store_ux,store_ux,*,load_ux,load_ux,*\")\n+   (set (attr \"cell_micro\") (if_then_else (eq (symbol_ref \"TARGET_STRING\") (const_int 1))\n+   \t\t\t                  (const_string \"always\")\n+\t\t\t\t\t  (const_string \"conditional\")))])\n \n (define_insn \"*movti_ppc64\"\n   [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=r,o<>,r\")\n@@ -9419,7 +9530,8 @@\n \t  (match_operand:SI 10 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && !TARGET_POWER && XVECLEN (operands[0], 0) == 9\"\n   \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")])\n+  [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi7\"\n   [(match_parallel 0 \"store_multiple_operation\"\n@@ -9440,7 +9552,8 @@\n \t  (match_operand:SI 9 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && !TARGET_POWER && XVECLEN (operands[0], 0) == 8\"\n   \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")])\n+  [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi6\"\n   [(match_parallel 0 \"store_multiple_operation\"\n@@ -9459,7 +9572,8 @@\n \t  (match_operand:SI 8 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && !TARGET_POWER && XVECLEN (operands[0], 0) == 7\"\n   \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")])\n+  [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi5\"\n   [(match_parallel 0 \"store_multiple_operation\"\n@@ -9476,7 +9590,8 @@\n \t  (match_operand:SI 7 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && !TARGET_POWER && XVECLEN (operands[0], 0) == 6\"\n   \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")])\n+  [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi4\"\n   [(match_parallel 0 \"store_multiple_operation\"\n@@ -9491,7 +9606,8 @@\n \t  (match_operand:SI 6 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && !TARGET_POWER && XVECLEN (operands[0], 0) == 5\"\n   \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")])\n+  [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi3\"\n   [(match_parallel 0 \"store_multiple_operation\"\n@@ -9504,7 +9620,8 @@\n \t  (match_operand:SI 5 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && !TARGET_POWER && XVECLEN (operands[0], 0) == 4\"\n   \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")])\n+  [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi8_power\"\n   [(match_parallel 0 \"store_multiple_operation\"\n@@ -9527,7 +9644,8 @@\n \t  (match_operand:SI 10 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && TARGET_POWER && XVECLEN (operands[0], 0) == 9\"\n   \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")])\n+  [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi7_power\"\n   [(match_parallel 0 \"store_multiple_operation\"\n@@ -9548,7 +9666,8 @@\n \t  (match_operand:SI 9 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && TARGET_POWER && XVECLEN (operands[0], 0) == 8\"\n   \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")])\n+  [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi6_power\"\n   [(match_parallel 0 \"store_multiple_operation\"\n@@ -9567,7 +9686,8 @@\n \t  (match_operand:SI 8 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && TARGET_POWER && XVECLEN (operands[0], 0) == 7\"\n   \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")])\n+  [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi5_power\"\n   [(match_parallel 0 \"store_multiple_operation\"\n@@ -9584,7 +9704,8 @@\n \t  (match_operand:SI 7 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && TARGET_POWER && XVECLEN (operands[0], 0) == 6\"\n   \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")])\n+  [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi4_power\"\n   [(match_parallel 0 \"store_multiple_operation\"\n@@ -9599,7 +9720,8 @@\n \t  (match_operand:SI 6 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && TARGET_POWER && XVECLEN (operands[0], 0) == 5\"\n   \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")])\n+  [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*stmsi3_power\"\n   [(match_parallel 0 \"store_multiple_operation\"\n@@ -9612,7 +9734,8 @@\n \t  (match_operand:SI 5 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && TARGET_POWER && XVECLEN (operands[0], 0) == 4\"\n   \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")])\n+  [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")])\n \f\n (define_expand \"setmemsi\"\n   [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n@@ -9694,6 +9817,7 @@\n    && REGNO (operands[4]) == 5\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n@@ -9718,6 +9842,7 @@\n    && REGNO (operands[4]) == 5\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n \n ;; Move up to 24 bytes at a time.  The fixed registers are needed because the\n@@ -9757,6 +9882,7 @@\n    && REGNO (operands[4]) == 5\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n@@ -9778,6 +9904,7 @@\n    && REGNO (operands[4]) == 5\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n \n ;; Move up to 16 bytes at a time, using 4 fixed registers to avoid spill\n@@ -9813,6 +9940,7 @@\n    && REGNO (operands[4]) == 5\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n@@ -9832,6 +9960,7 @@\n    && REGNO (operands[4]) == 5\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n \n ;; Move up to 8 bytes at a time.\n@@ -9856,6 +9985,7 @@\n    && INTVAL (operands[2]) > 4 && INTVAL (operands[2]) <= 8\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n@@ -9869,6 +9999,7 @@\n    && INTVAL (operands[2]) > 4 && INTVAL (operands[2]) <= 8\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n \n ;; Move up to 4 bytes at a time.\n@@ -9893,6 +10024,7 @@\n    && INTVAL (operands[2]) > 0 && INTVAL (operands[2]) <= 4\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n@@ -9906,6 +10038,7 @@\n    && INTVAL (operands[2]) > 0 && INTVAL (operands[2]) <= 4\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n+   (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n \f\n ;; Define insns that do load or store with update.  Some of these we can\n@@ -9960,7 +10093,7 @@\n \t\t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=b\")\n \t(plus:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_POWERPC64 && rs6000_gen_cell_microcode\"\n   \"lwaux %3,%0,%2\"\n   [(set_attr \"type\" \"load_ext_ux\")])\n \n@@ -10008,7 +10141,7 @@\n \t\t\t  (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=b,b\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_UPDATE\"\n+  \"TARGET_UPDATE && rs6000_gen_cell_microcode\"\n   \"@\n    lhaux %3,%0,%2\n    lhau %3,%2(%0)\"\n@@ -12208,7 +12341,7 @@\n    (set_attr \"length\" \"8,16\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (ashift:SI (match_operator:SI 1 \"scc_comparison_operator\"\n \t\t\t\t       [(match_operand 2 \"cc_reg_operand\" \"\")\n@@ -12618,7 +12751,7 @@\n    (set_attr \"length\" \"8,12\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (plus:DI (lshiftrt:DI\n \t\t   (neg:DI (abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")))\n@@ -12697,7 +12830,7 @@\n    (set_attr \"length\" \"8,12\")])\n \n (define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 4 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (plus:DI (lshiftrt:DI\n \t\t   (neg:DI (abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")))\n@@ -13405,7 +13538,7 @@\n    (set_attr \"length\" \"12,12,16,16\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (geu:P (match_operand:P 1 \"gpc_reg_operand\" \"\")\n \t\t(match_operand:P 2 \"reg_or_neg_short_operand\" \"\"))\n@@ -13695,7 +13828,7 @@\n    (set_attr \"length\" \"12,16\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (plus:DI (gt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t (const_int 0))\n@@ -13761,7 +13894,7 @@\n    (set_attr \"length\" \"12,16\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC\n \t (plus:DI (gt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t\t (const_int 0))\n@@ -14562,7 +14695,8 @@\n        \t\t\t (match_operand:SI 2 \"memory_operand\" \"m\"))])]\n   \"TARGET_MULTIPLE\"\n   \"{lm|lmw} %1,%2\"\n-  [(set_attr \"type\" \"load_ux\")])\n+  [(set_attr \"type\" \"load_ux\")\n+   (set_attr \"cell_micro\" \"always\")])\n \n (define_insn \"*return_internal_<mode>\"\n   [(return)"}, {"sha": "0dc67b781267de9be081110c120ea79090282668", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=c921bad8770c0e3d8220131c51097b0fb953e6ef", "patch": "@@ -233,6 +233,14 @@ mlongcall\n Target Report Var(rs6000_default_long_calls)\n Avoid all range limits on call instructions\n \n+mgen-cell-microcode\n+Target Report Var(rs6000_gen_cell_microcode) Init(-1)\n+Generate Cell microcode\n+\n+mwarn-cell-microcode\n+Target Var(rs6000_warn_cell_microcode) Init(0) Warning\n+Emitting warning when a Cell microcode is emitted\n+\n mwarn-altivec-long\n Target Var(rs6000_warn_altivec_long) Init(1)\n Warn about deprecated 'vector long ...' AltiVec type usage"}, {"sha": "c05ced46d4002599180685218496dcead773ea3c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c921bad8770c0e3d8220131c51097b0fb953e6ef", "patch": "@@ -735,6 +735,7 @@ See RS/6000 and PowerPC Options.\n -mspe -mno-spe @gol\n -mspe=yes  -mspe=no @gol\n -mpaired @gol\n+-mgen-cell-microcode -mwarn-cell-microcode @gol\n -mvrsave -mno-vrsave @gol\n -mmulhw -mno-mulhw @gol\n -mdlmzb -mno-dlmzb @gol\n@@ -13490,6 +13491,15 @@ enhancements.\n @opindex mno-vrsave\n Generate VRSAVE instructions when generating AltiVec code.\n \n+@item -mgen-cell-microcode\n+@opindex mgen-cell-microcode\n+Generate Cell microcode instructions\n+\n+@item -mwarn-cell-microcode\n+@opindex mwarn-cell-microcode\n+Warning when a Cell microcode instruction is going to emitted.  An example\n+of a Cell microcode instruction is a variable shift.\n+\n @item -msecure-plt\n @opindex msecure-plt\n Generate code that allows ld and ld.so to build executables and shared"}, {"sha": "5bd79053c1db2e07403bcff1f149186decd6d5d1", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c921bad8770c0e3d8220131c51097b0fb953e6ef/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c921bad8770c0e3d8220131c51097b0fb953e6ef", "patch": "@@ -1637,6 +1637,7 @@ extern rtx prev_cc0_setter (rtx);\n /* In cfglayout.c  */\n extern int insn_line (const_rtx);\n extern const char * insn_file (const_rtx);\n+extern location_t locator_location (int);\n extern int locator_line (int);\n extern const char * locator_file (int);\n extern bool locator_eq (int, int);"}]}