{"sha": "65d512d10ecd585b72a099c54453831c40d2e4f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVkNTEyZDEwZWNkNTg1YjcyYTA5OWM1NDQ1MzgzMWM0MGQyZTRmNw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2012-05-03T21:47:45Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2012-05-03T21:47:45Z"}, "message": "re PR target/53199 (__builtin_bswap64 and __builtin_bswap32 generate errors if -mcpu=power6)\n\n[gcc]\n2012-05-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/53199\n\t* config/rs6000/rs6000.md (bswapdi splitters): If\n\t-mavoid-indexed-addresses (or -mcpu=power6 which sets it by\n\tdefault) is used, generate an alternate sequence that does not\n\tdepend on using indexed addressing.\n\n[gcc/testsuite]\n2012-05-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/53199\n\t* gcc.target/powwerpc/pr53199.c: New file.\n\nFrom-SVN: r187119", "tree": {"sha": "f95f0c0eb5ac8d733e0695c53536f1397049d0b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f95f0c0eb5ac8d733e0695c53536f1397049d0b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65d512d10ecd585b72a099c54453831c40d2e4f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65d512d10ecd585b72a099c54453831c40d2e4f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65d512d10ecd585b72a099c54453831c40d2e4f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65d512d10ecd585b72a099c54453831c40d2e4f7/comments", "author": null, "committer": null, "parents": [{"sha": "88f4f86ff03dce4b72a0dbc7366e8469d894b711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88f4f86ff03dce4b72a0dbc7366e8469d894b711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88f4f86ff03dce4b72a0dbc7366e8469d894b711"}], "stats": {"total": 115, "additions": 111, "deletions": 4}, "files": [{"sha": "8907303684d60e74dfb6f524d4206c82613fcfed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d512d10ecd585b72a099c54453831c40d2e4f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d512d10ecd585b72a099c54453831c40d2e4f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65d512d10ecd585b72a099c54453831c40d2e4f7", "patch": "@@ -1,3 +1,11 @@\n+2012-05-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/53199\n+\t* config/rs6000/rs6000.md (bswapdi splitters): If\n+\t-mavoid-indexed-addresses (or -mcpu=power6 which sets it by\n+\tdefault) is used, generate an alternate sequence that does not\n+\tdepend on using indexed addressing.\n+\n 2012-05-03  Jason Merrill  <jason@redhat.com>\n \n \t* gengtype.c (write_types): Fix warning message."}, {"sha": "78e56030b049e5f16b6a2b4c24bcb1d1febd3721", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d512d10ecd585b72a099c54453831c40d2e4f7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d512d10ecd585b72a099c54453831c40d2e4f7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=65d512d10ecd585b72a099c54453831c40d2e4f7", "patch": "@@ -2550,7 +2550,18 @@\n   if (GET_CODE (addr1) == PLUS)\n     {\n       emit_insn (gen_add3_insn (op2, XEXP (addr1, 0), GEN_INT (4)));\n-      addr2 = gen_rtx_PLUS (Pmode, op2, XEXP (addr1, 1));\n+      if (TARGET_AVOID_XFORM)\n+\t{\n+\t  emit_insn (gen_add3_insn (op2, XEXP (addr1, 1), op2));\n+\t  addr2 = op2;\n+\t}\n+      else\n+\taddr2 = gen_rtx_PLUS (Pmode, op2, XEXP (addr1, 1));\n+    }\n+  else if (TARGET_AVOID_XFORM)\n+    {\n+      emit_insn (gen_add3_insn (op2, addr1, GEN_INT (4)));\n+      addr2 = op2;\n     }\n   else\n     {\n@@ -2600,7 +2611,18 @@\n   if (GET_CODE (addr1) == PLUS)\n     {\n       emit_insn (gen_add3_insn (op2, XEXP (addr1, 0), GEN_INT (4)));\n-      addr2 = gen_rtx_PLUS (Pmode, op2, XEXP (addr1, 1));\n+      if (TARGET_AVOID_XFORM)\n+\t{\n+\t  emit_insn (gen_add3_insn (op2, XEXP (addr1, 1), op2));\n+\t  addr2 = op2;\n+\t}\n+      else\n+\taddr2 = gen_rtx_PLUS (Pmode, op2, XEXP (addr1, 1));\n+    }\n+  else if (TARGET_AVOID_XFORM)\n+    {\n+      emit_insn (gen_add3_insn (op2, addr1, GEN_INT (4)));\n+      addr2 = op2;\n     }\n   else\n     {\n@@ -2681,7 +2703,18 @@\n   if (GET_CODE (addr1) == PLUS)\n     {\n       emit_insn (gen_add3_insn (op2, XEXP (addr1, 0), GEN_INT (4)));\n-      addr2 = gen_rtx_PLUS (SImode, op2, XEXP (addr1, 1));\n+      if (TARGET_AVOID_XFORM)\n+\t{\n+\t  emit_insn (gen_add3_insn (op2, XEXP (addr1, 1), op2));\n+\t  addr2 = op2;\n+\t}\n+      else\n+\taddr2 = gen_rtx_PLUS (SImode, op2, XEXP (addr1, 1));\n+    }\n+  else if (TARGET_AVOID_XFORM)\n+    {\n+      emit_insn (gen_add3_insn (op2, addr1, GEN_INT (4)));\n+      addr2 = op2;\n     }\n   else\n     {\n@@ -2726,7 +2759,18 @@\n   if (GET_CODE (addr1) == PLUS)\n     {\n       emit_insn (gen_add3_insn (op2, XEXP (addr1, 0), GEN_INT (4)));\n-      addr2 = gen_rtx_PLUS (SImode, op2, XEXP (addr1, 1));\n+      if (TARGET_AVOID_XFORM)\n+\t{\n+\t  emit_insn (gen_add3_insn (op2, XEXP (addr1, 1), op2));\n+\t  addr2 = op2;\n+\t}\n+      else\n+\taddr2 = gen_rtx_PLUS (SImode, op2, XEXP (addr1, 1));\n+    }\n+  else if (TARGET_AVOID_XFORM)\n+    {\n+      emit_insn (gen_add3_insn (op2, addr1, GEN_INT (4)));\n+      addr2 = op2;\n     }\n   else\n     {"}, {"sha": "0395dc725394b725e335366f3eaa37dc77c45c50", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d512d10ecd585b72a099c54453831c40d2e4f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d512d10ecd585b72a099c54453831c40d2e4f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65d512d10ecd585b72a099c54453831c40d2e4f7", "patch": "@@ -1,3 +1,8 @@\n+2012-05-03  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/53199\n+\t* gcc.target/powwerpc/pr53199.c: New file.\n+\n 2012-05-03  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/debug/dwarf2/nested-3.C: Adjust pattern."}, {"sha": "89a0cad06feab299cb5e9fba21ec663c602c48c1", "filename": "gcc/testsuite/gcc.target/powerpc/pr53199.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d512d10ecd585b72a099c54453831c40d2e4f7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr53199.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d512d10ecd585b72a099c54453831c40d2e4f7/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr53199.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr53199.c?ref=65d512d10ecd585b72a099c54453831c40d2e4f7", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-options \"-O2 -mcpu=power6 -mavoid-indexed-addresses\" } */\n+/* { dg-final { scan-assembler-times \"lwbrx\" 6 } } */\n+/* { dg-final { scan-assembler-times \"stwbrx\" 6 } } */\n+\n+/* PR 51399: bswap gets an error if -mavoid-indexed-addresses was used in\n+   creating the two lwbrx instructions.  */\n+\n+long long\n+load64_reverse_1 (long long *p)\n+{\n+  return __builtin_bswap64 (*p);\n+}\n+\n+long long\n+load64_reverse_2 (long long *p)\n+{\n+  return __builtin_bswap64 (p[1]);\n+}\n+\n+long long\n+load64_reverse_3 (long long *p, int i)\n+{\n+  return __builtin_bswap64 (p[i]);\n+}\n+\n+void\n+store64_reverse_1 (long long *p, long long x)\n+{\n+  *p = __builtin_bswap64 (x);\n+}\n+\n+void\n+store64_reverse_2 (long long *p, long long x)\n+{\n+  p[1] = __builtin_bswap64 (x);\n+}\n+\n+void\n+store64_reverse_3 (long long *p, long long x, int i)\n+{\n+  p[i] = __builtin_bswap64 (x);\n+}\n+\n+long long\n+reg_reverse (long long x)\n+{\n+  return __builtin_bswap64 (x);\n+}"}]}