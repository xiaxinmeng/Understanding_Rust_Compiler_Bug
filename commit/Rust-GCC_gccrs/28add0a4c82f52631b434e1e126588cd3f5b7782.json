{"sha": "28add0a4c82f52631b434e1e126588cd3f5b7782", "node_id": "C_kwDOANBUbNoAKDI4YWRkMGE0YzgyZjUyNjMxYjQzNGUxZTEyNjU4OGNkM2Y1Yjc3ODI", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2022-05-10T17:18:30Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-07-06T13:29:48Z"}, "message": "[Ada] Missing error on tagged type conversion\n\nThe compiler does not report an error on a type conversion to/from a\ntagged type whose parent type is an interface type and there is no\nrelationship between the source and target types. This bug has been\ndormant since January/2016.\n\nThis patch also improves the text of errors reported on interface type\nconversions suggesting how to fix these errors.\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Type_Conversion): Code cleanup since the\n\tprevious static check has been moved to Valid_Tagged_Conversion.\n\t(Valid_Tagged_Conversion): Fix the code checking conversion\n\tto/from interface types since incorrectly returns True when the\n\tparent type of the operand type (or the target type) is an\n\tinterface type; add missing static checks on interface type\n\tconversions.", "tree": {"sha": "14d8b2b51395764b1b4b49d1f482964db375eebd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14d8b2b51395764b1b4b49d1f482964db375eebd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28add0a4c82f52631b434e1e126588cd3f5b7782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28add0a4c82f52631b434e1e126588cd3f5b7782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28add0a4c82f52631b434e1e126588cd3f5b7782", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28add0a4c82f52631b434e1e126588cd3f5b7782/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3202e9f88fd286a8fc4814abeaa2238d70f4d585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3202e9f88fd286a8fc4814abeaa2238d70f4d585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3202e9f88fd286a8fc4814abeaa2238d70f4d585"}], "stats": {"total": 136, "additions": 102, "deletions": 34}, "files": [{"sha": "3ff0afd1712bc922f16ce3340e26b515bbf67f3e", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 102, "deletions": 34, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28add0a4c82f52631b434e1e126588cd3f5b7782/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28add0a4c82f52631b434e1e126588cd3f5b7782/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=28add0a4c82f52631b434e1e126588cd3f5b7782", "patch": "@@ -31,6 +31,7 @@ with Debug_A;        use Debug_A;\n with Einfo;          use Einfo;\n with Einfo.Entities; use Einfo.Entities;\n with Einfo.Utils;    use Einfo.Utils;\n+with Elists;         use Elists;\n with Errout;         use Errout;\n with Expander;       use Expander;\n with Exp_Ch6;        use Exp_Ch6;\n@@ -12308,26 +12309,7 @@ package body Sem_Res is\n             --  Conversion to interface type\n \n             elsif Is_Interface (Target) then\n-\n-               --  Handle subtypes\n-\n-               if Ekind (Opnd) in E_Protected_Subtype | E_Task_Subtype then\n-                  Opnd := Etype (Opnd);\n-               end if;\n-\n-               if Is_Class_Wide_Type (Opnd)\n-                 or else Interface_Present_In_Ancestor\n-                           (Typ   => Opnd,\n-                            Iface => Target)\n-               then\n-                  Expand_Interface_Conversion (N);\n-               else\n-                  Error_Msg_Name_1 := Chars (Etype (Target));\n-                  Error_Msg_Name_2 := Chars (Opnd);\n-                  Error_Msg_N\n-                    (\"wrong interface conversion (% is not a progenitor \"\n-                     & \"of %)\", N);\n-               end if;\n+               Expand_Interface_Conversion (N);\n             end if;\n          end;\n       end if;\n@@ -13621,29 +13603,115 @@ package body Sem_Res is\n               Conversion_Check (False,\n                 \"downward conversion of tagged objects not allowed\");\n \n-         --  Ada 2005 (AI-251): The conversion to/from interface types is\n-         --  always valid. The types involved may be class-wide (sub)types.\n+         --  Ada 2005 (AI-251): A conversion is valid if the operand and target\n+         --  types are both class-wide types and the specific type associated\n+         --  with at least one of them is an interface type (RM 4.6 (23.1/2));\n+         --  at run-time a check will verify the validity of this interface\n+         --  type conversion.\n \n-         elsif Is_Interface (Etype (Base_Type (Target_Type)))\n-           or else Is_Interface (Etype (Base_Type (Opnd_Type)))\n+         elsif Is_Class_Wide_Type (Target_Type)\n+            and then Is_Class_Wide_Type (Opnd_Type)\n+            and then (Is_Interface (Target_Type)\n+                        or else Is_Interface (Opnd_Type))\n          then\n             return True;\n \n-         --  If the operand is a class-wide type obtained through a limited_\n-         --  with clause, and the context includes the nonlimited view, use\n-         --  it to determine whether the conversion is legal.\n+         --  Report errors\n+\n+         elsif Is_Class_Wide_Type (Target_Type)\n+           and then Is_Interface (Target_Type)\n+           and then not Is_Interface (Opnd_Type)\n+           and then not Interface_Present_In_Ancestor\n+                          (Typ   => Opnd_Type,\n+                           Iface => Target_Type)\n+         then\n+            Error_Msg_Name_1 := Chars (Etype (Target_Type));\n+            Error_Msg_Name_2 := Chars (Opnd_Type);\n+            Conversion_Error_N\n+              (\"wrong interface conversion (% is not a progenitor \"\n+               & \"of %)\", N);\n+            return False;\n \n          elsif Is_Class_Wide_Type (Opnd_Type)\n-           and then From_Limited_With (Opnd_Type)\n-           and then Present (Non_Limited_View (Etype (Opnd_Type)))\n-           and then Is_Interface (Non_Limited_View (Etype (Opnd_Type)))\n+           and then Is_Interface (Opnd_Type)\n+           and then not Is_Interface (Target_Type)\n+           and then not Interface_Present_In_Ancestor\n+                          (Typ   => Target_Type,\n+                           Iface => Opnd_Type)\n          then\n-            return True;\n+            Error_Msg_Name_1 := Chars (Etype (Opnd_Type));\n+            Error_Msg_Name_2 := Chars (Target_Type);\n+            Conversion_Error_N\n+              (\"wrong interface conversion (% is not a progenitor \"\n+               & \"of %)\", N);\n \n-         elsif Is_Access_Type (Opnd_Type)\n-           and then Is_Interface (Directly_Designated_Type (Opnd_Type))\n+            --  Search for interface types shared between the target type and\n+            --  the operand interface type to complete the text of the error\n+            --  since the source of this error is a missing type conversion\n+            --  to such interface type.\n+\n+            if Has_Interfaces (Target_Type) then\n+               declare\n+                  Operand_Ifaces_List : Elist_Id;\n+                  Operand_Iface_Elmt  : Elmt_Id;\n+                  Target_Ifaces_List  : Elist_Id;\n+                  Target_Iface_Elmt   : Elmt_Id;\n+                  First_Candidate     : Boolean := True;\n+\n+               begin\n+                  Collect_Interfaces (Base_Type (Target_Type),\n+                    Target_Ifaces_List);\n+                  Collect_Interfaces (Root_Type (Base_Type (Opnd_Type)),\n+                    Operand_Ifaces_List);\n+\n+                  Operand_Iface_Elmt := First_Elmt (Operand_Ifaces_List);\n+                  while Present (Operand_Iface_Elmt) loop\n+                     Target_Iface_Elmt := First_Elmt (Target_Ifaces_List);\n+                     while Present (Target_Iface_Elmt) loop\n+                        if Node (Operand_Iface_Elmt)\n+                          = Node (Target_Iface_Elmt)\n+                        then\n+                           Error_Msg_Name_1 :=\n+                             Chars (Node (Target_Iface_Elmt));\n+\n+                           if First_Candidate then\n+                              First_Candidate := False;\n+                              Conversion_Error_N\n+                                (\"\\must convert to `%''Class` before downward \"\n+                                 & \"conversion\", Operand);\n+                           else\n+                              Conversion_Error_N\n+                                (\"\\or must convert to `%''Class` before \"\n+                                 & \"downward conversion\", Operand);\n+                           end if;\n+                        end if;\n+\n+                        Next_Elmt (Target_Iface_Elmt);\n+                     end loop;\n+\n+                     Next_Elmt (Operand_Iface_Elmt);\n+                  end loop;\n+               end;\n+            end if;\n+\n+            return False;\n+\n+         elsif not Is_Class_Wide_Type (Target_Type)\n+           and then Is_Interface (Target_Type)\n          then\n-            return True;\n+            Conversion_Error_N\n+              (\"wrong use of interface type in tagged conversion\", N);\n+            Conversion_Error_N\n+              (\"\\add ''Class to the target interface type\", N);\n+            return False;\n+\n+         elsif not Is_Class_Wide_Type (Opnd_Type)\n+           and then Is_Interface (Opnd_Type)\n+         then\n+            Conversion_Error_N\n+              (\"must convert to class-wide interface type before downward \"\n+               & \"conversion\", Operand);\n+            return False;\n \n          else\n             Conversion_Error_NE"}]}