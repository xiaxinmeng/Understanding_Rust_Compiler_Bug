{"sha": "0fd03b44ab4d77f8b8c09e5bbc2def4eeb855053", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGZkMDNiNDRhYjRkNzdmOGI4YzA5ZTViYmMyZGVmNGVlYjg1NTA1Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T07:17:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T07:17:46Z"}, "message": "poly_int: expand_expr_real_2\n\nThis patch makes expand_expr_real_2 cope with polynomial mode sizes\nwhen handling conversions involving a union type.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* expr.c (expand_expr_real_2): When handling conversions involving\n\tunions, apply tree_to_poly_uint64 to the TYPE_SIZE rather than\n\tmultiplying int_size_in_bytes by BITS_PER_UNIT.  Treat GET_MODE_BISIZE\n\tas a poly_uint64 too.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256151", "tree": {"sha": "5f58c996d3a8817c759a79fa3b3051a610740ca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f58c996d3a8817c759a79fa3b3051a610740ca7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fd03b44ab4d77f8b8c09e5bbc2def4eeb855053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd03b44ab4d77f8b8c09e5bbc2def4eeb855053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd03b44ab4d77f8b8c09e5bbc2def4eeb855053", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd03b44ab4d77f8b8c09e5bbc2def4eeb855053/comments", "author": null, "committer": null, "parents": [{"sha": "c3266d10a4e9446d98f6c262d315e0227bf281af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3266d10a4e9446d98f6c262d315e0227bf281af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3266d10a4e9446d98f6c262d315e0227bf281af"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "6cef62278cea152228c00d155177a6f35e06de29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd03b44ab4d77f8b8c09e5bbc2def4eeb855053/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd03b44ab4d77f8b8c09e5bbc2def4eeb855053/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0fd03b44ab4d77f8b8c09e5bbc2def4eeb855053", "patch": "@@ -1,3 +1,12 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* expr.c (expand_expr_real_2): When handling conversions involving\n+\tunions, apply tree_to_poly_uint64 to the TYPE_SIZE rather than\n+\tmultiplying int_size_in_bytes by BITS_PER_UNIT.  Treat GET_MODE_BISIZE\n+\tas a poly_uint64 too.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "abab83136d3b47574bf029803b52cf97c8fa06c3", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd03b44ab4d77f8b8c09e5bbc2def4eeb855053/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd03b44ab4d77f8b8c09e5bbc2def4eeb855053/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=0fd03b44ab4d77f8b8c09e5bbc2def4eeb855053", "patch": "@@ -8424,11 +8424,14 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t\t\t  && !TYPE_REVERSE_STORAGE_ORDER (type));\n \n \t      /* Store this field into a union of the proper type.  */\n+\t      poly_uint64 op0_size\n+\t\t= tree_to_poly_uint64 (TYPE_SIZE (TREE_TYPE (treeop0)));\n+\t      poly_uint64 union_size = GET_MODE_BITSIZE (mode);\n \t      store_field (target,\n-\t\t\t   MIN ((int_size_in_bytes (TREE_TYPE\n-\t\t\t\t\t\t    (treeop0))\n-\t\t\t\t * BITS_PER_UNIT),\n-\t\t\t\t(HOST_WIDE_INT) GET_MODE_BITSIZE (mode)),\n+\t\t\t   /* The conversion must be constructed so that\n+\t\t\t      we know at compile time how many bits\n+\t\t\t      to preserve.  */\n+\t\t\t   ordered_min (op0_size, union_size),\n \t\t\t   0, 0, 0, TYPE_MODE (valtype), treeop0, 0,\n \t\t\t   false, false);\n \t    }"}]}