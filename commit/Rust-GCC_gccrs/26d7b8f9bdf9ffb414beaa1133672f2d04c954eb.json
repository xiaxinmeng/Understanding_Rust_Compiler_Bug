{"sha": "26d7b8f9bdf9ffb414beaa1133672f2d04c954eb", "node_id": "C_kwDOANBUbNoAKDI2ZDdiOGY5YmRmOWZmYjQxNGJlYWExMTMzNjcyZjJkMDRjOTU0ZWI", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-02-03T13:41:01Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-02-10T08:01:54Z"}, "message": "nvptx: Add support for 64-bit mul.hi (and other) instructions\n\nNow that the middle-end MULT_HIGHPART_EXPR pieces are in place, this\npatch adds support for nvptx's mul.hi.s64 and mul.hi.u64 instructions,\nas previously reviewed (provisionally pre-approved) back in August 2020:\nhttps://gcc.gnu.org/pipermail/gcc-patches/2020-August/551373.html\nSince then a few things have changed, so this patch uses the new\nSMUL_HIGHPART and UMUL_HIGHPART RTX expressions, but the test cases\nremain the same.  Like the x86_64 backend, this patch retains the\n\"trunc\" forms of these instructions (while the RTL optimizers/combine\nmay still generate them).\n\nGiven that we're rapidly approaching stage 4, I also took the liberty\nof including support in nvptx.md for a few other instructions.  With\nthe new 64-bit highpart multiplication instructions added above, we\ncan now provide a define_expand for efficient 64-bit (to 128-bit)\nwidening multiplications.  This patch also adds support for nvptx's\ntestp.infinite instruction (for implementing __builtin_isinf) and\nthe not.pred instruction.\n\nAs an example of the code generation improvements, the function\nint foo(double x) { return __builtin_isinf(x); }\npreviously generated with -O2:\n\n                mov.f64 %r26, %ar0;\n                abs.f64 %r28, %r26;\n                setp.leu.f64    %r31, %r28, 0d7fefffffffffffff;\n                selp.u32        %r30, 1, 0, %r31;\n                mov.u32 %r29, %r30;\n                cvt.u16.u8      %r35, %r29;\n                mov.u16 %r33, %r35;\n                xor.b16 %r32, %r33, 1;\n                cvt.u32.u16     %r34, %r32;\n                cvt.u32.u8      %value, %r34;\n\nand with this patch now generates:\n\n                mov.f64 %r23, %ar0;\n                testp.infinite.f64      %r24, %r23;\n                selp.u32        %value, 1, 0, %r24;\n\nThis patch has been tested on nvptx-none hosted on x86_64-pc-linux-gnu\n(including newlib) with a make and make -k check with no new failures.\n\ngcc/ChangeLog:\n\n\t* config/nvptx/nvptx.md (UNSPEC_ISINF): New UNSPEC.\n\t(one_cmplbi2): New define_insn for not.pred.\n\t(mulditi3): New define_expand for signed widening multiply.\n\t(umulditi3): New define_expand for unsigned widening multiply.\n\t(smul<mode>3_highpart): New define_insn for signed highpart mult.\n\t(umul<mode>3_highpart): New define_insn for unsigned highpart mult.\n\t(*smulhi3_highpart_2): Renamed from smulhi3_highpart.\n\t(*smulsi3_highpart_2): Renamed from smulsi3_highpart.\n\t(*umulhi3_highpart_2): Renamed from umulhi3_highpart.\n\t(*umulsi3_highpart_2): Renamed from umulsi3_highpart.\n\t(*setcc<mode>_from_not_bi): New define_insn.\n\t(*setcc_isinf<mode>): New define_insn for testp.infinite.\n\t(isinf<mode>2): New define_expand.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/nvptx/mul-hi64.c: New test case.\n\t* gcc.target/nvptx/umul-hi64.c: New test case.\n\t* gcc.target/nvptx/mul-wide64.c: New test case.\n\t* gcc.target/nvptx/umul-wide64.c: New test case.\n\t* gcc.target/nvptx/isinf.c: New test case.", "tree": {"sha": "e14165d21f978742bd9f842de5d65a0c303129b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e14165d21f978742bd9f842de5d65a0c303129b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de12b919c74307c5c2a4c79a29683d21e622422e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de12b919c74307c5c2a4c79a29683d21e622422e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de12b919c74307c5c2a4c79a29683d21e622422e"}], "stats": {"total": 220, "additions": 216, "deletions": 4}, "files": [{"sha": "d19a687ff59109eff67dc7ee42d1bc2f23daaca6", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 87, "deletions": 4, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=26d7b8f9bdf9ffb414beaa1133672f2d04c954eb", "patch": "@@ -27,6 +27,7 @@\n    UNSPEC_SIN\n    UNSPEC_COS\n    UNSPEC_TANH\n+   UNSPEC_ISINF\n \n    UNSPEC_FPINT_FLOOR\n    UNSPEC_FPINT_BTRUNC\n@@ -596,6 +597,12 @@\n   \"\"\n   \"%.\\\\tnot.b%T0\\\\t%0, %1;\")\n \n+(define_insn \"one_cmplbi2\"\n+  [(set (match_operand:BI 0 \"nvptx_register_operand\" \"=R\")\n+\t(not:BI (match_operand:BI 1 \"nvptx_register_operand\" \"R\")))]\n+  \"\"\n+  \"%.\\\\tnot.pred\\\\t%0, %1;\")\n+\n (define_insn \"*cnot<mode>2\"\n   [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n \t(eq:HSDIM (match_operand:HSDIM 1 \"nvptx_register_operand\" \"R\")\n@@ -671,7 +678,57 @@\n   \"\"\n   \"%.\\\\tmul.wide.u32\\\\t%0, %1, %2;\")\n \n-(define_insn \"smulhi3_highpart\"\n+(define_expand \"mulditi3\"\n+  [(set (match_operand:TI 0 \"nvptx_register_operand\")\n+\t(mult:TI (sign_extend:TI\n+\t\t  (match_operand:DI 1 \"nvptx_register_operand\"))\n+\t\t (sign_extend:DI\n+\t\t  (match_operand:DI 2 \"nvptx_nonmemory_operand\"))))]\n+  \"\"\n+{\n+  rtx hi = gen_reg_rtx (DImode);\n+  rtx lo = gen_reg_rtx (DImode);\n+  emit_insn (gen_smuldi3_highpart (hi, operands[1], operands[2]));\n+  emit_insn (gen_muldi3 (lo, operands[1], operands[2]));\n+  emit_move_insn (gen_highpart (DImode, operands[0]), hi);\n+  emit_move_insn (gen_lowpart (DImode, operands[0]), lo);\n+  DONE;\n+})\n+\n+(define_expand \"umulditi3\"\n+  [(set (match_operand:TI 0 \"nvptx_register_operand\")\n+\t(mult:TI (zero_extend:TI\n+\t\t  (match_operand:DI 1 \"nvptx_register_operand\"))\n+\t\t (zero_extend:DI\n+\t\t  (match_operand:DI 2 \"nvptx_nonmemory_operand\"))))]\n+  \"\"\n+{\n+  rtx hi = gen_reg_rtx (DImode);\n+  rtx lo = gen_reg_rtx (DImode);\n+  emit_insn (gen_umuldi3_highpart (hi, operands[1], operands[2]));\n+  emit_insn (gen_muldi3 (lo, operands[1], operands[2]));\n+  emit_move_insn (gen_highpart (DImode, operands[0]), hi);\n+  emit_move_insn (gen_lowpart (DImode, operands[0]), lo);\n+  DONE;\n+})\n+\n+(define_insn \"smul<mode>3_highpart\"\n+  [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(smul_highpart:HSDIM\n+\t  (match_operand:HSDIM 1 \"nvptx_register_operand\" \"R\")\n+\t  (match_operand:HSDIM 2 \"nvptx_nonmemory_operand\" \"Ri\")))]\n+  \"\"\n+  \"%.\\\\tmul.hi.s%T0\\\\t%0, %1, %2;\")\n+\n+(define_insn \"umul<mode>3_highpart\"\n+  [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(umul_highpart:HSDIM\n+\t  (match_operand:HSDIM 1 \"nvptx_register_operand\" \"R\")\n+\t  (match_operand:HSDIM 2 \"nvptx_nonmemory_operand\" \"Ri\")))]\n+  \"\"\n+  \"%.\\\\tmul.hi.u%T0\\\\t%0, %1, %2;\")\n+\n+(define_insn \"*smulhi3_highpart_2\"\n   [(set (match_operand:HI 0 \"nvptx_register_operand\" \"=R\")\n \t(truncate:HI\n \t (lshiftrt:SI\n@@ -683,7 +740,7 @@\n   \"\"\n   \"%.\\\\tmul.hi.s16\\\\t%0, %1, %2;\")\n \n-(define_insn \"smulsi3_highpart\"\n+(define_insn \"*smulsi3_highpart_2\"\n   [(set (match_operand:SI 0 \"nvptx_register_operand\" \"=R\")\n \t(truncate:SI\n \t (lshiftrt:DI\n@@ -695,7 +752,7 @@\n   \"\"\n   \"%.\\\\tmul.hi.s32\\\\t%0, %1, %2;\")\n \n-(define_insn \"umulhi3_highpart\"\n+(define_insn \"*umulhi3_highpart_2\"\n   [(set (match_operand:HI 0 \"nvptx_register_operand\" \"=R\")\n \t(truncate:HI\n \t (lshiftrt:SI\n@@ -707,7 +764,7 @@\n   \"\"\n   \"%.\\\\tmul.hi.u16\\\\t%0, %1, %2;\")\n \n-(define_insn \"umulsi3_highpart\"\n+(define_insn \"*umulsi3_highpart_2\"\n   [(set (match_operand:SI 0 \"nvptx_register_operand\" \"=R\")\n \t(truncate:SI\n \t (lshiftrt:DI\n@@ -885,6 +942,13 @@\n   \"\"\n   \"%.\\\\tselp%t0\\\\t%0, 1, 0, %1;\")\n \n+(define_insn \"*setcc<mode>_from_not_bi\"\n+  [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(eq:HSDIM (match_operand:BI 1 \"nvptx_register_operand\" \"R\")\n+\t\t   (const_int 0)))]\n+  \"\"\n+  \"%.\\\\tselp%t0\\\\t%0, 0, 1, %1;\")\n+\n (define_insn \"extendbi<mode>2\"\n   [(set (match_operand:QHSDIM 0 \"nvptx_register_operand\" \"=R\")\n \t(sign_extend:QHSDIM\n@@ -1160,6 +1224,25 @@\n   \"flag_unsafe_math_optimizations\"\n   \"%.\\\\tex2.approx%t0\\\\t%0, %1;\")\n \n+(define_insn \"setcc_isinf<mode>\"\n+  [(set (match_operand:BI 0 \"nvptx_register_operand\" \"=R\")\n+\t(unspec:BI [(match_operand:SDFM 1 \"nvptx_register_operand\" \"R\")]\n+\t\t   UNSPEC_ISINF))]\n+  \"\"\n+  \"%.\\\\ttestp.infinite%t1\\\\t%0, %1;\")\n+\n+(define_expand \"isinf<mode>2\"\n+  [(set (match_operand:SI 0 \"nvptx_register_operand\" \"=R\")\n+\t(unspec:SI [(match_operand:SDFM 1 \"nvptx_register_operand\" \"R\")]\n+\t\t   UNSPEC_ISINF))]\n+  \"\"\n+{\n+  rtx pred = gen_reg_rtx (BImode);\n+  emit_insn (gen_setcc_isinf<mode> (pred, operands[1]));\n+  emit_insn (gen_setccsi_from_bi (operands[0], pred));\n+  DONE;\n+})\n+\n ;; HFmode floating point arithmetic.\n \n (define_insn \"addhf3\""}, {"sha": "c433612500ef2a00cacd934358652d4eb731e8c9", "filename": "gcc/testsuite/gcc.target/nvptx/isinf.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fisinf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fisinf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fisinf.c?ref=26d7b8f9bdf9ffb414beaa1133672f2d04c954eb", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int foo(double x)\n+{\n+  return __builtin_isinf(x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"testp.infinite.f64\" 1 } } */"}, {"sha": "a45a0e32d0356889cb4d3e100d47ddf9c167940b", "filename": "gcc/testsuite/gcc.target/nvptx/mul-hi64.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fmul-hi64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fmul-hi64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fmul-hi64.c?ref=26d7b8f9bdf9ffb414beaa1133672f2d04c954eb", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wno-long-long\" } */\n+\n+typedef unsigned int __attribute ((mode(TI))) uti_t;\n+typedef int __attribute ((mode(TI))) ti_t;\n+\n+long test1(long x, long y)\n+{\n+  return ((ti_t)x * (ti_t)y) >> 64;\n+}\n+\n+long test2(long x)\n+{\n+  return ((ti_t)x * 19065) >> 64;\n+}\n+\n+long test3(long x, long y)\n+{\n+  return (uti_t)((ti_t)x * (ti_t)y) >> 64;\n+}\n+\n+long test4(long x)\n+{\n+  return (uti_t)((ti_t)x * 19065) >> 64;\n+}\n+\n+ti_t test5(long x, long y)\n+{\n+  return ((ti_t)x * (ti_t)y) >> 64;\n+}\n+\n+ti_t test6(long x)\n+{\n+  return ((ti_t)x * 19065) >> 64;\n+}\n+\n+uti_t test7(long x, long y)\n+{\n+  return (uti_t)((ti_t)x * (ti_t)y) >> 64;\n+}\n+\n+uti_t test8(long x)\n+{\n+  return (uti_t)((ti_t)x * 19065) >> 64;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mul.hi.s64\" 8 } } */"}, {"sha": "a273c66a199f554707fbf094e45ea71b617f571c", "filename": "gcc/testsuite/gcc.target/nvptx/mul-wide64.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fmul-wide64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fmul-wide64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fmul-wide64.c?ref=26d7b8f9bdf9ffb414beaa1133672f2d04c954eb", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef int __attribute ((mode(TI))) ti_t;\n+\n+ti_t foo(long x, long y)\n+{\n+  return (ti_t)x * (ti_t)y;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mul.lo.u64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"mul.hi.s64\" 1 } } */\n+"}, {"sha": "6e09b74ff1414d0b3aa27971eb5d717865fcea07", "filename": "gcc/testsuite/gcc.target/nvptx/umul-hi64.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fumul-hi64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fumul-hi64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fumul-hi64.c?ref=26d7b8f9bdf9ffb414beaa1133672f2d04c954eb", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wno-long-long\" } */\n+\n+typedef unsigned int __attribute ((mode(TI))) uti_t;\n+typedef int __attribute ((mode(TI))) ti_t;\n+\n+unsigned long test1(unsigned long x, unsigned long y)\n+{\n+  return ((uti_t)x * (uti_t)y) >> 64;\n+}\n+\n+unsigned long test2(unsigned long x)\n+{\n+  return ((uti_t)x * 19065) >> 64;\n+}\n+\n+unsigned long test3(unsigned long x, unsigned long y)\n+{\n+  return (ti_t)((uti_t)x * (uti_t)y) >> 64;\n+}\n+\n+unsigned long test4(unsigned long x)\n+{\n+  return (ti_t)((uti_t)x * 19065) >> 64;\n+}\n+\n+uti_t test5(unsigned long x, unsigned long y)\n+{\n+  return ((uti_t)x * (uti_t)y) >> 64;\n+}\n+\n+uti_t test6(unsigned long x)\n+{\n+  return ((uti_t)x * 19065) >> 64;\n+}\n+\n+ti_t test7(unsigned long x, unsigned long y)\n+{\n+  return (ti_t)((uti_t)x * (uti_t)y) >> 64;\n+}\n+\n+ti_t test8(unsigned long x)\n+{\n+  return (ti_t)((uti_t)x * 19065) >> 64;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mul.hi.u64\" 8 } } */"}, {"sha": "4cbdf0ba6d1e1c3f7039f7eb815d7dee826b5cf5", "filename": "gcc/testsuite/gcc.target/nvptx/umul-wide64.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fumul-wide64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d7b8f9bdf9ffb414beaa1133672f2d04c954eb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fumul-wide64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fumul-wide64.c?ref=26d7b8f9bdf9ffb414beaa1133672f2d04c954eb", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef unsigned int __attribute ((mode(TI))) uti_t;\n+\n+uti_t foo(unsigned long x, unsigned long y)\n+{\n+  return (uti_t)x * (uti_t)y;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mul.lo.u64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"mul.hi.u64\" 1 } } */\n+"}]}