{"sha": "dd400a36272b31b5d7003fd66a9fbcf3ec2393d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ0MDBhMzYyNzJiMzFiNWQ3MDAzZmQ2NmE5ZmJjZjNlYzIzOTNkMA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2014-12-01T22:37:34Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2014-12-01T22:37:34Z"}, "message": "* combine.c (try_combine): Use is_parallel_of_n_reg_sets some more.\n\nFrom-SVN: r218249", "tree": {"sha": "c299c1a2e197ee72eb8dccea66a72117a75aa238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c299c1a2e197ee72eb8dccea66a72117a75aa238"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd400a36272b31b5d7003fd66a9fbcf3ec2393d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd400a36272b31b5d7003fd66a9fbcf3ec2393d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd400a36272b31b5d7003fd66a9fbcf3ec2393d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd400a36272b31b5d7003fd66a9fbcf3ec2393d0/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d2f8e16f5c514a0232698e12e6e5f8ffb72605d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d2f8e16f5c514a0232698e12e6e5f8ffb72605d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d2f8e16f5c514a0232698e12e6e5f8ffb72605d"}], "stats": {"total": 46, "additions": 20, "deletions": 26}, "files": [{"sha": "c42c2e4405555fb1e1687b79c2a1717f0aaf0716", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd400a36272b31b5d7003fd66a9fbcf3ec2393d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd400a36272b31b5d7003fd66a9fbcf3ec2393d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd400a36272b31b5d7003fd66a9fbcf3ec2393d0", "patch": "@@ -1,3 +1,7 @@\n+2014-12-01  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* combine.c (try_combine): Use is_parallel_of_n_reg_sets some more.\n+\n 2014-12-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* combine.c (is_parallel_of_n_reg_sets): New function."}, {"sha": "f471920b23eae9c44111f4a6fc7e8ae22d5570d6", "filename": "gcc/combine.c", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd400a36272b31b5d7003fd66a9fbcf3ec2393d0/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd400a36272b31b5d7003fd66a9fbcf3ec2393d0/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=dd400a36272b31b5d7003fd66a9fbcf3ec2393d0", "patch": "@@ -2832,43 +2832,33 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n      This undoes a previous combination and allows us to match a branch-and-\n      decrement insn.  */\n \n-  if (i1 == 0 && GET_CODE (PATTERN (i2)) == PARALLEL\n-      && XVECLEN (PATTERN (i2), 0) >= 2\n-      && GET_CODE (XVECEXP (PATTERN (i2), 0, 0)) == SET\n+  if (i1 == 0\n+      && is_parallel_of_n_reg_sets (i2, 2)\n       && (GET_MODE_CLASS (GET_MODE (SET_DEST (XVECEXP (PATTERN (i2), 0, 0))))\n \t  == MODE_CC)\n       && GET_CODE (SET_SRC (XVECEXP (PATTERN (i2), 0, 0))) == COMPARE\n       && XEXP (SET_SRC (XVECEXP (PATTERN (i2), 0, 0)), 1) == const0_rtx\n-      && GET_CODE (XVECEXP (PATTERN (i2), 0, 1)) == SET\n-      && REG_P (SET_DEST (XVECEXP (PATTERN (i2), 0, 1)))\n       && rtx_equal_p (XEXP (SET_SRC (XVECEXP (PATTERN (i2), 0, 0)), 0),\n \t\t      SET_SRC (XVECEXP (PATTERN (i2), 0, 1)))\n       && !reg_used_between_p (SET_DEST (XVECEXP (PATTERN (i2), 0, 0)), i2, i3)\n       && !reg_used_between_p (SET_DEST (XVECEXP (PATTERN (i2), 0, 1)), i2, i3))\n     {\n-      for (i = XVECLEN (PATTERN (i2), 0) - 1; i >= 2; i--)\n-\tif (GET_CODE (XVECEXP (PATTERN (i2), 0, i)) != CLOBBER)\n-\t  break;\n-\n-      if (i == 1)\n-\t{\n-\t  /* We make I1 with the same INSN_UID as I2.  This gives it\n-\t     the same DF_INSN_LUID for value tracking.  Our fake I1 will\n-\t     never appear in the insn stream so giving it the same INSN_UID\n-\t     as I2 will not cause a problem.  */\n+      /* We make I1 with the same INSN_UID as I2.  This gives it\n+\t the same DF_INSN_LUID for value tracking.  Our fake I1 will\n+\t never appear in the insn stream so giving it the same INSN_UID\n+\t as I2 will not cause a problem.  */\n \n-\t  i1 = gen_rtx_INSN (VOIDmode, NULL, i2, BLOCK_FOR_INSN (i2),\n-\t\t\t     XVECEXP (PATTERN (i2), 0, 1), INSN_LOCATION (i2),\n-\t\t\t     -1, NULL_RTX);\n-\t  INSN_UID (i1) = INSN_UID (i2);\n+      i1 = gen_rtx_INSN (VOIDmode, NULL, i2, BLOCK_FOR_INSN (i2),\n+\t\t\t XVECEXP (PATTERN (i2), 0, 1), INSN_LOCATION (i2),\n+\t\t\t -1, NULL_RTX);\n+      INSN_UID (i1) = INSN_UID (i2);\n \n-\t  SUBST (PATTERN (i2), XVECEXP (PATTERN (i2), 0, 0));\n-\t  SUBST (XEXP (SET_SRC (PATTERN (i2)), 0),\n-\t\t SET_DEST (PATTERN (i1)));\n-\t  unsigned int regno = REGNO (SET_DEST (PATTERN (i1)));\n-\t  SUBST_LINK (LOG_LINKS (i2),\n-\t\t      alloc_insn_link (i1, regno, LOG_LINKS (i2)));\n-\t}\n+      SUBST (PATTERN (i2), XVECEXP (PATTERN (i2), 0, 0));\n+      SUBST (XEXP (SET_SRC (PATTERN (i2)), 0),\n+\t     SET_DEST (PATTERN (i1)));\n+      unsigned int regno = REGNO (SET_DEST (PATTERN (i1)));\n+      SUBST_LINK (LOG_LINKS (i2),\n+\t\t  alloc_insn_link (i1, regno, LOG_LINKS (i2)));\n     }\n \n   /* If I2 is a PARALLEL of two SETs of REGs (and perhaps some CLOBBERs),"}]}