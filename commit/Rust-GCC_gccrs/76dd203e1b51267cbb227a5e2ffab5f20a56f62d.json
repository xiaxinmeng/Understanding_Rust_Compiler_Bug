{"sha": "76dd203e1b51267cbb227a5e2ffab5f20a56f62d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZkZDIwM2UxYjUxMjY3Y2JiMjI3YTVlMmZmYWI1ZjIwYTU2ZjYyZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-02-22T15:00:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-02-22T15:00:39Z"}, "message": "re PR middle-end/79673 (GIMPLE verification fails when compiling code with __seg_gs)\n\n2017-02-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/79673\n\t* tree-ssa-pre.c (compute_avail): Use wide_int_to_tree to\n\tconvert the [TARGET_]MEM_REF offset INTEGER_CST, scrapping off\n\tirrelevant address-space qualifiers and avoiding a\n\tADDR_SPACE_CONVERT_EXPR from fold_convert.\n\n\t* gcc.target/i386/pr79673.c: New testcase.\n\nFrom-SVN: r245649", "tree": {"sha": "9d81c3cc45d0d8e13bfcdf4a2aeeb876b47e10e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d81c3cc45d0d8e13bfcdf4a2aeeb876b47e10e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76dd203e1b51267cbb227a5e2ffab5f20a56f62d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76dd203e1b51267cbb227a5e2ffab5f20a56f62d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76dd203e1b51267cbb227a5e2ffab5f20a56f62d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76dd203e1b51267cbb227a5e2ffab5f20a56f62d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9c774d2ae7c0ae983aa33fd53d34ef054dbee5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9c774d2ae7c0ae983aa33fd53d34ef054dbee5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9c774d2ae7c0ae983aa33fd53d34ef054dbee5a"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "d920b6b5f8fac0ba375185cf5de283ef9999944d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76dd203e1b51267cbb227a5e2ffab5f20a56f62d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76dd203e1b51267cbb227a5e2ffab5f20a56f62d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76dd203e1b51267cbb227a5e2ffab5f20a56f62d", "patch": "@@ -1,3 +1,11 @@\n+2017-02-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79673\n+\t* tree-ssa-pre.c (compute_avail): Use wide_int_to_tree to\n+\tconvert the [TARGET_]MEM_REF offset INTEGER_CST, scrapping off\n+\tirrelevant address-space qualifiers and avoiding a\n+\tADDR_SPACE_CONVERT_EXPR from fold_convert.\n+\n 2017-02-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/79666"}, {"sha": "5ba7d83d28018afb5516ab10dadeada18f55e8d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76dd203e1b51267cbb227a5e2ffab5f20a56f62d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76dd203e1b51267cbb227a5e2ffab5f20a56f62d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76dd203e1b51267cbb227a5e2ffab5f20a56f62d", "patch": "@@ -1,3 +1,8 @@\n+2017-02-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79673\n+\t* gcc.target/i386/pr79673.c: New testcase.\n+\n 2017-02-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/79666"}, {"sha": "2ca667bde4bb644942ae7915ffe6d93a94c3c629", "filename": "gcc/testsuite/gcc.target/i386/pr79673.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76dd203e1b51267cbb227a5e2ffab5f20a56f62d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79673.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76dd203e1b51267cbb227a5e2ffab5f20a56f62d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79673.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79673.c?ref=76dd203e1b51267cbb227a5e2ffab5f20a56f62d", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+void used(double x);\n+void usel(long x);\n+void test(int c)\n+{\n+  if (c)\n+    used(*((double __seg_gs *) 0));\n+  else\n+    usel(*((long __seg_gs *) 0));\n+}"}, {"sha": "7fce0d3bcfbb98127d65978ccd79b1647e61b6a6", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76dd203e1b51267cbb227a5e2ffab5f20a56f62d/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76dd203e1b51267cbb227a5e2ffab5f20a56f62d/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=76dd203e1b51267cbb227a5e2ffab5f20a56f62d", "patch": "@@ -3986,21 +3986,21 @@ compute_avail (void)\n \t\t\t{\n \t\t\t  ref->set = set;\n \t\t\t  if (ref1->opcode == MEM_REF)\n-\t\t\t    ref1->op0 = fold_convert (TREE_TYPE (ref2->op0),\n-\t\t\t\t\t\t      ref1->op0);\n+\t\t\t    ref1->op0 = wide_int_to_tree (TREE_TYPE (ref2->op0),\n+\t\t\t\t\t\t\t  ref1->op0);\n \t\t\t  else\n-\t\t\t    ref1->op2 = fold_convert (TREE_TYPE (ref2->op2),\n-\t\t\t\t\t\t      ref1->op2);\n+\t\t\t    ref1->op2 = wide_int_to_tree (TREE_TYPE (ref2->op2),\n+\t\t\t\t\t\t\t  ref1->op2);\n \t\t\t}\n \t\t      else\n \t\t\t{\n \t\t\t  ref->set = 0;\n \t\t\t  if (ref1->opcode == MEM_REF)\n-\t\t\t    ref1->op0 = fold_convert (ptr_type_node,\n-\t\t\t\t\t\t      ref1->op0);\n+\t\t\t    ref1->op0 = wide_int_to_tree (ptr_type_node,\n+\t\t\t\t\t\t\t  ref1->op0);\n \t\t\t  else\n-\t\t\t    ref1->op2 = fold_convert (ptr_type_node,\n-\t\t\t\t\t\t      ref1->op2);\n+\t\t\t    ref1->op2 = wide_int_to_tree (ptr_type_node,\n+\t\t\t\t\t\t\t  ref1->op2);\n \t\t\t}\n \t\t      operands.release ();\n "}]}