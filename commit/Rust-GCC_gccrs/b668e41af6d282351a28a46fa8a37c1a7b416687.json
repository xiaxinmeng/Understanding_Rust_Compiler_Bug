{"sha": "b668e41af6d282351a28a46fa8a37c1a7b416687", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY2OGU0MWFmNmQyODIzNTFhMjhhNDZmYThhMzdjMWE3YjQxNjY4Nw==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gmail.com", "date": "2012-08-27T12:08:16Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2012-08-27T12:08:16Z"}, "message": "random.h (mersenne_twister_engine): Don't inline discard here.\n\n\n\t* include/bits/random.h (mersenne_twister_engine): Don't inline\n\tdiscard here.  New member function _M_gen_rand.\n\t* include/bits/random.tcc (mersenne_twister_engine<>::_M_gen_rand):\n\tNew function.  Extracted from operator().\n\t(mersenne_twister_engine<>::discard): New implementation which\n\tskips in large steps.\n\t(mersenne_twister_engine<>::operator()): Use _M_gen_rand.\n\nFrom-SVN: r190711", "tree": {"sha": "a1538e6e07a651393a5e0dec0446b30934a8e66f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1538e6e07a651393a5e0dec0446b30934a8e66f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b668e41af6d282351a28a46fa8a37c1a7b416687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b668e41af6d282351a28a46fa8a37c1a7b416687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b668e41af6d282351a28a46fa8a37c1a7b416687", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b668e41af6d282351a28a46fa8a37c1a7b416687/comments", "author": {"login": "drepper", "id": 2918631, "node_id": "MDQ6VXNlcjI5MTg2MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/2918631?v=4", "gravatar_id": "", "url": "https://api.github.com/users/drepper", "html_url": "https://github.com/drepper", "followers_url": "https://api.github.com/users/drepper/followers", "following_url": "https://api.github.com/users/drepper/following{/other_user}", "gists_url": "https://api.github.com/users/drepper/gists{/gist_id}", "starred_url": "https://api.github.com/users/drepper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/drepper/subscriptions", "organizations_url": "https://api.github.com/users/drepper/orgs", "repos_url": "https://api.github.com/users/drepper/repos", "events_url": "https://api.github.com/users/drepper/events{/privacy}", "received_events_url": "https://api.github.com/users/drepper/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f79f4d1d6c6e3dcb0231404969882726d31a50c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f79f4d1d6c6e3dcb0231404969882726d31a50c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f79f4d1d6c6e3dcb0231404969882726d31a50c"}], "stats": {"total": 99, "additions": 68, "deletions": 31}, "files": [{"sha": "bc088e8c167a6b2faaabfa9e0f4a0d40b84fef92", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b668e41af6d282351a28a46fa8a37c1a7b416687/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b668e41af6d282351a28a46fa8a37c1a7b416687/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b668e41af6d282351a28a46fa8a37c1a7b416687", "patch": "@@ -1,3 +1,13 @@\n+012-08-22  Ulrich Drepper  <drepper@gmail.com>\n+\n+\t* include/bits/random.h (mersenne_twister_engine): Don't inline\n+\tdiscard here.  New member function _M_gen_rand.\n+\t* include/bits/random.tcc (mersenne_twister_engine<>::_M_gen_rand):\n+\tNew function.  Extracted from operator().\n+\t(mersenne_twister_engine<>::discard): New implementation which\n+\tskips in large steps.\n+\t(mersenne_twister_engine<>::operator()): Use _M_gen_rand.\n+\t\t\t\t\t\t\t\n 2012-08-26  Marc Glisse  <marc.glisse@inria.fr>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "35aceea85676a0f02882227243f79d15a6f9797a", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b668e41af6d282351a28a46fa8a37c1a7b416687/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b668e41af6d282351a28a46fa8a37c1a7b416687/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=b668e41af6d282351a28a46fa8a37c1a7b416687", "patch": "@@ -530,11 +530,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @brief Discard a sequence of random numbers.\n        */\n       void\n-      discard(unsigned long long __z)\n-      {\n-\tfor (; __z != 0ULL; --__z)\n-\t  (*this)();\n-      }\n+      discard(unsigned long long __z);\n \n       result_type\n       operator()();\n@@ -610,6 +606,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   __l1, __f1>& __x);\n \n     private:\n+      void _M_gen_rand();\n+\n       _UIntType _M_x[state_size];\n       size_t    _M_p;\n     };"}, {"sha": "6f501b1e98261ed0a8be3186756f3f70f4901541", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 55, "deletions": 26, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b668e41af6d282351a28a46fa8a37c1a7b416687/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b668e41af6d282351a28a46fa8a37c1a7b416687/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=b668e41af6d282351a28a46fa8a37c1a7b416687", "patch": "@@ -387,6 +387,60 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           _M_x[0] = __detail::_Shift<_UIntType, __w - 1>::__value;\n       }\n \n+  template<typename _UIntType, size_t __w,\n+\t   size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    void\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::\n+    _M_gen_rand(void)\n+    {\n+      const _UIntType __upper_mask = (~_UIntType()) << __r;\n+      const _UIntType __lower_mask = ~__upper_mask;\n+\n+      for (size_t __k = 0; __k < (__n - __m); ++__k)\n+        {\n+\t  _UIntType __y = ((_M_x[__k] & __upper_mask)\n+\t\t\t   | (_M_x[__k + 1] & __lower_mask));\n+\t  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)\n+\t\t       ^ ((__y & 0x01) ? __a : 0));\n+        }\n+\n+      for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)\n+\t{\n+\t  _UIntType __y = ((_M_x[__k] & __upper_mask)\n+\t\t\t   | (_M_x[__k + 1] & __lower_mask));\n+\t  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)\n+\t\t       ^ ((__y & 0x01) ? __a : 0));\n+\t}\n+\n+      _UIntType __y = ((_M_x[__n - 1] & __upper_mask)\n+\t\t       | (_M_x[0] & __lower_mask));\n+      _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)\n+\t\t       ^ ((__y & 0x01) ? __a : 0));\n+      _M_p = 0;\n+    }\n+\n+  template<typename _UIntType, size_t __w,\n+\t   size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    void\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::\n+    discard(unsigned long long __z)\n+    {\n+      while (__z > state_size - _M_p)\n+\t{\n+\t  __z -= state_size - _M_p;\n+\t  _M_gen_rand();\n+\t}\n+      _M_p += __z;\n+    }\n+\n   template<typename _UIntType, size_t __w,\n \t   size_t __n, size_t __m, size_t __r,\n \t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n@@ -401,32 +455,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       // Reload the vector - cost is O(n) amortized over n calls.\n       if (_M_p >= state_size)\n-\t{\n-\t  const _UIntType __upper_mask = (~_UIntType()) << __r;\n-\t  const _UIntType __lower_mask = ~__upper_mask;\n-\n-\t  for (size_t __k = 0; __k < (__n - __m); ++__k)\n-\t    {\n-\t      _UIntType __y = ((_M_x[__k] & __upper_mask)\n-\t\t\t       | (_M_x[__k + 1] & __lower_mask));\n-\t      _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)\n-\t\t\t   ^ ((__y & 0x01) ? __a : 0));\n-\t    }\n-\n-\t  for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)\n-\t    {\n-\t      _UIntType __y = ((_M_x[__k] & __upper_mask)\n-\t\t\t       | (_M_x[__k + 1] & __lower_mask));\n-\t      _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)\n-\t\t\t   ^ ((__y & 0x01) ? __a : 0));\n-\t    }\n-\n-\t  _UIntType __y = ((_M_x[__n - 1] & __upper_mask)\n-\t\t\t   | (_M_x[0] & __lower_mask));\n-\t  _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)\n-\t\t\t   ^ ((__y & 0x01) ? __a : 0));\n-\t  _M_p = 0;\n-\t}\n+\t_M_gen_rand();\n \n       // Calculate o(x(i)).\n       result_type __z = _M_x[_M_p++];"}]}