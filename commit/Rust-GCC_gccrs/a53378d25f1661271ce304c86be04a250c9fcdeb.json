{"sha": "a53378d25f1661271ce304c86be04a250c9fcdeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUzMzc4ZDI1ZjE2NjEyNzFjZTMwNGM4NmJlMDRhMjUwYzlmY2RlYg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-09-29T16:32:45Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-09-29T16:32:45Z"}, "message": "[PATCH] Fix undefined behaviour in rx port\n\n[PATCH] Fix undefined behaviour in rx port\n        * config/rx/constraints.md (Int08): Fix undefined left shift\n        behaviour.\n        (Sint08, Sint16, Sint24): Likewise.\n        * config/rx/rx.c (rx_get_stack_layout): Likewise.\n\nFrom-SVN: r228254", "tree": {"sha": "c84ca0a4b6a10583b9b48468b374748c3462593e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c84ca0a4b6a10583b9b48468b374748c3462593e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a53378d25f1661271ce304c86be04a250c9fcdeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53378d25f1661271ce304c86be04a250c9fcdeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a53378d25f1661271ce304c86be04a250c9fcdeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a53378d25f1661271ce304c86be04a250c9fcdeb/comments", "author": null, "committer": null, "parents": [{"sha": "5c4b7f1c1c00b21f11842dc1f107da1441552bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4b7f1c1c00b21f11842dc1f107da1441552bfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c4b7f1c1c00b21f11842dc1f107da1441552bfd"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "cce1ba50244dcb0fc7fbbd7c74975743426ee8ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53378d25f1661271ce304c86be04a250c9fcdeb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53378d25f1661271ce304c86be04a250c9fcdeb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a53378d25f1661271ce304c86be04a250c9fcdeb", "patch": "@@ -12,6 +12,11 @@\n \n 2015-09-29  Jeff Law  <law@redhat.com>\n \n+\t* config/rx/constraints.md (Int08): Fix undefined left shift\n+\tbehaviour.\n+\t(Sint08, Sint16, Sint24): Likewise.\n+\t* config/rx/rx.c (rx_get_stack_layout): Likewise.\n+\n \t* config/rl78/rl78-expand.md (movqi): Fix undefined left shift\n \tbehaviour.\n "}, {"sha": "b41c232fff1448de09831c9e980be292969844ed", "filename": "gcc/config/rx/constraints.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53378d25f1661271ce304c86be04a250c9fcdeb/gcc%2Fconfig%2Frx%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53378d25f1661271ce304c86be04a250c9fcdeb/gcc%2Fconfig%2Frx%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Fconstraints.md?ref=a53378d25f1661271ce304c86be04a250c9fcdeb", "patch": "@@ -28,28 +28,28 @@\n (define_constraint \"Int08\"\n   \"@internal A signed or unsigned 8-bit immediate value\"\n   (and (match_code \"const_int\")\n-       (match_test \"IN_RANGE (ival, (-1 << 8), (1 << 8) - 1)\")\n+       (match_test \"IN_RANGE (ival, (HOST_WIDE_INT_M1U << 8), (1 << 8) - 1)\")\n   )\n )\n \n (define_constraint \"Sint08\"\n   \"@internal A signed 8-bit immediate value\"\n   (and (match_code \"const_int\")\n-       (match_test \"IN_RANGE (ival, (-1 << 7), (1 << 7) - 1)\")\n+       (match_test \"IN_RANGE (ival, (HOST_WIDE_INT_M1U << 7), (1 << 7) - 1)\")\n   )\n )\n \n (define_constraint \"Sint16\"\n   \"@internal A signed 16-bit immediate value\"\n   (and (match_code \"const_int\")\n-       (match_test \"IN_RANGE (ival, (-1 << 15), (1 << 15) - 1)\")\n+       (match_test \"IN_RANGE (ival, (HOST_WIDE_INT_M1U << 15), (1 << 15) - 1)\")\n   )\n )\n \n (define_constraint \"Sint24\"\n   \"@internal A signed 24-bit immediate value\"\n   (and (match_code \"const_int\")\n-       (match_test \"IN_RANGE (ival, (-1 << 23), (1 << 23) - 1)\")\n+       (match_test \"IN_RANGE (ival, (HOST_WIDE_INT_M1U << 23), (1 << 23) - 1)\")\n   )\n )\n "}, {"sha": "6d911d2edb8a32f3c08615ef75c8af300addb458", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a53378d25f1661271ce304c86be04a250c9fcdeb/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a53378d25f1661271ce304c86be04a250c9fcdeb/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=a53378d25f1661271ce304c86be04a250c9fcdeb", "patch": "@@ -1561,7 +1561,7 @@ rx_get_stack_layout (unsigned int * lowest,\n      PUSHM.\n \n      FIXME: Is it worth improving this heuristic ?  */\n-  pushed_mask = (-1 << low) & ~(-1 << (high + 1));\n+  pushed_mask = (HOST_WIDE_INT_M1U << low) & ~(HOST_WIDE_INT_M1U << (high + 1));\n   unneeded_pushes = (pushed_mask & (~ save_mask)) & pushed_mask;\n \n   if ((fixed_reg && fixed_reg <= high)\n@@ -1667,7 +1667,7 @@ ok_for_max_constant (HOST_WIDE_INT val)\n \n   /* rx_max_constant_size specifies the maximum number\n      of bytes that can be used to hold a signed value.  */\n-  return IN_RANGE (val, (-1 << (rx_max_constant_size * 8)),\n+  return IN_RANGE (val, (HOST_WIDE_INT_M1U << (rx_max_constant_size * 8)),\n \t\t        ( 1 << (rx_max_constant_size * 8)));\n }\n "}]}