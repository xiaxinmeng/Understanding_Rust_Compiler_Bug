{"sha": "8975220280e19103df314fc6cbf54a44824fdd83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk3NTIyMDI4MGUxOTEwM2RmMzE0ZmM2Y2JmNTRhNDQ4MjRmZGQ4Mw==", "commit": {"author": {"name": "Herman A.J. ten Brugge", "email": "Haj.Ten.Brugge@net.HCC.nl", "date": "1998-06-24T22:40:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-06-24T22:40:29Z"}, "message": "expr.c (expand_assignment): Rework address calculation for structure field members to expose more invariant...\n\n        * expr.c (expand_assignment): Rework address calculation for structure\n        field members to expose more invariant computations to the loop\n        optimizer.\n        (expand_expr): Likewise.\n\nFrom-SVN: r20705", "tree": {"sha": "1b095b46e1f5dc4f113f58e85bef3d80e30dee5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b095b46e1f5dc4f113f58e85bef3d80e30dee5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8975220280e19103df314fc6cbf54a44824fdd83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8975220280e19103df314fc6cbf54a44824fdd83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8975220280e19103df314fc6cbf54a44824fdd83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8975220280e19103df314fc6cbf54a44824fdd83/comments", "author": null, "committer": null, "parents": [{"sha": "c358412fe862074065968caec2e318a8b5d9f4ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c358412fe862074065968caec2e318a8b5d9f4ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c358412fe862074065968caec2e318a8b5d9f4ee"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "096ddb2868bbf65d0a316a04086a5c052a225d20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8975220280e19103df314fc6cbf54a44824fdd83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8975220280e19103df314fc6cbf54a44824fdd83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8975220280e19103df314fc6cbf54a44824fdd83", "patch": "@@ -1,3 +1,10 @@\n+1998-06-22 Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n+\n+\t* expr.c (expand_assignment): Rework address calculation for structure\n+\tfield members to expose more invariant computations to the loop\n+\toptimizer.\n+\t(expand_expr): Likewise.\n+\n Wed Jun 24 22:44:22 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* local-alloc.c (block_alloc): Do not try to avoid false dependencies"}, {"sha": "91134d393caaacb657e4995fd6d32e78c992a78b", "filename": "gcc/expr.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8975220280e19103df314fc6cbf54a44824fdd83/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8975220280e19103df314fc6cbf54a44824fdd83/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8975220280e19103df314fc6cbf54a44824fdd83", "patch": "@@ -2920,6 +2920,26 @@ expand_assignment (to, from, want_value, suggest_reg)\n #endif\n \t    }\n \n+\t  if (GET_CODE (to_rtx) == MEM\n+\t      && GET_MODE (to_rtx) == BLKmode\n+\t      && bitsize\n+\t      && (bitpos % bitsize) == 0 \n+\t      && (bitsize % GET_MODE_ALIGNMENT (mode1)) == 0\n+\t      && (alignment * BITS_PER_UNIT) == GET_MODE_ALIGNMENT (mode1))\n+\t    {\n+\t      rtx temp = change_address (to_rtx, mode1,\n+\t\t\t\t         plus_constant (XEXP (to_rtx, 0),\n+\t\t\t\t\t\t        (bitpos /\n+\t\t\t\t\t\t         BITS_PER_UNIT)));\n+\t      if (GET_CODE (XEXP (temp, 0)) == REG)\n+\t        to_rtx = temp;\n+\t      else\n+\t\tto_rtx = change_address (to_rtx, mode1,\n+\t\t\t\t         force_reg (GET_MODE (XEXP (temp, 0)),\n+\t\t\t\t\t\t    XEXP (temp, 0)));\n+\t      bitpos = 0;\n+\t    }\n+\n \t  to_rtx = change_address (to_rtx, VOIDmode,\n \t\t\t\t   gen_rtx_PLUS (ptr_mode, XEXP (to_rtx, 0),\n \t\t\t\t\t\t force_reg (ptr_mode, offset_rtx)));\n@@ -5918,6 +5938,27 @@ expand_expr (exp, target, tmode, modifier)\n #endif\n \t      }\n \n+\t    if (GET_CODE (op0) == MEM\n+\t\t&& GET_MODE (op0) == BLKmode\n+\t\t&& bitsize\n+\t\t&& (bitpos % bitsize) == 0 \n+\t\t&& (bitsize % GET_MODE_ALIGNMENT (mode1)) == 0\n+\t\t&& (alignment * BITS_PER_UNIT) == GET_MODE_ALIGNMENT (mode1))\n+\t      {\n+\t\trtx temp = change_address (op0, mode1,\n+\t\t\t\t\t   plus_constant (XEXP (op0, 0),\n+\t\t\t\t\t\t\t  (bitpos /\n+\t\t\t\t\t\t\t   BITS_PER_UNIT)));\n+\t\tif (GET_CODE (XEXP (temp, 0)) == REG)\n+\t\t  op0 = temp;\n+\t\telse\n+\t\t  op0 = change_address (op0, mode1,\n+\t\t\t\t\tforce_reg (GET_MODE (XEXP (temp, 0)),\n+\t\t\t\t\t\t   XEXP (temp, 0)));\n+\t\tbitpos = 0;\n+\t      }\n+\n+\n \t    op0 = change_address (op0, VOIDmode,\n \t\t\t\t  gen_rtx_PLUS (ptr_mode, XEXP (op0, 0),\n \t\t\t\t\t\tforce_reg (ptr_mode, offset_rtx)));"}]}