{"sha": "db72d7a1d62b2034c01d0ac725a27e887957486d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI3MmQ3YTFkNjJiMjAzNGMwMWQwYWM3MjVhMjdlODg3OTU3NDg2ZA==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@mhpcc.edu", "date": "1998-04-18T16:16:02Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1998-04-18T16:16:02Z"}, "message": "rs6000.md (floatsidf2_loadaddr): rs6000_fpmem_offset will be negative in a stackless frame.\n\n        * rs6000.md (floatsidf2_loadaddr): rs6000_fpmem_offset will be\n        negative in a stackless frame.\n        * rs6000.c (rs6000_stack_info): Don't include fixed-size link area\n        in stackless frame size.  Support 64-bit stackless frame size.\n        Combine fpmem offset calculations and don't add total_size to\n        offset if not pushing a stack frame.\n\nFrom-SVN: r19283", "tree": {"sha": "57a3df15674f6776c2f484defd025076efd8940b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57a3df15674f6776c2f484defd025076efd8940b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db72d7a1d62b2034c01d0ac725a27e887957486d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db72d7a1d62b2034c01d0ac725a27e887957486d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db72d7a1d62b2034c01d0ac725a27e887957486d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db72d7a1d62b2034c01d0ac725a27e887957486d/comments", "author": null, "committer": null, "parents": [{"sha": "a1ecb5ca07e249b185dce0eec10139b65deddb8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ecb5ca07e249b185dce0eec10139b65deddb8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1ecb5ca07e249b185dce0eec10139b65deddb8d"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "8a8b1927201230b4dbcfb12dedc7b188ee6f3beb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72d7a1d62b2034c01d0ac725a27e887957486d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72d7a1d62b2034c01d0ac725a27e887957486d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db72d7a1d62b2034c01d0ac725a27e887957486d", "patch": "@@ -1,3 +1,12 @@\n+Sat Apr 18 19:06:59 1998  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* rs6000.md (floatsidf2_loadaddr): rs6000_fpmem_offset will be\n+\tnegative in a stackless frame.\n+\t* rs6000.c (rs6000_stack_info): Don't include fixed-size link area\n+\tin stackless frame size.  Support 64-bit stackless frame size.\n+\tCombine fpmem offset calculations and don't add total_size to\n+\toffset if not pushing a stack frame.\n+\n Sat Apr 18 15:41:16 1998  Jim Wilson  <wilson@cygnus.com>\n \n \t* regmove.c (fixup_match_1): In three places, in flag_exceptions"}, {"sha": "f901cb06a1baef94e2bddec0b4f28af181827e1c", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72d7a1d62b2034c01d0ac725a27e887957486d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72d7a1d62b2034c01d0ac725a27e887957486d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=db72d7a1d62b2034c01d0ac725a27e887957486d", "patch": "@@ -3228,10 +3228,13 @@ rs6000_stack_info ()\n \n   info_ptr->total_size   = RS6000_ALIGN (total_raw_size, ABI_STACK_BOUNDARY / BITS_PER_UNIT);\n \n-  /* Determine if we need to allocate any stack frame.\n-     For AIX We need to push the stack if a frame pointer is needed (because\n-     the stack might be dynamically adjusted), if we are debugging, if the\n-     total stack size is more than 220 bytes, or if we make calls.\n+  /* Determine if we need to allocate any stack frame:\n+\n+     For AIX we need to push the stack if a frame pointer is needed (because\n+     the stack might be dynamically adjusted), if we are debugging, if we\n+     make calls, or if the sum of fp_save, gp_save, fpmem, and local variables\n+     are more than the space needed to save all non-volatile registers:\n+     32-bit: 18*8 + 19*4 = 220 or 64-bit: 18*8 + 19*8 = 296\n \n      For V.4 we don't have the stack cushion that AIX uses, but assume that\n      the debugger can handle stackless frames.  */\n@@ -3247,7 +3250,8 @@ rs6000_stack_info ()\n   else\n     info_ptr->push_p = (frame_pointer_needed\n \t\t\t|| write_symbols != NO_DEBUG\n-\t\t\t|| info_ptr->total_size > 220);\n+\t\t\t|| ((info_ptr->total_size - info_ptr->fixed_size)\n+\t\t\t    > (TARGET_32BIT ? 220 : 296)));\n \n   /* Calculate the offsets */\n   switch (abi)\n@@ -3289,7 +3293,15 @@ rs6000_stack_info ()\n     }\n \n   if (info_ptr->fpmem_p)\n-    info_ptr->fpmem_offset = STARTING_FRAME_OFFSET - info_ptr->total_size + info_ptr->vars_size;\n+    {\n+      info_ptr->fpmem_offset = info_ptr->main_save_offset - info_ptr->fpmem_size;\n+      rs6000_fpmem_size   = info_ptr->fpmem_size;\n+      rs6000_fpmem_offset = info_ptr->push_p\n+\t  ? info_ptr->total_size + info_ptr->fpmem_offset\n+\t  : info_ptr->fpmem_offset;\n+    }\n+  else\n+    info_ptr->fpmem_offset = 0;  \n \n   /* Zero offsets if we're not saving those registers */\n   if (!info_ptr->fp_size)\n@@ -3310,14 +3322,6 @@ rs6000_stack_info ()\n   if (!info_ptr->main_save_p)\n     info_ptr->main_save_offset = 0;\n \n-  if (!info_ptr->fpmem_p)\n-    info_ptr->fpmem_offset = 0;\n-  else\n-    {\n-      rs6000_fpmem_size   = info_ptr->fpmem_size;\n-      rs6000_fpmem_offset = info_ptr->total_size + info_ptr->fpmem_offset;\n-    }\n-\n   return info_ptr;\n }\n "}, {"sha": "71a14e58ee9ecdd3e86b35b8adff366e30010798", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db72d7a1d62b2034c01d0ac725a27e887957486d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db72d7a1d62b2034c01d0ac725a27e887957486d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=db72d7a1d62b2034c01d0ac725a27e887957486d", "patch": "@@ -3701,8 +3701,6 @@\n       xop[2] = GEN_INT ((rs6000_fpmem_offset >> 16) + ((rs6000_fpmem_offset & 0x8000) >> 15));\n       output_asm_insn (\\\"{cau|addis} %0,%1,%2\\\", xop);\n     }\n-  else if (rs6000_fpmem_offset < 0)\n-    abort ();\n \n   return \\\"\\\";\n }\""}]}