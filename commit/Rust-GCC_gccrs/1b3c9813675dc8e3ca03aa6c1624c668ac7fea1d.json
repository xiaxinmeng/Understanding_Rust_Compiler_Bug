{"sha": "1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIzYzk4MTM2NzVkYzhlM2NhMDNhYTZjMTYyNGM2NjhhYzdmZWExZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-20T11:21:12Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-20T11:24:08Z"}, "message": "Plug loophole in string store merging\n\nThere is a loophole in new string store merging support added recently:\nit does not check that the stores are consecutive, which is obviously\nrequired if you want to concatenate them...  Simple fix attached, the\nnice thing being that it can fall back to the regular processing if\nany hole is detected in the series of stores, thanks to the handling\nof STRING_CST by native_encode_expr.\n\ngcc/ChangeLog:\n\t* gimple-ssa-store-merging.c (struct merged_store_group): Add\n\tnew 'consecutive' field.\n\t(merged_store_group): Set it to true.\n\t(do_merge): Set it to false if the store is not consecutive and\n\tset string_concatenation to false in this case.\n\t(merge_into): Call do_merge on entry.\n\t(merge_overlapping): Likewise.\n\ngcc/testsuite/ChangeLog:\n\t* gnat.dg/opt90a.adb: New test.\n\t* gnat.dg/opt90b.adb: Likewise.\n\t* gnat.dg/opt90c.adb: Likewise.\n\t* gnat.dg/opt90d.adb: Likewise.\n\t* gnat.dg/opt90e.adb: Likewise.\n\t* gnat.dg/opt90a_pkg.ads: New helper.\n\t* gnat.dg/opt90b_pkg.ads: Likewise.\n\t* gnat.dg/opt90c_pkg.ads: Likewise.\n\t* gnat.dg/opt90d_pkg.ads: Likewise.\n\t* gnat.dg/opt90e_pkg.ads: Likewise.", "tree": {"sha": "d8a03ef598966b995f46708c34c190214fe35b7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8a03ef598966b995f46708c34c190214fe35b7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/comments", "author": null, "committer": null, "parents": [{"sha": "cd287abe8cd11cfe9b230b0c9f28e86ecd7859e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd287abe8cd11cfe9b230b0c9f28e86ecd7859e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd287abe8cd11cfe9b230b0c9f28e86ecd7859e6"}], "stats": {"total": 177, "additions": 173, "deletions": 4}, "files": [{"sha": "17a4250d77f4e54ceaaeefd80c1e64e022fdd22c", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "patch": "@@ -1450,6 +1450,7 @@ class merged_store_group\n   bool bit_insertion;\n   bool string_concatenation;\n   bool only_constants;\n+  bool consecutive;\n   unsigned int first_nonmergeable_order;\n   int lp_nr;\n \n@@ -1822,6 +1823,7 @@ merged_store_group::merged_store_group (store_immediate_info *info)\n   bit_insertion = info->rhs_code == BIT_INSERT_EXPR;\n   string_concatenation = info->rhs_code == STRING_CST;\n   only_constants = info->rhs_code == INTEGER_CST;\n+  consecutive = true;\n   first_nonmergeable_order = ~0U;\n   lp_nr = info->lp_nr;\n   unsigned HOST_WIDE_INT align_bitpos = 0;\n@@ -1957,20 +1959,27 @@ merged_store_group::do_merge (store_immediate_info *info)\n       first_stmt = stmt;\n     }\n \n+  if (info->bitpos != start + width)\n+    consecutive = false;\n+\n   /* We need to use extraction if there is any bit-field.  */\n   if (info->rhs_code == BIT_INSERT_EXPR)\n     {\n       bit_insertion = true;\n       gcc_assert (!string_concatenation);\n     }\n \n-  /* We need to use concatenation if there is any string.  */\n+  /* We want to use concatenation if there is any string.  */\n   if (info->rhs_code == STRING_CST)\n     {\n       string_concatenation = true;\n       gcc_assert (!bit_insertion);\n     }\n \n+  /* But we cannot use it if we don't have consecutive stores.  */\n+  if (!consecutive)\n+    string_concatenation = false;\n+\n   if (info->rhs_code != INTEGER_CST)\n     only_constants = false;\n }\n@@ -1982,12 +1991,13 @@ merged_store_group::do_merge (store_immediate_info *info)\n void\n merged_store_group::merge_into (store_immediate_info *info)\n {\n+  do_merge (info);\n+\n   /* Make sure we're inserting in the position we think we're inserting.  */\n   gcc_assert (info->bitpos >= start + width\n \t      && info->bitregion_start <= bitregion_end);\n \n   width = info->bitpos + info->bitsize - start;\n-  do_merge (info);\n }\n \n /* Merge a store described by INFO into this merged store.\n@@ -1997,11 +2007,11 @@ merged_store_group::merge_into (store_immediate_info *info)\n void\n merged_store_group::merge_overlapping (store_immediate_info *info)\n {\n+  do_merge (info);\n+\n   /* If the store extends the size of the group, extend the width.  */\n   if (info->bitpos + info->bitsize > start + width)\n     width = info->bitpos + info->bitsize - start;\n-\n-  do_merge (info);\n }\n \n /* Go through all the recorded stores in this group in program order and"}, {"sha": "7de628914ccd3a12fa73c79b04b3138346dcd0fb", "filename": "gcc/testsuite/gnat.dg/opt90a.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90a.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90a.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90a.adb?ref=1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do run }\n+-- { dg-options \"-O2\" }\n+\n+with Ada.Calendar; use Ada.Calendar;\n+with Opt90a_Pkg; use Opt90a_Pkg;\n+\n+procedure Opt90a is\n+  B : constant Integer := Year (Clock);\n+  V : Data;\n+\n+begin\n+  V := (R => (A => 0, B => B, C => \"000000000000\"));\n+  if V.R.B /= B then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "10a527b8d8106ffabd9243af93b6ba9a8562ebe1", "filename": "gcc/testsuite/gnat.dg/opt90a_pkg.ads", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90a_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90a_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90a_pkg.ads?ref=1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "patch": "@@ -0,0 +1,15 @@\n+package Opt90a_Pkg is\n+\n+  type Rec is record\n+    A : Short_Short_Integer;\n+    B : Integer;\n+    C : String (1 .. 12);\n+  end record;\n+  pragma Pack (Rec);\n+  for Rec'Alignment use 1;\n+\n+  type Data is tagged record\n+    R : Rec;\n+  end record;\n+\n+end Opt90a_Pkg;"}, {"sha": "6da58bbcc7eafceb39a13b15200ddd89e2a837f7", "filename": "gcc/testsuite/gnat.dg/opt90b.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90b.adb?ref=1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do run }\n+-- { dg-options \"-O2\" }\n+\n+with Ada.Calendar; use Ada.Calendar;\n+with Opt90b_Pkg; use Opt90b_Pkg;\n+\n+procedure Opt90b is\n+  B : constant Integer := Year (Clock);\n+  V : Data;\n+\n+begin\n+  V := (R => (A => 0, B => B, C => 0, D => \"000000000000\"));\n+  if V.R.B /= B then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "f0b233c528e26a16f725cc4c4226e06e69d5fb28", "filename": "gcc/testsuite/gnat.dg/opt90b_pkg.ads", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90b_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90b_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90b_pkg.ads?ref=1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "patch": "@@ -0,0 +1,16 @@\n+package Opt90b_Pkg is\n+\n+  type Rec is record\n+    A : Short_Short_Integer;\n+    B : Integer;\n+    C : Short_Integer;\n+    D : String (1 .. 12);\n+  end record;\n+  pragma Pack (Rec);\n+  for Rec'Alignment use 1;\n+\n+  type Data is tagged record\n+    R : Rec;\n+  end record;\n+\n+end Opt90b_Pkg;"}, {"sha": "b4f4c2790eb871741b269f8a440ae7579f014ee3", "filename": "gcc/testsuite/gnat.dg/opt90c.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90c.adb?ref=1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do run }\n+-- { dg-options \"-O2\" }\n+\n+with Ada.Calendar; use Ada.Calendar;\n+with Opt90c_Pkg; use Opt90c_Pkg;\n+\n+procedure Opt90c is\n+  B : constant Integer := Year (Clock);\n+  V : Data;\n+\n+begin\n+  V := (R => (A => 0, B => B, C => 0, D => \"000000000000\"));\n+  if V.R.B /= B then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "e772340dc1d2b6832182132651f58d99b99b78c0", "filename": "gcc/testsuite/gnat.dg/opt90c_pkg.ads", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90c_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90c_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90c_pkg.ads?ref=1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "patch": "@@ -0,0 +1,16 @@\n+package Opt90c_Pkg is\n+\n+  type Rec is record\n+    D : String (1 .. 12);\n+    B : Integer;\n+    A : Short_Short_Integer;\n+    C : Short_Integer;\n+  end record;\n+  pragma Pack (Rec);\n+  for Rec'Alignment use 1;\n+\n+  type Data is tagged record\n+    R : Rec;\n+  end record;\n+\n+end Opt90c_Pkg;"}, {"sha": "32ecb68964e9b65bf7c8011bd60e26e4da059b6a", "filename": "gcc/testsuite/gnat.dg/opt90d.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90d.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90d.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90d.adb?ref=1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do run }\n+-- { dg-options \"-O2\" }\n+\n+with Ada.Calendar; use Ada.Calendar;\n+with Opt90d_Pkg; use Opt90d_Pkg;\n+\n+procedure Opt90d is\n+  B : constant Integer := Year (Clock);\n+  V : Data;\n+\n+begin\n+  V := (R => (A => 0, B => B, C => 0, D => \"000000000000\"));\n+  if V.R.B /= B then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "a68b224893c7db244edb5025726922a8202c8743", "filename": "gcc/testsuite/gnat.dg/opt90d_pkg.ads", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90d_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90d_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90d_pkg.ads?ref=1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "patch": "@@ -0,0 +1,16 @@\n+package Opt90d_Pkg is\n+\n+  type Rec is record\n+    D : String (1 .. 12);\n+    C : Short_Integer;\n+    A : Short_Short_Integer;\n+    B : Integer;\n+  end record;\n+  pragma Pack (Rec);\n+  for Rec'Alignment use 1;\n+\n+  type Data is tagged record\n+    R : Rec;\n+  end record;\n+\n+end Opt90d_Pkg;"}, {"sha": "6d62774b6d97e85607ea4e65221cfab49fb8bc9f", "filename": "gcc/testsuite/gnat.dg/opt90e.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90e.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90e.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90e.adb?ref=1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "patch": "@@ -0,0 +1,16 @@\n+-- { dg-do run }\n+-- { dg-options \"-O2\" }\n+\n+with Ada.Calendar; use Ada.Calendar;\n+with Opt90e_Pkg; use Opt90e_Pkg;\n+\n+procedure Opt90e is\n+  B : constant Integer := Year (Clock);\n+  V : Data;\n+\n+begin\n+  V := (R => (A => 0, B => B, C => 0, D => \"000000000000\"));\n+  if V.R.B /= B then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "fba16d7a73872dbb569b1631e8d2a373a9568fef", "filename": "gcc/testsuite/gnat.dg/opt90e_pkg.ads", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90e_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90e_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt90e_pkg.ads?ref=1b3c9813675dc8e3ca03aa6c1624c668ac7fea1d", "patch": "@@ -0,0 +1,16 @@\n+package Opt90e_Pkg is\n+\n+  type Rec is record\n+    D : String (1 .. 12);\n+    A : Short_Short_Integer;\n+    B : Integer;\n+    C : Short_Integer;\n+  end record;\n+  pragma Pack (Rec);\n+  for Rec'Alignment use 1;\n+\n+  type Data is tagged record\n+    R : Rec;\n+  end record;\n+\n+end Opt90e_Pkg;"}]}