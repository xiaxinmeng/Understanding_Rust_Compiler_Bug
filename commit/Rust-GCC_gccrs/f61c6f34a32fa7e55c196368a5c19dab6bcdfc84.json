{"sha": "f61c6f34a32fa7e55c196368a5c19dab6bcdfc84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYxYzZmMzRhMzJmYTdlNTVjMTk2MzY4YTVjMTlkYWI2YmNkZmM4NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-02-28T15:47:18Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-02-28T15:47:18Z"}, "message": "re PR debug/47283 (ICE in refs_may_alias_p_1, at tree-ssa-alias.c)\n\n\tPR debug/47283\n\t* cfgexpand.c (convert_debug_memory_address): Add AS parameter.\n\tUse target address_mode and pointer_mode hooks instead of hardcoded\n\tPmode and ptr_mode.  Handle some simple cases of extending if\n\tPOINTERS_EXTEND_UNSIGNED < 0.\n\t(expand_debug_expr) <case MEM_REF, INDIRECT_REF, TARGET_MEM_REF>:\n\tCall convert_debug_memory_address.\n\t(expand_debug_expr) <case ADDR_EXPR>: Pass as to\n\tconvert_debug_memory_address.\n\nFrom-SVN: r170566", "tree": {"sha": "c5d323a9ceef1b87d50a4699d1d8a31a964badf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5d323a9ceef1b87d50a4699d1d8a31a964badf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f61c6f34a32fa7e55c196368a5c19dab6bcdfc84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61c6f34a32fa7e55c196368a5c19dab6bcdfc84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f61c6f34a32fa7e55c196368a5c19dab6bcdfc84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61c6f34a32fa7e55c196368a5c19dab6bcdfc84/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b500976241ac4b41d59489cab9fe3a9eccbc734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b500976241ac4b41d59489cab9fe3a9eccbc734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b500976241ac4b41d59489cab9fe3a9eccbc734"}], "stats": {"total": 83, "additions": 76, "deletions": 7}, "files": [{"sha": "b01637c3d7b11f193522995ab1ebc7e3fa61991b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61c6f34a32fa7e55c196368a5c19dab6bcdfc84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61c6f34a32fa7e55c196368a5c19dab6bcdfc84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f61c6f34a32fa7e55c196368a5c19dab6bcdfc84", "patch": "@@ -1,5 +1,15 @@\n 2011-02-28  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/47283\n+\t* cfgexpand.c (convert_debug_memory_address): Add AS parameter.\n+\tUse target address_mode and pointer_mode hooks instead of hardcoded\n+\tPmode and ptr_mode.  Handle some simple cases of extending if\n+\tPOINTERS_EXTEND_UNSIGNED < 0.\n+\t(expand_debug_expr) <case MEM_REF, INDIRECT_REF, TARGET_MEM_REF>:\n+\tCall convert_debug_memory_address.\n+\t(expand_debug_expr) <case ADDR_EXPR>: Pass as to\n+\tconvert_debug_memory_address.\n+\n \tPR middle-end/46790\n \t* configure.ac (HAVE_LD_EH_GC_SECTIONS_BUG): New test.\n \t* configure: Regenerated."}, {"sha": "ecfd1a50f39fe01dfce31d4bdf40aff05650e49e", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 66, "deletions": 7, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61c6f34a32fa7e55c196368a5c19dab6bcdfc84/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61c6f34a32fa7e55c196368a5c19dab6bcdfc84/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=f61c6f34a32fa7e55c196368a5c19dab6bcdfc84", "patch": "@@ -2292,15 +2292,21 @@ round_udiv_adjust (enum machine_mode mode, rtx mod, rtx op1)\n    any rtl.  */\n \n static rtx\n-convert_debug_memory_address (enum machine_mode mode, rtx x)\n+convert_debug_memory_address (enum machine_mode mode, rtx x,\n+\t\t\t      addr_space_t as)\n {\n   enum machine_mode xmode = GET_MODE (x);\n \n #ifndef POINTERS_EXTEND_UNSIGNED\n-  gcc_assert (mode == Pmode);\n+  gcc_assert (mode == Pmode\n+\t      || mode == targetm.addr_space.address_mode (as));\n   gcc_assert (xmode == mode || xmode == VOIDmode);\n #else\n-  gcc_assert (mode == Pmode || mode == ptr_mode);\n+  rtx temp;\n+  enum machine_mode address_mode = targetm.addr_space.address_mode (as);\n+  enum machine_mode pointer_mode = targetm.addr_space.pointer_mode (as);\n+\n+  gcc_assert (mode == address_mode || mode == pointer_mode);\n \n   if (GET_MODE (x) == mode || GET_MODE (x) == VOIDmode)\n     return x;\n@@ -2314,7 +2320,47 @@ convert_debug_memory_address (enum machine_mode mode, rtx x)\n   else if (!POINTERS_EXTEND_UNSIGNED)\n     x = gen_rtx_SIGN_EXTEND (mode, x);\n   else\n-    gcc_unreachable ();\n+    {\n+      switch (GET_CODE (x))\n+\t{\n+\tcase SUBREG:\n+\t  if ((SUBREG_PROMOTED_VAR_P (x)\n+\t       || (REG_P (SUBREG_REG (x)) && REG_POINTER (SUBREG_REG (x)))\n+\t       || (GET_CODE (SUBREG_REG (x)) == PLUS\n+\t\t   && REG_P (XEXP (SUBREG_REG (x), 0))\n+\t\t   && REG_POINTER (XEXP (SUBREG_REG (x), 0))\n+\t\t   && CONST_INT_P (XEXP (SUBREG_REG (x), 1))))\n+\t      && GET_MODE (SUBREG_REG (x)) == mode)\n+\t    return SUBREG_REG (x);\n+\t  break;\n+\tcase LABEL_REF:\n+\t  temp = gen_rtx_LABEL_REF (mode, XEXP (x, 0));\n+\t  LABEL_REF_NONLOCAL_P (temp) = LABEL_REF_NONLOCAL_P (x);\n+\t  return temp;\n+\tcase SYMBOL_REF:\n+\t  temp = shallow_copy_rtx (x);\n+\t  PUT_MODE (temp, mode);\n+\t  return temp;\n+\tcase CONST:\n+\t  temp = convert_debug_memory_address (mode, XEXP (x, 0), as);\n+\t  if (temp)\n+\t    temp = gen_rtx_CONST (mode, temp);\n+\t  return temp;\n+\tcase PLUS:\n+\tcase MINUS:\n+\t  if (CONST_INT_P (XEXP (x, 1)))\n+\t    {\n+\t      temp = convert_debug_memory_address (mode, XEXP (x, 0), as);\n+\t      if (temp)\n+\t\treturn gen_rtx_fmt_ee (GET_CODE (x), mode, temp, XEXP (x, 1));\n+\t    }\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+      /* Don't know how to express ptr_extend as operation in debug info.  */\n+      return NULL;\n+    }\n #endif /* POINTERS_EXTEND_UNSIGNED */\n \n   return x;\n@@ -2558,8 +2604,12 @@ expand_debug_expr (tree exp)\n       else\n \tas = ADDR_SPACE_GENERIC;\n \n-      op0 = gen_rtx_MEM (mode, op0);\n+      op0 = convert_debug_memory_address (targetm.addr_space.address_mode (as),\n+\t\t\t\t\t  op0, as);\n+      if (op0 == NULL_RTX)\n+\treturn NULL;\n \n+      op0 = gen_rtx_MEM (mode, op0);\n       set_mem_attributes (op0, exp, 0);\n       set_mem_addr_space (op0, as);\n \n@@ -2575,7 +2625,15 @@ expand_debug_expr (tree exp)\n       if (!op0)\n \treturn NULL;\n \n-      as = TYPE_ADDR_SPACE (TREE_TYPE (exp));\n+      if (POINTER_TYPE_P (TREE_TYPE (exp)))\n+\tas = TYPE_ADDR_SPACE (TREE_TYPE (TREE_TYPE (exp)));\n+      else\n+\tas = ADDR_SPACE_GENERIC;\n+\n+      op0 = convert_debug_memory_address (targetm.addr_space.address_mode (as),\n+\t\t\t\t\t  op0, as);\n+      if (op0 == NULL_RTX)\n+\treturn NULL;\n \n       op0 = gen_rtx_MEM (mode, op0);\n \n@@ -3039,7 +3097,8 @@ expand_debug_expr (tree exp)\n \t  return NULL;\n \t}\n \n-      op0 = convert_debug_memory_address (mode, XEXP (op0, 0));\n+      as = TYPE_ADDR_SPACE (TREE_TYPE (exp));\n+      op0 = convert_debug_memory_address (mode, XEXP (op0, 0), as);\n \n       return op0;\n "}]}