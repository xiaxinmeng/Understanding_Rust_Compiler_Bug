{"sha": "453773df32204ae524683b098444c2fa4ace8033", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUzNzczZGYzMjIwNGFlNTI0NjgzYjA5ODQ0NGMyZmE0YWNlODAzMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-08-21T15:15:07Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-08-21T15:15:07Z"}, "message": "re PR target/46091 (missed optimization: x86 bt/btc/bts instructions)\n\n\tPR target/46091\n\t* config/i386/i386.md (*btsq_imm): Rename from *btsq.\n\t(*btrq_imm): Rename from *btrq.\n\t(*btcq_imm): Rename from *btcq.\n\t(btsc): New code attribute.\n\t(*<btsc><mode>): New insn pattern.\n\t(*btr<mode>): Ditto.\n\t(*<btsc><mode>_mask): New insn_and_split pattern.\n\t(*btr<mode>_mask): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/46091\n\t* gcc.target/i386/pr46091-4.c: New test.\n\t* gcc.target/i386/pr46091-4a.c: Ditto.\n\t* gcc.target/i386/pr46091-5.c: Ditto.\n\t* gcc.target/i386/pr46091-5a.c: Ditto.\n\nFrom-SVN: r251235", "tree": {"sha": "3f9aa756b02d7fb4ed312861acd83d3be7bab864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f9aa756b02d7fb4ed312861acd83d3be7bab864"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/453773df32204ae524683b098444c2fa4ace8033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453773df32204ae524683b098444c2fa4ace8033", "html_url": "https://github.com/Rust-GCC/gccrs/commit/453773df32204ae524683b098444c2fa4ace8033", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453773df32204ae524683b098444c2fa4ace8033/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c0378f467abaa9190d52c3930ec4c825416f72f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c0378f467abaa9190d52c3930ec4c825416f72f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c0378f467abaa9190d52c3930ec4c825416f72f"}], "stats": {"total": 252, "additions": 239, "deletions": 13}, "files": [{"sha": "58f3cd1f342af974b113966f23c140345fc958a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453773df32204ae524683b098444c2fa4ace8033/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453773df32204ae524683b098444c2fa4ace8033/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=453773df32204ae524683b098444c2fa4ace8033", "patch": "@@ -1,3 +1,15 @@\n+2017-08-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/46091\n+\t* config/i386/i386.md (*btsq_imm): Rename from *btsq.\n+\t(*btrq_imm): Rename from *btrq.\n+\t(*btcq_imm): Rename from *btcq.\n+\t(btsc): New code attribute.\n+\t(*<btsc><mode>): New insn pattern.\n+\t(*btr<mode>): Ditto.\n+\t(*<btsc><mode>_mask): New insn_and_split pattern.\n+\t(*btr<mode>_mask): Ditto.\n+\n 2017-08-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "f9840609155789ca100c6d6995299892098d2be7", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 99, "deletions": 13, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453773df32204ae524683b098444c2fa4ace8033/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453773df32204ae524683b098444c2fa4ace8033/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=453773df32204ae524683b098444c2fa4ace8033", "patch": "@@ -1081,6 +1081,9 @@\n ;; Immediate operand constraint for shifts.\n (define_mode_attr S [(QI \"I\") (HI \"I\") (SI \"I\") (DI \"J\") (TI \"O\")])\n \n+;; Print register name in the specified mode.\n+(define_mode_attr k [(QI \"b\") (HI \"w\") (SI \"k\") (DI \"q\")])\n+\n ;; General operand predicate for integer modes.\n (define_mode_attr general_operand\n \t[(QI \"general_operand\")\n@@ -10998,20 +11001,103 @@\n \f\n ;; Bit set / bit test instructions\n \n-;; %%% bts, btr, btc, bt.\n-;; In general these instructions are *slow* with variable operand\n-;; when applied to memory.  When applied to registers, it depends\n-;; on the cpu implementation.  They're never faster than the\n-;; corresponding and/ior/xor operations, so with 32-bit there's\n-;; no point.  But in 64-bit, we can't hold the relevant immediates\n-;; within the instruction itself, so operating on bits in the high\n-;; 32-bits of a register becomes easier.\n+;; %%% bts, btr, btc\n+\n+;; These instructions are *slow* when applied to memory.\n+\n+(define_code_attr btsc [(ior \"bts\") (xor \"btc\")])\n+\n+(define_insn \"*<btsc><mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(any_or:SWI48\n+\t  (ashift:SWI48 (const_int 1)\n+\t\t\t(match_operand:QI 1 \"register_operand\" \"r\"))\n+\t  (match_operand:SWI48 2 \"nonimmediate_operand\" \"0\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_USE_BT\"\n+  \"<btsc>{<imodesuffix>}\\t{%<k>1, %0|%0, %<k>1}\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"znver1_decode\" \"double\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; Avoid useless masking of count operand.\n+(define_insn_and_split \"*<btsc><mode>_mask\"\n+  [(set (match_operand:SWI48 0 \"register_operand\")\n+\t(any_or:SWI48\n+\t  (ashift:SWI48\n+\t    (const_int 1)\n+\t    (subreg:QI\n+\t      (and:SI\n+\t\t(match_operand:SI 1 \"register_operand\")\n+\t\t(match_operand:SI 2 \"const_int_operand\")) 0))\n+\t  (match_operand:SWI48 3 \"nonimmediate_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"(INTVAL (operands[2]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n+   == GET_MODE_BITSIZE (<MODE>mode)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (any_or:SWI48\n+\t     (ashift:SWI48 (const_int 1)\n+\t\t\t   (match_dup 1))\n+\t     (match_dup 3)))\n+      (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[1] = gen_lowpart (QImode, operands[1]);\")\n+\n+(define_insn \"*btr<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(and:SWI48\n+\t  (rotate:SWI48 (const_int -2)\n+\t\t\t(match_operand:QI 1 \"register_operand\" \"r\"))\n+\t(match_operand:SWI48 2 \"nonimmediate_operand\" \"0\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_USE_BT\"\n+  \"btr{<imodesuffix>}\\t{%<k>1, %0|%0, %<k>1}\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"znver1_decode\" \"double\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+;; Avoid useless masking of count operand.\n+(define_insn_and_split \"*btr<mode>_mask\"\n+  [(set (match_operand:SWI48 0 \"register_operand\")\n+\t(and:SWI48\n+\t  (rotate:SWI48\n+\t    (const_int -2)\n+\t    (subreg:QI\n+\t      (and:SI\n+\t\t(match_operand:SI 1 \"register_operand\")\n+\t\t(match_operand:SI 2 \"const_int_operand\")) 0))\n+\t  (match_operand:SWI48 3 \"nonimmediate_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"(INTVAL (operands[2]) & (GET_MODE_BITSIZE (<MODE>mode)-1))\n+   == GET_MODE_BITSIZE (<MODE>mode)-1\n+   && can_create_pseudo_p ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (and:SWI48\n+\t     (rotate:SWI48 (const_int -2)\n+\t\t\t   (match_dup 1))\n+\t     (match_dup 3)))\n+      (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[1] = gen_lowpart (QImode, operands[1]);\")\n+\n+;; These instructions are never faster than the corresponding\n+;; and/ior/xor operations when using immediate operand, so with\n+;; 32-bit there's no point.  But in 64-bit, we can't hold the\n+;; relevant immediates within the instruction itself, so operating\n+;; on bits in the high 32-bits of a register becomes easier.\n ;;\n ;; These are slow on Nocona, but fast on Athlon64.  We do require the use\n ;; of btrq and btcq for corner cases of post-reload expansion of absdf and\n ;; negdf respectively, so they can never be disabled entirely.\n \n-(define_insn \"*btsq\"\n+(define_insn \"*btsq_imm\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"nonimmediate_operand\" \"+rm\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand 1 \"const_0_to_63_operand\" \"J\"))\n@@ -11024,7 +11110,7 @@\n    (set_attr \"znver1_decode\" \"double\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"*btrq\"\n+(define_insn \"*btrq_imm\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"nonimmediate_operand\" \"+rm\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand 1 \"const_0_to_63_operand\" \"J\"))\n@@ -11037,7 +11123,7 @@\n    (set_attr \"znver1_decode\" \"double\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"*btcq\"\n+(define_insn \"*btcq_imm\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"nonimmediate_operand\" \"+rm\")\n \t\t\t (const_int 1)\n \t\t\t (match_operand 1 \"const_0_to_63_operand\" \"J\"))\n@@ -11125,6 +11211,8 @@\n     }\n })\n \n+;; %%% bt\n+\n (define_insn \"*bt<mode>\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n@@ -13148,8 +13236,6 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_mode_attr k [(SI \"k\") (DI \"q\")])\n-\n (define_insn \"*bmi2_bzhi_<mode>3_1\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(zero_extract:SWI48"}, {"sha": "006f115c508e8ae5af8533bc2afd6de78f2663cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453773df32204ae524683b098444c2fa4ace8033/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453773df32204ae524683b098444c2fa4ace8033/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=453773df32204ae524683b098444c2fa4ace8033", "patch": "@@ -1,3 +1,11 @@\n+2017-08-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/46091\n+\t* gcc.target/i386/pr46091-4.c: New test.\n+\t* gcc.target/i386/pr46091-4a.c: Ditto.\n+\t* gcc.target/i386/pr46091-5.c: Ditto.\n+\t* gcc.target/i386/pr46091-5a.c: Ditto.\n+\n 2017-08-21  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/81899"}, {"sha": "af2cfaec86f4a0e8176476241cf939a088e45244", "filename": "gcc/testsuite/gcc.target/i386/pr46091-4.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453773df32204ae524683b098444c2fa4ace8033/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453773df32204ae524683b098444c2fa4ace8033/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-4.c?ref=453773df32204ae524683b098444c2fa4ace8033", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int test_1 (int x, int n)\n+{\n+  x &= ~(0x01 << n);\n+\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler \"btr\" } } */\n+\n+int test_2 (int x, int n)\n+{\n+  x |= (0x01 << n);\n+\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler \"bts\" } } */\n+\n+int test_3 (int x, int n)\n+{\n+  x ^= (0x01 << n);\n+\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler \"btc\" } } */"}, {"sha": "5874aee31a96683d710c3fd0002830730c0f1c9d", "filename": "gcc/testsuite/gcc.target/i386/pr46091-4a.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453773df32204ae524683b098444c2fa4ace8033/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453773df32204ae524683b098444c2fa4ace8033/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-4a.c?ref=453773df32204ae524683b098444c2fa4ace8033", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int test_1 (int x, int n)\n+{\n+  n &= 0x1f;\n+\n+  x &= ~(0x01 << n);\n+\n+  return x;\n+}\n+\n+int test_2 (int x, int n)\n+{\n+  n &= 0x1f;\n+\n+  x |= (0x01 << n);\n+\n+  return x;\n+}\n+\n+int test_3 (int x, int n)\n+{\n+  n &= 0x1f;\n+\n+  x ^= (0x01 << n);\n+\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"and\\[lq\\]\\[ \\t\\]\" } } */"}, {"sha": "301702991048e089880419993cd3b47c421cb61d", "filename": "gcc/testsuite/gcc.target/i386/pr46091-5.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453773df32204ae524683b098444c2fa4ace8033/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453773df32204ae524683b098444c2fa4ace8033/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-5.c?ref=453773df32204ae524683b098444c2fa4ace8033", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+long test_1 (long x, int n)\n+{\n+  x &= ~((long)0x01 << n);\n+\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler \"btr\" } } */\n+\n+long test_2 (long x, int n)\n+{\n+  x |= ((long)0x01 << n);\n+\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler \"bts\" } } */\n+\n+long test_3 (long x, int n)\n+{\n+  x ^= ((long)0x01 << n);\n+\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler \"btc\" } } */"}, {"sha": "0fa2d9b7e9625bc4aed891839b4920b2b3474e56", "filename": "gcc/testsuite/gcc.target/i386/pr46091-5a.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453773df32204ae524683b098444c2fa4ace8033/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-5a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453773df32204ae524683b098444c2fa4ace8033/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-5a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr46091-5a.c?ref=453773df32204ae524683b098444c2fa4ace8033", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+\n+long test_1 (long x, int n)\n+{\n+  n &= 0x3f;\n+\n+  x &= ~((long)0x01 << n);\n+\n+  return x;\n+}\n+\n+long test_2 (long x, int n)\n+{\n+  n &= 0x3f;\n+\n+  x |= ((long)0x01 << n);\n+\n+  return x;\n+}\n+\n+long test_3 (long x, int n)\n+{\n+  n &= 0x3f;\n+\n+  x ^= ((long)0x01 << n);\n+\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-not \"and\\[lq\\]\\[ \\t\\]\" } } */"}]}