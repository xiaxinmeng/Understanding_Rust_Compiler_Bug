{"sha": "23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNkNGU0Y2M0YWNkMWRiZjc5NmE4ZTljOTA3M2U3MzkyZTVjMzZiOA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "2001-01-10T19:20:52Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-01-10T19:20:52Z"}, "message": "decl2.c (acceptable_java_type): Allow references too.\n\n2001-01-07  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n        * decl2.c (acceptable_java_type): Allow references too.\n        * init.c (build_java_class_ref): When using the new ABI, search\n        `class$' and have it mangled with `mangle_decl.'\n        * mangle.c (write_java_integer_type_codes): New function.\n        (write_builtin_type): Detect and mangle Java integer and real\n        types.\n\n(http://gcc.gnu.org/ml/gcc-patches/2001-01/msg00756.html)\n\nFrom-SVN: r38875", "tree": {"sha": "1dae871d7397de2419ccb90ff86a10f59790e08e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dae871d7397de2419ccb90ff86a10f59790e08e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8/comments", "author": null, "committer": null, "parents": [{"sha": "0adc3d8a92f1a6181f2f170a2019f2bc2a1b3c53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0adc3d8a92f1a6181f2f170a2019f2bc2a1b3c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0adc3d8a92f1a6181f2f170a2019f2bc2a1b3c53"}], "stats": {"total": 68, "additions": 64, "deletions": 4}, "files": [{"sha": "d431ffee9f49f71f0993136e485f3cfad39d993d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8", "patch": "@@ -57,6 +57,15 @@\n \tSet IDENTIFIER_CLASS_VALUE when replacing an existing binding.\n \tDon't set TREE_VALUE on the class_shadowed list.\n \n+2001-01-07  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+ \n+\t* decl2.c (acceptable_java_type): Allow references too. \n+\t* init.c (build_java_class_ref): When using the new ABI, search\n+\t`class$' and have it mangled with `mangle_decl.'\n+\t* mangle.c (write_java_integer_type_codes): New function.\n+\t(write_builtin_type): Detect and mangle Java integer and real\n+\ttypes.\n+ \n 2001-01-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl2.c (grokfield): Don't accept `asm' specifiers for"}, {"sha": "c41126aa777d7a402304924161cb5257e5540cb3", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8", "patch": "@@ -1336,7 +1336,7 @@ acceptable_java_type (type)\n {\n   if (TREE_CODE (type) == VOID_TYPE || TYPE_FOR_JAVA (type))\n     return 1;\n-  if (TREE_CODE (type) == POINTER_TYPE)\n+  if (TREE_CODE (type) == POINTER_TYPE || TREE_CODE (type) == REFERENCE_TYPE)\n     {\n       type = TREE_TYPE (type);\n       if (TREE_CODE (type) == RECORD_TYPE)"}, {"sha": "e9eddf9118efc3f77ba32c3088338d1c24790f13", "filename": "gcc/cp/init.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8", "patch": "@@ -2206,7 +2206,23 @@ build_java_class_ref (type)\n \tfatal(\"call to Java constructor, while `jclass' undefined\");\n       jclass_node = TREE_TYPE (jclass_node);\n     }\n-  name = build_static_name (type, CL_suffix);\n+\n+  /* Mangle the class$ field, new and old ABI */\n+  if (flag_new_abi)\n+    {\n+      tree field;\n+      for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n+\tif (DECL_NAME (field) == CL_suffix)\n+\t  {\n+\t    name = mangle_decl (field);\n+\t    break;\n+\t  }\n+      if (!field)\n+\tfatal (\"Can't find class$\");\n+    }\n+  else\n+    name = build_static_name (type, CL_suffix);\n+\n   class_decl = IDENTIFIER_GLOBAL_VALUE (name);\n   if (class_decl == NULL_TREE)\n     {"}, {"sha": "b4bb686d79f1157fb17952613d9a565752cb5995", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=23d4e4cc4acd1dbf796a8e9c9073e7392e5c36b8", "patch": "@@ -189,6 +189,10 @@ static inline void start_mangling PARAMS ((void));\n static inline const char *finish_mangling PARAMS ((void));\n static tree mangle_special_for_type PARAMS ((tree, const char *));\n \n+/* Foreign language functions. */\n+\n+static void write_java_integer_type_codes PARAMS ((tree));\n+\n /* Append a single character to the end of the mangled\n    representation.  */\n #define write_char(CHAR)                                              \\\n@@ -1446,6 +1450,8 @@ write_builtin_type (type)\n \t integer_type_nodes.  */\n       if (type == wchar_type_node)\n \twrite_char ('w');\n+      if (TYPE_FOR_JAVA (type))\n+\twrite_java_integer_type_codes (type);\n       else\n \t{\n \t  size_t itk;\n@@ -1473,9 +1479,11 @@ write_builtin_type (type)\n       break;\n \n     case REAL_TYPE:\n-      if (type == float_type_node)\n+      if (type == float_type_node\n+\t  || type == java_float_type_node)\n \twrite_char ('f');\n-      else if (type == double_type_node)\n+      else if (type == double_type_node\n+\t       || type == java_double_type_node)\n \twrite_char ('d');\n       else if (type == long_double_type_node)\n \twrite_char ('e');\n@@ -2280,3 +2288,30 @@ mangle_guard_variable (variable)\n   write_name (variable, /*ignore_local_scope=*/0);\n   return get_identifier (finish_mangling ());\n }\n+\n+\f\n+\n+/* Foreign language type mangling section.  */\n+\n+/* How to write the type codes for the integer Java type.  */\n+\n+static void\n+write_java_integer_type_codes (type)\n+     tree type;\n+{\n+  if (type == java_int_type_node)\n+    write_char ('i');\n+  else if (type == java_short_type_node)\n+    write_char ('s');\n+  else if (type == java_byte_type_node)\n+    write_char ('c');\n+  else if (type == java_char_type_node)\n+    write_char ('w');\n+  else if (type == java_long_type_node)\n+    write_char ('x');\n+  else if (type == java_boolean_type_node)\n+    write_char ('b');\n+  else\n+    my_friendly_abort (20001207);\n+}\n+"}]}