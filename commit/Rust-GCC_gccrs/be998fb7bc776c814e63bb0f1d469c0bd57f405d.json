{"sha": "be998fb7bc776c814e63bb0f1d469c0bd57f405d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU5OThmYjdiYzc3NmM4MTRlNjNiYjBmMWQ0NjljMGJkNTdmNDA1ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-11-04T23:14:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-11-04T23:14:14Z"}, "message": "fix\n\nFrom-SVN: r153922", "tree": {"sha": "30de6afd992e34c012f58a7bfdb4edd1bfbd9c27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30de6afd992e34c012f58a7bfdb4edd1bfbd9c27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be998fb7bc776c814e63bb0f1d469c0bd57f405d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be998fb7bc776c814e63bb0f1d469c0bd57f405d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be998fb7bc776c814e63bb0f1d469c0bd57f405d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be998fb7bc776c814e63bb0f1d469c0bd57f405d/comments", "author": null, "committer": null, "parents": [{"sha": "e3503aa8cfe91752b629f6e2a1d52736a21208dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3503aa8cfe91752b629f6e2a1d52736a21208dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3503aa8cfe91752b629f6e2a1d52736a21208dc"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "3adf9e0a1abae19704fda3d8754242577b8582f9", "filename": "gcc/cp/search.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be998fb7bc776c814e63bb0f1d469c0bd57f405d/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be998fb7bc776c814e63bb0f1d469c0bd57f405d/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=be998fb7bc776c814e63bb0f1d469c0bd57f405d", "patch": "@@ -218,7 +218,8 @@ lookup_base (tree t, tree base, base_access access, base_kind *kind_ptr)\n \n   /* If BASE is incomplete, it can't be a base of T--and instantiating it\n      might cause an error.  */\n-  if (t_binfo && (COMPLETE_TYPE_P (base) || TYPE_BEING_DEFINED (base)))\n+  if (t_binfo && CLASS_TYPE_P (base)\n+      && (COMPLETE_TYPE_P (base) || TYPE_BEING_DEFINED (base)))\n     {\n       struct lookup_base_data_s data;\n "}]}