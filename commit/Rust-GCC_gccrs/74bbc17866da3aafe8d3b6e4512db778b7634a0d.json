{"sha": "74bbc17866da3aafe8d3b6e4512db778b7634a0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRiYmMxNzg2NmRhM2FhZmU4ZDNiNmU0NTEyZGI3NzhiNzYzNGEwZA==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1999-03-22T16:32:31Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-03-22T16:32:31Z"}, "message": "Fix compile time warnings about unused parameters\n\nFrom-SVN: r25905", "tree": {"sha": "0d940fc8201c8b4be5126f0cecb96501afcf6ffe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d940fc8201c8b4be5126f0cecb96501afcf6ffe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74bbc17866da3aafe8d3b6e4512db778b7634a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74bbc17866da3aafe8d3b6e4512db778b7634a0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74bbc17866da3aafe8d3b6e4512db778b7634a0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74bbc17866da3aafe8d3b6e4512db778b7634a0d/comments", "author": null, "committer": null, "parents": [{"sha": "2e943e99a14ae202a867c40d71d8c8deeddf7641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e943e99a14ae202a867c40d71d8c8deeddf7641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e943e99a14ae202a867c40d71d8c8deeddf7641"}], "stats": {"total": 174, "additions": 87, "deletions": 87}, "files": [{"sha": "11fe4861949d8ae03cf24c4dad62a54e702f7ad2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74bbc17866da3aafe8d3b6e4512db778b7634a0d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74bbc17866da3aafe8d3b6e4512db778b7634a0d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74bbc17866da3aafe8d3b6e4512db778b7634a0d", "patch": "@@ -1,3 +1,40 @@\n+Mon Mar 22 16:18:27 1999  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* config/arm/elf.h (VALID_MACHINE_DECL_ATTRIBUTE): Do not bother\n+\tpassing ATTRIBUTES to arm_valid_machine_decl_attribute.\n+\t\n+\t* config/arm/coff.h (VALID_MACHINE_DECL_ATTRIBUTE): Do not bother \n+\tpassing ATTRIBUTES to arm_valid_machine_decl_attribute.\n+\t\n+\t* config/arm/arm.h (DEFAULT_RTX_COSTS): Do not bother passing\n+\tOUTER_CODE to arm_rtx_costs - it is not used.\n+\t(arm_compare_fp): Delete declaration.\n+\t(FINAL_PRESCAN_INSN): Do not bother passing OPVEC or NOPERANDS to\n+\tarm_final_prescan_insn - they are not used.\n+\t(const_ok_for_op): Remove prototype.\n+\t(arm_rtx_costs): Fix prototype.\n+\t(arm_valid_machine_decl_attribute): Fix prototype.\n+\t(final_prescan_insn): Fix prototype.\n+\n+\t* config/arm/arm.md: Remove references to arm_compare_fp.\n+\n+\t* config/arm/arm.c (arm_compare_fp): Delete.\n+\t(const_ok_for_op): Make function static.  Add prototype.  Remove\n+\tmode parameter - it is unused.\n+\t(arm_rtx_costs): Remove outer_code parameter.\n+\t(reload_memory_operand): Declare mode parameter unused.\n+\t(power_of_two_operand): Declare mode parameter unused.\n+\t(equality_operator): Declare mode parameter unused.\n+\t(load_multiple_operation): Declare mode parameter unused.\n+\t(store_multiple_operation): Declare mode parameter unused.\n+\t(multi_register_push): Declare mode parameter unused.\n+\t(arm_valid_machine_decl_attribute): Remove attributes parameter -\n+\tit is unused.\n+\t(select_dominance_cc_mode): Remove op parameter - it is unused.\n+\t(gen_compare_reg): Remove fp parameter - it is unused.\n+\t(final_prescan_insn): Remove opvec and noperands parameters - they\n+\tare unused.\n+\t\n Mon Mar 22 14:35:28 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* tm.texi (MD_SCHED_INIT): Add missing closing parenthesis."}, {"sha": "b3dedbdaf401dd3dfa13e6a1019e2d50635f5204", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74bbc17866da3aafe8d3b6e4512db778b7634a0d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74bbc17866da3aafe8d3b6e4512db778b7634a0d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=74bbc17866da3aafe8d3b6e4512db778b7634a0d", "patch": "@@ -53,8 +53,8 @@ static int arm_gen_constant PROTO ((enum rtx_code, enum machine_mode,\n \t\t\t\t    HOST_WIDE_INT, rtx, rtx, int, int));\n static int arm_naked_function_p PROTO ((tree));\n static void init_fpa_table PROTO ((void));\n-static enum machine_mode select_dominance_cc_mode PROTO ((enum rtx_code, rtx,\n-\t\t\t\t\t\t\t  rtx, HOST_WIDE_INT));\n+static enum machine_mode select_dominance_cc_mode PROTO ((rtx, rtx,\n+\t\t\t\t\t\t\t  HOST_WIDE_INT));\n static HOST_WIDE_INT add_constant PROTO ((rtx, enum machine_mode, int *));\n static void dump_table PROTO ((rtx));\n static int fixit PROTO ((rtx, enum machine_mode, int));\n@@ -68,11 +68,11 @@ static int function_really_clobbers_lr PROTO ((rtx));\n static void emit_multi_reg_push PROTO ((int));\n static void emit_sfm PROTO ((int, int));\n static enum arm_cond_code get_arm_condition_code PROTO ((rtx));\n+static int const_ok_for_op RTX_CODE_PROTO ((Hint, Rcode));\n \n /*  Define the information needed to generate branch insns.  This is\n    stored from the compare operation. */\n rtx arm_compare_op0, arm_compare_op1;\n-int arm_compare_fp;\n \n /* What type of floating point are we tuning for? */\n enum floating_point_type arm_fpu;\n@@ -629,11 +629,10 @@ const_ok_for_arm (i)\n }\n \n /* Return true if I is a valid constant for the operation CODE. */\n-int\n-const_ok_for_op (i, code, mode)\n+static int\n+const_ok_for_op (i, code)\n      HOST_WIDE_INT i;\n      enum rtx_code code;\n-     enum machine_mode mode;\n {\n   if (const_ok_for_arm (i))\n     return 1;\n@@ -1593,9 +1592,9 @@ arm_finalize_pic ()\n    || (X) == arg_pointer_rtx)\n \n int\n-arm_rtx_costs (x, code, outer_code)\n+arm_rtx_costs (x, code)\n      rtx x;\n-     enum rtx_code code, outer_code;\n+     enum rtx_code code;\n {\n   enum machine_mode mode = GET_MODE (x);\n   enum rtx_code subcode;\n@@ -1701,14 +1700,14 @@ arm_rtx_costs (x, code, outer_code)\n \treturn (4 + extra_cost + (REG_OR_SUBREG_REG (XEXP (x, 0)) ? 0 : 8)\n \t\t+ ((REG_OR_SUBREG_REG (XEXP (x, 1))\n \t\t    || (GET_CODE (XEXP (x, 1)) == CONST_INT\n-\t\t\t&& const_ok_for_op (INTVAL (XEXP (x, 1)), code, mode)))\n+\t\t\t&& const_ok_for_op (INTVAL (XEXP (x, 1)), code)))\n \t\t   ? 0 : 8));\n \n       if (REG_OR_SUBREG_REG (XEXP (x, 0)))\n \treturn (1 + (GET_CODE (XEXP (x, 1)) == CONST_INT ? 0 : extra_cost)\n \t\t+ ((REG_OR_SUBREG_REG (XEXP (x, 1))\n \t\t    || (GET_CODE (XEXP (x, 1)) == CONST_INT\n-\t\t\t&& const_ok_for_op (INTVAL (XEXP (x, 1)), code, mode)))\n+\t\t\t&& const_ok_for_op (INTVAL (XEXP (x, 1)), code)))\n \t\t   ? 0 : 4));\n \n       else if (REG_OR_SUBREG_REG (XEXP (x, 1)))\n@@ -1995,7 +1994,7 @@ reg_or_int_operand (op, mode)\n int\n reload_memory_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   int regno = true_regnum (op);\n \n@@ -2181,7 +2180,7 @@ fpu_add_operand (op, mode)\n int\n power_of_two_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) == CONST_INT)\n     {\n@@ -2312,7 +2311,7 @@ shift_operator (x, mode)\n \n int equality_operator (x, mode)\n      rtx x;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return GET_CODE (x) == EQ || GET_CODE (x) == NE;\n }\n@@ -2501,7 +2500,7 @@ adjacent_mem_locations (a, b)\n int\n load_multiple_operation (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   HOST_WIDE_INT count = XVECLEN (op, 0);\n   int dest_regno;\n@@ -2570,7 +2569,7 @@ load_multiple_operation (op, mode)\n int\n store_multiple_operation (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   HOST_WIDE_INT count = XVECLEN (op, 0);\n   int src_regno;\n@@ -3052,7 +3051,7 @@ emit_stm_seq (operands, nops)\n int\n multi_register_push (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) != PARALLEL\n       || (GET_CODE (XVECEXP (op, 0, 0)) != SET)\n@@ -3076,9 +3075,8 @@ multi_register_push (op, mode)\n    to do the right thing.  */\n \n int\n-arm_valid_machine_decl_attribute (decl, attributes, attr, args)\n+arm_valid_machine_decl_attribute (decl, attr, args)\n      tree decl;\n-     tree attributes;\n      tree attr;\n      tree args;\n {\n@@ -3398,8 +3396,7 @@ gen_rotated_half_load (memref)\n }\n \n static enum machine_mode\n-select_dominance_cc_mode (op, x, y, cond_or)\n-     enum rtx_code op;\n+select_dominance_cc_mode (x, y, cond_or)\n      rtx x;\n      rtx y;\n      HOST_WIDE_INT cond_or;\n@@ -3569,7 +3566,7 @@ arm_select_cc_mode (op, x, y)\n \t  || XEXP (x, 2) == const1_rtx)\n       && GET_RTX_CLASS (GET_CODE (XEXP (x, 0))) == '<'\n       && GET_RTX_CLASS (GET_CODE (XEXP (x, 1))) == '<')\n-    return select_dominance_cc_mode (op, XEXP (x, 0), XEXP (x, 1), \n+    return select_dominance_cc_mode (XEXP (x, 0), XEXP (x, 1), \n \t\t\t\t     INTVAL (XEXP (x, 2)));\n \n   if (GET_MODE (x) == QImode && (op == EQ || op == NE))\n@@ -3588,10 +3585,9 @@ arm_select_cc_mode (op, x, y)\n    floating point compare: I don't think that it is needed on the arm.  */\n \n rtx\n-gen_compare_reg (code, x, y, fp)\n+gen_compare_reg (code, x, y)\n      enum rtx_code code;\n      rtx x, y;\n-     int fp;\n {\n   enum machine_mode mode = SELECT_CC_MODE (code, x, y);\n   rtx cc_reg = gen_rtx_REG (mode, 24);\n@@ -5962,10 +5958,8 @@ get_arm_condition_code (comparison)\n \n \n void\n-final_prescan_insn (insn, opvec, noperands)\n+arm_final_prescan_insn (insn)\n      rtx insn;\n-     rtx *opvec;\n-     int noperands;\n {\n   /* BODY will hold the body of INSN.  */\n   register rtx body = PATTERN (insn);"}, {"sha": "6be5c0119b399d0db856bd96094def1c8cdec94c", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74bbc17866da3aafe8d3b6e4512db778b7634a0d/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74bbc17866da3aafe8d3b6e4512db778b7634a0d/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=74bbc17866da3aafe8d3b6e4512db778b7634a0d", "patch": "@@ -1709,7 +1709,7 @@ extern struct rtx_def *legitimize_pic_address ();\n    || (X) == arg_pointer_rtx)\n \n #define DEFAULT_RTX_COSTS(X,CODE,OUTER_CODE)\t\t\\\n-   return arm_rtx_costs (X, CODE, OUTER_CODE);\n+   return arm_rtx_costs (X, CODE);\n \n /* Moves to and from memory are quite expensive */\n #define MEMORY_MOVE_COST(MODE,CLASS,IN)  10\n@@ -1808,7 +1808,6 @@ do\t\t\t\t\t\t\t\t\\\n    since it hasn't been defined!  */\n \n extern struct rtx_def *arm_compare_op0, *arm_compare_op1;\n-extern int arm_compare_fp;\n \n /* Define the codes that are matched by predicates in arm.c */\n #define PREDICATE_CODES\t\t\t\t\t\t\t\\\n@@ -1892,7 +1891,7 @@ extern int arm_compare_fp;\n    we're optimising.  Otherwise it's of no use anyway.  */\n #define FINAL_PRESCAN_INSN(INSN, OPVEC, NOPERANDS)  \\\n   if (optimize)\t\t\t\t\t    \\\n-    final_prescan_insn (INSN, OPVEC, NOPERANDS)\n+    arm_final_prescan_insn (INSN)\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\\\n   ((CODE) == '?' || (CODE) == '|' || (CODE) == '@')\n@@ -2087,15 +2086,14 @@ struct rtx_def;\n void   arm_override_options PROTO ((void));\n int    use_return_insn PROTO ((int));\n int    const_ok_for_arm PROTO ((Hint));\n-int    const_ok_for_op RTX_CODE_PROTO ((Hint, Rcode, Mmode));\n int    arm_split_constant RTX_CODE_PROTO ((Rcode, Mmode, Hint, Rtx, Rtx, int));\n Rcode  arm_canonicalize_comparison RTX_CODE_PROTO ((Rcode,  Rtx *));\n int    arm_return_in_memory PROTO ((Tree));\n int    legitimate_pic_operand_p PROTO ((Rtx));\n Rtx    legitimize_pic_address PROTO ((Rtx, Mmode, Rtx));\n int    is_pic PROTO ((Rtx));\n void   arm_finalize_pic PROTO ((void));\n-int    arm_rtx_costs RTX_CODE_PROTO ((Rtx, Rcode, Rcode));\n+int    arm_rtx_costs RTX_CODE_PROTO ((Rtx, Rcode));\n int    arm_adjust_cost PROTO ((Rtx, Rtx, Rtx, int));\n int    const_double_rtx_ok_for_fpu PROTO ((Rtx));\n int    neg_const_double_rtx_ok_for_fpu PROTO ((Rtx));\n@@ -2133,7 +2131,7 @@ int    load_multiple_sequence PROTO ((Rtx *, int, int *, int *, Hint *));\n char * emit_ldm_seq PROTO ((Rtx *, int));\n int    store_multiple_sequence PROTO ((Rtx *, int, int *, int *, Hint *));\n char * emit_stm_seq PROTO ((Rtx *, int));\n-int    arm_valid_machine_decl_attribute PROTO ((Tree, Tree, Tree, Tree));\n+int    arm_valid_machine_decl_attribute PROTO ((Tree, Tree, Tree));\n Rtx    arm_gen_load_multiple PROTO ((int, int, Rtx, int, int, int, int, int));\n Rtx    arm_gen_store_multiple PROTO ((int, int, Rtx, int, int, int, int, int));\n int    arm_gen_movstrqi PROTO ((Rtx *));\n@@ -2163,7 +2161,7 @@ void   output_func_prologue STDIO_PROTO ((FILE *, int));\n void   output_func_epilogue STDIO_PROTO ((FILE *, int));\n void   arm_expand_prologue PROTO ((void));\n void   arm_print_operand STDIO_PROTO ((FILE *, Rtx, int));\n-void   final_prescan_insn PROTO ((Rtx, Rtx *, int));\n+void   arm_final_prescan_insn PROTO ((Rtx));\n int    short_branch PROTO ((int, int));\n void   assemble_align PROTO((int)); /* Used in arm.md, but defined in output.c */\n int    multi_register_push PROTO ((Rtx, Mmode));"}, {"sha": "71cb167f57e83f973dffb55dcf4f08312798af9a", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 23, "deletions": 50, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74bbc17866da3aafe8d3b6e4512db778b7634a0d/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74bbc17866da3aafe8d3b6e4512db778b7634a0d/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=74bbc17866da3aafe8d3b6e4512db778b7634a0d", "patch": "@@ -3530,7 +3530,6 @@\n {\n   arm_compare_op0 = operands[0];\n   arm_compare_op1 = operands[1];\n-  arm_compare_fp = 0;\n   DONE;\n }\n \")\n@@ -3543,7 +3542,6 @@\n {\n   arm_compare_op0 = operands[0];\n   arm_compare_op1 = operands[1];\n-  arm_compare_fp = 1;\n   DONE;\n }\n \")\n@@ -3556,7 +3554,6 @@\n {\n   arm_compare_op0 = operands[0];\n   arm_compare_op1 = operands[1];\n-  arm_compare_fp = 1;\n   DONE;\n }\n \")\n@@ -3569,7 +3566,6 @@\n {\n   arm_compare_op0 = operands[0];\n   arm_compare_op1 = operands[1];\n-  arm_compare_fp = 1;\n   DONE;\n }\n \")\n@@ -3748,8 +3744,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (EQ, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (EQ, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3761,8 +3756,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (NE, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (NE, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3774,8 +3768,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (GT, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (GT, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3787,8 +3780,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (LE, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (LE, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3800,8 +3792,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (GE, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (GE, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3813,8 +3804,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (LT, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (LT, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3826,8 +3816,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (GTU, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (GTU, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3839,8 +3828,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (LEU, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (LEU, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3852,8 +3840,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (GEU, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (GEU, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3865,8 +3852,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (LTU, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (LTU, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3921,8 +3907,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (EQ, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (EQ, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3932,8 +3917,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (NE, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (NE, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3943,8 +3927,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (GT, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (GT, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3954,8 +3937,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (LE, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (LE, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3965,8 +3947,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (GE, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (GE, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3976,8 +3957,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (LT, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (LT, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3987,8 +3967,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (GTU, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (GTU, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -3998,8 +3977,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (LEU, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (LEU, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -4009,8 +3987,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (GEU, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (GEU, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -4020,8 +3997,7 @@\n   \"\"\n   \"\n {\n-  operands[1] = gen_compare_reg (LTU, arm_compare_op0, arm_compare_op1,\n-\t\t\t\t arm_compare_fp);\n+  operands[1] = gen_compare_reg (LTU, arm_compare_op0, arm_compare_op1);\n }\n \")\n \n@@ -4064,8 +4040,7 @@\n   \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n-  rtx ccreg = gen_compare_reg (code, arm_compare_op0, arm_compare_op1,\n-\t\t\t       arm_compare_fp);\n+  rtx ccreg = gen_compare_reg (code, arm_compare_op0, arm_compare_op1);\n \n   operands[1] = gen_rtx (code, VOIDmode, ccreg, const0_rtx);\n }\")\n@@ -4087,8 +4062,7 @@\n       || (! fpu_add_operand (operands[3], SFmode)))\n     operands[3] = force_reg (SFmode, operands[3]);\n \n-  ccreg = gen_compare_reg (code, arm_compare_op0, arm_compare_op1,\n-\t\t\t   arm_compare_fp);\n+  ccreg = gen_compare_reg (code, arm_compare_op0, arm_compare_op1);\n \n   operands[1] = gen_rtx (code, VOIDmode, ccreg, const0_rtx);\n }\")\n@@ -4102,8 +4076,7 @@\n   \"\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n-  rtx ccreg = gen_compare_reg (code, arm_compare_op0, arm_compare_op1,\n-\t\t\t       arm_compare_fp);\n+  rtx ccreg = gen_compare_reg (code, arm_compare_op0, arm_compare_op1);\n \n   operands[1] = gen_rtx (code, VOIDmode, ccreg, const0_rtx);\n }\")"}, {"sha": "221c7e004091761d26b4bbaf49fbc60c9c12f2e8", "filename": "gcc/config/arm/coff.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74bbc17866da3aafe8d3b6e4512db778b7634a0d/gcc%2Fconfig%2Farm%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74bbc17866da3aafe8d3b6e4512db778b7634a0d/gcc%2Fconfig%2Farm%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcoff.h?ref=74bbc17866da3aafe8d3b6e4512db778b7634a0d", "patch": "@@ -48,9 +48,8 @@ extern int arm_structure_size_boundary;\n /* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n    is a valid machine specific attribute for DECL.\n    The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-extern int arm_valid_machine_decl_attribute ();\n #define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-arm_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n+arm_valid_machine_decl_attribute (DECL, IDENTIFIER, ARGS)\n \f\n /* This is COFF, but prefer stabs.  */\n #define SDB_DEBUGGING_INFO"}, {"sha": "c887ba2e85fef8fa874153d4923ddbf638776b9c", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74bbc17866da3aafe8d3b6e4512db778b7634a0d/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74bbc17866da3aafe8d3b6e4512db778b7634a0d/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=74bbc17866da3aafe8d3b6e4512db778b7634a0d", "patch": "@@ -175,9 +175,8 @@ extern int arm_structure_size_boundary;\n /* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n    is a valid machine specific attribute for DECL.\n    The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-extern int arm_valid_machine_decl_attribute ();\n #define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-arm_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n+arm_valid_machine_decl_attribute (DECL, IDENTIFIER, ARGS)\n \f\n \n /* A C statement to output assembler commands which will identify the"}]}