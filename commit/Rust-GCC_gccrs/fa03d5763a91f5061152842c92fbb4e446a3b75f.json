{"sha": "fa03d5763a91f5061152842c92fbb4e446a3b75f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEwM2Q1NzYzYTkxZjUwNjExNTI4NDJjOTJmYmI0ZTQ0NmEzYjc1Zg==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2019-10-28T14:50:58Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2019-10-28T14:50:58Z"}, "message": "re PR middle-end/91272 ([SVE] Use fully-masked loops for CLASTB reductions)\n\n2019-10-28  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n\tPR middle-end/91272\n\t* tree-vect-stmts.c (vectorizable_condition): Support\n\tEXTRACT_LAST_REDUCTION with fully-masked loops.\n\ntestsuite/\n\t* gcc.target/aarch64/sve/clastb_1.c: Add dg-scan.\n\t* gcc.target/aarch64/sve/clastb_2.c: Likewise.\n\t* gcc.target/aarch64/sve/clastb_3.c: Likewise.\n\t* gcc.target/aarch64/sve/clastb_4.c: Likewise.\n\t* gcc.target/aarch64/sve/clastb_5.c: Likewise.\n\t* gcc.target/aarch64/sve/clastb_6.c: Likewise.\n\t* gcc.target/aarch64/sve/clastb_7.c: Likewise.\n\t* gcc.target/aarch64/sve/clastb_8.c: Likewise.\n\nFrom-SVN: r277524", "tree": {"sha": "a071b74bb46ec94d04349367e92578cfca551cb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a071b74bb46ec94d04349367e92578cfca551cb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa03d5763a91f5061152842c92fbb4e446a3b75f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa03d5763a91f5061152842c92fbb4e446a3b75f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa03d5763a91f5061152842c92fbb4e446a3b75f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa03d5763a91f5061152842c92fbb4e446a3b75f/comments", "author": null, "committer": null, "parents": [{"sha": "96d9d1620f28517de0464ab636662d9a35a92993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96d9d1620f28517de0464ab636662d9a35a92993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96d9d1620f28517de0464ab636662d9a35a92993"}], "stats": {"total": 131, "additions": 74, "deletions": 57}, "files": [{"sha": "f3410ebf730d67f1e72aa4eeb89efe024c34cdbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa03d5763a91f5061152842c92fbb4e446a3b75f", "patch": "@@ -1,3 +1,9 @@\n+2019-10-28  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR middle-end/91272\n+\t* tree-vect-stmts.c (vectorizable_condition): Support\n+\tEXTRACT_LAST_REDUCTION with fully-masked loops.\n+\n 2019-10-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92252"}, {"sha": "f46cc932a198b27c4d03502f33ffd2a4a98d4573", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa03d5763a91f5061152842c92fbb4e446a3b75f", "patch": "@@ -1,3 +1,15 @@\n+2019-10-28  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR middle-end/91272\n+\t* gcc.target/aarch64/sve/clastb_1.c: Add dg-scan.\n+\t* gcc.target/aarch64/sve/clastb_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/clastb_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/clastb_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/clastb_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/clastb_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/clastb_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/clastb_8.c: Likewise.\n+\n 2019-10-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92252"}, {"sha": "d3ea52dea475edf67d3a9fd709a9278873f56102", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_1.c?ref=fa03d5763a91f5061152842c92fbb4e446a3b75f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n \n #define N 32\n \n@@ -17,4 +17,5 @@ condition_reduction (int *a, int min_v)\n   return last;\n }\n \n-/* { dg-final { scan-assembler {\\tclastb\\tw[0-9]+, p[0-7], w[0-9]+, z[0-9]+\\.s} } } */\n+/* { dg-final { scan-tree-dump \"using a fully-masked loop.\" \"vect\" } } */\n+/* { dg-final { scan-assembler {\\tclastb\\ts[0-9]+, p[0-7], s[0-9]+, z[0-9]+\\.s} } } */"}, {"sha": "c222b70791258042d79ca9b25fe463775dff5f18", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_2.c?ref=fa03d5763a91f5061152842c92fbb4e446a3b75f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n \n #include <stdint.h>\n \n@@ -23,4 +23,5 @@ condition_reduction (TYPE *a, TYPE min_v)\n   return last;\n }\n \n-/* { dg-final { scan-assembler {\\tclastb\\tw[0-9]+, p[0-7]+, w[0-9]+, z[0-9]+\\.s} } } */\n+/* { dg-final { scan-tree-dump \"using a fully-masked loop.\" \"vect\" } } */\n+/* { dg-final { scan-assembler {\\tclastb\\ts[0-9]+, p[0-7], s[0-9]+, z[0-9]+\\.s} } } */"}, {"sha": "5aaa71f948dfe657bb2bbefce0d48639beae2bcf", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_3.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_3.c?ref=fa03d5763a91f5061152842c92fbb4e446a3b75f", "patch": "@@ -1,8 +1,9 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n \n #define TYPE uint8_t\n \n #include \"clastb_2.c\"\n \n-/* { dg-final { scan-assembler {\\tclastb\\tw[0-9]+, p[0-7]+, w[0-9]+, z[0-9]+\\.b} } } */\n+/* { dg-final { scan-tree-dump \"using a fully-masked loop.\" \"vect\" } } */\n+/* { dg-final { scan-assembler {\\tclastb\\tb[0-9]+, p[0-7], b[0-9]+, z[0-9]+\\.b} } } */"}, {"sha": "b4db170ea06b6f6e45547c618d263c9b19f31213", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_4.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_4.c?ref=fa03d5763a91f5061152842c92fbb4e446a3b75f", "patch": "@@ -1,8 +1,9 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n \n #define TYPE int16_t\n \n #include \"clastb_2.c\"\n \n+/* { dg-final { scan-tree-dump \"using a fully-masked loop.\" \"vect\" } } */\n /* { dg-final { scan-assembler {\\tclastb\\tw[0-9]+, p[0-7], w[0-9]+, z[0-9]+\\.h} } } */"}, {"sha": "28d40a01f93ebeedf86a0ef895d2da20ce1dcc6c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_5.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_5.c?ref=fa03d5763a91f5061152842c92fbb4e446a3b75f", "patch": "@@ -1,8 +1,9 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n \n #define TYPE uint64_t\n \n #include \"clastb_2.c\"\n \n-/* { dg-final { scan-assembler {\\tclastb\\tx[0-9]+, p[0-7], x[0-9]+, z[0-9]+\\.d} } } */\n+/* { dg-final { scan-tree-dump \"using a fully-masked loop.\" \"vect\" } } */\n+/* { dg-final { scan-assembler {\\tclastb\\td[0-9]+, p[0-7], d[0-9]+, z[0-9]+\\.d} } } */"}, {"sha": "38632a21be14531e49fb9c43e21746fa0b1958d0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_6.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_6.c?ref=fa03d5763a91f5061152842c92fbb4e446a3b75f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n \n #define N 32\n \n@@ -21,4 +21,5 @@ condition_reduction (TYPE *a, TYPE min_v)\n   return last;\n }\n \n+/* { dg-final { scan-tree-dump \"using a fully-masked loop.\" \"vect\" } } */\n /* { dg-final { scan-assembler {\\tclastb\\ts[0-9]+, p[0-7], s[0-9]+, z[0-9]+\\.s} } } */"}, {"sha": "e5307d2edc848f87633a57d2a7f728673fd76841", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_7.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_7.c?ref=fa03d5763a91f5061152842c92fbb4e446a3b75f", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O2 -ftree-vectorize --save-temps\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n \n #define TYPE double\n #include \"clastb_6.c\"\n \n+/* { dg-final { scan-tree-dump \"using a fully-masked loop.\" \"vect\" } } */\n /* { dg-final { scan-assembler {\\tclastb\\td[0-9]+, p[0-7], d[0-9]+, z[0-9]+\\.d} } } */"}, {"sha": "583fc8d8d6ddbff3dfe7c575a9297fb0c979ab13", "filename": "gcc/testsuite/gcc.target/aarch64/sve/clastb_8.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fclastb_8.c?ref=fa03d5763a91f5061152842c92fbb4e446a3b75f", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do assemble { target aarch64_asm_sve_ok } } */\n-/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=256 --save-temps\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details -msve-vector-bits=256 --save-temps\" } */\n \n #include <stdint.h>\n \n@@ -19,6 +19,7 @@ TEST_TYPE (uint16_t);\n TEST_TYPE (uint32_t);\n TEST_TYPE (uint64_t);\n \n+/* { dg-final { scan-tree-dump-times \"using a fully-masked loop.\" 4 \"vect\" } } */\n /* { dg-final { scan-assembler {\\tclastb\\t(b[0-9]+), p[0-7], \\1, z[0-9]+\\.b\\n} } } */\n /* { dg-final { scan-assembler {\\tclastb\\t(h[0-9]+), p[0-7], \\1, z[0-9]+\\.h\\n} } } */\n /* { dg-final { scan-assembler {\\tclastb\\t(s[0-9]+), p[0-7], \\1, z[0-9]+\\.s\\n} } } */"}, {"sha": "36821cec2ee8ee77ab98d93bdf7c042cc6f9d09f", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 36, "deletions": 45, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa03d5763a91f5061152842c92fbb4e446a3b75f/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=fa03d5763a91f5061152842c92fbb4e446a3b75f", "patch": "@@ -10050,16 +10050,6 @@ vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\treturn false;\n \t    }\n \t}\n-      if (loop_vinfo\n-\t  && LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo)\n-\t  && reduction_type == EXTRACT_LAST_REDUCTION)\n-\t{\n-\t  if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t     \"can't yet use a fully-masked loop for\"\n-\t\t\t     \" EXTRACT_LAST_REDUCTION.\\n\");\n-\t  LOOP_VINFO_CAN_FULLY_MASK_P (loop_vinfo) = false;\n-\t}\n       if (expand_vec_cond_expr_p (vectype, comp_vectype,\n \t\t\t\t     cond_code))\n \t{\n@@ -10089,31 +10079,31 @@ vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   /* Handle cond expr.  */\n   for (j = 0; j < ncopies; j++)\n     {\n-      tree loop_mask = NULL_TREE;\n       bool swap_cond_operands = false;\n \n       /* See whether another part of the vectorized code applies a loop\n \t mask to the condition, or to its inverse.  */\n \n+      vec_loop_masks *masks = NULL;\n       if (loop_vinfo && LOOP_VINFO_FULLY_MASKED_P (loop_vinfo))\n \t{\n-\t  scalar_cond_masked_key cond (cond_expr, ncopies);\n-\t  if (loop_vinfo->scalar_cond_masked_set.contains (cond))\n-\t    {\n-\t      vec_loop_masks *masks = &LOOP_VINFO_MASKS (loop_vinfo);\n-\t      loop_mask = vect_get_loop_mask (gsi, masks, ncopies, vectype, j);\n-\t    }\n+\t  if (reduction_type == EXTRACT_LAST_REDUCTION)\n+\t    masks = &LOOP_VINFO_MASKS (loop_vinfo);\n \t  else\n \t    {\n-\t      bool honor_nans = HONOR_NANS (TREE_TYPE (cond.op0));\n-\t      cond.code = invert_tree_comparison (cond.code, honor_nans);\n+\t      scalar_cond_masked_key cond (cond_expr, ncopies);\n \t      if (loop_vinfo->scalar_cond_masked_set.contains (cond))\n+\t\tmasks = &LOOP_VINFO_MASKS (loop_vinfo);\n+\t      else\n \t\t{\n-\t\t  vec_loop_masks *masks = &LOOP_VINFO_MASKS (loop_vinfo);\n-\t\t  loop_mask = vect_get_loop_mask (gsi, masks, ncopies,\n-\t\t\t\t\t\t  vectype, j);\n-\t\t  cond_code = cond.code;\n-\t\t  swap_cond_operands = true;\n+\t\t  bool honor_nans = HONOR_NANS (TREE_TYPE (cond.op0));\n+\t\t  cond.code = invert_tree_comparison (cond.code, honor_nans);\n+\t\t  if (loop_vinfo->scalar_cond_masked_set.contains (cond))\n+\t\t    {\n+\t\t      masks = &LOOP_VINFO_MASKS (loop_vinfo);\n+\t\t      cond_code = cond.code;\n+\t\t      swap_cond_operands = true;\n+\t\t    }\n \t\t}\n \t    }\n \t}\n@@ -10248,28 +10238,10 @@ vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t     vec != { 0, ... } (masked in the MASK_LOAD,\n \t     unmasked in the VEC_COND_EXPR).  */\n \n-\t  if (loop_mask)\n-\t    {\n-\t      if (COMPARISON_CLASS_P (vec_compare))\n-\t\t{\n-\t\t  tree tmp = make_ssa_name (vec_cmp_type);\n-\t\t  tree op0 = TREE_OPERAND (vec_compare, 0);\n-\t\t  tree op1 = TREE_OPERAND (vec_compare, 1);\n-\t\t  gassign *g = gimple_build_assign (tmp,\n-\t\t\t\t\t\t    TREE_CODE (vec_compare),\n-\t\t\t\t\t\t    op0, op1);\n-\t\t  vect_finish_stmt_generation (stmt_info, g, gsi);\n-\t\t  vec_compare = tmp;\n-\t\t}\n-\n-\t      tree tmp2 = make_ssa_name (vec_cmp_type);\n-\t      gassign *g = gimple_build_assign (tmp2, BIT_AND_EXPR,\n-\t\t\t\t\t\tvec_compare, loop_mask);\n-\t      vect_finish_stmt_generation (stmt_info, g, gsi);\n-\t      vec_compare = tmp2;\n-\t    }\n+\t  /* Force vec_compare to be an SSA_NAME rather than a comparison,\n+\t     in cases where that's necessary.  */\n \n-\t  if (reduction_type == EXTRACT_LAST_REDUCTION)\n+\t  if (masks || reduction_type == EXTRACT_LAST_REDUCTION)\n \t    {\n \t      if (!is_gimple_val (vec_compare))\n \t\t{\n@@ -10279,6 +10251,7 @@ vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t  vect_finish_stmt_generation (stmt_info, new_stmt, gsi);\n \t\t  vec_compare = vec_compare_name;\n \t\t}\n+\n \t      if (must_invert_cmp_result)\n \t\t{\n \t\t  tree vec_compare_name = make_ssa_name (vec_cmp_type);\n@@ -10288,6 +10261,24 @@ vectorizable_condition (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t  vect_finish_stmt_generation (stmt_info, new_stmt, gsi);\n \t\t  vec_compare = vec_compare_name;\n \t\t}\n+\n+\t      if (masks)\n+\t\t{\n+\t\t  unsigned vec_num = vec_oprnds0.length ();\n+\t\t  tree loop_mask\n+\t\t    = vect_get_loop_mask (gsi, masks, vec_num * ncopies,\n+\t\t\t\t\t  vectype, vec_num * j + i);\n+\t\t  tree tmp2 = make_ssa_name (vec_cmp_type);\n+\t\t  gassign *g\n+\t\t    = gimple_build_assign (tmp2, BIT_AND_EXPR, vec_compare,\n+\t\t\t\t\t   loop_mask);\n+\t\t  vect_finish_stmt_generation (stmt_info, g, gsi);\n+\t\t  vec_compare = tmp2;\n+\t\t}\n+\t    }\n+\n+\t  if (reduction_type == EXTRACT_LAST_REDUCTION)\n+\t    {\n \t      gcall *new_stmt = gimple_build_call_internal\n \t\t(IFN_FOLD_EXTRACT_LAST, 3, else_clause, vec_compare,\n \t\t vec_then_clause);"}]}