{"sha": "76f8010e840c8a0ad2d06ff98464637a5363eda6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZmODAxMGU4NDBjOGEwYWQyZDA2ZmY5ODQ2NDYzN2E1MzYzZWRhNg==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-04-18T07:09:17Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-04-18T07:09:17Z"}, "message": "scan-types.sh: Fix program's name in error message.\n\n* scan-types.sh: Fix program's name in error message.\nRename dummy.c to avoid collisions in parallel makes.\n\nFrom-SVN: r7062", "tree": {"sha": "f79b10db39077d3121ddb75c585b8ce910679156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f79b10db39077d3121ddb75c585b8ce910679156"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76f8010e840c8a0ad2d06ff98464637a5363eda6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f8010e840c8a0ad2d06ff98464637a5363eda6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76f8010e840c8a0ad2d06ff98464637a5363eda6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f8010e840c8a0ad2d06ff98464637a5363eda6/comments", "author": null, "committer": null, "parents": [{"sha": "db7f1e43d8ffbe0e83a8fb86a97a911d8a68eb01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7f1e43d8ffbe0e83a8fb86a97a911d8a68eb01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7f1e43d8ffbe0e83a8fb86a97a911d8a68eb01"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "a7fa2384979e5188ca6041aa1578131d525e2d0d", "filename": "gcc/scan-types.sh", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f8010e840c8a0ad2d06ff98464637a5363eda6/gcc%2Fscan-types.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f8010e840c8a0ad2d06ff98464637a5363eda6/gcc%2Fscan-types.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan-types.sh?ref=76f8010e840c8a0ad2d06ff98464637a5363eda6", "patch": "@@ -13,7 +13,7 @@ SED=sed\n # It works by a dummy program through the C pre-processor, and then\n # using sed to search for typedefs in the output.\n \n-cat >dummy.c <<!EOF!\n+cat >st-dummy.c <<!EOF!\n #include <sys/types.h>\n #include <stddef.h>\n #include <stdarg.h>\n@@ -30,21 +30,21 @@ typedef va_list XXXva_list;\n #endif\n !EOF!\n \n-if ${CPP} dummy.c >TMP ; then true\n+if ${CPP} st-dummy.c >TMP ; then true\n else\n-  echo \"gen-params: could not invoke ${CPP} on dummy.c\" 1>&2 ; exit 1\n+  echo \"scan-types: could not invoke ${CPP} on st-dummy.c\" 1>&2 ; exit 1\n fi\n-tr '\t' ' ' <TMP >dummy.out\n+tr '\t' ' ' <TMP >st-dummy.out\n \n for TYPE in dev_t clock_t fpos_t gid_t ino_t mode_t nlink_t off_t pid_t size_t ssize_t time_t uid_t va_list int32_t uint_32_t ; do\n     IMPORTED=`eval 'echo $'\"$TYPE\"`\n     if [ -n \"${IMPORTED}\" ] ; then\n \teval \"$TYPE='$IMPORTED\"\n     else\n-\t# Search dummy.out for a typedef for $TYPE, and write it out\n+\t# Search st-dummy.out for a typedef for $TYPE, and write it out\n \t# to TMP in #define syntax.\n \trm -f TMP\n-\t${SED} -n -e \"s|.*typedef  *\\(.*\\) X*$TYPE *;.*|\\1|w TMP\" <dummy.out>/dev/null\n+\t${SED} -n -e \"s|.*typedef  *\\(.*\\) X*$TYPE *;.*|\\1|w TMP\" <st-dummy.out>/dev/null\n \t# Now select the first definition.\n         if [ -s TMP ]; then\n \t    # VALUE is now the typedef'd definition of $TYPE.\n@@ -54,7 +54,7 @@ for TYPE in dev_t clock_t fpos_t gid_t ino_t mode_t nlink_t off_t pid_t size_t s\n \t    if echo $VALUE | grep \" \" >/dev/null ; then true\n \t    else\n \t\trm -f TMP\n-\t\t${SED} -n -e \"s|.*typedef[ \t][ \t]*\\(.*[^a-zA-Z0-9_]\\)${VALUE}[ \t]*;.*|\\1|w TMP\" <dummy.out>/dev/null\n+\t\t${SED} -n -e \"s|.*typedef[ \t][ \t]*\\(.*[^a-zA-Z0-9_]\\)${VALUE}[ \t]*;.*|\\1|w TMP\" <st-dummy.out>/dev/null\n \t\tif [ -s TMP ]; then\n \t\t    eval \"VALUE='`${SED} -e '2,$d' -e 's|[ \t]*$||' <TMP`'\"\n \t\tfi\n@@ -100,23 +100,23 @@ else\n     else\n \t# check $tmp doesn't conflict with <unistd.h>\n \techo \"#include <unistd.h>\n-\textern $tmp read();\" >dummy.c\n-\t${CC} -c dummy.c >/dev/null 2>&1 || tmp=int\n+\textern $tmp read();\" >st-dummy.c\n+\t${CC} -c st-dummy.c >/dev/null 2>&1 || tmp=int\n     fi\n     echo \"#define ${macro_prefix}ssize_t $tmp /* default */\"\n fi\n \n # va_list can cause problems (e.g. some systems have va_list as a struct).\n # Check to see if ${va_list-char*} really is compatible with stdarg.h.\n-cat >dummy.c <<!EOF!\n+cat >st-dummy.c <<!EOF!\n #define X_va_list ${va_list-char* /* default */}\n extern long foo(X_va_list ap); /* Check that X_va_list compiles on its own */\n #include <stdarg.h>\n long foo(X_va_list ap) { return va_arg(ap, long); }\n long bar(int i, ...)\n { va_list ap; long j; va_start(ap, i); j = foo(ap); va_end(ap); return j; }\n !EOF!\n-if ${CC} -c dummy.c >/dev/null 2>&1 ; then\n+if ${CC} -c st-dummy.c >/dev/null 2>&1 ; then\n   # Ok: We have something that works.\n   echo \"#define ${macro_prefix}va_list ${va_list-char* /* default */}\"\n else\n@@ -136,4 +136,4 @@ echo \"#define initscr32 initscr\"\n echo \"#define w32addch waddch\"\n echo \"#define w32insch winsch\"\n \n-rm -f dummy.c dummy.o TMP dummy.out\n+rm -f st-dummy.c st-dummy.o TMP st-dummy.out"}]}