{"sha": "e04aa64ded1074765045a8c1e0e78f4155caa694", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA0YWE2NGRlZDEwNzQ3NjUwNDVhOGMxZTBlNzhmNDE1NWNhYTY5NA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1999-05-03T12:48:34Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-05-03T12:48:34Z"}, "message": "mauve.exp (test_mauve): Pass `link' to libjava_arguments when linking.\n\n\t* libjava.mauve/mauve.exp (test_mauve): Pass `link' to\n\tlibjava_arguments when linking.\n\t(test_mauve_sim): Likewise.\n\t* lib/libjava.exp (libjava_arguments): Run `libtool' to link.\n\tDon't use `-static'.  Added `mode' argument.  Use -nodefaultlibs\n\twhen linking.\n\t(test_libjava_from_source): Mention why target_compile failed.\n\tPass `link' to libjava_arguments when linking.  Only do `xfails'\n\tfor tests we would actually have run.\n\t(test_libjava_from_javac): Likewise.\n\t(libjava_find_lib): Return name of `.la' file.\n\nFrom-SVN: r26748", "tree": {"sha": "1ef492f91a227ee4b16b60550f321c0a0c21f915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ef492f91a227ee4b16b60550f321c0a0c21f915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e04aa64ded1074765045a8c1e0e78f4155caa694", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e04aa64ded1074765045a8c1e0e78f4155caa694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e04aa64ded1074765045a8c1e0e78f4155caa694", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e04aa64ded1074765045a8c1e0e78f4155caa694/comments", "author": null, "committer": null, "parents": [{"sha": "234af032118d7ec2544fcdb00e7d725b3205d7fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/234af032118d7ec2544fcdb00e7d725b3205d7fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/234af032118d7ec2544fcdb00e7d725b3205d7fb"}], "stats": {"total": 87, "additions": 64, "deletions": 23}, "files": [{"sha": "b359154b7ed9cfa0d4ca0852ec6f4c554f24b5a8", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04aa64ded1074765045a8c1e0e78f4155caa694/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04aa64ded1074765045a8c1e0e78f4155caa694/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=e04aa64ded1074765045a8c1e0e78f4155caa694", "patch": "@@ -1,3 +1,17 @@\n+1999-05-03  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* libjava.mauve/mauve.exp (test_mauve): Pass `link' to\n+\tlibjava_arguments when linking.\n+\t(test_mauve_sim): Likewise.\n+\t* lib/libjava.exp (libjava_arguments): Run `libtool' to link.\n+\tDon't use `-static'.  Added `mode' argument.  Use -nodefaultlibs\n+\twhen linking.\n+\t(test_libjava_from_source): Mention why target_compile failed.\n+\tPass `link' to libjava_arguments when linking.  Only do `xfails'\n+\tfor tests we would actually have run.\n+\t(test_libjava_from_javac): Likewise.\n+\t(libjava_find_lib): Return name of `.la' file.\n+\n 1999-04-26  Tom Tromey  <tromey@cygnus.com>\n \n \t* lib/libjava.exp (libjava_find_lib): New proc."}, {"sha": "3c814f0833ef74a41c52fcfeda9645e37e377f02", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 48, "deletions": 21, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04aa64ded1074765045a8c1e0e78f4155caa694/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04aa64ded1074765045a8c1e0e78f4155caa694/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=e04aa64ded1074765045a8c1e0e78f4155caa694", "patch": "@@ -87,20 +87,21 @@ proc libjava_find_lib {dir name} {\n     foreach sub {.libs _libs} {\n \tif {$gp != \"\"} {\n \t    if {[file exists $gp/$dir/$sub/lib${name}.a]} then {\n-\t\treturn \"-L$gp/$dir/$sub -l$name\"\n+\t\treturn \"$gp/$dir/lib${name}.la\"\n \t    }\n \t}\n \tset lib [findfile $base_dir/../../$dir/$sub/lib${name}.a \\\n-\t\t   \"-L$base_dir/../../$dir/$sub -l$name\" \"\"]\n+\t\t   \"$base_dir/../../$dir/lib${name}.la\" \"\"]\n \tif {$lib != \"\"} {\n \t    return $lib\n \t}\n     }\n     return \"\"\n }\n \n-# Compute arguments needed for compiler.\n-proc libjava_arguments {} {\n+# Compute arguments needed for compiler.  MODE is a libtool mode:\n+# either compile or link.\n+proc libjava_arguments {{mode compile}} {\n     global base_dir\n     global LIBJAVA\n     global LIBGC\n@@ -167,7 +168,6 @@ proc libjava_arguments {} {\n \n     global wrapper_file wrap_compile_flags;\n     lappend args \"additional_flags=$wrap_compile_flags\";\n-    lappend args \"additional_flags=-static\"\n     lappend args \"libs=$wrapper_file\";\n     lappend args \"libs=$libjava\";\n     lappend args \"libs=$libgc\";\n@@ -182,7 +182,21 @@ proc libjava_arguments {} {\n     if [info exists TOOL_OPTIONS] {\n \tlappend args \"additional_flags=$TOOL_OPTIONS\"\n     }\n-    lappend args \"compiler=$GCJ_UNDER_TEST\"\n+\n+    # Search for libtool.  We need it to link.\n+    set d [absolute $objdir]\n+    foreach x {. .. ../.. ../../..} {\n+\tif {[file exists $d/$x/libtool]} then {\n+\t    # We have to run silently to avoid DejaGNU lossage.\n+\t    lappend args \\\n+\t      \"compiler=$d/$x/libtool --silent --mode=$mode $GCJ_UNDER_TEST\"\n+\t    break\n+\t}\n+    }\n+\n+    if {$mode == \"link\"} {\n+\tlappend args \"additional_flags=-nodefaultlibs -lm -lgcc -lc -lgcc\"\n+    }\n \n     return $args\n }\n@@ -208,7 +222,7 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n         return\n     }\n \n-    set args [libjava_arguments]\n+    set args [libjava_arguments link]\n     # Add the --main flag\n     lappend args \"additional_flags=--main=[file rootname [file tail $srcfile]]\"\n     if { $compile_args != \"\" } {\n@@ -221,12 +235,16 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n \tset errname \"$errname $compile_args\"\n     }\n \n-    if { [target_compile $srcfile \"$executable\" executable $args] != \"\" } {\n+    set x [target_compile $srcfile \"$executable\" executable $args]\n+    if { $x != \"\" } {\n+\tverbose \"target_compile failed: $x\" 2\n \tfail \"$errname compilation from source\"\n-\tsetup_xfail \"*-*-*\"\n-\tfail \"$errname execution from source compiled test\"\n-\tsetup_xfail \"*-*-*\"\n-\tfail \"$errname output from source compiled test\"\n+\tif {$exec_args != \"no-exec\"} {\n+\t    setup_xfail \"*-*-*\"\n+\t    fail \"$errname execution from source compiled test\"\n+\t    setup_xfail \"*-*-*\"\n+\t    fail \"$errname output from source compiled test\"\n+\t}\n \treturn;\n     }\n     pass \"$errname compilation from source\"\n@@ -306,10 +324,12 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n \tfail \"$errname byte compilation\"\n \tsetup_xfail \"*-*-*\"\n \tfail \"$errname compilation from bytecode\"\n-\tsetup_xfail \"*-*-*\"\n-\tfail \"$errname execution from bytecode->native test\"\n-\tsetup_xfail \"*-*-*\"\n-\tfail \"$errname output from bytecode->native test\"\n+\tif {$exec_args != \"no-exec\"} {\n+\t    setup_xfail \"*-*-*\"\n+\t    fail \"$errname execution from bytecode->native test\"\n+\t    setup_xfail \"*-*-*\"\n+\t    fail \"$errname output from bytecode->native test\"\n+\t}\n \treturn\n     }\n     pass \"$errname byte compilation\"\n@@ -335,25 +355,29 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n \tset class_files [join [split [string trim $class_out]] \".class \"].class\n     }\n \n-    # Initial arguments.\n-    set args [libjava_arguments]\n-\n     # Usually it is an error for a test program not to have a `main'\n     # method.  However, for no-exec tests it is ok.\n+    set largs {}\n     if {$main_name == \"\"} {\n \tif {$exec_args != \"no-exec\"} {\n \t    perror \"No `main' given in program $errname\"\n \t    return\n \t} else {\n \t    set type object\n \t    set executable [file rootname [file tail $srcfile]].o\n+\t    set mode compile\n \t}\n     } else {\n \tset type executable\n-\tlappend args \"additional_flags=--main=$main_name\"\n+\tlappend largs \"additional_flags=--main=$main_name\"\n \tset executable \"${objdir}/$main_name\"\n+\tset mode link\n     }\n \n+    # Initial arguments.\n+    set args [libjava_arguments $mode]\n+    eval lappend args $largs\n+\n     if { $compile_args != \"\" } {\n \tlappend args \"additional_flags=$compile_args\"\n     }\n@@ -362,7 +386,10 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n \tset errname \"$errname $compile_args\"\n     }\n \n-    if { [target_compile $class_files \"$executable\" $type $args] != \"\" } {\n+    verbose \"compilation command = $args\" 2\n+    set x [target_compile $class_files \"$executable\" $type $args]\n+    if { $x != \"\" } {\n+\tverbose \"target_compile failed: $x\" 2\n \tfail \"$errname compilation from bytecode\"\n \tsetup_xfail \"*-*-*\"\n \tif {$exec_args != \"no-exec\"} {"}, {"sha": "7b3cc9d17c30a6936dac5a433a0866b0483bb650", "filename": "libjava/testsuite/libjava.mauve/mauve.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e04aa64ded1074765045a8c1e0e78f4155caa694/libjava%2Ftestsuite%2Flibjava.mauve%2Fmauve.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e04aa64ded1074765045a8c1e0e78f4155caa694/libjava%2Ftestsuite%2Flibjava.mauve%2Fmauve.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.mauve%2Fmauve.exp?ref=e04aa64ded1074765045a8c1e0e78f4155caa694", "patch": "@@ -99,7 +99,7 @@ proc test_mauve {} {\n \n   # Compute flags to use to do the build.\n   set compile_args [libjava_arguments]\n-  set link_args [concat $compile_args \\\n+  set link_args [concat [libjava_arguments link] \\\n \t\t   [list \"additional_flags=--main=DejaGNUTestHarness\"]]\n \n   set ok 1\n@@ -229,7 +229,7 @@ proc test_mauve_sim {} {\n \n   # Compute flags to use to do the build.\n   set compile_args [libjava_arguments]\n-  set link_args [concat $compile_args \\\n+  set link_args [concat [libjava_arguments link] \\\n \t\t   [list \"additional_flags=--main=DejaGNUTestHarness\"]]\n \n   set ok 1"}]}