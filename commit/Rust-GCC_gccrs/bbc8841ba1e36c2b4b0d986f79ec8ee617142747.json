{"sha": "bbc8841ba1e36c2b4b0d986f79ec8ee617142747", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJjODg0MWJhMWUzNmMyYjRiMGQ5ODZmNzllYzhlZTYxNzE0Mjc0Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-10-11T20:32:15Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-10-11T20:32:15Z"}, "message": "i386.md (movmem<mode>): Macroize expander from movmem{si,di} using SWI48 mode iterator.\n\n\t* config/i386/i386.md (movmem<mode>): Macroize expander from\n\tmovmem{si,di} using SWI48 mode iterator.\n\t(*strmovsi_1): Macroize insn pattern from *strmovsi_1 and\n\t*strmovsi_rex_1 using P mode iterator.\n\t(*strmovhi_1): Ditto from *strmovhi_1 and *strmovhi_rex_1.\n\t(*strmovqi_1): Ditto from *strmovqi_1 and *strmovqi_rex_1.\n\t(*rep_movsi): Ditto from *rep_movsi and *rep_movsi_rex64.\n\t(*rep_movqi): Ditto from *rep_movqi and *rep_movqi_rex64.\n\t(setmem<mode>): Macroize expander from setmem{si,di} using\n\tSWI48 mode iterator.\n\t(*strsetsi_1): Macroize insn pattern from *strsetsi_1 and\n\t*strsetsi_rex_1 using P mode iterator.\n\t(*strsethi_1): Ditto from *strsethi_1 and *strsethi_rex_1.\n\t(*strsetqi_1): Ditto from *strsetqi_1 and *strsetqi_rex_1.\n\t(*rep_stossi): Ditto from *rep_stossi and *rep_stossi_rex64.\n\t(*rep_stosqi): Ditto from *rep_stosqi and *rep_stosqi_rex64.\n\t(*cmpstrnqi_nz_1): Ditto from *cmpstrnqi_nz_1 and *cmpstrnqi_nz_rex_1.\n\t(*cmpstrnqi_1): Ditto from *cmpstrnqi_1 and *cmpstrnqi_rex_1.\n\t(strlen<mode>): Macroize expander from strlen{si,di} using SWI48x\n\tmode iterator.\n\t(*strlenqi_1): Macroize insn pattern from *strlenqi_1 and\n\t*strlenqi_rex_1 using P mode iterator.\n\nFrom-SVN: r165331", "tree": {"sha": "9dc512789e6361f83c2f8723beb91d8f5f44f6c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dc512789e6361f83c2f8723beb91d8f5f44f6c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbc8841ba1e36c2b4b0d986f79ec8ee617142747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbc8841ba1e36c2b4b0d986f79ec8ee617142747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbc8841ba1e36c2b4b0d986f79ec8ee617142747", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbc8841ba1e36c2b4b0d986f79ec8ee617142747/comments", "author": null, "committer": null, "parents": [{"sha": "7c663eb02206a552e72c555e10270ecb2d7e5ac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c663eb02206a552e72c555e10270ecb2d7e5ac8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c663eb02206a552e72c555e10270ecb2d7e5ac8"}], "stats": {"total": 548, "additions": 176, "deletions": 372}, "files": [{"sha": "5a3a65423aac2c34d41af8d847b237fc3eaf2d9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbc8841ba1e36c2b4b0d986f79ec8ee617142747/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbc8841ba1e36c2b4b0d986f79ec8ee617142747/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbc8841ba1e36c2b4b0d986f79ec8ee617142747", "patch": "@@ -1,3 +1,28 @@\n+2010-10-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (movmem<mode>): Macroize expander from\n+\tmovmem{si,di} using SWI48 mode iterator.\n+\t(*strmovsi_1): Macroize insn pattern from *strmovsi_1 and\n+\t*strmovsi_rex_1 using P mode iterator.\n+\t(*strmovhi_1): Ditto from *strmovhi_1 and *strmovhi_rex_1.\n+\t(*strmovqi_1): Ditto from *strmovqi_1 and *strmovqi_rex_1.\n+\t(*rep_movsi): Ditto from *rep_movsi and *rep_movsi_rex64.\n+\t(*rep_movqi): Ditto from *rep_movqi and *rep_movqi_rex64.\n+\t(setmem<mode>): Macroize expander from setmem{si,di} using\n+\tSWI48 mode iterator.\n+\t(*strsetsi_1): Macroize insn pattern from *strsetsi_1 and\n+\t*strsetsi_rex_1 using P mode iterator.\n+\t(*strsethi_1): Ditto from *strsethi_1 and *strsethi_rex_1.\n+\t(*strsetqi_1): Ditto from *strsetqi_1 and *strsetqi_rex_1.\n+\t(*rep_stossi): Ditto from *rep_stossi and *rep_stossi_rex64.\n+\t(*rep_stosqi): Ditto from *rep_stosqi and *rep_stosqi_rex64.\n+\t(*cmpstrnqi_nz_1): Ditto from *cmpstrnqi_nz_1 and *cmpstrnqi_nz_rex_1.\n+\t(*cmpstrnqi_1): Ditto from *cmpstrnqi_1 and *cmpstrnqi_rex_1.\n+\t(strlen<mode>): Macroize expander from strlen{si,di} using SWI48x\n+\tmode iterator.\n+\t(*strlenqi_1): Macroize insn pattern from *strlenqi_1 and\n+\t*strlenqi_rex_1 using P mode iterator.\n+\n 2010-10-11  Bernd Schmidt  <bernds@codesourcery.com>\n \n \tPR bootstrap/45445\n@@ -118,14 +143,13 @@\n \t* tree.h (TREE_THIS_NOTRAP): Use TREE_CHECK5.\n \t* emit-rtl.c (set_mem_attributes_minus_bitpos): Only check\n \tTREE_THIS_NOTRAP when appropriate.\n-\t(get_spill_slot_decl): Don't set TREE_THIS_NOTRAP on the new\n-\tVAR_DECL.\n+\t(get_spill_slot_decl): Don't set TREE_THIS_NOTRAP on the new VAR_DECL.\n \t* gimplify.c (gimplify_expr): Copy NOTRAP from INDIRECT_REF to\n \tnewly created MEM_REF.\n \n 2010-10-11  Hariharan Sandanagobalane  <hariharan@picochip.com>\n \n-        Nathan Froyds patch to hooks FUNCTION_ARG etc.\n+\tNathan Froyds patch to hooks FUNCTION_ARG etc.\n \t* config/picochip/picochip-protos.h (picochip_function_arg): Delete.\n \t(picochip_incoming_function_arg): Delete.\n \t(picochip_arg_advance): Delete.\n@@ -166,8 +190,7 @@\n \t(maybe_set_param_value, set_default_param_value): New.\n \t* params.h (PARAM_VALUE, PARAM_SET_P): Make into rvalues.\n \t(maybe_set_param_value, set_default_param_value): Declare.\n-\t* config/arm/arm.c (arm_option_override): Use\n-\tmaybe_set_param_value.\n+\t* config/arm/arm.c (arm_option_override): Use maybe_set_param_value.\n \t* config/i386/i386.c (ix86_option_override_internal): Use\n \tmaybe_set_param_value.\n \t* config/ia64/ia64.c (ia64_option_default_params,\n@@ -181,18 +204,15 @@\n \t(rs6000_option_override_internal): Use maybe_set_param_value.\n \t(rs6000_option_optimization): Move some code to\n \trs6000_option_default_params.\n-\t* config/s390/s390.c (s390_option_override): Use\n-\tmaybe_set_param_value.\n+\t* config/s390/s390.c (s390_option_override): Use maybe_set_param_value.\n \t* config/sh/sh.c (sh_option_default_params,\n \tTARGET_OPTION_DEFAULT_PARAMS): New.\n-\t(sh_option_optimization): Move some code to\n-\tsh_option_default_params.\n+\t(sh_option_optimization): Move some code to sh_option_default_params.\n \t* config/sparc/sparc.c (sparc_option_override): Use\n \tmaybe_set_param_value.\n \t* config/spu/spu.c (spu_option_default_params,\n \tTARGET_OPTION_DEFAULT_PARAMS): New.\n-\t(spu_option_optimization): Move some code to\n-\tspu_option_default_params.\n+\t(spu_option_optimization): Move some code to spu_option_default_params.\n \t(spu_option_override): Use maybe_set_param_value.\n \t* doc/tm.texi.in (TARGET_OPTION_DEFAULT_PARAMS): New @hook.\n \t* doc/tm.texi: Regenerate.\n@@ -202,8 +222,7 @@\n \t(default_options_optimization): Use maybe_set_param_value.\n \t(finish_options): Use maybe_set_param_value.\n \t* target.def (target_option.default_params): New hook.\n-\t* toplev.c (general_init): Call\n-\ttargetm.target_option.default_params.\n+\t* toplev.c (general_init): Call targetm.target_option.default_params.\n \n 2010-10-11  Ira Rosen  <irar@il.ibm.com>\n "}, {"sha": "e11908c5ce326b00db135994ccde627bb9d45ebc", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 142, "deletions": 357, "changes": 499, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbc8841ba1e36c2b4b0d986f79ec8ee617142747/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbc8841ba1e36c2b4b0d986f79ec8ee617142747/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=bbc8841ba1e36c2b4b0d986f79ec8ee617142747", "patch": "@@ -15189,11 +15189,11 @@\n    (set_attr \"length_immediate\" \"0\")\n    (set_attr \"modrm\" \"0\")])\n \n-(define_expand \"movmemsi\"\n+(define_expand \"movmem<mode>\"\n   [(use (match_operand:BLK 0 \"memory_operand\" \"\"))\n    (use (match_operand:BLK 1 \"memory_operand\" \"\"))\n-   (use (match_operand:SI 2 \"nonmemory_operand\" \"\"))\n-   (use (match_operand:SI 3 \"const_int_operand\" \"\"))\n+   (use (match_operand:SWI48 2 \"nonmemory_operand\" \"\"))\n+   (use (match_operand:SWI48 3 \"const_int_operand\" \"\"))\n    (use (match_operand:SI 4 \"const_int_operand\" \"\"))\n    (use (match_operand:SI 5 \"const_int_operand\" \"\"))]\n   \"\"\n@@ -15205,22 +15205,6 @@\n    FAIL;\n })\n \n-(define_expand \"movmemdi\"\n-  [(use (match_operand:BLK 0 \"memory_operand\" \"\"))\n-   (use (match_operand:BLK 1 \"memory_operand\" \"\"))\n-   (use (match_operand:DI 2 \"nonmemory_operand\" \"\"))\n-   (use (match_operand:DI 3 \"const_int_operand\" \"\"))\n-   (use (match_operand:SI 4 \"const_int_operand\" \"\"))\n-   (use (match_operand:SI 5 \"const_int_operand\" \"\"))]\n-  \"TARGET_64BIT\"\n-{\n- if (ix86_expand_movmem (operands[0], operands[1], operands[2], operands[3],\n-\t\t\t operands[4], operands[5]))\n-   DONE;\n- else\n-   FAIL;\n-})\n-\n ;; Most CPUs don't like single string operations\n ;; Handle this case here to simplify previous expander.\n \n@@ -15275,98 +15259,57 @@\n   \"TARGET_64BIT\"\n   \"movsq\"\n   [(set_attr \"type\" \"str\")\n-   (set_attr \"mode\" \"DI\")\n-   (set_attr \"memory\" \"both\")])\n+   (set_attr \"memory\" \"both\")\n+   (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*strmovsi_1\"\n-  [(set (mem:SI (match_operand:SI 2 \"register_operand\" \"0\"))\n-\t(mem:SI (match_operand:SI 3 \"register_operand\" \"1\")))\n-   (set (match_operand:SI 0 \"register_operand\" \"=D\")\n-\t(plus:SI (match_dup 2)\n-\t\t (const_int 4)))\n-   (set (match_operand:SI 1 \"register_operand\" \"=S\")\n-\t(plus:SI (match_dup 3)\n-\t\t (const_int 4)))]\n-  \"!TARGET_64BIT\"\n-  \"movs{l|d}\"\n-  [(set_attr \"type\" \"str\")\n-   (set_attr \"mode\" \"SI\")\n-   (set_attr \"memory\" \"both\")])\n-\n-(define_insn \"*strmovsi_rex_1\"\n-  [(set (mem:SI (match_operand:DI 2 \"register_operand\" \"0\"))\n-\t(mem:SI (match_operand:DI 3 \"register_operand\" \"1\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n-\t(plus:DI (match_dup 2)\n-\t\t (const_int 4)))\n-   (set (match_operand:DI 1 \"register_operand\" \"=S\")\n-\t(plus:DI (match_dup 3)\n-\t\t (const_int 4)))]\n-  \"TARGET_64BIT\"\n+  [(set (mem:SI (match_operand:P 2 \"register_operand\" \"0\"))\n+\t(mem:SI (match_operand:P 3 \"register_operand\" \"1\")))\n+   (set (match_operand:P 0 \"register_operand\" \"=D\")\n+\t(plus:P (match_dup 2)\n+\t\t(const_int 4)))\n+   (set (match_operand:P 1 \"register_operand\" \"=S\")\n+\t(plus:P (match_dup 3)\n+\t\t(const_int 4)))]\n+  \"\"\n   \"movs{l|d}\"\n-  [(set_attr \"type\" \"str\")\n-   (set_attr \"mode\" \"SI\")\n-   (set_attr \"memory\" \"both\")])\n-\n-(define_insn \"*strmovhi_1\"\n-  [(set (mem:HI (match_operand:SI 2 \"register_operand\" \"0\"))\n-\t(mem:HI (match_operand:SI 3 \"register_operand\" \"1\")))\n-   (set (match_operand:SI 0 \"register_operand\" \"=D\")\n-\t(plus:SI (match_dup 2)\n-\t\t (const_int 2)))\n-   (set (match_operand:SI 1 \"register_operand\" \"=S\")\n-\t(plus:SI (match_dup 3)\n-\t\t (const_int 2)))]\n-  \"!TARGET_64BIT\"\n-  \"movsw\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n-   (set_attr \"mode\" \"HI\")])\n+   (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*strmovhi_rex_1\"\n-  [(set (mem:HI (match_operand:DI 2 \"register_operand\" \"0\"))\n-\t(mem:HI (match_operand:DI 3 \"register_operand\" \"1\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n-\t(plus:DI (match_dup 2)\n-\t\t (const_int 2)))\n-   (set (match_operand:DI 1 \"register_operand\" \"=S\")\n-\t(plus:DI (match_dup 3)\n-\t\t (const_int 2)))]\n-  \"TARGET_64BIT\"\n+(define_insn \"*strmovhi_1\"\n+  [(set (mem:HI (match_operand:P 2 \"register_operand\" \"0\"))\n+\t(mem:HI (match_operand:P 3 \"register_operand\" \"1\")))\n+   (set (match_operand:P 0 \"register_operand\" \"=D\")\n+\t(plus:P (match_dup 2)\n+\t\t(const_int 2)))\n+   (set (match_operand:P 1 \"register_operand\" \"=S\")\n+\t(plus:P (match_dup 3)\n+\t\t(const_int 2)))]\n+  \"\"\n   \"movsw\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*strmovqi_1\"\n-  [(set (mem:QI (match_operand:SI 2 \"register_operand\" \"0\"))\n-\t(mem:QI (match_operand:SI 3 \"register_operand\" \"1\")))\n-   (set (match_operand:SI 0 \"register_operand\" \"=D\")\n-\t(plus:SI (match_dup 2)\n-\t\t (const_int 1)))\n-   (set (match_operand:SI 1 \"register_operand\" \"=S\")\n-\t(plus:SI (match_dup 3)\n-\t\t (const_int 1)))]\n-  \"!TARGET_64BIT\"\n-  \"movsb\"\n-  [(set_attr \"type\" \"str\")\n-   (set_attr \"memory\" \"both\")\n-   (set_attr \"mode\" \"QI\")])\n-\n-(define_insn \"*strmovqi_rex_1\"\n-  [(set (mem:QI (match_operand:DI 2 \"register_operand\" \"0\"))\n-\t(mem:QI (match_operand:DI 3 \"register_operand\" \"1\")))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n-\t(plus:DI (match_dup 2)\n-\t\t (const_int 1)))\n-   (set (match_operand:DI 1 \"register_operand\" \"=S\")\n-\t(plus:DI (match_dup 3)\n-\t\t (const_int 1)))]\n-  \"TARGET_64BIT\"\n+  [(set (mem:QI (match_operand:P 2 \"register_operand\" \"0\"))\n+\t(mem:QI (match_operand:P 3 \"register_operand\" \"1\")))\n+   (set (match_operand:P 0 \"register_operand\" \"=D\")\n+\t(plus:P (match_dup 2)\n+\t\t(const_int 1)))\n+   (set (match_operand:P 1 \"register_operand\" \"=S\")\n+\t(plus:P (match_dup 3)\n+\t\t(const_int 1)))]\n+  \"\"\n   \"movsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"both\")\n-   (set_attr \"prefix_rex\" \"0\")\n+   (set (attr \"prefix_rex\")\n+\t(if_then_else\n+\t  (ne (symbol_ref \"<P:MODE>mode == DImode\") (const_int 0))\n+\t  (const_string \"0\")\n+\t  (const_string \"*\")))\n    (set_attr \"mode\" \"QI\")])\n \n (define_expand \"rep_mov\"\n@@ -15401,80 +15344,44 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*rep_movsi\"\n-  [(set (match_operand:SI 2 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:SI 0 \"register_operand\" \"=D\")\n-        (plus:SI (ashift:SI (match_operand:SI 5 \"register_operand\" \"2\")\n-\t\t\t    (const_int 2))\n-\t\t (match_operand:SI 3 \"register_operand\" \"0\")))\n-   (set (match_operand:SI 1 \"register_operand\" \"=S\")\n-        (plus:SI (ashift:SI (match_dup 5) (const_int 2))\n-\t\t (match_operand:SI 4 \"register_operand\" \"1\")))\n+  [(set (match_operand:P 2 \"register_operand\" \"=c\") (const_int 0))\n+   (set (match_operand:P 0 \"register_operand\" \"=D\")\n+        (plus:P (ashift:P (match_operand:P 5 \"register_operand\" \"2\")\n+\t\t\t  (const_int 2))\n+\t\t (match_operand:P 3 \"register_operand\" \"0\")))\n+   (set (match_operand:P 1 \"register_operand\" \"=S\")\n+        (plus:P (ashift:P (match_dup 5) (const_int 2))\n+\t\t(match_operand:P 4 \"register_operand\" \"1\")))\n    (set (mem:BLK (match_dup 3))\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n-  \"!TARGET_64BIT\"\n-  \"rep{%;} movs{l|d}\"\n-  [(set_attr \"type\" \"str\")\n-   (set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"memory\" \"both\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*rep_movsi_rex64\"\n-  [(set (match_operand:DI 2 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n-        (plus:DI (ashift:DI (match_operand:DI 5 \"register_operand\" \"2\")\n-\t\t\t    (const_int 2))\n-\t\t (match_operand:DI 3 \"register_operand\" \"0\")))\n-   (set (match_operand:DI 1 \"register_operand\" \"=S\")\n-        (plus:DI (ashift:DI (match_dup 5) (const_int 2))\n-\t\t (match_operand:DI 4 \"register_operand\" \"1\")))\n-   (set (mem:BLK (match_dup 3))\n-\t(mem:BLK (match_dup 4)))\n-   (use (match_dup 5))]\n-  \"TARGET_64BIT\"\n+  \"\"\n   \"rep{%;} movs{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"both\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*rep_movqi\"\n-  [(set (match_operand:SI 2 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:SI 0 \"register_operand\" \"=D\")\n-        (plus:SI (match_operand:SI 3 \"register_operand\" \"0\")\n-\t\t (match_operand:SI 5 \"register_operand\" \"2\")))\n-   (set (match_operand:SI 1 \"register_operand\" \"=S\")\n-        (plus:SI (match_operand:SI 4 \"register_operand\" \"1\") (match_dup 5)))\n-   (set (mem:BLK (match_dup 3))\n-\t(mem:BLK (match_dup 4)))\n-   (use (match_dup 5))]\n-  \"!TARGET_64BIT\"\n-  \"rep{%;} movsb\"\n-  [(set_attr \"type\" \"str\")\n-   (set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"memory\" \"both\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*rep_movqi_rex64\"\n-  [(set (match_operand:DI 2 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n-        (plus:DI (match_operand:DI 3 \"register_operand\" \"0\")\n-\t\t (match_operand:DI 5 \"register_operand\" \"2\")))\n-   (set (match_operand:DI 1 \"register_operand\" \"=S\")\n-        (plus:DI (match_operand:DI 4 \"register_operand\" \"1\") (match_dup 5)))\n+  [(set (match_operand:P 2 \"register_operand\" \"=c\") (const_int 0))\n+   (set (match_operand:P 0 \"register_operand\" \"=D\")\n+        (plus:P (match_operand:P 3 \"register_operand\" \"0\")\n+\t\t(match_operand:P 5 \"register_operand\" \"2\")))\n+   (set (match_operand:P 1 \"register_operand\" \"=S\")\n+        (plus:P (match_operand:P 4 \"register_operand\" \"1\") (match_dup 5)))\n    (set (mem:BLK (match_dup 3))\n \t(mem:BLK (match_dup 4)))\n    (use (match_dup 5))]\n-  \"TARGET_64BIT\"\n+  \"\"\n   \"rep{%;} movsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"both\")\n-   (set_attr \"mode\" \"SI\")])\n+   (set_attr \"mode\" \"QI\")])\n \n-(define_expand \"setmemsi\"\n+(define_expand \"setmem<mode>\"\n    [(use (match_operand:BLK 0 \"memory_operand\" \"\"))\n-    (use (match_operand:SI 1 \"nonmemory_operand\" \"\"))\n+    (use (match_operand:SWI48 1 \"nonmemory_operand\" \"\"))\n     (use (match_operand 2 \"const_int_operand\" \"\"))\n     (use (match_operand 3 \"const_int_operand\" \"\"))\n     (use (match_operand:SI 4 \"const_int_operand\" \"\"))\n@@ -15489,23 +15396,6 @@\n    FAIL;\n })\n \n-(define_expand \"setmemdi\"\n-   [(use (match_operand:BLK 0 \"memory_operand\" \"\"))\n-    (use (match_operand:DI 1 \"nonmemory_operand\" \"\"))\n-    (use (match_operand 2 \"const_int_operand\" \"\"))\n-    (use (match_operand 3 \"const_int_operand\" \"\"))\n-    (use (match_operand 4 \"const_int_operand\" \"\"))\n-    (use (match_operand 5 \"const_int_operand\" \"\"))]\n-  \"TARGET_64BIT\"\n-{\n- if (ix86_expand_setmem (operands[0], operands[1],\n-\t\t\t operands[2], operands[3],\n-\t\t\t operands[4], operands[5]))\n-   DONE;\n- else\n-   FAIL;\n-})\n-\n ;; Most CPUs don't like single string operations\n ;; Handle this case here to simplify previous expander.\n \n@@ -15554,76 +15444,44 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*strsetsi_1\"\n-  [(set (mem:SI (match_operand:SI 1 \"register_operand\" \"0\"))\n-\t(match_operand:SI 2 \"register_operand\" \"a\"))\n-   (set (match_operand:SI 0 \"register_operand\" \"=D\")\n-\t(plus:SI (match_dup 1)\n-\t\t (const_int 4)))]\n-  \"!TARGET_64BIT\"\n-  \"stos{l|d}\"\n-  [(set_attr \"type\" \"str\")\n-   (set_attr \"memory\" \"store\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*strsetsi_rex_1\"\n-  [(set (mem:SI (match_operand:DI 1 \"register_operand\" \"0\"))\n+  [(set (mem:SI (match_operand:P 1 \"register_operand\" \"0\"))\n \t(match_operand:SI 2 \"register_operand\" \"a\"))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n-\t(plus:DI (match_dup 1)\n-\t\t (const_int 4)))]\n-  \"TARGET_64BIT\"\n+   (set (match_operand:P 0 \"register_operand\" \"=D\")\n+\t(plus:P (match_dup 1)\n+\t\t(const_int 4)))]\n+  \"\"\n   \"stos{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*strsethi_1\"\n-  [(set (mem:HI (match_operand:SI 1 \"register_operand\" \"0\"))\n-\t(match_operand:HI 2 \"register_operand\" \"a\"))\n-   (set (match_operand:SI 0 \"register_operand\" \"=D\")\n-\t(plus:SI (match_dup 1)\n-\t\t (const_int 2)))]\n-  \"!TARGET_64BIT\"\n-  \"stosw\"\n-  [(set_attr \"type\" \"str\")\n-   (set_attr \"memory\" \"store\")\n-   (set_attr \"mode\" \"HI\")])\n-\n-(define_insn \"*strsethi_rex_1\"\n-  [(set (mem:HI (match_operand:DI 1 \"register_operand\" \"0\"))\n+  [(set (mem:HI (match_operand:P 1 \"register_operand\" \"0\"))\n \t(match_operand:HI 2 \"register_operand\" \"a\"))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n-\t(plus:DI (match_dup 1)\n-\t\t (const_int 2)))]\n-  \"TARGET_64BIT\"\n+   (set (match_operand:P 0 \"register_operand\" \"=D\")\n+\t(plus:P (match_dup 1)\n+\t\t(const_int 2)))]\n+  \"\"\n   \"stosw\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*strsetqi_1\"\n-  [(set (mem:QI (match_operand:SI 1 \"register_operand\" \"0\"))\n+  [(set (mem:QI (match_operand:P 1 \"register_operand\" \"0\"))\n \t(match_operand:QI 2 \"register_operand\" \"a\"))\n-   (set (match_operand:SI 0 \"register_operand\" \"=D\")\n-\t(plus:SI (match_dup 1)\n-\t\t (const_int 1)))]\n-  \"!TARGET_64BIT\"\n-  \"stosb\"\n-  [(set_attr \"type\" \"str\")\n-   (set_attr \"memory\" \"store\")\n-   (set_attr \"mode\" \"QI\")])\n-\n-(define_insn \"*strsetqi_rex_1\"\n-  [(set (mem:QI (match_operand:DI 1 \"register_operand\" \"0\"))\n-\t(match_operand:QI 2 \"register_operand\" \"a\"))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n-\t(plus:DI (match_dup 1)\n-\t\t (const_int 1)))]\n-  \"TARGET_64BIT\"\n+   (set (match_operand:P 0 \"register_operand\" \"=D\")\n+\t(plus:P (match_dup 1)\n+\t\t(const_int 1)))]\n+  \"\"\n   \"stosb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"memory\" \"store\")\n-   (set_attr \"prefix_rex\" \"0\")\n+   (set (attr \"prefix_rex\")\n+\t(if_then_else\n+\t  (ne (symbol_ref \"<P:MODE>mode == DImode\") (const_int 0))\n+\t  (const_string \"0\")\n+\t  (const_string \"*\")))\n    (set_attr \"mode\" \"QI\")])\n \n (define_expand \"rep_stos\"\n@@ -15654,70 +15512,41 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*rep_stossi\"\n-  [(set (match_operand:SI 1 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:SI 0 \"register_operand\" \"=D\")\n-        (plus:SI (ashift:SI (match_operand:SI 4 \"register_operand\" \"1\")\n-\t\t\t    (const_int 2))\n-\t\t (match_operand:SI 3 \"register_operand\" \"0\")))\n-   (set (mem:BLK (match_dup 3))\n-\t(const_int 0))\n-   (use (match_operand:SI 2 \"register_operand\" \"a\"))\n-   (use (match_dup 4))]\n-  \"!TARGET_64BIT\"\n-  \"rep{%;} stos{l|d}\"\n-  [(set_attr \"type\" \"str\")\n-   (set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"memory\" \"store\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"*rep_stossi_rex64\"\n-  [(set (match_operand:DI 1 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n-        (plus:DI (ashift:DI (match_operand:DI 4 \"register_operand\" \"1\")\n-\t\t\t    (const_int 2))\n-\t\t (match_operand:DI 3 \"register_operand\" \"0\")))\n+  [(set (match_operand:P 1 \"register_operand\" \"=c\") (const_int 0))\n+   (set (match_operand:P 0 \"register_operand\" \"=D\")\n+        (plus:P (ashift:P (match_operand:P 4 \"register_operand\" \"1\")\n+\t\t\t  (const_int 2))\n+\t\t (match_operand:P 3 \"register_operand\" \"0\")))\n    (set (mem:BLK (match_dup 3))\n \t(const_int 0))\n    (use (match_operand:SI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n-  \"TARGET_64BIT\"\n+  \"\"\n   \"rep{%;} stos{l|d}\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*rep_stosqi\"\n-  [(set (match_operand:SI 1 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:SI 0 \"register_operand\" \"=D\")\n-        (plus:SI (match_operand:SI 3 \"register_operand\" \"0\")\n-\t\t (match_operand:SI 4 \"register_operand\" \"1\")))\n-   (set (mem:BLK (match_dup 3))\n-\t(const_int 0))\n-   (use (match_operand:QI 2 \"register_operand\" \"a\"))\n-   (use (match_dup 4))]\n-  \"!TARGET_64BIT\"\n-  \"rep{%;} stosb\"\n-  [(set_attr \"type\" \"str\")\n-   (set_attr \"prefix_rep\" \"1\")\n-   (set_attr \"memory\" \"store\")\n-   (set_attr \"mode\" \"QI\")])\n-\n-(define_insn \"*rep_stosqi_rex64\"\n-  [(set (match_operand:DI 1 \"register_operand\" \"=c\") (const_int 0))\n-   (set (match_operand:DI 0 \"register_operand\" \"=D\")\n-        (plus:DI (match_operand:DI 3 \"register_operand\" \"0\")\n-\t\t (match_operand:DI 4 \"register_operand\" \"1\")))\n+  [(set (match_operand:P 1 \"register_operand\" \"=c\") (const_int 0))\n+   (set (match_operand:P 0 \"register_operand\" \"=D\")\n+        (plus:P (match_operand:P 3 \"register_operand\" \"0\")\n+\t\t(match_operand:P 4 \"register_operand\" \"1\")))\n    (set (mem:BLK (match_dup 3))\n \t(const_int 0))\n    (use (match_operand:QI 2 \"register_operand\" \"a\"))\n    (use (match_dup 4))]\n-  \"TARGET_64BIT\"\n+  \"\"\n   \"rep{%;} stosb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"prefix_rep\" \"1\")\n    (set_attr \"memory\" \"store\")\n-   (set_attr \"prefix_rex\" \"0\")\n+   (set (attr \"prefix_rex\")\n+\t(if_then_else\n+\t  (ne (symbol_ref \"<P:MODE>mode == DImode\") (const_int 0))\n+\t  (const_string \"0\")\n+\t  (const_string \"*\")))\n    (set_attr \"mode\" \"QI\")])\n \n (define_expand \"cmpstrnsi\"\n@@ -15800,8 +15629,10 @@\n \t\t\t     (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"\"\n-  \"operands[1] = gen_reg_rtx (QImode);\n-   operands[2] = gen_reg_rtx (QImode);\")\n+{\n+  operands[1] = gen_reg_rtx (QImode);\n+  operands[2] = gen_reg_rtx (QImode);\n+})\n \n ;; memcmp recognizers.  The `cmpsb' opcode does nothing if the count is\n ;; zero.  Emit extra code to make sure that a zero-length compare is EQ.\n@@ -15820,33 +15651,22 @@\n \n (define_insn \"*cmpstrnqi_nz_1\"\n   [(set (reg:CC FLAGS_REG)\n-\t(compare:CC (mem:BLK (match_operand:SI 4 \"register_operand\" \"0\"))\n-\t\t    (mem:BLK (match_operand:SI 5 \"register_operand\" \"1\"))))\n-   (use (match_operand:SI 6 \"register_operand\" \"2\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (clobber (match_operand:SI 0 \"register_operand\" \"=S\"))\n-   (clobber (match_operand:SI 1 \"register_operand\" \"=D\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"=c\"))]\n-  \"!TARGET_64BIT\"\n-  \"repz{%;} cmpsb\"\n-  [(set_attr \"type\" \"str\")\n-   (set_attr \"mode\" \"QI\")\n-   (set_attr \"prefix_rep\" \"1\")])\n-\n-(define_insn \"*cmpstrnqi_nz_rex_1\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(compare:CC (mem:BLK (match_operand:DI 4 \"register_operand\" \"0\"))\n-\t\t    (mem:BLK (match_operand:DI 5 \"register_operand\" \"1\"))))\n-   (use (match_operand:DI 6 \"register_operand\" \"2\"))\n+\t(compare:CC (mem:BLK (match_operand:P 4 \"register_operand\" \"0\"))\n+\t\t    (mem:BLK (match_operand:P 5 \"register_operand\" \"1\"))))\n+   (use (match_operand:P 6 \"register_operand\" \"2\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (clobber (match_operand:DI 0 \"register_operand\" \"=S\"))\n-   (clobber (match_operand:DI 1 \"register_operand\" \"=D\"))\n-   (clobber (match_operand:DI 2 \"register_operand\" \"=c\"))]\n-  \"TARGET_64BIT\"\n+   (clobber (match_operand:P 0 \"register_operand\" \"=S\"))\n+   (clobber (match_operand:P 1 \"register_operand\" \"=D\"))\n+   (clobber (match_operand:P 2 \"register_operand\" \"=c\"))]\n+  \"\"\n   \"repz{%;} cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n-   (set_attr \"prefix_rex\" \"0\")\n+   (set (attr \"prefix_rex\")\n+\t(if_then_else\n+\t  (ne (symbol_ref \"<P:MODE>mode == DImode\") (const_int 0))\n+\t  (const_string \"0\")\n+\t  (const_string \"*\")))\n    (set_attr \"prefix_rep\" \"1\")])\n \n ;; The same, but the count is not known to not be zero.\n@@ -15868,59 +15688,33 @@\n \n (define_insn \"*cmpstrnqi_1\"\n   [(set (reg:CC FLAGS_REG)\n-\t(if_then_else:CC (ne (match_operand:SI 6 \"register_operand\" \"2\")\n-\t\t\t     (const_int 0))\n-\t  (compare:CC (mem:BLK (match_operand:SI 4 \"register_operand\" \"0\"))\n-\t\t      (mem:BLK (match_operand:SI 5 \"register_operand\" \"1\")))\n-\t  (const_int 0)))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (use (reg:CC FLAGS_REG))\n-   (clobber (match_operand:SI 0 \"register_operand\" \"=S\"))\n-   (clobber (match_operand:SI 1 \"register_operand\" \"=D\"))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"=c\"))]\n-  \"!TARGET_64BIT\"\n-  \"repz{%;} cmpsb\"\n-  [(set_attr \"type\" \"str\")\n-   (set_attr \"mode\" \"QI\")\n-   (set_attr \"prefix_rep\" \"1\")])\n-\n-(define_insn \"*cmpstrnqi_rex_1\"\n-  [(set (reg:CC FLAGS_REG)\n-\t(if_then_else:CC (ne (match_operand:DI 6 \"register_operand\" \"2\")\n+\t(if_then_else:CC (ne (match_operand:P 6 \"register_operand\" \"2\")\n \t\t\t     (const_int 0))\n-\t  (compare:CC (mem:BLK (match_operand:DI 4 \"register_operand\" \"0\"))\n-\t\t      (mem:BLK (match_operand:DI 5 \"register_operand\" \"1\")))\n+\t  (compare:CC (mem:BLK (match_operand:P 4 \"register_operand\" \"0\"))\n+\t\t      (mem:BLK (match_operand:P 5 \"register_operand\" \"1\")))\n \t  (const_int 0)))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (use (reg:CC FLAGS_REG))\n-   (clobber (match_operand:DI 0 \"register_operand\" \"=S\"))\n-   (clobber (match_operand:DI 1 \"register_operand\" \"=D\"))\n-   (clobber (match_operand:DI 2 \"register_operand\" \"=c\"))]\n-  \"TARGET_64BIT\"\n+   (clobber (match_operand:P 0 \"register_operand\" \"=S\"))\n+   (clobber (match_operand:P 1 \"register_operand\" \"=D\"))\n+   (clobber (match_operand:P 2 \"register_operand\" \"=c\"))]\n+  \"\"\n   \"repz{%;} cmpsb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n-   (set_attr \"prefix_rex\" \"0\")\n+   (set (attr \"prefix_rex\")\n+\t(if_then_else\n+\t  (ne (symbol_ref \"<P:MODE>mode == DImode\") (const_int 0))\n+\t  (const_string \"0\")\n+\t  (const_string \"*\")))\n    (set_attr \"prefix_rep\" \"1\")])\n \n-(define_expand \"strlensi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(unspec:SI [(match_operand:BLK 1 \"general_operand\" \"\")\n-\t\t    (match_operand:QI 2 \"immediate_operand\" \"\")\n-\t\t    (match_operand 3 \"immediate_operand\" \"\")] UNSPEC_SCAS))]\n-  \"\"\n-{\n- if (ix86_expand_strlen (operands[0], operands[1], operands[2], operands[3]))\n-   DONE;\n- else\n-   FAIL;\n-})\n-\n-(define_expand \"strlendi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(unspec:DI [(match_operand:BLK 1 \"general_operand\" \"\")\n-\t\t    (match_operand:QI 2 \"immediate_operand\" \"\")\n-\t\t    (match_operand 3 \"immediate_operand\" \"\")] UNSPEC_SCAS))]\n+(define_expand \"strlen<mode>\"\n+  [(set (match_operand:SWI48x 0 \"register_operand\" \"\")\n+\t(unspec:SWI48x [(match_operand:BLK 1 \"general_operand\" \"\")\n+\t\t\t(match_operand:QI 2 \"immediate_operand\" \"\")\n+\t\t\t(match_operand 3 \"immediate_operand\" \"\")]\n+\t\t       UNSPEC_SCAS))]\n   \"\"\n {\n  if (ix86_expand_strlen (operands[0], operands[1], operands[2], operands[3]))\n@@ -15930,39 +15724,30 @@\n })\n \n (define_expand \"strlenqi_1\"\n-  [(parallel [(set (match_operand 0 \"register_operand\" \"\") (match_operand 2 \"\" \"\"))\n+  [(parallel [(set (match_operand 0 \"register_operand\" \"\")\n+\t\t   (match_operand 2 \"\" \"\"))\n \t      (clobber (match_operand 1 \"register_operand\" \"\"))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"\"\n   \"ix86_current_function_needs_cld = 1;\")\n \n (define_insn \"*strlenqi_1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&c\")\n-\t(unspec:SI [(mem:BLK (match_operand:SI 5 \"register_operand\" \"1\"))\n-\t\t    (match_operand:QI 2 \"register_operand\" \"a\")\n-\t\t    (match_operand:SI 3 \"immediate_operand\" \"i\")\n-\t\t    (match_operand:SI 4 \"register_operand\" \"0\")] UNSPEC_SCAS))\n-   (clobber (match_operand:SI 1 \"register_operand\" \"=D\"))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_64BIT\"\n-  \"repnz{%;} scasb\"\n-  [(set_attr \"type\" \"str\")\n-   (set_attr \"mode\" \"QI\")\n-   (set_attr \"prefix_rep\" \"1\")])\n-\n-(define_insn \"*strlenqi_rex_1\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=&c\")\n-\t(unspec:DI [(mem:BLK (match_operand:DI 5 \"register_operand\" \"1\"))\n-\t\t    (match_operand:QI 2 \"register_operand\" \"a\")\n-\t\t    (match_operand:DI 3 \"immediate_operand\" \"i\")\n-\t\t    (match_operand:DI 4 \"register_operand\" \"0\")] UNSPEC_SCAS))\n-   (clobber (match_operand:DI 1 \"register_operand\" \"=D\"))\n+  [(set (match_operand:P 0 \"register_operand\" \"=&c\")\n+\t(unspec:P [(mem:BLK (match_operand:P 5 \"register_operand\" \"1\"))\n+\t\t   (match_operand:QI 2 \"register_operand\" \"a\")\n+\t\t   (match_operand:P 3 \"immediate_operand\" \"i\")\n+\t\t   (match_operand:P 4 \"register_operand\" \"0\")] UNSPEC_SCAS))\n+   (clobber (match_operand:P 1 \"register_operand\" \"=D\"))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT\"\n+  \"\"\n   \"repnz{%;} scasb\"\n   [(set_attr \"type\" \"str\")\n    (set_attr \"mode\" \"QI\")\n-   (set_attr \"prefix_rex\" \"0\")\n+   (set (attr \"prefix_rex\")\n+\t(if_then_else\n+\t  (ne (symbol_ref \"<P:MODE>mode == DImode\") (const_int 0))\n+\t  (const_string \"0\")\n+\t  (const_string \"*\")))\n    (set_attr \"prefix_rep\" \"1\")])\n \n ;; Peephole optimizations to clean up after cmpstrn*.  This should be"}, {"sha": "38f87b732eccc5b97bcdcc4a5c03d75f393f1a6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbc8841ba1e36c2b4b0d986f79ec8ee617142747/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbc8841ba1e36c2b4b0d986f79ec8ee617142747/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bbc8841ba1e36c2b4b0d986f79ec8ee617142747", "patch": "@@ -135,7 +135,7 @@\n 2010-10-07  Iain Sandoe  <iains@gcc.gnu.org>\n \t    Kai Tietz  <kai.tietz@onevision.com>\n \n-       * objc.dg/proto-lossage-4.m: Use intptr_t instead of long type.\n+\t* objc.dg/proto-lossage-4.m: Use intptr_t instead of long type.\n \n 2010-10-07  Richard Guenther  <rguenther@suse.de>\n \n@@ -225,7 +225,7 @@\n \n \t2005-03-07 Fariborz Jahanian <fjahanian@apple.com>\n \n-        Radar 4468498\n+\tRadar 4468498\n \t* objc.dg/objc-foreach-2.m: New.\n \n \t2006-02-15   Fariborz Jahanian <fjahanian@apple.com>"}]}