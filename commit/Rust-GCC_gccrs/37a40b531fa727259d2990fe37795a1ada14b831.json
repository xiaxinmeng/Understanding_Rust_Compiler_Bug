{"sha": "37a40b531fa727259d2990fe37795a1ada14b831", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdhNDBiNTMxZmE3MjcyNTlkMjk5MGZlMzc3OTVhMWFkYTE0YjgzMQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-07-05T19:13:59Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-07-05T19:13:59Z"}, "message": "re PR fortran/40646 ([F03] array-valued procedure pointer components)\n\n2009-07-05  Paul Thomas  <pault@gcc.gnu.org>\n\tand Tobias Burnus <burnus@gcc.gnu.org>\n\n\tPR fortran/40646\n\t* gfortran.h : Change the compcall member of the 'value' union\n\tin the gfc_expr structure so that its fields overlap with the\n\t'function' member.\n\t* resolve.c (resolve_compcall): Set the function.esym.\n\t* trans-expr.c (gfc_trans_arrayfunc_assign): Use\n\tis_proc_ptr_comp in the condition.\n\t* dependency.c (gfc_full_array_ref_p): Ensure that 'contiguous'\n\tretunrs a value if non-NULL.\n\n2009-07-05  Paul Thomas  <pault@gcc.gnu.org>\n\tand Tobias Burnus <burnus@gcc.gnu.org>\n\n\tPR fortran/40646\n\t* gfortran.dg/func_assign_3.f90 : New test.\n\nFrom-SVN: r149262", "tree": {"sha": "53147f2f5ff93fd4abca3507298b728daf3384dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53147f2f5ff93fd4abca3507298b728daf3384dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37a40b531fa727259d2990fe37795a1ada14b831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a40b531fa727259d2990fe37795a1ada14b831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37a40b531fa727259d2990fe37795a1ada14b831", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37a40b531fa727259d2990fe37795a1ada14b831/comments", "author": null, "committer": null, "parents": [{"sha": "aded0ed0ddfa3603f3b2f5e45464dc0575b157fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aded0ed0ddfa3603f3b2f5e45464dc0575b157fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aded0ed0ddfa3603f3b2f5e45464dc0575b157fe"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "f597e6ece634adf03faf2fcd458d58ed2c9230ff", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a40b531fa727259d2990fe37795a1ada14b831/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a40b531fa727259d2990fe37795a1ada14b831/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=37a40b531fa727259d2990fe37795a1ada14b831", "patch": "@@ -1197,10 +1197,17 @@ gfc_full_array_ref_p (gfc_ref *ref, bool *contiguous)\n   bool lbound_OK = true;\n   bool ubound_OK = true;\n \n+  if (contiguous)\n+    *contiguous = false;\n+\n   if (ref->type != REF_ARRAY)\n     return false;\n   if (ref->u.ar.type == AR_FULL)\n-    return true;\n+    {\n+      if (contiguous)\n+\t*contiguous = true;\n+      return true;\n+    }\n   if (ref->u.ar.type != AR_SECTION)\n     return false;\n   if (ref->next)"}, {"sha": "260d718b13ced5fc1c15e5b807ab10c1ed929815", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a40b531fa727259d2990fe37795a1ada14b831/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a40b531fa727259d2990fe37795a1ada14b831/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=37a40b531fa727259d2990fe37795a1ada14b831", "patch": "@@ -1678,8 +1678,9 @@ typedef struct gfc_expr\n     struct\n     {\n       gfc_actual_arglist* actual;\n-      gfc_typebound_proc* tbp;\n       const char* name;\n+      void* padding;  /* Overlap gfc_typebound_proc with esym.  */\n+      gfc_typebound_proc* tbp;\n     }\n     compcall;\n "}, {"sha": "41ac03796bf4cf49efb84aa3b5115ff7970cfa61", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a40b531fa727259d2990fe37795a1ada14b831/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a40b531fa727259d2990fe37795a1ada14b831/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=37a40b531fa727259d2990fe37795a1ada14b831", "patch": "@@ -4818,8 +4818,8 @@ resolve_compcall (gfc_expr* e)\n \n   e->value.function.actual = newactual;\n   e->value.function.name = e->value.compcall.name;\n+  e->value.function.esym = target->n.sym;\n   e->value.function.isym = NULL;\n-  e->value.function.esym = NULL;\n   e->symtree = target;\n   e->ts = target->n.sym->ts;\n   e->expr_type = EXPR_FUNCTION;"}, {"sha": "d4ee169d08e575556a6028730c70be98a007deb7", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a40b531fa727259d2990fe37795a1ada14b831/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a40b531fa727259d2990fe37795a1ada14b831/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=37a40b531fa727259d2990fe37795a1ada14b831", "patch": "@@ -4416,11 +4416,11 @@ gfc_trans_arrayfunc_assign (gfc_expr * expr1, gfc_expr * expr2)\n \n   /* The frontend doesn't seem to bother filling in expr->symtree for intrinsic\n      functions.  */\n-  is_proc_ptr_comp(expr2, &comp);\n   gcc_assert (expr2->value.function.isym\n-\t      || (comp && comp->attr.dimension)\n+\t      || (is_proc_ptr_comp (expr2, &comp)\n+\t\t  && comp && comp->attr.dimension)\n \t      || (!comp && gfc_return_by_reference (expr2->value.function.esym)\n-\t      && expr2->value.function.esym->result->attr.dimension));\n+\t\t  && expr2->value.function.esym->result->attr.dimension));\n \n   ss = gfc_walk_expr (expr1);\n   gcc_assert (ss != gfc_ss_terminator);"}, {"sha": "174cbc57a794f7db850e41e9ec35b13f939e96a3", "filename": "gcc/testsuite/gfortran.dg/func_assign_3.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37a40b531fa727259d2990fe37795a1ada14b831/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_assign_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37a40b531fa727259d2990fe37795a1ada14b831/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_assign_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_assign_3.f90?ref=37a40b531fa727259d2990fe37795a1ada14b831", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do run }\n+! Tests the fix for PR40646 in which the assignment would cause an ICE.\n+!\n+! Contributed by Charlie Sharpsteen  <chuck@sharpsteen.net>\n+! http://gcc.gnu.org/ml/fortran/2009-07/msg00010.html\n+! and reported by Tobias Burnus  <burnus@gcc,gnu.org>\n+!\n+module bugTestMod\n+  implicit none\n+  type:: boundTest\n+  contains\n+    procedure, nopass:: test => returnMat\n+  end type boundTest\n+contains\n+  function returnMat( a, b ) result( mat )\n+    integer:: a, b, i\n+    double precision, dimension(a,b):: mat\n+    mat = dble (reshape ([(i, i = 1, a * b)],[a,b])) \n+    return\n+  end function returnMat\n+end module bugTestMod\n+\n+program bugTest\n+  use bugTestMod\n+  implicit none\n+  integer i\n+  double precision, dimension(2,2):: testCatch\n+  type( boundTest ):: testObj\n+  testCatch = testObj%test(2,2)  ! This would cause an ICE\n+  if (any (testCatch .ne. dble (reshape ([(i, i = 1, 4)],[2,2])))) call abort\n+end program bugTest\n+! { dg-final { cleanup-modules \"bugTestMod\" } }"}]}