{"sha": "553a066827d62229c19acb444f0dee158153b20e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUzYTA2NjgyN2Q2MjIyOWMxOWFjYjQ0NGYwZGVlMTU4MTUzYjIwZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-06-15T07:25:51Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-06-15T07:25:51Z"}, "message": "cpp.texi: Revised and brought up to date.\n\n\n* doc/cpp.texi: Revised and brought up to date.\n* doc/cpp.1: Regenerate.\n\n[[Split portion of a mixed commit.]]\n\nFrom-SVN: r43395.2", "tree": {"sha": "0c9184cdb161a25d13619c719437b7f62d3195af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c9184cdb161a25d13619c719437b7f62d3195af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/553a066827d62229c19acb444f0dee158153b20e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553a066827d62229c19acb444f0dee158153b20e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/553a066827d62229c19acb444f0dee158153b20e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553a066827d62229c19acb444f0dee158153b20e/comments", "author": null, "committer": null, "parents": [{"sha": "f3c9b8530c78cef48be0f993d40778c08487d76b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3c9b8530c78cef48be0f993d40778c08487d76b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3c9b8530c78cef48be0f993d40778c08487d76b"}], "stats": {"total": 893, "additions": 449, "deletions": 444}, "files": [{"sha": "291ef34893392c4d89712ca8980af733579f1f9a", "filename": "gcc/doc/cpp.1", "status": "modified", "additions": 449, "deletions": 444, "changes": 893, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/553a066827d62229c19acb444f0dee158153b20e/gcc%2Fdoc%2Fcpp.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/553a066827d62229c19acb444f0dee158153b20e/gcc%2Fdoc%2Fcpp.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.1?ref=553a066827d62229c19acb444f0dee158153b20e", "patch": "@@ -1,5 +1,5 @@\n-.\\\" Automatically generated by Pod::Man version 1.1\n-.\\\" Mon Feb 19 19:32:17 2001\n+.\\\" Automatically generated by Pod::Man version 1.16\n+.\\\" Fri Jun 15 00:04:02 2001\n .\\\"\n .\\\" Standard preamble:\n .\\\" ======================================================================\n@@ -138,67 +138,59 @@\n .\\\" ======================================================================\n .\\\"\n .IX Title \"CPP 1\"\n-.TH CPP 1 \"gcc-3.1\" \"2001-02-19\" \"GNU\"\n+.TH CPP 1 \"gcc-3.1\" \"2001-06-15\" \"GNU\"\n .UC\n .SH \"NAME\"\n cpp \\- The C Preprocessor\n .SH \"SYNOPSIS\"\n .IX Header \"SYNOPSIS\"\n-cpp [\\fB\\-P\\fR] [\\fB\\-C\\fR] [\\fB\\-gcc\\fR] [\\fB\\-traditional\\fR]\n-    [\\fB\\-undef\\fR] [\\fB\\-trigraphs\\fR] [\\fB\\-pedantic\\fR]\n-    [\\fB\\-W\\fR\\fIwarn\\fR...] [\\fB\\-I\\fR\\fIdir\\fR...]\n-    [\\fB\\-D\\fR\\fImacro\\fR[=\\fIdefn\\fR]...] [\\fB\\-U\\fR\\fImacro\\fR]\n-    [\\fB\\-A\\fR\\fIpredicate\\fR(\\fIanswer\\fR)]\n-    [\\fB\\-M\\fR|\\fB\\-MM\\fR][\\fB\\-MG\\fR][\\fB\\-MF\\fR\\fIfilename\\fR]\n-    [\\fB\\-MP\\fR][\\fB\\-MQ\\fR\\fItarget\\fR...][\\fB\\-MT\\fR\\fItarget\\fR...]\n+cpp [\\fB\\-D\\fR\\fImacro\\fR[=\\fIdefn\\fR]...] [\\fB\\-U\\fR\\fImacro\\fR]\n+    [\\fB\\-I\\fR\\fIdir\\fR...] [\\fB\\-W\\fR\\fIwarn\\fR...]\n+    [\\fB\\-M\\fR|\\fB\\-MM\\fR] [\\fB\\-MG\\fR] [\\fB\\-MF\\fR \\fIfilename\\fR]\n+    [\\fB\\-MP\\fR] [\\fB\\-MQ\\fR \\fItarget\\fR...] [\\fB\\-MT\\fR \\fItarget\\fR...]\n     [\\fB\\-x\\fR \\fIlanguage\\fR] [\\fB\\-std=\\fR\\fIstandard\\fR]\n     \\fIinfile\\fR \\fIoutfile\\fR\n .PP\n Only the most useful options are listed here; see below for the remainder.\n .SH \"DESCRIPTION\"\n .IX Header \"DESCRIPTION\"\n-The C preprocessor is a \\fImacro processor\\fR that is used automatically\n-by the C compiler to transform your program before actual compilation.\n-It is called a macro processor because it allows you to define\n-\\&\\fImacros\\fR, which are brief abbreviations for longer constructs.\n+The C preprocessor, often known as \\fIcpp\\fR, is a \\fImacro processor\\fR\n+that is used automatically by the C compiler to transform your program\n+before compilation.  It is called a macro processor because it allows\n+you to define \\fImacros\\fR, which are brief abbreviations for longer\n+constructs.\n .PP\n-The C preprocessor is intended only for macro processing of C, \\*(C+ and\n-Objective C source files.  For macro processing of other files, you are\n-strongly encouraged to use alternatives like M4, which will likely give\n-you better results and avoid many problems.  For example, normally the C\n-preprocessor does not preserve arbitrary whitespace verbatim, but\n-instead replaces each sequence with a single space.\n+The C preprocessor is intended to be used only with C, \\*(C+, and\n+Objective C source code.  In the past, it has been abused as a general\n+text processor.  It will choke on input which does not obey C's lexical\n+rules.  For example, apostrophes will be interpreted as the beginning of\n+character constants, and cause errors.  Also, you cannot rely on it\n+preserving characteristics of the input which are not significant to\n+C-family languages.  If a Makefile is preprocessed, all the hard tabs\n+will be removed, and the Makefile will not work.\n .PP\n-For use on C-like source files, the C preprocessor provides four\n-separate facilities that you can use as you see fit:\n-.Ip \"\\(bu\" 4\n-Inclusion of header files.  These are files of declarations that can be\n-substituted into your program.\n-.Ip \"\\(bu\" 4\n-Macro expansion.  You can define \\fImacros\\fR, which are abbreviations\n-for arbitrary fragments of C code, and then the C preprocessor will\n-replace the macros with their definitions throughout the program.\n-.Ip \"\\(bu\" 4\n-Conditional compilation.  Using special preprocessing directives, you\n-can include or exclude parts of the program according to various\n-conditions.\n-.Ip \"\\(bu\" 4\n-Line control.  If you use a program to combine or rearrange source files\n-into an intermediate file which is then compiled, you can use line\n-control to inform the compiler of where each source line originally came\n-from.\n+Having said that, you can often get away with using cpp on things which\n+are not C.  Other Algol-ish programming languages are often safe\n+(Pascal, Ada, etc.) So is assembly, with caution.  \\fB\\-traditional\\fR\n+mode preserves more white space, and is otherwise more permissive.  Many\n+of the problems can be avoided by writing C or \\*(C+ style comments\n+instead of native language comments, and keeping macros simple.\n+.PP\n+Wherever possible, you should use a preprocessor geared to the language\n+you are writing in.  Modern versions of the \\s-1GNU\\s0 assembler have macro\n+facilities.  Most high level programming languages have their own\n+conditional compilation and inclusion mechanism.  If all else fails,\n+try a true general text processor, such as \\f(CW@docref\\fR{M4}.\n .PP\n C preprocessors vary in some details.  This manual discusses the \\s-1GNU\\s0 C\n preprocessor, which provides a small superset of the features of \\s-1ISO\\s0\n-Standard C.\n-.PP\n-In its default mode, the \\s-1GNU\\s0 C preprocessor does not do a few things\n-required by the standard.  These are features which are rarely, if ever,\n-used, and may cause surprising changes to the meaning of a program which\n-does not expect them.  To get strict \\s-1ISO\\s0 Standard C, you should use the\n-\\&\\fB\\-std=c89\\fR or \\fB\\-std=c99\\fR options, depending on which version\n-of the standard you want.  To get all the mandatory diagnostics, you\n-must also use \\fB\\-pedantic\\fR.  \n+Standard C.  In its default mode, the \\s-1GNU\\s0 C preprocessor does not do a\n+few things required by the standard.  These are features which are\n+rarely, if ever, used, and may cause surprising changes to the meaning\n+of a program which does not expect them.  To get strict \\s-1ISO\\s0 Standard C,\n+you should use the \\fB\\-std=c89\\fR or \\fB\\-std=c99\\fR options, depending\n+on which version of the standard you want.  To get all the mandatory\n+diagnostics, you must also use \\fB\\-pedantic\\fR.  \n .SH \"OPTIONS\"\n .IX Header \"OPTIONS\"\n The C preprocessor expects two file names as arguments, \\fIinfile\\fR and\n@@ -211,448 +203,238 @@ Either \\fIinfile\\fR or \\fIoutfile\\fR may be \\fB-\\fR, which as\n means to write to standard output.  Also, if either file is omitted, it\n means the same as if \\fB-\\fR had been specified for that file.\n .PP\n-Here is a table of command options accepted by the C preprocessor.\n-These options can also be given when compiling a C program; they are\n-passed along automatically to the preprocessor when it is invoked by the\n-compiler.\n-.Ip \"\\fB\\-P\\fR\" 4\n-.IX Item \"-P\"\n-Inhibit generation of \\fB#\\fR\\-lines with line-number information in the\n-output from the preprocessor.  This might be useful when running the\n-preprocessor on something that is not C code and will be sent to a\n-program which might be confused by the \\fB#\\fR\\-lines.  \n-.Ip \"\\fB\\-C\\fR\" 4\n-.IX Item \"-C\"\n-Do not discard comments.  All comments are passed through to the output\n-file, except for comments in processed directives, which are deleted\n-along with the directive.  Comments appearing in the expansion list of a\n-macro will be preserved, and appear in place wherever the macro is\n-invoked.\n-.Sp\n-You should be prepared for side effects when using \\fB\\-C\\fR; it causes\n-the preprocessor to treat comments as tokens in their own right.  For\n-example, macro redefinitions that were trivial when comments were\n-replaced by a single space might become significant when comments are\n-retained.  Also, comments appearing at the start of what would be a\n-directive line have the effect of turning that line into an ordinary\n-source line, since the first token on the line is no longer a \\fB#\\fR.\n-.Ip \"\\fB\\-traditional\\fR\" 4\n-.IX Item \"-traditional\"\n-Try to imitate the behavior of old-fashioned C, as opposed to \\s-1ISO\\s0 C.\n-.RS 4\n-.Ip \"\\(bu\" 4\n-Traditional macro expansion pays no attention to single-quote or\n-double-quote characters; macro argument symbols are replaced by the\n-argument values even when they appear within apparent string or\n-character constants.\n-.Ip \"\\(bu\" 4\n-Traditionally, it is permissible for a macro expansion to end in the\n-middle of a string or character constant.  The constant continues into\n-the text surrounding the macro call.\n-.Ip \"\\(bu\" 4\n-However, traditionally the end of the line terminates a string or\n-character constant, with no error.\n-.Ip \"\\(bu\" 4\n-In traditional C, a comment is equivalent to no text at all.  (In \\s-1ISO\\s0\n-C, a comment counts as whitespace.)\n-.Ip \"\\(bu\" 4\n-Traditional C does not have the concept of a ``preprocessing number''.\n-It considers \\fB1.0e+4\\fR to be three tokens: \\fB1.0e\\fR, \\fB+\\fR,\n-and \\fB4\\fR.\n-.Ip \"\\(bu\" 4\n-A macro is not suppressed within its own definition, in traditional C.\n-Thus, any macro that is used recursively inevitably causes an error.\n-.Ip \"\\(bu\" 4\n-The character \\fB#\\fR has no special meaning within a macro definition\n-in traditional C.\n-.Ip \"\\(bu\" 4\n-In traditional C, the text at the end of a macro expansion can run\n-together with the text after the macro call, to produce a single token.\n-(This is impossible in \\s-1ISO\\s0 C.)\n-.Ip \"\\(bu\" 4\n-None of the \\s-1GNU\\s0 extensions to the preprocessor are available in\n-\\&\\fB\\-traditional\\fR mode.\n-.RE\n-.RS 4\n-.Sp\n-Use the \\fB\\-traditional\\fR option when preprocessing Fortran code, so\n-that single-quotes and double-quotes within Fortran comment lines (which\n-are generally not recognized as such by the preprocessor) do not cause\n-diagnostics about unterminated character or string constants.\n-.Sp\n-However, this option does not prevent diagnostics about unterminated\n-comments when a C-style comment appears to start, but not end, within\n-Fortran-style commentary.\n-.Sp\n-So, the following Fortran comment lines are accepted with\n-\\&\\fB\\-traditional\\fR:\n-.Sp\n-.Vb 3\n-\\&        C This isn't an unterminated character constant\n-\\&        C Neither is \"20000000000, an octal constant\n-\\&        C in some dialects of Fortran\n-.Ve\n-However, this type of comment line will likely produce a diagnostic, or\n-at least unexpected output from the preprocessor, due to the\n-unterminated comment:\n+All single-letter options which take an argument may have that argument\n+appear immediately after the option letter, or with a space between\n+option and argument:  \\fB\\-Ifoo\\fR and \\fB\\-I foo\\fR have the same\n+effect.  Long options that take arguments require a space between option\n+and argument.\n+.if n .Ip \"\\f(CW\"\"\\-D \\f(CIname\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-D \\f(CIname\\f(CW\\fR\" 4\n+.IX Item \"-D name\"\n+Predefine \\fIname\\fR as a macro, with definition \\fB1\\fR.\n+.if n .Ip \"\\f(CW\"\"\\-D \\f(CIname\\f(CW=\\f(CIdefinition\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-D \\f(CIname\\f(CW=\\f(CIdefinition\\f(CW\\fR\" 4\n+.IX Item \"-D name=definition\"\n+Predefine \\fIname\\fR as a macro, with definition \\fIdefinition\\fR.\n+There are no restrictions on the contents of \\fIdefinition\\fR, but if\n+you are invoking the preprocessor from a shell or shell-like program you\n+may need to use the shell's quoting syntax to protect characters such as\n+spaces that have a meaning in the shell syntax.  If you use more than\n+one \\fB\\-D\\fR for the same \\fIname\\fR, the rightmost definition takes\n+effect.\n .Sp\n-.Vb 2\n-\\&        C Some Fortran compilers accept /* as starting\n-\\&        C an inline comment.\n-.Ve\n-Note that \\f(CW\\*(C`g77\\*(C'\\fR automatically supplies the \\fB\\-traditional\\fR\n-option when it invokes the preprocessor.  However, a future version of\n-\\&\\f(CW\\*(C`g77\\*(C'\\fR might use a different, more-Fortran-aware preprocessor in\n-place of \\f(CW\\*(C`cpp\\*(C'\\fR.\n-.RE\n-.Ip \"\\fB\\-trigraphs\\fR\" 4\n-.IX Item \"-trigraphs\"\n-Process \\s-1ISO\\s0 standard trigraph sequences.  These are three-character\n-sequences, all starting with \\fB??\\fR, that are defined by \\s-1ISO\\s0 C to\n-stand for single characters.  For example, \\fB??/\\fR stands for\n-\\&\\fB\\e\\fR, so \\fB'??/n'\\fR is a character constant for a newline.  By\n-default, \\s-1GCC\\s0 ignores trigraphs, but in standard-conforming modes it\n-converts them.  See the \\fB\\-std\\fR option.\n+If you wish to define a function-like macro on the command line, write\n+its argument list with surrounding parentheses before the equals sign\n+(if any).  Parentheses are meaningful to most shells, so you will need\n+to quote the option.  With \\fBsh\\fR and \\fBcsh\\fR,\n+\\&\\fB\\-D'\\fR\\fIname\\fR\\fB(\\fR\\fIargs...\\fR\\fB)=\\fR\\fIdefinition\\fR\\fB'\\fR works.\n+.if n .Ip \"\\f(CW\"\"\\-U \\f(CIname\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-U \\f(CIname\\f(CW\\fR\" 4\n+.IX Item \"-U name\"\n+Cancel any previous definition of \\fIname\\fR, either built in or\n+provided with a \\fB\\-D\\fR option.\n .Sp\n-The nine trigraph sequences are\n-.RS 4\n-.Ip \"\\fB??(\\fR\" 4\n-.IX Item \"??(\"\n--> \\fB[\\fR\n-.Ip \"\\fB??)\\fR\" 4\n-.IX Item \"??)\"\n--> \\fB]\\fR\n-.Ip \"\\fB??<\\fR\" 4\n-.IX Item \"??<\"\n--> \\fB{\\fR\n-.Ip \"\\fB??>\\fR\" 4\n-.IX Item \"??>\"\n--> \\fB}\\fR\n-.Ip \"\\fB??=\\fR\" 4\n-.IX Item \"??=\"\n--> \\fB#\\fR\n-.Ip \"\\fB??/\\fR\" 4\n-.IX Item \"??/\"\n--> \\fB\\e\\fR\n-.Ip \"\\fB??'\\fR\" 4\n-.IX Item \"??'\"\n--> \\fB^\\fR\n-.Ip \"\\fB??!\\fR\" 4\n-.IX Item \"??!\"\n--> \\fB|\\fR\n-.Ip \"\\fB??-\\fR\" 4\n-.IX Item \"??-\"\n--> \\fB~\\fR\n-.RE\n-.RS 4\n+All \\fB\\-imacros\\fR \\fIfile\\fR and \\fB\\-include\\fR \\fIfile\\fR options\n+are processed after all \\fB\\-D\\fR and \\fB\\-U\\fR options.\n+.if n .Ip \"\\f(CW\"\"\\-undef\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-undef\\fR\" 4\n+.IX Item \"-undef\"\n+Do not predefine any system-specific macros.  The common predefined\n+macros remain defined.\n+.if n .Ip \"\\f(CW\"\"\\-I \\f(CIdir\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-I \\f(CIdir\\f(CW\\fR\" 4\n+.IX Item \"-I dir\"\n+Add the directory \\fIdir\\fR to the list of directories to be searched\n+for header files.    Directories named by \\fB\\-I\\fR\n+are searched before the standard system include directories.\n .Sp\n-Trigraph support is not popular, so many compilers do not implement it\n-properly.  Portable code should not rely on trigraphs being either\n-converted or ignored.\n-.RE\n-.Ip \"\\fB\\-pedantic\\fR\" 4\n-.IX Item \"-pedantic\"\n-Issue warnings required by the \\s-1ISO\\s0 C standard in certain cases such\n-as when text other than a comment follows \\fB#else\\fR or \\fB#endif\\fR.\n-.Ip \"\\fB\\-pedantic-errors\\fR\" 4\n-.IX Item \"-pedantic-errors\"\n-Like \\fB\\-pedantic\\fR, except that errors are produced rather than\n-warnings.\n-.Ip \"\\fB\\-Wcomment\\fR\" 4\n+It is dangerous to specify a standard system include directory in an\n+\\&\\fB\\-I\\fR option.  This defeats the special treatment of system\n+headers.  It can also defeat the repairs to\n+buggy system headers which \\s-1GCC\\s0 makes when it is installed.\n+.if n .Ip \"\\f(CW\"\"\\-o \\f(CIfile\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-o \\f(CIfile\\f(CW\\fR\" 4\n+.IX Item \"-o file\"\n+Write output to \\fIfile\\fR.  This is the same as specifying \\fIfile\\fR\n+as the second non-option argument to \\fBcpp\\fR.  \\fBgcc\\fR has a\n+different interpretation of a second non-option argument, so you must\n+use \\fB\\-o\\fR to specify the output file.\n+.if n .Ip \"\\f(CW\"\"\\-Wall\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-Wall\\fR\" 4\n+.IX Item \"-Wall\"\n+Turns on all optional warnings which are desirable for normal code.  At\n+present this is \\fB\\-Wcomment\\fR and \\fB\\-Wtrigraphs\\fR.  Note that\n+many of the preprocessor's warnings are on by default and have no\n+options to control them.\n+.if n .Ip \"\\f(CW\"\"\\-Wcomment\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-Wcomment\\fR\" 4\n .IX Item \"-Wcomment\"\n .PD 0\n-.Ip \"\\fB\\-Wcomments\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\\-Wcomments\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-Wcomments\\fR\" 4\n .IX Item \"-Wcomments\"\n .PD\n-(Both forms have the same effect).\n Warn whenever a comment-start sequence \\fB/*\\fR appears in a \\fB/*\\fR\n comment, or whenever a backslash-newline appears in a \\fB//\\fR comment.\n-.Ip \"\\fB\\-Wtrigraphs\\fR\" 4\n+(Both forms have the same effect.)\n+.if n .Ip \"\\f(CW\"\"\\-Wtrigraphs\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-Wtrigraphs\\fR\" 4\n .IX Item \"-Wtrigraphs\"\n Warn if any trigraphs are encountered.  This option used to take effect\n only if \\fB\\-trigraphs\\fR was also specified, but now works\n independently.  Warnings are not given for trigraphs within comments, as\n-we feel this is obnoxious.\n-.Ip \"\\fB\\-Wwhite-space\\fR\" 4\n-.IX Item \"-Wwhite-space\"\n-Warn about possible white space confusion, e.g. white space between a\n-backslash and a newline.\n-.Ip \"\\fB\\-Wall\\fR\" 4\n-.IX Item \"-Wall\"\n-Requests \\fB\\-Wcomment\\fR, \\fB\\-Wtrigraphs\\fR, and \\fB\\-Wwhite-space\\fR\n-(but not \\fB\\-Wtraditional\\fR or \\fB\\-Wundef\\fR).\n-.Ip \"\\fB\\-Wtraditional\\fR\" 4\n+they do not affect the meaning of the program.\n+.if n .Ip \"\\f(CW\"\"\\-Wtraditional\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-Wtraditional\\fR\" 4\n .IX Item \"-Wtraditional\"\n Warn about certain constructs that behave differently in traditional and\n-\\&\\s-1ISO\\s0 C.\n-.RS 4\n-.Ip \"\\(bu\" 4\n-Macro parameters that appear within string literals in the macro body.\n-In traditional C macro replacement takes place within string literals,\n-but does not in \\s-1ISO\\s0 C.\n-.Ip \"\\(bu\" 4\n-In traditional C, some preprocessor directives did not exist.\n-Traditional preprocessors would only consider a line to be a directive\n-if the \\fB#\\fR appeared in column 1 on the line.  Therefore\n-\\&\\fB\\-Wtraditional\\fR warns about directives that traditional C\n-understands but would ignore because the \\fB#\\fR does not appear as the\n-first character on the line.  It also suggests you hide directives like\n-\\&\\fB#pragma\\fR not understood by traditional C by indenting them.  Some\n-traditional implementations would not recognise \\fB#elif\\fR, so it\n-suggests avoiding it altogether.\n-.Ip \"\\(bu\" 4\n-A function-like macro that appears without arguments.\n-.Ip \"\\(bu\" 4\n-The unary plus operator.\n-.Ip \"\\(bu\" 4\n-The `U' integer constant suffix.  (Traditonal C does support the `L'\n-suffix on integer constants.)  Note, these suffixes appear in macros\n-defined in the system headers of most modern systems, e.g. the _MIN/_MAX\n-macros in limits.h.  Use of these macros can lead to spurious warnings\n-as they do not necessarily reflect whether the code in question is any\n-less portable to traditional C given that suitable backup definitions\n-are provided.\n-.RE\n-.RS 4\n-.RE\n-.Ip \"\\fB\\-Wundef\\fR\" 4\n+\\&\\s-1ISO\\s0 C.  Also warn about \\s-1ISO\\s0 C constructs that have no traditional C\n+equivalent, and problematic constructs which should be avoided.\n+.if n .Ip \"\\f(CW\"\"\\-Wimport\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-Wimport\\fR\" 4\n+.IX Item \"-Wimport\"\n+Warn the first time \\fB#import\\fR is used.\n+.if n .Ip \"\\f(CW\"\"\\-Wundef\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-Wundef\\fR\" 4\n .IX Item \"-Wundef\"\n-Warn if an undefined identifier is evaluated in an \\fB#if\\fR directive.\n-.Ip \"\\fB\\-I\\fR \\fIdirectory\\fR\" 4\n-.IX Item \"-I directory\"\n-Add the directory \\fIdirectory\\fR to the head of the list of\n-directories to be searched for header files.\n-This can be used to override a system header file, substituting your\n-own version, since these directories are searched before the system\n-header file directories.  If you use more than one \\fB\\-I\\fR option,\n-the directories are scanned in left-to-right order; the standard\n-system directories come after.\n-.Ip \"\\fB\\-I-\\fR\" 4\n-.IX Item \"-I-\"\n-Any directories specified with \\fB\\-I\\fR options before the \\fB\\-I-\\fR\n-option are searched only for the case of \\fB#include \"\\fR\\fIfile\\fR\\fB\"\\fR;\n-they are not searched for \\fB#include <\\fR\\fIfile\\fR\\fB>\\fR.\n-.Sp\n-If additional directories are specified with \\fB\\-I\\fR options after\n-the \\fB\\-I-\\fR, these directories are searched for all \\fB#include\\fR\n-directives.\n-.Sp\n-In addition, the \\fB\\-I-\\fR option inhibits the use of the current\n-directory as the first search directory for \\fB#include \"\\fR\\fIfile\\fR\\fB\"\\fR.\n-Therefore, the current directory is searched only if it is requested\n-explicitly with \\fB\\-I.\\fR.  Specifying both \\fB\\-I-\\fR and \\fB\\-I.\\fR\n-allows you to control precisely which directories are searched before\n-the current one and which are searched after.\n-.Ip \"\\fB\\-nostdinc\\fR\" 4\n-.IX Item \"-nostdinc\"\n-Do not search the standard system directories for header files.\n-Only the directories you have specified with \\fB\\-I\\fR options\n-(and the current directory, if appropriate) are searched.\n-.Sp\n-By using both \\fB\\-nostdinc\\fR and \\fB\\-I-\\fR, you can limit the include-file\n-search path to only those directories you specify explicitly.\n-.Ip \"\\fB\\-nostdinc++\\fR\" 4\n-.IX Item \"-nostdinc++\"\n-Do not search for header files in the \\*(C+\\-specific standard directories,\n-but do still search the other standard directories.  (This option is\n-used when building the \\*(C+ library.)\n-.Ip \"\\fB\\-remap\\fR\" 4\n-.IX Item \"-remap\"\n-When searching for a header file in a directory, remap file names if a\n-file named \\fIheader.gcc\\fR exists in that directory.  This can be used\n-to work around limitations of file systems with file name restrictions.\n-The \\fIheader.gcc\\fR file should contain a series of lines with two\n-tokens on each line: the first token is the name to map, and the second\n-token is the actual name to use.\n-.Ip \"\\fB\\-D\\fR \\fIname\\fR\" 4\n-.IX Item \"-D name\"\n-Predefine \\fIname\\fR as a macro, with definition \\fB1\\fR.\n-.Ip \"\\fB\\-D\\fR \\fIname\\fR\\fB=\\fR\\fIdefinition\\fR\" 4\n-.IX Item \"-D name=definition\"\n-Predefine \\fIname\\fR as a macro, with definition \\fIdefinition\\fR.\n-There are no restrictions on the contents of \\fIdefinition\\fR, but if\n-you are invoking the preprocessor from a shell or shell-like program you\n-may need to use the shell's quoting syntax to protect characters such as\n-spaces that have a meaning in the shell syntax.  If you use more than\n-one \\fB\\-D\\fR for the same \\fIname\\fR, the rightmost definition takes\n-effect.\n-.Sp\n-Any \\fB\\-D\\fR and \\fB\\-U\\fR options on the command line are processed in\n-order, and always before \\fB\\-imacros\\fR \\fIfile\\fR, regardless of the\n-order in which they are written.\n-.Ip \"\\fB\\-U\\fR \\fIname\\fR\" 4\n-.IX Item \"-U name\"\n-Do not predefine \\fIname\\fR.\n-.Sp\n-Any \\fB\\-D\\fR and \\fB\\-U\\fR options on the command line are processed in\n-order, and always before \\fB\\-imacros\\fR \\fIfile\\fR, regardless of the\n-order in which they are written.\n-.Ip \"\\fB\\-undef\\fR\" 4\n-.IX Item \"-undef\"\n-Do not predefine any nonstandard macros.\n-.Ip \"\\fB\\-gcc\\fR\" 4\n-.IX Item \"-gcc\"\n-Define the macros \\fI_\\|_GNUC_\\|_\\fR, \\fI_\\|_GNUC_MINOR_\\|_\\fR and\n-\\&\\fI_\\|_GNUC_PATCHLEVEL_\\|_\\fR. These are defined automatically when you use\n-\\&\\fBgcc \\-E\\fR; you can turn them off in that case with \\fB\\-no-gcc\\fR.\n-.Ip \"\\fB\\-A\\fR \\fIpredicate\\fR\\fB=\\fR\\fIanswer\\fR\" 4\n-.IX Item \"-A predicate=answer\"\n-Make an assertion with the predicate \\fIpredicate\\fR and answer\n-\\&\\fIanswer\\fR.  This form is preferred to the older form \\fB\\-A\\fR\n-\\&\\fIpredicate\\fR\\fB(\\fR\\fIanswer\\fR\\fB)\\fR, which is still supported, because\n-it does not use shell special characters.  \n-.Ip \"\\fB\\-A -\\fR\\fIpredicate\\fR\\fB=\\fR\\fIanswer\\fR\" 4\n-.IX Item \"-A -predicate=answer\"\n-Disable an assertion with the predicate \\fIpredicate\\fR and answer\n-\\&\\fIanswer\\fR.  Specifying no predicate, by \\fB\\-A-\\fR or \\fB\\-A -\\fR,\n-disables all predefined assertions and all assertions preceding it on\n-the command line; and also undefines all predefined macros and all\n-macros preceding it on the command line.\n-.Ip \"\\fB\\-dM\\fR\" 4\n-.IX Item \"-dM\"\n-Instead of outputting the result of preprocessing, output a list of\n-\\&\\fB#define\\fR directives for all the macros defined during the\n-execution of the preprocessor, including predefined macros.  This gives\n-you a way of finding out what is predefined in your version of the\n-preprocessor; assuming you have no file \\fBfoo.h\\fR, the command\n-.Sp\n-.Vb 1\n-\\&        touch foo.h; cpp -dM foo.h\n-.Ve\n-will show the values of any predefined macros.\n-.Ip \"\\fB\\-dD\\fR\" 4\n-.IX Item \"-dD\"\n-Like \\fB\\-dM\\fR except in two respects: it does \\fInot\\fR include the\n-predefined macros, and it outputs \\fIboth\\fR the \\fB#define\\fR\n-directives and the result of preprocessing.  Both kinds of output go to\n-the standard output file.\n-.Ip \"\\fB\\-dN\\fR\" 4\n-.IX Item \"-dN\"\n-Like \\fB\\-dD\\fR, but emit only the macro names, not their expansions.\n-.Ip \"\\fB\\-dI\\fR\" 4\n-.IX Item \"-dI\"\n-Output \\fB#include\\fR directives in addition to the result of\n-preprocessing.\n-.Ip \"\\fB\\-M\\fR\" 4\n+Warn whenever an identifier which is not a macro is encountered in an\n+\\&\\fB#if\\fR directive, outside of \\fBdefined\\fR.  Such identifiers are\n+replaced with zero.\n+.if n .Ip \"\\f(CW\"\"\\-Werror\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-Werror\\fR\" 4\n+.IX Item \"-Werror\"\n+Make all warnings into hard errors.  Source code which triggers warnings\n+will be rejected.\n+.if n .Ip \"\\f(CW\"\"\\-Wsystem\\-headers\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-Wsystem\\-headers\\fR\" 4\n+.IX Item \"-Wsystem-headers\"\n+Issue warnings for code in system headers.  These are normally unhelpful\n+in finding bugs in your own code, therefore suppressed.  If you are\n+responsible for the system library, you may want to see them.\n+.if n .Ip \"\\f(CW\"\"\\-w\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-w\\fR\" 4\n+.IX Item \"-w\"\n+Suppress all warnings, including those which \\s-1GNU\\s0 \\s-1CPP\\s0 issues by default.\n+.if n .Ip \"\\f(CW\"\"\\-pedantic\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-pedantic\\fR\" 4\n+.IX Item \"-pedantic\"\n+Issue all the mandatory diagnostics listed in the C standard.  Some of\n+them are left out by default, since they trigger frequently on harmless\n+code.\n+.if n .Ip \"\\f(CW\"\"\\-pedantic\\-errors\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-pedantic\\-errors\\fR\" 4\n+.IX Item \"-pedantic-errors\"\n+Issue all the mandatory diagnostics, and make all mandatory diagnostics\n+into errors.  This includes mandatory diagnostics that \\s-1GCC\\s0 issues\n+without \\fB\\-pedantic\\fR but treats as warnings.\n+.if n .Ip \"\\f(CW\"\"\\-M\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-M\\fR\" 4\n .IX Item \"-M\"\n Instead of outputting the result of preprocessing, output a rule\n suitable for \\f(CW\\*(C`make\\*(C'\\fR describing the dependencies of the main source\n file.  The preprocessor outputs one \\f(CW\\*(C`make\\*(C'\\fR rule containing the\n object file name for that source file, a colon, and the names of all the\n included files, including those coming from \\fB\\-include\\fR or\n-\\&\\fB\\-imacros\\fR command line options.  Unless specified explicitly (with\n-\\&\\fB\\-MT\\fR or \\fB\\-MQ\\fR), the object file name consists of the basename\n-of the source file with any suffix replaced with object file suffix.\n-If there are many included files\n-then the rule is split into several lines using \\fB\\e\\fR\\-newline.\n-.Ip \"\\fB\\-MM\\fR\" 4\n+\\&\\fB\\-imacros\\fR command line options.\n+.Sp\n+Unless specified explicitly (with \\fB\\-MT\\fR or \\fB\\-MQ\\fR), the\n+object file name consists of the basename of the source file with any\n+suffix replaced with object file suffix.  If there are many included\n+files then the rule is split into several lines using \\fB\\e\\fR\\-newline.\n+The rule has no commands.\n+.if n .Ip \"\\f(CW\"\"\\-MM\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-MM\\fR\" 4\n .IX Item \"-MM\"\n Like \\fB\\-M\\fR, but mention only the files included with \\fB#include\n \"\\fR\\fIfile\\fR\\fB\"\\fR or with \\fB\\-include\\fR or \\fB\\-imacros\\fR command line\n options.  System header files included with \\fB#include <\\fR\\fIfile\\fR\\fB>\\fR\n are omitted.\n-.Ip \"\\fB\\-MF\\fR \\fIfile\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\\-MF \\f(CIfile\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-MF \\f(CIfile\\f(CW\\fR\" 4\n .IX Item \"-MF file\"\n When used with \\fB\\-M\\fR or \\fB\\-MM\\fR, specifies a file to write the\n dependencies to.  This allows the preprocessor to write the preprocessed\n file to stdout normally.  If no \\fB\\-MF\\fR switch is given, \\s-1CPP\\s0 sends\n the rules to stdout and suppresses normal preprocessed output.\n-.Ip \"\\fB\\-MG\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\\-MG\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-MG\\fR\" 4\n .IX Item \"-MG\"\n When used with \\fB\\-M\\fR or \\fB\\-MM\\fR, \\fB\\-MG\\fR says to treat missing\n header files as generated files and assume they live in the same\n directory as the source file.  It suppresses preprocessed output, as a\n missing header file is ordinarily an error.\n .Sp\n This feature is used in automatic updating of makefiles.\n-.Ip \"\\fB\\-MP\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\\-MP\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-MP\\fR\" 4\n .IX Item \"-MP\"\n This option instructs \\s-1CPP\\s0 to add a phony target for each dependency\n other than the main file, causing each to depend on nothing.  These\n dummy rules work around errors \\f(CW\\*(C`make\\*(C'\\fR gives if you remove header\n files without updating the \\f(CW\\*(C`Makefile\\*(C'\\fR to match.\n .Sp\n-This is typical output:\\-\n+This is typical output:\n .Sp\n .Vb 1\n-\\&        /tmp/test.o: /tmp/test.c /tmp/test.h\n+\\&        test.o: test.c test.h\n .Ve\n .Vb 1\n-\\&        /tmp/test.h:\n+\\&        test.h:\n .Ve\n-.Ip \"\\fB\\-MQ\\fR \\fItarget\\fR\" 4\n-.IX Item \"-MQ target\"\n-.PD 0\n-.Ip \"\\fB\\-MT\\fR \\fItarget\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\\-MT \\f(CItarget\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-MT \\f(CItarget\\f(CW\\fR\" 4\n .IX Item \"-MT target\"\n-.PD\n-By default \\s-1CPP\\s0 uses the main file name, including any path, and appends\n-the object suffix, normally ``.o'', to it to obtain the name of the\n-target for dependency generation.  With \\fB\\-MT\\fR you can specify a\n-target yourself, overriding the default one.\n+Change the target of the rule emitted by dependency generation.  By\n+default \\s-1CPP\\s0 takes the name of the main input file, including any path,\n+deletes any file suffix such as \\fB.c\\fR, and appends the platform's\n+usual object suffix.  The result is the target.\n .Sp\n-If you want multiple targets, you can specify them as a single argument\n-to \\fB\\-MT\\fR, or use multiple \\fB\\-MT\\fR options.\n+An \\fB\\-MT\\fR option will set the target to be exactly the string you\n+specify.  If you want multiple targets, you can specify them as a single\n+argument to \\fB\\-MT\\fR, or use multiple \\fB\\-MT\\fR options.\n .Sp\n-The targets you specify are output in the order they appear on the\n-command line.  \\fB\\-MQ\\fR is identical to \\fB\\-MT\\fR, except that the\n-target name is quoted for Make, but with \\fB\\-MT\\fR it isn't.  For\n-example, \\-MT '$(objpfx)foo.o' gives\n+For example, \\fB\\-MT\\ '$(objpfx)foo.o'\\fR might give\n .Sp\n .Vb 1\n-\\&        $(objpfx)foo.o: /tmp/foo.c\n+\\&        $(objpfx)foo.o: foo.c\n .Ve\n-but \\-MQ '$(objpfx)foo.o' gives\n+.if n .Ip \"\\f(CW\"\"\\-MQ \\f(CItarget\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-MQ \\f(CItarget\\f(CW\\fR\" 4\n+.IX Item \"-MQ target\"\n+Same as \\fB\\-MT\\fR, but it quotes any characters which are special to\n+Make. \\fB\\-MQ\\ '$(objpfx)foo.o'\\fR gives\n .Sp\n .Vb 1\n-\\&        $$(objpfx)foo.o: /tmp/foo.c\n+\\&        $$(objpfx)foo.o: foo.c\n .Ve\n The default target is automatically quoted, as if it were given with\n \\&\\fB\\-MQ\\fR.\n-.Ip \"\\fB\\-H\\fR\" 4\n-.IX Item \"-H\"\n-Print the name of each header file used, in addition to other normal\n-activities.\n-.Ip \"\\fB\\-imacros\\fR \\fIfile\\fR\" 4\n-.IX Item \"-imacros file\"\n-Process \\fIfile\\fR as input, discarding the resulting output, before\n-processing the regular input file.  Because the output generated from\n-\\&\\fIfile\\fR is discarded, the only effect of \\fB\\-imacros\\fR \\fIfile\\fR\n-is to make the macros defined in \\fIfile\\fR available for use in the\n-main input.\n-.Ip \"\\fB\\-include\\fR \\fIfile\\fR\" 4\n-.IX Item \"-include file\"\n-Process \\fIfile\\fR as input, and include all the resulting output,\n-before processing the regular input file.  \n-.Ip \"\\fB\\-idirafter\\fR \\fIdir\\fR\" 4\n-.IX Item \"-idirafter dir\"\n-Add the directory \\fIdir\\fR to the second include path.  The directories\n-on the second include path are searched when a header file is not found\n-in any of the directories in the main include path (the one that\n-\\&\\fB\\-I\\fR adds to).\n-.Ip \"\\fB\\-iprefix\\fR \\fIprefix\\fR\" 4\n-.IX Item \"-iprefix prefix\"\n-Specify \\fIprefix\\fR as the prefix for subsequent \\fB\\-iwithprefix\\fR\n-options.  If the prefix represents a directory, you should include the\n-final \\fB/\\fR.\n-.Ip \"\\fB\\-iwithprefix\\fR \\fIdir\\fR\" 4\n-.IX Item \"-iwithprefix dir\"\n-Add a directory to the second include path.  The directory's name is\n-made by concatenating \\fIprefix\\fR and \\fIdir\\fR, where \\fIprefix\\fR was\n-specified previously with \\fB\\-iprefix\\fR.\n-.Ip \"\\fB\\-isystem\\fR \\fIdir\\fR\" 4\n-.IX Item \"-isystem dir\"\n-Add a directory to the beginning of the second include path, marking it\n-as a system directory, so that it gets the same special treatment as\n-is applied to the standard system directories.  \n-.Ip \"\\fB\\-x c\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\\-MD \\f(CIfile\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-MD \\f(CIfile\\f(CW\\fR\" 4\n+.IX Item \"-MD file\"\n+.PD 0\n+.if n .Ip \"\\f(CW\"\"\\-MMD \\f(CIfile\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-MMD \\f(CIfile\\f(CW\\fR\" 4\n+.IX Item \"-MMD file\"\n+.PD\n+\\&\\fB\\-MD\\fR \\fIfile\\fR is equivalent to \\fB\\-M \\-MF\\fR \\fIfile\\fR, and\n+\\&\\fB\\-MMD\\fR \\fIfile\\fR is equivalent to \\fB\\-MM \\-MF\\fR \\fIfile\\fR.\n+.Sp\n+Due to limitations in the compiler driver, you must use these switches\n+when you want to generate a dependency file as a side-effect of normal\n+compilation.\n+.if n .Ip \"\\f(CW\"\"\\-x c\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-x c\\fR\" 4\n .IX Item \"-x c\"\n .PD 0\n-.Ip \"\\fB\\-x c++\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\\-x c++\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-x c++\\fR\" 4\n .IX Item \"-x c++\"\n-.Ip \"\\fB\\-x objective-c\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\\-x objective\\-c\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-x objective\\-c\\fR\" 4\n .IX Item \"-x objective-c\"\n-.Ip \"\\fB\\-x assembler-with-cpp\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\\-x assembler\\-with\\-cpp\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-x assembler\\-with\\-cpp\\fR\" 4\n .IX Item \"-x assembler-with-cpp\"\n .PD\n Specify the source language: C, \\*(C+, Objective-C, or assembly.  This has\n@@ -668,10 +450,12 @@ generic mode.\n which selected both the language and the standards conformance level.\n This option has been removed, because it conflicts with the \\fB\\-l\\fR\n option.\n-.Ip \"\\fB\\-std=\\fR\\fIstandard\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\\-std=\\f(CIstandard\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-std=\\f(CIstandard\\f(CW\\fR\" 4\n .IX Item \"-std=standard\"\n .PD 0\n-.Ip \"\\fB\\-ansi\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\\-ansi\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-ansi\\fR\" 4\n .IX Item \"-ansi\"\n .PD\n Specify the standard to which the code should conform.  Currently cpp\n@@ -729,18 +513,243 @@ The 1999 C standard plus \\s-1GNU\\s0 extensions.\n .RE\n .RS 4\n .RE\n-.Ip \"\\fB\\-ftabstop=NUMBER\\fR\" 4\n-.IX Item \"-ftabstop=NUMBER\"\n-Set the distance between tab stops.  This helps the preprocessor\n-report correct column numbers in warnings or errors, even if tabs appear\n-on the line.  Values less than 1 or greater than 100 are ignored.  The\n-default is 8.\n-.Ip \"\\fB\\-$\\fR\" 4\n+.if n .Ip \"\\f(CW\"\"\\-I\\-\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-I\\-\\fR\" 4\n+.IX Item \"-I-\"\n+Split the include path.  Any directories specified with \\fB\\-I\\fR\n+options before \\fB\\-I-\\fR are searched only for headers requested with\n+\\&\\fB#include\\ \"\\f(BIfile\\fB\"\\fR; they are not searched for\n+\\&\\fB#include\\ <\\f(BIfile\\fB>\\fR.  If additional directories are\n+specified with \\fB\\-I\\fR options after the \\fB\\-I-\\fR, those\n+directories are searched for all \\fB#include\\fR directives.\n+.Sp\n+In addition, \\fB\\-I-\\fR inhibits the use of the directory of the current\n+file directory as the first search directory for \\fB#include\\ \"\\f(BIfile\\fB\"\\fR.  \n+.if n .Ip \"\\f(CW\"\"\\-nostdinc\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-nostdinc\\fR\" 4\n+.IX Item \"-nostdinc\"\n+Do not search the standard system directories for header files.\n+Only the directories you have specified with \\fB\\-I\\fR options\n+(and the directory of the current file, if appropriate) are searched.\n+.if n .Ip \"\\f(CW\"\"\\-nostdinc++\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-nostdinc++\\fR\" 4\n+.IX Item \"-nostdinc++\"\n+Do not search for header files in the \\*(C+\\-specific standard directories,\n+but do still search the other standard directories.  (This option is\n+used when building the \\*(C+ library.)\n+.if n .Ip \"\\f(CW\"\"\\-include \\f(CIfile\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-include \\f(CIfile\\f(CW\\fR\" 4\n+.IX Item \"-include file\"\n+Process \\fIfile\\fR as if \\f(CW\\*(C`#include \"file\"\\*(C'\\fR appeared as the first\n+line of the primary source file.  However, the first directory searched\n+for \\fIfile\\fR is the preprocessor's working directory \\fIinstead of\\fR\n+the directory containing the main source file.  If not found there, it\n+is searched for in the remainder of the \\f(CW\\*(C`#include \"...\"\\*(C'\\fR search\n+chain as normal.\n+.Sp\n+If multiple \\fB\\-include\\fR options are given, the files are included\n+in the order they appear on the command line.\n+.if n .Ip \"\\f(CW\"\"\\-imacros \\f(CIfile\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-imacros \\f(CIfile\\f(CW\\fR\" 4\n+.IX Item \"-imacros file\"\n+Exactly like \\fB\\-include\\fR, except that any output produced by\n+scanning \\fIfile\\fR is thrown away.  Macros it defines remain defined.\n+This allows you to acquire all the macros from a header without also\n+processing its declarations.\n+.Sp\n+All files specified by \\fB\\-imacros\\fR are processed before all files\n+specified by \\fB\\-include\\fR.\n+.if n .Ip \"\\f(CW\"\"\\-idirafter \\f(CIdir\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-idirafter \\f(CIdir\\f(CW\\fR\" 4\n+.IX Item \"-idirafter dir\"\n+Search \\fIdir\\fR for header files, but do it \\fIafter\\fR all\n+directories specified with \\fB\\-I\\fR and the standard system directories\n+have been exhausted.  \\fIdir\\fR is treated as a system include directory.\n+.if n .Ip \"\\f(CW\"\"\\-iprefix \\f(CIprefix\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-iprefix \\f(CIprefix\\f(CW\\fR\" 4\n+.IX Item \"-iprefix prefix\"\n+Specify \\fIprefix\\fR as the prefix for subsequent \\fB\\-iwithprefix\\fR\n+options.  If the prefix represents a directory, you should include the\n+final \\fB/\\fR.\n+.if n .Ip \"\\f(CW\"\"\\-iwithprefix \\f(CIdir\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-iwithprefix \\f(CIdir\\f(CW\\fR\" 4\n+.IX Item \"-iwithprefix dir\"\n+.PD 0\n+.if n .Ip \"\\f(CW\"\"\\-iwithprefixbefore \\f(CIdir\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-iwithprefixbefore \\f(CIdir\\f(CW\\fR\" 4\n+.IX Item \"-iwithprefixbefore dir\"\n+.PD\n+Append \\fIdir\\fR to the prefix specified previously with\n+\\&\\fB\\-iprefix\\fR, and add the resulting directory to the include search\n+path.  \\fB\\-iwithprefixbefore\\fR puts it in the same place \\fB\\-I\\fR\n+would; \\fB\\-iwithprefix\\fR puts it where \\fB\\-idirafter\\fR would.\n+.Sp\n+Use of these options is discouraged.\n+.if n .Ip \"\\f(CW\"\"\\-isystem \\f(CIdir\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-isystem \\f(CIdir\\f(CW\\fR\" 4\n+.IX Item \"-isystem dir\"\n+Search \\fIdir\\fR for header files, after all directories specified by\n+\\&\\fB\\-I\\fR but before the standard system directories.  Mark it\n+as a system directory, so that it gets the same special treatment as\n+is applied to the standard system directories.  \n+.if n .Ip \"\\f(CW\"\"\\-fpreprocessed\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-fpreprocessed\\fR\" 4\n+.IX Item \"-fpreprocessed\"\n+Indicate to the preprocessor that the input file has already been\n+preprocessed.  This suppresses things like macro expansion, trigraph\n+conversion, escaped newline splicing, and processing of most directives.\n+In this mode the integrated preprocessor is little more than a tokenizer\n+for the front ends.\n+.Sp\n+\\&\\fB\\-fpreprocessed\\fR is implicit if the input file has one of the\n+extensions \\fB.i\\fR, \\fB.ii\\fR or \\fB.mi\\fR.  These are the\n+extensions that \\s-1GCC\\s0 uses for preprocessed files created by\n+\\&\\fB\\-save-temps\\fR.\n+.if n .Ip \"\\f(CW\"\"\\-ftabstop=\\f(CIwidth\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-ftabstop=\\f(CIwidth\\f(CW\\fR\" 4\n+.IX Item \"-ftabstop=width\"\n+Set the distance between tab stops.  This helps the preprocessor report\n+correct column numbers in warnings or errors, even if tabs appear on the\n+line.  If the value is less than 1 or greater than 100, the option is\n+ignored.  The default is 8.\n+.if n .Ip \"\\f(CW\"\"\\-fno\\-show\\-column\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-fno\\-show\\-column\\fR\" 4\n+.IX Item \"-fno-show-column\"\n+Do not print column numbers in diagnostics.  This may be necessary if\n+diagnostics are being scanned by a program that does not understand the\n+column numbers, such as \\f(CW\\*(C`dejagnu\\*(C'\\fR.\n+.if n .Ip \"\\f(CW\"\"\\-A \\f(CIpredicate\\f(CW=\\f(CIanswer\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-A \\f(CIpredicate\\f(CW=\\f(CIanswer\\f(CW\\fR\" 4\n+.IX Item \"-A predicate=answer\"\n+Make an assertion with the predicate \\fIpredicate\\fR and answer\n+\\&\\fIanswer\\fR.  This form is preferred to the older form \\fB\\-A\\fR\n+\\&\\fIpredicate\\fR\\fB(\\fR\\fIanswer\\fR\\fB)\\fR, which is still supported, because\n+it does not use shell special characters.  \n+.if n .Ip \"\\f(CW\"\"\\-A \\-\\f(CIpredicate\\f(CW=\\f(CIanswer\\f(CW\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-A \\-\\f(CIpredicate\\f(CW=\\f(CIanswer\\f(CW\\fR\" 4\n+.IX Item \"-A -predicate=answer\"\n+Cancel an assertion with the predicate \\fIpredicate\\fR and answer\n+\\&\\fIanswer\\fR.\n+.if n .Ip \"\\f(CW\"\"\\-A\\-\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-A\\-\\fR\" 4\n+.IX Item \"-A-\"\n+Cancel all predefined assertions and all assertions preceding it on\n+the command line.  Also, undefine all predefined macros and all\n+macros preceding it on the command line.  (This is a historical wart and\n+may change in the future.)\n+.if n .Ip \"\\f(CW\"\"\\-dM\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-dM\\fR\" 4\n+.IX Item \"-dM\"\n+Instead of the normal output, generate a list of \\fB#define\\fR\n+directives for all the macros defined during the execution of the\n+preprocessor, including predefined macros.  This gives you a way of\n+finding out what is predefined in your version of the preprocessor.\n+Assuming you have no file \\fBfoo.h\\fR, the command\n+.Sp\n+.Vb 1\n+\\&        touch foo.h; cpp -dM foo.h\n+.Ve\n+will show all the predefined macros.\n+.if n .Ip \"\\f(CW\"\"\\-dD\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-dD\\fR\" 4\n+.IX Item \"-dD\"\n+Like \\fB\\-dM\\fR except in two respects: it does \\fInot\\fR include the\n+predefined macros, and it outputs \\fIboth\\fR the \\fB#define\\fR\n+directives and the result of preprocessing.  Both kinds of output go to\n+the standard output file.\n+.if n .Ip \"\\f(CW\"\"\\-dN\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-dN\\fR\" 4\n+.IX Item \"-dN\"\n+Like \\fB\\-dD\\fR, but emit only the macro names, not their expansions.\n+.if n .Ip \"\\f(CW\"\"\\-dI\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-dI\\fR\" 4\n+.IX Item \"-dI\"\n+Output \\fB#include\\fR directives in addition to the result of\n+preprocessing.\n+.if n .Ip \"\\f(CW\"\"\\-P\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-P\\fR\" 4\n+.IX Item \"-P\"\n+Inhibit generation of linemarkers in the output from the preprocessor.\n+This might be useful when running the preprocessor on something that is\n+not C code, and will be sent to a program which might be confused by the\n+linemarkers.  \n+.if n .Ip \"\\f(CW\"\"\\-C\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-C\\fR\" 4\n+.IX Item \"-C\"\n+Do not discard comments.  All comments are passed through to the output\n+file, except for comments in processed directives, which are deleted\n+along with the directive.  Comments appearing in the expansion list of a\n+macro will be preserved, and appear in place wherever the macro is\n+invoked.\n+.Sp\n+You should be prepared for side effects when using \\fB\\-C\\fR; it causes\n+the preprocessor to treat comments as tokens in their own right.  For\n+example, macro redefinitions that were trivial when comments were\n+replaced by a single space might become significant when comments are\n+retained.  Also, comments appearing at the start of what would be a\n+directive line have the effect of turning that line into an ordinary\n+source line, since the first token on the line is no longer a \\fB#\\fR.\n+.if n .Ip \"\\f(CW\"\"\\-gcc\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-gcc\\fR\" 4\n+.IX Item \"-gcc\"\n+Define the macros _\\|_GNUC_\\|_, _\\|_GNUC_MINOR_\\|_ and\n+_\\|_GNUC_PATCHLEVEL_\\|_. These are defined automatically when you use\n+\\&\\fBgcc \\-E\\fR; you can turn them off in that case with \\fB\\-no-gcc\\fR.\n+.if n .Ip \"\\f(CW\"\"\\-traditional\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-traditional\\fR\" 4\n+.IX Item \"-traditional\"\n+Try to imitate the behavior of old-fashioned C, as opposed to \\s-1ISO\\s0\n+C. \n+.if n .Ip \"\\f(CW\"\"\\-trigraphs\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-trigraphs\\fR\" 4\n+.IX Item \"-trigraphs\"\n+Process trigraph sequences.  \n+.if n .Ip \"\\f(CW\"\"\\-remap\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-remap\\fR\" 4\n+.IX Item \"-remap\"\n+Enable special code to work around file systems which only permit very\n+short file names, such as \\s-1MS-DOS\\s0.\n+.if n .Ip \"\\f(CW\"\"\\-$\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-$\\fR\" 4\n .IX Item \"-$\"\n Forbid the use of \\fB$\\fR in identifiers.  The C standard allows\n implementations to define extra characters that can appear in\n identifiers.  By default the \\s-1GNU\\s0 C preprocessor permits \\fB$\\fR, a\n common extension.\n+.if n .Ip \"\\f(CW\"\"\\-h\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-h\\fR\" 4\n+.IX Item \"-h\"\n+.PD 0\n+.if n .Ip \"\\f(CW\"\"\\-\\-help\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-\\-help\\fR\" 4\n+.IX Item \"--help\"\n+.if n .Ip \"\\f(CW\"\"\\-\\-target\\-help\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-\\-target\\-help\\fR\" 4\n+.IX Item \"--target-help\"\n+.PD\n+Print text describing all the command line options instead of\n+preprocessing anything.\n+.if n .Ip \"\\f(CW\"\"\\-v\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-v\\fR\" 4\n+.IX Item \"-v\"\n+Verbose mode.  Print out \\s-1GNU\\s0 \\s-1CPP\\s0's version number at the beginning of\n+execution, and report the final form of the include path.\n+.if n .Ip \"\\f(CW\"\"\\-H\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-H\\fR\" 4\n+.IX Item \"-H\"\n+Print the name of each header file used, in addition to other normal\n+activities.  Each name is indented to show how deep in the\n+\\&\\fB#include\\fR stack it is.\n+.if n .Ip \"\\f(CW\"\"\\-version\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-version\\fR\" 4\n+.IX Item \"-version\"\n+.PD 0\n+.if n .Ip \"\\f(CW\"\"\\-\\-version\"\"\\fR\" 4\n+.el .Ip \"\\f(CW\\-\\-version\\fR\" 4\n+.IX Item \"--version\"\n+.PD\n+Print out \\s-1GNU\\s0 \\s-1CPP\\s0's version number.  With one dash, proceed to\n+preprocess as normal.  With two dashes, exit immediately.\n .SH \"SEE ALSO\"\n .IX Header \"SEE ALSO\"\n \\&\\fIgcc\\fR\\|(1), \\fIas\\fR\\|(1), \\fIld\\fR\\|(1), and the Info entries for \\fIcpp\\fR, \\fIgcc\\fR, and\n@@ -751,14 +760,10 @@ Copyright (c) 1987, 1989, 1991, 1992, 1993, 1994, 1995, 1996,\n 1997, 1998, 1999, 2000, 2001\n Free Software Foundation, Inc.\n .PP\n-Permission is granted to make and distribute verbatim copies of\n-this manual provided the copyright notice and this permission notice\n-are preserved on all copies.\n-.PP\n-Permission is granted to copy and distribute modified versions of this\n-manual under the conditions for verbatim copying, provided also that\n-the entire resulting derived work is distributed under the terms of a\n-permission notice identical to this one.\n-.PP\n-Permission is granted to copy and distribute translations of this manual\n-into another language, under the above conditions for modified versions.\n+Permission is granted to copy, distribute and/or modify this document\n+under the terms of the \\s-1GNU\\s0 Free Documentation License, Version 1.1 or\n+any later version published by the Free Software Foundation.  A copy of\n+the license is included in the accompanying manual for \\s-1GNU\\s0 \\s-1CC\\s0, in the\n+section ``\\s-1GNU\\s0 Free Documentation License''.\n+This manual contains no Invariant Sections, and has no Front-Cover Texts\n+or Back-Cover Texts."}]}