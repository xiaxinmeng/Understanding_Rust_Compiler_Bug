{"sha": "ef2ceb103d2eaa47fc9d2a8e8c93360c7886a186", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYyY2ViMTAzZDJlYWE0N2ZjOWQyYThlOGM5MzM2MGM3ODg2YTE4Ng==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-06-08T12:08:36Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-06-08T12:08:36Z"}, "message": "Code refactoring of symtab_summary.\n\n2018-06-08  Martin Liska  <mliska@suse.cz>\n\n\t* symbol-summary.h (function_summary): Move constructor\n\timplementation out of class declaration.\n\t(release): Likewise.\n\t(symtab_insertion): Likewise.\n\t(symtab_removal): Likewise.\n\t(symtab_duplication): Likewise.\n\t(get): Likewise.\n\nFrom-SVN: r261307", "tree": {"sha": "f139aa32468e18416473e0c708f07be434fcbcbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f139aa32468e18416473e0c708f07be434fcbcbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef2ceb103d2eaa47fc9d2a8e8c93360c7886a186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2ceb103d2eaa47fc9d2a8e8c93360c7886a186", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef2ceb103d2eaa47fc9d2a8e8c93360c7886a186", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef2ceb103d2eaa47fc9d2a8e8c93360c7886a186/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb147cfbca3ec0005967eb37be65c3e9eafaeace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb147cfbca3ec0005967eb37be65c3e9eafaeace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb147cfbca3ec0005967eb37be65c3e9eafaeace"}], "stats": {"total": 229, "additions": 140, "deletions": 89}, "files": [{"sha": "b8f501be7f644fe3b45c04c5d52739a65e747508", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2ceb103d2eaa47fc9d2a8e8c93360c7886a186/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2ceb103d2eaa47fc9d2a8e8c93360c7886a186/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef2ceb103d2eaa47fc9d2a8e8c93360c7886a186", "patch": "@@ -1,3 +1,13 @@\n+2018-06-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* symbol-summary.h (function_summary): Move constructor\n+\timplementation out of class declaration.\n+\t(release): Likewise.\n+\t(symtab_insertion): Likewise.\n+\t(symtab_removal): Likewise.\n+\t(symtab_duplication): Likewise.\n+\t(get): Likewise.\n+\n 2018-06-08  Martin Liska  <mliska@suse.cz>\n \n \t* Makefile.in: Remove support for MPX (macros, related functions,"}, {"sha": "13f8f04342ae962a39d50e242e245ec36a65a961", "filename": "gcc/symbol-summary.h", "status": "modified", "additions": 130, "deletions": 89, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef2ceb103d2eaa47fc9d2a8e8c93360c7886a186/gcc%2Fsymbol-summary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef2ceb103d2eaa47fc9d2a8e8c93360c7886a186/gcc%2Fsymbol-summary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymbol-summary.h?ref=ef2ceb103d2eaa47fc9d2a8e8c93360c7886a186", "patch": "@@ -31,26 +31,23 @@ class function_summary\n   function_summary();\n };\n \n+/* Function summary is a helper class that is used to associate a data structure\n+   related to a callgraph node.  Typical usage can be seen in IPA passes which\n+   create a temporary pass-related structures.  The summary class registers\n+   hooks that are triggered when a new node is inserted, duplicated and deleted.\n+   A user of a summary class can ovewrite virtual methods than are triggered by\n+   the summary if such hook is triggered.  Apart from a callgraph node, the user\n+   is given a data structure tied to the node.\n+\n+   The function summary class can work both with a heap-allocated memory and\n+   a memory gained by garbage collected memory.  */\n+\n template <class T>\n class GTY((user)) function_summary <T *>\n {\n public:\n   /* Default construction takes SYMTAB as an argument.  */\n-  function_summary (symbol_table *symtab, bool ggc = false): m_ggc (ggc),\n-    m_insertion_enabled (true), m_released (false), m_map (13, ggc),\n-    m_symtab (symtab)\n-  {\n-    m_symtab_insertion_hook =\n-      symtab->add_cgraph_insertion_hook\n-      (function_summary::symtab_insertion, this);\n-\n-    m_symtab_removal_hook =\n-      symtab->add_cgraph_removal_hook\n-      (function_summary::symtab_removal, this);\n-    m_symtab_duplication_hook =\n-      symtab->add_cgraph_duplication_hook\n-      (function_summary::symtab_duplication, this);\n-  }\n+  function_summary (symbol_table *symtab, bool ggc = false);\n \n   /* Destructor.  */\n   virtual ~function_summary ()\n@@ -59,22 +56,7 @@ class GTY((user)) function_summary <T *>\n   }\n \n   /* Destruction method that can be called for GGT purpose.  */\n-  void release ()\n-  {\n-    if (m_released)\n-      return;\n-\n-    m_symtab->remove_cgraph_insertion_hook (m_symtab_insertion_hook);\n-    m_symtab->remove_cgraph_removal_hook (m_symtab_removal_hook);\n-    m_symtab->remove_cgraph_duplication_hook (m_symtab_duplication_hook);\n-\n-    /* Release all summaries.  */\n-    typedef typename hash_map <map_hash, T *>::iterator map_iterator;\n-    for (map_iterator it = m_map.begin (); it != m_map.end (); ++it)\n-      release ((*it).second);\n-\n-    m_released = true;\n-  }\n+  void release ();\n \n   /* Traverses all summarys with a function F called with\n      ARG as argument.  */\n@@ -102,16 +84,7 @@ class GTY((user)) function_summary <T *>\n   }\n \n   /* Release an item that is stored within map.  */\n-  void release (T *item)\n-  {\n-    if (m_ggc)\n-      {\n-\titem->~T ();\n-\tggc_free (item);\n-      }\n-    else\n-      delete item;\n-  }\n+  void release (T *item);\n \n   /* Getter for summary callgraph node pointer.  */\n   T* get (cgraph_node *node)\n@@ -145,50 +118,14 @@ class GTY((user)) function_summary <T *>\n   }\n \n   /* Symbol insertion hook that is registered to symbol table.  */\n-  static void symtab_insertion (cgraph_node *node, void *data)\n-  {\n-    gcc_checking_assert (node->summary_uid);\n-    function_summary *summary = (function_summary <T *> *) (data);\n-\n-    if (summary->m_insertion_enabled)\n-      summary->insert (node, summary->get (node));\n-  }\n+  static void symtab_insertion (cgraph_node *node, void *data);\n \n   /* Symbol removal hook that is registered to symbol table.  */\n-  static void symtab_removal (cgraph_node *node, void *data)\n-  {\n-    gcc_checking_assert (node->summary_uid);\n-    function_summary *summary = (function_summary <T *> *) (data);\n-\n-    int summary_uid = node->summary_uid;\n-    T **v = summary->m_map.get (summary_uid);\n-\n-    if (v)\n-      {\n-\tsummary->remove (node, *v);\n-\tsummary->release (*v);\n-\tsummary->m_map.remove (summary_uid);\n-      }\n-  }\n+  static void symtab_removal (cgraph_node *node, void *data);\n \n   /* Symbol duplication hook that is registered to symbol table.  */\n   static void symtab_duplication (cgraph_node *node, cgraph_node *node2,\n-\t\t\t\t  void *data)\n-  {\n-    function_summary *summary = (function_summary <T *> *) (data);\n-    T **v = summary->m_map.get (node->summary_uid);\n-\n-    gcc_checking_assert (node2->summary_uid > 0);\n-\n-    if (v)\n-      {\n-\t/* This load is necessary, because we insert a new value!  */\n-\tT *data = *v;\n-\tT *duplicate = summary->allocate_new ();\n-\tsummary->m_map.put (node2->summary_uid, duplicate);\n-\tsummary->duplicate (node, node2, data, duplicate);\n-      }\n-  }\n+\t\t\t\t  void *data);\n \n protected:\n   /* Indication if we use ggc summary.  */\n@@ -198,15 +135,7 @@ class GTY((user)) function_summary <T *>\n   typedef int_hash <int, 0, -1> map_hash;\n \n   /* Getter for summary callgraph ID.  */\n-  T* get (int uid)\n-  {\n-    bool existed;\n-    T **v = &m_map.get_or_insert (uid, &existed);\n-    if (!existed)\n-      *v = allocate_new ();\n-\n-    return *v;\n-  }\n+  T* get (int uid);\n \n   /* Indicates if insertion hook is enabled.  */\n   bool m_insertion_enabled;\n@@ -229,6 +158,118 @@ class GTY((user)) function_summary <T *>\n       gt_pointer_operator, void *);\n };\n \n+template <typename T>\n+function_summary<T *>::function_summary (symbol_table *symtab, bool ggc):\n+  m_ggc (ggc), m_insertion_enabled (true), m_released (false), m_map (13, ggc),\n+  m_symtab (symtab)\n+{\n+  m_symtab_insertion_hook\n+    = symtab->add_cgraph_insertion_hook (function_summary::symtab_insertion,\n+\t\t\t\t\t this);\n+\n+  m_symtab_removal_hook\n+    = symtab->add_cgraph_removal_hook (function_summary::symtab_removal, this);\n+  m_symtab_duplication_hook\n+    = symtab->add_cgraph_duplication_hook (function_summary::symtab_duplication,\n+\t\t\t\t\t   this);\n+}\n+\n+template <typename T>\n+void\n+function_summary<T *>::release ()\n+{\n+  if (m_released)\n+    return;\n+\n+  m_symtab->remove_cgraph_insertion_hook (m_symtab_insertion_hook);\n+  m_symtab->remove_cgraph_removal_hook (m_symtab_removal_hook);\n+  m_symtab->remove_cgraph_duplication_hook (m_symtab_duplication_hook);\n+\n+  /* Release all summaries.  */\n+  typedef typename hash_map <map_hash, T *>::iterator map_iterator;\n+  for (map_iterator it = m_map.begin (); it != m_map.end (); ++it)\n+    release ((*it).second);\n+\n+  m_released = true;\n+}\n+\n+template <typename T>\n+void\n+function_summary<T *>::release (T *item)\n+{\n+  if (m_ggc)\n+    {\n+      item->~T ();\n+      ggc_free (item);\n+    }\n+  else\n+    delete item;\n+}\n+\n+template <typename T>\n+void\n+function_summary<T *>::symtab_insertion (cgraph_node *node, void *data)\n+{\n+  gcc_checking_assert (node->summary_uid);\n+  function_summary *summary = (function_summary <T *> *) (data);\n+\n+  if (summary->m_insertion_enabled)\n+    summary->insert (node, summary->get (node));\n+}\n+\n+template <typename T>\n+void\n+function_summary<T *>::symtab_removal (cgraph_node *node, void *data)\n+{\n+  gcc_checking_assert (node->summary_uid);\n+  function_summary *summary = (function_summary <T *> *) (data);\n+\n+  int summary_uid = node->summary_uid;\n+  T **v = summary->m_map.get (summary_uid);\n+\n+  if (v)\n+    {\n+      summary->remove (node, *v);\n+\n+      if (!summary->m_ggc)\n+\tdelete (*v);\n+\n+      summary->m_map.remove (summary_uid);\n+    }\n+}\n+\n+template <typename T>\n+void\n+function_summary<T *>::symtab_duplication (cgraph_node *node,\n+\t\t\t\t\t   cgraph_node *node2, void *data)\n+{\n+  function_summary *summary = (function_summary <T *> *) (data);\n+  T **v = summary->m_map.get (node->summary_uid);\n+\n+  gcc_checking_assert (node2->summary_uid > 0);\n+\n+  if (v)\n+    {\n+      /* This load is necessary, because we insert a new value!  */\n+      T *data = *v;\n+      T *duplicate = summary->allocate_new ();\n+      summary->m_map.put (node2->summary_uid, duplicate);\n+      summary->duplicate (node, node2, data, duplicate);\n+    }\n+}\n+\n+template <typename T>\n+T*\n+function_summary<T *>::get (int uid)\n+{\n+  bool existed;\n+  T **v = &m_map.get_or_insert (uid, &existed);\n+  if (!existed)\n+    *v = allocate_new ();\n+\n+  return *v;\n+}\n+\n template <typename T>\n void\n gt_ggc_mx(function_summary<T *>* const &summary)"}]}