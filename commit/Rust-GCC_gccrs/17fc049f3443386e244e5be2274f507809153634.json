{"sha": "17fc049f3443386e244e5be2274f507809153634", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdmYzA0OWYzNDQzMzg2ZTI0NGU1YmUyMjc0ZjUwNzgwOTE1MzYzNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-07-04T16:08:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-07-04T16:08:21Z"}, "message": "re PR rtl-optimization/44479 (false dependencies are computed after vectorization)\n\n2010-07-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/44479\n\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr): Avoid\n\textra SSA name copy statements which preserves points-to\n\tinformation.\n\t* tree-vect-data-refs.c (vect_create_addr_base_for_vector_ref):\n\tCopy points-to information for all pointers.  Properly handle\n\tMEM_REFs.\n\t(vect_create_data_ref_ptr): Likewise.  Avoid extra SSA name\n\tcopy statements.\n\t* Makefile.in (tree-ssa-loop-ivopts.o): Add tree-ssa-propagate.h\n\tdependency.\n\nFrom-SVN: r161802", "tree": {"sha": "59e80ed510f8ae3365e1b7da08565e3b031f12d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59e80ed510f8ae3365e1b7da08565e3b031f12d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17fc049f3443386e244e5be2274f507809153634", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17fc049f3443386e244e5be2274f507809153634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17fc049f3443386e244e5be2274f507809153634", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17fc049f3443386e244e5be2274f507809153634/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9dfc4144a464f1ee0306ff388ee85e2c178f18c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9dfc4144a464f1ee0306ff388ee85e2c178f18c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9dfc4144a464f1ee0306ff388ee85e2c178f18c"}], "stats": {"total": 71, "additions": 50, "deletions": 21}, "files": [{"sha": "3d976e541cb7ee1cbd06e2fe8dc73f0764f9b2b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fc049f3443386e244e5be2274f507809153634/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fc049f3443386e244e5be2274f507809153634/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17fc049f3443386e244e5be2274f507809153634", "patch": "@@ -1,3 +1,17 @@\n+2010-07-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/44479\n+\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr): Avoid\n+\textra SSA name copy statements which preserves points-to\n+\tinformation.\n+\t* tree-vect-data-refs.c (vect_create_addr_base_for_vector_ref):\n+\tCopy points-to information for all pointers.  Properly handle\n+\tMEM_REFs.\n+\t(vect_create_data_ref_ptr): Likewise.  Avoid extra SSA name\n+\tcopy statements.\n+\t* Makefile.in (tree-ssa-loop-ivopts.o): Add tree-ssa-propagate.h\n+\tdependency.\n+\n 2010-07-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/44785"}, {"sha": "299062bcae7d7635a3ca19040b3d27fe6c99dd51", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fc049f3443386e244e5be2274f507809153634/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fc049f3443386e244e5be2274f507809153634/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=17fc049f3443386e244e5be2274f507809153634", "patch": "@@ -2566,7 +2566,7 @@ tree-ssa-loop-ivopts.o : tree-ssa-loop-ivopts.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(TREE_PASS_H) $(GGC_H) $(RECOG_H) insn-config.h $(HASHTAB_H) $(SCEV_H) \\\n    $(CFGLOOP_H) $(PARAMS_H) langhooks.h $(BASIC_BLOCK_H) \\\n    tree-affine.h pointer-set.h $(TARGET_H) tree-pretty-print.h \\\n-   gimple-pretty-print.h\n+   gimple-pretty-print.h tree-ssa-propagate.h\n tree-affine.o : tree-affine.c tree-affine.h $(CONFIG_H) pointer-set.h \\\n    $(SYSTEM_H) $(TREE_H) $(GIMPLE_H) \\\n    output.h $(DIAGNOSTIC_H) coretypes.h $(TREE_DUMP_H) $(FLAGS_H) \\"}, {"sha": "b7b26a329f2cd5e38856633c9333440c5c085217", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fc049f3443386e244e5be2274f507809153634/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fc049f3443386e244e5be2274f507809153634/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=17fc049f3443386e244e5be2274f507809153634", "patch": "@@ -89,6 +89,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"tree-affine.h\"\n #include \"target.h\"\n+#include \"tree-ssa-propagate.h\"\n \n /* FIXME: Expressions are expanded to RTL in this pass to determine the\n    cost of different addressing modes.  This should be moved to a TBD\n@@ -5481,20 +5482,26 @@ rewrite_use_nonlinear_expr (struct ivopts_data *data,\n       gcc_unreachable ();\n     }\n \n-  op = force_gimple_operand_gsi (&bsi, comp, false, SSA_NAME_VAR (tgt),\n-\t\t\t\t true, GSI_SAME_STMT);\n+  if (!valid_gimple_rhs_p (comp)\n+      || (gimple_code (use->stmt) != GIMPLE_PHI\n+\t  /* We can't allow re-allocating the stmt as it might be pointed\n+\t     to still.  */\n+\t  && (get_gimple_rhs_num_ops (TREE_CODE (comp))\n+\t      >= gimple_num_ops (gsi_stmt (bsi)))))\n+    comp = force_gimple_operand_gsi (&bsi, comp, false, SSA_NAME_VAR (tgt),\n+\t\t\t\t     true, GSI_SAME_STMT);\n \n   if (gimple_code (use->stmt) == GIMPLE_PHI)\n     {\n-      ass = gimple_build_assign (tgt, op);\n+      ass = gimple_build_assign (tgt, comp);\n       gsi_insert_before (&bsi, ass, GSI_SAME_STMT);\n \n       bsi = gsi_for_stmt (use->stmt);\n       remove_phi_node (&bsi, false);\n     }\n   else\n     {\n-      gimple_assign_set_rhs_from_tree (&bsi, op);\n+      gimple_assign_set_rhs_from_tree (&bsi, comp);\n       use->stmt = gsi_stmt (bsi);\n     }\n }"}, {"sha": "629450c4f361c3d9477d0d8ce4b4d2879a434ca8", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17fc049f3443386e244e5be2274f507809153634/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17fc049f3443386e244e5be2274f507809153634/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=17fc049f3443386e244e5be2274f507809153634", "patch": "@@ -2787,7 +2787,7 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n   vect_ptr_type = build_pointer_type (STMT_VINFO_VECTYPE (stmt_info));\n   base = get_base_address (DR_REF (dr));\n   if (base\n-      && INDIRECT_REF_P (base))\n+      && TREE_CODE (base) == MEM_REF)\n     vect_ptr_type\n       = build_qualified_type (vect_ptr_type,\n \t\t\t      TYPE_QUALS (TREE_TYPE (TREE_OPERAND (base, 0))));\n@@ -2799,6 +2799,10 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n   vec_stmt = force_gimple_operand (vec_stmt, &seq, false, addr_expr);\n   gimple_seq_add_seq (new_stmt_list, seq);\n \n+  if (DR_PTR_INFO (dr)\n+      && TREE_CODE (vec_stmt) == SSA_NAME)\n+    duplicate_ssa_name_ptr_info (vec_stmt, DR_PTR_INFO (dr));\n+\n   if (vect_print_dump_info (REPORT_DETAILS))\n     {\n       fprintf (vect_dump, \"created \");\n@@ -2934,7 +2938,7 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n   vect_ptr_type = build_pointer_type (vectype);\n   base = get_base_address (DR_REF (dr));\n   if (base\n-      && INDIRECT_REF_P (base))\n+      && TREE_CODE (base) == MEM_REF)\n     vect_ptr_type\n       = build_qualified_type (vect_ptr_type,\n \t\t\t      TYPE_QUALS (TREE_TYPE (TREE_OPERAND (base, 0))));\n@@ -3032,17 +3036,26 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n   *initial_address = new_temp;\n \n   /* Create: p = (vectype *) initial_base  */\n-  vec_stmt = gimple_build_assign (vect_ptr,\n-\t\t\t\t  fold_convert (vect_ptr_type, new_temp));\n-  vect_ptr_init = make_ssa_name (vect_ptr, vec_stmt);\n-  gimple_assign_set_lhs (vec_stmt, vect_ptr_init);\n-  if (pe)\n+  if (TREE_CODE (new_temp) != SSA_NAME\n+      || !useless_type_conversion_p (vect_ptr_type, TREE_TYPE (new_temp)))\n     {\n-      new_bb = gsi_insert_on_edge_immediate (pe, vec_stmt);\n-      gcc_assert (!new_bb);\n+      vec_stmt = gimple_build_assign (vect_ptr,\n+\t\t\t\t      fold_convert (vect_ptr_type, new_temp));\n+      vect_ptr_init = make_ssa_name (vect_ptr, vec_stmt);\n+      /* Copy the points-to information if it exists. */\n+      if (DR_PTR_INFO (dr))\n+\tduplicate_ssa_name_ptr_info (vect_ptr_init, DR_PTR_INFO (dr));\n+      gimple_assign_set_lhs (vec_stmt, vect_ptr_init);\n+      if (pe)\n+\t{\n+\t  new_bb = gsi_insert_on_edge_immediate (pe, vec_stmt);\n+\t  gcc_assert (!new_bb);\n+\t}\n+      else\n+\tgsi_insert_before (&gsi, vec_stmt, GSI_SAME_STMT);\n     }\n   else\n-    gsi_insert_before (&gsi, vec_stmt, GSI_SAME_STMT);\n+    vect_ptr_init = new_temp;\n \n   /** (4) Handle the updating of the vector-pointer inside the loop.\n \t  This is needed when ONLY_INIT is false, and also when AT_LOOP\n@@ -3051,12 +3064,7 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n \n   /* No update in loop is required.  */\n   if (only_init && (!loop_vinfo || at_loop == loop))\n-    {\n-      /* Copy the points-to information if it exists. */\n-      if (DR_PTR_INFO (dr))\n-        duplicate_ssa_name_ptr_info (vect_ptr_init, DR_PTR_INFO (dr));\n-      vptr = vect_ptr_init;\n-    }\n+    vptr = vect_ptr_init;\n   else\n     {\n       /* The step of the vector pointer is the Vector Size.  */"}]}