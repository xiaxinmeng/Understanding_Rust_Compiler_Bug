{"sha": "c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZhMjQzOGFhZjJjZWViMTM3ZDIxZDY3YjAwZWRmMjdhOTIxMDRjMA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-04-20T18:20:39Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-04-20T18:20:39Z"}, "message": "target.h (encode_section_info): Add new argument carrying the RTL to be modified by the hook.\n\n\t* target.h (encode_section_info): Add new argument carrying\n\tthe RTL to be modified by the hook.\n\n\t* varasm.c (make_decl_rtl, output_constant_def): Update calls\n\tto encode_section_info.\n\t(default_encode_section_info): Take and use RTL argument,\n\tdon't use TREE_CST_RTL or DECL_RTL.\n\t* output.h: Update prototype of default_encode_section_info.\n\t* config/darwin.h (ASM_DECLARE_OBJECT_NAME)\n\t(ASM_DECLARE_FUNCTION_NAME, ASM_OUTPUT_ALIGNED_DECL_LOCAL):\n\tUpdate calls to encode_section_info.\n\n\t* config/darwin.c, config/arm/arm.c, config/arm/pe.c\n\t* config/h8300/h8300.c, config/i386/winnt.c, config/m32r/m32r.c\n\t* config/m68hc11/m68hc11.c, config/m88k/m88k.c, config/mcore/mcore.c\n\t* config/mips/mips.c, config/mmix/mmix.c, config/pa/pa.c\n\t* config/romp/romp.c, config/rs6000/rs6000.c, config/s390/s390.c\n\t* config/v850/v850.c (TARGET_ENCODE_SECTION_INFO definitions):\n\tTake and use RTL argument, don't use TREE_CST_RTL or DECL_RTL,\n\texcept for PE dllimport/dllexport.  Update calls to\n\tdefault_encode_section_info.\n\n\t* config/darwin-protos.h, config/arm/arm-protos.h, config/i386-protos.h:\n\tUpdate prototypes.\n\n\t* doc/tm.texi (TARGET_ENCODE_SECTION_INFO): Update.\n\nFrom-SVN: r65859", "tree": {"sha": "6af2bc9bef24c55c4233dbdc955842df62042749", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6af2bc9bef24c55c4233dbdc955842df62042749"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/comments", "author": null, "committer": null, "parents": [{"sha": "8c7d377fa2a94ea39f7eb38df8aeb776452f49f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7d377fa2a94ea39f7eb38df8aeb776452f49f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7d377fa2a94ea39f7eb38df8aeb776452f49f0"}], "stats": {"total": 315, "additions": 174, "deletions": 141}, "files": [{"sha": "f4e81ebb4da93586b70d7c081ca1e420fad5d3d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 53, "deletions": 24, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -1,3 +1,32 @@\n+2003-04-20  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* target.h (encode_section_info): Add new argument carrying\n+\tthe RTL to be modified by the hook.\n+\n+\t* varasm.c (make_decl_rtl, output_constant_def): Update calls\n+\tto encode_section_info.\n+\t(default_encode_section_info): Take and use RTL argument,\n+\tdon't use TREE_CST_RTL or DECL_RTL.\n+\t* output.h: Update prototype of default_encode_section_info.\n+\t* config/darwin.h (ASM_DECLARE_OBJECT_NAME)\n+\t(ASM_DECLARE_FUNCTION_NAME, ASM_OUTPUT_ALIGNED_DECL_LOCAL):\n+\tUpdate calls to encode_section_info.\n+\n+\t* config/darwin.c, config/arm/arm.c, config/arm/pe.c\n+\t* config/h8300/h8300.c, config/i386/winnt.c, config/m32r/m32r.c\n+\t* config/m68hc11/m68hc11.c, config/m88k/m88k.c, config/mcore/mcore.c\n+\t* config/mips/mips.c, config/mmix/mmix.c, config/pa/pa.c\n+\t* config/romp/romp.c, config/rs6000/rs6000.c, config/s390/s390.c\n+\t* config/v850/v850.c (TARGET_ENCODE_SECTION_INFO definitions):\n+\tTake and use RTL argument, don't use TREE_CST_RTL or DECL_RTL,\n+\texcept for PE dllimport/dllexport.  Update calls to\n+\tdefault_encode_section_info.\n+\n+\t* config/darwin-protos.h, config/arm/arm-protos.h, config/i386-protos.h:\n+\tUpdate prototypes.\n+\n+\t* doc/tm.texi (TARGET_ENCODE_SECTION_INFO): Update.\n+\n 2003-04-20  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR/8705\n@@ -251,19 +280,19 @@ Sat Apr 19 14:56:17 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* calls.c (expand_call): Move special case for constructor calls\n \tto right place. Ensures constructor calls used to initialize\n-\targuments get a clean outgoing argument block for themselves. \n+\targuments get a clean outgoing argument block for themselves.\n \tMove check for stack deallocation completeness until after last\n \tdeallocation.  Add stack_pointer_delta to set of state\n \tvariables saved and restored along with current stack_level.\n-\t\n-        * integrate.c (expand_inline_function): Ensure non-const actuals\n-        don't end up const in the caller's flow after conversion to possibly\n-        const formal type.\n+\n+\t* integrate.c (expand_inline_function): Ensure non-const actuals\n+\tdon't end up const in the caller's flow after conversion to possibly\n+\tconst formal type.\n \n 2003-04-18  Vincent Celier  <celier@gnat.com>\n \n-        * dwarf2out.c (loc_descriptor_from_tree): Treat all *_MOD_EXPR\n-        and *_DIV_EXPR as TRUNC_*_EXPR.\n+\t* dwarf2out.c (loc_descriptor_from_tree): Treat all *_MOD_EXPR\n+\tand *_DIV_EXPR as TRUNC_*_EXPR.\n \n 2003-04-18  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -379,8 +408,8 @@ Fri Apr 18 01:28:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-04-17  Simon Law  <sfllaw@engmail.uwaterloo.ca>\n \n-        * doc/include/gpl.texi: Fix double-spacing after \"MA\" to match\n-        the one provided by the FSF.\n+\t* doc/include/gpl.texi: Fix double-spacing after \"MA\" to match\n+\tthe one provided by the FSF.\n \n 2003-04-17  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n@@ -444,7 +473,7 @@ Fri Apr 18 01:28:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t(tls_model_chars): Remove.\n \t(larl_operand): Use SYMBOL_REF_FLAGS.\n \t(tls_symbolic_operand): Use SYMBOL_REF_TLS_MODEL.\n-\t(legitimize_pic_address): Use SYMBOL_REF_LOCAL_P. \n+\t(legitimize_pic_address): Use SYMBOL_REF_LOCAL_P.\n \t(s390_output_mi_thunk): Likewise.\n \t(s390_emit_prologue): Set SYMBOL_FLAG_LOCAL as needed.\n \t(s390_function_profiler): Likewise.\n@@ -505,7 +534,7 @@ Fri Apr 18 01:28:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-04-17  Richard Henderson  <rth@redhat.com>\n \n-\t* varasm.c (default_encode_section_info): Don't set \n+\t* varasm.c (default_encode_section_info): Don't set\n \tSYMBOL_FLAG_EXTERNAL if not TREE_PUBLIC.\n \t* config/i370/i370.c (i370_encode_section_info): Remove.\n \t* config/i370/i370.h (CONSTANT_ADDRESS_P): Use SYMBOL_REF_EXTERNAL_P.\n@@ -577,7 +606,7 @@ Fri Apr 18 01:28:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n 2003-04-16  Richard Henderson  <rth@redhat.com>\n \n \t* arc.c (arc_encode_section_info): Remove.\n-\t(arc_assemble_integer): Use SYMBOL_REF_FUNCTION_P.\t\n+\t(arc_assemble_integer): Use SYMBOL_REF_FUNCTION_P.\n \t(arc_print_operand, arc_print_operand_address): Likewise.\n \t* arc.h (EXTRA_CONSTRAINT): Likewise.\n \n@@ -618,16 +647,16 @@ Fri Apr 18 01:28:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-04-16  Olivier Hainque <hainque@act-europe.fr>\n \n-        * tree.c (skip_simple_arithmetics_at, saved_expr_p): New functions.\n-        (save_expr): Replace loop by call to skip_simple_arithmetics_at.\n-        * tree.h: Add prototypes for the two new functions.\n-        * fold-const.c (fold_binary_op_with_conditional_arg): Replace test\n-        updates introduced in the previous revision by call to saved_expr_p.\n-        * stor-layout.c (put_pending_size): Use skip_simple_arithmetics_at.\n+\t* tree.c (skip_simple_arithmetics_at, saved_expr_p): New functions.\n+\t(save_expr): Replace loop by call to skip_simple_arithmetics_at.\n+\t* tree.h: Add prototypes for the two new functions.\n+\t* fold-const.c (fold_binary_op_with_conditional_arg): Replace test\n+\tupdates introduced in the previous revision by call to saved_expr_p.\n+\t* stor-layout.c (put_pending_size): Use skip_simple_arithmetics_at.\n \n-        * expr.c (store_field): Force usage of bitfield instructions when\n-        the field position requires it, whatever SLOW_UNALIGNED_ACCESS.\n-        (expand_expr, case BIT_FIELD_REF): likewise.\n+\t* expr.c (store_field): Force usage of bitfield instructions when\n+\tthe field position requires it, whatever SLOW_UNALIGNED_ACCESS.\n+\t(expand_expr, case BIT_FIELD_REF): likewise.\n \n 2003-04-16  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -673,9 +702,9 @@ Fri Apr 18 01:28:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n 2003-04-16  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * config.gcc: Add t-spe for eabispe.\n+\t* config.gcc: Add t-spe for eabispe.\n \n-        * config/rs6000/t-spe: New.\n+\t* config/rs6000/t-spe: New.\n \n 2003-04-16  J\"orn Rennecke <joern.rennecke@superh.com>\n \n@@ -690,7 +719,7 @@ Fri Apr 18 01:28:51 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \tPR/10271\n \t* pa-protos.h (function_arg): Remove last argument.\n \t* pa.c (function_arg): Likewise.  Use CUMULATIVE_ARGS struct instead.\n-\t* pa.h (struct hppa_args): Add member incoming. \n+\t* pa.h (struct hppa_args): Add member incoming.\n \t(INIT_CUMULATIVE_ARGS, INIT_CUMULATIVE_INCOMING_ARGS): Initialize\n \tmember incoming.\n \t(FUNCTION_ARG): Revise call to function_arg."}, {"sha": "1defdf04728c5fc375c339266f0726dd962bd1fe", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -206,7 +206,7 @@ extern int  arm_dllimport_name_p \tPARAMS ((const char *));\n \n #ifdef TREE_CODE\n extern void arm_pe_unique_section \tPARAMS ((tree, int));\n-extern void arm_pe_encode_section_info \tPARAMS ((tree, int));\n+extern void arm_pe_encode_section_info \tPARAMS ((tree, rtx, int));\n extern int  arm_dllexport_p \t\tPARAMS ((tree));\n extern int  arm_dllimport_p \t\tPARAMS ((tree));\n extern void arm_mark_dllexport \t\tPARAMS ((tree));"}, {"sha": "09a71c13b4e6f9657a5a566084877e58d8d744f7", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -142,7 +142,7 @@ static void      cirrus_reorg                   PARAMS ((rtx));\n static void\t arm_elf_asm_named_section\tPARAMS ((Ccstar, unsigned int));\n #endif\n #ifndef ARM_PE\n-static void\t arm_encode_section_info\tPARAMS ((tree, int));\n+static void\t arm_encode_section_info\tPARAMS ((tree, rtx, int));\n #endif\n #ifdef AOF_ASSEMBLER\n static void\t aof_globalize_label\t\tPARAMS ((FILE *, Ccstar));\n@@ -12152,20 +12152,17 @@ arm_elf_asm_named_section (name, flags)\n    simplification.  */\n \n static void\n-arm_encode_section_info (decl, first)\n+arm_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first;\n {\n   /* This doesn't work with AOF syntax, since the string table may be in\n      a different AREA.  */\n #ifndef AOF_ASSEMBLER\n   if (optimize > 0 && TREE_CONSTANT (decl)\n       && (!flag_writable_strings || TREE_CODE (decl) != STRING_CST))\n-    {\n-      rtx rtl = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n-                 ? TREE_CST_RTL (decl) : DECL_RTL (decl));\n-      SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n-    }\n+    SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n #endif\n \n   /* If we are referencing a function that is weak then encode a long call"}, {"sha": "1413eeeb51d5335fe37c1db6a5d1d34f240a7588", "filename": "gcc/config/arm/pe.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Farm%2Fpe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Farm%2Fpe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -207,18 +207,15 @@ arm_mark_dllimport (decl)\n }\n \n void\n-arm_pe_encode_section_info (decl, first)\n+arm_pe_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first ATTRIBUTE_UNUSED;\n {\n   /* This bit is copied from arm_encode_section_info.  */\n   if (optimize > 0 && TREE_CONSTANT (decl)\n       && (!flag_writable_strings || TREE_CODE (decl) != STRING_CST))\n-    {\n-      rtx rtl = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n-                 ? TREE_CST_RTL (decl) : DECL_RTL (decl));\n-      SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n-    }\n+    SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n \n   /* Mark the decl so we can tell from the rtl whether the object is\n      dllexport'd or dllimport'd.  */"}, {"sha": "518bea83c69b438f71d18d7dcddc8541928196c9", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -58,7 +58,7 @@ extern void machopic_define_ident PARAMS ((tree));\n extern void machopic_define_name PARAMS ((const char*));\n extern int machopic_name_defined_p PARAMS ((const char*));\n extern int machopic_ident_defined_p PARAMS ((tree));\n-extern void darwin_encode_section_info PARAMS ((tree, int));\n+extern void darwin_encode_section_info PARAMS ((tree, rtx, int));\n extern const char *darwin_strip_name_encoding PARAMS ((const char *));\n \n #endif /* TREE_CODE */"}, {"sha": "8f7599f0f91e783a904a3dbce31c3e5b8f0253a0", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -974,8 +974,9 @@ machopic_operand_p (op)\n    use later.  */\n \n void\n-darwin_encode_section_info (decl, first)\n+darwin_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first ATTRIBUTE_UNUSED;\n {\n   char code = '\\0';\n@@ -1002,7 +1003,7 @@ darwin_encode_section_info (decl, first)\n   if (code == '\\0')\n     return;\n \n-  sym_ref = XEXP (DECL_RTL (decl), 0);\n+  sym_ref = XEXP (rtl, 0);\n   orig_str = XSTR (sym_ref, 0);\n   len = strlen (orig_str) + 1;\n "}, {"sha": "314235109e7ec762c9f4ddf1d1a9ee4ea96e30cb", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -379,7 +379,7 @@ do { text_section ();\t\t\t\t\t\t\t\\\n     if ((TREE_STATIC (DECL)                                             \\\n \t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))               \\\n         || DECL_INITIAL (DECL))                                         \\\n-      (* targetm.encode_section_info) (DECL, false);\t\t\t\\\n+      (* targetm.encode_section_info) (DECL, DECL_RTL (DECL), false);\t\\\n     ASM_OUTPUT_LABEL (FILE, xname);                                     \\\n   } while (0)\n \n@@ -395,7 +395,7 @@ do { text_section ();\t\t\t\t\t\t\t\\\n     if ((TREE_STATIC (DECL)                                             \\\n \t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))               \\\n         || DECL_INITIAL (DECL))                                         \\\n-      (* targetm.encode_section_info) (DECL, false);\t\t\t\\\n+      (* targetm.encode_section_info) (DECL, DECL_RTL (DECL), false);\t\\\n     ASM_OUTPUT_LABEL (FILE, xname);                                     \\\n     /* Avoid generating stubs for functions we've just defined by\t\\\n        outputting any required stub name label now.  */\t\t\t\\\n@@ -459,7 +459,7 @@ do { text_section ();\t\t\t\t\t\t\t\\\n     if ((DECL) && ((TREE_STATIC (DECL)\t\t\t\t\t\\\n \t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\t\t\\\n         || DECL_INITIAL (DECL)))\t\t\t\t\t\\\n-      (* targetm.encode_section_info) (DECL, false);\t\t\t\\\n+      (* targetm.encode_section_info) (DECL, DECL_RTL (DECL), false);\t\\\n     if ((DECL) && ((TREE_STATIC (DECL)\t\t\t\t\t\\\n \t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\t\t\\\n         || DECL_INITIAL (DECL)))\t\t\t\t\t\\"}, {"sha": "53b4b51059bd9b72064eaabf6aa9cf865883209c", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -66,7 +66,7 @@ static void h8300_insert_attributes PARAMS ((tree, tree *));\n #ifndef OBJECT_FORMAT_ELF\n static void h8300_asm_named_section PARAMS ((const char *, unsigned int));\n #endif\n-static void h8300_encode_section_info PARAMS ((tree, int));\n+static void h8300_encode_section_info PARAMS ((tree, rtx, int));\n static int const_costs PARAMS ((rtx, enum rtx_code, enum rtx_code));\n static int h8300_and_costs PARAMS ((rtx));\n static int h8300_shift_costs PARAMS ((rtx));\n@@ -4171,13 +4171,14 @@ h8300_handle_tiny_data_attribute (node, name, args, flags, no_add_attrs)\n /* Mark function vectors, and various small data objects.  */\n \n static void\n-h8300_encode_section_info (decl, first)\n+h8300_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first;\n {\n   int extra_flags = 0;\n \n-  default_encode_section_info (decl, first);\n+  default_encode_section_info (decl, rtl, first);\n \n   if (TREE_CODE (decl) == FUNCTION_DECL\n       && h8300_funcvec_function_p (decl))\n@@ -4192,7 +4193,7 @@ h8300_encode_section_info (decl, first)\n     }\n \n   if (extra_flags)\n-    SYMBOL_REF_FLAGS (XEXP (DECL_RTL (decl), 0)) |= extra_flags;\n+    SYMBOL_REF_FLAGS (XEXP (rtl, 0)) |= extra_flags;\n }\n \n const char *"}, {"sha": "6dd0a94d3f1a1063a03277588e6be64929d3d342", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -236,7 +236,7 @@ extern void i386_pe_declare_function_type PARAMS ((FILE *, const char *, int));\n extern void i386_pe_record_external_function PARAMS ((const char *));\n extern void i386_pe_record_exported_symbol PARAMS ((const char *, int));\n extern void i386_pe_asm_file_end PARAMS ((FILE *));\n-extern void i386_pe_encode_section_info PARAMS ((tree, int));\n+extern void i386_pe_encode_section_info PARAMS ((tree, rtx, int));\n extern const char *i386_pe_strip_name_encoding PARAMS ((const char *));\n extern const char *i386_pe_strip_name_encoding_full PARAMS ((const char *));\n extern void i386_pe_output_labelref PARAMS ((FILE *, const char *));"}, {"sha": "ee3448da339d2e69ab3da163c1332f559ab4e913", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -420,14 +420,15 @@ gen_stdcall_suffix (decl)\n }\n \n void\n-i386_pe_encode_section_info (decl, first)\n+i386_pe_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first;\n {\n   if (!first)\n     return;\n \n-  default_encode_section_info (decl, first);\n+  default_encode_section_info (decl, rtl, first);\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     {"}, {"sha": "a4e2ea2ba653b3b8151cbfa2103f0d1c3dd8a38f", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -84,7 +84,7 @@ static int    m32r_sched_reorder   PARAMS ((FILE *, int, rtx *, int *, int));\n static int    m32r_variable_issue  PARAMS ((FILE *, int, rtx, int));\n static int    m32r_issue_rate\t   PARAMS ((void));\n \n-static void m32r_encode_section_info PARAMS ((tree, int));\n+static void m32r_encode_section_info PARAMS ((tree, rtx, int));\n static bool m32r_in_small_data_p PARAMS ((tree));\n static void init_idents PARAMS ((void));\n static bool m32r_rtx_costs PARAMS ((rtx, int, int, int *));\n@@ -349,15 +349,16 @@ m32r_handle_model_attribute (node, name, args, flags, no_add_attrs)\n */\n \n static void\n-m32r_encode_section_info (decl, first)\n+m32r_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first;\n {\n   int extra_flags = 0;\n   tree model_attr;\n   enum m32r_model model;\n \n-  default_encode_section_info (decl, first);\n+  default_encode_section_info (decl, rtl, first);\n \n   if (!DECL_P (decl))\n     return;\n@@ -394,7 +395,7 @@ m32r_encode_section_info (decl, first)\n   extra_flags |= model << SYMBOL_FLAG_MODEL_SHIFT;\n \n   if (extra_flags)\n-    SYMBOL_REF_FLAGS (XEXP (DECL_RTL (decl), 0)) |= extra_flags;\n+    SYMBOL_REF_FLAGS (XEXP (rtl, 0)) |= extra_flags;\n }\n \n /* Only mark the object as being small data area addressable if"}, {"sha": "1a129d1c43dd7329345759393cb9c6477be98b88", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -81,7 +81,7 @@ static void asm_print_register PARAMS ((FILE *, int));\n static void m68hc11_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void m68hc11_asm_out_constructor PARAMS ((rtx, int));\n static void m68hc11_asm_out_destructor PARAMS ((rtx, int));\n-static void m68hc11_encode_section_info PARAMS((tree, int));\n+static void m68hc11_encode_section_info PARAMS((tree, rtx, int));\n static int autoinc_mode PARAMS((rtx));\n static int m68hc11_make_autoinc_notes PARAMS((rtx *, void *));\n \n@@ -1287,20 +1287,18 @@ m68hc11_handle_fntype_attribute (node, name, args, flags, no_add_attrs)\n    in SYMBOL_REF_FLAG.  */\n \n static void\n-m68hc11_encode_section_info (decl, first)\n+m68hc11_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first ATTRIBUTE_UNUSED;\n {\n   tree func_attr;\n   int trap_handler;\n   int is_far = 0;\n-  rtx rtl;\n   \n   if (TREE_CODE (decl) != FUNCTION_DECL)\n     return;\n \n-  rtl = DECL_RTL (decl);\n-\n   func_attr = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n \n "}, {"sha": "33818a9095e6e34c1252b1bd5c9e8059b11d9ac8", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -75,7 +75,7 @@ static void m88k_svr3_asm_out_destructor PARAMS ((rtx, int));\n #endif\n static void m88k_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n static int m88k_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n-static void m88k_encode_section_info PARAMS ((tree, int));\n+static void m88k_encode_section_info PARAMS ((tree, rtx, int));\n #ifdef AS_BUG_DOT_LABELS\n static void m88k_internal_label PARAMS ((FILE *, const char *, unsigned long));\n #endif\n@@ -3335,8 +3335,9 @@ m88k_adjust_cost (insn, link, dep, cost)\n /* For the m88k, determine if the item should go in the global pool.  */\n \n static void\n-m88k_encode_section_info (decl, first)\n+m88k_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first ATTRIBUTE_UNUSED;\n {\n   if (m88k_gp_threshold > 0)\n@@ -3348,13 +3349,13 @@ m88k_encode_section_info (decl, first)\n \t      int size = int_size_in_bytes (TREE_TYPE (decl));\n \n \t      if (size > 0 && size <= m88k_gp_threshold)\n-\t\tSYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+\t\tSYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n \t    }\n \t}\n       else if (TREE_CODE (decl) == STRING_CST\n \t       && flag_writable_strings\n \t       && TREE_STRING_LENGTH (decl) <= m88k_gp_threshold)\n-\tSYMBOL_REF_FLAG (XEXP (TREE_CST_RTL (decl), 0)) = 1;\n+\tSYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n     }\n }\n "}, {"sha": "a7c2d379c632b3a0833afbc614a1953102997591", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -139,7 +139,7 @@ static void\t  mcore_asm_named_section      PARAMS ((const char *,\n \t\t\t\t\t\t\tunsigned int));\n #endif\n static void       mcore_unique_section\t       PARAMS ((tree, int));\n-static void mcore_encode_section_info\t\tPARAMS ((tree, int));\n+static void mcore_encode_section_info\t\tPARAMS ((tree, rtx, int));\n static const char *mcore_strip_name_encoding\tPARAMS ((const char *));\n static int        mcore_const_costs            \tPARAMS ((rtx, RTX_CODE));\n static int        mcore_and_cost               \tPARAMS ((rtx));\n@@ -3464,8 +3464,9 @@ mcore_dllimport_p (decl)\n    install some info in the .drective (PE) or .exports (ELF) sections.   */\n \n static void\n-mcore_encode_section_info (decl, first)\n+mcore_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl ATTRIBUTE_UNUSED;\n      int first ATTRIBUTE_UNUSED;\n {\n   /* Mark the decl so we can tell from the rtl whether the object is"}, {"sha": "0c4238ecf94ba54d961b0f65e6e69af6348fd697", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -154,7 +154,7 @@ static void mips_unique_section\t\t\tPARAMS ((tree, int))\n static void mips_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n static int mips_use_dfa_pipeline_interface      PARAMS ((void));\n-static void mips_encode_section_info\t\tPARAMS ((tree, int));\n+static void mips_encode_section_info\t\tPARAMS ((tree, rtx, int));\n static bool mips_rtx_costs\t\t\tPARAMS ((rtx, int, int, int *));\n static int mips_address_cost\t\t\tPARAMS ((rtx));\n \n@@ -8521,8 +8521,9 @@ mips_select_section (decl, reloc, align)\n    is why the DECL_INITIAL macros differ from mips_select_section.  */\n \n static void\n-mips_encode_section_info (decl, first)\n+mips_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first;\n {\n   if (TARGET_MIPS16)\n@@ -8545,7 +8546,7 @@ mips_encode_section_info (decl, first)\n \t{\n \t  rtx symref;\n \n-\t  symref = XEXP (TREE_CST_RTL (decl), 0);\n+\t  symref = XEXP (rtl, 0);\n \t  mips16_strings = alloc_EXPR_LIST (0, symref, mips16_strings);\n \t  SYMBOL_REF_FLAG (symref) = 1;\n \t  mips_string_length += TREE_STRING_LENGTH (decl);\n@@ -8558,20 +8559,20 @@ mips_encode_section_info (decl, first)\n       && (!DECL_INITIAL (decl)\n \t  || TREE_CONSTANT (DECL_INITIAL (decl))))\n     {\n-      SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 0;\n+      SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 0;\n     }\n \n   else if (TARGET_EMBEDDED_PIC)\n     {\n       if (TREE_CODE (decl) == VAR_DECL)\n-\tSYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+\tSYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n       else if (TREE_CODE (decl) == FUNCTION_DECL)\n-\tSYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 0;\n+\tSYMBOL_REF_FLAG (XEXP (rtl, 0)) = 0;\n       else if (TREE_CODE (decl) == STRING_CST\n \t       && ! flag_writable_strings)\n-\tSYMBOL_REF_FLAG (XEXP (TREE_CST_RTL (decl), 0)) = 0;\n+\tSYMBOL_REF_FLAG (XEXP (rtl, 0)) = 0;\n       else\n-\tSYMBOL_REF_FLAG (XEXP (TREE_CST_RTL (decl), 0)) = 1;\n+\tSYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n     }\n \n   else if (TREE_CODE (decl) == VAR_DECL\n@@ -8581,7 +8582,7 @@ mips_encode_section_info (decl, first)\n \t       || 0 == strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n \t\t\t       \".sbss\")))\n     {\n-      SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+      SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n     }\n \n   /* We can not perform GP optimizations on variables which are in\n@@ -8597,7 +8598,7 @@ mips_encode_section_info (decl, first)\n       int size = int_size_in_bytes (TREE_TYPE (decl));\n \n       if (size > 0 && size <= mips_section_threshold)\n-\tSYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+\tSYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n     }\n \n }"}, {"sha": "7ce6bc0ca170e6056616633d5ea1c2502aef84a5", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -124,7 +124,7 @@ static HOST_WIDEST_INT mmix_intval PARAMS ((rtx));\n static void mmix_output_octa PARAMS ((FILE *, HOST_WIDEST_INT, int));\n static bool mmix_assemble_integer PARAMS ((rtx, unsigned int, int));\n static struct machine_function * mmix_init_machine_status PARAMS ((void));\n-static void mmix_encode_section_info PARAMS ((tree, int));\n+static void mmix_encode_section_info PARAMS ((tree, rtx, int));\n static const char *mmix_strip_name_encoding PARAMS ((const char *));\n static void mmix_emit_sp_add PARAMS ((HOST_WIDE_INT offset));\n static void mmix_target_asm_function_prologue\n@@ -1235,8 +1235,9 @@ mmix_data_section_asm_op ()\n }\n \n static void\n-mmix_encode_section_info (decl, first)\n+mmix_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first;\n {\n   /* Test for an external declaration, and do nothing if it is one.  */\n@@ -1256,7 +1257,7 @@ mmix_encode_section_info (decl, first)\n \t means that when -mtoplevel-symbols is in use, we can just handle\n \t well-behaved ISO-compliant code.  */\n \n-      const char *str = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+      const char *str = XSTR (XEXP (rtl, 0), 0);\n       int len = strlen (str);\n       char *newstr;\n \n@@ -1265,7 +1266,7 @@ mmix_encode_section_info (decl, first)\n \n       strcpy (newstr + 1, str);\n       *newstr = '@';\n-      XSTR (XEXP (DECL_RTL (decl), 0), 0) = newstr;\n+      XSTR (XEXP (rtl, 0), 0) = newstr;\n     }\n \n   /* Set SYMBOL_REF_FLAG for things that we want to access with GETA.  We\n@@ -1278,11 +1279,7 @@ mmix_encode_section_info (decl, first)\n \t  && !TREE_SIDE_EFFECTS (decl)\n \t  && (!DECL_INITIAL (decl)\n \t      || TREE_CONSTANT (DECL_INITIAL (decl)))))\n-    {\n-      rtx rtl = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n-                 ? TREE_CST_RTL (decl) : DECL_RTL (decl));\n-      SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n-    }\n+    SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n }\n \n static const char *"}, {"sha": "601024a44a9fc0f3dcc16fa768d0c1bcbde551e5", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -119,7 +119,7 @@ static int pa_adjust_priority PARAMS ((rtx, int));\n static int pa_issue_rate PARAMS ((void));\n static void pa_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT))\n      ATTRIBUTE_UNUSED;\n-static void pa_encode_section_info PARAMS ((tree, int));\n+static void pa_encode_section_info PARAMS ((tree, rtx, int));\n static const char *pa_strip_name_encoding PARAMS ((const char *));\n static bool pa_function_ok_for_sibcall PARAMS ((tree, tree));\n static void pa_globalize_label PARAMS ((FILE *, const char *))\n@@ -7114,21 +7114,16 @@ hppa_encode_label (sym)\n }\n \n static void\n-pa_encode_section_info (decl, first)\n+pa_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first;\n {\n   if (first && TEXT_SPACE_P (decl))\n     {\n-      rtx rtl;\n-      if (TREE_CODE (decl) == FUNCTION_DECL\n-\t  || TREE_CODE (decl) == VAR_DECL)\n-\trtl = DECL_RTL (decl);\n-      else\n-\trtl = TREE_CST_RTL (decl);\n       SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n       if (TREE_CODE (decl) == FUNCTION_DECL)\n-\thppa_encode_label (XEXP (DECL_RTL (decl), 0));\n+\thppa_encode_label (XEXP (rtl, 0));\n     }\n }\n "}, {"sha": "ab4430279b33ce1aba352a20600230a65f8c39e4", "filename": "gcc/config/romp/romp.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fromp%2Fromp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fromp%2Fromp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -58,7 +58,7 @@ static void romp_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void romp_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void romp_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n-static void romp_encode_section_info PARAMS ((tree, int));\n+static void romp_encode_section_info PARAMS ((tree, rtx, int));\n static bool romp_rtx_costs PARAMS ((rtx, int, int, int *));\n static int romp_address_cost PARAMS ((rtx));\n \f\n@@ -2098,12 +2098,13 @@ romp_select_rtx_section (mode, x, align)\n    that we need to mark such SYMBOL_REFs.  We do so here.  */\n \n static void\n-romp_encode_section_info (decl, first)\n+romp_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first ATTRIBUTE_UNUSED;\n {\n   if (TREE_CODE (TREE_TYPE (decl)) == FUNCTION_TYPE)\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+    SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n }\n \n static bool"}, {"sha": "bd2f9e6227ea86f1a72cfec3c6120ed2c7d09754", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -229,7 +229,7 @@ static void rs6000_elf_select_section PARAMS ((tree, int,\n static void rs6000_elf_unique_section PARAMS ((tree, int));\n static void rs6000_elf_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t   unsigned HOST_WIDE_INT));\n-static void rs6000_elf_encode_section_info PARAMS ((tree, int))\n+static void rs6000_elf_encode_section_info PARAMS ((tree, rtx, int))\n      ATTRIBUTE_UNUSED;\n static const char *rs6000_elf_strip_name_encoding PARAMS ((const char *));\n static bool rs6000_elf_in_small_data_p PARAMS ((tree));\n@@ -244,7 +244,7 @@ static void rs6000_xcoff_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t     unsigned HOST_WIDE_INT));\n static const char * rs6000_xcoff_strip_name_encoding PARAMS ((const char *));\n static unsigned int rs6000_xcoff_section_type_flags PARAMS ((tree, const char *, int));\n-static void rs6000_xcoff_encode_section_info PARAMS ((tree, int))\n+static void rs6000_xcoff_encode_section_info PARAMS ((tree, rtx, int))\n      ATTRIBUTE_UNUSED;\n #endif\n #if TARGET_MACHO\n@@ -12935,16 +12935,17 @@ rs6000_elf_unique_section (decl, reloc)\n    to read the prefixes.  */\n \n static void\n-rs6000_elf_encode_section_info (decl, first)\n+rs6000_elf_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first;\n {\n   if (!first)\n     return;\n \n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n-      rtx sym_ref = XEXP (DECL_RTL (decl), 0);\n+      rtx sym_ref = XEXP (rtl, 0);\n       if ((*targetm.binds_local_p) (decl))\n \tSYMBOL_REF_FLAG (sym_ref) = 1;\n \n@@ -12964,7 +12965,7 @@ rs6000_elf_encode_section_info (decl, first)\n \t   && DEFAULT_ABI == ABI_V4\n \t   && TREE_CODE (decl) == VAR_DECL)\n     {\n-      rtx sym_ref = XEXP (DECL_RTL (decl), 0);\n+      rtx sym_ref = XEXP (rtl, 0);\n       int size = int_size_in_bytes (TREE_TYPE (decl));\n       tree section_name = DECL_SECTION_NAME (decl);\n       const char *name = (char *)0;\n@@ -13628,13 +13629,14 @@ rs6000_xcoff_section_type_flags (decl, name, reloc)\n }\n \n static void\n-rs6000_xcoff_encode_section_info (decl, first)\n+rs6000_xcoff_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first ATTRIBUTE_UNUSED;\n {\n   if (TREE_CODE (decl) == FUNCTION_DECL\n       && (*targetm.binds_local_p) (decl))\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+    SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n }\n #endif /* TARGET_XCOFF */\n "}, {"sha": "38c630db48c0f0651e2924e730c897234d740226", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -57,7 +57,7 @@ Boston, MA 02111-1307, USA.  */\n static bool s390_assemble_integer PARAMS ((rtx, unsigned int, int));\n static void s390_select_rtx_section PARAMS ((enum machine_mode, rtx, \n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n-static void s390_encode_section_info PARAMS ((tree, int));\n+static void s390_encode_section_info PARAMS ((tree, rtx, int));\n static bool s390_cannot_force_const_mem PARAMS ((rtx));\n static rtx s390_delegitimize_address PARAMS ((rtx));\n static void s390_init_builtins PARAMS ((void));\n@@ -6406,17 +6406,18 @@ s390_select_rtx_section (mode, x, align)\n    into its SYMBOL_REF_FLAGS.  */\n \n static void\n-s390_encode_section_info (decl, first)\n+s390_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first;\n {\n-  default_encode_section_info (decl, first);\n+  default_encode_section_info (decl, rtl, first);\n \n   /* If a variable has a forced alignment to < 2 bytes, mark it with\n      SYMBOL_FLAG_ALIGN1 to prevent it from being used as LARL operand.  */\n   if (TREE_CODE (decl) == VAR_DECL \n       && DECL_USER_ALIGN (decl) && DECL_ALIGN (decl) < 16)\n-    SYMBOL_REF_FLAGS (XEXP (DECL_RTL (decl), 0)) |= SYMBOL_FLAG_ALIGN1;\n+    SYMBOL_REF_FLAGS (XEXP (rtl, 0)) |= SYMBOL_FLAG_ALIGN1;\n }\n \n /* Output thunk to FILE that implements a C++ virtual function call (with"}, {"sha": "618af25238999f00c8e94f50435a57760a9bdbbc", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -61,8 +61,8 @@ static tree v850_handle_interrupt_attribute PARAMS ((tree *, tree, tree, int, bo\n static tree v850_handle_data_area_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static void v850_insert_attributes   PARAMS ((tree, tree *));\n static void v850_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n-static void v850_encode_data_area    PARAMS ((tree));\n-static void v850_encode_section_info PARAMS ((tree, int));\n+static void v850_encode_data_area    PARAMS ((tree, rtx));\n+static void v850_encode_section_info PARAMS ((tree, rtx, int));\n \n /* Information about the various small memory areas.  */\n struct small_memory_info small_memory[ (int)SMALL_MEMORY_max ] =\n@@ -2324,11 +2324,11 @@ v850_interrupt_function_p (func)\n \n \f\n static void\n-v850_encode_data_area (decl)\n+v850_encode_data_area (decl, symbol)\n      tree decl;\n+     rtx symbol;\n {\n   int flags;\n-  rtx symbol;\n \n   /* Map explict sections into the appropriate attribute */\n   if (v850_get_data_area (decl) == DATA_AREA_NORMAL)\n@@ -2368,7 +2368,6 @@ v850_encode_data_area (decl)\n \treturn;\n     }\n \n-  symbol = XEXP (DECL_RTL (decl), 0);\n   flags = SYMBOL_REF_FLAGS (symbol);\n   switch (v850_get_data_area (decl))\n     {\n@@ -2381,15 +2380,16 @@ v850_encode_data_area (decl)\n }\n \n static void\n-v850_encode_section_info (decl, first)\n+v850_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first;\n {\n-  default_encode_section_info (decl, first);\n+  default_encode_section_info (decl, rtl, first);\n \n   if (TREE_CODE (decl) == VAR_DECL\n       && (TREE_STATIC (decl) || DECL_EXTERNAL (decl)))\n-    v850_encode_data_area (decl);\n+    v850_encode_data_area (decl, XEXP (rtl, 0));\n }\n \n /* Return true if the given RTX is a register which can be restored"}, {"sha": "092e400dcec14bf537364d89f46b8116ef3fa880", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -6047,30 +6047,43 @@ constants in @code{flag_pic} mode in @code{data_section} and everything\n else in @code{readonly_data_section}.\n @end deftypefn\n \n-@deftypefn {Target Hook} void TARGET_ENCODE_SECTION_INFO (tree @var{decl}, int @var{new_decl_p})\n+@deftypefn {Target Hook} void TARGET_ENCODE_SECTION_INFO (tree @var{decl}, rtx @var{rtl}, int @var{new_decl_p})\n Define this hook if references to a symbol or a constant must be\n treated differently depending on something about the variable or\n function named by the symbol (such as what section it is in).\n \n-The hook is executed under two circumstances.  One is immediately after\n-the rtl for @var{decl} that represents a variable or a function has been\n-created and stored in @code{DECL_RTL(@var{decl})}.  The value of the rtl\n-will be a @code{mem} whose address is a @code{symbol_ref}.  The other is\n-immediately after the rtl for @var{decl} that represents a constant has\n-been created and stored in @code{TREE_CST_RTL (@var{decl})}.  The macro\n-is called once for each distinct constant in a source file.\n+The hook is executed immediately after rtl has been created for\n+@var{decl}, which may be a variable or function declaration or\n+an entry in the constant pool.  In either case, @var{rtl} is the\n+rtl in question.  Do @emph{not} use @code{DECL_RTL (@var{decl})}\n+or @code{TREE_CST_RTL (@var{decl})} in this hook; that field may\n+not have been initialized yet.\n+\n+In the case of a constant, it is safe to assume that the rtl is\n+a @code{mem} whose address is a @code{symbol_ref}.  Most decls\n+will also have this form, but that is not guaranteed.  Global\n+register variables, for instance, will have a @code{reg} for their\n+rtl.  (Normally the right thing to do with such unusual rtl is\n+leave it alone.)\n \n The @var{new_decl_p} argument will be true if this is the first time\n-that @code{ENCODE_SECTION_INFO} has been invoked on this decl.  It will\n+that @code{TARGET_ENCODE_SECTION_INFO} has been invoked on this decl.  It will\n be false for subsequent invocations, which will happen for duplicate\n declarations.  Whether or not anything must be done for the duplicate\n declaration depends on whether the hook examines @code{DECL_ATTRIBUTES}.\n+@var{new_decl_p} is always true when the hook is called for a constant.\n \n @cindex @code{SYMBOL_REF_FLAG}, in @code{TARGET_ENCODE_SECTION_INFO}\n-The usual thing for this hook to do is to record a flag in the\n-@code{symbol_ref} (such as @code{SYMBOL_REF_FLAG}) or to store a\n-modified name string in the @code{symbol_ref} (if one bit is not\n-enough information).\n+The usual thing for this hook to do is to record flags in the\n+@code{symbol_ref}, using @code{SYMBOL_REF_FLAG} or @code{SYMBOL_REF_FLAGS}.\n+Historically, the name string was modified if it was necessary to\n+encode more than one bit of information, but this practice is now\n+discouraged; use @code{SYMBOL_REF_FLAGS}.\n+\n+The default definition of this hook, @code{default_encode_section_info}\n+in @file{varasm.c}, sets a number of commonly-useful bits in\n+@code{SYMBOL_REF_FLAGS}.  Check whether the default does what you need\n+before overriding it.\n @end deftypefn\n \n @deftypefn {Target Hook} const char *TARGET_STRIP_NAME_ENCODING (const char *name)"}, {"sha": "7fd9ec9cfe6d26c88825b30eddf2ca73e048ab13", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -519,7 +519,7 @@ extern void default_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\tunsigned HOST_WIDE_INT));\n extern void default_elf_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t    unsigned HOST_WIDE_INT));\n-extern void default_encode_section_info PARAMS ((tree, int));\n+extern void default_encode_section_info PARAMS ((tree, rtx, int));\n extern const char *default_strip_name_encoding PARAMS ((const char *));\n extern bool default_binds_local_p PARAMS ((tree));\n extern bool default_binds_local_p_1 PARAMS ((tree, int));"}, {"sha": "8207b3216efd67e34620f8609601744551547c65", "filename": "gcc/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -312,7 +312,7 @@ struct gcc_target\n \n   /* Do something target-specific to record properties of the DECL into\n      the associated SYMBOL_REF.  */\n-  void (* encode_section_info) PARAMS ((tree, int));\n+  void (* encode_section_info) PARAMS ((tree, rtx, int));\n \n   /* Undo the effects of encode_section_info on the symbol string.  */\n   const char * (* strip_name_encoding) PARAMS ((const char *));"}, {"sha": "72141f16403255cda89dc7a5fb3efca50a5342c7", "filename": "gcc/varasm.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6a2438aaf2ceeb137d21d67b00edf27a92104c0/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c6a2438aaf2ceeb137d21d67b00edf27a92104c0", "patch": "@@ -809,7 +809,7 @@ make_decl_rtl (decl, asmspec)\n       /* Let the target reassign the RTL if it wants.\n \t This is necessary, for example, when one machine specific\n \t decl attribute overrides another.  */\n-      (* targetm.encode_section_info) (decl, false);\n+      (* targetm.encode_section_info) (decl, DECL_RTL (decl), false);\n       return;\n     }\n \n@@ -932,7 +932,7 @@ make_decl_rtl (decl, asmspec)\n      such as that it is a function name.\n      If the name is changed, the macro ASM_OUTPUT_LABELREF\n      will have to know how to strip this information.  */\n-  (* targetm.encode_section_info) (decl, true);\n+  (* targetm.encode_section_info) (decl, DECL_RTL (decl), true);\n }\n \n /* Make the rtl for variable VAR be volatile.\n@@ -2674,10 +2674,7 @@ output_constant_def (exp, defer)\n      encoded in it.  */\n   if (! found)\n     {\n-      /* Take care not to invoke targetm.encode_section_info for\n-\t constants which don't have a TREE_CST_RTL.  */\n-      if (TREE_CODE (exp) != INTEGER_CST)\n-\t(*targetm.encode_section_info) (exp, true);\n+      (*targetm.encode_section_info) (exp, rtl, true);\n \n       desc->rtl = rtl;\n       desc->label = XSTR (XEXP (desc->rtl, 0), 0);\n@@ -5346,15 +5343,14 @@ default_elf_select_rtx_section (mode, x, align)\n /* Set the generally applicable flags on the SYMBOL_REF for EXP.  */\n \n void\n-default_encode_section_info (decl, first)\n+default_encode_section_info (decl, rtl, first)\n      tree decl;\n+     rtx rtl;\n      int first ATTRIBUTE_UNUSED;\n {\n-  rtx rtl, symbol;\n+  rtx symbol;\n   int flags;\n \n-  rtl = DECL_P (decl) ? DECL_RTL (decl) : TREE_CST_RTL (decl);\n-\n   /* Careful not to prod global register variables.  */\n   if (GET_CODE (rtl) != MEM)\n     return;"}]}