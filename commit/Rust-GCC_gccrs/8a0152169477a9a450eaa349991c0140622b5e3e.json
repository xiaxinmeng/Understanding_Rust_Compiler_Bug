{"sha": "8a0152169477a9a450eaa349991c0140622b5e3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEwMTUyMTY5NDc3YTlhNDUwZWFhMzQ5OTkxYzAxNDA2MjJiNWUzZQ==", "commit": {"author": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-11-06T14:43:13Z"}, "committer": {"name": "Stan Cox", "email": "coxs@gnu.org", "date": "1996-11-06T14:43:13Z"}, "message": "(sgt,sgtu,sge,sle,bgt,blt,bge,ble): Use CC_FCOM\n\nFrom-SVN: r13103", "tree": {"sha": "b3a514301e9989981906a3c64f0d2998dfd4192e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3a514301e9989981906a3c64f0d2998dfd4192e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a0152169477a9a450eaa349991c0140622b5e3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0152169477a9a450eaa349991c0140622b5e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a0152169477a9a450eaa349991c0140622b5e3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0152169477a9a450eaa349991c0140622b5e3e/comments", "author": null, "committer": null, "parents": [{"sha": "fc2380b93fff8f0f32b7e8b5d019bb6ed5310b74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc2380b93fff8f0f32b7e8b5d019bb6ed5310b74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc2380b93fff8f0f32b7e8b5d019bb6ed5310b74"}], "stats": {"total": 115, "additions": 75, "deletions": 40}, "files": [{"sha": "757e2cd7966d873cb14dd51fb8f0d5232d611997", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 75, "deletions": 40, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0152169477a9a450eaa349991c0140622b5e3e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0152169477a9a450eaa349991c0140622b5e3e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8a0152169477a9a450eaa349991c0140622b5e3e", "patch": "@@ -5065,7 +5065,8 @@\n   \"\"\n   \"*\n {\n-  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387) && !TARGET_CMOVE)\n+  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387)\n+      && ! (cc_prev_status.flags & CC_FCOMI))\n     return AS1 (sete,%0);\n \n   OUTPUT_JUMP (\\\"setg %0\\\", \\\"seta %0\\\", NULL_PTR);\n@@ -5097,7 +5098,8 @@\n   \"\"\n   \"*\n {\n-  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387) && !TARGET_CMOVE)\n+  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387)\n+      && ! (cc_prev_status.flags & CC_FCOMI))\n     return AS1 (sete,%0);\n \n   OUTPUT_JUMP (\\\"setl %0\\\", \\\"setb %0\\\", \\\"sets %0\\\");\n@@ -5129,7 +5131,8 @@\n   \"\"\n   \"*\n {\n-  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387) && !TARGET_CMOVE)\n+  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387)\n+      && ! (cc_prev_status.flags & CC_FCOMI))\n     return AS1 (sete,%0);\n \n   OUTPUT_JUMP (\\\"setge %0\\\", \\\"setae %0\\\", \\\"setns %0\\\");\n@@ -5161,7 +5164,8 @@\n   \"\"\n   \"*\n {\n-  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387) && !TARGET_CMOVE)\n+  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387)\n+      && ! (cc_prev_status.flags & CC_FCOMI))\n     return AS1 (setb,%0);\n \n   OUTPUT_JUMP (\\\"setle %0\\\", \\\"setbe %0\\\", NULL_PTR);\n@@ -5285,7 +5289,8 @@\n   \"\"\n   \"*\n {\n-  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387) && !TARGET_CMOVE)\n+  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387)\n+      && ! (cc_prev_status.flags & CC_FCOMI))\n     return AS1 (je,%l0);\n \n   if (cc_prev_status.flags & CC_TEST_AX)\n@@ -5336,7 +5341,8 @@\n   \"\"\n   \"*\n {\n-  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387) && !TARGET_CMOVE)\n+  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387)\n+      && ! (cc_prev_status.flags & CC_FCOMI))\n     return AS1 (je,%l0);\n \n   if (cc_prev_status.flags & CC_TEST_AX)\n@@ -5387,7 +5393,8 @@\n   \"\"\n   \"*\n {\n-  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387) && !TARGET_CMOVE)\n+  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387)\n+      && ! (cc_prev_status.flags & CC_FCOMI))\n     return AS1 (je,%l0);\n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n@@ -5437,7 +5444,8 @@\n   \"\"\n   \"*\n {\n-  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387) && !TARGET_CMOVE)\n+  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387)\n+      && ! (cc_prev_status.flags & CC_FCOMI))\n     return AS1 (jb,%l0);\n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n@@ -5524,7 +5532,8 @@\n   \"\"\n   \"*\n {\n-  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387) && !TARGET_CMOVE)\n+  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387)\n+      && ! (cc_prev_status.flags & CC_FCOMI))\n     return AS1 (jne,%l0);\n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n@@ -5554,7 +5563,8 @@\n   \"\"\n   \"*\n {\n-  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387) && !TARGET_CMOVE)\n+  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387)\n+      && ! (cc_prev_status.flags & CC_FCOMI))\n     return AS1 (jne,%l0);\n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n@@ -5585,7 +5595,8 @@\n   \"\"\n   \"*\n {\n-  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387) && !TARGET_CMOVE)\n+  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387)\n+      && ! (cc_prev_status.flags & CC_FCOMI))\n     return AS1 (jne,%l0);\n   if (cc_prev_status.flags & CC_TEST_AX)\n     {\n@@ -5615,7 +5626,8 @@\n   \"\"\n   \"*\n {\n-  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387) && !TARGET_CMOVE)\n+  if (TARGET_IEEE_FP && (cc_prev_status.flags & CC_IN_80387)\n+      && ! (cc_prev_status.flags & CC_FCOMI))\n     return AS1 (jae,%l0);\n \n   if (cc_prev_status.flags & CC_TEST_AX)\n@@ -6952,9 +6964,6 @@\n   \"TARGET_CMOVE\"\n   \"*\n {\n-  if (cc_prev_status.flags & CC_IN_80387)\n-    abort ();\n-\n   if (which_alternative == 0)\n     {\n       /* r <- cond ? arg : r */\n@@ -6978,21 +6987,21 @@\n     if (! rtx_equal_p (operands[0], operands[2]))\n        if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[2]) == MEM)\n          {\n-           output_asm_insn (AS2 (mov%L2,%2,%4), operands);\n-           output_asm_insn (AS2 (mov%L2,%4,%0), operands);\n+           output_asm_insn (AS2 (mov%z2,%2,%4), operands);\n+           output_asm_insn (AS2 (mov%z2,%4,%0), operands);\n          }\n        else\n-      output_asm_insn (AS2 (mov%L0,%2,%0), operands);\n+      output_asm_insn (AS2 (mov%z0,%2,%0), operands);\n     if (! rtx_equal_p (operands[0], operands[3]))\n       {\n         output_asm_insn (\\\"j%C1 %l5\\\", operands);\n         if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[3]) == MEM)\n           {\n-            output_asm_insn (AS2 (mov%L2,%3,%4), operands);\n-            output_asm_insn (AS2 (mov%L2,%4,%0), operands);\n+            output_asm_insn (AS2 (mov%z2,%3,%4), operands);\n+            output_asm_insn (AS2 (mov%z2,%4,%0), operands);\n           }\n         else\n-      output_asm_insn (AS2 (mov%L0,%3,%0), operands);\n+      output_asm_insn (AS2 (mov%z0,%3,%0), operands);\n         ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[5]));\n       }\n     }  \n@@ -7009,9 +7018,6 @@\n   \"TARGET_CMOVE\"\n   \"*\n {\n-  if (cc_prev_status.flags & CC_IN_80387)\n-    abort ();\n-\n   if (which_alternative == 0)\n     {\n       /* r <- cond ? arg : r */\n@@ -7035,21 +7041,21 @@\n     if (! rtx_equal_p (operands[0], operands[2]))\n        if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[2]) == MEM)\n          {\n-           output_asm_insn (AS2 (mov%L2,%2,%4), operands);\n-           output_asm_insn (AS2 (mov%L2,%4,%0), operands);\n+           output_asm_insn (AS2 (mov%z2,%2,%4), operands);\n+           output_asm_insn (AS2 (mov%z2,%4,%0), operands);\n          }\n        else\n-      output_asm_insn (AS2 (mov%L0,%2,%0), operands);\n+      output_asm_insn (AS2 (mov%z0,%2,%0), operands);\n     if (! rtx_equal_p (operands[0], operands[3]))\n       {\n         output_asm_insn (\\\"j%C1 %l5\\\", operands);\n         if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[3]) == MEM)\n           {\n-            output_asm_insn (AS2 (mov%L2,%3,%4), operands);\n-            output_asm_insn (AS2 (mov%L2,%4,%0), operands);\n+            output_asm_insn (AS2 (mov%z2,%3,%4), operands);\n+            output_asm_insn (AS2 (mov%z2,%4,%0), operands);\n           }\n         else\n-      output_asm_insn (AS2 (mov%L0,%3,%0), operands);\n+      output_asm_insn (AS2 (mov%z0,%3,%0), operands);\n         ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[5]));\n       }\n     }  \n@@ -7125,36 +7131,33 @@\n       operands[4] = gen_label_rtx ();\n \n       if (STACK_REG_P (operands[2]) || GET_CODE (operands[2]) == MEM)\n-\toutput_asm_insn (AS1 (fld,%y2), operands);\n+\toutput_asm_insn (AS1 (fld%z2,%y2), operands);\n       else\n         {\n           xops[0] = operands[0];\n           xops[1] = operands[2];\n-\t  /* SET_SRC (PATTERN (insn)) = XEXP (SET_SRC (PATTERN (insn)), 1);*/\n-\t  output_asm_insn (output_move_const_single (xops), xops);\n+\t  output_move_const_single (xops);\n         }\n       output_asm_insn (\\\"j%C1 %l4\\\", operands);\n       if (STACK_REG_P (operands[3]) || GET_CODE (operands[0]) == MEM)\n-\t  output_asm_insn (AS1 (fld,%y3), operands);\n+\t  output_asm_insn (AS1 (fld%z3,%y3), operands);\n       else\n \t{\n \t  xops[1] = operands[3];\n \t  SET_SRC (PATTERN (insn)) = XEXP (SET_SRC (PATTERN (insn)), 2);\n-\t  output_asm_insn (output_move_const_single (xops), xops);\n-\t  /* output_move_memory (xops, insn, GET_MODE_SIZE (DFmode), 2, 4);*/\n-\t  /* output_asm_insn (AS1 (fld%z0,%y3), operands);*/\n+\t  output_move_const_single (xops);\n \t}\n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[4]));\n }\n   RET;\n }\")\n \n (define_insn \"movdfcc_1\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=t,t\")\n+  [(set (match_operand:DF 0 \"general_operand\" \"=t,=t,f,fFm\")\n \t(if_then_else:DF (match_operator 1 \"comparison_operator\" \n \t\t\t\t[(cc0) (const_int 0)])\n-\t\t      (match_operand:DF 2 \"register_operand\" \"0,f\")\n-\t\t      (match_operand:DF 3 \"register_operand\" \"f,0\")))]\n+\t\t      (match_operand:DF 2 \"general_operand\" \"0,f,f,fFm\")\n+\t\t      (match_operand:DF 3 \"general_operand\" \"f,0,f,fFm\")))]\n   \"TARGET_CMOVE\"\n   \"*\n {\n@@ -7168,6 +7171,38 @@\n       /* r <- cond ? r : arg */\n       output_asm_insn (AS2 (fcmov%F1,%2,%0), operands);\n     }\n+  else if (which_alternative == 2)\n+    {\n+      /* r <- cond ? r : arg */\n+      output_asm_insn (AS2 (fcmov%F1,%2,%0), operands);\n+      output_asm_insn (AS2 (fcmov%f1,%3,%0), operands);\n+    }\n+  else if (which_alternative == 3)\n+    {\n+      rtx xops[2];\n+\n+      /* r <- cond ? arg1 : arg2 */\n+      operands[4] = gen_label_rtx ();\n+\n+      if (STACK_REG_P (operands[2]) || GET_CODE (operands[2]) == MEM)\n+\toutput_asm_insn (AS1 (fld%z2,%y2), operands);\n+      else\n+        {\n+          xops[0] = operands[0];\n+          xops[1] = operands[2];\n+\t  output_move_const_single (xops);\n+        }\n+      output_asm_insn (\\\"j%C1 %l4\\\", operands);\n+      if (STACK_REG_P (operands[3]) || GET_CODE (operands[0]) == MEM)\n+\t  output_asm_insn (AS1 (fld%z3,%y3), operands);\n+      else\n+\t{\n+\t  xops[1] = operands[3];\n+\t  SET_SRC (PATTERN (insn)) = XEXP (SET_SRC (PATTERN (insn)), 2);\n+\t  output_move_const_single (xops);\n+\t}\n+      ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\", CODE_LABEL_NUMBER (operands[4]));\n+}\n   RET;\n }\")\n "}]}