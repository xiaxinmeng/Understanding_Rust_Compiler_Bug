{"sha": "cb22cd9da3d2d78d50dcd745e7894997fe91e4da", "node_id": "C_kwDOANBUbNoAKGNiMjJjZDlkYTNkMmQ3OGQ1MGRjZDc0NWU3ODk0OTk3ZmU5MWU0ZGE", "commit": {"author": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-05-04T07:30:06Z"}, "committer": {"name": "liushuyu", "email": "liushuyu011@gmail.com", "date": "2022-05-04T07:30:38Z"}, "message": "intrinsic: add rotate_left and rotate_right intrinsic", "tree": {"sha": "f242b41823995b6b782719516ac12103b38b6278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f242b41823995b6b782719516ac12103b38b6278"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb22cd9da3d2d78d50dcd745e7894997fe91e4da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb22cd9da3d2d78d50dcd745e7894997fe91e4da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb22cd9da3d2d78d50dcd745e7894997fe91e4da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb22cd9da3d2d78d50dcd745e7894997fe91e4da/comments", "author": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liushuyu", "id": 6829345, "node_id": "MDQ6VXNlcjY4MjkzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/6829345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liushuyu", "html_url": "https://github.com/liushuyu", "followers_url": "https://api.github.com/users/liushuyu/followers", "following_url": "https://api.github.com/users/liushuyu/following{/other_user}", "gists_url": "https://api.github.com/users/liushuyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/liushuyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liushuyu/subscriptions", "organizations_url": "https://api.github.com/users/liushuyu/orgs", "repos_url": "https://api.github.com/users/liushuyu/repos", "events_url": "https://api.github.com/users/liushuyu/events{/privacy}", "received_events_url": "https://api.github.com/users/liushuyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca722fe423bdd8c7895a40aac0410b2646917805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca722fe423bdd8c7895a40aac0410b2646917805", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca722fe423bdd8c7895a40aac0410b2646917805"}], "stats": {"total": 125, "additions": 124, "deletions": 1}, "files": [{"sha": "8e30cddf9a07a8294c1f2a0f3b2f70a78f9bf244", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 124, "deletions": 1, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb22cd9da3d2d78d50dcd745e7894997fe91e4da/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb22cd9da3d2d78d50dcd745e7894997fe91e4da/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=cb22cd9da3d2d78d50dcd745e7894997fe91e4da", "patch": "@@ -15,10 +15,13 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-compile-intrinsic.h\"\n+#include \"fold-const.h\"\n #include \"langhooks.h\"\n+#include \"rust-compile-context.h\"\n #include \"rust-compile-type.h\"\n #include \"rust-compile-fnparam.h\"\n #include \"rust-tree.h\"\n+#include \"tree-core.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -176,12 +179,26 @@ static tree\n sizeof_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype);\n static tree\n transmute_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype);\n+static tree\n+rotate_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype, tree_code op);\n+static inline tree\n+rotate_left_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype)\n+{\n+  return rotate_intrinsic_handler (ctx, fntype, LROTATE_EXPR);\n+}\n+static inline tree\n+rotate_right_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype)\n+{\n+  return rotate_intrinsic_handler (ctx, fntype, RROTATE_EXPR);\n+}\n \n static const std::map<std::string,\n \t\t      std::function<tree (Context *, TyTy::BaseType *)>>\n   generic_intrinsics = {{\"offset\", &offset_intrinsic_handler},\n \t\t\t{\"size_of\", &sizeof_intrinsic_handler},\n-\t\t\t{\"transmute\", &transmute_intrinsic_handler}};\n+\t\t\t{\"transmute\", &transmute_intrinsic_handler},\n+\t\t\t{\"rotate_left\", &rotate_left_intrinsic_handler},\n+\t\t\t{\"rotate_right\", &rotate_right_intrinsic_handler}};\n \n Intrinsics::Intrinsics (Context *ctx) : ctx (ctx) {}\n \n@@ -507,5 +524,111 @@ transmute_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty)\n   return fndecl;\n }\n \n+static tree\n+rotate_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty,\n+\t\t\t  tree_code op)\n+{\n+  rust_assert (fntype_tyty->get_kind () == TyTy::TypeKind::FNDEF);\n+  TyTy::FnType *fntype = static_cast<TyTy::FnType *> (fntype_tyty);\n+  const Resolver::CanonicalPath &canonical_path = fntype->get_ident ().path;\n+\n+  // items can be forward compiled which means we may not need to invoke this\n+  // code. We might also have already compiled this generic function as well.\n+  tree lookup = NULL_TREE;\n+  if (ctx->lookup_function_decl (fntype->get_ty_ref (), &lookup,\n+\t\t\t\t fntype->get_id (), fntype))\n+    {\n+      // has this been added to the list then it must be finished\n+      if (ctx->function_completed (lookup))\n+\t{\n+\t  tree dummy = NULL_TREE;\n+\t  if (!ctx->lookup_function_decl (fntype->get_ty_ref (), &dummy))\n+\t    {\n+\t      ctx->insert_function_decl (fntype, lookup);\n+\t    }\n+\t  return lookup;\n+\t}\n+    }\n+\n+  if (fntype->has_subsititions_defined ())\n+    {\n+      // override the Hir Lookups for the substitutions in this context\n+      fntype->override_context ();\n+    }\n+\n+  // rotate intrinsic has two parameter\n+  if (fntype->get_params ().size () != 2)\n+    {\n+      rust_error_at (fntype->get_ident ().locus,\n+\t\t     \"invalid number of parameters for rotate intrinsic\");\n+      return error_mark_node;\n+    }\n+\n+  // build the intrinsic function\n+  tree compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n+  std::string ir_symbol_name\n+    = canonical_path.get () + fntype->subst_as_string ();\n+  std::string asm_name = ctx->mangle_item (fntype, canonical_path);\n+\n+  unsigned int flags = 0;\n+  tree fndecl\n+    = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name, asm_name,\n+\t\t\t\t     flags, fntype->get_ident ().locus);\n+  TREE_PUBLIC (fndecl) = 0;\n+  TREE_READONLY (fndecl) = 1;\n+  DECL_ARTIFICIAL (fndecl) = 1;\n+  DECL_EXTERNAL (fndecl) = 0;\n+  DECL_DECLARED_INLINE_P (fndecl) = 1;\n+\n+  // setup the params\n+  std::vector<Bvariable *> param_vars;\n+  for (auto &parm : fntype->get_params ())\n+    {\n+      auto &referenced_param = parm.first;\n+      auto &param_tyty = parm.second;\n+      auto compiled_param_type = TyTyResolveCompile::compile (ctx, param_tyty);\n+\n+      Location param_locus = referenced_param->get_locus ();\n+      Bvariable *compiled_param_var\n+\t= CompileFnParam::compile (ctx, fndecl, referenced_param,\n+\t\t\t\t   compiled_param_type, param_locus);\n+\n+      param_vars.push_back (compiled_param_var);\n+    }\n+\n+  auto &x_param = param_vars.at (0);\n+  auto &y_param = param_vars.at (1);\n+  rust_assert (param_vars.size () == 2);\n+  if (!ctx->get_backend ()->function_set_parameters (fndecl, param_vars))\n+    return error_mark_node;\n+\n+  tree enclosing_scope = NULL_TREE;\n+  Location start_location = Location ();\n+  Location end_location = Location ();\n+\n+  tree code_block = ctx->get_backend ()->block (fndecl, enclosing_scope, {},\n+\t\t\t\t\t\tstart_location, end_location);\n+  ctx->push_block (code_block);\n+\n+  // BUILTIN rotate FN BODY BEGIN\n+  tree x = ctx->get_backend ()->var_expression (x_param, Location ());\n+  tree y = ctx->get_backend ()->var_expression (y_param, Location ());\n+  tree rotate_expr\n+    = fold_build2_loc (BUILTINS_LOCATION, op, TREE_TYPE (x), x, y);\n+  auto return_statement\n+    = ctx->get_backend ()->return_statement (fndecl, {rotate_expr},\n+\t\t\t\t\t     Location ());\n+  ctx->add_statement (return_statement);\n+  // BUILTIN rotate FN BODY END\n+\n+  tree bind_tree = ctx->pop_block ();\n+\n+  gcc_assert (TREE_CODE (bind_tree) == BIND_EXPR);\n+  DECL_SAVED_TREE (fndecl) = bind_tree;\n+  ctx->push_function (fndecl);\n+\n+  return fndecl;\n+}\n+\n } // namespace Compile\n } // namespace Rust"}]}