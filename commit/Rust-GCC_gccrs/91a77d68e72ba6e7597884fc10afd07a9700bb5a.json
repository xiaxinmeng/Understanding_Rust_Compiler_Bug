{"sha": "91a77d68e72ba6e7597884fc10afd07a9700bb5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFhNzdkNjhlNzJiYTZlNzU5Nzg4NGZjMTBhZmQwN2E5NzAwYmI1YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2007-10-26T19:54:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2007-10-26T19:54:10Z"}, "message": "re PR c++/24791 (ICE on invalid instantiation of template's static member)\n\n        PR c++/24791\n        * pt.c (get_template_info): New fn.\n        (template_class_depth): Use it.\n        (push_template_decl_real): Check that the template args of the\n        definition match the args of the previous declaration.\n\nFrom-SVN: r129660", "tree": {"sha": "b60524076cf0b62e70c6417f3dd6b09eb6c76300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b60524076cf0b62e70c6417f3dd6b09eb6c76300"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91a77d68e72ba6e7597884fc10afd07a9700bb5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a77d68e72ba6e7597884fc10afd07a9700bb5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a77d68e72ba6e7597884fc10afd07a9700bb5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a77d68e72ba6e7597884fc10afd07a9700bb5a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4552f5a2c81d09f3d1af9aad2203e95162c2e3a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4552f5a2c81d09f3d1af9aad2203e95162c2e3a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4552f5a2c81d09f3d1af9aad2203e95162c2e3a8"}], "stats": {"total": 99, "additions": 65, "deletions": 34}, "files": [{"sha": "0ef16bf5de278370ec72520f1540e1b6ffafd987", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a77d68e72ba6e7597884fc10afd07a9700bb5a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a77d68e72ba6e7597884fc10afd07a9700bb5a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=91a77d68e72ba6e7597884fc10afd07a9700bb5a", "patch": "@@ -1,3 +1,11 @@\n+2007-10-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/24791\n+\t* pt.c (get_template_info): New fn.\n+\t(template_class_depth): Use it.\n+\t(push_template_decl_real): Check that the template args of the \n+\tdefinition match the args of the previous declaration.\n+\n 2007-10-26  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/31988"}, {"sha": "f57f2f9abd471f7b65032fc08cc70d65ac21f777", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a77d68e72ba6e7597884fc10afd07a9700bb5a/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a77d68e72ba6e7597884fc10afd07a9700bb5a/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=91a77d68e72ba6e7597884fc10afd07a9700bb5a", "patch": "@@ -4437,6 +4437,7 @@ extern bool uses_parameter_packs                (tree);\n extern bool template_parameter_pack_p           (const_tree);\n extern tree make_pack_expansion                 (tree);\n extern bool check_for_bare_parameter_packs      (tree);\n+extern tree get_template_info\t\t\t(tree);\n extern int template_class_depth\t\t\t(tree);\n extern int is_specialization_of\t\t\t(tree, tree);\n extern bool is_specialization_of_friend\t\t(tree, tree);"}, {"sha": "9193f487f9021cbdec03e1777560c045b4be7715", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 44, "deletions": 33, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a77d68e72ba6e7597884fc10afd07a9700bb5a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a77d68e72ba6e7597884fc10afd07a9700bb5a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=91a77d68e72ba6e7597884fc10afd07a9700bb5a", "patch": "@@ -263,6 +263,25 @@ finish_member_template_decl (tree decl)\n   return error_mark_node;\n }\n \n+/* Return the template info node corresponding to T, whatever T is.  */\n+\n+tree\n+get_template_info (tree t)\n+{\n+  tree tinfo = NULL_TREE;\n+\n+  if (DECL_P (t) && DECL_LANG_SPECIFIC (t))\n+    tinfo = DECL_TEMPLATE_INFO (t);\n+\n+  if (!tinfo && TREE_CODE (t) == TYPE_DECL)\n+    t = TREE_TYPE (t);\n+\n+  if (TAGGED_TYPE_P (t))\n+    tinfo = TYPE_TEMPLATE_INFO (t);\n+\n+  return tinfo;\n+}\n+\n /* Returns the template nesting level of the indicated class TYPE.\n \n    For example, in:\n@@ -291,20 +310,11 @@ template_class_depth (tree type)\n        type = (TREE_CODE (type) == FUNCTION_DECL)\n \t ? CP_DECL_CONTEXT (type) : TYPE_CONTEXT (type))\n     {\n-      if (TREE_CODE (type) != FUNCTION_DECL)\n-\t{\n-\t  if (CLASSTYPE_TEMPLATE_INFO (type)\n-\t      && PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (type))\n-\t      && uses_template_parms (CLASSTYPE_TI_ARGS (type)))\n-\t    ++depth;\n-\t}\n-      else\n-\t{\n-\t  if (DECL_TEMPLATE_INFO (type)\n-\t      && PRIMARY_TEMPLATE_P (DECL_TI_TEMPLATE (type))\n-\t      && uses_template_parms (DECL_TI_ARGS (type)))\n-\t    ++depth;\n-\t}\n+      tree tinfo = get_template_info (type);\n+\n+      if (tinfo && PRIMARY_TEMPLATE_P (TI_TEMPLATE (tinfo))\n+\t  && uses_template_parms (INNERMOST_TEMPLATE_ARGS (TI_ARGS (tinfo))))\n+\t++depth;\n     }\n \n   return depth;\n@@ -3866,27 +3876,15 @@ push_template_decl_real (tree decl, bool is_friend)\n     {\n       tree a, t, current, parms;\n       int i;\n+      tree tinfo = get_template_info (decl);\n \n-      if (TREE_CODE (decl) == TYPE_DECL)\n-\t{\n-\t  if ((IS_AGGR_TYPE_CODE (TREE_CODE (TREE_TYPE (decl)))\n-\t       || TREE_CODE (TREE_TYPE (decl)) == ENUMERAL_TYPE)\n-\t      && TYPE_TEMPLATE_INFO (TREE_TYPE (decl))\n-\t      && TYPE_TI_TEMPLATE (TREE_TYPE (decl)))\n-\t    tmpl = TYPE_TI_TEMPLATE (TREE_TYPE (decl));\n-\t  else\n-\t    {\n-\t      error (\"%qD does not declare a template type\", decl);\n-\t      return decl;\n-\t    }\n-\t}\n-      else if (!DECL_LANG_SPECIFIC (decl) || !DECL_TEMPLATE_INFO (decl))\n+      if (!tinfo)\n \t{\n \t  error (\"template definition of non-template %q#D\", decl);\n \t  return decl;\n \t}\n-      else\n-\ttmpl = DECL_TI_TEMPLATE (decl);\n+\n+      tmpl = TI_TEMPLATE (tinfo);\n \n       if (DECL_FUNCTION_TEMPLATE_P (tmpl)\n \t  && DECL_TEMPLATE_INFO (decl) && DECL_TI_ARGS (decl)\n@@ -3946,16 +3944,29 @@ push_template_decl_real (tree decl, bool is_friend)\n \t\treturn error_mark_node;\n \t      }\n \n-\t    /* Perhaps we should also check that the parms are used in the\n-\t       appropriate qualifying scopes in the declarator?  */\n-\n \t    if (current == decl)\n \t      current = ctx;\n \t    else\n \t      current = (TYPE_P (current)\n \t\t\t ? TYPE_CONTEXT (current)\n \t\t\t : DECL_CONTEXT (current));\n \t  }\n+\n+      /* Check that the parms are used in the appropriate qualifying scopes\n+\t in the declarator.  */\n+      if (!comp_template_args\n+\t  (TI_ARGS (tinfo),\n+\t   TI_ARGS (get_template_info (DECL_TEMPLATE_RESULT (tmpl)))))\n+\t{\n+\t  error (\"\\\n+template arguments to %qD do not match original template %qD\",\n+\t\t decl, DECL_TEMPLATE_RESULT (tmpl));\n+\t  if (!uses_template_parms (TI_ARGS (tinfo)))\n+\t    inform (\"use template<> for an explicit specialization\");\n+\t  /* Avoid crash in import_export_decl.  */\n+\t  DECL_INTERFACE_KNOWN (decl) = 1;\n+\t  return error_mark_node;\n+\t}\n     }\n \n   DECL_TEMPLATE_RESULT (tmpl) = decl;"}, {"sha": "e1ac82210bfc7f735f5e74259ab3906ca933eb34", "filename": "gcc/testsuite/g++.dg/template/error33.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a77d68e72ba6e7597884fc10afd07a9700bb5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a77d68e72ba6e7597884fc10afd07a9700bb5a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror33.C?ref=91a77d68e72ba6e7597884fc10afd07a9700bb5a", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/24791\n+\n+template<int> struct A\n+{\n+    static int i;\n+    A() { ++i; }\n+};\n+\n+template<int> int A<0>::i(0);\t// { dg-error \"template\" }\n+\n+A<0> a;"}, {"sha": "5f372d3a311053ad15c0337ea063554f5c0de5a9", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a77d68e72ba6e7597884fc10afd07a9700bb5a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a77d68e72ba6e7597884fc10afd07a9700bb5a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash11.C?ref=91a77d68e72ba6e7597884fc10afd07a9700bb5a", "patch": "@@ -8,6 +8,6 @@ class A\n };\n \n \n-template <class j> class A::A_impl // { dg-error \"does not declare a template\" }\n+template <class j> class A::A_impl // { dg-error \"non-template\" }\n {\n };"}]}