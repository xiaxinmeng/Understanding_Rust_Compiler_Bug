{"sha": "65dd610dcbcf5e1a952f341d0a441593bebe200f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVkZDYxMGRjYmNmNWUxYTk1MmYzNDFkMGE0NDE1OTNiZWJlMjAwZg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2019-11-07T10:49:06Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-11-07T10:49:06Z"}, "message": "[arm][5/X] Implement Q-bit-setting SIMD32 intrinsics\n\nThis patch implements some more Q-setting intrinsics of the\nmultiply-accumulate\nvariety, but these are in the SIMD32 family in that they treat their\noperands as packed SIMD values, but that's not important at the RTL level.\n\n\n\t* config/arm/arm.md (arm_<simd32_op><add_clobber_q_name>_insn):\n\tNew define_insns.\n\t(arm_<simd32_op>): New define_expands.\n\t* config/arm/arm_acle.h (__smlad, __smladx, __smlsd, __smlsdx,\n\t__smuad, __smuadx): Define.\n\t* config/arm/arm_acle_builtins.def: Define builtins for the above.\n\t* config/arm/iterators.md (SIMD32_TERNOP_Q): New int_iterator.\n\t(SIMD32_BINOP_Q): Likewise.\n\t(simd32_op): Handle the above.\n\t* config/arm/unspecs.md: Define unspecs for the above.\n\n\t* gcc.target/arm/acle/simd32.c: Update test.\n\nFrom-SVN: r277918", "tree": {"sha": "f9325cafb9706e72c4560efda43a4fcabb90a689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9325cafb9706e72c4560efda43a4fcabb90a689"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65dd610dcbcf5e1a952f341d0a441593bebe200f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65dd610dcbcf5e1a952f341d0a441593bebe200f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65dd610dcbcf5e1a952f341d0a441593bebe200f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65dd610dcbcf5e1a952f341d0a441593bebe200f/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "16155ccf588a403c033ccd7743329671bcfb27d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16155ccf588a403c033ccd7743329671bcfb27d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16155ccf588a403c033ccd7743329671bcfb27d5"}], "stats": {"total": 186, "additions": 185, "deletions": 1}, "files": [{"sha": "d875026161280269d3a174c238172fb89f2334ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65dd610dcbcf5e1a952f341d0a441593bebe200f", "patch": "@@ -1,3 +1,16 @@\n+2019-11-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.md (arm_<simd32_op><add_clobber_q_name>_insn):\n+\tNew define_insns.\n+\t(arm_<simd32_op>): New define_expands.\n+\t* config/arm/arm_acle.h (__smlad, __smladx, __smlsd, __smlsdx,\n+\t__smuad, __smuadx): Define.\n+\t* config/arm/arm_acle_builtins.def: Define builtins for the above.\n+\t* config/arm/iterators.md (SIMD32_TERNOP_Q): New int_iterator.\n+\t(SIMD32_BINOP_Q): Likewise.\n+\t(simd32_op): Handle the above.\n+\t* config/arm/unspecs.md: Define unspecs for the above.\n+\n 2019-11-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/aout.h (REGISTER_NAMES): Add apsrge."}, {"sha": "e0e528dd677480fe33bb4f9cbd58fff4696f654d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=65dd610dcbcf5e1a952f341d0a441593bebe200f", "patch": "@@ -5865,6 +5865,62 @@\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"alu_sreg\")])\n \n+(define_insn \"arm_<simd32_op><add_clobber_q_name>_insn\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:SI\n+\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 3 \"s_register_operand\" \"r\")] SIMD32_TERNOP_Q))]\n+  \"TARGET_INT_SIMD && <add_clobber_q_pred>\"\n+  \"<simd32_op>%?\\\\t%0, %1, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"alu_sreg\")])\n+\n+(define_expand \"arm_<simd32_op>\"\n+  [(set (match_operand:SI 0 \"s_register_operand\")\n+\t(unspec:SI\n+\t  [(match_operand:SI 1 \"s_register_operand\")\n+\t   (match_operand:SI 2 \"s_register_operand\")\n+\t   (match_operand:SI 3 \"s_register_operand\")] SIMD32_TERNOP_Q))]\n+  \"TARGET_INT_SIMD\"\n+  {\n+    if (ARM_Q_BIT_READ)\n+      emit_insn (gen_arm_<simd32_op>_setq_insn (operands[0], operands[1],\n+\t\t\t\t\t\toperands[2], operands[3]));\n+    else\n+      emit_insn (gen_arm_<simd32_op>_insn (operands[0], operands[1],\n+\t\t\t\t\t   operands[2], operands[3]));\n+    DONE;\n+  }\n+)\n+\n+(define_insn \"arm_<simd32_op><add_clobber_q_name>_insn\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:SI\n+\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 2 \"s_register_operand\" \"r\")] SIMD32_BINOP_Q))]\n+  \"TARGET_INT_SIMD && <add_clobber_q_pred>\"\n+  \"<simd32_op>%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"alu_sreg\")])\n+\n+(define_expand \"arm_<simd32_op>\"\n+  [(set (match_operand:SI 0 \"s_register_operand\")\n+\t(unspec:SI\n+\t  [(match_operand:SI 1 \"s_register_operand\")\n+\t   (match_operand:SI 2 \"s_register_operand\")] SIMD32_BINOP_Q))]\n+  \"TARGET_INT_SIMD\"\n+  {\n+    if (ARM_Q_BIT_READ)\n+      emit_insn (gen_arm_<simd32_op>_setq_insn (operands[0], operands[1],\n+\t\t\t\t\t\toperands[2]));\n+    else\n+      emit_insn (gen_arm_<simd32_op>_insn (operands[0], operands[1],\n+\t\t\t\t\t   operands[2]));\n+    DONE;\n+  }\n+)\n+\n (define_insn \"arm_sel\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(unspec:SI"}, {"sha": "c30645e3949f84321fb1dfe3afd06167ef859d62", "filename": "gcc/config/arm/arm_acle.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2Fconfig%2Farm%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2Fconfig%2Farm%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle.h?ref=65dd610dcbcf5e1a952f341d0a441593bebe200f", "patch": "@@ -522,6 +522,48 @@ __usub16 (uint16x2_t __a, uint16x2_t __b)\n   return __builtin_arm_usub16 (__a, __b);\n }\n \n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__smlad (int16x2_t __a, int16x2_t __b, int32_t __c)\n+{\n+  return __builtin_arm_smlad (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__smladx (int16x2_t __a, int16x2_t __b, int32_t __c)\n+{\n+  return __builtin_arm_smladx (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__smlsd (int16x2_t __a, int16x2_t __b, int32_t __c)\n+{\n+  return __builtin_arm_smlsd (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__smlsdx (int16x2_t __a, int16x2_t __b, int32_t __c)\n+{\n+  return __builtin_arm_smlsdx (__a, __b, __c);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__smuad (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_smuad (__a, __b);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__smuadx (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_smuadx (__a, __b);\n+}\n+\n #endif\n \n #ifdef __ARM_FEATURE_SAT"}, {"sha": "018d89682c61a963961515823420f1b986cd40db", "filename": "gcc/config/arm/arm_acle_builtins.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def?ref=65dd610dcbcf5e1a952f341d0a441593bebe200f", "patch": "@@ -107,3 +107,10 @@ VAR1 (UBINOP, usax, si)\n VAR1 (UBINOP, usub16, si)\n \n VAR1 (UBINOP, sel, si)\n+\n+VAR1 (TERNOP, smlad, si)\n+VAR1 (TERNOP, smladx, si)\n+VAR1 (TERNOP, smlsd, si)\n+VAR1 (TERNOP, smlsdx, si)\n+VAR1 (BINOP, smuad, si)\n+VAR1 (BINOP, smuadx, si)"}, {"sha": "72aba5e86fc20216bcba74f5cfa5b9f744497a6e", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=65dd610dcbcf5e1a952f341d0a441593bebe200f", "patch": "@@ -453,6 +453,11 @@\n \t\t\t\tUNSPEC_SSAX UNSPEC_SSUB16 UNSPEC_UADD16\n \t\t\t\tUNSPEC_UASX UNSPEC_USAX UNSPEC_USUB16])\n \n+(define_int_iterator SIMD32_TERNOP_Q [UNSPEC_SMLAD UNSPEC_SMLADX UNSPEC_SMLSD\n+\t\t\t\t      UNSPEC_SMLSDX])\n+\n+(define_int_iterator SIMD32_BINOP_Q [UNSPEC_SMUAD UNSPEC_SMUADX])\n+\n (define_int_iterator VQRDMLH_AS [UNSPEC_VQRDMLAH UNSPEC_VQRDMLSH])\n \n (define_int_iterator VFM_LANE_AS [UNSPEC_VFMA_LANE UNSPEC_VFMS_LANE])\n@@ -1075,7 +1080,10 @@\n \t\t\t    (UNSPEC_SASX \"sasx\") (UNSPEC_SSAX \"ssax\")\n \t\t\t    (UNSPEC_SSUB16 \"ssub16\") (UNSPEC_UADD16 \"uadd16\")\n \t\t\t    (UNSPEC_UASX \"uasx\") (UNSPEC_USAX \"usax\")\n-\t\t\t    (UNSPEC_USUB16 \"usub16\")])\n+\t\t\t    (UNSPEC_USUB16 \"usub16\") (UNSPEC_SMLAD \"smlad\")\n+\t\t\t    (UNSPEC_SMLADX \"smladx\") (UNSPEC_SMLSD \"smlsd\")\n+\t\t\t    (UNSPEC_SMLSDX \"smlsdx\") (UNSPEC_SMUAD \"smuad\")\n+\t\t\t    (UNSPEC_SMUADX \"smuadx\")])\n \n ;; Both kinds of return insn.\n (define_code_iterator RETURNS [return simple_return])"}, {"sha": "8bf6d9712054808143d308726c5c0f1d613c6ed4", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=65dd610dcbcf5e1a952f341d0a441593bebe200f", "patch": "@@ -146,6 +146,12 @@\n   UNSPEC_UASX\t\t; Represent the UASX operation.\n   UNSPEC_USAX\t\t; Represent the USAX operation.\n   UNSPEC_USUB16\t\t; Represent the USUB16 operation.\n+  UNSPEC_SMLAD\t\t; Represent the SMLAD operation.\n+  UNSPEC_SMLADX\t\t; Represent the SMLADX operation.\n+  UNSPEC_SMLSD\t\t; Represent the SMLSD operation.\n+  UNSPEC_SMLSDX\t\t; Represent the SMLSDX operation.\n+  UNSPEC_SMUAD\t\t; Represent the SMUAD operation.\n+  UNSPEC_SMUADX\t\t; Represent the SMUADX operation.\n ])\n \n "}, {"sha": "1a65f6b928b616846999cf616853b5967647d5b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65dd610dcbcf5e1a952f341d0a441593bebe200f", "patch": "@@ -1,3 +1,7 @@\n+2019-11-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/arm/acle/simd32.c: Update test.\n+\n 2019-11-07  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/arm/acle/simd32.c: Update test."}, {"sha": "0db560c690e98cbf1c9e642a7a626a1a2ff8ece4", "filename": "gcc/testsuite/gcc.target/arm/acle/simd32.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsimd32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65dd610dcbcf5e1a952f341d0a441593bebe200f/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsimd32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsimd32.c?ref=65dd610dcbcf5e1a952f341d0a441593bebe200f", "patch": "@@ -372,3 +372,51 @@ test_usub16 (uint16x2_t a, uint16x2_t b)\n }\n \n /* { dg-final { scan-assembler-times \"\\tusub16\\t...?, ...?, ...?\" 1 } } */\n+\n+int32_t\n+test_smlad (int16x2_t a, int16x2_t b, int32_t c)\n+{\n+  return __smlad (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tsmlad\\t...?, ...?, ...?, ...?\" 1 } } */\n+\n+int32_t\n+test_smladx (int16x2_t a, int16x2_t b, int32_t c)\n+{\n+  return __smladx (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tsmladx\\t...?, ...?, ...?, ...?\" 1 } } */\n+\n+int32_t\n+test_smlsd (int16x2_t a, int16x2_t b, int32_t c)\n+{\n+  return __smlsd (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tsmlsd\\t...?, ...?, ...?, ...?\" 1 } } */\n+\n+int32_t\n+test_smlsdx (int16x2_t a, int16x2_t b, int32_t c)\n+{\n+  return __smlsdx (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tsmlsdx\\t...?, ...?, ...?, ...?\" 1 } } */\n+\n+int32_t\n+test_smuad (int16x2_t a, int16x2_t b)\n+{\n+  return __smuad (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tsmuad\\t...?, ...?, ...?\" 1 } } */\n+\n+int32_t\n+test_smuadx (int16x2_t a, int16x2_t b)\n+{\n+  return __smuadx (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tsmuadx\\t...?, ...?, ...?\" 1 } } */"}]}