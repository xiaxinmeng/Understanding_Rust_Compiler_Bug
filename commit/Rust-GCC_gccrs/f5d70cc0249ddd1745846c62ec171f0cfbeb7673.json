{"sha": "f5d70cc0249ddd1745846c62ec171f0cfbeb7673", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVkNzBjYzAyNDlkZGQxNzQ1ODQ2YzYyZWMxNzFmMGNmYmViNzY3Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-03-04T01:13:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-03-04T01:13:38Z"}, "message": "decl.c (finish_enum): Do set the type in a template.\n\n        * decl.c (finish_enum): Do set the type in a template. Simplify.\n        * pt.c (tsubst_enum, tsubst_copy): Revert last patch.\n\nFrom-SVN: r63754", "tree": {"sha": "535d62d57879a72b06b9a114de02fc656c1fcc62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/535d62d57879a72b06b9a114de02fc656c1fcc62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5d70cc0249ddd1745846c62ec171f0cfbeb7673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d70cc0249ddd1745846c62ec171f0cfbeb7673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5d70cc0249ddd1745846c62ec171f0cfbeb7673", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5d70cc0249ddd1745846c62ec171f0cfbeb7673/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f06e42d6a03cd9503be7311ad64e05fa5e7dde44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f06e42d6a03cd9503be7311ad64e05fa5e7dde44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f06e42d6a03cd9503be7311ad64e05fa5e7dde44"}], "stats": {"total": 98, "additions": 41, "deletions": 57}, "files": [{"sha": "7b0a807d50b984a550800c00c5e8b39f3fd91430", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d70cc0249ddd1745846c62ec171f0cfbeb7673/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d70cc0249ddd1745846c62ec171f0cfbeb7673/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f5d70cc0249ddd1745846c62ec171f0cfbeb7673", "patch": "@@ -1,3 +1,8 @@\n+2003-03-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (finish_enum): Do set the type in a template. Simplify.\n+\t* pt.c (tsubst_enum, tsubst_copy): Revert last patch.\n+\n 2003-03-03  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/9878"}, {"sha": "0bed8e993254f601207c301caeb7ffd3cace9f91", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 35, "deletions": 47, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d70cc0249ddd1745846c62ec171f0cfbeb7673/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d70cc0249ddd1745846c62ec171f0cfbeb7673/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f5d70cc0249ddd1745846c62ec171f0cfbeb7673", "patch": "@@ -13072,60 +13072,61 @@ finish_enum (tree enumtype)\n   /* We built up the VALUES in reverse order.  */\n   TYPE_VALUES (enumtype) = nreverse (TYPE_VALUES (enumtype));\n \n-  /* For an enum defined in a template, all further processing is\n-     postponed until the template is instantiated.  */\n+  /* For an enum defined in a template, just set the type of the values;\n+     all further processing is postponed until the template is\n+     instantiated.  We need to set the type so that tsubst of a CONST_DECL\n+     works.  */\n   if (processing_template_decl)\n     {\n+      for (pair = TYPE_VALUES (enumtype); pair; pair = TREE_CHAIN (pair))\n+\tTREE_TYPE (TREE_VALUE (pair)) = enumtype;\n       if (at_function_scope_p ())\n \tadd_stmt (build_min (TAG_DEFN, enumtype));\n       return;\n     }\n \n   if (TYPE_VALUES (enumtype))\n     {\n-      /* Initialize min and max values and figure out actual values in\n-\t following 'for' loop.  */\n       minnode = maxnode = NULL_TREE;\n \n-      /* [dcl.enum]\n-\t \n-      Following the closing brace of an enum-specifier, each\n-      enumerator has the type of its enumeration.  Prior to the\n-      closing brace, the type of each enumerator is the type of\n-      its initializing value.  */\n       for (pair = TYPE_VALUES (enumtype); pair; pair = TREE_CHAIN (pair))\n \t{\n-\n-\t  tree value;\n-\n-\t  /* If we are going to reset type then copy node first.\n-\t     It cannot be shared now.  */\n-\t  if (TREE_TYPE (TREE_VALUE (pair)) != enumtype)\n+\t  tree decl = TREE_VALUE (pair);\n+\t  tree value = DECL_INITIAL (decl);\n+\n+\t  /* [dcl.enum]: Following the closing brace of an enum-specifier,\n+\t     each enumerator has the type of its enumeration.  Prior to the\n+\t     closing brace, the type of each enumerator is the type of its\n+\t     initializing value.  */\n+\t  TREE_TYPE (decl) = enumtype;\n+\n+\t  /* Figure out what the minimum and maximum values of the\n+\t     enumerators are.  */\n+\t  if (!minnode)\n+\t    minnode = maxnode = value;\n+\t  else if (tree_int_cst_lt (maxnode, value))\n+\t    maxnode = value;\n+\t  else if (tree_int_cst_lt (value, minnode))\n+\t    minnode = value;\n+\n+\t  /* Set the TREE_TYPE for the values as well.  That's so that when\n+\t     we call decl_constant_value we get an entity of the right type\n+\t     (but with the constant value).  But first make a copy so we\n+\t     don't clobber shared INTEGER_CSTs.  */\n+\t  if (TREE_TYPE (value) != enumtype)\n \t    {\n-\t      if (DECL_INITIAL (TREE_VALUE (pair)))\n-\t\tDECL_INITIAL (TREE_VALUE (pair)) = \n-\t\t  copy_node (DECL_INITIAL (TREE_VALUE (pair)));\n-\t      TREE_TYPE (TREE_VALUE (pair)) = enumtype;\n+\t      value = DECL_INITIAL (decl) = copy_node (value);\n+\t      TREE_TYPE (value) = enumtype;\n \t    }\n \n-\t  if (!processing_template_decl)\n-\t    {\n-\t      /* Adjust min and max value.  */\n-\t      value = DECL_INITIAL (TREE_VALUE (pair));\n-\n-\t      if (!minnode)\n-\t\tminnode = maxnode = value;\n-\t      else if (tree_int_cst_lt (maxnode, value))\n-\t\tmaxnode = value;\n-\t      else if (tree_int_cst_lt (value, minnode))\n-\t\tminnode = value;\n-\t    }\n+\t  /* In addition, transform the TYPE_VALUES list to contain the\n+\t     values, rather than the CONST_DECLs for them.  */\n+\t  TREE_VALUE (pair) = value;\n \t}\n     }\n   else\n     minnode = maxnode = integer_zero_node;\n \n-\n   /* Compute the number of bits require to represent all values of the\n      enumeration.  We must do this before the type of MINNODE and\n      MAXNODE are transformed, since min_precision relies on the\n@@ -13135,18 +13136,6 @@ finish_enum (tree enumtype)\n   highprec = min_precision (maxnode, unsignedp);\n   precision = MAX (lowprec, highprec);\n \n-  /* Set the TREE_TYPE for the values as well.  That's so that when we\n-     call decl_constant_value we get an entity of the right type (but\n-     with the constant value).  In addition, transform the TYPE_VALUES\n-     list to contain the values, rather than the CONST_DECLs for them.  */\n-  for (pair = TYPE_VALUES (enumtype); pair; pair = TREE_CHAIN (pair))\n-    {\n-      tree value = DECL_INITIAL (TREE_VALUE (pair));\n-\n-      TREE_TYPE (value) = enumtype;\n-      TREE_VALUE (pair) = value;\n-    }\n-\n   /* Set TYPE_MIN_VALUE and TYPE_MAX_VALUE according to `precision'.  */\n   TYPE_SIZE (enumtype) = NULL_TREE;\n   TYPE_PRECISION (enumtype) = precision;\n@@ -13241,8 +13230,7 @@ build_enumerator (tree name, tree value, tree enumtype)\n \t}\n \n       /* Remove no-op casts from the value.  */\n-      if (value)\n-\tSTRIP_TYPE_NOPS (value);\n+      STRIP_TYPE_NOPS (value);\n     }\n \n   /* C++ associates enums with global, function, or class declarations.  */"}, {"sha": "a05897810109c44685ffaef3fc3329ad339c1321", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5d70cc0249ddd1745846c62ec171f0cfbeb7673/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5d70cc0249ddd1745846c62ec171f0cfbeb7673/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f5d70cc0249ddd1745846c62ec171f0cfbeb7673", "patch": "@@ -7143,10 +7143,6 @@ tsubst_copy (t, args, complain, in_decl)\n \t  = tsubst_aggr_type (TREE_TYPE (t), args, complain, in_decl, \n \t\t\t      /*entering_scope=*/0);\n \n-\t/* Not yet available.  */\n-\tif (!enum_type || enum_type == (TREE_TYPE (t)))\n-\t  return t;\n-\n \tfor (v = TYPE_VALUES (enum_type); \n \t     v != NULL_TREE; \n \t     v = TREE_CHAIN (v))\n@@ -11073,12 +11069,7 @@ tsubst_enum (tag, newtag, args)\n   for (e = TYPE_VALUES (tag); e; e = TREE_CHAIN (e))\n     {\n       tree value;\n-\n-      /* Copy node and set type */\n-      if (DECL_INITIAL (TREE_VALUE (e)))\n-\tDECL_INITIAL (TREE_VALUE (e)) = copy_node (DECL_INITIAL (TREE_VALUE (e)));\n-      TREE_TYPE (TREE_VALUE (e)) = tag;\n-\t  \n+      \n       /* Note that in a template enum, the TREE_VALUE is the\n \t CONST_DECL, not the corresponding INTEGER_CST.  */\n       value = tsubst_expr (DECL_INITIAL (TREE_VALUE (e)), "}]}