{"sha": "0a846340b99675d57fc2f2923a0412134eed09d3", "node_id": "C_kwDOANBUbNoAKDBhODQ2MzQwYjk5Njc1ZDU3ZmMyZjI5MjNhMDQxMjEzNGVlZDA5ZDM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-20T19:29:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-03-20T19:29:47Z"}, "message": "c++: Drop TREE_READONLY on vars (possibly) initialized by tls wrapper [PR109164]\n\nThe following two testcases are miscompiled, because we keep TREE_READONLY\non the vars even when they are (possibly) dynamically initialized by a TLS\nwrapper function.  Normally cp_finish_decl drops TREE_READONLY from vars\nwhich need dynamic initialization, but for TLS we do this kind of\ninitialization upon every access to those variables.  Keeping them\nTREE_READONLY means e.g. PRE can hoist loads from those before loops\nwhich contain the TLS wrapper calls, so we can access the TLS variables\nbefore they are initialized.\n\n2023-03-20  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/109164\n\t* cp-tree.h (var_needs_tls_wrapper): Declare.\n\t* decl2.cc (var_needs_tls_wrapper): No longer static.\n\t* decl.cc (cp_finish_decl): Clear TREE_READONLY on TLS variables\n\tfor which a TLS wrapper will be needed.\n\n\t* g++.dg/tls/thread_local13.C: New test.\n\t* g++.dg/tls/thread_local13-aux.cc: New file.\n\t* g++.dg/tls/thread_local14.C: New test.\n\t* g++.dg/tls/thread_local14-aux.cc: New file.", "tree": {"sha": "ee607d45ce282300d1b4ad85fa2151471d669d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee607d45ce282300d1b4ad85fa2151471d669d48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a846340b99675d57fc2f2923a0412134eed09d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a846340b99675d57fc2f2923a0412134eed09d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a846340b99675d57fc2f2923a0412134eed09d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a846340b99675d57fc2f2923a0412134eed09d3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c67f312d20e15e5aa18c587693b4ab7e131596c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67f312d20e15e5aa18c587693b4ab7e131596c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c67f312d20e15e5aa18c587693b4ab7e131596c1"}], "stats": {"total": 116, "additions": 115, "deletions": 1}, "files": [{"sha": "0e37d4043d0c0ad4c0865afc2865d6a498e6feeb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a846340b99675d57fc2f2923a0412134eed09d3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a846340b99675d57fc2f2923a0412134eed09d3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0a846340b99675d57fc2f2923a0412134eed09d3", "patch": "@@ -6989,6 +6989,7 @@ extern void copy_linkage\t\t\t(tree, tree);\n extern tree get_guard\t\t\t\t(tree);\n extern tree get_guard_cond\t\t\t(tree, bool);\n extern tree set_guard\t\t\t\t(tree);\n+extern bool var_needs_tls_wrapper\t\t(tree);\n extern tree maybe_get_tls_wrapper_call\t\t(tree);\n extern void mark_needed\t\t\t\t(tree);\n extern bool decl_needed_p\t\t\t(tree);"}, {"sha": "20b980f68c83633a7f523920ed827cb2ebc5cc7e", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a846340b99675d57fc2f2923a0412134eed09d3/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a846340b99675d57fc2f2923a0412134eed09d3/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=0a846340b99675d57fc2f2923a0412134eed09d3", "patch": "@@ -8706,6 +8706,18 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t  if (!decl_maybe_constant_destruction (decl, type))\n \t    TREE_READONLY (decl) = 0;\n \t}\n+      else if (VAR_P (decl)\n+\t       && CP_DECL_THREAD_LOCAL_P (decl)\n+\t       && (!DECL_EXTERNAL (decl) || flag_extern_tls_init)\n+\t       && (was_readonly || TREE_READONLY (decl))\n+\t       && var_needs_tls_wrapper (decl))\n+\t{\n+\t  /* TLS variables need dynamic initialization by the TLS wrapper\n+\t     function, we don't want to hoist accesses to it before the\n+\t     wrapper.  */\n+\t  was_readonly = 0;\n+\t  TREE_READONLY (decl) = 0;\n+\t}\n \n       make_rtl_for_nonlocal_decl (decl, init, asmspec);\n "}, {"sha": "0002d21beefd305386739008d9fe779394629eb3", "filename": "gcc/cp/decl2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a846340b99675d57fc2f2923a0412134eed09d3/gcc%2Fcp%2Fdecl2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a846340b99675d57fc2f2923a0412134eed09d3/gcc%2Fcp%2Fdecl2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.cc?ref=0a846340b99675d57fc2f2923a0412134eed09d3", "patch": "@@ -3623,7 +3623,7 @@ var_defined_without_dynamic_init (tree var)\n /* Returns true iff VAR is a variable that needs uses to be\n    wrapped for possible dynamic initialization.  */\n \n-static bool\n+bool\n var_needs_tls_wrapper (tree var)\n {\n   return (!error_operand_p (var)"}, {"sha": "691f308cff1ad94841519def4acd535ca9628ebe", "filename": "gcc/testsuite/g++.dg/tls/thread_local13-aux.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a846340b99675d57fc2f2923a0412134eed09d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local13-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a846340b99675d57fc2f2923a0412134eed09d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local13-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local13-aux.cc?ref=0a846340b99675d57fc2f2923a0412134eed09d3", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/109164\n+\n+struct S { virtual void foo (); int s; };\n+extern bool baz ();\n+\n+void\n+S::foo ()\n+{\n+  if (s != 42)\n+    __builtin_abort ();\n+}\n+\n+S s;\n+\n+S &\n+qux ()\n+{\n+  s.s = 42;\n+  return s;\n+}\n+\n+thread_local S &t = qux ();\n+\n+bool\n+bar ()\n+{\n+  return false;\n+}\n+\n+int\n+main ()\n+{\n+  if (baz ())\n+    __builtin_abort ();\n+}"}, {"sha": "b424b9f8acfebcfd5200965dbe69478126c28563", "filename": "gcc/testsuite/g++.dg/tls/thread_local13.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a846340b99675d57fc2f2923a0412134eed09d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a846340b99675d57fc2f2923a0412134eed09d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local13.C?ref=0a846340b99675d57fc2f2923a0412134eed09d3", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/109164\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-O2\" }\n+// { dg-add-options tls }\n+// { dg-require-effective-target tls_runtime }\n+// { dg-additional-sources \"thread_local13-aux.cc\" }\n+\n+struct S { virtual void foo (); int s; };\n+extern thread_local S &t;\n+bool bar ();\n+\n+bool\n+baz ()\n+{\n+  while (1)\n+    {\n+      t.foo ();\n+      if (!bar ())\n+        return false;\n+    }\n+}"}, {"sha": "e8f2a243fc14382940d236d9cc1250d02b0a6504", "filename": "gcc/testsuite/g++.dg/tls/thread_local14-aux.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a846340b99675d57fc2f2923a0412134eed09d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local14-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a846340b99675d57fc2f2923a0412134eed09d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local14-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local14-aux.cc?ref=0a846340b99675d57fc2f2923a0412134eed09d3", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/109164\n+\n+extern bool baz ();\n+\n+int\n+qux ()\n+{\n+  return 42;\n+}\n+\n+extern thread_local const int t = qux ();\n+\n+bool\n+bar (int x)\n+{\n+  if (x != 42)\n+    __builtin_abort ();\n+  return false;\n+}\n+\n+int\n+main ()\n+{\n+  if (baz ())\n+    __builtin_abort ();\n+}"}, {"sha": "a7402d0d6317991b51f167a0669e154d60edcd90", "filename": "gcc/testsuite/g++.dg/tls/thread_local14.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a846340b99675d57fc2f2923a0412134eed09d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a846340b99675d57fc2f2923a0412134eed09d3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fthread_local14.C?ref=0a846340b99675d57fc2f2923a0412134eed09d3", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/109164\n+// { dg-do run { target c++11 } }\n+// { dg-options \"-O2\" }\n+// { dg-add-options tls }\n+// { dg-require-effective-target tls_runtime }\n+// { dg-additional-sources \"thread_local14-aux.cc\" }\n+\n+extern thread_local const int t;\n+bool bar (int);\n+\n+bool\n+baz ()\n+{\n+  while (1)\n+    {\n+      if (!bar (t))\n+        return false;\n+    }\n+}"}]}