{"sha": "c4e5e10fdd72b4375e9b092a5da6c1ca0a751575", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRlNWUxMGZkZDcyYjQzNzVlOWIwOTJhNWRhNmMxY2EwYTc1MTU3NQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2005-09-05T07:58:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T07:58:05Z"}, "message": "re PR ada/9087 (Component_Size for packed array returns wrong values)\n\n2005-09-01  Thomas Quinot  <quinot@adacore.com>\n\t    Ed Schonberg  <schonberg@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb (Resolve_Attribute, case 'Address): For an illegal\n\t'Address attribute reference with an overloaded prefix, use the\n\tlocation of the prefix (not the location of the attribute reference) as\n\tthe error location.\n\t(Analyze_Attribute, case 'Size): The name of an enumeration literal, or\n\ta function renaming thereof, is a valid prefix for 'Size (where it is\n\tintepreted as a function call).\n\t(Statically_Denotes_Entity): New predicate to determine whether the\n\tprefix of an array attribute can be considered static.\n\n\tPR ada/9087\n\t(Eval_Attr): Fix failure to evaluate Component_Size for\n\tunconstrained arrays (resulted in wrong value in packed case, since\n\tback end cannot handle this case)\n\nFrom-SVN: r103876", "tree": {"sha": "5dbd152d7a4ba735ea4d5628effde4e817eb6795", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dbd152d7a4ba735ea4d5628effde4e817eb6795"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4e5e10fdd72b4375e9b092a5da6c1ca0a751575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e5e10fdd72b4375e9b092a5da6c1ca0a751575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e5e10fdd72b4375e9b092a5da6c1ca0a751575", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e5e10fdd72b4375e9b092a5da6c1ca0a751575/comments", "author": null, "committer": null, "parents": [{"sha": "d52f1094e50cf2120eebc5bf2a63ed0aa56c825a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d52f1094e50cf2120eebc5bf2a63ed0aa56c825a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d52f1094e50cf2120eebc5bf2a63ed0aa56c825a"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "1306779d12a709bf3282949e3fe7ef0c7022d230", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e5e10fdd72b4375e9b092a5da6c1ca0a751575/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e5e10fdd72b4375e9b092a5da6c1ca0a751575/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=c4e5e10fdd72b4375e9b092a5da6c1ca0a751575", "patch": "@@ -56,7 +56,6 @@ with Sem_Util; use Sem_Util;\n with Stand;    use Stand;\n with Sinfo;    use Sinfo;\n with Sinput;   use Sinput;\n-with Snames;   use Snames;\n with Stand;\n with Stringt;  use Stringt;\n with Targparm; use Targparm;\n@@ -3500,7 +3499,8 @@ package body Sem_Attr is\n             Check_Object_Reference (P);\n \n          elsif Is_Entity_Name (P)\n-           and then Is_Type (Entity (P))\n+           and then (Is_Type (Entity (P))\n+                       or else Ekind (Entity (P)) = E_Enumeration_Literal)\n          then\n             null;\n \n@@ -4175,6 +4175,10 @@ package body Sem_Attr is\n       --  used for First and Last of scalar types. Static is reset to False\n       --  if the type or index type is not statically constrained.\n \n+      function Statically_Denotes_Entity (N : Node_Id) return Boolean;\n+      --  Verify that the prefix of a potentially static array attribute\n+      --  satisfies the conditions of 4.9 (14).\n+\n       ---------------\n       -- Aft_Value --\n       ---------------\n@@ -4532,6 +4536,25 @@ package body Sem_Attr is\n          end if;\n       end Set_Bounds;\n \n+      -------------------------------\n+      -- Statically_Denotes_Entity --\n+      -------------------------------\n+\n+      function Statically_Denotes_Entity (N : Node_Id) return Boolean is\n+         E : Entity_Id;\n+\n+      begin\n+         if not Is_Entity_Name (N) then\n+            return False;\n+         else\n+            E := Entity (N);\n+         end if;\n+\n+         return\n+           Nkind (Parent (E)) /= N_Object_Renaming_Declaration\n+             or else Statically_Denotes_Entity (Renamed_Object (E));\n+      end Statically_Denotes_Entity;\n+\n    --  Start of processing for Eval_Attribute\n \n    begin\n@@ -4790,13 +4813,16 @@ package body Sem_Attr is\n       --  Array case. We enforce the constrained requirement of (RM 4.9(7-8))\n       --  since we can't do anything with unconstrained arrays. In addition,\n       --  only the First, Last and Length attributes are possibly static.\n-      --  In addition Component_Size is possibly foldable, even though it\n-      --  can never be static.\n \n       --  Definite, Has_Access_Values, Has_Discriminants, Type_Class, and\n       --  Unconstrained_Array are again exceptions, because they apply as\n       --  well to unconstrained types.\n \n+      --  In addition Component_Size is an exception since it is possibly\n+      --  foldable, even though it is never static, and it does apply to\n+      --  unconstrained arrays. Furthermore, it is essential to fold this\n+      --  in the packed case, since otherwise the value will be incorrect.\n+\n       elsif Id = Attribute_Definite\n               or else\n             Id = Attribute_Has_Access_Values\n@@ -4806,14 +4832,15 @@ package body Sem_Attr is\n             Id = Attribute_Type_Class\n               or else\n             Id = Attribute_Unconstrained_Array\n+              or else\n+            Id = Attribute_Component_Size\n       then\n          Static := False;\n \n       else\n          if not Is_Constrained (P_Type)\n-           or else (Id /= Attribute_Component_Size and then\n-                    Id /= Attribute_First          and then\n-                    Id /= Attribute_Last           and then\n+           or else (Id /= Attribute_First and then\n+                    Id /= Attribute_Last  and then\n                     Id /= Attribute_Length)\n          then\n             Check_Expressions;\n@@ -4829,7 +4856,8 @@ package body Sem_Attr is\n          --  Again we compute the variable Static for easy reference later\n          --  (note that no array attributes are static in Ada 83).\n \n-         Static := Ada_Version >= Ada_95;\n+         Static := Ada_Version >= Ada_95\n+                     and then Statically_Denotes_Entity (P);\n \n          declare\n             N : Node_Id;\n@@ -7217,7 +7245,7 @@ package body Sem_Attr is\n                Note_Possible_Modification (P);\n             end if;\n \n-            if Nkind (P) in  N_Subexpr\n+            if Nkind (P) in N_Subexpr\n               and then Is_Overloaded (P)\n             then\n                Get_First_Interp (P, Index, It);\n@@ -7226,7 +7254,7 @@ package body Sem_Attr is\n                if Present (It.Nam) then\n                   Error_Msg_Name_1 := Aname;\n                   Error_Msg_N\n-                    (\"prefix of % attribute cannot be overloaded\", N);\n+                    (\"prefix of % attribute cannot be overloaded\", P);\n                   return;\n                end if;\n             end if;"}]}