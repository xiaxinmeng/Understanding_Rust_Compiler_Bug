{"sha": "60081874a02512aa6ed5958953f65d47aeff3325", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAwODE4NzRhMDI1MTJhYTZlZDU5NTg5NTNmNjVkNDdhZWZmMzMyNQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2009-03-31T15:24:24Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2009-03-31T15:24:24Z"}, "message": "loop-iv.c (replace_single_def_regs, [...]): New static functions.\n\n\t* loop-iv.c (replace_single_def_regs, replace_in_expr): New static\n\tfunctions.\n\t(simplify_using_assignment, simplify_using_initial_values): Call \n\treplace_in_expr to make replacements.  Call replace_single_def_regs\n\tonce on the initial version of the expression.\n\nFrom-SVN: r145357", "tree": {"sha": "c9521ba6180b753de1b62d9c5182ce626c3049d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9521ba6180b753de1b62d9c5182ce626c3049d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60081874a02512aa6ed5958953f65d47aeff3325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60081874a02512aa6ed5958953f65d47aeff3325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60081874a02512aa6ed5958953f65d47aeff3325", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60081874a02512aa6ed5958953f65d47aeff3325/comments", "author": null, "committer": null, "parents": [{"sha": "b30321cd329761db5fbf4e0e719983e3faef03e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b30321cd329761db5fbf4e0e719983e3faef03e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b30321cd329761db5fbf4e0e719983e3faef03e3"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "3ac7f56a6b4a9d15ddc469d8877868c50dae9078", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60081874a02512aa6ed5958953f65d47aeff3325/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60081874a02512aa6ed5958953f65d47aeff3325/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60081874a02512aa6ed5958953f65d47aeff3325", "patch": "@@ -25,6 +25,12 @@\n \n \t* loop-iv.c (simple_rhs_p): Allow more kinds of expressions.\n \n+\t* loop-iv.c (replace_single_def_regs, replace_in_expr): New static\n+\tfunctions.\n+\t(simplify_using_assignment, simplify_using_initial_values): Call \n+\treplace_in_expr to make replacements.  Call replace_single_def_regs\n+\tonce on the initial version of the expression.\n+\n 2009-03-31  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n         PR target/27237"}, {"sha": "940373609755d2a7bb5a9e5803209240a15b8670", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60081874a02512aa6ed5958953f65d47aeff3325/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60081874a02512aa6ed5958953f65d47aeff3325/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=60081874a02512aa6ed5958953f65d47aeff3325", "patch": "@@ -1368,6 +1368,34 @@ simple_rhs_p (rtx rhs)\n     }\n }\n \n+/* If REG has a single definition, replace it with its known value in EXPR.\n+   Callback for for_each_rtx.  */\n+\n+static int\n+replace_single_def_regs (rtx *reg, void *expr1)\n+{\n+  unsigned regno;\n+  df_ref adef;\n+  rtx set;\n+  rtx *expr = (rtx *)expr1;\n+\n+  if (!REG_P (*reg))\n+    return 0;\n+\n+  regno = REGNO (*reg);\n+  adef = DF_REG_DEF_CHAIN (regno);\n+  if (adef == NULL || DF_REF_NEXT_REG (adef) != NULL\n+      || DF_REF_IS_ARTIFICIAL (adef))\n+    return -1;\n+\n+  set = single_set (DF_REF_INSN (adef));\n+  if (set == NULL || SET_DEST (set) != *reg || !CONSTANT_P (SET_SRC (set)))\n+    return -1;\n+\n+  *expr = simplify_replace_rtx (*expr, *reg, SET_SRC (set));\n+  return 1;\n+}\n+\n /* A subroutine of simplify_using_initial_values, this function examines INSN\n    to see if it contains a suitable set that we can use to make a replacement.\n    If it is suitable, return true and set DEST and SRC to the lhs and rhs of\n@@ -1400,6 +1428,20 @@ suitable_set_for_replacement (rtx insn, rtx *dest, rtx *src)\n   return true;\n }\n \n+/* Using the data returned by suitable_set_for_replacement, replace DEST\n+   with SRC in *EXPR and return the new expression.  Also call\n+   replace_single_def_regs if the replacement changed something.  */\n+static void\n+replace_in_expr (rtx *expr, rtx dest, rtx src)\n+{\n+  rtx old = *expr;\n+  *expr = simplify_replace_rtx (*expr, dest, src);\n+  if (old == *expr)\n+    return;\n+  while (for_each_rtx (expr, replace_single_def_regs, expr) != 0)\n+    continue;\n+}\n+\n /* Checks whether A implies B.  */\n \n static bool\n@@ -1818,6 +1860,12 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n \n   gcc_assert (op == UNKNOWN);\n \n+  for (;;)\n+    if (for_each_rtx (expr, replace_single_def_regs, expr) == 0)\n+      break;\n+  if (CONSTANT_P (*expr))\n+    return;\n+\n   e = loop_preheader_edge (loop);\n   if (e->src == ENTRY_BLOCK_PTR)\n     return;\n@@ -1881,7 +1929,7 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n \t    {\n \t      rtx *pnote, *pnote_next;\n \n-\t      *expr = simplify_replace_rtx (*expr, dest, src);\n+\t      replace_in_expr (expr, dest, src);\n \t      if (CONSTANT_P (*expr))\n \t\tgoto out;\n \n@@ -1891,8 +1939,8 @@ simplify_using_initial_values (struct loop *loop, enum rtx_code op, rtx *expr)\n \t\t  rtx old_cond = XEXP (note, 0);\n \n \t\t  pnote_next = &XEXP (note, 1);\n-\t\t  XEXP (note, 0) = simplify_replace_rtx (XEXP (note, 0), dest,\n-\t\t\t\t\t\t\t src);\n+\t\t  replace_in_expr (&XEXP (note, 0), dest, src);\n+\n \t\t  /* We can no longer use a condition that has been simplified\n \t\t     to a constant, and simplify_using_condition will abort if\n \t\t     we try.  */"}]}