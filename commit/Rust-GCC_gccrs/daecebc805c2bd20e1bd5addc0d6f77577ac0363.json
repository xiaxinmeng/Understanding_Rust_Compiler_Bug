{"sha": "daecebc805c2bd20e1bd5addc0d6f77577ac0363", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFlY2ViYzgwNWMyYmQyMGUxYmQ1YWRkYzBkNmY3NzU3N2FjMDM2Mw==", "commit": {"author": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2012-01-23T06:25:28Z"}, "committer": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2012-01-23T06:25:28Z"}, "message": "Interix resurrection\n\n2012-01-22  Douglas B Rupp  <rupp@gnat.com>\n\n\t* <toplevel>/config/mh-interix: Remove as unneeded.\n\t* <toplevel>/config/picflag.m4 (i[[34567]]86-*-interix3*):\n\tChange triplet to i[[34567]]86-*-interix[[3-9]]*.\n\n\t* <toplevel>/configure.ac: Remove reference to mh-interix.\n\t* <toplevel>/configure: Regenerate.\n\n\t* <toplevel>/libada/configure: Regenerate.\n\n\t* <toplevel>libgcc/config.host (i[34567]86-*-interix3*):\n\tChange triplet to i[34567]86-*-interix[3-9]*.\n\t* <toplevel>/libgcc/configure: Regenerate.\n\n\t* <toplevel>/liberty/configure: Regenerate.\n\n\t* config.gcc: (i[34567]86-*-interix3*): Remove from obsolete\n\tconfigurations. Change triplet to i[34567]86-*-interix[3-9]*.\n\t(extra_options) interix.opt -> i386/interix.opt\"\n\t(extra_objs):Add winnt-stubs.o\n\t* configure.ac: Add interix to target_os .comm on PE check.\n\t* configure: Regenerate.\n\t* config/interix3.h: Delete and move bits to..\n\t* config/interix.h: Delete and move bits to..\n\t* config/i386/i386-interix3.h: Delete and move bits to..\n\t* config/i386/i386-interix.h: ..here.\n\t(TARGET_CPU_DEFAULT): Remove redefinition.\n\t(TARGET_ASM_CONSTRUCTOR): Undefine.\n\t(SUBTARGET_SWITCHES): Define for ms-bitfields.\n\t(TARGET_OS_CPP_BUILTINS): Remove __OPENNT. Add __declspec.\n\t(PTRDIFF_TYPE): Define.\n\t(LONG_DOUBLE_TYPE_SIZE): Define.\n\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Define.\n\t(SUBTARGET_OVERRIDE_OPTIONS): Remove.\n\t(TARGET_SECTION_TYPE_FLAGS): Define.\n\t(ASM_DECLARE_FUNCTION_NAME): Define.\n\t(ASM_OUTPUT_EXTERNAL): Define.\n\t(ASM_OUTPUT_EXTERNAL_LIBCALL): Define.\n\t(ASM_OUTPUT_ALIGNED_BSS): Define.\n\t(PCC_BITFIELD_TYPE_MATTERS): Define.\n\t(USE_CONST_SECTION): Define.\n\t(SUBTARGET_ENCODE_SECTION_INFO): Remove.\n\t(TARGET_ASM_FUNCTION_RODATA_SECTION): Remove.\n\t(SUPPORTS_ONE_ONLY): Remove.\n\t(I386_PE_STRIP_ENCODING): Define.\n\t* config/interix.opt: Delete and move bits to..\n\t* config/i386/interix.opt: ..here. New.\n\t(mpe-aligned-commons): Add.\n\t* config/i386/t-interix: Add copyright header.\n\t(winnt-stubs.o): Add rule.\n\n\t* testsuite/gcc.dg/builtins-config.h: (HAVE_C99_RUNTIME):\n\tDo not define for Interix.\n\nFrom-SVN: r183406", "tree": {"sha": "f955856d1919e50997c58df4c445b00b32a6068d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f955856d1919e50997c58df4c445b00b32a6068d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daecebc805c2bd20e1bd5addc0d6f77577ac0363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daecebc805c2bd20e1bd5addc0d6f77577ac0363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daecebc805c2bd20e1bd5addc0d6f77577ac0363", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daecebc805c2bd20e1bd5addc0d6f77577ac0363/comments", "author": null, "committer": null, "parents": [{"sha": "dacac27151957876f758a94afc645fc2c4e286b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dacac27151957876f758a94afc645fc2c4e286b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dacac27151957876f758a94afc645fc2c4e286b2"}], "stats": {"total": 777, "additions": 343, "deletions": 434}, "files": [{"sha": "7c1248377d64f078a232f0feb7cea264bcf8c2c7", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -1,3 +1,8 @@\n+2012-01-22  Douglas B Rupp  <rupp@ngnat.com>\n+\n+\t* configure.ac: Remove reference to mh-interix.\n+\t* configure: Regenerate.\n+\n 2012-01-05  Richard Henderson  <rth@redhat.com>\n \n \tPR bootstrap/51072"}, {"sha": "e2bf48d9ca5fe354bb8af14798c17aeea72c51fa", "filename": "config/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -1,3 +1,9 @@\n+2012-01-22  Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* config/mh-interix: Remove as unneeded.\n+\t* config/picflag.m4 (i[[34567]]86-*-interix3*):\n+        Change triplet to i[[34567]]86-*-interix[[3-9]]*.\n+\n 2012-01-04  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \tPR bootstrap/51734"}, {"sha": "3be195b51ecb3c77397fc0c1348973e933582347", "filename": "config/mh-interix", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dacac27151957876f758a94afc645fc2c4e286b2/config%2Fmh-interix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dacac27151957876f758a94afc645fc2c4e286b2/config%2Fmh-interix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-interix?ref=dacac27151957876f758a94afc645fc2c4e286b2", "patch": "@@ -1,2 +0,0 @@\n-# The shell may not be in /bin. \n-SHELL = sh"}, {"sha": "bd818125a66b06fa1accd1b16541647e473bb2fc", "filename": "config/picflag.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/config%2Fpicflag.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/config%2Fpicflag.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fpicflag.m4?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -19,7 +19,7 @@ case \"${$2}\" in\n \t;;\n     i[[34567]]86-*-cygwin* | i[[34567]]86-*-mingw* | x86_64-*-mingw*)\n \t;;\n-    i[[34567]]86-*-interix3*)\n+    i[[34567]]86-*-interix[[3-9]]*)\n \t# Interix 3.x gcc -fpic/-fPIC options generate broken code.\n \t# Instead, we relocate shared libraries at runtime.\n \t;;"}, {"sha": "0bdbe4ddfaa1d5bc6d02da254f0cc365b15891d0", "filename": "configure", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -3670,9 +3670,6 @@ fi\n   *-mingw*)\n     host_makefile_frag=\"config/mh-mingw\"\n     ;;\n-  *-interix*)\n-    host_makefile_frag=\"config/mh-interix\"\n-    ;;\n   hppa*-hp-hpux10*)\n     host_makefile_frag=\"config/mh-pa-hpux10\"\n     ;;"}, {"sha": "96e7cada14cb9c5760bef74b39ae6c893cd4d555", "filename": "configure.ac", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -1,5 +1,5 @@\n #   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-#   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+#   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n #   Free Software Foundation, Inc.\n #\n # This file is free software; you can redistribute it and/or modify it\n@@ -1077,9 +1077,6 @@ case \"${host}\" in\n   *-mingw*)\n     host_makefile_frag=\"config/mh-mingw\"\n     ;;\n-  *-interix*)\n-    host_makefile_frag=\"config/mh-interix\"\n-    ;;\n   hppa*-hp-hpux10*)\n     host_makefile_frag=\"config/mh-pa-hpux10\"\n     ;;"}, {"sha": "c65dcc3907e4495fbe6562038f482805b6751274", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -1,3 +1,41 @@\n+2012-01-22  Douglas B Rupp  <rupp@gnat.com>\n+\n+\tPR target/47096\n+\t* config.gcc: (i[34567]86-*-interix3*): Remove from obsolete\n+\t configurations. Change triplet to i[34567]86-*-interix[3-9]*.\n+\t(extra_options) interix.opt -> i386/interix.opt\"\n+\t(extra_objs):Add winnt-stubs.o\n+\t* configure.ac: Add interix to target_os .comm on PE check.\n+\t* configure: Regenerate.\n+\t* config/interix3.h: Delete and move bits to..\n+\t* config/interix.h: Delete and move bits to..\n+\t* config/i386/i386-interix3.h: Delete and move bits to..\n+\t* config/i386/i386-interix.h: ..here.\n+\t(TARGET_CPU_DEFAULT): Remove redefinition.\n+\t(TARGET_ASM_CONSTRUCTOR): Undefine.\n+\t(SUBTARGET_SWITCHES): Define for ms-bitfields.\n+\t(TARGET_OS_CPP_BUILTINS): Remove __OPENNT. Add __declspec.\n+\t(PTRDIFF_TYPE): Define.\n+\t(LONG_DOUBLE_TYPE_SIZE): Define.\n+\t(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Define.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Remove.\n+\t(TARGET_SECTION_TYPE_FLAGS): Define.\n+\t(ASM_DECLARE_FUNCTION_NAME): Define.\n+\t(ASM_OUTPUT_EXTERNAL): Define.\n+\t(ASM_OUTPUT_EXTERNAL_LIBCALL): Define.\n+\t(ASM_OUTPUT_ALIGNED_BSS): Define.\n+\t(PCC_BITFIELD_TYPE_MATTERS): Define.\n+\t(USE_CONST_SECTION): Define.\n+\t(SUBTARGET_ENCODE_SECTION_INFO): Remove.\n+\t(TARGET_ASM_FUNCTION_RODATA_SECTION): Remove.\n+\t(SUPPORTS_ONE_ONLY): Remove.\n+\t(I386_PE_STRIP_ENCODING): Define.\n+\t* config/interix.opt: Delete and move bits to..\n+\t* config/i386/interix.opt: ..here. New.\n+\t(mpe-aligned-commons): Add.\n+\t* config/i386/t-interix: Add copyright header.\n+\t(winnt-stubs.o): Add rule.\n+\n 2012-01-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51832"}, {"sha": "c82aaf51387852f361ae26dfc43dda616e873223", "filename": "gcc/config.gcc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -1,6 +1,6 @@\n # GCC target-specific configuration file.\n # Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n-# 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+# 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n \n #This file is part of GCC.\n \n@@ -243,7 +243,6 @@ md_file=\n # Obsolete configurations.\n case ${target} in\n    alpha*-dec-osf5.1*\t\t\t\\\n- | i[34567]86-*-interix3*\t\t\\\n  | mips-sgi-irix6.5\t\t\t\\\n  | mips*-*-openbsd*\t\t\t\\\n  | score-*\t\t\t\t\\\n@@ -1473,11 +1472,11 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t\t\t;;\n \tesac\n \t;;\n-i[34567]86-*-interix3*)\n-\ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h i386/i386-interix.h i386/i386-interix3.h interix.h interix3.h\"\n+i[34567]86-*-interix[3-9]*)\n+\ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h i386/i386-interix.h\"\n \ttmake_file=\"${tmake_file} i386/t-interix\"\n-\textra_options=\"${extra_options} rpath.opt interix.opt\"\n-\textra_objs=winnt.o\n+\textra_options=\"${extra_options} rpath.opt i386/interix.opt\"\n+\textra_objs=\"winnt.o winnt-stubs.o\"\n \ttarget_gtfiles=\"\\$(srcdir)/config/i386/winnt.c\"\n \tif test x$enable_threads = xyes ; then\n \t\tthread_file='posix'"}, {"sha": "cd8f7b9e2fae84d382991d9539beb9578eb14278", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 224, "deletions": 235, "changes": 459, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -1,6 +1,6 @@\n /* Target definitions for GCC for Intel 80386 running Interix\n    Parts Copyright (C) 1991, 1999, 2000, 2002, 2003, 2004, 2007, 2008, 2009,\n-   2010, 2011 Free Software Foundation, Inc.\n+   2010, 2011, 2012 Free Software Foundation, Inc.\n \n    Parts:\n      by Douglas B. Rupp (drupp@cs.washington.edu).\n@@ -24,31 +24,84 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* The rest must follow.  */\n+/* Note: Interix doesn't support user-written DLLs (use conventional\n+   shared libs (.so) instead).  Thus a lot of the stuff that might apply\n+   about dllimport/dllexport and the like does not apply here. */\n+\n+#include <stdio.h>\n+\n+/* Names to predefine in the preprocessor for this target machine.  */\n \n #define DBX_DEBUGGING_INFO 1\n #define SDB_DEBUGGING_INFO 1\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n-/* By default, target has a 80387, uses IEEE compatible arithmetic,\n-   and returns float values in the 387 and needs stack probes\n-   We also align doubles to 64-bits for MSVC default compatibility\n-   We do bitfields MSVC-compatibly by default, too.  */\n-#undef TARGET_SUBTARGET_DEFAULT\n-#define TARGET_SUBTARGET_DEFAULT \\\n-   (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_STACK_PROBE | \\\n-    MASK_ALIGN_DOUBLE | MASK_MS_BITFIELD_LAYOUT)\n-\n-#undef TARGET_CPU_DEFAULT\n-#define TARGET_CPU_DEFAULT TARGET_CPU_DEFAULT_i486\n-\n-#define WCHAR_TYPE_SIZE 16\n-#define WCHAR_TYPE \"short unsigned int\"\n+/* Our strategy for finding global constructors is a bit different, although\n+   not a lot.  */\n+#define DO_GLOBAL_CTORS_BODY\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\t\\\n+  unsigned long nptrs;\t\t\t\t\t\t\t\\\n+  func_ptr *p;\t\t\t\t\t\t\t\t\\\n+  asm(\t\t\t\t\t\t\t\t\t\\\n+       \"     .section .ctor_head, \\\"rw\\\"\\n\"\t\t\t\t\\\n+       \"1:\\n\"\t\t\t\t\t\t\t\t\\\n+       \"     .text \\n\"\t\t\t\t\t\t\t\\\n+       ASM_LOAD_ADDR(1b,%0)\t\t\t\t\t\t\\\n+       : \"=r\" (p) : : \"cc\");\t\t\t\t\t\t\\\n+  for (nptrs = 0; p[nptrs] != 0; nptrs++);\t\t\t\t\\\n+  for (i = nptrs-1; i >= 0; i--)\t\t\t\t\t\\\n+    p[i] ();\t\t\t\t\t\t\t\t\\\n+} while (0)\n \n-/* WinNT (and thus Interix) use unsigned int */\n-#define SIZE_TYPE \"unsigned int\"\n+#define DO_GLOBAL_DTORS_BODY\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  func_ptr *p;\t\t\t\t\t\t\t\t\\\n+  asm(\t\t\t\t\t\t\t\t\t\\\n+       \"     .section .dtor_head, \\\"rw\\\"\\n\"\t\t\t\t\\\n+       \"1:\\n\"\t\t\t\t\t\t\t\t\\\n+       \"     .text \\n\"\t\t\t\t\t\t\t\\\n+       ASM_LOAD_ADDR(1b,%0)\t\t\t\t\t\t\\\n+       : \"=r\" (p) : : \"cc\");\t\t\t\t\t\t\\\n+  while (*p)\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      p++;\t\t\t\t\t\t\t\t\\\n+      (*(p-1)) ();\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+} while (0)\n \n-#define ASM_LOAD_ADDR(loc, reg)   \"     leal \" #loc \",\" #reg \"\\n\"\n+/* We don't use the \"usual\" push-an-address solution. */\n+#undef TARGET_ASM_CONSTRUCTOR\n+\n+#undef  SUBTARGET_SWITCHES\n+#define SUBTARGET_SWITCHES \\\n+{ \"ms-bitfields\", MASK_MS_BITFIELD_LAYOUT, N_(\"Use native (MS) bitfield layout\") }, \\\n+{ \"no-ms-bitfields\", -MASK_MS_BITFIELD_LAYOUT, N_(\"Use gcc default bitfield layout\") },\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"\\\n+ %{!shared:%{!dynamic:-lc -lpsxdll \\\n+ }} \\\n+ %{!G:%{!dynamic:-lc -lpsxdll \\\n+ }} \\\n+ %{dynamic:-lc -lpsxdll \\\n+ } \\\n+ %{v}\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"%{!shared:-stack 0x4000000,0x10000} \\\n+\t\t   %{g} \\\n+\t\t   %{dynamic:-Bdynamic} \\\n+\t\t   %{static:-Bstatic} \\\n+\t\t   %{shared:--shared -Bdynamic} \\\n+\t\t   %{G:--shared -Bdynamic} \\\n+\t\t   %{symbolic:--shared -Bsymbolic -Bdynamic} \\\n+   \t\t   %{rpath*:--rpath %*} \\\n+\t\t   \"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC  \\\n+  \"%{!shared:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}}} %{shared:crti%O%s}\"\n \n #define TARGET_DECLSPEC 1\n \n@@ -57,11 +110,11 @@ along with GCC; see the file COPYING3.  If not see\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n \tbuiltin_define (\"__INTERIX\");\t\t\t\t\t\\\n-\tbuiltin_define (\"__OPENNT\");\t\t\t\t\t\\\n \tbuiltin_define (\"_M_IX86=300\");\t\t\t\t\t\\\n \tbuiltin_define (\"_X86_=1\");\t\t\t\t\t\\\n \tbuiltin_define (\"__stdcall=__attribute__((__stdcall__))\");\t\\\n \tbuiltin_define (\"__cdecl=__attribute__((__cdecl__))\");\t\t\\\n+\tbuiltin_define (\"__declspec(x)=__attribute__((x))\");\t\t\\\n \tbuiltin_assert (\"system=unix\");\t\t\t\t\t\\\n \tbuiltin_assert (\"system=interix\");\t\t\t\t\\\n \tif (preprocessing_asm_p ())\t\t\t\t\t\\\n@@ -78,196 +131,144 @@ along with GCC; see the file COPYING3.  If not see\n   while (0)\n \n #undef CPP_SPEC\n-/* Write out the correct language type definition for the header files.  \n-   Unless we have assembler language, write out the symbols for C.\n-   mieee is an Alpha specific variant.  Cross pollination a bad idea.\n-   */\n-#define CPP_SPEC \"-remap %{posix:-D_POSIX_SOURCE} \\\n--isystem %$INTERIX_ROOT/usr/include\"\n-\n-/* The global __fltused is necessary to cause the printf/scanf routines\n-   for outputting/inputting floating point numbers to be loaded.  Since this\n-   is kind of hard to detect, we just do it all the time.  */\n-#undef X86_FILE_START_FLTUSED\n-#define X86_FILE_START_FLTUSED 1\n-\n-/* A table of bytes codes used by the ASM_OUTPUT_ASCII and\n-   ASM_OUTPUT_LIMITED_STRING macros.  Each byte in the table\n-   corresponds to a particular byte value [0..255].  For any\n-   given byte value, if the value in the corresponding table\n-   position is zero, the given character can be output directly.\n-   If the table value is 1, the byte must be output as a \\ooo\n-   octal escape.  If the tables value is anything else, then the\n-   byte value should be output as a \\ followed by the value\n-   in the table.  Note that we can use standard UN*X escape\n-   sequences for many control characters, but we don't use\n-   \\a to represent BEL because some svr4 assemblers (e.g. on\n-   the i386) don't know about that.  Also, we don't use \\v\n-   since some versions of gas, such as 2.2 did not accept it.  */\n-\n-#define ESCAPES \\\n-\"\\1\\1\\1\\1\\1\\1\\1\\1btn\\1fr\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\\n-\\0\\0\\\"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\\n-\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\\\\\0\\0\\0\\\n-\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\1\\\n-\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\\n-\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\\n-\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\\n-\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\\1\"\n-\n-/* Some svr4 assemblers have a limit on the number of characters which\n-   can appear in the operand of a .string directive.  If your assembler\n-   has such a limitation, you should define STRING_LIMIT to reflect that\n-   limit.  Note that at least some svr4 assemblers have a limit on the\n-   actual number of bytes in the double-quoted string, and that they\n-   count each character in an escape sequence as one byte.  Thus, an\n-   escape sequence like \\377 would count as four bytes.\n-\n-   If your target assembler doesn't support the .string directive, you\n-   should define this to zero.\n-*/\n-\n-#define STRING_LIMIT\t((unsigned) 256)\n-\n-#define STRING_ASM_OP\t\"\\t.string\\t\"\n-\n-/* The routine used to output NUL terminated strings.  We use a special\n-   version of this for most svr4 targets because doing so makes the\n-   generated assembly code more compact (and thus faster to assemble)\n-   as well as more readable, especially for targets like the i386\n-   (where the only alternative is to output character sequences as\n-   comma separated lists of numbers).  */\n-\n-#define ASM_OUTPUT_LIMITED_STRING(FILE, STR)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      const unsigned char *_limited_str =\t\t\t\t\\\n-        (const unsigned char *) (STR);\t\t\t\t\t\\\n-      unsigned ch;\t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"%s\\\"\", STRING_ASM_OP);\t\t\t\t\\\n-      for (; (ch = *_limited_str); _limited_str++)\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-\t  int escape = ESCAPES[ch];\t\t\t\t\t\\\n-\t  switch (escape)\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t    case 0:\t\t\t\t\t\t\t\\\n-\t      putc (ch, (FILE));\t\t\t\t\t\\\n-\t      break;\t\t\t\t\t\t\t\\\n-\t    case 1:\t\t\t\t\t\t\t\\\n-\t      fprintf ((FILE), \"\\\\%03o\", ch);\t\t\t\t\\\n-\t      break;\t\t\t\t\t\t\t\\\n-\t    default:\t\t\t\t\t\t\t\\\n-\t      putc ('\\\\', (FILE));\t\t\t\t\t\\\n-\t      putc (escape, (FILE));\t\t\t\t\t\\\n-\t      break;\t\t\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"\\\"\\n\");\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* The routine used to output sequences of byte values.  We use a special\n-   version of this for most svr4 targets because doing so makes the\n-   generated assembly code more compact (and thus faster to assemble)\n-   as well as more readable.  Note that if we find subparts of the\n-   character sequence which end with NUL (and which are shorter than\n-   STRING_LIMIT) we output those using ASM_OUTPUT_LIMITED_STRING.  */\n-\n-#undef ASM_OUTPUT_ASCII\n-#define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      const unsigned char *_ascii_bytes =\t\t\t\t\\\n-        (const unsigned char *) (STR);\t\t\t\t\t\\\n-      const unsigned char *limit = _ascii_bytes + (LENGTH);\t\t\\\n-      unsigned bytes_in_chunk = 0;\t\t\t\t\t\\\n-      for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-\t  const unsigned char *p;\t\t\t\t\t\\\n-\t  if (bytes_in_chunk >= 64)\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      fputc ('\\n', (FILE));\t\t\t\t\t\\\n-\t      bytes_in_chunk = 0;\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t  for (p = _ascii_bytes; p < limit && *p != '\\0'; p++)\t\t\\\n-\t    continue;\t\t\t\t\t\t\t\\\n-\t  if (p < limit && (p - _ascii_bytes) <= (long) STRING_LIMIT)\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      if (bytes_in_chunk > 0)\t\t\t\t\t\\\n-\t\t{\t\t\t\t\t\t\t\\\n-\t\t  fputc ('\\n', (FILE));\t\t\t\t\t\\\n-\t\t  bytes_in_chunk = 0;\t\t\t\t\t\\\n-\t\t}\t\t\t\t\t\t\t\\\n-\t      ASM_OUTPUT_LIMITED_STRING ((FILE), _ascii_bytes);\t\t\\\n-\t      _ascii_bytes = p;\t\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t  else\t\t\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      if (bytes_in_chunk == 0)\t\t\t\t\t\\\n-\t\tfputs (ASM_BYTE, (FILE));\t\t\t\t\\\n-\t      else\t\t\t\t\t\t\t\\\n-\t\tfputc (',', (FILE));\t\t\t\t\t\\\n-\t      fprintf ((FILE), \"0x%02x\", *_ascii_bytes);\t\t\\\n-\t      bytes_in_chunk += 5;\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      if (bytes_in_chunk > 0)\t\t\t\t\t\t\\\n-        fputc ('\\n', (FILE));\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* Emit code to check the stack when allocating more that 4000\n-   bytes in one go.  */\n+#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n \n-#define CHECK_STACK_LIMIT 0x1000\n+#define SIZE_TYPE \"unsigned int\"\n+#define PTRDIFF_TYPE \"int\"\n+#define WCHAR_TYPE \"short unsigned int\"\n+#define WCHAR_TYPE_SIZE 16\n \n-/* the following are OSF linker (not gld) specific... we don't want them */\n-#undef HAS_INIT_SECTION\n-#undef LD_INIT_SWITCH\n-#undef LD_FINI_SWITCH\n+/* Turn off long double being 96 bits.  */\n+#undef LONG_DOUBLE_TYPE_SIZE\n+#define LONG_DOUBLE_TYPE_SIZE 64\n+#undef LIBGCC2_LONG_DOUBLE_TYPE_SIZE\n+#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 64\n \n /* The following are needed for us to be able to use winnt.c, but are not\n    otherwise meaningful to Interix.  (The functions that use these are\n    never called because we don't do DLLs.) */\n #define TARGET_NOP_FUN_DLLIMPORT 1\n #define drectve_section()  /* nothing */\n \n-/* Objective-C has its own packing rules...\n-   Objc tries to parallel the code in stor-layout.c at runtime\t\n-   (see libobjc/encoding.c).  This (compile-time) packing info isn't \n-   available at runtime, so it's hopeless to try.\n-\n-   And if the user tries to set the flag for objc, give an error\n-   so he has some clue.  */\n-\n-#undef  SUBTARGET_OVERRIDE_OPTIONS\n-#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  if (strcmp (lang_hooks.name, \"GNU Objective-C\") == 0)\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if ((target_flags & MASK_MS_BITFIELD_LAYOUT) != 0\t\t\t\\\n-\t  && (target_flags_explicit & MASK_MS_BITFIELD_LAYOUT) != 0)\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t   error (\"ms-bitfields not supported for objc\");\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      target_flags &= ~MASK_MS_BITFIELD_LAYOUT;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-} while (0)\n \n #define EH_FRAME_IN_DATA_SECTION\n \n #define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section\\t.rdata,\\\"r\\\"\"\n \n+/* Define this macro if references to a symbol must be treated\n+   differently depending on something about the variale or\n+   function named by the symbol (such as what section it is in).  */\n+\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO i386_pe_encode_section_info\n+#undef  TARGET_STRIP_NAME_ENCODING\n+#define TARGET_STRIP_NAME_ENCODING  i386_pe_strip_name_encoding_full\n+\n+/* Emit code to check the stack when allocating more that 4000\n+   bytes in one go.  */\n+\n+#define CHECK_STACK_LIMIT 4000\n+\n+/* By default, target has a 80387, uses IEEE compatible arithmetic,\n+   and returns float values in the 387 and needs stack probes\n+   We also align doubles to 64-bits forMSVC default compatibility\n+   Ditto for bitfields. */\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT \\\n+   (MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_STACK_PROBE | \\\n+    MASK_ALIGN_DOUBLE | MASK_MS_BITFIELD_LAYOUT)\n+\n /* The MS compilers take alignment as a number of bytes, so we do as well */\n #undef ASM_OUTPUT_ALIGN\n #define ASM_OUTPUT_ALIGN(FILE,LOG) \\\n   if ((LOG)!=0) fprintf ((FILE), \"\\t.balign %d\\n\", 1<<(LOG))\n \n+\n+/* Define this macro if in some cases global symbols from one translation\n+   unit may not be bound to undefined symbols in another translation unit\n+   without user intervention.  For instance, under Microsoft Windows\n+   symbols must be explicitly imported from shared libraries (DLLs).  */\n+/*\n+ * Old gcc(3.3) did not have 1 here\n+ */\n+#define MULTIPLE_SYMBOL_SPACES\t1\n+\n+extern void i386_pe_unique_section PARAMS ((tree, int));\n+#define TARGET_ASM_UNIQUE_SECTION i386_pe_unique_section\n+\n+/* Switch into a generic section.  */\n+#define TARGET_ASM_NAMED_SECTION  default_pe_asm_named_section\n+\n+/* Select attributes for named sections.  */\n+#define TARGET_SECTION_TYPE_FLAGS  i386_pe_section_type_flags\n+\n+/* Write the extra assembler code needed to declare a function\n+   properly.  If we are generating SDB debugging information, this\n+   will happen automatically, so we only need to handle other cases.  */\n+#undef ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (write_symbols != SDB_DEBUG)\t\t\t\t\t\\\n+       i386_pe_declare_function_type (FILE, NAME, TREE_PUBLIC (DECL));\t\\\n+      ASM_OUTPUT_LABEL (FILE, NAME);       \t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Add an external function to the list of functions to be declared at\n+   the end of the file.  */\n+#define ASM_OUTPUT_EXTERNAL(FILE, DECL, NAME)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\t\\\n+        i386_pe_record_external_function (DECL, NAME);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Declare the type properly for any external libcall.  */\n+#define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, FUN) \\\n+  i386_pe_declare_function_type (FILE, XSTR (FUN, 0), 1)\n+\n+/* This says out to put a global symbol in the BSS section.  */\n+#undef ASM_OUTPUT_ALIGNED_BSS\n+#define ASM_OUTPUT_ALIGNED_BSS(FILE, DECL, NAME, SIZE, ALIGN) \\\n+  asm_output_aligned_bss ((FILE), (DECL), (NAME), (SIZE), (ALIGN))\n+\n+/* Don't assume anything about the header files.  */\n+#define NO_IMPLICIT_EXTERN_C\n+\n+/* External function declarations.  */\n+extern void i386_pe_record_external_function (tree, const char *);\n+extern void i386_pe_declare_function_type (FILE *, const char *, int);\n+extern void i386_pe_record_exported_symbol (const char *, int);\n+extern void i386_pe_asm_file_end (FILE *);\n+\n+/* For Win32 ABI compatibility */\n+#undef DEFAULT_PCC_STRUCT_RETURN\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+/* A bitfield declared as `int' forces `int' alignment for the struct.  */\n+#undef PCC_BITFIELD_TYPE_MATTERS\n+#define PCC_BITFIELD_TYPE_MATTERS 1\n+\n+/* Enable alias attribute support.  */\n+#ifndef SET_ASM_OP\n+#define SET_ASM_OP \"\\t.set\\t\"\n+#endif\n+\n+/* Note that there appears to be two different ways to support const\n+   sections at the moment.  You can either #define the symbol\n+   READONLY_DATA_SECTION (giving it some code which switches to the\n+   readonly data section) or else you can #define the symbols\n+   EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, SELECT_SECTION, and\n+   SELECT_RTX_SECTION.  We do both here just to be on the safe side.  */\n+\n+#define USE_CONST_SECTION 1\n+\n /* The linker will take care of this, and having them causes problems with\n    ld -r (specifically -rU).  */\n #define CTOR_LISTS_DEFINED_EXTERNALLY 1\n \n-#define SET_ASM_OP\t\"\\t.set\\t\"\n /* Output a definition (implements alias) */\n #define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n@@ -288,68 +289,56 @@ while (0)\n \n /* Forward references to tags are allowed.  */\n #define SDB_ALLOW_FORWARD_REFERENCES\n-\n /* Unknown tags are also allowed.  */\n #define SDB_ALLOW_UNKNOWN_REFERENCES\n+/* DWARF2 Unwinding doesn't work with exception handling yet.  */\n+#define DWARF2_UNWIND_INFO 0\n+/* MSVC returns structs of up to 8 bytes via registers. */\n+\n+#undef SUBTARGET_RETURN_IN_MEMORY\n+#define SUBTARGET_RETURN_IN_MEMORY(TYPE, FNTYPE) \\\n+  (TYPE_MODE (TYPE) == BLKmode || \\\n+     (AGGREGATE_TYPE_P (TYPE) && int_size_in_bytes(TYPE) > 8 ))\n+\n+#define ASM_LOAD_ADDR(loc, reg)   \"     leal \" #loc \",\" #reg \"\\n\"\n \n /* The integer half of this list needs to be constant.  However, there's\n    a lot of disagreement about what the floating point adjustments should\n    be.  We pick one that works with gdb.  (The underlying problem is\n    what to do about the segment registers.  Since we have access to them\n    from /proc, we'll allow them to be accessed in gdb, even tho the\n-   gcc compiler can't generate them.  (There's some evidence that \n-   MSVC does, but possibly only for certain special \"canned\" sequences.) */\n+   gcc compiler can't generate them.  (There's some evidence that\n+   MSVC does, but possibly only for certain special \"canned\" sequences.)  */\n \n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n) \\\n (TARGET_64BIT ? dbx64_register_map[n] \\\n- : (n) == 0 ? 0 \\\n- : (n) == 1 ? 2 \\\n- : (n) == 2 ? 1 \\\n- : (n) == 3 ? 3 \\\n- : (n) == 4 ? 6 \\\n- : (n) == 5 ? 7 \\\n- : (n) == 6 ? 5 \\\n- : (n) == 7 ? 4 \\\n- : ((n) >= FIRST_STACK_REG && (n) <= LAST_STACK_REG) ? (n)+8 \\\n- : (-1))\n-\n-/* Define this macro if references to a symbol must be treated\n-   differently depending on something about the variable or\n-   function named by the symbol (such as what section it is in).  */\n-\n-#define SUBTARGET_ENCODE_SECTION_INFO i386_pe_encode_section_info\n-#undef  TARGET_STRIP_NAME_ENCODING\n-#define TARGET_STRIP_NAME_ENCODING  i386_pe_strip_name_encoding_full\n-\n-#if 0\t\n-/* Turn this back on when the linker is updated to handle grouped\n-   .data$ sections correctly. See corresponding note in i386/interix.c. \n-   MK.  */\n-\n-/* Interix uses explicit import from shared libraries.  */\n-#define MULTIPLE_SYMBOL_SPACES 1\n-\n-extern void i386_pe_unique_section (tree, int);\n-#define TARGET_ASM_UNIQUE_SECTION i386_pe_unique_section\n-#define TARGET_ASM_FUNCTION_RODATA_SECTION default_no_function_rodata_section\n-\n-#define SUPPORTS_ONE_ONLY 1\n-#endif /* 0 */\n-\n-/* Switch into a generic section.  */\n-#define TARGET_ASM_NAMED_SECTION  default_pe_asm_named_section\n+ : (n) == 0 ? (int) 0 \\\n+ : (n) == 1 ? (int) 2 \\\n+ : (n) == 2 ? (int) 1 \\\n+ : (n) == 3 ? (int) 3 \\\n+ : (n) == 4 ? (int) 6 \\\n+ : (n) == 5 ? (int) 7 \\\n+ : (n) == 6 ? (int) 5 \\\n+ : (n) == 7 ? (int) 4 \\\n+ : ((n) >= FIRST_STACK_REG && (n) <= LAST_STACK_REG) ? (int) (n)+8 \\\n+ : (int) (-1))\n \n-/* DWARF2 Unwinding doesn't work with exception handling yet.  */\n-#define DWARF2_UNWIND_INFO 0\n+#define EH_FRAME_IN_DATA_SECTION\n \n-/* Don't assume anything about the header files.  */\n-#define NO_IMPLICIT_EXTERN_C\n+/* the following are OSF linker (not gld) specific... we don't want them */\n+#undef HAS_INIT_SECTION\n+#undef LD_INIT_SWITCH\n+#undef LD_FINI_SWITCH\n \n-/* MSVC returns structs of up to 8 bytes via registers.  */\n+/* The following are needed for us to be able to use winnt.c, but are not\n+   otherwise meaningful to Interix.  (The functions that use these are\n+   never called because we don't do DLLs.) */\n+#define TARGET_NOP_FUN_DLLIMPORT 1\n+#define I386_PE_STRIP_ENCODING(SYM_NAME) \\\n+  ((SYM_NAME) + ((SYM_NAME)[0] == '@' \\\n+                 ? ((SYM_NAME)[3] == '*' ? 4 : 3) : 0) \\\n+             + ((SYM_NAME)[0] == '*' ? 1 : 0))\n \n-#define DEFAULT_PCC_STRUCT_RETURN 0\n+#define drectve_section()  /* nothing */\n \n-#define SUBTARGET_RETURN_IN_MEMORY(TYPE, FNTYPE) \\\n-\t(TYPE_MODE (TYPE) == BLKmode \\\n-\t || (AGGREGATE_TYPE_P (TYPE) && int_size_in_bytes (TYPE) > 8 ))"}, {"sha": "abd202c918b5a623d6660c057651cf07ac7572ef", "filename": "gcc/config/i386/i386-interix3.h", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dacac27151957876f758a94afc645fc2c4e286b2/gcc%2Fconfig%2Fi386%2Fi386-interix3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dacac27151957876f758a94afc645fc2c4e286b2/gcc%2Fconfig%2Fi386%2Fi386-interix3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix3.h?ref=dacac27151957876f758a94afc645fc2c4e286b2", "patch": "@@ -1,23 +0,0 @@\n-/* Target definitions for GCC for Intel 80386 running Interix V3.\n-   Copyright (C) 2001, 2007 Free Software Foundation, Inc.\n-   Contributed by Douglas B. Rupp (rupp@gnat.com)\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#undef CPP_SPEC\n-#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n-"}, {"sha": "60943870eb4a74bda759a2134ae7f3c046a4f6e3", "filename": "gcc/config/i386/interix.opt", "status": "renamed", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Fconfig%2Fi386%2Finterix.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Fconfig%2Fi386%2Finterix.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Finterix.opt?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -1,6 +1,6 @@\n-; Interix options.\n+; Interix-specific options.\n \n-; Copyright (C) 2010, 2011\n+; Copyright (C) 2005, 2007, 2009, 2010, 2011, 2012\n ; Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n@@ -19,11 +19,6 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n-; See the GCC internals manual (options.texi) for a description of\n-; this file's format.\n-\n-; Please try to keep this file in ASCII collating order.\n-\n dynamic\n Driver\n \n@@ -33,4 +28,8 @@ Driver\n posix\n Driver\n \n+mpe-aligned-commons\n+Target Var(use_pe_aligned_common) Init(HAVE_GAS_ALIGNED_COMM)\n+Use the GNU extension to the PE format for aligned common data\n+\n ; This comment is to ensure we retain the blank line above.", "previous_filename": "gcc/config/interix.opt"}, {"sha": "82fdbae7bda8621ea023733c5001814be60a989d", "filename": "gcc/config/i386/t-interix", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Fconfig%2Fi386%2Ft-interix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Fconfig%2Fi386%2Ft-interix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-interix?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -1,5 +1,31 @@\n+# Copyright (C) 2011, 2012\n+# Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n winnt.o: $(srcdir)/config/i386/winnt.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h output.h $(TREE_H) flags.h \\\n   $(TM_P_H) $(HASHTAB_H) $(GGC_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/i386/winnt.c\n+\n+winnt-stubs.o: $(srcdir)/config/i386/winnt-stubs.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  $(TM_H) $(RTL_H) $(REGS_H) hard-reg-set.h output.h $(TREE_H) flags.h \\\n+  $(TM_P_H) toplev.h $(HASHTAB_H) $(GGC_H)\n+\t$(COMPILER) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t$(srcdir)/config/i386/winnt-stubs.c\n+"}, {"sha": "e9d1cc21f550cd066e87a4384f6378547acc7395", "filename": "gcc/config/interix.h", "status": "removed", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dacac27151957876f758a94afc645fc2c4e286b2/gcc%2Fconfig%2Finterix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dacac27151957876f758a94afc645fc2c4e286b2/gcc%2Fconfig%2Finterix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Finterix.h?ref=dacac27151957876f758a94afc645fc2c4e286b2", "patch": "@@ -1,110 +0,0 @@\n-/* Operating system specific defines to be used when targeting GCC for\n-   Interix\n-   Copyright (C) 1994, 1995, 1999, 2002, 2004, 2007, 2010\n-   Free Software Foundation, Inc.\n-   Donn Terry, Softway Systems, Inc. (donn@softway.com)\n-   Modified from code\n-      Contributed by Douglas B. Rupp (drupp@cs.washington.edu).\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* POSIX/Uni-thread only for now.  Look at the winnt version\n-for windows/multi thread */\n-\n-/* We need multiple -lc -lcpsx because they mutually refer;\n-   that should go away someday */\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \"\\\n- %{!shared:%{!dynamic:-lc -lcpsx -lc -lcpsx %$INTERIX_ROOT/usr/lib/psxdll.a \\\n- %$INTERIX_ROOT/usr/lib/psxdll2.a \\\n- }} \\\n- %{!G:%{!dynamic:-lc -lcpsx -lc -lcpsx %$INTERIX_ROOT/usr/lib/psxdll.a \\\n- %$INTERIX_ROOT/usr/lib/psxdll2.a \\\n- }} \\\n- %{dynamic:-lc %$INTERIX_ROOT/usr/lib/psxdll.a \\\n- %$INTERIX_ROOT/usr/lib/psxdll2.a \\\n- } \\\n- %{v}\"\n-\n-#undef LINK_SPEC\n-#define LINK_SPEC \"%{!shared:-stack 0x400000,0x10000} \\\n- \t\t   -subsystem posix \\\n-\t\t   %{g} \\\n-\t\t   %{dynamic:-Bdynamic} \\\n-\t\t   %{static:-Bstatic} \\\n-\t\t   %{shared:--shared -Bdynamic} \\\n-\t\t   %{G:--shared -Bdynamic} \\\n-\t\t   %{symbolic:--shared -Bsymbolic -Bdynamic} \\\n-   \t\t   %{rpath*:--rpath %*} \\\n-\t\t   \"\n-\n-#undef STARTFILE_SPEC\n-#define STARTFILE_SPEC  \\\n-  \"%{!shared:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}}} %{shared:crti%O%s}\"\n-\n-\n-#define STDC_0_IN_SYSTEM_HEADERS 1\n-\n-/* Names to predefine in the preprocessor for this target machine.  */\n-\n-#define DBX_DEBUGGING_INFO 1\n-#define SDB_DEBUGGING_INFO 1\n-#undef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-\n-\n-/* TARGET_DEFAULT from configure */\n-\n-#undef WCHAR_TYPE\n-#undef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE \"short unsigned int\"\n-#define WCHAR_TYPE_SIZE 16\n-\n-/* Our strategy for finding global constructors is a bit different, although\n-   not a lot.  */\n-#define DO_GLOBAL_CTORS_BODY\t\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  int i;\t\t\t\t\t\t\t\t\\\n-  unsigned long nptrs;\t\t\t\t\t\t\t\\\n-  func_ptr *p;\t\t\t\t\t\t\t\t\\\n-  asm(\t\t\t\t\t\t\t\t\t\\\n-       \"     .section .ctor_head, \\\"rw\\\"\\n\"\t\t\t\t\\\n-       \"1:\\n\"\t\t\t\t\t\t\t\t\\\n-       \"     .text \\n\"\t\t\t\t\t\t\t\\\n-       ASM_LOAD_ADDR(1b,%0)\t\t\t\t\t\t\\\n-       : \"=r\" (p) : : \"cc\");\t\t\t\t\t\t\\\n-  for (nptrs = 0; p[nptrs] != 0; nptrs++);\t\t\t\t\\\n-  for (i = nptrs-1; i >= 0; i--)\t\t\t\t\t\\\n-    p[i] ();\t\t\t\t\t\t\t\t\\\n-} while (0) \n-\n-#define DO_GLOBAL_DTORS_BODY\t\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  func_ptr *p;\t\t\t\t\t\t\t\t\\\n-  asm(\t\t\t\t\t\t\t\t\t\\\n-       \"     .section .dtor_head, \\\"rw\\\"\\n\"\t\t\t\t\\\n-       \"1:\\n\"\t\t\t\t\t\t\t\t\\\n-       \"     .text \\n\"\t\t\t\t\t\t\t\\\n-       ASM_LOAD_ADDR(1b,%0)\t\t\t\t\t\t\\\n-       : \"=r\" (p) : : \"cc\");\t\t\t\t\t\t\\\n-  while (*p)\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      p++;\t\t\t\t\t\t\t\t\\\n-      (*(p-1)) ();\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-} while (0) "}, {"sha": "370fd8af47ebe069a1dde473f373778770fdb39e", "filename": "gcc/config/interix3.h", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dacac27151957876f758a94afc645fc2c4e286b2/gcc%2Fconfig%2Finterix3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dacac27151957876f758a94afc645fc2c4e286b2/gcc%2Fconfig%2Finterix3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Finterix3.h?ref=dacac27151957876f758a94afc645fc2c4e286b2", "patch": "@@ -1,34 +0,0 @@\n-/* Operating system specific defines to be used when targeting GCC for\n-   Interix version 3.\n-   Copyright (C) 2001, 2007 Free Software Foundation, Inc.\n-   Contributed by Douglas B. Rupp (rupp@gnat.com)\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* Interix 3.x has a single rooted file system and properly named\n-   libraries, so LIB_SPEC can be simplified */\n-\n-#undef LIB_SPEC\n-#define LIB_SPEC \"\\\n- %{!shared:%{!dynamic:-lc -lpsxdll \\\n- }} \\\n- %{!G:%{!dynamic:-lc -lpsxdll \\\n- }} \\\n- %{dynamic:-lc -lpsxdll \\\n- } \\\n- %{v}\"\n-"}, {"sha": "468369aa0a760b3c360f3c95783c47de62b297c3", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -4903,7 +4903,7 @@ case \"${target}\" in\n \t;;\n     i[34567]86-*-cygwin* | i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t;;\n-    i[34567]86-*-interix3*)\n+    i[34567]86-*-interix[3-9]*)\n \t# Interix 3.x gcc -fpic/-fPIC options generate broken code.\n \t# Instead, we relocate shared libraries at runtime.\n \t;;\n@@ -24292,7 +24292,7 @@ _ACEOF\n \n     esac\n     case $target_os in\n-      cygwin* | pe | mingw32*)\n+      cygwin* | pe | mingw32* | interix*)\n \t# Recent binutils allows the three-operand form of \".comm\" on PE.  This\n \t# definition is used unconditionally to initialise the default state of\n \t# the target option variable that governs usage of the feature."}, {"sha": "1e6f2636fba0c30f7ffe150d3975001848bfeaca", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -3551,7 +3551,7 @@ changequote([,])dnl\n \t   Cygwin DLL exports wrappers to support libstdc++ function replacement.])\n     esac\n     case $target_os in\n-      cygwin* | pe | mingw32*)\n+      cygwin* | pe | mingw32* | interix*)\n \t# Recent binutils allows the three-operand form of \".comm\" on PE.  This\n \t# definition is used unconditionally to initialise the default state of\n \t# the target option variable that governs usage of the feature."}, {"sha": "65bea776a0b8f35b1a1fa92acf0681ceea912fff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -1,3 +1,8 @@\n+2012-01-22  Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* gcc.dg/builtins-config.h (HAVE_C99_RUNTIME):\n+\tDo not define for Interix.\n+\n 2012-01-22  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/51832"}, {"sha": "8d5a10d3f16ca1a7e3bd8475e46b9344def01072", "filename": "gcc/testsuite/gcc.dg/builtins-config.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-config.h?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -1,4 +1,5 @@\n-/* Copyright (C) 2003, 2004, 2005, 2006, 2009, 2011 Free Software Foundation.\n+/* Copyright (C) 2003, 2004, 2005, 2006, 2009, 2011, 2012\n+   Free Software Foundation.\n \n    Define macros useful in tests for bulitin functions.  */\n \n@@ -11,6 +12,8 @@\n \n #if defined(__hppa) && defined(__hpux)\n /* PA HP-UX doesn't have the entire C99 runtime.  */\n+#elif defined(__INTERIX)\n+/* Interix6 doesn't have the entire C99 runtime.  */\n #elif defined(__AVR__)\n /* AVR doesn't have the entire C99 runtime.  */\n #elif defined(__FreeBSD__) && (__FreeBSD__ < 9)"}, {"sha": "9a0db22cf8a0e04b63904f16291b86344e1cd8a2", "filename": "libada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/libada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/libada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2FChangeLog?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -1,3 +1,7 @@\n+2012-01-22  Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* configure: Regenerate.\n+\n 2012-01-04  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* configure: Regenerate."}, {"sha": "da92d0edbcee69287393fe20b7c5ab286cf771de", "filename": "libada/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/libada%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/libada%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libada%2Fconfigure?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -2836,7 +2836,7 @@ case \"${host}\" in\n \t;;\n     i[34567]86-*-cygwin* | i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t;;\n-    i[34567]86-*-interix3*)\n+    i[34567]86-*-interix[3-9]*)\n \t# Interix 3.x gcc -fpic/-fPIC options generate broken code.\n \t# Instead, we relocate shared libraries at runtime.\n \t;;"}, {"sha": "427533d8a18f0e7edb83f14a3919fed70a9c7cb6", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -1,3 +1,9 @@\n+2012-01-22  Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* config.host (i[34567]86-*-interix3*):\n+         Change triplet to i[34567]86-*-interix[3-9]*.\n+\t* configure: Regenerate.\n+\n 2012-01-15  Chung-Lin Tang  <cltang@codesourcery.com>\n \t    Richard Sandiford  <rdsandiford@googlemail.com>\n "}, {"sha": "8f1469734fdde6c0f27e3bc17aea6d58320ee532", "filename": "libgcc/config.host", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -1,6 +1,6 @@\n # libgcc host-specific configuration file.\n # Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n-# 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+# 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n \n #This file is part of GCC.\n \n@@ -634,7 +634,7 @@ x86_64-*-mingw*)\n \ttmake_file=\"${tmake_file} ${tmake_eh_file} ${tmake_dlldir_file} i386/t-slibgcc-cygming i386/t-mingw32 t-dfprules i386/t-crtfm i386/t-chkstk\"\n \textra_parts=\"$extra_parts crtfastmath.o\"\n \t;;\n-i[34567]86-*-interix3*)\n+i[34567]86-*-interix[3-9]*)\n \ttmake_file=\"$tmake_file i386/t-interix i386/t-chkstk\"\n \t;;\n ia64*-*-elf*)"}, {"sha": "37afe9deaa8f4e6625f9688a34e1ac8bc268e6e3", "filename": "libgcc/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -2290,7 +2290,7 @@ case \"${host}\" in\n \t;;\n     i[34567]86-*-cygwin* | i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t;;\n-    i[34567]86-*-interix3*)\n+    i[34567]86-*-interix[3-9]*)\n \t# Interix 3.x gcc -fpic/-fPIC options generate broken code.\n \t# Instead, we relocate shared libraries at runtime.\n \t;;"}, {"sha": "1e9b95aa397211640f7b84b468600227e7fb78cc", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -1,3 +1,7 @@\n+2012-01-22  Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* configure: Regenerate.\n+\n 2012-01-10  Jason Merrill  <jason@redhat.com>\n \n \t* cp-demangle.c (d_print_comp) [DEMANGLE_COMPONENT_OPERATOR]:"}, {"sha": "6e98352f356ffdc22ecdba010b6378a1d307b659", "filename": "libiberty/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daecebc805c2bd20e1bd5addc0d6f77577ac0363/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daecebc805c2bd20e1bd5addc0d6f77577ac0363/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=daecebc805c2bd20e1bd5addc0d6f77577ac0363", "patch": "@@ -4867,7 +4867,7 @@ case \"${host}\" in\n \t;;\n     i[34567]86-*-cygwin* | i[34567]86-*-mingw* | x86_64-*-mingw*)\n \t;;\n-    i[34567]86-*-interix3*)\n+    i[34567]86-*-interix[3-9]*)\n \t# Interix 3.x gcc -fpic/-fPIC options generate broken code.\n \t# Instead, we relocate shared libraries at runtime.\n \t;;"}]}