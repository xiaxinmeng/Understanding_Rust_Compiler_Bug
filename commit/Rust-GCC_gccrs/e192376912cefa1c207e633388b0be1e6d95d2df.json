{"sha": "e192376912cefa1c207e633388b0be1e6d95d2df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE5MjM3NjkxMmNlZmExYzIwN2U2MzMzODhiMGJlMWU2ZDk1ZDJkZg==", "commit": {"author": {"name": "Edward Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2009-08-14T23:33:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-08-14T23:33:27Z"}, "message": "re PR libstdc++/41061 (Compile of program using std random fails.)\n\n2009-08-14  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\t    Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/41061\n\t* include/bits/random.h (operator<<(std::basic_ostream<>&,\n\tconst std::lognormal_distribution<>&), \n\toperator>>(std::basic_istream<>&, std::lognormal_distribution<>&),\n\toperator<<(std::basic_ostream<>&, const std::gamma_distribution<>&),\n\toperator>>(std::basic_istream<>&, std::gamma_distribution<>&),\n\toperator<<(std::basic_ostream<>&,\n\tconst std::chi_squared_distribution<>&),\n\toperator>>(std::basic_istream<>&, std::chi_squared_distribution<>&),\n\toperator<<(std::basic_ostream<>&,\n\tconst std::fisher_f_distribution<>&),\n\toperator>>(std::basic_istream<>&, std::fisher_f_distribution<>&),\n\toperator<<(std::basic_ostream<>&,\n\tconst std::student_t_distribution<>&),\n\toperator>>(std::basic_istream<>&, std::student_t_distribution<>&),\n\toperator<<(std::basic_ostream<>&,\n\tconst std::negative_binomial_distribution<>&)): Declare friend.\n\t* testsuite/26_numerics/random/uniform_real_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n\toperators/serialize.cc: Likewise.\n\t* testsuite/26_numerics/random/chi_squared_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/normal_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/uniform_int_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/poisson_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/bernoulli_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/discrete_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/weibull_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/negative_binomial_distribution/\n\toperators/serialize.cc: Likewise.\n\t* testsuite/26_numerics/random/cauchy_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/gamma_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/fisher_f_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/exponential_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/lognormal_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/binomial_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/extreme_value_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/piecewise_linear_distribution/\n\toperators/serialize.cc\n\t* testsuite/26_numerics/random/student_t_distribution/operators/\n\tserialize.cc: Likewise.\n\t* testsuite/26_numerics/random/geometric_distribution/operators/\n\tserialize.cc: Likewise.\n\nCo-Authored-By: Paolo Carlini <paolo.carlini@oracle.com>\n\nFrom-SVN: r150783", "tree": {"sha": "f35050d03e58e81e8bb836816d1dc6f681a27b71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f35050d03e58e81e8bb836816d1dc6f681a27b71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e192376912cefa1c207e633388b0be1e6d95d2df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e192376912cefa1c207e633388b0be1e6d95d2df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e192376912cefa1c207e633388b0be1e6d95d2df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e192376912cefa1c207e633388b0be1e6d95d2df/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2a0778d2d66c0245deef5973390a6a76deca91b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a0778d2d66c0245deef5973390a6a76deca91b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2a0778d2d66c0245deef5973390a6a76deca91b"}], "stats": {"total": 1355, "additions": 1174, "deletions": 181}, "files": [{"sha": "cde0934b3bf0498e320339148de818d8bbde47ee", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -1,6 +1,68 @@\n+2009-08-14  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\t    Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/41061\n+\t* include/bits/random.h (operator<<(std::basic_ostream<>&,\n+\tconst std::lognormal_distribution<>&), \n+\toperator>>(std::basic_istream<>&, std::lognormal_distribution<>&),\n+\toperator<<(std::basic_ostream<>&, const std::gamma_distribution<>&),\n+\toperator>>(std::basic_istream<>&, std::gamma_distribution<>&),\n+\toperator<<(std::basic_ostream<>&,\n+\tconst std::chi_squared_distribution<>&),\n+\toperator>>(std::basic_istream<>&, std::chi_squared_distribution<>&),\n+\toperator<<(std::basic_ostream<>&,\n+\tconst std::fisher_f_distribution<>&),\n+\toperator>>(std::basic_istream<>&, std::fisher_f_distribution<>&),\n+\toperator<<(std::basic_ostream<>&,\n+\tconst std::student_t_distribution<>&),\n+\toperator>>(std::basic_istream<>&, std::student_t_distribution<>&),\n+\toperator<<(std::basic_ostream<>&,\n+\tconst std::negative_binomial_distribution<>&)): Declare friend.\n+\t* testsuite/26_numerics/random/uniform_real_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n+\toperators/serialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/chi_squared_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/normal_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/uniform_int_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/poisson_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/bernoulli_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/discrete_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/weibull_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/negative_binomial_distribution/\n+\toperators/serialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/cauchy_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/gamma_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/fisher_f_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/exponential_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/lognormal_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/binomial_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/extreme_value_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/piecewise_linear_distribution/\n+\toperators/serialize.cc\n+\t* testsuite/26_numerics/random/student_t_distribution/operators/\n+\tserialize.cc: Likewise.\n+\t* testsuite/26_numerics/random/geometric_distribution/operators/\n+\tserialize.cc: Likewise.\n+\n 2009-08-14  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n-\t* include/bits/stl_tree.h: Make erase return iterator as per DR 130.\n+\t* include/bits/stl_tree.h: In C++0x mode make erase return\n+\tan iterator as per DR 130.\n \t* include/bits/stl_set.h: Same.\n \t* include/bits/stl_multiset.h: Same.\n \t* include/bits/stl_map.h: Same."}, {"sha": "06aa6f87b916bf9c459e2d680e93ef51621c3d3c", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 180, "deletions": 180, "changes": 360, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -2039,42 +2039,42 @@ namespace std\n \t\t   const param_type& __p)\n         { return std::exp(__p.s() * _M_nd(__urng) + __p.m()); }\n \n+      /**\n+       * @brief Inserts a %lognormal_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %lognormal_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::lognormal_distribution<_RealType1>&);\n+\n+      /**\n+       * @brief Extracts a %lognormal_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x A %lognormal_distribution random number\n+       *            generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::lognormal_distribution<_RealType1>&);\n+\n     private:\n       param_type _M_param;\n \n       std::normal_distribution<result_type> _M_nd;\n     };\n \n-  /**\n-   * @brief Inserts a %lognormal_distribution random number distribution\n-   * @p __x into the output stream @p __os.\n-   *\n-   * @param __os An output stream.\n-   * @param __x  A %lognormal_distribution random number distribution.\n-   *\n-   * @returns The output stream with the state of @p __x inserted or in\n-   * an error state.\n-   */\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>&,\n-\t       const std::lognormal_distribution<_RealType>&);\n-\n-  /**\n-   * @brief Extracts a %lognormal_distribution random number distribution\n-   * @p __x from the input stream @p __is.\n-   *\n-   * @param __is An input stream.\n-   * @param __x A %lognormal_distribution random number\n-   *            generator engine.\n-   *\n-   * @returns The input stream with @p __x extracted or in an error state.\n-   */\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>&,\n-\t       std::lognormal_distribution<_RealType>&);\n-\n   \n   /**\n    * @brief A gamma continuous distribution for random numbers.\n@@ -2198,41 +2198,41 @@ namespace std\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      /**\n+       * @brief Inserts a %gamma_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %gamma_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::gamma_distribution<_RealType1>&);\n+\n+      /**\n+       * @brief Extracts a %gamma_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %gamma_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::gamma_distribution<_RealType1>&);\n+\n     private:\n       param_type _M_param;\n \n       std::normal_distribution<result_type> _M_nd;\n     };\n \n-  /**\n-   * @brief Inserts a %gamma_distribution random number distribution\n-   * @p __x into the output stream @p __os.\n-   *\n-   * @param __os An output stream.\n-   * @param __x  A %gamma_distribution random number distribution.\n-   *\n-   * @returns The output stream with the state of @p __x inserted or in\n-   * an error state.\n-   */\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>&,\n-\t       const std::gamma_distribution<_RealType>&);\n-\n-  /**\n-   * @brief Extracts a %gamma_distribution random number distribution\n-   * @p __x from the input stream @p __is.\n-   *\n-   * @param __is An input stream.\n-   * @param __x  A %gamma_distribution random number generator engine.\n-   *\n-   * @returns The input stream with @p __x extracted or in an error state.\n-   */\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>&,\n-\t       std::gamma_distribution<_RealType>&);\n-\n \n   /**\n    * @brief A chi_squared_distribution random number distribution.\n@@ -2332,42 +2332,42 @@ namespace std\n \t  return 2 * _M_gd(__urng, param_type(__p.n() / 2));\n \t}\n \n+      /**\n+       * @brief Inserts a %chi_squared_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %chi_squared_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::chi_squared_distribution<_RealType1>&);\n+\n+      /**\n+       * @brief Extracts a %chi_squared_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x A %chi_squared_distribution random number\n+       *            generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::chi_squared_distribution<_RealType1>&);\n+\n     private:\n       param_type _M_param;\n \n       std::gamma_distribution<result_type> _M_gd;\n     };\n \n-  /**\n-   * @brief Inserts a %chi_squared_distribution random number distribution\n-   * @p __x into the output stream @p __os.\n-   *\n-   * @param __os An output stream.\n-   * @param __x  A %chi_squared_distribution random number distribution.\n-   *\n-   * @returns The output stream with the state of @p __x inserted or in\n-   * an error state.\n-   */\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>&,\n-\t       const std::chi_squared_distribution<_RealType>&);\n-\n-  /**\n-   * @brief Extracts a %chi_squared_distribution random number distribution\n-   * @p __x from the input stream @p __is.\n-   *\n-   * @param __is An input stream.\n-   * @param __x A %chi_squared_distribution random number\n-   *            generator engine.\n-   *\n-   * @returns The input stream with @p __x extracted or in an error state.\n-   */\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>&,\n-\t       std::chi_squared_distribution<_RealType>&);\n-\n \n   /**\n    * @brief A cauchy_distribution random number distribution.\n@@ -2623,42 +2623,42 @@ namespace std\n \t\t  / (_M_gd_y(__urng, param_type(__p.n() / 2)) * m()));\n \t}\n \n+      /**\n+       * @brief Inserts a %fisher_f_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %fisher_f_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::fisher_f_distribution<_RealType1>&);\n+\n+      /**\n+       * @brief Extracts a %fisher_f_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x A %fisher_f_distribution random number\n+       *            generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::fisher_f_distribution<_RealType1>&);\n+\n     private:\n       param_type _M_param;\n \n       std::gamma_distribution<result_type> _M_gd_x, _M_gd_y;\n     };\n \n-  /**\n-   * @brief Inserts a %fisher_f_distribution random number distribution\n-   * @p __x into the output stream @p __os.\n-   *\n-   * @param __os An output stream.\n-   * @param __x  A %fisher_f_distribution random number distribution.\n-   *\n-   * @returns The output stream with the state of @p __x inserted or in\n-   * an error state.\n-   */\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>&,\n-\t       const std::fisher_f_distribution<_RealType>&);\n-\n-  /**\n-   * @brief Extracts a %fisher_f_distribution random number distribution\n-   * @p __x from the input stream @p __is.\n-   *\n-   * @param __is An input stream.\n-   * @param __x A %fisher_f_distribution random number\n-   *            generator engine.\n-   *\n-   * @returns The input stream with @p __x extracted or in an error state.\n-   */\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>&,\n-\t       std::fisher_f_distribution<_RealType>&);\n-\n \n   /**\n    * @brief A student_t_distribution random number distribution.\n@@ -2764,43 +2764,43 @@ namespace std\n \t  return _M_nd(__urng) * std::sqrt(__p.n() / __g);\n         }\n \n+      /**\n+       * @brief Inserts a %student_t_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %student_t_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::student_t_distribution<_RealType1>&);\n+\n+      /**\n+       * @brief Extracts a %student_t_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x A %student_t_distribution random number\n+       *            generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::student_t_distribution<_RealType1>&);\n+\n     private:\n       param_type _M_param;\n \n       std::normal_distribution<result_type> _M_nd;\n       std::gamma_distribution<result_type> _M_gd;\n     };\n \n-  /**\n-   * @brief Inserts a %student_t_distribution random number distribution\n-   * @p __x into the output stream @p __os.\n-   *\n-   * @param __os An output stream.\n-   * @param __x  A %student_t_distribution random number distribution.\n-   *\n-   * @returns The output stream with the state of @p __x inserted or in\n-   * an error state.\n-   */\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>&,\n-\t       const std::student_t_distribution<_RealType>&);\n-\n-  /**\n-   * @brief Extracts a %student_t_distribution random number distribution\n-   * @p __x from the input stream @p __is.\n-   *\n-   * @param __is An input stream.\n-   * @param __x A %student_t_distribution random number\n-   *            generator engine.\n-   *\n-   * @returns The input stream with @p __x extracted or in an error state.\n-   */\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>&,\n-\t       std::student_t_distribution<_RealType>&);\n-\n   /* @} */ // group std_random_distributions_normal\n \n   /**\n@@ -3384,43 +3384,43 @@ namespace std\n \toperator()(_UniformRandomNumberGenerator& __urng,\n \t\t   const param_type& __p);\n \n+      /**\n+       * @brief Inserts a %negative_binomial_distribution random\n+       *        number distribution @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %negative_binomial_distribution random number\n+       *             distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       *          an error state.\n+       */\n+      template<typename _IntType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_ostream<_CharT, _Traits>&\n+\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\t\t   const std::negative_binomial_distribution<_IntType1>&);\n+\n+      /**\n+       * @brief Extracts a %negative_binomial_distribution random number\n+       *        distribution @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x A %negative_binomial_distribution random number\n+       *            generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _IntType1, typename _CharT, typename _Traits>\n+\tfriend std::basic_istream<_CharT, _Traits>&\n+\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\t\t   std::negative_binomial_distribution<_IntType1>&);\n+\n     private:\n       param_type _M_param;\n \n       std::gamma_distribution<double> _M_gd;\n     };\n \n-  /**\n-   * @brief Inserts a %negative_binomial_distribution random\n-   *        number distribution @p __x into the output stream @p __os.\n-   *\n-   * @param __os An output stream.\n-   * @param __x  A %negative_binomial_distribution random number\n-   *             distribution.\n-   *\n-   * @returns The output stream with the state of @p __x inserted or in\n-   *          an error state.\n-   */\n-  template<typename _IntType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>&,\n-\t       const std::negative_binomial_distribution<_IntType>&);\n-\n-  /**\n-   * @brief Extracts a %negative_binomial_distribution random number\n-   *        distribution @p __x from the input stream @p __is.\n-   *\n-   * @param __is An input stream.\n-   * @param __x A %negative_binomial_distribution random number\n-   *            generator engine.\n-   *\n-   * @returns The input stream with @p __x extracted or in an error state.\n-   */\n-  template<typename _IntType, typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>&,\n-\t       std::negative_binomial_distribution<_IntType>&);\n-\n   /* @} */ // group std_random_distributions_bernoulli\n \n   /**"}, {"sha": "3677ba7dd615d884edf7b7dfde9f9e9ae80bd3fa", "filename": "libstdc++-v3/testsuite/26_numerics/random/bernoulli_distribution/operators/serialize.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.2.1 Class template bernoulli_distribution [rand.dist.bern.bernoulli]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::bernoulli_distribution u(0.75), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fb65018b93f87e5405691027a868353dd88c3047", "filename": "libstdc++-v3/testsuite/26_numerics/random/binomial_distribution/operators/serialize.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.2.2 Class template binomial_distribution [rand.dist.bern.bin]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::binomial_distribution<int> u(3, 0.75), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fd0d5f9db568b04135104268ba6225896f59b1c4", "filename": "libstdc++-v3/testsuite/26_numerics/random/cauchy_distribution/operators/serialize.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.4.1 class template discard_block_engine [rand.adapt.disc]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::cauchy_distribution<double> u(5.0, 2.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "146eeae51576cf5c139aa1f85fc0a20e2bbe80fa", "filename": "libstdc++-v3/testsuite/26_numerics/random/chi_squared_distribution/operators/serialize.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.4.3 Class template chi_squared_distribution [rand.dist.norm.chisq]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::chi_squared_distribution<double> u(1.5), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c2ba51a1282e45af98f12960c994a4b87d48e24b", "filename": "libstdc++-v3/testsuite/26_numerics/random/discrete_distribution/operators/serialize.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.5.1 Class template discrete_distribution [rand.dist.samp.discrete]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::vector<double> wt = {0.5, 1.0, 2.5, 1.5, 0.5};\n+  std::discrete_distribution<int> u(wt.begin(), wt.end()), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d1dca74c6244347c4a2946a3f427ca292a9bcb45", "filename": "libstdc++-v3/testsuite/26_numerics/random/exponential_distribution/operators/serialize.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.2 Class template exponential_distribution [rand.dist.pois.exp]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::exponential_distribution<double> u(0.5), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2f68409b995be4cc88eb5e0a79ff6015774a946a", "filename": "libstdc++-v3/testsuite/26_numerics/random/extreme_value_distribution/operators/serialize.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.5 Class template extreme_value_distribution [rand.dist.pois.extreme]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::extreme_value_distribution<double> u, v(5.0, 2.0);\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "52640f3fc3a330b0cf9679e4dbe44398173c58a8", "filename": "libstdc++-v3/testsuite/26_numerics/random/fisher_f_distribution/operators/serialize.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.4.5 Class template fisher_f_distribution [rand.dist.norm.f]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::fisher_f_distribution<double> u(2.0, 3.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0c24b7a5b008191d0f0f9e9725ba59a438e28eb7", "filename": "libstdc++-v3/testsuite/26_numerics/random/gamma_distribution/operators/serialize.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.3 Class template gamma_distribution [rand.dist.pois.gamma]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::gamma_distribution<double> u(1.5, 3.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "75de1b88caedc52655256a67a143eb7b1fc86118", "filename": "libstdc++-v3/testsuite/26_numerics/random/geometric_distribution/operators/serialize.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.2.3 Class template geometric_distribution [rand.dist.bern.geom]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::geometric_distribution<int> u(0.75), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "877b6aab548391b572f316cba7b01feb5e7c57c6", "filename": "libstdc++-v3/testsuite/26_numerics/random/lognormal_distribution/operators/serialize.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.4.2 Class template lognormal_distribution [rand.dist.norm.lognormal]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::lognormal_distribution<double> u(5.0, 2.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7320f52240e777986ffaadb2f904e412bef9ca6e", "filename": "libstdc++-v3/testsuite/26_numerics/random/negative_binomial_distribution/operators/serialize.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.2.4 Class template negative_binomial_distribution\n+// [rand.dist.bern.negbin]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::negative_binomial_distribution<int> u(3, 0.75), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c88e0a19b30874114dcd25dda8abd03ec2bf1059", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_distribution/operators/serialize.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.4.1 Class template normal_distribution [rand.dist.norm.normal]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::normal_distribution<double> u(5.0, 2.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e1136796d6e6f77d3e387e8e23172ba6c429601f", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_constant_distribution/operators/serialize.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.5.2 Class template piecewise_constant_distribution\n+// [rand.dist.samp.pconst]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::vector<double> x = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0};\n+  std::vector<double> wt = {0.5, 1.0, 2.5, 1.5, 0.5};\n+  std::piecewise_constant_distribution<double>\n+     u(x.begin(), x.end(), wt.begin()), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "75ea5a7005f120df97b3f30929bab17269116885", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_linear_distribution/operators/serialize.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.5.3 Class template piecewise_linear_distribution\n+// [rand.dist.samp.plinear]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::vector<double> x = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0};\n+  std::vector<double> wt = {0.0, 1.0, 2.5, 1.5, 0.5, 0.0};\n+  std::piecewise_linear_distribution<double>\n+     u(x.begin(), x.end(), wt.begin()), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+  \n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "315e309dbe726249bcbfc4a55d5748bdde4cacb6", "filename": "libstdc++-v3/testsuite/26_numerics/random/poisson_distribution/operators/serialize.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.1 Class template poisson_distribution [rand.dist.pois.poisson]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::poisson_distribution<int> u(5.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d4144702a025f394e25d06139d0bd2292dae5a75", "filename": "libstdc++-v3/testsuite/26_numerics/random/student_t_distribution/operators/serialize.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.4.6 Class template student_t_distribution [rand.dist.norm.t]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::student_t_distribution<double> u(1.5), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6ae080957f39301281547edb7a9387310a8ed081", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_int_distribution/operators/serialize.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.1.1 Class template uniform_int_distribution [rand.dist_uni]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::uniform_int_distribution<int> u(1, 20), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a6ef0f4904081c32f36386b316089cc5a831aa83", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_real_distribution/operators/serialize.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.1.2 Class template uniform_real_distribution [rand.dist.uni.real]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::uniform_real_distribution<double> u(-5.0, 5.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7867023641da2fbfaf66a5374be32bd6bddea37b", "filename": "libstdc++-v3/testsuite/26_numerics/random/weibull_distribution/operators/serialize.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e192376912cefa1c207e633388b0be1e6d95d2df/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Foperators%2Fserialize.cc?ref=e192376912cefa1c207e633388b0be1e6d95d2df", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// 2009-08-14  Edward M. Smith-Rowland  <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.4.8.3.4 Class template weibull_distribution [rand.dist.pois.weibull]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+\n+void\n+test01()\n+{\n+  std::stringstream str;\n+  std::weibull_distribution<double> u(2.0, 3.5), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  str >> v;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}