{"sha": "a5fed4063f428a14f5b91533d5954b9bf4e3e7db", "node_id": "C_kwDOANBUbNoAKGE1ZmVkNDA2M2Y0MjhhMTRmNWI5MTUzM2Q1OTU0YjliZjRlM2U3ZGI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-11T08:40:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-11T09:32:51Z"}, "message": "middle-end/103181 - fix operation_could_trap_p for vector division\n\nFor integer vector division we only checked for all zero vector\nconstants rather than checking whether any element in the constant\nvector is zero.\n\n2021-11-11  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/103181\n\t* tree-eh.c (operation_could_trap_helper_p): Properly\n\tcheck vector constants for a zero element for integer\n\tdivision.  Separate floating point and integer division code.\n\n\t* gcc.dg/torture/pr103181.c: New testcase.", "tree": {"sha": "47f798ce0c99aae61fdf9f26d1075286fd9c6189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47f798ce0c99aae61fdf9f26d1075286fd9c6189"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5fed4063f428a14f5b91533d5954b9bf4e3e7db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5fed4063f428a14f5b91533d5954b9bf4e3e7db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5fed4063f428a14f5b91533d5954b9bf4e3e7db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5fed4063f428a14f5b91533d5954b9bf4e3e7db/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10db7573014008ff867098206f51012d501ab57b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10db7573014008ff867098206f51012d501ab57b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10db7573014008ff867098206f51012d501ab57b"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "6bc705ab52eb06107b5c12bcd8c3e921f34dd68a", "filename": "gcc/testsuite/gcc.dg/torture/pr103181.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fed4063f428a14f5b91533d5954b9bf4e3e7db/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr103181.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fed4063f428a14f5b91533d5954b9bf4e3e7db/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr103181.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr103181.c?ref=a5fed4063f428a14f5b91533d5954b9bf4e3e7db", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+\n+typedef unsigned char __attribute__((__vector_size__ (2))) U;\n+typedef unsigned short S;\n+typedef unsigned int __attribute__((__vector_size__ (64))) V;\n+\n+V v;\n+U a, b, c;\n+\n+U\n+foo (S s)\n+{\n+  v += __builtin_bswap16 (s) || (S) (a / ((U){3, 0}));\n+  return b + c;\n+}\n+\n+int\n+main (void)\n+{\n+  U x = foo (4);\n+  if (x[0] || x[1])\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "3eff07fc8feb23d215e2e9aa1d7d274aef309db3", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5fed4063f428a14f5b91533d5954b9bf4e3e7db/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5fed4063f428a14f5b91533d5954b9bf4e3e7db/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=a5fed4063f428a14f5b91533d5954b9bf4e3e7db", "patch": "@@ -2454,15 +2454,31 @@ operation_could_trap_helper_p (enum tree_code op,\n     case FLOOR_MOD_EXPR:\n     case ROUND_MOD_EXPR:\n     case TRUNC_MOD_EXPR:\n-    case RDIV_EXPR:\n-      if (honor_snans)\n-\treturn true;\n-      if (fp_operation)\n-\treturn flag_trapping_math;\n       if (!TREE_CONSTANT (divisor) || integer_zerop (divisor))\n         return true;\n+      if (TREE_CODE (divisor) == VECTOR_CST)\n+\t{\n+\t  /* Inspired by initializer_each_zero_or_onep.  */\n+\t  unsigned HOST_WIDE_INT nelts = vector_cst_encoded_nelts (divisor);\n+\t  if (VECTOR_CST_STEPPED_P (divisor)\n+\t      && !TYPE_VECTOR_SUBPARTS (TREE_TYPE (divisor))\n+\t\t    .is_constant (&nelts))\n+\t    return true;\n+\t  for (unsigned int i = 0; i < nelts; ++i)\n+\t    {\n+\t      tree elt = vector_cst_elt (divisor, i);\n+\t      if (integer_zerop (elt))\n+\t\treturn true;\n+\t    }\n+\t}\n       return false;\n \n+    case RDIV_EXPR:\n+      if (honor_snans)\n+\treturn true;\n+      gcc_assert (fp_operation);\n+      return flag_trapping_math;\n+\n     case LT_EXPR:\n     case LE_EXPR:\n     case GT_EXPR:"}]}