{"sha": "e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY3MGQ5ZTRjZWM2YjRkMThlOThiZjhlMGZkZGMwMzczZDc4MWM5Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-09-30T01:22:07Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-09-30T01:22:07Z"}, "message": "re PR tree-optimization/17739 (tree-optimizers extend the lifetime of a hard register variable)\n\n        PR 17739\n        * tree-gimple.c (is_gimple_reg): Reject hard registers.\n        (is_gimple_asm_val): New.\n        * tree-gimple.h (is_gimple_asm_val): Declare.\n        * gimplify.c (gimplify_asm_expr): Use it.\n        * tree-pretty-print.c (print_declaration): Dump hard regs.\n        * tree-outof-ssa.c (check_replaceable): Don't check for hard regs.\n        * tree-ssa-copyrename.c (copy_rename_partition_coalesce): Likewise.\n        * tree-ssa-pre.c (is_undefined_value): Likewise.\n        * tree-ssa-copy.c (may_propagate_copy): Likewise.\n        (may_propagate_copy_into_asm): Protect DECL_HARD_REGISTER.\n        * tree-ssa.c (warn_uninit): Likewise.\n        * tree.h (DECL_HARD_REGISTER): Check for VAR_DECL.\n\nFrom-SVN: r88321", "tree": {"sha": "bfe96a23c68a90b5da0a5b5bfb8294fbe08ac645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfe96a23c68a90b5da0a5b5bfb8294fbe08ac645"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/comments", "author": null, "committer": null, "parents": [{"sha": "67a741463c0555aea1acb65ebe874ad914fd96cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a741463c0555aea1acb65ebe874ad914fd96cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67a741463c0555aea1acb65ebe874ad914fd96cf"}], "stats": {"total": 132, "additions": 99, "deletions": 33}, "files": [{"sha": "c58b388c96a2022cfd68cf7d2c6acb578ef73eab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "patch": "@@ -1,3 +1,19 @@\n+2004-09-29  Richard Henderson  <rth@redhat.com>\n+\n+\tPR 17739\n+\t* tree-gimple.c (is_gimple_reg): Reject hard registers.\n+\t(is_gimple_asm_val): New.\n+\t* tree-gimple.h (is_gimple_asm_val): Declare.\n+\t* gimplify.c (gimplify_asm_expr): Use it.\n+\t* tree-pretty-print.c (print_declaration): Dump hard regs.\n+\t* tree-outof-ssa.c (check_replaceable): Don't check for hard regs.\n+\t* tree-ssa-copyrename.c (copy_rename_partition_coalesce): Likewise.\n+\t* tree-ssa-pre.c (is_undefined_value): Likewise.\n+\t* tree-ssa-copy.c (may_propagate_copy): Likewise.\n+\t(may_propagate_copy_into_asm): Protect DECL_HARD_REGISTER.\n+\t* tree-ssa.c (warn_uninit): Likewise.\n+\t* tree.h (DECL_HARD_REGISTER): Check for VAR_DECL.\n+\n 2004-09-29  Fariborz Jahanian <fjahanian@apple.com>\n \n \t* c-decl.c (merge_decls): Use comptype when comparing"}, {"sha": "ca233617b897467877425a6a4184c1120cb3559b", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "patch": "@@ -3215,7 +3215,7 @@ gimplify_asm_expr (tree *expr_p, tree *pre_p, tree *post_p)\n       else\n \t{\n \t  tret = gimplify_expr (&TREE_VALUE (link), pre_p, post_p,\n-\t\t\t\tis_gimple_val, fb_rvalue);\n+\t\t\t\tis_gimple_asm_val, fb_rvalue);\n \t  if (tret == GS_ERROR)\n \t    ret = tret;\n \t}"}, {"sha": "ddb0ddcbc6a1d9dee879c5e83772968afd36d169", "filename": "gcc/testsuite/gcc.dg/tree-ssa/asm-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fasm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fasm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fasm-3.c?ref=e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "patch": "@@ -0,0 +1,26 @@\n+/* PR 17739 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+#define REGISTER \"0\"\n+                                                                                \n+static inline int source(void)\n+{\n+  register int hardreg __asm__(REGISTER);\n+  asm(\"\" : \"=r\"(hardreg));\n+  return hardreg;\n+}\n+                                                                                \n+void test(void)\n+{\n+  int t = source();\n+  foo(t);\n+  bar(t);\n+}\n+\n+/* Hardreg should appear exactly 3 times -- declaration, asm stmt,\n+   and copy out.  */\n+/* { dg-final { scan-tree-dump-times \"hardreg\" 3 \"optimized\" } } */\n+\n+/* In particular, hardreg should *not* appear in the call to bar.  */\n+/* { dg-final { scan-tree-dump-times \"bar \\[(\\]t\\[)\\]\" 1 \"optimized\" } } */"}, {"sha": "b2a2ad9a2bda0397164e260fbd7fca904fe387f9", "filename": "gcc/tree-gimple.c", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.c?ref=e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "patch": "@@ -282,12 +282,35 @@ is_gimple_reg (tree t)\n   if (TREE_CODE (t) == SSA_NAME)\n     t = SSA_NAME_VAR (t);\n \n-  return (is_gimple_variable (t)\n-\t  && is_gimple_reg_type (TREE_TYPE (t))\n-\t  /* A volatile decl is not acceptable because we can't reuse it as\n-\t     needed.  We need to copy it into a temp first.  */\n-\t  && ! TREE_THIS_VOLATILE (t)\n-\t  && ! needs_to_live_in_memory (t));\n+  if (!is_gimple_variable (t))\n+    return false;\n+  if (!is_gimple_reg_type (TREE_TYPE (t)))\n+    return false;\n+\n+  /* A volatile decl is not acceptable because we can't reuse it as\n+     needed.  We need to copy it into a temp first.  */\n+  if (TREE_THIS_VOLATILE (t))\n+    return false;\n+\n+  /* We define \"registers\" as things that can be renamed as needed,\n+     which with our infrastructure does not apply to memory.  */\n+  if (needs_to_live_in_memory (t))\n+    return false;\n+\n+  /* Hard register variables are an interesting case.  For those that\n+     are call-clobbered, we don't know where all the calls are, since\n+     we don't (want to) take into account which operations will turn\n+     into libcalls at the rtl level.  For those that are call-saved,\n+     we don't currently model the fact that calls may in fact change\n+     global hard registers, nor do we examine ASM_CLOBBERS at the tree\n+     level, and so miss variable changes that might imply.  All around,\n+     it seems safest to not do too much optimization with these at the\n+     tree level at all.  We'll have to rely on the rtl optimizers to\n+     clean this up, as there we've got all the appropriate bits exposed.  */\n+  if (TREE_CODE (t) == VAR_DECL && DECL_HARD_REGISTER (t))\n+    return false;\n+\n+  return true;\n }\n \n /* Returns true if T is a GIMPLE formal temporary variable.  */\n@@ -349,6 +372,16 @@ is_gimple_val (tree t)\n   return (is_gimple_variable (t) || is_gimple_min_invariant (t));\n }\n \n+/* Similarly, but accept hard registers as inputs to asm statements.  */\n+\n+bool\n+is_gimple_asm_val (tree t)\n+{\n+  if (TREE_CODE (t) == VAR_DECL && DECL_HARD_REGISTER (t))\n+    return true;\n+\n+  return is_gimple_val (t);\n+}\n \n /* Return true if T is a GIMPLE minimal lvalue.  */\n "}, {"sha": "b3fb9c69c912c93193850ede338041b27bdf820f", "filename": "gcc/tree-gimple.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-gimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-gimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-gimple.h?ref=e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "patch": "@@ -64,6 +64,8 @@ extern bool is_gimple_lvalue (tree);\n extern bool is_gimple_min_invariant (tree);\n /* Returns true iff T is a GIMPLE rvalue.  */\n extern bool is_gimple_val (tree);\n+/* Returns true iff T is a GIMPLE asm statement input.  */\n+extern bool is_gimple_asm_val (tree);\n /* Returns true iff T is a valid rhs for a MODIFY_EXPR where the LHS is a\n    GIMPLE temporary, a renamed user variable, or something else,\n    respectively.  */"}, {"sha": "827f91d151106d7bf86965f0139751e77bce4e42", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "patch": "@@ -1476,11 +1476,6 @@ check_replaceable (temp_expr_table_p tab, tree stmt)\n   if (version_ref_count (map, def) != 1)\n     return false;\n \n-  /* Assignments to variables assigned to hard registers are not\n-     replaceable.  */\n-  if (DECL_HARD_REGISTER (SSA_NAME_VAR (def)))\n-    return false;\n-\n   /* There must be no V_MAY_DEFS.  */\n   if (NUM_V_MAY_DEFS (V_MAY_DEF_OPS (ann)) != 0)\n     return false;"}, {"sha": "9337c3856fd33614b5c3fcb85fe9eda3d87f6e33", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "patch": "@@ -1566,6 +1566,14 @@ print_declaration (pretty_printer *buffer, tree t, int spc, int flags)\n       dump_generic_node (buffer, t, spc, flags, false);\n     }\n \n+  if (TREE_CODE (t) == VAR_DECL && DECL_HARD_REGISTER (t))\n+    {\n+      pp_string (buffer, \" __asm__ \");\n+      pp_character (buffer, '(');\n+      dump_generic_node (buffer, DECL_ASSEMBLER_NAME (t), spc, flags, false);\n+      pp_character (buffer, ')');\n+    }\n+\n   /* The initial value of a function serves to determine wether the function\n      is declared or defined.  So the following does not apply to function\n      nodes.  */"}, {"sha": "dc41e8e058ec4b37a1ad1fbabb1718a6974a4391", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "patch": "@@ -145,11 +145,10 @@ may_propagate_copy (tree dest, tree orig)\n       && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (orig))\n     return false;\n \n-  /* If DEST is an SSA_NAME that flows from an abnormal edge or if it\n-     represents a hard register, then it cannot be replaced.  */\n+  /* If DEST is an SSA_NAME that flows from an abnormal edge, then it\n+     cannot be replaced.  */\n   if (TREE_CODE (dest) == SSA_NAME\n-      && (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (dest)\n-\t  || DECL_HARD_REGISTER (SSA_NAME_VAR (dest))))\n+      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (dest))\n     return false;\n \n   /* Anything else is OK.  */\n@@ -163,6 +162,7 @@ may_propagate_copy_into_asm (tree dest)\n {\n   /* Hard register operands of asms are special.  Do not bypass.  */\n   return !(TREE_CODE (dest) == SSA_NAME\n+\t   && TREE_CODE (SSA_NAME_VAR (dest)) == VAR_DECL\n \t   && DECL_HARD_REGISTER (SSA_NAME_VAR (dest)));\n }\n "}, {"sha": "7495c6b8753ec1772ab7d912ad615c507720be5c", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "patch": "@@ -146,19 +146,6 @@ copy_rename_partition_coalesce (var_map map, tree var1, tree var2, FILE *debug)\n   root1 = SSA_NAME_VAR (rep1);\n   root2 = SSA_NAME_VAR (rep2);\n \n-  if (DECL_HARD_REGISTER (root1) || DECL_HARD_REGISTER (root2))\n-    {\n-      if (debug)\n-        {\n-\t  if (DECL_HARD_REGISTER (root1))\n-\t    print_generic_expr (debug, var1, TDF_SLIM);\n-\t  else\n-\t    print_generic_expr (debug, var2, TDF_SLIM);\n-\t  fprintf (debug, \" is a hardware register.  No Coalescing.\\n\");\n-\t}\n-      return;\n-    }\n-\n   ann1 = var_ann (root1);\n   ann2 = var_ann (root2);\n "}, {"sha": "3d505b5579be41b90ed59e3ed20587d940c91b88", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "patch": "@@ -1624,8 +1624,7 @@ is_undefined_value (tree expr)\n   return (TREE_CODE (expr) == SSA_NAME\n           && IS_EMPTY_STMT (SSA_NAME_DEF_STMT (expr))\n \t  /* PARM_DECLs and hard registers are always defined.  */\n-\t  && TREE_CODE (SSA_NAME_VAR (expr)) != PARM_DECL\n-\t  && !DECL_HARD_REGISTER (SSA_NAME_VAR (expr)));\n+\t  && TREE_CODE (SSA_NAME_VAR (expr)) != PARM_DECL);\n }\n \n "}, {"sha": "1ddaf7d3e660a3b640aa6e4e1c75d8d6027cec1b", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "patch": "@@ -1273,7 +1273,7 @@ warn_uninit (tree t, const char *msgid, location_t *locus)\n     return;\n \n   /* Hard register variables get their initial value from the ether.  */\n-  if (DECL_HARD_REGISTER (var))\n+  if (TREE_CODE (var) == VAR_DECL && DECL_HARD_REGISTER (var))\n     return;\n \n   /* TREE_NO_WARNING either means we already warned, or the front end"}, {"sha": "b40253ccfaf60e121d05d4ba66503c4a33a1156d", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e670d9e4cec6b4d18e98bf8e0fddc0373d781c9f", "patch": "@@ -2123,7 +2123,7 @@ struct tree_binfo GTY (())\n \n /* In a VAR_DECL, nonzero if the decl is a register variable with\n    an explicit asm specification.  */\n-#define DECL_HARD_REGISTER(NODE)  (DECL_CHECK (NODE)->decl.inline_flag)\n+#define DECL_HARD_REGISTER(NODE)  (VAR_DECL_CHECK (NODE)->decl.inline_flag)\n \n /* Value of the decls's visibility attribute */\n #define DECL_VISIBILITY(NODE) (DECL_CHECK (NODE)->decl.visibility)"}]}