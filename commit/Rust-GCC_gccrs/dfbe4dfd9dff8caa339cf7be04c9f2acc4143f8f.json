{"sha": "dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZiZTRkZmQ5ZGZmOGNhYTMzOWNmN2JlMDRjOWYyYWNjNDE0M2Y4Zg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2015-12-02T08:02:05Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-12-02T08:02:05Z"}, "message": "S/390: Fix vec_splat_* builtins.\n\ngcc/testsuite/ChangeLog:\n\n2015-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/zvector/vec-splat-2.c: New test.\n\ngcc/ChangeLog:\n\n2015-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390-builtin-types.def: New builtin types added.\n\t* config/s390/s390-builtins.def: Add s390_vec_splat_* definitions.\n\t* config/s390/s390.c (s390_expand_builtin): Always truncate\n\tconstants to the mode in the pattern.\n\t* config/s390/vecintrin.h: Let the vec_splat_* macros point to the\n\trespective builtin __builtin_s390_vec_splat_*.\n\nFrom-SVN: r231157", "tree": {"sha": "a5991879e9d12bb69d626968632fea239e448ffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5991879e9d12bb69d626968632fea239e448ffb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f/comments", "author": null, "committer": null, "parents": [{"sha": "4f3ccd08595c533b31a03de1429df5a186cf5013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f3ccd08595c533b31a03de1429df5a186cf5013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f3ccd08595c533b31a03de1429df5a186cf5013"}], "stats": {"total": 92, "additions": 84, "deletions": 8}, "files": [{"sha": "6d365af62275e275c0b2500e2422d9d073c86899", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f", "patch": "@@ -1,3 +1,12 @@\n+2015-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390-builtin-types.def: New builtin types added.\n+\t* config/s390/s390-builtins.def: Add s390_vec_splat_* definitions.\n+\t* config/s390/s390.c (s390_expand_builtin): Always truncate\n+\tconstants to the mode in the pattern.\n+\t* config/s390/vecintrin.h: Let the vec_splat_* macros point to the\n+\trespective builtin __builtin_s390_vec_splat_*.\n+\n 2015-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390-builtin-types.def: Sort builtin types."}, {"sha": "bd3d534cbb2e0e9185b068f7a90b69acbef91de2", "filename": "gcc/config/s390/s390-builtin-types.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtin-types.def?ref=dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f", "patch": "@@ -139,16 +139,19 @@ DEF_FN_TYPE_2 (BT_FN_UV16QI_USHORT, B_VX, BT_UV16QI, BT_USHORT)\n DEF_FN_TYPE_2 (BT_FN_UV16QI_UV16QI, B_VX, BT_UV16QI, BT_UV16QI)\n DEF_FN_TYPE_2 (BT_FN_UV2DI_ULONGLONG, B_VX, BT_UV2DI, BT_ULONGLONG)\n DEF_FN_TYPE_2 (BT_FN_UV2DI_ULONGLONGCONSTPTR, B_VX, BT_UV2DI, BT_ULONGLONGCONSTPTR)\n+DEF_FN_TYPE_2 (BT_FN_UV2DI_USHORT, B_VX, BT_UV2DI, BT_USHORT)\n DEF_FN_TYPE_2 (BT_FN_UV2DI_UV2DI, B_VX, BT_UV2DI, BT_UV2DI)\n DEF_FN_TYPE_2 (BT_FN_UV2DI_UV4SI, B_VX, BT_UV2DI, BT_UV4SI)\n DEF_FN_TYPE_2 (BT_FN_UV4SI_UINT, B_VX, BT_UV4SI, BT_UINT)\n DEF_FN_TYPE_2 (BT_FN_UV4SI_UINTCONSTPTR, B_VX, BT_UV4SI, BT_UINTCONSTPTR)\n+DEF_FN_TYPE_2 (BT_FN_UV4SI_USHORT, B_VX, BT_UV4SI, BT_USHORT)\n DEF_FN_TYPE_2 (BT_FN_UV4SI_UV4SI, B_VX, BT_UV4SI, BT_UV4SI)\n DEF_FN_TYPE_2 (BT_FN_UV4SI_UV8HI, B_VX, BT_UV4SI, BT_UV8HI)\n DEF_FN_TYPE_2 (BT_FN_UV8HI_USHORT, B_VX, BT_UV8HI, BT_USHORT)\n DEF_FN_TYPE_2 (BT_FN_UV8HI_USHORTCONSTPTR, B_VX, BT_UV8HI, BT_USHORTCONSTPTR)\n DEF_FN_TYPE_2 (BT_FN_UV8HI_UV16QI, B_VX, BT_UV8HI, BT_UV16QI)\n DEF_FN_TYPE_2 (BT_FN_UV8HI_UV8HI, B_VX, BT_UV8HI, BT_UV8HI)\n+DEF_FN_TYPE_2 (BT_FN_V16QI_SCHAR, B_VX, BT_V16QI, BT_SCHAR)\n DEF_FN_TYPE_2 (BT_FN_V16QI_UCHAR, B_VX, BT_V16QI, BT_UCHAR)\n DEF_FN_TYPE_2 (BT_FN_V16QI_V16QI, B_VX, BT_V16QI, BT_V16QI)\n DEF_FN_TYPE_2 (BT_FN_V2DF_DBL, B_VX, BT_V2DF, BT_DBL)"}, {"sha": "0b6961e21c929e141ca23bbd841a0b97c7f205c4", "filename": "gcc/config/s390/s390-builtins.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f/gcc%2Fconfig%2Fs390%2Fs390-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-builtins.def?ref=dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f", "patch": "@@ -362,6 +362,15 @@ B_DEF      (s390_vrepih,                vec_splatsv8hi,     0,\n B_DEF      (s390_vrepif,                vec_splatsv4si,     0,                  B_VX,               O1_S16,             BT_FN_V4SI_SHORT)\n B_DEF      (s390_vrepig,                vec_splatsv2di,     0,                  B_VX,               O1_S16,             BT_FN_V2DI_SHORT)\n \n+B_DEF      (s390_vec_splat_u8,          vec_splatsv16qi,    0,                  B_VX,               O1_U8,              BT_FN_UV16QI_UCHAR)\n+B_DEF      (s390_vec_splat_s8,          vec_splatsv16qi,    0,                  B_VX,               O1_S8,              BT_FN_V16QI_SCHAR)\n+B_DEF      (s390_vec_splat_u16,         vec_splatsv8hi,     0,                  B_VX,               O1_U16,             BT_FN_UV8HI_USHORT)\n+B_DEF      (s390_vec_splat_s16,         vec_splatsv8hi,     0,                  B_VX,               O1_S16,             BT_FN_V8HI_SHORT)\n+B_DEF      (s390_vec_splat_u32,         vec_splatsv4si,     0,                  B_VX,               O1_U16,             BT_FN_UV4SI_USHORT)\n+B_DEF      (s390_vec_splat_s32,         vec_splatsv4si,     0,                  B_VX,               O1_S16,             BT_FN_V4SI_SHORT)\n+B_DEF      (s390_vec_splat_u64,         vec_splatsv2di,     0,                  B_VX,               O1_U16,             BT_FN_UV2DI_USHORT)\n+B_DEF      (s390_vec_splat_s64,         vec_splatsv2di,     0,                  B_VX,               O1_S16,             BT_FN_V2DI_SHORT)\n+\n OB_DEF     (s390_vec_insert,            s390_vec_insert_s8, s390_vec_insert_dbl,B_VX,               BT_FN_OV4SI_INT_OV4SI_INT)\n OB_DEF_VAR (s390_vec_insert_s8,         s390_vlvgb,         O3_ELEM,            BT_OV_V16QI_SCHAR_V16QI_INT)\n OB_DEF_VAR (s390_vec_insert_u8,         s390_vlvgb,         O3_ELEM,            BT_OV_UV16QI_UCHAR_UV16QI_INT)"}, {"sha": "7e7ed45230a5bc904719c3f496ffa19773455ffb", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f", "patch": "@@ -835,6 +835,15 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       insn_op = &insn_data[icode].operand[arity + nonvoid];\n       op[arity] = expand_expr (arg, NULL_RTX, insn_op->mode, EXPAND_NORMAL);\n \n+      /* expand_expr truncates constants to the target mode only if it\n+\t is \"convenient\".  However, our checks below rely on this\n+\t being done.  */\n+      if (CONST_INT_P (op[arity])\n+\t  && SCALAR_INT_MODE_P (insn_op->mode)\n+\t  && GET_MODE (op[arity]) != insn_op->mode)\n+\top[arity] = GEN_INT (trunc_int_for_mode (INTVAL (op[arity]),\n+\t\t\t\t\t\t insn_op->mode));\n+\n       /* Wrap the expanded RTX for pointer types into a MEM expr with\n \t the proper mode.  This allows us to use e.g. (match_operand\n \t \"memory_operand\"..) in the insn patterns instead of (mem"}, {"sha": "c24dcb42eb469ae3a113705f26fceacee2de5599", "filename": "gcc/config/s390/vecintrin.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f/gcc%2Fconfig%2Fs390%2Fvecintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f/gcc%2Fconfig%2Fs390%2Fvecintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvecintrin.h?ref=dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f", "patch": "@@ -67,14 +67,14 @@ __lcbb(const void *ptr, int bndry)\n #define vec_genmasks_16 __builtin_s390_vgmh\n #define vec_genmasks_32 __builtin_s390_vgmf\n #define vec_genmasks_64 __builtin_s390_vgmg\n-#define vec_splat_u8 __builtin_s390_vlrepb\n-#define vec_splat_s8 __builtin_s390_vlrepb\n-#define vec_splat_u16 __builtin_s390_vlreph\n-#define vec_splat_s16 __builtin_s390_vlreph\n-#define vec_splat_u32 __builtin_s390_vlrepf\n-#define vec_splat_s32 __builtin_s390_vlrepf\n-#define vec_splat_u64 __builtin_s390_vlrepg\n-#define vec_splat_s64 __builtin_s390_vlrepg\n+#define vec_splat_u8 __builtin_s390_vec_splat_u8\n+#define vec_splat_s8 __builtin_s390_vec_splat_s8\n+#define vec_splat_u16 __builtin_s390_vec_splat_u16\n+#define vec_splat_s16 __builtin_s390_vec_splat_s16\n+#define vec_splat_u32 __builtin_s390_vec_splat_u32\n+#define vec_splat_s32 __builtin_s390_vec_splat_s32\n+#define vec_splat_u64 __builtin_s390_vec_splat_u64\n+#define vec_splat_s64 __builtin_s390_vec_splat_s64\n #define vec_add_u128 __builtin_s390_vaq\n #define vec_addc_u128 __builtin_s390_vaccq\n #define vec_adde_u128 __builtin_s390_vacq"}, {"sha": "1ef533d908ac7d3219a28c110ec9a01d293d6562", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f", "patch": "@@ -1,3 +1,7 @@\n+2015-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/zvector/vec-splat-2.c: New test.\n+\n 2015-12-02  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/vector/vec-vrepi-1.c: New test."}, {"sha": "7ad090b2d5efee7afdef9c6d1e5dc48ba7238607", "filename": "gcc/testsuite/gcc.target/s390/zvector/vec-splat-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-splat-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-splat-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fzvector%2Fvec-splat-2.c?ref=dfbe4dfd9dff8caa339cf7be04c9f2acc4143f8f", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mzarch -march=z13 -mzvector\" } */\n+\n+#include <vecintrin.h>\n+\n+vector signed char v16qi;\n+vector short       v8hi;\n+vector int         v4si;\n+vector long long   v2di;\n+\n+vector unsigned char      uv16qi;\n+vector unsigned short     uv8hi;\n+vector unsigned int       uv4si;\n+vector unsigned long long uv2di;\n+\n+int\n+foo ()\n+{\n+  v16qi  = vec_splat_s8 (-112);\n+  uv16qi = vec_splat_u8 (215);\n+\n+  v8hi  = vec_splat_s16 (-32000);\n+  uv8hi = vec_splat_u16 (64000);\n+\n+  v4si  = vec_splat_s32 (-32000);\n+  uv4si = vec_splat_u32 (64000);\n+\n+  v2di  = vec_splat_s64 (-32000);\n+  uv2di = vec_splat_u64 (64000);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vrepib\\t%v.*,-112\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrepib\\t%v.*,-41\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"vrepih\\t%v.*,-32000\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrepih\\t%v.*,-1536\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"vrepif\\t%v.*,-32000\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrepif\\t%v.*,-1536\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"vrepig\\t%v.*,-32000\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vrepig\\t%v.*,-1536\" 1 } } */"}]}