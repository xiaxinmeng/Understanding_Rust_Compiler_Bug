{"sha": "b660eccf9b32ee3b962a77cf5565fa2771792c35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY2MGVjY2Y5YjMyZWUzYjk2MmE3N2NmNTU2NWZhMjc3MTc5MmMzNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T21:39:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T21:39:45Z"}, "message": "Add a fixed_size_mode_pod class\n\nThis patch adds a POD version of fixed_size_mode.  The only current use\nis for storing the __builtin_apply and __builtin_result register modes,\nwhich were made fixed_size_modes by the previous patch.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* coretypes.h (fixed_size_mode): Declare.\n\t(fixed_size_mode_pod): New typedef.\n\t* builtins.h (target_builtins::x_apply_args_mode)\n\t(target_builtins::x_apply_result_mode): Change type to\n\tfixed_size_mode_pod.\n\t* builtins.c (apply_args_size, apply_result_size, result_vector)\n\t(expand_builtin_apply_args_1, expand_builtin_apply)\n\t(expand_builtin_return): Update accordingly.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256193", "tree": {"sha": "88c1a9e2b3ca8d0456ff1cbb81cd75036a2c1ef8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88c1a9e2b3ca8d0456ff1cbb81cd75036a2c1ef8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b660eccf9b32ee3b962a77cf5565fa2771792c35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b660eccf9b32ee3b962a77cf5565fa2771792c35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b660eccf9b32ee3b962a77cf5565fa2771792c35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b660eccf9b32ee3b962a77cf5565fa2771792c35/comments", "author": null, "committer": null, "parents": [{"sha": "16c78b665aa4ce64af71b6ac7ebaa96c9807be4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c78b665aa4ce64af71b6ac7ebaa96c9807be4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c78b665aa4ce64af71b6ac7ebaa96c9807be4c"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "4e5a8fa76b27ad88bac1e8c1074a795aeb9eb10c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b660eccf9b32ee3b962a77cf5565fa2771792c35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b660eccf9b32ee3b962a77cf5565fa2771792c35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b660eccf9b32ee3b962a77cf5565fa2771792c35", "patch": "@@ -1,3 +1,16 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* coretypes.h (fixed_size_mode): Declare.\n+\t(fixed_size_mode_pod): New typedef.\n+\t* builtins.h (target_builtins::x_apply_args_mode)\n+\t(target_builtins::x_apply_result_mode): Change type to\n+\tfixed_size_mode_pod.\n+\t* builtins.c (apply_args_size, apply_result_size, result_vector)\n+\t(expand_builtin_apply_args_1, expand_builtin_apply)\n+\t(expand_builtin_return): Update accordingly.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* cse.c (hash_rtx_cb): Hash only the encoded elements."}, {"sha": "27ca135eeafae4496302214a091d80386c851513", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b660eccf9b32ee3b962a77cf5565fa2771792c35/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b660eccf9b32ee3b962a77cf5565fa2771792c35/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b660eccf9b32ee3b962a77cf5565fa2771792c35", "patch": "@@ -1364,7 +1364,6 @@ apply_args_size (void)\n   static int size = -1;\n   int align;\n   unsigned int regno;\n-  machine_mode mode;\n \n   /* The values computed by this function never change.  */\n   if (size < 0)\n@@ -1380,7 +1379,7 @@ apply_args_size (void)\n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \tif (FUNCTION_ARG_REGNO_P (regno))\n \t  {\n-\t    mode = targetm.calls.get_raw_arg_mode (regno);\n+\t    fixed_size_mode mode = targetm.calls.get_raw_arg_mode (regno);\n \n \t    gcc_assert (mode != VOIDmode);\n \n@@ -1392,7 +1391,7 @@ apply_args_size (void)\n \t  }\n \telse\n \t  {\n-\t    apply_args_mode[regno] = VOIDmode;\n+\t    apply_args_mode[regno] = as_a <fixed_size_mode> (VOIDmode);\n \t  }\n     }\n   return size;\n@@ -1406,7 +1405,6 @@ apply_result_size (void)\n {\n   static int size = -1;\n   int align, regno;\n-  machine_mode mode;\n \n   /* The values computed by this function never change.  */\n   if (size < 0)\n@@ -1416,7 +1414,7 @@ apply_result_size (void)\n       for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n \tif (targetm.calls.function_value_regno_p (regno))\n \t  {\n-\t    mode = targetm.calls.get_raw_result_mode (regno);\n+\t    fixed_size_mode mode = targetm.calls.get_raw_result_mode (regno);\n \n \t    gcc_assert (mode != VOIDmode);\n \n@@ -1427,7 +1425,7 @@ apply_result_size (void)\n \t    apply_result_mode[regno] = mode;\n \t  }\n \telse\n-\t  apply_result_mode[regno] = VOIDmode;\n+\t  apply_result_mode[regno] = as_a <fixed_size_mode> (VOIDmode);\n \n       /* Allow targets that use untyped_call and untyped_return to override\n \t the size so that machine-specific information can be stored here.  */\n@@ -1446,7 +1444,7 @@ static rtx\n result_vector (int savep, rtx result)\n {\n   int regno, size, align, nelts;\n-  machine_mode mode;\n+  fixed_size_mode mode;\n   rtx reg, mem;\n   rtx *savevec = XALLOCAVEC (rtx, FIRST_PSEUDO_REGISTER);\n \n@@ -1475,7 +1473,7 @@ expand_builtin_apply_args_1 (void)\n {\n   rtx registers, tem;\n   int size, align, regno;\n-  machine_mode mode;\n+  fixed_size_mode mode;\n   rtx struct_incoming_value = targetm.calls.struct_value_rtx (cfun ? TREE_TYPE (cfun->decl) : 0, 1);\n \n   /* Create a block where the arg-pointer, structure value address,\n@@ -1579,7 +1577,7 @@ static rtx\n expand_builtin_apply (rtx function, rtx arguments, rtx argsize)\n {\n   int size, align, regno;\n-  machine_mode mode;\n+  fixed_size_mode mode;\n   rtx incoming_args, result, reg, dest, src;\n   rtx_call_insn *call_insn;\n   rtx old_stack_level = 0;\n@@ -1740,7 +1738,7 @@ static void\n expand_builtin_return (rtx result)\n {\n   int size, align, regno;\n-  machine_mode mode;\n+  fixed_size_mode mode;\n   rtx reg;\n   rtx_insn *call_fusage = 0;\n "}, {"sha": "c9229049e21a2030775bfebeee9d34edd3c081c6", "filename": "gcc/builtins.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b660eccf9b32ee3b962a77cf5565fa2771792c35/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b660eccf9b32ee3b962a77cf5565fa2771792c35/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=b660eccf9b32ee3b962a77cf5565fa2771792c35", "patch": "@@ -29,14 +29,14 @@ struct target_builtins {\n      the register is not used for calling a function.  If the machine\n      has register windows, this gives only the outbound registers.\n      INCOMING_REGNO gives the corresponding inbound register.  */\n-  machine_mode x_apply_args_mode[FIRST_PSEUDO_REGISTER];\n+  fixed_size_mode_pod x_apply_args_mode[FIRST_PSEUDO_REGISTER];\n \n   /* For each register that may be used for returning values, this gives\n      a mode used to copy the register's value.  VOIDmode indicates the\n      register is not used for returning values.  If the machine has\n      register windows, this gives only the outbound registers.\n      INCOMING_REGNO gives the corresponding inbound register.  */\n-  machine_mode x_apply_result_mode[FIRST_PSEUDO_REGISTER];\n+  fixed_size_mode_pod x_apply_result_mode[FIRST_PSEUDO_REGISTER];\n };\n \n extern struct target_builtins default_target_builtins;"}, {"sha": "283b4eb33fe83a9bcc1825b1198b732571e5a59c", "filename": "gcc/coretypes.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b660eccf9b32ee3b962a77cf5565fa2771792c35/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b660eccf9b32ee3b962a77cf5565fa2771792c35/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=b660eccf9b32ee3b962a77cf5565fa2771792c35", "patch": "@@ -59,13 +59,15 @@ class scalar_mode;\n class scalar_int_mode;\n class scalar_float_mode;\n class complex_mode;\n+class fixed_size_mode;\n template<typename> class opt_mode;\n typedef opt_mode<scalar_mode> opt_scalar_mode;\n typedef opt_mode<scalar_int_mode> opt_scalar_int_mode;\n typedef opt_mode<scalar_float_mode> opt_scalar_float_mode;\n template<typename> class pod_mode;\n typedef pod_mode<scalar_mode> scalar_mode_pod;\n typedef pod_mode<scalar_int_mode> scalar_int_mode_pod;\n+typedef pod_mode<fixed_size_mode> fixed_size_mode_pod;\n \n /* Subclasses of rtx_def, using indentation to show the class\n    hierarchy, along with the relevant invariant."}]}