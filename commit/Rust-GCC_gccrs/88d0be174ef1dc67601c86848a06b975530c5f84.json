{"sha": "88d0be174ef1dc67601c86848a06b975530c5f84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhkMGJlMTc0ZWYxZGM2NzYwMWM4Njg0OGEwNmI5NzU1MzBjNWY4NA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-10-02T03:49:09Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-10-02T03:49:09Z"}, "message": "re PR middle-end/7151 ([sparc] ICE when compiling for UltraSPARC)\n\n2002-09-30  David S. Miller  <davem@redhat.com>\n\n\tPR middle-end/7151\n\t* config/sparc/sparc.md (movdi_insn_sp32_v9): Accept 'e' regs.\n\t(movdi reg/reg split): Match only on sparc32, and v9 when int regs.\n\nFrom-SVN: r57723", "tree": {"sha": "f7549c185685e7009d466b7bdb96bad2f64a5a9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7549c185685e7009d466b7bdb96bad2f64a5a9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88d0be174ef1dc67601c86848a06b975530c5f84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d0be174ef1dc67601c86848a06b975530c5f84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88d0be174ef1dc67601c86848a06b975530c5f84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88d0be174ef1dc67601c86848a06b975530c5f84/comments", "author": null, "committer": null, "parents": [{"sha": "f10aac290a4ef3806f3f4aa55ac62fe417d3fcfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10aac290a4ef3806f3f4aa55ac62fe417d3fcfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10aac290a4ef3806f3f4aa55ac62fe417d3fcfd"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "9a5c5e9c7e8bf12b76d586aca434595eb40cc297", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d0be174ef1dc67601c86848a06b975530c5f84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d0be174ef1dc67601c86848a06b975530c5f84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88d0be174ef1dc67601c86848a06b975530c5f84", "patch": "@@ -1,3 +1,9 @@\n+2002-09-30  David S. Miller  <davem@redhat.com>\n+\n+\tPR middle-end/7151\n+\t* config/sparc/sparc.md (movdi_insn_sp32_v9): Accept 'e' regs.\n+\t(movdi reg/reg split): Match only on sparc32, and v9 when int regs.\n+\n 2002-10-01  Roger Sayle  <roger@eyesopen.com>\n \n \t* unroll.c (loop_iterations): Revert 2002-09-08 change."}, {"sha": "4024290d436bed2520a484cd2e72bf6d217443d5", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88d0be174ef1dc67601c86848a06b975530c5f84/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88d0be174ef1dc67601c86848a06b975530c5f84/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=88d0be174ef1dc67601c86848a06b975530c5f84", "patch": "@@ -2048,7 +2048,7 @@\n   ;\n })\n \n-;; Be careful, fmovd does not exist when !arch64.\n+;; Be careful, fmovd does not exist when !v9.\n ;; We match MEM moves directly when we have correct even\n ;; numbered registers, but fall into splits otherwise.\n ;; The constraint ordering here is really important to\n@@ -2062,9 +2062,9 @@\n \n (define_insn \"*movdi_insn_sp32_v9\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\t\t\t\"=T,o,T,U,o,r,r,r,?T,?f,?f,?o,?f\")\n+\t\t\t\t\t\"=T,o,T,U,o,r,r,r,?T,?f,?f,?o,?f,?e,?e,?W\")\n         (match_operand:DI 1 \"input_operand\"\n-\t\t\t\t\t\" J,J,U,T,r,o,i,r, f, T, o, f, f\"))]\n+\t\t\t\t\t\" J,J,U,T,r,o,i,r, f, T, o, f, f, e, W, e\"))]\n   \"! TARGET_ARCH64 && TARGET_V9\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n   \"@\n@@ -2080,9 +2080,13 @@\n    ldd\\t%1, %0\n    #\n    #\n-   #\"\n-  [(set_attr \"type\" \"store,store,store,load,*,*,*,*,fpstore,fpload,*,*,*\")\n-   (set_attr \"length\" \"*,2,*,*,2,2,2,2,*,*,2,2,2\")])\n+   #\n+   fmovd\\\\t%1, %0\n+   ldd\\\\t%1, %0\n+   std\\\\t%1, %0\"\n+  [(set_attr \"type\" \"store,store,store,load,*,*,*,*,fpstore,fpload,*,*,*,fpmove,fpload,fpstore\")\n+   (set_attr \"length\" \"*,2,*,*,2,2,2,2,*,*,2,2,2,*,*,*\")\n+   (set_attr \"fptype\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,double,*,*\")])\n \n (define_insn \"*movdi_insn_sp32\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n@@ -2388,7 +2392,14 @@\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (match_operand:DI 1 \"const_double_operand\" \"\"))]\n-  \"! TARGET_ARCH64 && reload_completed\"\n+  \"reload_completed\n+   && (! TARGET_V9\n+       || (! TARGET_ARCH64\n+           && ((GET_CODE (operands[0]) == REG\n+                && REGNO (operands[0]) < 32)\n+               || (GET_CODE (operands[0]) == SUBREG\n+                   && GET_CODE (SUBREG_REG (operands[0])) == REG\n+                   && REGNO (SUBREG_REG (operands[0])) < 32))))\"\n   [(clobber (const_int 0))]\n {\n   emit_insn (gen_movsi (gen_highpart (SImode, operands[0]),"}]}