{"sha": "04dce5a4f3ac2430bfa963586311561ef334c33f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRkY2U1YTRmM2FjMjQzMGJmYTk2MzU4NjMxMTU2MWVmMzM0YzMzZg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2006-05-19T13:24:42Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-05-19T13:24:42Z"}, "message": "tree-vrp.c (valid_value_p): New function.\n\n\t* tree-vrp.c (valid_value_p): New function.\n\t(adjust_range_with_scev): Fail if the value of bound is not\n\tsimple.\n\nFrom-SVN: r113907", "tree": {"sha": "a6dc9b7cbb0c8a19f54212a3a908fc7cbcf5c7cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6dc9b7cbb0c8a19f54212a3a908fc7cbcf5c7cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04dce5a4f3ac2430bfa963586311561ef334c33f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04dce5a4f3ac2430bfa963586311561ef334c33f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04dce5a4f3ac2430bfa963586311561ef334c33f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04dce5a4f3ac2430bfa963586311561ef334c33f/comments", "author": null, "committer": null, "parents": [{"sha": "fa807ff666ce3d32cd2e175c7ea97fb9be15c8b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa807ff666ce3d32cd2e175c7ea97fb9be15c8b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa807ff666ce3d32cd2e175c7ea97fb9be15c8b2"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "f8a4de183c054282fcd6ea8cba28bf08c901d24c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04dce5a4f3ac2430bfa963586311561ef334c33f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04dce5a4f3ac2430bfa963586311561ef334c33f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04dce5a4f3ac2430bfa963586311561ef334c33f", "patch": "@@ -1,3 +1,9 @@\n+2006-05-19  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* tree-vrp.c (valid_value_p): New function.\n+\t(adjust_range_with_scev): Fail if the value of bound is not\n+\tsimple.\n+\n 2006-05-19  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/linux-unwind.h: Include <asm/unistd.h>"}, {"sha": "1734d44eccfa649e5a5f8fefb3d4e61996cc626b", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04dce5a4f3ac2430bfa963586311561ef334c33f/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04dce5a4f3ac2430bfa963586311561ef334c33f/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=04dce5a4f3ac2430bfa963586311561ef334c33f", "patch": "@@ -409,6 +409,22 @@ vrp_expr_computes_nonzero (tree expr)\n   return false;\n }\n \n+/* Returns true if EXPR is a valid value (as expected by compare_values) --\n+   a gimple invariant, or SSA_NAME +- CST.  */\n+\n+static bool\n+valid_value_p (tree expr)\n+{\n+  if (TREE_CODE (expr) == SSA_NAME)\n+    return true;\n+\n+  if (TREE_CODE (expr) == PLUS_EXPR\n+      || TREE_CODE (expr) == MINUS_EXPR)\n+    return (TREE_CODE (TREE_OPERAND (expr, 0)) == SSA_NAME\n+\t    && TREE_CODE (TREE_OPERAND (expr, 1)) == INTEGER_CST);\n+  \n+  return is_gimple_min_invariant (expr);\n+}\n \n /* Compare two values VAL1 and VAL2.  Return\n    \n@@ -1974,9 +1990,12 @@ adjust_range_with_scev (value_range_t *vr, struct loop *loop, tree stmt,\n   step = evolution_part_in_loop_num (chrec, loop->num);\n \n   /* If STEP is symbolic, we can't know whether INIT will be the\n-     minimum or maximum value in the range.  */\n+     minimum or maximum value in the range.  Also, unless INIT is\n+     a simple expression, compare_values and possibly other functions\n+     in tree-vrp won't be able to handle it.  */\n   if (step == NULL_TREE\n-      || !is_gimple_min_invariant (step))\n+      || !is_gimple_min_invariant (step)\n+      || !valid_value_p (init))\n     return;\n \n   /* Do not adjust ranges when chrec may wrap.  */"}]}