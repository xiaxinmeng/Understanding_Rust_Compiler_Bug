{"sha": "d38f6bc03eaaad33870a9bdb802c4568890ced65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM4ZjZiYzAzZWFhYWQzMzg3MGE5YmRiODAyYzQ1Njg4OTBjZWQ2NQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2010-04-19T09:32:16Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2010-04-19T09:32:16Z"}, "message": "re PR c++/43704 (ICE: tree check: accessed elt 2 of tree_vec with 1 elts in tsubst, at cp/pt.c:10074)\n\nFix PR c++/43704\n\ngcc/cp/ChangeLog:\n\tPR c++/43704\n\t* typeck.c (structural_comptypes): Test dependent typedefs\n\tincompatibility before testing for their main variant based\n\tequivalence.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/43704\n\t* g++.dg/template/typedef32.C: New test.\n\nFrom-SVN: r158508", "tree": {"sha": "eab48f4b4a03de8b290d3f948707c562ba420111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eab48f4b4a03de8b290d3f948707c562ba420111"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d38f6bc03eaaad33870a9bdb802c4568890ced65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38f6bc03eaaad33870a9bdb802c4568890ced65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d38f6bc03eaaad33870a9bdb802c4568890ced65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38f6bc03eaaad33870a9bdb802c4568890ced65/comments", "author": null, "committer": null, "parents": [{"sha": "b5aeb3bb3e9d1a0ce78fe2d7de9f510a7413605d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5aeb3bb3e9d1a0ce78fe2d7de9f510a7413605d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5aeb3bb3e9d1a0ce78fe2d7de9f510a7413605d"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "64a440d3ee3101f31dab324d7124cfadd01ff420", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38f6bc03eaaad33870a9bdb802c4568890ced65/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38f6bc03eaaad33870a9bdb802c4568890ced65/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d38f6bc03eaaad33870a9bdb802c4568890ced65", "patch": "@@ -1,3 +1,10 @@\n+2010-04-19  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/43704\n+\t* typeck.c (structural_comptypes): Test dependent typedefs\n+\tincompatibility before testing for their main variant based\n+\tequivalence.\n+\n 2010-04-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cp-tree.h (SCOPED_ENUM_P, UNSCOPED_ENUM_P, SET_SCOPED_ENUM_P): Use"}, {"sha": "c43cf331c9730df708bce7a526247040dd41a579", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38f6bc03eaaad33870a9bdb802c4568890ced65/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38f6bc03eaaad33870a9bdb802c4568890ced65/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d38f6bc03eaaad33870a9bdb802c4568890ced65", "patch": "@@ -1236,6 +1236,12 @@ structural_comptypes (tree t1, tree t2, int strict)\n   if (TYPE_FOR_JAVA (t1) != TYPE_FOR_JAVA (t2))\n     return false;\n \n+  /* If T1 and T2 are dependent typedefs then check upfront that\n+     the template parameters of their typedef DECLs match before\n+     going down checking their subtypes.  */\n+  if (incompatible_dependent_types_p (t1, t2))\n+    return false;\n+\n   /* Allow for two different type nodes which have essentially the same\n      definition.  Note that we already checked for equality of the type\n      qualifiers (just above).  */\n@@ -1244,11 +1250,6 @@ structural_comptypes (tree t1, tree t2, int strict)\n       && TYPE_MAIN_VARIANT (t1) == TYPE_MAIN_VARIANT (t2))\n     return true;\n \n-  /* If T1 and T2 are dependent typedefs then check upfront that\n-     the template parameters of their typedef DECLs match before\n-     going down checking their subtypes.  */\n-  if (incompatible_dependent_types_p (t1, t2))\n-    return false;\n \n   /* Compare the types.  Break out if they could be the same.  */\n   switch (TREE_CODE (t1))"}, {"sha": "8215f8363b899901abdc4f624bd6e9ea2dbdc6e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38f6bc03eaaad33870a9bdb802c4568890ced65/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38f6bc03eaaad33870a9bdb802c4568890ced65/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d38f6bc03eaaad33870a9bdb802c4568890ced65", "patch": "@@ -1,3 +1,8 @@\n+2010-04-19  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/43704\n+\t* g++.dg/template/typedef32.C: New test.\n+\n 2010-04-19 Ira Rosen <irar@il.ibm.com>\n \n \tPR tree-optimization/37027\t"}, {"sha": "b3c4b90228fce3e4b11a3b8c83c6f7d56593e5ca", "filename": "gcc/testsuite/g++.dg/template/typedef32.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38f6bc03eaaad33870a9bdb802c4568890ced65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38f6bc03eaaad33870a9bdb802c4568890ced65/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef32.C?ref=d38f6bc03eaaad33870a9bdb802c4568890ced65", "patch": "@@ -0,0 +1,45 @@\n+// Origin: PR c++/43704\n+// { dg-do compile }\n+\n+template<typename T2, typename T3>\n+struct if_\n+{\n+ typedef T2 type;\n+};\n+\n+template<class I1>\n+struct iterator_restrict_traits\n+{\n+};\n+\n+template<class T>\n+class matrix\n+{\n+ class ci {};\n+ class i {};\n+};\n+\n+template<class M, class TRI>\n+struct triangular_adaptor\n+{\n+   typedef typename if_<typename M::ci,typename M::i>::type ty1;\n+   class iterator2 :  iterator_restrict_traits<typename ty1::ic>::iterator_category\n+   {\n+   };\n+};\n+\n+template<class M>\n+struct banded_adaptor\n+{\n+  typedef typename if_<typename M::ci,typename M::i>::type ty1;\n+  class iterator1 :  iterator_restrict_traits<typename ty1::ic>::iterator_category\n+  {\n+  };\n+};\n+\n+template<class T>\n+struct singular_decomposition\n+{\n+  banded_adaptor<matrix<double> >::iterator1 it1;\n+};\n+"}]}