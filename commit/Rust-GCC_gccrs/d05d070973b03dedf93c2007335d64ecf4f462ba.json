{"sha": "d05d070973b03dedf93c2007335d64ecf4f462ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA1ZDA3MDk3M2IwM2RlZGY5M2MyMDA3MzM1ZDY0ZWNmNGY0NjJiYQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-07-20T07:56:41Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-07-20T07:56:41Z"}, "message": "[AArch64] Rewrite vabs<q>_s<8,16,32,64> AdvSIMD intrinsics to fold to tree\n\ngcc/\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_fold_builtin): Fold abs in all modes.\n\t* config/aarch64/aarch64-simd-builtins.def\n\t(abs): Enable for all modes.\n\t* config/aarch64/arm_neon.h\n\t(vabs<q>_s<8,16,32,64): Rewrite using builtins.\n\t(vabs_f64): Add missing intrinsic.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/vabs_intrinsic_1.c: New file.\n\nFrom-SVN: r201083", "tree": {"sha": "58d7089f06a85417607888f88459db109f4cba8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58d7089f06a85417607888f88459db109f4cba8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d05d070973b03dedf93c2007335d64ecf4f462ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d05d070973b03dedf93c2007335d64ecf4f462ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d05d070973b03dedf93c2007335d64ecf4f462ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d05d070973b03dedf93c2007335d64ecf4f462ba/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a29a1b527b8dd272523b4f70c2df12ec928da81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a29a1b527b8dd272523b4f70c2df12ec928da81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a29a1b527b8dd272523b4f70c2df12ec928da81"}], "stats": {"total": 244, "additions": 165, "deletions": 79}, "files": [{"sha": "b457e6cdd5c197212f30a3d947e51f309db6f2c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05d070973b03dedf93c2007335d64ecf4f462ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05d070973b03dedf93c2007335d64ecf4f462ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d05d070973b03dedf93c2007335d64ecf4f462ba", "patch": "@@ -1,3 +1,13 @@\n+2013-07-20  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c\n+\t(aarch64_fold_builtin): Fold abs in all modes.\n+\t* config/aarch64/aarch64-simd-builtins.def\n+\t(abs): Enable for all modes.\n+\t* config/aarch64/arm_neon.h\n+\t(vabs<q>_s<8,16,32,64): Rewrite using builtins.\n+\t(vabs_f64): Add missing intrinsic.\n+\n 2013-07-19  Ian Bolton  <ian.bolton@arm.com>\n \n \t* config/aarch64/arm_neon.h (vabs_s64): New function"}, {"sha": "6816b9cfdaabb3c3d71a7e3a3bf3d36d563cf567", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05d070973b03dedf93c2007335d64ecf4f462ba/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05d070973b03dedf93c2007335d64ecf4f462ba/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=d05d070973b03dedf93c2007335d64ecf4f462ba", "patch": "@@ -1325,7 +1325,7 @@ aarch64_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *args,\n \n   switch (fcode)\n     {\n-      BUILTIN_VDQF (UNOP, abs, 2)\n+      BUILTIN_VALLDI (UNOP, abs, 2)\n \treturn fold_build1 (ABS_EXPR, type, args[0]);\n \tbreak;\n       BUILTIN_VALLDI (BINOP, cmge, 0)"}, {"sha": "55dead6e404f70a5162f80e38711a91e23d83497", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05d070973b03dedf93c2007335d64ecf4f462ba/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05d070973b03dedf93c2007335d64ecf4f462ba/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=d05d070973b03dedf93c2007335d64ecf4f462ba", "patch": "@@ -347,7 +347,7 @@\n   BUILTIN_VDQF (UNOP, frecpe, 0)\n   BUILTIN_VDQF (BINOP, frecps, 0)\n \n-  BUILTIN_VDQF (UNOP, abs, 2)\n+  BUILTIN_VALLDI (UNOP, abs, 2)\n \n   VAR1 (UNOP, vec_unpacks_hi_, 10, v4sf)\n   VAR1 (BINOP, float_truncate_hi_, 0, v4sf)"}, {"sha": "99cf123e29ed0ff220ff6d9f72e556437797e06a", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 48, "deletions": 77, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05d070973b03dedf93c2007335d64ecf4f462ba/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05d070973b03dedf93c2007335d64ecf4f462ba/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=d05d070973b03dedf93c2007335d64ecf4f462ba", "patch": "@@ -4468,83 +4468,6 @@ vabds_f32 (float32_t a, float32_t b)\n   return result;\n }\n \n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-vabs_s8 (int8x8_t a)\n-{\n-  int8x8_t result;\n-  __asm__ (\"abs %0.8b,%1.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-vabs_s16 (int16x4_t a)\n-{\n-  int16x4_t result;\n-  __asm__ (\"abs %0.4h,%1.4h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-vabs_s32 (int32x2_t a)\n-{\n-  int32x2_t result;\n-  __asm__ (\"abs %0.2s,%1.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n-vabsq_s8 (int8x16_t a)\n-{\n-  int8x16_t result;\n-  __asm__ (\"abs %0.16b,%1.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n-vabsq_s16 (int16x8_t a)\n-{\n-  int16x8_t result;\n-  __asm__ (\"abs %0.8h,%1.8h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n-vabsq_s32 (int32x4_t a)\n-{\n-  int32x4_t result;\n-  __asm__ (\"abs %0.4s,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n-vabsq_s64 (int64x2_t a)\n-{\n-  int64x2_t result;\n-  __asm__ (\"abs %0.2d,%1.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline int16_t __attribute__ ((__always_inline__))\n vaddlv_s8 (int8x8_t a)\n {\n@@ -17395,6 +17318,30 @@ vabs_f32 (float32x2_t __a)\n   return __builtin_aarch64_absv2sf (__a);\n }\n \n+__extension__ static __inline float64x1_t __attribute__ ((__always_inline__))\n+vabs_f64 (float64x1_t __a)\n+{\n+  return __builtin_fabs (__a);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+vabs_s8 (int8x8_t __a)\n+{\n+  return __builtin_aarch64_absv8qi (__a);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vabs_s16 (int16x4_t __a)\n+{\n+  return __builtin_aarch64_absv4hi (__a);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vabs_s32 (int32x2_t __a)\n+{\n+  return __builtin_aarch64_absv2si (__a);\n+}\n+\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vabs_s64 (int64x1_t __a)\n {\n@@ -17413,6 +17360,30 @@ vabsq_f64 (float64x2_t __a)\n   return __builtin_aarch64_absv2df (__a);\n }\n \n+__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n+vabsq_s8 (int8x16_t __a)\n+{\n+  return __builtin_aarch64_absv16qi (__a);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vabsq_s16 (int16x8_t __a)\n+{\n+  return __builtin_aarch64_absv8hi (__a);\n+}\n+\n+__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n+vabsq_s32 (int32x4_t __a)\n+{\n+  return __builtin_aarch64_absv4si (__a);\n+}\n+\n+__extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n+vabsq_s64 (int64x2_t __a)\n+{\n+  return __builtin_aarch64_absv2di (__a);\n+}\n+\n /* vadd */\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))"}, {"sha": "ae3b789ff429871cc53f05f279065638f63a6fd1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05d070973b03dedf93c2007335d64ecf4f462ba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05d070973b03dedf93c2007335d64ecf4f462ba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d05d070973b03dedf93c2007335d64ecf4f462ba", "patch": "@@ -1,3 +1,7 @@\n+2013-07-20  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/vabs_intrinsic_1.c: New file.\n+\n 2013-07-20  Joern Rennecke <joern.rennecke@embecosm.com>\n \n \t* gcc.dg/pr57154.c: Add dg-require-effective-target scheduling."}, {"sha": "b34738c00a0ad51583feb57a703570a45c18a81b", "filename": "gcc/testsuite/gcc.target/aarch64/vabs_intrinsic_1.c", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d05d070973b03dedf93c2007335d64ecf4f462ba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvabs_intrinsic_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d05d070973b03dedf93c2007335d64ecf4f462ba/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvabs_intrinsic_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvabs_intrinsic_1.c?ref=d05d070973b03dedf93c2007335d64ecf4f462ba", "patch": "@@ -0,0 +1,101 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+\n+#define ETYPE(size) int##size##_t\n+#define VTYPE(size, lanes) int##size##x##lanes##_t\n+\n+#define TEST_VABS(q, size, lanes)\t\t\t\t\\\n+static void\t\t\t\t\t\t\t\\\n+test_vabs##q##_##size (ETYPE (size) * res,\t\t\t\\\n+\t\t\tconst ETYPE (size) *in1)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  VTYPE (size, lanes) a = vld1##q##_s##size (res);\t\t\\\n+  VTYPE (size, lanes) b = vld1##q##_s##size (in1);\t\t\\\n+  a = vabs##q##_s##size (b);\t\t\t\t\t\\\n+  vst1##q##_s##size (res, a);\t\t\t\t\t\\\n+}\n+\n+#define BUILD_VARS(width, n_lanes, n_half_lanes)\t\t\\\n+TEST_VABS (, width, n_half_lanes)\t\t\t\t\\\n+TEST_VABS (q, width, n_lanes)\t\t\t\t\t\\\n+\n+BUILD_VARS (64, 2, 1)\n+BUILD_VARS (32, 4, 2)\n+BUILD_VARS (16, 8, 4)\n+BUILD_VARS (8, 16, 8)\n+\n+#define POOL1  {-10}\n+#define POOL2  {2, -10}\n+#define POOL4  {0, -10, 2, -3}\n+#define POOL8  {0, -10, 2, -3, 4, -50, 6, -70}\n+#define POOL16 {0, -10, 2, -3, 4, -50, 6, -70,\t\t\t\\\n+\t\t-5, 10, -2, 3, -4, 50, -6, 70}\n+\n+#define EXPECTED1  {10}\n+#define EXPECTED2  {2, 10}\n+#define EXPECTED4  {0, 10, 2, 3}\n+#define EXPECTED8  {0, 10, 2, 3, 4, 50, 6, 70}\n+#define EXPECTED16 {0, 10, 2, 3, 4, 50, 6, 70,\t\t\t\\\n+\t\t    5, 10, 2, 3, 4, 50, 6, 70}\n+\n+#define BUILD_TEST(size, lanes_64, lanes_128)\t\t\t\\\n+static void\t\t\t\t\t\t\t\\\n+test_##size (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  ETYPE (size) pool1[lanes_64] = POOL##lanes_64;\t\t\\\n+  ETYPE (size) res1[lanes_64] = {0};\t\t\t\t\\\n+  ETYPE (size) expected1[lanes_64] = EXPECTED##lanes_64;\t\\\n+  ETYPE (size) pool2[lanes_128] = POOL##lanes_128;\t\t\\\n+  ETYPE (size) res2[lanes_128] = {0};\t\t\t\t\\\n+  ETYPE (size) expected2[lanes_128] = EXPECTED##lanes_128;\t\\\n+\t\t\t\t\t\t\t\t\\\n+  /* Forcefully avoid optimization.  */\t\t\t\t\\\n+  asm volatile (\"\" : : : \"memory\");\t\t\t\t\\\n+  test_vabs_##size (res1, pool1);\t\t\t\t\\\n+  for (i = 0; i < lanes_64; i++)\t\t\t\t\\\n+    if (res1[i] != expected1[i])\t\t\t\t\\\n+      abort ();\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+  /* Forcefully avoid optimization.  */\t\t\t\t\\\n+  asm volatile (\"\" : : : \"memory\");\t\t\t\t\\\n+  test_vabsq_##size (res2, pool2);\t\t\t\t\\\n+  for (i = 0; i < lanes_128; i++)\t\t\t\t\\\n+    if (res2[i] != expected2[i])\t\t\t\t\\\n+      abort ();\t\t\t\t\t\t\t\\\n+}\n+\n+/* { dg-final { scan-assembler-times \"abs\\\\tv\\[0-9\\]+\\.8b, v\\[0-9\\]+\\.8b\" 1 } } */\n+/* { dg-final { scan-assembler-times \"abs\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 1 } } */\n+BUILD_TEST (8 , 8, 16)\n+\n+/* { dg-final { scan-assembler-times \"abs\\\\tv\\[0-9\\]+\\.4h, v\\[0-9\\]+\\.4h\" 1 } } */\n+/* { dg-final { scan-assembler-times \"abs\\\\tv\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.8h\" 1 } } */\n+BUILD_TEST (16, 4, 8)\n+\n+/* { dg-final { scan-assembler-times \"abs\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" 1 } } */\n+/* { dg-final { scan-assembler-times \"abs\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" 1 } } */\n+BUILD_TEST (32, 2, 4)\n+\n+/* { dg-final { scan-assembler-times \"abs\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" 1 } } */\n+BUILD_TEST (64, 1, 2)\n+\n+#undef BUILD_TEST\n+\n+#define BUILD_TEST(size) test_##size ()\n+\n+int\n+main (int argc, char **argv)\n+{\n+  BUILD_TEST (8);\n+  BUILD_TEST (16);\n+  BUILD_TEST (32);\n+  BUILD_TEST (64);\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}