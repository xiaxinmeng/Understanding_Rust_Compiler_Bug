{"sha": "a65b9ad863c5fc0aea12db58557f4d286a1974d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY1YjlhZDg2M2M1ZmMwYWVhMTJkYjU4NTU3ZjRkMjg2YTE5NzRkNw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-22T21:24:41Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-22T21:24:41Z"}, "message": "aarch64: Add internal tune flag to minimise VL-based scalar ops\n\nThis patch introduces an internal tune flag to break up VL-based scalar ops\ninto a GP-reg scalar op with the VL read kept separate. This can be preferable on some CPUs.\n\nI went for a tune param rather than extending the rtx costs as our RTX costs tables aren't set up to track\nthis intricacy.\n\nI've confirmed that on the simple loop:\nvoid vadd (int *dst, int *op1, int *op2, int count)\n{\n  for (int i = 0; i < count; ++i)\n    dst[i] = op1[i] + op2[i];\n}\n\nwe now split the incw into a cntw outside the loop and the add inside.\n\n+       cntw    x5\n...\nloop:\n-       incw    x4\n+       add     x4, x4, x5\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-tuning-flags.def (cse_sve_vl_constants):\n\tDefine.\n\t* config/aarch64/aarch64.md (add<mode>3): Force CONST_POLY_INT immediates\n\tinto a register when the above is enabled.\n\t* config/aarch64/aarch64.c (neoversev1_tunings):\n\tAARCH64_EXTRA_TUNE_CSE_SVE_VL_CONSTANTS.\n\t(aarch64_rtx_costs): Use AARCH64_EXTRA_TUNE_CSE_SVE_VL_CONSTANTS.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/sve/cse_sve_vl_constants_1.c: New test.", "tree": {"sha": "388caa27fcb281d2a4b2c2f4de839b5eb322c713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/388caa27fcb281d2a4b2c2f4de839b5eb322c713"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a65b9ad863c5fc0aea12db58557f4d286a1974d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a65b9ad863c5fc0aea12db58557f4d286a1974d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a65b9ad863c5fc0aea12db58557f4d286a1974d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a65b9ad863c5fc0aea12db58557f4d286a1974d7/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "692ba083d9a22aaa08c8a3700d0237db8c922dc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/692ba083d9a22aaa08c8a3700d0237db8c922dc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/692ba083d9a22aaa08c8a3700d0237db8c922dc4"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "588edf4d92360bc3346ed40b782822b5c3c3f00d", "filename": "gcc/config/aarch64/aarch64-tuning-flags.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a65b9ad863c5fc0aea12db58557f4d286a1974d7/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a65b9ad863c5fc0aea12db58557f4d286a1974d7/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def?ref=a65b9ad863c5fc0aea12db58557f4d286a1974d7", "patch": "@@ -46,4 +46,6 @@ AARCH64_EXTRA_TUNING_OPTION (\"no_ldp_stp_qregs\", NO_LDP_STP_QREGS)\n \n AARCH64_EXTRA_TUNING_OPTION (\"rename_load_regs\", RENAME_LOAD_REGS)\n \n+AARCH64_EXTRA_TUNING_OPTION (\"cse_sve_vl_constants\", CSE_SVE_VL_CONSTANTS)\n+\n #undef AARCH64_EXTRA_TUNING_OPTION"}, {"sha": "69976698372acb3c27acc028b2216276b1af8864", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a65b9ad863c5fc0aea12db58557f4d286a1974d7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a65b9ad863c5fc0aea12db58557f4d286a1974d7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=a65b9ad863c5fc0aea12db58557f4d286a1974d7", "patch": "@@ -1492,7 +1492,7 @@ static const struct tune_params neoversev1_tunings =\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE),\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_CSE_SVE_VL_CONSTANTS),\t/* tune_flags.  */\n   &generic_prefetch_tune\n };\n \n@@ -12589,8 +12589,18 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \t    *cost += rtx_cost (op0, mode, PLUS, 0, speed);\n \n \t    if (speed)\n-\t      /* ADD (immediate).  */\n-\t      *cost += extra_cost->alu.arith;\n+\t      {\n+\t\t/* ADD (immediate).  */\n+\t\t*cost += extra_cost->alu.arith;\n+\n+\t\t/* Some tunings prefer to not use the VL-based scalar ops.\n+\t\t   Increase the cost of the poly immediate to prevent their\n+\t\t   formation.  */\n+\t\tif (GET_CODE (op1) == CONST_POLY_INT\n+\t\t    && (aarch64_tune_params.extra_tuning_flags\n+\t\t\t& AARCH64_EXTRA_TUNE_CSE_SVE_VL_CONSTANTS))\n+\t\t  *cost += COSTS_N_INSNS (1);\n+\t      }\n \t    return true;\n \t  }\n "}, {"sha": "65d00c4f1121e3dbb1259b3cd960b7bea8e630f3", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a65b9ad863c5fc0aea12db58557f4d286a1974d7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a65b9ad863c5fc0aea12db58557f4d286a1974d7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=a65b9ad863c5fc0aea12db58557f4d286a1974d7", "patch": "@@ -1933,6 +1933,14 @@\n       && (!REG_P (op1)\n \t || !REGNO_PTR_FRAME_P (REGNO (op1))))\n     operands[2] = force_reg (<MODE>mode, operands[2]);\n+  /* Some tunings prefer to avoid VL-based operations.\n+     Split off the poly immediate here.  The rtx costs hook will reject attempts\n+     to combine them back.  */\n+  else if (GET_CODE (operands[2]) == CONST_POLY_INT\n+\t   && can_create_pseudo_p ()\n+\t   && (aarch64_tune_params.extra_tuning_flags\n+\t       & AARCH64_EXTRA_TUNE_CSE_SVE_VL_CONSTANTS))\n+    operands[2] = force_reg (<MODE>mode, operands[2]);\n   /* Expand polynomial additions now if the destination is the stack\n      pointer, since we don't want to use that as a temporary.  */\n   else if (operands[0] == stack_pointer_rtx"}, {"sha": "dd04b667ee70a6c9295e2a789d9efd4f39677d4a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cse_sve_vl_constants_1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a65b9ad863c5fc0aea12db58557f4d286a1974d7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcse_sve_vl_constants_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a65b9ad863c5fc0aea12db58557f4d286a1974d7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcse_sve_vl_constants_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcse_sve_vl_constants_1.c?ref=a65b9ad863c5fc0aea12db58557f4d286a1974d7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -moverride=tune=cse_sve_vl_constants\" } */\n+\n+void __attribute__((noinline, noclone))\n+vadd (int *dst, int *op1, int *op2, int count)\n+{\n+  for (int i = 0; i < count; ++i)\n+    dst[i] = op1[i] + op2[i];\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tincw\\tx[0-9]+} } } */\n+"}]}