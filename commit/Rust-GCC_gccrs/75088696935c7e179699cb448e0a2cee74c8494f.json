{"sha": "75088696935c7e179699cb448e0a2cee74c8494f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUwODg2OTY5MzVjN2UxNzk2OTljYjQ0OGUwYTJjZWU3NGM4NDk0Zg==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2019-07-25T14:24:41Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2019-07-25T14:24:41Z"}, "message": "Fix low reg issue in Thumb-2 movsi patterns\n\nThe Thumb-2 movsi patterns try to prefer low registers for loads and stores.\nHowever this is done incorrectly by using 2 separate variants with 'l' and 'h'\nregister classes.  The register allocator will only use low registers, and\nas a result we end up with significantly more spills and moves to high\nregisters.  Fix this by merging the alternatives and use 'l*r' to indicate\npreference for low registers.  This saves ~400 instructions from the pr77308\ntestcase.\n\n    gcc/\n\t* config/arm/thumb2.md (thumb2_movsi_insn): Fix load/store low reg.\n\t* config/arm/vfp.md (thumb2_movsi_vfp): Likewise.\n\nFrom-SVN: r273802", "tree": {"sha": "4959abd461882dadbc9c5b579594de46054e71b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4959abd461882dadbc9c5b579594de46054e71b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75088696935c7e179699cb448e0a2cee74c8494f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75088696935c7e179699cb448e0a2cee74c8494f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75088696935c7e179699cb448e0a2cee74c8494f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75088696935c7e179699cb448e0a2cee74c8494f/comments", "author": null, "committer": null, "parents": [{"sha": "2fc233b73189dd0664fb1cb95865fc5a14396e1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fc233b73189dd0664fb1cb95865fc5a14396e1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fc233b73189dd0664fb1cb95865fc5a14396e1f"}], "stats": {"total": 49, "additions": 25, "deletions": 24}, "files": [{"sha": "1155e4eeb0c7b4b7c30f0a457c504ecea0247086", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75088696935c7e179699cb448e0a2cee74c8494f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75088696935c7e179699cb448e0a2cee74c8494f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75088696935c7e179699cb448e0a2cee74c8494f", "patch": "@@ -1,3 +1,8 @@\n+2019-07-25  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/arm/thumb2.md (thumb2_movsi_insn): Fix load/store low reg.\n+\t* config/arm/vfp.md (thumb2_movsi_vfp): Likewise.\n+\n 2019-07-23  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-devirt.c (add_type_duplicate): Fix return value."}, {"sha": "a4e094f67c6950d67d09040fdc19d285bbd7475b", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75088696935c7e179699cb448e0a2cee74c8494f/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75088696935c7e179699cb448e0a2cee74c8494f/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=75088696935c7e179699cb448e0a2cee74c8494f", "patch": "@@ -247,8 +247,8 @@\n ;; regs.  The high register alternatives are not taken into account when\n ;; choosing register preferences in order to reflect their expense.\n (define_insn \"*thumb2_movsi_insn\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,l,r,r,l ,*hk,m,*m\")\n-\t(match_operand:SI 1 \"general_operand\"\t   \"rk,I,Py,K,j,mi,*mi,l,*hk\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,l,r,r,lk*r,m\")\n+\t(match_operand:SI 1 \"general_operand\"\t   \"rk,I,Py,K,j,mi,lk*r\"))]\n   \"TARGET_THUMB2 && !TARGET_IWMMXT && !TARGET_HARD_FLOAT\n    && (   register_operand (operands[0], SImode)\n        || register_operand (operands[1], SImode))\"\n@@ -262,22 +262,20 @@\n     case 3: return \\\"mvn%?\\\\t%0, #%B1\\\";\n     case 4: return \\\"movw%?\\\\t%0, %1\\\";\n     case 5:\n-    case 6:\n       /* Cannot load it directly, split to load it via MOV / MOVT.  */\n       if (!MEM_P (operands[1]) && arm_disable_literal_pool)\n \treturn \\\"#\\\";\n       return \\\"ldr%?\\\\t%0, %1\\\";\n-    case 7:\n-    case 8: return \\\"str%?\\\\t%1, %0\\\";\n+    case 6: return \\\"str%?\\\\t%1, %0\\\";\n     default: gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"mov_reg,mov_imm,mov_imm,mvn_imm,mov_imm,load_4,load_4,store_4,store_4\")\n-   (set_attr \"length\" \"2,4,2,4,4,4,4,4,4\")\n+  [(set_attr \"type\" \"mov_reg,mov_imm,mov_imm,mvn_imm,mov_imm,load_4,store_4\")\n+   (set_attr \"length\" \"2,4,2,4,4,4,4\")\n    (set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"yes,no,yes,no,no,no,no,no,no\")\n-   (set_attr \"pool_range\" \"*,*,*,*,*,1018,4094,*,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,*,*,0,0,*,*\")]\n+   (set_attr \"predicable_short_it\" \"yes,no,yes,no,no,no,no\")\n+   (set_attr \"pool_range\" \"*,*,*,*,*,4094,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,*,0,*\")]\n )\n \n (define_insn \"tls_load_dot_plus_four\""}, {"sha": "9cc5946c79e027c0132d2b5e4fd6b97f13bca72e", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75088696935c7e179699cb448e0a2cee74c8494f/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75088696935c7e179699cb448e0a2cee74c8494f/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=75088696935c7e179699cb448e0a2cee74c8494f", "patch": "@@ -258,8 +258,8 @@\n ;; is chosen with length 2 when the instruction is predicated for\n ;; arm_restrict_it.\n (define_insn \"*thumb2_movsi_vfp\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,l,r,r, l,*hk,m, *m,*t, r,*t,*t,  *Uv\")\n-\t(match_operand:SI 1 \"general_operand\"\t   \"rk,I,Py,K,j,mi,*mi,l,*hk, r,*t,*t,*UvTu,*t\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rk,r,l,r,r,lk*r,m,*t, r,*t,*t,  *Uv\")\n+\t(match_operand:SI 1 \"general_operand\"\t   \"rk,I,Py,K,j,mi,lk*r, r,*t,*t,*UvTu,*t\"))]\n   \"TARGET_THUMB2 && TARGET_HARD_FLOAT\n    && (   s_register_operand (operands[0], SImode)\n        || s_register_operand (operands[1], SImode))\"\n@@ -275,32 +275,30 @@\n     case 4:\n       return \\\"movw%?\\\\t%0, %1\\\";\n     case 5:\n-    case 6:\n       /* Cannot load it directly, split to load it via MOV / MOVT.  */\n       if (!MEM_P (operands[1]) && arm_disable_literal_pool)\n \treturn \\\"#\\\";\n       return \\\"ldr%?\\\\t%0, %1\\\";\n-    case 7:\n-    case 8:\n+    case 6:\n       return \\\"str%?\\\\t%1, %0\\\";\n-    case 9:\n+    case 7:\n       return \\\"vmov%?\\\\t%0, %1\\\\t%@ int\\\";\n-    case 10:\n+    case 8:\n       return \\\"vmov%?\\\\t%0, %1\\\\t%@ int\\\";\n-    case 11:\n+    case 9:\n       return \\\"vmov%?.f32\\\\t%0, %1\\\\t%@ int\\\";\n-    case 12: case 13:\n+    case 10: case 11:\n       return output_move_vfp (operands);\n     default:\n       gcc_unreachable ();\n     }\n   \"\n   [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"predicable_short_it\" \"yes,no,yes,no,no,no,no,no,no,no,no,no,no,no\")\n-   (set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mvn_reg,mov_imm,load_4,load_4,store_4,store_4,f_mcr,f_mrc,fmov,f_loads,f_stores\")\n-   (set_attr \"length\" \"2,4,2,4,4,4,4,4,4,4,4,4,4,4\")\n-   (set_attr \"pool_range\"     \"*,*,*,*,*,1018,4094,*,*,*,*,*,1018,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,*,*,   0,   0,*,*,*,*,*,1008,*\")]\n+   (set_attr \"predicable_short_it\" \"yes,no,yes,no,no,no,no,no,no,no,no,no\")\n+   (set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mvn_reg,mov_imm,load_4,store_4,f_mcr,f_mrc,fmov,f_loads,f_stores\")\n+   (set_attr \"length\" \"2,4,2,4,4,4,4,4,4,4,4,4\")\n+   (set_attr \"pool_range\"     \"*,*,*,*,*,4094,*,*,*,*,1018,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,*,   0,*,*,*,*,1008,*\")]\n )\n \n "}]}