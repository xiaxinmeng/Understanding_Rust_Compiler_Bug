{"sha": "d9be9bb3c62116967a4d4739e476cc7777ea4525", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDliZTliYjNjNjIxMTY5NjdhNGQ0NzM5ZTQ3NmNjNzc3N2VhNDUyNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-06-28T22:39:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-06-28T22:39:59Z"}, "message": "stl_algo.h (partition_point): Add in C++0x mode.\n\n2008-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_algo.h (partition_point): Add in C++0x mode.\n\t* include/bits/algorithmfwd.h: Add.\n\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Update.\n\t* testsuite/25_algorithms/partition_point/1.cc: New.\n\t* testsuite/25_algorithms/partition_point/check_type.cc: Likewise.\n\t* testsuite/25_algorithms/partition_point/requirements/\n\texplicit_instantiation/2.cc: Likewise.\n\t* testsuite/25_algorithms/partition_point/requirements/\n\texplicit_instantiation/pod.cc: Likewise.\n\nFrom-SVN: r137237", "tree": {"sha": "c3bd64949409c4bfe8c140dfae3f83c8f33bd5ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3bd64949409c4bfe8c140dfae3f83c8f33bd5ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9be9bb3c62116967a4d4739e476cc7777ea4525", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9be9bb3c62116967a4d4739e476cc7777ea4525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9be9bb3c62116967a4d4739e476cc7777ea4525", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9be9bb3c62116967a4d4739e476cc7777ea4525/comments", "author": null, "committer": null, "parents": [{"sha": "7b063fdc13690972046aa3e7920402fbb5b6f7a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b063fdc13690972046aa3e7920402fbb5b6f7a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b063fdc13690972046aa3e7920402fbb5b6f7a7"}], "stats": {"total": 293, "additions": 293, "deletions": 0}, "files": [{"sha": "c8c6af9cc689b217a7ca5bd0c1959aa42048ab12", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d9be9bb3c62116967a4d4739e476cc7777ea4525", "patch": "@@ -1,3 +1,15 @@\n+2008-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algo.h (partition_point): Add in C++0x mode.\n+\t* include/bits/algorithmfwd.h: Add.\n+\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Update.\n+\t* testsuite/25_algorithms/partition_point/1.cc: New.\n+\t* testsuite/25_algorithms/partition_point/check_type.cc: Likewise.\n+\t* testsuite/25_algorithms/partition_point/requirements/\n+\texplicit_instantiation/2.cc: Likewise.\n+\t* testsuite/25_algorithms/partition_point/requirements/\n+\texplicit_instantiation/pod.cc: Likewise.\n+\n 2008-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/36660"}, {"sha": "23c4970dcf68177be34b921c2fac95af7545765f", "filename": "libstdc++-v3/include/bits/algorithmfwd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falgorithmfwd.h?ref=d9be9bb3c62116967a4d4739e476cc7777ea4525", "patch": "@@ -71,6 +71,7 @@\n   partial_sort_copy\n   partition\n   partition_copy (C++0x)\n+  partition_point (C++0x)\n   pop_heap\n   prev_permutation\n   push_heap\n@@ -346,6 +347,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t   typename _OIter2, typename _Predicate>\n     pair<_OIter1, _OIter2>\n     partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);\n+\n+  template<typename _FIter, typename _Predicate>\n+    _FIter\n+    partition_point(_FIter, _FIter, _Predicate);\n #endif\n \n   template<typename _RAIter>"}, {"sha": "61f7003040f78fba22b60faf5ee8f9d775a5c67d", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=d9be9bb3c62116967a4d4739e476cc7777ea4525", "patch": "@@ -817,6 +817,51 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __first = std::find_if_not(__first, __last, __pred);\n       return std::none_of(__first, __last, __pred);\n     }\n+\n+  /**\n+   *  @brief  Find the partition point of a partitioned range.\n+   *  @param  first   An iterator.\n+   *  @param  last    Another iterator.\n+   *  @param  pred    A predicate.\n+   *  @return  An iterator @p mid such that @p all_of(first, mid, pred)\n+   *           and @p none_of(mid, last, pred) are both true.\n+  */\n+  template<typename _ForwardIterator, typename _Predicate>\n+    _ForwardIterator\n+    partition_point(_ForwardIterator __first, _ForwardIterator __last,\n+\t\t    _Predicate __pred)\n+    {\n+      // concept requirements\n+      __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)\n+      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,\n+\t      typename iterator_traits<_ForwardIterator>::value_type>)\n+\n+      // A specific debug-mode test will be necessary...\n+      __glibcxx_requires_valid_range(__first, __last);\n+\n+      typedef typename iterator_traits<_ForwardIterator>::difference_type\n+\t_DistanceType;\n+\n+      _DistanceType __len = std::distance(__first, __last);\n+      _DistanceType __half;\n+      _ForwardIterator __middle;\n+\n+      while (__len > 0)\n+\t{\n+\t  __half = __len >> 1;\n+\t  __middle = __first;\n+\t  std::advance(__middle, __half);\n+\t  if (__pred(*__middle))\n+\t    {\n+\t      __first = __middle;\n+\t      ++__first;\n+\t      __len = __len - __half - 1;\n+\t    }\n+\t  else\n+\t    __len = __half;\n+\t}\n+      return __first;\n+    }\n #endif\n \n "}, {"sha": "005892d70e20b0d0d33c0e5ae14ded777e646dd0", "filename": "libstdc++-v3/testsuite/25_algorithms/headers/algorithm/synopsis.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheaders%2Falgorithm%2Fsynopsis.cc?ref=d9be9bb3c62116967a4d4739e476cc7777ea4525", "patch": "@@ -55,6 +55,10 @@ namespace std\n   template<typename _IIter, typename _Predicate>\n     bool\n     is_partitioned(_IIter, _IIter, _Predicate);\n+\n+  template<typename _FIter, typename _Predicate>\n+    _FIter\n+    partition_point(_FIter, _FIter, _Predicate);\n #endif\n \n   template<typename _FIter1, typename _FIter2>"}, {"sha": "5360739732fd39a66385c38ab6d237d69829b478", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_point/1.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2F1.cc?ref=d9be9bb3c62116967a4d4739e476cc7777ea4525", "patch": "@@ -0,0 +1,86 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container;\n+int array[] = {0, 0, 1, 1, 1, 1};\n+\n+bool\n+predicate(const int& i) \n+{ return i == 0; }\n+\n+void\n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Container con(array, array);\n+\n+  forward_iterator_wrapper<int> mid =\n+    std::partition_point(con.begin(), con.end(), predicate);\n+\n+  VERIFY( std::all_of(con.begin(), mid, predicate) );\n+  VERIFY( std::none_of(mid, con.end(), predicate) );\n+}\n+\n+void\n+test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Container con(array, array + 1);\n+\n+  forward_iterator_wrapper<int> mid =\n+    std::partition_point(con.begin(), con.end(), predicate);\n+\n+  VERIFY( std::all_of(con.begin(), mid, predicate) );\n+  VERIFY( std::none_of(mid, con.end(), predicate) );\n+}\n+\n+void\n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  Container con(array, array + 6);\n+\n+  forward_iterator_wrapper<int> mid =\n+    std::partition_point(con.begin(), con.end(), predicate);\n+\n+  VERIFY( std::all_of(con.begin(), mid, predicate) );\n+  VERIFY( std::none_of(mid, con.end(), predicate) );\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  return 0;\n+}"}, {"sha": "4f49bdd705815df6d0390e8c850fdcc60e03177e", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_point/check_type.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Fcheck_type.cc?ref=d9be9bb3c62116967a4d4739e476cc7777ea4525", "patch": "@@ -0,0 +1,50 @@\n+// 2008-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+struct X { };\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+bool\n+pred_function(const X&)\n+{ return true; }\n+\n+struct pred_obj\n+{\n+  bool \n+  operator()(const X&)\n+  { return true; }\n+};\n+\n+forward_iterator_wrapper<X>\n+test1(forward_iterator_wrapper<X>& begin,\n+      forward_iterator_wrapper<X>& end)\n+{ return std::partition_point(begin, end, pred_function); }\n+\n+forward_iterator_wrapper<X>\n+test2(forward_iterator_wrapper<X>& begin,\n+      forward_iterator_wrapper<X>& end)\n+{ return std::partition_point(begin, end, pred_obj()); }"}, {"sha": "eceaa6a3174c7dedc8a131c9a748f6a442560f01", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_point/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=d9be9bb3c62116967a4d4739e476cc7777ea4525", "patch": "@@ -0,0 +1,46 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <functional>\n+#include <testsuite_api.h>\n+\n+namespace std\n+{\n+  using __gnu_test::NonDefaultConstructible;\n+\n+  typedef NonDefaultConstructible \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template iterator_type partition_point(iterator_type, iterator_type, predicate_type);\n+} "}, {"sha": "1940dbd80a4d211e96e8ce0fedabb50019145686", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_point/requirements/explicit_instantiation/pod.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9be9bb3c62116967a4d4739e476cc7777ea4525/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Frequirements%2Fexplicit_instantiation%2Fpod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_point%2Frequirements%2Fexplicit_instantiation%2Fpod.cc?ref=d9be9bb3c62116967a4d4739e476cc7777ea4525", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2008-06-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <algorithm>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  using __gnu_test::pod_int;\n+\n+  typedef pod_int \t\tvalue_type;\n+  typedef value_type* \t\titerator_type;\n+  typedef std::pointer_to_unary_function<value_type, bool> predicate_type;\n+\n+  template iterator_type partition_point(iterator_type, iterator_type, predicate_type);\n+} "}]}