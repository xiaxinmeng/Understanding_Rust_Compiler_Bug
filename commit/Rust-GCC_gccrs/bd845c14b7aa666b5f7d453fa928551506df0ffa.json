{"sha": "bd845c14b7aa666b5f7d453fa928551506df0ffa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ4NDVjMTRiN2FhNjY2YjVmN2Q0NTNmYTkyODU1MTUwNmRmMGZmYQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2016-10-07T18:18:03Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2016-10-07T18:18:03Z"}, "message": "re PR fortran/77406 (ICE in generic_correspondence, at fortran/interface.c:1123)\n\n2016-10-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/77406\n\t* interface.c (gfc_compare_interfaces): Fix detection of ambiguous\n\tinterface involving alternate return.\n\t(check_interface1): Improve error message and loci.\n\n2016-10-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/77406\n\t* gfortran.dg/pr77406.f90: New test.\n\t* gfortran.dg/assumed_type_3.f90: Update error messages.\n\t* gfortran.dg/defined_operators_1.f90: Ditto.\n\t* gfortran.dg/generic_26.f90: Ditto.\n\t* gfortran.dg/generic_7.f90: Ditto.\n\t* gfortran.dg/gomp/udr5.f90: Ditto.\n\t* gfortran.dg/gomp/udr7.f90: Ditto.\n\t* gfortran.dg/interface_1.f90: Ditto.\n\t* gfortran.dg/interface_37.f90: Ditto.\n\t* gfortran.dg/interface_5.f90: Ditto.\n\t* gfortran.dg/interface_6.f90: Ditto.\n\t* gfortran.dg/interface_7.f90\n\t* gfortran.dg/no_arg_check_3.f90\n\t* gfortran.dg/operator_5.f90\n\t* gfortran.dg/proc_ptr_comp_20.f90: Ditto.\n\nFrom-SVN: r240870", "tree": {"sha": "89b197f22a5f631bf1248ad5e44a5a7f0aed7d66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89b197f22a5f631bf1248ad5e44a5a7f0aed7d66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd845c14b7aa666b5f7d453fa928551506df0ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd845c14b7aa666b5f7d453fa928551506df0ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd845c14b7aa666b5f7d453fa928551506df0ffa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd845c14b7aa666b5f7d453fa928551506df0ffa/comments", "author": null, "committer": null, "parents": [{"sha": "296002c6a1354f1520f32b9cd1b4c61c6ab186ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296002c6a1354f1520f32b9cd1b4c61c6ab186ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/296002c6a1354f1520f32b9cd1b4c61c6ab186ef"}], "stats": {"total": 172, "additions": 122, "deletions": 50}, "files": [{"sha": "50a0d4229433d73a2bd601937f7454b573c91227", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -1,3 +1,10 @@\n+2016-10-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/77406\n+\t* interface.c (gfc_compare_interfaces): Fix detection of ambiguous\n+\tinterface involving alternate return.\n+\t(check_interface1): Improve error message and loci.\n+\n 2016-10-06  Louis Krupp  <louis.krupp@zoho.com>\n \n \tPR fortran/69955"}, {"sha": "2a9af0f7638b2555e93dbde9a6c23ec986a8ace1", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -1689,14 +1689,23 @@ gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, const char *name2,\n   f1 = gfc_sym_get_dummy_args (s1);\n   f2 = gfc_sym_get_dummy_args (s2);\n \n+  /* Special case: No arguments.  */\n   if (f1 == NULL && f2 == NULL)\n-    return 1;\t\t\t/* Special case: No arguments.  */\n+    return 1;\n \n   if (generic_flag)\n     {\n       if (count_types_test (f1, f2, p1, p2)\n \t  || count_types_test (f2, f1, p2, p1))\n \treturn 0;\n+\n+      /* Special case: alternate returns.  If both f1->sym and f2->sym are\n+\t NULL, then the leading formal arguments are alternate returns.  \n+\t The previous conditional should catch argument lists with \n+\t different number of argument.  */\n+      if (f1 && f1->sym == NULL && f2 && f2->sym == NULL)\n+\treturn 1;\n+\n       if (generic_correspondence (f1, f2, p1, p2)\n \t  || generic_correspondence (f2, f1, p2, p1))\n \treturn 0;\n@@ -1864,13 +1873,15 @@ check_interface1 (gfc_interface *p, gfc_interface *q0,\n \t\t\t\t       generic_flag, 0, NULL, 0, NULL, NULL))\n \t  {\n \t    if (referenced)\n-\t      gfc_error (\"Ambiguous interfaces %qs and %qs in %s at %L\",\n-\t\t\t p->sym->name, q->sym->name, interface_name,\n-\t\t\t &p->where);\n+\t      gfc_error (\"Ambiguous interfaces in %s for %qs at %L \"\n+\t\t\t \"and %qs at %L\", interface_name,\n+\t\t\t q->sym->name, &q->sym->declared_at,\n+\t\t\t p->sym->name, &p->sym->declared_at);\n \t    else if (!p->sym->attr.use_assoc && q->sym->attr.use_assoc)\n-\t      gfc_warning (0, \"Ambiguous interfaces %qs and %qs in %s at %L\",\n-\t\t\t   p->sym->name, q->sym->name, interface_name,\n-\t\t\t   &p->where);\n+\t      gfc_warning (0, \"Ambiguous interfaces in %s for %qs at %L \"\n+\t\t\t \"and %qs at %L\", interface_name,\n+\t\t\t q->sym->name, &q->sym->declared_at,\n+\t\t\t p->sym->name, &p->sym->declared_at);\n \t    else\n \t      gfc_warning (0, \"Although not referenced, %qs has ambiguous \"\n \t\t\t   \"interfaces at %L\", interface_name, &p->where);"}, {"sha": "a0fedffa0a6aa6f2d0ceab9343f98259ce24b1ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -1,3 +1,22 @@\n+2016-10-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/77406\n+\t* gfortran.dg/pr77406.f90: New test.\n+\t* gfortran.dg/assumed_type_3.f90: Update error messages.\n+\t* gfortran.dg/defined_operators_1.f90: Ditto.\n+\t* gfortran.dg/generic_26.f90: Ditto.\n+\t* gfortran.dg/generic_7.f90: Ditto.\n+\t* gfortran.dg/gomp/udr5.f90: Ditto.\n+\t* gfortran.dg/gomp/udr7.f90: Ditto.\n+\t* gfortran.dg/interface_1.f90: Ditto.\n+\t* gfortran.dg/interface_37.f90: Ditto.\n+\t* gfortran.dg/interface_5.f90: Ditto.\n+\t* gfortran.dg/interface_6.f90: Ditto.\n+\t* gfortran.dg/interface_7.f90\n+\t* gfortran.dg/no_arg_check_3.f90\n+\t* gfortran.dg/operator_5.f90\n+\t* gfortran.dg/proc_ptr_comp_20.f90: Ditto.\n+\n 2016-10-07  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR c++/77700"}, {"sha": "38f924d6eea7639635a3013c51763508070d9a0d", "filename": "gcc/testsuite/gfortran.dg/assumed_type_3.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_3.f90?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -66,12 +66,12 @@ subroutine okok2(x)\n     end subroutine okok2\n   end interface\n   interface three\n-    subroutine ambig1(x)\n+    subroutine ambig1(x) ! { dg-error \"Ambiguous interfaces\" }\n       type(*) :: x\n     end subroutine ambig1\n-    subroutine ambig2(x)\n+    subroutine ambig2(x) ! { dg-error \"Ambiguous interfaces\" }\n       integer :: x\n-    end subroutine ambig2 ! { dg-error \"Ambiguous interfaces 'ambig2' and 'ambig1' in generic interface 'three'\" }\n+    end subroutine ambig2\n   end interface\n end subroutine nine\n "}, {"sha": "af8dd16660633d2b27d2d5d22b7030a0adb6bec3", "filename": "gcc/testsuite/gfortran.dg/defined_operators_1.f90", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_operators_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_operators_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdefined_operators_1.f90?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -11,7 +11,7 @@ module mymod\n      module procedure foo_1\n      module procedure foo_2\n      module procedure foo_3\n-     module procedure foo_1_OK  ! { dg-error \"Ambiguous interfaces\" }\n+     module procedure foo_1_OK\n      module procedure foo_2_OK\n      function foo_chr (chr) ! { dg-error \"cannot be assumed character length\" }\n        character(*) :: foo_chr\n@@ -37,12 +37,12 @@ function foo_0 () ! { dg-error \"must have at least one argument\" }\n     integer :: foo_1\n     foo_0 = 1\n   end function foo_0\n-  function foo_1 (a) ! { dg-error \"must be INTENT\" }\n+  function foo_1 (a) ! { dg-error \"Ambiguous interfaces\" }\n     integer :: foo_1\n-    integer :: a\n+    integer, intent(in) :: a\n     foo_1 = 1\n   end function foo_1\n-  function foo_1_OK (a)\n+  function foo_1_OK (a) ! { dg-error \"Ambiguous interfaces\" }\n     integer :: foo_1_OK\n     integer, intent (in) :: a\n     foo_1_OK = 1\n@@ -65,3 +65,4 @@ function foo_3 (a, b, c) ! { dg-error \"must have, at most, two arguments\" }\n     foo_3 = a + 3 * b - c\n   end function foo_3\n end module mymod\n+"}, {"sha": "22a593b42278e3c330254499ea36fa97feebdd58", "filename": "gcc/testsuite/gfortran.dg/generic_26.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_26.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_26.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_26.f90?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -9,17 +9,17 @@ module a\n \n   interface test\n     procedure testAlloc\n-    procedure testPtr   ! { dg-error \"Ambiguous interfaces\" }\n+    procedure testPtr\n   end interface\n \n contains\n \n-  logical function testAlloc(obj)\n+  logical function testAlloc(obj)    ! { dg-error \"Ambiguous interfaces\" }\n     integer, allocatable :: obj\n     testAlloc = .true.\n   end function\n   \n-  logical function testPtr(obj)\n+  logical function testPtr(obj)      ! { dg-error \"Ambiguous interfaces\" }\n     integer, pointer :: obj\n     testPtr = .false.\n   end function"}, {"sha": "53f1753bdc7433f5cd40e94ee975dbcb45cc08bc", "filename": "gcc/testsuite/gfortran.dg/generic_7.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_7.f90?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -7,15 +7,15 @@\n MODULE global\n INTERFACE iface\n   MODULE PROCEDURE sub_a\n-  MODULE PROCEDURE sub_b ! { dg-error \"Ambiguous interfaces\" }\n+  MODULE PROCEDURE sub_b\n   MODULE PROCEDURE sub_c\n END INTERFACE\n CONTAINS\n-  SUBROUTINE sub_a(x)\n+  SUBROUTINE sub_a(x) ! { dg-error \"Ambiguous interfaces\" }\n     INTEGER, INTENT(in) :: x\n     WRITE (*,*) 'A: ', x\n   END SUBROUTINE\n-  SUBROUTINE sub_b(y)\n+  SUBROUTINE sub_b(y) ! { dg-error \"Ambiguous interfaces\" }\n     INTEGER, INTENT(in) :: y\n     WRITE (*,*) 'B: ', y\n   END SUBROUTINE"}, {"sha": "c10b80a24ade1026787d55ee05a25395bc432d1c", "filename": "gcc/testsuite/gfortran.dg/gomp/udr5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fudr5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fudr5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fudr5.f90?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -55,5 +55,5 @@ subroutine f1\n end subroutine f1\n subroutine f2\n   use udr5m3\t! { dg-error \"Previous !.OMP DECLARE REDUCTION|Ambiguous interfaces\" }\n-  use udr5m2\t! { dg-error \"Ambiguous !.OMP DECLARE REDUCTION\" }\n+  use udr5m2\t! { dg-error \"Ambiguous !.OMP DECLARE REDUCTION|Ambiguous interfaces\" }\n end subroutine f2"}, {"sha": "50aee23c932d9177e5c634d4306afd087f7e9d82", "filename": "gcc/testsuite/gfortran.dg/gomp/udr7.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fudr7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fudr7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fudr7.f90?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -78,7 +78,7 @@ subroutine f1\n end subroutine f1\n subroutine f2\n   use udr7m3\t! { dg-error \"Previous !.OMP DECLARE REDUCTION|Ambiguous interfaces\" }\n-  use udr7m2\t! { dg-error \"Ambiguous !.OMP DECLARE REDUCTION\" }\n+  use udr7m2\t! { dg-error \"Ambiguous !.OMP DECLARE REDUCTION|Ambiguous interfaces\" }\n end subroutine f2\n subroutine f3\n   use udr7m4"}, {"sha": "aa6850f24280442f5f970274c3597f633b58b107", "filename": "gcc/testsuite/gfortran.dg/interface_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_1.f90?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -24,15 +24,15 @@ end module y\n \n module z\n \n-  use y\n+  use y    ! { dg-warning \"in generic interface\" }\n \n   interface ambiguous\n-    module procedure f    ! { dg-warning \"in generic interface\" \"\" }\n+    module procedure f \n   end interface\n \n   contains\n \n-    real function f(a)\n+    real function f(a)   ! { dg-warning \"in generic interface\" \"\" }\n       real a\n       f = a\n     end function"}, {"sha": "99b2b7c8a140798c48e6133e98cc9f2a77a0a735", "filename": "gcc/testsuite/gfortran.dg/interface_37.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_37.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_37.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_37.f90?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -4,13 +4,13 @@\n ! Subroutine/function ambiguity in generics.\n !\n      interface q\n-       subroutine qr(f)\n+       subroutine qr(f)  ! { dg-error \"Ambiguous interfaces\" }\n          implicit real(f)\n          external f\n        end subroutine\n-       subroutine qc(f)\n+       subroutine qc(f)  ! { dg-error \"Ambiguous interfaces\" }\n          implicit complex(f)\n          external f\n-       end subroutine ! { dg-error \"Ambiguous interfaces\" }\n+       end subroutine\n      end interface q\n    end"}, {"sha": "a014862f8b17b5e241fcc0da178af54449022b42", "filename": "gcc/testsuite/gfortran.dg/interface_5.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_5.f90?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -46,8 +46,8 @@ subroutine i_am_ok\n end subroutine i_am_ok\n \n program main\n-  USE f77_blas_extra ! { dg-error \"Ambiguous interfaces\" }\n-  USE f77_blas_generic\n+  USE f77_blas_extra   ! { dg-error \"Ambiguous interfaces\" }\n+  USE f77_blas_generic ! { dg-error \"Ambiguous interfaces\" }\n   character(6) :: chr\n   chr = \"\"\n   call bl_copy(1.0, chr)"}, {"sha": "f816529ff16c87b4d71022ed621afcaf220bc787", "filename": "gcc/testsuite/gfortran.dg/interface_6.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_6.f90?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -7,16 +7,16 @@\n ! procedures below are invalid, even though actually unambiguous.\n !\n INTERFACE BAD8\n-  SUBROUTINE S8A(X,Y,Z)\n+  SUBROUTINE S8A(X,Y,Z)     ! { dg-error \"Ambiguous interfaces\" }\n     REAL,OPTIONAL :: X\n     INTEGER :: Y\n     REAL :: Z\n   END SUBROUTINE S8A\n-  SUBROUTINE S8B(X,Z,Y)\n+  SUBROUTINE S8B(X,Z,Y)     ! { dg-error \"Ambiguous interfaces\" }\n     INTEGER,OPTIONAL :: X\n     INTEGER :: Z\n     REAL :: Y\n-  END SUBROUTINE S8B ! { dg-error \"Ambiguous interfaces\" }\n+  END SUBROUTINE S8B\n END INTERFACE BAD8\n real :: a, b\n integer :: i, j"}, {"sha": "4e70f3501c3f1b5af716c1c81ecf1cd665175dd8", "filename": "gcc/testsuite/gfortran.dg/interface_7.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_7.f90?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -11,20 +11,20 @@ module xx\n     SUBROUTINE S9A(X)\n       REAL :: X\n     END SUBROUTINE S9A\n-    SUBROUTINE S9B(X)\n+    SUBROUTINE S9B(X)     ! { dg-error \"Ambiguous interfaces\" }\n       INTERFACE\n         FUNCTION X(A)\n           REAL :: X,A\n         END FUNCTION X\n       END INTERFACE\n     END SUBROUTINE S9B\n-    SUBROUTINE S9C(X)\n+    SUBROUTINE S9C(X)     ! { dg-error \"Ambiguous interfaces\" }\n       INTERFACE\n         FUNCTION X(A)\n           REAL :: X\n           INTEGER :: A\n         END FUNCTION X\n       END INTERFACE\n-    END SUBROUTINE S9C  ! { dg-error \"Ambiguous interfaces\" }\n+    END SUBROUTINE S9C\n   END INTERFACE BAD9\n end module xx"}, {"sha": "3a95d0eff05c39cf2bc012ce3fe7602dc29b71e8", "filename": "gcc/testsuite/gfortran.dg/no_arg_check_3.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_arg_check_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_arg_check_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fno_arg_check_3.f90?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -55,23 +55,23 @@ subroutine okay(x)\n     end subroutine okay\n   end interface\n   interface two\n-    subroutine ambig1(x)\n+    subroutine ambig1(x)  ! { dg-error \"Ambiguous interfaces\" }\n !GCC$ attributes NO_ARG_CHECK :: x\n       integer :: x\n     end subroutine ambig1\n-    subroutine ambig2(x)\n+    subroutine ambig2(x)  ! { dg-error \"Ambiguous interfaces\" }\n !GCC$ attributes NO_ARG_CHECK :: x\n       integer :: x(*)\n-    end subroutine ambig2 ! { dg-error \"Ambiguous interfaces 'ambig2' and 'ambig1' in generic interface 'two'\" }\n+    end subroutine ambig2\n   end interface\n   interface three\n-    subroutine ambig3(x)\n+    subroutine ambig3(x)   ! { dg-error \"Ambiguous interfaces\" }\n !GCC$ attributes NO_ARG_CHECK :: x\n       integer :: x\n     end subroutine ambig3\n-    subroutine ambig4(x)\n+    subroutine ambig4(x)   ! { dg-error \"Ambiguous interfaces\" }\n       integer :: x\n-    end subroutine ambig4 ! { dg-error \"Ambiguous interfaces 'ambig4' and 'ambig3' in generic interface 'three'\" }\n+    end subroutine ambig4\n   end interface\n end subroutine nine\n "}, {"sha": "02d7b22981a6f02dd643c2666dcaf9c8757c25f1", "filename": "gcc/testsuite/gfortran.dg/operator_5.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Foperator_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Foperator_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Foperator_5.f90?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -16,7 +16,7 @@ MODULE mod_t\n   END INTERFACE\n \n   INTERFACE OPERATOR(.FOO.)\n-    MODULE PROCEDURE t_bar                  ! { dg-error \"Ambiguous interfaces\" }\n+    MODULE PROCEDURE t_bar\n   END INTERFACE\n \n   ! intrinsic operator\n@@ -29,20 +29,20 @@ MODULE mod_t\n   END INTERFACE\n \n   INTERFACE OPERATOR(==)\n-    MODULE PROCEDURE t_bar                  ! { dg-error \"Ambiguous interfaces\" }\n+    MODULE PROCEDURE t_bar\n   END INTERFACE\n \n   INTERFACE OPERATOR(.eq.)\n     MODULE PROCEDURE t_bar                  ! { dg-error \"already present\" }\n   END INTERFACE\n \n CONTAINS\n-  LOGICAL FUNCTION t_foo(this, other)\n+  LOGICAL FUNCTION t_foo(this, other)  ! { dg-error \"Ambiguous interfaces\" }\n     TYPE(t), INTENT(in) :: this, other\n     t_foo = .FALSE.\n   END FUNCTION\n \n-  LOGICAL FUNCTION t_bar(this, other)\n+  LOGICAL FUNCTION t_bar(this, other)  ! { dg-error \"Ambiguous interfaces\" }\n     TYPE(t), INTENT(in) :: this, other\n     t_bar = .FALSE.\n   END FUNCTION"}, {"sha": "a279f75c6c7a044360e408da3e1cbb92ff568651", "filename": "gcc/testsuite/gfortran.dg/pr77406.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr77406.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr77406.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr77406.f90?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do compile }\n+! { dg-options \"-w\" }\n+module m\n+   interface s\n+      subroutine s1(*)  ! { dg-error \"Ambiguous interfaces\" }\n+      end\n+      subroutine s2(*)  ! { dg-error \"Ambiguous interfaces\" }\n+      end\n+   end interface \n+   interface t\n+      subroutine t1(*)\n+      end\n+      subroutine t2(*,*)\n+      end\n+   end interface\n+   interface u\n+      subroutine u1(*,x)\n+      end\n+      subroutine u2(*,i)\n+      end\n+   end interface\n+   interface v\n+      subroutine v1(*,*)  ! { dg-error \"Ambiguous interfaces\" }\n+      end\n+      subroutine v2(*,*)  ! { dg-error \"Ambiguous interfaces\" }\n+      end\n+   end interface\n+   interface w\n+      subroutine w1(*,i)  ! { dg-error \"Ambiguous interfaces\" }\n+      end\n+      subroutine w2(*,j)  ! { dg-error \"Ambiguous interfaces\" }\n+      end\n+   end interface\n+end"}, {"sha": "f430ce83c450f0e9e94b39b3d8213bff4ef0b2ca", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_20.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd845c14b7aa666b5f7d453fa928551506df0ffa/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_20.f90?ref=bd845c14b7aa666b5f7d453fa928551506df0ffa", "patch": "@@ -7,11 +7,11 @@\n implicit none\n \n interface func\n-  procedure f1,f2 ! { dg-error \"Ambiguous interfaces\" }\n+  procedure f1,f2\n end interface\n \n interface operator(.op.)\n-  procedure f1,f2 ! { dg-error \"Ambiguous interfaces\" }\n+  procedure f1,f2\n end interface\n \n type :: t1\n@@ -35,12 +35,12 @@\n \n contains\n \n-  real function f1(a,b)\n+  real function f1(a,b)    ! { dg-error \"Ambiguous interfaces\" }\n     real,intent(in) :: a,b\n     f1 = a + b\n   end function\n \n-  integer function f2(a,b)\n+  integer function f2(a,b) ! { dg-error \"Ambiguous interfaces\" }\n     real,intent(in) :: a,b\n     f2 = a - b\n   end function"}]}