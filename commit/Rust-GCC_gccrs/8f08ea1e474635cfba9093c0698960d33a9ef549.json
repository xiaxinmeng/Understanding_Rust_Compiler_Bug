{"sha": "8f08ea1e474635cfba9093c0698960d33a9ef549", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYwOGVhMWU0NzQ2MzVjZmJhOTA5M2MwNjk4OTYwZDMzYTllZjU0OQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gnu.org", "date": "1999-02-27T22:21:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-02-27T22:21:58Z"}, "message": "frame.h: Update some comments.\n\n        * frame.h: Update some comments.\n        * defaults.h (TARGET_ATTRIBUTE_WEAK): Define.\n        * crtstuff.c (__register_frame_info, __deregister_frame_info): Declare\n        using TARGET_WEAK_ATTRIBUTE.\n        (__do_global_dtors_aux): Check if __deregister_frame_info is\n        zero before calling it.\n        (__do_global_dtors): Likewise.\n        (frame_dummy): Check if __register_frame_info is zero before\n        calling it.\n        (__frame_dummy): Likewise.\n\nCo-Authored-By: Jeffrey A Law <law@cygnus.com>\n\nFrom-SVN: r25487", "tree": {"sha": "be7ee5618d4e11bd2a665ea02e2211cb4ec1f20d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be7ee5618d4e11bd2a665ea02e2211cb4ec1f20d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f08ea1e474635cfba9093c0698960d33a9ef549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f08ea1e474635cfba9093c0698960d33a9ef549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f08ea1e474635cfba9093c0698960d33a9ef549", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f08ea1e474635cfba9093c0698960d33a9ef549/comments", "author": null, "committer": null, "parents": [{"sha": "b78abfe951cc9e460ff3eb07202344d04c5e4cca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b78abfe951cc9e460ff3eb07202344d04c5e4cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b78abfe951cc9e460ff3eb07202344d04c5e4cca"}], "stats": {"total": 75, "additions": 71, "deletions": 4}, "files": [{"sha": "93871bcd44508afed9f7441d0f9784068e9cf5ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f08ea1e474635cfba9093c0698960d33a9ef549/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f08ea1e474635cfba9093c0698960d33a9ef549/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f08ea1e474635cfba9093c0698960d33a9ef549", "patch": "@@ -1,3 +1,17 @@\n+Sat Feb 27 22:48:38 1999  H.J. Lu  (hjl@gnu.org)\n+\t\t\t  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* frame.h: Update some comments.\n+\t* defaults.h (TARGET_ATTRIBUTE_WEAK): Define.\n+\t* crtstuff.c (__register_frame_info, __deregister_frame_info): Declare\n+\tusing TARGET_WEAK_ATTRIBUTE.\n+\t(__do_global_dtors_aux): Check if __deregister_frame_info is\n+\tzero before calling it.\n+\t(__do_global_dtors): Likewise.\n+\t(frame_dummy): Check if __register_frame_info is zero before\n+\tcalling it.\n+\t(__frame_dummy): Likewise.\n+\n Sat Feb 27 19:18:24 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* SERVICE: Update from the FSF."}, {"sha": "b7a482a6808a023196f4efd5cb8ee9d3a4df4000", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f08ea1e474635cfba9093c0698960d33a9ef549/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f08ea1e474635cfba9093c0698960d33a9ef549/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=8f08ea1e474635cfba9093c0698960d33a9ef549", "patch": "@@ -56,6 +56,34 @@ Boston, MA 02111-1307, USA.  */\n #include <stddef.h>\n #include \"frame.h\"\n \n+/* We do not want to add the weak attribute to the declarations of these\n+   routines in frame.h because that will cause the definition of these\n+   symbols to be weak as well.\n+\n+   This exposes a core issue, how to handle creating weak references vs\n+   how to create weak definitions.  Either we have to have the definition\n+   of TARGET_WEAK_ATTRIBUTE be conditional in the shared header files or\n+   have a second declaration if we want a function's references to be weak,\n+   but not its definition.\n+\n+   Making TARGET_WEAK_ATTRIBUTE conditional seems like a good solution until\n+   one thinks about scaling to larger problems -- ie, the condition under\n+   which TARGET_WEAK_ATTRIBUTE is active will eventually get far too\n+   complicated.\n+\n+   So, we take an approach similar to #pragma weak -- we have a second\n+   declaration for functions that we want to have weak references.\n+\n+   Neither way is particularly good.  */\n+   \n+/* References to __register_frame_info and __deregister_frame_info should\n+   be weak in this file if at all possible.  */\n+extern void __register_frame_info (void *, struct object *)\n+\t\t\t\t  TARGET_ATTRIBUTE_WEAK;\n+\n+extern void *__deregister_frame_info (void *)\n+\t\t\t\t     TARGET_ATTRIBUTE_WEAK;\n+\n #ifndef OBJECT_FORMAT_MACHO\n \n /* Provide default definitions for the pseudo-ops used to switch to the\n@@ -144,7 +172,8 @@ __do_global_dtors_aux ()\n     }\n \n #ifdef EH_FRAME_SECTION_ASM_OP\n-  __deregister_frame_info (__EH_FRAME_BEGIN__);\n+  if (__deregister_frame_info)\n+    __deregister_frame_info (__EH_FRAME_BEGIN__);\n #endif\n   completed = 1;\n }\n@@ -172,7 +201,8 @@ static void\n frame_dummy ()\n {\n   static struct object object;\n-  __register_frame_info (__EH_FRAME_BEGIN__, &object);\n+  if (__register_frame_info)\n+    __register_frame_info (__EH_FRAME_BEGIN__, &object);\n }\n \n static void __attribute__ ((__unused__))\n@@ -256,7 +286,8 @@ __do_global_dtors ()\n     (*p) ();\n \n #ifdef EH_FRAME_SECTION_ASM_OP\n-  __deregister_frame_info (__EH_FRAME_BEGIN__);\n+  if (__deregister_frame_info)\n+    __deregister_frame_info (__EH_FRAME_BEGIN__);\n #endif\n }\n \n@@ -268,7 +299,8 @@ void\n __frame_dummy ()\n {\n   static struct object object;\n-  __register_frame_info (__EH_FRAME_BEGIN__, &object);\n+  if (__register_frame_info)\n+    __register_frame_info (__EH_FRAME_BEGIN__, &object);\n }\n #endif\n #endif"}, {"sha": "a0e3bfca57acacd3b64057cb3bf354c3d1fe3c92", "filename": "gcc/defaults.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f08ea1e474635cfba9093c0698960d33a9ef549/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f08ea1e474635cfba9093c0698960d33a9ef549/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=8f08ea1e474635cfba9093c0698960d33a9ef549", "patch": "@@ -133,6 +133,22 @@ do { fprintf (FILE, \"\\t%s\\t\", ASM_LONG);\t\t\t\t\\\n #endif\n #endif\n \n+/* If the target supports weak symbols, define TARGET_ATTRIBUTE_WEAK to\n+   provide a weak attribute.  Else define it to nothing. \n+\n+   This would normally belong in gansidecl.h, but SUPPORTS_WEAK is\n+   not available at that time.\n+\n+   Note, this is only for use by target files which we know are to be\n+   compiled by GCC.  */\n+#ifndef TARGET_ATTRIBUTE_WEAK\n+# if SUPPORTS_WEAK\n+#  define TARGET_ATTRIBUTE_WEAK __attribute__ ((weak))\n+# else\n+#  define TARGET_ATTRIBUTE_WEAK\n+# endif\n+#endif\n+\n /* If we have a definition of INCOMING_RETURN_ADDR_RTX, assume that\n    the rest of the DWARF 2 frame unwind support is also provided.  */\n #if !defined (DWARF2_UNWIND_INFO) && defined (INCOMING_RETURN_ADDR_RTX)"}, {"sha": "985416cd1807c227424bd8b6d6d98e65785292c0", "filename": "gcc/frame.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f08ea1e474635cfba9093c0698960d33a9ef549/gcc%2Fframe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f08ea1e474635cfba9093c0698960d33a9ef549/gcc%2Fframe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fframe.h?ref=8f08ea1e474635cfba9093c0698960d33a9ef549", "patch": "@@ -54,6 +54,11 @@ struct object {\n   struct object *next;\n };\n \n+/* Note the following routines are exported interfaces from libgcc; do not\n+   change these interfaces.  Instead create new interfaces.  Also note\n+   references to these functions may be made weak in files where they\n+   are referenced.  */\n+\n extern void __register_frame (void * );\n extern void __register_frame_table (void *);\n extern void __deregister_frame (void *);"}]}