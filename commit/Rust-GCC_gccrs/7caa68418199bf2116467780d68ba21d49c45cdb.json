{"sha": "7caa68418199bf2116467780d68ba21d49c45cdb", "node_id": "C_kwDOANBUbNoAKDdjYWE2ODQxODE5OWJmMjExNjQ2Nzc4MGQ2OGJhMjFkNDljNDVjZGI", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-12-06T23:56:43Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2023-01-03T09:29:53Z"}, "message": "ada: Fix detection of function calls in object declarations\n\nThe current code has relied on Original_Node to detect rewritten function\ncalls in object declarations but that's not robust enough in the presence\nof function calls written in object notation.\n\ngcc/ada/\n\n\t* exp_util.ads (Is_Captured_Function_Call): Declare.\n\t* exp_util.adb (Is_Captured_Function_Call): New predicate.\n\t* exp_ch3.adb (Expand_N_Object_Declaration): Use it to detect a\n\trewritten function call as the initializing expression.\n\t* exp_ch6.adb (Expand_Simple_Function_Return): Use it to detect a\n\trewritten function call as the returned expression.", "tree": {"sha": "cbf01c8d5ab9af464d90543a754051d2b499397c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbf01c8d5ab9af464d90543a754051d2b499397c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7caa68418199bf2116467780d68ba21d49c45cdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7caa68418199bf2116467780d68ba21d49c45cdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7caa68418199bf2116467780d68ba21d49c45cdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7caa68418199bf2116467780d68ba21d49c45cdb/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7512dcc94236d247ceef8cef6d36392a86e271a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7512dcc94236d247ceef8cef6d36392a86e271a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7512dcc94236d247ceef8cef6d36392a86e271a0"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "def63ed0513d9899adbc17978dccabfb91241fef", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7caa68418199bf2116467780d68ba21d49c45cdb/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7caa68418199bf2116467780d68ba21d49c45cdb/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=7caa68418199bf2116467780d68ba21d49c45cdb", "patch": "@@ -7901,18 +7901,16 @@ package body Exp_Ch3 is\n                 --  secondary stack, then the declaration can be rewritten as\n                 --  the renaming of this dereference:\n \n-                --    type Axx is access all Typ;\n-                --    Rxx : constant Axx := Func (...)'reference;\n-                --    Obj : Typ renames Rxx.all;\n+                --    type Ann is access all Typ;\n+                --    Rnn : constant Axx := Func (...)'reference;\n+                --    Obj : Typ renames Rnn.all;\n \n                 --  This avoids an extra copy and, in the case where Typ needs\n                 --  finalization, a pair of Adjust/Finalize calls (see below).\n \n                 and then\n                   ((not Is_Library_Level_Entity (Def_Id)\n-                     and then Nkind (Expr_Q) = N_Explicit_Dereference\n-                     and then not Comes_From_Source (Expr_Q)\n-                     and then Nkind (Original_Node (Expr_Q)) = N_Function_Call\n+                     and then Is_Captured_Function_Call (Expr_Q)\n                      and then not Is_Class_Wide_Type (Typ))\n \n                    --  If the initializing expression is a variable with the"}, {"sha": "0bc2559751b97fbca95b0a7420fd4d6c2317a537", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7caa68418199bf2116467780d68ba21d49c45cdb/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7caa68418199bf2116467780d68ba21d49c45cdb/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=7caa68418199bf2116467780d68ba21d49c45cdb", "patch": "@@ -6440,11 +6440,7 @@ package body Exp_Ch6 is\n       pragma Assert (Present (Exp));\n \n       Exp_Is_Function_Call : constant Boolean :=\n-        Nkind (Exp) = N_Function_Call\n-          or else (Nkind (Exp) = N_Explicit_Dereference\n-                   and then Is_Entity_Name (Prefix (Exp))\n-                   and then Ekind (Entity (Prefix (Exp))) = E_Constant\n-                   and then Is_Related_To_Func_Return (Entity (Prefix (Exp))));\n+        Nkind (Exp) = N_Function_Call or else Is_Captured_Function_Call (Exp);\n \n       Exp_Typ : constant Entity_Id := Etype (Exp);\n       --  The type of the expression (not necessarily the same as R_Type)"}, {"sha": "3c68f917ca97fea2301d6770d4c452ca110532bd", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7caa68418199bf2116467780d68ba21d49c45cdb/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7caa68418199bf2116467780d68ba21d49c45cdb/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=7caa68418199bf2116467780d68ba21d49c45cdb", "patch": "@@ -8160,6 +8160,30 @@ package body Exp_Util is\n       end if;\n    end Integer_Type_For;\n \n+   -------------------------------\n+   -- Is_Captured_Function_Call --\n+   -------------------------------\n+\n+   function Is_Captured_Function_Call (N : Node_Id) return Boolean is\n+   begin\n+      if Nkind (N) = N_Explicit_Dereference\n+        and then Is_Entity_Name (Prefix (N))\n+        and then Ekind (Entity (Prefix (N))) = E_Constant\n+      then\n+         declare\n+            Value : constant Node_Id := Constant_Value (Entity (Prefix (N)));\n+\n+         begin\n+            return Present (Value)\n+              and then Nkind (Value) = N_Reference\n+              and then Nkind (Prefix (Value)) = N_Function_Call;\n+         end;\n+\n+      else\n+         return False;\n+      end if;\n+   end Is_Captured_Function_Call;\n+\n    --------------------------------------------------\n    -- Is_Displacement_Of_Object_Or_Function_Result --\n    --------------------------------------------------"}, {"sha": "0d09d259f8ee74e08e8dbb0a55cf82b66d8ad3af", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7caa68418199bf2116467780d68ba21d49c45cdb/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7caa68418199bf2116467780d68ba21d49c45cdb/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=7caa68418199bf2116467780d68ba21d49c45cdb", "patch": "@@ -757,6 +757,14 @@ package Exp_Util is\n    --  Return a suitable standard integer type containing at least S bits and\n    --  of the signedness given by Uns. See also Small_Integer_Type_For.\n \n+   function Is_Captured_Function_Call (N : Node_Id) return Boolean;\n+   --  Return True if N is a captured function call, i.e. the result of calling\n+   --  Remove_Side_Effects on an N_Function_Call node:\n+\n+   --    type Ann is access all Typ;\n+   --    Rnn : constant Ann := Func (...)'reference;\n+   --    Rnn.all\n+\n    function Is_Displacement_Of_Object_Or_Function_Result\n      (Obj_Id : Entity_Id) return Boolean;\n    --  Determine whether Obj_Id is a source entity that has been initialized by"}]}