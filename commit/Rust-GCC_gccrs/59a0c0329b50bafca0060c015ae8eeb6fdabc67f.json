{"sha": "59a0c0329b50bafca0060c015ae8eeb6fdabc67f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlhMGMwMzI5YjUwYmFmY2EwMDYwYzAxNWFlOGVlYjZmZGFiYzY3Zg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T20:11:31Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T20:11:31Z"}, "message": "ree.c: Use rtx_insn\n\ngcc/\n\t* ree.c (struct ext_cand): Strengthen field \"insn\" from rtx to\n\trtx_insn *.\n\t(combine_set_extension): Likewise for param \"curr_insn\".\n\t(transform_ifelse): Likewise for param \"def_insn\".\n\t(get_defs): Likewise for param \"def_insn\".  Strengthen param \"dest\"\n\tfrom vec<rtx> * to vec<rtx_insn *> *.\n\t(is_cond_copy_insn): Likewise for param \"insn\".\n\t(struct ext_state): Strengthen the four vec fields from vec<rtx>\n\tto vec<rtx_insn *>.\n\t(make_defs_and_copies_lists): Strengthen param \"extend_insn\" and\n\tlocal \"def_insn\" from rtx to rtx_insn *.\n\t(get_sub_rtx): Likewise for param \"def_insn\".\n\t(merge_def_and_ext): Likewise.\n\t(combine_reaching_defs): Likewise.\n\t(add_removable_extension): Likewise for param \"insn\".\n\t(find_removable_extensions): Likewise for local \"insn\".\n\t(find_and_remove_re): Likewise for locals \"curr_insn\" and\n\t\"def_insn\".  Strengthen locals \"reinsn_del_list\" and\n\t\"reinsn_del_list\" from auto_vec<rtx> to auto_vec<rtx_insn *>.\n\nFrom-SVN: r214364", "tree": {"sha": "659422e9199d7af81a1d041df9fbf5c6813eabd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/659422e9199d7af81a1d041df9fbf5c6813eabd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59a0c0329b50bafca0060c015ae8eeb6fdabc67f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a0c0329b50bafca0060c015ae8eeb6fdabc67f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a0c0329b50bafca0060c015ae8eeb6fdabc67f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a0c0329b50bafca0060c015ae8eeb6fdabc67f/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e06ed0c4aa60b94d2889295995ea37791f5b0271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e06ed0c4aa60b94d2889295995ea37791f5b0271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e06ed0c4aa60b94d2889295995ea37791f5b0271"}], "stats": {"total": 67, "additions": 45, "deletions": 22}, "files": [{"sha": "18a98695c865561d1821b429544984b74e3d8e68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a0c0329b50bafca0060c015ae8eeb6fdabc67f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a0c0329b50bafca0060c015ae8eeb6fdabc67f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59a0c0329b50bafca0060c015ae8eeb6fdabc67f", "patch": "@@ -1,3 +1,25 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* ree.c (struct ext_cand): Strengthen field \"insn\" from rtx to\n+\trtx_insn *.\n+\t(combine_set_extension): Likewise for param \"curr_insn\".\n+\t(transform_ifelse): Likewise for param \"def_insn\".\n+\t(get_defs): Likewise for param \"def_insn\".  Strengthen param \"dest\"\n+\tfrom vec<rtx> * to vec<rtx_insn *> *.\n+\t(is_cond_copy_insn): Likewise for param \"insn\".\n+\t(struct ext_state): Strengthen the four vec fields from vec<rtx>\n+\tto vec<rtx_insn *>.\n+\t(make_defs_and_copies_lists): Strengthen param \"extend_insn\" and\n+\tlocal \"def_insn\" from rtx to rtx_insn *.\n+\t(get_sub_rtx): Likewise for param \"def_insn\".\n+\t(merge_def_and_ext): Likewise.\n+\t(combine_reaching_defs): Likewise.\n+\t(add_removable_extension): Likewise for param \"insn\".\n+\t(find_removable_extensions): Likewise for local \"insn\".\n+\t(find_and_remove_re): Likewise for locals \"curr_insn\" and\n+\t\"def_insn\".  Strengthen locals \"reinsn_del_list\" and\n+\t\"reinsn_del_list\" from auto_vec<rtx> to auto_vec<rtx_insn *>.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* recog.c (split_insn): Strengthen param \"insn\" and locals"}, {"sha": "ceebdfd001fd401df5bebae7883c0872fef4ca89", "filename": "gcc/ree.c", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59a0c0329b50bafca0060c015ae8eeb6fdabc67f/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59a0c0329b50bafca0060c015ae8eeb6fdabc67f/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=59a0c0329b50bafca0060c015ae8eeb6fdabc67f", "patch": "@@ -255,7 +255,7 @@ typedef struct ext_cand\n   enum machine_mode mode;\n \n   /* The instruction where it lives.  */\n-  rtx insn;\n+  rtx_insn *insn;\n } ext_cand;\n \n \n@@ -279,7 +279,7 @@ static int max_insn_uid;\n    assign it to the register.  */\n \n static bool\n-combine_set_extension (ext_cand *cand, rtx curr_insn, rtx *orig_set)\n+combine_set_extension (ext_cand *cand, rtx_insn *curr_insn, rtx *orig_set)\n {\n   rtx orig_src = SET_SRC (*orig_set);\n   rtx new_set;\n@@ -383,7 +383,7 @@ combine_set_extension (ext_cand *cand, rtx curr_insn, rtx *orig_set)\n    DEF_INSN is the if_then_else insn.  */\n \n static bool\n-transform_ifelse (ext_cand *cand, rtx def_insn)\n+transform_ifelse (ext_cand *cand, rtx_insn *def_insn)\n {\n   rtx set_insn = PATTERN (def_insn);\n   rtx srcreg, dstreg, srcreg2;\n@@ -429,7 +429,7 @@ transform_ifelse (ext_cand *cand, rtx def_insn)\n    of the definitions onto DEST.  */\n \n static struct df_link *\n-get_defs (rtx insn, rtx reg, vec<rtx> *dest)\n+get_defs (rtx_insn *insn, rtx reg, vec<rtx_insn *> *dest)\n {\n   df_ref use;\n   struct df_link *ref_chain, *ref_link;\n@@ -467,7 +467,7 @@ get_defs (rtx insn, rtx reg, vec<rtx> *dest)\n    and store x1 and x2 in REG_1 and REG_2.  */\n \n static bool\n-is_cond_copy_insn (rtx insn, rtx *reg1, rtx *reg2)\n+is_cond_copy_insn (rtx_insn *insn, rtx *reg1, rtx *reg2)\n {\n   rtx expr = single_set (insn);\n \n@@ -516,10 +516,10 @@ typedef struct ext_state\n   /* In order to avoid constant alloc/free, we keep these\n      4 vectors live through the entire find_and_remove_re and just\n      truncate them each time.  */\n-  vec<rtx> defs_list;\n-  vec<rtx> copies_list;\n-  vec<rtx> modified_list;\n-  vec<rtx> work_list;\n+  vec<rtx_insn *> defs_list;\n+  vec<rtx_insn *> copies_list;\n+  vec<rtx_insn *> modified_list;\n+  vec<rtx_insn *> work_list;\n \n   /* For instructions that have been successfully modified, this is\n      the original mode from which the insn is extending and\n@@ -540,7 +540,7 @@ typedef struct ext_state\n    success.  */\n \n static bool\n-make_defs_and_copies_lists (rtx extend_insn, const_rtx set_pat,\n+make_defs_and_copies_lists (rtx_insn *extend_insn, const_rtx set_pat,\n \t\t\t    ext_state *state)\n {\n   rtx src_reg = XEXP (SET_SRC (set_pat), 0);\n@@ -558,7 +558,7 @@ make_defs_and_copies_lists (rtx extend_insn, const_rtx set_pat,\n   /* Perform transitive closure for conditional copies.  */\n   while (!state->work_list.is_empty ())\n     {\n-      rtx def_insn = state->work_list.pop ();\n+      rtx_insn *def_insn = state->work_list.pop ();\n       rtx reg1, reg2;\n \n       gcc_assert (INSN_UID (def_insn) < max_insn_uid);\n@@ -594,7 +594,7 @@ make_defs_and_copies_lists (rtx extend_insn, const_rtx set_pat,\n    return NULL.  This is similar to single_set, except that\n    single_set allows multiple SETs when all but one is dead.  */\n static rtx *\n-get_sub_rtx (rtx def_insn)\n+get_sub_rtx (rtx_insn *def_insn)\n {\n   enum rtx_code code = GET_CODE (PATTERN (def_insn));\n   rtx *sub_rtx = NULL;\n@@ -632,7 +632,7 @@ get_sub_rtx (rtx def_insn)\n    on the SET pattern.  */\n \n static bool\n-merge_def_and_ext (ext_cand *cand, rtx def_insn, ext_state *state)\n+merge_def_and_ext (ext_cand *cand, rtx_insn *def_insn, ext_state *state)\n {\n   enum machine_mode ext_src_mode;\n   rtx *sub_rtx;\n@@ -693,7 +693,7 @@ get_extended_src_reg (rtx src)\n static bool\n combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n {\n-  rtx def_insn;\n+  rtx_insn *def_insn;\n   bool merge_successful = true;\n   int i;\n   int defs_ix;\n@@ -744,7 +744,7 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n \treturn false;\n \n       /* There's only one reaching def.  */\n-      rtx def_insn = state->defs_list[0];\n+      rtx_insn *def_insn = state->defs_list[0];\n \n       /* The defining statement must not have been modified either.  */\n       if (state->modified[INSN_UID (def_insn)].kind != EXT_MODIFIED_NONE)\n@@ -909,7 +909,7 @@ combine_reaching_defs (ext_cand *cand, const_rtx set_pat, ext_state *state)\n /* Add an extension pattern that could be eliminated.  */\n \n static void\n-add_removable_extension (const_rtx expr, rtx insn,\n+add_removable_extension (const_rtx expr, rtx_insn *insn,\n \t\t\t vec<ext_cand> *insn_list,\n \t\t\t unsigned *def_map)\n {\n@@ -982,7 +982,8 @@ find_removable_extensions (void)\n {\n   vec<ext_cand> insn_list = vNULL;\n   basic_block bb;\n-  rtx insn, set;\n+  rtx_insn *insn;\n+  rtx set;\n   unsigned *def_map = XCNEWVEC (unsigned, max_insn_uid);\n \n   FOR_EACH_BB_FN (bb, cfun)\n@@ -1009,11 +1010,11 @@ static void\n find_and_remove_re (void)\n {\n   ext_cand *curr_cand;\n-  rtx curr_insn = NULL_RTX;\n+  rtx_insn *curr_insn = NULL;\n   int num_re_opportunities = 0, num_realized = 0, i;\n   vec<ext_cand> reinsn_list;\n-  auto_vec<rtx> reinsn_del_list;\n-  auto_vec<rtx> reinsn_copy_list;\n+  auto_vec<rtx_insn *> reinsn_del_list;\n+  auto_vec<rtx_insn *> reinsn_copy_list;\n   ext_state state;\n \n   /* Construct DU chain to get all reaching definitions of each\n@@ -1082,8 +1083,8 @@ find_and_remove_re (void)\n      from the new destination to the old destination.  */\n   for (unsigned int i = 0; i < reinsn_copy_list.length (); i += 2)\n     {\n-      rtx curr_insn = reinsn_copy_list[i];\n-      rtx def_insn = reinsn_copy_list[i + 1];\n+      rtx_insn *curr_insn = reinsn_copy_list[i];\n+      rtx_insn *def_insn = reinsn_copy_list[i + 1];\n \n       /* Use the mode of the destination of the defining insn\n \t for the mode of the copy.  This is necessary if the"}]}