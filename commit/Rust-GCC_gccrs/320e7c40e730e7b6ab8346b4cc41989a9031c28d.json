{"sha": "320e7c40e730e7b6ab8346b4cc41989a9031c28d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIwZTdjNDBlNzMwZTdiNmFiODM0NmI0Y2M0MTk4OWE5MDMxYzI4ZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-05-11T06:50:51Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-05-11T06:50:51Z"}, "message": "genattr.c: Include stdarg.h/varargs.h.\n\n        * genattr.c: Include stdarg.h/varargs.h.  Change function\n        `fatal' to use variable arguments instead of faking it with\n        integer parameters.  Provide a prototype which also\n        checks the format specifiers using ATTRIBUTE_PRINTF_1.\n        * genattrtab.c: Likewise.\n        * gencodes.c: Likewise.\n        * genconfig.c: Likewise.\n        * genemit.c: Likewise.\n        * genextract.c: Likewise.\n        * genflags.c: Likewise.\n        * genopinit.c: Likewise.\n        * genpeep.c: Likewise.\n        * genrecog.c: Likewise.\n        * genoutput.c: Likewise.  Similarly for function `error'.\n\nFrom-SVN: r19661", "tree": {"sha": "e39c8153de84f083498305d70db90b91deed0973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e39c8153de84f083498305d70db90b91deed0973"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/320e7c40e730e7b6ab8346b4cc41989a9031c28d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320e7c40e730e7b6ab8346b4cc41989a9031c28d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/320e7c40e730e7b6ab8346b4cc41989a9031c28d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320e7c40e730e7b6ab8346b4cc41989a9031c28d/comments", "author": null, "committer": null, "parents": [{"sha": "ce4a03916c76227660f5d388bd93c221185cfd24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce4a03916c76227660f5d388bd93c221185cfd24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce4a03916c76227660f5d388bd93c221185cfd24"}], "stats": {"total": 299, "additions": 249, "deletions": 50}, "files": [{"sha": "99d6cc93f46e0767c8f42d668a99541d33df17e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=320e7c40e730e7b6ab8346b4cc41989a9031c28d", "patch": "@@ -1,3 +1,21 @@\n+Mon May 11 09:33:10 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+        * genattr.c: Include stdarg.h/varargs.h.  Change function\n+\t`fatal' to use variable arguments instead of faking it with\n+\tinteger parameters.  Provide a prototype which also\n+        checks the format specifiers using ATTRIBUTE_PRINTF_1.\n+\n+        * genattrtab.c: Likewise.\n+        * gencodes.c: Likewise.\n+        * genconfig.c: Likewise.\n+        * genemit.c: Likewise.\n+        * genextract.c: Likewise.\n+        * genflags.c: Likewise.\n+        * genopinit.c: Likewise.\n+        * genpeep.c: Likewise.\n+        * genrecog.c: Likewise.\n+        * genoutput.c: Likewise.  Similarly for function `error'.\n+\n Sun May 10 02:27:03 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* acconfig.h (HAVE_VOLATILE): Insert stub for autoconf."}, {"sha": "c50e0fd45c5ea631f4533949ff4ed28f2e7ea18a", "filename": "gcc/genattr.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=320e7c40e730e7b6ab8346b4cc41989a9031c28d", "patch": "@@ -21,6 +21,11 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"hconfig.h\"\n+#ifdef __STDC__\n+#include <stdarg.h>\n+#else\n+#include <varargs.h>\n+#endif\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n@@ -32,7 +37,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_free free\n \n char *xmalloc PROTO((unsigned));\n-static void fatal ();\n+static void fatal PVPROTO ((char *, ...)) ATTRIBUTE_PRINTF_1;\n void fancy_abort PROTO((void));\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n@@ -221,11 +226,22 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal (s, a1, a2)\n-     char *s;\n+fatal VPROTO ((char *format, ...))\n {\n+#ifndef __STDC__\n+  char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char *);\n+#endif\n+\n   fprintf (stderr, \"genattr: \");\n-  fprintf (stderr, s, a1, a2);\n+  vfprintf (stderr, format, ap);\n+  va_end (ap);\n   fprintf (stderr, \"\\n\");\n   exit (FATAL_EXIT_CODE);\n }"}, {"sha": "5b73f959b41346465d2407f4d7252ac82915ca56", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=320e7c40e730e7b6ab8346b4cc41989a9031c28d", "patch": "@@ -96,7 +96,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"hconfig.h\"\n-/* varargs must always be included after *config.h.  */\n+/* varargs must always be included after *config.h, but before stdio.h.  */\n #ifdef __STDC__\n #include <stdarg.h>\n #else\n@@ -125,7 +125,7 @@ struct obstack *temp_obstack = &obstack2;\n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n char **insn_name_ptr = 0;\n \n-static void fatal ();\n+static void fatal PVPROTO ((char *, ...)) ATTRIBUTE_PRINTF_1;\n void fancy_abort PROTO((void));\n \n /* enough space to reserve for printing out ints */\n@@ -5769,12 +5769,22 @@ copy_rtx_unchanging (orig)\n }\n \n static void\n-fatal (s, a1, a2)\n-     char *s;\n-     char *a1, *a2;\n+fatal VPROTO ((char *format, ...))\n {\n+#ifndef __STDC__\n+  char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char *);\n+#endif\n+\n   fprintf (stderr, \"genattrtab: \");\n-  fprintf (stderr, s, a1, a2);\n+  vfprintf (stderr, format, ap);\n+  va_end (ap);\n   fprintf (stderr, \"\\n\");\n   exit (FATAL_EXIT_CODE);\n }"}, {"sha": "a3aa1fe2df11a3e3952ba5e0e81cdb2ec56f7dd2", "filename": "gcc/gencodes.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgencodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgencodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencodes.c?ref=320e7c40e730e7b6ab8346b4cc41989a9031c28d", "patch": "@@ -23,6 +23,11 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"hconfig.h\"\n+#ifdef __STDC__\n+#include <stdarg.h>\n+#else\n+#include <varargs.h>\n+#endif\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n@@ -34,7 +39,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_free free\n \n char *xmalloc PROTO((unsigned));\n-static void fatal ();\n+static void fatal PVPROTO ((char *, ...)) ATTRIBUTE_PRINTF_1;\n void fancy_abort PROTO((void));\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n@@ -79,11 +84,22 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal (s, a1, a2)\n-     char *s;\n+fatal VPROTO ((char *format, ...))\n {\n+#ifndef __STDC__\n+  char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char *);\n+#endif\n+\n   fprintf (stderr, \"gencodes: \");\n-  fprintf (stderr, s, a1, a2);\n+  vfprintf (stderr, format, ap);\n+  va_end (ap);\n   fprintf (stderr, \"\\n\");\n   exit (FATAL_EXIT_CODE);\n }"}, {"sha": "b01a24bfc289a4dd170265101bb1b037625c895c", "filename": "gcc/genconfig.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenconfig.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenconfig.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconfig.c?ref=320e7c40e730e7b6ab8346b4cc41989a9031c28d", "patch": "@@ -21,6 +21,11 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"hconfig.h\"\n+#ifdef __STDC__\n+#include <stdarg.h>\n+#else\n+#include <varargs.h>\n+#endif\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n@@ -50,7 +55,7 @@ static int clobbers_seen_this_insn;\n static int dup_operands_seen_this_insn;\n \n char *xmalloc PROTO((unsigned));\n-static void fatal ();\n+static void fatal PVPROTO ((char *, ...)) ATTRIBUTE_PRINTF_1;\n void fancy_abort PROTO((void));\n \n static void walk_insn_part PROTO((rtx, int, int));\n@@ -268,11 +273,22 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal (s, a1, a2)\n-     char *s;\n+fatal VPROTO ((char *format, ...))\n {\n+#ifndef __STDC__\n+  char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char *);\n+#endif\n+\n   fprintf (stderr, \"genconfig: \");\n-  fprintf (stderr, s, a1, a2);\n+  vfprintf (stderr, format, ap);\n+  va_end (ap);\n   fprintf (stderr, \"\\n\");\n   exit (FATAL_EXIT_CODE);\n }"}, {"sha": "86d7a42a9770c5cef5db62ae117e84ad1d0fefd6", "filename": "gcc/genemit.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=320e7c40e730e7b6ab8346b4cc41989a9031c28d", "patch": "@@ -20,6 +20,11 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"hconfig.h\"\n+#ifdef __STDC__\n+#include <stdarg.h>\n+#else\n+#include <varargs.h>\n+#endif\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n@@ -31,7 +36,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_free free\n \n char *xmalloc PROTO((unsigned));\n-static void fatal ();\n+static void fatal PVPROTO ((char *, ...)) ATTRIBUTE_PRINTF_1;\n void fancy_abort PROTO((void));\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n@@ -702,11 +707,22 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal (s, a1, a2)\n-     char *s;\n+fatal VPROTO ((char *format, ...))\n {\n+#ifndef __STDC__\n+  char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char *);\n+#endif\n+\n   fprintf (stderr, \"genemit: \");\n-  fprintf (stderr, s, a1, a2);\n+  vfprintf (stderr, format, ap);\n+  va_end (ap);\n   fprintf (stderr, \"\\n\");\n   exit (FATAL_EXIT_CODE);\n }"}, {"sha": "288b32bcbaffd2e727ad007d9d5ab4914ee9abf5", "filename": "gcc/genextract.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=320e7c40e730e7b6ab8346b4cc41989a9031c28d", "patch": "@@ -20,6 +20,11 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"hconfig.h\"\n+#ifdef __STDC__\n+#include <stdarg.h>\n+#else\n+#include <varargs.h>\n+#endif\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n@@ -100,7 +105,7 @@ static void walk_rtx PROTO ((rtx, char *));\n static void print_path PROTO ((char *));\n char *xmalloc PROTO ((unsigned));\n char *xrealloc PROTO ((char *, unsigned));\n-static void fatal ();\n+static void fatal PVPROTO ((char *, ...)) ATTRIBUTE_PRINTF_1;\n static char *copystr PROTO ((char *));\n static void mybzero ();\n void fancy_abort PROTO ((void));\n@@ -362,11 +367,22 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal (s, a1, a2)\n-     char *s;\n+fatal VPROTO ((char *format, ...))\n {\n+#ifndef __STDC__\n+  char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char *);\n+#endif\n+\n   fprintf (stderr, \"genextract: \");\n-  fprintf (stderr, s, a1, a2);\n+  vfprintf (stderr, format, ap);\n+  va_end (ap);\n   fprintf (stderr, \"\\n\");\n   exit (FATAL_EXIT_CODE);\n }"}, {"sha": "d389a733e515746fe8d2b842e414f05e03c4df72", "filename": "gcc/genflags.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=320e7c40e730e7b6ab8346b4cc41989a9031c28d", "patch": "@@ -23,6 +23,11 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"hconfig.h\"\n+#ifdef __STDC__\n+#include <stdarg.h>\n+#else\n+#include <varargs.h>\n+#endif\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n@@ -34,7 +39,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_free free\n \n char *xmalloc PROTO((unsigned));\n-static void fatal ();\n+static void fatal PVPROTO ((char *, ...)) ATTRIBUTE_PRINTF_1;\n void fancy_abort PROTO((void));\n \n /* Names for patterns.  Need to allow linking with print-rtl.  */\n@@ -199,11 +204,22 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal (s, a1, a2)\n-     char *s;\n+fatal VPROTO ((char *format, ...))\n {\n+#ifndef __STDC__\n+  char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char *);\n+#endif\n+\n   fprintf (stderr, \"genflags: \");\n-  fprintf (stderr, s, a1, a2);\n+  vfprintf (stderr, format, ap);\n+  va_end (ap);\n   fprintf (stderr, \"\\n\");\n   exit (FATAL_EXIT_CODE);\n }"}, {"sha": "a31a444642a69339623509f9ca22184b62e45e25", "filename": "gcc/genopinit.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=320e7c40e730e7b6ab8346b4cc41989a9031c28d", "patch": "@@ -20,6 +20,11 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"hconfig.h\"\n+#ifdef __STDC__\n+#include <stdarg.h>\n+#else\n+#include <varargs.h>\n+#endif\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n@@ -31,7 +36,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_free free\n \n char *xmalloc PROTO((unsigned));\n-static void fatal ();\n+static void fatal PVPROTO ((char *, ...)) ATTRIBUTE_PRINTF_1;\n void fancy_abort PROTO((void));\n \n /* Many parts of GCC use arrays that are indexed by machine mode and\n@@ -304,11 +309,22 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal (s, a1, a2)\n-     char *s;\n+fatal VPROTO ((char *format, ...))\n {\n+#ifndef __STDC__\n+  char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char *);\n+#endif\n+\n   fprintf (stderr, \"genopinit: \");\n-  fprintf (stderr, s, a1, a2);\n+  vfprintf (stderr, format, ap);\n+  va_end (ap);\n   fprintf (stderr, \"\\n\");\n   exit (FATAL_EXIT_CODE);\n }"}, {"sha": "9f40c85eeec06469924b242ccf46747fdf8cc67c", "filename": "gcc/genoutput.c", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=320e7c40e730e7b6ab8346b4cc41989a9031c28d", "patch": "@@ -91,6 +91,11 @@ It would not make an case in output_insn_hairy because the template\n given in the entry is a constant (it does not start with `*').  */\n \f\n #include \"hconfig.h\"\n+#ifdef __STDC__\n+#include <stdarg.h>\n+#else\n+#include <varargs.h>\n+#endif\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n@@ -108,9 +113,9 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_free free\n \n char *xmalloc PROTO((unsigned));\n-static void fatal ();\n+static void fatal PVPROTO ((char *, ...)) ATTRIBUTE_PRINTF_1;\n void fancy_abort PROTO((void));\n-static void error ();\n+static void error PVPROTO ((char *, ...)) ATTRIBUTE_PRINTF_1;\n static void mybcopy ();\n static void mybzero ();\n static int n_occurrences PROTO((int, char *));\n@@ -922,11 +927,22 @@ mybcopy (b1, b2, length)\n }\n \n static void\n-fatal (s, a1, a2, a3, a4)\n-     char *s;\n+fatal VPROTO ((char *format, ...))\n {\n+#ifndef __STDC__\n+  char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char *);\n+#endif\n+\n   fprintf (stderr, \"genoutput: \");\n-  fprintf (stderr, s, a1, a2, a3, a4);\n+  vfprintf (stderr, format, ap);\n+  va_end (ap);\n   fprintf (stderr, \"\\n\");\n   exit (FATAL_EXIT_CODE);\n }\n@@ -941,11 +957,22 @@ fancy_abort ()\n }\n \n static void\n-error (s, a1, a2)\n-     char *s;\n+error VPROTO ((char *format, ...))\n {\n+#ifndef __STDC__\n+  char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char *);\n+#endif\n+\n   fprintf (stderr, \"genoutput: \");\n-  fprintf (stderr, s, a1, a2);\n+  vfprintf (stderr, format, ap);\n+  va_end (ap);\n   fprintf (stderr, \"\\n\");\n \n   have_error = 1;"}, {"sha": "fd3939843bb77740f1f548331d6602d93a028469", "filename": "gcc/genpeep.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=320e7c40e730e7b6ab8346b4cc41989a9031c28d", "patch": "@@ -20,6 +20,11 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"hconfig.h\"\n+#ifdef __STDC__\n+#include <stdarg.h>\n+#else\n+#include <varargs.h>\n+#endif\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n@@ -47,7 +52,7 @@ struct link\n };\n \n char *xmalloc PROTO((unsigned));\n-static void fatal ();\n+static void fatal PVPROTO ((char *, ...)) ATTRIBUTE_PRINTF_1;\n void fancy_abort PROTO((void));\n \n static int max_opno;\n@@ -407,11 +412,22 @@ xrealloc (ptr, size)\n }\n \n static void\n-fatal (s, a1, a2)\n-     char *s;\n+fatal VPROTO ((char *format, ...))\n {\n+#ifndef __STDC__\n+  char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char *);\n+#endif\n+\n   fprintf (stderr, \"genpeep: \");\n-  fprintf (stderr, s, a1, a2);\n+  vfprintf (stderr, format, ap);\n+  va_end (ap);\n   fprintf (stderr, \"\\n\");\n   exit (FATAL_EXIT_CODE);\n }"}, {"sha": "5fc90f36ade248048b692718cb7dbb7ddfdbf18b", "filename": "gcc/genrecog.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/320e7c40e730e7b6ab8346b4cc41989a9031c28d/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=320e7c40e730e7b6ab8346b4cc41989a9031c28d", "patch": "@@ -47,6 +47,11 @@ Boston, MA 02111-1307, USA.  */\n    it returns the split rtl in a SEQUENCE.  */\n \n #include \"hconfig.h\"\n+#ifdef __STDC__\n+#include <stdarg.h>\n+#else\n+#include <varargs.h>\n+#endif\n #include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n@@ -191,7 +196,7 @@ static void change_state\tPROTO((char *, char *, int));\n static char *copystr\t\tPROTO((char *));\n static void mybzero\t\tPROTO((char *, unsigned));\n static void mybcopy\t\tPROTO((char *, char *, unsigned));\n-static void fatal\t\tPROTO((char *));\n+static void fatal\t\tPVPROTO((char *, ...)) ATTRIBUTE_PRINTF_1;\n char *xrealloc\t\t\tPROTO((char *, unsigned));\n char *xmalloc\t\t\tPROTO((unsigned));\n void fancy_abort\t\tPROTO((void));\n@@ -1669,11 +1674,22 @@ xmalloc (size)\n }\n \n static void\n-fatal (s)\n-     char *s;\n+fatal VPROTO ((char *format, ...))\n {\n+#ifndef __STDC__\n+  char *format;\n+#endif\n+  va_list ap;\n+\n+  VA_START (ap, format);\n+\n+#ifndef __STDC__\n+  format = va_arg (ap, char *);\n+#endif\n+\n   fprintf (stderr, \"genrecog: \");\n-  fprintf (stderr, s);\n+  vfprintf (stderr, format, ap);\n+  va_end (ap);\n   fprintf (stderr, \"\\n\");\n   fprintf (stderr, \"after %d definitions\\n\", next_index);\n   exit (FATAL_EXIT_CODE);"}]}