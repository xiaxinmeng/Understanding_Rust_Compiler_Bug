{"sha": "42b39995546a63fe7d9313744cdab21f356346b2", "node_id": "C_kwDOANBUbNoAKDQyYjM5OTk1NTQ2YTYzZmU3ZDkzMTM3NDRjZGFiMjFmMzU2MzQ2YjI", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-10-22T16:00:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-25T15:07:22Z"}, "message": "[Ada] Follow-on cleanups for Uint fields\n\ngcc/ada/\n\n\t* freeze.adb (Freeze_Fixed_Point_Type): Remove\n\tpreviously-inserted test for Uint_0; no longer needed.\n\t* gen_il-gen.ads: Improve comments.\n\t* repinfo.adb (Rep_Value): Use Ubool type for B.\n\t* repinfo.ads (Node_Ref): Use Unegative type.\n\t(Node_Ref_Or_Val): Document that values of this type can be\n\tNo_Uint.\n\t* exp_disp.adb (Make_Disp_Requeue_Body): Minor comment fix.\n\t* sem_ch3.adb: Likewise.\n\t* sem_ch8.adb: Likewise.\n\t* sinfo-utils.adb (End_Location): End_Span can never be No_Uint,\n\tso remove the \"if No (L)\" test.\n\t* uintp.adb (Image_String): Use \"for ... of\" loop.\n\t* uintp.ads (Unegative): New type for negative integers.  We\n\tgive it a long name (unlike Unat and Upos) because it is rarely\n\tused.", "tree": {"sha": "db228521ca4ebc7e25e5145b8f2b420ff1857ea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db228521ca4ebc7e25e5145b8f2b420ff1857ea3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42b39995546a63fe7d9313744cdab21f356346b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42b39995546a63fe7d9313744cdab21f356346b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42b39995546a63fe7d9313744cdab21f356346b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42b39995546a63fe7d9313744cdab21f356346b2/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed00b051d907c6f2383c906ee2354c7ba7488dff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed00b051d907c6f2383c906ee2354c7ba7488dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed00b051d907c6f2383c906ee2354c7ba7488dff"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "88f11b28dd5245841fbc296c4d42911e71b5c339", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=42b39995546a63fe7d9313744cdab21f356346b2", "patch": "@@ -3037,7 +3037,7 @@ package body Exp_Disp is\n    begin\n       pragma Assert (not Restriction_Active (No_Dispatching_Calls));\n \n-      --  Null body is generated for interface types and non-concurrent\n+      --  Null body is generated for interface types and nonconcurrent\n       --  tagged types.\n \n       if Is_Interface (Typ)"}, {"sha": "97a51db9d4b5209fcf855046730fafeb2626cdc1", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=42b39995546a63fe7d9313744cdab21f356346b2", "patch": "@@ -9500,9 +9500,7 @@ package body Freeze is\n          Minsiz : constant Uint := UI_From_Int (Minimum_Size (Typ));\n \n       begin\n-         if Known_RM_Size (Typ)\n-           and then RM_Size (Typ) /= Uint_0\n-         then\n+         if Known_RM_Size (Typ) then\n             if RM_Size (Typ) < Minsiz then\n                Error_Msg_Uint_1 := RM_Size (Typ);\n                Error_Msg_Uint_2 := Minsiz;"}, {"sha": "56b06064f3e2aa766ce442a5d2d13afba2fef3a8", "filename": "gcc/ada/gen_il-gen.ads", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Fgen_il-gen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Fgen_il-gen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgen_il-gen.ads?ref=42b39995546a63fe7d9313744cdab21f356346b2", "patch": "@@ -204,9 +204,22 @@ package Gen_IL.Gen is\n    --  Gen_IL.Fields, and delete all occurrences from Gen_IL.Gen.Gen_Entities.\n \n    --  If a field is not set, it is initialized by default to whatever value is\n-   --  represented by all-zero bits, with two exceptions: Elist fields default\n-   --  to No_Elist, and Uint fields default to Uint_0. In retrospect, it would\n-   --  have been better to use No_Uint instead of Uint_0.\n+   --  represented by all-zero bits, with some exceptions. This means Flags are\n+   --  initialized to False, Node_Ids and List_Ids are initialized to Empty,\n+   --  and enumeration fields are initialized to 'First of the type (assuming\n+   --  there is no representation clause).\n+   --\n+   --  Elists default to No_Elist.\n+   --\n+   --  Fields of type Uint (but not its subtypes) are initialized to No_Uint.\n+   --  Fields of subtypes Valid_Uint, Unat, Upos, Nonzero_Uint, and Ureal have\n+   --  no default; it is an error to call a getter before calling the setter.\n+   --  Likewise, other types whose range does not include zero have no default\n+   --  (see package Types for the ranges).\n+   --\n+   --  If a node is created by a function in Nmake, then the defaults are\n+   --  different from what is specified above. The parameters of Make_...\n+   --  functions can have defaults specified; see Create_Syntactic_Field.\n \n    procedure Create_Node_Union_Type\n      (T : Abstract_Node; Children : Type_Array);"}, {"sha": "b86885cec6c084a63a88cb0d9607925040535e6f", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=42b39995546a63fe7d9313744cdab21f356346b2", "patch": "@@ -2120,7 +2120,7 @@ package body Repinfo is\n \n    function Rep_Value (Val : Node_Ref_Or_Val; D : Discrim_List) return Uint is\n \n-      function B (Val : Boolean) return Uint;\n+      function B (Val : Boolean) return Ubool;\n       --  Returns Uint_0 for False, Uint_1 for True\n \n       function T (Val : Node_Ref_Or_Val) return Boolean;\n@@ -2141,7 +2141,7 @@ package body Repinfo is\n       -- B --\n       -------\n \n-      function B (Val : Boolean) return Uint is\n+      function B (Val : Boolean) return Ubool is\n       begin\n          if Val then\n             return Uint_1;"}, {"sha": "d07208ed8a35682d9345f0561e87a7f9da71cc07", "filename": "gcc/ada/repinfo.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Frepinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Frepinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.ads?ref=42b39995546a63fe7d9313744cdab21f356346b2", "patch": "@@ -118,12 +118,12 @@ package Repinfo is\n    --  this field is done only in -gnatR3 mode, and in other modes, the value\n    --  is set to Uint_Minus_1.\n \n-   subtype Node_Ref is Uint;\n+   subtype Node_Ref is Unegative;\n    --  Subtype used for negative Uint values used to represent nodes\n \n    subtype Node_Ref_Or_Val is Uint;\n-   --  Subtype used for values that can either be a Node_Ref (negative)\n-   --  or a value (non-negative)\n+   --  Subtype used for values that can be a Node_Ref (negative) or a value\n+   --  (non-negative) or No_Uint.\n \n    type TCode is range 0 .. 27;\n    --  Type used on Ada side to represent DEFTREECODE values defined in\n@@ -306,7 +306,7 @@ package Repinfo is\n    --  In the case of components, if the location of the component is static,\n    --  then all four fields (Component_Bit_Offset, Normalized_Position, Esize,\n    --  and Normalized_First_Bit) are set to appropriate values. In the case of\n-   --  a non-static component location, Component_Bit_Offset is not used and\n+   --  a nonstatic component location, Component_Bit_Offset is not used and\n    --  is left set to Unknown. Normalized_Position and Normalized_First_Bit\n    --  are set appropriately.\n "}, {"sha": "152ef83387dcebc0c44bc2d487de268c26678229", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=42b39995546a63fe7d9313744cdab21f356346b2", "patch": "@@ -21301,7 +21301,7 @@ package body Sem_Ch3 is\n                      goto Leave;\n                   end;\n \n-               --  For non-concurrent types, transfer explicit primitives, but\n+               --  For nonconcurrent types, transfer explicit primitives, but\n                --  omit those inherited from the parent of the private view\n                --  since they will be re-inherited later on.\n "}, {"sha": "686d4378f8cc6b7c6e31674c11d7b358bdea7b48", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=42b39995546a63fe7d9313744cdab21f356346b2", "patch": "@@ -9236,7 +9236,7 @@ package body Sem_Ch8 is\n       if Ekind (S) = E_Void then\n          null;\n \n-      --  Set scope depth if not a non-concurrent type, and we have not yet set\n+      --  Set scope depth if not a nonconcurrent type, and we have not yet set\n       --  the scope depth. This means that we have the first occurrence of the\n       --  scope, and this is where the depth is set.\n "}, {"sha": "ad8606fd3ed29de9b194de54589d90336f8a5f9d", "filename": "gcc/ada/sinfo-utils.adb", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Fsinfo-utils.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Fsinfo-utils.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo-utils.adb?ref=42b39995546a63fe7d9313744cdab21f356346b2", "patch": "@@ -189,13 +189,9 @@ package body Sinfo.Utils is\n    ------------------\n \n    function End_Location (N : Node_Id) return Source_Ptr is\n-      L : constant Uint := End_Span (N);\n+      L : constant Valid_Uint := End_Span (N);\n    begin\n-      if No (L) then\n-         return No_Location;\n-      else\n-         return Source_Ptr (Int (Sloc (N)) + UI_To_Int (L));\n-      end if;\n+      return Source_Ptr (Int (Sloc (N)) + UI_To_Int (L));\n    end End_Location;\n \n    --------------------"}, {"sha": "06f66806702449abadcedaf2d12fb87178c8cb2f", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=42b39995546a63fe7d9313744cdab21f356346b2", "patch": "@@ -380,8 +380,8 @@ package body Uintp is\n \n       procedure Image_String (S : String) is\n       begin\n-         for X in S'Range loop\n-            Image_Char (S (X));\n+         for X of S loop\n+            Image_Char (X);\n          end loop;\n       end Image_String;\n "}, {"sha": "08f673879b82010dfb4d9e1d9e28c2859c40aadc", "filename": "gcc/ada/uintp.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Fuintp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42b39995546a63fe7d9313744cdab21f356346b2/gcc%2Fada%2Fuintp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.ads?ref=42b39995546a63fe7d9313744cdab21f356346b2", "patch": "@@ -104,6 +104,7 @@ package Uintp is\n    subtype Unat is Valid_Uint with Predicate => Unat >= Uint_0; -- natural\n    subtype Upos is Valid_Uint with Predicate => Upos >= Uint_1; -- positive\n    subtype Nonzero_Uint is Valid_Uint with Predicate => Nonzero_Uint /= Uint_0;\n+   subtype Unegative is Valid_Uint with Predicate => Unegative < Uint_0;\n    subtype Ubool is Valid_Uint with Predicate => Ubool in Uint_0 | Uint_1;\n    subtype Opt_Ubool is Uint with\n      Predicate => No (Opt_Ubool) or else Opt_Ubool in Ubool;"}]}