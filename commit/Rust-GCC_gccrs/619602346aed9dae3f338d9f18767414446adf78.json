{"sha": "619602346aed9dae3f338d9f18767414446adf78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE5NjAyMzQ2YWVkOWRhZTNmMzM4ZDlmMTg3Njc0MTQ0NDZhZGY3OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-21T15:08:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-21T15:08:10Z"}, "message": "testsuite: Extend C++ struct-layout-1.exp testing to test C++14 vs. C++17 interoperability of structs with empty bases [PR94383]\n\nJonathan reported an ABI incompatibility between C++14 and C++17 in\npassing some aggregates with empty bases on aarch64 (and apparently on arm\ntoo).\n\nThe following patch adds 3000 (by default) tests for such interoperability,\nusing the struct-layout-1* framework.  The current 3000 tests are generated\nas is (so unchanged from previous ones), and afterwards there is another set\nof 3000 ones, where always one of the tNNN_x.C and tNNN_y.C tests get added\n-std=c++14 -DCXX14_VS_CXX17 and another one -std=c++17 -DCXX14_VS_CXX17\noptions (which one which is chosen pseudo-randomly), which causes the\nstructs to have an empty base.\n\nI haven't added (yet) checks if the alternate compiler does support these\noptions (I think that can be done incrementally), so for now this testing is\ndone only if the alternate compiler is not used.\n\nI had to fix a bug in the flexible array handling, because while we were\nlucky in the 3000 generated tests not to have toplevel fields after field\nwith flexible array members, in the next 3000 we aren't lucky anymore.\nBut even with that change, diff -upr between old and new\ntestsuite/g++/g++.dg/g++.dg-struct-layout-1/ doesn't show any differences\nexcept for the ^Only in... messages for the new tests in there.\n\nBootstrapped/regtested on x86_64-linux and i686-linux and additionally\ntested on aarch64-linux, where\nFAIL: tmpdir-g++.dg-struct-layout-1/t032 cp_compat_x_tst.o-cp_compat_y_tst.o execute\nFAIL: tmpdir-g++.dg-struct-layout-1/t056 cp_compat_x_tst.o-cp_compat_y_tst.o execute\nFAIL: tmpdir-g++.dg-struct-layout-1/t057 cp_compat_x_tst.o-cp_compat_y_tst.o execute\nFAIL: tmpdir-g++.dg-struct-layout-1/t058 cp_compat_x_tst.o-cp_compat_y_tst.o execute\nFAIL: tmpdir-g++.dg-struct-layout-1/t059 cp_compat_x_tst.o-cp_compat_y_tst.o execute\nbecause of the backend bug, and with that bug fixed it succeeds.\nMatthew has kindly tested it also on aarch64-linux and arm*-*.\n\nThe primary goal of the patch is catch if some targets other than aarch64 or\narm aren't affected too.\n\n2020-04-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/94383\n\t* g++.dg/compat/struct-layout-1.exp: If !$use_alt, add -c to generator\n\targs.\n\t* g++.dg/compat/struct-layout-1_generate.c (dg_options): Add another\n\t%s to the start of dg-options arg.\n\t(cxx14_vs_cxx17, do_cxx14_vs_cxx17): New variables.\n\t(switchfiles): If cxx14_vs_cxx17, prepend -std=c++14 -DCXX14_VS_CXX17\n\tor -std=c++17 -DCXX17_VS_CXX14 - randomly - to dg-options.\n\t(output): Don't append further fields once one with flexible array\n\tmember is added.\n\t(generate_random_tests): Don't use toplevel unions if cxx14_vs_cxx17.\n\t(main): If -c, emit second set of tests for -std=c++14 vs. -std=c++17\n\ttesting.\n\t* g++.dg/compat/struct-layout-1_x1.h (empty_base): New type.\n\t(EMPTY_BASE): Define.\n\t(TX): Use EMPTY_BASE.\n\t* g++.dg/compat/struct-layout-1_y1.h (empty_base): New type.\n\t(EMPTY_BASE): Define.\n\t(TX): Use EMPTY_BASE.", "tree": {"sha": "59ad149afa45faa4dc6cff80eaab372fd09b21e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59ad149afa45faa4dc6cff80eaab372fd09b21e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/619602346aed9dae3f338d9f18767414446adf78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/619602346aed9dae3f338d9f18767414446adf78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/619602346aed9dae3f338d9f18767414446adf78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/619602346aed9dae3f338d9f18767414446adf78/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73f8e9dca5ff891ed19001b213fd1f6ce31417e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f8e9dca5ff891ed19001b213fd1f6ce31417e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f8e9dca5ff891ed19001b213fd1f6ce31417e3"}], "stats": {"total": 113, "additions": 95, "deletions": 18}, "files": [{"sha": "2d5b81f7d4c1971fb38822cd70b4a69878cb09e1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619602346aed9dae3f338d9f18767414446adf78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619602346aed9dae3f338d9f18767414446adf78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=619602346aed9dae3f338d9f18767414446adf78", "patch": "@@ -1,5 +1,25 @@\n 2020-04-21  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/94383\n+\t* g++.dg/compat/struct-layout-1.exp: If !$use_alt, add -c to generator\n+\targs.\n+\t* g++.dg/compat/struct-layout-1_generate.c (dg_options): Add another\n+\t%s to the start of dg-options arg.\n+\t(cxx14_vs_cxx17, do_cxx14_vs_cxx17): New variables.\n+\t(switchfiles): If cxx14_vs_cxx17, prepend -std=c++14 -DCXX14_VS_CXX17\n+\tor -std=c++17 -DCXX17_VS_CXX14 - randomly - to dg-options.\n+\t(output): Don't append further fields once one with flexible array\n+\tmember is added.\n+\t(generate_random_tests): Don't use toplevel unions if cxx14_vs_cxx17.\n+\t(main): If -c, emit second set of tests for -std=c++14 vs. -std=c++17\n+\ttesting.\n+\t* g++.dg/compat/struct-layout-1_x1.h (empty_base): New type.\n+\t(EMPTY_BASE): Define.\n+\t(TX): Use EMPTY_BASE.\n+\t* g++.dg/compat/struct-layout-1_y1.h (empty_base): New type.\n+\t(EMPTY_BASE): Define.\n+\t(TX): Use EMPTY_BASE.\n+\n \tPR c/94641\n \t* c-c++-common/ubsan/pr94641.c: New test.\n "}, {"sha": "99bfdbe2ff73dc46a8affb2a1cf6290ac9355e2f", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619602346aed9dae3f338d9f18767414446adf78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619602346aed9dae3f338d9f18767414446adf78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp?ref=619602346aed9dae3f338d9f18767414446adf78", "patch": "@@ -142,6 +142,9 @@ if { $status == 0 } then {\n     file delete -force $tstobjdir\n     file mkdir $tstobjdir\n     set generator_args \"-s $srcdir/$subdir -d $tstobjdir\"\n+    if { $use_alt == 0 } then {\n+\tset generator_args \"$generator_args -c\"\n+    }\n     if [info exists env(RUN_ALL_COMPAT_TESTS) ] then {\n \tset generator_args \"$generator_args -n 15000\"\n     }"}, {"sha": "990e6f439e5db4098eb265b99c8ddc33c979526a", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1_generate.c", "status": "modified", "additions": 58, "deletions": 16, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619602346aed9dae3f338d9f18767414446adf78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619602346aed9dae3f338d9f18767414446adf78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_generate.c?ref=619602346aed9dae3f338d9f18767414446adf78", "patch": "@@ -1,5 +1,5 @@\n /* Structure layout test generator.\n-   Copyright (C) 2004-2014\n+   Copyright (C) 2004-2020\n    Free Software Foundation, Inc.\n    Contributed by Jakub Jelinek <jakub@redhat.com>.\n \n@@ -44,12 +44,12 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n const char *dg_options[] = {\n-\"/* { dg-options \\\"%s-I%s -Wno-abi\\\" } */\\n\",\n-\"/* { dg-options \\\"%s-I%s -mno-mmx -Wno-abi\\\" { target i?86-*-* x86_64-*-* } } */\\n\",\n-\"/* { dg-options \\\"%s-I%s -fno-common\\\" { target hppa*-*-hpux* powerpc*-*-darwin* *-*-mingw32* *-*-cygwin* } } */\\n\",\n-\"/* { dg-options \\\"%s-I%s -mno-mmx -fno-common -Wno-abi\\\" { target i?86-*-darwin* x86_64-*-darwin* i?86-*-mingw32* x86_64-*-mingw32* i?86-*-cygwin* } } */\\n\",\n-\"/* { dg-options \\\"%s-I%s -mno-base-addresses\\\" { target mmix-*-* } } */\\n\",\n-\"/* { dg-options \\\"%s-I%s -mlongcalls -mtext-section-literals\\\" { target xtensa*-*-* } } */\\n\"\n+\"/* { dg-options \\\"%s%s-I%s -Wno-abi\\\" } */\\n\",\n+\"/* { dg-options \\\"%s%s-I%s -mno-mmx -Wno-abi\\\" { target i?86-*-* x86_64-*-* } } */\\n\",\n+\"/* { dg-options \\\"%s%s-I%s -fno-common\\\" { target hppa*-*-hpux* powerpc*-*-darwin* *-*-mingw32* *-*-cygwin* } } */\\n\",\n+\"/* { dg-options \\\"%s%s-I%s -mno-mmx -fno-common -Wno-abi\\\" { target i?86-*-darwin* x86_64-*-darwin* i?86-*-mingw32* x86_64-*-mingw32* i?86-*-cygwin* } } */\\n\",\n+\"/* { dg-options \\\"%s%s-I%s -mno-base-addresses\\\" { target mmix-*-* } } */\\n\",\n+\"/* { dg-options \\\"%s%s-I%s -mlongcalls -mtext-section-literals\\\" { target xtensa*-*-* } } */\\n\"\n #define NDG_OPTIONS (sizeof (dg_options) / sizeof (dg_options[0]))\n };\n \n@@ -508,6 +508,8 @@ static int short_enums;\n static const char *destdir;\n static const char *srcdir;\n static const char *srcdir_safe;\n+static int cxx14_vs_cxx17;\n+static int do_cxx14_vs_cxx17;\n FILE *outfile;\n \n void\n@@ -516,6 +518,8 @@ switchfiles (int fields)\n   static int filecnt;\n   static char *destbuf, *destptr;\n   int i;\n+  int cxx14_first = 0;\n+  const char *cxxnn = \"\";\n \n   ++filecnt;\n   if (outfile)\n@@ -545,8 +549,15 @@ switchfiles (int fields)\n       exit (1);\n     }\n \n+  if (cxx14_vs_cxx17)\n+    {\n+      cxx14_first = generate_random () & 1;\n+      cxxnn = (cxx14_first\n+\t       ? \"-std=c++14 -DCXX14_VS_CXX17 \"\n+\t       : \"-std=c++17 -DCXX14_VS_CXX17 \");\n+    }\n   for (i = 0; i < NDG_OPTIONS; i++)\n-    fprintf (outfile, dg_options[i], \"\", srcdir_safe);\n+    fprintf (outfile, dg_options[i], \"\", \"\", srcdir_safe);\n   fprintf (outfile, \"\\n\\\n #include \\\"struct-layout-1.h\\\"\\n\\\n \\n\\\n@@ -572,7 +583,7 @@ int main (void)\\n\\\n   if (outfile == NULL)\n     goto fail;\n   for (i = 0; i < NDG_OPTIONS; i++)\n-    fprintf (outfile, dg_options[i], \"-w \", srcdir_safe);\n+    fprintf (outfile, dg_options[i], cxxnn, \"-w \", srcdir_safe);\n   fprintf (outfile, \"\\n\\\n #include \\\"struct-layout-1_x1.h\\\"\\n\\\n #include \\\"t%03d_test.h\\\"\\n\\\n@@ -583,8 +594,12 @@ int main (void)\\n\\\n   outfile = fopen (destbuf, \"w\");\n   if (outfile == NULL)\n     goto fail;\n+  if (cxx14_vs_cxx17)\n+    cxxnn = (cxx14_first\n+\t     ? \"-std=c++17 -DCXX14_VS_CXX17 \"\n+\t     : \"-std=c++14 -DCXX14_VS_CXX17 \");\n   for (i = 0; i < NDG_OPTIONS; i++)\n-    fprintf (outfile, dg_options[i], \"-w \", srcdir_safe);\n+    fprintf (outfile, dg_options[i], cxxnn, \"-w \", srcdir_safe);\n   fprintf (outfile, \"\\n\\\n #include \\\"struct-layout-1_y1.h\\\"\\n\\\n #include \\\"t%03d_test.h\\\"\\n\\\n@@ -1167,7 +1182,7 @@ e_insert (struct entry *e)\n void\n output (struct entry *e)\n {\n-  int i;\n+  int i, flex, len;\n   char c;\n   struct entry *n;\n \n@@ -1190,9 +1205,17 @@ output (struct entry *e)\n     fprintf (outfile, \"U(%d,\", idx);\n   c = 'a';\n \n-  int flex = 0;\n+  flex = 0;\n+  len = e[0].len;\n   for (i = 1; i <= e[0].len; )\n-    i += subfield (e + i, &c, &flex, 0);\n+    {\n+      if (flex)\n+\t{\n+\t  e[0].len = i - 1;\n+\t  break;\n+\t}\n+      i += subfield (e + i, &c, &flex, 0);\n+    }\n   \n   fputs (\",\", outfile);\n   c = 'a';\n@@ -1202,6 +1225,7 @@ output (struct entry *e)\n       if (e[0].etype == ETYPE_UNION)\n \tbreak;\n     }\n+  e[0].len = len;\n   fputs (\")\\n\", outfile);\n   if (output_one && idx == limidx)\n     exit (0);\n@@ -1539,7 +1563,7 @@ generate_random_tests (enum FEATURE features, int len)\n     abort ();\n   memset (e, 0, sizeof (e));\n   r = generate_random ();\n-  if ((r & 7) == 0)\n+  if ((r & 7) == 0 && !cxx14_vs_cxx17)\n     e[0].etype = ETYPE_UNION;\n   else\n     e[0].etype = ETYPE_STRUCT;\n@@ -1577,7 +1601,7 @@ main (int argc, char **argv)\n       if (argv[i][0] == '-' && argv[i][2] == '\\0')\n \tc = argv[i][1];\n       optarg = argv[i + 1];\n-      if (!optarg)\n+      if (!optarg && c != 'e' && c != 'c')\n \tgoto usage;\n       switch (c)\n \t{\n@@ -1598,6 +1622,10 @@ main (int argc, char **argv)\n \t  short_enums = 1;\n \t  i--;\n \t  break;\n+\tcase 'c':\n+\t  do_cxx14_vs_cxx17 = 1;\n+\t  i--;\n+\t  break;\n \tdefault:\n \t  fprintf (stderr, \"unrecognized option %s\\n\", argv[i]);\n \t  goto usage;\n@@ -1614,13 +1642,18 @@ main (int argc, char **argv)\n \t  return 1;\n \t}\n       n = limidx + 1;\n+      if (do_cxx14_vs_cxx17)\n+\t{\n+\t  fputs (\"-c is incompatible with -i\", stderr);\n+\t  return 1;\n+\t}\n     }\n \n   if (destdir == NULL && !output_one)\n     {\n     usage:\n       fprintf (stderr, \"Usage:\\n\\\n-%s [-e] [-s srcdir -d destdir] [-n count] [-i idx]\\n\\\n+%s [-e] [-c] [-s srcdir -d destdir] [-n count] [-i idx]\\n\\\n Either -s srcdir -d destdir or -i idx must be used\\n\", argv[0]);\n       return 1;\n     }\n@@ -1650,6 +1683,7 @@ Either -s srcdir -d destdir or -i idx must be used\\n\", argv[0]);\n   for (i = 0; i < NATYPES2; ++i)\n     if (attrib_types[i].bitfld)\n       aligned_bitfld_types[n_aligned_bitfld_types++] = attrib_types[i];\n+repeat:;\n   for (i = 0; i < sizeof (features) / sizeof (features[0]); ++i)\n     {\n       int startidx = idx;\n@@ -1696,6 +1730,14 @@ Either -s srcdir -d destdir or -i idx must be used\\n\", argv[0]);\n     limidx = idx;\n   while (idx < n)\n     generate_random_tests (ALL_FEATURES, 1 + (generate_random () % 25));\n+  if (do_cxx14_vs_cxx17)\n+    {\n+      cxx14_vs_cxx17 = 1;\n+      do_cxx14_vs_cxx17 = 0;\n+      limidx = 0;\n+      idx = 0;\n+      goto repeat;\n+    }\n   fclose (outfile);\n   return 0;\n }"}, {"sha": "0023e475e8596e3ba3ab959c40ac76b4a41563ab", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1_x1.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619602346aed9dae3f338d9f18767414446adf78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_x1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619602346aed9dae3f338d9f18767414446adf78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_x1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_x1.h?ref=619602346aed9dae3f338d9f18767414446adf78", "patch": "@@ -35,8 +35,14 @@ int fn9 (void) { return 9; }\n   s##n.x = v;\t\t\t\t\t\t\t\\\n   a##n[2].x = w;\t\t\t\t\t\t\\\n   ++j;\n+#ifdef CXX14_VS_CXX17\n+struct empty_base {};\n+#define EMPTY_BASE : public empty_base\n+#else\n+#define EMPTY_BASE\n+#endif\n #define TX(n, type, attrs, fields, ops) \t\t\t\\\n-type S##n { fields } attrs;\t\t\t\t\t\\\n+type S##n EMPTY_BASE { fields } attrs;\t\t\t\t\\\n type S##n s##n;\t\t\t\t\t\t\t\\\n extern type S##n a##n[5];\t\t\t\t\t\\\n extern type S##n check##n (type S##n, type S##n *,\t\t\\"}, {"sha": "a0bbccd25ceef5cade9e4f1f88f02b0102fed41e", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1_y1.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619602346aed9dae3f338d9f18767414446adf78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_y1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619602346aed9dae3f338d9f18767414446adf78/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_y1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1_y1.h?ref=619602346aed9dae3f338d9f18767414446adf78", "patch": "@@ -37,8 +37,14 @@\n     FAIL (n, 56);\t\t\t\t\t\t\\\n   ret.x = s##n.x;\t\t\t\t\t\t\\\n   ++j;\n+#ifdef CXX14_VS_CXX17\n+struct empty_base {};\n+#define EMPTY_BASE : public empty_base\n+#else\n+#define EMPTY_BASE\n+#endif\n #define TX(n, type, attrs, fields, ops) \t\t\t\\\n-type S##n { fields } attrs;\t\t\t\t\t\\\n+type S##n EMPTY_BASE { fields } attrs;\t\t\t\t\\\n extern type S##n s##n;\t\t\t\t\t\t\\\n type S##n a##n[5];\t\t\t\t\t\t\\\n type S##n\t\t\t\t\t\t\t\\"}]}