{"sha": "6eeef4cc6780c010266ded53101cf22fc1b3ba1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVlZWY0Y2M2NzgwYzAxMDI2NmRlZDUzMTAxY2YyMmZjMWIzYmExZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-11-14T18:05:55Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-11-14T18:05:55Z"}, "message": "tree-ssa-threadedge.c (thread_through_normal_block): Only push the EDGE_START_JUMP_THREAD marker if the jump threading path is empty.\n\n\t* tree-ssa-threadedge.c (thread_through_normal_block): Only push\n\tthe EDGE_START_JUMP_THREAD marker if the jump threading path is\n\tempty.\n\nFrom-SVN: r204793", "tree": {"sha": "fc67e2a30d6bb3fbe6b464c62beebc44c84cfea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc67e2a30d6bb3fbe6b464c62beebc44c84cfea4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eeef4cc6780c010266ded53101cf22fc1b3ba1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eeef4cc6780c010266ded53101cf22fc1b3ba1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eeef4cc6780c010266ded53101cf22fc1b3ba1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eeef4cc6780c010266ded53101cf22fc1b3ba1d/comments", "author": null, "committer": null, "parents": [{"sha": "d39ebff1de815b9edc8c241f1c1d89afb37da85a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d39ebff1de815b9edc8c241f1c1d89afb37da85a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d39ebff1de815b9edc8c241f1c1d89afb37da85a"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "76215c106227037ede2cfb8a56d4e8ca4303a24c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeef4cc6780c010266ded53101cf22fc1b3ba1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeef4cc6780c010266ded53101cf22fc1b3ba1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6eeef4cc6780c010266ded53101cf22fc1b3ba1d", "patch": "@@ -1,3 +1,9 @@\n+2013-11-14  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-threadedge.c (thread_through_normal_block): Only push\n+\tthe EDGE_START_JUMP_THREAD marker if the jump threading path is\n+\tempty.\n+\n 2013-11-14  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* doc/invoke.texi: Update documentation for AArch64's -mcpu"}, {"sha": "cabfc824c628540c55154bc4cc9399f21eb8a213", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eeef4cc6780c010266ded53101cf22fc1b3ba1d/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eeef4cc6780c010266ded53101cf22fc1b3ba1d/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=6eeef4cc6780c010266ded53101cf22fc1b3ba1d", "patch": "@@ -940,20 +940,26 @@ thread_through_normal_block (edge e,\n \t      || bitmap_bit_p (visited, dest->index))\n \t    return false;\n \n-          jump_thread_edge *x\n-\t    = new jump_thread_edge (e, EDGE_START_JUMP_THREAD);\n-\t  path->safe_push (x);\n-\t  *backedge_seen_p |= ((e->flags & EDGE_DFS_BACK) != 0);\n+\t  /* Only push the EDGE_START_JUMP_THREAD marker if this is\n+\t     first edge on the path.  */\n+\t  if (path->length () == 0)\n+\t    {\n+              jump_thread_edge *x\n+\t        = new jump_thread_edge (e, EDGE_START_JUMP_THREAD);\n+\t      path->safe_push (x);\n+\t      *backedge_seen_p |= ((e->flags & EDGE_DFS_BACK) != 0);\n+\t    }\n \n-\t  x = new jump_thread_edge (taken_edge, EDGE_COPY_SRC_BLOCK);\n+\t  jump_thread_edge *x\n+\t    = new jump_thread_edge (taken_edge, EDGE_COPY_SRC_BLOCK);\n \t  path->safe_push (x);\n \t  *backedge_seen_p |= ((taken_edge->flags & EDGE_DFS_BACK) != 0);\n \n \t  /* See if we can thread through DEST as well, this helps capture\n \t     secondary effects of threading without having to re-run DOM or\n \t     VRP.  */\n \t  if (!*backedge_seen_p\n-\t       || ! cond_arg_set_in_bb (taken_edge, e->dest))\n+\t      || ! cond_arg_set_in_bb (taken_edge, e->dest))\n \t    {\n \t      /* We don't want to thread back to a block we have already\n  \t\t visited.  This may be overly conservative.  */"}]}