{"sha": "4bade865ff7ae111732de03aa755398370e01218", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJhZGU4NjVmZjdhZTExMTczMmRlMDNhYTc1NTM5ODM3MGUwMTIxOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-07-09T16:02:58Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-07-09T16:02:58Z"}, "message": "configure.ac (gcc_cv_as_ix86_rep_lock_prefix): Also check for \"lock addl\".\n\n\t* configure.ac (gcc_cv_as_ix86_rep_lock_prefix): Also check\n\tfor \"lock addl\".\n\t* configure: Regenerate.\n\t* config/i386/i386.c (ix86_print_operand) <case ';'>:\n\tRemove TARGET_MACHO.\n\nFrom-SVN: r162001", "tree": {"sha": "b4af02181315c1ef86e053687e35cb39d8c29803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4af02181315c1ef86e053687e35cb39d8c29803"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bade865ff7ae111732de03aa755398370e01218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bade865ff7ae111732de03aa755398370e01218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bade865ff7ae111732de03aa755398370e01218", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bade865ff7ae111732de03aa755398370e01218/comments", "author": null, "committer": null, "parents": [{"sha": "2c9ccc21b11aa2bb63b908b33c8f9bc9c15c960d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c9ccc21b11aa2bb63b908b33c8f9bc9c15c960d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c9ccc21b11aa2bb63b908b33c8f9bc9c15c960d"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "7d67cf92ee419462b89a7b56cd007d96d8c6aebe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bade865ff7ae111732de03aa755398370e01218/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bade865ff7ae111732de03aa755398370e01218/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bade865ff7ae111732de03aa755398370e01218", "patch": "@@ -1,3 +1,11 @@\n+2010-07-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* configure.ac (gcc_cv_as_ix86_rep_lock_prefix): Also check\n+\tfor \"lock addl\".\n+\t* configure: Regenerate.\n+\t* config/i386/i386.c (ix86_print_operand) <case ';'>:\n+\tRemove TARGET_MACHO.\n+\n 2010-07-09  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_override_options): Fix setting of\n@@ -211,8 +219,7 @@\n \tPR tree-optimization/44831\n \t* tree-ssa-phiprop.c (phiprop_insert_phi): Properly build\n \ta MEM_REF preserving TBAA info of the original dereference.\n-\tDereference the original pointer if the address is not\n-\tinvariant.\n+\tDereference the original pointer if the address is not invariant.\n \t(propagate_with_phi): Fixup type checks wrt MEM_REFs.  Require\n \tat least one invariant address that we are going to dereference.\n \n@@ -487,8 +494,7 @@\n \t* config/i386/i386.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n \t* config/i386/cygming.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n \t(SUBTARGET_ASM_DECLARE_FUNCTION_NAME): Likewise.\n-\t* config/i386/i386-protos.h (ix86_asm_declare_function_name):\n-\tLikewise.\n+\t* config/i386/i386-protos.h (ix86_asm_declare_function_name): Likewise.\n \t* doc/extend.texi: Likewise.\n \n 2010-07-07  H.J. Lu  <hongjiu.lu@intel.com>\n@@ -534,7 +540,7 @@\n \n 2010-07-07  Jan Hubicka  <jh@suse.cz>\n \n-\tWith parts by Richard Guenther\n+\tWith parts by Richard Guenther.\n \n \tPR middle-end/44813\n \t* tree-ssa-uninit.c (ssa_undefined_value_p): Result decl is defined"}, {"sha": "c54f7afb3a1badae3828039e3424499625fccc69", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bade865ff7ae111732de03aa755398370e01218/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bade865ff7ae111732de03aa755398370e01218/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4bade865ff7ae111732de03aa755398370e01218", "patch": "@@ -12651,7 +12651,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t  return;\n \n \tcase ';':\n-#if TARGET_MACHO || !HAVE_AS_IX86_REP_LOCK_PREFIX\n+#ifndef HAVE_AS_IX86_REP_LOCK_PREFIX\n \t  fputs (\";\", file);\n #endif\n \t  return;"}, {"sha": "b1c58164fd05be9a0c01b153deb8c62ccb27877f", "filename": "gcc/configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bade865ff7ae111732de03aa755398370e01218/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bade865ff7ae111732de03aa755398370e01218/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=4bade865ff7ae111732de03aa755398370e01218", "patch": "@@ -23337,6 +23337,7 @@ else\n   gcc_cv_as_ix86_rep_lock_prefix=no\n   if test x$gcc_cv_as != x; then\n     echo 'rep movsl\n+\t lock addl %edi, (%eax,%esi)\n \t lock orl $0, (%esp)' > conftest.s\n     if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n   { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5"}, {"sha": "4e529c56cc822787e51ec13cf748799f379767e5", "filename": "gcc/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bade865ff7ae111732de03aa755398370e01218/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bade865ff7ae111732de03aa755398370e01218/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=4bade865ff7ae111732de03aa755398370e01218", "patch": "@@ -3327,6 +3327,7 @@ foo:\tnop\n     gcc_GAS_CHECK_FEATURE([rep and lock prefix],\n         gcc_cv_as_ix86_rep_lock_prefix,,,\n \t[rep movsl\n+\t lock addl %edi, (%eax,%esi)\n \t lock orl $0, (%esp)])\n     AC_DEFINE_UNQUOTED(HAVE_AS_IX86_REP_LOCK_PREFIX,\n       [`if test $gcc_cv_as_ix86_rep_lock_prefix = yes; then echo 1; else echo 0; fi`],"}]}