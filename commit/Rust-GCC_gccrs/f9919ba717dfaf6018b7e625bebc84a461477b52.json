{"sha": "f9919ba717dfaf6018b7e625bebc84a461477b52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5MTliYTcxN2RmYWY2MDE4YjdlNjI1YmViYzg0YTQ2MTQ3N2I1Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-09T11:07:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-09T13:01:54Z"}, "message": "libstdc++: Add performance test for <random>\n\nThis tests std::uniform_int_distribution with various parameters and\nengines.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/performance/26_numerics/random_dist.cc: New test.", "tree": {"sha": "1b7f88c694847acacf2ae62127a7bf1368446ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b7f88c694847acacf2ae62127a7bf1368446ba0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9919ba717dfaf6018b7e625bebc84a461477b52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9919ba717dfaf6018b7e625bebc84a461477b52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9919ba717dfaf6018b7e625bebc84a461477b52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9919ba717dfaf6018b7e625bebc84a461477b52/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a95143ddeb4939fe2336e8f86cbc908bfa8e1a"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "673992d1949954d284373b0101c8e24c176db86d", "filename": "libstdc++-v3/testsuite/performance/26_numerics/random_dist.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9919ba717dfaf6018b7e625bebc84a461477b52/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F26_numerics%2Frandom_dist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9919ba717dfaf6018b7e625bebc84a461477b52/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F26_numerics%2Frandom_dist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F26_numerics%2Frandom_dist.cc?ref=f9919ba717dfaf6018b7e625bebc84a461477b52", "patch": "@@ -0,0 +1,102 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <random>\n+#include <testsuite_performance.h>\n+\n+namespace counters\n+{\n+  __gnu_test::time_counter time;\n+  __gnu_test::resource_counter resource;\n+}\n+\n+\n+template<typename Dist, typename Engine>\n+void do_fill_with_uniform_ints(std::string name, Dist& d, Engine& e)\n+{\n+  using counters::time;\n+  using counters::resource;\n+\n+  std::vector<typename Dist::result_type> r;\n+  int n = 10000000;\n+  {\n+    const auto suffix = \"-e\" + std::to_string((int)std::log10(n));\n+    r.resize(n);\n+\n+    start_counters(time, resource);\n+    for (auto& x : r)\n+      x = d(e);\n+    stop_counters(time, resource);\n+    report_performance(__FILE__, name+suffix, time, resource);\n+    clear_counters(time, resource);\n+\n+    d.reset();\n+\n+    start_counters(time, resource);\n+    d.__generate(begin(r), end(r), e);\n+    stop_counters(time, resource);\n+    report_performance(__FILE__, name+\"-range\"+suffix, time, resource);\n+    clear_counters(time, resource);\n+  }\n+}\n+\n+template<typename Engine>\n+void fill_with_uniform_ints(std::string name, Engine& e)\n+{\n+  using Dist = std::uniform_int_distribution<typename Engine::result_type>;\n+  using param_type = typename Dist::param_type;\n+\n+  unsigned maxima[]{6, 10, 32, 100, 1000, 1024, (1<<16)-1, 1<<16, 1<<20, -1u};\n+  for (auto hi : maxima)\n+  {\n+    Dist dist(param_type{0, hi});\n+    std::ostringstream s;\n+    s << name << \"-uniform_int-\" << (dist.max() - dist.min());\n+    do_fill_with_uniform_ints(s.str(), dist, e);\n+  }\n+}\n+\n+int main()\n+{\n+  using namespace std;\n+\n+  std::mt19937 mt;\n+  fill_with_uniform_ints(\"mt19937\", mt);\n+  std::mt19937_64 mt64;\n+  fill_with_uniform_ints(\"mt19937_64\", mt64);\n+\n+  // Same as std::mt19937 but using uint32_t not uint_fast32_t for result_type\n+  using mt19937_32 = std::mersenne_twister_engine<uint32_t, 32, 624, 397, 31,\n+                                                  0x9908b0df, 11, 0xffffffff,\n+                                                  7, 0x9d2c5680, 15,\n+                                                  0xefc60000, 18, 1812433253>;\n+  mt19937_32 mt32;\n+  fill_with_uniform_ints(\"mt19937_32\", mt32);\n+\n+  std::minstd_rand0 lcg;\n+  fill_with_uniform_ints(\"minstd_rand0\", lcg);\n+\n+  // Same as std::minstd_rand0 but using uint32_t not uint_fast32_t\n+  using minstd_rand0_32 = std::linear_congruential_engine<uint32_t, 48271, 0,\n+                                                          2147483647>;\n+  minstd_rand0_32 lcg_32;\n+  fill_with_uniform_ints(\"minstd_rand0_32\", lcg_32);\n+\n+  return 0;\n+}\n+"}]}