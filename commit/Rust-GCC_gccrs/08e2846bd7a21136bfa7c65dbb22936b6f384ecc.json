{"sha": "08e2846bd7a21136bfa7c65dbb22936b6f384ecc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhlMjg0NmJkN2EyMTEzNmJmYTdjNjVkYmIyMjkzNmI2ZjM4NGVjYw==", "commit": {"author": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-05-15T02:44:44Z"}, "committer": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-05-15T02:44:44Z"}, "message": "New file.\n\nFrom-SVN: r19771", "tree": {"sha": "dabc2a38cff039c99e764a31cd778522f8772b23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dabc2a38cff039c99e764a31cd778522f8772b23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08e2846bd7a21136bfa7c65dbb22936b6f384ecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e2846bd7a21136bfa7c65dbb22936b6f384ecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08e2846bd7a21136bfa7c65dbb22936b6f384ecc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e2846bd7a21136bfa7c65dbb22936b6f384ecc/comments", "author": null, "committer": null, "parents": [{"sha": "6729735cf10a7458e3a6f154cb3a6726fba6e35c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6729735cf10a7458e3a6f154cb3a6726fba6e35c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6729735cf10a7458e3a6f154cb3a6726fba6e35c"}], "stats": {"total": 262, "additions": 262, "deletions": 0}, "files": [{"sha": "a3e12d429f0c9da12625c3caf9aa80d4cbab123b", "filename": "gcc/testsuite/lib/mike-g77.exp", "status": "added", "additions": 262, "deletions": 0, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e2846bd7a21136bfa7c65dbb22936b6f384ecc/gcc%2Ftestsuite%2Flib%2Fmike-g77.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e2846bd7a21136bfa7c65dbb22936b6f384ecc/gcc%2Ftestsuite%2Flib%2Fmike-g77.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fmike-g77.exp?ref=08e2846bd7a21136bfa7c65dbb22936b6f384ecc", "patch": "@@ -0,0 +1,262 @@\n+# Copyright (C) 1988, 90, 91, 92, 95, 96, 97, 1998 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+# This file was derived from mike-g++.exp written by Mike Stump <mrs@cygnus.com>\n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# fortran@gnu.org\n+\n+#\n+# mike_cleanup -- remove any files that are created by the testcase\n+#\n+proc mike_cleanup { src_code output_file assembly_file } {\n+    remote_file build delete $output_file $assembly_file;\n+}\n+\n+#\n+# prebase -- sets up a Mike Stump (mrs@cygnus.com) style g77 test\n+#\n+proc prebase { } {\n+    global compiler_output\n+    global not_compiler_output\n+    global compiler_result\n+    global not_compiler_result\n+    global program_output\n+    global groups\n+    global run \n+    global actions\n+    global target_regexp\n+\n+    set compiler_output \"^$\"\n+    set not_compiler_output \".*Internal compiler error.*\"\n+    set compiler_result \"\"\n+    set not_compiler_result \"\"\n+    set program_output \".*PASS.*\"\n+    set groups {}\n+    set run no\n+    set actions assemble\n+    set target_regexp \".*\"\n+}\n+\n+#\n+# run the test\n+#\n+proc postbase  { src_code run groups args } {\n+    global verbose\n+    global srcdir\n+    global subdir\n+    global not_compiler_output\n+    global compiler_output\n+    global compiler_result\n+    global not_compiler_result\n+    global program_output\n+    global actions\n+    global target_regexp\n+    global host_triplet\n+    global target_triplet\n+    global tool\n+    global tmpdir\n+    global G77_UNDER_TEST\n+    global GROUP\n+\n+    if ![info exists G77_UNDER_TEST] {\n+\terror \"No compiler specified for testing.\"\n+    }\n+\n+    if ![regexp $target_regexp $target_triplet] {\n+\tunsupported $subdir/$src_code\n+\treturn\n+    }\n+\n+    if { [llength $args] > 0 } {\n+\tset comp_options [lindex $args 0];\n+    } else {\n+\tset comp_options \"\"\n+    }\n+\n+    set fail_message $subdir/$src_code\n+    set pass_message $subdir/$src_code\n+\n+    if [info exists GROUP] {\n+\tif {[lsearch $groups $GROUP] == -1} {\n+\t    return\n+\t}\n+    }\n+\n+    if [string match $run yes] {\n+\tset actions run\n+    }\n+\n+    set output_file \"$tmpdir/[file tail [file rootname $src_code]]\"\n+    set assembly_file \"$output_file\"\n+    append assembly_file \".S\"\n+\n+    set compile_type \"none\"\n+\n+    case $actions {\n+\tcompile\n+\t{\n+\t    set compile_type \"assembly\";\n+\t    set output_file $assembly_file;\n+\t}\n+\tassemble\n+\t{\n+\t    set compile_type \"object\";\n+\t    append output_file \".o\";\n+\t}\n+\tlink\n+\t{\n+\t    set compile_type \"executable\";\n+\t    set output_file \"$tmpdir/a.out\";\n+\t}\n+\trun\n+\t{\n+\t    set compile_type \"executable\";\n+\t    set output_file \"$tmpdir/a.out\";\n+\t    set run yes;\n+\t}\n+\tdefault\n+\t{\n+\t    set output_file \"\";\n+\t    set compile_type \"none\";\n+\t}\n+    }\n+\n+    set src_file \"$srcdir/$subdir/$src_code\"\n+    set options \"\"\n+    lappend options \"compiler=$G77_UNDER_TEST\"\n+\n+    if { $comp_options != \"\" } {\n+\tlappend options \"additional_flags=$comp_options\"\n+    }\n+\n+    set comp_output [g77_target_compile $src_file $output_file $compile_type $options];\n+\n+    set pass no\n+\n+    # Delete things like \"ld.so warning\" messages.\n+    set comp_output [prune_warnings $comp_output]\n+\n+    if [regexp -- $not_compiler_output $comp_output] {\n+\tif { $verbose > 1 } {\n+\t    send_user \"\\nChecking:\\n$not_compiler_output\\nto make sure it does not match:\\n$comp_output\\nbut it does.\\n\\n\"\n+\t} else {\n+\t    send_log \"\\nCompiler output:\\n$comp_output\\n\\n\"\n+\t}\n+\tfail $fail_message\n+\t# The framework doesn't like to see any error remnants,\n+\t# so remove them.\n+\tuplevel {\n+\t    if [info exists errorInfo] {\n+\t\tunset errorInfo\n+\t    }\n+\t}\n+\tmike_cleanup $src_code $output_file $assembly_file\n+\treturn\n+    }\n+\n+    # remove any leftover CRs.\n+    regsub -all -- \"\\r\" $comp_output \"\" comp_output\n+\n+    regsub -all \"(^|\\n)\\[^\\n\\]*linker input file unused since linking not done\" $comp_output \"\" comp_output\n+    regsub -all \"(^|\\n)\\[^\\n\\]*file path prefix \\[^\\n\\]* never used\" $comp_output \"\" comp_output\n+\n+    set unsupported_message [${tool}_check_unsupported_p $comp_output]\n+    if { $unsupported_message != \"\" } {\n+\tunsupported \"$subdir/$src_code: $unsupported_message\"\n+\tmike_cleanup $src_code $output_file $assembly_file\n+\treturn\n+    }\n+\n+    if { $verbose > 1 } {\n+\tsend_user \"\\nChecking:\\n$compiler_output\\nto see if it matches:\\n$comp_output\\n\"\n+    } else {\n+\tsend_log \"\\nCompiler output:\\n$comp_output\\n\\n\"\n+    }\n+    if [regexp -- $compiler_output $comp_output] {\n+\tif { $verbose > 1 } {\n+\t    send_user \"Yes, it matches.\\n\\n\"\n+\t}\n+\tset pass yes\n+\tif [file exists [file rootname [file tail $src_code]].s] {\n+\t    set fd [open [file rootname [file tail $src_code]].s r]\n+\t    set dot_s [read $fd]\n+\t    close $fd\n+\t    if { $compiler_result != \"\" } {\n+\t\tverbose \"Checking .s file for $compiler_result\" 2\n+\t\tif [regexp -- $compiler_result $dot_s] {\n+\t\t    verbose \"Yes, it matches.\" 2\n+\t\t} else {\n+\t\t    verbose \"Nope, doesn't match.\" 2\n+\t\t    verbose $dot_s 4\n+\t\t    set pass no\n+\t\t}\n+\t    }\n+\t    if { $not_compiler_result != \"\" } {\n+\t\tverbose \"Checking .s file for not $not_compiler_result\" 2\n+\t\tif ![regexp -- $not_compiler_result $dot_s] {\n+\t\t    verbose \"Nope, not found (that's good).\" 2\n+\t\t} else {\n+\t\t    verbose \"Uh oh, it was found.\" 2\n+\t\t    verbose $dot_s 4\n+\t\t    set pass no\n+\t\t}\n+\t    }\n+\t}\n+\tif [string match $run yes] {\n+\t    set result [g77_load $output_file]\n+\t    set status [lindex $result 0];\n+\t    set output [lindex $result 1];\n+\t    if { $status == -1 } {\n+\t\tmike_cleanup $src_code $output_file $assembly_file;\n+\t\treturn;\n+\t    }\n+\t    if { $verbose > 1 } {\n+\t\tsend_user \"Checking:\\n$program_output\\nto see if it matches:\\n$output\\n\\n\"\n+\t    }\n+\t    if ![regexp -- $program_output $output] {\n+\t\tset pass no\n+\t\tif { $verbose > 1 } {\n+\t\t    send_user \"Nope, does not match.\\n\\n\"\n+\t\t}\n+\t    } else {\n+\t\tif { $verbose > 1 } {\n+\t\t    send_user \"Yes, it matches.\\n\\n\"\n+\t\t}\n+\t    }\n+\t}\n+    } else {\n+\tif { $verbose > 1 } {\n+\t    send_user \"Nope, does not match.\\n\\n\"\n+\t}\n+    }\n+\n+    if [string match $pass \"yes\"] {\n+\tpass $pass_message\n+    } else {\n+\tfail $fail_message\n+    }\n+\n+    # The framework doesn't like to see any error remnants,\n+    # so remove them.\n+    uplevel {\n+\tif [info exists errorInfo] {\n+\t    unset errorInfo\n+\t}\n+    }\n+\n+    mike_cleanup $src_code $output_file $assembly_file\n+}"}]}