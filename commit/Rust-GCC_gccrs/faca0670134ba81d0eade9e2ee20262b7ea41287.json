{"sha": "faca0670134ba81d0eade9e2ee20262b7ea41287", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFjYTA2NzAxMzRiYTgxZDBlYWRlOWUyZWUyMDI2MmI3ZWE0MTI4Nw==", "commit": {"author": {"name": "Adam Butcher", "email": "adam@jessamine.co.uk", "date": "2013-08-12T23:26:18Z"}, "committer": {"name": "Adam Butcher", "email": "abutcher@gcc.gnu.org", "date": "2013-08-12T23:26:18Z"}, "message": "* pt.c: Grammar fix in comments (\"it's\" to \"its\").\n\nFrom-SVN: r201674", "tree": {"sha": "006315ff64ba623896e833a1ef19524c4eab7226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/006315ff64ba623896e833a1ef19524c4eab7226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faca0670134ba81d0eade9e2ee20262b7ea41287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faca0670134ba81d0eade9e2ee20262b7ea41287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faca0670134ba81d0eade9e2ee20262b7ea41287", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faca0670134ba81d0eade9e2ee20262b7ea41287/comments", "author": {"login": "abutcher-gh", "id": 10379705, "node_id": "MDQ6VXNlcjEwMzc5NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/10379705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abutcher-gh", "html_url": "https://github.com/abutcher-gh", "followers_url": "https://api.github.com/users/abutcher-gh/followers", "following_url": "https://api.github.com/users/abutcher-gh/following{/other_user}", "gists_url": "https://api.github.com/users/abutcher-gh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abutcher-gh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abutcher-gh/subscriptions", "organizations_url": "https://api.github.com/users/abutcher-gh/orgs", "repos_url": "https://api.github.com/users/abutcher-gh/repos", "events_url": "https://api.github.com/users/abutcher-gh/events{/privacy}", "received_events_url": "https://api.github.com/users/abutcher-gh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d445d18d378f899574ae8b27a835407b15dda94a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d445d18d378f899574ae8b27a835407b15dda94a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d445d18d378f899574ae8b27a835407b15dda94a"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "6dd0cd8dfbcb0368ccfd4c920948dd2f4ae5d34b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faca0670134ba81d0eade9e2ee20262b7ea41287/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faca0670134ba81d0eade9e2ee20262b7ea41287/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=faca0670134ba81d0eade9e2ee20262b7ea41287", "patch": "@@ -1,3 +1,7 @@\n+2013-08-13  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\t* pt.c: Grammar fix in comments (\"it's\" to \"its\").\n+\n 2013-08-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (warn_extern_redeclared_static, duplicate_decls,"}, {"sha": "85224fc9a5881872bd042bedf17086c69c11fd1d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faca0670134ba81d0eade9e2ee20262b7ea41287/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faca0670134ba81d0eade9e2ee20262b7ea41287/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=faca0670134ba81d0eade9e2ee20262b7ea41287", "patch": "@@ -1986,7 +1986,7 @@ determine_specialization (tree template_id,\n \t  tree decl_arg_types;\n \n \t  /* This is an ordinary member function.  However, since\n-\t     we're here, we can assume it's enclosing class is a\n+\t     we're here, we can assume its enclosing class is a\n \t     template class.  For example,\n \n \t       template <typename T> struct S { void f(); };\n@@ -4337,7 +4337,7 @@ check_default_tmpl_args (tree decl, tree parms, bool is_primary,\n \t  || DECL_INITIALIZED_IN_CLASS_P (decl)))\n     /* We already checked these parameters when the template was\n        declared, so there's no need to do it again now.  This function\n-       was defined in class scope, but we're processing it's body now\n+       was defined in class scope, but we're processing its body now\n        that the class is complete.  */\n     return true;\n \n@@ -7555,7 +7555,7 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \tthe one of #0.\n \n \tWhen we encounter #1, we want to store the partial instantiation\n-\tof M (template<class T> S<int>::M<T>) in it's CLASSTYPE_TI_TEMPLATE.\n+\tof M (template<class T> S<int>::M<T>) in its CLASSTYPE_TI_TEMPLATE.\n \n \tFor all cases other than this \"explicit specialization of member of a\n \tclass template\", we just want to store the most general template into"}]}