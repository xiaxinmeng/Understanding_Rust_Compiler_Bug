{"sha": "95e1eca43d106d821720744ac6ff1f5df41a1e78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVlMWVjYTQzZDEwNmQ4MjE3MjA3NDRhYzZmZjFmNWRmNDFhMWU3OA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-11T06:00:00Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-12T06:02:53Z"}, "message": "Combine avx_vec_concatv16si and avx512f_zero_extendv16hiv16si2_1 to avx512f_zero_extendv16hiv16si2_2.\n\nAdd define_insn_and_split to combine avx_vec_concatv16si/2 and\navx512f_zero_extendv16hiv16si2_1 since the latter already zero_extend\nthe upper bits, similar for other patterns which are related to\npmovzx{bw,wd,dq}.\n\nIt will do optimization like\n\n-       vmovdqa %ymm0, %ymm0    # 7     [c=4 l=6]  avx_vec_concatv16si/2\n        vpmovzxwd       %ymm0, %zmm0    # 22    [c=4 l=6]  avx512f_zero_extendv16hiv16si2\n        ret             # 25    [c=0 l=1]  simple_return_internal\n\ngcc/ChangeLog:\n\n\tPR target/101846\n\t* config/i386/sse.md (*avx2_zero_extendv16qiv16hi2_2): New\n\tpost_reload define_insn_and_split.\n\t(*avx512bw_zero_extendv32qiv32hi2_2): Ditto.\n\t(*sse4_1_zero_extendv8qiv8hi2_4): Ditto.\n\t(*avx512f_zero_extendv16hiv16si2_2): Ditto.\n\t(*avx2_zero_extendv8hiv8si2_2): Ditto.\n\t(*sse4_1_zero_extendv4hiv4si2_4): Ditto.\n\t(*avx512f_zero_extendv8siv8di2_2): Ditto.\n\t(*avx2_zero_extendv4siv4di2_2): Ditto.\n\t(*sse4_1_zero_extendv2siv2di2_4): Ditto.\n\t(VI248_256, VI248_512, VI148_512, VI148_256, VI148_128): New\n\tmode iterator.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/101846\n\t* gcc.target/i386/pr101846-1.c: New test.", "tree": {"sha": "81fc7642880f6f5e696ef59e9615e39d08bc3584", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81fc7642880f6f5e696ef59e9615e39d08bc3584"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95e1eca43d106d821720744ac6ff1f5df41a1e78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e1eca43d106d821720744ac6ff1f5df41a1e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95e1eca43d106d821720744ac6ff1f5df41a1e78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e1eca43d106d821720744ac6ff1f5df41a1e78/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21fd62e5ca9967bba8f97fd6244a8c6a564c2146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21fd62e5ca9967bba8f97fd6244a8c6a564c2146", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21fd62e5ca9967bba8f97fd6244a8c6a564c2146"}], "stats": {"total": 314, "additions": 314, "deletions": 0}, "files": [{"sha": "3a7bbaec7af3a3950674592cd04fe95c62912aed", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e1eca43d106d821720744ac6ff1f5df41a1e78/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e1eca43d106d821720744ac6ff1f5df41a1e78/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=95e1eca43d106d821720744ac6ff1f5df41a1e78", "patch": "@@ -681,7 +681,12 @@\n (define_mode_iterator VI124_128 [V16QI V8HI V4SI])\n (define_mode_iterator VI24_128 [V8HI V4SI])\n (define_mode_iterator VI248_128 [V8HI V4SI V2DI])\n+(define_mode_iterator VI248_256 [V16HI V8SI V4DI])\n+(define_mode_iterator VI248_512 [V32HI V16SI V8DI])\n (define_mode_iterator VI48_128 [V4SI V2DI])\n+(define_mode_iterator VI148_512 [V64QI V16SI V8DI])\n+(define_mode_iterator VI148_256 [V32QI V8SI V4DI])\n+(define_mode_iterator VI148_128 [V16QI V4SI V2DI])\n \n ;; Various 256bit and 512 vector integer mode combinations\n (define_mode_iterator VI124_256 [V32QI V16HI V8SI])\n@@ -18603,6 +18608,26 @@\n   operands[1] = lowpart_subreg (V16QImode, operands[1], V32QImode);\n })\n \n+(define_insn_and_split \"*avx2_zero_extendv16qiv16hi2_2\"\n+  [(set (match_operand:V32QI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V32QI\n+\t  (vec_concat:V64QI\n+\t    (subreg:V32QI\n+\t      (vec_concat:VI248_256\n+\t\t(match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"vm\")\n+\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\" \"C\")) 0)\n+\t    (match_operand:V32QI 3 \"const0_operand\" \"C\"))\n+\t  (match_parallel 4 \"pmovzx_parallel\"\n+\t    [(match_operand 5 \"const_int_operand\" \"n\")])))]\n+  \"TARGET_AVX2\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (zero_extend:V16HI (match_dup 1)))]\n+{\n+  operands[0] = lowpart_subreg (V16HImode, operands[0], V32QImode);\n+  operands[1] = lowpart_subreg (V16QImode, operands[1], <ssehalfvecmode>mode);\n+})\n+\n (define_expand \"<insn>v16qiv16hi2\"\n   [(set (match_operand:V16HI 0 \"register_operand\")\n \t(any_extend:V16HI\n@@ -18637,6 +18662,26 @@\n   operands[1] = lowpart_subreg (V32QImode, operands[1], V64QImode);\n })\n \n+(define_insn_and_split \"*avx512bw_zero_extendv32qiv32hi2_2\"\n+  [(set (match_operand:V64QI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V64QI\n+\t  (vec_concat:V128QI\n+\t    (subreg:V64QI\n+\t      (vec_concat:VI248_512\n+\t\t(match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"vm\")\n+\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\" \"C\")) 0)\n+\t    (match_operand:V64QI 3 \"const0_operand\" \"C\"))\n+\t  (match_parallel 4 \"pmovzx_parallel\"\n+\t    [(match_operand 5 \"const_int_operand\" \"n\")])))]\n+  \"TARGET_AVX512BW\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (zero_extend:V32HI (match_dup 1)))]\n+{\n+  operands[0] = lowpart_subreg (V32HImode, operands[0], V64QImode);\n+  operands[1] = lowpart_subreg (V32QImode, operands[1], <ssehalfvecmode>mode);\n+})\n+\n (define_expand \"<insn>v32qiv32hi2\"\n   [(set (match_operand:V32HI 0 \"register_operand\")\n \t(any_extend:V32HI\n@@ -18723,6 +18768,41 @@\n }\n   [(set_attr \"isa\" \"noavx,noavx,avx\")])\n \n+(define_insn_and_split \"*sse4_1_zero_extendv8qiv8hi2_4\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=Yr,*x,Yw\")\n+\t(vec_select:V16QI\n+\t  (vec_concat:V32QI\n+\t    (subreg:V16QI\n+\t      (vec_concat:VI248_128\n+\t\t(match_operand:<ssehalfvecmode> 1 \"vector_operand\" \"YrBm,*xBm,Ywm\")\n+\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\" \"C,C,C\")) 0)\n+\t    (match_operand:V16QI 3 \"const0_operand\" \"C,C,C\"))\n+\t  (match_parallel 4 \"pmovzx_parallel\"\n+\t    [(match_operand 5 \"const_int_operand\" \"n,n,n\")])))]\n+  \"TARGET_SSE4_1\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(zero_extend:V8HI\n+\t  (vec_select:V8QI\n+\t    (match_dup 1)\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)\n+\t\t       (const_int 4) (const_int 5)\n+\t\t       (const_int 6) (const_int 7)]))))]\n+{\n+  operands[0] = lowpart_subreg (V8HImode, operands[0], V16QImode);\n+  if (MEM_P (operands[1]))\n+    {\n+      operands[1] = lowpart_subreg (V8QImode, operands[1], <ssehalfvecmode>mode);\n+      operands[1] = gen_rtx_ZERO_EXTEND (V8HImode, operands[1]);\n+      emit_insn (gen_rtx_SET (operands[0], operands[1]));\n+      DONE;\n+    }\n+  operands[1] = lowpart_subreg (V16QImode, operands[1], <ssehalfvecmode>mode);\n+}\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")])\n+\n (define_expand \"<insn>v8qiv8hi2\"\n   [(set (match_operand:V8HI 0 \"register_operand\")\n \t(any_extend:V8HI\n@@ -18913,6 +18993,26 @@\n   operands[1] = lowpart_subreg (V16HImode, operands[1], V32HImode);\n })\n \n+(define_insn_and_split \"*avx512f_zero_extendv16hiv16si2_2\"\n+  [(set (match_operand:V32HI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V32HI\n+\t  (vec_concat:V64HI\n+\t    (subreg:V32HI\n+\t      (vec_concat:VI148_512\n+\t        (match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"vm\")\n+\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\" \"C\")) 0)\n+\t    (match_operand:V32HI 3 \"const0_operand\" \"C\"))\n+\t  (match_parallel 4 \"pmovzx_parallel\"\n+\t    [(match_operand 5 \"const_int_operand\" \"n\")])))]\n+  \"TARGET_AVX512F\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (zero_extend:V16SI (match_dup 1)))]\n+{\n+  operands[0] = lowpart_subreg (V16SImode, operands[0], V32HImode);\n+  operands[1] = lowpart_subreg (V16HImode, operands[1], <ssehalfvecmode>mode);\n+})\n+\n (define_insn \"avx2_<code>v8hiv8si2<mask_name>\"\n   [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8SI\n@@ -18947,6 +19047,27 @@\n   operands[1] = lowpart_subreg (V8HImode, operands[1], V16HImode);\n })\n \n+(define_insn_and_split \"*avx2_zero_extendv8hiv8si2_2\"\n+  [(set (match_operand:V16HI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V16HI\n+\t  (vec_concat:V32HI\n+\t    (subreg:V16HI\n+\t      (vec_concat:VI148_256\n+\t\t(match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"vm\")\n+\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\" \"C\")) 0)\n+\t    (match_operand:V16HI 3 \"const0_operand\" \"C\"))\n+\t  (match_parallel 4 \"pmovzx_parallel\"\n+\t    [(match_operand 5 \"const_int_operand\" \"n\")])))]\n+  \"TARGET_AVX2\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (zero_extend:V8SI (match_dup 1)))]\n+{\n+  operands[0] = lowpart_subreg (V8SImode, operands[0], V16HImode);\n+  operands[1] = lowpart_subreg (V8HImode, operands[1], <ssehalfvecmode>mode);\n+})\n+\n+\n (define_insn \"sse4_1_<code>v4hiv4si2<mask_name>\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V4SI\n@@ -19036,6 +19157,39 @@\n }\n   [(set_attr \"isa\" \"noavx,noavx,avx\")])\n \n+(define_insn_and_split \"*sse4_1_zero_extendv4hiv4si2_4\"\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x,v\")\n+\t(vec_select:V8HI\n+\t  (vec_concat:V16HI\n+\t    (subreg:V8HI\n+\t      (vec_concat:VI148_128\n+\t\t(match_operand:<ssehalfvecmode> 1 \"vector_operand\" \"YrBm,*xBm,vm\")\n+\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\" \"C,C,C\")) 0)\n+\t    (match_operand:V8HI 3 \"const0_operand\" \"C,C,C\"))\n+\t  (match_parallel 4 \"pmovzx_parallel\"\n+\t    [(match_operand 5 \"const_int_operand\" \"n,n,n\")])))]\n+  \"TARGET_SSE4_1\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(zero_extend:V4SI\n+\t  (vec_select:V4HI\n+\t    (match_dup 1)\n+\t    (parallel [(const_int 0) (const_int 1)\n+\t\t       (const_int 2) (const_int 3)]))))]\n+{\n+  operands[0] = lowpart_subreg (V4SImode, operands[0], V8HImode);\n+  if (MEM_P (operands[1]))\n+    {\n+      operands[1] = lowpart_subreg (V4HImode, operands[1], <ssehalfvecmode>mode);\n+      operands[1] = gen_rtx_ZERO_EXTEND (V4SImode, operands[1]);\n+      emit_insn (gen_rtx_SET (operands[0], operands[1]));\n+      DONE;\n+    }\n+  operands[1] = lowpart_subreg (V8HImode, operands[1], <ssehalfvecmode>mode);\n+}\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")])\n+\n (define_insn \"avx512f_<code>v8qiv8di2<mask_name>\"\n   [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8DI\n@@ -19346,6 +19500,24 @@\n   operands[1] = lowpart_subreg (V8SImode, operands[1], V16SImode);\n })\n \n+(define_insn_and_split \"*avx512f_zero_extendv8siv8di2_2\"\n+  [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V16SI\n+\t  (vec_concat:V32SI\n+\t    (vec_concat:V16SI\n+\t      (match_operand:V8SI 1 \"nonimmediate_operand\" \"vm\")\n+\t      (match_operand:V8SI 2 \"const0_operand\" \"C\"))\n+\t    (match_operand:V16SI 3 \"const0_operand\" \"C\"))\n+\t  (match_parallel 4 \"pmovzx_parallel\"\n+\t    [(match_operand 5 \"const_int_operand\" \"n\")])))]\n+  \"TARGET_AVX512F\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (zero_extend:V8DI (match_dup 1)))]\n+{\n+  operands[0] = lowpart_subreg (V8DImode, operands[0], V16SImode);\n+})\n+\n (define_expand \"<insn>v8siv8di2\"\n   [(set (match_operand:V8DI 0 \"register_operand\" \"=v\")\n \t(any_extend:V8DI\n@@ -19380,6 +19552,24 @@\n   operands[1] = lowpart_subreg (V4SImode, operands[1], V8SImode);\n })\n \n+(define_insn_and_split \"*avx2_zero_extendv4siv4di2_2\"\n+  [(set (match_operand:V8SI 0 \"register_operand\" \"=v\")\n+\t(vec_select:V8SI\n+\t  (vec_concat:V16SI\n+\t    (vec_concat:V8SI\n+\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"vm\")\n+\t      (match_operand:V4SI 2 \"const0_operand\" \"C\"))\n+\t    (match_operand:V8SI 3 \"const0_operand\" \"C\"))\n+\t  (match_parallel 4 \"pmovzx_parallel\"\n+\t    [(match_operand 5 \"const_int_operand\" \"n\")])))]\n+  \"TARGET_AVX2\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (zero_extend:V4DI (match_dup 1)))]\n+{\n+  operands[0] = lowpart_subreg (V4DImode, operands[0], V8SImode);\n+})\n+\n (define_expand \"<insn>v4siv4di2\"\n   [(set (match_operand:V4DI 0 \"register_operand\")\n \t(any_extend:V4DI\n@@ -19456,6 +19646,35 @@\n }\n   [(set_attr \"isa\" \"noavx,noavx,avx\")])\n \n+(define_insn_and_split \"*sse4_1_zero_extendv2siv2di2_4\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*x,v\")\n+\t(vec_select:V4SI\n+\t  (vec_concat:V8SI\n+\t    (vec_concat:V4SI\n+\t      (match_operand:V2SI 1 \"vector_operand\" \"YrBm, *xBm, vm\")\n+\t      (match_operand:V2SI 2 \"const0_operand\" \"C,C,C\"))\n+\t    (match_operand:V4SI 3 \"const0_operand\" \"C,C,C\"))\n+\t  (match_parallel 4 \"pmovzx_parallel\"\n+\t    [(match_operand 5 \"const_int_operand\" \"n,n,n\")])))]\n+  \"TARGET_SSE4_1\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+\t(zero_extend:V2DI\n+\t  (vec_select:V2SI (match_dup 1)\n+\t\t\t   (parallel [(const_int 0) (const_int 1)]))))]\n+{\n+  operands[0] = lowpart_subreg (V2DImode, operands[0], V4SImode);\n+  if (MEM_P (operands[1]))\n+    {\n+      operands[1] = gen_rtx_ZERO_EXTEND (V2DImode, operands[1]);\n+      emit_insn (gen_rtx_SET (operands[0], operands[1]));\n+      DONE;\n+    }\n+  operands[1] = lowpart_subreg (V4SImode, operands[1], V2SImode);\n+}\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")])\n+\n (define_expand \"<insn>v2siv2di2\"\n   [(set (match_operand:V2DI 0 \"register_operand\")\n \t(any_extend:V2DI"}, {"sha": "40d95bde6fd639f84984167bcc5edf51b8de0674", "filename": "gcc/testsuite/gcc.target/i386/pr101846-1.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e1eca43d106d821720744ac6ff1f5df41a1e78/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101846-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e1eca43d106d821720744ac6ff1f5df41a1e78/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101846-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101846-1.c?ref=95e1eca43d106d821720744ac6ff1f5df41a1e78", "patch": "@@ -0,0 +1,95 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-not \"vmov\" } } */\n+/* { dg-final { scan-assembler-times \"vpmovzxbw\" \"3\" } } */\n+/* { dg-final { scan-assembler-times \"vpmovzxwd\" \"3\" } } */\n+/* { dg-final { scan-assembler-times \"vpmovzxdq\" \"3\" } } */\n+\n+typedef short v4hi __attribute__((vector_size (8)));\n+typedef short v8hi __attribute__((vector_size (16)));\n+typedef short v16hi __attribute__((vector_size (32)));\n+typedef short v32hi __attribute__((vector_size (64)));\n+typedef char v8qi __attribute__((vector_size (8)));\n+typedef char v16qi __attribute__((vector_size (16)));\n+typedef char v32qi __attribute__((vector_size (32)));\n+typedef char v64qi __attribute__((vector_size (64)));\n+typedef int v2si __attribute__((vector_size (8)));\n+typedef int v4si __attribute__((vector_size (16)));\n+typedef int v8si __attribute__((vector_size (32)));\n+typedef int v16si __attribute__((vector_size (64)));\n+\n+v32hi\n+foo_zxwd_512 (v16hi x)\n+{\n+  return __builtin_shufflevector (x, (v16hi) {},\n+\t\t\t\t  0, 16, 1, 17, 2, 18, 3, 19,\n+\t\t\t\t  4, 20, 5, 21, 6, 22, 7, 23,\n+\t\t\t\t  8, 24, 9, 25, 10, 26, 11, 27,\n+\t\t\t\t  12, 28, 13, 29, 14, 30, 15, 31);\n+}\n+\n+v16hi\n+foo_zxwd_256 (v8hi x)\n+{\n+  return __builtin_shufflevector (x, (v8hi) {},\n+\t\t\t\t  0, 8, 1, 9, 2, 10, 3, 11,\n+\t\t\t\t  4, 12, 5, 13, 6, 14, 7, 15);\n+}\n+\n+v8hi\n+foo_zxwd_128 (v4hi x)\n+{\n+  return __builtin_shufflevector (x, (v4hi) {}, 0, 4, 1, 5, 2, 6, 3, 7);\n+}\n+\n+v16si\n+foo_zxdq_512 (v8si x)\n+{\n+  return __builtin_shufflevector (x, (v8si) {},\n+\t\t\t\t  0, 8, 1, 9, 2, 10, 3, 11,\n+\t\t\t\t  4, 12, 5, 13, 6, 14, 7, 15);\n+}\n+\n+v8si\n+foo_zxdq_256 (v4si x)\n+{\n+  return __builtin_shufflevector (x, (v4si) {}, 0, 4, 1, 5, 2, 6, 3, 7);\n+}\n+\n+v4si\n+foo_zxdq_128 (v2si x)\n+{\n+  return __builtin_shufflevector (x, (v2si) {}, 0, 2, 1, 3);\n+}\n+\n+v64qi\n+foo_zxbw_512 (v32qi x)\n+{\n+  return __builtin_shufflevector (x, (v32qi) {},\n+\t\t\t\t  0, 32, 1, 33, 2, 34, 3, 35,\n+\t\t\t\t  4, 36, 5, 37, 6, 38, 7, 39,\n+\t\t\t\t  8, 40, 9, 41, 10, 42, 11, 43,\n+\t\t\t\t  12, 44, 13, 45, 14, 46, 15, 47,\n+\t\t\t\t  16, 48, 17, 49, 18, 50, 19, 51,\n+\t\t\t\t  20, 52, 21, 53, 22, 54, 23, 55,\n+\t\t\t\t  24, 56, 25, 57, 26, 58, 27, 59,\n+\t\t\t\t  28, 60, 29, 61, 30, 62, 31, 63);\n+}\n+\n+v32qi\n+foo_zxbw_256 (v16qi x)\n+{\n+  return __builtin_shufflevector (x, (v16qi) {},\n+\t\t\t\t  0, 16, 1, 17, 2, 18, 3, 19,\n+\t\t\t\t  4, 20, 5, 21, 6, 22, 7, 23,\n+\t\t\t\t  8, 24, 9, 25, 10, 26, 11, 27,\n+\t\t\t\t  12, 28, 13, 29, 14, 30, 15, 31);\n+}\n+\n+v16qi\n+foo_zxbw_128 (v8qi x)\n+{\n+  return __builtin_shufflevector (x, (v8qi) {},\n+\t\t\t\t  0, 8, 1, 9, 2, 10, 3, 11,\n+\t\t\t\t  4, 12, 5, 13, 6, 14, 7, 15);\n+}"}]}