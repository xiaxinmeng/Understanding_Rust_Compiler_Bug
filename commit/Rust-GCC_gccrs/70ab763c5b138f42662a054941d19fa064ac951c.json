{"sha": "70ab763c5b138f42662a054941d19fa064ac951c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBhYjc2M2M1YjEzOGY0MjY2MmEwNTQ5NDFkMTlmYTA2NGFjOTUxYw==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2003-04-01T22:11:01Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2003-04-01T22:11:01Z"}, "message": "defs.m: New.\n\n2003-04-01  Ziemowit Laski <zlaski@apple.com>\n\n        * objc.dg/defs.m: New.\n\nFrom-SVN: r65147", "tree": {"sha": "042494b14378e25a14d5ed0bff846d257a2e7243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/042494b14378e25a14d5ed0bff846d257a2e7243"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70ab763c5b138f42662a054941d19fa064ac951c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ab763c5b138f42662a054941d19fa064ac951c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70ab763c5b138f42662a054941d19fa064ac951c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ab763c5b138f42662a054941d19fa064ac951c/comments", "author": null, "committer": null, "parents": [{"sha": "fe0002ee9dd1311b3dc451132198def49a465203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0002ee9dd1311b3dc451132198def49a465203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe0002ee9dd1311b3dc451132198def49a465203"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "c66386e9b1d545f763afb83272940d55d90c2e60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ab763c5b138f42662a054941d19fa064ac951c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ab763c5b138f42662a054941d19fa064ac951c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70ab763c5b138f42662a054941d19fa064ac951c", "patch": "@@ -1,7 +1,10 @@\n+2003-04-01  Ziemowit Laski <zlaski@apple.com>\n+\n+\t* objc.dg/defs.m: New.\n+\n 2003-04-01  Aldy Hernandez  <aldyh@redhat.com>\n \n         * g++.dg/eh/simd-1.C: New.\n-\n         * g++.dg/eh/simd-2.C: New.\n \n 2003-03-01  Aldy Hernandez  <aldyh@redhat.com>"}, {"sha": "e8d8c2c4527cd2f25c1d8505ef6ec62dd3e3d790", "filename": "gcc/testsuite/objc.dg/defs.m", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ab763c5b138f42662a054941d19fa064ac951c/gcc%2Ftestsuite%2Fobjc.dg%2Fdefs.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ab763c5b138f42662a054941d19fa064ac951c/gcc%2Ftestsuite%2Fobjc.dg%2Fdefs.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fdefs.m?ref=70ab763c5b138f42662a054941d19fa064ac951c", "patch": "@@ -0,0 +1,67 @@\n+/* Check if the @defs() construct preserves the correct\n+   offsets of ivars.  */\n+/* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n+/* { dg-options \"-lobjc\" } */\n+/* { dg-do run } */\n+\n+#include <objc/objc.h>\n+#include <objc/Object.h>\n+\n+extern void abort(void);\n+\n+#define CHECK_IF(expr) if(!(expr)) abort();\n+\n+@interface Base: Object {\n+@public\n+  int a;\n+  float b;\n+  char c;\n+}\n+@end\n+\n+@interface Derived: Base {\n+@public\n+  double d;\n+  unsigned e;\n+  id f;\n+} \n+- init;\n+@end\n+\n+struct Derived_defs {\n+  @defs(Derived);\n+};\n+\n+@implementation Base\n+@end\n+@implementation Derived\n+- init {\n+  [super init];\n+  a = 123;\n+  b = 1.23;\n+  c = 'c';\n+  d = 123.456;\n+  e = 456;\n+  f = isa;\n+  return self;\n+}\n+@end\n+\n+int main(void) {\n+  Derived *derived = [[Derived alloc] init];\n+  struct Derived_defs *derived_defs = (struct Derived_defs *)derived;\n+\n+  CHECK_IF(derived->a == derived_defs->a && derived_defs->a == 123);\n+  CHECK_IF(derived->b == derived_defs->b && derived_defs->b == (float)1.23);  \n+  CHECK_IF(derived->c == derived_defs->c && derived_defs->c == 'c');  \n+  CHECK_IF(derived->d == derived_defs->d && derived_defs->d == (double)123.456);  \n+  CHECK_IF(derived->e == derived_defs->e && derived_defs->e == 456);  \n+  CHECK_IF(derived->f == derived_defs->f && derived_defs->f == derived_defs->isa);\n+\n+  /* Try out the \"inline\" notation as well.  */\n+  CHECK_IF(((struct { @defs(Derived); } *)derived)->a == 123);\n+  CHECK_IF(((struct { @defs(Derived); } *)derived)->c == 'c');\n+  CHECK_IF(((struct { @defs(Derived); } *)derived)->e == 456);\n+\n+  return 0;\n+}"}]}