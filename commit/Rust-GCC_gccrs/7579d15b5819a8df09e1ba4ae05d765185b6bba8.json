{"sha": "7579d15b5819a8df09e1ba4ae05d765185b6bba8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU3OWQxNWI1ODE5YThkZjA5ZTFiYTRhZTA1ZDc2NTE4NWI2YmJhOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-11-08T00:33:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-11-08T00:33:45Z"}, "message": "ptr_traits.h (__rebind): Replace with...\n\n\t* include/bits/ptr_traits.h (__rebind): Replace with...\n\t(rebind): Implement using alias-declaration.\n\t* include/ext/pointer.h (__rebind): Replace with...\n\t(rebind): Implement using alias-declaration.\n\t* include/bits/alloc_traits.h (__rebind_alloc, __rebind_traits):\n\tReplace with...\n\t(rebind_alloc, rebind_traits): Implement using alias-declaration.\n\t* include/ext/alloc_traits.h (rebind): Use rebind_alloc instead of\n\t__rebind_alloc.\n\t* include/std/scoped_allocator (rebind): Likewise.\n\nFrom-SVN: r181139", "tree": {"sha": "afeb0bf897f5ac1ae9e710c7e072062215f230d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afeb0bf897f5ac1ae9e710c7e072062215f230d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7579d15b5819a8df09e1ba4ae05d765185b6bba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7579d15b5819a8df09e1ba4ae05d765185b6bba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7579d15b5819a8df09e1ba4ae05d765185b6bba8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7579d15b5819a8df09e1ba4ae05d765185b6bba8/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e23de0edd9ca34e809f9cb19c153ae837d38182b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23de0edd9ca34e809f9cb19c153ae837d38182b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23de0edd9ca34e809f9cb19c153ae837d38182b"}], "stats": {"total": 105, "additions": 26, "deletions": 79}, "files": [{"sha": "5f4160640e39f4866c317b815f9820a28302aa6d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7579d15b5819a8df09e1ba4ae05d765185b6bba8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7579d15b5819a8df09e1ba4ae05d765185b6bba8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7579d15b5819a8df09e1ba4ae05d765185b6bba8", "patch": "@@ -1,3 +1,16 @@\n+2011-11-08  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/bits/ptr_traits.h (__rebind): Replace with...\n+\t(rebind): Implement using alias-declaration.\n+\t* include/ext/pointer.h (__rebind): Replace with...\n+\t(rebind): Implement using alias-declaration.\n+\t* include/bits/alloc_traits.h (__rebind_alloc, __rebind_traits):\n+\tReplace with...\n+\t(rebind_alloc, rebind_traits): Implement using alias-declaration.\n+\t* include/ext/alloc_traits.h (rebind): Use rebind_alloc instead of\n+\t__rebind_alloc.\n+\t* include/std/scoped_allocator (rebind): Likewise.\n+\n 2011-11-07  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/mutex (call_once): Store closure in __once_functor"}, {"sha": "e1f4d41a6d0e7b9af41e247882552fc18fe9a262", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7579d15b5819a8df09e1ba4ae05d765185b6bba8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7579d15b5819a8df09e1ba4ae05d765185b6bba8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=7579d15b5819a8df09e1ba4ae05d765185b6bba8", "patch": "@@ -102,10 +102,8 @@ _GLIBCXX_ALLOC_TR_NESTED_TYPE(pointer, value_type*)\n       */\n       typedef __pointer pointer;\n \n-// TODO: Use pointer_traits::rebind alias template.\n-\n _GLIBCXX_ALLOC_TR_NESTED_TYPE(const_pointer,\n-  typename pointer_traits<pointer>::template __rebind<const value_type>::__type)\n+  typename pointer_traits<pointer>::template rebind<const value_type>)\n \n       /**\n        * @brief   The allocator's const pointer type.\n@@ -116,7 +114,7 @@ _GLIBCXX_ALLOC_TR_NESTED_TYPE(const_pointer,\n       typedef __const_pointer const_pointer;\n \n _GLIBCXX_ALLOC_TR_NESTED_TYPE(void_pointer,\n-  typename pointer_traits<pointer>::template __rebind<void>::__type)\n+  typename pointer_traits<pointer>::template rebind<void>)\n \n       /**\n        * @brief   The allocator's void pointer type.\n@@ -127,7 +125,7 @@ _GLIBCXX_ALLOC_TR_NESTED_TYPE(void_pointer,\n       typedef __void_pointer void_pointer;\n \n _GLIBCXX_ALLOC_TR_NESTED_TYPE(const_void_pointer,\n-  typename pointer_traits<pointer>::template __rebind<const void>::__type)\n+  typename pointer_traits<pointer>::template rebind<const void>)\n \n       /**\n        * @brief   The allocator's const void pointer type.\n@@ -196,23 +194,10 @@ _GLIBCXX_ALLOC_TR_NESTED_TYPE(propagate_on_container_swap,\n \n #undef _GLIBCXX_ALLOC_TR_NESTED_TYPE\n \n-      /* TODO: use template alias \n       template<typename _Tp>\n-        using rebind_alloc = __alloctr_rebind<_Alloc, _Tp>::__type;\n+        using rebind_alloc = typename __alloctr_rebind<_Alloc, _Tp>::__type;\n       template<typename _Tp>\n         using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;\n-      */\n-      template<typename _Tp>\n-        struct __rebind_alloc\n-\t{\n-  \t  typedef typename __alloctr_rebind<_Alloc, _Tp>::__type __type;\n-       \t};\n-\n-      template<typename _Tp>\n-        struct __rebind_traits\n-\t{\n-\t  typedef allocator_traits<typename __rebind_alloc<_Tp>::__type> __type;\n-\t};\n \n     private:\n       template<typename _Alloc2>"}, {"sha": "7f120b1f8accfa62b5dc4b660a96c3fa2756a7d2", "filename": "libstdc++-v3/include/bits/ptr_traits.h", "status": "modified", "additions": 6, "deletions": 44, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7579d15b5819a8df09e1ba4ae05d765185b6bba8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7579d15b5819a8df09e1ba4ae05d765185b6bba8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fptr_traits.h?ref=7579d15b5819a8df09e1ba4ae05d765185b6bba8", "patch": "@@ -86,46 +86,19 @@ _GLIBCXX_HAS_NESTED_TYPE(difference_type)\n       static const bool __value = _S_chk<_Ptr, _Up>(nullptr);\n     };\n \n-  // hack to use _Tp::__rebind<_Up>::__type instead if that exists\n-  template<typename _Ptr, typename _Up>\n-    class __ptrtr_rebind_helper2\n-    {\n-      template<typename _Ptr2, typename _Up2>\n-\tstatic constexpr bool\n-       \t_S_chk(typename _Ptr2::template __rebind<_Up2>::__type*)\n-\t{ return true; }\n-\n-      template<typename, typename>\n-        static constexpr bool\n-       \t_S_chk(...)\n-       \t{ return false; }\n-\n-    public:\n-      static const bool __value = _S_chk<_Ptr, _Up>(nullptr);\n-    };\n-\n-  /* TODO: remove second bool when alias templates are supported */\n   template<typename _Tp, typename _Up,\n-           bool = __ptrtr_rebind_helper<_Tp, _Up>::__value,\n-           bool = __ptrtr_rebind_helper2<_Tp, _Up>::__value>\n+           bool = __ptrtr_rebind_helper<_Tp, _Up>::__value>\n     struct __ptrtr_rebind;\n \n-  template<typename _Tp, typename _Up, bool _B2>\n-    struct __ptrtr_rebind<_Tp, _Up, true, _B2>\n-    {\n-      typedef typename _Tp::template rebind<_Up> __type;\n-    };\n-\n-  /* TODO: remove this when alias templates are supported */\n   template<typename _Tp, typename _Up>\n-    struct __ptrtr_rebind<_Tp, _Up, false, true>\n+    struct __ptrtr_rebind<_Tp, _Up, true>\n     {\n-      typedef typename _Tp::template __rebind<_Up>::__type __type;\n+      typedef typename _Tp::template rebind<_Up> __type;\n     };\n \n   template<template<typename, typename...> class _SomePtr, typename _Up,\n             typename _Tp, typename... _Args>\n-    struct __ptrtr_rebind<_SomePtr<_Tp, _Args...>, _Up, false, false>\n+    struct __ptrtr_rebind<_SomePtr<_Tp, _Args...>, _Up, false>\n     {\n       typedef _SomePtr<_Up, _Args...> __type;\n     };\n@@ -168,14 +141,8 @@ _GLIBCXX_HAS_NESTED_TYPE(difference_type)\n       typedef typename __ptrtr_diff_type<_Ptr>::__type  difference_type;\n \n     private:\n-      /* TODO: replace __rebind<U> with alias template rebind<U> */\n-      /*\n       template<typename _Up>\n-        using rebind<_Up> = typename __ptrtr_rebind<_Ptr, _Up>::__type;\n-      */\n-      template<typename _Up>\n-       \tstruct __rebind\n-        { typedef typename __ptrtr_rebind<_Ptr, _Up>::__type __type; };\n+        using rebind = typename __ptrtr_rebind<_Ptr, _Up>::__type;\n \n       // allocator_traits needs to use __rebind\n       template<typename> friend struct allocator_traits;\n@@ -197,13 +164,8 @@ _GLIBCXX_HAS_NESTED_TYPE(difference_type)\n       /// Type used to represent the difference between two pointers\n       typedef ptrdiff_t difference_type;\n \n-      /* TODO: replace __rebind<U> with alias template rebind<U> */\n-      /*\n       template<typename _Up>\n-        using rebind<_Up> = U*;\n-      */\n-      template<typename U>\n-       \tstruct __rebind { typedef U* __type; };\n+        using rebind = _Up*;\n \n       /**\n        *  @brief  Obtain a pointer to an object"}, {"sha": "4862636645e4fd94f47ea5cf451b8f6600f493a4", "filename": "libstdc++-v3/include/ext/alloc_traits.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7579d15b5819a8df09e1ba4ae05d765185b6bba8/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7579d15b5819a8df09e1ba4ae05d765185b6bba8/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Falloc_traits.h?ref=7579d15b5819a8df09e1ba4ae05d765185b6bba8", "patch": "@@ -161,7 +161,7 @@ template<typename _Alloc>\n \n     template<typename _Tp>\n       struct rebind\n-      { typedef typename _Base_type::template __rebind_alloc<_Tp>::__type other; };\n+      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };\n #else\n \n     typedef typename _Alloc::pointer                pointer;"}, {"sha": "45fed19993ed2354a8566ac94e0b3322c807e977", "filename": "libstdc++-v3/include/ext/pointer.h", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7579d15b5819a8df09e1ba4ae05d765185b6bba8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7579d15b5819a8df09e1ba4ae05d765185b6bba8/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h?ref=7579d15b5819a8df09e1ba4ae05d765185b6bba8", "patch": "@@ -577,21 +577,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /// Type used to represent the difference between two pointers\n       typedef typename pointer::difference_type         difference_type;\n \n-      /* TODO: replace __rebind<U> with alias template rebind<U> */\n-      /*\n       template<typename _Up>\n-        using rebind<_Up> = typename __gnu_cxx::_Pointer_adapter<\n+        using rebind = typename __gnu_cxx::_Pointer_adapter<\n           typename pointer_traits<_Storage_policy>::rebind<_Up>>\n-      */\n-      template<typename _Up>\n-        class __rebind\n-        {\n-          typedef pointer_traits<_Storage_policy> _Policy_traits;\n-          typedef typename _Policy_traits::template __rebind<_Up>::__type\n-            _Rebound_policy;\n-        public:\n-          typedef typename __gnu_cxx::_Pointer_adapter<_Rebound_policy> __type;\n-        };\n \n       static pointer pointer_to(typename pointer::reference __r) noexcept\n       { return pointer(std::addressof(__r)); }"}, {"sha": "edace9840d13c4e15a0b88bbfb43c2b149e408ed", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7579d15b5819a8df09e1ba4ae05d765185b6bba8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7579d15b5819a8df09e1ba4ae05d765185b6bba8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=7579d15b5819a8df09e1ba4ae05d765185b6bba8", "patch": "@@ -267,9 +267,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template <class _Tp>\n         struct rebind\n         {\n-          // TODO: use rebind_alloc<Tp> instead of __rebind_alloc<Tp>::__type\n           typedef scoped_allocator_adaptor<\n-            typename __traits::template __rebind_alloc<_Tp>::__type,\n+            typename __traits::template rebind_alloc<_Tp>,\n             _InnerAllocs...> other;\n         };\n "}]}