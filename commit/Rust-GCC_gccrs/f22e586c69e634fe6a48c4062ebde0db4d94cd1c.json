{"sha": "f22e586c69e634fe6a48c4062ebde0db4d94cd1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIyZTU4NmM2OWU2MzRmZTZhNDhjNDA2MmViZGUwZGI0ZDk0Y2QxYw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-03-25T10:05:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-03-25T10:05:15Z"}, "message": "re PR middle-end/89790 (ICE segfault in operand_equal_p() at fold-const.c:3000 with -Wduplicated-cond since r269838)\n\n2019-03-25  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/89790\n\t* fold-const.c (operand_equal_p): Revert last change with\n\tupdated comment.\n\n\t* g++.dg/pr89790.C: New testcase.\n\nFrom-SVN: r269907", "tree": {"sha": "ae7b52ed845f79786fc8b9256c836ad4dc1b9876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae7b52ed845f79786fc8b9256c836ad4dc1b9876"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f22e586c69e634fe6a48c4062ebde0db4d94cd1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22e586c69e634fe6a48c4062ebde0db4d94cd1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f22e586c69e634fe6a48c4062ebde0db4d94cd1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22e586c69e634fe6a48c4062ebde0db4d94cd1c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c6d441da15fe18b504d63f19e59b7cd49b6371a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6d441da15fe18b504d63f19e59b7cd49b6371a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c6d441da15fe18b504d63f19e59b7cd49b6371a"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "fd07440fe42e07a160c94a783db9fd434ba52d0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22e586c69e634fe6a48c4062ebde0db4d94cd1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22e586c69e634fe6a48c4062ebde0db4d94cd1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f22e586c69e634fe6a48c4062ebde0db4d94cd1c", "patch": "@@ -1,3 +1,9 @@\n+2019-03-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/89790\n+\t* fold-const.c (operand_equal_p): Revert last change with\n+\tupdated comment.\n+\n 2019-03-24  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.c (rs6000_legitimize_tls_address): Add REG_EQUAL"}, {"sha": "c2884a67519342e23ce8e2d6ee0741fea225edf5", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22e586c69e634fe6a48c4062ebde0db4d94cd1c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22e586c69e634fe6a48c4062ebde0db4d94cd1c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=f22e586c69e634fe6a48c4062ebde0db4d94cd1c", "patch": "@@ -2973,6 +2973,11 @@ operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n       || TREE_TYPE (arg1) == error_mark_node)\n     return 0;\n \n+  /* Similar, if either does not have a type (like a template id),\n+     they aren't equal.  */\n+  if (!TREE_TYPE (arg0) || !TREE_TYPE (arg1))\n+    return 0;\n+\n   /* We cannot consider pointers to different address space equal.  */\n   if (POINTER_TYPE_P (TREE_TYPE (arg0))\n       && POINTER_TYPE_P (TREE_TYPE (arg1))"}, {"sha": "74b1483a0cb4cd4c2e0783fed138e72c42e6581d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22e586c69e634fe6a48c4062ebde0db4d94cd1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22e586c69e634fe6a48c4062ebde0db4d94cd1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f22e586c69e634fe6a48c4062ebde0db4d94cd1c", "patch": "@@ -1,3 +1,8 @@\n+2019-03-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/89790\n+\t* g++.dg/pr89790.C: New testcase.\n+\n 2019-03-24  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/pr82281.c: Compile only for ia32 effective target."}, {"sha": "c4d97664c0ce4bf8f5b0b24b25c7235a26c1f878", "filename": "gcc/testsuite/g++.dg/pr89790.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22e586c69e634fe6a48c4062ebde0db4d94cd1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr89790.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22e586c69e634fe6a48c4062ebde0db4d94cd1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr89790.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr89790.C?ref=f22e586c69e634fe6a48c4062ebde0db4d94cd1c", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile }\n+// { dg-options \"-Wduplicated-cond\" }\n+\n+template <typename>\n+class a\n+{\n+  typedef a b;\n+  template <typename> void c();\n+};\n+template <typename d> template <typename>\n+void a<d>::c()\n+{\n+  int f;\n+  b g;\n+  if (g == 0)\n+    ;\n+  else if (f)\n+    {\n+    }\n+}"}]}