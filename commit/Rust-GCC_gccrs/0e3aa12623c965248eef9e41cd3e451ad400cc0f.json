{"sha": "0e3aa12623c965248eef9e41cd3e451ad400cc0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUzYWExMjYyM2M5NjUyNDhlZWY5ZTQxY2QzZTQ1MWFkNDAwY2MwZg==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2007-05-02T17:47:06Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-05-02T17:47:06Z"}, "message": "fold-const.c (fold_comparision): Remove the \"foo++ == CONST\" transformation.\n\n2007-05-02  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        * fold-const.c (fold_comparision): Remove the \"foo++ == CONST\"\n        transformation.\n\nFrom-SVN: r124353", "tree": {"sha": "094c807a4e7ce648e3990fd55afafefcd75fe3e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/094c807a4e7ce648e3990fd55afafefcd75fe3e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e3aa12623c965248eef9e41cd3e451ad400cc0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3aa12623c965248eef9e41cd3e451ad400cc0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e3aa12623c965248eef9e41cd3e451ad400cc0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e3aa12623c965248eef9e41cd3e451ad400cc0f/comments", "author": null, "committer": null, "parents": [{"sha": "5271f9bad56d35da92b430869429a67e36d53a9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5271f9bad56d35da92b430869429a67e36d53a9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5271f9bad56d35da92b430869429a67e36d53a9d"}], "stats": {"total": 68, "additions": 5, "deletions": 63}, "files": [{"sha": "9d2a5e6eecbeee0da8b59a4e0c316add9871d81d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3aa12623c965248eef9e41cd3e451ad400cc0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3aa12623c965248eef9e41cd3e451ad400cc0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e3aa12623c965248eef9e41cd3e451ad400cc0f", "patch": "@@ -1,3 +1,8 @@\n+2007-05-02  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\t* fold-const.c (fold_comparision): Remove the \"foo++ == CONST\"\n+\ttransformation.\n+\n 2007-05-02  Nick Clifton  <nickc@redhat.com>\n \n \t* config/frv/predicates.md (symbolic_operand): Accept CONSTs."}, {"sha": "2d9f752c5b37eb7960bea0166816dde33cd46eca", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e3aa12623c965248eef9e41cd3e451ad400cc0f/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e3aa12623c965248eef9e41cd3e451ad400cc0f/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0e3aa12623c965248eef9e41cd3e451ad400cc0f", "patch": "@@ -8649,69 +8649,6 @@ fold_comparison (enum tree_code code, tree type, tree op0, tree op1)\n \t}\n     }\n \n-  /* Convert foo++ == CONST into ++foo == CONST + INCR.  */\n-  if (TREE_CONSTANT (arg1)\n-      && (TREE_CODE (arg0) == POSTINCREMENT_EXPR\n-\t  || TREE_CODE (arg0) == POSTDECREMENT_EXPR)\n-      /* This optimization is invalid for ordered comparisons\n-         if CONST+INCR overflows or if foo+incr might overflow.\n-\t This optimization is invalid for floating point due to rounding.\n-\t For pointer types we assume overflow doesn't happen.  */\n-      && (POINTER_TYPE_P (TREE_TYPE (arg0))\n-\t  || (INTEGRAL_TYPE_P (TREE_TYPE (arg0))\n-\t      && (code == EQ_EXPR || code == NE_EXPR))))\n-    {\n-      tree varop, newconst;\n-\n-      if (TREE_CODE (arg0) == POSTINCREMENT_EXPR)\n-\t{\n-\t  newconst = fold_build2 (PLUS_EXPR, TREE_TYPE (arg0),\n-\t\t\t\t  arg1, TREE_OPERAND (arg0, 1));\n-\t  varop = build2 (PREINCREMENT_EXPR, TREE_TYPE (arg0),\n-\t\t\t  TREE_OPERAND (arg0, 0),\n-\t\t\t  TREE_OPERAND (arg0, 1));\n-\t}\n-      else\n-\t{\n-\t  newconst = fold_build2 (MINUS_EXPR, TREE_TYPE (arg0),\n-\t\t\t\t  arg1, TREE_OPERAND (arg0, 1));\n-\t  varop = build2 (PREDECREMENT_EXPR, TREE_TYPE (arg0),\n-\t\t\t  TREE_OPERAND (arg0, 0),\n-\t\t\t  TREE_OPERAND (arg0, 1));\n-\t}\n-\n-\n-      /* If VAROP is a reference to a bitfield, we must mask\n-\t the constant by the width of the field.  */\n-      if (TREE_CODE (TREE_OPERAND (varop, 0)) == COMPONENT_REF\n-\t  && DECL_BIT_FIELD (TREE_OPERAND (TREE_OPERAND (varop, 0), 1))\n-\t  && host_integerp (DECL_SIZE (TREE_OPERAND\n-\t\t\t\t\t (TREE_OPERAND (varop, 0), 1)), 1))\n-\t{\n-\t  tree fielddecl = TREE_OPERAND (TREE_OPERAND (varop, 0), 1);\n-\t  HOST_WIDE_INT size = tree_low_cst (DECL_SIZE (fielddecl), 1);\n-\t  tree folded_compare, shift;\n-\n-\t  /* First check whether the comparison would come out\n-\t     always the same.  If we don't do that we would\n-\t     change the meaning with the masking.  */\n-\t  folded_compare = fold_build2 (code, type,\n-\t\t\t\t\tTREE_OPERAND (varop, 0), arg1);\n-\t  if (TREE_CODE (folded_compare) == INTEGER_CST)\n-\t    return omit_one_operand (type, folded_compare, varop);\n-\n-\t  shift = build_int_cst (NULL_TREE,\n-\t\t\t\t TYPE_PRECISION (TREE_TYPE (varop)) - size);\n-\t  shift = fold_convert (TREE_TYPE (varop), shift);\n-\t  newconst = fold_build2 (LSHIFT_EXPR, TREE_TYPE (varop),\n-\t\t\t\t  newconst, shift);\n-\t  newconst = fold_build2 (RSHIFT_EXPR, TREE_TYPE (varop),\n-\t\t\t\t  newconst, shift);\n-\t}\n-\n-      return fold_build2 (code, type, varop, newconst);\n-    }\n-\n   if (TREE_CODE (TREE_TYPE (arg0)) == INTEGER_TYPE\n       && (TREE_CODE (arg0) == NOP_EXPR\n \t  || TREE_CODE (arg0) == CONVERT_EXPR))"}]}