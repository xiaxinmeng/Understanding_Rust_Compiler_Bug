{"sha": "bb511fbd86c7a1109f71551cc0e7d1cfd733c016", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1MTFmYmQ4NmM3YTExMDlmNzE1NTFjYzBlN2QxY2ZkNzMzYzAxNg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2010-06-23T08:40:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-23T08:40:22Z"}, "message": "decl.c (gnat_to_gnu_entity): Use Wshadow instead of Wextra to guard warning on absence of internal builtin...\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <case E_Procedure>: Use\n\tWshadow instead of Wextra to guard warning on absence of internal\n\tbuiltin decl for an import.  Fix use of quote in warning text.\n\t(intrin_arglists_compatible_p): Remove processing of integer trailing\n\targs on the Ada side.  Fix use of literal > in warning text.\n\t(intrin_return_compatible_p): Never warn on \"function imported as\n\tprocedure\".  Defer the void/void case to the common type compatibility\n\tcheck.\n\nFrom-SVN: r161258", "tree": {"sha": "001a99ed997f35a1aab6f3a7dd1d4169fbb2613e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/001a99ed997f35a1aab6f3a7dd1d4169fbb2613e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb511fbd86c7a1109f71551cc0e7d1cfd733c016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb511fbd86c7a1109f71551cc0e7d1cfd733c016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb511fbd86c7a1109f71551cc0e7d1cfd733c016", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb511fbd86c7a1109f71551cc0e7d1cfd733c016/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1515785dd0555ab9c9462012bde1060a586e8e39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1515785dd0555ab9c9462012bde1060a586e8e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1515785dd0555ab9c9462012bde1060a586e8e39"}], "stats": {"total": 79, "additions": 30, "deletions": 49}, "files": [{"sha": "768c77c0229bb404c6b7b690efc8d8c2056f9aba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb511fbd86c7a1109f71551cc0e7d1cfd733c016/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb511fbd86c7a1109f71551cc0e7d1cfd733c016/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bb511fbd86c7a1109f71551cc0e7d1cfd733c016", "patch": "@@ -1,3 +1,14 @@\n+2010-06-23  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <case E_Procedure>: Use\n+\tWshadow instead of Wextra to guard warning on absence of internal\n+\tbuiltin decl for an import.  Fix use of quote in warning text.\n+\t(intrin_arglists_compatible_p): Remove processing of integer trailing\n+\targs on the Ada side.  Fix use of literal > in warning text.\n+\t(intrin_return_compatible_p): Never warn on \"function imported as\n+\tprocedure\".  Defer the void/void case to the common type compatibility\n+\tcheck.\n+\n 2010-06-23  Olivier Hainque  <hainque@adacore.com>\n \n \t* gcc-interface/decl.c (intrin_types_incompatible_p): New function,"}, {"sha": "c263548e24238b588637e05a8efd6b895a08006e", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 19, "deletions": 49, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb511fbd86c7a1109f71551cc0e7d1cfd733c016/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb511fbd86c7a1109f71551cc0e7d1cfd733c016/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=bb511fbd86c7a1109f71551cc0e7d1cfd733c016", "patch": "@@ -3912,22 +3912,21 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  }\n \n \t/* If this subprogram is expectedly bound to a GCC builtin, fetch the\n-\t   corresponding DECL node.\n-\n-\t   We still want the parameter associations to take place because the\n-\t   proper generation of calls depends on it (a GNAT parameter without\n-\t   a corresponding GCC tree has a very specific meaning), so we don't\n-\t   just \"break;\" here.  */\n+\t   corresponding DECL node.  Proper generation of calls later on need\n+\t   proper parameter associations so we don't \"break;\" here.  */\n \tif (Convention (gnat_entity) == Convention_Intrinsic\n \t    && Present (Interface_Name (gnat_entity)))\n \t  {\n \t    gnu_builtin_decl = builtin_decl_for (gnu_ext_name);\n \n-\t    /* Post a \"Wextra\" warning if we couldn't find the decl.  Absence\n-\t       of a real intrinsic for an import is most often unexpected but\n-\t       allows hooking in alternate bodies, convenient in some cases so\n-\t       we don't want the warning to be unconditional.  */\n-\t    if (gnu_builtin_decl == NULL_TREE && extra_warnings)\n+\t    /* Unability to find the builtin decl most often indicates a\n+\t       genuine mistake, but imports of unregistered intrinsics are\n+\t       sometimes issued on purpose to allow hooking in alternate\n+\t       bodies.  We post a warning conditioned on Wshadow in this case,\n+\t       to let developers be notified on demand without risking false\n+\t       positives with common default sets of options.  */\n+\n+\t    if (gnu_builtin_decl == NULL_TREE && warn_shadow)\n \t      post_error (\"?gcc intrinsic not found for&!\", gnat_entity);\n \t  }\n \n@@ -4238,7 +4237,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t    if (!intrin_profiles_compatible_p (&inb))\n \t      post_error\n-\t\t(\"?profile of& doesn't match the builtin it binds!\",\n+\t\t(\"?profile of& doesn''t match the builtin it binds!\",\n \t\t gnat_entity);\n \n \t    gnu_decl = gnu_builtin_decl;\n@@ -8125,43 +8124,20 @@ intrin_arglists_compatible_p (intrin_binding_t * inb)\n       btin_type = TREE_VALUE (btin_args);\n \n       /* If we're done with the Ada args and not with the internal builtin\n-\t args, complain.  */\n+\t args, or the other way around, complain.  */\n       if (ada_type == void_type_node\n \t  && btin_type != void_type_node)\n \t{\n \t  post_error (\"?Ada arguments list too short!\", inb->gnat_entity);\n \t  return false;\n \t}\n \n-      /* If we're done with the internal builtin args, check the remaining\n-\t args on the Ada side.  If they are all ints, assume these are access\n-\t levels and just ignore them with a conditional warning. Complain\n-\t otherwise.  */\n       if (btin_type == void_type_node\n \t  && ada_type != void_type_node)\n \t{\n-\t  while (TREE_CODE (ada_type) == INTEGER_TYPE)\n-\t    {\n-\t      ada_args = TREE_CHAIN (ada_args);\n-\t      ada_type = TREE_VALUE (ada_args);\n-\t    }\n-\n-\t  if (ada_type != void_type_node)\n-\t    {\n-\t      post_error_ne_num (\"?Ada arguments list too long (> ^)!\",\n-\t\t\t\t inb->gnat_entity, inb->gnat_entity,\n-\t\t\t\t argpos);\n-\t      return false;\n-\t    }\n-\n-\t  else\n-\t    {\n-\t      if (extra_warnings)\n-\t\tpost_error (\"?trailing Ada integer args ignored for \"\n-\t\t\t    \"intrinsic binding!\",\n-\t\t\t    inb->gnat_entity);\n-\t      return true;\n-\t    }\n+\t  post_error_ne_num (\"?Ada arguments list too long ('> ^)!\",\n+\t\t\t     inb->gnat_entity, inb->gnat_entity, argpos);\n+\t  return false;\n \t}\n \n       /* Otherwise, check that types match for the current argument.  */\n@@ -8189,19 +8165,13 @@ intrin_return_compatible_p (intrin_binding_t * inb)\n   tree ada_return_type = TREE_TYPE (inb->ada_fntype);\n   tree btin_return_type = TREE_TYPE (inb->btin_fntype);\n \n-  if (VOID_TYPE_P (btin_return_type)\n-      && VOID_TYPE_P (ada_return_type))\n-    return true;\n-\n+  /* Accept function imported as procedure, common and convenient.  */\n   if (VOID_TYPE_P (ada_return_type)\n       && !VOID_TYPE_P (btin_return_type))\n-    {\n-      if (extra_warnings)\n-\tpost_error (\"?builtin function imported as Ada procedure!\",\n-\t\t    inb->gnat_entity);\n-      return true;\n-    }\n+    return true;\n \n+  /* Check return types compatibility otherwise.  Note that this\n+     handles void/void as well.  */\n   if (intrin_types_incompatible_p (btin_return_type, ada_return_type))\n     {\n       post_error (\"?intrinsic binding type mismatch on return value!\","}]}