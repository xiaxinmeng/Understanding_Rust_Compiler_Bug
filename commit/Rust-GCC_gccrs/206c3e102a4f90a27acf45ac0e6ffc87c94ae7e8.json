{"sha": "206c3e102a4f90a27acf45ac0e6ffc87c94ae7e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA2YzNlMTAyYTRmOTBhMjdhY2Y0NWFjMGU2ZmZjODdjOTRhZTdlOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-09-28T13:47:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-09-28T13:47:12Z"}, "message": "re PR middle-end/50460 (__builtin___strcpy_chk/__builtin_object_size don't work)\n\n2011-09-28  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/50460\n\t* fold-const.c (try_move_mult_to_index): Handle &a.array the\n\tsame as &a.array[0].\n\nFrom-SVN: r179313", "tree": {"sha": "76046af01f71445893ce54d6fbb350126b673570", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76046af01f71445893ce54d6fbb350126b673570"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/206c3e102a4f90a27acf45ac0e6ffc87c94ae7e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/206c3e102a4f90a27acf45ac0e6ffc87c94ae7e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/206c3e102a4f90a27acf45ac0e6ffc87c94ae7e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/206c3e102a4f90a27acf45ac0e6ffc87c94ae7e8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbfb84e623787c68f78eb526b63efb3317a88306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbfb84e623787c68f78eb526b63efb3317a88306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbfb84e623787c68f78eb526b63efb3317a88306"}], "stats": {"total": 89, "additions": 83, "deletions": 6}, "files": [{"sha": "1715a4240c01d0684c4f22caed6b7b0edf47fbe6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206c3e102a4f90a27acf45ac0e6ffc87c94ae7e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206c3e102a4f90a27acf45ac0e6ffc87c94ae7e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=206c3e102a4f90a27acf45ac0e6ffc87c94ae7e8", "patch": "@@ -1,3 +1,9 @@\n+2011-09-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/50460\n+\t* fold-const.c (try_move_mult_to_index): Handle &a.array the\n+\tsame as &a.array[0].\n+\n 2011-09-28  Kai Tietz  <ktietz@redhat.com>\n \n \t* configure.ac: Add test for new section attribute"}, {"sha": "2726e018665594fe456f6928da4ac39d18c65f0d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 77, "deletions": 6, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206c3e102a4f90a27acf45ac0e6ffc87c94ae7e8/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206c3e102a4f90a27acf45ac0e6ffc87c94ae7e8/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=206c3e102a4f90a27acf45ac0e6ffc87c94ae7e8", "patch": "@@ -6868,6 +6868,60 @@ try_move_mult_to_index (location_t loc, tree addr, tree op1)\n \t\tcontinue;\n \t    }\n \n+\t  break;\n+\t}\n+      else if (TREE_CODE (ref) == COMPONENT_REF\n+\t       && TREE_CODE (TREE_TYPE (ref)) == ARRAY_TYPE)\n+\t{\n+\t  tree domain;\n+\n+\t  /* Remember if this was a multi-dimensional array.  */\n+\t  if (TREE_CODE (TREE_OPERAND (ref, 0)) == ARRAY_REF)\n+\t    mdim = true;\n+\n+\t  domain = TYPE_DOMAIN (TREE_TYPE (ref));\n+\t  if (! domain)\n+\t    continue;\n+\t  itype = TREE_TYPE (domain);\n+\n+\t  step = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (ref)));\n+\t  if (TREE_CODE (step) != INTEGER_CST)\n+\t    continue;\n+\n+\t  if (s)\n+\t    {\n+\t      if (! tree_int_cst_equal (step, s))\n+                continue;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Try if delta is a multiple of step.  */\n+\t      tree tmp = div_if_zero_remainder (EXACT_DIV_EXPR, op1, step);\n+\t      if (! tmp)\n+\t\tcontinue;\n+\t      delta = tmp;\n+\t    }\n+\n+\t  /* Only fold here if we can verify we do not overflow one\n+\t     dimension of a multi-dimensional array.  */\n+\t  if (mdim)\n+\t    {\n+\t      tree tmp;\n+\n+\t      if (!TYPE_MIN_VALUE (domain)\n+\t\t  || !TYPE_MAX_VALUE (domain)\n+\t\t  || TREE_CODE (TYPE_MAX_VALUE (domain)) != INTEGER_CST)\n+\t\tcontinue;\n+\n+\t      tmp = fold_binary_loc (loc, PLUS_EXPR, itype,\n+\t\t\t\t     fold_convert_loc (loc, itype,\n+\t\t\t\t\t\t       TYPE_MIN_VALUE (domain)),\n+\t\t\t\t     fold_convert_loc (loc, itype, delta));\n+\t      if (TREE_CODE (tmp) != INTEGER_CST\n+\t\t  || tree_int_cst_lt (TYPE_MAX_VALUE (domain), tmp))\n+\t\tcontinue;\n+\t    }\n+\n \t  break;\n \t}\n       else\n@@ -6892,12 +6946,29 @@ try_move_mult_to_index (location_t loc, tree addr, tree op1)\n       pos = TREE_OPERAND (pos, 0);\n     }\n \n-  TREE_OPERAND (pos, 1) = fold_build2_loc (loc, PLUS_EXPR, itype,\n-\t\t\t\t       fold_convert_loc (loc, itype,\n-\t\t\t\t\t\t\t TREE_OPERAND (pos, 1)),\n-\t\t\t\t       fold_convert_loc (loc, itype, delta));\n-\n-  return fold_build1_loc (loc, ADDR_EXPR, TREE_TYPE (addr), ret);\n+  if (TREE_CODE (ref) == ARRAY_REF)\n+    {\n+      TREE_OPERAND (pos, 1)\n+\t= fold_build2_loc (loc, PLUS_EXPR, itype,\n+\t\t\t   fold_convert_loc (loc, itype, TREE_OPERAND (pos, 1)),\n+\t\t\t   fold_convert_loc (loc, itype, delta));\n+      return fold_build1_loc (loc, ADDR_EXPR, TREE_TYPE (addr), ret);\n+    }\n+  else if (TREE_CODE (ref) == COMPONENT_REF)\n+    {\n+      gcc_assert (ret == pos);\n+      ret = build4_loc (loc, ARRAY_REF, TREE_TYPE (TREE_TYPE (ref)), ret,\n+\t\t\tfold_build2_loc\n+\t\t\t  (loc, PLUS_EXPR, itype,\n+\t\t\t   fold_convert_loc (loc, itype,\n+\t\t\t\t\t     TYPE_MIN_VALUE\n+\t\t\t\t\t       (TYPE_DOMAIN (TREE_TYPE (ref)))),\n+\t\t\t   fold_convert_loc (loc, itype, delta)),\n+\t\t\tNULL_TREE, NULL_TREE);\n+      return build_fold_addr_expr_loc (loc, ret);\n+    }\n+  else\n+    gcc_unreachable ();\n }\n \n "}]}