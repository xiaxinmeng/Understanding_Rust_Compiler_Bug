{"sha": "7e7cb6eee494e3ec59ae1faf679fe2c3a578a95e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U3Y2I2ZWVlNDk0ZTNlYzU5YWUxZmFmNjc5ZmUyYzNhNTc4YTk1ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-04-07T07:39:06Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-16T13:07:15Z"}, "message": "[Ada] Fix premature freezing of artificial array subtype\n\n2020-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* freeze.adb (Freeze_Expression): Stop climbing the parent chain\n\tat a N_{Case,If}_Expression node for a type or an entity that\n\tdoes not come from source.", "tree": {"sha": "15a78d2451af5a90b8fac7910f6363408ccb3304", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15a78d2451af5a90b8fac7910f6363408ccb3304"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e7cb6eee494e3ec59ae1faf679fe2c3a578a95e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7cb6eee494e3ec59ae1faf679fe2c3a578a95e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e7cb6eee494e3ec59ae1faf679fe2c3a578a95e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e7cb6eee494e3ec59ae1faf679fe2c3a578a95e/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "158b52c9616a3bc0b1c2622e3627a544318fd329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/158b52c9616a3bc0b1c2622e3627a544318fd329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/158b52c9616a3bc0b1c2622e3627a544318fd329"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "47a063ae043736f95e71e499358a5d67e3809c19", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e7cb6eee494e3ec59ae1faf679fe2c3a578a95e/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e7cb6eee494e3ec59ae1faf679fe2c3a578a95e/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=7e7cb6eee494e3ec59ae1faf679fe2c3a578a95e", "patch": "@@ -7630,15 +7630,18 @@ package body Freeze is\n                      exit;\n                   end if;\n \n-               --  Note: N_Loop_Statement is a special case. A type that\n-               --  appears in the source can never be frozen in a loop (this\n-               --  occurs only because of a loop expanded by the expander), so\n-               --  we keep on going. Otherwise we terminate the search. Same\n-               --  is true of any entity which comes from source. (if they\n-               --  have predefined type, that type does not appear to come\n-               --  from source, but the entity should not be frozen here).\n-\n-               when N_Loop_Statement =>\n+               --  N_Loop_Statement is a special case: a type that appears in\n+               --  the source can never be frozen in a loop (this occurs only\n+               --  because of a loop expanded by the expander), so we keep on\n+               --  going. Otherwise we terminate the search. Same is true of\n+               --  any entity which comes from source (if it has a predefined\n+               --  type, this type does not appear to come from source, but the\n+               --  entity should not be frozen here). The reasoning can also be\n+               --  applied to if-expressions and case-expressions.\n+\n+               when N_Loop_Statement\n+                  | N_If_Expression\n+                  | N_Case_Expression =>\n                   exit when not Comes_From_Source (Etype (N))\n                     and then (No (Nam) or else not Comes_From_Source (Nam));\n "}]}