{"sha": "2e546c261beddd649e92925373e1c54aec3299a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU1NDZjMjYxYmVkZGQ2NDllOTI5MjUzNzNlMWM1NGFlYzMyOTlhMA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-25T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-25T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "71b35c2e4d99ae6fe1598e43732f2d84e64ccebb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71b35c2e4d99ae6fe1598e43732f2d84e64ccebb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e546c261beddd649e92925373e1c54aec3299a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e546c261beddd649e92925373e1c54aec3299a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e546c261beddd649e92925373e1c54aec3299a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e546c261beddd649e92925373e1c54aec3299a0/comments", "author": null, "committer": null, "parents": [{"sha": "58b475a2233630b1737bbdab986f08510d62cd3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b475a2233630b1737bbdab986f08510d62cd3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58b475a2233630b1737bbdab986f08510d62cd3a"}], "stats": {"total": 333, "additions": 332, "deletions": 1}, "files": [{"sha": "69f16135bb35570d021d5106d4645f673b84486d", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e546c261beddd649e92925373e1c54aec3299a0/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e546c261beddd649e92925373e1c54aec3299a0/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=2e546c261beddd649e92925373e1c54aec3299a0", "patch": "@@ -1,3 +1,8 @@\n+2020-06-24  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* download_prerequisites: Support AIX and OpenBSD unames.\n+\tPipe `{gzip,bzip2} -d` to `tar -xf -`.\n+\n 2020-06-18  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_update_version.py: First checkout and then"}, {"sha": "57659843e77277502da2c3fa63afd8bf3f322729", "filename": "gcc/ChangeLog", "status": "modified", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e546c261beddd649e92925373e1c54aec3299a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e546c261beddd649e92925373e1c54aec3299a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e546c261beddd649e92925373e1c54aec3299a0", "patch": "@@ -1,3 +1,179 @@\n+2020-06-24  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\tPR target/94954\n+\t* config/rs6000/altivec.h (vec_pack_to_short_fp32): Update.\n+\t* config/rs6000/altivec.md (UNSPEC_CONVERT_4F32_8F16): New unspec.\n+\t(convert_4f32_8f16): New define_expand\n+\t* config/rs6000/rs6000-builtin.def (convert_4f32_8f16): New builtin define\n+\tand overload.\n+\t* config/rs6000/rs6000-call.c (P9V_BUILTIN_VEC_CONVERT_4F32_8F16): New\n+\toverloaded builtin entry.\n+\t* config/rs6000/vsx.md (UNSPEC_VSX_XVCVSPHP): New unspec.\n+\t(vsx_xvcvsphp): New define_insn.\n+\n+2020-06-24  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* simplify-rtx.c (simplify_unary_operation_1): Simplify rotates by 0.\n+\n+2020-06-24  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* simplify-rtx.c (simplify_unary_operation_1): Simplify\n+\t(parity (parity x)) as (parity x), i.e. PARITY is idempotent.\n+\n+2020-06-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95866\n+\t* tree-vect-slp.c (vect_slp_tree_uniform_p): New.\n+\t(vect_build_slp_tree_2): Properly reset matches[0],\n+\tignore uniform constants.\n+\n+2020-06-24  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/95660\n+\t* common/config/i386/cpuinfo.h (get_intel_cpu): Remove brand_id.\n+\t(cpu_indicator_init): Likewise.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Updated.\n+\n+2020-06-24  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/95774\n+\t* common/config/i386/cpuinfo.h (get_intel_cpu): Add Cooper Lake\n+\tdetection with AVX512BF16.\n+\n+2020-06-24  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/95843\n+\t* common/config/i386/i386-isas.h: New file.  Extracted from\n+\tgcc/config/i386/i386-builtins.c.\n+\t(_isa_names_table): Add option.\n+\t(ISA_NAMES_TABLE_START): New.\n+\t(ISA_NAMES_TABLE_END): Likewise.\n+\t(ISA_NAMES_TABLE_ENTRY): Likewise.\n+\t(isa_names_table): Defined with ISA_NAMES_TABLE_START,\n+\tISA_NAMES_TABLE_END and ISA_NAMES_TABLE_ENTRY.  Add more ISAs\n+\tfrom enum processor_features.\n+\t* config/i386/driver-i386.c: Include\n+\t\"common/config/i386/cpuinfo.h\" and\n+\t\"common/config/i386/i386-isas.h\".\n+\t(has_feature): New macro.\n+\t(host_detect_local_cpu): Call cpu_indicator_init to get CPU\n+\tfeatures.  Use has_feature to detect processor features.  Call\n+\tCall get_intel_cpu to get the newer Intel CPU name.  Use\n+\tisa_names_table to generate command-line options.\n+\t* config/i386/i386-builtins.c: Include\n+\t\"common/config/i386/i386-isas.h\".\n+\t(_arch_names_table): Removed.\n+\t(isa_names_table): Likewise.\n+\n+2020-06-24  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/95259\n+\t* common/config/i386/cpuinfo.h: New file.\n+\t(__processor_model): Moved from libgcc/config/i386/cpuinfo.h.\n+\t(__processor_model2): New.\n+\t(CHECK___builtin_cpu_is): New.  Defined as empty if not defined.\n+\t(has_cpu_feature): New function.\n+\t(set_cpu_feature): Likewise.\n+\t(get_amd_cpu): Moved from libgcc/config/i386/cpuinfo.c.  Use\n+\tCHECK___builtin_cpu_is.  Return AMD CPU name.\n+\t(get_intel_cpu): Moved from libgcc/config/i386/cpuinfo.c.  Use\n+\tUse CHECK___builtin_cpu_is.  Return Intel CPU name.\n+\t(get_available_features): Moved from libgcc/config/i386/cpuinfo.c.\n+\tAlso check FEATURE_3DNOW, FEATURE_3DNOWP, FEATURE_ADX,\n+\tFEATURE_ABM, FEATURE_CLDEMOTE, FEATURE_CLFLUSHOPT, FEATURE_CLWB,\n+\tFEATURE_CLZERO, FEATURE_CMPXCHG16B, FEATURE_CMPXCHG8B,\n+\tFEATURE_ENQCMD, FEATURE_F16C, FEATURE_FSGSBASE, FEATURE_FXSAVE,\n+\tFEATURE_HLE, FEATURE_IBT, FEATURE_LAHF_LM, FEATURE_LM,\n+\tFEATURE_LWP, FEATURE_LZCNT, FEATURE_MOVBE, FEATURE_MOVDIR64B,\n+\tFEATURE_MOVDIRI, FEATURE_MWAITX, FEATURE_OSXSAVE,\n+\tFEATURE_PCONFIG, FEATURE_PKU, FEATURE_PREFETCHWT1, FEATURE_PRFCHW,\n+\tFEATURE_PTWRITE, FEATURE_RDPID, FEATURE_RDRND, FEATURE_RDSEED,\n+\tFEATURE_RTM, FEATURE_SERIALIZE, FEATURE_SGX, FEATURE_SHA,\n+\tFEATURE_SHSTK, FEATURE_TBM, FEATURE_TSXLDTRK, FEATURE_VAES,\n+\tFEATURE_WAITPKG, FEATURE_WBNOINVD, FEATURE_XSAVE, FEATURE_XSAVEC,\n+\tFEATURE_XSAVEOPT and FEATURE_XSAVES\n+\t(cpu_indicator_init): Moved from libgcc/config/i386/cpuinfo.c.\n+\tAlso update cpu_model2.\n+\t* common/config/i386/i386-cpuinfo.h (processor_vendor): Add\n+\tAdd VENDOR_CENTAUR, VENDOR_CYRIX and VENDOR_NSC.\n+\t(processor_features): Moved from gcc/config/i386/i386-builtins.c.\n+\tRenamed F_XXX to FEATURE_XXX.  Add FEATURE_3DNOW, FEATURE_3DNOWP,\n+\tFEATURE_ADX, FEATURE_ABM, FEATURE_CLDEMOTE, FEATURE_CLFLUSHOPT,\n+\tFEATURE_CLWB, FEATURE_CLZERO, FEATURE_CMPXCHG16B,\n+\tFEATURE_CMPXCHG8B, FEATURE_ENQCMD, FEATURE_F16C,\n+\tFEATURE_FSGSBASE, FEATURE_FXSAVE, FEATURE_HLE, FEATURE_IBT,\n+\tFEATURE_LAHF_LM, FEATURE_LM, FEATURE_LWP, FEATURE_LZCNT,\n+\tFEATURE_MOVBE, FEATURE_MOVDIR64B, FEATURE_MOVDIRI,\n+\tFEATURE_MWAITX, FEATURE_OSXSAVE, FEATURE_PCONFIG,\n+\tFEATURE_PKU, FEATURE_PREFETCHWT1, FEATURE_PRFCHW,\n+\tFEATURE_PTWRITE, FEATURE_RDPID, FEATURE_RDRND, FEATURE_RDSEED,\n+\tFEATURE_RTM, FEATURE_SERIALIZE, FEATURE_SGX, FEATURE_SHA,\n+\tFEATURE_SHSTK, FEATURE_TBM, FEATURE_TSXLDTRK, FEATURE_VAES,\n+\tFEATURE_WAITPKG, FEATURE_WBNOINVD, FEATURE_XSAVE, FEATURE_XSAVEC,\n+\tFEATURE_XSAVEOPT, FEATURE_XSAVES and CPU_FEATURE_MAX.\n+\t(SIZE_OF_CPU_FEATURES): New.\n+\t* config/i386/i386-builtins.c (processor_features): Removed.\n+\t(isa_names_table): Replace F_XXX with FEATURE_XXX.\n+\t(fold_builtin_cpu): Change __cpu_features2 to an array.\n+\n+2020-06-24  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/95842\n+\t* common/config/i386/i386-common.c (processor_alias_table): Add\n+\tprocessor model and priority to each entry.\n+\t(pta_size): Updated with -6.\n+\t(num_arch_names): New.\n+\t* common/config/i386/i386-cpuinfo.h: New file.\n+\t* config/i386/i386-builtins.c (feature_priority): Removed.\n+\t(processor_model): Likewise.\n+\t(_arch_names_table): Likewise.\n+\t(arch_names_table): Likewise.\n+\t(_isa_names_table): Replace P_ZERO with P_NONE.\n+\t(get_builtin_code_for_version): Replace P_ZERO with P_NONE.  Use\n+\tprocessor_alias_table.\n+\t(fold_builtin_cpu): Replace arch_names_table with\n+\tprocessor_alias_table.\n+\t* config/i386/i386.h: Include \"common/config/i386/i386-cpuinfo.h\".\n+\t(pta): Add model and priority.\n+\t(num_arch_names): New.\n+\n+2020-06-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (vect_find_first_scalar_stmt_in_slp):\n+\tDeclare.\n+\t* tree-vect-data-refs.c (vect_preserves_scalar_order_p):\n+\tSimplify for new position of vectorized SLP loads.\n+\t(vect_slp_analyze_node_dependences): Adjust for it.\n+\t(vect_slp_analyze_and_verify_node_alignment): Compute alignment\n+\tfor the first stmts dataref.\n+\t* tree-vect-slp.c (vect_find_first_scalar_stmt_in_slp): New.\n+\t(vect_schedule_slp_instance): Emit loads before the\n+\tfirst scalar stmt.\n+\t* tree-vect-stmts.c (vectorizable_load): Do what the comment\n+\tsays and use vect_find_first_scalar_stmt_in_slp.\n+\n+2020-06-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95856\n+\t* tree-vectorizer.c (vect_stmt_dominates_stmt_p): Honor\n+\tregion marker -1u.\n+\n+2020-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/95810\n+\t* fold-const.c (fold_cond_expr_with_comparison): Optimize\n+\tA <= 0 ? A : -A into (type)-absu(A) rather than -abs(A).\n+\n+2020-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* omp-low.c (lower_omp_for): Fix two pastos.\n+\n+2020-06-24  Martin Liska  <mliska@suse.cz>\n+\n+\t* optc-save-gen.awk: Compare string options in cl_optimization_compare\n+\tby strcmp.\n+\n 2020-06-23  Aaron Sawdey  <acsawdey@linux.ibm.com>\n \n \t* config.gcc: Identify power10 as a 64-bit processor and as valid"}, {"sha": "ab7687c5b0de40a371f1f4ce721091e759036a31", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e546c261beddd649e92925373e1c54aec3299a0/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e546c261beddd649e92925373e1c54aec3299a0/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2e546c261beddd649e92925373e1c54aec3299a0", "patch": "@@ -1 +1 @@\n-20200624\n+20200625"}, {"sha": "adf54ef5b2451ea238cfde8d4ad19b5f11dd7046", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e546c261beddd649e92925373e1c54aec3299a0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e546c261beddd649e92925373e1c54aec3299a0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2e546c261beddd649e92925373e1c54aec3299a0", "patch": "@@ -1,3 +1,27 @@\n+2020-06-24  Nicholas Krause  <xerofoify@gmail.com>\n+\n+\tPR c++/95672\n+\t* typeck2.c (cxx_incomplete_type_diagnostic): Add missing\n+\tTYPE_EXPANSION_PACK check for diagnosing incomplete types in\n+\tcxx_incomplete_type_diagnostic.\n+\n+2020-06-24  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95518\n+\tPR c++/95813\n+\t* coroutines.cc (act_des_fn): Copy function\n+\tattributes onto the outlined coroutine helpers.\n+\n+2020-06-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (build_over_call): Only call build_base_path once.\n+\n+2020-06-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95719\n+\t* call.c (build_over_call): Look up the overrider in base_binfo.\n+\t* class.c (lookup_vfn_in_binfo): Look through BINFO_PRIMARY_P.\n+\n 2020-06-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/93976"}, {"sha": "bca863171fbdbec84883a5745d3b45fc14739889", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e546c261beddd649e92925373e1c54aec3299a0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e546c261beddd649e92925373e1c54aec3299a0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2e546c261beddd649e92925373e1c54aec3299a0", "patch": "@@ -1,3 +1,9 @@\n+2020-06-24  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95827\n+\t* iresolve.c (gfc_get_string): Enlarge internal buffer used in\n+\tgenerating the mangled name.\n+\n 2020-06-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/95812"}, {"sha": "1bf13251754dc9a9c72a54341e7ffd5275ec9797", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e546c261beddd649e92925373e1c54aec3299a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e546c261beddd649e92925373e1c54aec3299a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e546c261beddd649e92925373e1c54aec3299a0", "patch": "@@ -1,3 +1,90 @@\n+2020-06-24  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\tPR target/94954\n+\t* gcc.target/powerpc/builtins-1-p9-runnable.c: Update.\n+\n+2020-06-24  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR testsuite/95416\n+\tPR testsuite/95577\n+\t* gcc.misc-tests/outputs.exp (gsplit_dwarf): Move -g into it.\n+\t(outest): Introduce conditionals and string/variable/expr\n+\texpansion.  Drop special-casing of $aout and .dwo.\n+\t(gspd): New conditional.  Guard all .dwo files with it.\n+\t(ltop): New conditional.  Guard files created by the LTO\n+\tplugin with it.  Guard files created by fat LTO compilation\n+\twith its negation.  Add a few -fno-use-linker-plugin tests\n+\tguarded by it.\n+\n+2020-06-24  Nicholas Krause  <xerofoify@gmail.com>\n+\n+\tPR c++/95672\n+\t* g++.dg/template/pr95672.C: New test.\n+\n+2020-06-24  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95518\n+\tPR c++/95813\n+\t* g++.dg/coroutines/pr95518.C: New test.\n+\t* g++.dg/coroutines/pr95813.C: New test.\n+\n+2020-06-24  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* g++.dg/coroutines/void-gro-non-class-coro.C: Moved to...\n+\t* g++.dg/coroutines/coro-bad-gro-01-void-gro-non-class-coro.C: ...here.\n+\t* g++.dg/coroutines/coro-bad-gro-00-class-gro-scalar-return.C: New test.\n+\n+2020-06-24  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95719\n+\t* g++.dg/tree-ssa/final4.C: New test.\n+\n+2020-06-24  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95827\n+\t* gfortran.dg/pr95827.f90: New file.\n+\n+2020-06-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95866\n+\t* gcc.target/i386/pr95866-1.c: New testcase.\n+\n+2020-06-24  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/95660\n+\t* gcc.target/i386/builtin_target.c (check_detailed): Updated.\n+\n+2020-06-24  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/95843\n+\t* gcc.target/i386/builtin_target.c: Include <stdlib.h>,\n+\t../../../common/config/i386/i386-cpuinfo.h and\n+\t../../../common/config/i386/cpuinfo.h.\n+\t(check_amd_cpu_model): Removed.\n+\t(check_intel_cpu_model): Likewise,\n+\t(CHECK___builtin_cpu_is): New.\n+\t(gcc_assert): New.  Defined as assert.\n+\t(gcc_unreachable): New.  Defined as abort.\n+\t(inline): New.  Defined as empty.\n+\t(ISA_NAMES_TABLE_START): Likewise.\n+\t(ISA_NAMES_TABLE_END): Likewise.\n+\t(ISA_NAMES_TABLE_ENTRY): New.\n+\t(check_features): Include\n+\t\"../../../common/config/i386/i386-isas.h\".\n+\t(check_detailed): Call cpu_indicator_init.  Always call\n+\tcheck_features.  Call get_amd_cpu instead of check_amd_cpu_model.\n+\tCall get_intel_cpu instead of check_intel_cpu_model.\n+\n+2020-06-24  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95856\n+\t* gcc.dg/vect/pr95856.c: New testcase.\n+\n+2020-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/95810\n+\t* gcc.dg/ubsan/pr95810.c: New test.\n+\n 2020-06-23  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp2a/class-deduction-aggr3.C: New test."}, {"sha": "9678abd87875ea6ef9ddc50d3453de52849af376", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e546c261beddd649e92925373e1c54aec3299a0/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e546c261beddd649e92925373e1c54aec3299a0/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=2e546c261beddd649e92925373e1c54aec3299a0", "patch": "@@ -1,3 +1,16 @@\n+2020-06-24  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/95259\n+\t* config/i386/cpuinfo.c: Don't include \"cpuinfo.h\".  Include\n+\t\"common/config/i386/i386-cpuinfo.h\" and\n+\t\"common/config/i386/cpuinfo.h\".\n+\t(__cpu_features2): Changed to array.\n+\t(get_amd_cpu): Removed.\n+\t(get_intel_cpu): Likewise.\n+\t(get_available_features): Likewise.\n+\t(__cpu_indicator_init): Call cpu_indicator_init.\n+\t* config/i386/cpuinfo.h: Removed.\n+\n 2020-06-23  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* Makefile.in: Remove uses of empty.mk. Use -include."}, {"sha": "c72b2d508bebb96e1b65ba8c1c37003fd311790d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e546c261beddd649e92925373e1c54aec3299a0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e546c261beddd649e92925373e1c54aec3299a0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2e546c261beddd649e92925373e1c54aec3299a0", "patch": "@@ -1,3 +1,23 @@\n+2020-06-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/charconv (__from_chars_binary): Ignore leading zeros.\n+\t* testsuite/20_util/from_chars/1.cc: Check \"0x1\" for all bases,\n+\tnot just 10 and 16.\n+\t* testsuite/20_util/from_chars/3.cc: New test.\n+\n+2020-06-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_algobase.h (__find_if): Add FALLTHRU markers.\n+\t* include/std/charconv (__detail::__to_chars): Avoid\n+\t-Wsign-compare warning.\n+\n+2020-06-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/95851\n+\t* include/std/charconv (__to_chars_i): Check for zero-sized\n+\tbuffer unconditionally.\n+\t* testsuite/20_util/to_chars/95851.cc: New test.\n+\n 2020-06-23  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/20_util/from_chars/1_c++20_neg.cc: Check enumeration"}]}