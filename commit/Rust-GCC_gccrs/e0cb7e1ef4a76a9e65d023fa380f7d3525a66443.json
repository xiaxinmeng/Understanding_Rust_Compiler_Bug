{"sha": "e0cb7e1ef4a76a9e65d023fa380f7d3525a66443", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBjYjdlMWVmNGE3NmE5ZTY1ZDAyM2ZhMzgwZjdkMzUyNWE2NjQ0Mw==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-12-21T22:58:57Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-12-21T22:58:57Z"}, "message": "value-prof.c (value_prof_hooks): Remove.\n\n\t* value-prof.c (value_prof_hooks): Remove.\n\t(struct value_prof_hooks): Remove.\n\t(gimple_value_prof_hooks): Remove.\n\t(gimple_register_value_prof_hooks): Remove.\n\t(find_values_to_profile): Remove.\n\t(value_profile_transformations): Remove.\n\t(gimple_value_profile_transformations): No longer static.\n\t(gimple_find_values_to_profile): Likewise.\n\t* value-prof.h (gimple_register_value_prof_hooks): Remove prototype.\n\t(find_values_to_profile): Likewise.\n\t(value_profile_transformations): Likewise.\n\t(tree_register_profile_hooks): Likewise.\n\t(struct profile_hooks): Remove.\n\t(tree_profile_hooks): Remove.\n\t(gimple_find_values_to_profile): New protoype.\n\t(gimple_value_profile_transformations): Likewise.\n\t(gimple_init_edge_profiler): Likewise.\n\t(gimple_gen_edge_profiler): Likewise.\n\t(gimple_gen_interval_profiler): Likewise.\n\t(gimple_gen_pow2_profiler): Likewise.\n\t(gimple_gen_one_value_profiler): Likewise.\n\t(gimple_gen_ic_profiler): Likewise.\n\t(gimple_gen_ic_func_profiler): Likewise.\n\t(gimple_gen_const_delta_profiler): Likewise.\n\t(gimple_gen_average_profiler): Likewise.\n\t(gimple_gen_ior_profiler): Likewise.\n\t* profile.c (profile_hooks): Remove.\n\t(instrument_edges): Call profiling functions directly instead\n\tof through removed profile_hooks.\n\t(instrument_values): Likewise.\n\t(branch_prob): Call gimple_find_values_to_profile instead of\n\tremoved find_values_to_profile.\n\tCall gimple_init_edge_profiler instead of removed hook.\n\t(tree_register_profile_hooks): Remove.\n\t* tree-profile.c (tree_init_ic_make_global_vars): Rename to\n\tinit_ic_make_global_vars.\n\t(tree_init_edge_profiler): Rename to gimple_init_edge_profiler\n\tand no longer static.\n\t(tree_gen_edge_profiler, tree_gen_interval_profiler,\n\ttree_gen_pow2_profiler, tree_gen_one_value_profiler,\n\ttree_gen_ic_profiler, tree_gen_ic_func_profiler,\n\ttree_gen_const_delta_profiler, tree_gen_average_profiler,\n\ttree_gen_ior_profiler): Similarly renamed and no longer static.\n\t(tree_profiling): Do not initialize tree profiling hooks.\n\t(tree_profile_hooks): Remove.\n\nFrom-SVN: r168141", "tree": {"sha": "457d8f8e6a793fbec8f9604b394a356b9b984701", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/457d8f8e6a793fbec8f9604b394a356b9b984701"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0cb7e1ef4a76a9e65d023fa380f7d3525a66443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0cb7e1ef4a76a9e65d023fa380f7d3525a66443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0cb7e1ef4a76a9e65d023fa380f7d3525a66443", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0cb7e1ef4a76a9e65d023fa380f7d3525a66443/comments", "author": null, "committer": null, "parents": [{"sha": "74d272a2e75d1724d853151427f07a3ca534a496", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d272a2e75d1724d853151427f07a3ca534a496", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d272a2e75d1724d853151427f07a3ca534a496"}], "stats": {"total": 244, "additions": 102, "deletions": 142}, "files": [{"sha": "6f61a6bffaa4546b39f4fec09f19ba9c90519af7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cb7e1ef4a76a9e65d023fa380f7d3525a66443/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cb7e1ef4a76a9e65d023fa380f7d3525a66443/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0cb7e1ef4a76a9e65d023fa380f7d3525a66443", "patch": "@@ -1,3 +1,52 @@\n+2010-12-21  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tDe-hookize profile infrastructure.\n+\t* value-prof.c (value_prof_hooks): Remove.\n+\t(struct value_prof_hooks): Remove.\n+\t(gimple_value_prof_hooks): Remove.\n+\t(gimple_register_value_prof_hooks): Remove.\n+\t(find_values_to_profile): Remove.\n+\t(value_profile_transformations): Remove.\n+\t(gimple_value_profile_transformations): No longer static.\n+\t(gimple_find_values_to_profile): Likewise.\n+\t* value-prof.h (gimple_register_value_prof_hooks): Remove prototype.\n+\t(find_values_to_profile): Likewise.\n+\t(value_profile_transformations): Likewise.\n+\t(tree_register_profile_hooks): Likewise.\n+\t(struct profile_hooks): Remove.\n+\t(tree_profile_hooks): Remove.\n+\t(gimple_find_values_to_profile): New protoype.\n+\t(gimple_value_profile_transformations): Likewise.\n+\t(gimple_init_edge_profiler): Likewise.\n+\t(gimple_gen_edge_profiler): Likewise.\n+\t(gimple_gen_interval_profiler): Likewise.\n+\t(gimple_gen_pow2_profiler): Likewise.\n+\t(gimple_gen_one_value_profiler): Likewise.\n+\t(gimple_gen_ic_profiler): Likewise.\n+\t(gimple_gen_ic_func_profiler): Likewise.\n+\t(gimple_gen_const_delta_profiler): Likewise.\n+\t(gimple_gen_average_profiler): Likewise.\n+\t(gimple_gen_ior_profiler): Likewise.\n+\t* profile.c (profile_hooks): Remove.\n+\t(instrument_edges): Call profiling functions directly instead\n+\tof through removed profile_hooks.\n+\t(instrument_values): Likewise.\n+\t(branch_prob): Call gimple_find_values_to_profile instead of\n+\tremoved find_values_to_profile.\n+\tCall gimple_init_edge_profiler instead of removed hook.\n+\t(tree_register_profile_hooks): Remove.\n+\t* tree-profile.c (tree_init_ic_make_global_vars): Rename to\n+\tinit_ic_make_global_vars.\n+\t(tree_init_edge_profiler): Rename to gimple_init_edge_profiler\n+\tand no longer static.\n+\t(tree_gen_edge_profiler, tree_gen_interval_profiler,\n+\ttree_gen_pow2_profiler, tree_gen_one_value_profiler,\n+\ttree_gen_ic_profiler, tree_gen_ic_func_profiler,\n+\ttree_gen_const_delta_profiler, tree_gen_average_profiler,\n+\ttree_gen_ior_profiler): Similarly renamed and no longer static.\n+\t(tree_profiling): Do not initialize tree profiling hooks.\n+\t(tree_profile_hooks): Remove.\n+\n 2010-12-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/46880"}, {"sha": "bde8b4677f9bef79477f9bb015e74aa19e7e6b6d", "filename": "gcc/profile.c", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cb7e1ef4a76a9e65d023fa380f7d3525a66443/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cb7e1ef4a76a9e65d023fa380f7d3525a66443/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=e0cb7e1ef4a76a9e65d023fa380f7d3525a66443", "patch": "@@ -72,9 +72,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"profile.h\"\n \n-/* Hooks for profiling.  */\n-static struct profile_hooks* profile_hooks;\n-\n struct bb_info {\n   unsigned int count_valid : 1;\n \n@@ -141,7 +138,7 @@ instrument_edges (struct edge_list *el)\n \t\tfprintf (dump_file, \"Edge %d to %d instrumented%s\\n\",\n \t\t\t e->src->index, e->dest->index,\n \t\t\t EDGE_CRITICAL_P (e) ? \" (and split)\" : \"\");\n-\t      (profile_hooks->gen_edge_profiler) (num_instr_edges++, e);\n+\t      gimple_gen_edge_profiler (num_instr_edges++, e);\n \t    }\n \t}\n     }\n@@ -202,31 +199,31 @@ instrument_values (histogram_values values)\n       switch (hist->type)\n \t{\n \tcase HIST_TYPE_INTERVAL:\n-\t  (profile_hooks->gen_interval_profiler) (hist, t, 0);\n+\t  gimple_gen_interval_profiler (hist, t, 0);\n \t  break;\n \n \tcase HIST_TYPE_POW2:\n-\t  (profile_hooks->gen_pow2_profiler) (hist, t, 0);\n+\t  gimple_gen_pow2_profiler (hist, t, 0);\n \t  break;\n \n \tcase HIST_TYPE_SINGLE_VALUE:\n-\t  (profile_hooks->gen_one_value_profiler) (hist, t, 0);\n+\t  gimple_gen_one_value_profiler (hist, t, 0);\n \t  break;\n \n \tcase HIST_TYPE_CONST_DELTA:\n-\t  (profile_hooks->gen_const_delta_profiler) (hist, t, 0);\n+\t  gimple_gen_const_delta_profiler (hist, t, 0);\n \t  break;\n \n  \tcase HIST_TYPE_INDIR_CALL:\n- \t  (profile_hooks->gen_ic_profiler) (hist, t, 0);\n+ \t  gimple_gen_ic_profiler (hist, t, 0);\n   \t  break;\n \n \tcase HIST_TYPE_AVERAGE:\n-\t  (profile_hooks->gen_average_profiler) (hist, t, 0);\n+\t  gimple_gen_average_profiler (hist, t, 0);\n \t  break;\n \n \tcase HIST_TYPE_IOR:\n-\t  (profile_hooks->gen_ior_profiler) (hist, t, 0);\n+\t  gimple_gen_ior_profiler (hist, t, 0);\n \t  break;\n \n \tdefault:\n@@ -1170,7 +1167,7 @@ branch_prob (void)\n #undef BB_TO_GCOV_INDEX\n \n   if (flag_profile_values)\n-    find_values_to_profile (&values);\n+    gimple_find_values_to_profile (&values);\n \n   if (flag_branch_probabilities)\n     {\n@@ -1187,7 +1184,7 @@ branch_prob (void)\n     {\n       unsigned n_instrumented;\n \n-      profile_hooks->init_edge_profiler ();\n+      gimple_init_edge_profiler ();\n \n       n_instrumented = instrument_edges (el);\n \n@@ -1372,11 +1369,3 @@ end_branch_prob (void)\n     }\n }\n \n-/* Set up hooks to enable tree-based profiling.  */\n-\n-void\n-tree_register_profile_hooks (void)\n-{\n-  gcc_assert (current_ir_type () == IR_GIMPLE);\n-  profile_hooks = &tree_profile_hooks;\n-}"}, {"sha": "c1c0577c2efd05ca31b0024cfba009f50f39a0f0", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 25, "deletions": 42, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cb7e1ef4a76a9e65d023fa380f7d3525a66443/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cb7e1ef4a76a9e65d023fa380f7d3525a66443/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=e0cb7e1ef4a76a9e65d023fa380f7d3525a66443", "patch": "@@ -65,7 +65,7 @@ static GTY(()) tree ptr_void;\n    static void*\t__gcov_indirect_call_callee; // actual callee address\n */\n static void\n-tree_init_ic_make_global_vars (void)\n+init_ic_make_global_vars (void)\n {\n   tree  gcov_type_ptr;\n \n@@ -95,8 +95,8 @@ tree_init_ic_make_global_vars (void)\n   varpool_mark_needed_node (varpool_node (ic_gcov_type_ptr_var));\n }\n \n-static void\n-tree_init_edge_profiler (void)\n+void\n+gimple_init_edge_profiler (void)\n {\n   tree interval_profiler_fn_type;\n   tree pow2_profiler_fn_type;\n@@ -149,7 +149,7 @@ tree_init_edge_profiler (void)\n \t= tree_cons (get_identifier (\"leaf\"), NULL,\n \t\t     DECL_ATTRIBUTES (tree_one_value_profiler_fn));\n \n-      tree_init_ic_make_global_vars ();\n+      init_ic_make_global_vars ();\n \n       /* void (*) (gcov_type *, gcov_type, void *, void *)  */\n       ic_profiler_fn_type\n@@ -199,8 +199,8 @@ tree_init_edge_profiler (void)\n    execution count, and insert them on E.  We rely on\n    gsi_insert_on_edge to preserve the order.  */\n \n-static void\n-tree_gen_edge_profiler (int edgeno, edge e)\n+void\n+gimple_gen_edge_profiler (int edgeno, edge e)\n {\n   tree ref, one;\n   gimple stmt1, stmt2, stmt3;\n@@ -239,8 +239,8 @@ prepare_instrumented_value (gimple_stmt_iterator *gsi, histogram_value value)\n    counter.  VALUE is the expression whose value is profiled.  TAG is the\n    tag of the section for counters, BASE is offset of the counter position.  */\n \n-static void\n-tree_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base)\n+void\n+gimple_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base)\n {\n   gimple stmt = value->hvalue.stmt;\n   gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n@@ -265,8 +265,8 @@ tree_gen_interval_profiler (histogram_value value, unsigned tag, unsigned base)\n    counter.  VALUE is the expression whose value is profiled.  TAG is the tag\n    of the section for counters, BASE is offset of the counter position.  */\n \n-static void\n-tree_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n+void\n+gimple_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n {\n   gimple stmt = value->hvalue.stmt;\n   gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n@@ -285,8 +285,8 @@ tree_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n    VALUE is the expression whose value is profiled.  TAG is the tag of the\n    section for counters, BASE is offset of the counter position.  */\n \n-static void\n-tree_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned base)\n+void\n+gimple_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned base)\n {\n   gimple stmt = value->hvalue.stmt;\n   gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n@@ -308,8 +308,8 @@ tree_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned base)\n    TAG is the tag of the section for counters, BASE is offset of the\n    counter position.  */\n \n-static void\n-tree_gen_ic_profiler (histogram_value value, unsigned tag, unsigned base)\n+void\n+gimple_gen_ic_profiler (histogram_value value, unsigned tag, unsigned base)\n {\n   tree tmp1;\n   gimple stmt1, stmt2, stmt3;\n@@ -343,8 +343,8 @@ tree_gen_ic_profiler (histogram_value value, unsigned tag, unsigned base)\n    beginning of every possible called function.\n   */\n \n-static void\n-tree_gen_ic_func_profiler (void)\n+void\n+gimple_gen_ic_func_profiler (void)\n {\n   struct cgraph_node * c_node = cgraph_node (current_function_decl);\n   gimple_stmt_iterator gsi;\n@@ -354,7 +354,7 @@ tree_gen_ic_func_profiler (void)\n   if (cgraph_only_called_directly_p (c_node))\n     return;\n \n-  tree_init_edge_profiler ();\n+  gimple_init_edge_profiler ();\n \n   gsi = gsi_after_labels (single_succ (ENTRY_BLOCK_PTR));\n \n@@ -387,8 +387,8 @@ tree_gen_ic_func_profiler (void)\n    VALUE is the expression whose value is profiled.  TAG is the tag of the\n    section for counters, BASE is offset of the counter position.  */\n \n-static void\n-tree_gen_const_delta_profiler (histogram_value value ATTRIBUTE_UNUSED,\n+void\n+gimple_gen_const_delta_profiler (histogram_value value ATTRIBUTE_UNUSED,\n \t\t\t       unsigned tag ATTRIBUTE_UNUSED,\n \t\t\t       unsigned base ATTRIBUTE_UNUSED)\n {\n@@ -403,8 +403,8 @@ tree_gen_const_delta_profiler (histogram_value value ATTRIBUTE_UNUSED,\n    counter.  VALUE is the expression whose value is profiled.  TAG is the\n    tag of the section for counters, BASE is offset of the counter position.  */\n \n-static void\n-tree_gen_average_profiler (histogram_value value, unsigned tag, unsigned base)\n+void\n+gimple_gen_average_profiler (histogram_value value, unsigned tag, unsigned base)\n {\n   gimple stmt = value->hvalue.stmt;\n   gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n@@ -424,8 +424,8 @@ tree_gen_average_profiler (histogram_value value, unsigned tag, unsigned base)\n    counter.  VALUE is the expression whose value is profiled.  TAG is the\n    tag of the section for counters, BASE is offset of the counter position.  */\n \n-static void\n-tree_gen_ior_profiler (histogram_value value, unsigned tag, unsigned base)\n+void\n+gimple_gen_ior_profiler (histogram_value value, unsigned tag, unsigned base)\n {\n   gimple stmt = value->hvalue.stmt;\n   gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n@@ -454,9 +454,6 @@ tree_profiling (void)\n   if (cgraph_state == CGRAPH_STATE_FINISHED)\n     return 0;\n \n-  tree_register_profile_hooks ();\n-  gimple_register_value_prof_hooks ();\n-\n   for (node = cgraph_nodes; node; node = node->next)\n     {\n       if (!node->analyzed\n@@ -479,12 +476,12 @@ tree_profiling (void)\n \n       if (! flag_branch_probabilities\n \t  && flag_profile_values)\n-\ttree_gen_ic_func_profiler ();\n+\tgimple_gen_ic_func_profiler ();\n \n       if (flag_branch_probabilities\n \t  && flag_profile_values\n \t  && flag_value_profile_transformations)\n-\tvalue_profile_transformations ();\n+\tgimple_value_profile_transformations ();\n \n       /* The above could hose dominator info.  Currently there is\n \t none coming in, this is a safety valve.  It should be\n@@ -583,18 +580,4 @@ struct simple_ipa_opt_pass pass_ipa_tree_profile =\n  }\n };\n \n-\n-struct profile_hooks tree_profile_hooks =\n-{\n-  tree_init_edge_profiler,       /* init_edge_profiler */\n-  tree_gen_edge_profiler,\t /* gen_edge_profiler */\n-  tree_gen_interval_profiler,    /* gen_interval_profiler */\n-  tree_gen_pow2_profiler,        /* gen_pow2_profiler */\n-  tree_gen_one_value_profiler,   /* gen_one_value_profiler */\n-  tree_gen_const_delta_profiler, /* gen_const_delta_profiler */\n-  tree_gen_ic_profiler,\t\t /* gen_ic_profiler */\n-  tree_gen_average_profiler,     /* gen_average_profiler */\n-  tree_gen_ior_profiler          /* gen_ior_profiler */\n-};\n-\n #include \"gt-tree-profile.h\""}, {"sha": "414b94887fed9e984f87f53683c252bea3364dbe", "filename": "gcc/value-prof.c", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cb7e1ef4a76a9e65d023fa380f7d3525a66443/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cb7e1ef4a76a9e65d023fa380f7d3525a66443/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=e0cb7e1ef4a76a9e65d023fa380f7d3525a66443", "patch": "@@ -47,8 +47,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"pointer-set.h\"\n \n-static struct value_prof_hooks *value_prof_hooks;\n-\n /* In this file value profile based optimizations are placed.  Currently the\n    following optimizations are implemented (for more detailed descriptions\n    see comments at value_profile_transformations):\n@@ -488,7 +486,7 @@ check_counter (gimple stmt, const char * name,\n \n /* GIMPLE based transformations. */\n \n-static bool\n+bool\n gimple_value_profile_transformations (void)\n {\n   basic_block bb;\n@@ -1545,14 +1543,6 @@ stringop_block_profile (gimple stmt, unsigned int *expected_align,\n     }\n }\n \n-struct value_prof_hooks {\n-  /* Find list of values for which we want to measure histograms.  */\n-  void (*find_values_to_profile) (histogram_values *);\n-\n-  /* Identify and exploit properties of values that are hard to analyze\n-     statically.  See value-prof.c for more detail.  */\n-  bool (*value_profile_transformations) (void);\n-};\n \f\n /* Find values inside STMT for that we want to measure histograms for\n    division/modulo optimization.  */\n@@ -1686,7 +1676,7 @@ gimple_values_to_profile (gimple stmt, histogram_values *values)\n     }\n }\n \n-static void\n+void\n gimple_find_values_to_profile (histogram_values *values)\n {\n   basic_block bb;\n@@ -1743,28 +1733,3 @@ gimple_find_values_to_profile (histogram_values *values)\n     }\n }\n \n-static struct value_prof_hooks gimple_value_prof_hooks = {\n-  gimple_find_values_to_profile,\n-  gimple_value_profile_transformations\n-};\n-\n-void\n-gimple_register_value_prof_hooks (void)\n-{\n-  gcc_assert (current_ir_type () == IR_GIMPLE);\n-  value_prof_hooks = &gimple_value_prof_hooks;\n-}\n-\f\n-/* IR-independent entry points.  */\n-void\n-find_values_to_profile (histogram_values *values)\n-{\n-  (value_prof_hooks->find_values_to_profile) (values);\n-}\n-\n-bool\n-value_profile_transformations (void)\n-{\n-  return (value_prof_hooks->value_profile_transformations) ();\n-}\n-\f"}, {"sha": "abd91706ca74e09fa1f7eeb30c45607b640fccd9", "filename": "gcc/value-prof.h", "status": "modified", "additions": 16, "deletions": 42, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0cb7e1ef4a76a9e65d023fa380f7d3525a66443/gcc%2Fvalue-prof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0cb7e1ef4a76a9e65d023fa380f7d3525a66443/gcc%2Fvalue-prof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.h?ref=e0cb7e1ef4a76a9e65d023fa380f7d3525a66443", "patch": "@@ -40,6 +40,7 @@ enum hist_type\n #define HIST_TYPE_FOR_COUNTER(COUNTER) \\\n   ((enum hist_type) ((COUNTER) - GCOV_FIRST_VALUE_COUNTER))\n \n+\f\n /* The value to measure.  */\n struct histogram_value_t\n {\n@@ -70,44 +71,8 @@ DEF_VEC_ALLOC_P(histogram_value,heap);\n \n typedef VEC(histogram_value,heap) *histogram_values;\n \n-/* Hooks registration.  */\n-extern void gimple_register_value_prof_hooks (void);\n-\n-/* IR-independent entry points.  */\n-extern void find_values_to_profile (histogram_values *);\n-extern bool value_profile_transformations (void);\n-\f\n-/* External declarations for edge-based profiling.  */\n-struct profile_hooks {\n-\n-  /* Insert code to initialize edge profiler.  */\n-  void (*init_edge_profiler) (void);\n-\n-  /* Insert code to increment an edge count.  */\n-  void (*gen_edge_profiler) (int, edge);\n-\n-  /* Insert code to increment the interval histogram counter.  */\n-  void (*gen_interval_profiler) (histogram_value, unsigned, unsigned);\n-\n-  /* Insert code to increment the power of two histogram counter.  */\n-  void (*gen_pow2_profiler) (histogram_value, unsigned, unsigned);\n-\n-  /* Insert code to find the most common value.  */\n-  void (*gen_one_value_profiler) (histogram_value, unsigned, unsigned);\n-\n-  /* Insert code to find the most common value of a difference between two\n-     evaluations of an expression.  */\n-  void (*gen_const_delta_profiler) (histogram_value, unsigned, unsigned);\n-\n-  /* Insert code to find the most common indirect call */\n-  void (*gen_ic_profiler) (histogram_value, unsigned, unsigned);\n-\n-  /* Insert code to find the average value of an expression.  */\n-  void (*gen_average_profiler) (histogram_value, unsigned, unsigned);\n-\n-  /* Insert code to ior value of an expression.  */\n-  void (*gen_ior_profiler) (histogram_value, unsigned, unsigned);\n-};\n+extern void gimple_find_values_to_profile (histogram_values *);\n+extern bool gimple_value_profile_transformations (void);\n \n histogram_value gimple_histogram_value (struct function *, gimple);\n histogram_value gimple_histogram_value_of_type (struct function *, gimple,\n@@ -123,14 +88,23 @@ void verify_histograms (void);\n void free_histograms (void);\n void stringop_block_profile (gimple, unsigned int *, HOST_WIDE_INT *);\n \n+/* In tree-profile.c.  */\n+extern void gimple_init_edge_profiler (void);\n+extern void gimple_gen_edge_profiler (int, edge);\n+extern void gimple_gen_interval_profiler (histogram_value, unsigned, unsigned);\n+extern void gimple_gen_pow2_profiler (histogram_value, unsigned, unsigned);\n+extern void gimple_gen_one_value_profiler (histogram_value, unsigned, unsigned);\n+extern void gimple_gen_ic_profiler (histogram_value, unsigned, unsigned);\n+extern void gimple_gen_ic_func_profiler (void);\n+extern void gimple_gen_const_delta_profiler (histogram_value,\n+\t\t\t\t\t     unsigned, unsigned);\n+extern void gimple_gen_average_profiler (histogram_value, unsigned, unsigned);\n+extern void gimple_gen_ior_profiler (histogram_value, unsigned, unsigned);\n+\n /* In profile.c.  */\n extern void init_branch_prob (void);\n extern void branch_prob (void);\n extern void end_branch_prob (void);\n-extern void tree_register_profile_hooks (void);\n-\n-/* In tree-profile.c.  */\n-extern struct profile_hooks tree_profile_hooks;\n \n #endif\t/* GCC_VALUE_PROF_H */\n "}]}