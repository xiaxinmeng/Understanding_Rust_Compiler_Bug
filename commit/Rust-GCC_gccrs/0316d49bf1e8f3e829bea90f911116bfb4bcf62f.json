{"sha": "0316d49bf1e8f3e829bea90f911116bfb4bcf62f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMxNmQ0OWJmMWU4ZjNlODI5YmVhOTBmOTExMTE2YmZiNGJjZjYyZg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2002-05-06T16:59:18Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2002-05-06T16:59:18Z"}, "message": "fold-const.c (lshift-double): Cast the high word to an unsigned HOST_WIDE_INT when...\n\n\t* fold-const.c (lshift-double): Cast the high word to an unsigned\n\tHOST_WIDE_INT when extracting sign bit to avoid compiler warning.\n\t(div_and_round_double): Cast carry to a signed HOST_WIDE_INT to\n\tavoid compiler warning.  (fold): Remove redundant code from\n\tBIT_AND_EXPR as integer operands are canonicalized to be arg1.\n\nFrom-SVN: r53228", "tree": {"sha": "e69fbf2a94a480e2cc8a6ea185d10acd5012fd5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e69fbf2a94a480e2cc8a6ea185d10acd5012fd5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0316d49bf1e8f3e829bea90f911116bfb4bcf62f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0316d49bf1e8f3e829bea90f911116bfb4bcf62f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0316d49bf1e8f3e829bea90f911116bfb4bcf62f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0316d49bf1e8f3e829bea90f911116bfb4bcf62f/comments", "author": null, "committer": null, "parents": [{"sha": "5d50fab3144e5114b3a848749da6717a94117be1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d50fab3144e5114b3a848749da6717a94117be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d50fab3144e5114b3a848749da6717a94117be1"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "89afcc7b3cde24aee9131ff085c06985b0ac7ff8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0316d49bf1e8f3e829bea90f911116bfb4bcf62f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0316d49bf1e8f3e829bea90f911116bfb4bcf62f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0316d49bf1e8f3e829bea90f911116bfb4bcf62f", "patch": "@@ -1,3 +1,11 @@\n+2002-05-06  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (lshift-double): Cast the high word to an unsigned\n+\tHOST_WIDE_INT when extracting sign bit to avoid compiler warning.\n+\t(div_and_round_double): Cast carry to a signed HOST_WIDE_INT to\n+\tavoid compiler warning.  (fold): Remove redundant code from\n+\tBIT_AND_EXPR as integer operands are canonicalized to be arg1.\n+\n 2002-05-06  Jeff Law  <law@redhat.com>\n \n \t* pa-protos.h (hppa_fpstore_bypass_p): Declare."}, {"sha": "9142f3d80dc78db5f390e5630094407c2443a724", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0316d49bf1e8f3e829bea90f911116bfb4bcf62f/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0316d49bf1e8f3e829bea90f911116bfb4bcf62f/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=0316d49bf1e8f3e829bea90f911116bfb4bcf62f", "patch": "@@ -411,7 +411,8 @@ lshift_double (l1, h1, count, prec, lv, hv, arith)\n   /* Sign extend all bits that are beyond the precision.  */\n \n   signmask = -((prec > HOST_BITS_PER_WIDE_INT\n-\t\t? (*hv >> (prec - HOST_BITS_PER_WIDE_INT - 1))\n+\t\t? ((unsigned HOST_WIDE_INT) *hv\n+                   >> (prec - HOST_BITS_PER_WIDE_INT - 1))\n \t\t: (*lv >> (prec - 1))) & 1);\n \n   if (prec >= 2 * HOST_BITS_PER_WIDE_INT)\n@@ -717,7 +718,7 @@ div_and_round_double (code, uns,\n \n \t  /* If quo_est was high by one, then num[i] went negative and\n \t     we need to correct things.  */\n-\t  if (num[num_hi_sig] < carry)\n+\t  if (num[num_hi_sig] < (HOST_WIDE_INT) carry)\n \t    {\n \t      quo_est--;\n \t      carry = 0;\t\t/* add divisor back in */\n@@ -5339,17 +5340,6 @@ fold (expr)\n       if (t1 != NULL_TREE)\n \treturn t1;\n       /* Simplify ((int)c & 0x377) into (int)c, if c is unsigned char.  */\n-      if (TREE_CODE (arg0) == INTEGER_CST && TREE_CODE (arg1) == NOP_EXPR\n-\t  && TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (arg1, 0))))\n-\t{\n-\t  unsigned int prec\n-\t    = TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (arg1, 0)));\n-\n-\t  if (prec < BITS_PER_WORD && prec < HOST_BITS_PER_WIDE_INT\n-\t      && (~TREE_INT_CST_LOW (arg0)\n-\t\t  & (((HOST_WIDE_INT) 1 << prec) - 1)) == 0)\n-\t    return build1 (NOP_EXPR, type, TREE_OPERAND (arg1, 0));\n-\t}\n       if (TREE_CODE (arg1) == INTEGER_CST && TREE_CODE (arg0) == NOP_EXPR\n \t  && TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (arg0, 0))))\n \t{"}]}