{"sha": "9f7d06d693cc3c45b0213fbe115d56b252279dbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY3ZDA2ZDY5M2NjM2M0NWIwMjEzZmJlMTE1ZDU2YjI1MjI3OWRiZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-11-06T00:46:44Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-11-06T00:46:44Z"}, "message": "alpha.c (alpha_expand_unaligned_load): Special case size 2 with BWX.\n\n        * config/alpha/alpha.c (alpha_expand_unaligned_load): Special case\n        size 2 with BWX.\n        (alpha_expand_unaligned_store): Likewise.\n\nFrom-SVN: r90156", "tree": {"sha": "0fcebd9a2c7387d9db901a77b6f63722adf88b8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fcebd9a2c7387d9db901a77b6f63722adf88b8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f7d06d693cc3c45b0213fbe115d56b252279dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f7d06d693cc3c45b0213fbe115d56b252279dbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f7d06d693cc3c45b0213fbe115d56b252279dbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f7d06d693cc3c45b0213fbe115d56b252279dbe/comments", "author": null, "committer": null, "parents": [{"sha": "637022d94553359f5008b47699c84da48a25eee0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637022d94553359f5008b47699c84da48a25eee0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/637022d94553359f5008b47699c84da48a25eee0"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "dd21cb1a6f01cdf3a81597ba135b82c0722f39f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7d06d693cc3c45b0213fbe115d56b252279dbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7d06d693cc3c45b0213fbe115d56b252279dbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f7d06d693cc3c45b0213fbe115d56b252279dbe", "patch": "@@ -1,3 +1,9 @@\n+2004-11-05  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (alpha_expand_unaligned_load): Special case\n+\tsize 2 with BWX.\n+\t(alpha_expand_unaligned_store): Likewise.\n+\n 2004-11-05  Richard Henderson  <rth@redhat.com>\n \n \t* expmed.c (extract_force_align_mem_bit_field): New."}, {"sha": "5151571116e25f27664426af158e631b853a5c70", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f7d06d693cc3c45b0213fbe115d56b252279dbe/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f7d06d693cc3c45b0213fbe115d56b252279dbe/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=9f7d06d693cc3c45b0213fbe115d56b252279dbe", "patch": "@@ -3164,6 +3164,35 @@ alpha_expand_unaligned_load (rtx tgt, rtx mem, HOST_WIDE_INT size,\n   rtx meml, memh, addr, extl, exth, tmp, mema;\n   enum machine_mode mode;\n \n+  if (TARGET_BWX && size == 2)\n+    {\n+      meml = adjust_address (mem, QImode, 0);\n+      memh = adjust_address (mem, QImode, 1);\n+      if (BYTES_BIG_ENDIAN)\n+\ttmp = meml, meml = memh, memh = tmp;\n+      extl = gen_reg_rtx (DImode);\n+      exth = gen_reg_rtx (DImode);\n+      emit_insn (gen_zero_extendqidi2 (extl, meml));\n+      emit_insn (gen_zero_extendqidi2 (exth, memh));\n+      exth = expand_simple_binop (DImode, ASHIFT, exth, GEN_INT (8),\n+\t\t\t\t  NULL, 1, OPTAB_LIB_WIDEN);\n+      addr = expand_simple_binop (DImode, IOR, extl, exth,\n+\t\t\t\t  NULL, 1, OPTAB_LIB_WIDEN);\n+\n+      if (sign && GET_MODE (tgt) != HImode)\n+\t{\n+\t  addr = gen_lowpart (HImode, addr);\n+\t  emit_insn (gen_extend_insn (tgt, addr, GET_MODE (tgt), HImode, 0));\n+\t}\n+      else\n+\t{\n+\t  if (GET_MODE (tgt) != DImode)\n+\t    addr = gen_lowpart (GET_MODE (tgt), addr);\n+\t  emit_move_insn (tgt, addr);\n+\t}\n+      return;\n+    }\n+\n   meml = gen_reg_rtx (DImode);\n   memh = gen_reg_rtx (DImode);\n   addr = gen_reg_rtx (DImode);\n@@ -3276,7 +3305,7 @@ alpha_expand_unaligned_load (rtx tgt, rtx mem, HOST_WIDE_INT size,\n     }\n \n   if (addr != tgt)\n-    emit_move_insn (tgt, gen_lowpart(GET_MODE (tgt), addr));\n+    emit_move_insn (tgt, gen_lowpart (GET_MODE (tgt), addr));\n }\n \n /* Similarly, use ins and msk instructions to perform unaligned stores.  */\n@@ -3287,6 +3316,28 @@ alpha_expand_unaligned_store (rtx dst, rtx src,\n {\n   rtx dstl, dsth, addr, insl, insh, meml, memh, dsta;\n \n+  if (TARGET_BWX && size == 2)\n+    {\n+      if (src != const0_rtx)\n+\t{\n+\t  dstl = gen_lowpart (QImode, src);\n+\t  dsth = expand_simple_binop (DImode, LSHIFTRT, src, GEN_INT (8),\n+\t\t\t\t      NULL, 1, OPTAB_LIB_WIDEN);\n+\t  dsth = gen_lowpart (QImode, dsth);\n+\t}\n+      else\n+\tdstl = dsth = const0_rtx;\n+\n+      meml = adjust_address (dst, QImode, 0);\n+      memh = adjust_address (dst, QImode, 1);\n+      if (BYTES_BIG_ENDIAN)\n+\taddr = meml, meml = memh, memh = addr;\n+\n+      emit_move_insn (meml, dstl);\n+      emit_move_insn (memh, dsth);\n+      return;\n+    }\n+\n   dstl = gen_reg_rtx (DImode);\n   dsth = gen_reg_rtx (DImode);\n   insl = gen_reg_rtx (DImode);"}]}