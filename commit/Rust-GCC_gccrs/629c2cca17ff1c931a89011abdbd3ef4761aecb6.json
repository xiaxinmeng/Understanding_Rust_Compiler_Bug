{"sha": "629c2cca17ff1c931a89011abdbd3ef4761aecb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI5YzJjY2ExN2ZmMWM5MzFhODkwMTFhYmRiZDNlZjQ3NjFhZWNiNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-01-05T20:43:43Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-01-05T20:43:43Z"}, "message": "tree-vrp.c (extract_range_from_binary_expr_1): Remove duplicated condition.\n\n\t* tree-vrp.c (extract_range_from_binary_expr_1): Remove duplicated\n\tcondition.\n\t(extract_range_from_unary_expr_1): Avoid useless computations.\n\nFrom-SVN: r182923", "tree": {"sha": "8e9c2b0881e40714f0928329bbc8c5727872e7b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e9c2b0881e40714f0928329bbc8c5727872e7b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/629c2cca17ff1c931a89011abdbd3ef4761aecb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629c2cca17ff1c931a89011abdbd3ef4761aecb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/629c2cca17ff1c931a89011abdbd3ef4761aecb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629c2cca17ff1c931a89011abdbd3ef4761aecb6/comments", "author": null, "committer": null, "parents": [{"sha": "a3e6a37b65335d59140b5415cabcb34ca6951371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e6a37b65335d59140b5415cabcb34ca6951371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3e6a37b65335d59140b5415cabcb34ca6951371"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "7991f1af03d039318c3429778dbf8e5cb1b9322f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629c2cca17ff1c931a89011abdbd3ef4761aecb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629c2cca17ff1c931a89011abdbd3ef4761aecb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=629c2cca17ff1c931a89011abdbd3ef4761aecb6", "patch": "@@ -1,3 +1,9 @@\n+2012-01-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-vrp.c (extract_range_from_binary_expr_1): Remove duplicated\n+\tcondition.\n+\t(extract_range_from_unary_expr_1): Avoid useless computations.\n+\n 2012-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/51767"}, {"sha": "4a018f73c17555b69ba1e1430d32b2483e39d461", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/629c2cca17ff1c931a89011abdbd3ef4761aecb6/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/629c2cca17ff1c931a89011abdbd3ef4761aecb6/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=629c2cca17ff1c931a89011abdbd3ef4761aecb6", "patch": "@@ -2579,17 +2579,13 @@ extract_range_from_binary_expr_1 (value_range_t *vr,\n \t behavior from the shift operation.  We cannot even trust\n \t SHIFT_COUNT_TRUNCATED at this stage, because that applies to rtl\n \t shifts, and the operation at the tree level may be widened.  */\n-      if (code == RSHIFT_EXPR)\n+      if (vr1.type != VR_RANGE\n+\t  || !value_range_nonnegative_p (&vr1)\n+\t  || TREE_CODE (vr1.max) != INTEGER_CST\n+\t  || compare_tree_int (vr1.max, TYPE_PRECISION (expr_type) - 1) == 1)\n \t{\n-\t  if (vr1.type != VR_RANGE\n-\t      || !value_range_nonnegative_p (&vr1)\n-\t      || TREE_CODE (vr1.max) != INTEGER_CST\n-\t      || compare_tree_int (vr1.max,\n-\t\t\t\t   TYPE_PRECISION (expr_type) - 1) == 1)\n-\t    {\n-\t      set_value_range_to_varying (vr);\n-\t      return;\n-\t    }\n+\t  set_value_range_to_varying (vr);\n+\t  return;\n \t}\n \n       extract_range_from_multiplicative_op_1 (vr, code, &vr0, &vr1);\n@@ -2990,16 +2986,18 @@ extract_range_from_unary_expr_1 (value_range_t *vr,\n \t\t         size_int (TYPE_PRECISION (outer_type)))))))\n \t{\n \t  tree new_min, new_max;\n-\t  new_min = force_fit_type_double (outer_type,\n-\t\t\t\t\t   tree_to_double_int (vr0.min),\n-\t\t\t\t\t   0, false);\n-\t  new_max = force_fit_type_double (outer_type,\n-\t\t\t\t\t   tree_to_double_int (vr0.max),\n-\t\t\t\t\t   0, false);\n \t  if (is_overflow_infinity (vr0.min))\n \t    new_min = negative_overflow_infinity (outer_type);\n+\t  else\n+\t    new_min = force_fit_type_double (outer_type,\n+\t\t\t\t\t     tree_to_double_int (vr0.min),\n+\t\t\t\t\t     0, false);\n \t  if (is_overflow_infinity (vr0.max))\n \t    new_max = positive_overflow_infinity (outer_type);\n+\t  else\n+\t    new_max = force_fit_type_double (outer_type,\n+\t\t\t\t\t     tree_to_double_int (vr0.max),\n+\t\t\t\t\t     0, false);\n \t  set_and_canonicalize_value_range (vr, vr0.type,\n \t\t\t\t\t    new_min, new_max, NULL);\n \t  return;"}]}