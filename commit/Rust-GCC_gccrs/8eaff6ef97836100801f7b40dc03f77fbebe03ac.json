{"sha": "8eaff6ef97836100801f7b40dc03f77fbebe03ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVhZmY2ZWY5NzgzNjEwMDgwMWY3YjQwZGMwM2Y3N2ZiZWJlMDNhYw==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2019-01-30T21:49:23Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2019-01-30T21:49:23Z"}, "message": "re PR rtl-optimization/87246 (ICE in decompose_normal_address, at rtlanal.c:6379)\n\n2019-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/87246\n\t* lra-constraints.c (simplify_operand_subreg): Reload memory\n\tin subreg if the address became invalid.\n\n2019-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/87246\n\t* gcc.target/i386/pr87246.c: New.\n\nFrom-SVN: r268404", "tree": {"sha": "17734a6f63e27573dc11cae1de7a0027c74efc52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17734a6f63e27573dc11cae1de7a0027c74efc52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8eaff6ef97836100801f7b40dc03f77fbebe03ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eaff6ef97836100801f7b40dc03f77fbebe03ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eaff6ef97836100801f7b40dc03f77fbebe03ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eaff6ef97836100801f7b40dc03f77fbebe03ac/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03bb10aad41b3ef70b72cdb667157ee599f5bc64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03bb10aad41b3ef70b72cdb667157ee599f5bc64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03bb10aad41b3ef70b72cdb667157ee599f5bc64"}], "stats": {"total": 65, "additions": 52, "deletions": 13}, "files": [{"sha": "895194f65d024cbcd43b9c869ecf68ebb9306538", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eaff6ef97836100801f7b40dc03f77fbebe03ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eaff6ef97836100801f7b40dc03f77fbebe03ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8eaff6ef97836100801f7b40dc03f77fbebe03ac", "patch": "@@ -1,3 +1,9 @@\n+2019-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/87246\n+\t* lra-constraints.c (simplify_operand_subreg): Reload memory\n+\tin subreg if the address became invalid.\n+\n 2019-01-30  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \tPR target/87064"}, {"sha": "d581513f33f4be33ca3242003dfea658fbc144ca", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eaff6ef97836100801f7b40dc03f77fbebe03ac/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eaff6ef97836100801f7b40dc03f77fbebe03ac/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=8eaff6ef97836100801f7b40dc03f77fbebe03ac", "patch": "@@ -1497,10 +1497,11 @@ simplify_operand_subreg (int nop, machine_mode reg_mode)\n       alter_subreg (curr_id->operand_loc[nop], false);\n       rtx subst = *curr_id->operand_loc[nop];\n       lra_assert (MEM_P (subst));\n-\n+      const bool addr_is_valid = valid_address_p (GET_MODE (subst),\n+\t\t\t\t\t\t  XEXP (subst, 0),\n+\t\t\t\t\t\t  MEM_ADDR_SPACE (subst));\n       if (!addr_was_valid\n-\t  || valid_address_p (GET_MODE (subst), XEXP (subst, 0),\n-\t\t\t      MEM_ADDR_SPACE (subst))\n+\t  || addr_is_valid\n \t  || ((get_constraint_type (lookup_constraint\n \t\t\t\t    (curr_static_id->operand[nop].constraint))\n \t       != CT_SPECIAL_MEMORY)\n@@ -1529,12 +1530,17 @@ simplify_operand_subreg (int nop, machine_mode reg_mode)\n \t     data into a register when the inner is narrower than outer or\n \t     missing important data from memory when the inner is wider than\n \t     outer.  This rule only applies to modes that are no wider than\n-\t     a word.  */\n-\t  if (!(maybe_ne (GET_MODE_PRECISION (mode),\n-\t\t\t  GET_MODE_PRECISION (innermode))\n-\t\t&& known_le (GET_MODE_SIZE (mode), UNITS_PER_WORD)\n-\t\t&& known_le (GET_MODE_SIZE (innermode), UNITS_PER_WORD)\n-\t\t&& WORD_REGISTER_OPERATIONS)\n+\t     a word.\n+\n+\t     If valid memory becomes invalid after subreg elimination\n+\t     we still have to reload memory.\n+\t  */\n+\t  if ((! addr_was_valid || addr_is_valid)\n+\t      && !(maybe_ne (GET_MODE_PRECISION (mode),\n+\t\t\t     GET_MODE_PRECISION (innermode))\n+\t\t   && known_le (GET_MODE_SIZE (mode), UNITS_PER_WORD)\n+\t\t   && known_le (GET_MODE_SIZE (innermode), UNITS_PER_WORD)\n+\t\t   && WORD_REGISTER_OPERATIONS)\n \t      && (!(MEM_ALIGN (subst) < GET_MODE_ALIGNMENT (mode)\n \t\t    && targetm.slow_unaligned_access (mode, MEM_ALIGN (subst)))\n \t\t  || (MEM_ALIGN (reg) < GET_MODE_ALIGNMENT (innermode)\n@@ -1553,7 +1559,7 @@ simplify_operand_subreg (int nop, machine_mode reg_mode)\n \t  enum reg_class rclass\n \t    = (enum reg_class) targetm.preferred_reload_class (reg, ALL_REGS);\n \t  if (get_reload_reg (curr_static_id->operand[nop].type, innermode,\n-\t\t\t      reg, rclass, TRUE, \"slow mem\", &new_reg))\n+\t\t\t      reg, rclass, TRUE, \"slow/invalid mem\", &new_reg))\n \t    {\n \t      bool insert_before, insert_after;\n \t      bitmap_set_bit (&lra_subreg_reload_pseudos, REGNO (new_reg));\n@@ -1572,7 +1578,7 @@ simplify_operand_subreg (int nop, machine_mode reg_mode)\n \t  rclass\n \t    = (enum reg_class) targetm.preferred_reload_class (reg, ALL_REGS);\n \t  if (get_reload_reg (curr_static_id->operand[nop].type, mode, reg,\n-\t\t\t      rclass, TRUE, \"slow mem\", &new_reg))\n+\t\t\t      rclass, TRUE, \"slow/invalid mem\", &new_reg))\n \t    {\n \t      bool insert_before, insert_after;\n \t      bitmap_set_bit (&lra_subreg_reload_pseudos, REGNO (new_reg));\n@@ -1585,7 +1591,7 @@ simplify_operand_subreg (int nop, machine_mode reg_mode)\n \t    }\n \t  *curr_id->operand_loc[nop] = new_reg;\n \t  lra_process_new_insns (curr_insn, before, after,\n-\t\t\t\t \"Inserting slow mem reload\");\n+\t\t\t\t \"Inserting slow/invalid mem reload\");\n \t  return true;\n \t}\n "}, {"sha": "d14df186b0d38f97a53b3d03c26e6e9076b3a1fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eaff6ef97836100801f7b40dc03f77fbebe03ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eaff6ef97836100801f7b40dc03f77fbebe03ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8eaff6ef97836100801f7b40dc03f77fbebe03ac", "patch": "@@ -1,3 +1,8 @@\n+2019-01-30  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/87246\n+\t* gcc.target/i386/pr87246.c: New.\n+\n 2019-01-30  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/89119 - ICE with value-initialization in template.\n@@ -15,7 +20,7 @@\n \t* gcc.target/powerpc/vec-extract-uint128-1.c: New test.\n \t* gcc.target/powerpc/vec-extract-ulong-1.c: New test.\n \t* gcc.target/powerpc/vec-extract-ushort-1.c: New test.\n-\t\n+\n 2019-01-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/89111"}, {"sha": "82322e42782574064af39cc4853e494497c9b06b", "filename": "gcc/testsuite/gcc.target/i386/pr87246.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eaff6ef97836100801f7b40dc03f77fbebe03ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87246.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eaff6ef97836100801f7b40dc03f77fbebe03ac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87246.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr87246.c?ref=8eaff6ef97836100801f7b40dc03f77fbebe03ac", "patch": "@@ -0,0 +1,22 @@\n+/* PR rtl-optimization/87246 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -w -fnon-call-exceptions -fno-split-wide-types\" } */\n+\n+__int128 zd;\n+int c1;\n+\n+void\n+s2 (__int128 *qv)\n+{\n+  if (*qv != 0)\n+    {\n+      zd = 0;\n+      c1 = c1 <= *qv;\n+    }\n+}\n+\n+void\n+lt (unsigned int vb)\n+{\n+  s2 (vb + 1);\n+}"}]}