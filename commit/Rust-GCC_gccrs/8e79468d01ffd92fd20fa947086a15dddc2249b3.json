{"sha": "8e79468d01ffd92fd20fa947086a15dddc2249b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU3OTQ2OGQwMWZmZDkyZmQyMGZhOTQ3MDg2YTE1ZGRkYzIyNDliMw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-04-02T23:45:56Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-04-02T23:45:56Z"}, "message": "[multiple changes]\n\n2009-04-02  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/20_util/shared_ptr/thread/default_weaktoshared.cc:\n\tChange to mersenne_twister_engine, add same defaults as\n\tmersenne_twister_engine/cons/default.cc.\n\t* testsuite/20_util/shared_ptr/thread/mutex_weaktoshared.cc: Same.\n\n\t* include/bits/random.tcc (seed_seq::seed_seq): Uglify parameter\n\tto __il.\n\t* include/bits/random.h (mersenne_twister_engine): Qualify\n\t_ShiftMin1 with namespace __detail.\n\t(__detail::_ShiftMin1): Use __gnu_cxx::__numeric_traits::max until\n\tconstexpr std::numeric_limits::max() can be used.\n\t(mersenne_twister_engine): Split apart static asserts into one\n\tassert per message. Temporarily disable the last three.\n\n2009-04-02  Edward Smith-Rowland  <3dw4rd@verizon.net>\n\n\t* include/Makefile.am: Update to N2836. Modified for new random headers.\n\t* include/Makefile.in: Ditto.\n\t* include/tr1_impl/random: Moved to tr1/random.h\n\t* include/tr1_impl/random.tcc: Moved to tr1\n\t* include/tr1/random: Just point to moved tr1 random headers.\n\t* include/tr1/random.tcc: Moved from tr1_impl.\n\t* include/tr1/random.h: Moved from tr1_impl/random.\n\t* include/std/random: Modified to point to std random headers.\n\t* include/bits/random.tcc: New implementation of std random facilities.\n\t* include/bits/random.h: Ditto.\n\t* testsuite/26_numerics/headers/random/std_c++0x_neg.cc: Changed.\n\t* testsuite/26_numerics/random/linear_congruential_engine/cons/\n\tseed1.cc: New.\n\t* testsuite/26_numerics/random/linear_congruential_engine/cons/\n\tseed2.cc: New.\n\t* testsuite/26_numerics/random/linear_congruential_engine/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/linear_congruential_engine/requirements/\n\tnon_uint_neg.cc: New.\n\t* testsuite/26_numerics/random/linear_congruential_engine/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/linear_congruential_engine/operators/\n\tequal.cc: New.\n\t* testsuite/26_numerics/random/linear_congruential_engine/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/mersenne_twister_engine/cons/\n\tseed1.cc: New.\n\t* testsuite/26_numerics/random/mersenne_twister_engine/cons/\n\tseed2.cc: New.\n\t* testsuite/26_numerics/random/mersenne_twister_engine/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/mersenne_twister_engine/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/mersenne_twister_engine/operators/\n\tequal.cc: New.\n\t* testsuite/26_numerics/random/mersenne_twister_engine/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/subtract_with_carry_engine/cons/\n\tseed1.cc: New.\n\t* testsuite/26_numerics/random/subtract_with_carry_engine/cons/\n\tseed2.cc: New.\n\t* testsuite/26_numerics/random/subtract_with_carry_engine/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/subtract_with_carry_engine/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/subtract_with_carry_engine/operators/\n\tequal.cc: New.\n\t* testsuite/26_numerics/random/subtract_with_carry_engine/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/discard_block_engine/cons/\n\tbase_move.cc: New.\n\t* testsuite/26_numerics/random/discard_block_engine/cons/\n\tseed1.cc: New.\n\t* testsuite/26_numerics/random/discard_block_engine/cons/\n\tseed2.cc: New.\n\t* testsuite/26_numerics/random/discard_block_engine/cons/\n\tbase_copy.cc: New.\n\t* testsuite/26_numerics/random/discard_block_engine/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/discard_block_engine/cons/\n\tseed_seq.cc: New.\n\t* testsuite/26_numerics/random/discard_block_engine/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/discard_block_engine/operators/\n\tequal.cc: New.\n\t* testsuite/26_numerics/random/discard_block_engine/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/independent_bits_engine/cons/\n\tbase_move.cc: New.\n\t* testsuite/26_numerics/random/independent_bits_engine/cons/\n\tseed1.cc: New.\n\t* testsuite/26_numerics/random/independent_bits_engine/cons/\n\tseed2.cc: New.\n\t* testsuite/26_numerics/random/independent_bits_engine/cons/\n\tbase_copy.cc: New.\n\t* testsuite/26_numerics/random/independent_bits_engine/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/independent_bits_engine/cons/\n\tseed_seq.cc: New.\n\t* testsuite/26_numerics/random/independent_bits_engine/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/independent_bits_engine/operators/\n\tequal.cc: New.\n\t* testsuite/26_numerics/random/independent_bits_engine/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/shuffle_order_engine/cons/\n\tbase_move.cc: New.\n\t* testsuite/26_numerics/random/shuffle_order_engine/cons/\n\tseed1.cc: New.\n\t* testsuite/26_numerics/random/shuffle_order_engine/cons/\n\tseed2.cc: New.\n\t* testsuite/26_numerics/random/shuffle_order_engine/cons/\n\tbase_copy.cc: New.\n\t* testsuite/26_numerics/random/shuffle_order_engine/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/shuffle_order_engine/cons/\n\tseed_seq.cc: New.\n\t* testsuite/26_numerics/random/shuffle_order_engine/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/shuffle_order_engine/operators/\n\tequal.cc: New.\n\t* testsuite/26_numerics/random/shuffle_order_engine/operators/\n\tserialize.cc\n\t* testsuite/26_numerics/random/mt19937.cc: New.\n\t* testsuite/26_numerics/random/mt19937_64.cc: New.\n\t* testsuite/26_numerics/random/minstd_rand.cc: New.\n\t* testsuite/26_numerics/random/minstd_rand0.cc: New.\n\t* testsuite/26_numerics/random/ranlux24_base.cc: New.\n\t* testsuite/26_numerics/random/ranlux48_base.cc: New.\n\t* testsuite/26_numerics/random/ranlux24.cc: New.\n\t* testsuite/26_numerics/random/ranlux48.cc: New.\n\t* testsuite/26_numerics/random/knuth_b.cc: New.\n\t* testsuite/26_numerics/random/default_random_engine.cc: New.\n\t* testsuite/26_numerics/random/chi_squared_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/chi_squared_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/chi_squared_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/chi_squared_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/normal_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/normal_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/normal_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/normal_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/seed_seq/cons/range.cc: New.\n\t* testsuite/26_numerics/random/seed_seq/cons/default.cc: New.\n\t* testsuite/26_numerics/random/seed_seq/requirements/typedefs.cc: New.\n\t* testsuite/26_numerics/random/uniform_int_distribution/cons/\n\tparms_neg.cc: New.\n\t* testsuite/26_numerics/random/uniform_int_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/uniform_int_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/uniform_int_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/uniform_int_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/uniform_real_distribution/cons/\n\tparms_neg.cc: New.\n\t* testsuite/26_numerics/random/uniform_real_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/uniform_real_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/uniform_real_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/uniform_real_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/poisson_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/poisson_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/poisson_distribution/requirements/\n\ttypedefs.cc\n\t* testsuite/26_numerics/random/poisson_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/bernoulli_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/bernoulli_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/bernoulli_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/bernoulli_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/discrete_distribution/cons/\n\trange.cc: New.\n\t* testsuite/26_numerics/random/discrete_distribution/cons/\n\tinitlist.cc: New.\n\t* testsuite/26_numerics/random/discrete_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/discrete_distribution/cons/\n\tnum_xbound_fun.cc: New.\n\t* testsuite/26_numerics/random/discrete_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/discrete_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/weibull_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/weibull_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/weibull_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/weibull_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/negative_binomial_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/negative_binomial_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/negative_binomial_distribution/\n\trequirements/typedefs.cc: New.\n\t* testsuite/26_numerics/random/negative_binomial_distribution/\n\toperators/serialize.cc: New.\n\t* testsuite/26_numerics/random/cauchy_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/cauchy_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/cauchy_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/cauchy_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/gamma_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/gamma_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/gamma_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/gamma_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/fisher_f_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/fisher_f_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/fisher_f_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/fisher_f_distribution/operators/\n\tserialize.cc: New.\n\n\t* testsuite/26_numerics/random/exponential_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/exponential_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/exponential_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/exponential_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/lognormal_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/lognormal_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/lognormal_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/lognormal_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/binomial_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/binomial_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/binomial_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/binomial_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/random_device/cons/\n\ttoken.cc: New.\n\t* testsuite/26_numerics/random/random_device/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/random_device/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/extreme_value_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/extreme_value_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/extreme_value_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/extreme_value_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/\n\trange.cc: New.\n\t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/\n\tnum_xbound_fun.cc: New.\n\t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/\n\tinitlist_fun.cc: New.\n\t* testsuite/26_numerics/random/piecewise_linear_distribution/\n\trequirements/typedefs.cc: New.\n\t* testsuite/26_numerics/random/piecewise_linear_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/student_t_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/student_t_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/student_t_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/student_t_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/geometric_distribution/cons/\n\tparms.cc: New.\n\t* testsuite/26_numerics/random/geometric_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/geometric_distribution/requirements/\n\ttypedefs.cc: New.\n\t* testsuite/26_numerics/random/geometric_distribution/operators/\n\tserialize.cc: New.\n\t* testsuite/26_numerics/random/piecewise_constant_distribution/cons/\n\trange.cc: New.\n\t* testsuite/26_numerics/random/piecewise_constant_distribution/cons/\n\tdefault.cc: New.\n\t* testsuite/26_numerics/random/piecewise_constant_distribution/cons/\n\tnum_xbound_fun.cc: New.\n\t* testsuite/26_numerics/random/piecewise_constant_distribution/cons/\n\tinitlist_fun.cc: New.\n\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n\trequirements/typedefs.cc: New.\n\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n\toperators/serialize.cc: New.\n\nFrom-SVN: r145483", "tree": {"sha": "f4ed79c52311d112b705d66b823f394ed5470229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4ed79c52311d112b705d66b823f394ed5470229"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e79468d01ffd92fd20fa947086a15dddc2249b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e79468d01ffd92fd20fa947086a15dddc2249b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e79468d01ffd92fd20fa947086a15dddc2249b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e79468d01ffd92fd20fa947086a15dddc2249b3/comments", "author": null, "committer": null, "parents": [{"sha": "e97d7fa9f9a02a491dcdaf9706247e5e6b2b7b9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97d7fa9f9a02a491dcdaf9706247e5e6b2b7b9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97d7fa9f9a02a491dcdaf9706247e5e6b2b7b9a"}], "stats": {"total": 23047, "additions": 19014, "deletions": 4033}, "files": [{"sha": "23954fbe88316000818d8715ea500a308c703ca3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 319, "deletions": 1, "changes": 320, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -1,6 +1,324 @@\n+2009-04-02  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/20_util/shared_ptr/thread/default_weaktoshared.cc:\n+\tChange to mersenne_twister_engine, add same defaults as\n+\tmersenne_twister_engine/cons/default.cc.\n+\t* testsuite/20_util/shared_ptr/thread/mutex_weaktoshared.cc: Same.\n+\n+\t* include/bits/random.tcc (seed_seq::seed_seq): Uglify parameter\n+\tto __il.\n+\t* include/bits/random.h (mersenne_twister_engine): Qualify\n+\t_ShiftMin1 with namespace __detail.\n+\t(__detail::_ShiftMin1): Use __gnu_cxx::__numeric_traits::max until\n+\tconstexpr std::numeric_limits::max() can be used.\n+\t(mersenne_twister_engine): Split apart static asserts into one\n+\tassert per message. Temporarily disable the last three.\n+\n+2009-04-02  Edward Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\t* include/Makefile.am: Update to N2836. Modified for new random headers.\n+\t* include/Makefile.in: Ditto.\n+\t* include/tr1_impl/random: Moved to tr1/random.h\n+\t* include/tr1_impl/random.tcc: Moved to tr1\n+\t* include/tr1/random: Just point to moved tr1 random headers.\n+\t* include/tr1/random.tcc: Moved from tr1_impl.\n+\t* include/tr1/random.h: Moved from tr1_impl/random.\n+\t* include/std/random: Modified to point to std random headers.\n+\t* include/bits/random.tcc: New implementation of std random facilities.\n+\t* include/bits/random.h: Ditto.\n+\t* testsuite/26_numerics/headers/random/std_c++0x_neg.cc: Changed.\n+\t* testsuite/26_numerics/random/linear_congruential_engine/cons/\n+\tseed1.cc: New.\n+\t* testsuite/26_numerics/random/linear_congruential_engine/cons/\n+\tseed2.cc: New.\n+\t* testsuite/26_numerics/random/linear_congruential_engine/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/linear_congruential_engine/requirements/\n+\tnon_uint_neg.cc: New.\n+\t* testsuite/26_numerics/random/linear_congruential_engine/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/linear_congruential_engine/operators/\n+\tequal.cc: New.\n+\t* testsuite/26_numerics/random/linear_congruential_engine/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/mersenne_twister_engine/cons/\n+\tseed1.cc: New.\n+\t* testsuite/26_numerics/random/mersenne_twister_engine/cons/\n+\tseed2.cc: New.\n+\t* testsuite/26_numerics/random/mersenne_twister_engine/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/mersenne_twister_engine/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/mersenne_twister_engine/operators/\n+\tequal.cc: New.\n+\t* testsuite/26_numerics/random/mersenne_twister_engine/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/subtract_with_carry_engine/cons/\n+\tseed1.cc: New.\n+\t* testsuite/26_numerics/random/subtract_with_carry_engine/cons/\n+\tseed2.cc: New.\n+\t* testsuite/26_numerics/random/subtract_with_carry_engine/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/subtract_with_carry_engine/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/subtract_with_carry_engine/operators/\n+\tequal.cc: New.\n+\t* testsuite/26_numerics/random/subtract_with_carry_engine/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/discard_block_engine/cons/\n+\tbase_move.cc: New.\n+\t* testsuite/26_numerics/random/discard_block_engine/cons/\n+\tseed1.cc: New.\n+\t* testsuite/26_numerics/random/discard_block_engine/cons/\n+\tseed2.cc: New.\n+\t* testsuite/26_numerics/random/discard_block_engine/cons/\n+\tbase_copy.cc: New.\n+\t* testsuite/26_numerics/random/discard_block_engine/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/discard_block_engine/cons/\n+\tseed_seq.cc: New.\n+\t* testsuite/26_numerics/random/discard_block_engine/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/discard_block_engine/operators/\n+\tequal.cc: New.\n+\t* testsuite/26_numerics/random/discard_block_engine/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/independent_bits_engine/cons/\n+\tbase_move.cc: New.\n+\t* testsuite/26_numerics/random/independent_bits_engine/cons/\n+\tseed1.cc: New.\n+\t* testsuite/26_numerics/random/independent_bits_engine/cons/\n+\tseed2.cc: New.\n+\t* testsuite/26_numerics/random/independent_bits_engine/cons/\n+\tbase_copy.cc: New.\n+\t* testsuite/26_numerics/random/independent_bits_engine/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/independent_bits_engine/cons/\n+\tseed_seq.cc: New.\n+\t* testsuite/26_numerics/random/independent_bits_engine/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/independent_bits_engine/operators/\n+\tequal.cc: New.\n+\t* testsuite/26_numerics/random/independent_bits_engine/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/shuffle_order_engine/cons/\n+\tbase_move.cc: New.\n+\t* testsuite/26_numerics/random/shuffle_order_engine/cons/\n+\tseed1.cc: New.\n+\t* testsuite/26_numerics/random/shuffle_order_engine/cons/\n+\tseed2.cc: New.\n+\t* testsuite/26_numerics/random/shuffle_order_engine/cons/\n+\tbase_copy.cc: New.\n+\t* testsuite/26_numerics/random/shuffle_order_engine/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/shuffle_order_engine/cons/\n+\tseed_seq.cc: New.\n+\t* testsuite/26_numerics/random/shuffle_order_engine/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/shuffle_order_engine/operators/\n+\tequal.cc: New.\n+\t* testsuite/26_numerics/random/shuffle_order_engine/operators/\n+\tserialize.cc\n+\t* testsuite/26_numerics/random/mt19937.cc: New.\n+\t* testsuite/26_numerics/random/mt19937_64.cc: New.\n+\t* testsuite/26_numerics/random/minstd_rand.cc: New.\n+\t* testsuite/26_numerics/random/minstd_rand0.cc: New.\n+\t* testsuite/26_numerics/random/ranlux24_base.cc: New.\n+\t* testsuite/26_numerics/random/ranlux48_base.cc: New.\n+\t* testsuite/26_numerics/random/ranlux24.cc: New.\n+\t* testsuite/26_numerics/random/ranlux48.cc: New.\n+\t* testsuite/26_numerics/random/knuth_b.cc: New.\n+\t* testsuite/26_numerics/random/default_random_engine.cc: New.\n+\t* testsuite/26_numerics/random/chi_squared_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/chi_squared_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/chi_squared_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/chi_squared_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/normal_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/normal_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/normal_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/normal_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/seed_seq/cons/range.cc: New.\n+\t* testsuite/26_numerics/random/seed_seq/cons/default.cc: New.\n+\t* testsuite/26_numerics/random/seed_seq/requirements/typedefs.cc: New.\n+\t* testsuite/26_numerics/random/uniform_int_distribution/cons/\n+\tparms_neg.cc: New.\n+\t* testsuite/26_numerics/random/uniform_int_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/uniform_int_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/uniform_int_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/uniform_int_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/uniform_real_distribution/cons/\n+\tparms_neg.cc: New.\n+\t* testsuite/26_numerics/random/uniform_real_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/uniform_real_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/uniform_real_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/uniform_real_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/poisson_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/poisson_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/poisson_distribution/requirements/\n+\ttypedefs.cc\n+\t* testsuite/26_numerics/random/poisson_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/bernoulli_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/bernoulli_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/bernoulli_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/bernoulli_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/discrete_distribution/cons/\n+\trange.cc: New.\n+\t* testsuite/26_numerics/random/discrete_distribution/cons/\n+\tinitlist.cc: New.\n+\t* testsuite/26_numerics/random/discrete_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/discrete_distribution/cons/\n+\tnum_xbound_fun.cc: New.\n+\t* testsuite/26_numerics/random/discrete_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/discrete_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/weibull_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/weibull_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/weibull_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/weibull_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/negative_binomial_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/negative_binomial_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/negative_binomial_distribution/\n+\trequirements/typedefs.cc: New.\n+\t* testsuite/26_numerics/random/negative_binomial_distribution/\n+\toperators/serialize.cc: New.\n+\t* testsuite/26_numerics/random/cauchy_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/cauchy_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/cauchy_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/cauchy_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/gamma_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/gamma_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/gamma_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/gamma_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/fisher_f_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/fisher_f_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/fisher_f_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/fisher_f_distribution/operators/\n+\tserialize.cc: New.\n+\n+\t* testsuite/26_numerics/random/exponential_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/exponential_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/exponential_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/exponential_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/lognormal_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/lognormal_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/lognormal_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/lognormal_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/binomial_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/binomial_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/binomial_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/binomial_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/random_device/cons/\n+\ttoken.cc: New.\n+\t* testsuite/26_numerics/random/random_device/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/random_device/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/extreme_value_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/extreme_value_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/extreme_value_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/extreme_value_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/\n+\trange.cc: New.\n+\t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/\n+\tnum_xbound_fun.cc: New.\n+\t* testsuite/26_numerics/random/piecewise_linear_distribution/cons/\n+\tinitlist_fun.cc: New.\n+\t* testsuite/26_numerics/random/piecewise_linear_distribution/\n+\trequirements/typedefs.cc: New.\n+\t* testsuite/26_numerics/random/piecewise_linear_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/student_t_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/student_t_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/student_t_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/student_t_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/geometric_distribution/cons/\n+\tparms.cc: New.\n+\t* testsuite/26_numerics/random/geometric_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/geometric_distribution/requirements/\n+\ttypedefs.cc: New.\n+\t* testsuite/26_numerics/random/geometric_distribution/operators/\n+\tserialize.cc: New.\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/cons/\n+\trange.cc: New.\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/cons/\n+\tdefault.cc: New.\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/cons/\n+\tnum_xbound_fun.cc: New.\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/cons/\n+\tinitlist_fun.cc: New.\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n+\trequirements/typedefs.cc: New.\n+\t* testsuite/26_numerics/random/piecewise_constant_distribution/\n+\toperators/serialize.cc: New.\n+\n 2009-04-02  Dodji Seketeli  <dodji@redhat.com>\n \n-\t* include/ext/bitmap_allocator.h: the typedefs should be made public\n+\t* include/ext/bitmap_allocator.h: The typedefs should be made public\n \tif we want them to be accessible. This has been revealed by the patch\n \tthat fixes PR c++/26693 in g++.\n "}, {"sha": "6b481ce3e07d68ec1635d6335b9854fa5917fe6e", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -116,6 +116,8 @@ bits_headers = \\\n \t${bits_srcdir}/ostream.tcc \\\n \t${bits_srcdir}/ostream_insert.h \\\n \t${bits_srcdir}/postypes.h \\\n+\t${bits_srcdir}/random.h \\\n+\t${bits_srcdir}/random.tcc \\\n \t${bits_srcdir}/stream_iterator.h \\\n \t${bits_srcdir}/streambuf_iterator.h \\\n \t${bits_srcdir}/shared_ptr.h \\\n@@ -570,6 +572,8 @@ tr1_headers = \\\n \t${tr1_srcdir}/poly_laguerre.tcc \\\n \t${tr1_srcdir}/legendre_function.tcc \\\n \t${tr1_srcdir}/random \\\n+\t${tr1_srcdir}/random.h \\\n+\t${tr1_srcdir}/random.tcc \\\n \t${tr1_srcdir}/regex \\\n \t${tr1_srcdir}/riemann_zeta.tcc \\\n \t${tr1_srcdir}/shared_ptr.h \\\n@@ -608,8 +612,6 @@ tr1_impl_headers = \\\n \t${tr1_impl_srcdir}/functional_hash.h \\\n \t${tr1_impl_srcdir}/hashtable \\\n \t${tr1_impl_srcdir}/hashtable_policy.h \\\n-\t${tr1_impl_srcdir}/random \\\n-\t${tr1_impl_srcdir}/random.tcc \\\n \t${tr1_impl_srcdir}/regex \\\n \t${tr1_impl_srcdir}/type_traits \\\n \t${tr1_impl_srcdir}/unordered_map \\"}, {"sha": "c1ad2d3dd577371f17f737024661c4361c83d1ca", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -381,6 +381,8 @@ bits_headers = \\\n \t${bits_srcdir}/ostream.tcc \\\n \t${bits_srcdir}/ostream_insert.h \\\n \t${bits_srcdir}/postypes.h \\\n+\t${bits_srcdir}/random.h \\\n+\t${bits_srcdir}/random.tcc \\\n \t${bits_srcdir}/stream_iterator.h \\\n \t${bits_srcdir}/streambuf_iterator.h \\\n \t${bits_srcdir}/shared_ptr.h \\\n@@ -833,6 +835,8 @@ tr1_headers = \\\n \t${tr1_srcdir}/poly_laguerre.tcc \\\n \t${tr1_srcdir}/legendre_function.tcc \\\n \t${tr1_srcdir}/random \\\n+\t${tr1_srcdir}/random.h \\\n+\t${tr1_srcdir}/random.tcc \\\n \t${tr1_srcdir}/regex \\\n \t${tr1_srcdir}/riemann_zeta.tcc \\\n \t${tr1_srcdir}/shared_ptr.h \\\n@@ -870,8 +874,6 @@ tr1_impl_headers = \\\n \t${tr1_impl_srcdir}/functional_hash.h \\\n \t${tr1_impl_srcdir}/hashtable \\\n \t${tr1_impl_srcdir}/hashtable_policy.h \\\n-\t${tr1_impl_srcdir}/random \\\n-\t${tr1_impl_srcdir}/random.tcc \\\n \t${tr1_impl_srcdir}/regex \\\n \t${tr1_impl_srcdir}/type_traits \\\n \t${tr1_impl_srcdir}/unordered_map \\"}, {"sha": "ad64a90a68170e5c7a5c6cdc2a37ac99dda7a9dd", "filename": "libstdc++-v3/include/bits/random.h", "status": "added", "additions": 4940, "deletions": 0, "changes": 4940, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3"}, {"sha": "0c4f7a4420da28a340759457f8678dae52cbdd1b", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "added", "additions": 2794, "deletions": 0, "changes": 2794, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,2794 @@\n+// random number generation (out of line) -*- C++ -*-\n+\n+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file bits/random.tcc\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#include <iostream>\n+#include <vector>\n+#include <numeric>\n+#include <algorithm>\n+\n+namespace std\n+{\n+\n+  /*\n+   * (Further) implementation-space details.\n+   */\n+  namespace __detail\n+  {\n+    // General case for x = (ax + c) mod m -- use Schrage's algorithm to\n+    // avoid integer overflow.\n+    //\n+    // Because a and c are compile-time integral constants the compiler\n+    // kindly elides any unreachable paths.\n+    //\n+    // Preconditions:  a > 0, m > 0.\n+    //\n+    template<typename _Tp, _Tp __a, _Tp __c, _Tp __m, bool>\n+      struct _Mod\n+      {\n+\tstatic _Tp\n+\t__calc(_Tp __x)\n+\t{\n+\t  if (__a == 1)\n+\t    __x %= __m;\n+\t  else\n+\t    {\n+\t      static const _Tp __q = __m / __a;\n+\t      static const _Tp __r = __m % __a;\n+\n+\t      _Tp __t1 = __a * (__x % __q);\n+\t      _Tp __t2 = __r * (__x / __q);\n+\t      if (__t1 >= __t2)\n+\t\t__x = __t1 - __t2;\n+\t      else\n+\t\t__x = __m - __t2 + __t1;\n+\t    }\n+\n+\t  if (__c != 0)\n+\t    {\n+\t      const _Tp __d = __m - __x;\n+\t      if (__d > __c)\n+\t\t__x += __c;\n+\t      else\n+\t\t__x = __c - __d;\n+\t    }\n+\t  return __x;\n+\t}\n+      };\n+\n+    // Special case for m == 0 -- use unsigned integer overflow as modulo\n+    // operator.\n+    template<typename _Tp, _Tp __a, _Tp __c, _Tp __m>\n+      struct _Mod<_Tp, __a, __c, __m, true>\n+      {\n+\tstatic _Tp\n+\t__calc(_Tp __x)\n+\t{ return __a * __x + __c; }\n+      };\n+  } // namespace __detail\n+\n+  /**\n+   * Seeds the LCR with integral value @p __x0, adjusted so that the\n+   * ring identity is never a member of the convergence set.\n+   */\n+  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    void\n+    linear_congruential_engine<_UIntType, __a, __c, __m>::\n+    seed(_UIntType __x0)\n+    {\n+      if ((__detail::__mod<_UIntType, 1U, 0U, __m>(__c) == 0U)\n+       && (__detail::__mod<_UIntType, 1U, 0U, __m>(__x0) == 0U))\n+\t_M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(1U);\n+      else\n+\t_M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(__x0);\n+    }\n+\n+  /**\n+   * Seeds the LCR engine with a value generated by @p __g.\n+   */\n+  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    void\n+    linear_congruential_engine<_UIntType, __a, __c, __m>::\n+    seed(seed_seq& __q)\n+    {\n+      const _UIntType __k = (std::log2(__m) + 31) / 32;\n+      _UIntType __arr[__k + 3];\n+      __q.generate(__arr + 0, __arr + 3);\n+      _UIntType __factor = 1U;\n+      _UIntType __sum = 0U;\n+      for (size_t __i = 0; __i < __k; ++__i)\n+        {\n+          __sum += __arr[__i + 3] * __factor;\n+          __factor *= __detail::_Shift<_UIntType, 32>::__value;\n+        }\n+\n+      if ((__detail::__mod<_UIntType, 1U, 0U, __m>(__c) == 0U)\n+       && (__detail::__mod<_UIntType, 1U, 0U, __m>(__sum) == 0U))\n+        _M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(1U);\n+      else\n+        _M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(__sum);\n+    }\n+\n+  /**\n+   * Seeds the LCR engine with a value generated by @p __g.\n+   */\n+  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    template<typename _Gen>\n+      void\n+      linear_congruential_engine<_UIntType, __a, __c, __m>::\n+      seed(_Gen& __g, false_type)\n+      {\n+\t_UIntType __x0 = __g();\n+\tif ((__detail::__mod<_UIntType, 1U, 0U, __m>(__c) == 0U)\n+\t && (__detail::__mod<_UIntType, 1U, 0U, __m>(__x0) == 0U))\n+\t  _M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(1U);\n+\telse\n+\t  _M_x = __detail::__mod<_UIntType, 1U, 0U, __m>(__x0);\n+      }\n+\n+  /**\n+   * Gets the next generated value in sequence.\n+   */\n+  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    typename linear_congruential_engine<_UIntType, __a, __c, __m>::\n+\t     result_type\n+    linear_congruential_engine<_UIntType, __a, __c, __m>::\n+    operator()()\n+    {\n+      _M_x = __detail::__mod<_UIntType, __a, __c, __m>(_M_x);\n+      return _M_x;\n+    }\n+\n+  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const linear_congruential_engine<_UIntType,\n+\t\t\t\t\t\t__a, __c, __m>& __lcr)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      __os.flags(__ios_base::dec\n+\t       | __ios_base::fixed\n+\t       | __ios_base::left);\n+      __os.fill(__os.widen(' '));\n+\n+      __os << __lcr._M_x;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       linear_congruential_engine<_UIntType, __a, __c, __m>& __lcr)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec);\n+\n+      __is >> __lcr._M_x;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    void\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::\n+    seed(result_type __sd)\n+    {\n+      _M_x[0] = __detail::__mod<_UIntType, 1, 0,\n+\t__detail::_Shift<_UIntType, __w>::__value>(__sd);\n+\n+      for (size_t __i = 1; __i < state_size; ++__i)\n+\t{\n+\t  _UIntType __x = _M_x[__i - 1];\n+\t  __x ^= __x >> (__w - 2);\n+\t  __x *= __f;\n+\t  __x += __i;\n+\t  _M_x[__i] = __detail::__mod<_UIntType, 1, 0,\n+\t    __detail::_Shift<_UIntType, __w>::__value>(__x);\n+\t}\n+      _M_p = state_size;\n+    }\n+\n+  template<typename _UIntType,\n+\t   size_t __w, size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    void\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t      __s, __b, __t, __c, __l, __f>::\n+    seed(seed_seq& __q)\n+    {\n+      const _UIntType __upper_mask = (~_UIntType()) << __r;\n+      const size_t __k = (__w + 31) / 32;\n+      _UIntType __arr[__k * __n];\n+      __q.generate(__arr + 0, __arr + __k * __n);\n+\n+      bool __zero = true;\n+      for (size_t __i = 0; __i < state_size; ++__i)\n+        {\n+          _UIntType __factor = 1U;\n+          _UIntType __sum = 0U;\n+          for (size_t __j = 0; __j < __k; ++__j)\n+            {\n+\t      __sum += __arr[__i * __k + __j] * __factor;\n+\t      __factor *= __detail::_Shift<_UIntType, 32>::__value;\n+            }\n+          _M_x[__i] = __detail::__mod<_UIntType, 1U, 0U,\n+\t\t      __detail::_Shift<_UIntType, __w>::__value>(__sum);\n+\n+          if (__zero)\n+            {\n+\t      if (__i == 0)\n+\t        {\n+\t          if ((_M_x[0] & __upper_mask) != 0U)\n+\t            __zero = false;\n+\t        }\n+\t      else if (_M_x[__i] != 0U)\n+\t        __zero = false;\n+            }\n+        }\n+        if (__zero)\n+          _M_x[0] = __detail::_Shift<_UIntType, __w - 1U>::__value;\n+    }\n+\n+  template<typename _UIntType, size_t __w,\n+\t   size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f>\n+    typename\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::result_type\n+    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n+\t\t\t    __s, __b, __t, __c, __l, __f>::\n+    operator()()\n+    {\n+      // Reload the vector - cost is O(n) amortized over n calls.\n+      if (_M_p >= state_size)\n+\t{\n+\t  const _UIntType __upper_mask = (~_UIntType()) << __r;\n+\t  const _UIntType __lower_mask = ~__upper_mask;\n+\n+\t  for (size_t __k = 0; __k < (__n - __m); ++__k)\n+\t    {\n+\t      _UIntType __y = ((_M_x[__k] & __upper_mask)\n+\t\t\t       | (_M_x[__k + 1] & __lower_mask));\n+\t      _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)\n+\t\t\t   ^ ((__y & 0x01) ? __a : 0));\n+\t    }\n+\n+\t  for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)\n+\t    {\n+\t      _UIntType __y = ((_M_x[__k] & __upper_mask)\n+\t\t\t       | (_M_x[__k + 1] & __lower_mask));\n+\t      _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)\n+\t\t\t   ^ ((__y & 0x01) ? __a : 0));\n+\t    }\n+\n+\t  _UIntType __y = ((_M_x[__n - 1] & __upper_mask)\n+\t\t\t   | (_M_x[0] & __lower_mask));\n+\t  _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)\n+\t\t\t   ^ ((__y & 0x01) ? __a : 0));\n+\t  _M_p = 0;\n+\t}\n+\n+      // Calculate o(x(i)).\n+      result_type __z = _M_x[_M_p++];\n+      __z ^= (__z >> __u) & __d;\n+      __z ^= (__z << __s) & __b;\n+      __z ^= (__z << __t) & __c;\n+      __z ^= (__z >> __l);\n+\n+      return __z;\n+    }\n+\n+  template<typename _UIntType, size_t __w,\n+\t   size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const mersenne_twister_engine<_UIntType, __w, __n, __m,\n+\t       __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::dec\n+\t       | __ios_base::fixed\n+\t       | __ios_base::left);\n+      __os.fill(__space);\n+\n+      for (size_t __i = 0; __i < __n - 1; ++__i)\n+\t__os << __x._M_x[__i] << __space;\n+      __os << __x._M_x[__n - 1];\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<typename _UIntType, size_t __w,\n+\t   size_t __n, size_t __m, size_t __r,\n+\t   _UIntType __a, size_t __u, _UIntType __d, size_t __s,\n+\t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n+\t   _UIntType __f, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       mersenne_twister_engine<_UIntType, __w, __n, __m,\n+\t       __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      for (size_t __i = 0; __i < __n; ++__i)\n+\t__is >> __x._M_x[__i];\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n+    void\n+    subtract_with_carry_engine<_UIntType, __w, __s, __r>::\n+    seed(result_type __value)\n+    {\n+      if (__value == 0)\n+\t__value = default_seed;\n+\n+      std::linear_congruential_engine<result_type, 40014U, 0U, 2147483563U>\n+\t__lcg(__value);\n+\n+      //  I hope this is right.  The \"10000\" tests work for the ranluxen.\n+      const size_t __n = (word_size + 31) / 32;\n+\n+      for (size_t __i = 0; __i < long_lag; ++__i)\n+\t{\n+\t  _UIntType __sum = 0U;\n+\t  _UIntType __factor = 1U;\n+\t  for (size_t __j = 0; __j < __n; ++__j)\n+\t    {\n+\t      __sum += __detail::__mod<__detail::_UInt32Type, 1, 0, 0>\n+\t\t\t (__lcg()) * __factor;\n+\t      __factor *= __detail::_Shift<_UIntType, 32>::__value;\n+\t    }\n+\t  _M_x[__i] = __detail::__mod<_UIntType, 1, 0, _S_modulus>(__sum);\n+\t}\n+      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n+      _M_p = 0;\n+    }\n+\n+  template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n+    void\n+    subtract_with_carry_engine<_UIntType, __w, __s, __r>::\n+    seed(seed_seq& __q)\n+    {\n+      const size_t __n = (word_size + 31) / 32;\n+      unsigned int __arr[long_lag + __n];\n+      __q.generate(__arr + 0, __arr + long_lag + __n);\n+\n+      for (size_t __i = 0; __i < long_lag; ++__i)\n+        {\n+          _UIntType __sum = 0U;\n+          _UIntType __factor = 1U;\n+          for (size_t __j = 0; __j < __n; ++__j)\n+            {\n+\t      __sum += __detail::__mod<__detail::_UInt32Type, 1, 0, 0>\n+\t\t         (__arr[__i * __n + __j]) * __factor;\n+\t      __factor *= __detail::_Shift<_UIntType, 32>::__value;\n+            }\n+          _M_x[__i] = __detail::__mod<_UIntType, 1, 0, _S_modulus>(__sum);\n+        }\n+      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n+      _M_p = 0;\n+    }\n+\n+  template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n+    typename subtract_with_carry_engine<_UIntType, __w, __s, __r>::\n+\t     result_type\n+    subtract_with_carry_engine<_UIntType, __w, __s, __r>::\n+    operator()()\n+    {\n+      // Derive short lag index from current index.\n+      long __ps = _M_p - short_lag;\n+      if (__ps < 0)\n+\t__ps += long_lag;\n+\n+      // Calculate new x(i) without overflow or division.\n+      // NB: Thanks to the requirements for _UIntType, _M_x[_M_p] + _M_carry\n+      // cannot overflow.\n+      _UIntType __xi;\n+      if (_M_x[__ps] >= _M_x[_M_p] + _M_carry)\n+\t{\n+\t  __xi = _M_x[__ps] - _M_x[_M_p] - _M_carry;\n+\t  _M_carry = 0;\n+\t}\n+      else\n+\t{\n+\t  __xi = _S_modulus - _M_x[_M_p] - _M_carry + _M_x[__ps];\n+\t  _M_carry = 1;\n+\t}\n+      _M_x[_M_p] = __xi;\n+\n+      // Adjust current index to loop around in ring buffer.\n+      if (++_M_p >= long_lag)\n+\t_M_p = 0;\n+\n+      return __xi;\n+    }\n+\n+  template<typename _UIntType, size_t __w, size_t __s, size_t __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const subtract_with_carry_engine<_UIntType,\n+\t\t\t\t\t\t__w, __s, __r>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::dec\n+\t       | __ios_base::fixed\n+\t       | __ios_base::left);\n+      __os.fill(__space);\n+\n+      for (size_t __i = 0; __i < __r; ++__i)\n+\t__os << __x._M_x[__i] << __space;\n+      __os << __x._M_carry;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<typename _UIntType, size_t __w, size_t __s, size_t __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       subtract_with_carry_engine<_UIntType, __w, __s, __r>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      for (size_t __i = 0; __i < __r; ++__i)\n+\t__is >> __x._M_x[__i];\n+      __is >> __x._M_carry;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RandomNumberEngine, size_t __p, size_t __r>\n+    typename discard_block_engine<_RandomNumberEngine,\n+\t\t\t   __p, __r>::result_type\n+    discard_block_engine<_RandomNumberEngine, __p, __r>::\n+    operator()()\n+    {\n+      if (_M_n >= used_block)\n+\t{\n+\t  _M_b.discard(block_size - _M_n);\n+\t  _M_n = 0;\n+\t}\n+      ++_M_n;\n+      return _M_b();\n+    }\n+\n+  template<typename _RandomNumberEngine, size_t __p, size_t __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const discard_block_engine<_RandomNumberEngine,\n+\t       __p, __r>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::dec\n+\t       | __ios_base::fixed\n+\t       | __ios_base::left);\n+      __os.fill(__space);\n+\n+      __os << __x.base() << __space << __x._M_n;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<typename _RandomNumberEngine, size_t __p, size_t __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       discard_block_engine<_RandomNumberEngine, __p, __r>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      __is >> __x._M_b >> __x._M_n;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>\n+    typename independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::\n+      result_type\n+    independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::\n+    operator()()\n+    {\n+      const long double __r = static_cast<long double>(this->max())\n+\t\t\t    - static_cast<long double>(this->min()) + 1.0L;\n+      const result_type __m = std::log2l(__r);\n+      result_type __n, __n0, __y0, __y1, __s0, __s1;\n+      for (size_t __i = 0; __i < 2; ++__i)\n+\t{\n+\t  __n = (__w + __m - 1) / __m + __i;\n+\t  __n0 = __n - __w % __n;\n+\t  const result_type __w0 = __w / __n;\n+\t  const result_type __w1 = __w0 + 1;\n+\t  __s0 = 1UL << __w0;\n+\t  __s1 = 1UL << __w1;\n+\t  __y0 = __s0 * (__r / __s0);\n+\t  __y1 = __s1 * (__r / __s1);\n+\t  if (__r - __y0 <= __y0 / __n)\n+\t    break;\n+\t}\n+\n+      result_type __sum = 0;\n+      for (size_t __k = 0; __k < __n0; ++__k)\n+\t{\n+\t  result_type __u;\n+\t  do\n+\t    __u = _M_b() - this->min();\n+\t  while (__u >= __y0);\n+\t  __sum = __s0 * __sum\n+\t\t+ __u % __s0;\n+\t}\n+      for (size_t __k = __n0; __k < __n; ++__k)\n+\t{\n+\t  result_type __u;\n+\t  do\n+\t    __u = _M_b() - this->min();\n+\t  while (__u >= __y1);\n+\t  __sum = __s1 * __sum\n+\t\t+ __u % __s1;\n+\t}\n+      return __sum;\n+    }\n+\n+\n+  template<typename _RandomNumberEngine, size_t __k>\n+    typename shuffle_order_engine<_RandomNumberEngine, __k>::result_type\n+    shuffle_order_engine<_RandomNumberEngine, __k>::\n+    operator()()\n+    {\n+      size_t __j = (__k * (_M_y - _M_b.min()))\n+\t\t / (_M_b.max() - _M_b.min() + 1);\n+      _M_y = _M_v[__j];\n+      _M_v[__j] = _M_b();\n+\n+      return _M_y;\n+    }\n+\n+  template<typename _RandomNumberEngine, size_t __k,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const shuffle_order_engine<_RandomNumberEngine, __k>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::dec\n+\t       | __ios_base::fixed\n+\t       | __ios_base::left);\n+      __os.fill(__space);\n+\n+      __os << __x.base();\n+      for (size_t __i = 0; __i < __k; ++__i)\n+\t__os << __space << __x._M_v[__i];\n+      __os << __space << __x._M_y;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<typename _RandomNumberEngine, size_t __k,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       shuffle_order_engine<_RandomNumberEngine, __k>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      __is >> __x._M_b;\n+      for (size_t __i = 0; __i < __k; ++__i)\n+\t__is >> __x._M_v[__i];\n+      __is >> __x._M_y;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _IntType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename uniform_int_distribution<_IntType>::result_type\n+      uniform_int_distribution<_IntType>::\n+      _M_call(_UniformRandomNumberGenerator& __urng,\n+\t      result_type __min, result_type __max, true_type)\n+      {\n+\t// XXX Must be fixed to work well for *arbitrary* __urng.max(),\n+\t// __urng.min(), __max, __min.  Currently works fine only in the\n+\t// most common case __urng.max() - __urng.min() >= __max - __min,\n+\t// with __urng.max() > __urng.min() >= 0.\n+\ttypedef typename __gnu_cxx::__add_unsigned<typename\n+\t  _UniformRandomNumberGenerator::result_type>::__type __urntype;\n+\ttypedef typename __gnu_cxx::__add_unsigned<result_type>::__type\n+\t\t\t\t\t\t\t      __utype;\n+\ttypedef typename __gnu_cxx::__conditional_type<(sizeof(__urntype)\n+\t\t\t\t\t\t\t> sizeof(__utype)),\n+\t  __urntype, __utype>::__type                         __uctype;\n+\n+\tresult_type __ret;\n+\n+\tconst __urntype __urnmin = __urng.min();\n+\tconst __urntype __urnmax = __urng.max();\n+\tconst __urntype __urnrange = __urnmax - __urnmin;\n+\tconst __uctype __urange = __max - __min;\n+\tconst __uctype __udenom = (__urnrange <= __urange\n+\t\t\t\t   ? 1 : __urnrange / (__urange + 1));\n+\tdo\n+\t  __ret = (__urntype(__urng()) -  __urnmin) / __udenom;\n+\twhile (__ret > __max - __min);\n+\n+\treturn __ret + __min;\n+      }\n+\n+  template<typename _IntType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const uniform_int_distribution<_IntType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+\n+      __os << __x.a() << __space << __x.b();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<typename _IntType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       uniform_int_distribution<_IntType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _IntType __a, __b;\n+      __is >> __a >> __b;\n+      __x.param(typename uniform_int_distribution<_IntType>::\n+\t\tparam_type(__a, __b));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const uniform_real_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n+\n+      __os << __x.a() << __space << __x.b();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       uniform_real_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::skipws);\n+\n+      _RealType __a, __b;\n+      __is >> __a >> __b;\n+      __x.param(typename uniform_real_distribution<_RealType>::\n+\t\tparam_type(__a, __b));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const bernoulli_distribution& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__os.widen(' '));\n+      __os.precision(std::numeric_limits<double>::digits10 + 1);\n+\n+      __os << __x.p();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+\n+  template<typename _IntType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename geometric_distribution<_IntType>::result_type\n+      geometric_distribution<_IntType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __param)\n+      {\n+\t// About the epsilon thing see this thread:\n+\t// http://gcc.gnu.org/ml/gcc-patches/2006-10/msg00971.html\n+\tconst double __naf =\n+\t  (1 - std::numeric_limits<double>::epsilon()) / 2;\n+\t// The largest _RealType convertible to _IntType.\n+\tconst double __thr =\n+\t  std::numeric_limits<_IntType>::max() + __naf;\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\tdouble __cand;\n+\tdo\n+\t  __cand = std::ceil(std::log(__aurng()) / __param._M_log_p);\n+\twhile (__cand >= __thr);\n+\n+\treturn result_type(__cand + __naf);\n+      }\n+\n+  template<typename _IntType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const geometric_distribution<_IntType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__os.widen(' '));\n+      __os.precision(std::numeric_limits<double>::digits10 + 1);\n+\n+      __os << __x.p();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _IntType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       geometric_distribution<_IntType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::skipws);\n+\n+      double __p;\n+      __is >> __p;\n+      __x.param(typename geometric_distribution<_IntType>::param_type(__p));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+  template<typename _IntType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename negative_binomial_distribution<_IntType>::result_type\n+      negative_binomial_distribution<_IntType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __p)\n+      {\n+\ttypename gamma_distribution<>::param_type\n+\t  __gamma_param(__p.k(), 1.0);\n+\tgamma_distribution<> __gamma(__gamma_param);\n+\tdouble __x = __gamma(__urng);\n+\n+\ttypename poisson_distribution<result_type>::param_type\n+\t  __poisson_param(__x * __p.p() / (1.0 - __p.p()));\n+\tpoisson_distribution<result_type> __poisson(__poisson_param);\n+\tresult_type __m = __poisson(__urng);\n+\n+\treturn __m;\n+      }\n+\n+  template<typename _IntType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const negative_binomial_distribution<_IntType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__os.widen(' '));\n+      __os.precision(std::numeric_limits<double>::digits10 + 1);\n+\n+      __os << __x.k() << __space << __x.p();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _IntType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       negative_binomial_distribution<_IntType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::skipws);\n+\n+      _IntType __k;\n+      double __p;\n+      __is >> __k >> __p;\n+      __x.param(typename negative_binomial_distribution<_IntType>::\n+\t\tparam_type(__k, __p));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _IntType>\n+    void\n+    poisson_distribution<_IntType>::param_type::\n+    _M_initialize()\n+    {\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+      if (_M_mean >= 12)\n+\t{\n+\t  const double __m = std::floor(_M_mean);\n+\t  _M_lm_thr = std::log(_M_mean);\n+\t  _M_lfm = std::lgamma(__m + 1);\n+\t  _M_sm = std::sqrt(__m);\n+\n+\t  const double __pi_4 = 0.7853981633974483096156608458198757L;\n+\t  const double __dx = std::sqrt(2 * __m * std::log(32 * __m\n+\t\t\t\t\t\t\t      / __pi_4));\n+\t  _M_d = std::round(std::max(6.0, std::min(__m, __dx)));\n+\t  const double __cx = 2 * __m + _M_d;\n+\t  _M_scx = std::sqrt(__cx / 2);\n+\t  _M_1cx = 1 / __cx;\n+\n+\t  _M_c2b = std::sqrt(__pi_4 * __cx) * std::exp(_M_1cx);\n+\t  _M_cb = 2 * __cx * std::exp(-_M_d * _M_1cx * (1 + _M_d / 2))\n+\t\t/ _M_d;\n+\t}\n+      else\n+#endif\n+\t_M_lm_thr = std::exp(-_M_mean);\n+      }\n+\n+  /**\n+   * A rejection algorithm when mean >= 12 and a simple method based\n+   * upon the multiplication of uniform random variates otherwise.\n+   * NB: The former is available only if _GLIBCXX_USE_C99_MATH_TR1\n+   * is defined.\n+   *\n+   * Reference:\n+   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * New York, 1986, Ch. X, Sects. 3.3 & 3.4 (+ Errata!).\n+   */\n+  template<typename _IntType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename poisson_distribution<_IntType>::result_type\n+      poisson_distribution<_IntType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __param)\n+      {\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, double>\n+\t  __aurng(__urng);\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\tif (__param.mean() >= 12)\n+\t  {\n+\t    double __x;\n+\n+\t    // See comments above...\n+\t    const double __naf =\n+\t      (1 - std::numeric_limits<double>::epsilon()) / 2;\n+\t    const double __thr =\n+\t      std::numeric_limits<_IntType>::max() + __naf;\n+\n+\t    const double __m = std::floor(__param.mean());\n+\t    // sqrt(pi / 2)\n+\t    const double __spi_2 = 1.2533141373155002512078826424055226L;\n+\t    const double __c1 = __param._M_sm * __spi_2;\n+\t    const double __c2 = __param._M_c2b + __c1;\n+\t    const double __c3 = __c2 + 1;\n+\t    const double __c4 = __c3 + 1;\n+\t    // e^(1 / 78)\n+\t    const double __e178 = 1.0129030479320018583185514777512983L;\n+\t    const double __c5 = __c4 + __e178;\n+\t    const double __c = __param._M_cb + __c5;\n+\t    const double __2cx = 2 * (2 * __m + __param._M_d);\n+\n+\t    bool __reject = true;\n+\t    do\n+\t      {\n+\t\tconst double __u = __c * __aurng();\n+\t\tconst double __e = -std::log(__aurng());\n+\n+\t\tdouble __w = 0.0;\n+\n+\t\tif (__u <= __c1)\n+\t\t  {\n+\t\t    const double __n = _M_nd(__urng);\n+\t\t    const double __y = -std::abs(__n) * __param._M_sm - 1;\n+\t\t    __x = std::floor(__y);\n+\t\t    __w = -__n * __n / 2;\n+\t\t    if (__x < -__m)\n+\t\t      continue;\n+\t\t  }\n+\t\telse if (__u <= __c2)\n+\t\t  {\n+\t\t    const double __n = _M_nd(__urng);\n+\t\t    const double __y = 1 + std::abs(__n) * __param._M_scx;\n+\t\t    __x = std::ceil(__y);\n+\t\t    __w = __y * (2 - __y) * __param._M_1cx;\n+\t\t    if (__x > __param._M_d)\n+\t\t      continue;\n+\t\t  }\n+\t\telse if (__u <= __c3)\n+\t\t  // NB: This case not in the book, nor in the Errata,\n+\t\t  // but should be ok...\n+\t\t  __x = -1;\n+\t\telse if (__u <= __c4)\n+\t\t  __x = 0;\n+\t\telse if (__u <= __c5)\n+\t\t  __x = 1;\n+\t\telse\n+\t\t  {\n+\t\t    const double __v = -std::log(__aurng());\n+\t\t    const double __y = __param._M_d\n+\t\t\t\t     + __v * __2cx / __param._M_d;\n+\t\t    __x = std::ceil(__y);\n+\t\t    __w = -__param._M_d * __param._M_1cx * (1 + __y / 2);\n+\t\t  }\n+\n+\t\t__reject = (__w - __e - __x * __param._M_lm_thr\n+\t\t\t    > __param._M_lfm - std::lgamma(__x + __m + 1));\n+\n+\t\t__reject |= __x + __m >= __thr;\n+\n+\t      } while (__reject);\n+\n+\t    return result_type(__x + __m + __naf);\n+\t  }\n+\telse\n+#endif\n+\t  {\n+\t    _IntType     __x = 0;\n+\t    double __prod = 1.0;\n+\n+\t    do\n+\t      {\n+\t\t__prod *= __aurng();\n+\t\t__x += 1;\n+\t      }\n+\t    while (__prod > __param._M_lm_thr);\n+\n+\t    return __x - 1;\n+\t  }\n+      }\n+\n+  template<typename _IntType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const poisson_distribution<_IntType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<double>::digits10 + 1);\n+\n+      __os << __x.mean() << __space << __x._M_nd;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _IntType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       poisson_distribution<_IntType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::skipws);\n+\n+      double __mean;\n+      __is >> __mean >> __x._M_nd;\n+      __x.param(typename poisson_distribution<_IntType>::param_type(__mean));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _IntType>\n+    void\n+    binomial_distribution<_IntType>::param_type::\n+    _M_initialize()\n+    {\n+      const double __p12 = _M_p <= 0.5 ? _M_p : 1.0 - _M_p;\n+\n+      _M_easy = true;\n+\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+      if (_M_t * __p12 >= 8)\n+\t{\n+\t  _M_easy = false;\n+\t  const double __np = std::floor(_M_t * __p12);\n+\t  const double __pa = __np / _M_t;\n+\t  const double __1p = 1 - __pa;\n+\n+\t  const double __pi_4 = 0.7853981633974483096156608458198757L;\n+\t  const double __d1x =\n+\t    std::sqrt(__np * __1p * std::log(32 * __np\n+\t\t\t\t\t     / (81 * __pi_4 * __1p)));\n+\t  _M_d1 = std::round(std::max(1.0, __d1x));\n+\t  const double __d2x =\n+\t    std::sqrt(__np * __1p * std::log(32 * _M_t * __1p\n+\t\t\t\t\t     / (__pi_4 * __pa)));\n+\t  _M_d2 = std::round(std::max(1.0, __d2x));\n+\n+\t  // sqrt(pi / 2)\n+\t  const double __spi_2 = 1.2533141373155002512078826424055226L;\n+\t  _M_s1 = std::sqrt(__np * __1p) * (1 + _M_d1 / (4 * __np));\n+\t  _M_s2 = std::sqrt(__np * __1p) * (1 + _M_d2 / (4 * _M_t * __1p));\n+\t  _M_c = 2 * _M_d1 / __np;\n+\t  _M_a1 = std::exp(_M_c) * _M_s1 * __spi_2;\n+\t  const double __a12 = _M_a1 + _M_s2 * __spi_2;\n+\t  const double __s1s = _M_s1 * _M_s1;\n+\t  _M_a123 = __a12 + (std::exp(_M_d1 / (_M_t * __1p))\n+\t\t\t     * 2 * __s1s / _M_d1\n+\t\t\t     * std::exp(-_M_d1 * _M_d1 / (2 * __s1s)));\n+\t  const double __s2s = _M_s2 * _M_s2;\n+\t  _M_s = (_M_a123 + 2 * __s2s / _M_d2\n+\t\t  * std::exp(-_M_d2 * _M_d2 / (2 * __s2s)));\n+\t  _M_lf = (std::lgamma(__np + 1)\n+\t\t   + std::lgamma(_M_t - __np + 1));\n+\t  _M_lp1p = std::log(__pa / __1p);\n+\n+\t  _M_q = -std::log(1 - (__p12 - __pa) / __1p);\n+\t}\n+      else\n+#endif\n+\t_M_q = -std::log(1 - __p12);\n+    }\n+\n+  template<typename _IntType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename binomial_distribution<_IntType>::result_type\n+      binomial_distribution<_IntType>::\n+      _M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t)\n+      {\n+\t_IntType __x = 0;\n+\tdouble __sum = 0.0;\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, double>\n+\t  __aurng(__urng);\n+\n+\tdo\n+\t  {\n+\t    const double __e = -std::log(__aurng());\n+\t    __sum += __e / (__t - __x);\n+\t    __x += 1;\n+\t  }\n+\twhile (__sum <= _M_param._M_q);\n+\n+\treturn __x - 1;\n+      }\n+\n+  /**\n+   * A rejection algorithm when t * p >= 8 and a simple waiting time\n+   * method - the second in the referenced book - otherwise.\n+   * NB: The former is available only if _GLIBCXX_USE_C99_MATH_TR1\n+   * is defined.\n+   *\n+   * Reference:\n+   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * New York, 1986, Ch. X, Sect. 4 (+ Errata!).\n+   */\n+  template<typename _IntType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename binomial_distribution<_IntType>::result_type\n+      binomial_distribution<_IntType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __param)\n+      {\n+\tresult_type __ret;\n+\tconst _IntType __t = __param.t();\n+\tconst _IntType __p = __param.p();\n+\tconst double __p12 = __p <= 0.5 ? __p : 1.0 - __p;\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, double>\n+\t  __aurng(__urng);\n+\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\tif (!__param._M_easy)\n+\t  {\n+\t    double __x;\n+\n+\t    // See comments above...\n+\t    const double __naf =\n+\t      (1 - std::numeric_limits<double>::epsilon()) / 2;\n+\t    const double __thr =\n+\t      std::numeric_limits<_IntType>::max() + __naf;\n+\n+\t    const double __np = std::floor(__t * __p12);\n+\n+\t    // sqrt(pi / 2)\n+\t    const double __spi_2 = 1.2533141373155002512078826424055226L;\n+\t    const double __a1 = __param._M_a1;\n+\t    const double __a12 = __a1 + __param._M_s2 * __spi_2;\n+\t    const double __a123 = __param._M_a123;\n+\t    const double __s1s = __param._M_s1 * __param._M_s1;\n+\t    const double __s2s = __param._M_s2 * __param._M_s2;\n+\n+\t    bool __reject;\n+\t    do\n+\t      {\n+\t\tconst double __u = __param._M_s * __aurng();\n+\n+\t\tdouble __v;\n+\n+\t\tif (__u <= __a1)\n+\t\t  {\n+\t\t    const double __n = _M_nd(__urng);\n+\t\t    const double __y = __param._M_s1 * std::abs(__n);\n+\t\t    __reject = __y >= __param._M_d1;\n+\t\t    if (!__reject)\n+\t\t      {\n+\t\t\tconst double __e = -std::log(__aurng());\n+\t\t\t__x = std::floor(__y);\n+\t\t\t__v = -__e - __n * __n / 2 + __param._M_c;\n+\t\t      }\n+\t\t  }\n+\t\telse if (__u <= __a12)\n+\t\t  {\n+\t\t    const double __n = _M_nd(__urng);\n+\t\t    const double __y = __param._M_s2 * std::abs(__n);\n+\t\t    __reject = __y >= __param._M_d2;\n+\t\t    if (!__reject)\n+\t\t      {\n+\t\t\tconst double __e = -std::log(__aurng());\n+\t\t\t__x = std::floor(-__y);\n+\t\t\t__v = -__e - __n * __n / 2;\n+\t\t      }\n+\t\t  }\n+\t\telse if (__u <= __a123)\n+\t\t  {\n+\t\t    const double __e1 = -std::log(__aurng());\n+\t\t    const double __e2 = -std::log(__aurng());\n+\n+\t\t    const double __y = __param._M_d1\n+\t\t\t\t     + 2 * __s1s * __e1 / __param._M_d1;\n+\t\t    __x = std::floor(__y);\n+\t\t    __v = (-__e2 + __param._M_d1 * (1 / (__t - __np)\n+\t\t\t\t\t\t    -__y / (2 * __s1s)));\n+\t\t    __reject = false;\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    const double __e1 = -std::log(__aurng());\n+\t\t    const double __e2 = -std::log(__aurng());\n+\n+\t\t    const double __y = __param._M_d2\n+\t\t\t\t     + 2 * __s2s * __e1 / __param._M_d2;\n+\t\t    __x = std::floor(-__y);\n+\t\t    __v = -__e2 - __param._M_d2 * __y / (2 * __s2s);\n+\t\t    __reject = false;\n+\t\t  }\n+\n+\t\t__reject = __reject || __x < -__np || __x > __t - __np;\n+\t\tif (!__reject)\n+\t\t  {\n+\t\t    const double __lfx =\n+\t\t      std::lgamma(__np + __x + 1)\n+\t\t      + std::lgamma(__t - (__np + __x) + 1);\n+\t\t    __reject = __v > __param._M_lf - __lfx\n+\t\t\t     + __x * __param._M_lp1p;\n+\t\t  }\n+\n+\t\t__reject |= __x + __np >= __thr;\n+\t      }\n+\t    while (__reject);\n+\n+\t    __x += __np + __naf;\n+\n+\t    const _IntType __z = _M_waiting(__urng, __t - _IntType(__x));\n+\t    __ret = _IntType(__x) + __z;\n+\t  }\n+\telse\n+#endif\n+\t  __ret = _M_waiting(__urng, __t);\n+\n+\tif (__p12 != __p)\n+\t  __ret = __t - __ret;\n+\treturn __ret;\n+      }\n+\n+  template<typename _IntType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const binomial_distribution<_IntType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<double>::digits10 + 1);\n+\n+      __os << __x.t() << __space << __x.p()\n+\t   << __space << __x._M_nd;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _IntType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       binomial_distribution<_IntType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _IntType __t;\n+      double __p;\n+      __is >> __t >> __p >> __x._M_nd;\n+      __x.param(typename binomial_distribution<_IntType>::\n+\t\tparam_type(__t, __p));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const exponential_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__os.widen(' '));\n+      __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n+\n+      __os << __x.lambda();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       exponential_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __lambda;\n+      __is >> __lambda;\n+      __x.param(typename exponential_distribution<_RealType>::\n+\t\tparam_type(__lambda));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType>\n+    bool\n+    operator==(const normal_distribution<_RealType>& __d1,\n+\t       const normal_distribution<_RealType>& __d2)\n+    {\n+      if (__d1._M_param == __d2._M_param)\n+\t{\n+\t  if (__d1._M_saved_available == __d2._M_saved_available)\n+\t    {\n+\t      if (__d1._M_saved_available\n+\t       && __d1._M_saved == __d2._M_saved)\n+\t\treturn true;\n+\t      else if(!__d1._M_saved_available)\n+\t\treturn true;\n+\t      else\n+\t\treturn false;\n+\t    }\n+\t  else\n+\t    return false;\n+\t}\n+      else\n+\treturn false;\n+    }\n+\n+  /**\n+   * Polar method due to Marsaglia.\n+   *\n+   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * New York, 1986, Ch. V, Sect. 4.4.\n+   */\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename normal_distribution<_RealType>::result_type\n+      normal_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __param)\n+      {\n+\tresult_type __ret;\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\tif (_M_saved_available)\n+\t  {\n+\t    _M_saved_available = false;\n+\t    __ret = _M_saved;\n+\t  }\n+\telse\n+\t  {\n+\t    result_type __x, __y, __r2;\n+\t    do\n+\t      {\n+\t\t__x = result_type(2.0) * __aurng() - 1.0;\n+\t\t__y = result_type(2.0) * __aurng() - 1.0;\n+\t\t__r2 = __x * __x + __y * __y;\n+\t      }\n+\t    while (__r2 > 1.0 || __r2 == 0.0);\n+\n+\t    const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);\n+\t    _M_saved = __x * __mult;\n+\t    _M_saved_available = true;\n+\t    __ret = __y * __mult;\n+\t  }\n+\n+\t__ret = __ret * __param.stddev() + __param.mean();\n+\treturn __ret;\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const normal_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n+\n+      __os << __x.mean() << __space << __x.stddev()\n+\t   << __space << __x._M_saved_available;\n+      if (__x._M_saved_available)\n+\t__os << __space << __x._M_saved;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       normal_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      double __mean, __stddev;\n+      __is >> __mean >> __stddev\n+\t   >> __x._M_saved_available;\n+      if (__x._M_saved_available)\n+\t__is >> __x._M_saved;\n+      __x.param(typename normal_distribution<_RealType>::\n+\t\tparam_type(__mean, __stddev));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename lognormal_distribution<_RealType>::result_type\n+      lognormal_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __p)\n+      {\n+\t_RealType __u, __v, __r2, __normal;\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\tdo\n+\t  {\n+\t    // Choose x,y in uniform square (-1,-1) to (+1,+1).\n+\t    __u = 2 * __aurng() - 1;\n+\t    __v = 2 * __aurng() - 1;\n+\n+\t    // See if it is in the unit circle.\n+\t    __r2 = __u * __u + __v * __v;\n+\t  }\n+\twhile (__r2 > 1 || __r2 == 0);\n+\n+\t__normal = __u * std::sqrt(-2 * std::log(__r2) / __r2);\n+\n+\treturn std::exp(__p.s() * __normal + __p.m());\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const lognormal_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n+\n+      __os << __x.m() << __space << __x.s();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       lognormal_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __m, __s;\n+      __is >> __m >> __s;\n+      __x.param(typename lognormal_distribution<_RealType>::\n+\t\tparam_type(__m, __s));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename chi_squared_distribution<_RealType>::result_type\n+      chi_squared_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __p)\n+      {\n+\ttypename gamma_distribution<_RealType>::param_type\n+\t  __gamma_param(__p.n() / 2, 1.0);\n+\tgamma_distribution<_RealType> __gamma(__gamma_param);\n+\treturn 2 * __gamma(__urng);\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const chi_squared_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n+\n+      __os << __x.n();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       chi_squared_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __n;\n+      __is >> __n;\n+      __x.param(typename chi_squared_distribution<_RealType>::\n+\t\tparam_type(__n));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename cauchy_distribution<_RealType>::result_type\n+      cauchy_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __p)\n+      {\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\t_RealType __u;\n+\tdo\n+\t  {\n+\t    __u = __aurng();\n+\t  }\n+\twhile (__u == 0.5);\n+\n+\treturn __p.a() + __p.b() * std::tan(M_PI * __u);\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const cauchy_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n+\n+      __os << __x.a() << __space << __x.b();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       cauchy_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __a, __b;\n+      __is >> __a >> __b;\n+      __x.param(typename cauchy_distribution<_RealType>::\n+\t\tparam_type(__a, __b));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename fisher_f_distribution<_RealType>::result_type\n+      fisher_f_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __p)\n+      {\n+\tgamma_distribution<_RealType> __gamma;\n+\t_RealType __ym = __gamma(__urng,\n+\t typename gamma_distribution<_RealType>::param_type(__p.m() / 2, 2));\n+\n+\t_RealType __yn = __gamma(__urng,\n+\t typename gamma_distribution<_RealType>::param_type(__p.n() / 2, 2));\n+\n+\treturn (__ym * __p.n()) / (__yn * __p.m());\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const fisher_f_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n+\n+      __os << __x.m() << __space << __x.n();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       fisher_f_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __m, __n;\n+      __is >> __m >> __n;\n+      __x.param(typename fisher_f_distribution<_RealType>::\n+\t\tparam_type(__m, __n));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  //\n+  //  This could be operator() for a Gaussian distribution.\n+  //\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename student_t_distribution<_RealType>::result_type\n+      student_t_distribution<_RealType>::\n+      _M_gaussian(_UniformRandomNumberGenerator& __urng,\n+\t\t  const result_type __sigma)\n+      {\n+\t_RealType __x, __y, __r2;\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\tdo\n+\t  {\n+\t    // Choose x,y in uniform square (-1,-1) to (+1,+1).\n+\t    __x = 2 * __aurng() - 1;\n+\t    __y = 2 * __aurng() - 1;\n+\n+\t    // See if it is in the unit circle.\n+\t    __r2 = __x * __x + __y * __y;\n+\t  }\n+\twhile (__r2 > 1 || __r2 == 0);\n+\n+\t// Box-Muller transform.\n+\treturn __sigma * __y * std::sqrt(-2 * std::log(__r2) / __r2);\n+      }\n+\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename student_t_distribution<_RealType>::result_type\n+      student_t_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __param)\n+      {\n+\tif (__param.n() <= 2.0)\n+\t  {\n+\t    _RealType __y1 = _M_gaussian(__urng, 1.0);\n+\t    typename chi_squared_distribution<_RealType>::param_type\n+\t      __chisq_param(__param.n());\n+\t    chi_squared_distribution<_RealType> __chisq(__chisq_param);\n+\t    _RealType __y2 = __chisq(__urng);\n+\n+\t    return __y1 / std::sqrt(__y2 / __param.n());\n+\t  }\n+\telse\n+\t  {\n+\t    _RealType __y1, __y2, __z;\n+\t    do\n+\t      {\n+\t\t__y1 = _M_gaussian(__urng, 1.0);\n+\t\ttypename exponential_distribution<_RealType>::param_type\n+\t\t  __exp_param(1.0 / (__param.n() / 2.0 - 1.0));\n+\t\texponential_distribution<_RealType>\n+\t\t  __exponential(__exp_param);\n+\t\t__y2 = __exponential(__urng);\n+\n+\t\t__z = __y1 * __y1 / (__param.n() - 2.0);\n+\t      }\n+\t    while (1.0 - __z < 0.0 || std::exp(-__y2 - __z) > (1.0 - __z));\n+\n+\t    // Note that there is a typo in Knuth's formula, the line below\n+\t    // is taken from the original paper of Marsaglia, Mathematics of\n+\t    // Computation, 34 (1980), p 234-256\n+\t    return __y1 / std::sqrt((1.0 - 2.0 / __param.n()) * (1.0 - __z));\n+\t  }\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const student_t_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n+\n+      __os << __x.n();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       student_t_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __n;\n+      __is >> __n;\n+      __x.param(typename student_t_distribution<_RealType>::param_type(__n));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType>\n+    void\n+    gamma_distribution<_RealType>::param_type::\n+    _M_initialize()\n+    {\n+      if (_M_alpha >= 1)\n+\t_M_l_d = std::sqrt(2 * _M_alpha - 1);\n+      else\n+\t_M_l_d = (std::pow(_M_alpha, _M_alpha / (1 - _M_alpha))\n+\t\t  * (1 - _M_alpha));\n+    }\n+\n+  /**\n+   * Cheng's rejection algorithm GB for alpha >= 1 and a modification\n+   * of Vaduva's rejection from Weibull algorithm due to Devroye for\n+   * alpha < 1.\n+   *\n+   * References:\n+   * Cheng, R. C. \"The Generation of Gamma Random Variables with Non-integral\n+   * Shape Parameter.\" Applied Statistics, 26, 71-75, 1977.\n+   *\n+   * Vaduva, I. \"Computer Generation of Gamma Gandom Variables by Rejection\n+   * and Composition Procedures.\" Math. Operationsforschung and Statistik,\n+   * Series in Statistics, 8, 545-576, 1977.\n+   *\n+   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * New York, 1986, Ch. IX, Sect. 3.4 (+ Errata!).\n+   */\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename gamma_distribution<_RealType>::result_type\n+      gamma_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __param)\n+      {\n+\tresult_type __x;\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\tbool __reject;\n+\tconst _RealType __alpha = __param.alpha();\n+\tconst _RealType __beta = __param.beta();\n+\tif (__alpha >= 1)\n+\t  {\n+\t    // alpha - log(4)\n+\t    const result_type __b = __alpha\n+\t      - result_type(1.3862943611198906188344642429163531L);\n+\t    const result_type __c = __alpha + __param._M_l_d;\n+\t    const result_type __1l = 1 / __param._M_l_d;\n+\n+\t    // 1 + log(9 / 2)\n+\t    const result_type __k = 2.5040773967762740733732583523868748L;\n+\n+\t    do\n+\t      {\n+\t\tconst result_type __u = __aurng() / __beta;\n+\t\tconst result_type __v = __aurng() / __beta;\n+\n+\t\tconst result_type __y = __1l * std::log(__v / (1 - __v));\n+\t\t__x = __alpha * std::exp(__y);\n+\n+\t\tconst result_type __z = __u * __v * __v;\n+\t\tconst result_type __r = __b + __c * __y - __x;\n+\n+\t\t__reject = __r < result_type(4.5) * __z - __k;\n+\t\tif (__reject)\n+\t\t  __reject = __r < std::log(__z);\n+\t      }\n+\t    while (__reject);\n+\t  }\n+\telse\n+\t  {\n+\t    const result_type __c = 1 / __alpha;\n+\n+\t    do\n+\t      {\n+\t\tconst result_type __z = -std::log(__aurng() / __beta);\n+\t\tconst result_type __e = -std::log(__aurng() / __beta);\n+\n+\t\t__x = std::pow(__z, __c);\n+\n+\t\t__reject = __z + __e < __param._M_l_d + __x;\n+\t      }\n+\t    while (__reject);\n+\t  }\n+\n+\treturn __beta * __x;\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const gamma_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n+\n+      __os << __x.alpha() << __space << __x.beta();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       gamma_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __alpha, __beta;\n+      __is >> __alpha >> __beta;\n+      __x.param(typename gamma_distribution<_RealType>::\n+\t\tparam_type(__alpha, __beta));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const weibull_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n+\n+      __os << __x.a() << __space << __x.b();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       weibull_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __a, __b;\n+      __is >> __a >> __b;\n+      __x.param(typename weibull_distribution<_RealType>::\n+\t\tparam_type(__a, __b));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename extreme_value_distribution<_RealType>::result_type\n+      extreme_value_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __p)\n+      {\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\treturn __p.a() - __p.b() * std::log(-std::log(__aurng()));\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const extreme_value_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n+\n+      __os << __x.a() << __space << __x.b();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       extreme_value_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      _RealType __a, __b;\n+      __is >> __a >> __b;\n+      __x.param(typename extreme_value_distribution<_RealType>::\n+\t\tparam_type(__a, __b));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _IntType>\n+    void\n+    discrete_distribution<_IntType>::param_type::\n+    _M_initialize()\n+    {\n+      if (_M_prob.size() < 2)\n+\t{\n+\t  _M_prob.clear();\n+\t  _M_prob.push_back(1.0);\n+\t  return;\n+\t}\n+\n+      double __sum = std::accumulate(_M_prob.begin(), _M_prob.end(), 0.0);\n+      //  Now normalize the densities.\n+      std::transform(_M_prob.begin(), _M_prob.end(), _M_prob.begin(),\n+\t\t     std::bind2nd(std::divides<double>(), __sum));\n+      //  Accumulate partial sums.\n+      std::partial_sum(_M_prob.begin(), _M_prob.end(),\n+\t\t       std::back_inserter(_M_cp));\n+      //  Make sure the last cumulative probablility is one.\n+      _M_cp[_M_cp.size() - 1] = 1.0;\n+    }\n+\n+  template<typename _IntType>\n+    template<typename _Func>\n+      discrete_distribution<_IntType>::param_type::\n+      param_type(size_t __nw, double __xmin, double __xmax,\n+\t\t _Func __fw)\n+      : _M_prob(), _M_cp()\n+      {\n+\tfor (size_t __i = 0; __i < __nw; ++__i)\n+\t  {\n+\t    const double __x = ((__nw - __i - 0.5) * __xmin\n+\t\t\t\t     + (__i + 0.5) * __xmax) / __nw;\n+\t    _M_prob.push_back(__fw(__x));\n+\t  }\n+\n+\t_M_initialize();\n+      }\n+\n+  template<typename _IntType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename discrete_distribution<_IntType>::result_type\n+      discrete_distribution<_IntType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __param)\n+      {\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\tconst double __p = __aurng();\n+\tauto __pos = std::lower_bound(__param._M_cp.begin(),\n+\t\t\t\t      __param._M_cp.end(), __p);\n+\tif (__pos == __param._M_cp.end())\n+\t  return 0;\n+\tconst size_t __i = __pos - __param._M_cp.begin();\n+\n+\treturn __i;\n+      }\n+\n+  template<typename _IntType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const discrete_distribution<_IntType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<double>::digits10 + 1);\n+\n+      std::vector<double> __prob = __x.probabilities();\n+      __os << __prob.size();\n+      for (auto __dit = __prob.begin(); __dit != __prob.end(); ++__dit)\n+\t__os << __space << *__dit;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _IntType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       discrete_distribution<_IntType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      size_t __n;\n+      __is >> __n;\n+\n+      std::vector<double> __prob_vec;\n+      for (; __n != 0; --__n)\n+\t{\n+\t  double __prob;\n+\t  __is >> __prob;\n+\t  __prob_vec.push_back(__prob);\n+\t}\n+\n+      __x.param(typename discrete_distribution<_IntType>::\n+\t\tparam_type(__prob_vec.begin(), __prob_vec.end()));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType>\n+    void\n+    piecewise_constant_distribution<_RealType>::param_type::\n+    _M_initialize()\n+    {\n+      if (_M_int.size() < 2)\n+\t{\n+\t  _M_int.clear();\n+\t  _M_int.push_back(_RealType(0));\n+\t  _M_int.push_back(_RealType(1));\n+\n+\t  _M_den.clear();\n+\t  _M_den.push_back(1.0);\n+\n+\t  return;\n+\t}\n+\n+      double __sum = 0.0;\n+      for (size_t __i = 0; __i < _M_den.size(); ++__i)\n+\t{\n+\t  __sum += _M_den[__i] * (_M_int[__i + 1] - _M_int[__i]);\n+\t  _M_cp.push_back(__sum);\n+\t}\n+\n+      //  Now normalize the densities...\n+      std::transform(_M_den.begin(), _M_den.end(), _M_den.begin(),\n+\t\t     std::bind2nd(std::divides<double>(), __sum));\n+      //  ... and partial sums.\n+      std::transform(_M_cp.begin(), _M_cp.end(), _M_cp.begin(),\n+\t\t     std::bind2nd(std::divides<double>(), __sum));\n+      //  Make sure the last cumulative probablility is one.\n+      _M_cp[_M_cp.size() - 1] = 1.0;\n+    }\n+\n+  template<typename _RealType>\n+    piecewise_constant_distribution<_RealType>::param_type::\n+    param_type()\n+    : _M_int(), _M_den(), _M_cp()\n+    {\n+      _M_initialize();\n+    }\n+\n+  template<typename _RealType>\n+    template<typename _InputIteratorB, typename _InputIteratorW>\n+      piecewise_constant_distribution<_RealType>::param_type::\n+      param_type(_InputIteratorB __bbegin,\n+\t\t _InputIteratorB __bend,\n+\t\t _InputIteratorW __wbegin)\n+      : _M_int(), _M_den(), _M_cp()\n+      {\n+\tdo\n+\t  {\n+\t    _M_int.push_back(*__bbegin);\n+\t    ++__bbegin;\n+\t    if (__bbegin != __bend)\n+\t      {\n+\t\t_M_den.push_back(*__wbegin);\n+\t\t++__wbegin;\n+\t      }\n+\t  }\n+\twhile (__bbegin != __bend);\n+\n+\t_M_initialize();\n+      }\n+\n+  template<typename _RealType>\n+    template<typename _Func>\n+      piecewise_constant_distribution<_RealType>::param_type::\n+      param_type(initializer_list<_RealType> __bil, _Func __fw)\n+      : _M_int(), _M_den(), _M_cp()\n+      {\n+\tfor (auto __biter = __bil.begin(); __biter != __bil.end(); ++__biter)\n+\t  _M_int.push_back(*__biter);\n+\n+\tfor (size_t __i = 0; __i < _M_int.size() - 1; ++__i)\n+\t  {\n+\t    _RealType __x = 0.5 * (_M_int[__i] + _M_int[__i + 1]);\n+\t    _M_den.push_back(__fw(__x));\n+\t  }\n+\n+\t_M_initialize();\n+      }\n+\n+  template<typename _RealType>\n+    template<typename _Func>\n+      piecewise_constant_distribution<_RealType>::param_type::\n+      param_type(size_t __nw, _RealType __xmin, _RealType __xmax,\n+\t\t _Func __fw)\n+      : _M_int(), _M_den(), _M_cp()\n+      {\n+\tfor (size_t __i = 0; __i <= __nw; ++__i)\n+\t  {\n+\t    const _RealType __x = ((__nw - __i) * __xmin\n+\t\t\t\t\t  + __i * __xmax) / __nw;\n+\t    _M_int.push_back(__x);\n+\t  }\n+\tfor (size_t __i = 0; __i < __nw; ++__i)\n+\t  {\n+\t    const _RealType __x = ((__nw - __i - 0.5) * __xmin\n+\t\t\t\t\t+ (__i + 0.5) * __xmax) / __nw;\n+\t    _M_den.push_back(__fw(__x));\n+\t  }\n+\n+\t_M_initialize();\n+      }\n+\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename piecewise_constant_distribution<_RealType>::result_type\n+      piecewise_constant_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __param)\n+      {\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\tconst double __p = __aurng();\n+\tauto __pos = std::lower_bound(__param._M_cp.begin(),\n+\t\t\t\t      __param._M_cp.end(), __p);\n+\tconst size_t __i = __pos - __param._M_cp.begin();\n+\n+\treturn __param._M_int[__i]\n+\t     + (__p - __param._M_cp[__i]) / __param._M_den[__i];\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const piecewise_constant_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n+\n+      std::vector<_RealType> __int = __x.intervals();\n+      __os << __int.size() - 1;\n+\n+      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)\n+\t__os << __space << *__xit;\n+\n+      std::vector<double> __den = __x.densities();\n+      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)\n+\t__os << __space << *__dit;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       piecewise_constant_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      size_t __n;\n+      __is >> __n;\n+\n+      std::vector<_RealType> __int_vec;\n+      for (size_t __i = 0; __i <= __n; ++__i)\n+\t{\n+\t  _RealType __int;\n+\t  __is >> __int;\n+\t  __int_vec.push_back(__int);\n+\t}\n+\n+      std::vector<double> __den_vec;\n+      for (size_t __i = 0; __i < __n; ++__i)\n+\t{\n+\t  double __den;\n+\t  __is >> __den;\n+\t  __den_vec.push_back(__den);\n+\t}\n+\n+      __x.param(typename piecewise_constant_distribution<_RealType>::\n+\t  param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType>\n+    void\n+    piecewise_linear_distribution<_RealType>::param_type::\n+    _M_initialize()\n+    {\n+      if (_M_int.size() < 2)\n+\t{\n+\t  _M_int.clear();\n+\t  _M_int.push_back(_RealType(0));\n+\t  _M_int.push_back(_RealType(1));\n+\n+\t  _M_den.clear();\n+\t  _M_den.push_back(1.0);\n+\t  _M_den.push_back(1.0);\n+\n+\t  return;\n+\t}\n+\n+      double __sum = 0.0;\n+      for (size_t __i = 0; __i < _M_int.size() - 1; ++__i)\n+\t{\n+\t  const _RealType __delta = _M_int[__i + 1] - _M_int[__i];\n+\t  __sum += 0.5 * (_M_den[__i + 1] + _M_den[__i]) * __delta;\n+\t  _M_cp.push_back(__sum);\n+\t  _M_m.push_back((_M_den[__i + 1] - _M_den[__i]) / __delta);\n+\t}\n+\n+      //  Now normalize the densities...\n+      std::transform(_M_den.begin(), _M_den.end(), _M_den.begin(),\n+\t\t     std::bind2nd(std::divides<double>(),__sum));\n+      //  ... and partial sums... \n+      std::transform(_M_cp.begin(), _M_cp.end(), _M_cp.begin(),\n+\t\t     std::bind2nd(std::divides<double>(), __sum));\n+      //  ... and slopes.\n+      std::transform(_M_m.begin(), _M_m.end(), _M_m.begin(),\n+\t\t     std::bind2nd(std::divides<double>(), __sum));\n+      //  Make sure the last cumulative probablility is one.\n+      _M_cp[_M_cp.size() - 1] = 1.0;\n+    }\n+\n+  template<typename _RealType>\n+    piecewise_linear_distribution<_RealType>::param_type::\n+    param_type()\n+    : _M_int(), _M_den(), _M_cp(), _M_m()\n+    {\n+      _M_initialize();\n+    }\n+\n+  template<typename _RealType>\n+    template<typename _InputIteratorB, typename _InputIteratorW>\n+      piecewise_linear_distribution<_RealType>::param_type::\n+      param_type(_InputIteratorB __bbegin,\n+\t\t _InputIteratorB __bend,\n+\t\t _InputIteratorW __wbegin)\n+      : _M_int(), _M_den(), _M_cp(), _M_m()\n+      {\n+\tfor (; __bbegin != __bend; ++__bbegin, ++__wbegin)\n+\t  {\n+\t    _M_int.push_back(*__bbegin);\n+\t    _M_den.push_back(*__wbegin);\n+\t  }\n+\n+\t_M_initialize();\n+      }\n+\n+  template<typename _RealType>\n+    template<typename _Func>\n+      piecewise_linear_distribution<_RealType>::param_type::\n+      param_type(initializer_list<_RealType> __bil, _Func __fw)\n+      : _M_int(), _M_den(), _M_cp(), _M_m()\n+      {\n+\tfor (auto __biter = __bil.begin(); __biter != __bil.end(); ++__biter)\n+\t  {\n+\t    _M_int.push_back(*__biter);\n+\t    _M_den.push_back(__fw(*__biter));\n+\t  }\n+\n+\t_M_initialize();\n+      }\n+\n+  template<typename _RealType>\n+    template<typename _Func>\n+      piecewise_linear_distribution<_RealType>::param_type::\n+      param_type(size_t __nw, _RealType __xmin, _RealType __xmax,\n+\t\t _Func __fw)\n+      : _M_int(), _M_den(), _M_cp(), _M_m()\n+      {\n+\tfor (size_t __i = 0; __i <= __nw; ++__i)\n+\t  {\n+\t    const _RealType __x = ((__nw - __i) * __xmin\n+\t\t\t\t\t  + __i * __xmax) / __nw;\n+\t    _M_int.push_back(__x);\n+\t    _M_den.push_back(__fw(__x));\n+\t  }\n+\n+\t_M_initialize();\n+      }\n+\n+  template<typename _RealType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename piecewise_linear_distribution<_RealType>::result_type\n+      piecewise_linear_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng,\n+\t\t const param_type& __param)\n+      {\n+\tresult_type __x;\n+\t__detail::_Adaptor<_UniformRandomNumberGenerator, result_type>\n+\t  __aurng(__urng);\n+\n+\tconst double __p = __aurng();\n+\tauto __pos = std::lower_bound(__param._M_cp.begin(),\n+\t\t\t\t      __param._M_cp.end(), __p);\n+\tconst size_t __i = __pos - __param._M_cp.begin();\n+\tconst double __a = 0.5 * __param._M_m[__i];\n+\tconst double __b = __param._M_den[__i];\n+\tconst double __c = __param._M_cp[__i];\n+\tconst double __q = -0.5 * (__b\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\t\t\t + std::copysign(std::sqrt(__b * __b\n+\t\t\t\t\t\t - 4.0 * __a * __c), __b));\n+#else\n+\t\t\t + (__b < 0.0 ? -1.0 : 1.0)\n+\t\t\t * std::sqrt(__b * __b - 4.0 * __a * __c)));\n+#endif\n+\tconst double __x0 = __param._M_int[__i];\n+\tconst double __x1 = __q / __a;\n+\tconst double __x2 = __c / __q;\n+\t__x = std::max(__x0 + __x1, __x0 + __x2);\n+\n+\treturn __x;\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const piecewise_linear_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(std::numeric_limits<_RealType>::digits10 + 1);\n+\n+      std::vector<_RealType> __int = __x.intervals();\n+      __os << __int.size() - 1;\n+\n+      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)\n+\t__os << __space << *__xit;\n+\n+      std::vector<double> __den = __x.densities();\n+      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)\n+\t__os << __space << *__dit;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       piecewise_linear_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      size_t __n;\n+      __is >> __n;\n+\n+      std::vector<_RealType> __int_vec;\n+      for (size_t __i = 0; __i <= __n; ++__i)\n+\t{\n+\t  _RealType __int;\n+\t  __is >> __int;\n+\t  __int_vec.push_back(__int);\n+\t}\n+\n+      std::vector<double> __den_vec;\n+      for (size_t __i = 0; __i <= __n; ++__i)\n+\t{\n+\t  double __den;\n+\t  __is >> __den;\n+\t  __den_vec.push_back(__den);\n+\t}\n+\n+      __x.param(typename piecewise_linear_distribution<_RealType>::\n+\t  param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _IntType>\n+    seed_seq::seed_seq(std::initializer_list<_IntType> __il)\n+    {\n+      for (auto __iter = __il.begin(); __iter != __il.end(); ++__iter)\n+\t_M_v.push_back(__detail::__mod<result_type, 1, 0,\n+\t\t       __detail::_Shift<result_type, 32>::__value>(*__iter));\n+    }\n+\n+  template<typename _InputIterator>\n+    seed_seq::seed_seq(_InputIterator __begin, _InputIterator __end)\n+    {\n+      for (_InputIterator __iter = __begin; __iter != __end; ++__iter)\n+\t_M_v.push_back(__detail::__mod<result_type, 1, 0,\n+\t\t       __detail::_Shift<result_type, 32>::__value>(*__iter));\n+    }\n+\n+  template<typename _RandomAccessIterator>\n+    void\n+    seed_seq::generate(_RandomAccessIterator __begin,\n+\t\t       _RandomAccessIterator __end)\n+    {\n+      typedef typename iterator_traits<_RandomAccessIterator>::value_type\n+        __Type;\n+\n+      if (__begin == __end)\n+\treturn;\n+\n+      std::fill(__begin, __end, __Type(0x8b8b8b8bU));\n+\n+      const size_t __n = __end - __begin;\n+      const size_t __s = _M_v.size();\n+      const size_t __t = (__n >= 623) ? 11\n+\t\t       : (__n >=  68) ? 7\n+\t\t       : (__n >=  39) ? 5\n+\t\t       : (__n >=   7) ? 3\n+\t\t       : (__n - 1) / 2;\n+      const size_t __p = (__n - __t) / 2;\n+      const size_t __q = __p + __t;\n+      const size_t __m = std::max(__s + 1, __n);\n+\n+      for (size_t __k = 0; __k < __m; ++__k)\n+\t{\n+\t  __Type __arg = __begin[__k % __n]\n+\t\t       ^ __begin[(__k + __p) % __n]\n+\t\t       ^ __begin[(__k - 1) % __n];\n+\t  __Type __r1 = __arg ^ (__arg << 27);\n+\t  __r1 = __detail::__mod<__Type, 1664525U, 0U,\n+\t\t   __detail::_Shift<__Type, 32>::__value>(__r1);\n+\t  __Type __r2 = __r1;\n+\t  if (__k == 0)\n+\t    __r2 += __s;\n+\t  else if (__k <= __s)\n+\t    __r2 += __k % __n + _M_v[__k - 1];\n+\t  else\n+\t    __r2 += __k % __n;\n+\t  __r2 = __detail::__mod<__Type, 1U, 0U,\n+\t\t   __detail::_Shift<__Type, 32>::__value>(__r2);\n+\t  __begin[(__k + __p) % __n] += __r1;\n+\t  __begin[(__k + __q) % __n] += __r2;\n+\t  __begin[__k % __n] = __r2;\n+\t}\n+\n+      for (size_t __k = __m; __k < __m + __n; ++__k)\n+\t{\n+\t  __Type __arg = __begin[__k % __n]\n+\t\t       + __begin[(__k + __p) % __n]\n+\t\t       + __begin[(__k - 1) % __n];\n+\t  __Type __r3 = __arg ^ (__arg << 27);\n+\t  __r3 = __detail::__mod<__Type, 1566083941U, 0U,\n+\t\t   __detail::_Shift<__Type, 32>::__value>(__r3);\n+\t  __Type __r4 = __r3 - __k % __n;\n+\t  __r4 = __detail::__mod<__Type, 1U, 0U,\n+\t\t   __detail::_Shift<__Type, 32>::__value>(__r4);\n+\t  __begin[(__k + __p) % __n] ^= __r4;\n+\t  __begin[(__k + __q) % __n] ^= __r3;\n+\t  __begin[__k % __n] = __r4;\n+\t}\n+    }\n+\n+  template<typename _RealType, size_t __bits,\n+\t   typename _UniformRandomNumberGenerator>\n+    _RealType\n+    generate_canonical(_UniformRandomNumberGenerator& __urng)\n+    {\n+      const size_t __b\n+\t= std::min(static_cast<size_t>(std::numeric_limits<_RealType>::digits),\n+                   __bits);\n+      const long double __r = static_cast<long double>(__urng.max())\n+\t\t\t    - static_cast<long double>(__urng.min()) + 1.0L;\n+      const size_t __log2r = std::log2l(__r);\n+      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);\n+      _RealType __sum = _RealType(0);\n+      _RealType __tmp = _RealType(1);\n+      for (; __k != 0; --__k)\n+\t{\n+\t  __sum += _RealType(__urng() - __urng.min()) * __tmp;\n+\t  __tmp *= __r;\n+\t}\n+      return __sum / __tmp;\n+    }\n+\n+}"}, {"sha": "52a0b73cf33b2565e75fddb4febb2ed7084a874e", "filename": "libstdc++-v3/include/std/random", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -56,18 +56,10 @@\n #include <debug/debug.h>\n #include <type_traits>\n \n-#if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n-#  include <tr1_impl/random>\n-#else\n-#  define _GLIBCXX_INCLUDE_AS_CXX0X\n-#  define _GLIBCXX_BEGIN_NAMESPACE_TR1\n-#  define _GLIBCXX_END_NAMESPACE_TR1\n-#  define _GLIBCXX_TR1\n-#  include <tr1_impl/random>\n-#  undef _GLIBCXX_TR1\n-#  undef _GLIBCXX_END_NAMESPACE_TR1\n-#  undef _GLIBCXX_BEGIN_NAMESPACE_TR1\n-#  undef _GLIBCXX_INCLUDE_AS_CXX0X\n+#include <bits/random.h>\n+\n+#ifndef _GLIBCXX_EXPORT_TEMPLATE\n+# include <bits/random.tcc>\n #endif\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "6f6e3234b89bd344144337a193395a1aefdf4226", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -55,16 +55,12 @@\n #include <tr1/cmath>\n \n #if defined(_GLIBCXX_INCLUDE_AS_TR1)\n-#  include <tr1_impl/random>\n+#  include <tr1/random.h>\n #else\n #  define _GLIBCXX_INCLUDE_AS_TR1\n-#  define _GLIBCXX_BEGIN_NAMESPACE_TR1 namespace tr1 {\n-#  define _GLIBCXX_END_NAMESPACE_TR1 }\n #  define _GLIBCXX_TR1 tr1::\n-#  include <tr1_impl/random>\n+#  include <tr1/random.h>\n #  undef _GLIBCXX_TR1\n-#  undef _GLIBCXX_END_NAMESPACE_TR1\n-#  undef _GLIBCXX_BEGIN_NAMESPACE_TR1\n #  undef _GLIBCXX_INCLUDE_AS_TR1\n #endif\n "}, {"sha": "5a0f6b741b6c820e9152a613e2934ed8cf925125", "filename": "libstdc++-v3/include/tr1/random.h", "status": "added", "additions": 2436, "deletions": 0, "changes": 2436, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,2436 @@\n+// random number generation -*- C++ -*-\n+\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/**\n+ * @file tr1/random.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _GLIBCXX_TR1_RANDOM_H\n+#define _GLIBCXX_TR1_RANDOM_H 1\n+\n+#pragma GCC system_header\n+\n+#if defined(_GLIBCXX_INCLUDE_AS_CXX0X)\n+#  error TR1 header cannot be included from C++0x header\n+#endif\n+\n+#include <cmath>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <string>\n+#include <iosfwd>\n+#include <limits>\n+#include <ext/type_traits.h>\n+#include <ext/numeric_traits.h>\n+#include <bits/concept_check.h>\n+#include <debug/debug.h>\n+#include <tr1/type_traits>\n+#include <tr1/cmath>\n+\n+namespace std\n+{\n+namespace tr1\n+{\n+\n+  // [5.1] Random number generation\n+\n+  /**\n+   * @addtogroup tr1_random Random Number Generation\n+   * A facility for generating random numbers on selected distributions.\n+   * @{\n+   */\n+\n+  /*\n+   * Implementation-space details.\n+   */\n+  namespace __detail\n+  {\n+    template<typename _UIntType, int __w, \n+\t     bool = __w < std::numeric_limits<_UIntType>::digits>\n+      struct _Shift\n+      { static const _UIntType __value = 0; };\n+\n+    template<typename _UIntType, int __w>\n+      struct _Shift<_UIntType, __w, true>\n+      { static const _UIntType __value = _UIntType(1) << __w; };\n+\n+    template<typename _Tp, _Tp __a, _Tp __c, _Tp __m, bool>\n+      struct _Mod;\n+\n+    // Dispatch based on modulus value to prevent divide-by-zero compile-time\n+    // errors when m == 0.\n+    template<typename _Tp, _Tp __a, _Tp __c, _Tp __m>\n+      inline _Tp\n+      __mod(_Tp __x)\n+      { return _Mod<_Tp, __a, __c, __m, __m == 0>::__calc(__x); }\n+\n+    typedef __gnu_cxx::__conditional_type<(sizeof(unsigned) == 4),\n+\t\t    unsigned, unsigned long>::__type _UInt32Type;\n+\n+    /*\n+     * An adaptor class for converting the output of any Generator into\n+     * the input for a specific Distribution.\n+     */\n+    template<typename _Engine, typename _Distribution>\n+      struct _Adaptor\n+      { \n+\ttypedef typename remove_reference<_Engine>::type _BEngine;\n+\ttypedef typename _BEngine::result_type           _Engine_result_type;\n+\ttypedef typename _Distribution::input_type       result_type;\n+\n+      public:\n+\t_Adaptor(const _Engine& __g)\n+\t: _M_g(__g) { }\n+\n+\tresult_type\n+\tmin() const\n+\t{\n+\t  result_type __return_value;\n+\t  if (is_integral<_Engine_result_type>::value\n+\t      && is_integral<result_type>::value)\n+\t    __return_value = _M_g.min();\n+\t  else\n+\t    __return_value = result_type(0);\n+\t  return __return_value;\n+\t}\n+\n+\tresult_type\n+\tmax() const\n+\t{\n+\t  result_type __return_value;\n+\t  if (is_integral<_Engine_result_type>::value\n+\t      && is_integral<result_type>::value)\n+\t    __return_value = _M_g.max();\n+\t  else if (!is_integral<result_type>::value)\n+\t    __return_value = result_type(1);\n+\t  else\n+\t    __return_value = std::numeric_limits<result_type>::max() - 1;\n+\t  return __return_value;\n+\t}\n+\n+\t/*\n+\t * Converts a value generated by the adapted random number generator\n+\t * into a value in the input domain for the dependent random number\n+\t * distribution.\n+\t *\n+\t * Because the type traits are compile time constants only the\n+\t * appropriate clause of the if statements will actually be emitted\n+\t * by the compiler.\n+\t */\n+\tresult_type\n+\toperator()()\n+\t{\n+\t  result_type __return_value;\n+\t  if (is_integral<_Engine_result_type>::value\n+\t      && is_integral<result_type>::value)\n+\t    __return_value = _M_g();\n+\t  else if (!is_integral<_Engine_result_type>::value\n+\t\t   && !is_integral<result_type>::value)\n+\t    __return_value = result_type(_M_g() - _M_g.min())\n+\t      / result_type(_M_g.max() - _M_g.min());\n+\t  else if (is_integral<_Engine_result_type>::value\n+\t\t   && !is_integral<result_type>::value)\n+\t    __return_value = result_type(_M_g() - _M_g.min())\n+\t      / result_type(_M_g.max() - _M_g.min() + result_type(1));\n+\t  else\n+\t    __return_value = (((_M_g() - _M_g.min()) \n+\t\t\t       / (_M_g.max() - _M_g.min()))\n+\t\t\t      * std::numeric_limits<result_type>::max());\n+\t  return __return_value;\n+\t}\n+\n+      private:\n+\t_Engine _M_g;\n+      };\n+\n+    // Specialization for _Engine*.\n+    template<typename _Engine, typename _Distribution>\n+      struct _Adaptor<_Engine*, _Distribution>\n+      {\n+\ttypedef typename _Engine::result_type      _Engine_result_type;\n+\ttypedef typename _Distribution::input_type result_type;\n+\n+      public:\n+\t_Adaptor(_Engine* __g)\n+\t: _M_g(__g) { }\n+\n+\tresult_type\n+\tmin() const\n+\t{\n+\t  result_type __return_value;\n+\t  if (is_integral<_Engine_result_type>::value\n+\t      && is_integral<result_type>::value)\n+\t    __return_value = _M_g->min();\n+\t  else\n+\t    __return_value = result_type(0);\n+\t  return __return_value;\n+\t}\n+\n+\tresult_type\n+\tmax() const\n+\t{\n+\t  result_type __return_value;\n+\t  if (is_integral<_Engine_result_type>::value\n+\t      && is_integral<result_type>::value)\n+\t    __return_value = _M_g->max();\n+\t  else if (!is_integral<result_type>::value)\n+\t    __return_value = result_type(1);\n+\t  else\n+\t    __return_value = std::numeric_limits<result_type>::max() - 1;\n+\t  return __return_value;\n+\t}\n+\n+\tresult_type\n+\toperator()()\n+\t{\n+\t  result_type __return_value;\n+\t  if (is_integral<_Engine_result_type>::value\n+\t      && is_integral<result_type>::value)\n+\t    __return_value = (*_M_g)();\n+\t  else if (!is_integral<_Engine_result_type>::value\n+\t\t   && !is_integral<result_type>::value)\n+\t    __return_value = result_type((*_M_g)() - _M_g->min())\n+\t      / result_type(_M_g->max() - _M_g->min());\n+\t  else if (is_integral<_Engine_result_type>::value\n+\t\t   && !is_integral<result_type>::value)\n+\t    __return_value = result_type((*_M_g)() - _M_g->min())\n+\t      / result_type(_M_g->max() - _M_g->min() + result_type(1));\n+\t  else\n+\t    __return_value = ((((*_M_g)() - _M_g->min()) \n+\t\t\t       / (_M_g->max() - _M_g->min()))\n+\t\t\t      * std::numeric_limits<result_type>::max());\n+\t  return __return_value;\n+\t}\n+\n+      private:\n+\t_Engine* _M_g;\n+      };\n+  } // namespace __detail\n+\n+  /**\n+   * Produces random numbers on a given distribution function using a\n+   * non-uniform random number generation engine.\n+   *\n+   * @todo the engine_value_type needs to be studied more carefully.\n+   */\n+  template<typename _Engine, typename _Dist>\n+    class variate_generator\n+    {\n+      // Concept requirements.\n+      __glibcxx_class_requires(_Engine, _CopyConstructibleConcept)\n+      //  __glibcxx_class_requires(_Engine, _EngineConcept)\n+      //  __glibcxx_class_requires(_Dist, _EngineConcept)\n+\n+    public:\n+      typedef _Engine                                engine_type;\n+      typedef __detail::_Adaptor<_Engine, _Dist>     engine_value_type;\n+      typedef _Dist                                  distribution_type;\n+      typedef typename _Dist::result_type            result_type;\n+\n+      // tr1:5.1.1 table 5.1 requirement\n+      typedef typename __gnu_cxx::__enable_if<\n+\tis_arithmetic<result_type>::value, result_type>::__type _IsValidType;\n+\n+      /**\n+       * Constructs a variate generator with the uniform random number\n+       * generator @p __eng for the random distribution @p __dist.\n+       *\n+       * @throws Any exceptions which may thrown by the copy constructors of\n+       * the @p _Engine or @p _Dist objects.\n+       */\n+      variate_generator(engine_type __eng, distribution_type __dist)\n+      : _M_engine(__eng), _M_dist(__dist) { }\n+\n+      /**\n+       * Gets the next generated value on the distribution.\n+       */\n+      result_type\n+      operator()()\n+      { return _M_dist(_M_engine); }\n+\n+      /**\n+       * WTF?\n+       */\n+      template<typename _Tp>\n+        result_type\n+        operator()(_Tp __value)\n+        { return _M_dist(_M_engine, __value); }\n+\n+      /**\n+       * Gets a reference to the underlying uniform random number generator\n+       * object.\n+       */\n+      engine_value_type&\n+      engine()\n+      { return _M_engine; }\n+\n+      /**\n+       * Gets a const reference to the underlying uniform random number\n+       * generator object.\n+       */\n+      const engine_value_type&\n+      engine() const\n+      { return _M_engine; }\n+\n+      /**\n+       * Gets a reference to the underlying random distribution.\n+       */\n+      distribution_type&\n+      distribution()\n+      { return _M_dist; }\n+\n+      /**\n+       * Gets a const reference to the underlying random distribution.\n+       */\n+      const distribution_type&\n+      distribution() const\n+      { return _M_dist; }\n+\n+      /**\n+       * Gets the closed lower bound of the distribution interval.\n+       */\n+      result_type\n+      min() const\n+      { return this->distribution().min(); }\n+\n+      /**\n+       * Gets the closed upper bound of the distribution interval.\n+       */\n+      result_type\n+      max() const\n+      { return this->distribution().max(); }\n+\n+    private:\n+      engine_value_type _M_engine;\n+      distribution_type _M_dist;\n+    };\n+\n+\n+  /**\n+   * @addtogroup tr1_random_generators Random Number Generators\n+   * @ingroup tr1_random\n+   *\n+   * These classes define objects which provide random or pseudorandom\n+   * numbers, either from a discrete or a continuous interval.  The\n+   * random number generator supplied as a part of this library are\n+   * all uniform random number generators which provide a sequence of\n+   * random number uniformly distributed over their range.\n+   *\n+   * A number generator is a function object with an operator() that\n+   * takes zero arguments and returns a number.\n+   *\n+   * A compliant random number generator must satisfy the following\n+   * requirements.  <table border=1 cellpadding=10 cellspacing=0>\n+   * <caption align=top>Random Number Generator Requirements</caption>\n+   * <tr><td>To be documented.</td></tr> </table>\n+   * \n+   * @{\n+   */\n+\n+  /**\n+   * @brief A model of a linear congruential random number generator.\n+   *\n+   * A random number generator that produces pseudorandom numbers using the\n+   * linear function @f$x_{i+1}\\leftarrow(ax_{i} + c) \\bmod m @f$.\n+   *\n+   * The template parameter @p _UIntType must be an unsigned integral type\n+   * large enough to store values up to (__m-1). If the template parameter\n+   * @p __m is 0, the modulus @p __m used is\n+   * std::numeric_limits<_UIntType>::max() plus 1. Otherwise, the template\n+   * parameters @p __a and @p __c must be less than @p __m.\n+   *\n+   * The size of the state is @f$ 1 @f$.\n+   */\n+  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    class linear_congruential\n+    {\n+      __glibcxx_class_requires(_UIntType, _UnsignedIntegerConcept)\n+      //  __glibcpp_class_requires(__a < __m && __c < __m)\n+\n+    public:\n+      /** The type of the generated random value. */\n+      typedef _UIntType result_type;\n+\n+      /** The multiplier. */\n+      static const _UIntType multiplier = __a;\n+      /** An increment. */\n+      static const _UIntType increment = __c;\n+      /** The modulus. */\n+      static const _UIntType modulus = __m;\n+\n+      /**\n+       * Constructs a %linear_congruential random number generator engine with\n+       * seed @p __s.  The default seed value is 1.\n+       *\n+       * @param __s The initial seed value.\n+       */\n+      explicit\n+      linear_congruential(unsigned long __x0 = 1)\n+      { this->seed(__x0); }\n+\n+      /**\n+       * Constructs a %linear_congruential random number generator engine\n+       * seeded from the generator function @p __g.\n+       *\n+       * @param __g The seed generator function.\n+       */\n+      template<class _Gen>\n+        linear_congruential(_Gen& __g)\n+        { this->seed(__g); }\n+\n+      /**\n+       * Reseeds the %linear_congruential random number generator engine\n+       * sequence to the seed @g __s.\n+       *\n+       * @param __s The new seed.\n+       */\n+      void\n+      seed(unsigned long __s = 1);\n+\n+      /**\n+       * Reseeds the %linear_congruential random number generator engine\n+       * sequence using values from the generator function @p __g.\n+       *\n+       * @param __g the seed generator function.\n+       */\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g)\n+        { seed(__g, typename is_fundamental<_Gen>::type()); }\n+\n+      /**\n+       * Gets the smallest possible value in the output range.\n+       *\n+       * The minimum depends on the @p __c parameter: if it is zero, the\n+       * minimum generated must be > 0, otherwise 0 is allowed.\n+       */\n+      result_type\n+      min() const\n+      { return (__detail::__mod<_UIntType, 1, 0, __m>(__c) == 0) ? 1 : 0; }\n+\n+      /**\n+       * Gets the largest possible value in the output range.\n+       */\n+      result_type\n+      max() const\n+      { return __m - 1; }\n+\n+      /**\n+       * Gets the next random number in the sequence.\n+       */\n+      result_type\n+      operator()();\n+\n+      /**\n+       * Compares two linear congruential random number generator\n+       * objects of the same type for equality.\n+       *  \n+       * @param __lhs A linear congruential random number generator object.\n+       * @param __rhs Another linear congruential random number generator obj.\n+       *\n+       * @returns true if the two objects are equal, false otherwise.\n+       */\n+      friend bool\n+      operator==(const linear_congruential& __lhs,\n+\t\t const linear_congruential& __rhs)\n+      { return __lhs._M_x == __rhs._M_x; }\n+\n+      /**\n+       * Compares two linear congruential random number generator\n+       * objects of the same type for inequality.\n+       *\n+       * @param __lhs A linear congruential random number generator object.\n+       * @param __rhs Another linear congruential random number generator obj.\n+       *\n+       * @returns true if the two objects are not equal, false otherwise.\n+       */\n+      friend bool\n+      operator!=(const linear_congruential& __lhs,\n+\t\t const linear_congruential& __rhs)\n+      { return !(__lhs == __rhs); }\n+\n+      /**\n+       * Writes the textual representation of the state x(i) of x to @p __os.\n+       *\n+       * @param __os  The output stream.\n+       * @param __lcr A % linear_congruential random number generator.\n+       * @returns __os.\n+       */\n+      template<class _UIntType1, _UIntType1 __a1, _UIntType1 __c1,\n+\t       _UIntType1 __m1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const linear_congruential<_UIntType1, __a1, __c1,\n+\t\t   __m1>& __lcr);\n+\n+      /**\n+       * Sets the state of the engine by reading its textual\n+       * representation from @p __is.\n+       *\n+       * The textual representation must have been previously written using an\n+       * output stream whose imbued locale and whose type's template\n+       * specialization arguments _CharT and _Traits were the same as those of\n+       * @p __is.\n+       *\n+       * @param __is  The input stream.\n+       * @param __lcr A % linear_congruential random number generator.\n+       * @returns __is.\n+       */\n+      template<class _UIntType1, _UIntType1 __a1, _UIntType1 __c1,\n+\t       _UIntType1 __m1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   linear_congruential<_UIntType1, __a1, __c1, __m1>& __lcr);\n+\n+    private:\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g, true_type)\n+        { return seed(static_cast<unsigned long>(__g)); }\n+\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g, false_type);\n+\n+      _UIntType _M_x;\n+    };\n+\n+  /**\n+   * The classic Minimum Standard rand0 of Lewis, Goodman, and Miller.\n+   */\n+  typedef linear_congruential<unsigned long, 16807, 0, 2147483647> minstd_rand0;\n+\n+  /**\n+   * An alternative LCR (Lehmer Generator function) .\n+   */\n+  typedef linear_congruential<unsigned long, 48271, 0, 2147483647> minstd_rand;\n+\n+\n+  /**\n+   * A generalized feedback shift register discrete random number generator.\n+   *\n+   * This algorithm avoids multiplication and division and is designed to be\n+   * friendly to a pipelined architecture.  If the parameters are chosen\n+   * correctly, this generator will produce numbers with a very long period and\n+   * fairly good apparent entropy, although still not cryptographically strong.\n+   *\n+   * The best way to use this generator is with the predefined mt19937 class.\n+   *\n+   * This algorithm was originally invented by Makoto Matsumoto and\n+   * Takuji Nishimura.\n+   *\n+   * @var word_size   The number of bits in each element of the state vector.\n+   * @var state_size  The degree of recursion.\n+   * @var shift_size  The period parameter.\n+   * @var mask_bits   The separation point bit index.\n+   * @var parameter_a The last row of the twist matrix.\n+   * @var output_u    The first right-shift tempering matrix parameter.\n+   * @var output_s    The first left-shift tempering matrix parameter.\n+   * @var output_b    The first left-shift tempering matrix mask.\n+   * @var output_t    The second left-shift tempering matrix parameter.\n+   * @var output_c    The second left-shift tempering matrix mask.\n+   * @var output_l    The second right-shift tempering matrix parameter.\n+   */\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n+\t   _UIntType __c, int __l>\n+    class mersenne_twister\n+    {\n+      __glibcxx_class_requires(_UIntType, _UnsignedIntegerConcept)\n+\n+    public:\n+      // types\n+      typedef _UIntType result_type;\n+\n+      // parameter values\n+      static const int       word_size   = __w;\n+      static const int       state_size  = __n;\n+      static const int       shift_size  = __m;\n+      static const int       mask_bits   = __r;\n+      static const _UIntType parameter_a = __a;\n+      static const int       output_u    = __u;\n+      static const int       output_s    = __s;\n+      static const _UIntType output_b    = __b;\n+      static const int       output_t    = __t;\n+      static const _UIntType output_c    = __c;\n+      static const int       output_l    = __l;\n+\n+      // constructors and member function\n+      mersenne_twister()\n+      { seed(); }\n+\n+      explicit\n+      mersenne_twister(unsigned long __value)\n+      { seed(__value); }\n+\n+      template<class _Gen>\n+        mersenne_twister(_Gen& __g)\n+        { seed(__g); }\n+\n+      void\n+      seed()\n+      { seed(5489UL); }\n+\n+      void\n+      seed(unsigned long __value);\n+\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g)\n+        { seed(__g, typename is_fundamental<_Gen>::type()); }\n+\n+      result_type\n+      min() const\n+      { return 0; };\n+\n+      result_type\n+      max() const\n+      { return __detail::_Shift<_UIntType, __w>::__value - 1; }\n+\n+      result_type\n+      operator()();\n+\n+      /**\n+       * Compares two % mersenne_twister random number generator objects of\n+       * the same type for equality.\n+       *\n+       * @param __lhs A % mersenne_twister random number generator object.\n+       * @param __rhs Another % mersenne_twister random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are equal, false otherwise.\n+       */\n+      friend bool\n+      operator==(const mersenne_twister& __lhs,\n+\t\t const mersenne_twister& __rhs)\n+      { return std::equal(__lhs._M_x, __lhs._M_x + state_size, __rhs._M_x); }\n+\n+      /**\n+       * Compares two % mersenne_twister random number generator objects of\n+       * the same type for inequality.\n+       *\n+       * @param __lhs A % mersenne_twister random number generator object.\n+       * @param __rhs Another % mersenne_twister random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are not equal, false otherwise.\n+       */\n+      friend bool\n+      operator!=(const mersenne_twister& __lhs,\n+\t\t const mersenne_twister& __rhs)\n+      { return !(__lhs == __rhs); }\n+\n+      /**\n+       * Inserts the current state of a % mersenne_twister random number\n+       * generator engine @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A % mersenne_twister random number generator engine.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<class _UIntType1, int __w1, int __n1, int __m1, int __r1,\n+\t       _UIntType1 __a1, int __u1, int __s1, _UIntType1 __b1, int __t1,\n+\t       _UIntType1 __c1, int __l1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const mersenne_twister<_UIntType1, __w1, __n1, __m1, __r1,\n+\t\t   __a1, __u1, __s1, __b1, __t1, __c1, __l1>& __x);\n+\n+      /**\n+       * Extracts the current state of a % mersenne_twister random number\n+       * generator engine @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A % mersenne_twister random number generator engine.\n+       *\n+       * @returns The input stream with the state of @p __x extracted or in\n+       * an error state.\n+       */\n+      template<class _UIntType1, int __w1, int __n1, int __m1, int __r1,\n+\t       _UIntType1 __a1, int __u1, int __s1, _UIntType1 __b1, int __t1,\n+\t       _UIntType1 __c1, int __l1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   mersenne_twister<_UIntType1, __w1, __n1, __m1, __r1,\n+\t\t   __a1, __u1, __s1, __b1, __t1, __c1, __l1>& __x);\n+\n+    private:\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g, true_type)\n+        { return seed(static_cast<unsigned long>(__g)); }\n+\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g, false_type);\n+\n+      _UIntType _M_x[state_size];\n+      int       _M_p;\n+    };\n+\n+  /**\n+   * The classic Mersenne Twister.\n+   *\n+   * Reference:\n+   * M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-Dimensionally\n+   * Equidistributed Uniform Pseudo-Random Number Generator\", ACM Transactions\n+   * on Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3-30.\n+   */\n+  typedef mersenne_twister<\n+    unsigned long, 32, 624, 397, 31,\n+    0x9908b0dful, 11, 7,\n+    0x9d2c5680ul, 15,\n+    0xefc60000ul, 18\n+    > mt19937;\n+\n+\n+  /**\n+   * @brief The Marsaglia-Zaman generator.\n+   * \n+   * This is a model of a Generalized Fibonacci discrete random number\n+   * generator, sometimes referred to as the SWC generator.\n+   *\n+   * A discrete random number generator that produces pseudorandom\n+   * numbers using @f$x_{i}\\leftarrow(x_{i - s} - x_{i - r} -\n+   * carry_{i-1}) \\bmod m @f$.\n+   *\n+   * The size of the state is @f$ r @f$\n+   * and the maximum period of the generator is @f$ m^r - m^s -1 @f$.\n+   *\n+   * N1688[4.13] says \"the template parameter _IntType shall denote an integral\n+   * type large enough to store values up to m.\"\n+   *\n+   * @var _M_x     The state of the generator.  This is a ring buffer.\n+   * @var _M_carry The carry.\n+   * @var _M_p     Current index of x(i - r).\n+   */\n+  template<typename _IntType, _IntType __m, int __s, int __r>\n+    class subtract_with_carry\n+    {\n+      __glibcxx_class_requires(_IntType, _IntegerConcept)\n+\n+    public:\n+      /** The type of the generated random value. */\n+      typedef _IntType result_type;\n+      \n+      // parameter values\n+      static const _IntType modulus   = __m;\n+      static const int      long_lag  = __r;\n+      static const int      short_lag = __s;\n+\n+      /**\n+       * Constructs a default-initialized % subtract_with_carry random number\n+       * generator.\n+       */\n+      subtract_with_carry()\n+      { this->seed(); }\n+\n+      /**\n+       * Constructs an explicitly seeded % subtract_with_carry random number\n+       * generator.\n+       */\n+      explicit\n+      subtract_with_carry(unsigned long __value)\n+      { this->seed(__value); }\n+\n+      /**\n+       * Constructs a %subtract_with_carry random number generator engine\n+       * seeded from the generator function @p __g.\n+       *\n+       * @param __g The seed generator function.\n+       */\n+      template<class _Gen>\n+        subtract_with_carry(_Gen& __g)\n+        { this->seed(__g); }\n+\n+      /**\n+       * Seeds the initial state @f$ x_0 @f$ of the random number generator.\n+       *\n+       * N1688[4.19] modifies this as follows.  If @p __value == 0,\n+       * sets value to 19780503.  In any case, with a linear\n+       * congruential generator lcg(i) having parameters @f$ m_{lcg} =\n+       * 2147483563, a_{lcg} = 40014, c_{lcg} = 0, and lcg(0) = value\n+       * @f$, sets @f$ x_{-r} \\dots x_{-1} @f$ to @f$ lcg(1) \\bmod m\n+       * \\dots lcg(r) \\bmod m @f$ respectively.  If @f$ x_{-1} = 0 @f$\n+       * set carry to 1, otherwise sets carry to 0.\n+       */\n+      void\n+      seed(unsigned long __value = 19780503);\n+\n+      /**\n+       * Seeds the initial state @f$ x_0 @f$ of the % subtract_with_carry\n+       * random number generator.\n+       */\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g)\n+        { seed(__g, typename is_fundamental<_Gen>::type()); }\n+\n+      /**\n+       * Gets the inclusive minimum value of the range of random integers\n+       * returned by this generator.\n+       */\n+      result_type\n+      min() const\n+      { return 0; }\n+\n+      /**\n+       * Gets the inclusive maximum value of the range of random integers\n+       * returned by this generator.\n+       */\n+      result_type\n+      max() const\n+      { return this->modulus - 1; }\n+\n+      /**\n+       * Gets the next random number in the sequence.\n+       */\n+      result_type\n+      operator()();\n+\n+      /**\n+       * Compares two % subtract_with_carry random number generator objects of\n+       * the same type for equality.\n+       *\n+       * @param __lhs A % subtract_with_carry random number generator object.\n+       * @param __rhs Another % subtract_with_carry random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are equal, false otherwise.\n+       */\n+      friend bool\n+      operator==(const subtract_with_carry& __lhs,\n+\t\t const subtract_with_carry& __rhs)\n+      { return std::equal(__lhs._M_x, __lhs._M_x + long_lag, __rhs._M_x); }\n+\n+      /**\n+       * Compares two % subtract_with_carry random number generator objects of\n+       * the same type for inequality.\n+       *\n+       * @param __lhs A % subtract_with_carry random number generator object.\n+       * @param __rhs Another % subtract_with_carry random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are not equal, false otherwise.\n+       */\n+      friend bool\n+      operator!=(const subtract_with_carry& __lhs,\n+\t\t const subtract_with_carry& __rhs)\n+      { return !(__lhs == __rhs); }\n+\n+      /**\n+       * Inserts the current state of a % subtract_with_carry random number\n+       * generator engine @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A % subtract_with_carry random number generator engine.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _IntType1, _IntType1 __m1, int __s1, int __r1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const subtract_with_carry<_IntType1, __m1, __s1,\n+\t\t   __r1>& __x);\n+\n+      /**\n+       * Extracts the current state of a % subtract_with_carry random number\n+       * generator engine @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A % subtract_with_carry random number generator engine.\n+       *\n+       * @returns The input stream with the state of @p __x extracted or in\n+       * an error state.\n+       */\n+      template<typename _IntType1, _IntType1 __m1, int __s1, int __r1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   subtract_with_carry<_IntType1, __m1, __s1, __r1>& __x);\n+\n+    private:\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g, true_type)\n+        { return seed(static_cast<unsigned long>(__g)); }\n+\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g, false_type);\n+\n+      typedef typename __gnu_cxx::__add_unsigned<_IntType>::__type _UIntType;\n+\n+      _UIntType  _M_x[long_lag];\n+      _UIntType  _M_carry;\n+      int        _M_p;\n+    };\n+\n+\n+  /**\n+   * @brief The Marsaglia-Zaman generator (floats version).\n+   *\n+   * @var _M_x     The state of the generator.  This is a ring buffer.\n+   * @var _M_carry The carry.\n+   * @var _M_p     Current index of x(i - r).\n+   * @var _M_npows Precomputed negative powers of 2.   \n+   */\n+  template<typename _RealType, int __w, int __s, int __r>\n+    class subtract_with_carry_01\n+    {\n+    public:\n+      /** The type of the generated random value. */\n+      typedef _RealType result_type;\n+      \n+      // parameter values\n+      static const int      word_size = __w;\n+      static const int      long_lag  = __r;\n+      static const int      short_lag = __s;\n+\n+      /**\n+       * Constructs a default-initialized % subtract_with_carry_01 random\n+       * number generator.\n+       */\n+      subtract_with_carry_01()\n+      {\n+\tthis->seed();\n+\t_M_initialize_npows();\n+      }\n+\n+      /**\n+       * Constructs an explicitly seeded % subtract_with_carry_01 random number\n+       * generator.\n+       */\n+      explicit\n+      subtract_with_carry_01(unsigned long __value)\n+      {\n+\tthis->seed(__value);\n+\t_M_initialize_npows();\n+      }\n+\n+      /**\n+       * Constructs a % subtract_with_carry_01 random number generator engine\n+       * seeded from the generator function @p __g.\n+       *\n+       * @param __g The seed generator function.\n+       */\n+      template<class _Gen>\n+        subtract_with_carry_01(_Gen& __g)\n+        {\n+\t  this->seed(__g);\n+\t  _M_initialize_npows();\t  \n+\t}\n+\n+      /**\n+       * Seeds the initial state @f$ x_0 @f$ of the random number generator.\n+       */\n+      void\n+      seed(unsigned long __value = 19780503);\n+\n+      /**\n+       * Seeds the initial state @f$ x_0 @f$ of the % subtract_with_carry_01\n+       * random number generator.\n+       */\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g)\n+        { seed(__g, typename is_fundamental<_Gen>::type()); }\n+\n+      /**\n+       * Gets the minimum value of the range of random floats\n+       * returned by this generator.\n+       */\n+      result_type\n+      min() const\n+      { return 0.0; }\n+\n+      /**\n+       * Gets the maximum value of the range of random floats\n+       * returned by this generator.\n+       */\n+      result_type\n+      max() const\n+      { return 1.0; }\n+\n+      /**\n+       * Gets the next random number in the sequence.\n+       */\n+      result_type\n+      operator()();\n+\n+      /**\n+       * Compares two % subtract_with_carry_01 random number generator objects\n+       * of the same type for equality.\n+       *\n+       * @param __lhs A % subtract_with_carry_01 random number\n+       *              generator object.\n+       * @param __rhs Another % subtract_with_carry_01 random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are equal, false otherwise.\n+       */\n+      friend bool\n+      operator==(const subtract_with_carry_01& __lhs,\n+\t\t const subtract_with_carry_01& __rhs)\n+      {\n+\tfor (int __i = 0; __i < long_lag; ++__i)\n+\t  if (!std::equal(__lhs._M_x[__i], __lhs._M_x[__i] + __n,\n+\t\t\t  __rhs._M_x[__i]))\n+\t    return false;\n+\treturn true;\n+      }\n+\n+      /**\n+       * Compares two % subtract_with_carry_01 random number generator objects\n+       * of the same type for inequality.\n+       *\n+       * @param __lhs A % subtract_with_carry_01 random number\n+       *              generator object.\n+       *\n+       * @param __rhs Another % subtract_with_carry_01 random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are not equal, false otherwise.\n+       */\n+      friend bool\n+      operator!=(const subtract_with_carry_01& __lhs,\n+\t\t const subtract_with_carry_01& __rhs)\n+      { return !(__lhs == __rhs); }\n+\n+      /**\n+       * Inserts the current state of a % subtract_with_carry_01 random number\n+       * generator engine @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A % subtract_with_carry_01 random number generator engine.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, int __w1, int __s1, int __r1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const subtract_with_carry_01<_RealType1, __w1, __s1,\n+\t\t   __r1>& __x);\n+\n+      /**\n+       * Extracts the current state of a % subtract_with_carry_01 random number\n+       * generator engine @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A % subtract_with_carry_01 random number generator engine.\n+       *\n+       * @returns The input stream with the state of @p __x extracted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, int __w1, int __s1, int __r1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   subtract_with_carry_01<_RealType1, __w1, __s1, __r1>& __x);\n+\n+    private:\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g, true_type)\n+        { return seed(static_cast<unsigned long>(__g)); }\n+\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g, false_type);\n+\n+      void\n+      _M_initialize_npows();\n+\n+      static const int __n = (__w + 31) / 32;\n+\n+      typedef __detail::_UInt32Type _UInt32Type;\n+      _UInt32Type  _M_x[long_lag][__n];\n+      _RealType    _M_npows[__n];\n+      _UInt32Type  _M_carry;\n+      int          _M_p;\n+    };\n+\n+  typedef subtract_with_carry_01<float, 24, 10, 24>   ranlux_base_01;\n+\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 508. Bad parameters for ranlux64_base_01.\n+  typedef subtract_with_carry_01<double, 48, 5, 12> ranlux64_base_01;  \n+\n+\n+  /**\n+   * Produces random numbers from some base engine by discarding blocks of\n+   * data.\n+   *\n+   * 0 <= @p __r <= @p __p\n+   */\n+  template<class _UniformRandomNumberGenerator, int __p, int __r>\n+    class discard_block\n+    {\n+      // __glibcxx_class_requires(typename base_type::result_type,\n+      //                          ArithmeticTypeConcept)\n+\n+    public:\n+      /** The type of the underlying generator engine. */\n+      typedef _UniformRandomNumberGenerator   base_type;\n+      /** The type of the generated random value. */\n+      typedef typename base_type::result_type result_type;\n+\n+      // parameter values\n+      static const int block_size = __p;\n+      static const int used_block = __r;\n+\n+      /**\n+       * Constructs a default %discard_block engine.\n+       *\n+       * The underlying engine is default constructed as well.\n+       */\n+      discard_block()\n+      : _M_n(0) { }\n+\n+      /**\n+       * Copy constructs a %discard_block engine.\n+       *\n+       * Copies an existing base class random number generator.\n+       * @param rng An existing (base class) engine object.\n+       */\n+      explicit\n+      discard_block(const base_type& __rng)\n+      : _M_b(__rng), _M_n(0) { }\n+\n+      /**\n+       * Seed constructs a %discard_block engine.\n+       *\n+       * Constructs the underlying generator engine seeded with @p __s.\n+       * @param __s A seed value for the base class engine.\n+       */\n+      explicit\n+      discard_block(unsigned long __s)\n+      : _M_b(__s), _M_n(0) { }\n+\n+      /**\n+       * Generator construct a %discard_block engine.\n+       *\n+       * @param __g A seed generator function.\n+       */\n+      template<class _Gen>\n+        discard_block(_Gen& __g)\n+\t: _M_b(__g), _M_n(0) { }\n+\n+      /**\n+       * Reseeds the %discard_block object with the default seed for the\n+       * underlying base class generator engine.\n+       */\n+      void seed()\n+      {\n+\t_M_b.seed();\n+\t_M_n = 0;\n+      }\n+\n+      /**\n+       * Reseeds the %discard_block object with the given seed generator\n+       * function.\n+       * @param __g A seed generator function.\n+       */\n+      template<class _Gen>\n+        void seed(_Gen& __g)\n+        {\n+\t  _M_b.seed(__g);\n+\t  _M_n = 0;\n+\t}\n+\n+      /**\n+       * Gets a const reference to the underlying generator engine object.\n+       */\n+      const base_type&\n+      base() const\n+      { return _M_b; }\n+\n+      /**\n+       * Gets the minimum value in the generated random number range.\n+       */\n+      result_type\n+      min() const\n+      { return _M_b.min(); }\n+\n+      /**\n+       * Gets the maximum value in the generated random number range.\n+       */\n+      result_type\n+      max() const\n+      { return _M_b.max(); }\n+\n+      /**\n+       * Gets the next value in the generated random number sequence.\n+       */\n+      result_type\n+      operator()();\n+\n+      /**\n+       * Compares two %discard_block random number generator objects of\n+       * the same type for equality.\n+       *\n+       * @param __lhs A %discard_block random number generator object.\n+       * @param __rhs Another %discard_block random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are equal, false otherwise.\n+       */\n+      friend bool\n+      operator==(const discard_block& __lhs, const discard_block& __rhs)\n+      { return (__lhs._M_b == __rhs._M_b) && (__lhs._M_n == __rhs._M_n); }\n+\n+      /**\n+       * Compares two %discard_block random number generator objects of\n+       * the same type for inequality.\n+       *\n+       * @param __lhs A %discard_block random number generator object.\n+       * @param __rhs Another %discard_block random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are not equal, false otherwise.\n+       */\n+      friend bool\n+      operator!=(const discard_block& __lhs, const discard_block& __rhs)\n+      { return !(__lhs == __rhs); }\n+\n+      /**\n+       * Inserts the current state of a %discard_block random number\n+       * generator engine @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %discard_block random number generator engine.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<class _UniformRandomNumberGenerator1, int __p1, int __r1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const discard_block<_UniformRandomNumberGenerator1,\n+\t\t   __p1, __r1>& __x);\n+\n+      /**\n+       * Extracts the current state of a % subtract_with_carry random number\n+       * generator engine @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %discard_block random number generator engine.\n+       *\n+       * @returns The input stream with the state of @p __x extracted or in\n+       * an error state.\n+       */\n+      template<class _UniformRandomNumberGenerator1, int __p1, int __r1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   discard_block<_UniformRandomNumberGenerator1,\n+\t\t   __p1, __r1>& __x);\n+\n+    private:\n+      base_type _M_b;\n+      int       _M_n;\n+    };\n+\n+\n+  /**\n+   * James's luxury-level-3 integer adaptation of Luescher's generator.\n+   */\n+  typedef discard_block<\n+    subtract_with_carry<unsigned long, (1UL << 24), 10, 24>,\n+      223,\n+      24\n+      > ranlux3;\n+\n+  /**\n+   * James's luxury-level-4 integer adaptation of Luescher's generator.\n+   */\n+  typedef discard_block<\n+    subtract_with_carry<unsigned long, (1UL << 24), 10, 24>,\n+      389,\n+      24\n+      > ranlux4;\n+\n+  typedef discard_block<\n+    subtract_with_carry_01<float, 24, 10, 24>,\n+      223,\n+      24\n+      > ranlux3_01;\n+\n+  typedef discard_block<\n+    subtract_with_carry_01<float, 24, 10, 24>,\n+      389,\n+      24\n+      > ranlux4_01;\n+\n+\n+  /**\n+   * A random number generator adaptor class that combines two random number\n+   * generator engines into a single output sequence.\n+   */\n+  template<class _UniformRandomNumberGenerator1, int __s1,\n+\t   class _UniformRandomNumberGenerator2, int __s2>\n+    class xor_combine\n+    {\n+      // __glibcxx_class_requires(typename _UniformRandomNumberGenerator1::\n+      //                          result_type, ArithmeticTypeConcept)\n+      // __glibcxx_class_requires(typename _UniformRandomNumberGenerator2::\n+      //                          result_type, ArithmeticTypeConcept)\n+\n+    public:\n+      /** The type of the first underlying generator engine. */\n+      typedef _UniformRandomNumberGenerator1   base1_type;\n+      /** The type of the second underlying generator engine. */\n+      typedef _UniformRandomNumberGenerator2   base2_type;\n+\n+    private:\n+      typedef typename base1_type::result_type _Result_type1;\n+      typedef typename base2_type::result_type _Result_type2;\n+\n+    public:\n+      /** The type of the generated random value. */\n+      typedef typename __gnu_cxx::__conditional_type<(sizeof(_Result_type1)\n+\t\t\t\t\t\t      > sizeof(_Result_type2)),\n+\t_Result_type1, _Result_type2>::__type result_type;\n+\n+      // parameter values\n+      static const int shift1 = __s1;\n+      static const int shift2 = __s2;\n+\n+      // constructors and member function\n+      xor_combine()\n+      : _M_b1(), _M_b2()\t\n+      { _M_initialize_max(); }\n+\n+      xor_combine(const base1_type& __rng1, const base2_type& __rng2)\n+      : _M_b1(__rng1), _M_b2(__rng2)\n+      { _M_initialize_max(); }\n+\n+      xor_combine(unsigned long __s)\n+      : _M_b1(__s), _M_b2(__s + 1)\n+      { _M_initialize_max(); }\n+\n+      template<class _Gen>\n+        xor_combine(_Gen& __g)\n+\t: _M_b1(__g), _M_b2(__g)\n+        { _M_initialize_max(); }\n+\n+      void\n+      seed()\n+      {\n+\t_M_b1.seed();\n+\t_M_b2.seed();\n+      }\n+\n+      template<class _Gen>\n+        void\n+        seed(_Gen& __g)\n+        {\n+\t  _M_b1.seed(__g);\n+\t  _M_b2.seed(__g);\n+\t}\n+\n+      const base1_type&\n+      base1() const\n+      { return _M_b1; }\n+\n+      const base2_type&\n+      base2() const\n+      { return _M_b2; }\n+\n+      result_type\n+      min() const\n+      { return 0; }\n+\n+      result_type\n+      max() const\n+      { return _M_max; }\n+\n+      /**\n+       * Gets the next random number in the sequence.\n+       */\n+      // NB: Not exactly the TR1 formula, per N2079 instead.\n+      result_type\n+      operator()()\n+      {\n+\treturn ((result_type(_M_b1() - _M_b1.min()) << shift1)\n+\t\t^ (result_type(_M_b2() - _M_b2.min()) << shift2));\n+      }\n+\n+      /**\n+       * Compares two %xor_combine random number generator objects of\n+       * the same type for equality.\n+       *\n+       * @param __lhs A %xor_combine random number generator object.\n+       * @param __rhs Another %xor_combine random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are equal, false otherwise.\n+       */\n+      friend bool\n+      operator==(const xor_combine& __lhs, const xor_combine& __rhs)\n+      {\n+\treturn (__lhs.base1() == __rhs.base1())\n+\t        && (__lhs.base2() == __rhs.base2());\n+      }\n+\n+      /**\n+       * Compares two %xor_combine random number generator objects of\n+       * the same type for inequality.\n+       *\n+       * @param __lhs A %xor_combine random number generator object.\n+       * @param __rhs Another %xor_combine random number generator\n+       *              object.\n+       *\n+       * @returns true if the two objects are not equal, false otherwise.\n+       */\n+      friend bool\n+      operator!=(const xor_combine& __lhs, const xor_combine& __rhs)\n+      { return !(__lhs == __rhs); }\n+\n+      /**\n+       * Inserts the current state of a %xor_combine random number\n+       * generator engine @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %xor_combine random number generator engine.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<class _UniformRandomNumberGenerator11, int __s11,\n+\t       class _UniformRandomNumberGenerator21, int __s21,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const xor_combine<_UniformRandomNumberGenerator11, __s11,\n+\t\t   _UniformRandomNumberGenerator21, __s21>& __x);\n+\n+      /**\n+       * Extracts the current state of a %xor_combine random number\n+       * generator engine @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %xor_combine random number generator engine.\n+       *\n+       * @returns The input stream with the state of @p __x extracted or in\n+       * an error state.\n+       */\n+      template<class _UniformRandomNumberGenerator11, int __s11,\n+\t       class _UniformRandomNumberGenerator21, int __s21,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   xor_combine<_UniformRandomNumberGenerator11, __s11,\n+\t\t   _UniformRandomNumberGenerator21, __s21>& __x);\n+\n+    private:\n+      void\n+      _M_initialize_max();\n+\n+      result_type\n+      _M_initialize_max_aux(result_type, result_type, int);\n+\n+      base1_type  _M_b1;\n+      base2_type  _M_b2;\n+      result_type _M_max;\n+    };\n+\n+\n+  /**\n+   * A standard interface to a platform-specific non-deterministic\n+   * random number generator (if any are available).\n+   */\n+  class random_device\n+  {\n+  public:\n+    // types\n+    typedef unsigned int result_type;\n+\n+    // constructors, destructors and member functions\n+\n+#ifdef _GLIBCXX_USE_RANDOM_TR1\n+\n+    explicit\n+    random_device(const std::string& __token = \"/dev/urandom\")\n+    {\n+      if ((__token != \"/dev/urandom\" && __token != \"/dev/random\")\n+\t  || !(_M_file = std::fopen(__token.c_str(), \"rb\")))\n+\tstd::__throw_runtime_error(__N(\"random_device::\"\n+\t\t\t\t       \"random_device(const std::string&)\"));\n+    }\n+\n+    ~random_device()\n+    { std::fclose(_M_file); }\n+\n+#else\n+\n+    explicit\n+    random_device(const std::string& __token = \"mt19937\")\n+    : _M_mt(_M_strtoul(__token)) { }\n+\n+  private:\n+    static unsigned long\n+    _M_strtoul(const std::string& __str)\n+    {\n+      unsigned long __ret = 5489UL;\n+      if (__str != \"mt19937\")\n+\t{\n+\t  const char* __nptr = __str.c_str();\n+\t  char* __endptr;\n+\t  __ret = std::strtoul(__nptr, &__endptr, 0);\n+\t  if (*__nptr == '\\0' || *__endptr != '\\0')\n+\t    std::__throw_runtime_error(__N(\"random_device::_M_strtoul\"\n+\t\t\t\t\t   \"(const std::string&)\"));\n+\t}\n+      return __ret;\n+    }\n+\n+  public:\n+\n+#endif\n+\n+    result_type\n+    min() const\n+    { return std::numeric_limits<result_type>::min(); }\n+\n+    result_type\n+    max() const\n+    { return std::numeric_limits<result_type>::max(); }\n+\n+    double\n+    entropy() const\n+    { return 0.0; }\n+\n+    result_type\n+    operator()()\n+    {\n+#ifdef _GLIBCXX_USE_RANDOM_TR1\n+      result_type __ret;\n+      std::fread(reinterpret_cast<void*>(&__ret), sizeof(result_type),\n+\t\t 1, _M_file);\n+      return __ret;\n+#else\n+      return _M_mt();\n+#endif\n+    }\n+\n+  private:\n+    random_device(const random_device&);\n+    void operator=(const random_device&);\n+\n+#ifdef _GLIBCXX_USE_RANDOM_TR1\n+    FILE*        _M_file;\n+#else\n+    mt19937      _M_mt;\n+#endif\n+  };\n+\n+  /* @} */ // group tr1_random_generators\n+\n+  /**\n+   * @addtogroup tr1_random_distributions Random Number Distributions\n+   * @ingroup tr1_random\n+   * @{\n+   */\n+\n+  /**\n+   * @addtogroup tr1_random_distributions_discrete Discrete Distributions\n+   * @ingroup tr1_random_distributions\n+   * @{\n+   */\n+\n+  /**\n+   * @brief Uniform discrete distribution for random numbers.\n+   * A discrete random distribution on the range @f$[min, max]@f$ with equal\n+   * probability throughout the range.\n+   */\n+  template<typename _IntType = int>\n+    class uniform_int\n+    {\n+      __glibcxx_class_requires(_IntType, _IntegerConcept)\n+ \n+    public:\n+      /** The type of the parameters of the distribution. */\n+      typedef _IntType input_type;\n+      /** The type of the range of the distribution. */\n+      typedef _IntType result_type;\n+\n+    public:\n+      /**\n+       * Constructs a uniform distribution object.\n+       */\n+      explicit\n+      uniform_int(_IntType __min = 0, _IntType __max = 9)\n+      : _M_min(__min), _M_max(__max)\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(_M_min <= _M_max);\n+      }\n+\n+      /**\n+       * Gets the inclusive lower bound of the distribution range.\n+       */\n+      result_type\n+      min() const\n+      { return _M_min; }\n+\n+      /**\n+       * Gets the inclusive upper bound of the distribution range.\n+       */\n+      result_type\n+      max() const\n+      { return _M_max; }\n+\n+      /**\n+       * Resets the distribution state.\n+       *\n+       * Does nothing for the uniform integer distribution.\n+       */\n+      void\n+      reset() { }\n+\n+      /**\n+       * Gets a uniformly distributed random number in the range\n+       * @f$(min, max)@f$.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng)\n+        {\n+\t  typedef typename _UniformRandomNumberGenerator::result_type\n+\t    _UResult_type;\n+\t  return _M_call(__urng, _M_min, _M_max,\n+\t\t\t typename is_integral<_UResult_type>::type());\n+\t}\n+\n+      /**\n+       * Gets a uniform random number in the range @f$[0, n)@f$.\n+       *\n+       * This function is aimed at use with std::random_shuffle.\n+       */\n+      template<typename _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng, result_type __n)\n+        {\n+\t  typedef typename _UniformRandomNumberGenerator::result_type\n+\t    _UResult_type;\n+\t  return _M_call(__urng, 0, __n - 1,\n+\t\t\t typename is_integral<_UResult_type>::type());\n+\t}\n+\n+      /**\n+       * Inserts a %uniform_int random number distribution @p __x into the\n+       * output stream @p os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %uniform_int random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _IntType1, typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const uniform_int<_IntType1>& __x);\n+\n+      /**\n+       * Extracts a %uniform_int random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %uniform_int random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _IntType1, typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   uniform_int<_IntType1>& __x);\n+\n+    private:\n+      template<typename _UniformRandomNumberGenerator>\n+        result_type\n+        _M_call(_UniformRandomNumberGenerator& __urng,\n+\t\tresult_type __min, result_type __max, true_type);\n+\n+      template<typename _UniformRandomNumberGenerator>\n+        result_type\n+        _M_call(_UniformRandomNumberGenerator& __urng,\n+\t\tresult_type __min, result_type __max, false_type)\n+        {\n+\t  return result_type((__urng() - __urng.min())\n+\t\t\t     / (__urng.max() - __urng.min())\n+\t\t\t     * (__max - __min + 1)) + __min;\n+\t}\n+\n+      _IntType _M_min;\n+      _IntType _M_max;\n+    };\n+\n+\n+  /**\n+   * @brief A Bernoulli random number distribution.\n+   *\n+   * Generates a sequence of true and false values with likelihood @f$ p @f$\n+   * that true will come up and @f$ (1 - p) @f$ that false will appear.\n+   */\n+  class bernoulli_distribution\n+  {\n+  public:\n+    typedef int  input_type;\n+    typedef bool result_type;\n+\n+  public:\n+    /**\n+     * Constructs a Bernoulli distribution with likelihood @p p.\n+     *\n+     * @param __p  [IN]  The likelihood of a true result being returned.  Must\n+     * be in the interval @f$ [0, 1] @f$.\n+     */\n+    explicit\n+    bernoulli_distribution(double __p = 0.5)\n+    : _M_p(__p)\n+    { \n+      _GLIBCXX_DEBUG_ASSERT((_M_p >= 0.0) && (_M_p <= 1.0));\n+    }\n+\n+    /**\n+     * Gets the @p p parameter of the distribution.\n+     */\n+    double\n+    p() const\n+    { return _M_p; }\n+\n+    /**\n+     * Resets the distribution state.\n+     *\n+     * Does nothing for a Bernoulli distribution.\n+     */\n+    void\n+    reset() { }\n+\n+    /**\n+     * Gets the next value in the Bernoullian sequence.\n+     */\n+    template<class _UniformRandomNumberGenerator>\n+      result_type\n+      operator()(_UniformRandomNumberGenerator& __urng)\n+      {\n+\tif ((__urng() - __urng.min()) < _M_p * (__urng.max() - __urng.min()))\n+\t  return true;\n+\treturn false;\n+      }\n+\n+    /**\n+     * Inserts a %bernoulli_distribution random number distribution\n+     * @p __x into the output stream @p __os.\n+     *\n+     * @param __os An output stream.\n+     * @param __x  A %bernoulli_distribution random number distribution.\n+     *\n+     * @returns The output stream with the state of @p __x inserted or in\n+     * an error state.\n+     */\n+    template<typename _CharT, typename _Traits>\n+      friend std::basic_ostream<_CharT, _Traits>&\n+      operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t const bernoulli_distribution& __x);\n+\n+    /**\n+     * Extracts a %bernoulli_distribution random number distribution\n+     * @p __x from the input stream @p __is.\n+     *\n+     * @param __is An input stream.\n+     * @param __x  A %bernoulli_distribution random number generator engine.\n+     *\n+     * @returns The input stream with @p __x extracted or in an error state.\n+     */\n+    template<typename _CharT, typename _Traits>\n+      friend std::basic_istream<_CharT, _Traits>&\n+      operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t bernoulli_distribution& __x)\n+      { return __is >> __x._M_p; }\n+\n+  private:\n+    double _M_p;\n+  };\n+\n+\n+  /**\n+   * @brief A discrete geometric random number distribution.\n+   *\n+   * The formula for the geometric probability mass function is \n+   * @f$ p(i) = (1 - p)p^{i-1} @f$ where @f$ p @f$ is the parameter of the\n+   * distribution.\n+   */\n+  template<typename _IntType = int, typename _RealType = double>\n+    class geometric_distribution\n+    {\n+    public:\n+      // types\n+      typedef _RealType input_type;\n+      typedef _IntType  result_type;\n+\n+      // constructors and member function\n+      explicit\n+      geometric_distribution(const _RealType& __p = _RealType(0.5))\n+      : _M_p(__p)\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT((_M_p > 0.0) && (_M_p < 1.0));\n+\t_M_initialize();\n+      }\n+\n+      /**\n+       * Gets the distribution parameter @p p.\n+       */\n+      _RealType\n+      p() const\n+      { return _M_p; }\n+\n+      void\n+      reset() { }\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng);\n+\n+      /**\n+       * Inserts a %geometric_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %geometric_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _IntType1, typename _RealType1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const geometric_distribution<_IntType1, _RealType1>& __x);\n+\n+      /**\n+       * Extracts a %geometric_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %geometric_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   geometric_distribution& __x)\n+        {\n+\t  __is >> __x._M_p;\n+\t  __x._M_initialize();\n+\t  return __is;\n+\t}\n+\n+    private:\n+      void\n+      _M_initialize()\n+      { _M_log_p = std::log(_M_p); }\n+\n+      _RealType _M_p;\n+      _RealType _M_log_p;\n+    };\n+\n+\n+  template<typename _RealType>\n+    class normal_distribution;\n+\n+  /**\n+   * @brief A discrete Poisson random number distribution.\n+   *\n+   * The formula for the Poisson probability mass function is\n+   * @f$ p(i) = \\frac{mean^i}{i!} e^{-mean} @f$ where @f$ mean @f$ is the\n+   * parameter of the distribution.\n+   */\n+  template<typename _IntType = int, typename _RealType = double>\n+    class poisson_distribution\n+    {\n+    public:\n+      // types\n+      typedef _RealType input_type;\n+      typedef _IntType  result_type;\n+\n+      // constructors and member function\n+      explicit\n+      poisson_distribution(const _RealType& __mean = _RealType(1))\n+      : _M_mean(__mean), _M_nd()\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(_M_mean > 0.0);\n+\t_M_initialize();\n+      }\n+\n+      /**\n+       * Gets the distribution parameter @p mean.\n+       */\n+      _RealType\n+      mean() const\n+      { return _M_mean; }\n+\n+      void\n+      reset()\n+      { _M_nd.reset(); }\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng);\n+\n+      /**\n+       * Inserts a %poisson_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %poisson_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _IntType1, typename _RealType1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const poisson_distribution<_IntType1, _RealType1>& __x);\n+\n+      /**\n+       * Extracts a %poisson_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %poisson_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _IntType1, typename _RealType1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   poisson_distribution<_IntType1, _RealType1>& __x);\n+\n+    private:\n+      void\n+      _M_initialize();\n+\n+      // NB: Unused when _GLIBCXX_USE_C99_MATH_TR1 is undefined.\n+      normal_distribution<_RealType> _M_nd;\n+\n+      _RealType _M_mean;\n+\n+      // Hosts either log(mean) or the threshold of the simple method.\n+      _RealType _M_lm_thr;\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+      _RealType _M_lfm, _M_sm, _M_d, _M_scx, _M_1cx, _M_c2b, _M_cb;\n+#endif\n+    };\n+\n+\n+  /**\n+   * @brief A discrete binomial random number distribution.\n+   *\n+   * The formula for the binomial probability mass function is \n+   * @f$ p(i) = \\binom{n}{i} p^i (1 - p)^{t - i} @f$ where @f$ t @f$\n+   * and @f$ p @f$ are the parameters of the distribution.\n+   */\n+  template<typename _IntType = int, typename _RealType = double>\n+    class binomial_distribution\n+    {\n+    public:\n+      // types\n+      typedef _RealType input_type;\n+      typedef _IntType  result_type;\n+\n+      // constructors and member function\n+      explicit\n+      binomial_distribution(_IntType __t = 1,\n+\t\t\t    const _RealType& __p = _RealType(0.5))\n+      : _M_t(__t), _M_p(__p), _M_nd()\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT((_M_t >= 0) && (_M_p >= 0.0) && (_M_p <= 1.0));\n+\t_M_initialize();\n+      }\n+\n+      /**\n+       * Gets the distribution @p t parameter.\n+       */\n+      _IntType\n+      t() const\n+      { return _M_t; }\n+      \n+      /**\n+       * Gets the distribution @p p parameter.\n+       */\n+      _RealType\n+      p() const\n+      { return _M_p; }\n+\n+      void\n+      reset()\n+      { _M_nd.reset(); }\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng);\n+\n+      /**\n+       * Inserts a %binomial_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %binomial_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _IntType1, typename _RealType1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const binomial_distribution<_IntType1, _RealType1>& __x);\n+\n+      /**\n+       * Extracts a %binomial_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %binomial_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _IntType1, typename _RealType1,\n+\t       typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   binomial_distribution<_IntType1, _RealType1>& __x);\n+\n+    private:\n+      void\n+      _M_initialize();\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        _M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t);\n+\n+      // NB: Unused when _GLIBCXX_USE_C99_MATH_TR1 is undefined.\n+      normal_distribution<_RealType> _M_nd;\n+\n+      _RealType _M_q;\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+      _RealType _M_d1, _M_d2, _M_s1, _M_s2, _M_c,\n+\t        _M_a1, _M_a123, _M_s, _M_lf, _M_lp1p;\n+#endif\n+      _RealType _M_p;\n+      _IntType  _M_t;\n+\n+      bool      _M_easy;\n+    };\n+\n+  /* @} */ // group tr1_random_distributions_discrete\n+\n+  /**\n+   * @addtogroup tr1_random_distributions_continuous Continuous Distributions\n+   * @ingroup tr1_random_distributions\n+   * @{\n+   */\n+\n+  /**\n+   * @brief Uniform continuous distribution for random numbers.\n+   *\n+   * A continuous random distribution on the range [min, max) with equal\n+   * probability throughout the range.  The URNG should be real-valued and\n+   * deliver number in the range [0, 1).\n+   */\n+  template<typename _RealType = double>\n+    class uniform_real\n+    {\n+    public:\n+      // types\n+      typedef _RealType input_type;\n+      typedef _RealType result_type;\n+\n+    public:\n+      /**\n+       * Constructs a uniform_real object.\n+       *\n+       * @param __min [IN]  The lower bound of the distribution.\n+       * @param __max [IN]  The upper bound of the distribution.\n+       */\n+      explicit\n+      uniform_real(_RealType __min = _RealType(0),\n+\t\t   _RealType __max = _RealType(1))\n+      : _M_min(__min), _M_max(__max)\n+      {\n+\t_GLIBCXX_DEBUG_ASSERT(_M_min <= _M_max);\n+      }\n+\n+      result_type\n+      min() const\n+      { return _M_min; }\n+\n+      result_type\n+      max() const\n+      { return _M_max; }\n+\n+      void\n+      reset() { }\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng)\n+        { return (__urng() * (_M_max - _M_min)) + _M_min; }\n+\n+      /**\n+       * Inserts a %uniform_real random number distribution @p __x into the\n+       * output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %uniform_real random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const uniform_real<_RealType1>& __x);\n+\n+      /**\n+       * Extracts a %uniform_real random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %uniform_real random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   uniform_real<_RealType1>& __x);\n+\n+    private:\n+      _RealType _M_min;\n+      _RealType _M_max;\n+    };\n+\n+\n+  /**\n+   * @brief An exponential continuous distribution for random numbers.\n+   *\n+   * The formula for the exponential probability mass function is \n+   * @f$ p(x) = \\lambda e^{-\\lambda x} @f$.\n+   *\n+   * <table border=1 cellpadding=10 cellspacing=0>\n+   * <caption align=top>Distribution Statistics</caption>\n+   * <tr><td>Mean</td><td>@f$ \\frac{1}{\\lambda} @f$</td></tr>\n+   * <tr><td>Median</td><td>@f$ \\frac{\\ln 2}{\\lambda} @f$</td></tr>\n+   * <tr><td>Mode</td><td>@f$ zero @f$</td></tr>\n+   * <tr><td>Range</td><td>@f$[0, \\infty]@f$</td></tr>\n+   * <tr><td>Standard Deviation</td><td>@f$ \\frac{1}{\\lambda} @f$</td></tr>\n+   * </table>\n+   */\n+  template<typename _RealType = double>\n+    class exponential_distribution\n+    {\n+    public:\n+      // types\n+      typedef _RealType input_type;\n+      typedef _RealType result_type;\n+\n+    public:\n+      /**\n+       * Constructs an exponential distribution with inverse scale parameter\n+       * @f$ \\lambda @f$.\n+       */\n+      explicit\n+      exponential_distribution(const result_type& __lambda = result_type(1))\n+      : _M_lambda(__lambda)\n+      { \n+\t_GLIBCXX_DEBUG_ASSERT(_M_lambda > 0);\n+      }\n+\n+      /**\n+       * Gets the inverse scale parameter of the distribution.\n+       */\n+      _RealType\n+      lambda() const\n+      { return _M_lambda; }\n+\n+      /**\n+       * Resets the distribution.\n+       *\n+       * Has no effect on exponential distributions.\n+       */\n+      void\n+      reset() { }\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng)\n+        { return -std::log(__urng()) / _M_lambda; }\n+\n+      /**\n+       * Inserts a %exponential_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %exponential_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const exponential_distribution<_RealType1>& __x);\n+\n+      /**\n+       * Extracts a %exponential_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x A %exponential_distribution random number\n+       *            generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   exponential_distribution& __x)\n+        { return __is >> __x._M_lambda; }\n+\n+    private:\n+      result_type _M_lambda;\n+    };\n+\n+\n+  /**\n+   * @brief A normal continuous distribution for random numbers.\n+   *\n+   * The formula for the normal probability mass function is \n+   * @f$ p(x) = \\frac{1}{\\sigma \\sqrt{2 \\pi}} \n+   *            e^{- \\frac{{x - mean}^ {2}}{2 \\sigma ^ {2}} } @f$.\n+   */\n+  template<typename _RealType = double>\n+    class normal_distribution\n+    {\n+    public:\n+      // types\n+      typedef _RealType input_type;\n+      typedef _RealType result_type;\n+\n+    public:\n+      /**\n+       * Constructs a normal distribution with parameters @f$ mean @f$ and\n+       * @f$ \\sigma @f$.\n+       */\n+      explicit\n+      normal_distribution(const result_type& __mean = result_type(0),\n+\t\t\t  const result_type& __sigma = result_type(1))\n+      : _M_mean(__mean), _M_sigma(__sigma), _M_saved_available(false)\n+      { \n+\t_GLIBCXX_DEBUG_ASSERT(_M_sigma > 0);\n+      }\n+\n+      /**\n+       * Gets the mean of the distribution.\n+       */\n+      _RealType\n+      mean() const\n+      { return _M_mean; }\n+\n+      /**\n+       * Gets the @f$ \\sigma @f$ of the distribution.\n+       */\n+      _RealType\n+      sigma() const\n+      { return _M_sigma; }\n+\n+      /**\n+       * Resets the distribution.\n+       */\n+      void\n+      reset()\n+      { _M_saved_available = false; }\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng);\n+\n+      /**\n+       * Inserts a %normal_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %normal_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const normal_distribution<_RealType1>& __x);\n+\n+      /**\n+       * Extracts a %normal_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %normal_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   normal_distribution<_RealType1>& __x);\n+\n+    private:\n+      result_type _M_mean;\n+      result_type _M_sigma;\n+      result_type _M_saved;\n+      bool        _M_saved_available;     \n+    };\n+\n+\n+  /**\n+   * @brief A gamma continuous distribution for random numbers.\n+   *\n+   * The formula for the gamma probability mass function is \n+   * @f$ p(x) = \\frac{1}{\\Gamma(\\alpha)} x^{\\alpha - 1} e^{-x} @f$.\n+   */\n+  template<typename _RealType = double>\n+    class gamma_distribution\n+    {\n+    public:\n+      // types\n+      typedef _RealType input_type;\n+      typedef _RealType result_type;\n+\n+    public:\n+      /**\n+       * Constructs a gamma distribution with parameters @f$ \\alpha @f$.\n+       */\n+      explicit\n+      gamma_distribution(const result_type& __alpha_val = result_type(1))\n+      : _M_alpha(__alpha_val)\n+      { \n+\t_GLIBCXX_DEBUG_ASSERT(_M_alpha > 0);\n+\t_M_initialize();\n+      }\n+\n+      /**\n+       * Gets the @f$ \\alpha @f$ of the distribution.\n+       */\n+      _RealType\n+      alpha() const\n+      { return _M_alpha; }\n+\n+      /**\n+       * Resets the distribution.\n+       */\n+      void\n+      reset() { }\n+\n+      template<class _UniformRandomNumberGenerator>\n+        result_type\n+        operator()(_UniformRandomNumberGenerator& __urng);\n+\n+      /**\n+       * Inserts a %gamma_distribution random number distribution\n+       * @p __x into the output stream @p __os.\n+       *\n+       * @param __os An output stream.\n+       * @param __x  A %gamma_distribution random number distribution.\n+       *\n+       * @returns The output stream with the state of @p __x inserted or in\n+       * an error state.\n+       */\n+      template<typename _RealType1, typename _CharT, typename _Traits>\n+        friend std::basic_ostream<_CharT, _Traits>&\n+        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\t   const gamma_distribution<_RealType1>& __x);\n+\n+      /**\n+       * Extracts a %gamma_distribution random number distribution\n+       * @p __x from the input stream @p __is.\n+       *\n+       * @param __is An input stream.\n+       * @param __x  A %gamma_distribution random number generator engine.\n+       *\n+       * @returns The input stream with @p __x extracted or in an error state.\n+       */\n+      template<typename _CharT, typename _Traits>\n+        friend std::basic_istream<_CharT, _Traits>&\n+        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t\t   gamma_distribution& __x)\n+        {\n+\t  __is >> __x._M_alpha;\n+\t  __x._M_initialize();\n+\t  return __is;\n+\t}\n+\n+    private:\n+      void\n+      _M_initialize();\n+\n+      result_type _M_alpha;\n+\n+      // Hosts either lambda of GB or d of modified Vaduva's.\n+      result_type _M_l_d;\n+    };\n+\n+  /* @} */ // group tr1_random_distributions_continuous\n+  /* @} */ // group tr1_random_distributions\n+  /* @} */ // group tr1_random\n+\n+}\n+}\n+\n+#include <tr1/random.tcc>\n+\n+#endif // _GLIBCXX_TR1_RANDOM_H"}, {"sha": "ec06ae31a6c766884d1b326879e14885cfecb3fe", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "added", "additions": 1583, "deletions": 0, "changes": 1583, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,1583 @@\n+// random number generation (out of line) -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file tr1/random.tcc\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+namespace std\n+{\n+namespace tr1\n+{\n+\n+  /*\n+   * (Further) implementation-space details.\n+   */\n+  namespace __detail\n+  {\n+    // General case for x = (ax + c) mod m -- use Schrage's algorithm to avoid\n+    // integer overflow.\n+    //\n+    // Because a and c are compile-time integral constants the compiler kindly\n+    // elides any unreachable paths.\n+    //\n+    // Preconditions:  a > 0, m > 0.\n+    //\n+    template<typename _Tp, _Tp __a, _Tp __c, _Tp __m, bool>\n+      struct _Mod\n+      {\n+\tstatic _Tp\n+\t__calc(_Tp __x)\n+\t{\n+\t  if (__a == 1)\n+\t    __x %= __m;\n+\t  else\n+\t    {\n+\t      static const _Tp __q = __m / __a;\n+\t      static const _Tp __r = __m % __a;\n+\t      \n+\t      _Tp __t1 = __a * (__x % __q);\n+\t      _Tp __t2 = __r * (__x / __q);\n+\t      if (__t1 >= __t2)\n+\t\t__x = __t1 - __t2;\n+\t      else\n+\t\t__x = __m - __t2 + __t1;\n+\t    }\n+\n+\t  if (__c != 0)\n+\t    {\n+\t      const _Tp __d = __m - __x;\n+\t      if (__d > __c)\n+\t\t__x += __c;\n+\t      else\n+\t\t__x = __c - __d;\n+\t    }\n+\t  return __x;\n+\t}\n+      };\n+\n+    // Special case for m == 0 -- use unsigned integer overflow as modulo\n+    // operator.\n+    template<typename _Tp, _Tp __a, _Tp __c, _Tp __m>\n+      struct _Mod<_Tp, __a, __c, __m, true>\n+      {\n+\tstatic _Tp\n+\t__calc(_Tp __x)\n+\t{ return __a * __x + __c; }\n+      };\n+  } // namespace __detail\n+\n+  /**\n+   * Seeds the LCR with integral value @p __x0, adjusted so that the \n+   * ring identity is never a member of the convergence set.\n+   */\n+  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    void\n+    linear_congruential<_UIntType, __a, __c, __m>::\n+    seed(unsigned long __x0)\n+    {\n+      if ((__detail::__mod<_UIntType, 1, 0, __m>(__c) == 0)\n+\t  && (__detail::__mod<_UIntType, 1, 0, __m>(__x0) == 0))\n+\t_M_x = __detail::__mod<_UIntType, 1, 0, __m>(1);\n+      else\n+\t_M_x = __detail::__mod<_UIntType, 1, 0, __m>(__x0);\n+    }\n+\n+  /**\n+   * Seeds the LCR engine with a value generated by @p __g.\n+   */\n+  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    template<class _Gen>\n+      void\n+      linear_congruential<_UIntType, __a, __c, __m>::\n+      seed(_Gen& __g, false_type)\n+      {\n+\t_UIntType __x0 = __g();\n+\tif ((__detail::__mod<_UIntType, 1, 0, __m>(__c) == 0)\n+\t    && (__detail::__mod<_UIntType, 1, 0, __m>(__x0) == 0))\n+\t  _M_x = __detail::__mod<_UIntType, 1, 0, __m>(1);\n+\telse\n+\t  _M_x = __detail::__mod<_UIntType, 1, 0, __m>(__x0);\n+      }\n+\n+  /**\n+   * Gets the next generated value in sequence.\n+   */\n+  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n+    typename linear_congruential<_UIntType, __a, __c, __m>::result_type\n+    linear_congruential<_UIntType, __a, __c, __m>::\n+    operator()()\n+    {\n+      _M_x = __detail::__mod<_UIntType, __a, __c, __m>(_M_x);\n+      return _M_x;\n+    }\n+\n+  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const linear_congruential<_UIntType, __a, __c, __m>& __lcr)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n+      __os.fill(__os.widen(' '));\n+\n+      __os << __lcr._M_x;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       linear_congruential<_UIntType, __a, __c, __m>& __lcr)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec);\n+\n+      __is >> __lcr._M_x;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    } \n+\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s,\n+\t   _UIntType __b, int __t, _UIntType __c, int __l>\n+    void\n+    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n+\t\t     __b, __t, __c, __l>::\n+    seed(unsigned long __value)\n+    {\n+      _M_x[0] = __detail::__mod<_UIntType, 1, 0,\n+\t__detail::_Shift<_UIntType, __w>::__value>(__value);\n+\n+      for (int __i = 1; __i < state_size; ++__i)\n+\t{\n+\t  _UIntType __x = _M_x[__i - 1];\n+\t  __x ^= __x >> (__w - 2);\n+\t  __x *= 1812433253ul;\n+\t  __x += __i;\n+\t  _M_x[__i] = __detail::__mod<_UIntType, 1, 0,\n+\t    __detail::_Shift<_UIntType, __w>::__value>(__x);\t  \n+\t}\n+      _M_p = state_size;\n+    }\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s,\n+\t   _UIntType __b, int __t, _UIntType __c, int __l>\n+    template<class _Gen>\n+      void\n+      mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n+\t\t       __b, __t, __c, __l>::\n+      seed(_Gen& __gen, false_type)\n+      {\n+\tfor (int __i = 0; __i < state_size; ++__i)\n+\t  _M_x[__i] = __detail::__mod<_UIntType, 1, 0,\n+\t    __detail::_Shift<_UIntType, __w>::__value>(__gen());\n+\t_M_p = state_size;\n+      }\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s,\n+\t   _UIntType __b, int __t, _UIntType __c, int __l>\n+    typename\n+    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n+\t\t     __b, __t, __c, __l>::result_type\n+    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n+\t\t     __b, __t, __c, __l>::\n+    operator()()\n+    {\n+      // Reload the vector - cost is O(n) amortized over n calls.\n+      if (_M_p >= state_size)\n+\t{\n+\t  const _UIntType __upper_mask = (~_UIntType()) << __r;\n+\t  const _UIntType __lower_mask = ~__upper_mask;\n+\n+\t  for (int __k = 0; __k < (__n - __m); ++__k)\n+\t    {\n+\t      _UIntType __y = ((_M_x[__k] & __upper_mask)\n+\t\t\t       | (_M_x[__k + 1] & __lower_mask));\n+\t      _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)\n+\t\t\t   ^ ((__y & 0x01) ? __a : 0));\n+\t    }\n+\n+\t  for (int __k = (__n - __m); __k < (__n - 1); ++__k)\n+\t    {\n+\t      _UIntType __y = ((_M_x[__k] & __upper_mask)\n+\t\t\t       | (_M_x[__k + 1] & __lower_mask));\n+\t      _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)\n+\t\t\t   ^ ((__y & 0x01) ? __a : 0));\n+\t    }\n+\n+\t  _UIntType __y = ((_M_x[__n - 1] & __upper_mask)\n+\t\t\t   | (_M_x[0] & __lower_mask));\n+\t  _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)\n+\t\t\t   ^ ((__y & 0x01) ? __a : 0));\n+\t  _M_p = 0;\n+\t}\n+\n+      // Calculate o(x(i)).\n+      result_type __z = _M_x[_M_p++];\n+      __z ^= (__z >> __u);\n+      __z ^= (__z << __s) & __b;\n+      __z ^= (__z << __t) & __c;\n+      __z ^= (__z >> __l);\n+\n+      return __z;\n+    }\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n+\t   _UIntType __c, int __l,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const mersenne_twister<_UIntType, __w, __n, __m,\n+\t       __r, __a, __u, __s, __b, __t, __c, __l>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n+      __os.fill(__space);\n+\n+      for (int __i = 0; __i < __n - 1; ++__i)\n+\t__os << __x._M_x[__i] << __space;\n+      __os << __x._M_x[__n - 1];\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<class _UIntType, int __w, int __n, int __m, int __r,\n+\t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n+\t   _UIntType __c, int __l,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       mersenne_twister<_UIntType, __w, __n, __m,\n+\t       __r, __a, __u, __s, __b, __t, __c, __l>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      for (int __i = 0; __i < __n; ++__i)\n+\t__is >> __x._M_x[__i];\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _IntType, _IntType __m, int __s, int __r>\n+    void\n+    subtract_with_carry<_IntType, __m, __s, __r>::\n+    seed(unsigned long __value)\n+    {\n+      if (__value == 0)\n+\t__value = 19780503;\n+\n+      std::_GLIBCXX_TR1 linear_congruential<unsigned long, 40014, 0, 2147483563>\n+\t__lcg(__value);\n+\n+      for (int __i = 0; __i < long_lag; ++__i)\n+\t_M_x[__i] = __detail::__mod<_UIntType, 1, 0, modulus>(__lcg());\n+\n+      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n+      _M_p = 0;\n+    }\n+\n+  template<typename _IntType, _IntType __m, int __s, int __r>\n+    template<class _Gen>\n+      void\n+      subtract_with_carry<_IntType, __m, __s, __r>::\n+      seed(_Gen& __gen, false_type)\n+      {\n+\tconst int __n = (std::numeric_limits<_UIntType>::digits + 31) / 32;\n+\n+\tfor (int __i = 0; __i < long_lag; ++__i)\n+\t  {\n+\t    _UIntType __tmp = 0;\n+\t    _UIntType __factor = 1;\n+\t    for (int __j = 0; __j < __n; ++__j)\n+\t      {\n+\t\t__tmp += __detail::__mod<__detail::_UInt32Type, 1, 0, 0>\n+\t\t         (__gen()) * __factor;\n+\t\t__factor *= __detail::_Shift<_UIntType, 32>::__value;\n+\t      }\n+\t    _M_x[__i] = __detail::__mod<_UIntType, 1, 0, modulus>(__tmp);\n+\t  }\n+\t_M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n+\t_M_p = 0;\n+      }\n+\n+  template<typename _IntType, _IntType __m, int __s, int __r>\n+    typename subtract_with_carry<_IntType, __m, __s, __r>::result_type\n+    subtract_with_carry<_IntType, __m, __s, __r>::\n+    operator()()\n+    {\n+      // Derive short lag index from current index.\n+      int __ps = _M_p - short_lag;\n+      if (__ps < 0)\n+\t__ps += long_lag;\n+\n+      // Calculate new x(i) without overflow or division.\n+      // NB: Thanks to the requirements for _IntType, _M_x[_M_p] + _M_carry\n+      // cannot overflow.\n+      _UIntType __xi;\n+      if (_M_x[__ps] >= _M_x[_M_p] + _M_carry)\n+\t{\n+\t  __xi = _M_x[__ps] - _M_x[_M_p] - _M_carry;\n+\t  _M_carry = 0;\n+\t}\n+      else\n+\t{\n+\t  __xi = modulus - _M_x[_M_p] - _M_carry + _M_x[__ps];\n+\t  _M_carry = 1;\n+\t}\n+      _M_x[_M_p] = __xi;\n+\n+      // Adjust current index to loop around in ring buffer.\n+      if (++_M_p >= long_lag)\n+\t_M_p = 0;\n+\n+      return __xi;\n+    }\n+\n+  template<typename _IntType, _IntType __m, int __s, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const subtract_with_carry<_IntType, __m, __s, __r>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n+      __os.fill(__space);\n+\n+      for (int __i = 0; __i < __r; ++__i)\n+\t__os << __x._M_x[__i] << __space;\n+      __os << __x._M_carry;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<typename _IntType, _IntType __m, int __s, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       subtract_with_carry<_IntType, __m, __s, __r>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      for (int __i = 0; __i < __r; ++__i)\n+\t__is >> __x._M_x[__i];\n+      __is >> __x._M_carry;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType, int __w, int __s, int __r>\n+    void\n+    subtract_with_carry_01<_RealType, __w, __s, __r>::\n+    _M_initialize_npows()\n+    {\n+      for (int __j = 0; __j < __n; ++__j)\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\t_M_npows[__j] = std::_GLIBCXX_TR1 ldexp(_RealType(1), -__w + __j * 32);\n+#else\n+        _M_npows[__j] = std::pow(_RealType(2), -__w + __j * 32);\n+#endif\n+    }\n+\n+  template<typename _RealType, int __w, int __s, int __r>\n+    void\n+    subtract_with_carry_01<_RealType, __w, __s, __r>::\n+    seed(unsigned long __value)\n+    {\n+      if (__value == 0)\n+\t__value = 19780503;\n+\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 512. Seeding subtract_with_carry_01 from a single unsigned long.\n+      std::_GLIBCXX_TR1 linear_congruential<unsigned long, 40014, 0, 2147483563>\n+\t__lcg(__value);\n+\n+      this->seed(__lcg);\n+    }\n+\n+  template<typename _RealType, int __w, int __s, int __r>\n+    template<class _Gen>\n+      void\n+      subtract_with_carry_01<_RealType, __w, __s, __r>::\n+      seed(_Gen& __gen, false_type)\n+      {\n+\tfor (int __i = 0; __i < long_lag; ++__i)\n+\t  {\n+\t    for (int __j = 0; __j < __n - 1; ++__j)\n+\t      _M_x[__i][__j] = __detail::__mod<_UInt32Type, 1, 0, 0>(__gen());\n+\t    _M_x[__i][__n - 1] = __detail::__mod<_UInt32Type, 1, 0,\n+\t      __detail::_Shift<_UInt32Type, __w % 32>::__value>(__gen());\n+\t  }\n+\n+\t_M_carry = 1;\n+\tfor (int __j = 0; __j < __n; ++__j)\n+\t  if (_M_x[long_lag - 1][__j] != 0)\n+\t    {\n+\t      _M_carry = 0;\n+\t      break;\n+\t    }\n+\n+\t_M_p = 0;\n+      }\n+\n+  template<typename _RealType, int __w, int __s, int __r>\n+    typename subtract_with_carry_01<_RealType, __w, __s, __r>::result_type\n+    subtract_with_carry_01<_RealType, __w, __s, __r>::\n+    operator()()\n+    {\n+      // Derive short lag index from current index.\n+      int __ps = _M_p - short_lag;\n+      if (__ps < 0)\n+\t__ps += long_lag;\n+\n+      _UInt32Type __new_carry;\n+      for (int __j = 0; __j < __n - 1; ++__j)\n+\t{\n+\t  if (_M_x[__ps][__j] > _M_x[_M_p][__j]\n+\t      || (_M_x[__ps][__j] == _M_x[_M_p][__j] && _M_carry == 0))\n+\t    __new_carry = 0;\n+\t  else\n+\t    __new_carry = 1;\n+\n+\t  _M_x[_M_p][__j] = _M_x[__ps][__j] - _M_x[_M_p][__j] - _M_carry;\n+\t  _M_carry = __new_carry;\n+\t}\n+\n+      if (_M_x[__ps][__n - 1] > _M_x[_M_p][__n - 1]\n+\t  || (_M_x[__ps][__n - 1] == _M_x[_M_p][__n - 1] && _M_carry == 0))\n+\t__new_carry = 0;\n+      else\n+\t__new_carry = 1;\n+      \n+      _M_x[_M_p][__n - 1] = __detail::__mod<_UInt32Type, 1, 0,\n+\t__detail::_Shift<_UInt32Type, __w % 32>::__value>\n+\t(_M_x[__ps][__n - 1] - _M_x[_M_p][__n - 1] - _M_carry);\n+      _M_carry = __new_carry;\n+\n+      result_type __ret = 0.0;\n+      for (int __j = 0; __j < __n; ++__j)\n+\t__ret += _M_x[_M_p][__j] * _M_npows[__j];\n+\n+      // Adjust current index to loop around in ring buffer.\n+      if (++_M_p >= long_lag)\n+\t_M_p = 0;\n+\n+      return __ret;\n+    }\n+\n+  template<typename _RealType, int __w, int __s, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const subtract_with_carry_01<_RealType, __w, __s, __r>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n+      __os.fill(__space);\n+\n+      for (int __i = 0; __i < __r; ++__i)\n+\tfor (int __j = 0; __j < __x.__n; ++__j)\n+\t  __os << __x._M_x[__i][__j] << __space;\n+      __os << __x._M_carry;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, int __w, int __s, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       subtract_with_carry_01<_RealType, __w, __s, __r>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      for (int __i = 0; __i < __r; ++__i)\n+\tfor (int __j = 0; __j < __x.__n; ++__j)\n+\t  __is >> __x._M_x[__i][__j];\n+      __is >> __x._M_carry;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<class _UniformRandomNumberGenerator, int __p, int __r>\n+    typename discard_block<_UniformRandomNumberGenerator,\n+\t\t\t   __p, __r>::result_type\n+    discard_block<_UniformRandomNumberGenerator, __p, __r>::\n+    operator()()\n+    {\n+      if (_M_n >= used_block)\n+\t{\n+\t  while (_M_n < block_size)\n+\t    {\n+\t      _M_b();\n+\t      ++_M_n;\n+\t    }\n+\t  _M_n = 0;\n+\t}\n+      ++_M_n;\n+      return _M_b();\n+    }\n+\n+  template<class _UniformRandomNumberGenerator, int __p, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const discard_block<_UniformRandomNumberGenerator,\n+\t       __p, __r>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::dec | __ios_base::fixed\n+\t\t | __ios_base::left);\n+      __os.fill(__space);\n+\n+      __os << __x._M_b << __space << __x._M_n;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<class _UniformRandomNumberGenerator, int __p, int __r,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       discard_block<_UniformRandomNumberGenerator, __p, __r>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      __is >> __x._M_b >> __x._M_n;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<class _UniformRandomNumberGenerator1, int __s1,\n+\t   class _UniformRandomNumberGenerator2, int __s2>\n+    void\n+    xor_combine<_UniformRandomNumberGenerator1, __s1,\n+\t\t_UniformRandomNumberGenerator2, __s2>::\n+    _M_initialize_max()\n+    {\n+      const int __w = std::numeric_limits<result_type>::digits;\n+\n+      const result_type __m1 =\n+\tstd::min(result_type(_M_b1.max() - _M_b1.min()),\n+\t\t __detail::_Shift<result_type, __w - __s1>::__value - 1);\n+\n+      const result_type __m2 =\n+\tstd::min(result_type(_M_b2.max() - _M_b2.min()),\n+\t\t __detail::_Shift<result_type, __w - __s2>::__value - 1);\n+\n+      // NB: In TR1 s1 is not required to be >= s2.\n+      if (__s1 < __s2)\n+\t_M_max = _M_initialize_max_aux(__m2, __m1, __s2 - __s1) << __s1;\n+      else\n+\t_M_max = _M_initialize_max_aux(__m1, __m2, __s1 - __s2) << __s2;\n+    }\n+\n+  template<class _UniformRandomNumberGenerator1, int __s1,\n+\t   class _UniformRandomNumberGenerator2, int __s2>\n+    typename xor_combine<_UniformRandomNumberGenerator1, __s1,\n+\t\t\t _UniformRandomNumberGenerator2, __s2>::result_type\n+    xor_combine<_UniformRandomNumberGenerator1, __s1,\n+\t\t_UniformRandomNumberGenerator2, __s2>::\n+    _M_initialize_max_aux(result_type __a, result_type __b, int __d)\n+    {\n+      const result_type __two2d = result_type(1) << __d;\n+      const result_type __c = __a * __two2d;\n+\n+      if (__a == 0 || __b < __two2d)\n+\treturn __c + __b;\n+\n+      const result_type __t = std::max(__c, __b);\n+      const result_type __u = std::min(__c, __b);\n+\n+      result_type __ub = __u;\n+      result_type __p;\n+      for (__p = 0; __ub != 1; __ub >>= 1)\n+\t++__p;\n+\n+      const result_type __two2p = result_type(1) << __p;\n+      const result_type __k = __t / __two2p;\n+\n+      if (__k & 1)\n+\treturn (__k + 1) * __two2p - 1;\n+\n+      if (__c >= __b)\n+\treturn (__k + 1) * __two2p + _M_initialize_max_aux((__t % __two2p)\n+\t\t\t\t\t\t\t   / __two2d,\n+\t\t\t\t\t\t\t   __u % __two2p, __d);\n+      else\n+\treturn (__k + 1) * __two2p + _M_initialize_max_aux((__u % __two2p)\n+\t\t\t\t\t\t\t   / __two2d,\n+\t\t\t\t\t\t\t   __t % __two2p, __d);\n+    }\n+\n+  template<class _UniformRandomNumberGenerator1, int __s1,\n+\t   class _UniformRandomNumberGenerator2, int __s2,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const xor_combine<_UniformRandomNumberGenerator1, __s1,\n+\t       _UniformRandomNumberGenerator2, __s2>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n+      __os.fill(__space);\n+\n+      __os << __x.base1() << __space << __x.base2();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os; \n+    }\n+\n+  template<class _UniformRandomNumberGenerator1, int __s1,\n+\t   class _UniformRandomNumberGenerator2, int __s2,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       xor_combine<_UniformRandomNumberGenerator1, __s1,\n+\t       _UniformRandomNumberGenerator2, __s2>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::skipws);\n+\n+      __is >> __x._M_b1 >> __x._M_b2;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _IntType>\n+    template<typename _UniformRandomNumberGenerator>\n+      typename uniform_int<_IntType>::result_type\n+      uniform_int<_IntType>::\n+      _M_call(_UniformRandomNumberGenerator& __urng,\n+\t      result_type __min, result_type __max, true_type)\n+      {\n+\t// XXX Must be fixed to work well for *arbitrary* __urng.max(),\n+\t// __urng.min(), __max, __min.  Currently works fine only in the\n+\t// most common case __urng.max() - __urng.min() >= __max - __min,\n+\t// with __urng.max() > __urng.min() >= 0.\n+\ttypedef typename __gnu_cxx::__add_unsigned<typename\n+\t  _UniformRandomNumberGenerator::result_type>::__type __urntype;\n+\ttypedef typename __gnu_cxx::__add_unsigned<result_type>::__type\n+\t                                                      __utype;\n+\ttypedef typename __gnu_cxx::__conditional_type<(sizeof(__urntype)\n+\t\t\t\t\t\t\t> sizeof(__utype)),\n+\t  __urntype, __utype>::__type                         __uctype;\n+\n+\tresult_type __ret;\n+\n+\tconst __urntype __urnmin = __urng.min();\n+\tconst __urntype __urnmax = __urng.max();\n+\tconst __urntype __urnrange = __urnmax - __urnmin;\n+\tconst __uctype __urange = __max - __min;\n+\tconst __uctype __udenom = (__urnrange <= __urange\n+\t\t\t\t   ? 1 : __urnrange / (__urange + 1));\n+\tdo\n+\t  __ret = (__urntype(__urng()) -  __urnmin) / __udenom;\n+\twhile (__ret > __max - __min);\n+\n+\treturn __ret + __min;\n+      }\n+\n+  template<typename _IntType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const uniform_int<_IntType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+\n+      __os << __x.min() << __space << __x.max();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      return __os;\n+    }\n+\n+  template<typename _IntType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       uniform_int<_IntType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      __is >> __x._M_min >> __x._M_max;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+  \n+  template<typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const bernoulli_distribution& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__os.widen(' '));\n+      __os.precision(__gnu_cxx::__numeric_traits<double>::__max_digits10);\n+\n+      __os << __x.p();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+\n+  template<typename _IntType, typename _RealType>\n+    template<class _UniformRandomNumberGenerator>\n+      typename geometric_distribution<_IntType, _RealType>::result_type\n+      geometric_distribution<_IntType, _RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng)\n+      {\n+\t// About the epsilon thing see this thread:\n+        // http://gcc.gnu.org/ml/gcc-patches/2006-10/msg00971.html\n+\tconst _RealType __naf =\n+\t  (1 - std::numeric_limits<_RealType>::epsilon()) / 2;\n+\t// The largest _RealType convertible to _IntType.\n+\tconst _RealType __thr =\n+\t  std::numeric_limits<_IntType>::max() + __naf;\n+\n+\t_RealType __cand;\n+\tdo\n+\t  __cand = std::ceil(std::log(__urng()) / _M_log_p);\n+\twhile (__cand >= __thr);\n+\n+\treturn result_type(__cand + __naf);\n+      }\n+\n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const geometric_distribution<_IntType, _RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__os.widen(' '));\n+      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n+\n+      __os << __x.p();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+\n+  template<typename _IntType, typename _RealType>\n+    void\n+    poisson_distribution<_IntType, _RealType>::\n+    _M_initialize()\n+    {\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+      if (_M_mean >= 12)\n+\t{\n+\t  const _RealType __m = std::floor(_M_mean);\n+\t  _M_lm_thr = std::log(_M_mean);\n+\t  _M_lfm = std::_GLIBCXX_TR1 lgamma(__m + 1);\n+\t  _M_sm = std::sqrt(__m);\n+\n+\t  const _RealType __pi_4 = 0.7853981633974483096156608458198757L;\n+\t  const _RealType __dx = std::sqrt(2 * __m * std::log(32 * __m\n+\t\t\t\t\t\t\t      / __pi_4));\n+\t  _M_d = std::_GLIBCXX_TR1 round(std::max(_RealType(6),\n+\t\t\t\t\t\t  std::min(__m, __dx)));\n+\t  const _RealType __cx = 2 * __m + _M_d;\n+\t  _M_scx = std::sqrt(__cx / 2);\n+\t  _M_1cx = 1 / __cx;\n+\n+\t  _M_c2b = std::sqrt(__pi_4 * __cx) * std::exp(_M_1cx);\n+\t  _M_cb = 2 * __cx * std::exp(-_M_d * _M_1cx * (1 + _M_d / 2)) / _M_d;\n+\t}\n+      else\n+#endif\n+\t_M_lm_thr = std::exp(-_M_mean);\n+      }\n+\n+  /**\n+   * A rejection algorithm when mean >= 12 and a simple method based\n+   * upon the multiplication of uniform random variates otherwise.\n+   * NB: The former is available only if _GLIBCXX_USE_C99_MATH_TR1\n+   * is defined.\n+   *\n+   * Reference:\n+   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * New York, 1986, Ch. X, Sects. 3.3 & 3.4 (+ Errata!).\n+   */\n+  template<typename _IntType, typename _RealType>\n+    template<class _UniformRandomNumberGenerator>\n+      typename poisson_distribution<_IntType, _RealType>::result_type\n+      poisson_distribution<_IntType, _RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng)\n+      {\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\tif (_M_mean >= 12)\n+\t  {\n+\t    _RealType __x;\n+\n+\t    // See comments above...\n+\t    const _RealType __naf =\n+\t      (1 - std::numeric_limits<_RealType>::epsilon()) / 2;\n+\t    const _RealType __thr =\n+\t      std::numeric_limits<_IntType>::max() + __naf;\n+\n+\t    const _RealType __m = std::floor(_M_mean);\n+\t    // sqrt(pi / 2)\n+\t    const _RealType __spi_2 = 1.2533141373155002512078826424055226L;\n+\t    const _RealType __c1 = _M_sm * __spi_2;\n+\t    const _RealType __c2 = _M_c2b + __c1; \n+\t    const _RealType __c3 = __c2 + 1;\n+\t    const _RealType __c4 = __c3 + 1;\n+\t    // e^(1 / 78)\n+\t    const _RealType __e178 = 1.0129030479320018583185514777512983L;\n+\t    const _RealType __c5 = __c4 + __e178;\n+\t    const _RealType __c = _M_cb + __c5;\n+\t    const _RealType __2cx = 2 * (2 * __m + _M_d);\n+\n+\t    bool __reject = true;\n+\t    do\n+\t      {\n+\t\tconst _RealType __u = __c * __urng();\n+\t\tconst _RealType __e = -std::log(__urng());\n+\n+\t\t_RealType __w = 0.0;\n+\t\t\n+\t\tif (__u <= __c1)\n+\t\t  {\n+\t\t    const _RealType __n = _M_nd(__urng);\n+\t\t    const _RealType __y = -std::abs(__n) * _M_sm - 1;\n+\t\t    __x = std::floor(__y);\n+\t\t    __w = -__n * __n / 2;\n+\t\t    if (__x < -__m)\n+\t\t      continue;\n+\t\t  }\n+\t\telse if (__u <= __c2)\n+\t\t  {\n+\t\t    const _RealType __n = _M_nd(__urng);\n+\t\t    const _RealType __y = 1 + std::abs(__n) * _M_scx;\n+\t\t    __x = std::ceil(__y);\n+\t\t    __w = __y * (2 - __y) * _M_1cx;\n+\t\t    if (__x > _M_d)\n+\t\t      continue;\n+\t\t  }\n+\t\telse if (__u <= __c3)\n+\t\t  // NB: This case not in the book, nor in the Errata,\n+\t\t  // but should be ok...\n+\t\t  __x = -1;\n+\t\telse if (__u <= __c4)\n+\t\t  __x = 0;\n+\t\telse if (__u <= __c5)\n+\t\t  __x = 1;\n+\t\telse\n+\t\t  {\n+\t\t    const _RealType __v = -std::log(__urng());\n+\t\t    const _RealType __y = _M_d + __v * __2cx / _M_d;\n+\t\t    __x = std::ceil(__y);\n+\t\t    __w = -_M_d * _M_1cx * (1 + __y / 2);\n+\t\t  }\n+\n+\t\t__reject = (__w - __e - __x * _M_lm_thr\n+\t\t\t    > _M_lfm - std::_GLIBCXX_TR1 lgamma(__x + __m + 1));\n+\n+\t\t__reject |= __x + __m >= __thr;\n+\n+\t      } while (__reject);\n+\n+\t    return result_type(__x + __m + __naf);\n+\t  }\n+\telse\n+#endif\n+\t  {\n+\t    _IntType     __x = 0;\n+\t    _RealType __prod = 1.0;\n+\n+\t    do\n+\t      {\n+\t\t__prod *= __urng();\n+\t\t__x += 1;\n+\t      }\n+\t    while (__prod > _M_lm_thr);\n+\n+\t    return __x - 1;\n+\t  }\n+      }\n+\n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const poisson_distribution<_IntType, _RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n+\n+      __os << __x.mean() << __space << __x._M_nd;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       poisson_distribution<_IntType, _RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::skipws);\n+\n+      __is >> __x._M_mean >> __x._M_nd;\n+      __x._M_initialize();\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _IntType, typename _RealType>\n+    void\n+    binomial_distribution<_IntType, _RealType>::\n+    _M_initialize()\n+    {\n+      const _RealType __p12 = _M_p <= 0.5 ? _M_p : 1.0 - _M_p;\n+\n+      _M_easy = true;\n+\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+      if (_M_t * __p12 >= 8)\n+\t{\n+\t  _M_easy = false;\n+\t  const _RealType __np = std::floor(_M_t * __p12);\n+\t  const _RealType __pa = __np / _M_t;\n+\t  const _RealType __1p = 1 - __pa;\n+\t  \n+\t  const _RealType __pi_4 = 0.7853981633974483096156608458198757L;\n+\t  const _RealType __d1x =\n+\t    std::sqrt(__np * __1p * std::log(32 * __np\n+\t\t\t\t\t     / (81 * __pi_4 * __1p)));\n+\t  _M_d1 = std::_GLIBCXX_TR1 round(std::max(_RealType(1), __d1x));\n+\t  const _RealType __d2x =\n+\t    std::sqrt(__np * __1p * std::log(32 * _M_t * __1p\n+\t\t\t\t\t     / (__pi_4 * __pa)));\n+\t  _M_d2 = std::_GLIBCXX_TR1 round(std::max(_RealType(1), __d2x));\n+\t  \n+\t  // sqrt(pi / 2)\n+\t  const _RealType __spi_2 = 1.2533141373155002512078826424055226L;\n+\t  _M_s1 = std::sqrt(__np * __1p) * (1 + _M_d1 / (4 * __np));\n+\t  _M_s2 = std::sqrt(__np * __1p) * (1 + _M_d2 / (4 * _M_t * __1p));\n+\t  _M_c = 2 * _M_d1 / __np;\n+\t  _M_a1 = std::exp(_M_c) * _M_s1 * __spi_2;\n+\t  const _RealType __a12 = _M_a1 + _M_s2 * __spi_2;\n+\t  const _RealType __s1s = _M_s1 * _M_s1;\n+\t  _M_a123 = __a12 + (std::exp(_M_d1 / (_M_t * __1p))\n+\t\t\t     * 2 * __s1s / _M_d1\n+\t\t\t     * std::exp(-_M_d1 * _M_d1 / (2 * __s1s)));\n+\t  const _RealType __s2s = _M_s2 * _M_s2;\n+\t  _M_s = (_M_a123 + 2 * __s2s / _M_d2\n+\t\t  * std::exp(-_M_d2 * _M_d2 / (2 * __s2s)));\n+\t  _M_lf = (std::_GLIBCXX_TR1 lgamma(__np + 1)\n+\t\t   + std::_GLIBCXX_TR1 lgamma(_M_t - __np + 1));\n+\t  _M_lp1p = std::log(__pa / __1p);\n+\n+\t  _M_q = -std::log(1 - (__p12 - __pa) / __1p);\n+\t}\n+      else\n+#endif\n+\t_M_q = -std::log(1 - __p12);\n+    }\n+\n+  template<typename _IntType, typename _RealType>\n+    template<class _UniformRandomNumberGenerator>\n+      typename binomial_distribution<_IntType, _RealType>::result_type\n+      binomial_distribution<_IntType, _RealType>::\n+      _M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t)\n+      {\n+\t_IntType    __x = 0;\n+\t_RealType __sum = 0;\n+\n+\tdo\n+\t  {\n+\t    const _RealType __e = -std::log(__urng());\n+\t    __sum += __e / (__t - __x);\n+\t    __x += 1;\n+\t  }\n+\twhile (__sum <= _M_q);\n+\n+\treturn __x - 1;\n+      }\n+\n+  /**\n+   * A rejection algorithm when t * p >= 8 and a simple waiting time\n+   * method - the second in the referenced book - otherwise.\n+   * NB: The former is available only if _GLIBCXX_USE_C99_MATH_TR1\n+   * is defined.\n+   *\n+   * Reference:\n+   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * New York, 1986, Ch. X, Sect. 4 (+ Errata!).\n+   */\n+  template<typename _IntType, typename _RealType>\n+    template<class _UniformRandomNumberGenerator>\n+      typename binomial_distribution<_IntType, _RealType>::result_type\n+      binomial_distribution<_IntType, _RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng)\n+      {\n+\tresult_type __ret;\n+\tconst _RealType __p12 = _M_p <= 0.5 ? _M_p : 1.0 - _M_p;\n+\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\tif (!_M_easy)\n+\t  {\n+\t    _RealType __x;\n+\n+\t    // See comments above...\n+\t    const _RealType __naf =\n+\t      (1 - std::numeric_limits<_RealType>::epsilon()) / 2;\n+\t    const _RealType __thr =\n+\t      std::numeric_limits<_IntType>::max() + __naf;\n+\n+\t    const _RealType __np = std::floor(_M_t * __p12);\n+\t    const _RealType __pa = __np / _M_t;\n+\n+\t    // sqrt(pi / 2)\n+\t    const _RealType __spi_2 = 1.2533141373155002512078826424055226L;\n+\t    const _RealType __a1 = _M_a1;\n+\t    const _RealType __a12 = __a1 + _M_s2 * __spi_2;\n+\t    const _RealType __a123 = _M_a123;\n+\t    const _RealType __s1s = _M_s1 * _M_s1;\n+\t    const _RealType __s2s = _M_s2 * _M_s2;\n+\n+\t    bool __reject;\n+\t    do\n+\t      {\n+\t\tconst _RealType __u = _M_s * __urng();\n+\n+\t\t_RealType __v;\n+\n+\t\tif (__u <= __a1)\n+\t\t  {\n+\t\t    const _RealType __n = _M_nd(__urng);\n+\t\t    const _RealType __y = _M_s1 * std::abs(__n);\n+\t\t    __reject = __y >= _M_d1;\n+\t\t    if (!__reject)\n+\t\t      {\n+\t\t\tconst _RealType __e = -std::log(__urng());\n+\t\t\t__x = std::floor(__y);\n+\t\t\t__v = -__e - __n * __n / 2 + _M_c;\n+\t\t      }\n+\t\t  }\n+\t\telse if (__u <= __a12)\n+\t\t  {\n+\t\t    const _RealType __n = _M_nd(__urng);\n+\t\t    const _RealType __y = _M_s2 * std::abs(__n);\n+\t\t    __reject = __y >= _M_d2;\n+\t\t    if (!__reject)\n+\t\t      {\n+\t\t\tconst _RealType __e = -std::log(__urng());\n+\t\t\t__x = std::floor(-__y);\n+\t\t\t__v = -__e - __n * __n / 2;\n+\t\t      }\n+\t\t  }\n+\t\telse if (__u <= __a123)\n+\t\t  {\n+\t\t    const _RealType __e1 = -std::log(__urng());\t\t    \n+\t\t    const _RealType __e2 = -std::log(__urng());\n+\n+\t\t    const _RealType __y = _M_d1 + 2 * __s1s * __e1 / _M_d1;\n+\t\t    __x = std::floor(__y);\n+\t\t    __v = (-__e2 + _M_d1 * (1 / (_M_t - __np)\n+\t\t\t\t\t    -__y / (2 * __s1s)));\n+\t\t    __reject = false;\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    const _RealType __e1 = -std::log(__urng());\t\t    \n+\t\t    const _RealType __e2 = -std::log(__urng());\n+\n+\t\t    const _RealType __y = _M_d2 + 2 * __s2s * __e1 / _M_d2;\n+\t\t    __x = std::floor(-__y);\n+\t\t    __v = -__e2 - _M_d2 * __y / (2 * __s2s);\n+\t\t    __reject = false;\n+\t\t  }\n+\n+\t\t__reject = __reject || __x < -__np || __x > _M_t - __np;\n+\t\tif (!__reject)\n+\t\t  {\n+\t\t    const _RealType __lfx =\n+\t\t      std::_GLIBCXX_TR1 lgamma(__np + __x + 1)\n+\t\t      + std::_GLIBCXX_TR1 lgamma(_M_t - (__np + __x) + 1);\n+\t\t    __reject = __v > _M_lf - __lfx + __x * _M_lp1p;\n+\t\t  }\n+\n+\t\t__reject |= __x + __np >= __thr;\n+\t      }\n+\t    while (__reject);\n+\n+\t    __x += __np + __naf;\n+\n+\t    const _IntType __z = _M_waiting(__urng, _M_t - _IntType(__x)); \n+\t    __ret = _IntType(__x) + __z;\n+\t  }\n+\telse\n+#endif\n+\t  __ret = _M_waiting(__urng, _M_t);\n+\n+\tif (__p12 != _M_p)\n+\t  __ret = _M_t - __ret;\n+\treturn __ret;\n+      }\n+\n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const binomial_distribution<_IntType, _RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n+\n+      __os << __x.t() << __space << __x.p() \n+\t   << __space << __x._M_nd;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _IntType, typename _RealType,\n+\t   typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       binomial_distribution<_IntType, _RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      __is >> __x._M_t >> __x._M_p >> __x._M_nd;\n+      __x._M_initialize();\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const uniform_real<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n+\n+      __os << __x.min() << __space << __x.max();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       uniform_real<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::skipws);\n+\n+      __is >> __x._M_min >> __x._M_max;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const exponential_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__os.widen(' '));\n+      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n+\n+      __os << __x.lambda();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+\n+  /**\n+   * Polar method due to Marsaglia.\n+   *\n+   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * New York, 1986, Ch. V, Sect. 4.4.\n+   */\n+  template<typename _RealType>\n+    template<class _UniformRandomNumberGenerator>\n+      typename normal_distribution<_RealType>::result_type\n+      normal_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng)\n+      {\n+\tresult_type __ret;\n+\n+\tif (_M_saved_available)\n+\t  {\n+\t    _M_saved_available = false;\n+\t    __ret = _M_saved;\n+\t  }\n+\telse\n+\t  {\n+\t    result_type __x, __y, __r2;\n+\t    do\n+\t      {\n+\t\t__x = result_type(2.0) * __urng() - 1.0;\n+\t\t__y = result_type(2.0) * __urng() - 1.0;\n+\t\t__r2 = __x * __x + __y * __y;\n+\t      }\n+\t    while (__r2 > 1.0 || __r2 == 0.0);\n+\n+\t    const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);\n+\t    _M_saved = __x * __mult;\n+\t    _M_saved_available = true;\n+\t    __ret = __y * __mult;\n+\t  }\n+\t\n+\t__ret = __ret * _M_sigma + _M_mean;\n+\treturn __ret;\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const normal_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      const _CharT __space = __os.widen(' ');\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__space);\n+      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n+\n+      __os << __x._M_saved_available << __space\n+\t   << __x.mean() << __space\n+\t   << __x.sigma();\n+      if (__x._M_saved_available)\n+\t__os << __space << __x._M_saved;\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_istream<_CharT, _Traits>&\n+    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n+\t       normal_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n+      typedef typename __istream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __is.flags();\n+      __is.flags(__ios_base::dec | __ios_base::skipws);\n+\n+      __is >> __x._M_saved_available >> __x._M_mean\n+\t   >> __x._M_sigma;\n+      if (__x._M_saved_available)\n+\t__is >> __x._M_saved;\n+\n+      __is.flags(__flags);\n+      return __is;\n+    }\n+\n+\n+  template<typename _RealType>\n+    void\n+    gamma_distribution<_RealType>::\n+    _M_initialize()\n+    {\n+      if (_M_alpha >= 1)\n+\t_M_l_d = std::sqrt(2 * _M_alpha - 1);\n+      else\n+\t_M_l_d = (std::pow(_M_alpha, _M_alpha / (1 - _M_alpha))\n+\t\t  * (1 - _M_alpha));\n+    }\n+\n+  /**\n+   * Cheng's rejection algorithm GB for alpha >= 1 and a modification\n+   * of Vaduva's rejection from Weibull algorithm due to Devroye for\n+   * alpha < 1.\n+   *\n+   * References:\n+   * Cheng, R. C. \"The Generation of Gamma Random Variables with Non-integral\n+   * Shape Parameter.\" Applied Statistics, 26, 71-75, 1977.\n+   *\n+   * Vaduva, I. \"Computer Generation of Gamma Gandom Variables by Rejection\n+   * and Composition Procedures.\" Math. Operationsforschung and Statistik,\n+   * Series in Statistics, 8, 545-576, 1977.\n+   *\n+   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n+   * New York, 1986, Ch. IX, Sect. 3.4 (+ Errata!).\n+   */\n+  template<typename _RealType>\n+    template<class _UniformRandomNumberGenerator>\n+      typename gamma_distribution<_RealType>::result_type\n+      gamma_distribution<_RealType>::\n+      operator()(_UniformRandomNumberGenerator& __urng)\n+      {\n+\tresult_type __x;\n+\n+\tbool __reject;\n+\tif (_M_alpha >= 1)\n+\t  {\n+\t    // alpha - log(4)\n+\t    const result_type __b = _M_alpha\n+\t      - result_type(1.3862943611198906188344642429163531L);\n+\t    const result_type __c = _M_alpha + _M_l_d;\n+\t    const result_type __1l = 1 / _M_l_d;\n+\n+\t    // 1 + log(9 / 2)\n+\t    const result_type __k = 2.5040773967762740733732583523868748L;\n+\n+\t    do\n+\t      {\n+\t\tconst result_type __u = __urng();\n+\t\tconst result_type __v = __urng();\n+\n+\t\tconst result_type __y = __1l * std::log(__v / (1 - __v));\n+\t\t__x = _M_alpha * std::exp(__y);\n+\n+\t\tconst result_type __z = __u * __v * __v;\n+\t\tconst result_type __r = __b + __c * __y - __x;\n+\n+\t\t__reject = __r < result_type(4.5) * __z - __k;\n+\t\tif (__reject)\n+\t\t  __reject = __r < std::log(__z);\n+\t      }\n+\t    while (__reject);\n+\t  }\n+\telse\n+\t  {\n+\t    const result_type __c = 1 / _M_alpha;\n+\n+\t    do\n+\t      {\n+\t\tconst result_type __z = -std::log(__urng());\n+\t\tconst result_type __e = -std::log(__urng());\n+\n+\t\t__x = std::pow(__z, __c);\n+\n+\t\t__reject = __z + __e < _M_l_d + __x;\n+\t      }\n+\t    while (__reject);\n+\t  }\n+\n+\treturn __x;\n+      }\n+\n+  template<typename _RealType, typename _CharT, typename _Traits>\n+    std::basic_ostream<_CharT, _Traits>&\n+    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t       const gamma_distribution<_RealType>& __x)\n+    {\n+      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const typename __ios_base::fmtflags __flags = __os.flags();\n+      const _CharT __fill = __os.fill();\n+      const std::streamsize __precision = __os.precision();\n+      __os.flags(__ios_base::scientific | __ios_base::left);\n+      __os.fill(__os.widen(' '));\n+      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n+\n+      __os << __x.alpha();\n+\n+      __os.flags(__flags);\n+      __os.fill(__fill);\n+      __os.precision(__precision);\n+      return __os;\n+    }\n+\n+}\n+}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libstdc++-v3/include/tr1_impl/random", "status": "modified", "additions": 0, "deletions": 2412, "changes": 2412, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -1,2412 +0,0 @@\n-// random number generation -*- C++ -*-\n-\n-// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/**\n- * @file tr1_impl/random\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-namespace std\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_TR1\n-\n-  // [5.1] Random number generation\n-\n-  /**\n-   * @defgroup tr1_random Random Number Generation\n-   * @ingroup numerics\n-   * A facility for generating random numbers on selected distributions.\n-   * @{\n-   */\n-\n-  /*\n-   * Implementation-space details.\n-   */\n-  namespace __detail\n-  {\n-    template<typename _UIntType, int __w, \n-\t     bool = __w < std::numeric_limits<_UIntType>::digits>\n-      struct _Shift\n-      { static const _UIntType __value = 0; };\n-\n-    template<typename _UIntType, int __w>\n-      struct _Shift<_UIntType, __w, true>\n-      { static const _UIntType __value = _UIntType(1) << __w; };\n-\n-    template<typename _Tp, _Tp __a, _Tp __c, _Tp __m, bool>\n-      struct _Mod;\n-\n-    // Dispatch based on modulus value to prevent divide-by-zero compile-time\n-    // errors when m == 0.\n-    template<typename _Tp, _Tp __a, _Tp __c, _Tp __m>\n-      inline _Tp\n-      __mod(_Tp __x)\n-      { return _Mod<_Tp, __a, __c, __m, __m == 0>::__calc(__x); }\n-\n-    typedef __gnu_cxx::__conditional_type<(sizeof(unsigned) == 4),\n-\t\t    unsigned, unsigned long>::__type _UInt32Type;\n-\n-    /*\n-     * An adaptor class for converting the output of any Generator into\n-     * the input for a specific Distribution.\n-     */\n-    template<typename _Engine, typename _Distribution>\n-      struct _Adaptor\n-      { \n-\ttypedef typename remove_reference<_Engine>::type _BEngine;\n-\ttypedef typename _BEngine::result_type           _Engine_result_type;\n-\ttypedef typename _Distribution::input_type       result_type;\n-\n-      public:\n-\t_Adaptor(const _Engine& __g)\n-\t: _M_g(__g) { }\n-\n-\tresult_type\n-\tmin() const\n-\t{\n-\t  result_type __return_value;\n-\t  if (is_integral<_Engine_result_type>::value\n-\t      && is_integral<result_type>::value)\n-\t    __return_value = _M_g.min();\n-\t  else\n-\t    __return_value = result_type(0);\n-\t  return __return_value;\n-\t}\n-\n-\tresult_type\n-\tmax() const\n-\t{\n-\t  result_type __return_value;\n-\t  if (is_integral<_Engine_result_type>::value\n-\t      && is_integral<result_type>::value)\n-\t    __return_value = _M_g.max();\n-\t  else if (!is_integral<result_type>::value)\n-\t    __return_value = result_type(1);\n-\t  else\n-\t    __return_value = std::numeric_limits<result_type>::max() - 1;\n-\t  return __return_value;\n-\t}\n-\n-\t/*\n-\t * Converts a value generated by the adapted random number generator\n-\t * into a value in the input domain for the dependent random number\n-\t * distribution.\n-\t *\n-\t * Because the type traits are compile time constants only the\n-\t * appropriate clause of the if statements will actually be emitted\n-\t * by the compiler.\n-\t */\n-\tresult_type\n-\toperator()()\n-\t{\n-\t  result_type __return_value;\n-\t  if (is_integral<_Engine_result_type>::value\n-\t      && is_integral<result_type>::value)\n-\t    __return_value = _M_g();\n-\t  else if (!is_integral<_Engine_result_type>::value\n-\t\t   && !is_integral<result_type>::value)\n-\t    __return_value = result_type(_M_g() - _M_g.min())\n-\t      / result_type(_M_g.max() - _M_g.min());\n-\t  else if (is_integral<_Engine_result_type>::value\n-\t\t   && !is_integral<result_type>::value)\n-\t    __return_value = result_type(_M_g() - _M_g.min())\n-\t      / result_type(_M_g.max() - _M_g.min() + result_type(1));\n-\t  else\n-\t    __return_value = (((_M_g() - _M_g.min()) \n-\t\t\t       / (_M_g.max() - _M_g.min()))\n-\t\t\t      * std::numeric_limits<result_type>::max());\n-\t  return __return_value;\n-\t}\n-\n-      private:\n-\t_Engine _M_g;\n-      };\n-\n-    // Specialization for _Engine*.\n-    template<typename _Engine, typename _Distribution>\n-      struct _Adaptor<_Engine*, _Distribution>\n-      {\n-\ttypedef typename _Engine::result_type      _Engine_result_type;\n-\ttypedef typename _Distribution::input_type result_type;\n-\n-      public:\n-\t_Adaptor(_Engine* __g)\n-\t: _M_g(__g) { }\n-\n-\tresult_type\n-\tmin() const\n-\t{\n-\t  result_type __return_value;\n-\t  if (is_integral<_Engine_result_type>::value\n-\t      && is_integral<result_type>::value)\n-\t    __return_value = _M_g->min();\n-\t  else\n-\t    __return_value = result_type(0);\n-\t  return __return_value;\n-\t}\n-\n-\tresult_type\n-\tmax() const\n-\t{\n-\t  result_type __return_value;\n-\t  if (is_integral<_Engine_result_type>::value\n-\t      && is_integral<result_type>::value)\n-\t    __return_value = _M_g->max();\n-\t  else if (!is_integral<result_type>::value)\n-\t    __return_value = result_type(1);\n-\t  else\n-\t    __return_value = std::numeric_limits<result_type>::max() - 1;\n-\t  return __return_value;\n-\t}\n-\n-\tresult_type\n-\toperator()()\n-\t{\n-\t  result_type __return_value;\n-\t  if (is_integral<_Engine_result_type>::value\n-\t      && is_integral<result_type>::value)\n-\t    __return_value = (*_M_g)();\n-\t  else if (!is_integral<_Engine_result_type>::value\n-\t\t   && !is_integral<result_type>::value)\n-\t    __return_value = result_type((*_M_g)() - _M_g->min())\n-\t      / result_type(_M_g->max() - _M_g->min());\n-\t  else if (is_integral<_Engine_result_type>::value\n-\t\t   && !is_integral<result_type>::value)\n-\t    __return_value = result_type((*_M_g)() - _M_g->min())\n-\t      / result_type(_M_g->max() - _M_g->min() + result_type(1));\n-\t  else\n-\t    __return_value = ((((*_M_g)() - _M_g->min()) \n-\t\t\t       / (_M_g->max() - _M_g->min()))\n-\t\t\t      * std::numeric_limits<result_type>::max());\n-\t  return __return_value;\n-\t}\n-\n-      private:\n-\t_Engine* _M_g;\n-      };\n-  } // namespace __detail\n-\n-  /**\n-   * Produces random numbers on a given distribution function using a\n-   * non-uniform random number generation engine.\n-   *\n-   * @todo the engine_value_type needs to be studied more carefully.\n-   */\n-  template<typename _Engine, typename _Dist>\n-    class variate_generator\n-    {\n-      // Concept requirements.\n-      __glibcxx_class_requires(_Engine, _CopyConstructibleConcept)\n-      //  __glibcxx_class_requires(_Engine, _EngineConcept)\n-      //  __glibcxx_class_requires(_Dist, _EngineConcept)\n-\n-    public:\n-      typedef _Engine                                engine_type;\n-      typedef __detail::_Adaptor<_Engine, _Dist>     engine_value_type;\n-      typedef _Dist                                  distribution_type;\n-      typedef typename _Dist::result_type            result_type;\n-\n-      // tr1:5.1.1 table 5.1 requirement\n-      typedef typename __gnu_cxx::__enable_if<\n-\tis_arithmetic<result_type>::value, result_type>::__type _IsValidType;\n-\n-      /**\n-       * Constructs a variate generator with the uniform random number\n-       * generator @p __eng for the random distribution @p __dist.\n-       *\n-       * @throws Any exceptions which may thrown by the copy constructors of\n-       * the @p _Engine or @p _Dist objects.\n-       */\n-      variate_generator(engine_type __eng, distribution_type __dist)\n-      : _M_engine(__eng), _M_dist(__dist) { }\n-\n-      /**\n-       * Gets the next generated value on the distribution.\n-       */\n-      result_type\n-      operator()()\n-      { return _M_dist(_M_engine); }\n-\n-      /**\n-       * WTF?\n-       */\n-      template<typename _Tp>\n-        result_type\n-        operator()(_Tp __value)\n-        { return _M_dist(_M_engine, __value); }\n-\n-      /**\n-       * Gets a reference to the underlying uniform random number generator\n-       * object.\n-       */\n-      engine_value_type&\n-      engine()\n-      { return _M_engine; }\n-\n-      /**\n-       * Gets a const reference to the underlying uniform random number\n-       * generator object.\n-       */\n-      const engine_value_type&\n-      engine() const\n-      { return _M_engine; }\n-\n-      /**\n-       * Gets a reference to the underlying random distribution.\n-       */\n-      distribution_type&\n-      distribution()\n-      { return _M_dist; }\n-\n-      /**\n-       * Gets a const reference to the underlying random distribution.\n-       */\n-      const distribution_type&\n-      distribution() const\n-      { return _M_dist; }\n-\n-      /**\n-       * Gets the closed lower bound of the distribution interval.\n-       */\n-      result_type\n-      min() const\n-      { return this->distribution().min(); }\n-\n-      /**\n-       * Gets the closed upper bound of the distribution interval.\n-       */\n-      result_type\n-      max() const\n-      { return this->distribution().max(); }\n-\n-    private:\n-      engine_value_type _M_engine;\n-      distribution_type _M_dist;\n-    };\n-\n-\n-  /**\n-   * @defgroup tr1_random_generators Random Number Generators\n-   * @ingroup tr1_random\n-   *\n-   * These classes define objects which provide random or pseudorandom\n-   * numbers, either from a discrete or a continuous interval.  The\n-   * random number generator supplied as a part of this library are\n-   * all uniform random number generators which provide a sequence of\n-   * random number uniformly distributed over their range.\n-   *\n-   * A number generator is a function object with an operator() that\n-   * takes zero arguments and returns a number.\n-   *\n-   * A compliant random number generator must satisfy the following\n-   * requirements.  <table border=1 cellpadding=10 cellspacing=0>\n-   * <caption align=top>Random Number Generator Requirements</caption>\n-   * <tr><td>To be documented.</td></tr> </table>\n-   * \n-   * @{\n-   */\n-\n-  /**\n-   * @brief A model of a linear congruential random number generator.\n-   *\n-   * A random number generator that produces pseudorandom numbers using the\n-   * linear function @f$x_{i+1}\\leftarrow(ax_{i} + c) \\bmod m @f$.\n-   *\n-   * The template parameter @p _UIntType must be an unsigned integral type\n-   * large enough to store values up to (__m-1). If the template parameter\n-   * @p __m is 0, the modulus @p __m used is\n-   * std::numeric_limits<_UIntType>::max() plus 1. Otherwise, the template\n-   * parameters @p __a and @p __c must be less than @p __m.\n-   *\n-   * The size of the state is @f$ 1 @f$.\n-   */\n-  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n-    class linear_congruential\n-    {\n-      __glibcxx_class_requires(_UIntType, _UnsignedIntegerConcept)\n-      //  __glibcpp_class_requires(__a < __m && __c < __m)\n-\n-    public:\n-      /** The type of the generated random value. */\n-      typedef _UIntType result_type;\n-\n-      /** The multiplier. */\n-      static const _UIntType multiplier = __a;\n-      /** An increment. */\n-      static const _UIntType increment = __c;\n-      /** The modulus. */\n-      static const _UIntType modulus = __m;\n-\n-      /**\n-       * Constructs a %linear_congruential random number generator engine with\n-       * seed @p __s.  The default seed value is 1.\n-       *\n-       * @param __s The initial seed value.\n-       */\n-      explicit\n-      linear_congruential(unsigned long __x0 = 1)\n-      { this->seed(__x0); }\n-\n-      /**\n-       * Constructs a %linear_congruential random number generator engine\n-       * seeded from the generator function @p __g.\n-       *\n-       * @param __g The seed generator function.\n-       */\n-      template<class _Gen>\n-        linear_congruential(_Gen& __g)\n-        { this->seed(__g); }\n-\n-      /**\n-       * Reseeds the %linear_congruential random number generator engine\n-       * sequence to the seed @g __s.\n-       *\n-       * @param __s The new seed.\n-       */\n-      void\n-      seed(unsigned long __s = 1);\n-\n-      /**\n-       * Reseeds the %linear_congruential random number generator engine\n-       * sequence using values from the generator function @p __g.\n-       *\n-       * @param __g the seed generator function.\n-       */\n-      template<class _Gen>\n-        void\n-        seed(_Gen& __g)\n-        { seed(__g, typename is_fundamental<_Gen>::type()); }\n-\n-      /**\n-       * Gets the smallest possible value in the output range.\n-       *\n-       * The minimum depends on the @p __c parameter: if it is zero, the\n-       * minimum generated must be > 0, otherwise 0 is allowed.\n-       */\n-      result_type\n-      min() const\n-      { return (__detail::__mod<_UIntType, 1, 0, __m>(__c) == 0) ? 1 : 0; }\n-\n-      /**\n-       * Gets the largest possible value in the output range.\n-       */\n-      result_type\n-      max() const\n-      { return __m - 1; }\n-\n-      /**\n-       * Gets the next random number in the sequence.\n-       */\n-      result_type\n-      operator()();\n-\n-      /**\n-       * Compares two linear congruential random number generator\n-       * objects of the same type for equality.\n-       *  \n-       * @param __lhs A linear congruential random number generator object.\n-       * @param __rhs Another linear congruential random number generator obj.\n-       *\n-       * @returns true if the two objects are equal, false otherwise.\n-       */\n-      friend bool\n-      operator==(const linear_congruential& __lhs,\n-\t\t const linear_congruential& __rhs)\n-      { return __lhs._M_x == __rhs._M_x; }\n-\n-      /**\n-       * Compares two linear congruential random number generator\n-       * objects of the same type for inequality.\n-       *\n-       * @param __lhs A linear congruential random number generator object.\n-       * @param __rhs Another linear congruential random number generator obj.\n-       *\n-       * @returns true if the two objects are not equal, false otherwise.\n-       */\n-      friend bool\n-      operator!=(const linear_congruential& __lhs,\n-\t\t const linear_congruential& __rhs)\n-      { return !(__lhs == __rhs); }\n-\n-      /**\n-       * Writes the textual representation of the state x(i) of x to @p __os.\n-       *\n-       * @param __os  The output stream.\n-       * @param __lcr A % linear_congruential random number generator.\n-       * @returns __os.\n-       */\n-      template<class _UIntType1, _UIntType1 __a1, _UIntType1 __c1,\n-\t       _UIntType1 __m1,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_ostream<_CharT, _Traits>&\n-        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const linear_congruential<_UIntType1, __a1, __c1,\n-\t\t   __m1>& __lcr);\n-\n-      /**\n-       * Sets the state of the engine by reading its textual\n-       * representation from @p __is.\n-       *\n-       * The textual representation must have been previously written using an\n-       * output stream whose imbued locale and whose type's template\n-       * specialization arguments _CharT and _Traits were the same as those of\n-       * @p __is.\n-       *\n-       * @param __is  The input stream.\n-       * @param __lcr A % linear_congruential random number generator.\n-       * @returns __is.\n-       */\n-      template<class _UIntType1, _UIntType1 __a1, _UIntType1 __c1,\n-\t       _UIntType1 __m1,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_istream<_CharT, _Traits>&\n-        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   linear_congruential<_UIntType1, __a1, __c1, __m1>& __lcr);\n-\n-    private:\n-      template<class _Gen>\n-        void\n-        seed(_Gen& __g, true_type)\n-        { return seed(static_cast<unsigned long>(__g)); }\n-\n-      template<class _Gen>\n-        void\n-        seed(_Gen& __g, false_type);\n-\n-      _UIntType _M_x;\n-    };\n-\n-  /**\n-   * The classic Minimum Standard rand0 of Lewis, Goodman, and Miller.\n-   */\n-  typedef linear_congruential<unsigned long, 16807, 0, 2147483647> minstd_rand0;\n-\n-  /**\n-   * An alternative LCR (Lehmer Generator function) .\n-   */\n-  typedef linear_congruential<unsigned long, 48271, 0, 2147483647> minstd_rand;\n-\n-\n-  /**\n-   * A generalized feedback shift register discrete random number generator.\n-   *\n-   * This algorithm avoids multiplication and division and is designed to be\n-   * friendly to a pipelined architecture.  If the parameters are chosen\n-   * correctly, this generator will produce numbers with a very long period and\n-   * fairly good apparent entropy, although still not cryptographically strong.\n-   *\n-   * The best way to use this generator is with the predefined mt19937 class.\n-   *\n-   * This algorithm was originally invented by Makoto Matsumoto and\n-   * Takuji Nishimura.\n-   *\n-   * @var word_size   The number of bits in each element of the state vector.\n-   * @var state_size  The degree of recursion.\n-   * @var shift_size  The period parameter.\n-   * @var mask_bits   The separation point bit index.\n-   * @var parameter_a The last row of the twist matrix.\n-   * @var output_u    The first right-shift tempering matrix parameter.\n-   * @var output_s    The first left-shift tempering matrix parameter.\n-   * @var output_b    The first left-shift tempering matrix mask.\n-   * @var output_t    The second left-shift tempering matrix parameter.\n-   * @var output_c    The second left-shift tempering matrix mask.\n-   * @var output_l    The second right-shift tempering matrix parameter.\n-   */\n-  template<class _UIntType, int __w, int __n, int __m, int __r,\n-\t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n-\t   _UIntType __c, int __l>\n-    class mersenne_twister\n-    {\n-      __glibcxx_class_requires(_UIntType, _UnsignedIntegerConcept)\n-\n-    public:\n-      // types\n-      typedef _UIntType result_type;\n-\n-      // parameter values\n-      static const int       word_size   = __w;\n-      static const int       state_size  = __n;\n-      static const int       shift_size  = __m;\n-      static const int       mask_bits   = __r;\n-      static const _UIntType parameter_a = __a;\n-      static const int       output_u    = __u;\n-      static const int       output_s    = __s;\n-      static const _UIntType output_b    = __b;\n-      static const int       output_t    = __t;\n-      static const _UIntType output_c    = __c;\n-      static const int       output_l    = __l;\n-\n-      // constructors and member function\n-      mersenne_twister()\n-      { seed(); }\n-\n-      explicit\n-      mersenne_twister(unsigned long __value)\n-      { seed(__value); }\n-\n-      template<class _Gen>\n-        mersenne_twister(_Gen& __g)\n-        { seed(__g); }\n-\n-      void\n-      seed()\n-      { seed(5489UL); }\n-\n-      void\n-      seed(unsigned long __value);\n-\n-      template<class _Gen>\n-        void\n-        seed(_Gen& __g)\n-        { seed(__g, typename is_fundamental<_Gen>::type()); }\n-\n-      result_type\n-      min() const\n-      { return 0; };\n-\n-      result_type\n-      max() const\n-      { return __detail::_Shift<_UIntType, __w>::__value - 1; }\n-\n-      result_type\n-      operator()();\n-\n-      /**\n-       * Compares two % mersenne_twister random number generator objects of\n-       * the same type for equality.\n-       *\n-       * @param __lhs A % mersenne_twister random number generator object.\n-       * @param __rhs Another % mersenne_twister random number generator\n-       *              object.\n-       *\n-       * @returns true if the two objects are equal, false otherwise.\n-       */\n-      friend bool\n-      operator==(const mersenne_twister& __lhs,\n-\t\t const mersenne_twister& __rhs)\n-      { return std::equal(__lhs._M_x, __lhs._M_x + state_size, __rhs._M_x); }\n-\n-      /**\n-       * Compares two % mersenne_twister random number generator objects of\n-       * the same type for inequality.\n-       *\n-       * @param __lhs A % mersenne_twister random number generator object.\n-       * @param __rhs Another % mersenne_twister random number generator\n-       *              object.\n-       *\n-       * @returns true if the two objects are not equal, false otherwise.\n-       */\n-      friend bool\n-      operator!=(const mersenne_twister& __lhs,\n-\t\t const mersenne_twister& __rhs)\n-      { return !(__lhs == __rhs); }\n-\n-      /**\n-       * Inserts the current state of a % mersenne_twister random number\n-       * generator engine @p __x into the output stream @p __os.\n-       *\n-       * @param __os An output stream.\n-       * @param __x  A % mersenne_twister random number generator engine.\n-       *\n-       * @returns The output stream with the state of @p __x inserted or in\n-       * an error state.\n-       */\n-      template<class _UIntType1, int __w1, int __n1, int __m1, int __r1,\n-\t       _UIntType1 __a1, int __u1, int __s1, _UIntType1 __b1, int __t1,\n-\t       _UIntType1 __c1, int __l1,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_ostream<_CharT, _Traits>&\n-        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const mersenne_twister<_UIntType1, __w1, __n1, __m1, __r1,\n-\t\t   __a1, __u1, __s1, __b1, __t1, __c1, __l1>& __x);\n-\n-      /**\n-       * Extracts the current state of a % mersenne_twister random number\n-       * generator engine @p __x from the input stream @p __is.\n-       *\n-       * @param __is An input stream.\n-       * @param __x  A % mersenne_twister random number generator engine.\n-       *\n-       * @returns The input stream with the state of @p __x extracted or in\n-       * an error state.\n-       */\n-      template<class _UIntType1, int __w1, int __n1, int __m1, int __r1,\n-\t       _UIntType1 __a1, int __u1, int __s1, _UIntType1 __b1, int __t1,\n-\t       _UIntType1 __c1, int __l1,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_istream<_CharT, _Traits>&\n-        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   mersenne_twister<_UIntType1, __w1, __n1, __m1, __r1,\n-\t\t   __a1, __u1, __s1, __b1, __t1, __c1, __l1>& __x);\n-\n-    private:\n-      template<class _Gen>\n-        void\n-        seed(_Gen& __g, true_type)\n-        { return seed(static_cast<unsigned long>(__g)); }\n-\n-      template<class _Gen>\n-        void\n-        seed(_Gen& __g, false_type);\n-\n-      _UIntType _M_x[state_size];\n-      int       _M_p;\n-    };\n-\n-  /**\n-   * The classic Mersenne Twister.\n-   *\n-   * Reference:\n-   * M. Matsumoto and T. Nishimura, \"Mersenne Twister: A 623-Dimensionally\n-   * Equidistributed Uniform Pseudo-Random Number Generator\", ACM Transactions\n-   * on Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3-30.\n-   */\n-  typedef mersenne_twister<\n-    unsigned long, 32, 624, 397, 31,\n-    0x9908b0dful, 11, 7,\n-    0x9d2c5680ul, 15,\n-    0xefc60000ul, 18\n-    > mt19937;\n-\n-\n-  /**\n-   * @brief The Marsaglia-Zaman generator.\n-   * \n-   * This is a model of a Generalized Fibonacci discrete random number\n-   * generator, sometimes referred to as the SWC generator.\n-   *\n-   * A discrete random number generator that produces pseudorandom\n-   * numbers using @f$x_{i}\\leftarrow(x_{i - s} - x_{i - r} -\n-   * carry_{i-1}) \\bmod m @f$.\n-   *\n-   * The size of the state is @f$ r @f$\n-   * and the maximum period of the generator is @f$ m^r - m^s -1 @f$.\n-   *\n-   * N1688[4.13] says \"the template parameter _IntType shall denote an integral\n-   * type large enough to store values up to m.\"\n-   *\n-   * @var _M_x     The state of the generator.  This is a ring buffer.\n-   * @var _M_carry The carry.\n-   * @var _M_p     Current index of x(i - r).\n-   */\n-  template<typename _IntType, _IntType __m, int __s, int __r>\n-    class subtract_with_carry\n-    {\n-      __glibcxx_class_requires(_IntType, _IntegerConcept)\n-\n-    public:\n-      /** The type of the generated random value. */\n-      typedef _IntType result_type;\n-      \n-      // parameter values\n-      static const _IntType modulus   = __m;\n-      static const int      long_lag  = __r;\n-      static const int      short_lag = __s;\n-\n-      /**\n-       * Constructs a default-initialized % subtract_with_carry random number\n-       * generator.\n-       */\n-      subtract_with_carry()\n-      { this->seed(); }\n-\n-      /**\n-       * Constructs an explicitly seeded % subtract_with_carry random number\n-       * generator.\n-       */\n-      explicit\n-      subtract_with_carry(unsigned long __value)\n-      { this->seed(__value); }\n-\n-      /**\n-       * Constructs a %subtract_with_carry random number generator engine\n-       * seeded from the generator function @p __g.\n-       *\n-       * @param __g The seed generator function.\n-       */\n-      template<class _Gen>\n-        subtract_with_carry(_Gen& __g)\n-        { this->seed(__g); }\n-\n-      /**\n-       * Seeds the initial state @f$ x_0 @f$ of the random number generator.\n-       *\n-       * N1688[4.19] modifies this as follows.  If @p __value == 0,\n-       * sets value to 19780503.  In any case, with a linear\n-       * congruential generator lcg(i) having parameters @f$ m_{lcg} =\n-       * 2147483563, a_{lcg} = 40014, c_{lcg} = 0, and lcg(0) = value\n-       * @f$, sets @f$ x_{-r} \\dots x_{-1} @f$ to @f$ lcg(1) \\bmod m\n-       * \\dots lcg(r) \\bmod m @f$ respectively.  If @f$ x_{-1} = 0 @f$\n-       * set carry to 1, otherwise sets carry to 0.\n-       */\n-      void\n-      seed(unsigned long __value = 19780503);\n-\n-      /**\n-       * Seeds the initial state @f$ x_0 @f$ of the % subtract_with_carry\n-       * random number generator.\n-       */\n-      template<class _Gen>\n-        void\n-        seed(_Gen& __g)\n-        { seed(__g, typename is_fundamental<_Gen>::type()); }\n-\n-      /**\n-       * Gets the inclusive minimum value of the range of random integers\n-       * returned by this generator.\n-       */\n-      result_type\n-      min() const\n-      { return 0; }\n-\n-      /**\n-       * Gets the inclusive maximum value of the range of random integers\n-       * returned by this generator.\n-       */\n-      result_type\n-      max() const\n-      { return this->modulus - 1; }\n-\n-      /**\n-       * Gets the next random number in the sequence.\n-       */\n-      result_type\n-      operator()();\n-\n-      /**\n-       * Compares two % subtract_with_carry random number generator objects of\n-       * the same type for equality.\n-       *\n-       * @param __lhs A % subtract_with_carry random number generator object.\n-       * @param __rhs Another % subtract_with_carry random number generator\n-       *              object.\n-       *\n-       * @returns true if the two objects are equal, false otherwise.\n-       */\n-      friend bool\n-      operator==(const subtract_with_carry& __lhs,\n-\t\t const subtract_with_carry& __rhs)\n-      { return std::equal(__lhs._M_x, __lhs._M_x + long_lag, __rhs._M_x); }\n-\n-      /**\n-       * Compares two % subtract_with_carry random number generator objects of\n-       * the same type for inequality.\n-       *\n-       * @param __lhs A % subtract_with_carry random number generator object.\n-       * @param __rhs Another % subtract_with_carry random number generator\n-       *              object.\n-       *\n-       * @returns true if the two objects are not equal, false otherwise.\n-       */\n-      friend bool\n-      operator!=(const subtract_with_carry& __lhs,\n-\t\t const subtract_with_carry& __rhs)\n-      { return !(__lhs == __rhs); }\n-\n-      /**\n-       * Inserts the current state of a % subtract_with_carry random number\n-       * generator engine @p __x into the output stream @p __os.\n-       *\n-       * @param __os An output stream.\n-       * @param __x  A % subtract_with_carry random number generator engine.\n-       *\n-       * @returns The output stream with the state of @p __x inserted or in\n-       * an error state.\n-       */\n-      template<typename _IntType1, _IntType1 __m1, int __s1, int __r1,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_ostream<_CharT, _Traits>&\n-        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const subtract_with_carry<_IntType1, __m1, __s1,\n-\t\t   __r1>& __x);\n-\n-      /**\n-       * Extracts the current state of a % subtract_with_carry random number\n-       * generator engine @p __x from the input stream @p __is.\n-       *\n-       * @param __is An input stream.\n-       * @param __x  A % subtract_with_carry random number generator engine.\n-       *\n-       * @returns The input stream with the state of @p __x extracted or in\n-       * an error state.\n-       */\n-      template<typename _IntType1, _IntType1 __m1, int __s1, int __r1,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_istream<_CharT, _Traits>&\n-        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   subtract_with_carry<_IntType1, __m1, __s1, __r1>& __x);\n-\n-    private:\n-      template<class _Gen>\n-        void\n-        seed(_Gen& __g, true_type)\n-        { return seed(static_cast<unsigned long>(__g)); }\n-\n-      template<class _Gen>\n-        void\n-        seed(_Gen& __g, false_type);\n-\n-      typedef typename __gnu_cxx::__add_unsigned<_IntType>::__type _UIntType;\n-\n-      _UIntType  _M_x[long_lag];\n-      _UIntType  _M_carry;\n-      int        _M_p;\n-    };\n-\n-\n-  /**\n-   * @brief The Marsaglia-Zaman generator (floats version).\n-   *\n-   * @var _M_x     The state of the generator.  This is a ring buffer.\n-   * @var _M_carry The carry.\n-   * @var _M_p     Current index of x(i - r).\n-   * @var _M_npows Precomputed negative powers of 2.   \n-   */\n-  template<typename _RealType, int __w, int __s, int __r>\n-    class subtract_with_carry_01\n-    {\n-    public:\n-      /** The type of the generated random value. */\n-      typedef _RealType result_type;\n-      \n-      // parameter values\n-      static const int      word_size = __w;\n-      static const int      long_lag  = __r;\n-      static const int      short_lag = __s;\n-\n-      /**\n-       * Constructs a default-initialized % subtract_with_carry_01 random\n-       * number generator.\n-       */\n-      subtract_with_carry_01()\n-      {\n-\tthis->seed();\n-\t_M_initialize_npows();\n-      }\n-\n-      /**\n-       * Constructs an explicitly seeded % subtract_with_carry_01 random number\n-       * generator.\n-       */\n-      explicit\n-      subtract_with_carry_01(unsigned long __value)\n-      {\n-\tthis->seed(__value);\n-\t_M_initialize_npows();\n-      }\n-\n-      /**\n-       * Constructs a % subtract_with_carry_01 random number generator engine\n-       * seeded from the generator function @p __g.\n-       *\n-       * @param __g The seed generator function.\n-       */\n-      template<class _Gen>\n-        subtract_with_carry_01(_Gen& __g)\n-        {\n-\t  this->seed(__g);\n-\t  _M_initialize_npows();\t  \n-\t}\n-\n-      /**\n-       * Seeds the initial state @f$ x_0 @f$ of the random number generator.\n-       */\n-      void\n-      seed(unsigned long __value = 19780503);\n-\n-      /**\n-       * Seeds the initial state @f$ x_0 @f$ of the % subtract_with_carry_01\n-       * random number generator.\n-       */\n-      template<class _Gen>\n-        void\n-        seed(_Gen& __g)\n-        { seed(__g, typename is_fundamental<_Gen>::type()); }\n-\n-      /**\n-       * Gets the minimum value of the range of random floats\n-       * returned by this generator.\n-       */\n-      result_type\n-      min() const\n-      { return 0.0; }\n-\n-      /**\n-       * Gets the maximum value of the range of random floats\n-       * returned by this generator.\n-       */\n-      result_type\n-      max() const\n-      { return 1.0; }\n-\n-      /**\n-       * Gets the next random number in the sequence.\n-       */\n-      result_type\n-      operator()();\n-\n-      /**\n-       * Compares two % subtract_with_carry_01 random number generator objects\n-       * of the same type for equality.\n-       *\n-       * @param __lhs A % subtract_with_carry_01 random number\n-       *              generator object.\n-       * @param __rhs Another % subtract_with_carry_01 random number generator\n-       *              object.\n-       *\n-       * @returns true if the two objects are equal, false otherwise.\n-       */\n-      friend bool\n-      operator==(const subtract_with_carry_01& __lhs,\n-\t\t const subtract_with_carry_01& __rhs)\n-      {\n-\tfor (int __i = 0; __i < long_lag; ++__i)\n-\t  if (!std::equal(__lhs._M_x[__i], __lhs._M_x[__i] + __n,\n-\t\t\t  __rhs._M_x[__i]))\n-\t    return false;\n-\treturn true;\n-      }\n-\n-      /**\n-       * Compares two % subtract_with_carry_01 random number generator objects\n-       * of the same type for inequality.\n-       *\n-       * @param __lhs A % subtract_with_carry_01 random number\n-       *              generator object.\n-       *\n-       * @param __rhs Another % subtract_with_carry_01 random number generator\n-       *              object.\n-       *\n-       * @returns true if the two objects are not equal, false otherwise.\n-       */\n-      friend bool\n-      operator!=(const subtract_with_carry_01& __lhs,\n-\t\t const subtract_with_carry_01& __rhs)\n-      { return !(__lhs == __rhs); }\n-\n-      /**\n-       * Inserts the current state of a % subtract_with_carry_01 random number\n-       * generator engine @p __x into the output stream @p __os.\n-       *\n-       * @param __os An output stream.\n-       * @param __x  A % subtract_with_carry_01 random number generator engine.\n-       *\n-       * @returns The output stream with the state of @p __x inserted or in\n-       * an error state.\n-       */\n-      template<typename _RealType1, int __w1, int __s1, int __r1,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_ostream<_CharT, _Traits>&\n-        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const subtract_with_carry_01<_RealType1, __w1, __s1,\n-\t\t   __r1>& __x);\n-\n-      /**\n-       * Extracts the current state of a % subtract_with_carry_01 random number\n-       * generator engine @p __x from the input stream @p __is.\n-       *\n-       * @param __is An input stream.\n-       * @param __x  A % subtract_with_carry_01 random number generator engine.\n-       *\n-       * @returns The input stream with the state of @p __x extracted or in\n-       * an error state.\n-       */\n-      template<typename _RealType1, int __w1, int __s1, int __r1,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_istream<_CharT, _Traits>&\n-        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   subtract_with_carry_01<_RealType1, __w1, __s1, __r1>& __x);\n-\n-    private:\n-      template<class _Gen>\n-        void\n-        seed(_Gen& __g, true_type)\n-        { return seed(static_cast<unsigned long>(__g)); }\n-\n-      template<class _Gen>\n-        void\n-        seed(_Gen& __g, false_type);\n-\n-      void\n-      _M_initialize_npows();\n-\n-      static const int __n = (__w + 31) / 32;\n-\n-      typedef __detail::_UInt32Type _UInt32Type;\n-      _UInt32Type  _M_x[long_lag][__n];\n-      _RealType    _M_npows[__n];\n-      _UInt32Type  _M_carry;\n-      int          _M_p;\n-    };\n-\n-  typedef subtract_with_carry_01<float, 24, 10, 24>   ranlux_base_01;\n-\n-  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  // 508. Bad parameters for ranlux64_base_01.\n-  typedef subtract_with_carry_01<double, 48, 5, 12> ranlux64_base_01;  \n-\n-\n-  /**\n-   * Produces random numbers from some base engine by discarding blocks of\n-   * data.\n-   *\n-   * 0 <= @p __r <= @p __p\n-   */\n-  template<class _UniformRandomNumberGenerator, int __p, int __r>\n-    class discard_block\n-    {\n-      // __glibcxx_class_requires(typename base_type::result_type,\n-      //                          ArithmeticTypeConcept)\n-\n-    public:\n-      /** The type of the underlying generator engine. */\n-      typedef _UniformRandomNumberGenerator   base_type;\n-      /** The type of the generated random value. */\n-      typedef typename base_type::result_type result_type;\n-\n-      // parameter values\n-      static const int block_size = __p;\n-      static const int used_block = __r;\n-\n-      /**\n-       * Constructs a default %discard_block engine.\n-       *\n-       * The underlying engine is default constructed as well.\n-       */\n-      discard_block()\n-      : _M_n(0) { }\n-\n-      /**\n-       * Copy constructs a %discard_block engine.\n-       *\n-       * Copies an existing base class random number generator.\n-       * @param rng An existing (base class) engine object.\n-       */\n-      explicit\n-      discard_block(const base_type& __rng)\n-      : _M_b(__rng), _M_n(0) { }\n-\n-      /**\n-       * Seed constructs a %discard_block engine.\n-       *\n-       * Constructs the underlying generator engine seeded with @p __s.\n-       * @param __s A seed value for the base class engine.\n-       */\n-      explicit\n-      discard_block(unsigned long __s)\n-      : _M_b(__s), _M_n(0) { }\n-\n-      /**\n-       * Generator construct a %discard_block engine.\n-       *\n-       * @param __g A seed generator function.\n-       */\n-      template<class _Gen>\n-        discard_block(_Gen& __g)\n-\t: _M_b(__g), _M_n(0) { }\n-\n-      /**\n-       * Reseeds the %discard_block object with the default seed for the\n-       * underlying base class generator engine.\n-       */\n-      void seed()\n-      {\n-\t_M_b.seed();\n-\t_M_n = 0;\n-      }\n-\n-      /**\n-       * Reseeds the %discard_block object with the given seed generator\n-       * function.\n-       * @param __g A seed generator function.\n-       */\n-      template<class _Gen>\n-        void seed(_Gen& __g)\n-        {\n-\t  _M_b.seed(__g);\n-\t  _M_n = 0;\n-\t}\n-\n-      /**\n-       * Gets a const reference to the underlying generator engine object.\n-       */\n-      const base_type&\n-      base() const\n-      { return _M_b; }\n-\n-      /**\n-       * Gets the minimum value in the generated random number range.\n-       */\n-      result_type\n-      min() const\n-      { return _M_b.min(); }\n-\n-      /**\n-       * Gets the maximum value in the generated random number range.\n-       */\n-      result_type\n-      max() const\n-      { return _M_b.max(); }\n-\n-      /**\n-       * Gets the next value in the generated random number sequence.\n-       */\n-      result_type\n-      operator()();\n-\n-      /**\n-       * Compares two %discard_block random number generator objects of\n-       * the same type for equality.\n-       *\n-       * @param __lhs A %discard_block random number generator object.\n-       * @param __rhs Another %discard_block random number generator\n-       *              object.\n-       *\n-       * @returns true if the two objects are equal, false otherwise.\n-       */\n-      friend bool\n-      operator==(const discard_block& __lhs, const discard_block& __rhs)\n-      { return (__lhs._M_b == __rhs._M_b) && (__lhs._M_n == __rhs._M_n); }\n-\n-      /**\n-       * Compares two %discard_block random number generator objects of\n-       * the same type for inequality.\n-       *\n-       * @param __lhs A %discard_block random number generator object.\n-       * @param __rhs Another %discard_block random number generator\n-       *              object.\n-       *\n-       * @returns true if the two objects are not equal, false otherwise.\n-       */\n-      friend bool\n-      operator!=(const discard_block& __lhs, const discard_block& __rhs)\n-      { return !(__lhs == __rhs); }\n-\n-      /**\n-       * Inserts the current state of a %discard_block random number\n-       * generator engine @p __x into the output stream @p __os.\n-       *\n-       * @param __os An output stream.\n-       * @param __x  A %discard_block random number generator engine.\n-       *\n-       * @returns The output stream with the state of @p __x inserted or in\n-       * an error state.\n-       */\n-      template<class _UniformRandomNumberGenerator1, int __p1, int __r1,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_ostream<_CharT, _Traits>&\n-        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const discard_block<_UniformRandomNumberGenerator1,\n-\t\t   __p1, __r1>& __x);\n-\n-      /**\n-       * Extracts the current state of a % subtract_with_carry random number\n-       * generator engine @p __x from the input stream @p __is.\n-       *\n-       * @param __is An input stream.\n-       * @param __x  A %discard_block random number generator engine.\n-       *\n-       * @returns The input stream with the state of @p __x extracted or in\n-       * an error state.\n-       */\n-      template<class _UniformRandomNumberGenerator1, int __p1, int __r1,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_istream<_CharT, _Traits>&\n-        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   discard_block<_UniformRandomNumberGenerator1,\n-\t\t   __p1, __r1>& __x);\n-\n-    private:\n-      base_type _M_b;\n-      int       _M_n;\n-    };\n-\n-\n-  /**\n-   * James's luxury-level-3 integer adaptation of Luescher's generator.\n-   */\n-  typedef discard_block<\n-    subtract_with_carry<unsigned long, (1UL << 24), 10, 24>,\n-      223,\n-      24\n-      > ranlux3;\n-\n-  /**\n-   * James's luxury-level-4 integer adaptation of Luescher's generator.\n-   */\n-  typedef discard_block<\n-    subtract_with_carry<unsigned long, (1UL << 24), 10, 24>,\n-      389,\n-      24\n-      > ranlux4;\n-\n-  typedef discard_block<\n-    subtract_with_carry_01<float, 24, 10, 24>,\n-      223,\n-      24\n-      > ranlux3_01;\n-\n-  typedef discard_block<\n-    subtract_with_carry_01<float, 24, 10, 24>,\n-      389,\n-      24\n-      > ranlux4_01;\n-\n-\n-  /**\n-   * A random number generator adaptor class that combines two random number\n-   * generator engines into a single output sequence.\n-   */\n-  template<class _UniformRandomNumberGenerator1, int __s1,\n-\t   class _UniformRandomNumberGenerator2, int __s2>\n-    class xor_combine\n-    {\n-      // __glibcxx_class_requires(typename _UniformRandomNumberGenerator1::\n-      //                          result_type, ArithmeticTypeConcept)\n-      // __glibcxx_class_requires(typename _UniformRandomNumberGenerator2::\n-      //                          result_type, ArithmeticTypeConcept)\n-\n-    public:\n-      /** The type of the first underlying generator engine. */\n-      typedef _UniformRandomNumberGenerator1   base1_type;\n-      /** The type of the second underlying generator engine. */\n-      typedef _UniformRandomNumberGenerator2   base2_type;\n-\n-    private:\n-      typedef typename base1_type::result_type _Result_type1;\n-      typedef typename base2_type::result_type _Result_type2;\n-\n-    public:\n-      /** The type of the generated random value. */\n-      typedef typename __gnu_cxx::__conditional_type<(sizeof(_Result_type1)\n-\t\t\t\t\t\t      > sizeof(_Result_type2)),\n-\t_Result_type1, _Result_type2>::__type result_type;\n-\n-      // parameter values\n-      static const int shift1 = __s1;\n-      static const int shift2 = __s2;\n-\n-      // constructors and member function\n-      xor_combine()\n-      : _M_b1(), _M_b2()\t\n-      { _M_initialize_max(); }\n-\n-      xor_combine(const base1_type& __rng1, const base2_type& __rng2)\n-      : _M_b1(__rng1), _M_b2(__rng2)\n-      { _M_initialize_max(); }\n-\n-      xor_combine(unsigned long __s)\n-      : _M_b1(__s), _M_b2(__s + 1)\n-      { _M_initialize_max(); }\n-\n-      template<class _Gen>\n-        xor_combine(_Gen& __g)\n-\t: _M_b1(__g), _M_b2(__g)\n-        { _M_initialize_max(); }\n-\n-      void\n-      seed()\n-      {\n-\t_M_b1.seed();\n-\t_M_b2.seed();\n-      }\n-\n-      template<class _Gen>\n-        void\n-        seed(_Gen& __g)\n-        {\n-\t  _M_b1.seed(__g);\n-\t  _M_b2.seed(__g);\n-\t}\n-\n-      const base1_type&\n-      base1() const\n-      { return _M_b1; }\n-\n-      const base2_type&\n-      base2() const\n-      { return _M_b2; }\n-\n-      result_type\n-      min() const\n-      { return 0; }\n-\n-      result_type\n-      max() const\n-      { return _M_max; }\n-\n-      /**\n-       * Gets the next random number in the sequence.\n-       */\n-      // NB: Not exactly the TR1 formula, per N2079 instead.\n-      result_type\n-      operator()()\n-      {\n-\treturn ((result_type(_M_b1() - _M_b1.min()) << shift1)\n-\t\t^ (result_type(_M_b2() - _M_b2.min()) << shift2));\n-      }\n-\n-      /**\n-       * Compares two %xor_combine random number generator objects of\n-       * the same type for equality.\n-       *\n-       * @param __lhs A %xor_combine random number generator object.\n-       * @param __rhs Another %xor_combine random number generator\n-       *              object.\n-       *\n-       * @returns true if the two objects are equal, false otherwise.\n-       */\n-      friend bool\n-      operator==(const xor_combine& __lhs, const xor_combine& __rhs)\n-      {\n-\treturn (__lhs.base1() == __rhs.base1())\n-\t        && (__lhs.base2() == __rhs.base2());\n-      }\n-\n-      /**\n-       * Compares two %xor_combine random number generator objects of\n-       * the same type for inequality.\n-       *\n-       * @param __lhs A %xor_combine random number generator object.\n-       * @param __rhs Another %xor_combine random number generator\n-       *              object.\n-       *\n-       * @returns true if the two objects are not equal, false otherwise.\n-       */\n-      friend bool\n-      operator!=(const xor_combine& __lhs, const xor_combine& __rhs)\n-      { return !(__lhs == __rhs); }\n-\n-      /**\n-       * Inserts the current state of a %xor_combine random number\n-       * generator engine @p __x into the output stream @p __os.\n-       *\n-       * @param __os An output stream.\n-       * @param __x  A %xor_combine random number generator engine.\n-       *\n-       * @returns The output stream with the state of @p __x inserted or in\n-       * an error state.\n-       */\n-      template<class _UniformRandomNumberGenerator11, int __s11,\n-\t       class _UniformRandomNumberGenerator21, int __s21,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_ostream<_CharT, _Traits>&\n-        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const xor_combine<_UniformRandomNumberGenerator11, __s11,\n-\t\t   _UniformRandomNumberGenerator21, __s21>& __x);\n-\n-      /**\n-       * Extracts the current state of a %xor_combine random number\n-       * generator engine @p __x from the input stream @p __is.\n-       *\n-       * @param __is An input stream.\n-       * @param __x  A %xor_combine random number generator engine.\n-       *\n-       * @returns The input stream with the state of @p __x extracted or in\n-       * an error state.\n-       */\n-      template<class _UniformRandomNumberGenerator11, int __s11,\n-\t       class _UniformRandomNumberGenerator21, int __s21,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_istream<_CharT, _Traits>&\n-        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   xor_combine<_UniformRandomNumberGenerator11, __s11,\n-\t\t   _UniformRandomNumberGenerator21, __s21>& __x);\n-\n-    private:\n-      void\n-      _M_initialize_max();\n-\n-      result_type\n-      _M_initialize_max_aux(result_type, result_type, int);\n-\n-      base1_type  _M_b1;\n-      base2_type  _M_b2;\n-      result_type _M_max;\n-    };\n-\n-\n-  /**\n-   * A standard interface to a platform-specific non-deterministic\n-   * random number generator (if any are available).\n-   */\n-  class random_device\n-  {\n-  public:\n-    // types\n-    typedef unsigned int result_type;\n-\n-    // constructors, destructors and member functions\n-\n-#ifdef _GLIBCXX_USE_RANDOM_TR1\n-\n-    explicit\n-    random_device(const std::string& __token = \"/dev/urandom\")\n-    {\n-      if ((__token != \"/dev/urandom\" && __token != \"/dev/random\")\n-\t  || !(_M_file = std::fopen(__token.c_str(), \"rb\")))\n-\tstd::__throw_runtime_error(__N(\"random_device::\"\n-\t\t\t\t       \"random_device(const std::string&)\"));\n-    }\n-\n-    ~random_device()\n-    { std::fclose(_M_file); }\n-\n-#else\n-\n-    explicit\n-    random_device(const std::string& __token = \"mt19937\")\n-    : _M_mt(_M_strtoul(__token)) { }\n-\n-  private:\n-    static unsigned long\n-    _M_strtoul(const std::string& __str)\n-    {\n-      unsigned long __ret = 5489UL;\n-      if (__str != \"mt19937\")\n-\t{\n-\t  const char* __nptr = __str.c_str();\n-\t  char* __endptr;\n-\t  __ret = std::strtoul(__nptr, &__endptr, 0);\n-\t  if (*__nptr == '\\0' || *__endptr != '\\0')\n-\t    std::__throw_runtime_error(__N(\"random_device::_M_strtoul\"\n-\t\t\t\t\t   \"(const std::string&)\"));\n-\t}\n-      return __ret;\n-    }\n-\n-  public:\n-\n-#endif\n-\n-    result_type\n-    min() const\n-    { return std::numeric_limits<result_type>::min(); }\n-\n-    result_type\n-    max() const\n-    { return std::numeric_limits<result_type>::max(); }\n-\n-    double\n-    entropy() const\n-    { return 0.0; }\n-\n-    result_type\n-    operator()()\n-    {\n-#ifdef _GLIBCXX_USE_RANDOM_TR1\n-      result_type __ret;\n-      std::fread(reinterpret_cast<void*>(&__ret), sizeof(result_type),\n-\t\t 1, _M_file);\n-      return __ret;\n-#else\n-      return _M_mt();\n-#endif\n-    }\n-\n-  private:\n-    random_device(const random_device&);\n-    void operator=(const random_device&);\n-\n-#ifdef _GLIBCXX_USE_RANDOM_TR1\n-    FILE*        _M_file;\n-#else\n-    mt19937      _M_mt;\n-#endif\n-  };\n-\n-  /* @} */ // group tr1_random_generators\n-\n-  /**\n-   * @defgroup tr1_random_distributions Random Number Distributions\n-   * @ingroup tr1_random\n-   * @{\n-   */\n-\n-  /**\n-   * @defgroup tr1_random_distributions_discrete Discrete Distributions\n-   * @ingroup tr1_random_distributions\n-   * @{\n-   */\n-\n-  /**\n-   * @brief Uniform discrete distribution for random numbers.\n-   * A discrete random distribution on the range @f$[min, max]@f$ with equal\n-   * probability throughout the range.\n-   */\n-  template<typename _IntType = int>\n-    class uniform_int\n-    {\n-      __glibcxx_class_requires(_IntType, _IntegerConcept)\n- \n-    public:\n-      /** The type of the parameters of the distribution. */\n-      typedef _IntType input_type;\n-      /** The type of the range of the distribution. */\n-      typedef _IntType result_type;\n-\n-    public:\n-      /**\n-       * Constructs a uniform distribution object.\n-       */\n-      explicit\n-      uniform_int(_IntType __min = 0, _IntType __max = 9)\n-      : _M_min(__min), _M_max(__max)\n-      {\n-\t_GLIBCXX_DEBUG_ASSERT(_M_min <= _M_max);\n-      }\n-\n-      /**\n-       * Gets the inclusive lower bound of the distribution range.\n-       */\n-      result_type\n-      min() const\n-      { return _M_min; }\n-\n-      /**\n-       * Gets the inclusive upper bound of the distribution range.\n-       */\n-      result_type\n-      max() const\n-      { return _M_max; }\n-\n-      /**\n-       * Resets the distribution state.\n-       *\n-       * Does nothing for the uniform integer distribution.\n-       */\n-      void\n-      reset() { }\n-\n-      /**\n-       * Gets a uniformly distributed random number in the range\n-       * @f$(min, max)@f$.\n-       */\n-      template<typename _UniformRandomNumberGenerator>\n-        result_type\n-        operator()(_UniformRandomNumberGenerator& __urng)\n-        {\n-\t  typedef typename _UniformRandomNumberGenerator::result_type\n-\t    _UResult_type;\n-\t  return _M_call(__urng, _M_min, _M_max,\n-\t\t\t typename is_integral<_UResult_type>::type());\n-\t}\n-\n-      /**\n-       * Gets a uniform random number in the range @f$[0, n)@f$.\n-       *\n-       * This function is aimed at use with std::random_shuffle.\n-       */\n-      template<typename _UniformRandomNumberGenerator>\n-        result_type\n-        operator()(_UniformRandomNumberGenerator& __urng, result_type __n)\n-        {\n-\t  typedef typename _UniformRandomNumberGenerator::result_type\n-\t    _UResult_type;\n-\t  return _M_call(__urng, 0, __n - 1,\n-\t\t\t typename is_integral<_UResult_type>::type());\n-\t}\n-\n-      /**\n-       * Inserts a %uniform_int random number distribution @p __x into the\n-       * output stream @p os.\n-       *\n-       * @param __os An output stream.\n-       * @param __x  A %uniform_int random number distribution.\n-       *\n-       * @returns The output stream with the state of @p __x inserted or in\n-       * an error state.\n-       */\n-      template<typename _IntType1, typename _CharT, typename _Traits>\n-        friend std::basic_ostream<_CharT, _Traits>&\n-        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const uniform_int<_IntType1>& __x);\n-\n-      /**\n-       * Extracts a %uniform_int random number distribution\n-       * @p __x from the input stream @p __is.\n-       *\n-       * @param __is An input stream.\n-       * @param __x  A %uniform_int random number generator engine.\n-       *\n-       * @returns The input stream with @p __x extracted or in an error state.\n-       */\n-      template<typename _IntType1, typename _CharT, typename _Traits>\n-        friend std::basic_istream<_CharT, _Traits>&\n-        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   uniform_int<_IntType1>& __x);\n-\n-    private:\n-      template<typename _UniformRandomNumberGenerator>\n-        result_type\n-        _M_call(_UniformRandomNumberGenerator& __urng,\n-\t\tresult_type __min, result_type __max, true_type);\n-\n-      template<typename _UniformRandomNumberGenerator>\n-        result_type\n-        _M_call(_UniformRandomNumberGenerator& __urng,\n-\t\tresult_type __min, result_type __max, false_type)\n-        {\n-\t  return result_type((__urng() - __urng.min())\n-\t\t\t     / (__urng.max() - __urng.min())\n-\t\t\t     * (__max - __min + 1)) + __min;\n-\t}\n-\n-      _IntType _M_min;\n-      _IntType _M_max;\n-    };\n-\n-\n-  /**\n-   * @brief A Bernoulli random number distribution.\n-   *\n-   * Generates a sequence of true and false values with likelihood @f$ p @f$\n-   * that true will come up and @f$ (1 - p) @f$ that false will appear.\n-   */\n-  class bernoulli_distribution\n-  {\n-  public:\n-    typedef int  input_type;\n-    typedef bool result_type;\n-\n-  public:\n-    /**\n-     * Constructs a Bernoulli distribution with likelihood @p p.\n-     *\n-     * @param __p  [IN]  The likelihood of a true result being returned.  Must\n-     * be in the interval @f$ [0, 1] @f$.\n-     */\n-    explicit\n-    bernoulli_distribution(double __p = 0.5)\n-    : _M_p(__p)\n-    { \n-      _GLIBCXX_DEBUG_ASSERT((_M_p >= 0.0) && (_M_p <= 1.0));\n-    }\n-\n-    /**\n-     * Gets the @p p parameter of the distribution.\n-     */\n-    double\n-    p() const\n-    { return _M_p; }\n-\n-    /**\n-     * Resets the distribution state.\n-     *\n-     * Does nothing for a Bernoulli distribution.\n-     */\n-    void\n-    reset() { }\n-\n-    /**\n-     * Gets the next value in the Bernoullian sequence.\n-     */\n-    template<class _UniformRandomNumberGenerator>\n-      result_type\n-      operator()(_UniformRandomNumberGenerator& __urng)\n-      {\n-\tif ((__urng() - __urng.min()) < _M_p * (__urng.max() - __urng.min()))\n-\t  return true;\n-\treturn false;\n-      }\n-\n-    /**\n-     * Inserts a %bernoulli_distribution random number distribution\n-     * @p __x into the output stream @p __os.\n-     *\n-     * @param __os An output stream.\n-     * @param __x  A %bernoulli_distribution random number distribution.\n-     *\n-     * @returns The output stream with the state of @p __x inserted or in\n-     * an error state.\n-     */\n-    template<typename _CharT, typename _Traits>\n-      friend std::basic_ostream<_CharT, _Traits>&\n-      operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t const bernoulli_distribution& __x);\n-\n-    /**\n-     * Extracts a %bernoulli_distribution random number distribution\n-     * @p __x from the input stream @p __is.\n-     *\n-     * @param __is An input stream.\n-     * @param __x  A %bernoulli_distribution random number generator engine.\n-     *\n-     * @returns The input stream with @p __x extracted or in an error state.\n-     */\n-    template<typename _CharT, typename _Traits>\n-      friend std::basic_istream<_CharT, _Traits>&\n-      operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t bernoulli_distribution& __x)\n-      { return __is >> __x._M_p; }\n-\n-  private:\n-    double _M_p;\n-  };\n-\n-\n-  /**\n-   * @brief A discrete geometric random number distribution.\n-   *\n-   * The formula for the geometric probability mass function is \n-   * @f$ p(i) = (1 - p)p^{i-1} @f$ where @f$ p @f$ is the parameter of the\n-   * distribution.\n-   */\n-  template<typename _IntType = int, typename _RealType = double>\n-    class geometric_distribution\n-    {\n-    public:\n-      // types\n-      typedef _RealType input_type;\n-      typedef _IntType  result_type;\n-\n-      // constructors and member function\n-      explicit\n-      geometric_distribution(const _RealType& __p = _RealType(0.5))\n-      : _M_p(__p)\n-      {\n-\t_GLIBCXX_DEBUG_ASSERT((_M_p > 0.0) && (_M_p < 1.0));\n-\t_M_initialize();\n-      }\n-\n-      /**\n-       * Gets the distribution parameter @p p.\n-       */\n-      _RealType\n-      p() const\n-      { return _M_p; }\n-\n-      void\n-      reset() { }\n-\n-      template<class _UniformRandomNumberGenerator>\n-        result_type\n-        operator()(_UniformRandomNumberGenerator& __urng);\n-\n-      /**\n-       * Inserts a %geometric_distribution random number distribution\n-       * @p __x into the output stream @p __os.\n-       *\n-       * @param __os An output stream.\n-       * @param __x  A %geometric_distribution random number distribution.\n-       *\n-       * @returns The output stream with the state of @p __x inserted or in\n-       * an error state.\n-       */\n-      template<typename _IntType1, typename _RealType1,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_ostream<_CharT, _Traits>&\n-        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const geometric_distribution<_IntType1, _RealType1>& __x);\n-\n-      /**\n-       * Extracts a %geometric_distribution random number distribution\n-       * @p __x from the input stream @p __is.\n-       *\n-       * @param __is An input stream.\n-       * @param __x  A %geometric_distribution random number generator engine.\n-       *\n-       * @returns The input stream with @p __x extracted or in an error state.\n-       */\n-      template<typename _CharT, typename _Traits>\n-        friend std::basic_istream<_CharT, _Traits>&\n-        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   geometric_distribution& __x)\n-        {\n-\t  __is >> __x._M_p;\n-\t  __x._M_initialize();\n-\t  return __is;\n-\t}\n-\n-    private:\n-      void\n-      _M_initialize()\n-      { _M_log_p = std::log(_M_p); }\n-\n-      _RealType _M_p;\n-      _RealType _M_log_p;\n-    };\n-\n-\n-  template<typename _RealType>\n-    class normal_distribution;\n-\n-  /**\n-   * @brief A discrete Poisson random number distribution.\n-   *\n-   * The formula for the Poisson probability mass function is\n-   * @f$ p(i) = \\frac{mean^i}{i!} e^{-mean} @f$ where @f$ mean @f$ is the\n-   * parameter of the distribution.\n-   */\n-  template<typename _IntType = int, typename _RealType = double>\n-    class poisson_distribution\n-    {\n-    public:\n-      // types\n-      typedef _RealType input_type;\n-      typedef _IntType  result_type;\n-\n-      // constructors and member function\n-      explicit\n-      poisson_distribution(const _RealType& __mean = _RealType(1))\n-      : _M_mean(__mean), _M_nd()\n-      {\n-\t_GLIBCXX_DEBUG_ASSERT(_M_mean > 0.0);\n-\t_M_initialize();\n-      }\n-\n-      /**\n-       * Gets the distribution parameter @p mean.\n-       */\n-      _RealType\n-      mean() const\n-      { return _M_mean; }\n-\n-      void\n-      reset()\n-      { _M_nd.reset(); }\n-\n-      template<class _UniformRandomNumberGenerator>\n-        result_type\n-        operator()(_UniformRandomNumberGenerator& __urng);\n-\n-      /**\n-       * Inserts a %poisson_distribution random number distribution\n-       * @p __x into the output stream @p __os.\n-       *\n-       * @param __os An output stream.\n-       * @param __x  A %poisson_distribution random number distribution.\n-       *\n-       * @returns The output stream with the state of @p __x inserted or in\n-       * an error state.\n-       */\n-      template<typename _IntType1, typename _RealType1,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_ostream<_CharT, _Traits>&\n-        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const poisson_distribution<_IntType1, _RealType1>& __x);\n-\n-      /**\n-       * Extracts a %poisson_distribution random number distribution\n-       * @p __x from the input stream @p __is.\n-       *\n-       * @param __is An input stream.\n-       * @param __x  A %poisson_distribution random number generator engine.\n-       *\n-       * @returns The input stream with @p __x extracted or in an error state.\n-       */\n-      template<typename _IntType1, typename _RealType1,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_istream<_CharT, _Traits>&\n-        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   poisson_distribution<_IntType1, _RealType1>& __x);\n-\n-    private:\n-      void\n-      _M_initialize();\n-\n-      // NB: Unused when _GLIBCXX_USE_C99_MATH_TR1 is undefined.\n-      normal_distribution<_RealType> _M_nd;\n-\n-      _RealType _M_mean;\n-\n-      // Hosts either log(mean) or the threshold of the simple method.\n-      _RealType _M_lm_thr;\n-#if _GLIBCXX_USE_C99_MATH_TR1\n-      _RealType _M_lfm, _M_sm, _M_d, _M_scx, _M_1cx, _M_c2b, _M_cb;\n-#endif\n-    };\n-\n-\n-  /**\n-   * @brief A discrete binomial random number distribution.\n-   *\n-   * The formula for the binomial probability mass function is \n-   * @f$ p(i) = \\binom{n}{i} p^i (1 - p)^{t - i} @f$ where @f$ t @f$\n-   * and @f$ p @f$ are the parameters of the distribution.\n-   */\n-  template<typename _IntType = int, typename _RealType = double>\n-    class binomial_distribution\n-    {\n-    public:\n-      // types\n-      typedef _RealType input_type;\n-      typedef _IntType  result_type;\n-\n-      // constructors and member function\n-      explicit\n-      binomial_distribution(_IntType __t = 1,\n-\t\t\t    const _RealType& __p = _RealType(0.5))\n-      : _M_t(__t), _M_p(__p), _M_nd()\n-      {\n-\t_GLIBCXX_DEBUG_ASSERT((_M_t >= 0) && (_M_p >= 0.0) && (_M_p <= 1.0));\n-\t_M_initialize();\n-      }\n-\n-      /**\n-       * Gets the distribution @p t parameter.\n-       */\n-      _IntType\n-      t() const\n-      { return _M_t; }\n-      \n-      /**\n-       * Gets the distribution @p p parameter.\n-       */\n-      _RealType\n-      p() const\n-      { return _M_p; }\n-\n-      void\n-      reset()\n-      { _M_nd.reset(); }\n-\n-      template<class _UniformRandomNumberGenerator>\n-        result_type\n-        operator()(_UniformRandomNumberGenerator& __urng);\n-\n-      /**\n-       * Inserts a %binomial_distribution random number distribution\n-       * @p __x into the output stream @p __os.\n-       *\n-       * @param __os An output stream.\n-       * @param __x  A %binomial_distribution random number distribution.\n-       *\n-       * @returns The output stream with the state of @p __x inserted or in\n-       * an error state.\n-       */\n-      template<typename _IntType1, typename _RealType1,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_ostream<_CharT, _Traits>&\n-        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const binomial_distribution<_IntType1, _RealType1>& __x);\n-\n-      /**\n-       * Extracts a %binomial_distribution random number distribution\n-       * @p __x from the input stream @p __is.\n-       *\n-       * @param __is An input stream.\n-       * @param __x  A %binomial_distribution random number generator engine.\n-       *\n-       * @returns The input stream with @p __x extracted or in an error state.\n-       */\n-      template<typename _IntType1, typename _RealType1,\n-\t       typename _CharT, typename _Traits>\n-        friend std::basic_istream<_CharT, _Traits>&\n-        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   binomial_distribution<_IntType1, _RealType1>& __x);\n-\n-    private:\n-      void\n-      _M_initialize();\n-\n-      template<class _UniformRandomNumberGenerator>\n-        result_type\n-        _M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t);\n-\n-      // NB: Unused when _GLIBCXX_USE_C99_MATH_TR1 is undefined.\n-      normal_distribution<_RealType> _M_nd;\n-\n-      _RealType _M_q;\n-#if _GLIBCXX_USE_C99_MATH_TR1\n-      _RealType _M_d1, _M_d2, _M_s1, _M_s2, _M_c,\n-\t        _M_a1, _M_a123, _M_s, _M_lf, _M_lp1p;\n-#endif\n-      _RealType _M_p;\n-      _IntType  _M_t;\n-\n-      bool      _M_easy;\n-    };\n-\n-  /* @} */ // group tr1_random_distributions_discrete\n-\n-  /**\n-   * @defgroup tr1_random_distributions_continuous Continuous Distributions\n-   * @ingroup tr1_random_distributions\n-   * @{\n-   */\n-\n-  /**\n-   * @brief Uniform continuous distribution for random numbers.\n-   *\n-   * A continuous random distribution on the range [min, max) with equal\n-   * probability throughout the range.  The URNG should be real-valued and\n-   * deliver number in the range [0, 1).\n-   */\n-  template<typename _RealType = double>\n-    class uniform_real\n-    {\n-    public:\n-      // types\n-      typedef _RealType input_type;\n-      typedef _RealType result_type;\n-\n-    public:\n-      /**\n-       * Constructs a uniform_real object.\n-       *\n-       * @param __min [IN]  The lower bound of the distribution.\n-       * @param __max [IN]  The upper bound of the distribution.\n-       */\n-      explicit\n-      uniform_real(_RealType __min = _RealType(0),\n-\t\t   _RealType __max = _RealType(1))\n-      : _M_min(__min), _M_max(__max)\n-      {\n-\t_GLIBCXX_DEBUG_ASSERT(_M_min <= _M_max);\n-      }\n-\n-      result_type\n-      min() const\n-      { return _M_min; }\n-\n-      result_type\n-      max() const\n-      { return _M_max; }\n-\n-      void\n-      reset() { }\n-\n-      template<class _UniformRandomNumberGenerator>\n-        result_type\n-        operator()(_UniformRandomNumberGenerator& __urng)\n-        { return (__urng() * (_M_max - _M_min)) + _M_min; }\n-\n-      /**\n-       * Inserts a %uniform_real random number distribution @p __x into the\n-       * output stream @p __os.\n-       *\n-       * @param __os An output stream.\n-       * @param __x  A %uniform_real random number distribution.\n-       *\n-       * @returns The output stream with the state of @p __x inserted or in\n-       * an error state.\n-       */\n-      template<typename _RealType1, typename _CharT, typename _Traits>\n-        friend std::basic_ostream<_CharT, _Traits>&\n-        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const uniform_real<_RealType1>& __x);\n-\n-      /**\n-       * Extracts a %uniform_real random number distribution\n-       * @p __x from the input stream @p __is.\n-       *\n-       * @param __is An input stream.\n-       * @param __x  A %uniform_real random number generator engine.\n-       *\n-       * @returns The input stream with @p __x extracted or in an error state.\n-       */\n-      template<typename _RealType1, typename _CharT, typename _Traits>\n-        friend std::basic_istream<_CharT, _Traits>&\n-        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   uniform_real<_RealType1>& __x);\n-\n-    private:\n-      _RealType _M_min;\n-      _RealType _M_max;\n-    };\n-\n-\n-  /**\n-   * @brief An exponential continuous distribution for random numbers.\n-   *\n-   * The formula for the exponential probability mass function is \n-   * @f$ p(x) = \\lambda e^{-\\lambda x} @f$.\n-   *\n-   * <table border=1 cellpadding=10 cellspacing=0>\n-   * <caption align=top>Distribution Statistics</caption>\n-   * <tr><td>Mean</td><td>@f$ \\frac{1}{\\lambda} @f$</td></tr>\n-   * <tr><td>Median</td><td>@f$ \\frac{\\ln 2}{\\lambda} @f$</td></tr>\n-   * <tr><td>Mode</td><td>@f$ zero @f$</td></tr>\n-   * <tr><td>Range</td><td>@f$[0, \\infty]@f$</td></tr>\n-   * <tr><td>Standard Deviation</td><td>@f$ \\frac{1}{\\lambda} @f$</td></tr>\n-   * </table>\n-   */\n-  template<typename _RealType = double>\n-    class exponential_distribution\n-    {\n-    public:\n-      // types\n-      typedef _RealType input_type;\n-      typedef _RealType result_type;\n-\n-    public:\n-      /**\n-       * Constructs an exponential distribution with inverse scale parameter\n-       * @f$ \\lambda @f$.\n-       */\n-      explicit\n-      exponential_distribution(const result_type& __lambda = result_type(1))\n-      : _M_lambda(__lambda)\n-      { \n-\t_GLIBCXX_DEBUG_ASSERT(_M_lambda > 0);\n-      }\n-\n-      /**\n-       * Gets the inverse scale parameter of the distribution.\n-       */\n-      _RealType\n-      lambda() const\n-      { return _M_lambda; }\n-\n-      /**\n-       * Resets the distribution.\n-       *\n-       * Has no effect on exponential distributions.\n-       */\n-      void\n-      reset() { }\n-\n-      template<class _UniformRandomNumberGenerator>\n-        result_type\n-        operator()(_UniformRandomNumberGenerator& __urng)\n-        { return -std::log(__urng()) / _M_lambda; }\n-\n-      /**\n-       * Inserts a %exponential_distribution random number distribution\n-       * @p __x into the output stream @p __os.\n-       *\n-       * @param __os An output stream.\n-       * @param __x  A %exponential_distribution random number distribution.\n-       *\n-       * @returns The output stream with the state of @p __x inserted or in\n-       * an error state.\n-       */\n-      template<typename _RealType1, typename _CharT, typename _Traits>\n-        friend std::basic_ostream<_CharT, _Traits>&\n-        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const exponential_distribution<_RealType1>& __x);\n-\n-      /**\n-       * Extracts a %exponential_distribution random number distribution\n-       * @p __x from the input stream @p __is.\n-       *\n-       * @param __is An input stream.\n-       * @param __x A %exponential_distribution random number\n-       *            generator engine.\n-       *\n-       * @returns The input stream with @p __x extracted or in an error state.\n-       */\n-      template<typename _CharT, typename _Traits>\n-        friend std::basic_istream<_CharT, _Traits>&\n-        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   exponential_distribution& __x)\n-        { return __is >> __x._M_lambda; }\n-\n-    private:\n-      result_type _M_lambda;\n-    };\n-\n-\n-  /**\n-   * @brief A normal continuous distribution for random numbers.\n-   *\n-   * The formula for the normal probability mass function is \n-   * @f$ p(x) = \\frac{1}{\\sigma \\sqrt{2 \\pi}} \n-   *            e^{- \\frac{{x - mean}^ {2}}{2 \\sigma ^ {2}} } @f$.\n-   */\n-  template<typename _RealType = double>\n-    class normal_distribution\n-    {\n-    public:\n-      // types\n-      typedef _RealType input_type;\n-      typedef _RealType result_type;\n-\n-    public:\n-      /**\n-       * Constructs a normal distribution with parameters @f$ mean @f$ and\n-       * @f$ \\sigma @f$.\n-       */\n-      explicit\n-      normal_distribution(const result_type& __mean = result_type(0),\n-\t\t\t  const result_type& __sigma = result_type(1))\n-      : _M_mean(__mean), _M_sigma(__sigma), _M_saved_available(false)\n-      { \n-\t_GLIBCXX_DEBUG_ASSERT(_M_sigma > 0);\n-      }\n-\n-      /**\n-       * Gets the mean of the distribution.\n-       */\n-      _RealType\n-      mean() const\n-      { return _M_mean; }\n-\n-      /**\n-       * Gets the @f$ \\sigma @f$ of the distribution.\n-       */\n-      _RealType\n-      sigma() const\n-      { return _M_sigma; }\n-\n-      /**\n-       * Resets the distribution.\n-       */\n-      void\n-      reset()\n-      { _M_saved_available = false; }\n-\n-      template<class _UniformRandomNumberGenerator>\n-        result_type\n-        operator()(_UniformRandomNumberGenerator& __urng);\n-\n-      /**\n-       * Inserts a %normal_distribution random number distribution\n-       * @p __x into the output stream @p __os.\n-       *\n-       * @param __os An output stream.\n-       * @param __x  A %normal_distribution random number distribution.\n-       *\n-       * @returns The output stream with the state of @p __x inserted or in\n-       * an error state.\n-       */\n-      template<typename _RealType1, typename _CharT, typename _Traits>\n-        friend std::basic_ostream<_CharT, _Traits>&\n-        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const normal_distribution<_RealType1>& __x);\n-\n-      /**\n-       * Extracts a %normal_distribution random number distribution\n-       * @p __x from the input stream @p __is.\n-       *\n-       * @param __is An input stream.\n-       * @param __x  A %normal_distribution random number generator engine.\n-       *\n-       * @returns The input stream with @p __x extracted or in an error state.\n-       */\n-      template<typename _RealType1, typename _CharT, typename _Traits>\n-        friend std::basic_istream<_CharT, _Traits>&\n-        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   normal_distribution<_RealType1>& __x);\n-\n-    private:\n-      result_type _M_mean;\n-      result_type _M_sigma;\n-      result_type _M_saved;\n-      bool        _M_saved_available;     \n-    };\n-\n-\n-  /**\n-   * @brief A gamma continuous distribution for random numbers.\n-   *\n-   * The formula for the gamma probability mass function is \n-   * @f$ p(x) = \\frac{1}{\\Gamma(\\alpha)} x^{\\alpha - 1} e^{-x} @f$.\n-   */\n-  template<typename _RealType = double>\n-    class gamma_distribution\n-    {\n-    public:\n-      // types\n-      typedef _RealType input_type;\n-      typedef _RealType result_type;\n-\n-    public:\n-      /**\n-       * Constructs a gamma distribution with parameters @f$ \\alpha @f$.\n-       */\n-      explicit\n-      gamma_distribution(const result_type& __alpha_val = result_type(1))\n-      : _M_alpha(__alpha_val)\n-      { \n-\t_GLIBCXX_DEBUG_ASSERT(_M_alpha > 0);\n-\t_M_initialize();\n-      }\n-\n-      /**\n-       * Gets the @f$ \\alpha @f$ of the distribution.\n-       */\n-      _RealType\n-      alpha() const\n-      { return _M_alpha; }\n-\n-      /**\n-       * Resets the distribution.\n-       */\n-      void\n-      reset() { }\n-\n-      template<class _UniformRandomNumberGenerator>\n-        result_type\n-        operator()(_UniformRandomNumberGenerator& __urng);\n-\n-      /**\n-       * Inserts a %gamma_distribution random number distribution\n-       * @p __x into the output stream @p __os.\n-       *\n-       * @param __os An output stream.\n-       * @param __x  A %gamma_distribution random number distribution.\n-       *\n-       * @returns The output stream with the state of @p __x inserted or in\n-       * an error state.\n-       */\n-      template<typename _RealType1, typename _CharT, typename _Traits>\n-        friend std::basic_ostream<_CharT, _Traits>&\n-        operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t\t   const gamma_distribution<_RealType1>& __x);\n-\n-      /**\n-       * Extracts a %gamma_distribution random number distribution\n-       * @p __x from the input stream @p __is.\n-       *\n-       * @param __is An input stream.\n-       * @param __x  A %gamma_distribution random number generator engine.\n-       *\n-       * @returns The input stream with @p __x extracted or in an error state.\n-       */\n-      template<typename _CharT, typename _Traits>\n-        friend std::basic_istream<_CharT, _Traits>&\n-        operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t\t   gamma_distribution& __x)\n-        {\n-\t  __is >> __x._M_alpha;\n-\t  __x._M_initialize();\n-\t  return __is;\n-\t}\n-\n-    private:\n-      void\n-      _M_initialize();\n-\n-      result_type _M_alpha;\n-\n-      // Hosts either lambda of GB or d of modified Vaduva's.\n-      result_type _M_l_d;\n-    };\n-\n-  /* @} */ // group tr1_random_distributions_continuous\n-  /* @} */ // group tr1_random_distributions\n-  /* @} */ // group tr1_random\n-\n-_GLIBCXX_END_NAMESPACE_TR1\n-}\n-\n-#include <tr1_impl/random.tcc>"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libstdc++-v3/include/tr1_impl/random.tcc", "status": "modified", "additions": 0, "deletions": 1582, "changes": 1582, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Frandom.tcc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -1,1582 +0,0 @@\n-// random number generation (out of line) -*- C++ -*-\n-\n-// Copyright (C) 2007 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-/** @file tr1_impl/random.tcc\n- *  This is an internal header file, included by other library headers.\n- *  You should not attempt to use it directly.\n- */\n-\n-namespace std\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_TR1\n-\n-  /*\n-   * (Further) implementation-space details.\n-   */\n-  namespace __detail\n-  {\n-    // General case for x = (ax + c) mod m -- use Schrage's algorithm to avoid\n-    // integer overflow.\n-    //\n-    // Because a and c are compile-time integral constants the compiler kindly\n-    // elides any unreachable paths.\n-    //\n-    // Preconditions:  a > 0, m > 0.\n-    //\n-    template<typename _Tp, _Tp __a, _Tp __c, _Tp __m, bool>\n-      struct _Mod\n-      {\n-\tstatic _Tp\n-\t__calc(_Tp __x)\n-\t{\n-\t  if (__a == 1)\n-\t    __x %= __m;\n-\t  else\n-\t    {\n-\t      static const _Tp __q = __m / __a;\n-\t      static const _Tp __r = __m % __a;\n-\t      \n-\t      _Tp __t1 = __a * (__x % __q);\n-\t      _Tp __t2 = __r * (__x / __q);\n-\t      if (__t1 >= __t2)\n-\t\t__x = __t1 - __t2;\n-\t      else\n-\t\t__x = __m - __t2 + __t1;\n-\t    }\n-\n-\t  if (__c != 0)\n-\t    {\n-\t      const _Tp __d = __m - __x;\n-\t      if (__d > __c)\n-\t\t__x += __c;\n-\t      else\n-\t\t__x = __c - __d;\n-\t    }\n-\t  return __x;\n-\t}\n-      };\n-\n-    // Special case for m == 0 -- use unsigned integer overflow as modulo\n-    // operator.\n-    template<typename _Tp, _Tp __a, _Tp __c, _Tp __m>\n-      struct _Mod<_Tp, __a, __c, __m, true>\n-      {\n-\tstatic _Tp\n-\t__calc(_Tp __x)\n-\t{ return __a * __x + __c; }\n-      };\n-  } // namespace __detail\n-\n-  /**\n-   * Seeds the LCR with integral value @p __x0, adjusted so that the \n-   * ring identity is never a member of the convergence set.\n-   */\n-  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n-    void\n-    linear_congruential<_UIntType, __a, __c, __m>::\n-    seed(unsigned long __x0)\n-    {\n-      if ((__detail::__mod<_UIntType, 1, 0, __m>(__c) == 0)\n-\t  && (__detail::__mod<_UIntType, 1, 0, __m>(__x0) == 0))\n-\t_M_x = __detail::__mod<_UIntType, 1, 0, __m>(1);\n-      else\n-\t_M_x = __detail::__mod<_UIntType, 1, 0, __m>(__x0);\n-    }\n-\n-  /**\n-   * Seeds the LCR engine with a value generated by @p __g.\n-   */\n-  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n-    template<class _Gen>\n-      void\n-      linear_congruential<_UIntType, __a, __c, __m>::\n-      seed(_Gen& __g, false_type)\n-      {\n-\t_UIntType __x0 = __g();\n-\tif ((__detail::__mod<_UIntType, 1, 0, __m>(__c) == 0)\n-\t    && (__detail::__mod<_UIntType, 1, 0, __m>(__x0) == 0))\n-\t  _M_x = __detail::__mod<_UIntType, 1, 0, __m>(1);\n-\telse\n-\t  _M_x = __detail::__mod<_UIntType, 1, 0, __m>(__x0);\n-      }\n-\n-  /**\n-   * Gets the next generated value in sequence.\n-   */\n-  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n-    typename linear_congruential<_UIntType, __a, __c, __m>::result_type\n-    linear_congruential<_UIntType, __a, __c, __m>::\n-    operator()()\n-    {\n-      _M_x = __detail::__mod<_UIntType, __a, __c, __m>(_M_x);\n-      return _M_x;\n-    }\n-\n-  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const linear_congruential<_UIntType, __a, __c, __m>& __lcr)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n-      typedef typename __ostream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __os.flags();\n-      const _CharT __fill = __os.fill();\n-      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n-      __os.fill(__os.widen(' '));\n-\n-      __os << __lcr._M_x;\n-\n-      __os.flags(__flags);\n-      __os.fill(__fill);\n-      return __os;\n-    }\n-\n-  template<class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       linear_congruential<_UIntType, __a, __c, __m>& __lcr)\n-    {\n-      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n-      typedef typename __istream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(__ios_base::dec);\n-\n-      __is >> __lcr._M_x;\n-\n-      __is.flags(__flags);\n-      return __is;\n-    } \n-\n-\n-  template<class _UIntType, int __w, int __n, int __m, int __r,\n-\t   _UIntType __a, int __u, int __s,\n-\t   _UIntType __b, int __t, _UIntType __c, int __l>\n-    void\n-    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n-\t\t     __b, __t, __c, __l>::\n-    seed(unsigned long __value)\n-    {\n-      _M_x[0] = __detail::__mod<_UIntType, 1, 0,\n-\t__detail::_Shift<_UIntType, __w>::__value>(__value);\n-\n-      for (int __i = 1; __i < state_size; ++__i)\n-\t{\n-\t  _UIntType __x = _M_x[__i - 1];\n-\t  __x ^= __x >> (__w - 2);\n-\t  __x *= 1812433253ul;\n-\t  __x += __i;\n-\t  _M_x[__i] = __detail::__mod<_UIntType, 1, 0,\n-\t    __detail::_Shift<_UIntType, __w>::__value>(__x);\t  \n-\t}\n-      _M_p = state_size;\n-    }\n-\n-  template<class _UIntType, int __w, int __n, int __m, int __r,\n-\t   _UIntType __a, int __u, int __s,\n-\t   _UIntType __b, int __t, _UIntType __c, int __l>\n-    template<class _Gen>\n-      void\n-      mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n-\t\t       __b, __t, __c, __l>::\n-      seed(_Gen& __gen, false_type)\n-      {\n-\tfor (int __i = 0; __i < state_size; ++__i)\n-\t  _M_x[__i] = __detail::__mod<_UIntType, 1, 0,\n-\t    __detail::_Shift<_UIntType, __w>::__value>(__gen());\n-\t_M_p = state_size;\n-      }\n-\n-  template<class _UIntType, int __w, int __n, int __m, int __r,\n-\t   _UIntType __a, int __u, int __s,\n-\t   _UIntType __b, int __t, _UIntType __c, int __l>\n-    typename\n-    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n-\t\t     __b, __t, __c, __l>::result_type\n-    mersenne_twister<_UIntType, __w, __n, __m, __r, __a, __u, __s,\n-\t\t     __b, __t, __c, __l>::\n-    operator()()\n-    {\n-      // Reload the vector - cost is O(n) amortized over n calls.\n-      if (_M_p >= state_size)\n-\t{\n-\t  const _UIntType __upper_mask = (~_UIntType()) << __r;\n-\t  const _UIntType __lower_mask = ~__upper_mask;\n-\n-\t  for (int __k = 0; __k < (__n - __m); ++__k)\n-\t    {\n-\t      _UIntType __y = ((_M_x[__k] & __upper_mask)\n-\t\t\t       | (_M_x[__k + 1] & __lower_mask));\n-\t      _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)\n-\t\t\t   ^ ((__y & 0x01) ? __a : 0));\n-\t    }\n-\n-\t  for (int __k = (__n - __m); __k < (__n - 1); ++__k)\n-\t    {\n-\t      _UIntType __y = ((_M_x[__k] & __upper_mask)\n-\t\t\t       | (_M_x[__k + 1] & __lower_mask));\n-\t      _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)\n-\t\t\t   ^ ((__y & 0x01) ? __a : 0));\n-\t    }\n-\n-\t  _UIntType __y = ((_M_x[__n - 1] & __upper_mask)\n-\t\t\t   | (_M_x[0] & __lower_mask));\n-\t  _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)\n-\t\t\t   ^ ((__y & 0x01) ? __a : 0));\n-\t  _M_p = 0;\n-\t}\n-\n-      // Calculate o(x(i)).\n-      result_type __z = _M_x[_M_p++];\n-      __z ^= (__z >> __u);\n-      __z ^= (__z << __s) & __b;\n-      __z ^= (__z << __t) & __c;\n-      __z ^= (__z >> __l);\n-\n-      return __z;\n-    }\n-\n-  template<class _UIntType, int __w, int __n, int __m, int __r,\n-\t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n-\t   _UIntType __c, int __l,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const mersenne_twister<_UIntType, __w, __n, __m,\n-\t       __r, __a, __u, __s, __b, __t, __c, __l>& __x)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n-      typedef typename __ostream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __os.flags();\n-      const _CharT __fill = __os.fill();\n-      const _CharT __space = __os.widen(' ');\n-      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n-      __os.fill(__space);\n-\n-      for (int __i = 0; __i < __n - 1; ++__i)\n-\t__os << __x._M_x[__i] << __space;\n-      __os << __x._M_x[__n - 1];\n-\n-      __os.flags(__flags);\n-      __os.fill(__fill);\n-      return __os;\n-    }\n-\n-  template<class _UIntType, int __w, int __n, int __m, int __r,\n-\t   _UIntType __a, int __u, int __s, _UIntType __b, int __t,\n-\t   _UIntType __c, int __l,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       mersenne_twister<_UIntType, __w, __n, __m,\n-\t       __r, __a, __u, __s, __b, __t, __c, __l>& __x)\n-    {\n-      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n-      typedef typename __istream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(__ios_base::dec | __ios_base::skipws);\n-\n-      for (int __i = 0; __i < __n; ++__i)\n-\t__is >> __x._M_x[__i];\n-\n-      __is.flags(__flags);\n-      return __is;\n-    }\n-\n-\n-  template<typename _IntType, _IntType __m, int __s, int __r>\n-    void\n-    subtract_with_carry<_IntType, __m, __s, __r>::\n-    seed(unsigned long __value)\n-    {\n-      if (__value == 0)\n-\t__value = 19780503;\n-\n-      std::_GLIBCXX_TR1 linear_congruential<unsigned long, 40014, 0, 2147483563>\n-\t__lcg(__value);\n-\n-      for (int __i = 0; __i < long_lag; ++__i)\n-\t_M_x[__i] = __detail::__mod<_UIntType, 1, 0, modulus>(__lcg());\n-\n-      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n-      _M_p = 0;\n-    }\n-\n-  template<typename _IntType, _IntType __m, int __s, int __r>\n-    template<class _Gen>\n-      void\n-      subtract_with_carry<_IntType, __m, __s, __r>::\n-      seed(_Gen& __gen, false_type)\n-      {\n-\tconst int __n = (std::numeric_limits<_UIntType>::digits + 31) / 32;\n-\n-\tfor (int __i = 0; __i < long_lag; ++__i)\n-\t  {\n-\t    _UIntType __tmp = 0;\n-\t    _UIntType __factor = 1;\n-\t    for (int __j = 0; __j < __n; ++__j)\n-\t      {\n-\t\t__tmp += __detail::__mod<__detail::_UInt32Type, 1, 0, 0>\n-\t\t         (__gen()) * __factor;\n-\t\t__factor *= __detail::_Shift<_UIntType, 32>::__value;\n-\t      }\n-\t    _M_x[__i] = __detail::__mod<_UIntType, 1, 0, modulus>(__tmp);\n-\t  }\n-\t_M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;\n-\t_M_p = 0;\n-      }\n-\n-  template<typename _IntType, _IntType __m, int __s, int __r>\n-    typename subtract_with_carry<_IntType, __m, __s, __r>::result_type\n-    subtract_with_carry<_IntType, __m, __s, __r>::\n-    operator()()\n-    {\n-      // Derive short lag index from current index.\n-      int __ps = _M_p - short_lag;\n-      if (__ps < 0)\n-\t__ps += long_lag;\n-\n-      // Calculate new x(i) without overflow or division.\n-      // NB: Thanks to the requirements for _IntType, _M_x[_M_p] + _M_carry\n-      // cannot overflow.\n-      _UIntType __xi;\n-      if (_M_x[__ps] >= _M_x[_M_p] + _M_carry)\n-\t{\n-\t  __xi = _M_x[__ps] - _M_x[_M_p] - _M_carry;\n-\t  _M_carry = 0;\n-\t}\n-      else\n-\t{\n-\t  __xi = modulus - _M_x[_M_p] - _M_carry + _M_x[__ps];\n-\t  _M_carry = 1;\n-\t}\n-      _M_x[_M_p] = __xi;\n-\n-      // Adjust current index to loop around in ring buffer.\n-      if (++_M_p >= long_lag)\n-\t_M_p = 0;\n-\n-      return __xi;\n-    }\n-\n-  template<typename _IntType, _IntType __m, int __s, int __r,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const subtract_with_carry<_IntType, __m, __s, __r>& __x)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n-      typedef typename __ostream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __os.flags();\n-      const _CharT __fill = __os.fill();\n-      const _CharT __space = __os.widen(' ');\n-      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n-      __os.fill(__space);\n-\n-      for (int __i = 0; __i < __r; ++__i)\n-\t__os << __x._M_x[__i] << __space;\n-      __os << __x._M_carry;\n-\n-      __os.flags(__flags);\n-      __os.fill(__fill);\n-      return __os;\n-    }\n-\n-  template<typename _IntType, _IntType __m, int __s, int __r,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       subtract_with_carry<_IntType, __m, __s, __r>& __x)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __istream_type;\n-      typedef typename __istream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(__ios_base::dec | __ios_base::skipws);\n-\n-      for (int __i = 0; __i < __r; ++__i)\n-\t__is >> __x._M_x[__i];\n-      __is >> __x._M_carry;\n-\n-      __is.flags(__flags);\n-      return __is;\n-    }\n-\n-\n-  template<typename _RealType, int __w, int __s, int __r>\n-    void\n-    subtract_with_carry_01<_RealType, __w, __s, __r>::\n-    _M_initialize_npows()\n-    {\n-      for (int __j = 0; __j < __n; ++__j)\n-#if _GLIBCXX_USE_C99_MATH_TR1\n-\t_M_npows[__j] = std::_GLIBCXX_TR1 ldexp(_RealType(1), -__w + __j * 32);\n-#else\n-        _M_npows[__j] = std::pow(_RealType(2), -__w + __j * 32);\n-#endif\n-    }\n-\n-  template<typename _RealType, int __w, int __s, int __r>\n-    void\n-    subtract_with_carry_01<_RealType, __w, __s, __r>::\n-    seed(unsigned long __value)\n-    {\n-      if (__value == 0)\n-\t__value = 19780503;\n-\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 512. Seeding subtract_with_carry_01 from a single unsigned long.\n-      std::_GLIBCXX_TR1 linear_congruential<unsigned long, 40014, 0, 2147483563>\n-\t__lcg(__value);\n-\n-      this->seed(__lcg);\n-    }\n-\n-  template<typename _RealType, int __w, int __s, int __r>\n-    template<class _Gen>\n-      void\n-      subtract_with_carry_01<_RealType, __w, __s, __r>::\n-      seed(_Gen& __gen, false_type)\n-      {\n-\tfor (int __i = 0; __i < long_lag; ++__i)\n-\t  {\n-\t    for (int __j = 0; __j < __n - 1; ++__j)\n-\t      _M_x[__i][__j] = __detail::__mod<_UInt32Type, 1, 0, 0>(__gen());\n-\t    _M_x[__i][__n - 1] = __detail::__mod<_UInt32Type, 1, 0,\n-\t      __detail::_Shift<_UInt32Type, __w % 32>::__value>(__gen());\n-\t  }\n-\n-\t_M_carry = 1;\n-\tfor (int __j = 0; __j < __n; ++__j)\n-\t  if (_M_x[long_lag - 1][__j] != 0)\n-\t    {\n-\t      _M_carry = 0;\n-\t      break;\n-\t    }\n-\n-\t_M_p = 0;\n-      }\n-\n-  template<typename _RealType, int __w, int __s, int __r>\n-    typename subtract_with_carry_01<_RealType, __w, __s, __r>::result_type\n-    subtract_with_carry_01<_RealType, __w, __s, __r>::\n-    operator()()\n-    {\n-      // Derive short lag index from current index.\n-      int __ps = _M_p - short_lag;\n-      if (__ps < 0)\n-\t__ps += long_lag;\n-\n-      _UInt32Type __new_carry;\n-      for (int __j = 0; __j < __n - 1; ++__j)\n-\t{\n-\t  if (_M_x[__ps][__j] > _M_x[_M_p][__j]\n-\t      || (_M_x[__ps][__j] == _M_x[_M_p][__j] && _M_carry == 0))\n-\t    __new_carry = 0;\n-\t  else\n-\t    __new_carry = 1;\n-\n-\t  _M_x[_M_p][__j] = _M_x[__ps][__j] - _M_x[_M_p][__j] - _M_carry;\n-\t  _M_carry = __new_carry;\n-\t}\n-\n-      if (_M_x[__ps][__n - 1] > _M_x[_M_p][__n - 1]\n-\t  || (_M_x[__ps][__n - 1] == _M_x[_M_p][__n - 1] && _M_carry == 0))\n-\t__new_carry = 0;\n-      else\n-\t__new_carry = 1;\n-      \n-      _M_x[_M_p][__n - 1] = __detail::__mod<_UInt32Type, 1, 0,\n-\t__detail::_Shift<_UInt32Type, __w % 32>::__value>\n-\t(_M_x[__ps][__n - 1] - _M_x[_M_p][__n - 1] - _M_carry);\n-      _M_carry = __new_carry;\n-\n-      result_type __ret = 0.0;\n-      for (int __j = 0; __j < __n; ++__j)\n-\t__ret += _M_x[_M_p][__j] * _M_npows[__j];\n-\n-      // Adjust current index to loop around in ring buffer.\n-      if (++_M_p >= long_lag)\n-\t_M_p = 0;\n-\n-      return __ret;\n-    }\n-\n-  template<typename _RealType, int __w, int __s, int __r,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const subtract_with_carry_01<_RealType, __w, __s, __r>& __x)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n-      typedef typename __ostream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __os.flags();\n-      const _CharT __fill = __os.fill();\n-      const _CharT __space = __os.widen(' ');\n-      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n-      __os.fill(__space);\n-\n-      for (int __i = 0; __i < __r; ++__i)\n-\tfor (int __j = 0; __j < __x.__n; ++__j)\n-\t  __os << __x._M_x[__i][__j] << __space;\n-      __os << __x._M_carry;\n-\n-      __os.flags(__flags);\n-      __os.fill(__fill);\n-      return __os;\n-    }\n-\n-  template<typename _RealType, int __w, int __s, int __r,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       subtract_with_carry_01<_RealType, __w, __s, __r>& __x)\n-    {\n-      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n-      typedef typename __istream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(__ios_base::dec | __ios_base::skipws);\n-\n-      for (int __i = 0; __i < __r; ++__i)\n-\tfor (int __j = 0; __j < __x.__n; ++__j)\n-\t  __is >> __x._M_x[__i][__j];\n-      __is >> __x._M_carry;\n-\n-      __is.flags(__flags);\n-      return __is;\n-    }\n-\n-\n-  template<class _UniformRandomNumberGenerator, int __p, int __r>\n-    typename discard_block<_UniformRandomNumberGenerator,\n-\t\t\t   __p, __r>::result_type\n-    discard_block<_UniformRandomNumberGenerator, __p, __r>::\n-    operator()()\n-    {\n-      if (_M_n >= used_block)\n-\t{\n-\t  while (_M_n < block_size)\n-\t    {\n-\t      _M_b();\n-\t      ++_M_n;\n-\t    }\n-\t  _M_n = 0;\n-\t}\n-      ++_M_n;\n-      return _M_b();\n-    }\n-\n-  template<class _UniformRandomNumberGenerator, int __p, int __r,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const discard_block<_UniformRandomNumberGenerator,\n-\t       __p, __r>& __x)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n-      typedef typename __ostream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __os.flags();\n-      const _CharT __fill = __os.fill();\n-      const _CharT __space = __os.widen(' ');\n-      __os.flags(__ios_base::dec | __ios_base::fixed\n-\t\t | __ios_base::left);\n-      __os.fill(__space);\n-\n-      __os << __x._M_b << __space << __x._M_n;\n-\n-      __os.flags(__flags);\n-      __os.fill(__fill);\n-      return __os;\n-    }\n-\n-  template<class _UniformRandomNumberGenerator, int __p, int __r,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       discard_block<_UniformRandomNumberGenerator, __p, __r>& __x)\n-    {\n-      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n-      typedef typename __istream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(__ios_base::dec | __ios_base::skipws);\n-\n-      __is >> __x._M_b >> __x._M_n;\n-\n-      __is.flags(__flags);\n-      return __is;\n-    }\n-\n-\n-  template<class _UniformRandomNumberGenerator1, int __s1,\n-\t   class _UniformRandomNumberGenerator2, int __s2>\n-    void\n-    xor_combine<_UniformRandomNumberGenerator1, __s1,\n-\t\t_UniformRandomNumberGenerator2, __s2>::\n-    _M_initialize_max()\n-    {\n-      const int __w = std::numeric_limits<result_type>::digits;\n-\n-      const result_type __m1 =\n-\tstd::min(result_type(_M_b1.max() - _M_b1.min()),\n-\t\t __detail::_Shift<result_type, __w - __s1>::__value - 1);\n-\n-      const result_type __m2 =\n-\tstd::min(result_type(_M_b2.max() - _M_b2.min()),\n-\t\t __detail::_Shift<result_type, __w - __s2>::__value - 1);\n-\n-      // NB: In TR1 s1 is not required to be >= s2.\n-      if (__s1 < __s2)\n-\t_M_max = _M_initialize_max_aux(__m2, __m1, __s2 - __s1) << __s1;\n-      else\n-\t_M_max = _M_initialize_max_aux(__m1, __m2, __s1 - __s2) << __s2;\n-    }\n-\n-  template<class _UniformRandomNumberGenerator1, int __s1,\n-\t   class _UniformRandomNumberGenerator2, int __s2>\n-    typename xor_combine<_UniformRandomNumberGenerator1, __s1,\n-\t\t\t _UniformRandomNumberGenerator2, __s2>::result_type\n-    xor_combine<_UniformRandomNumberGenerator1, __s1,\n-\t\t_UniformRandomNumberGenerator2, __s2>::\n-    _M_initialize_max_aux(result_type __a, result_type __b, int __d)\n-    {\n-      const result_type __two2d = result_type(1) << __d;\n-      const result_type __c = __a * __two2d;\n-\n-      if (__a == 0 || __b < __two2d)\n-\treturn __c + __b;\n-\n-      const result_type __t = std::max(__c, __b);\n-      const result_type __u = std::min(__c, __b);\n-\n-      result_type __ub = __u;\n-      result_type __p;\n-      for (__p = 0; __ub != 1; __ub >>= 1)\n-\t++__p;\n-\n-      const result_type __two2p = result_type(1) << __p;\n-      const result_type __k = __t / __two2p;\n-\n-      if (__k & 1)\n-\treturn (__k + 1) * __two2p - 1;\n-\n-      if (__c >= __b)\n-\treturn (__k + 1) * __two2p + _M_initialize_max_aux((__t % __two2p)\n-\t\t\t\t\t\t\t   / __two2d,\n-\t\t\t\t\t\t\t   __u % __two2p, __d);\n-      else\n-\treturn (__k + 1) * __two2p + _M_initialize_max_aux((__u % __two2p)\n-\t\t\t\t\t\t\t   / __two2d,\n-\t\t\t\t\t\t\t   __t % __two2p, __d);\n-    }\n-\n-  template<class _UniformRandomNumberGenerator1, int __s1,\n-\t   class _UniformRandomNumberGenerator2, int __s2,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const xor_combine<_UniformRandomNumberGenerator1, __s1,\n-\t       _UniformRandomNumberGenerator2, __s2>& __x)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n-      typedef typename __ostream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __os.flags();\n-      const _CharT __fill = __os.fill();\n-      const _CharT __space = __os.widen(' ');\n-      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);\n-      __os.fill(__space);\n-\n-      __os << __x.base1() << __space << __x.base2();\n-\n-      __os.flags(__flags);\n-      __os.fill(__fill);\n-      return __os; \n-    }\n-\n-  template<class _UniformRandomNumberGenerator1, int __s1,\n-\t   class _UniformRandomNumberGenerator2, int __s2,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       xor_combine<_UniformRandomNumberGenerator1, __s1,\n-\t       _UniformRandomNumberGenerator2, __s2>& __x)\n-    {\n-      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n-      typedef typename __istream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(__ios_base::skipws);\n-\n-      __is >> __x._M_b1 >> __x._M_b2;\n-\n-      __is.flags(__flags);\n-      return __is;\n-    }\n-\n-\n-  template<typename _IntType>\n-    template<typename _UniformRandomNumberGenerator>\n-      typename uniform_int<_IntType>::result_type\n-      uniform_int<_IntType>::\n-      _M_call(_UniformRandomNumberGenerator& __urng,\n-\t      result_type __min, result_type __max, true_type)\n-      {\n-\t// XXX Must be fixed to work well for *arbitrary* __urng.max(),\n-\t// __urng.min(), __max, __min.  Currently works fine only in the\n-\t// most common case __urng.max() - __urng.min() >= __max - __min,\n-\t// with __urng.max() > __urng.min() >= 0.\n-\ttypedef typename __gnu_cxx::__add_unsigned<typename\n-\t  _UniformRandomNumberGenerator::result_type>::__type __urntype;\n-\ttypedef typename __gnu_cxx::__add_unsigned<result_type>::__type\n-\t                                                      __utype;\n-\ttypedef typename __gnu_cxx::__conditional_type<(sizeof(__urntype)\n-\t\t\t\t\t\t\t> sizeof(__utype)),\n-\t  __urntype, __utype>::__type                         __uctype;\n-\n-\tresult_type __ret;\n-\n-\tconst __urntype __urnmin = __urng.min();\n-\tconst __urntype __urnmax = __urng.max();\n-\tconst __urntype __urnrange = __urnmax - __urnmin;\n-\tconst __uctype __urange = __max - __min;\n-\tconst __uctype __udenom = (__urnrange <= __urange\n-\t\t\t\t   ? 1 : __urnrange / (__urange + 1));\n-\tdo\n-\t  __ret = (__urntype(__urng()) -  __urnmin) / __udenom;\n-\twhile (__ret > __max - __min);\n-\n-\treturn __ret + __min;\n-      }\n-\n-  template<typename _IntType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const uniform_int<_IntType>& __x)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n-      typedef typename __ostream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __os.flags();\n-      const _CharT __fill = __os.fill();\n-      const _CharT __space = __os.widen(' ');\n-      __os.flags(__ios_base::scientific | __ios_base::left);\n-      __os.fill(__space);\n-\n-      __os << __x.min() << __space << __x.max();\n-\n-      __os.flags(__flags);\n-      __os.fill(__fill);\n-      return __os;\n-    }\n-\n-  template<typename _IntType, typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       uniform_int<_IntType>& __x)\n-    {\n-      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n-      typedef typename __istream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(__ios_base::dec | __ios_base::skipws);\n-\n-      __is >> __x._M_min >> __x._M_max;\n-\n-      __is.flags(__flags);\n-      return __is;\n-    }\n-\n-  \n-  template<typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const bernoulli_distribution& __x)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n-      typedef typename __ostream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __os.flags();\n-      const _CharT __fill = __os.fill();\n-      const std::streamsize __precision = __os.precision();\n-      __os.flags(__ios_base::scientific | __ios_base::left);\n-      __os.fill(__os.widen(' '));\n-      __os.precision(__gnu_cxx::__numeric_traits<double>::__max_digits10);\n-\n-      __os << __x.p();\n-\n-      __os.flags(__flags);\n-      __os.fill(__fill);\n-      __os.precision(__precision);\n-      return __os;\n-    }\n-\n-\n-  template<typename _IntType, typename _RealType>\n-    template<class _UniformRandomNumberGenerator>\n-      typename geometric_distribution<_IntType, _RealType>::result_type\n-      geometric_distribution<_IntType, _RealType>::\n-      operator()(_UniformRandomNumberGenerator& __urng)\n-      {\n-\t// About the epsilon thing see this thread:\n-        // http://gcc.gnu.org/ml/gcc-patches/2006-10/msg00971.html\n-\tconst _RealType __naf =\n-\t  (1 - std::numeric_limits<_RealType>::epsilon()) / 2;\n-\t// The largest _RealType convertible to _IntType.\n-\tconst _RealType __thr =\n-\t  std::numeric_limits<_IntType>::max() + __naf;\n-\n-\t_RealType __cand;\n-\tdo\n-\t  __cand = std::ceil(std::log(__urng()) / _M_log_p);\n-\twhile (__cand >= __thr);\n-\n-\treturn result_type(__cand + __naf);\n-      }\n-\n-  template<typename _IntType, typename _RealType,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const geometric_distribution<_IntType, _RealType>& __x)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n-      typedef typename __ostream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __os.flags();\n-      const _CharT __fill = __os.fill();\n-      const std::streamsize __precision = __os.precision();\n-      __os.flags(__ios_base::scientific | __ios_base::left);\n-      __os.fill(__os.widen(' '));\n-      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n-\n-      __os << __x.p();\n-\n-      __os.flags(__flags);\n-      __os.fill(__fill);\n-      __os.precision(__precision);\n-      return __os;\n-    }\n-\n-\n-  template<typename _IntType, typename _RealType>\n-    void\n-    poisson_distribution<_IntType, _RealType>::\n-    _M_initialize()\n-    {\n-#if _GLIBCXX_USE_C99_MATH_TR1\n-      if (_M_mean >= 12)\n-\t{\n-\t  const _RealType __m = std::floor(_M_mean);\n-\t  _M_lm_thr = std::log(_M_mean);\n-\t  _M_lfm = std::_GLIBCXX_TR1 lgamma(__m + 1);\n-\t  _M_sm = std::sqrt(__m);\n-\n-\t  const _RealType __pi_4 = 0.7853981633974483096156608458198757L;\n-\t  const _RealType __dx = std::sqrt(2 * __m * std::log(32 * __m\n-\t\t\t\t\t\t\t      / __pi_4));\n-\t  _M_d = std::_GLIBCXX_TR1 round(std::max(_RealType(6),\n-\t\t\t\t\t\t  std::min(__m, __dx)));\n-\t  const _RealType __cx = 2 * __m + _M_d;\n-\t  _M_scx = std::sqrt(__cx / 2);\n-\t  _M_1cx = 1 / __cx;\n-\n-\t  _M_c2b = std::sqrt(__pi_4 * __cx) * std::exp(_M_1cx);\n-\t  _M_cb = 2 * __cx * std::exp(-_M_d * _M_1cx * (1 + _M_d / 2)) / _M_d;\n-\t}\n-      else\n-#endif\n-\t_M_lm_thr = std::exp(-_M_mean);\n-      }\n-\n-  /**\n-   * A rejection algorithm when mean >= 12 and a simple method based\n-   * upon the multiplication of uniform random variates otherwise.\n-   * NB: The former is available only if _GLIBCXX_USE_C99_MATH_TR1\n-   * is defined.\n-   *\n-   * Reference:\n-   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n-   * New York, 1986, Ch. X, Sects. 3.3 & 3.4 (+ Errata!).\n-   */\n-  template<typename _IntType, typename _RealType>\n-    template<class _UniformRandomNumberGenerator>\n-      typename poisson_distribution<_IntType, _RealType>::result_type\n-      poisson_distribution<_IntType, _RealType>::\n-      operator()(_UniformRandomNumberGenerator& __urng)\n-      {\n-#if _GLIBCXX_USE_C99_MATH_TR1\n-\tif (_M_mean >= 12)\n-\t  {\n-\t    _RealType __x;\n-\n-\t    // See comments above...\n-\t    const _RealType __naf =\n-\t      (1 - std::numeric_limits<_RealType>::epsilon()) / 2;\n-\t    const _RealType __thr =\n-\t      std::numeric_limits<_IntType>::max() + __naf;\n-\n-\t    const _RealType __m = std::floor(_M_mean);\n-\t    // sqrt(pi / 2)\n-\t    const _RealType __spi_2 = 1.2533141373155002512078826424055226L;\n-\t    const _RealType __c1 = _M_sm * __spi_2;\n-\t    const _RealType __c2 = _M_c2b + __c1; \n-\t    const _RealType __c3 = __c2 + 1;\n-\t    const _RealType __c4 = __c3 + 1;\n-\t    // e^(1 / 78)\n-\t    const _RealType __e178 = 1.0129030479320018583185514777512983L;\n-\t    const _RealType __c5 = __c4 + __e178;\n-\t    const _RealType __c = _M_cb + __c5;\n-\t    const _RealType __2cx = 2 * (2 * __m + _M_d);\n-\n-\t    bool __reject = true;\n-\t    do\n-\t      {\n-\t\tconst _RealType __u = __c * __urng();\n-\t\tconst _RealType __e = -std::log(__urng());\n-\n-\t\t_RealType __w = 0.0;\n-\t\t\n-\t\tif (__u <= __c1)\n-\t\t  {\n-\t\t    const _RealType __n = _M_nd(__urng);\n-\t\t    const _RealType __y = -std::abs(__n) * _M_sm - 1;\n-\t\t    __x = std::floor(__y);\n-\t\t    __w = -__n * __n / 2;\n-\t\t    if (__x < -__m)\n-\t\t      continue;\n-\t\t  }\n-\t\telse if (__u <= __c2)\n-\t\t  {\n-\t\t    const _RealType __n = _M_nd(__urng);\n-\t\t    const _RealType __y = 1 + std::abs(__n) * _M_scx;\n-\t\t    __x = std::ceil(__y);\n-\t\t    __w = __y * (2 - __y) * _M_1cx;\n-\t\t    if (__x > _M_d)\n-\t\t      continue;\n-\t\t  }\n-\t\telse if (__u <= __c3)\n-\t\t  // NB: This case not in the book, nor in the Errata,\n-\t\t  // but should be ok...\n-\t\t  __x = -1;\n-\t\telse if (__u <= __c4)\n-\t\t  __x = 0;\n-\t\telse if (__u <= __c5)\n-\t\t  __x = 1;\n-\t\telse\n-\t\t  {\n-\t\t    const _RealType __v = -std::log(__urng());\n-\t\t    const _RealType __y = _M_d + __v * __2cx / _M_d;\n-\t\t    __x = std::ceil(__y);\n-\t\t    __w = -_M_d * _M_1cx * (1 + __y / 2);\n-\t\t  }\n-\n-\t\t__reject = (__w - __e - __x * _M_lm_thr\n-\t\t\t    > _M_lfm - std::_GLIBCXX_TR1 lgamma(__x + __m + 1));\n-\n-\t\t__reject |= __x + __m >= __thr;\n-\n-\t      } while (__reject);\n-\n-\t    return result_type(__x + __m + __naf);\n-\t  }\n-\telse\n-#endif\n-\t  {\n-\t    _IntType     __x = 0;\n-\t    _RealType __prod = 1.0;\n-\n-\t    do\n-\t      {\n-\t\t__prod *= __urng();\n-\t\t__x += 1;\n-\t      }\n-\t    while (__prod > _M_lm_thr);\n-\n-\t    return __x - 1;\n-\t  }\n-      }\n-\n-  template<typename _IntType, typename _RealType,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const poisson_distribution<_IntType, _RealType>& __x)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n-      typedef typename __ostream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __os.flags();\n-      const _CharT __fill = __os.fill();\n-      const std::streamsize __precision = __os.precision();\n-      const _CharT __space = __os.widen(' ');\n-      __os.flags(__ios_base::scientific | __ios_base::left);\n-      __os.fill(__space);\n-      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n-\n-      __os << __x.mean() << __space << __x._M_nd;\n-\n-      __os.flags(__flags);\n-      __os.fill(__fill);\n-      __os.precision(__precision);\n-      return __os;\n-    }\n-\n-  template<typename _IntType, typename _RealType,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       poisson_distribution<_IntType, _RealType>& __x)\n-    {\n-      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n-      typedef typename __istream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(__ios_base::skipws);\n-\n-      __is >> __x._M_mean >> __x._M_nd;\n-      __x._M_initialize();\n-\n-      __is.flags(__flags);\n-      return __is;\n-    }\n-\n-\n-  template<typename _IntType, typename _RealType>\n-    void\n-    binomial_distribution<_IntType, _RealType>::\n-    _M_initialize()\n-    {\n-      const _RealType __p12 = _M_p <= 0.5 ? _M_p : 1.0 - _M_p;\n-\n-      _M_easy = true;\n-\n-#if _GLIBCXX_USE_C99_MATH_TR1\n-      if (_M_t * __p12 >= 8)\n-\t{\n-\t  _M_easy = false;\n-\t  const _RealType __np = std::floor(_M_t * __p12);\n-\t  const _RealType __pa = __np / _M_t;\n-\t  const _RealType __1p = 1 - __pa;\n-\t  \n-\t  const _RealType __pi_4 = 0.7853981633974483096156608458198757L;\n-\t  const _RealType __d1x =\n-\t    std::sqrt(__np * __1p * std::log(32 * __np\n-\t\t\t\t\t     / (81 * __pi_4 * __1p)));\n-\t  _M_d1 = std::_GLIBCXX_TR1 round(std::max(_RealType(1), __d1x));\n-\t  const _RealType __d2x =\n-\t    std::sqrt(__np * __1p * std::log(32 * _M_t * __1p\n-\t\t\t\t\t     / (__pi_4 * __pa)));\n-\t  _M_d2 = std::_GLIBCXX_TR1 round(std::max(_RealType(1), __d2x));\n-\t  \n-\t  // sqrt(pi / 2)\n-\t  const _RealType __spi_2 = 1.2533141373155002512078826424055226L;\n-\t  _M_s1 = std::sqrt(__np * __1p) * (1 + _M_d1 / (4 * __np));\n-\t  _M_s2 = std::sqrt(__np * __1p) * (1 + _M_d2 / (4 * _M_t * __1p));\n-\t  _M_c = 2 * _M_d1 / __np;\n-\t  _M_a1 = std::exp(_M_c) * _M_s1 * __spi_2;\n-\t  const _RealType __a12 = _M_a1 + _M_s2 * __spi_2;\n-\t  const _RealType __s1s = _M_s1 * _M_s1;\n-\t  _M_a123 = __a12 + (std::exp(_M_d1 / (_M_t * __1p))\n-\t\t\t     * 2 * __s1s / _M_d1\n-\t\t\t     * std::exp(-_M_d1 * _M_d1 / (2 * __s1s)));\n-\t  const _RealType __s2s = _M_s2 * _M_s2;\n-\t  _M_s = (_M_a123 + 2 * __s2s / _M_d2\n-\t\t  * std::exp(-_M_d2 * _M_d2 / (2 * __s2s)));\n-\t  _M_lf = (std::_GLIBCXX_TR1 lgamma(__np + 1)\n-\t\t   + std::_GLIBCXX_TR1 lgamma(_M_t - __np + 1));\n-\t  _M_lp1p = std::log(__pa / __1p);\n-\n-\t  _M_q = -std::log(1 - (__p12 - __pa) / __1p);\n-\t}\n-      else\n-#endif\n-\t_M_q = -std::log(1 - __p12);\n-    }\n-\n-  template<typename _IntType, typename _RealType>\n-    template<class _UniformRandomNumberGenerator>\n-      typename binomial_distribution<_IntType, _RealType>::result_type\n-      binomial_distribution<_IntType, _RealType>::\n-      _M_waiting(_UniformRandomNumberGenerator& __urng, _IntType __t)\n-      {\n-\t_IntType    __x = 0;\n-\t_RealType __sum = 0;\n-\n-\tdo\n-\t  {\n-\t    const _RealType __e = -std::log(__urng());\n-\t    __sum += __e / (__t - __x);\n-\t    __x += 1;\n-\t  }\n-\twhile (__sum <= _M_q);\n-\n-\treturn __x - 1;\n-      }\n-\n-  /**\n-   * A rejection algorithm when t * p >= 8 and a simple waiting time\n-   * method - the second in the referenced book - otherwise.\n-   * NB: The former is available only if _GLIBCXX_USE_C99_MATH_TR1\n-   * is defined.\n-   *\n-   * Reference:\n-   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n-   * New York, 1986, Ch. X, Sect. 4 (+ Errata!).\n-   */\n-  template<typename _IntType, typename _RealType>\n-    template<class _UniformRandomNumberGenerator>\n-      typename binomial_distribution<_IntType, _RealType>::result_type\n-      binomial_distribution<_IntType, _RealType>::\n-      operator()(_UniformRandomNumberGenerator& __urng)\n-      {\n-\tresult_type __ret;\n-\tconst _RealType __p12 = _M_p <= 0.5 ? _M_p : 1.0 - _M_p;\n-\n-#if _GLIBCXX_USE_C99_MATH_TR1\n-\tif (!_M_easy)\n-\t  {\n-\t    _RealType __x;\n-\n-\t    // See comments above...\n-\t    const _RealType __naf =\n-\t      (1 - std::numeric_limits<_RealType>::epsilon()) / 2;\n-\t    const _RealType __thr =\n-\t      std::numeric_limits<_IntType>::max() + __naf;\n-\n-\t    const _RealType __np = std::floor(_M_t * __p12);\n-\t    const _RealType __pa = __np / _M_t;\n-\n-\t    // sqrt(pi / 2)\n-\t    const _RealType __spi_2 = 1.2533141373155002512078826424055226L;\n-\t    const _RealType __a1 = _M_a1;\n-\t    const _RealType __a12 = __a1 + _M_s2 * __spi_2;\n-\t    const _RealType __a123 = _M_a123;\n-\t    const _RealType __s1s = _M_s1 * _M_s1;\n-\t    const _RealType __s2s = _M_s2 * _M_s2;\n-\n-\t    bool __reject;\n-\t    do\n-\t      {\n-\t\tconst _RealType __u = _M_s * __urng();\n-\n-\t\t_RealType __v;\n-\n-\t\tif (__u <= __a1)\n-\t\t  {\n-\t\t    const _RealType __n = _M_nd(__urng);\n-\t\t    const _RealType __y = _M_s1 * std::abs(__n);\n-\t\t    __reject = __y >= _M_d1;\n-\t\t    if (!__reject)\n-\t\t      {\n-\t\t\tconst _RealType __e = -std::log(__urng());\n-\t\t\t__x = std::floor(__y);\n-\t\t\t__v = -__e - __n * __n / 2 + _M_c;\n-\t\t      }\n-\t\t  }\n-\t\telse if (__u <= __a12)\n-\t\t  {\n-\t\t    const _RealType __n = _M_nd(__urng);\n-\t\t    const _RealType __y = _M_s2 * std::abs(__n);\n-\t\t    __reject = __y >= _M_d2;\n-\t\t    if (!__reject)\n-\t\t      {\n-\t\t\tconst _RealType __e = -std::log(__urng());\n-\t\t\t__x = std::floor(-__y);\n-\t\t\t__v = -__e - __n * __n / 2;\n-\t\t      }\n-\t\t  }\n-\t\telse if (__u <= __a123)\n-\t\t  {\n-\t\t    const _RealType __e1 = -std::log(__urng());\t\t    \n-\t\t    const _RealType __e2 = -std::log(__urng());\n-\n-\t\t    const _RealType __y = _M_d1 + 2 * __s1s * __e1 / _M_d1;\n-\t\t    __x = std::floor(__y);\n-\t\t    __v = (-__e2 + _M_d1 * (1 / (_M_t - __np)\n-\t\t\t\t\t    -__y / (2 * __s1s)));\n-\t\t    __reject = false;\n-\t\t  }\n-\t\telse\n-\t\t  {\n-\t\t    const _RealType __e1 = -std::log(__urng());\t\t    \n-\t\t    const _RealType __e2 = -std::log(__urng());\n-\n-\t\t    const _RealType __y = _M_d2 + 2 * __s2s * __e1 / _M_d2;\n-\t\t    __x = std::floor(-__y);\n-\t\t    __v = -__e2 - _M_d2 * __y / (2 * __s2s);\n-\t\t    __reject = false;\n-\t\t  }\n-\n-\t\t__reject = __reject || __x < -__np || __x > _M_t - __np;\n-\t\tif (!__reject)\n-\t\t  {\n-\t\t    const _RealType __lfx =\n-\t\t      std::_GLIBCXX_TR1 lgamma(__np + __x + 1)\n-\t\t      + std::_GLIBCXX_TR1 lgamma(_M_t - (__np + __x) + 1);\n-\t\t    __reject = __v > _M_lf - __lfx + __x * _M_lp1p;\n-\t\t  }\n-\n-\t\t__reject |= __x + __np >= __thr;\n-\t      }\n-\t    while (__reject);\n-\n-\t    __x += __np + __naf;\n-\n-\t    const _IntType __z = _M_waiting(__urng, _M_t - _IntType(__x)); \n-\t    __ret = _IntType(__x) + __z;\n-\t  }\n-\telse\n-#endif\n-\t  __ret = _M_waiting(__urng, _M_t);\n-\n-\tif (__p12 != _M_p)\n-\t  __ret = _M_t - __ret;\n-\treturn __ret;\n-      }\n-\n-  template<typename _IntType, typename _RealType,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const binomial_distribution<_IntType, _RealType>& __x)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n-      typedef typename __ostream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __os.flags();\n-      const _CharT __fill = __os.fill();\n-      const std::streamsize __precision = __os.precision();\n-      const _CharT __space = __os.widen(' ');\n-      __os.flags(__ios_base::scientific | __ios_base::left);\n-      __os.fill(__space);\n-      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n-\n-      __os << __x.t() << __space << __x.p() \n-\t   << __space << __x._M_nd;\n-\n-      __os.flags(__flags);\n-      __os.fill(__fill);\n-      __os.precision(__precision);\n-      return __os;\n-    }\n-\n-  template<typename _IntType, typename _RealType,\n-\t   typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       binomial_distribution<_IntType, _RealType>& __x)\n-    {\n-      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n-      typedef typename __istream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(__ios_base::dec | __ios_base::skipws);\n-\n-      __is >> __x._M_t >> __x._M_p >> __x._M_nd;\n-      __x._M_initialize();\n-\n-      __is.flags(__flags);\n-      return __is;\n-    }\n-\n-\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const uniform_real<_RealType>& __x)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n-      typedef typename __ostream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __os.flags();\n-      const _CharT __fill = __os.fill();\n-      const std::streamsize __precision = __os.precision();\n-      const _CharT __space = __os.widen(' ');\n-      __os.flags(__ios_base::scientific | __ios_base::left);\n-      __os.fill(__space);\n-      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n-\n-      __os << __x.min() << __space << __x.max();\n-\n-      __os.flags(__flags);\n-      __os.fill(__fill);\n-      __os.precision(__precision);\n-      return __os;\n-    }\n-\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       uniform_real<_RealType>& __x)\n-    {\n-      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n-      typedef typename __istream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(__ios_base::skipws);\n-\n-      __is >> __x._M_min >> __x._M_max;\n-\n-      __is.flags(__flags);\n-      return __is;\n-    }\n-\n-\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const exponential_distribution<_RealType>& __x)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n-      typedef typename __ostream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __os.flags();\n-      const _CharT __fill = __os.fill();\n-      const std::streamsize __precision = __os.precision();\n-      __os.flags(__ios_base::scientific | __ios_base::left);\n-      __os.fill(__os.widen(' '));\n-      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n-\n-      __os << __x.lambda();\n-\n-      __os.flags(__flags);\n-      __os.fill(__fill);\n-      __os.precision(__precision);\n-      return __os;\n-    }\n-\n-\n-  /**\n-   * Polar method due to Marsaglia.\n-   *\n-   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n-   * New York, 1986, Ch. V, Sect. 4.4.\n-   */\n-  template<typename _RealType>\n-    template<class _UniformRandomNumberGenerator>\n-      typename normal_distribution<_RealType>::result_type\n-      normal_distribution<_RealType>::\n-      operator()(_UniformRandomNumberGenerator& __urng)\n-      {\n-\tresult_type __ret;\n-\n-\tif (_M_saved_available)\n-\t  {\n-\t    _M_saved_available = false;\n-\t    __ret = _M_saved;\n-\t  }\n-\telse\n-\t  {\n-\t    result_type __x, __y, __r2;\n-\t    do\n-\t      {\n-\t\t__x = result_type(2.0) * __urng() - 1.0;\n-\t\t__y = result_type(2.0) * __urng() - 1.0;\n-\t\t__r2 = __x * __x + __y * __y;\n-\t      }\n-\t    while (__r2 > 1.0 || __r2 == 0.0);\n-\n-\t    const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);\n-\t    _M_saved = __x * __mult;\n-\t    _M_saved_available = true;\n-\t    __ret = __y * __mult;\n-\t  }\n-\t\n-\t__ret = __ret * _M_sigma + _M_mean;\n-\treturn __ret;\n-      }\n-\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const normal_distribution<_RealType>& __x)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n-      typedef typename __ostream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __os.flags();\n-      const _CharT __fill = __os.fill();\n-      const std::streamsize __precision = __os.precision();\n-      const _CharT __space = __os.widen(' ');\n-      __os.flags(__ios_base::scientific | __ios_base::left);\n-      __os.fill(__space);\n-      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n-\n-      __os << __x._M_saved_available << __space\n-\t   << __x.mean() << __space\n-\t   << __x.sigma();\n-      if (__x._M_saved_available)\n-\t__os << __space << __x._M_saved;\n-\n-      __os.flags(__flags);\n-      __os.fill(__fill);\n-      __os.precision(__precision);\n-      return __os;\n-    }\n-\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_istream<_CharT, _Traits>&\n-    operator>>(std::basic_istream<_CharT, _Traits>& __is,\n-\t       normal_distribution<_RealType>& __x)\n-    {\n-      typedef std::basic_istream<_CharT, _Traits>  __istream_type;\n-      typedef typename __istream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __is.flags();\n-      __is.flags(__ios_base::dec | __ios_base::skipws);\n-\n-      __is >> __x._M_saved_available >> __x._M_mean\n-\t   >> __x._M_sigma;\n-      if (__x._M_saved_available)\n-\t__is >> __x._M_saved;\n-\n-      __is.flags(__flags);\n-      return __is;\n-    }\n-\n-\n-  template<typename _RealType>\n-    void\n-    gamma_distribution<_RealType>::\n-    _M_initialize()\n-    {\n-      if (_M_alpha >= 1)\n-\t_M_l_d = std::sqrt(2 * _M_alpha - 1);\n-      else\n-\t_M_l_d = (std::pow(_M_alpha, _M_alpha / (1 - _M_alpha))\n-\t\t  * (1 - _M_alpha));\n-    }\n-\n-  /**\n-   * Cheng's rejection algorithm GB for alpha >= 1 and a modification\n-   * of Vaduva's rejection from Weibull algorithm due to Devroye for\n-   * alpha < 1.\n-   *\n-   * References:\n-   * Cheng, R. C. \"The Generation of Gamma Random Variables with Non-integral\n-   * Shape Parameter.\" Applied Statistics, 26, 71-75, 1977.\n-   *\n-   * Vaduva, I. \"Computer Generation of Gamma Gandom Variables by Rejection\n-   * and Composition Procedures.\" Math. Operationsforschung and Statistik,\n-   * Series in Statistics, 8, 545-576, 1977.\n-   *\n-   * Devroye, L. \"Non-Uniform Random Variates Generation.\" Springer-Verlag,\n-   * New York, 1986, Ch. IX, Sect. 3.4 (+ Errata!).\n-   */\n-  template<typename _RealType>\n-    template<class _UniformRandomNumberGenerator>\n-      typename gamma_distribution<_RealType>::result_type\n-      gamma_distribution<_RealType>::\n-      operator()(_UniformRandomNumberGenerator& __urng)\n-      {\n-\tresult_type __x;\n-\n-\tbool __reject;\n-\tif (_M_alpha >= 1)\n-\t  {\n-\t    // alpha - log(4)\n-\t    const result_type __b = _M_alpha\n-\t      - result_type(1.3862943611198906188344642429163531L);\n-\t    const result_type __c = _M_alpha + _M_l_d;\n-\t    const result_type __1l = 1 / _M_l_d;\n-\n-\t    // 1 + log(9 / 2)\n-\t    const result_type __k = 2.5040773967762740733732583523868748L;\n-\n-\t    do\n-\t      {\n-\t\tconst result_type __u = __urng();\n-\t\tconst result_type __v = __urng();\n-\n-\t\tconst result_type __y = __1l * std::log(__v / (1 - __v));\n-\t\t__x = _M_alpha * std::exp(__y);\n-\n-\t\tconst result_type __z = __u * __v * __v;\n-\t\tconst result_type __r = __b + __c * __y - __x;\n-\n-\t\t__reject = __r < result_type(4.5) * __z - __k;\n-\t\tif (__reject)\n-\t\t  __reject = __r < std::log(__z);\n-\t      }\n-\t    while (__reject);\n-\t  }\n-\telse\n-\t  {\n-\t    const result_type __c = 1 / _M_alpha;\n-\n-\t    do\n-\t      {\n-\t\tconst result_type __z = -std::log(__urng());\n-\t\tconst result_type __e = -std::log(__urng());\n-\n-\t\t__x = std::pow(__z, __c);\n-\n-\t\t__reject = __z + __e < _M_l_d + __x;\n-\t      }\n-\t    while (__reject);\n-\t  }\n-\n-\treturn __x;\n-      }\n-\n-  template<typename _RealType, typename _CharT, typename _Traits>\n-    std::basic_ostream<_CharT, _Traits>&\n-    operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n-\t       const gamma_distribution<_RealType>& __x)\n-    {\n-      typedef std::basic_ostream<_CharT, _Traits>  __ostream_type;\n-      typedef typename __ostream_type::ios_base    __ios_base;\n-\n-      const typename __ios_base::fmtflags __flags = __os.flags();\n-      const _CharT __fill = __os.fill();\n-      const std::streamsize __precision = __os.precision();\n-      __os.flags(__ios_base::scientific | __ios_base::left);\n-      __os.fill(__os.widen(' '));\n-      __os.precision(__gnu_cxx::__numeric_traits<_RealType>::__max_digits10);\n-\n-      __os << __x.alpha();\n-\n-      __os.flags(__flags);\n-      __os.fill(__fill);\n-      __os.precision(__precision);\n-      return __os;\n-    }\n-\n-_GLIBCXX_END_NAMESPACE_TR1\n-}"}, {"sha": "9a206bfbc181d36955becf0d7ae06d66922d3a8a", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/thread/default_weaktoshared.cc", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fthread%2Fdefault_weaktoshared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fthread%2Fdefault_weaktoshared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fthread%2Fdefault_weaktoshared.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2006, 2007, 2008 Free Software Foundation\n+// Copyright (C) 2006, 2007, 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -85,11 +85,12 @@ void* thread_hammer_and_kill(void* opaque_pools)\n {\n   shared_and_weak_pools& pools = *static_cast<shared_and_weak_pools*>(opaque_pools);\n   // Using the same parameters as in the RNG test cases.\n-  std::mersenne_twister<\n+  std::mersenne_twister_engine<\n     unsigned long, 32, 624, 397, 31,\n-    0x9908b0dful, 11, 7,\n+    0x9908b0dful, 11,\n+    0xfffffffful, 7,\n     0x9d2c5680ul, 15,\n-    0xefc60000ul, 18> rng;\n+    0xefc60000ul, 18, 1812433253ul> rng;\n   \n   sp_vector_t::iterator cur_shared = pools.shared_pool.begin();\n   wp_vector_t::iterator cur_weak = pools.weak_pool.begin();\n@@ -120,11 +121,13 @@ void* thread_hammer(void* opaque_weak)\n {\n   wp_vector_t& weak_pool = *static_cast<wp_vector_t*>(opaque_weak);\n   // Using the same parameters as in the RNG test cases.\n-  std::mersenne_twister<\n+  std::mersenne_twister_engine<\n     unsigned long, 32, 624, 397, 31,\n-    0x9908b0dful, 11, 7,\n+    0x9908b0dful, 11,\n+    0xfffffffful, 7,\n     0x9d2c5680ul, 15,\n-    0xefc60000ul, 18> rng;\n+    0xefc60000ul, 18, 1812433253ul> rng;\n+\n   wp_vector_t::iterator cur_weak = weak_pool.begin();\n \n   for (unsigned int i = 0; i < HAMMER_REPEAT; ++i)"}, {"sha": "f98cbfeb0897db183e9ecf8872a4329805cdb819", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/thread/mutex_weaktoshared.cc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fthread%2Fmutex_weaktoshared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fthread%2Fmutex_weaktoshared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fthread%2Fmutex_weaktoshared.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2006, 2007, 2008 Free Software Foundation\n+// Copyright (C) 2006, 2007, 2008, 2009 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -87,12 +87,13 @@ void* thread_hammer_and_kill(void* opaque_pools)\n {\n   shared_and_weak_pools& pools = *static_cast<shared_and_weak_pools*>(opaque_pools);\n   // Using the same parameters as in the RNG test cases.\n-  std::mersenne_twister<\n+  std::mersenne_twister_engine<\n     unsigned long, 32, 624, 397, 31,\n-    0x9908b0dful, 11, 7,\n+    0x9908b0dful, 11,\n+    0xfffffffful, 7,\n     0x9d2c5680ul, 15,\n-    0xefc60000ul, 18> rng;\n-  \n+    0xefc60000ul, 18, 1812433253ul> rng;\n+\n   sp_vector_t::iterator cur_shared = pools.shared_pool.begin();\n   wp_vector_t::iterator cur_weak = pools.weak_pool.begin();\n   \n@@ -122,11 +123,13 @@ void* thread_hammer(void* opaque_weak)\n {\n   wp_vector_t& weak_pool = *static_cast<wp_vector_t*>(opaque_weak);\n   // Using the same parameters as in the RNG test cases.\n-  std::mersenne_twister<\n+  std::mersenne_twister_engine<\n     unsigned long, 32, 624, 397, 31,\n-    0x9908b0dful, 11, 7,\n+    0x9908b0dful, 11,\n+    0xfffffffful, 7,\n     0x9d2c5680ul, 15,\n-    0xefc60000ul, 18> rng;\n+    0xefc60000ul, 18, 1812433253ul> rng;\n+\n   wp_vector_t::iterator cur_weak = weak_pool.begin();\n \n   for (unsigned int i = 0; i < HAMMER_REPEAT; ++i)"}, {"sha": "e91efd17539fc1be631a73ce8c9a8c74810b7257", "filename": "libstdc++-v3/testsuite/26_numerics/headers/random/std_c++0x_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Frandom%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Frandom%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Frandom%2Fstd_c%2B%2B0x_neg.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -19,7 +19,7 @@\n // Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n // USA.\n \n-#include <tuple>  // { dg-excess-errors \"In file included from\" }\n+#include <random>  // { dg-excess-errors \"In file included from\" }\n \n // { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n "}, {"sha": "1ca07fe255c8834344ce32c5772640c081cf1e20", "filename": "libstdc++-v3/testsuite/26_numerics/random/bernoulli_distribution/cons/default.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.1 Class template bernoulli_distribution [rand.dist.bern.bernoulli]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::bernoulli_distribution u;\n+  VERIFY( u.p() == 0.5 );\n+  VERIFY( u.min() == std::numeric_limits<bool>::min() );\n+  VERIFY( u.max() == std::numeric_limits<bool>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "05d4dbedb0594a2597ef6fe4b940024cecf28658", "filename": "libstdc++-v3/testsuite/26_numerics/random/bernoulli_distribution/cons/parms.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.1 Class template bernoulli_distribution [rand.dist.bern.bernoulli]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::bernoulli_distribution u(0.75);\n+  VERIFY( u.p() == 0.75 );\n+  VERIFY( u.min() == std::numeric_limits<bool>::min() );\n+  VERIFY( u.max() == std::numeric_limits<bool>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a8a753347cac9afb19005201788e9fb8a8c51571", "filename": "libstdc++-v3/testsuite/26_numerics/random/bernoulli_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.1 Class template bernoulli_distribution [rand.dist.bern.bernoulli]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::bernoulli_distribution u(0.75), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5105cbb0d788e2b03b8d2d14d9f42e4f4d7c94af", "filename": "libstdc++-v3/testsuite/26_numerics/random/bernoulli_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbernoulli_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.1 Class template bernoulli_distribution [rand.dist.bern.bernoulli]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::bernoulli_distribution test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "62957923360ee2487e8c62462a8e1dc030530353", "filename": "libstdc++-v3/testsuite/26_numerics/random/binomial_distribution/cons/default.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.2 Class template binomial_distribution [rand.dist.bern.bin]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::binomial_distribution<> u;\n+  VERIFY( u.t() == 1 );\n+  VERIFY( u.p() == 0.5 );\n+  VERIFY( u.min() == 0 );\n+  VERIFY( u.max() == u.t() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0a427fe13df412442bcde47f122c26a46df15439", "filename": "libstdc++-v3/testsuite/26_numerics/random/binomial_distribution/cons/parms.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.2 Class template binomial_distribution [rand.dist.bern.bin]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::binomial_distribution<> u(3, 0.75);\n+  VERIFY( u.t() == 3 );\n+  VERIFY( u.p() == 0.75 );\n+  VERIFY( u.min() == 0 );\n+  VERIFY( u.max() == u.t() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8aec5f1d23c77d493267c94c7ee6ae3a802519f8", "filename": "libstdc++-v3/testsuite/26_numerics/random/binomial_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.2 Class template binomial_distribution [rand.dist.bern.bin]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::binomial_distribution<int> u(3, 0.75), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "521d124341a2413adf410283e0b789af39fe6222", "filename": "libstdc++-v3/testsuite/26_numerics/random/binomial_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.2 Class template binomial_distribution [rand.dist.bern.bin]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::binomial_distribution<int> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "67e8d368f9c1292c49b514ce3970d055023c55c4", "filename": "libstdc++-v3/testsuite/26_numerics/random/cauchy_distribution/cons/default.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.4 Class template cauchy_distribution [rand.dist.norm.cauchy]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::cauchy_distribution<> u;\n+  VERIFY( u.a() == 0.0 );\n+  VERIFY( u.b() == 1.0 );\n+  typedef std::cauchy_distribution<>::result_type result_type;\n+  VERIFY( u.min() == std::numeric_limits<result_type>::min() );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "08d6c6b15a0ee13a757f90bf70f16cc20cfd977b", "filename": "libstdc++-v3/testsuite/26_numerics/random/cauchy_distribution/cons/parms.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.4 Class template cauchy_distribution [rand.dist.norm.cauchy]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::cauchy_distribution<> u(5.0, 2.0);\n+  VERIFY( u.a() == 5.0 );\n+  VERIFY( u.b() == 2.0 );\n+  typedef std::cauchy_distribution<>::result_type result_type;\n+  VERIFY( u.min() == std::numeric_limits<result_type>::min() );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a1fb165ef6094819687f1f4f30bdd31f947bd559", "filename": "libstdc++-v3/testsuite/26_numerics/random/cauchy_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.1 class template discard_block_engine [rand.adapt.disc]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::cauchy_distribution<double> u(5.0, 2.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "192f85c1614b53149bfe18dc25cc7878ddfdcdc1", "filename": "libstdc++-v3/testsuite/26_numerics/random/cauchy_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fcauchy_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.4 Class template cauchy_distribution [rand.dist.norm.cauchy]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::cauchy_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "3441a207e0d8270d217588170dc4e5c3178e090b", "filename": "libstdc++-v3/testsuite/26_numerics/random/chi_squared_distribution/cons/default.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.3 Class template chi_squared_distribution [rand.dist.norm.chisq]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::chi_squared_distribution<> u;\n+  VERIFY( u.n() == 1 );\n+  typedef std::chi_squared_distribution<>::result_type result_type;\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f457a9ebc45325cfd953e03a8189e56f7327f278", "filename": "libstdc++-v3/testsuite/26_numerics/random/chi_squared_distribution/cons/parms.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.3 Class template chi_squared_distribution [rand.dist.norm.chisq]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::chi_squared_distribution<> u(1.5);\n+  VERIFY( u.n() == 1.5 );\n+  typedef std::chi_squared_distribution<>::result_type result_type;\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "927e137f49a963d6da7ed384d1219f15b90ac378", "filename": "libstdc++-v3/testsuite/26_numerics/random/chi_squared_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.3 Class template chi_squared_distribution [rand.dist.norm.chisq]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::chi_squared_distribution<double> u(1.5), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e110dbdd9ef337913bd4558fb8b16c78634887fe", "filename": "libstdc++-v3/testsuite/26_numerics/random/chi_squared_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fchi_squared_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.3 Class template chi_squared_distribution [rand.dist.norm.chisq]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::chi_squared_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "2886f2dd66994b0dfefc29941ffaa8eab7305b0e", "filename": "libstdc++-v3/testsuite/26_numerics/random/default_random_engine.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdefault_random_engine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdefault_random_engine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdefault_random_engine.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-18  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2006, 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.5 Engines and egine adaptors with predefined parameters [rand.predef]\n+// 26.4.5 [10]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::default_random_engine a;\n+  a.discard(9999);\n+\n+  //  This is our choice for now.\n+  std::minstd_rand0 b;\n+  b.discard(9999);\n+\n+  assert( a() == b() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ab6fb091f0c0b15871d106e7273c1878c86685bd", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/cons/base_copy.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fbase_copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fbase_copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fbase_copy.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.1 class template discard_block_engine [rand.adapt.disc]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::subtract_with_carry_engine<long, 24, 10, 24>\n+    base_engine;\n+\n+  base_engine b;\n+\n+  std::discard_block_engine<base_engine, 389, 24> e(b);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0d8e361a4a5b44febdb4f073f8004be0daf5000f", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/cons/base_move.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fbase_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fbase_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fbase_move.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.1 class template discard_block_engine [rand.adapt.disc]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::subtract_with_carry_engine<long, 24, 10, 24>\n+    base_engine;\n+\n+  std::discard_block_engine<base_engine, 389, 24>\n+    e(std::move(base_engine()));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "cc039b81aac3b79e8903576da72757b45c10c881", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/cons/default.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.1 class template discard_block_engine [rand.adapt.disc]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::discard_block_engine\n+    <\n+      std::subtract_with_carry_engine<long, 24, 10, 24>,\n+      389, 24\n+    > e;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6401cc7ffaf712bf4a4819fe0f5b438bf809a232", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/cons/seed1.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed1.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.1 class template discard_block_engine [rand.adapt.disc]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  unsigned long seed = 2;\n+\n+  std::discard_block_engine\n+    <\n+      std::subtract_with_carry_engine<long, 24, 10, 24>,\n+      389, 24\n+    > e(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c841d64c9d76bb1b9c38733d3deab8ea063d9adc", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/cons/seed2.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed2.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.1 class template discard_block_engine [rand.adapt.disc]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  double seed = 2.0;\n+\n+  std::discard_block_engine\n+    <\n+      std::subtract_with_carry_engine<long, 24, 10, 24>,\n+      389, 24\n+    > e(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "182ba1a8833b94e1eaece6a124646fa27a234bb5", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/cons/seed_seq.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed_seq.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed_seq.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed_seq.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.1 class template discard_block_engine [rand.adapt.disc]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::seed_seq seq;\n+\n+  std::discard_block_engine\n+    <\n+      std::subtract_with_carry_engine<long, 24, 10, 24>,\n+      389, 24\n+    > e(seq);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ea906f971121d156fd0b1835aab45fe515ec1712", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/operators/equal.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Foperators%2Fequal.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.1 class template discard_block_engine [rand.adapt.disc]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::discard_block_engine\n+    <\n+    std::subtract_with_carry_engine<long, 24, 10, 24>,\n+    389, 24\n+    > u, v;\n+\n+  VERIFY( u == v );\n+\n+  u.discard(100);\n+  v.discard(100);\n+\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "84a8d5db70e826d0ebac0bc508f4d3fa8edc738c", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/operators/serialize.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.1 class template discard_block_engine [rand.adapt.disc]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::discard_block_engine\n+    <\n+    std::subtract_with_carry_engine<long, 24, 10, 24>,\n+    389, 24\n+    > u, v;\n+\n+  u(); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "67c2d730fada03c6e1d1bdfe2ad552a51c82ca64", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/requirements/typedefs.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.1 Class template discard_blockl_engine [rand.adapt.disc]\n+// 26.4.2.3 Concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::discard_block_engine\n+    <\n+    std::subtract_with_carry_engine<long, 24, 10, 24>,\n+    389, 24\n+    > test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "93cd47b0ac3808fff9c87c474c3ded9067076d05", "filename": "libstdc++-v3/testsuite/26_numerics/random/discrete_distribution/cons/default.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-03  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.1 Class template discrete_distribution [rand.dist.samp.discrete]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::discrete_distribution<> u;\n+  std::vector<double> probablility = u.probabilities();\n+  VERIFY( probablility.size() == 1 );\n+  VERIFY( probablility[0] == 1.0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6ddaad98397b4367d6770b2f81f05beaf016326d", "filename": "libstdc++-v3/testsuite/26_numerics/random/discrete_distribution/cons/initlist.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Finitlist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Finitlist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Finitlist.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-03  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.1 Class template discrete_distribution [rand.dist.samp.discrete]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::discrete_distribution<> u({0.0, 2.0, 4.0, 3.0, 4.0, 0.0});\n+  std::vector<double> probablility = u.probabilities();\n+  VERIFY( probablility.size() == 6 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0dbe52a52a9e7c005236d731658acd78e6c9ca9c", "filename": "libstdc++-v3/testsuite/26_numerics/random/discrete_distribution/cons/num_xbound_fun.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Fnum_xbound_fun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Fnum_xbound_fun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Fnum_xbound_fun.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-03  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.1 Class template discrete_distribution [rand.dist.samp.discrete]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+struct cosine_distribution\n+{\n+    cosine_distribution(double x0, double lambda)\n+    : _M_x0(x0), _M_lambda(lambda)\n+    { }\n+\n+    double\n+    operator()(double x)\n+    {\n+      if (x - _M_x0 < -_M_lambda / 4)\n+        return 0.0;\n+      else if (x - _M_x0 > _M_lambda / 4)\n+        return 0.0;\n+      else\n+        return std::cos(2 * M_PI * (x - _M_x0) / _M_lambda);\n+    }\n+\n+private:\n+    double _M_x0;\n+    double _M_lambda;\n+};\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  cosine_distribution cd(1.5, 3.0);\n+  std::discrete_distribution<> u(21, -10.0, 10.0, cd);\n+  std::vector<double> probablility = u.probabilities();\n+  VERIFY( probablility.size() == 21 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "cf0f0d9296d90397d902293ad82f666e35fe6e39", "filename": "libstdc++-v3/testsuite/26_numerics/random/discrete_distribution/cons/range.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Fcons%2Frange.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-03  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.1 Class template discrete_distribution [rand.dist.samp.discrete]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<double> wt = {0.5, 1.0, 2.5, 1.5, 0.5};\n+  std::discrete_distribution<> u(wt.begin(), wt.end());\n+  std::vector<double> probablility = u.probabilities();\n+  VERIFY( probablility.size() == 5 );\n+  VERIFY( probablility[0] == 0.5 / 6.0 );\n+  VERIFY( probablility[2] == 2.5 / 6.0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3bd6f6cd12fb274d39fabf20f3e1c474f0d5e74a", "filename": "libstdc++-v3/testsuite/26_numerics/random/discrete_distribution/operators/serialize.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-05  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.1 Class template discrete_distribution [rand.dist.samp.discrete]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::vector<double> wt = {0.5, 1.0, 2.5, 1.5, 0.5};\n+  std::discrete_distribution<int> u(wt.begin(), wt.end()), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "877952aa2ccdd4b630fe9b94a8f0a42f230cdb56", "filename": "libstdc++-v3/testsuite/26_numerics/random/discrete_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-03  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.1 Class template discrete_distribution [rand.dist.samp.discrete]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::discrete_distribution<> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "2935bdae4d4fb50b38f6b6cc30ef44fbb8f03895", "filename": "libstdc++-v3/testsuite/26_numerics/random/exponential_distribution/cons/default.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.2 Class template exponential_distribution [rand.dist.pois.exp]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::exponential_distribution<> u;\n+  VERIFY( u.lambda() == 1.0 );\n+  typedef std::exponential_distribution<>::result_type result_type;\n+  VERIFY( u.min() == 0 );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c3b893ced7acf7fa8aadc8a5b5cfd5be406f3e48", "filename": "libstdc++-v3/testsuite/26_numerics/random/exponential_distribution/cons/parms.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.2 Class template exponential_distribution [rand.dist.pois.exp]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::exponential_distribution<> u(0.5);\n+  VERIFY( u.lambda() == 0.5 );\n+  typedef std::exponential_distribution<>::result_type result_type;\n+  VERIFY( u.min() == 0 );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9645931f519487129c6b5b069de745052e16515a", "filename": "libstdc++-v3/testsuite/26_numerics/random/exponential_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.2 Class template exponential_distribution [rand.dist.pois.exp]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::exponential_distribution<double> u(0.5), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ce271962f256d7b8ebb596405df897a53e615037", "filename": "libstdc++-v3/testsuite/26_numerics/random/exponential_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fexponential_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.2 Class template exponential_distribution [rand.dist.pois.exp]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::exponential_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "e4378c9bd963deb6120484d0355bc7d212a64d47", "filename": "libstdc++-v3/testsuite/26_numerics/random/extreme_value_distribution/cons/default.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.5 Class template extreme_value_distribution [rand.dist.pois.extreme]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::extreme_value_distribution<> u;\n+  VERIFY( u.a() == 0.0 );\n+  VERIFY( u.b() == 1.0 );\n+  typedef std::extreme_value_distribution<>::result_type result_type;\n+  VERIFY( u.min() == std::numeric_limits<result_type>::min() );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1e54492b1246b0807dbf2dc3374fb155bcdfbccb", "filename": "libstdc++-v3/testsuite/26_numerics/random/extreme_value_distribution/cons/parms.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.5 Class template extreme_value_distribution [rand.dist.pois.extreme]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::extreme_value_distribution<> u(5.0, 2.0);\n+  VERIFY( u.a() == 5.0 );\n+  VERIFY( u.b() == 2.0 );\n+  typedef std::extreme_value_distribution<>::result_type result_type;\n+  VERIFY( u.min() == std::numeric_limits<result_type>::min() );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c07cdfc1ab8142a90dc817a985df24220bb2fb1a", "filename": "libstdc++-v3/testsuite/26_numerics/random/extreme_value_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.5 Class template extreme_value_distribution [rand.dist.pois.extreme]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::extreme_value_distribution<double> u, v(5.0, 2.0);\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e87436f2bec4b890881645e4824b839ae71707bc", "filename": "libstdc++-v3/testsuite/26_numerics/random/extreme_value_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fextreme_value_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.5 Class template extreme_value_distribution [rand.dist.pois.extreme]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::extreme_value_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "e7accb3a378ec552d42ac05880186dee125ed190", "filename": "libstdc++-v3/testsuite/26_numerics/random/fisher_f_distribution/cons/default.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.5 Class template fisher_f_distribution [rand.dist.norm.f]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::fisher_f_distribution<> u;\n+  VERIFY( u.m() == 1.0 );\n+  VERIFY( u.n() == 1.0 );\n+  typedef std::fisher_f_distribution<>::result_type result_type;\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5c02b82d444d481a8ad6129c65b9d110f7d37730", "filename": "libstdc++-v3/testsuite/26_numerics/random/fisher_f_distribution/cons/parms.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.5 Class template fisher_f_distribution [rand.dist.norm.f]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::fisher_f_distribution<> u(2.0, 3.0);\n+  VERIFY( u.m() == 2.0 );\n+  VERIFY( u.n() == 3.0 );\n+  typedef std::fisher_f_distribution<>::result_type result_type;\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6cb024972c53eea6fceeca427f9ec04b428f553e", "filename": "libstdc++-v3/testsuite/26_numerics/random/fisher_f_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.5 Class template fisher_f_distribution [rand.dist.norm.f]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::fisher_f_distribution<double> u(2.0, 3.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "207dfd58ac992a3f7f20b5ede302fb0cf0d38d4d", "filename": "libstdc++-v3/testsuite/26_numerics/random/fisher_f_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Ffisher_f_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.5 Class template fisher_f_distribution [rand.dist.norm.f]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::fisher_f_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "74be9d189602a4293f67e56a19fd79af597447a1", "filename": "libstdc++-v3/testsuite/26_numerics/random/gamma_distribution/cons/default.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.3 Class template gamma_distribution [rand.dist.pois.gamma]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::gamma_distribution<> u;\n+  VERIFY( u.alpha() == 1.0 );\n+  VERIFY( u.beta() == 1.0 );\n+  VERIFY( u.min() == 0.0 );\n+  typedef std::gamma_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1dd7a76a5dcdf80c2980aabeeb00a5729a09d273", "filename": "libstdc++-v3/testsuite/26_numerics/random/gamma_distribution/cons/parms.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.3 Class template gamma_distribution [rand.dist.pois.gamma]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::gamma_distribution<> u(1.5, 3.0);\n+  VERIFY( u.alpha() == 1.5 );\n+  VERIFY( u.beta() == 3.0 );\n+  VERIFY( u.min() == 0.0 );\n+  typedef std::gamma_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b99e0c24e422935a5dd17057e440c3e66e75b424", "filename": "libstdc++-v3/testsuite/26_numerics/random/gamma_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.3 Class template gamma_distribution [rand.dist.pois.gamma]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::gamma_distribution<double> u(1.5, 3.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3c6b4eeafa1e10b7456f1230e3d024104dbfd77", "filename": "libstdc++-v3/testsuite/26_numerics/random/gamma_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgamma_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.3 Class template gamma_distribution [rand.dist.pois.gamma]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::gamma_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "e248f7f0ce616530e430515dc7465824a5b906cd", "filename": "libstdc++-v3/testsuite/26_numerics/random/geometric_distribution/cons/default.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.3 Class template geometric_distribution [rand.dist.bern.geo]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::geometric_distribution<> u;\n+  VERIFY( u.p() == 0.5 );\n+  VERIFY( u.min() == 0 );\n+  typedef std::geometric_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "aa158a32ac18f2492e25e0233a6ea06dc8301f74", "filename": "libstdc++-v3/testsuite/26_numerics/random/geometric_distribution/cons/parms.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.3 Class template geometric_distribution [rand.dist.bern.geo]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::geometric_distribution<> u(0.75);\n+  VERIFY( u.p() == 0.75 );\n+  VERIFY( u.min() == 0 );\n+  typedef std::geometric_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e2fbdaa29a4d97cdfa1c5044fcbdaac3d1fa9d20", "filename": "libstdc++-v3/testsuite/26_numerics/random/geometric_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.3 Class template geometric_distribution [rand.dist.bern.geom]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::geometric_distribution<int> u(0.75), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7cac29a40e2fe79a5ea7dfa1ed995223bd512315", "filename": "libstdc++-v3/testsuite/26_numerics/random/geometric_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fgeometric_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.3 Class template geometric_distribution [rand.dist.bern.geom]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::geometric_distribution<int> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "efaa94b2f64eae0a0e74bdc8dc6bd743e07ca181", "filename": "libstdc++-v3/testsuite/26_numerics/random/independent_bits_engine/cons/base_copy.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fbase_copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fbase_copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fbase_copy.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.2 class template independent_bits_engine [rand.adapt.ibits]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>\n+    base_engine;\n+\n+  base_engine b;\n+\n+  std::independent_bits_engine<base_engine, 48, unsigned long> e(b);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8adcecd25ef8ee272d508a033dfaaa6d37fac4e3", "filename": "libstdc++-v3/testsuite/26_numerics/random/independent_bits_engine/cons/base_move.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fbase_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fbase_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fbase_move.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.2 class template independent_bits_engine [rand.adapt.ibits]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>\n+    base_engine;\n+\n+  std::independent_bits_engine<base_engine, 48, unsigned long>\n+    e(std::move(base_engine()));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2ccd4e8d557c909b61ece05a952249ec92525d78", "filename": "libstdc++-v3/testsuite/26_numerics/random/independent_bits_engine/cons/default.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.2 class template independent_bits_engine [rand.adapt.ibits]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::independent_bits_engine\n+    <\n+      std::subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>,\n+      48,\n+      unsigned long\n+    > e;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e774b760c9ce77646621b15e29d832a24c1fb226", "filename": "libstdc++-v3/testsuite/26_numerics/random/independent_bits_engine/cons/seed1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fseed1.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.2 class template independent_bits_engine [rand.adapt.ibits]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  unsigned long seed = 2;\n+\n+  std::independent_bits_engine\n+    <\n+      std::subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>,\n+      48,\n+      unsigned long\n+    > e(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e4362d6165dbc0f2e77aa66ea4d833775bdad94a", "filename": "libstdc++-v3/testsuite/26_numerics/random/independent_bits_engine/cons/seed2.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fseed2.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.2 class template independent_bits_engine [rand.adapt.ibits]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  double seed = 2.0;\n+\n+  std::independent_bits_engine\n+    <\n+      std::subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>,\n+      48,\n+      unsigned long\n+    > e(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "628af20b96f9adb0f0ea6481ca639fd8c5655a34", "filename": "libstdc++-v3/testsuite/26_numerics/random/independent_bits_engine/cons/seed_seq.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fseed_seq.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fseed_seq.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fseed_seq.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.2 class template independent_bits_engine [rand.adapt.ibits]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::seed_seq seq;\n+\n+  std::independent_bits_engine\n+    <\n+      std::subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>,\n+      48,\n+      unsigned long\n+    > e(seq);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6147cf0d5ac70a5bdd4964094adbc7079d6af92d", "filename": "libstdc++-v3/testsuite/26_numerics/random/independent_bits_engine/operators/equal.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Foperators%2Fequal.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.1 class template discard_block_engine [rand.adapt.disc]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::independent_bits_engine\n+    <std::subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>,\n+     48, unsigned long> u, v;\n+\n+  VERIFY( u == v );\n+\n+  u.discard(100);\n+  v.discard(100);\n+\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a92553e10cd5726b2fdcf4e1f737c11cc5b39cb9", "filename": "libstdc++-v3/testsuite/26_numerics/random/independent_bits_engine/operators/serialize.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.1 class template discard_block_engine [rand.adapt.disc]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::independent_bits_engine\n+    <std::subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>,\n+     48, unsigned long> u, v;\n+\n+  u(); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f268e9ad80857069148b5793f8fc740d875396af", "filename": "libstdc++-v3/testsuite/26_numerics/random/independent_bits_engine/requirements/typedefs.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.2 class template independent_bits_engine [rand.adapt.ibits]\n+// 26.4.2.3 Concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::independent_bits_engine\n+    <\n+      std::subtract_with_carry_engine\n+        <\n+          uint_fast64_t, 48, 5, 12\n+        >,\n+      48, unsigned long\n+    > test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "5f835769efbdba5321cc88dbd80e98fbb8fdef0f", "filename": "libstdc++-v3/testsuite/26_numerics/random/knuth_b.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fknuth_b.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fknuth_b.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fknuth_b.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-18  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2006, 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.5 Engines and egine adaptors with predefined parameters [rand.predef]\n+// 26.4.5 [9]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::knuth_b a;\n+  a.discard(9999);\n+\n+  VERIFY( a() == 1112339016 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1136785e9a3603f6626e3d11462f02081a663885", "filename": "libstdc++-v3/testsuite/26_numerics/random/linear_congruential_engine/cons/default.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.1 class template linear_congruential_engine [rand.eng.lcong]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::linear_congruential_engine<unsigned long, 48271, 0, 2147483647> x;\n+  VERIFY( x.min() == 1 );\n+  VERIFY( x.max() == 2147483647-1 );\n+  VERIFY( x() == 48271 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9d2e21b54c7a429629a611d7d3ec35c79ef625c2", "filename": "libstdc++-v3/testsuite/26_numerics/random/linear_congruential_engine/cons/seed1.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Fcons%2Fseed1.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.1 class template linear_congruential_engine [rand.eng.lcong]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  unsigned long seed = 2;\n+  std::linear_congruential_engine<unsigned long, 48271, 0, 2147483647> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5f446773ecc7f016037112255c3127814a0818af", "filename": "libstdc++-v3/testsuite/26_numerics/random/linear_congruential_engine/cons/seed2.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Fcons%2Fseed2.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.1 class template linear_congruential_engine [rand.eng.lcong]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  double seed = 2.0;\n+  std::linear_congruential_engine<unsigned long, 48271, 0, 2147483647> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "02f1f5a9708e2f8ceeb3fbbb58e18c0cfe03d9a3", "filename": "libstdc++-v3/testsuite/26_numerics/random/linear_congruential_engine/operators/equal.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Foperators%2Fequal.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.1 class template linear_congruential_engine [rand.eng.lcong]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::minstd_rand0 a;\n+  std::minstd_rand0 b;\n+  std::minstd_rand0 c(120);\n+\n+  VERIFY( a == b );\n+  VERIFY( !(a == c) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6256cadc68df0f50827e1fbb65c1c05d23af368d", "filename": "libstdc++-v3/testsuite/26_numerics/random/linear_congruential_engine/operators/serialize.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.1 class template linear_congruential_engine [rand.eng.lcong]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::minstd_rand0 a;\n+  std::minstd_rand0 b;\n+\n+  a(); // advance\n+  str << a;\n+  VERIFY( !(a == b) );\n+\n+  str >> b;\n+  VERIFY( a == b );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4c83a97adfd9d7e872525055a6d68beb10d54193", "filename": "libstdc++-v3/testsuite/26_numerics/random/linear_congruential_engine/requirements/non_uint_neg.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Frequirements%2Fnon_uint_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Frequirements%2Fnon_uint_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Frequirements%2Fnon_uint_neg.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,33 @@\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x -D_GLIBCXX_CONCEPT_CHECKS\" }\n+// { dg-error \"not a valid type\" \"\" { target *-*-* } 32 }\n+// { dg-error \"invalid type\"     \"\" { target *-*-* } 32 }\n+\n+// 26.4.3.1 class template linear_congruential_engine [rand.eng.lcong]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+\n+std::linear_congruential_engine<double, 48271, 0, 2147483647> x;\n+"}, {"sha": "5c9b8ad6abbfc5b885cf09f1e3e4380e5ff9bfd1", "filename": "libstdc++-v3/testsuite/26_numerics/random/linear_congruential_engine/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.1 class template linear_congruential_engine [rand.eng.lcong]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::linear_congruential_engine<unsigned long, 2, 0, 4> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "4fe1dda52138c16161acd64b1918218530bdfba5", "filename": "libstdc++-v3/testsuite/26_numerics/random/lognormal_distribution/cons/default.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.2 Class template lognormal_distribution [rand.dist.norm.lognormal]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::lognormal_distribution<> u;\n+  VERIFY( u.m() == 0.0 );\n+  VERIFY( u.s() == 1.0 );\n+  typedef std::lognormal_distribution<>::result_type result_type;\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "42fe3ac38167f2f54a1997fe63a12d0cc8c08d25", "filename": "libstdc++-v3/testsuite/26_numerics/random/lognormal_distribution/cons/parms.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.2 Class template lognormal_distribution [rand.dist.norm.lognormal]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::lognormal_distribution<> u(5.0, 2.0);\n+  VERIFY( u.m() == 5.0 );\n+  VERIFY( u.s() == 2.0 );\n+  typedef std::lognormal_distribution<>::result_type result_type;\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3626cfbb424e0c5315c46790cd112461a87dcfc6", "filename": "libstdc++-v3/testsuite/26_numerics/random/lognormal_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.2 Class template lognormal_distribution [rand.dist.norm.lognormal]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::lognormal_distribution<double> u(5.0, 2.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c1260aa604ac7a69df4651f267c28e83b6ff2e04", "filename": "libstdc++-v3/testsuite/26_numerics/random/lognormal_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flognormal_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.2 Class template lognormal_distribution [rand.dist.norm.lognormal]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::lognormal_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "e335b82217b941bab5aec8fe0a4cfab4671432a3", "filename": "libstdc++-v3/testsuite/26_numerics/random/mersenne_twister_engine/cons/default.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.2 Class template mersenne_twister_engine [rand.eng.mers]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  typedef unsigned long value_type;\n+\n+  std::mersenne_twister_engine<\n+    value_type, 32, 624, 397, 31,\n+    0x9908b0dful, 11,\n+    0xfffffffful, 7,\n+    0x9d2c5680ul, 15,\n+    0xefc60000ul, 18, 1812433253ul> x;\n+\n+  VERIFY( x.min() == 0 );\n+  // XXX  VERIFY( x.max() == 4294967295ul);\n+  VERIFY( x() == 3499211612ul );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a5e0489fefaa2a19e5ff2a67db9d7d84a534939d", "filename": "libstdc++-v3/testsuite/26_numerics/random/mersenne_twister_engine/cons/seed1.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Fcons%2Fseed1.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.2 Class template mersenne_twister_engine [rand.eng.mers]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  unsigned long seed = 2;\n+  std::mersenne_twister_engine<\n+    unsigned long, 32, 624, 397, 31,\n+    0x9908b0dful, 11,\n+    0xfffffffful, 7,\n+    0x9d2c5680ul, 15,\n+    0xefc60000ul, 18, 1812433253ul> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "954f27360f47104de66803f4dda931763e5ee304", "filename": "libstdc++-v3/testsuite/26_numerics/random/mersenne_twister_engine/cons/seed2.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Fcons%2Fseed2.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.2 Class template mersenne_twister_engine [rand.eng.mers]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  double seed = 2.0;\n+  std::mersenne_twister_engine<\n+    unsigned long, 32, 624, 397, 31,\n+    0x9908b0dful, 11,\n+    0xfffffffful, 7,\n+    0x9d2c5680ul, 15,\n+    0xefc60000ul, 18, 1812433253ul> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1e7b4d9941c0afbccfefd28512f61839112ef09c", "filename": "libstdc++-v3/testsuite/26_numerics/random/mersenne_twister_engine/operators/equal.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Foperators%2Fequal.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,53 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.2 Class template mersenne_twister_engine [rand.eng.mers]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::mersenne_twister_engine<\n+    unsigned long, 32, 624, 397, 31,\n+    0x9908b0dful, 11,\n+    0xfffffffful, 7,\n+    0x9d2c5680ul, 15,\n+    0xefc60000ul, 18, 1812433253ul> u, v;\n+\n+  VERIFY( u == v );\n+\n+  u.discard(100);\n+  v.discard(100);\n+\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "90f51d6cbf2b539419028305980060227e724888", "filename": "libstdc++-v3/testsuite/26_numerics/random/mersenne_twister_engine/operators/serialize.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,56 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.2 Class template mersenne_twister_engine [rand.eng.mers]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <sstream>\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::mersenne_twister_engine<\n+    unsigned long, 32, 624, 397, 31,\n+    0x9908b0dful, 11,\n+    0xfffffffful, 7,\n+    0x9d2c5680ul, 15,\n+    0xefc60000ul, 18, 1812433253ul> u, v;\n+\n+  u(); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e94bd08a352c4ff82ef7d99f7a66e554a5388477", "filename": "libstdc++-v3/testsuite/26_numerics/random/mersenne_twister_engine/requirements/typedefs.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.2 Class template mersenne_twister_engine [rand.eng.mers]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::mersenne_twister_engine<unsigned long,\n+    32, 624, 397, 31,\n+    0x9908b0df, 11,\n+    0xfffffffful, 7,\n+    0x9d2c5680, 15,\n+    0xefc60000, 18, 1812433253ul> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "c8118a3bedfe4c04ddd899aaa6511bc5336f0d0b", "filename": "libstdc++-v3/testsuite/26_numerics/random/minstd_rand.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fminstd_rand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fminstd_rand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fminstd_rand.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-18  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2006, 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.5 Engines with predefined parameters\n+// 26.4.5 [2]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::minstd_rand a;\n+  a.discard(9999);\n+\n+  VERIFY( a() == 399268537 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "045f1f97b5e919bd0b91b1c1dea739d55d9b8097", "filename": "libstdc++-v3/testsuite/26_numerics/random/minstd_rand0.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fminstd_rand0.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fminstd_rand0.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fminstd_rand0.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.5 Engines and egine adaptors with predefined parameters [rand.predef]\n+// 26.4.5 [1]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::minstd_rand0 a;\n+  a.discard(9999);\n+\n+  VERIFY( a() == 1043618065 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "81e2f086efbe5aaf27fc5d496ffd291bdf9b94eb", "filename": "libstdc++-v3/testsuite/26_numerics/random/mt19937.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmt19937.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmt19937.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmt19937.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-18  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2006, 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.5 Engines and egine adaptors with predefined parameters [rand.predef]\n+// 26.4.5 [3]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::mt19937 a;\n+  a.discard(9999);\n+\n+  VERIFY( a() == 4123659995ul );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2ec8a54ce5e9a21121be7055681292d960d20273", "filename": "libstdc++-v3/testsuite/26_numerics/random/mt19937_64.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmt19937_64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmt19937_64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmt19937_64.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-18  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2006, 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.5 Engines and egine adaptors with predefined parameters [rand.predef]\n+// 26.4.5 [4]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::mt19937_64 a;\n+  a.discard(9999);\n+\n+  VERIFY( a() == 9981545732273789042ul );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "280a9d7833e8cf97541e54e8981627956c88ec0e", "filename": "libstdc++-v3/testsuite/26_numerics/random/negative_binomial_distribution/cons/default.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.4 Class template negative_binomial_distribution [rand.dist.bern.negbin]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::negative_binomial_distribution<> u;\n+  VERIFY( u.k() == 1 );\n+  VERIFY( u.p() == 0.5 );\n+  typedef std::negative_binomial_distribution<>::result_type result_type;\n+  VERIFY( u.min() == 0 );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0c2f66d5d95a8b5d1654370c8b0188a3a211ebaa", "filename": "libstdc++-v3/testsuite/26_numerics/random/negative_binomial_distribution/cons/parms.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.4 Class template negative_binomial_distribution [rand.dist.bern.negbin]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::negative_binomial_distribution<> u(3, 0.75);\n+  VERIFY( u.k() == 3 );\n+  VERIFY( u.p() == 0.75 );\n+  typedef std::negative_binomial_distribution<>::result_type result_type;\n+  VERIFY( u.min() == 0 );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1817d731afe3a74560e2be9b0f26857d0effe531", "filename": "libstdc++-v3/testsuite/26_numerics/random/negative_binomial_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.4 Class template negative_binomial_distribution [rand.dist.bern.negbin]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::negative_binomial_distribution<int> u(3, 0.75), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b5888c426c87835ba4e081fcd695685565e6fa92", "filename": "libstdc++-v3/testsuite/26_numerics/random/negative_binomial_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.2.4 Class template negative_binomial_distribution [rand.dist.bern.negbin]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::negative_binomial_distribution<int> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "1c6ee51a172c73f1c7b087c40a4683101bbf8aa4", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_distribution/cons/default.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.1 Class template normal_distribution [rand.dist.norm.normal]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::normal_distribution<> u;\n+  VERIFY( u.mean() == 0.0 );\n+  VERIFY( u.stddev() == 1.0 );\n+  typedef std::normal_distribution<>::result_type result_type;\n+  VERIFY( u.min() == std::numeric_limits<result_type>::min() );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "41bf9c44ffcb471d22c3b64758746c0be1cc312b", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_distribution/cons/parms.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.1 Class template normal_distribution [rand.dist.norm.normal]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::normal_distribution<> u(5.0, 2.0);\n+  VERIFY( u.mean() == 5.0 );\n+  VERIFY( u.stddev() == 2.0 );\n+  typedef std::normal_distribution<>::result_type result_type;\n+  VERIFY( u.min() == std::numeric_limits<result_type>::min() );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fdf90ca525d23c2c55fe82327939e7538d191be4", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.1 Class template normal_distribution [rand.dist.norm.normal]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::normal_distribution<double> u(5.0, 2.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d22ad223a5433bb5d24025730b872d3a725a0391", "filename": "libstdc++-v3/testsuite/26_numerics/random/normal_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnormal_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.1 Class template normal_distribution [rand.dist.norm.normal]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::normal_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "f5e9506d0f4b5b7877c7d226ff01cce9290c6124", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_constant_distribution/cons/default.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-03  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.2 Class template piecewise_constant_distribution [rand.dist.samp.pconst]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::piecewise_constant_distribution<> u;\n+  std::vector<double> interval = u.intervals();\n+  std::vector<double> density = u.densities();\n+  VERIFY( interval.size() == 2 );\n+  VERIFY( interval[0] == 0.0 );\n+  VERIFY( interval[1] == 1.0 );\n+  VERIFY( density.size() == 1 );\n+  VERIFY( density[0] == 1.0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "22bf5b2c4389d8f6066b4d697aafbc7b7edc2bce", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_constant_distribution/cons/initlist_fun.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Finitlist_fun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Finitlist_fun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Finitlist_fun.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,71 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-03  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.2 Class template piecewise_constant_distribution [rand.dist.samp.pconst]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+struct cosine_distribution\n+{\n+    cosine_distribution(double x0, double lambda)\n+    : _M_x0(x0), _M_lambda(lambda)\n+    { }\n+\n+    double\n+    operator()(double x)\n+    {\n+      if (x - _M_x0 < -_M_lambda / 4)\n+        return 0.0;\n+      else if (x - _M_x0 > _M_lambda / 4)\n+        return 0.0;\n+      else\n+        return std::cos(2 * M_PI * (x - _M_x0) / _M_lambda);\n+    }\n+\n+private:\n+    double _M_x0;\n+    double _M_lambda;\n+};\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  cosine_distribution cd(1.5, 3.0);\n+  std::piecewise_constant_distribution<> u({-10.0, -8.0, -6.0, -4.0, -2.0,\n+                                            0.0, 2.0, 4.0, 6.0, 8.0, 10.0},\n+                                           cd);\n+  std::vector<double> interval = u.intervals();\n+  std::vector<double> density = u.densities();\n+  VERIFY( interval.size() == 11 );\n+  VERIFY( density.size() == 10 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ff900a64049323caca62325e184a597d50afc67c", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_constant_distribution/cons/num_xbound_fun.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Fnum_xbound_fun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Fnum_xbound_fun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Fnum_xbound_fun.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,69 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-03  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.2 Class template piecewise_constant_distribution [rand.dist.samp.pconst]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+struct cosine_distribution\n+{\n+    cosine_distribution(double x0, double lambda)\n+    : _M_x0(x0), _M_lambda(lambda)\n+    { }\n+\n+    double\n+    operator()(double x)\n+    {\n+      if (x - _M_x0 < -_M_lambda / 4)\n+        return 0.0;\n+      else if (x - _M_x0 > _M_lambda / 4)\n+        return 0.0;\n+      else\n+        return std::cos(2 * M_PI * (x - _M_x0) / _M_lambda);\n+    }\n+\n+private:\n+    double _M_x0;\n+    double _M_lambda;\n+};\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  cosine_distribution cd(1.5, 3.0);\n+  std::piecewise_constant_distribution<> u(21, -10.0, 10.0, cd);\n+  std::vector<double> interval = u.intervals();\n+  std::vector<double> density = u.densities();\n+  VERIFY( interval.size() == 22 );\n+  VERIFY( density.size() == 21 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5e2ee1024fad38b8f6d6281ec6316b7a32dee166", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_constant_distribution/cons/range.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Fcons%2Frange.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-03  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.2 Class template piecewise_constant_distribution [rand.dist.samp.pconst]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<double> x = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0};\n+  std::vector<double> wt = {0.5, 1.0, 2.5, 1.5, 0.5};\n+  std::piecewise_constant_distribution<> u(x.begin(), x.end(), wt.begin());\n+  std::vector<double> interval = u.intervals();\n+  std::vector<double> density = u.densities();\n+  VERIFY( interval.size() == 6 );\n+  VERIFY( interval[0] == 0.0 );\n+  VERIFY( interval[5] == 5.0 );\n+  VERIFY( density.size() == 5 );\n+  VERIFY( density[0] == 0.5 / 6.0 );\n+  VERIFY( density[2] == 2.5 / 6.0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "28b2fb3333d80248afc7d21204955f119fb631ae", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_constant_distribution/operators/serialize.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-05  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.2 Class template piecewise_constant_distribution [rand.dist.samp.pconst]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::vector<double> x = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0};\n+  std::vector<double> wt = {0.5, 1.0, 2.5, 1.5, 0.5};\n+  std::piecewise_constant_distribution<double>\n+     u(x.begin(), x.end(), wt.begin()), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "523261e488ca9a04af3b32dfca2f7b7ce198bae5", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_constant_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_constant_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-03  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.2 Class template piecewise_constant_distribution [rand.dist.samp.pconst]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::piecewise_constant_distribution<> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "41c5e484a35b5c791f40606f4dc694ee9d45bdf5", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_linear_distribution/cons/default.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-03  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.3 Class template piecewise_linear_distribution [rand.dist.samp.plinear]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::piecewise_linear_distribution<> u;\n+  std::vector<double> interval = u.intervals();\n+  std::vector<double> density = u.densities();\n+  VERIFY( interval.size() == 2 );\n+  VERIFY( interval[0] == 0.0 );\n+  VERIFY( interval[1] == 1.0 );\n+  VERIFY( density.size() == 2 );\n+  VERIFY( density[0] == 1.0 );\n+  VERIFY( density[1] == 1.0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "91db760cef7094116cec7680d4ec5ad0ce443586", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_linear_distribution/cons/initlist_fun.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Finitlist_fun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Finitlist_fun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Finitlist_fun.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,71 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-03  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.3 Class template piecewise_linear_distribution [rand.dist.samp.plinear]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+struct cosine_distribution\n+{\n+    cosine_distribution(double x0, double lambda)\n+    : _M_x0(x0), _M_lambda(lambda)\n+    { }\n+\n+    double\n+    operator()(double x)\n+    {\n+      if (x - _M_x0 < -_M_lambda / 4)\n+        return 0.0;\n+      else if (x - _M_x0 > _M_lambda / 4)\n+        return 0.0;\n+      else\n+        return std::cos(2 * M_PI * (x - _M_x0) / _M_lambda);\n+    }\n+\n+private:\n+    double _M_x0;\n+    double _M_lambda;\n+};\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  cosine_distribution cd(1.5, 3.0);\n+  std::piecewise_linear_distribution<> u({-10.0, -8.0, -6.0, -4.0, -2.0,\n+                                          0.0, 2.0, 4.0, 6.0, 8.0, 10.0},\n+                                         cd);\n+  std::vector<double> interval = u.intervals();\n+  std::vector<double> density = u.densities();\n+  VERIFY( interval.size() == 11 );\n+  VERIFY( density.size() == 11 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "187601b8a410df4f30e3ec8f6de063f9f22befad", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_linear_distribution/cons/num_xbound_fun.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Fnum_xbound_fun.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Fnum_xbound_fun.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Fnum_xbound_fun.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,69 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-03  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.3 Class template piecewise_linear_distribution [rand.dist.samp.plinear]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+struct cosine_distribution\n+{\n+    cosine_distribution(double x0, double lambda)\n+    : _M_x0(x0), _M_lambda(lambda)\n+    { }\n+\n+    double\n+    operator()(double x)\n+    {\n+      if (x - _M_x0 < -_M_lambda / 4)\n+        return 0.0;\n+      else if (x - _M_x0 > _M_lambda / 4)\n+        return 0.0;\n+      else\n+        return std::cos(2 * M_PI * (x - _M_x0) / _M_lambda);\n+    }\n+\n+private:\n+    double _M_x0;\n+    double _M_lambda;\n+};\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  cosine_distribution cd(1.5, 3.0);\n+  std::piecewise_linear_distribution<> u(21, -10.0, 10.0, cd);\n+  std::vector<double> interval = u.intervals();\n+  std::vector<double> density = u.densities();\n+  VERIFY( interval.size() == 22 );\n+  VERIFY( density.size() == 22 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1e0dbbc824a3a0432bf844d00830951cc21aba41", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_linear_distribution/cons/range.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Fcons%2Frange.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-03  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.3 Class template piecewise_linear_distribution [rand.dist.samp.plinear]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::vector<double> x = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0};\n+  std::vector<double> wt = {0.0, 1.0, 2.5, 1.5, 3.5, 0.0};\n+  std::piecewise_linear_distribution<> u(x.begin(), x.end(), wt.begin());\n+  std::vector<double> interval = u.intervals();\n+  std::vector<double> density = u.densities();\n+  VERIFY( interval.size() == 6 );\n+  VERIFY( interval[0] == 0.0 );\n+  VERIFY( interval[5] == 5.0 );\n+  VERIFY( density.size() == 6 );\n+  VERIFY( density[0] == 0.0 );\n+  VERIFY( density[4] == 3.5 / 8.5 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c38d47a5d310f89862d3ef62ba190b3ded8a4236", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_linear_distribution/operators/serialize.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-05  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.3 Class template piecewise_linear_distribution [rand.dist.samp.plinear]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::vector<double> x = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0};\n+  std::vector<double> wt = {0.0, 1.0, 2.5, 1.5, 0.5, 0.0};\n+  std::piecewise_linear_distribution<double>\n+     u(x.begin(), x.end(), wt.begin()), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "71f80df80243a7684a2983b8bc64ba0d37cc3a82", "filename": "libstdc++-v3/testsuite/26_numerics/random/piecewise_linear_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpiecewise_linear_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-03  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.5.3 Class template piecewise_linear_distribution [rand.dist.samp.plinear]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::piecewise_linear_distribution<> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "bf6c75328771bfa3b44f78fcfa9d687a6c01fde4", "filename": "libstdc++-v3/testsuite/26_numerics/random/poisson_distribution/cons/default.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.1 Class template poisson_distribution [rand.dist.pois.poisson]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::poisson_distribution<> u;\n+  VERIFY( u.mean() == 1.0 );\n+  VERIFY( u.min() == 0 );\n+  typedef std::poisson_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b498a2e58d3a4b46059c4312ee34e204c6e36652", "filename": "libstdc++-v3/testsuite/26_numerics/random/poisson_distribution/cons/parms.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.1 Class template poisson_distribution [rand.dist.pois.poisson]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::poisson_distribution<> u(5.0);\n+  VERIFY( u.mean() == 5.0 );\n+  VERIFY( u.min() == 0 );\n+  typedef std::poisson_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "79511024885afbe9d799ea50780634da9c09cc56", "filename": "libstdc++-v3/testsuite/26_numerics/random/poisson_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.1 Class template poisson_distribution [rand.dist.pois.poisson]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::poisson_distribution<int> u(5.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "125a9067acc059e4c4449bc2d00754431529b46e", "filename": "libstdc++-v3/testsuite/26_numerics/random/poisson_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.1 Class template poisson_distribution [rand.dist.pois.poisson]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::poisson_distribution<int> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "e162038a90b08322aae7b1309bc26619dd023266", "filename": "libstdc++-v3/testsuite/26_numerics/random/random_device/cons/default.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.6 class random_device [rand.device]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::random_device x;\n+\n+  VERIFY( x.min() == std::numeric_limits<std::random_device::result_type>::min() );\n+  VERIFY( x.max() == std::numeric_limits<std::random_device::result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ec5e16f004bb3f6229bd13cfbd0871dd02f37e09", "filename": "libstdc++-v3/testsuite/26_numerics/random/random_device/cons/token.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Fcons%2Ftoken.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.6 class random_device [rand.device]\n+// 26.4.6 [3]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+#ifdef _GLIBCXX_USE_RANDOM_TR1\n+  std::random_device x(\"/dev/random\");\n+#else\n+  std::random_device x(\"0\");\n+#endif\n+\n+  VERIFY( x.min() == std::numeric_limits<std::random_device::result_type>::min() );\n+  VERIFY( x.max() == std::numeric_limits<std::random_device::result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0ebf1aa551c70b98c253a99d54dd71ad90112cdc", "filename": "libstdc++-v3/testsuite/26_numerics/random/random_device/requirements/typedefs.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Frandom_device%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.6 class random_device [rand.device]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::random_device test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "7b20eb36c3b460b6311380a84d22d02e9dca22a6", "filename": "libstdc++-v3/testsuite/26_numerics/random/ranlux24.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Franlux24.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Franlux24.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Franlux24.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-18  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.5 Engines and egine adaptors with predefined parameters [rand.predef]\n+// 26.4.5 [7]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::ranlux24 a;\n+  a.discard(9999);\n+\n+  VERIFY( a() == 9901578ul );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5298858f95e41ebb33557d675788466106f70228", "filename": "libstdc++-v3/testsuite/26_numerics/random/ranlux24_base.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Franlux24_base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Franlux24_base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Franlux24_base.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-18  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.5 Engines and egine adaptors with predefined parameters [rand.predef]\n+// 26.4.5 [5]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::ranlux24_base a;\n+  a.discard(9999);\n+\n+  VERIFY( a() == 7937952ul );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "57b07205b94e2110f857d0337e2bbe7c5b850331", "filename": "libstdc++-v3/testsuite/26_numerics/random/ranlux48.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Franlux48.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Franlux48.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Franlux48.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-18  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.5 Engines and egine adaptors with predefined parameters [rand.predef]\n+// 26.4.5 [8]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::ranlux48 a;\n+  a.discard(9999);\n+\n+  VERIFY( a() == 249142670248501ull );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c5b1ef64c0da2c6a362d05071aee5f5139671381", "filename": "libstdc++-v3/testsuite/26_numerics/random/ranlux48_base.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Franlux48_base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Franlux48_base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Franlux48_base.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-18  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.5 Engines and egine adaptors with predefined parameters [rand.predef]\n+// 26.4.5 [6]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::ranlux48_base a;\n+  a.discard(9999);\n+\n+  VERIFY( a() == 61839128582725ull );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7bbfdc30420a29215eda37f3e5048bcb1ebde5b2", "filename": "libstdc++-v3/testsuite/26_numerics/random/seed_seq/cons/default.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fseed_seq%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fseed_seq%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fseed_seq%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-05  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.7.1 Class seed_seq [rand.util.seedseq]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::seed_seq seq;\n+\n+  std::vector<unsigned> foo(10000);\n+  seq.generate(foo.begin(), foo.end());\n+\n+  VERIFY( seq.size() == 0 );\n+  //VERIFY();\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4bfa217c181259a10da7eda431adf0dffe621faf", "filename": "libstdc++-v3/testsuite/26_numerics/random/seed_seq/cons/initlist.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fseed_seq%2Fcons%2Finitlist.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fseed_seq%2Fcons%2Finitlist.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fseed_seq%2Fcons%2Finitlist.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2009-02-13  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.7.1 Class seed_seq [rand.util.seedseq]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::seed_seq seq({0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n+\n+  std::vector<unsigned> foo(10000);\n+  seq.generate(foo.begin(), foo.end());\n+\n+  VERIFY( seq.size() == 10 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c5eda5dbcc9d62efb73c7dc9ebd1d8d4829efc72", "filename": "libstdc++-v3/testsuite/26_numerics/random/seed_seq/cons/range.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fseed_seq%2Fcons%2Frange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fseed_seq%2Fcons%2Frange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fseed_seq%2Fcons%2Frange.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-05  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.7.1 Class seed_seq [rand.util.seedseq]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  unsigned in[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n+  std::seed_seq seq(in, in + 10);\n+\n+  std::vector<unsigned> foo(10000);\n+  seq.generate(foo.begin(), foo.end());\n+\n+  VERIFY( seq.size() == 10 );\n+  //VERIFY();\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "90455607149bd90fd3ad16100e85c28b0de5befa", "filename": "libstdc++-v3/testsuite/26_numerics/random/seed_seq/requirements/typedefs.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fseed_seq%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fseed_seq%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fseed_seq%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-05  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.7.1 Class seed_seq [rand.util.seedseq]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::seed_seq test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "a2659dd468cd77f14c59647115d0f858c8a722c4", "filename": "libstdc++-v3/testsuite/26_numerics/random/shuffle_order_engine/cons/base_copy.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fbase_copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fbase_copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fbase_copy.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.3 class template shuffle_order_engine [rand.adapt.shuf]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::linear_congruential_engine\n+            <uint_fast32_t, 16807UL, 0UL, 2147483647UL> base_engine;\n+\n+  base_engine b;\n+\n+  std::shuffle_order_engine<base_engine, 256> e(b);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4e8c7af3d31fbbd4f23eb87e567f2b512864fefd", "filename": "libstdc++-v3/testsuite/26_numerics/random/shuffle_order_engine/cons/base_move.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fbase_move.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fbase_move.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fbase_move.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.3 class template shuffle_order_engine [rand.adapt.shuf]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::linear_congruential_engine\n+            <uint_fast32_t, 16807UL, 0UL, 2147483647UL> base_engine;\n+\n+  std::shuffle_order_engine<base_engine, 256>\n+    e(std::move(base_engine()));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a33a6551c93d61d504c761729a42b30d73097e94", "filename": "libstdc++-v3/testsuite/26_numerics/random/shuffle_order_engine/cons/default.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.3 class template shuffle_order_engine [rand.adapt.shuf]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::shuffle_order_engine\n+    <\n+      std::linear_congruential_engine<uint_fast32_t,16807UL, 0UL, 2147483647UL>,\n+      256\n+    > e;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0df9c55cbf36d7b8313a884629fe9c01df20ba9a", "filename": "libstdc++-v3/testsuite/26_numerics/random/shuffle_order_engine/cons/seed1.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fseed1.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.3 class template shuffle_order_engine [rand.adapt.shuf]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  unsigned long seed = 2;\n+\n+  std::shuffle_order_engine\n+    <\n+      std::linear_congruential_engine<uint_fast32_t,16807UL, 0UL, 2147483647UL>,\n+      256\n+    > e(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c492d0a30a3111406031fb560f8e3b5584464b21", "filename": "libstdc++-v3/testsuite/26_numerics/random/shuffle_order_engine/cons/seed2.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fseed2.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.3 class template shuffle_order_engine [rand.adapt.shuf]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  double seed = 2.0;\n+\n+  std::shuffle_order_engine\n+    <\n+      std::linear_congruential_engine<uint_fast32_t,16807UL, 0UL, 2147483647UL>,\n+      256\n+    > e(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "80c425b3dcfeb3585a4b66d2fea30daa0e8b1f2e", "filename": "libstdc++-v3/testsuite/26_numerics/random/shuffle_order_engine/cons/seed_seq.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fseed_seq.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fseed_seq.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fseed_seq.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-12-07  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.3 class template shuffle_order_engine [rand.adapt.shuf]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::seed_seq seq;\n+\n+  std::shuffle_order_engine\n+    <\n+      std::linear_congruential_engine<uint_fast32_t,16807UL, 0UL, 2147483647UL>,\n+      256\n+    > e(seq);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3b5cebb58534cb04c74ccfa2201feea3aa9c52af", "filename": "libstdc++-v3/testsuite/26_numerics/random/shuffle_order_engine/operators/equal.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Foperators%2Fequal.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.1 class template discard_block_engine [rand.adapt.disc]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::shuffle_order_engine\n+    <\n+      std::linear_congruential_engine<uint_fast32_t,16807UL, 0UL, 2147483647UL>,\n+      256\n+    > u, v;\n+\n+  VERIFY( u == v );\n+\n+  u.discard(100);\n+  v.discard(100);\n+\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "afaa40514685ce755b8ece22e0fd99191dd0d49c", "filename": "libstdc++-v3/testsuite/26_numerics/random/shuffle_order_engine/operators/serialize.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.1 class template discard_block_engine [rand.adapt.disc]\n+// 26.4.2.3 concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::shuffle_order_engine\n+    <\n+      std::linear_congruential_engine<uint_fast32_t,16807UL, 0UL, 2147483647UL>,\n+      256\n+    > u, v;\n+\n+  u(); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "605a10089ce185f992d78c9a75ae26de8e345446", "filename": "libstdc++-v3/testsuite/26_numerics/random/shuffle_order_engine/requirements/typedefs.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.4.3 class template shuffle_order_engine [rand.adapt.shuf]\n+// 26.4.2.3 Concept RandomNumberEngineAdaptor [rand.concept.adapt]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::shuffle_order_engine\n+    <\n+      std::linear_congruential_engine\n+        <\n+          uint_fast32_t,16807UL, 0UL, 2147483647UL\n+        >,\n+      256\n+    > test_type;\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "5f0169b739d7f510c0732c6037014c2c78099a69", "filename": "libstdc++-v3/testsuite/26_numerics/random/student_t_distribution/cons/default.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.6 Class template student_t_distribution [rand.dist.norm.t]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::student_t_distribution<> u;\n+  VERIFY( u.n() == 1.0 );\n+  typedef std::student_t_distribution<>::result_type result_type;\n+  VERIFY( u.min() == std::numeric_limits<result_type>::min() );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4d6aa6149e5bf52b4f1183f65778ca1ac05951cd", "filename": "libstdc++-v3/testsuite/26_numerics/random/student_t_distribution/cons/parms.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.6 Class template student_t_distribution [rand.dist.norm.t]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::student_t_distribution<> u(1.5);\n+  VERIFY( u.n() == 1.5 );\n+  typedef std::student_t_distribution<>::result_type result_type;\n+  VERIFY( u.min() == std::numeric_limits<result_type>::min() );\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ab3a9bb6112ceb43e1351ae4ce63a8a68f61174b", "filename": "libstdc++-v3/testsuite/26_numerics/random/student_t_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.6 Class template student_t_distribution [rand.dist.norm.t]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::student_t_distribution<double> u(1.5), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3380873cd63def699cfaafd3f02613cdca442be0", "filename": "libstdc++-v3/testsuite/26_numerics/random/student_t_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fstudent_t_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.4.6 Class template student_t_distribution [rand.dist.norm.t]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::student_t_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "8d841074f5bae571347a3316ae3d20a0c1eac37f", "filename": "libstdc++-v3/testsuite/26_numerics/random/subtract_with_carry_engine/cons/default.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.3 Class template subtract_with_carry_engine [rand.eng.sub]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::subtract_with_carry_engine<unsigned long, 24, 10, 24> x;\n+  VERIFY( x.min() == 0 );\n+  VERIFY( x.max() == ((1UL << 24) - 1) );\n+  VERIFY( x() == 15039276 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e26261a1219cfc7a1847fdfbb02cb91616d1bc40", "filename": "libstdc++-v3/testsuite/26_numerics/random/subtract_with_carry_engine/cons/seed1.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Fseed1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Fseed1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Fseed1.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.3 Class template subtract_with_carry_engine [rand.eng.sub]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  unsigned long seed = 2;\n+  std::subtract_with_carry_engine<unsigned long, 24, 10, 24> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8b96c16b43d53e725999858e735345c11abdb2b0", "filename": "libstdc++-v3/testsuite/26_numerics/random/subtract_with_carry_engine/cons/seed2.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Fseed2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Fseed2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Fseed2.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.3 Class template subtract_with_carry_engine [rand.eng.sub]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  double seed = 2.0;\n+  std::subtract_with_carry_engine<unsigned long, 24, 10, 24> x(seed);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9dbed3c46536960c0a3773a8eadaeb8290e3f398", "filename": "libstdc++-v3/testsuite/26_numerics/random/subtract_with_carry_engine/operators/equal.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Foperators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Foperators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Foperators%2Fequal.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.3 Class template subtract_with_carry_engine [rand.eng.sub]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::subtract_with_carry_engine<unsigned long, 24, 10, 24> u;\n+  std::subtract_with_carry_engine<unsigned long, 24, 10, 24> v;\n+\n+  VERIFY( u == v );\n+\n+  u.discard(100);\n+  v.discard(100);\n+\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e6705e43aef7156592869788621ef225183d976c", "filename": "libstdc++-v3/testsuite/26_numerics/random/subtract_with_carry_engine/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.3 Class template subtract_with_carry_engine [rand.eng.sub]\n+// 26.4.2.2 Concept RandomNumberEngine [rand.concept.eng]\n+\n+#include <sstream>\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::subtract_with_carry_engine<unsigned long, 24, 10, 24> u;\n+  std::subtract_with_carry_engine<unsigned long, 24, 10, 24> v;\n+\n+  u(); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2cd922f1c6000226980005f915dc519876d4e85a", "filename": "libstdc++-v3/testsuite/26_numerics/random/subtract_with_carry_engine/requirements/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.3.3 Class template subtract_with_carry_engine [rand.eng.sub]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::subtract_with_carry_engine<unsigned long, 24, 10, 24>\n+    test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "db5c653e923bfa5f22103ac62f0021b382760647", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_int_distribution/cons/default.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.1.1 Class template uniform_int_distribution [rand.dist.uni.int]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::uniform_int_distribution<int> u;\n+  VERIFY( u.a() == 0 );\n+  VERIFY( u.b() == 9 );\n+  VERIFY( u.min() == 0 );\n+  VERIFY( u.max() == 9 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3e4f4858d98246df08a187eed6b4e8fdafc0cc92", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_int_distribution/cons/parms.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.1.1 Class template uniform_int_distribution [rand.dist_uni]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::uniform_int_distribution<int> u(1, 20);\n+  VERIFY( u.a() == 1 );\n+  VERIFY( u.b() == 20 );\n+  VERIFY( u.min() == 1 );\n+  VERIFY( u.max() == 20 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "129cc25d0c6dbb11ab99bceb4d63808d78b2101a", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_int_distribution/cons/parms_neg.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fparms_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fparms_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Fcons%2Fparms_neg.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,41 @@\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-std=c++0x -D_GLIBCXX_DEBUG\" }\n+\n+// 26.4.8.1.1 Class template uniform_int_distribution [rand.dist_uni]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::uniform_int_distribution<int> u(20, 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "486bdb4ea9bd534bd175cf3002195941156f8a90", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_int_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.1.1 Class template uniform_int_distribution [rand.dist_uni]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::uniform_int_distribution<int> u(1, 20), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2074c12d03a8626071ca0fc1f58c8e5ab6b668d3", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_int_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.1.1 Class template uniform_int_distribution [rand.dist_uni]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::uniform_int_distribution<int> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "944fe827751112dfa8eea06c2d0417827a3cf0b1", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_real_distribution/cons/default.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.1.1 Class template uniform_real_distribution [rand.dist.uni.real]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::uniform_real_distribution<double> u;\n+  VERIFY( u.a() == 0.0 );\n+  VERIFY( u.b() == 1.0 );\n+  VERIFY( u.min() == 0.0 );\n+  VERIFY( u.max() == 1.0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "cbfbd41b8b1b3c8503387292035b9d3ef21c05c4", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_real_distribution/cons/parms.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.1.1 Class template uniform_real_distribution [rand.dist_uni]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::uniform_real_distribution<double> u(-5.0, 5.0);\n+  VERIFY( u.a() == -5.0 );\n+  VERIFY( u.b() == 5.0 );\n+  VERIFY( u.min() == -5.0 );\n+  VERIFY( u.max() == 5.0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "930f9de1464d0e5f066e5614b9b06fc79e6125e7", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_real_distribution/cons/parms_neg.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Fcons%2Fparms_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Fcons%2Fparms_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Fcons%2Fparms_neg.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,41 @@\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// { dg-do run { xfail *-*-* } }\n+// { dg-options \"-std=c++0x -D_GLIBCXX_DEBUG\" }\n+\n+// 26.4.8.1.1 Class template uniform_real_distribution [rand.dist_uni]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::uniform_real_distribution<double> u(5.0, 0.0);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3fbc584307de4a9ce333f9197cf1a6d1c22075f0", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_real_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.1.2 Class template uniform_real_distribution [rand.dist.uni.real]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::uniform_real_distribution<double> u(-5.0, 5.0), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "696e20b601ab209ab59d3951982cd39951332bc4", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_real_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_real_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.1.2 Class template uniform_real_distribution [rand.dist.uni.real]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::uniform_real_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}, {"sha": "6867c117a627d8a5b6189df25e6a687338ee8869", "filename": "libstdc++-v3/testsuite/26_numerics/random/weibull_distribution/cons/default.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Fcons%2Fdefault.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.4 Class template weibull_distribution [rand.dist.pois.weibull]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::weibull_distribution<> u;\n+  VERIFY( u.a() == 1.0 );\n+  VERIFY( u.b() == 1.0 );\n+  VERIFY( u.min() == 0.0 );\n+  typedef std::weibull_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3eec8c6489d9bce8c912cc630f67560530dcd92c", "filename": "libstdc++-v3/testsuite/26_numerics/random/weibull_distribution/cons/parms.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Fcons%2Fparms.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Fcons%2Fparms.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Fcons%2Fparms.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.4 Class template weibull_distribution [rand.dist.pois.weibull]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::weibull_distribution<> u(2.0, 3.5);\n+  VERIFY( u.a() == 2.0 );\n+  VERIFY( u.b() == 3.5 );\n+  VERIFY( u.min() == 0.0 );\n+  typedef std::weibull_distribution<>::result_type result_type;\n+  VERIFY( u.max() == std::numeric_limits<result_type>::max() );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bf548d3feb6d00a933aaebd379c56116c8786403", "filename": "libstdc++-v3/testsuite/26_numerics/random/weibull_distribution/operators/serialize.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Foperators%2Fserialize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Foperators%2Fserialize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Foperators%2Fserialize.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.4 Class template weibull_distribution [rand.dist.pois.weibull]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::stringstream str;\n+  std::weibull_distribution<double> u(2.0, 3.5), v;\n+  std::minstd_rand0 rng;\n+\n+  u(rng); // advance\n+  str << u;\n+\n+  VERIFY( !(u == v) );\n+\n+  str >> v;\n+  VERIFY( u == v );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "acdea1d22b1f2d34a796e3ffc2231681e89a5f62", "filename": "libstdc++-v3/testsuite/26_numerics/random/weibull_distribution/requirements/typedefs.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e79468d01ffd92fd20fa947086a15dddc2249b3/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fweibull_distribution%2Frequirements%2Ftypedefs.cc?ref=8e79468d01ffd92fd20fa947086a15dddc2249b3", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++0x\" }\n+//\n+// 2008-11-24  Edward M. Smith-Rowland <3dw4rd@verizon.net>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 26.4.8.3.4 Class template weibull_distribution [rand.dist.pois.weibull]\n+// 26.4.2.4 Concept RandomNumberDistribution [rand.concept.dist]\n+\n+#include <random>\n+\n+void\n+test01()\n+{\n+  typedef std::weibull_distribution<double> test_type;\n+\n+  typedef test_type::result_type result_type;\n+}"}]}