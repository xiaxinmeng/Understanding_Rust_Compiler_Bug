{"sha": "e8926ce09f3ef0795b87dc922f431157e6916748", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg5MjZjZTA5ZjNlZjA3OTViODdkYzkyMmY0MzExNTdlNjkxNjc0OA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-03-19T16:58:42Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-03-19T16:58:42Z"}, "message": "rs6000: Unaligned stfiwx on older CPUs (PR89746)\n\nThe \"classic\" PowerPCs (6xx/7xx) are not STRICT_ALIGNMENT, but their\nfloating point units are.  This is not normally a problem, the ABIs\nmake everything FP aligned.  The RTL patterns converting FP to integer\nhowever get a potentially unaligned destination, and we do not want to\ndo an stfiwx on that on such older CPUs.\n\nThis fixes it.  It does not change anything for TARGET_MFCRF targets\n(POWER4 and later).  It also won't change anything for strict-alignment\ntargets, or CPUs without hardware FP of course, or CPUs that do not\nimplement stfiwx (older 4xx/5xx/8xx).\n\nIt does not change the corresponding fixuns* pattern, because that can\nnot be enabled on any CPU that cannot handle unaligned FP well.\n\n\n\tPR target/89746\n\t* config/rs6000/rs6000.md (fix_trunc<mode>si2_stfiwx): If we have a\n\tnon-TARGET_MFCRF target, and the dest is memory but not 32-bit aligned,\n\tgo via a stack temporary.\n\nFrom-SVN: r269802", "tree": {"sha": "27529516a80a71b94af1fe3a2dfaa158936fc923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27529516a80a71b94af1fe3a2dfaa158936fc923"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8926ce09f3ef0795b87dc922f431157e6916748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8926ce09f3ef0795b87dc922f431157e6916748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8926ce09f3ef0795b87dc922f431157e6916748", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8926ce09f3ef0795b87dc922f431157e6916748/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bb48c402f4ca67c9e5d0ed1104700c50058d6fb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb48c402f4ca67c9e5d0ed1104700c50058d6fb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb48c402f4ca67c9e5d0ed1104700c50058d6fb8"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "510faab83abb8a79d6adcfa195448ed2a0acfbe5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8926ce09f3ef0795b87dc922f431157e6916748/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8926ce09f3ef0795b87dc922f431157e6916748/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8926ce09f3ef0795b87dc922f431157e6916748", "patch": "@@ -1,3 +1,10 @@\n+2018-03-19  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/89746\n+\t* config/rs6000/rs6000.md (fix_trunc<mode>si2_stfiwx): If we have a\n+\tnon-TARGET_MFCRF target, and the dest is memory but not 32-bit aligned,\n+\tgo via a stack temporary.\n+\n 2019-03-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/89378"}, {"sha": "297b884f648f56ca8d73e5df4bc4e45bf2065fc8", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8926ce09f3ef0795b87dc922f431157e6916748/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8926ce09f3ef0795b87dc922f431157e6916748/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e8926ce09f3ef0795b87dc922f431157e6916748", "patch": "@@ -5639,13 +5639,13 @@\n     tmp = gen_reg_rtx (DImode);\n \n   emit_insn (gen_fctiwz_<mode> (tmp, src));\n-  if (MEM_P (dest))\n+  if (MEM_P (dest) && (TARGET_MFCRF || MEM_ALIGN (dest) >= 32))\n     {\n       dest = rs6000_force_indexed_or_indirect_mem (dest);\n       emit_insn (gen_stfiwx (dest, tmp));\n       DONE;\n     }\n-  else if (TARGET_POWERPC64 && (TARGET_MFPGPR || TARGET_DIRECT_MOVE))\n+  else if (TARGET_POWERPC64 && (TARGET_MFPGPR || TARGET_DIRECT_MOVE) && !MEM_P (dest))\n     {\n       dest = gen_lowpart (DImode, dest);\n       emit_move_insn (dest, tmp);"}]}