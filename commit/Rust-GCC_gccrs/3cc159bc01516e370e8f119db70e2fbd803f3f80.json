{"sha": "3cc159bc01516e370e8f119db70e2fbd803f3f80", "node_id": "C_kwDOANBUbNoAKDNjYzE1OWJjMDE1MTZlMzcwZThmMTE5ZGI3MGUyZmJkODAzZjNmODA", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-12-18T11:24:43Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-12-21T13:02:25Z"}, "message": "libffi: Fix X86 32b Darwin build and EH frames.\n\nThis addresses a number of issues in the X86 Darwin 32b port for libffi.\n\n1. The pic symbol stubs are weak definitions; the correct section placement\n   for these depends on the linker version in use.  We do not have access\n   to that information, but we can use the target OS version (assumes that\n   the user has installed the latest version of xcode available).\n   When a coalesced section is in use (OS versions earlier than Darwin12 /\n   OSX 10.8), its name must differ from  __TEXT,__text since otherwise that\n   would correspond to altering the attributes of the .text section (which\n   produces a diagnostic from the assembler).\n   Here we use __TEXT, __textcoal_nt for this which is what GCC emits for\n   these stubs.\n   For later versions than Darwin 12 (OS X 10.8) we can place the stubs in\n   the .text section (if we do not we get a diagnostic from clang -cc1as\n   saying that the use of coalesced sections for this is deprecated).\n\n2. The EH frame is specified manually, since there is no support for .cfi_\n   directives in 'cctools' assemblers.  The implementation needs to provide\n   offsets for CFA advance, code size and to the CIE as signed values\n   rather than relocations. However the cctools assembler will produce a\n   relocation for expressions like ' .long Lxx-Lyy' which then leads to a\n   link-time error.  We correct this by forming the offset values using\n   ' .set' directives and then assigning the results of them.\n\n3. The register numbering used by m32 X86 Darwin EH frames is not the same\n   as the DWARF debug numbering (the Frame and Stack pointer numbers are\n   swapped).\n\n4. The FDE address encoding used by the system tools is '0x10' (PCrel + abs)\n   where the value provided was PCrel + sdata4.\n\n5. GCC does not use compact unwind at present, and it was not implemented\n   until Darwin10 / OSX 10.6.  There were some issues with function location\n   in 10.6 so that the solution here suppresses emitting the compact unwind\n   section until Darwin11 / OSX 10.7.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\nlibffi/ChangeLog:\n\n\t* src/x86/sysv.S (COMDAT): Amend section use for Darwin, accounting\n\tcases where coalesced is needed. (eh_frame): Rework to avoid relocs\n\tthat cause builf fails on earlier Darwin.  Adjust register numbers\n\tto account for X86 m32 Darwin differences between EH and debug.", "tree": {"sha": "12ede8c065bd0e04180237d2ae1289414d1899a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12ede8c065bd0e04180237d2ae1289414d1899a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cc159bc01516e370e8f119db70e2fbd803f3f80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc159bc01516e370e8f119db70e2fbd803f3f80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cc159bc01516e370e8f119db70e2fbd803f3f80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc159bc01516e370e8f119db70e2fbd803f3f80/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "845b514e8a150447ba041294586af76a6ac05158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/845b514e8a150447ba041294586af76a6ac05158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/845b514e8a150447ba041294586af76a6ac05158"}], "stats": {"total": 121, "additions": 83, "deletions": 38}, "files": [{"sha": "c7a0fb51b48cd915064b61afecb95c635f7b6791", "filename": "libffi/src/x86/sysv.S", "status": "modified", "additions": 83, "deletions": 38, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc159bc01516e370e8f119db70e2fbd803f3f80/libffi%2Fsrc%2Fx86%2Fsysv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc159bc01516e370e8f119db70e2fbd803f3f80/libffi%2Fsrc%2Fx86%2Fsysv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fsysv.S?ref=3cc159bc01516e370e8f119db70e2fbd803f3f80", "patch": "@@ -888,10 +888,27 @@ ENDF(C(ffi_closure_raw_THISCALL))\n #endif /* !FFI_NO_RAW_API */\n \n #ifdef X86_DARWIN\n-# define COMDAT(X)\t\t\t\t\t\t\t\\\n-        .section __TEXT,__text,coalesced,pure_instructions;\t\t\\\n+/* The linker in use on earlier Darwin needs weak definitions to be\n+   placed in a coalesced section.  That section should not be called\n+   __TEXT,__text since that would be re-defining the attributes of the\n+   .text section (which is an error for earlier tools). Here we use\n+   '__textcoal_nt' which is what GCC emits for this.\n+   Later linker versions are happy to use a normal section and, after\n+   Darwin12 / OSX 10.8, the tools warn that using coalesced sections\n+   for this is deprecated so we must switch to avoid build fails and/or\n+   deprecation warnings.  */\n+# if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) &&\t\t\\\n+   __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ < 1080\n+#  define COMDAT(X)\t\t\t\t\t\t\t\\\n+        .section __TEXT,__textcoal_nt,coalesced,pure_instructions;\t\\\n+        .weak_definition X;\t\t\t\t\t\t\\\n+        FFI_HIDDEN(X)\n+# else\n+#  define COMDAT(X)\t\t\t\t\t\t\t\\\n+        .text;\t\t\t\t\t\t\t\t\\\n         .weak_definition X;\t\t\t\t\t\t\\\n         FFI_HIDDEN(X)\n+# endif\n #elif defined __ELF__ && !(defined(__sun__) && defined(__svr4__))\n # define COMDAT(X)\t\t\t\t\t\t\t\\\n \t.section .text.X,\"axG\",@progbits,X,comdat;\t\t\t\\\n@@ -916,7 +933,37 @@ ENDF(C(__x86.get_pc_thunk.dx))\n #endif /* DARWIN || HIDDEN */\n #endif /* __PIC__ */\n \n-/* Sadly, OSX cctools-as doesn't understand .cfi directives at all.  */\n+/* Sadly, OSX cctools-as does not understand .cfi directives at all so\n+   we build an eh frame by hand.  */\n+\n+#ifdef __APPLE__\n+/* The cctools assembler will try to make a difference between two local\n+   symbols into a relocation against, which will not work in the eh (produces\n+   link-time fails).\n+   To avoid this, we compute the symbol difference with a .set directive and\n+   then substitute this value.  */\n+# define LEN(N, P)\t.set Llen$N$P,L(N)-L(P); .long Llen$N$P\n+/* Note, this assume DW_CFA_advance_loc1 fits into 7 bits.  */\n+# define ADV(N, P)\t.set Ladv$N$P,L(N)-L(P); .byte 2, Ladv$N$P\n+/* For historical reasons, the EH reg numbers for SP and FP are swapped from\n+   the DWARF ones for 32b Darwin.  */\n+# define SP 5\n+# define FP 4\n+# define ENC 0x10\n+#else\n+# define LEN(N, P)\t.long L(N)-L(P)\n+/* Assume DW_CFA_advance_loc1 fits.  */\n+# define ADV(N, P)\t.byte 2, L(N)-L(P)\n+# define SP 4\n+# define FP 5\n+# define ENC 0x1b\n+#endif\n+\n+#ifdef HAVE_AS_X86_PCREL\n+# define PCREL(X)\tX-.\n+#else\n+# define PCREL(X)\tX@rel\n+#endif\n \n #ifdef __APPLE__\n .section __TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support\n@@ -928,17 +975,11 @@ EHFrame0:\n #else\n .section .eh_frame,EH_FRAME_FLAGS,@progbits\n #endif\n-\n-#ifdef HAVE_AS_X86_PCREL\n-# define PCREL(X)\tX - .\n-#else\n-# define PCREL(X)\tX@rel\n+#ifndef __APPLE__\n+/* EH sections are already suitably aligned on Darwin.  */\n+\t.balign 4\n #endif\n \n-/* Simplify advancing between labels.  Assume DW_CFA_advance_loc1 fits.  */\n-#define ADV(N, P)\t.byte 2, L(N)-L(P)\n-\n-\t.balign 4\n L(CIE):\n \t.set\tL(set0),L(ECIE)-L(SCIE)\n \t.long\tL(set0)\t\t\t/* CIE Length */\n@@ -950,29 +991,29 @@ L(SCIE):\n \t.byte\t0x7c\t\t\t/* CIE Data Alignment Factor */\n \t.byte\t0x8\t\t\t/* CIE RA Column */\n \t.byte\t1\t\t\t/* Augmentation size */\n-\t.byte\t0x1b\t\t\t/* FDE Encoding (pcrel sdata4) */\n-\t.byte\t0xc, 4, 4\t\t/* DW_CFA_def_cfa, %esp offset 4 */\n+\t.byte\tENC\t\t\t/* FDE Encoding (pcrel abs/4byte) */\n+\t.byte\t0xc, SP, 4\t\t/* DW_CFA_def_cfa, %esp offset 4 */\n \t.byte\t0x80+8, 1\t\t/* DW_CFA_offset, %eip offset 1*-4 */\n \t.balign 4\n L(ECIE):\n \n \t.set\tL(set1),L(EFDE1)-L(SFDE1)\n \t.long\tL(set1)\t\t\t/* FDE Length */\n L(SFDE1):\n-\t.long\tL(SFDE1)-L(CIE)\t\t/* FDE CIE offset */\n+\tLEN(SFDE1, CIE)\t\t\t/* FDE CIE offset */\n \t.long\tPCREL(L(UW0))\t\t/* Initial location */\n-\t.long\tL(UW5)-L(UW0)\t\t/* Address range */\n+\tLEN(UW5, UW0)\t\t\t/* Address range */\n \t.byte\t0\t\t\t/* Augmentation size */\n \tADV(UW1, UW0)\n-\t.byte\t0xc, 5, 8\t\t/* DW_CFA_def_cfa, %ebp 8 */\n-\t.byte\t0x80+5, 2\t\t/* DW_CFA_offset, %ebp 2*-4 */\n+\t.byte\t0xc, FP, 8\t\t/* DW_CFA_def_cfa, %ebp 8 */\n+\t.byte\t0x80+FP, 2\t\t/* DW_CFA_offset, %ebp 2*-4 */\n \tADV(UW2, UW1)\n \t.byte\t0x80+3, 0\t\t/* DW_CFA_offset, %ebx 0*-4 */\n \tADV(UW3, UW2)\n \t.byte\t0xa\t\t\t/* DW_CFA_remember_state */\n-\t.byte\t0xc, 4, 4\t\t/* DW_CFA_def_cfa, %esp 4 */\n+\t.byte\t0xc, SP, 4\t\t/* DW_CFA_def_cfa, %esp 4 */\n \t.byte\t0xc0+3\t\t\t/* DW_CFA_restore, %ebx */\n-\t.byte\t0xc0+5\t\t\t/* DW_CFA_restore, %ebp */\n+\t.byte\t0xc0+FP\t\t\t/* DW_CFA_restore, %ebp */\n \tADV(UW4, UW3)\n \t.byte\t0xb\t\t\t/* DW_CFA_restore_state */\n \t.balign\t4\n@@ -981,9 +1022,9 @@ L(EFDE1):\n \t.set\tL(set2),L(EFDE2)-L(SFDE2)\n \t.long\tL(set2)\t\t\t/* FDE Length */\n L(SFDE2):\n-\t.long\tL(SFDE2)-L(CIE)\t\t/* FDE CIE offset */\n+\tLEN(SFDE2, CIE)\t\t\t/* FDE CIE offset */\n \t.long\tPCREL(L(UW6))\t\t/* Initial location */\n-\t.long\tL(UW8)-L(UW6)\t\t/* Address range */\n+\tLEN(UW8,UW6)\t\t\t/* Address range */\n \t.byte\t0\t\t\t/* Augmentation size */\n \tADV(UW7, UW6)\n \t.byte\t0xe, closure_FS+4\t/* DW_CFA_def_cfa_offset */\n@@ -993,9 +1034,9 @@ L(EFDE2):\n \t.set\tL(set3),L(EFDE3)-L(SFDE3)\n \t.long\tL(set3)\t\t\t/* FDE Length */\n L(SFDE3):\n-\t.long\tL(SFDE3)-L(CIE)\t\t/* FDE CIE offset */\n+\tLEN(SFDE3, CIE)\t\t\t/* FDE CIE offset */\n \t.long\tPCREL(L(UW9))\t\t/* Initial location */\n-\t.long\tL(UW11)-L(UW9)\t\t/* Address range */\n+\tLEN(UW11, UW9)\t\t\t/* Address range */\n \t.byte\t0\t\t\t/* Augmentation size */\n \tADV(UW10, UW9)\n \t.byte\t0xe, closure_FS+4\t/* DW_CFA_def_cfa_offset */\n@@ -1005,9 +1046,9 @@ L(EFDE3):\n \t.set\tL(set4),L(EFDE4)-L(SFDE4)\n \t.long\tL(set4)\t\t\t/* FDE Length */\n L(SFDE4):\n-\t.long\tL(SFDE4)-L(CIE)\t\t/* FDE CIE offset */\n+\tLEN(SFDE4, CIE)\t\t/* FDE CIE offset */\n \t.long\tPCREL(L(UW12))\t\t/* Initial location */\n-\t.long\tL(UW20)-L(UW12)\t\t/* Address range */\n+\tLEN(UW20, UW12)\t\t\t/* Address range */\n \t.byte\t0\t\t\t/* Augmentation size */\n \tADV(UW13, UW12)\n \t.byte\t0xe, closure_FS+4\t/* DW_CFA_def_cfa_offset */\n@@ -1033,9 +1074,9 @@ L(EFDE4):\n \t.set\tL(set5),L(EFDE5)-L(SFDE5)\n \t.long\tL(set5)\t\t\t/* FDE Length */\n L(SFDE5):\n-\t.long\tL(SFDE5)-L(CIE)\t\t/* FDE CIE offset */\n+\tLEN(SFDE5, CIE)\t\t\t/* FDE CIE offset */\n \t.long\tPCREL(L(UW21))\t\t/* Initial location */\n-\t.long\tL(UW23)-L(UW21)\t\t/* Address range */\n+\tLEN(UW23, UW21)\t\t\t/* Address range */\n \t.byte\t0\t\t\t/* Augmentation size */\n \tADV(UW22, UW21)\n \t.byte\t0xe, closure_FS+4\t/* DW_CFA_def_cfa_offset */\n@@ -1045,9 +1086,9 @@ L(EFDE5):\n \t.set\tL(set6),L(EFDE6)-L(SFDE6)\n \t.long\tL(set6)\t\t\t/* FDE Length */\n L(SFDE6):\n-\t.long\tL(SFDE6)-L(CIE)\t\t/* FDE CIE offset */\n+\tLEN(SFDE6, CIE)\t\t\t/* FDE CIE offset */\n \t.long\tPCREL(L(UW24))\t\t/* Initial location */\n-\t.long\tL(UW26)-L(UW24)\t\t/* Address range */\n+\tLEN(UW26, UW24)\t\t\t/* Address range */\n \t.byte\t0\t\t\t/* Augmentation size */\n \t.byte\t0xe, 8\t\t\t/* DW_CFA_def_cfa_offset */\n \t.byte\t0x80+8, 2\t\t/* DW_CFA_offset %eip, 2*-4 */\n@@ -1059,9 +1100,9 @@ L(EFDE6):\n \t.set\tL(set7),L(EFDE7)-L(SFDE7)\n \t.long\tL(set7)\t\t\t/* FDE Length */\n L(SFDE7):\n-\t.long\tL(SFDE7)-L(CIE)\t\t/* FDE CIE offset */\n+\tLEN(SFDE7, CIE)\t\t\t/* FDE CIE offset */\n \t.long\tPCREL(L(UW27))\t\t/* Initial location */\n-\t.long\tL(UW31)-L(UW27)\t\t/* Address range */\n+\tLEN(UW31, UW27)\t\t\t/* Address range */\n \t.byte\t0\t\t\t/* Augmentation size */\n \tADV(UW28, UW27)\n \t.byte\t0xe, closure_FS+4\t/* DW_CFA_def_cfa_offset */\n@@ -1073,14 +1114,13 @@ L(SFDE7):\n #endif\n \t.balign\t4\n L(EFDE7):\n-\n #if !FFI_NO_RAW_API\n \t.set\tL(set8),L(EFDE8)-L(SFDE8)\n \t.long\tL(set8)\t\t\t/* FDE Length */\n L(SFDE8):\n-\t.long\tL(SFDE8)-L(CIE)\t\t/* FDE CIE offset */\n+\tLEN(SFDE8, CIE)\t\t\t/* FDE CIE offset */\n \t.long\tPCREL(L(UW32))\t\t/* Initial location */\n-\t.long\tL(UW40)-L(UW32)\t\t/* Address range */\n+\tLEN(UW40, UW32)\t\t\t/* Address range */\n \t.byte\t0\t\t\t/* Augmentation size */\n \tADV(UW33, UW32)\n \t.byte\t0xe, raw_closure_S_FS+4\t/* DW_CFA_def_cfa_offset */\n@@ -1102,9 +1142,9 @@ L(EFDE8):\n \t.set\tL(set9),L(EFDE9)-L(SFDE9)\n \t.long\tL(set9)\t\t\t/* FDE Length */\n L(SFDE9):\n-\t.long\tL(SFDE9)-L(CIE)\t\t/* FDE CIE offset */\n+\tLEN(SFDE9, CIE)\t\t\t/* FDE CIE offset */\n \t.long\tPCREL(L(UW41))\t\t/* Initial location */\n-\t.long\tL(UW52)-L(UW41)\t\t/* Address range */\n+\tLEN(UW52, UW41)\t\t\t/* Address range */\n \t.byte\t0\t\t\t/* Augmentation size */\n \tADV(UW42, UW41)\n \t.byte\t0xe, 0\t\t\t/* DW_CFA_def_cfa_offset */\n@@ -1141,8 +1181,12 @@ L(EFDE9):\n @feat.00 = 1\n #endif\n \n-#ifdef __APPLE__\n+#if defined(__APPLE__)\n     .subsections_via_symbols\n+# if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) &&\t\t\\\n+   __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1070 && __clang__\n+/* compact unwind is not used with GCC at present, was not present before 10.6\n+   but has some bugs there, so do not emit until 10.7.  */\n     .section __LD,__compact_unwind,regular,debug\n \n     /* compact unwind for ffi_call_i386 */\n@@ -1216,6 +1260,7 @@ L(EFDE9):\n     .long    0x04000000 /* use dwarf unwind info */\n     .long    0\n     .long    0\n+#endif /* use compact unwind */\n #endif /* __APPLE__ */\n \n #endif /* ifndef _MSC_VER */"}]}