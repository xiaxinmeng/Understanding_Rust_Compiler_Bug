{"sha": "fa1a0d022c30ed29de2e07828d5f28d5a9034636", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmExYTBkMDIyYzMwZWQyOWRlMmUwNzgyOGQ1ZjI4ZDVhOTAzNDYzNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-02-25T11:39:20Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-02-25T11:39:20Z"}, "message": "Makefile.in (lcm.o): Add dependency on function.h\n\n\t* Makefile.in (lcm.o):  Add dependency on function.h\n\t* lcm.c (function.h): Include.\n\t* i386.c (machine_function, ix86_stack_locals,\n\t* ix86_save_varrargs_registers) : Move to\n\t...\n\t* i386.h (machine_function, ix86_stack_locals,\n\tix86_save_varrargs_registers): ... here; add optimize_mode_switching\n\t(ix86_optimize_mode_switching): New.\n\t* i386.md (fix patterns): Set ix86_optimize_mode_switching\n\nFrom-SVN: r63404", "tree": {"sha": "7e4541599f216511567a2ef212a330eaa7d0b1c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e4541599f216511567a2ef212a330eaa7d0b1c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa1a0d022c30ed29de2e07828d5f28d5a9034636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa1a0d022c30ed29de2e07828d5f28d5a9034636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa1a0d022c30ed29de2e07828d5f28d5a9034636", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa1a0d022c30ed29de2e07828d5f28d5a9034636/comments", "author": null, "committer": null, "parents": [{"sha": "9d4c1565091e0017b2d4b54126f4d691d1d8681d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4c1565091e0017b2d4b54126f4d691d1d8681d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d4c1565091e0017b2d4b54126f4d691d1d8681d"}], "stats": {"total": 75, "additions": 46, "deletions": 29}, "files": [{"sha": "66e788246e3158637bd346fc0be529507960ed82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1a0d022c30ed29de2e07828d5f28d5a9034636/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1a0d022c30ed29de2e07828d5f28d5a9034636/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa1a0d022c30ed29de2e07828d5f28d5a9034636", "patch": "@@ -1,3 +1,15 @@\n+Tue Feb 25 12:35:34 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* Makefile.in (lcm.o):  Add dependency on function.h\n+\t* lcm.c (function.h): Include.\n+\t* i386.c (machine_function, ix86_stack_locals,\n+\t* ix86_save_varrargs_registers) : Move to\n+\t...\n+\t* i386.h (machine_function, ix86_stack_locals,\n+\tix86_save_varrargs_registers): ... here; add optimize_mode_switching\n+\t(ix86_optimize_mode_switching): New.\n+\t* i386.md (fix patterns): Set ix86_optimize_mode_switching\n+\n 2003-02-25  Nick Clifton  <nickc@redhat.com>\n \n \t* config/d30v/d30v.c (d30v_init_cumulative_args): Fix typo.  Name"}, {"sha": "ceb594bf1ee566f53c0146fef988ebc68c98eb13", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1a0d022c30ed29de2e07828d5f28d5a9034636/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1a0d022c30ed29de2e07828d5f28d5a9034636/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=fa1a0d022c30ed29de2e07828d5f28d5a9034636", "patch": "@@ -1552,7 +1552,7 @@ resource.o : resource.c $(CONFIG_H) $(RTL_H) hard-reg-set.h $(SYSTEM_H) coretype\n    $(INSN_ATTR_H) except.h $(PARAMS_H) $(TM_P_H)\n lcm.o : lcm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h flags.h real.h insn-config.h $(INSN_ATTR_H) $(RECOG_H) $(EXPR_H) \\\n-   $(BASIC_BLOCK_H) $(TM_P_H) df.h\n+   $(BASIC_BLOCK_H) $(TM_P_H) df.h function.h\n ssa.o : ssa.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) varray.h \\\n    $(EXPR_H) hard-reg-set.h flags.h function.h real.h insn-config.h $(RECOG_H) \\\n    $(BASIC_BLOCK_H) output.h ssa.h"}, {"sha": "c464b6c06748f38d1ed7f6c4401c16850e723076", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1a0d022c30ed29de2e07828d5f28d5a9034636/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1a0d022c30ed29de2e07828d5f28d5a9034636/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fa1a0d022c30ed29de2e07828d5f28d5a9034636", "patch": "@@ -689,18 +689,6 @@ struct stack_local_entry GTY(())\n   struct stack_local_entry *next;\n };\n \n-\n-struct machine_function GTY(())\n-{\n-  struct stack_local_entry *stack_locals;\n-  const char *some_ld_name;\n-  int save_varrargs_registers;\n-  int accesses_prev_frame;\n-};\n-\n-#define ix86_stack_locals (cfun->machine->stack_locals)\n-#define ix86_save_varrargs_registers (cfun->machine->save_varrargs_registers)\n-\n /* Structure describing stack frame layout.\n    Stack grows downward:\n "}, {"sha": "e5daa5d5c9367d25764d8782b34214d0f8dbef91", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1a0d022c30ed29de2e07828d5f28d5a9034636/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1a0d022c30ed29de2e07828d5f28d5a9034636/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=fa1a0d022c30ed29de2e07828d5f28d5a9034636", "patch": "@@ -3166,7 +3166,7 @@ enum fp_cw_mode {FP_CW_STORED, FP_CW_UNINITIALIZED, FP_CW_ANY};\n /* Define this macro if the port needs extra instructions inserted\n    for mode switching in an optimizing compilation.  */\n \n-#define OPTIMIZE_MODE_SWITCHING(ENTITY) 1\n+#define OPTIMIZE_MODE_SWITCHING(ENTITY) ix86_optimize_mode_switching\n \n /* If you define `OPTIMIZE_MODE_SWITCHING', you have to define this as\n    initializer for an array of integers.  Each initializer element N\n@@ -3223,6 +3223,19 @@ enum fp_cw_mode {FP_CW_STORED, FP_CW_UNINITIALIZED, FP_CW_ANY};\n #define DLL_IMPORT_EXPORT_PREFIX '#'\n \n #define FASTCALL_PREFIX '@'\n+\f\n+struct machine_function GTY(())\n+{\n+  struct stack_local_entry *stack_locals;\n+  const char *some_ld_name;\n+  int save_varrargs_registers;\n+  int accesses_prev_frame;\n+  int optimize_mode_switching;\n+};\n+\n+#define ix86_stack_locals (cfun->machine->stack_locals)\n+#define ix86_save_varrargs_registers (cfun->machine->save_varrargs_registers)\n+#define ix86_optimize_mode_switching (cfun->machine->optimize_mode_switching)\n \n /*\n Local variables:"}, {"sha": "d5bc3602bea1e20f3cefecff81ca86d57e44544a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1a0d022c30ed29de2e07828d5f28d5a9034636/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1a0d022c30ed29de2e07828d5f28d5a9034636/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=fa1a0d022c30ed29de2e07828d5f28d5a9034636", "patch": "@@ -4441,6 +4441,7 @@\n   \"&& 1\"\n   [(const_int 0)]\n {\n+  ix86_optimize_mode_switching = 1;\n   operands[2] = assign_386_stack_local (HImode, 1);\n   operands[3] = assign_386_stack_local (HImode, 2);\n   if (memory_operand (operands[0], VOIDmode))\n@@ -4582,6 +4583,7 @@\n   \"&& 1\"\n   [(const_int 0)]\n {\n+  ix86_optimize_mode_switching = 1;\n   operands[2] = assign_386_stack_local (HImode, 1);\n   operands[3] = assign_386_stack_local (HImode, 2);\n   if (memory_operand (operands[0], VOIDmode))\n@@ -4699,6 +4701,7 @@\n   \"\"\n   [(const_int 0)]\n {\n+  ix86_optimize_mode_switching = 1;\n   operands[2] = assign_386_stack_local (HImode, 1);\n   operands[3] = assign_386_stack_local (HImode, 2);\n   if (memory_operand (operands[0], VOIDmode))"}, {"sha": "c403485a4487139883581dc968cee42ac186c5c8", "filename": "gcc/lcm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1a0d022c30ed29de2e07828d5f28d5a9034636/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1a0d022c30ed29de2e07828d5f28d5a9034636/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=fa1a0d022c30ed29de2e07828d5f28d5a9034636", "patch": "@@ -63,6 +63,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"basic-block.h\"\n #include \"output.h\"\n #include \"tm_p.h\"\n+#include \"function.h\"\n \n /* We want target macros for the mode switching code to be able to refer\n    to instruction attribute values.  */"}, {"sha": "89324090f611ec1a7f217c440f63534d519eba72", "filename": "gcc/toplev.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1a0d022c30ed29de2e07828d5f28d5a9034636/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1a0d022c30ed29de2e07828d5f28d5a9034636/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=fa1a0d022c30ed29de2e07828d5f28d5a9034636", "patch": "@@ -3493,21 +3493,6 @@ rest_of_compilation (decl)\n       timevar_pop (TV_RENAME_REGISTERS);\n     }\n \n-  if (flag_if_conversion2)\n-    {\n-      timevar_push (TV_IFCVT2);\n-      open_dump_file (DFI_ce3, decl);\n-\n-      if_convert (1);\n-\n-      close_dump_file (DFI_ce3, print_rtl_with_bb, insns);\n-      timevar_pop (TV_IFCVT2);\n-    }\n-#ifdef STACK_REGS\n-  if (optimize)\n-    split_all_insns (1);\n-#endif\n-\n   if (optimize > 0)\n     {\n       timevar_push (TV_REORDER_BLOCKS);\n@@ -3530,6 +3515,21 @@ rest_of_compilation (decl)\n       timevar_pop (TV_REORDER_BLOCKS);\n     }\n \n+  if (flag_if_conversion2)\n+    {\n+      timevar_push (TV_IFCVT2);\n+      open_dump_file (DFI_ce3, decl);\n+\n+      if_convert (1);\n+\n+      close_dump_file (DFI_ce3, print_rtl_with_bb, insns);\n+      timevar_pop (TV_IFCVT2);\n+    }\n+#ifdef STACK_REGS\n+  if (optimize)\n+    split_all_insns (1);\n+#endif\n+\n #ifdef INSN_SCHEDULING\n   if (optimize > 0 && flag_schedule_insns_after_reload)\n     {"}]}