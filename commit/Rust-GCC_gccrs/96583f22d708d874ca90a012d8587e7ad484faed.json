{"sha": "96583f22d708d874ca90a012d8587e7ad484faed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY1ODNmMjJkNzA4ZDg3NGNhOTBhMDEyZDg1ODdlN2FkNDg0ZmFlZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2015-04-17T16:23:24Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2015-04-17T16:23:24Z"}, "message": "Properly handle uninitialized common symbol\n\nUninitialized common symbol behavior in executables is target and linker\ndependent.  default_binds_local_p_3 is made public and updated to take an\nargument to indicate if the linker can guarantee that an uninitialized\ncommon symbol in the executable will still be defined (through COPY\nrelocation) in the executable.  If common symbol is local to executable,\ndefault_binds_local_p_3 will treat non-external variable as defined\nlocally.  default_binds_local_p_2 is changed to treat common symbol as\nlocal for non-PIE binaries.\n\nFor i386, common symbol is local only for non-PIE binaries.  For x86-64,\ncommon symbol is local only for non-PIE binaries or linker supports copy\nreloc in PIE binaries.  If a target treats common symbol as local only\nfor non-PIE binaries, it can define TARGET_BINDS_LOCAL_P as\ndefault_binds_local_p_2.\n\ngcc/\n\n\tPR target/65780\n\t* output.h (default_binds_local_p_3): New.\n\t* varasm.c (default_binds_local_p_3): Make it public.  Take an\n\targument to indicate if common symbol may be local.  If common\n\tsymbol may be local, treat non-external variable as defined\n\tlocally.\n\t(default_binds_local_p_2): Pass !flag_pic to default_binds_local_p_3.\n\t(default_binds_local_p_1): Pass false to default_binds_local_p_3.\n\t* config/i386/i386.c (ix86_binds_local_p): New.\n\t(TARGET_BINDS_LOCAL_P): Replace default_binds_local_p_2 with\n\tix86_binds_local_p.\n\ngcc/testsuite/\n\n\tPR target/65780\n\t* gcc.dg/pr65780-1.c: New test.\n\t* gcc.dg/pr65780-2.c: Likewise.\n\t* gcc.target/i386/pr32219-9.c: Likewise.\n\t* gcc.target/i386/pr32219-1.c (xxx): Make it initialized common\n\tsymbol.\n\t* gcc.target/i386/pr64317.c (c): Initialize.\n\nFrom-SVN: r222184", "tree": {"sha": "4d4f3ff893b00124bbd40bc060454119393ffd45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d4f3ff893b00124bbd40bc060454119393ffd45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96583f22d708d874ca90a012d8587e7ad484faed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96583f22d708d874ca90a012d8587e7ad484faed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96583f22d708d874ca90a012d8587e7ad484faed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96583f22d708d874ca90a012d8587e7ad484faed/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aeebf48a7083e5b64b4ddd9d9fe820dd686f419b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeebf48a7083e5b64b4ddd9d9fe820dd686f419b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeebf48a7083e5b64b4ddd9d9fe820dd686f419b"}], "stats": {"total": 120, "additions": 105, "deletions": 15}, "files": [{"sha": "71c692e91a038c733c5ceeded8229fa944acc516", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96583f22d708d874ca90a012d8587e7ad484faed", "patch": "@@ -1,3 +1,17 @@\n+2015-04-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/65780\n+\t* output.h (default_binds_local_p_3): New.\n+\t* varasm.c (default_binds_local_p_3): Make it public.  Take an\n+\targument to indicate if common symbol may be local.  If common\n+\tsymbol may be local, treat non-external variable as defined\n+\tlocally.\n+\t(default_binds_local_p_2): Pass !flag_pic to default_binds_local_p_3.\n+\t(default_binds_local_p_1): Pass false to default_binds_local_p_3.\n+\t* config/i386/i386.c (ix86_binds_local_p): New.\n+\t(TARGET_BINDS_LOCAL_P): Replace default_binds_local_p_2 with\n+\tix86_binds_local_p.\n+\n 2015-04-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/65771"}, {"sha": "72e6bc27f6219a596822f5d93fe6827b0f8b08d3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=96583f22d708d874ca90a012d8587e7ad484faed", "patch": "@@ -51793,6 +51793,19 @@ ix86_initialize_bounds (tree var, tree lb, tree ub, tree *stmts)\n   return 2;\n }\n \n+/* For i386, common symbol is local only for non-PIE binaries.  For\n+   x86-64, common symbol is local only for non-PIE binaries or linker\n+   supports copy reloc in PIE binaries.   */\n+\n+static bool\n+ix86_binds_local_p (const_tree exp)\n+{\n+  return default_binds_local_p_3 (exp, flag_shlib != 0, true, true,\n+\t\t\t\t  (!flag_pic\n+\t\t\t\t   || (TARGET_64BIT\n+\t\t\t\t       && HAVE_LD_PIE_COPYRELOC != 0)));\n+}\n+\n /* Initialize the GCC target structure.  */\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY ix86_return_in_memory\n@@ -51927,7 +51940,7 @@ ix86_initialize_bounds (tree var, tree lb, tree ub, tree *stmts)\n #define TARGET_BINDS_LOCAL_P darwin_binds_local_p\n #else\n #undef TARGET_BINDS_LOCAL_P\n-#define TARGET_BINDS_LOCAL_P default_binds_local_p_2\n+#define TARGET_BINDS_LOCAL_P ix86_binds_local_p\n #endif\n #if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n #undef TARGET_BINDS_LOCAL_P"}, {"sha": "81d2ad29a83f894de72c87f417bafa367b45a546", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=96583f22d708d874ca90a012d8587e7ad484faed", "patch": "@@ -587,6 +587,7 @@ extern bool default_use_anchors_for_symbol_p (const_rtx);\n extern bool default_binds_local_p (const_tree);\n extern bool default_binds_local_p_1 (const_tree, int);\n extern bool default_binds_local_p_2 (const_tree);\n+extern bool default_binds_local_p_3 (const_tree, bool, bool, bool, bool);\n extern void default_globalize_label (FILE *, const char *);\n extern void default_globalize_decl_name (FILE *, tree);\n extern void default_emit_unwind_label (FILE *, tree, int, int);"}, {"sha": "c6bd2eda4b674866ab686318add553b1c3e48f3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96583f22d708d874ca90a012d8587e7ad484faed", "patch": "@@ -1,3 +1,13 @@\n+2015-04-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/65780\n+\t* gcc.dg/pr65780-1.c: New test.\n+\t* gcc.dg/pr65780-2.c: Likewise.\n+\t* gcc.target/i386/pr32219-9.c: Likewise.\n+\t* gcc.target/i386/pr32219-1.c (xxx): Make it initialized common\n+\tsymbol.\n+\t* gcc.target/i386/pr64317.c (c): Initialize.\n+\n 2015-04-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/65612"}, {"sha": "b586211b6497be5305a46c021c843d22a2055039", "filename": "gcc/testsuite/gcc.dg/pr65780-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65780-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65780-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65780-1.c?ref=96583f22d708d874ca90a012d8587e7ad484faed", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/65780 */\n+/* { dg-do link { target *-*-linux* *-*-gnu* } } */\n+/* { dg-options \"-O2\" } */\n+\n+int optopt;\n+\n+int\n+main ()\n+{\n+  optopt = 4;\n+  return 0;\n+}"}, {"sha": "bff33237cf52349130acd00873c5bf4a2006322c", "filename": "gcc/testsuite/gcc.dg/pr65780-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65780-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65780-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr65780-2.c?ref=96583f22d708d874ca90a012d8587e7ad484faed", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/65780 */\n+/* { dg-do link { target *-*-linux* *-*-gnu* } } */\n+/* { dg-require-effective-target pie } */\n+/* { dg-options \"-O2 -fpie\" } */\n+\n+int optopt;\n+\n+int\n+main ()\n+{\n+  optopt = 4;\n+  return 0;\n+}"}, {"sha": "2622f663059ff7bf2b57c12a30166f55930fabca", "filename": "gcc/testsuite/gcc.target/i386/pr32219-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-1.c?ref=96583f22d708d874ca90a012d8587e7ad484faed", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile { target *-*-linux* } } */\n /* { dg-options \"-O2 -fpie\" } */\n \n-/* Common symbol with -fpie.  */\n+/* Initialized common symbol with -fpie.  */\n+int xxx = 5;\n int xxx;\n \n int"}, {"sha": "8c218266359a9f5f03566576ace1382e291cc029", "filename": "gcc/testsuite/gcc.target/i386/pr32219-9.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32219-9.c?ref=96583f22d708d874ca90a012d8587e7ad484faed", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-require-effective-target pie_copyreloc } */\n+/* { dg-options \"-O2 -fpie\" } */\n+\n+/* Uninitialized common symbol with -fpie.  */\n+int xxx;\n+\n+int\n+foo ()\n+{\n+  return xxx;\n+}\n+\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]xxx\\\\(%rip\\\\), %eax\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOTPCREL\" { target { ! ia32 } } } } */"}, {"sha": "8cac6ddb25d46bd9748cbf9437eda71aea7e9a84", "filename": "gcc/testsuite/gcc.target/i386/pr64317.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64317.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64317.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr64317.c?ref=96583f22d708d874ca90a012d8587e7ad484faed", "patch": "@@ -3,7 +3,7 @@\n /* { dg-final { scan-assembler \"addl\\[ \\\\t\\]+\\[$\\]_GLOBAL_OFFSET_TABLE_, %ebx\" } } */\n /* { dg-final { scan-assembler \"movl\\[ \\\\t\\]+c@GOTOFF\\[(\\]%ebx\\[)\\]\" } } */\n /* { dg-final { scan-assembler-not \"movl\\[ \\\\t\\]+\\[0-9]+\\[(\\]%esp\\[)\\], %ebx\" } } */\n-long c;\n+long c = 1;\n \n int bar();\n "}, {"sha": "e8d996cb1e38564b8294701bb2e62f62469543cc", "filename": "gcc/varasm.c", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96583f22d708d874ca90a012d8587e7ad484faed/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=96583f22d708d874ca90a012d8587e7ad484faed", "patch": "@@ -6809,9 +6809,13 @@ resolution_local_p (enum ld_plugin_symbol_resolution resolution)\n \t  || resolution == LDPR_RESOLVED_EXEC);\n }\n \n-static bool\n+/* COMMON_LOCAL_P is true means that the linker can guarantee that an\n+   uninitialized common symbol in the executable will still be defined\n+   (through COPY relocation) in the executable.  */\n+\n+bool\n default_binds_local_p_3 (const_tree exp, bool shlib, bool weak_dominate,\n-\t\t\t bool extern_protected_data)\n+\t\t\t bool extern_protected_data, bool common_local_p)\n {\n   /* A non-decl is an entry in the constant pool.  */\n   if (!DECL_P (exp))\n@@ -6836,7 +6840,16 @@ default_binds_local_p_3 (const_tree exp, bool shlib, bool weak_dominate,\n      because dynamic linking might overwrite symbols\n      in shared libraries.  */\n   bool resolved_locally = false;\n-  bool defined_locally = !DECL_EXTERNAL (exp);\n+\n+  bool uninited_common = (DECL_COMMON (exp)\n+\t\t\t  && (DECL_INITIAL (exp) == NULL\n+\t\t\t      || (!in_lto_p\n+\t\t\t\t  && DECL_INITIAL (exp) == error_mark_node)));\n+\n+  /* A non-external variable is defined locally only if it isn't\n+     uninitialized COMMON variable or common_local_p is true.  */\n+  bool defined_locally = (!DECL_EXTERNAL (exp)\n+\t\t\t  && (!uninited_common || common_local_p));\n   if (symtab_node *node = symtab_node::get (exp))\n     {\n       if (node->in_other_partition)\n@@ -6878,10 +6891,7 @@ default_binds_local_p_3 (const_tree exp, bool shlib, bool weak_dominate,\n \n   /* Uninitialized COMMON variable may be unified with symbols\n      resolved from other modules.  */\n-  if (DECL_COMMON (exp)\n-      && !resolved_locally\n-      && (DECL_INITIAL (exp) == NULL\n-\t  || (!in_lto_p && DECL_INITIAL (exp) == error_mark_node)))\n+  if (uninited_common && !resolved_locally)\n     return false;\n \n   /* Otherwise we're left with initialized (or non-common) global data\n@@ -6895,21 +6905,22 @@ default_binds_local_p_3 (const_tree exp, bool shlib, bool weak_dominate,\n bool\n default_binds_local_p (const_tree exp)\n {\n-  return default_binds_local_p_3 (exp, flag_shlib != 0, true, false);\n+  return default_binds_local_p_3 (exp, flag_shlib != 0, true, false, false);\n }\n \n-/* Similar to default_binds_local_p, but protected data may be\n-   external.  */\n+/* Similar to default_binds_local_p, but common symbol may be local.  */\n+\n bool\n default_binds_local_p_2 (const_tree exp)\n {\n-  return default_binds_local_p_3 (exp, flag_shlib != 0, true, true);\n+  return default_binds_local_p_3 (exp, flag_shlib != 0, true, false,\n+\t\t\t\t  !flag_pic);\n }\n \n bool\n default_binds_local_p_1 (const_tree exp, int shlib)\n {\n-  return default_binds_local_p_3 (exp, shlib != 0, false, false);\n+  return default_binds_local_p_3 (exp, shlib != 0, false, false, false);\n }\n \n /* Return true when references to DECL must bind to current definition in"}]}