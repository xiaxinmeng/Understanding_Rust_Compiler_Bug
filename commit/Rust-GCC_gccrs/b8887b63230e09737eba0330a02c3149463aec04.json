{"sha": "b8887b63230e09737eba0330a02c3149463aec04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg4ODdiNjMyMzBlMDk3MzdlYmEwMzMwYTAyYzMxNDk0NjNhZWMwNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-05-19T20:38:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-19T20:38:04Z"}, "message": "tree.c (is_overloaded_fn): Don't abort on placeholders from push_class_decls.\n\n\t* tree.c (is_overloaded_fn): Don't abort on placeholders from\n\tpush_class_decls.\n\nFrom-SVN: r19888", "tree": {"sha": "952585b784286d3eb7aa26eb477cffb94413ba31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/952585b784286d3eb7aa26eb477cffb94413ba31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8887b63230e09737eba0330a02c3149463aec04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8887b63230e09737eba0330a02c3149463aec04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8887b63230e09737eba0330a02c3149463aec04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8887b63230e09737eba0330a02c3149463aec04/comments", "author": null, "committer": null, "parents": [{"sha": "f85c8be78785b2875cd97a4cfabe2d13cf095ae3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f85c8be78785b2875cd97a4cfabe2d13cf095ae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f85c8be78785b2875cd97a4cfabe2d13cf095ae3"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "13e1312a09fcb681ae8a4732ea7fc2e277606e23", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8887b63230e09737eba0330a02c3149463aec04/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8887b63230e09737eba0330a02c3149463aec04/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b8887b63230e09737eba0330a02c3149463aec04", "patch": "@@ -1,3 +1,8 @@\n+Tue May 19 20:36:23 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* tree.c (is_overloaded_fn): Don't abort on placeholders from\n+\tpush_class_decls.\n+\n Tue May 19 15:16:22 1998  Brendan Kehoe  <brendan@cygnus.com>\n \n \t* class.c (is_empty_class): Return 0 if TYPE is an error_mark_node."}, {"sha": "1a779138f38094f5c679afc70ecfa4264b4b9c98", "filename": "gcc/cp/search.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8887b63230e09737eba0330a02c3149463aec04/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8887b63230e09737eba0330a02c3149463aec04/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=b8887b63230e09737eba0330a02c3149463aec04", "patch": "@@ -3495,7 +3495,11 @@ dfs_pushdecls (binfo)\n \t     If we can't do that, keep a TREE_LIST with possibly ambiguous\n \t     decls in there.  */\n \t  maybe_push_cache_obstack ();\n-\t  envelope_add_decl (type, OVL_CURRENT (*methods), &TREE_PURPOSE (class_value));\n+\t  /* Arbitrarily choose the first function in the list.  This is OK\n+\t     because this is only used for initial lookup; anything that\n+\t     actually uses the function will look it up again.  */\n+\t  envelope_add_decl (type, OVL_CURRENT (*methods),\n+\t\t\t     &TREE_PURPOSE (class_value));\n \t  pop_obstacks ();\n \n \t  methods++;"}, {"sha": "60d20b3f2588e64b225ea3bb667eb0e002459e3b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8887b63230e09737eba0330a02c3149463aec04/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8887b63230e09737eba0330a02c3149463aec04/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=b8887b63230e09737eba0330a02c3149463aec04", "patch": "@@ -1311,10 +1311,13 @@ int\n is_overloaded_fn (x)\n      tree x;\n {\n-  /* XXX A baselink is also considered an overloaded function. */\n+  /* XXX A baselink is also considered an overloaded function.\n+     As is a placeholder from push_class_decls.  */\n   if (TREE_CODE (x) == TREE_LIST)\n     {\n-      my_friendly_assert (TREE_CODE (TREE_PURPOSE (x)) == TREE_VEC, 388);\n+      my_friendly_assert (TREE_CODE (TREE_PURPOSE (x)) == TREE_VEC\n+\t\t\t  || TREE_CODE (TREE_PURPOSE (x)) == IDENTIFIER_NODE,\n+\t\t\t  388);\n       x = TREE_VALUE (x);\n     }\n   return (TREE_CODE (x) == FUNCTION_DECL"}]}