{"sha": "cc453086d255f5443d956874c0a95877913c759f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M0NTMwODZkMjU1ZjU0NDNkOTU2ODc0YzBhOTU4Nzc5MTNjNzU5Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-10-14T18:47:14Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-10-14T18:47:14Z"}, "message": "re PR middle-end/62263 (Good codegen for bitwise rotate requires code that is technically undefined behavior)\n\n\tPR middle-end/62263\n\tPR middle-end/82498\n\t* tree-ssa-forwprop.c (simplify_rotate): Allow def_arg1[N]\n\tto be any operand_equal_p operands.  For & (B - 1) require\n\tB to be power of 2.  Recognize\n\t(X << (Y & (B - 1))) | (X >> ((-Y) & (B - 1))) and similar patterns.\n\n\t* c-c++-common/rotate-5.c (f2): New function.  Move old\n\tfunction to ...\n\t(f4): ... this.  Use 127 instead of 128.\n\t(f3, f5, f6): New functions.\n\t(main): Test all f[1-6] functions, with both 0 and 1 as\n\tsecond arguments.\n\t* c-c++-common/rotate-6.c: New test.\n\t* c-c++-common/rotate-6a.c: New test.\n\t* c-c++-common/rotate-7.c: New test.\n\t* c-c++-common/rotate-7a.c: New test.\n\t* c-c++-common/rotate-8.c: New test.\n\nFrom-SVN: r253760", "tree": {"sha": "b18c1cc33cf45585ac6de0923741e82e5015179b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b18c1cc33cf45585ac6de0923741e82e5015179b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc453086d255f5443d956874c0a95877913c759f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc453086d255f5443d956874c0a95877913c759f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc453086d255f5443d956874c0a95877913c759f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc453086d255f5443d956874c0a95877913c759f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6af90df0e442b8317844bc5af96ecda4af4c2008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af90df0e442b8317844bc5af96ecda4af4c2008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af90df0e442b8317844bc5af96ecda4af4c2008"}], "stats": {"total": 1519, "additions": 1502, "deletions": 17}, "files": [{"sha": "9a85f674bcceb57146195f9f872e09b0b0030764", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc453086d255f5443d956874c0a95877913c759f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc453086d255f5443d956874c0a95877913c759f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc453086d255f5443d956874c0a95877913c759f", "patch": "@@ -1,3 +1,12 @@\n+2017-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/62263\n+\tPR middle-end/82498\n+\t* tree-ssa-forwprop.c (simplify_rotate): Allow def_arg1[N]\n+\tto be any operand_equal_p operands.  For & (B - 1) require\n+\tB to be power of 2.  Recognize\n+\t(X << (Y & (B - 1))) | (X >> ((-Y) & (B - 1))) and similar patterns.\n+\n 2017-10-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR bootstrap/82553"}, {"sha": "6d461c0f750001287aab88087cad7c651774b26f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc453086d255f5443d956874c0a95877913c759f", "patch": "@@ -1,3 +1,19 @@\n+2017-10-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/62263\n+\tPR middle-end/82498\n+\t* c-c++-common/rotate-5.c (f2): New function.  Move old\n+\tfunction to ...\n+\t(f4): ... this.  Use 127 instead of 128.\n+\t(f3, f5, f6): New functions.\n+\t(main): Test all f[1-6] functions, with both 0 and 1 as\n+\tsecond arguments.\n+\t* c-c++-common/rotate-6.c: New test.\n+\t* c-c++-common/rotate-6a.c: New test.\n+\t* c-c++-common/rotate-7.c: New test.\n+\t* c-c++-common/rotate-7a.c: New test.\n+\t* c-c++-common/rotate-8.c: New test.\n+\n 2017-10-14  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* gnat.dg/remote_call_iface.ads, gnat.dg/remote_call_iface.adb: New"}, {"sha": "629ab2f7274ef44ba8be33444676cfee63368e77", "filename": "gcc/testsuite/c-c++-common/rotate-5.c", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-5.c?ref=cc453086d255f5443d956874c0a95877913c759f", "patch": "@@ -15,12 +15,40 @@ f1 (unsigned long long x, unsigned int y)\n   return (x << y) | (x >> ((-y) & 63));\n }\n \n+__attribute__((noinline, noclone))\n+unsigned long long\n+f2 (unsigned long long x, unsigned int y)\n+{\n+  return (x << y) + (x >> ((-y) & 63));\n+}\n+\n+__attribute__((noinline, noclone))\n+unsigned long long\n+f3 (unsigned long long x, unsigned int y)\n+{\n+  return (x << y) ^ (x >> ((-y) & 63));\n+}\n+\n #if __CHAR_BIT__ * __SIZEOF_INT128__ == 128\n __attribute__((noinline, noclone))\n unsigned __int128\n-f2 (unsigned __int128 x, unsigned int y)\n+f4 (unsigned __int128 x, unsigned int y)\n+{\n+  return (x << y) | (x >> ((-y) & 127));\n+}\n+\n+__attribute__((noinline, noclone))\n+unsigned __int128\n+f5 (unsigned __int128 x, unsigned int y)\n {\n-  return (x << y) | (x >> ((-y) & 128));\n+  return (x << y) + (x >> ((-y) & 127));\n+}\n+\n+__attribute__((noinline, noclone))\n+unsigned __int128\n+f6 (unsigned __int128 x, unsigned int y)\n+{\n+  return (x << y) ^ (x >> ((-y) & 127));\n }\n #endif\n #endif\n@@ -31,12 +59,45 @@ main ()\n #if __CHAR_BIT__ * __SIZEOF_LONG_LONG__ == 64\n   if (f1 (0x123456789abcdef0ULL, 0) != 0x123456789abcdef0ULL)\n     abort ();\n+  if (f2 (0x123456789abcdef0ULL, 0) != 0x2468acf13579bde0ULL)\n+    abort ();\n+  if (f3 (0x123456789abcdef0ULL, 0) != 0)\n+    abort ();\n+  if (f1 (0x123456789abcdef0ULL, 1) != 0x2468acf13579bde0ULL)\n+    abort ();\n+  if (f2 (0x123456789abcdef0ULL, 1) != 0x2468acf13579bde0ULL)\n+    abort ();\n+  if (f3 (0x123456789abcdef0ULL, 1) != 0x2468acf13579bde0ULL)\n+    abort ();\n #if __CHAR_BIT__ * __SIZEOF_INT128__ == 128\n-  if (f2 ((((unsigned __int128) 0x123456789abcdef0ULL) << 64)\n+  if (f4 ((((unsigned __int128) 0x123456789abcdef0ULL) << 64)\n \t  | 0x0fedcba987654321ULL, 0)\n       != ((((unsigned __int128) 0x123456789abcdef0ULL) << 64)\n           | 0x0fedcba987654321ULL))\n     abort ();\n+  if (f5 ((((unsigned __int128) 0x123456789abcdef0ULL) << 64)\n+\t  | 0x0fedcba987654321ULL, 0)\n+      != ((((unsigned __int128) 0x2468acf13579bde0ULL) << 64)\n+          | 0x1fdb97530eca8642ULL))\n+    abort ();\n+  if (f6 ((((unsigned __int128) 0x123456789abcdef0ULL) << 64)\n+\t  | 0x0fedcba987654321ULL, 0) != 0)\n+    abort ();\n+  if (f4 ((((unsigned __int128) 0x123456789abcdef0ULL) << 64)\n+\t  | 0x0fedcba987654321ULL, 1)\n+      != ((((unsigned __int128) 0x2468acf13579bde0ULL) << 64)\n+          | 0x1fdb97530eca8642ULL))\n+    abort ();\n+  if (f5 ((((unsigned __int128) 0x123456789abcdef0ULL) << 64)\n+\t  | 0x0fedcba987654321ULL, 1)\n+      != ((((unsigned __int128) 0x2468acf13579bde0ULL) << 64)\n+          | 0x1fdb97530eca8642ULL))\n+    abort ();\n+  if (f6 ((((unsigned __int128) 0x123456789abcdef0ULL) << 64)\n+\t  | 0x0fedcba987654321ULL, 1)\n+      != ((((unsigned __int128) 0x2468acf13579bde0ULL) << 64)\n+          | 0x1fdb97530eca8642ULL))\n+    abort ();\n #endif\n #endif\n   return 0;"}, {"sha": "715f8a48c93682ec4d1bd31d1e3bd09afb325ea5", "filename": "gcc/testsuite/c-c++-common/rotate-6.c", "status": "added", "additions": 582, "deletions": 0, "changes": 582, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-6.c?ref=cc453086d255f5443d956874c0a95877913c759f", "patch": "@@ -0,0 +1,582 @@\n+/* Check rotate pattern detection.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-optimized\" } */\n+/* Rotates should be recognized only in functions with | instead of + or ^,\n+   or in functions that have constant shift counts (unused attribute on y).  */\n+/* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 48 \"optimized\" } } */\n+\n+unsigned int\n+f1 (unsigned int x, unsigned int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f2 (unsigned int x, unsigned long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f3 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) | (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f4 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x >> 1);\n+}\n+\n+unsigned short int\n+f5 (unsigned short int x, unsigned int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f6 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f7 (unsigned char x, unsigned int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ - 1))) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f8 (unsigned char x, unsigned long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ - 1))) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f9 (unsigned int x, unsigned int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f10 (unsigned int x, unsigned long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f11 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) | (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f12 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x >> 1);\n+}\n+\n+unsigned short int\n+f13 (unsigned short int x, unsigned int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f14 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f15 (unsigned char x, unsigned int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f16 (unsigned char x, unsigned long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f17 (unsigned int x, unsigned int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f18 (unsigned int x, unsigned long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f19 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x << 1);\n+}\n+\n+unsigned int\n+f20 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) ^ (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned short int\n+f21 (unsigned short int x, unsigned int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x << (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f22 (unsigned short int x, unsigned long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x << (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f23 (unsigned char x, unsigned int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ - 1))) ^ (x << (y & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f24 (unsigned char x, unsigned long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ - 1))) ^ (x << (y & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f25 (unsigned int x, unsigned int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x << (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f26 (unsigned int x, unsigned long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x << (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f27 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x << 1);\n+}\n+\n+unsigned int\n+f28 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) ^ (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned short int\n+f29 (unsigned short int x, unsigned int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x << (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f30 (unsigned short int x, unsigned long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x << (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f31 (unsigned char x, unsigned int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x << (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f32 (unsigned char x, unsigned long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x << (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f33 (unsigned int x, unsigned int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f34 (unsigned int x, unsigned long int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f35 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) | (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f36 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x << 1);\n+}\n+\n+unsigned short int\n+f37 (unsigned short int x, unsigned int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f38 (unsigned short int x, unsigned long int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f39 (unsigned char x, unsigned int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ - 1))) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f40 (unsigned char x, unsigned long int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ - 1))) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f41 (unsigned int x, unsigned int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f42 (unsigned int x, unsigned long int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f43 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) | (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f44 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x << 1);\n+}\n+\n+unsigned short int\n+f45 (unsigned short int x, unsigned int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f46 (unsigned short int x, unsigned long int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f47 (unsigned char x, unsigned int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f48 (unsigned char x, unsigned long int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f49 (unsigned int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f50 (unsigned int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f51 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x >> 1);\n+}\n+\n+unsigned int\n+f52 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) ^ (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned short int\n+f53 (unsigned short int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x >> (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f54 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x >> (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f55 (unsigned char x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) ^ (x >> (y & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f56 (unsigned char x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) ^ (x >> (y & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f57 (unsigned int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x >> (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f58 (unsigned int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x >> (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f59 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x >> 1);\n+}\n+\n+unsigned int\n+f60 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) ^ (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned short int\n+f61 (unsigned short int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x >> (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f62 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x >> (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f63 (unsigned char x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x >> (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f64 (unsigned char x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x >> (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f65 (unsigned int x, unsigned int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f66 (unsigned int x, unsigned long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f67 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f68 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> 1);\n+}\n+\n+unsigned short int\n+f69 (unsigned short int x, unsigned int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f70 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f71 (unsigned char x, unsigned int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ - 1))) + (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f72 (unsigned char x, unsigned long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ - 1))) + (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f73 (unsigned int x, unsigned int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f74 (unsigned int x, unsigned long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f75 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f76 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> 1);\n+}\n+\n+unsigned short int\n+f77 (unsigned short int x, unsigned int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f78 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f79 (unsigned char x, unsigned int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f80 (unsigned char x, unsigned long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f81 (unsigned int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f82 (unsigned int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f83 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> 1);\n+}\n+\n+unsigned int\n+f84 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned short int\n+f85 (unsigned short int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) + (x >> (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f86 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) + (x >> (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f87 (unsigned char x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) + (x >> (y & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f88 (unsigned char x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) + (x >> (y & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f89 (unsigned int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f90 (unsigned int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f91 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> 1);\n+}\n+\n+unsigned int\n+f92 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned short int\n+f93 (unsigned short int x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) + (x >> (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f94 (unsigned short int x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) + (x >> (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f95 (unsigned char x, unsigned int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) + (x >> (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f96 (unsigned char x, unsigned long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) + (x >> (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}"}, {"sha": "06ba56a5dde031e5ed448b6708a315fe795589aa", "filename": "gcc/testsuite/c-c++-common/rotate-6a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-6a.c?ref=cc453086d255f5443d956874c0a95877913c759f", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -Wno-overflow\" } */\n+\n+#define ROTATE_N \"rotate-6.c\"\n+\n+#include \"rotate-1a.c\""}, {"sha": "390cef680d9ec1a9a47166e2ba49a9cdbc350dc1", "filename": "gcc/testsuite/c-c++-common/rotate-7.c", "status": "added", "additions": 582, "deletions": 0, "changes": 582, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-7.c?ref=cc453086d255f5443d956874c0a95877913c759f", "patch": "@@ -0,0 +1,582 @@\n+/* Check rotate pattern detection.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-optimized\" } */\n+/* Rotates should be recognized only in functions with | instead of + or ^,\n+   or in functions that have constant shift counts (unused attribute on y).  */\n+/* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 48 \"optimized\" } } */\n+\n+unsigned int\n+f1 (unsigned int x, int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f2 (unsigned int x, long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f3 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) | (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f4 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x >> 1);\n+}\n+\n+unsigned short int\n+f5 (unsigned short int x, int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f6 (unsigned short int x, long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f7 (unsigned char x, int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ - 1))) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f8 (unsigned char x, long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ - 1))) | (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f9 (unsigned int x, int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f10 (unsigned int x, long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f11 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) | (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f12 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x >> 1);\n+}\n+\n+unsigned short int\n+f13 (unsigned short int x, int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f14 (unsigned short int x, long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f15 (unsigned char x, int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f16 (unsigned char x, long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) | (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f17 (unsigned int x, int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f18 (unsigned int x, long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f19 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x << 1);\n+}\n+\n+unsigned int\n+f20 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) ^ (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned short int\n+f21 (unsigned short int x, int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x << (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f22 (unsigned short int x, long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x << (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f23 (unsigned char x, int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ - 1))) ^ (x << (y & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f24 (unsigned char x, long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ - 1))) ^ (x << (y & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f25 (unsigned int x, int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x << (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f26 (unsigned int x, long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x << (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f27 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x << 1);\n+}\n+\n+unsigned int\n+f28 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) ^ (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned short int\n+f29 (unsigned short int x, int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x << (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f30 (unsigned short int x, long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x << (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f31 (unsigned char x, int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x << (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f32 (unsigned char x, long int y)\n+{\n+  return (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x << (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f33 (unsigned int x, int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f34 (unsigned int x, long int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f35 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) | (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f36 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x << 1);\n+}\n+\n+unsigned short int\n+f37 (unsigned short int x, int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f38 (unsigned short int x, long int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) | (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f39 (unsigned char x, int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ - 1))) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f40 (unsigned char x, long int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ - 1))) | (x << ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f41 (unsigned int x, int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f42 (unsigned int x, long int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f43 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> 1) | (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f44 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) | (x << 1);\n+}\n+\n+unsigned short int\n+f45 (unsigned short int x, int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f46 (unsigned short int x, long int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f47 (unsigned char x, int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f48 (unsigned char x, long int y)\n+{\n+  return (x >> (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) | (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f49 (unsigned int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f50 (unsigned int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f51 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) ^ (x >> 1);\n+}\n+\n+unsigned int\n+f52 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) ^ (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned short int\n+f53 (unsigned short int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x >> (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f54 (unsigned short int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) ^ (x >> (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f55 (unsigned char x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) ^ (x >> (y & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f56 (unsigned char x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) ^ (x >> (y & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f57 (unsigned int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x >> (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f58 (unsigned int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x >> (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f59 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) ^ (x >> 1);\n+}\n+\n+unsigned int\n+f60 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) ^ (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned short int\n+f61 (unsigned short int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x >> (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f62 (unsigned short int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) ^ (x >> (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f63 (unsigned char x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x >> (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f64 (unsigned char x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) ^ (x >> (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f65 (unsigned int x, int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f66 (unsigned int x, long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f67 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f68 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> 1);\n+}\n+\n+unsigned short int\n+f69 (unsigned short int x, int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f70 (unsigned short int x, long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) + (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f71 (unsigned char x, int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ - 1))) + (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f72 (unsigned char x, long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ - 1))) + (x >> ((-y) & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f73 (unsigned int x, int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f74 (unsigned int x, long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f75 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f76 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> 1);\n+}\n+\n+unsigned short int\n+f77 (unsigned short int x, int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f78 (unsigned short int x, long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f79 (unsigned char x, int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f80 (unsigned char x, long int y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) + (x >> ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned int\n+f81 (unsigned int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f82 (unsigned int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f83 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) + (x >> 1);\n+}\n+\n+unsigned int\n+f84 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned short int\n+f85 (unsigned short int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) + (x >> (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned short int\n+f86 (unsigned short int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1))) + (x >> (y & (__CHAR_BIT__ * __SIZEOF_SHORT__ - 1)));\n+}\n+\n+unsigned char\n+f87 (unsigned char x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) + (x >> (y & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned char\n+f88 (unsigned char x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ - 1))) + (x >> (y & (__CHAR_BIT__ - 1)));\n+}\n+\n+unsigned int\n+f89 (unsigned int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f90 (unsigned int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> (y & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned int\n+f91 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1))) + (x >> 1);\n+}\n+\n+unsigned int\n+f92 (unsigned int x, int y __attribute__((unused)))\n+{\n+  return (x << 1) + (x >> ((-1) & (__CHAR_BIT__ * sizeof (unsigned int) - 1)));\n+}\n+\n+unsigned short int\n+f93 (unsigned short int x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) + (x >> (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned short int\n+f94 (unsigned short int x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned short) - 1))) + (x >> (y & (__CHAR_BIT__ * sizeof (unsigned short) - 1)));\n+}\n+\n+unsigned char\n+f95 (unsigned char x, int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) + (x >> (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}\n+\n+unsigned char\n+f96 (unsigned char x, long int y)\n+{\n+  return (x << ((-y) & (__CHAR_BIT__ * sizeof (unsigned char) - 1))) + (x >> (y & (__CHAR_BIT__ * sizeof (unsigned char) - 1)));\n+}"}, {"sha": "4fb084654032eb2ce5dbb5d03751003cfa070bdb", "filename": "gcc/testsuite/c-c++-common/rotate-7a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-7a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-7a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-7a.c?ref=cc453086d255f5443d956874c0a95877913c759f", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -Wno-overflow\" } */\n+\n+#define ROTATE_N \"rotate-7.c\"\n+\n+#include \"rotate-1a.c\""}, {"sha": "157ab8dc0fcc19f1470e222f89fcf652bf593728", "filename": "gcc/testsuite/c-c++-common/rotate-8.c", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Frotate-8.c?ref=cc453086d255f5443d956874c0a95877913c759f", "patch": "@@ -0,0 +1,170 @@\n+/* PR middle-end/62263 */\n+/* PR middle-end/82498 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"r\\[<>]\\[<>]\" 23 \"optimized\" } } */\n+\n+unsigned int\n+f1 (unsigned int x, unsigned char y)\n+{\n+  y %= __CHAR_BIT__ * __SIZEOF_INT__;\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned int\n+f2 (unsigned int x, signed char y)\n+{\n+  y &= __CHAR_BIT__ * __SIZEOF_INT__ - 1;\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned int\n+f3 (unsigned int x, unsigned char y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))));\n+}\n+\n+unsigned int\n+f4 (unsigned int x, unsigned char y)\n+{\n+  y = y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1);\n+  return y ? (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y)) : x;\n+}\n+\n+unsigned int\n+f5 (unsigned int x, unsigned char y)\n+{\n+  y = y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1);\n+  return (x << y) | (x >> ((__CHAR_BIT__ * __SIZEOF_INT__ - y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f6 (unsigned int x, unsigned char y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x >> ((__CHAR_BIT__ * __SIZEOF_INT__ - (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f7 (unsigned int x, unsigned char y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x >> ((__CHAR_BIT__ * __SIZEOF_INT__ - y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f8 (unsigned int x, unsigned char y)\n+{\n+  return (x << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (x >> ((-y) & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f9 (unsigned int x, int y)\n+{\n+  return (0x12345678U << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (0x12345678U >> (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f10 (unsigned int x, int y)\n+{\n+  return (0x12345678U >> (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (0x12345678U << (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f11 (unsigned int x, int y)\n+{\n+  return (0x12345678U >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (0x12345678U << (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned int\n+f12 (unsigned int x, int y)\n+{\n+  return (0x12345678U << (-y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1))) | (0x12345678U >> (y & (__CHAR_BIT__ * __SIZEOF_INT__ - 1)));\n+}\n+\n+unsigned\n+f13 (unsigned x, unsigned char y)\n+{\n+  if (y == 0)\n+    return x;\n+  y %= __CHAR_BIT__ * __SIZEOF_INT__;\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned\n+f14 (unsigned x, unsigned y)\n+{\n+  if (y == 0)\n+    return x;\n+  y %= __CHAR_BIT__ * __SIZEOF_INT__;\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned\n+f15 (unsigned x, unsigned short y)\n+{\n+  if (y == 0)\n+    return x;\n+  y %= __CHAR_BIT__ * __SIZEOF_INT__;\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned\n+f16 (unsigned x, unsigned char y)\n+{\n+  y %= __CHAR_BIT__ * __SIZEOF_INT__;\n+  if (y == 0)\n+    return x;\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned\n+f17 (unsigned x, unsigned y)\n+{\n+  y %= __CHAR_BIT__ * __SIZEOF_INT__;\n+  if (y == 0)\n+    return x;\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned\n+f18 (unsigned x, unsigned short y)\n+{\n+  y %= __CHAR_BIT__ * __SIZEOF_INT__;\n+  if (y == 0)\n+    return x;\n+  return (x << y) | (x >> (__CHAR_BIT__ * __SIZEOF_INT__ - y));\n+}\n+\n+unsigned\n+f19 (unsigned x, unsigned char y)\n+{\n+  y %= __CHAR_BIT__ * __SIZEOF_INT__;\n+  return (x << y) | (x >> (((unsigned char) -y) % (__CHAR_BIT__ * __SIZEOF_INT__)));\n+}\n+\n+unsigned\n+f20 (unsigned x, unsigned int y)\n+{\n+  y %= __CHAR_BIT__ * __SIZEOF_INT__;\n+  return (x << y) | (x >> (-y % (__CHAR_BIT__ * __SIZEOF_INT__)));\n+}\n+\n+unsigned\n+f21 (unsigned x, unsigned short y)\n+{\n+  y %= __CHAR_BIT__ * __SIZEOF_INT__;\n+  return (x << y) | (x >> (((unsigned short) -y) % (__CHAR_BIT__ * __SIZEOF_INT__)));\n+}\n+\n+unsigned\n+f22 (unsigned x, unsigned char y)\n+{\n+  y %= __CHAR_BIT__ * __SIZEOF_INT__;\n+  return (x << y) | (x >> (-y & ((__CHAR_BIT__ * __SIZEOF_INT__) - 1)));\n+}\n+\n+unsigned\n+f23 (unsigned x, unsigned short y)\n+{\n+  y %= __CHAR_BIT__ * __SIZEOF_INT__;\n+  return (x << y) | (x >> (-y & ((__CHAR_BIT__ * __SIZEOF_INT__) - 1)));\n+}"}, {"sha": "5569b98a5483de6af8394081294ef79320791fe2", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 67, "deletions": 14, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc453086d255f5443d956874c0a95877913c759f/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=cc453086d255f5443d956874c0a95877913c759f", "patch": "@@ -1491,9 +1491,14 @@ defcodefor_name (tree name, enum tree_code *code, tree *arg1, tree *arg2)\n    applied, otherwise return false.\n \n    We are looking for X with unsigned type T with bitsize B, OP being\n-   +, | or ^, some type T2 wider than T and\n+   +, | or ^, some type T2 wider than T.  For:\n    (X << CNT1) OP (X >> CNT2)\t\t\t\tiff CNT1 + CNT2 == B\n    ((T) ((T2) X << CNT1)) OP ((T) ((T2) X >> CNT2))\tiff CNT1 + CNT2 == B\n+\n+   transform these into:\n+   X r<< CNT1\n+\n+   Or for:\n    (X << Y) OP (X >> (B - Y))\n    (X << (int) Y) OP (X >> (int) (B - Y))\n    ((T) ((T2) X << Y)) OP ((T) ((T2) X >> (B - Y)))\n@@ -1503,12 +1508,23 @@ defcodefor_name (tree name, enum tree_code *code, tree *arg1, tree *arg2)\n    ((T) ((T2) X << Y)) | ((T) ((T2) X >> ((-Y) & (B - 1))))\n    ((T) ((T2) X << (int) Y)) | ((T) ((T2) X >> (int) ((-Y) & (B - 1))))\n \n-   and transform these into:\n-   X r<< CNT1\n+   transform these into:\n    X r<< Y\n \n+   Or for:\n+   (X << (Y & (B - 1))) | (X >> ((-Y) & (B - 1)))\n+   (X << (int) (Y & (B - 1))) | (X >> (int) ((-Y) & (B - 1)))\n+   ((T) ((T2) X << (Y & (B - 1)))) | ((T) ((T2) X >> ((-Y) & (B - 1))))\n+   ((T) ((T2) X << (int) (Y & (B - 1)))) \\\n+     | ((T) ((T2) X >> (int) ((-Y) & (B - 1))))\n+\n+   transform these into:\n+   X r<< (Y & (B - 1))\n+\n    Note, in the patterns with T2 type, the type of OP operands\n-   might be even a signed type, but should have precision B.  */\n+   might be even a signed type, but should have precision B.\n+   Expressions with & (B - 1) should be recognized only if B is\n+   a power of 2.  */\n \n static bool\n simplify_rotate (gimple_stmt_iterator *gsi)\n@@ -1578,7 +1594,9 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \tdef_arg1[i] = tem;\n       }\n   /* Both shifts have to use the same first operand.  */\n-  if (TREE_CODE (def_arg1[0]) != SSA_NAME || def_arg1[0] != def_arg1[1])\n+  if (!operand_equal_for_phi_arg_p (def_arg1[0], def_arg1[1])\n+      || !types_compatible_p (TREE_TYPE (def_arg1[0]),\n+\t\t\t      TREE_TYPE (def_arg1[1])))\n     return false;\n   if (!TYPE_UNSIGNED (TREE_TYPE (def_arg1[0])))\n     return false;\n@@ -1649,8 +1667,10 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \t/* The above sequence isn't safe for Y being 0,\n \t   because then one of the shifts triggers undefined behavior.\n \t   This alternative is safe even for rotation count of 0.\n-\t   One shift count is Y and the other (-Y) & (B - 1).  */\n+\t   One shift count is Y and the other (-Y) & (B - 1).\n+\t   Or one shift count is Y & (B - 1) and the other (-Y) & (B - 1).  */\n \telse if (cdef_code[i] == BIT_AND_EXPR\n+\t\t && pow2p_hwi (TYPE_PRECISION (rtype))\n \t\t && tree_fits_shwi_p (cdef_arg2[i])\n \t\t && tree_to_shwi (cdef_arg2[i])\n \t\t    == TYPE_PRECISION (rtype) - 1\n@@ -1675,17 +1695,50 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n \t\t    rotcnt = tem;\n \t\t    break;\n \t\t  }\n-\t\tdefcodefor_name (tem, &code, &tem, NULL);\n+\t\ttree tem2;\n+\t\tdefcodefor_name (tem, &code, &tem2, NULL);\n \t\tif (CONVERT_EXPR_CODE_P (code)\n-\t\t    && INTEGRAL_TYPE_P (TREE_TYPE (tem))\n-\t\t    && TYPE_PRECISION (TREE_TYPE (tem))\n+\t\t    && INTEGRAL_TYPE_P (TREE_TYPE (tem2))\n+\t\t    && TYPE_PRECISION (TREE_TYPE (tem2))\n \t\t       > floor_log2 (TYPE_PRECISION (rtype))\n-\t\t    && type_has_mode_precision_p (TREE_TYPE (tem))\n-\t\t    && (tem == def_arg2[1 - i]\n-\t\t\t|| tem == def_arg2_alt[1 - i]))\n+\t\t    && type_has_mode_precision_p (TREE_TYPE (tem2)))\n \t\t  {\n-\t\t    rotcnt = tem;\n-\t\t    break;\n+\t\t    if (tem2 == def_arg2[1 - i]\n+\t\t\t|| tem2 == def_arg2_alt[1 - i])\n+\t\t      {\n+\t\t\trotcnt = tem2;\n+\t\t\tbreak;\n+\t\t      }\n+\t\t  }\n+\t\telse\n+\t\t  tem2 = NULL_TREE;\n+\n+\t\tif (cdef_code[1 - i] == BIT_AND_EXPR\n+\t\t    && tree_fits_shwi_p (cdef_arg2[1 - i])\n+\t\t    && tree_to_shwi (cdef_arg2[1 - i])\n+\t\t       == TYPE_PRECISION (rtype) - 1\n+\t\t    && TREE_CODE (cdef_arg1[1 - i]) == SSA_NAME)\n+\t\t  {\n+\t\t    if (tem == cdef_arg1[1 - i]\n+\t\t\t|| tem2 == cdef_arg1[1 - i])\n+\t\t      {\n+\t\t\trotcnt = def_arg2[1 - i];\n+\t\t\tbreak;\n+\t\t      }\n+\t\t    tree tem3;\n+\t\t    defcodefor_name (cdef_arg1[1 - i], &code, &tem3, NULL);\n+\t\t    if (CONVERT_EXPR_CODE_P (code)\n+\t\t\t&& INTEGRAL_TYPE_P (TREE_TYPE (tem3))\n+\t\t\t&& TYPE_PRECISION (TREE_TYPE (tem3))\n+\t\t\t   > floor_log2 (TYPE_PRECISION (rtype))\n+\t\t\t&& type_has_mode_precision_p (TREE_TYPE (tem3)))\n+\t\t      {\n+\t\t\tif (tem == tem3 || tem2 == tem3)\n+\t\t\t  {\n+\t\t\t    rotcnt = def_arg2[1 - i];\n+\t\t\t    break;\n+\t\t\t  }\n+\t\t      }\n \t\t  }\n \t      }\n \t  }"}]}