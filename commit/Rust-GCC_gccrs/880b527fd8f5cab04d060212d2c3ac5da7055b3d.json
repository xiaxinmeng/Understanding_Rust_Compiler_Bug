{"sha": "880b527fd8f5cab04d060212d2c3ac5da7055b3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgwYjUyN2ZkOGY1Y2FiMDRkMDYwMjEyZDJjM2FjNWRhNzA1NWIzZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-09-05T00:18:07Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-09-05T00:18:07Z"}, "message": "revert: compatibility.cc: Make C++0x safe, add in explicit casts to bool for stream sentry objects.\n\n2009-09-04  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tRevert.\n\t2009-08-06  Benjamin Kosnik  <bkoz@redhat.com>\n\t* src/compatibility.cc: Make C++0x safe, add in explicit casts to\n\tbool for stream sentry objects.\n\t* include/bits/istream.tcc: Same.\n\t* include/bits/ostream.tcc: Same.\n\t* include/bits/basic_string.tcc: Same.\n\t* include/bits/ostream_insert.h: Same.\n\t* src/istream.cc: Same.\n\nFrom-SVN: r151445", "tree": {"sha": "4dedf30fa3cf818d3f6a7e924c0cc825124ae145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dedf30fa3cf818d3f6a7e924c0cc825124ae145"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/880b527fd8f5cab04d060212d2c3ac5da7055b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880b527fd8f5cab04d060212d2c3ac5da7055b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/880b527fd8f5cab04d060212d2c3ac5da7055b3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/880b527fd8f5cab04d060212d2c3ac5da7055b3d/comments", "author": null, "committer": null, "parents": [{"sha": "e8fc61f7533662237f981e218aad04c77d7e0c80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fc61f7533662237f981e218aad04c77d7e0c80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8fc61f7533662237f981e218aad04c77d7e0c80"}], "stats": {"total": 90, "additions": 51, "deletions": 39}, "files": [{"sha": "44da8a34504b6f9f78cc9041458109de587f736d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880b527fd8f5cab04d060212d2c3ac5da7055b3d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880b527fd8f5cab04d060212d2c3ac5da7055b3d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=880b527fd8f5cab04d060212d2c3ac5da7055b3d", "patch": "@@ -1,3 +1,15 @@\n+2009-09-04  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tRevert.\n+\t2009-08-06  Benjamin Kosnik  <bkoz@redhat.com>\n+\t* src/compatibility.cc: Make C++0x safe, add in explicit casts to\n+\tbool for stream sentry objects.\n+\t* include/bits/istream.tcc: Same.\n+\t* include/bits/ostream.tcc: Same.\n+\t* include/bits/basic_string.tcc: Same.\n+\t* include/bits/ostream_insert.h: Same.\n+\t* src/istream.cc: Same.\n+\n 2009-09-02  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* configure.ac: Replace AC_CONFIG_COMMANDS([default])\n@@ -21,7 +33,7 @@\n 2009-09-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_uninitialized.h\n-\t(__uninitialized_copy::uninitialized_copy): Just call (the now \n+\t(__uninitialized_copy::uninitialized_copy): Just call (the now\n \tforwarding) _Construct.\n \n 2009-09-01  Chris Jefferson  <chris@bubblescope.net>"}, {"sha": "d450a4717de8ff75e24b283f1fd60aeff7379987", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880b527fd8f5cab04d060212d2c3ac5da7055b3d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880b527fd8f5cab04d060212d2c3ac5da7055b3d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=880b527fd8f5cab04d060212d2c3ac5da7055b3d", "patch": "@@ -1007,7 +1007,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __size_type __extracted = 0;\n       typename __ios_base::iostate __err = __ios_base::goodbit;\n       typename __istream_type::sentry __cerb(__in, false);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  __try\n \t    {\n@@ -1078,7 +1078,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const __size_type __n = __str.max_size();\n       typename __ios_base::iostate __err = __ios_base::goodbit;\n       typename __istream_type::sentry __cerb(__in, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  __try\n \t    {"}, {"sha": "d005f736f03d9b4e831bb2e2aa72684bf1f62258", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880b527fd8f5cab04d060212d2c3ac5da7055b3d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880b527fd8f5cab04d060212d2c3ac5da7055b3d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=880b527fd8f5cab04d060212d2c3ac5da7055b3d", "patch": "@@ -87,7 +87,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_extract(_ValueT& __v)\n       {\n \tsentry __cerb(*this, false);\n-\tif (static_cast<bool>(__cerb))\n+\tif (__cerb)\n \t  {\n \t    ios_base::iostate __err = ios_base::goodbit;\n \t    __try\n@@ -116,7 +116,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 118. basic_istream uses nonexistent num_get member functions.\n       sentry __cerb(*this, false);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -161,7 +161,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 118. basic_istream uses nonexistent num_get member functions.\n       sentry __cerb(*this, false);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -205,7 +205,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, false);\n-      if (__sbout && static_cast<bool>(__cerb))\n+      if (__cerb && __sbout)\n \t{\n \t  __try\n \t    {\n@@ -240,7 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_gcount = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  __try\n \t    {\n@@ -274,7 +274,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_gcount = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  __try\n \t    {\n@@ -311,7 +311,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_gcount = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  __try\n \t    {\n@@ -358,7 +358,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_gcount = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  __try\n \t    {\n@@ -402,7 +402,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_gcount = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n         {\n           __try\n             {\n@@ -461,7 +461,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -494,7 +494,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__n > 0 && static_cast<bool>(__cerb))\n+      if (__cerb && __n > 0)\n         {\n           ios_base::iostate __err = ios_base::goodbit;\n           __try\n@@ -556,7 +556,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__n > 0 && static_cast<bool>(__cerb))\n+      if (__cerb && __n > 0)\n         {\n           ios_base::iostate __err = ios_base::goodbit;\n           __try\n@@ -622,7 +622,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       int_type __c = traits_type::eof();\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -651,7 +651,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -680,7 +680,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -714,7 +714,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // 60. What is a formatted input function?\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -747,7 +747,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // 60. What is a formatted input function?\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -780,7 +780,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // DR60.  Do not change _M_gcount.\n       int __ret = -1;\n       sentry __cerb(*this, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -906,7 +906,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename __istream_type::int_type         __int_type;\n \n       typename __istream_type::sentry __cerb(__in, false);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -943,7 +943,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       streamsize __extracted = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       typename __istream_type::sentry __cerb(__in, false);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  __try\n \t    {"}, {"sha": "1147212aa14648682aa053bf5389a4b8cd759fba", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880b527fd8f5cab04d060212d2c3ac5da7055b3d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880b527fd8f5cab04d060212d2c3ac5da7055b3d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=880b527fd8f5cab04d060212d2c3ac5da7055b3d", "patch": "@@ -64,7 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_insert(_ValueT __v)\n       {\n \tsentry __cerb(*this);\n-\tif (static_cast<bool>(__cerb))\n+\tif (__cerb)\n \t  {\n \t    ios_base::iostate __err = ios_base::goodbit;\n \t    __try\n@@ -121,7 +121,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this);\n-      if (__sbin && static_cast<bool>(__cerb))\n+      if (__cerb && __sbin)\n \t{\n \t  __try\n \t    {\n@@ -155,7 +155,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // Unformatted output functions should catch exceptions thrown\n       // from streambuf members.\n       sentry __cerb(*this);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -190,7 +190,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // Unformatted output functions should catch exceptions thrown\n       // from streambuf members.\n       sentry __cerb(*this);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  __try\n \t    { _M_write(__s, __n); }"}, {"sha": "e0017ee7cfd321add37c153e1ea00550f668746e", "filename": "libstdc++-v3/include/bits/ostream_insert.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880b527fd8f5cab04d060212d2c3ac5da7055b3d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880b527fd8f5cab04d060212d2c3ac5da7055b3d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h?ref=880b527fd8f5cab04d060212d2c3ac5da7055b3d", "patch": "@@ -78,7 +78,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       typedef typename __ostream_type::ios_base    __ios_base;\n \n       typename __ostream_type::sentry __cerb(__out);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  __try\n \t    {"}, {"sha": "c81f08e070f5f9e3642ca4b35ebbe184f11f8d43", "filename": "libstdc++-v3/src/compatibility.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880b527fd8f5cab04d060212d2c3ac5da7055b3d/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880b527fd8f5cab04d060212d2c3ac5da7055b3d/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc?ref=880b527fd8f5cab04d060212d2c3ac5da7055b3d", "patch": "@@ -62,7 +62,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       \n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__n > 0 && static_cast<bool>(__cerb))\n+      if ( __n > 0 && __cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -134,7 +134,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       \n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__n > 0 && static_cast<bool>(__cerb))\n+      if (__n > 0 && __cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try"}, {"sha": "e4102779aa883c70246b253080e974f19355c7bb", "filename": "libstdc++-v3/src/istream.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/880b527fd8f5cab04d060212d2c3ac5da7055b3d/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/880b527fd8f5cab04d060212d2c3ac5da7055b3d/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc?ref=880b527fd8f5cab04d060212d2c3ac5da7055b3d", "patch": "@@ -39,7 +39,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_gcount = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n           __try\n \t    {\n@@ -116,7 +116,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__n > 0 && static_cast<bool>(__cerb))\n+      if (__n > 0 && __cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n@@ -205,7 +205,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       streamsize __extracted = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       __istream_type::sentry __cerb(__in, false);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  __try\n \t    {\n@@ -288,7 +288,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       __size_type __extracted = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       __istream_type::sentry __cerb(__in, false);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  __try\n \t    {\n@@ -370,7 +370,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const __size_type __n = __str.max_size();\n       ios_base::iostate __err = ios_base::goodbit;\n       __istream_type::sentry __cerb(__in, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  __try\n \t    {\n@@ -446,7 +446,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_gcount = 0;\n       ios_base::iostate __err = ios_base::goodbit;\n       sentry __cerb(*this, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n           __try\n \t    {\n@@ -523,12 +523,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n-      if (__n > 0 && static_cast<bool>(__cerb))\n+      if (__n > 0 && __cerb)\n \t{\n \t  ios_base::iostate __err = ios_base::goodbit;\n \t  __try\n \t    {\n-\t      const char_type __cdelim = traits_type::to_char_type(__delim);\t      \n+\t      const char_type __cdelim = traits_type::to_char_type(__delim);\n \t      const int_type __eof = traits_type::eof();\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      int_type __c = __sb->sgetc();\n@@ -616,7 +616,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const __size_type __n = __str.max_size();\n       ios_base::iostate __err = ios_base::goodbit;\n       __istream_type::sentry __cerb(__in, true);\n-      if (static_cast<bool>(__cerb))\n+      if (__cerb)\n \t{\n \t  __try\n \t    {"}]}