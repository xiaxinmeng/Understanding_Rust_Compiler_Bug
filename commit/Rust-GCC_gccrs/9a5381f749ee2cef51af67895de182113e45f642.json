{"sha": "9a5381f749ee2cef51af67895de182113e45f642", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE1MzgxZjc0OWVlMmNlZjUxYWY2Nzg5NWRlMTgyMTEzZTQ1ZjY0Mg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-08-04T02:00:13Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-08-17T02:40:06Z"}, "message": "Force ENDBR immediate into memory.\n\ngcc/\n\tPR target/96350\n\t* config/i386/i386.c (ix86_legitimate_constant_p): Return\n\tfalse for ENDBR immediate.\n\t(ix86_legitimate_address_p): Ditto.\n\t* config/i386/predicates.md\n\t(x86_64_immediate_operand): Exclude ENDBR immediate.\n\t(x86_64_zext_immediate_operand): Ditto.\n\t(x86_64_dwzext_immediate_operand): Ditto.\n\t(ix86_endbr_immediate_operand): New predicate.\n\ngcc/testsuite\n\t* gcc.target/i386/endbr_immediate.c: New test.", "tree": {"sha": "3e7b5cf4ef307b5f3deacff451f7499b11470a19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e7b5cf4ef307b5f3deacff451f7499b11470a19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a5381f749ee2cef51af67895de182113e45f642", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a5381f749ee2cef51af67895de182113e45f642", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a5381f749ee2cef51af67895de182113e45f642", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a5381f749ee2cef51af67895de182113e45f642/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c4c56c2492fb5557cd882df0c46f5282b763eca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c4c56c2492fb5557cd882df0c46f5282b763eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c4c56c2492fb5557cd882df0c46f5282b763eca"}], "stats": {"total": 235, "additions": 235, "deletions": 0}, "files": [{"sha": "e9ecb94d1744dbf2e94a69b20b2855c6c8bc283e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5381f749ee2cef51af67895de182113e45f642/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5381f749ee2cef51af67895de182113e45f642/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9a5381f749ee2cef51af67895de182113e45f642", "patch": "@@ -10056,6 +10056,9 @@ ix86_legitimate_constant_p (machine_mode mode, rtx x)\n       break;\n \n     CASE_CONST_SCALAR_INT:\n+      if (ix86_endbr_immediate_operand (x, VOIDmode))\n+\treturn false;\n+\n       switch (mode)\n \t{\n \tcase E_TImode:\n@@ -10449,6 +10452,9 @@ ix86_legitimate_address_p (machine_mode, rtx addr, bool strict)\n   /* Validate displacement.  */\n   if (disp)\n     {\n+      if (ix86_endbr_immediate_operand (disp, VOIDmode))\n+\treturn false;\n+\n       if (GET_CODE (disp) == CONST\n \t  && GET_CODE (XEXP (disp, 0)) == UNSPEC\n \t  && XINT (XEXP (disp, 0), 1) != UNSPEC_MACHOPIC_OFFSET)"}, {"sha": "2850f80f71d8b8e2eff52bd272051d2381af4c13", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5381f749ee2cef51af67895de182113e45f642/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5381f749ee2cef51af67895de182113e45f642/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=9a5381f749ee2cef51af67895de182113e45f642", "patch": "@@ -130,10 +130,35 @@\n (define_predicate \"symbol_operand\"\n   (match_code \"symbol_ref\"))\n \n+;; Return true if VALUE is an ENDBR opcode in immediate field.\n+(define_predicate \"ix86_endbr_immediate_operand\"\n+  (match_code \"const_int\")\n+{\n+  if (flag_cf_protection & CF_BRANCH)\n+     {\n+       unsigned HOST_WIDE_INT imm = UINTVAL (op);\n+       unsigned HOST_WIDE_INT val = TARGET_64BIT ? 0xfa1e0ff3 : 0xfb1e0ff3;\n+\n+       if (imm == val)\n+\t return 1;\n+\n+       /* NB: Encoding is byte based.  */\n+       if (TARGET_64BIT)\n+\t for (; imm >= val; imm >>= 8)\n+\t   if (imm == val)\n+\t     return 1;\n+      }\n+\n+  return 0;\n+})\n+\n ;; Return true if VALUE can be stored in a sign extended immediate field.\n (define_predicate \"x86_64_immediate_operand\"\n   (match_code \"const_int,symbol_ref,label_ref,const\")\n {\n+  if (ix86_endbr_immediate_operand (op, VOIDmode))\n+    return false;\n+\n   if (!TARGET_64BIT)\n     return immediate_operand (op, mode);\n \n@@ -260,6 +285,9 @@\n (define_predicate \"x86_64_zext_immediate_operand\"\n   (match_code \"const_int,symbol_ref,label_ref,const\")\n {\n+  if (ix86_endbr_immediate_operand (op, VOIDmode))\n+    return false;\n+\n   switch (GET_CODE (op))\n     {\n     case CONST_INT:\n@@ -374,6 +402,9 @@\n (define_predicate \"x86_64_dwzext_immediate_operand\"\n   (match_code \"const_int,const_wide_int\")\n {\n+  if (ix86_endbr_immediate_operand (op, VOIDmode))\n+    return false;\n+\n   switch (GET_CODE (op))\n     {\n     case CONST_INT:"}, {"sha": "3015512aa0e426ed3a62855fc38abf2bd9d1be62", "filename": "gcc/testsuite/gcc.target/i386/endbr_immediate.c", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5381f749ee2cef51af67895de182113e45f642/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fendbr_immediate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5381f749ee2cef51af67895de182113e45f642/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fendbr_immediate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fendbr_immediate.c?ref=9a5381f749ee2cef51af67895de182113e45f642", "patch": "@@ -0,0 +1,198 @@\n+/* PR target/96350 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fcf-protection -O2\" } */\n+/* { dg-final { scan-assembler-not \"$-81915917\" { target { ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"$-98693133\" { target { ! ia32 } } } } *\n+/* { dg-final { scan-assembler-not \"$-423883778574778368\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]*-81915917\" { target { ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]*-98693133\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"\\[ \\t\\]*-423883778574778368\" { target { ! ia32 } } } } */\n+\n+\n+#ifdef __x86_64__\n+#define ENDBR_IMMEDIATE 0xfa1e0ff3\n+#define EXTEND_ENDBR_IMMEDIATE 0xfa1e0ff300000000\n+#else\n+#define ENDBR_IMMEDIATE 0xfb1e0ff3\n+#define EXTEND_ENDBR_IMMEDIATE 0xfffb1e0ff300\n+#endif\n+\n+int\n+foo (int a)\n+{\n+  return a + ENDBR_IMMEDIATE;\n+}\n+\n+int\n+foo2 (int a)\n+{\n+  return a - ENDBR_IMMEDIATE;\n+}\n+\n+int\n+foo3 (int a)\n+{\n+  return a * ENDBR_IMMEDIATE;\n+}\n+\n+int\n+foo4 (int a)\n+{\n+  return a | ENDBR_IMMEDIATE;\n+}\n+\n+int\n+foo5 (int a)\n+{\n+  return a ^ ENDBR_IMMEDIATE;\n+}\n+\n+int\n+foo6 (int a)\n+{\n+  return a & ENDBR_IMMEDIATE;\n+}\n+\n+int\n+foo7 (int a)\n+{\n+  return a > ENDBR_IMMEDIATE;\n+}\n+\n+int\n+foo8 (int a)\n+{\n+  return ENDBR_IMMEDIATE;\n+}\n+\n+int\n+foo9 (int* p)\n+{\n+  return *(p + ENDBR_IMMEDIATE);\n+}\n+\n+int\n+foo10 (int* p)\n+{\n+  return *(int*) ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo11 (long long a)\n+{\n+  return a + EXTEND_ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo12 (long long a)\n+{\n+  return a - EXTEND_ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo13 (long long a)\n+{\n+  return a * EXTEND_ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo14 (long long a)\n+{\n+  return a | EXTEND_ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo15 (long long a)\n+{\n+  return a ^ EXTEND_ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo16 (long long a)\n+{\n+  return a & EXTEND_ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo17 (long long a)\n+{\n+  return a > EXTEND_ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo18 (long long a)\n+{\n+  return EXTEND_ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo19 (long long* p)\n+{\n+  return *(p + EXTEND_ENDBR_IMMEDIATE);\n+}\n+\n+long long\n+foo20 (long long* p)\n+{\n+  return *(long long*) EXTEND_ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo21 (int a)\n+{\n+  return a + ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo22 (int a)\n+{\n+  return a - ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo23 (long long a)\n+{\n+  return a * ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo24 (int a)\n+{\n+  return a | ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo25 (int a)\n+{\n+  return a ^ ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo26 (int a)\n+{\n+  return a & ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo27 (int a)\n+{\n+  return a > ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo28 (int a)\n+{\n+  return ENDBR_IMMEDIATE;\n+}\n+\n+long long\n+foo29 (int* p)\n+{\n+  return *(p + ENDBR_IMMEDIATE);\n+}\n+\n+long long\n+foo30 (int* p)\n+{\n+  return *(long long*) ENDBR_IMMEDIATE;\n+}"}]}