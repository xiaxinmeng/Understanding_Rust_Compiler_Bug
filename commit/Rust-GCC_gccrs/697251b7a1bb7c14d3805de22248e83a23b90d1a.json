{"sha": "697251b7a1bb7c14d3805de22248e83a23b90d1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk3MjUxYjdhMWJiN2MxNGQzODA1ZGUyMjI0OGU4M2EyM2I5MGQxYQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-12-19T20:59:04Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-15T01:39:26Z"}, "message": "analyzer: add known stdio functions to sm-file.cc (PR analyzer/58237)\n\nThe analyzer ought to report various file leaks for the reproducer in\nPR analyzer/58237, such as:\n\n  void f1(const char *str)\n  {\n    FILE * fp = fopen(str, \"r\");\n    char buf[10];\n    while (fgets(buf, 10, fp) != NULL)\n    {\n      /* Do something with buf */\n    }\n    /* Missing call to fclose. Need warning here for resource leak */\n  }\n\nbut fails to do so, due to not recognizing fgets, and thus\nconservatively assuming that it could close \"fp\".\n\nThis patch adds a function_set to sm-file.cc of numerous stdio.h\nfunctions that are known to not close the file (and which require a\nvalid FILE *, but that's a matter for a followup), fixing the issue.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/58237\n\t* analyzer-selftests.cc (selftest::run_analyzer_selftests): Call\n\tselftest::analyzer_sm_file_cc_tests.\n\t* analyzer-selftests.h (selftest::analyzer_sm_file_cc_tests): New\n\tdecl.\n\t* sm-file.cc: Include \"analyzer/function-set.h\" and\n\t\"analyzer/analyzer-selftests.h\".\n\t(get_file_using_fns): New function.\n\t(is_file_using_fn_p): New function.\n\t(fileptr_state_machine::on_stmt): Return true for known functions.\n\t(selftest::analyzer_sm_file_cc_tests): New function.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/58237\n\t* gcc.dg/analyzer/file-1.c (test_4): New.\n\t* gcc.dg/analyzer/file-pr58237.c: New test.", "tree": {"sha": "4411d9448340e818e2a373260460f56207f14087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4411d9448340e818e2a373260460f56207f14087"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/697251b7a1bb7c14d3805de22248e83a23b90d1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697251b7a1bb7c14d3805de22248e83a23b90d1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697251b7a1bb7c14d3805de22248e83a23b90d1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697251b7a1bb7c14d3805de22248e83a23b90d1a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81a68b9e3774401a99719ea29640d13125745b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a68b9e3774401a99719ea29640d13125745b41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a68b9e3774401a99719ea29640d13125745b41"}], "stats": {"total": 210, "additions": 207, "deletions": 3}, "files": [{"sha": "aad8528d86d47a2a36ed309ef606ae00509164b6", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697251b7a1bb7c14d3805de22248e83a23b90d1a/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697251b7a1bb7c14d3805de22248e83a23b90d1a/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=697251b7a1bb7c14d3805de22248e83a23b90d1a", "patch": "@@ -1,3 +1,17 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/58237\n+\t* analyzer-selftests.cc (selftest::run_analyzer_selftests): Call\n+\tselftest::analyzer_sm_file_cc_tests.\n+\t* analyzer-selftests.h (selftest::analyzer_sm_file_cc_tests): New\n+\tdecl.\n+\t* sm-file.cc: Include \"analyzer/function-set.h\" and\n+\t\"analyzer/analyzer-selftests.h\".\n+\t(get_file_using_fns): New function.\n+\t(is_file_using_fn_p): New function.\n+\t(fileptr_state_machine::on_stmt): Return true for known functions.\n+\t(selftest::analyzer_sm_file_cc_tests): New function.\n+\n 2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer-selftests.cc (selftest::run_analyzer_selftests): Call"}, {"sha": "1272936769a999f16596b28f7954f8a25d5781d5", "filename": "gcc/analyzer/analyzer-selftests.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697251b7a1bb7c14d3805de22248e83a23b90d1a/gcc%2Fanalyzer%2Fanalyzer-selftests.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697251b7a1bb7c14d3805de22248e83a23b90d1a/gcc%2Fanalyzer%2Fanalyzer-selftests.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer-selftests.cc?ref=697251b7a1bb7c14d3805de22248e83a23b90d1a", "patch": "@@ -54,6 +54,7 @@ run_analyzer_selftests ()\n   analyzer_program_point_cc_tests ();\n   analyzer_program_state_cc_tests ();\n   analyzer_region_model_cc_tests ();\n+  analyzer_sm_file_cc_tests ();\n   analyzer_sm_signal_cc_tests ();\n #endif /* #if ENABLE_ANALYZER */\n }"}, {"sha": "62da6cd0559278f17aecf4c06c1a1e00f53806bf", "filename": "gcc/analyzer/analyzer-selftests.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697251b7a1bb7c14d3805de22248e83a23b90d1a/gcc%2Fanalyzer%2Fanalyzer-selftests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697251b7a1bb7c14d3805de22248e83a23b90d1a/gcc%2Fanalyzer%2Fanalyzer-selftests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer-selftests.h?ref=697251b7a1bb7c14d3805de22248e83a23b90d1a", "patch": "@@ -37,6 +37,7 @@ extern void analyzer_function_set_cc_tests ();\n extern void analyzer_program_point_cc_tests ();\n extern void analyzer_program_state_cc_tests ();\n extern void analyzer_region_model_cc_tests ();\n+extern void analyzer_sm_file_cc_tests ();\n extern void analyzer_sm_signal_cc_tests ();\n \n } /* end of namespace selftest.  */"}, {"sha": "f731981b0f512a17d48c6958eeb06fcca1ac98d7", "filename": "gcc/analyzer/sm-file.cc", "status": "modified", "additions": 101, "deletions": 3, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697251b7a1bb7c14d3805de22248e83a23b90d1a/gcc%2Fanalyzer%2Fsm-file.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697251b7a1bb7c14d3805de22248e83a23b90d1a/gcc%2Fanalyzer%2Fsm-file.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-file.cc?ref=697251b7a1bb7c14d3805de22248e83a23b90d1a", "patch": "@@ -33,9 +33,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-event-id.h\"\n #include \"analyzer/analyzer-logging.h\"\n #include \"analyzer/sm.h\"\n-#include \"diagnostic-event-id.h\"\n-#include \"analyzer/sm.h\"\n #include \"analyzer/pending-diagnostic.h\"\n+#include \"analyzer/function-set.h\"\n+#include \"analyzer/analyzer-selftests.h\"\n \n #if ENABLE_ANALYZER\n \n@@ -218,6 +218,82 @@ fileptr_state_machine::fileptr_state_machine (logger *logger)\n   m_stop = add_state (\"stop\");\n }\n \n+/* Get a set of functions that are known to take a FILE * that must be open,\n+   and are known to not close it.  */\n+\n+static function_set\n+get_file_using_fns ()\n+{\n+  // TODO: populate this list more fully\n+  static const char * const funcnames[] = {\n+    /* This array must be kept sorted.  */\n+    \"__fbufsize\",\n+    \"__flbf\",\n+    \"__fpending\",\n+    \"__fpurge\"\n+    \"__freadable\",\n+    \"__freading\",\n+    \"__fsetlocking\",\n+    \"__fwritable\",\n+    \"__fwriting\",\n+    \"clearerr\",\n+    \"clearerr_unlocked\",\n+    \"feof\",\n+    \"feof_unlocked\",\n+    \"ferror\",\n+    \"ferror_unlocked\",\n+    \"fflush\", // safe to call with NULL\n+    \"fflush_unlocked\",  // safe to call with NULL\n+    \"fgetc\",\n+    \"fgetc_unlocked\",\n+    \"fgetpos\",\n+    \"fgets\",\n+    \"fgets_unlocked\",\n+    \"fgetwc_unlocked\",\n+    \"fgetws_unlocked\",\n+    \"fileno\",\n+    \"fileno_unlocked\",\n+    \"fprintf\",\n+    \"fputc\",\n+    \"fputc_unlocked\",\n+    \"fputs\",\n+    \"fputs_unlocked\",\n+    \"fputwc_unlocked\",\n+    \"fputws_unlocked\",\n+    \"fread_unlocked\",\n+    \"fseek\",\n+    \"fsetpos\",\n+    \"ftell\",\n+    \"fwrite_unlocked\",\n+    \"getc\",\n+    \"getc_unlocked\",\n+    \"getwc_unlocked\",\n+    \"putc\",\n+    \"putc_unlocked\",\n+    \"rewind\",\n+    \"setbuf\",\n+    \"setbuffer\",\n+    \"setlinebuf\",\n+    \"setvbuf\",\n+    \"ungetc\",\n+    \"vfprintf\"\n+  };\n+  const size_t count\n+    = sizeof(funcnames) / sizeof (funcnames[0]);\n+  function_set fs (funcnames, count);\n+  return fs;\n+}\n+\n+/* Return true if FNDECL is known to require an open FILE *, and is known\n+   to not close it.  */\n+\n+static bool\n+is_file_using_fn_p (tree fndecl)\n+{\n+  function_set fs = get_file_using_fns ();\n+  return fs.contains_decl_p (fndecl);\n+}\n+\n /* Implementation of state_machine::on_stmt vfunc for fileptr_state_machine.  */\n \n bool\n@@ -262,7 +338,11 @@ fileptr_state_machine::on_stmt (sm_context *sm_ctxt,\n \t    return true;\n \t  }\n \n-\t// TODO: operations on closed file\n+\tif (is_file_using_fn_p (callee_fndecl))\n+\t  {\n+\t    // TODO: operations on unchecked file\n+\t    return true;\n+\t  }\n \t// etc\n       }\n \n@@ -336,4 +416,22 @@ make_fileptr_state_machine (logger *logger)\n   return new fileptr_state_machine (logger);\n }\n \n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Run all of the selftests within this file.  */\n+\n+void\n+analyzer_sm_file_cc_tests ()\n+{\n+  function_set fs = get_file_using_fns ();\n+  fs.assert_sorted ();\n+  fs.assert_sane ();\n+}\n+\n+} // namespace selftest\n+\n+#endif /* CHECKING_P */\n+\n #endif /* #if ENABLE_ANALYZER */"}, {"sha": "18c6a888de694c9c66c374c3321f26339ef95a55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697251b7a1bb7c14d3805de22248e83a23b90d1a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697251b7a1bb7c14d3805de22248e83a23b90d1a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=697251b7a1bb7c14d3805de22248e83a23b90d1a", "patch": "@@ -1,3 +1,9 @@\n+2020-01-14  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/58237\n+\t* gcc.dg/analyzer/file-1.c (test_4): New.\n+\t* gcc.dg/analyzer/file-pr58237.c: New test.\n+\n 2020-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/93262"}, {"sha": "ba516afc8af07b28618e1f77b8d5b84a263befac", "filename": "gcc/testsuite/gcc.dg/analyzer/file-1.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697251b7a1bb7c14d3805de22248e83a23b90d1a/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697251b7a1bb7c14d3805de22248e83a23b90d1a/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-1.c?ref=697251b7a1bb7c14d3805de22248e83a23b90d1a", "patch": "@@ -35,3 +35,15 @@ test_3 (const char *path)\n   FILE *f = fopen (path, \"r\"); /* { dg-message \"opened here\" } */\n   return; /* { dg-warning \"leak of FILE 'f'\" } */ \n }\n+\n+void\n+test_4 (const char *path)\n+{\n+  FILE *f = fopen (path, \"r\"); /* { dg-message \"opened here\" } */\n+\n+  /* Ensure we know about common fns that are known to not close the\n+     file (e.g. \"fseek\").  */\n+  fseek (f, 1024, SEEK_SET);\n+\n+  return; /* { dg-warning \"leak of FILE 'f'\" } */ \n+}"}, {"sha": "68f49c25607ad169e10b79e265ff565762e23b73", "filename": "gcc/testsuite/gcc.dg/analyzer/file-pr58237.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/697251b7a1bb7c14d3805de22248e83a23b90d1a/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-pr58237.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/697251b7a1bb7c14d3805de22248e83a23b90d1a/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-pr58237.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ffile-pr58237.c?ref=697251b7a1bb7c14d3805de22248e83a23b90d1a", "patch": "@@ -0,0 +1,72 @@\n+#include <stdio.h>\n+\n+void f0(const char *str)\n+{\n+  FILE * fp = fopen(str, \"r\"); /* { dg-message \"opened here\" } */\n+  char buf[10];\n+  fgets(buf, 10, fp);\n+} /* { dg-warning \"leak of FILE 'fp'\" } */\n+\n+void f1(const char *str)\n+{\n+  FILE * fp = fopen(str, \"r\"); /* { dg-message \"opened here\" } */\n+  char buf[10];\n+\n+  while (fgets(buf, 10, fp) != NULL)\n+    {\n+      /* Do something with buf */\n+    }\n+} /* { dg-warning \"leak of FILE 'fp'\" } */\n+\n+void f2(const char *str, int flag)\n+{\n+  FILE * fp = fopen(str, \"r\"); /* { dg-message \"opened here\" } */\n+  char buf[10];\n+\n+  while (fgets(buf, 10, fp) != NULL)\n+    {\n+      /* Do something with buf */\n+    }\n+  if (flag) /* { dg-message \"when 'flag == 0'\" } */\n+    fclose(fp);\n+} /* { dg-warning \"leak of FILE 'fp'\" } */\n+\n+extern void called_by_f3( FILE * fp);\n+\n+void f3(const char *str)\n+{\n+  FILE * fp = fopen(str, \"r\");\n+  char buf[10];\n+\n+  while (fgets(buf, 10, fp) != NULL)\n+    {\n+      /* Do something with buf */\n+    }\n+  /* Not sure if fclose executed by called_by_f3 or not. Say nothing */\n+  called_by_f3(fp);\n+}\n+\n+void f4(const char *str)\n+{\n+  FILE * fp = fopen(str, \"r\");\n+  char buf[10];\n+\n+  while (fgets(buf, 10, fp) != NULL)\n+    {\n+      /* Do something with buf */\n+    }\n+  /* Nothing to say here. */\n+  fclose(fp);\n+}\n+\n+void main(int argc, const char * argv[])\n+{\n+  FILE * fp = fopen(argv[0], \"r\");\n+  char buf[10];\n+\n+  while (fgets(buf, 10, fp) != NULL)\n+    {\n+      /* Do something with buf */\n+    }\n+  /* Nothing to say here, because we are in main. */\n+}"}]}