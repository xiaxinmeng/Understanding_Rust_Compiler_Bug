{"sha": "ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E2Y2E4ZmE5Y2ZhOTEzNjZhOGY1ZThjYjc0Yjc3OTE3NzdjNGViOA==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2005-04-02T02:02:29Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2005-04-02T02:02:29Z"}, "message": "functional (_Maybe_wrap_member_pointer): Wrap up member pointers in _Mem_fn but let other function objects pass through...\n\n2005-04-01  Douglas Gregor  <doug.gregor@gmail.com>\n\n\t* include/tr1/functional (_Maybe_wrap_member_pointer): Wrap up\n\tmember pointers in _Mem_fn but let other function objects pass\n\tthrough unchanged.\n\t* include/tr1/functional_iterator (bind): Reduce number of bind()\n\toverloads to two to eliminate ambiguities. Use\n\t_Maybe_wrap_member_pointer to handle member pointers gracefully.\n\nFrom-SVN: r97428", "tree": {"sha": "d6eae8dfb0122c33176a1c17449dc631a4b36133", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6eae8dfb0122c33176a1c17449dc631a4b36133"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9545f3a9332fae81336a901e3702c1bb92e14e09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9545f3a9332fae81336a901e3702c1bb92e14e09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9545f3a9332fae81336a901e3702c1bb92e14e09"}], "stats": {"total": 81, "additions": 53, "deletions": 28}, "files": [{"sha": "8c4f0821f561654285fd162d0056d8978ddf6627", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8", "patch": "@@ -1,3 +1,12 @@\n+2005-04-01  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\t* include/tr1/functional (_Maybe_wrap_member_pointer): Wrap up\n+\tmember pointers in _Mem_fn but let other function objects pass\n+\tthrough unchanged.\n+\t* include/tr1/functional_iterator (bind): Reduce number of bind()\n+\toverloads to two to eliminate ambiguities. Use\n+\t_Maybe_wrap_member_pointer to handle member pointers gracefully.\n+\t\n 2005-04-01  Mark Mitchell  <mark@codesourcery.com>\n \n \t* testsuite/Makefile.am (noinst_PROGRAMS): Remove."}, {"sha": "abe92e3bf237f70b7fb87598eced8171607114c9", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8", "patch": "@@ -659,6 +659,34 @@ namespace tr1\n       { return __arg; }\n     };\n \n+  /**\n+   *  @if maint\n+   *  Maps member pointers into instances of _Mem_fn but leaves all\n+   *  other function objects untouched. Used by tr1::bind(). The\n+   *  primary template handles the non--member-pointer case.\n+   *  @endif\n+   */\n+  template<typename _Tp>\n+    struct _Maybe_wrap_member_pointer\n+    {\n+      typedef _Tp type;\n+      static const _Tp& __do_wrap(const _Tp& __x) { return __x; }\n+    };\n+\n+  /**\n+   *  @if maint\n+   *  Maps member pointers into instances of _Mem_fn but leaves all\n+   *  other function objects untouched. Used by tr1::bind(). This\n+   *  partial specialization handles the member pointer case.\n+   *  @endif\n+   */\n+  template<typename _Tp, typename _Class>\n+    struct _Maybe_wrap_member_pointer<_Tp _Class::*>\n+    {\n+      typedef _Mem_fn<_Tp _Class::*> type;\n+      static type __do_wrap(_Tp _Class::* __pm) { return type(__pm); }\n+    };\n+\n   /**\n    *  @if maint\n    *  Type of the function object returned from bind()."}, {"sha": "524f2d2be192418f0cdf6b652080a28e425477da", "filename": "libstdc++-v3/include/tr1/functional_iterate.h", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h?ref=ca6ca8fa9cfa91366a8f5e8cb74b7791777c4eb8", "patch": "@@ -444,46 +444,34 @@ class _Bind_result<_Result, _Functor(_GLIBCXX_TEMPLATE_ARGS)>\n #undef _GLIBCXX_BIND_REPEAT_HEADER\n };\n \n-// Handle member pointers\n-template<typename _Tp, typename _Class _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n-inline _Bind<_Mem_fn<_Tp _Class::*>(_GLIBCXX_TEMPLATE_ARGS)>\n-bind(_Tp _Class::* __pm _GLIBCXX_COMMA _GLIBCXX_PARAMS)\n-{\n-  typedef _Bind<_Mem_fn<_Tp _Class::*>(_GLIBCXX_TEMPLATE_ARGS)> __result_type;\n-  return __result_type(_Mem_fn<_Tp _Class::*>(__pm)\n-                       _GLIBCXX_COMMA _GLIBCXX_ARGS);\n-}\n-\n-template<typename _Result, typename _Tp, typename _Class\n-         _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n-inline _Bind_result<_Result, _Mem_fn<_Tp _Class::*>(_GLIBCXX_TEMPLATE_ARGS)>\n-bind(_Tp _Class::* __pm _GLIBCXX_COMMA _GLIBCXX_PARAMS)\n-{\n-  typedef _Bind_result<_Result, _Mem_fn<_Tp _Class::*>(_GLIBCXX_TEMPLATE_ARGS)>\n-    __result_type;\n-  return __result_type(_Mem_fn<_Tp _Class::*>(__pm)\n-                       _GLIBCXX_COMMA _GLIBCXX_ARGS);\n-}\n-\n // Handle arbitrary function objects\n template<typename _Functor _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n-inline _Bind<_Functor(_GLIBCXX_TEMPLATE_ARGS)>\n+inline\n+_Bind<typename _Maybe_wrap_member_pointer<_Functor>::type\n+        (_GLIBCXX_TEMPLATE_ARGS)>\n bind(_Functor __f _GLIBCXX_COMMA _GLIBCXX_PARAMS)\n {\n-  typedef _Bind<_Functor(_GLIBCXX_TEMPLATE_ARGS)> __result_type;\n-  return __result_type(__f _GLIBCXX_COMMA _GLIBCXX_ARGS);\n+  typedef _Maybe_wrap_member_pointer<_Functor> __maybe_type;\n+  typedef typename __maybe_type::type __functor_type;\n+  typedef _Bind<__functor_type(_GLIBCXX_TEMPLATE_ARGS)> __result_type;\n+  return __result_type(__maybe_type::__do_wrap(__f)\n+                       _GLIBCXX_COMMA _GLIBCXX_ARGS);\n }\n \n template<typename _Result, typename _Functor\n          _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n inline\n-typename __enable_if<_Bind_result<_Result, _Functor(_GLIBCXX_TEMPLATE_ARGS)>,\n-                     !is_member_pointer<_Functor>::value>::__type\n+_Bind_result<_Result,\n+             typename _Maybe_wrap_member_pointer<_Functor>::type\n+               (_GLIBCXX_TEMPLATE_ARGS)>\n bind(_Functor __f _GLIBCXX_COMMA _GLIBCXX_PARAMS)\n {\n-  typedef _Bind_result<_Result, _Functor(_GLIBCXX_TEMPLATE_ARGS)>\n+  typedef _Maybe_wrap_member_pointer<_Functor> __maybe_type;\n+  typedef typename __maybe_type::type __functor_type;\n+  typedef _Bind_result<_Result, __functor_type(_GLIBCXX_TEMPLATE_ARGS)>\n     __result_type;\n-  return __result_type(__f _GLIBCXX_COMMA _GLIBCXX_ARGS);\n+  return __result_type(__maybe_type::__do_wrap(__f)\n+                       _GLIBCXX_COMMA _GLIBCXX_ARGS);\n }\n \n template<typename _Res, typename _Functor _GLIBCXX_COMMA"}]}