{"sha": "fb204271dd889c63b0427b4ab48dd04b3ded329c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIyMDQyNzFkZDg4OWM2M2IwNDI3YjRhYjQ4ZGQwNGIzZGVkMzI5Yw==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@cygnus.com", "date": "2000-10-25T17:26:27Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2000-10-25T17:26:27Z"}, "message": "i386.c (print_operand): Handle new 'A' formatting code.\n\n\n2000-10-23  Diego Novillo  <dnovillo@cygnus.com>\n\n\t* i386.c (print_operand): Handle new 'A' formatting code.\n\t387 opcodes need suffixes even with -mintel-syntax.\n\tCheck for explicit size override (codes 'b', 'w' and 'k').\n\t(print_operand_address): Check if register prefix is needed when\n\temitting `ds' segment override.\n\t* i386.h: Add comment about new 'A' formatting code.\n\t* i386.md (jump and call patterns): Emit absolute references using %A.\n\nFrom-SVN: r37055", "tree": {"sha": "be54342dbc07c7ca495b35e15a42957e3c90a633", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be54342dbc07c7ca495b35e15a42957e3c90a633"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb204271dd889c63b0427b4ab48dd04b3ded329c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb204271dd889c63b0427b4ab48dd04b3ded329c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb204271dd889c63b0427b4ab48dd04b3ded329c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb204271dd889c63b0427b4ab48dd04b3ded329c/comments", "author": null, "committer": null, "parents": [{"sha": "138e79e7854509c60fd9ff9e9274b36ad6873ab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138e79e7854509c60fd9ff9e9274b36ad6873ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/138e79e7854509c60fd9ff9e9274b36ad6873ab8"}], "stats": {"total": 75, "additions": 58, "deletions": 17}, "files": [{"sha": "c605f67dd9872557429e851fbd0d090ea200e889", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb204271dd889c63b0427b4ab48dd04b3ded329c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb204271dd889c63b0427b4ab48dd04b3ded329c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb204271dd889c63b0427b4ab48dd04b3ded329c", "patch": "@@ -67,6 +67,16 @@ Wed Oct 25 01:02:44 EDT 2000  John Wehle  (john@feith.com)\n \totherwise leave empty.\n \t* configure: Regenerate.\n \n+2000-10-23  Diego Novillo  <dnovillo@cygnus.com>\n+\n+\t* i386.c (print_operand): Handle new 'A' formatting code.\n+\t387 opcodes need suffixes even with -mintel-syntax.\n+\tCheck for explicit size override (codes 'b', 'w' and 'k').\n+\t(print_operand_address): Check if register prefix is needed when\n+\temitting `ds' segment override.\n+\t* i386.h: Add comment about new 'A' formatting code.\n+\t* i386.md (jump and call patterns): Emit absolute references using %A.\n+\n 2000-10-23  Richard Henderson  <rth@cygnus.com>\n \n \t* config/ia64/ia64.c (ia64_expand_prologue): Mark extra "}, {"sha": "fa5d75848ad3526a13956ba586c867d801b6058a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb204271dd889c63b0427b4ab48dd04b3ded329c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb204271dd889c63b0427b4ab48dd04b3ded329c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fb204271dd889c63b0427b4ab48dd04b3ded329c", "patch": "@@ -3250,6 +3250,7 @@ print_reg (x, code, file)\n    R -- print the prefix for register names.\n    z -- print the opcode suffix for the size of the current operand.\n    * -- print a star (in certain assembler syntax)\n+   A -- print an absolute memory reference.\n    w -- print the operand as if it's a \"word\" (HImode) even if it isn't.\n    s -- print a shift double count, followed by the assemblers argument\n \tdelimiter.\n@@ -3276,6 +3277,26 @@ print_operand (file, x, code)\n \t    putc ('*', file);\n \t  return;\n \n+\tcase 'A':\n+\t  if (ASSEMBLER_DIALECT == 0)\n+\t    putc ('*', file);\n+\t  else if (ASSEMBLER_DIALECT == 1)\n+\t    {\n+\t      /* Intel syntax. For absolute addresses, registers should not\n+\t\t be surrounded by braces.  */\n+\t      if (GET_CODE (x) != REG)\n+\t\t{\n+\t\t  putc ('[', file);\n+\t\t  PRINT_OPERAND (file, x, 0);\n+\t\t  putc (']', file);\n+\t\t  return;\n+\t\t}\n+\t    }\n+\n+\t  PRINT_OPERAND (file, x, 0);\n+\t  return;\n+\n+\n \tcase 'L':\n \t  if (ASSEMBLER_DIALECT == 0)\n \t    putc ('l', file);\n@@ -3313,10 +3334,6 @@ print_operand (file, x, code)\n \t  if (STACK_REG_P (x))\n \t    return;\n \n-\t  /* Intel syntax has no truck with instruction suffixes.  */\n-\t  if (ASSEMBLER_DIALECT != 0)\n-\t    return;\n-\n \t  /* this is the size of op from size of operand */\n \t  switch (GET_MODE_SIZE (GET_MODE (x)))\n \t    {\n@@ -3422,6 +3439,15 @@ print_operand (file, x, code)\n \t    default:\n \t      abort ();\n \t    }\n+\n+\t  /* Check for explicit size override (codes 'b', 'w' and 'k')  */\n+\t  if (code == 'b')\n+\t    size = \"BYTE\";\n+\t  else if (code == 'w')\n+\t    size = \"WORD\";\n+\t  else if (code == 'k')\n+\t    size = \"DWORD\";\n+\n \t  fputs (size, file);\n \t  fputs (\" PTR \", file);\n \t}\n@@ -3519,7 +3545,11 @@ print_operand_address (file, addr)\n       if (GET_CODE (disp) == CONST_INT)\n \t{\n \t  if (ASSEMBLER_DIALECT != 0)\n-\t    fputs (\"ds:\", file);\n+\t    {\n+\t      if (USER_LABEL_PREFIX[0] == 0)\n+\t\tputc ('%', file);\n+\t      fputs (\"ds:\", file);\n+\t    }\n \t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (addr));\n \t}\n       else if (flag_pic)"}, {"sha": "f0223bc711fce9626f8d9c562ee4d82de48ec5eb", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb204271dd889c63b0427b4ab48dd04b3ded329c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb204271dd889c63b0427b4ab48dd04b3ded329c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=fb204271dd889c63b0427b4ab48dd04b3ded329c", "patch": "@@ -2723,6 +2723,7 @@ do { long l;\t\t\t\t\t\t\\\n    R -- print the prefix for register names.\n    z -- print the opcode suffix for the size of the current operand.\n    * -- print a star (in certain assembler syntax)\n+   A -- print an absolute memory reference.\n    P -- if PIC, print an @PLT suffix.\n    X -- don't print any sort of PIC '@' suffix for a symbol.\n    s -- ??? something to do with double shifts.  not actually used, afaik."}, {"sha": "90b14824a6812bc3922ee069c79c86c60c533f67", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb204271dd889c63b0427b4ab48dd04b3ded329c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb204271dd889c63b0427b4ab48dd04b3ded329c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=fb204271dd889c63b0427b4ab48dd04b3ded329c", "patch": "@@ -8662,15 +8662,15 @@\n (define_insn \"indirect_jump\"\n   [(set (pc) (match_operand:SI 0 \"nonimmediate_operand\" \"rm\"))]\n   \"\"\n-  \"jmp\\\\t%*%0\"\n+  \"jmp\\\\t%A0\"\n   [(set_attr \"type\" \"ibr\")\n    (set_attr \"length_immediate\" \"0\")])\n \n (define_insn \"tablejump\"\n   [(set (pc) (match_operand:SI 0 \"nonimmediate_operand\" \"rm\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"! flag_pic\"\n-  \"jmp\\\\t%*%0\"\n+  \"jmp\\\\t%A0\"\n   [(set_attr \"type\" \"ibr\")\n    (set_attr \"length_immediate\" \"0\")])\n \n@@ -8744,7 +8744,7 @@\n   [(set (pc) (match_operand:SI 0 \"nonimmediate_operand\" \"rm\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"\"\n-  \"jmp\\\\t%*%0\"\n+  \"jmp\\\\t%A0\"\n   [(set_attr \"type\" \"ibr\")\n    (set_attr \"length_immediate\" \"0\")])\n \f\n@@ -8915,9 +8915,9 @@\n \treturn \\\"call\\\\t%P0\\\";\n     }\n   if (SIBLING_CALL_P (insn))\n-    return \\\"jmp\\\\t%*%0\\\";\n+    return \\\"jmp\\\\t%A0\\\";\n   else\n-    return \\\"call\\\\t%*%0\\\";\n+    return \\\"call\\\\t%A0\\\";\n }\"\n   [(set_attr \"type\" \"call\")])\n \n@@ -8965,9 +8965,9 @@\n \treturn \\\"call\\\\t%P0\\\";\n     }\n   if (SIBLING_CALL_P (insn))\n-    return \\\"jmp\\\\t%*%0\\\";\n+    return \\\"jmp\\\\t%A0\\\";\n   else\n-    return \\\"call\\\\t%*%0\\\";\n+    return \\\"call\\\\t%A0\\\";\n }\"\n   [(set_attr \"type\" \"call\")])\n \n@@ -9103,7 +9103,7 @@\n   [(return)\n    (use (match_operand:SI 0 \"register_operand\" \"r\"))]\n   \"reload_completed\"\n-  \"jmp\\\\t%*%0\"\n+  \"jmp\\\\t%A0\"\n   [(set_attr \"type\" \"ibr\")\n    (set_attr \"length_immediate\" \"0\")])\n \n@@ -11546,9 +11546,9 @@\n \treturn \\\"call\\\\t%P1\\\";\n     }\n   if (SIBLING_CALL_P (insn))\n-    return \\\"jmp\\\\t%*%1\\\";\n+    return \\\"jmp\\\\t%A1\\\";\n   else\n-    return \\\"call\\\\t%*%1\\\";\n+    return \\\"call\\\\t%A1\\\";\n }\"\n   [(set_attr \"type\" \"callv\")])\n \n@@ -11581,9 +11581,9 @@\n \treturn \\\"call\\\\t%P1\\\";\n     }\n   if (SIBLING_CALL_P (insn))\n-    return \\\"jmp\\\\t%*%1\\\";\n+    return \\\"jmp\\\\t%A1\\\";\n   else\n-    return \\\"call\\\\t%*%1\\\";\n+    return \\\"call\\\\t%A1\\\";\n }\"\n   [(set_attr \"type\" \"callv\")])\n \f"}]}