{"sha": "5f3cd7c3f31373789dbc8360fa3d46fcaf473f99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYzY2Q3YzNmMzEzNzM3ODlkYmM4MzYwZmEzZDQ2ZmNhZjQ3M2Y5OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-06-29T08:47:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-06-29T08:47:46Z"}, "message": "re PR tree-optimization/71625 (missing strlen optimization on different array initialization style)\n\n\tPR tree-optimization/71625\n\t* tree-ssa-strlen.c (get_addr_stridx): Add PTR argument.  Assume list\n\tis sorted by ascending list->offset.  If PTR is non-NULL and there is\n\tprevious strinfo, call get_stridx_plus_constant.\n\t(get_stridx): Pass exp as second argument to get_addr_stridx.\n\t(addr_stridxptr): Add missing list = list->next, so that there can be\n\tmore than one entries in the list.  Bump limit from 16 to 32.  Ensure\n\tthe list is sorted by ascending list->offset.\n\t(get_stridx_plus_constant): Adjust so that it can be also called with\n\tADDR_EXPR instead of SSA_NAME as PTR.\n\t(handle_char_store): Pass NULL_TREE as second argument to\n\tget_addr_stridx.\n\n\t* gcc.dg/strlenopt-28.c: New test.\n\nFrom-SVN: r237841", "tree": {"sha": "aa9612115c416b5ff9f86c284f36e28909c53190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa9612115c416b5ff9f86c284f36e28909c53190"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f3cd7c3f31373789dbc8360fa3d46fcaf473f99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f3cd7c3f31373789dbc8360fa3d46fcaf473f99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f3cd7c3f31373789dbc8360fa3d46fcaf473f99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f3cd7c3f31373789dbc8360fa3d46fcaf473f99/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "36d0d9be5585ccc0ea8a44e6d4e93d8d0f7f53a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d0d9be5585ccc0ea8a44e6d4e93d8d0f7f53a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d0d9be5585ccc0ea8a44e6d4e93d8d0f7f53a0"}], "stats": {"total": 126, "additions": 116, "deletions": 10}, "files": [{"sha": "2d4f9b3f6e3a82ad16682e25553793f969fdae5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f3cd7c3f31373789dbc8360fa3d46fcaf473f99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f3cd7c3f31373789dbc8360fa3d46fcaf473f99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f3cd7c3f31373789dbc8360fa3d46fcaf473f99", "patch": "@@ -1,3 +1,18 @@\n+2016-06-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/71625\n+\t* tree-ssa-strlen.c (get_addr_stridx): Add PTR argument.  Assume list\n+\tis sorted by ascending list->offset.  If PTR is non-NULL and there is\n+\tprevious strinfo, call get_stridx_plus_constant.\n+\t(get_stridx): Pass exp as second argument to get_addr_stridx.\n+\t(addr_stridxptr): Add missing list = list->next, so that there can be\n+\tmore than one entries in the list.  Bump limit from 16 to 32.  Ensure\n+\tthe list is sorted by ascending list->offset.\n+\t(get_stridx_plus_constant): Adjust so that it can be also called with\n+\tADDR_EXPR instead of SSA_NAME as PTR.\n+\t(handle_char_store): Pass NULL_TREE as second argument to\n+\tget_addr_stridx.\n+\n 2016-06-29  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/68961"}, {"sha": "c1c9a31a8e47b92fa4bee7932e35151f47db71db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f3cd7c3f31373789dbc8360fa3d46fcaf473f99/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f3cd7c3f31373789dbc8360fa3d46fcaf473f99/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f3cd7c3f31373789dbc8360fa3d46fcaf473f99", "patch": "@@ -1,3 +1,8 @@\n+2016-06-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/71625\n+\t* gcc.dg/strlenopt-28.c: New test.\n+\n 2016-06-29  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/71002"}, {"sha": "03fb01781bd4fe92687fe30c1fb89573965139e9", "filename": "gcc/testsuite/gcc.dg/strlenopt-28.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f3cd7c3f31373789dbc8360fa3d46fcaf473f99/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f3cd7c3f31373789dbc8360fa3d46fcaf473f99/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-28.c?ref=5f3cd7c3f31373789dbc8360fa3d46fcaf473f99", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-strlen\" } */\n+\n+#include \"strlenopt.h\"\n+\n+volatile int v;\n+\n+size_t\n+f1 (void)\n+{\n+  char a[30];\n+  v += 1;\n+  memcpy (a, \"1234567\", 8);\n+  memcpy (a + 7, \"89abcdefg\", 10);\n+  memcpy (a + 16, \"h\", 2);\n+  return strlen (a);\t// This strlen should be optimized into 17.\n+}\n+\n+size_t\n+f2 (void)\n+{\n+  char a[30];\n+  v += 2;\n+  strcpy (a, \"1234567\");\n+  strcpy (a + 7, \"89abcdefg\");\n+  strcpy (a + 16, \"h\");\n+  return strlen (a);\t// This strlen should be optimized into 17.\n+}\n+\n+size_t\n+f3 (char *a)\n+{\n+  v += 3;\n+  memcpy (a, \"1234567\", 8);\n+  memcpy (a + 7, \"89abcdefg\", 10);\n+  memcpy (a + 16, \"h\", 2);\n+  return strlen (a);\t// This strlen should be optimized into 17.\n+}\n+\n+size_t\n+f4 (char *a)\n+{\n+  v += 4;\n+  strcpy (a, \"1234567\");\n+  strcpy (a + 7, \"89abcdefg\");\n+  strcpy (a + 16, \"h\");\n+  return strlen (a);\t// This strlen should be optimized into 17.\n+}\n+\n+int\n+main ()\n+{\n+  char a[30];\n+  if (f1 () != 17 || f2 () != 17 || f3 (a) != 17 || f4 (a) != 17)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 0 \"strlen\" } } */"}, {"sha": "232594b92ab0e4d47e97f78a26a2f39e1745ee08", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f3cd7c3f31373789dbc8360fa3d46fcaf473f99/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f3cd7c3f31373789dbc8360fa3d46fcaf473f99/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=5f3cd7c3f31373789dbc8360fa3d46fcaf473f99", "patch": "@@ -159,10 +159,10 @@ get_strinfo (int idx)\n /* Helper function for get_stridx.  */\n \n static int\n-get_addr_stridx (tree exp)\n+get_addr_stridx (tree exp, tree ptr)\n {\n   HOST_WIDE_INT off;\n-  struct stridxlist *list;\n+  struct stridxlist *list, *last = NULL;\n   tree base;\n \n   if (!decl_to_stridxlist_htab)\n@@ -180,9 +180,22 @@ get_addr_stridx (tree exp)\n     {\n       if (list->offset == off)\n \treturn list->idx;\n+      if (list->offset > off)\n+\treturn 0;\n+      last = list;\n       list = list->next;\n     }\n   while (list);\n+\n+  if (ptr && last && last->idx > 0)\n+    {\n+      strinfo *si = get_strinfo (last->idx);\n+      if (si\n+\t  && si->length\n+\t  && TREE_CODE (si->length) == INTEGER_CST\n+\t  && compare_tree_int (si->length, off - last->offset) != -1)\n+\treturn get_stridx_plus_constant (si, off - last->offset, ptr);\n+    }\n   return 0;\n }\n \n@@ -234,7 +247,7 @@ get_stridx (tree exp)\n \n   if (TREE_CODE (exp) == ADDR_EXPR)\n     {\n-      int idx = get_addr_stridx (TREE_OPERAND (exp, 0));\n+      int idx = get_addr_stridx (TREE_OPERAND (exp, 0), exp);\n       if (idx != 0)\n \treturn idx;\n     }\n@@ -304,15 +317,29 @@ addr_stridxptr (tree exp)\n   if (existed)\n     {\n       int i;\n-      for (i = 0; i < 16; i++)\n+      stridxlist *before = NULL;\n+      for (i = 0; i < 32; i++)\n \t{\n \t  if (list->offset == off)\n \t    return &list->idx;\n+\t  if (list->offset > off && before == NULL)\n+\t    before = list;\n \t  if (list->next == NULL)\n \t    break;\n+\t  list = list->next;\n \t}\n-      if (i == 16)\n+      if (i == 32)\n \treturn NULL;\n+      if (before)\n+\t{\n+\t  list = before;\n+\t  before = XOBNEW (&stridx_obstack, struct stridxlist);\n+\t  *before = *list;\n+\t  list->next = before;\n+\t  list->offset = off;\n+\t  list->idx = 0;\n+\t  return &list->idx;\n+\t}\n       list->next = XOBNEW (&stridx_obstack, struct stridxlist);\n       list = list->next;\n     }\n@@ -613,9 +640,7 @@ verify_related_strinfos (strinfo *origsi)\n static int\n get_stridx_plus_constant (strinfo *basesi, HOST_WIDE_INT off, tree ptr)\n {\n-  gcc_checking_assert (TREE_CODE (ptr) == SSA_NAME);\n-\n-  if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (ptr))\n+  if (TREE_CODE (ptr) == SSA_NAME && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (ptr))\n     return 0;\n \n   if (basesi->length == NULL_TREE\n@@ -633,7 +658,8 @@ get_stridx_plus_constant (strinfo *basesi, HOST_WIDE_INT off, tree ptr)\n       || TREE_CODE (si->length) != INTEGER_CST)\n     return 0;\n \n-  if (ssa_ver_to_stridx.length () <= SSA_NAME_VERSION (ptr))\n+  if (TREE_CODE (ptr) == SSA_NAME\n+      && ssa_ver_to_stridx.length () <= SSA_NAME_VERSION (ptr))\n     ssa_ver_to_stridx.safe_grow_cleared (num_ssa_names);\n \n   gcc_checking_assert (compare_tree_int (si->length, off) != -1);\n@@ -651,6 +677,7 @@ get_stridx_plus_constant (strinfo *basesi, HOST_WIDE_INT off, tree ptr)\n \t{\n \t  if (r == 0)\n \t    {\n+\t      gcc_assert (TREE_CODE (ptr) == SSA_NAME);\n \t      ssa_ver_to_stridx[SSA_NAME_VERSION (ptr)] = si->idx;\n \t      return si->idx;\n \t    }\n@@ -2063,7 +2090,7 @@ handle_char_store (gimple_stmt_iterator *gsi)\n \t}\n     }\n   else\n-    idx = get_addr_stridx (lhs);\n+    idx = get_addr_stridx (lhs, NULL_TREE);\n \n   if (idx > 0)\n     {"}]}