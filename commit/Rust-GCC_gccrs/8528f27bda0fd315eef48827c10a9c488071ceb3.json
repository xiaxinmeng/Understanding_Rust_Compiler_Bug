{"sha": "8528f27bda0fd315eef48827c10a9c488071ceb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyOGYyN2JkYTBmZDMxNWVlZjQ4ODI3YzEwYTljNDg4MDcxY2ViMw==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@gmail.com", "date": "2018-07-12T19:59:09Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2018-07-12T19:59:09Z"}, "message": "RISC-V: Error if function declared with different interrupt modes.\n\n\tgcc/\n\t2018-07-06  Kito Cheng  <kito.cheng@gmail.com>\n        * config/riscv/riscv.c (enum riscv_privilege_levels): Add UNKNOWN_MODE.\n        (riscv_expand_epilogue): Add assertion to check interrupt mode.\n        (riscv_set_current_function): Extract getting interrupt type to new\n        function.\n        (riscv_get_interrupt_type): New function.\n        (riscv_merge_decl_attributes): New function, checking interrupt type is\n        same.\n        (TARGET_MERGE_DECL_ATTRIBUTES): Define.\n\n\tgcc/testsuite/\n\t2018-07-06  Kito Cheng  <kito.cheng@gmail.com>\n        * gcc.target/riscv/interrupt-conflict-mode.c: New.\n\nFrom-SVN: r262607", "tree": {"sha": "b66502e693e5e6a21f3dafc9da0ccfcf3df98c9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b66502e693e5e6a21f3dafc9da0ccfcf3df98c9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8528f27bda0fd315eef48827c10a9c488071ceb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8528f27bda0fd315eef48827c10a9c488071ceb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8528f27bda0fd315eef48827c10a9c488071ceb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8528f27bda0fd315eef48827c10a9c488071ceb3/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b4520336913e7015415fa921ea1de89ac98cfa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4520336913e7015415fa921ea1de89ac98cfa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4520336913e7015415fa921ea1de89ac98cfa9"}], "stats": {"total": 107, "additions": 89, "deletions": 18}, "files": [{"sha": "9c955669e174bc82becca952dd894c8f834f18f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8528f27bda0fd315eef48827c10a9c488071ceb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8528f27bda0fd315eef48827c10a9c488071ceb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8528f27bda0fd315eef48827c10a9c488071ceb3", "patch": "@@ -1,3 +1,14 @@\n+2018-07-12  Kito Cheng  <kito.cheng@gmail.com>\n+\n+        * config/riscv/riscv.c (enum riscv_privilege_levels): Add UNKNOWN_MODE.\n+        (riscv_expand_epilogue): Add assertion to check interrupt mode.\n+        (riscv_set_current_function): Extract getting interrupt type to new\n+        function.\n+        (riscv_get_interrupt_type): New function.\n+        (riscv_merge_decl_attributes): New function, checking interrupt type is\n+        same.\n+        (TARGET_MERGE_DECL_ATTRIBUTES): Define.\n+\n 2018-07-12  Paul Koning  <ni1d@arrl.net>\n \n \t* config/pdp11/pdp11.c (pdp11_output_def): Fix typo in .set"}, {"sha": "69e70feaf33bab1da3ca6bc22b322eefe2dad08c", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 64, "deletions": 18, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8528f27bda0fd315eef48827c10a9c488071ceb3/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8528f27bda0fd315eef48827c10a9c488071ceb3/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=8528f27bda0fd315eef48827c10a9c488071ceb3", "patch": "@@ -123,7 +123,7 @@ struct GTY(())  riscv_frame_info {\n };\n \n enum riscv_privilege_levels {\n-  USER_MODE, SUPERVISOR_MODE, MACHINE_MODE\n+  UNKNOWN_MODE, USER_MODE, SUPERVISOR_MODE, MACHINE_MODE\n };\n \n struct GTY(())  machine_function {\n@@ -3984,6 +3984,8 @@ riscv_expand_epilogue (int style)\n     {\n       enum riscv_privilege_levels mode = cfun->machine->interrupt_mode;\n \n+      gcc_assert (mode != UNKNOWN_MODE);\n+\n       if (mode == MACHINE_MODE)\n \temit_jump_insn (gen_riscv_mret ());\n       else if (mode == SUPERVISOR_MODE)\n@@ -4530,6 +4532,37 @@ riscv_function_ok_for_sibcall (tree decl ATTRIBUTE_UNUSED,\n   return true;\n }\n \n+/* Get the intterupt type, return UNKNOWN_MODE if it's not\n+   interrupt function. */\n+static enum riscv_privilege_levels\n+riscv_get_interrupt_type (tree decl)\n+{\n+  gcc_assert (decl != NULL_TREE);\n+\n+  if ((TREE_CODE(decl) != FUNCTION_DECL)\n+      || (!riscv_interrupt_type_p (TREE_TYPE (decl))))\n+    return UNKNOWN_MODE;\n+\n+  tree attr_args\n+    = TREE_VALUE (lookup_attribute (\"interrupt\",\n+\t\t\t\t    TYPE_ATTRIBUTES (TREE_TYPE (decl))));\n+\n+  if (attr_args && TREE_CODE (TREE_VALUE (attr_args)) != VOID_TYPE)\n+    {\n+      const char *string = TREE_STRING_POINTER (TREE_VALUE (attr_args));\n+\n+      if (!strcmp (string, \"user\"))\n+\treturn USER_MODE;\n+      else if (!strcmp (string, \"supervisor\"))\n+\treturn SUPERVISOR_MODE;\n+      else /* Must be \"machine\".  */\n+\treturn MACHINE_MODE;\n+    }\n+  else\n+    /* Interrupt attributes are machine mode by default.  */\n+    return MACHINE_MODE;\n+}\n+\n /* Implement `TARGET_SET_CURRENT_FUNCTION'.  */\n /* Sanity cheching for above function attributes.  */\n static void\n@@ -4554,36 +4587,46 @@ riscv_set_current_function (tree decl)\n     {\n       tree ret = TREE_TYPE (TREE_TYPE (decl));\n       tree args = TYPE_ARG_TYPES (TREE_TYPE (decl));\n-      tree attr_args\n-\t= TREE_VALUE (lookup_attribute (\"interrupt\",\n-\t\t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (decl))));\n \n       if (TREE_CODE (ret) != VOID_TYPE)\n \terror (\"%qs function cannot return a value\", \"interrupt\");\n \n       if (args && TREE_CODE (TREE_VALUE (args)) != VOID_TYPE)\n \terror (\"%qs function cannot have arguments\", \"interrupt\");\n \n-      if (attr_args && TREE_CODE (TREE_VALUE (attr_args)) != VOID_TYPE)\n-\t{\n-\t  const char *string = TREE_STRING_POINTER (TREE_VALUE (attr_args));\n-\n-\t  if (!strcmp (string, \"user\"))\n-\t    cfun->machine->interrupt_mode = USER_MODE;\n-\t  else if (!strcmp (string, \"supervisor\"))\n-\t    cfun->machine->interrupt_mode = SUPERVISOR_MODE;\n-\t  else /* Must be \"machine\".  */\n-\t    cfun->machine->interrupt_mode = MACHINE_MODE;\n-\t}\n-      else\n-\t/* Interrupt attributes are machine mode by default.  */\n-\tcfun->machine->interrupt_mode = MACHINE_MODE;\n+      cfun->machine->interrupt_mode = riscv_get_interrupt_type (decl);\n+\n+      gcc_assert (cfun->machine->interrupt_mode != UNKNOWN_MODE);\n     }\n \n   /* Don't print the above diagnostics more than once.  */\n   cfun->machine->attributes_checked_p = 1;\n }\n \n+/* Implement TARGET_MERGE_DECL_ATTRIBUTES. */\n+static tree\n+riscv_merge_decl_attributes (tree olddecl, tree newdecl)\n+{\n+  tree combined_attrs;\n+\n+  enum riscv_privilege_levels old_interrupt_type\n+    = riscv_get_interrupt_type (olddecl);\n+  enum riscv_privilege_levels new_interrupt_type\n+    = riscv_get_interrupt_type (newdecl);\n+\n+  /* Check old and new has same interrupt type. */\n+  if ((old_interrupt_type != UNKNOWN_MODE)\n+      && (new_interrupt_type != UNKNOWN_MODE)\n+      && (old_interrupt_type != new_interrupt_type))\n+    error (\"%qs function cannot have different intterupt type.\", \"interrupt\");\n+\n+  /* Create combined attributes.  */\n+  combined_attrs = merge_attributes (DECL_ATTRIBUTES (olddecl),\n+                                     DECL_ATTRIBUTES (newdecl));\n+\n+  return combined_attrs;\n+}\n+\n /* Implement TARGET_CANNOT_COPY_INSN_P.  */\n \n static bool\n@@ -4780,6 +4823,9 @@ riscv_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n #undef TARGET_CONSTANT_ALIGNMENT\n #define TARGET_CONSTANT_ALIGNMENT riscv_constant_alignment\n \n+#undef TARGET_MERGE_DECL_ATTRIBUTES\n+#define TARGET_MERGE_DECL_ATTRIBUTES riscv_merge_decl_attributes\n+\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE riscv_attribute_table\n "}, {"sha": "48637b74d8a6538f4a9e625bc15b60fa88309f36", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8528f27bda0fd315eef48827c10a9c488071ceb3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8528f27bda0fd315eef48827c10a9c488071ceb3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8528f27bda0fd315eef48827c10a9c488071ceb3", "patch": "@@ -1,3 +1,7 @@\n+2018-07-12  Kito Cheng  <kito.cheng@gmail.com>\n+\n+        * gcc.target/riscv/interrupt-conflict-mode.c: New.\n+\n 2018-07-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-c++-common/gomp/declare-target-3.c: New test."}, {"sha": "6e280ed177118307bdd91882a5df2b544df3212a", "filename": "gcc/testsuite/gcc.target/riscv/interrupt-conflict-mode.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8528f27bda0fd315eef48827c10a9c488071ceb3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Finterrupt-conflict-mode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8528f27bda0fd315eef48827c10a9c488071ceb3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Finterrupt-conflict-mode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Finterrupt-conflict-mode.c?ref=8528f27bda0fd315eef48827c10a9c488071ceb3", "patch": "@@ -0,0 +1,10 @@\n+/* Verify proper errors are generated for conflicted interrupt type.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+void __attribute__ ((interrupt (\"user\")))\n+foo(void);\n+\n+void __attribute__ ((interrupt (\"machine\")))\n+foo (void)\n+{ /* { dg-error \"function cannot have different intterupt type.\" } */\n+}"}]}