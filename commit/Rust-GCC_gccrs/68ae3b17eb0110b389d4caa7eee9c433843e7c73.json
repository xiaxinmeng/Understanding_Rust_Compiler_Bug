{"sha": "68ae3b17eb0110b389d4caa7eee9c433843e7c73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhhZTNiMTdlYjAxMTBiMzg5ZDRjYWE3ZWVlOWM0MzM4NDNlN2M3Mw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-02-19T16:33:20Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-02-19T16:33:20Z"}, "message": "Force left-to-right evaluation of binary operations etc.\n\nT\n\tForce left-to-right evaluation of binary operations etc.\n\t* expr.c (force_evaluation_order), java-tree.h:  New function.\n\t* parse.y (java_complete_lhs):  Pass binary operations, procedure\n\tcalls, and ARRAY_REFs to force_evaluation_order.\n\t(various):  Set TREE_SIDE_EFFECTS more carefully.\n\tTolerate random (non-UTF8) encoding in comments without complaining.\n\t* lex.c (java_read_char):  Return 0xFFFE if bad UTF8 encoding.\n\t(java_is_eol):  Handle '\\r' followed by '\\n' instead of vice versa.\n\t* parse.y (resolve_qualified_expression_name):  Handle error_mark.\n\t(java_complete_node case EXPR_WITH_FILE_LOCATION):  Likewise.\n\t* parse.y (java_complete_lhs):  Ignore an empty statement in a\n\tCOMPOUND_EXPR.  Don't complain about empty statement after return.\n\nFrom-SVN: r25327", "tree": {"sha": "6b82b876bb9a612e39597faef317cc1f3ec3bd77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b82b876bb9a612e39597faef317cc1f3ec3bd77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68ae3b17eb0110b389d4caa7eee9c433843e7c73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ae3b17eb0110b389d4caa7eee9c433843e7c73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68ae3b17eb0110b389d4caa7eee9c433843e7c73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ae3b17eb0110b389d4caa7eee9c433843e7c73/comments", "author": null, "committer": null, "parents": [{"sha": "742855605950c43419bed950f7f0866cfbbc1c5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742855605950c43419bed950f7f0866cfbbc1c5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/742855605950c43419bed950f7f0866cfbbc1c5d"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "ad1880d9601ff2a692321e642bc298a4421ae1ad", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ae3b17eb0110b389d4caa7eee9c433843e7c73/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ae3b17eb0110b389d4caa7eee9c433843e7c73/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=68ae3b17eb0110b389d4caa7eee9c433843e7c73", "patch": "@@ -589,6 +589,7 @@ extern void add_interface PROTO ((tree, tree));\n extern int find_in_current_zip PROTO ((char *, int, struct JCF **));\n extern void append_gpp_mangled_classtype PROTO ((struct obstack *, char *));\n extern void emit_unicode_mangled_name PROTO ((struct obstack *, char *, int));\n+extern tree force_evaluation_order PROTO ((tree));\n \n /* Access flags etc for a method (a FUNCTION_DECL): */\n "}]}