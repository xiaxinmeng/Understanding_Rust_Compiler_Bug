{"sha": "9a5b7438c85a926a0dba9dc980039f3d67571763", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE1Yjc0MzhjODVhOTI2YTBkYmE5ZGM5ODAwMzlmM2Q2NzU3MTc2Mw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-04T00:16:34Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-04T00:16:34Z"}, "message": "Daily bump.", "tree": {"sha": "b227cfbbeaa4b506328e344692d6832695c743bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b227cfbbeaa4b506328e344692d6832695c743bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a5b7438c85a926a0dba9dc980039f3d67571763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a5b7438c85a926a0dba9dc980039f3d67571763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a5b7438c85a926a0dba9dc980039f3d67571763", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a5b7438c85a926a0dba9dc980039f3d67571763/comments", "author": null, "committer": null, "parents": [{"sha": "1dc83b460653c29f96b4659579e2151fae0d1e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc83b460653c29f96b4659579e2151fae0d1e6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dc83b460653c29f96b4659579e2151fae0d1e6e"}], "stats": {"total": 532, "additions": 531, "deletions": 1}, "files": [{"sha": "edbcaf2bc4d6449d3da04a3f8cba75228c6cf698", "filename": "gcc/ChangeLog", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a5b7438c85a926a0dba9dc980039f3d67571763", "patch": "@@ -1,3 +1,100 @@\n+2020-06-03  Vitor Guidi  <vitor.guidi@usp.br>\n+\n+\t* match.pd (tanh/sinh -> 1/cosh): New simplification.\n+\n+2020-06-03  Aaron Sawdey  <acsawdey@linux.ibm.com>\n+\n+\tPR target/95347\n+\t* config/rs6000/rs6000.c (is_stfs_insn): Rename to\n+\tis_lfs_stfs_insn and make it recognize lfs as well.\n+\t(prefixed_store_p): Use is_lfs_stfs_insn().\n+\t(prefixed_load_p): Use is_lfs_stfs_insn() to recognize lfs.\n+\n+2020-06-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-devirt.c: Include data-streamer.h, lto-streamer.h and\n+\tstreamer-hooks.h.\n+\t(odr_enums): New static var.\n+\t(struct odr_enum_val): New struct.\n+\t(class odr_enum): New struct.\n+\t(odr_enum_map): New hashtable.\n+\t(odr_types_equivalent_p): Drop code testing TYPE_VALUES.\n+\t(add_type_duplicate): Likewise.\n+\t(free_odr_warning_data): Do not free TYPE_VALUES.\n+\t(register_odr_enum): New function.\n+\t(ipa_odr_summary_write): New function.\n+\t(ipa_odr_read_section): New function.\n+\t(ipa_odr_summary_read): New function.\n+\t(class pass_ipa_odr): New pass.\n+\t(make_pass_ipa_odr): New function.\n+\t* ipa-utils.h (register_odr_enum): Declare.\n+\t* lto-section-in.c: (lto_section_name): Add odr_types section.\n+\t* lto-streamer.h (enum lto_section_type): Add odr_types section.\n+\t* passes.def: Add odr_types pass.\n+\t* lto-streamer-out.c (DFS::DFS_write_tree_body): Do not stream\n+\tTYPE_VALUES.\n+\t(hash_tree): Likewise.\n+\t* tree-streamer-in.c (lto_input_ts_type_non_common_tree_pointers):\n+\tLikewise.\n+\t* tree-streamer-out.c (write_ts_type_non_common_tree_pointers):\n+\tLikewise.\n+\t* timevar.def (TV_IPA_ODR): New timervar.\n+\t* tree-pass.h (make_pass_ipa_odr): Declare.\n+\t* tree.c (free_lang_data_in_type): Regiser ODR types.\n+\n+2020-06-03  Romain Naour  <romain.naour@gmail.com>\n+\n+\t* Makefile.in (SELFTEST_DEPS): Move before including language makefile\n+\tfragments.\n+\n+2020-06-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95487\n+\t* tree-vect-stmts.c (vectorizable_store): Use a truth type\n+\tfor the scatter mask.\n+\n+2020-06-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95495\n+\t* tree-vect-slp.c (vect_slp_analyze_node_operations): Use\n+\tSLP_TREE_REPRESENTATIVE in the shift assertion.\n+\n+2020-06-03  Tom Tromey  <tromey@adacore.com>\n+\n+\t* spellcheck.c (CASE_COST): New define.\n+\t(BASE_COST): New define.\n+\t(get_edit_distance): Recognize case changes.\n+\t(get_edit_distance_cutoff): Update.\n+\t(test_edit_distances): Update.\n+\t(get_old_cutoff): Update.\n+\t(test_find_closest_string): Add case sensitivity test.\n+\n+2020-06-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_bb_vectorization_profitable_p): Loop over\n+\tthe cost vector to unset the visited flag on stmts.\n+\n+2020-06-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gimplify.c (omp_notice_variable): Use new hook.\n+\t* langhooks-def.h (lhd_omp_predetermined_mapping): Declare.\n+\t(LANG_HOOKS_OMP_PREDETERMINED_MAPPING): Define\n+\t(LANG_HOOKS_DECLS): Add it.\n+\t* langhooks.c (lhd_omp_predetermined_sharing): Remove bogus unused attr.\n+\t(lhd_omp_predetermined_mapping): New.\n+\t* langhooks.h (struct lang_hooks_for_decls): Add new hook.\n+\n+2020-06-03  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-streamer.h (LTO_tags): Reorder so frequent tags has small indexes;\n+\tadd LTO_first_tree_tag and LTO_first_gimple_tag.\n+\t(lto_tag_is_tree_code_p): Update.\n+\t(lto_tag_is_gimple_code_p): Update.\n+\t(lto_gimple_code_to_tag): Update.\n+\t(lto_tag_to_gimple_code): Update.\n+\t(lto_tree_code_to_tag): Update.\n+\t(lto_tag_to_tree_code): Update.\n+\n 2020-06-02  Felix Yang  <felix.yang@huawei.com>\n \n \tPR target/95459"}, {"sha": "6c883c9885393c416d6e43d1884704c1e1932a69", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9a5b7438c85a926a0dba9dc980039f3d67571763", "patch": "@@ -1 +1 @@\n-20200603\n+20200604"}, {"sha": "6fc01445b8b5aa3e8d8f37a5beb3ff90e065c079", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 250, "deletions": 0, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9a5b7438c85a926a0dba9dc980039f3d67571763", "patch": "@@ -1,3 +1,253 @@\n+2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Denotes_Previous_Actual): Delete.\n+\t(Check_Generic_Actuals): Do not special case array types whose\n+\tcomponent type denotes a previous actual.  Do not special case\n+\taccess types whose base type is private.\n+\t(Check_Private_View): Remove code dealing with secondary types.\n+\tDo not switch the views of an array because of its component.\n+\t(Copy_Generic_Node): Add special handling for a comparison\n+\toperator on array types.\n+\t(Instantiate_Type): Do not special case access types whose\n+\tdesignated type is private.\n+\t(Set_Global_Type): Do not special case array types whose\n+\tcomponent type is private.\n+\n+2020-06-03  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch10.adb (Process_Body_Clauses): Add loop to interate\n+\tthrough all prefixes in a use_type clause so that all packages\n+\tin the expanded name get examined for effectiveness.\n+\n+2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Check_Private_View): Clean up implementation of\n+\tsecond main case, when the generic sees the private declaration.\n+\n+2020-06-03  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-nbnbin.ads: Minor reformatting.\n+\t* libgnat/a-nbnbre.ads, libgnat/a-nbnbre.adb (Is_Valid): Add\n+\tconvention Intrinsic. Add detection of uninitialized big reals.\n+\n+2020-06-03  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Side_Effect_Free_Statements,\n+\tSide_Effect_Free_Loop): New functions.\n+\t(Has_Non_Null_Statements): Consider N_Call_Marker as a null\n+\tstatement.\n+\t* sem_ch5.adb (Analyze_Loop_Parameter_Specification): Call\n+\tSet_Is_Null_Loop even inside a generic instantiation.\n+\t(Analyze_Loop_Statement): Mark for removal loops with no side\n+\teffects.\n+\n+2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* opt.ads (Allow_Integer_Address): Fix typo in comment.\n+\t* stand.ads (Standard_Address): New entity.\n+\t* cstand.adb (Create_Standard): Create it.\n+\t* sem_ch4.adb (Operator_Check): Convert the operands of an\n+\toperation with addresses and integers to Standard_Address\n+\tif pragma Allow_Integer_Address is in effect.\n+\n+2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-atopar.adb (Atomic_Fetch_And_Add): Make use of an\n+\tequivalent static expression.\n+\t(Atomic_Fetch_And_Subtract): Likewise.\n+\t(Is_Lock_Free): Likewise.\n+\t* libgnat/s-atopex.adb (Atomic_Exchange): Likewise.\n+\t(Atomic_Compare_And_Exchange): Likewise.\n+\t(Is_Lock_Free): Likewise.\n+\n+2020-06-03  Vadim Godunko  <godunko@adacore.com>\n+\n+\t* libgnat/s-parame.ads, libgnat/s-parame__ae653.ads,\n+\tlibgnat/s-parame__hpux.ads: Fix typos.\n+\n+2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.adb (Remove_Side_Effects): For a type conversion, do\n+\tnot remove the side effects of the expression only if it is of\n+\tuniversal integer type.\n+\n+2020-06-03  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-aotase.ads, libgnat/s-atoope.ads,\n+\tlibgnat/s-atopar.ads, libgnat/s-atopex.ads: Update header.\n+\n+2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Unchecked_Type_Conversion): Also fold the\n+\tconversion for literals of enumeration types.\n+\n+2020-06-03  Yannick Moy  <moy@adacore.com>\n+\n+\t* rtsfind.adb (Load_RTU): Correctly set/reset global variable to\n+\tignore SPARK_Mode in instances around loading.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Accept Off\n+\twithout prior On.\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): Likewise.\n+\t* sem_prag.adb (Analyze_Pragma): Always take into account\n+\tSPARK_Mode Off.\n+\n+2020-06-03  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* frontend.adb (Frontend): Call (dummy for now) tree checker.\n+\t* debug.adb: Reserve -gnatd_V for the tree checker.\n+\t* vast.ads, vast.adb: New files.\n+\t* gcc-interface/Make-lang.in: Add vast.o.\n+\n+2020-06-03  Justin Squirek  <squirek@adacore.com>\n+\n+\t* libgnat/a-cborse.adb, libgnat/a-cihase.adb,\n+\tlibgnat/a-ciorse.adb, libgnat/a-coorse.adb: Modified to use\n+\t'Unrestricted_Access in certain cases where static accessibility\n+\terrors were triggered.\n+\t* exp_ch6.adb (Expand_Simple_Return_Statement): Add generation\n+\tof dynamic accessibility checks as determined by\n+\tIs_Special_Aliased_Formal_Access.\n+\t* sem_attr.adb (Resolve_Attribute): Add call to\n+\tIs_Special_Aliased_Formal_Access to avoid performing static\n+\tchecks where dynamic ones are required.\n+\t* sem_ch6.adb (Check_Return_Obj_Accessibility): Handle renamed\n+\tobjects within component associations requiring special\n+\taccessibility checks.\n+\t* sem_util.adb, sem_util.ads (Is_Special_Aliased_Formal_Access):\n+\tCreated to detect the special case where an aliased formal is\n+\tbeing compared against the level of an anonymous access return\n+\tobject.\n+\t(Object_Access_Level): Remove incorrect condition leading to\n+\toverly permissive accessibility levels being returned on\n+\texplicitly aliased parameters.\n+\n+2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Enum_Pos_To_Rep): Adjust description.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference) <Pred>:\n+\tReimplement in the case of an enumeration type with non-standard\n+\tbut contiguous representation.\n+\t<Succ>: Likewise.\n+\t<Val>: Likewise.\n+\t* exp_ch3.adb (Expand_Freeze_Enumeration_Type): Count the\n+\tliterals in the first loop.  If the representation is\n+\tcontiguous, just build the index type of the array type and set\n+\tEnum_Pos_To_Rep to it.\n+\n+2020-06-03  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Loop_Entry_Attribute): Revise loop that\n+\tresets the scopes of entities associated with Loop_Id to the\n+\tscope of the new function, so the resetting is not restricted to\n+\titypes, but excludes loop parameters and the function entity\n+\titself. However, this fix is believed to be incomplete and a ???\n+\tcomment is added to indicate that.\n+\n+2020-06-03  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/s-regexp.ads: Fix comment\n+\n+2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference) <Enum_Rep>:\n+\tIn the case of an enumeration type, do an intermediate\n+\tconversion to a small integer type.  Remove useless stuff.\n+\t<Finalization_Size>: Do not hardcode Universal_Integer and\n+\tfix a type mismatch in the assignment to the variable.\n+\t<Max_Size_In_Storage_Elements>: Likewise.\n+\t<From_Any>: Do not redefine the Ptyp local variable.\n+\t<To_Any>: Likewise.\n+\t<TypeCode>: Likewise.\n+\t<Pos>: Small tweaks.\n+\t<Val>: For an enumeration type with standard representation,\n+\tapply the range check to the expression of a convertion to\n+\tUniversal_Integer, if any.  For an integer type, expand to\n+\ta mere conversion.\n+\n+2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-rannum.adb (Random_Discrete): In the 32-bit case,\n+\tuse the same linear implementation as in the 64-bit case when\n+\tthe type has a contiguous representation.\n+\n+2020-06-03  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_util.adb (Build_Class_Wide_Clone_Decl): Call\n+\tSet_Debug_Info_Needed to set the Needs_Debug_Info flag on\n+\tClone_Id if the flag is set on Spec_Id.\n+\n+2020-06-03  Yannick Moy  <moy@adacore.com>\n+\n+\t* inline.adb (Expand_Inlined_Call): Do not suppress checks on\n+\tinlined code in GNATprove mode.\n+\n+2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Has_Contiguous_Rep): Fix typo in comment.\n+\n+2020-06-03  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb, einfo.adb, exp_aggr.adb, exp_ch4.adb, exp_ch6.adb,\n+\texp_unst.adb, exp_util.adb, freeze.adb, inline.adb, repinfo.adb,\n+\tsem_aggr.adb, sem_attr.adb, sem_aux.adb, sem_ch13.adb,\n+\tsem_ch3.adb, sem_ch4.adb, sem_ch8.adb, sem_elab.adb,\n+\tsem_eval.adb, sem_prag.adb, sem_res.adb, sem_smem.adb,\n+\tsem_util.adb, treepr.adb: Replace uses of Next_ functions with\n+\tcorresponding procedures.\n+\n+2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Attribute_Valid): Use Standard_Long_Long_Integer\n+\tin lieu of Universal_Integer as large integer type.\n+\t* exp_ch3.adb (Expand_Freeze_Enumeration_Type): Likewise.\n+\n+2020-06-03  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-auxdec.ads (Address_Int): New.\n+\n+2020-06-03  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* aspects.adb, aspects.ads, atree.adb, atree.ads, elists.adb,\n+\telists.ads, fname.adb, fname.ads, gnat1drv.adb, lib.adb,\n+\tlib.ads, namet.adb, namet.ads, nlists.adb, nlists.ads, opt.adb,\n+\topt.ads, osint-c.adb, osint-c.ads, repinfo.adb, repinfo.ads,\n+\tsem_aux.adb, sem_aux.ads, sinput.adb, sinput.ads, stand.ads,\n+\tstringt.adb, stringt.ads, switch-c.adb, table.adb, table.ads,\n+\tuintp.adb, uintp.ads, urealp.adb, urealp.ads (Tree_Read,\n+\tTree_Write): Remove generation of ASIS trees.\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tRemove -gnatt and -gnatct documentation.\n+\t* gnat_ugn.texi: Regenerate.\n+\t* tree_in.ads, tree_in.adb, tree_io.ads, tree_io.adb,\n+\ttree_gen.ads, tree_gen.adb, stand.adb: Remove.\n+\t* gcc-interface/Makefile.in, gcc-interface/Make-lang.in: Remove\n+\treferences to tree_gen.o tree_in.o tree_io.o.\n+\n+2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* opt.ads (Disable_FE_Inline): Move around.\n+\t(Disable_FE_Inline_Always): Likewise.\n+\n+2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.adb (Is_Single_Attribute_Reference): New predicate.\n+\t(Generate_Range_Check): Do not force the evaluation if the\n+\tnode is a single attribute reference.\n+\t* exp_util.adb (Side_Effect_Free_Attribute): New predicate.\n+\t(Side_Effect_Free) <N_Attribute_Reference>: Call it.\n+\t(Remove_Side_Effects): Remove the side effects of the prefix\n+\tfor an attribute reference whose prefix is not a name.\n+\n+2020-06-03  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* switch-c.adb (Scan_Front_End_Switches): Remove processing of\n+\t-gnatt.\n+\t* usage.adb (Usage): Remove mention of -gnatt.\n+\n+2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sinfo.ads: Minor tweaks in commentary.\n+\n 2020-06-02  Alexandre Oliva  <oliva@adacore.com>\n \n \t* lib.ads (Compilation_Switches): Remove -auxbase from"}, {"sha": "a513fdc4958c1ada8ada4d17f3e071c0483c0183", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9a5b7438c85a926a0dba9dc980039f3d67571763", "patch": "@@ -1,3 +1,23 @@\n+2020-06-03  Mark Wielaard  <mark@klomp.org>\n+\n+\t* known-headers.cc (get_cp_stdlib_header_for_string_macro_name):\n+\tNew function.\n+\t* known-headers.h (get_cp_stdlib_header_for_string_macro_name):\n+\tNew function declaration.\n+\n+2020-06-03  Mark Wielaard  <mark@klomp.org>\n+\n+\t* known-headers.cc (get_string_macro_hint): New function.\n+\t(get_stdlib_header_for_name): Use get_string_macro_hint.\n+\t(get_c_stdlib_header_for_string_macro_name): New function.\n+\t* known-headers.h (get_c_stdlib_header_for_string_macro_name):\n+\tNew function declaration.\n+\n+2020-06-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* c-common.h (c_omp_predetermined_mapping): Declare.\n+\t* c-omp.c (c_omp_predetermined_mapping): New.\n+\n 2020-05-22  Mark Wielaard  <mark@klomp.org>\n \n \t* known-headers.cc (get_stdlib_header_for_name): Add a new"}, {"sha": "abf31e57688879076a9c685be7040f202f869ae9", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9a5b7438c85a926a0dba9dc980039f3d67571763", "patch": "@@ -1,3 +1,22 @@\n+2020-06-03  Mark Wielaard  <mark@klomp.org>\n+\n+\t* c-parser.c (struct c_parser): Add seen_string_literal\n+\tbitfield.\n+\t(c_parser_consume_token): Reset seen_string_literal.\n+\t(c_parser_error_richloc): Add name_hint if seen_string_literal\n+\tand next token is a CPP_NAME and we have a missing header\n+\tsuggestion for the name.\n+\t(c_parser_string_literal): Set seen_string_literal.\n+\n+2020-06-03  Mark Wielaard  <mark@klomp.org>\n+\n+\t* c-parser.c (c_parser_postfix_expression_after_primary): Add\n+\tscope with matching_parens after CPP_OPEN_PAREN.\n+\n+2020-06-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* c-objc-common.h (LANG_HOOKS_OMP_PREDETERMINED_MAPPING): Redefine.\n+\n 2020-05-28  Nicolas B\u00e9rtolo  <nicolasbertolo@gmail.com>\n \n \t* Make-lang.in: Remove extra slash."}, {"sha": "452ab2345f00b3b2a936bd486467abcf102231e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9a5b7438c85a926a0dba9dc980039f3d67571763", "patch": "@@ -1,3 +1,42 @@\n+2020-06-03  Mark Wielaard  <mark@klomp.org>\n+\n+\t* parser.c (cp_lexer_safe_previous_token): New function.\n+\t(cp_parser_error_1): Add name_hint if the previous token is\n+\ta string literal and next token is a CPP_NAME and we have a\n+\tmissing header suggestion for the name.\n+\n+2020-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* pt.c (process_partial_specialization): Pass the full set of\n+\tgeneric template arguments to strictly_subsumes.\n+\n+2020-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/92103\n+\t* pt.c (most_specialized_partial_spec): Reorganize the loop over\n+\tDECL_TEMPLATE_SPECIALIZATIONS.  Check constraints_satisfied_p on\n+\tthe original template declaration, not on the tsubsted one.\n+\n+2020-06-03  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95345\n+\t* coroutines.cc (finish_co_await_expr): Revise to allow for\n+\tparameter packs.\n+\t(finish_co_yield_expr): Likewise.\n+\n+2020-06-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95232\n+\t* cp-tree.h (predeclare_vla): Declare.\n+\t* cp-gimplify.c (predeclare_vla): Handle getting a decl.\n+\t* pt.c (tsubst_expr) [DECL_EXPR]: Use it.\n+\n+2020-06-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* cp-gimplify.c (cxx_omp_predetermined_mapping): New.\n+\t* cp-objcp-common.h (LANG_HOOKS_OMP_PREDETERMINED_MAPPING): Redfine.\n+\t* cp-tree.h (cxx_omp_predetermined_mapping): Declare.\n+\n 2020-06-02  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/95193"}, {"sha": "a8789024860e45c4a7dc58c0450bedf7a5aa1fb3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9a5b7438c85a926a0dba9dc980039f3d67571763", "patch": "@@ -1,3 +1,17 @@\n+2020-06-03  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/95214\n+\tPR fortran/66833\n+\tPR fortran/67938\n+\t* trans-expr.c (gfc_maybe_dereference_var): Add assumed-rank to\n+\tcharacter dummy arguments list of possible attributes.\n+\n+2020-06-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* f95-lang.c (LANG_HOOKS_OMP_PREDETERMINED_MAPPING): Redefine.\n+\t* trans-openmp.c (gfc_omp_predetermined_mapping): New.\n+\t* trans.h (gfc_omp_predetermined_mapping): Declare.\n+\n 2020-05-31  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/94361"}, {"sha": "85edad17e98eb14e878a67cc39ccc4bcb5e4a918", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=9a5b7438c85a926a0dba9dc980039f3d67571763", "patch": "@@ -1,3 +1,9 @@\n+2020-06-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/95306\n+\t* jit-builtins.c (builtins_manager::make_primitive_type):\n+\tImplement BT_CONST_VOLATILE_PTR.\n+\n 2020-06-02  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/95426"}, {"sha": "599d22922d5bb32f87575bca08c98a87c83b0026", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=9a5b7438c85a926a0dba9dc980039f3d67571763", "patch": "@@ -1,3 +1,7 @@\n+2020-06-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto-common.c (compare_tree_sccs_1): Do not compare TYPE_VALUES.\n+\n 2020-05-22  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto-common.c (lto_read_decls): Do not skip stray refs."}, {"sha": "8f2e0a644d32c90a1a29f032114662bc0d076155", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=9a5b7438c85a926a0dba9dc980039f3d67571763", "patch": "@@ -1,3 +1,7 @@\n+2020-06-03  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* sv.po: Update.\n+\n 2020-05-18  Joseph Myers  <joseph@codesourcery.com>\n \n \t* sv.po: Update."}, {"sha": "89a1ad559233c02c2162f109e3bc2b22009ce5de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5b7438c85a926a0dba9dc980039f3d67571763/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a5b7438c85a926a0dba9dc980039f3d67571763", "patch": "@@ -1,3 +1,72 @@\n+2020-06-03  Mark Wielaard  <mark@klomp.org>\n+\n+\t* g++.dg/spellcheck-inttypes.C: Add string-literal testcases.\n+\n+2020-06-03  Mark Wielaard  <mark@klomp.org>\n+\n+\t* gcc.dg/spellcheck-inttypes.c: New test.\n+\t* g++.dg/spellcheck-inttypes.C: Likewise.\n+\n+2020-06-03  Mark Wielaard  <mark@klomp.org>\n+\n+\t* c-c++-common/missing-close-func-paren.c: New test.\n+\n+2020-06-03  Vitor Guidi  <vitor.guidi@usp.br>\n+\n+\t* gcc.dg/tanhbysinh.c: New testcase.\n+\n+2020-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/cpp2a/concepts-partial-spec8.C: New test.\n+\n+2020-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/92103\n+\t* g++.dg/cpp2a/concepts-partial-spec7.C: New test.\n+\n+2020-06-03  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* g++.dg/lto/pr84805_0.C: Update.\n+\n+2020-06-03  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95345\n+\t* g++.dg/coroutines/pr95345.C: New test.\n+\n+2020-06-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/95232\n+\t* g++.dg/ubsan/vla-2.C: New test.\n+\n+2020-06-03  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+\n+\tPR fortran/95214\n+\tPR fortran/66833\n+\tPR fortran/67938\n+\t* gfortran.dg/PR95214.f90: New test.\n+\n+2020-06-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95487\n+\t* g++.dg/vect/pr95487.cc: New testcase.\n+\n+2020-06-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/95306\n+\t* jit.dg/test-pr95306-builtin-types.c (create_code): Add\n+\ttest of getting __atomic_load.\n+\n+2020-06-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95495\n+\t* gcc.dg/vect/pr95495.c: New testcase.\n+\n+2020-06-03  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/94874\n+\t* c-c++-common/gomp/pr94874.c: New.\n+\n 2020-06-02  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/95426"}, {"sha": "3b20f6f86a75fdddae6b247587423848c421186c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a5b7438c85a926a0dba9dc980039f3d67571763/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a5b7438c85a926a0dba9dc980039f3d67571763/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=9a5b7438c85a926a0dba9dc980039f3d67571763", "patch": "@@ -1,3 +1,11 @@\n+2020-06-03  Martin Liska  <mliska@suse.cz>\n+\n+\tPR gcov-profile/95480\n+\t* libgcov-profiler.c (GCOV_SUPPORTS_ATOMIC): Move to...\n+\t* libgcov.h (GCOV_SUPPORTS_ATOMIC): ...here.\n+\t(gcov_counter_add): Use GCOV_SUPPORTS_ATOMIC guard.\n+\t(gcov_counter_set_if_null): Likewise.\n+\n 2020-06-02  Jim Wilson  <jimw@sifive.com>\n \n \t* config/riscv/div.S (__divdi3): For negative arguments, change bgez"}]}