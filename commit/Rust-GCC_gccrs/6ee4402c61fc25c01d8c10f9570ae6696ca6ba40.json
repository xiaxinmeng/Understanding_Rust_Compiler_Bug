{"sha": "6ee4402c61fc25c01d8c10f9570ae6696ca6ba40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVlNDQwMmM2MWZjMjVjMDFkOGMxMGY5NTcwYWU2Njk2Y2E2YmE0MA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2002-08-07T05:28:24Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-08-07T05:28:24Z"}, "message": "ClassLoader.java (getSystemClassLoader, [...]): Add javadoc from classpath.\n\n2002-08-07  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n\n\t* java/lang/ClassLoader.java (getSystemClassLoader, findClass,\n\tdefineClass, setSigners, getSystemResource, getSystemResourceAsStream,\n\tfindResource, getResources, findResources): Add javadoc from classpath.\n\t(getSystemResources): Implemented.\n\nFrom-SVN: r56092", "tree": {"sha": "6173383a673965d79a1b3281a57ee608d760b69c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6173383a673965d79a1b3281a57ee608d760b69c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ee4402c61fc25c01d8c10f9570ae6696ca6ba40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee4402c61fc25c01d8c10f9570ae6696ca6ba40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ee4402c61fc25c01d8c10f9570ae6696ca6ba40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee4402c61fc25c01d8c10f9570ae6696ca6ba40/comments", "author": null, "committer": null, "parents": [{"sha": "af34e51e35a9db97532a89dac909cc50c3b9ac6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af34e51e35a9db97532a89dac909cc50c3b9ac6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af34e51e35a9db97532a89dac909cc50c3b9ac6c"}], "stats": {"total": 222, "additions": 200, "deletions": 22}, "files": [{"sha": "92fe53523b3d9b60bc6641e53a65f04c579e42fa", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee4402c61fc25c01d8c10f9570ae6696ca6ba40/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee4402c61fc25c01d8c10f9570ae6696ca6ba40/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6ee4402c61fc25c01d8c10f9570ae6696ca6ba40", "patch": "@@ -1,3 +1,10 @@\n+2002-08-07  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* java/lang/ClassLoader.java (getSystemClassLoader, findClass,\n+\tdefineClass, setSigners, getSystemResource, getSystemResourceAsStream, \n+\tfindResource, getResources, findResources): Add javadoc from classpath.\n+\t(getSystemResources): Implemented.\n+\n 2002-08-01  Mark Wielaard  <mark@klomp.org>\n \n \tRevert patch that breaks libgcj shared library on powerpc:"}, {"sha": "a6faa61b2ed8953f656f3fbe354b3d44a15ce0df", "filename": "libjava/java/lang/ClassLoader.java", "status": "modified", "additions": 193, "deletions": 22, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee4402c61fc25c01d8c10f9570ae6696ca6ba40/libjava%2Fjava%2Flang%2FClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee4402c61fc25c01d8c10f9570ae6696ca6ba40/libjava%2Fjava%2Flang%2FClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassLoader.java?ref=6ee4402c61fc25c01d8c10f9570ae6696ca6ba40", "patch": "@@ -82,6 +82,31 @@ public final ClassLoader getParent ()\n     return parent;\n   }\n \n+  /**\n+   * Returns the system classloader. The system classloader (also called\n+   * the application classloader) is the classloader that was used to\n+   * load the application classes on the classpath (given by the system\n+   * property <code>java.class.path</code>. This is set as the context\n+   * class loader for a thread. The system property\n+   * <code>java.system.class.loader</code>, if defined, is taken to be the\n+   * name of the class to use as the system class loader, which must have\n+   * a public constructor which takes a ClassLoader as a parent; otherwise this\n+   * uses gnu.java.lang.SystemClassLoader.\n+   *\n+   * <p>Note that this is different from the bootstrap classloader that\n+   * actually loads all the real \"system\" classes (the bootstrap classloader\n+   * is the parent of the returned system classloader).\n+   *\n+   * <p>A security check will be performed for\n+   * <code>RuntimePermission(\"getClassLoader\")</code> if the calling class\n+   * is not a parent of the system class loader.\n+   *\n+   * @return the system class loader\n+   * @throws SecurityException if the security check fails\n+   * @throws IllegalStateException if this is called recursively\n+   * @throws Error if <code>java.system.class.loader</code> fails to load\n+   * @since 1.2\n+   */\n   public static ClassLoader getSystemClassLoader ()\n   {\n     return gnu.gcj.runtime.VMClassLoader.instance;\n@@ -174,14 +199,48 @@ protected Class loadClass(String name, boolean link)\n     return c;\n   }\n \n-  /** Find a class.  This should be overridden by subclasses; the\n-   *  default implementation throws ClassNotFoundException.\n+  /**\n+   * Called for every class name that is needed but has not yet been\n+   * defined by this classloader or one of its parents. It is called by\n+   * <code>loadClass()</code> after both <code>findLoadedClass()</code> and\n+   * <code>parent.loadClass()</code> couldn't provide the requested class.\n    *\n-   * @param name Name of the class to find.\n-   * @return     The class found.\n-   * @exception  java.lang.ClassNotFoundException\n+   * <p>The default implementation throws a\n+   * <code>ClassNotFoundException</code>. Subclasses should override this\n+   * method. An implementation of this method in a subclass should get the\n+   * class bytes of the class (if it can find them), if the package of the\n+   * requested class doesn't exist it should define the package and finally\n+   * it should call define the actual class. It does not have to resolve the\n+   * class. It should look something like the following:<br>\n+   *\n+   * <pre>\n+   * // Get the bytes that describe the requested class\n+   * byte[] classBytes = classLoaderSpecificWayToFindClassBytes(name);\n+   * // Get the package name\n+   * int lastDot = name.lastIndexOf('.');\n+   * if (lastDot != -1)\n+   *   {\n+   *     String packageName = name.substring(0, lastDot);\n+   *     // Look if the package already exists\n+   *     if (getPackage(pkg) == null)\n+   *       {\n+   *         // define the package\n+   *         definePackage(packageName, ...);\n+   *       }\n+   *   }\n+   * // Define and return the class\n+   *  return defineClass(name, classBytes, 0, classBytes.length);\n+   * </pre>\n+   *\n+   * <p><code>loadClass()</code> makes sure that the <code>Class</code>\n+   * returned by <code>findClass()</code> will later be returned by\n+   * <code>findLoadedClass()</code> when the same class name is requested.\n+   *\n+   * @param name class name to find (including the package name)\n+   * @return the requested Class\n+   * @throws ClassNotFoundException when the class can not be found\n    * @since 1.2\n-   */\n+   */   \n   protected Class findClass (String name)\n     throws ClassNotFoundException\n   {\n@@ -234,6 +293,25 @@ protected final Class defineClass(byte[] data, int off, int len)\n     return defineClass (null, data, off, len, defaultProtectionDomain);\n   }\n \n+  /**\n+   * Helper to define a class using a string of bytes without a\n+   * ProtectionDomain. Subclasses should call this method from their\n+   * <code>findClass()</code> implementation. The name should use '.'\n+   * separators, and discard the trailing \".class\".  The default protection\n+   * domain has the permissions of\n+   * <code>Policy.getPolicy().getPermissions(new CodeSource(null, null))<code>.\n+   *\n+   * @param name the name to give the class, or null if unknown\n+   * @param data the data representing the classfile, in classfile format\n+   * @param offset the offset into the data where the classfile starts\n+   * @param len the length of the classfile data in the array\n+   * @return the class that was defined\n+   * @throws ClassFormatError if data is not in proper classfile format\n+   * @throws IndexOutOfBoundsException if offset or len is negative, or\n+   *         offset + len exceeds data\n+   * @throws SecurityException if name starts with \"java.\"\n+   * @since 1.1\n+   */\n   protected final Class defineClass(String name, byte[] data, int off, int len)\n     throws ClassFormatError\n   {\n@@ -504,11 +582,19 @@ protected final Class findSystemClass(String name)\n     return gnu.gcj.runtime.VMClassLoader.instance.loadClass (name);\n   }\n \n-  /*\n-   * Does currently nothing. FIXME.\n-   */ \n-  protected final void setSigners(Class claz, Object[] signers) {\n-    /* claz.setSigners (signers); */\n+  /**\n+   * Helper to set the signers of a class. This should be called after\n+   * defining the class.\n+   *\n+   * @param c the Class to set signers of\n+   * @param signers the signers to set\n+   * @since 1.1\n+   */   \n+  protected final void setSigners(Class c, Object[] signers)\n+  {\n+    /*\n+     * Does currently nothing. FIXME.\n+     */ \n   }\n \n   /**\n@@ -521,14 +607,45 @@ protected final void setSigners(Class claz, Object[] signers) {\n    */ \n   protected final native Class findLoadedClass(String name);\n \n+\n+  /**\n+   * Get a resource using the system classloader.\n+   *\n+   * @param name the name of the resource relative to the system classloader\n+   * @return an input stream for the resource, or null\n+   * @since 1.1\n+   */\n   public static InputStream getSystemResourceAsStream(String name) {\n     return getSystemClassLoader().getResourceAsStream (name);\n   }\n \n+  /**\n+   * Get the URL to a resource using the system classloader.\n+   *\n+   * @param name the name of the resource relative to the system classloader\n+   * @return the URL to the resource\n+   * @since 1.1\n+   */\n   public static URL getSystemResource(String name) {\n     return getSystemClassLoader().getResource (name);\n   }\n \n+  /**\n+   * Get an Enumeration of URLs to resources with a given name using the\n+   * the system classloader. The enumeration firsts lists the resources with\n+   * the given name that can be found by the bootstrap classloader followed\n+   * by the resources with the given name that can be found on the classpath.\n+   *\n+   * @param name the name of the resource relative to the system classloader\n+   * @return an Enumeration of URLs to the resources\n+   * @throws IOException if I/O errors occur in the process\n+   * @since 1.2\n+   */\n+  public static Enumeration getSystemResources(String name) throws IOException\n+  {\n+    return getSystemClassLoader().getResources(name);\n+  }\n+\n   /**\n    *   Return an InputStream representing the resource name.  \n    *   This is essentially like \n@@ -541,13 +658,17 @@ public static URL getSystemResource(String name) {\n    */\n   public InputStream getResourceAsStream(String name) \n   {\n-    try {\n-      URL res = getResource (name);\n-      if (res == null) return null;\n-      return res.openStream ();\n-    } catch (java.io.IOException x) {\n-      return null;\n-    }\n+    try\n+      {\n+\tURL res = getResource (name);\n+\tif (res == null)\n+          return null;\n+\treturn res.openStream ();\n+      }\n+    catch (java.io.IOException x)\n+      {\n+\treturn null;\n+      }\n   }\n  \n   /**\n@@ -582,13 +703,47 @@ public URL getResource (String name)\n       return findResource (name);\n   }\n \n+  /**\n+   * Called whenever a resource is needed that could not be provided by\n+   * one of the parents of this classloader. It is called by\n+   * <code>getResource()</code> after <code>parent.getResource()</code>\n+   * couldn't provide the requested resource.\n+   *\n+   * <p>The default implementation always returns null. Subclasses should\n+   * override this method when they can provide a way to return a URL\n+   * to a named resource.\n+   *\n+   * @param name the name of the resource to be found\n+   * @return a URL to the named resource or null when not found\n+   * @since 1.2\n+   */\n   protected URL findResource (String name)\n   {\n     // Default to returning null.  Derived classes implement this.\n     return null;\n   }\n \n-  public final Enumeration getResources (String name) throws IOException\n+  /**\n+   * Returns an Enumeration of all resources with a given name that can\n+   * be found by this classloader and its parents. Certain classloaders\n+   * (such as the URLClassLoader when given multiple jar files) can have\n+   * multiple resources with the same name that come from multiple locations.\n+   * It can also occur that a parent classloader offers a resource with a\n+   * certain name and the child classloader also offers a resource with that\n+   * same name. <code>getResource() only offers the first resource (of the\n+   * parent) with a given name. This method lists all resources with the\n+   * same name. The name should use '/' as path separators.\n+   *\n+   * <p>The Enumeration is created by first calling <code>getResources()</code>\n+   * on the parent classloader and then calling <code>findResources()</code>\n+   * on this classloader.\n+   *\n+   * @param name the resource name\n+   * @return an enumaration of all resources found\n+   * @throws IOException if I/O errors occur in the process\n+   * @since 1.2\n+   */\n+  public final Enumeration getResources(String name) throws IOException\n   {\n     // The rules say search the parent class if non-null,\n     // otherwise search the built-in class loader (assumed to be\n@@ -611,10 +766,26 @@ public final Enumeration getResources (String name) throws IOException\n       return findResources (name);\n   }\n \n-  protected Enumeration findResources (String name) throws IOException\n+  /**\n+   * Called whenever all locations of a named resource are needed.\n+   * It is called by <code>getResources()</code> after it has called\n+   * <code>parent.getResources()</code>. The results are combined by\n+   * the <code>getResources()</code> method.\n+   *\n+   * <p>The default implementation always returns an empty Enumeration.\n+   * Subclasses should override it when they can provide an Enumeration of\n+   * URLs (possibly just one element) to the named resource.\n+   * The first URL of the Enumeration should be the same as the one\n+   * returned by <code>findResource</code>.\n+   *\n+   * @param name the name of the resource to be found\n+   * @return a possibly empty Enumeration of URLs to the named resource\n+   * @throws IOException if I/O errors occur in the process\n+   * @since 1.2\n+   */\n+  protected Enumeration findResources(String name) throws IOException\n   {\n-    // Default to returning null.  Derived classes implement this.\n-    return null;\n+    return Collections.enumeration(Collections.EMPTY_LIST);\n   }\n \n   /**"}]}