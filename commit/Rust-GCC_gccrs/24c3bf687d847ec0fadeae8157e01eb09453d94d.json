{"sha": "24c3bf687d847ec0fadeae8157e01eb09453d94d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRjM2JmNjg3ZDg0N2VjMGZhZGVhZTgxNTdlMDFlYjA5NDUzZDk0ZA==", "commit": {"author": {"name": "Jason Eckhardt", "email": "jle@cygnus.com", "date": "2000-02-21T23:04:43Z"}, "committer": {"name": "Jason Eckhardt", "email": "jle@gcc.gnu.org", "date": "2000-02-21T23:04:43Z"}, "message": "predict.c (estimate_probability): Added the pointer heuristic to the collection of static branch predictors.\n\n        * predict.c (estimate_probability): Added the pointer heuristic to\n        the collection of static branch predictors.\n\nFrom-SVN: r32093", "tree": {"sha": "62edd0d21b621443e00532127c21eca708a5fe08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62edd0d21b621443e00532127c21eca708a5fe08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24c3bf687d847ec0fadeae8157e01eb09453d94d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c3bf687d847ec0fadeae8157e01eb09453d94d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24c3bf687d847ec0fadeae8157e01eb09453d94d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c3bf687d847ec0fadeae8157e01eb09453d94d/comments", "author": null, "committer": null, "parents": [{"sha": "1e387156a844a5c5a016d65bfe29e1cf0fd2ec64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e387156a844a5c5a016d65bfe29e1cf0fd2ec64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e387156a844a5c5a016d65bfe29e1cf0fd2ec64"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "f6e5897878755d1c8e040cf037caa979f68a6703", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c3bf687d847ec0fadeae8157e01eb09453d94d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c3bf687d847ec0fadeae8157e01eb09453d94d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24c3bf687d847ec0fadeae8157e01eb09453d94d", "patch": "@@ -1,3 +1,8 @@\n+Mon Feb 21 17:06:27 2000  Jason Eckhardt  <jle@cygnus.com>\n+\n+\t* predict.c (estimate_probability): Added the pointer heuristic to\n+\tthe collection of static branch predictors.\n+\n 2000-02-21  Catherine Moore  <clm@cygnus.com>\n \n \t* config/mips/mips.h (ASM_SPEC): Add -mfix700."}, {"sha": "2cae39a5798f7064af8ac51e55fab73c40ffc843", "filename": "gcc/predict.c", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c3bf687d847ec0fadeae8157e01eb09453d94d/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c3bf687d847ec0fadeae8157e01eb09453d94d/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=24c3bf687d847ec0fadeae8157e01eb09453d94d", "patch": "@@ -95,7 +95,10 @@ estimate_probability (loops_info)\n \t}\n     }\n \n-  /* Try to predict condjumps using same algorithm as mostly_true_jump.  */\n+  /* Attempt to predict conditional jumps using a number of heuristics.\n+     For each conditional jump, we try each heuristic in a fixed order.\n+     If more than one heuristic applies to a particular branch, the first\n+     is used as the prediction for the branch.  */\n   for (i = 0; i < n_basic_blocks - 1; i++)\n     {\n       rtx last_insn = BLOCK_END (i);\n@@ -108,7 +111,39 @@ estimate_probability (loops_info)\n       cond = get_condition (last_insn, &earliest);\n       if (! cond)\n \tcontinue;\n-      /* EQ tests are usually false and NE tests are usually true.  Also,\n+\n+      /* Try \"pointer heuristic.\"\n+\t A comparison ptr == 0 is predicted as false.\n+\t Similarly, a comparison ptr1 == ptr2 is predicted as false.  */\n+      prob = 0;\n+      switch (GET_CODE (cond))\n+\t{\n+\tcase EQ:\n+\t  if (GET_CODE (XEXP (cond, 0)) == REG\n+\t      && REGNO_POINTER_FLAG (REGNO (XEXP (cond, 0)))\n+\t      && (XEXP (cond, 1) == const0_rtx\n+\t\t  || (GET_CODE (XEXP (cond, 1)) == REG\n+\t\t      && REGNO_POINTER_FLAG (REGNO (XEXP (cond, 1))))))\n+\t    prob = REG_BR_PROB_BASE / 10;\n+\t  break;\n+\tcase NE:\n+\t  if (GET_CODE (XEXP (cond, 0)) == REG\n+\t      && REGNO_POINTER_FLAG (REGNO (XEXP (cond, 0)))\n+\t      && (XEXP (cond, 1) == const0_rtx\n+\t\t  || (GET_CODE (XEXP (cond, 1)) == REG\n+\t\t      && REGNO_POINTER_FLAG (REGNO (XEXP (cond, 1))))))\n+\t    prob = REG_BR_PROB_BASE / 2;\n+\t  break;\n+\tdefault:\n+\t  prob = 0;\n+\t}\n+\tif (prob && ! find_reg_note (last_insn, REG_BR_PROB, 0))\n+\t  REG_NOTES (last_insn)\n+\t    = gen_rtx_EXPR_LIST (REG_BR_PROB, GEN_INT (prob),\n+\t\t\t\t REG_NOTES (last_insn));\n+\n+      /* Try \"opcode heuristic.\"\n+\t EQ tests are usually false and NE tests are usually true. Also,\n \t most quantities are positive, so we can make the appropriate guesses\n \t about signed comparisons against zero.  */\n       switch (GET_CODE (cond))"}]}