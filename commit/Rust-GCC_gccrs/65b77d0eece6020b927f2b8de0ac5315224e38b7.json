{"sha": "65b77d0eece6020b927f2b8de0ac5315224e38b7", "node_id": "C_kwDOANBUbNoAKDY1Yjc3ZDBlZWNlNjAyMGI5MjdmMmI4ZGUwYWM1MzE1MjI0ZTM4Yjc", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-04-05T16:31:36Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-04-05T16:31:36Z"}, "message": "aarch64: Stop +mops clobbering variable values\n\nThe mops cpy* patterns take three registers: a destination address,\na source address, and a size.  The patterns clobber all three registers\nas part of the operation.  The set* patterns take a destination address,\na size, and a store value, and they clobber the first two registers as\npart of the operation.\n\nHowever, the associated expanders would try to use existing source,\ndestination and size registers where possible.  Any variables in\nthose registers could therefore change unexpectedly.\n\nFor example:\n\n    void\n    copy1 (int *x, int *y, long z, int **res)\n    {\n      __builtin_memcpy (x, y, z);\n      *res = x;\n    }\n\ngenerated:\n\n        cpyfp   [x0]!, [x1]!, x2!\n        cpyfm   [x0]!, [x1]!, x2!\n        cpyfe   [x0]!, [x1]!, x2!\n        str     x0, [x3]\n        ret\n\nwhich stores the incremented x at *res.\n\ngcc/\n\t* config/aarch64/aarch64.md (aarch64_cpymemdi): Turn into a\n\tdefine_expand and turn operands 0 and 1 from REGs to MEMs.\n\t(*aarch64_cpymemdi): New pattern.\n\t(aarch64_setmemdi): Turn into a define_expand and turn operand 0\n\tfrom a REG to a MEM.\n\t(*aarch64_setmemdi): New pattern.\n\t* config/aarch64/aarch64.cc (aarch64_expand_cpymem_mops): Use\n\tcopy_to_mode_reg on all three registers.  Replace the original\n\tMEM addresses rather than creating wild reads and writes.\n\t(aarch64_expand_setmem_mops): Likewise for the size and for the\n\tdestination memory and address.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/mops_4.c: New test.", "tree": {"sha": "a5290e793ef018edb099d2ba831908e4c0db36fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5290e793ef018edb099d2ba831908e4c0db36fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65b77d0eece6020b927f2b8de0ac5315224e38b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65b77d0eece6020b927f2b8de0ac5315224e38b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65b77d0eece6020b927f2b8de0ac5315224e38b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65b77d0eece6020b927f2b8de0ac5315224e38b7/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14814e20161d7b6a4e9cac244c7013fa56f71f55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14814e20161d7b6a4e9cac244c7013fa56f71f55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14814e20161d7b6a4e9cac244c7013fa56f71f55"}], "stats": {"total": 206, "additions": 171, "deletions": 35}, "files": [{"sha": "3e2a6fb64725d4e37ddd89f6987795733cfff35c", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b77d0eece6020b927f2b8de0ac5315224e38b7/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b77d0eece6020b927f2b8de0ac5315224e38b7/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=65b77d0eece6020b927f2b8de0ac5315224e38b7", "patch": "@@ -24531,17 +24531,15 @@ aarch64_expand_cpymem_mops (rtx *operands)\n {\n   if (!TARGET_MOPS)\n     return false;\n-  rtx addr_dst = XEXP (operands[0], 0);\n-  rtx addr_src = XEXP (operands[1], 0);\n-  rtx sz_reg = operands[2];\n-\n-  if (!REG_P (sz_reg))\n-    sz_reg = force_reg (DImode, sz_reg);\n-  if (!REG_P (addr_dst))\n-    addr_dst = force_reg (DImode, addr_dst);\n-  if (!REG_P (addr_src))\n-    addr_src = force_reg (DImode, addr_src);\n-  emit_insn (gen_aarch64_cpymemdi (addr_dst, addr_src, sz_reg));\n+\n+  /* All three registers are changed by the instruction, so each one\n+     must be a fresh pseudo.  */\n+  rtx dst_addr = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n+  rtx src_addr = copy_to_mode_reg (Pmode, XEXP (operands[1], 0));\n+  rtx dst_mem = replace_equiv_address (operands[0], dst_addr);\n+  rtx src_mem = replace_equiv_address (operands[1], src_addr);\n+  rtx sz_reg = copy_to_mode_reg (DImode, operands[2]);\n+  emit_insn (gen_aarch64_cpymemdi (dst_mem, src_mem, sz_reg));\n \n   return true;\n }\n@@ -24718,17 +24716,15 @@ aarch64_expand_setmem_mops (rtx *operands)\n   if (!TARGET_MOPS)\n     return false;\n \n-  rtx addr_dst = XEXP (operands[0], 0);\n-  rtx sz_reg = operands[1];\n+  /* The first two registers are changed by the instruction, so both\n+     of them must be a fresh pseudo.  */\n+  rtx dst_addr = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n+  rtx dst_mem = replace_equiv_address (operands[0], dst_addr);\n+  rtx sz_reg = copy_to_mode_reg (DImode, operands[1]);\n   rtx val = operands[2];\n-\n-  if (!REG_P (sz_reg))\n-   sz_reg = force_reg (DImode, sz_reg);\n-  if (!REG_P (addr_dst))\n-   addr_dst = force_reg (DImode, addr_dst);\n-  if (!REG_P (val) && val != CONST0_RTX (QImode))\n-   val = force_reg (QImode, val);\n-  emit_insn (gen_aarch64_setmemdi (addr_dst, val, sz_reg));\n+  if (val != CONST0_RTX (QImode))\n+    val = force_reg (QImode, val);\n+  emit_insn (gen_aarch64_setmemdi (dst_mem, val, sz_reg));\n   return true;\n }\n "}, {"sha": "f5c635938adccf69364ae6be7274db9437cb6d7c", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b77d0eece6020b927f2b8de0ac5315224e38b7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b77d0eece6020b927f2b8de0ac5315224e38b7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=65b77d0eece6020b927f2b8de0ac5315224e38b7", "patch": "@@ -1581,16 +1581,29 @@\n   }\n )\n \n-(define_insn \"aarch64_cpymemdi\"\n-  [(parallel [\n-   (set (match_operand:DI 2 \"register_operand\" \"+&r\") (const_int 0))\n+(define_expand \"aarch64_cpymemdi\"\n+  [(parallel\n+     [(set (match_operand 2) (const_int 0))\n+      (clobber (match_dup 3))\n+      (clobber (match_dup 4))\n+      (set (match_operand 0)\n+\t   (unspec:BLK [(match_operand 1) (match_dup 2)] UNSPEC_CPYMEM))])]\n+  \"TARGET_MOPS\"\n+  {\n+    operands[3] = XEXP (operands[0], 0);\n+    operands[4] = XEXP (operands[1], 0);\n+  }\n+)\n+\n+(define_insn \"*aarch64_cpymemdi\"\n+  [(set (match_operand:DI 2 \"register_operand\" \"+&r\") (const_int 0))\n    (clobber (match_operand:DI 0 \"register_operand\" \"+&r\"))\n    (clobber (match_operand:DI 1 \"register_operand\" \"+&r\"))\n    (set (mem:BLK (match_dup 0))\n-        (unspec:BLK [(mem:BLK (match_dup 1)) (match_dup 2)] UNSPEC_CPYMEM))])]\n- \"TARGET_MOPS\"\n- \"cpyfp\\t[%x0]!, [%x1]!, %x2!\\;cpyfm\\t[%x0]!, [%x1]!, %x2!\\;cpyfe\\t[%x0]!, [%x1]!, %x2!\"\n- [(set_attr \"length\" \"12\")]\n+        (unspec:BLK [(mem:BLK (match_dup 1)) (match_dup 2)] UNSPEC_CPYMEM))]\n+  \"TARGET_MOPS\"\n+  \"cpyfp\\t[%x0]!, [%x1]!, %x2!\\;cpyfm\\t[%x0]!, [%x1]!, %x2!\\;cpyfe\\t[%x0]!, [%x1]!, %x2!\"\n+  [(set_attr \"length\" \"12\")]\n )\n \n ;; 0 is dst\n@@ -1657,16 +1670,28 @@\n }\n )\n \n-(define_insn \"aarch64_setmemdi\"\n-  [(parallel [\n-   (set (match_operand:DI 2 \"register_operand\" \"+&r\") (const_int 0))\n+(define_expand \"aarch64_setmemdi\"\n+  [(parallel\n+     [(set (match_operand 2) (const_int 0))\n+      (clobber (match_dup 3))\n+      (set (match_operand 0)\n+\t   (unspec:BLK [(match_operand 1)\n+\t\t\t(match_dup 2)] UNSPEC_SETMEM))])]\n+  \"TARGET_MOPS\"\n+  {\n+    operands[3] = XEXP (operands[0], 0);\n+  }\n+)\n+\n+(define_insn \"*aarch64_setmemdi\"\n+  [(set (match_operand:DI 2 \"register_operand\" \"+&r\") (const_int 0))\n    (clobber (match_operand:DI 0 \"register_operand\" \"+&r\"))\n    (set (mem:BLK (match_dup 0))\n         (unspec:BLK [(match_operand:QI 1 \"aarch64_reg_or_zero\" \"rZ\")\n-                    (match_dup 2)] UNSPEC_SETMEM))])]\n- \"TARGET_MOPS\"\n- \"setp\\t[%x0]!, %x2!, %x1\\;setm\\t[%x0]!, %x2!, %x1\\;sete\\t[%x0]!, %x2!, %x1\"\n- [(set_attr \"length\" \"12\")]\n+\t\t     (match_dup 2)] UNSPEC_SETMEM))]\n+  \"TARGET_MOPS\"\n+  \"setp\\t[%x0]!, %x2!, %x1\\;setm\\t[%x0]!, %x2!, %x1\\;sete\\t[%x0]!, %x2!, %x1\"\n+  [(set_attr \"length\" \"12\")]\n )\n \n ;; 0 is dst"}, {"sha": "1b87759cb5e8bbcbb58cf63404d1d579d44b2818", "filename": "gcc/testsuite/gcc.target/aarch64/mops_4.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65b77d0eece6020b927f2b8de0ac5315224e38b7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmops_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65b77d0eece6020b927f2b8de0ac5315224e38b7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmops_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmops_4.c?ref=65b77d0eece6020b927f2b8de0ac5315224e38b7", "patch": "@@ -0,0 +1,115 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv8.6-a+mops\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" { target lp64 } } } */\n+\n+/*\n+** copy1:\n+**\tmov\t(x[0-9]+), x0\n+**\tcpyfp\t\\[\\1\\]!, \\[x1\\]!, x2!\n+**\tcpyfm\t\\[\\1\\]!, \\[x1\\]!, x2!\n+**\tcpyfe\t\\[\\1\\]!, \\[x1\\]!, x2!\n+**\tstr\tx0, \\[x3\\]\n+**\tret\n+*/\n+void\n+copy1 (int *x, int *y, long z, int **res)\n+{\n+  __builtin_memcpy (x, y, z);\n+  *res = x;\n+}\n+\n+/*\n+** copy2:\n+**\tmov\t(x[0-9]+), x1\n+**\tcpyfp\t\\[x0\\]!, \\[\\1\\]!, x2!\n+**\tcpyfm\t\\[x0\\]!, \\[\\1\\]!, x2!\n+**\tcpyfe\t\\[x0\\]!, \\[\\1\\]!, x2!\n+**\tstr\tx1, \\[x3\\]\n+**\tret\n+*/\n+void\n+copy2 (int *x, int *y, long z, int **res)\n+{\n+  __builtin_memcpy (x, y, z);\n+  *res = y;\n+}\n+\n+/*\n+** copy3:\n+**\tmov\t(x[0-9]+), x2\n+**\tcpyfp\t\\[x0\\]!, \\[x1\\]!, \\1!\n+**\tcpyfm\t\\[x0\\]!, \\[x1\\]!, \\1!\n+**\tcpyfe\t\\[x0\\]!, \\[x1\\]!, \\1!\n+**\tstr\tx2, \\[x3\\]\n+**\tret\n+*/\n+void\n+copy3 (int *x, int *y, long z, long *res)\n+{\n+  __builtin_memcpy (x, y, z);\n+  *res = z;\n+}\n+\n+/*\n+** set1:\n+**\tmov\t(x[0-9]+), x0\n+**\tsetp\t\\[\\1\\]!, x2!, x1\n+**\tsetm\t\\[\\1\\]!, x2!, x1\n+**\tsete\t\\[\\1\\]!, x2!, x1\n+**\tstr\tx0, \\[x3\\]\n+**\tret\n+*/\n+void\n+set1 (char *x, char y, long z, char **res)\n+{\n+  __builtin_memset (x, y, z);\n+  *res = x;\n+}\n+\n+/*\n+** set2:\n+**\tldrb\tw([0-9]+), \\[x1\\]\n+**\tsetp\t\\[x0\\]!, x2!, x\\1\n+**\tsetm\t\\[x0\\]!, x2!, x\\1\n+**\tsete\t\\[x0\\]!, x2!, x\\1\n+**\tstrb\tw\\1, \\[x3\\]\n+**\tret\n+*/\n+void\n+set2 (char *x, char *yptr, long z, char *res)\n+{\n+  char y = *yptr;\n+  __builtin_memset (x, y, z);\n+  *res = y;\n+}\n+\n+/*\n+** set3:\n+**\tmov\t(x[0-9]+), x2\n+**\tsetp\t\\[x0\\]!, \\1!, x1\n+**\tsetm\t\\[x0\\]!, \\1!, x1\n+**\tsete\t\\[x0\\]!, \\1!, x1\n+**\tstr\tx2, \\[x3\\]\n+**\tret\n+*/\n+void\n+set3 (char *x, char y, long z, long *res)\n+{\n+  __builtin_memset (x, y, z);\n+  *res = z;\n+}\n+\n+/*\n+** set4:\n+**\tsetp\t\\[x0\\]!, x1!, xzr\n+**\tsetm\t\\[x0\\]!, x1!, xzr\n+**\tsete\t\\[x0\\]!, x1!, xzr\n+**\tstrb\twzr, \\[x2\\]\n+**\tret\n+*/\n+void\n+set4 (char *x, long z, char *res)\n+{\n+  __builtin_memset (x, 0, z);\n+  *res = 0;\n+}"}]}