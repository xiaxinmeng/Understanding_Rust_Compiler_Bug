{"sha": "6621d78e99fcfda0d0d5f3935de7ff49d33e6682", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYyMWQ3OGU5OWZjZmRhMGQwZDVmMzkzNWRlN2ZmNDlkMzNlNjY4Mg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-03-16T16:14:50Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-03-16T16:14:50Z"}, "message": "combine.c (combine_simplify_rtx): Remove the \"last\" parameter and its documentation.\n\n2004-03-16  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* combine.c (combine_simplify_rtx): Remove the \"last\"\n\tparameter and its documentation.  Adjust recursive calls.\n\t(simplify_logical): Always perform the only simplification\n\tcontrolled by \"last\", if the simplified expression is\n\tactually different.\n\t(try_combine): Do not pass the \"last\" parameter to\n\tcombine_simplify_rtx.\n\nFrom-SVN: r79534", "tree": {"sha": "d44e753af7662d70921adf2ddb3b742776f2df6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d44e753af7662d70921adf2ddb3b742776f2df6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6621d78e99fcfda0d0d5f3935de7ff49d33e6682", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6621d78e99fcfda0d0d5f3935de7ff49d33e6682", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6621d78e99fcfda0d0d5f3935de7ff49d33e6682", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6621d78e99fcfda0d0d5f3935de7ff49d33e6682/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c7dca8f62aedd623486b18614ad38e2108890d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c7dca8f62aedd623486b18614ad38e2108890d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c7dca8f62aedd623486b18614ad38e2108890d7"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "8ce4a8d1b783ee7c9e1f7646bff9d479b6560e7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6621d78e99fcfda0d0d5f3935de7ff49d33e6682/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6621d78e99fcfda0d0d5f3935de7ff49d33e6682/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6621d78e99fcfda0d0d5f3935de7ff49d33e6682", "patch": "@@ -1,3 +1,13 @@\n+2004-03-16  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* combine.c (combine_simplify_rtx): Remove the \"last\"\n+\tparameter and its documentation.  Adjust recursive calls.\n+\t(simplify_logical): Always perform the only simplification\n+\tcontrolled by \"last\", if the simplified expression is\n+\tactually different.\n+\t(try_combine): Do not pass the \"last\" parameter to\n+\tcombine_simplify_rtx.\n+\n 2004-03-16  Richard Sandiford  <rsandifo@redhat.com>\n \n \tPR target/14599"}, {"sha": "568862d6b0a7d51c93b8c7b446822409d5a4da3f", "filename": "gcc/combine.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6621d78e99fcfda0d0d5f3935de7ff49d33e6682/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6621d78e99fcfda0d0d5f3935de7ff49d33e6682/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6621d78e99fcfda0d0d5f3935de7ff49d33e6682", "patch": "@@ -348,10 +348,10 @@ static void undo_all (void);\n static void undo_commit (void);\n static rtx *find_split_point (rtx *, rtx);\n static rtx subst (rtx, rtx, rtx, int, int);\n-static rtx combine_simplify_rtx (rtx, enum machine_mode, int, int);\n+static rtx combine_simplify_rtx (rtx, enum machine_mode, int);\n static rtx simplify_if_then_else (rtx);\n static rtx simplify_set (rtx);\n-static rtx simplify_logical (rtx, int);\n+static rtx simplify_logical (rtx);\n static rtx expand_compound_operation (rtx);\n static rtx expand_field_assignment (rtx);\n static rtx make_extraction (enum machine_mode, rtx, HOST_WIDE_INT,\n@@ -3543,7 +3543,7 @@ subst (rtx x, rtx from, rtx to, int in_dest, int unique_copy)\n       /* If X is sufficiently simple, don't bother trying to do anything\n \t with it.  */\n       if (code != CONST_INT && code != REG && code != CLOBBER)\n-\tx = combine_simplify_rtx (x, op0_mode, i == 3, in_dest);\n+\tx = combine_simplify_rtx (x, op0_mode, in_dest);\n \n       if (GET_CODE (x) == code)\n \tbreak;\n@@ -3562,13 +3562,11 @@ subst (rtx x, rtx from, rtx to, int in_dest, int unique_copy)\n    outer level; call `subst' to simplify recursively.  Return the new\n    expression.\n \n-   OP0_MODE is the original mode of XEXP (x, 0); LAST is nonzero if this\n-   will be the iteration even if an expression with a code different from\n-   X is returned; IN_DEST is nonzero if we are inside a SET_DEST.  */\n+   OP0_MODE is the original mode of XEXP (x, 0).  IN_DEST is nonzero\n+   if we are inside a SET_DEST.  */\n \n static rtx\n-combine_simplify_rtx (rtx x, enum machine_mode op0_mode, int last,\n-\t\t      int in_dest)\n+combine_simplify_rtx (rtx x, enum machine_mode op0_mode, int in_dest)\n {\n   enum rtx_code code = GET_CODE (x);\n   enum machine_mode mode = GET_MODE (x);\n@@ -4223,7 +4221,7 @@ combine_simplify_rtx (rtx x, enum machine_mode op0_mode, int last,\n \t{\n \t  /* Try to simplify the expression further.  */\n \t  rtx tor = gen_binary (IOR, mode, XEXP (x, 0), XEXP (x, 1));\n-\t  temp = combine_simplify_rtx (tor, mode, last, in_dest);\n+\t  temp = combine_simplify_rtx (tor, mode, in_dest);\n \n \t  /* If we could, great.  If not, do not go ahead with the IOR\n \t     replacement, since PLUS appears in many special purpose\n@@ -4508,7 +4506,7 @@ combine_simplify_rtx (rtx x, enum machine_mode op0_mode, int last,\n     case AND:\n     case IOR:\n     case XOR:\n-      return simplify_logical (x, last);\n+      return simplify_logical (x);\n \n     case ABS:\n       /* (abs (neg <foo>)) -> (abs <foo>) */\n@@ -5290,10 +5288,10 @@ simplify_set (rtx x)\n }\n \f\n /* Simplify, X, and AND, IOR, or XOR operation, and return the simplified\n-   result.  LAST is nonzero if this is the last retry.  */\n+   result.  */\n \n static rtx\n-simplify_logical (rtx x, int last)\n+simplify_logical (rtx x)\n {\n   enum machine_mode mode = GET_MODE (x);\n   rtx op0 = XEXP (x, 0);\n@@ -5343,11 +5341,13 @@ simplify_logical (rtx x, int last)\n \n \t  /* If we have (ior (and (X C1) C2)) and the next restart would be\n \t     the last, simplify this by making C1 as small as possible\n-\t     and then exit.  */\n-\t  if (last\n-\t      && GET_CODE (x) == IOR && GET_CODE (op0) == AND\n+\t     and then exit.  Only do this if C1 actually changes: for now\n+\t     this only saves memory but, should this transformation be\n+\t     moved to simplify-rtx.c, we'd risk unbounded recursion there.  */\n+\t  if (GET_CODE (x) == IOR && GET_CODE (op0) == AND\n \t      && GET_CODE (XEXP (op0, 1)) == CONST_INT\n-\t      && GET_CODE (op1) == CONST_INT)\n+\t      && GET_CODE (op1) == CONST_INT\n+\t      && (INTVAL (XEXP (op0, 1)) & INTVAL (op1)) != 0)\n \t    return gen_binary (IOR, mode,\n \t\t\t       gen_binary (AND, mode, XEXP (op0, 0),\n \t\t\t\t\t   GEN_INT (INTVAL (XEXP (op0, 1))"}]}