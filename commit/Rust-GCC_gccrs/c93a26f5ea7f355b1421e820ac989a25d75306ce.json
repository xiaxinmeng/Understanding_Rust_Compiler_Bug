{"sha": "c93a26f5ea7f355b1421e820ac989a25d75306ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkzYTI2ZjVlYTdmMzU1YjE0MjFlODIwYWM5ODlhMjVkNzUzMDZjZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-08-08T15:59:33Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-08-08T15:59:33Z"}, "message": "typeck.c (build_component_addr): Remove.\n\ncp:\n\t* typeck.c (build_component_addr): Remove.\n\t(build_unary_op): Just check it's not a bitfield, and then build\n\tan ADDR_EXPR.\ntestsuite:\n\t* g++.dg/other/packed1.C: New test.\n\nFrom-SVN: r56132", "tree": {"sha": "c6e3f6f93e3d034998db24b9f3f80fa7f866a0e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6e3f6f93e3d034998db24b9f3f80fa7f866a0e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c93a26f5ea7f355b1421e820ac989a25d75306ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93a26f5ea7f355b1421e820ac989a25d75306ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c93a26f5ea7f355b1421e820ac989a25d75306ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c93a26f5ea7f355b1421e820ac989a25d75306ce/comments", "author": null, "committer": null, "parents": [{"sha": "aa2a83dc0c0614abfdeea82b0bd72e6924732022", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2a83dc0c0614abfdeea82b0bd72e6924732022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2a83dc0c0614abfdeea82b0bd72e6924732022"}], "stats": {"total": 86, "additions": 39, "deletions": 47}, "files": [{"sha": "361da7557dc4c15177e3db4a9ee476eac169dd76", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93a26f5ea7f355b1421e820ac989a25d75306ce/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93a26f5ea7f355b1421e820ac989a25d75306ce/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c93a26f5ea7f355b1421e820ac989a25d75306ce", "patch": "@@ -1,3 +1,9 @@\n+2002-08-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* typeck.c (build_component_addr): Remove.\n+\t(build_unary_op): Just check it's not a bitfield, and then build\n+\tan ADDR_EXPR.\n+\n 2002-08-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* class.c (convert_to_base): Correct check for error_mark_node."}, {"sha": "97626f68b29be52ca4f8640735f4c1d28b253cb5", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 47, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93a26f5ea7f355b1421e820ac989a25d75306ce/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93a26f5ea7f355b1421e820ac989a25d75306ce/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c93a26f5ea7f355b1421e820ac989a25d75306ce", "patch": "@@ -57,7 +57,6 @@ static int comp_array_types PARAMS ((int (*) (tree, tree, int), tree,\n static tree common_base_type PARAMS ((tree, tree));\n static tree lookup_anon_field PARAMS ((tree, tree));\n static tree pointer_diff PARAMS ((tree, tree, tree));\n-static tree build_component_addr PARAMS ((tree, tree));\n static tree qualify_type_recursive PARAMS ((tree, tree));\n static tree get_delta_difference PARAMS ((tree, tree, int));\n static int comp_cv_target_types PARAMS ((tree, tree, int));\n@@ -3741,50 +3740,6 @@ pointer_diff (op0, op1, ptrtype)\n   return folded;\n }\n \f\n-/* Handle the case of taking the address of a COMPONENT_REF.\n-   Called by `build_unary_op'.\n-\n-   ARG is the COMPONENT_REF whose address we want.\n-   ARGTYPE is the pointer type that this address should have. */\n-\n-static tree\n-build_component_addr (arg, argtype)\n-     tree arg, argtype;\n-{\n-  tree field = TREE_OPERAND (arg, 1);\n-  tree basetype = decl_type_context (field);\n-  tree rval = build_unary_op (ADDR_EXPR, TREE_OPERAND (arg, 0), 0);\n-\n-  my_friendly_assert (TREE_CODE (field) == FIELD_DECL, 981018);\n-\n-  if (DECL_C_BIT_FIELD (field))\n-    {\n-      error (\"attempt to take address of bit-field structure member `%D'\",\n-                field);\n-      return error_mark_node;\n-    }\n-\n-  if (TREE_CODE (field) == FIELD_DECL\n-      && TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (basetype))\n-    {\n-      /* Can't convert directly to ARGTYPE, since that\n-\t may have the same pointer type as one of our\n-\t baseclasses.  */\n-      tree binfo = lookup_base (TREE_TYPE (TREE_TYPE (rval)), basetype,\n-\t\t\t\tba_check, NULL);\n-\n-      rval = build_base_path (PLUS_EXPR, rval, binfo, 1);\n-      rval = build1 (NOP_EXPR, argtype, rval);\n-      TREE_CONSTANT (rval) = TREE_CONSTANT (TREE_OPERAND (rval, 0));\n-    }\n-  else\n-    /* This conversion is harmless.  */\n-    rval = convert_force (argtype, rval, 0);\n-\n-  return fold (build (PLUS_EXPR, argtype, rval,\n-\t\t      cp_convert (argtype, byte_position (field))));\n-}\n-   \n /* Construct and perhaps optimize a tree representation\n    for a unary operation.  CODE, a tree_code, specifies the operation\n    and XARG is the operand.  */\n@@ -4290,8 +4245,13 @@ build_unary_op (code, xarg, noconvert)\n       {\n \ttree addr;\n \n-\tif (TREE_CODE (arg) == COMPONENT_REF)\n-\t  addr = build_component_addr (arg, argtype);\n+\tif (TREE_CODE (arg) == COMPONENT_REF\n+\t    && DECL_C_BIT_FIELD (TREE_OPERAND (arg, 1)))\n+\t  {\n+\t    error (\"attempt to take address of bit-field structure member `%D'\",\n+\t\t   TREE_OPERAND (arg, 1));\n+\t    return error_mark_node;\n+\t  }\n \telse\n \t  addr = build1 (ADDR_EXPR, argtype, arg);\n "}, {"sha": "fa5f8e73541f480d7528ff130596cb0a6c3270ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93a26f5ea7f355b1421e820ac989a25d75306ce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93a26f5ea7f355b1421e820ac989a25d75306ce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c93a26f5ea7f355b1421e820ac989a25d75306ce", "patch": "@@ -1,3 +1,7 @@\n+2002-08-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.dg/other/packed1.C: New test.\n+\n 2002-08-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/abi/offsetof.C: Tweak error messages."}, {"sha": "b515854a849211c8f424c39239ff453075cd047a", "filename": "gcc/testsuite/g++.dg/other/packed1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c93a26f5ea7f355b1421e820ac989a25d75306ce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpacked1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c93a26f5ea7f355b1421e820ac989a25d75306ce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpacked1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpacked1.C?ref=c93a26f5ea7f355b1421e820ac989a25d75306ce", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do run }\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 8 Aug 2002 <nathan@codesourcery.com>\n+\n+// WRS SPR 63496, lost packed attribute when accessing a packed\n+// field. This matters on aligned architectures like sh\n+\n+struct thing { int m; };\n+\n+struct pod {char a; thing m __attribute__ ((packed)); };\n+\n+int main ()\n+{\n+  thing t;\n+  pod p;\n+  \n+  p.m = t; /* runtime bus error here */\n+\n+  return 0;\n+  \n+};"}]}