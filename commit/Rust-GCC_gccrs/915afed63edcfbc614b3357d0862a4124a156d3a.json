{"sha": "915afed63edcfbc614b3357d0862a4124a156d3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE1YWZlZDYzZWRjZmJjNjE0YjMzNTdkMDg2MmE0MTI0YTE1NmQzYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-09-30T14:58:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-09-30T14:58:27Z"}, "message": "tree-ssa-structalias.c (find_func_aliases_for_builtin_call): Handle BUILT_IN_STRDUP and BUILT_IN_STRNDUP.\n\n\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call): Handle\n\tBUILT_IN_STRDUP and BUILT_IN_STRNDUP.\n\t* tree-ssa-alias.c (call_may_clobber_ref_p_1): Likewise.  Fix\n\thandling of BUILT_IN_STRNCAT and BUILT_IN_STRNCAT_CHK.\n\t(ref_maybe_used_by_call_p_1): Fix handling of BUILT_IN_STRCAT,\n\tBUILT_IN_STRNCAT, BUILT_IN_STRCAT_CHK and BUILT_IN_STRNCAT_CHK.\n\n\t* gcc.dg/strlenopt-21.c: New test.\n\nCo-Authored-By: Richard Guenther <rguenther@suse.de>\n\nFrom-SVN: r179387", "tree": {"sha": "547d9c6e16c8da1b5c7e98044325a0f5be53cc1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/547d9c6e16c8da1b5c7e98044325a0f5be53cc1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/915afed63edcfbc614b3357d0862a4124a156d3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/915afed63edcfbc614b3357d0862a4124a156d3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/915afed63edcfbc614b3357d0862a4124a156d3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/915afed63edcfbc614b3357d0862a4124a156d3a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49f836ba6fdf80354f675af50837fbdb7144e081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49f836ba6fdf80354f675af50837fbdb7144e081", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49f836ba6fdf80354f675af50837fbdb7144e081"}], "stats": {"total": 158, "additions": 150, "deletions": 8}, "files": [{"sha": "525ca80ba6b4d58d76205a5585d57804cca20e93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/915afed63edcfbc614b3357d0862a4124a156d3a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/915afed63edcfbc614b3357d0862a4124a156d3a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=915afed63edcfbc614b3357d0862a4124a156d3a", "patch": "@@ -1,3 +1,13 @@\n+2011-09-30  Jakub Jelinek  <jakub@redhat.com>\n+\t    Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call): Handle\n+\tBUILT_IN_STRDUP and BUILT_IN_STRNDUP.\n+\t* tree-ssa-alias.c (call_may_clobber_ref_p_1): Likewise.  Fix\n+\thandling of BUILT_IN_STRNCAT and BUILT_IN_STRNCAT_CHK.\n+\t(ref_maybe_used_by_call_p_1): Fix handling of BUILT_IN_STRCAT,\n+\tBUILT_IN_STRNCAT, BUILT_IN_STRCAT_CHK and BUILT_IN_STRNCAT_CHK.\n+\n 2011-09-30  Jan Beulich  <jbeulich@suse.com>\n \n \t* lto-cgraph.c (output_cgraph): Remove processing of"}, {"sha": "2d8e0664f1ce5f67b3d414711c8b96c7d943601f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/915afed63edcfbc614b3357d0862a4124a156d3a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/915afed63edcfbc614b3357d0862a4124a156d3a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=915afed63edcfbc614b3357d0862a4124a156d3a", "patch": "@@ -1,3 +1,7 @@\n+2011-09-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/strlenopt-21.c: New test.\n+\n 2011-09-30  Revital Eres  <revital.eres@linaro.org>\n \n \t* gcc.dg/sms-10.c: New file"}, {"sha": "cd5fc5d928f137c5a694fc96fffd9ee7413c43c0", "filename": "gcc/testsuite/gcc.dg/strlenopt-21.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/915afed63edcfbc614b3357d0862a4124a156d3a/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/915afed63edcfbc614b3357d0862a4124a156d3a/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-21.c?ref=915afed63edcfbc614b3357d0862a4124a156d3a", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fdump-tree-strlen -fdump-tree-optimized\" } */\n+\n+#include \"strlenopt.h\"\n+\n+struct S { char *p; size_t l; };\n+\n+__attribute__((noinline, noclone)) struct S\n+foo (char *x, int n)\n+{\n+  int i;\n+  char a[64];\n+  char *p = strchr (x, '\\0');\n+  struct S s;\n+  /* strcpy here is optimized into memcpy, length computed as p - x + 1.  */\n+  strcpy (a, x);\n+  /* strcat here is optimized into memcpy.  */\n+  strcat (p, \"abcd\");\n+  for (i = 0; i < n; i++)\n+    if ((i % 123) == 53)\n+      /* strcat here is optimized into strlen and memcpy.  */\n+      strcat (a, \"efg\");\n+  s.p = strdup (a);\n+  /* The strlen should be optimized here into 4.  */\n+  s.l = strlen (p);\n+  return s;\n+}\n+\n+int\n+main ()\n+{\n+  char buf[32];\n+  struct S s;\n+  buf[0] = 'z';\n+  buf[1] = '\\0';\n+  s = foo (buf, 0);\n+  if (s.l != 4 || memcmp (buf, \"zabcd\", 6) != 0)\n+    abort ();\n+  if (s.p == NULL)\n+    return 0;\n+  if (memcmp (s.p, \"z\", 2) != 0)\n+    abort ();\n+  s = foo (buf, 60);\n+  if (s.l != 4 || memcmp (buf, \"zabcdabcd\", 10) != 0)\n+    abort ();\n+  if (s.p == NULL)\n+    return 0;\n+  if (memcmp (s.p, \"zabcdefg\", 9) != 0)\n+    abort ();\n+  s = foo (buf, 240);\n+  if (s.l != 4 || memcmp (buf, \"zabcdabcdabcd\", 14) != 0)\n+    abort ();\n+  if (s.p == NULL)\n+    return 0;\n+  if (memcmp (s.p, \"zabcdabcdefgefg\", 16) != 0)\n+    abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"strlen \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"memcpy \\\\(\" 3 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strcpy \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strcat \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"strchr \\\\(\" 1 \"strlen\" } } */\n+/* { dg-final { scan-tree-dump-times \"stpcpy \\\\(\" 0 \"strlen\" } } */\n+/* { dg-final { cleanup-tree-dump \"strlen\" } } */"}, {"sha": "82307decaf4982de8042b7e86f93f62e6dcc1fb5", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 52, "deletions": 8, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/915afed63edcfbc614b3357d0862a4124a156d3a/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/915afed63edcfbc614b3357d0862a4124a156d3a/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=915afed63edcfbc614b3357d0862a4124a156d3a", "patch": "@@ -1178,17 +1178,27 @@ ref_maybe_used_by_call_p_1 (gimple call, ao_ref *ref)\n       && DECL_BUILT_IN_CLASS (callee) == BUILT_IN_NORMAL)\n     switch (DECL_FUNCTION_CODE (callee))\n       {\n-\t/* All the following functions clobber memory pointed to by\n-\t   their first argument.  */\n+\t/* All the following functions read memory pointed to by\n+\t   their second argument.  strcat/strncat additionally\n+\t   reads memory pointed to by the first argument.  */\n+\tcase BUILT_IN_STRCAT:\n+\tcase BUILT_IN_STRNCAT:\n+\t  {\n+\t    ao_ref dref;\n+\t    ao_ref_init_from_ptr_and_size (&dref,\n+\t\t\t\t\t   gimple_call_arg (call, 0),\n+\t\t\t\t\t   NULL_TREE);\n+\t    if (refs_may_alias_p_1 (&dref, ref, false))\n+\t      return true;\n+\t  }\n+\t  /* FALLTHRU */\n \tcase BUILT_IN_STRCPY:\n \tcase BUILT_IN_STRNCPY:\n \tcase BUILT_IN_MEMCPY:\n \tcase BUILT_IN_MEMMOVE:\n \tcase BUILT_IN_MEMPCPY:\n \tcase BUILT_IN_STPCPY:\n \tcase BUILT_IN_STPNCPY:\n-\tcase BUILT_IN_STRCAT:\n-\tcase BUILT_IN_STRNCAT:\n \t  {\n \t    ao_ref dref;\n \t    tree size = NULL_TREE;\n@@ -1199,14 +1209,23 @@ ref_maybe_used_by_call_p_1 (gimple call, ao_ref *ref)\n \t\t\t\t\t   size);\n \t    return refs_may_alias_p_1 (&dref, ref, false);\n \t  }\n+\tcase BUILT_IN_STRCAT_CHK:\n+\tcase BUILT_IN_STRNCAT_CHK:\n+\t  {\n+\t    ao_ref dref;\n+\t    ao_ref_init_from_ptr_and_size (&dref,\n+\t\t\t\t\t   gimple_call_arg (call, 0),\n+\t\t\t\t\t   NULL_TREE);\n+\t    if (refs_may_alias_p_1 (&dref, ref, false))\n+\t      return true;\n+\t  }\n+\t  /* FALLTHRU */\n \tcase BUILT_IN_STRCPY_CHK:\n \tcase BUILT_IN_STRNCPY_CHK:\n \tcase BUILT_IN_MEMCPY_CHK:\n \tcase BUILT_IN_MEMMOVE_CHK:\n \tcase BUILT_IN_MEMPCPY_CHK:\n \tcase BUILT_IN_STPCPY_CHK:\n-\tcase BUILT_IN_STRCAT_CHK:\n-\tcase BUILT_IN_STRNCAT_CHK:\n \t  {\n \t    ao_ref dref;\n \t    tree size = NULL_TREE;\n@@ -1226,6 +1245,19 @@ ref_maybe_used_by_call_p_1 (gimple call, ao_ref *ref)\n \t\t\t\t\t   size);\n \t    return refs_may_alias_p_1 (&dref, ref, false);\n \t  }\n+\t/* These read memory pointed to by the first argument.  */\n+\tcase BUILT_IN_STRDUP:\n+\tcase BUILT_IN_STRNDUP:\n+\t  {\n+\t    ao_ref dref;\n+\t    tree size = NULL_TREE;\n+\t    if (gimple_call_num_args (call) == 2)\n+\t      size = gimple_call_arg (call, 1);\n+\t    ao_ref_init_from_ptr_and_size (&dref,\n+\t\t\t\t\t   gimple_call_arg (call, 0),\n+\t\t\t\t\t   size);\n+\t    return refs_may_alias_p_1 (&dref, ref, false);\n+\t  }\n \t/* The following builtins do not read from memory.  */\n \tcase BUILT_IN_FREE:\n \tcase BUILT_IN_MALLOC:\n@@ -1467,7 +1499,12 @@ call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n \t  {\n \t    ao_ref dref;\n \t    tree size = NULL_TREE;\n-\t    if (gimple_call_num_args (call) == 3)\n+\t    /* Don't pass in size for strncat, as the maximum size\n+\t       is strlen (dest) + n + 1 instead of n, resp.\n+\t       n + 1 at dest + strlen (dest), but strlen (dest) isn't\n+\t       known.  */\n+\t    if (gimple_call_num_args (call) == 3\n+\t\t&& DECL_FUNCTION_CODE (callee) != BUILT_IN_STRNCAT)\n \t      size = gimple_call_arg (call, 2);\n \t    ao_ref_init_from_ptr_and_size (&dref,\n \t\t\t\t\t   gimple_call_arg (call, 0),\n@@ -1486,7 +1523,12 @@ call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n \t  {\n \t    ao_ref dref;\n \t    tree size = NULL_TREE;\n-\t    if (gimple_call_num_args (call) == 4)\n+\t    /* Don't pass in size for __strncat_chk, as the maximum size\n+\t       is strlen (dest) + n + 1 instead of n, resp.\n+\t       n + 1 at dest + strlen (dest), but strlen (dest) isn't\n+\t       known.  */\n+\t    if (gimple_call_num_args (call) == 4\n+\t\t&& DECL_FUNCTION_CODE (callee) != BUILT_IN_STRNCAT_CHK)\n \t      size = gimple_call_arg (call, 2);\n \t    ao_ref_init_from_ptr_and_size (&dref,\n \t\t\t\t\t   gimple_call_arg (call, 0),\n@@ -1506,6 +1548,8 @@ call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n \t   being the definition point for the pointer.  */\n \tcase BUILT_IN_MALLOC:\n \tcase BUILT_IN_CALLOC:\n+\tcase BUILT_IN_STRDUP:\n+\tcase BUILT_IN_STRNDUP:\n \t  /* Unix98 specifies that errno is set on allocation failure.  */\n \t  if (flag_errno_math\n \t      && targetm.ref_may_alias_errno (ref))"}, {"sha": "821fc7d92b294374cf3eae6415a45a457f97ab72", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/915afed63edcfbc614b3357d0862a4124a156d3a/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/915afed63edcfbc614b3357d0862a4124a156d3a/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=915afed63edcfbc614b3357d0862a4124a156d3a", "patch": "@@ -4130,6 +4130,24 @@ find_func_aliases_for_builtin_call (gimple t)\n       case BUILT_IN_REMQUOL:\n       case BUILT_IN_FREE:\n \treturn true;\n+      case BUILT_IN_STRDUP:\n+      case BUILT_IN_STRNDUP:\n+\tif (gimple_call_lhs (t))\n+\t  {\n+\t    handle_lhs_call (t, gimple_call_lhs (t), gimple_call_flags (t),\n+\t\t\t     NULL, fndecl);\n+\t    get_constraint_for_ptr_offset (gimple_call_lhs (t),\n+\t\t\t\t\t   NULL_TREE, &lhsc);\n+\t    get_constraint_for_ptr_offset (gimple_call_arg (t, 0),\n+\t\t\t\t\t   NULL_TREE, &rhsc);\n+\t    do_deref (&lhsc);\n+\t    do_deref (&rhsc);\n+\t    process_all_all_constraints (lhsc, rhsc);\n+\t    VEC_free (ce_s, heap, lhsc);\n+\t    VEC_free (ce_s, heap, rhsc);\n+\t    return true;\n+\t  }\n+\tbreak;\n       /* Trampolines are special - they set up passing the static\n \t frame.  */\n       case BUILT_IN_INIT_TRAMPOLINE:"}]}