{"sha": "2eef28ec7b537993d69c38797a6afd2b43a9e62c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVlZjI4ZWM3YjUzNzk5M2Q2OWMzODc5N2E2YWZkMmI0M2E5ZTYyYw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2005-09-13T02:00:53Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2005-09-13T02:00:53Z"}, "message": "re PR target/23774 (dealloc of dynamic stack space breaks backchain)\n\n\tPR target/23774\n\t* config/rs6000/rs6000.md (restore_stack_block): Write the backchain\n\tword before changing the stack pointer.\t Use gen_frame_mem for MEMs.\n\tUse UNSPEC_TIE to prevent insn scheduling reordering the insns.\n\t(restore_stack_nonlocal): Likewise.\n\t(save_stack_nonlocal): Use template to emit insns, and gen_frame_mem.\n\nFrom-SVN: r104206", "tree": {"sha": "368a5f1ef08e89c22b5eff148f552cf19057f485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/368a5f1ef08e89c22b5eff148f552cf19057f485"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2eef28ec7b537993d69c38797a6afd2b43a9e62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eef28ec7b537993d69c38797a6afd2b43a9e62c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2eef28ec7b537993d69c38797a6afd2b43a9e62c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2eef28ec7b537993d69c38797a6afd2b43a9e62c/comments", "author": null, "committer": null, "parents": [{"sha": "7e15cfee2184fae238f9d04a397bed0a326cc771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e15cfee2184fae238f9d04a397bed0a326cc771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e15cfee2184fae238f9d04a397bed0a326cc771"}], "stats": {"total": 60, "additions": 38, "deletions": 22}, "files": [{"sha": "0b7c8bd53a33b63e87fb0614475b745e0190a69b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eef28ec7b537993d69c38797a6afd2b43a9e62c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eef28ec7b537993d69c38797a6afd2b43a9e62c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2eef28ec7b537993d69c38797a6afd2b43a9e62c", "patch": "@@ -1,3 +1,12 @@\n+2005-09-13  Alan Modra  <amodra@bigpond.net.au>\n+\n+\tPR target/23774\n+\t* config/rs6000/rs6000.md (restore_stack_block): Write the backchain\n+\tword before changing the stack pointer.\t Use gen_frame_mem for MEMs.\n+\tUse UNSPEC_TIE to prevent insn scheduling reordering the insns.\n+\t(restore_stack_nonlocal): Likewise.\n+\t(save_stack_nonlocal): Use template to emit insns, and gen_frame_mem.\n+\n 2005-09-12  Ian Lance Taylor  <ian@airs.com>\n \n \tPR g++/7874"}, {"sha": "6171cadcaaa63baab719575c112618e9097852ae", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2eef28ec7b537993d69c38797a6afd2b43a9e62c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2eef28ec7b537993d69c38797a6afd2b43a9e62c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2eef28ec7b537993d69c38797a6afd2b43a9e62c", "patch": "@@ -9347,51 +9347,58 @@\n   \"\"\n   \"DONE;\")\n \n+;; Adjust stack pointer (op0) to a new value (op1).\n+;; First copy old stack backchain to new location, and ensure that the\n+;; scheduler won't reorder the sp assignment before the backchain write.\n (define_expand \"restore_stack_block\"\n-  [(use (match_operand 0 \"register_operand\" \"\"))\n-   (set (match_dup 2) (match_dup 3))\n-   (set (match_dup 0) (match_operand 1 \"register_operand\" \"\"))\n-   (set (match_dup 3) (match_dup 2))]\n+  [(set (match_dup 2) (match_dup 3))\n+   (set (match_dup 4) (match_dup 2))\n+   (set (match_dup 5) (unspec:BLK [(match_dup 5)] UNSPEC_TIE))\n+   (set (match_operand 0 \"register_operand\" \"\")\n+\t(match_operand 1 \"register_operand\" \"\"))]\n   \"\"\n   \"\n {\n   operands[2] = gen_reg_rtx (Pmode);\n-  operands[3] = gen_rtx_MEM (Pmode, operands[0]);\n+  operands[3] = gen_frame_mem (Pmode, operands[0]);\n+  operands[4] = gen_frame_mem (Pmode, operands[1]);\n+  operands[5] = gen_frame_mem (BLKmode, operands[0]);\n }\")\n \n (define_expand \"save_stack_nonlocal\"\n-  [(match_operand 0 \"memory_operand\" \"\")\n-   (match_operand 1 \"register_operand\" \"\")]\n+  [(set (match_dup 3) (match_dup 4))\n+   (set (match_operand 0 \"memory_operand\" \"\") (match_dup 3))\n+   (set (match_dup 2) (match_operand 1 \"register_operand\" \"\"))]\n   \"\"\n   \"\n {\n-  rtx temp = gen_reg_rtx (Pmode);\n   int units_per_word = (TARGET_32BIT) ? 4 : 8;\n \n   /* Copy the backchain to the first word, sp to the second.  */\n-  emit_move_insn (temp, gen_rtx_MEM (Pmode, operands[1]));\n-  emit_move_insn (adjust_address_nv (operands[0], Pmode, 0), temp);\n-  emit_move_insn (adjust_address_nv (operands[0], Pmode, units_per_word),\n-\t\t  operands[1]);\n-  DONE;\n+  operands[0] = adjust_address_nv (operands[0], Pmode, 0);\n+  operands[2] = adjust_address_nv (operands[0], Pmode, units_per_word);\n+  operands[3] = gen_reg_rtx (Pmode);\n+  operands[4] = gen_frame_mem (Pmode, operands[1]);\n }\")\n \n (define_expand \"restore_stack_nonlocal\"\n-  [(match_operand 0 \"register_operand\" \"\")\n-   (match_operand 1 \"memory_operand\" \"\")]\n+  [(set (match_dup 2) (match_operand 1 \"memory_operand\" \"\"))\n+   (set (match_dup 3) (match_dup 4))\n+   (set (match_dup 5) (match_dup 2))\n+   (set (match_dup 6) (unspec:BLK [(match_dup 6)] UNSPEC_TIE))\n+   (set (match_operand 0 \"register_operand\" \"\") (match_dup 3))]\n   \"\"\n   \"\n {\n-  rtx temp = gen_reg_rtx (Pmode);\n   int units_per_word = (TARGET_32BIT) ? 4 : 8;\n \n   /* Restore the backchain from the first word, sp from the second.  */\n-  emit_move_insn (temp,\n-\t\t  adjust_address_nv (operands[1], Pmode, 0));\n-  emit_move_insn (operands[0],\n-\t\t  adjust_address_nv (operands[1], Pmode, units_per_word));\n-  emit_move_insn (gen_rtx_MEM (Pmode, operands[0]), temp);\n-  DONE;\n+  operands[2] = gen_reg_rtx (Pmode);\n+  operands[3] = gen_reg_rtx (Pmode);\n+  operands[1] = adjust_address_nv (operands[1], Pmode, 0);\n+  operands[4] = adjust_address_nv (operands[1], Pmode, units_per_word);\n+  operands[5] = gen_frame_mem (Pmode, operands[3]);\n+  operands[6] = gen_frame_mem (BLKmode, operands[0]);\n }\")\n \f\n ;; TOC register handling."}]}