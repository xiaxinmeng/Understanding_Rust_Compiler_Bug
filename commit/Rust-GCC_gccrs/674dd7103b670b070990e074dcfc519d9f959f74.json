{"sha": "674dd7103b670b070990e074dcfc519d9f959f74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc0ZGQ3MTAzYjY3MGIwNzA5OTBlMDc0ZGNmYzUxOWQ5Zjk1OWY3NA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-04-29T11:12:17Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-04-29T11:12:17Z"}, "message": "loop-iv.c (canon_condition): Generalize to all types of integer constant.\n\ngcc/\n\t* loop-iv.c (canon_condition): Generalize to all types of integer\n\tconstant.\n\nFrom-SVN: r222571", "tree": {"sha": "b3c61d2f51279ba1a551e5b9599c0b4d2e707612", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3c61d2f51279ba1a551e5b9599c0b4d2e707612"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/674dd7103b670b070990e074dcfc519d9f959f74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674dd7103b670b070990e074dcfc519d9f959f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/674dd7103b670b070990e074dcfc519d9f959f74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/674dd7103b670b070990e074dcfc519d9f959f74/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "917c68f565cad1ff7b324bdf4f24f70c2ec7d4d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917c68f565cad1ff7b324bdf4f24f70c2ec7d4d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917c68f565cad1ff7b324bdf4f24f70c2ec7d4d4"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "baa558ba31763a1b22bd5b8ac90d7bde52a77a83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674dd7103b670b070990e074dcfc519d9f959f74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674dd7103b670b070990e074dcfc519d9f959f74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=674dd7103b670b070990e074dcfc519d9f959f74", "patch": "@@ -1,3 +1,8 @@\n+2015-04-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* loop-iv.c (canon_condition): Generalize to all types of integer\n+\tconstant.\n+\n 2015-04-29  Bernhard Reuther-Fischer  <aldot@gcc.gnu.org>\n \n \t* gimple-walk.c: Prune duplicate or unneeded includes."}, {"sha": "d2cd66e1928fac22783b46af2395daf9aab2bfee", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/674dd7103b670b070990e074dcfc519d9f959f74/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/674dd7103b670b070990e074dcfc519d9f959f74/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=674dd7103b670b070990e074dcfc519d9f959f74", "patch": "@@ -1729,39 +1729,42 @@ canon_condition (rtx cond)\n     mode = GET_MODE (op1);\n   gcc_assert (mode != VOIDmode);\n \n-  if (CONST_INT_P (op1)\n-      && GET_MODE_CLASS (mode) != MODE_CC\n-      && GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT)\n+  if (CONST_SCALAR_INT_P (op1) && GET_MODE_CLASS (mode) != MODE_CC)\n     {\n-      HOST_WIDE_INT const_val = INTVAL (op1);\n-      unsigned HOST_WIDE_INT uconst_val = const_val;\n-      unsigned HOST_WIDE_INT max_val\n-\t= (unsigned HOST_WIDE_INT) GET_MODE_MASK (mode);\n+      rtx_mode_t const_val (op1, mode);\n \n       switch (code)\n \t{\n \tcase LE:\n-\t  if ((unsigned HOST_WIDE_INT) const_val != max_val >> 1)\n-\t    code = LT, op1 = gen_int_mode (const_val + 1, GET_MODE (op0));\n+\t  if (wi::ne_p (const_val, wi::max_value (mode, SIGNED)))\n+\t    {\n+\t      code = LT;\n+\t      op1 = immed_wide_int_const (wi::add (const_val, 1),  mode);\n+\t    }\n \t  break;\n \n-\t/* When cross-compiling, const_val might be sign-extended from\n-\t   BITS_PER_WORD to HOST_BITS_PER_WIDE_INT */\n \tcase GE:\n-\t  if ((HOST_WIDE_INT) (const_val & max_val)\n-\t      != (((HOST_WIDE_INT) 1\n-\t\t   << (GET_MODE_BITSIZE (GET_MODE (op0)) - 1))))\n-\t    code = GT, op1 = gen_int_mode (const_val - 1, mode);\n+\t  if (wi::ne_p (const_val, wi::min_value (mode, SIGNED)))\n+\t    {\n+\t      code = GT;\n+\t      op1 = immed_wide_int_const (wi::sub (const_val, 1), mode);\n+\t    }\n \t  break;\n \n \tcase LEU:\n-\t  if (uconst_val < max_val)\n-\t    code = LTU, op1 = gen_int_mode (uconst_val + 1, mode);\n+\t  if (wi::ne_p (const_val, -1))\n+\t    {\n+\t      code = LTU;\n+\t      op1 = immed_wide_int_const (wi::add (const_val, 1), mode);\n+\t    }\n \t  break;\n \n \tcase GEU:\n-\t  if (uconst_val != 0)\n-\t    code = GTU, op1 = gen_int_mode (uconst_val - 1, mode);\n+\t  if (wi::ne_p (const_val, 0))\n+\t    {\n+\t      code = GTU;\n+\t      op1 = immed_wide_int_const (wi::sub (const_val, 1), mode);\n+\t    }\n \t  break;\n \n \tdefault:"}]}