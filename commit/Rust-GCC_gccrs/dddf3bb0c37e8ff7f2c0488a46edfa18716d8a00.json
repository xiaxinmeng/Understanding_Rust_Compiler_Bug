{"sha": "dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRkZjNiYjBjMzdlOGZmN2YyYzA0ODhhNDZlZGZhMTg3MTZkOGEwMA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-05T12:05:28Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-06T17:43:30Z"}, "message": "d: Merge upstream dmd 5cc71ff83, druntime 1134b710\n\nD front-end changes:\n\n - Fix ICEs that occurred when using opaque enums.\n\n - Update `pragma(printf)' checking code to work on 16-bit targets.\n\nPhobos change:\n\n - Don't compile in argTypes code on AArch64\n\nReviewed-on: https://github.com/dlang/dmd/pull/12378\n\t     https://github.com/dlang/druntime/pull/3431\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 5cc71ff83.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/MERGE: Merge upstream druntime 1134b710.", "tree": {"sha": "eced0751b8257b387c90eb2d1a0ac72a779a7d8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eced0751b8257b387c90eb2d1a0ac72a779a7d8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "406f58e1e38e92e4b881f3666b596843da308783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/406f58e1e38e92e4b881f3666b596843da308783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/406f58e1e38e92e4b881f3666b596843da308783"}], "stats": {"total": 382, "additions": 292, "deletions": 90}, "files": [{"sha": "a89184498c3e574d8b842c56522c50cfe77a11b1", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00", "patch": "@@ -1,4 +1,4 @@\n-3b808e838bb00f527eb4ed5281cd985756237b8f\n+5cc71ff830fcfba218152360014298550be9180e\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "a4a97c9bf50d54162960bbdf58def9238ca15fe4", "filename": "gcc/d/dmd/chkformat.c", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Fd%2Fdmd%2Fchkformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Fd%2Fdmd%2Fchkformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fchkformat.c?ref=dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00", "patch": "@@ -610,7 +610,7 @@ bool checkPrintfFormat(const Loc &loc, const char *format, Expressions &args, bo\n         Type *t = e->type->toBasetype();\n         Type *tnext = t->nextOf();\n         const unsigned c_longsize = target.c.longsize;\n-        const bool is64bit = global.params.is64bit;\n+        const unsigned ptrsize = target.ptrsize;\n \n         // Types which are promoted to int are allowed.\n         // Spec: C99 6.5.2.2.7\n@@ -619,46 +619,56 @@ bool checkPrintfFormat(const Loc &loc, const char *format, Expressions &args, bo\n             case Format_u:      // unsigned int\n             case Format_d:      // int\n                 if (t->ty != Tint32 && t->ty != Tuns32)\n-                    errorPrintfFormat(NULL, slice, e, \"int\", t);\n+                    errorPrintfFormat(NULL, slice, e, fmt == Format_u ? \"uint\" : \"int\", t);\n                 break;\n \n             case Format_hhu:    // unsigned char\n             case Format_hhd:    // signed char\n                 if (t->ty != Tint32 && t->ty != Tuns32 && t->ty != Tint8 && t->ty != Tuns8)\n-                    errorPrintfFormat(NULL, slice, e, \"byte\", t);\n+                    errorPrintfFormat(NULL, slice, e, fmt == Format_hhu ? \"ubyte\" : \"byte\", t);\n                 break;\n \n             case Format_hu:     // unsigned short int\n             case Format_hd:     // short int\n                 if (t->ty != Tint32 && t->ty != Tuns32 && t->ty != Tint16 && t->ty != Tuns16)\n-                    errorPrintfFormat(NULL, slice, e, \"short\", t);\n+                    errorPrintfFormat(NULL, slice, e, fmt == Format_hu ? \"ushort\" : \"short\", t);\n                 break;\n \n             case Format_lu:     // unsigned long int\n             case Format_ld:     // long int\n                 if (!(t->isintegral() && t->size() == c_longsize))\n-                    errorPrintfFormat(NULL, slice, e, (c_longsize == 4 ? \"int\" : \"long\"), t);\n+                {\n+                    if (fmt == Format_lu)\n+                        errorPrintfFormat(NULL, slice, e, (c_longsize == 4 ? \"uint\" : \"ulong\"), t);\n+                    else\n+                        errorPrintfFormat(NULL, slice, e, (c_longsize == 4 ? \"int\" : \"long\"), t);\n+                }\n                 break;\n \n             case Format_llu:    // unsigned long long int\n             case Format_lld:    // long long int\n                 if (t->ty != Tint64 && t->ty != Tuns64)\n-                    errorPrintfFormat(NULL, slice, e, \"long\", t);\n+                    errorPrintfFormat(NULL, slice, e, fmt == Format_llu ? \"ulong\" : \"long\", t);\n                 break;\n \n             case Format_ju:     // uintmax_t\n             case Format_jd:     // intmax_t\n                 if (t->ty != Tint64 && t->ty != Tuns64)\n-                    errorPrintfFormat(NULL, slice, e, \"core.stdc.stdint.intmax_t\", t);\n+                {\n+                    if (fmt == Format_ju)\n+                        errorPrintfFormat(NULL, slice, e, \"core.stdc.stdint.uintmax_t\", t);\n+                    else\n+                        errorPrintfFormat(NULL, slice, e, \"core.stdc.stdint.intmax_t\", t);\n+                }\n                 break;\n \n             case Format_zd:     // size_t\n-                if (!(t->isintegral() && t->size() == (is64bit ? 8 : 4)))\n+                if (!(t->isintegral() && t->size() == ptrsize))\n                     errorPrintfFormat(NULL, slice, e, \"size_t\", t);\n                 break;\n \n             case Format_td:     // ptrdiff_t\n-                if (!(t->isintegral() && t->size() == (is64bit ? 8 : 4)))\n+                if (!(t->isintegral() && t->size() == ptrsize))\n                     errorPrintfFormat(NULL, slice, e, \"ptrdiff_t\", t);\n                 break;\n \n@@ -685,7 +695,7 @@ bool checkPrintfFormat(const Loc &loc, const char *format, Expressions &args, bo\n                 break;\n \n             case Format_ln:     // pointer to long int\n-                if (!(t->ty == Tpointer && tnext->isintegral() && tnext->size() == c_longsize))\n+                if (!(t->ty == Tpointer && tnext->isintegral() && !tnext->isunsigned() && tnext->size() == c_longsize))\n                     errorPrintfFormat(NULL, slice, e, (c_longsize == 4 ? \"int*\" : \"long*\"), t);\n                 break;\n \n@@ -710,12 +720,12 @@ bool checkPrintfFormat(const Loc &loc, const char *format, Expressions &args, bo\n                 break;\n \n             case Format_zn:     // pointer to size_t\n-                if (!(t->ty == Tpointer && tnext->ty == (is64bit ? Tuns64 : Tuns32)))\n+                if (!(t->ty == Tpointer && tnext->isintegral() && tnext->isunsigned() && tnext->size() == ptrsize))\n                     errorPrintfFormat(NULL, slice, e, \"size_t*\", t);\n                 break;\n \n             case Format_tn:     // pointer to ptrdiff_t\n-                if (!(t->ty == Tpointer && tnext->ty == (is64bit ? Tint64 : Tint32)))\n+                if (!(t->ty == Tpointer && tnext->isintegral() && !tnext->isunsigned() && tnext->size() == ptrsize))\n                     errorPrintfFormat(NULL, slice, e, \"ptrdiff_t*\", t);\n                 break;\n \n@@ -845,7 +855,7 @@ bool checkScanfFormat(const Loc &loc, const char *format, Expressions &args, boo\n         Type *t = e->type->toBasetype();\n         Type *tnext = t->nextOf();\n         const unsigned c_longsize = target.c.longsize;\n-        const bool is64bit = global.params.is64bit;\n+        const unsigned ptrsize = target.ptrsize;\n \n         switch (fmt)\n         {\n@@ -887,13 +897,13 @@ bool checkScanfFormat(const Loc &loc, const char *format, Expressions &args, boo\n \n             case Format_zn:\n             case Format_zd:     // pointer to size_t\n-                if (!(t->ty == Tpointer && tnext->ty == (is64bit ? Tuns64 : Tuns32)))\n+                if (!(t->ty == Tpointer && tnext->isintegral() && tnext->isunsigned() && tnext->size() == ptrsize))\n                     errorScanfFormat(NULL, slice, e, \"size_t*\", t);\n                 break;\n \n             case Format_tn:\n             case Format_td:     // pointer to ptrdiff_t\n-                if (!(t->ty == Tpointer && tnext->ty == (is64bit ? Tint64 : Tint32)))\n+                if (!(t->ty == Tpointer && tnext->isintegral() && !tnext->isunsigned() && tnext->size() == ptrsize))\n                     errorScanfFormat(NULL, slice, e, \"ptrdiff_t*\", t);\n                 break;\n \n@@ -913,7 +923,7 @@ bool checkScanfFormat(const Loc &loc, const char *format, Expressions &args, boo\n                 break;\n \n             case Format_lu:     // pointer to unsigned long int\n-                if (!(t->ty == Tpointer && tnext->ty == (is64bit ? Tuns64 : Tuns32)))\n+                if (!(t->ty == Tpointer && tnext->isintegral() && tnext->isunsigned() && tnext->size() == c_longsize))\n                     errorScanfFormat(NULL, slice, e, (c_longsize == 4 ? \"uint*\" : \"ulong*\"), t);\n                 break;\n \n@@ -923,7 +933,7 @@ bool checkScanfFormat(const Loc &loc, const char *format, Expressions &args, boo\n                 break;\n \n             case Format_ju:     // pointer to uintmax_t\n-                if (!(t->ty == Tpointer && tnext->ty == (is64bit ? Tuns64 : Tuns32)))\n+                if (!(t->ty == Tpointer && tnext->ty == Tuns64))\n                     errorScanfFormat(NULL, slice, e, \"ulong*\", t);\n                 break;\n "}, {"sha": "b00eaa02f9dd873c416cc7a81b63121cd148e5b1", "filename": "gcc/d/dmd/denum.c", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Fd%2Fdmd%2Fdenum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Fd%2Fdmd%2Fdenum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdenum.c?ref=dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00", "patch": "@@ -122,7 +122,7 @@ Expression *EnumDeclaration::getMaxMinValue(Loc loc, Identifier *id)\n         dsymbolSemantic(this, _scope);\n     if (errors)\n         goto Lerrors;\n-    if (semanticRun == PASSinit || !members)\n+    if (!members)\n     {\n         if (isSpecial())\n         {\n@@ -131,7 +131,7 @@ Expression *EnumDeclaration::getMaxMinValue(Loc loc, Identifier *id)\n             return memtype->getProperty(loc, id, 0);\n         }\n \n-        error(\"is forward referenced looking for .%s\", id->toChars());\n+        error(loc, \"is opaque and has no `.%s`\", id->toChars());\n         goto Lerrors;\n     }\n     if (!(memtype && memtype->isintegral()))\n@@ -148,12 +148,21 @@ Expression *EnumDeclaration::getMaxMinValue(Loc loc, Identifier *id)\n         if (!em)\n             continue;\n         if (em->errors)\n-            goto Lerrors;\n+        {\n+            errors = true;\n+            continue;\n+        }\n+\n+        if (em->semanticRun < PASSsemanticdone)\n+        {\n+            em->error(\"is forward referenced looking for `.%s`\", id->toChars());\n+            errors = true;\n+            continue;\n+        }\n \n-        Expression *e = em->value();\n         if (first)\n         {\n-            *pval = e;\n+            *pval = em->value();\n             first = false;\n         }\n         else\n@@ -168,15 +177,23 @@ Expression *EnumDeclaration::getMaxMinValue(Loc loc, Identifier *id)\n              *   if (e > maxval)\n              *      maxval = e;\n              */\n+            Expression *e = em->value();\n             Expression *ec = new CmpExp(id == Id::max ? TOKgt : TOKlt, em->loc, e, *pval);\n             inuse++;\n             ec = expressionSemantic(ec, em->_scope);\n             inuse--;\n             ec = ec->ctfeInterpret();\n+            if (ec->op == TOKerror)\n+            {\n+                errors = true;\n+                continue;\n+            }\n             if (ec->toInteger())\n                 *pval = e;\n         }\n     }\n+    if (errors)\n+        goto Lerrors;\n Ldone:\n   {\n     Expression *e = *pval;\n@@ -213,16 +230,17 @@ Expression *EnumDeclaration::getDefaultValue(Loc loc)\n         dsymbolSemantic(this, _scope);\n     if (errors)\n         goto Lerrors;\n-    if (semanticRun == PASSinit || !members)\n+    if (!members)\n     {\n         if (isSpecial())\n         {\n             /* Allow these special enums to not need a member list\n              */\n-            return memtype->defaultInit(loc);\n+            defaultval = memtype->defaultInit(loc);\n+            return defaultval;\n         }\n \n-        error(loc, \"forward reference of %s.init\", toChars());\n+        error(loc, \"is opaque and has no default initializer\");\n         goto Lerrors;\n     }\n \n@@ -231,6 +249,12 @@ Expression *EnumDeclaration::getDefaultValue(Loc loc)\n         EnumMember *em = (*members)[i]->isEnumMember();\n         if (em)\n         {\n+            if (em->semanticRun < PASSsemanticdone)\n+            {\n+                error(loc, \"forward reference of `%s.init`\", toChars());\n+                goto Lerrors;\n+            }\n+\n             defaultval = em->value();\n             return defaultval;\n         }\n@@ -252,15 +276,10 @@ Type *EnumDeclaration::getMemtype(Loc loc)\n          */\n         if (memtype)\n             memtype = typeSemantic(memtype, loc, _scope);\n-        else\n-        {\n-            if (!isAnonymous() && members)\n-                memtype = Type::tint32;\n-        }\n     }\n     if (!memtype)\n     {\n-        if (!isAnonymous() && members)\n+        if (!isAnonymous() && (members || semanticRun >= PASSsemanticdone))\n             memtype = Type::tint32;\n         else\n         {\n@@ -307,13 +326,6 @@ Dsymbol *EnumDeclaration::search(const Loc &loc, Identifier *ident, int flags)\n         dsymbolSemantic(this, _scope);\n     }\n \n-    if (!members || !symtab || _scope)\n-    {\n-        error(\"is forward referenced when looking for `%s`\", ident->toChars());\n-        //*(char*)0=0;\n-        return NULL;\n-    }\n-\n     Dsymbol *s = ScopeDsymbol::search(loc, ident, flags);\n     return s;\n }"}, {"sha": "7e1a85846fd8eb5d4d5d5c93e9da704a4fd24f61", "filename": "gcc/d/dmd/dsymbolsem.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Fd%2Fdmd%2Fdsymbolsem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Fd%2Fdmd%2Fdsymbolsem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbolsem.c?ref=dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00", "patch": "@@ -415,7 +415,19 @@ class DsymbolSemanticVisitor : public Visitor\n             TypeStruct *ts = (TypeStruct *)tb;\n             if (!ts->sym->members)\n             {\n-                dsym->error(\"no definition of struct %s\", ts->toChars());\n+                dsym->error(\"no definition of struct `%s`\", ts->toChars());\n+\n+                // Explain why the definition is required when it's part of another type\n+                if (!dsym->type->isTypeStruct())\n+                {\n+                    // Prefer Loc of the dependant type\n+                    Dsymbol *s = dsym->type->toDsymbol(sc);\n+                    Loc loc = s ? s->loc : dsym->loc;\n+                    errorSupplemental(loc, \"required by type `%s`\", dsym->type->toChars());\n+                }\n+\n+                // Flag variable as error to avoid invalid error messages due to unknown size\n+                dsym->type = Type::terror;\n             }\n         }\n         if ((dsym->storage_class & STCauto) && !inferred)\n@@ -1737,6 +1749,9 @@ class DsymbolSemanticVisitor : public Visitor\n                     ed->semanticRun = PASSinit;\n                     return;\n                 }\n+                else\n+                    // Ensure that semantic is run to detect. e.g. invalid forward references\n+                    dsymbolSemantic(sym, sc);\n             }\n             if (ed->memtype->ty == Tvoid)\n             {"}, {"sha": "57aa244b8b87fcfebddc848277709e39ff8b9754", "filename": "gcc/d/dmd/mtype.c", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Fd%2Fdmd%2Fmtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Fd%2Fdmd%2Fmtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fmtype.c?ref=dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00", "patch": "@@ -6806,23 +6806,6 @@ Expression *TypeEnum::dotExp(Scope *sc, Expression *e, Identifier *ident, int fl\n \n     if (sym->semanticRun < PASSsemanticdone)\n         dsymbolSemantic(sym, NULL);\n-    if (!sym->members)\n-    {\n-        if (sym->isSpecial())\n-        {\n-            /* Special enums forward to the base type\n-             */\n-            e = sym->memtype->dotExp(sc, e, ident, flag);\n-        }\n-        else if (!(flag & 1))\n-        {\n-            sym->error(\"is forward referenced when looking for `%s`\", ident->toChars());\n-            e = new ErrorExp();\n-        }\n-        else\n-            e = NULL;\n-        return e;\n-    }\n \n     Dsymbol *s = sym->search(e->loc, ident);\n     if (!s)"}, {"sha": "cf55833a38993e900d39057c8ae1167feb47366f", "filename": "gcc/testsuite/gdc.test/compilable/ice10770.d", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fice10770.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fice10770.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fice10770.d?ref=dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00", "patch": "@@ -0,0 +1,5 @@\n+enum E1 : int;\n+static assert(is(E1 e == enum) && is(e == int));\n+\n+enum E2;\n+static assert(is(E2 e == enum));"}, {"sha": "e9ed2415d7ce13895b9172baf58a34412de3b371", "filename": "gcc/testsuite/gdc.test/fail_compilation/chkformat.d", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fchkformat.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fchkformat.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fchkformat.d?ref=dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00", "patch": "@@ -36,7 +36,7 @@ fail_compilation/chkformat.d(214): Deprecation: argument `0` for format specific\n fail_compilation/chkformat.d(215): Deprecation: argument `0` for format specification `\"%hhu\"` must be `ubyte*`, not `int`\n fail_compilation/chkformat.d(216): Deprecation: argument `0` for format specification `\"%hu\"` must be `ushort*`, not `int`\n fail_compilation/chkformat.d(218): Deprecation: argument `0` for format specification `\"%llu\"` must be `ulong*`, not `int`\n-fail_compilation/chkformat.d(219): Deprecation: argument `0` for format specification `\"%ju\"` must be `ulong*`, not `int`\n+fail_compilation/chkformat.d(219): Deprecation: argument `0` for format specification `\"%ju\"` must be `core.stdc.stdint.uintmax_t*`, not `int`\n fail_compilation/chkformat.d(220): Deprecation: argument `0` for format specification `\"%zu\"` must be `size_t*`, not `int`\n fail_compilation/chkformat.d(221): Deprecation: argument `0` for format specification `\"%tu\"` must be `ptrdiff_t*`, not `int`\n fail_compilation/chkformat.d(222): Deprecation: argument `8.0L` for format specification `\"%g\"` must be `float*`, not `real`\n@@ -137,3 +137,35 @@ void test302() { va_list vargs; vscanf(\"%Q\", vargs); }\n //void test() { vscanf(); }\n //void test() { vfscanf(); }\n //void test() { vsscanf(); }\n+\n+/* TEST_OUTPUT:\n+---\n+fail_compilation/chkformat.d(401): Deprecation: argument `p` for format specification `\"%u\"` must be `uint`, not `char*`\n+fail_compilation/chkformat.d(402): Deprecation: argument `p` for format specification `\"%d\"` must be `int`, not `char*`\n+fail_compilation/chkformat.d(403): Deprecation: argument `p` for format specification `\"%hhu\"` must be `ubyte`, not `char*`\n+fail_compilation/chkformat.d(404): Deprecation: argument `p` for format specification `\"%hhd\"` must be `byte`, not `char*`\n+fail_compilation/chkformat.d(405): Deprecation: argument `p` for format specification `\"%hu\"` must be `ushort`, not `char*`\n+fail_compilation/chkformat.d(406): Deprecation: argument `p` for format specification `\"%hd\"` must be `short`, not `char*`\n+fail_compilation/chkformat.d(407): Deprecation: argument `p` for format specification `\"%lu\"` must be `$?:windows=uint|32=uint|64=ulong$`, not `char*`\n+fail_compilation/chkformat.d(408): Deprecation: argument `p` for format specification `\"%ld\"` must be `$?:windows=int|32=int|64=long$`, not `char*`\n+fail_compilation/chkformat.d(409): Deprecation: argument `p` for format specification `\"%llu\"` must be `ulong`, not `char*`\n+fail_compilation/chkformat.d(410): Deprecation: argument `p` for format specification `\"%lld\"` must be `long`, not `char*`\n+fail_compilation/chkformat.d(411): Deprecation: argument `p` for format specification `\"%ju\"` must be `core.stdc.stdint.uintmax_t`, not `char*`\n+fail_compilation/chkformat.d(412): Deprecation: argument `p` for format specification `\"%jd\"` must be `core.stdc.stdint.intmax_t`, not `char*`\n+---\n+*/\n+\n+#line 400\n+\n+void test401() { char* p; printf(\"%u\", p); }\n+void test402() { char* p; printf(\"%d\", p); }\n+void test403() { char* p; printf(\"%hhu\", p); }\n+void test404() { char* p; printf(\"%hhd\", p); }\n+void test405() { char* p; printf(\"%hu\", p); }\n+void test406() { char* p; printf(\"%hd\", p); }\n+void test407() { char* p; printf(\"%lu\", p); }\n+void test408() { char* p; printf(\"%ld\", p); }\n+void test409() { char* p; printf(\"%llu\", p); }\n+void test410() { char* p; printf(\"%lld\", p); }\n+void test411() { char* p; printf(\"%ju\", p); }\n+void test412() { char* p; printf(\"%jd\", p); }"}, {"sha": "ab6ba3085502971222e405d4c8ac41a1f62deb94", "filename": "gcc/testsuite/gdc.test/fail_compilation/enum_init.d", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fenum_init.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fenum_init.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fenum_init.d?ref=dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00", "patch": "@@ -0,0 +1,171 @@\n+/*\n+https://issues.dlang.org/show_bug.cgi?id=8511\n+\n+TEST_OUTPUT:\n+---\n+fail_compilation/enum_init.d(5): Error: type `SQRTMAX` has no value\n+---\n+*/\n+#line 1\n+\n+real hypot()\n+{\n+    enum SQRTMAX;\n+    SQRTMAX/2;\n+}\n+\n+/*\n+https://issues.dlang.org/show_bug.cgi?id=21785\n+\n+TEST_OUTPUT:\n+---\n+fail_compilation/enum_init.d(106): Error: enum `enum_init.NoBase` is opaque and has no default initializer\n+---\n+*/\n+#line 100\n+\n+enum NoBase;\n+\n+void fooNB()\n+{\n+\tNoBase nbv = void;\n+\tNoBase nb;\n+}\n+\n+/*\n+https://issues.dlang.org/show_bug.cgi?id=21785\n+\n+TEST_OUTPUT:\n+---\n+fail_compilation/enum_init.d(206): Error: enum `enum_init.Xobj` is opaque and has no default initializer\n+---\n+*/\n+#line 200\n+\n+enum Xobj : void*;\n+\n+void main()\n+{\n+\tXobj vv = void;\n+\tXobj var;\n+}\n+\n+\n+/*\n+https://issues.dlang.org/show_bug.cgi?id=21785\n+\n+TEST_OUTPUT:\n+---\n+fail_compilation/enum_init.d(306): Error: variable `enum_init.fooOB.ob` no definition of struct `S`\n+fail_compilation/enum_init.d(302):        required by type `OpaqueBase`\n+---\n+*/\n+#line 300\n+\n+struct S;\n+enum OpaqueBase : S;\n+\n+void fooOB()\n+{\n+\tOpaqueBase ob;\n+}\n+\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/enum_init.d(405): Error: enum `enum_init.forwardRef.Foo` forward reference of `Foo.init`\n+---\n+*/\n+#line 400\n+\n+void forwardRef()\n+{\n+    enum Foo\n+    {\n+        a = Foo.init\n+    }\n+}\n+\n+/*\n+https://issues.dlang.org/show_bug.cgi?id=21792\n+\n+TEST_OUTPUT:\n+---\n+fail_compilation/enum_init.d(503): Error: circular reference to enum base type `Bar`\n+---\n+*/\n+#line 500\n+\n+void forwardRef2()\n+{\n+    enum Bar : Bar\n+    {\n+        a\n+    }\n+}\n+\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/enum_init.d(606): Error: enum member `enum_init.forwardRef3.Foo.b` is forward referenced looking for `.min`\n+fail_compilation/enum_init.d(607): Error: enum member `enum_init.forwardRef3.Foo.c` is forward referenced looking for `.min`\n+---\n+*/\n+#line 600\n+\n+void forwardRef3()\n+{\n+    enum Foo\n+    {\n+        a,\n+        b = Foo.min,\n+        c\n+    }\n+}\n+\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/enum_init.d(711): Error: circular reference to enum base type `int[Bar.sizeof]`\n+---\n+*/\n+#line 700\n+\n+void forwardRef4()\n+{\n+    enum Foo\n+    {\n+        a = Foo.sizeof,\n+        c\n+    }\n+    // pragma(msg, typeof(Foo.sizeof));\n+    // static assert(is(Foo Base == enum) && is(Base == int));\n+\n+    enum Bar : int[Bar.sizeof]\n+    {\n+        a\n+    }\n+}\n+\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/enum_init.d(809): Error: enum `enum_init.opaqueProperties.Foo` is opaque and has no default initializer\n+fail_compilation/enum_init.d(810): Error: enum `enum_init.opaqueProperties.Foo` is opaque and has no `.min`\n+fail_compilation/enum_init.d(811): Error: enum `enum_init.opaqueProperties.Foo` is opaque and has no `.max`\n+---\n+*/\n+#line 800\n+\n+void opaqueProperties()\n+{\n+    enum Foo;\n+\n+    // Valid\n+    enum size = Foo.sizeof;\n+    enum s = Foo.mangleof;\n+\n+    Foo f = Foo.init;\n+    int min = Foo.min;\n+    int max = Foo.max;\n+}"}, {"sha": "3e379c3fbf0dbb570c07708eb6063c405553b10e", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail109.d", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail109.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail109.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail109.d?ref=dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00", "patch": "@@ -53,10 +53,10 @@ enum B\n /* Bugzilla 11849\n TEST_OUTPUT:\n ---\n-fail_compilation/fail109.d(72): Error: enum fail109.RegValueType1a recursive definition of `.max` property\n-fail_compilation/fail109.d(79): Error: enum fail109.RegValueType1b recursive definition of `.max` property\n-fail_compilation/fail109.d(84): Error: enum fail109.RegValueType2a recursive definition of `.min` property\n-fail_compilation/fail109.d(91): Error: enum fail109.RegValueType2b recursive definition of `.min` property\n+fail_compilation/fail109.d(72): Error: enum member `fail109.RegValueType1a.Unknown` is forward referenced looking for `.max`\n+fail_compilation/fail109.d(79): Error: enum member `fail109.RegValueType1b.Unknown` is forward referenced looking for `.max`\n+fail_compilation/fail109.d(84): Error: enum member `fail109.RegValueType2a.Unknown` is forward referenced looking for `.min`\n+fail_compilation/fail109.d(91): Error: enum member `fail109.RegValueType2b.Unknown` is forward referenced looking for `.min`\n ---\n */\n "}, {"sha": "5b0659a6b018fd250484508b78a4ea864bffb86d", "filename": "gcc/testsuite/gdc.test/fail_compilation/ice10770.d", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406f58e1e38e92e4b881f3666b596843da308783/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice10770.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406f58e1e38e92e4b881f3666b596843da308783/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice10770.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice10770.d?ref=406f58e1e38e92e4b881f3666b596843da308783", "patch": "@@ -1,13 +0,0 @@\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/ice10770.d(13): Error: enum ice10770.E2 is forward referenced looking for base type\n-fail_compilation/ice10770.d(13):        while evaluating: `static assert(is(E2 e == enum))`\n----\n-*/\n-\n-enum E1 : int;\n-static assert(is(E1 e == enum) && is(e == int));\n-\n-enum E2;\n-static assert(is(E2 e == enum));"}, {"sha": "873f8965ec27a7801446cd03b5c2245e32c87681", "filename": "gcc/testsuite/gdc.test/fail_compilation/ice8511.d", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/406f58e1e38e92e4b881f3666b596843da308783/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice8511.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/406f58e1e38e92e4b881f3666b596843da308783/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice8511.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice8511.d?ref=406f58e1e38e92e4b881f3666b596843da308783", "patch": "@@ -1,13 +0,0 @@\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/ice8511.d(11): Error: enum ice8511.hypot.SQRTMAX is forward referenced looking for base type\n-fail_compilation/ice8511.d(12): Error: incompatible types for ((SQRTMAX) / (2)): cannot use '/' with types\n----\n-*/\n-\n-real hypot()\n-{\n-    enum SQRTMAX;\n-    SQRTMAX/2;\n-}"}, {"sha": "d839a08c19be713c7cd2d0eb0761331d93a594ac", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00", "patch": "@@ -1,4 +1,4 @@\n-483bc12977af3c1288fd52e7b4fa14b716896c5a\n+1134b71039881464e9bf021836d82796b3a1fcfc\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "e96d1c4856348a71026721d647b625a053a19b39", "filename": "libphobos/libdruntime/object.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/libphobos%2Flibdruntime%2Fobject.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00/libphobos%2Flibdruntime%2Fobject.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fobject.d?ref=dddf3bb0c37e8ff7f2c0488a46edfa18716d8a00", "patch": "@@ -42,7 +42,7 @@ else version (X86_64)\n     else version (Windows) { /* no need for Win64 ABI */ }\n     else version = WithArgTypes;\n }\n-version (AArch64)\n+else version (AArch64)\n {\n     // Apple uses a trivial varargs implementation\n     version (OSX) {}"}]}