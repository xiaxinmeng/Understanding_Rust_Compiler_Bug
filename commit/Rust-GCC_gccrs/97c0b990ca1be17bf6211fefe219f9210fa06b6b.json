{"sha": "97c0b990ca1be17bf6211fefe219f9210fa06b6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdjMGI5OTBjYTFiZTE3YmY2MjExZmVmZTIxOWY5MjEwZmEwNmI2Yg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-01T13:35:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-01T13:35:58Z"}, "message": "[Ada] Unnesting: improve handling of private and incomplete types\n\n2019-07-01  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_unst.adb (Visit_Node, Check_Static_Type): Improve the\n\thandling of private and incomplete types whose full view is an\n\taccess type, to detect additional uplevel references in dynamic\n\tbounds. This is relevant to N_Free_Statement among others that\n\tmanipulate types whose full viww may be an access type.\n\nFrom-SVN: r272870", "tree": {"sha": "718fc8da9021515d980c685912da439fb9c81d73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/718fc8da9021515d980c685912da439fb9c81d73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97c0b990ca1be17bf6211fefe219f9210fa06b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c0b990ca1be17bf6211fefe219f9210fa06b6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97c0b990ca1be17bf6211fefe219f9210fa06b6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c0b990ca1be17bf6211fefe219f9210fa06b6b/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76fd94165a00ca6371c557e855cdd47a3b823da8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76fd94165a00ca6371c557e855cdd47a3b823da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76fd94165a00ca6371c557e855cdd47a3b823da8"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "25a9ef9769337f9a8b5f1dc8ccff439f5c919803", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c0b990ca1be17bf6211fefe219f9210fa06b6b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c0b990ca1be17bf6211fefe219f9210fa06b6b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=97c0b990ca1be17bf6211fefe219f9210fa06b6b", "patch": "@@ -1,3 +1,11 @@\n+2019-07-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_unst.adb (Visit_Node, Check_Static_Type): Improve the\n+\thandling of private and incomplete types whose full view is an\n+\taccess type, to detect additional uplevel references in dynamic\n+\tbounds. This is relevant to N_Free_Statement among others that\n+\tmanipulate types whose full viww may be an access type.\n+\n 2019-07-01  Pat Rogers  <rogers@adacore.com>\n \n \t* doc/gnat_rm/representation_clauses_and_pragmas.rst: Correct"}, {"sha": "f7f488a4e914b966af3bc922c73117ab7c305789", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c0b990ca1be17bf6211fefe219f9210fa06b6b/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c0b990ca1be17bf6211fefe219f9210fa06b6b/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=97c0b990ca1be17bf6211fefe219f9210fa06b6b", "patch": "@@ -463,7 +463,10 @@ package body Exp_Unst is\n             Callee : Entity_Id;\n \n             procedure Check_Static_Type\n-              (T : Entity_Id; N : Node_Id; DT : in out Boolean);\n+              (T  : Entity_Id;\n+               N  : Node_Id;\n+               DT : in out Boolean;\n+               Check_Designated : Boolean := False);\n             --  Given a type T, checks if it is a static type defined as a type\n             --  with no dynamic bounds in sight. If so, the only action is to\n             --  set Is_Static_Type True for T. If T is not a static type, then\n@@ -473,6 +476,9 @@ package body Exp_Unst is\n             --  node that will need to be replaced. If not specified, it means\n             --  we can't do a replacement because the bound is implicit.\n \n+            --  If Check_Designated is True and T or its full view is an access\n+            --  type, check whether the designated type has dynamic bounds.\n+\n             procedure Note_Uplevel_Ref\n               (E      : Entity_Id;\n                N      : Node_Id;\n@@ -491,7 +497,10 @@ package body Exp_Unst is\n             -----------------------\n \n             procedure Check_Static_Type\n-              (T : Entity_Id; N : Node_Id; DT : in out Boolean)\n+              (T  : Entity_Id;\n+               N  : Node_Id;\n+               DT : in out Boolean;\n+               Check_Designated : Boolean := False)\n             is\n                procedure Note_Uplevel_Bound (N : Node_Id; Ref : Node_Id);\n                --  N is the bound of a dynamic type. This procedure notes that\n@@ -601,7 +610,7 @@ package body Exp_Unst is\n             begin\n                --  If already marked static, immediate return\n \n-               if Is_Static_Type (T) then\n+               if Is_Static_Type (T) and then not Check_Designated then\n                   return;\n                end if;\n \n@@ -684,13 +693,20 @@ package body Exp_Unst is\n \n                --  For private type, examine whether full view is static\n \n-               elsif Is_Private_Type (T) and then Present (Full_View (T)) then\n-                  Check_Static_Type (Full_View (T), N, DT);\n+               elsif Is_Incomplete_Or_Private_Type (T)\n+                 and then Present (Full_View (T))\n+               then\n+                  Check_Static_Type (Full_View (T), N, DT, Check_Designated);\n \n                   if Is_Static_Type (Full_View (T)) then\n                      Set_Is_Static_Type (T);\n                   end if;\n \n+               --  For access types, check designated type when required.\n+\n+               elsif Is_Access_Type (T) and then Check_Designated then\n+                  Check_Static_Type (Directly_Designated_Type (T), N, DT);\n+\n                --  For now, ignore other types\n \n                else\n@@ -935,7 +951,11 @@ package body Exp_Unst is\n                      declare\n                         DT : Boolean := False;\n                      begin\n-                        Check_Static_Type (Etype (Expression (N)), Empty,  DT);\n+                        Check_Static_Type\n+                          (Etype (Expression (N)),\n+                           Empty,\n+                           DT,\n+                           Check_Designated => Nkind (N) = N_Free_Statement);\n                      end;\n                   end if;\n "}]}