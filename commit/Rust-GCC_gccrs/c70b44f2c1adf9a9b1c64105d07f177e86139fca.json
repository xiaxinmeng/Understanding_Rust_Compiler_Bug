{"sha": "c70b44f2c1adf9a9b1c64105d07f177e86139fca", "node_id": "C_kwDOANBUbNoAKGM3MGI0NGYyYzFhZGY5YTliMWM2NDEwNWQwN2YxNzdlODYxMzlmY2E", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-18T14:51:52Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-18T14:51:52Z"}, "message": "libstdc++: Implement ranges::stride_view from P1899R3\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (stride_view): Define.\n\t(stride_view::_Iterator): Define.\n\t(views::__detail::__can_stride_view): Define.\n\t(views::_Stride, views::stride): Define.\n\t* testsuite/std/ranges/adaptors/stride/1.cc: New test.", "tree": {"sha": "f52dbb68904ac753d239e8852a2824d42f5e36e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f52dbb68904ac753d239e8852a2824d42f5e36e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c70b44f2c1adf9a9b1c64105d07f177e86139fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c70b44f2c1adf9a9b1c64105d07f177e86139fca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c70b44f2c1adf9a9b1c64105d07f177e86139fca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c70b44f2c1adf9a9b1c64105d07f177e86139fca/comments", "author": null, "committer": null, "parents": [{"sha": "3b3083a598ca3f4b6203284e01ed39ab6ff0844f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b3083a598ca3f4b6203284e01ed39ab6ff0844f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b3083a598ca3f4b6203284e01ed39ab6ff0844f"}], "stats": {"total": 424, "additions": 424, "deletions": 0}, "files": [{"sha": "d113cf19dc7b146be3b6b9e66125dd543ad6fb97", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 351, "deletions": 0, "changes": 351, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70b44f2c1adf9a9b1c64105d07f177e86139fca/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70b44f2c1adf9a9b1c64105d07f177e86139fca/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=c70b44f2c1adf9a9b1c64105d07f177e86139fca", "patch": "@@ -7566,6 +7566,357 @@ namespace views::__adaptor\n \n     inline constexpr _Repeat repeat;\n   }\n+\n+  template<input_range _Vp>\n+    requires view<_Vp>\n+  class stride_view : public view_interface<stride_view<_Vp>>\n+  {\n+    _Vp _M_base;\n+    range_difference_t<_Vp> _M_stride;\n+\n+    template<bool _Const> using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n+\n+    template<bool _Const>\n+    struct __iter_cat\n+    { };\n+\n+    template<bool _Const>\n+      requires forward_range<_Base<_Const>>\n+    struct __iter_cat<_Const>\n+    {\n+    private:\n+      static auto\n+      _S_iter_cat()\n+      {\n+\tusing _Cat = typename iterator_traits<iterator_t<_Base<_Const>>>::iterator_category;\n+\tif constexpr (derived_from<_Cat, random_access_iterator_tag>)\n+\t  return random_access_iterator_tag{};\n+\telse\n+\t  return _Cat{};\n+      }\n+    public:\n+      using iterator_category = decltype(_S_iter_cat());\n+    };\n+\n+    template<bool> class _Iterator;\n+\n+  public:\n+    constexpr explicit\n+    stride_view(_Vp __base, range_difference_t<_Vp> __stride)\n+    : _M_base(std::move(__base)), _M_stride(__stride)\n+    { __glibcxx_assert(__stride > 0); }\n+\n+    constexpr _Vp\n+    base() const& requires copy_constructible<_Vp>\n+    { return _M_base; }\n+\n+    constexpr _Vp\n+    base() &&\n+    { return std::move(_M_base); }\n+\n+    constexpr range_difference_t<_Vp>\n+    stride() const noexcept\n+    { return _M_stride; }\n+\n+    constexpr auto\n+    begin() requires (!__detail::__simple_view<_Vp>)\n+    { return _Iterator<false>(this, ranges::begin(_M_base)); }\n+\n+    constexpr auto\n+    begin() const requires range<const _Vp>\n+    { return _Iterator<true>(this, ranges::begin(_M_base)); }\n+\n+    constexpr auto\n+    end() requires (!__detail::__simple_view<_Vp>)\n+    {\n+      if constexpr (common_range<_Vp> && sized_range<_Vp> && forward_range<_Vp>)\n+\t{\n+\t  auto __missing = (_M_stride - ranges::distance(_M_base) % _M_stride) % _M_stride;\n+\t  return _Iterator<false>(this, ranges::end(_M_base), __missing);\n+\t}\n+      else if constexpr (common_range<_Vp> && !bidirectional_range<_Vp>)\n+\treturn _Iterator<false>(this, ranges::end(_M_base));\n+      else\n+        return default_sentinel;\n+    }\n+\n+    constexpr auto\n+    end() const requires range<const _Vp>\n+    {\n+      if constexpr (common_range<const _Vp> && sized_range<const _Vp>\n+\t\t    && forward_range<const _Vp>)\n+\t{\n+\t  auto __missing = (_M_stride - ranges::distance(_M_base) % _M_stride) % _M_stride;\n+\t  return _Iterator<true>(this, ranges::end(_M_base), __missing);\n+\t}\n+      else if constexpr (common_range<const _Vp> && !bidirectional_range<const _Vp>)\n+        return _Iterator<true>(this, ranges::end(_M_base));\n+      else\n+        return default_sentinel;\n+    }\n+\n+    constexpr auto\n+    size() requires sized_range<_Vp>\n+    {\n+      return __detail::__to_unsigned_like\n+\t(__detail::__div_ceil(ranges::distance(_M_base), _M_stride));\n+    }\n+\n+    constexpr auto\n+    size() const requires sized_range<const _Vp>\n+    {\n+      return __detail::__to_unsigned_like\n+\t(__detail::__div_ceil(ranges::distance(_M_base), _M_stride));\n+    }\n+  };\n+\n+  template<typename _Range>\n+    stride_view(_Range&&, range_difference_t<_Range>) -> stride_view<views::all_t<_Range>>;\n+\n+  template<typename _Vp>\n+    inline constexpr bool enable_borrowed_range<stride_view<_Vp>>\n+      = enable_borrowed_range<_Vp>;\n+\n+  template<input_range _Vp>\n+    requires view<_Vp>\n+  template<bool _Const>\n+  class stride_view<_Vp>::_Iterator : public __iter_cat<_Const>\n+  {\n+    using _Parent = __detail::__maybe_const_t<_Const, stride_view>;\n+    using _Base = stride_view::_Base<_Const>;\n+\n+    iterator_t<_Base> _M_current = iterator_t<_Base>();\n+    sentinel_t<_Base> _M_end = sentinel_t<_Base>();\n+    range_difference_t<_Base> _M_stride = 0;\n+    range_difference_t<_Base> _M_missing = 0;\n+\n+    constexpr\n+    _Iterator(_Parent* __parent, iterator_t<_Base> __current,\n+\t      range_difference_t<_Base> __missing = 0)\n+    : _M_current(std::move(__current)), _M_end(ranges::end(__parent->_M_base)),\n+      _M_stride(__parent->_M_stride), _M_missing(__missing)\n+    { }\n+\n+    static auto\n+    _S_iter_concept()\n+    {\n+      if constexpr (random_access_range<_Base>)\n+\treturn random_access_iterator_tag{};\n+      else if constexpr (bidirectional_range<_Base>)\n+\treturn bidirectional_iterator_tag{};\n+      else if constexpr (forward_range<_Base>)\n+\treturn forward_iterator_tag{};\n+      else\n+\treturn input_iterator_tag{};\n+    }\n+\n+    friend stride_view;\n+\n+  public:\n+    using difference_type = range_difference_t<_Base>;\n+    using value_type = range_value_t<_Base>;\n+    using iterator_concept = decltype(_S_iter_concept());\n+    // iterator_category defined in stride_view::__iter_cat\n+\n+    _Iterator() requires default_initializable<iterator_t<_Base>> = default;\n+\n+    constexpr\n+    _Iterator(_Iterator<!_Const> __other)\n+      requires _Const\n+\t&& convertible_to<iterator_t<_Vp>, iterator_t<_Base>>\n+\t&& convertible_to<sentinel_t<_Vp>, sentinel_t<_Base>>\n+     : _M_current(std::move(__other._M_current)), _M_end(std::move(__other._M_end)),\n+       _M_stride(__other._M_stride), _M_missing(__other._M_missing)\n+     { }\n+\n+    constexpr iterator_t<_Base>\n+    base() &&\n+    { return std::move(_M_current); }\n+\n+    constexpr const iterator_t<_Base>&\n+    base() const & noexcept\n+    { return _M_current; }\n+\n+    constexpr decltype(auto)\n+    operator*() const\n+    { return *_M_current; }\n+\n+    constexpr _Iterator&\n+    operator++()\n+    {\n+      __glibcxx_assert(_M_current != _M_end);\n+      _M_missing = ranges::advance(_M_current, _M_stride, _M_end);\n+      return *this;\n+    }\n+\n+    constexpr void\n+    operator++(int)\n+    { ++*this; }\n+\n+    constexpr _Iterator\n+    operator++(int) requires forward_range<_Base>\n+    {\n+      auto __tmp = *this;\n+      ++*this;\n+      return __tmp;\n+    }\n+\n+    constexpr _Iterator&\n+    operator--() requires bidirectional_range<_Base>\n+    {\n+      ranges::advance(_M_current, _M_missing - _M_stride);\n+      _M_missing = 0;\n+      return *this;\n+    }\n+\n+    constexpr _Iterator\n+    operator--(int) requires bidirectional_range<_Base>\n+    {\n+      auto __tmp = *this;\n+      --*this;\n+      return __tmp;\n+    }\n+\n+    constexpr _Iterator&\n+    operator+=(difference_type __n) requires random_access_range<_Base>\n+    {\n+      if (__n > 0)\n+\t{\n+\t  __glibcxx_assert(ranges::distance(_M_current, _M_end) > _M_stride * (__n - 1));\n+\t  _M_missing = ranges::advance(_M_current, _M_stride * __n, _M_end);\n+\t}\n+      else if (__n < 0)\n+\t{\n+\t  ranges::advance(_M_current, _M_stride * __n + _M_missing);\n+\t  _M_missing = 0;\n+\t}\n+      return *this;\n+    }\n+\n+    constexpr _Iterator&\n+    operator-=(difference_type __n) requires random_access_range<_Base>\n+    { return *this += -__n; }\n+\n+    constexpr decltype(auto) operator[](difference_type __n) const\n+      requires random_access_range<_Base>\n+    { return *(*this + __n); }\n+\n+    friend constexpr bool\n+    operator==(const _Iterator& __x, default_sentinel_t)\n+    { return __x._M_current == __x._M_end; }\n+\n+    friend constexpr bool\n+    operator==(const _Iterator& __x, const _Iterator& __y)\n+      requires equality_comparable<iterator_t<_Base>>\n+    { return __x._M_current == __y._M_current; }\n+\n+    friend constexpr bool\n+    operator<(const _Iterator& __x, const _Iterator& __y)\n+      requires random_access_range<_Base>\n+    { return __x._M_current < __y._M_current; }\n+\n+    friend constexpr bool\n+    operator>(const _Iterator& __x, const _Iterator& __y)\n+      requires random_access_range<_Base>\n+    { return __y._M_current < __x._M_current; }\n+\n+    friend constexpr bool\n+    operator<=(const _Iterator& __x, const _Iterator& __y)\n+      requires random_access_range<_Base>\n+    { return !(__y._M_current < __x._M_current); }\n+\n+    friend constexpr bool\n+    operator>=(const _Iterator& __x, const _Iterator& __y)\n+      requires random_access_range<_Base>\n+    { return !(__x._M_current < __y._M_current); }\n+\n+    friend constexpr auto\n+    operator<=>(const _Iterator& __x, const _Iterator& __y)\n+        requires random_access_range<_Base> && three_way_comparable<iterator_t<_Base>>\n+    { return __x._M_current <=> __y._M_current; }\n+\n+    friend constexpr _Iterator\n+    operator+(const _Iterator& __i, difference_type __n)\n+      requires random_access_range<_Base>\n+    {\n+      auto __r = __i;\n+      __r += __n;\n+      return __r;\n+    }\n+\n+    friend constexpr _Iterator\n+    operator+(difference_type __n, const _Iterator& __i)\n+      requires random_access_range<_Base>\n+    { return __i + __n; }\n+\n+    friend constexpr _Iterator\n+    operator-(const _Iterator& __i, difference_type __n)\n+      requires random_access_range<_Base>\n+    {\n+      auto __r = __i;\n+      __r -= __n;\n+      return __r;\n+    }\n+\n+    friend constexpr difference_type\n+    operator-(const _Iterator& __x, const _Iterator& __y)\n+      requires sized_sentinel_for<iterator_t<_Base>, iterator_t<_Base>>\n+    {\n+      auto __n = __x._M_current - __y._M_current;\n+      if constexpr (forward_range<_Base>)\n+\treturn (__n + __x._M_missing - __y._M_missing) / __x._M_stride;\n+      else if (__n < 0)\n+\treturn -__detail::__div_ceil(-__n, __x._M_stride);\n+      else\n+\treturn __detail::__div_ceil(__n, __x._M_stride);\n+    }\n+\n+    friend constexpr difference_type\n+    operator-(default_sentinel_t __y, const _Iterator& __x)\n+      requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<_Base>>\n+    { return __detail::__div_ceil(__x._M_end, __x._M_current, __x._M_stride); }\n+\n+    friend constexpr difference_type\n+    operator-(const _Iterator& __x, default_sentinel_t __y)\n+      requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<_Base>>\n+    { return -(__y - __x); }\n+\n+    friend constexpr range_rvalue_reference_t<_Base>\n+    iter_move(const _Iterator& __i)\n+      noexcept(noexcept(ranges::iter_move(__i._M_current)))\n+    { return ranges::iter_move(__i._M_current); }\n+\n+    friend constexpr void\n+    iter_swap(const _Iterator& __x, const _Iterator& __y)\n+      noexcept(noexcept(ranges::iter_swap(__x._M_current, __y._M_current)))\n+      requires indirectly_swappable<iterator_t<_Base>>\n+    { ranges::iter_swap(__x._M_current, __y._M_current); }\n+  };\n+\n+  namespace views\n+  {\n+    namespace __detail\n+    {\n+      template<typename _Range, typename _Dp>\n+\tconcept __can_stride_view\n+\t  = requires { stride_view(std::declval<_Range>(), std::declval<_Dp>()); };\n+    }\n+\n+    struct _Stride : __adaptor::_RangeAdaptor<_Stride>\n+    {\n+      template<viewable_range _Range, typename _Dp = range_difference_t<_Range>>\n+\trequires __detail::__can_stride_view<_Range, _Dp>\n+\tconstexpr auto\n+\toperator() [[nodiscard]] (_Range&& __r, type_identity_t<_Dp> __n) const\n+\t{ return stride_view(std::forward<_Range>(__r), __n); }\n+\n+      using __adaptor::_RangeAdaptor<_Stride>::operator();\n+      static constexpr int _S_arity = 2;\n+      static constexpr bool _S_has_simple_extra_args = true;\n+    };\n+\n+    inline constexpr _Stride stride;\n+  }\n #endif // C++23\n } // namespace ranges\n "}, {"sha": "745d1a61c1b9777b65c0278f2bf69e1509a355d9", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/stride/1.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c70b44f2c1adf9a9b1c64105d07f177e86139fca/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fstride%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c70b44f2c1adf9a9b1c64105d07f177e86139fca/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fstride%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fstride%2F1.cc?ref=c70b44f2c1adf9a9b1c64105d07f177e86139fca", "patch": "@@ -0,0 +1,73 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <ranges>\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+constexpr bool\n+test01()\n+{\n+  int x[] = {1, 2, 3, 4, 5, 6, 7};\n+\n+  auto v2 = x | views::stride(2);\n+  const auto i0 = v2.begin(), i1 = v2.begin() + 1;\n+  VERIFY( i0 + 1 - 1 == i0 );\n+  VERIFY( i0 != i1 );\n+  VERIFY( i0 < i1 );\n+  VERIFY( i0 <= i0 );\n+  VERIFY( i0 >= i0 );\n+  VERIFY( v2.end() > i1 );\n+  VERIFY( i1 - i0 == 1 );\n+  VERIFY( i0 - i1 == -1 );\n+  VERIFY( v2.end() - i1 == 3 );\n+  VERIFY( i1 - v2.end() == -3 );\n+  auto i2 = v2.begin();\n+  i2 += 2;\n+  i2 -= -2;\n+  VERIFY( i2 == v2.end() );\n+  VERIFY( ranges::size(v2) == 4 );\n+  VERIFY( ranges::equal(v2, (int[]){1, 3, 5, 7}) );\n+  VERIFY( ranges::equal(v2 | views::reverse, (int[]){7, 5, 3, 1}) );\n+  VERIFY( v2.stride() == 2 );\n+\n+  auto v1 = x | views::stride(1);\n+  VERIFY( ranges::size(v1) == ranges::size(x) );\n+  VERIFY( ranges::equal(v1, x) );\n+  VERIFY( ranges::equal(v1 | views::reverse, x | views::reverse) );\n+  VERIFY( v1.stride() == 1 );\n+\n+  auto v5 = x | views::stride(5);\n+  VERIFY( ranges::equal(v5, (int[]){1, 6}) );\n+  VERIFY( ranges::equal(v5 | views::reverse, (int[]){6, 1}) );\n+  VERIFY( v5.stride() == 5 );\n+\n+  auto v10 = x | views::stride(10);\n+  VERIFY( ranges::equal(v10, (int[]){1}) );\n+  VERIFY( ranges::equal(v10 | views::reverse, (int[]){1}) );\n+  VERIFY( v10.stride() == 10 );\n+\n+  return true;\n+}\n+\n+template<class container>\n+void\n+test02()\n+{\n+  int x[] = {1, 2, 3, 4, 5, 6, 7, 8};\n+  container rx(x);\n+  auto v = rx | views::stride(3);\n+  VERIFY( ranges::equal(v, (int[]){1, 4, 7}) );\n+}\n+\n+int\n+main()\n+{\n+  static_assert(test01());\n+  test02<__gnu_test::test_input_range<int>>();\n+  test02<__gnu_test::test_forward_range<int>>();\n+}"}]}