{"sha": "c7bfb646244bff1568ff2b1d8615f139a61aac9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdiZmI2NDYyNDRiZmYxNTY4ZmYyYjFkODYxNWYxMzlhNjFhYWM5Zg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-02T23:06:29Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-02T23:06:29Z"}, "message": "(safe_read): New function.\n\n(process_aux_info_file, edit_file): Use safe_read.\n\nFrom-SVN: r5977", "tree": {"sha": "c82be0670625b26bbdf0dbf5d182f73d25132195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c82be0670625b26bbdf0dbf5d182f73d25132195"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7bfb646244bff1568ff2b1d8615f139a61aac9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7bfb646244bff1568ff2b1d8615f139a61aac9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7bfb646244bff1568ff2b1d8615f139a61aac9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7bfb646244bff1568ff2b1d8615f139a61aac9f/comments", "author": null, "committer": null, "parents": [{"sha": "500c9e81dcb64ee5b4e3e0f15271482cb31ecc0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500c9e81dcb64ee5b4e3e0f15271482cb31ecc0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/500c9e81dcb64ee5b4e3e0f15271482cb31ecc0e"}], "stats": {"total": 66, "additions": 44, "deletions": 22}, "files": [{"sha": "a3febac00a6f87d2c3c127fa6c035d5e47610138", "filename": "gcc/protoize.c", "status": "modified", "additions": 44, "deletions": 22, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7bfb646244bff1568ff2b1d8615f139a61aac9f/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7bfb646244bff1568ff2b1d8615f139a61aac9f/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=c7bfb646244bff1568ff2b1d8615f139a61aac9f", "patch": "@@ -732,6 +732,48 @@ substr (s1, s2)\n   return 0;\n }\n \f\n+/* Read LEN bytes at PTR from descriptor DESC, for file FILENAME,\n+   retrying if necessary.  Return the actual number of bytes read.  */\n+\n+static int\n+safe_read (desc, ptr, len)\n+     int desc;\n+     char *ptr;\n+     int len;\n+{\n+  int left = len;\n+  while (left > 0) {\n+    int nchars = read (fileno (stdout), ptr, left);\n+    if (nchars < 0)\n+      return nchars;\n+    if (nchars == 0)\n+      break;\n+    ptr += nchars;\n+    left -= nchars;\n+  }\n+  return len - left;\n+}\n+\n+/* Write LEN bytes at PTR to descriptor DESC,\n+   retrying if necessary, and treating any real error as fatal.  */\n+\n+static void\n+safe_write (desc, ptr, len, out_fname)\n+     int desc;\n+     char *ptr;\n+     int len;\n+     char *out_fname;\n+{\n+  while (len > 0) {\n+    int written = write (fileno (stdout), ptr, len);\n+    if (written < 0)\n+      fprintf (stderr, \"%s: error writing file `%s': %s\\n\",\n+\t       pname, shortpath (NULL, out_fname), sys_errlist[errno]);\n+    ptr += written;\n+    len -= written;\n+  }\n+}\n+\f\n /* Get setup to recover in case the edit we are about to do goes awry.  */\n \n void\n@@ -2228,7 +2270,7 @@ start_over: ;\n   \n     /* Read the aux_info file into memory.  */\n   \n-    if (read (aux_info_file, aux_info_base, aux_info_size) != aux_info_size)\n+    if (safe_read (aux_info_file, aux_info_base, aux_info_size) != aux_info_size)\n       {\n         fprintf (stderr, \"%s: error reading aux info file `%s': %s\\n\",\n \t\t pname, shortpath (NULL, aux_info_filename),\n@@ -4033,26 +4075,6 @@ scan_for_missed_items (file_p)\n     }\n }\n \n-/* Write LEN bytes at PTR to descriptor DESC,\n-   retrying if necessary, and treating any real error as fatal.  */\n-\n-static void\n-safe_write (desc, ptr, len, out_fname)\n-     int desc;\n-     char *ptr;\n-     int len;\n-     char *out_fname;\n-{\n-  while (len > 0) {\n-    int written = write (fileno (stdout), ptr, len);\n-    if (written < 0)\n-      fprintf (stderr, \"%s: error writing file `%s': %s\\n\",\n-\t       pname, shortpath (NULL, out_fname), sys_errlist[errno]);\n-    ptr += written;\n-    len -= written;\n-  }\n-}\n-\n /* Do all editing operations for a single source file (either a \"base\" file\n    or an \"include\" file).  To do this we read the file into memory, keep a\n    virgin copy there, make another cleaned in-core copy of the original file\n@@ -4166,7 +4188,7 @@ edit_file (hp)\n        in one swell fwoop.  Then figure out where the end of the text is and\n        make sure that it ends with a newline followed by a null.  */\n \n-    if (read (input_file, new_orig_text_base, orig_size) != orig_size)\n+    if (safe_read (input_file, new_orig_text_base, orig_size) != orig_size)\n       {\n         close (input_file);\n         fprintf (stderr, \"\\n%s: error reading input file `%s': %s\\n\","}]}