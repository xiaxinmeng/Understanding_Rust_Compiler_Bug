{"sha": "adb18b686c183763d2364dff91e5f2c987ee1b91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRiMThiNjg2YzE4Mzc2M2QyMzY0ZGZmOTFlNWYyYzk4N2VlMWI5MQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-27T20:28:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-12-27T20:28:55Z"}, "message": "({non,}aligned_memory_operand): Test REGNO_POINTER_ALIGN.\n\n(reg_or_unaligned_mem_operand): New function.\n(get_unaligned_address): Add new arg, EXTRA_OFFSET.\n\nFrom-SVN: r10880", "tree": {"sha": "de30d98c42b8b19c41b12ffc780fc436f2d33a1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de30d98c42b8b19c41b12ffc780fc436f2d33a1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adb18b686c183763d2364dff91e5f2c987ee1b91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb18b686c183763d2364dff91e5f2c987ee1b91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb18b686c183763d2364dff91e5f2c987ee1b91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb18b686c183763d2364dff91e5f2c987ee1b91/comments", "author": null, "committer": null, "parents": [{"sha": "0e75bea2be7c937ebc856b55e6a505471c454e52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e75bea2be7c937ebc856b55e6a505471c454e52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e75bea2be7c937ebc856b55e6a505471c454e52"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "ba505dc07632fe506ce1efe0d0f37167348353a3", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb18b686c183763d2364dff91e5f2c987ee1b91/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb18b686c183763d2364dff91e5f2c987ee1b91/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=adb18b686c183763d2364dff91e5f2c987ee1b91", "patch": "@@ -459,10 +459,7 @@ aligned_memory_operand (op, mode)\n     op = XEXP (op, 0);\n \n   return (GET_CODE (op) == REG\n-\t  && (REGNO (op) == STACK_POINTER_REGNUM\n-\t      || op == hard_frame_pointer_rtx\n-\t      || (REGNO (op) >= FIRST_VIRTUAL_REGISTER\n-\t\t  && REGNO (op) <= LAST_VIRTUAL_REGISTER)));\n+\t  && REGNO_POINTER_ALIGN (REGNO (op)) >= 4);\n }\n \n /* Similar, but return 1 if OP is a MEM which is not alignable.  */\n@@ -496,10 +493,17 @@ unaligned_memory_operand (op, mode)\n     op = XEXP (op, 0);\n \n   return (GET_CODE (op) != REG\n-\t  || (REGNO (op) != STACK_POINTER_REGNUM\n-\t      && op != hard_frame_pointer_rtx\n-\t      && (REGNO (op) < FIRST_VIRTUAL_REGISTER\n-\t\t  || REGNO (op) > LAST_VIRTUAL_REGISTER)));\n+\t  || REGNO_POINTER_ALIGN (REGNO (op)) < 4);\n+}\n+\n+/* Return 1 if OP is either a register or an unaligned memory location.  */\n+\n+int\n+reg_or_unaligned_mem_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return register_operand (op, mode) || unaligned_memory_operand (op, mode);\n }\n \n /* Return 1 if OP is any memory location.  During reload a pseudo matches.  */\n@@ -560,11 +564,13 @@ get_aligned_mem (ref, paligned_mem, pbitnum)\n   *pbitnum = GEN_INT ((offset & 3) * 8);\n }\n \n-/* Similar, but just get the address.  Handle the two reload cases.  */\n+/* Similar, but just get the address.  Handle the two reload cases.  \n+   Add EXTRA_OFFSET to the address we return.  */\n \n rtx\n-get_unaligned_address (ref)\n+get_unaligned_address (ref, extra_offset)\n      rtx ref;\n+     int extra_offset;\n {\n   rtx base;\n   HOST_WIDE_INT offset = 0;\n@@ -590,7 +596,7 @@ get_unaligned_address (ref)\n   if (GET_CODE (base) == PLUS)\n     offset += INTVAL (XEXP (base, 1)), base = XEXP (base, 0);\n \n-  return plus_constant (base, offset);\n+  return plus_constant (base, offset + extra_offset);\n }\n \f\n /* Subfunction of the following function.  Update the flags of any MEM"}]}