{"sha": "d26afa4f569ccb9ac5f1331a8b75420e34210262", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI2YWZhNGY1NjljY2I5YWM1ZjEzMzFhOGI3NTQyMGUzNDIxMDI2Mg==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2005-06-17T20:45:50Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2005-06-17T20:45:50Z"}, "message": "re PR target/19889 (g++.old-deja/g++.law/profile1.C execution test fails on ia64-hpux)\n\n\tPR target/19889\n\t* config/ia64/hpux.h (FUNCTION_PROFILER): New (dummy).\n\t(PROFILE_HOOK): New.\n\t(PROFILE_BEFORE_PROLOGUE): Undef.\n\t(NO_PROFILE_COUNTERS): New.\n\t* config/ia64/ia64-protos.h (ia64_profile_hook): New.\n\t* config/ia64/ia64.c (ia64_compute_frame_size): Add ifdef.\n\t(gen_mcount_func_rtx): New.\n\t(ia64_profile_hook): New.\n\t* config/ia64/ia64.md (ip_value): New.\n\nFrom-SVN: r101134", "tree": {"sha": "32f8c08fbeae93d8a90581da378c193a39ca15ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32f8c08fbeae93d8a90581da378c193a39ca15ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d26afa4f569ccb9ac5f1331a8b75420e34210262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26afa4f569ccb9ac5f1331a8b75420e34210262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d26afa4f569ccb9ac5f1331a8b75420e34210262", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26afa4f569ccb9ac5f1331a8b75420e34210262/comments", "author": null, "committer": null, "parents": [{"sha": "afca671b7852829464044338e7a3c0a7353a39e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afca671b7852829464044338e7a3c0a7353a39e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afca671b7852829464044338e7a3c0a7353a39e9"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "c48bf43f7ceb4ed442c6c60181f71ee38f2a12ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26afa4f569ccb9ac5f1331a8b75420e34210262/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26afa4f569ccb9ac5f1331a8b75420e34210262/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d26afa4f569ccb9ac5f1331a8b75420e34210262", "patch": "@@ -1,3 +1,16 @@\n+2005-06-17  Steve Ellcey  <sje@cup.hp.com>\n+\n+\tPR target/19889\n+\t* config/ia64/hpux.h (FUNCTION_PROFILER): New (dummy).\n+\t(PROFILE_HOOK): New.\n+\t(PROFILE_BEFORE_PROLOGUE): Undef.\n+\t(NO_PROFILE_COUNTERS): New.\n+\t* config/ia64/ia64-protos.h (ia64_profile_hook): New.\n+\t* config/ia64/ia64.c (ia64_compute_frame_size): Add ifdef.\n+\t(gen_mcount_func_rtx): New.\n+\t(ia64_profile_hook): New.\n+\t* config/ia64/ia64.md (ip_value): New.\n+\n 2005-06-17  Devang Patel  <dpatel@apple.com>\n \n \t* config/rs6000/predicates.md (s5bit_cint_operand,"}, {"sha": "6423124bb9fb38a31425fc9a9205d72db4ad895a", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26afa4f569ccb9ac5f1331a8b75420e34210262/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26afa4f569ccb9ac5f1331a8b75420e34210262/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=d26afa4f569ccb9ac5f1331a8b75420e34210262", "patch": "@@ -208,3 +208,18 @@ do {\t\t\t\t\t\t\t\t\\\n \n /* HP-UX headers are C++-compatible.  */\n #define NO_IMPLICIT_EXTERN_C\n+\n+/* HP-UX uses PROFILE_HOOK instead of FUNCTION_PROFILER but we need a\n+   FUNCTION_PROFILER defined because its use is not ifdefed.  When using\n+   PROFILE_HOOK, the profile call comes after the prologue.  */\n+\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO) do { } while (0)\n+\n+#undef PROFILE_HOOK\n+#define PROFILE_HOOK(LABEL) ia64_profile_hook (LABEL)\n+\n+#undef  PROFILE_BEFORE_PROLOGUE\n+\n+#undef NO_PROFILE_COUNTERS\n+#define NO_PROFILE_COUNTERS 0"}, {"sha": "e3e1560e559e8f27c25688b87d86d496454002d9", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26afa4f569ccb9ac5f1331a8b75420e34210262/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26afa4f569ccb9ac5f1331a8b75420e34210262/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=d26afa4f569ccb9ac5f1331a8b75420e34210262", "patch": "@@ -114,3 +114,4 @@ extern enum direction ia64_hpux_function_arg_padding (enum machine_mode, tree);\n \n extern void ia64_hpux_handle_builtin_pragma (struct cpp_reader *);\n extern void ia64_output_function_profiler (FILE *, int);\n+extern void ia64_profile_hook (int);"}, {"sha": "8d20992227164b38ace9661ba37d678dd58adc00", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26afa4f569ccb9ac5f1331a8b75420e34210262/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26afa4f569ccb9ac5f1331a8b75420e34210262/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=d26afa4f569ccb9ac5f1331a8b75420e34210262", "patch": "@@ -2087,12 +2087,14 @@ ia64_compute_frame_size (HOST_WIDE_INT size)\n       break;\n   i = regno - OUT_REG (0) + 1;\n \n+#ifndef PROFILE_HOOK\n   /* When -p profiling, we need one output register for the mcount argument.\n      Likewise for -a profiling for the bb_init_func argument.  For -ax\n      profiling, we need two output registers for the two bb_init_trace_func\n      arguments.  */\n   if (current_function_profile)\n     i = MAX (i, 1);\n+#endif\n   current_frame_info.n_output_regs = i;\n \n   /* ??? No rotating register support yet.  */\n@@ -8579,4 +8581,38 @@ ia64_output_function_profiler (FILE *file, int labelno)\n   fputs (\"\\tbr.call.sptk.many b0 = _mcount\\n\\t;;\\n\", file);\n }\n \n+static GTY(()) rtx mcount_func_rtx;\n+static rtx\n+gen_mcount_func_rtx (void)\n+{\n+  if (!mcount_func_rtx)\n+    mcount_func_rtx = init_one_libfunc (\"_mcount\");\n+  return mcount_func_rtx;\n+}\n+\n+void\n+ia64_profile_hook (int labelno)\n+{\n+  rtx label, ip;\n+\n+  if (NO_PROFILE_COUNTERS)\n+    label = const0_rtx;\n+  else\n+    {\n+      char buf[30];\n+      const char *label_name;\n+      ASM_GENERATE_INTERNAL_LABEL (buf, \"LP\", labelno);\n+      label_name = (*targetm.strip_name_encoding) (ggc_strdup (buf));\n+      label = gen_rtx_SYMBOL_REF (Pmode, label_name);\n+      SYMBOL_REF_FLAGS (label) = SYMBOL_FLAG_LOCAL;\n+    }\n+  ip = gen_reg_rtx (Pmode);\n+  emit_insn (gen_ip_value (ip));\n+  emit_library_call (gen_mcount_func_rtx (), LCT_NORMAL,\n+                     VOIDmode, 3,\n+\t\t     gen_rtx_REG (Pmode, BR_REG (0)), Pmode,\n+\t\t     ip, Pmode,\n+\t\t     label, Pmode);\n+}\n+\n #include \"gt-ia64.h\""}, {"sha": "0accd9603999a09b156061e6d92331ae5d6e4d32", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26afa4f569ccb9ac5f1331a8b75420e34210262/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26afa4f569ccb9ac5f1331a8b75420e34210262/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=d26afa4f569ccb9ac5f1331a8b75420e34210262", "patch": "@@ -6154,6 +6154,16 @@\n   \"addp4 %0 = %1, %2\"\n   [(set_attr \"itanium_class\" \"ialu\")])\n \n+;;\n+;; Get instruction pointer\n+\n+(define_insn \"ip_value\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+        (pc))]\n+ \"\"\n+ \"mov %0 = ip\"\n+  [(set_attr \"itanium_class\" \"ialu\")])\n+\n ;; Vector operations\n (include \"vect.md\")\n ;; Atomic operations"}]}