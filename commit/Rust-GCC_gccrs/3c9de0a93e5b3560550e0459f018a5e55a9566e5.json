{"sha": "3c9de0a93e5b3560550e0459f018a5e55a9566e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M5ZGUwYTkzZTViMzU2MDU1MGUwNDU5ZjAxOGE1ZTU1YTk1NjZlNQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2019-04-09T06:38:33Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-18T07:00:12Z"}, "message": "AVX512FP16: Add scalar fma instructions.\n\nAdd vfmadd[132,213,231]sh/vfnmadd[132,213,231]sh/\nvfmsub[132,213,231]sh/vfnmsub[132,213,231]sh.\n\ngcc/ChangeLog:\n\n\t* config/i386/avx512fp16intrin.h (_mm_fmadd_sh):\n\tNew intrinsic.\n\t(_mm_mask_fmadd_sh): Likewise.\n\t(_mm_mask3_fmadd_sh): Likewise.\n\t(_mm_maskz_fmadd_sh): Likewise.\n\t(_mm_fmadd_round_sh): Likewise.\n\t(_mm_mask_fmadd_round_sh): Likewise.\n\t(_mm_mask3_fmadd_round_sh): Likewise.\n\t(_mm_maskz_fmadd_round_sh): Likewise.\n\t(_mm_fnmadd_sh): Likewise.\n\t(_mm_mask_fnmadd_sh): Likewise.\n\t(_mm_mask3_fnmadd_sh): Likewise.\n\t(_mm_maskz_fnmadd_sh): Likewise.\n\t(_mm_fnmadd_round_sh): Likewise.\n\t(_mm_mask_fnmadd_round_sh): Likewise.\n\t(_mm_mask3_fnmadd_round_sh): Likewise.\n\t(_mm_maskz_fnmadd_round_sh): Likewise.\n\t(_mm_fmsub_sh): Likewise.\n\t(_mm_mask_fmsub_sh): Likewise.\n\t(_mm_mask3_fmsub_sh): Likewise.\n\t(_mm_maskz_fmsub_sh): Likewise.\n\t(_mm_fmsub_round_sh): Likewise.\n\t(_mm_mask_fmsub_round_sh): Likewise.\n\t(_mm_mask3_fmsub_round_sh): Likewise.\n\t(_mm_maskz_fmsub_round_sh): Likewise.\n\t(_mm_fnmsub_sh): Likewise.\n\t(_mm_mask_fnmsub_sh): Likewise.\n\t(_mm_mask3_fnmsub_sh): Likewise.\n\t(_mm_maskz_fnmsub_sh): Likewise.\n\t(_mm_fnmsub_round_sh): Likewise.\n\t(_mm_mask_fnmsub_round_sh): Likewise.\n\t(_mm_mask3_fnmsub_round_sh): Likewise.\n\t(_mm_maskz_fnmsub_round_sh): Likewise.\n\t* config/i386/i386-builtin-types.def\n\t(V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT): New builtin type.\n\t* config/i386/i386-builtin.def: Add new builtins.\n\t* config/i386/i386-expand.c: Handle new builtin type.\n\t* config/i386/sse.md (fmai_vmfmadd_<mode><round_name>):\n\tAjdust to support FP16.\n\t(fmai_vmfmsub_<mode><round_name>): Ditto.\n\t(fmai_vmfnmadd_<mode><round_name>): Ditto.\n\t(fmai_vmfnmsub_<mode><round_name>): Ditto.\n\t(*fmai_fmadd_<mode>): Ditto.\n\t(*fmai_fmsub_<mode>): Ditto.\n\t(*fmai_fnmadd_<mode><round_name>): Ditto.\n\t(*fmai_fnmsub_<mode><round_name>): Ditto.\n\t(avx512f_vmfmadd_<mode>_mask<round_name>): Ditto.\n\t(avx512f_vmfmadd_<mode>_mask3<round_name>): Ditto.\n\t(avx512f_vmfmadd_<mode>_maskz<round_expand_name>): Ditto.\n\t(avx512f_vmfmadd_<mode>_maskz_1<round_name>): Ditto.\n\t(*avx512f_vmfmsub_<mode>_mask<round_name>): Ditto.\n\t(avx512f_vmfmsub_<mode>_mask3<round_name>): Ditto.\n\t(*avx512f_vmfmsub_<mode>_maskz_1<round_name>): Ditto.\n\t(*avx512f_vmfnmsub_<mode>_mask<round_name>): Ditto.\n\t(*avx512f_vmfnmsub_<mode>_mask3<round_name>): Ditto.\n\t(*avx512f_vmfnmsub_<mode>_mask<round_name>): Ditto.\n\t(*avx512f_vmfnmadd_<mode>_mask<round_name>): Renamed to ...\n\t(avx512f_vmfnmadd_<mode>_mask<round_name>) ... this, and\n\tadjust to support FP16.\n\t(avx512f_vmfnmadd_<mode>_mask3<round_name>): Ditto.\n\t(avx512f_vmfnmadd_<mode>_maskz_1<round_name>): Ditto.\n\t(avx512f_vmfnmadd_<mode>_maskz<round_expand_name>): New\n\texpander.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add test for new builtins.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Add test for new intrinsics.\n\t* gcc.target/i386/sse-22.c: Ditto.", "tree": {"sha": "f84cbe2868a3911bca934e2c9a3c8e6f3a9acdcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f84cbe2868a3911bca934e2c9a3c8e6f3a9acdcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c9de0a93e5b3560550e0459f018a5e55a9566e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9de0a93e5b3560550e0459f018a5e55a9566e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c9de0a93e5b3560550e0459f018a5e55a9566e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c9de0a93e5b3560550e0459f018a5e55a9566e5/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "376d69f3f75d2750fa91c0f02f1121c3a8468ffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376d69f3f75d2750fa91c0f02f1121c3a8468ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/376d69f3f75d2750fa91c0f02f1121c3a8468ffc"}], "stats": {"total": 829, "additions": 666, "deletions": 163}, "files": [{"sha": "47146967e40bbfe9975daf7fb2f761ec08dde2dc", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "modified", "additions": 412, "deletions": 0, "changes": 412, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=3c9de0a93e5b3560550e0459f018a5e55a9566e5", "patch": "@@ -5703,6 +5703,418 @@ _mm512_maskz_fnmsub_round_ph (__mmask32 __U, __m512h __A, __m512h __B,\n \n #endif /* __OPTIMIZE__ */\n \n+/* Intrinsics vfmadd[132,213,231]sh.  */\n+extern __inline __m128h\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmadd_sh (__m128h __W, __m128h __A, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t  (__v8hf) __A,\n+\t\t\t\t\t\t  (__v8hf) __B,\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmadd_sh (__m128h __W, __mmask8 __U, __m128h __A, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t  (__v8hf) __A,\n+\t\t\t\t\t\t  (__v8hf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmadd_sh (__m128h __W, __m128h __A, __m128h __B, __mmask8 __U)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_mask3 ((__v8hf) __W,\n+\t\t\t\t\t\t   (__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmadd_sh (__mmask8 __U, __m128h __W, __m128h __A, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_maskz ((__v8hf) __W,\n+\t\t\t\t\t\t   (__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmadd_round_sh (__m128h __W, __m128h __A, __m128h __B, const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t  (__v8hf) __A,\n+\t\t\t\t\t\t  (__v8hf) __B,\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmadd_round_sh (__m128h __W, __mmask8 __U, __m128h __A, __m128h __B,\n+\t\t\t const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t  (__v8hf) __A,\n+\t\t\t\t\t\t  (__v8hf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmadd_round_sh (__m128h __W, __m128h __A, __m128h __B, __mmask8 __U,\n+\t\t\t  const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_mask3 ((__v8hf) __W,\n+\t\t\t\t\t\t   (__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmadd_round_sh (__mmask8 __U, __m128h __W, __m128h __A,\n+\t\t\t  __m128h __B, const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_maskz ((__v8hf) __W,\n+\t\t\t\t\t\t   (__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+#else\n+#define _mm_fmadd_round_sh(A, B, C, R)\t\t\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfmaddsh3_mask ((A), (B), (C), (-1), (R)))\n+#define _mm_mask_fmadd_round_sh(A, U, B, C, R)\t\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfmaddsh3_mask ((A), (B), (C), (U), (R)))\n+#define _mm_mask3_fmadd_round_sh(A, B, C, U, R)\t\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfmaddsh3_mask3 ((A), (B), (C), (U), (R)))\n+#define _mm_maskz_fmadd_round_sh(U, A, B, C, R)\t\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfmaddsh3_maskz ((A), (B), (C), (U), (R)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vfnmadd[132,213,231]sh.  */\n+extern __inline __m128h\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmadd_sh (__m128h __W, __m128h __A, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_vfnmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t   (__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) -1,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fnmadd_sh (__m128h __W, __mmask8 __U, __m128h __A, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_vfnmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t  (__v8hf) __A,\n+\t\t\t\t\t\t  (__v8hf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fnmadd_sh (__m128h __W, __m128h __A, __m128h __B, __mmask8 __U)\n+{\n+  return (__m128h) __builtin_ia32_vfnmaddsh3_mask3 ((__v8hf) __W,\n+\t\t\t\t\t\t   (__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fnmadd_sh (__mmask8 __U, __m128h __W, __m128h __A, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_vfnmaddsh3_maskz ((__v8hf) __W,\n+\t\t\t\t\t\t   (__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmadd_round_sh (__m128h __W, __m128h __A, __m128h __B, const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfnmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t   (__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) -1,\n+\t\t\t\t\t\t   __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fnmadd_round_sh (__m128h __W, __mmask8 __U, __m128h __A, __m128h __B,\n+\t\t\t const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfnmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t  (__v8hf) __A,\n+\t\t\t\t\t\t  (__v8hf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fnmadd_round_sh (__m128h __W, __m128h __A, __m128h __B, __mmask8 __U,\n+\t\t\t  const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfnmaddsh3_mask3 ((__v8hf) __W,\n+\t\t\t\t\t\t   (__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fnmadd_round_sh (__mmask8 __U, __m128h __W, __m128h __A,\n+\t\t\t  __m128h __B, const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfnmaddsh3_maskz ((__v8hf) __W,\n+\t\t\t\t\t\t   (__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+#else\n+#define _mm_fnmadd_round_sh(A, B, C, R)\t\t\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfnmaddsh3_mask ((A), (B), (C), (-1), (R)))\n+#define _mm_mask_fnmadd_round_sh(A, U, B, C, R)\t\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfnmaddsh3_mask ((A), (B), (C), (U), (R)))\n+#define _mm_mask3_fnmadd_round_sh(A, B, C, U, R)\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfnmaddsh3_mask3 ((A), (B), (C), (U), (R)))\n+#define _mm_maskz_fnmadd_round_sh(U, A, B, C, R)\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfnmaddsh3_maskz ((A), (B), (C), (U), (R)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vfmsub[132,213,231]sh.  */\n+extern __inline __m128h\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmsub_sh (__m128h __W, __m128h __A, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t  (__v8hf) __A,\n+\t\t\t\t\t\t  -(__v8hf) __B,\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmsub_sh (__m128h __W, __mmask8 __U, __m128h __A, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t  (__v8hf) __A,\n+\t\t\t\t\t\t  -(__v8hf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmsub_sh (__m128h __W, __m128h __A, __m128h __B, __mmask8 __U)\n+{\n+  return (__m128h) __builtin_ia32_vfmsubsh3_mask3 ((__v8hf) __W,\n+\t\t\t\t\t\t   (__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmsub_sh (__mmask8 __U, __m128h __W, __m128h __A, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_maskz ((__v8hf) __W,\n+\t\t\t\t\t\t   (__v8hf) __A,\n+\t\t\t\t\t\t   -(__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fmsub_round_sh (__m128h __W, __m128h __A, __m128h __B, const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t  (__v8hf) __A,\n+\t\t\t\t\t\t  -(__v8hf) __B,\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fmsub_round_sh (__m128h __W, __mmask8 __U, __m128h __A, __m128h __B,\n+\t\t\t const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t  (__v8hf) __A,\n+\t\t\t\t\t\t  -(__v8hf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fmsub_round_sh (__m128h __W, __m128h __A, __m128h __B, __mmask8 __U,\n+\t\t\t  const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfmsubsh3_mask3 ((__v8hf) __W,\n+\t\t\t\t\t\t   (__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fmsub_round_sh (__mmask8 __U, __m128h __W, __m128h __A,\n+\t\t\t  __m128h __B, const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_maskz ((__v8hf) __W,\n+\t\t\t\t\t\t   (__v8hf) __A,\n+\t\t\t\t\t\t   -(__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+#else\n+#define _mm_fmsub_round_sh(A, B, C, R)\t\t\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfmaddsh3_mask ((A), (B), -(C), (-1), (R)))\n+#define _mm_mask_fmsub_round_sh(A, U, B, C, R)\t\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfmaddsh3_mask ((A), (B), -(C), (U), (R)))\n+#define _mm_mask3_fmsub_round_sh(A, B, C, U, R)\t\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfmsubsh3_mask3 ((A), (B), (C), (U), (R)))\n+#define _mm_maskz_fmsub_round_sh(U, A, B, C, R)\t\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfmaddsh3_maskz ((A), (B), -(C), (U), (R)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n+/* Intrinsics vfnmsub[132,213,231]sh.  */\n+extern __inline __m128h\n+  __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmsub_sh (__m128h __W, __m128h __A, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t  -(__v8hf) __A,\n+\t\t\t\t\t\t  -(__v8hf) __B,\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fnmsub_sh (__m128h __W, __mmask8 __U, __m128h __A, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t  -(__v8hf) __A,\n+\t\t\t\t\t\t  -(__v8hf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U,\n+\t\t\t\t\t\t  _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fnmsub_sh (__m128h __W, __m128h __A, __m128h __B, __mmask8 __U)\n+{\n+  return (__m128h) __builtin_ia32_vfmsubsh3_mask3 ((__v8hf) __W,\n+\t\t\t\t\t\t   -(__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fnmsub_sh (__mmask8 __U, __m128h __W, __m128h __A, __m128h __B)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_maskz ((__v8hf) __W,\n+\t\t\t\t\t\t   -(__v8hf) __A,\n+\t\t\t\t\t\t   -(__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U,\n+\t\t\t\t\t\t   _MM_FROUND_CUR_DIRECTION);\n+}\n+\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_fnmsub_round_sh (__m128h __W, __m128h __A, __m128h __B, const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t  -(__v8hf) __A,\n+\t\t\t\t\t\t  -(__v8hf) __B,\n+\t\t\t\t\t\t  (__mmask8) -1,\n+\t\t\t\t\t\t  __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_fnmsub_round_sh (__m128h __W, __mmask8 __U, __m128h __A, __m128h __B,\n+\t\t\t const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_mask ((__v8hf) __W,\n+\t\t\t\t\t\t  -(__v8hf) __A,\n+\t\t\t\t\t\t  -(__v8hf) __B,\n+\t\t\t\t\t\t  (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask3_fnmsub_round_sh (__m128h __W, __m128h __A, __m128h __B, __mmask8 __U,\n+\t\t\t  const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfmsubsh3_mask3 ((__v8hf) __W,\n+\t\t\t\t\t\t   -(__v8hf) __A,\n+\t\t\t\t\t\t   (__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+extern __inline __m128h\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_fnmsub_round_sh (__mmask8 __U, __m128h __W, __m128h __A,\n+\t\t\t  __m128h __B, const int __R)\n+{\n+  return (__m128h) __builtin_ia32_vfmaddsh3_maskz ((__v8hf) __W,\n+\t\t\t\t\t\t   -(__v8hf) __A,\n+\t\t\t\t\t\t   -(__v8hf) __B,\n+\t\t\t\t\t\t   (__mmask8) __U, __R);\n+}\n+\n+#else\n+#define _mm_fnmsub_round_sh(A, B, C, R)\t\t\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfmaddsh3_mask ((A), -(B), -(C), (-1), (R)))\n+#define _mm_mask_fnmsub_round_sh(A, U, B, C, R)\t\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfmaddsh3_mask ((A), -(B), -(C), (U), (R)))\n+#define _mm_mask3_fnmsub_round_sh(A, B, C, U, R)\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfmsubsh3_mask3 ((A), -(B), (C), (U), (R)))\n+#define _mm_maskz_fnmsub_round_sh(U, A, B, C, R)\t\t\t\\\n+  ((__m128h) __builtin_ia32_vfmaddsh3_maskz ((A), -(B), -(C), (U), (R)))\n+\n+#endif /* __OPTIMIZE__ */\n+\n #ifdef __DISABLE_AVX512FP16__\n #undef __DISABLE_AVX512FP16__\n #pragma GCC pop_options"}, {"sha": "5eae4d0376a7f9aa1d80f91e718ea8bc9e7c7a08", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=3c9de0a93e5b3560550e0459f018a5e55a9566e5", "patch": "@@ -1342,6 +1342,7 @@ DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, INT)\n DEF_FUNCTION_TYPE (V8HF, V8HF, INT, V8HF, UQI)\n DEF_FUNCTION_TYPE (UQI, V8HF, V8HF, INT, UQI)\n DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, UQI)\n+DEF_FUNCTION_TYPE (V8HF, V8HF, V8HF, V8HF, INT)\n DEF_FUNCTION_TYPE (UQI, V8HF, V8HF, INT, UQI, INT)\n DEF_FUNCTION_TYPE (V8DI, V8HF, V8DI, UQI, INT)\n DEF_FUNCTION_TYPE (V8DF, V8HF, V8DF, UQI, INT)"}, {"sha": "5950d5e5773e535938d6182d2a3aed756ab7e048", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=3c9de0a93e5b3560550e0459f018a5e55a9566e5", "patch": "@@ -3194,6 +3194,13 @@ BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fmsub_v32hf_maskz_round\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fnmsub_v32hf_mask_round, \"__builtin_ia32_vfnmsubph512_mask\", IX86_BUILTIN_VFNMSUBPH512_MASK, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fnmsub_v32hf_mask3_round, \"__builtin_ia32_vfnmsubph512_mask3\", IX86_BUILTIN_VFNMSUBPH512_MASK3, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512bw_fnmsub_v32hf_maskz_round, \"__builtin_ia32_vfnmsubph512_maskz\", IX86_BUILTIN_VFNMSUBPH512_MASKZ, UNKNOWN, (int) V32HF_FTYPE_V32HF_V32HF_V32HF_USI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmfmadd_v8hf_mask_round, \"__builtin_ia32_vfmaddsh3_mask\", IX86_BUILTIN_VFMADDSH3_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmfmadd_v8hf_mask3_round, \"__builtin_ia32_vfmaddsh3_mask3\", IX86_BUILTIN_VFMADDSH3_MASK3, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmfmadd_v8hf_maskz_round, \"__builtin_ia32_vfmaddsh3_maskz\", IX86_BUILTIN_VFMADDSH3_MASKZ, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmfnmadd_v8hf_mask_round, \"__builtin_ia32_vfnmaddsh3_mask\", IX86_BUILTIN_VFNMADDSH3_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmfnmadd_v8hf_mask3_round, \"__builtin_ia32_vfnmaddsh3_mask3\", IX86_BUILTIN_VFNMADDSH3_MASK3, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmfnmadd_v8hf_maskz_round, \"__builtin_ia32_vfnmaddsh3_maskz\", IX86_BUILTIN_VFNMADDSH3_MASKZ, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n+BDESC (0, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_avx512f_vmfmsub_v8hf_mask3_round, \"__builtin_ia32_vfmsubsh3_mask3\", IX86_BUILTIN_VFMSUBSH3_MASK3, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI_INT)\n \n BDESC_END (ROUND_ARGS, MULTI_ARG)\n "}, {"sha": "c88cb14bd72a1dbb93ec40baeefc761c12c25cc9", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=3c9de0a93e5b3560550e0459f018a5e55a9566e5", "patch": "@@ -10738,6 +10738,7 @@ ix86_expand_round_builtin (const struct builtin_description *d,\n     case V8HF_FTYPE_V8DI_V8HF_UQI_INT:\n     case V8HF_FTYPE_V8DF_V8HF_UQI_INT:\n     case V16HF_FTYPE_V16SF_V16HF_UHI_INT:\n+    case V8HF_FTYPE_V8HF_V8HF_V8HF_INT:\n       nargs = 4;\n       break;\n     case V4SF_FTYPE_V4SF_V4SF_INT_INT:"}, {"sha": "0016c027f0c36f1c26685fa4108fac3bad8dcbb6", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 177, "deletions": 163, "changes": 340, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3c9de0a93e5b3560550e0459f018a5e55a9566e5", "patch": "@@ -5343,60 +5343,60 @@\n ;; high-order elements from the destination register.\n \n (define_expand \"fmai_vmfmadd_<mode><round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\")\n-\t(vec_merge:VF_128\n-\t  (fma:VF_128\n-\t    (match_operand:VF_128 1 \"register_operand\")\n-\t    (match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\")\n-\t    (match_operand:VF_128 3 \"<round_nimm_scalar_predicate>\"))\n+  [(set (match_operand:VFH_128 0 \"register_operand\")\n+\t(vec_merge:VFH_128\n+\t  (fma:VFH_128\n+\t    (match_operand:VFH_128 1 \"register_operand\")\n+\t    (match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\")\n+\t    (match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_FMA\")\n \n (define_expand \"fmai_vmfmsub_<mode><round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\")\n-\t(vec_merge:VF_128\n-\t  (fma:VF_128\n-\t    (match_operand:VF_128 1 \"register_operand\")\n-\t    (match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\")\n-\t    (neg:VF_128\n-\t      (match_operand:VF_128 3 \"<round_nimm_scalar_predicate>\")))\n+  [(set (match_operand:VFH_128 0 \"register_operand\")\n+\t(vec_merge:VFH_128\n+\t  (fma:VFH_128\n+\t    (match_operand:VFH_128 1 \"register_operand\")\n+\t    (match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\")\n+\t    (neg:VFH_128\n+\t      (match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\")))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_FMA\")\n \n (define_expand \"fmai_vmfnmadd_<mode><round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\")\n-\t(vec_merge:VF_128\n-\t  (fma:VF_128\n-\t    (neg:VF_128\n-\t      (match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\"))\n-\t    (match_operand:VF_128 1 \"register_operand\")\n-\t    (match_operand:VF_128 3 \"<round_nimm_scalar_predicate>\"))\n+  [(set (match_operand:VFH_128 0 \"register_operand\")\n+\t(vec_merge:VFH_128\n+\t  (fma:VFH_128\n+\t    (neg:VFH_128\n+\t      (match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\"))\n+\t    (match_operand:VFH_128 1 \"register_operand\")\n+\t    (match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_FMA\")\n \n (define_expand \"fmai_vmfnmsub_<mode><round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\")\n-\t(vec_merge:VF_128\n-\t  (fma:VF_128\n-\t    (neg:VF_128\n-\t      (match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\"))\n-\t    (match_operand:VF_128 1 \"register_operand\")\n-\t    (neg:VF_128\n-\t      (match_operand:VF_128 3 \"<round_nimm_scalar_predicate>\")))\n+  [(set (match_operand:VFH_128 0 \"register_operand\")\n+\t(vec_merge:VFH_128\n+\t  (fma:VFH_128\n+\t    (neg:VFH_128\n+\t      (match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\"))\n+\t    (match_operand:VFH_128 1 \"register_operand\")\n+\t    (neg:VFH_128\n+\t      (match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\")))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_FMA\")\n \n (define_insn \"*fmai_fmadd_<mode>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n-        (vec_merge:VF_128\n-\t  (fma:VF_128\n-\t    (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n-\t    (match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>, v\")\n-\t    (match_operand:VF_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\"))\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v,v\")\n+        (vec_merge:VFH_128\n+\t  (fma:VFH_128\n+\t    (match_operand:VFH_128 1 \"register_operand\" \"0,0\")\n+\t    (match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>, v\")\n+\t    (match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_FMA || TARGET_AVX512F\"\n@@ -5407,13 +5407,13 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*fmai_fmsub_<mode>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n-        (vec_merge:VF_128\n-\t  (fma:VF_128\n-\t    (match_operand:VF_128   1 \"register_operand\" \"0,0\")\n-\t    (match_operand:VF_128   2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\")\n-\t    (neg:VF_128\n-\t      (match_operand:VF_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\")))\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v,v\")\n+        (vec_merge:VFH_128\n+\t  (fma:VFH_128\n+\t    (match_operand:VFH_128   1 \"register_operand\" \"0,0\")\n+\t    (match_operand:VFH_128   2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\")\n+\t    (neg:VFH_128\n+\t      (match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\")))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_FMA || TARGET_AVX512F\"\n@@ -5424,13 +5424,13 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*fmai_fnmadd_<mode><round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n-        (vec_merge:VF_128\n-\t  (fma:VF_128\n-\t    (neg:VF_128\n-\t      (match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\"))\n-\t    (match_operand:VF_128   1 \"register_operand\" \"0,0\")\n-\t    (match_operand:VF_128   3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\"))\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v,v\")\n+        (vec_merge:VFH_128\n+\t  (fma:VFH_128\n+\t    (neg:VFH_128\n+\t      (match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\"))\n+\t    (match_operand:VFH_128   1 \"register_operand\" \"0,0\")\n+\t    (match_operand:VFH_128   3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_FMA || TARGET_AVX512F\"\n@@ -5441,14 +5441,14 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*fmai_fnmsub_<mode><round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n-        (vec_merge:VF_128\n-\t  (fma:VF_128\n-\t    (neg:VF_128\n-\t      (match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\"))\n-\t    (match_operand:VF_128   1 \"register_operand\" \"0,0\")\n-\t    (neg:VF_128\n-\t      (match_operand:VF_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\")))\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v,v\")\n+        (vec_merge:VFH_128\n+\t  (fma:VFH_128\n+\t    (neg:VFH_128\n+\t      (match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\"))\n+\t    (match_operand:VFH_128   1 \"register_operand\" \"0,0\")\n+\t    (neg:VFH_128\n+\t      (match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\")))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n   \"TARGET_FMA || TARGET_AVX512F\"\n@@ -5459,13 +5459,13 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"avx512f_vmfmadd_<mode>_mask<round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_128\n-\t  (vec_merge:VF_128\n-\t    (fma:VF_128\n-\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n-\t      (match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\")\n-\t      (match_operand:VF_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\"))\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_merge:VFH_128\n+\t    (fma:VFH_128\n+\t      (match_operand:VFH_128 1 \"register_operand\" \"0,0\")\n+\t      (match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\")\n+\t      (match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\"))\n \t    (match_dup 1)\n \t    (match_operand:QI 4 \"register_operand\" \"Yk,Yk\"))\n \t  (match_dup 1)\n@@ -5478,13 +5478,13 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"avx512f_vmfmadd_<mode>_mask3<round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_128\n-\t  (vec_merge:VF_128\n-\t    (fma:VF_128\n-\t      (match_operand:VF_128 1 \"<round_nimm_scalar_predicate>\" \"%v\")\n-\t      (match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>\")\n-\t      (match_operand:VF_128 3 \"register_operand\" \"0\"))\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_merge:VFH_128\n+\t    (fma:VFH_128\n+\t      (match_operand:VFH_128 1 \"<round_nimm_scalar_predicate>\" \"%v\")\n+\t      (match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>\")\n+\t      (match_operand:VFH_128 3 \"register_operand\" \"0\"))\n \t    (match_dup 3)\n \t    (match_operand:QI 4 \"register_operand\" \"Yk\"))\n \t  (match_dup 3)\n@@ -5495,10 +5495,10 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"avx512f_vmfmadd_<mode>_maskz<round_expand_name>\"\n-  [(match_operand:VF_128 0 \"register_operand\")\n-   (match_operand:VF_128 1 \"<round_expand_nimm_predicate>\")\n-   (match_operand:VF_128 2 \"<round_expand_nimm_predicate>\")\n-   (match_operand:VF_128 3 \"<round_expand_nimm_predicate>\")\n+  [(match_operand:VFH_128 0 \"register_operand\")\n+   (match_operand:VFH_128 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VFH_128 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VFH_128 3 \"<round_expand_nimm_predicate>\")\n    (match_operand:QI 4 \"register_operand\")]\n   \"TARGET_AVX512F\"\n {\n@@ -5509,14 +5509,14 @@\n })\n \n (define_insn \"avx512f_vmfmadd_<mode>_maskz_1<round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_128\n-\t  (vec_merge:VF_128\n-\t    (fma:VF_128\n-\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n-\t      (match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\")\n-\t      (match_operand:VF_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\"))\n-\t    (match_operand:VF_128 4 \"const0_operand\" \"C,C\")\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_merge:VFH_128\n+\t    (fma:VFH_128\n+\t      (match_operand:VFH_128 1 \"register_operand\" \"0,0\")\n+\t      (match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\")\n+\t      (match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\"))\n+\t    (match_operand:VFH_128 4 \"const0_operand\" \"C,C\")\n \t    (match_operand:QI 5 \"register_operand\" \"Yk,Yk\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n@@ -5528,14 +5528,14 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*avx512f_vmfmsub_<mode>_mask<round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_128\n-\t  (vec_merge:VF_128\n-\t    (fma:VF_128\n-\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n-\t      (match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\")\n-\t      (neg:VF_128\n-\t\t(match_operand:VF_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\")))\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_merge:VFH_128\n+\t    (fma:VFH_128\n+\t      (match_operand:VFH_128 1 \"register_operand\" \"0,0\")\n+\t      (match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\")\n+\t      (neg:VFH_128\n+\t\t(match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\")))\n \t    (match_dup 1)\n \t    (match_operand:QI 4 \"register_operand\" \"Yk,Yk\"))\n \t  (match_dup 1)\n@@ -5548,14 +5548,14 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"avx512f_vmfmsub_<mode>_mask3<round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_128\n-\t  (vec_merge:VF_128\n-\t    (fma:VF_128\n-\t      (match_operand:VF_128 1 \"<round_nimm_scalar_predicate>\" \"%v\")\n-\t      (match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>\")\n-\t      (neg:VF_128\n-\t\t(match_operand:VF_128 3 \"register_operand\" \"0\")))\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_merge:VFH_128\n+\t    (fma:VFH_128\n+\t      (match_operand:VFH_128 1 \"<round_nimm_scalar_predicate>\" \"%v\")\n+\t      (match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>\")\n+\t      (neg:VFH_128\n+\t\t(match_operand:VFH_128 3 \"register_operand\" \"0\")))\n \t    (match_dup 3)\n \t    (match_operand:QI 4 \"register_operand\" \"Yk\"))\n \t  (match_dup 3)\n@@ -5566,15 +5566,15 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*avx512f_vmfmsub_<mode>_maskz_1<round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_128\n-\t  (vec_merge:VF_128\n-\t    (fma:VF_128\n-\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n-\t      (match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\")\n-\t      (neg:VF_128\n-\t\t(match_operand:VF_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\")))\n-\t    (match_operand:VF_128 4 \"const0_operand\" \"C,C\")\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_merge:VFH_128\n+\t    (fma:VFH_128\n+\t      (match_operand:VFH_128 1 \"register_operand\" \"0,0\")\n+\t      (match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\")\n+\t      (neg:VFH_128\n+\t\t(match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\")))\n+\t    (match_operand:VFH_128 4 \"const0_operand\" \"C,C\")\n \t    (match_operand:QI 5 \"register_operand\" \"Yk,Yk\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n@@ -5585,15 +5585,15 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*avx512f_vmfnmadd_<mode>_mask<round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_128\n-\t  (vec_merge:VF_128\n-\t    (fma:VF_128\n-\t      (neg:VF_128\n-\t\t(match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\"))\n-\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n-\t      (match_operand:VF_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\"))\n+(define_insn \"avx512f_vmfnmadd_<mode>_mask<round_name>\"\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_merge:VFH_128\n+\t    (fma:VFH_128\n+\t      (neg:VFH_128\n+\t\t(match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\"))\n+\t      (match_operand:VFH_128 1 \"register_operand\" \"0,0\")\n+\t      (match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\"))\n \t    (match_dup 1)\n \t    (match_operand:QI 4 \"register_operand\" \"Yk,Yk\"))\n \t  (match_dup 1)\n@@ -5605,15 +5605,15 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*avx512f_vmfnmadd_<mode>_mask3<round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_128\n-\t  (vec_merge:VF_128\n-\t    (fma:VF_128\n-\t      (neg:VF_128\n-\t\t(match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>\"))\n-\t      (match_operand:VF_128 1 \"<round_nimm_scalar_predicate>\" \"%v\")\n-\t      (match_operand:VF_128 3 \"register_operand\" \"0\"))\n+(define_insn \"avx512f_vmfnmadd_<mode>_mask3<round_name>\"\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_merge:VFH_128\n+\t    (fma:VFH_128\n+\t      (neg:VFH_128\n+\t\t(match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>\"))\n+\t      (match_operand:VFH_128 1 \"<round_nimm_scalar_predicate>\" \"%v\")\n+\t      (match_operand:VFH_128 3 \"register_operand\" \"0\"))\n \t    (match_dup 3)\n \t    (match_operand:QI 4 \"register_operand\" \"Yk\"))\n \t  (match_dup 3)\n@@ -5623,16 +5623,30 @@\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*avx512f_vmfnmadd_<mode>_maskz_1<round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_128\n-\t  (vec_merge:VF_128\n-\t    (fma:VF_128\n-\t      (neg:VF_128\n-\t\t(match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\"))\n-\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n-\t      (match_operand:VF_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\"))\n-\t    (match_operand:VF_128 4 \"const0_operand\" \"C,C\")\n+(define_expand \"avx512f_vmfnmadd_<mode>_maskz<round_expand_name>\"\n+  [(match_operand:VFH_128 0 \"register_operand\")\n+   (match_operand:VFH_128 1 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VFH_128 2 \"<round_expand_nimm_predicate>\")\n+   (match_operand:VFH_128 3 \"<round_expand_nimm_predicate>\")\n+   (match_operand:QI 4 \"register_operand\")]\n+  \"TARGET_AVX512F\"\n+{\n+  emit_insn (gen_avx512f_vmfnmadd_<mode>_maskz_1<round_expand_name> (\n+    operands[0], operands[1], operands[2], operands[3],\n+    CONST0_RTX (<MODE>mode), operands[4]<round_expand_operand>));\n+  DONE;\n+})\n+\n+(define_insn \"avx512f_vmfnmadd_<mode>_maskz_1<round_name>\"\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_merge:VFH_128\n+\t    (fma:VFH_128\n+\t      (neg:VFH_128\n+\t\t(match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\"))\n+\t      (match_operand:VFH_128 1 \"register_operand\" \"0,0\")\n+\t      (match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\"))\n+\t    (match_operand:VFH_128 4 \"const0_operand\" \"C,C\")\n \t    (match_operand:QI 5 \"register_operand\" \"Yk,Yk\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n@@ -5644,15 +5658,15 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*avx512f_vmfnmsub_<mode>_mask<round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_128\n-\t  (vec_merge:VF_128\n-\t    (fma:VF_128\n-\t      (neg:VF_128\n-\t\t(match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\"))\n-\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n-\t      (neg:VF_128\n-\t\t(match_operand:VF_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\")))\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_merge:VFH_128\n+\t    (fma:VFH_128\n+\t      (neg:VFH_128\n+\t\t(match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\"))\n+\t      (match_operand:VFH_128 1 \"register_operand\" \"0,0\")\n+\t      (neg:VFH_128\n+\t\t(match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\")))\n \t    (match_dup 1)\n \t    (match_operand:QI 4 \"register_operand\" \"Yk,Yk\"))\n \t  (match_dup 1)\n@@ -5665,15 +5679,15 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*avx512f_vmfnmsub_<mode>_mask3<round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v\")\n-\t(vec_merge:VF_128\n-\t  (vec_merge:VF_128\n-\t    (fma:VF_128\n-\t      (neg:VF_128\n-\t\t(match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>\"))\n-\t      (match_operand:VF_128 1 \"<round_nimm_scalar_predicate>\" \"%v\")\n-\t      (neg:VF_128\n-\t\t(match_operand:VF_128 3 \"register_operand\" \"0\")))\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_merge:VFH_128\n+\t    (fma:VFH_128\n+\t      (neg:VFH_128\n+\t\t(match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>\"))\n+\t      (match_operand:VFH_128 1 \"<round_nimm_scalar_predicate>\" \"%v\")\n+\t      (neg:VFH_128\n+\t\t(match_operand:VFH_128 3 \"register_operand\" \"0\")))\n \t    (match_dup 3)\n \t    (match_operand:QI 4 \"register_operand\" \"Yk\"))\n \t  (match_dup 3)\n@@ -5684,16 +5698,16 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*avx512f_vmfnmsub_<mode>_maskz_1<round_name>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=v,v\")\n-\t(vec_merge:VF_128\n-\t  (vec_merge:VF_128\n-\t    (fma:VF_128\n-\t      (neg:VF_128\n-\t\t(match_operand:VF_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\"))\n-\t      (match_operand:VF_128 1 \"register_operand\" \"0,0\")\n-\t      (neg:VF_128\n-\t\t(match_operand:VF_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\")))\n-\t    (match_operand:VF_128 4 \"const0_operand\" \"C,C\")\n+  [(set (match_operand:VFH_128 0 \"register_operand\" \"=v,v\")\n+\t(vec_merge:VFH_128\n+\t  (vec_merge:VFH_128\n+\t    (fma:VFH_128\n+\t      (neg:VFH_128\n+\t\t(match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\"))\n+\t      (match_operand:VFH_128 1 \"register_operand\" \"0,0\")\n+\t      (neg:VFH_128\n+\t\t(match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\")))\n+\t    (match_operand:VFH_128 4 \"const0_operand\" \"C,C\")\n \t    (match_operand:QI 5 \"register_operand\" \"Yk,Yk\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]"}, {"sha": "a04c678dc3725080a3b5eded9b45e80bd269f42d", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=3c9de0a93e5b3560550e0459f018a5e55a9566e5", "patch": "@@ -775,6 +775,18 @@\n #define __builtin_ia32_vfnmsubph512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubph512_mask(A, B, C, D, 8)\n #define __builtin_ia32_vfnmsubph512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubph512_mask3(A, B, C, D, 8)\n #define __builtin_ia32_vfnmsubph512_maskz(A, B, C, D, E) __builtin_ia32_vfnmsubph512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsh3_mask(A, B, C, D, E) __builtin_ia32_vfmaddsh3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsh3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsh3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsh3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsh3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmaddsh3_mask(A, B, C, D, E) __builtin_ia32_vfnmaddsh3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmaddsh3_mask3(A, B, C, D, E) __builtin_ia32_vfnmaddsh3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmaddsh3_maskz(A, B, C, D, E) __builtin_ia32_vfnmaddsh3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubsh3_mask(A, B, C, D, E) __builtin_ia32_vfmsubsh3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubsh3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubsh3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubsh3_maskz(A, B, C, D, E) __builtin_ia32_vfmsubsh3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubsh3_mask(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubsh3_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "e9a838edf70d0123850645fce1f2249c2946d2d5", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=3c9de0a93e5b3560550e0459f018a5e55a9566e5", "patch": "@@ -792,6 +792,18 @@\n #define __builtin_ia32_vfnmsubph512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubph512_mask(A, B, C, D, 8)\n #define __builtin_ia32_vfnmsubph512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubph512_mask3(A, B, C, D, 8)\n #define __builtin_ia32_vfnmsubph512_maskz(A, B, C, D, E) __builtin_ia32_vfnmsubph512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsh3_mask(A, B, C, D, E) __builtin_ia32_vfmaddsh3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsh3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsh3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsh3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsh3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmaddsh3_mask(A, B, C, D, E) __builtin_ia32_vfnmaddsh3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmaddsh3_mask3(A, B, C, D, E) __builtin_ia32_vfnmaddsh3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmaddsh3_maskz(A, B, C, D, E) __builtin_ia32_vfnmaddsh3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubsh3_mask(A, B, C, D, E) __builtin_ia32_vfmsubsh3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubsh3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubsh3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubsh3_maskz(A, B, C, D, E) __builtin_ia32_vfmsubsh3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubsh3_mask(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubsh3_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}, {"sha": "01ac4e041735d9117240edfcd8ac668ae96acfac", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=3c9de0a93e5b3560550e0459f018a5e55a9566e5", "patch": "@@ -842,6 +842,10 @@ test_3 (_mm512_fmadd_round_ph, __m512h, __m512h, __m512h, __m512h, 9)\n test_3 (_mm512_fnmadd_round_ph, __m512h, __m512h, __m512h, __m512h, 9)\n test_3 (_mm512_fmsub_round_ph, __m512h, __m512h, __m512h, __m512h, 9)\n test_3 (_mm512_fnmsub_round_ph, __m512h, __m512h, __m512h, __m512h, 9)\n+test_3 (_mm_fmadd_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n+test_3 (_mm_fnmadd_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n+test_3 (_mm_fmsub_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n+test_3 (_mm_fnmsub_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n@@ -892,6 +896,18 @@ test_4 (_mm512_maskz_fmsub_round_ph, __m512h, __mmask32, __m512h, __m512h, __m51\n test_4 (_mm512_mask_fnmsub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 9)\n test_4 (_mm512_mask3_fnmsub_round_ph, __m512h, __m512h, __m512h, __m512h, __mmask32, 9)\n test_4 (_mm512_maskz_fnmsub_round_ph, __m512h, __mmask32, __m512h, __m512h, __m512h, 9)\n+test_4 (_mm_mask_fmadd_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 9)\n+test_4 (_mm_mask3_fmadd_round_sh, __m128h, __m128h, __m128h, __m128h, __mmask8, 9)\n+test_4 (_mm_maskz_fmadd_round_sh, __m128h, __mmask8, __m128h, __m128h, __m128h, 9)\n+test_4 (_mm_mask_fnmadd_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 9)\n+test_4 (_mm_mask3_fnmadd_round_sh, __m128h, __m128h, __m128h, __m128h, __mmask8, 9)\n+test_4 (_mm_maskz_fnmadd_round_sh, __m128h, __mmask8, __m128h, __m128h, __m128h, 9)\n+test_4 (_mm_mask_fmsub_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 9)\n+test_4 (_mm_mask3_fmsub_round_sh, __m128h, __m128h, __m128h, __m128h, __mmask8, 9)\n+test_4 (_mm_maskz_fmsub_round_sh, __m128h, __mmask8, __m128h, __m128h, __m128h, 9)\n+test_4 (_mm_mask_fnmsub_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 9)\n+test_4 (_mm_mask3_fnmsub_round_sh, __m128h, __m128h, __m128h, __m128h, __mmask8, 9)\n+test_4 (_mm_maskz_fnmsub_round_sh, __m128h, __mmask8, __m128h, __m128h, __m128h, 9)\n test_4x (_mm_mask_reduce_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_roundscale_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_getmant_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 1, 1)"}, {"sha": "79e3f35ab86930bb0f027870c16a4a9ee4ad5505", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=3c9de0a93e5b3560550e0459f018a5e55a9566e5", "patch": "@@ -945,6 +945,10 @@ test_3 (_mm512_fmadd_round_ph, __m512h, __m512h, __m512h, __m512h, 9)\n test_3 (_mm512_fnmadd_round_ph, __m512h, __m512h, __m512h, __m512h, 9)\n test_3 (_mm512_fmsub_round_ph, __m512h, __m512h, __m512h, __m512h, 9)\n test_3 (_mm512_fnmsub_round_ph, __m512h, __m512h, __m512h, __m512h, 9)\n+test_3 (_mm_fmadd_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n+test_3 (_mm_fnmadd_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n+test_3 (_mm_fmsub_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n+test_3 (_mm_fnmsub_round_sh, __m128h, __m128h, __m128h, __m128h, 9)\n test_3x (_mm512_mask_cmp_round_ph_mask, __mmask32, __mmask32, __m512h, __m512h, 1, 8)\n test_3x (_mm_mask_cmp_round_sh_mask, __mmask8, __mmask8, __m128h, __m128h, 1, 8)\n test_3x (_mm512_mask_reduce_round_ph, __m512h, __m512h, __mmask32, __m512h, 123, 8)\n@@ -994,6 +998,18 @@ test_4 (_mm512_maskz_fmsub_round_ph, __m512h, __mmask32, __m512h, __m512h, __m51\n test_4 (_mm512_mask_fnmsub_round_ph, __m512h, __m512h, __mmask32, __m512h, __m512h, 9)\n test_4 (_mm512_mask3_fnmsub_round_ph, __m512h, __m512h, __m512h, __m512h, __mmask32, 9)\n test_4 (_mm512_maskz_fnmsub_round_ph, __m512h, __mmask32, __m512h, __m512h, __m512h, 9)\n+test_4 (_mm_mask_fmadd_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 9)\n+test_4 (_mm_mask3_fmadd_round_sh, __m128h, __m128h, __m128h, __m128h, __mmask8, 9)\n+test_4 (_mm_maskz_fmadd_round_sh, __m128h, __mmask8, __m128h, __m128h, __m128h, 9)\n+test_4 (_mm_mask_fnmadd_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 9)\n+test_4 (_mm_mask3_fnmadd_round_sh, __m128h, __m128h, __m128h, __m128h, __mmask8, 9)\n+test_4 (_mm_maskz_fnmadd_round_sh, __m128h, __mmask8, __m128h, __m128h, __m128h, 9)\n+test_4 (_mm_mask_fmsub_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 9)\n+test_4 (_mm_mask3_fmsub_round_sh, __m128h, __m128h, __m128h, __m128h, __mmask8, 9)\n+test_4 (_mm_maskz_fmsub_round_sh, __m128h, __mmask8, __m128h, __m128h, __m128h, 9)\n+test_4 (_mm_mask_fnmsub_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 9)\n+test_4 (_mm_mask3_fnmsub_round_sh, __m128h, __m128h, __m128h, __m128h, __mmask8, 9)\n+test_4 (_mm_maskz_fnmsub_round_sh, __m128h, __mmask8, __m128h, __m128h, __m128h, 9)\n test_4x (_mm_mask_reduce_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_roundscale_round_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 123, 8)\n test_4x (_mm_mask_getmant_sh, __m128h, __m128h, __mmask8, __m128h, __m128h, 1, 1)"}, {"sha": "4be2c1e16288648557f613c73320fed2f7a2cfb9", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c9de0a93e5b3560550e0459f018a5e55a9566e5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=3c9de0a93e5b3560550e0459f018a5e55a9566e5", "patch": "@@ -793,6 +793,18 @@\n #define __builtin_ia32_vfnmsubph512_mask(A, B, C, D, E) __builtin_ia32_vfnmsubph512_mask(A, B, C, D, 8)\n #define __builtin_ia32_vfnmsubph512_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubph512_mask3(A, B, C, D, 8)\n #define __builtin_ia32_vfnmsubph512_maskz(A, B, C, D, E) __builtin_ia32_vfnmsubph512_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsh3_mask(A, B, C, D, E) __builtin_ia32_vfmaddsh3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsh3_mask3(A, B, C, D, E) __builtin_ia32_vfmaddsh3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmaddsh3_maskz(A, B, C, D, E) __builtin_ia32_vfmaddsh3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmaddsh3_mask(A, B, C, D, E) __builtin_ia32_vfnmaddsh3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmaddsh3_mask3(A, B, C, D, E) __builtin_ia32_vfnmaddsh3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmaddsh3_maskz(A, B, C, D, E) __builtin_ia32_vfnmaddsh3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubsh3_mask(A, B, C, D, E) __builtin_ia32_vfmsubsh3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubsh3_mask3(A, B, C, D, E) __builtin_ia32_vfmsubsh3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfmsubsh3_maskz(A, B, C, D, E) __builtin_ia32_vfmsubsh3_maskz(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubsh3_mask(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_mask(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubsh3_mask3(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_mask3(A, B, C, D, 8)\n+#define __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, E) __builtin_ia32_vfnmsubsh3_maskz(A, B, C, D, 8)\n \n /* avx512fp16vlintrin.h */\n #define __builtin_ia32_cmpph128_mask(A, B, C, D) __builtin_ia32_cmpph128_mask(A, B, 1, D)"}]}