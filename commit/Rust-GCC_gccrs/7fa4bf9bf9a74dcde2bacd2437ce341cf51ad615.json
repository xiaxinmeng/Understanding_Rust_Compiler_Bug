{"sha": "7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZhNGJmOWJmOWE3NGRjZGUyYmFjZDI0MzdjZTM0MWNmNTFhZDYxNQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-08-29T18:40:09Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-08-29T18:40:09Z"}, "message": "iterators.md: New file.\n\n\t* config/sh/iterators.md: New file.\n\t* config/sh/sync.md (I124, I12, i124suffix): Delete.  Replace usage with\n\tnew iterators QIHISI, QIHI, bw, bwl respectively throughout the file.\n\t* config/sh/sh.md: Include new file iterators.md.\n\t(zero_extendhisi2, zero_extendqisi2): Fold into zero_extend<mode>si2.\n\t(*zero_extendhisi2_compact, *zero_extendqisi2_compact): Fold into\n\t*zero_extend<mode>si2_compact.\n\t(*zero_extendqisi2_disp_mem, zero_extendhisi2_disp_mem): Fold into\n\t*zero_extend<mode>si2_disp_mem.\n\t(extendhisi2, extendqisi2): Fold into extend<mode>si2.\n\t(*extendqisi2_compact_reg, *extendhisi2_compact_reg): Fold into\n\t*extend<mode>si2_compact_reg.\n\t(*extendqisi2_compact_mem_disp, *extendhisi2_compact_mem_disp): Fold\n\tinto *extend<mode>si2_compact_mem_disp.\n\t(*extendqisi2_compact_snd, *extendhisi2_compact_snd): Fold into\n\t*extend<mode>si2_compact_snd.\n\t(*movsi_index_disp, *movhi_index_disp): Fold with iterators and rename\n\tto *movsi_index_disp_load, *movhi_index_disp_load,\n\t*mov<mode>_index_disp_store.\n\t(*movqi_reg_reg, *movhi_reg_reg): Fold into *mov<mode>_reg_reg.\n\t(*movqi_store_mem_disp04, *movhi_store_mem_disp05): Fold into\n\t*mov<mode>_store_mem_disp04.\n\t(*movqi_store_mem_disp12, *movhi_store_mem_disp13): Fold into\n\t*mov<mode>_store_mem_disp12.\n\t(*movqi_load_mem_disp, *movhi_load_mem_disp): Fold into\n\t*mov<mode>_load_mem_disp04 and *mov<mode>_load_mem_disp12.\n\nFrom-SVN: r190781", "tree": {"sha": "cd4f5b07f473a46bcd24f69225ac13174a7c2e33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd4f5b07f473a46bcd24f69225ac13174a7c2e33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615/comments", "author": null, "committer": null, "parents": [{"sha": "de99ac704f22e270267d4be6244c35439aea72c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de99ac704f22e270267d4be6244c35439aea72c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de99ac704f22e270267d4be6244c35439aea72c8"}], "stats": {"total": 688, "additions": 298, "deletions": 390}, "files": [{"sha": "a9c6078c0761a21e7d5b54fd3dbd794d00cc18e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615", "patch": "@@ -1,3 +1,32 @@\n+2012-08-29  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/iterators.md: New file.\n+\t* config/sh/sync.md (I124, I12, i124suffix): Delete.  Replace usage with\n+\tnew iterators QIHISI, QIHI, bw, bwl respectively throughout the file.\n+\t* config/sh/sh.md: Include new file iterators.md.\n+\t(zero_extendhisi2, zero_extendqisi2): Fold into zero_extend<mode>si2.\n+\t(*zero_extendhisi2_compact, *zero_extendqisi2_compact): Fold into\n+\t*zero_extend<mode>si2_compact.\n+\t(*zero_extendqisi2_disp_mem, zero_extendhisi2_disp_mem): Fold into\n+\t*zero_extend<mode>si2_disp_mem.\n+\t(extendhisi2, extendqisi2): Fold into extend<mode>si2.\n+\t(*extendqisi2_compact_reg, *extendhisi2_compact_reg): Fold into\n+\t*extend<mode>si2_compact_reg.\n+\t(*extendqisi2_compact_mem_disp, *extendhisi2_compact_mem_disp): Fold\n+\tinto *extend<mode>si2_compact_mem_disp.\n+\t(*extendqisi2_compact_snd, *extendhisi2_compact_snd): Fold into\n+\t*extend<mode>si2_compact_snd.\n+\t(*movsi_index_disp, *movhi_index_disp): Fold with iterators and rename\n+\tto *movsi_index_disp_load, *movhi_index_disp_load,\n+\t*mov<mode>_index_disp_store.\n+\t(*movqi_reg_reg, *movhi_reg_reg): Fold into *mov<mode>_reg_reg.\n+\t(*movqi_store_mem_disp04, *movhi_store_mem_disp05): Fold into\n+\t*mov<mode>_store_mem_disp04.\n+\t(*movqi_store_mem_disp12, *movhi_store_mem_disp13): Fold into\n+\t*mov<mode>_store_mem_disp12.\n+\t(*movqi_load_mem_disp, *movhi_load_mem_disp): Fold into\n+\t*mov<mode>_load_mem_disp04 and *mov<mode>_load_mem_disp12.\n+\n 2012-08-29  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-inline.h (estimate_edge_hints): Call do_estimate_edge_hints, not"}, {"sha": "9d536c525af0ee403ab7834371cde1f45d460709", "filename": "gcc/config/sh/iterators.md", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615/gcc%2Fconfig%2Fsh%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615/gcc%2Fconfig%2Fsh%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fiterators.md?ref=7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615", "patch": "@@ -0,0 +1,36 @@\n+;; Iterator definitions for GCC SH machine description files.\n+;; Copyright (C) 2012\n+;; Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_mode_iterator QIHISI [QI HI SI])\n+(define_mode_iterator QIHI [QI HI])\n+(define_mode_iterator HISI [HI SI])\n+\n+;; Mode attributes that can be used as the instruction suffix for mode\n+;; variant instructions.\n+(define_mode_attr bw [(QI \"b\") (HI \"w\")])\n+(define_mode_attr bwl [(QI \"b\") (HI \"w\") (SI \"l\")])\n+\n+;; Sign/zero-extension code iterator.\n+(define_code_iterator SZ_EXTEND [sign_extend zero_extend])\n+\n+;; Mode attributes for mov.b and mov.w displacement constraints.\n+(define_mode_attr disp04 [(QI \"K04\") (HI \"K05\")])\n+(define_mode_attr disp12 [(QI \"K12\") (HI \"K13\")])\n+"}, {"sha": "70d6d7b247545e8844290345cefd37ed2f990aba", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 97, "deletions": 251, "changes": 348, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615", "patch": "@@ -465,6 +465,7 @@\n (include \"shmedia.md\")\n (include \"sh4.md\")\n \n+(include \"iterators.md\")\n (include \"predicates.md\")\n (include \"constraints.md\")\n \n@@ -928,6 +929,7 @@\n \t\t\t   (label_ref (match_dup 2))\n \t\t\t   (pc)))])\n \n+;; FIXME: These could probably use code iterators for the compare op.\n (define_split\n   [(set (pc)\n \t(if_then_else (le (match_operand:SI 0 \"arith_reg_operand\" \"\")\n@@ -5311,15 +5313,15 @@ label:\n \t       (const_string \"user\")]\n \t      (const_string \"ignore\")))])\n \n-(define_expand \"zero_extendhisi2\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n-\t(zero_extend:SI (match_operand:HI 1 \"zero_extend_operand\" \"\")))])\n+(define_expand \"zero_extend<mode>si2\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\")\n+\t(zero_extend:SI (match_operand:QIHI 1 \"zero_extend_operand\")))])\n \n-(define_insn \"*zero_extendhisi2_compact\"\n+(define_insn \"*zero_extend<mode>si2_compact\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-\t(zero_extend:SI (match_operand:HI 1 \"arith_reg_operand\" \"r\")))]\n+\t(zero_extend:SI (match_operand:QIHI 1 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SH1\"\n-  \"extu.w\t%1,%0\"\n+  \"extu.<bw>\t%1,%0\"\n   [(set_attr \"type\" \"arith\")])\n \n (define_insn \"*zero_extendhisi2_media\"\n@@ -5351,17 +5353,6 @@ label:\n \t\t\t   subreg_lowpart_offset (SImode, GET_MODE (op1)));\n })\n \n-(define_expand \"zero_extendqisi2\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n-\t(zero_extend:SI (match_operand:QI 1 \"zero_extend_operand\" \"\")))])\n-\n-(define_insn \"*zero_extendqisi2_compact\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-\t(zero_extend:SI (match_operand:QI 1 \"arith_reg_operand\" \"r\")))]\n-  \"TARGET_SH1\"\n-  \"extu.b\t%1,%0\"\n-  [(set_attr \"type\" \"arith\")])\n-\n (define_insn \"*zero_extendqisi2_media\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:SI (match_operand:QI 1 \"general_extend_operand\" \"r,m\")))]\n@@ -5392,25 +5383,14 @@ label:\n ;; zero-displacement addresses might be generated during reload, wich are\n ;; simplified to simple register addresses in turn.  Thus, we have to\n ;; provide the Sdd and Sra alternatives in the patterns.\n-(define_insn \"*zero_extendqisi2_disp_mem\"\n+(define_insn \"*zero_extend<mode>si2_disp_mem\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r,r\")\n \t(zero_extend:SI\n-\t  (match_operand:QI 1 \"zero_extend_movu_operand\" \"Sdd,Sra\")))]\n+\t  (match_operand:QIHI 1 \"zero_extend_movu_operand\" \"Sdd,Sra\")))]\n   \"TARGET_SH2A\"\n   \"@\n-\tmovu.b\t%1,%0\n-\tmovu.b\t@(0,%t1),%0\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"*zero_extendhisi2_disp_mem\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r,r\")\n-\t(zero_extend:SI\n-\t  (match_operand:HI 1 \"zero_extend_movu_operand\" \"Sdd,Sra\")))]\n-  \"TARGET_SH2A\"\n-  \"@\n-\tmovu.w\t%1,%0\n-\tmovu.w\t@(0,%t1),%0\"\n+\tmovu.<bw>\t%1,%0\n+\tmovu.<bw>\t@(0,%t1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -5534,18 +5514,9 @@ label:\n     operands[1] = XEXP (operands[1], 0);\n })\n \n-;; FIXME: Maybe fold HImode and QImode stuff with mode iterator?\n-(define_expand \"extendhisi2\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n-\t(sign_extend:SI (match_operand:HI 1 \"general_extend_operand\" \"\")))]\n-  \"\"\n-  \"\")\n-\n-(define_expand \"extendqisi2\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n-\t(sign_extend:SI (match_operand:QI 1 \"general_extend_operand\" \"\")))]\n-  \"\"\n-  \"\")\n+(define_expand \"extend<mode>si2\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\")\n+\t(sign_extend:SI (match_operand:QIHI 1 \"general_extend_operand\")))])\n \n (define_insn \"*extendhisi2_media\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n@@ -5575,88 +5546,54 @@ label:\n \t\t\t   subreg_lowpart_offset (SImode, GET_MODE (op1)));\n })\n \n-(define_insn \"*extendqisi2_compact_reg\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-\t(sign_extend:SI (match_operand:QI 1 \"arith_reg_operand\" \"r\")))]\n-  \"TARGET_SH1\"\n-  \"exts.b\t%1,%0\"\n-  [(set_attr \"type\" \"arith\")])\n-\n-(define_insn \"*extendhisi2_compact_reg\"\n+(define_insn \"*extend<mode>si2_compact_reg\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-\t(sign_extend:SI (match_operand:HI 1 \"arith_reg_operand\" \"r\")))]\n+\t(sign_extend:SI (match_operand:QIHI 1 \"arith_reg_operand\" \"r\")))]\n   \"TARGET_SH1\"\n-  \"exts.w\t%1,%0\"\n+  \"exts.<bw>\t%1,%0\"\n   [(set_attr \"type\" \"arith\")])\n \n ;; FIXME: Fold non-SH2A and SH2A alternatives with \"enabled\" attribute.\n ;; See movqi insns.\n-(define_insn \"*extendqisi2_compact_mem_disp\"\n+(define_insn \"*extend<mode>si2_compact_mem_disp\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=z,r\")\n \t(sign_extend:SI\n-\t (mem:QI (plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"%r,r\")\n-\t\t\t  (match_operand:SI 2 \"const_int_operand\" \"K04,N\")))))]\n+\t  (mem:QIHI\n+\t    (plus:SI\n+\t      (match_operand:SI 1 \"arith_reg_operand\" \"%r,r\")\n+\t      (match_operand:SI 2 \"const_int_operand\" \"<disp04>,N\")))))]\n   \"TARGET_SH1 && ! TARGET_SH2A\n-   && sh_legitimate_index_p (QImode, operands[2], false, true)\"\n+   && sh_legitimate_index_p (<MODE>mode, operands[2], false, true)\"\n   \"@\n-\tmov.b\t@(%O2,%1),%0\n-\tmov.b\t@%1,%0\"\n+\tmov.<bw>\t@(%O2,%1),%0\n+\tmov.<bw>\t@%1,%0\"\n   [(set_attr \"type\" \"load\")])\n \n-(define_insn \"*extendhisi2_compact_mem_disp\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=z,r\")\n-\t(sign_extend:SI\n-\t (mem:HI (plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"%r,r\")\n-\t\t\t  (match_operand:SI 2 \"const_int_operand\" \"K05,N\")))))]\n-  \"TARGET_SH1 && ! TARGET_SH2A\n-   && sh_legitimate_index_p (HImode, operands[2], false, true)\"\n-  \"@\n-\tmov.w\t@(%O2,%1),%0\n-\tmov.w\t@%1,%0\"\n-  [(set_attr \"type\" \"load\")])\n-\n-(define_insn \"*extendqisi2_compact_mem_disp\"\n+(define_insn \"*extend<mode>si2_compact_mem_disp\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=z,r,r\")\n \t(sign_extend:SI\n-\t (mem:QI (plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"%r,r,r\")\n-\t\t\t  (match_operand:SI 2 \"const_int_operand\" \"K04,N,K12\")))))]\n+\t  (mem:QIHI\n+\t    (plus:SI\n+\t      (match_operand:SI 1 \"arith_reg_operand\" \"%r,r,r\")\n+\t      (match_operand:SI 2 \"const_int_operand\" \"<disp04>,N,<disp12>\")))))]\n   \"TARGET_SH2A && sh_legitimate_index_p (QImode, operands[2], true, true)\"\n   \"@\n-\tmov.b\t@(%O2,%1),%0\n-\tmov.b\t@%1,%0\n-\tmov.b\t@(%O2,%1),%0\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"2,2,4\")])\n-\n-(define_insn \"*extendhisi2_compact_mem_disp\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=z,r,r\")\n-\t(sign_extend:SI\n-\t (mem:HI (plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"%r,r,r\")\n-\t\t\t  (match_operand:SI 2 \"const_int_operand\" \"K05,N,K13\")))))]\n-  \"TARGET_SH2A && sh_legitimate_index_p (HImode, operands[2], true, true)\"\n-  \"@\n-\tmov.w\t@(%O2,%1),%0\n-\tmov.w\t@%1,%0\n-\tmov.w\t@(%O2,%1),%0\"\n+\tmov.<bw>\t@(%O2,%1),%0\n+\tmov.<bw>\t@%1,%0\n+\tmov.<bw>\t@(%O2,%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"2,2,4\")])\n \n ;; The *_snd patterns will take care of other QImode/HImode addressing\n ;; modes than displacement addressing.  They must be defined _after_ the\n ;; displacement addressing patterns.  Otherwise the displacement addressing\n ;; patterns will not be picked.\n-(define_insn \"*extendqisi2_compact_snd\"\n+(define_insn \"*extend<mode>si2_compact_snd\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-\t(sign_extend:SI (match_operand:QI 1 \"movsrc_no_disp_mem_operand\" \"Snd\")))]\n-  \"TARGET_SH1\"\n-  \"mov.b\t%1,%0\"\n-  [(set_attr \"type\" \"load\")])\n-\n-(define_insn \"*extendhisi2_compact_snd\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-\t(sign_extend:SI (match_operand:HI 1 \"movsrc_no_disp_mem_operand\" \"Snd\")))]\n+\t(sign_extend:SI\n+\t  (match_operand:QIHI 1 \"movsrc_no_disp_mem_operand\" \"Snd\")))]\n   \"TARGET_SH1\"\n-  \"mov.w\t%1,%0\"\n+  \"mov.<bw>\t%1,%0\"\n   [(set_attr \"type\" \"load\")])\n \n (define_insn \"*extendqisi2_media\"\n@@ -5887,9 +5824,8 @@ label:\n ;; sh_ashlsi_clobbers_t_reg_p.  When splitting out the shifts we must go\n ;; through the ashlsi3 expander in order to get the right shift insn --\n ;; a T_REG clobbering or non-clobbering shift sequence or dynamic shift.\n-;; FIXME: Fold copy pasted patterns somehow.\n ;; FIXME: Combine never tries this kind of patterns for DImode.\n-(define_insn_and_split \"*movsi_index_disp\"\n+(define_insn_and_split \"*movsi_index_disp_load\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n \t(match_operand:SI 1 \"mem_index_disp_operand\" \"m\"))\n    (clobber (reg:SI T_REG))]\n@@ -5917,37 +5853,9 @@ label:\n   emit_insn (gen_ashlsi3 (operands[5], operands[1], operands[2]));\n })\n \n-(define_insn_and_split \"*movhi_index_disp\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-\t(sign_extend:SI (match_operand:HI 1 \"mem_index_disp_operand\" \"m\")))\n-   (clobber (reg:SI T_REG))]\n-  \"TARGET_SH1\"\n-  \"#\"\n-  \"&& can_create_pseudo_p ()\"\n-  [(set (match_dup 6) (plus:SI (match_dup 5) (match_dup 3)))\n-   (set (match_dup 0) (sign_extend:SI (match_dup 7)))]\n-{\n-  rtx mem = operands[1];\n-  rtx plus0_rtx = XEXP (mem, 0);\n-  rtx plus1_rtx = XEXP (plus0_rtx, 0);\n-  rtx mult_rtx = XEXP (plus1_rtx, 0);\n-\n-  operands[1] = XEXP (mult_rtx, 0);\n-  operands[2] = GEN_INT (exact_log2 (INTVAL (XEXP (mult_rtx, 1))));\n-  operands[3] = XEXP (plus1_rtx, 1);\n-  operands[4] = XEXP (plus0_rtx, 1);\n-  operands[5] = gen_reg_rtx (SImode);\n-  operands[6] = gen_reg_rtx (SImode);\n-  operands[7] =\n-    replace_equiv_address (mem,\n-\t\t\t   gen_rtx_PLUS (SImode, operands[6], operands[4]));\n-\n-  emit_insn (gen_ashlsi3 (operands[5], operands[1], operands[2]));\n-})\n-\n-(define_insn_and_split \"*movhi_index_disp\"\n+(define_insn_and_split \"*movhi_index_disp_load\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\")\n-\t(zero_extend:SI (match_operand:HI 1 \"mem_index_disp_operand\")))\n+\t(SZ_EXTEND:SI (match_operand:HI 1 \"mem_index_disp_operand\")))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n   \"#\"\n@@ -5970,49 +5878,31 @@ label:\n   emit_insn (gen_ashlsi3 (op_5, op_1, op_2));\n   emit_insn (gen_addsi3 (op_6, op_5, op_3));\n \n-  /* On SH2A the movu.w insn can be used for zero extending loads.  */\n-  if (TARGET_SH2A)\n-    emit_insn (gen_zero_extendhisi2 (operands[0], op_7));\n-  else\n+  if (<CODE> == SIGN_EXTEND)\n     {\n       emit_insn (gen_extendhisi2 (operands[0], op_7));\n-      emit_insn (gen_zero_extendhisi2 (operands[0],\n-\t\t\t\t       gen_lowpart (HImode, operands[0])));\n+      DONE;\n     }\n-  DONE;\n-})\n-\n-(define_insn_and_split \"*movsi_index_disp\"\n-  [(set (match_operand:SI 0 \"mem_index_disp_operand\" \"=m\")\n-\t(match_operand:SI 1 \"arith_reg_operand\" \"r\"))\n-   (clobber (reg:SI T_REG))]\n-  \"TARGET_SH1\"\n-  \"#\"\n-  \"&& can_create_pseudo_p ()\"\n- [(set (match_dup 6) (plus:SI (match_dup 5) (match_dup 3)))\n-   (set (match_dup 7) (match_dup 1))]\n-{\n-  rtx mem = operands[0];\n-  rtx plus0_rtx = XEXP (mem, 0);\n-  rtx plus1_rtx = XEXP (plus0_rtx, 0);\n-  rtx mult_rtx = XEXP (plus1_rtx, 0);\n-\n-  operands[0] = XEXP (mult_rtx, 0);\n-  operands[2] = GEN_INT (exact_log2 (INTVAL (XEXP (mult_rtx, 1))));\n-  operands[3] = XEXP (plus1_rtx, 1);\n-  operands[4] = XEXP (plus0_rtx, 1);\n-  operands[5] = gen_reg_rtx (SImode);\n-  operands[6] = gen_reg_rtx (SImode);\n-  operands[7] =\n-    replace_equiv_address (mem,\n-\t\t\t   gen_rtx_PLUS (SImode, operands[6], operands[4]));\n-\n-  emit_insn (gen_ashlsi3 (operands[5], operands[0], operands[2]));\n+  else if (<CODE> == ZERO_EXTEND)\n+    {\n+      /* On SH2A the movu.w insn can be used for zero extending loads.  */\n+      if (TARGET_SH2A)\n+\temit_insn (gen_zero_extendhisi2 (operands[0], op_7));\n+      else\n+\t{\n+\t  emit_insn (gen_extendhisi2 (operands[0], op_7));\n+\t  emit_insn (gen_zero_extendhisi2 (operands[0],\n+\t\t\t\t           gen_lowpart (HImode, operands[0])));\n+\t}\n+      DONE;\n+    }\n+  else\n+    FAIL;\n })\n \n-(define_insn_and_split \"*movsi_index_disp\"\n-  [(set (match_operand:HI 0 \"mem_index_disp_operand\" \"=m\")\n-\t(match_operand:HI 1 \"arith_reg_operand\" \"r\"))\n+(define_insn_and_split \"*mov<mode>_index_disp_store\"\n+  [(set (match_operand:HISI 0 \"mem_index_disp_operand\" \"=m\")\n+\t(match_operand:HISI 1 \"arith_reg_operand\" \"r\"))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n   \"#\"\n@@ -6450,103 +6340,59 @@ label:\n ;; picked to load/store regs.  If the regs regs are on the stack reload will\n ;; try other insns and not stick to movqi_reg_reg.\n ;; The same applies to the movhi variants.\n-(define_insn \"*movqi_reg_reg\"\n-  [(set (match_operand:QI 0 \"arith_reg_dest\" \"=r\")\n-\t(match_operand:QI 1 \"register_operand\" \"r\"))]\n-  \"TARGET_SH1\"\n-  \"mov\t%1,%0\"\n-  [(set_attr \"type\" \"move\")])\n-\n-(define_insn \"*movhi_reg_reg\"\n-  [(set (match_operand:HI 0 \"arith_reg_dest\" \"=r\")\n-\t(match_operand:HI 1 \"register_operand\" \"r\"))]\n+(define_insn \"*mov<mode>_reg_reg\"\n+  [(set (match_operand:QIHI 0 \"arith_reg_dest\" \"=r\")\n+\t(match_operand:QIHI 1 \"register_operand\" \"r\"))]\n   \"TARGET_SH1\"\n   \"mov\t%1,%0\"\n   [(set_attr \"type\" \"move\")])\n \n ;; FIXME: The non-SH2A and SH2A variants should be combined by adding\n ;; \"enabled\" attribute as it is done in other targets.\n-(define_insn \"*movqi_store_mem_disp04\"\n-  [(set (mem:QI (plus:SI (match_operand:SI 0 \"arith_reg_operand\" \"%r,r\")\n-\t\t\t (match_operand:SI 1 \"const_int_operand\" \"K04,N\")))\n-\t(match_operand:QI 2 \"arith_reg_operand\" \"z,r\"))]\n-  \"TARGET_SH1 && sh_legitimate_index_p (QImode, operands[1], false, true)\"\n-  \"@\n-\tmov.b\t%2,@(%O1,%0)\n-\tmov.b\t%2,@%0\"\n-  [(set_attr \"type\" \"store\")])\n-\n-(define_insn \"*movhi_store_mem_disp05\"\n-  [(set (mem:HI (plus:SI (match_operand:SI 0 \"arith_reg_operand\" \"%r,r\")\n-\t\t\t (match_operand:SI 1 \"const_int_operand\" \"K05,N\")))\n-\t(match_operand:HI 2 \"arith_reg_operand\" \"z,r\"))]\n-  \"TARGET_SH1 && sh_legitimate_index_p (HImode, operands[1], false, true)\"\n+(define_insn \"*mov<mode>_store_mem_disp04\"\n+  [(set (mem:QIHI\n+\t  (plus:SI (match_operand:SI 0 \"arith_reg_operand\" \"%r,r\")\n+\t\t   (match_operand:SI 1 \"const_int_operand\" \"<disp04>,N\")))\n+\t(match_operand:QIHI 2 \"arith_reg_operand\" \"z,r\"))]\n+  \"TARGET_SH1 && sh_legitimate_index_p (<MODE>mode, operands[1], false, true)\"\n   \"@\n-\tmov.w\t%2,@(%O1,%0)\n-\tmov.w\t%2,@%0\"\n+\tmov.<bw>\t%2,@(%O1,%0)\n+\tmov.<bw>\t%2,@%0\"\n   [(set_attr \"type\" \"store\")])\n \n-(define_insn \"*movqi_store_mem_disp12\"\n-  [(set (mem:QI (plus:SI (match_operand:SI 0 \"arith_reg_operand\" \"%r\")\n-\t\t\t (match_operand:SI 1 \"const_int_operand\" \"K12\")))\n-\t(match_operand:QI 2 \"arith_reg_operand\" \"r\"))]\n-  \"TARGET_SH2A && sh_legitimate_index_p (QImode, operands[1], true, true)\"\n-  \"mov.b\t%2,@(%O1,%0)\"\n+(define_insn \"*mov<mode>_store_mem_disp12\"\n+  [(set (mem:QIHI\n+\t  (plus:SI (match_operand:SI 0 \"arith_reg_operand\" \"%r\")\n+\t\t   (match_operand:SI 1 \"const_int_operand\" \"<disp12>\")))\n+\t(match_operand:QIHI 2 \"arith_reg_operand\" \"r\"))]\n+  \"TARGET_SH2A && sh_legitimate_index_p (<MODE>mode, operands[1], true, true)\"\n+  \"mov.<bw>\t%2,@(%O1,%0)\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"*movhi_store_mem_disp13\"\n-  [(set (mem:HI (plus:SI (match_operand:SI 0 \"arith_reg_operand\" \"%r\")\n-\t\t\t (match_operand:SI 1 \"const_int_operand\" \"K13\")))\n-\t(match_operand:HI 2 \"arith_reg_operand\" \"r\"))]\n-  \"TARGET_SH2A && sh_legitimate_index_p (HImode, operands[1], true, true)\"\n-  \"mov.w\t%2,@(%O1,%0)\"\n-  [(set_attr \"type\" \"store\")\n-   (set_attr \"length\" \"4\")])\n-\n-(define_insn \"*movqi_load_mem_disp\"\n-  [(set (match_operand:QI 0 \"arith_reg_dest\" \"=z,r\")\n-\t(mem:QI (plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"%r,r\")\n-\t\t\t (match_operand:SI 2 \"const_int_operand\" \"K04,N\"))))]\n-  \"TARGET_SH1 && ! TARGET_SH2A\n-   && sh_legitimate_index_p (QImode, operands[2], false, true)\"\n-  \"@\n-\tmov.b\t@(%O2,%1),%0\n-\tmov.b\t@%1,%0\"\n-  [(set_attr \"type\" \"load\")])\n-\n-(define_insn \"*movhi_load_mem_disp\"\n-  [(set (match_operand:HI 0 \"arith_reg_dest\" \"=z,r\")\n-\t(mem:HI (plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"%r,r\")\n-\t\t\t (match_operand:SI 2 \"const_int_operand\" \"K05,N\"))))]\n+(define_insn \"*mov<mode>_load_mem_disp04\"\n+  [(set (match_operand:QIHI 0 \"arith_reg_dest\" \"=z,r\")\n+\t(mem:QIHI\n+\t  (plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"%r,r\")\n+\t\t   (match_operand:SI 2 \"const_int_operand\" \"<disp04>,N\"))))]\n   \"TARGET_SH1 && ! TARGET_SH2A\n-   && sh_legitimate_index_p (HImode, operands[2], false, true)\"\n+   && sh_legitimate_index_p (<MODE>mode, operands[2], false, true)\"\n   \"@\n-\tmov.w\t@(%O2,%1),%0\n-\tmov.w\t@%1,%0\"\n+\tmov.<bw>\t@(%O2,%1),%0\n+\tmov.<bw>\t@%1,%0\"\n   [(set_attr \"type\" \"load\")])\n \n-(define_insn \"*movqi_load_mem_disp\"\n-  [(set (match_operand:QI 0 \"arith_reg_dest\" \"=z,r,r\")\n-\t(mem:QI (plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"%r,r,r\")\n-\t\t\t (match_operand:SI 2 \"const_int_operand\" \"K04,N,K12\"))))]\n-  \"TARGET_SH2A && sh_legitimate_index_p (QImode, operands[2], true, true)\"\n-  \"@\n-\tmov.b\t@(%O2,%1),%0\n-\tmov.b\t@%1,%0\n-\tmov.b\t@(%O2,%1),%0\"\n-  [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"2,2,4\")])\n-\n-(define_insn \"*movhi_load_mem_disp\"\n-  [(set (match_operand:HI 0 \"arith_reg_dest\" \"=z,r,r\")\n-\t(mem:HI (plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"%r,r,r\")\n-\t\t\t (match_operand:SI 2 \"const_int_operand\" \"K05,N,K13\"))))]\n-  \"TARGET_SH2A && sh_legitimate_index_p (HImode, operands[2], true, true)\"\n+(define_insn \"*mov<mode>_load_mem_disp12\"\n+  [(set (match_operand:QIHI 0 \"arith_reg_dest\" \"=z,r,r\")\n+\t(mem:QIHI\n+\t  (plus:SI\n+\t    (match_operand:SI 1 \"arith_reg_operand\" \"%r,r,r\")\n+\t    (match_operand:SI 2 \"const_int_operand\" \"<disp04>,N,<disp12>\"))))]\n+  \"TARGET_SH2A && sh_legitimate_index_p (<MODE>mode, operands[2], true, true)\"\n   \"@\n-\tmov.w\t@(%O2,%1),%0\n-\tmov.w\t@%1,%0\n-\tmov.w\t@(%O2,%1),%0\"\n+\tmov.<bw>\t@(%O2,%1),%0\n+\tmov.<bw>\t@%1,%0\n+\tmov.<bw>\t@(%O2,%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"2,2,4\")])\n "}, {"sha": "24ed5e9faceaa7abe23cea0f1553d1517f2ab303", "filename": "gcc/config/sh/sync.md", "status": "modified", "additions": 136, "deletions": 139, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615/gcc%2Fconfig%2Fsh%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615/gcc%2Fconfig%2Fsh%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsync.md?ref=7fa4bf9bf9a74dcde2bacd2437ce341cf51ad615", "patch": "@@ -132,10 +132,6 @@\n   UNSPECV_CMPXCHG_3\n ])\n \n-(define_mode_iterator I124 [QI HI SI])\n-(define_mode_iterator I12 [QI HI])\n-\n-(define_mode_attr i124suffix [(QI \"b\") (HI \"w\") (SI \"l\")])\n (define_mode_attr i124extend_insn [(QI \"exts.b\") (HI \"exts.w\") (SI \"mov\")])\n \n (define_code_iterator FETCHOP [plus minus ior xor and])\n@@ -155,10 +151,10 @@\n \n (define_expand \"atomic_compare_and_swap<mode>\"\n   [(match_operand:SI 0 \"register_operand\" \"\")\t\t;; bool success output\n-   (match_operand:I124 1 \"register_operand\" \"\")\t\t;; oldval output\n-   (match_operand:I124 2 \"memory_operand\" \"\")\t\t;; memory\n-   (match_operand:I124 3 \"atomic_arith_operand\" \"\")\t;; expected input\n-   (match_operand:I124 4 \"atomic_arith_operand\" \"\")\t;; newval input\n+   (match_operand:QIHISI 1 \"register_operand\" \"\")\t;; oldval output\n+   (match_operand:QIHISI 2 \"memory_operand\" \"\")\t\t;; memory\n+   (match_operand:QIHISI 3 \"atomic_arith_operand\" \"\")\t;; expected input\n+   (match_operand:QIHISI 4 \"atomic_arith_operand\" \"\")\t;; newval input\n    (match_operand:SI 5 \"const_int_operand\" \"\")\t\t;; is_weak\n    (match_operand:SI 6 \"const_int_operand\" \"\")\t\t;; success model\n    (match_operand:SI 7 \"const_int_operand\" \"\")]\t\t;; failure model\n@@ -171,11 +167,11 @@\n   rtx atomic_insn;\n \n   if (TARGET_HARD_ATOMIC || (TARGET_SH4A_ARCH && <MODE>mode == SImode))\n-      atomic_insn = gen_atomic_compare_and_swap<mode>_hard (old_val, addr,\n-\t\t\t\t\t\t\t    exp_val, new_val);\n+    atomic_insn = gen_atomic_compare_and_swap<mode>_hard (old_val, addr,\n+\t\t\t\t\t\t\t  exp_val, new_val);\n   else\n-      atomic_insn = gen_atomic_compare_and_swap<mode>_soft (old_val, addr,\n-\t\t\t\t\t\t\t    exp_val, new_val);\n+    atomic_insn = gen_atomic_compare_and_swap<mode>_soft (old_val, addr,\n+\t\t\t\t\t\t\t  exp_val, new_val);\n   emit_insn (atomic_insn);\n \n   if (<MODE>mode == QImode)\n@@ -216,12 +212,12 @@\n (define_insn \"atomic_compare_and_swap<mode>_hard\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n \t(unspec_volatile:SI\n-\t  [(mem:I12 (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t   (match_operand:I12 2 \"register_operand\" \"r\")\n-\t   (match_operand:I12 3 \"register_operand\" \"r\")]\n+\t  [(mem:QIHI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t   (match_operand:QIHI 2 \"register_operand\" \"r\")\n+\t   (match_operand:QIHI 3 \"register_operand\" \"r\")]\n \t  UNSPECV_CMPXCHG_1))\n-   (set (mem:I12 (match_dup 1))\n-\t(unspec_volatile:I12 [(const_int 0)] UNSPECV_CMPXCHG_2))\n+   (set (mem:QIHI (match_dup 1))\n+\t(unspec_volatile:QIHI [(const_int 0)] UNSPECV_CMPXCHG_2))\n    (set (reg:SI T_REG)\n \t(unspec_volatile:SI [(const_int 0)] UNSPECV_CMPXCHG_3))\n    (clobber (reg:SI R0_REG))\n@@ -238,8 +234,8 @@\n \t \"\tadd\t#-4,%1\"\t\t\t\"\\n\"\n \t \"0:\tmovli.l\t@%5,r0\"\t\t\t\"\\n\"\n \t \"\tmov.l\tr0,@-r15\"\t\t\"\\n\"\n-\t \"\tmov.<i124suffix>\t@%1,%0\"\t\"\\n\"\n-\t \"\tmov.<i124suffix>\t%3,@%1\" \"\\n\"\n+\t \"\tmov.<bw>\t@%1,%0\"\t\t\"\\n\"\n+\t \"\tmov.<bw>\t%3,@%1\"\t\t\"\\n\"\n \t \"\tcmp/eq\t%4,%0\"\t\t\t\"\\n\"\n \t \"\tbf{.|/}s\t0f\"\t\t\"\\n\"\n \t \"\tmov.l\t@r15+,r0\"\t\t\"\\n\"\n@@ -252,12 +248,12 @@\n (define_insn \"atomic_compare_and_swap<mode>_soft\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&u\")\n \t(unspec_volatile:SI\n-\t  [(mem:I124 (match_operand:SI 1 \"register_operand\" \"u\"))\n-\t   (match_operand:I124 2 \"register_operand\" \"u\")\n-\t   (match_operand:I124 3 \"register_operand\" \"u\")]\n+\t  [(mem:QIHISI (match_operand:SI 1 \"register_operand\" \"u\"))\n+\t   (match_operand:QIHISI 2 \"register_operand\" \"u\")\n+\t   (match_operand:QIHISI 3 \"register_operand\" \"u\")]\n \t  UNSPECV_CMPXCHG_1))\n-   (set (mem:I124 (match_dup 1))\n-\t(unspec_volatile:I124 [(const_int 0)] UNSPECV_CMPXCHG_2))\n+   (set (mem:QIHISI (match_dup 1))\n+\t(unspec_volatile:QIHISI [(const_int 0)] UNSPECV_CMPXCHG_2))\n    (set (reg:SI T_REG)\n \t(unspec_volatile:SI [(const_int 0)] UNSPECV_CMPXCHG_3))\n    (clobber (match_scratch:SI 4 \"=&u\"))\n@@ -270,10 +266,10 @@\n \t \"\t.align 2\"\t\t\t\"\\n\"\n \t \"\tmov\tr15,r1\"\t\t\t\"\\n\"\n \t \"\tmov\t#(0f-1f),r15\"\t\t\"\\n\"\n-\t \"0:\tmov.<i124suffix>\t@%1,%0\"\t\"\\n\"\n+\t \"0:\tmov.<bwl>\t@%1,%0\"\t\t\"\\n\"\n \t \"\tcmp/eq\t%0,%4\"\t\t\t\"\\n\"\n \t \"\tbf\t1f\"\t\t\t\"\\n\"\n-\t \"\tmov.<i124suffix>\t%3,@%1\"\t\"\\n\"\n+\t \"\tmov.<bwl>\t%3,@%1\"\t\t\"\\n\"\n \t \"1:\tmov\tr1,r15\";\n }\n   [(set_attr \"length\" \"20\")])\n@@ -282,9 +278,9 @@\n ;; read - write - return old value\n \n (define_expand \"atomic_exchange<mode>\"\n-  [(match_operand:I124 0 \"register_operand\" \"\")\t\t;; oldval output\n-   (match_operand:I124 1 \"memory_operand\" \"\")\t\t;; memory\n-   (match_operand:I124 2 \"atomic_arith_operand\" \"\")\t;; newval input\n+  [(match_operand:QIHISI 0 \"register_operand\" \"\")\t;; oldval output\n+   (match_operand:QIHISI 1 \"memory_operand\" \"\")\t\t;; memory\n+   (match_operand:QIHISI 2 \"atomic_arith_operand\" \"\")\t;; newval input\n    (match_operand:SI 3 \"const_int_operand\" \"\")]\t\t;; memory model\n   \"TARGET_ANY_ATOMIC && !TARGET_SHMEDIA\"\n {\n@@ -293,9 +289,9 @@\n   rtx atomic_insn;\n \n   if (TARGET_HARD_ATOMIC || (TARGET_SH4A_ARCH && <MODE>mode == SImode))\n-      atomic_insn = gen_atomic_exchange<mode>_hard (operands[0], addr, val);\n+    atomic_insn = gen_atomic_exchange<mode>_hard (operands[0], addr, val);\n   else\n-      atomic_insn = gen_atomic_exchange<mode>_soft (operands[0], addr, val);\n+    atomic_insn = gen_atomic_exchange<mode>_soft (operands[0], addr, val);\n \n   emit_insn (atomic_insn);\n \n@@ -326,11 +322,11 @@\n   [(set_attr \"length\" \"10\")])\n \n (define_insn \"atomic_exchange<mode>_hard\"\n-  [(set (match_operand:I12 0 \"register_operand\" \"=&r\")\n-\t(mem:I12 (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (set (mem:I12 (match_dup 1))\n-\t(unspec:I12\n-\t  [(match_operand:I12 2 \"register_operand\" \"r\")] UNSPEC_ATOMIC))\n+  [(set (match_operand:QIHI 0 \"register_operand\" \"=&r\")\n+\t(mem:QIHI (match_operand:SI 1 \"register_operand\" \"r\")))\n+   (set (mem:QIHI (match_dup 1))\n+\t(unspec:QIHI\n+\t  [(match_operand:QIHI 2 \"register_operand\" \"r\")] UNSPEC_ATOMIC))\n    (clobber (reg:SI R0_REG))\n    (clobber (match_scratch:SI 3 \"=&r\"))\n    (clobber (match_scratch:SI 4 \"=1\"))]\n@@ -343,20 +339,20 @@\n \t \"\tadd\t#-4,%1\"\t\t\t\"\\n\"\n \t \"0:\tmovli.l\t@%3,r0\"\t\t\t\"\\n\"\n \t \"\tmov.l\tr0,@-r15\"\t\t\"\\n\"\n-\t \"\tmov.<i124suffix>\t@%1,%0\"\t\"\\n\"\n-\t \"\tmov.<i124suffix>\t%2,@%1\" \"\\n\"\n+\t \"\tmov.<bw>\t@%1,%0\"\t\t\"\\n\"\n+\t \"\tmov.<bw>\t%2,@%1\" \t\"\\n\"\n \t \"\tmov.l\t@r15+,r0\"\t\t\"\\n\"\n \t \"\tmovco.l\tr0,@%3\"\t\t\t\"\\n\"\n \t \"\tbf\t0b\";\n }\n   [(set_attr \"length\" \"24\")])\n \n (define_insn \"atomic_exchange<mode>_soft\"\n-  [(set (match_operand:I124 0 \"register_operand\" \"=&u\")\n-\t(mem:I124 (match_operand:SI 1 \"register_operand\" \"u\")))\n-   (set (mem:I124 (match_dup 1))\n-\t(unspec:I124\n-\t  [(match_operand:I124 2 \"register_operand\" \"u\")] UNSPEC_ATOMIC))\n+  [(set (match_operand:QIHISI 0 \"register_operand\" \"=&u\")\n+\t(mem:QIHISI (match_operand:SI 1 \"register_operand\" \"u\")))\n+   (set (mem:QIHISI (match_dup 1))\n+\t(unspec:QIHISI\n+\t  [(match_operand:QIHISI 2 \"register_operand\" \"u\")] UNSPEC_ATOMIC))\n    (clobber (reg:SI R0_REG))\n    (clobber (reg:SI R1_REG))]\n   \"TARGET_SOFT_ATOMIC && !TARGET_SHMEDIA\"\n@@ -365,8 +361,8 @@\n \t \"\t.align 2\"\t\t\t\"\\n\"\n \t \"\tmov\tr15,r1\"\t\t\t\"\\n\"\n \t \"\tmov\t#(0f-1f),r15\"\t\t\"\\n\"\n-\t \"0:\tmov.<i124suffix>\t@%1,%0\"\t\"\\n\"\n-\t \"\tmov.<i124suffix>\t%2,@%1\"\t\"\\n\"\n+\t \"0:\tmov.<bwl>\t@%1,%0\"\t\t\"\\n\"\n+\t \"\tmov.<bwl>\t%2,@%1\"\t\t\"\\n\"\n \t \"1:\tmov\tr1,r15\";\n }\n   [(set_attr \"length\" \"14\")])\n@@ -375,12 +371,12 @@\n ;; read - add|sub|or|and|xor|nand - write - return old value\n \n (define_expand \"atomic_fetch_<fetchop_name><mode>\"\n-  [(set (match_operand:I124 0 \"register_operand\" \"\")\n-\t(match_operand:I124 1 \"memory_operand\" \"\"))\n+  [(set (match_operand:QIHISI 0 \"register_operand\" \"\")\n+\t(match_operand:QIHISI 1 \"memory_operand\" \"\"))\n    (set (match_dup 1)\n-\t(unspec:I124\n-\t  [(FETCHOP:I124 (match_dup 1)\n-\t     (match_operand:I124 2 \"<fetchop_predicate>\" \"\"))]\n+\t(unspec:QIHISI\n+\t  [(FETCHOP:QIHISI (match_dup 1)\n+\t     (match_operand:QIHISI 2 \"<fetchop_predicate>\" \"\"))]\n \t  UNSPEC_ATOMIC))\n    (match_operand:SI 3 \"const_int_operand\" \"\")]\n   \"TARGET_ANY_ATOMIC && !TARGET_SHMEDIA\"\n@@ -392,9 +388,9 @@\n     atomic_insn = gen_atomic_fetch_<fetchop_name><mode>_hard (operands[0], addr,\n \t\t\t\t\t\t\t      operands[2]);\n   else\n-      atomic_insn = gen_atomic_fetch_<fetchop_name><mode>_soft (operands[0],\n-\t\t\t\t\t\t\t\taddr,\n-\t\t\t\t\t\t\t\toperands[2]);\n+    atomic_insn = gen_atomic_fetch_<fetchop_name><mode>_soft (operands[0],\n+\t\t\t\t\t\t\t      addr,\n+\t\t\t\t\t\t\t      operands[2]);\n   emit_insn (atomic_insn);\n \n   if (<MODE>mode == QImode)\n@@ -426,12 +422,12 @@\n   [(set_attr \"length\" \"10\")])\n \n (define_insn \"atomic_fetch_<fetchop_name><mode>_hard\"\n-  [(set (match_operand:I12 0 \"register_operand\" \"=&r\")\n-\t(mem:I12 (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (set (mem:I12 (match_dup 1))\n-\t(unspec:I12\n-\t  [(FETCHOP:I12 (mem:I12 (match_dup 1))\n-\t     (match_operand:I12 2 \"<fetchop_predicate>\" \"<fetchop_constraint>\"))]\n+  [(set (match_operand:QIHI 0 \"register_operand\" \"=&r\")\n+\t(mem:QIHI (match_operand:SI 1 \"register_operand\" \"r\")))\n+   (set (mem:QIHI (match_dup 1))\n+\t(unspec:QIHI\n+\t  [(FETCHOP:QIHI (mem:QIHI (match_dup 1))\n+\t     (match_operand:QIHI 2 \"<fetchop_predicate>\" \"<fetchop_constraint>\"))]\n \t  UNSPEC_ATOMIC))\n    (clobber (reg:SI R0_REG))\n    (clobber (match_scratch:SI 3 \"=&r\"))\n@@ -445,25 +441,25 @@\n \t \"\tadd\t#-4,%1\"\t\t\t\"\\n\"\n \t \"0:\tmovli.l\t@%3,r0\"\t\t\t\"\\n\"\n \t \"\tmov.l\tr0,@-r15\"\t\t\"\\n\"\n-\t \"\tmov.<i124suffix>\t@%1,r0\"\t\"\\n\"\n+\t \"\tmov.<bw>\t@%1,r0\"\t\t\"\\n\"\n \t \"\tmov\tr0,%0\"\t\t\t\"\\n\"\n \t \"\t<fetchop_name>\t%2,r0\"\t\t\"\\n\"\n-\t \"\tmov.<i124suffix>\tr0,@%1\"\t\"\\n\"\n+\t \"\tmov.<bw>\tr0,@%1\"\t\t\"\\n\"\n \t \"\tmov.l\t@r15+,r0\"\t\t\"\\n\"\n \t \"\tmovco.l\tr0,@%3\"\t\t\t\"\\n\"\n \t \"\tbf\t0b\";\n }\n   [(set_attr \"length\" \"28\")])\n \n (define_insn \"atomic_fetch_<fetchop_name><mode>_soft\"\n-  [(set (match_operand:I124 0 \"register_operand\" \"=&u\")\n-\t(mem:I124 (match_operand:SI 1 \"register_operand\" \"u\")))\n-   (set (mem:I124 (match_dup 1))\n-\t(unspec:I124\n-\t  [(FETCHOP:I124 (mem:I124 (match_dup 1))\n-\t     (match_operand:I124 2 \"register_operand\" \"u\"))]\n+  [(set (match_operand:QIHISI 0 \"register_operand\" \"=&u\")\n+\t(mem:QIHISI (match_operand:SI 1 \"register_operand\" \"u\")))\n+   (set (mem:QIHISI (match_dup 1))\n+\t(unspec:QIHISI\n+\t  [(FETCHOP:QIHISI (mem:QIHISI (match_dup 1))\n+\t     (match_operand:QIHISI 2 \"register_operand\" \"u\"))]\n \t  UNSPEC_ATOMIC))\n-   (clobber (match_scratch:I124 3 \"=&u\"))\n+   (clobber (match_scratch:QIHISI 3 \"=&u\"))\n    (clobber (reg:SI R0_REG))\n    (clobber (reg:SI R1_REG))]\n   \"TARGET_SOFT_ATOMIC && !TARGET_SHMEDIA\"\n@@ -472,21 +468,21 @@\n \t \"\t.align 2\"\t\t\t\"\\n\"\n \t \"\tmov\tr15,r1\"\t\t\t\"\\n\"\n \t \"\tmov\t#(0f-1f),r15\"\t\t\"\\n\"\n-\t \"0:\tmov.<i124suffix>\t@%1,%0\"\t\"\\n\"\n+\t \"0:\tmov.<bwl>\t@%1,%0\"\t\t\"\\n\"\n \t \"\tmov\t%0,%3\"\t\t\t\"\\n\"\n \t \"\t<fetchop_name>\t%2,%3\"\t\t\"\\n\"\n-\t \"\tmov.<i124suffix>\t%3,@%1\"\t\"\\n\"\n+\t \"\tmov.<bwl>\t%3,@%1\"\t\t\"\\n\"\n \t \"1:\tmov\tr1,r15\";\n }\n   [(set_attr \"length\" \"18\")])\n \n (define_expand \"atomic_fetch_nand<mode>\"\n-  [(set (match_operand:I124 0 \"register_operand\" \"\")\n-\t(match_operand:I124 1 \"memory_operand\" \"\"))\n+  [(set (match_operand:QIHISI 0 \"register_operand\" \"\")\n+\t(match_operand:QIHISI 1 \"memory_operand\" \"\"))\n    (set (match_dup 1)\n-\t(unspec:I124\n-\t  [(not:I124 (and:I124 (match_dup 1)\n-\t\t     (match_operand:I124 2 \"atomic_logical_operand\" \"\")))]\n+\t(unspec:QIHISI\n+\t  [(not:QIHISI (and:QIHISI (match_dup 1)\n+\t\t       (match_operand:QIHISI 2 \"atomic_logical_operand\" \"\")))]\n \t  UNSPEC_ATOMIC))\n    (match_operand:SI 3 \"const_int_operand\" \"\")]\n   \"TARGET_ANY_ATOMIC && !TARGET_SHMEDIA\"\n@@ -533,12 +529,12 @@\n   [(set_attr \"length\" \"12\")])\n \n (define_insn \"atomic_fetch_nand<mode>_hard\"\n-  [(set (match_operand:I12 0 \"register_operand\" \"=&r\")\n-\t(mem:I12 (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (set (mem:I12 (match_dup 1))\n-\t(unspec:I12\n-\t  [(not:I12 (and:I12 (mem:I12 (match_dup 1))\n-\t\t    (match_operand:I12 2 \"logical_operand\" \"rK08\")))]\n+  [(set (match_operand:QIHI 0 \"register_operand\" \"=&r\")\n+\t(mem:QIHI (match_operand:SI 1 \"register_operand\" \"r\")))\n+   (set (mem:QIHI (match_dup 1))\n+\t(unspec:QIHI\n+\t  [(not:QIHI (and:QIHI (mem:QIHI (match_dup 1))\n+\t\t     (match_operand:QIHI 2 \"logical_operand\" \"rK08\")))]\n \t  UNSPEC_ATOMIC))\n    (clobber (reg:SI R0_REG))\n    (clobber (match_scratch:SI 3 \"=&r\"))\n@@ -552,26 +548,26 @@\n \t \"\tadd\t#-4,%1\"\t\t\t\"\\n\"\n \t \"0:\tmovli.l\t@%3,r0\"\t\t\t\"\\n\"\n \t \"\tmov.l\tr0,@-r15\"\t\t\"\\n\"\n-\t \"\tmov.<i124suffix>\t@%1,r0\"\t\"\\n\"\n+\t \"\tmov.<bw>\t@%1,r0\"\t\t\"\\n\"\n \t \"\tmov\tr0,%0\"\t\t\t\"\\n\"\n \t \"\tand\t%2,r0\"\t\t\t\"\\n\"\n \t \"\tnot\tr0,r0\"\t\t\t\"\\n\"\n-\t \"\tmov.<i124suffix>\tr0,@%1\"\t\"\\n\"\n+\t \"\tmov.<bw>\tr0,@%1\"\t\t\"\\n\"\n \t \"\tmov.l\t@r15+,r0\"\t\t\"\\n\"\n \t \"\tmovco.l\tr0,@%3\"\t\t\t\"\\n\"\n \t \"\tbf\t0b\";\n }\n   [(set_attr \"length\" \"30\")])\n \n (define_insn \"atomic_fetch_nand<mode>_soft\"\n-  [(set (match_operand:I124 0 \"register_operand\" \"=&u\")\n-\t(mem:I124 (match_operand:SI 1 \"register_operand\" \"u\")))\n-   (set (mem:I124 (match_dup 1))\n-\t(unspec:I124\n-\t  [(not:I124 (and:I124 (mem:I124 (match_dup 1))\n-\t     (match_operand:I124 2 \"register_operand\" \"u\")))]\n+  [(set (match_operand:QIHISI 0 \"register_operand\" \"=&u\")\n+\t(mem:QIHISI (match_operand:SI 1 \"register_operand\" \"u\")))\n+   (set (mem:QIHISI (match_dup 1))\n+\t(unspec:QIHISI\n+\t  [(not:QIHISI (and:QIHISI (mem:QIHISI (match_dup 1))\n+\t     (match_operand:QIHISI 2 \"register_operand\" \"u\")))]\n \t  UNSPEC_ATOMIC))\n-   (clobber (match_scratch:I124 3 \"=&u\"))\n+   (clobber (match_scratch:QIHISI 3 \"=&u\"))\n    (clobber (reg:SI R0_REG))\n    (clobber (reg:SI R1_REG))]\n   \"TARGET_SOFT_ATOMIC && !TARGET_SHMEDIA\"\n@@ -580,11 +576,11 @@\n \t \"\tmov\tr15,r1\"\t\t\t\"\\n\"\n \t \"\t.align 2\"\t\t\t\"\\n\"\n \t \"\tmov\t#(0f-1f),r15\"\t\t\"\\n\"\n-\t \"0:\tmov.<i124suffix>\t@%1,%0\"\t\"\\n\"\n+\t \"0:\tmov.<bwl>\t@%1,%0\"\t\t\"\\n\"\n \t \"\tmov\t%2,%3\"\t\t\t\"\\n\"\n \t \"\tand\t%0,%3\"\t\t\t\"\\n\"\n \t \"\tnot\t%3,%3\"\t\t\t\"\\n\"\n-\t \"\tmov.<i124suffix>\t%3,@%1\"\t\"\\n\"\n+\t \"\tmov.<bwl>\t%3,@%1\"\t\t\"\\n\"\n \t \"1:\tmov\tr1,r15\";\n }\n   [(set_attr \"length\" \"20\")])\n@@ -593,13 +589,13 @@\n ;; read - add|sub|or|and|xor|nand - write - return new value\n \n (define_expand \"atomic_<fetchop_name>_fetch<mode>\"\n-  [(set (match_operand:I124 0 \"register_operand\" \"\")\n-\t(FETCHOP:I124\n-\t  (match_operand:I124 1 \"memory_operand\" \"\")\n-\t  (match_operand:I124 2 \"<fetchop_predicate>\" \"\")))\n+  [(set (match_operand:QIHISI 0 \"register_operand\" \"\")\n+\t(FETCHOP:QIHISI\n+\t  (match_operand:QIHISI 1 \"memory_operand\" \"\")\n+\t  (match_operand:QIHISI 2 \"<fetchop_predicate>\" \"\")))\n    (set (match_dup 1)\n-\t(unspec:I124\n-\t  [(FETCHOP:I124 (match_dup 1) (match_dup 2))]\n+\t(unspec:QIHISI\n+\t  [(FETCHOP:QIHISI (match_dup 1) (match_dup 2))]\n \t  UNSPEC_ATOMIC))\n    (match_operand:SI 3 \"const_int_operand\" \"\")]\n   \"TARGET_ANY_ATOMIC && !TARGET_SHMEDIA\"\n@@ -643,13 +639,13 @@\n   [(set_attr \"length\" \"8\")])\n \n (define_insn \"atomic_<fetchop_name>_fetch<mode>_hard\"\n-  [(set (match_operand:I12 0 \"register_operand\" \"=&r\")\n-\t(FETCHOP:I12\n-\t  (mem:I12 (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t  (match_operand:I12 2 \"<fetchop_predicate>\" \"<fetchop_constraint>\")))\n-   (set (mem:I12 (match_dup 1))\n-\t(unspec:I12\n-\t  [(FETCHOP:I12 (mem:I12 (match_dup 1)) (match_dup 2))]\n+  [(set (match_operand:QIHI 0 \"register_operand\" \"=&r\")\n+\t(FETCHOP:QIHI\n+\t  (mem:QIHI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t  (match_operand:QIHI 2 \"<fetchop_predicate>\" \"<fetchop_constraint>\")))\n+   (set (mem:QIHI (match_dup 1))\n+\t(unspec:QIHI\n+\t  [(FETCHOP:QIHI (mem:QIHI (match_dup 1)) (match_dup 2))]\n \t  UNSPEC_ATOMIC))\n \n    (clobber (reg:SI R0_REG))\n@@ -664,9 +660,9 @@\n \t \"\tadd\t#-4,%1\"\t\t\t\"\\n\"\n \t \"0:\tmovli.l\t@%3,r0\"\t\t\t\"\\n\"\n \t \"\tmov.l\tr0,@-r15\"\t\t\"\\n\"\n-\t \"\tmov.<i124suffix>\t@%1,r0\"\t\"\\n\"\n+\t \"\tmov.<bw>\t@%1,r0\"\t\t\"\\n\"\n \t \"\t<fetchop_name>\t%2,r0\"\t\t\"\\n\"\n-\t \"\tmov.<i124suffix>\tr0,@%1\"\t\"\\n\"\n+\t \"\tmov.<bw>\tr0,@%1\"\t\t\"\\n\"\n \t \"\tmov\tr0,%0\"\t\t\t\"\\n\"\n \t \"\tmov.l\t@r15+,r0\"\t\t\"\\n\"\n \t \"\tmovco.l\tr0,@%3\"\t\t\t\"\\n\"\n@@ -675,13 +671,13 @@\n   [(set_attr \"length\" \"28\")])\n \n (define_insn \"atomic_<fetchop_name>_fetch<mode>_soft\"\n-  [(set (match_operand:I124 0 \"register_operand\" \"=&u\")\n-\t(FETCHOP:I124\n-\t  (mem:I124 (match_operand:SI 1 \"register_operand\" \"u\"))\n-\t  (match_operand:I124 2 \"register_operand\" \"u\")))\n-   (set (mem:I124 (match_dup 1))\n-\t(unspec:I124\n-\t  [(FETCHOP:I124 (mem:I124 (match_dup 1)) (match_dup 2))]\n+  [(set (match_operand:QIHISI 0 \"register_operand\" \"=&u\")\n+\t(FETCHOP:QIHISI\n+\t  (mem:QIHISI (match_operand:SI 1 \"register_operand\" \"u\"))\n+\t  (match_operand:QIHISI 2 \"register_operand\" \"u\")))\n+   (set (mem:QIHISI (match_dup 1))\n+\t(unspec:QIHISI\n+\t  [(FETCHOP:QIHISI (mem:QIHISI (match_dup 1)) (match_dup 2))]\n \t  UNSPEC_ATOMIC))\n    (clobber (reg:SI R0_REG))\n    (clobber (reg:SI R1_REG))]\n@@ -691,21 +687,21 @@\n \t \"\tmov\tr15,r1\"\t\t\t\"\\n\"\n \t \"\t.align 2\"\t\t\t\"\\n\"\n \t \"\tmov\t#(0f-1f),r15\"\t\t\"\\n\"\n-\t \"0:\tmov.<i124suffix>\t@%1,%0\"\t\"\\n\"\n+\t \"0:\tmov.<bwl>\t@%1,%0\"\t\t\"\\n\"\n \t \"\t<fetchop_name>\t%2,%0\"\t\t\"\\n\"\n-\t \"\tmov.<i124suffix>\t%0,@%1\"\t\"\\n\"\n+\t \"\tmov.<bwl>\t%0,@%1\"\t\t\"\\n\"\n \t \"1:\tmov\tr1,r15\";\n }\n   [(set_attr \"length\" \"16\")])\n \n (define_expand \"atomic_nand_fetch<mode>\"\n-  [(set (match_operand:I124 0 \"register_operand\" \"\")\n-\t(not:I124 (and:I124\n-\t  (match_operand:I124 1 \"memory_operand\" \"\")\n-\t  (match_operand:I124 2 \"atomic_logical_operand\" \"\"))))\n+  [(set (match_operand:QIHISI 0 \"register_operand\" \"\")\n+\t(not:QIHISI (and:QIHISI\n+\t  (match_operand:QIHISI 1 \"memory_operand\" \"\")\n+\t  (match_operand:QIHISI 2 \"atomic_logical_operand\" \"\"))))\n    (set (match_dup 1)\n-\t(unspec:I124\n-\t  [(not:I124 (and:I124 (match_dup 1) (match_dup 2)))]\n+\t(unspec:QIHISI\n+\t  [(not:QIHISI (and:QIHISI (match_dup 1) (match_dup 2)))]\n \t  UNSPEC_ATOMIC))\n    (match_operand:SI 3 \"const_int_operand\" \"\")]\n   \"TARGET_ANY_ATOMIC && !TARGET_SHMEDIA\"\n@@ -749,12 +745,13 @@\n   [(set_attr \"length\" \"10\")])\n \n (define_insn \"atomic_nand_fetch<mode>_hard\"\n-  [(set (match_operand:I12 0 \"register_operand\" \"=&r\")\n-\t(not:I12 (and:I12 (mem:I12 (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t\t  (match_operand:I12 2 \"logical_operand\" \"rK08\"))))\n-   (set (mem:I12 (match_dup 1))\n-\t(unspec:I12\n-\t  [(not:I12 (and:I12 (mem:I12 (match_dup 1)) (match_dup 2)))]\n+  [(set (match_operand:QIHI 0 \"register_operand\" \"=&r\")\n+\t(not:QIHI\n+\t  (and:QIHI (mem:QIHI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t    (match_operand:QIHI 2 \"logical_operand\" \"rK08\"))))\n+   (set (mem:QIHI (match_dup 1))\n+\t(unspec:QIHI\n+\t  [(not:QIHI (and:QIHI (mem:QIHI (match_dup 1)) (match_dup 2)))]\n \t  UNSPEC_ATOMIC))\n    (clobber (reg:SI R0_REG))\n    (clobber (match_scratch:SI 3 \"=&r\"))\n@@ -768,24 +765,24 @@\n \t \"\tadd\t#-4,%1\"\t\t\t\"\\n\"\n \t \"0:\tmovli.l\t@%3,r0\"\t\t\t\"\\n\"\n \t \"\tmov.l\tr0,@-r15\"\t\t\"\\n\"\n-\t \"\tmov.<i124suffix>\t@%1,r0\"\t\"\\n\"\n+\t \"\tmov.<bw>\t@%1,r0\"\t\t\"\\n\"\n \t \"\tand\t%2,r0\"\t\t\t\"\\n\"\n \t \"\tnot\tr0,%0\"\t\t\t\"\\n\"\n-\t \"\tmov.<i124suffix>\t%0,@%1\"\t\"\\n\"\n+\t \"\tmov.<bw>\t%0,@%1\"\t\t\"\\n\"\n \t \"\tmov.l\t@r15+,r0\"\t\t\"\\n\"\n \t \"\tmovco.l\tr0,@%3\"\t\t\t\"\\n\"\n \t \"\tbf\t0b\";\n }\n   [(set_attr \"length\" \"28\")])\n \n (define_insn \"atomic_nand_fetch<mode>_soft\"\n-  [(set (match_operand:I124 0 \"register_operand\" \"=&u\")\n-\t(not:I124 (and:I124\n-\t  (mem:I124 (match_operand:SI 1 \"register_operand\" \"u\"))\n-\t  (match_operand:I124 2 \"register_operand\" \"u\"))))\n-   (set (mem:I124 (match_dup 1))\n-\t(unspec:I124\n-\t  [(not:I124 (and:I124 (mem:I124 (match_dup 1)) (match_dup 2)))]\n+  [(set (match_operand:QIHISI 0 \"register_operand\" \"=&u\")\n+\t(not:QIHISI (and:QIHISI\n+\t  (mem:QIHISI (match_operand:SI 1 \"register_operand\" \"u\"))\n+\t  (match_operand:QIHISI 2 \"register_operand\" \"u\"))))\n+   (set (mem:QIHISI (match_dup 1))\n+\t(unspec:QIHISI\n+\t  [(not:QIHISI (and:QIHISI (mem:QIHISI (match_dup 1)) (match_dup 2)))]\n \t  UNSPEC_ATOMIC))\n    (clobber (reg:SI R0_REG))\n    (clobber (reg:SI R1_REG))]\n@@ -795,10 +792,10 @@\n \t \"\t.align 2\"\t\t\t\"\\n\"\n \t \"\tmov\tr15,r1\"\t\t\t\"\\n\"\n \t \"\tmov\t#(0f-1f),r15\"\t\t\"\\n\"\n-\t \"0:\tmov.<i124suffix>\t@%1,%0\"\t\"\\n\"\n+\t \"0:\tmov.<bwl>\t@%1,%0\"\t\t\"\\n\"\n \t \"\tand\t%2,%0\"\t\t\t\"\\n\"\n \t \"\tnot\t%0,%0\"\t\t\t\"\\n\"\n-\t \"\tmov.<i124suffix>\t%0,@%1\"\t\"\\n\"\n+\t \"\tmov.<bwl>\t%0,@%1\"\t\t\"\\n\"\n \t \"1:\tmov\tr1,r15\";\n }\n   [(set_attr \"length\" \"18\")])"}]}