{"sha": "f7f0159df726567169986a6ab8262a2312409b31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdmMDE1OWRmNzI2NTY3MTY5OTg2YTZhYjgyNjJhMjMxMjQwOWIzMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-22T15:35:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-22T15:35:52Z"}, "message": "[multiple changes]\n\n2009-07-22  Sergey Rybin  <rybin@adacore.com>\n\n\t* gnat_ugn.texi: Update doc for some gnatcheck rules.\n\n2009-07-22  Robert Dewar  <dewar@adacore.com>\n\n\t* par_sco.adb, par_sco.ads (pscos): New debug routine to output\n\tcontents of SCO tables.\n\t* put_scos.adb, put_scos.ads, get_scos.adb, get_scos.ads,\n\tscos.adb, scos.ads: New files.\n\t* gcc-interface/Make-lang.in: Update dependencies.\n\n\t* lib-util.ads, gnatbind.ads, ali.ads, binderr.ads: Minor comment\n\tfixes and reformatting.\n\nFrom-SVN: r149943", "tree": {"sha": "ec72a3ab616ae23abfff8cc32b73dd7c9ff95059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec72a3ab616ae23abfff8cc32b73dd7c9ff95059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7f0159df726567169986a6ab8262a2312409b31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7f0159df726567169986a6ab8262a2312409b31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7f0159df726567169986a6ab8262a2312409b31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7f0159df726567169986a6ab8262a2312409b31/comments", "author": null, "committer": null, "parents": [{"sha": "a8338640f145dbbb2aeb7a256dc8c98a6521e4c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8338640f145dbbb2aeb7a256dc8c98a6521e4c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8338640f145dbbb2aeb7a256dc8c98a6521e4c5"}], "stats": {"total": 1320, "additions": 1291, "deletions": 29}, "files": [{"sha": "b5b2d5672fa7e7045d3fca81e4976423b1d0a34f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f7f0159df726567169986a6ab8262a2312409b31", "patch": "@@ -1,3 +1,18 @@\n+2009-07-22  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* gnat_ugn.texi: Update doc for some gnatcheck rules.\n+\n+2009-07-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* par_sco.adb, par_sco.ads (pscos): New debug routine to output\n+\tcontents of SCO tables.\n+\t* put_scos.adb, put_scos.ads, get_scos.adb, get_scos.ads,\n+\tscos.adb, scos.ads: New files.\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\n+\t* lib-util.ads, gnatbind.ads, ali.ads, binderr.ads: Minor comment\n+\tfixes and reformatting.\n+\n 2009-07-22  Robert Dewar  <dewar@adacore.com>\n \n \t* g-socket.ads: Minor reformatting"}, {"sha": "9e8da30a22f5ece746d33d2947580cef45425dcf", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=f7f0159df726567169986a6ab8262a2312409b31", "patch": "@@ -42,9 +42,9 @@ package ALI is\n    -- Id Types --\n    --------------\n \n-   --  The various entries are stored in tables with distinct subscript\n-   --  ranges. The following type definitions indicate the ranges used\n-   --  for the subscripts (Id values) for the various tables.\n+   --  The various entries are stored in tables with distinct subscript ranges.\n+   --  The following type definitions show the ranges used for the subscripts\n+   --  (Id values) for the various tables.\n \n    type ALI_Id is range 0 .. 999_999;\n    --  Id values used for ALIs table entries\n@@ -103,8 +103,8 @@ package ALI is\n       --  V lines are ignored as a result of the Ignore_Lines parameter.\n \n       Ver_Len : Natural;\n-      --  Length of characters stored in Ver. Not set if V lines are\n-      --  ignored as a result of the Ignore_Lines parameter.\n+      --  Length of characters stored in Ver. Not set if V lines are ignored as\n+      --  a result of the Ignore_Lines parameter.\n \n       SAL_Interface : Boolean;\n       --  Set True when this is an interface to a standalone library"}, {"sha": "3a419d5d697b7050494408fa7e92375ad025b06b", "filename": "gcc/ada/binderr.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fbinderr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fbinderr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbinderr.ads?ref=f7f0159df726567169986a6ab8262a2312409b31", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -54,14 +54,14 @@ package Binderr is\n    --    Insertion character { (Left brace: insert file name from Names table)\n    --      The character { is replaced by the text for the file name specified\n    --      by the File_Name_Type value stored in Error_Msg_File_1. The name is\n-   --      always enclosed in quotes. A second % may appear in a single message\n+   --      always enclosed in quotes. A second { may appear in a single message\n    --      in which case it is similarly replaced by the name which is\n    --      specified by the File_Name_Type value stored in Error_Msg_File_2.\n \n    --    Insertion character $ (Dollar: insert unit name from Names table)\n    --      The character & is replaced by the text for the unit name specified\n    --      by the Name_Id value stored in Error_Msg_Unit_1. The name is always\n-   --      enclosed in quotes. A second & may appear in a single message in\n+   --      enclosed in quotes. A second $ may appear in a single message in\n    --      which case it is similarly replaced by the name which is specified\n    --      by the Name_Id value stored in Error_Msg_Unit_2.\n "}, {"sha": "bea5d7370eb4d874cd9c1f2d82f1278329e289b0", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=f7f0159df726567169986a6ab8262a2312409b31", "patch": "@@ -134,13 +134,16 @@ GNAT_ADA_OBJS = ada/s-bitops.o ada/ada.o ada/a-charac.o ada/a-chlat1.o ada/a-exc\n  ada/g-hesora.o ada/g-htable.o ada/s-os_lib.o \\\n  ada/g-speche.o ada/g-spchge.o ada/g-u3spch.o ada/s-string.o \\\n  ada/s-utf_32.o ada/s-crc32.o ada/get_targ.o \\\n+ ada/get_scos.o \\\n  ada/gnatvsn.o ada/hlo.o ada/hostparm.o ada/impunit.o ada/interfac.o \\\n  ada/itypes.o ada/inline.o ada/krunch.o ada/lib.o ada/layout.o \\\n  ada/lib-load.o ada/lib-util.o ada/lib-xref.o ada/lib-writ.o ada/live.o \\\n  ada/namet.o ada/namet-sp.o \\\n  ada/nlists.o ada/nmake.o ada/opt.o ada/osint.o ada/osint-c.o \\\n- ada/output.o ada/par_sco.o \\\n- ada/par.o ada/prep.o ada/prepcomp.o ada/repinfo.o ada/restrict.o \\\n+ ada/output.o \\\n+ ada/par_sco.o \\\n+ ada/par.o ada/prep.o ada/prepcomp.o ada/put_scos.o \\\n+ ada/repinfo.o ada/restrict.o \\\n  ada/rident.o ada/rtsfind.o \\\n  ada/s-addope.o ada/s-assert.o ada/s-parame.o ada/s-stache.o \\\n  ada/s-stalib.o ada/s-imgenu.o ada/s-imenne.o ada/s-stoele.o ada/s-soflin.o \\\n@@ -150,6 +153,7 @@ GNAT_ADA_OBJS = ada/s-bitops.o ada/ada.o ada/a-charac.o ada/a-chlat1.o ada/a-exc\n  ada/s-conca2.o ada/s-conca3.o ada/s-conca4.o ada/s-conca5.o \\\n  ada/s-conca6.o ada/s-conca7.o ada/s-conca8.o ada/s-conca9.o \\\n  ada/s-unstyp.o ada/scans.o ada/scng.o ada/scn.o ada/sdefault.o ada/sem.o \\\n+ ada/scos.o \\\n  ada/sem_aggr.o ada/sem_attr.o ada/sem_aux.o \\\n  ada/sem_cat.o ada/sem_ch10.o ada/sem_ch11.o \\\n  ada/sem_ch12.o ada/sem_ch13.o ada/sem_ch2.o ada/sem_ch3.o ada/sem_ch4.o \\\n@@ -2272,6 +2276,12 @@ ada/g-u3spch.o : ada/gnat.ads ada/g-spchge.ads ada/g-spchge.adb \\\n    ada/g-u3spch.ads ada/g-u3spch.adb ada/system.ads ada/s-wchcnv.ads \\\n    ada/s-wchcon.ads \n \n+ada/get_scos.o : ada/ada.ads ada/a-ioexce.ads ada/a-unccon.ads \\\n+   ada/get_scos.ads ada/get_scos.adb ada/gnat.ads ada/g-table.ads \\\n+   ada/g-table.adb ada/scos.ads ada/system.ads ada/s-exctab.ads \\\n+   ada/s-memory.ads ada/s-stalib.ads ada/s-unstyp.ads ada/types.ads \\\n+   ada/unchconv.ads ada/unchdeal.ads \n+\n ada/get_targ.o : ada/ada.ads ada/a-unccon.ads ada/get_targ.ads \\\n    ada/get_targ.adb ada/system.ads ada/s-exctab.ads ada/s-stalib.ads \\\n    ada/s-unstyp.ads ada/types.ads ada/unchconv.ads ada/unchdeal.ads \n@@ -2671,18 +2681,19 @@ ada/par_sco.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/atree.ads ada/atree.adb \\\n    ada/casing.ads ada/debug.ads ada/einfo.ads ada/einfo.adb ada/fname.ads \\\n    ada/gnat.ads ada/g-hesorg.ads ada/g-hesorg.adb ada/g-htable.ads \\\n-   ada/hostparm.ads ada/lib.ads ada/lib.adb ada/lib-list.adb \\\n-   ada/lib-sort.adb ada/lib-util.ads ada/lib-util.adb ada/namet.ads \\\n-   ada/nlists.ads ada/nlists.adb ada/opt.ads ada/osint.ads ada/osint-c.ads \\\n-   ada/output.ads ada/par_sco.ads ada/par_sco.adb ada/sinfo.ads \\\n-   ada/sinfo.adb ada/sinput.ads ada/sinput.adb ada/snames.ads \\\n-   ada/stand.ads ada/stringt.ads ada/system.ads ada/s-exctab.ads \\\n-   ada/s-htable.ads ada/s-htable.adb ada/s-imenne.ads ada/s-memory.ads \\\n-   ada/s-os_lib.ads ada/s-parame.ads ada/s-stalib.ads ada/s-strhas.ads \\\n-   ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads \\\n-   ada/table.ads ada/table.adb ada/tree_io.ads ada/types.ads ada/uintp.ads \\\n-   ada/uintp.adb ada/uname.ads ada/unchconv.ads ada/unchdeal.ads \\\n-   ada/urealp.ads ada/widechar.ads \n+   ada/g-table.ads ada/g-table.adb ada/hostparm.ads ada/lib.ads \\\n+   ada/lib.adb ada/lib-list.adb ada/lib-sort.adb ada/lib-util.ads \\\n+   ada/lib-util.adb ada/namet.ads ada/nlists.ads ada/nlists.adb \\\n+   ada/opt.ads ada/osint.ads ada/osint-c.ads ada/output.ads \\\n+   ada/par_sco.ads ada/par_sco.adb ada/put_scos.ads ada/put_scos.adb \\\n+   ada/scos.ads ada/sinfo.ads ada/sinfo.adb ada/sinput.ads ada/sinput.adb \\\n+   ada/snames.ads ada/stand.ads ada/stringt.ads ada/system.ads \\\n+   ada/s-exctab.ads ada/s-htable.ads ada/s-htable.adb ada/s-imenne.ads \\\n+   ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-stalib.ads \\\n+   ada/s-strhas.ads ada/s-string.ads ada/s-traent.ads ada/s-unstyp.ads \\\n+   ada/s-wchcon.ads ada/table.ads ada/table.adb ada/tree_io.ads \\\n+   ada/types.ads ada/uintp.ads ada/uintp.adb ada/uname.ads \\\n+   ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/widechar.ads \n \n ada/prep.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/casing.ads ada/csets.ads \\\n@@ -2717,6 +2728,11 @@ ada/prepcomp.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/table.adb ada/tree_io.ads ada/types.ads ada/uintp.ads \\\n    ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/widechar.ads \n \n+ada/put_scos.o : ada/ada.ads ada/a-unccon.ads ada/gnat.ads ada/g-table.ads \\\n+   ada/g-table.adb ada/put_scos.ads ada/put_scos.adb ada/scos.ads \\\n+   ada/system.ads ada/s-exctab.ads ada/s-memory.ads ada/s-stalib.ads \\\n+   ada/s-unstyp.ads ada/types.ads ada/unchconv.ads ada/unchdeal.ads \n+\n ada/repinfo.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/a-uncdea.ads ada/alloc.ads ada/atree.ads ada/atree.adb \\\n    ada/casing.ads ada/debug.ads ada/einfo.ads ada/einfo.adb ada/fname.ads \\\n@@ -2963,6 +2979,11 @@ ada/scng.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/tree_io.ads ada/types.ads ada/uintp.ads ada/unchconv.ads \\\n    ada/unchdeal.ads ada/urealp.ads ada/widechar.ads \n \n+ada/scos.o : ada/ada.ads ada/a-unccon.ads ada/gnat.ads ada/g-table.ads \\\n+   ada/g-table.adb ada/scos.ads ada/scos.adb ada/system.ads \\\n+   ada/s-exctab.ads ada/s-memory.ads ada/s-stalib.ads ada/s-unstyp.ads \\\n+   ada/types.ads ada/unchconv.ads ada/unchdeal.ads \n+\n ada/sem.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads ada/a-uncdea.ads \\\n    ada/alloc.ads ada/atree.ads ada/atree.adb ada/casing.ads ada/debug.ads \\\n    ada/debug_a.ads ada/debug_a.adb ada/einfo.ads ada/einfo.adb \\"}, {"sha": "185d80acc438f214049b1ee9deea82f1b0f1c795", "filename": "gcc/ada/get_scos.adb", "status": "added", "additions": 311, "deletions": 0, "changes": 311, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fget_scos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fget_scos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_scos.adb?ref=f7f0159df726567169986a6ab8262a2312409b31", "patch": "@@ -0,0 +1,311 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                             G E T _ S C O S                               --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--             Copyright (C) 2009, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with SCOs;  use SCOs;\n+with Types; use Types;\n+\n+with Ada.IO_Exceptions; use Ada.IO_Exceptions;\n+\n+procedure Get_SCOs is\n+   Dnum : Nat;\n+   C    : Character;\n+   Loc1 : Source_Location;\n+   Loc2 : Source_Location;\n+   Cond : Character;\n+   Dtyp : Character;\n+\n+   use ASCII;\n+   --  For CR/LF\n+\n+   procedure Check (C : Character);\n+   --  Checks that file is positioned at given character, and if so skips past\n+   --  it, If not, raises Data_Error.\n+\n+   function Get_Int return Int;\n+   --  On entry the file is positioned to a digit. On return, the file is\n+   --  positioned past the last digit, and the returned result is the decimal\n+   --  value read. Data_Error is raised for overflow (value greater than\n+   --  Int'Last), or if the initial character is not a digit.\n+\n+   procedure Get_Sloc_Range (Loc1, Loc2 : out Source_Location);\n+   --  Skips initial spaces, then reads a source location range in the form\n+   --  line:col-line:col and places the two source locations in Loc1 and Loc2.\n+   --  Raises Data_Error if format does not match this requirement.\n+\n+   procedure Skip_EOL;\n+   --  Called with the current character about to be read being LF or CR. Skips\n+   --  past LR/CR characters until either a non-CR/LF character is found, or\n+   --  the end of file is encountered.\n+\n+   procedure Skip_Spaces;\n+   --  Skips zero or more spaces at the current position, leaving the file\n+   --  positioned at the first non-blank character (or Types.EOF).\n+\n+   -----------\n+   -- Check --\n+   -----------\n+\n+   procedure Check (C : Character) is\n+   begin\n+      if Nextc = C then\n+         Skipc;\n+      else\n+         raise Data_Error;\n+      end if;\n+   end Check;\n+\n+   -------------\n+   -- Get_Int --\n+   -------------\n+\n+   function Get_Int return Int is\n+      Val : Int;\n+      C   : Character;\n+\n+   begin\n+      C := Nextc;\n+      Val := 0;\n+\n+      if C not in '0' .. '9' then\n+         raise Data_Error;\n+      end if;\n+\n+      --  Loop to read digits of integer value\n+\n+      loop\n+         declare\n+            pragma Unsuppress (Overflow_Check);\n+         begin\n+            Val := Val * 10 + (Character'Pos (C) - Character'Pos ('0'));\n+         end;\n+\n+         Skipc;\n+         C := Nextc;\n+\n+         exit when C not in '0' .. '9';\n+      end loop;\n+\n+      return Val;\n+\n+   exception\n+      when Constraint_Error =>\n+         raise Data_Error;\n+   end Get_Int;\n+\n+   --------------------\n+   -- Get_Sloc_Range --\n+   --------------------\n+\n+   procedure Get_Sloc_Range (Loc1, Loc2 : out Source_Location) is\n+      pragma Unsuppress (Range_Check);\n+\n+   begin\n+      Skip_Spaces;\n+\n+      Loc1.Line := Logical_Line_Number (Get_Int);\n+      Check (':');\n+      Loc1.Col := Column_Number (Get_Int);\n+\n+      Check ('-');\n+\n+      Loc2.Line := Logical_Line_Number (Get_Int);\n+      Check (':');\n+      Loc2.Col := Column_Number (Get_Int);\n+\n+   exception\n+      when Constraint_Error =>\n+         raise Data_Error;\n+   end Get_Sloc_Range;\n+\n+   --------------\n+   -- Skip_EOL --\n+   --------------\n+\n+   procedure Skip_EOL is\n+      C : Character;\n+\n+   begin\n+      loop\n+         Skipc;\n+         C := Getc;\n+         exit when C /= LF and then C /= CR;\n+\n+         if C = ' ' then\n+            Skip_Spaces;\n+            exit when C /= LF and then C /= CR;\n+         end if;\n+      end loop;\n+   end Skip_EOL;\n+\n+   -----------------\n+   -- Skip_Spaces --\n+   -----------------\n+\n+   procedure Skip_Spaces is\n+   begin\n+      while Nextc = ' ' loop\n+         Skipc;\n+      end loop;\n+   end Skip_Spaces;\n+\n+--  Start of processing for Get_Scos\n+\n+begin\n+   SCO_Table.Init;\n+   SCO_Unit_Table.Init;\n+\n+   --  Loop through lines of SCO information\n+\n+   while Nextc = 'C' loop\n+      Skipc;\n+\n+      C := Getc;\n+\n+      --  Make sure first line is a header line\n+\n+      if SCO_Unit_Table.Last = 0 and then C /= ' ' then\n+         raise Data_Error;\n+      end if;\n+\n+      --  Otherwise dispatch on type of line\n+\n+      case C is\n+\n+         --  Header entry\n+\n+         when ' ' =>\n+\n+            --  Complete previous entry if any\n+\n+            if SCO_Unit_Table.Last /= 0 then\n+               SCO_Unit_Table.Table (SCO_Unit_Table.Last).To :=\n+                 SCO_Table.Last;\n+            end if;\n+\n+            --  Scan out dependency number and file name\n+\n+            declare\n+               Ptr  : String_Ptr := new String (1 .. 32768);\n+               N    : Integer;\n+\n+            begin\n+               Skip_Spaces;\n+               Dnum := Get_Int;\n+\n+               Skip_Spaces;\n+\n+               N := 0;\n+               while Nextc > ' ' loop\n+                  N := N + 1;\n+                  Ptr.all (N) := Getc;\n+               end loop;\n+\n+               --  Make new unit table entry (will fill in To later)\n+\n+               SCO_Unit_Table.Append (\n+                 (File_Name => new String'(Ptr.all (1 .. N)),\n+                  Dep_Num   => Dnum,\n+                  From      => SCO_Table.Last + 1,\n+                  To        => 0));\n+\n+               Free (Ptr);\n+            end;\n+\n+         --  Statement entry\n+\n+         when 'S' =>\n+            Get_Sloc_Range (Loc1, Loc2);\n+            Add_SCO (C1 => 'S', From => Loc1, To => Loc2);\n+\n+         --  Exit entry\n+\n+         when 'T' =>\n+            Get_Sloc_Range (Loc1, Loc2);\n+            Add_SCO (C1 => 'T', From => Loc1, To => Loc2);\n+\n+         --  Decision entry\n+\n+         when 'I' | 'E' | 'W' | 'X' =>\n+            Dtyp := C;\n+            Skip_Spaces;\n+            C := Getc;\n+\n+            --  Case of simple condition\n+\n+            if C = 'c' or else C = 't' or else C = 'f' then\n+               Cond := C;\n+               Get_Sloc_Range (Loc1, Loc2);\n+               Add_SCO\n+                 (C1   => Dtyp,\n+                  C2   => Cond,\n+                  From => Loc1,\n+                  To   => Loc2,\n+                  Last => True);\n+\n+            --  Complex expression\n+\n+            else\n+               Add_SCO (C1 => Dtyp, Last => False);\n+\n+               --  Loop through terms in complex expression\n+\n+               while C /= CR and then C /= LF loop\n+                  if C = 'c' or else C = 't' or else C = 'f' then\n+                     Cond := C;\n+                     Get_Sloc_Range (Loc1, Loc2);\n+                     Add_SCO\n+                       (C2   => C,\n+                        From => Loc1,\n+                        To   => Loc2,\n+                        Last => False);\n+\n+                  elsif C = '!' or else\n+                        C = '^' or else\n+                        C = '&' or else\n+                        C = '|'\n+                  then\n+                     Add_SCO (C1 => C, Last => False);\n+\n+                  else\n+                     raise Data_Error;\n+                  end if;\n+               end loop;\n+\n+               --  Reset Last indication to True for last entry\n+\n+               SCO_Table.Table (SCO_Table.Last).Last := True;\n+            end if;\n+\n+         when others =>\n+            raise Data_Error;\n+      end case;\n+\n+      Skip_EOL;\n+   end loop;\n+\n+   --  Here with all SCO's stored, complete last SCO Unit table entry\n+\n+   SCO_Unit_Table.Table (SCO_Unit_Table.Last).To := SCO_Table.Last;\n+end Get_SCOs;"}, {"sha": "0ece1ab0ef3c9b250c8588eac986edb523aadcca", "filename": "gcc/ada/get_scos.ads", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fget_scos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fget_scos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fget_scos.ads?ref=f7f0159df726567169986a6ab8262a2312409b31", "patch": "@@ -0,0 +1,58 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                             G E T _ S C O S                               --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--             Copyright (C) 2009, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains the function used to read SCO information from an\n+--  ALI file and populate the tables defined in package SCOs with the result.\n+\n+generic\n+   --  These subprograms provide access to the ALI file. Locating, opening\n+   --  and providing access to the ALI file is the callers' responsibility.\n+\n+   with function Getc return Character is <>;\n+   --  Get next character, positioning the ALI file ready to read the\n+   --  following character (equivalent to calling Skipc, then Nextc). If\n+   --  the end of file is encountered, the value Types.EOF is returned.\n+\n+   with function Nextc return Character is <>;\n+   --  Look at the next character, and return it, leaving the position of the\n+   --  file unchanged, so that a subsequent call to Getc or Nextc will return\n+   --  this same character. If the file is positioned at the end of file, then\n+   --  Types.EOF is returned.\n+\n+   with procedure Skipc is <>;\n+   --  Skip past the current character (which typically was read with Nextc),\n+   --  and position to the next character, which will be returned by the next\n+   --  call to Getc or Nextc.\n+\n+procedure Get_SCOs;\n+--  Load SCO information from ALI file text format into internal SCO tables\n+--  (SCOs.SCO_Table and SCOs.SCO_Unit_Table). On entry the input file is\n+--  positioned to the initial 'C' of the first SCO line in the ALI file.\n+--  On return, the file is positioned either to the end of file, or to the\n+--  first character of the line following the SCO information (which will\n+--  never start with a 'C').\n+--\n+--  If a format error is detected in the input, then an exceptions is raised\n+--  (Ada.IO_Exceptions.Data_Error), with the file positioned to the error."}, {"sha": "ad202ca59d28a838074bd727fe140fbf7d19dfcb", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 265, "deletions": 1, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=f7f0159df726567169986a6ab8262a2312409b31", "patch": "@@ -20979,9 +20979,17 @@ used as a parameter of the @option{+R} or @option{-R} options.\n @ignore\n * Ceiling_Violations::\n @end ignore\n+* Complex_Inlined_Subprograms::\n * Controlled_Type_Declarations::\n * Declarations_In_Blocks::\n+* Deep_Inheritance_Hierarchies::\n+* Deeply_Nested_Generics::\n+* Deeply_Nested_Inlining::\n+@ignore\n+* Deeply_Nested_Local_Inlining::\n+@end ignore\n * Default_Parameters::\n+* Direct_Calls_To_Primitives::\n * Discriminated_Records::\n * Enumeration_Ranges_In_CASE_Statements::\n * Exceptions_As_Control_Flow::\n@@ -20990,6 +20998,7 @@ used as a parameter of the @option{+R} or @option{-R} options.\n * Expanded_Loop_Exit_Names::\n * Explicit_Full_Discrete_Ranges::\n * Float_Equality_Checks::\n+* Forbidden_Attributes::\n * Forbidden_Pragmas::\n * Function_Style_Procedures::\n * Generics_In_Subprograms::\n@@ -21034,6 +21043,7 @@ used as a parameter of the @option{+R} or @option{-R} options.\n * Side_Effect_Functions::\n @end ignore\n * Slices::\n+* Too_Many_Parents::\n * Unassigned_OUT_Parameters::\n * Uncommented_BEGIN_In_Package_Bodies::\n * Unconditional_Exits::\n@@ -21044,6 +21054,7 @@ used as a parameter of the @option{+R} or @option{-R} options.\n * Unused_Subprograms::\n @end ignore\n * USE_PACKAGE_Clauses::\n+* Visible_Components::\n * Volatile_Objects_Without_Address_Clauses::\n @end menu\n \n@@ -21131,7 +21142,7 @@ This rule has no parameters.\n \n @ignore\n @node Ceiling_Violations\n-@subsection @code{Ceiling_Violations} (under construction, GLOBAL)\n+@subsection @code{Ceiling5_Violations} (under construction, GLOBAL)\n @cindex @code{Ceiling_Violations} rule (for @command{gnatcheck})\n \n @noindent\n@@ -21185,6 +21196,36 @@ component is not checked.\n This rule has no parameters.\n \n \n+@node Complex_Inlined_Subprograms\n+@subsection @code{Complex_Inlined_Subprograms}\n+@cindex @code{Complex_Inlined_Subprograms} rule (for @command{gnatcheck})\n+\n+@noindent\n+Flags a subprogram body if a pragma Inline is applied to the subprogram or\n+generic subprogram and this subprogram is too complex to be inlined.\n+\n+A subprogram is considered as being too complex for inlining if at least one\n+of the following conditions is met for its body:\n+\n+@itemize @bullet\n+@item\n+number of local declarations + number of statements in subprogram body is\n+more that a value specified by the @option{N} rule parameter;\n+\n+@item\n+the body statement sequence contains a loop, if or case statement;\n+\n+@end itemize\n+\n+@noindent\n+This rule has the following (mandatory) parameters for the @option{+R} option:\n+\n+@table @emph\n+@item N\n+Positive integer specifying the maximal allowed total number of local\n+declarations and statements in subprogram body.\n+@end table\n+\n \n @node Declarations_In_Blocks\n @subsection @code{Declarations_In_Blocks}\n@@ -21198,6 +21239,108 @@ containing only pragmas and/or @code{use} clauses is not flagged.\n This rule has no parameters.\n \n \n+@node Deep_Inheritance_Hierarchies\n+@subsection @code{Deep_Inheritance_Hierarchies}\n+@cindex @code{Deep_Inheritance_Hierarchies} rule (for @command{gnatcheck})\n+\n+@noindent\n+Flags tagged derived type declarations and formal tagged derived type\n+declarations if the corresponding inheritance hierarchy is deeper that\n+a value specified by the @option{N} rule parameter.\n+\n+The depth of the inheritance hierarchy is the length of the longest\n+path from the root to a leaf in the type inheritance tree.\n+\n+The rule does not flag interface types and private extension\n+declarations (in case of a private extension, the correspondong full\n+declaration is checked)\n+\n+This rule has the following parameter for +R option:\n+\n+This rule has the following (mandatory) parameters for the @option{+R} option:\n+\n+@table @emph\n+@item N\n+Positive integer specifying the maximal allowed depth of the inheritance tree.\n+@end table\n+\n+\n+@node Deeply_Nested_Generics\n+@subsection @code{Deeply_Nested_Generics}\n+@cindex @code{Deeply_Nested_Generics} rule (for @command{gnatcheck})\n+\n+@noindent\n+Flags generic declarations nested in another generic declarations if\n+the level of generics-in-generics nesting is higher that\n+a value specified by the @option{N} rule parameter.\n+The level of generics-in-generics\n+nesting is the number of generic declaratons that enclose the given (generic)\n+declaration. Formal packages are not flagged by this rule.\n+\n+This rule has the following (mandatory) parameters for the @option{+R} option:\n+\n+@table @emph\n+@item N\n+Positive integer specifying the maximal allowed level of\n+generics-in-generics nesting.\n+@end table\n+\n+@node Deeply_Nested_Inlining\n+@subsection @code{Deeply_Nested_Inlining}\n+@cindex @code{Deeply_Nested_Inlining} rule (for @command{gnatcheck})\n+\n+@noindent\n+Flags a subprogram if a pragma @code{Inline} is applied to the corresponding\n+subprogram (or generic subprogram in case if a flagged subprogram is a generic\n+instantiation) and the subprogram body contains a call to another inlined\n+subprogram that results in nested inlining with nesting depth more then\n+a value specified by the @option{N} rule parameter. This rule\n+assumes that calls to subprograms in with'ed units are inlided if\n+at the place of the call the corresponding Inline pragma is visible. This\n+rule may be usefull for the case when eiter @option{-gnatn} or @option{-gnatN}\n+option is used when building the executable.\n+\n+If a subprogram should be flagged according to this rule, the body declaration\n+is flagged only if it is not a completion of a subprogram declaration.\n+\n+This rule requires the global analysis of all the set of compilation units that\n+are @command{gnatcheck} arguments, that may affect performance.\n+\n+This rule has the following (mandatory) parameters for the @option{+R} option:\n+\n+@table @emph\n+@item N\n+Positive integer specifying the maximal allowed level of nested inlining.\n+@end table\n+\n+\n+@ignore\n+@node Deeply_Nested_Local_Inlining\n+@subsection @code{Deeply_Nested_Local_Inlining}\n+@cindex @code{Deeply_Nested_Local_Inlining} rule (for @command{gnatcheck})\n+\n+@noindent\n+Flags a subprogram body if a pragma @code{Inline} is applied to the\n+corresponding subprogram (or generic subprogram) and the body contains a call\n+to another inlined subprogram that results in nested inlining with nesting\n+depth more then a value specified by the @option{N} rule parameter.\n+This rule is similar to @code{Deeply_Nested_Inlining} rule, but it\n+assumes that calls to subprograms in\n+with'ed units are not inlided, so all the analysis of the depth of inlining is\n+limited by the compilation unit where the subprogram body is located and the\n+units it depends semantically upon. Such analysis may be usefull for the case\n+when neiter @option{-gnatn} nor @option{-gnatN} option is used when building\n+the executable.\n+\n+This rule has the following (mandatory) parameters for the @option{+R} option:\n+\n+@table @emph\n+@item N\n+Positive integer specifying the maximal allowed level of nested inlining.\n+@end table\n+\n+@end ignore\n+\n @node Default_Parameters\n @subsection @code{Default_Parameters}\n @cindex @code{Default_Parameters} rule (for @command{gnatcheck})\n@@ -21209,6 +21352,18 @@ declarations of formal and generic subprograms are also checked.\n This rule has no parameters.\n \n \n+@node Direct_Calls_To_Primitives\n+@subsection @code{Direct_Calls_To_Primitives}\n+@cindex @code{Direct_Calls_To_Primitives} rule (for @command{gnatcheck})\n+\n+@noindent\n+Flags any non-dispatching call to a dispatching primitive operation, except\n+when a primitive of a tagged type calls directly the same primitive of the\n+immediate ancestor.\n+\n+This rule has no parameters.\n+\n+\n @node Discriminated_Records\n @subsection @code{Discriminated_Records}\n @cindex @code{Discriminated_Records} rule (for @command{gnatcheck})\n@@ -21309,6 +21464,79 @@ and ``@code{/=}'' operations for fixed-point types.\n This rule has no parameters.\n \n \n+@node Forbidden_Attributes\n+@subsection @code{Forbidden_Attributes}\n+@cindex @code{Forbidden_Attributes} rule (for @command{gnatcheck})\n+\n+@noindent\n+Flag each use of the specified attributes. The attributes to be detected are\n+named in the rule's parameters.\n+\n+This rule has the following parameters:\n+\n+@itemize @bullet\n+@item For the @option{+R} option\n+\n+@table @asis\n+@item @emph{Attribute_Designator}\n+Adds the specified attribute to the set of attributes to be checked and sets\n+the checks for all the specified attributes ON. If @emph{Attribute_Designator}\n+does not correspond to any attribute designator defined in the Ada standard\n+or to the designator of a GNAT-specific attribute defined in\n+@ref{Implementation Defined Attributes,,, gnat_rm, GNAT Reference\n+Manual}, it is treated as the name of unknown attribute.\n+\n+@item @code{GNAT}\n+All the GNAT-specific attributes are detected; this sets\n+the checks for all the specified attributes ON.\n+\n+@item @code{ALL}\n+All attributes are detected; this sets the rule ON.\n+@end table\n+\n+@item For the @option{-R} option\n+@table @asis\n+@item @emph{Attribute_Designator}\n+Removes the specified attribute from the set of attributes to be\n+checked without affecting checks for\n+other attributes. If @emph{Attribute_Designator} does not correspond to any\n+attribute designator defined in the Ada standard or to the designator\n+of a GNAT-specific attribute defined in\n+@ref{Implementation Defined Attributes,,, gnat_rm, GNAT Reference Manual},\n+this option is treated as turning OFF detection of all unknown pragmas.\n+\n+@item GNAT\n+Turn OFF detection of all GNAT-specific attributes\n+\n+@item ALL\n+Clear the list of the attributes to be detected and\n+turn the rule OFF.\n+@end table\n+@end itemize\n+\n+@noindent\n+Parameters are not case sensitive. If @emph{Attribute_Designator} does not have\n+the syntax of an Ada identifier and therefore can not be considered as a (part\n+of an) attribute designator, a diagnostic message is generated and the\n+corresponding parameter is ignored. (If an attribute allows a static\n+expression to be a part of the attribute designator, this expression is\n+ignored by this rule.\n+\n+When more then one parameter is given in the same rule option, the parameters\n+must be separated by a comma.\n+\n+If more then one option for this rule is specified for the gnatcheck call, a\n+new option overrides the previous one(s).\n+\n+The @option{+R} option with no parameters turns the rule ON with the set of\n+attributes to be detected defined by the previous rule options.\n+(By default this set is empty, so if the only option specified for the rule is\n+@option{+RForbidden_Attributes} (with\n+no parameter), then the rule is enabled, but it does not detect anything).\n+The @option{-R} option with no parameter turns the rule OFF, but it does not\n+affect the set of attributes to be detected.\n+\n+\n @node Forbidden_Pragmas\n @subsection @code{Forbidden_Pragmas}\n @cindex @code{Forbidden_Pragmas} rule (for @command{gnatcheck})\n@@ -22342,6 +22570,26 @@ Flag all uses of array slicing\n This rule has no parameters.\n \n \n+@node Too_Many_Parents\n+@subsection @code{Too_Many_Parents}\n+@cindex @code{Too_Many_Parents} rule (for @command{gnatcheck})\n+\n+@noindent\n+Flags any type declaration, single task declaration or single protected\n+declaration that has more then  @option{N} parents,  @option{N} is a parameter\n+of the rule.\n+A parent here is either a (sub)type denoted by the subtype mark from the\n+parent_subtype_indication (in case of a derived type declaration), or\n+any of the progenitors from the interface list, if any.\n+\n+This rule has the following (mandatory) parameters for the @option{+R} option:\n+\n+@table @emph\n+@item N\n+Positive integer specifying the maximal allowed number of parents.\n+@end table\n+\n+\n @node Unassigned_OUT_Parameters\n @subsection @code{Unassigned_OUT_Parameters}\n @cindex @code{Unassigned_OUT_Parameters} rule (for @command{gnatcheck})\n@@ -22467,6 +22715,22 @@ not flagged.\n This rule has no parameters.\n \n \n+@node Visible_Components\n+@subsection @code{Visible_Components}\n+@cindex @code{Visible_Components} rule (for @command{gnatcheck})\n+\n+@noindent\n+Flags all the type declarations located in the visible part of a library\n+package or a library generic package that can declare a visible component. A\n+type is considered as declaring a visible component if it contains a record\n+definition by its own or as a part of a record extension. Type declaration is\n+flagged even if it contains a record definition that defines no components.\n+\n+Declarations located in private parts of local (generic) packages are not\n+flagged. Declarations in private packages are not flagged.\n+\n+This rule has no parameters.\n+\n \n @node Volatile_Objects_Without_Address_Clauses\n @subsection @code{Volatile_Objects_Without_Address_Clauses}"}, {"sha": "be78dcd04487c9e3db0948a0165d48e5af68e7cf", "filename": "gcc/ada/gnatbind.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fgnatbind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fgnatbind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatbind.ads?ref=f7f0159df726567169986a6ab8262a2312409b31", "patch": "@@ -4,9 +4,9 @@\n --                                                                          --\n --                             G N A T B I N D                              --\n --                                                                          --\n---                                 B o d y                                  --\n+--                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "a8326ac2a50a0d45437c92cdf4e39a57aa0d0310", "filename": "gcc/ada/lib-util.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Flib-util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Flib-util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-util.ads?ref=f7f0159df726567169986a6ab8262a2312409b31", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -45,9 +45,9 @@ package Lib.Util is\n    --  if the host system needs a write for each line.\n \n    procedure Write_Info_Initiate (Key : Character);\n-   --  Initiates write of new line to info file, the parameter is the\n-   --  keyword character for the line. The caller is responsible for\n-   --  writing the required blank after the key character.\n+   --  Initiates write of new line to info file, the parameter is the keyword\n+   --  character for the line. The caller is responsible for writing the\n+   --  required blank after the key character if needed.\n \n    procedure Write_Info_Nat (N : Nat);\n    --  Adds image of N to Info_Buffer with no leading or trailing blanks"}, {"sha": "5bda78e224b15d354d1ca58ef961a2e351811278", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=f7f0159df726567169986a6ab8262a2312409b31", "patch": "@@ -30,6 +30,7 @@ with Lib.Util; use Lib.Util;\n with Nlists;   use Nlists;\n with Opt;      use Opt;\n with Output;   use Output;\n+with Put_SCOs;\n with Sinfo;    use Sinfo;\n with Sinput;   use Sinput;\n with Table;\n@@ -549,6 +550,41 @@ package body Par_SCO is\n       Traverse (N);\n    end Process_Decisions;\n \n+   -----------\n+   -- pscos --\n+   -----------\n+\n+   procedure pscos is\n+\n+      procedure Write_Info_Char (C : Character) renames Write_Char;\n+      --  Write one character;\n+\n+      procedure Write_Info_Initiate (Key : Character) renames Write_Char;\n+      --  Start new one and write one character;\n+\n+      procedure Write_Info_Nat (N : Nat);\n+      --  Write value of N\n+\n+      procedure Write_Info_Terminate renames Write_Eol;\n+      --  Terminate current line\n+\n+      --------------------\n+      -- Write_Info_Nat --\n+      --------------------\n+\n+      procedure Write_Info_Nat (N : Nat) is\n+      begin\n+         Write_Int (N);\n+      end Write_Info_Nat;\n+\n+      procedure Debug_Put_SCOs is new Put_SCOs;\n+\n+      --  Start of processing for pscos\n+\n+   begin\n+      Debug_Put_SCOs;\n+   end pscos;\n+\n    ----------------\n    -- SCO_Output --\n    ----------------"}, {"sha": "9f24af4930c6bbd7ef46b28025bba286c0673b71", "filename": "gcc/ada/par_sco.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fpar_sco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fpar_sco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.ads?ref=f7f0159df726567169986a6ab8262a2312409b31", "patch": "@@ -211,4 +211,7 @@ package Par_SCO is\n    --  unit U in the ALI file, as recorded by previous calls to SCO_Record,\n    --  possibly modified by calls to Set_SCO_Condition.\n \n+   procedure pscos;\n+   --  Debugging procedure to output contents of SCO binary tables in SCOs\n+\n end Par_SCO;"}, {"sha": "6597f2640068791fb7908c718d1a79fbc7ac8f42", "filename": "gcc/ada/put_scos.adb", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fput_scos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fput_scos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_scos.adb?ref=f7f0159df726567169986a6ab8262a2312409b31", "patch": "@@ -0,0 +1,138 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                             P U T _ S C O S                               --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--             Copyright (C) 2009, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with SCOs; use SCOs;\n+\n+procedure Put_SCOs is\n+begin\n+   --  Loop through entries in SCO_Unit_Table\n+\n+   for U in SCO_Unit_Table.First .. SCO_Unit_Table.Last loop\n+      declare\n+         SUT : SCO_Unit_Table_Entry renames SCO_Unit_Table.Table (U);\n+\n+         Start : Nat;\n+         Stop  : Nat;\n+\n+      begin\n+         Write_Info_Initiate ('C');\n+         Write_Info_Char (' ');\n+         Write_Info_Nat (SUT.Dep_Num);\n+         Write_Info_Char (' ');\n+\n+         for N in SUT.File_Name'Range loop\n+            Write_Info_Char (SUT.File_Name (N));\n+         end loop;\n+\n+         Write_Info_Terminate;\n+\n+         --  Loop through SCO entries for this unit\n+\n+         Start := SCO_Table.First;\n+         Stop  := SCO_Table.Last;\n+         loop\n+            declare\n+               T : SCO_Table_Entry renames SCO_Table.Table (Start);\n+\n+               procedure Output_Range;\n+               --  Outputs T.From and T.To in line:col-line:col format\n+\n+               procedure Output_Range is\n+               begin\n+                  Write_Info_Nat  (Nat (T.From.Line));\n+                  Write_Info_Char (':');\n+                  Write_Info_Nat  (Nat (T.From.Col));\n+                  Write_Info_Char ('-');\n+                  Write_Info_Nat  (Nat (T.To.Line));\n+                  Write_Info_Char (':');\n+                  Write_Info_Nat  (Nat (T.To.Col));\n+               end Output_Range;\n+\n+            begin\n+               Write_Info_Initiate ('C');\n+               Write_Info_Char (T.C1);\n+\n+               case T.C1 is\n+\n+                  --  Statements, exit\n+\n+                  when 'S' | 'T' =>\n+                     Write_Info_Char (' ');\n+                     Output_Range;\n+\n+                     --  Decision\n+\n+                  when 'I' | 'E' | 'W' | 'X' =>\n+                     if T.C2 = ' ' then\n+                        Start := Start + 1;\n+                     end if;\n+\n+                     --  Loop through table entries for this decision\n+\n+                     loop\n+                        declare\n+                           T : SCO_Table_Entry renames SCO_Table.Table (Start);\n+\n+                        begin\n+                           Write_Info_Char (' ');\n+\n+                           if T.C1 = '!' or else\n+                              T.C1 = '^' or else\n+                              T.C1 = '&' or else\n+                              T.C1 = '|'\n+                           then\n+                              Write_Info_Char (T.C1);\n+\n+                           else\n+                              Write_Info_Char (T.C2);\n+                              Output_Range;\n+                           end if;\n+\n+                           exit when T.Last;\n+                           Start := Start + 1;\n+                        end;\n+                     end loop;\n+\n+                  when others =>\n+                     raise Program_Error;\n+               end case;\n+\n+               Write_Info_Terminate;\n+            end;\n+\n+            exit when Start = Stop;\n+            Start := Start + 1;\n+\n+            pragma Assert (Start <= Stop);\n+         end loop;\n+      end;\n+\n+      --  If not last entry, blank line\n+\n+      if U /= SCO_Unit_Table.Last then\n+         Write_Info_Terminate;\n+      end if;\n+   end loop;\n+end Put_SCOs;"}, {"sha": "a2ea41e6b81cf110363de953b7bb6ea4401dc446", "filename": "gcc/ada/put_scos.ads", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fput_scos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fput_scos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fput_scos.ads?ref=f7f0159df726567169986a6ab8262a2312409b31", "patch": "@@ -0,0 +1,51 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                             P U T _ S C O S                               --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--             Copyright (C) 2009, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package contains the function used to read SCO information from the\n+--  internal tables defined in package SCOs, and output text information for\n+--  the ALI file. The interface allows control over the destination of the\n+--  output, so that this routine can also be used for debugging purposes.\n+\n+with Types; use Types;\n+\n+generic\n+   --  The following procedures are used to output text information\n+\n+   with procedure Write_Info_Char (C : Character) is <>;\n+   --  Outputs one character\n+\n+   with procedure Write_Info_Initiate (Key : Character) is <>;\n+   --  Initiates write of new line to output file, the parameter is the\n+   --  keyword character for the line.\n+\n+   with procedure Write_Info_Nat (N : Nat) is <>;\n+   --  Writes image of N to output file with no leading or trailing blanks\n+\n+   with procedure Write_Info_Terminate is <>;\n+   --  Terminate current info line and output lines built in Info_Buffer\n+\n+procedure Put_SCOs;\n+--  Read information from SCOs.SCO_Table and SCOs.SCO_Unit_Table and output\n+--  corresponding information in ALI format using the Write_Info procedures."}, {"sha": "e5dfcd234ac1c8d58fe257b4a7b5846c0a3709a3", "filename": "gcc/ada/scos.adb", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fscos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fscos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.adb?ref=f7f0159df726567169986a6ab8262a2312409b31", "patch": "@@ -0,0 +1,39 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                                 S C O S                                  --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--             Copyright (C) 2009, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+package body SCOs is\n+\n+   procedure Add_SCO\n+     (From : Source_Location := No_Location;\n+      To   : Source_Location := No_Location;\n+      C1   : Character       := ' ';\n+      C2   : Character       := ' ';\n+      Last : Boolean         := False)\n+   is\n+   begin\n+      SCO_Table.Append ((From, To, C1, C2, Last));\n+   end Add_SCO;\n+\n+end SCOs;"}, {"sha": "0e641624ff3a475b87d9fe043f3af6c45319abc0", "filename": "gcc/ada/scos.ads", "status": "added", "additions": 326, "deletions": 0, "changes": 326, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fscos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7f0159df726567169986a6ab8262a2312409b31/gcc%2Fada%2Fscos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscos.ads?ref=f7f0159df726567169986a6ab8262a2312409b31", "patch": "@@ -0,0 +1,326 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                                 S C O S                                  --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--             Copyright (C) 2009, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n+-- http://www.gnu.org/licenses for a complete copy of the license.          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package defines tables used to store Source Coverage Obligations. It\n+--  is used by Par_SCO to build the SCO information before writing it out to\n+--  the ALI file, and by Get_SCO/Put_SCO to read and write the text form that\n+--  is used in the ALI file.\n+\n+with Types; use Types;\n+\n+with GNAT.Table;\n+\n+package SCOs is\n+\n+   --  SCO information can exist in one of two forms. In the ALI file, it is\n+   --  represented using a text format that is described in this specification.\n+   --  Internally it is stored using two tables SCO_Table and SCO_Unit_Table,\n+   --  which are also defined in this unit.\n+\n+   --  Par_SCO is part of the compiler. It scans the parsed source tree and\n+   --  populates the internal tables.\n+\n+   --  Get_SCO reads the text lines in ALI format and populates the internal\n+   --  tables with corresponding information.\n+\n+   --  Put_SCO reads the internal tables and generates text lines in the ALI\n+   --  format.\n+\n+   --------------------\n+   -- SCO ALI Format --\n+   --------------------\n+\n+   --  Source coverage obligations are generated on a unit-by-unit basis in the\n+   --  ALI file, using lines that start with the identifying character C. These\n+   --  lines are generated if the -gnatC switch is set.\n+\n+   --  Sloc Ranges\n+\n+   --    In several places in the SCO lines, Sloc ranges appear. These are used\n+   --    to indicate the first and last Sloc of some construct in the tree and\n+   --    they have the form:\n+\n+   --      line:col-line:col\n+\n+   --    Note that SCO's are generated only for generic templates, not for\n+   --    generic instances (since only the first are part of the source). So\n+   --    we don't need generic instantiation stuff in these line:col items.\n+\n+   --  SCO File headers\n+\n+   --    The SCO information follows the cross-reference information, so it\n+   --    need not be read by tools like gnatbind, gnatmake etc. The SCO output\n+   --    is divided into sections, one section for each unit for which SCO's\n+   --    are generated. A SCO section has a header of the form:\n+\n+   --      C  dependency-number  filename\n+\n+   --        This header precedes SCO information for the unit identified by\n+   --        dependency number and file name. The dependency number is the\n+   --        index into the generated D lines and is ones origin (i.e. 2 =\n+   --        reference to second generated D line).\n+\n+   --        Note that the filename here will reflect the original name if\n+   --        a Source_Reference pragma was encountered (since all line number\n+   --        references will be with respect to the original file).\n+\n+   --  Statements\n+\n+   --    For the purpose of SCO generation, the notion of statement includes\n+   --    simple statements and also the following declaration types:\n+\n+   --      type_declaration\n+   --      subtype_declaration\n+   --      object_declaration\n+   --      renaming_declaration\n+   --      generic_instantiation\n+\n+   --  Statement lines\n+\n+   --    These lines correspond to a sequence of one or more statements which\n+   --    are always exeecuted in sequence, The first statement may be an entry\n+   --    point (e.g. statement after a label), and the last statement may be\n+   --    an exit point (e.g. an exit statement), but no other entry or exit\n+   --    points may occur within the sequence of statements. The idea is that\n+   --    the sequence can be treated as a single unit from a coverage point of\n+   --    view, if any of the code for the statement sequence is executed, this\n+   --    corresponds to coverage of the entire statement sequence. The form of\n+   --    a statement line in the ALI file is:\n+\n+   --      CS sloc-range\n+\n+   --  Exit points\n+\n+   --    An exit point is a statement that causes transfer of control. Examples\n+   --    are exit statements, raise statements and return statements. The form\n+   --    of an exit point in the ALI file is:\n+\n+   --      CT sloc-range\n+\n+   --  Decisions\n+\n+   --    Decisions represent the most significant section of the SCO lines\n+\n+   --    Note: in the following description, logical operator includes the\n+   --    short circuited forms (so can be any of AND, OR, XOR, NOT, AND THEN,\n+   --    or OR ELSE).\n+\n+   --    Decisions are either simple or complex. A simple decision is a boolean\n+   --    expresssion that occurs in the context of a control structure in the\n+   --    source program, including WHILE, IF, EXIT WHEN. Note that a boolean\n+   --    expression in any other context, for example, on the right side of an\n+   --    assignment, is not considered to be a decision.\n+\n+   --    A complex decision is an occurrence of a logical operator which is not\n+   --    itself an operand of some other logical operator. If any operand of\n+   --    the logical operator is itself a logical operator, this is not a\n+   --    separate decision, it is part of the same decision.\n+\n+   --    So for example, if we have\n+\n+   --        A, B, C, D : Boolean;\n+   --        function F (Arg : Boolean) return Boolean);\n+   --        ...\n+   --        A and then (B or else F (C and then D))\n+\n+   --    There are two (complex) decisions here:\n+\n+   --        1. X and then (Y or else Z)\n+\n+   --           where X = A, Y = B, and Z = F (C and then D)\n+\n+   --        2. C and then D\n+\n+   --    For each decision, a decision line is generated with the form:\n+\n+   --      C* expression\n+\n+   --    Here * is one of the following characters:\n+\n+   --      I  decision in IF statement or conditional expression\n+   --      E  decision in EXIT WHEN statement\n+   --      W  decision in WHILE iteration scheme\n+   --      X  decision appearing in some other expression context\n+\n+   --    The expression is a prefix polish form indicating the structure of\n+   --    the decision, including logical operators and short circuit forms.\n+   --    The following is a grammar showing the structure of expression:\n+\n+   --      expression ::= term             (if expr is not logical operator)\n+   --      expression ::= & term term      (if expr is AND or AND THEN)\n+   --      expression ::= | term term      (if expr is OR or OR ELSE)\n+   --      expression ::= ^ term term      (if expr is XOR)\n+   --      expression ::= !term            (if expr is NOT)\n+\n+   --      term ::= element\n+   --      term ::= expression\n+\n+   --      element ::= outcome sloc-range\n+\n+   --    outcome is one of the following letters:\n+\n+   --      c  condition\n+   --      t  true condition\n+   --      f  false condition\n+\n+   --      where t/f are used to mark a condition that has been recognized by\n+   --      the compiler as always being true or false.\n+\n+   --    & indicates either AND or AND THEN connecting two conditions. In the\n+   --    context of couverture we only permit AND THEN in the source in any\n+   --    case, so & can always be understood to be AND THEN.\n+\n+   --    | indicates either OR or OR ELSE connection two conditions. In the\n+   --    context of couverture we only permit OR ELSE in the source in any\n+   --    case, so | can always be understood to be OR ELSE.\n+\n+   --    ^ indicates XOR connecting two conditions. In the context of\n+   --    couverture, we do not permit XOR, so this will never appear.\n+\n+   --    ! indicates NOT applied to the expression.\n+\n+   ---------------------------------------------------------------------\n+   -- Internal table used to store Source Coverage Obligations (SCOs) --\n+   ---------------------------------------------------------------------\n+\n+   type Source_Location is record\n+      Line : Logical_Line_Number;\n+      Col  : Column_Number;\n+   end record;\n+\n+   No_Location : Source_Location := (No_Line_Number, No_Column_Number);\n+\n+   type SCO_Table_Entry is record\n+      From : Source_Location;\n+      To   : Source_Location;\n+      C1   : Character;\n+      C2   : Character;\n+      Last : Boolean;\n+   end record;\n+\n+   package SCO_Table is new GNAT.Table (\n+     Table_Component_Type => SCO_Table_Entry,\n+     Table_Index_Type     => Nat,\n+     Table_Low_Bound      => 1,\n+     Table_Initial        => 500,\n+     Table_Increment      => 300);\n+\n+   --  The SCO_Table_Entry values appear as follows:\n+\n+   --    Statements\n+   --      C1   = 'S'\n+   --      C2   = ' '\n+   --      From = starting source location\n+   --      To   = ending source location\n+   --      Last = unused\n+\n+   --    Exit\n+   --      C1   = 'T'\n+   --      C2   = ' '\n+   --      From = starting source location\n+   --      To   = ending source location\n+   --      Last = unused\n+\n+   --    Simple Decision\n+   --      C1   = 'I', 'E', 'W', 'X' (if/exit/while/expression)\n+   --      C2   = 'c', 't', or 'f'\n+   --      From = starting source location\n+   --      To   = ending source location\n+   --      Last = True\n+\n+   --    Complex Decision\n+   --      C1   = 'I', 'E', 'W', 'X' (if/exit/while/expression)\n+   --      C2   = ' '\n+   --      From = No_Location\n+   --      To   = No_Location\n+   --      Last = False\n+\n+   --    Operator\n+   --      C1   = '!', '^', '&', '|'\n+   --      C2   = ' '\n+   --      From = No_Location\n+   --      To   = No_Location\n+   --      Last = False\n+\n+   --    Element\n+   --      C1   = ' '\n+   --      C2   = 'c', 't', or 'f' (condition/true/false)\n+   --      From = starting source location\n+   --      To   = ending source location\n+   --      Last = False for all but the last entry, True for last entry\n+\n+   --    Note: the sequence starting with a decision, and continuing with\n+   --    operators and elements up to and including the first one labeled with\n+   --    Last=True, indicate the sequence to be output for a complex decision\n+   --    on a single CD decision line.\n+\n+   ----------------\n+   -- Unit Table --\n+   ----------------\n+\n+   --  This table keeps track of the units and the corresponding starting and\n+   --  ending indexes (From, To) in the SCO table. Note that entry zero is\n+   --  unused, it is for convenience in calling the sort routine. The Info\n+   --  field is an identifier supplied when an entry is built (e.g. in the\n+   --  compiler this is the Unit_Number_Type value.\n+\n+   type SCO_Unit_Index is new Int;\n+   --  Used to index values in this table. Values start at 1 and are assigned\n+   --  sequentially as entries are constructed.\n+\n+   type SCO_Unit_Table_Entry is record\n+      File_Name : String_Ptr;\n+      --  Pointer to file name in ALI file\n+\n+      Dep_Num : Nat;\n+      --  Dependency number in ALI file\n+\n+      From : Nat;\n+      --  Starting index in SCO_Table of SCO information for this unit\n+\n+      To : Nat;\n+      --  Ending index in SCO_Table of SCO information for this unit\n+   end record;\n+\n+   package SCO_Unit_Table is new GNAT.Table (\n+     Table_Component_Type => SCO_Unit_Table_Entry,\n+     Table_Index_Type     => SCO_Unit_Index,\n+     Table_Low_Bound      => 0,\n+     Table_Initial        => 20,\n+     Table_Increment      => 200);\n+\n+   -----------------\n+   -- Subprograms --\n+   -----------------\n+\n+   procedure Add_SCO\n+     (From : Source_Location := No_Location;\n+      To   : Source_Location := No_Location;\n+      C1   : Character       := ' ';\n+      C2   : Character       := ' ';\n+      Last : Boolean         := False);\n+   --  Adds one entry to SCO table with given field values\n+\n+end SCOs;"}]}