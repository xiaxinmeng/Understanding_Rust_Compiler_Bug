{"sha": "baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFjYTEyNzhhMzBlZWIyYmZjYTRjNmFhMGI3ZmJkOWExODgyYTg2MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2015-07-15T22:20:17Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-07-15T22:20:17Z"}, "message": "re PR target/66866 (incorrect load address on manual vector shuffle)\n\n\tPR target/66866\n\t* config/i386/i386-protos.h (ix86_expand_pextr): New prototype.\n\t* config/i386/i386.c (ix86_expand_pextr): New function.\n\t(ix86_expand_pinsr): Handle V1TI and TI modes.  Call ix86_expand_pextr\n\tfor non-lowpart subregs.\n\t* config/i386/i386.md (extzv<mode>): Expand with ix86_expand_pextr.\n\t(insv<mode>): Use SWI248 mode iterator.\n\t(insv<mode>_1): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/66866\n\t* g++.dg/pr66866.C: New test.\n\nFrom-SVN: r225852", "tree": {"sha": "8768a99f04c1798812178ec21dc41147b6aeb533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8768a99f04c1798812178ec21dc41147b6aeb533"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f8ba82489f40b751fdb8c0c5a6f6208e888be4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8ba82489f40b751fdb8c0c5a6f6208e888be4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f8ba82489f40b751fdb8c0c5a6f6208e888be4a"}], "stats": {"total": 205, "additions": 187, "deletions": 18}, "files": [{"sha": "6f5459d47972fb1aaf022a4af9153354a95d009a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860", "patch": "@@ -1,3 +1,14 @@\n+2015-07-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/66866\n+\t* config/i386/i386-protos.h (ix86_expand_pextr): New prototype.\n+\t* config/i386/i386.c (ix86_expand_pextr): New function.\n+\t(ix86_expand_pinsr): Handle V1TI and TI modes.  Call ix86_expand_pextr\n+\tfor non-lowpart subregs.\n+\t* config/i386/i386.md (extzv<mode>): Expand with ix86_expand_pextr.\n+\t(insv<mode>): Use SWI248 mode iterator.\n+\t(insv<mode>_1): Ditto.\n+\n 2015-07-15  Aditya Kumar  <aditya.k7@samsung.com>\n \t    Sebastian Pop  <s.pop@samsung.com>\n "}, {"sha": "6a17ef40a2e707a93a903787e07f3d8ed58038be", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860", "patch": "@@ -223,6 +223,7 @@ extern void ix86_expand_vector_extract (bool, rtx, rtx, int);\n extern void ix86_expand_reduc (rtx (*)(rtx, rtx, rtx), rtx, rtx);\n \n extern void ix86_expand_vec_extract_even_odd (rtx, rtx, rtx, unsigned);\n+extern bool ix86_expand_pextr (rtx *);\n extern bool ix86_expand_pinsr (rtx *);\n extern void ix86_expand_mul_widen_evenodd (rtx, rtx, rtx, bool, bool);\n extern void ix86_expand_mul_widen_hilo (rtx, rtx, rtx, bool, bool);"}, {"sha": "55e1e2db3493006c0d6de3b27ffdd3ae2704f9c6", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 130, "deletions": 10, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860", "patch": "@@ -50509,6 +50509,105 @@ ix86_expand_sse2_abs (rtx target, rtx input)\n     emit_move_insn (target, x);\n }\n \n+/* Expand an extract from a vector register through pextr insn.\n+   Return true if successful.  */\n+\n+bool\n+ix86_expand_pextr (rtx *operands)\n+{\n+  rtx dst = operands[0];\n+  rtx src = operands[1];\n+\n+  unsigned int size = INTVAL (operands[2]);\n+  unsigned int pos = INTVAL (operands[3]);\n+\n+  if (GET_CODE (dst) == SUBREG)\n+    {\n+      /* Reject non-lowpart subregs.  */\n+      if (SUBREG_BYTE (dst) > 0)\n+\treturn false;\n+      dst = SUBREG_REG (dst);\n+    }\n+\t\n+  if (GET_CODE (src) == SUBREG)\n+    {\n+      pos += SUBREG_BYTE (src) * BITS_PER_UNIT;\n+      src = SUBREG_REG (src);\n+    }\n+\n+  switch (GET_MODE (src))\n+    {\n+    case V16QImode:\n+    case V8HImode:\n+    case V4SImode:\n+    case V2DImode:\n+    case V1TImode:\n+    case TImode:\n+      {\n+\tmachine_mode srcmode, dstmode;\n+\trtx d, pat;\n+\n+\tdstmode = mode_for_size (size, MODE_INT, 0);\n+\n+\tswitch (dstmode)\n+\t  {\n+\t  case QImode:\n+\t    if (!TARGET_SSE4_1)\n+\t      return false;\n+\t    srcmode = V16QImode;\n+\t    break;\n+\n+\t  case HImode:\n+\t    if (!TARGET_SSE2)\n+\t      return false;\n+\t    srcmode = V8HImode;\n+\t    break;\n+\n+\t  case SImode:\n+\t    if (!TARGET_SSE4_1)\n+\t      return false;\n+\t    srcmode = V4SImode;\n+\t    break;\n+\n+\t  case DImode:\n+\t    gcc_assert (TARGET_64BIT);\n+\t    if (!TARGET_SSE4_1)\n+\t      return false;\n+\t    srcmode = V2DImode;\n+\t    break;\n+\n+\t  default:\n+\t    return false;\n+\t  }\n+\n+\tif (GET_MODE (dst) == dstmode)\n+\t  d = dst;\n+\telse\n+\t  d = gen_reg_rtx (dstmode);\n+\n+\t/* Construct insn pattern.  */\n+\tpat = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (1, GEN_INT (pos / size)));\n+\tpat = gen_rtx_VEC_SELECT (dstmode, gen_lowpart (srcmode, src), pat);\n+\n+\t/* Let the rtl optimizers know about the zero extension performed.  */\n+\tif (dstmode == QImode || dstmode == HImode)\n+\t  {\n+\t    pat = gen_rtx_ZERO_EXTEND (SImode, pat);\n+\t    d = gen_lowpart (SImode, d);\n+\t  }\n+\n+\temit_insn (gen_rtx_SET (d, pat));\n+\n+\tif (d != dst)\n+\t  emit_move_insn (dst, gen_lowpart (GET_MODE (dst), d));\n+\treturn true;\n+      }\n+\n+    default:\n+      return false;\n+    }\n+}\n+\n /* Expand an insert into a vector register through pinsr insn.\n    Return true if successful.  */\n \n@@ -50527,18 +50626,18 @@ ix86_expand_pinsr (rtx *operands)\n       dst = SUBREG_REG (dst);\n     }\n \n-  if (GET_CODE (src) == SUBREG)\n-    src = SUBREG_REG (src);\n-\n   switch (GET_MODE (dst))\n     {\n     case V16QImode:\n     case V8HImode:\n     case V4SImode:\n     case V2DImode:\n+    case V1TImode:\n+    case TImode:\n       {\n \tmachine_mode srcmode, dstmode;\n \trtx (*pinsr)(rtx, rtx, rtx, rtx);\n+\trtx d;\n \n \tsrcmode = mode_for_size (size, MODE_INT, 0);\n \n@@ -50577,15 +50676,36 @@ ix86_expand_pinsr (rtx *operands)\n \t    return false;\n \t  }\n \n-\trtx d = dst;\n-\tif (GET_MODE (dst) != dstmode)\n-\t  d = gen_reg_rtx (dstmode);\n-\tsrc = gen_lowpart (srcmode, src);\n+\tif (GET_CODE (src) == SUBREG)\n+\t  {\n+\t    unsigned int srcpos = SUBREG_BYTE (src);\n \n-\tpos /= size;\n+\t    if (srcpos > 0)\n+\t      {\n+\t\trtx extr_ops[4];\n+\n+\t\textr_ops[0] = gen_reg_rtx (srcmode);\n+\t\textr_ops[1] = gen_lowpart (srcmode, SUBREG_REG (src));\n+\t\textr_ops[2] = GEN_INT (size);\n+\t\textr_ops[3] = GEN_INT (srcpos * BITS_PER_UNIT);\n+\n+\t\tif (!ix86_expand_pextr (extr_ops))\n+\t\t  return false;\n+\n+\t\tsrc = extr_ops[0];\n+\t      }\n+\t    else\n+\t      src = gen_lowpart (srcmode, SUBREG_REG (src));\n+\t  }\n+\n+\tif (GET_MODE (dst) == dstmode)\n+\t  d = dst;\n+\telse\n+\t  d = gen_reg_rtx (dstmode);\n \n-\temit_insn (pinsr (d, gen_lowpart (dstmode, dst), src,\n-\t\t\t  GEN_INT (1 << pos)));\n+\temit_insn (pinsr (d, gen_lowpart (dstmode, dst),\n+\t\t\t  gen_lowpart (srcmode, src),\n+\t\t\t  GEN_INT (1 << (pos / size))));\n \tif (d != dst)\n \t  emit_move_insn (dst, gen_lowpart (GET_MODE (dst), d));\n \treturn true;"}, {"sha": "2b3b6e98f65baaa7397cb1f0df69fbff81a436fe", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860", "patch": "@@ -2734,6 +2734,9 @@\n \t\t\t     (match_operand:SI 3 \"const_int_operand\")))]\n   \"\"\n {\n+  if (ix86_expand_pextr (operands))\n+    DONE;\n+\n   /* Handle extractions from %ah et al.  */\n   if (INTVAL (operands[2]) != 8 || INTVAL (operands[3]) != 8)\n     FAIL;\n@@ -2781,10 +2784,10 @@\n \t(const_string \"QI\")))])\n \n (define_expand \"insv<mode>\"\n-  [(set (zero_extract:SWI48 (match_operand:SWI48 0 \"register_operand\")\n-\t\t\t    (match_operand:SI 1 \"const_int_operand\")\n-\t\t\t    (match_operand:SI 2 \"const_int_operand\"))\n-        (match_operand:SWI48 3 \"register_operand\"))]\n+  [(set (zero_extract:SWI248 (match_operand:SWI248 0 \"register_operand\")\n+\t\t\t     (match_operand:SI 1 \"const_int_operand\")\n+\t\t\t     (match_operand:SI 2 \"const_int_operand\"))\n+        (match_operand:SWI248 3 \"register_operand\"))]\n   \"\"\n {\n   rtx dst;\n@@ -2811,10 +2814,10 @@\n })\n \n (define_insn \"insv<mode>_1\"\n-  [(set (zero_extract:SWI48 (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n-\t\t\t    (const_int 8)\n-\t\t\t    (const_int 8))\n-\t(match_operand:SWI48 1 \"general_x64nomem_operand\" \"Qn,m\"))]\n+  [(set (zero_extract:SWI248 (match_operand 0 \"ext_register_operand\" \"+Q,Q\")\n+\t\t\t     (const_int 8)\n+\t\t\t     (const_int 8))\n+\t(match_operand:SWI248 1 \"general_x64nomem_operand\" \"Qn,m\"))]\n   \"\"\n {\n   if (CONST_INT_P (operands[1]))"}, {"sha": "a3ae9d5b39c427b6f218dadab333228d6e2cc110", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860", "patch": "@@ -1,3 +1,8 @@\n+2015-07-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/66866\n+\t* g++.dg/pr66866.C: New test.\n+\n 2015-07-15  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/vec-cmp-sel.c: New test."}, {"sha": "72ff3b192a8e76a1f756ce8dd37256b706a104ce", "filename": "gcc/testsuite/g++.dg/pr66866.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr66866.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr66866.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr66866.C?ref=baca1278a30eeb2bfca4c6aa0b7fbd9a1882a860", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do run { target i?86-*-* x86_64-*-* } }\n+// { dg-require-effective-target sse2_runtime }\n+// { dg-options \"-O -msse2\" }\n+\n+extern \"C\" void abort (void);\n+\n+typedef long long __m128i __attribute__ ((__vector_size__ (16), __may_alias__));\n+typedef short A __attribute__((__may_alias__));\n+\n+__m128i __attribute__((noinline))\n+shuf(const __m128i v)\n+{\n+  __m128i r;\n+\n+  reinterpret_cast<A *>(&r)[5] = reinterpret_cast<const A *>(&v)[4];\n+  return r;\n+}\n+\n+int main()\n+{\n+  __attribute__((aligned(16))) short mem[8] = { 0, 1, 2, 3, 4, 5, 6, 7 };\n+\n+  *reinterpret_cast<__m128i *>(mem) = shuf (*reinterpret_cast<__m128i *>(mem));\n+\n+  if (mem[5] != 4)\n+    abort ();\n+\n+  return 0;\n+}"}]}