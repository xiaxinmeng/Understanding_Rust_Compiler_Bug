{"sha": "ffeb6554bee0f5c3bf2f823aeb1af5c0b3f3cb00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZlYjY1NTRiZWUwZjVjM2JmMmY4MjNhZWIxYWY1YzBiM2YzY2IwMA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-05-11T12:07:06Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-05-11T12:07:06Z"}, "message": "Revert \"libstdc++ Enhance thread safety of debug mode iterators\"\n\nThis reverts commit 0b83c4fabb899fdbb3ae60ed75b7004b7859fae9.", "tree": {"sha": "b84a70a953e61356ec9a0d088a5361c00fe8accf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b84a70a953e61356ec9a0d088a5361c00fe8accf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffeb6554bee0f5c3bf2f823aeb1af5c0b3f3cb00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffeb6554bee0f5c3bf2f823aeb1af5c0b3f3cb00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffeb6554bee0f5c3bf2f823aeb1af5c0b3f3cb00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffeb6554bee0f5c3bf2f823aeb1af5c0b3f3cb00/comments", "author": null, "committer": null, "parents": [{"sha": "fc8f44e06b183707150d4a0937e7c8506984edf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc8f44e06b183707150d4a0937e7c8506984edf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc8f44e06b183707150d4a0937e7c8506984edf1"}], "stats": {"total": 80, "additions": 28, "deletions": 52}, "files": [{"sha": "a2ff49d9e5118a05b928dc32117320a26f8e21f3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffeb6554bee0f5c3bf2f823aeb1af5c0b3f3cb00/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffeb6554bee0f5c3bf2f823aeb1af5c0b3f3cb00/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ffeb6554bee0f5c3bf2f823aeb1af5c0b3f3cb00", "patch": "@@ -1,26 +1,3 @@\n-2020-05-10  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n-\n-\t* src/c++/debug.cc\n-\t(_Safe_sequence_base::_M_attach_single): Set attached iterator\n-\tsequence pointer and version.\n-\t(_Safe_sequence_base::_M_detach_single): Reset detached iterator.\n-\t(_Safe_iterator_base::_M_attach): Remove attached iterator sequence\n-\tpointer and version asignments.\n-\t(_Safe_iterator_base::_M_attach_single): Likewise.\n-\t(_Safe_iterator_base::_M_detach_single): Remove detached iterator\n-\treset.\n-\t(_Safe_iterator_base::_M_singular): Use atomic load to access parent\n-\tsequence.\n-\t(_Safe_iterator_base::_M_can_compare): Likewise.\n-\t(_Safe_iterator_base::_M_get_mutex): Likewise.\n-\t(_Safe_local_iterator_base::_M_attach): Remove attached iterator container\n-\tpointer and version assignments.\n-\t(_Safe_local_iterator_base::_M_attach_single): Likewise.\n-\t(_Safe_unordered_container_base::_M_attach_local_single):Set attached\n-\titerator container pointer and version.\n-\t(_Safe_unordered_container_base::_M_detach_local_single): Reset detached\n-\titerator.\n-\n 2020-05-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/94971 (partial)"}, {"sha": "18da9da9c52e3224aa56bae61479010517e27189", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffeb6554bee0f5c3bf2f823aeb1af5c0b3f3cb00/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffeb6554bee0f5c3bf2f823aeb1af5c0b3f3cb00/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=ffeb6554bee0f5c3bf2f823aeb1af5c0b3f3cb00", "patch": "@@ -318,8 +318,6 @@ namespace __gnu_debug\n   _Safe_sequence_base::\n   _M_attach_single(_Safe_iterator_base* __it, bool __constant) throw ()\n   {\n-    __it->_M_sequence = this;\n-    __it->_M_version = _M_version;\n     _Safe_iterator_base*& __its =\n       __constant ? _M_const_iterators : _M_iterators;\n     __it->_M_next = __its;\n@@ -347,7 +345,6 @@ namespace __gnu_debug\n       _M_const_iterators = __it->_M_next;\n     if (_M_iterators == __it)\n       _M_iterators = __it->_M_next;\n-    __it->_M_reset();\n   }\n \n   void\n@@ -358,7 +355,11 @@ namespace __gnu_debug\n \n     // Attach to the new sequence (if there is one)\n     if (__seq)\n-      __seq->_M_attach(this, __constant);\n+      {\n+\t_M_sequence = __seq;\n+\t_M_version = _M_sequence->_M_version;\n+\t_M_sequence->_M_attach(this, __constant);\n+      }\n   }\n \n   void\n@@ -369,7 +370,11 @@ namespace __gnu_debug\n \n     // Attach to the new sequence (if there is one)\n     if (__seq)\n-      __seq->_M_attach_single(this, __constant);\n+      {\n+\t_M_sequence = __seq;\n+\t_M_version = _M_sequence->_M_version;\n+\t_M_sequence->_M_attach_single(this, __constant);\n+      }\n   }\n \n   void\n@@ -395,7 +400,10 @@ namespace __gnu_debug\n   _M_detach_single() throw ()\n   {\n     if (_M_sequence)\n-      _M_sequence->_M_detach_single(this);\n+      {\n+\t_M_sequence->_M_detach_single(this);\n+\t_M_reset();\n+      }\n   }\n \n   void\n@@ -411,32 +419,20 @@ namespace __gnu_debug\n   bool\n   _Safe_iterator_base::\n   _M_singular() const throw ()\n-  {\n-    auto seq = __atomic_load_n(&_M_sequence, __ATOMIC_ACQUIRE);\n-    return !seq || _M_version != seq->_M_version;\n-  }\n+  { return !_M_sequence || _M_version != _M_sequence->_M_version; }\n \n   bool\n   _Safe_iterator_base::\n   _M_can_compare(const _Safe_iterator_base& __x) const throw ()\n   {\n-    auto seq = __atomic_load_n(&_M_sequence, __ATOMIC_ACQUIRE);\n-    if (seq && _M_version == seq->_M_version)\n-      {\n-\tauto xseq = __atomic_load_n(&__x._M_sequence, __ATOMIC_ACQUIRE);\n-\treturn xseq && __x._M_version == xseq->_M_version && seq == xseq;\n-      }\n-\n-    return false;\n+    return (!_M_singular()\n+\t    && !__x._M_singular() && _M_sequence == __x._M_sequence);\n   }\n \n   __gnu_cxx::__mutex&\n   _Safe_iterator_base::\n   _M_get_mutex() throw ()\n-  {\n-    auto seq = __atomic_load_n(&_M_sequence, __ATOMIC_ACQUIRE);\n-    return get_safe_base_mutex(seq);\n-  }\n+  { return _M_sequence->_M_get_mutex(); }\n \n   _Safe_unordered_container_base*\n   _Safe_local_iterator_base::\n@@ -451,8 +447,11 @@ namespace __gnu_debug\n \n     // Attach to the new container (if there is one)\n     if (__cont)\n-      static_cast<_Safe_unordered_container_base*>(__cont)\n-\t->_M_attach_local(this, __constant);\n+      {\n+\t_M_sequence = __cont;\n+\t_M_version = _M_sequence->_M_version;\n+\t_M_get_container()->_M_attach_local(this, __constant);\n+      }\n   }\n \n   void\n@@ -463,8 +462,11 @@ namespace __gnu_debug\n \n     // Attach to the new container (if there is one)\n     if (__cont)\n-      static_cast<_Safe_unordered_container_base*>(__cont)\n-\t->_M_attach_local_single(this, __constant);\n+      {\n+\t_M_sequence = __cont;\n+\t_M_version = _M_sequence->_M_version;\n+\t_M_get_container()->_M_attach_local_single(this, __constant);\n+      }\n   }\n \n   void\n@@ -524,8 +526,6 @@ namespace __gnu_debug\n   _Safe_unordered_container_base::\n   _M_attach_local_single(_Safe_iterator_base* __it, bool __constant) throw ()\n   {\n-    __it->_M_sequence = this;\n-    __it->_M_version = _M_version;\n     _Safe_iterator_base*& __its =\n       __constant ? _M_const_local_iterators : _M_local_iterators;\n     __it->_M_next = __its;\n@@ -553,7 +553,6 @@ namespace __gnu_debug\n       _M_const_local_iterators = __it->_M_next;\n     if (_M_local_iterators == __it)\n       _M_local_iterators = __it->_M_next;\n-    __it->_M_reset();\n   }\n }\n "}]}