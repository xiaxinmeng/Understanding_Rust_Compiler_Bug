{"sha": "d1f2bea53f8990253f655cfa22815046efb2ed87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFmMmJlYTUzZjg5OTAyNTNmNjU1Y2ZhMjI4MTUwNDZlZmIyZWQ4Nw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2016-02-26T18:49:18Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2016-02-26T18:49:18Z"}, "message": "powerpc: Handle DImode rotatert implemented with rlwinm (PR69946)\n\nSome DImode rotate-right-and-mask can be implemented best with a rlwinm\ninstruction: those that could be a lshiftrt instead of a rotatert, while\nthe mask is not right-aligned.  Why the rotate in the testcase is not\noptimised to a plain shift is another question, but we need to handle\nit here anyway.  We compute the shift amount for a 64-bit rotate.  This\nis 32 too high in this case; if we print using %h that is masked out (and\nthis doesn't silently let through invalid instructions, everything is\nchecked by rs6000_is_valid_shift_mask which is much more thorough).\n\n\n\tPR target/69946\n\t* config/rs6000/rs6000.c (rs6000_insn_for_shift_mask): Print rlwinm\n\tshift amount using %h.  Add comment.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/pr69946.c: New file.\n\nFrom-SVN: r233755", "tree": {"sha": "a2ab31b8e1412e6c8eac442b1a4af5a6c6090a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2ab31b8e1412e6c8eac442b1a4af5a6c6090a3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1f2bea53f8990253f655cfa22815046efb2ed87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f2bea53f8990253f655cfa22815046efb2ed87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f2bea53f8990253f655cfa22815046efb2ed87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f2bea53f8990253f655cfa22815046efb2ed87/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a4f9d2bf86ef5f48d45ad39802d34dc349f6509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4f9d2bf86ef5f48d45ad39802d34dc349f6509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a4f9d2bf86ef5f48d45ad39802d34dc349f6509"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "89f483c85dcfe5306ad91909714fdec913c7c2f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f2bea53f8990253f655cfa22815046efb2ed87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f2bea53f8990253f655cfa22815046efb2ed87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1f2bea53f8990253f655cfa22815046efb2ed87", "patch": "@@ -1,3 +1,9 @@\n+2016-02-26  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/69946\n+\t* config/rs6000/rs6000.c (rs6000_insn_for_shift_mask): Print rlwinm\n+\tshift amount using %h.  Add comment.\n+\n 2016-02-26  Richard Biener  <rguenther@suse.de>\n \t    Jeff Law  <law@redhat.com>\n "}, {"sha": "c7bad3f583a2c14612847239d6dd235d8e70ba6f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f2bea53f8990253f655cfa22815046efb2ed87/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f2bea53f8990253f655cfa22815046efb2ed87/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d1f2bea53f8990253f655cfa22815046efb2ed87", "patch": "@@ -17438,9 +17438,12 @@ rs6000_insn_for_shift_mask (machine_mode mode, rtx *operands, bool dot)\n \toperands[2] = GEN_INT (32 - INTVAL (operands[2]));\n       operands[3] = GEN_INT (31 - nb);\n       operands[4] = GEN_INT (31 - ne);\n+      /* This insn can also be a 64-bit rotate with mask that really makes\n+\t it just a shift right (with mask); the %h below are to adjust for\n+\t that situation (shift count is >= 32 in that case).  */\n       if (dot)\n-\treturn \"rlw%I2nm. %0,%1,%2,%3,%4\";\n-      return \"rlw%I2nm %0,%1,%2,%3,%4\";\n+\treturn \"rlw%I2nm. %0,%1,%h2,%3,%4\";\n+      return \"rlw%I2nm %0,%1,%h2,%3,%4\";\n     }\n \n   gcc_unreachable ();"}, {"sha": "69289cc264ccd63e39d7c790f5f5171129c75a52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f2bea53f8990253f655cfa22815046efb2ed87/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f2bea53f8990253f655cfa22815046efb2ed87/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1f2bea53f8990253f655cfa22815046efb2ed87", "patch": "@@ -1,3 +1,8 @@\n+2016-02-26  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/69946\n+\t* gcc.target/powerpc/pr69946.c: New file.\n+\n 2016-02-26  Richard Biener  <rguenther@suse.de>\n             Jeff Law  <law@redhat.com>\n "}, {"sha": "eb0c365d137690e6f02c7ee482247478233465e5", "filename": "gcc/testsuite/gcc.target/powerpc/pr69946.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f2bea53f8990253f655cfa22815046efb2ed87/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr69946.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f2bea53f8990253f655cfa22815046efb2ed87/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr69946.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr69946.c?ref=d1f2bea53f8990253f655cfa22815046efb2ed87", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc_elfv2 } } */\n+/* { dg-options \"-O2\" } */\n+\n+/* This generates a rotate:DI by 44, with mask 0xf00, which is implemented\n+   using a rlwinm instruction.  We used to write 44 for the shift count\n+   there; it should be 12.  */\n+\n+struct A\n+{\n+  int a : 4;\n+  int : 2;\n+  int b : 2;\n+  int : 2;\n+  int c : 2;\n+  int d : 1;\n+  int e;\n+};\n+struct B\n+{\n+  int a : 4;\n+} *a;\n+void bar (struct A);\n+\n+void\n+foo (void)\n+{\n+  struct B b = a[0];\n+  struct A c;\n+  c.a = b.a;\n+  c.b = 1;\n+  c.c = 1;\n+  c.d = 0;\n+  bar (c);\n+}\n+\n+/* { dg-final { scan-assembler-not {(?n)rlwinm.*,44,20,23} } } */\n+/* { dg-final { scan-assembler-times {(?n)rlwinm.*,12,20,23} 1 } } */"}]}