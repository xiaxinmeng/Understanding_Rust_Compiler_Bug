{"sha": "0f910b4f4f6978a033e5354fcc81fe9e79792d89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY5MTBiNGY0ZjY5NzhhMDMzZTUzNTRmY2M4MWZlOWU3OTc5MmQ4OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-07T16:40:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-07T16:40:46Z"}, "message": "type_traits: Implement is_const and is_volatile.\n\n2004-12-07  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Implement is_const and is_volatile.\n\t* testsuite/testsuite_tr1.h (test_property): New.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\tis_const/is_const.c: New.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\tis_const/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\tis_volatile/is_volatile.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/\n\tis_volatile/typedefs.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_arithmetic/is_arithmetic.cc: Slightly tweak to use ClassType\n\tfrom testsuite_tr1.h.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_fundamental/is_fundamental.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_array/is_array.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_floating_point/is_floating_point.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_integral/is_integral.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_reference/is_reference.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_void/is_void.cc: Likewise.\n\nFrom-SVN: r91808", "tree": {"sha": "e9347f539406cb38a3947eeb6ee67777d01dc793", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9347f539406cb38a3947eeb6ee67777d01dc793"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f910b4f4f6978a033e5354fcc81fe9e79792d89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f910b4f4f6978a033e5354fcc81fe9e79792d89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f910b4f4f6978a033e5354fcc81fe9e79792d89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f910b4f4f6978a033e5354fcc81fe9e79792d89/comments", "author": null, "committer": null, "parents": [{"sha": "5423d7ebe17465199c4c9c35167c8042dd47b911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5423d7ebe17465199c4c9c35167c8042dd47b911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5423d7ebe17465199c4c9c35167c8042dd47b911"}], "stats": {"total": 259, "additions": 236, "deletions": 23}, "files": [{"sha": "732bb4e1990efccc2ddff4d6999c16dee4639ff6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0f910b4f4f6978a033e5354fcc81fe9e79792d89", "patch": "@@ -1,3 +1,31 @@\n+2004-12-07  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Implement is_const and is_volatile.\n+\t* testsuite/testsuite_tr1.h (test_property): New.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\tis_const/is_const.c: New.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\tis_const/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\tis_volatile/is_volatile.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/\n+\tis_volatile/typedefs.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_arithmetic/is_arithmetic.cc: Slightly tweak to use ClassType\n+\tfrom testsuite_tr1.h.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_fundamental/is_fundamental.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_array/is_array.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_floating_point/is_floating_point.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_integral/is_integral.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_reference/is_reference.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_void/is_void.cc: Likewise.\n+\n 2004-12-06  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits: Implement is_reference."}, {"sha": "928e2aa36e5dcc9311fda5718499ae2be3530cae", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=0f910b4f4f6978a033e5354fcc81fe9e79792d89", "patch": "@@ -171,11 +171,21 @@ namespace tr1\n     : public integral_constant<bool, !is_fundamental<_Tp>::value> { };\n    \n   /// @brief  type properties [4.5.3].\n+  template<typename>\n+    struct is_const\n+    : public false_type { };\n+\n   template<typename _Tp>\n-    struct is_const;\n+    struct is_const<_Tp const>\n+    : public true_type { };\n   \n+  template<typename>\n+    struct is_volatile\n+    : public false_type { };\n+\n   template<typename _Tp>\n-    struct is_volatile;\n+    struct is_volatile<_Tp volatile>\n+    : public true_type { };\n \n   template<typename _Tp>\n     struct is_pod;"}, {"sha": "18563f48e4cc243c2a9ae42247745b21b72eb7a2", "filename": "libstdc++-v3/testsuite/testsuite_tr1.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h?ref=0f910b4f4f6978a033e5354fcc81fe9e79792d89", "patch": "@@ -50,6 +50,23 @@ namespace __gnu_test\n       ret &= Category<Type const volatile>::type::value == Tv;\n       return ret;\n     }\n+\n+  template<template<typename> class Property,\n+\t   typename Type, bool Tv>\n+    bool\n+    test_property()\n+    {\n+      bool ret = true;\n+      ret &= Property<Type>::value == Tv;\n+      ret &= Property<Type>::type::value == Tv;\n+      return ret;\n+    }\n+\n+  // Test types.\n+  class ClassType { };\n+  typedef ClassType const           cClassType;\n+  typedef ClassType volatile        vClassType;\n+  typedef ClassType const volatile  cvClassType;\n }; // namespace __gnu_test\n \n #endif // _GLIBCXX_TESTSUITE_TR1_H"}, {"sha": "a507d8609790667fadd76f4172fbb29847170a4c", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_arithmetic/is_arithmetic.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_arithmetic%2Fis_arithmetic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_arithmetic%2Fis_arithmetic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_arithmetic%2Fis_arithmetic.cc?ref=0f910b4f4f6978a033e5354fcc81fe9e79792d89", "patch": "@@ -24,13 +24,11 @@\n #include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n-class ClassType { };\n-\n void test01()\n {\n   bool test __attribute__((unused)) = true;\n   using std::tr1::is_arithmetic;\n-  using __gnu_test::test_category;\n+  using namespace __gnu_test;\n   \n   VERIFY( (test_category<is_arithmetic, void, false>()) );\n "}, {"sha": "9106ee504ffaafb857120bd7d520c51c3ab656bf", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_fundamental/is_fundamental.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_fundamental%2Fis_fundamental.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_fundamental%2Fis_fundamental.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_fundamental%2Fis_fundamental.cc?ref=0f910b4f4f6978a033e5354fcc81fe9e79792d89", "patch": "@@ -24,13 +24,11 @@\n #include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n-class ClassType { };\n-\n void test01()\n {\n   bool test __attribute__((unused)) = true;\n   using std::tr1::is_fundamental;\n-  using __gnu_test::test_category;\n+  using namespace __gnu_test;\n   \n   VERIFY( (test_category<is_fundamental, void, true>()) );\n   VERIFY( (test_category<is_fundamental, char, true>()) );"}, {"sha": "69777209ba2e5cb31a184018526a112ae7309b1b", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_array/is_array.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_array%2Fis_array.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_array%2Fis_array.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_array%2Fis_array.cc?ref=0f910b4f4f6978a033e5354fcc81fe9e79792d89", "patch": "@@ -24,13 +24,11 @@\n #include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n-class ClassType { };\n-\n void test01()\n {\n   bool test __attribute__((unused)) = true;\n   using std::tr1::is_array;\n-  using __gnu_test::test_category;\n+  using namespace __gnu_test;\n \n   typedef int        int_array[5];\n   typedef int        empty_int_array[];"}, {"sha": "c24de1a5d5aaee83d096770c082fd129d63b0653", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_floating_point/is_floating_point.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_floating_point%2Fis_floating_point.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_floating_point%2Fis_floating_point.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_floating_point%2Fis_floating_point.cc?ref=0f910b4f4f6978a033e5354fcc81fe9e79792d89", "patch": "@@ -24,13 +24,11 @@\n #include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n-class ClassType { };\n-\n void test01()\n {\n   bool test __attribute__((unused)) = true;\n   using std::tr1::is_floating_point;\n-  using __gnu_test::test_category;\n+  using namespace __gnu_test;\n \n   VERIFY( (test_category<is_floating_point, void, false>()) );\n   VERIFY( (test_category<is_floating_point, char, false>()) );"}, {"sha": "812ff080b8123e554aa2e7dd9c2da98ac9952789", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_integral/is_integral.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_integral%2Fis_integral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_integral%2Fis_integral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_integral%2Fis_integral.cc?ref=0f910b4f4f6978a033e5354fcc81fe9e79792d89", "patch": "@@ -24,13 +24,11 @@\n #include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n-class ClassType { };\n-\n void test01()\n {\n   bool test __attribute__((unused)) = true;\n   using std::tr1::is_integral;\n-  using __gnu_test::test_category;\n+  using namespace __gnu_test;\n   \n   VERIFY( (test_category<is_integral, void, false>()) );\n   "}, {"sha": "cd59f4d6ac1ef8fe4124ce621ae5ed06a63dc464", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_reference/is_reference.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_reference%2Fis_reference.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_reference%2Fis_reference.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_reference%2Fis_reference.cc?ref=0f910b4f4f6978a033e5354fcc81fe9e79792d89", "patch": "@@ -24,13 +24,11 @@\n #include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n-class ClassType { };\n-\n void test01()\n {\n   bool test __attribute__((unused)) = true;\n   using std::tr1::is_reference;\n-  using __gnu_test::test_category;\n+  using namespace __gnu_test;\n \n   typedef int&           int_ref;\n   typedef ClassType&     ClassType_ref;"}, {"sha": "e65208c821e85c784c0f009fa0b6fac447f661c4", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_void/is_void.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_void%2Fis_void.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_void%2Fis_void.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_void%2Fis_void.cc?ref=0f910b4f4f6978a033e5354fcc81fe9e79792d89", "patch": "@@ -24,13 +24,11 @@\n #include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n-class ClassType { };\n-\n void test01()\n {\n   bool test __attribute__((unused)) = true;\n   using std::tr1::is_void;\n-  using __gnu_test::test_category;\n+  using namespace __gnu_test;\n \n   VERIFY( (test_category<is_void, void, true>()) );\n   "}, {"sha": "5202161a1323021c84377e1b9ab7364d571f7f04", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_const/is_const.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_const%2Fis_const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_const%2Fis_const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_const%2Fis_const.cc?ref=0f910b4f4f6978a033e5354fcc81fe9e79792d89", "patch": "@@ -0,0 +1,50 @@\n+// 2004-12-07  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_const;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_property<is_const, int const, true>()) );\n+  VERIFY( (test_property<is_const, int const volatile, true>()) );\n+  VERIFY( (test_property<is_const, cClassType, true>()) );\n+  VERIFY( (test_property<is_const, cvClassType, true>()) );\n+\n+  // Negative tests.\n+  VERIFY( (test_property<is_const, int, false>()) );\n+  VERIFY( (test_property<is_const, int volatile, false>()) );\n+  VERIFY( (test_property<is_const, ClassType, false>()) );\n+  VERIFY( (test_property<is_const, vClassType, false>()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9910698b0fa7110dbce4c75ee1ffb24d44ead14c", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_const/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_const%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_const%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_const%2Ftypedefs.cc?ref=0f910b4f4f6978a033e5354fcc81fe9e79792d89", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-07  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_const<int>             test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "4dc791f9c0c380c5734653016010f4337c721b6f", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_volatile/is_volatile.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_volatile%2Fis_volatile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_volatile%2Fis_volatile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_volatile%2Fis_volatile.cc?ref=0f910b4f4f6978a033e5354fcc81fe9e79792d89", "patch": "@@ -0,0 +1,50 @@\n+// 2004-12-07  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_volatile;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_property<is_volatile, int volatile, true>()) );\n+  VERIFY( (test_property<is_volatile, int const volatile, true>()) );\n+  VERIFY( (test_property<is_volatile, vClassType, true>()) );\n+  VERIFY( (test_property<is_volatile, cvClassType, true>()) );\n+\n+  // Negative tests.\n+  VERIFY( (test_property<is_volatile, int, false>()) );\n+  VERIFY( (test_property<is_volatile, int const, false>()) );\n+  VERIFY( (test_property<is_volatile, ClassType, false>()) );\n+  VERIFY( (test_property<is_volatile, cClassType, false>()) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5104163955e66c2efb35b02febe774eecd7b132d", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_volatile/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_volatile%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f910b4f4f6978a033e5354fcc81fe9e79792d89/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_volatile%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_volatile%2Ftypedefs.cc?ref=0f910b4f4f6978a033e5354fcc81fe9e79792d89", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-07  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_volatile<int>          test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}]}