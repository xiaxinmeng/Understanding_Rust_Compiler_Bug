{"sha": "a9d27cb2a3f5f2f3eafc18126957ba3f38d7cd9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlkMjdjYjJhM2Y1ZjJmM2VhZmMxODEyNjk1N2JhM2YzOGQ3Y2Q5Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-14T22:41:07Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-08-14T22:41:07Z"}, "message": "(copy_loop_body): Don't assume (pc) can be on either leg of jump; use\ninvert_exp and redirect_exp instead.\n\nFrom-SVN: r1843", "tree": {"sha": "2d6850c51ab1fbad6664d2c0475548f6ae02f6a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d6850c51ab1fbad6664d2c0475548f6ae02f6a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9d27cb2a3f5f2f3eafc18126957ba3f38d7cd9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9d27cb2a3f5f2f3eafc18126957ba3f38d7cd9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9d27cb2a3f5f2f3eafc18126957ba3f38d7cd9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9d27cb2a3f5f2f3eafc18126957ba3f38d7cd9f/comments", "author": null, "committer": null, "parents": [{"sha": "4214a50578bcf9023b8a0744a1e8ba95de7d2266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4214a50578bcf9023b8a0744a1e8ba95de7d2266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4214a50578bcf9023b8a0744a1e8ba95de7d2266"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "9ff78f4c9e735142aca23f1deeab1a7a473e52a2", "filename": "gcc/unroll.c", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9d27cb2a3f5f2f3eafc18126957ba3f38d7cd9f/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9d27cb2a3f5f2f3eafc18126957ba3f38d7cd9f/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=a9d27cb2a3f5f2f3eafc18126957ba3f38d7cd9f", "patch": "@@ -1662,23 +1662,18 @@ copy_loop_body (copy_start, copy_end, map, exit_label, last_iteration,\n \t      int fall_through;\n \n \t      /* Never map the label in this case.  */\n-\t      pattern = copy_rtx (PATTERN (insn));\n+\t      rtx tmp_pattern = copy_rtx (PATTERN (insn));\n \t      \n-\t      /* Assume a conditional branch, since the code above\n-\t\t does not let unconditional branches be copied.  */\n-\t      if (! condjump_p (insn))\n+\t      /* Set the fall through case to the exit label.  If we \n+\t\t can't do this in place, abort for now.  Maybe\n+\t\t we can do something more sophisticated eventually.  */\n+\n+\t      if (! invert_exp (tmp_pattern, insn)\n+\t\t  || ! redirect_exp (&tmp_pattern, JUMP_LABEL (insn),\n+\t\t\t\t     exit_label, insn))\n \t\tabort ();\n-\t      fall_through\n-\t\t= (XEXP (SET_SRC (PATTERN (insn)), 2) == pc_rtx) + 1;\n \n-\t      /* Set the fall through case to the exit label.  Must\n-\t\t create a new label_ref since they can't be shared.  */\n-\t      XEXP (SET_SRC (pattern), fall_through)\n-\t\t= gen_rtx (LABEL_REF, VOIDmode, exit_label);\n-\t\t      \n-\t      /* Set the original branch case to fall through.  */\n-\t      XEXP (SET_SRC (pattern), 3 - fall_through)\n-\t\t= pc_rtx;\n+\t      pattern = tmp_pattern;\n \t    }\n \t  else\n \t    pattern = copy_rtx_and_substitute (PATTERN (insn), map);"}]}