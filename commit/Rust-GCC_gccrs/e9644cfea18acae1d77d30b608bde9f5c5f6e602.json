{"sha": "e9644cfea18acae1d77d30b608bde9f5c5f6e602", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk2NDRjZmVhMThhY2FlMWQ3N2QzMGI2MDhiZGU5ZjVjNWY2ZTYwMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-07-21T03:05:09Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2001-07-21T03:05:09Z"}, "message": "flow.c (try_redirect_by_replacing_jump): Correctly compute which insns to delete in the presence of cc0 in a jump insn.\n\n\t* flow.c (try_redirect_by_replacing_jump): Correctly compute which\n\tinsns to delete in the presence of cc0 in a jump insn.\n\nFrom-SVN: r44217", "tree": {"sha": "95e9841e9a4d470c278c1c6ffcee14c2af239e1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95e9841e9a4d470c278c1c6ffcee14c2af239e1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9644cfea18acae1d77d30b608bde9f5c5f6e602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9644cfea18acae1d77d30b608bde9f5c5f6e602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9644cfea18acae1d77d30b608bde9f5c5f6e602", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9644cfea18acae1d77d30b608bde9f5c5f6e602/comments", "author": null, "committer": null, "parents": [{"sha": "3461fba7ad8292cc6bbf62d4cf0e0f8038137a30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3461fba7ad8292cc6bbf62d4cf0e0f8038137a30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3461fba7ad8292cc6bbf62d4cf0e0f8038137a30"}], "stats": {"total": 41, "additions": 18, "deletions": 23}, "files": [{"sha": "4f6c91979ffb491abba3eda6ae4ae9f9d09d8cd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9644cfea18acae1d77d30b608bde9f5c5f6e602/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9644cfea18acae1d77d30b608bde9f5c5f6e602/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9644cfea18acae1d77d30b608bde9f5c5f6e602", "patch": "@@ -2,6 +2,9 @@\n \n \t* doc/rtl.texi (REG_DEAD): Update for current semantics.\n \n+\t* flow.c (try_redirect_by_replacing_jump): Correctly compute which\n+\tinsns to delete in the presence of cc0 in a jump insn.\n+\n Fri Jul 20 22:14:49 CEST 2001  Roman Zippel  <zippel@linux-m68k.org>\n \t\t\t       Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "fb054e4b41171a1ff99b2e13cebb1e96943bf8aa", "filename": "gcc/flow.c", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9644cfea18acae1d77d30b608bde9f5c5f6e602/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9644cfea18acae1d77d30b608bde9f5c5f6e602/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=e9644cfea18acae1d77d30b608bde9f5c5f6e602", "patch": "@@ -1654,7 +1654,7 @@ try_redirect_by_replacing_jump (e, target)\n      basic_block target;\n {\n   basic_block src = e->src;\n-  rtx insn = src->end;\n+  rtx insn = src->end, kill_from;\n   edge tmp;\n   rtx set;\n   int fallthru = 0;\n@@ -1671,19 +1671,24 @@ try_redirect_by_replacing_jump (e, target)\n   if (!set || side_effects_p (set))\n     return false;\n \n+  /* In case we zap a conditional jump, we'll need to kill\n+     the cc0 setter too.  */\n+  kill_from = insn;\n+#ifdef HAVE_cc0\n+  if (reg_mentioned_p (cc0_rtx, PATTERN (insn)))\n+    kill_from = PREV_INSN (insn);\n+#endif\n+\n   /* See if we can create the fallthru edge.  */\n   if (can_fallthru (src, target))\n     {\n-      src->end = PREV_INSN (insn);\n+      src->end = PREV_INSN (kill_from);\n       if (rtl_dump_file)\n \tfprintf (rtl_dump_file, \"Removing jump %i.\\n\", INSN_UID (insn));\n-      flow_delete_insn (insn);\n       fallthru = 1;\n \n       /* Selectivly unlink whole insn chain.  */\n-      if (src->end != PREV_INSN (target->head))\n-\tflow_delete_insn_chain (NEXT_INSN (src->end),\n-\t\t\t\tPREV_INSN (target->head));\n+      flow_delete_insn_chain (kill_from, PREV_INSN (target->head));\n     }\n   /* If this already is simplejump, redirect it.  */\n   else if (simplejump_p (insn))\n@@ -1701,16 +1706,17 @@ try_redirect_by_replacing_jump (e, target)\n       rtx target_label = block_label (target);\n       rtx barrier;\n \n-      src->end = PREV_INSN (insn);\n-      src->end = emit_jump_insn_after (gen_jump (target_label), src->end);\n+      src->end = emit_jump_insn_before (gen_jump (target_label), kill_from);\n       JUMP_LABEL (src->end) = target_label;\n       LABEL_NUSES (target_label)++;\n       if (basic_block_for_insn)\n \tset_block_for_new_insns (src->end, src);\n       if (rtl_dump_file)\n \tfprintf (rtl_dump_file, \"Replacing insn %i by jump %i\\n\",\n \t\t INSN_UID (insn), INSN_UID (src->end));\n-      flow_delete_insn (insn);\n+\n+      flow_delete_insn_chain (kill_from, insn);\n+\n       barrier = next_nonnote_insn (src->end);\n       if (!barrier || GET_CODE (barrier) != BARRIER)\n \temit_barrier_after (src->end);\n@@ -1727,20 +1733,6 @@ try_redirect_by_replacing_jump (e, target)\n   e->probability = REG_BR_PROB_BASE;\n   e->count = src->count;\n \n-  /* In case we've zapped an conditional jump, we need to kill the cc0\n-     setter too if available.  */\n-#ifdef HAVE_cc0\n-  insn = src->end;\n-  if (GET_CODE (insn) == JUMP_INSN)\n-    insn = prev_nonnote_insn (insn);\n-  if (sets_cc0_p (insn))\n-    {\n-      if (insn == src->end)\n-\tsrc->end = PREV_INSN (insn);\n-      flow_delete_insn (insn);\n-    }\n-#endif\n-\n   /* We don't want a block to end on a line-number note since that has\n      the potential of changing the code between -g and not -g.  */\n   while (GET_CODE (e->src->end) == NOTE"}]}