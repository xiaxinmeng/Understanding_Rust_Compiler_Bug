{"sha": "27da6752fc0fd965ccdebb05d67458e091cee8d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdkYTY3NTJmYzBmZDk2NWNjZGViYjA1ZDY3NDU4ZTA5MWNlZThkMw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-26T19:16:21Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-26T19:16:21Z"}, "message": "(NEGTF2_LIBCALL): Define.\n\n(INIT_TARGET_OPTABS): Add support for all TFmode *_LIBCALL macros.\n\nFrom-SVN: r9481", "tree": {"sha": "575867b7fdf3afd66cf556fef91a36a97a8941b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/575867b7fdf3afd66cf556fef91a36a97a8941b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27da6752fc0fd965ccdebb05d67458e091cee8d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27da6752fc0fd965ccdebb05d67458e091cee8d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27da6752fc0fd965ccdebb05d67458e091cee8d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27da6752fc0fd965ccdebb05d67458e091cee8d3/comments", "author": null, "committer": null, "parents": [{"sha": "6a45faa72c5f2af7a163349ea0d9ccabbee9e3d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a45faa72c5f2af7a163349ea0d9ccabbee9e3d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a45faa72c5f2af7a163349ea0d9ccabbee9e3d1"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "7089b659f8ccdbd595d91a5e9ac8730e30c95c13", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27da6752fc0fd965ccdebb05d67458e091cee8d3/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27da6752fc0fd965ccdebb05d67458e091cee8d3/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=27da6752fc0fd965ccdebb05d67458e091cee8d3", "patch": "@@ -2089,6 +2089,7 @@ extern struct rtx_def *legitimize_pic_address ();\n    SPARC ABI.  */\n #define ADDTF3_LIBCALL \"_Q_add\"\n #define SUBTF3_LIBCALL \"_Q_sub\"\n+#define NEGTF2_LIBCALL \"_Q_neg\"\n #define MULTF3_LIBCALL \"_Q_mul\"\n #define DIVTF3_LIBCALL \"_Q_div\"\n #define FLOATSITF2_LIBCALL \"_Q_itoq\"\n@@ -2109,11 +2110,36 @@ extern struct rtx_def *legitimize_pic_address ();\n    with soft-float, the SFmode and DFmode sqrt instructions will be absent,\n    and the compiler will notice and try to use the TFmode sqrt instruction\n    for calls to the builtin function sqrt, but this fails.  */\n-#define INIT_TARGET_OPTABS\t\\\n-  do {\t\t\t\t\\\n-    INIT_SUBTARGET_OPTABS;\t\\\n-    if (TARGET_FPU)\t\t\\\n-      sqrt_optab->handlers[(int) TFmode].libfunc = gen_rtx (SYMBOL_REF, Pmode, \"_Q_sqrt\"); \\\n+#define INIT_TARGET_OPTABS\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    INIT_SUBTARGET_OPTABS;\t\t\t\t\t\t\\\n+    add_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n+      = gen_rtx (SYMBOL_REF, Pmode, ADDTF3_LIBCALL);\t\t\t\\\n+    sub_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n+      = gen_rtx (SYMBOL_REF, Pmode, SUBTF3_LIBCALL);\t\t\t\\\n+    neg_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n+      = gen_rtx (SYMBOL_REF, Pmode, NEGTF2_LIBCALL);\t\t\t\\\n+    smul_optab->handlers[(int) TFmode].libfunc\t\t\t\t\\\n+      = gen_rtx (SYMBOL_REF, Pmode, MULTF3_LIBCALL);\t\t\t\\\n+    flodiv_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n+      = gen_rtx (SYMBOL_REF, Pmode, DIVTF3_LIBCALL);\t\t\t\\\n+    eqtf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, EQTF2_LIBCALL);\t\t\\\n+    netf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, NETF2_LIBCALL);\t\t\\\n+    gttf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, GTTF2_LIBCALL);\t\t\\\n+    getf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, GETF2_LIBCALL);\t\t\\\n+    lttf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, LTTF2_LIBCALL);\t\t\\\n+    letf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, LETF2_LIBCALL);\t\t\\\n+    trunctfsf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, TRUNCTFSF2_LIBCALL);   \\\n+    trunctfdf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, TRUNCTFDF2_LIBCALL);   \\\n+    extendsftf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, EXTENDSFTF2_LIBCALL); \\\n+    extenddftf2_libfunc = gen_rtx (SYMBOL_REF, Pmode, EXTENDDFTF2_LIBCALL); \\\n+    floatsitf_libfunc = gen_rtx (SYMBOL_REF, Pmode, FLOATSITF2_LIBCALL);    \\\n+    fixtfsi_libfunc = gen_rtx (SYMBOL_REF, Pmode, FIX_TRUNCTFSI2_LIBCALL);  \\\n+    fixunstfsi_libfunc\t\t\t\t\t\t\t\\\n+      = gen_rtx (SYMBOL_REF, Pmode, FIXUNS_TRUNCTFSI2_LIBCALL);\t\t\\\n+    if (TARGET_FPU)\t\t\t\t\t\t\t\\\n+      sqrt_optab->handlers[(int) TFmode].libfunc\t\t\t\\\n+\t= gen_rtx (SYMBOL_REF, Pmode, \"_Q_sqrt\");\t\t\t\\\n   } while (0)\n \n /* This is meant to be redefined in the host dependent files */"}]}