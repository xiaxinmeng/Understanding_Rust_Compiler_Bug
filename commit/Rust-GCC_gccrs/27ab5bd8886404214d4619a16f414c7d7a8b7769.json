{"sha": "27ab5bd8886404214d4619a16f414c7d7a8b7769", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdhYjViZDg4ODY0MDQyMTRkNDYxOWExNmY0MTRjN2Q3YThiNzc2OQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-10-20T11:03:54Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-10-20T11:03:54Z"}, "message": "trans.c (lhs_or_actual_p): New predicate.\n\n\t* gcc-interface/trans.c (lhs_or_actual_p): New predicate.\n\t(unchecked_conversion_nop): Use it.\n\t(gnat_to_gnu): Likewise.\n\nFrom-SVN: r180243", "tree": {"sha": "2679a6ea7db4a881fbba4d13ad413da6e02bb962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2679a6ea7db4a881fbba4d13ad413da6e02bb962"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27ab5bd8886404214d4619a16f414c7d7a8b7769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ab5bd8886404214d4619a16f414c7d7a8b7769", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27ab5bd8886404214d4619a16f414c7d7a8b7769", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27ab5bd8886404214d4619a16f414c7d7a8b7769/comments", "author": null, "committer": null, "parents": [{"sha": "b7562769594e07afe277cd93bff32740c79522f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7562769594e07afe277cd93bff32740c79522f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7562769594e07afe277cd93bff32740c79522f5"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "d4aeb79a4ff4e964799f2f7f79952551a80bbd6c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27ab5bd8886404214d4619a16f414c7d7a8b7769/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27ab5bd8886404214d4619a16f414c7d7a8b7769/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=27ab5bd8886404214d4619a16f414c7d7a8b7769", "patch": "@@ -1,3 +1,9 @@\n+2011-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (lhs_or_actual_p): New predicate.\n+\t(unchecked_conversion_nop): Use it.\n+\t(gnat_to_gnu): Likewise.\n+\n 2011-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* back_end.adb (Call_Back_End): Pass the maximum logical line number"}, {"sha": "df10c9133955285bf18827c6a15e633e7e904c10", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27ab5bd8886404214d4619a16f414c7d7a8b7769/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27ab5bd8886404214d4619a16f414c7d7a8b7769/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=27ab5bd8886404214d4619a16f414c7d7a8b7769", "patch": "@@ -4472,6 +4472,28 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n   invalidate_global_renaming_pointers ();\n }\n \f\n+/* Return true if GNAT_NODE is on the LHS of an assignment or an actual\n+   parameter of a call.  */\n+\n+static bool\n+lhs_or_actual_p (Node_Id gnat_node)\n+{\n+  Node_Id gnat_parent = Parent (gnat_node);\n+  Node_Kind kind = Nkind (gnat_parent);\n+\n+  if (kind == N_Assignment_Statement && Name (gnat_parent) == gnat_node)\n+    return true;\n+\n+  if ((kind == N_Procedure_Call_Statement || kind == N_Function_Call)\n+      && Name (gnat_parent) != gnat_node)\n+    return true;\n+\n+  if (kind == N_Parameter_Association)\n+    return true;\n+\n+  return false;\n+}\n+\n /* Return true if GNAT_NODE, an unchecked type conversion, is a no-op as far\n    as gigi is concerned.  This is used to avoid conversions on the LHS.  */\n \n@@ -4483,11 +4505,7 @@ unchecked_conversion_nop (Node_Id gnat_node)\n   /* The conversion must be on the LHS of an assignment or an actual parameter\n      of a call.  Otherwise, even if the conversion was essentially a no-op, it\n      could de facto ensure type consistency and this should be preserved.  */\n-  if (!(Nkind (Parent (gnat_node)) == N_Assignment_Statement\n-\t&& Name (Parent (gnat_node)) == gnat_node)\n-      && !((Nkind (Parent (gnat_node)) == N_Procedure_Call_Statement\n-\t    || Nkind (Parent (gnat_node)) == N_Function_Call)\n-\t   && Name (Parent (gnat_node)) != gnat_node))\n+  if (!lhs_or_actual_p (gnat_node))\n     return false;\n \n   from_type = Etype (Expression (gnat_node));\n@@ -6528,13 +6546,13 @@ gnat_to_gnu (Node_Id gnat_node)\n   /* Now convert the result to the result type, unless we are in one of the\n      following cases:\n \n-       1. If this is the Name of an assignment statement or a parameter of\n-\t  a procedure call, return the result almost unmodified since the\n-\t  RHS will have to be converted to our type in that case, unless\n-\t  the result type has a simpler size.  Likewise if there is just\n-\t  a no-op unchecked conversion in-between.  Similarly, don't convert\n-\t  integral types that are the operands of an unchecked conversion\n-\t  since we need to ignore those conversions (for 'Valid).\n+       1. If this is the LHS of an assignment or an actual parameter of a\n+\t  call, return the result almost unmodified since the RHS will have\n+\t  to be converted to our type in that case, unless the result type\n+\t  has a simpler size.  Likewise if there is just a no-op unchecked\n+\t  conversion in-between.  Similarly, don't convert integral types\n+\t  that are the operands of an unchecked conversion since we need\n+\t  to ignore those conversions (for 'Valid).\n \n        2. If we have a label (which doesn't have any well-defined type), a\n \t  field or an error, return the result almost unmodified.  Similarly,\n@@ -6549,13 +6567,9 @@ gnat_to_gnu (Node_Id gnat_node)\n        4. Finally, if the type of the result is already correct.  */\n \n   if (Present (Parent (gnat_node))\n-      && ((Nkind (Parent (gnat_node)) == N_Assignment_Statement\n-\t   && Name (Parent (gnat_node)) == gnat_node)\n+      && (lhs_or_actual_p (gnat_node)\n \t  || (Nkind (Parent (gnat_node)) == N_Unchecked_Type_Conversion\n \t      && unchecked_conversion_nop (Parent (gnat_node)))\n-\t  || (Nkind (Parent (gnat_node)) == N_Procedure_Call_Statement\n-\t      && Name (Parent (gnat_node)) != gnat_node)\n-\t  || Nkind (Parent (gnat_node)) == N_Parameter_Association\n \t  || (Nkind (Parent (gnat_node)) == N_Unchecked_Type_Conversion\n \t      && !AGGREGATE_TYPE_P (gnu_result_type)\n \t      && !AGGREGATE_TYPE_P (TREE_TYPE (gnu_result))))"}]}