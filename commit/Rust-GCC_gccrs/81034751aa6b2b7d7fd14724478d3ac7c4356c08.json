{"sha": "81034751aa6b2b7d7fd14724478d3ac7c4356c08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEwMzQ3NTFhYTZiMmI3ZDdmZDE0NzI0NDc4ZDNhYzdjNDM1NmMwOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-06-12T10:01:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-06-12T10:01:36Z"}, "message": "decl.c (warn_on_field_placement): Use specific wording for discriminants.\n\n\t* gcc-interface/decl.c (warn_on_field_placement): Use specific wording\n\tfor discriminants.\n\t(warn_on_list_placement): New static function.\n\t(components_to_record): Use it to warn on multiple fields in list.\n\nFrom-SVN: r261480", "tree": {"sha": "06320c25a53b2c948340302cf765c5296fab38b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06320c25a53b2c948340302cf765c5296fab38b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81034751aa6b2b7d7fd14724478d3ac7c4356c08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81034751aa6b2b7d7fd14724478d3ac7c4356c08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81034751aa6b2b7d7fd14724478d3ac7c4356c08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81034751aa6b2b7d7fd14724478d3ac7c4356c08/comments", "author": null, "committer": null, "parents": [{"sha": "cd8ad45920aaf33a660b85878c572298faba06bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8ad45920aaf33a660b85878c572298faba06bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd8ad45920aaf33a660b85878c572298faba06bf"}], "stats": {"total": 71, "additions": 52, "deletions": 19}, "files": [{"sha": "70d7cd64e08fa6c429f8e3197e9168d89f440001", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81034751aa6b2b7d7fd14724478d3ac7c4356c08/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81034751aa6b2b7d7fd14724478d3ac7c4356c08/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=81034751aa6b2b7d7fd14724478d3ac7c4356c08", "patch": "@@ -1,3 +1,10 @@\n+2018-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (warn_on_field_placement): Use specific wording\n+\tfor discriminants.\n+\t(warn_on_list_placement): New static function.\n+\t(components_to_record): Use it to warn on multiple fields in list.\n+\n 2018-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (variant_desc): Add AUX field."}, {"sha": "ddc48d9b8cb2c708410d7f9d727cf734430e0fed", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 45, "deletions": 19, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81034751aa6b2b7d7fd14724478d3ac7c4356c08/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81034751aa6b2b7d7fd14724478d3ac7c4356c08/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=81034751aa6b2b7d7fd14724478d3ac7c4356c08", "patch": "@@ -7296,31 +7296,44 @@ warn_on_field_placement (tree gnu_field, Node_Id gnat_component_list,\n   if (!Comes_From_Source (gnat_record_type))\n     return;\n \n+  Entity_Id gnat_field\n+    = gnu_field_to_gnat (gnu_field, gnat_component_list, gnat_record_type);\n+  gcc_assert (Present (gnat_field));\n+\n   const char *msg1\n     = in_variant\n       ? \"?variant layout may cause performance issues\"\n       : \"?record layout may cause performance issues\";\n   const char *msg2\n-    = field_has_self_size (gnu_field)\n-      ? \"?component & whose length depends on a discriminant\"\n-      : field_has_variable_size (gnu_field)\n-\t? \"?component & whose length is not fixed\"\n-\t: \"?component & whose length is not multiple of a byte\";\n+    = Ekind (gnat_field) == E_Discriminant\n+      ? \"?discriminant & whose length is not multiple of a byte\"\n+      : field_has_self_size (gnu_field)\n+\t? \"?component & whose length depends on a discriminant\"\n+\t: field_has_variable_size (gnu_field)\n+\t  ? \"?component & whose length is not fixed\"\n+\t  : \"?component & whose length is not multiple of a byte\";\n   const char *msg3\n     = do_reorder\n       ? \"?comes too early and was moved down\"\n       : \"?comes too early and ought to be moved down\";\n \n-  Entity_Id gnat_field\n-    = gnu_field_to_gnat (gnu_field, gnat_component_list, gnat_record_type);\n-\n-  gcc_assert (Present (gnat_field));\n-\n   post_error (msg1, gnat_field);\n   post_error_ne (msg2, gnat_field, gnat_field);\n   post_error (msg3, gnat_field);\n }\n \n+/* Likewise but for every field present on GNU_FIELD_LIST.  */\n+\n+static void\n+warn_on_list_placement (tree gnu_field_list, Node_Id gnat_component_list,\n+\t\t        Entity_Id gnat_record_type, bool in_variant,\n+\t\t        bool do_reorder)\n+{\n+  for (tree gnu_tmp = gnu_field_list; gnu_tmp; gnu_tmp = DECL_CHAIN (gnu_tmp))\n+    warn_on_field_placement (gnu_tmp, gnat_component_list, gnat_record_type,\n+\t\t\t     in_variant, do_reorder);\n+}\n+\n /* Structure holding information for a given variant.  */\n typedef struct vinfo\n {\n@@ -7895,11 +7908,18 @@ components_to_record (Node_Id gnat_component_list, Entity_Id gnat_record_type,\n \t      if (tmp_bitp_size != 0)\n \t\t{\n \t\t  if (w_reorder && tmp_last_reorder_field_type < 2)\n-\t\t    warn_on_field_placement (gnu_tmp_bitp_list\n-\t\t\t\t\t     ? gnu_tmp_bitp_list : gnu_last,\n-\t\t\t\t\t     gnat_component_list,\n-\t\t\t\t\t     gnat_record_type, in_variant,\n-\t\t\t\t\t     do_reorder);\n+\t\t    {\n+\t\t      if (gnu_tmp_bitp_list)\n+\t\t\twarn_on_list_placement (gnu_tmp_bitp_list,\n+\t\t\t\t\t\tgnat_component_list,\n+\t\t\t\t\t\tgnat_record_type, in_variant,\n+\t\t\t\t\t\tdo_reorder);\n+\t\t      else\n+\t\t\twarn_on_field_placement (gnu_last,\n+\t\t\t\t\t\t gnat_component_list,\n+\t\t\t\t\t\t gnat_record_type, in_variant,\n+\t\t\t\t\t\t do_reorder);\n+\t\t    }\n \n \t\t  if (do_reorder)\n \t\t    gnu_bitp_list = chainon (gnu_tmp_bitp_list, gnu_bitp_list);\n@@ -7953,10 +7973,16 @@ components_to_record (Node_Id gnat_component_list, Entity_Id gnat_record_type,\n       if (last_reorder_field_type == 2\n \t  && tmp_bitp_size != 0\n \t  && tmp_last_reorder_field_type < 2)\n-\twarn_on_field_placement (gnu_tmp_bitp_list\n-\t\t\t\t ? gnu_tmp_bitp_list : gnu_field_list,\n-\t\t\t\t gnat_component_list, gnat_record_type,\n-\t\t\t\t in_variant, do_reorder);\n+\t{\n+\t  if (gnu_tmp_bitp_list)\n+\t    warn_on_list_placement (gnu_tmp_bitp_list,\n+\t\t\t\t    gnat_component_list, gnat_record_type,\n+\t\t\t\t    in_variant, do_reorder);\n+\t  else\n+\t    warn_on_field_placement (gnu_field_list,\n+\t\t\t\t     gnat_component_list, gnat_record_type,\n+\t\t\t\t     in_variant, do_reorder);\n+\t}\n     }\n \n   if (do_reorder)"}]}