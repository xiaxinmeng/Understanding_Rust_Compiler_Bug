{"sha": "6a9c5260e107891b2f847e453f405d5198206f2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE5YzUyNjBlMTA3ODkxYjJmODQ3ZTQ1M2Y0MDVkNTE5ODIwNmYyZQ==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2000-04-05T07:34:36Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2000-04-05T07:34:36Z"}, "message": "acconfig.h: Add HAVE_GAS_HIDDEN.\n\n\t* acconfig.h: Add HAVE_GAS_HIDDEN.\n        * config.h: Regenerated.\n        * configure.in: Add test for .hidden pseudo-op in gas.\n\t* configure: Regenerated.\n        * crtstuff.c: Include auto-host.h.\n        Emit additional .hidden pseudo-op for __dso_handle if the\n        assembler knows about it.\n\nFrom-SVN: r32925", "tree": {"sha": "3582fb5cb908ca50f795ffd2075ae613776b0fcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3582fb5cb908ca50f795ffd2075ae613776b0fcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a9c5260e107891b2f847e453f405d5198206f2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9c5260e107891b2f847e453f405d5198206f2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a9c5260e107891b2f847e453f405d5198206f2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a9c5260e107891b2f847e453f405d5198206f2e/comments", "author": null, "committer": null, "parents": [{"sha": "05ecd0e9ab53c460dd64ea7c2c2403854d244874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ecd0e9ab53c460dd64ea7c2c2403854d244874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05ecd0e9ab53c460dd64ea7c2c2403854d244874"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "2d0457b6c8bf1c734d556fcb7d3e3ac3436625fa", "filename": "gcc/acconfig.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a9c5260e107891b2f847e453f405d5198206f2e/gcc%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a9c5260e107891b2f847e453f405d5198206f2e/gcc%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Facconfig.h?ref=6a9c5260e107891b2f847e453f405d5198206f2e", "patch": "@@ -72,6 +72,9 @@\n /* Define if your assembler supports .weak.  */\n #undef HAVE_GAS_WEAK\n \n+/* Define if your assembler supports .hidden.  */\n+#undef HAVE_GAS_HIDDEN\n+\n /* Define if your assembler uses the old HImode fild and fist notation.  */\n #undef HAVE_GAS_FILDS_FISTS\n "}, {"sha": "600e76bc86b36aedd43a30e91ac8131d753d09e0", "filename": "gcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a9c5260e107891b2f847e453f405d5198206f2e/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a9c5260e107891b2f847e453f405d5198206f2e/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=6a9c5260e107891b2f847e453f405d5198206f2e", "patch": "@@ -73,6 +73,9 @@\n /* Define if your assembler supports .weak.  */\n #undef HAVE_GAS_WEAK\n \n+/* Define if your assembler supports .hidden.  */\n+#undef HAVE_GAS_HIDDEN\n+\n /* Define if your assembler uses the old HImode fild and fist notation.  */\n #undef HAVE_GAS_FILDS_FISTS\n "}, {"sha": "bdbf29af864068f1c3fd5f412db4e5514caf5823", "filename": "gcc/configure", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a9c5260e107891b2f847e453f405d5198206f2e/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a9c5260e107891b2f847e453f405d5198206f2e/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=6a9c5260e107891b2f847e453f405d5198206f2e", "patch": "@@ -8834,10 +8834,28 @@ EOF\n fi\n echo \"$ac_t\"\"$gcc_cv_as_weak\" 1>&6\n \n+echo $ac_n \"checking assembler hidden support\"\"... $ac_c\" 1>&6\n+echo \"configure:8839: checking assembler hidden support\" >&5\n+gcc_cv_as_hidden=\n+if test x$gcc_cv_as != x; then\n+\t# Check if we have .hidden\n+\techo \"\t.hidden foobar\" > conftest.s\n+\techo \"foobar:\" >> conftest.s\n+\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t\tcat >> confdefs.h <<\\EOF\n+#define HAVE_GAS_HIDDEN 1\n+EOF\n+\n+\t\tgcc_cv_as_hidden=\"yes\"\n+\tfi\n+\trm -f conftest.s conftest.o conftest.nm1 conftest.nm2\n+fi\n+echo \"$ac_t\"\"$gcc_cv_as_hidden\" 1>&6\n+\n case \"$target\" in \n   sparc*-*-*)\n     echo $ac_n \"checking assembler .register pseudo-op support\"\"... $ac_c\" 1>&6\n-echo \"configure:8841: checking assembler .register pseudo-op support\" >&5\n+echo \"configure:8859: checking assembler .register pseudo-op support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_register_pseudo_op'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -8867,7 +8885,7 @@ EOF\n     case \"$tm_file\" in\n     *64*)\n \techo $ac_n \"checking for 64 bit support in assembler ($gcc_cv_as)\"\"... $ac_c\" 1>&6\n-echo \"configure:8871: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n+echo \"configure:8889: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_flags64'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -8912,7 +8930,7 @@ EOF\n \n     if test \"x$gcc_cv_as_flags64\" != xno; then\n \techo $ac_n \"checking for assembler offsetable %lo() support\"\"... $ac_c\" 1>&6\n-echo \"configure:8916: checking for assembler offsetable %lo() support\" >&5\n+echo \"configure:8934: checking for assembler offsetable %lo() support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_offsetable_lo10'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -8951,7 +8969,7 @@ EOF\n \n   i[34567]86-*-*)\n     echo $ac_n \"checking assembler instructions\"\"... $ac_c\" 1>&6\n-echo \"configure:8955: checking assembler instructions\" >&5\n+echo \"configure:8973: checking assembler instructions\" >&5\n     gcc_cv_as_instructions=\n     if test x$gcc_cv_as != x; then\n \tset \"filds fists\" \"filds mem; fists mem\""}, {"sha": "734f4cae22eb15469193583b958fe11d67c73fc3", "filename": "gcc/configure.in", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a9c5260e107891b2f847e453f405d5198206f2e/gcc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a9c5260e107891b2f847e453f405d5198206f2e/gcc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.in?ref=6a9c5260e107891b2f847e453f405d5198206f2e", "patch": "@@ -4382,6 +4382,20 @@ if test x$gcc_cv_as != x; then\n fi\n AC_MSG_RESULT($gcc_cv_as_weak)\n \n+AC_MSG_CHECKING(assembler hidden support)\n+gcc_cv_as_hidden=\n+if test x$gcc_cv_as != x; then\n+\t# Check if we have .hidden\n+\techo \"\t.hidden foobar\" > conftest.s\n+\techo \"foobar:\" >> conftest.s\n+\tif $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1; then\n+\t\tAC_DEFINE(HAVE_GAS_HIDDEN)\n+\t\tgcc_cv_as_hidden=\"yes\"\n+\tfi\n+\trm -f conftest.s conftest.o conftest.nm1 conftest.nm2\n+fi\n+AC_MSG_RESULT($gcc_cv_as_hidden)\n+\n case \"$target\" in \n   sparc*-*-*)\n     AC_CACHE_CHECK([assembler .register pseudo-op support],"}, {"sha": "c4a437a28eff117edb297166d0fba3473dc32660", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a9c5260e107891b2f847e453f405d5198206f2e/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a9c5260e107891b2f847e453f405d5198206f2e/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=6a9c5260e107891b2f847e453f405d5198206f2e", "patch": "@@ -52,6 +52,7 @@ Boston, MA 02111-1307, USA.  */\n    compiled for the target, and hence definitions concerning only the host\n    do not apply.  */\n \n+#include \"auto-host.h\"\n #include \"tm.h\"\n #include \"tsystem.h\"\n \n@@ -132,7 +133,17 @@ typedef void (*func_ptr) (void);\n #ifdef OBJECT_FORMAT_ELF\n \n /* Declare the __dso_handle variable.  It should have a unique value\n-   in every shared-object; in a main program its value is zero.  */\n+   in every shared-object; in a main program its value is zero.  The\n+   object should in any case be protected.  This means the instance\n+   in one DSO or the main program is not used in another object.  The\n+   dynamic linker takes care of this.  */\n+\n+/* XXX Ideally the following should be implemented using\n+       __attribute__ ((__visibility__ (\"hidden\")))\n+   but the __attribute__ support is not yet there.  */\n+#ifdef HAVE_GAS_HIDDEN\n+asm (\".hidden\\t__dso_handle\");\n+#endif\n \n #ifdef CRTSTUFFS_O\n void *__dso_handle = &__dso_handle;"}]}