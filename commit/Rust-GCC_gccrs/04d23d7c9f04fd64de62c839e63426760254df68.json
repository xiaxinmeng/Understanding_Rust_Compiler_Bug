{"sha": "04d23d7c9f04fd64de62c839e63426760254df68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRkMjNkN2M5ZjA0ZmQ2NGRlNjJjODM5ZTYzNDI2NzYwMjU0ZGY2OA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-21T11:39:13Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-21T11:39:13Z"}, "message": "(jump_optimize): Use emit_store_flag even if branches are cheap, if\nthe store is even cheaper.\n\nFrom-SVN: r12982", "tree": {"sha": "82b8fc55666e5af0125012c7a5965a2fd39e54cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82b8fc55666e5af0125012c7a5965a2fd39e54cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04d23d7c9f04fd64de62c839e63426760254df68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d23d7c9f04fd64de62c839e63426760254df68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d23d7c9f04fd64de62c839e63426760254df68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d23d7c9f04fd64de62c839e63426760254df68/comments", "author": null, "committer": null, "parents": [{"sha": "1cd4bca92c2407e0884540c1d67694ac856bfcdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cd4bca92c2407e0884540c1d67694ac856bfcdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cd4bca92c2407e0884540c1d67694ac856bfcdf"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "afa7e153b5b2ed4a26490fb44c8e7c61693d7e76", "filename": "gcc/jump.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d23d7c9f04fd64de62c839e63426760254df68/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d23d7c9f04fd64de62c839e63426760254df68/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=04d23d7c9f04fd64de62c839e63426760254df68", "patch": "@@ -1,5 +1,5 @@\n /* Optimize jump instructions, for GNU compiler.\n-   Copyright (C) 1987, 88, 89, 91-95, 1996 Free Software Foundation, Inc.b\n+   Copyright (C) 1987, 88, 89, 91-95, 1996 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1165,13 +1165,9 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t We could handle BLKmode if (1) emit_store_flag could\n \t\t and (2) we could find the size reliably.  */\n \t      && GET_MODE (XEXP (temp4, 0)) != BLKmode\n-\t      /* No point in doing any of this if branches are cheap or we\n-\t\t don't have conditional moves.  */\n-\t      && (BRANCH_COST >= 2\n-#ifdef HAVE_conditional_move\n-\t\t  || 1\n-#endif\n-\t\t  )\n+\t      /* Even if branches are cheap, the store_flag optimization\n+\t\t can win when the operation to be performed can be\n+\t\t expressed directly.  */\n #ifdef HAVE_cc0\n \t      /* If the previous insn sets CC0 and something else, we can't\n \t\t do this since we are going to delete that insn.  */\n@@ -1282,8 +1278,19 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t     can reverse the condition.  See if (3) applies possibly\n \t\t     by reversing the condition.  Prefer reversing to (4) when\n \t\t     branches are very expensive.  */\n-\t\t  && ((reversep = 0, temp2 == const0_rtx)\n-\t\t      || (temp3 == const0_rtx\n+\t\t  && (((BRANCH_COST >= 2\n+\t\t\t|| STORE_FLAG_VALUE == -1\n+\t\t\t|| (STORE_FLAG_VALUE == 1\n+\t\t\t /* Check that the mask is a power of two,\n+\t\t\t    so that it can probably be generated\n+\t\t\t    with a shift.  */\n+\t\t\t    && exact_log2 (INTVAL (temp3)) >= 0))\n+\t\t       && (reversep = 0, temp2 == const0_rtx))\n+\t\t      || ((BRANCH_COST >= 2\n+\t\t\t   || STORE_FLAG_VALUE == -1\n+\t\t\t   || (STORE_FLAG_VALUE == 1\n+\t\t\t       && exact_log2 (INTVAL (temp2)) >= 0))\n+\t\t\t  && temp3 == const0_rtx\n \t\t\t  && (reversep = can_reverse_comparison_p (temp4, insn)))\n \t\t      || (BRANCH_COST >= 2\n \t\t\t  && GET_CODE (temp2) == CONST_INT"}]}