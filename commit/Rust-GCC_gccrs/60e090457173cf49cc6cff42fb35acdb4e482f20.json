{"sha": "60e090457173cf49cc6cff42fb35acdb4e482f20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBlMDkwNDU3MTczY2Y0OWNjNmNmZjQyZmIzNWFjZGI0ZTQ4MmYyMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-10-27T11:41:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-10-27T11:41:14Z"}, "message": "match.pd (0 % X): Properly use the iterator iterating over all modulo operators.\n\n2014-10-27  Richard Biener  <rguenther@suse.de>\n\n\t* match.pd (0 % X): Properly use the iterator iterating over\n\tall modulo operators.\n\t(X % 1): Likewise.\n\nFrom-SVN: r216732", "tree": {"sha": "2cddcf2715f9077d0c950f1a974ad7cf71bbe44f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cddcf2715f9077d0c950f1a974ad7cf71bbe44f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60e090457173cf49cc6cff42fb35acdb4e482f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e090457173cf49cc6cff42fb35acdb4e482f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60e090457173cf49cc6cff42fb35acdb4e482f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e090457173cf49cc6cff42fb35acdb4e482f20/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98ae260da1002b9bbf803a267407d84a76076191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ae260da1002b9bbf803a267407d84a76076191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ae260da1002b9bbf803a267407d84a76076191"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "18ca353c322d66eac82a23fac87b04ed9daf8591", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e090457173cf49cc6cff42fb35acdb4e482f20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e090457173cf49cc6cff42fb35acdb4e482f20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=60e090457173cf49cc6cff42fb35acdb4e482f20", "patch": "@@ -1,3 +1,9 @@\n+2014-10-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd (0 % X): Properly use the iterator iterating over\n+\tall modulo operators.\n+\t(X % 1): Likewise.\n+\n 2014-10-27  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-forwprop.c: Include tree-cfgcleanup.h and tree-into-ssa.h."}, {"sha": "3e6b25c2b01d5dc1f85bd27f507743ced5351c3f", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60e090457173cf49cc6cff42fb35acdb4e482f20/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60e090457173cf49cc6cff42fb35acdb4e482f20/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=60e090457173cf49cc6cff42fb35acdb4e482f20", "patch": "@@ -64,13 +64,13 @@ along with GCC; see the file COPYING3.  If not see\n (for op (ceil_mod floor_mod round_mod trunc_mod)\n  /* 0 % X is always zero.  */\n  (simplify\n-  (trunc_mod integer_zerop@0 @1)\n+  (op integer_zerop@0 @1)\n   /* But not for 0 % 0 so that we can get the proper warnings and errors.  */\n   (if (!integer_zerop (@1))\n    @0))\n  /* X % 1 is always zero.  */\n  (simplify\n-  (trunc_mod @0 integer_onep)\n+  (op @0 integer_onep)\n   { build_zero_cst (type); }))\n \n /* x | ~0 -> ~0  */"}]}