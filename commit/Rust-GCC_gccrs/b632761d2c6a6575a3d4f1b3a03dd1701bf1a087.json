{"sha": "b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYzMjc2MWQyYzZhNjU3NWEzZDRmMWIzYTAzZGQxNzAxYmYxYTA4Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-04-28T19:01:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-04-28T19:01:19Z"}, "message": "Implement C++17 [[nodiscard]] attribute.\n\n\tPR c++/38172\n\tPR c++/54379\ngcc/c-family/\n\t* c-lex.c (c_common_has_attribute): Handle nodiscard.\ngcc/cp/\n\t* parser.c (cp_parser_std_attribute): Handle [[nodiscard]].\n\t* tree.c (handle_nodiscard_attribute): New.\n\t(cxx_attribute_table): Add [[nodiscard]].\n\t* cvt.c (cp_get_fndecl_from_callee, cp_get_callee_fndecl): New.\n\t(maybe_warn_nodiscard): New.\n\t(convert_to_void): Call it.\n\nFrom-SVN: r235597", "tree": {"sha": "0f443efe47d371ec7fe124b59afcaef0d9fe8d67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f443efe47d371ec7fe124b59afcaef0d9fe8d67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "babaa9df0279b16243acc58c9a5d7731f4882af4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/babaa9df0279b16243acc58c9a5d7731f4882af4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/babaa9df0279b16243acc58c9a5d7731f4882af4"}], "stats": {"total": 404, "additions": 399, "deletions": 5}, "files": [{"sha": "9e1695e5601e09a3b2e1f07fcd76f181c8095b28", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "patch": "@@ -1,3 +1,7 @@\n+2016-04-28  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-lex.c (c_common_has_attribute): Handle nodiscard.\n+\n 2016-04-28  Eduard Sanou  <dhole@openmailbox.org>\n \t    Matthias Klose  <doko@debian.org>\n "}, {"sha": "38a428d533381dfa87e95172771c04e37d6dc54b", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "patch": "@@ -347,7 +347,8 @@ c_common_has_attribute (cpp_reader *pfile)\n \t\tresult = 200809;\n \t      else if (is_attribute_p (\"deprecated\", attr_name))\n \t\tresult = 201309;\n-\t      else if (is_attribute_p (\"maybe_unused\", attr_name))\n+\t      else if (is_attribute_p (\"maybe_unused\", attr_name)\n+\t\t       || is_attribute_p (\"nodiscard\", attr_name))\n \t\tresult = 201603;\n \t      if (result)\n \t\tattr_name = NULL_TREE;"}, {"sha": "d8f35af2e305983895704a4014316a61aadca9cc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "patch": "@@ -1,5 +1,15 @@\n 2016-04-28  Jason Merrill  <jason@redhat.com>\n \n+\tImplement C++17 [[nodiscard]] attribute.\n+\tPR c++/38172\n+\tPR c++/54379\n+\t* parser.c (cp_parser_std_attribute): Handle [[nodiscard]].\n+\t* tree.c (handle_nodiscard_attribute): New.\n+\t(cxx_attribute_table): Add [[nodiscard]].\n+\t* cvt.c (cp_get_fndecl_from_callee, cp_get_callee_fndecl): New.\n+\t(maybe_warn_nodiscard): New.\n+\t(convert_to_void): Call it.\n+\n \t* cvt.c (cp_get_callee): New.\n \t* constexpr.c (get_function_named_in_call): Use it.\n \t* cxx-pretty-print.c (postfix_expression): Use it."}, {"sha": "8a06609dc0497b2101af5618219afe40b0f2f1a2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "patch": "@@ -5695,6 +5695,8 @@ extern tree cp_convert\t\t\t\t(tree, tree, tsubst_flags_t);\n extern tree cp_convert_and_check                (tree, tree, tsubst_flags_t);\n extern tree cp_fold_convert\t\t\t(tree, tree);\n extern tree cp_get_callee\t\t\t(tree);\n+extern tree cp_get_callee_fndecl\t\t(tree);\n+extern tree cp_get_fndecl_from_callee\t\t(tree);\n extern tree convert_to_void\t\t\t(tree, impl_conv_void,\n                                  \t\t tsubst_flags_t);\n extern tree convert_force\t\t\t(tree, tree, int,"}, {"sha": "2e2bac74307e98ffa17b48d1748688b4f9ead4e0", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 102, "deletions": 1, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "patch": "@@ -918,6 +918,104 @@ cp_get_callee (tree call)\n   return NULL_TREE;\n }\n \n+/* FN is the callee of a CALL_EXPR or AGGR_INIT_EXPR; return the FUNCTION_DECL\n+   if we can.  */\n+\n+tree\n+cp_get_fndecl_from_callee (tree fn)\n+{\n+  if (fn == NULL_TREE)\n+    return fn;\n+  if (TREE_CODE (fn) == FUNCTION_DECL)\n+    return fn;\n+  tree type = TREE_TYPE (fn);\n+  if (type == unknown_type_node)\n+    return NULL_TREE;\n+  gcc_assert (POINTER_TYPE_P (type));\n+  fn = maybe_constant_init (fn);\n+  STRIP_NOPS (fn);\n+  if (TREE_CODE (fn) == ADDR_EXPR)\n+    {\n+      fn = TREE_OPERAND (fn, 0);\n+      if (TREE_CODE (fn) == FUNCTION_DECL)\n+\treturn fn;\n+    }\n+  return NULL_TREE;\n+}\n+\n+/* Like get_callee_fndecl, but handles AGGR_INIT_EXPR as well and uses the\n+   constexpr machinery.  */\n+\n+tree\n+cp_get_callee_fndecl (tree call)\n+{\n+  return cp_get_fndecl_from_callee (cp_get_callee (call));\n+}\n+\n+/* Subroutine of convert_to_void.  Warn if we're discarding something with\n+   attribute [[nodiscard]].  */\n+\n+static void\n+maybe_warn_nodiscard (tree expr, impl_conv_void implicit)\n+{\n+  tree call = expr;\n+  if (TREE_CODE (expr) == TARGET_EXPR)\n+    call = TARGET_EXPR_INITIAL (expr);\n+  location_t loc = EXPR_LOC_OR_LOC (call, input_location);\n+  tree callee = cp_get_callee (call);\n+  if (!callee)\n+    return;\n+\n+  tree type = TREE_TYPE (callee);\n+  if (TYPE_PTRMEMFUNC_P (type))\n+    type = TYPE_PTRMEMFUNC_FN_TYPE (type);\n+  if (POINTER_TYPE_P (type))\n+    type = TREE_TYPE (type);\n+\n+  tree rettype = TREE_TYPE (type);\n+  tree fn = cp_get_fndecl_from_callee (callee);\n+  if (implicit != ICV_CAST && fn\n+      && lookup_attribute (\"nodiscard\", DECL_ATTRIBUTES (fn)))\n+    {\n+      if (warning_at (loc, OPT_Wunused_result,\n+\t\t      \"ignoring return value of %qD, \"\n+\t\t      \"declared with attribute nodiscard\", fn))\n+\tinform (DECL_SOURCE_LOCATION (fn), \"declared here\");\n+    }\n+  else if (implicit != ICV_CAST\n+\t   && lookup_attribute (\"nodiscard\", TYPE_ATTRIBUTES (rettype)))\n+    {\n+      if (warning_at (loc, OPT_Wunused_result,\n+\t\t      \"ignoring returned value of type %qT, \"\n+\t\t      \"declared with attribute nodiscard\", rettype))\n+\t{\n+\t  if (fn)\n+\t    inform (DECL_SOURCE_LOCATION (fn),\n+\t\t    \"in call to %qD, declared here\", fn);\n+\t  inform (DECL_SOURCE_LOCATION (TYPE_NAME (rettype)),\n+\t\t  \"%qT declared here\", rettype);\n+\t}\n+    }\n+  else if (TREE_CODE (expr) == TARGET_EXPR\n+\t   && lookup_attribute (\"warn_unused_result\", TYPE_ATTRIBUTES (type)))\n+    {\n+      /* The TARGET_EXPR confuses do_warn_unused_result into thinking that the\n+\t result is used, so handle that case here.  */\n+      if (fn)\n+\t{\n+\t  if (warning_at (loc, OPT_Wunused_result,\n+\t\t\t  \"ignoring return value of %qD, \"\n+\t\t\t  \"declared with attribute warn_unused_result\",\n+\t\t\t  fn))\n+\t    inform (DECL_SOURCE_LOCATION (fn), \"declared here\");\n+\t}\n+      else\n+\twarning_at (loc, OPT_Wunused_result,\n+\t\t    \"ignoring return value of function \"\n+\t\t    \"declared with attribute warn_unused_result\");\n+    }\n+}\n+\n /* When an expression is used in a void context, its value is discarded and\n    no lvalue-rvalue and similar conversions happen [expr.static.cast/4,\n    stmt.expr/1, expr.comma/1].  This permits dereferencing an incomplete type\n@@ -1032,6 +1130,7 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n       break;\n \n     case CALL_EXPR:   /* We have a special meaning for volatile void fn().  */\n+      maybe_warn_nodiscard (expr, implicit);\n       break;\n \n     case INDIRECT_REF:\n@@ -1257,12 +1356,14 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n \t    {\n \t      tree fn = AGGR_INIT_EXPR_FN (init);\n \t      expr = build_call_array_loc (input_location,\n-\t\t\t\t\t   TREE_TYPE (TREE_TYPE (TREE_TYPE (fn))),\n+\t\t\t\t\t   TREE_TYPE (TREE_TYPE\n+\t\t\t\t\t\t      (TREE_TYPE (fn))),\n \t\t\t\t\t   fn,\n \t\t\t\t\t   aggr_init_expr_nargs (init),\n \t\t\t\t\t   AGGR_INIT_EXPR_ARGP (init));\n \t    }\n \t}\n+      maybe_warn_nodiscard (expr, implicit);\n       break;\n \n     default:;"}, {"sha": "d7e9c7b804861a4a026f7ac719fdb81ebdeeaf10", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "patch": "@@ -3570,6 +3570,30 @@ zero_init_p (const_tree t)\n   return 1;\n }\n \n+/* Handle the C++17 [[nodiscard]] attribute, which is similar to the GNU\n+   warn_unused_result attribute.  */\n+\n+static tree\n+handle_nodiscard_attribute (tree *node, tree name, tree /*args*/,\n+\t\t\t    int /*flags*/, bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    {\n+      if (VOID_TYPE_P (TREE_TYPE (TREE_TYPE (*node))))\n+\twarning (OPT_Wattributes, \"%qE attribute applied to %qD with void \"\n+\t\t \"return type\", name, *node);\n+    }\n+  else if (OVERLOAD_TYPE_P (*node))\n+    /* OK */;\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute can only be applied to \"\n+\t       \"functions or to class or enumeration types\", name);\n+      *no_add_attrs = true;\n+    }\n+  return NULL_TREE;\n+}\n+\n /* Table of valid C++ attributes.  */\n const struct attribute_spec cxx_attribute_table[] =\n {\n@@ -3591,6 +3615,8 @@ const struct attribute_spec std_attribute_table[] =\n        affects_type_identity } */\n   { \"maybe_unused\", 0, 0, false, false, false,\n     handle_unused_attribute, false },\n+  { \"nodiscard\", 0, 0, false, false, false,\n+    handle_nodiscard_attribute, false },\n   { NULL,\t      0, 0, false, false, false, NULL, false }\n };\n "}, {"sha": "adf850c19036c3f919e00abead77fadfe65e2754", "filename": "gcc/testsuite/c-c++-common/attr-warn-unused-result.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-warn-unused-result.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-warn-unused-result.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-warn-unused-result.c?ref=b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "patch": "@@ -1,6 +1,6 @@\n /* warn_unused_result attribute tests.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O\" } */\n+/* { dg-options \"-O -ftrack-macro-expansion=0\" } */\n \n #define WUR __attribute__((warn_unused_result))\n #define WURAI __attribute__((warn_unused_result, always_inline)) inline\n@@ -12,7 +12,7 @@ typedef struct { char big[1024]; fnt fn; } C;\n \n WUR int check1 (void);\n WUR void check2 (void); /* { dg-warning \"attribute ignored\" } */\n-int foo WUR;\t  /* { dg-warning \"only applies\" } */\n+int foo WUR;\t  /* { dg-message \"only applies\" } */\n int bar (void);\n extern WURAI int check3 (void) { return bar (); }\n WUR A check4 (void);", "previous_filename": "gcc/testsuite/gcc.dg/attr-warn-unused-result.c"}, {"sha": "f8a87a8ddc3721a6feb0119864d2312b7795b49c", "filename": "gcc/testsuite/g++.dg/cpp1z/feat-cxx1z.C", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Ffeat-cxx1z.C?ref=b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "patch": "@@ -345,11 +345,19 @@\n #endif\n \n #ifdef __has_cpp_attribute\n+\n #  if ! __has_cpp_attribute(maybe_unused)\n #    error \"__has_cpp_attribute(maybe_unused)\"\n #  elif __has_cpp_attribute(maybe_unused) != 201603\n #    error \"__has_cpp_attribute(maybe_unused) != 201603\"\n #  endif\n+\n+#  if ! __has_cpp_attribute(nodiscard)\n+#    error \"__has_cpp_attribute(nodiscard)\"\n+#  elif __has_cpp_attribute(nodiscard) != 201603\n+#    error \"__has_cpp_attribute(nodiscard) != 201603\"\n+#  endif\n+\n #else\n #  error \"__has_cpp_attribute\"\n #endif"}, {"sha": "5f2345a3407a11488200b4472ffd095f84a6fe8e", "filename": "gcc/testsuite/g++.dg/cpp1z/nodiscard1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard1.C?ref=b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile { target c++11 } }\n+\n+[[nodiscard]] int f();\n+\n+int main()\n+{\n+  f();\t\t\t\t// { dg-warning \"\" }\n+}"}, {"sha": "56022c3157a9341f09d87177aeead6b651c4bb06", "filename": "gcc/testsuite/g++.dg/cpp1z/nodiscard2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard2.C?ref=b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile { target c++11 } }\n+\n+struct [[nodiscard]] A { };\t// { dg-message \"\" }\n+\n+A f();\t\t\t\t// { dg-message \"\" }\n+\n+int main()\n+{\n+  f();\t\t\t\t// { dg-warning \"Wunused-result\" }\n+}"}, {"sha": "bc2a032ecb9dca5665c729b24c7b89fb8a7c0a4b", "filename": "gcc/testsuite/g++.dg/cpp1z/nodiscard3.C", "status": "added", "additions": 203, "deletions": 0, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard3.C?ref=b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "patch": "@@ -0,0 +1,203 @@\n+/* nodiscard attribute tests, adapted from gcc.dg/attr-warn-unused-result.c.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c++1z -O -ftrack-macro-expansion=0\" } */\n+\n+#define WUR [[nodiscard]]\n+#define WURAI [[nodiscard, gnu::always_inline]] inline\n+enum [[nodiscard]] E { e };\n+typedef E (*fnt) (void);\n+\n+typedef struct { long i; } A;\n+typedef struct { long i; long j; } B;\n+typedef struct { char big[1024]; fnt fn; } C;\n+struct [[nodiscard]] D { int i; D(); ~D(); };\n+\n+WUR E check1 (void);\n+WUR void check2 (void); /* { dg-warning \"nodiscard\" } */\n+WUR int foo;\t\t/* { dg-warning \"nodiscard\" } */\n+int bar (void);\n+WURAI E check3 (void) { return (E)bar (); }\n+WUR A check4 (void);\n+WUR B check5 (void);\n+WUR C check6 (void);\n+A bar7 (void);\n+B bar8 (void);\n+C bar9 (void);\n+WURAI A check7 (void) { return bar7 (); }\n+WURAI B check8 (void) { return bar8 (); }\n+WURAI C check9 (void) { return bar9 (); }\n+/* This is useful for checking whether return value of statement\n+   expressions (returning int in this case) is used.  */\n+WURAI int check_int_result (int res) { return res; }\n+#define GU(v) ({ int e = 0; (v) = bar (); if ((v) < 23) e = 14; e; })\n+fnt fnptr;\n+WUR E check10 (void);\n+int baz (void);\n+WURAI E check11 (void) { return (E)baz (); }\n+int k;\n+\n+D check12();\n+\n+void\n+test (void)\n+{\n+  int i = 0, j;\n+  const fnt pcheck1 = check1;\n+  const fnt pcheck3 = check3;\n+  A a;\n+  B b;\n+  C c;\n+  D d;\n+  if (check1 ())\n+    return;\n+  i += check1 ();\n+  i += ({ check1 (); });\n+  check1 ();\t\t/* { dg-warning \"nodiscard\" } */\n+  (void) check1 ();\n+  check1 (), bar ();\t/* { dg-warning \"nodiscard\" } */\n+  check2 ();\n+  (void) check2 ();\n+  check2 (), bar ();\n+  if (check3 ())\n+    return;\n+  i += check3 ();\n+  i += ({ check3 (); });\n+  check3 ();\t\t/* { dg-warning \"nodiscard\" } */\n+  (void) check3 ();\n+  check3 (), bar ();\t/* { dg-warning \"nodiscard\" } */\n+  a = check4 ();\n+  if (a.i)\n+    return;\n+  if (check4 ().i)\n+    return;\n+  if (({ check4 (); }).i)\n+    return;\n+  check4 ();\t\t/* { dg-warning \"nodiscard\" } */\n+  (void) check4 ();\n+  check4 (), bar ();\t/* { dg-warning \"nodiscard\" } */\n+  b = check5 ();\n+  if (b.i + b.j)\n+    return;\n+  if (check5 ().j)\n+    return;\n+  if (({ check5 (); }).j)\n+    return;\n+  check5 ();\t\t/* { dg-warning \"nodiscard\" } */\n+  (void) check5 ();\n+  check5 (), bar ();\t/* { dg-warning \"nodiscard\" } */\n+  c = check6 ();\n+  if (c.big[12] + c.big[29])\n+    return;\n+  if (check6 ().big[27])\n+    return;\n+  if (({ check6 (); }).big[0])\n+    return;\n+  check6 ();\t\t/* { dg-warning \"nodiscard\" } */\n+  (void) check6 ();\n+  check6 (), bar ();\t/* { dg-warning \"nodiscard\" } */\n+  a = check7 ();\n+  if (a.i)\n+    return;\n+  if (check7 ().i)\n+    return;\n+  if (({ check7 (); }).i)\n+    return;\n+  check7 ();\t\t/* { dg-warning \"nodiscard\" } */\n+  (void) check7 ();\n+  check7 (), bar ();\t/* { dg-warning \"nodiscard\" } */\n+  b = check8 ();\n+  if (b.i + b.j)\n+    return;\n+  if (check8 ().j)\n+    return;\n+  if (({ check8 (); }).j)\n+    return;\n+  check8 ();\t\t/* { dg-warning \"nodiscard\" } */\n+  (void) check8 ();\n+  check8 (), bar ();\t/* { dg-warning \"nodiscard\" } */\n+  c = check9 ();\n+  if (c.big[12] + c.big[29])\n+    return;\n+  if (check9 ().big[27])\n+    return;\n+  if (({ check9 (); }).big[0])\n+    return;\n+  check9 ();\t\t/* { dg-warning \"nodiscard\" } */\n+  (void) check9 ();\n+  check9 (), bar ();\t/* { dg-warning \"nodiscard\" } */\n+  if (check_int_result (GU (j)))\n+    return;\n+  i += check_int_result (GU (j));\n+  i += ({ check_int_result (GU (j)); });\n+  check_int_result (GU (j)); /* { dg-warning \"nodiscard\" } */\n+  (void) check_int_result (GU (j));\n+  check_int_result (GU (j)), bar (); /* { dg-warning \"nodiscard\" } */\n+  if (fnptr ())\n+    return;\n+  i += fnptr ();\n+  i += ({ fnptr (); });\n+  fnptr ();\t\t/* { dg-warning \"nodiscard\" } */\n+  (void) fnptr ();\n+  fnptr (), bar ();\t/* { dg-warning \"nodiscard\" } */\n+  fnptr = check1;\n+  if (fnptr ())\n+    return;\n+  i += fnptr ();\n+  i += ({ fnptr (); });\n+  fnptr ();\t\t/* { dg-warning \"nodiscard\" } */\n+  (void) fnptr ();\n+  fnptr (), bar ();\t/* { dg-warning \"nodiscard\" } */\n+  fnptr = check3;\n+  if (fnptr ())\n+    return;\n+  i += fnptr ();\n+  i += ({ fnptr (); });\n+  fnptr ();\t\t/* { dg-warning \"nodiscard\" } */\n+  (void) fnptr ();\n+  fnptr (), bar ();\t/* { dg-warning \"nodiscard\" } */\n+  if (bar9 ().fn ())\n+    return;\n+  i += bar9 ().fn ();\n+  i += ({ bar9 ().fn (); });\n+  bar9 ().fn ();\t/* { dg-warning \"nodiscard\" } */\n+  (void) bar9 ().fn ();\n+  bar9 ().fn (), bar (); /* { dg-warning \"nodiscard\" } */\n+  if ((k ? check1 : check10) ())\n+    return;\n+  i += (k ? check1 : check10) ();\n+  i += ({ (k ? check1 : check10) (); });\n+  (k ? check1 : check10) (); /* { dg-warning \"nodiscard\" } */\n+  (void) (k ? check1 : check10) ();\n+  (k ? check1 : check10) (), bar (); /* { dg-warning \"nodiscard\" } */\n+  if ((k ? check3 : check11) ())\n+    return;\n+  i += (k ? check3 : check11) ();\n+  i += ({ (k ? check3 : check11) (); });\n+  (k ? check3 : check11) (); /* { dg-warning \"nodiscard\" } */\n+  (void) (k ? check3 : check11) ();\n+  (k ? check3 : check11) (), bar (); /* { dg-warning \"nodiscard\" } */\n+  if (pcheck1 ())\n+    return;\n+  i += pcheck1 ();\n+  i += ({ pcheck1 (); });\n+  pcheck1 ();\t\t/* { dg-warning \"nodiscard\" } */\n+  (void) pcheck1 ();\n+  pcheck1 (), bar ();\t/* { dg-warning \"nodiscard\" } */\n+  if (pcheck3 ())\n+    return;\n+  i += pcheck3 ();\n+  i += ({ pcheck3 (); });\n+  pcheck3 ();\t\t/* { dg-warning \"nodiscard\" } */\n+  (void) pcheck3 ();\n+  pcheck3 (), bar ();\t/* { dg-warning \"nodiscard\" } */\n+  d = check12 ();\n+  if (d.i)\n+    return;\n+  if (check12 ().i)\n+    return;\n+  if (({ check12 (); }).i)\n+    return;\n+  check12 ();\t\t/* { dg-warning \"nodiscard\" } */\n+  (void) check12 ();\n+  check12 (), bar ();\t/* { dg-warning \"nodiscard\" } */\n+}"}, {"sha": "56ed17a6abe864c61d2bf7f0b33532594974f3a9", "filename": "gcc/testsuite/g++.dg/warn/Wunused-result-2.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-result-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-result-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-result-2.C?ref=b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/66177\n+\n+struct QSize\n+{\n+    QSize(int w, int h) : wd(w), ht(h) {}\n+\n+    QSize expandedTo() const __attribute__ ((__warn_unused_result__))\n+    {\n+        return QSize(2, 3);\n+    }\n+\n+private:\n+    int wd;\n+    int ht;\n+};\n+\n+void foo()\n+{\n+    QSize sz(2, 2);\n+    sz.expandedTo();\t\t// { dg-warning \"warn_unused_result\" }\n+}"}, {"sha": "1b9ef8af786bfe8f695335ad0cce7d95f48a389f", "filename": "gcc/testsuite/g++.dg/warn/unused-result1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funused-result1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b632761d2c6a6575a3d4f1b3a03dd1701bf1a087/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funused-result1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funused-result1.C?ref=b632761d2c6a6575a3d4f1b3a03dd1701bf1a087", "patch": "@@ -6,5 +6,5 @@ public:\n };\n class QString {\n   QByteArray toLocal8Bit() const __attribute__ ((warn_unused_result));\n-  void fooWarnHere() const { toLocal8Bit(); } // { dg-warning \"ignoring\" \"\" { xfail *-*-* } }\n+  void fooWarnHere() const { toLocal8Bit(); } // { dg-warning \"ignoring\" }\n };"}]}