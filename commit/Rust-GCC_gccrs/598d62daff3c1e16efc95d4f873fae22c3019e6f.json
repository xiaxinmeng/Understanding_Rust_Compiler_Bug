{"sha": "598d62daff3c1e16efc95d4f873fae22c3019e6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4ZDYyZGFmZjNjMWUxNmVmYzk1ZDRmODczZmFlMjJjMzAxOWU2Zg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-23T00:54:15Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-23T00:54:15Z"}, "message": "var-tracking.c: Use rtx_insn\n\ngcc/\n2014-08-23  David Malcolm  <dmalcolm@redhat.com>\n\n\t* var-tracking.c (struct micro_operation_def): Strengthen field\n\t\"insn\" from rtx to rtx_insn *.\n\t(struct emit_note_data_def): Likewise.\n\t(insn_stack_adjust_offset_pre_post): Likewise for param \"insn\".\n\t(vt_stack_adjustments): Likewise for local \"insn\".\n\t(adjust_insn): Likewise for param \"insn\".\n\t(val_store): Likewise.\n\t(val_resolve): Likewise.\n\t(struct count_use_info): Likewise for field \"insn\".\n\t(log_op_type): Likewise for param \"insn\".\n\t(reverse_op): Likewise.\n\t(prepare_call_arguments): Likewise.\n\t(add_with_sets):  The initial param takes an insn, but we can't\n\tyet strengthen it from rtx to rtx_insn * since it's used as a\n\tcselib_record_sets_hook callback.  For now rename initial param\n\tfrom \"insn\" to \"uncast_insn\", and introduce a local \"insn\" of\n\tthe stronger rtx_insn * type, with a checked cast.\n\t(compute_bb_dataflow): Strengthen local \"insn\" from rtx to\n\trtx_insn *.\n\t(emit_note_insn_var_location): Likewise.\n\t(emit_notes_for_changes): Likewise.\n\t(emit_notes_for_differences): Likewise.\n\t(next_non_note_insn_var_location): Likewise for return type and\n\tfor param \"insn\".\n\t(emit_notes_in_bb): Likewise for locals \"insn\" and \"next_insn\".\n\t(vt_initialize): Likewise for local \"insn\".\n\t(delete_debug_insns): Likewise for locals \"insn\" and \"next\".\n\nFrom-SVN: r214392", "tree": {"sha": "571e5898c78d19dcce89e57e9c3cc3612bc7ad6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/571e5898c78d19dcce89e57e9c3cc3612bc7ad6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/598d62daff3c1e16efc95d4f873fae22c3019e6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598d62daff3c1e16efc95d4f873fae22c3019e6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/598d62daff3c1e16efc95d4f873fae22c3019e6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598d62daff3c1e16efc95d4f873fae22c3019e6f/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ddabbd71505c316c1ad4de5615d1e3f54513891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ddabbd71505c316c1ad4de5615d1e3f54513891", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ddabbd71505c316c1ad4de5615d1e3f54513891"}], "stats": {"total": 78, "additions": 55, "deletions": 23}, "files": [{"sha": "2df3920ad6c88e3b08d723413612323593eeb774", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598d62daff3c1e16efc95d4f873fae22c3019e6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598d62daff3c1e16efc95d4f873fae22c3019e6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=598d62daff3c1e16efc95d4f873fae22c3019e6f", "patch": "@@ -1,3 +1,33 @@\n+2014-08-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* var-tracking.c (struct micro_operation_def): Strengthen field\n+\t\"insn\" from rtx to rtx_insn *.\n+\t(struct emit_note_data_def): Likewise.\n+\t(insn_stack_adjust_offset_pre_post): Likewise for param \"insn\".\n+\t(vt_stack_adjustments): Likewise for local \"insn\".\n+\t(adjust_insn): Likewise for param \"insn\".\n+\t(val_store): Likewise.\n+\t(val_resolve): Likewise.\n+\t(struct count_use_info): Likewise for field \"insn\".\n+\t(log_op_type): Likewise for param \"insn\".\n+\t(reverse_op): Likewise.\n+\t(prepare_call_arguments): Likewise.\n+\t(add_with_sets):  The initial param takes an insn, but we can't\n+\tyet strengthen it from rtx to rtx_insn * since it's used as a\n+\tcselib_record_sets_hook callback.  For now rename initial param\n+\tfrom \"insn\" to \"uncast_insn\", and introduce a local \"insn\" of\n+\tthe stronger rtx_insn * type, with a checked cast.\n+\t(compute_bb_dataflow): Strengthen local \"insn\" from rtx to\n+\trtx_insn *.\n+\t(emit_note_insn_var_location): Likewise.\n+\t(emit_notes_for_changes): Likewise.\n+\t(emit_notes_for_differences): Likewise.\n+\t(next_non_note_insn_var_location): Likewise for return type and\n+\tfor param \"insn\".\n+\t(emit_notes_in_bb): Likewise for locals \"insn\" and \"next_insn\".\n+\t(vt_initialize): Likewise for local \"insn\".\n+\t(delete_debug_insns): Likewise for locals \"insn\" and \"next\".\n+\n 2014-08-23  David Malcolm  <dmalcolm@redhat.com>\n \n \t* varasm.c (mark_constants): Strengthen param \"insn\" from rtx to"}, {"sha": "3309b6dff815715c6c33201fee7bfc051f466d3d", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598d62daff3c1e16efc95d4f873fae22c3019e6f/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598d62daff3c1e16efc95d4f873fae22c3019e6f/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=598d62daff3c1e16efc95d4f873fae22c3019e6f", "patch": "@@ -179,7 +179,7 @@ typedef struct micro_operation_def\n      instruction or note in the original flow (before any var-tracking\n      notes are inserted, to simplify emission of notes), for MO_SET\n      and MO_CLOBBER.  */\n-  rtx insn;\n+  rtx_insn *insn;\n \n   union {\n     /* Location.  For MO_SET and MO_COPY, this is the SET that\n@@ -509,7 +509,7 @@ typedef variable_table_type::iterator variable_iterator_type;\n typedef struct emit_note_data_def\n {\n   /* The instruction which the note will be emitted before/after.  */\n-  rtx insn;\n+  rtx_insn *insn;\n \n   /* Where the note will be emitted (before/after insn)?  */\n   enum emit_note_where where;\n@@ -622,7 +622,7 @@ static bool cselib_hook_called;\n /* Local function prototypes.  */\n static void stack_adjust_offset_pre_post (rtx, HOST_WIDE_INT *,\n \t\t\t\t\t  HOST_WIDE_INT *);\n-static void insn_stack_adjust_offset_pre_post (rtx, HOST_WIDE_INT *,\n+static void insn_stack_adjust_offset_pre_post (rtx_insn *, HOST_WIDE_INT *,\n \t\t\t\t\t       HOST_WIDE_INT *);\n static bool vt_stack_adjustments (void);\n \n@@ -793,7 +793,7 @@ stack_adjust_offset_pre_post (rtx pattern, HOST_WIDE_INT *pre,\n    PRE- and POST-modifying stack pointer.  */\n \n static void\n-insn_stack_adjust_offset_pre_post (rtx insn, HOST_WIDE_INT *pre,\n+insn_stack_adjust_offset_pre_post (rtx_insn *insn, HOST_WIDE_INT *pre,\n \t\t\t\t   HOST_WIDE_INT *post)\n {\n   rtx pattern;\n@@ -862,7 +862,7 @@ vt_stack_adjustments (void)\n       /* Check if the edge destination has been visited yet.  */\n       if (!VTI (dest)->visited)\n \t{\n-\t  rtx insn;\n+\t  rtx_insn *insn;\n \t  HOST_WIDE_INT pre, post, offset;\n \t  VTI (dest)->visited = true;\n \t  VTI (dest)->in.stack_adjust = offset = VTI (src)->out.stack_adjust;\n@@ -1198,7 +1198,7 @@ adjust_mem_stores (rtx loc, const_rtx expr, void *data)\n    as other sets to the insn.  */\n \n static void\n-adjust_insn (basic_block bb, rtx insn)\n+adjust_insn (basic_block bb, rtx_insn *insn)\n {\n   struct adjust_mem_data amd;\n   rtx set;\n@@ -2471,7 +2471,8 @@ val_bind (dataflow_set *set, rtx val, rtx loc, bool modified)\n    values bound to it.  */\n \n static void\n-val_store (dataflow_set *set, rtx val, rtx loc, rtx insn, bool modified)\n+val_store (dataflow_set *set, rtx val, rtx loc, rtx_insn *insn,\n+\t   bool modified)\n {\n   cselib_val *v = CSELIB_VAL_PTR (val);\n \n@@ -2600,7 +2601,7 @@ val_reset (dataflow_set *set, decl_or_value dv)\n    value.  */\n \n static void\n-val_resolve (dataflow_set *set, rtx val, rtx loc, rtx insn)\n+val_resolve (dataflow_set *set, rtx val, rtx loc, rtx_insn *insn)\n {\n   decl_or_value dv = dv_from_value (val);\n \n@@ -5295,7 +5296,7 @@ var_lowpart (enum machine_mode mode, rtx loc)\n struct count_use_info\n {\n   /* The insn where the RTX is.  */\n-  rtx insn;\n+  rtx_insn *insn;\n \n   /* The basic block where insn is.  */\n   basic_block bb;\n@@ -5477,7 +5478,7 @@ use_type (rtx loc, struct count_use_info *cui, enum machine_mode *modep)\n    INSN of BB.  */\n \n static inline void\n-log_op_type (rtx x, basic_block bb, rtx insn,\n+log_op_type (rtx x, basic_block bb, rtx_insn *insn,\n \t     enum micro_operation_type mopt, FILE *out)\n {\n   fprintf (out, \"bb %i op %i insn %i %s \",\n@@ -5729,7 +5730,7 @@ add_uses_1 (rtx *x, void *cui)\n    no longer live we can express its value as VAL - 6.  */\n \n static void\n-reverse_op (rtx val, const_rtx expr, rtx insn)\n+reverse_op (rtx val, const_rtx expr, rtx_insn *insn)\n {\n   rtx src, arg, ret;\n   cselib_val *v;\n@@ -6127,7 +6128,7 @@ static rtx call_arguments;\n /* Compute call_arguments.  */\n \n static void\n-prepare_call_arguments (basic_block bb, rtx insn)\n+prepare_call_arguments (basic_block bb, rtx_insn *insn)\n {\n   rtx link, x, call;\n   rtx prev, cur, next;\n@@ -6463,8 +6464,9 @@ prepare_call_arguments (basic_block bb, rtx insn)\n    first place, in which case sets and n_sets will be 0).  */\n \n static void\n-add_with_sets (rtx insn, struct cselib_set *sets, int n_sets)\n+add_with_sets (rtx uncast_insn, struct cselib_set *sets, int n_sets)\n {\n+  rtx_insn *insn = as_a <rtx_insn *> (uncast_insn);\n   basic_block bb = BLOCK_FOR_INSN (insn);\n   int n1, n2;\n   struct count_use_info cui;\n@@ -6661,7 +6663,7 @@ compute_bb_dataflow (basic_block bb)\n \n   FOR_EACH_VEC_ELT (VTI (bb)->mos, i, mo)\n     {\n-      rtx insn = mo->insn;\n+      rtx_insn *insn = mo->insn;\n \n       switch (mo->type)\n \t{\n@@ -8586,7 +8588,7 @@ int\n emit_note_insn_var_location (variable_def **varp, emit_note_data *data)\n {\n   variable var = *varp;\n-  rtx insn = data->insn;\n+  rtx_insn *insn = data->insn;\n   enum emit_note_where where = data->where;\n   variable_table_type *vars = data->vars;\n   rtx_note *note;\n@@ -8967,7 +8969,7 @@ process_changed_values (variable_table_type *htab)\n    the notes shall be emitted before of after instruction INSN.  */\n \n static void\n-emit_notes_for_changes (rtx insn, enum emit_note_where where,\n+emit_notes_for_changes (rtx_insn *insn, enum emit_note_where where,\n \t\t\tshared_hash vars)\n {\n   emit_note_data data;\n@@ -9085,7 +9087,7 @@ emit_notes_for_differences_2 (variable_def **slot, variable_table_type *old_vars\n    NEW_SET.  */\n \n static void\n-emit_notes_for_differences (rtx insn, dataflow_set *old_set,\n+emit_notes_for_differences (rtx_insn *insn, dataflow_set *old_set,\n \t\t\t    dataflow_set *new_set)\n {\n   shared_hash_htab (old_set->vars)\n@@ -9099,8 +9101,8 @@ emit_notes_for_differences (rtx insn, dataflow_set *old_set,\n \n /* Return the next insn after INSN that is not a NOTE_INSN_VAR_LOCATION.  */\n \n-static rtx\n-next_non_note_insn_var_location (rtx insn)\n+static rtx_insn *\n+next_non_note_insn_var_location (rtx_insn *insn)\n {\n   while (insn)\n     {\n@@ -9127,8 +9129,8 @@ emit_notes_in_bb (basic_block bb, dataflow_set *set)\n \n   FOR_EACH_VEC_ELT (VTI (bb)->mos, i, mo)\n     {\n-      rtx insn = mo->insn;\n-      rtx next_insn = next_non_note_insn_var_location (insn);\n+      rtx_insn *insn = mo->insn;\n+      rtx_insn *next_insn = next_non_note_insn_var_location (insn);\n \n       switch (mo->type)\n \t{\n@@ -10050,7 +10052,7 @@ vt_initialize (void)\n \n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n       HOST_WIDE_INT pre, post = 0;\n       basic_block first_bb, last_bb;\n \n@@ -10186,7 +10188,7 @@ static void\n delete_debug_insns (void)\n {\n   basic_block bb;\n-  rtx insn, next;\n+  rtx_insn *insn, *next;\n \n   if (!MAY_HAVE_DEBUG_INSNS)\n     return;"}]}