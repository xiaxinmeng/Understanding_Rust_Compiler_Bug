{"sha": "de8bd1420e94a63faef64c2ccac021fd89a11497", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU4YmQxNDIwZTk0YTYzZmFlZjY0YzJjY2FjMDIxZmQ4OWExMTQ5Nw==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-05-14T08:44:09Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-05-14T08:44:09Z"}, "message": "PR 48915 Abort handling\n\nFrom-SVN: r173750", "tree": {"sha": "7992bcce7fae4d0b2746f2216e3a5e1c98df7aa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7992bcce7fae4d0b2746f2216e3a5e1c98df7aa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de8bd1420e94a63faef64c2ccac021fd89a11497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de8bd1420e94a63faef64c2ccac021fd89a11497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de8bd1420e94a63faef64c2ccac021fd89a11497", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de8bd1420e94a63faef64c2ccac021fd89a11497/comments", "author": null, "committer": null, "parents": [{"sha": "1028b2bded33a9ee92db6a1a968258f3ba29aa24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1028b2bded33a9ee92db6a1a968258f3ba29aa24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1028b2bded33a9ee92db6a1a968258f3ba29aa24"}], "stats": {"total": 375, "additions": 206, "deletions": 169}, "files": [{"sha": "afc553384adff5236c346065cbc122c45ad7edd5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -1,3 +1,18 @@\n+2011-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        PR libfortran/48915\n+        * gfortran.h (gfc_option_t): Remove flag_dump_core.\n+        * gfortran.texi (GFORTRAN_ERROR_DUMPCORE): Remove section.\n+        (GFORTRAN_ERROR_BACKTRACE): Document that it's enabled by default.\n+        * intrinsic.texi (ABORT): Remove explanation of -fdump-core.\n+        * invoke.texi: Remove -fdump-core, document that -fbacktrace is\n+        enabled by default.\n+        * lang.opt: Remove -fdump-core.\n+        * options.c (gfc_init_options): Make backtrace default to enabled,\n+        remove dump_core.\n+        (gfc_handle_option): Remove OPT_fdump-core.\n+        * trans-decl.c: Pass a 0 to preserve ABI.\n+\n 2011-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n \n         * gfortran.texi: Remove GFORTRAN_USE_STDERR documentation."}, {"sha": "3b4967de63af63163f4568e199105282deef3e4f", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -2212,7 +2212,6 @@ typedef struct\n   int flag_backslash;\n   int flag_backtrace;\n   int flag_allow_leading_underscore;\n-  int flag_dump_core;\n   int flag_external_blas;\n   int blas_matmul_limit;\n   int flag_cray_pointer;"}, {"sha": "518c998793e4f4e4692d1e04682a614bfd280615", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -587,7 +587,6 @@ Malformed environment variables are silently ignored.\n * GFORTRAN_DEFAULT_RECL:: Default record length for new files\n * GFORTRAN_LIST_SEPARATOR::  Separator for list output\n * GFORTRAN_CONVERT_UNIT::  Set endianness for unformatted I/O\n-* GFORTRAN_ERROR_DUMPCORE:: Dump core on run-time errors\n * GFORTRAN_ERROR_BACKTRACE:: Show backtrace on run-time errors\n @end menu\n \n@@ -745,26 +744,15 @@ environment variable will override the CONVERT specifier in the\n open statement}.  This is to give control over data formats to\n users who do not have the source code of their program available.\n \n-@node GFORTRAN_ERROR_DUMPCORE\n-@section @env{GFORTRAN_ERROR_DUMPCORE}---Dump core on run-time errors\n-\n-If the @env{GFORTRAN_ERROR_DUMPCORE} variable is set to\n-@samp{y}, @samp{Y} or @samp{1} (only the first letter is relevant)\n-then library run-time errors cause core dumps.  To disable the core\n-dumps, set the variable to @samp{n}, @samp{N}, @samp{0}.  Default\n-is not to core dump unless the @option{-fdump-core} compile option\n-was used.\n-\n @node GFORTRAN_ERROR_BACKTRACE\n @section @env{GFORTRAN_ERROR_BACKTRACE}---Show backtrace on run-time errors\n \n-If the @env{GFORTRAN_ERROR_BACKTRACE} variable is set to\n-@samp{y}, @samp{Y} or @samp{1} (only the first letter is relevant)\n-then a backtrace is printed when a run-time error occurs.\n-To disable the backtracing, set the variable to\n-@samp{n}, @samp{N}, @samp{0}.  Default is not to print a backtrace\n-unless the @option{-fbacktrace} compile option\n-was used.\n+If the @env{GFORTRAN_ERROR_BACKTRACE} variable is set to @samp{y},\n+@samp{Y} or @samp{1} (only the first letter is relevant) then a\n+backtrace is printed when a serious run-time error occurs.  To disable\n+the backtracing, set the variable to @samp{n}, @samp{N}, @samp{0}.\n+Default is to print a backtrace unless the @option{-fno-backtrace}\n+compile option was used.\n \n @c =====================================================================\n @c PART II: LANGUAGE REFERENCE"}, {"sha": "804b31f8f49d20170a832ea44ef17dede3324ee7", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -345,10 +345,7 @@ the applicable standard for each intrinsic procedure is noted.\n @table @asis\n @item @emph{Description}:\n @code{ABORT} causes immediate termination of the program.  On operating\n-systems that support a core dump, @code{ABORT} will produce a core dump even if\n-the option @option{-fno-dump-core} is in effect, which is suitable for debugging\n-purposes.\n-@c TODO: Check if this (with -fno-dump-core) is correct.\n+systems that support a core dump, @code{ABORT} will produce a core dump.\n \n @item @emph{Standard}:\n GNU extension"}, {"sha": "f68b18c677663eafdb29fa51b24af2b8b61fb4a1", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -145,7 +145,7 @@ and warnings}.\n @item Debugging Options\n @xref{Debugging Options,,Options for debugging your program or GNU Fortran}.\n @gccoptlist{-fdump-fortran-original  -fdump-fortran-optimized @gol\n--ffpe-trap=@var{list}  -fdump-core -fbacktrace -fdump-parse-tree}\n+-ffpe-trap=@var{list} -fbacktrace -fdump-parse-tree}\n \n @item Directory Options\n @xref{Directory Options,,Options for directory search}.\n@@ -935,22 +935,18 @@ Some of the routines in the Fortran runtime library, like\n @code{ffpe-trap=precision} is used. For this reason, the use of \n @code{ffpe-trap=precision} is not recommended.\n \n-@item -fbacktrace\n-@opindex @code{fbacktrace}\n+@item -fno-backtrace\n+@opindex @code{fno-backtrace}\n @cindex backtrace\n @cindex trace\n-Specify that, when a runtime error is encountered or a deadly signal is\n-emitted (segmentation fault, illegal instruction, bus error or\n-floating-point exception), the Fortran runtime\n-library should output a backtrace of the error.  This option\n-only has influence for compilation of the Fortran main program.\n-\n-@item -fdump-core\n-@cindex core, dump\n-@opindex @code{fdump-core}\n-Request that a core-dump file is written to disk when a runtime error\n-is encountered on systems that support core dumps. This option is\n-only effective for the compilation of the Fortran main program.\n+When a serious runtime error is encountered or a deadly signal is\n+emitted (segmentation fault, illegal instruction, bus error,\n+floating-point exception, and the other POSIX signals that have the\n+action @samp{core}), the Fortran runtime library tries to output a\n+backtrace of the error. @code{-fno-backtrace} disables the backtrace\n+generation. This option only has influence for compilation of the\n+Fortran main program.\n+\n @end table\n \n @xref{Debugging Options,,Options for Debugging Your Program or GCC,"}, {"sha": "a056c5c651ed68faf3bb4cad431d10537bead86d", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -366,10 +366,6 @@ fdollar-ok\n Fortran\n Allow dollar signs in entity names\n \n-fdump-core\n-Fortran\n-Dump a core file when a runtime error occurs\n-\n fdump-fortran-original\n Fortran\n Display the code tree after parsing"}, {"sha": "d4778ba7b1ea67c056945526e335a2188028fecf", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -134,9 +134,8 @@ gfc_init_options (unsigned int decoded_options_count,\n   gfc_option.flag_automatic = 1;\n   gfc_option.flag_backslash = 0;\n   gfc_option.flag_module_private = 0;\n-  gfc_option.flag_backtrace = 0;\n+  gfc_option.flag_backtrace = 1;\n   gfc_option.flag_allow_leading_underscore = 0;\n-  gfc_option.flag_dump_core = 0;\n   gfc_option.flag_external_blas = 0;\n   gfc_option.blas_matmul_limit = 30;\n   gfc_option.flag_cray_pointer = 0;\n@@ -697,10 +696,6 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.rtcheck |= GFC_RTCHECK_ARRAY_TEMPS;\n       break;\n       \n-    case OPT_fdump_core:\n-      gfc_option.flag_dump_core = value;\n-      break;\n-\n     case OPT_fcray_pointer:\n       gfc_option.flag_cray_pointer = value;\n       break;"}, {"sha": "f0138b0076c82f68ebb7a8fc5d28d95df3eb8b8f", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -4636,9 +4636,12 @@ create_main_function (tree fndecl)\n                                            gfc_option.allow_std));\n     CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n                             build_int_cst (integer_type_node, pedantic));\n+    /* TODO: This is the old -fdump-core option, which is unused but\n+       passed due to ABI compatibility; remove when bumping the\n+       library ABI.  */\n     CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n                             build_int_cst (integer_type_node,\n-                                           gfc_option.flag_dump_core));\n+                                           0));\n     CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n                             build_int_cst (integer_type_node,\n                                            gfc_option.flag_backtrace));"}, {"sha": "ada4eae6ef55375f3178eda74e621c3d22a325cc", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -1,3 +1,39 @@\n+2011-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        PR libfortran/48915\n+        * intrinsics/abort.c (abort): Call sys_abort().\n+        * io/unix.c (st_vprintf): Call sys_abort().\n+        * libgfortran.h (options_t): Remove dump_core member.\n+        (handler): Rename to backtrace_handler.\n+        (compile_options_t): Remove dump_core member.\n+        (sys_exit): Remove.\n+        (sys_abort): New function.\n+        * runtime/backtrace.c (show_backtrace): Print a message if\n+\tbacktrace is not available on target, update filter symbol name\n+\tdue to backtrace_handler renaming.\n+        * runtime/compile_options.c (backtrace_handler): New\n+\timplementation based on example in Glibc manual.\n+        (set_options): Remove dump_core handling, make signal handler\n+\thandle more signals.\n+        (init_compile_options): Remove dump_core.\n+        * runtime/environ.c (variable_table[]): Remove\n+\tGFORTRAN_ERROR_DUMPCORE element.\n+        (show_variables): Update name, call exit().\n+        * runtime/error.c (sys_exit): Remove.\n+        (sys_abort): New function.\n+        (recursion_check): Call sys_abort().\n+        (os_error): Call exit().\n+        (runtime_error): Likewise.\n+        (runtime_error_at): Likewise.\n+        (internal_error): Likewise.\n+        (generate_error): Likewise.\n+        (notify_std): Likewise.\n+        * runtime/stop.c (stop_numeric): Call exit().\n+        (stop_numeric_f08): Likewise.\n+        (stop_string): Likewise.\n+        (error_stop_string): Call sys_abort().\n+        (error_stop_numeric): Print backtrace, exit with provided code.\n+\n 2011-05-14  Janne Blomqvist  <jb@gcc.gnu.org>\n \n         * io/unix.c (st_vprintf,st_printf): Move to runtime/error.c."}, {"sha": "543f8fc04c8cc7e5ad6e9bd194f067b166e15452", "filename": "libgfortran/intrinsics/abort.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2Fintrinsics%2Fabort.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2Fintrinsics%2Fabort.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fabort.c?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -30,6 +30,5 @@ export_proto_np(PREFIX(abort));\n \n void PREFIX(abort) (void)\n {\n-  close_units ();\n-  abort ();\n+  sys_abort ();\n }"}, {"sha": "e77ba10790f77b20088da56b2fc72c5fa5598c5b", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -509,15 +509,15 @@ typedef struct\n   const char *separator;\n \n   int all_unbuffered, unbuffered_preconnected, default_recl;\n-  int fpe, dump_core, backtrace;\n+  int fpe, backtrace;\n }\n options_t;\n \n extern options_t options;\n internal_proto(options);\n \n-extern void handler (int);\n-internal_proto(handler);\n+extern void backtrace_handler (int);\n+internal_proto(backtrace_handler);\n \n \n /* Compile-time options that will influence the library.  */\n@@ -528,7 +528,6 @@ typedef struct\n   int allow_std;\n   int pedantic;\n   int convert;\n-  int dump_core;\n   int backtrace;\n   int sign_zero;\n   size_t record_marker;\n@@ -688,8 +687,8 @@ internal_proto(show_backtrace);\n #define GFC_OTOA_BUF_SIZE (GFC_LARGEST_BUF * 3 + 1)\n #define GFC_BTOA_BUF_SIZE (GFC_LARGEST_BUF * 8 + 1)\n \n-extern void sys_exit (int) __attribute__ ((noreturn));\n-internal_proto(sys_exit);\n+extern void sys_abort (void) __attribute__ ((noreturn));\n+internal_proto(sys_abort);\n \n extern ssize_t estr_write (const char *);\n internal_proto(estr_write);"}, {"sha": "10917d3e0c22fb5a106a495009cd787768daf550", "filename": "libgfortran/runtime/backtrace.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2Fruntime%2Fbacktrace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2Fruntime%2Fbacktrace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fbacktrace.c?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -214,7 +214,7 @@ show_backtrace (void)\n \t    if (strncasecmp (func, \"*_gfortran\", 10) == 0\n \t\t|| strncasecmp (func, \"_gfortran\", 9) == 0\n \t\t|| strcmp (func, \"main\") == 0 || strcmp (func, \"_start\") == 0\n-\t\t|| strcmp (func, \"_gfortrani_handler\") == 0)\n+\t\t|| strcmp (func, \"_gfortrani_backtrace_handler\") == 0)\n \t      continue;\n \n \t    if (local_strcasestr (str[i], \"libgfortran.so\") != NULL\n@@ -334,5 +334,7 @@ show_backtrace (void)\n   /* Fallback to the glibc backtrace.  */\n   estr_write (\"\\nBacktrace for this error:\\n\");\n   dump_glibc_backtrace (depth, str);\n+  return;\n #endif\n+  estr_write (\"\\nBacktrace not yet available on this platform, sorry!\\n\");\n }"}, {"sha": "dc0da4bcb90e77f7efba01fab6d7a9e37afc5aad", "filename": "libgfortran/runtime/compile_options.c", "status": "modified", "additions": 59, "deletions": 53, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2Fruntime%2Fcompile_options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2Fruntime%2Fcompile_options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fcompile_options.c?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -33,49 +33,28 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n compile_options_t compile_options;\n \n \n+volatile sig_atomic_t fatal_error_in_progress = 0;\n+\n /* A signal handler to allow us to output a backtrace.  */\n void\n-handler (int signum)\n+backtrace_handler (int signum)\n {\n-  const char * name = NULL, * desc = NULL;\n-\n-  switch (signum)\n-    {\n-#if defined(SIGSEGV)\n-      case SIGSEGV:\n-\tname = \"SIGSEGV\";\n-\tdesc = \"Segmentation fault\";\n-\tbreak;\n-#endif\n-\n-#if defined(SIGBUS)\n-      case SIGBUS:\n-\tname = \"SIGBUS\";\n-\tdesc = \"Bus error\";\n-\tbreak;\n-#endif\n-\n-#if defined(SIGILL)\n-      case SIGILL:\n-\tname = \"SIGILL\";\n-\tdesc = \"Illegal instruction\";\n-\tbreak;\n-#endif\n-\n-#if defined(SIGFPE)\n-      case SIGFPE:\n-\tname = \"SIGFPE\";\n-\tdesc = \"Floating-point exception\";\n-\tbreak;\n-#endif\n-    }\n-\n-  if (name)\n-    st_printf (\"\\nProgram received signal %d (%s): %s.\\n\", signum, name, desc);\n-  else\n-    st_printf (\"\\nProgram received signal %d.\\n\", signum);\n-\n-  sys_exit (5);\n+  /* Since this handler is established for more than one kind of signal, \n+     it might still get invoked recursively by delivery of some other kind\n+     of signal.  Use a static variable to keep track of that. */\n+  if (fatal_error_in_progress)\n+    raise (signum);\n+  fatal_error_in_progress = 1;\n+\n+  show_backtrace();\n+\n+  /* Now reraise the signal.  We reactivate the signal's\n+     default handling, which is to terminate the process.\n+     We could just call exit or abort,\n+     but reraising the signal sets the return status\n+     from the process correctly. */\n+  signal (signum, SIG_DFL);\n+  raise (signum);\n }\n \n \n@@ -92,8 +71,9 @@ set_options (int num, int options[])\n     compile_options.allow_std = options[1];\n   if (num >= 3)\n     compile_options.pedantic = options[2];\n-  if (num >= 4)\n-    compile_options.dump_core = options[3];\n+  /* options[3] is the removed -fdump-core option. It's place in the\n+     options array is retained due to ABI compatibility. Remove when\n+     bumping the library ABI.  */\n   if (num >= 5)\n     compile_options.backtrace = options[4];\n   if (num >= 6)\n@@ -103,26 +83,53 @@ set_options (int num, int options[])\n   if (num >= 8)\n     compile_options.range_check = options[7];\n \n-  /* If backtrace is required, we set signal handlers on most common\n-     signals.  */\n-#if defined(HAVE_SIGNAL) && (defined(SIGSEGV) || defined(SIGBUS) \\\n-\t\t\t     || defined(SIGILL) || defined(SIGFPE))\n+  /* If backtrace is required, we set signal handlers on the POSIX\n+     2001 signals with core action.  */\n+#if defined(HAVE_SIGNAL) && (defined(SIGQUIT) || defined(SIGILL) \\\n+\t\t\t     || defined(SIGABRT) || defined(SIGFPE) \\\n+\t\t\t     || defined(SIGSEGV) || defined(SIGBUS) \\\n+\t\t\t     || defined(SIGSYS) || defined(SIGTRAP) \\\n+\t\t\t     || defined(SIGXCPU) || defined(SIGXFSZ))\n   if (compile_options.backtrace)\n     {\n+#if defined(SIGQUIT)\n+      signal (SIGQUIT, backtrace_handler);\n+#endif\n+\n+#if defined(SIGILL)\n+      signal (SIGILL, backtrace_handler);\n+#endif\n+\n+#if defined(SIGABRT)\n+      signal (SIGABRT, backtrace_handler);\n+#endif\n+\n+#if defined(SIGFPE)\n+      signal (SIGFPE, backtrace_handler);\n+#endif\n+\n #if defined(SIGSEGV)\n-      signal (SIGSEGV, handler);\n+      signal (SIGSEGV, backtrace_handler);\n #endif\n \n #if defined(SIGBUS)\n-      signal (SIGBUS, handler);\n+      signal (SIGBUS, backtrace_handler);\n #endif\n \n-#if defined(SIGILL)\n-      signal (SIGILL, handler);\n+#if defined(SIGSYS)\n+      signal (SIGSYS, backtrace_handler);\n #endif\n \n-#if defined(SIGFPE)\n-      signal (SIGFPE, handler);\n+#if defined(SIGTRAP)\n+      signal (SIGTRAP, backtrace_handler);\n+#endif\n+\n+#if defined(SIGXCPU)\n+      signal (SIGXCPU, backtrace_handler);\n+#endif\n+\n+#if defined(SIGXFSZ)\n+      signal (SIGXFSZ, backtrace_handler);\n #endif\n     }\n #endif\n@@ -140,7 +147,6 @@ init_compile_options (void)\n     | GFC_STD_F2003 | GFC_STD_F2008 | GFC_STD_F95 | GFC_STD_F77\n     | GFC_STD_F2008_OBS | GFC_STD_GNU | GFC_STD_LEGACY;\n   compile_options.pedantic = 0;\n-  compile_options.dump_core = 0;\n   compile_options.backtrace = 0;\n   compile_options.sign_zero = 1;\n   compile_options.range_check = 1;"}, {"sha": "6bd88865d89b47d320aeecd7b0d1ef62275009f6", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -318,11 +318,6 @@ static variable variable_table[] = {\n   {\"GFORTRAN_CONVERT_UNIT\", 0, 0, init_unformatted, show_string,\n    \"Set format for unformatted files\", 0},\n \n-  /* Behaviour when encoutering a runtime error.  */\n-  {\"GFORTRAN_ERROR_DUMPCORE\", -1, &options.dump_core,\n-    init_boolean, show_boolean,\n-    \"Dump a core file (if possible) on runtime error\", -1},\n-\n   {\"GFORTRAN_ERROR_BACKTRACE\", -1, &options.backtrace,\n     init_boolean, show_boolean,\n     \"Print out a backtrace (if possible) on runtime error\", -1},\n@@ -388,7 +383,7 @@ show_variables (void)\n   estr_write (\"\\nCommand line arguments:\\n\");\n   estr_write (\"  --help               Print this list\\n\");\n \n-  sys_exit (0);\n+  exit (0);\n }\n \n /* This is the handling of the GFORTRAN_CONVERT_UNITS environment variable."}, {"sha": "dae298df203022c107a1978e56f921d58deb898c", "filename": "libgfortran/runtime/error.c", "status": "modified", "additions": 55, "deletions": 47, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2Fruntime%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2Fruntime%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Ferror.c?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -58,44 +58,32 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n \n \n-/* sys_exit()-- Terminate the program with an exit code.  */\n-\n-void\n-sys_exit (int code)\n-{\n-  /* Show error backtrace if possible.  */\n-  if (code != 0 && code != 4\n-      && (options.backtrace == 1\n-\t  || (options.backtrace == -1 && compile_options.backtrace == 1)))\n-    show_backtrace ();\n-\n-  /* Dump core if requested.  */\n-  if (code != 0\n-      && (options.dump_core == 1\n-\t || (options.dump_core == -1 && compile_options.dump_core == 1)))\n-    {\n-#if defined(HAVE_GETRLIMIT) && defined(RLIMIT_CORE)\n-      /* Warn if a core file cannot be produced because\n-\t of core size limit.  */\n-\n-      struct rlimit core_limit;\n-\n-      if (getrlimit (RLIMIT_CORE, &core_limit) == 0 && core_limit.rlim_cur == 0)\n-\testr_write (\"** Warning: a core dump was requested, but the core size\"\n-\t\t   \"limit\\n**          is currently zero.\\n\\n\");\n-#endif\n-      \n-      \n-#if defined(HAVE_KILL) && defined(HAVE_GETPID) && defined(SIGQUIT)\n-      kill (getpid (), SIGQUIT);\n-#else\n-      estr_write (\"Core dump not possible, sorry.\");\n-#endif\n-    }\n-\n-  exit (code);\n-}\n-\n+/* Termination of a program: F2008 2.3.5 talks about \"normal\n+   termination\" and \"error termination\". Normal termination occurs as\n+   a result of e.g. executing the end program statement, and executing\n+   the STOP statement. It includes the effect of the C exit()\n+   function. \n+\n+   Error termination is initiated when the ERROR STOP statement is\n+   executed, when ALLOCATE/DEALLOCATE fails without STAT= being\n+   specified, when some of the co-array synchronization statements\n+   fail without STAT= being specified, and some I/O errors if\n+   ERR/IOSTAT/END/EOR is not present, and finally EXECUTE_COMMAND_LINE\n+   failure without CMDSTAT=.\n+\n+   2.3.5 also explains how co-images synchronize during termination.\n+\n+   In libgfortran we have two ways of ending a program. exit(code) is\n+   a normal exit; calling exit() also causes open units to be\n+   closed. No backtrace or core dump is needed here. When something\n+   goes wrong, we have sys_abort() which tries to print the backtrace\n+   if -fbacktrace is enabled, and then dumps core; whether a core file\n+   is generated is system dependent. When aborting, we don't flush and\n+   close open units, as program memory might be corrupted and we'd\n+   rather risk losing dirty data in the buffers rather than corrupting\n+   files on disk.\n+\n+*/\n \n /* Error conditions.  The tricky part here is printing a message when\n  * it is the I/O subsystem that is severely wounded.  Our goal is to\n@@ -107,7 +95,6 @@ sys_exit (int code)\n  * 1    Terminated because of operating system error.\n  * 2    Error in the runtime library\n  * 3    Internal error in runtime library\n- * 4    Error during error processing (very bad)\n  *\n  * Other error returns are reserved for the STOP statement with a numeric code.\n  */\n@@ -150,7 +137,7 @@ st_vprintf (const char *format, va_list ap)\n #define ERROR_MESSAGE \"Internal error: buffer overrun in st_vprintf()\\n\"\n       write (STDERR_FILENO, buffer, ST_VPRINTF_SIZE - 1);\n       write (STDERR_FILENO, ERROR_MESSAGE, strlen(ERROR_MESSAGE));\n-      sys_exit(2);\n+      sys_abort ();\n #undef ERROR_MESSAGE\n \n     }\n@@ -173,6 +160,27 @@ st_printf (const char * format, ...)\n }\n \n \n+/* sys_abort()-- Terminate the program showing backtrace and dumping\n+   core.  */\n+\n+void\n+sys_abort ()\n+{\n+  /* If backtracing is enabled, print backtrace and disable signal\n+     handler for ABRT.  */\n+  if (options.backtrace == 1\n+      || (options.backtrace == -1 && compile_options.backtrace == 1))\n+    {\n+      show_backtrace ();\n+#if defined(HAVE_SIGNAL) && defined(SIGABRT)\n+      signal (SIGABRT, SIG_DFL);\n+#endif\n+    }\n+\n+  abort();\n+}\n+\n+\n /* gfc_xtoa()-- Integer to hexadecimal conversion.  */\n \n const char *\n@@ -278,7 +286,7 @@ recursion_check (void)\n \n   /* Don't even try to print something at this point */\n   if (magic == MAGIC)\n-    sys_exit (4);\n+    sys_abort ();\n \n   magic = MAGIC;\n }\n@@ -300,7 +308,7 @@ os_error (const char *message)\n   estr_write (\"\\n\");\n   estr_write (message);\n   estr_write (\"\\n\");\n-  sys_exit (1);\n+  exit (1);\n }\n iexport(os_error);\n \n@@ -319,7 +327,7 @@ runtime_error (const char *message, ...)\n   st_vprintf (message, ap);\n   va_end (ap);\n   estr_write (\"\\n\");\n-  sys_exit (2);\n+  exit (2);\n }\n iexport(runtime_error);\n \n@@ -338,7 +346,7 @@ runtime_error_at (const char *where, const char *message, ...)\n   st_vprintf (message, ap);\n   va_end (ap);\n   estr_write (\"\\n\");\n-  sys_exit (2);\n+  exit (2);\n }\n iexport(runtime_error_at);\n \n@@ -376,7 +384,7 @@ internal_error (st_parameter_common *cmp, const char *message)\n      because hopefully it doesn't happen too often).  */\n   stupid_function_name_for_static_linking();\n \n-  sys_exit (3);\n+  exit (3);\n }\n \n \n@@ -544,7 +552,7 @@ generate_error (st_parameter_common *cmp, int family, const char *message)\n   estr_write (\"Fortran runtime error: \");\n   estr_write (message);\n   estr_write (\"\\n\");\n-  sys_exit (2);\n+  exit (2);\n }\n iexport(generate_error);\n \n@@ -606,7 +614,7 @@ notify_std (st_parameter_common *cmp, int std, const char * message)\n       estr_write (\"Fortran runtime error: \");\n       estr_write (message);\n       estr_write (\"\\n\");\n-      sys_exit (2);\n+      exit (2);\n     }\n   else\n     {"}, {"sha": "2efe23924e737406abbaf5d8822fd45d52d54daa", "filename": "libgfortran/runtime/stop.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2Fruntime%2Fstop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de8bd1420e94a63faef64c2ccac021fd89a11497/libgfortran%2Fruntime%2Fstop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fstop.c?ref=de8bd1420e94a63faef64c2ccac021fd89a11497", "patch": "@@ -41,7 +41,7 @@ stop_numeric (GFC_INTEGER_4 code)\n   else\n     st_printf (\"STOP %d\\n\", (int)code);\n \n-  sys_exit (code);\n+  exit (code);\n }\n \n \n@@ -55,7 +55,7 @@ void\n stop_numeric_f08 (GFC_INTEGER_4 code)\n {\n   st_printf (\"STOP %d\\n\", (int)code);\n-  sys_exit (code);\n+  exit (code);\n }\n \n \n@@ -71,7 +71,7 @@ stop_string (const char *string, GFC_INTEGER_4 len)\n       (void) sizeof (w); /* Avoid compiler warning about not using w.  */\n       estr_write (\"\\n\");\n     }\n-  sys_exit (0);\n+  exit (0);\n }\n \n \n@@ -92,7 +92,7 @@ error_stop_string (const char *string, GFC_INTEGER_4 len)\n   (void) sizeof (w); /* Avoid compiler warning about not using w.  */\n   estr_write (\"\\n\");\n \n-  sys_exit (1);\n+  sys_abort ();\n }\n \n \n@@ -106,5 +106,8 @@ void\n error_stop_numeric (GFC_INTEGER_4 code)\n {\n   st_printf (\"ERROR STOP %d\\n\", (int) code);\n-  sys_exit (code);\n+  if (options.backtrace == 1\n+      || (options.backtrace == -1 && compile_options.backtrace == 1))\n+    show_backtrace ();\n+  exit (code);\n }"}]}