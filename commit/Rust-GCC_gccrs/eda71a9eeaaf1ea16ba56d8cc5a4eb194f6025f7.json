{"sha": "eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRhNzFhOWVlYWFmMWVhMTZiYTU2ZDhjYzVhNGViMTk0ZjYwMjVmNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-04-07T07:20:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-07T07:20:42Z"}, "message": "re PR tree-optimization/85257 (wrong code with -O -fno-tree-ccp and reading zeroed vector member)\n\n\tPR tree-optimization/85257\n\t* fold-const.c (native_encode_vector): If not all elts could fit\n\tand off is -1, return 0 rather than offset.\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Pass\n\t(offseti - offset2) / BITS_PER_UNIT as 4th argument to\n\tnative_encode_expr.  Verify len * BITS_PER_UNIT >= maxsizei.  Don't\n\tadjust buffer in native_interpret_expr call.\n\n\t* gcc.dg/pr85257.c: New test.\n\nFrom-SVN: r259206", "tree": {"sha": "b1acf024b403009d0a3344de142b9f251ad1c416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1acf024b403009d0a3344de142b9f251ad1c416"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1a0afe2aa1447c2d7962f52e8e278c40ba5fe19"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "85cf26a8800e172f86833f3d4d619d54decd76b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7", "patch": "@@ -1,3 +1,13 @@\n+2018-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/85257\n+\t* fold-const.c (native_encode_vector): If not all elts could fit\n+\tand off is -1, return 0 rather than offset.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Pass\n+\t(offseti - offset2) / BITS_PER_UNIT as 4th argument to\n+\tnative_encode_expr.  Verify len * BITS_PER_UNIT >= maxsizei.  Don't\n+\tadjust buffer in native_interpret_expr call.\n+\n 2018-04-07  Monk Chiang  <sh.chiang04@gmail.com>\n \n \t* config/nds32/constants.md (unspec_volatile_element): Add cache"}, {"sha": "3a99b66cf452ef914f99138fa0e1150160890010", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7", "patch": "@@ -7307,7 +7307,7 @@ native_encode_vector (const_tree expr, unsigned char *ptr, int len, int off)\n \treturn 0;\n       offset += res;\n       if (offset >= len)\n-\treturn offset;\n+\treturn (off == -1 && i < count - 1) ? 0 : offset;\n       if (off != -1)\n \toff = 0;\n     }"}, {"sha": "00ac96fca36399add7fbd33ca0615be0f462c95e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7", "patch": "@@ -1,3 +1,8 @@\n+2018-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/85257\n+\t* gcc.dg/pr85257.c: New test.\n+\n 2018-04-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* g++.dg/opt/pr85196.C: New test."}, {"sha": "3bf07b3a5db52ce0bee7ba9dcfb441dcf30d1675", "filename": "gcc/testsuite/gcc.dg/pr85257.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85257.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85257.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85257.c?ref=eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7", "patch": "@@ -0,0 +1,20 @@\n+/* PR tree-optimization/85257 */\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-O2 -fno-tree-ccp\" } */\n+\n+typedef __int128 V __attribute__ ((__vector_size__ (16 * sizeof (__int128))));\n+\n+__int128 __attribute__ ((noipa))\n+foo (void)\n+{\n+  V v = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };\n+  return v[5];\n+}\n+\n+int\n+main ()\n+{\n+  if (foo () != 6)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "1463c1d411651da649ea44ae57fec2e68572d8f1", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7", "patch": "@@ -2038,8 +2038,9 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \t  if (TREE_CODE (rhs) == SSA_NAME)\n \t    rhs = SSA_VAL (rhs);\n \t  len = native_encode_expr (gimple_assign_rhs1 (def_stmt),\n-\t\t\t\t    buffer, sizeof (buffer));\n-\t  if (len > 0)\n+\t\t\t\t    buffer, sizeof (buffer),\n+\t\t\t\t    (offseti - offset2) / BITS_PER_UNIT);\n+\t  if (len > 0 && len * BITS_PER_UNIT >= maxsizei)\n \t    {\n \t      tree type = vr->type;\n \t      /* Make sure to interpret in a type that has a range\n@@ -2048,10 +2049,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \t\t  && maxsizei != TYPE_PRECISION (vr->type))\n \t\ttype = build_nonstandard_integer_type (maxsizei,\n \t\t\t\t\t\t       TYPE_UNSIGNED (type));\n-\t      tree val = native_interpret_expr (type,\n-\t\t\t\t\t\tbuffer\n-\t\t\t\t\t\t+ ((offseti - offset2)\n-\t\t\t\t\t\t   / BITS_PER_UNIT),\n+\t      tree val = native_interpret_expr (type, buffer,\n \t\t\t\t\t\tmaxsizei / BITS_PER_UNIT);\n \t      /* If we chop off bits because the types precision doesn't\n \t\t match the memory access size this is ok when optimizing"}]}