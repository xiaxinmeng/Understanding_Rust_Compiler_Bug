{"sha": "f38b27c7cb8392960f06b54303830e51704f8c6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM4YjI3YzdjYjgzOTI5NjBmMDZiNTQzMDM4MzBlNTE3MDRmOGM2ZQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-09-22T22:32:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-09-22T22:32:29Z"}, "message": "pa.c, [...]: Support multiple assembler dialects in most assembler templates.\n\n        * pa.c, pa.h, pa.md: Support multiple assembler dialects in\n        most assembler templates.\n\nFrom-SVN: r29607", "tree": {"sha": "ad5d0cdf95cde2d897b78eb66485d123a493a1ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad5d0cdf95cde2d897b78eb66485d123a493a1ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f38b27c7cb8392960f06b54303830e51704f8c6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38b27c7cb8392960f06b54303830e51704f8c6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f38b27c7cb8392960f06b54303830e51704f8c6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38b27c7cb8392960f06b54303830e51704f8c6e/comments", "author": null, "committer": null, "parents": [{"sha": "cc0d9ba8691328f5b64ee90843dc7e17c9c0dc9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc0d9ba8691328f5b64ee90843dc7e17c9c0dc9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc0d9ba8691328f5b64ee90843dc7e17c9c0dc9d"}], "stats": {"total": 570, "additions": 302, "deletions": 268}, "files": [{"sha": "fbccd91adfdbddace0168c0282a71fbfb7d7a4f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38b27c7cb8392960f06b54303830e51704f8c6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38b27c7cb8392960f06b54303830e51704f8c6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f38b27c7cb8392960f06b54303830e51704f8c6e", "patch": "@@ -59,6 +59,9 @@ Wed Sep 22 06:25:15 1999  Jim Kingdon  <http://developer.redhat.com>\n \n Wed Sep 22 06:06:57 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* pa.c, pa.h, pa.md: Support multiple assembler dialects in\n+\tmost assembler templates.\n+\n         * pa.c (hppa_legitimize_address): Handle full offsets for PA2.0\n         FP loads and stores.\n \t(following_call): Always return zero for the PA8000."}, {"sha": "e2dcbd25c3a08f67cf8a70d47aeb3fd8ef104cf5", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 115, "deletions": 96, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38b27c7cb8392960f06b54303830e51704f8c6e/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38b27c7cb8392960f06b54303830e51704f8c6e/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=f38b27c7cb8392960f06b54303830e51704f8c6e", "patch": "@@ -1657,7 +1657,7 @@ singlemove_string (operands)\n       else if ((intval & 0x7ff) == 0)\n \treturn \"ldil L'%1,%0\";\n       else if (zdepi_cint_p (intval))\n-\treturn \"zdepi %Z1,%0\";\n+\treturn \"{zdepi %Z1,%0|depwi,z %Z1,%0}\";\n       else\n \treturn \"ldil L'%1,%0\\n\\tldo R'%1(%0),%0\";\n     }\n@@ -1770,8 +1770,8 @@ output_move_double (operands)\n \t\t register.  (We do this in a non-obvious way to\n \t\t save a register file writeback)  */\n \t      if (GET_CODE (addr) == POST_INC)\n-\t\treturn \"stws,ma %1,8(%0)\\n\\tstw %R1,-4(%0)\";\n-\t      return \"stws,ma %1,-8(%0)\\n\\tstw %R1,12(%0)\";\n+\t\treturn \"{stws|stw},ma %1,8(%0)\\n\\tstw %R1,-4(%0)\";\n+\t      return \"{stws|stw},ma %1,-8(%0)\\n\\tstw %R1,12(%0)\";\n \t    }\n \t  else\n \t    abort();\n@@ -1790,8 +1790,8 @@ output_move_double (operands)\n \t\t register.  (We do this in a non-obvious way to\n \t\t save a register file writeback)  */\n \t      if (GET_CODE (addr) == PRE_INC)\n-\t\treturn \"stws,mb %1,8(%0)\\n\\tstw %R1,4(%0)\";\n-\t      return \"stws,mb %1,-8(%0)\\n\\tstw %R1,4(%0)\";\n+\t\treturn \"{stws|stw},mb %1,8(%0)\\n\\tstw %R1,4(%0)\";\n+\t      return \"{stws|stw},mb %1,-8(%0)\\n\\tstw %R1,4(%0)\";\n \t    }\n \t  else\n \t    abort();\n@@ -1817,17 +1817,17 @@ output_move_double (operands)\n \t\t register.  (We do this in a non-obvious way to\n \t\t save a register file writeback)  */\n \t      if (GET_CODE (addr) == POST_INC)\n-\t\treturn \"ldws,ma 8(%1),%0\\n\\tldw -4(%1),%R0\";\n-\t      return \"ldws,ma -8(%1),%0\\n\\tldw 12(%1),%R0\";\n+\t\treturn \"{ldws|ldw},ma 8(%1),%0\\n\\tldw -4(%1),%R0\";\n+\t      return \"{ldws|ldw},ma -8(%1),%0\\n\\tldw 12(%1),%R0}\";\n \t    }\n \t  else\n \t    {\n \t      /* This is an undefined situation.  We should load into the\n \t\t address register *and* update that register.  Probably\n \t\t we don't need to handle this at all.  */\n \t      if (GET_CODE (addr) == POST_INC)\n-\t\treturn \"ldw 4(%1),%R0\\n\\tldws,ma 8(%1),%0\";\n-\t      return \"ldw 4(%1),%R0\\n\\tldws,ma -8(%1),%0\";\n+\t\treturn \"ldw 4(%1),%R0\\n\\t{ldws|ldw},ma 8(%1),%0\";\n+\t      return \"ldw 4(%1),%R0\\n\\t{ldws|ldw},ma -8(%1),%0\";\n \t    }\n \t}\n       else if (GET_CODE (addr) == PRE_INC || GET_CODE (addr) == PRE_DEC)\n@@ -1844,17 +1844,17 @@ output_move_double (operands)\n \t\t register.  (We do this in a non-obvious way to\n \t\t save a register file writeback)  */\n \t      if (GET_CODE (addr) == PRE_INC)\n-\t\treturn \"ldws,mb 8(%1),%0\\n\\tldw 4(%1),%R0\";\n-\t      return \"ldws,mb -8(%1),%0\\n\\tldw 4(%1),%R0\";\n+\t\treturn \"{ldws|ldw},mb 8(%1),%0\\n\\tldw 4(%1),%R0\";\n+\t      return \"{ldws|ldw},mb -8(%1),%0\\n\\tldw 4(%1),%R0\";\n \t    }\n \t  else\n \t    {\n \t      /* This is an undefined situation.  We should load into the\n \t\t address register *and* update that register.  Probably\n \t\t we don't need to handle this at all.  */\n \t      if (GET_CODE (addr) == PRE_INC)\n-\t\treturn \"ldw 12(%1),%R0\\n\\tldws,mb 8(%1),%0\";\n-\t      return \"ldw -4(%1),%R0\\n\\tldws,mb -8(%1),%0\";\n+\t\treturn \"ldw 12(%1),%R0\\n\\t{ldws|ldw},mb 8(%1),%0\";\n+\t      return \"ldw -4(%1),%R0\\n\\t{ldws|ldw},mb -8(%1),%0\";\n \t    }\n \t}\n       else if (GET_CODE (addr) == PLUS\n@@ -1870,7 +1870,8 @@ output_move_double (operands)\n \t      xoperands[1] = XEXP (addr, 1);\n \t      xoperands[2] = XEXP (XEXP (addr, 0), 0);\n \t      xoperands[3] = XEXP (XEXP (addr, 0), 1);\n-\t      output_asm_insn (\"sh%O3addl %2,%1,%0\", xoperands);\n+\t      output_asm_insn (\"{sh%O3addl %2,%1,%0|shladd,l %2,%O3,%1,%0}\",\n+\t\t\t       xoperands);\n \t      return \"ldw 4(%0),%R0\\n\\tldw 0(%0),%0\";\n \t    }\n \t  else\n@@ -1881,7 +1882,8 @@ output_move_double (operands)\n \t      xoperands[1] = XEXP (addr, 1);\n \t      xoperands[2] = XEXP (XEXP (addr, 0), 0);\n \t      xoperands[3] = XEXP (XEXP (addr, 0), 1);\n-\t      output_asm_insn (\"sh%O3addl %2,%1,%R0\", xoperands);\n+\t      output_asm_insn (\"{sh%O3addl %2,%1,%R0|shladd,l %2,%O3,%1,%R0}\",\n+\t\t\t       xoperands);\n \t      return \"ldw 0(%R0),%0\\n\\tldw 4(%R0),%R0\";\n \t    }\n \t   \n@@ -2076,25 +2078,25 @@ output_block_move (operands, size_is_constant)\n \toutput_asm_insn (\"ldi %4,%2\", operands);\n \n \t/* Copying loop.  */\n-\toutput_asm_insn (\"ldws,ma 4(%1),%3\", operands);\n-\toutput_asm_insn (\"ldws,ma 4(%1),%6\", operands);\n-\toutput_asm_insn (\"stws,ma %3,4(%0)\", operands);\n+\toutput_asm_insn (\"{ldws|ldw},ma 4(%1),%3\", operands);\n+\toutput_asm_insn (\"{ldws|ldw},ma 4(%1),%6\", operands);\n+\toutput_asm_insn (\"{stws|stw},ma %3,4(%0)\", operands);\n \toutput_asm_insn (\"addib,>= -8,%2,.-12\", operands);\n-\toutput_asm_insn (\"stws,ma %6,4(%0)\", operands);\n+\toutput_asm_insn (\"{stws|stw},ma %6,4(%0)\", operands);\n \n \t/* Handle the residual.  There could be up to 7 bytes of\n \t   residual to copy!  */\n \tif (n_bytes % 8 != 0)\n \t  {\n \t    operands[4] = GEN_INT (n_bytes % 4);\n \t    if (n_bytes % 8 >= 4)\n-\t      output_asm_insn (\"ldws,ma 4(%1),%3\", operands);\n+\t      output_asm_insn (\"{ldws|ldw},ma 4(%1),%3\", operands);\n \t    if (n_bytes % 4 != 0)\n \t      output_asm_insn (\"ldw 0(%1),%6\", operands);\n \t    if (n_bytes % 8 >= 4)\n-\t      output_asm_insn (\"stws,ma %3,4(%0)\", operands);\n+\t      output_asm_insn (\"{stws|stw},ma %3,4(%0)\", operands);\n \t    if (n_bytes % 4 != 0)\n-\t      output_asm_insn (\"stbys,e %6,%4(%0)\", operands);\n+\t      output_asm_insn (\"{stbys|stby},e %6,%4(%0)\", operands);\n \t  }\n \treturn \"\";\n \n@@ -2104,21 +2106,21 @@ output_block_move (operands, size_is_constant)\n \toutput_asm_insn (\"ldi %4,%2\", operands);\n \n \t/* Copying loop.  */\n-\toutput_asm_insn (\"ldhs,ma 2(%1),%3\", operands);\n-\toutput_asm_insn (\"ldhs,ma 2(%1),%6\", operands);\n-\toutput_asm_insn (\"sths,ma %3,2(%0)\", operands);\n+\toutput_asm_insn (\"{ldhs|ldh},ma 2(%1),%3\", operands);\n+\toutput_asm_insn (\"{ldhs|ldh},ma 2(%1),%6\", operands);\n+\toutput_asm_insn (\"{sths|sth},ma %3,2(%0)\", operands);\n \toutput_asm_insn (\"addib,>= -4,%2,.-12\", operands);\n-\toutput_asm_insn (\"sths,ma %6,2(%0)\", operands);\n+\toutput_asm_insn (\"{sths|sth},ma %6,2(%0)\", operands);\n \n \t/* Handle the residual.  */\n \tif (n_bytes % 4 != 0)\n \t  {\n \t    if (n_bytes % 4 >= 2)\n-\t      output_asm_insn (\"ldhs,ma 2(%1),%3\", operands);\n+\t      output_asm_insn (\"{ldhs|ldh},ma 2(%1),%3\", operands);\n \t    if (n_bytes % 2 != 0)\n \t      output_asm_insn (\"ldb 0(%1),%6\", operands);\n \t    if (n_bytes % 4 >= 2)\n-\t      output_asm_insn (\"sths,ma %3,2(%0)\", operands);\n+\t      output_asm_insn (\"{sths|sth},ma %3,2(%0)\", operands);\n \t    if (n_bytes % 2 != 0)\n \t      output_asm_insn (\"stb %6,0(%0)\", operands);\n \t  }\n@@ -2130,11 +2132,11 @@ output_block_move (operands, size_is_constant)\n \toutput_asm_insn (\"ldi %4,%2\", operands);\n \n \t/* Copying loop.  */\n-\toutput_asm_insn (\"ldbs,ma 1(%1),%3\", operands);\n-\toutput_asm_insn (\"ldbs,ma 1(%1),%6\", operands);\n-\toutput_asm_insn (\"stbs,ma %3,1(%0)\", operands);\n+\toutput_asm_insn (\"{ldbs|ldb},ma 1(%1),%3\", operands);\n+\toutput_asm_insn (\"{ldbs|ldb},ma 1(%1),%6\", operands);\n+\toutput_asm_insn (\"{stbs|stb},ma %3,1(%0)\", operands);\n \toutput_asm_insn (\"addib,>= -2,%2,.-12\", operands);\n-\toutput_asm_insn (\"stbs,ma %6,1(%0)\", operands);\n+\toutput_asm_insn (\"{stbs|stb},ma %6,1(%0)\", operands);\n \n \t/* Handle the residual.  */\n \tif (n_bytes % 2 != 0)\n@@ -2218,7 +2220,7 @@ output_and (operands)\n \t    abort ();\n \n \t  operands[2] = GEN_INT (len);\n-\t  return \"extru %1,31,%2,%0\";\n+\t  return \"{extru|extrw,u} %1,31,%2,%0\";\n \t}\n       else\n \t{\n@@ -2230,7 +2232,7 @@ output_and (operands)\n \n \t  operands[2] = GEN_INT (p);\n \t  operands[3] = GEN_INT (len);\n-\t  return \"depi 0,%2,%3,%0\";\n+\t  return \"{depi|depwi} 0,%2,%3,%0\";\n \t}\n     }\n   else\n@@ -2263,7 +2265,7 @@ output_ior (operands)\n \n   operands[2] = GEN_INT (p);\n   operands[3] = GEN_INT (len);\n-  return \"depi -1,%2,%3,%0\";\n+  return \"{depi|depwi} -1,%2,%3,%0\";\n }\n \f\n /* Output an ascii string.  */\n@@ -3828,21 +3830,32 @@ print_operand (file, x, code)\n \t{\n \tcase PRE_DEC:\n \tcase PRE_INC:\n-\t  fputs (\"s,mb\", file);\n+\t  if (ASSEMBLER_DIALECT == 0)\n+\t    fputs (\"s,mb\", file);\n+\t  else\n+\t    fputs (\",mb\", file);\n \t  break;\n \tcase POST_DEC:\n \tcase POST_INC:\n-\t  fputs (\"s,ma\", file);\n+\t  if (ASSEMBLER_DIALECT == 0)\n+\t    fputs (\"s,ma\", file);\n+\t  else\n+\t    fputs (\",ma\", file);\n \t  break;\n \tcase PLUS:\n \t  if (GET_CODE (XEXP (XEXP (x, 0), 0)) == MULT\n \t      || GET_CODE (XEXP (XEXP (x, 0), 1)) == MULT)\n-\t    fputs (\"x,s\", file);\n-\t  else if (code == 'F')\n+\t    {\n+\t      if (ASSEMBLER_DIALECT == 0)\n+\t\tfputs (\"x,s\", file);\n+\t      else\n+\t\tfputs (\",s\", file);\n+\t    }\n+\t  else if (code == 'F' && ASSEMBLER_DIALECT == 0)\n \t    fputs (\"s\", file);\n \t  break;\n \tdefault:\n-\t  if (code == 'F')\n+\t  if (code == 'F' && ASSEMBLER_DIALECT == 0)\n \t    fputs (\"s\", file);\n \t  break;\n \t}\n@@ -4526,9 +4539,9 @@ output_cbranch (operands, nullify, length, negated, insn)\n \t delay slot.  */\n       case 4:\n \tif (useskip)\n-\t  strcpy (buf, \"com%I2clr,\");\n+\t  strcpy (buf, \"{com%I2clr,|cmp%I2clr,}\");\n \telse\n-\t  strcpy (buf, \"com%I2b,\");\n+\t  strcpy (buf, \"{com%I2b,|cmp%I2b,}\");\n \tif (negated)\n \t  strcat (buf, \"%B3\");\n \telse\n@@ -4551,7 +4564,7 @@ output_cbranch (operands, nullify, length, negated, insn)\n \t    && ! forward_branch_p (insn)\n \t    && nullify)\n \t  {\n-\t    strcpy (buf, \"com%I2b,\");\n+\t    strcpy (buf, \"{com%I2b,|cmp%I2b,}\");\n \t    if (negated)\n \t      strcat (buf, \"%S3\");\n \t    else\n@@ -4567,15 +4580,15 @@ output_cbranch (operands, nullify, length, negated, insn)\n \t\t && VAL_14_BITS_P (insn_addresses[INSN_UID (JUMP_LABEL (insn))]\n \t\t\t\t    - insn_addresses[INSN_UID (insn)] - 8))\n \t  {\n-\t    strcpy (buf, \"com%I2b,\");\n+\t    strcpy (buf, \"{com%I2b,|cmp%I2b,}\");\n \t    if (negated)\n \t      strcat (buf, \"%B3 %2,%r1,%0%#\");\n \t    else\n \t      strcat (buf, \"%S3 %2,%r1,%0%#\");\n \t  }\n \telse\n \t  {\n-\t    strcpy (buf, \"com%I2clr,\");\n+\t    strcpy (buf, \"{com%I2clr,|cmp%I2clr,}\");\n \t    if (negated)\n \t      strcat (buf, \"%S3\");\n \t    else\n@@ -4596,9 +4609,9 @@ output_cbranch (operands, nullify, length, negated, insn)\n \t/* Create a reversed conditional branch which branches around\n \t   the following insns.  */\n \tif (negated)\n-\t  strcpy (buf, \"com%I2b,%S3,n %2,%r1,.+20\");\n+\t  strcpy (buf, \"{com%I2b,%S3,n %2,%r1,.+20|cmp%I2b,%S3,n %2,%r1,.+20}\");\n \telse\n-\t  strcpy (buf, \"com%I2b,%B3,n %2,%r1,.+20\");\n+\t  strcpy (buf, \"{com%I2b,%B3,n %2,%r1,.+20|cmp%I2b,%B3,n %2,%r1,.+20}\");\n \toutput_asm_insn (buf, operands);\n \n \t/* Output an insn to save %r1.  */\n@@ -4621,9 +4634,9 @@ output_cbranch (operands, nullify, length, negated, insn)\n \t/* Create a reversed conditional branch which branches around\n \t   the following insns.  */\n \tif (negated)\n-\t  strcpy (buf, \"com%I2b,%S3,n %2,%r1,.+28\");\n+\t  strcpy (buf, \"{com%I2b,%S3,n %2,%r1,.+28|cmp%I2b,%S3,n %2,%r1,.+28}\");\n \telse\n-\t  strcpy (buf, \"com%I2b,%B3,n %2,%r1,.+28\");\n+\t  strcpy (buf, \"{com%I2b,%B3,n %2,%r1,.+28|cmp%I2b,%B3,n %2,%r1,.+28}\");\n \toutput_asm_insn (buf, operands);\n \n \t/* Output an insn to save %r1.  */\n@@ -4639,7 +4652,8 @@ output_cbranch (operands, nullify, length, negated, insn)\n \t  xoperands[3] = operands[3];\n \t  xoperands[4] = gen_label_rtx ();\n \n-\t  output_asm_insn (\"bl .+8,%%r1\\n\\taddil L'%l0-%l4,%%r1\", xoperands);\n+\t  output_asm_insn (\"{bl|b,l} .+8,%%r1\\n\\taddil L'%l0-%l4,%%r1\",\n+\t\t\t   xoperands);\n \t  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n \t\t\t\t     CODE_LABEL_NUMBER (xoperands[4]));\n \t  output_asm_insn (\"ldo R'%l0-%l4(%%r1),%%r1\\n\\tbv %%r0(%%r1)\",\n@@ -4707,7 +4721,7 @@ output_bb (operands, nullify, length, negated, insn, which)\n \t delay slot.  */\n       case 4:\n \tif (useskip)\n-\t  strcpy (buf, \"extrs,\");\n+\t  strcpy (buf, \"{extrs,|extrw,s,}\");\n \telse\n \t  strcpy (buf, \"bb,\");\n \tif ((which == 0 && negated)\n@@ -4770,7 +4784,7 @@ output_bb (operands, nullify, length, negated, insn, which)\n \t  }\n \telse\n \t  {\n-\t    strcpy (buf, \"extrs,\");\n+\t    strcpy (buf, \"{extrs,|extrw,s,}\");\n \t    if ((which == 0 && negated)\n \t\t|| (which == 1 && ! negated))\n \t      strcat (buf, \"<\");\n@@ -4845,24 +4859,24 @@ output_bvb (operands, nullify, length, negated, insn, which)\n \t delay slot.  */\n       case 4:\n \tif (useskip)\n-\t  strcpy (buf, \"vextrs,\");\n+\t  strcpy (buf, \"{vextrs,|extrw,s,}\");\n \telse\n-\t  strcpy (buf, \"bvb,\");\n+\t  strcpy (buf, \"{bvb,|bb,}\");\n \tif ((which == 0 && negated)\n \t     || (which == 1 && ! negated))\n \t  strcat (buf, \">=\");\n \telse\n \t  strcat (buf, \"<\");\n \tif (useskip)\n-\t  strcat (buf, \" %0,1,%%r0\");\n+\t  strcat (buf, \"{ %0,1,%%r0| %0,%%sar,1,%%r0}\");\n \telse if (nullify && negated)\n-\t  strcat (buf, \",n %0,%3\");\n+\t  strcat (buf, \"{,n %0,%3|,n %0,%%sar,%3}\");\n \telse if (nullify && ! negated)\n-\t  strcat (buf, \",n %0,%2\");\n+\t  strcat (buf, \"{,n %0,%2|,n %0,%%sar,%2}\");\n \telse if (! nullify && negated)\n-\t  strcat (buf, \"%0,%3\");\n+\t  strcat (buf, \"{%0,%3|%0,%%sar,%3}\");\n \telse if (! nullify && ! negated)\n-\t  strcat (buf, \" %0,%2\");\n+\t  strcat (buf, \"{ %0,%2| %0,%%sar,%2}\");\n \tbreak;\n \n      /* All long conditionals.  Note an short backward branch with an\n@@ -4875,16 +4889,16 @@ output_bvb (operands, nullify, length, negated, insn, which)\n \t    && ! forward_branch_p (insn)\n \t    && nullify)\n \t  {\n-\t    strcpy (buf, \"bvb,\");\n+\t    strcpy (buf, \"{bvb,|bb,}\");\n \t    if ((which == 0 && negated)\n \t\t|| (which == 1 && ! negated))\n \t      strcat (buf, \"<\");\n \t    else\n \t      strcat (buf, \">=\");\n \t    if (negated)\n-\t      strcat (buf, \",n %0,.+12\\n\\tb %3\");\n+\t      strcat (buf, \"{,n %0,.+12\\n\\tb %3|,n %0,%%sar,.+12\\n\\tb %3}\");\n \t    else\n-\t      strcat (buf, \",n %0,.+12\\n\\tb %2\");\n+\t      strcat (buf, \"{,n %0,.+12\\n\\tb %2|,n %0,%%sar,.+12\\n\\tb %2}\");\n \t  }\n \t/* Handle short backwards branch with an unfilled delay slot.\n \t   Using a bb;nop rather than extrs;bl saves 1 cycle for both\n@@ -4895,33 +4909,33 @@ output_bvb (operands, nullify, length, negated, insn, which)\n \t\t && VAL_14_BITS_P (insn_addresses[INSN_UID (JUMP_LABEL (insn))]\n \t\t\t\t    - insn_addresses[INSN_UID (insn)] - 8))\n \t  {\n-\t    strcpy (buf, \"bvb,\");\n+\t    strcpy (buf, \"{bvb,|bb,}\");\n \t    if ((which == 0 && negated)\n \t\t|| (which == 1 && ! negated))\n \t      strcat (buf, \">=\");\n \t    else\n \t      strcat (buf, \"<\");\n \t    if (negated)\n-\t      strcat (buf, \" %0,%3%#\");\n+\t      strcat (buf, \"{ %0,%3%#| %0,%%sar,%3%#}\");\n \t    else\n-\t      strcat (buf, \" %0,%2%#\");\n+\t      strcat (buf, \"{ %0,%2%#| %0,%%sar,%2%#}\");\n \t  }\n \telse\n \t  {\n-\t    strcpy (buf, \"vextrs,\");\n+\t    strcpy (buf, \"{vextrs,|extrw,s,}\");\n \t    if ((which == 0 && negated)\n \t\t|| (which == 1 && ! negated))\n \t      strcat (buf, \"<\");\n \t    else\n \t      strcat (buf, \">=\");\n \t    if (nullify && negated)\n-\t      strcat (buf, \" %0,1,%%r0\\n\\tb,n %3\");\n+\t      strcat (buf, \"{ %0,1,%%r0\\n\\tb,n %3| %0,%%sar,1,%%r0\\n\\tb,n %3}\");\n \t    else if (nullify && ! negated)\n-\t      strcat (buf, \" %0,1,%%r0\\n\\tb,n %2\");\n+\t      strcat (buf, \"{ %0,1,%%r0\\n\\tb,n %2| %0,%%sar,1,%%r0\\n\\tb,n %2}\");\n \t    else if (negated)\n-\t      strcat (buf, \" %0,1,%%r0\\n\\tb %3\");\n+\t      strcat (buf, \"{ %0,1,%%r0\\n\\tb %3| %0,%%sar,1,%%r0\\n\\tb %3}\");\n \t    else\n-\t      strcat (buf, \" %0,1,%%r0\\n\\tb %2\");\n+\t      strcat (buf, \"{ %0,1,%%r0\\n\\tb %2| %0,%%sar,1,%%r0\\n\\tb %2}\");\n \t  }\n \tbreak;\n \n@@ -4951,10 +4965,10 @@ output_dbra (operands, insn, which_alternative)\n \treturn \"ldo %1(%0),%0\";\n       else if (which_alternative == 1)\n \t{\n-\t  output_asm_insn (\"fstws %0,-16(%%r30)\",operands);\n+\t  output_asm_insn (\"{fstws|fstw} %0,-16(%%r30)\",operands);\n \t  output_asm_insn (\"ldw -16(%%r30),%4\",operands);\n \t  output_asm_insn (\"ldo %1(%4),%4\\n\\tstw %4,-16(%%r30)\", operands);\n-\t  return \"fldws -16(%%r30),%0\";\n+\t  return \"{fldws|fldw} -16(%%r30),%0\";\n \t}\n       else\n \t{\n@@ -5016,12 +5030,12 @@ output_dbra (operands, insn, which_alternative)\n       /* Move loop counter from FP register to MEM then into a GR,\n \t increment the GR, store the GR into MEM, and finally reload\n \t the FP register from MEM from within the branch's delay slot.  */\n-      output_asm_insn (\"fstws %0,-16(%%r30)\\n\\tldw -16(%%r30),%4\",operands);\n+      output_asm_insn (\"{fstws|fstw} %0,-16(%%r30)\\n\\tldw -16(%%r30),%4\",operands);\n       output_asm_insn (\"ldo %1(%4),%4\\n\\tstw %4,-16(%%r30)\", operands);\n       if (get_attr_length (insn) == 24)\n-\treturn \"comb,%S2 %%r0,%4,%3\\n\\tfldws -16(%%r30),%0\";\n+\treturn \"{comb|cmpb},%S2 %%r0,%4,%3\\n\\t{fldws|fldw} -16(%%r30),%0\";\n       else\n-\treturn \"comclr,%B2 %%r0,%4,%%r0\\n\\tb %3\\n\\tfldws -16(%%r30),%0\";\n+\treturn \"{comclr|cmpclr},%B2 %%r0,%4,%%r0\\n\\tb %3\\n\\t{fldws|fldw} -16(%%r30),%0\";\n     }\n   /* Deal with gross reload from memory case.  */\n   else\n@@ -5058,7 +5072,7 @@ output_movb (operands, insn, which_alternative, reverse_comparison)\n       else if (which_alternative == 1)\n \t{\n \t  output_asm_insn (\"stw %1,-16(%%r30)\",operands);\n-\t  return \"fldws -16(%%r30),%0\";\n+\t  return \"{fldws|fldw} -16(%%r30),%0\";\n \t}\n       else if (which_alternative == 2)\n \treturn \"stw %1,%0\";\n@@ -5125,27 +5139,27 @@ output_movb (operands, insn, which_alternative, reverse_comparison)\n \t the FP register from MEM from within the branch's delay slot.  */\n       output_asm_insn (\"stw %1,-16(%%r30)\",operands);\n       if (get_attr_length (insn) == 12)\n-\treturn \"comb,%S2 %%r0,%1,%3\\n\\tfldws -16(%%r30),%0\";\n+\treturn \"{comb|cmpb},%S2 %%r0,%1,%3\\n\\t{fldws|fldw} -16(%%r30),%0\";\n       else\n-\treturn \"comclr,%B2 %%r0,%1,%%r0\\n\\tb %3\\n\\tfldws -16(%%r30),%0\";\n+\treturn \"{comclr|cmpclr},%B2 %%r0,%1,%%r0\\n\\tb %3\\n\\t{fldws|fldw} -16(%%r30),%0\";\n     }\n   /* Deal with gross reload from memory case.  */\n   else if (which_alternative == 2)\n     {\n       /* Reload loop counter from memory, the store back to memory\n \t happens in the branch's delay slot.   */\n       if (get_attr_length (insn) == 8)\n-\treturn \"comb,%S2 %%r0,%1,%3\\n\\tstw %1,%0\";\n+\treturn \"{comb|cmpb},%S2 %%r0,%1,%3\\n\\tstw %1,%0\";\n       else\n-\treturn \"comclr,%B2 %%r0,%1,%%r0\\n\\tb %3\\n\\tstw %1,%0\";\n+\treturn \"{comclr|cmpclr},%B2 %%r0,%1,%%r0\\n\\tb %3\\n\\tstw %1,%0\";\n     }\n   /* Handle SAR as a destination.  */\n   else\n     {\n       if (get_attr_length (insn) == 8)\n-\treturn \"comb,%S2 %%r0,%1,%3\\n\\tmtsar %r1\";\n+\treturn \"{comb|cmpb},%S2 %%r0,%1,%3\\n\\tmtsar %r1\";\n       else\n-\treturn \"comclr,%B2 %%r0,%1,%%r0\\n\\tbl %3\\n\\tmtsar %r1\";\n+\treturn \"{comclr|cmpclr},%B2 %%r0,%1,%%r0\\n\\tbl %3\\n\\tmtsar %r1\";\n     }\n }\n \n@@ -5174,7 +5188,7 @@ output_millicode_call (insn, call_dest)\n \t  && get_attr_length (insn) == 4))\n     {\n       xoperands[0] = call_dest;\n-      output_asm_insn (\"bl %0,%%r31%#\", xoperands);\n+      output_asm_insn (\"{bl|b,l} %0,%%r31%#\", xoperands);\n       return \"\";\n     }\n \n@@ -5206,7 +5220,7 @@ output_millicode_call (insn, call_dest)\n \t{\n \t  xoperands[0] = call_dest;\n \t  output_asm_insn (\"ldil L%%%0,%%r31\", xoperands);\n-\t  output_asm_insn (\"ble R%%%0(%%sr4,%%r31)\", xoperands);\n+\t  output_asm_insn (\"{ble|be,l} R%%%0(%%sr4,%%r31)\", xoperands);\n \t  output_asm_insn (\"nop\", xoperands);\n \t}\n       /* Pure portable runtime doesn't allow be/ble; we also don't have\n@@ -5235,7 +5249,7 @@ output_millicode_call (insn, call_dest)\n \t  xoperands[0] = call_dest;\n \t  xoperands[1] = gen_label_rtx ();\n \t  /* Get our address + 8 into %r1.  */\n-\t  output_asm_insn (\"bl .+8,%%r1\", xoperands);\n+\t  output_asm_insn (\"{bl|b,l} .+8,%%r1\", xoperands);\n \n \t  /* Add %r1 to the offset of our target from the next insn.  */\n \t  output_asm_insn (\"addil L%%%0-%1,%%r1\", xoperands);\n@@ -5288,13 +5302,14 @@ output_millicode_call (insn, call_dest)\n   xoperands[0] = call_dest;\n   xoperands[1] = XEXP (PATTERN (NEXT_INSN (insn)), 1);\n   if (! VAL_14_BITS_P (distance))\n-    output_asm_insn (\"bl %0,%%r31\\n\\tnop\\n\\tb,n %1\", xoperands);\n+    output_asm_insn (\"{bl|b,l} %0,%%r31\\n\\tnop\\n\\tb,n %1\", xoperands);\n   else\n     {\n-      xoperands[3] = gen_label_rtx ();\n-      output_asm_insn (\"\\n\\tbl %0,%%r31\\n\\tldo %1-%3(%%r31),%%r31\", xoperands);\n+      xoperands[2] = gen_label_rtx ();\n+      output_asm_insn (\"\\n\\t{bl|b,l} %0,%%r31\\n\\tldo %1-%3(%%r31),%%r31\",\n+\t\t       xoperands);\n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n-\t\t\t\t CODE_LABEL_NUMBER (xoperands[3]));\n+\t\t\t\t CODE_LABEL_NUMBER (xoperands[2]));\n     }\n \n   /* Delete the jump.  */\n@@ -5333,7 +5348,7 @@ output_call (insn, call_dest)\n \t  && get_attr_length (insn) == 4))\n     {\n       xoperands[0] = call_dest;\n-      output_asm_insn (\"bl %0,%%r2%#\", xoperands);\n+      output_asm_insn (\"{bl|b,l} %0,%%r2%#\", xoperands);\n       return \"\";\n     }\n \n@@ -5387,14 +5402,16 @@ output_call (insn, call_dest)\n \t\t{\n \t\t  xoperands[0] = XEXP (use, 0);\n \t\t  xoperands[1] = gen_rtx_REG (SImode, 26 - (regno - 32) / 2);\n-\t\t  output_asm_insn (\"fstws %0,-16(%%sr0,%%r30)\", xoperands);\n+\t\t  output_asm_insn (\"{fstws|fstw} %0,-16(%%sr0,%%r30)\",\n+\t\t\t\t    xoperands);\n \t\t  output_asm_insn (\"ldw -16(%%sr0,%%r30),%1\", xoperands);\n \t\t}\n \t      else\n \t\t{\n \t\t  xoperands[0] = XEXP (use, 0);\n \t\t  xoperands[1] = gen_rtx_REG (DImode, 25 - (regno - 34) / 2);\n-\t\t  output_asm_insn (\"fstds %0,-16(%%sr0,%%r30)\", xoperands);\n+\t\t  output_asm_insn (\"{fstds|fstd} %0,-16(%%sr0,%%r30)\",\n+\t\t\t\t    xoperands);\n \t\t  output_asm_insn (\"ldw -12(%%sr0,%%r30),%R1\", xoperands);\n \t\t  output_asm_insn (\"ldw -16(%%sr0,%%r30),%1\", xoperands);\n \t\t}\n@@ -5468,7 +5485,7 @@ output_call (insn, call_dest)\n \t      output_asm_insn (\"ldw 0(%%r22),%%r22\", xoperands);\n \n \t      /* Get our address + 8 into %r1.  */\n-\t      output_asm_insn (\"bl .+8,%%r1\", xoperands);\n+\t      output_asm_insn (\"{bl|b,l} .+8,%%r1\", xoperands);\n \n \t      /* Add %r1 to the offset of dyncall from the next insn.  */\n \t      output_asm_insn (\"addil L%%$$dyncall-%1,%%r1\", xoperands);\n@@ -5496,7 +5513,8 @@ output_call (insn, call_dest)\n \t      /* Get the high part of the  address of $dyncall into %r2, then\n \t\t add in the low part in the branch instruction.  */\n \t      output_asm_insn (\"ldil L%%$$dyncall,%%r2\", xoperands);\n-\t      output_asm_insn (\"ble  R%%$$dyncall(%%sr4,%%r2)\", xoperands);\n+\t      output_asm_insn (\"{ble|be,l}  R%%$$dyncall(%%sr4,%%r2)\",\n+\t\t\t       xoperands);\n \n \t      /* Copy the return pointer into both %r31 and %r2.  */\n \t      output_asm_insn (\"copy %%r31,%%r2\", xoperands);\n@@ -5537,11 +5555,12 @@ output_call (insn, call_dest)\n   xoperands[0] = call_dest;\n   xoperands[1] = XEXP (PATTERN (NEXT_INSN (insn)), 1);\n   if (! VAL_14_BITS_P (distance))\n-    output_asm_insn (\"bl %0,%%r2\\n\\tnop\\n\\tb,n %1\", xoperands);\n+    output_asm_insn (\"{bl|b,l} %0,%%r2\\n\\tnop\\n\\tb,n %1\", xoperands);\n   else\n     {\n       xoperands[3] = gen_label_rtx ();\n-      output_asm_insn (\"\\n\\tbl %0,%%r2\\n\\tldo %1-%3(%%r2),%%r2\", xoperands);\n+      output_asm_insn (\"\\n\\t{bl|b,l} %0,%%r2\\n\\tldo %1-%3(%%r2),%%r2\",\n+\t\t       xoperands);\n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n \t\t\t\t CODE_LABEL_NUMBER (xoperands[3]));\n     }"}, {"sha": "ad1e4d97990a0e2d0fb6677cca6c72a8fc50c003", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38b27c7cb8392960f06b54303830e51704f8c6e/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38b27c7cb8392960f06b54303830e51704f8c6e/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=f38b27c7cb8392960f06b54303830e51704f8c6e", "patch": "@@ -200,6 +200,10 @@ extern int target_flags;\n   { \"arch=\",\t\t&pa_arch_string, \"Specify architecture for code generation.  Values are 1.0, 1.1, and 2.0.  2.0 requires gas snapshot 19990413 or later.\" }\\\n }\n \n+/* Specify the dialect of assembler to use.  New mnemonics is dialect one\n+   and the old mnemonics are dialect zero.  */\n+#define ASSEMBLER_DIALECT (TARGET_PA_20 ? 1 : 0)\n+\n #define OVERRIDE_OPTIONS override_options ()\n \n /* stabs-in-som is nearly identical to stabs-in-elf.  To avoid useless\n@@ -1158,7 +1162,10 @@ extern int may_call_alloca;\n   {\t\t\t\t\t\t\t\\\n     fputs (\"\\tldw\t36(%r22),%r21\\n\", FILE);\t\\\n     fputs (\"\\tbb,>=,n\t%r21,30,.+16\\n\", FILE);\t\\\n-    fputs (\"\\tdepi\t0,31,2,%r21\\n\", FILE);\t\t\\\n+    if (ASSEMBLER_DIALECT == 0)\t\t\t\t\\\n+      fputs (\"\\tdepi\t0,31,2,%r21\\n\", FILE);\t\t\\\n+    else\t\t\t\t\t\t\\\n+      fputs (\"\\tdepwi\t0,31,2,%r21\\n\", FILE);\t\t\\\n     fputs (\"\\tldw\t4(%r21),%r19\\n\", FILE);\t\\\n     fputs (\"\\tldw\t0(%r21),%r21\\n\", FILE);\t\\\n     fputs (\"\\tldsid\t(%r21),%r1\\n\", FILE);\t\\"}, {"sha": "4e18383d166a7b399f4fb6cf2f6d124dfc858daa", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 176, "deletions": 171, "changes": 347, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38b27c7cb8392960f06b54303830e51704f8c6e/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38b27c7cb8392960f06b54303830e51704f8c6e/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=f38b27c7cb8392960f06b54303830e51704f8c6e", "patch": "@@ -616,7 +616,7 @@\n \t\t\t   [(match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t    (match_operand:SI 2 \"arith11_operand\" \"rI\")]))]\n   \"\"\n-  \"com%I2clr,%B3 %2,%1,%0\\;ldi 1,%0\"\n+  \"{com%I2clr|cmp%I2clr},%B3 %2,%1,%0\\;ldi 1,%0\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"8\")])\n \n@@ -629,7 +629,7 @@\n \t\t\t\t   [(match_operand:SI 4 \"register_operand\" \"r\")\n \t\t\t\t    (match_operand:SI 5 \"arith11_operand\" \"rI\")])))]\n   \"\"\n-  \"com%I2clr,%S3 %2,%1,%%r0\\;com%I5clr,%B6 %5,%4,%0\\;ldi 1,%0\"\n+  \"{com%I2clr|cmp%I2clr},%S3 %2,%1,%%r0\\;{com%I5clr|cmp%I5clr},%B6 %5,%4,%0\\;ldi 1,%0\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"12\")])\n \n@@ -641,7 +641,7 @@\n \t       [(match_operand:SI 1 \"register_operand\" \"r\")\n \t\t(match_operand:SI 2 \"arith11_operand\" \"rI\")])))]\n   \"\"\n-  \"com%I2clr,%B3 %2,%1,%0\\;ldi -1,%0\"\n+  \"{com%I2clr|cmp%I2clr},%B3 %2,%1,%0\\;ldi -1,%0\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"8\")])\n \n@@ -657,7 +657,7 @@\n \t\t\t (match_operand:SI 3 \"arith11_operand\" \"rI\"))\n \t\t (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"sub%I3 %3,%2,%%r0\\;addc %%r0,%1,%0\"\n+  \"sub%I3 %3,%2,%%r0\\;{addc|add,c} %%r0,%1,%0\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"8\")])\n \n@@ -669,7 +669,7 @@\n \t\t\t (match_operand:SI 3 \"register_operand\" \"r\"))\n \t\t (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"sub %2,%3,%%r0\\;addc %%r0,%1,%0\"\n+  \"sub %2,%3,%%r0\\;{addc|add,c} %%r0,%1,%0\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"8\")])\n \n@@ -682,7 +682,7 @@\n \t\t\t (match_operand:SI 3 \"int11_operand\" \"I\"))\n \t\t (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"addi %k3,%2,%%r0\\;addc %%r0,%1,%0\"\n+  \"addi %k3,%2,%%r0\\;{addc|add,c} %%r0,%1,%0\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"8\")])\n \n@@ -694,8 +694,8 @@\n \t\t (match_operand:SI 1 \"register_operand\" \"0,?r\")))]\n   \"\"\n   \"@\n-   com%I3clr,%B4 %3,%2,%%r0\\;addi 1,%0,%0\n-   com%I3clr,%B4 %3,%2,%%r0\\;addi,tr 1,%1,%0\\;copy %1,%0\"\n+   {com%I3clr|cmp%I3clr},%B4 %3,%2,%%r0\\;addi 1,%0,%0\n+   {com%I3clr|cmp%I3clr},%B4 %3,%2,%%r0\\;addi,tr 1,%1,%0\\;copy %1,%0\"\n   [(set_attr \"type\" \"binary,binary\")\n    (set_attr \"length\" \"8,12\")])\n \n@@ -705,7 +705,7 @@\n \t\t  (gtu:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t\t  (match_operand:SI 3 \"arith11_operand\" \"rI\"))))]\n   \"\"\n-  \"sub%I3 %3,%2,%%r0\\;subb %1,0,%0\"\n+  \"sub%I3 %3,%2,%%r0\\;{subb|sub,b} %1,%%r0,%0\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"8\")])\n \n@@ -716,7 +716,7 @@\n \t\t\t\t    (match_operand:SI 3 \"arith11_operand\" \"rI\")))\n \t\t  (match_operand:SI 4 \"register_operand\" \"r\")))]\n   \"\"\n-  \"sub%I3 %3,%2,%%r0\\;subb %1,%4,%0\"\n+  \"sub%I3 %3,%2,%%r0\\;{subb|sub,b} %1,%4,%0\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"8\")])\n \n@@ -728,7 +728,7 @@\n \t\t  (ltu:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t\t  (match_operand:SI 3 \"register_operand\" \"r\"))))]\n   \"\"\n-  \"sub %2,%3,%%r0\\;subb %1,0,%0\"\n+  \"sub %2,%3,%%r0\\;{subb|sub,b} %1,%%r0,%0\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"8\")])\n \n@@ -739,7 +739,7 @@\n \t\t\t\t    (match_operand:SI 3 \"register_operand\" \"r\")))\n \t\t  (match_operand:SI 4 \"register_operand\" \"r\")))]\n   \"\"\n-  \"sub %2,%3,%%r0\\;subb %1,%4,%0\"\n+  \"sub %2,%3,%%r0\\;{subb|sub,b} %1,%4,%0\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"8\")])\n \n@@ -752,7 +752,7 @@\n \t\t  (leu:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t\t  (match_operand:SI 3 \"int11_operand\" \"I\"))))]\n   \"\"\n-  \"addi %k3,%2,%%r0\\;subb %1,0,%0\"\n+  \"addi %k3,%2,%%r0\\;{subb|sub,b} %1,%%r0,%0\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"8\")])\n \n@@ -763,7 +763,7 @@\n \t\t\t\t    (match_operand:SI 3 \"int11_operand\" \"I\")))\n \t\t  (match_operand:SI 4 \"register_operand\" \"r\")))]\n   \"\"\n-  \"addi %k3,%2,%%r0\\;subb %1,%4,%0\"\n+  \"addi %k3,%2,%%r0\\;{subb|sub,b} %1,%4,%0\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"8\")])\n \n@@ -775,8 +775,8 @@\n \t\t      (match_operand:SI 3 \"arith11_operand\" \"rI,rI\")])))]\n   \"\"\n   \"@\n-   com%I3clr,%B4 %3,%2,%%r0\\;addi -1,%0,%0\n-   com%I3clr,%B4 %3,%2,%%r0\\;addi,tr -1,%1,%0\\;copy %1,%0\"\n+   {com%I3clr|cmp%I3clr},%B4 %3,%2,%%r0\\;addi -1,%0,%0\n+   {com%I3clr|cmp%I3clr},%B4 %3,%2,%%r0\\;addi,tr -1,%1,%0\\;copy %1,%0\"\n   [(set_attr \"type\" \"binary,binary\")\n    (set_attr \"length\" \"8,12\")])\n \n@@ -789,9 +789,9 @@\n \t\t (match_operand:SI 2 \"arith11_operand\" \"r,I,M\")))]\n   \"\"\n   \"@\n-  comclr,> %2,%0,%%r0\\;copy %2,%0\n-  comiclr,> %2,%0,%%r0\\;ldi %2,%0\n-  comclr,> %1,%r2,%0\\;copy %1,%0\"\n+  {comclr|cmpclr},> %2,%0,%%r0\\;copy %2,%0\n+  {comiclr|cmpiclr},> %2,%0,%%r0\\;ldi %2,%0\n+  {comclr|cmpclr},> %1,%r2,%0\\;copy %1,%0\"\n [(set_attr \"type\" \"multi,multi,multi\")\n  (set_attr \"length\" \"8,8,8\")])\n \n@@ -801,8 +801,8 @@\n \t\t (match_operand:SI 2 \"arith11_operand\" \"r,I\")))]\n   \"\"\n   \"@\n-  comclr,>> %2,%0,%%r0\\;copy %2,%0\n-  comiclr,>> %2,%0,%%r0\\;ldi %2,%0\"\n+  {comclr|cmpclr},>> %2,%0,%%r0\\;copy %2,%0\n+  {comiclr|cmpiclr},>> %2,%0,%%r0\\;ldi %2,%0\"\n [(set_attr \"type\" \"multi,multi\")\n  (set_attr \"length\" \"8,8\")])\n \n@@ -812,9 +812,9 @@\n \t\t (match_operand:SI 2 \"arith11_operand\" \"r,I,M\")))]\n   \"\"\n   \"@\n-  comclr,< %2,%0,%%r0\\;copy %2,%0\n-  comiclr,< %2,%0,%%r0\\;ldi %2,%0\n-  comclr,< %1,%r2,%0\\;copy %1,%0\"\n+  {comclr|cmpclr},< %2,%0,%%r0\\;copy %2,%0\n+  {comiclr|cmpiclr},< %2,%0,%%r0\\;ldi %2,%0\n+  {comclr|cmpclr},< %1,%r2,%0\\;copy %1,%0\"\n [(set_attr \"type\" \"multi,multi,multi\")\n  (set_attr \"length\" \"8,8,8\")])\n \n@@ -824,8 +824,8 @@\n \t\t (match_operand:SI 2 \"arith11_operand\" \"r,I\")))]\n   \"\"\n   \"@\n-  comclr,<< %2,%0,%%r0\\;copy %2,%0\n-  comiclr,<< %2,%0,%%r0\\;ldi %2,%0\"\n+  {comclr|cmpclr},<< %2,%0,%%r0\\;copy %2,%0\n+  {comiclr|cmpiclr},<< %2,%0,%%r0\\;ldi %2,%0\"\n [(set_attr \"type\" \"multi,multi\")\n  (set_attr \"length\" \"8,8\")])\n \n@@ -874,11 +874,11 @@\n \t (const_int 0)))]\n   \"\"\n   \"@\n-   com%I4clr,%S5 %4,%3,%%r0\\;ldi 0,%0\n-   com%I4clr,%B5 %4,%3,%0\\;copy %1,%0\n-   com%I4clr,%B5 %4,%3,%0\\;ldi %1,%0\n-   com%I4clr,%B5 %4,%3,%0\\;ldil L'%1,%0\n-   com%I4clr,%B5 %4,%3,%0\\;zdepi %Z1,%0\"\n+   {com%I4clr|cmp%I4clr},%S5 %4,%3,%%r0\\;ldi 0,%0\n+   {com%I4clr|cmp%I4clr},%B5 %4,%3,%0\\;copy %1,%0\n+   {com%I4clr|cmp%I4clr},%B5 %4,%3,%0\\;ldi %1,%0\n+   {com%I4clr|cmp%I4clr},%B5 %4,%3,%0\\;ldil L'%1,%0\n+   {com%I4clr|cmp%I4clr},%B5 %4,%3,%0\\;{zdepi|depwi,z} %Z1,%0\"\n   [(set_attr \"type\" \"multi,multi,multi,multi,nullshift\")\n    (set_attr \"length\" \"8,8,8,8,8\")])\n \n@@ -892,14 +892,14 @@\n \t (match_operand:SI 2 \"reg_or_cint_move_operand\" \"r,J,N,K,0,0,0,0\")))]\n   \"\"\n   \"@\n-   com%I4clr,%S5 %4,%3,%%r0\\;copy %2,%0\n-   com%I4clr,%S5 %4,%3,%%r0\\;ldi %2,%0\n-   com%I4clr,%S5 %4,%3,%%r0\\;ldil L'%2,%0\n-   com%I4clr,%S5 %4,%3,%%r0\\;zdepi %Z2,%0\n-   com%I4clr,%B5 %4,%3,%%r0\\;copy %1,%0\n-   com%I4clr,%B5 %4,%3,%%r0\\;ldi %1,%0\n-   com%I4clr,%B5 %4,%3,%%r0\\;ldil L'%1,%0\n-   com%I4clr,%B5 %4,%3,%%r0\\;zdepi %Z1,%0\"\n+   {com%I4clr|cmp%I4clr},%S5 %4,%3,%%r0\\;copy %2,%0\n+   {com%I4clr|cmp%I4clr},%S5 %4,%3,%%r0\\;ldi %2,%0\n+   {com%I4clr|cmp%I4clr},%S5 %4,%3,%%r0\\;ldil L'%2,%0\n+   {com%I4clr|cmp%I4clr},%S5 %4,%3,%%r0\\;{zdepi|depwi,z} %Z2,%0\n+   {com%I4clr|cmp%I4clr},%B5 %4,%3,%%r0\\;copy %1,%0\n+   {com%I4clr|cmp%I4clr},%B5 %4,%3,%%r0\\;ldi %1,%0\n+   {com%I4clr|cmp%I4clr},%B5 %4,%3,%%r0\\;ldil L'%1,%0\n+   {com%I4clr|cmp%I4clr},%B5 %4,%3,%%r0\\;{zdepi|depwi,z} %Z1,%0\"\n   [(set_attr \"type\" \"multi,multi,multi,nullshift,multi,multi,multi,nullshift\")\n    (set_attr \"length\" \"8,8,8,8,8,8,8,8\")])\n \n@@ -1407,7 +1407,7 @@\n    copy %1,%0\n    ldi %1,%0\n    ldil L'%1,%0\n-   zdepi %Z1,%0\n+   {zdepi|depwi,z} %Z1,%0\n    ldw%M1 %1,%0\n    stw%M0 %r1,%0\n    mtsar %r1\n@@ -1430,7 +1430,7 @@\n    copy %1,%0\n    ldi %1,%0\n    ldil L'%1,%0\n-   zdepi %Z1,%0\n+   {zdepi|depwi,z} %Z1,%0\n    ldw%M1 %1,%0\n    stw%M0 %r1,%0\n    mtsar %r1\"\n@@ -1450,9 +1450,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"ldwx %1(%2),%0\\\";\n+    return \\\"{ldwx|ldw} %1(%2),%0\\\";\n   else\n-    return \\\"ldwx %2(%1),%0\\\";\n+    return \\\"{ldwx|ldw} %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1469,9 +1469,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"ldwx %2(%1),%0\\\";\n+    return \\\"{ldwx|ldw} %2(%1),%0\\\";\n   else\n-    return \\\"ldwx %1(%2),%0\\\";\n+    return \\\"{ldwx|ldw} %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1501,8 +1501,8 @@\n   \"*\n {\n   if (INTVAL (operands[2]) < 0)\n-    return \\\"ldwm %2(%1),%0\\\";\n-  return \\\"ldws,mb %2(%1),%0\\\";\n+    return \\\"{ldwm|ldw,mb} %2(%1),%0\\\";\n+  return \\\"{ldws|ldw},mb %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1517,8 +1517,8 @@\n   \"*\n {\n   if (INTVAL (operands[1]) < 0)\n-    return \\\"stwm %r2,%1(%0)\\\";\n-  return \\\"stws,mb %r2,%1(%0)\\\";\n+    return \\\"{stwm|stw,mb} %r2,%1(%0)\\\";\n+  return \\\"{stws|stw},mb %r2,%1(%0)\\\";\n }\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n@@ -1533,8 +1533,8 @@\n   \"*\n {\n   if (INTVAL (operands[2]) > 0)\n-    return \\\"ldwm %2(%1),%0\\\";\n-  return \\\"ldws,ma %2(%1),%0\\\";\n+    return \\\"{ldwm|ldw,ma} %2(%1),%0\\\";\n+  return \\\"{ldws|ldw},ma %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1562,8 +1562,8 @@\n   \"*\n {\n   if (INTVAL (operands[2]) > 0)\n-    return \\\"stwm %r1,%2(%0)\\\";\n-  return \\\"stws,ma %r1,%2(%0)\\\";\n+    return \\\"{stwm|stw,ma} %r1,%2(%0)\\\";\n+  return \\\"{stws|stw},ma %r1,%2(%0)\\\";\n }\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n@@ -1584,8 +1584,8 @@\n   xoperands[0] = operands[0];\n   xoperands[1] = operands[1];\n   xoperands[2] = label_rtx;\n-  output_asm_insn (\\\"bl .+8,%0\\\", xoperands);\n-  output_asm_insn (\\\"depi 0,31,2,%0\\\", xoperands);\n+  output_asm_insn (\\\"{bl|b,l} .+8,%0\\\", xoperands);\n+  output_asm_insn (\\\"{depi|depwi} 0,31,2,%0\\\", xoperands);\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\",\n \t\t\t     CODE_LABEL_NUMBER (label_rtx));\n \n@@ -1676,7 +1676,7 @@\n   \"reload_completed\"\n   \"@\n    addil L'%G2,%1\n-   ldil L'%G2,%0\\;addl %0,%1,%0\"\n+   ldil L'%G2,%0\\;{addl|add,l} %0,%1,%0\"\n   [(set_attr \"type\" \"binary,binary\")\n    (set_attr \"length\" \"4,8\")])\n \n@@ -1791,7 +1791,7 @@\n    copy %1,%0\n    ldi %1,%0\n    ldil L'%1,%0\n-   zdepi %Z1,%0\n+   {zdepi|depwi,z} %Z1,%0\n    ldh%M1 %1,%0\n    sth%M0 %r1,%0\n    mtsar %r1\n@@ -1812,9 +1812,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"ldhx %1(%2),%0\\\";\n+    return \\\"{ldhx|ldh} %1(%2),%0\\\";\n   else\n-    return \\\"ldhx %2(%1),%0\\\";\n+    return \\\"{ldhx|ldh} %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1831,9 +1831,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"ldhx %2(%1),%0\\\";\n+    return \\\"{ldhx|ldh} %2(%1),%0\\\";\n   else\n-    return \\\"ldhx %1(%2),%0\\\";\n+    return \\\"{ldhx|ldh} %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1853,9 +1853,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"ldhx %1(%2),%0\\\";\n+    return \\\"{ldhx|ldh} %1(%2),%0\\\";\n   else\n-    return \\\"ldhx %2(%1),%0\\\";\n+    return \\\"{ldhx|ldh} %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1874,9 +1874,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"ldhx %2(%1),%0\\\";\n+    return \\\"{ldhx|ldh} %2(%1),%0\\\";\n   else\n-    return \\\"ldhx %1(%2),%0\\\";\n+    return \\\"{ldhx|ldh} %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1888,7 +1888,7 @@\n    (set (match_dup 1)\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ldhs,mb %2(%1),%0\"\n+  \"{ldhs|ldh},mb %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -1902,7 +1902,7 @@\n    (set (match_dup 1)\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ldhs,mb %2(%1),%0\"\n+  \"{ldhs|ldh},mb %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -1913,7 +1913,7 @@\n    (set (match_dup 0)\n \t(plus:SI (match_dup 0) (match_dup 1)))]\n   \"\"\n-  \"sths,mb %r2,%1(%0)\"\n+  \"{sths|sth},mb %r2,%1(%0)\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n \n@@ -1953,7 +1953,7 @@\n    copy %1,%0\n    ldi %1,%0\n    ldil L'%1,%0\n-   zdepi %Z1,%0\n+   {zdepi|depwi,z} %Z1,%0\n    ldb%M1 %1,%0\n    stb%M0 %r1,%0\n    mtsar %r1\n@@ -1974,9 +1974,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"ldbx %1(%2),%0\\\";\n+    return \\\"{ldbx|ldb} %1(%2),%0\\\";\n   else\n-    return \\\"ldbx %2(%1),%0\\\";\n+    return \\\"{ldbx|ldb} %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -1993,9 +1993,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"ldbx %2(%1),%0\\\";\n+    return \\\"{ldbx|ldb} %2(%1),%0\\\";\n   else\n-    return \\\"ldbx %1(%2),%0\\\";\n+    return \\\"{ldbx|ldb} %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -2015,9 +2015,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"ldbx %1(%2),%0\\\";\n+    return \\\"{ldbx|ldb} %1(%2),%0\\\";\n   else\n-    return \\\"ldbx %2(%1),%0\\\";\n+    return \\\"{ldbx|ldb} %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -2036,9 +2036,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"ldbx %2(%1),%0\\\";\n+    return \\\"{ldbx|ldb} %2(%1),%0\\\";\n   else\n-    return \\\"ldbx %1(%2),%0\\\";\n+    return \\\"{ldbx|ldb} %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -2057,9 +2057,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"ldbx %1(%2),%0\\\";\n+    return \\\"{ldbx|ldb} %1(%2),%0\\\";\n   else\n-    return \\\"ldbx %2(%1),%0\\\";\n+    return \\\"{ldbx|ldb} %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -2078,9 +2078,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"ldbx %2(%1),%0\\\";\n+    return \\\"{ldbx|ldb} %2(%1),%0\\\";\n   else\n-    return \\\"ldbx %1(%2),%0\\\";\n+    return \\\"{ldbx|ldb} %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -2091,7 +2091,7 @@\n \t\t\t (match_operand:SI 2 \"int5_operand\" \"L\"))))\n    (set (match_dup 1) (plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ldbs,mb %2(%1),%0\"\n+  \"{ldbs|ldb},mb %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2103,7 +2103,7 @@\n \t\t\t\t  (match_operand:SI 2 \"int5_operand\" \"L\")))))\n    (set (match_dup 1) (plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ldbs,mb %2(%1),%0\"\n+  \"{ldbs|ldb},mb %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2114,7 +2114,7 @@\n \t\t\t\t  (match_operand:SI 2 \"int5_operand\" \"L\")))))\n    (set (match_dup 1) (plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n-  \"ldbs,mb %2(%1),%0\"\n+  \"{ldbs|ldb},mb %2(%1),%0\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2125,7 +2125,7 @@\n    (set (match_dup 0)\n \t(plus:SI (match_dup 0) (match_dup 1)))]\n   \"\"\n-  \"stbs,mb %r2,%1(%0)\"\n+  \"{stbs|stb},mb %r2,%1(%0)\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2332,9 +2332,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"flddx %1(%2),%0\\\";\n+    return \\\"{flddx|fldd} %1(%2),%0\\\";\n   else\n-    return \\\"flddx %2(%1),%0\\\";\n+    return \\\"{flddx|fldd} %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"length\" \"4\")])\n@@ -2351,9 +2351,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"flddx %2(%1),%0\\\";\n+    return \\\"{flddx|fldd} %2(%1),%0\\\";\n   else\n-    return \\\"flddx %1(%2),%0\\\";\n+    return \\\"{flddx|fldd} %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"length\" \"4\")])\n@@ -2370,9 +2370,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"fstdx %0,%1(%2)\\\";\n+    return \\\"{fstdx|fstd} %0,%1(%2)\\\";\n   else\n-    return \\\"fstdx %0,%2(%1)\\\";\n+    return \\\"{fstdx|fstd} %0,%2(%1)\\\";\n }\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"4\")])\n@@ -2389,9 +2389,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"fstdx %0,%2(%1)\\\";\n+    return \\\"{fstdx|fstd} %0,%2(%1)\\\";\n   else\n-    return \\\"fstdx %0,%1(%2)\\\";\n+    return \\\"{fstdx|fstd} %0,%1(%2)\\\";\n }\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"4\")])\n@@ -2635,9 +2635,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"fldwx %1(%2),%0\\\";\n+    return \\\"{fldwx|fldw} %1(%2),%0\\\";\n   else\n-    return \\\"fldwx %2(%1),%0\\\";\n+    return \\\"{fldwx|fldw} %2(%1),%0\\\";\n }\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"length\" \"4\")])\n@@ -2654,9 +2654,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"fldwx %2(%1),%0\\\";\n+    return \\\"{fldwx|fldw} %2(%1),%0\\\";\n   else\n-    return \\\"fldwx %1(%2),%0\\\";\n+    return \\\"{fldwx|fldw} %1(%2),%0\\\";\n }\"\n   [(set_attr \"type\" \"fpload\")\n    (set_attr \"length\" \"4\")])\n@@ -2673,9 +2673,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[2] == hard_frame_pointer_rtx\n       || operands[2] == stack_pointer_rtx)\n-    return \\\"fstwx %0,%1(%2)\\\";\n+    return \\\"{fstwx|fstw} %0,%1(%2)\\\";\n   else\n-    return \\\"fstwx %0,%2(%1)\\\";\n+    return \\\"{fstwx|fstw} %0,%2(%1)\\\";\n }\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"4\")])\n@@ -2692,9 +2692,9 @@\n      pseudos that don't get hard registers.  Deal with it.  */\n   if (operands[1] == hard_frame_pointer_rtx\n       || operands[1] == stack_pointer_rtx)\n-    return \\\"fstwx %0,%2(%1)\\\";\n+    return \\\"{fstwx|fstw} %0,%2(%1)\\\";\n   else\n-    return \\\"fstwx %0,%1(%2)\\\";\n+    return \\\"{fstwx|fstw} %0,%1(%2)\\\";\n }\"\n   [(set_attr \"type\" \"fpstore\")\n    (set_attr \"length\" \"4\")])\n@@ -2719,7 +2719,7 @@\n \t (match_operand:HI 1 \"move_operand\" \"r,RQ\")))]\n   \"GET_CODE (operands[1]) != CONST_INT\"\n   \"@\n-   extru %1,31,16,%0\n+   {extru|extrw,u} %1,31,16,%0\n    ldh%M1 %1,%0\"\n   [(set_attr \"type\" \"shift,load\")\n    (set_attr \"length\" \"4,4\")])\n@@ -2737,7 +2737,7 @@\n \t (match_operand:QI 1 \"move_operand\" \"r,RQ\")))]\n   \"GET_CODE (operands[1]) != CONST_INT\"\n   \"@\n-   extru %1,31,8,%0\n+   {extru|extrw,u} %1,31,8,%0\n    ldb%M1 %1,%0\"\n   [(set_attr \"type\" \"shift,load\")\n    (set_attr \"length\" \"4,4\")])\n@@ -2755,7 +2755,7 @@\n \t (match_operand:QI 1 \"move_operand\" \"r,RQ\")))]\n   \"GET_CODE (operands[1]) != CONST_INT\"\n   \"@\n-   extru %1,31,8,%0\n+   {extru|extrw,u} %1,31,8,%0\n    ldb%M1 %1,%0\"\n   [(set_attr \"type\" \"shift,load\")\n    (set_attr \"length\" \"4,4\")])\n@@ -2766,23 +2766,23 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(sign_extend:SI (match_operand:HI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"extrs %1,31,16,%0\"\n+  \"{extrs|extrw,s} %1,31,16,%0\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"extendqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(sign_extend:HI (match_operand:QI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"extrs %1,31,8,%0\"\n+  \"{extrs|extrw,s} %1,31,8,%0\"\n   [(set_attr \"type\" \"shift\") \n   (set_attr \"length\" \"4\")])\n \n (define_insn \"extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(sign_extend:SI (match_operand:QI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"extrs %1,31,8,%0\"\n+  \"{extrs|extrw,s} %1,31,8,%0\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \f\n@@ -2793,7 +2793,7 @@\n \t(float_extend:DF\n \t (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"! TARGET_SOFT_FLOAT\"\n-  \"fcnvff,sgl,dbl %1,%0\"\n+  \"{fcnvff|fcnv},sgl,dbl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2802,7 +2802,7 @@\n \t(float_truncate:SF\n \t (match_operand:DF 1 \"register_operand\" \"f\")))]\n   \"! TARGET_SOFT_FLOAT\"\n-  \"fcnvff,dbl,sgl %1,%0\"\n+  \"{fcnvff|fcnv},dbl,sgl %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2821,15 +2821,15 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(float:SF (match_operand:SI 1 \"const_int_operand\" \"m\")))]\n   \"! TARGET_SOFT_FLOAT\"\n-  \"fldw%F1 %1,%0\\;fcnvxf,sgl,sgl %0,%0\"\n+  \"fldw%F1 %1,%0\\;{fcnvxf,sgl,sgl|fcnv,w,sgl} %0,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"floatsisf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(float:SF (match_operand:SI 1 \"register_operand\" \"f\")))]\n   \"! TARGET_SOFT_FLOAT\"\n-  \"fcnvxf,sgl,sgl %1,%0\"\n+  \"{fcnvxf,sgl,sgl|fcnv,w,sgl} %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2840,15 +2840,15 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(float:DF (match_operand:SI 1 \"const_int_operand\" \"m\")))]\n   \"! TARGET_SOFT_FLOAT\"\n-  \"fldw%F1 %1,%0\\;fcnvxf,sgl,dbl %0,%0\"\n+  \"fldw%F1 %1,%0\\;{fcnvxf,sgl,dbl|fcnv,w,dbl} %0,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"floatsidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(float:DF (match_operand:SI 1 \"register_operand\" \"f\")))]\n   \"! TARGET_SOFT_FLOAT\"\n-  \"fcnvxf,sgl,dbl %1,%0\"\n+  \"{fcnvxf,sgl,dbl|fcnv,w,dbl} %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2892,15 +2892,15 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(float:SF (match_operand:DI 1 \"register_operand\" \"f\")))]\n   \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT\"\n-  \"fcnvxf,dbl,sgl %1,%0\"\n+  \"{fcnvxf,dbl,sgl|fcnv,dw,sgl} %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"floatdidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(float:DF (match_operand:DI 1 \"register_operand\" \"f\")))]\n   \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT\"\n-  \"fcnvxf,dbl,dbl %1,%0\"\n+  \"{fcnvxf,dbl,dbl|fcnv,dw,dbl} %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n@@ -2911,31 +2911,31 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n \t(fix:SI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))]\n   \"! TARGET_SOFT_FLOAT\"\n-  \"fcnvfxt,sgl,sgl %1,%0\"\n+  \"{fcnvfxt,sgl,sgl|fcnv,t,sgl,w} %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"fix_truncdfsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=f\")\n \t(fix:SI (fix:DF (match_operand:DF 1 \"register_operand\" \"f\"))))]\n   \"! TARGET_SOFT_FLOAT\"\n-  \"fcnvfxt,dbl,sgl %1,%0\"\n+  \"{fcnvfxt,dbl,sgl|fcnv,t,dbl,w} %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"fix_truncsfdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n \t(fix:DI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))]\n   \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT\"\n-  \"fcnvfxt,sgl,dbl %1,%0\"\n+  \"{fcnvfxt,sgl,dbl|fcnv,t,sgl,dw} %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n (define_insn \"fix_truncdfdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n \t(fix:DI (fix:DF (match_operand:DF 1 \"register_operand\" \"f\"))))]\n   \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT\"\n-  \"fcnvfxt,dbl,dbl %1,%0\"\n+  \"{fcnvfxt,dbl,dbl|fcnv,t,dbl,dw} %1,%0\"\n   [(set_attr \"type\" \"fpalu\")\n    (set_attr \"length\" \"4\")])\n \n@@ -3022,12 +3022,12 @@\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n       if (INTVAL (operands[2]) >= 0)\n-\treturn \\\"addi %2,%R1,%R0\\;addc %1,0,%0\\\";\n+\treturn \\\"addi %2,%R1,%R0\\;{addc|add,c} %1,%%r0,%0\\\";\n       else\n-\treturn \\\"addi %2,%R1,%R0\\;subb %1,0,%0\\\";\n+\treturn \\\"addi %2,%R1,%R0\\;{subb|sub,b} %1,%%r0,%0\\\";\n     }\n   else\n-    return \\\"add %R2,%R1,%R0\\;addc %2,%1,%0\\\";\n+    return \\\"add %R2,%R1,%R0\\;{addc|add,c} %2,%1,%0\\\";\n }\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"8\")])\n@@ -3112,7 +3112,7 @@\n \t\t (match_operand:SI 2 \"arith_operand\" \"r,J\")))]\n   \"\"\n   \"@\n-   addl %1,%2,%0\n+   {addl|add,l} %1,%2,%0\n    ldo %2(%1),%0\"\n   [(set_attr \"type\" \"binary,binary\")\n    (set_attr \"pa_combine_type\" \"addmove\")\n@@ -3130,9 +3130,9 @@\n   \"*\n {\n   if (GET_CODE (operands[3]) == CONST_INT)\n-    return \\\"ldo %3(%2),%0\\;addl %1,%0,%0\\\";\n+    return \\\"ldo %3(%2),%0\\;{addl|add,l} %1,%0,%0\\\";\n   else\n-    return \\\"addl %3,%2,%0\\;addl %1,%0,%0\\\";\n+    return \\\"{addl|add,l} %3,%2,%0\\;{addl|add,l} %1,%0,%0\\\";\n }\"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"8\")])\n@@ -3149,7 +3149,7 @@\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t  (match_operand:DI 2 \"register_operand\" \"r\")))]\n   \"\"\n-  \"sub %R1,%R2,%R0\\;subb %1,%2,%0\"\n+  \"sub %R1,%R2,%R0\\;{subb|sub,b} %1,%2,%0\"\n   [(set_attr \"type\" \"binary\")\n   (set_attr \"length\" \"8\")])\n \n@@ -3627,7 +3627,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"sub %%r0,%R1,%R0\\;subb %%r0,%1,%0\"\n+  \"sub %%r0,%R1,%R0\\;{subb|sub,b} %%r0,%1,%0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"8\")])\n \n@@ -4195,7 +4195,7 @@\n \t\t\t  (match_operand:SI 3 \"shadd_operand\" \"\"))\n \t\t (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n-  \"sh%O3addl %2,%1,%0\"\n+  \"{sh%O3addl %2,%1,%0|shladd,l %2,%O3,%1,%0} \"\n   [(set_attr \"type\" \"binary\")\n    (set_attr \"length\" \"4\")])\n \n@@ -4216,8 +4216,8 @@\n \t\t (match_operand:SI 3 \"const_int_operand\" \"r,J\")))]\n   \"reload_in_progress\"\n   \"@\n-   sh%O4addl %2,%1,%0\\;addl %3,%0,%0\n-   sh%O4addl %2,%1,%0\\;ldo %3(%0),%0\"\n+   {sh%O4addl %2,%1,%0|shladd,l %2,%O4,%1,%0}\\;{addl|add,l} %3,%0,%0\n+   {sh%O4addl %2,%1,%0|shladd,l %2,%O4,%1,%0}\\;ldo %3(%0),%0\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"8\")])\n \n@@ -4287,7 +4287,7 @@\n \t(ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n   \"\"\n-  \"zdep %1,%P2,%L2,%0\"\n+  \"{zdep|depw,z} %1,%P2,%L2,%0\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \n@@ -4304,8 +4304,8 @@\n \t\t\t     (match_operand:SI 2 \"register_operand\" \"q,q\"))))]\n   \"\"\n   \"@\n-   zvdep %1,32,%0\n-   zvdepi %1,32,%0\"\n+   {zvdep %1,32,%0|depw,z %1,%%sar,32,%0}\n+   {zvdepi %1,32,%0|depwi,z %1,%%sar,32,%0}\"\n   [(set_attr \"type\" \"shift,shift\")\n    (set_attr \"length\" \"4,4\")])\n \n@@ -4320,7 +4320,7 @@\n   int x = INTVAL (operands[1]);\n   operands[2] = GEN_INT (4 + exact_log2 ((x >> 4) + 1));\n   operands[1] = GEN_INT ((x & 0xf) - 0x10);\n-  return \\\"zvdepi %1,%2,%0\\\";\n+  return \\\"{zvdepi %1,%2,%0|depwi,z %1,%%sar,%2,%0}\\\";\n }\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n@@ -4337,7 +4337,7 @@\n {\n   int x = INTVAL (operands[1]);\n   operands[2] = GEN_INT (exact_log2 (x + 1));\n-  return \\\"vdepi -1,%2,%0\\\";\n+  return \\\"{vdepi -1,%2,%0|depwi -1,%%sar,%2,%0}\\\";\n }\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n@@ -4354,7 +4354,7 @@\n {\n   int x = INTVAL (operands[1]);\n   operands[2] = GEN_INT (exact_log2 ((~x) + 1));\n-  return \\\"vdepi 0,%2,%0\\\";\n+  return \\\"{vdepi 0,%2,%0|depwi 0,%%sar,%2,%0}\\\";\n }\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n@@ -4380,7 +4380,7 @@\n \t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"n\")))]\n   \"\"\n-  \"extrs %1,%P2,%L2,%0\"\n+  \"{extrs|extrw,s} %1,%P2,%L2,%0\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \n@@ -4390,7 +4390,7 @@\n \t\t     (minus:SI (const_int 31)\n \t\t\t       (match_operand:SI 2 \"register_operand\" \"q\"))))]\n   \"\"\n-  \"vextrs %1,32,%0\"\n+  \"{vextrs %1,32,%0|extrw,s %1,%%sar,32,%0}\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \n@@ -4400,8 +4400,8 @@\n \t\t     (match_operand:SI 2 \"arith32_operand\" \"q,n\")))]\n   \"\"\n   \"@\n-   vshd %%r0,%1,%0\n-   extru %1,%P2,%L2,%0\"\n+   {vshd %%r0,%1,%0|shrpw %%r0,%1,%%sar,%0}\n+   {extru|extrw,u} %1,%P2,%L2,%0\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \n@@ -4415,10 +4415,10 @@\n   if (GET_CODE (operands[2]) == CONST_INT)\n     {\n       operands[2] = GEN_INT (INTVAL (operands[2]) & 31);\n-      return \\\"shd %1,%1,%2,%0\\\";\n+      return \\\"{shd|shrpw} %1,%1,%2,%0\\\";\n     }\n   else\n-    return \\\"vshd %1,%1,%0\\\";\n+    return \\\"{vshd %1,%1,%0|shrpw %1,%1,%%sar,%0}\\\";\n }\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n@@ -4448,7 +4448,7 @@\n   \"*\n {\n   operands[2] = GEN_INT ((32 - INTVAL (operands[2])) & 31);\n-  return \\\"shd %1,%1,%2,%0\\\";\n+  return \\\"{shd|shrpw} %1,%1,%2,%0\\\";\n }\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n@@ -4461,7 +4461,7 @@\n \t   (lshiftrt:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t\t(match_operand:SI 4 \"const_int_operand\" \"n\"))]))]\n   \"INTVAL (operands[3]) + INTVAL (operands[4]) == 32\"\n-  \"shd %1,%2,%4,%0\"\n+  \"{shd|shrpw} %1,%2,%4,%0\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \n@@ -4473,7 +4473,7 @@\n \t   (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t      (match_operand:SI 3 \"const_int_operand\" \"n\"))]))]\n   \"INTVAL (operands[3]) + INTVAL (operands[4]) == 32\"\n-  \"shd %1,%2,%4,%0\"\n+  \"{shd|shrpw} %1,%2,%4,%0\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \n@@ -4488,7 +4488,7 @@\n   int cnt = INTVAL (operands[2]) & 31;\n   operands[3] = GEN_INT (exact_log2 (1 + (INTVAL (operands[3]) >> cnt)));\n   operands[2] = GEN_INT (31 - cnt);\n-  return \\\"zdep %1,%2,%3,%0\\\";\n+  return \\\"{zdep|depw,z} %1,%2,%3,%0\\\";\n }\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n@@ -4551,7 +4551,7 @@\n   [(unspec_volatile [(const_int 0)] 0)\n    (use (match_operand:SI 0 \"const_int_operand\" \"\"))]\n   \"\"\n-  \"bl _mcount,%%r2\\;ldo %0(%%r2),%%r25\"\n+  \"{bl|b,l} _mcount,%%r2\\;ldo %0(%%r2),%%r25\"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"8\")])\n \n@@ -4609,7 +4609,8 @@\n       xoperands[0] = operands[0];\n       xoperands[1] = gen_label_rtx ();\n \n-      output_asm_insn (\\\"bl .+8,%%r1\\\\n\\\\taddil L'%l0-%l1,%%r1\\\", xoperands);\n+      output_asm_insn (\\\"{bl|b,l} .+8,%%r1\\\\n\\\\taddil L'%l0-%l1,%%r1\\\",\n+\t\t       xoperands);\n       ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\",\n                                  CODE_LABEL_NUMBER (xoperands[1]));\n       output_asm_insn (\\\"ldo R'%l0-%l1(%%r1),%%r1\\\\n\\\\tbv %%r0(%%r1)\\\",\n@@ -4800,7 +4801,7 @@\n      No need to check target flags as the length uniquely identifies\n      the remaining cases.  */\n   if (get_attr_length (insn) == 8)\n-    return \\\".CALL\\\\tARGW0=GR\\;bl $$dyncall,%%r31\\;copy %%r31,%%r2\\\";\n+    return \\\".CALL\\\\tARGW0=GR\\;{bl|b,l} $$dyncall,%%r31\\;copy %%r31,%%r2\\\";\n \n   /* Long millicode call, but we are not generating PIC or portable runtime\n      code.  */\n@@ -4814,7 +4815,7 @@\n   /* If we're generating PIC code.  */\n   xoperands[0] = operands[0];\n   xoperands[1] = gen_label_rtx ();\n-  output_asm_insn (\\\"bl .+8,%%r1\\\", xoperands);\n+  output_asm_insn (\\\"{bl|b,l} .+8,%%r1\\\", xoperands);\n   output_asm_insn (\\\"addil L%%$$dyncall-%1,%%r1\\\", xoperands);\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\",\n \t\t\t     CODE_LABEL_NUMBER (xoperands[1]));\n@@ -4960,7 +4961,7 @@\n      No need to check target flags as the length uniquely identifies\n      the remaining cases.  */\n   if (get_attr_length (insn) == 8)\n-    return \\\".CALL\\\\tARGW0=GR\\;bl $$dyncall,%%r31\\;copy %%r31,%%r2\\\";\n+    return \\\".CALL\\\\tARGW0=GR\\;{bl|b,l} $$dyncall,%%r31\\;copy %%r31,%%r2\\\";\n \n   /* Long millicode call, but we are not generating PIC or portable runtime\n      code.  */\n@@ -4974,7 +4975,7 @@\n   /* If we're generating PIC code.  */\n   xoperands[0] = operands[1];\n   xoperands[1] = gen_label_rtx ();\n-  output_asm_insn (\\\"bl .+8,%%r1\\\", xoperands);\n+  output_asm_insn (\\\"{bl|b,l} .+8,%%r1\\\", xoperands);\n   output_asm_insn (\\\"addil L%%$$dyncall-%1,%%r1\\\", xoperands);\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \\\"L\\\",\n \t\t\t     CODE_LABEL_NUMBER (xoperands[1]));\n@@ -5129,7 +5130,7 @@\n \t\t\t (match_operand:SI 2 \"uint5_operand\" \"\")\n \t\t\t (match_operand:SI 3 \"uint5_operand\" \"\")))]\n   \"\"\n-  \"extru %1,%3+%2-1,%2,%0\"\n+  \"{extru|extrw,u} %1,%3+%2-1,%2,%0\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \n@@ -5139,7 +5140,7 @@\n \t\t\t (const_int 1)\n \t\t\t (match_operand:SI 3 \"register_operand\" \"q\")))]\n   \"\"\n-  \"vextru %1,1,%0\"\n+  \"{vextru %1,1,%0|extrw,u %1,%%sar,1,%0}\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \n@@ -5149,7 +5150,7 @@\n \t\t\t (match_operand:SI 2 \"uint5_operand\" \"\")\n \t\t\t (match_operand:SI 3 \"uint5_operand\" \"\")))]\n   \"\"\n-  \"extrs %1,%3+%2-1,%2,%0\"\n+  \"{extrs|extrw,s} %1,%3+%2-1,%2,%0\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \n@@ -5159,7 +5160,7 @@\n \t\t\t (const_int 1)\n \t\t\t (match_operand:SI 3 \"register_operand\" \"q\")))]\n   \"\"\n-  \"vextrs %1,1,%0\"\n+  \"{vextrs %1,1,%0|extrw,s %1,%%sar,1,%0}\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \n@@ -5170,8 +5171,8 @@\n \t(match_operand:SI 3 \"arith5_operand\" \"r,L\"))]\n   \"\"\n   \"@\n-   dep %3,%2+%1-1,%1,%0\n-   depi %3,%2+%1-1,%1,%0\"\n+   {dep|depw} %3,%2+%1-1,%1,%0\n+   {depi|depwi} %3,%2+%1-1,%1,%0\"\n   [(set_attr \"type\" \"shift,shift\")\n    (set_attr \"length\" \"4,4\")])\n \n@@ -5186,7 +5187,7 @@\n   \"*\n {\n   operands[3] = GEN_INT ((INTVAL (operands[3]) & 0xf) - 0x10);\n-  return \\\"depi %3,%2+%1-1,%1,%0\\\";\n+  return \\\"{depi|depwi} %3,%2+%1-1,%1,%0\\\";\n }\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n@@ -5656,7 +5657,7 @@\n \t\t\t   NULL);\n \t}\n       else\n-\toutput_asm_insn (\\\"bl,n __outline_prologue_fp,%%r31\\\", NULL);\n+\toutput_asm_insn (\\\"{bl|b,l},n __outline_prologue_fp,%%r31\\\", NULL);\n     }\n   else\n     {\n@@ -5669,7 +5670,7 @@\n \t  output_asm_insn (\\\"ble,n R'__outline_prologue(%%sr0,%%r31)\\\", NULL);\n \t}\n       else\n-\toutput_asm_insn (\\\"bl,n __outline_prologue,%%r31\\\", NULL);\n+\toutput_asm_insn (\\\"{bl|b,l},n __outline_prologue,%%r31\\\", NULL);\n     }\n   return \\\"\\\";\n }\"\n@@ -5711,7 +5712,7 @@\n \t\t\t   NULL);\n \t}\n       else\n-\toutput_asm_insn (\\\"bl,n __outline_epilogue_fp,%%r31\\\", NULL);\n+\toutput_asm_insn (\\\"{bl|b,l},n __outline_epilogue_fp,%%r31\\\", NULL);\n     }\n   else\n     {\n@@ -5726,7 +5727,7 @@\n \t  output_asm_insn (\\\"ble,n R'__outline_epilogue(%%sr0,%%r31)\\\", NULL);\n \t}\n       else\n-\toutput_asm_insn (\\\"bl,n __outline_epilogue,%%r31\\\", NULL);\n+\toutput_asm_insn (\\\"{bl|b,l},n __outline_epilogue,%%r31\\\", NULL);\n     }\n   return \\\"\\\";\n }\"\n@@ -5777,24 +5778,28 @@\n   /* Next, examine the low two bits in %r26, if they aren't 0x2, then\n      we use %r26 unchanged.  */\n   if (get_attr_length (insn) == 32)\n-    output_asm_insn (\\\"extru %%r26,31,2,%%r31\\;comib,<>,n 2,%%r31,.+24\\\", NULL);\n+    output_asm_insn (\\\"{extru|extrw,u} %%r26,31,2,%%r31\\;{comib|cmpib},<>,n 2,%%r31,.+24\\\", NULL);\n   else if (get_attr_length (insn) == 40)\n-    output_asm_insn (\\\"extru %%r26,31,2,%%r31\\;comib,<>,n 2,%%r31,.+32\\\", NULL);\n+    output_asm_insn (\\\"{extru|extrw,u} %%r26,31,2,%%r31\\;{comib|cmpib},<>,n 2,%%r31,.+32\\\", NULL);\n   else if (get_attr_length (insn) == 44)\n-    output_asm_insn (\\\"extru %%r26,31,2,%%r31\\;comib,<>,n 2,%%r31,.+36\\\", NULL);\n+    output_asm_insn (\\\"{extru|extrw,u} %%r26,31,2,%%r31\\;{comib|cmpib},<>,n 2,%%r31,.+36\\\", NULL);\n   else\n-    output_asm_insn (\\\"extru %%r26,31,2,%%r31\\;comib,<>,n 2,%%r31,.+20\\\", NULL);\n+    output_asm_insn (\\\"{extru|extrw,u} %%r26,31,2,%%r31\\;{comib|cmpib},<>,n 2,%%r31,.+20\\\", NULL);\n \n   /* Next, compare %r26 with 4096, if %r26 is less than or equal to\n      4096, then we use %r26 unchanged.  */\n   if (get_attr_length (insn) == 32)\n-    output_asm_insn (\\\"ldi 4096,%%r31\\;comb,<<,n %%r26,%%r31,.+16\\\", NULL);\n+    output_asm_insn (\\\"ldi 4096,%%r31\\;{comb|cmpb},<<,n %%r26,%%r31,.+16\\\",\n+\t\t     NULL);\n   else if (get_attr_length (insn) == 40)\n-    output_asm_insn (\\\"ldi 4096,%%r31\\;comb,<<,n %%r26,%%r31,.+24\\\", NULL);\n+    output_asm_insn (\\\"ldi 4096,%%r31\\;{comb|cmpb},<<,n %%r26,%%r31,.+24\\\",\n+\t\t     NULL);\n   else if (get_attr_length (insn) == 44)\n-    output_asm_insn (\\\"ldi 4096,%%r31\\;comb,<<,n %%r26,%%r31,.+28\\\", NULL);\n+    output_asm_insn (\\\"ldi 4096,%%r31\\;{comb|cmpb},<<,n %%r26,%%r31,.+28\\\",\n+\t\t     NULL);\n   else\n-    output_asm_insn (\\\"ldi 4096,%%r31\\;comb,<<,n %%r26,%%r31,.+12\\\", NULL);\n+    output_asm_insn (\\\"ldi 4096,%%r31\\;{comb|cmpb},<<,n %%r26,%%r31,.+12\\\",\n+\t\t     NULL);\n \n   /* Else call $$sh_func_adrs to extract the function's real add24.  */\n   return output_millicode_call (insn,"}]}