{"sha": "66e8b99c2aa6f09af3151d972da33d15e09a8d75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZlOGI5OWMyYWE2ZjA5YWYzMTUxZDk3MmRhMzNkMTVlMDlhOGQ3NQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-12-30T21:20:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-12-30T21:20:08Z"}, "message": "re PR tree-optimization/38645 (ICE with volatile)\n\n2008-12-30  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/38645\n\t* tree-ssa-ccp.c (fold_gimple_assign): Use the correct pointer\n\ttype.\n\t* tree-ssa-dom.c (cprop_operand): Simplify.  Do not propagate\n\tvolatileness changing operands.\n\n\t* gcc.dg/pr38645.c: New testcase.\n\nFrom-SVN: r142967", "tree": {"sha": "c2715b7747017c8deeb4499cf75d222f6d9a931a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2715b7747017c8deeb4499cf75d222f6d9a931a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66e8b99c2aa6f09af3151d972da33d15e09a8d75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e8b99c2aa6f09af3151d972da33d15e09a8d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66e8b99c2aa6f09af3151d972da33d15e09a8d75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e8b99c2aa6f09af3151d972da33d15e09a8d75/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c13edb6795a08b73e7d82b5d81fd443deb2b72b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c13edb6795a08b73e7d82b5d81fd443deb2b72b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c13edb6795a08b73e7d82b5d81fd443deb2b72b4"}], "stats": {"total": 87, "additions": 53, "deletions": 34}, "files": [{"sha": "d680ff7140d962bc9534bfddf5b2136f7e4de202", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8b99c2aa6f09af3151d972da33d15e09a8d75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8b99c2aa6f09af3151d972da33d15e09a8d75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66e8b99c2aa6f09af3151d972da33d15e09a8d75", "patch": "@@ -1,3 +1,11 @@\n+2008-12-30  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/38645\n+\t* tree-ssa-ccp.c (fold_gimple_assign): Use the correct pointer\n+\ttype.\n+\t* tree-ssa-dom.c (cprop_operand): Simplify.  Do not propagate\n+\tvolatileness changing operands.\n+\n 2008-12-30  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* tree-cfg.c (verify_eh_throw_stmt_node): Return nonzero,"}, {"sha": "969273eab6860e2250e9cd8a4e68423118dd40ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8b99c2aa6f09af3151d972da33d15e09a8d75/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8b99c2aa6f09af3151d972da33d15e09a8d75/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=66e8b99c2aa6f09af3151d972da33d15e09a8d75", "patch": "@@ -1,3 +1,8 @@\n+2008-12-30  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/38645\n+\t* gcc.dg/pr38645.c: New testcase.\n+\n 2008-12-30  Andrew Pinski  <pinskia@gmail.com>\n \n \tPR middle-end/38661"}, {"sha": "3268f2ac67341080b5ce9787ec026189e557f898", "filename": "gcc/testsuite/gcc.dg/pr38645.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8b99c2aa6f09af3151d972da33d15e09a8d75/gcc%2Ftestsuite%2Fgcc.dg%2Fpr38645.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8b99c2aa6f09af3151d972da33d15e09a8d75/gcc%2Ftestsuite%2Fgcc.dg%2Fpr38645.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr38645.c?ref=66e8b99c2aa6f09af3151d972da33d15e09a8d75", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int foo()\n+{\n+  volatile int a[1];\n+  int i, *p = (int*)a;\n+\n+  a[0] = 1;\n+  for (i = 0; i < 1; ++i)\n+    if (p[i])\n+      return -1;\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"a.0. ={v} 1;\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "d68337fc402a2087b527031eef08c5407263d28d", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8b99c2aa6f09af3151d972da33d15e09a8d75/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8b99c2aa6f09af3151d972da33d15e09a8d75/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=66e8b99c2aa6f09af3151d972da33d15e09a8d75", "patch": "@@ -2720,10 +2720,19 @@ fold_gimple_assign (gimple_stmt_iterator *si)\n     case GIMPLE_BINARY_RHS:\n       /* Try to fold pointer addition.  */\n       if (gimple_assign_rhs_code (stmt) == POINTER_PLUS_EXPR)\n-        result = maybe_fold_stmt_addition (\n-                   TREE_TYPE (gimple_assign_lhs (stmt)),\n-                   gimple_assign_rhs1 (stmt),\n-                   gimple_assign_rhs2 (stmt));\n+\t{\n+\t  tree type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n+\t  if (TREE_CODE (TREE_TYPE (type)) == ARRAY_TYPE)\n+\t    {\n+\t      type = build_pointer_type (TREE_TYPE (TREE_TYPE (type)));\n+\t      if (!useless_type_conversion_p\n+\t\t    (TREE_TYPE (gimple_assign_lhs (stmt)), type))\n+\t\ttype = TREE_TYPE (gimple_assign_rhs1 (stmt));\n+\t    }\n+\t  result = maybe_fold_stmt_addition (type,\n+\t\t\t\t\t     gimple_assign_rhs1 (stmt),\n+\t\t\t\t\t     gimple_assign_rhs2 (stmt));\n+\t}\n \n       if (!result)\n         result = fold_binary (subcode,"}, {"sha": "6d6d02bc30574d89284ff55d5fd47e07206e8587", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 10, "deletions": 30, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66e8b99c2aa6f09af3151d972da33d15e09a8d75/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66e8b99c2aa6f09af3151d972da33d15e09a8d75/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=66e8b99c2aa6f09af3151d972da33d15e09a8d75", "patch": "@@ -2045,8 +2045,6 @@ cprop_operand (gimple stmt, use_operand_p op_p)\n   val = SSA_NAME_VALUE (op);\n   if (val && val != op)\n     {\n-      tree op_type, val_type;\n-\n       /* Do not change the base variable in the virtual operand\n \t tables.  That would make it impossible to reconstruct\n \t the renamed virtual operand if we later modify this\n@@ -2063,38 +2061,20 @@ cprop_operand (gimple stmt, use_operand_p op_p)\n \t  && !may_propagate_copy_into_asm (op))\n \treturn false;\n \n-      /* Get the toplevel type of each operand.  */\n-      op_type = TREE_TYPE (op);\n-      val_type = TREE_TYPE (val);\n-\n-      /* While both types are pointers, get the type of the object\n-\t pointed to.  */\n-      while (POINTER_TYPE_P (op_type) && POINTER_TYPE_P (val_type))\n-\t{\n-\t  op_type = TREE_TYPE (op_type);\n-\t  val_type = TREE_TYPE (val_type);\n-\t}\n-\n-      /* Make sure underlying types match before propagating a constant by\n-\t converting the constant to the proper type.  Note that convert may\n-\t return a non-gimple expression, in which case we ignore this\n-\t propagation opportunity.  */\n-      if (TREE_CODE (val) != SSA_NAME)\n-\t{\n-\t  if (!useless_type_conversion_p (op_type, val_type))\n-\t    {\n-\t      val = fold_convert (TREE_TYPE (op), val);\n-\t      if (!is_gimple_min_invariant (val))\n-\t\treturn false;\n-\t    }\n-\t}\n-\n       /* Certain operands are not allowed to be copy propagated due\n \t to their interaction with exception handling and some GCC\n \t extensions.  */\n-      else if (!may_propagate_copy (op, val))\n+      if (!may_propagate_copy (op, val))\n \treturn false;\n-      \n+\n+      /* Do not propagate addresses that point to volatiles into memory\n+\t stmts without volatile operands.  */\n+      if (POINTER_TYPE_P (TREE_TYPE (val))\n+\t  && TYPE_VOLATILE (TREE_TYPE (TREE_TYPE (val)))\n+\t  && gimple_has_mem_ops (stmt)\n+\t  && !gimple_has_volatile_ops (stmt))\n+\treturn false;\n+\n       /* Do not propagate copies if the propagated value is at a deeper loop\n \t depth than the propagatee.  Otherwise, this may move loop variant\n \t variables outside of their loops and prevent coalescing"}]}