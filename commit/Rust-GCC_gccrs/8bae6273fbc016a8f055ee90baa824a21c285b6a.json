{"sha": "8bae6273fbc016a8f055ee90baa824a21c285b6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJhZTYyNzNmYmMwMTZhOGYwNTVlZTkwYmFhODI0YTIxYzI4NWI2YQ==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-11-05T10:42:48Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-11-05T10:42:48Z"}, "message": "re PR fortran/41556 ([OOP] Errors in applying operator/assignment to an abstract type)\n\n2009-11-05  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/41556\n\tPR fortran/41873\n\t* resolve.c (resolve_function,resolve_call): Prevent abstract interfaces\n\tfrom being called, but allow deferred type-bound procedures with\n\tabstract interface.\n\n\n2009-11-05  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/41556\n\tPR fortran/41873\n\t* gfortran.dg/interface_abstract_4.f90: New test.\n\nFrom-SVN: r153934", "tree": {"sha": "6f84e32446d906f1a0f273031fec790e3018363d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f84e32446d906f1a0f273031fec790e3018363d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bae6273fbc016a8f055ee90baa824a21c285b6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bae6273fbc016a8f055ee90baa824a21c285b6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bae6273fbc016a8f055ee90baa824a21c285b6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bae6273fbc016a8f055ee90baa824a21c285b6a/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb6219852b0c0d26a9002ee41b1962b5558b3c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6219852b0c0d26a9002ee41b1962b5558b3c3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb6219852b0c0d26a9002ee41b1962b5558b3c3a"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "dca8031f0d5f73017fe7af6ceeb6b5c68c0d39a5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bae6273fbc016a8f055ee90baa824a21c285b6a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bae6273fbc016a8f055ee90baa824a21c285b6a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8bae6273fbc016a8f055ee90baa824a21c285b6a", "patch": "@@ -1,3 +1,11 @@\n+2009-11-05  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/41556\n+\tPR fortran/41873\n+\t* resolve.c (resolve_function,resolve_call): Prevent abstract interfaces\n+\tfrom being called, but allow deferred type-bound procedures with\n+\tabstract interface.\n+\n 2009-11-04  Tobias Burnus <burnus@gcc.gnu.org>\n \t    Janus Weil  <janus@gcc.gnu.org>\n "}, {"sha": "a721d944b33fefb0fdb53a37e965bfa6b90ee55c", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bae6273fbc016a8f055ee90baa824a21c285b6a/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bae6273fbc016a8f055ee90baa824a21c285b6a/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=8bae6273fbc016a8f055ee90baa824a21c285b6a", "patch": "@@ -2526,7 +2526,9 @@ resolve_function (gfc_expr *expr)\n       return FAILURE;\n     }\n \n-  if (sym && sym->attr.abstract)\n+  /* If this ia a deferred TBP with an abstract interface (which may\n+     of course be referenced), expr->value.function.name will be set.  */\n+  if (sym && sym->attr.abstract && !expr->value.function.name)\n     {\n       gfc_error (\"ABSTRACT INTERFACE '%s' must not be referenced at %L\",\n \t\t sym->name, &expr->where);\n@@ -3138,6 +3140,15 @@ resolve_call (gfc_code *c)\n \t}\n     }\n \n+  /* If this ia a deferred TBP with an abstract interface\n+     (which may of course be referenced), c->expr1 will be set.  */\n+  if (csym && csym->attr.abstract && !c->expr1)\n+    {\n+      gfc_error (\"ABSTRACT INTERFACE '%s' must not be referenced at %L\",\n+\t\t csym->name, &c->loc);\n+      return FAILURE;\n+    }\n+\n   /* Subroutines without the RECURSIVE attribution are not allowed to\n    * call themselves.  */\n   if (csym && is_illegal_recursion (csym, gfc_current_ns))"}, {"sha": "9d16f915c5a4d20469476fe9592c306e1aba9338", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bae6273fbc016a8f055ee90baa824a21c285b6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bae6273fbc016a8f055ee90baa824a21c285b6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8bae6273fbc016a8f055ee90baa824a21c285b6a", "patch": "@@ -1,3 +1,9 @@\n+2009-11-05  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/41556\n+\tPR fortran/41873\n+\t* gfortran.dg/interface_abstract_4.f90: New test.\n+\n 2009-11-05  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* gcc.target/m68k/pr41302.c: Fix target triplet."}, {"sha": "50f101577e6785669324a697625b7063ec518359", "filename": "gcc/testsuite/gfortran.dg/interface_abstract_4.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bae6273fbc016a8f055ee90baa824a21c285b6a/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_abstract_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bae6273fbc016a8f055ee90baa824a21c285b6a/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_abstract_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_abstract_4.f90?ref=8bae6273fbc016a8f055ee90baa824a21c285b6a", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+!\n+! PR 41873: Bogus Error: ABSTRACT INTERFACE must not be referenced...\n+!\n+! Contributed by Harald Anlauf <anlauf@gmx.de>\n+\n+  implicit none\n+\n+  type, abstract :: abstype\n+  contains\n+    procedure(f), nopass, deferred :: f_bound\n+    procedure(s), nopass, deferred :: s_bound\n+  end type\n+\n+  abstract interface\n+    real function f ()\n+    end function\n+  end interface\n+\n+  abstract interface\n+    subroutine s\n+    end subroutine\n+  end interface\n+\n+contains\n+\n+  subroutine cg (c)\n+    class(abstype) :: c\n+    print *, f()             ! { dg-error \"must not be referenced\" }\n+    call s                   ! { dg-error \"must not be referenced\" }\n+    print *, c%f_bound ()\n+    call c%s_bound ()\n+  end subroutine\n+\n+end"}]}