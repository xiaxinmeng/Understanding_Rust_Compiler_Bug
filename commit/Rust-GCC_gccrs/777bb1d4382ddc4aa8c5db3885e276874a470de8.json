{"sha": "777bb1d4382ddc4aa8c5db3885e276874a470de8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc3YmIxZDQzODJkZGM0YWE4YzVkYjM4ODVlMjc2ODc0YTQ3MGRlOA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-08-26T23:14:07Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-08-26T23:14:07Z"}, "message": "StrictMath.java: Typo fix.\n\n\t* java/lang/StrictMath.java: Typo fix.\n\t* java/lang/Math.java: Typo fix.\n\n2003-08-26  Stephen Crawley  <crawley@dstc.edu.au>\n\n\t* java/lang/ThreadGroup.java (removeThread): null the 'group' field\n\tof the removed Thread.\n\n2003-08-26  Mark Wielaard  <mark@klomp.org>\n\n\tReported by David Holmes <dholmes@dltech.com.au>.\n\t* java/lang/InheritableThreadLocal.java (threadMap): Wrap inside\n\tCollections.synchronizedMap.\n\t* java/lang/ThreadLocal.java (valueMap): Likewise.\n\nFrom-SVN: r70828", "tree": {"sha": "e8da29583e38e3aa8a01bbb42b15fdc7e764bc52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8da29583e38e3aa8a01bbb42b15fdc7e764bc52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/777bb1d4382ddc4aa8c5db3885e276874a470de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777bb1d4382ddc4aa8c5db3885e276874a470de8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/777bb1d4382ddc4aa8c5db3885e276874a470de8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777bb1d4382ddc4aa8c5db3885e276874a470de8/comments", "author": null, "committer": null, "parents": [{"sha": "228e7b6256a6d161aa9d45a0319cf7128ae7ad87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/228e7b6256a6d161aa9d45a0319cf7128ae7ad87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/228e7b6256a6d161aa9d45a0319cf7128ae7ad87"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "c5f5066d868035834a2df9376a3d33ec589be4a2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777bb1d4382ddc4aa8c5db3885e276874a470de8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777bb1d4382ddc4aa8c5db3885e276874a470de8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=777bb1d4382ddc4aa8c5db3885e276874a470de8", "patch": "@@ -1,3 +1,20 @@\n+2003-08-26  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/StrictMath.java: Typo fix.\n+\t* java/lang/Math.java: Typo fix.\n+\n+2003-08-26  Stephen Crawley  <crawley@dstc.edu.au>\n+\n+\t* java/lang/ThreadGroup.java (removeThread): null the 'group' field\n+\tof the removed Thread.\n+\n+2003-08-26  Mark Wielaard  <mark@klomp.org>\n+\n+\tReported by David Holmes <dholmes@dltech.com.au>.\n+\t* java/lang/InheritableThreadLocal.java (threadMap): Wrap inside\n+\tCollections.synchronizedMap.\n+\t* java/lang/ThreadLocal.java (valueMap): Likewise.\n+\n 2003-08-26  Mark Wielaard  <mark@klomp.org>\n \n \t* java/security/acl/Acl.java: Fix broken p tag."}, {"sha": "5dfbe9a62308a54db7ce644679759b8fafbbed24", "filename": "libjava/java/lang/InheritableThreadLocal.java", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777bb1d4382ddc4aa8c5db3885e276874a470de8/libjava%2Fjava%2Flang%2FInheritableThreadLocal.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777bb1d4382ddc4aa8c5db3885e276874a470de8/libjava%2Fjava%2Flang%2FInheritableThreadLocal.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FInheritableThreadLocal.java?ref=777bb1d4382ddc4aa8c5db3885e276874a470de8", "patch": "@@ -1,5 +1,5 @@\n /* InheritableThreadLocal -- a ThreadLocal which inherits values across threads\n-   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,9 +37,11 @@\n \n package java.lang;\n \n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.ArrayList;\n+import java.util.Map;\n import java.util.WeakHashMap;\n \n /**\n@@ -67,7 +69,8 @@ public class InheritableThreadLocal extends ThreadLocal\n    * List can be collected, too. Maps to a list in case the user overrides\n    * equals.\n    */\n-  private static final WeakHashMap threadMap = new WeakHashMap();\n+  private static final Map threadMap\n+\t  = Collections.synchronizedMap(new WeakHashMap());\n \n   /**\n    * Creates a new InheritableThreadLocal that has no values associated\n@@ -77,7 +80,7 @@ public InheritableThreadLocal()\n   {\n     Thread currentThread = Thread.currentThread();\n     // Note that we don't have to synchronize, as only this thread will\n-    // ever modify the returned heritage.\n+    // ever modify the returned heritage and threadMap is a synchronizedMap.\n     List heritage = (List) threadMap.get(currentThread);\n     if (heritage == null)\n       {\n@@ -114,7 +117,7 @@ static void newChildThread(Thread childThread)\n     // The currentThread is the parent of the new thread.\n     Thread parentThread = Thread.currentThread();\n     // Note that we don't have to synchronize, as only this thread will\n-    // ever modify the returned heritage.\n+    // ever modify the returned heritage and threadMap is a synchronizedMap. \n     ArrayList heritage = (ArrayList) threadMap.get(parentThread);\n     if (heritage != null)\n       {"}, {"sha": "cb5f70b1cfbef427ff770f3f3b77437d4864b091", "filename": "libjava/java/lang/Math.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777bb1d4382ddc4aa8c5db3885e276874a470de8/libjava%2Fjava%2Flang%2FMath.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777bb1d4382ddc4aa8c5db3885e276874a470de8/libjava%2Fjava%2Flang%2FMath.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FMath.java?ref=777bb1d4382ddc4aa8c5db3885e276874a470de8", "patch": "@@ -1,5 +1,5 @@\n /* java.lang.Math -- common mathematical functions, native allowed\n-   Copyright (C) 1998, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -521,7 +521,7 @@ public static double max(double a, double b)\n    * double to <code>x / y</code> (ties go to the even n); for a zero\n    * remainder, the sign is that of <code>x</code>. If either argument is NaN,\n    * the first argument is infinite, or the second argument is zero, the result\n-   * is NaN; if x is finite but y is infinte, the result is x. This is\n+   * is NaN; if x is finite but y is infinite, the result is x. This is\n    * accurate within the limits of doubles.\n    *\n    * @param x the dividend (the top half)"}, {"sha": "bacc291faa5c116acd0ac0de269de427a52bc5d0", "filename": "libjava/java/lang/StrictMath.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777bb1d4382ddc4aa8c5db3885e276874a470de8/libjava%2Fjava%2Flang%2FStrictMath.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777bb1d4382ddc4aa8c5db3885e276874a470de8/libjava%2Fjava%2Flang%2FStrictMath.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FStrictMath.java?ref=777bb1d4382ddc4aa8c5db3885e276874a470de8", "patch": "@@ -1,5 +1,5 @@\n /* java.lang.StrictMath -- common mathematical functions, strict Java\n-   Copyright (C) 1998, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -1053,7 +1053,7 @@ else if (z <= -1075) // Detect underflow.\n    * double to <code>x / y</code> (ties go to the even n); for a zero\n    * remainder, the sign is that of <code>x</code>. If either argument is NaN,\n    * the first argument is infinite, or the second argument is zero, the result\n-   * is NaN; if x is finite but y is infinte, the result is x.\n+   * is NaN; if x is finite but y is infinite, the result is x.\n    *\n    * @param x the dividend (the top half)\n    * @param y the divisor (the bottom half)"}, {"sha": "b79c136dffe82c4772ecd701c4188c418ef015d1", "filename": "libjava/java/lang/ThreadGroup.java", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777bb1d4382ddc4aa8c5db3885e276874a470de8/libjava%2Fjava%2Flang%2FThreadGroup.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777bb1d4382ddc4aa8c5db3885e276874a470de8/libjava%2Fjava%2Flang%2FThreadGroup.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThreadGroup.java?ref=777bb1d4382ddc4aa8c5db3885e276874a470de8", "patch": "@@ -718,6 +718,7 @@ final synchronized void removeThread(Thread t)\n     if (groups == null)\n       return;\n     threads.remove(t);\n+    t.group = null;\n     // Daemon groups are automatically destroyed when all their threads die.\n     if (daemon_flag && groups.size() == 0 && threads.size() == 0)\n       {"}, {"sha": "972565949a8fbef975adec5b99cdb220727c9665", "filename": "libjava/java/lang/ThreadLocal.java", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777bb1d4382ddc4aa8c5db3885e276874a470de8/libjava%2Fjava%2Flang%2FThreadLocal.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777bb1d4382ddc4aa8c5db3885e276874a470de8/libjava%2Fjava%2Flang%2FThreadLocal.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThreadLocal.java?ref=777bb1d4382ddc4aa8c5db3885e276874a470de8", "patch": "@@ -1,5 +1,5 @@\n /* ThreadLocal -- a variable with a unique value per thread\n-   Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -37,6 +37,7 @@\n \n package java.lang;\n \n+import java.util.Collections;\n import java.util.Map;\n import java.util.WeakHashMap;\n \n@@ -101,7 +102,7 @@\n    * <code>set(Thread, Object)</code> and <code>get(Thread)</code> methods\n    * access it. Package visible for use by InheritableThreadLocal.\n    */\n-  final Map valueMap = new WeakHashMap();\n+  final Map valueMap = Collections.synchronizedMap(new WeakHashMap());\n \t\n   /**\n    * Creates a ThreadLocal object without associating any value to it yet.\n@@ -135,7 +136,7 @@ public Object get()\n   {\n     Thread currentThread = Thread.currentThread();\n     // Note that we don't have to synchronize, as only this thread will\n-    // ever modify the returned value.\n+    // ever modify the returned value and valueMap is a synchronizedMap.\n     Object value = valueMap.get(currentThread);\n     if (value == null)\n       {\n@@ -156,7 +157,7 @@ public Object get()\n   public void set(Object value)\n   {\n     // Note that we don't have to synchronize, as only this thread will\n-    // ever modify the returned value.\n+    // ever modify the returned value and valueMap is a synchronizedMap.\n     valueMap.put(Thread.currentThread(), value == null ? NULL : value);\n   }\n }"}]}