{"sha": "aaaa9efcb4baa0dc0146879297d281fd1830e9f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFhYTllZmNiNGJhYTBkYzAxNDY4NzkyOTdkMjgxZmQxODMwZTlmNQ==", "commit": {"author": {"name": "Jaydeep Patil", "email": "Jaydeep.Patil@imgtec.com", "date": "2014-06-05T10:45:55Z"}, "committer": {"name": "Andrew Bennett", "email": "abennett@gcc.gnu.org", "date": "2014-06-05T10:45:55Z"}, "message": "mips-cpus.def: Add definition for p5600.\n\n2014-06-05  Jaydeep Patil  <Jaydeep.Patil@imgtec.com>\n\t    Prachi Godbole  <Prachi.Godbole@imgtec.com>\n\n\t* config/mips/mips-cpus.def: Add definition for p5600.  Updated\n\tmips32r5 entry to use PROCESSOR_P5600.\n\t* config/mips/mips-tables.opt: Regenerate.\n\t* config/mips/mips-protos.h (mips_fmadd_bypass): Add prototype.\n\t* config/mips/mips.c (mips_fmadd_bypass): New function.\n\t(mips_rtx_cost_data): Add costs for p5600.\n\t(mips_issue_rate): Add support for p5600.\n\t(mips_multipass_dfa_lookahead): Likewise.\n\t* config/mips/mips.h (TUNE_P5600): New define.\n\t(TUNE_MACC_CHAINS): Add TUNE_P5600.\n\t(MIPS_ISA_LEVEL_SPEC): Map -march=p5600 to -mips32r5.\n\t* config/mips/mips.md: Include p5600.md.\n\t(processor): Add p5600.\n\t* config/mips/p5600.md: New file.\n\nCo-Authored-By: Prachi Godbole <prachi.godbole@imgtec.com>\n\nFrom-SVN: r211265", "tree": {"sha": "61cc9a768da0daaf26f33d3b7d817fee505af9cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61cc9a768da0daaf26f33d3b7d817fee505af9cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaaa9efcb4baa0dc0146879297d281fd1830e9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaaa9efcb4baa0dc0146879297d281fd1830e9f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaaa9efcb4baa0dc0146879297d281fd1830e9f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/comments", "author": {"login": "JaydeepIMG", "id": 17490180, "node_id": "MDQ6VXNlcjE3NDkwMTgw", "avatar_url": "https://avatars.githubusercontent.com/u/17490180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JaydeepIMG", "html_url": "https://github.com/JaydeepIMG", "followers_url": "https://api.github.com/users/JaydeepIMG/followers", "following_url": "https://api.github.com/users/JaydeepIMG/following{/other_user}", "gists_url": "https://api.github.com/users/JaydeepIMG/gists{/gist_id}", "starred_url": "https://api.github.com/users/JaydeepIMG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JaydeepIMG/subscriptions", "organizations_url": "https://api.github.com/users/JaydeepIMG/orgs", "repos_url": "https://api.github.com/users/JaydeepIMG/repos", "events_url": "https://api.github.com/users/JaydeepIMG/events{/privacy}", "received_events_url": "https://api.github.com/users/JaydeepIMG/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "edbb07490964faff304b02ca854fc49adea81e54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edbb07490964faff304b02ca854fc49adea81e54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edbb07490964faff304b02ca854fc49adea81e54"}], "stats": {"total": 314, "additions": 295, "deletions": 19}, "files": [{"sha": "be92e0f5c0952e9a91077c19f95cbd6426fb3a52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaaa9efcb4baa0dc0146879297d281fd1830e9f5", "patch": "@@ -1,3 +1,21 @@\n+2014-06-05  Jaydeep Patil  <Jaydeep.Patil@imgtec.com>\n+\t    Prachi Godbole  <Prachi.Godbole@imgtec.com>\n+\n+\t* config/mips/mips-cpus.def: Add definition for p5600.  Updated\n+\tmips32r5 entry to use PROCESSOR_P5600.\n+\t* config/mips/mips-tables.opt: Regenerate.\n+\t* config/mips/mips-protos.h (mips_fmadd_bypass): Add prototype.\n+\t* config/mips/mips.c (mips_fmadd_bypass): New function.\n+\t(mips_rtx_cost_data): Add costs for p5600.\n+\t(mips_issue_rate): Add support for p5600.\n+\t(mips_multipass_dfa_lookahead): Likewise.\n+\t* config/mips/mips.h (TUNE_P5600): New define.\n+\t(TUNE_MACC_CHAINS): Add TUNE_P5600.\n+\t(MIPS_ISA_LEVEL_SPEC): Map -march=p5600 to -mips32r5.\n+\t* config/mips/mips.md: Include p5600.md.\n+\t(processor): Add p5600.\n+\t* config/mips/p5600.md: New file.\n+\n 2014-06-05  Evgeny Stupachenko  <evstupac@gmail.com>\n \n \t* config/i386/sse.md (*ssse3_palignr<mode>_perm): New."}, {"sha": "d5528d300a9172a5b7a43cef8452eab621fd85d3", "filename": "gcc/config/mips/mips-cpus.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fconfig%2Fmips%2Fmips-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fconfig%2Fmips%2Fmips-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-cpus.def?ref=aaaa9efcb4baa0dc0146879297d281fd1830e9f5", "patch": "@@ -49,7 +49,7 @@ MIPS_CPU (\"mips32r2\", PROCESSOR_74KF2_1, 33, PTF_AVOID_BRANCHLIKELY)\n    for this yet, so in the short term we will use the same processor entry \n    as mips32r2.  */\n MIPS_CPU (\"mips32r3\", PROCESSOR_M4K, 34, PTF_AVOID_BRANCHLIKELY)\n-MIPS_CPU (\"mips32r5\", PROCESSOR_74KF2_1, 36, PTF_AVOID_BRANCHLIKELY)\n+MIPS_CPU (\"mips32r5\", PROCESSOR_P5600, 36, PTF_AVOID_BRANCHLIKELY)\n MIPS_CPU (\"mips64\", PROCESSOR_5KC, 64, PTF_AVOID_BRANCHLIKELY)\n /* ??? For now just tune the generic MIPS64r2 and above for 5KC as well.   */\n MIPS_CPU (\"mips64r2\", PROCESSOR_5KC, 65, PTF_AVOID_BRANCHLIKELY)\n@@ -145,6 +145,9 @@ MIPS_CPU (\"1004kf2_1\", PROCESSOR_24KF2_1, 33, 0)\n MIPS_CPU (\"1004kf\", PROCESSOR_24KF2_1, 33, 0)\n MIPS_CPU (\"1004kf1_1\", PROCESSOR_24KF1_1, 33, 0)\n \n+/* MIPS32 Release 5 processors.  */\n+MIPS_CPU (\"p5600\", PROCESSOR_P5600, 36, PTF_AVOID_BRANCHLIKELY)\n+\n /* MIPS64 processors.  */\n MIPS_CPU (\"5kc\", PROCESSOR_5KC, 64, 0)\n MIPS_CPU (\"5kf\", PROCESSOR_5KF, 64, 0)"}, {"sha": "0b8125a3e21c1d967af001d4eb703f0092ae5c9e", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=aaaa9efcb4baa0dc0146879297d281fd1830e9f5", "patch": "@@ -315,6 +315,7 @@ extern bool mips16e_save_restore_pattern_p (rtx, HOST_WIDE_INT,\n extern bool mask_low_and_shift_p (enum machine_mode, rtx, rtx, int);\n extern int mask_low_and_shift_len (enum machine_mode, rtx, rtx);\n extern bool and_operands_ok (enum machine_mode, rtx, rtx);\n+extern bool mips_fmadd_bypass (rtx, rtx);\n \n union mips_gen_fn_ptrs\n {"}, {"sha": "5791b413c45ba75c427bd7f51e2f040f66b66356", "filename": "gcc/config/mips/mips-tables.opt", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fconfig%2Fmips%2Fmips-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fconfig%2Fmips%2Fmips-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-tables.opt?ref=aaaa9efcb4baa0dc0146879297d281fd1830e9f5", "patch": "@@ -619,50 +619,53 @@ EnumValue\n Enum(mips_arch_opt_value) String(r1004kf1_1) Value(82)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(5kc) Value(83) Canonical\n+Enum(mips_arch_opt_value) String(p5600) Value(83) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r5kc) Value(83)\n+Enum(mips_arch_opt_value) String(5kc) Value(84) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(5kf) Value(84) Canonical\n+Enum(mips_arch_opt_value) String(r5kc) Value(84)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r5kf) Value(84)\n+Enum(mips_arch_opt_value) String(5kf) Value(85) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(20kc) Value(85) Canonical\n+Enum(mips_arch_opt_value) String(r5kf) Value(85)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(r20kc) Value(85)\n+Enum(mips_arch_opt_value) String(20kc) Value(86) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(sb1) Value(86) Canonical\n+Enum(mips_arch_opt_value) String(r20kc) Value(86)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(sb1a) Value(87) Canonical\n+Enum(mips_arch_opt_value) String(sb1) Value(87) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(sr71000) Value(88) Canonical\n+Enum(mips_arch_opt_value) String(sb1a) Value(88) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(sr71k) Value(88)\n+Enum(mips_arch_opt_value) String(sr71000) Value(89) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(xlr) Value(89) Canonical\n+Enum(mips_arch_opt_value) String(sr71k) Value(89)\n \n EnumValue\n-Enum(mips_arch_opt_value) String(loongson3a) Value(90) Canonical\n+Enum(mips_arch_opt_value) String(xlr) Value(90) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(octeon) Value(91) Canonical\n+Enum(mips_arch_opt_value) String(loongson3a) Value(91) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(octeon+) Value(92) Canonical\n+Enum(mips_arch_opt_value) String(octeon) Value(92) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(octeon2) Value(93) Canonical\n+Enum(mips_arch_opt_value) String(octeon+) Value(93) Canonical\n \n EnumValue\n-Enum(mips_arch_opt_value) String(xlp) Value(94) Canonical\n+Enum(mips_arch_opt_value) String(octeon2) Value(94) Canonical\n+\n+EnumValue\n+Enum(mips_arch_opt_value) String(xlp) Value(95) Canonical\n "}, {"sha": "71fc802ea86f777b226a92502b38c5c26bc1678b", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=aaaa9efcb4baa0dc0146879297d281fd1830e9f5", "patch": "@@ -1180,6 +1180,19 @@ static const struct mips_rtx_cost_data\n     COSTS_N_INSNS (68),           /* int_div_di */\n \t\t     1,           /* branch_cost */\n \t\t     4            /* memory_latency */\n+  },\n+  { /* P5600 */\n+    COSTS_N_INSNS (4),            /* fp_add */\n+    COSTS_N_INSNS (5),            /* fp_mult_sf */\n+    COSTS_N_INSNS (5),            /* fp_mult_df */\n+    COSTS_N_INSNS (17),           /* fp_div_sf */\n+    COSTS_N_INSNS (17),           /* fp_div_df */\n+    COSTS_N_INSNS (5),            /* int_mult_si */\n+    COSTS_N_INSNS (5),            /* int_mult_di */\n+    COSTS_N_INSNS (8),            /* int_div_si */\n+    COSTS_N_INSNS (8),            /* int_div_di */\n+\t\t    2,            /* branch_cost */\n+\t\t   10             /* memory_latency */\n   }\n };\n \f\n@@ -13073,6 +13086,31 @@ mips_output_division (const char *division, rtx *operands)\n   return s;\n }\n \f\n+/* Return true if destination of IN_INSN is used as add source in\n+   OUT_INSN. Both IN_INSN and OUT_INSN are of type fmadd. Example:\n+   madd.s dst, x, y, z\n+   madd.s a, dst, b, c  */\n+\n+bool\n+mips_fmadd_bypass (rtx out_insn, rtx in_insn)\n+{\n+  int dst_reg, src_reg;\n+  \n+  gcc_assert (get_attr_type (in_insn) == TYPE_FMADD);\n+  gcc_assert (get_attr_type (out_insn) == TYPE_FMADD);\n+\n+  extract_insn (in_insn);\n+  dst_reg = REG_P (recog_data.operand[0]);\n+\n+  extract_insn (out_insn);\n+  src_reg = REG_P (recog_data.operand[1]);\n+\n+  if (dst_reg == src_reg)\n+    return true;\n+\n+  return false;\n+}\n+\n /* Return true if IN_INSN is a multiply-add or multiply-subtract\n    instruction and if OUT_INSN assigns to the accumulator operand.  */\n \n@@ -13208,6 +13246,7 @@ mips_issue_rate (void)\n     case PROCESSOR_LOONGSON_2E:\n     case PROCESSOR_LOONGSON_2F:\n     case PROCESSOR_LOONGSON_3A:\n+    case PROCESSOR_P5600:\n       return 4;\n \n     case PROCESSOR_XLP:\n@@ -13343,6 +13382,9 @@ mips_multipass_dfa_lookahead (void)\n   if (TUNE_OCTEON)\n     return 2;\n \n+  if (TUNE_P5600)\n+    return 4;\n+\n   return 0;\n }\n \f"}, {"sha": "38eea44c407e62c419939cbcef6205d31ce6f5df", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=aaaa9efcb4baa0dc0146879297d281fd1830e9f5", "patch": "@@ -264,6 +264,7 @@ struct mips_cpu_info {\n \t\t\t\t     || mips_tune == PROCESSOR_OCTEON2)\n #define TUNE_SB1                    (mips_tune == PROCESSOR_SB1\t\t\\\n \t\t\t\t     || mips_tune == PROCESSOR_SB1A)\n+#define TUNE_P5600                  (mips_tune == PROCESSOR_P5600)\n \n /* Whether vector modes and intrinsics for ST Microelectronics\n    Loongson-2E/2F processors should be enabled.  In o32 pairs of\n@@ -306,7 +307,8 @@ struct mips_cpu_info {\n #define TUNE_MACC_CHAINS\t    (TUNE_MIPS5500\t\t\\\n \t\t\t\t     || TUNE_MIPS4120\t\t\\\n \t\t\t\t     || TUNE_MIPS4130\t\t\\\n-\t\t\t\t     || TUNE_24K)\n+\t\t\t\t     || TUNE_24K\t\t\\\n+\t\t\t\t     || TUNE_P5600)\n \n #define TARGET_OLDABI\t\t    (mips_abi == ABI_32 || mips_abi == ABI_O64)\n #define TARGET_NEWABI\t\t    (mips_abi == ABI_N32 || mips_abi == ABI_64)\n@@ -724,7 +726,7 @@ struct mips_cpu_info {\n      %{march=mips32r2|march=m4k|march=4ke*|march=4ksd|march=24k* \\\n        |march=34k*|march=74k*|march=m14k*|march=1004k*: -mips32r2} \\\n      %{march=mips32r3: -mips32r3} \\\n-     %{march=mips32r5: -mips32r5} \\\n+     %{march=mips32r5|march=p5600: -mips32r5} \\\n      %{march=mips64|march=5k*|march=20k*|march=sb1*|march=sr71000 \\\n        |march=xlr: -mips64} \\\n      %{march=mips64r2|march=loongson3a|march=octeon|march=xlp: -mips64r2} \\"}, {"sha": "9912ddcb63a30fcea2db2d4f1b85ca19134b6752", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=aaaa9efcb4baa0dc0146879297d281fd1830e9f5", "patch": "@@ -65,6 +65,7 @@\n   sr71000\n   xlr\n   xlp\n+  p5600\n ])\n \n (define_c_enum \"unspec\" [\n@@ -1050,6 +1051,7 @@\n   (eq_attr \"type\" \"ghost\")\n   \"nothing\")\n \n+(include \"p5600.md\")\n (include \"4k.md\")\n (include \"5k.md\")\n (include \"20kc.md\")"}, {"sha": "ffb9a0c796c2a5bff3e3a2a6cceeb05ec68f6028", "filename": "gcc/config/mips/p5600.md", "status": "added", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fconfig%2Fmips%2Fp5600.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fconfig%2Fmips%2Fp5600.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fp5600.md?ref=aaaa9efcb4baa0dc0146879297d281fd1830e9f5", "patch": "@@ -0,0 +1,204 @@\n+;; DFA-based pipeline description for P5600.\n+;;\n+;; Copyright (C) 2007-2014 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+(define_automaton \"p5600_agen_pipe, p5600_alu_pipe, p5600_fpu_pipe\")\n+\n+;; The address generation queue (AGQ) has AL2, CTISTD and LDSTA pipes\n+(define_cpu_unit \"p5600_agq, p5600_al2, p5600_ctistd, p5600_ldsta,\n+\t\t  p5600_gpdiv\" \"p5600_agen_pipe\")\n+\n+;; The arithmetic-logic-unit queue (ALQ) has ALU pipe\n+(define_cpu_unit \"p5600_alq, p5600_alu\" \"p5600_alu_pipe\")\n+\n+;; The floating-point-unit queue (FPQ) has short and long pipes\n+(define_cpu_unit \"p5600_fpu_short, p5600_fpu_long\" \"p5600_fpu_pipe\")\n+\n+;; Short FPU pipeline\n+(define_cpu_unit \"p5600_fpu_store\" \"p5600_fpu_pipe\")\n+\n+;; Long FPU pipeline\n+(define_cpu_unit \"p5600_fpu_apu\" \"p5600_fpu_pipe\")\n+\n+(define_reservation \"p5600_agq_al2\" \"p5600_agq, p5600_al2\")\n+(define_reservation \"p5600_agq_ctistd\" \"p5600_agq, p5600_ctistd\")\n+(define_reservation \"p5600_agq_ldsta\" \"p5600_agq, p5600_ldsta\")\n+(define_reservation \"p5600_alq_alu\" \"p5600_alq, p5600_alu\")\n+\n+;;\n+;; FPU pipe\n+;;\n+\n+;; fadd, fsub\n+(define_insn_reservation \"p5600_fpu_fadd\" 4\n+  (eq_attr \"type\" \"fadd,fabs,fneg\")\n+  \"p5600_fpu_long, p5600_fpu_apu\")\n+\n+;; fabs, fneg, fcmp\n+(define_insn_reservation \"p5600_fpu_fabs\" 2\n+  (eq_attr \"type\" \"fabs,fneg,fcmp,fmove\")\n+  \"p5600_fpu_short, p5600_fpu_apu\")\n+\n+;; fload\n+(define_insn_reservation \"p5600_fpu_fload\" 8\n+  (eq_attr \"type\" \"fpload,fpidxload\")\n+  \"p5600_fpu_long, p5600_fpu_apu\")\n+\n+;; fstore\n+(define_insn_reservation \"p5600_fpu_fstore\" 1\n+  (eq_attr \"type\" \"fpstore,fpidxstore\")\n+  \"p5600_fpu_short, p5600_fpu_apu\")\n+\n+;; fmadd\n+(define_insn_reservation \"p5600_fpu_fmadd\" 9\n+  (eq_attr \"type\" \"fmadd\")\n+  \"p5600_fpu_long, p5600_fpu_apu\")\n+\n+;; fmul\n+(define_insn_reservation \"p5600_fpu_fmul\" 5\n+  (eq_attr \"type\" \"fmul\")\n+  \"p5600_fpu_long, p5600_fpu_apu\")\n+\n+;; fdiv, fsqrt\n+(define_insn_reservation \"p5600_fpu_div\" 17\n+  (eq_attr \"type\" \"fdiv,frdiv,fsqrt,frsqrt\")\n+  \"p5600_fpu_long, p5600_fpu_apu*17\")\n+\n+;; fcvt\n+(define_insn_reservation \"p5600_fpu_fcvt\" 4\n+  (eq_attr \"type\" \"fcvt\")\n+  \"p5600_fpu_long, p5600_fpu_apu\")\n+\n+;; mtc\n+(define_insn_reservation \"p5600_fpu_fmtc\" 7\n+  (eq_attr \"type\" \"mtc\")\n+  \"p5600_fpu_short, p5600_fpu_store\")\n+\n+;; mfc\n+(define_insn_reservation \"p5600_fpu_fmfc\" 4\n+  (eq_attr \"type\" \"mfc\")\n+  \"p5600_fpu_short, p5600_fpu_store\")\n+\n+;; madd/msub feeding into the add source\n+;; madd.fmt dst, x, y, z -> madd.fmt a, dst, b, c 5 cycles\n+(define_bypass 5 \"p5600_fpu_fmadd\" \"p5600_fpu_fmadd\" \"mips_fmadd_bypass\")\n+\n+;;\n+;; Integer pipe\n+;;\n+\n+;; and\n+(define_insn_reservation \"p5600_int_and\" 1\n+  (eq_attr \"move_type\" \"logical\")\n+  \"p5600_alq_alu\")\n+\n+;; lui\n+(define_insn_reservation \"p5600_int_lui\" 1\n+  (eq_attr \"move_type\" \"const\")\n+  \"p5600_alq_alu\")\n+\n+;; Load lb, lbu, lh, lhu, lq, lw, lw_i2f, lwxs\n+(define_insn_reservation \"p5600_int_load\" 4\n+  (eq_attr \"move_type\" \"load\")\n+  \"p5600_agq_ldsta\")\n+\n+;; store\n+(define_insn_reservation \"p5600_int_store\" 3\n+  (eq_attr \"move_type\" \"store\")\n+  \"p5600_agq_ldsta\")\n+\n+;; andi, sll, srl, seb, seh\n+(define_insn_reservation \"p5600_int_arith_1\" 1\n+  (eq_attr \"move_type\" \"andi,sll0,signext\")\n+  \"p5600_agq_al2 | p5600_alq_alu\")\n+\n+;; addi, addiu, ori, xori, add, addu\n+(define_insn_reservation \"p5600_int_arith_2\" 1\n+  (eq_attr \"alu_type\" \"add,or,xor\")\n+  \"p5600_agq_al2 | p5600_alq_alu\")\n+\n+;; nor, sub\n+(define_insn_reservation \"p5600_int_arith_3\" 1\n+  (eq_attr \"alu_type\" \"nor,sub\")\n+  \"p5600_alq_alu\")\n+\n+;; srl, sra, rotr, slt, sllv, srlv\n+(define_insn_reservation \"p5600_int_arith_4\" 1\n+  (eq_attr \"type\" \"shift,slt,move\")\n+  \"p5600_agq_al2 | p5600_alq_alu\")\n+\n+;; nop\n+(define_insn_reservation \"p5600_int_nop\" 0\n+  (eq_attr \"type\" \"nop\")\n+  \"p5600_agq_al2\")\n+\n+;; clo, clz\n+(define_insn_reservation \"p5600_int_countbits\" 1\n+  (eq_attr \"type\" \"clz\")\n+  \"p5600_agq_al2\")\n+\n+;; Conditional moves\n+(define_insn_reservation \"p5600_int_condmove\" 1\n+  (eq_attr \"type\" \"condmove\")\n+  \"p5600_agq_al2\")\n+\n+;; madd, msub\n+(define_insn_reservation \"p5600_dsp_mac\" 5\n+  (eq_attr \"type\" \"imadd\")\n+  \"p5600_agq_al2\")\n+\n+;; mfhi/lo\n+(define_insn_reservation \"p5600_dsp_mfhilo\" 1\n+  (eq_attr \"type\" \"mfhi,mflo\")\n+  \"p5600_agq_al2\")\n+\n+;; mthi/lo\n+(define_insn_reservation \"p5600_dsp_mthilo\" 5\n+  (eq_attr \"type\" \"mthi,mtlo\")\n+  \"p5600_agq_al2\")\n+\n+;; mult, multu, mul\n+(define_insn_reservation \"p5600_dsp_mult\" 5\n+  (eq_attr \"type\" \"imul3,imul\")\n+  \"p5600_agq_al2\")\n+\n+;; branch and jump\n+(define_insn_reservation \"p5600_int_branch\" 1\n+  (eq_attr \"type\" \"branch,jump\")\n+  \"p5600_agq_ctistd\")\n+\n+;; prefetch\n+(define_insn_reservation \"p5600_int_prefetch\" 3\n+  (eq_attr \"type\" \"prefetch,prefetchx\")\n+  \"p5600_agq_ldsta\")\n+\n+;; divide\n+(define_insn_reservation \"p5600_int_div\" 8\n+  (eq_attr \"type\" \"idiv\")\n+  \"p5600_agq_al2+p5600_gpdiv*8\")\n+\n+;; arith\n+(define_insn_reservation \"p5600_int_arith_5\" 2\n+  (eq_attr \"type\" \"arith\")\n+  \"p5600_agq_al2\")\n+\n+;; call\n+(define_insn_reservation \"p5600_int_call\" 2\n+  (eq_attr \"jal\" \"indirect,direct\")\n+  \"p5600_agq_ctistd\")"}, {"sha": "76d8a2fb597dfb564e337c0311176a16c9e73452", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaa9efcb4baa0dc0146879297d281fd1830e9f5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=aaaa9efcb4baa0dc0146879297d281fd1830e9f5", "patch": "@@ -17209,6 +17209,7 @@ The processor names are:\n @samp{m14k}, @samp{m14kc}, @samp{m14ke}, @samp{m14kec},\n @samp{octeon}, @samp{octeon+}, @samp{octeon2},\n @samp{orion},\n+@samp{p5600},\n @samp{r2000}, @samp{r3000}, @samp{r3900}, @samp{r4000}, @samp{r4400},\n @samp{r4600}, @samp{r4650}, @samp{r4700}, @samp{r6000}, @samp{r8000},\n @samp{rm7000}, @samp{rm9000},"}]}