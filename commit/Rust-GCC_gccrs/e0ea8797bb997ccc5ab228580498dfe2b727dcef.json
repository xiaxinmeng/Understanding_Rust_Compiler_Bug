{"sha": "e0ea8797bb997ccc5ab228580498dfe2b727dcef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBlYTg3OTdiYjk5N2NjYzVhYjIyODU4MDQ5OGRmZTJiNzI3ZGNlZg==", "commit": {"author": {"name": "Andrew Hsieh", "email": "andrewhsieh@google.com", "date": "2013-04-15T10:03:48Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-04-15T10:03:48Z"}, "message": "i386.opt: New option mstack-protector-guard=.\n\n\t* config/i386/i386.opt: New option mstack-protector-guard=.\n\t* config/i386/i386-opts.h: Add enum stack_protector_guard.\n\t* config/i386/i386.h: Define TARGET_SSP_GLOBAL_GUARD and\n\tTARGET_SSP_TLS_GUARD.\n\t* config/i386/i386.c (ix86_option_override_internal): Set\n\tix86_stack_protector_guard.\n\t* config/i386/i386.md (stack_protect_set): Enable for\n\tTARGET_SSP_TLS_GUARD only.\n\t(stack_protect_set_<mode>): Ditto.\n\t(stack_protect_test): Ditto.\n\t(stack_protect_test_<mode>): Ditto.\n\t* doc/invoke.texi (i386 Option): Document.\n\nFrom-SVN: r197963", "tree": {"sha": "ad462b31e486f9859c8d9438bf69a6ce4b33cb6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad462b31e486f9859c8d9438bf69a6ce4b33cb6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0ea8797bb997ccc5ab228580498dfe2b727dcef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ea8797bb997ccc5ab228580498dfe2b727dcef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0ea8797bb997ccc5ab228580498dfe2b727dcef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ea8797bb997ccc5ab228580498dfe2b727dcef/comments", "author": null, "committer": null, "parents": [{"sha": "adede54ce9d680ab7a0499b76a7f22d3a78d79b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adede54ce9d680ab7a0499b76a7f22d3a78d79b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adede54ce9d680ab7a0499b76a7f22d3a78d79b8"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "8ad6eb8af5bb5df383fc75da4a8b2cdf34293fbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ea8797bb997ccc5ab228580498dfe2b727dcef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ea8797bb997ccc5ab228580498dfe2b727dcef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0ea8797bb997ccc5ab228580498dfe2b727dcef", "patch": "@@ -1,3 +1,18 @@\n+2013-04-15  Andrew Hsieh  <andrewhsieh.google.com>\n+\n+\t* config/i386/i386.opt: New option mstack-protector-guard=.\n+\t* config/i386/i386-opts.h: Add enum stack_protector_guard.\n+\t* config/i386/i386.h: Define TARGET_SSP_GLOBAL_GUARD and\n+\tTARGET_SSP_TLS_GUARD.\n+\t* config/i386/i386.c (ix86_option_override_internal): Set\n+\tix86_stack_protector_guard.\n+\t* config/i386/i386.md (stack_protect_set): Enable for\n+\tTARGET_SSP_TLS_GUARD only.\n+\t(stack_protect_set_<mode>): Ditto.\n+\t(stack_protect_test): Ditto.\n+\t(stack_protect_test_<mode>): Ditto.\n+\t* doc/invoke.texi (i386 Option): Document.\n+\n 2013-04-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/56890"}, {"sha": "61f04ced53bdab88ac72b07a658bbb0104e72b54", "filename": "gcc/config/i386/i386-opts.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ea8797bb997ccc5ab228580498dfe2b727dcef/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ea8797bb997ccc5ab228580498dfe2b727dcef/gcc%2Fconfig%2Fi386%2Fi386-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-opts.h?ref=e0ea8797bb997ccc5ab228580498dfe2b727dcef", "patch": "@@ -85,4 +85,9 @@ enum ix86_veclibabi {\n   ix86_veclibabi_type_acml\n };\n \n+enum stack_protector_guard {\n+  SSP_TLS,      /* per-thread canary in TLS block */\n+  SSP_GLOBAL    /* global canary */\n+};\n+\n #endif"}, {"sha": "940f388016cf7558745f1677a6eb38b16d21cc00", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ea8797bb997ccc5ab228580498dfe2b727dcef/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ea8797bb997ccc5ab228580498dfe2b727dcef/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e0ea8797bb997ccc5ab228580498dfe2b727dcef", "patch": "@@ -3922,6 +3922,10 @@ ix86_option_override_internal (bool main_args_p)\n   if (main_args_p)\n     target_option_default_node = target_option_current_node\n       = build_target_option_node ();\n+\n+  /* Handle stack protector */\n+  if (!global_options_set.x_ix86_stack_protector_guard)\n+    ix86_stack_protector_guard = TARGET_HAS_BIONIC ? SSP_GLOBAL : SSP_TLS;\n }\n \n /* Implement the TARGET_OPTION_OVERRIDE hook.  */"}, {"sha": "037ec3e0dec827f74f7c636d6224572c6739c231", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ea8797bb997ccc5ab228580498dfe2b727dcef/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ea8797bb997ccc5ab228580498dfe2b727dcef/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e0ea8797bb997ccc5ab228580498dfe2b727dcef", "patch": "@@ -486,6 +486,9 @@ extern unsigned char x86_prefetch_sse;\n #define TARGET_TLS_DIRECT_SEG_REFS_DEFAULT 0\n #endif\n \n+#define TARGET_SSP_GLOBAL_GUARD (ix86_stack_protector_guard == SSP_GLOBAL)\n+#define TARGET_SSP_TLS_GUARD    (ix86_stack_protector_guard == SSP_TLS)\n+\n /* Fence to use after loop using storent.  */\n \n extern tree x86_mfence;"}, {"sha": "27e33c13780748ed27c45ad27841e8c85d0b33bf", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ea8797bb997ccc5ab228580498dfe2b727dcef/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ea8797bb997ccc5ab228580498dfe2b727dcef/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e0ea8797bb997ccc5ab228580498dfe2b727dcef", "patch": "@@ -17058,7 +17058,7 @@\n (define_expand \"stack_protect_set\"\n   [(match_operand 0 \"memory_operand\")\n    (match_operand 1 \"memory_operand\")]\n-  \"!TARGET_HAS_BIONIC\"\n+  \"TARGET_SSP_TLS_GUARD\"\n {\n   rtx (*insn)(rtx, rtx);\n \n@@ -17083,7 +17083,7 @@\n \t\t    UNSPEC_SP_SET))\n    (set (match_scratch:PTR 2 \"=&r\") (const_int 0))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_HAS_BIONIC\"\n+  \"TARGET_SSP_TLS_GUARD\"\n   \"mov{<imodesuffix>}\\t{%1, %2|%2, %1}\\;mov{<imodesuffix>}\\t{%2, %0|%0, %2}\\;xor{l}\\t%k2, %k2\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -17101,7 +17101,7 @@\n   [(match_operand 0 \"memory_operand\")\n    (match_operand 1 \"memory_operand\")\n    (match_operand 2)]\n-  \"!TARGET_HAS_BIONIC\"\n+  \"TARGET_SSP_TLS_GUARD\"\n {\n   rtx flags = gen_rtx_REG (CCZmode, FLAGS_REG);\n \n@@ -17131,7 +17131,7 @@\n \t\t     (match_operand:PTR 2 \"memory_operand\" \"m\")]\n \t\t    UNSPEC_SP_TEST))\n    (clobber (match_scratch:PTR 3 \"=&r\"))]\n-  \"!TARGET_HAS_BIONIC\"\n+  \"TARGET_SSP_TLS_GUARD\"\n   \"mov{<imodesuffix>}\\t{%1, %3|%3, %1}\\;xor{<imodesuffix>}\\t{%2, %3|%3, %2}\"\n   [(set_attr \"type\" \"multi\")])\n "}, {"sha": "f5ad69e26c2642095a374389fefe44416230c11c", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ea8797bb997ccc5ab228580498dfe2b727dcef/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ea8797bb997ccc5ab228580498dfe2b727dcef/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=e0ea8797bb997ccc5ab228580498dfe2b727dcef", "patch": "@@ -626,3 +626,17 @@ Split 32-byte AVX unaligned store\n mrtm\n Target Report Mask(ISA_RTM) Var(ix86_isa_flags) Save\n Support RTM built-in functions and code generation\n+\n+mstack-protector-guard=\n+Target RejectNegative Joined Enum(stack_protector_guard) Var(ix86_stack_protector_guard) Init(SSP_TLS)\n+Use given stack-protector guard\n+\n+Enum\n+Name(stack_protector_guard) Type(enum stack_protector_guard)\n+Known stack protector guard (for use with the -mstack-protector-guard= option):\n+\n+EnumValue\n+Enum(stack_protector_guard) String(tls) Value(SSP_TLS)\n+\n+EnumValue\n+Enum(stack_protector_guard) String(global) Value(SSP_GLOBAL)"}, {"sha": "e136c9d19f9f573e121b2c5183cbf890ef27bcc0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ea8797bb997ccc5ab228580498dfe2b727dcef/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ea8797bb997ccc5ab228580498dfe2b727dcef/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e0ea8797bb997ccc5ab228580498dfe2b727dcef", "patch": "@@ -657,7 +657,8 @@ Objective-C and Objective-C++ Dialects}.\n -mcmodel=@var{code-model} -mabi=@var{name} -maddress-mode=@var{mode} @gol\n -m32 -m64 -mx32 -mlarge-data-threshold=@var{num} @gol\n -msse2avx -mfentry -m8bit-idiv @gol\n--mavx256-split-unaligned-load -mavx256-split-unaligned-store}\n+-mavx256-split-unaligned-load -mavx256-split-unaligned-store @gol\n+-mstack-protector-guard=@var{guard}}\n \n @emph{i386 and x86-64 Windows Options}\n @gccoptlist{-mconsole -mcygwin -mno-cygwin -mdll @gol\n@@ -14592,6 +14593,13 @@ to 255, 8-bit unsigned integer divide is used instead of\n @opindex avx256-split-unaligned-store\n Split 32-byte AVX unaligned load and store.\n \n+@item -mstack-protector-guard=@var{guard}\n+@opindex mstack-protector-guard=@var{guard}\n+Generate stack protection code using canary at @var{guard}.  Supported\n+locations are @samp{global} or @samp{tls} per thread at %gs:20 (the default).\n+This option has effect only when @option{-fstack-protector}\n+or @option{-fstack-protector-all} is also specified.\n+\n @end table\n \n These @samp{-m} switches are supported in addition to the above"}]}