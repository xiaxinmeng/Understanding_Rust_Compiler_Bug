{"sha": "b5796814d09a8c25fe6dee9d154079c0e223ae35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU3OTY4MTRkMDlhOGMyNWZlNmRlZTlkMTU0MDc5YzBlMjIzYWUzNQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-08-24T20:34:34Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-08-24T20:34:34Z"}, "message": "howto.html: Describe implementation of insertion with hints.\n\n2001-08-24  Phil Edwards  <pme@sources.redhat.com>\n\n\t* docs/html/23_containers/howto.html:  Describe implementation of\n\tinsertion with hints.\n\nFrom-SVN: r45161", "tree": {"sha": "e8547a0ef19157abfe78bcb2149815a4c772e0fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8547a0ef19157abfe78bcb2149815a4c772e0fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5796814d09a8c25fe6dee9d154079c0e223ae35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5796814d09a8c25fe6dee9d154079c0e223ae35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5796814d09a8c25fe6dee9d154079c0e223ae35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5796814d09a8c25fe6dee9d154079c0e223ae35/comments", "author": null, "committer": null, "parents": [{"sha": "bfa73213752e07fc3a6000551499fde3575d0fd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfa73213752e07fc3a6000551499fde3575d0fd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfa73213752e07fc3a6000551499fde3575d0fd1"}], "stats": {"total": 87, "additions": 83, "deletions": 4}, "files": [{"sha": "f69d66207b67f8c6c6d0f00d8c052227c341b6a1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5796814d09a8c25fe6dee9d154079c0e223ae35/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5796814d09a8c25fe6dee9d154079c0e223ae35/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b5796814d09a8c25fe6dee9d154079c0e223ae35", "patch": "@@ -1,3 +1,8 @@\n+2001-08-24  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* docs/html/23_containers/howto.html:  Describe implementation of\n+\tinsertion with hints.\n+\n 2001-08-24  Kenny Simpson  <kenny.simpson@gs.com>\n \n \tlibstdc++/3740"}, {"sha": "03ba35dd2a34f668e28946c072bda71376ed52f8", "filename": "libstdc++-v3/docs/html/23_containers/howto.html", "status": "modified", "additions": 78, "deletions": 4, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5796814d09a8c25fe6dee9d154079c0e223ae35/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5796814d09a8c25fe6dee9d154079c0e223ae35/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F23_containers%2Fhowto.html?ref=b5796814d09a8c25fe6dee9d154079c0e223ae35", "patch": "@@ -8,7 +8,7 @@\n    <META NAME=\"GENERATOR\" CONTENT=\"vi and eight fingers\">\n    <TITLE>libstdc++-v3 HOWTO:  Chapter 23</TITLE>\n <LINK REL=StyleSheet HREF=\"../lib3styles.css\">\n-<!-- $Id: howto.html,v 1.5 2001/05/31 02:45:02 ljrittle Exp $ -->\n+<!-- $Id: howto.html,v 1.6 2001/06/08 03:53:35 ljrittle Exp $ -->\n </HEAD>\n <BODY>\n \n@@ -25,6 +25,7 @@ <H1>Contents</H1>\n    <LI><A HREF=\"#1\">Making code unaware of the container/array difference</A>\n    <LI><A HREF=\"#2\">Variable-sized bitmasks</A>\n    <LI><A HREF=\"#3\">Containers and multithreading</A>\n+   <LI><A HREF=\"#4\">&quot;Hinting&quot; during insertion</A>\n </UL>\n \n <HR>\n@@ -245,12 +246,85 @@ <H2><A NAME=\"3\">Containers and multithreading</A></H2>\n       a catch-all general template solution would probably be more trouble\n       than it's worth.\n    </P>\n-\n    <P>Return <A HREF=\"#top\">to top of page</A> or\n       <A HREF=\"../faq/index.html\">to the FAQ</A>.\n    </P>\n \n-\n+<HR>\n+<H2><A NAME=\"4\">&quot;Hinting&quot; during insertion</A></H2>\n+   <P>Section [23.1.2], Table 69, of the C++ standard lists this function\n+      for all of the associative containers (map, set, etc):\n+      <PRE>\n+      a.insert(p,t);</PRE>\n+      where 'p' is an iterator into the container 'a', and 't' is the item\n+      to insert.  The standard says that &quot;iterator p is a hint\n+      pointing to where the insert should start to search,&quot; but\n+      specifies nothing more.  (LWG Issue #233, currently in review,\n+      addresses this topic, but I will ignore it here because it is not yet\n+      finalized.)\n+   </P>\n+   <P>Here we'll describe how the hinting works in the libstdc++-v3\n+      implementation, and what you need to do in order to take advantage of\n+      it.  (Insertions can change from logarithmic complexity to amortized\n+      constant time, if the hint is properly used.)  Also, since the current\n+      implementation is based on the SGI STL one, these points may hold true\n+      for other library implementations also, since the HP/SGI code is used\n+      in a lot of places.\n+   </P>\n+   <P>In the following text, the phrases <EM>greater than</EM> and <EM>less\n+      than</EM> refer to the results of the strict weak ordering imposed on\n+      the container by its comparison object, which defaults to (basically)\n+      &quot;&lt;&quot;.  Using those phrases is semantically sloppy, but I\n+      didn't want to get bogged down in syntax.  I assume that if you are\n+      intelligent enough to use your own comparison objects, you are also\n+      intelligent enough to assign &quot;greater&quot; and &quot;lesser&quot;\n+      their new meanings in the next paragraph.  *grin*\n+   </P>\n+   <P>If the <TT>hint</TT> parameter ('p' above) is equivalent to:\n+     <UL>\n+      <LI><TT>begin()</TT>, then the item being inserted should have a key\n+          less than all the other keys in the container.  The item will\n+          be inserted at the beginning of the container, becoming the new\n+          entry at <TT>begin()</TT>.\n+      <LI><TT>end()</TT>, then the item being inserted should have a key\n+          greater than all the other keys in the container.  The item will\n+          be inserted at the end of the container, becoming the new entry\n+          at <TT>end()</TT>.\n+      <LI>neither <TT>begin()</TT> nor <TT>end()</TT>, then:  Let <TT>h</TT>\n+          be the entry in the container pointed to by <TT>hint</TT>, that\n+          is, <TT>h = *hint</TT>.  Then the item being inserted should have\n+          a key less than that of <TT>h</TT>, and greater than that of the\n+          item preceeding <TT>h</TT>.  The new item will be inserted\n+          between <TT>h</TT> and <TT>h</TT>'s predecessor.\n+     </UL>\n+   </P>\n+   <P>If the conditions are not met, then the hint is not used, and the\n+      insertion proceeds as if you had called <TT> a.insert(t) </TT>\n+      instead.  (<STRONG>Note </STRONG> that GCC releases prior to 3.0.2\n+      had a bug in the case with <TT>hint == begin()</TT>.  You should not\n+      use a hint argument in those releases.)\n+(Was it just with map or with all the rbtree-using containers?  Still need\n+to check that.)\n+   </P>\n+   <P>This behavior goes well with other container's <TT>insert()</TT>\n+      functions which take an iterator:  if used, the new item will be\n+      inserted before the iterator passed as an argument, same as the other\n+      containers.  The exception\n+      (in a sense) is with a hint of <TT>end()</TT>:  the new item will\n+      actually be inserted after <TT>end()</TT>, but it also becomes the\n+      new <TT>end()</TT>.\n+   </P>\n+   <P><STRONG>Note </STRONG> also that the hint in this implementation is a\n+      one-shot.  The insertion-with-hint routines check the immediately\n+      surrounding entries to ensure that the new item would in fact belong\n+      there.  If the hint does not point to the correct place, then no\n+      further local searching is done; the search begins from scratch in\n+      logarithmic time.  (Further local searching would only increase the\n+      time required when the hint is too far off.)\n+   </P>\n+   <P>Return <A HREF=\"#top\">to top of page</A> or\n+      <A HREF=\"../faq/index.html\">to the FAQ</A>.\n+   </P>\n \n \n <!-- ####################################################### -->\n@@ -259,7 +333,7 @@ <H2><A NAME=\"3\">Containers and multithreading</A></H2>\n <P CLASS=\"fineprint\"><EM>\n Comments and suggestions are welcome, and may be sent to\n <A HREF=\"mailto:libstdc++@gcc.gnu.org\">the mailing list</A>.\n-<BR> $Id: howto.html,v 1.5 2001/05/31 02:45:02 ljrittle Exp $\n+<BR> $Id: howto.html,v 1.6 2001/06/08 03:53:35 ljrittle Exp $\n </EM></P>\n \n "}]}