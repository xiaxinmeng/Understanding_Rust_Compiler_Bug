{"sha": "e5b00edff55b11ccb722f6a14f6449b68bec8069", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTViMDBlZGZmNTViMTFjY2I3MjJmNmExNGY2NDQ5YjY4YmVjODA2OQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-05-11T15:53:50Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-05-11T15:53:50Z"}, "message": "don't use build_function_type in the Ada FE\n\ndon't use build_function_type in the Ada FE\n\t* gcc-interface/utils.c (def_fn_type): Don't call build_function_type;\n\tcall build_function_type_array or build_varargs_function_type_array\n\tinstead.\n\t(create_subprog_type): Don't call build_function_type; call\n\tbuild_function_type_vec instead.\n\nFrom-SVN: r173664", "tree": {"sha": "6fb9c0ffbdccf1ed60971b3840c943116318e364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fb9c0ffbdccf1ed60971b3840c943116318e364"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5b00edff55b11ccb722f6a14f6449b68bec8069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5b00edff55b11ccb722f6a14f6449b68bec8069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5b00edff55b11ccb722f6a14f6449b68bec8069", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5b00edff55b11ccb722f6a14f6449b68bec8069/comments", "author": null, "committer": null, "parents": [{"sha": "d034095964209d6ee81c5f0cf93420b0f011fec4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d034095964209d6ee81c5f0cf93420b0f011fec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d034095964209d6ee81c5f0cf93420b0f011fec4"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "2c022fe6a505f09a93e1879d9f86e03f610188df", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5b00edff55b11ccb722f6a14f6449b68bec8069/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5b00edff55b11ccb722f6a14f6449b68bec8069/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e5b00edff55b11ccb722f6a14f6449b68bec8069", "patch": "@@ -1,3 +1,11 @@\n+2011-05-11  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* gcc-interface/utils.c (def_fn_type): Don't call build_function_type;\n+\tcall build_function_type_array or build_varargs_function_type_array\n+\tinstead.\n+\t(create_subprog_type): Don't call build_function_type; call\n+\tbuild_function_type_vec instead.\n+\n 2011-05-11  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* gcc-interface/ada-tree.h (TYPE_OBJECT_RECORD_TYPE): Use TYPE_MINVAL."}, {"sha": "efeceea33c5e5bfb9e6bca8a0dfdeb422832e4dd", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5b00edff55b11ccb722f6a14f6449b68bec8069/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5b00edff55b11ccb722f6a14f6449b68bec8069/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=e5b00edff55b11ccb722f6a14f6449b68bec8069", "patch": "@@ -1181,24 +1181,16 @@ create_subprog_type (tree return_type, tree param_decl_list, tree cico_list,\n \t\t     bool return_unconstrained_p, bool return_by_direct_ref_p,\n \t\t     bool return_by_invisi_ref_p)\n {\n-  /* A chain of TREE_LIST nodes whose TREE_VALUEs are the data type nodes of\n-     the subprogram formal parameters.  This list is generated by traversing\n-     the input list of PARM_DECL nodes.  */\n-  tree param_type_list = NULL_TREE;\n+  /* A list of the data type nodes of the subprogram formal parameters.\n+     This list is generated by traversing the input list of PARM_DECL\n+     nodes.  */\n+  VEC(tree,gc) *param_type_list = NULL;\n   tree t, type;\n \n   for (t = param_decl_list; t; t = DECL_CHAIN (t))\n-    param_type_list = tree_cons (NULL_TREE, TREE_TYPE (t), param_type_list);\n+    VEC_safe_push (tree, gc, param_type_list, TREE_TYPE (t));\n \n-  /* The list of the function parameter types has to be terminated by the void\n-     type to signal to the back-end that we are not dealing with a variable\n-     parameter subprogram, but that it has a fixed number of parameters.  */\n-  param_type_list = tree_cons (NULL_TREE, void_type_node, param_type_list);\n-\n-  /* The list of argument types has been created in reverse so reverse it.  */\n-  param_type_list = nreverse (param_type_list);\n-\n-  type = build_function_type (return_type, param_type_list);\n+  type = build_function_type_vec (return_type, param_type_list);\n \n   /* TYPE may have been shared since GCC hashes types.  If it has a different\n      CICO_LIST, make a copy.  Likewise for the various flags.  */\n@@ -4959,7 +4951,8 @@ static GTY(()) tree builtin_types[(int) BT_LAST + 1];\n static void\n def_fn_type (builtin_type def, builtin_type ret, bool var, int n, ...)\n {\n-  tree args = NULL, t;\n+  tree t;\n+  tree *args = XALLOCAVEC (tree, n);\n   va_list list;\n   int i;\n \n@@ -4970,18 +4963,17 @@ def_fn_type (builtin_type def, builtin_type ret, bool var, int n, ...)\n       t = builtin_types[a];\n       if (t == error_mark_node)\n \tgoto egress;\n-      args = tree_cons (NULL_TREE, t, args);\n+      args[i] = t;\n     }\n   va_end (list);\n \n-  args = nreverse (args);\n-  if (!var)\n-    args = chainon (args, void_list_node);\n-\n   t = builtin_types[ret];\n   if (t == error_mark_node)\n     goto egress;\n-  t = build_function_type (t, args);\n+  if (var)\n+    t = build_varargs_function_type_array (t, n, args);\n+  else\n+    t = build_function_type_array (t, n, args);\n \n  egress:\n   builtin_types[def] = t;"}]}