{"sha": "9c6fb3ba59e1692160666e6ef21e654e6366af01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2ZmIzYmE1OWUxNjkyMTYwNjY2ZTZlZjIxZTY1NGU2MzY2YWYwMQ==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2014-09-03T09:24:34Z"}, "committer": {"name": "Ilya Tocar", "email": "tocarip@gcc.gnu.org", "date": "2014-09-03T09:24:34Z"}, "message": "adxintrin.h (_subborrow_u32): New.\n\ngcc/\n2014-09-02  Ilya Tocar  <ilya.tocar@intel.com>\n\n        * config/i386/adxintrin.h (_subborrow_u32): New.\n        (_addcarry_u32): Ditto.\n        (_subborrow_u64): Ditto.\n        (_addcarry_u64): Ditto.\n        * config/i386/i386.c (ix86_builtins): Add IX86_BUILTIN_SBB32,\n        IX86_BUILTIN_SBB64.\n        (ix86_init_mmx_sse_builtins): Handle __builtin_ia32_sbb_u32,\n        __builtin_ia32_sbb_u64\n\n\ntestsuite/\n2014-09-02  Ilya Tocar  <ilya.tocar@intel.com>\n\n        * gcc.target/i386/adx-addcarryx32-1.c: Test addcarry, subborrow.\n        * gcc.target/i386/adx-addcarryx32-2.c: Ditto.\n        * gcc.target/i386/adx-addcarryx32-3.c: Ditto.\n        * gcc.target/i386/adx-addcarryx64-1.c: Ditto.\n        * gcc.target/i386/adx-addcarryx64-2.c: Ditto.\n        * gcc.target/i386/adx-addcarryx64-3.c: Ditto.\n\nFrom-SVN: r214860", "tree": {"sha": "1bce231e5a69b4e9922637cf6790bd8517a0d047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bce231e5a69b4e9922637cf6790bd8517a0d047"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c6fb3ba59e1692160666e6ef21e654e6366af01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6fb3ba59e1692160666e6ef21e654e6366af01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6fb3ba59e1692160666e6ef21e654e6366af01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6fb3ba59e1692160666e6ef21e654e6366af01/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d93cc2467714741425e6d78e7b6e147b7992483", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d93cc2467714741425e6d78e7b6e147b7992483", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d93cc2467714741425e6d78e7b6e147b7992483"}], "stats": {"total": 148, "additions": 144, "deletions": 4}, "files": [{"sha": "d620cb28939bc6a0693d1dc647dccb562a483c2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c6fb3ba59e1692160666e6ef21e654e6366af01", "patch": "@@ -1,3 +1,14 @@\n+2014-09-03  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* config/i386/adxintrin.h (_subborrow_u32): New.\n+\t(_addcarry_u32): Ditto.\n+\t(_subborrow_u64): Ditto.\n+\t(_addcarry_u64): Ditto.\n+\t* config/i386/i386.c (ix86_builtins): Add IX86_BUILTIN_SBB32,\n+\tIX86_BUILTIN_SBB64.\n+\t(ix86_init_mmx_sse_builtins): Handle __builtin_ia32_sbb_u32,\n+\t__builtin_ia32_sbb_u64\n+\n 2014-09-03  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.c (nds32_function_arg): Define and rename some"}, {"sha": "8f2c01a121b7c916acd1d1c56c1a3c945253329a", "filename": "gcc/config/i386/adxintrin.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Fconfig%2Fi386%2Fadxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Fconfig%2Fi386%2Fadxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fadxintrin.h?ref=9c6fb3ba59e1692160666e6ef21e654e6366af01", "patch": "@@ -28,6 +28,22 @@\n #ifndef _ADXINTRIN_H_INCLUDED\n #define _ADXINTRIN_H_INCLUDED\n \n+extern __inline unsigned char\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_subborrow_u32 (unsigned char __CF, unsigned int __X,\n+\t        unsigned int __Y, unsigned int *__P)\n+{\n+    return __builtin_ia32_sbb_u32 (__CF, __Y, __X, __P);\n+}\n+\n+extern __inline unsigned char\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_addcarry_u32 (unsigned char __CF, unsigned int __X,\n+\t       unsigned int __Y, unsigned int *__P)\n+{\n+    return __builtin_ia32_addcarryx_u32 (__CF, __X, __Y, __P);\n+}\n+\n extern __inline unsigned char\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _addcarryx_u32 (unsigned char __CF, unsigned int __X,\n@@ -37,6 +53,22 @@ _addcarryx_u32 (unsigned char __CF, unsigned int __X,\n }\n \n #ifdef __x86_64__\n+extern __inline unsigned char\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_subborrow_u64 (unsigned char __CF, unsigned long __X,\n+\t        unsigned long __Y, unsigned long long *__P)\n+{\n+    return __builtin_ia32_sbb_u64 (__CF, __Y, __X, __P);\n+}\n+\n+extern __inline unsigned char\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_addcarry_u64 (unsigned char __CF, unsigned long __X,\n+\t       unsigned long __Y, unsigned long long *__P)\n+{\n+    return __builtin_ia32_addcarryx_u64 (__CF, __X, __Y, __P);\n+}\n+\n extern __inline unsigned char\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _addcarryx_u64 (unsigned char __CF, unsigned long __X,"}, {"sha": "1ca4890c02df0928f53eb3ceb5902fa038ab40f8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9c6fb3ba59e1692160666e6ef21e654e6366af01", "patch": "@@ -28789,6 +28789,10 @@ enum ix86_builtins\n   IX86_BUILTIN_ADDCARRYX32,\n   IX86_BUILTIN_ADDCARRYX64,\n \n+  /* SBB instructions.  */\n+  IX86_BUILTIN_SBB32,\n+  IX86_BUILTIN_SBB64,\n+\n   /* FSGSBASE instructions.  */\n   IX86_BUILTIN_RDFSBASE32,\n   IX86_BUILTIN_RDFSBASE64,\n@@ -31224,6 +31228,14 @@ ix86_init_mmx_sse_builtins (void)\n \t       UCHAR_FTYPE_UCHAR_ULONGLONG_ULONGLONG_PULONGLONG,\n \t       IX86_BUILTIN_ADDCARRYX64);\n \n+  /* SBB */\n+  def_builtin (0, \"__builtin_ia32_sbb_u32\",\n+\t       UCHAR_FTYPE_UCHAR_UINT_UINT_PUNSIGNED, IX86_BUILTIN_SBB32);\n+  def_builtin (OPTION_MASK_ISA_64BIT,\n+\t       \"__builtin_ia32_sbb_u64\",\n+\t       UCHAR_FTYPE_UCHAR_ULONGLONG_ULONGLONG_PULONGLONG,\n+\t       IX86_BUILTIN_SBB64);\n+\n   /* Read/write FLAGS.  */\n   def_builtin (~OPTION_MASK_ISA_64BIT, \"__builtin_ia32_readeflags_u32\",\n                UNSIGNED_FTYPE_VOID, IX86_BUILTIN_READ_FLAGS);\n@@ -35628,6 +35640,16 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       emit_insn (gen_zero_extendqisi2 (target, op2));\n       return target;\n \n+    case IX86_BUILTIN_SBB32:\n+      icode = CODE_FOR_subsi3_carry;\n+      mode0 = SImode;\n+      goto addcarryx;\n+\n+    case IX86_BUILTIN_SBB64:\n+      icode = CODE_FOR_subdi3_carry;\n+      mode0 = DImode;\n+      goto addcarryx;\n+\n     case IX86_BUILTIN_ADDCARRYX32:\n       icode = TARGET_ADX ? CODE_FOR_adcxsi3 : CODE_FOR_addsi3_carry;\n       mode0 = SImode;"}, {"sha": "4065e49dc9af7c57a5b12f3cab8738fb372a45df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c6fb3ba59e1692160666e6ef21e654e6366af01", "patch": "@@ -1,3 +1,12 @@\n+2014-09-03  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* gcc.target/i386/adx-addcarryx32-1.c: Test addcarry, subborrow.\n+\t* gcc.target/i386/adx-addcarryx32-2.c: Ditto.\n+\t* gcc.target/i386/adx-addcarryx32-3.c: Ditto.\n+\t* gcc.target/i386/adx-addcarryx64-1.c: Ditto.\n+\t* gcc.target/i386/adx-addcarryx64-2.c: Ditto.\n+\t* gcc.target/i386/adx-addcarryx64-3.c: Ditto.\n+\n 2014-09-03  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \tPR target/61078"}, {"sha": "9fff611b6c09fd6dd7015a43491b11e6705040ab", "filename": "gcc/testsuite/gcc.target/i386/adx-addcarryx32-1.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-1.c?ref=9c6fb3ba59e1692160666e6ef21e654e6366af01", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-madx -O2\" } */\n-/* { dg-final { scan-assembler \"adcx\" } } */\n+/* { dg-final { scan-assembler-times \"adcx\" 2 } } */\n+/* { dg-final { scan-assembler-times \"sbbl\" 1 } } */\n \n #include <x86intrin.h>\n \n@@ -12,4 +13,6 @@ void extern\n adx_test (void)\n {\n     c = _addcarryx_u32 (c, x, y, sum);\n+    c = _addcarry_u32 (c, x, y, sum);\n+    c = _subborrow_u32 (c, x, y, sum);\n }"}, {"sha": "b1da555bc310331fb7a663027e8fa59c28eb3adb", "filename": "gcc/testsuite/gcc.target/i386/adx-addcarryx32-2.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-2.c?ref=9c6fb3ba59e1692160666e6ef21e654e6366af01", "patch": "@@ -22,6 +22,33 @@ adx_test (void)\n   c = _addcarryx_u32 (c, x, y, &x);\n   /* X = 0xFFFFFFFE, Y = 0xFFFFFFFF, C = 1.  */\n \n+  if (x != sum_ref)\n+    abort ();\n+\n+  c = 0;\n+  x = y = 0xFFFFFFFF;\n+  sum_ref = 0xFFFFFFFE;\n+\n+  /* X = 0xFFFFFFFF, Y = 0xFFFFFFFF, C = 0.  */\n+  c = _addcarry_u32 (c, x, y, &x);\n+  /* X = 0xFFFFFFFE, Y = 0xFFFFFFFF, C = 1.  */\n+  c = _addcarry_u32 (c, x, y, &x);\n+  /* X = 0xFFFFFFFE, Y = 0xFFFFFFFF, C = 1.  */\n+\n+  if (x != sum_ref)\n+    abort ();\n+\n+  c = 0;\n+  x = 1;\n+  y = 0;\n+  sum_ref = 0x0;\n+\n+  /* X = 0x00000001, Y = 0x00000000, C = 0.  */\n+  c = _subborrow_u32 (c, x, y, &x);\n+  /* X = 0xFFFFFFFF, Y = 0x00000000, C = 1.  */\n+  c = _subborrow_u32 (c, x, y, &x);\n+  /* X = 0xFFFFFFFF, Y = 0xFFFFFFFF, C = 1.  */\n+\n   if (x != sum_ref)\n     abort ();\n }"}, {"sha": "d804867a77ea592260c1e8d99d88b6247a5579d6", "filename": "gcc/testsuite/gcc.target/i386/adx-addcarryx32-3.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx32-3.c?ref=9c6fb3ba59e1692160666e6ef21e654e6366af01", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mno-adx -O2\" } */\n-/* { dg-final { scan-assembler \"adcl\" } } */\n+/* { dg-final { scan-assembler-times \"adcl\" 2 } } */\n+/* { dg-final { scan-assembler-times \"sbbl\" 1 } } */\n \n #include <x86intrin.h>\n \n@@ -12,4 +13,6 @@ void extern\n adx_test (void)\n {\n     c = _addcarryx_u32 (c, x, y, sum);\n+    c = _addcarry_u32 (c, x, y, sum);\n+    c = _subborrow_u32 (c, x, y, sum);\n }"}, {"sha": "3608dea79b90d71f838f018ec3f64289fade4e29", "filename": "gcc/testsuite/gcc.target/i386/adx-addcarryx64-1.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-1.c?ref=9c6fb3ba59e1692160666e6ef21e654e6366af01", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-madx -O2\" } */\n-/* { dg-final { scan-assembler \"adcx\" } } */\n+/* { dg-final { scan-assembler-times \"adcx\" 2 } } */\n+/* { dg-final { scan-assembler-times \"sbbq\" 1 } } */\n \n #include <x86intrin.h>\n \n@@ -12,4 +13,6 @@ void extern\n adx_test (void)\n {\n     c = _addcarryx_u64 (c, x, y, sum);\n+    c = _addcarry_u64 (c, x, y, sum);\n+    c = _subborrow_u64 (c, x, y, sum);\n }"}, {"sha": "b326291bb35c34bf58c8a2b619336626b39a9eb0", "filename": "gcc/testsuite/gcc.target/i386/adx-addcarryx64-2.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-2.c?ref=9c6fb3ba59e1692160666e6ef21e654e6366af01", "patch": "@@ -22,6 +22,33 @@ adx_test (void)\n   c = _addcarryx_u64 (c, x, y, &x);\n   /* X = 0xFFFFFFFFFFFFFFFE, Y = 0xFFFFFFFFFFFFFFFF, C = 1.  */\n \n+  if (x != sum_ref)\n+    abort ();\n+\n+  c = 0;\n+  x = y = 0xFFFFFFFFFFFFFFFFLL;\n+  sum_ref = 0xFFFFFFFFFFFFFFFELL;\n+\n+  /* X = 0xFFFFFFFFFFFFFFFF, Y = 0xFFFFFFFFFFFFFFFF, C = 0.  */\n+  c = _addcarry_u64 (c, x, y, &x);\n+  /* X = 0xFFFFFFFFFFFFFFFE, Y = 0xFFFFFFFFFFFFFFFF, C = 1.  */\n+  c = _addcarry_u64 (c, x, y, &x);\n+  /* X = 0xFFFFFFFFFFFFFFFE, Y = 0xFFFFFFFFFFFFFFFF, C = 1.  */\n+\n+  if (x != sum_ref)\n+    abort ();\n+\n+  c = 0;\n+  x = 1LL;\n+  y = 0LL;\n+  sum_ref = 0x0LL;\n+\n+  /* X = 0x0000000000000001, Y = 0x0000000000000000, C = 0.  */\n+  c = _subborrow_u64 (c, x, y, &x);\n+  /* X = 0xFFFFFFFFFFFFFFFF, Y = 0x0000000000000000, C = 1.  */\n+  c = _subborrow_u64 (c, x, y, &x);\n+  /* X = 0x0000000000000000, Y = 0x0000000000000000, C = 1.  */\n+\n   if (x != sum_ref)\n     abort ();\n }"}, {"sha": "9d9809d74fecfa8bda48bee640db4c758ae1f520", "filename": "gcc/testsuite/gcc.target/i386/adx-addcarryx64-3.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6fb3ba59e1692160666e6ef21e654e6366af01/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fadx-addcarryx64-3.c?ref=9c6fb3ba59e1692160666e6ef21e654e6366af01", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-mno-adx -O2\" } */\n-/* { dg-final { scan-assembler \"adcq\" } } */\n+/* { dg-final { scan-assembler-times \"adcq\" 2 } } */\n+/* { dg-final { scan-assembler-times \"sbbq\" 1 } } */\n \n #include <x86intrin.h>\n \n@@ -12,4 +13,6 @@ void extern\n adx_test (void)\n {\n     c = _addcarryx_u64 (c, x, y, sum);\n+    c = _addcarry_u64 (c, x, y, sum);\n+    c = _subborrow_u64 (c, x, y, sum);\n }"}]}