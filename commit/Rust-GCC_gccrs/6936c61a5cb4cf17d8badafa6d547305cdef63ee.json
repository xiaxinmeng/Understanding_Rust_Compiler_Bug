{"sha": "6936c61a5cb4cf17d8badafa6d547305cdef63ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkzNmM2MWE1Y2I0Y2YxN2Q4YmFkYWZhNmQ1NDczMDVjZGVmNjNlZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-04-17T08:24:16Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-17T08:24:16Z"}, "message": "back-end.adb (Call_Back_End): Pass Standard_Character to gigi.\n\n\t* back-end.adb (Call_Back_End): Pass Standard_Character to gigi.\n\t* gcc-interface/gigi.h (gigi): Add standard_character parameter.\n\t(CHAR_TYPE_SIZE, SHORT_TYPE_SIZE, INT_TYPE_SIZE, LONG_TYPE_SIZE, \n\tLONG_LONG_TYPE_SIZE, FLOAT_TYPE_SIZE, DOUBLE_TYPE_SIZE,\n\tLONG_DOUBLE_TYPE_SIZE, SIZE_TYPE): Delete.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Subtype>: Call\n\trm_size.\n\t* gcc-interface/misc.c (gnat_init): Set signedness of char as per\n\tflag_signed_char.  Tag sizetype with \"size_type\" moniker.\n\t* gcc-interface/trans.c (gigi): Add standard_character parameter.\n\tRemove useless built-in types.  Equate unsigned_char_type_node to\n\tStandard.Character.  Use it instead of char_type_node throughout.\n\t(Attribute_to_gnu): Likewise.\n\t(gnat_to_gnu): Likewise.\n\t* gcc-interface/utils2.c (build_call_raise): Likewise.\n\nFrom-SVN: r158462", "tree": {"sha": "7dbe01ff367112db96a6d1b2f767aab61bd2f627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dbe01ff367112db96a6d1b2f767aab61bd2f627"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6936c61a5cb4cf17d8badafa6d547305cdef63ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6936c61a5cb4cf17d8badafa6d547305cdef63ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6936c61a5cb4cf17d8badafa6d547305cdef63ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6936c61a5cb4cf17d8badafa6d547305cdef63ee/comments", "author": null, "committer": null, "parents": [{"sha": "1081f5a7c753c0850becc3758adee1ce3f968ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1081f5a7c753c0850becc3758adee1ce3f968ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1081f5a7c753c0850becc3758adee1ce3f968ec9"}], "stats": {"total": 120, "additions": 55, "deletions": 65}, "files": [{"sha": "2a0af0b7bcce156f705fbd70807d7956d1c8bdc0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6936c61a5cb4cf17d8badafa6d547305cdef63ee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6936c61a5cb4cf17d8badafa6d547305cdef63ee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6936c61a5cb4cf17d8badafa6d547305cdef63ee", "patch": "@@ -1,3 +1,21 @@\n+2010-04-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* back-end.adb (Call_Back_End): Pass Standard_Character to gigi.\n+\t* gcc-interface/gigi.h (gigi): Add standard_character parameter.\n+\t(CHAR_TYPE_SIZE, SHORT_TYPE_SIZE, INT_TYPE_SIZE, LONG_TYPE_SIZE, \n+\tLONG_LONG_TYPE_SIZE, FLOAT_TYPE_SIZE, DOUBLE_TYPE_SIZE,\n+\tLONG_DOUBLE_TYPE_SIZE, SIZE_TYPE): Delete.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Subtype>: Call\n+\trm_size.\n+\t* gcc-interface/misc.c (gnat_init): Set signedness of char as per\n+\tflag_signed_char.  Tag sizetype with \"size_type\" moniker.\n+\t* gcc-interface/trans.c (gigi): Add standard_character parameter.\n+\tRemove useless built-in types.  Equate unsigned_char_type_node to\n+\tStandard.Character.  Use it instead of char_type_node throughout.\n+\t(Attribute_to_gnu): Likewise.\n+\t(gnat_to_gnu): Likewise.\n+\t* gcc-interface/utils2.c (build_call_raise): Likewise.\n+\n 2010-04-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (enum standard_datatypes): Add new values"}, {"sha": "f23a320d1aed36d432f28d823a8dfcdd4635d3eb", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6936c61a5cb4cf17d8badafa6d547305cdef63ee/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6936c61a5cb4cf17d8badafa6d547305cdef63ee/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=6936c61a5cb4cf17d8badafa6d547305cdef63ee", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -78,6 +78,7 @@ package body Back_End is\n          file_info_ptr                 : Address;\n          gigi_standard_boolean         : Entity_Id;\n          gigi_standard_integer         : Entity_Id;\n+         gigi_standard_character       : Entity_Id;\n          gigi_standard_long_long_float : Entity_Id;\n          gigi_standard_exception_type  : Entity_Id;\n          gigi_operating_mode           : Back_End_Mode_Type);\n@@ -115,6 +116,7 @@ package body Back_End is\n          file_info_ptr                 => File_Info_Array'Address,\n          gigi_standard_boolean         => Standard_Boolean,\n          gigi_standard_integer         => Standard_Integer,\n+         gigi_standard_character       => Standard_Character,\n          gigi_standard_long_long_float => Standard_Long_Long_Float,\n          gigi_standard_exception_type  => Standard_Exception_Type,\n          gigi_operating_mode           => Mode);"}, {"sha": "5d6bc79fd93e3b4bf21a106cb6ef05759b6d1161", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6936c61a5cb4cf17d8badafa6d547305cdef63ee/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6936c61a5cb4cf17d8badafa6d547305cdef63ee/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=6936c61a5cb4cf17d8badafa6d547305cdef63ee", "patch": "@@ -2113,7 +2113,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    {\n \t      tree gnu_index_type = get_unpadded_type (Etype (gnat_index));\n \t      const int prec_comp\n-\t\t= compare_tree_int (TYPE_RM_SIZE (gnu_index_type),\n+\t\t= compare_tree_int (rm_size (gnu_index_type),\n \t\t\t\t    TYPE_PRECISION (sizetype));\n \t      const bool subrange_p = (prec_comp < 0\n \t\t\t\t       && (TYPE_UNSIGNED (gnu_index_type)"}, {"sha": "b7f6639d9fbb55dd43a23253c925505f4ef5b4c4", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6936c61a5cb4cf17d8badafa6d547305cdef63ee/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6936c61a5cb4cf17d8badafa6d547305cdef63ee/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=6936c61a5cb4cf17d8badafa6d547305cdef63ee", "patch": "@@ -203,6 +203,7 @@ extern void gigi (Node_Id gnat_root, int max_gnat_node,\n                   struct File_Info_Type *file_info_ptr,\n                   Entity_Id standard_boolean,\n                   Entity_Id standard_integer,\n+                  Entity_Id standard_character,\n                   Entity_Id standard_long_long_float,\n                   Entity_Id standard_exception_type,\n                   Int gigi_operating_mode);\n@@ -270,45 +271,6 @@ extern int double_float_alignment;\n    types whose size is greater or equal to 64 bits, or 0 if this alignment\n    is not specifically capped.  */\n extern int double_scalar_alignment;\n-\n-/* Standard data type sizes.  Most of these are not used.  */\n-\n-#ifndef CHAR_TYPE_SIZE\n-#define CHAR_TYPE_SIZE BITS_PER_UNIT\n-#endif\n-\n-#ifndef SHORT_TYPE_SIZE\n-#define SHORT_TYPE_SIZE (BITS_PER_UNIT * MIN ((UNITS_PER_WORD + 1) / 2, 2))\n-#endif\n-\n-#ifndef INT_TYPE_SIZE\n-#define INT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef LONG_TYPE_SIZE\n-#define LONG_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef LONG_LONG_TYPE_SIZE\n-#define LONG_LONG_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n-#ifndef FLOAT_TYPE_SIZE\n-#define FLOAT_TYPE_SIZE BITS_PER_WORD\n-#endif\n-\n-#ifndef DOUBLE_TYPE_SIZE\n-#define DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n-#ifndef LONG_DOUBLE_TYPE_SIZE\n-#define LONG_DOUBLE_TYPE_SIZE (BITS_PER_WORD * 2)\n-#endif\n-\n-/* The choice of SIZE_TYPE here is very problematic.  We need a signed\n-   type whose bit width is Pmode.  Assume \"long\" is such a type here.  */\n-#undef SIZE_TYPE\n-#define SIZE_TYPE \"long int\"\n \f\n /* Data structures used to represent attributes.  */\n "}, {"sha": "f3e7b1b74827b033fc8fc27d3c4d7789f64eb092", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6936c61a5cb4cf17d8badafa6d547305cdef63ee/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6936c61a5cb4cf17d8badafa6d547305cdef63ee/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=6936c61a5cb4cf17d8badafa6d547305cdef63ee", "patch": "@@ -389,15 +389,17 @@ static bool\n gnat_init (void)\n {\n   /* Do little here, most of the standard declarations are set up after the\n-     front-end has been run.  */\n-  build_common_tree_nodes (true, true);\n+     front-end has been run.  Use the same `char' as C, this doesn't really\n+     matter since we'll use the explicit `unsigned char' for Character.  */\n+  build_common_tree_nodes (flag_signed_char, true);\n \n   /* In Ada, we use a signed type for SIZETYPE.  Use the signed type\n      corresponding to the width of Pmode.  In most cases when ptr_mode\n      and Pmode differ, C will use the width of ptr_mode for SIZETYPE.\n      But we get far better code using the width of Pmode.  */\n   size_type_node = gnat_type_for_mode (Pmode, 0);\n   set_sizetype (size_type_node);\n+  TYPE_NAME (sizetype) = get_identifier (\"size_type\");\n \n   /* In Ada, we use an unsigned 8-bit type for the default boolean type.  */\n   boolean_type_node = make_unsigned_type (8);"}, {"sha": "71c9e862aba6aa17395c7438836ecb1329acd855", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6936c61a5cb4cf17d8badafa6d547305cdef63ee/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6936c61a5cb4cf17d8badafa6d547305cdef63ee/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=6936c61a5cb4cf17d8badafa6d547305cdef63ee", "patch": "@@ -230,8 +230,9 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n       struct Elist_Header *elists_ptr, struct Elmt_Item *elmts_ptr,\n       struct String_Entry *strings_ptr, Char_Code *string_chars_ptr,\n       struct List_Header *list_headers_ptr, Nat number_file,\n-      struct File_Info_Type *file_info_ptr, Entity_Id standard_boolean,\n-      Entity_Id standard_integer, Entity_Id standard_long_long_float,\n+      struct File_Info_Type *file_info_ptr,\n+      Entity_Id standard_boolean, Entity_Id standard_integer,\n+      Entity_Id standard_character, Entity_Id standard_long_long_float,\n       Entity_Id standard_exception_type, Int gigi_operating_mode)\n {\n   Entity_Id gnat_literal;\n@@ -317,23 +318,26 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n   double_float_alignment = get_target_double_float_alignment ();\n   double_scalar_alignment = get_target_double_scalar_alignment ();\n \n-  /* Record the builtin types.  Define `integer' and `unsigned char' first so\n-     that dbx will output them first.  */\n+  /* Record the builtin types.  Define `integer' and `character' first so that\n+     dbx will output them first.  */\n   record_builtin_type (\"integer\", integer_type_node);\n-  record_builtin_type (\"unsigned char\", char_type_node);\n-  record_builtin_type (\"long integer\", long_integer_type_node);\n-  unsigned_type_node = gnat_type_for_size (INT_TYPE_SIZE, 1);\n-  record_builtin_type (\"unsigned int\", unsigned_type_node);\n-  record_builtin_type (SIZE_TYPE, sizetype);\n+  record_builtin_type (\"character\", unsigned_char_type_node);\n   record_builtin_type (\"boolean\", boolean_type_node);\n   record_builtin_type (\"void\", void_type_node);\n \n   /* Save the type we made for integer as the type for Standard.Integer.  */\n-  save_gnu_tree (Base_Type (standard_integer), TYPE_NAME (integer_type_node),\n+  save_gnu_tree (Base_Type (standard_integer),\n+\t\t TYPE_NAME (integer_type_node),\n \t\t false);\n \n-  /* Save the type we made for boolean as the type for Standard.Boolean.  */\n-  save_gnu_tree (Base_Type (standard_boolean), TYPE_NAME (boolean_type_node),\n+  /* Likewise for character as the type for Standard.Character.  */\n+  save_gnu_tree (Base_Type (standard_character),\n+\t\t TYPE_NAME (unsigned_char_type_node),\n+\t\t false);\n+\n+  /* Likewise for boolean as the type for Standard.Boolean.  */\n+  save_gnu_tree (Base_Type (standard_boolean),\n+\t\t TYPE_NAME (boolean_type_node),\n \t\t false);\n   gnat_literal = First_Literal (Base_Type (standard_boolean));\n   t = UI_To_gnu (Enumeration_Rep (gnat_literal), boolean_type_node);\n@@ -474,7 +478,8 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t  (get_identifier (\"__gnat_last_chance_handler\"), NULL_TREE,\n \t   build_function_type (void_type_node,\n \t\t\t\ttree_cons (NULL_TREE,\n-\t\t\t\t\t   build_pointer_type (char_type_node),\n+\t\t\t\t\t   build_pointer_type\n+\t\t\t\t\t   (unsigned_char_type_node),\n \t\t\t\t\t   tree_cons (NULL_TREE,\n \t\t\t\t\t\t      integer_type_node,\n \t\t\t\t\t\t      t))),\n@@ -496,7 +501,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t     build_function_type (void_type_node,\n \t\t\t\t  tree_cons (NULL_TREE,\n \t\t\t\t\t     build_pointer_type\n-\t\t\t\t\t     (char_type_node),\n+\t\t\t\t\t     (unsigned_char_type_node),\n \t\t\t\t\t     tree_cons (NULL_TREE,\n \t\t\t\t\t\t\tinteger_type_node,\n \t\t\t\t\t\t\tt))),\n@@ -512,9 +517,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name ATTRIBUTE_UNUSED,\n \t\t\t\tTYPE_QUAL_VOLATILE);\n     }\n \n-  /* Set the types that GCC and Gigi use from the front end.  We would\n-     like to do this for char_type_node, but it needs to correspond to\n-     the C char type.  */\n+  /* Set the types that GCC and Gigi use from the front end.  */\n   exception_type\n     = gnat_to_gnu_entity (Base_Type (standard_exception_type),  NULL_TREE, 0);\n   except_type_node = TREE_TYPE (exception_type);\n@@ -1354,7 +1357,8 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \tif (TREE_CODE (gnu_obj_type) == RECORD_TYPE\n \t    && TYPE_CONTAINS_TEMPLATE_P (gnu_obj_type))\n \t  {\n-\t    tree gnu_char_ptr_type = build_pointer_type (char_type_node);\n+\t    tree gnu_char_ptr_type\n+\t      = build_pointer_type (unsigned_char_type_node);\n \t    tree gnu_pos = byte_position (TYPE_FIELDS (gnu_obj_type));\n \t    gnu_ptr = convert (gnu_char_ptr_type, gnu_ptr);\n \t    gnu_ptr = build_binary_op (POINTER_PLUS_EXPR, gnu_char_ptr_type,\n@@ -5391,7 +5395,8 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  if (TREE_CODE (gnu_obj_type) == RECORD_TYPE\n \t      && TYPE_CONTAINS_TEMPLATE_P (gnu_obj_type))\n \t    {\n-\t      tree gnu_char_ptr_type = build_pointer_type (char_type_node);\n+\t      tree gnu_char_ptr_type\n+\t\t= build_pointer_type (unsigned_char_type_node);\n \t      tree gnu_pos = byte_position (TYPE_FIELDS (gnu_obj_type));\n \t      gnu_ptr = convert (gnu_char_ptr_type, gnu_ptr);\n \t      gnu_ptr = build_binary_op (POINTER_PLUS_EXPR, gnu_char_ptr_type,"}, {"sha": "be7044bddfa968c18032a50f5239e5cf17d7b2f8", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6936c61a5cb4cf17d8badafa6d547305cdef63ee/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6936c61a5cb4cf17d8badafa6d547305cdef63ee/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=6936c61a5cb4cf17d8badafa6d547305cdef63ee", "patch": "@@ -1499,12 +1499,13 @@ build_call_raise (int msg, Node_Id gnat_node, char kind)\n     = (gnat_node != Empty && Sloc (gnat_node) != No_Location)\n       ? Get_Logical_Line_Number (Sloc(gnat_node)) : input_line;\n \n-  TREE_TYPE (filename)\n-    = build_array_type (char_type_node, build_index_type (size_int (len)));\n+  TREE_TYPE (filename) = build_array_type (unsigned_char_type_node,\n+\t\t\t\t\t   build_index_type (size_int (len)));\n \n   return\n     build_call_2_expr (fndecl,\n-\t\t       build1 (ADDR_EXPR, build_pointer_type (char_type_node),\n+\t\t       build1 (ADDR_EXPR,\n+\t\t\t       build_pointer_type (unsigned_char_type_node),\n \t\t\t       filename),\n \t\t       build_int_cst (NULL_TREE, line_number));\n }"}]}