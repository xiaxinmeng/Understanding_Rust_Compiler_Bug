{"sha": "3689b507340c2adfbbb717154c1caa364508c522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY4OWI1MDczNDBjMmFkZmJiYjcxNzE1NGMxY2FhMzY0NTA4YzUyMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-02T01:27:00Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-02T01:27:00Z"}, "message": "(libcompare): Verify that file name extensions are valid.\n\nPut files with invalid extensions last in the sort.\n\nFrom-SVN: r10103", "tree": {"sha": "d94f6b8293f4fe06bc3a99a7501b9dab89ed1e50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d94f6b8293f4fe06bc3a99a7501b9dab89ed1e50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3689b507340c2adfbbb717154c1caa364508c522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3689b507340c2adfbbb717154c1caa364508c522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3689b507340c2adfbbb717154c1caa364508c522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3689b507340c2adfbbb717154c1caa364508c522/comments", "author": null, "committer": null, "parents": [{"sha": "e9e485f4faf25ebb3f6c34f922e74b62932f7fbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e485f4faf25ebb3f6c34f922e74b62932f7fbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9e485f4faf25ebb3f6c34f922e74b62932f7fbb"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "bc4e93ed20e16e9e84dac6bcf7e3dbbc0faed2e0", "filename": "gcc/collect2.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3689b507340c2adfbbb717154c1caa364508c522/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3689b507340c2adfbbb717154c1caa364508c522/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=3689b507340c2adfbbb717154c1caa364508c522", "patch": "@@ -2095,6 +2095,14 @@ libselect (d)\n   return (strncmp (libname, d->d_name, strlen (libname)) == 0);\n }\n \n+/* If one file has an additional numeric extention past LIBNAME, then put\n+   that one first in the sort.  If both files have additional numeric\n+   extensions, then put the one with the higher number first in the sort.\n+\n+   We must verify that the extension is numeric, because Sun saves the\n+   original versions of patched libraries with a .FCS extension.  Files with\n+   invalid extensions must go last in the sort, so that they won't be used.  */\n+\n static int\n libcompare (d1, d2)\n      struct direct **d1, **d2;\n@@ -2103,7 +2111,8 @@ libcompare (d1, d2)\n   char *e1 = (*d1)->d_name + i2;\n   char *e2 = (*d2)->d_name + i2;\n \n-  while (*e1 && *e2)\n+  while (*e1 && *e2 && *e1 == '.' && *e2 == '.'\n+\t && e1[1] && isdigit (e1[1]) && e2[1] && isdigit (e2[1]))\n     {\n       ++e1;\n       ++e2;\n@@ -2114,9 +2123,23 @@ libcompare (d1, d2)\n     }\n \n   if (*e1)\n-    return 1;\n+    {\n+      /* It has a valid numeric extension, prefer this one.  */\n+      if (*e1 == '.' && e1[1] && isdigit (e1[1]))\n+\treturn 1;\n+      /* It has a invalid numeric extension, must prefer the other one.  */\n+      else\n+\treturn -1;\n+    }\n   else if (*e2)\n-    return -1;\n+    {\n+      /* It has a valid numeric extension, prefer this one.  */\n+      if (*e2 == '.' && e2[1] && isdigit (e2[1]))\n+\treturn -1;\n+      /* It has a invalid numeric extension, must prefer the other one.  */\n+      else\n+\treturn 1;\n+    }\n   else\n     return 0;\n }"}]}