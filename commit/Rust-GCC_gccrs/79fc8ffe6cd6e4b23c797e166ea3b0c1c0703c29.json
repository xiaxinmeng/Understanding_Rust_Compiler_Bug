{"sha": "79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlmYzhmZmU2Y2Q2ZTRiMjNjNzk3ZTE2NmVhM2IwYzFjMDcwM2MyOQ==", "commit": {"author": {"name": "Andrew Senkevich", "email": "andrew.senkevich@intel.com", "date": "2017-01-10T12:55:41Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-01-10T12:55:41Z"}, "message": "Enable AVX-512 VPOPCNTD/VPOPCNTQ instructions.\n\ngcc/\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET,\n\tOPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET): New.\n\t* config.gcc: Add avx512vpopcntdqintrin.h.\n\t* config/i386/avx512vpopcntdqintrin.h: New.\n\t* config/i386/cpuid.h (bit_AVX512VPOPCNTDQ): New.\n\t* config/i386/i386-builtin-types.def: Add new types.\n\t* config/i386/i386-builtin.def (__builtin_ia32_vpopcountd_v16si,\n\t__builtin_ia32_vpopcountd_v16si_mask, __builtin_ia32_vpopcountq_v8di,\n\t__builtin_ia32_vpopcountq_v8di_mask): New.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n\t__AVX512VPOPCNTDQ__.\n\t* config/i386/i386.c (ix86_target_string): Add -mavx512vpopcntdq.\n\t(PTA_AVX512VPOPCNTDQ): Define.\n\t* config/i386/i386.h (TARGET_AVX512VPOPCNTDQ,\n\tTARGET_AVX512VPOPCNTDQ_P): Define.\n\t* config/i386/i386.opt: Add mavx512vpopcntdq.\n\t* config/i386/immintrin.h: Include avx512vpopcntdqintrin.h.\n\t* config/i386/sse.md (define_insn \"vpopcount<mode><mask_name>\"): New.\n\nlibgcc/\n\t* config/i386/cpuinfo.h (processor_features): Add\n\tFEATURE_AVX512VPOPCNTDQ.\n\t* config/i386/cpuinfo.c (get_available_features): Habdle new\n\tfeature.\n\ngcc/testsuite/\n\t* g++.dg/other/i386-2.C: Add -mavx512vpopcntdq.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/sse-12.c: Ditto.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/builtin_target.c: Handle new option.\n\t* gcc.target/i386/funcspec-56.inc: Test new attributes.\n\t* gcc.target/i386/avx512vpopcntdq-vpopcntd.c: New test.\n\t* gcc.target/i386/avx512vpopcntdq-vpopcntq.c: Ditto.\n\nFrom-SVN: r244263", "tree": {"sha": "7babf8190168a393c7bf3f3e6f7f6e085288e74c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7babf8190168a393c7bf3f3e6f7f6e085288e74c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/comments", "author": null, "committer": null, "parents": [{"sha": "f9a27859dffe12c32364e2d7be40d2142e85c5f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9a27859dffe12c32364e2d7be40d2142e85c5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9a27859dffe12c32364e2d7be40d2142e85c5f0"}], "stats": {"total": 275, "additions": 257, "deletions": 18}, "files": [{"sha": "ba1dfa95c89c46e53fe4cf926272781b38fa6253", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -1,3 +1,24 @@\n+2017-01-10  Andrew Senkevich  <andrew.senkevich@intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET,\n+\tOPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET): New.\n+\t* config.gcc: Add avx512vpopcntdqintrin.h.\n+\t* config/i386/avx512vpopcntdqintrin.h: New.\n+\t* config/i386/cpuid.h (bit_AVX512VPOPCNTDQ): New.\n+\t* config/i386/i386-builtin-types.def: Add new types.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_vpopcountd_v16si,\n+\t__builtin_ia32_vpopcountd_v16si_mask, __builtin_ia32_vpopcountq_v8di,\n+\t__builtin_ia32_vpopcountq_v8di_mask): New.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n+\t__AVX512VPOPCNTDQ__.\n+\t* config/i386/i386.c (ix86_target_string): Add -mavx512vpopcntdq.\n+\t(PTA_AVX512VPOPCNTDQ): Define.\n+\t* config/i386/i386.h (TARGET_AVX512VPOPCNTDQ,\n+\tTARGET_AVX512VPOPCNTDQ_P): Define.\n+\t* config/i386/i386.opt: Add mavx512vpopcntdq.\n+\t* config/i386/immintrin.h: Include avx512vpopcntdqintrin.h.\n+\t* config/i386/sse.md (define_insn \"vpopcount<mode><mask_name>\"): New.\n+\n 2017-01-01  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR middle-end/77484"}, {"sha": "4152ef8563787f672333e356cd48092f08cd9e38", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -78,6 +78,7 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA_AVX512VBMI | OPTION_MASK_ISA_AVX512BW_SET)\n #define OPTION_MASK_ISA_AVX5124FMAPS_SET OPTION_MASK_ISA_AVX5124FMAPS\n #define OPTION_MASK_ISA_AVX5124VNNIW_SET OPTION_MASK_ISA_AVX5124VNNIW\n+#define OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET OPTION_MASK_ISA_AVX512VPOPCNTDQ\n #define OPTION_MASK_ISA_RTM_SET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_SET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_SET OPTION_MASK_ISA_RDSEED\n@@ -183,6 +184,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_AVX512VBMI_UNSET OPTION_MASK_ISA_AVX512VBMI\n #define OPTION_MASK_ISA_AVX5124FMAPS_UNSET OPTION_MASK_ISA_AVX5124FMAPS\n #define OPTION_MASK_ISA_AVX5124VNNIW_UNSET OPTION_MASK_ISA_AVX5124VNNIW\n+#define OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET OPTION_MASK_ISA_AVX512VPOPCNTDQ\n #define OPTION_MASK_ISA_RTM_UNSET OPTION_MASK_ISA_RTM\n #define OPTION_MASK_ISA_PRFCHW_UNSET OPTION_MASK_ISA_PRFCHW\n #define OPTION_MASK_ISA_RDSEED_UNSET OPTION_MASK_ISA_RDSEED\n@@ -409,6 +411,8 @@ ix86_handle_option (struct gcc_options *opts,\n \t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX5124FMAPS_UNSET;\n \t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX5124VNNIW_UNSET;\n \t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX5124VNNIW_UNSET;\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET;\n \t}\n       return true;\n \n@@ -481,6 +485,21 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mavx512vpopcntdq:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX512VPOPCNTDQ_SET;\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512F_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX512F_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mavx512dq:\n       if (value)\n \t{"}, {"sha": "bb25d54e8adbe05bdb10eafe16a4ddabfe898f55", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -375,7 +375,8 @@ i[34567]86-*-*)\n \t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\n \t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n \t\t       avx512vbmivlintrin.h avx5124fmapsintrin.h avx5124vnniwintrin.h\n-\t\t       clwbintrin.h mwaitxintrin.h clzerointrin.h pkuintrin.h\"\n+\t\t       avx512vpopcntdqintrin.h clwbintrin.h mwaitxintrin.h\n+\t\t       clzerointrin.h pkuintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -397,7 +398,8 @@ x86_64-*-*)\n \t\t       avx512vlintrin.h avx512vlbwintrin.h avx512vldqintrin.h\n \t\t       avx512ifmaintrin.h avx512ifmavlintrin.h avx512vbmiintrin.h\n \t\t       avx512vbmivlintrin.h avx5124fmapsintrin.h avx5124vnniwintrin.h\n-\t\t       clwbintrin.h mwaitxintrin.h clzerointrin.h pkuintrin.h\"\n+\t\t       avx512vpopcntdqintrin.h clwbintrin.h mwaitxintrin.h\n+\t\t       clzerointrin.h pkuintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "9b0bc1b8c16ca6f5a7aa03061d3a7242ab49c31d", "filename": "gcc/config/i386/avx512vpopcntdqintrin.h", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Favx512vpopcntdqintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Favx512vpopcntdqintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vpopcntdqintrin.h?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -0,0 +1,94 @@\n+/* Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _IMMINTRIN_H_INCLUDED\n+# error \"Never use <avx512vpopcntdqintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512VPOPCNTDQINTRIN_H_INCLUDED\n+#define _AVX512VPOPCNTDQINTRIN_H_INCLUDED\n+\n+#ifndef __AVX512VPOPCNTDQ__\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512vpopcntdq\")\n+#define __DISABLE_AVX512VPOPCNTDQ__\n+#endif /* __AVX512VPOPCNTDQ__ */\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_popcnt_epi32 (__m512i __A)\n+{\n+  return (__m512i) __builtin_ia32_vpopcountd_v16si ((__v16si) __A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_popcnt_epi32 (__m512i __A, __mmask16 __U, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_vpopcountd_v16si_mask ((__v16si) __A,\n+\t\t\t\t\t\t\t (__v16si) __B,\n+\t\t\t\t\t\t\t (__mmask16) __U);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_popcnt_epi32 (__mmask16 __U, __m512i __A)\n+{\n+  return (__m512i) __builtin_ia32_vpopcountd_v16si_mask ((__v16si) __A,\n+\t\t\t\t\t\t\t (__v16si)\n+\t\t\t\t\t\t\t _mm512_setzero_si512 (),\n+\t\t\t\t\t\t\t (__mmask16) __U);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_popcnt_epi64 (__m512i __A)\n+{\n+  return (__m512i) __builtin_ia32_vpopcountq_v8di ((__v8di) __A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_popcnt_epi64 (__m512i __A, __mmask8 __U, __m512i __B)\n+{\n+  return (__m512i) __builtin_ia32_vpopcountq_v8di_mask ((__v8di) __A,\n+\t\t\t\t\t\t\t(__v8di) __B,\n+\t\t\t\t\t\t\t(__mmask8) __U);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_popcnt_epi64 (__mmask8 __U, __m512i __A)\n+{\n+  return (__m512i) __builtin_ia32_vpopcountq_v8di_mask ((__v8di) __A,\n+\t\t\t\t\t\t\t(__v8di)\n+\t\t\t\t\t\t\t_mm512_setzero_si512 (),\n+\t\t\t\t\t\t\t(__mmask8) __U);\n+}\n+\n+#ifdef __DISABLE_AVX512VPOPCNTDQ__\n+#undef __DISABLE_AVX512VPOPCNTDQ__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512VPOPCNTDQ__ */\n+\n+#endif /* _AVX512VPOPCNTDQINTRIN_H_INCLUDED */"}, {"sha": "4bdc19e2554fdf75399d3906a89788d775cd2f1d", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -54,6 +54,7 @@\n #define bit_SSE4a\t(1 << 6)\n #define bit_PRFCHW\t(1 << 8)\n #define bit_XOP         (1 << 11)\n+#define bit_AVX512VPOPCNTDQ\t(1 << 14)\n #define bit_LWP \t(1 << 15)\n #define bit_FMA4        (1 << 16)\n #define bit_TBM         (1 << 21)"}, {"sha": "18b3d4c5e4aed5f62ca576024833fd727b3bfff2", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -305,9 +305,11 @@ DEF_FUNCTION_TYPE (V8DF, V2DF)\n DEF_FUNCTION_TYPE (V16SI, V4SI)\n DEF_FUNCTION_TYPE (V16SI, V8SI)\n DEF_FUNCTION_TYPE (V16SI, V16SF)\n+DEF_FUNCTION_TYPE (V16SI, V16SI)\n DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, UHI)\n DEF_FUNCTION_TYPE (V8DI, V8DI, V8DI, UQI)\n DEF_FUNCTION_TYPE (V8DI, PV8DI)\n+DEF_FUNCTION_TYPE (V8DI, V8DI)\n \n DEF_FUNCTION_TYPE (DI, V2DI, INT)\n DEF_FUNCTION_TYPE (DOUBLE, V2DF, INT)"}, {"sha": "c35133595c53fcc7fdbb66db16e171f5344409df", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -2527,6 +2527,10 @@ BDESC (OPTION_MASK_ISA_AVX5124VNNIW, CODE_FOR_avx5124vnniw_vp4dpwssd, \"__builtin\n BDESC (OPTION_MASK_ISA_AVX5124VNNIW, CODE_FOR_avx5124vnniw_vp4dpwssd_mask, \"__builtin_ia32_vp4dpwssd_mask\", IX86_BUILTIN_4DPWSSD_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_V16SI_V16SI_PCV4SI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX5124VNNIW, CODE_FOR_avx5124vnniw_vp4dpwssds, \"__builtin_ia32_vp4dpwssds\", IX86_BUILTIN_4DPWSSDS, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_V16SI_V16SI_PCV4SI)\n BDESC (OPTION_MASK_ISA_AVX5124VNNIW, CODE_FOR_avx5124vnniw_vp4dpwssds_mask, \"__builtin_ia32_vp4dpwssds_mask\", IX86_BUILTIN_4DPWSSDS_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_V16SI_V16SI_PCV4SI_V16SI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv16si, \"__builtin_ia32_vpopcountd_v16si\", IX86_BUILTIN_VPOPCOUNTDV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv16si_mask, \"__builtin_ia32_vpopcountd_v16si_mask\", IX86_BUILTIN_VPOPCOUNTDV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv8di, \"__builtin_ia32_vpopcountq_v8di\", IX86_BUILTIN_VPOPCOUNTQV8DI, UNKNOWN, (int) V8DI_FTYPE_V8DI)\n+BDESC (OPTION_MASK_ISA_AVX512VPOPCNTDQ, CODE_FOR_vpopcountv8di_mask, \"__builtin_ia32_vpopcountq_v8di_mask\", IX86_BUILTIN_VPOPCOUNTQV8DI_MASK, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_UQI)\n \n BDESC_END (ARGS2, MPX)\n "}, {"sha": "855ff790ab293530d24ea2462a7e54a2f88f9520", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -380,6 +380,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__AVX5124VNNIW__\");\n   if (isa_flag2 & OPTION_MASK_ISA_AVX5124FMAPS)\n     def_or_undef (parse_in, \"__AVX5124FMAPS__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_AVX512VPOPCNTDQ)\n+    def_or_undef (parse_in, \"__AVX512VPOPCNTDQ__\");\n   if (isa_flag & OPTION_MASK_ISA_FMA)\n     def_or_undef (parse_in, \"__FMA__\");\n   if (isa_flag & OPTION_MASK_ISA_RTM)"}, {"sha": "e03dadd86d5b357c19c4fdf237ef3faef5c775cd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -4320,6 +4320,7 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2, int flags,\n   {\n     { \"-mavx5124vnniw\", OPTION_MASK_ISA_AVX5124VNNIW },\n     { \"-mavx5124fmaps\", OPTION_MASK_ISA_AVX5124FMAPS },\n+    { \"-mavx512vpopcntdq\", OPTION_MASK_ISA_AVX512VPOPCNTDQ },\n   };\n   /* Flag options.  */\n   static struct ix86_target_opts flag_opts[] =\n@@ -4919,6 +4920,7 @@ ix86_option_override_internal (bool main_args_p,\n #define PTA_PKU\t\t(HOST_WIDE_INT_1 << 59)\n #define PTA_AVX5124VNNIW\t(HOST_WIDE_INT_1 << 60)\n #define PTA_AVX5124FMAPS\t(HOST_WIDE_INT_1 << 61)\n+#define PTA_AVX512VPOPCNTDQ\t(HOST_WIDE_INT_1 << 62)\n \n #define PTA_CORE2 \\\n   (PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_SSSE3 \\\n@@ -5581,6 +5583,9 @@ ix86_option_override_internal (bool main_args_p,\n \tif (processor_alias_table[i].flags & PTA_AVX5124FMAPS\n \t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_AVX5124FMAPS))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX5124FMAPS;\n+\tif (processor_alias_table[i].flags & PTA_AVX512VPOPCNTDQ\n+\t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_AVX512VPOPCNTDQ))\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX512VPOPCNTDQ;\n \n \tif (processor_alias_table[i].flags & (PTA_PREFETCH_SSE | PTA_SSE))\n \t  x86_prefetch_sse = true;\n@@ -6625,6 +6630,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"avx512vl\",\tOPT_mavx512vl),\n     IX86_ATTR_ISA (\"avx5124fmaps\",\tOPT_mavx5124fmaps),\n     IX86_ATTR_ISA (\"avx5124vnniw\",\tOPT_mavx5124vnniw),\n+    IX86_ATTR_ISA (\"avx512vpopcntdq\",\tOPT_mavx512vpopcntdq),\n     IX86_ATTR_ISA (\"mmx\",\tOPT_mmmx),\n     IX86_ATTR_ISA (\"pclmul\",\tOPT_mpclmul),\n     IX86_ATTR_ISA (\"popcnt\",\tOPT_mpopcnt),\n@@ -33300,6 +33306,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     F_AVX512IFMA,\n     F_AVX5124VNNIW,\n     F_AVX5124FMAPS,\n+    F_AVX512VPOPCNTDQ,\n     F_MAX\n   };\n \n@@ -33414,6 +33421,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       {\"avx512ifma\",F_AVX512IFMA},\n       {\"avx5124vnniw\",F_AVX5124VNNIW},\n       {\"avx5124fmaps\",F_AVX5124FMAPS},\n+      {\"avx512vpopcntdq\",F_AVX512VPOPCNTDQ},\n     };\n \n   tree __processor_model_type = build_processor_model_struct ();\n@@ -34891,8 +34899,10 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V16SF_FTYPE_V4SF:\n     case V16SI_FTYPE_V4SI:\n     case V16SI_FTYPE_V16SF:\n+    case V16SI_FTYPE_V16SI:\n     case V16SF_FTYPE_V16SF:\n     case V8DI_FTYPE_UQI:\n+    case V8DI_FTYPE_V8DI:\n     case V8DF_FTYPE_V4DF:\n     case V8DF_FTYPE_V2DF:\n     case V8DF_FTYPE_V8DF:"}, {"sha": "a7d5f96835046527b51094f096cbd2c9e800a7cb", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -85,6 +85,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_AVX5124FMAPS_P(x) TARGET_ISA_AVX5124FMAPS_P(x)\n #define TARGET_AVX5124VNNIW\tTARGET_ISA_AVX5124VNNIW\n #define TARGET_AVX5124VNNIW_P(x) TARGET_ISA_AVX5124VNNIW_P(x)\n+#define TARGET_AVX512VPOPCNTDQ\tTARGET_ISA_AVX512VPOPCNTDQ\n+#define TARGET_AVX512VPOPCNTDQ_P(x) TARGET_ISA_AVX512VPOPCNTDQ_P(x)\n #define TARGET_FMA\tTARGET_ISA_FMA\n #define TARGET_FMA_P(x)\tTARGET_ISA_FMA_P(x)\n #define TARGET_SSE4A\tTARGET_ISA_SSE4A"}, {"sha": "11948a81c25087687d884803632738589a21ea30", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -705,6 +705,10 @@ mavx5124vnniw\n Target Report Mask(ISA_AVX5124VNNIW) Var(ix86_isa_flags2) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX5124VNNIW built-in functions and code generation.\n \n+mavx512vpopcntdq\n+Target Report Mask(ISA_AVX512VPOPCNTDQ) Var(ix86_isa_flags2) Save\n+Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512VPOPCNTDQ built-in functions and code generation.\n+\n mfma\n Target Report Mask(ISA_FMA) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and FMA built-in functions and code generation."}, {"sha": "80dfefe3c3050c58e09eb460d12ade8853197776", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -72,6 +72,8 @@\n \n #include <avx5124vnniwintrin.h>\n \n+#include <avx512vpopcntdqintrin.h>\n+\n #include <shaintrin.h>\n \n #include <lzcntintrin.h>"}, {"sha": "f75499418127e6578255358b85b1d73addd903c4", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -19875,3 +19875,10 @@\n    [(set_attr (\"type\") (\"ssemuladd\"))\n     (set_attr (\"prefix\") (\"evex\"))\n     (set_attr (\"mode\") (\"TI\"))])\n+\n+(define_insn \"vpopcount<mode><mask_name>\"\n+  [(set (match_operand:VI48_512 0 \"register_operand\" \"=v\")\n+\t(popcount:VI48_512\n+          (match_operand:VI48_512 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512VPOPCNTDQ\"\n+  \"vpopcnt<ssemodesuffix>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\")"}, {"sha": "c00016d98dc60cdfb2d7a78a3327ac62a4ed6a1c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -1,3 +1,16 @@\n+2017-01-10  Andrew Senkevich  <andrew.senkevich@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mavx512vpopcntdq.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/sse-12.c: Ditto.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/builtin_target.c: Handle new option.\n+\t* gcc.target/i386/funcspec-56.inc: Test new attributes.\n+\t* gcc.target/i386/avx512vpopcntdq-vpopcntd.c: New test.\n+\t* gcc.target/i386/avx512vpopcntdq-vpopcntq.c: Ditto.\n+\n 2017-01-09  Martin Sebor  <msebor@redhat.com>\n \n \tPR testsuite/79036"}, {"sha": "ad9fb7cf821e7c3ad443812551a8fbdb436ae923", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mclwb -mmwaitx -mclzero -mpku\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n    popcntintrin.h, fmaintrin.h, pkuintrin.h, avx5124fmapsintrin.h,\n-   avx5124vnniwintrin.h and mm_malloc.h.h are usable with\n-   -O -pedantic-errors.  */\n+   avx5124vnniwintrin.h, avx512vpopcntdqintrin.h and mm_malloc.h.h are usable\n+   with -O -pedantic-errors.  */\n \n #include <x86intrin.h>\n "}, {"sha": "084a1bb3046eb9aa4d3508288ede8cece0d6031b", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -1,10 +1,10 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mclwb -mmwaitx -mclzero -mpku\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n    popcntintrin.h, fmaintrin.h, pkuintrin.h, avx5124fmapsintrin.h,\n-   avx5124vnniwintrin.h and mm_malloc.h are usable with\n-   -O -fkeep-inline-functions.  */\n+   avx5124vnniwintrin.h, avx512vpopcntdqintrin.h and mm_malloc.h are\n+   usable with -O -fkeep-inline-functions.  */\n \n #include <x86intrin.h>"}, {"sha": "c55a05a25fb9c9b58f3957bb63bd047eae39f172", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdq-vpopcntd.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntd.c?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vpopcntdq\" } */\n+/* { dg-final { scan-assembler-times \"vpopcntd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+#include <x86intrin.h>\n+\n+extern __m512i z, z1;\n+\n+int foo ()\n+{\n+  __mmask16 msk;\n+  __m512i c = _mm512_popcnt_epi32 (z);\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm512_mask_popcnt_epi32 (z, msk, z1);\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm512_maskz_popcnt_epi32 (msk, z);\n+  asm volatile (\"\" : \"+v\" (c));\n+}"}, {"sha": "2698ec370ad81a1db72474d799e87cb9e9437adc", "filename": "gcc/testsuite/gcc.target/i386/avx512vpopcntdq-vpopcntq.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vpopcntdq-vpopcntq.c?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vpopcntdq\" } */\n+/* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpopcntq\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+#include <x86intrin.h>\n+\n+extern __m512i z, z1;\n+\n+int foo ()\n+{\n+  __mmask8 msk; \n+  __m512i c = _mm512_popcnt_epi64 (z);\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm512_mask_popcnt_epi64 (z, msk, z1);\n+  asm volatile (\"\" : \"+v\" (c));\n+  c = _mm512_maskz_popcnt_epi64 (msk, z);  \n+  asm volatile (\"\" : \"+v\" (c));\n+}"}, {"sha": "e50695c7091beceefa4fddbdad37ad2ff035cd5e", "filename": "gcc/testsuite/gcc.target/i386/builtin_target.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbuiltin_target.c?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -217,6 +217,8 @@ check_features (unsigned int ecx, unsigned int edx,\n \tassert (__builtin_cpu_supports (\"avx5124vnniw\"));\n       if (edx & bit_AVX5124FMAPS)\n \tassert (__builtin_cpu_supports (\"avx5124fmaps\"));\n+      if (ecx & bit_AVX512VPOPCNTDQ)\n+\tassert (__builtin_cpu_supports (\"avx512vpopcntdq\"));\n     }\n }\n \n@@ -319,6 +321,8 @@ quick_check ()\n \n   assert (__builtin_cpu_supports (\"avx5124fmaps\") >= 0);\n \n+  assert (__builtin_cpu_supports (\"avx512vpopcntdq\") >= 0);\n+\n   /* Check CPU type.  */\n   assert (__builtin_cpu_is (\"amd\") >= 0);\n "}, {"sha": "c999080d8ad32f2308f2521b321d1d978fcefadf", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -30,6 +30,7 @@ extern void test_avx512pf(void)\t\t\t__attribute__((__target__(\"avx512pf\")));\n extern void test_avx512cd(void)\t\t\t__attribute__((__target__(\"avx512cd\")));\n extern void test_avx5124fmaps(void)             __attribute__((__target__(\"avx5124fmaps\")));\n extern void test_avx5124vnniw(void)             __attribute__((__target__(\"avx5124vnniw\")));\n+extern void test_avx512vpopcntdq(void)\t\t__attribute__((__target__(\"avx512vpopcntdq\")));\n extern void test_bmi (void)\t\t\t__attribute__((__target__(\"bmi\")));\n extern void test_bmi2 (void)\t\t\t__attribute__((__target__(\"bmi2\")));\n \n@@ -63,6 +64,7 @@ extern void test_bo_avx512pf(void)\t\t__attribute__((__target__(\"no-avx512pf\")));\n extern void test_no_avx512cd(void)\t\t__attribute__((__target__(\"no-avx512cd\")));\n extern void test_no_avx5124fmaps(void)          __attribute__((__target__(\"no-avx5124fmaps\")));\n extern void test_no_avx5124vnniw(void)          __attribute__((__target__(\"no-avx5124vnniw\")));\n+extern void test_no_avx512vpopcntdq(void)\t__attribute__((__target__(\"no-avx512vpopcntdq\")));\n extern void test_no_bmi (void)\t\t\t__attribute__((__target__(\"no-bmi\")));\n extern void test_no_bmi2 (void)\t\t\t__attribute__((__target__(\"no-bmi2\")));\n "}, {"sha": "19ff7855232626bc16cc9e6ff23b9740e5193bcf", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mclwb -mmwaitx -mclzero -mpku\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "350e2eded49976ebe6fa34c9fe6e82dec22a3279", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mclwb -mmwaitx -mclzero -mpku\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "85f9119709dceb683fed5fde52c1d06a52ba5775", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -9,8 +9,8 @@\n    are defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h,\n    mm3dnow.h, fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h,\n    tbmintrin.h, lwpintrin.h, popcntintrin.h, fmaintrin.h,\n-   avx5124fmapsintrin.h, avx5124vnniwintrin.h and mm_malloc.h \n-   that reference the proper builtin functions.\n+   avx5124fmapsintrin.h, avx5124vnniwintrin.h, avx512vpopcntdqintrin.h and\n+   mm_malloc.h that reference the proper builtin functions.\n \n    Defining away \"extern\" and \"__inline\" results in all of them being\n    compiled as proper functions.  */\n@@ -101,7 +101,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -218,7 +218,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx5124fmaps,avx5124vnniw\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx5124fmaps,avx5124vnniw,avx512vpopcntdq\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "3fc1f75648ca0ede6a7a85f574a88158fcfd76fa", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -8,8 +8,8 @@\n    are defined as inline functions in {,x,e,p,t,s,w,a,b,i}mmintrin.h,\n    mm3dnow.h, fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h,\n    tbmintrin.h, lwpintrin.h, popcntintrin.h, fmaintrin.h,\n-   avx5124fmapsintrin.h, avx5124vnniwintrin.h and mm_malloc.h \n-   that reference the proper builtin functions.\n+   avx5124fmapsintrin.h, avx5124vnniwintrin.h, avx512vpopcntdqintrin.h\n+   and mm_malloc.h that reference the proper builtin functions.\n \n    Defining away \"extern\" and \"__inline\" results in all of them being\n    compiled as proper functions.  */\n@@ -595,6 +595,6 @@\n #define __builtin_ia32_extracti64x2_256_mask(A, E, C, D) __builtin_ia32_extracti64x2_256_mask(A, 1, C, D)\n #define __builtin_ia32_extractf64x2_256_mask(A, E, C, D) __builtin_ia32_extractf64x2_256_mask(A, 1, C, D)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,clwb,mwaitx,clzero,pku\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku\")\n \n #include <x86intrin.h>"}, {"sha": "87db42d8e43a9572fbaae38430e7bdab1c145d3a", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -1,3 +1,10 @@\n+2017-01-10  Andrew Senkevich  <andrew.senkevich@intel.com>\n+\n+\t* config/i386/cpuinfo.h (processor_features): Add\n+\tFEATURE_AVX512VPOPCNTDQ.\n+\t* config/i386/cpuinfo.c (get_available_features): Habdle new\n+\tfeature.\n+\n 2017-01-04  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/mips/sfp-machine.h (_FP_CHOOSENAN): Always preserve NaN"}, {"sha": "737d1aa14bd2f9e599d54e6b795cbfe75b89a20e", "filename": "libgcc/config/i386/cpuinfo.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -277,6 +277,8 @@ get_available_features (unsigned int ecx, unsigned int edx,\n \tfeatures |= (1 << FEATURE_AVX5124VNNIW);\n       if (edx & bit_AVX5124FMAPS)\n \tfeatures |= (1 << FEATURE_AVX5124FMAPS);\n+      if (ecx & bit_AVX512VPOPCNTDQ)\n+\tfeatures |= (1 << FEATURE_AVX512VPOPCNTDQ);\n     }\n \n   unsigned int ext_level;"}, {"sha": "872b45e3817cfd27bedf977b0d57945a5b913cfc", "filename": "libgcc/config/i386/cpuinfo.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h?ref=79fc8ffe6cd6e4b23c797e166ea3b0c1c0703c29", "patch": "@@ -104,7 +104,8 @@ enum processor_features\n   FEATURE_AVX512VBMI,\n   FEATURE_AVX512IFMA,\n   FEATURE_AVX5124VNNIW,\n-  FEATURE_AVX5124FMAPS\n+  FEATURE_AVX5124FMAPS,\n+  FEATURE_AVX512VPOPCNTDQ\n };\n \n extern struct __processor_model"}]}