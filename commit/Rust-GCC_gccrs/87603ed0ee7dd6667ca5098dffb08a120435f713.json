{"sha": "87603ed0ee7dd6667ca5098dffb08a120435f713", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc2MDNlZDBlZTdkZDY2NjdjYTUwOThkZmZiMDhhMTIwNDM1ZjcxMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-10-06T05:04:32Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-10-06T05:04:32Z"}, "message": "Warning fixes:\n\n        * Makefile.in (spew.o): Depend on toplev.h.\n        * call.c (compare_ics): Initialize variables `deref_from_type2',\n        `deref_to_type1' and `deref_to_type2'.\n        * except.c (get_eh_type): Hide prototype and definition.\n        (process_start_catch_block_old): Remove unused static prototype.\n        * pt.c (tsubst_decl): Initialize variable `argvec'.\n        * spew.c: Include toplev.h.\n\nFrom-SVN: r22864", "tree": {"sha": "62838ff33a249f3ac3ae22d9ad1118b5d78ad52d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62838ff33a249f3ac3ae22d9ad1118b5d78ad52d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87603ed0ee7dd6667ca5098dffb08a120435f713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87603ed0ee7dd6667ca5098dffb08a120435f713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87603ed0ee7dd6667ca5098dffb08a120435f713", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87603ed0ee7dd6667ca5098dffb08a120435f713/comments", "author": null, "committer": null, "parents": [{"sha": "bcd26ca722b3b5693c475c22a0f6a3794f242262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd26ca722b3b5693c475c22a0f6a3794f242262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcd26ca722b3b5693c475c22a0f6a3794f242262"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "fa705cc7ec1e54655f7d1b45c4bb4065e83a7c28", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87603ed0ee7dd6667ca5098dffb08a120435f713/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87603ed0ee7dd6667ca5098dffb08a120435f713/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=87603ed0ee7dd6667ca5098dffb08a120435f713", "patch": "@@ -1,3 +1,17 @@\n+Tue Oct  6 07:57:26 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (spew.o): Depend on toplev.h.\n+\n+\t* call.c (compare_ics): Initialize variables `deref_from_type2',\n+ \t`deref_to_type1' and `deref_to_type2'.\n+\n+\t* except.c (get_eh_type): Hide prototype and definition.\n+\t(process_start_catch_block_old): Remove unused static prototype.\n+\n+\t* pt.c (tsubst_decl): Initialize variable `argvec'.\n+\n+\t* spew.c: Include toplev.h.\n+\n 1998-10-05  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (instantiate_decl): Do save and restore file position."}, {"sha": "8c863ab9591e8cc40bbc3b286206eff7212eab4b", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87603ed0ee7dd6667ca5098dffb08a120435f713/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87603ed0ee7dd6667ca5098dffb08a120435f713/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=87603ed0ee7dd6667ca5098dffb08a120435f713", "patch": "@@ -243,8 +243,8 @@ $(srcdir)/hash.h:\n \tgperf -p -j1 -g -o -t -N is_reserved_word '-k1,4,7,$$' \\\n \t\t$(srcdir)/gxx.gperf >$(srcdir)/hash.h\n \n-spew.o : spew.c $(CONFIG_H) $(CXX_TREE_H) \\\n-  $(PARSE_H) $(srcdir)/../flags.h lex.h $(srcdir)/../system.h\n+spew.o : spew.c $(CONFIG_H) $(CXX_TREE_H) $(PARSE_H) $(srcdir)/../flags.h \\\n+  lex.h $(srcdir)/../system.h $(srcdir)/../toplev.h\n lex.o : lex.c $(CONFIG_H) $(CXX_TREE_H) \\\n   $(PARSE_H) input.c $(srcdir)/../flags.h hash.h lex.h \\\n   $(srcdir)/../c-pragma.h $(srcdir)/../system.h $(srcdir)/../toplev.h \\"}, {"sha": "f431885ab37348a2d936691a59a5a547a537a890", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87603ed0ee7dd6667ca5098dffb08a120435f713/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87603ed0ee7dd6667ca5098dffb08a120435f713/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=87603ed0ee7dd6667ca5098dffb08a120435f713", "patch": "@@ -3900,9 +3900,9 @@ compare_ics (ics1, ics2)\n   tree to_type1;\n   tree to_type2;\n   tree deref_from_type1 = NULL_TREE;\n-  tree deref_from_type2;\n-  tree deref_to_type1;\n-  tree deref_to_type2;\n+  tree deref_from_type2 = NULL_TREE;\n+  tree deref_to_type1 = NULL_TREE;\n+  tree deref_to_type2 = NULL_TREE;\n \n   /* REF_BINDING is non-zero if the result of the conversion sequence\n      is a reference type.   In that case TARGET_TYPE is the"}, {"sha": "c21ac240eff2d591828e8c035de33f2387f91edf", "filename": "gcc/cp/except.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87603ed0ee7dd6667ca5098dffb08a120435f713/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87603ed0ee7dd6667ca5098dffb08a120435f713/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=87603ed0ee7dd6667ca5098dffb08a120435f713", "patch": "@@ -52,12 +52,13 @@ static tree call_eh_info PROTO((void));\n static void push_eh_info PROTO((void));\n static tree get_eh_info PROTO((void));\n static tree get_eh_value PROTO((void));\n+#if 0\n static tree get_eh_type PROTO((void));\n+#endif\n static tree get_eh_caught PROTO((void));\n static tree get_eh_handlers PROTO((void));\n static tree do_pop_exception PROTO((void));\n static void process_start_catch_block PROTO((tree, tree));\n-static void process_start_catch_block_old PROTO((tree, tree));\n static tree build_eh_type_type_ref PROTO((tree));\n static tree build_terminate_handler PROTO((void));\n static tree alloc_eh_object PROTO((tree));\n@@ -360,12 +361,14 @@ get_eh_value ()\n \n /* Returns a reference to the current exception type.  */\n \n+#if 0\n static tree\n get_eh_type ()\n {\n   return build_component_ref (get_eh_info (), get_identifier (\"type\"),\n \t\t\t      NULL_TREE, 0);\n }\n+#endif\n \n /* Returns a reference to whether or not the current exception\n    has been caught.  */"}, {"sha": "10161f822ab0b1ea37aecaca756426e7860854ed", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87603ed0ee7dd6667ca5098dffb08a120435f713/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87603ed0ee7dd6667ca5098dffb08a120435f713/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=87603ed0ee7dd6667ca5098dffb08a120435f713", "patch": "@@ -5027,7 +5027,7 @@ tsubst_decl (t, args, type, in_decl)\n     case FUNCTION_DECL:\n       {\n \ttree ctx;\n-\ttree argvec;\n+\ttree argvec = NULL_TREE;\n \ttree gen_tmpl;\n \tint member;\n \tint args_depth;"}, {"sha": "ff93ac7e120bc66822a9fa6d0a1969a36f069b8e", "filename": "gcc/cp/spew.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87603ed0ee7dd6667ca5098dffb08a120435f713/gcc%2Fcp%2Fspew.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87603ed0ee7dd6667ca5098dffb08a120435f713/gcc%2Fcp%2Fspew.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fspew.c?ref=87603ed0ee7dd6667ca5098dffb08a120435f713", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"parse.h\"\n #include \"flags.h\"\n #include \"obstack.h\"\n+#include \"toplev.h\"\n \n /* This takes a token stream that hasn't decided much about types and\n    tries to figure out as much as it can, with excessive lookahead and"}]}