{"sha": "79ee9e8be85fa3bbe63c49ff5c789e896d71fdfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzllZTllOGJlODVmYTNiYmU2M2M0OWZmNWM3ODllODk2ZDcxZmRmZQ==", "commit": {"author": {"name": "Joel Sherrill", "email": "joel@gcc.gnu.org", "date": "2009-01-11T19:51:53Z"}, "committer": {"name": "Joel Sherrill", "email": "joel@gcc.gnu.org", "date": "2009-01-11T19:51:53Z"}, "message": "target-supports.exp: Add method to determine if the effective target is really a ppc405 after...\n\n2009-01-09  Joel Sherrill <joel.sherrill@oarcorp.com>\n\n\t* lib/target-supports.exp: Add method to determine if the effective\n\ttarget is really a ppc405 after applying all compile options.\n\t* gcc.target/powerpc/405-mulhhwu-2.c: Add dg-skip-if not ppc405.\n\t* gcc.target/powerpc/405-nmachhw-1.c: Likewise.\n\t* gcc.target/powerpc/405-nmaclhw-1.c: Likewise.\n\t* gcc.target/powerpc/405-machhwu-1.c: Likewise.\n\t* gcc.target/powerpc/405-mullhwu-1.c: Likewise.\n\t* gcc.target/powerpc/405-nmacchw-1.c: Likewise.\n\t* gcc.target/powerpc/405-mulchwu-1.c: Likewise.\n\t* gcc.target/powerpc/405-nmachhw-2.c: Likewise.\n\t* gcc.target/powerpc/405-nmaclhw-2.c: Likewise.\n\t* gcc.target/powerpc/405-machhwu-2.c: Likewise.\n\t* gcc.target/powerpc/405-mulhhw-1.c: Likewise.\n\t* gcc.target/powerpc/405-machhw-1.c: Likewise.\n\t* gcc.target/powerpc/405-mullhw-1.c: Likewise.\n\t* gcc.target/powerpc/405-maclhw-1.c: Likewise.\n\t* gcc.target/powerpc/405-dlmzb-strlen-1.c: Likewise.\n\t* gcc.target/powerpc/405-mullhwu-2.c: Likewise.\n\t* gcc.target/powerpc/405-nmacchw-2.c: Likewise.\n\t* gcc.target/powerpc/405-mulchwu-2.c: Likewise.\n\t* gcc.target/powerpc/405-mulchw-1.c: Likewise.\n\t* gcc.target/powerpc/405-maclhwu-1.c: Likewise.\n\t* gcc.target/powerpc/405-macchw-1.c: Likewise.\n\t* gcc.target/powerpc/405-mulhhw-2.c: Likewise.\n\t* gcc.target/powerpc/405-machhw-2.c: Likewise.\n\t* gcc.target/powerpc/405-mullhw-2.c: Likewise.\n\t* gcc.target/powerpc/405-maclhw-2.c: Likewise.\n\t* gcc.target/powerpc/405-macchwu-1.c: Likewise.\n\t* gcc.target/powerpc/405-mulhhwu-1.c: Likewise.\n\t* gcc.target/powerpc/405-mulchw-2.c: Likewise.\n\t* gcc.target/powerpc/405-maclhwu-2.c: Likewise.\n\t* gcc.target/powerpc/405-macchw-2.c: Likewise.\n\t* gcc.target/powerpc/405-macchwu-2.c: Likewise.\n\nFrom-SVN: r143279", "tree": {"sha": "806bbdb8b988c54085c53d4961302fc0d807a66f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/806bbdb8b988c54085c53d4961302fc0d807a66f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79ee9e8be85fa3bbe63c49ff5c789e896d71fdfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ee9e8be85fa3bbe63c49ff5c789e896d71fdfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ee9e8be85fa3bbe63c49ff5c789e896d71fdfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ee9e8be85fa3bbe63c49ff5c789e896d71fdfe/comments", "author": null, "committer": null, "parents": [{"sha": "2ab5ef3ed77e73817884e906dd4e8007751c7a8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab5ef3ed77e73817884e906dd4e8007751c7a8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ab5ef3ed77e73817884e906dd4e8007751c7a8b"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "bee879efa218fb63dfd2062401ecb91f7b2dc925", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee9e8be85fa3bbe63c49ff5c789e896d71fdfe/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee9e8be85fa3bbe63c49ff5c789e896d71fdfe/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=79ee9e8be85fa3bbe63c49ff5c789e896d71fdfe", "patch": "@@ -1474,6 +1474,23 @@ proc check_effective_target_powerpc_altivec { } {\n     }\n }\n \n+# Return 1 if this is a PowerPC 405 target.  The check includes options\n+# specified by dg-options for this test, so don't cache the result.\n+\n+proc check_effective_target_powerpc_405_nocache { } {\n+    if { [istarget powerpc*-*-*] || [istarget rs6000-*-*] } {\n+\treturn [check_no_compiler_messages_nocache powerpc_405 object {\n+\t    #ifdef __PPC405__\n+\t    int dummy;\n+\t    #else\n+\t    #error not a PPC405\n+\t    #endif\n+\t} [current_compiler_flags]]\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n # Return 1 if this is a SPU target with a toolchain that\n # supports automatic overlay generation.\n "}]}