{"sha": "f8411fcce91e66df8d6dae01b1e6444e57428228", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg0MTFmY2NlOTFlNjZkZjhkNmRhZTAxYjFlNjQ0NGU1NzQyODIyOA==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2013-07-02T11:02:17Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2013-07-02T11:02:17Z"}, "message": "AArch64 - Update insv tests for big endian\n\nFrom-SVN: r200597", "tree": {"sha": "e175806840ef4ec07970c12e758b03258be0db83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e175806840ef4ec07970c12e758b03258be0db83"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8411fcce91e66df8d6dae01b1e6444e57428228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8411fcce91e66df8d6dae01b1e6444e57428228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8411fcce91e66df8d6dae01b1e6444e57428228", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8411fcce91e66df8d6dae01b1e6444e57428228/comments", "author": null, "committer": null, "parents": [{"sha": "26366d281617fd14f94c66c91ca39af63aa733e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26366d281617fd14f94c66c91ca39af63aa733e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26366d281617fd14f94c66c91ca39af63aa733e7"}], "stats": {"total": 104, "additions": 103, "deletions": 1}, "files": [{"sha": "0c0cae35a2740eff9bb45538f2e3290ff9ab9084", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8411fcce91e66df8d6dae01b1e6444e57428228/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8411fcce91e66df8d6dae01b1e6444e57428228/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8411fcce91e66df8d6dae01b1e6444e57428228", "patch": "@@ -1,3 +1,10 @@\n+2013-07-02  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* gcc.target/config/aarch64/insv_1.c: Update to show it doesn't work\n+\ton big endian.\n+\t* gcc.target/config/aarch64/insv_2.c: New test for big endian.\n+\t* lib/target-supports.exp: Define aarch64_little_endian.\n+\n 2013-07-02  Ian Bolton  <ian.bolton@arm.com>\n \n \t* gcc.target/aarch64/abs_1.c: New test."}, {"sha": "6e3c7f0e9c47f3acda3fbc3942a4da370a50ae50", "filename": "gcc/testsuite/gcc.target/aarch64/insv_1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8411fcce91e66df8d6dae01b1e6444e57428228/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finsv_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8411fcce91e66df8d6dae01b1e6444e57428228/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finsv_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finsv_1.c?ref=f8411fcce91e66df8d6dae01b1e6444e57428228", "patch": "@@ -1,5 +1,6 @@\n-/* { dg-do run } */\n+/* { dg-do run { target aarch64*-*-* } } */\n /* { dg-options \"-O2 --save-temps -fno-inline\" } */\n+/* { dg-require-effective-target aarch64_little_endian } */\n \n extern void abort (void);\n "}, {"sha": "a7691a32f2bfa4a3929fa67c1c21af561f6c2dbb", "filename": "gcc/testsuite/gcc.target/aarch64/insv_2.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8411fcce91e66df8d6dae01b1e6444e57428228/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finsv_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8411fcce91e66df8d6dae01b1e6444e57428228/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finsv_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Finsv_2.c?ref=f8411fcce91e66df8d6dae01b1e6444e57428228", "patch": "@@ -0,0 +1,85 @@\n+/* { dg-do run { target aarch64*-*-* } } */\n+/* { dg-options \"-O2 --save-temps -fno-inline\" } */\n+/* { dg-require-effective-target aarch64_big_endian } */\n+\n+extern void abort (void);\n+\n+typedef struct bitfield\n+{\n+  unsigned short eight: 8;\n+  unsigned short four: 4;\n+  unsigned short five: 5;\n+  unsigned short seven: 7;\n+  unsigned int sixteen: 16;\n+} bitfield;\n+\n+bitfield\n+bfi1 (bitfield a)\n+{\n+  /* { dg-final { scan-assembler \"bfi\\tx\\[0-9\\]+, x\\[0-9\\]+, 56, 8\" } } */\n+  a.eight = 3;\n+  return a;\n+}\n+\n+bitfield\n+bfi2 (bitfield a)\n+{\n+  /* { dg-final { scan-assembler \"bfi\\tx\\[0-9\\]+, x\\[0-9\\]+, 43, 5\" } } */\n+  a.five = 7;\n+  return a;\n+}\n+\n+bitfield\n+movk (bitfield a)\n+{\n+  /* { dg-final { scan-assembler \"movk\\tx\\[0-9\\]+, 0x1d6b, lsl 16\" } } */\n+  a.sixteen = 7531;\n+  return a;\n+}\n+\n+bitfield\n+set1 (bitfield a)\n+{\n+  /* { dg-final { scan-assembler \"orr\\tx\\[0-9\\]+, x\\[0-9\\]+, 272678883688448\" } } */\n+  a.five = 0x1f;\n+  return a;\n+}\n+\n+bitfield\n+set0 (bitfield a)\n+{\n+  /* { dg-final { scan-assembler \"and\\tx\\[0-9\\]+, x\\[0-9\\]+, -272678883688449\" } } */\n+  a.five = 0;\n+  return a;\n+}\n+\n+\n+int\n+main (int argc, char** argv)\n+{\n+  static bitfield a;\n+  bitfield b = bfi1 (a);\n+  bitfield c = bfi2 (b);\n+  bitfield d = movk (c);\n+\n+  if (d.eight != 3)\n+    abort ();\n+\n+  if (d.five != 7)\n+    abort ();\n+\n+  if (d.sixteen != 7531)\n+    abort ();\n+\n+  d = set1 (d);\n+  if (d.five != 0x1f)\n+    abort ();\n+\n+  d = set0 (d);\n+  if (d.five != 0)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "c7936119b312aada5024ec69a480fc605b43e7fa", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8411fcce91e66df8d6dae01b1e6444e57428228/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8411fcce91e66df8d6dae01b1e6444e57428228/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=f8411fcce91e66df8d6dae01b1e6444e57428228", "patch": "@@ -2106,6 +2106,15 @@ proc check_effective_target_aarch64_big_endian { } {\n     }]\n }\n \n+# Return 1 if this is a AArch64 target supporting little endian\n+proc check_effective_target_aarch64_little_endian { } {\n+    return [check_no_compiler_messages aarch64_little_endian assembly {\n+        #if !defined(__aarch64__) || defined(__AARCH64EB__)\n+        #error FOO\n+        #endif\n+    }]\n+}\n+\n # Return 1 is this is an arm target using 32-bit instructions\n proc check_effective_target_arm32 { } {\n     return [check_no_compiler_messages arm32 assembly {"}]}