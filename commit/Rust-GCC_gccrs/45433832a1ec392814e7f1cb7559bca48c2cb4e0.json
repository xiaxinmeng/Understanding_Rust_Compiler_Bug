{"sha": "45433832a1ec392814e7f1cb7559bca48c2cb4e0", "node_id": "C_kwDOANBUbNoAKDQ1NDMzODMyYTFlYzM5MjgxNGU3ZjFjYjc1NTliY2E0OGMyY2I0ZTA", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-01T19:40:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-02T15:57:49Z"}, "message": "libstdc++: Optimize constructible/assignable variable templates\n\nThis defines the is_xxx_constructible_v and is_xxx_assignable_v variable\ntemplates by using the built-ins directly. The actual logic for each one\nis the same as the corresponding class template, but way using the\nvariable template doesn't need to instantiate the class template.\n\nThis means that the variable templates won't use the static assertions\nchecking for complete types, cv void or unbounded arrays, but that's OK\nbecause the built-ins check those anyway. We could probably remove the\nstatic assertions from the class templates, and maybe from all type\ntraits that use a built-in.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/type_traits (is_constructible_v)\n\t(is_default_constructible_v, is_copy_constructible_v)\n\t(is_move_constructible_v): Define using __is_constructible.\n\t(is_assignable_v, is_copy_assignable_v, is_move_assignable_v):\n\tDefine using __is_assignable.\n\t(is_trivially_constructible_v)\n\t(is_trivially_default_constructible_v)\n\t(is_trivially_copy_constructible_v)\n\t(is_trivially_move_constructible_v): Define using\n\t__is_trivially_constructible.\n\t(is_trivially_assignable_v, is_trivially_copy_assignable_v)\n\t(is_trivially_move_assignable_v): Define using\n\t__is_trivially_assignable.\n\t(is_nothrow_constructible_v)\n\t(is_nothrow_default_constructible_v)\n\t(is_nothrow_copy_constructible_v)\n\t(is_nothrow_move_constructible_v): Define using\n\t__is_nothrow_constructible.\n\t(is_nothrow_assignable_v, is_nothrow_copy_assignable_v)\n\t(is_nothrow_move_assignable_v): Define using\n\t__is_nothrow_assignable.", "tree": {"sha": "1beb2273cd6b977aed67874d472e1f1150452def", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1beb2273cd6b977aed67874d472e1f1150452def"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45433832a1ec392814e7f1cb7559bca48c2cb4e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45433832a1ec392814e7f1cb7559bca48c2cb4e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45433832a1ec392814e7f1cb7559bca48c2cb4e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45433832a1ec392814e7f1cb7559bca48c2cb4e0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51c42b38e43b5283b116882529d232719b099bfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51c42b38e43b5283b116882529d232719b099bfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51c42b38e43b5283b116882529d232719b099bfc"}], "stats": {"total": 88, "additions": 49, "deletions": 39}, "files": [{"sha": "2f5fe80b98a7ea90c88af9d8e661fc16f3699e8b", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 49, "deletions": 39, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45433832a1ec392814e7f1cb7559bca48c2cb4e0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45433832a1ec392814e7f1cb7559bca48c2cb4e0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=45433832a1ec392814e7f1cb7559bca48c2cb4e0", "patch": "@@ -3105,71 +3105,81 @@ template <typename _Tp>\n   inline constexpr bool is_signed_v = is_signed<_Tp>::value;\n template <typename _Tp>\n   inline constexpr bool is_unsigned_v = is_unsigned<_Tp>::value;\n+\n template <typename _Tp, typename... _Args>\n-  inline constexpr bool is_constructible_v =\n-    is_constructible<_Tp, _Args...>::value;\n+  inline constexpr bool is_constructible_v = __is_constructible(_Tp, _Args...);\n template <typename _Tp>\n-  inline constexpr bool is_default_constructible_v =\n-    is_default_constructible<_Tp>::value;\n+  inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);\n template <typename _Tp>\n-  inline constexpr bool is_copy_constructible_v =\n-    is_copy_constructible<_Tp>::value;\n+  inline constexpr bool is_copy_constructible_v\n+    = __is_constructible(_Tp, __add_lval_ref_t<const _Tp>);\n template <typename _Tp>\n-  inline constexpr bool is_move_constructible_v =\n-    is_move_constructible<_Tp>::value;\n+  inline constexpr bool is_move_constructible_v\n+    = __is_constructible(_Tp, __add_rval_ref_t<_Tp>);\n+\n template <typename _Tp, typename _Up>\n-  inline constexpr bool is_assignable_v = is_assignable<_Tp, _Up>::value;\n+  inline constexpr bool is_assignable_v = __is_assignable(_Tp, _Up);\n template <typename _Tp>\n-  inline constexpr bool is_copy_assignable_v = is_copy_assignable<_Tp>::value;\n+  inline constexpr bool is_copy_assignable_v\n+    = __is_assignable(__add_lval_ref_t<_Tp>, __add_lval_ref_t<const _Tp>);\n template <typename _Tp>\n-  inline constexpr bool is_move_assignable_v = is_move_assignable<_Tp>::value;\n+  inline constexpr bool is_move_assignable_v\n+    = __is_assignable(__add_lval_ref_t<_Tp>, __add_rval_ref_t<_Tp>);\n+\n template <typename _Tp>\n   inline constexpr bool is_destructible_v = is_destructible<_Tp>::value;\n+\n template <typename _Tp, typename... _Args>\n-  inline constexpr bool is_trivially_constructible_v =\n-    is_trivially_constructible<_Tp, _Args...>::value;\n+  inline constexpr bool is_trivially_constructible_v\n+    = __is_trivially_constructible(_Tp, _Args...);\n template <typename _Tp>\n-  inline constexpr bool is_trivially_default_constructible_v =\n-    is_trivially_default_constructible<_Tp>::value;\n+  inline constexpr bool is_trivially_default_constructible_v\n+    = __is_trivially_constructible(_Tp);\n template <typename _Tp>\n-  inline constexpr bool is_trivially_copy_constructible_v =\n-    is_trivially_copy_constructible<_Tp>::value;\n+  inline constexpr bool is_trivially_copy_constructible_v\n+    = __is_trivially_constructible(_Tp, __add_lval_ref_t<const _Tp>);\n template <typename _Tp>\n-  inline constexpr bool is_trivially_move_constructible_v =\n-    is_trivially_move_constructible<_Tp>::value;\n+  inline constexpr bool is_trivially_move_constructible_v\n+    = __is_trivially_constructible(_Tp, __add_rval_ref_t<_Tp>);\n+\n template <typename _Tp, typename _Up>\n-  inline constexpr bool is_trivially_assignable_v =\n-    is_trivially_assignable<_Tp, _Up>::value;\n+  inline constexpr bool is_trivially_assignable_v\n+    = __is_trivially_assignable(_Tp, _Up);\n template <typename _Tp>\n-  inline constexpr bool is_trivially_copy_assignable_v =\n-    is_trivially_copy_assignable<_Tp>::value;\n+  inline constexpr bool is_trivially_copy_assignable_v\n+    = __is_trivially_assignable(__add_lval_ref_t<_Tp>,\n+\t\t\t\t__add_lval_ref_t<const _Tp>);\n template <typename _Tp>\n-  inline constexpr bool is_trivially_move_assignable_v =\n-    is_trivially_move_assignable<_Tp>::value;\n+  inline constexpr bool is_trivially_move_assignable_v\n+    = __is_trivially_assignable(__add_lval_ref_t<_Tp>,\n+\t\t\t\t__add_rval_ref_t<_Tp>);\n template <typename _Tp>\n   inline constexpr bool is_trivially_destructible_v =\n     is_trivially_destructible<_Tp>::value;\n template <typename _Tp, typename... _Args>\n-  inline constexpr bool is_nothrow_constructible_v =\n-    is_nothrow_constructible<_Tp, _Args...>::value;\n+  inline constexpr bool is_nothrow_constructible_v\n+    = __is_nothrow_constructible(_Tp, _Args...);\n template <typename _Tp>\n-  inline constexpr bool is_nothrow_default_constructible_v =\n-    is_nothrow_default_constructible<_Tp>::value;\n+  inline constexpr bool is_nothrow_default_constructible_v\n+    = __is_nothrow_constructible(_Tp);\n template <typename _Tp>\n-  inline constexpr bool is_nothrow_copy_constructible_v =\n-    is_nothrow_copy_constructible<_Tp>::value;\n+  inline constexpr bool is_nothrow_copy_constructible_v\n+    = __is_nothrow_constructible(_Tp, __add_lval_ref_t<const _Tp>);\n template <typename _Tp>\n-  inline constexpr bool is_nothrow_move_constructible_v =\n-    is_nothrow_move_constructible<_Tp>::value;\n+  inline constexpr bool is_nothrow_move_constructible_v\n+    = __is_nothrow_constructible(_Tp, __add_rval_ref_t<_Tp>);\n+\n template <typename _Tp, typename _Up>\n-  inline constexpr bool is_nothrow_assignable_v =\n-    is_nothrow_assignable<_Tp, _Up>::value;\n+  inline constexpr bool is_nothrow_assignable_v\n+    = __is_nothrow_assignable(_Tp, _Up);\n template <typename _Tp>\n-  inline constexpr bool is_nothrow_copy_assignable_v =\n-    is_nothrow_copy_assignable<_Tp>::value;\n+  inline constexpr bool is_nothrow_copy_assignable_v\n+    = __is_nothrow_assignable(__add_lval_ref_t<_Tp>,\n+\t\t\t      __add_lval_ref_t<const _Tp>);\n template <typename _Tp>\n-  inline constexpr bool is_nothrow_move_assignable_v =\n-    is_nothrow_move_assignable<_Tp>::value;\n+  inline constexpr bool is_nothrow_move_assignable_v\n+    = __is_nothrow_assignable(__add_lval_ref_t<_Tp>, __add_rval_ref_t<_Tp>);\n+\n template <typename _Tp>\n   inline constexpr bool is_nothrow_destructible_v =\n     is_nothrow_destructible<_Tp>::value;"}]}