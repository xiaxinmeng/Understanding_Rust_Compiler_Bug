{"sha": "20b9851c46d589a350b81ddb00db9a8cc424f048", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBiOTg1MWM0NmQ1ODlhMzUwYjgxZGRiMDBkYjlhOGNjNDI0ZjA0OA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-04-12T19:25:56Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-04-12T19:25:56Z"}, "message": "re PR middle-end/70680 (OpenMP SIMD linear variable privatized too eagerly)\n\n[gcc]\n2016-04-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/70680\n\t* config/rs6000/rs6000.md (ieee_128bit_vsx_neg<mode>2_internal):\n\tDo not use \"=\" constraint on an input constraint.\n\t(ieee_128bit_vsx_abs<mode>2_internal): Likewise.\n\t(ieee_128bit_vsx_nabs<mode>2_internal): Likewise.\n\t(ieee_128bit_vsx_nabs<mode>2): Correct splitter so that it\n\tgenerates (neg (abs ...)) instead of (abs ...).\n\n[gcc/testsuite]\n2016-04-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/70680\n\t* gcc.target/powerpc/pr70640.c: New test.\n\nFrom-SVN: r234910", "tree": {"sha": "d43ead551f5fd243b64878a8c51bad5b5ea3871b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d43ead551f5fd243b64878a8c51bad5b5ea3871b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20b9851c46d589a350b81ddb00db9a8cc424f048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b9851c46d589a350b81ddb00db9a8cc424f048", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20b9851c46d589a350b81ddb00db9a8cc424f048", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b9851c46d589a350b81ddb00db9a8cc424f048/comments", "author": null, "committer": null, "parents": [{"sha": "2b2f52bccfd2f83ff0ed5e33baabd9f9266132f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2f52bccfd2f83ff0ed5e33baabd9f9266132f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b2f52bccfd2f83ff0ed5e33baabd9f9266132f3"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "d132dcf2879407aaf0bc5074af298ff7f2d11457", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b9851c46d589a350b81ddb00db9a8cc424f048/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b9851c46d589a350b81ddb00db9a8cc424f048/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20b9851c46d589a350b81ddb00db9a8cc424f048", "patch": "@@ -1,3 +1,13 @@\n+2016-04-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/70680\n+\t* config/rs6000/rs6000.md (ieee_128bit_vsx_neg<mode>2_internal):\n+\tDo not use \"=\" constraint on an input constraint.\n+\t(ieee_128bit_vsx_abs<mode>2_internal): Likewise.\n+\t(ieee_128bit_vsx_nabs<mode>2_internal): Likewise.\n+\t(ieee_128bit_vsx_nabs<mode>2): Correct splitter so that it\n+\tgenerates (neg (abs ...)) instead of (abs ...).\n+\n 2016-04-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/70596"}, {"sha": "849b19a7b0b0c834d9cc571fa7d101b654ca8c77", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b9851c46d589a350b81ddb00db9a8cc424f048/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b9851c46d589a350b81ddb00db9a8cc424f048/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=20b9851c46d589a350b81ddb00db9a8cc424f048", "patch": "@@ -7261,7 +7261,7 @@\n (define_insn \"*ieee_128bit_vsx_neg<mode>2_internal\"\n   [(set (match_operand:IEEE128 0 \"register_operand\" \"=wa\")\n \t(neg:IEEE128 (match_operand:IEEE128 1 \"register_operand\" \"wa\")))\n-   (use (match_operand:V16QI 2 \"register_operand\" \"=v\"))]\n+   (use (match_operand:V16QI 2 \"register_operand\" \"v\"))]\n   \"TARGET_FLOAT128 && !TARGET_FLOAT128_HW\"\n   \"xxlxor %x0,%x1,%x2\"\n   [(set_attr \"type\" \"vecsimple\")])\n@@ -7290,7 +7290,7 @@\n (define_insn \"*ieee_128bit_vsx_abs<mode>2_internal\"\n   [(set (match_operand:IEEE128 0 \"register_operand\" \"=wa\")\n \t(abs:IEEE128 (match_operand:IEEE128 1 \"register_operand\" \"wa\")))\n-   (use (match_operand:V16QI 2 \"register_operand\" \"=v\"))]\n+   (use (match_operand:V16QI 2 \"register_operand\" \"v\"))]\n   \"TARGET_FLOAT128 && !TARGET_FLOAT128_HW\"\n   \"xxlandc %x0,%x1,%x2\"\n   [(set_attr \"type\" \"vecsimple\")])\n@@ -7306,7 +7306,7 @@\n   \"#\"\n   \"&& 1\"\n   [(parallel [(set (match_dup 0)\n-\t\t   (abs:IEEE128 (match_dup 1)))\n+\t\t   (neg:IEEE128 (abs:IEEE128 (match_dup 1))))\n \t      (use (match_dup 2))])]\n {\n   if (GET_CODE (operands[2]) == SCRATCH)\n@@ -7323,7 +7323,7 @@\n \t(neg:IEEE128\n \t (abs:IEEE128\n \t  (match_operand:IEEE128 1 \"register_operand\" \"wa\"))))\n-   (use (match_operand:V16QI 2 \"register_operand\" \"=v\"))]\n+   (use (match_operand:V16QI 2 \"register_operand\" \"v\"))]\n   \"TARGET_FLOAT128 && !TARGET_FLOAT128_HW\"\n   \"xxlor %x0,%x1,%x2\"\n   [(set_attr \"type\" \"vecsimple\")])"}, {"sha": "996117b9de3cd17edeba5dd2e4efa3280a65c22a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b9851c46d589a350b81ddb00db9a8cc424f048/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b9851c46d589a350b81ddb00db9a8cc424f048/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=20b9851c46d589a350b81ddb00db9a8cc424f048", "patch": "@@ -1,3 +1,8 @@\n+2016-04-12  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/70680\n+\t* gcc.target/powerpc/pr70640.c: New test.\n+\n 2016-04-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/68722"}, {"sha": "7b991c45afefd761fa0e29a55c5591bed86da77d", "filename": "gcc/testsuite/gcc.target/powerpc/pr70640.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20b9851c46d589a350b81ddb00db9a8cc424f048/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70640.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20b9851c46d589a350b81ddb00db9a8cc424f048/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70640.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr70640.c?ref=20b9851c46d589a350b81ddb00db9a8cc424f048", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { powerpc*-*-linux* } } } */\n+/* { dg-require-effective-target powerpc_float128_sw_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-O2 -mcpu=power8 -mfloat128\" } */\n+\n+__float128 foo (__float128 a) { return -a; }\n+\n+/* { dg-final { scan-assembler \"xxlorc\" } } */\n+/* { dg-final { scan-assembler \"xxlxor\" } } */\n+/* { dg-final { scan-assembler \"vslb\"   } } */\n+/* { dg-final { scan-assembler \"vsldoi\" } } */"}]}