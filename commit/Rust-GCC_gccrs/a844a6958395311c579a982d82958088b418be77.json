{"sha": "a844a6958395311c579a982d82958088b418be77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg0NGE2OTU4Mzk1MzExYzU3OWE5ODJkODI5NTgwODhiNDE4YmU3Nw==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-12-03T12:12:07Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-12-03T12:12:07Z"}, "message": "[AArch64] Remove/merge redundant iterators\n\n\t* config/aarch64/aarch64-simd.md (aarch64_simd_dup<mode>, orn<mode>3,\n\tbic<mode>3, add<mode>3, sub<mode>3, neg<mode>2, abs<mode>2, and<mode>3,\n\tior<mode>3, xor<mode>3, one_cmpl<mode>2,\n\taarch64_simd_lshr<mode> ,arch64_simd_ashr<mode>,\n\taarch64_simd_imm_shl<mode>, aarch64_simd_reg_sshl<mode>,\n\taarch64_simd_reg_shl<mode>_unsigned, aarch64_simd_reg_shr<mode>_signed,\n\tashl<mode>3, lshr<mode>3, ashr<mode>3, vashl<mode>3,\n\treduc_plus_scal_<mode>, aarch64_vcond_internal<mode><mode>,\n\tvcondu<mode><mode>, aarch64_cm<optab><mode>, aarch64_cmtst<mode>):\n\tChange VDQ to VDQ_I.\n\n\t(mul<mode>3): Change VDQM to VDQ_BHSI.\n\t(aarch64_simd_vec_set<mode>,vashr<mode>3, vlshr<mode>3, vec_set<mode>,\n\taarch64_mla<mode>, aarch64_mls<mode>, <su><maxmin><mode>3,\n\taarch64_<sur>h<addsub><mode>): Change VQ_S to VDQ_BHSI.\n\t\n\t(*aarch64_<su>mlal<mode>, *aarch64_<su>mlsl<mode>,\n\taarch64_<ANY_EXTEND:su><ADDSUB:optab>l<mode>,\n\taarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>, aarch64_<sur>shll_n<mode>):\n\tChange VDW to VD_BHSI.\n\t(*aarch64_combinez<mode>, *aarch64_combinez_be<mode>):\n\tChange VDIC to VD_BHSI.\n\n\t* config/aarch64/aarch64-simd-builtins.def (saddl, uaddl, ssubl, usubl,\n\tsaddw, uaddw, ssubw, usubw, shadd, uhadd, srhadd, urhadd, sshll_n,\n\tushll_n): Change BUILTIN_VDW to BUILTIN_VD_BHSI.\n\n\t* config/aarch64/iterators.md (SDQ_I, VDQ, VQ_S, VSDQ_I_BHSI, VDQM, VDW,\n\tVDIC, VDQQHS): Remove.\n\t(Vwtype): Update comment (changing VDW to VD_BHSI).\n\nFrom-SVN: r218310", "tree": {"sha": "8f47f46b73603dcea6f0afa4a5acce2f1e17f8a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f47f46b73603dcea6f0afa4a5acce2f1e17f8a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a844a6958395311c579a982d82958088b418be77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a844a6958395311c579a982d82958088b418be77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a844a6958395311c579a982d82958088b418be77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a844a6958395311c579a982d82958088b418be77/comments", "author": null, "committer": null, "parents": [{"sha": "db97b3b018921112adad38c5a7a4726fb4262e8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db97b3b018921112adad38c5a7a4726fb4262e8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db97b3b018921112adad38c5a7a4726fb4262e8b"}], "stats": {"total": 326, "additions": 168, "deletions": 158}, "files": [{"sha": "b688d82b2a835ff149d928b9e87c2faf21d99676", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a844a6958395311c579a982d82958088b418be77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a844a6958395311c579a982d82958088b418be77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a844a6958395311c579a982d82958088b418be77", "patch": "@@ -1,3 +1,36 @@\n+2014-12-03  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_dup<mode>, orn<mode>3,\n+\tbic<mode>3, add<mode>3, sub<mode>3, neg<mode>2, abs<mode>2, and<mode>3,\n+\tior<mode>3, xor<mode>3, one_cmpl<mode>2,\n+\taarch64_simd_lshr<mode> ,arch64_simd_ashr<mode>,\n+\taarch64_simd_imm_shl<mode>, aarch64_simd_reg_sshl<mode>,\n+\taarch64_simd_reg_shl<mode>_unsigned, aarch64_simd_reg_shr<mode>_signed,\n+\tashl<mode>3, lshr<mode>3, ashr<mode>3, vashl<mode>3,\n+\treduc_plus_scal_<mode>, aarch64_vcond_internal<mode><mode>,\n+\tvcondu<mode><mode>, aarch64_cm<optab><mode>, aarch64_cmtst<mode>):\n+\tChange VDQ to VDQ_I.\n+\n+\t(mul<mode>3): Change VDQM to VDQ_BHSI.\n+\t(aarch64_simd_vec_set<mode>,vashr<mode>3, vlshr<mode>3, vec_set<mode>,\n+\taarch64_mla<mode>, aarch64_mls<mode>, <su><maxmin><mode>3,\n+\taarch64_<sur>h<addsub><mode>): Change VQ_S to VDQ_BHSI.\n+\t\n+\t(*aarch64_<su>mlal<mode>, *aarch64_<su>mlsl<mode>,\n+\taarch64_<ANY_EXTEND:su><ADDSUB:optab>l<mode>,\n+\taarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>, aarch64_<sur>shll_n<mode>):\n+\tChange VDW to VD_BHSI.\n+\t(*aarch64_combinez<mode>, *aarch64_combinez_be<mode>):\n+\tChange VDIC to VD_BHSI.\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (saddl, uaddl, ssubl, usubl,\n+\tsaddw, uaddw, ssubw, usubw, shadd, uhadd, srhadd, urhadd, sshll_n,\n+\tushll_n): Change BUILTIN_VDW to BUILTIN_VD_BHSI.\n+\n+\t* config/aarch64/iterators.md (SDQ_I, VDQ, VQ_S, VSDQ_I_BHSI, VDQM, VDW,\n+\tVDIC, VDQQHS): Remove.\n+\t(Vwtype): Update comment (changing VDW to VD_BHSI).\n+\n 2014-12-03  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/14541"}, {"sha": "4eb70ff629f9e3f317c4518046b1e0e88277ef88", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a844a6958395311c579a982d82958088b418be77/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a844a6958395311c579a982d82958088b418be77/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=a844a6958395311c579a982d82958088b418be77", "patch": "@@ -114,20 +114,20 @@\n   BUILTIN_VQW (BINOP, ssubw2, 0)\n   BUILTIN_VQW (BINOP, usubw2, 0)\n   /* Implemented by aarch64_<ANY_EXTEND:su><ADDSUB:optab>l<mode>.  */\n-  BUILTIN_VDW (BINOP, saddl, 0)\n-  BUILTIN_VDW (BINOP, uaddl, 0)\n-  BUILTIN_VDW (BINOP, ssubl, 0)\n-  BUILTIN_VDW (BINOP, usubl, 0)\n+  BUILTIN_VD_BHSI (BINOP, saddl, 0)\n+  BUILTIN_VD_BHSI (BINOP, uaddl, 0)\n+  BUILTIN_VD_BHSI (BINOP, ssubl, 0)\n+  BUILTIN_VD_BHSI (BINOP, usubl, 0)\n   /* Implemented by aarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>.  */\n-  BUILTIN_VDW (BINOP, saddw, 0)\n-  BUILTIN_VDW (BINOP, uaddw, 0)\n-  BUILTIN_VDW (BINOP, ssubw, 0)\n-  BUILTIN_VDW (BINOP, usubw, 0)\n+  BUILTIN_VD_BHSI (BINOP, saddw, 0)\n+  BUILTIN_VD_BHSI (BINOP, uaddw, 0)\n+  BUILTIN_VD_BHSI (BINOP, ssubw, 0)\n+  BUILTIN_VD_BHSI (BINOP, usubw, 0)\n   /* Implemented by aarch64_<sur>h<addsub><mode>.  */\n-  BUILTIN_VQ_S (BINOP, shadd, 0)\n-  BUILTIN_VQ_S (BINOP, uhadd, 0)\n-  BUILTIN_VQ_S (BINOP, srhadd, 0)\n-  BUILTIN_VQ_S (BINOP, urhadd, 0)\n+  BUILTIN_VDQ_BHSI (BINOP, shadd, 0)\n+  BUILTIN_VDQ_BHSI (BINOP, uhadd, 0)\n+  BUILTIN_VDQ_BHSI (BINOP, srhadd, 0)\n+  BUILTIN_VDQ_BHSI (BINOP, urhadd, 0)\n   /* Implemented by aarch64_<sur><addsub>hn<mode>.  */\n   BUILTIN_VQN (BINOP, addhn, 0)\n   BUILTIN_VQN (BINOP, raddhn, 0)\n@@ -202,8 +202,8 @@\n   BUILTIN_VSDQ_I_DI (SHIFTACC, srsra_n, 0)\n   BUILTIN_VSDQ_I_DI (USHIFTACC, ursra_n, 0)\n   /* Implemented by aarch64_<sur>shll_n<mode>.  */\n-  BUILTIN_VDW (SHIFTIMM, sshll_n, 0)\n-  BUILTIN_VDW (USHIFTIMM, ushll_n, 0)\n+  BUILTIN_VD_BHSI (SHIFTIMM, sshll_n, 0)\n+  BUILTIN_VD_BHSI (USHIFTIMM, ushll_n, 0)\n   /* Implemented by aarch64_<sur>shll2_n<mode>.  */\n   BUILTIN_VQW (SHIFTIMM, sshll2_n, 0)\n   BUILTIN_VQW (SHIFTIMM, ushll2_n, 0)"}, {"sha": "0ec132345a5b5d5cc68450fa38f73e727ba45d01", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 120, "deletions": 118, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a844a6958395311c579a982d82958088b418be77/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a844a6958395311c579a982d82958088b418be77/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=a844a6958395311c579a982d82958088b418be77", "patch": "@@ -42,8 +42,9 @@\n })\n \n (define_insn \"aarch64_simd_dup<mode>\"\n-  [(set (match_operand:VDQ 0 \"register_operand\" \"=w, w\")\n-        (vec_duplicate:VDQ (match_operand:<VEL> 1 \"register_operand\" \"r, w\")))]\n+  [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w, w\")\n+\t(vec_duplicate:VDQ_I\n+\t  (match_operand:<VEL> 1 \"register_operand\" \"r, w\")))]\n   \"TARGET_SIMD\"\n   \"@\n    dup\\\\t%0.<Vtype>, %<vw>1\n@@ -242,45 +243,45 @@\n   ])\n \n (define_insn \"orn<mode>3\"\n- [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-       (ior:VDQ (not:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\"))\n-\t\t(match_operand:VDQ 2 \"register_operand\" \"w\")))]\n+ [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+       (ior:VDQ_I (not:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\"))\n+\t\t(match_operand:VDQ_I 2 \"register_operand\" \"w\")))]\n  \"TARGET_SIMD\"\n  \"orn\\t%0.<Vbtype>, %2.<Vbtype>, %1.<Vbtype>\"\n   [(set_attr \"type\" \"neon_logic<q>\")]\n )\n \n (define_insn \"bic<mode>3\"\n- [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-       (and:VDQ (not:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\"))\n-\t\t(match_operand:VDQ 2 \"register_operand\" \"w\")))]\n+ [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+       (and:VDQ_I (not:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\"))\n+\t\t(match_operand:VDQ_I 2 \"register_operand\" \"w\")))]\n  \"TARGET_SIMD\"\n  \"bic\\t%0.<Vbtype>, %2.<Vbtype>, %1.<Vbtype>\"\n   [(set_attr \"type\" \"neon_logic<q>\")]\n )\n \n (define_insn \"add<mode>3\"\n-  [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-        (plus:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\")\n-\t\t  (match_operand:VDQ 2 \"register_operand\" \"w\")))]\n+  [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+        (plus:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\")\n+\t\t  (match_operand:VDQ_I 2 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   \"add\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n   [(set_attr \"type\" \"neon_add<q>\")]\n )\n \n (define_insn \"sub<mode>3\"\n-  [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-        (minus:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\")\n-\t\t   (match_operand:VDQ 2 \"register_operand\" \"w\")))]\n+  [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+        (minus:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\")\n+\t\t   (match_operand:VDQ_I 2 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   \"sub\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n   [(set_attr \"type\" \"neon_sub<q>\")]\n )\n \n (define_insn \"mul<mode>3\"\n-  [(set (match_operand:VDQM 0 \"register_operand\" \"=w\")\n-        (mult:VDQM (match_operand:VDQM 1 \"register_operand\" \"w\")\n-\t\t   (match_operand:VDQM 2 \"register_operand\" \"w\")))]\n+  [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n+        (mult:VDQ_BHSI (match_operand:VDQ_BHSI 1 \"register_operand\" \"w\")\n+\t\t   (match_operand:VDQ_BHSI 2 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   \"mul\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n   [(set_attr \"type\" \"neon_mul_<Vetype><q>\")]\n@@ -377,16 +378,16 @@\n )\n \n (define_insn \"neg<mode>2\"\n-  [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-\t(neg:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\")))]\n+  [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+\t(neg:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   \"neg\\t%0.<Vtype>, %1.<Vtype>\"\n   [(set_attr \"type\" \"neon_neg<q>\")]\n )\n \n (define_insn \"abs<mode>2\"\n-  [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-        (abs:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\")))]\n+  [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+        (abs:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   \"abs\\t%0.<Vtype>, %1.<Vtype>\"\n   [(set_attr \"type\" \"neon_abs<q>\")]\n@@ -434,46 +435,46 @@\n )\n \n (define_insn \"and<mode>3\"\n-  [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-        (and:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\")\n-\t\t (match_operand:VDQ 2 \"register_operand\" \"w\")))]\n+  [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+        (and:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\")\n+\t\t (match_operand:VDQ_I 2 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   \"and\\t%0.<Vbtype>, %1.<Vbtype>, %2.<Vbtype>\"\n   [(set_attr \"type\" \"neon_logic<q>\")]\n )\n \n (define_insn \"ior<mode>3\"\n-  [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-        (ior:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\")\n-\t\t (match_operand:VDQ 2 \"register_operand\" \"w\")))]\n+  [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+        (ior:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\")\n+\t\t (match_operand:VDQ_I 2 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   \"orr\\t%0.<Vbtype>, %1.<Vbtype>, %2.<Vbtype>\"\n   [(set_attr \"type\" \"neon_logic<q>\")]\n )\n \n (define_insn \"xor<mode>3\"\n-  [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-        (xor:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\")\n-\t\t (match_operand:VDQ 2 \"register_operand\" \"w\")))]\n+  [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+        (xor:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\")\n+\t\t (match_operand:VDQ_I 2 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   \"eor\\t%0.<Vbtype>, %1.<Vbtype>, %2.<Vbtype>\"\n   [(set_attr \"type\" \"neon_logic<q>\")]\n )\n \n (define_insn \"one_cmpl<mode>2\"\n-  [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-        (not:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\")))]\n+  [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+        (not:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD\"\n   \"not\\t%0.<Vbtype>, %1.<Vbtype>\"\n   [(set_attr \"type\" \"neon_logic<q>\")]\n )\n \n (define_insn \"aarch64_simd_vec_set<mode>\"\n-  [(set (match_operand:VQ_S 0 \"register_operand\" \"=w,w,w\")\n-        (vec_merge:VQ_S\n-\t    (vec_duplicate:VQ_S\n+  [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w,w,w\")\n+        (vec_merge:VDQ_BHSI\n+\t    (vec_duplicate:VDQ_BHSI\n \t\t(match_operand:<VEL> 1 \"aarch64_simd_general_operand\" \"r,w,Utv\"))\n-\t    (match_operand:VQ_S 3 \"register_operand\" \"0,0,0\")\n+\t    (match_operand:VDQ_BHSI 3 \"register_operand\" \"0,0,0\")\n \t    (match_operand:SI 2 \"immediate_operand\" \"i,i,i\")))]\n   \"TARGET_SIMD\"\n   {\n@@ -495,64 +496,64 @@\n )\n \n (define_insn \"aarch64_simd_lshr<mode>\"\n- [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-       (lshiftrt:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\")\n-\t\t     (match_operand:VDQ  2 \"aarch64_simd_rshift_imm\" \"Dr\")))]\n+ [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+       (lshiftrt:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\")\n+\t\t     (match_operand:VDQ_I  2 \"aarch64_simd_rshift_imm\" \"Dr\")))]\n  \"TARGET_SIMD\"\n  \"ushr\\t%0.<Vtype>, %1.<Vtype>, %2\"\n   [(set_attr \"type\" \"neon_shift_imm<q>\")]\n )\n \n (define_insn \"aarch64_simd_ashr<mode>\"\n- [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-       (ashiftrt:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\")\n-\t\t     (match_operand:VDQ  2 \"aarch64_simd_rshift_imm\" \"Dr\")))]\n+ [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+       (ashiftrt:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\")\n+\t\t     (match_operand:VDQ_I  2 \"aarch64_simd_rshift_imm\" \"Dr\")))]\n  \"TARGET_SIMD\"\n  \"sshr\\t%0.<Vtype>, %1.<Vtype>, %2\"\n   [(set_attr \"type\" \"neon_shift_imm<q>\")]\n )\n \n (define_insn \"aarch64_simd_imm_shl<mode>\"\n- [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-       (ashift:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\")\n-\t\t   (match_operand:VDQ  2 \"aarch64_simd_lshift_imm\" \"Dl\")))]\n+ [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+       (ashift:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\")\n+\t\t   (match_operand:VDQ_I  2 \"aarch64_simd_lshift_imm\" \"Dl\")))]\n  \"TARGET_SIMD\"\n   \"shl\\t%0.<Vtype>, %1.<Vtype>, %2\"\n   [(set_attr \"type\" \"neon_shift_imm<q>\")]\n )\n \n (define_insn \"aarch64_simd_reg_sshl<mode>\"\n- [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-       (ashift:VDQ (match_operand:VDQ 1 \"register_operand\" \"w\")\n-\t\t   (match_operand:VDQ 2 \"register_operand\" \"w\")))]\n+ [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+       (ashift:VDQ_I (match_operand:VDQ_I 1 \"register_operand\" \"w\")\n+\t\t   (match_operand:VDQ_I 2 \"register_operand\" \"w\")))]\n  \"TARGET_SIMD\"\n  \"sshl\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n   [(set_attr \"type\" \"neon_shift_reg<q>\")]\n )\n \n (define_insn \"aarch64_simd_reg_shl<mode>_unsigned\"\n- [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-       (unspec:VDQ [(match_operand:VDQ 1 \"register_operand\" \"w\")\n-\t\t    (match_operand:VDQ 2 \"register_operand\" \"w\")]\n+ [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+       (unspec:VDQ_I [(match_operand:VDQ_I 1 \"register_operand\" \"w\")\n+\t\t    (match_operand:VDQ_I 2 \"register_operand\" \"w\")]\n \t\t   UNSPEC_ASHIFT_UNSIGNED))]\n  \"TARGET_SIMD\"\n  \"ushl\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n   [(set_attr \"type\" \"neon_shift_reg<q>\")]\n )\n \n (define_insn \"aarch64_simd_reg_shl<mode>_signed\"\n- [(set (match_operand:VDQ 0 \"register_operand\" \"=w\")\n-       (unspec:VDQ [(match_operand:VDQ 1 \"register_operand\" \"w\")\n-\t\t    (match_operand:VDQ 2 \"register_operand\" \"w\")]\n+ [(set (match_operand:VDQ_I 0 \"register_operand\" \"=w\")\n+       (unspec:VDQ_I [(match_operand:VDQ_I 1 \"register_operand\" \"w\")\n+\t\t    (match_operand:VDQ_I 2 \"register_operand\" \"w\")]\n \t\t   UNSPEC_ASHIFT_SIGNED))]\n  \"TARGET_SIMD\"\n  \"sshl\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n   [(set_attr \"type\" \"neon_shift_reg<q>\")]\n )\n \n (define_expand \"ashl<mode>3\"\n-  [(match_operand:VDQ 0 \"register_operand\" \"\")\n-   (match_operand:VDQ 1 \"register_operand\" \"\")\n+  [(match_operand:VDQ_I 0 \"register_operand\" \"\")\n+   (match_operand:VDQ_I 1 \"register_operand\" \"\")\n    (match_operand:SI  2 \"general_operand\" \"\")]\n  \"TARGET_SIMD\"\n {\n@@ -598,8 +599,8 @@\n )\n \n (define_expand \"lshr<mode>3\"\n-  [(match_operand:VDQ 0 \"register_operand\" \"\")\n-   (match_operand:VDQ 1 \"register_operand\" \"\")\n+  [(match_operand:VDQ_I 0 \"register_operand\" \"\")\n+   (match_operand:VDQ_I 1 \"register_operand\" \"\")\n    (match_operand:SI  2 \"general_operand\" \"\")]\n  \"TARGET_SIMD\"\n {\n@@ -645,8 +646,8 @@\n )\n \n (define_expand \"ashr<mode>3\"\n-  [(match_operand:VDQ 0 \"register_operand\" \"\")\n-   (match_operand:VDQ 1 \"register_operand\" \"\")\n+  [(match_operand:VDQ_I 0 \"register_operand\" \"\")\n+   (match_operand:VDQ_I 1 \"register_operand\" \"\")\n    (match_operand:SI  2 \"general_operand\" \"\")]\n  \"TARGET_SIMD\"\n {\n@@ -692,23 +693,23 @@\n )\n \n (define_expand \"vashl<mode>3\"\n- [(match_operand:VDQ 0 \"register_operand\" \"\")\n-  (match_operand:VDQ 1 \"register_operand\" \"\")\n-  (match_operand:VDQ 2 \"register_operand\" \"\")]\n+ [(match_operand:VDQ_I 0 \"register_operand\" \"\")\n+  (match_operand:VDQ_I 1 \"register_operand\" \"\")\n+  (match_operand:VDQ_I 2 \"register_operand\" \"\")]\n  \"TARGET_SIMD\"\n {\n   emit_insn (gen_aarch64_simd_reg_sshl<mode> (operands[0], operands[1],\n \t\t\t\t\t      operands[2]));\n   DONE;\n })\n \n-;; Using mode VQ_S as there is no V2DImode neg!\n+;; Using mode VDQ_BHSI as there is no V2DImode neg!\n ;; Negating individual lanes most certainly offsets the\n ;; gain from vectorization.\n (define_expand \"vashr<mode>3\"\n- [(match_operand:VQ_S 0 \"register_operand\" \"\")\n-  (match_operand:VQ_S 1 \"register_operand\" \"\")\n-  (match_operand:VQ_S 2 \"register_operand\" \"\")]\n+ [(match_operand:VDQ_BHSI 0 \"register_operand\" \"\")\n+  (match_operand:VDQ_BHSI 1 \"register_operand\" \"\")\n+  (match_operand:VDQ_BHSI 2 \"register_operand\" \"\")]\n  \"TARGET_SIMD\"\n {\n   rtx neg = gen_reg_rtx (<MODE>mode);\n@@ -745,9 +746,9 @@\n )\n \n (define_expand \"vlshr<mode>3\"\n- [(match_operand:VQ_S 0 \"register_operand\" \"\")\n-  (match_operand:VQ_S 1 \"register_operand\" \"\")\n-  (match_operand:VQ_S 2 \"register_operand\" \"\")]\n+ [(match_operand:VDQ_BHSI 0 \"register_operand\" \"\")\n+  (match_operand:VDQ_BHSI 1 \"register_operand\" \"\")\n+  (match_operand:VDQ_BHSI 2 \"register_operand\" \"\")]\n  \"TARGET_SIMD\"\n {\n   rtx neg = gen_reg_rtx (<MODE>mode);\n@@ -783,7 +784,7 @@\n )\n \n (define_expand \"vec_set<mode>\"\n-  [(match_operand:VQ_S 0 \"register_operand\")\n+  [(match_operand:VDQ_BHSI 0 \"register_operand\")\n    (match_operand:<VEL> 1 \"register_operand\")\n    (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_SIMD\"\n@@ -879,10 +880,11 @@\n \n \n (define_insn \"aarch64_mla<mode>\"\n- [(set (match_operand:VQ_S 0 \"register_operand\" \"=w\")\n-       (plus:VQ_S (mult:VQ_S (match_operand:VQ_S 2 \"register_operand\" \"w\")\n-\t\t\t     (match_operand:VQ_S 3 \"register_operand\" \"w\"))\n-\t\t  (match_operand:VQ_S 1 \"register_operand\" \"0\")))]\n+ [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n+       (plus:VDQ_BHSI (mult:VDQ_BHSI\n+\t\t\t(match_operand:VDQ_BHSI 2 \"register_operand\" \"w\")\n+\t\t\t(match_operand:VDQ_BHSI 3 \"register_operand\" \"w\"))\n+\t\t      (match_operand:VDQ_BHSI 1 \"register_operand\" \"0\")))]\n  \"TARGET_SIMD\"\n  \"mla\\t%0.<Vtype>, %2.<Vtype>, %3.<Vtype>\"\n   [(set_attr \"type\" \"neon_mla_<Vetype><q>\")]\n@@ -926,10 +928,10 @@\n )\n \n (define_insn \"aarch64_mls<mode>\"\n- [(set (match_operand:VQ_S 0 \"register_operand\" \"=w\")\n-       (minus:VQ_S (match_operand:VQ_S 1 \"register_operand\" \"0\")\n-\t\t   (mult:VQ_S (match_operand:VQ_S 2 \"register_operand\" \"w\")\n-\t\t\t      (match_operand:VQ_S 3 \"register_operand\" \"w\"))))]\n+ [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n+       (minus:VDQ_BHSI (match_operand:VDQ_BHSI 1 \"register_operand\" \"0\")\n+\t\t   (mult:VDQ_BHSI (match_operand:VDQ_BHSI 2 \"register_operand\" \"w\")\n+\t\t\t      (match_operand:VDQ_BHSI 3 \"register_operand\" \"w\"))))]\n  \"TARGET_SIMD\"\n  \"mls\\t%0.<Vtype>, %2.<Vtype>, %3.<Vtype>\"\n   [(set_attr \"type\" \"neon_mla_<Vetype><q>\")]\n@@ -974,9 +976,9 @@\n \n ;; Max/Min operations.\n (define_insn \"<su><maxmin><mode>3\"\n- [(set (match_operand:VQ_S 0 \"register_operand\" \"=w\")\n-       (MAXMIN:VQ_S (match_operand:VQ_S 1 \"register_operand\" \"w\")\n-\t\t    (match_operand:VQ_S 2 \"register_operand\" \"w\")))]\n+ [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n+       (MAXMIN:VDQ_BHSI (match_operand:VDQ_BHSI 1 \"register_operand\" \"w\")\n+\t\t    (match_operand:VDQ_BHSI 2 \"register_operand\" \"w\")))]\n  \"TARGET_SIMD\"\n  \"<su><maxmin>\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n   [(set_attr \"type\" \"neon_minmax<q>\")]\n@@ -1314,9 +1316,9 @@\n         (plus:<VWIDE>\n           (mult:<VWIDE>\n             (ANY_EXTEND:<VWIDE>\n-              (match_operand:VDW 1 \"register_operand\" \"w\"))\n+              (match_operand:VD_BHSI 1 \"register_operand\" \"w\"))\n             (ANY_EXTEND:<VWIDE>\n-              (match_operand:VDW 2 \"register_operand\" \"w\")))\n+              (match_operand:VD_BHSI 2 \"register_operand\" \"w\")))\n           (match_operand:<VWIDE> 3 \"register_operand\" \"0\")))]\n   \"TARGET_SIMD\"\n   \"<su>mlal\\t%0.<Vwtype>, %1.<Vtype>, %2.<Vtype>\"\n@@ -1329,9 +1331,9 @@\n           (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n           (mult:<VWIDE>\n             (ANY_EXTEND:<VWIDE>\n-              (match_operand:VDW 2 \"register_operand\" \"w\"))\n+              (match_operand:VD_BHSI 2 \"register_operand\" \"w\"))\n             (ANY_EXTEND:<VWIDE>\n-              (match_operand:VDW 3 \"register_operand\" \"w\")))))]\n+              (match_operand:VD_BHSI 3 \"register_operand\" \"w\")))))]\n   \"TARGET_SIMD\"\n   \"<su>mlsl\\t%0.<Vwtype>, %2.<Vtype>, %3.<Vtype>\"\n   [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n@@ -1826,7 +1828,7 @@\n \n (define_expand \"reduc_plus_scal_<mode>\"\n   [(match_operand:<VEL> 0 \"register_operand\" \"=w\")\n-   (unspec:VDQ [(match_operand:VDQ 1 \"register_operand\" \"w\")]\n+   (unspec:VDQ_I [(match_operand:VDQ_I 1 \"register_operand\" \"w\")]\n \t       UNSPEC_ADDV)]\n   \"TARGET_SIMD\"\n   {\n@@ -2033,13 +2035,13 @@\n })\n \n (define_expand \"aarch64_vcond_internal<mode><mode>\"\n-  [(set (match_operand:VDQ 0 \"register_operand\")\n-\t(if_then_else:VDQ\n+  [(set (match_operand:VDQ_I 0 \"register_operand\")\n+\t(if_then_else:VDQ_I\n \t  (match_operator 3 \"comparison_operator\"\n-\t    [(match_operand:VDQ 4 \"register_operand\")\n-\t     (match_operand:VDQ 5 \"nonmemory_operand\")])\n-\t  (match_operand:VDQ 1 \"nonmemory_operand\")\n-\t  (match_operand:VDQ 2 \"nonmemory_operand\")))]\n+\t    [(match_operand:VDQ_I 4 \"register_operand\")\n+\t     (match_operand:VDQ_I 5 \"nonmemory_operand\")])\n+\t  (match_operand:VDQ_I 1 \"nonmemory_operand\")\n+\t  (match_operand:VDQ_I 2 \"nonmemory_operand\")))]\n   \"TARGET_SIMD\"\n {\n   rtx op1 = operands[1];\n@@ -2374,13 +2376,13 @@\n })\n \n (define_expand \"vcondu<mode><mode>\"\n-  [(set (match_operand:VDQ 0 \"register_operand\")\n-\t(if_then_else:VDQ\n+  [(set (match_operand:VDQ_I 0 \"register_operand\")\n+\t(if_then_else:VDQ_I\n \t  (match_operator 3 \"comparison_operator\"\n-\t    [(match_operand:VDQ 4 \"register_operand\")\n-\t     (match_operand:VDQ 5 \"nonmemory_operand\")])\n-\t  (match_operand:VDQ 1 \"nonmemory_operand\")\n-\t  (match_operand:VDQ 2 \"nonmemory_operand\")))]\n+\t    [(match_operand:VDQ_I 4 \"register_operand\")\n+\t     (match_operand:VDQ_I 5 \"nonmemory_operand\")])\n+\t  (match_operand:VDQ_I 1 \"nonmemory_operand\")\n+\t  (match_operand:VDQ_I 2 \"nonmemory_operand\")))]\n   \"TARGET_SIMD\"\n {\n   emit_insn (gen_aarch64_vcond_internal<mode><mode> (operands[0], operands[1],\n@@ -2476,8 +2478,8 @@\n (define_insn \"*aarch64_combinez<mode>\"\n   [(set (match_operand:<VDBL> 0 \"register_operand\" \"=&w\")\n         (vec_concat:<VDBL>\n-\t   (match_operand:VDIC 1 \"register_operand\" \"w\")\n-\t   (match_operand:VDIC 2 \"aarch64_simd_imm_zero\" \"Dz\")))]\n+\t   (match_operand:VD_BHSI 1 \"register_operand\" \"w\")\n+\t   (match_operand:VD_BHSI 2 \"aarch64_simd_imm_zero\" \"Dz\")))]\n   \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n   \"mov\\\\t%0.8b, %1.8b\"\n   [(set_attr \"type\" \"neon_move<q>\")]\n@@ -2486,8 +2488,8 @@\n (define_insn \"*aarch64_combinez_be<mode>\"\n   [(set (match_operand:<VDBL> 0 \"register_operand\" \"=&w\")\n         (vec_concat:<VDBL>\n-\t   (match_operand:VDIC 2 \"aarch64_simd_imm_zero\" \"Dz\")\n-\t   (match_operand:VDIC 1 \"register_operand\" \"w\")))]\n+\t   (match_operand:VD_BHSI 2 \"aarch64_simd_imm_zero\" \"Dz\")\n+\t   (match_operand:VD_BHSI 1 \"register_operand\" \"w\")))]\n   \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n   \"mov\\\\t%0.8b, %1.8b\"\n   [(set_attr \"type\" \"neon_move<q>\")]\n@@ -2626,9 +2628,9 @@\n (define_insn \"aarch64_<ANY_EXTEND:su><ADDSUB:optab>l<mode>\"\n  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n        (ADDSUB:<VWIDE> (ANY_EXTEND:<VWIDE>\n-\t\t\t   (match_operand:VDW 1 \"register_operand\" \"w\"))\n+\t\t\t   (match_operand:VD_BHSI 1 \"register_operand\" \"w\"))\n \t\t       (ANY_EXTEND:<VWIDE>\n-\t\t\t   (match_operand:VDW 2 \"register_operand\" \"w\"))))]\n+\t\t\t   (match_operand:VD_BHSI 2 \"register_operand\" \"w\"))))]\n   \"TARGET_SIMD\"\n   \"<ANY_EXTEND:su><ADDSUB:optab>l\\t%0.<Vwtype>, %1.<Vtype>, %2.<Vtype>\"\n   [(set_attr \"type\" \"neon_<ADDSUB:optab>_long\")]\n@@ -2640,7 +2642,7 @@\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (ADDSUB:<VWIDE> (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n \t\t\t(ANY_EXTEND:<VWIDE>\n-\t\t\t  (match_operand:VDW 2 \"register_operand\" \"w\"))))]\n+\t\t\t  (match_operand:VD_BHSI 2 \"register_operand\" \"w\"))))]\n   \"TARGET_SIMD\"\n   \"<ANY_EXTEND:su><ADDSUB:optab>w\\\\t%0.<Vwtype>, %1.<Vwtype>, %2.<Vtype>\"\n   [(set_attr \"type\" \"neon_<ADDSUB:optab>_widen\")]\n@@ -2710,9 +2712,9 @@\n ;; <su><r>h<addsub>.\n \n (define_insn \"aarch64_<sur>h<addsub><mode>\"\n-  [(set (match_operand:VQ_S 0 \"register_operand\" \"=w\")\n-        (unspec:VQ_S [(match_operand:VQ_S 1 \"register_operand\" \"w\")\n-\t\t      (match_operand:VQ_S 2 \"register_operand\" \"w\")]\n+  [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n+        (unspec:VDQ_BHSI [(match_operand:VDQ_BHSI 1 \"register_operand\" \"w\")\n+\t\t      (match_operand:VDQ_BHSI 2 \"register_operand\" \"w\")]\n \t\t     HADDSUB))]\n   \"TARGET_SIMD\"\n   \"<sur>h<addsub>\\\\t%0.<Vtype>, %1.<Vtype>, %2.<Vtype>\"\n@@ -3519,7 +3521,7 @@\n \n (define_insn \"aarch64_<sur>shll_n<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-\t(unspec:<VWIDE> [(match_operand:VDW 1 \"register_operand\" \"w\")\n+\t(unspec:<VWIDE> [(match_operand:VD_BHSI 1 \"register_operand\" \"w\")\n \t\t\t (match_operand:SI 2\n \t\t\t   \"aarch64_simd_shift_imm_bitsize_<ve_mode>\" \"i\")]\n                          VSHLL))]\n@@ -3633,8 +3635,8 @@\n   [(set (match_operand:<V_cmp_result> 0 \"register_operand\" \"=w,w\")\n \t(neg:<V_cmp_result>\n \t  (COMPARISONS:<V_cmp_result>\n-\t    (match_operand:VDQ 1 \"register_operand\" \"w,w\")\n-\t    (match_operand:VDQ 2 \"aarch64_simd_reg_or_zero\" \"w,ZDz\")\n+\t    (match_operand:VDQ_I 1 \"register_operand\" \"w,w\")\n+\t    (match_operand:VDQ_I 2 \"aarch64_simd_reg_or_zero\" \"w,ZDz\")\n \t  )))]\n   \"TARGET_SIMD\"\n   \"@\n@@ -3698,8 +3700,8 @@\n   [(set (match_operand:<V_cmp_result> 0 \"register_operand\" \"=w\")\n \t(neg:<V_cmp_result>\n \t  (UCOMPARISONS:<V_cmp_result>\n-\t    (match_operand:VDQ 1 \"register_operand\" \"w\")\n-\t    (match_operand:VDQ 2 \"register_operand\" \"w\")\n+\t    (match_operand:VDQ_I 1 \"register_operand\" \"w\")\n+\t    (match_operand:VDQ_I 2 \"register_operand\" \"w\")\n \t  )))]\n   \"TARGET_SIMD\"\n   \"cm<n_optab>\\t%<v>0<Vmtype>, %<v><cmp_1><Vmtype>, %<v><cmp_2><Vmtype>\"\n@@ -3765,10 +3767,10 @@\n   [(set (match_operand:<V_cmp_result> 0 \"register_operand\" \"=w\")\n \t(plus:<V_cmp_result>\n \t  (eq:<V_cmp_result>\n-\t    (and:VDQ\n-\t      (match_operand:VDQ 1 \"register_operand\" \"w\")\n-\t      (match_operand:VDQ 2 \"register_operand\" \"w\"))\n-\t    (match_operand:VDQ 3 \"aarch64_simd_imm_zero\"))\n+\t    (and:VDQ_I\n+\t      (match_operand:VDQ_I 1 \"register_operand\" \"w\")\n+\t      (match_operand:VDQ_I 2 \"register_operand\" \"w\"))\n+\t    (match_operand:VDQ_I 3 \"aarch64_simd_imm_zero\"))\n \t  (match_operand:<V_cmp_result> 4 \"aarch64_simd_imm_minus_one\")))\n   ]\n   \"TARGET_SIMD\""}, {"sha": "76be6927eb29cea6dc5ca2e41075bb685c4ba1cc", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a844a6958395311c579a982d82958088b418be77/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a844a6958395311c579a982d82958088b418be77/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=a844a6958395311c579a982d82958088b418be77", "patch": "@@ -32,18 +32,12 @@\n ;; Iterator for all integer modes (up to 64-bit)\n (define_mode_iterator ALLI [QI HI SI DI])\n \n-;; Iterator scalar modes (up to 64-bit)\n-(define_mode_iterator SDQ_I [QI HI SI DI])\n-\n ;; Iterator for all integer modes that can be extended (up to 64-bit)\n (define_mode_iterator ALLX [QI HI SI])\n \n ;; Iterator for General Purpose Floating-point registers (32- and 64-bit modes)\n (define_mode_iterator GPF [SF DF])\n \n-;; Integer vector modes.\n-(define_mode_iterator VDQ [V8QI V16QI V4HI V8HI V2SI V4SI V2DI])\n-\n ;; Integer vector modes.\n (define_mode_iterator VDQ_I [V8QI V16QI V4HI V8HI V2SI V4SI V2DI])\n \n@@ -72,16 +66,6 @@\n ;; Quad vector with only 2 element modes.\n (define_mode_iterator VQ_2E [V2DI V2DF])\n \n-;; All vector modes, except double.\n-(define_mode_iterator VQ_S [V8QI V16QI V4HI V8HI V2SI V4SI])\n-\n-;; Vector and scalar, 64 & 128-bit container: all vector integer mode;\n-;; 8, 16, 32-bit scalar integer modes\n-(define_mode_iterator VSDQ_I_BHSI [V8QI V16QI V4HI V8HI V2SI V4SI V2DI QI HI SI])\n-\n-;; Vector modes for moves.\n-(define_mode_iterator VDQM [V8QI V16QI V4HI V8HI V2SI V4SI])\n-\n ;; This mode iterator allows :P to be used for patterns that operate on\n ;; addresses in different modes.  In LP64, only DI will match, while in\n ;; ILP32, either can match.\n@@ -132,9 +116,6 @@\n ;; All quad integer narrow-able modes.\n (define_mode_iterator VQN [V8HI V4SI V2DI])\n \n-;; All double integer widen-able modes.\n-(define_mode_iterator VDW [V8QI V4HI V2SI])\n-\n ;; Vector and scalar 128-bit container: narrowable 16, 32, 64-bit integer modes\n (define_mode_iterator VSQN_HSDI [V8HI V4SI V2DI HI SI DI])\n \n@@ -144,9 +125,6 @@\n ;; Double vector modes for combines.\n (define_mode_iterator VDC [V8QI V4HI V2SI V2SF DI DF])\n \n-;; Double vector modes for combines.\n-(define_mode_iterator VDIC [V8QI V4HI V2SI])\n-\n ;; Vector modes except double int.\n (define_mode_iterator VDQIF [V8QI V16QI V4HI V8HI V2SI V4SI V2SF V4SF V2DF])\n \n@@ -159,9 +137,6 @@\n ;; Vector modes for H, S and D types.\n (define_mode_iterator VDQHSD [V4HI V8HI V2SI V4SI V2DI])\n \n-;; Vector modes for Q, H and S types.\n-(define_mode_iterator VDQQHS [V8QI V16QI V4HI V8HI V2SI V4SI])\n-\n ;; Vector and scalar integer modes for H and S\n (define_mode_iterator VSDQ_HSI [V4HI V8HI V2SI V4SI HI SI])\n \n@@ -487,7 +462,7 @@\n \n )\n \n-;; Widened mode register suffixes for VDW/VQW.\n+;; Widened mode register suffixes for VD_BHSI/VQW.\n (define_mode_attr Vwtype [(V8QI \"8h\") (V4HI \"4s\")\n \t\t\t  (V2SI \"2d\") (V16QI \"8h\") \n \t\t\t  (V8HI \"4s\") (V4SI \"2d\")])"}]}