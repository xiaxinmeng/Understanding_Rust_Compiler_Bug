{"sha": "eca7f13c6953706b97f6158dcef99f0566f1fbb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNhN2YxM2M2OTUzNzA2Yjk3ZjYxNThkY2VmOTlmMDU2NmYxZmJiNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-08-27T22:14:51Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-08-27T22:14:51Z"}, "message": "c-common.c (warn_abi): New variable.\n\n\t* c-common.c (warn_abi): New variable.\n\t* c-common.h (warn_abi): Likewise.\n\t* c-opts.c (COMMAND_LINE_OPTIONS): Add -Wabi.\n\t(c_common_decode_option): Handle it.\n\t* doc/invoke.texi:P Document -Wabi.\n\n\t* class.c (layout_virtual_bases): Warn about bugs in G++ that\n\tresult in incorrect object layouts.\n\t(layout_class_type): Likewise.\n\n\t* testsuite/g++.dg/abi/bitfield5.C: New test.\n\t* testsuite/g++.dg/abi/vbase10.C: Likewise.\n\nFrom-SVN: r56618", "tree": {"sha": "ee767505882b4cd0b13a99e8d37e215ba2dcf0f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee767505882b4cd0b13a99e8d37e215ba2dcf0f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eca7f13c6953706b97f6158dcef99f0566f1fbb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca7f13c6953706b97f6158dcef99f0566f1fbb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca7f13c6953706b97f6158dcef99f0566f1fbb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca7f13c6953706b97f6158dcef99f0566f1fbb5/comments", "author": null, "committer": null, "parents": [{"sha": "c350f8c1c479aabb1bd0a58f4072381d77daca77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c350f8c1c479aabb1bd0a58f4072381d77daca77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c350f8c1c479aabb1bd0a58f4072381d77daca77"}], "stats": {"total": 149, "additions": 146, "deletions": 3}, "files": [{"sha": "eafb6a3a46e951e4c15abba8ccf692ac8eb955b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eca7f13c6953706b97f6158dcef99f0566f1fbb5", "patch": "@@ -1,3 +1,11 @@\n+2002-08-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* c-common.c (warn_abi): New variable.\n+\t* c-common.h (warn_abi): Likewise.\n+\t* c-opts.c (COMMAND_LINE_OPTIONS): Add -Wabi.\n+\t(c_common_decode_option): Handle it.\n+\t* doc/invoke.texi:P Document -Wabi.\n+\t\n Tue Aug 27 23:03:52 2002  Nicola Pero  <n.pero@mi.flashnet.it>\n \n \t* c-common.c (warn_undeclared_selector): New variable."}, {"sha": "913aec19c6b564bcce7268b30236b332cf90607c", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=eca7f13c6953706b97f6158dcef99f0566f1fbb5", "patch": "@@ -566,6 +566,11 @@ int flag_permissive;\n \n int flag_enforce_eh_specs = 1;\n \n+/* Nonzero means warn about things that will change when compiling\n+   with an ABI-compliant compiler.  */\n+\n+int warn_abi = 0;\n+\n /* Nonzero means warn about implicit declarations.  */\n \n int warn_implicit = 1;"}, {"sha": "b49e2d1a64c2fc75b96bea9e6ac288a1ae377fee", "filename": "gcc/c-common.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=eca7f13c6953706b97f6158dcef99f0566f1fbb5", "patch": "@@ -737,6 +737,11 @@ extern int flag_permissive;\n \n extern int flag_enforce_eh_specs;\n \n+/* Nonzero means warn about things that will change when compiling\n+   with an ABI-compliant compiler.  */\n+\n+extern int warn_abi;\n+\n /* Nonzero means warn about implicit declarations.  */\n \n extern int warn_implicit;"}, {"sha": "5fb8d11ee064fa441b1860865afc078e1f2e4b44", "filename": "gcc/c-opts.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=eca7f13c6953706b97f6158dcef99f0566f1fbb5", "patch": "@@ -124,6 +124,7 @@ static void sanitize_cpp_opts PARAMS ((void));\n   OPT(\"MQ\",                     CL_ALL | CL_ARG, OPT_MQ)\t\t     \\\n   OPT(\"MT\",                     CL_ALL | CL_ARG, OPT_MT)\t\t     \\\n   OPT(\"P\",                      CL_ALL,   OPT_P)\t\t\t     \\\n+  OPT(\"Wabi\",                   CL_CXX,   OPT_Wabi)                          \\\n   OPT(\"Wall\",\t\t\tCL_ALL,   OPT_Wall)\t\t\t     \\\n   OPT(\"Wbad-function-cast\",\tCL_C,     OPT_Wbad_function_cast)\t     \\\n   OPT(\"Wcast-qual\",\t\tCL_ALL,   OPT_Wcast_qual)\t\t     \\\n@@ -684,6 +685,10 @@ c_common_decode_option (argc, argv)\n       cpp_opts->no_line_commands = 1;\n       break;\n \n+    case OPT_Wabi:\n+      warn_abi = on;\n+      break;\n+\n     case OPT_Wall:\n       set_Wunused (on);\n       set_Wformat (on);"}, {"sha": "adb6f13d98e157f367f0056be08a6cd0036c384f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eca7f13c6953706b97f6158dcef99f0566f1fbb5", "patch": "@@ -1,3 +1,9 @@\n+2002-08-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* class.c (layout_virtual_bases): Warn about bugs in G++ that\n+\tresult in incorrect object layouts.\n+\t(layout_class_type): Likewise.\n+\t\n 2002-08-24  Matt Austern  <austern@apple.com>\n \n \t* tree.c (lvalue_p_1): Add argument for whether casts of lvalues"}, {"sha": "7cdfdafc9731f11a1751fa405e0d369a0f139000", "filename": "gcc/cp/class.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=eca7f13c6953706b97f6158dcef99f0566f1fbb5", "patch": "@@ -4562,6 +4562,7 @@ layout_virtual_bases (t, offsets)\n {\n   tree vbases, dsize;\n   unsigned HOST_WIDE_INT eoc;\n+  bool first_vbase = true;\n \n   if (CLASSTYPE_N_BASECLASSES (t) == 0)\n     return;\n@@ -4589,6 +4590,7 @@ layout_virtual_bases (t, offsets)\n \n       if (!TREE_VIA_VIRTUAL (vbases))\n \tcontinue;\n+\n       vbase = binfo_for_vbase (BINFO_TYPE (vbases), t);\n \n       if (!BINFO_PRIMARY_P (vbase))\n@@ -4606,7 +4608,6 @@ layout_virtual_bases (t, offsets)\n \t  /* Add padding so that we can put the virtual base class at an\n \t     appropriately aligned offset.  */\n \t  dsize = round_up (dsize, desired_align);\n-\n \t  usize = size_binop (CEIL_DIV_EXPR, dsize, bitsize_unit_node);\n \n \t  /* We try to squish empty virtual bases in just like\n@@ -4634,11 +4635,30 @@ layout_virtual_bases (t, offsets)\n \t\t\t\t\t      CLASSTYPE_SIZE (basetype)));\n \t    }\n \n+\t  /* If the first virtual base might have been placed at a\n+\t     lower address, had we started from CLASSTYPE_SIZE, rather\n+\t     than TYPE_SIZE, issue a warning.  There can be both false\n+\t     positives and false negatives from this warning in rare\n+\t     cases; to deal with all the possibilities would probably\n+\t     require performing both layout algorithms and comparing\n+\t     the results which is not particularly tractable.  */\n+\t  if (warn_abi\n+\t      && first_vbase\n+\t      && tree_int_cst_lt (size_binop (CEIL_DIV_EXPR,\n+\t\t\t\t\t      round_up (CLASSTYPE_SIZE (t),\n+\t\t\t\t\t\t\tdesired_align),\n+\t\t\t\t\t      bitsize_unit_node),\n+\t\t\t\t  BINFO_OFFSET (vbase)))\n+\t    warning (\"offset of virtual base `%T' is not ABI-compliant and may change in a future version of GCC\",\n+\t\t     basetype);\n+\n \t  /* Keep track of the offsets assigned to this virtual base.  */\n \t  record_subobject_offsets (BINFO_TYPE (vbase), \n \t\t\t\t    BINFO_OFFSET (vbase),\n \t\t\t\t    offsets,\n \t\t\t\t    /*vbases_p=*/0);\n+\n+\t  first_vbase = false;\n \t}\n     }\n \n@@ -4776,6 +4796,8 @@ layout_class_type (t, empty_p, vfuns_p, virtuals_p)\n   /* Maps offsets (represented as INTEGER_CSTs) to a TREE_LIST of\n      types that appear at that offset.  */\n   splay_tree empty_base_offsets;\n+  /* True if the last field layed out was a bit-field.  */\n+  bool last_field_was_bitfield = false;\n \n   /* Keep track of the first non-static data member.  */\n   non_static_data_members = TYPE_FIELDS (t);\n@@ -4865,6 +4887,18 @@ layout_class_type (t, empty_p, vfuns_p, virtuals_p)\n       layout_nonempty_base_or_field (rli, field, NULL_TREE,\n \t\t\t\t     empty_base_offsets, t);\n \n+      /* If a bit-field does not immediately follow another bit-field,\n+\t and yet it starts in the middle of a byte, we have failed to\n+\t comply with the ABI.  */\n+      if (warn_abi\n+\t  && DECL_C_BIT_FIELD (field) \n+\t  && !last_field_was_bitfield\n+\t  && !integer_zerop (size_binop (TRUNC_MOD_EXPR,\n+\t\t\t\t\t DECL_FIELD_BIT_OFFSET (field),\n+\t\t\t\t\t bitsize_unit_node)))\n+\tcp_warning_at (\"offset of `%D' is not ABI-compliant and may change in a future version of GCC\", \n+\t\t       field);\n+\n       /* If we needed additional padding after this field, add it\n \t now.  */\n       if (padding)\n@@ -4882,6 +4916,8 @@ layout_class_type (t, empty_p, vfuns_p, virtuals_p)\n \t\t\t\t\t NULL_TREE, \n \t\t\t\t\t empty_base_offsets, t);\n \t}\n+\n+      last_field_was_bitfield = DECL_C_BIT_FIELD (field);\n     }\n \n   /* It might be the case that we grew the class to allocate a"}, {"sha": "e956baa902af807aa7bd40283118d80cfc7539b4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=eca7f13c6953706b97f6158dcef99f0566f1fbb5", "patch": "@@ -187,7 +187,7 @@ in the following sections.\n -fno-optional-diags  -fpermissive @gol\n -frepo  -fno-rtti  -fstats  -ftemplate-depth-@var{n} @gol\n -fuse-cxa-atexit  -fvtable-gc  -fno-weak  -nostdinc++ @gol\n--fno-default-inline  -Wctor-dtor-privacy @gol\n+-fno-default-inline -Wabi -Wctor-dtor-privacy @gol\n -Wnon-virtual-dtor  -Wreorder @gol\n -Weffc++  -Wno-deprecated @gol\n -Wno-non-template-friend  -Wold-style-cast @gol\n@@ -211,7 +211,7 @@ in the following sections.\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n @gccoptlist{\n -fsyntax-only  -pedantic  -pedantic-errors @gol\n--w  -W  -Wall  -Waggregate-return @gol\n+-w  -W  -Wall -Waggregate-return @gol\n -Wcast-align  -Wcast-qual  -Wchar-subscripts  -Wcomment @gol\n -Wconversion  -Wno-deprecated-declarations @gol\n -Wdisabled-optimization  -Wno-div-by-zero  -Werror @gol\n@@ -1475,6 +1475,58 @@ Do not assume @samp{inline} for functions defined inside a class scope.\n functions will have linkage like inline functions; they just won't be\n inlined by default.\n \n+@item -Wabi @r{(C++ only)}\n+@opindex Wabi\n+Warn when G++ generates code that is probably not compatible with the\n+vendor-neutral C++ ABI.  Although an effort has been made to warn about\n+all such cases, there are probably some cases that are not warned about, \n+even though G++ is generating incompatible code.  There may also be\n+cases where warnings are emitted even though the code that is generated\n+will be compatible.\n+\n+You should rewrite your code to avoid these warnings if you are\n+concerned about the fact that code generated by G++ may not be binary\n+compatible with code generated by other compilers.\n+\n+The known incompatibilites at this point include:\n+\n+@itemize @bullet\n+\n+@item\n+Incorrect handling of tail-padding for bit-fields.  G++ may attempt to\n+pack data into the same byte as a base class.  For example:\n+\n+@smallexample\n+struct A @{ virtual void f(); int f1 : 1; @};\n+struct B : public A @{ int f2 : 1; @};\n+@end smallexample\n+\n+@noindent\n+In this case, G++ will place @code{B::f2} into the same byte\n+as@code{A::f1}; other compilers will not.  You can avoid this problem \n+by explicitly padding @code{A} so that its size is a multiple of the\n+byte size on your platform; that will cause G++ and other compilers to\n+layout @code{B} identically.\n+\n+@item\n+Incorrect handling of tail-padding for virtual bases.  G++ does not use\n+tail padding when laying out virtual bases.  For example:\n+\n+@smallexample\n+struct A @{ virtual void f(); char c1; @};\n+struct B @{ B(); char c2; @};\n+struct C : public A, public virtual B @{@};\n+@end smallexample\n+\n+@noindent\n+In this case, G++ will not place @code{B} into the tail-padding for\n+@code{A}; other compilers will.  You can avoid this problem by\n+explicitly padding @code{A} so that its size is a multiple of its\n+alignment (ignoring virtual base classes); that will cause G++ and other\n+compilers to layout @code{C} identically.\n+\n+@end itemize\n+\n @item -Wctor-dtor-privacy @r{(C++ only)}\n @opindex Wctor-dtor-privacy\n Warn when a class seems unusable, because all the constructors or"}, {"sha": "3f3a17da0701995fea3baa2dc5fafa66535d715e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eca7f13c6953706b97f6158dcef99f0566f1fbb5", "patch": "@@ -1,3 +1,8 @@\n+2002-08-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* testsuite/g++.dg/abi/bitfield5.C: New test.\n+\t* testsuite/g++.dg/abi/vbase10.C: Likewise.\n+\n Tue Aug 27 22:23:22 2002  Nicola Pero  <n.pero@mi.flashnet.it>\n \n \t* objc.dg/undeclared-selector.m: New test."}, {"sha": "eed76e649e6e4cd3b63f9b7df69a08232b0caa58", "filename": "gcc/testsuite/g++.dg/abi/bitfield5.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fbitfield5.C?ref=eca7f13c6953706b97f6158dcef99f0566f1fbb5", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile } \n+// { dg-options \"-Wabi\" }\n+\n+struct A { \n+  virtual void f(); \n+  int f1 : 1; \n+};\n+\n+struct B : public A {\n+  int f2 : 1;  // { dg-warning \"ABI\" }\n+  int : 0;\n+  int f3 : 4; \n+  int f4 : 3;\n+};"}, {"sha": "3c110be71885f32b5a46ba5c626f05ecec240ca3", "filename": "gcc/testsuite/g++.dg/abi/vbase10.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca7f13c6953706b97f6158dcef99f0566f1fbb5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fvbase10.C?ref=eca7f13c6953706b97f6158dcef99f0566f1fbb5", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+// { dg-options \"-Wabi\" }\n+\n+struct A { virtual void f(); char c1; };\n+struct B { B(); char c2; };\n+struct C : public A, public virtual B {}; // { dg-warning \"ABI\" }\n+"}]}