{"sha": "62276744cea11dfed2d327eab10006d46b2f0f84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIyNzY3NDRjZWExMWRmZWQyZDMyN2VhYjEwMDA2ZDQ2YjJmMGY4NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-02-06T18:26:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-02-06T18:26:59Z"}, "message": "re PR middle-end/64937 (compare debug failure with -fsanitize=address)\n\n\tPR middle-end/64937\n\t* dwarf2out.c (set_block_abstract_flags, set_decl_abstract_flags):\n\tReplace setting argument with abstract_vec, always set BLOCK_ABSTRACT\n\tor DECL_ABSTRACT_P flags to 1 rather than to setting, and if it wasn't\n\t1 before, push it to abstract_vec.\n\t(dwarf2out_abstract_function): Adjust caller.  Don't call\n\tset_decl_abstract_flags second time, instead clear BLOCK_ABSTRACT or\n\tDECL_ABSTRACT_P flags for all abstract_vec elts.\n\n\t* g++.dg/asan/pr64937.C: New test.\n\nFrom-SVN: r220483", "tree": {"sha": "08d383ce9e240b9e0c6d4b623c5b133bdc8e1cc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08d383ce9e240b9e0c6d4b623c5b133bdc8e1cc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62276744cea11dfed2d327eab10006d46b2f0f84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62276744cea11dfed2d327eab10006d46b2f0f84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62276744cea11dfed2d327eab10006d46b2f0f84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62276744cea11dfed2d327eab10006d46b2f0f84/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "43a68a9df5b97efae86b3e8ab47776dc9d7fa702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a68a9df5b97efae86b3e8ab47776dc9d7fa702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43a68a9df5b97efae86b3e8ab47776dc9d7fa702"}], "stats": {"total": 111, "additions": 87, "deletions": 24}, "files": [{"sha": "59ed4b2e74124ac2fc677106447bb3eb79098361", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62276744cea11dfed2d327eab10006d46b2f0f84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62276744cea11dfed2d327eab10006d46b2f0f84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62276744cea11dfed2d327eab10006d46b2f0f84", "patch": "@@ -1,3 +1,14 @@\n+2015-02-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/64937\n+\t* dwarf2out.c (set_block_abstract_flags, set_decl_abstract_flags):\n+\tReplace setting argument with abstract_vec, always set BLOCK_ABSTRACT\n+\tor DECL_ABSTRACT_P flags to 1 rather than to setting, and if it wasn't\n+\t1 before, push it to abstract_vec.\n+\t(dwarf2out_abstract_function): Adjust caller.  Don't call\n+\tset_decl_abstract_flags second time, instead clear BLOCK_ABSTRACT or\n+\tDECL_ABSTRACT_P flags for all abstract_vec elts.\n+\n 2015-02-06  Renlin Li  <renlin.li@arm.com>\n \n \t* tree-ssa-forwprop.c (execute): Keep location info while rewrite"}, {"sha": "8c3f1c0e05e1adf66fcc590fcdfec27bcbfedd9b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 41, "deletions": 24, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62276744cea11dfed2d327eab10006d46b2f0f84/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62276744cea11dfed2d327eab10006d46b2f0f84/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=62276744cea11dfed2d327eab10006d46b2f0f84", "patch": "@@ -18062,7 +18062,7 @@ gen_type_die_for_member (tree type, tree member, dw_die_ref context_die)\n /* Forward declare these functions, because they are mutually recursive\n   with their set_block_* pairing functions.  */\n static void set_decl_origin_self (tree);\n-static void set_decl_abstract_flags (tree, int);\n+static void set_decl_abstract_flags (tree, vec<tree> &);\n \n /* Given a pointer to some BLOCK node, if the BLOCK_ABSTRACT_ORIGIN for the\n    given BLOCK node is NULL, set the BLOCK_ABSTRACT_ORIGIN for the node so\n@@ -18135,59 +18135,72 @@ set_decl_origin_self (tree decl)\n     }\n }\n \f\n-/* Given a pointer to some BLOCK node, and a boolean value to set the\n-   \"abstract\" flags to, set that value into the BLOCK_ABSTRACT flag for\n-   the given block, and for all local decls and all local sub-blocks\n-   (recursively) which are contained therein.  */\n+/* Given a pointer to some BLOCK node, set the BLOCK_ABSTRACT flag to 1\n+   and if it wasn't 1 before, push it to abstract_vec vector.\n+   For all local decls and all local sub-blocks (recursively) do it\n+   too.  */\n \n static void\n-set_block_abstract_flags (tree stmt, int setting)\n+set_block_abstract_flags (tree stmt, vec<tree> &abstract_vec)\n {\n   tree local_decl;\n   tree subblock;\n   unsigned int i;\n \n-  BLOCK_ABSTRACT (stmt) = setting;\n+  if (!BLOCK_ABSTRACT (stmt))\n+    {\n+      abstract_vec.safe_push (stmt);\n+      BLOCK_ABSTRACT (stmt) = 1;\n+    }\n \n   for (local_decl = BLOCK_VARS (stmt);\n        local_decl != NULL_TREE;\n        local_decl = DECL_CHAIN (local_decl))\n     if (! DECL_EXTERNAL (local_decl))\n-      set_decl_abstract_flags (local_decl, setting);\n+      set_decl_abstract_flags (local_decl, abstract_vec);\n \n   for (i = 0; i < BLOCK_NUM_NONLOCALIZED_VARS (stmt); i++)\n     {\n       local_decl = BLOCK_NONLOCALIZED_VAR (stmt, i);\n       if ((TREE_CODE (local_decl) == VAR_DECL && !TREE_STATIC (local_decl))\n \t  || TREE_CODE (local_decl) == PARM_DECL)\n-\tset_decl_abstract_flags (local_decl, setting);\n+\tset_decl_abstract_flags (local_decl, abstract_vec);\n     }\n \n   for (subblock = BLOCK_SUBBLOCKS (stmt);\n        subblock != NULL_TREE;\n        subblock = BLOCK_CHAIN (subblock))\n-    set_block_abstract_flags (subblock, setting);\n+    set_block_abstract_flags (subblock, abstract_vec);\n }\n \n-/* Given a pointer to some ..._DECL node, and a boolean value to set the\n-   \"abstract\" flags to, set that value into the DECL_ABSTRACT_P flag for the\n-   given decl, and (in the case where the decl is a FUNCTION_DECL) also\n-   set the abstract flags for all of the parameters, local vars, local\n-   blocks and sub-blocks (recursively) to the same setting.  */\n+/* Given a pointer to some ..._DECL node, set DECL_ABSTRACT_P flag on it\n+   to 1 and if it wasn't 1 before, push to abstract_vec vector.\n+   In the case where the decl is a FUNCTION_DECL also set the abstract\n+   flags for all of the parameters, local vars, local\n+   blocks and sub-blocks (recursively).  */\n \n static void\n-set_decl_abstract_flags (tree decl, int setting)\n+set_decl_abstract_flags (tree decl, vec<tree> &abstract_vec)\n {\n-  DECL_ABSTRACT_P (decl) = setting;\n+  if (!DECL_ABSTRACT_P (decl))\n+    {\n+      abstract_vec.safe_push (decl);\n+      DECL_ABSTRACT_P (decl) = 1;\n+    }\n+\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       tree arg;\n \n       for (arg = DECL_ARGUMENTS (decl); arg; arg = DECL_CHAIN (arg))\n-\tDECL_ABSTRACT_P (arg) = setting;\n+\tif (!DECL_ABSTRACT_P (arg))\n+\t  {\n+\t    abstract_vec.safe_push (arg);\n+\t    DECL_ABSTRACT_P (arg) = 1;\n+\t  }\n       if (DECL_INITIAL (decl) != NULL_TREE\n \t  && DECL_INITIAL (decl) != error_mark_node)\n-\tset_block_abstract_flags (DECL_INITIAL (decl), setting);\n+\tset_block_abstract_flags (DECL_INITIAL (decl), abstract_vec);\n     }\n }\n \n@@ -18200,7 +18213,6 @@ dwarf2out_abstract_function (tree decl)\n   dw_die_ref old_die;\n   tree save_fn;\n   tree context;\n-  int was_abstract;\n   hash_table<decl_loc_hasher> *old_decl_loc_table;\n   hash_table<dw_loc_list_hasher> *old_cached_dw_loc_list_table;\n   int old_call_site_count, old_tail_call_site_count;\n@@ -18242,11 +18254,16 @@ dwarf2out_abstract_function (tree decl)\n   save_fn = current_function_decl;\n   current_function_decl = decl;\n \n-  was_abstract = DECL_ABSTRACT_P (decl);\n-  set_decl_abstract_flags (decl, 1);\n+  auto_vec<tree, 64> abstract_vec;\n+  set_decl_abstract_flags (decl, abstract_vec);\n   dwarf2out_decl (decl);\n-  if (! was_abstract)\n-    set_decl_abstract_flags (decl, 0);\n+  unsigned int i;\n+  tree t;\n+  FOR_EACH_VEC_ELT (abstract_vec, i, t)\n+    if (TREE_CODE (t) == BLOCK)\n+      BLOCK_ABSTRACT (t) = 0;\n+    else\n+      DECL_ABSTRACT_P (t) = 0;\n \n   current_function_decl = save_fn;\n   decl_loc_table = old_decl_loc_table;"}, {"sha": "d17c6727d4fc2d67fa6718df92334b30cac37341", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62276744cea11dfed2d327eab10006d46b2f0f84/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62276744cea11dfed2d327eab10006d46b2f0f84/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62276744cea11dfed2d327eab10006d46b2f0f84", "patch": "@@ -1,3 +1,8 @@\n+2015-02-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/64937\n+\t* g++.dg/asan/pr64937.C: New test.\n+\n 2015-02-06  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/63205"}, {"sha": "91beee0eedf1ab953290449262bac34768277431", "filename": "gcc/testsuite/g++.dg/asan/pr64937.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62276744cea11dfed2d327eab10006d46b2f0f84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr64937.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62276744cea11dfed2d327eab10006d46b2f0f84/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr64937.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr64937.C?ref=62276744cea11dfed2d327eab10006d46b2f0f84", "patch": "@@ -0,0 +1,30 @@\n+// PR middle-end/64937\n+// { dg-do compile }\n+// { dg-options \"-fsanitize=address -fcompare-debug\" }\n+\n+namespace foo_aux {\n+  struct BarParser { };\n+}\n+extern \"C\" {\n+  extern void __assert_fail (__const char *__assertion, __const char *__file,\n+                             unsigned int __line, __const char *__function);\n+}\n+namespace foo {\n+  class BarBox {\n+  public:\n+    BarBox (int xl = 0, int yl = 0) { }\n+  };\n+  class BarFoo {\n+  public:\n+    explicit BarFoo (BarBox box) {\n+      ((_orig_mask) ? static_cast < void >(0) :\n+       __assert_fail (\"_orig_mask\", \"foo.h\", 159, __PRETTY_FUNCTION__));\n+    }\n+    BarBox *_orig_mask;\n+  };\n+}\n+static void\n+ProcessOp (foo_aux::BarParser * p, int xl, int yr)\n+{\n+  foo::BarFoo tiles (foo::BarBox (xl, yr));\n+}"}]}