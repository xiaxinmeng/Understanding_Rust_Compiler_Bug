{"sha": "a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYxNjM1NjNmMmNlNTAyYmQ0ZWY0NDRiZDVkZTMzNTcwYmI4ZWViMQ==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2019-12-18T23:10:08Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2019-12-18T23:10:08Z"}, "message": "Add OpenACC 2.6's no_create\n\nThe clause makes any device code use the local memory address for each\nof the variables specified unless the given variable is already present\non the current device.\n\n2019-12-19  Julian Brown  <julian@codesourcery.com>\n            Maciej W. Rozycki  <macro@codesourcery.com>\n            Tobias Burnus  <tobias@codesourcery.com>\n            Thomas Schwinge  <thomas@codesourcery.com>\n\n        gcc/\n        * omp-low.c (lower_omp_target): Support GOMP_MAP_NO_ALLOC.\n        * tree-pretty-print.c (dump_omp_clause): Likewise.\n\n        gcc/c-family/\n        * c-pragma.h (pragma_omp_clause): Add\n        PRAGMA_OACC_CLAUSE_NO_CREATE.\n\n        gcc/c/\n        * c-parser.c (c_parser_omp_clause_name): Support no_create.\n        (c_parser_oacc_data_clause): Likewise.\n        (c_parser_oacc_all_clauses): Likewise.\n        (OACC_DATA_CLAUSE_MASK, OACC_KERNELS_CLAUSE_MASK)\n        (OACC_PARALLEL_CLAUSE_MASK, OACC_SERIAL_CLAUSE_MASK): Add\n        PRAGMA_OACC_CLAUSE_NO_CREATE.\n        * c-typeck.c (handle_omp_array_sections): Support\n        GOMP_MAP_NO_ALLOC.\n\n        gcc/cp/\n        * parser.c (cp_parser_omp_clause_name): Support no_create.\n        (cp_parser_oacc_data_clause): Likewise.\n        (cp_parser_oacc_all_clauses): Likewise.\n        (OACC_DATA_CLAUSE_MASK, OACC_KERNELS_CLAUSE_MASK)\n        (OACC_PARALLEL_CLAUSE_MASK): Add PRAGMA_OACC_CLAUSE_NO_CREATE.\n        * semantics.c (handle_omp_array_sections): Support no_create.\n\n        gcc/fortran/\n        * gfortran.h (gfc_omp_map_op): Add OMP_MAP_NO_ALLOC.\n        * openmp.c (omp_mask2): Add OMP_CLAUSE_NO_CREATE.\n        (gfc_match_omp_clauses): Support no_create.\n        (OACC_PARALLEL_CLAUSES, OACC_KERNELS_CLAUSES)\n        (OACC_DATA_CLAUSES): Add OMP_CLAUSE_NO_CREATE.\n        * trans-openmp.c (gfc_trans_omp_clauses_1): Support\n        OMP_MAP_NO_ALLOC.\n\n        gcc/testsuite/\n        * gfortran.dg/goacc/common-block-1.f90: Add no_create-clause tests.\n        * gfortran.dg/goacc/common-block-1.f90: Likewise.\n        * gfortran.dg/goacc/data-clauses.f95: Likewise.\n        * gfortran.dg/goacc/data-tree.f95: Likewise.\n        * gfortran.dg/goacc/kernels-tree.f95: Likewise.\n        * gfortran.dg/goacc/parallel-tree.f95: Likewise.\n\n        include/\n        * gomp-constants.h (gomp_map_kind): Support GOMP_MAP_NO_ALLOC.\n\n        libgomp/\n        * target.c (gomp_map_vars_async): Support GOMP_MAP_NO_ALLOC.\n        * testsuite/libgomp.oacc-c-c++-common/no_create-1.c: New test.\n        * testsuite/libgomp.oacc-c-c++-common/no_create-2.c: New test.\n        * testsuite/libgomp.oacc-c-c++-common/no_create-3.c: New test.\n        * testsuite/libgomp.oacc-c-c++-common/no_create-4.c: New test.\n        * testsuite/libgomp.oacc-c-c++-common/no_create-5.c: New test.\n        * testsuite/libgomp.oacc-fortran/no_create-1.f90: New test.\n        * testsuite/libgomp.oacc-fortran/no_create-2.f90: New test.\n        * testsuite/libgomp.oacc-fortran/no_create-3.F90: New test.\n\nReviewed-by: Thomas Schwinge <thomas@codesourcery.com>\n\nCo-Authored-By: Maciej W. Rozycki <macro@codesourcery.com>\nCo-Authored-By: Thomas Schwinge <thomas@codesourcery.com>\nCo-Authored-By: Tobias Burnus <tobias@codesourcery.com>\n\nFrom-SVN: r279551", "tree": {"sha": "59609d0628552734e447c5d478954ddb39030ee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59609d0628552734e447c5d478954ddb39030ee2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11b8091fb33c894cea20702d3e85389723987910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11b8091fb33c894cea20702d3e85389723987910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11b8091fb33c894cea20702d3e85389723987910"}], "stats": {"total": 635, "additions": 616, "deletions": 19}, "files": [{"sha": "825b07763335ef172ae414ca02c24d66c39f84ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -1,3 +1,11 @@\n+2019-12-19  Julian Brown  <julian@codesourcery.com>\n+\t    Maciej W. Rozycki  <macro@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-low.c (lower_omp_target): Support GOMP_MAP_NO_ALLOC.\n+\t* tree-pretty-print.c (dump_omp_clause): Likewise.\n+\n 2019-12-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* ira.c (ira): Use simple LRA algorithm when not optimizing."}, {"sha": "77d928a30780bf5d86ed8d92b51db24b222480f2", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -1,3 +1,11 @@\n+2019-12-19  Julian Brown  <julian@codesourcery.com>\n+\t    Maciej W. Rozycki  <macro@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-pragma.h (pragma_omp_clause): Add\n+\tPRAGMA_OACC_CLAUSE_NO_CREATE.\n+\n 2019-12-17  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/61339"}, {"sha": "3754c5fda45e3c0c32a4dabcf3f59d14444cc951", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -154,6 +154,7 @@ enum pragma_omp_clause {\n   PRAGMA_OACC_CLAUSE_GANG,\n   PRAGMA_OACC_CLAUSE_HOST,\n   PRAGMA_OACC_CLAUSE_INDEPENDENT,\n+  PRAGMA_OACC_CLAUSE_NO_CREATE,\n   PRAGMA_OACC_CLAUSE_NUM_GANGS,\n   PRAGMA_OACC_CLAUSE_NUM_WORKERS,\n   PRAGMA_OACC_CLAUSE_PRESENT,"}, {"sha": "f4a088a95118967c4f60520b12330a150ccdf913", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -1,3 +1,17 @@\n+2019-12-19  Julian Brown  <julian@codesourcery.com>\n+\t    Maciej W. Rozycki  <macro@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_name): Support no_create.\n+\t(c_parser_oacc_data_clause): Likewise.\n+\t(c_parser_oacc_all_clauses): Likewise.\n+\t(OACC_DATA_CLAUSE_MASK, OACC_KERNELS_CLAUSE_MASK)\n+\t(OACC_PARALLEL_CLAUSE_MASK, OACC_SERIAL_CLAUSE_MASK): Add\n+\tPRAGMA_OACC_CLAUSE_NO_CREATE.\n+\t* c-typeck.c (handle_omp_array_sections): Support\n+\tGOMP_MAP_NO_ALLOC.\n+\n 2019-12-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-objc-common.c (range_label_for_type_mismatch::get_text):"}, {"sha": "9b8008816d2310785245125c6e775c6d7415da72", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -12650,7 +12650,9 @@ c_parser_omp_clause_name (c_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_MERGEABLE;\n \t  break;\n \tcase 'n':\n-\t  if (!strcmp (\"nogroup\", p))\n+\t  if (!strcmp (\"no_create\", p))\n+\t    result = PRAGMA_OACC_CLAUSE_NO_CREATE;\n+\t  else if (!strcmp (\"nogroup\", p))\n \t    result = PRAGMA_OMP_CLAUSE_NOGROUP;\n \t  else if (!strcmp (\"nontemporal\", p))\n \t    result = PRAGMA_OMP_CLAUSE_NONTEMPORAL;\n@@ -13113,7 +13115,10 @@ c_parser_omp_var_list_parens (c_parser *parser, enum omp_clause_code kind,\n    copyout ( variable-list )\n    create ( variable-list )\n    delete ( variable-list )\n-   present ( variable-list ) */\n+   present ( variable-list )\n+\n+   OpenACC 2.6:\n+   no_create ( variable-list ) */\n \n static tree\n c_parser_oacc_data_clause (c_parser *parser, pragma_omp_clause c_kind,\n@@ -13149,6 +13154,9 @@ c_parser_oacc_data_clause (c_parser *parser, pragma_omp_clause c_kind,\n     case PRAGMA_OACC_CLAUSE_LINK:\n       kind = GOMP_MAP_LINK;\n       break;\n+    case PRAGMA_OACC_CLAUSE_NO_CREATE:\n+      kind = GOMP_MAP_IF_PRESENT;\n+      break;\n     case PRAGMA_OACC_CLAUSE_PRESENT:\n       kind = GOMP_MAP_FORCE_PRESENT;\n       break;\n@@ -15947,6 +15955,10 @@ c_parser_oacc_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  clauses = c_parser_oacc_data_clause (parser, c_kind, clauses);\n \t  c_name = \"link\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_NO_CREATE:\n+\t  clauses = c_parser_oacc_data_clause (parser, c_kind, clauses);\n+\t  c_name = \"no_create\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_NUM_GANGS:\n \t  clauses = c_parser_oacc_single_int_clause (parser,\n \t\t\t\t\t\t     OMP_CLAUSE_NUM_GANGS,\n@@ -16415,6 +16427,7 @@ c_parser_oacc_cache (location_t loc, c_parser *parser)\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_CREATE)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NO_CREATE)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT))\n \n static tree\n@@ -16747,6 +16760,7 @@ c_parser_oacc_loop (location_t loc, c_parser *parser, char *p_name,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEFAULT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NO_CREATE)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NUM_GANGS)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NUM_WORKERS)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n@@ -16762,6 +16776,7 @@ c_parser_oacc_loop (location_t loc, c_parser *parser, char *p_name,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEFAULT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NO_CREATE)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRIVATE)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_FIRSTPRIVATE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NUM_GANGS)\t\t\\\n@@ -16780,6 +16795,7 @@ c_parser_oacc_loop (location_t loc, c_parser *parser, char *p_name,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEFAULT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NO_CREATE)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRIVATE)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_FIRSTPRIVATE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\"}, {"sha": "ce5e6495fb12fe4548ff47a7e2e3aa67334ec85f", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -13422,6 +13422,7 @@ handle_omp_array_sections (tree c, enum c_omp_region_type ort)\n \tswitch (OMP_CLAUSE_MAP_KIND (c))\n \t  {\n \t  case GOMP_MAP_ALLOC:\n+\t  case GOMP_MAP_IF_PRESENT:\n \t  case GOMP_MAP_TO:\n \t  case GOMP_MAP_FROM:\n \t  case GOMP_MAP_TOFROM:"}, {"sha": "05ca5ec72a20f9bc748186dad7803f0f4ea46e94", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -1,3 +1,15 @@\n+2019-12-19  Julian Brown  <julian@codesourcery.com>\n+\t    Maciej W. Rozycki  <macro@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* parser.c (cp_parser_omp_clause_name): Support no_create.\n+\t(cp_parser_oacc_data_clause): Likewise.\n+\t(cp_parser_oacc_all_clauses): Likewise.\n+\t(OACC_DATA_CLAUSE_MASK, OACC_KERNELS_CLAUSE_MASK)\n+\t(OACC_PARALLEL_CLAUSE_MASK): Add PRAGMA_OACC_CLAUSE_NO_CREATE.\n+\t* semantics.c (handle_omp_array_sections): Support no_create.\n+\n 2019-12-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* typeck.c (cxx_sizeof_or_alignof_type): Add location_t parameter"}, {"sha": "ce2e4b5b1253706dd450db384d3528e1656000ad", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -33622,7 +33622,9 @@ cp_parser_omp_clause_name (cp_parser *parser)\n \t    result = PRAGMA_OMP_CLAUSE_MERGEABLE;\n \t  break;\n \tcase 'n':\n-\t  if (!strcmp (\"nogroup\", p))\n+\t  if (!strcmp (\"no_create\", p))\n+\t    result = PRAGMA_OACC_CLAUSE_NO_CREATE;\n+\t  else if (!strcmp (\"nogroup\", p))\n \t    result = PRAGMA_OMP_CLAUSE_NOGROUP;\n \t  else if (!strcmp (\"nontemporal\", p))\n \t    result = PRAGMA_OMP_CLAUSE_NONTEMPORAL;\n@@ -33988,7 +33990,10 @@ cp_parser_omp_var_list (cp_parser *parser, enum omp_clause_code kind, tree list)\n    copyout ( variable-list )\n    create ( variable-list )\n    delete ( variable-list )\n-   present ( variable-list ) */\n+   present ( variable-list )\n+\n+   OpenACC 2.6:\n+   no_create ( variable-list ) */\n \n static tree\n cp_parser_oacc_data_clause (cp_parser *parser, pragma_omp_clause c_kind,\n@@ -34024,6 +34029,9 @@ cp_parser_oacc_data_clause (cp_parser *parser, pragma_omp_clause c_kind,\n     case PRAGMA_OACC_CLAUSE_LINK:\n       kind = GOMP_MAP_LINK;\n       break;\n+    case PRAGMA_OACC_CLAUSE_NO_CREATE:\n+      kind = GOMP_MAP_IF_PRESENT;\n+      break;\n     case PRAGMA_OACC_CLAUSE_PRESENT:\n       kind = GOMP_MAP_FORCE_PRESENT;\n       break;\n@@ -36586,6 +36594,10 @@ cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t  clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);\n \t  c_name = \"link\";\n \t  break;\n+\tcase PRAGMA_OACC_CLAUSE_NO_CREATE:\n+\t  clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);\n+\t  c_name = \"no_create\";\n+\t  break;\n \tcase PRAGMA_OACC_CLAUSE_NUM_GANGS:\n \t  code = OMP_CLAUSE_NUM_GANGS;\n \t  c_name = \"num_gangs\";\n@@ -40391,6 +40403,7 @@ cp_parser_oacc_cache (cp_parser *parser, cp_token *pragma_tok)\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_CREATE)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NO_CREATE)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT) )\n \n static tree\n@@ -40712,6 +40725,7 @@ cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok, char *p_name,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEFAULT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NO_CREATE)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NUM_GANGS)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NUM_WORKERS)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n@@ -40726,8 +40740,9 @@ cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok, char *p_name,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_CREATE)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEFAULT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_FIRSTPRIVATE)       \t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_FIRSTPRIVATE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NO_CREATE)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NUM_GANGS)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NUM_WORKERS)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\\n@@ -40745,6 +40760,7 @@ cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok, char *p_name,\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEFAULT)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_DEVICEPTR)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_IF)\t\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_NO_CREATE)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRIVATE)\t\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_FIRSTPRIVATE)\t\\\n \t| (OMP_CLAUSE_MASK_1 << PRAGMA_OACC_CLAUSE_PRESENT)\t\t\\"}, {"sha": "69010dc85cd3f73a514ab41db1eb32143d019f99", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -5292,6 +5292,7 @@ handle_omp_array_sections (tree c, enum c_omp_region_type ort)\n \t    switch (OMP_CLAUSE_MAP_KIND (c))\n \t      {\n \t      case GOMP_MAP_ALLOC:\n+\t      case GOMP_MAP_IF_PRESENT:\n \t      case GOMP_MAP_TO:\n \t      case GOMP_MAP_FROM:\n \t      case GOMP_MAP_TOFROM:"}, {"sha": "e45ec22bd9e799b541d6b3521918e739af4ee34d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -1,3 +1,16 @@\n+2019-12-19  Julian Brown  <julian@codesourcery.com>\n+\t    Maciej W. Rozycki  <macro@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gfortran.h (gfc_omp_map_op): Add OMP_MAP_NO_ALLOC.\n+\t* openmp.c (omp_mask2): Add OMP_CLAUSE_NO_CREATE.\n+\t(gfc_match_omp_clauses): Support no_create.\n+\t(OACC_PARALLEL_CLAUSES, OACC_KERNELS_CLAUSES)\n+\t(OACC_DATA_CLAUSES): Add OMP_CLAUSE_NO_CREATE.\n+\t* trans-openmp.c (gfc_trans_omp_clauses_1): Support\n+\tOMP_MAP_NO_ALLOC.\n+\n 2019-12-18  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/70853"}, {"sha": "3907d1407ac4027b5b6716a504b8a80cc4e46722", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -1192,6 +1192,7 @@ enum gfc_omp_depend_op\n enum gfc_omp_map_op\n {\n   OMP_MAP_ALLOC,\n+  OMP_MAP_IF_PRESENT,\n   OMP_MAP_TO,\n   OMP_MAP_FROM,\n   OMP_MAP_TOFROM,"}, {"sha": "576003d7ff877e72369321ac0202bacf828203b6", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -807,6 +807,7 @@ enum omp_mask2\n   OMP_CLAUSE_COPY,\n   OMP_CLAUSE_COPYOUT,\n   OMP_CLAUSE_CREATE,\n+  OMP_CLAUSE_NO_CREATE,\n   OMP_CLAUSE_PRESENT,\n   OMP_CLAUSE_DEVICEPTR,\n   OMP_CLAUSE_GANG,\n@@ -1445,6 +1446,11 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t    }\n \t  break;\n \tcase 'n':\n+\t  if ((mask & OMP_CLAUSE_NO_CREATE)\n+\t      && gfc_match (\"no_create ( \") == MATCH_YES\n+\t      && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n+\t\t\t\t\t   OMP_MAP_IF_PRESENT, true))\n+\t    continue;\n \t  if ((mask & OMP_CLAUSE_NOGROUP)\n \t      && !c->nogroup\n \t      && gfc_match (\"nogroup\") == MATCH_YES)\n@@ -1955,25 +1961,25 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n   (omp_mask (OMP_CLAUSE_IF) | OMP_CLAUSE_ASYNC | OMP_CLAUSE_NUM_GANGS\t      \\\n    | OMP_CLAUSE_NUM_WORKERS | OMP_CLAUSE_VECTOR_LENGTH | OMP_CLAUSE_REDUCTION \\\n    | OMP_CLAUSE_COPY | OMP_CLAUSE_COPYIN | OMP_CLAUSE_COPYOUT\t\t      \\\n-   | OMP_CLAUSE_CREATE | OMP_CLAUSE_PRESENT | OMP_CLAUSE_DEVICEPTR\t      \\\n-   | OMP_CLAUSE_PRIVATE | OMP_CLAUSE_FIRSTPRIVATE | OMP_CLAUSE_DEFAULT\t      \\\n-   | OMP_CLAUSE_WAIT)\n+   | OMP_CLAUSE_CREATE | OMP_CLAUSE_NO_CREATE | OMP_CLAUSE_PRESENT\t      \\\n+   | OMP_CLAUSE_DEVICEPTR | OMP_CLAUSE_PRIVATE | OMP_CLAUSE_FIRSTPRIVATE      \\\n+   | OMP_CLAUSE_DEFAULT | OMP_CLAUSE_WAIT)\n #define OACC_KERNELS_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_IF) | OMP_CLAUSE_ASYNC | OMP_CLAUSE_NUM_GANGS\t      \\\n    | OMP_CLAUSE_NUM_WORKERS | OMP_CLAUSE_VECTOR_LENGTH | OMP_CLAUSE_DEVICEPTR \\\n    | OMP_CLAUSE_COPY | OMP_CLAUSE_COPYIN | OMP_CLAUSE_COPYOUT\t\t      \\\n-   | OMP_CLAUSE_CREATE | OMP_CLAUSE_PRESENT | OMP_CLAUSE_DEFAULT\t      \\\n-   | OMP_CLAUSE_WAIT)\n+   | OMP_CLAUSE_CREATE | OMP_CLAUSE_NO_CREATE | OMP_CLAUSE_PRESENT\t      \\\n+   | OMP_CLAUSE_DEFAULT | OMP_CLAUSE_WAIT)\n #define OACC_SERIAL_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_IF) | OMP_CLAUSE_ASYNC | OMP_CLAUSE_REDUCTION\t      \\\n    | OMP_CLAUSE_COPY | OMP_CLAUSE_COPYIN | OMP_CLAUSE_COPYOUT\t\t      \\\n-   | OMP_CLAUSE_CREATE | OMP_CLAUSE_PRESENT | OMP_CLAUSE_DEVICEPTR\t      \\\n-   | OMP_CLAUSE_PRIVATE | OMP_CLAUSE_FIRSTPRIVATE | OMP_CLAUSE_DEFAULT\t      \\\n-   | OMP_CLAUSE_WAIT)\n+   | OMP_CLAUSE_CREATE | OMP_CLAUSE_NO_CREATE | OMP_CLAUSE_PRESENT\t      \\\n+   | OMP_CLAUSE_DEVICEPTR | OMP_CLAUSE_PRIVATE | OMP_CLAUSE_FIRSTPRIVATE      \\\n+   | OMP_CLAUSE_DEFAULT | OMP_CLAUSE_WAIT)\n #define OACC_DATA_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_IF) | OMP_CLAUSE_DEVICEPTR  | OMP_CLAUSE_COPY\t      \\\n    | OMP_CLAUSE_COPYIN | OMP_CLAUSE_COPYOUT | OMP_CLAUSE_CREATE\t\t      \\\n-   | OMP_CLAUSE_PRESENT)\n+   | OMP_CLAUSE_NO_CREATE | OMP_CLAUSE_PRESENT)\n #define OACC_LOOP_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_COLLAPSE) | OMP_CLAUSE_GANG | OMP_CLAUSE_WORKER\t      \\\n    | OMP_CLAUSE_VECTOR | OMP_CLAUSE_SEQ | OMP_CLAUSE_INDEPENDENT\t      \\\n@@ -2509,7 +2515,7 @@ gfc_match_oacc_routine (void)\n #define OMP_TASKLOOP_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_PRIVATE) | OMP_CLAUSE_FIRSTPRIVATE\t\t\\\n    | OMP_CLAUSE_LASTPRIVATE | OMP_CLAUSE_SHARED | OMP_CLAUSE_IF\t\t\\\n-   | OMP_CLAUSE_DEFAULT\t| OMP_CLAUSE_UNTIED | OMP_CLAUSE_FINAL\t\t\\\n+   | OMP_CLAUSE_DEFAULT | OMP_CLAUSE_UNTIED | OMP_CLAUSE_FINAL\t\t\\\n    | OMP_CLAUSE_MERGEABLE | OMP_CLAUSE_PRIORITY | OMP_CLAUSE_GRAINSIZE\t\\\n    | OMP_CLAUSE_NUM_TASKS | OMP_CLAUSE_COLLAPSE | OMP_CLAUSE_NOGROUP)\n #define OMP_TARGET_CLAUSES \\\n@@ -2531,7 +2537,7 @@ gfc_match_oacc_routine (void)\n    | OMP_CLAUSE_FROM | OMP_CLAUSE_DEPEND | OMP_CLAUSE_NOWAIT)\n #define OMP_TEAMS_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_NUM_TEAMS) | OMP_CLAUSE_THREAD_LIMIT\t\t\\\n-   | OMP_CLAUSE_DEFAULT\t| OMP_CLAUSE_PRIVATE | OMP_CLAUSE_FIRSTPRIVATE\t\\\n+   | OMP_CLAUSE_DEFAULT | OMP_CLAUSE_PRIVATE | OMP_CLAUSE_FIRSTPRIVATE\t\\\n    | OMP_CLAUSE_SHARED | OMP_CLAUSE_REDUCTION)\n #define OMP_DISTRIBUTE_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_PRIVATE) | OMP_CLAUSE_FIRSTPRIVATE\t\t\\"}, {"sha": "7153491a460682b5a9c3ecdfb760645ae859e1fb", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -2624,6 +2624,9 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\tcase OMP_MAP_ALLOC:\n \t\t  OMP_CLAUSE_SET_MAP_KIND (node, GOMP_MAP_ALLOC);\n \t\t  break;\n+\t\tcase OMP_MAP_IF_PRESENT:\n+\t\t  OMP_CLAUSE_SET_MAP_KIND (node, GOMP_MAP_IF_PRESENT);\n+\t\t  break;\n \t\tcase OMP_MAP_TO:\n \t\t  OMP_CLAUSE_SET_MAP_KIND (node, GOMP_MAP_TO);\n \t\t  break;"}, {"sha": "deed83b8c33c72fab47db05da6827f3e153113ab", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -11431,6 +11431,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  case GOMP_MAP_STRUCT:\n \t  case GOMP_MAP_ALWAYS_POINTER:\n \t    break;\n+\t  case GOMP_MAP_IF_PRESENT:\n \t  case GOMP_MAP_FORCE_ALLOC:\n \t  case GOMP_MAP_FORCE_TO:\n \t  case GOMP_MAP_FORCE_FROM:\n@@ -11842,6 +11843,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\t  switch (tkind)\n \t\t    {\n \t\t    case GOMP_MAP_ALLOC:\n+\t\t    case GOMP_MAP_IF_PRESENT:\n \t\t    case GOMP_MAP_TO:\n \t\t    case GOMP_MAP_FROM:\n \t\t    case GOMP_MAP_TOFROM:"}, {"sha": "55a550cb56fa3d03bef4c21a9ca12dfe1ed1ed72", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -1,3 +1,15 @@\n+2019-12-19  Julian Brown  <julian@codesourcery.com>\n+\t    Maciej W. Rozycki  <macro@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/common-block-1.f90: Add no_create-clause tests.\n+\t* gfortran.dg/goacc/common-block-1.f90: Likewise.\n+\t* gfortran.dg/goacc/data-clauses.f95: Likewise.\n+\t* gfortran.dg/goacc/data-tree.f95: Likewise.\n+\t* gfortran.dg/goacc/kernels-tree.f95: Likewise.\n+\t* gfortran.dg/goacc/parallel-tree.f95: Likewise.\n+\n 2019-12-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/diagnostic/alignof2.C: New."}, {"sha": "6df5aa65e707effd93f661ea73eccedaddf55035", "filename": "gcc/testsuite/gfortran.dg/goacc/common-block-1.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-1.f90?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -51,6 +51,9 @@ program test\n   !$acc data pcopyout(/blockA/, /blockB/, e, v)\n   !$acc end data\n \n+  !$acc data no_create(/blockA/, /blockB/, e, v)\n+  !$acc end data\n+\n   !$acc parallel private(/blockA/, /blockB/, e, v)\n   !$acc end parallel\n "}, {"sha": "30c87a91f36b782823257d7355bb1f99375abefa", "filename": "gcc/testsuite/gfortran.dg/goacc/common-block-2.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcommon-block-2.f90?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -39,6 +39,9 @@ program test\n   !$acc data pcopyout(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n   !$acc end data\n \n+  !$acc data no_create(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n+  !$acc end data\n+\n   !$acc parallel private(/blockA/, /blockB/, e, v, a) ! { dg-error \"Symbol .a. present on multiple clauses\" }\n   !$acc end parallel\n "}, {"sha": "30930a0cf1c5b7989199586f849bd1ef6b777845", "filename": "gcc/testsuite/gfortran.dg/goacc/data-clauses.f95", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdata-clauses.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdata-clauses.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdata-clauses.f95?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -111,6 +111,27 @@ subroutine foo (vi, asa)\n   !$acc end data\n \n \n+  !$acc parallel no_create (tip) ! { dg-error \"POINTER\" }\n+  !$acc end parallel\n+  !$acc parallel no_create (tia) ! { dg-error \"ALLOCATABLE\" }\n+  !$acc end parallel\n+  !$acc parallel deviceptr (i) no_create (i) ! { dg-error \"multiple clauses\" }\n+  !$acc end parallel\n+  !$acc parallel copy (i) no_create (i) ! { dg-error \"multiple clauses\" }\n+  !$acc end parallel\n+  !$acc parallel copyin (i) no_create (i) ! { dg-error \"multiple clauses\" }\n+  !$acc end parallel\n+  !$acc parallel copyout (i) no_create (i) ! { dg-error \"multiple clauses\" }\n+  !$acc end parallel\n+\n+  !$acc parallel no_create (i, c, r, ia, ca, ra, asa, rp, ti, vi, aa)\n+  !$acc end parallel\n+  !$acc kernels no_create (i, c, r, ia, ca, ra, asa, rp, ti, vi, aa)\n+  !$acc end kernels\n+  !$acc data no_create (i, c, r, ia, ca, ra, asa, rp, ti, vi, aa)\n+  !$acc end data\n+\n+\n   !$acc parallel present (tip) ! { dg-error \"POINTER\" }\n   !$acc end parallel\n   !$acc parallel present (tia) ! { dg-error \"ALLOCATABLE\" }"}, {"sha": "454417d6a055ea7afd4970251c1070d696758169", "filename": "gcc/testsuite/gfortran.dg/goacc/data-tree.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdata-tree.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdata-tree.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdata-tree.f95?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -7,6 +7,7 @@ program test\n   logical :: l = .true.\n \n   !$acc data if(l) copy(i), copyin(j), copyout(k), create(m) &\n+  !$acc no_create(n) &\n   !$acc present(o), pcopy(p), pcopyin(r), pcopyout(s), pcreate(t) &\n   !$acc deviceptr(u)\n   !$acc end data\n@@ -19,7 +20,7 @@ end program test\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:j\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(from:k\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(alloc:m\\\\)\" 1 \"original\" } } \n-\n+! { dg-final { scan-tree-dump-times \"map\\\\(no_alloc:n\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(force_present:o\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:p\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(to:r\\\\)\" 1 \"original\" } } "}, {"sha": "5583ffb4d04551837f133479ed223d9f5112f11e", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-tree.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-tree.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-tree.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-tree.f95?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -8,6 +8,7 @@ program test\n \n   !$acc kernels if(l) async num_gangs(i) num_workers(i) vector_length(i) &\n   !$acc copy(i), copyin(j), copyout(k), create(m) &\n+  !$acc no_create(n) &\n   !$acc present(o), pcopy(p), pcopyin(r), pcopyout(s), pcreate(t) &\n   !$acc deviceptr(u)\n   !$acc end kernels\n@@ -25,7 +26,7 @@ end program test\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:j\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(from:k\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(alloc:m\\\\)\" 1 \"original\" } } \n-\n+! { dg-final { scan-tree-dump-times \"map\\\\(no_alloc:n\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(force_present:o\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:p\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(to:r\\\\)\" 1 \"original\" } } "}, {"sha": "e33653bdd78a2becb1ea11ca769746755a878d72", "filename": "gcc/testsuite/gfortran.dg/goacc/parallel-tree.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-tree.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-tree.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-tree.f95?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -9,6 +9,7 @@ program test\n \n   !$acc parallel if(l) async num_gangs(i) num_workers(i) vector_length(i) &\n   !$acc reduction(max:q), copy(i), copyin(j), copyout(k), create(m) &\n+  !$acc no_create(n) &\n   !$acc present(o), pcopy(p), pcopyin(r), pcopyout(s), pcreate(t) &\n   !$acc deviceptr(u), private(v), firstprivate(w)\n   !$acc end parallel\n@@ -28,7 +29,7 @@ end program test\n ! { dg-final { scan-tree-dump-times \"map\\\\(to:j\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(from:k\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(alloc:m\\\\)\" 1 \"original\" } } \n-\n+! { dg-final { scan-tree-dump-times \"map\\\\(no_alloc:n\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(force_present:o\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(tofrom:p\\\\)\" 1 \"original\" } } \n ! { dg-final { scan-tree-dump-times \"map\\\\(to:r\\\\)\" 1 \"original\" } } "}, {"sha": "603617358ae571329a761a25db80dd49b4e9eccc", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -788,6 +788,9 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n \tcase GOMP_MAP_POINTER:\n \t  pp_string (pp, \"alloc\");\n \t  break;\n+\tcase GOMP_MAP_IF_PRESENT:\n+\t  pp_string (pp, \"no_alloc\");\n+\t  break;\n \tcase GOMP_MAP_TO:\n \tcase GOMP_MAP_TO_PSET:\n \t  pp_string (pp, \"to\");"}, {"sha": "faeb5c4b0eed44d25e356d32af5b18b477c7f437", "filename": "include/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -1,3 +1,10 @@\n+2019-12-19  Julian Brown  <julian@codesourcery.com>\n+\t    Maciej W. Rozycki  <macro@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gomp-constants.h (gomp_map_kind): Support GOMP_MAP_NO_ALLOC.\n+\n 2019-11-16  Tim Ruehsen  <tim.ruehsen@gmx.de>\n \n \t* demangle.h (struct demangle_component): Add member"}, {"sha": "79c5de38db576736b3d3466d71e6109081a6f366", "filename": "include/gomp-constants.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/include%2Fgomp-constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/include%2Fgomp-constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fgomp-constants.h?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -75,6 +75,8 @@ enum gomp_map_kind\n     GOMP_MAP_DEVICE_RESIDENT =\t\t(GOMP_MAP_FLAG_SPECIAL_1 | 1),\n     /* OpenACC link.  */\n     GOMP_MAP_LINK =\t\t\t(GOMP_MAP_FLAG_SPECIAL_1 | 2),\n+    /* Use device data if present, fall back to host address otherwise.  */\n+    GOMP_MAP_IF_PRESENT =\t\t\t(GOMP_MAP_FLAG_SPECIAL_1 | 3),\n     /* Do not map, copy bits for firstprivate instead.  */\n     GOMP_MAP_FIRSTPRIVATE =\t\t(GOMP_MAP_FLAG_SPECIAL | 0),\n     /* Similarly, but store the value in the pointer rather than"}, {"sha": "e1f6bb4c622b91c392a49d6e5ead7d684054392a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -1,3 +1,18 @@\n+2019-12-19  Julian Brown  <julian@codesourcery.com>\n+\t    Maciej W. Rozycki  <macro@codesourcery.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* target.c (gomp_map_vars_async): Support GOMP_MAP_NO_ALLOC.\n+\t* testsuite/libgomp.oacc-c-c++-common/no_create-1.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/no_create-2.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/no_create-3.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/no_create-4.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/no_create-5.c: New test.\n+\t* testsuite/libgomp.oacc-fortran/no_create-1.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/no_create-2.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/no_create-3.F90: New test.\n+\n 2019-12-18  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* oacc-mem.c (goacc_enter_data): Refactor, so that it can be"}, {"sha": "d83b353d13e818de5f29d131229547f2d12d1ade", "filename": "libgomp/target.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -707,6 +707,21 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t{\n \t  tgt->list[i].key = NULL;\n \n+\t  if ((kind & typemask) == GOMP_MAP_IF_PRESENT)\n+\t    {\n+\t      /* Not present, hence, skip entry - including its MAP_POINTER,\n+\t\t when existing.  */\n+\t      tgt->list[i].offset = 0;\n+\t      if (i + 1 < mapnum\n+\t\t  && ((typemask & get_kind (short_mapkind, kinds, i + 1))\n+\t\t      == GOMP_MAP_POINTER))\n+\t\t{\n+\t\t  ++i;\n+\t\t  tgt->list[i].key = NULL;\n+\t\t  tgt->list[i].offset = 0;\n+\t\t}\n+\t      continue;\n+\t    }\n \t  size_t align = (size_t) 1 << (kind >> rshift);\n \t  not_found_cnt++;\n \t  if (tgt_align < align)\n@@ -893,6 +908,14 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t\tcur_node.tgt_offset = n->tgt->tgt_start + n->tgt_offset\n \t\t\t\t      + cur_node.host_start - n->host_start;\n \t\tcontinue;\n+\t      case GOMP_MAP_IF_PRESENT:\n+\t\t/* Not present - otherwise handled above. Skip over its\n+\t\t   MAP_POINTER as well.  */\n+\t\tif (i + 1 < mapnum\n+\t\t    && ((typemask & get_kind (short_mapkind, kinds, i + 1))\n+\t\t\t== GOMP_MAP_POINTER))\n+\t\t  ++i;\n+\t\tcontinue;\n \t      default:\n \t\tbreak;\n \t      }"}, {"sha": "22e0c20cce9eee5ffeebcac5f2da94e43e757109", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/no_create-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-1.c?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -0,0 +1,49 @@\n+/* Test 'no_create' clause on compute construct, with data present on the\n+   device.  */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <openacc.h>\n+\n+#define N 128\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int var;\n+  int *arr = (int *) malloc (N * sizeof (*arr));\n+  int *devptr[2];\n+\n+  acc_copyin (&var, sizeof (var));\n+  acc_copyin (arr, N * sizeof (*arr));\n+\n+#pragma acc parallel no_create(var, arr[0:N]) copyout(devptr)\n+  {\n+    devptr[0] = &var;\n+    devptr[1] = &arr[2];\n+  }\n+\n+  if (acc_hostptr (devptr[0]) != (void *) &var)\n+    __builtin_abort ();\n+  if (acc_hostptr (devptr[1]) != (void *) &arr[2])\n+    __builtin_abort ();\n+\n+  acc_delete (&var, sizeof (var));\n+  acc_delete (arr, N * sizeof (*arr));\n+\n+#if ACC_MEM_SHARED\n+  if (devptr[0] != &var)\n+    __builtin_abort ();\n+  if (devptr[1] != &arr[2])\n+    __builtin_abort ();\n+#else\n+  if (devptr[0] == &var)\n+    __builtin_abort ();\n+  if (devptr[1] == &arr[2])\n+    __builtin_abort ();\n+#endif\n+\n+  free (arr);\n+\n+  return 0;\n+}"}, {"sha": "fbd01a25956b134767ff62e02d733da943cd255a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/no_create-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-2.c?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -0,0 +1,30 @@\n+/* Test 'no_create' clause on compute construct, with data not present on the\n+   device.  */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#define N 128\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int var;\n+  int *arr = (int *) malloc (N * sizeof (*arr));\n+  int *devptr[2];\n+\n+#pragma acc parallel no_create(var, arr[0:N]) copyout(devptr)\n+  {\n+    devptr[0] = &var;\n+    devptr[1] = &arr[2];\n+  }\n+\n+  if (devptr[0] != &var)\n+    __builtin_abort ();\n+  if (devptr[1] != &arr[2])\n+    __builtin_abort ();\n+\n+  free (arr);\n+\n+  return 0;\n+}"}, {"sha": "18466b88b5c52d774473e164e0a39f32264c395e", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/no_create-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-3.c?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -0,0 +1,25 @@\n+#include <float.h>  /* For FLT_EPSILON. */\n+#include <math.h>  /* For fabs.  */\n+#include <stdlib.h>  /* For abort.  */\n+\n+\n+int main()\n+{\n+#define N 100\n+  float b[N];\n+  float c[N];\n+\n+#pragma acc enter data create(b)\n+\n+#pragma acc parallel loop no_create(b) no_create(c)\n+  for (int i = 0; i < N; ++i)\n+    b[i] = i;\n+\n+#pragma acc exit data copyout(b)\n+\n+  for (int i = 0; i < N; ++i)\n+    if (fabs (b[i] - i) > 10.0*FLT_EPSILON)\n+      abort ();\n+\n+  return 0;\n+}"}, {"sha": "963cb3a68f676ef68154f1b443a159fb86ae615c", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/no_create-4.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-4.c?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -0,0 +1,82 @@\n+/* Test 'no_create' clause on 'data' construct and nested compute construct,\n+   with data present on the device.  */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <openacc.h>\n+\n+#define N 128\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int var;\n+  int *arr = (int *) malloc (N * sizeof (*arr));\n+  int *devptr[2];\n+\n+  acc_copyin (&var, sizeof (var));\n+  acc_copyin (arr, N * sizeof (*arr));\n+\n+#pragma acc data no_create(var, arr[0:N])\n+  {\n+    devptr[0] = (int *) acc_deviceptr (&var);\n+    devptr[1] = (int *) acc_deviceptr (&arr[2]);\n+\n+    if (devptr[0] == NULL)\n+      __builtin_abort ();\n+    if (devptr[1] == NULL)\n+      __builtin_abort ();\n+\n+    if (acc_hostptr (devptr[0]) != (void *) &var)\n+      __builtin_abort ();\n+    if (acc_hostptr (devptr[1]) != (void *) &arr[2])\n+      __builtin_abort ();\n+\n+#if ACC_MEM_SHARED\n+    if (devptr[0] != &var)\n+      __builtin_abort ();\n+    if (devptr[1] != &arr[2])\n+      __builtin_abort ();\n+#else\n+    if (devptr[0] == &var)\n+      __builtin_abort ();\n+    if (devptr[1] == &arr[2])\n+      __builtin_abort ();\n+#endif\n+\n+#pragma acc parallel copyout(devptr)\n+    {\n+      devptr[0] = &var;\n+      devptr[1] = &arr[2];\n+    }\n+\n+    if (devptr[0] == NULL)\n+      __builtin_abort ();\n+    if (devptr[1] == NULL)\n+      __builtin_abort ();\n+\n+    if (acc_hostptr (devptr[0]) != (void *) &var)\n+      __builtin_abort ();\n+    if (acc_hostptr (devptr[1]) != (void *) &arr[2])\n+      __builtin_abort ();\n+\n+#if ACC_MEM_SHARED\n+    if (devptr[0] != &var)\n+      __builtin_abort ();\n+    if (devptr[1] != &arr[2])\n+      __builtin_abort ();\n+#else\n+    if (devptr[0] == &var)\n+      __builtin_abort ();\n+    if (devptr[1] == &arr[2])\n+      __builtin_abort ();\n+#endif\n+  }\n+\n+  acc_delete (&var, sizeof (var));\n+  acc_delete (arr, N * sizeof (*arr));\n+\n+  free (arr);\n+\n+  return 0;\n+}"}, {"sha": "6f0ace501cf62fcdcc9a929e868d279b9a675e1a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/no_create-5.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fno_create-5.c?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -0,0 +1,49 @@\n+/* Test 'no_create' clause on 'data' construct and nested compute construct,\n+   with data not present on the device.  */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <openacc.h>\n+\n+#define N 128\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  int var;\n+  int *arr = (int *) malloc (N * sizeof (*arr));\n+  int *devptr[2];\n+\n+#pragma acc data no_create(var, arr[0:N])\n+  {\n+    devptr[0] = (int *) acc_deviceptr (&var);\n+    devptr[1] = (int *) acc_deviceptr (&arr[2]);\n+\n+#if ACC_MEM_SHARED\n+    if (devptr[0] == NULL)\n+      __builtin_abort ();\n+    if (devptr[1] == NULL)\n+      __builtin_abort ();\n+#else\n+    if (devptr[0] != NULL)\n+      __builtin_abort ();\n+    if (devptr[1] != NULL)\n+      __builtin_abort ();\n+#endif\n+\n+#pragma acc parallel copyout(devptr) // TODO implicit 'copy(var)' -- huh?!\n+    {\n+      devptr[0] = &var;\n+      devptr[1] = &arr[2];\n+    }\n+\n+    if (devptr[0] != &var)\n+      __builtin_abort (); // { dg-xfail-run-if \"TODO\" { *-*-* } { \"-DACC_MEM_SHARED=0\" } }\n+    if (devptr[1] != &arr[2])\n+      __builtin_abort ();\n+  }\n+\n+  free (arr);\n+\n+  return 0;\n+}"}, {"sha": "4a1d5da98aad8b358975c8734f9ce888c95abc17", "filename": "libgomp/testsuite/libgomp.oacc-fortran/no_create-1.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fno_create-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fno_create-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fno_create-1.f90?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run }\n+\n+! Test no_create clause with data construct when data is present/not present.\n+\n+program no_create\n+  use openacc\n+  implicit none\n+  logical :: shared_memory\n+  integer, parameter :: n = 512\n+  integer :: myvar, myarr(n)\n+  integer i\n+\n+  shared_memory = .false.\n+  !$acc kernels copyin (shared_memory)\n+  shared_memory = .true.\n+  !$acc end kernels\n+\n+  myvar = 77\n+  do i = 1, n\n+    myarr(i) = 0\n+  end do\n+\n+  !$acc data no_create (myvar, myarr)\n+  if (acc_is_present (myvar) .neqv. shared_memory) stop 10\n+  if (acc_is_present (myarr) .neqv. shared_memory) stop 11\n+  !$acc end data\n+\n+  !$acc enter data copyin (myvar, myarr)\n+  !$acc data no_create (myvar, myarr)\n+  if (acc_is_present (myvar) .eqv. .false.) stop 20\n+  if (acc_is_present (myarr) .eqv. .false.) stop 21\n+  !$acc end data\n+  !$acc exit data copyout (myvar, myarr)\n+\n+  if (myvar .ne. 77) stop 30\n+  do i = 1, n\n+    if (myarr(i) .ne. 0) stop 31\n+  end do\n+end program no_create"}, {"sha": "0b11f454aca0938468aa5694328129898493f857", "filename": "libgomp/testsuite/libgomp.oacc-fortran/no_create-2.f90", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fno_create-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fno_create-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fno_create-2.f90?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -0,0 +1,90 @@\n+! { dg-do run }\n+\n+! Test no_create clause with data/parallel constructs.\n+\n+program no_create\n+  use openacc\n+  implicit none\n+  logical :: shared_memory\n+  integer, parameter :: n = 512\n+  integer :: myvar, myarr(n)\n+  integer i\n+\n+  shared_memory = .false.\n+  !$acc kernels copyin (shared_memory)\n+  shared_memory = .true.\n+  !$acc end kernels\n+\n+  myvar = 55\n+  do i = 1, n\n+    myarr(i) = 0\n+  end do\n+\n+  call do_on_target(myvar, n, myarr)\n+\n+  if (shared_memory) then\n+     if (myvar .ne. 44) stop 10\n+  else\n+     if (myvar .ne. 33) stop 11\n+  end if\n+  do i = 1, n\n+    if (shared_memory) then\n+      if (myarr(i) .ne. i * 2) stop 20\n+    else\n+      if (myarr(i) .ne. i) stop 21\n+    end if\n+  end do\n+\n+  myvar = 55\n+  do i = 1, n\n+    myarr(i) = 0\n+  end do\n+\n+  !$acc enter data copyin(myvar, myarr)\n+  call do_on_target(myvar, n, myarr)\n+  !$acc exit data copyout(myvar, myarr)\n+\n+  if (myvar .ne. 44) stop 30\n+  do i = 1, n\n+    if (myarr(i) .ne. i * 2) stop 31\n+  end do\n+end program no_create\n+\n+subroutine do_on_target (var, n, arr)\n+  use openacc\n+  implicit none\n+  integer :: var, n, arr(n)\n+  integer :: i\n+\n+!$acc data no_create (var, arr)\n+\n+if (acc_is_present(var)) then\n+  ! The no_create clause is meant for partially shared-memory machines.  This\n+  ! test is written to work on non-shared-memory machines, though this is not\n+  ! necessarily a useful way to use the no_create clause in practice.\n+\n+  !$acc parallel !no_create (var)\n+   var = 44\n+  !$acc end parallel\n+else\n+   var = 33\n+end if\n+if (acc_is_present(arr)) then\n+  ! The no_create clause is meant for partially shared-memory machines.  This\n+  ! test is written to work on non-shared-memory machines, though this is not\n+  ! necessarily a useful way to use the no_create clause in practice.\n+\n+  !$acc parallel loop !no_create (arr)\n+  do i = 1, n\n+    arr(i) = i * 2\n+  end do\n+  !$acc end parallel loop\n+else\n+  do i = 1, n\n+    arr(i) = i\n+  end do\n+end if\n+\n+!$acc end data\n+\n+end subroutine do_on_target"}, {"sha": "4362688e5797ab9e63d6a7ee823a7a3b4a6ac811", "filename": "libgomp/testsuite/libgomp.oacc-fortran/no_create-3.F90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fno_create-3.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6163563f2ce502bd4ef444bd5de33570bb8eeb1/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fno_create-3.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fno_create-3.F90?ref=a6163563f2ce502bd4ef444bd5de33570bb8eeb1", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run }\n+\n+program main\n+  use iso_c_binding, only: c_sizeof\n+  use openacc, only: acc_is_present\n+  implicit none\n+  integer i\n+  integer, parameter :: n = 100\n+  real*4 b(n), c(n)\n+  real :: d(n), e(n)\n+  common /BLOCK/ d, e\n+\n+  !$acc enter data create(b) create(d)\n+\n+  if (.not. acc_is_present(b, c_sizeof(b))) stop 1\n+  if (.not. acc_is_present(d, c_sizeof(d))) stop 2\n+#if !ACC_MEM_SHARED\n+  if (acc_is_present(c, 1) .or. acc_is_present(c, c_sizeof(c))) stop 3\n+  if (acc_is_present(e, 1) .or. acc_is_present(e, c_sizeof(d))) stop 4\n+#endif\n+\n+  !$acc parallel loop no_create(b) no_create(c) no_create(/BLOCK/)\n+  do i = 1, n\n+     b(i) = i\n+     d(i) = -i\n+  end do\n+  !$acc end parallel loop\n+\n+  if (.not. acc_is_present(b, c_sizeof(b))) stop 5\n+  if (.not. acc_is_present(d, c_sizeof(d))) stop 6\n+#if !ACC_MEM_SHARED\n+  if (acc_is_present(c, 1) .or. acc_is_present(c, c_sizeof(c))) stop 7\n+  if (acc_is_present(e, 1) .or. acc_is_present(e, c_sizeof(e))) stop 8\n+#endif\n+\n+  !$acc exit data copyout(b) copyout(d)\n+  if (any(abs(b - [(real(i), i = 1, n)]) > 10*epsilon(b))) stop 9\n+  if (any(abs(d - [(real(-i), i = 1, n)]) > 10*epsilon(d))) stop 10\n+end program main"}]}