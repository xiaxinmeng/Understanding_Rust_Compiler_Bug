{"sha": "25339f1097a119662a4989964f32143ad44edbd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUzMzlmMTA5N2ExMTk2NjJhNDk4OTk2NGYzMjE0M2FkNDRlZGJkMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-02T20:16:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-02T20:16:43Z"}, "message": "re PR c++/50810 (c++0x-compat does not warn about narrowing conversions)\n\n\tPR c++/50810\ngcc/c-family\n\t* c-opts.c (c_common_handle_option): Enable -Wnarrowing as part\n\tof -Wall; include -Wnarrowing in -Wc++0x-compat; adjust default\n\tWnarrowing for C++0x and C++98.\n\t* c.opt ([Wnarrowing]): Update.\ngcc/cp\n\t* typeck2.c (check_narrowing): Adjust OPT_Wnarrowing diagnostics.\n\t(digest_init_r): Call check_narrowing irrespective of the C++ dialect.\n\t* decl.c (check_initializer): Likewise.\n\t* semantics.c (finish_compound_literal): Likewise.\ngcc/\n\t* configure.ac: Add -Wno-narrowing to warning options.\nlibcpp/\n\t* configure.ac: Add -Wno-narrowing to warning options.\n\nFrom-SVN: r180794", "tree": {"sha": "883396e26db08ff838de9608ab092c69fcce8870", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/883396e26db08ff838de9608ab092c69fcce8870"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25339f1097a119662a4989964f32143ad44edbd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25339f1097a119662a4989964f32143ad44edbd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25339f1097a119662a4989964f32143ad44edbd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25339f1097a119662a4989964f32143ad44edbd3/comments", "author": null, "committer": null, "parents": [{"sha": "24748eb48e44ae268686a795149edc03af0e4310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24748eb48e44ae268686a795149edc03af0e4310", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24748eb48e44ae268686a795149edc03af0e4310"}], "stats": {"total": 112, "additions": 91, "deletions": 21}, "files": [{"sha": "868406061e8b079f4915946f9e15eb8661630b52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -1,3 +1,10 @@\n+2011-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/50810\n+\t* configure.ac: Add -Wno-narrowing to warning options.\n+\t* doc/invoke.texi ([-Wnarrowing], [-Wc++0x-compat]): Update.\n+\n 2011-11-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/50945"}, {"sha": "4a452c3495158a2c3b09a6d6c8f57b0b66efb48b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -1,3 +1,11 @@\n+2011-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50810\n+\t* c-opts.c (c_common_handle_option): Enable -Wnarrowing as part\n+\tof -Wall; include -Wnarrowing in -Wc++0x-compat; adjust default\n+\tWnarrowing for C++0x and C++98.\n+\t* c.opt ([Wnarrowing]): Update.\n+\n 2011-11-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/44277"}, {"sha": "465bce35de30ebd42c489143887f4000e70fa213", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -406,6 +406,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \t  warn_reorder = value;\n           warn_cxx0x_compat = value;\n           warn_delnonvdtor = value;\n+\t  warn_narrowing = value;\n \t}\n \n       cpp_opts->warn_trigraphs = value;\n@@ -436,6 +437,10 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       cpp_opts->warn_cxx_operator_names = value;\n       break;\n \n+    case OPT_Wc__0x_compat:\n+      warn_narrowing = value;\n+      break;\n+\n     case OPT_Wdeprecated:\n       cpp_opts->cpp_warn_deprecated = value;\n       break;\n@@ -997,10 +1002,17 @@ c_common_post_options (const char **pfilename)\n   if (warn_implicit_function_declaration == -1)\n     warn_implicit_function_declaration = flag_isoc99;\n \n-  /* If we're allowing C++0x constructs, don't warn about C++0x\n-     compatibility problems.  */\n   if (cxx_dialect == cxx0x)\n-    warn_cxx0x_compat = 0;\n+    {\n+      /* If we're allowing C++0x constructs, don't warn about C++98\n+\t identifiers which are keywords in C++0x.  */\n+      warn_cxx0x_compat = 0;\n+\n+      if (warn_narrowing == -1)\n+\twarn_narrowing = 1;\n+    }\n+  else if (warn_narrowing == -1)\n+    warn_narrowing = 0;\n \n   if (flag_preprocess_only)\n     {"}, {"sha": "0d7dc88b1ca9ae81d2fc01589bfcf246292437bf", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -494,8 +494,8 @@ C ObjC C++ ObjC++ Warning\n Warn about use of multi-character character constants\n \n Wnarrowing\n-C ObjC C++ ObjC++ Warning Var(warn_narrowing) Init(1)\n--Wno-narrowing\t  In C++0x mode, ignore ill-formed narrowing conversions within { }\n+C ObjC C++ ObjC++ Warning Var(warn_narrowing) Init(-1)\n+Warn about narrowing conversions within { } that are ill-formed in C++11\n \n Wnested-externs\n C ObjC Var(warn_nested_externs) Warning"}, {"sha": "35dbdd819e59c76aa3fef077ae1f370c8bce55a6", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -6394,11 +6394,12 @@ fi\n # * 'long long'\n # * variadic macros\n # * overlong strings\n+# * C++11 narrowing conversions in { }\n # So, we only use -pedantic if we can disable those warnings.\n \n loose_warn=\n save_CFLAGS=\"$CFLAGS\"\n-for option in -W -Wall -Wwrite-strings -Wcast-qual; do\n+for option in -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual; do\n   as_acx_Woption=`$as_echo \"acx_cv_prog_cc_warning_$option\" | $as_tr_sh`\n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether $CC supports $option\" >&5"}, {"sha": "9196996aedfbe90fc28bdaf5d0aa33e05f4eba6d", "filename": "gcc/configure.ac", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -329,10 +329,11 @@ GCC_STDINT_TYPES\n # * 'long long'\n # * variadic macros\n # * overlong strings\n+# * C++11 narrowing conversions in { }\n # So, we only use -pedantic if we can disable those warnings.\n \n ACX_PROG_CC_WARNING_OPTS(\n-\tm4_quote(m4_do([-W -Wall -Wwrite-strings -Wcast-qual])), [loose_warn])\n+\tm4_quote(m4_do([-W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual])), [loose_warn])\n ACX_PROG_CC_WARNING_OPTS(\n \tm4_quote(m4_do([-Wstrict-prototypes -Wmissing-prototypes])),\n \t[c_loose_warn])"}, {"sha": "3e605e68bdc4eaef5fa3110ff56782af5b72cbdc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -1,3 +1,11 @@\n+2011-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50810\n+\t* typeck2.c (check_narrowing): Adjust OPT_Wnarrowing diagnostics.\n+\t(digest_init_r): Call check_narrowing irrespective of the C++ dialect.\n+\t* decl.c (check_initializer): Likewise.\n+\t* semantics.c (finish_compound_literal): Likewise.\n+\n 2011-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50956"}, {"sha": "edbc783b567b38c3259b76efe62c4203eda8ced0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -5538,7 +5538,7 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n \t  else\n \t    {\n \t      init = reshape_init (type, init, tf_warning_or_error);\n-\t      if (cxx_dialect >= cxx0x && SCALAR_TYPE_P (type))\n+\t      if (SCALAR_TYPE_P (type))\n \t\tcheck_narrowing (type, init);\n \t    }\n \t}"}, {"sha": "a80aec6c52da6ae1a559a2a4733eda61d22a4b45", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -2369,7 +2369,7 @@ finish_compound_literal (tree type, tree compound_literal,\n       && check_array_initializer (NULL_TREE, type, compound_literal))\n     return error_mark_node;\n   compound_literal = reshape_init (type, compound_literal, complain);\n-  if (cxx_dialect >= cxx0x && SCALAR_TYPE_P (type)\n+  if (SCALAR_TYPE_P (type)\n       && !BRACE_ENCLOSED_INITIALIZER_P (compound_literal))\n     check_narrowing (type, compound_literal);\n   if (TREE_CODE (type) == ARRAY_TYPE"}, {"sha": "1b434498860a4b7d75b4efba66baecf46eaaab8b", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -804,8 +804,16 @@ check_narrowing (tree type, tree init)\n     }\n \n   if (!ok)\n-    pedwarn (input_location, OPT_Wnarrowing, \"narrowing conversion of %qE \"\n-\t     \"from %qT to %qT inside { }\", init, ftype, type);\n+    {\n+      if (cxx_dialect >= cxx0x)\n+\tpedwarn (EXPR_LOC_OR_HERE (init), OPT_Wnarrowing,\n+\t\t \"narrowing conversion of %qE from %qT to %qT inside { }\",\n+\t\t init, ftype, type);\n+      else\n+\twarning_at (EXPR_LOC_OR_HERE (init), OPT_Wnarrowing,\n+\t\t    \"narrowing conversion of %qE from %qT to %qT inside { } \"\n+\t\t    \"is ill-formed in C++11\", init, ftype, type);\n+    }\n }\n \n /* Process the initializer INIT for a variable of type TYPE, emitting\n@@ -902,7 +910,7 @@ digest_init_r (tree type, tree init, bool nested, int flags,\n     {\n       tree *exp;\n \n-      if (cxx_dialect != cxx98 && nested)\n+      if (nested)\n \tcheck_narrowing (type, init);\n       init = convert_for_initialization (0, type, init, flags,\n \t\t\t\t\t ICR_INIT, NULL_TREE, 0,"}, {"sha": "d6c1faf090ce6357f3fac8ee507b86ae69bf1d56", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -2363,17 +2363,22 @@ an instance of a derived class through a pointer to a base class if the\n base class does not have a virtual destructor.  This warning is enabled\n by @option{-Wall}.\n \n-@item -Wno-narrowing @r{(C++ and Objective-C++ only)}\n+@item -Wnarrowing @r{(C++ and Objective-C++ only)}\n @opindex Wnarrowing\n @opindex Wno-narrowing\n-With -std=c++11, suppress the diagnostic required by the standard for\n-narrowing conversions within @samp{@{ @}}, e.g.\n+Warn when a narrowing conversion prohibited by C++11 occurs within\n+@samp{@{ @}}, e.g.\n \n @smallexample\n int i = @{ 2.2 @}; // error: narrowing from double to int\n @end smallexample\n \n-This flag can be useful for compiling valid C++98 code in C++11 mode.\n+This flag is included in @option{-Wall} and @option{-Wc++11-compat}.\n+\n+With -std=c++11, @option{-Wno-narrowing} suppresses the diagnostic\n+required by the standard.  Note that this does not affect the meaning\n+of well-formed code; narrowing conversions are still considered\n+ill-formed in SFINAE context.\n \n @item -Wnoexcept @r{(C++ and Objective-C++ only)}\n @opindex Wnoexcept\n@@ -4062,9 +4067,10 @@ ISO C and ISO C++, e.g.@: request for implicit conversion from\n @code{void *} to a pointer to non-@code{void} type.\n \n @item -Wc++11-compat @r{(C++ and Objective-C++ only)}\n-Warn about C++ constructs whose meaning differs between ISO C++ 1998 and\n-ISO C++ 2011, e.g., identifiers in ISO C++ 1998 that will become keywords\n-in ISO C++ 2011.  This warning is enabled by @option{-Wall}.\n+Warn about C++ constructs whose meaning differs between ISO C++ 1998\n+and ISO C++ 2011, e.g., identifiers in ISO C++ 1998 that are keywords\n+in ISO C++ 2011.  This warning turns on @option{-Wnarrowing} and is\n+enabled by @option{-Wall}.\n \n @item -Wcast-qual\n @opindex Wcast-qual"}, {"sha": "2975ff2cec37da8ba7ded680dadf3d8b9b9620b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -1,3 +1,9 @@\n+2011-11-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/50810\n+\t* g++.dg/cpp0x/warn_cxx0x2.C: New.\n+\t* g++.dg/cpp0x/warn_cxx0x3.C: Likewise.\n+\n 2011-11-02  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/50769"}, {"sha": "116b2331762be7fe440043a7d81d5111ae9abddf", "filename": "gcc/testsuite/g++.dg/cpp0x/warn_cxx0x2.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fwarn_cxx0x2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fwarn_cxx0x2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fwarn_cxx0x2.C?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/50810\n+// { dg-options \"-std=gnu++98 -Wc++11-compat\" }\n+\n+signed char data[] = { 0xff }; // { dg-warning \"narrowing\" }"}, {"sha": "c3df9d99ed3a0a806aa30f6d3468b34d5bc8b091", "filename": "gcc/testsuite/g++.dg/cpp0x/warn_cxx0x3.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fwarn_cxx0x3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fwarn_cxx0x3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fwarn_cxx0x3.C?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/50810\n+// { dg-options \"-std=gnu++98 -Wc++11-compat -Wno-narrowing\" }\n+\n+signed char data[] = { 0xff };"}, {"sha": "3fecead3f5b41e3029bb2b136f2600c564ed1606", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -1,3 +1,8 @@\n+2011-11-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/50810\n+\t* configure.ac: Add -Wno-narrowing to warning options.\n+\n 2011-10-31  Jason Merrill  <jason@redhat.com>\n \n \tPR libstdc++/1773"}, {"sha": "a26a4775bf98f298d18334bbb4ec259e38b836b7", "filename": "libcpp/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -4687,7 +4687,7 @@ test -n \"$AUTOHEADER\" || AUTOHEADER=\"$MISSING autoheader\"\n \n warn=\n save_CFLAGS=\"$CFLAGS\"\n-for option in -W -Wall -Wwrite-strings \\\n+for option in -W -Wall -Wno-narrowing -Wwrite-strings \\\n \t\t\t  -Wmissing-format-attribute; do\n   as_acx_Woption=`$as_echo \"acx_cv_prog_cc_warning_$option\" | $as_tr_sh`\n "}, {"sha": "e8437680ffa8e307b30ee482d75b3c3f3f8f5bc8", "filename": "libcpp/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25339f1097a119662a4989964f32143ad44edbd3/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25339f1097a119662a4989964f32143ad44edbd3/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=25339f1097a119662a4989964f32143ad44edbd3", "patch": "@@ -33,7 +33,7 @@ AC_CHECK_PROGS([AUTOHEADER], [autoheader], [$MISSING autoheader])\n # Figure out what compiler warnings we can enable.\n # See config/warnings.m4 for details.\n \n-ACX_PROG_CC_WARNING_OPTS([-W -Wall -Wwrite-strings \\\n+ACX_PROG_CC_WARNING_OPTS([-W -Wall -Wno-narrowing -Wwrite-strings \\\n \t\t\t  -Wmissing-format-attribute], [warn])\n ACX_PROG_CC_WARNING_OPTS([-Wstrict-prototypes -Wmissing-prototypes \\\n \t\t\t  -Wold-style-definition -Wc++-compat], [c_warn])"}]}