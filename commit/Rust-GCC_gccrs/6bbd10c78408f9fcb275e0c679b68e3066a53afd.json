{"sha": "6bbd10c78408f9fcb275e0c679b68e3066a53afd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJiZDEwYzc4NDA4ZjlmY2IyNzVlMGM2NzliNjhlMzA2NmE1M2FmZA==", "commit": {"author": {"name": "Matt Austern", "email": "austern@gmail.com", "date": "2005-02-19T23:57:23Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2005-02-19T23:57:23Z"}, "message": "functional (tr1_hashtable_define_trivial_hash): Make hash<T>::operator() a const member function for T a fundamental type\n\n* include/tr1/functional (tr1_hashtable_define_trivial_hash): Make\nhash<T>::operator() a const member function for T a fundamental type\n* include/tr1/hashtable (extract1st::operator()): Declare const.\n(hash_code_base): Declare all member functions const\n(hashtable::find): fix call to this->bucket_count()\n(hashtable::count): Likewise.\n(hashtable::equal_range): m_incr_bucket applies to iterator, not node.\n* testsuite/tr1/6_containers/unordered/find/set1.cc: New test.\n* testsuite/tr1/6_containers/unordered/find/map1.cc: New test.\n* testsuite/tr1/6_containers/unordered/find/multimap1.cc: New test.\n* testsuite/tr1/6_containers/unordered/find/multiset1.cc: New test.\n\nFrom-SVN: r95293", "tree": {"sha": "90f48cdddc22353dd11ce9358af399d723af5643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90f48cdddc22353dd11ce9358af399d723af5643"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bbd10c78408f9fcb275e0c679b68e3066a53afd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbd10c78408f9fcb275e0c679b68e3066a53afd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bbd10c78408f9fcb275e0c679b68e3066a53afd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbd10c78408f9fcb275e0c679b68e3066a53afd/comments", "author": {"login": "austern", "id": 2576694, "node_id": "MDQ6VXNlcjI1NzY2OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2576694?v=4", "gravatar_id": "", "url": "https://api.github.com/users/austern", "html_url": "https://github.com/austern", "followers_url": "https://api.github.com/users/austern/followers", "following_url": "https://api.github.com/users/austern/following{/other_user}", "gists_url": "https://api.github.com/users/austern/gists{/gist_id}", "starred_url": "https://api.github.com/users/austern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/austern/subscriptions", "organizations_url": "https://api.github.com/users/austern/orgs", "repos_url": "https://api.github.com/users/austern/repos", "events_url": "https://api.github.com/users/austern/events{/privacy}", "received_events_url": "https://api.github.com/users/austern/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72aff31a37fc3f58d9c2165bee672083a57cda86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72aff31a37fc3f58d9c2165bee672083a57cda86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72aff31a37fc3f58d9c2165bee672083a57cda86"}], "stats": {"total": 345, "additions": 324, "deletions": 21}, "files": [{"sha": "6625f29632895b422640025066ce193a873cffe9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbd10c78408f9fcb275e0c679b68e3066a53afd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbd10c78408f9fcb275e0c679b68e3066a53afd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6bbd10c78408f9fcb275e0c679b68e3066a53afd", "patch": "@@ -1,3 +1,17 @@\n+2005-02-19  Matt Austern  <austern@gmail.com>\n+\n+\t* include/tr1/functional (tr1_hashtable_define_trivial_hash): Make\n+\thash<T>::operator() a const member function for T a fundamental type\n+\t* include/tr1/hashtable (extract1st::operator()): Declare const.\n+\t(hash_code_base): Declare all member functions const\n+\t(hashtable::find): fix call to this->bucket_count()\n+\t(hashtable::count): Likewise.\n+\t(hashtable::equal_range): m_incr_bucket applies to iterator, not node.\n+\t* testsuite/tr1/6_containers/unordered/find/set1.cc: New test.\n+\t* testsuite/tr1/6_containers/unordered/find/map1.cc: New test.\n+\t* testsuite/tr1/6_containers/unordered/find/multimap1.cc: New test.\n+\t* testsuite/tr1/6_containers/unordered/find/multiset1.cc: New test.\n+\t\n 2005-02-19  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR libstdc++/20071"}, {"sha": "0323b962d3f31de2d8c9df6806ddf82cab9e3560", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbd10c78408f9fcb275e0c679b68e3066a53afd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbd10c78408f9fcb275e0c679b68e3066a53afd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=6bbd10c78408f9fcb275e0c679b68e3066a53afd", "patch": "@@ -88,7 +88,7 @@ namespace tr1\n \n   #define tr1_hashtable_define_trivial_hash(T) \t\t\t\t    \\\n     template <> struct hash<T> {\t\t\t\t\t\t    \\\n-      std::size_t operator()(T val) { return static_cast<std::size_t>(val); } \\\n+      std::size_t operator()(T val) const { return static_cast<std::size_t>(val); } \\\n     }\t\t\t\t\t\t\t\t\t    \\\n \n   tr1_hashtable_define_trivial_hash(bool);"}, {"sha": "28a71f9b1f726116242213f24ad782735063f195", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbd10c78408f9fcb275e0c679b68e3066a53afd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbd10c78408f9fcb275e0c679b68e3066a53afd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=6bbd10c78408f9fcb275e0c679b68e3066a53afd", "patch": "@@ -251,7 +251,7 @@ struct identity {\n \n template <typename Pair>\n struct extract1st {\n-  typename Pair::first_type operator()(const Pair& p) { return p.first; }\n+  typename Pair::first_type operator()(const Pair& p) const { return p.first; }\n };\n \n // Default range hashing function: use division to fold a large number\n@@ -519,17 +519,17 @@ protected:\n     : m_extract(ex), m_eq(eq), m_ranged_hash(h) { }\n \n   typedef void* hash_code_t;\n-  hash_code_t m_hash_code (const Key& k) { return 0; }\n+  hash_code_t m_hash_code (const Key& k) const { return 0; }\n   std::size_t bucket_index (const Key& k, hash_code_t, std::size_t N) const\n     { return m_ranged_hash (k, N); }\n-  std::size_t bucket_index (const hash_node<Value, false>* p, std::size_t N) {\n+  std::size_t bucket_index (const hash_node<Value, false>* p, std::size_t N) const {\n     return m_ranged_hash (m_extract (p->m_v), N); \n   }\n   \n-  bool compare (const Key& k, hash_code_t, hash_node<Value, false>* n)\n+  bool compare (const Key& k, hash_code_t, hash_node<Value, false>* n) const\n     { return m_eq (k, m_extract(n->m_v)); }\n \n-  void copy_code (hash_node<Value, false>*, const hash_node<Value, false>*) { }\n+  void copy_code (hash_node<Value, false>*, const hash_node<Value, false>*) const { }\n \n   void m_swap(hash_code_base& x) {\n     m_extract.m_swap(x);\n@@ -576,17 +576,17 @@ protected:\n     : m_extract(ex), m_eq(eq), m_h1(h1), m_h2(h2) { }\n \n   typedef std::size_t hash_code_t;\n-  hash_code_t m_hash_code (const Key& k) { return m_h1(k); }\n+  hash_code_t m_hash_code (const Key& k) const { return m_h1(k); }\n   std::size_t bucket_index (const Key&, hash_code_t c, std::size_t N) const\n     { return m_h2 (c, N); }\n-  std::size_t bucket_index (const hash_node<Value, false>* p, std::size_t N) {\n+  std::size_t bucket_index (const hash_node<Value, false>* p, std::size_t N) const {\n     return m_h2 (m_h1 (m_extract (p->m_v)), N);\n   }\n \n-  bool compare (const Key& k, hash_code_t,  hash_node<Value, false>* n)\n+  bool compare (const Key& k, hash_code_t,  hash_node<Value, false>* n) const\n     { return m_eq (k, m_extract(n->m_v)); }\n \n-  void copy_code (hash_node<Value, false>*, const hash_node<Value, false>*) { }\n+  void copy_code (hash_node<Value, false>*, const hash_node<Value, false>*) const { }\n \n   void m_swap(hash_code_base& x) {\n     m_extract.m_swap(x);\n@@ -619,18 +619,18 @@ protected:\n     : m_extract(ex), m_eq(eq), m_h1(h1), m_h2(h2) { }\n \n   typedef std::size_t hash_code_t;\n-  hash_code_t m_hash_code (const Key& k) { return m_h1(k); }\n+  hash_code_t m_hash_code (const Key& k) const { return m_h1(k); }\n   std::size_t bucket_index (const Key&, hash_code_t c, std::size_t N) const\n     { return m_h2 (c, N); }\n \n-  std::size_t bucket_index (const hash_node<Value, true>* p, std::size_t N) {\n+  std::size_t bucket_index (const hash_node<Value, true>* p, std::size_t N) const {\n     return m_h2 (p->hash_code, N);\n   }\n \n-  bool compare (const Key& k, hash_code_t c,  hash_node<Value, true>* n)\n+  bool compare (const Key& k, hash_code_t c,  hash_node<Value, true>* n) const\n     { return c == n->hash_code && m_eq (k, m_extract(n->m_v)); }\n \n-  void copy_code (hash_node<Value, true>* to, const hash_node<Value, true>* from)\n+  void copy_code (hash_node<Value, true>* to, const hash_node<Value, true>* from) const\n     { to->hash_code = from->hash_code; }\n \n   void m_swap(hash_code_base& x) {\n@@ -1109,7 +1109,7 @@ typename hashtable<K,V,A,Ex,Eq,H1,H2,H,RP,c,m,u>::iterator\n hashtable<K,V,A,Ex,Eq,H1,H2,H,RP,c,m,u>::find (const key_type& k)\n {\n   typename hashtable::hash_code_t code = this->m_hash_code (k);\n-  std::size_t n = this->bucket_index (k, code, this->bucket_count);\n+  std::size_t n = this->bucket_index (k, code, this->bucket_count());\n   node* p = find_node (m_buckets[n], k, code);\n   return p ? iterator(p, m_buckets + n) : this->end();\n }\n@@ -1122,7 +1122,7 @@ typename hashtable<K,V,A,Ex,Eq,H1,H2,H,RP,c,m,u>::const_iterator\n hashtable<K,V,A,Ex,Eq,H1,H2,H,RP,c,m,u>::find (const key_type& k) const\n {\n   typename hashtable::hash_code_t code = this->m_hash_code (k);\n-  std::size_t n = this->bucket_index (k, code, this->bucket_count);\n+  std::size_t n = this->bucket_index (k, code, this->bucket_count());\n   node* p = find_node (m_buckets[n], k, code);\n   return p ? const_iterator(p, m_buckets + n) : this->end();\n }\n@@ -1135,7 +1135,7 @@ typename hashtable<K,V,A,Ex,Eq,H1,H2,H,RP,c,m,u>::size_type\n hashtable<K,V,A,Ex,Eq,H1,H2,H,RP,c,m,u>::count (const key_type& k) const\n {\n   typename hashtable::hash_code_t code = this->m_hash_code (k);\n-  std::size_t n = this->bucket_index (k, code, this->bucket_count);\n+  std::size_t n = this->bucket_index (k, code, this->bucket_count());\n   size_t result = 0;\n   for (node* p = m_buckets[n]; p ; p = p->m_next)\n     if (this->compare (k, code, p))\n@@ -1152,7 +1152,7 @@ std::pair<typename hashtable<K,V,A,Ex,Eq,H1,H2,H,RP,c,m,u>::iterator,\n hashtable<K,V,A,Ex,Eq,H1,H2,H,RP,c,m,u>::equal_range (const key_type& k)\n {\n   typename hashtable::hash_code_t code = this->m_hash_code (k);\n-  std::size_t n = this->bucket_index (k, code, this->bucket_count);\n+  std::size_t n = this->bucket_index (k, code, this->bucket_count());\n   node** head = m_buckets + n;\n   node* p = find_node (*head, k, code);\n \n@@ -1164,7 +1164,7 @@ hashtable<K,V,A,Ex,Eq,H1,H2,H,RP,c,m,u>::equal_range (const key_type& k)\n     iterator first(p, head);\n     iterator last(p1, head);\n     if (!p1)\n-      p1->m_incr_bucket();\n+      last.m_incr_bucket();\n     return std::make_pair(first, last);\n   }\n   else\n@@ -1180,7 +1180,7 @@ std::pair<typename hashtable<K,V,A,Ex,Eq,H1,H2,H,RP,c,m,u>::const_iterator,\n hashtable<K,V,A,Ex,Eq,H1,H2,H,RP,c,m,u>::equal_range (const key_type& k) const\n {\n   typename hashtable::hash_code_t code = this->m_hash_code (k);\n-  std::size_t n = this->bucket_index (k, code, this->bucket_count);\n+  std::size_t n = this->bucket_index (k, code, this->bucket_count());\n   node** head = m_buckets + n;\n   node* p = find_node (*head, k, code);\n \n@@ -1192,7 +1192,7 @@ hashtable<K,V,A,Ex,Eq,H1,H2,H,RP,c,m,u>::equal_range (const key_type& k) const\n     const_iterator first(p, head);\n     const_iterator last(p1, head);\n     if (!p1)\n-      p1->m_incr_bucket();\n+      last.m_incr_bucket();\n     return std::make_pair(first, last);\n   }\n   else"}, {"sha": "eb4385c7c33734aef25876cb954ac25e3513681f", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/find/map1.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbd10c78408f9fcb275e0c679b68e3066a53afd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ffind%2Fmap1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbd10c78408f9fcb275e0c679b68e3066a53afd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ffind%2Fmap1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ffind%2Fmap1.cc?ref=6bbd10c78408f9fcb275e0c679b68e3066a53afd", "patch": "@@ -0,0 +1,71 @@\n+// { dg-do run }\n+\n+// 2005-2-18  Matt Austern  <austern@apple.com>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.3.4.4 unordered_map\n+// find, equal_range, count\n+\n+#include <string>\n+#include <iterator>\n+#include <algorithm>\n+#include <utility>\n+#include <tr1/unordered_map>\n+#include \"testsuite_hooks.h\"\n+\n+bool test __attribute__((unused)) = true;\n+\n+void test01()\n+{\n+  typedef std::tr1::unordered_map<std::string, int> Map;\n+  typedef std::pair<const std::string, int> Pair;\n+\n+  Map m;\n+  VERIFY(m.empty());\n+\n+  std::pair<Map::iterator, bool> tmp = m.insert(Pair(\"grape\", 3));\n+  Map::iterator i = tmp.first;\n+  VERIFY(tmp.second);\n+\n+  Map::iterator i2 = m.find(\"grape\");\n+  VERIFY(i2 != m.end());\n+  VERIFY(i2 == i);\n+  VERIFY(i2->first == \"grape\");\n+  VERIFY(i2->second == 3);\n+\n+  Map::iterator i3 = m.find(\"lime\");\n+  VERIFY(i3 == m.end());\n+\n+  std::pair<Map::iterator, Map::iterator> p = m.equal_range(\"grape\");\n+  VERIFY(std::distance(p.first, p.second) == 1);\n+  VERIFY(p.first == i2);\n+\n+  std::pair<Map::iterator, Map::iterator> p2 = m.equal_range(\"lime\");\n+  VERIFY(p2.first == p2.second);\n+\n+  VERIFY(m.count(\"grape\") == 1);\n+  VERIFY(m.count(\"lime\") == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7adfaa1faf5438a66143a5e751d0dd8d09cdf702", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/find/multimap1.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbd10c78408f9fcb275e0c679b68e3066a53afd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ffind%2Fmultimap1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbd10c78408f9fcb275e0c679b68e3066a53afd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ffind%2Fmultimap1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ffind%2Fmultimap1.cc?ref=6bbd10c78408f9fcb275e0c679b68e3066a53afd", "patch": "@@ -0,0 +1,85 @@\n+// { dg-do run }\n+\n+// 2005-2-18  Matt Austern  <austern@apple.com>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.3.4.6 unordered_multimap\n+// find, equal_range, count\n+\n+#include <string>\n+#include <iterator>\n+#include <algorithm>\n+#include <utility>\n+#include <tr1/unordered_map>\n+#include \"testsuite_hooks.h\"\n+\n+bool test __attribute__((unused)) = true;\n+\n+void test01()\n+{\n+  typedef std::tr1::unordered_multimap<std::string, int> Map;\n+  typedef std::pair<const std::string, int> Pair;\n+\n+  Map m;\n+  VERIFY(m.empty());\n+\n+  m.insert(Pair(\"grape\", 3));\n+  m.insert(Pair(\"durian\", 8));\n+  m.insert(Pair(\"grape\", 7));\n+\n+  Map::iterator i1 = m.find(\"grape\");\n+  Map::iterator i2 = m.find(\"durian\");\n+  Map::iterator i3 = m.find(\"kiwi\");\n+\n+  VERIFY(i1 != m.end());\n+  VERIFY(i1->first == \"grape\");\n+  VERIFY(i1->second == 3 || i2->second == 7);\n+  VERIFY(i2 != m.end());\n+  VERIFY(i2->first == \"durian\");\n+  VERIFY(i2->second == 8);\n+  VERIFY(i3 == m.end());\n+\n+  std::pair<Map::iterator, Map::iterator> p1 = m.equal_range(\"grape\");\n+  VERIFY(std::distance(p1.first, p1.second) == 2);\n+  Map::iterator tmp = p1.first;\n+  ++tmp;\n+  VERIFY(p1.first->first == \"grape\");\n+  VERIFY(tmp->first == \"grape\");\n+  VERIFY((p1.first->second == 3 && tmp->second == 7) ||\n+\t (p1.first->second == 7 && tmp->second == 3));\n+\n+  std::pair<Map::iterator, Map::iterator> p2 = m.equal_range(\"durian\");\n+  VERIFY(std::distance(p2.first, p2.second) == 1);\n+  VERIFY(p2.first->first == \"durian\");\n+  VERIFY(p2.first->second == 8);\n+\n+  std::pair<Map::iterator, Map::iterator> p3 = m.equal_range(\"kiwi\");\n+  VERIFY(p3.first == p3.second);\n+\n+  VERIFY(m.count(\"grape\") == 2);\n+  VERIFY(m.count(\"durian\") == 1);\n+  VERIFY(m.count(\"kiwi\") == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "423667751a8bba1315d556bfe8c3554cc4a933a1", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/find/multiset1.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbd10c78408f9fcb275e0c679b68e3066a53afd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ffind%2Fmultiset1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbd10c78408f9fcb275e0c679b68e3066a53afd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ffind%2Fmultiset1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ffind%2Fmultiset1.cc?ref=6bbd10c78408f9fcb275e0c679b68e3066a53afd", "patch": "@@ -0,0 +1,67 @@\n+// { dg-do run }\n+\n+// 2005-2-18  Matt Austern  <austern@apple.com>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.3.4.5 unordered_set\n+// find, equal_range, count\n+\n+#include <string>\n+#include <iterator>\n+#include <algorithm>\n+#include <tr1/unordered_set>\n+#include \"testsuite_hooks.h\"\n+\n+bool test __attribute__((unused)) = true;\n+\n+void test01()\n+{\n+  typedef std::tr1::unordered_multiset<std::string> Set;\n+  Set s;\n+  VERIFY(s.empty());\n+\n+  s.insert(\"grape\");\n+  s.insert(\"banana\");\n+  s.insert(\"grape\");\n+\n+  Set::iterator i2 = s.find(\"banana\");\n+  VERIFY(i2 != s.end());\n+  VERIFY(*i2 == \"banana\");\n+  \n+  std::pair<Set::iterator, Set::iterator> p = s.equal_range(\"grape\");\n+  VERIFY(std::distance(p.first, p.second) == 2);\n+  Set::iterator i3 = p.first;\n+  ++i3;\n+  VERIFY(*p.first == \"grape\");\n+  VERIFY(*i3 == \"grape\");\n+\n+  Set::iterator i4 = s.find(\"lime\");\n+  VERIFY(i4 == s.end());  \n+\n+  VERIFY(s.count(\"grape\") == 2);\n+  VERIFY(s.count(\"banana\") == 1);\n+  VERIFY(s.count(\"lime\") == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3baaee69f8d9774190d57e0a56817aac0522520f", "filename": "libstdc++-v3/testsuite/tr1/6_containers/unordered/find/set1.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bbd10c78408f9fcb275e0c679b68e3066a53afd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ffind%2Fset1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bbd10c78408f9fcb275e0c679b68e3066a53afd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ffind%2Fset1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Funordered%2Ffind%2Fset1.cc?ref=6bbd10c78408f9fcb275e0c679b68e3066a53afd", "patch": "@@ -0,0 +1,66 @@\n+// { dg-do run }\n+\n+// 2005-2-18  Matt Austern  <austern@apple.com>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 6.3.4.3 unordered_set\n+// find, equal_range, count\n+\n+#include <string>\n+#include <iterator>\n+#include <algorithm>\n+#include <tr1/unordered_set>\n+#include \"testsuite_hooks.h\"\n+\n+bool test __attribute__((unused)) = true;\n+\n+void test01()\n+{\n+  typedef std::tr1::unordered_set<std::string> Set;\n+  Set s;\n+  VERIFY(s.empty());\n+\n+  std::pair<Set::iterator, bool> tmp = s.insert(\"grape\");\n+  Set::iterator i = tmp.first;\n+\n+  Set::iterator i2 = s.find(\"grape\");\n+  VERIFY(i2 != s.end());\n+  VERIFY(i2 == i);\n+  VERIFY(*i2 == \"grape\");\n+\n+  std::pair<Set::iterator, Set::iterator> p = s.equal_range(\"grape\");\n+  VERIFY(p.first == i2);\n+  VERIFY(std::distance(p.first, p.second) == 1);\n+\n+  Set::iterator i3 = s.find(\"lime\");\n+  VERIFY(i3 == s.end());  \n+\n+  std::pair<Set::iterator, Set::iterator> p2 = s.equal_range(\"lime\");\n+  VERIFY(p2.first == p2.second);\n+\n+  VERIFY(s.count(\"grape\") == 1);\n+  VERIFY(s.count(\"lime\") == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}