{"sha": "bf09d886a4be1031f7003073115af6cbc5575353", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYwOWQ4ODZhNGJlMTAzMWY3MDAzMDczMTE1YWY2Y2JjNTU3NTM1Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-01-17T13:39:47Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-01-17T13:44:30Z"}, "message": "[PR93306] Short-circuit has_include\n\nthe preprocessor evaluator has a skip_eval counter, but we weren't\nchecking it after parsing has_include(foo), but before looking for\nfoo.  Resulting in unnecessary io for 'FALSE_COND && has_include <foo>'\n\n\tPR preprocessor/93306\n\t* expr.c (parse_has_include): Refactor.  Check skip_eval before\n\tlooking.", "tree": {"sha": "eef353351a64157dbc3f1637cc0222db4d3cb17f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eef353351a64157dbc3f1637cc0222db4d3cb17f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf09d886a4be1031f7003073115af6cbc5575353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf09d886a4be1031f7003073115af6cbc5575353", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf09d886a4be1031f7003073115af6cbc5575353", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf09d886a4be1031f7003073115af6cbc5575353/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f0303833d542b273da33e4b149974e739d350e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0303833d542b273da33e4b149974e739d350e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0303833d542b273da33e4b149974e739d350e5"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "3249b93fe8840442594c06c6bb2628649499860a", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09d886a4be1031f7003073115af6cbc5575353/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09d886a4be1031f7003073115af6cbc5575353/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=bf09d886a4be1031f7003073115af6cbc5575353", "patch": "@@ -1,3 +1,9 @@\n+2020-01-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR preprocessor/93306\n+\t* expr.c (parse_has_include): Refactor.  Check skip_eval before\n+\tlooking.\n+\n 2020-01-10  David Malcolm  <dmalcolm@redhat.com>\n \n \t* include/line-map.h (class diagnostic_path): New forward decl."}, {"sha": "317faf50208e853a26746424b9b894d26926813d", "filename": "libcpp/expr.c", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf09d886a4be1031f7003073115af6cbc5575353/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf09d886a4be1031f7003073115af6cbc5575353/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=bf09d886a4be1031f7003073115af6cbc5575353", "patch": "@@ -2195,11 +2195,6 @@ static cpp_num\n parse_has_include (cpp_reader *pfile, enum include_type type)\n {\n   cpp_num result;\n-  bool paren = false;\n-  cpp_hashnode *node = 0;\n-  const cpp_token *token;\n-  bool bracket = false;\n-  char *fname = 0;\n \n   result.unsignedp = false;\n   result.high = 0;\n@@ -2208,39 +2203,34 @@ parse_has_include (cpp_reader *pfile, enum include_type type)\n \n   pfile->state.in__has_include__++;\n \n-  token = cpp_get_token (pfile);\n-  if (token->type == CPP_OPEN_PAREN)\n-    {\n-      paren = true;\n-      token = cpp_get_token (pfile);\n-    }\n+  const cpp_token *token = cpp_get_token (pfile);\n+  bool paren = token->type == CPP_OPEN_PAREN;\n+  if (paren)\n+    token = cpp_get_token (pfile);\n \n+  bool bracket = token->type != CPP_STRING;\n+  cpp_hashnode *node = NULL;\n+  char *fname = NULL;\n   if (token->type == CPP_STRING || token->type == CPP_HEADER_NAME)\n     {\n-      if (token->type == CPP_HEADER_NAME)\n-\tbracket = true;\n       fname = XNEWVEC (char, token->val.str.len - 1);\n       memcpy (fname, token->val.str.text + 1, token->val.str.len - 2);\n       fname[token->val.str.len - 2] = '\\0';\n       node = token->val.node.node;\n     }\n   else if (token->type == CPP_LESS)\n-    {\n-      bracket = true;\n-      fname = _cpp_bracket_include (pfile);\n-    }\n+    fname = _cpp_bracket_include (pfile);\n   else\n     cpp_error (pfile, CPP_DL_ERROR,\n \t       \"operator \\\"__has_include__\\\" requires a header string\");\n \n   if (fname)\n     {\n-      int angle_brackets = (bracket ? 1 : 0);\n-\n-      if (_cpp_has_header (pfile, fname, angle_brackets, type))\n+      /* Do not do the lookup if we're skipping, that's unnecessary\n+\t IO.  */\n+      if (!pfile->state.skip_eval\n+\t  && _cpp_has_header (pfile, fname, bracket, type))\n \tresult.low = 1;\n-      else\n-\tresult.low = 0;\n \n       XDELETEVEC (fname);\n     }"}]}