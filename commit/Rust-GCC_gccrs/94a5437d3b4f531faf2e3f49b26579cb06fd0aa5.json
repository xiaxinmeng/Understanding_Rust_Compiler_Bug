{"sha": "94a5437d3b4f531faf2e3f49b26579cb06fd0aa5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRhNTQzN2QzYjRmNTMxZmFmMmUzZjQ5YjI2NTc5Y2IwNmZkMGFhNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-01T13:32:06Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-27T09:15:42Z"}, "message": "[Ada] Adjust head comment of various subprograms in Exp_Fixd\n\ngcc/ada/\n\n\t* exp_fixd.adb (Build_Conversion): Adjust head comment.\n\t(Build_Divide): Likewise.\n\t(Build_Double_Divide): Likewise.\n\t(Build_Multiply): Likewise.\n\t(Build_Rem): Likewise.\n\t(Build_Scaled_Divide): Likewise.", "tree": {"sha": "889c1c9170872a16036b86293171c2a05bf7a48b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/889c1c9170872a16036b86293171c2a05bf7a48b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94a5437d3b4f531faf2e3f49b26579cb06fd0aa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94a5437d3b4f531faf2e3f49b26579cb06fd0aa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94a5437d3b4f531faf2e3f49b26579cb06fd0aa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94a5437d3b4f531faf2e3f49b26579cb06fd0aa5/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "946a5b8d6464df2b3ed4ece8cc55872a72f7e36d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946a5b8d6464df2b3ed4ece8cc55872a72f7e36d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/946a5b8d6464df2b3ed4ece8cc55872a72f7e36d"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "af1db96566449a3fb78cfcb737a91b1a50f81579", "filename": "gcc/ada/exp_fixd.adb", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94a5437d3b4f531faf2e3f49b26579cb06fd0aa5/gcc%2Fada%2Fexp_fixd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94a5437d3b4f531faf2e3f49b26579cb06fd0aa5/gcc%2Fada%2Fexp_fixd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_fixd.adb?ref=94a5437d3b4f531faf2e3f49b26579cb06fd0aa5", "patch": "@@ -69,7 +69,7 @@ package body Exp_Fixd is\n    --  Build an expression that converts the expression Expr to type Typ,\n    --  taking the source location from Sloc (N). If the conversions involve\n    --  fixed-point types, then the Conversion_OK flag will be set so that the\n-   --  resulting conversions do not get re-expanded. On return the resulting\n+   --  resulting conversions do not get re-expanded. On return, the resulting\n    --  node has its Etype set. If Rchk is set, then Do_Range_Check is set\n    --  in the resulting conversion node. If Trunc is set, then the\n    --  Float_Truncate flag is set on the conversion, which must be from\n@@ -86,15 +86,15 @@ package body Exp_Fixd is\n    --  two operand types), and both operands are converted to this type. The\n    --  Etype of the result is also set to this value. The Rounded_Result flag\n    --  of the result in this case is set from the Rounded_Result flag of node\n-   --  N. On return, the resulting node is analyzed and has its Etype set.\n+   --  N. On return, the resulting node has its Etype set.\n \n    function Build_Double_Divide\n      (N       : Node_Id;\n       X, Y, Z : Node_Id) return Node_Id;\n    --  Returns a node corresponding to the value X/(Y*Z) using the source\n    --  location from Sloc (N). The division is rounded if the Rounded_Result\n    --  flag of N is set. The integer types of X, Y, Z may be different. On\n-   --  return the resulting node is analyzed, and has its Etype set.\n+   --  return, the resulting node has its Etype set.\n \n    procedure Build_Double_Divide_Code\n      (N        : Node_Id;\n@@ -115,10 +115,9 @@ package body Exp_Fixd is\n    --  Make_Op_Multiply only in that the Etype of the resulting node is set (to\n    --  Universal_Real), or they can be integer or fixed-point types. In this\n    --  case the types need not be the same, and Build_Multiply chooses a type\n-   --  long enough to hold the product (i.e. twice the size of the longer of\n-   --  the two operand types), and both operands are converted to this type.\n-   --  The Etype of the result is also set to this value. On return, the\n-   --  resulting node is analyzed and has Etype set.\n+   --  long enough to hold the product and both operands are converted to this\n+   --  type. The type of the result is also set to this value. On return, the\n+   --  resulting node has its Etype set.\n \n    function Build_Rem (N : Node_Id; L, R : Node_Id) return Node_Id;\n    --  Builds an N_Op_Rem node from the given left and right operand\n@@ -127,15 +126,15 @@ package body Exp_Fixd is\n    --  operand with the smaller sized type to match the type of the other\n    --  operand and sets this as the result type. The result is never rounded\n    --  (rem operations cannot be rounded in any case). On return, the resulting\n-   --  node is analyzed and has its Etype set.\n+   --  node has its Etype set.\n \n    function Build_Scaled_Divide\n      (N       : Node_Id;\n       X, Y, Z : Node_Id) return Node_Id;\n    --  Returns a node corresponding to the value X*Y/Z using the source\n    --  location from Sloc (N). The division is rounded if the Rounded_Result\n    --  flag of N is set. The integer types of X, Y, Z may be different. On\n-   --  return the resulting node is analyzed and has is Etype set.\n+   --  return the resulting node has its Etype set.\n \n    procedure Build_Scaled_Divide_Code\n      (N        : Node_Id;"}]}