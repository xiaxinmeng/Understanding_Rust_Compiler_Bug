{"sha": "027f10047bf1aa24b2e8e441b554c457a6132686", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI3ZjEwMDQ3YmYxYWEyNGIyZThlNDQxYjU1NGM0NTdhNjEzMjY4Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-08-23T13:58:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-08-23T13:58:19Z"}, "message": "re PR tree-optimization/77286 (ICE in fold_convert_loc, at fold-const.c:2248 building 435.gromacs)\n\n2016-08-23  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/77286\n\t* tree-vect-loop.c (vect_analyze_loop_form_1): Do not modify\n\tthe CFG here.\n\t(vect_transform_loop): Split exit edges of loop and scalar\n\tloop if required and at the appropriate time.\n\nFrom-SVN: r239700", "tree": {"sha": "6396360f350e48e4f33a1ca55abda5edb7097000", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6396360f350e48e4f33a1ca55abda5edb7097000"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/027f10047bf1aa24b2e8e441b554c457a6132686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/027f10047bf1aa24b2e8e441b554c457a6132686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/027f10047bf1aa24b2e8e441b554c457a6132686", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/027f10047bf1aa24b2e8e441b554c457a6132686/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ea387db6c1eddc8a242d261ed2df1552222663c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea387db6c1eddc8a242d261ed2df1552222663c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ea387db6c1eddc8a242d261ed2df1552222663c"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "5cf4158a6287ae3a7dde9046e84bfbf0917d892c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027f10047bf1aa24b2e8e441b554c457a6132686/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027f10047bf1aa24b2e8e441b554c457a6132686/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=027f10047bf1aa24b2e8e441b554c457a6132686", "patch": "@@ -1,3 +1,11 @@\n+2016-08-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/77286\n+\t* tree-vect-loop.c (vect_analyze_loop_form_1): Do not modify\n+\tthe CFG here.\n+\t(vect_transform_loop): Split exit edges of loop and scalar\n+\tloop if required and at the appropriate time.\n+\n 2016-08-23  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* explow.c (get_dynamic_stack_size): Take known alignment of stack"}, {"sha": "fa06505d1f228279cf7ec8d4f597687cd432722b", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/027f10047bf1aa24b2e8e441b554c457a6132686/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/027f10047bf1aa24b2e8e441b554c457a6132686/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=027f10047bf1aa24b2e8e441b554c457a6132686", "patch": "@@ -1486,23 +1486,14 @@ vect_analyze_loop_form_1 (struct loop *loop, gcond **loop_cond,\n       return false;\n     }\n \n-  /* Make sure there exists a single-predecessor exit bb:  */\n-  if (!single_pred_p (single_exit (loop)->dest))\n+  /* Make sure the exit is not abnormal.  */\n+  edge e = single_exit (loop);\n+  if (e->flags & EDGE_ABNORMAL)\n     {\n-      edge e = single_exit (loop);\n-      if (!(e->flags & EDGE_ABNORMAL))\n-\t{\n-\t  split_loop_exit_edge (e);\n-\t  if (dump_enabled_p ())\n-\t    dump_printf (MSG_NOTE, \"split exit edge.\\n\");\n-\t}\n-      else\n-\t{\n-\t  if (dump_enabled_p ())\n-\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t     \"not vectorized: abnormal loop exit edge.\\n\");\n-\t  return false;\n-\t}\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t \"not vectorized: abnormal loop exit edge.\\n\");\n+      return false;\n     }\n \n   *loop_cond = vect_get_loop_niters (loop, assumptions, number_of_iterations,\n@@ -6759,6 +6750,16 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n       check_profitability = true;\n     }\n \n+  /* Make sure there exists a single-predecessor exit bb.  Do this before \n+     versioning.   */\n+  edge e = single_exit (loop);\n+  if (! single_pred_p (e->dest))\n+    {\n+      split_loop_exit_edge (e);\n+      if (dump_enabled_p ())\n+\tdump_printf (MSG_NOTE, \"split exit edge\\n\");\n+    }\n+\n   /* Version the loop first, if required, so the profitability check\n      comes first.  */\n \n@@ -6768,6 +6769,22 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n       check_profitability = false;\n     }\n \n+  /* Make sure there exists a single-predecessor exit bb also on the\n+     scalar loop copy.  Do this after versioning but before peeling\n+     so CFG structure is fine for both scalar and if-converted loop\n+     to make slpeel_duplicate_current_defs_from_edges face matched\n+     loop closed PHI nodes on the exit.  */\n+  if (LOOP_VINFO_SCALAR_LOOP (loop_vinfo))\n+    {\n+      e = single_exit (LOOP_VINFO_SCALAR_LOOP (loop_vinfo));\n+      if (! single_pred_p (e->dest))\n+\t{\n+\t  split_loop_exit_edge (e);\n+\t  if (dump_enabled_p ())\n+\t    dump_printf (MSG_NOTE, \"split exit edge of scalar loop\\n\");\n+\t}\n+    }\n+\n   tree ni_name = vect_build_loop_niters (loop_vinfo);\n   LOOP_VINFO_NITERS_UNCHANGED (loop_vinfo) = ni_name;\n "}]}