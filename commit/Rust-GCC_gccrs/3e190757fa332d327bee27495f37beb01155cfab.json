{"sha": "3e190757fa332d327bee27495f37beb01155cfab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UxOTA3NTdmYTMzMmQzMjdiZWUyNzQ5NWYzN2JlYjAxMTU1Y2ZhYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-04T10:55:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-04T11:15:28Z"}, "message": "phiopt: Optimize x ? 1024 : 0 to (int) x << 10 [PR97690]\n\nThe following patch generalizes the x ? 1 : 0 -> (int) x optimization\nto handle also left shifts by constant.\n\nDuring x86_64-linux and i686-linux bootstraps + regtests it triggered\nin 1514 unique non-LTO -m64 cases (sort -u on log mentioning\nfilename, function name and shift count) and 1866 -m32 cases.\n\nUnfortunately, the patch regresses (before the tests have been adjusted):\n+FAIL: gcc.dg/tree-ssa/ssa-ccp-11.c scan-tree-dump-times optimized \"if \" 0\n+FAIL: gcc.dg/vect/bb-slp-pattern-2.c -flto -ffat-lto-objects  scan-tree-dump-times slp1 \"optimized: basic block\" 1\n+FAIL: gcc.dg/vect/bb-slp-pattern-2.c scan-tree-dump-times slp1 \"optimized: basic block\" 1\nand in both cases it actually results in worse code.\n\n> > We'd need some optimization that would go through all PHI edges and\n> > compute if some use of the phi results don't actually compute a constant\n> > across all the PHI edges - 1 & 0 and 0 & 1 is always 0.\n\n> PRE should do this, IMHO only optimizing it at -O2 is fine.\n\n> > Similarly, in the slp vectorization test there is:\n> >      a[0] = b[0] ? 1 : 7;\n\n> note this, carefully avoiding the already \"optimized\" b[0] ? 1 : 0 ...\n\n> So the option is to put : 7 in the 2, 4 an 8 case as well.  The testcase\n> wasn't added for any real-world case but is artificial I guess for\n> COND_EXPR handling of invariants.\n\n> But yeah, for things like SLP it means we eventually have to\n> implement reverse transforms for all of this to make the lanes\n> matching.  But that's true anyway for things like x + 1 vs. x + 0\n> or x / 3 vs. x / 2 or other simplifications we do.\n\n2020-11-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/97690\n\t* tree-ssa-phiopt.c (conditional_replacement): Also optimize\n\tcond ? pow2p_cst : 0 as ((type) cond) << cst.\n\n\t* gcc.dg/tree-ssa/phi-opt-22.c: New test.\n\t* gcc.dg/tree-ssa/ssa-ccp-11.c: Use -O2 instead of -O1.\n\t* gcc.dg/vect/bb-slp-pattern-2.c (foo): Use ? 2 : 7, ? 4 : 7 and\n\t? 8 : 7 instead of ? 2 : 0, ? 4 : 0, ? 8 : 0.", "tree": {"sha": "270fafeaab60786b6e30f84926e44f05c9e63958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/270fafeaab60786b6e30f84926e44f05c9e63958"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e190757fa332d327bee27495f37beb01155cfab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e190757fa332d327bee27495f37beb01155cfab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e190757fa332d327bee27495f37beb01155cfab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e190757fa332d327bee27495f37beb01155cfab/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24366207b77481bceebb425569932297c441e04e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24366207b77481bceebb425569932297c441e04e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24366207b77481bceebb425569932297c441e04e"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "fd37066662bc9796fb3148fa329592920c3615a5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/phi-opt-22.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e190757fa332d327bee27495f37beb01155cfab/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e190757fa332d327bee27495f37beb01155cfab/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fphi-opt-22.c?ref=3e190757fa332d327bee27495f37beb01155cfab", "patch": "@@ -0,0 +1,11 @@\n+/* PR tree-optimization/97690 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-phiopt2\" } */\n+\n+int foo (_Bool d) { return d ? 2 : 0; }\n+int bar (_Bool d) { return d ? 1 : 0; }\n+int baz (_Bool d) { return d ? -__INT_MAX__ - 1 : 0; }\n+int qux (_Bool d) { return d ? 1024 : 0; }\n+\n+/* { dg-final { scan-tree-dump-not \"if\" \"phiopt2\" } } */\n+/* { dg-final { scan-tree-dump-times \" << \" 3 \"phiopt2\" } } */"}, {"sha": "d70ea5a0189acd2cec9e635b53a319e8aa620da4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-ccp-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e190757fa332d327bee27495f37beb01155cfab/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e190757fa332d327bee27495f37beb01155cfab/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-ccp-11.c?ref=3e190757fa332d327bee27495f37beb01155cfab", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n \n /* Test for CPROP across a DAG. */\n "}, {"sha": "c50560b53696c340b0c071296f002f65bcb91631", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pattern-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e190757fa332d327bee27495f37beb01155cfab/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pattern-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e190757fa332d327bee27495f37beb01155cfab/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pattern-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pattern-2.c?ref=3e190757fa332d327bee27495f37beb01155cfab", "patch": "@@ -13,13 +13,13 @@ foo (short * __restrict__ a, int * __restrict__ b, int stride)\n   for (i = 0; i < N/stride; i++, a += stride, b += stride)\n    {\n      a[0] = b[0] ? 1 : 7;\n-     a[1] = b[1] ? 2 : 0;\n+     a[1] = b[1] ? 2 : 7;\n      a[2] = b[2] ? 3 : 0;\n-     a[3] = b[3] ? 4 : 0;\n+     a[3] = b[3] ? 4 : 7;\n      a[4] = b[4] ? 5 : 0;\n      a[5] = b[5] ? 6 : 0;\n      a[6] = b[6] ? 7 : 0;\n-     a[7] = b[7] ? 8 : 0;\n+     a[7] = b[7] ? 8 : 7;\n    }\n }\n "}, {"sha": "e2758b2bd64468893a7b7d2f0a90fb2a9c2007e5", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e190757fa332d327bee27495f37beb01155cfab/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e190757fa332d327bee27495f37beb01155cfab/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=3e190757fa332d327bee27495f37beb01155cfab", "patch": "@@ -752,7 +752,9 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n   gimple_stmt_iterator gsi;\n   edge true_edge, false_edge;\n   tree new_var, new_var2;\n-  bool neg;\n+  bool neg = false;\n+  int shift = 0;\n+  tree nonzero_arg;\n \n   /* FIXME: Gimplification of complex type is too hard for now.  */\n   /* We aren't prepared to handle vectors either (and it is a question\n@@ -763,14 +765,22 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n \t   || POINTER_TYPE_P (TREE_TYPE (arg1))))\n     return false;\n \n-  /* The PHI arguments have the constants 0 and 1, or 0 and -1, then\n-     convert it to the conditional.  */\n-  if ((integer_zerop (arg0) && integer_onep (arg1))\n-      || (integer_zerop (arg1) && integer_onep (arg0)))\n-    neg = false;\n-  else if ((integer_zerop (arg0) && integer_all_onesp (arg1))\n-\t   || (integer_zerop (arg1) && integer_all_onesp (arg0)))\n+  /* The PHI arguments have the constants 0 and 1, or 0 and -1 or\n+     0 and (1 << cst), then convert it to the conditional.  */\n+  if (integer_zerop (arg0))\n+    nonzero_arg = arg1;\n+  else if (integer_zerop (arg1))\n+    nonzero_arg = arg0;\n+  else\n+    return false;\n+  if (integer_all_onesp (nonzero_arg))\n     neg = true;\n+  else if (integer_pow2p (nonzero_arg))\n+    {\n+      shift = tree_log2 (nonzero_arg);\n+      if (shift && POINTER_TYPE_P (TREE_TYPE (nonzero_arg)))\n+\treturn false;\n+    }\n   else\n     return false;\n \n@@ -782,12 +792,12 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n      falls through into BB.\n \n      There is a single PHI node at the join point (BB) and its arguments\n-     are constants (0, 1) or (0, -1).\n+     are constants (0, 1) or (0, -1) or (0, (1 << shift)).\n \n      So, given the condition COND, and the two PHI arguments, we can\n      rewrite this PHI into non-branching code:\n \n-       dest = (COND) or dest = COND'\n+       dest = (COND) or dest = COND' or dest = (COND) << shift\n \n      We use the condition as-is if the argument associated with the\n      true edge has the value one or the argument associated with the\n@@ -822,6 +832,14 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n       cond = fold_build1_loc (gimple_location (stmt),\n                               NEGATE_EXPR, TREE_TYPE (cond), cond);\n     }\n+  else if (shift)\n+    {\n+      cond = fold_convert_loc (gimple_location (stmt),\n+\t\t\t       TREE_TYPE (result), cond);\n+      cond = fold_build2_loc (gimple_location (stmt),\n+\t\t\t      LSHIFT_EXPR, TREE_TYPE (cond), cond,\n+\t\t\t      build_int_cst (integer_type_node, shift));\n+    }\n \n   /* Insert our new statements at the end of conditional block before the\n      COND_STMT.  */"}]}