{"sha": "fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU0ZTRlM2JmNDA3ZDNlYzc0ZThjNTkzNGYyOGJkYmM5YWFlNTVjNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-10-10T12:02:05Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-10-10T12:02:05Z"}, "message": "type_traits (__do_common_type_impl): Revert for now LWG 2141-related change.\n\n2012-10-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/type_traits (__do_common_type_impl): Revert for now\n\tLWG 2141-related change.\n\t* testsuite/20_util/common_type/requirements/typedefs-1.cc: Likewise.\n\t* testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc:\n\tAdjust.\n\nFrom-SVN: r192308", "tree": {"sha": "9134719090e14c7fd30586bfccd2cc78ee410b60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9134719090e14c7fd30586bfccd2cc78ee410b60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4/comments", "author": null, "committer": null, "parents": [{"sha": "a4a8bca9e79a3b1d28c75dca43d904b0cad64fcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4a8bca9e79a3b1d28c75dca43d904b0cad64fcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4a8bca9e79a3b1d28c75dca43d904b0cad64fcd"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "d77d97d551676a313ce6adbd93dee95cee79d8b7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4", "patch": "@@ -1,3 +1,11 @@\n+2012-10-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/type_traits (__do_common_type_impl): Revert for now\n+\tLWG 2141-related change.\n+\t* testsuite/20_util/common_type/requirements/typedefs-1.cc: Likewise.\n+\t* testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc:\n+\tAdjust.\n+\n 2012-10-09  Daniel Krugler  <daniel.kruegler@googlemail.com>\n \n \t* include/std/type_traits (common_time): Provide \"SFINAE-friendly\""}, {"sha": "510b012a3e1caad27adf580801a24d7696598c1a", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4", "patch": "@@ -1792,9 +1792,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   struct __do_common_type_impl\n   {\n     template<typename _Tp, typename _Up>\n-      static __success_type<typename decay<\n-        decltype(true ? std::declval<_Tp>() : std::declval<_Up>())\n-      >::type> _S_test(int);\n+      static __success_type<decltype\n+\t\t\t    (true ? std::declval<_Tp>()\n+\t\t\t     : std::declval<_Up>())> _S_test(int);\n \n     template<typename, typename>\n       static __failure_type _S_test(...);"}, {"sha": "c23521f9d4c80de4ff0b2342189599e3632d5dbd", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/sfinae_friendly_1.cc", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Fsfinae_friendly_1.cc?ref=fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4", "patch": "@@ -172,7 +172,7 @@ static_assert(is_type<std::common_type<int, int, int>, int>(), \"\");\n static_assert(is_type<std::common_type<int, int, int, int>, int>(), \"\");\n static_assert(is_type<std::common_type<int, int, int, int, int>, int>(), \"\");\n static_assert(is_type<std::common_type<S, S>, S>(), \"\");\n-static_assert(is_type<std::common_type<const S, const S>, S>(), \"\");\n+static_assert(is_type<std::common_type<const S, const S>, const S>(), \"\");\n static_assert(is_type<std::common_type<std::initializer_list<int>,\n \t      std::initializer_list<int>>, std::initializer_list<int>>(), \"\");\n static_assert(is_type<std::common_type<B, D>, B>(), \"\");\n@@ -188,10 +188,10 @@ static_assert(is_type<std::common_type<void*, const volatile int*>,\n static_assert(is_type<std::common_type<void, void>, void>(), \"\");\n static_assert(is_type<std::common_type<const void, const void>, void>(), \"\");\n static_assert(is_type<std::common_type<int&, int&&>, int>(), \"\");\n-static_assert(is_type<std::common_type<int&, int&>, int>(), \"\");\n+static_assert(is_type<std::common_type<int&, int&>, int&>(), \"\");\n static_assert(is_type<std::common_type<int&&, int&&>, int>(), \"\");\n-static_assert(is_type<std::common_type<U&, const U&&>, U>(), \"\");\n-static_assert(is_type<std::common_type<U&, U&>, U>(), \"\");\n+static_assert(is_type<std::common_type<U&, const U&&>, const U>(), \"\");\n+static_assert(is_type<std::common_type<U&, U&>, U&>(), \"\");\n static_assert(is_type<std::common_type<U&&, U&&>, U>(), \"\");\n static_assert(is_type<std::common_type<int B::*, int D::*>, int D::*>(), \"\");\n static_assert(is_type<std::common_type<int D::*, int B::*>, int D::*>(), \"\");\n@@ -204,14 +204,14 @@ static_assert(is_type<std::common_type<int (B::*)() const, int (D::*)() const>,\n static_assert(is_type<std::common_type<int[3], int[3]>, int*>(), \"\");\n static_assert(is_type<std::common_type<int[1], const int[3]>,\n \t      const int*>(), \"\");\n-static_assert(is_type<std::common_type<void(), void()>, void(*)()>(), \"\");\n-static_assert(is_type<std::common_type<void(&)(), void(&)()>, void(*)()>(), \"\");\n+static_assert(is_type<std::common_type<void(), void()>, void(&)()>(), \"\");\n+static_assert(is_type<std::common_type<void(&)(), void(&)()>, void(&)()>(), \"\");\n static_assert(is_type<std::common_type<void(&)(), void(&&)()>,\n-\t      void(*)()>(), \"\");\n+\t      void(&)()>(), \"\");\n static_assert(is_type<std::common_type<void(&&)(), void(&)()>,\n-\t      void(*)()>(), \"\");\n+\t      void(&)()>(), \"\");\n static_assert(is_type<std::common_type<void(&&)(), void(&&)()>,\n-\t      void(*)()>(), \"\");\n+\t      void(&)()>(), \"\");\n static_assert(is_type<std::common_type<ImplicitTo<int>, int>, int>(), \"\");\n static_assert(is_type<std::common_type<ImplicitTo<int>, ImplicitTo<int>>,\n \t      ImplicitTo<int>>(), \"\");\n@@ -222,7 +222,7 @@ static_assert(is_type<std::common_type<ExplicitTo<int>, ExplicitTo<int>>,\n static_assert(is_type<std::common_type<decltype(lmd1), decltype(lmd1)>,\n \t      decltype(lmd1)>(), \"\");\n static_assert(is_type<std::common_type<decltype(lmd1)&, decltype(lmd1)&>,\n-\t      decltype(lmd1)>(), \"\");\n+\t      decltype(lmd1)&>(), \"\");\n static_assert(is_type<std::common_type<decltype(lmd1)&, decltype(lmd2)&>,\n \t      void(*)(int, double)>(), \"\");\n static_assert(is_type<std::common_type<decltype(nullptr), void*>, void*>(), \"\");\n@@ -237,9 +237,9 @@ static_assert(is_type<std::common_type<decltype(nullptr), int (B::*)() const>,\n \t      int (B::*)() const>(), \"\");\n static_assert(is_type<std::common_type<decltype(nullptr), const int B::*>,\n \t      const int B::*>(), \"\");\n-static_assert(is_type<std::common_type<Abstract&, Abstract&>, Abstract>(), \"\");\n-static_assert(is_type<std::common_type<Ukn&, Ukn&>, Ukn>(), \"\");\n-static_assert(is_type<std::common_type<ImplicitTo<B&>, B&>, B>(), \"\");\n+static_assert(is_type<std::common_type<Abstract&, Abstract&>, Abstract&>(), \"\");\n+static_assert(is_type<std::common_type<Ukn&, Ukn&>, Ukn&>(), \"\");\n+static_assert(is_type<std::common_type<ImplicitTo<B&>, B&>, B&>(), \"\");\n static_assert(is_type<std::common_type<ImplicitTo<B&>&, B&&>, B>(), \"\");\n static_assert(is_type<std::common_type<UConv1, const Abstract*&>,\n \t      const Abstract*>(), \"\");\n@@ -328,7 +328,7 @@ void test(int i)\n   static_assert(is_type<std::common_type<decltype(local_lmd1)&,\n \t\t        decltype(local_lmd1)>, decltype(local_lmd1)>(), \"\");\n   static_assert(is_type<std::common_type<decltype(local_lmd1)&,\n-\t\t\tdecltype(local_lmd1)&>, decltype(local_lmd1)>(), \"\");\n+\t\t\tdecltype(local_lmd1)&>, decltype(local_lmd1)&>(), \"\");\n \n   static_assert(!has_type<std::common_type<decltype(local_lmd1),\n \t\tdecltype(lmd1)>>(), \"\");"}, {"sha": "4564b2bc0c96c2f9075c017795ae8cc083b621b1", "filename": "libstdc++-v3/testsuite/20_util/common_type/requirements/typedefs-1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fcommon_type%2Frequirements%2Ftypedefs-1.cc?ref=fe4e4e3bf407d3ec74e8c5934f28bdbc9aae55c4", "patch": "@@ -105,7 +105,7 @@ void test02()\n   COMMON_TYPE_TEST_ALL_2(int, int, int, 1);\n   COMMON_TYPE_TEST_ALL_2(int, double, double, 2);\n   COMMON_TYPE_TEST_2(NO_CV, A, A, A, 3);\n-  COMMON_TYPE_TEST_2(const, A, A, A, 4);\n+  COMMON_TYPE_TEST_2(const, A, A, const A, 4);\n   COMMON_TYPE_TEST_2(NO_CV, B, A, A, 5);  \n }\n "}]}