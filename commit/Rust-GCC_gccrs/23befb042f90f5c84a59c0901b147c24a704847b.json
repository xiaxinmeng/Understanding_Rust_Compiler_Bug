{"sha": "23befb042f90f5c84a59c0901b147c24a704847b", "node_id": "C_kwDOANBUbNoAKDIzYmVmYjA0MmY5MGY1Yzg0YTU5YzA5MDFiMTQ3YzI0YTcwNDg0N2I", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-01T11:42:36Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-01T21:23:44Z"}, "message": "gccrs: add {add,sub,mul}_with_overflow intrinsics\n\nFixes #1898\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-intrinsic.cc (op_with_overflow_inner): wraps op_with_overflow\n\t(std::function<tree): likewise\n\t(op_with_overflow): generate the intrinsic based on the tree_code op\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/torture/intrinsics-8.rs: New test.", "tree": {"sha": "00ab5e2a018762be7bb8a5382e47a9b97550d6c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00ab5e2a018762be7bb8a5382e47a9b97550d6c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23befb042f90f5c84a59c0901b147c24a704847b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23befb042f90f5c84a59c0901b147c24a704847b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23befb042f90f5c84a59c0901b147c24a704847b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23befb042f90f5c84a59c0901b147c24a704847b/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7394a6893dd9fc2bc34822e002b53eb200ff51d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7394a6893dd9fc2bc34822e002b53eb200ff51d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7394a6893dd9fc2bc34822e002b53eb200ff51d5"}], "stats": {"total": 142, "additions": 142, "deletions": 0}, "files": [{"sha": "04b0d3a26110d0e8df415d44a8fdd36f28e43f2f", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23befb042f90f5c84a59c0901b147c24a704847b/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23befb042f90f5c84a59c0901b147c24a704847b/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=23befb042f90f5c84a59c0901b147c24a704847b", "patch": "@@ -25,6 +25,7 @@\n #include \"rust-constexpr.h\"\n #include \"rust-tree.h\"\n #include \"tree-core.h\"\n+#include \"rust-gcc.h\"\n #include \"print-tree.h\"\n #include \"fold-const.h\"\n #include \"langhooks.h\"\n@@ -78,6 +79,8 @@ static tree\n wrapping_op_handler_inner (Context *ctx, TyTy::FnType *fntype, tree_code op);\n static tree\n copy_nonoverlapping_handler (Context *ctx, TyTy::FnType *fntype);\n+static tree\n+op_with_overflow_inner (Context *ctx, TyTy::FnType *fntype, tree_code op);\n \n enum class Prefetch\n {\n@@ -107,6 +110,14 @@ wrapping_op_handler (tree_code op)\n   };\n }\n \n+const static std::function<tree (Context *, TyTy::FnType *)>\n+op_with_overflow (tree_code op)\n+{\n+  return [op] (Context *ctx, TyTy::FnType *fntype) {\n+    return op_with_overflow_inner (ctx, fntype, op);\n+  };\n+}\n+\n static inline tree\n prefetch_read_data (Context *ctx, TyTy::FnType *fntype)\n {\n@@ -170,6 +181,9 @@ static const std::map<std::string,\n     {\"wrapping_add\", wrapping_op_handler (PLUS_EXPR)},\n     {\"wrapping_sub\", wrapping_op_handler (MINUS_EXPR)},\n     {\"wrapping_mul\", wrapping_op_handler (MULT_EXPR)},\n+    {\"add_with_overflow\", op_with_overflow (PLUS_EXPR)},\n+    {\"sub_with_overflow\", op_with_overflow (MINUS_EXPR)},\n+    {\"mul_with_overflow\", op_with_overflow (MULT_EXPR)},\n     {\"copy_nonoverlapping\", copy_nonoverlapping_handler},\n     {\"prefetch_read_data\", prefetch_read_data},\n     {\"prefetch_write_data\", prefetch_write_data},\n@@ -558,6 +572,96 @@ wrapping_op_handler_inner (Context *ctx, TyTy::FnType *fntype, tree_code op)\n   return fndecl;\n }\n \n+/**\n+ * pub fn add_with_overflow<T>(x: T, y: T) -> (T, bool);\n+ */\n+static tree\n+op_with_overflow_inner (Context *ctx, TyTy::FnType *fntype, tree_code op)\n+{\n+  // wrapping_<op> intrinsics have two parameter\n+  rust_assert (fntype->get_params ().size () == 2);\n+\n+  tree lookup = NULL_TREE;\n+  if (check_for_cached_intrinsic (ctx, fntype, &lookup))\n+    return lookup;\n+\n+  auto fndecl = compile_intrinsic_function (ctx, fntype);\n+\n+  // setup the params\n+  std::vector<Bvariable *> param_vars;\n+  compile_fn_params (ctx, fntype, fndecl, &param_vars);\n+\n+  auto &x_param = param_vars.at (0);\n+  auto &y_param = param_vars.at (1);\n+\n+  if (!ctx->get_backend ()->function_set_parameters (fndecl, param_vars))\n+    return error_mark_node;\n+\n+  enter_intrinsic_block (ctx, fndecl);\n+\n+  // BUILTIN op_with_overflow FN BODY BEGIN\n+  auto x = ctx->get_backend ()->var_expression (x_param, Location ());\n+  auto y = ctx->get_backend ()->var_expression (y_param, Location ());\n+\n+  tree overflow_builtin = error_mark_node;\n+  switch (op)\n+    {\n+    case PLUS_EXPR:\n+      BuiltinsContext::get ().lookup_simple_builtin (\"add_overflow\",\n+\t\t\t\t\t\t     &overflow_builtin);\n+      break;\n+\n+    case MINUS_EXPR:\n+      BuiltinsContext::get ().lookup_simple_builtin (\"sub_overflow\",\n+\t\t\t\t\t\t     &overflow_builtin);\n+      break;\n+\n+    case MULT_EXPR:\n+      BuiltinsContext::get ().lookup_simple_builtin (\"mul_overflow\",\n+\t\t\t\t\t\t     &overflow_builtin);\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+      break;\n+    }\n+  rust_assert (overflow_builtin != error_mark_node);\n+\n+  // this should match y as well or we can take it from the TyTy structure\n+  tree overflow_op_type = TREE_TYPE (x);\n+  tree tmp_stmt = error_mark_node;\n+  Bvariable *bvar\n+    = ctx->get_backend ()->temporary_variable (fndecl, NULL_TREE,\n+\t\t\t\t\t       overflow_op_type, NULL_TREE,\n+\t\t\t\t\t       true /*address_is_taken*/,\n+\t\t\t\t\t       Location (), &tmp_stmt);\n+  ctx->add_statement (tmp_stmt);\n+\n+  tree result_decl = bvar->get_tree (Location ());\n+  tree result_ref = build_fold_addr_expr_loc (BUILTINS_LOCATION, result_decl);\n+\n+  tree did_overflow_node\n+    = build_call_expr_loc (BUILTINS_LOCATION, overflow_builtin, 3, x, y,\n+\t\t\t   result_ref);\n+\n+  std::vector<tree> vals = {result_decl, did_overflow_node};\n+  tree tuple_type = TREE_TYPE (DECL_RESULT (fndecl));\n+  tree result_expr\n+    = ctx->get_backend ()->constructor_expression (tuple_type, false, vals, -1,\n+\t\t\t\t\t\t   Location ());\n+\n+  auto return_statement\n+    = ctx->get_backend ()->return_statement (fndecl, {result_expr},\n+\t\t\t\t\t     Location ());\n+  ctx->add_statement (return_statement);\n+\n+  // BUILTIN wrapping_<op> FN BODY END\n+\n+  finalize_intrinsic_block (ctx, fndecl);\n+\n+  return fndecl;\n+}\n+\n /**\n  * fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n  */"}, {"sha": "8788da5c7fca7fc9c8bb94ba161ed88221c84b24", "filename": "gcc/testsuite/rust/compile/torture/intrinsics-8.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23befb042f90f5c84a59c0901b147c24a704847b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23befb042f90f5c84a59c0901b147c24a704847b/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fintrinsics-8.rs?ref=23befb042f90f5c84a59c0901b147c24a704847b", "patch": "@@ -0,0 +1,38 @@\n+mod intrinsics {\n+    extern \"rust-intrinsic\" {\n+        pub fn add_with_overflow<T>(x: T, y: T) -> (T, bool);\n+        pub fn sub_with_overflow<T>(x: T, y: T) -> (T, bool);\n+        pub fn mul_with_overflow<T>(x: T, y: T) -> (T, bool);\n+    }\n+}\n+\n+pub enum Option<T> {\n+    None,\n+    Some(T),\n+}\n+\n+impl i32 {\n+    pub fn checked_add(self, rhs: Self) -> Option<Self> {\n+        let (a, b) = self.overflowing_add(rhs);\n+        if b {\n+            Option::None\n+        } else {\n+            Option::Some(a)\n+        }\n+    }\n+\n+    pub fn overflowing_add(self, rhs: Self) -> (Self, bool) {\n+        let (a, b) = unsafe { intrinsics::add_with_overflow(self as i32, rhs as i32) };\n+        (a as Self, b)\n+    }\n+\n+    pub fn overflowing_sub(self, rhs: Self) -> (Self, bool) {\n+        let (a, b) = unsafe { intrinsics::sub_with_overflow(self as i32, rhs as i32) };\n+        (a as Self, b)\n+    }\n+\n+    pub fn overflowing_mul(self, rhs: Self) -> (Self, bool) {\n+        let (a, b) = unsafe { intrinsics::mul_with_overflow(self as i32, rhs as i32) };\n+        (a as Self, b)\n+    }\n+}"}]}