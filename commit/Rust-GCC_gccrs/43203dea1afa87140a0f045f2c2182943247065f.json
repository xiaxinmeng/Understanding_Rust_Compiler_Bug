{"sha": "43203dea1afa87140a0f045f2c2182943247065f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMyMDNkZWExYWZhODcxNDBhMGYwNDVmMmMyMTgyOTQzMjQ3MDY1Zg==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2016-05-13T09:23:28Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2016-05-13T09:23:28Z"}, "message": "Set TARGET_OMIT_STRUCT_RETURN_REG to true\n\nThe reason this caught my eye on aarch64 is because\nthe return value register (x0) is not identical to the register in which\nthe hidden parameter for AArch64 is set (x8). Thus setting this to true\nseems to be quite reasonable and shaves off 100 odd mov x0, x8's from\ncc1 in a bootstrap build.\n\nI don't expect this to make a huge impact on performance but as they\nsay every little counts.  The AAPCS64 is quite explicit about not\nrequiring that the contents of x8 be kept live.\n\nBootstrapped and regression tested on aarch64.\n\nOk to apply ?\n\nRamana\n\ngcc/\n* config/aarch64/aarch64.c (TARGET_OMIT_STRUCT_RETURN_REG): Set to\ntrue.\n\ngcc/testsuite\n\n* gcc.target/aarch64/struct_return.c: New test.\n\nFrom-SVN: r236197", "tree": {"sha": "ec00ce3d8d49a2c80e8e91fcf56ef29defe59ba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec00ce3d8d49a2c80e8e91fcf56ef29defe59ba8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43203dea1afa87140a0f045f2c2182943247065f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43203dea1afa87140a0f045f2c2182943247065f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43203dea1afa87140a0f045f2c2182943247065f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43203dea1afa87140a0f045f2c2182943247065f/comments", "author": null, "committer": null, "parents": [{"sha": "44cb09ea6b2164e8392e3001b0ba5b93093bfa07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44cb09ea6b2164e8392e3001b0ba5b93093bfa07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44cb09ea6b2164e8392e3001b0ba5b93093bfa07"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "87f5eaff15b7952417cf2f0e3ee87193924f6edc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43203dea1afa87140a0f045f2c2182943247065f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43203dea1afa87140a0f045f2c2182943247065f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43203dea1afa87140a0f045f2c2182943247065f", "patch": "@@ -1,3 +1,8 @@\n+2016-05-13  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\t* config/aarch64/aarch64.c (TARGET_OMIT_STRUCT_RETURN_REG): Set\n+\tto true.\n+\n 2016-05-13  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/71080"}, {"sha": "7e0e3b9a62157cba92c42651763f6cd2954bd33f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43203dea1afa87140a0f045f2c2182943247065f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43203dea1afa87140a0f045f2c2182943247065f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=43203dea1afa87140a0f045f2c2182943247065f", "patch": "@@ -14232,6 +14232,9 @@ aarch64_optab_supported_p (int op, machine_mode, machine_mode,\n #undef TARGET_OPTAB_SUPPORTED_P\n #define TARGET_OPTAB_SUPPORTED_P aarch64_optab_supported_p\n \n+#undef TARGET_OMIT_STRUCT_RETURN_REG\n+#define TARGET_OMIT_STRUCT_RETURN_REG true\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-aarch64.h\""}, {"sha": "333bec6c5462fdcf89149e4cf0ae1111df3ab715", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43203dea1afa87140a0f045f2c2182943247065f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43203dea1afa87140a0f045f2c2182943247065f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=43203dea1afa87140a0f045f2c2182943247065f", "patch": "@@ -1,3 +1,7 @@\n+2016-05-13  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\t* gcc.target/aarch64/struct_return.c: New test.\n+\n 2016-05-12  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/70756"}, {"sha": "6d90b7e59537ea66ad89e3615a2b11f2838b8779", "filename": "gcc/testsuite/gcc.target/aarch64/struct_return.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43203dea1afa87140a0f045f2c2182943247065f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstruct_return.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43203dea1afa87140a0f045f2c2182943247065f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstruct_return.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstruct_return.c?ref=43203dea1afa87140a0f045f2c2182943247065f", "patch": "@@ -0,0 +1,31 @@\n+/* Test the absence of a spurious move from x8 to x0 for functions\n+   return structures.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+struct s\n+{\n+  long x;\n+  long y;\n+  long z;\n+};\n+\n+struct s __attribute__((noinline))\n+foo (long a, long d, long c)\n+{\n+  struct s b;\n+  b.x = a;\n+  b.y = d;\n+  b.z = c;\n+  return b;\n+}\n+\n+int\n+main (void)\n+{\n+  struct s x;\n+  x = foo ( 10, 20, 30);\n+  return x.x + x.y + x.z;\n+}\n+\n+/* { dg-final { scan-assembler-not \"mov\\tx0, x8\" } } */"}]}