{"sha": "42cda3ba45fca30e73e1c35d8e19b5ec8af24d98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJjZGEzYmE0NWZjYTMwZTczZTFjMzVkOGUxOWI1ZWM4YWYyNGQ5OA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-28T21:52:13Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-28T21:52:13Z"}, "message": "libstdc++: Fix std::reverse_iterator relational operators\n\nMy recent changes to reverse_iterator's comparisons was not the version\nof the code (or tests) that I meant to commit, and broke the relational\noperators. This fixes them to reverse the order of the comparisons on\nthe base() iterators.\n\nThis also replaces the SFINAE constraints in the return type of the\nreverse_iterator and move_iterator comparisons with a requires-clause.\nThis ensures the constrained overloads are preferred to unconstrained\nones. This means the non-standard same-type overloads can be omitted for\nC++20 because they're not needed to solve the problem with std::rel_ops\nor the testsuite's greedy_ops::X type.\n\n\t* include/bits/stl_iterator.h (reverse_iterator): Use requires-clause\n\tto constrain C++20 versions of comparison operators. Fix backwards\n\tlogic of relational operators.\n\t(move_iterator): Use requires-clause to constrain comparison operators\n\tin C++20. Do not declare non-standard same-type overloads for C++20.\n\t* testsuite/24_iterators/move_iterator/rel_ops_c++20.cc: Check result\n\tof comparisons and check using greedy_ops type.\n\t* testsuite/24_iterators/reverse_iterator/rel_ops_c++20.cc: Likewise.\n\t* testsuite/24_iterators/move_iterator/greedy_ops.cc: Remove redundant\n\tmain function from compile-only test.\n\t* testsuite/24_iterators/reverse_iterator/greedy_ops.cc: Likewise.", "tree": {"sha": "1c6c5cd4868756a8cf29c5fa69256ad95c5d3cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c6c5cd4868756a8cf29c5fa69256ad95c5d3cb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "946a444df340609663975c998edc8dfa47284c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946a444df340609663975c998edc8dfa47284c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/946a444df340609663975c998edc8dfa47284c38"}], "stats": {"total": 251, "additions": 167, "deletions": 84}, "files": [{"sha": "a016f640df35499b407a0b7a658769a8a4418892", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=42cda3ba45fca30e73e1c35d8e19b5ec8af24d98", "patch": "@@ -1,3 +1,17 @@\n+2020-03-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_iterator.h (reverse_iterator): Use requires-clause\n+\tto constrain C++20 versions of comparison operators. Fix backwards\n+\tlogic of relational operators.\n+\t(move_iterator): Use requires-clause to constrain comparison operators\n+\tin C++20. Do not declare non-standard same-type overloads for C++20.\n+\t* testsuite/24_iterators/move_iterator/rel_ops_c++20.cc: Check result\n+\tof comparisons and check using greedy_ops type.\n+\t* testsuite/24_iterators/reverse_iterator/rel_ops_c++20.cc: Likewise.\n+\t* testsuite/24_iterators/move_iterator/greedy_ops.cc: Remove redundant\n+\tmain function from compile-only test.\n+\t* testsuite/24_iterators/reverse_iterator/greedy_ops.cc: Likewise.\n+\n 2020-03-27  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/range_cmp.h (__cpp_lib_ranges): Define."}, {"sha": "d7972b71998e3c33ce8966760936cf24d69973ac", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 68, "deletions": 58, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=42cda3ba45fca30e73e1c35d8e19b5ec8af24d98", "patch": "@@ -341,9 +341,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         { return __t.operator->(); }\n     };\n \n-  // Used in unevaluated expressions to test for implicit conversion to bool.\n-  namespace __detail { bool __convbool(bool); }\n-\n   //@{\n   /**\n    *  @param  __x  A %reverse_iterator.\n@@ -354,7 +351,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  iterators.\n    *\n   */\n-#if __cplusplus <= 201703L\n+#if __cplusplus <= 201703L || ! defined __cpp_lib_concepts\n   template<typename _Iterator>\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator==(const reverse_iterator<_Iterator>& __x,\n@@ -430,46 +427,53 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return !(__x < __y); }\n #else // C++20\n   template<typename _IteratorL, typename _IteratorR>\n-    constexpr auto\n+    constexpr bool\n     operator==(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n-    -> decltype(__detail::__convbool(__x.base() == __y.base()))\n+    requires requires { { __x.base() == __y.base() } -> convertible_to<bool>; }\n     { return __x.base() == __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n-    constexpr auto\n+    constexpr bool\n     operator!=(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n-    -> decltype(__detail::__convbool(__x.base() != __y.base()))\n+    requires requires { { __x.base() != __y.base() } -> convertible_to<bool>; }\n     { return __x.base() != __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n-    constexpr auto\n+    constexpr bool\n     operator<(const reverse_iterator<_IteratorL>& __x,\n \t      const reverse_iterator<_IteratorR>& __y)\n-    -> decltype(__detail::__convbool(__x.base() < __y.base()))\n-    { return __x.base() < __y.base(); }\n+    requires requires { { __x.base() > __y.base() } -> convertible_to<bool>; }\n+    { return __x.base() > __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n-    constexpr auto\n+    constexpr bool\n     operator>(const reverse_iterator<_IteratorL>& __x,\n \t      const reverse_iterator<_IteratorR>& __y)\n-    -> decltype(__detail::__convbool(__x.base() > __y.base()))\n-    { return __x.base() > __y.base(); }\n+    requires requires { { __x.base() < __y.base() } -> convertible_to<bool>; }\n+    { return __x.base() < __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n-    constexpr auto\n+    constexpr bool\n     operator<=(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n-    -> decltype(__detail::__convbool(__x.base() <= __y.base()))\n-    { return __x.base() <= __y.base(); }\n+    requires requires { { __x.base() >= __y.base() } -> convertible_to<bool>; }\n+    { return __x.base() >= __y.base(); }\n \n   template<typename _IteratorL, typename _IteratorR>\n-    constexpr auto\n+    constexpr bool\n     operator>=(const reverse_iterator<_IteratorL>& __x,\n \t       const reverse_iterator<_IteratorR>& __y)\n-    -> decltype(__detail::__convbool(__x.base() >= __y.base()))\n-    { return __x.base() >= __y.base(); }\n+    requires requires { { __x.base() <= __y.base() } -> convertible_to<bool>; }\n+    { return __x.base() <= __y.base(); }\n+\n+  template<typename _IteratorL,\n+\t   three_way_comparable_with<_IteratorL> _IteratorR>\n+    constexpr compare_three_way_result_t<_IteratorL, _IteratorR>\n+    operator<=>(const reverse_iterator<_IteratorL>& __x,\n+\t\tconst reverse_iterator<_IteratorR>& __y)\n+    { return __y.base() <=> __x.base(); }\n #endif // C++20\n   //@}\n \n@@ -1413,24 +1417,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // C++20\n     };\n \n-  // Note: See __normal_iterator operators note from Gaby to understand\n-  // why there are always 2 versions for most of the move_iterator\n-  // operators.\n   template<typename _IteratorL, typename _IteratorR>\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator==(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n #if __cplusplus > 201703L && __cpp_lib_concepts\n-    requires requires { __detail::__convbool(__x.base() == __y.base()); }\n+    requires requires { { __x.base() == __y.base() } -> convertible_to<bool>; }\n #endif\n     { return __x.base() == __y.base(); }\n \n-  template<typename _Iterator>\n-    inline _GLIBCXX17_CONSTEXPR bool\n-    operator==(const move_iterator<_Iterator>& __x,\n-\t       const move_iterator<_Iterator>& __y)\n-    { return __x.base() == __y.base(); }\n-\n #if __cpp_lib_three_way_comparison\n   template<typename _IteratorL,\n \t   three_way_comparable_with<_IteratorL> _IteratorR>\n@@ -1444,73 +1439,88 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator!=(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n     { return !(__x == __y); }\n-\n-  template<typename _Iterator>\n-    inline _GLIBCXX17_CONSTEXPR bool\n-    operator!=(const move_iterator<_Iterator>& __x,\n-\t       const move_iterator<_Iterator>& __y)\n-    { return !(__x == __y); }\n #endif\n \n   template<typename _IteratorL, typename _IteratorR>\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator<(const move_iterator<_IteratorL>& __x,\n \t      const move_iterator<_IteratorR>& __y)\n #if __cplusplus > 201703L && __cpp_lib_concepts\n-    requires requires { __detail::__convbool(__x.base() < __y.base()); }\n+    requires requires { { __x.base() < __y.base() } -> convertible_to<bool>; }\n #endif\n     { return __x.base() < __y.base(); }\n \n-  template<typename _Iterator>\n-    inline _GLIBCXX17_CONSTEXPR bool\n-    operator<(const move_iterator<_Iterator>& __x,\n-\t      const move_iterator<_Iterator>& __y)\n-    { return __x.base() < __y.base(); }\n-\n   template<typename _IteratorL, typename _IteratorR>\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator<=(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n #if __cplusplus > 201703L && __cpp_lib_concepts\n-    requires requires { __detail::__convbool(__y.base() < __x.base()); }\n+    requires requires { { __y.base() < __x.base() } -> convertible_to<bool>; }\n #endif\n     { return !(__y < __x); }\n \n-  template<typename _Iterator>\n-    inline _GLIBCXX17_CONSTEXPR bool\n-    operator<=(const move_iterator<_Iterator>& __x,\n-\t       const move_iterator<_Iterator>& __y)\n-    { return !(__y < __x); }\n-\n   template<typename _IteratorL, typename _IteratorR>\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator>(const move_iterator<_IteratorL>& __x,\n \t      const move_iterator<_IteratorR>& __y)\n #if __cplusplus > 201703L && __cpp_lib_concepts\n-    requires requires { __detail::__convbool(__y.base() < __x.base()); }\n+    requires requires { { __y.base() < __x.base() } -> convertible_to<bool>; }\n #endif\n     { return __y < __x; }\n \n-  template<typename _Iterator>\n-    inline _GLIBCXX17_CONSTEXPR bool\n-    operator>(const move_iterator<_Iterator>& __x,\n-\t      const move_iterator<_Iterator>& __y)\n-    { return __y < __x; }\n-\n   template<typename _IteratorL, typename _IteratorR>\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator>=(const move_iterator<_IteratorL>& __x,\n \t       const move_iterator<_IteratorR>& __y)\n #if __cplusplus > 201703L && __cpp_lib_concepts\n-    requires requires { __detail::__convbool(__x.base() < __y.base()); }\n+    requires requires { { __x.base() < __y.base() } -> convertible_to<bool>; }\n #endif\n     { return !(__x < __y); }\n \n+#if ! (__cplusplus > 201703L && __cpp_lib_concepts)\n+  // Note: See __normal_iterator operators note from Gaby to understand\n+  // why we have these extra overloads for some move_iterator operators.\n+\n+  // These extra overloads are not needed in C++20, because the ones above\n+  // are constrained with a requires-clause and so overload resolution will\n+  // prefer them to greedy unconstrained function templates.\n+\n+  template<typename _Iterator>\n+    inline _GLIBCXX17_CONSTEXPR bool\n+    operator==(const move_iterator<_Iterator>& __x,\n+\t       const move_iterator<_Iterator>& __y)\n+    { return __x.base() == __y.base(); }\n+\n+  template<typename _Iterator>\n+    inline _GLIBCXX17_CONSTEXPR bool\n+    operator!=(const move_iterator<_Iterator>& __x,\n+\t       const move_iterator<_Iterator>& __y)\n+    { return !(__x == __y); }\n+\n+  template<typename _Iterator>\n+    inline _GLIBCXX17_CONSTEXPR bool\n+    operator<(const move_iterator<_Iterator>& __x,\n+\t      const move_iterator<_Iterator>& __y)\n+    { return __x.base() < __y.base(); }\n+\n+  template<typename _Iterator>\n+    inline _GLIBCXX17_CONSTEXPR bool\n+    operator<=(const move_iterator<_Iterator>& __x,\n+\t       const move_iterator<_Iterator>& __y)\n+    { return !(__y < __x); }\n+\n+  template<typename _Iterator>\n+    inline _GLIBCXX17_CONSTEXPR bool\n+    operator>(const move_iterator<_Iterator>& __x,\n+\t      const move_iterator<_Iterator>& __y)\n+    { return __y < __x; }\n+\n   template<typename _Iterator>\n     inline _GLIBCXX17_CONSTEXPR bool\n     operator>=(const move_iterator<_Iterator>& __x,\n \t       const move_iterator<_Iterator>& __y)\n     { return !(__x < __y); }\n+#endif // ! C++20\n \n   // DR 685.\n   template<typename _IteratorL, typename _IteratorR>"}, {"sha": "0e6d598cd43f10a5caa3d180704da1d3318aba9d", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/greedy_ops.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fgreedy_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fgreedy_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fgreedy_ops.cc?ref=42cda3ba45fca30e73e1c35d8e19b5ec8af24d98", "patch": "@@ -24,7 +24,7 @@ void test01()\n   typedef std::move_iterator<greedy_ops::X*> iterator_type;\n \n   iterator_type it(nullptr);\n-  \n+\n   it == it;\n   it != it;\n   it < it;\n@@ -35,9 +35,3 @@ void test01()\n   1 + it;\n   it + 1;\n }\n-\n-int main() \n-{ \n-  test01();\n-  return 0;\n-}"}, {"sha": "a530923f8ad3a40cbf845488853846337ebb1bca", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/rel_ops_c++20.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Frel_ops_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Frel_ops_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Frel_ops_c%2B%2B20.cc?ref=42cda3ba45fca30e73e1c35d8e19b5ec8af24d98", "patch": "@@ -127,3 +127,37 @@ static_assert( has_le<2> );\n static_assert( ! has_ge<0> );\n static_assert( has_ge<1> );\n static_assert( ! has_ge<2> );\n+\n+int arr[3] = { 1, 2, 3 };\n+constexpr std::move_iterator<int*> beg{std::begin(arr)};\n+constexpr std::move_iterator<const int*> cbeg{std::cbegin(arr)};\n+static_assert( beg == cbeg );\n+static_assert( beg <= cbeg );\n+static_assert( beg >= cbeg );\n+static_assert( std::is_eq(beg <=> cbeg) );\n+constexpr std::move_iterator<const int*> cend{std::cend(arr)};\n+static_assert( beg != cend );\n+static_assert( beg < cend );\n+static_assert( cend > beg );\n+static_assert( beg <= cend );\n+static_assert( cend >= beg );\n+static_assert( std::is_lt(beg <=> cend) );\n+\n+#include <testsuite_greedy_ops.h>\n+\n+void test01()\n+{\n+  typedef std::move_iterator<greedy_ops::X*> iterator_type;\n+\n+  iterator_type it(nullptr);\n+\n+  it == it;\n+  it != it;\n+  it < it;\n+  it <= it;\n+  it > it;\n+  it >= it;\n+  // it - it;  // See PR libstdc++/71771\n+  1 + it;\n+  it + 1;\n+}"}, {"sha": "a5ea452460452a47adf8ceed02a85720c2c8a02f", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/greedy_ops.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fgreedy_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fgreedy_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Fgreedy_ops.cc?ref=42cda3ba45fca30e73e1c35d8e19b5ec8af24d98", "patch": "@@ -24,7 +24,7 @@ void test01()\n   typedef std::reverse_iterator<greedy_ops::X*> iterator_type;\n \n   iterator_type it;\n-  \n+\n   it == it;\n   it != it;\n   it < it;\n@@ -37,9 +37,3 @@ void test01()\n   1 + it;\n   it + 1;\n }\n-\n-int main() \n-{ \n-  test01();\n-  return 0;\n-}"}, {"sha": "a382ae524832decebf3aecfbd5235fa997120bc1", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/rel_ops_c++20.cc", "status": "modified", "additions": 49, "deletions": 12, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frel_ops_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42cda3ba45fca30e73e1c35d8e19b5ec8af24d98/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frel_ops_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frel_ops_c%2B%2B20.cc?ref=42cda3ba45fca30e73e1c35d8e19b5ec8af24d98", "patch": "@@ -78,10 +78,10 @@ reverse_iterator<long*> r{nullptr};\n \n bool b0 = l0 == r;\n bool b1 = l1 != r;\n-bool b2 = l2 < r;\n-bool b3 = l3 > r;\n-bool b4 = l4 <= r;\n-bool b5 = l5 >= r;\n+bool b2 = l2 > r;\n+bool b3 = l3 < r;\n+bool b4 = l4 >= r;\n+bool b5 = l5 <= r;\n \n template<int N>\n   concept has_eq\n@@ -129,28 +129,65 @@ static_assert( ! has_ne<5> );\n \n static_assert( ! has_lt<0> );\n static_assert( ! has_lt<1> );\n-static_assert( has_lt<2> );\n-static_assert( ! has_lt<3> );\n+static_assert( ! has_lt<2> );\n+static_assert( has_lt<3> );\n static_assert( ! has_lt<4> );\n static_assert( ! has_lt<5> );\n \n static_assert( ! has_gt<0> );\n static_assert( ! has_gt<1> );\n-static_assert( ! has_gt<2> );\n-static_assert( has_gt<3> );\n+static_assert( has_gt<2> );\n+static_assert( ! has_gt<3> );\n static_assert( ! has_gt<4> );\n static_assert( ! has_gt<5> );\n \n static_assert( ! has_le<0> );\n static_assert( ! has_le<1> );\n static_assert( ! has_le<2> );\n static_assert( ! has_le<3> );\n-static_assert( has_le<4> );\n-static_assert( ! has_le<5> );\n+static_assert( ! has_le<4> );\n+static_assert( has_le<5> );\n \n static_assert( ! has_ge<0> );\n static_assert( ! has_ge<1> );\n static_assert( ! has_ge<2> );\n static_assert( ! has_ge<3> );\n-static_assert( ! has_ge<4> );\n-static_assert( has_ge<5> );\n+static_assert( has_ge<4> );\n+static_assert( ! has_ge<5> );\n+\n+int arr[3] = { 1, 2, 3 };\n+constexpr std::reverse_iterator<int*> rbeg = std::rbegin(arr);\n+constexpr std::reverse_iterator<const int*> crbeg = std::crbegin(arr);\n+static_assert( rbeg == crbeg );\n+static_assert( rbeg <= crbeg );\n+static_assert( rbeg >= crbeg );\n+static_assert( std::is_eq(rbeg <=> crbeg) );\n+constexpr std::reverse_iterator<const int*> crend = std::crend(arr);\n+static_assert( rbeg != crend );\n+static_assert( rbeg < crend );\n+static_assert( crend > rbeg );\n+static_assert( rbeg <= crend );\n+static_assert( crend >= rbeg );\n+static_assert( std::is_lt(rbeg <=> crend) );\n+\n+#include <testsuite_greedy_ops.h>\n+\n+// copied from 24_iterators/reverse_iterator/greedy_ops.cc\n+void test01()\n+{\n+  typedef std::reverse_iterator<greedy_ops::X*> iterator_type;\n+\n+  iterator_type it;\n+\n+  it == it;\n+  it != it;\n+  it < it;\n+  it <= it;\n+  it > it;\n+  it >= it;\n+#if __cplusplus < 201103L\n+  it - it; // See PR libstdc++/71771\n+#endif\n+  1 + it;\n+  it + 1;\n+}"}]}