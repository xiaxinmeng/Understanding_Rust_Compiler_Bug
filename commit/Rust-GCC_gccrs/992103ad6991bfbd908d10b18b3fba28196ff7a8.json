{"sha": "992103ad6991bfbd908d10b18b3fba28196ff7a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkyMTAzYWQ2OTkxYmZiZDkwOGQxMGIxOGIzZmJhMjgxOTZmZjdhOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-01T15:00:41Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-10-01T15:00:41Z"}, "message": "re PR rtl-optimization/54457 ([x32] Fail to combine 64bit index + constant)\n\n        PR rtl-optimization/54457\n        * simplify-rtx.c (simplify_subreg):\n\tSimplify (subreg:M (op:N ((x:N) (y:N)), 0)\n     \tto (op:M (subreg:M (x:N) 0) (subreg:M (x:N) 0)), where\n\tthe outer subreg is effectively a truncation to the original mode M.\n\ntestsuite/ChangeLog:\n\n        PR rtl-optimization/54457\n        * gcc.target/i386/pr54457.c: New test.\n\nFrom-SVN: r191928", "tree": {"sha": "cc5f6d3ec972893a489639fb23536628899e340c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc5f6d3ec972893a489639fb23536628899e340c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/992103ad6991bfbd908d10b18b3fba28196ff7a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/992103ad6991bfbd908d10b18b3fba28196ff7a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/992103ad6991bfbd908d10b18b3fba28196ff7a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/992103ad6991bfbd908d10b18b3fba28196ff7a8/comments", "author": null, "committer": null, "parents": [{"sha": "4f39564266a2c44145e02cda4effd42a33cf66e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f39564266a2c44145e02cda4effd42a33cf66e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f39564266a2c44145e02cda4effd42a33cf66e9"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "f543b7b8b62b830ccbdb351cc6dfa01952aaa078", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992103ad6991bfbd908d10b18b3fba28196ff7a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992103ad6991bfbd908d10b18b3fba28196ff7a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=992103ad6991bfbd908d10b18b3fba28196ff7a8", "patch": "@@ -1,3 +1,11 @@\n+2012-10-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/54457\n+\t* simplify-rtx.c (simplify_subreg):\n+\tSimplify (subreg:M (op:N ((x:N) (y:N)), 0)\n+\tto (op:M (subreg:M (x:N) 0) (subreg:M (x:N) 0)), where\n+\tthe outer subreg is effectively a truncation to the original mode M.\n+\n 2012-10-01  Richard Guenther  <rguenther@suse.de>\n \n \t* builtins.def (ATTR_MATHFN_FPROUNDING): Do not use no-vops\n@@ -299,7 +307,8 @@\n \n \tUndo r185605 (mostly):\n \t* config/avr/avr-protos.h (avr_load_lpm): Remove.\n-\t* config/avr/avr.c (avr_load_libgcc_p): Don't restrict to __flash loads.\n+\t* config/avr/avr.c (avr_load_libgcc_p): Don't restrict to __flash\n+\tloads.\n \t(avr_out_lpm): Also handle loads > 1 byte.\n \t(avr_load_lpm): Remove.\n \t(avr_find_unused_d_reg): New static function.\n@@ -367,8 +376,7 @@\n \n \tPR target/54703\n \t* simplify-rtx.c (simplify_binary_operation_1): Perform\n-\t(x - (x & y)) -> (x & ~y) optimization only for integral\n-\tmodes.\n+\t(x - (x & y)) -> (x & ~y) optimization only for integral modes.\n \n 2012-09-27  Marc Glisse  <marc.glisse@inria.fr>\n \n@@ -527,7 +535,7 @@\n \tPR target/54641\n \t* config/avr/t-avr: Use ALL_COMPILERFLAGS instead of ALL_CFLAGS\n \tfor sources compiled with COMPILER.\n-\t\n+\n 2012-09-25  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/54625\n@@ -541,8 +549,7 @@\n \tone bit precision properly.\n \n \tPR other/54692\n-\t* configure.ac (CFLAGS, CXXFLAGS): Remove -Ofast or -Og\n-\tproperly.\n+\t* configure.ac (CFLAGS, CXXFLAGS): Remove -Ofast or -Og properly.\n \t* configure: Regenerated.\n \n 2012-09-25  Georg-Johann Lay  <avr@gjlay.de>\n@@ -564,8 +571,7 @@\n \n 2012-09-24  Dehao Chen  <dehao@google.com>\n \n-\t* tree-cfg.c (move_stmt_op): Reset the expr block only\n-\twhen necessary.\n+\t* tree-cfg.c (move_stmt_op): Reset the expr block only when necessary.\n \t(move_block_to_fn): Reset the edge's goto block even\n \twhen the goto locus is unknown.\n \n@@ -672,7 +678,7 @@\n \n 2012-09-24  Janis Johnson  <janisjo@codesourcery.com>\n \n-\tdoc/sourcebuild.texi (Selectors): Document the use of target\n+\t* doc/sourcebuild.texi (Selectors): Document the use of target\n \tand xfail used together.\n \n 2012-09-24  Richard Guenther  <rguenther@suse.de>"}, {"sha": "c3e8a0a7e1850542fda146e03ec8e837d38d8d7c", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992103ad6991bfbd908d10b18b3fba28196ff7a8/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992103ad6991bfbd908d10b18b3fba28196ff7a8/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=992103ad6991bfbd908d10b18b3fba28196ff7a8", "patch": "@@ -5724,6 +5724,28 @@ simplify_subreg (enum machine_mode outermode, rtx op,\n \treturn CONST0_RTX (outermode);\n     }\n \n+  /* Simplify (subreg:SI (op:DI ((x:DI) (y:DI)), 0)\n+     to (op:SI (subreg:SI (x:DI) 0) (subreg:SI (x:DI) 0)), where\n+     the outer subreg is effectively a truncation to the original mode.  */\n+  if ((GET_CODE (op) == PLUS\n+       || GET_CODE (op) == MINUS\n+       || GET_CODE (op) == MULT)\n+      && SCALAR_INT_MODE_P (outermode)\n+      && SCALAR_INT_MODE_P (innermode)\n+      && GET_MODE_PRECISION (outermode) < GET_MODE_PRECISION (innermode)\n+      && byte == subreg_lowpart_offset (outermode, innermode))\n+    {\n+      rtx op0 = simplify_gen_subreg (outermode, XEXP (op, 0),\n+                                     innermode, byte);\n+      if (op0)\n+        {\n+          rtx op1 = simplify_gen_subreg (outermode, XEXP (op, 1),\n+                                         innermode, byte);\n+          if (op1)\n+            return simplify_gen_binary (GET_CODE (op), outermode, op0, op1);\n+        }\n+    }\n+\n   /* Simplify (subreg:QI (lshiftrt:SI (sign_extend:SI (x:QI)) C), 0) into\n      to (ashiftrt:QI (x:QI) C), where C is a suitable small constant and\n      the outer subreg is effectively a truncation to the original mode.  */"}, {"sha": "89d7eeb341d9b67768a52aa972f5515f21a671ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992103ad6991bfbd908d10b18b3fba28196ff7a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992103ad6991bfbd908d10b18b3fba28196ff7a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=992103ad6991bfbd908d10b18b3fba28196ff7a8", "patch": "@@ -1,3 +1,8 @@\n+2012-10-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/54457\n+\t* gcc.target/i386/pr54457.c: New test.\n+\n 2012-10-01  Ulrich Weigand  <ulrich.weigand@linaro.org>\n \n \t* gcc.dg/lower-subreg-1.c: Disable on arm*-*-* targets."}, {"sha": "d27f899fd5a74f45a004dce643c430c85cab1159", "filename": "gcc/testsuite/gcc.target/i386/pr54457.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/992103ad6991bfbd908d10b18b3fba28196ff7a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54457.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/992103ad6991bfbd908d10b18b3fba28196ff7a8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54457.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54457.c?ref=992103ad6991bfbd908d10b18b3fba28196ff7a8", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-options \"-O2 -mx32 -maddress-mode=short\" } */\n+\n+extern char array[40];\n+\n+char foo (long long position)\n+{\n+  return array[position + 1];\n+}\n+\n+/* { dg-final { scan-assembler-not \"add\\[lq\\]?\\[^\\n\\]*1\" } } */"}]}