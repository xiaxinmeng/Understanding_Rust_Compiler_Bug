{"sha": "0d24bf7601974f373cce377a50132c485d488e18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQyNGJmNzYwMTk3NGYzNzNjY2UzNzdhNTAxMzJjNDg1ZDQ4OGUxOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-11-20T10:16:48Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-11-20T10:16:48Z"}, "message": "trans.c (Subprogram_Body_to_gnu): Add comment.\n\n\t* gcc-interface/trans.c (Subprogram_Body_to_gnu): Add comment.\n\t(gnat_to_gnu) <N_Return_Statement>: Add 'else' to avoid doing a useless\n\ttest.  Tweak default case.\n\t<N_Goto_Statement>: Use better formatting.\n\t* gcc-interface/utils2.c (maybe_wrap_malloc): Use INIT_EXPR instead of\n\tMODIFY_EXPR to initialize the storage.\n\t(build_allocator): Likewise.\n\nFrom-SVN: r181527", "tree": {"sha": "c93f46a1239be5714ccdf17ed39e4a4756828819", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c93f46a1239be5714ccdf17ed39e4a4756828819"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d24bf7601974f373cce377a50132c485d488e18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d24bf7601974f373cce377a50132c485d488e18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d24bf7601974f373cce377a50132c485d488e18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d24bf7601974f373cce377a50132c485d488e18/comments", "author": null, "committer": null, "parents": [{"sha": "b1a785fb5e5ada5ffb07640bb8fe0d15f3bddb68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1a785fb5e5ada5ffb07640bb8fe0d15f3bddb68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1a785fb5e5ada5ffb07640bb8fe0d15f3bddb68"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "49cd9570b38727892fcfc28734a1cc2f712d65e8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d24bf7601974f373cce377a50132c485d488e18/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d24bf7601974f373cce377a50132c485d488e18/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0d24bf7601974f373cce377a50132c485d488e18", "patch": "@@ -1,3 +1,13 @@\n+2011-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Subprogram_Body_to_gnu): Add comment.\n+\t(gnat_to_gnu) <N_Return_Statement>: Add 'else' to avoid doing a useless\n+\ttest.  Tweak default case.\n+\t<N_Goto_Statement>: Use better formatting.\n+\t* gcc-interface/utils2.c (maybe_wrap_malloc): Use INIT_EXPR instead of\n+\tMODIFY_EXPR to initialize the storage.\n+\t(build_allocator): Likewise.\n+\n 2011-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: Adjust"}, {"sha": "bc6172a7ac03d72da267364f16389c37a3c11087", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d24bf7601974f373cce377a50132c485d488e18/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d24bf7601974f373cce377a50132c485d488e18/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=0d24bf7601974f373cce377a50132c485d488e18", "patch": "@@ -3278,6 +3278,7 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n \tsave_gnu_tree (gnat_param, NULL_TREE, false);\n     }\n \n+  /* Disconnect the variable created for the return value.  */\n   if (gnu_return_var_elmt)\n     TREE_VALUE (gnu_return_var_elmt) = void_type_node;\n \n@@ -5889,12 +5890,12 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t\t\t\t       gnat_node, false);\n \t      }\n \n-\t    /* If the function returns by invisible reference, dereference\n+\t    /* Otherwise, if it returns by invisible reference, dereference\n \t       the pointer it is passed using the type of the return value\n \t       and build the copy operation manually.  This ensures that we\n \t       don't copy too much data, for example if the return type is\n \t       unconstrained with a maximum size.  */\n-\t    if (TREE_ADDRESSABLE (gnu_subprog_type))\n+\t    else if (TREE_ADDRESSABLE (gnu_subprog_type))\n \t      {\n \t\ttree gnu_ret_deref\n \t\t  = build_unary_op (INDIRECT_REF, TREE_TYPE (gnu_ret_val),\n@@ -5905,11 +5906,9 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\tgnu_ret_val = NULL_TREE;\n \t      }\n \t  }\n+\n \telse\n-\t  {\n-\t    gnu_ret_obj = NULL_TREE;\n-\t    gnu_ret_val = NULL_TREE;\n-\t  }\n+\t  gnu_ret_obj = gnu_ret_val = NULL_TREE;\n \n \t/* If we have a return label defined, convert this into a branch to\n \t   that label.  The return proper will be handled elsewhere.  */\n@@ -5934,8 +5933,8 @@ gnat_to_gnu (Node_Id gnat_node)\n       break;\n \n     case N_Goto_Statement:\n-      gnu_result = build1 (GOTO_EXPR, void_type_node,\n-\t\t\t   gnat_to_gnu (Name (gnat_node)));\n+      gnu_result\n+\t= build1 (GOTO_EXPR, void_type_node, gnat_to_gnu (Name (gnat_node)));\n       break;\n \n     /***************************/"}, {"sha": "f9e48b79fe5d9d7079898901b1d38ef7dd8cd4b1", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d24bf7601974f373cce377a50132c485d488e18/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d24bf7601974f373cce377a50132c485d488e18/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=0d24bf7601974f373cce377a50132c485d488e18", "patch": "@@ -2126,7 +2126,7 @@ maybe_wrap_malloc (tree data_size, tree data_type, Node_Id gnat_node)\n \n       return\n \tbuild2 (COMPOUND_EXPR, TREE_TYPE (aligning_field_addr),\n-\t\tbuild_binary_op (MODIFY_EXPR, NULL_TREE,\n+\t\tbuild_binary_op (INIT_EXPR, NULL_TREE,\n \t\t\t\t storage_ptr_slot, storage_ptr),\n \t\taligning_field_addr);\n     }\n@@ -2279,12 +2279,12 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n \t  CONSTRUCTOR_APPEND_ELT (v, DECL_CHAIN (TYPE_FIELDS (storage_type)),\n \t\t\t\t  init);\n \t  storage_init\n-\t    = build_binary_op (MODIFY_EXPR, NULL_TREE, storage_deref,\n+\t    = build_binary_op (INIT_EXPR, NULL_TREE, storage_deref,\n \t\t\t       gnat_build_constructor (storage_type, v));\n \t}\n       else\n \tstorage_init\n-\t  = build_binary_op (MODIFY_EXPR, NULL_TREE,\n+\t  = build_binary_op (INIT_EXPR, NULL_TREE,\n \t\t\t     build_component_ref (storage_deref, NULL_TREE,\n \t\t\t\t\t\t  TYPE_FIELDS (storage_type),\n \t\t\t\t\t\t  false),\n@@ -2332,7 +2332,7 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n       storage_deref = build_unary_op (INDIRECT_REF, NULL_TREE, storage);\n       TREE_THIS_NOTRAP (storage_deref) = 1;\n       storage_init\n-\t= build_binary_op (MODIFY_EXPR, NULL_TREE, storage_deref, init);\n+\t= build_binary_op (INIT_EXPR, NULL_TREE, storage_deref, init);\n       return build2 (COMPOUND_EXPR, result_type, storage_init, storage);\n     }\n "}]}