{"sha": "90efb2512d40f0a59b063aa0416a6d28849ee424", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBlZmIyNTEyZDQwZjBhNTliMDYzYWEwNDE2YTZkMjg4NDllZTQyNA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-07-11T17:16:16Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-07-11T17:16:58Z"}, "message": "Fix ICE on warning with new interface check.\n\nIn the test case, there was a warning about INTENT where an EXTERNAL\nmasked an interface in an outer scope, when the location of the\nsymbol was not set, leading to an ICE.\n\nTwo problems, two-part solution: It makes no sense to warn about\nINTENT for artificially generated formal argument lists, and the\nlocation should be set.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/96073\n\t* frontend-passes.c (check_externals_procedure):  Add locus\n\tinformation for new_sym.\n\t* interface.c (gfc_check_dummy_characteristics): Do not warn\n\tabout INTENT for artificially generated variables.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/96073\n\t* gfortran.dg/interface_48.f90: New test.", "tree": {"sha": "25a87bfa6dd4ef26d7034e7b56110c594ca32a80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25a87bfa6dd4ef26d7034e7b56110c594ca32a80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90efb2512d40f0a59b063aa0416a6d28849ee424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90efb2512d40f0a59b063aa0416a6d28849ee424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90efb2512d40f0a59b063aa0416a6d28849ee424", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90efb2512d40f0a59b063aa0416a6d28849ee424/comments", "author": null, "committer": null, "parents": [{"sha": "2ea10cbd66d02d4f0c100dd6f1081cadf5561c2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea10cbd66d02d4f0c100dd6f1081cadf5561c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ea10cbd66d02d4f0c100dd6f1081cadf5561c2c"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "7768fdc25ca5bd0f0d857abcfa0bbbd14cf91d10", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90efb2512d40f0a59b063aa0416a6d28849ee424/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90efb2512d40f0a59b063aa0416a6d28849ee424/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=90efb2512d40f0a59b063aa0416a6d28849ee424", "patch": "@@ -5441,6 +5441,7 @@ check_externals_procedure (gfc_symbol *sym, locus *loc,\n   gfc_current_ns = gsym->ns;\n \n   gfc_get_formal_from_actual_arglist (new_sym, actual);\n+  new_sym->declared_at = *loc;\n   gfc_current_ns = save_ns;\n \n   return 0;"}, {"sha": "e51820918b8fb75324a31646deaf503d1d0512b4", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90efb2512d40f0a59b063aa0416a6d28849ee424/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90efb2512d40f0a59b063aa0416a6d28849ee424/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=90efb2512d40f0a59b063aa0416a6d28849ee424", "patch": "@@ -1343,7 +1343,8 @@ gfc_check_dummy_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n     }\n \n   /* Check INTENT.  */\n-  if (s1->attr.intent != s2->attr.intent)\n+  if (s1->attr.intent != s2->attr.intent && !s1->attr.artificial\n+      && !s2->attr.artificial)\n     {\n       snprintf (errmsg, err_len, \"INTENT mismatch in argument '%s'\",\n \t\ts1->name);"}, {"sha": "f7513324172d1ce4c3cea05bae88c57378125947", "filename": "gcc/testsuite/gfortran.dg/interface_48.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90efb2512d40f0a59b063aa0416a6d28849ee424/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_48.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90efb2512d40f0a59b063aa0416a6d28849ee424/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_48.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_48.f90?ref=90efb2512d40f0a59b063aa0416a6d28849ee424", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! PR 96073 - this used to cause an ICE.\n+! Test case by J\u00fcrgen Reuter.\n+\n+module m\n+  implicit none\n+  private\n+\n+  interface\n+     subroutine GetXminM (set, xmin)\n+       integer, intent(in) :: set\n+       real, intent(out) :: xmin\n+     end subroutine GetXminM\n+  end interface\n+  interface \n+     subroutine foo(a)  ! { dg-warning \"Type mismatch\" }\n+       integer, intent(in) :: a \n+     end subroutine foo\n+  end interface\n+\n+contains\n+\n+  subroutine s ()\n+    real :: xmin\n+    integer :: set\n+    external :: GetXminM, foo\n+    call GetXminM (set, xmin)\n+    call foo(1.0) ! { dg-warning \"Type mismatch\" }\n+  end subroutine s\n+\n+end module m"}]}