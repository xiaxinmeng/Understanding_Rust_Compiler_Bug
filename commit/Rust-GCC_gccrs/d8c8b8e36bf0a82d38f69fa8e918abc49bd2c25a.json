{"sha": "d8c8b8e36bf0a82d38f69fa8e918abc49bd2c25a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhjOGI4ZTM2YmYwYTgyZDM4ZjY5ZmE4ZTkxOGFiYzQ5YmQyYzI1YQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-07T04:00:44Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-07T04:00:44Z"}, "message": "(mark_used_regs): Do recurse in setting of global hard reg.\n\nDo set reg_next_use for global hard reg.\n\nFrom-SVN: r1778", "tree": {"sha": "b2545cdb1afb814415779c745c550a2d8f523069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2545cdb1afb814415779c745c550a2d8f523069"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8c8b8e36bf0a82d38f69fa8e918abc49bd2c25a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8c8b8e36bf0a82d38f69fa8e918abc49bd2c25a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8c8b8e36bf0a82d38f69fa8e918abc49bd2c25a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8c8b8e36bf0a82d38f69fa8e918abc49bd2c25a/comments", "author": null, "committer": null, "parents": [{"sha": "1f6fc4de69d7ece6ff5f988f3c600d0f0493cbc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6fc4de69d7ece6ff5f988f3c600d0f0493cbc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f6fc4de69d7ece6ff5f988f3c600d0f0493cbc7"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "7e3b207831e8cb136906e3ca990eb6cb507c276d", "filename": "gcc/flow.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8c8b8e36bf0a82d38f69fa8e918abc49bd2c25a/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8c8b8e36bf0a82d38f69fa8e918abc49bd2c25a/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=d8c8b8e36bf0a82d38f69fa8e918abc49bd2c25a", "patch": "@@ -1524,6 +1524,7 @@ insn_dead_p (x, needed, call_ok)\n \t  register REGSET_ELT_TYPE bit\n \t    = (REGSET_ELT_TYPE) 1 << (regno % REGSET_ELT_BITS);\n \n+\t  /* Don't delete insns to set global regs.  */\n \t  if ((regno < FIRST_PSEUDO_REGISTER && global_regs[regno])\n \t      /* Make sure insns to set frame pointer aren't deleted.  */\n \t      || regno == FRAME_POINTER_REGNUM\n@@ -2167,7 +2168,11 @@ mark_used_regs (needed, live, x, final, insn)\n \t    /* No death notes for global register variables;\n \t       their values are live after this function exits.  */\n \t    if (global_regs[regno])\n-\t      return;\n+\t      {\n+\t\tif (final)\n+\t\t  reg_next_use[regno] = insn;\n+\t\treturn;\n+\t      }\n \n \t    n = HARD_REGNO_NREGS (regno, GET_MODE (x));\n \t    while (--n > 0)\n@@ -2311,7 +2316,9 @@ mark_used_regs (needed, live, x, final, insn)\n #if FRAME_POINTER_REGNUM != ARG_POINTER_REGNUM\n \t    && ! (regno == ARG_POINTER_REGNUM && fixed_regs[regno])\n #endif\n-\t    && ! (regno < FIRST_PSEUDO_REGISTER && global_regs[regno]))\n+\t    )\n+\t  /* We used to exclude global_regs here, but that seems wrong.\n+\t     Storing in them is like storing in mem.  */\n \t  {\n \t    mark_used_regs (needed, live, SET_SRC (x), final, insn);\n \t    if (mark_dest)"}]}