{"sha": "e2b761b13e6ccd3a7af4100183bb13e32b5b0da0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJiNzYxYjEzZTZjY2QzYTdhZjQxMDAxODNiYjEzZTMyYjViMGRhMA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-19T15:48:51Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-20T10:15:56Z"}, "message": "Implement CompoundAssignmentExpressions\n\nThis expands the AST::CompoundAssignmentExpr into and HIR::AssignmentExpr\nwith the asignee being referenced for lhs and a new artificial\nHIR::ArithmeticOrLogicalExpression with lhs asignee and rhs the rhs\nof the original CompoundAssignment expr.", "tree": {"sha": "19df974672d967ed79ab9674c379a9f0484cded5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19df974672d967ed79ab9674c379a9f0484cded5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85d8754632d597fe3d94404406082bcbb2f5ff94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d8754632d597fe3d94404406082bcbb2f5ff94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d8754632d597fe3d94404406082bcbb2f5ff94"}], "stats": {"total": 236, "additions": 88, "deletions": 148}, "files": [{"sha": "fc18e27d0d9ec5a1db71424e3e99d9f9119812f0", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=e2b761b13e6ccd3a7af4100183bb13e32b5b0da0", "patch": "@@ -532,6 +532,64 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t       std::move (outer_attribs), expr.get_locus ());\n   }\n \n+  void visit (AST::CompoundAssignmentExpr &expr)\n+  {\n+    HIR::ArithmeticOrLogicalExpr::ExprType kind\n+      = HIR::ArithmeticOrLogicalExpr::ExprType::ADD;\n+    switch (expr.get_expr_type ())\n+      {\n+      case AST::CompoundAssignmentExpr::ExprType::ADD:\n+\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::ADD;\n+\tbreak;\n+      case AST::CompoundAssignmentExpr::ExprType::SUBTRACT:\n+\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::SUBTRACT;\n+\tbreak;\n+      case AST::CompoundAssignmentExpr::ExprType::MULTIPLY:\n+\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::MULTIPLY;\n+\tbreak;\n+      case AST::CompoundAssignmentExpr::ExprType::DIVIDE:\n+\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::DIVIDE;\n+\tbreak;\n+      case AST::CompoundAssignmentExpr::ExprType::MODULUS:\n+\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::MODULUS;\n+\tbreak;\n+      case AST::CompoundAssignmentExpr::ExprType::BITWISE_AND:\n+\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::BITWISE_AND;\n+\tbreak;\n+      case AST::CompoundAssignmentExpr::ExprType::BITWISE_OR:\n+\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::BITWISE_OR;\n+\tbreak;\n+      case AST::CompoundAssignmentExpr::ExprType::BITWISE_XOR:\n+\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::BITWISE_XOR;\n+\tbreak;\n+      case AST::CompoundAssignmentExpr::ExprType::LEFT_SHIFT:\n+\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::LEFT_SHIFT;\n+\tbreak;\n+      case AST::CompoundAssignmentExpr::ExprType::RIGHT_SHIFT:\n+\tkind = HIR::ArithmeticOrLogicalExpr::ExprType::RIGHT_SHIFT;\n+\tbreak;\n+      }\n+\n+    HIR::Expr *asignee_expr\n+      = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n+    HIR::Expr *value\n+      = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+    HIR::Expr *operator_expr\n+      = new HIR::ArithmeticOrLogicalExpr (mapping, asignee_expr->clone_expr (),\n+\t\t\t\t\t  std::unique_ptr<HIR::Expr> (value),\n+\t\t\t\t\t  kind, expr.get_locus ());\n+    translated\n+      = new HIR::AssignmentExpr (mapping,\n+\t\t\t\t std::unique_ptr<HIR::Expr> (asignee_expr),\n+\t\t\t\t std::unique_ptr<HIR::Expr> (operator_expr),\n+\t\t\t\t expr.get_locus ());\n+  }\n+\n   void visit (AST::StructExprStructFields &struct_expr)\n   {\n     std::vector<HIR::Attribute> inner_attribs;"}, {"sha": "0ce678bcdbab7b6d979b365f6559e7e902c0ccfa", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=e2b761b13e6ccd3a7af4100183bb13e32b5b0da0", "patch": "@@ -751,86 +751,6 @@ class AssignmentExpr : public OperatorExpr\n   }\n };\n \n-/* Binary infix compound assignment (arithmetic or logic then assignment)\n- * expressions. */\n-class CompoundAssignmentExpr : public OperatorExpr\n-{\n-public:\n-  enum ExprType\n-  {\n-    ADD,\t // std::ops::AddAssign\n-    SUBTRACT,\t // std::ops::SubAssign\n-    MULTIPLY,\t // std::ops::MulAssign\n-    DIVIDE,\t // std::ops::DivAssign\n-    MODULUS,\t // std::ops::RemAssign\n-    BITWISE_AND, // std::ops::BitAndAssign\n-    BITWISE_OR,\t // std::ops::BitOrAssign\n-    BITWISE_XOR, // std::ops::BitXorAssign\n-    LEFT_SHIFT,\t // std::ops::ShlAssign\n-    RIGHT_SHIFT\t // std::ops::ShrAssign\n-  };\n-\n-private:\n-  // Note: overloading trait specified in comments\n-  ExprType expr_type;\n-  std::unique_ptr<Expr> right_expr;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  ExprType get_expr_type () const { return expr_type; }\n-\n-  // Use pointers in constructor to enable polymorphism\n-  CompoundAssignmentExpr (Analysis::NodeMapping mappings,\n-\t\t\t  std::unique_ptr<Expr> value_to_assign_to,\n-\t\t\t  std::unique_ptr<Expr> value_to_assign,\n-\t\t\t  ExprType expr_kind, Location locus)\n-    : OperatorExpr (std::move (mappings), std::move (value_to_assign_to),\n-\t\t    std::vector<Attribute> (), locus),\n-      expr_type (expr_kind), right_expr (std::move (value_to_assign))\n-  {}\n-  // outer attributes not allowed\n-\n-  // Have clone in copy constructor\n-  CompoundAssignmentExpr (CompoundAssignmentExpr const &other)\n-    : OperatorExpr (other), expr_type (other.expr_type),\n-      right_expr (other.right_expr->clone_expr ())\n-  {}\n-\n-  // Overload assignment operator to clone\n-  CompoundAssignmentExpr &operator= (CompoundAssignmentExpr const &other)\n-  {\n-    OperatorExpr::operator= (other);\n-    // main_or_left_expr = other.main_or_left_expr->clone_expr();\n-    right_expr = other.right_expr->clone_expr ();\n-    expr_type = other.expr_type;\n-    // outer_attrs = other.outer_attrs;\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  CompoundAssignmentExpr (CompoundAssignmentExpr &&other) = default;\n-  CompoundAssignmentExpr &operator= (CompoundAssignmentExpr &&other) = default;\n-\n-  void accept_vis (HIRVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  CompoundAssignmentExpr *clone_expr_impl () const override\n-  {\n-    return new CompoundAssignmentExpr (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  CompoundAssignmentExpr *clone_expr_without_block_impl () const override\n-  {\n-    return new CompoundAssignmentExpr (*this);\n-  }\n-};\n-\n // Expression in parentheses (i.e. like literally just any 3 + (2 * 6))\n class GroupedExpr : public ExprWithoutBlock\n {"}, {"sha": "f4e9f5acebba9a7b4d5ef0e61774c0ced51277a8", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=e2b761b13e6ccd3a7af4100183bb13e32b5b0da0", "patch": "@@ -2032,67 +2032,6 @@ ErrorPropagationExpr::as_string () const\n   return main_or_left_expr->as_string () + \"?\";\n }\n \n-std::string\n-CompoundAssignmentExpr::as_string () const\n-{\n-  std::string operator_str;\n-  operator_str.reserve (1);\n-\n-  // get operator string\n-  switch (expr_type)\n-    {\n-    case ADD:\n-      operator_str = \"+\";\n-      break;\n-    case SUBTRACT:\n-      operator_str = \"-\";\n-      break;\n-    case MULTIPLY:\n-      operator_str = \"*\";\n-      break;\n-    case DIVIDE:\n-      operator_str = \"/\";\n-      break;\n-    case MODULUS:\n-      operator_str = \"%\";\n-      break;\n-    case BITWISE_AND:\n-      operator_str = \"&\";\n-      break;\n-    case BITWISE_OR:\n-      operator_str = \"|\";\n-      break;\n-    case BITWISE_XOR:\n-      operator_str = \"^\";\n-      break;\n-    case LEFT_SHIFT:\n-      operator_str = \"<<\";\n-      break;\n-    case RIGHT_SHIFT:\n-      operator_str = \">>\";\n-      break;\n-    default:\n-      operator_str = \"invalid operator. wtf\";\n-      break;\n-    }\n-\n-  operator_str += \"=\";\n-\n-  std::string str (\"CompoundAssignmentExpr: \");\n-  if (main_or_left_expr == nullptr || right_expr == nullptr)\n-    {\n-      str += \"error. this is probably a parsing failure.\";\n-    }\n-  else\n-    {\n-      str += \"\\n left: \" + main_or_left_expr->as_string ();\n-      str += \"\\n right: \" + right_expr->as_string ();\n-      str += \"\\n operator: \" + operator_str;\n-    }\n-\n-  return str;\n-}\n-\n std::string\n ArithmeticOrLogicalExpr::as_string () const\n {\n@@ -5240,12 +5179,6 @@ AssignmentExpr::accept_vis (HIRVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-CompoundAssignmentExpr::accept_vis (HIRVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n GroupedExpr::accept_vis (HIRVisitor &vis)\n {"}, {"sha": "7fefb6909ddcc9bc2a8f7cffc362a48b39928cfd", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=e2b761b13e6ccd3a7af4100183bb13e32b5b0da0", "patch": "@@ -77,7 +77,6 @@ class HIRVisitor\n   virtual void visit (LazyBooleanExpr &expr) = 0;\n   virtual void visit (TypeCastExpr &expr) = 0;\n   virtual void visit (AssignmentExpr &expr) = 0;\n-  virtual void visit (CompoundAssignmentExpr &expr) = 0;\n   virtual void visit (GroupedExpr &expr) = 0;\n   // virtual void visit(ArrayElems& elems) = 0;\n   virtual void visit (ArrayElemsValues &elems) = 0;"}, {"sha": "229b26a5995467df744e36916e7e69ec04731309", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=e2b761b13e6ccd3a7af4100183bb13e32b5b0da0", "patch": "@@ -116,6 +116,12 @@ class ResolveExpr : public ResolverBase\n     ResolveExpr::go (expr.get_right_expr ().get (), expr.get_node_id ());\n   }\n \n+  void visit (AST::CompoundAssignmentExpr &expr)\n+  {\n+    ResolveExpr::go (expr.get_left_expr ().get (), expr.get_node_id ());\n+    ResolveExpr::go (expr.get_right_expr ().get (), expr.get_node_id ());\n+  }\n+\n   void visit (AST::ComparisonExpr &expr)\n   {\n     ResolveExpr::go (expr.get_left_expr ().get (), expr.get_node_id ());"}, {"sha": "add4a5f5b492b3385fce083f3b017ba87299515e", "filename": "gcc/testsuite/rust.test/compilable/compound_assignment_expr1.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fcompound_assignment_expr1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2b761b13e6ccd3a7af4100183bb13e32b5b0da0/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fcompound_assignment_expr1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fcompound_assignment_expr1.rs?ref=e2b761b13e6ccd3a7af4100183bb13e32b5b0da0", "patch": "@@ -0,0 +1,24 @@\n+fn main() {\n+    let mut a = 1;\n+    let mut b = 2;\n+    let mut c = 3;\n+    let mut d = 4;\n+    let mut e = 5;\n+    let mut f = 6;\n+    let mut g = 7;\n+    let mut h = 8;\n+    let mut i = 9;\n+    let mut j = 10;\n+\n+    a += 1;\n+    b -= 2;\n+    c *= 3;\n+    d /= 4;\n+    e %= 5;\n+    f &= 6;\n+    // https://github.com/Rust-GCC/gccrs/issues/173\n+    // g |= 7;\n+    h ^= 8;\n+    i <<= 9;\n+    j >>= 10;\n+}"}]}