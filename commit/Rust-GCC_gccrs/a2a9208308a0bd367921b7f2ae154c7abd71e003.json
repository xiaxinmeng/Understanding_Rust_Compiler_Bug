{"sha": "a2a9208308a0bd367921b7f2ae154c7abd71e003", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJhOTIwODMwOGEwYmQzNjc5MjFiN2YyYWUxNTRjN2FiZDcxZTAwMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-08-30T13:12:16Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-08-30T13:12:16Z"}, "message": "recog.c (split_insn): Consider attaching a REG_EQUAL note to the final insn of a split.\n\ngcc/\n\t* recog.c (split_insn): Consider attaching a REG_EQUAL note to the\n\tfinal insn of a split.\n\nFrom-SVN: r139802", "tree": {"sha": "c70903997f961b8c258ea908d386a9c3ef689cff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c70903997f961b8c258ea908d386a9c3ef689cff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2a9208308a0bd367921b7f2ae154c7abd71e003", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a9208308a0bd367921b7f2ae154c7abd71e003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2a9208308a0bd367921b7f2ae154c7abd71e003", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a9208308a0bd367921b7f2ae154c7abd71e003/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8bcf15f6ea0bcd8eca70bc83f5390a7bf464c223", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bcf15f6ea0bcd8eca70bc83f5390a7bf464c223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bcf15f6ea0bcd8eca70bc83f5390a7bf464c223"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "b6186bb968f8045b8e501ef8d8210cc2aa697b59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a9208308a0bd367921b7f2ae154c7abd71e003/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a9208308a0bd367921b7f2ae154c7abd71e003/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2a9208308a0bd367921b7f2ae154c7abd71e003", "patch": "@@ -1,3 +1,8 @@\n+2008-08-30  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* recog.c (split_insn): Consider attaching a REG_EQUAL note to the\n+\tfinal insn of a split.\n+\n 2008-08-30  Jan Hubicka  <jh@suse.cz>\n \n \t* postreload-gcse.c (gate_handle_gcse2): Disable for functions"}, {"sha": "8da4e205f7dd882c27721fbd06187a6f740dbb1e", "filename": "gcc/recog.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a9208308a0bd367921b7f2ae154c7abd71e003/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a9208308a0bd367921b7f2ae154c7abd71e003/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=a2a9208308a0bd367921b7f2ae154c7abd71e003", "patch": "@@ -2630,10 +2630,29 @@ split_insn (rtx insn)\n   /* Split insns here to get max fine-grain parallelism.  */\n   rtx first = PREV_INSN (insn);\n   rtx last = try_split (PATTERN (insn), insn, 1);\n+  rtx insn_set, last_set, note;\n \n   if (last == insn)\n     return NULL_RTX;\n \n+  /* If the original instruction was a single set that was known to be\n+     equivalent to a constant, see if we can say the same about the last\n+     instruction in the split sequence.  The two instructions must set\n+     the same destination.  */\n+  insn_set = single_set (insn);\n+  if (insn_set)\n+    {\n+      last_set = single_set (last);\n+      if (last_set && rtx_equal_p (SET_DEST (last_set), SET_DEST (insn_set)))\n+\t{\n+\t  note = find_reg_equal_equiv_note (insn);\n+\t  if (note && CONSTANT_P (XEXP (note, 0)))\n+\t    set_unique_reg_note (last, REG_EQUAL, XEXP (note, 0));\n+\t  else if (CONSTANT_P (SET_SRC (insn_set)))\n+\t    set_unique_reg_note (last, REG_EQUAL, SET_SRC (insn_set));\n+\t}\n+    }\n+\n   /* try_split returns the NOTE that INSN became.  */\n   SET_INSN_DELETED (insn);\n \n@@ -2651,6 +2670,7 @@ split_insn (rtx insn)\n \t  first = NEXT_INSN (first);\n \t}\n     }\n+\n   return last;\n }\n "}]}