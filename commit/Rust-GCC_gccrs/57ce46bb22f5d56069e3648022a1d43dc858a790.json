{"sha": "57ce46bb22f5d56069e3648022a1d43dc858a790", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdjZTQ2YmIyMmY1ZDU2MDY5ZTM2NDgwMjJhMWQ0M2RjODU4YTc5MA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-08-22T00:42:40Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-08-22T00:42:40Z"}, "message": "For PR java/6005 and PR java/7611:\n\n\t* fold-const.c (fold_truthop): Use can_use_bit_fields_p.\n\t(fold): Likewise.\n\t* langhooks.c (lhd_can_use_bit_fields_p): New function.\n\t* langhooks-def.h (lhd_can_use_bit_fields_p): Declare.\n\t(LANG_HOOKS_CAN_USE_BIT_FIELDS_P): New define.\n\t(LANG_HOOKS_INITIALIZER): Use it.\n\t* langhooks.h (struct lang_hooks) [can_use_bit_fields_p]: New\n\tfield.\n\nFrom-SVN: r56498", "tree": {"sha": "ab953fd73d6634557761e02e3e308f4b315d6dc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab953fd73d6634557761e02e3e308f4b315d6dc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57ce46bb22f5d56069e3648022a1d43dc858a790", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ce46bb22f5d56069e3648022a1d43dc858a790", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57ce46bb22f5d56069e3648022a1d43dc858a790", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57ce46bb22f5d56069e3648022a1d43dc858a790/comments", "author": null, "committer": null, "parents": [{"sha": "0d811e1a74221354e24d7d1d4f74df1c39c35994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d811e1a74221354e24d7d1d4f74df1c39c35994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d811e1a74221354e24d7d1d4f74df1c39c35994"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "d9de0a2da47f6bd0280de1258a9dbf2ffc6d1d58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ce46bb22f5d56069e3648022a1d43dc858a790/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ce46bb22f5d56069e3648022a1d43dc858a790/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57ce46bb22f5d56069e3648022a1d43dc858a790", "patch": "@@ -1,3 +1,15 @@\n+2002-08-21  Tom Tromey  <tromey@redhat.com>\n+\n+\tFor PR java/6005 and PR java/7611:\n+\t* fold-const.c (fold_truthop): Use can_use_bit_fields_p.\n+\t(fold): Likewise.\n+\t* langhooks.c (lhd_can_use_bit_fields_p): New function.\n+\t* langhooks-def.h (lhd_can_use_bit_fields_p): Declare.\n+\t(LANG_HOOKS_CAN_USE_BIT_FIELDS_P): New define.\n+\t(LANG_HOOKS_INITIALIZER): Use it.\n+\t* langhooks.h (struct lang_hooks) [can_use_bit_fields_p]: New\n+\tfield.\n+\n 2002-08-21  Stan Shebs  <shebs@apple.com>\n \n \t* tree.c (finish_vector_type): Fix a typo in a comment."}, {"sha": "b8da1a74b2693ab75abd2dac8a77a0054e78cc05", "filename": "gcc/fold-const.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ce46bb22f5d56069e3648022a1d43dc858a790/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ce46bb22f5d56069e3648022a1d43dc858a790/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=57ce46bb22f5d56069e3648022a1d43dc858a790", "patch": "@@ -1,5 +1,5 @@\n /* Fold a constant sub-tree into a single node for C-compiler\n-   Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n+   Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2002,\n    1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -3711,6 +3711,11 @@ fold_truthop (code, truth_type, lhs, rhs)\n \treturn 0;\n     }\n \n+  /* After this point all optimizations will generate bit-field\n+     references, which we might not want.  */\n+  if (! (*lang_hooks.can_use_bit_fields_p) ())\n+    return 0;\n+\n   /* See if we can find a mode that contains both fields being compared on\n      the left.  If we can't, fail.  Otherwise, update all constants and masks\n      to be relative to a field of that size.  */\n@@ -6590,7 +6595,8 @@ fold (expr)\n \t}\n \n       /* If this is a comparison of a field, we may be able to simplify it.  */\n-      if ((TREE_CODE (arg0) == COMPONENT_REF\n+      if (((TREE_CODE (arg0) == COMPONENT_REF\n+\t    && (*lang_hooks.can_use_bit_fields_p) ())\n \t   || TREE_CODE (arg0) == BIT_FIELD_REF)\n \t  && (code == EQ_EXPR || code == NE_EXPR)\n \t  /* Handle the constant case even without -O"}, {"sha": "0b05d14609f64484b7aacdc722a2fcb6a1bcf53c", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ce46bb22f5d56069e3648022a1d43dc858a790/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ce46bb22f5d56069e3648022a1d43dc858a790/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=57ce46bb22f5d56069e3648022a1d43dc858a790", "patch": "@@ -59,6 +59,7 @@ extern rtx lhd_expand_expr PARAMS ((tree, rtx, enum machine_mode, int));\n extern void lhd_print_error_function PARAMS ((struct diagnostic_context *,\n \t\t\t\t\t      const char *));\n extern void lhd_set_decl_assembler_name PARAMS ((tree));\n+extern bool lhd_can_use_bit_fields_p PARAMS ((void));\n extern bool lhd_warn_unused_global_decl PARAMS ((tree));\n extern void lhd_incomplete_type_error PARAMS ((tree, tree));\n extern tree lhd_type_promotes_to PARAMS ((tree));\n@@ -102,6 +103,7 @@ tree lhd_tree_inlining_convert_parm_for_inlining PARAMS ((tree, tree, tree));\n #define LANG_HOOKS_UNSAVE_EXPR_NOW\tlhd_unsave_expr_now\n #define LANG_HOOKS_MAYBE_BUILD_CLEANUP\tlhd_return_null_tree\n #define LANG_HOOKS_SET_DECL_ASSEMBLER_NAME lhd_set_decl_assembler_name\n+#define LANG_HOOKS_CAN_USE_BIT_FIELDS_P lhd_can_use_bit_fields_p\n #define LANG_HOOKS_HONOR_READONLY\tfalse\n #define LANG_HOOKS_PRINT_STATISTICS\tlhd_do_nothing\n #define LANG_HOOKS_PRINT_XNODE\t\tlhd_print_tree_nothing\n@@ -241,6 +243,7 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_UNSAVE_EXPR_NOW, \\\n   LANG_HOOKS_MAYBE_BUILD_CLEANUP, \\\n   LANG_HOOKS_SET_DECL_ASSEMBLER_NAME, \\\n+  LANG_HOOKS_CAN_USE_BIT_FIELDS_P, \\\n   LANG_HOOKS_HONOR_READONLY, \\\n   LANG_HOOKS_PRINT_STATISTICS, \\\n   LANG_HOOKS_PRINT_XNODE, \\"}, {"sha": "54332b82e2b797f4df6b8a8170430d3da5e79366", "filename": "gcc/langhooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ce46bb22f5d56069e3648022a1d43dc858a790/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ce46bb22f5d56069e3648022a1d43dc858a790/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=57ce46bb22f5d56069e3648022a1d43dc858a790", "patch": "@@ -175,6 +175,13 @@ lhd_set_decl_assembler_name (decl)\n     abort ();\n }\n \n+/* By default we always allow bit-field based optimizations.  */\n+bool\n+lhd_can_use_bit_fields_p ()\n+{\n+  return true;\n+}\n+\n /* Provide a default routine to clear the binding stack.  This is used\n    by languages that don't need to do anything special.  */\n void"}, {"sha": "34c300d82c1b5d7239f407330d2a75b41b756a0a", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57ce46bb22f5d56069e3648022a1d43dc858a790/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57ce46bb22f5d56069e3648022a1d43dc858a790/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=57ce46bb22f5d56069e3648022a1d43dc858a790", "patch": "@@ -299,6 +299,10 @@ struct lang_hooks\n      assembler does not talk about it.  */\n   void (*set_decl_assembler_name) PARAMS ((tree));\n \n+  /* Return nonzero if fold-const is free to use bit-field\n+     optimizations, for instance in fold_truthop().  */\n+  bool (*can_use_bit_fields_p) PARAMS ((void));\n+\n   /* Nonzero if TYPE_READONLY and TREE_READONLY should always be honored.  */\n   bool honor_readonly;\n "}]}