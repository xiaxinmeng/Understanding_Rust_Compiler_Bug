{"sha": "152f243fdacf8ad97df3d4ae5b51b792796e6740", "node_id": "C_kwDOANBUbNoAKDE1MmYyNDNmZGFjZjhhZDk3ZGYzZDRhZTViNTFiNzkyNzk2ZTY3NDA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-12T07:20:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-12T07:20:11Z"}, "message": "i386: i386-expand formatting fixes\n\nWhile working on the PR105214 patch, I've noticed incorrect formatting\nfor a bunch of functions where the function names aren't at the start of\nlines.\n\nThe following patch fixes it, though of course it isn't a regression.\n\n2022-04-12  Jakub Jelinek  <jakub@redhat.com>\n\n\t* config/i386/i386-expand.cc (ix86_emit_i387_sinh, ix86_emit_i387_cosh,\n\tix86_emit_i387_tanh, ix86_emit_i387_asinh, ix86_emit_i387_acosh,\n\tix86_emit_i387_atanh, ix86_emit_i387_log1p, ix86_emit_i387_round,\n\tix86_emit_swdivsf, ix86_emit_swsqrtsf,\n\tix86_expand_atomic_fetch_op_loop, ix86_expand_cmpxchg_loop):\n\tFormatting fix.\n\t* config/i386/i386.cc (warn_once_call_ms2sysv_xlogues): Likewise.", "tree": {"sha": "8989811f36bb3ff245f3be070d7223c1e85b0fb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8989811f36bb3ff245f3be070d7223c1e85b0fb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/152f243fdacf8ad97df3d4ae5b51b792796e6740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152f243fdacf8ad97df3d4ae5b51b792796e6740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/152f243fdacf8ad97df3d4ae5b51b792796e6740", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152f243fdacf8ad97df3d4ae5b51b792796e6740/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d481d13786cb84f6294833538133dbd6f39d2e55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d481d13786cb84f6294833538133dbd6f39d2e55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d481d13786cb84f6294833538133dbd6f39d2e55"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "677059b0061fb288dadcca7fa0e227c4629d3607", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152f243fdacf8ad97df3d4ae5b51b792796e6740/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152f243fdacf8ad97df3d4ae5b51b792796e6740/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=152f243fdacf8ad97df3d4ae5b51b792796e6740", "patch": "@@ -17036,7 +17036,8 @@ ix86_emit_fp_unordered_jump (rtx label)\n \n /* Output code to perform an sinh XFmode calculation.  */\n \n-void ix86_emit_i387_sinh (rtx op0, rtx op1)\n+void\n+ix86_emit_i387_sinh (rtx op0, rtx op1)\n {\n   rtx e1 = gen_reg_rtx (XFmode);\n   rtx e2 = gen_reg_rtx (XFmode);\n@@ -17084,7 +17085,8 @@ void ix86_emit_i387_sinh (rtx op0, rtx op1)\n \n /* Output code to perform an cosh XFmode calculation.  */\n \n-void ix86_emit_i387_cosh (rtx op0, rtx op1)\n+void\n+ix86_emit_i387_cosh (rtx op0, rtx op1)\n {\n   rtx e1 = gen_reg_rtx (XFmode);\n   rtx e2 = gen_reg_rtx (XFmode);\n@@ -17106,7 +17108,8 @@ void ix86_emit_i387_cosh (rtx op0, rtx op1)\n \n /* Output code to perform an tanh XFmode calculation.  */\n \n-void ix86_emit_i387_tanh (rtx op0, rtx op1)\n+void\n+ix86_emit_i387_tanh (rtx op0, rtx op1)\n {\n   rtx e1 = gen_reg_rtx (XFmode);\n   rtx e2 = gen_reg_rtx (XFmode);\n@@ -17152,7 +17155,8 @@ void ix86_emit_i387_tanh (rtx op0, rtx op1)\n \n /* Output code to perform an asinh XFmode calculation.  */\n \n-void ix86_emit_i387_asinh (rtx op0, rtx op1)\n+void\n+ix86_emit_i387_asinh (rtx op0, rtx op1)\n {\n   rtx e1 = gen_reg_rtx (XFmode);\n   rtx e2 = gen_reg_rtx (XFmode);\n@@ -17204,7 +17208,8 @@ void ix86_emit_i387_asinh (rtx op0, rtx op1)\n \n /* Output code to perform an acosh XFmode calculation.  */\n \n-void ix86_emit_i387_acosh (rtx op0, rtx op1)\n+void\n+ix86_emit_i387_acosh (rtx op0, rtx op1)\n {\n   rtx e1 = gen_reg_rtx (XFmode);\n   rtx e2 = gen_reg_rtx (XFmode);\n@@ -17230,7 +17235,8 @@ void ix86_emit_i387_acosh (rtx op0, rtx op1)\n \n /* Output code to perform an atanh XFmode calculation.  */\n \n-void ix86_emit_i387_atanh (rtx op0, rtx op1)\n+void\n+ix86_emit_i387_atanh (rtx op0, rtx op1)\n {\n   rtx e1 = gen_reg_rtx (XFmode);\n   rtx e2 = gen_reg_rtx (XFmode);\n@@ -17281,7 +17287,8 @@ void ix86_emit_i387_atanh (rtx op0, rtx op1)\n \n /* Output code to perform a log1p XFmode calculation.  */\n \n-void ix86_emit_i387_log1p (rtx op0, rtx op1)\n+void\n+ix86_emit_i387_log1p (rtx op0, rtx op1)\n {\n   rtx_code_label *label1 = gen_label_rtx ();\n   rtx_code_label *label2 = gen_label_rtx ();\n@@ -17325,7 +17332,8 @@ void ix86_emit_i387_log1p (rtx op0, rtx op1)\n }\n \n /* Emit code for round calculation.  */\n-void ix86_emit_i387_round (rtx op0, rtx op1)\n+void\n+ix86_emit_i387_round (rtx op0, rtx op1)\n {\n   machine_mode inmode = GET_MODE (op1);\n   machine_mode outmode = GET_MODE (op0);\n@@ -17439,7 +17447,8 @@ void ix86_emit_i387_round (rtx op0, rtx op1)\n /* Output code to perform a Newton-Rhapson approximation of a single precision\n    floating point divide [http://en.wikipedia.org/wiki/N-th_root_algorithm].  */\n \n-void ix86_emit_swdivsf (rtx res, rtx a, rtx b, machine_mode mode)\n+void\n+ix86_emit_swdivsf (rtx res, rtx a, rtx b, machine_mode mode)\n {\n   rtx x0, x1, e0, e1;\n \n@@ -17490,7 +17499,8 @@ void ix86_emit_swdivsf (rtx res, rtx a, rtx b, machine_mode mode)\n /* Output code to perform a Newton-Rhapson approximation of a\n    single precision floating point [reciprocal] square root.  */\n \n-void ix86_emit_swsqrtsf (rtx res, rtx a, machine_mode mode, bool recip)\n+void\n+ix86_emit_swsqrtsf (rtx res, rtx a, machine_mode mode, bool recip)\n {\n   rtx x0, e0, e1, e2, e3, mthree, mhalf;\n   REAL_VALUE_TYPE r;\n@@ -23245,9 +23255,10 @@ ix86_expand_divmod_libfunc (rtx libfunc, machine_mode mode,\n   *rem_p = rem;\n }\n \n-void ix86_expand_atomic_fetch_op_loop (rtx target, rtx mem, rtx val,\n-\t\t\t\t       enum rtx_code code, bool after,\n-\t\t\t\t       bool doubleword)\n+void\n+ix86_expand_atomic_fetch_op_loop (rtx target, rtx mem, rtx val,\n+\t\t\t\t  enum rtx_code code, bool after,\n+\t\t\t\t  bool doubleword)\n {\n   rtx old_reg, new_reg, old_mem, success;\n   machine_mode mode = GET_MODE (target);\n@@ -23291,10 +23302,11 @@ void ix86_expand_atomic_fetch_op_loop (rtx target, rtx mem, rtx val,\n    it will be relaxed to an atomic load + compare, and skip\n    cmpxchg instruction if mem != exp_input.  */\n \n-void ix86_expand_cmpxchg_loop (rtx *ptarget_bool, rtx target_val,\n-\t\t\t       rtx mem, rtx exp_input, rtx new_input,\n-\t\t\t       rtx mem_model, bool doubleword,\n-\t\t\t       rtx_code_label *loop_label)\n+void\n+ix86_expand_cmpxchg_loop (rtx *ptarget_bool, rtx target_val,\n+\t\t\t  rtx mem, rtx exp_input, rtx new_input,\n+\t\t\t  rtx mem_model, bool doubleword,\n+\t\t\t  rtx_code_label *loop_label)\n {\n   rtx_code_label *cmp_label = NULL;\n   rtx_code_label *done_label = NULL;"}, {"sha": "8d8b094889f88fdfe80326790512c0e73aad9104", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152f243fdacf8ad97df3d4ae5b51b792796e6740/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152f243fdacf8ad97df3d4ae5b51b792796e6740/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=152f243fdacf8ad97df3d4ae5b51b792796e6740", "patch": "@@ -6524,7 +6524,8 @@ ix86_initial_elimination_offset (int from, int to)\n }\n \n /* Emits a warning for unsupported msabi to sysv pro/epilogues.  */\n-void warn_once_call_ms2sysv_xlogues (const char *feature)\n+void\n+warn_once_call_ms2sysv_xlogues (const char *feature)\n {\n   static bool warned_once = false;\n   if (!warned_once)"}]}