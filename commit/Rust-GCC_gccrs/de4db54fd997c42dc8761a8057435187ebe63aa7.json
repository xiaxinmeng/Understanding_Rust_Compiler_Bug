{"sha": "de4db54fd997c42dc8761a8057435187ebe63aa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU0ZGI1NGZkOTk3YzQyZGM4NzYxYTgwNTc0MzUxODdlYmU2M2FhNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-06T22:34:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-06T22:34:37Z"}, "message": "PR libstdc++/86756 Move rest of std::filesystem to libstdc++.so\n\nMove std::filesystem directory iterators and operations from\nlibstdc++fs.a to main libstdc++ library. These components have many\ndependencies on OS support, which is not available on all targets. Some\nadditional autoconf checks and conditional compilation is needed to\nensure the files will build for all targets. Previously this code was\nnot compiled without --enable-libstdcxx-filesystem-ts but the C++17\ncomponents should be available for all hosted builds.\n\nThe tests for these components no longer need to link to libstdc++fs.a,\nbut are not expected to pass on all targets. To avoid numerous failures\non targets which are not expected to pass the tests (due to missing OS\nfunctionality) leave the dg-require-filesystem-ts directives in place\nfor now. This will ensure the tests only run for builds where the\nfilesystem-ts library is built, which presumably means some level of OS\nsupport is present.\n\n\tPR libstdc++/86756\n\t* acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Check for utime and\n\tlstat and define _GLIBCXX_USE_UTIME and _GLIBCXX_USE_LSTAT.\n\t* config.h.in: Regenerate.\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.26): Export symbols for\n\tremaining std::filesystem types and functions.\n\t* configure: Regenerate.\n\t* src/c++17/Makefile.am: Add C++17 filesystem sources.\n\t* src/c++17/Makefile.in: Regenerate.\n\t* src/c++17/cow-fs_dir.cc: Move src/filesystem/cow-std-dir.cc to\n\there, and change name of included file.\n\t* src/c++17/cow-fs_ops.cc: Move src/filesystem/cow-std-ops.cc to\n\there, and change name of included file.\n\t* src/c++17/fs_dir.cc: Move src/filesystem/std-dir.cc to here. Change\n\tpath to dir-common.h.\n\t* src/c++17/fs_ops.cc: Move src/filesystem/std-ops.cc to here. Change\n\tpath to ops-common.h. Disable -Wunused-parameter warnings.\n\t(internal_file_clock): Define unconditionally.\n\t[!_GLIBCXX_HAVE_SYS_STAT_H] (internal_file_clock::from_stat): Do not\n\tdefine.\n\t(do_copy_file, do_space): Move definitions to ops.common.h.\n\t(copy, file_size, hard_link_count, last_write_time, space): Only\n\tperform operation when _GLIBCXX_HAVE_SYS_STAT_H is defined, otherwise\n\treport an error.\n\t(last_write_time, read_symlink): Remove unused attributes from\n\tparameters.\n\t* src/filesystem/Makefile.am: Remove C++17 filesystem sources.\n\t* src/filesystem/Makefile.in: Regenerate.\n\t* src/filesystem/cow-std-dir.cc: Move to src/c++17/cow-fs_dir.cc.\n\t* src/filesystem/cow-std-ops.cc: Move to src/c++17/cow-fs_ops.cc.\n\t* src/filesystem/std-dir.cc: Move to src/c++17/fs_dir.cc.\n\t* src/filesystem/std-ops.cc: Move to src/c++17/fs_ops.cc.\n\t* src/filesystem/dir-common.h [!_GLIBCXX_HAVE_DIRENT_H]: Define\n\tdummy types and functions instead of using #error.\n\t* src/filesystem/dir.cc [!_GLIBCXX_HAVE_DIRENT_H]: Use #error.\n\t* src/filesystem/ops-common.h [!_GLIBCXX_USE_LSTAT] (lstat): Define\n\tin terms of stat.\n\t[!_GLIBCXX_HAVE_UNISTD_H]: Define dummy types and functions.\n\t(do_copy_file, do_space): Move definitions here from std-ops.cc.\n\t* src/filesystem/ops.cc: Adjust calls to do_copy_file and do_space\n\tto account for new namespace.\n\t* testsuite/27_io/filesystem/directory_entry/86597.cc: Remove\n\t-lstdc++fs from dg-options.\n\t* testsuite/27_io/filesystem/directory_entry/lwg3171.cc: Likewise.\n\t* testsuite/27_io/filesystem/file_status/1.cc: Likewise.\n\t* testsuite/27_io/filesystem/filesystem_error/cons.cc: Likewise.\n\t* testsuite/27_io/filesystem/filesystem_error/copy.cc: Likewise.\n\t* testsuite/27_io/filesystem/iterators/directory_iterator.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/iterators/pop.cc: Likewise.\n\t* testsuite/27_io/filesystem/iterators/recursive_directory_iterator.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/operations/absolute.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/canonical.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/copy.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/copy_file.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/create_directories.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/operations/create_directory.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/create_symlink.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/current_path.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/equivalent.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/exists.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/file_size.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/is_empty.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/last_write_time.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/permissions.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/proximate.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/read_symlink.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/relative.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/remove.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/remove_all.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/space.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/status.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/symlink_status.cc: Likewise.\n\t* testsuite/27_io/filesystem/operations/temp_directory_path.cc:\n\tLikewise.\n\t* testsuite/27_io/filesystem/operations/weakly_canonical.cc: Likewise.\n\nFrom-SVN: r267616", "tree": {"sha": "133080ebf668711aaa3a120d08501618325b1bdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/133080ebf668711aaa3a120d08501618325b1bdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de4db54fd997c42dc8761a8057435187ebe63aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4db54fd997c42dc8761a8057435187ebe63aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de4db54fd997c42dc8761a8057435187ebe63aa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4db54fd997c42dc8761a8057435187ebe63aa7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b5225352e9267152dc714e256576563a949a8f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b5225352e9267152dc714e256576563a949a8f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b5225352e9267152dc714e256576563a949a8f4"}], "stats": {"total": 1021, "additions": 692, "deletions": 329}, "files": [{"sha": "7d21d89ba9575b67129874c212dd5b00ae914c10", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -1,5 +1,85 @@\n 2019-01-06  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/86756\n+\t* acinclude.m4 (GLIBCXX_CHECK_FILESYSTEM_DEPS): Check for utime and\n+\tlstat and define _GLIBCXX_USE_UTIME and _GLIBCXX_USE_LSTAT.\n+\t* config.h.in: Regenerate.\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.26): Export symbols for\n+\tremaining std::filesystem types and functions.\n+\t* configure: Regenerate.\n+\t* src/c++17/Makefile.am: Add C++17 filesystem sources.\n+\t* src/c++17/Makefile.in: Regenerate.\n+\t* src/c++17/cow-fs_dir.cc: Move src/filesystem/cow-std-dir.cc to\n+\there, and change name of included file.\n+\t* src/c++17/cow-fs_ops.cc: Move src/filesystem/cow-std-ops.cc to\n+\there, and change name of included file.\n+\t* src/c++17/fs_dir.cc: Move src/filesystem/std-dir.cc to here. Change\n+\tpath to dir-common.h.\n+\t* src/c++17/fs_ops.cc: Move src/filesystem/std-ops.cc to here. Change\n+\tpath to ops-common.h. Disable -Wunused-parameter warnings.\n+\t(internal_file_clock): Define unconditionally.\n+\t[!_GLIBCXX_HAVE_SYS_STAT_H] (internal_file_clock::from_stat): Do not\n+\tdefine.\n+\t(do_copy_file, do_space): Move definitions to ops.common.h.\n+\t(copy, file_size, hard_link_count, last_write_time, space): Only\n+\tperform operation when _GLIBCXX_HAVE_SYS_STAT_H is defined, otherwise\n+\treport an error.\n+\t(last_write_time, read_symlink): Remove unused attributes from\n+\tparameters.\n+\t* src/filesystem/Makefile.am: Remove C++17 filesystem sources.\n+\t* src/filesystem/Makefile.in: Regenerate.\n+\t* src/filesystem/cow-std-dir.cc: Move to src/c++17/cow-fs_dir.cc.\n+\t* src/filesystem/cow-std-ops.cc: Move to src/c++17/cow-fs_ops.cc.\n+\t* src/filesystem/std-dir.cc: Move to src/c++17/fs_dir.cc.\n+\t* src/filesystem/std-ops.cc: Move to src/c++17/fs_ops.cc.\n+\t* src/filesystem/dir-common.h [!_GLIBCXX_HAVE_DIRENT_H]: Define\n+\tdummy types and functions instead of using #error.\n+\t* src/filesystem/dir.cc [!_GLIBCXX_HAVE_DIRENT_H]: Use #error.\n+\t* src/filesystem/ops-common.h [!_GLIBCXX_USE_LSTAT] (lstat): Define\n+\tin terms of stat.\n+\t[!_GLIBCXX_HAVE_UNISTD_H]: Define dummy types and functions.\n+\t(do_copy_file, do_space): Move definitions here from std-ops.cc.\n+\t* src/filesystem/ops.cc: Adjust calls to do_copy_file and do_space\n+\tto account for new namespace.\n+\t* testsuite/27_io/filesystem/directory_entry/86597.cc: Remove\n+\t-lstdc++fs from dg-options.\n+\t* testsuite/27_io/filesystem/directory_entry/lwg3171.cc: Likewise.\n+\t* testsuite/27_io/filesystem/file_status/1.cc: Likewise.\n+\t* testsuite/27_io/filesystem/filesystem_error/cons.cc: Likewise.\n+\t* testsuite/27_io/filesystem/filesystem_error/copy.cc: Likewise.\n+\t* testsuite/27_io/filesystem/iterators/directory_iterator.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/iterators/pop.cc: Likewise.\n+\t* testsuite/27_io/filesystem/iterators/recursive_directory_iterator.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/operations/absolute.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/canonical.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/copy.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/copy_file.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/create_directories.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/operations/create_directory.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/create_symlink.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/current_path.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/equivalent.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/exists.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/file_size.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/is_empty.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/last_write_time.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/permissions.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/proximate.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/read_symlink.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/relative.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/remove.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/remove_all.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/space.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/status.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/symlink_status.cc: Likewise.\n+\t* testsuite/27_io/filesystem/operations/temp_directory_path.cc:\n+\tLikewise.\n+\t* testsuite/27_io/filesystem/operations/weakly_canonical.cc: Likewise.\n+\n+\n \tPR libstdc++/86756\n \t* config/abi/pre/gnu.ver (GLIBCXX_3.4): Make various patterns for\n \ttypeinfo and vtables less greedy."}, {"sha": "ce91e495fabf40ccae5ca5d8acfb8cc854c4e046", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -4451,6 +4451,40 @@ dnl\n       AC_DEFINE(_GLIBCXX_USE_UTIMENSAT, 1, [Define if utimensat and UTIME_OMIT are available in <sys/stat.h> and AT_FDCWD in <fcntl.h>.])\n     fi\n     AC_MSG_RESULT($glibcxx_cv_utimensat)\n+dnl\n+    AC_MSG_CHECKING([for utime])\n+    AC_CACHE_VAL(glibcxx_cv_utime, [dnl\n+      GCC_TRY_COMPILE_OR_LINK(\n+        [\n+          #include <utime.h>\n+        ],\n+        [\n+          struct utimbuf t = { 1, 1 };\n+          int i = utime(\"path\", &t);\n+        ],\n+        [glibcxx_cv_utime=yes],\n+        [glibcxx_cv_utime=no])\n+    ])\n+    if test $glibcxx_cv_utime = yes; then\n+      AC_DEFINE(_GLIBCXX_USE_UTIME, 1, [Define if utime is available in <utime.h>.])\n+    fi\n+    AC_MSG_RESULT($glibcxx_cv_utime)\n+dnl\n+    AC_MSG_CHECKING([for lstat])\n+    AC_CACHE_VAL(glibcxx_cv_lstat, [dnl\n+      GCC_TRY_COMPILE_OR_LINK(\n+        [ #include <sys/stat.h> ],\n+        [\n+          struct stat st;\n+          int i = lstat(\"path\", &st);\n+        ],\n+        [glibcxx_cv_lstat=yes],\n+        [glibcxx_cv_lstat=no])\n+    ])\n+    if test $glibcxx_cv_lstat = yes; then\n+      AC_DEFINE(_GLIBCXX_USE_LSTAT, 1, [Define if lstat is available in <sys/stat.h>.])\n+    fi\n+    AC_MSG_RESULT($glibcxx_cv_lstat)\n dnl\n     AC_MSG_CHECKING([for struct stat.st_mtim.tv_nsec])\n     AC_CACHE_VAL(glibcxx_cv_st_mtim, [dnl"}, {"sha": "97b5eed0a9a812a1420aa1e4062c15ca4434c973", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -970,6 +970,9 @@\n /* Define if code specialized for long long should be used. */\n #undef _GLIBCXX_USE_LONG_LONG\n \n+/* Define if lstat is available in <sys/stat.h>. */\n+#undef _GLIBCXX_USE_LSTAT\n+\n /* Defined if nanosleep is available. */\n #undef _GLIBCXX_USE_NANOSLEEP\n \n@@ -1010,6 +1013,9 @@\n /* Define if obsolescent tmpnam is available in <stdio.h>. */\n #undef _GLIBCXX_USE_TMPNAM\n \n+/* Define if utime is available in <utime.h>. */\n+#undef _GLIBCXX_USE_UTIME\n+\n /* Define if utimensat and UTIME_OMIT are available in <sys/stat.h> and\n    AT_FDCWD in <fcntl.h>. */\n #undef _GLIBCXX_USE_UTIMENSAT"}, {"sha": "20325bf7a33ff994cdffcc5d110e2a71b3a3da69", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -2167,6 +2167,58 @@ GLIBCXX_3.4.26 {\n     _ZNSt10filesystem7__cxx114pathpLERKS1_;\n     _ZT[IV]NSt10filesystem7__cxx1116filesystem_errorE;\n \n+    _ZNSt10filesystem10equivalent*;\n+    _ZNSt10filesystem10remove_all*;\n+    _ZNSt10filesystem11permissions*;\n+    _ZNSt10filesystem12current_path*;\n+    _ZNSt10filesystem12read_symlink*;\n+    _ZNSt10filesystem14create_symlink*;\n+    _ZNSt10filesystem14symlink_status*;\n+    _ZNSt10filesystem15last_write_time*;\n+    _ZNSt10filesystem16create_directory*;\n+    _ZNSt10filesystem16create_hard_link*;\n+    _ZNSt10filesystem16weakly_canonical*;\n+    _ZNSt10filesystem18create_directories*;\n+    _ZNSt10filesystem19temp_directory_path*;\n+    _ZNSt10filesystem24create_directory_symlink*;\n+    _ZNSt10filesystem4copy*;\n+    _ZNSt10filesystem5space*;\n+    _ZNSt10filesystem6remove*;\n+    _ZNSt10filesystem6status*;\n+    _ZNSt10filesystem8absolute*;\n+    _ZNSt10filesystem8is_empty*;\n+    _ZNSt10filesystem8relative*;\n+    _ZNSt10filesystem9canonical*;\n+    _ZNSt10filesystem9copy_file*;\n+    _ZNSt10filesystem9file_size*;\n+    _ZNSt10filesystem9proximate*;\n+\n+    _ZNKSt10filesystem18directory_iteratordeEv;\n+    _ZNKSt10filesystem28recursive_directory_iterator5depthEv;\n+    _ZNKSt10filesystem28recursive_directory_iteratordeEv;\n+    _ZNSt10filesystem18directory_iteratorC[12]ERKNS_4pathENS_17directory_optionsEPSt10error_code;\n+    _ZNSt10filesystem18directory_iteratorppEv;\n+    _ZNSt10filesystem28recursive_directory_iterator3popERSt10error_code;\n+    _ZNSt10filesystem28recursive_directory_iterator3popEv;\n+    _ZNSt10filesystem28recursive_directory_iterator9incrementERSt10error_code;\n+    _ZNSt10filesystem28recursive_directory_iteratorC[12]ERKNS_4pathENS_17directory_optionsEPSt10error_code;\n+    _ZNSt10filesystem28recursive_directory_iteratorD[12]Ev;\n+    _ZNSt10filesystem28recursive_directory_iteratoraSEOS0_;\n+    _ZNSt10filesystem28recursive_directory_iteratorppEv;\n+\n+    _ZNKSt10filesystem7__cxx1118directory_iteratordeEv;\n+    _ZNKSt10filesystem7__cxx1128recursive_directory_iterator5depthEv;\n+    _ZNKSt10filesystem7__cxx1128recursive_directory_iteratordeEv;\n+    _ZNSt10filesystem7__cxx1118directory_iteratorC[12]ERKNS0_4pathENS_17directory_optionsEPSt10error_code;\n+    _ZNSt10filesystem7__cxx1118directory_iteratorppEv;\n+    _ZNSt10filesystem7__cxx1128recursive_directory_iterator3popERSt10error_code;\n+    _ZNSt10filesystem7__cxx1128recursive_directory_iterator3popEv;\n+    _ZNSt10filesystem7__cxx1128recursive_directory_iterator9incrementERSt10error_code;\n+    _ZNSt10filesystem7__cxx1128recursive_directory_iteratorC[12]ERKNS0_4pathENS_17directory_optionsEPSt10error_code;\n+    _ZNSt10filesystem7__cxx1128recursive_directory_iteratorD[12]Ev;\n+    _ZNSt10filesystem7__cxx1128recursive_directory_iteratoraSEOS1_;\n+    _ZNSt10filesystem7__cxx1128recursive_directory_iteratorppEv;\n+\n } GLIBCXX_3.4.25;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "e01d900ad0b704314f0a3462315a270b8346684c", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -80499,6 +80499,134 @@ $as_echo \"#define _GLIBCXX_USE_UTIMENSAT 1\" >>confdefs.h\n     fi\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_utimensat\" >&5\n $as_echo \"$glibcxx_cv_utimensat\" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for utime\" >&5\n+$as_echo_n \"checking for utime... \" >&6; }\n+    if ${glibcxx_cv_utime+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+        if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+          #include <utime.h>\n+\n+int\n+main ()\n+{\n+\n+          struct utimbuf t = { 1, 1 };\n+          int i = utime(\"path\", &t);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_utime=yes\n+else\n+  glibcxx_cv_utime=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+          #include <utime.h>\n+\n+int\n+main ()\n+{\n+\n+          struct utimbuf t = { 1, 1 };\n+          int i = utime(\"path\", &t);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_utime=yes\n+else\n+  glibcxx_cv_utime=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+fi\n+\n+    if test $glibcxx_cv_utime = yes; then\n+\n+$as_echo \"#define _GLIBCXX_USE_UTIME 1\" >>confdefs.h\n+\n+    fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_utime\" >&5\n+$as_echo \"$glibcxx_cv_utime\" >&6; }\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for lstat\" >&5\n+$as_echo_n \"checking for lstat... \" >&6; }\n+    if ${glibcxx_cv_lstat+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+        if test x$gcc_no_link = xyes; then\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+ #include <sys/stat.h>\n+int\n+main ()\n+{\n+\n+          struct stat st;\n+          int i = lstat(\"path\", &st);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_lstat=yes\n+else\n+  glibcxx_cv_lstat=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+else\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+ #include <sys/stat.h>\n+int\n+main ()\n+{\n+\n+          struct stat st;\n+          int i = lstat(\"path\", &st);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  glibcxx_cv_lstat=yes\n+else\n+  glibcxx_cv_lstat=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n+fi\n+\n+    if test $glibcxx_cv_lstat = yes; then\n+\n+$as_echo \"#define _GLIBCXX_USE_LSTAT 1\" >>confdefs.h\n+\n+    fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_lstat\" >&5\n+$as_echo \"$glibcxx_cv_lstat\" >&6; }\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for struct stat.st_mtim.tv_nsec\" >&5\n $as_echo_n \"checking for struct stat.st_mtim.tv_nsec... \" >&6; }\n     if ${glibcxx_cv_st_mtim+:} false; then :"}, {"sha": "4200f7f8259a220d29c1e903dd2cb4affa1ae369", "filename": "libstdc++-v3/src/c++17/Makefile.am", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.am?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -29,7 +29,10 @@ headers =\n \n if ENABLE_DUAL_ABI\n extra_string_inst_sources = cow-string-inst.cc\n-extra_fs_sources = cow-fs_path.cc\n+extra_fs_sources = \\\n+\tcow-fs_dir.cc \\\n+\tcow-fs_ops.cc \\\n+\tcow-fs_path.cc\n else\n extra_string_inst_sources =\n extra_fs_sources =\n@@ -45,6 +48,8 @@ inst_sources =\n endif\n \n sources = \\\n+\tfs_dir.cc \\\n+\tfs_ops.cc \\\n \tfs_path.cc \\\n \tmemory_resource.cc \\\n \tstring-inst.cc \\"}, {"sha": "a402d13d5169deec6fea1c009bc37e75e177af08", "filename": "libstdc++-v3/src/c++17/Makefile.in", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2FMakefile.in?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -121,9 +121,10 @@ CONFIG_CLEAN_FILES =\n CONFIG_CLEAN_VPATH_FILES =\n LTLIBRARIES = $(noinst_LTLIBRARIES)\n libc__17convenience_la_LIBADD =\n-@ENABLE_DUAL_ABI_TRUE@am__objects_1 = cow-fs_path.lo\n-am__objects_2 = fs_path.lo memory_resource.lo string-inst.lo \\\n-\t$(am__objects_1)\n+@ENABLE_DUAL_ABI_TRUE@am__objects_1 = cow-fs_dir.lo cow-fs_ops.lo \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-fs_path.lo\n+am__objects_2 = fs_dir.lo fs_ops.lo fs_path.lo memory_resource.lo \\\n+\tstring-inst.lo $(am__objects_1)\n @ENABLE_DUAL_ABI_TRUE@am__objects_3 = cow-string-inst.lo\n @ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_4 = $(am__objects_3)\n am_libc__17convenience_la_OBJECTS = $(am__objects_2) $(am__objects_4)\n@@ -415,7 +416,11 @@ headers =\n @ENABLE_DUAL_ABI_FALSE@extra_string_inst_sources = \n @ENABLE_DUAL_ABI_TRUE@extra_string_inst_sources = cow-string-inst.cc\n @ENABLE_DUAL_ABI_FALSE@extra_fs_sources = \n-@ENABLE_DUAL_ABI_TRUE@extra_fs_sources = cow-fs_path.cc\n+@ENABLE_DUAL_ABI_TRUE@extra_fs_sources = \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-fs_dir.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-fs_ops.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-fs_path.cc\n+\n # XTEMPLATE_FLAGS =\n @ENABLE_EXTERN_TEMPLATE_FALSE@inst_sources = \n \n@@ -424,6 +429,8 @@ headers =\n @ENABLE_EXTERN_TEMPLATE_TRUE@\t$(extra_string_inst_sources)\n \n sources = \\\n+\tfs_dir.cc \\\n+\tfs_ops.cc \\\n \tfs_path.cc \\\n \tmemory_resource.cc \\\n \tstring-inst.cc \\"}, {"sha": "126edab45a22f656c2da06accc9a7e6bb44e83da", "filename": "libstdc++-v3/src/c++17/cow-fs_dir.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fcow-fs_dir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fcow-fs_dir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fcow-fs_dir.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -23,4 +23,4 @@\n // <http://www.gnu.org/licenses/>.\n \n #define _GLIBCXX_USE_CXX11_ABI 0\n-#include \"std-dir.cc\"\n+#include \"fs_dir.cc\"", "previous_filename": "libstdc++-v3/src/filesystem/cow-std-dir.cc"}, {"sha": "e519091da7c610214f86db528effb98048a706b8", "filename": "libstdc++-v3/src/c++17/cow-fs_ops.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fcow-fs_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fcow-fs_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fcow-fs_ops.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -23,4 +23,4 @@\n // <http://www.gnu.org/licenses/>.\n \n #define _GLIBCXX_USE_CXX11_ABI 0\n-#include \"std-ops.cc\"\n+#include \"fs_ops.cc\"", "previous_filename": "libstdc++-v3/src/filesystem/cow-std-ops.cc"}, {"sha": "8e6755ead855dddbf9e98776165c2989e49c0fd2", "filename": "libstdc++-v3/src/c++17/fs_dir.cc", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -27,14 +27,13 @@\n #endif\n \n #include <filesystem>\n-#include <experimental/filesystem>\n #include <utility>\n #include <stack>\n #include <string.h>\n #include <errno.h>\n #define _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM namespace filesystem {\n #define _GLIBCXX_END_NAMESPACE_FILESYSTEM }\n-#include \"dir-common.h\"\n+#include \"../filesystem/dir-common.h\"\n \n namespace fs = std::filesystem;\n namespace posix = std::filesystem::__gnu_posix;", "previous_filename": "libstdc++-v3/src/filesystem/std-dir.cc"}, {"sha": "fd8cf353ba2b299525053d156cdc7d92958501c5", "filename": "libstdc++-v3/src/c++17/fs_ops.cc", "status": "renamed", "additions": 30, "deletions": 252, "changes": 282, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -29,11 +29,9 @@\n #endif\n \n #include <filesystem>\n-#include <experimental/filesystem>\n #include <functional>\n #include <ostream>\n #include <stack>\n-#include <ext/stdio_filebuf.h>\n #include <stdlib.h>\n #include <stdio.h>\n #include <errno.h>\n@@ -47,9 +45,6 @@\n #ifdef _GLIBCXX_HAVE_SYS_STATVFS_H\n # include <sys/statvfs.h> // statvfs\n #endif\n-#ifdef _GLIBCXX_USE_SENDFILE\n-# include <sys/sendfile.h> // sendfile\n-#endif\n #if !_GLIBCXX_USE_UTIMENSAT && _GLIBCXX_HAVE_UTIME_H\n # include <utime.h> // utime\n #endif\n@@ -59,7 +54,9 @@\n \n #define _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM namespace filesystem {\n #define _GLIBCXX_END_NAMESPACE_FILESYSTEM }\n-#include \"ops-common.h\"\n+#include \"../filesystem/ops-common.h\"\n+\n+#pragma GCC diagnostic ignored \"-Wunused-parameter\"\n \n namespace fs = std::filesystem;\n namespace posix = std::filesystem::__gnu_posix;\n@@ -274,15 +271,14 @@ namespace std::filesystem\n   }\n }\n \n-#ifdef _GLIBCXX_HAVE_SYS_STAT_H\n-\n namespace\n {\n   struct internal_file_clock : fs::__file_clock\n   {\n     using __file_clock::_S_to_sys;\n     using __file_clock::_S_from_sys;\n \n+#ifdef _GLIBCXX_HAVE_SYS_STAT_H\n     static fs::file_time_type\n     from_stat(const fs::stat_type& st, std::error_code& ec) noexcept\n     {\n@@ -291,209 +287,15 @@ namespace\n \treturn fs::file_time_type::min();\n       return _S_from_sys(sys_time);\n     }\n-  };\n-}\n-\n-#ifdef NEED_DO_COPY_FILE\n-bool\n-fs::do_copy_file(const path::value_type* from, const path::value_type* to,\n-\t\t copy_options_existing_file options,\n-\t\t stat_type* from_st, stat_type* to_st,\n-\t\t std::error_code& ec) noexcept\n-{\n-  stat_type st1, st2;\n-  fs::file_status t, f;\n-\n-  if (to_st == nullptr)\n-    {\n-      if (posix::stat(to, &st1))\n-\t{\n-\t  const int err = errno;\n-\t  if (!is_not_found_errno(err))\n-\t    {\n-\t      ec.assign(err, std::generic_category());\n-\t      return false;\n-\t    }\n-\t}\n-      else\n-\tto_st = &st1;\n-    }\n-  else if (to_st == from_st)\n-    to_st = nullptr;\n-\n-  if (to_st == nullptr)\n-    t = fs::file_status{fs::file_type::not_found};\n-  else\n-    t = make_file_status(*to_st);\n-\n-  if (from_st == nullptr)\n-    {\n-      if (posix::stat(from, &st2))\n-\t{\n-\t  ec.assign(errno, std::generic_category());\n-\t  return false;\n-\t}\n-      else\n-\tfrom_st = &st2;\n-    }\n-  f = make_file_status(*from_st);\n-  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  // 2712. copy_file() has a number of unspecified error conditions\n-  if (!is_regular_file(f))\n-    {\n-      ec = std::make_error_code(std::errc::not_supported);\n-      return false;\n-    }\n-\n-  if (exists(t))\n-    {\n-      if (!is_regular_file(t))\n-\t{\n-\t  ec = std::make_error_code(std::errc::not_supported);\n-\t  return false;\n-\t}\n-\n-      if (to_st->st_dev == from_st->st_dev\n-\t  && to_st->st_ino == from_st->st_ino)\n-\t{\n-\t  ec = std::make_error_code(std::errc::file_exists);\n-\t  return false;\n-\t}\n-\n-      if (options.skip)\n-\t{\n-\t  ec.clear();\n-\t  return false;\n-\t}\n-      else if (options.update)\n-\t{\n-\t  const auto from_mtime = internal_file_clock::from_stat(*from_st, ec);\n-\t  if (ec)\n-\t    return false;\n-\t  if ((from_mtime <= internal_file_clock::from_stat(*to_st, ec)) || ec)\n-\t    return false;\n-\t}\n-      else if (!options.overwrite)\n-\t{\n-\t  ec = std::make_error_code(std::errc::file_exists);\n-\t  return false;\n-\t}\n-      else if (!is_regular_file(t))\n-\t{\n-\t  ec = std::make_error_code(std::errc::not_supported);\n-\t  return false;\n-\t}\n-    }\n-\n-  struct CloseFD {\n-    ~CloseFD() { if (fd != -1) posix::close(fd); }\n-    bool close() { return posix::close(std::exchange(fd, -1)) == 0; }\n-    int fd;\n-  };\n-\n-  CloseFD in = { posix::open(from, O_RDONLY) };\n-  if (in.fd == -1)\n-    {\n-      ec.assign(errno, std::generic_category());\n-      return false;\n-    }\n-  int oflag = O_WRONLY|O_CREAT;\n-  if (options.overwrite || options.update)\n-    oflag |= O_TRUNC;\n-  else\n-    oflag |= O_EXCL;\n-  CloseFD out = { posix::open(to, oflag, S_IWUSR) };\n-  if (out.fd == -1)\n-    {\n-      if (errno == EEXIST && options.skip)\n-\tec.clear();\n-      else\n-\tec.assign(errno, std::generic_category());\n-      return false;\n-    }\n-\n-#if defined _GLIBCXX_USE_FCHMOD && ! defined _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  if (::fchmod(out.fd, from_st->st_mode))\n-#elif defined _GLIBCXX_USE_FCHMODAT && ! defined _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  if (::fchmodat(AT_FDCWD, to, from_st->st_mode, 0))\n-#else\n-  if (posix::chmod(to, from_st->st_mode))\n #endif\n-    {\n-      ec.assign(errno, std::generic_category());\n-      return false;\n-    }\n-\n-  size_t count = from_st->st_size;\n-#if defined _GLIBCXX_USE_SENDFILE && ! defined _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  off_t offset = 0;\n-  ssize_t n = ::sendfile(out.fd, in.fd, &offset, count);\n-  if (n < 0 && errno != ENOSYS && errno != EINVAL)\n-    {\n-      ec.assign(errno, std::generic_category());\n-      return false;\n-    }\n-  if ((size_t)n == count)\n-    {\n-      if (!out.close() || !in.close())\n-\t{\n-\t  ec.assign(errno, std::generic_category());\n-\t  return false;\n-\t}\n-      ec.clear();\n-      return true;\n-    }\n-  else if (n > 0)\n-    count -= n;\n-#endif // _GLIBCXX_USE_SENDFILE\n-\n-  using std::ios;\n-  __gnu_cxx::stdio_filebuf<char> sbin(in.fd, ios::in|ios::binary);\n-  __gnu_cxx::stdio_filebuf<char> sbout(out.fd, ios::out|ios::binary);\n-\n-  if (sbin.is_open())\n-    in.fd = -1;\n-  if (sbout.is_open())\n-    out.fd = -1;\n-\n-#ifdef _GLIBCXX_USE_SENDFILE\n-  if (n != 0)\n-    {\n-      if (n < 0)\n-\tn = 0;\n-\n-      const auto p1 = sbin.pubseekoff(n, ios::beg, ios::in);\n-      const auto p2 = sbout.pubseekoff(n, ios::beg, ios::out);\n-\n-      const std::streampos errpos(std::streamoff(-1));\n-      if (p1 == errpos || p2 == errpos)\n-\t{\n-\t  ec = std::make_error_code(std::errc::io_error);\n-\t  return false;\n-\t}\n-    }\n-#endif\n-\n-  if (count && !(std::ostream(&sbout) << &sbin))\n-    {\n-      ec = std::make_error_code(std::errc::io_error);\n-      return false;\n-    }\n-  if (!sbout.close() || !sbin.close())\n-    {\n-      ec.assign(errno, std::generic_category());\n-      return false;\n-    }\n-  ec.clear();\n-  return true;\n+  };\n }\n-#endif // NEED_DO_COPY_FILE\n-#endif // _GLIBCXX_HAVE_SYS_STAT_H\n \n void\n fs::copy(const path& from, const path& to, copy_options options,\n \t error_code& ec)\n {\n+#ifdef _GLIBCXX_HAVE_SYS_STAT_H\n   const bool skip_symlinks = is_set(options, copy_options::skip_symlinks);\n   const bool create_symlinks = is_set(options, copy_options::create_symlinks);\n   const bool copy_symlinks = is_set(options, copy_options::copy_symlinks);\n@@ -591,6 +393,9 @@ fs::copy(const path& from, const path& to, copy_options options,\n   // 2683. filesystem::copy() says \"no effects\"\n   else\n     ec.clear();\n+#else\n+  ec = std::make_error_code(std::errc::not_supported);\n+#endif\n }\n \n bool\n@@ -1068,6 +873,7 @@ namespace\n std::uintmax_t\n fs::file_size(const path& p, error_code& ec) noexcept\n {\n+#ifdef _GLIBCXX_HAVE_SYS_STAT_H\n   struct S\n   {\n     S(const stat_type& st) : type(make_file_type(st)), size(st.st_size) { }\n@@ -1085,6 +891,9 @@ fs::file_size(const path& p, error_code& ec) noexcept\n       else\n \tec = std::make_error_code(std::errc::not_supported);\n     }\n+#else\n+  ec = std::make_error_code(std::errc::not_supported);\n+#endif\n   return -1;\n }\n \n@@ -1101,8 +910,13 @@ fs::hard_link_count(const path& p)\n std::uintmax_t\n fs::hard_link_count(const path& p, error_code& ec) noexcept\n {\n+#ifdef _GLIBCXX_HAVE_SYS_STAT_H\n   return do_stat(p, ec, std::mem_fn(&stat_type::st_nlink),\n \t\t static_cast<uintmax_t>(-1));\n+#else\n+  ec = std::make_error_code(std::errc::not_supported);\n+  return static_cast<uintmax_t>(-1);\n+#endif\n }\n \n bool\n@@ -1141,11 +955,16 @@ fs::last_write_time(const path& p)\n fs::file_time_type\n fs::last_write_time(const path& p, error_code& ec) noexcept\n {\n+#ifdef _GLIBCXX_HAVE_SYS_STAT_H\n   return do_stat(p, ec,\n \t\t [&ec](const auto& st) {\n \t\t     return internal_file_clock::from_stat(st, ec);\n \t\t },\n \t\t file_time_type::min());\n+#else\n+  ec = std::make_error_code(std::errc::not_supported);\n+  return file_time_type::min();\n+#endif\n }\n \n void\n@@ -1158,7 +977,7 @@ fs::last_write_time(const path& p, file_time_type new_time)\n }\n \n void\n-fs::last_write_time(const path& p __attribute__((__unused__)),\n+fs::last_write_time(const path& p,\n \t\t    file_time_type new_time, error_code& ec) noexcept\n {\n   auto d = internal_file_clock::_S_to_sys(new_time).time_since_epoch();\n@@ -1179,7 +998,7 @@ fs::last_write_time(const path& p __attribute__((__unused__)),\n     ec.assign(errno, std::generic_category());\n   else\n     ec.clear();\n-#elif _GLIBCXX_HAVE_UTIME_H\n+#elif _GLIBCXX_USE_UTIME && _GLIBCXX_HAVE_SYS_STAT_H\n   posix::utimbuf times;\n   times.modtime = s.count();\n   times.actime = do_stat(p, ec, [](const auto& st) { return st.st_atime; },\n@@ -1279,7 +1098,7 @@ fs::read_symlink(const path& p)\n   return tgt;\n }\n \n-fs::path fs::read_symlink(const path& p [[gnu::unused]], error_code& ec)\n+fs::path fs::read_symlink(const path& p, error_code& ec)\n {\n   path result;\n #if defined(_GLIBCXX_HAVE_READLINK) && defined(_GLIBCXX_HAVE_SYS_STAT_H)\n@@ -1472,51 +1291,6 @@ fs::space(const path& p)\n   return s;\n }\n \n-#ifdef NEED_DO_SPACE\n-void\n-fs::do_space(const __gnu_posix::char_type* pathname,\n-\t uintmax_t& capacity, uintmax_t& free, uintmax_t& available,\n-\t std::error_code& ec)\n-{\n-#ifdef _GLIBCXX_HAVE_SYS_STATVFS_H\n-  struct ::statvfs f;\n-  if (::statvfs(pathname, &f))\n-      ec.assign(errno, std::generic_category());\n-  else\n-    {\n-      if (f.f_frsize != (unsigned long)-1)\n-\t{\n-\t  const uintmax_t fragment_size = f.f_frsize;\n-\t  const fsblkcnt_t unknown = -1;\n-\t  if (f.f_blocks != unknown)\n-\t    capacity = f.f_blocks * fragment_size;\n-\t  if (f.f_bfree != unknown)\n-\t    free = f.f_bfree * fragment_size;\n-\t  if (f.f_bavail != unknown)\n-\t    available = f.f_bavail * fragment_size;\n-\t}\n-      ec.clear();\n-    }\n-#elif _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-  ULARGE_INTEGER bytes_avail = {}, bytes_total = {}, bytes_free = {};\n-  if (GetDiskFreeSpaceExW(pathname, &bytes_avail, &bytes_total, &bytes_free))\n-    {\n-      if (bytes_total.QuadPart != 0)\n-\tcapacity = bytes_total.QuadPart;\n-      if (bytes_free.QuadPart != 0)\n-\tfree = bytes_free.QuadPart;\n-      if (bytes_avail.QuadPart != 0)\n-\tavailable = bytes_avail.QuadPart;\n-      ec.clear();\n-    }\n-  else\n-    ec.assign((int)GetLastError(), std::system_category());\n-#else\n-  ec = std::make_error_code(std::errc::not_supported);\n-#endif\n-}\n-#endif // NEED_DO_SPACE\n-\n fs::space_info\n fs::space(const path& p, error_code& ec) noexcept\n {\n@@ -1525,14 +1299,18 @@ fs::space(const path& p, error_code& ec) noexcept\n     static_cast<uintmax_t>(-1),\n     static_cast<uintmax_t>(-1)\n   };\n+#ifdef _GLIBCXX_HAVE_SYS_STAT_H\n #if _GLIBCXX_FILESYSTEM_IS_WINDOWS\n   path dir = absolute(p);\n   dir.remove_filename();\n   auto str = dir.c_str();\n #else\n   auto str = p.c_str();\n #endif\n+\n   do_space(str, info.capacity, info.free, info.available, ec);\n+#endif // _GLIBCXX_HAVE_SYS_STAT_H\n+\n   return info;\n }\n ", "previous_filename": "libstdc++-v3/src/filesystem/std-ops.cc"}, {"sha": "af9dcd25f8ea9a520db83baec595483f44e93c9a", "filename": "libstdc++-v3/src/filesystem/Makefile.am", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.am?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -30,9 +30,7 @@ if ENABLE_DUAL_ABI\n cxx11_abi_sources = \\\n \tcow-dir.cc \\\n \tcow-ops.cc \\\n-\tcow-path.cc \\\n-\tcow-std-dir.cc \\\n-\tcow-std-ops.cc\n+\tcow-path.cc\n else\n cxx11_abi_sources =\n endif\n@@ -41,8 +39,6 @@ sources = \\\n \tdir.cc \\\n \tops.cc \\\n \tpath.cc \\\n-\tstd-dir.cc \\\n-\tstd-ops.cc \\\n \t${cxx11_abi_sources}\n \n # vpath % $(top_srcdir)/src/filesystem"}, {"sha": "d3cb3683245f5da6b0f4cccd9be0873ca251a932", "filename": "libstdc++-v3/src/filesystem/Makefile.in", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2FMakefile.in?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -150,10 +150,8 @@ am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\"\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n libstdc__fs_la_LIBADD =\n @ENABLE_DUAL_ABI_TRUE@am__objects_1 = cow-dir.lo cow-ops.lo \\\n-@ENABLE_DUAL_ABI_TRUE@\tcow-path.lo cow-std-dir.lo \\\n-@ENABLE_DUAL_ABI_TRUE@\tcow-std-ops.lo\n-am__objects_2 = dir.lo ops.lo path.lo std-dir.lo std-ops.lo \\\n-\t$(am__objects_1)\n+@ENABLE_DUAL_ABI_TRUE@\tcow-path.lo\n+am__objects_2 = dir.lo ops.lo path.lo $(am__objects_1)\n am_libstdc__fs_la_OBJECTS = $(am__objects_2)\n libstdc__fs_la_OBJECTS = $(am_libstdc__fs_la_OBJECTS)\n AM_V_lt = $(am__v_lt_@AM_V@)\n@@ -442,16 +440,12 @@ headers =\n @ENABLE_DUAL_ABI_TRUE@cxx11_abi_sources = \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-dir.cc \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-ops.cc \\\n-@ENABLE_DUAL_ABI_TRUE@\tcow-path.cc \\\n-@ENABLE_DUAL_ABI_TRUE@\tcow-std-dir.cc \\\n-@ENABLE_DUAL_ABI_TRUE@\tcow-std-ops.cc\n+@ENABLE_DUAL_ABI_TRUE@\tcow-path.cc\n \n sources = \\\n \tdir.cc \\\n \tops.cc \\\n \tpath.cc \\\n-\tstd-dir.cc \\\n-\tstd-ops.cc \\\n \t${cxx11_abi_sources}\n \n "}, {"sha": "6ec798c9aa0000c22d28d194e51185393b55ca99", "filename": "libstdc++-v3/src/filesystem/dir-common.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir-common.h?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -26,6 +26,7 @@\n #define _GLIBCXX_DIR_COMMON_H 1\n \n #include <string.h>  // strcmp\n+#include <errno.h>\n #if _GLIBCXX_FILESYSTEM_IS_WINDOWS\n #include <wchar.h>  // wcscmp\n #endif\n@@ -34,8 +35,6 @@\n #  include <sys/types.h>\n # endif\n # include <dirent.h>\n-#else\n-# error \"the <dirent.h> header is needed to build the Filesystem TS\"\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -53,13 +52,20 @@ using dirent = _wdirent;\n inline DIR* opendir(const wchar_t* path) { return ::_wopendir(path); }\n inline dirent* readdir(DIR* dir) { return ::_wreaddir(dir); }\n inline int closedir(DIR* dir) { return ::_wclosedir(dir); }\n-#else\n+#elif defined _GLIBCXX_HAVE_DIRENT_H\n using char_type = char;\n using DIR = ::DIR;\n typedef struct ::dirent dirent;\n using ::opendir;\n using ::readdir;\n using ::closedir;\n+#else\n+using char_type = char;\n+struct dirent { const char* d_name; };\n+struct DIR { };\n+inline DIR* opendir(const char*) { return nullptr; }\n+inline dirent* readdir(DIR*) { return nullptr; }\n+inline int closedir(DIR*) { return -1; }\n #endif\n } // namespace __gnu_posix\n "}, {"sha": "3e6e598fa6423b201dbf1e349752a1bfffe792b0", "filename": "libstdc++-v3/src/filesystem/dir.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -27,6 +27,11 @@\n #endif\n \n #include <experimental/filesystem>\n+\n+#ifndef _GLIBCXX_HAVE_DIRENT_H\n+# error \"the <dirent.h> header is needed to build the Filesystem TS\"\n+#endif\n+\n #include <utility>\n #include <stack>\n #include <string.h>"}, {"sha": "f20867c217e441d2ea6365dd1e4bcef0a4428984", "filename": "libstdc++-v3/src/filesystem/ops-common.h", "status": "modified", "additions": 289, "deletions": 17, "changes": 306, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -42,6 +42,14 @@\n # include <wchar.h>\n #endif\n \n+#ifdef NEED_DO_COPY_FILE\n+# include <filesystem>\n+# include <ext/stdio_filebuf.h>\n+# ifdef _GLIBCXX_USE_SENDFILE\n+#  include <sys/sendfile.h> // sendfile\n+# endif\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -108,26 +116,42 @@ namespace __gnu_posix\n     return ret;\n   }\n   using char_type = wchar_t;\n-#else // _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+#elif defined _GLIBCXX_HAVE_UNISTD_H\n   using ::open;\n   using ::close;\n-#ifdef _GLIBCXX_HAVE_SYS_STAT_H\n+# ifdef _GLIBCXX_HAVE_SYS_STAT_H\n   typedef struct ::stat stat_type;\n   using ::stat;\n+#  ifdef _GLIBCXX_USE_LSTAT\n   using ::lstat;\n-#endif\n+#  else\n+  inline int lstat(const char* path, stat_type* buffer)\n+  { return stat(path, buffer); }\n+#  endif\n+# endif\n   using ::mode_t;\n   using ::chmod;\n   using ::mkdir;\n   using ::getcwd;\n   using ::chdir;\n-#if !_GLIBCXX_USE_UTIMENSAT && _GLIBCXX_HAVE_UTIME_H\n+# if !_GLIBCXX_USE_UTIMENSAT && _GLIBCXX_USE_UTIME\n   using ::utimbuf;\n   using ::utime;\n-#endif\n+# endif\n   using ::rename;\n   using ::truncate;\n   using char_type = char;\n+#else // ! _GLIBCXX_FILESYSTEM_IS_WINDOWS && ! _GLIBCXX_HAVE_UNISTD_H\n+  inline int open(const char*, int, ...) { errno = ENOTSUP; return -1; }\n+  inline int close(int) { errno = ENOTSUP; return -1; }\n+  using mode_t = int;\n+  inline int chmod(const char*, mode_t) { errno = ENOTSUP; return -1; }\n+  inline int mkdir(const char*, mode_t) { errno = ENOTSUP; return -1; }\n+  inline char* getcwd(char*, size_t) { errno = ENOTSUP; return nullptr; }\n+  inline int chdir(const char*) { errno = ENOTSUP; return -1; }\n+  inline int rename(const char*, const char*) { errno = ENOTSUP; return -1; }\n+  inline int truncate(const char*, long) { errno = ENOTSUP; return -1; }\n+  using char_type = char;\n #endif // _GLIBCXX_FILESYSTEM_IS_WINDOWS\n } // namespace __gnu_posix\n \n@@ -190,18 +214,6 @@ namespace __gnu_posix\n     bool skip, update, overwrite;\n   };\n \n-  bool\n-  do_copy_file(const __gnu_posix::char_type* from,\n-\t       const __gnu_posix::char_type* to,\n-\t       copy_options_existing_file options,\n-\t       stat_type* from_st, stat_type* to_st,\n-\t       std::error_code& ec) noexcept;\n-\n-  void\n-  do_space(const __gnu_posix::char_type* pathname,\n-\t   uintmax_t& capacity, uintmax_t& free, uintmax_t& available,\n-\t   std::error_code&);\n-\n #endif // _GLIBCXX_HAVE_SYS_STAT_H\n \n } // namespace filesystem\n@@ -211,6 +223,19 @@ _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM\n \n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n   using std::filesystem::__gnu_posix::stat_type;\n+  using std::filesystem::__gnu_posix::char_type;\n+\n+  bool\n+  do_copy_file(const char_type* from, const char_type* to,\n+\t       std::filesystem::copy_options_existing_file options,\n+\t       stat_type* from_st, stat_type* to_st,\n+\t       std::error_code& ec) noexcept;\n+\n+  void\n+  do_space(const char_type* pathname,\n+\t   uintmax_t& capacity, uintmax_t& free, uintmax_t& available,\n+\t   std::error_code&);\n+\n \n   inline file_type\n   make_file_type(const stat_type& st) noexcept\n@@ -257,6 +282,253 @@ _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM\n \tis_set(opt, copy_options::overwrite_existing)\n     };\n   }\n+\n+#ifdef NEED_DO_COPY_FILE\n+  bool\n+  do_copy_file(const char_type* from, const char_type* to,\n+\t       std::filesystem::copy_options_existing_file options,\n+\t       stat_type* from_st, stat_type* to_st,\n+\t       std::error_code& ec) noexcept\n+  {\n+    namespace fs = std::filesystem;\n+    namespace posix = fs::__gnu_posix;\n+\n+    stat_type st1, st2;\n+    file_status t, f;\n+\n+    if (to_st == nullptr)\n+      {\n+\tif (posix::stat(to, &st1))\n+\t  {\n+\t    const int err = errno;\n+\t    if (!fs::is_not_found_errno(err))\n+\t      {\n+\t\tec.assign(err, std::generic_category());\n+\t\treturn false;\n+\t      }\n+\t  }\n+\telse\n+\t  to_st = &st1;\n+      }\n+    else if (to_st == from_st)\n+      to_st = nullptr;\n+\n+    if (to_st == nullptr)\n+      t = file_status{file_type::not_found};\n+    else\n+      t = make_file_status(*to_st);\n+\n+    if (from_st == nullptr)\n+      {\n+\tif (posix::stat(from, &st2))\n+\t  {\n+\t    ec.assign(errno, std::generic_category());\n+\t    return false;\n+\t  }\n+\telse\n+\t  from_st = &st2;\n+      }\n+    f = make_file_status(*from_st);\n+    // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+    // 2712. copy_file() has a number of unspecified error conditions\n+    if (!is_regular_file(f))\n+      {\n+\tec = std::make_error_code(std::errc::not_supported);\n+\treturn false;\n+      }\n+\n+    if (exists(t))\n+      {\n+\tif (!is_regular_file(t))\n+\t  {\n+\t    ec = std::make_error_code(std::errc::not_supported);\n+\t    return false;\n+\t  }\n+\n+\tif (to_st->st_dev == from_st->st_dev\n+\t    && to_st->st_ino == from_st->st_ino)\n+\t  {\n+\t    ec = std::make_error_code(std::errc::file_exists);\n+\t    return false;\n+\t  }\n+\n+\tif (options.skip)\n+\t  {\n+\t    ec.clear();\n+\t    return false;\n+\t  }\n+\telse if (options.update)\n+\t  {\n+\t    const auto from_mtime = fs::file_time(*from_st, ec);\n+\t    if (ec)\n+\t      return false;\n+\t    if ((from_mtime <= fs::file_time(*to_st, ec)) || ec)\n+\t      return false;\n+\t  }\n+\telse if (!options.overwrite)\n+\t  {\n+\t    ec = std::make_error_code(std::errc::file_exists);\n+\t    return false;\n+\t  }\n+\telse if (!is_regular_file(t))\n+\t  {\n+\t    ec = std::make_error_code(std::errc::not_supported);\n+\t    return false;\n+\t  }\n+      }\n+\n+    struct CloseFD {\n+      ~CloseFD() { if (fd != -1) posix::close(fd); }\n+      bool close() { return posix::close(std::exchange(fd, -1)) == 0; }\n+      int fd;\n+    };\n+\n+    CloseFD in = { posix::open(from, O_RDONLY) };\n+    if (in.fd == -1)\n+      {\n+\tec.assign(errno, std::generic_category());\n+\treturn false;\n+      }\n+    int oflag = O_WRONLY|O_CREAT;\n+    if (options.overwrite || options.update)\n+      oflag |= O_TRUNC;\n+    else\n+      oflag |= O_EXCL;\n+    CloseFD out = { posix::open(to, oflag, S_IWUSR) };\n+    if (out.fd == -1)\n+      {\n+\tif (errno == EEXIST && options.skip)\n+\t  ec.clear();\n+\telse\n+\t  ec.assign(errno, std::generic_category());\n+\treturn false;\n+      }\n+\n+#if defined _GLIBCXX_USE_FCHMOD && ! defined _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+    if (::fchmod(out.fd, from_st->st_mode))\n+#elif defined _GLIBCXX_USE_FCHMODAT && ! defined _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+    if (::fchmodat(AT_FDCWD, to, from_st->st_mode, 0))\n+#else\n+    if (posix::chmod(to, from_st->st_mode))\n+#endif\n+      {\n+\tec.assign(errno, std::generic_category());\n+\treturn false;\n+      }\n+\n+    size_t count = from_st->st_size;\n+#if defined _GLIBCXX_USE_SENDFILE && ! defined _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+    off_t offset = 0;\n+    ssize_t n = ::sendfile(out.fd, in.fd, &offset, count);\n+    if (n < 0 && errno != ENOSYS && errno != EINVAL)\n+      {\n+\tec.assign(errno, std::generic_category());\n+\treturn false;\n+      }\n+    if ((size_t)n == count)\n+      {\n+\tif (!out.close() || !in.close())\n+\t  {\n+\t    ec.assign(errno, std::generic_category());\n+\t    return false;\n+\t  }\n+\tec.clear();\n+\treturn true;\n+      }\n+    else if (n > 0)\n+      count -= n;\n+#endif // _GLIBCXX_USE_SENDFILE\n+\n+    using std::ios;\n+    __gnu_cxx::stdio_filebuf<char> sbin(in.fd, ios::in|ios::binary);\n+    __gnu_cxx::stdio_filebuf<char> sbout(out.fd, ios::out|ios::binary);\n+\n+    if (sbin.is_open())\n+      in.fd = -1;\n+    if (sbout.is_open())\n+      out.fd = -1;\n+\n+#ifdef _GLIBCXX_USE_SENDFILE\n+    if (n != 0)\n+      {\n+\tif (n < 0)\n+\t  n = 0;\n+\n+\tconst auto p1 = sbin.pubseekoff(n, ios::beg, ios::in);\n+\tconst auto p2 = sbout.pubseekoff(n, ios::beg, ios::out);\n+\n+\tconst std::streampos errpos(std::streamoff(-1));\n+\tif (p1 == errpos || p2 == errpos)\n+\t  {\n+\t    ec = std::make_error_code(std::errc::io_error);\n+\t    return false;\n+\t  }\n+      }\n+#endif\n+\n+    if (count && !(std::ostream(&sbout) << &sbin))\n+      {\n+\tec = std::make_error_code(std::errc::io_error);\n+\treturn false;\n+      }\n+    if (!sbout.close() || !sbin.close())\n+      {\n+\tec.assign(errno, std::generic_category());\n+\treturn false;\n+      }\n+    ec.clear();\n+    return true;\n+  }\n+#endif // NEED_DO_COPY_FILE\n+\n+#ifdef NEED_DO_SPACE\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wunused-parameter\"\n+  void\n+  do_space(const char_type* pathname,\n+\t   uintmax_t& capacity, uintmax_t& free, uintmax_t& available,\n+\t   std::error_code& ec)\n+  {\n+#ifdef _GLIBCXX_HAVE_SYS_STATVFS_H\n+    struct ::statvfs f;\n+    if (::statvfs(pathname, &f))\n+\tec.assign(errno, std::generic_category());\n+    else\n+      {\n+\tif (f.f_frsize != (unsigned long)-1)\n+\t  {\n+\t    const uintmax_t fragment_size = f.f_frsize;\n+\t    const fsblkcnt_t unknown = -1;\n+\t    if (f.f_blocks != unknown)\n+\t      capacity = f.f_blocks * fragment_size;\n+\t    if (f.f_bfree != unknown)\n+\t      free = f.f_bfree * fragment_size;\n+\t    if (f.f_bavail != unknown)\n+\t      available = f.f_bavail * fragment_size;\n+\t  }\n+\tec.clear();\n+      }\n+#elif _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+    ULARGE_INTEGER bytes_avail = {}, bytes_total = {}, bytes_free = {};\n+    if (GetDiskFreeSpaceExW(pathname, &bytes_avail, &bytes_total, &bytes_free))\n+      {\n+\tif (bytes_total.QuadPart != 0)\n+\t  capacity = bytes_total.QuadPart;\n+\tif (bytes_free.QuadPart != 0)\n+\t  free = bytes_free.QuadPart;\n+\tif (bytes_avail.QuadPart != 0)\n+\t  available = bytes_avail.QuadPart;\n+\tec.clear();\n+      }\n+    else\n+      ec.assign((int)GetLastError(), std::system_category());\n+#else\n+    ec = std::make_error_code(std::errc::not_supported);\n+#endif\n+  }\n+#pragma GCC diagnostic pop\n+#endif // NEED_DO_SPACE\n+\n #endif // _GLIBCXX_HAVE_SYS_STAT_H\n \n _GLIBCXX_END_NAMESPACE_FILESYSTEM"}, {"sha": "369604da80f1ae1c89cb872227ac1785e63da4b0", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -24,6 +24,8 @@\n \n #ifndef _GLIBCXX_USE_CXX11_ABI\n # define _GLIBCXX_USE_CXX11_ABI 1\n+# define NEED_DO_COPY_FILE\n+# define NEED_DO_SPACE\n #endif\n \n #include <experimental/filesystem>\n@@ -243,7 +245,6 @@ namespace\n \n   using std::filesystem::is_not_found_errno;\n   using std::filesystem::file_time;\n-  using std::filesystem::do_copy_file;\n #endif // _GLIBCXX_HAVE_SYS_STAT_H\n \n } // namespace\n@@ -1175,7 +1176,7 @@ fs::space(const path& p, error_code& ec) noexcept\n #else\n   auto str = p.c_str();\n #endif\n-  std::filesystem::do_space(str, info.capacity, info.free, info.available, ec);\n+  fs::do_space(str, info.capacity, info.free, info.available, ec);\n   return info;\n }\n "}, {"sha": "67c70abf4a1d338389417d7a36559a4d8f425a9c", "filename": "libstdc++-v3/testsuite/27_io/filesystem/directory_entry/86597.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fdirectory_entry%2F86597.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fdirectory_entry%2F86597.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fdirectory_entry%2F86597.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "b688d69085efc33adb6e1407e6bc04a695596867", "filename": "libstdc++-v3/testsuite/27_io/filesystem/directory_entry/lwg3171.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fdirectory_entry%2Flwg3171.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fdirectory_entry%2Flwg3171.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fdirectory_entry%2Flwg3171.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "0bda10d28e2edcd708edbacdc4be140118ffb701", "filename": "libstdc++-v3/testsuite/27_io/filesystem/file_status/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Ffile_status%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Ffile_status%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Ffile_status%2F1.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "8b24541cbc643a41e6c9e790af01f05612460c8e", "filename": "libstdc++-v3/testsuite/27_io/filesystem/filesystem_error/cons.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Ffilesystem_error%2Fcons.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Ffilesystem_error%2Fcons.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Ffilesystem_error%2Fcons.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "926f164f5fa4c60663153262f382981dee90e410", "filename": "libstdc++-v3/testsuite/27_io/filesystem/filesystem_error/copy.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Ffilesystem_error%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Ffilesystem_error%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Ffilesystem_error%2Fcopy.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "ddb424b4be0029595ec924a1fca267901621eb9d", "filename": "libstdc++-v3/testsuite/27_io/filesystem/iterators/directory_iterator.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fdirectory_iterator.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "b092dee91e017a6a708109be5725d93d9a90322b", "filename": "libstdc++-v3/testsuite/27_io/filesystem/iterators/pop.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fpop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fpop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fpop.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "bf67bfd215b274ea88c52b187134c21a1ac511d3", "filename": "libstdc++-v3/testsuite/27_io/filesystem/iterators/recursive_directory_iterator.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Frecursive_directory_iterator.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "45f66ac96c5f0bc0194487c0d841f9e066926871", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/absolute.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fabsolute.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fabsolute.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fabsolute.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "8051a4bfb7ac86648d90bd9f240e3543acc57021", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/canonical.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcanonical.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcanonical.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcanonical.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "7234e34831fed4de745a1e2e02639522c529a388", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/copy.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "dfad8541bfeec8084d9c7c23eeac5c133223d0f8", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/copy_file.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy_file.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy_file.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcopy_file.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "d248676b82db04de955fcf2c2ae061c1e8427cc0", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/create_directories.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directories.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directories.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directories.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "da78fb2de87f6e4f24311a3f04826de77718997e", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/create_directory.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directory.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directory.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_directory.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "4236f20f62d81c779f1455ccf28266d82ec2d6d2", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/create_symlink.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_symlink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_symlink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcreate_symlink.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "c62ada9f1116bea81a7b3d3bc10529a7d18d12af", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/current_path.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcurrent_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcurrent_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fcurrent_path.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "ca1d691bc7c2e88359708f1650d934e0a6e562cf", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/equivalent.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fequivalent.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fequivalent.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fequivalent.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "df8251e55c2372c34c3c363d75642077b140ec74", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/exists.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fexists.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fexists.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fexists.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "57c9e96e4dcb066f5d3b439517ba240c2723208e", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/file_size.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ffile_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ffile_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ffile_size.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "c572a83457683b016d86abba1d95ff649d5fd59c", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/is_empty.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fis_empty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fis_empty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fis_empty.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "7a693a1ddcb7af5de5c016d17b8edc0db4d33056", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/last_write_time.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Flast_write_time.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Flast_write_time.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Flast_write_time.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "23d5817acadb0aadf1495972b904475d1141b042", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/permissions.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fpermissions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fpermissions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fpermissions.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "8a7e258628a08f7fb3f2222a162cbd4d5862081e", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/proximate.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fproximate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fproximate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fproximate.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "038c0447a042e5badf7a30a43656319350378a92", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/read_symlink.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fread_symlink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fread_symlink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fread_symlink.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n // { dg-xfail-if \"symlinks not supported\" { *-*-mingw* } }"}, {"sha": "e013faaaf6816583955d5537a85f33bd6de8db20", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/relative.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Frelative.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Frelative.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Frelative.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "afe9580fa33ba7c533fee2f8ba1edbad81d49565", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/remove.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "2f2802ff859d5f18fd43aa9fceb31cf6c04f18ad", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/remove_all.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fremove_all.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "e545e5e8f70ec661952be08a1e6a37d79e475b07", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/space.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fspace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fspace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fspace.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "b5ab1b5fd5eb888a7b64a71845a059224bde5ab2", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/status.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fstatus.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fstatus.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fstatus.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "6f01419da3ea1f443617c4fae100f4ba85bfc9c8", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/symlink_status.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fsymlink_status.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fsymlink_status.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fsymlink_status.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n // { dg-xfail-if \"symlinks not supported\" { *-*-mingw* } }"}, {"sha": "b3ae66d7d640dbbcff91e946f5064e4ff3797e7b", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/temp_directory_path.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Ftemp_directory_path.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}, {"sha": "e7f1a4ca782f06614eda0c25a338d4c52a985357", "filename": "libstdc++-v3/testsuite/27_io/filesystem/operations/weakly_canonical.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fweakly_canonical.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de4db54fd997c42dc8761a8057435187ebe63aa7/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fweakly_canonical.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Foperations%2Fweakly_canonical.cc?ref=de4db54fd997c42dc8761a8057435187ebe63aa7", "patch": "@@ -15,7 +15,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-options \"-std=gnu++17\" }\n // { dg-do run { target c++17 } }\n // { dg-require-filesystem-ts \"\" }\n "}]}