{"sha": "df0f6bbb3aa701b7d42aeefdf014eb73e9332d92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYwZjZiYmIzYWE3MDFiN2Q0MmFlZWZkZjAxNGViNzNlOTMzMmQ5Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-10T10:39:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-10T10:39:56Z"}, "message": "re PR tree-optimization/83337 (ICE at -O3 x86_64-linux-gnu: in interpret_rhs_expr, at tree-scalar-evolution.c:1775)\n\n\tPR tree-optimization/83337\n\t* gimple-loop-interchange.cc (compute_access_stride): Handle bitfield DRs\n\tproperly.\n\n\t* gcc.dg/tree-ssa/loop-interchange-14.c: New test.\n\t* gcc.dg/tree-ssa/loop-interchange-15.c: New test.\n\nFrom-SVN: r255528", "tree": {"sha": "a12e468521e660fd6d2f0d9721b596e5336072f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a12e468521e660fd6d2f0d9721b596e5336072f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df0f6bbb3aa701b7d42aeefdf014eb73e9332d92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0f6bbb3aa701b7d42aeefdf014eb73e9332d92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df0f6bbb3aa701b7d42aeefdf014eb73e9332d92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df0f6bbb3aa701b7d42aeefdf014eb73e9332d92/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "629cc78bee7fdae342bc099ec3bde6cbce5172a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629cc78bee7fdae342bc099ec3bde6cbce5172a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/629cc78bee7fdae342bc099ec3bde6cbce5172a8"}], "stats": {"total": 149, "additions": 149, "deletions": 0}, "files": [{"sha": "3e7d9a4ecc16b2e0ca031dbb1529a48c1a5251da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0f6bbb3aa701b7d42aeefdf014eb73e9332d92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0f6bbb3aa701b7d42aeefdf014eb73e9332d92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df0f6bbb3aa701b7d42aeefdf014eb73e9332d92", "patch": "@@ -1,3 +1,9 @@\n+2017-12-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/83337\n+\t* gimple-loop-interchange.cc (compute_access_stride): Handle bitfield DRs\n+\tproperly.\n+\n 2017-12-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/83338"}, {"sha": "301b511cdad8cf7742739f938315620be8964248", "filename": "gcc/gimple-loop-interchange.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0f6bbb3aa701b7d42aeefdf014eb73e9332d92/gcc%2Fgimple-loop-interchange.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0f6bbb3aa701b7d42aeefdf014eb73e9332d92/gcc%2Fgimple-loop-interchange.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-loop-interchange.cc?ref=df0f6bbb3aa701b7d42aeefdf014eb73e9332d92", "patch": "@@ -1291,6 +1291,30 @@ compute_access_stride (struct loop *loop_nest, struct loop *loop,\n   gcc_assert (loop == bb->loop_father);\n \n   tree ref = DR_REF (dr);\n+  if (TREE_CODE (ref) == COMPONENT_REF\n+      && DECL_BIT_FIELD (TREE_OPERAND (ref, 1)))\n+    {\n+      /* We can't take address of bitfields.  If the bitfield is at constant\n+\t offset from the start of the struct, just use address of the\n+\t struct, for analysis of the strides that shouldn't matter.  */\n+      if (!TREE_OPERAND (ref, 2)\n+\t  || TREE_CODE (TREE_OPERAND (ref, 2)) == INTEGER_CST)\n+\tref = TREE_OPERAND (ref, 0);\n+      /* Otherwise, if we have a bit field representative, use that.  */\n+      else if (DECL_BIT_FIELD_REPRESENTATIVE (TREE_OPERAND (ref, 1))\n+\t       != NULL_TREE)\n+\t{\n+\t  tree repr = DECL_BIT_FIELD_REPRESENTATIVE (TREE_OPERAND (ref, 1));\n+\t  ref = build3 (COMPONENT_REF, TREE_TYPE (repr), TREE_OPERAND (ref, 0),\n+\t\t\trepr, TREE_OPERAND (ref, 2));\n+\t}\n+      /* Otherwise punt.  */\n+      else\n+\t{\n+\t  dr->aux = strides;\n+\t  return;\n+\t}\n+    }\n   tree scev_base = build_fold_addr_expr (ref);\n   tree scev = analyze_scalar_evolution (loop, scev_base);\n   scev = instantiate_scev (loop_preheader_edge (loop_nest), loop, scev);"}, {"sha": "fcd31bb12a1820630086876f47e00dd5eae778a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0f6bbb3aa701b7d42aeefdf014eb73e9332d92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0f6bbb3aa701b7d42aeefdf014eb73e9332d92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df0f6bbb3aa701b7d42aeefdf014eb73e9332d92", "patch": "@@ -1,3 +1,9 @@\n+2017-12-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/83337\n+\t* gcc.dg/tree-ssa/loop-interchange-14.c: New test.\n+\t* gcc.dg/tree-ssa/loop-interchange-15.c: New test.\n+\n 2017-12-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/82934"}, {"sha": "7c71ae4c4af607e4c56134872bfee67445dcebe8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-interchange-14.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0f6bbb3aa701b7d42aeefdf014eb73e9332d92/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-interchange-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0f6bbb3aa701b7d42aeefdf014eb73e9332d92/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-interchange-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-interchange-14.c?ref=df0f6bbb3aa701b7d42aeefdf014eb73e9332d92", "patch": "@@ -0,0 +1,60 @@\n+/* PR tree-optimization/83337 */\n+/* { dg-do run { target int32plus } } */\n+/* { dg-options \"-O2 -floop-interchange -fdump-tree-linterchange-details\" } */\n+\n+/* Copied from graphite/interchange-5.c */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define N 100\n+#define M 1111\n+struct S { int a : 3; int b : 17; int c : 12; };\n+struct S A[N][M];\n+\n+static int __attribute__((noinline))\n+foo (void)\n+{\n+  int i, j;\n+\n+  for( i = 0; i < M; i++)\n+    for( j = 0; j < N; j++)\n+      A[j][i].b = 5 * A[j][i].b;\n+\n+  return A[0][0].b + A[N-1][M-1].b;\n+}\n+\n+extern void abort ();\n+\n+static void __attribute__((noinline))\n+init (int i)\n+{\n+  int j;\n+\n+  for (j = 0; j < M; j++)\n+    A[i][j].b = 2;\n+}\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < N; i++)\n+    init (i);\n+\n+  res = foo ();\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  if (res != 20)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Loop_pair<outer:., inner:.> is interchanged\" 1 \"linterchange\"} } */"}, {"sha": "420880e8fc95086dbfe9fbb480dd3c6a148862f5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-interchange-15.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df0f6bbb3aa701b7d42aeefdf014eb73e9332d92/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-interchange-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df0f6bbb3aa701b7d42aeefdf014eb73e9332d92/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-interchange-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-interchange-15.c?ref=df0f6bbb3aa701b7d42aeefdf014eb73e9332d92", "patch": "@@ -0,0 +1,53 @@\n+/* PR tree-optimization/83337 */\n+/* { dg-do run { target int32plus } } */\n+/* { dg-options \"-O2 -floop-interchange\" } */\n+\n+/* Copied from graphite/interchange-5.c */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define N 100\n+#define M 1111\n+\n+extern void abort ();\n+\n+static void __attribute__((noipa))\n+foo (int n)\n+{\n+  int i, j;\n+  struct S { char d[n]; int a : 3; int b : 17; int c : 12; };\n+  struct S A[N][M];\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      asm volatile (\"\" : : \"g\" (&A[0][0]) : \"memory\");\n+      for (j = 0; j < M; j++)\n+\tA[i][j].b = 2;\n+    }\n+  asm volatile (\"\" : : \"g\" (&A[0][0]) : \"memory\");\n+\n+  for (i = 0; i < M; i++)\n+    for (j = 0; j < N; j++)\n+      A[j][i].b = 5 * A[j][i].b;\n+\n+  asm volatile (\"\" : : \"g\" (&A[0][0]) : \"memory\");\n+  int res = A[0][0].b + A[N-1][M-1].b;\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  if (res != 20)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  foo (1);\n+  foo (8);\n+  return 0;\n+}"}]}