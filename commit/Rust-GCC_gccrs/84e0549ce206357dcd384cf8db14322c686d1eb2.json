{"sha": "84e0549ce206357dcd384cf8db14322c686d1eb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRlMDU0OWNlMjA2MzU3ZGNkMzg0Y2Y4ZGIxNDMyMmM2ODZkMWViMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-18T21:10:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-18T21:10:26Z"}, "message": "plugins: Allow plugins to handle global_options changes\n\nAny time somebody adds or removes an option in some *.opt file (which e.g.\non the 10 branch after branching off 11 happened 7 times already), many\noffsets in global_options variable change and so plugins that ever access\nGCC options or other global_options values are ABI dependent on it.  It is\ntrue we don't guarantee ABI stability for plugins, but we change the most\noften used data structures on the release branches only very rarely and so\nthe options changes are the most problematic for ABI stability of plugins.\n\nAnnobin uses a way to remap accesses to some of the global_options.x_* by\nlooking them up in the cl_options array where we have\noffsetof (struct gcc_options, x_flag_lto)\netc. remembered, but sadly doesn't do it for all options (e.g. some flag_*\netc. option accesses may be hidden in various macros like POINTER_SIZE),\nand more importantly some struct gcc_options offsets are not covered at all.\nE.g. there is no offsetof (struct gcc_options, x_optimize),\noffsetof (struct gcc_options, x_flag_sanitize) etc.  Those are usually:\nVariable\nint optimize\nin the *.opt files.\n\nThe following patch allows the plugins to deal with reshuffling of even\nthe global_options fields that aren't tracked in cl_options by adding\nanother array that describes those, which adds an 816 bytes long array\nand 1039 bytes in string literals, so 1855 .rodata bytes in total ATM.\nAnd adds it only if --enable-plugin (the default), with --disable-plugin\nit will not be compiled in.\n\n2020-11-18  Jakub Jelinek  <jakub@redhat.com>\n\n\t* opts.h (struct cl_var): New type.\n\t(cl_vars): Declare.\n\t* optc-gen.awk: Generate cl_vars array.", "tree": {"sha": "eafad226fade8d6adbd68099e80babaafb5be896", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eafad226fade8d6adbd68099e80babaafb5be896"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84e0549ce206357dcd384cf8db14322c686d1eb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e0549ce206357dcd384cf8db14322c686d1eb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84e0549ce206357dcd384cf8db14322c686d1eb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84e0549ce206357dcd384cf8db14322c686d1eb2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3f312b535f57b5773953746f6ad0d890ce09b88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f312b535f57b5773953746f6ad0d890ce09b88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f312b535f57b5773953746f6ad0d890ce09b88"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "be5566b960a259b134db748a5e2e1978f35605dc", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e0549ce206357dcd384cf8db14322c686d1eb2/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e0549ce206357dcd384cf8db14322c686d1eb2/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=84e0549ce206357dcd384cf8db14322c686d1eb2", "patch": "@@ -595,5 +595,29 @@ for (i = 0; i < n_opts; i++) {\n }\n print \"}               \"\n \n+split(\"\", var_seen, \":\")\n+print \"\\n#if !defined(GENERATOR_FILE) && defined(ENABLE_PLUGIN)\"\n+print \"DEBUG_VARIABLE const struct cl_var cl_vars[] =\\n{\"\n+\n+for (i = 0; i < n_opts; i++) {\n+\tname = var_name(flags[i]);\n+\tif (name == \"\")\n+\t\tcontinue;\n+\tvar_seen[name] = 1;\n }\n \n+for (i = 0; i < n_extra_vars; i++) {\n+\tvar = extra_vars[i]\n+\tsub(\" *=.*\", \"\", var)\n+\tname = var\n+\tsub(\"^.*[ *]\", \"\", name)\n+\tsub(\"\\\\[.*\\\\]$\", \"\", name)\n+\tif (name in var_seen)\n+\t\tcontinue;\n+\tprint \"  { \" quote name quote \", offsetof (struct gcc_options, x_\" name \") },\"\n+\tvar_seen[name] = 1\n+}\n+\n+print \"  { NULL, (unsigned short) -1 }\\n};\\n#endif\"\n+\n+}"}, {"sha": "d62bfcfdf6af1dcdfc3c94e4401ee9fbab63e6a9", "filename": "gcc/opts.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84e0549ce206357dcd384cf8db14322c686d1eb2/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84e0549ce206357dcd384cf8db14322c686d1eb2/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=84e0549ce206357dcd384cf8db14322c686d1eb2", "patch": "@@ -124,6 +124,14 @@ struct cl_option\n   int range_max;\n };\n \n+struct cl_var\n+{\n+  /* Name of the variable.  */\n+  const char *var_name;\n+  /* Offset of field for this var in struct gcc_options.  */\n+  unsigned short var_offset;\n+};\n+\n /* Records that the state of an option consists of SIZE bytes starting\n    at DATA.  DATA might point to CH in some cases.  */\n struct cl_option_state {\n@@ -134,6 +142,9 @@ struct cl_option_state {\n \n extern const struct cl_option cl_options[];\n extern const unsigned int cl_options_count;\n+#ifdef ENABLE_PLUGIN\n+extern const struct cl_var cl_vars[];\n+#endif\n extern const char *const lang_names[];\n extern const unsigned int cl_lang_count;\n "}]}