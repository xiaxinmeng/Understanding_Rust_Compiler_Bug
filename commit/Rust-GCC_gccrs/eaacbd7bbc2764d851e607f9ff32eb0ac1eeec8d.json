{"sha": "eaacbd7bbc2764d851e607f9ff32eb0ac1eeec8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFhY2JkN2JiYzI3NjRkODUxZTYwN2Y5ZmYzMmViMGFjMWVlZWM4ZA==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-01-04T23:12:10Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-01-04T23:12:10Z"}, "message": "invoke.texi ([-fsized-deallocation]): Copy-edit to fix verb tense, etc.\n\n2015-01-04  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi ([-fsized-deallocation]): Copy-edit to fix\n\tverb tense, etc.\n\t([-fvtable-verify], [-fvtv-debug]): Likewise.\n\t([-Wabi]): Likewise.\n\t([-fmessage-length]): Likewise.\n\t([-Wsuggest-final-types], [-Wsuggest-final-methods]): Likewise.\n\t([-Wno-discarded-qualifiers]): Likewise.\n\t([-Wnodiscarded-array-qualifiers]): Likewise.\n\t([-Wno-virtual-move-assign]): Likewise.\n\t([-fsanitize=address], [-fsanitize=thread]): Likewise.\n\t([-fsanitize=leak], [-fsanitize=undefined]): Likewise.\n\t([-fsanitize=unreachable], [-fsanitize-recover]): Likewise.\n\t([-fsanitize-undefined-trap-on-error]): Likewise.\n\t([-floop-interchange]): Likewise.\n\t([-ftree-coalesce-inlined-vars]): Likewise.\n\t([-fvect-cost-model]): Likewise.\n\t([-flto]): Likewise.\n\t([--param]): Likewise.\n\t(Spec Files): Likewise.\n\t([-mstrict-align]): Likewise.\n\t([-mfix-cortex-a53-835769]): Likewise.\n\t([-march], [-mtune]): Likewise.\n\t([-mpic-register]): Likewise.\n\t([-munaligned-access]): Likewise.\n\t([-msp8]): Likewise.\n\t(EIND and Devices with more than 128 Ki Bytes of Flash): Likewise.\n\t(AVR Built-in Macros): Likewise.\n\t([-mpreferred-stack-boundary]): Likewise.\n\t([-mtune-crtl]): Likewise.\n\t([-mashf]): Likewise.\n\t([-mmcu=]): Likewise.\n\t([-minrt]): Likewise.\n\t([-maltivec], [-maltivec=be], [-maltivec=le]): Likewise.\n\t([-mupper-regs]): Likewise.\n\t([-matomic-model]): Likewise.\n\t([-mdiv]): Likewise.\n\t([-mzdcbranch]): Likewise.\n\t([-mdisable-callt]): Likewise.\n\t([-msoft-float]): Likewise.\n\t([-m8byte-align]): Likewise.\n\t([-fstack-reuse]): Likewise.\n\nFrom-SVN: r219176", "tree": {"sha": "589cccd6ed05cbf3ee48f5fb139a92a97a0e89a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/589cccd6ed05cbf3ee48f5fb139a92a97a0e89a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eaacbd7bbc2764d851e607f9ff32eb0ac1eeec8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaacbd7bbc2764d851e607f9ff32eb0ac1eeec8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaacbd7bbc2764d851e607f9ff32eb0ac1eeec8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaacbd7bbc2764d851e607f9ff32eb0ac1eeec8d/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a78ef4c0e265918c66828dc4cc479c0539ec225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a78ef4c0e265918c66828dc4cc479c0539ec225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a78ef4c0e265918c66828dc4cc479c0539ec225"}], "stats": {"total": 226, "additions": 137, "deletions": 89}, "files": [{"sha": "7953aa1022bba4e0ba3bd0b4f4d36bc79fce97e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaacbd7bbc2764d851e607f9ff32eb0ac1eeec8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaacbd7bbc2764d851e607f9ff32eb0ac1eeec8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eaacbd7bbc2764d851e607f9ff32eb0ac1eeec8d", "patch": "@@ -1,3 +1,47 @@\n+2015-01-04  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi ([-fsized-deallocation]): Copy-edit to fix\n+\tverb tense, etc.\n+\t([-fvtable-verify], [-fvtv-debug]): Likewise.\n+\t([-Wabi]): Likewise.\n+\t([-fmessage-length]): Likewise.\n+\t([-Wsuggest-final-types], [-Wsuggest-final-methods]): Likewise.\n+\t([-Wno-discarded-qualifiers]): Likewise.\n+\t([-Wnodiscarded-array-qualifiers]): Likewise.\n+\t([-Wno-virtual-move-assign]): Likewise.\n+\t([-fsanitize=address], [-fsanitize=thread]): Likewise.\n+\t([-fsanitize=leak], [-fsanitize=undefined]): Likewise.\n+\t([-fsanitize=unreachable], [-fsanitize-recover]): Likewise.\n+\t([-fsanitize-undefined-trap-on-error]): Likewise.\n+\t([-floop-interchange]): Likewise.\n+\t([-ftree-coalesce-inlined-vars]): Likewise.\n+\t([-fvect-cost-model]): Likewise.\n+\t([-flto]): Likewise.\n+\t([--param]): Likewise.\n+\t(Spec Files): Likewise.\n+\t([-mstrict-align]): Likewise.\n+\t([-mfix-cortex-a53-835769]): Likewise.\n+\t([-march], [-mtune]): Likewise.\n+\t([-mpic-register]): Likewise.\n+\t([-munaligned-access]): Likewise.\n+\t([-msp8]): Likewise.\n+\t(EIND and Devices with more than 128 Ki Bytes of Flash): Likewise.\n+\t(AVR Built-in Macros): Likewise.\n+\t([-mpreferred-stack-boundary]): Likewise.\n+\t([-mtune-crtl]): Likewise.\n+\t([-mashf]): Likewise.\n+\t([-mmcu=]): Likewise.\n+\t([-minrt]): Likewise.\n+\t([-maltivec], [-maltivec=be], [-maltivec=le]): Likewise.\n+\t([-mupper-regs]): Likewise.\n+\t([-matomic-model]): Likewise.\n+\t([-mdiv]): Likewise.\n+\t([-mzdcbranch]): Likewise.\n+\t([-mdisable-callt]): Likewise.\n+\t([-msoft-float]): Likewise.\n+\t([-m8byte-align]): Likewise.\n+\t([-fstack-reuse]): Likewise.\n+\n 2015-01-03  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/invoke.texi ([-fprofile-generate], [-fprofile-use]):"}, {"sha": "9ba62e5797660fe5b964e3f99e16becdd844eafd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 93, "deletions": 89, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eaacbd7bbc2764d851e607f9ff32eb0ac1eeec8d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eaacbd7bbc2764d851e607f9ff32eb0ac1eeec8d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=eaacbd7bbc2764d851e607f9ff32eb0ac1eeec8d", "patch": "@@ -2318,8 +2318,8 @@ void operator delete[] (void *, std::size_t) noexcept;\n as introduced in C++14.  This is useful for user-defined replacement\n deallocation functions that, for example, use the size of the object\n to make deallocation faster.  Enabled by default under\n-@samp{-std=c++14} and above.  The flag @option{-Wsized-deallocation} will\n-warn about places that might want to add a definition.\n+@samp{-std=c++14} and above.  The flag @option{-Wsized-deallocation}\n+warns about places that might want to add a definition.\n \n @item -fstats\n @opindex fstats\n@@ -2451,14 +2451,14 @@ shared libraries have been loaded and initialized.\n libraries have been loaded and initialized.\n \n If this option appears multiple times in the compiler line, with different\n-values specified, 'none' will take highest priority over both 'std' and\n-'preinit'; 'preinit' will take priority over 'std'.\n+values specified, 'none' takes highest priority over both 'std' and\n+'preinit'; 'preinit' takes priority over 'std'.\n \n @item -fvtv-debug\n @opindex fvtv-debug\n Causes debug versions of the runtime functions for the vtable verification \n feature to be called.  This assumes the @option{-fvtable-verify=std} or\n-@option{-fvtable-verify=preinit} has been used.  This flag will also cause the\n+@option{-fvtable-verify=preinit} has been used.  This flag also causes the\n compiler to keep track of which vtable pointers it found for each class, and\n record that information in the file ``vtv_set_ptr_data.log'', in the dump\n file directory on the user's machine.\n@@ -2571,7 +2571,7 @@ These issues were corrected in @option{-fabi-version=6}.\n \n @item\n Lambdas in default argument scope were mangled incorrectly, and the\n-ABI changed the mangling of nullptr_t.\n+ABI changed the mangling of @code{nullptr_t}.\n \n These issues were corrected in @option{-fabi-version=7}.\n \n@@ -3100,8 +3100,8 @@ honor these options.\n @item -fmessage-length=@var{n}\n @opindex fmessage-length\n Try to format error messages so that they fit on lines of about\n-@var{n} characters.  If @var{n} is zero, then no line-wrapping will be\n-done; each error message will appear on a single line.  This is the\n+@var{n} characters.  If @var{n} is zero, then no line-wrapping is\n+done; each error message appears on a single line.  This is the\n default for all front ends.\n \n @item -fdiagnostics-show-location=once\n@@ -4261,7 +4261,8 @@ appropriate may not be detected.\n @opindex Wno-suggest-final-types\n @opindex Wsuggest-final-types\n Warn about types with virtual methods where code quality would be improved\n-if the type was declared with the C++11 final specifier, or, if possible,\n+if the type were declared with the C++11 @code{final} specifier, \n+or, if possible,\n declared in an anonymous namespace. This allows GCC to more aggressively\n devirtualize the polymorphic calls. This warning is more effective with link\n time optimization, where the information about the class hierarchy graph is\n@@ -4271,8 +4272,10 @@ more complete.\n @opindex Wno-suggest-final-methods\n @opindex Wsuggest-final-methods\n Warn about virtual methods where code quality would be improved if the method\n-was declared with the C++11 final specifier, or, if possible, its type was\n-declared in an anonymous namespace or with the final specifier. This warning is\n+were declared with the C++11 @code{final} specifier, \n+or, if possible, its type were\n+declared in an anonymous namespace or with the @code{final} specifier.\n+This warning is\n more effective with link time optimization, where the information about the\n class hierarchy graph is more complete. It is recommended to first consider\n suggestions of @option{-Wsuggest-final-types} and then rebuild with new\n@@ -4302,15 +4305,15 @@ This warning is enabled by @option{-Wall}.\n @opindex Wno-discarded-qualifiers\n @opindex Wdiscarded-qualifiers\n Do not warn if type qualifiers on pointers are being discarded.\n-Typically, the compiler will warn if a @code{const char *} variable is\n+Typically, the compiler warns if a @code{const char *} variable is\n passed to a function that takes a @code{char *} parameter.  This option\n can be used to suppress such a warning.\n \n @item -Wno-discarded-array-qualifiers @r{(C and Objective-C only)}\n @opindex Wno-discarded-array-qualifiers\n @opindex Wdiscarded-array-qualifiers\n Do not warn if type qualifiers on arrays which are pointer targets\n-are being discarded. Typically, the compiler will warn if a\n+are being discarded. Typically, the compiler warns if a\n @code{const int (*)[]} variable is passed to a function that\n takes a @code{int (*)[]} parameter.  This option can be used to\n suppress such a warning.\n@@ -4957,7 +4960,7 @@ declaration.  This warning is issued even if the definition itself\n provides a prototype.  Use this option to detect global functions\n that do not have a matching prototype declaration in a header file.\n This option is not valid for C++ because all function declarations\n-provide prototypes and a non-matching declaration will declare an\n+provide prototypes and a non-matching declaration declares an\n overload rather than conflict with an earlier declaration.\n Use @option{-Wmissing-declarations} to detect missing declarations in C++.\n \n@@ -5263,7 +5266,7 @@ scalar type.\n @opindex Wno-virtual-move-assign\n Suppress warnings about inheriting from a virtual base with a\n non-trivial C++11 move assignment operator.  This is dangerous because\n-if the virtual base is reachable along more than one path, it will be\n+if the virtual base is reachable along more than one path, it is\n moved multiple times, which can mean both objects end up in the\n moved-from state.  If the move assignment operator is written to avoid\n moving from a moved-from object, this warning can be disabled.\n@@ -5556,7 +5559,7 @@ many times it is given.  This is mainly intended to be used with\n @item -fsanitize=address\n @opindex fsanitize=address\n Enable AddressSanitizer, a fast memory error detector.\n-Memory access instructions will be instrumented to detect\n+Memory access instructions are instrumented to detect\n out-of-bounds and use-after-free bugs.\n See @uref{http://code.google.com/p/address-sanitizer/} for\n more details.  The run-time behavior can be influenced using the\n@@ -5572,7 +5575,7 @@ See @uref{http://code.google.com/p/address-sanitizer/wiki/AddressSanitizerForKer\n @item -fsanitize=thread\n @opindex fsanitize=thread\n Enable ThreadSanitizer, a fast data race detector.\n-Memory access instructions will be instrumented to detect\n+Memory access instructions are instrumented to detect\n data race bugs.  See @uref{http://code.google.com/p/thread-sanitizer/} for more\n details. The run-time behavior can be influenced using the @env{TSAN_OPTIONS}\n environment variable; see\n@@ -5584,7 +5587,7 @@ supported options.\n Enable LeakSanitizer, a memory leak detector.\n This option only matters for linking of executables and if neither\n @option{-fsanitize=address} nor @option{-fsanitize=thread} is used.  In that\n-case it will link the executable against a library that overrides @code{malloc}\n+case the executable is linked against a library that overrides @code{malloc}\n and other allocator functions.  See\n @uref{https://code.google.com/p/address-sanitizer/wiki/LeakSanitizer} for more\n details.  The run-time behavior can be influenced using the\n@@ -5593,7 +5596,7 @@ details.  The run-time behavior can be influenced using the\n @item -fsanitize=undefined\n @opindex fsanitize=undefined\n Enable UndefinedBehaviorSanitizer, a fast undefined behavior detector.\n-Various computations will be instrumented to detect undefined behavior\n+Various computations are instrumented to detect undefined behavior\n at runtime.  Current suboptions are:\n \n @table @gcctabopt\n@@ -5610,7 +5613,7 @@ Detect integer division by zero as well as @code{INT_MIN / -1} division.\n \n @item -fsanitize=unreachable\n @opindex fsanitize=unreachable\n-With this option, the compiler will turn the @code{__builtin_unreachable}\n+With this option, the compiler turns the @code{__builtin_unreachable}\n call into a diagnostics message call instead.  When reaching the\n @code{__builtin_unreachable} call, the behavior is undefined.\n \n@@ -5724,13 +5727,13 @@ Kernel AddressSanitizer.\n @opindex fno-sanitize-recover\n @option{-fsanitize-recover=} controls error recovery mode for sanitizers\n mentioned in comma-separated list of @var{opts}.  Enabling this option\n-for a sanitizer component would cause it to attempt to continue\n+for a sanitizer component causes it to attempt to continue\n running the program as if no error happened.  This means multiple\n runtime errors can be reported in a single program run, and the exit\n code of the program may indicate success even when errors\n have been reported.  The @option{-fno-sanitize-recover=} can be used to alter\n-this behavior, only the first detected error will be reported\n-and program will exit after that with non-zero exit code.\n+this behavior: only the first detected error is reported\n+and program then exits with a non-zero exit code.\n \n Currently this feature only works for @option{-fsanitize=undefined} (and its suboptions\n except for @option{-fsanitize=unreachable} and @option{-fsanitize=return}),\n@@ -5747,8 +5750,8 @@ Similarly @option{-fno-sanitize-recover} is equivalent to\n The @option{-fsanitize-undefined-trap-on-error} instructs the compiler to\n report undefined behavior using @code{__builtin_trap ()} rather than\n a @code{libubsan} library routine.  The advantage of this is that the\n-@code{libubsan} library is not needed and will not be linked in, so this\n-is usable even for use in freestanding environments.\n+@code{libubsan} library is not needed and is not linked in, so this\n+is usable even in freestanding environments.\n \n @item -fdump-final-insns@r{[}=@var{file}@r{]}\n @opindex fdump-final-insns\n@@ -8343,6 +8346,7 @@ DO J = 1, M\n   ENDDO\n ENDDO\n @end smallexample\n+@noindent\n loop interchange transforms the loop as if it were written:\n @smallexample\n DO I = 1, N\n@@ -8373,6 +8377,7 @@ DO I = 1, N\n   A(I) = A(I) + C\n ENDDO\n @end smallexample\n+@noindent\n loop strip mining transforms the loop as if it were written:\n @smallexample\n DO II = 1, N, 51\n@@ -8400,6 +8405,7 @@ DO I = 1, N\n   ENDDO\n ENDDO\n @end smallexample\n+@noindent\n loop blocking transforms the loop as if it were written:\n @smallexample\n DO II = 1, N, 51\n@@ -8577,10 +8583,10 @@ is enabled by default at @option{-O} and higher.\n @item -ftree-coalesce-inlined-vars\n @opindex ftree-coalesce-inlined-vars\n Tell the copyrename pass (see @option{-ftree-copyrename}) to attempt to\n-combine small user-defined variables too, but only if they were inlined\n+combine small user-defined variables too, but only if they are inlined\n from other functions.  It is a more limited form of\n @option{-ftree-coalesce-vars}.  This may harm debug information of such\n-inlined variables, but it will keep variables of the inlined-into\n+inlined variables, but it keeps variables of the inlined-into\n function apart from each other, such that they are more likely to\n contain the expected values in a debugging session.  This was the\n default in GCC versions older than 4.7.\n@@ -8630,9 +8636,9 @@ Alter the cost model used for vectorization.  The @var{model} argument\n should be one of @code{unlimited}, @code{dynamic} or @code{cheap}.\n With the @code{unlimited} model the vectorized code-path is assumed\n to be profitable while with the @code{dynamic} model a runtime check\n-will guard the vectorized code-path to enable it only for iteration\n+guards the vectorized code-path to enable it only for iteration\n counts that will likely execute faster than when executing the original\n-scalar loop.  The @code{cheap} model will disable vectorization of\n+scalar loop.  The @code{cheap} model disables vectorization of\n loops where doing so would be cost prohibitive for example due to\n required runtime checks for data dependence or alignment but otherwise\n is equal to the @code{dynamic} model.\n@@ -9029,7 +9035,7 @@ optimizations you need to use the GCC driver to perform the link-step.\n GCC then automatically performs link-time optimization if any of the\n objects involved were compiled with the @option{-flto}.  You generally\n should specify the optimization options to be used for link-time\n-optimization though GCC will try to be clever at guessing an\n+optimization though GCC tries to be clever at guessing an\n optimization level to use from the options used at compile-time\n if you fail to specify one at link-time.  You can always override\n the automatic decision to do link-time optimization at link-time\n@@ -9082,9 +9088,9 @@ stage.  Generally options specified at link-time override those\n specified at compile-time.\n \n If you do not specify an optimization level option @option{-O} at\n-link-time then GCC will compute one based on the optimization levels\n+link-time then GCC computes one based on the optimization levels\n used when compiling the object files.  The highest optimization\n-level will win here.\n+level wins here.\n \n Currently, the following options and their setting are take from\n the first object file that explicitely specified it: \n@@ -9168,7 +9174,7 @@ The current implementation of LTO makes no\n attempt to generate bytecode that is portable between different\n types of hosts.  The bytecode files are versioned and there is a\n strict version check, so bytecode files generated in one version of\n-GCC will not work with an older or newer version of GCC.\n+GCC do not work with an older or newer version of GCC.\n \n Link-time optimization does not work well with generation of debugging\n information.  Combining @option{-flto} with\n@@ -10011,20 +10017,17 @@ the amount of inlining for code having a large abstraction penalty.\n The default value is 10.\n \n @item max-early-inliner-iterations\n-@itemx max-early-inliner-iterations\n Limit of iterations of the early inliner.  This basically bounds\n the number of nested indirect calls the early inliner can resolve.\n Deeper chains are still handled by late inlining.\n \n @item comdat-sharing-probability\n-@itemx comdat-sharing-probability\n Probability (in percent) that C++ inline function with comdat visibility\n are shared across multiple compilation units.  The default value is 20.\n \n @item profile-func-internal-id\n-@itemx profile-func-internal-id\n A parameter to control whether to use function internal id in profile\n-database lookup. If the value is 0, the compiler will use id that\n+database lookup. If the value is 0, the compiler uses an id that\n is based on function assembler name and filename, which makes old profile\n data more tolerant to source changes such as function reordering etc.\n The default value is 0.\n@@ -10539,7 +10542,7 @@ pointer parameter.\n The two Scalar Reduction of Aggregates passes (SRA and IPA-SRA) aim to\n replace scalar parts of aggregates with uses of independent scalar\n variables.  These parameters control the maximum size, in storage units,\n-of aggregate which will be considered for replacement when compiling for\n+of aggregate which is considered for replacement when compiling for\n speed\n (@option{sra-max-scalarization-size-Ospeed}) or size\n (@option{sra-max-scalarization-size-Osize}) respectively.\n@@ -10608,7 +10611,7 @@ score of the candidate.\n @item ipa-max-aa-steps\n During its analysis of function bodies, IPA-CP employs alias analysis\n in order to track values pointed to by function parameters.  In order\n-not spend too much time analyzing huge functions, it will give up and\n+not spend too much time analyzing huge functions, it gives up and\n consider all memory clobbered after examining\n @option{ipa-max-aa-steps} statements modifying memory.\n \n@@ -10666,7 +10669,7 @@ See @file{haifa-sched.c} in the GCC sources for more details.\n The default choice depends on the target.\n \n @item max-slsr-cand-scan\n-Set the maximum number of existing candidates that will be considered when\n+Set the maximum number of existing candidates that are considered when\n seeking a basis for a new straight-line strength reduction candidate.\n \n @item asan-globals\n@@ -11746,16 +11749,17 @@ for each matching switch, with the @code{%*} replaced by the part of\n that switch matching the @code{*}.\n \n If @code{%*} appears as the last part of a spec sequence then a space\n-will be added after the end of the last substitution.  If there is more\n-text in the sequence however then a space will not be generated.  This\n+is added after the end of the last substitution.  If there is more\n+text in the sequence, however, then a space is not generated.  This\n allows the @code{%*} substitution to be used as part of a larger\n string.  For example, a spec string like this:\n \n @smallexample\n %@{mcu=*:--script=%*/memory.ld@}\n @end smallexample\n \n-when matching an option like @code{-mcu=newchip} will produce:\n+@noindent\n+when matching an option like @code{-mcu=newchip} produces:\n \n @smallexample\n --script=newchip/memory.ld\n@@ -11989,7 +11993,7 @@ statically linked only.\n \n @item -mstrict-align\n @opindex mstrict-align\n-Do not assume that unaligned memory references will be handled by the system.\n+Do not assume that unaligned memory references are handled by the system.\n \n @item -momit-leaf-frame-pointer\n @itemx -mno-omit-leaf-frame-pointer\n@@ -12013,7 +12017,7 @@ of TLS variables.\n @opindex mfix-cortex-a53-835769\n @opindex mno-fix-cortex-a53-835769\n Enable or disable the workaround for the ARM Cortex-A53 erratum number 835769.\n-This will involve inserting a NOP instruction between memory instructions and\n+This involves inserting a NOP instruction between memory instructions and\n 64-bit integer multiply-accumulate instructions.\n \n @item -march=@var{name}\n@@ -12031,7 +12035,7 @@ GCC uses this name to determine what kind of instructions it can emit when\n generating assembly code.\n \n Where @option{-march} is specified without either of @option{-mtune}\n-or @option{-mcpu} also being specified, the code will be tuned to perform\n+or @option{-mcpu} also being specified, the code is tuned to perform\n well across a range of target processors implementing the target\n architecture.\n \n@@ -12046,7 +12050,7 @@ of the code for a big.LITTLE system.  The only permissible value is\n @samp{cortex-a57.cortex-a53}.\n \n Where none of @option{-mtune=}, @option{-mcpu=} or @option{-march=}\n-are specified, the code will be tuned to perform well across a range\n+are specified, the code is tuned to perform well across a range\n of target processors.\n \n This option cannot be suffixed by feature modifiers.\n@@ -12559,7 +12563,7 @@ Expand @code{adddi3} and @code{subdi3} at rtl generation time into\n @item -mindexed-loads\n @opindex mindexed-loads\n Enable the use of indexed loads.  This can be problematic because some\n-optimizers will then assume the that indexed stores exist, which is not\n+optimizers then assume that indexed stores exist, which is not\n the case.\n \n @item -mlra\n@@ -13040,7 +13044,7 @@ before execution begins.\n @item -mpic-register=@var{reg}\n @opindex mpic-register\n Specify the register to be used for PIC addressing.\n-For standard PIC base case, the default will be any suitable register\n+For standard PIC base case, the default is any suitable register\n determined by compiler.  For single PIC base case, the default is\n @samp{R9} if target is EABI based or stack-checking is enabled,\n otherwise the default is @samp{R10}.\n@@ -13157,13 +13161,13 @@ Enables (or disables) reading and writing of 16- and 32- bit values\n from addresses that are not 16- or 32- bit aligned.  By default\n unaligned access is disabled for all pre-ARMv6 and all ARMv6-M\n architectures, and enabled for all other architectures.  If unaligned\n-access is not enabled then words in packed data structures will be\n+access is not enabled then words in packed data structures are\n accessed a byte at a time.\n \n-The ARM attribute @code{Tag_CPU_unaligned_access} will be set in the\n+The ARM attribute @code{Tag_CPU_unaligned_access} is set in the\n generated object file to either true or false, depending upon the\n setting of this option.  If unaligned access is enabled then the\n-preprocessor symbol @code{__ARM_FEATURE_UNALIGNED} will also be\n+preprocessor symbol @code{__ARM_FEATURE_UNALIGNED} is also\n defined.\n \n @item -mneon-for-64bits\n@@ -13276,7 +13280,7 @@ This option is used internally by the compiler to select and\n build multilibs for architectures @code{avr2} and @code{avr25}.\n These architectures mix devices with and without @code{SPH}.\n For any setting other than @code{-mmcu=avr2} or @code{-mmcu=avr25}\n-the compiler driver will add or remove this option from the compiler\n+the compiler driver adds or removes this option from the compiler\n proper's command line, because the compiler then knows if the device\n or architecture has an 8-bit stack pointer and thus no @code{SPH}\n register or not.\n@@ -13348,9 +13352,9 @@ generates @emph{stubs}. Stubs are jump pads sometimes also called\n The stub contains a direct jump to the desired address.\n \n @item\n-Linker relaxation must be turned on so that the linker will generate\n-the stubs correctly an all situaltion. See the compiler option\n-@code{-mrelax} and the linler option @code{--relax}.\n+Linker relaxation must be turned on so that the linker generates\n+the stubs correctly in all situations. See the compiler option\n+@code{-mrelax} and the linker option @code{--relax}.\n There are corner cases where the linker is supposed to generate stubs\n but aborts without relaxation and without a helpful error message.\n \n@@ -13514,7 +13518,7 @@ for @var{mcu}=@code{avr2}, @code{avr25}, @code{avr3},\n @code{avr6}, @code{avrxmega2}, @code{avrxmega4}, @code{avrxmega5},\n @code{avrxmega6}, @code{avrxmega7}, respectively.\n If @var{mcu} specifies a device, this built-in macro is set\n-accordingly. For example, with @code{-mmcu=atmega8} the macro will be\n+accordingly. For example, with @code{-mmcu=atmega8} the macro is\n defined to @code{4}.\n \n @item __AVR_@var{Device}__\n@@ -13530,15 +13534,15 @@ the device name as from the AVR user manual. The difference between\n @code{-mmcu=@var{device}} is that the latter is always lowercase.\n \n If @var{device} is not a device but only a core architecture like\n-@code{avr51}, this macro will not be defined.\n+@code{avr51}, this macro is not defined.\n \n @item   __AVR_DEVICE_NAME__\n Setting @code{-mmcu=@var{device}} defines this built-in macro to\n the device's name. For example, with @code{-mmcu=atmega8} the macro\n-will be defined to @code{atmega8}.\n+is defined to @code{atmega8}.\n \n If @var{device} is not a device but only a core architecture like\n-@code{avr51}, this macro will not be defined.\n+@code{avr51}, this macro is not defined.\n \n @item __AVR_XMEGA__\n The device / architecture belongs to the XMEGA family of devices.\n@@ -15844,11 +15848,11 @@ SSE extensions disabled, @option{-mpreferred-stack-boundary=3} can be\n used to keep the stack boundary aligned to 8 byte boundary.  Since\n x86-64 ABI require 16 byte stack alignment, this is ABI incompatible and\n intended to be used in controlled environment where stack space is\n-important limitation.  This option will lead to wrong code when functions\n+important limitation.  This option leads to wrong code when functions\n compiled with 16 byte stack alignment (such as functions from a standard\n library) are called with misaligned stack.  In this case, SSE\n instructions may lead to misaligned memory access traps.  In addition,\n-variable arguments will be handled incorrectly for 16 byte aligned\n+variable arguments are handled incorrectly for 16 byte aligned\n objects (including x87 long double and __int128), leading to wrong\n results.  You must build all modules with\n @option{-mpreferred-stack-boundary=3}, including any libraries.  This\n@@ -16025,8 +16029,8 @@ tuning features and default settings. The names can be used in\n @opindex mtune-ctrl=@var{feature-list}\n This option is used to do fine grain control of x86 code generation features.\n @var{feature-list} is a comma separated list of @var{feature} names. See also\n-@option{-mdump-tune-features}. When specified, the @var{feature} will be turned\n-on if it is not preceded with @code{^}, otherwise, it will be turned off. \n+@option{-mdump-tune-features}. When specified, the @var{feature} is turned\n+on if it is not preceded with @samp{^}, otherwise, it is turned off. \n @option{-mtune-ctrl=@var{feature-list}} is intended to be used by GCC\n developers. Using it may lead to code paths not covered by testing and can\n potentially result in compiler ICEs or runtime errors.\n@@ -16078,7 +16082,7 @@ This option enables generation of @code{SAHF} instructions in 64-bit code.\n Early Intel Pentium 4 CPUs with Intel 64 support,\n prior to the introduction of Pentium 4 G1 step in December 2005,\n lacked the @code{LAHF} and @code{SAHF} instructions\n-which were supported by AMD64.\n+which are supported by AMD64.\n These are load and store instructions, respectively, for certain status flags.\n In 64-bit mode, the @code{SAHF} instruction is used to optimize @code{fmod},\n @code{drem}, and @code{remainder} built-in functions;\n@@ -18943,20 +18947,20 @@ testsuite and/or aesthetic purposes.\n @opindex mmcu=\n Select the MCU to target.  This is used to create a C preprocessor\n symbol based upon the MCU name, converted to upper case and pre- and\n-post- fixed with @code{__}.  This in turn will be used by the\n-@code{msp430.h} header file to select an MCU specific supplimentary\n+post-fixed with @samp{__}.  This in turn is used by the\n+@code{msp430.h} header file to select an MCU-specific supplementary\n header file.\n \n The option also sets the ISA to use.  If the MCU name is one that is\n known to only support the 430 ISA then that is selected, otherwise the\n 430X ISA is selected.  A generic MCU name of @code{msp430} can also be\n used to select the 430 ISA.  Similarly the generic @code{msp430x} MCU\n-name will select the 430X ISA.\n+name selects the 430X ISA.\n \n-In addition an MCU specific linker script will be added to the linker\n+In addition an MCU-specific linker script is added to the linker\n command line.  The script's name is the name of the MCU with\n-@code{.ld} appended.  Thus specifying @option{-mmcu=xxx} on the gcc\n-command line will define the C preprocessor symbol @code{__XXX__} and\n+@file{.ld} appended.  Thus specifying @option{-mmcu=xxx} on the @command{gcc}\n+command line defines the C preprocessor symbol @code{__XXX__} and\n cause the linker to search for a script called @file{xxx.ld}.\n \n This option is also passed on to the assembler.\n@@ -19012,7 +19016,7 @@ them safe to use inside interrupt handlers as well as in normal code.\n @opindex minrt\n Enable the use of a minimum runtime environment - no static\n initializers or constructors.  This is intended for memory-constrained\n-devices.  The compiler will include special symbols in some objects\n+devices.  The compiler includes special symbols in some objects\n that tell the linker and runtime which code fragments are required.\n \n @end table\n@@ -19764,7 +19768,7 @@ enhancements.\n \n When @option{-maltivec} is used, rather than @option{-maltivec=le} or\n @option{-maltivec=be}, the element order for Altivec intrinsics such\n-as @code{vec_splat}, @code{vec_extract}, and @code{vec_insert} will\n+as @code{vec_splat}, @code{vec_extract}, and @code{vec_insert} \n match array element order corresponding to the endianness of the\n target.  That is, element zero identifies the leftmost element in a\n vector register when targeting a big-endian platform, and identifies\n@@ -19779,7 +19783,7 @@ the default when targeting a big-endian platform.\n \n The element order is used to interpret element numbers in Altivec\n intrinsics such as @code{vec_splat}, @code{vec_extract}, and\n-@code{vec_insert}.  By default, these will match array element order\n+@code{vec_insert}.  By default, these match array element order\n corresponding to the endianness for the target.\n \n @item -maltivec=le\n@@ -19791,7 +19795,7 @@ currently ignored when targeting a big-endian platform.\n \n The element order is used to interpret element numbers in Altivec\n intrinsics such as @code{vec_splat}, @code{vec_extract}, and\n-@code{vec_insert}.  By default, these will match array element order\n+@code{vec_insert}.  By default, these match array element order\n corresponding to the endianness for the target.\n \n @item -mvrsave\n@@ -19940,7 +19944,7 @@ Generate code that uses (does not use) the scalar\n instructions that target all 64 registers in the vector/scalar\n floating point register set, depending on the model of the machine.\n \n-If the @option{-mno-upper-regs} option was used, it will turn off both\n+If the @option{-mno-upper-regs} option is used, it turns off both\n @option{-mupper-regs-sf} and @option{-mupper-regs-df} options.\n \n @item -mfloat-gprs=@var{yes/single/double/no}\n@@ -21420,7 +21424,7 @@ built-in functions.  The generated atomic sequences require additional support\n from the interrupt/exception handling code of the system and are only suitable\n for SH3* and SH4* single-core systems.  This option is enabled by default when\n the target is @code{sh*-*-linux*} and SH3* or SH4*.  When the target is SH4A,\n-this option will also partially utilize the hardware atomic instructions\n+this option also partially utilizes the hardware atomic instructions\n @code{movli.l} and @code{movco.l} to create more efficient code, unless\n @samp{strict} is specified.  \n \n@@ -21445,7 +21449,7 @@ Generate hardware atomic sequences using the @code{movli.l} and @code{movco.l}\n instructions only.  This is only available on SH4A and is suitable for\n multi-core systems.  Since the hardware instructions support only 32 bit atomic\n variables access to 8 or 16 bit variables is emulated with 32 bit accesses.\n-Code compiled with this option will also be compatible with other software\n+Code compiled with this option is also compatible with other software\n atomic model interrupt/exception handling systems if executed on an SH4A\n system.  Additional support from the interrupt/exception handling code of the\n system is not required for this model.\n@@ -21458,8 +21462,8 @@ parameter is ignored.  The specified value must be an integer multiple of four\n and in the range 0-1020.\n \n @item strict\n-This parameter prevents mixed usage of multiple atomic models, even though they\n-would be compatible, and will make the compiler generate atomic sequences of the\n+This parameter prevents mixed usage of multiple atomic models, even if they\n+are compatible, and makes the compiler generate atomic sequences of the\n specified model only.\n \n @end table\n@@ -21567,18 +21571,18 @@ SH2A and SHcompact.\n Calls a library function that performs the operation in double precision\n floating point.  Division by zero causes a floating-point exception.  This is\n the default for SHcompact with FPU.  Specifying this for targets that do not\n-have a double precision FPU will default to @code{call-div1}.\n+have a double precision FPU defaults to @code{call-div1}.\n \n @item call-table\n Calls a library function that uses a lookup table for small divisors and\n the @code{div1} instruction with case distinction for larger divisors.  Division\n by zero calculates an unspecified result and does not trap.  This is the default\n for SH4.  Specifying this for targets that do not have dynamic shift\n-instructions will default to @code{call-div1}.\n+instructions defaults to @code{call-div1}.\n \n @end table\n \n-When a division strategy has not been specified the default strategy will be\n+When a division strategy has not been specified the default strategy is\n selected based on the current target.  For SH2A the default strategy is to\n use the @code{divs} and @code{divu} instructions instead of library function\n calls.\n@@ -21669,7 +21673,7 @@ is being compiled for.\n @opindex mno-zdcbranch\n Assume (do not assume) that zero displacement conditional branch instructions\n @code{bt} and @code{bf} are fast.  If @option{-mzdcbranch} is specified, the\n-compiler will try to prefer zero displacement branch code sequences.  This is\n+compiler prefers zero displacement branch code sequences.  This is\n enabled by default when generating code for SH4 and SH4A.  It can be explicitly\n disabled by specifying @option{-mno-zdcbranch}.\n \n@@ -22456,7 +22460,7 @@ architecture.\n This option is enabled by default when the RH850 ABI is\n in use (see @option{-mrh850-abi}), and disabled by default when the\n GCC ABI is in use.  If @code{CALLT} instructions are being generated\n-then the C preprocessor symbol @code{__V850_CALLT__} will be defined.\n+then the C preprocessor symbol @code{__V850_CALLT__} is defined.\n \n @item -mrelax\n @itemx -mno-relax\n@@ -22479,8 +22483,8 @@ Disable (or re-enable) the generation of hardware floating point\n instructions.  This option is only significant when the target\n architecture is @samp{V850E2V3} or higher.  If hardware floating point\n instructions are being generated then the C preprocessor symbol\n-@code{__FPU_OK__} will be defined, otherwise the symbol\n-@code{__NO_FPU__} will be defined.\n+@code{__FPU_OK__} is defined, otherwise the symbol\n+@code{__NO_FPU__} is defined.\n \n @item -mloop\n @opindex mloop\n@@ -22555,7 +22559,7 @@ Enables support for @code{doubles} and @code{long long} types to be\n aligned on 8-byte boundaries.  The default is to restrict the\n alignment of all objects to at most 4-bytes.  When\n @option{-m8byte-align} is in effect the C preprocessor symbol\n-@code{__V850_8BYTE_ALIGN__} will be defined.\n+@code{__V850_8BYTE_ALIGN__} is defined.\n \n @item -mbig-switch\n @opindex mbig-switch\n@@ -22823,7 +22827,7 @@ temporary beyond the end point defined by the language.  When a lifetime of\n a variable ends, and if the variable lives in memory, the optimizing compiler\n has the freedom to reuse its stack space with other temporaries or scoped\n local variables whose live range does not overlap with it. Legacy code extending\n-local lifetime will likely to break with the stack reuse optimization.\n+local lifetime is likely to break with the stack reuse optimization.\n \n For example,\n "}]}