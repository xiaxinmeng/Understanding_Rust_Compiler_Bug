{"sha": "4ebcc903bf03705099cd4b50231dc8fe444d70b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGViY2M5MDNiZjAzNzA1MDk5Y2Q0YjUwMjMxZGM4ZmU0NDRkNzBiOQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2017-06-06T13:26:46Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2017-06-06T13:26:46Z"}, "message": "[AArch64] Allow const0_rtx operand for atomic compare-exchange patterns\n\n\t* config/aarch64/atomics.md (atomic_compare_and_swap<mode> expander):\n\tUse aarch64_reg_or_zero predicate for operand 4.\n\t(aarch64_compare_and_swap<mode> define_insn_and_split):\n\tUse aarch64_reg_or_zero predicate for operand 3.  Add 'Z' constraint.\n\t(aarch64_store_exclusive<mode>): Likewise for operand 2.\n\n\t* gcc.target/aarch64/atomic_cmp_exchange_zero_reg_1.c: New test.\n\nFrom-SVN: r248921", "tree": {"sha": "c27196f3a87512de1b23e07932cf97bc567d0b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c27196f3a87512de1b23e07932cf97bc567d0b4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ebcc903bf03705099cd4b50231dc8fe444d70b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ebcc903bf03705099cd4b50231dc8fe444d70b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ebcc903bf03705099cd4b50231dc8fe444d70b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ebcc903bf03705099cd4b50231dc8fe444d70b9/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9bd01837e4c9f8f4e005a95a59f0147a6bb1d7c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bd01837e4c9f8f4e005a95a59f0147a6bb1d7c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bd01837e4c9f8f4e005a95a59f0147a6bb1d7c7"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "5b27621664b90bc871fddab60068a3b7a7e3007f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebcc903bf03705099cd4b50231dc8fe444d70b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebcc903bf03705099cd4b50231dc8fe444d70b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ebcc903bf03705099cd4b50231dc8fe444d70b9", "patch": "@@ -1,3 +1,11 @@\n+2017-06-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/atomics.md (atomic_compare_and_swap<mode> expander):\n+\tUse aarch64_reg_or_zero predicate for operand 4.\n+\t(aarch64_compare_and_swap<mode> define_insn_and_split):\n+\tUse aarch64_reg_or_zero predicate for operand 3.  Add 'Z' constraint.\n+\t(aarch64_store_exclusive<mode>): Likewise for operand 2.\n+\n 2017-06-06  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config/arm/arm.c (arm_compute_save_reg_mask): Rename into ..."}, {"sha": "27fc1933ce39b6eddde9c092fa849e5f6645bea3", "filename": "gcc/config/aarch64/atomics.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebcc903bf03705099cd4b50231dc8fe444d70b9/gcc%2Fconfig%2Faarch64%2Fatomics.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebcc903bf03705099cd4b50231dc8fe444d70b9/gcc%2Fconfig%2Faarch64%2Fatomics.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fatomics.md?ref=4ebcc903bf03705099cd4b50231dc8fe444d70b9", "patch": "@@ -25,7 +25,7 @@\n    (match_operand:ALLI 1 \"register_operand\" \"\")\t\t\t;; val out\n    (match_operand:ALLI 2 \"aarch64_sync_memory_operand\" \"\")\t;; memory\n    (match_operand:ALLI 3 \"general_operand\" \"\")\t\t\t;; expected\n-   (match_operand:ALLI 4 \"register_operand\" \"\")\t\t\t;; desired\n+   (match_operand:ALLI 4 \"aarch64_reg_or_zero\" \"\")\t\t\t;; desired\n    (match_operand:SI 5 \"const_int_operand\")\t\t\t;; is_weak\n    (match_operand:SI 6 \"const_int_operand\")\t\t\t;; mod_s\n    (match_operand:SI 7 \"const_int_operand\")]\t\t\t;; mod_f\n@@ -45,7 +45,7 @@\n    (set (match_dup 1)\n     (unspec_volatile:SHORT\n       [(match_operand:SI 2 \"aarch64_plus_operand\" \"rI\")\t;; expected\n-       (match_operand:SHORT 3 \"register_operand\" \"r\")\t;; desired\n+       (match_operand:SHORT 3 \"aarch64_reg_or_zero\" \"rZ\")\t;; desired\n        (match_operand:SI 4 \"const_int_operand\")\t\t;; is_weak\n        (match_operand:SI 5 \"const_int_operand\")\t\t;; mod_s\n        (match_operand:SI 6 \"const_int_operand\")]\t;; mod_f\n@@ -69,7 +69,7 @@\n    (set (match_dup 1)\n     (unspec_volatile:GPI\n       [(match_operand:GPI 2 \"aarch64_plus_operand\" \"rI\")\t;; expect\n-       (match_operand:GPI 3 \"register_operand\" \"r\")\t\t;; desired\n+       (match_operand:GPI 3 \"aarch64_reg_or_zero\" \"rZ\")\t\t;; desired\n        (match_operand:SI 4 \"const_int_operand\")\t\t\t;; is_weak\n        (match_operand:SI 5 \"const_int_operand\")\t\t\t;; mod_s\n        (match_operand:SI 6 \"const_int_operand\")]\t\t;; mod_f\n@@ -534,7 +534,7 @@\n     (unspec_volatile:SI [(const_int 0)] UNSPECV_SX))\n    (set (match_operand:ALLI 1 \"aarch64_sync_memory_operand\" \"=Q\")\n     (unspec_volatile:ALLI\n-      [(match_operand:ALLI 2 \"register_operand\" \"r\")\n+      [(match_operand:ALLI 2 \"aarch64_reg_or_zero\" \"rZ\")\n        (match_operand:SI 3 \"const_int_operand\")]\n       UNSPECV_SX))]\n   \"\""}, {"sha": "663f21e2b4aa08d1844fd22cf4cfdb87daa2e771", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebcc903bf03705099cd4b50231dc8fe444d70b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebcc903bf03705099cd4b50231dc8fe444d70b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ebcc903bf03705099cd4b50231dc8fe444d70b9", "patch": "@@ -1,3 +1,7 @@\n+2017-06-06  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/atomic_cmp_exchange_zero_reg_1.c: New test.\n+\n 2017-06-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80974"}, {"sha": "15606b6899012dcb6616e0313d343b77249e1b24", "filename": "gcc/testsuite/gcc.target/aarch64/atomic_cmp_exchange_zero_reg_1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ebcc903bf03705099cd4b50231dc8fe444d70b9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic_cmp_exchange_zero_reg_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ebcc903bf03705099cd4b50231dc8fe444d70b9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic_cmp_exchange_zero_reg_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fatomic_cmp_exchange_zero_reg_1.c?ref=4ebcc903bf03705099cd4b50231dc8fe444d70b9", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+foo (int *a)\n+{\n+  int x = 3;\n+  return __atomic_compare_exchange_n (a, &x, 0, 1, __ATOMIC_ACQUIRE, __ATOMIC_ACQUIRE);\n+}\n+\n+/* { dg-final { scan-assembler \"stxr\\\\tw\\[0-9\\]+, wzr,.*\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\\\tw\\[0-9\\]+, 0\" } } */"}]}