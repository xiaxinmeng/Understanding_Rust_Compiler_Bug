{"sha": "157229c314cbaa93f603a8d602a7d7301e36b59e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU3MjI5YzMxNGNiYWE5M2Y2MDNhOGQ2MDJhN2Q3MzAxZTM2YjU5ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-08-06T10:07:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-08-06T10:07:31Z"}, "message": "stmt.c (expand_goto): Do virtual_stack_vars_rtx replacement for HAVE_nonlocal_goto as well.\n\n        * stmt.c (expand_goto): Do virtual_stack_vars_rtx replacement for\n        HAVE_nonlocal_goto as well.\n        * config/i960/i960.md (nonlocal_goto): Don't do it here.\n        * config/pj/pj.md (nonlocal_goto): Likewise.\n\nFrom-SVN: r35521", "tree": {"sha": "02cef3bb778936cb54cbe4ab870c9f3a115392b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02cef3bb778936cb54cbe4ab870c9f3a115392b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/157229c314cbaa93f603a8d602a7d7301e36b59e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157229c314cbaa93f603a8d602a7d7301e36b59e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/157229c314cbaa93f603a8d602a7d7301e36b59e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157229c314cbaa93f603a8d602a7d7301e36b59e/comments", "author": null, "committer": null, "parents": [{"sha": "d2335c24035c080c8940984e9ca8dc39615216ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2335c24035c080c8940984e9ca8dc39615216ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2335c24035c080c8940984e9ca8dc39615216ea"}], "stats": {"total": 83, "additions": 34, "deletions": 49}, "files": [{"sha": "3dd7c3afdeecd7626c30f557ade9863d4b0d2122", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157229c314cbaa93f603a8d602a7d7301e36b59e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157229c314cbaa93f603a8d602a7d7301e36b59e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=157229c314cbaa93f603a8d602a7d7301e36b59e", "patch": "@@ -1,3 +1,10 @@\n+2000-08-06  Richard Henderson  <rth@cygnus.com>\n+\n+\t* stmt.c (expand_goto): Do virtual_stack_vars_rtx replacement for\n+\tHAVE_nonlocal_goto as well.\n+\t* config/i960/i960.md (nonlocal_goto): Don't do it here.\n+\t* config/pj/pj.md (nonlocal_goto): Likewise.\n+\n 2000-08-07  Michael Hayes  <mhayes@cygnus.com>\n \n  \t* loop.c (try_swap_copy_prop): New function."}, {"sha": "600865b4febae588c3fea2f53ae32ca60973afa6", "filename": "gcc/config/i960/i960.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157229c314cbaa93f603a8d602a7d7301e36b59e/gcc%2Fconfig%2Fi960%2Fi960.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157229c314cbaa93f603a8d602a7d7301e36b59e/gcc%2Fconfig%2Fi960%2Fi960.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.md?ref=157229c314cbaa93f603a8d602a7d7301e36b59e", "patch": "@@ -2370,14 +2370,12 @@\n \n   emit_move_insn (gen_rtx (MEM, SImode,\n \t\t\t   plus_constant (hard_frame_pointer_rtx, -56)),\n-\t\t  replace_rtx (copy_rtx (handler), virtual_stack_vars_rtx,\n-\t\t\t       hard_frame_pointer_rtx));\n+\t\t  handler);\n \n   /* Next, we put stack into the saved $sp value in the frame.  */\n   emit_move_insn (gen_rtx (MEM, SImode,\n \t\t\t   plus_constant (hard_frame_pointer_rtx, -60)),\n-\t\t  replace_rtx (copy_rtx (stack), virtual_stack_vars_rtx,\n-\t\t\t       hard_frame_pointer_rtx));\n+\t\t  stack);\n \n   /* And finally, we can now just ret to get all the values saved\n      above into all the right registers, and also, all the local"}, {"sha": "6ce6b351642a755c8cf8146832f016a2cc4c1680", "filename": "gcc/config/pj/pj.md", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157229c314cbaa93f603a8d602a7d7301e36b59e/gcc%2Fconfig%2Fpj%2Fpj.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157229c314cbaa93f603a8d602a7d7301e36b59e/gcc%2Fconfig%2Fpj%2Fpj.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.md?ref=157229c314cbaa93f603a8d602a7d7301e36b59e", "patch": "@@ -895,24 +895,13 @@\n    (match_operand:SI 3 \"\" \"\")]\n   \"\"\n   \"{ \n-     rtx addr;\n-     rtx temp;\n+     operands[2] = force_reg (Pmode, XEXP (operands[2], 0));\n      emit_move_insn (hard_frame_pointer_rtx, operands[0]);\n-\n-     temp = copy_to_reg (replace_rtx (operands[1], \n-\t                              virtual_stack_vars_rtx,\n-         \t\t  \t      hard_frame_pointer_rtx));\n-\t  \n-     addr = replace_rtx (copy_rtx (operands[2]),\n-  \t \t\t virtual_stack_vars_rtx,\n- \t\t \t hard_frame_pointer_rtx);\n-\n      emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n-     emit_insn (gen_nonlocal_goto_helper (force_reg (Pmode, XEXP (addr, 0)),\n-\t\t                          temp));\n+     emit_insn (gen_nonlocal_goto_helper (operands[2], operands[1]));\n      emit_barrier ();\n      DONE;\n-    }\")\n+   }\")\n \f\n ;; Function overhead.\n "}, {"sha": "47431f6471eb3ca6ccff6a1dfe4b81ae4b9d1803", "filename": "gcc/stmt.c", "status": "modified", "additions": 22, "deletions": 31, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/157229c314cbaa93f603a8d602a7d7301e36b59e/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/157229c314cbaa93f603a8d602a7d7301e36b59e/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=157229c314cbaa93f603a8d602a7d7301e36b59e", "patch": "@@ -798,7 +798,7 @@ expand_goto (label)\n     {\n       struct function *p = find_function_data (context);\n       rtx label_ref = gen_rtx_LABEL_REF (Pmode, label_rtx (label));\n-      rtx temp, handler_slot;\n+      rtx handler_slot, static_chain, save_area;\n       tree link;\n \n       /* Find the corresponding handler slot for this label.  */\n@@ -816,49 +816,40 @@ expand_goto (label)\n \t case the virtual stack vars register gets instantiated differently\n \t in the parent than in the child.  */\n \n+      static_chain = copy_to_reg (lookup_static_chain (label));\n+\n+      /* Get addr of containing function's current nonlocal goto handler,\n+\t which will do any cleanups and then jump to the label.  */\n+      handler_slot = copy_to_reg (replace_rtx (copy_rtx (handler_slot),\n+\t\t\t\t\t       virtual_stack_vars_rtx,\n+\t\t\t\t\t       static_chain));\n+\n+      /* Get addr of containing function's nonlocal save area.  */\n+      save_area = p->x_nonlocal_goto_stack_level;\n+      if (save_area)\n+\tsave_area = replace_rtx (copy_rtx (save_area),\n+\t\t\t\t virtual_stack_vars_rtx, static_chain);\n+\n #if HAVE_nonlocal_goto\n       if (HAVE_nonlocal_goto)\n-\temit_insn (gen_nonlocal_goto (lookup_static_chain (label),\n-\t\t\t\t      copy_rtx (handler_slot),\n-\t\t\t\t      copy_rtx (p->x_nonlocal_goto_stack_level),\n-\t\t\t\t      label_ref));\n+\temit_insn (gen_nonlocal_goto (static_chain, handler_slot,\n+\t\t\t\t      save_area, label_ref));\n       else\n #endif\n \t{\n-\t  rtx addr;\n-\n \t  /* Restore frame pointer for containing function.\n \t     This sets the actual hard register used for the frame pointer\n \t     to the location of the function's incoming static chain info.\n \t     The non-local goto handler will then adjust it to contain the\n \t     proper value and reload the argument pointer, if needed.  */\n-\t  emit_move_insn (hard_frame_pointer_rtx, lookup_static_chain (label));\n-\n-\t  /* We have now loaded the frame pointer hardware register with\n-\t     the address of that corresponds to the start of the virtual\n-\t     stack vars.  So replace virtual_stack_vars_rtx in all\n-\t     addresses we use with stack_pointer_rtx.  */\n-\n-\t  /* Get addr of containing function's current nonlocal goto handler,\n-\t     which will do any cleanups and then jump to the label.  */\n-\t  addr = copy_rtx (handler_slot);\n-\t  temp = copy_to_reg (replace_rtx (addr, virtual_stack_vars_rtx,\n-\t\t\t\t\t   hard_frame_pointer_rtx));\n-\t  \n-\t  /* Restore the stack pointer.  Note this uses fp just restored.  */\n-\t  addr = p->x_nonlocal_goto_stack_level;\n-\t  if (addr)\n-\t    addr = replace_rtx (copy_rtx (addr),\n-\t\t\t\tvirtual_stack_vars_rtx,\n-\t\t\t\thard_frame_pointer_rtx);\n-\n-\t  emit_stack_restore (SAVE_NONLOCAL, addr, NULL_RTX);\n+\t  emit_move_insn (hard_frame_pointer_rtx, static_chain);\n+\t  emit_stack_restore (SAVE_NONLOCAL, save_area, NULL_RTX);\n \n-\t  /* USE of hard_frame_pointer_rtx added for consistency; not clear if\n-\t     really needed.  */\n+\t  /* USE of hard_frame_pointer_rtx added for consistency;\n+\t     not clear if really needed.  */\n \t  emit_insn (gen_rtx_USE (VOIDmode, hard_frame_pointer_rtx));\n \t  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n-\t  emit_indirect_jump (temp);\n+\t  emit_indirect_jump (handler_slot);\n \t}\n      }\n   else"}]}