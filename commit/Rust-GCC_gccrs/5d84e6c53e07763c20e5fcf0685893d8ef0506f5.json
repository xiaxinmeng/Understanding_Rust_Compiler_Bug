{"sha": "5d84e6c53e07763c20e5fcf0685893d8ef0506f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ4NGU2YzUzZTA3NzYzYzIwZTVmY2YwNjg1ODkzZDhlZjA1MDZmNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-06-15T23:47:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-06-15T23:47:33Z"}, "message": "LWG 3076 basic_string CTAD ambiguity\n\nWhen deduction guides are supported by the compiler (i.e. for C++17 and\nlater) replace two basic_string constructors by constrained function\ntemplates as required by LWG 3075. In order to ensure that the pre-C++17\nnon-template constructors are still exported from the shared library\ndefine a macro in src/c++11/string-inst.cc to force the non-template\ndeclarations (this isn't strictly needed yet, because the string\ninstantiations are compiled with -std=gnu++11, but that is likely to\nchange).\n\n\tLWG 3076 basic_string CTAD ambiguity\n\t* doc/xml/manual/intro.xml: Document LWG 3076 change.\n\t* include/bits/basic_string.h\n\t[__cpp_deduction_guides && !_GLIBCXX_DEFINING_STRING_INSTANTIATIONS]\n\t(basic_string(const _CharT*, const _Alloc&)): Turn into a function\n\ttemplate constrained by _RequireAllocator.\n\t(basic_string(size_type, _CharT, const _Alloc&)): Likewise.\n\t* src/c++11/string-inst.cc (_GLIBCXX_DEFINING_STRING_INSTANTIATIONS):\n\tDefine.\n\t* testsuite/21_strings/basic_string/cons/char/deduction.cc: Test\n\tdeduction\n\t* testsuite/21_strings/basic_string/cons/wchar_t/deduction.cc:\n\tLikewise.\n\nFrom-SVN: r261670", "tree": {"sha": "3832e99a38a93f602448cf201bcc0f32394479ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3832e99a38a93f602448cf201bcc0f32394479ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d84e6c53e07763c20e5fcf0685893d8ef0506f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d84e6c53e07763c20e5fcf0685893d8ef0506f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d84e6c53e07763c20e5fcf0685893d8ef0506f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d84e6c53e07763c20e5fcf0685893d8ef0506f5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "487f2f61bb1bad721f41a7f767efe04df4b0b058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/487f2f61bb1bad721f41a7f767efe04df4b0b058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/487f2f61bb1bad721f41a7f767efe04df4b0b058"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "2c3237a2ed222eaf0c5b26c3bbe93d9f73e64d08", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d84e6c53e07763c20e5fcf0685893d8ef0506f5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d84e6c53e07763c20e5fcf0685893d8ef0506f5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5d84e6c53e07763c20e5fcf0685893d8ef0506f5", "patch": "@@ -1,3 +1,19 @@\n+2018-06-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tLWG 3076 basic_string CTAD ambiguity\n+\t* doc/xml/manual/intro.xml: Document LWG 3076 change.\n+\t* include/bits/basic_string.h\n+\t[__cpp_deduction_guides && !_GLIBCXX_DEFINING_STRING_INSTANTIATIONS]\n+\t(basic_string(const _CharT*, const _Alloc&)): Turn into a function\n+\ttemplate constrained by _RequireAllocator.\n+\t(basic_string(size_type, _CharT, const _Alloc&)): Likewise.\n+\t* src/c++11/string-inst.cc (_GLIBCXX_DEFINING_STRING_INSTANTIATIONS):\n+\tDefine.\n+\t* testsuite/21_strings/basic_string/cons/char/deduction.cc: Test\n+\tdeduction\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/deduction.cc:\n+\tLikewise.\n+\n 2018-06-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/86169"}, {"sha": "fea07e2bb5f80f6e2a8ee541d9e000fdb59d1ce6", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d84e6c53e07763c20e5fcf0685893d8ef0506f5/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d84e6c53e07763c20e5fcf0685893d8ef0506f5/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=5d84e6c53e07763c20e5fcf0685893d8ef0506f5", "patch": "@@ -1176,6 +1176,13 @@ requirements of the license of GCC.\n       they will allow conversions from other types to the value_type.\n     </para></listitem></varlistentry>\n \n+    <varlistentry xml:id=\"manual.bugs.dr3076\"><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"&DR;#3076\">3076</link>:\n+       <emphasis><code>basic_string</code> CTAD ambiguity\n+       </emphasis>\n+    </term>\n+    <listitem><para>Change constructors to constrained templates.\n+    </para></listitem></varlistentry>\n+\n   </variablelist>\n \n  </section>"}, {"sha": "2e6e1c6e5da31dfef57ef8fc673779827cf468ad", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d84e6c53e07763c20e5fcf0685893d8ef0506f5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d84e6c53e07763c20e5fcf0685893d8ef0506f5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=5d84e6c53e07763c20e5fcf0685893d8ef0506f5", "patch": "@@ -506,6 +506,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param  __s  Source C string.\n        *  @param  __a  Allocator to use (default is default allocator).\n        */\n+#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3076. basic_string CTAD ambiguity\n+      template<typename = _RequireAllocator<_Alloc>>\n+#endif\n       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())\n       : _M_dataplus(_M_local_data(), __a)\n       { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }\n@@ -516,6 +521,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param  __c  Character to use.\n        *  @param  __a  Allocator to use (default is default allocator).\n        */\n+#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3076. basic_string CTAD ambiguity\n+      template<typename = _RequireAllocator<_Alloc>>\n+#endif\n       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())\n       : _M_dataplus(_M_local_data(), __a)\n       { _M_construct(__n, __c); }"}, {"sha": "47a1c9af3ab19a3b2f35142c50af0cdea7f6619d", "filename": "libstdc++-v3/src/c++11/string-inst.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d84e6c53e07763c20e5fcf0685893d8ef0506f5/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d84e6c53e07763c20e5fcf0685893d8ef0506f5/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-inst.cc?ref=5d84e6c53e07763c20e5fcf0685893d8ef0506f5", "patch": "@@ -35,6 +35,12 @@\n # define _GLIBCXX_USE_CXX11_ABI 1\n #endif\n \n+// Prevent the basic_string(const _CharT*, const _Alloc&) and\n+// basic_string(size_type, _CharT, const _Alloc&) constructors from being\n+// replaced by constrained function templates, so that we instantiate the\n+// pre-C++17 definitions.\n+#define _GLIBCXX_DEFINING_STRING_INSTANTIATIONS 1\n+\n #include <string>\n \n // Instantiation configuration."}, {"sha": "fc28467e29b271b5f76b042457897a8d2af14b01", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/deduction.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d84e6c53e07763c20e5fcf0685893d8ef0506f5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d84e6c53e07763c20e5fcf0685893d8ef0506f5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fdeduction.cc?ref=5d84e6c53e07763c20e5fcf0685893d8ef0506f5", "patch": "@@ -138,3 +138,20 @@ test05()\n   std::basic_string s4(sv, 2u, 6u, a);\n   check_type<std::string>(s4);\n }\n+\n+void\n+test06()\n+{\n+  // LWG 3076 basic_string CTAD ambiguity\n+  using namespace std;\n+  string s0;\n+\n+  basic_string s1(s0, 1, 1);\n+  check_type<std::string>(s1);\n+\n+  basic_string s2(\"cat\"sv, 1, 1);\n+  check_type<std::string>(s2);\n+\n+  basic_string s3(\"cat\", 1);\n+  check_type<std::string>(s3);\n+}"}, {"sha": "c40651f13dbd2c2e502c123856f35ae0fe20f7e0", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/deduction.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d84e6c53e07763c20e5fcf0685893d8ef0506f5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d84e6c53e07763c20e5fcf0685893d8ef0506f5/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fdeduction.cc?ref=5d84e6c53e07763c20e5fcf0685893d8ef0506f5", "patch": "@@ -97,3 +97,20 @@ test05()\n   std::basic_string s4(sv, 2u, 6u, a);\n   check_type<std::wstring>(s4);\n }\n+\n+void\n+test06()\n+{\n+  // LWG 3076 basic_string CTAD ambiguity\n+  using namespace std;\n+  wstring s0;\n+\n+  basic_string s1(s0, 1, 1);\n+  check_type<std::wstring>(s1);\n+\n+  basic_string s2(L\"cat\"sv, 1, 1);\n+  check_type<std::wstring>(s2);\n+\n+  basic_string s3(L\"cat\", 1);\n+  check_type<std::wstring>(s3);\n+}"}]}