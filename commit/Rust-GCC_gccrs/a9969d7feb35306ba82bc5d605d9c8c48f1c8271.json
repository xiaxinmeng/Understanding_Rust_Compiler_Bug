{"sha": "a9969d7feb35306ba82bc5d605d9c8c48f1c8271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk5NjlkN2ZlYjM1MzA2YmE4MmJjNWQ2MDVkOWM4YzQ4ZjFjODI3MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-01-31T20:53:42Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-05T12:17:42Z"}, "message": "[Ada] AI12-0207 Convention of anonymous access types\n\n2020-06-05  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* sem_prag.adb (Set_Convention_From_Pragma): Set the convention\n\tof anonymous access array components.", "tree": {"sha": "10412f3b16585fca325cd4a74d23895be05ea835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10412f3b16585fca325cd4a74d23895be05ea835"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9969d7feb35306ba82bc5d605d9c8c48f1c8271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9969d7feb35306ba82bc5d605d9c8c48f1c8271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9969d7feb35306ba82bc5d605d9c8c48f1c8271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9969d7feb35306ba82bc5d605d9c8c48f1c8271/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "632d4a43d7ab74554898509d7a99edccf09819cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632d4a43d7ab74554898509d7a99edccf09819cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/632d4a43d7ab74554898509d7a99edccf09819cc"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "0848e1e69791a993b3aa49ca0ffb37638ff6a89f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9969d7feb35306ba82bc5d605d9c8c48f1c8271/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9969d7feb35306ba82bc5d605d9c8c48f1c8271/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a9969d7feb35306ba82bc5d605d9c8c48f1c8271", "patch": "@@ -8020,26 +8020,38 @@ package body Sem_Prag is\n             --  For the case of a record base type, also set the convention of\n             --  any anonymous access types declared in the record which do not\n             --  currently have a specified convention.\n+            --  Similarly for an array base type and anonymous access types\n+            --  components.\n \n-            if Is_Record_Type (E) and then Is_Base_Type (E) then\n-               declare\n-                  Comp : Node_Id;\n+            if Is_Base_Type (E) then\n+               if Is_Record_Type (E) then\n+                  declare\n+                     Comp : Node_Id;\n \n-               begin\n-                  Comp := First_Component (E);\n-                  while Present (Comp) loop\n-                     if Present (Etype (Comp))\n-                       and then Ekind_In (Etype (Comp),\n-                                          E_Anonymous_Access_Type,\n-                                          E_Anonymous_Access_Subprogram_Type)\n-                       and then not Has_Convention_Pragma (Comp)\n-                     then\n-                        Set_Convention (Comp, C);\n-                     end if;\n+                  begin\n+                     Comp := First_Component (E);\n+                     while Present (Comp) loop\n+                        if Present (Etype (Comp))\n+                          and then\n+                            Ekind_In (Etype (Comp),\n+                                      E_Anonymous_Access_Type,\n+                                      E_Anonymous_Access_Subprogram_Type)\n+                          and then not Has_Convention_Pragma (Comp)\n+                        then\n+                           Set_Convention (Comp, C);\n+                        end if;\n \n-                     Next_Component (Comp);\n-                  end loop;\n-               end;\n+                        Next_Component (Comp);\n+                     end loop;\n+                  end;\n+\n+               elsif Is_Array_Type (E)\n+                 and then Ekind_In (Component_Type (E),\n+                                    E_Anonymous_Access_Type,\n+                                    E_Anonymous_Access_Subprogram_Type)\n+               then\n+                  Set_Convention (Designated_Type (Component_Type (E)), C);\n+               end if;\n             end if;\n \n             --  Deal with incomplete/private type case, where underlying type"}]}