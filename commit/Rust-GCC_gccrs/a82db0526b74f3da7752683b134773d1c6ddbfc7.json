{"sha": "a82db0526b74f3da7752683b134773d1c6ddbfc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgyZGIwNTI2Yjc0ZjNkYTc3NTI2ODNiMTM0NzczZDFjNmRkYmZjNw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-03-04T20:05:47Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-03-04T20:05:47Z"}, "message": "tree.c (add_var_to_bind_expr): Remove.\n\n\t* tree.c (add_var_to_bind_expr): Remove.\n\t* tree.h: Remove the prototype for add_var_to_bind_expr.\n\nFrom-SVN: r111715", "tree": {"sha": "db3c077eba47e15d415e8d9d5b212ed3a9027254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db3c077eba47e15d415e8d9d5b212ed3a9027254"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a82db0526b74f3da7752683b134773d1c6ddbfc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a82db0526b74f3da7752683b134773d1c6ddbfc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a82db0526b74f3da7752683b134773d1c6ddbfc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a82db0526b74f3da7752683b134773d1c6ddbfc7/comments", "author": null, "committer": null, "parents": [{"sha": "3c6c67f8d4b7987a7138fa16f99ddfae483726aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c6c67f8d4b7987a7138fa16f99ddfae483726aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c6c67f8d4b7987a7138fa16f99ddfae483726aa"}], "stats": {"total": 19, "additions": 5, "deletions": 14}, "files": [{"sha": "088e3f0bd78abac2ea8de140b51ef13f12c0fdc3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a82db0526b74f3da7752683b134773d1c6ddbfc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a82db0526b74f3da7752683b134773d1c6ddbfc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a82db0526b74f3da7752683b134773d1c6ddbfc7", "patch": "@@ -1,3 +1,8 @@\n+2006-03-04  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* tree.c (add_var_to_bind_expr): Remove.\n+\t* tree.h: Remove the prototype for add_var_to_bind_expr.\n+\n 2006-03-04  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* regclass.c (n_non_fixed_regs): Remove."}, {"sha": "d49b3ba5edd5d5854c92956406aa679b55ba6614", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a82db0526b74f3da7752683b134773d1c6ddbfc7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a82db0526b74f3da7752683b134773d1c6ddbfc7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a82db0526b74f3da7752683b134773d1c6ddbfc7", "patch": "@@ -6804,16 +6804,6 @@ initializer_zerop (tree init)\n     }\n }\n \n-void\n-add_var_to_bind_expr (tree bind_expr, tree var)\n-{\n-  BIND_EXPR_VARS (bind_expr)\n-    = chainon (BIND_EXPR_VARS (bind_expr), var);\n-  if (BIND_EXPR_BLOCK (bind_expr))\n-    BLOCK_VARS (BIND_EXPR_BLOCK (bind_expr))\n-      = BIND_EXPR_VARS (bind_expr);\n-}\n-\n /* Build an empty statement.  */\n \n tree"}, {"sha": "04fe738e7b003a7e33ff5bd715021f2f0e94a10d", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a82db0526b74f3da7752683b134773d1c6ddbfc7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a82db0526b74f3da7752683b134773d1c6ddbfc7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a82db0526b74f3da7752683b134773d1c6ddbfc7", "patch": "@@ -3893,10 +3893,6 @@ extern void categorize_ctor_elements (tree, HOST_WIDE_INT *, HOST_WIDE_INT *,\n \t\t\t\t      HOST_WIDE_INT *, bool *);\n extern HOST_WIDE_INT count_type_elements (tree, bool);\n \n-/* add_var_to_bind_expr (bind_expr, var) binds var to bind_expr.  */\n-\n-extern void add_var_to_bind_expr (tree, tree);\n-\n /* integer_zerop (tree x) is nonzero if X is an integer constant of value 0.  */\n \n extern int integer_zerop (tree);"}]}