{"sha": "9c6637c8d992c2df96bc29e021f148097917b1d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM2NjM3YzhkOTkyYzJkZjk2YmMyOWUwMjFmMTQ4MDk3OTE3YjFkOA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-03-19T20:42:39Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-03-19T20:42:39Z"}, "message": "2004-03-19  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/image/AffineTransformOp.java\n\t(AffineTransformOp): Made public.\n\t* javax/swing/JComponent.java\n\t(listenerList): Made protected.\n\t(accessibleContext): Likewise.\n\t* javax/swing/JList.java\n\t(valueChanged): Dont use internal fields of ListSelectionEvent.\n\t* javax/swing/JViewport.java\n\t(getView): Dont use internal fields of Component.\n\t(addImpl): Likewise.\n\t* javax/swing/Timer.java\n\t(isRunning): Made public.\n\t(start): Likewise.\n\t(stop): Likewise.\n\t* javax/swing/UIDefaults.java\n\t(getInt): Made public.\n\t* javax/swing/plaf/basic/BasicListUI.java\n\t(mousePressed): Dont use internal fields of MouseEvent.\n\t(propertyChanged): Dont use internal fields of PropertyChangeEvent.\n\t* javax/swing/plaf/basic/BasicScrollBarUI.java\n\t(arrowIcon): Made static.\n\t* javax/swing/plaf/basic/BasicViewportUI.java\n\t(stateChanged): Dont use internal field on ChangeEvent.\n\t* javax/swing/text/JTextComponent.java\n\t(getUI): Call UIManager.getUI().\n\t(updateUI): Use getUI().\n\nFrom-SVN: r79699", "tree": {"sha": "c42570450a7087d1141fcf9e8a557fb24344a315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c42570450a7087d1141fcf9e8a557fb24344a315"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c6637c8d992c2df96bc29e021f148097917b1d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6637c8d992c2df96bc29e021f148097917b1d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6637c8d992c2df96bc29e021f148097917b1d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6637c8d992c2df96bc29e021f148097917b1d8/comments", "author": null, "committer": null, "parents": [{"sha": "28f2a26519a128f843c82bd7a81744514be94c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28f2a26519a128f843c82bd7a81744514be94c17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28f2a26519a128f843c82bd7a81744514be94c17"}], "stats": {"total": 112, "additions": 63, "deletions": 49}, "files": [{"sha": "75d99f15b8ec2c06d50d7e477402eb1193f6f765", "filename": "libjava/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9c6637c8d992c2df96bc29e021f148097917b1d8", "patch": "@@ -1,3 +1,32 @@\n+2004-03-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/awt/image/AffineTransformOp.java\n+\t(AffineTransformOp): Made public.\n+\t* javax/swing/JComponent.java\n+\t(listenerList): Made protected.\n+\t(accessibleContext): Likewise.\n+\t* javax/swing/JList.java\n+\t(valueChanged): Dont use internal fields of ListSelectionEvent.\n+\t* javax/swing/JViewport.java\n+\t(getView): Dont use internal fields of Component.\n+\t(addImpl): Likewise.\n+\t* javax/swing/Timer.java\n+\t(isRunning): Made public.\n+\t(start): Likewise.\n+\t(stop): Likewise.\n+\t* javax/swing/UIDefaults.java\n+\t(getInt): Made public.\n+\t* javax/swing/plaf/basic/BasicListUI.java\n+\t(mousePressed): Dont use internal fields of MouseEvent.\n+\t(propertyChanged): Dont use internal fields of PropertyChangeEvent.\n+\t* javax/swing/plaf/basic/BasicScrollBarUI.java\n+\t(arrowIcon): Made static.\n+\t* javax/swing/plaf/basic/BasicViewportUI.java\n+\t(stateChanged): Dont use internal field on ChangeEvent.\n+\t* javax/swing/text/JTextComponent.java\n+\t(getUI): Call UIManager.getUI().\n+\t(updateUI): Use getUI().\n+\n 2004-03-19  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* verify.cc: Undef PC."}, {"sha": "6219635fa5133f123a25e4e593e6d6cc0c83c918", "filename": "libjava/java/awt/image/AffineTransformOp.java", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjava%2Fawt%2Fimage%2FAffineTransformOp.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjava%2Fawt%2Fimage%2FAffineTransformOp.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FAffineTransformOp.java?ref=9c6637c8d992c2df96bc29e021f148097917b1d8", "patch": "@@ -53,13 +53,11 @@\n  \n public class AffineTransformOp implements BufferedImageOp, RasterOp\n {\n-\n     public static final int TYPE_BILINEAR = 0;\n     public static final int TYPE_NEAREST_NEIGHBOR = 1;\n \n     private AffineTransform transform;\n     private RenderingHints hints;\n-\n     \n     /**\n      * Construct AffineTransformOp with the given xform and interpolationType.\n@@ -68,8 +66,7 @@ public class AffineTransformOp implements BufferedImageOp, RasterOp\n      * @param xform AffineTransform that will applied to the source image \n      * @param interpolationType type of interpolation used\n      */\n-\n-    AffineTransformOp (AffineTransform xform, int interpolationType)\n+    public AffineTransformOp (AffineTransform xform, int interpolationType)\n     {\n       this.transform = xform;\n \n@@ -89,8 +86,7 @@ public class AffineTransformOp implements BufferedImageOp, RasterOp\n      * @param xform AffineTransform that will applied to the source image\n      * @param hints rendering hints that will be used during transformation\n      */\n-\n-    AffineTransformOp (AffineTransform xform, RenderingHints hints)\n+    public AffineTransformOp (AffineTransform xform, RenderingHints hints)\n     {\n       this.transform = xform;\n       this.hints = hints;\n@@ -107,7 +103,6 @@ public class AffineTransformOp implements BufferedImageOp, RasterOp\n      * @param destCM color model for the destination image\n      * @return new compatible destination image\n      */\n-\n     public BufferedImage createCompatibleDestImage (BufferedImage src,\n                                                     ColorModel destCM)\n     {\n@@ -132,7 +127,6 @@ public BufferedImage createCompatibleDestImage (BufferedImage src,\n      * @throws RasterFormatException if resulting width or height of raster is 0\n      * @return new compatible raster\n      */\n-\n     public WritableRaster createCompatibleDestRaster (Raster src)\n     {\n       Rectangle rect = (Rectangle) getBounds2D (src);\n@@ -155,7 +149,6 @@ public WritableRaster createCompatibleDestRaster (Raster src)\n      * @param dst destination image\n      * @return transformed source image\n      */\n-\n     public BufferedImage filter (BufferedImage src, BufferedImage dst)\n     {\n \n@@ -187,7 +180,6 @@ public BufferedImage filter (BufferedImage src, BufferedImage dst)\n      * @param dst destination raster\n      * @return transformed raster\n      */\n-\n     public WritableRaster filter (Raster src, WritableRaster dst)\n     {\n       throw new UnsupportedOperationException (\"not implemented yet\");\t\n@@ -200,7 +192,6 @@ public WritableRaster filter (Raster src, WritableRaster dst)\n      * @param src image to be transformed\n      * @return bounds of the transformed image.\n      */\n-\n     public Rectangle2D getBounds2D (BufferedImage src)\n     {\n       return getBounds2D (src.getRaster());\n@@ -212,7 +203,6 @@ public Rectangle2D getBounds2D (BufferedImage src)\n      * @param src raster to be transformed\n      * @return bounds of the transformed raster.\n      */\n-\n     public Rectangle2D getBounds2D (Raster src)\n     {\n       // determine new size for the transformed raster.\n@@ -232,7 +222,6 @@ public Rectangle2D getBounds2D (Raster src)\n      *\n      * @return interpolation type\n      */\n-\n     public int getInterpolationType ()\n     {\n       if(hints.containsValue (RenderingHints.VALUE_INTERPOLATION_BILINEAR))\n@@ -249,7 +238,6 @@ public int getInterpolationType ()\n      * @param dstPt destination point\n      * @return the location of the transformed source point.\n      */\n-     \n     public Point2D getPoint2D (Point2D srcPt, Point2D dstPt)\n     {\n       return transform.transform (srcPt, dstPt);\n@@ -259,7 +247,6 @@ public Point2D getPoint2D (Point2D srcPt, Point2D dstPt)\n      *\n      * @return rendering hints\n      */\n-\n     public RenderingHints getRenderingHints ()\n     {\n       return hints;\n@@ -270,7 +257,6 @@ public RenderingHints getRenderingHints ()\n      *\n      * @return transform\n      */\n-     \n     public AffineTransform getTransform ()\n     {\n       return transform;"}, {"sha": "c98f52dfb837bbf704590eb718d7bcc6b24cf70e", "filename": "libjava/javax/swing/JComponent.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2FJComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2FJComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJComponent.java?ref=9c6637c8d992c2df96bc29e021f148097917b1d8", "patch": "@@ -89,12 +89,12 @@ public abstract class JComponent extends Container implements Serializable\n {\n   static final long serialVersionUID = -5242478962609715464L;\n \n-  EventListenerList listenerList = new EventListenerList();\n+  protected EventListenerList listenerList = new EventListenerList();\n   \n   /**\n    * accessibleContext\n    */\n-  AccessibleContext accessibleContext;\n+  protected AccessibleContext accessibleContext;\n   \n   Dimension pref,min,max;\n   Border border;"}, {"sha": "7ed776c0380552a4683a58d927877f072ab8f108", "filename": "libjava/javax/swing/JList.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2FJList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2FJList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJList.java?ref=9c6637c8d992c2df96bc29e021f148097917b1d8", "patch": "@@ -293,9 +293,9 @@ public void intervalRemoved(ListDataEvent event)\n     // ListSelectionListener events\n     public void valueChanged(ListSelectionEvent event)\n     {\n-      JList.this.fireSelectionValueChanged(event.firstIndex,\n-                                           event.lastIndex,\n-                                           event.isAdjusting);\n+      JList.this.fireSelectionValueChanged(event.getFirstIndex(),\n+                                           event.getLastIndex(),\n+                                           event.getValueIsAdjusting());\n       JList.this.repaint();\n     }\n   };"}, {"sha": "17e60f1a56046e008ca80c5d433a9044f2bec860", "filename": "libjava/javax/swing/JViewport.java", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2FJViewport.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2FJViewport.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJViewport.java?ref=9c6637c8d992c2df96bc29e021f148097917b1d8", "patch": "@@ -199,10 +199,10 @@ public int getScrollMode()\n \n   public Component getView()\n   {\n-    if (ncomponents > 0)\n-      return component[0];\n-    else\n+    if (getComponentCount() == 0)\n       return null;\n+  \n+    return getComponents()[0];\n   }\n \n   public void setView(Component v)\n@@ -214,8 +214,9 @@ public void setView(Component v)\n     \n   public void addImpl(Component comp, Object constraints, int index)\n   {\n-    if (ncomponents > 0)\n-      remove(component[0]);\n+    if (getComponentCount() > 0)\n+      remove(getComponents()[0]);\n+    \n     super.addImpl(comp, constraints, index);\n   }\n "}, {"sha": "adb695a1035bf2a892a0d59a423051a0bf4f4d63", "filename": "libjava/javax/swing/Timer.java", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2FTimer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2FTimer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FTimer.java?ref=9c6637c8d992c2df96bc29e021f148097917b1d8", "patch": "@@ -136,7 +136,6 @@ public static boolean getLogTimers()\n     return verbose;\n   }\n     \n-\n   public void setDelay(int delay)\n   {\n     interval = delay;\n@@ -147,7 +146,6 @@ public int getDelay()\n     return (int)interval;\n   }\n \n-\n   public void setInitialDelay(int initialDelay)\n   {\n     init_delay = initialDelay;\n@@ -158,12 +156,12 @@ public void setRepeats(boolean flag)\n     repeat_ticks = flag;\n   }\n \n-  boolean isRunning()\n+  public boolean isRunning()\n   {\n     return running;\n   }\n \n-  void start()\n+  public void start()\n   {\n     if (isRunning())\n       {\n@@ -173,7 +171,7 @@ void start()\n     new Waker().start();\n   }\n \n-  void stop()\n+  public void stop()\n   {\n     running = false;\n   }"}, {"sha": "da23a54d344939e944ceebf003e03be8c4da7f7e", "filename": "libjava/javax/swing/UIDefaults.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2FUIDefaults.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2FUIDefaults.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FUIDefaults.java?ref=9c6637c8d992c2df96bc29e021f148097917b1d8", "patch": "@@ -369,13 +369,13 @@ public String getString(Object key, Locale l)\n     return o instanceof String ? (String) o : null;\n   }\n \n-  int getInt(Object key)\n+  public int getInt(Object key)\n   {\n     Object o = get(key);\n     return o instanceof Integer ? ((Integer) o).intValue() : 0;\n   }\n \n-  int getInt(Object key, Locale l)\n+  public int getInt(Object key, Locale l)\n   {\n     Object o = get(key, l);\n     return o instanceof Integer ? ((Integer) o).intValue() : 0;"}, {"sha": "4be876527351ef57bbe960d01d930d09f18c18c5", "filename": "libjava/javax/swing/plaf/basic/BasicListUI.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicListUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicListUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicListUI.java?ref=9c6637c8d992c2df96bc29e021f148097917b1d8", "patch": "@@ -190,7 +190,7 @@ public void mouseClicked(MouseEvent event)\n     public void mousePressed(MouseEvent event)\n     {\n       // System.err.println(\"got mouse click event \" + event);\n-      int row = BasicListUI.this.convertYToRow(event.y);\n+      int row = BasicListUI.this.convertYToRow(event.getY());\n       if (row == -1)\n         return;\n \n@@ -263,13 +263,13 @@ class PropertyChangeHandler implements PropertyChangeListener\n     public void propertyChange(PropertyChangeEvent e)\n     {\n       // System.err.println(this + \".propertyChange(\" + e + \")\");\n-      if (e.source == BasicListUI.this.list)\n+      if (e.getSource() == BasicListUI.this.list)\n         {\n-          if (e.oldValue != null && e.oldValue instanceof ListModel)\n-            ((ListModel) e.oldValue).removeListDataListener(BasicListUI.this.listDataListener);\n+          if (e.getOldValue() != null && e.getOldValue() instanceof ListModel)\n+            ((ListModel) e.getOldValue()).removeListDataListener(BasicListUI.this.listDataListener);\n \n-          if (e.newValue != null && e.newValue instanceof ListModel)\n-            ((ListModel) e.newValue).addListDataListener(BasicListUI.this.listDataListener);\n+          if (e.getNewValue() != null && e.getNewValue() instanceof ListModel)\n+            ((ListModel) e.getNewValue()).addListDataListener(BasicListUI.this.listDataListener);\n         }\n       BasicListUI.this.damageLayout();\n     }"}, {"sha": "f0f56d30c7911a54d978d6e562f81e293f6888b7", "filename": "libjava/javax/swing/plaf/basic/BasicScrollBarUI.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicScrollBarUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicScrollBarUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicScrollBarUI.java?ref=9c6637c8d992c2df96bc29e021f148097917b1d8", "patch": "@@ -472,7 +472,7 @@ public boolean shouldScroll (int direction)\n    * A helper class that allows us to draw icons for \n    * the JButton.\n    */\n-  private class arrowIcon implements Icon\n+  private static class arrowIcon implements Icon\n   {\n     /** The polygon that describes the icon. */\n     private Polygon arrow;"}, {"sha": "f686ca0801034df0fd011340bed283cb0cd1f296", "filename": "libjava/javax/swing/plaf/basic/BasicViewportUI.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicViewportUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicViewportUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicViewportUI.java?ref=9c6637c8d992c2df96bc29e021f148097917b1d8", "patch": "@@ -64,7 +64,7 @@ class ChangeHandler implements ChangeListener\n   {\n     public void stateChanged(ChangeEvent event)\n     {\n-      JViewport v = (JViewport)event.source;\n+      JViewport v = (JViewport) event.getSource();\n       v.repaint();\n     }\n   }"}, {"sha": "48bb0c03ce6e8341da4ff8f619dd8ae36e8cdd46", "filename": "libjava/javax/swing/text/JTextComponent.java", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2Ftext%2FJTextComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c6637c8d992c2df96bc29e021f148097917b1d8/libjava%2Fjavax%2Fswing%2Ftext%2FJTextComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2FJTextComponent.java?ref=9c6637c8d992c2df96bc29e021f148097917b1d8", "patch": "@@ -472,15 +472,15 @@ public void setVerticalTextPosition(int textPosition)\n \t//          Sets the vertical position of the label's text, relative to its image.  \n     }\n \n-    public TextUI getUI()\n-    {\treturn (TextUI) ui;\n-    }\n+  public TextUI getUI()\n+  {\n+    return (TextUI) UIManager.getUI(this);\n+  }\n \n-    public void updateUI()\n-    {\n-\tTextUI b = (TextUI)UIManager.getUI(this);\n-\tsetUI(b);\n-    }\n+  public void updateUI()\n+  {\n+    setUI(getUI());\n+  }\n \n   public Dimension getPreferredScrollableViewportSize()\n   {"}]}