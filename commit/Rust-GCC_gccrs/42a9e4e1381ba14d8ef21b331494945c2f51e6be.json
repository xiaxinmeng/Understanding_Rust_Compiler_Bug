{"sha": "42a9e4e1381ba14d8ef21b331494945c2f51e6be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJhOWU0ZTEzODFiYTE0ZDhlZjIxYjMzMTQ5NDk0NWMyZjUxZTZiZQ==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-07-02T16:27:52Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-07-02T16:28:45Z"}, "message": "rs6000: Add MMA __builtin_vsx_lxvp and __builtin_vsx_stxvp built-ins\n\nAdd support for the __builtin_vsx_lxvp and __builtin_vsx_stxvp built-ins\nto keep in sync with LLVM which added these earlier.\n\n2021-07-02  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-builtin.def (BU_MMA_PAIR_LD, BU_MMA_PAIR_ST):\n\tNew macros.\n\t(__builtin_vsx_lxvp, __builtin_vsx_stxvp): New built-ins.\n\t* config/rs6000/rs6000-call.c (rs6000_gimple_fold_mma_builtin): Expand\n\tlxvp and stxvp built-ins.\n\t(mma_init_builtins): Handle lxvp and stxvp built-ins.\n\t(builtin_function_type): Likewise.\n\t* doc/extend.texi (__builtin_vsx_lxvp, __builtin_mma_stxvp): Document.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/mma-builtin-7.c: New test.\n\t* gcc.target/powerpc/mma-builtin-8.c: New test.", "tree": {"sha": "91b6be794139b81e33d695b4af005ae6dcf0b66f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91b6be794139b81e33d695b4af005ae6dcf0b66f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42a9e4e1381ba14d8ef21b331494945c2f51e6be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42a9e4e1381ba14d8ef21b331494945c2f51e6be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42a9e4e1381ba14d8ef21b331494945c2f51e6be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42a9e4e1381ba14d8ef21b331494945c2f51e6be/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aa5fb17a30ff0ce9928e5eac35b892d95e7eba5"}], "stats": {"total": 134, "additions": 132, "deletions": 2}, "files": [{"sha": "6270444ef70156fdbfc48bca8da87bfecc4bdbdf", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a9e4e1381ba14d8ef21b331494945c2f51e6be/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a9e4e1381ba14d8ef21b331494945c2f51e6be/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=42a9e4e1381ba14d8ef21b331494945c2f51e6be", "patch": "@@ -484,6 +484,25 @@\n \t\t     | RS6000_BTC_SENARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+#define BU_MMA_PAIR_LD(ENUM, NAME, ATTR)\t\t\t\t\\\n+  RS6000_BUILTIN_M (VSX_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_vsx_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_MMA,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_BINARY\t\t\t\t\\\n+\t\t     | RS6000_BTC_GIMPLE),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n+\n+#define BU_MMA_PAIR_ST(ENUM, NAME, ATTR)\t\t\t\t\\\n+  RS6000_BUILTIN_M (VSX_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_vsx_\" NAME,\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_MMA,\t\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_TERNARY\t\t\t\t\\\n+\t\t     | RS6000_BTC_VOID\t\t\t\t\t\\\n+\t\t     | RS6000_BTC_GIMPLE),\t\t\t\t\\\n+\t\t    CODE_FOR_nothing)\t\t\t/* ICODE */\n+\n /* ISA 2.05 (power6) convenience macros. */\n /* For functions that depend on the CMPB instruction */\n #define BU_P6_2(ENUM, NAME, ATTR, ICODE)\t\t\t\t\\\n@@ -3253,6 +3272,9 @@ BU_SPECIAL_X (RS6000_BUILTIN_CFSTRING, \"__builtin_cfstring\", RS6000_BTM_ALWAYS,\n BU_P10V_VSX_1 (XVCVBF16SPN,\t \"xvcvbf16spn\",\tMISC, vsx_xvcvbf16spn)\n BU_P10V_VSX_1 (XVCVSPBF16,\t    \"xvcvspbf16\",\tMISC, vsx_xvcvspbf16)\n \n+BU_MMA_PAIR_LD (LXVP,\t    \"lxvp\",\t\tMISC)\n+BU_MMA_PAIR_ST (STXVP,\t    \"stxvp\",\t\tPAIR)\n+\n BU_MMA_1 (XXMFACC,\t    \"xxmfacc\",\t\tQUAD, mma_xxmfacc)\n BU_MMA_1 (XXMTACC,\t    \"xxmtacc\",\t\tQUAD, mma_xxmtacc)\n BU_MMA_1 (XXSETACCZ,\t    \"xxsetaccz\",\tMISC, mma_xxsetaccz)"}, {"sha": "6115e3b34d9884f0a938741c7f0765dc70014c6a", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a9e4e1381ba14d8ef21b331494945c2f51e6be/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a9e4e1381ba14d8ef21b331494945c2f51e6be/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=42a9e4e1381ba14d8ef21b331494945c2f51e6be", "patch": "@@ -11913,6 +11913,32 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n       gsi_replace_with_seq (gsi, new_seq, true);\n       return true;\n     }\n+  else if (fncode == VSX_BUILTIN_LXVP)\n+    {\n+      push_gimplify_context (true);\n+      tree offset = gimple_call_arg (stmt, 0);\n+      tree ptr = gimple_call_arg (stmt, 1);\n+      tree lhs = gimple_call_lhs (stmt);\n+      tree mem = build_simple_mem_ref (build2 (POINTER_PLUS_EXPR,\n+\t\t\t\t\t       TREE_TYPE (ptr), ptr, offset));\n+      gimplify_assign (lhs, mem, &new_seq);\n+      pop_gimplify_context (NULL);\n+      gsi_replace_with_seq (gsi, new_seq, true);\n+      return true;\n+    }\n+  else if (fncode == VSX_BUILTIN_STXVP)\n+    {\n+      push_gimplify_context (true);\n+      tree src = gimple_call_arg (stmt, 0);\n+      tree offset = gimple_call_arg (stmt, 1);\n+      tree ptr = gimple_call_arg (stmt, 2);\n+      tree mem = build_simple_mem_ref (build2 (POINTER_PLUS_EXPR,\n+\t\t\t\t\t       TREE_TYPE (ptr), ptr, offset));\n+      gimplify_assign (mem, src, &new_seq);\n+      pop_gimplify_context (NULL);\n+      gsi_replace_with_seq (gsi, new_seq, true);\n+      return true;\n+    }\n \n   /* Convert this built-in into an internal version that uses pass-by-value\n      arguments.  The internal built-in follows immediately after this one.  */\n@@ -14264,11 +14290,14 @@ mma_init_builtins (void)\n       if (gimple_func)\n \t{\n \t  gcc_assert (icode == CODE_FOR_nothing);\n-\t  op[nopnds++] = void_type_node;\n \t  /* Some MMA built-ins that are expanded into gimple are converted\n \t     into internal MMA built-ins that are expanded into rtl.\n \t     The internal built-in follows immediately after this built-in.  */\n-\t  icode = d[1].icode;\n+\t  if (d[1].icode != CODE_FOR_nothing)\n+\t    {\n+\t      op[nopnds++] = void_type_node;\n+\t      icode = d[1].icode;\n+\t    }\n \t}\n       else\n \t{\n@@ -14291,6 +14320,19 @@ mma_init_builtins (void)\n \t  else\n \t    op[nopnds++] = build_pointer_type (vector_pair_type_node);\n \t}\n+      else if (d->code == VSX_BUILTIN_LXVP)\n+\t{\n+\t  op[nopnds++] = vector_pair_type_node;\n+\t  op[nopnds++] = sizetype;\n+\t  op[nopnds++] = build_pointer_type (vector_pair_type_node);\n+\t}\n+      else if (d->code == VSX_BUILTIN_STXVP)\n+\t{\n+\t  op[nopnds++] = void_type_node;\n+\t  op[nopnds++] = vector_pair_type_node;\n+\t  op[nopnds++] = sizetype;\n+\t  op[nopnds++] = build_pointer_type (vector_pair_type_node);\n+\t}\n       else\n \t{\n \t  /* This is a normal MMA built-in function.  */\n@@ -14781,6 +14823,16 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n       h.uns_p[2] = 1;\n       break;\n \n+    case VSX_BUILTIN_LXVP:\n+      h.uns_p[0] = 1;\n+      h.uns_p[2] = 1;\n+      break;\n+\n+    case VSX_BUILTIN_STXVP:\n+      h.uns_p[1] = 1;\n+      h.uns_p[3] = 1;\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "b83cd4919bb1bbaf5c7c2e0a13e40ad58f6b74bb", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a9e4e1381ba14d8ef21b331494945c2f51e6be/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a9e4e1381ba14d8ef21b331494945c2f51e6be/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=42a9e4e1381ba14d8ef21b331494945c2f51e6be", "patch": "@@ -20731,6 +20731,9 @@ void __builtin_vsx_disassemble_pair (void *, __vector_pair *);\n \n vec_t __builtin_vsx_xvcvspbf16 (vec_t);\n vec_t __builtin_vsx_xvcvbf16spn (vec_t);\n+\n+__vector_pair __builtin_vsx_lxvp (size_t, __vector_pair *);\n+void __builtin_vsx_stxvp (__vector_pair, size_t, __vector_pair *);\n @end smallexample\n \n @node PRU Built-in Functions"}, {"sha": "c661a4b84bc77c42039955196031ad4656130bf2", "filename": "gcc/testsuite/gcc.target/powerpc/mma-builtin-7.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a9e4e1381ba14d8ef21b331494945c2f51e6be/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a9e4e1381ba14d8ef21b331494945c2f51e6be/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-7.c?ref=42a9e4e1381ba14d8ef21b331494945c2f51e6be", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2\" } */\n+\n+void\n+foo (__vector_pair *dst, __vector_pair *src, long idx)\n+{\n+  dst[0] = __builtin_vsx_lxvp (0, src);\n+  dst[2] = __builtin_vsx_lxvp (32, src);\n+  dst[4] = __builtin_vsx_lxvp (64, src);\n+  /* Non-constant offset should generate a lxvpx.  */\n+  dst[6] = __builtin_vsx_lxvp (idx, src);\n+  /* Non-aligned offset should generate a plxvp.  */\n+  dst[8] = __builtin_vsx_lxvp (257, src);\n+}\n+\n+#if !__has_builtin (__builtin_vsx_lxvp)\n+#  error \"__has_builtin (__builtin_vsx_lxvp) failed\"\n+#endif\n+\n+/* { dg-final { scan-assembler-not {\\mlxv\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mstxv\\M} } } */\n+/* { dg-final { scan-assembler-times {\\mlxvp\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mlxvpx\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mplxvp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvp\\M} 5 } } */"}, {"sha": "af29e479f835ec997f6e9bf7d66748d617e7d066", "filename": "gcc/testsuite/gcc.target/powerpc/mma-builtin-8.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42a9e4e1381ba14d8ef21b331494945c2f51e6be/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42a9e4e1381ba14d8ef21b331494945c2f51e6be/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fmma-builtin-8.c?ref=42a9e4e1381ba14d8ef21b331494945c2f51e6be", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2\" } */\n+\n+void\n+foo (__vector_pair *dst, __vector_pair *src, long idx)\n+{\n+  __vector_pair pair = *src;\n+  __builtin_vsx_stxvp (pair, 0, dst);\n+  __builtin_vsx_stxvp (pair, 32, dst);\n+  __builtin_vsx_stxvp (pair, 64, dst);\n+  /* Non-constant offset should generate a stxvpx.  */\n+  __builtin_vsx_stxvp (pair, idx, dst);\n+  /* Non-aligned offset should generate a pstxvp.  */\n+  __builtin_vsx_stxvp (pair, 257, dst);\n+}\n+\n+#if !__has_builtin (__builtin_vsx_stxvp)\n+#  error \"__has_builtin (__builtin_vsx_stxvp) failed\"\n+#endif\n+\n+/* { dg-final { scan-assembler-not {\\mlxv\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mstxv\\M} } } */\n+/* { dg-final { scan-assembler-times {\\mlxvp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvp\\M} 3 } } */\n+/* { dg-final { scan-assembler-times {\\mstxvpx\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mpstxvp\\M} 1 } } */"}]}