{"sha": "5eebe2eb038f42c58ae6c3b55a474c79df7f5ce2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVlYmUyZWIwMzhmNDJjNThhZTZjM2I1NWE0NzRjNzlkZjdmNWNlMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-19T22:30:21Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-19T22:30:21Z"}, "message": "(synth_mult): Don't try to make recursive call if we would be shifting by a negative number.\n\n(synth_mult): Don't try to make recursive call if we would be shifting\nby a negative number.\n(expand_mult): Don't negate VAL if it is negative.\n\nFrom-SVN: r3788", "tree": {"sha": "b132049312bc01e9da9f56c883fb29c2b782d4cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b132049312bc01e9da9f56c883fb29c2b782d4cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5eebe2eb038f42c58ae6c3b55a474c79df7f5ce2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eebe2eb038f42c58ae6c3b55a474c79df7f5ce2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eebe2eb038f42c58ae6c3b55a474c79df7f5ce2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eebe2eb038f42c58ae6c3b55a474c79df7f5ce2/comments", "author": null, "committer": null, "parents": [{"sha": "fb5c8ce64aa4c73336fe3abee7ff193cc85d5d73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5c8ce64aa4c73336fe3abee7ff193cc85d5d73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb5c8ce64aa4c73336fe3abee7ff193cc85d5d73"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "18a499f69aa4a59d9550fe692d9d24e6040eee24", "filename": "gcc/expmed.c", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eebe2eb038f42c58ae6c3b55a474c79df7f5ce2/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eebe2eb038f42c58ae6c3b55a474c79df7f5ce2/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=5eebe2eb038f42c58ae6c3b55a474c79df7f5ce2", "patch": "@@ -1920,33 +1920,39 @@ synth_mult (t, cost_limit)\n       q = t - 1;\n       q = q & -q;\n       m = exact_log2 (q);\n-      cost = shiftadd_cost[m];\n-      *alg_in = synth_mult ((t - 1) >> m, cost_limit - cost);\n-\n-      cost += alg_in->cost;\n-      if (cost < best_alg->cost)\n+      if (m >= 0)\n \t{\n-\t  struct algorithm *x;\n-\t  x = alg_in, alg_in = best_alg, best_alg = x;\n-\t  best_alg->log[best_alg->ops] = m;\n-\t  best_alg->op[best_alg->ops++] = alg_add_t2_m;\n-\t  best_alg->cost = cost_limit = cost;\n+\t  cost = shiftadd_cost[m];\n+\t  *alg_in = synth_mult ((t - 1) >> m, cost_limit - cost);\n+\n+\t  cost += alg_in->cost;\n+\t  if (cost < best_alg->cost)\n+\t    {\n+\t      struct algorithm *x;\n+\t      x = alg_in, alg_in = best_alg, best_alg = x;\n+\t      best_alg->log[best_alg->ops] = m;\n+\t      best_alg->op[best_alg->ops++] = alg_add_t2_m;\n+\t      best_alg->cost = cost_limit = cost;\n+\t    }\n \t}\n \n       q = t + 1;\n       q = q & -q;\n       m = exact_log2 (q);\n-      cost = shiftsub_cost[m];\n-      *alg_in = synth_mult ((t + 1) >> m, cost_limit - cost);\n-\n-      cost += alg_in->cost;\n-      if (cost < best_alg->cost)\n+      if (m >= 0)\n \t{\n-\t  struct algorithm *x;\n-\t  x = alg_in, alg_in = best_alg, best_alg = x;\n-\t  best_alg->log[best_alg->ops] = m;\n-\t  best_alg->op[best_alg->ops++] = alg_sub_t2_m;\n-\t  best_alg->cost = cost_limit = cost;\n+\t  cost = shiftsub_cost[m];\n+\t  *alg_in = synth_mult ((t + 1) >> m, cost_limit - cost);\n+\n+\t  cost += alg_in->cost;\n+\t  if (cost < best_alg->cost)\n+\t    {\n+\t      struct algorithm *x;\n+\t      x = alg_in, alg_in = best_alg, best_alg = x;\n+\t      best_alg->log[best_alg->ops] = m;\n+\t      best_alg->op[best_alg->ops++] = alg_sub_t2_m;\n+\t      best_alg->cost = cost_limit = cost;\n+\t    }\n \t}\n     }\n \n@@ -2064,7 +2070,7 @@ expand_mult (mode, op0, op1, target, unsignedp)\n \t\t\t    - negate_cost);\n \n       if (neg_alg.cost + negate_cost < alg.cost)\n-\talg = neg_alg, negate = 1, val = - val;\n+\talg = neg_alg, negate = 1;\n \n       if (alg.cost < mult_cost)\n \t{"}]}