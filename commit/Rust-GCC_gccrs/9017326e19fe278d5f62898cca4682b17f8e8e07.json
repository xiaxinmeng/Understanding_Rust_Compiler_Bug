{"sha": "9017326e19fe278d5f62898cca4682b17f8e8e07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAxNzMyNmUxOWZlMjc4ZDVmNjI4OThjY2E0NjgyYjE3ZjhlOGUwNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-12T16:35:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-12T18:46:16Z"}, "message": "libstdc++: Add additional overload of std::lerp [PR101870]\n\nThe [cmath.syn] p1 wording about additional overloads sufficient to\nhandle any arithmetic types also applies to std::lerp. This adds a new\noverload of std::lerp that does the required promotions to support\narguments of arbitrary arithmetic types.\n\nA new __promoted_t alias template is added, which the C++17 function\ntemplates std::hypot and std::lerp can use to avoid instantiating the\n__promote_3 class template.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/101870\n\t* include/c_global/cmath (hypot): Use __promoted_t.\n\t(lerp): Add new overload accepting any arithmetic types.\n\t* include/ext/type_traits.h (__promoted_t): New alias template.\n\t* testsuite/26_numerics/lerp.cc: Moved to...\n\t* testsuite/26_numerics/lerp/1.cc: ...here.\n\t* testsuite/26_numerics/lerp/constexpr.cc: New test.\n\t* testsuite/26_numerics/lerp/version.cc: New test.", "tree": {"sha": "4d52aa17bdb30c2ffe9889dd75668bd0287d1752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d52aa17bdb30c2ffe9889dd75668bd0287d1752"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9017326e19fe278d5f62898cca4682b17f8e8e07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9017326e19fe278d5f62898cca4682b17f8e8e07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9017326e19fe278d5f62898cca4682b17f8e8e07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9017326e19fe278d5f62898cca4682b17f8e8e07/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1c0e8599aa6ff5550dc748679e13c1eb492ee2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c0e8599aa6ff5550dc748679e13c1eb492ee2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c0e8599aa6ff5550dc748679e13c1eb492ee2c"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "3233228fdee0144821018e3d5fefae0f6506be41", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9017326e19fe278d5f62898cca4682b17f8e8e07/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9017326e19fe278d5f62898cca4682b17f8e8e07/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=9017326e19fe278d5f62898cca4682b17f8e8e07", "patch": "@@ -1844,7 +1844,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif // _GLIBCXX_USE_C99_MATH_TR1\n #endif // C++11\n \n-#if __cplusplus > 201402L\n+#if __cplusplus >= 201703L\n \n   // [c.math.hypot3], three-dimensional hypotenuse\n #define __cpp_lib_hypot 201603\n@@ -1877,15 +1877,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return std::__hypot3<long double>(__x, __y, __z); }\n \n   template<typename _Tp, typename _Up, typename _Vp>\n-    typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type\n+    __gnu_cxx::__promoted_t<_Tp, _Up, _Vp>\n     hypot(_Tp __x, _Up __y, _Vp __z)\n     {\n-      using __type = typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type;\n+      using __type = __gnu_cxx::__promoted_t<_Tp, _Up, _Vp>;\n       return std::__hypot3<__type>(__x, __y, __z);\n     }\n #endif // C++17\n \n-#if __cplusplus > 201703L\n+#if __cplusplus >= 202002L\n   // linear interpolation\n # define __cpp_lib_interpolate 201902L\n \n@@ -1918,6 +1918,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   constexpr long double\n   lerp(long double __a, long double __b, long double __t) noexcept\n   { return std::__lerp(__a, __b, __t); }\n+\n+  template<typename _Tp, typename _Up, typename _Vp>\n+    constexpr __gnu_cxx::__promoted_t<_Tp, _Up, _Vp>\n+    lerp(_Tp __x, _Up __y, _Vp __z) noexcept\n+    {\n+      using __type = __gnu_cxx::__promoted_t<_Tp, _Up, _Vp>;\n+      return std::__lerp<__type>(__x, __y, __z);\n+    }\n #endif // C++20\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "065edb4e9a5b87d72d69e03f41c2f5dd11772c1e", "filename": "libstdc++-v3/include/ext/type_traits.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9017326e19fe278d5f62898cca4682b17f8e8e07/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9017326e19fe278d5f62898cca4682b17f8e8e07/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h?ref=9017326e19fe278d5f62898cca4682b17f8e8e07", "patch": "@@ -163,7 +163,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return true; }\n #endif\n \n-  // For complex and cmath\n+  // For arithmetic promotions in <complex> and <cmath>\n+\n   template<typename _Tp, bool = std::__is_integer<_Tp>::__value>\n     struct __promote\n     { typedef double __type; };\n@@ -187,6 +188,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __promote<float>\n     { typedef float __type; };\n \n+#if __cpp_fold_expressions\n+  template<typename... _Tp>\n+    using __promoted_t = decltype((typename __promote<_Tp>::__type(0) + ...));\n+#endif\n+\n   template<typename _Tp, typename _Up,\n            typename _Tp2 = typename __promote<_Tp>::__type,\n            typename _Up2 = typename __promote<_Up>::__type>"}, {"sha": "d74b745abb920587e797e147f766198157b36f76", "filename": "libstdc++-v3/testsuite/26_numerics/lerp/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9017326e19fe278d5f62898cca4682b17f8e8e07/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flerp%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9017326e19fe278d5f62898cca4682b17f8e8e07/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flerp%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flerp%2F1.cc?ref=9017326e19fe278d5f62898cca4682b17f8e8e07", "previous_filename": "libstdc++-v3/testsuite/26_numerics/lerp.cc"}, {"sha": "f1ab42b5a42e696a43eb6c571397e1df36077256", "filename": "libstdc++-v3/testsuite/26_numerics/lerp/constexpr.cc", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9017326e19fe278d5f62898cca4682b17f8e8e07/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flerp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9017326e19fe278d5f62898cca4682b17f8e8e07/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flerp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flerp%2Fconstexpr.cc?ref=9017326e19fe278d5f62898cca4682b17f8e8e07", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <cmath>\n+\n+// Fails template argument deduction unless both arguments are the same type.\n+template<typename T>\n+constexpr bool\n+eq(T result, T expected) { return result == expected; }\n+\n+static_assert( eq( std::lerp(-10.0, 10.0, 0.25), -5.0 ) );\n+static_assert( eq( std::lerp(2.0f, 2.0f, 200.0f), 2.0f ) );\n+static_assert( eq( std::lerp(2.0L, 4.0L, 200.0L), 402.0L ) );\n+// at least one type is long double, so result is long double\n+static_assert( eq( std::lerp(2.0L, 4.0f, -20.0), -38.0L ) );\n+// at least one type is double, so result is double:\n+static_assert( eq( std::lerp(-8.0f, 10.0, 0.5f), 1.0 ) );\n+// int promotes to double, so result is double\n+static_assert( eq( std::lerp(0, 1, 0), 0.0 ) );\n+// int promotes to double, so result is double\n+static_assert( eq( std::lerp(2.0f, -10.0f, 1), -10.0 ) );"}, {"sha": "3ccb032bc67c8ae23c1a3ea52896fbce9b052eb3", "filename": "libstdc++-v3/testsuite/26_numerics/lerp/version.cc", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9017326e19fe278d5f62898cca4682b17f8e8e07/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flerp%2Fversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9017326e19fe278d5f62898cca4682b17f8e8e07/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flerp%2Fversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flerp%2Fversion.cc?ref=9017326e19fe278d5f62898cca4682b17f8e8e07", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do preprocess { target c++2a } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_interpolate\n+# error \"Feature-test macro for midpoint and lerp missing in <version>\"\n+#elif __cpp_lib_interpolate != 201902L\n+# error \"Feature-test macro for midpoint and lerp has wrong value in <version>\"\n+#endif"}]}