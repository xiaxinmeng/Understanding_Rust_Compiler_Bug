{"sha": "ae5a77fa960564c8a5b2a00c22b38d954aecddb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1YTc3ZmE5NjA1NjRjOGE1YjJhMDBjMjJiMzhkOTU0YWVjZGRiOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-01-18T10:27:10Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-01-18T10:27:10Z"}, "message": "re PR ada/69219 (error on nested subprograms with Inline_Always and Intrinsic)\n\n\tPR ada/69219\n\t* gcc-interface/trans.c (check_inlining_for_nested_subprog): Consider\n\tthe parent function instead of the current function in order to issue\n\tthe warning or the error.  Add guard for ignored functions.\n\nFrom-SVN: r232498", "tree": {"sha": "5486d174dcc6cd9fdc4fe4ff7c111e83870f9c3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5486d174dcc6cd9fdc4fe4ff7c111e83870f9c3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae5a77fa960564c8a5b2a00c22b38d954aecddb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5a77fa960564c8a5b2a00c22b38d954aecddb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5a77fa960564c8a5b2a00c22b38d954aecddb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5a77fa960564c8a5b2a00c22b38d954aecddb8/comments", "author": null, "committer": null, "parents": [{"sha": "11e57fc6e53d1072c1da6e3e661716f47fa5d859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e57fc6e53d1072c1da6e3e661716f47fa5d859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11e57fc6e53d1072c1da6e3e661716f47fa5d859"}], "stats": {"total": 63, "additions": 50, "deletions": 13}, "files": [{"sha": "01025b2cca79fcdceac72a6e18bfbcad7fadee87", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5a77fa960564c8a5b2a00c22b38d954aecddb8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5a77fa960564c8a5b2a00c22b38d954aecddb8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ae5a77fa960564c8a5b2a00c22b38d954aecddb8", "patch": "@@ -1,3 +1,10 @@\n+2016-01-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/69219\n+\t* gcc-interface/trans.c (check_inlining_for_nested_subprog): Consider\n+\tthe parent function instead of the current function in order to issue\n+\tthe warning or the error.  Add guard for ignored functions.\n+\n 2016-01-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* adaint.c (__gnat_killprocesstree): Avoid -Wparentheses warning."}, {"sha": "8f8778e7a35c0f66bb160aef6d01bccd1fdf2200", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5a77fa960564c8a5b2a00c22b38d954aecddb8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5a77fa960564c8a5b2a00c22b38d954aecddb8/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=ae5a77fa960564c8a5b2a00c22b38d954aecddb8", "patch": "@@ -1487,32 +1487,35 @@ Pragma_to_gnu (Node_Id gnat_node)\n }\n \f\n \n-/* Check the inlining status of nested function FNDECL in the current context.\n+/* Check the inline status of nested function FNDECL wrt its parent function.\n \n    If a non-inline nested function is referenced from an inline external\n    function, we cannot honor both requests at the same time without cloning\n    the nested function in the current unit since it is private to its unit.\n    We could inline it as well but it's probably better to err on the side\n    of too little inlining.\n \n-   This must be invoked only on nested functions present in the source code\n+   This must be done only on nested functions present in the source code\n    and not on nested functions generated by the compiler, e.g. finalizers,\n-   because they are not marked inline and we don't want them to block the\n-   inlining of the parent function.  */\n+   because they may be not marked inline and we don't want them to block\n+   the inlining of the parent function.  */\n \n static void\n check_inlining_for_nested_subprog (tree fndecl)\n {\n-  if (!DECL_DECLARED_INLINE_P (fndecl)\n-      && current_function_decl\n-      && DECL_EXTERNAL (current_function_decl)\n-      && DECL_DECLARED_INLINE_P (current_function_decl))\n+  if (DECL_IGNORED_P (current_function_decl) || DECL_IGNORED_P (fndecl))\n+    return;\n+\n+  if (DECL_DECLARED_INLINE_P (fndecl))\n+    return;\n+\n+  tree parent_decl = decl_function_context (fndecl);\n+  if (DECL_EXTERNAL (parent_decl) && DECL_DECLARED_INLINE_P (parent_decl))\n     {\n       const location_t loc1 = DECL_SOURCE_LOCATION (fndecl);\n-      const location_t loc2 = DECL_SOURCE_LOCATION (current_function_decl);\n+      const location_t loc2 = DECL_SOURCE_LOCATION (parent_decl);\n \n-      if (lookup_attribute (\"always_inline\",\n-\t\t\t    DECL_ATTRIBUTES (current_function_decl)))\n+      if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (parent_decl)))\n \t{\n \t  error_at (loc1, \"subprogram %q+F not marked Inline_Always\", fndecl);\n \t  error_at (loc2, \"parent subprogram cannot be inlined\");\n@@ -1524,8 +1527,8 @@ check_inlining_for_nested_subprog (tree fndecl)\n \t  warning_at (loc2, OPT_Winline, \"parent subprogram cannot be inlined\");\n \t}\n \n-      DECL_DECLARED_INLINE_P (current_function_decl) = 0;\n-      DECL_UNINLINABLE (current_function_decl) = 1;\n+      DECL_DECLARED_INLINE_P (parent_decl) = 0;\n+      DECL_UNINLINABLE (parent_decl) = 1;\n     }\n }\n \f"}, {"sha": "7d93a493f5eeac419ef1ab097d9d038fd1ea85ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5a77fa960564c8a5b2a00c22b38d954aecddb8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5a77fa960564c8a5b2a00c22b38d954aecddb8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae5a77fa960564c8a5b2a00c22b38d954aecddb8", "patch": "@@ -1,3 +1,7 @@\n+2016-01-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/inline12.adb: New test.\n+\n 2016-01-18  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/66797"}, {"sha": "e73f3c1aeb603a2fcde616283b6f6091dc6a25f1", "filename": "gcc/testsuite/gnat.dg/inline12.adb", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5a77fa960564c8a5b2a00c22b38d954aecddb8/gcc%2Ftestsuite%2Fgnat.dg%2Finline12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5a77fa960564c8a5b2a00c22b38d954aecddb8/gcc%2Ftestsuite%2Fgnat.dg%2Finline12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finline12.adb?ref=ae5a77fa960564c8a5b2a00c22b38d954aecddb8", "patch": "@@ -0,0 +1,23 @@\n+-- PR ada/69219\n+-- Testcae by yuta tomino <demoonlit@panathenaia.halfmoon.jp> */\n+\n+-- { dg-do compile }\n+\n+procedure Inline12 is\n+\n+   procedure NI;\n+\n+   procedure IA;\n+   pragma Convention (Intrinsic, IA);\n+   pragma Inline_Always (IA);\n+\n+   procedure IA is\n+   begin\n+      NI;\n+   end;\n+\n+   procedure NI is null;\n+\n+begin\n+  IA;\n+end;"}]}