{"sha": "6c57023b0cdc7fccc7db3963f847dbef53d43de8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM1NzAyM2IwY2RjN2ZjY2M3ZGIzOTYzZjg0N2RiZWY1M2Q0M2RlOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-21T11:53:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-21T11:53:33Z"}, "message": "[multiple changes]\n\n2011-12-21  Gary Dismukes  <dismukes@adacore.com>\n\n\t* gnat_ugn.texi: Minor reformatting.\n\n2011-12-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch5.adb (Expand_Iterator_Loop): The cursor operation\n\tHas_Element is the formal of Iterator_Interfaces, and within\n\tthe instantion of this package it is a renaming of some local\n\tfunction with an unrelated name. Retrieve the operation from\n\tthe instance itself, not from the container package.\n\n2011-12-21  Vincent Pucci  <pucci@adacore.com>\n\n\t* exp_ch6.adb (Expand_Call): Expand_Put_Call_With_Dimension_String\n\treplaced by Expand_Put_Call_With_Dimension_Symbol\n\t* sem_ch12.adb (Analyze_Package_Instantiation): New check for\n\tSystem.Dim_Float_IO and System.Dim_Integer_IO instantiation.\n\t* sem_ch3.adb (Analyze_Declarations): Removed\n\tRemove_Dimension_In_Declaration call.\n\t* sem_dim.adb: Update comments. Redefine the\n\trepresentation of a Rational. Propagate all changes involving\n\tdata structures and types throughout the pakage. Output the\n\tdimension aggregates for each error messages.\n\t(\"/\"): Rational constructor \"/\" removed for Whole operands.\n\t(\"/\"): New rational operation \"/\" for Rational operands.\n\t(\"*\"): Operation \"*\" between Rational and Int removed.\n\t(\"abs\"): New unary operator \"abs\" for Rational.\n\t(Analyze_Aspect_Dimension_System): Reorganized.\n\t(Analyze_Dimension_Identifier): Removed.\n\t(Copy_Dimensions): Removed.\n\t(Create_Rational_From_Expr): New Boolean parameter.\n\t(Dimensions_Msg_Of): New routine. Return\n\ta string with the dimensions of the parameter.\n\t(From_Dimension_To_String_Of_Symbols): Renaming of\n\tFrom_Dimension_To_String_Id.\n\t* sem_dim.ads: Update comments.\n\t(Is_Dim_IO_Package_Instantiation): New routine.\n\t(Remove_Dimension_In_Declaration): Removed.\n\t* sem_res.adb (Resolve_Op_Expon): Reorganized calls of\n\tEval_Op_Expon_For_Dimensioned_Type and Eval_Op_Expon.\n\t* s-diflio.ads, s-diinio.ads: Update comments.\n\nFrom-SVN: r182575", "tree": {"sha": "9ec76b82be58b48862686ea14e152c094cd33dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ec76b82be58b48862686ea14e152c094cd33dea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c57023b0cdc7fccc7db3963f847dbef53d43de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c57023b0cdc7fccc7db3963f847dbef53d43de8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c57023b0cdc7fccc7db3963f847dbef53d43de8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c57023b0cdc7fccc7db3963f847dbef53d43de8/comments", "author": null, "committer": null, "parents": [{"sha": "26cd9add744f5649af087552808b388c3109b53a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26cd9add744f5649af087552808b388c3109b53a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26cd9add744f5649af087552808b388c3109b53a"}], "stats": {"total": 2282, "additions": 1219, "deletions": 1063}, "files": [{"sha": "3850fa6a96603281ad40af0bfa4bbfcd2b22fcb8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6c57023b0cdc7fccc7db3963f847dbef53d43de8", "patch": "@@ -1,3 +1,46 @@\n+2011-12-21  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* gnat_ugn.texi: Minor reformatting.\n+\n+2011-12-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_Iterator_Loop): The cursor operation\n+\tHas_Element is the formal of Iterator_Interfaces, and within\n+\tthe instantion of this package it is a renaming of some local\n+\tfunction with an unrelated name. Retrieve the operation from\n+\tthe instance itself, not from the container package.\n+\n+2011-12-21  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call): Expand_Put_Call_With_Dimension_String\n+\treplaced by Expand_Put_Call_With_Dimension_Symbol\n+\t* sem_ch12.adb (Analyze_Package_Instantiation): New check for\n+\tSystem.Dim_Float_IO and System.Dim_Integer_IO instantiation.\n+\t* sem_ch3.adb (Analyze_Declarations): Removed\n+\tRemove_Dimension_In_Declaration call.\n+\t* sem_dim.adb: Update comments. Redefine the\n+\trepresentation of a Rational. Propagate all changes involving\n+\tdata structures and types throughout the pakage. Output the\n+\tdimension aggregates for each error messages.\n+\t(\"/\"): Rational constructor \"/\" removed for Whole operands.\n+\t(\"/\"): New rational operation \"/\" for Rational operands.\n+\t(\"*\"): Operation \"*\" between Rational and Int removed.\n+\t(\"abs\"): New unary operator \"abs\" for Rational.\n+\t(Analyze_Aspect_Dimension_System): Reorganized.\n+\t(Analyze_Dimension_Identifier): Removed.\n+\t(Copy_Dimensions): Removed.\n+\t(Create_Rational_From_Expr): New Boolean parameter.\n+\t(Dimensions_Msg_Of): New routine. Return\n+\ta string with the dimensions of the parameter.\n+\t(From_Dimension_To_String_Of_Symbols): Renaming of\n+\tFrom_Dimension_To_String_Id.\n+\t* sem_dim.ads: Update comments.\n+\t(Is_Dim_IO_Package_Instantiation): New routine.\n+\t(Remove_Dimension_In_Declaration): Removed.\n+\t* sem_res.adb (Resolve_Op_Expon): Reorganized calls of\n+\tEval_Op_Expon_For_Dimensioned_Type and Eval_Op_Expon.\n+\t* s-diflio.ads, s-diinio.ads: Update comments.\n+\n 2011-12-21  Pascal Obry  <obry@adacore.com>\n \n \t* prj-attr.adb, snames.ads-tmpl: Add Library_Standalone,"}, {"sha": "a09eb08c6ce88cae8a7b0a05dbcc38cf76bdd9c8", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=6c57023b0cdc7fccc7db3963f847dbef53d43de8", "patch": "@@ -3049,10 +3049,6 @@ package body Exp_Ch5 is\n \n             Iter_Type := Etype (Name (I_Spec));\n \n-            if Is_Iterator (Iter_Type) then\n-               Pack := Scope (Pack);\n-            end if;\n-\n             --  The \"of\" case uses an internally generated cursor whose type\n             --  is found in the container package. The domain of iteration\n             --  is expanded into a call to the default Iterator function, but\n@@ -3074,41 +3070,41 @@ package body Exp_Ch5 is\n                begin\n                   Cursor := Make_Temporary (Loc, 'I');\n \n-                  if Is_Iterator (Iter_Type) then\n-                     null;\n-\n-                  else\n-                     Iter_Type := Etype (Default_Iter);\n+                  --  For an container element iterator, the iterator type\n+                  --  is obtained from the corresponding aspect.\n \n-                     --  Rewrite domain of iteration as a call to the default\n-                     --  iterator for the container type. If the container is\n-                     --  a derived type and the aspect is inherited, convert\n-                     --  container to parent type. The Cursor type is also\n-                     --  inherited from the scope of the parent.\n+                  Iter_Type := Etype (Default_Iter);\n+                  Pack := Scope (Iter_Type);\n \n-                     if Base_Type (Etype (Container)) =\n-                        Base_Type (Etype (First_Formal (Default_Iter)))\n-                     then\n-                        Container_Arg := New_Copy_Tree (Container);\n+                  --  Rewrite domain of iteration as a call to the default\n+                  --  iterator for the container type. If the container is\n+                  --  a derived type and the aspect is inherited, convert\n+                  --  container to parent type. The Cursor type is also\n+                  --  inherited from the scope of the parent.\n \n-                     else\n-                        Container_Arg :=\n-                          Make_Type_Conversion (Loc,\n-                            Subtype_Mark =>\n-                              New_Occurrence_Of\n-                                (Etype (First_Formal (Default_Iter)), Loc),\n-                            Expression => New_Copy_Tree (Container));\n-                     end if;\n+                  if Base_Type (Etype (Container)) =\n+                     Base_Type (Etype (First_Formal (Default_Iter)))\n+                  then\n+                     Container_Arg := New_Copy_Tree (Container);\n \n-                     Rewrite (Name (I_Spec),\n-                       Make_Function_Call (Loc,\n-                         Name => New_Occurrence_Of (Default_Iter, Loc),\n-                         Parameter_Associations =>\n-                           New_List (Container_Arg)));\n-                     Analyze_And_Resolve (Name (I_Spec));\n+                  else\n+                     Container_Arg :=\n+                       Make_Type_Conversion (Loc,\n+                         Subtype_Mark =>\n+                           New_Occurrence_Of\n+                             (Etype (First_Formal (Default_Iter)), Loc),\n+                         Expression => New_Copy_Tree (Container));\n                   end if;\n \n-                  --  Find cursor type in proper container package.\n+                  Rewrite (Name (I_Spec),\n+                    Make_Function_Call (Loc,\n+                      Name => New_Occurrence_Of (Default_Iter, Loc),\n+                      Parameter_Associations =>\n+                        New_List (Container_Arg)));\n+                  Analyze_And_Resolve (Name (I_Spec));\n+\n+                  --  Find cursor type in proper iterator package, which\n+                  --  is an instantiation of Iterator_Interfaces.\n \n                   Ent := First_Entity (Pack);\n                   while Present (Ent) loop\n@@ -3145,7 +3141,7 @@ package body Exp_Ch5 is\n \n                      --  Generate:\n                      --    declare\n-                     --       Id : Element_Type := Pack.Element (curosr);\n+                     --       Id : Element_Type := Element (curosr);\n                      --    begin\n                      --       <original loop statements>\n                      --    end;\n@@ -3222,6 +3218,8 @@ package body Exp_Ch5 is\n             --    while Iterator.Has_Element loop\n             --       <Stats>\n             --    end loop;\n+            --\n+            --   Has_Element is the second actual in the iterator package\n \n             New_Loop :=\n               Make_Loop_Statement (Loc,\n@@ -3230,16 +3228,18 @@ package body Exp_Ch5 is\n                     Condition =>\n                       Make_Function_Call (Loc,\n                         Name                   =>\n-                          Make_Selected_Component (Loc,\n-                           Prefix => New_Occurrence_Of (Pack, Loc),\n-                           Selector_Name =>\n-                             Make_Identifier (Loc, Name_Has_Element)),\n-\n+                          New_Occurrence_Of (\n+                           Next_Entity (First_Entity (Pack)), Loc),\n                         Parameter_Associations =>\n                           New_List (\n                             New_Reference_To (Cursor, Loc)))),\n+\n                 Statements => Stats,\n                 End_Label  => Empty);\n+            --                 Make_Selected_Component (Loc,\n+            --       Prefix => New_Reference_To (Cursor, Loc),\n+            --          Selector_Name =>\n+            --         Make_Identifier (Loc, Name_Has_Element))),\n \n             --  Create the declarations for Iterator and cursor and insert then\n             --  before the source loop. Given that the domain of iteration is\n@@ -3248,7 +3248,7 @@ package body Exp_Ch5 is\n             --  Generate:\n \n             --    I : Iterator_Type renames Container;\n-            --    C : Pack.Cursor_Type := Container.[First | Last];\n+            --    C : Cursor_Type := Container.[First | Last];\n \n             Insert_Action (N,\n               Make_Object_Renaming_Declaration (Loc,"}, {"sha": "227dcd94ebe37125b046142db8712034c4b7f0dc", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=6c57023b0cdc7fccc7db3963f847dbef53d43de8", "patch": "@@ -2111,7 +2111,7 @@ package body Exp_Ch6 is\n         and then Nkind (Call_Node) = N_Procedure_Call_Statement\n         and then Present (Parameter_Associations (Call_Node))\n       then\n-         Expand_Put_Call_With_Dimension_String (Call_Node);\n+         Expand_Put_Call_With_Dimension_Symbol (Call_Node);\n       end if;\n \n       --  Remove the dimensions of every parameters in call"}, {"sha": "16b9acc9069edd925bbcd2821f5818c62d4e95f5", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=6c57023b0cdc7fccc7db3963f847dbef53d43de8", "patch": "@@ -16360,12 +16360,12 @@ imported from Ada units outside of the library. If other units are imported,\n the binding phase will fail.\n \n @noindent\n-It is also possible to build a fully standalone library where not only\n+It is also possible to build a fully stand-alone library where not only\n the code to elaborate and finalize the library is embedded but also\n ensuring that the library is linked only against static\n-libraries. So a fully standalone library only depends on system\n+libraries. So a fully stand-alone library only depends on system\n libraries, all other code, including the GNAT runtime, is embedded. To\n-build a fully standalone library the attribute\n+build a fully stand-alone library the attribute\n @code{Library_Standalone} must be set to @code{full}:\n \n @smallexample @c projectfile\n@@ -16379,7 +16379,7 @@ build a fully standalone library the attribute\n \n @noindent\n The default value for this attribute is @code{standard} in which case\n-a not fully standalone library is built.\n+a not fully stand-alone library is built.\n \n The attribute @code{Library_Src_Dir} may be specified for a\n Stand-Alone Library. @code{Library_Src_Dir} is a simple attribute that has a\n@@ -18530,7 +18530,7 @@ g++ -c -fdump-ada-spec -DXLIB_ILLEGAL_ACCESS -C /usr/include/X11/Xlib.h\n The above will generate more complete bindings than a straight call without\n the @option{-DXLIB_ILLEGAL_ACCESS} switch.\n \n-In other cases, it is not possible to parse a header file in a stand alone\n+In other cases, it is not possible to parse a header file in a stand-alone\n manner, because other include files need to be included first. In this\n case, the solution is to create a small header file including the needed\n @code{#include} and possible @code{#define} directives. For example, to"}, {"sha": "0a952decb06a908050c3e844ed285772e914fd8e", "filename": "gcc/ada/s-diflio.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fs-diflio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fs-diflio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-diflio.ads?ref=6c57023b0cdc7fccc7db3963f847dbef53d43de8", "patch": "@@ -29,9 +29,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Note that this package should only be instantiated with a float dimensioned\n---  type. Shouldn't this be checked???\n-\n --  This package is a generic package that provides IO facilities for float\n --  dimensioned types.\n "}, {"sha": "098b88072809c2ff92dde0c48efd233e6a41361b", "filename": "gcc/ada/s-diinio.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fs-diinio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fs-diinio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-diinio.ads?ref=6c57023b0cdc7fccc7db3963f847dbef53d43de8", "patch": "@@ -29,9 +29,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Note that this package should only be instantiated with an integer\n---  dimensioned type. Shouldn't this be checked ???\n-\n --  This package is a generic package that provides IO facilities for integer\n --  dimensioned types.\n "}, {"sha": "c83c101238381ca69022ff0c0dc1ca4728cf5520", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=6c57023b0cdc7fccc7db3963f847dbef53d43de8", "patch": "@@ -54,6 +54,7 @@ with Sem_Ch7;  use Sem_Ch7;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Ch10; use Sem_Ch10;\n with Sem_Ch13; use Sem_Ch13;\n+with Sem_Dim;  use Sem_Dim;\n with Sem_Disp; use Sem_Disp;\n with Sem_Elab; use Sem_Elab;\n with Sem_Elim; use Sem_Elim;\n@@ -3786,6 +3787,23 @@ package body Sem_Ch12 is\n \n       Style_Check := Save_Style_Check;\n \n+      --  Check that if N is an instantiation of System.Dim_Float_IO or\n+      --  System.Dim_Integer_IO, the formal type has a dimension system.\n+\n+      if Nkind (N) = N_Package_Instantiation\n+        and then Is_Dim_IO_Package_Instantiation (N)\n+      then\n+         declare\n+            Assoc : constant Node_Id := First (Generic_Associations (N));\n+\n+         begin\n+            if not Has_Dimension_System\n+                     (Etype (Explicit_Generic_Actual_Parameter (Assoc))) then\n+               Error_Msg_N (\"type with a dimension system expected\", Assoc);\n+            end if;\n+         end;\n+      end if;\n+\n    <<Leave>>\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, Act_Decl_Id);"}, {"sha": "69c5ebfff3b5255c290664a4bcbb800e349f4207", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=6c57023b0cdc7fccc7db3963f847dbef53d43de8", "patch": "@@ -2092,11 +2092,6 @@ package body Sem_Ch3 is\n          --  Complete analysis of declaration\n \n          Analyze (D);\n-\n-         --  Removal of the dimension in the expression for object & component\n-         --  declaration.\n-\n-         Remove_Dimension_In_Declaration (D);\n          Next_Node := Next (D);\n \n          if No (Freeze_From) then"}, {"sha": "18fbbf685156da6042d7871429ecb430f351adf7", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 1086, "deletions": 980, "changes": 2066, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=6c57023b0cdc7fccc7db3963f847dbef53d43de8"}, {"sha": "ddee3da015a85df36a59f9ca5dfe108cdba6165b", "filename": "gcc/ada/sem_dim.ads", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fsem_dim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fsem_dim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.ads?ref=6c57023b0cdc7fccc7db3963f847dbef53d43de8", "patch": "@@ -95,19 +95,23 @@ package Sem_Dim is\n \n    procedure Analyze_Aspect_Dimension\n      (N    : Node_Id;\n-      Id   : Node_Id;\n+      Id   : Entity_Id;\n       Aggr : Node_Id);\n    --  Analyze the contents of aspect Dimension. Associate the provided values\n    --  and quantifiers with the related context N.\n-   --  ??? comment on usage of formals needed\n+   --  Id is the corresponding Aspect_Id (Aspect_Dimension)\n+   --  Aggr is the corresponding expression for the aspect Dimension declared\n+   --  by the declaration of N.\n \n    procedure Analyze_Aspect_Dimension_System\n      (N    : Node_Id;\n-      Id   : Node_Id;\n-      Expr : Node_Id);\n+      Id   : Entity_Id;\n+      Aggr : Node_Id);\n    --  Analyze the contents of aspect Dimension_System. Extract the numerical\n    --  type, unit name and corresponding symbol from each indivitual dimension.\n-   --  ??? comment on usage of formals needed\n+   --  Id is the corresponding Aspect_Id (Aspect_Dimension_System)\n+   --  Aggr is the corresponding expression for the aspect Dimension_System\n+   --  declared by the declaration of N.\n \n    procedure Analyze_Dimension (N : Node_Id);\n    --  N may denote any of the following contexts:\n@@ -133,13 +137,15 @@ package Sem_Dim is\n    --  involved do not violate the rules of a system.\n \n    procedure Eval_Op_Expon_For_Dimensioned_Type\n-     (N     : Node_Id;\n-      B_Typ : Entity_Id);\n-   --  Evaluate the Expon operator for dimensioned type with rational exponent\n-   --  ??? the above doesn't explain the purpose of this routine. why is this\n-   --  procedure needed?\n-\n-   procedure Expand_Put_Call_With_Dimension_String (N : Node_Id);\n+     (N    : Node_Id;\n+      Btyp : Entity_Id);\n+   --  Evaluate the Expon operator for dimensioned type with rational exponent.\n+   --  Indeed the regular Eval_Op_Expon routine (see package Sem_Eval) is\n+   --  restricted to Integer exponent.\n+   --  This routine deals only with rational exponent which is not an integer\n+   --  if Btyp is a dimensioned type.\n+\n+   procedure Expand_Put_Call_With_Dimension_Symbol (N : Node_Id);\n    --  Determine whether N denotes a subprogram call to one of the routines\n    --  defined in System.Dim_Float_IO or System.Dim_Integer_IO and add an\n    --  extra actual to the call to represent the symbolic representation of\n@@ -148,12 +154,13 @@ package Sem_Dim is\n    function Has_Dimension_System (Typ : Entity_Id) return Boolean;\n    --  Return True if type Typ has aspect Dimension_System applied to it\n \n+   function Is_Dim_IO_Package_Instantiation (N : Node_Id) return Boolean;\n+   --  Return True if N is a package instantiation of System.Dim_Integer_IO or\n+   --  of System.Dim_Float_IO.\n+\n    procedure Remove_Dimension_In_Call (Call : Node_Id);\n    --  Remove the dimensions from all formal parameters of Call\n \n-   procedure Remove_Dimension_In_Declaration (Decl : Node_Id);\n-   --  Remove the dimensions from the expression of Decl\n-\n    procedure Remove_Dimension_In_Statement (Stmt : Node_Id);\n    --  Remove the dimensions associated with Stmt\n "}, {"sha": "f17248540682bbc0c85a4e2e303c64500bd77375", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c57023b0cdc7fccc7db3963f847dbef53d43de8/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=6c57023b0cdc7fccc7db3963f847dbef53d43de8", "patch": "@@ -8013,21 +8013,14 @@ package body Sem_Res is\n \n       Analyze_Dimension (N);\n \n-      --  Evaluate the exponentiation operator for dimensioned type with\n-      --  rational exponent.\n-\n       if Ada_Version >= Ada_2012 and then Has_Dimension_System (B_Typ) then\n-         Eval_Op_Expon_For_Dimensioned_Type (N, B_Typ);\n+         --  Evaluate the exponentiation operator for dimensioned type\n \n-         --  Skip the Eval_Op_Expon if the node has already been evaluated\n-\n-         if Nkind (N) = N_Type_Conversion then\n-            return;\n-         end if;\n+         Eval_Op_Expon_For_Dimensioned_Type (N, B_Typ);\n+      else\n+         Eval_Op_Expon (N);\n       end if;\n \n-      Eval_Op_Expon (N);\n-\n       --  Set overflow checking bit. Much cleverer code needed here eventually\n       --  and perhaps the Resolve routines should be separated for the various\n       --  arithmetic operations, since they will need different processing. ???"}]}