{"sha": "07933f7233603dafab21527c681a9e656c75435c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc5MzNmNzIzMzYwM2RhZmFiMjE1MjdjNjgxYTllNjU2Yzc1NDM1Yw==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@redhat.com", "date": "2002-01-07T08:52:56Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2002-01-07T08:52:56Z"}, "message": "i386.c: Update copyright.\n\n\n        * config/i386/i386.c: Update copyright.\n        (CHECK_STACK_LIMIT): Add parenthesis.\n        (AT_BP): Uppercase macro parameter.\n        (x86_64_int_parameter_registers): Constify.\n        (x86_64_int_return_registers): Likewise.\n        (ix86_compare_op0): Use rtx.\n        (construct_container): Constify INTREG parameter.\n        (function_arg): Use rtx.\n\nFrom-SVN: r48597", "tree": {"sha": "cb80f926915c407cb4d56a1df54c0216b526e9b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb80f926915c407cb4d56a1df54c0216b526e9b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07933f7233603dafab21527c681a9e656c75435c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07933f7233603dafab21527c681a9e656c75435c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07933f7233603dafab21527c681a9e656c75435c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07933f7233603dafab21527c681a9e656c75435c/comments", "author": null, "committer": null, "parents": [{"sha": "0b4d32c9641315d93eecacb138ba40e6d4d89ca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b4d32c9641315d93eecacb138ba40e6d4d89ca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b4d32c9641315d93eecacb138ba40e6d4d89ca8"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "09d1efeaa50d10fe24d51fd3a274636aa3851cca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07933f7233603dafab21527c681a9e656c75435c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07933f7233603dafab21527c681a9e656c75435c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07933f7233603dafab21527c681a9e656c75435c", "patch": "@@ -1,5 +1,14 @@\n 2002-01-07  Graham Stott  <grahams@redhat.com>\n \n+\t* config/i386/i386.c: Update copyright.\n+\t(CHECK_STACK_LIMIT): Add parenthesis.\n+\t(AT_BP): Uppercase macro parameter.\n+\t(x86_64_int_parameter_registers): Constify.\n+\t(x86_64_int_return_registers): Likewise.\n+\t(ix86_compare_op0): Use rtx.\n+\t(construct_container): Constify INTREG parameter.\n+\t(function_arg): Use rtx.\n+\n \t* diagnostic.h: Update copyright date.\n \t(output_buffer_state): Add parenthesis.\n \t(output_buffer_format_args): Likewise."}, {"sha": "91ccb8ce4005b2f4e6ce6af70da279a1e4188f95", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07933f7233603dafab21527c681a9e656c75435c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07933f7233603dafab21527c681a9e656c75435c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=07933f7233603dafab21527c681a9e656c75435c", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines used for code generation on IA-32.\n-   Copyright (C) 1988, 1992, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1992, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n+   2002 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -44,7 +44,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"target-def.h\"\n \n #ifndef CHECK_STACK_LIMIT\n-#define CHECK_STACK_LIMIT -1\n+#define CHECK_STACK_LIMIT (-1)\n #endif\n \n /* Processor costs (relative to an add) */\n@@ -401,7 +401,7 @@ const int x86_decompose_lea = m_PENT4;\n    the style used.  */\n static int use_fast_prologue_epilogue;\n \n-#define AT_BP(mode) (gen_rtx_MEM ((mode), hard_frame_pointer_rtx))\n+#define AT_BP(MODE) (gen_rtx_MEM ((MODE), hard_frame_pointer_rtx))\n \n static const char *const hi_reg_name[] = HI_REGISTER_NAMES; /* names for 16 bit regs */\n static const char *const qi_reg_name[] = QI_REGISTER_NAMES; /* names for 8 bit regs (low) */\n@@ -446,11 +446,11 @@ int const dbx_register_map[FIRST_PSEUDO_REGISTER] =\n   -1, -1, -1, -1, -1, -1, -1, -1,\t/* extended SSE registers */\n };\n \n-static int x86_64_int_parameter_registers[6] = {5 /*RDI*/, 4 /*RSI*/,\n+static int const x86_64_int_parameter_registers[6] = {5 /*RDI*/, 4 /*RSI*/,\n \t\t\t\t\t        1 /*RDX*/, 2 /*RCX*/,\n \t\t\t\t\t        FIRST_REX_INT_REG /*R8 */,\n \t\t\t\t\t        FIRST_REX_INT_REG + 1 /*R9 */};\n-static int x86_64_int_return_registers[4] = {0 /*RAX*/, 1 /*RDI*/, 5, 4};\n+static int const x86_64_int_return_registers[4] = {0 /*RAX*/, 1 /*RDI*/, 5, 4};\n \n /* The \"default\" register map used in 64bit mode.  */\n int const dbx64_register_map[FIRST_PSEUDO_REGISTER] =\n@@ -532,8 +532,8 @@ int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER] =\n /* Test and compare insns in i386.md store the information needed to\n    generate branch and scc insns here.  */\n \n-struct rtx_def *ix86_compare_op0 = NULL_RTX;\n-struct rtx_def *ix86_compare_op1 = NULL_RTX;\n+rtx ix86_compare_op0 = NULL_RTX;\n+rtx ix86_compare_op1 = NULL_RTX;\n \n #define MAX_386_STACK_LOCALS 3\n /* Size of the register save area.  */\n@@ -756,7 +756,7 @@ static int classify_argument PARAMS ((enum machine_mode, tree,\n static int examine_argument PARAMS ((enum machine_mode, tree, int, int *,\n \t\t\t\t     int *));\n static rtx construct_container PARAMS ((enum machine_mode, tree, int, int, int,\n-\t\t\t\t\tint *, int));\n+\t\t\t\t\tconst int *, int));\n static enum x86_64_reg_class merge_classes PARAMS ((enum x86_64_reg_class,\n \t\t\t\t\t\t    enum x86_64_reg_class));\n \f\n@@ -1868,7 +1868,8 @@ construct_container (mode, type, in_return, nintregs, nsseregs, intreg, sse_regn\n      tree type;\n      int in_return;\n      int nintregs, nsseregs;\n-     int *intreg, sse_regno;\n+     const int * intreg;\n+     int sse_regno;\n {\n   enum machine_mode tmpmode;\n   int bytes =\n@@ -2073,7 +2074,7 @@ function_arg_advance (cum, mode, type, named)\n    NAMED is nonzero if this argument is a named parameter\n     (otherwise it is an extra parameter matching an ellipsis).  */\n \n-struct rtx_def *\n+rtx\n function_arg (cum, mode, type, named)\n      CUMULATIVE_ARGS *cum;\t/* current arg information */\n      enum machine_mode mode;\t/* current arg mode */"}]}