{"sha": "4161493a3034388925048bf477bbb9238ff6643e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE2MTQ5M2EzMDM0Mzg4OTI1MDQ4YmY0NzdiYmI5MjM4ZmY2NjQzZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-07-17T17:21:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-07-17T17:21:10Z"}, "message": "compiler: connect the concrete type and the placeholder for circular types\n    \n    Previously, when creating the backend representation of a\n    circular type, we resolve the placeholder to a\n    circular_pointer_type. The backend doesn't know what the\n    concrete type is.\n    \n    This CL changes it to resolve the placeholder to the concrete\n    type instead, so the backend may have better knowledge of the\n    concrete type.\n    \n    Reviewed-on: https://go-review.googlesource.com/123738\n\nFrom-SVN: r262830", "tree": {"sha": "7b100106e84612bbb0de05a8e889dac1d7530319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b100106e84612bbb0de05a8e889dac1d7530319"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4161493a3034388925048bf477bbb9238ff6643e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4161493a3034388925048bf477bbb9238ff6643e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4161493a3034388925048bf477bbb9238ff6643e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4161493a3034388925048bf477bbb9238ff6643e/comments", "author": null, "committer": null, "parents": [{"sha": "5485812caf9865ec09ff5391e0794bbaffd20751", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5485812caf9865ec09ff5391e0794bbaffd20751", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5485812caf9865ec09ff5391e0794bbaffd20751"}], "stats": {"total": 29, "additions": 5, "deletions": 24}, "files": [{"sha": "f9d37e728e777677083fc42f8960ff849103fde6", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4161493a3034388925048bf477bbb9238ff6643e/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4161493a3034388925048bf477bbb9238ff6643e/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=4161493a3034388925048bf477bbb9238ff6643e", "patch": "@@ -1,4 +1,4 @@\n-db991403fc97854201b3f40492f4f6b9d471cabc\n+d6338c94e5574b63469c740159d064e89c6718bf\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "fa8c0ad1901af651806e67d0d1a6c70f52b64702", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4161493a3034388925048bf477bbb9238ff6643e/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4161493a3034388925048bf477bbb9238ff6643e/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=4161493a3034388925048bf477bbb9238ff6643e", "patch": "@@ -10786,15 +10786,10 @@ Named_type::do_get_backend(Gogo* gogo)\n       // Don't build a circular data structure.  GENERIC can't handle\n       // it.\n       if (this->seen_in_get_backend_)\n-\t{\n-\t  this->is_circular_ = true;\n-\t  return gogo->backend()->circular_pointer_type(bt, true);\n-\t}\n+        return gogo->backend()->circular_pointer_type(bt, true);\n       this->seen_in_get_backend_ = true;\n       bt1 = Type::get_named_base_btype(gogo, base);\n       this->seen_in_get_backend_ = false;\n-      if (this->is_circular_)\n-\tbt1 = gogo->backend()->circular_pointer_type(bt, true);\n       if (!gogo->backend()->set_placeholder_pointer_type(bt, bt1))\n \tbt = gogo->backend()->error_type();\n       return bt;\n@@ -10803,15 +10798,10 @@ Named_type::do_get_backend(Gogo* gogo)\n       // Don't build a circular data structure. GENERIC can't handle\n       // it.\n       if (this->seen_in_get_backend_)\n-\t{\n-\t  this->is_circular_ = true;\n-\t  return gogo->backend()->circular_pointer_type(bt, false);\n-\t}\n+        return gogo->backend()->circular_pointer_type(bt, false);\n       this->seen_in_get_backend_ = true;\n       bt1 = Type::get_named_base_btype(gogo, base);\n       this->seen_in_get_backend_ = false;\n-      if (this->is_circular_)\n-\tbt1 = gogo->backend()->circular_pointer_type(bt, false);\n       if (!gogo->backend()->set_placeholder_pointer_type(bt, bt1))\n \tbt = gogo->backend()->error_type();\n       return bt;"}, {"sha": "0f85c3a2b9b72c0d43f6f4008a05f1cbc27139a2", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4161493a3034388925048bf477bbb9238ff6643e/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4161493a3034388925048bf477bbb9238ff6643e/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=4161493a3034388925048bf477bbb9238ff6643e", "patch": "@@ -3243,8 +3243,8 @@ class Named_type : public Type\n       interface_method_tables_(NULL), pointer_interface_method_tables_(NULL),\n       location_(location), named_btype_(NULL), dependencies_(),\n       is_alias_(false), is_visible_(true), is_error_(false), in_heap_(true),\n-      is_placeholder_(false), is_converted_(false), is_circular_(false),\n-      is_verified_(false), seen_(false), seen_in_compare_is_identity_(false),\n+      is_placeholder_(false), is_converted_(false), is_verified_(false),\n+      seen_(false), seen_in_compare_is_identity_(false),\n       seen_in_get_backend_(false), seen_alias_(false)\n   { }\n \n@@ -3345,12 +3345,6 @@ class Named_type : public Type\n   is_valid() const\n   { return !this->is_error_; }\n \n-  // Whether this is a circular type: a pointer or function type that\n-  // refers to itself, which is not possible in C.\n-  bool\n-  is_circular() const\n-  { return this->is_circular_; }\n-\n   // Return the base type for this type.\n   Type*\n   named_base();\n@@ -3557,9 +3551,6 @@ class Named_type : public Type\n   // Whether this type has been converted to the backend\n   // representation.  Implies that is_placeholder_ is false.\n   bool is_converted_;\n-  // Whether this is a pointer or function type which refers to the\n-  // type itself.\n-  bool is_circular_;\n   // Whether this type has been verified.\n   bool is_verified_;\n   // In a recursive operation such as has_pointer, this flag is used"}]}