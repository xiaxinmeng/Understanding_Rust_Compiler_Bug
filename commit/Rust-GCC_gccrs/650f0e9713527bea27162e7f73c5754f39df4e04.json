{"sha": "650f0e9713527bea27162e7f73c5754f39df4e04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUwZjBlOTcxMzUyN2JlYTI3MTYyZTdmNzNjNTc1NGYzOWRmNGUwNA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-04-17T02:31:30Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-04-17T02:31:30Z"}, "message": "altivec.h (vec_ld): Add array variants.\n\n2002-04-17  Aldy Hernandez  <aldyh@redhat.com>\n\n        * config/rs6000/altivec.h (vec_ld): Add array variants.\n        (vec_lde): Same.\n        (vec_ldl): Same.\n\nFrom-SVN: r52400", "tree": {"sha": "4917663198719a989fb214c5fe03bc9f0a36a1f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4917663198719a989fb214c5fe03bc9f0a36a1f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/650f0e9713527bea27162e7f73c5754f39df4e04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650f0e9713527bea27162e7f73c5754f39df4e04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/650f0e9713527bea27162e7f73c5754f39df4e04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650f0e9713527bea27162e7f73c5754f39df4e04/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "71a0ab0c8c9f9c58a912c516515fc1ead5e1ca9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a0ab0c8c9f9c58a912c516515fc1ead5e1ca9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a0ab0c8c9f9c58a912c516515fc1ead5e1ca9d"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "8d8611b17a5fe2ef9570da16134b883e985d4855", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650f0e9713527bea27162e7f73c5754f39df4e04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650f0e9713527bea27162e7f73c5754f39df4e04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=650f0e9713527bea27162e7f73c5754f39df4e04", "patch": "@@ -1,3 +1,9 @@\n+2002-04-17  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * config/rs6000/altivec.h (vec_ld): Add array variants.\n+        (vec_lde): Same.\n+        (vec_ldl): Same.\n+\n 2002-04-17  Alan Matsuoka  <alanm@redhat.com>\n             Aldy Hernandez <aldyh@redhat.com>\n "}, {"sha": "2ba4c530b94a9ee8e98c3f3a66196b3b099cb337", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 71, "deletions": 3, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650f0e9713527bea27162e7f73c5754f39df4e04/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650f0e9713527bea27162e7f73c5754f39df4e04/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=650f0e9713527bea27162e7f73c5754f39df4e04", "patch": "@@ -4501,79 +4501,147 @@ __ch (__un_args_eq (vector float, (a1)), \\\n #define vec_ld(a, b) \\\n __ch (__un_args_eq (vector unsigned char *, (b)), \\\n       ((vector unsigned char) __builtin_altivec_lvx ((a), (b))), \\\n+__ch (__un_args_eq (vector unsigned char [], (b)), \\\n+      ((vector unsigned char) __builtin_altivec_lvx ((a), (b))), \\\n __ch (__un_args_eq (unsigned char *, (b)), \\\n       ((vector unsigned char) __builtin_altivec_lvx ((a), (b))), \\\n+__ch (__un_args_eq (unsigned char [], (b)), \\\n+      ((vector unsigned char) __builtin_altivec_lvx ((a), (b))), \\\n __ch (__un_args_eq (vector signed char *, (b)), \\\n       ((vector signed char) __builtin_altivec_lvx ((a), (b))), \\\n+__ch (__un_args_eq (vector signed char [], (b)), \\\n+      ((vector signed char) __builtin_altivec_lvx ((a), (b))), \\\n __ch (__un_args_eq (signed char *, (b)), \\\n       ((vector signed char) __builtin_altivec_lvx ((a), (b))), \\\n+__ch (__un_args_eq (signed char [], (b)), \\\n+      ((vector signed char) __builtin_altivec_lvx ((a), (b))), \\\n __ch (__un_args_eq (vector unsigned short *, (b)), \\\n       ((vector unsigned short) __builtin_altivec_lvx ((a), (b))), \\\n+__ch (__un_args_eq (vector unsigned short [], (b)), \\\n+      ((vector unsigned short) __builtin_altivec_lvx ((a), (b))), \\\n __ch (__un_args_eq (unsigned short *, (b)), \\\n       ((vector unsigned short) __builtin_altivec_lvx ((a), (b))), \\\n+__ch (__un_args_eq (unsigned short [], (b)), \\\n+      ((vector unsigned short) __builtin_altivec_lvx ((a), (b))), \\\n __ch (__un_args_eq (vector signed short *, (b)), \\\n       ((vector signed short) __builtin_altivec_lvx ((a), (b))), \\\n+__ch (__un_args_eq (vector signed short [], (b)), \\\n+      ((vector signed short) __builtin_altivec_lvx ((a), (b))), \\\n __ch (__un_args_eq (signed short *, (b)), \\\n       ((vector signed short) __builtin_altivec_lvx ((a), (b))), \\\n+__ch (__un_args_eq (signed short [], (b)), \\\n+      ((vector signed short) __builtin_altivec_lvx ((a), (b))), \\\n __ch (__un_args_eq (vector unsigned int *, (b)), \\\n       ((vector unsigned int) __builtin_altivec_lvx ((a), (b))), \\\n+__ch (__un_args_eq (vector unsigned int [], (b)), \\\n+      ((vector unsigned int) __builtin_altivec_lvx ((a), (b))), \\\n __ch (__un_args_eq (unsigned int *, (b)), \\\n       ((vector unsigned int) __builtin_altivec_lvx ((a), (b))), \\\n+__ch (__un_args_eq (unsigned int [], (b)), \\\n+      ((vector unsigned int) __builtin_altivec_lvx ((a), (b))), \\\n __ch (__un_args_eq (vector signed int *, (b)), \\\n       ((vector signed int) __builtin_altivec_lvx ((a), (b))), \\\n+__ch (__un_args_eq (vector signed int [], (b)), \\\n+      ((vector signed int) __builtin_altivec_lvx ((a), (b))), \\\n __ch (__un_args_eq (signed int *, (b)), \\\n       ((vector signed int) __builtin_altivec_lvx ((a), (b))), \\\n+__ch (__un_args_eq (signed int [], (b)), \\\n+      ((vector signed int) __builtin_altivec_lvx ((a), (b))), \\\n __ch (__un_args_eq (vector float *, (b)), \\\n       ((vector float) __builtin_altivec_lvx ((a), (b))), \\\n+__ch (__un_args_eq (vector float [], (b)), \\\n+      ((vector float) __builtin_altivec_lvx ((a), (b))), \\\n __ch (__un_args_eq (float *, (b)), \\\n       ((vector float) __builtin_altivec_lvx ((a), (b))), \\\n-__altivec_link_error_invalid_argument ()))))))))))))))\n+__ch (__un_args_eq (float [], (b)), \\\n+      ((vector float) __builtin_altivec_lvx ((a), (b))), \\\n+__altivec_link_error_invalid_argument ()))))))))))))))))))))))))))))\n \n #define vec_lde(a, b) \\\n __ch (__un_args_eq (unsigned char *, (b)), \\\n       ((vector unsigned char) __builtin_altivec_lvebx ((a), (b))), \\\n+__ch (__un_args_eq (unsigned char [], (b)), \\\n+      ((vector unsigned char) __builtin_altivec_lvebx ((a), (b))), \\\n __ch (__un_args_eq (signed char *, (b)), \\\n       ((vector signed char) __builtin_altivec_lvebx ((a), (b))), \\\n+__ch (__un_args_eq (signed char [], (b)), \\\n+      ((vector signed char) __builtin_altivec_lvebx ((a), (b))), \\\n __ch (__un_args_eq (unsigned short *, (b)), \\\n       ((vector unsigned short) __builtin_altivec_lvehx ((a), (b))), \\\n+__ch (__un_args_eq (unsigned short [], (b)), \\\n+      ((vector unsigned short) __builtin_altivec_lvehx ((a), (b))), \\\n __ch (__un_args_eq (signed short *, (b)), \\\n       ((vector signed short) __builtin_altivec_lvehx ((a), (b))), \\\n+__ch (__un_args_eq (signed short [], (b)), \\\n+      ((vector signed short) __builtin_altivec_lvehx ((a), (b))), \\\n __ch (__un_args_eq (unsigned int *, (b)), \\\n       ((vector unsigned int) __builtin_altivec_lvewx ((a), (b))), \\\n+__ch (__un_args_eq (unsigned int [], (b)), \\\n+      ((vector unsigned int) __builtin_altivec_lvewx ((a), (b))), \\\n __ch (__un_args_eq (signed int *, (b)), \\\n       ((vector signed int) __builtin_altivec_lvewx ((a), (b))), \\\n-__altivec_link_error_invalid_argument ()))))))\n+__ch (__un_args_eq (signed int [], (b)), \\\n+      ((vector signed int) __builtin_altivec_lvewx ((a), (b))), \\\n+__altivec_link_error_invalid_argument ()))))))))))))\n \n #define vec_ldl(a, b) \\\n __ch (__un_args_eq (vector unsigned char *, (b)), \\\n       ((vector unsigned char) __builtin_altivec_lvxl ((a), (b))), \\\n+__ch (__un_args_eq (vector unsigned char [], (b)), \\\n+      ((vector unsigned char) __builtin_altivec_lvxl ((a), (b))), \\\n __ch (__un_args_eq (unsigned char *, (b)), \\\n       ((vector unsigned char) __builtin_altivec_lvxl ((a), (b))), \\\n+__ch (__un_args_eq (unsigned char [], (b)), \\\n+      ((vector unsigned char) __builtin_altivec_lvxl ((a), (b))), \\\n __ch (__un_args_eq (vector signed char *, (b)), \\\n       ((vector signed char) __builtin_altivec_lvxl ((a), (b))), \\\n+__ch (__un_args_eq (vector signed char [], (b)), \\\n+      ((vector signed char) __builtin_altivec_lvxl ((a), (b))), \\\n __ch (__un_args_eq (signed char *, (b)), \\\n       ((vector signed char) __builtin_altivec_lvxl ((a), (b))), \\\n+__ch (__un_args_eq (signed char [], (b)), \\\n+      ((vector signed char) __builtin_altivec_lvxl ((a), (b))), \\\n __ch (__un_args_eq (vector unsigned short *, (b)), \\\n       ((vector unsigned short) __builtin_altivec_lvxl ((a), (b))), \\\n+__ch (__un_args_eq (vector unsigned short [], (b)), \\\n+      ((vector unsigned short) __builtin_altivec_lvxl ((a), (b))), \\\n __ch (__un_args_eq (unsigned short *, (b)), \\\n       ((vector unsigned short) __builtin_altivec_lvxl ((a), (b))), \\\n+__ch (__un_args_eq (unsigned short [], (b)), \\\n+      ((vector unsigned short) __builtin_altivec_lvxl ((a), (b))), \\\n __ch (__un_args_eq (vector signed short *, (b)), \\\n       ((vector signed short) __builtin_altivec_lvxl ((a), (b))), \\\n+__ch (__un_args_eq (vector signed short [], (b)), \\\n+      ((vector signed short) __builtin_altivec_lvxl ((a), (b))), \\\n __ch (__un_args_eq (signed short *, (b)), \\\n       ((vector signed short) __builtin_altivec_lvxl ((a), (b))), \\\n+__ch (__un_args_eq (signed short [], (b)), \\\n+      ((vector signed short) __builtin_altivec_lvxl ((a), (b))), \\\n __ch (__un_args_eq (vector unsigned int *, (b)), \\\n       ((vector unsigned int) __builtin_altivec_lvxl ((a), (b))), \\\n+__ch (__un_args_eq (vector unsigned int [], (b)), \\\n+      ((vector unsigned int) __builtin_altivec_lvxl ((a), (b))), \\\n __ch (__un_args_eq (unsigned int *, (b)), \\\n       ((vector unsigned int) __builtin_altivec_lvxl ((a), (b))), \\\n+__ch (__un_args_eq (unsigned int [], (b)), \\\n+      ((vector unsigned int) __builtin_altivec_lvxl ((a), (b))), \\\n __ch (__un_args_eq (vector signed int *, (b)), \\\n       ((vector signed int) __builtin_altivec_lvxl ((a), (b))), \\\n+__ch (__un_args_eq (vector signed int [], (b)), \\\n+      ((vector signed int) __builtin_altivec_lvxl ((a), (b))), \\\n __ch (__un_args_eq (signed int *, (b)), \\\n       ((vector signed int) __builtin_altivec_lvxl ((a), (b))), \\\n+__ch (__un_args_eq (signed int [], (b)), \\\n+      ((vector signed int) __builtin_altivec_lvxl ((a), (b))), \\\n __ch (__un_args_eq (vector float *, (b)), \\\n       ((vector float) __builtin_altivec_lvxl ((a), (b))), \\\n+__ch (__un_args_eq (vector float [], (b)), \\\n+      ((vector float) __builtin_altivec_lvxl ((a), (b))), \\\n __ch (__un_args_eq (float *, (b)), \\\n       ((vector float) __builtin_altivec_lvxl ((a), (b))), \\\n-__altivec_link_error_invalid_argument ()))))))))))))))\n+__ch (__un_args_eq (float [], (b)), \\\n+      ((vector float) __builtin_altivec_lvxl ((a), (b))), \\\n+__altivec_link_error_invalid_argument ()))))))))))))))))))))))))))))\n \n #define vec_loge(a1) __builtin_altivec_vlogefp ((a1))\n "}]}