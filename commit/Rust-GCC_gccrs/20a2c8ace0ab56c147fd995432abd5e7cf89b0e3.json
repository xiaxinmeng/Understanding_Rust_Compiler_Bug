{"sha": "20a2c8ace0ab56c147fd995432abd5e7cf89b0e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjBhMmM4YWNlMGFiNTZjMTQ3ZmQ5OTU0MzJhYmQ1ZTdjZjg5YjBlMw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-17T13:19:12Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-06-17T13:19:54Z"}, "message": "i386: Add variable vec_set for 64bit vectors [PR97194]\n\nTo generate sane code a SSE4.1 variable PBLENDV instruction is needed.\n\n2021-06-17  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/97194\n\t* config/i386/i386-expand.c (expand_vector_set_var):\n\tHandle V2FS mode remapping.  Pass TARGET_MMX_WITH_SSE to\n\tix86_expand_vector_init_duplicate.\n\t(ix86_expand_vector_init_duplicate): Emit insv_1 for\n\tQImode for !TARGET_PARTIAL_REG_STALL.\n\t* config/i386/predicates.md (vec_setm_mmx_operand): New predicate.\n\t* config/i386/mmx.md (vec_setv2sf): Use vec_setm_mmx_operand\n\tas operand 2 predicate.  Call ix86_expand_vector_set_var\n\tfor non-constant index operand.\n\t(vec_setv2si): Ditto.\n\t(vec_setv4hi): Ditto.\n\t(vec_setv8qi): ditto.\n\ngcc/testsuite/\n\n\tPR target/97194\n\t* gcc.target/i386/sse4_1-vec-set-1.c: New test.\n\t* gcc.target/i386/sse4_1-vec-set-2.c: ditto.", "tree": {"sha": "4afae4736cbfbb3f4854511e7316a52fce061481", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4afae4736cbfbb3f4854511e7316a52fce061481"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1555d4013ed3cae2589270436387063d1c2f1a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1555d4013ed3cae2589270436387063d1c2f1a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1555d4013ed3cae2589270436387063d1c2f1a3"}], "stats": {"total": 137, "additions": 119, "deletions": 18}, "files": [{"sha": "8f4e4e4d88488c30159a63564fdeffdef71ba2b0", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=20a2c8ace0ab56c147fd995432abd5e7cf89b0e3", "patch": "@@ -13811,10 +13811,17 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, machine_mode mode,\n \twsmode = GET_MODE_INNER (wvmode);\n \n \tval = convert_modes (wsmode, smode, val, true);\n-\tx = expand_simple_binop (wsmode, ASHIFT, val,\n-\t\t\t\t GEN_INT (GET_MODE_BITSIZE (smode)),\n-\t\t\t\t NULL_RTX, 1, OPTAB_LIB_WIDEN);\n-\tval = expand_simple_binop (wsmode, IOR, val, x, x, 1, OPTAB_LIB_WIDEN);\n+\n+\tif (smode == QImode && !TARGET_PARTIAL_REG_STALL)\n+\t  emit_insn (gen_insv_1 (wsmode, val, val));\n+\telse\n+\t  {\n+\t    x = expand_simple_binop (wsmode, ASHIFT, val,\n+\t\t\t\t     GEN_INT (GET_MODE_BITSIZE (smode)),\n+\t\t\t\t     NULL_RTX, 1, OPTAB_LIB_WIDEN);\n+\t    val = expand_simple_binop (wsmode, IOR, val, x, x, 1,\n+\t\t\t\t       OPTAB_LIB_WIDEN);\n+\t  }\n \n \tx = gen_reg_rtx (wvmode);\n \tok = ix86_expand_vector_init_duplicate (mmx_ok, wvmode, x, val);\n@@ -14788,6 +14795,9 @@ ix86_expand_vector_set_var (rtx target, rtx val, rtx idx)\n \tcase E_V8DFmode:\n \t  cmp_mode = V8DImode;\n \t  break;\n+\tcase E_V2SFmode:\n+\t  cmp_mode = V2SImode;\n+\t  break;\n \tcase E_V4SFmode:\n \t  cmp_mode = V4SImode;\n \t  break;\n@@ -14809,9 +14819,11 @@ ix86_expand_vector_set_var (rtx target, rtx val, rtx idx)\n   idxv = gen_reg_rtx (cmp_mode);\n   idx_tmp = convert_to_mode (GET_MODE_INNER (cmp_mode), idx, 1);\n \n-  ok = ix86_expand_vector_init_duplicate (false, mode, valv, val);\n+  ok = ix86_expand_vector_init_duplicate (TARGET_MMX_WITH_SSE,\n+\t\t\t\t\t  mode, valv, val);\n   gcc_assert (ok);\n-  ok = ix86_expand_vector_init_duplicate (false, cmp_mode, idxv, idx_tmp);\n+  ok = ix86_expand_vector_init_duplicate (TARGET_MMX_WITH_SSE,\n+\t\t\t\t\t  cmp_mode, idxv, idx_tmp);\n   gcc_assert (ok);\n   vec[0] = target;\n   vec[1] = valv;"}, {"sha": "a107ac5ccb47311743aeba48ef777941789c35f1", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=20a2c8ace0ab56c147fd995432abd5e7cf89b0e3", "patch": "@@ -1279,11 +1279,14 @@\n (define_expand \"vec_setv2sf\"\n   [(match_operand:V2SF 0 \"register_operand\")\n    (match_operand:SF 1 \"register_operand\")\n-   (match_operand 2 \"const_int_operand\")]\n+   (match_operand 2 \"vec_setm_mmx_operand\")]\n   \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n {\n-  ix86_expand_vector_set (TARGET_MMX_WITH_SSE, operands[0], operands[1],\n-\t\t\t  INTVAL (operands[2]));\n+  if (CONST_INT_P (operands[2]))\n+    ix86_expand_vector_set (TARGET_MMX_WITH_SSE, operands[0], operands[1],\n+\t\t\t    INTVAL (operands[2]));\n+  else\n+    ix86_expand_vector_set_var (operands[0], operands[1], operands[2]);\n   DONE;\n })\n \n@@ -2989,11 +2992,14 @@\n (define_expand \"vec_setv2si\"\n   [(match_operand:V2SI 0 \"register_operand\")\n    (match_operand:SI 1 \"register_operand\")\n-   (match_operand 2 \"const_int_operand\")]\n+   (match_operand 2 \"vec_setm_mmx_operand\")]\n   \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n {\n-  ix86_expand_vector_set (TARGET_MMX_WITH_SSE, operands[0], operands[1],\n-\t\t\t  INTVAL (operands[2]));\n+  if (CONST_INT_P (operands[2]))\n+    ix86_expand_vector_set (TARGET_MMX_WITH_SSE, operands[0], operands[1],\n+\t\t\t    INTVAL (operands[2]));\n+  else\n+    ix86_expand_vector_set_var (operands[0], operands[1], operands[2]);\n   DONE;\n })\n \n@@ -3145,11 +3151,14 @@\n (define_expand \"vec_setv4hi\"\n   [(match_operand:V4HI 0 \"register_operand\")\n    (match_operand:HI 1 \"register_operand\")\n-   (match_operand 2 \"const_int_operand\")]\n+   (match_operand 2 \"vec_setm_mmx_operand\")]\n   \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n {\n-  ix86_expand_vector_set (TARGET_MMX_WITH_SSE, operands[0], operands[1],\n-\t\t\t  INTVAL (operands[2]));\n+  if (CONST_INT_P (operands[2]))\n+    ix86_expand_vector_set (TARGET_MMX_WITH_SSE, operands[0], operands[1],\n+\t\t\t    INTVAL (operands[2]));\n+  else\n+    ix86_expand_vector_set_var (operands[0], operands[1], operands[2]);\n   DONE;\n })\n \n@@ -3177,11 +3186,14 @@\n (define_expand \"vec_setv8qi\"\n   [(match_operand:V8QI 0 \"register_operand\")\n    (match_operand:QI 1 \"register_operand\")\n-   (match_operand 2 \"const_int_operand\")]\n+   (match_operand 2 \"vec_setm_mmx_operand\")]\n   \"TARGET_SSE4_1 && TARGET_MMX_WITH_SSE\"\n {\n-  ix86_expand_vector_set (TARGET_MMX_WITH_SSE, operands[0], operands[1],\n-\t\t\t  INTVAL (operands[2]));\n+  if (CONST_INT_P (operands[2]))\n+    ix86_expand_vector_set (TARGET_MMX_WITH_SSE, operands[0], operands[1],\n+\t\t\t    INTVAL (operands[2]));\n+  else\n+    ix86_expand_vector_set_var (operands[0], operands[1], operands[2]);\n   DONE;\n })\n "}, {"sha": "e7a896874d6f7906e44f6eb25d5cc81422519c62", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=20a2c8ace0ab56c147fd995432abd5e7cf89b0e3", "patch": "@@ -1026,6 +1026,12 @@\n \t    (match_test \"TARGET_AVX2\"))\n        (match_code \"const_int\")))\n \n+(define_predicate \"vec_setm_mmx_operand\"\n+  (ior (and (match_operand 0 \"register_operand\")\n+\t    (match_test \"TARGET_SSE4_1\")\n+\t    (match_test \"TARGET_MMX_WITH_SSE\"))\n+       (match_code \"const_int\")))\n+\n ;; True for registers, or 1 or -1.  Used to optimize double-word shifts.\n (define_predicate \"reg_or_pm1_operand\"\n   (ior (match_operand 0 \"register_operand\")"}, {"sha": "7c7fd34bbc13153ba154715e3beed9576f33eb2d", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-vec-set-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-vec-set-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-vec-set-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-vec-set-1.c?ref=20a2c8ace0ab56c147fd995432abd5e7cf89b0e3", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-msse4.1 -O2\" } */\n+/* { dg-final { scan-assembler-times {(?n)v?pcmpeq[bwd]} 4 } } */\n+/* { dg-final { scan-assembler-times {(?n)v?p?blendv} 4 } } */\n+\n+typedef char v8qi __attribute__ ((vector_size (8)));\n+typedef short v4hi __attribute__ ((vector_size (8)));\n+typedef int v2si __attribute__ ((vector_size (8)));\n+typedef float v2sf __attribute__ ((vector_size (8)));\n+\n+#define FOO(VTYPE, TYPE)\t\t\t\\\n+  VTYPE\t\t\t\t\t\t\\\n+  __attribute__ ((noipa))\t\t\t\\\n+  foo_##VTYPE (VTYPE a, TYPE b, unsigned int c)\t\\\n+  {\t\t\t\t\t\t\\\n+    a[c] = b;\t\t\t\t\t\\\n+    return a;\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\\\n+\n+FOO (v8qi, char);\n+\n+FOO (v4hi, short);\n+\n+FOO (v2si, int);\n+\n+FOO (v2sf, float);"}, {"sha": "24f80414761834370976a41e10fce793cc6d2a6d", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-vec-set-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-vec-set-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20a2c8ace0ab56c147fd995432abd5e7cf89b0e3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-vec-set-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-vec-set-2.c?ref=20a2c8ace0ab56c147fd995432abd5e7cf89b0e3", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+\n+#ifndef CHECK\n+#define CHECK \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK\n+\n+#include \"sse4_1-vec-set-1.c\"\n+\n+#define CALC_TEST(vtype, type, N, idx)\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    int i,val = idx * idx - idx * 3 + 16;\t\t\t\\\n+    type res[N],exp[N];\t\t\t\t\t\t\\\n+    vtype resv;\t\t\t\t\t\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres[i] = i * i - i * 3 + 15;\t\t\t\t\\\n+\texp[i] = res[i];\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    exp[idx] = val;\t\t\t\t\t\t\\\n+    resv = foo_##vtype (*(vtype *)&res[0], val, idx);\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tif (resv[i] != exp[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+static void\n+TEST (void)\n+{\n+  CALC_TEST (v8qi, char, 8, 5);\n+  CALC_TEST (v4hi, short, 4, 2);\n+  CALC_TEST (v2si, int, 2, 1);\n+}"}]}