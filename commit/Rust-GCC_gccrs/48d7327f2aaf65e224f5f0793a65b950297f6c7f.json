{"sha": "48d7327f2aaf65e224f5f0793a65b950297f6c7f", "node_id": "C_kwDOANBUbNoAKDQ4ZDczMjdmMmFhZjY1ZTIyNGY1ZjA3OTNhNjViOTUwMjk3ZjZjN2Y", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-11T08:42:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-11T08:42:47Z"}, "message": "openmp: Add support for 2 argument num_teams clause\n\nIn OpenMP 5.1, num_teams clause can accept either one expression as before,\nbut it in that case changed meaning, rather than create <= expression\nteams it is now create == expression teams.  Or it accepts two expressions\nseparated by :, with the meaning that the first is low bound and second upper\nbound on how many teams should be created.  The other ways to set number of\nteams are upper bounds with lower bound of 1.\n\nThe following patch does parsing of this for C/C++.  For host teams, we\nactually don't need to do anything further right now, we always create\n(pretend to create) exactly the requested number of teams, so we can just\nevaluate and throw away the lower bound for now.\nFor teams nested in target, we don't guarantee that though and further\nwork will be needed.\nIn particular, omplower now turns the teams part of:\nstruct S { S (); S (const S &); ~S (); int s; };\nvoid bar (S &, S &);\nint baz ();\n_Pragma (\"omp declare target to (baz)\");\n\nvoid\nfoo (void)\n{\n  S a, b;\n  #pragma omp target private (a) map (b)\n  {\n    #pragma omp teams firstprivate (b) num_teams (baz ())\n    {\n      bar (a, b);\n    }\n  }\n}\ninto:\n  retval.0 = baz ();\n  retval.1 = retval.0;\n  {\n    unsigned int retval.3;\n    struct S * D.2549;\n    struct S b;\n\n    retval.3 = (unsigned int) retval.1;\n    D.2549 = .omp_data_i->b;\n    S::S (&b, D.2549);\n    #pragma omp teams num_teams(retval.1) firstprivate(b) shared(a)\n    __builtin_GOMP_teams (retval.3, 0);\n    {\n      bar (&a, &b);\n    }\n    S::~S (&b);\n    #pragma omp return(nowait)\n  }\nIMHO we want a new API, say GOMP_teams3 which will take 3 arguments\ninstead of 2 (the lower and upper bounds from num_teams and thread_limit)\nand will return a bool whether it should do the teams body or not.\nAnd, we should add right before outermost {} above\nwhile (__builtin_GOMP_teams3 ((unsigned) retval.1, (unsigned) retval.1, 0))\nand remove the __builtin_GOMP_teams call.  The current function performs\nexit equivalent (at least on NVPTX) which seems bad because that means\nthe destructors of e.g. private variables on target aren't invoked, and\nat the current placement neither destructors of the already constructed\nprivatized variables in teams.\nI'll do this next on the compiler side, but I'm afraid I'll need help\nwith the nvptx and amdgcn implementations.  E.g. for nvptx, we won't be\nable to use %ctaid.x .  I think ideal would be to use a .shared\ninteger variable for the omp_get_team_num value, but I don't have any\nexperience with that, are .shared variables zero initialized by default,\nor do they have random value at start?  PTX docs say they aren't initializable.\n\n2021-11-11  Jakub Jelinek  <jakub@redhat.com>\n\ngcc/\n\t* tree.h (OMP_CLAUSE_NUM_TEAMS_EXPR): Rename to ...\n\t(OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR): ... this.\n\t(OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR): Define.\n\t* tree.c (omp_clause_num_ops): Increase num ops for\n\tOMP_CLAUSE_NUM_TEAMS to 2.\n\t* tree-pretty-print.c (dump_omp_clause): Print optional lower bound\n\tfor OMP_CLAUSE_NUM_TEAMS.\n\t* gimplify.c (gimplify_scan_omp_clauses): Gimplify\n\tOMP_CLAUSE_NUM_TEAMS_LOWER_EXPR if non-NULL.\n\t(optimize_target_teams): Use OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR instead\n\tof OMP_CLAUSE_NUM_TEAMS_EXPR.  Handle OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR.\n\t* omp-low.c (lower_omp_teams): Use OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR\n\tinstead of OMP_CLAUSE_NUM_TEAMS_EXPR.\n\t* omp-expand.c (expand_teams_call, get_target_arguments): Likewise.\ngcc/c/\n\t* c-parser.c (c_parser_omp_clause_num_teams): Parse optional\n\tlower-bound and store it into OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR.\n\tUse OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR instead of\n\tOMP_CLAUSE_NUM_TEAMS_EXPR.\n\t(c_parser_omp_target): For OMP_CLAUSE_NUM_TEAMS evaluate before\n\tcombined target teams even lower-bound expression.\ngcc/cp/\n\t* parser.c (cp_parser_omp_clause_num_teams): Parse optional\n\tlower-bound and store it into OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR.\n\tUse OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR instead of\n\tOMP_CLAUSE_NUM_TEAMS_EXPR.\n\t(cp_parser_omp_target): For OMP_CLAUSE_NUM_TEAMS evaluate before\n\tcombined target teams even lower-bound expression.\n\t* semantics.c (finish_omp_clauses): Handle\n\tOMP_CLAUSE_NUM_TEAMS_LOWER_EXPR of OMP_CLAUSE_NUM_TEAMS clause.\n\t* pt.c (tsubst_omp_clauses): Likewise.\n\t(tsubst_expr): For OMP_CLAUSE_NUM_TEAMS evaluate before\n\tcombined target teams even lower-bound expression.\ngcc/fortran/\n\t* trans-openmp.c (gfc_trans_omp_clauses): Use\n\tOMP_CLAUSE_NUM_TEAMS_UPPER_EXPR instead of OMP_CLAUSE_NUM_TEAMS_EXPR.\ngcc/testsuite/\n\t* c-c++-common/gomp/clauses-1.c (bar): Supply lower-bound expression\n\tto half of the num_teams clauses.\n\t* c-c++-common/gomp/num-teams-1.c: New test.\n\t* c-c++-common/gomp/num-teams-2.c: New test.\n\t* g++.dg/gomp/attrs-1.C (bar): Supply lower-bound expression\n\tto half of the num_teams clauses.\n\t* g++.dg/gomp/attrs-2.C (bar): Likewise.\n\t* g++.dg/gomp/num-teams-1.C: New test.\n\t* g++.dg/gomp/num-teams-2.C: New test.\nlibgomp/\n\t* testsuite/libgomp.c-c++-common/teams-1.c: New test.", "tree": {"sha": "47fbb3412df6611a0351450964caec3fb3c788b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47fbb3412df6611a0351450964caec3fb3c788b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48d7327f2aaf65e224f5f0793a65b950297f6c7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d7327f2aaf65e224f5f0793a65b950297f6c7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48d7327f2aaf65e224f5f0793a65b950297f6c7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48d7327f2aaf65e224f5f0793a65b950297f6c7f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0136f25ac063b811501b71c0433cf4bac3549206", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0136f25ac063b811501b71c0433cf4bac3549206", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0136f25ac063b811501b71c0433cf4bac3549206"}], "stats": {"total": 716, "additions": 582, "deletions": 134}, "files": [{"sha": "3c9f5877481fd2a9a33381f1787cbb8bd289845b", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 74, "deletions": 37, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -15175,7 +15175,10 @@ c_parser_omp_clause_orderedkind (c_parser *parser ATTRIBUTE_UNUSED,\n }\n \n /* OpenMP 4.0:\n-   num_teams ( expression ) */\n+   num_teams ( expression )\n+\n+   OpenMP 5.1:\n+   num_teams ( expression : expression ) */\n \n static tree\n c_parser_omp_clause_num_teams (c_parser *parser, tree list)\n@@ -15184,34 +15187,68 @@ c_parser_omp_clause_num_teams (c_parser *parser, tree list)\n   matching_parens parens;\n   if (parens.require_open (parser))\n     {\n-      location_t expr_loc = c_parser_peek_token (parser)->location;\n+      location_t upper_loc = c_parser_peek_token (parser)->location;\n+      location_t lower_loc = UNKNOWN_LOCATION;\n       c_expr expr = c_parser_expr_no_commas (parser, NULL);\n-      expr = convert_lvalue_to_rvalue (expr_loc, expr, false, true);\n-      tree c, t = expr.value;\n-      t = c_fully_fold (t, false, NULL);\n+      expr = convert_lvalue_to_rvalue (upper_loc, expr, false, true);\n+      tree c, upper = expr.value, lower = NULL_TREE;\n+      upper = c_fully_fold (upper, false, NULL);\n+\n+      if (c_parser_next_token_is (parser, CPP_COLON))\n+\t{\n+\t  c_parser_consume_token (parser);\n+\t  lower_loc = upper_loc;\n+\t  lower = upper;\n+\t  upper_loc = c_parser_peek_token (parser)->location;\n+\t  expr = c_parser_expr_no_commas (parser, NULL);\n+\t  expr = convert_lvalue_to_rvalue (upper_loc, expr, false, true);\n+\t  upper = expr.value;\n+\t  upper = c_fully_fold (upper, false, NULL);\n+\t}\n \n       parens.skip_until_found_close (parser);\n \n-      if (!INTEGRAL_TYPE_P (TREE_TYPE (t)))\n+      if (!INTEGRAL_TYPE_P (TREE_TYPE (upper))\n+\t  || (lower && !INTEGRAL_TYPE_P (TREE_TYPE (lower))))\n \t{\n \t  c_parser_error (parser, \"expected integer expression\");\n \t  return list;\n \t}\n \n       /* Attempt to statically determine when the number isn't positive.  */\n-      c = fold_build2_loc (expr_loc, LE_EXPR, boolean_type_node, t,\n-\t\t\t   build_int_cst (TREE_TYPE (t), 0));\n-      protected_set_expr_location (c, expr_loc);\n+      c = fold_build2_loc (upper_loc, LE_EXPR, boolean_type_node, upper,\n+\t\t\t   build_int_cst (TREE_TYPE (upper), 0));\n+      protected_set_expr_location (c, upper_loc);\n       if (c == boolean_true_node)\n \t{\n-\t  warning_at (expr_loc, 0, \"%<num_teams%> value must be positive\");\n-\t  t = integer_one_node;\n+\t  warning_at (upper_loc, 0, \"%<num_teams%> value must be positive\");\n+\t  upper = integer_one_node;\n+\t}\n+      if (lower)\n+\t{\n+\t  c = fold_build2_loc (lower_loc, LE_EXPR, boolean_type_node, lower,\n+\t\t\t       build_int_cst (TREE_TYPE (lower), 0));\n+\t  protected_set_expr_location (c, lower_loc);\n+\t  if (c == boolean_true_node)\n+\t    {\n+\t      warning_at (lower_loc, 0, \"%<num_teams%> value must be positive\");\n+\t      lower = NULL_TREE;\n+\t    }\n+\t  else if (TREE_CODE (lower) == INTEGER_CST\n+\t\t   && TREE_CODE (upper) == INTEGER_CST\n+\t\t   && tree_int_cst_lt (upper, lower))\n+\t    {\n+\t      warning_at (lower_loc, 0, \"%<num_teams%> lower bound %qE bigger \"\n+\t\t\t\t\t\"than upper bound %qE\", lower, upper);\n+\t      lower = NULL_TREE;\n+\t    }\n \t}\n \n       check_no_duplicate_clause (list, OMP_CLAUSE_NUM_TEAMS, \"num_teams\");\n \n       c = build_omp_clause (num_teams_loc, OMP_CLAUSE_NUM_TEAMS);\n-      OMP_CLAUSE_NUM_TEAMS_EXPR (c) = t;\n+      OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR (c) = upper;\n+      OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (c) = lower;\n       OMP_CLAUSE_CHAIN (c) = list;\n       list = c;\n     }\n@@ -21016,31 +21053,31 @@ c_parser_omp_target (c_parser *parser, enum pragma_context context, bool *if_p)\n \t  if (ret == NULL_TREE)\n \t    return false;\n \t  if (ccode == OMP_TEAMS)\n-\t    {\n-\t      /* For combined target teams, ensure the num_teams and\n-\t\t thread_limit clause expressions are evaluated on the host,\n-\t\t before entering the target construct.  */\n-\t      tree c;\n-\t      for (c = cclauses[C_OMP_CLAUSE_SPLIT_TEAMS];\n-\t\t   c; c = OMP_CLAUSE_CHAIN (c))\n-\t\tif ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_NUM_TEAMS\n-\t\t     || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_THREAD_LIMIT)\n-\t\t    && TREE_CODE (OMP_CLAUSE_OPERAND (c, 0)) != INTEGER_CST)\n-\t\t  {\n-\t\t    tree expr = OMP_CLAUSE_OPERAND (c, 0);\n-\t\t    tree tmp = create_tmp_var_raw (TREE_TYPE (expr));\n-\t\t    expr = build4 (TARGET_EXPR, TREE_TYPE (expr), tmp,\n-\t\t\t\t   expr, NULL_TREE, NULL_TREE);\n-\t\t    add_stmt (expr);\n-\t\t    OMP_CLAUSE_OPERAND (c, 0) = expr;\n-\t\t    tree tc = build_omp_clause (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\t\t\tOMP_CLAUSE_FIRSTPRIVATE);\n-\t\t    OMP_CLAUSE_DECL (tc) = tmp;\n-\t\t    OMP_CLAUSE_CHAIN (tc)\n-\t\t      = cclauses[C_OMP_CLAUSE_SPLIT_TARGET];\n-\t\t    cclauses[C_OMP_CLAUSE_SPLIT_TARGET] = tc;\n-\t\t  }\n-\t    }\n+\t    /* For combined target teams, ensure the num_teams and\n+\t       thread_limit clause expressions are evaluated on the host,\n+\t       before entering the target construct.  */\n+\t    for (tree c = cclauses[C_OMP_CLAUSE_SPLIT_TEAMS];\n+\t\t c; c = OMP_CLAUSE_CHAIN (c))\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_NUM_TEAMS\n+\t\t  || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_THREAD_LIMIT)\n+\t\tfor (int i = 0;\n+\t\t     i <= (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_NUM_TEAMS); ++i)\n+\t\t  if (OMP_CLAUSE_OPERAND (c, i)\n+\t\t      && TREE_CODE (OMP_CLAUSE_OPERAND (c, i)) != INTEGER_CST)\n+\t\t    {\n+\t\t      tree expr = OMP_CLAUSE_OPERAND (c, i);\n+\t\t      tree tmp = create_tmp_var_raw (TREE_TYPE (expr));\n+\t\t      expr = build4 (TARGET_EXPR, TREE_TYPE (expr), tmp,\n+\t\t\t\t     expr, NULL_TREE, NULL_TREE);\n+\t\t      add_stmt (expr);\n+\t\t      OMP_CLAUSE_OPERAND (c, i) = expr;\n+\t\t      tree tc = build_omp_clause (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\t\t\t  OMP_CLAUSE_FIRSTPRIVATE);\n+\t\t      OMP_CLAUSE_DECL (tc) = tmp;\n+\t\t      OMP_CLAUSE_CHAIN (tc)\n+\t\t\t= cclauses[C_OMP_CLAUSE_SPLIT_TARGET];\n+\t\t      cclauses[C_OMP_CLAUSE_SPLIT_TARGET] = tc;\n+\t\t    }\n \t  tree stmt = make_node (OMP_TARGET);\n \t  TREE_TYPE (stmt) = void_type_node;\n \t  OMP_TARGET_CLAUSES (stmt) = cclauses[C_OMP_CLAUSE_SPLIT_TARGET];"}, {"sha": "4c1fed02c7498ff4305a5ef1fbb989e859b6f94c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 47, "deletions": 31, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -38275,21 +38275,35 @@ cp_parser_omp_clause_orderedkind (cp_parser * /*parser*/,\n }\n \n /* OpenMP 4.0:\n-   num_teams ( expression ) */\n+   num_teams ( expression )\n+\n+   OpenMP 5.1:\n+   num_teams ( expression : expression ) */\n \n static tree\n cp_parser_omp_clause_num_teams (cp_parser *parser, tree list,\n \t\t\t\tlocation_t location)\n {\n-  tree t, c;\n+  tree upper, lower = NULL_TREE, c;\n \n   matching_parens parens;\n   if (!parens.require_open (parser))\n     return list;\n \n-  t = cp_parser_assignment_expression (parser);\n+  bool saved_colon_corrects_to_scope_p = parser->colon_corrects_to_scope_p;\n+  parser->colon_corrects_to_scope_p = false;\n+  upper = cp_parser_assignment_expression (parser);\n+  parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;\n \n-  if (t == error_mark_node\n+  if (upper != error_mark_node\n+      && cp_lexer_next_token_is (parser->lexer, CPP_COLON))\n+    {\n+      lower = upper;\n+      cp_lexer_consume_token (parser->lexer);\n+      upper = cp_parser_assignment_expression (parser);\n+    }\n+\n+  if (upper == error_mark_node\n       || !parens.require_close (parser))\n     cp_parser_skip_to_closing_parenthesis (parser, /*recovering=*/true,\n \t\t\t\t\t   /*or_comma=*/false,\n@@ -38299,7 +38313,8 @@ cp_parser_omp_clause_num_teams (cp_parser *parser, tree list,\n \t\t\t     \"num_teams\", location);\n \n   c = build_omp_clause (location, OMP_CLAUSE_NUM_TEAMS);\n-  OMP_CLAUSE_NUM_TEAMS_EXPR (c) = t;\n+  OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR (c) = upper;\n+  OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (c) = lower;\n   OMP_CLAUSE_CHAIN (c) = list;\n \n   return c;\n@@ -44104,32 +44119,33 @@ cp_parser_omp_target (cp_parser *parser, cp_token *pragma_tok,\n \t  if (ret == NULL_TREE)\n \t    return false;\n \t  if (ccode == OMP_TEAMS && !processing_template_decl)\n-\t    {\n-\t      /* For combined target teams, ensure the num_teams and\n-\t\t thread_limit clause expressions are evaluated on the host,\n-\t\t before entering the target construct.  */\n-\t      tree c;\n-\t      for (c = cclauses[C_OMP_CLAUSE_SPLIT_TEAMS];\n-\t\t   c; c = OMP_CLAUSE_CHAIN (c))\n-\t\tif ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_NUM_TEAMS\n-\t\t     || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_THREAD_LIMIT)\n-\t\t    && TREE_CODE (OMP_CLAUSE_OPERAND (c, 0)) != INTEGER_CST)\n-\t\t  {\n-\t\t    tree expr = OMP_CLAUSE_OPERAND (c, 0);\n-\t\t    expr = force_target_expr (TREE_TYPE (expr), expr, tf_none);\n-\t\t    if (expr == error_mark_node)\n-\t\t      continue;\n-\t\t    tree tmp = TARGET_EXPR_SLOT (expr);\n-\t\t    add_stmt (expr);\n-\t\t    OMP_CLAUSE_OPERAND (c, 0) = expr;\n-\t\t    tree tc = build_omp_clause (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\t\t\tOMP_CLAUSE_FIRSTPRIVATE);\n-\t\t    OMP_CLAUSE_DECL (tc) = tmp;\n-\t\t    OMP_CLAUSE_CHAIN (tc)\n-\t\t      = cclauses[C_OMP_CLAUSE_SPLIT_TARGET];\n-\t\t    cclauses[C_OMP_CLAUSE_SPLIT_TARGET] = tc;\n-\t\t  }\n-\t    }\n+\t    /* For combined target teams, ensure the num_teams and\n+\t       thread_limit clause expressions are evaluated on the host,\n+\t       before entering the target construct.  */\n+\t    for (tree c = cclauses[C_OMP_CLAUSE_SPLIT_TEAMS];\n+\t\t c; c = OMP_CLAUSE_CHAIN (c))\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_NUM_TEAMS\n+\t\t  || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_THREAD_LIMIT)\n+\t\tfor (int i = 0;\n+\t\t     i <= (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_NUM_TEAMS); ++i)\n+\t\t  if (OMP_CLAUSE_OPERAND (c, i)\n+\t\t      && TREE_CODE (OMP_CLAUSE_OPERAND (c, i)) != INTEGER_CST)\n+\t\t    {\n+\t\t      tree expr = OMP_CLAUSE_OPERAND (c, i);\n+\t\t      expr = force_target_expr (TREE_TYPE (expr), expr,\n+\t\t\t\t\t\ttf_none);\n+\t\t      if (expr == error_mark_node)\n+\t\t\tcontinue;\n+\t\t      tree tmp = TARGET_EXPR_SLOT (expr);\n+\t\t      add_stmt (expr);\n+\t\t      OMP_CLAUSE_OPERAND (c, i) = expr;\n+\t\t      tree tc = build_omp_clause (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\t\t\t  OMP_CLAUSE_FIRSTPRIVATE);\n+\t\t      OMP_CLAUSE_DECL (tc) = tmp;\n+\t\t      OMP_CLAUSE_CHAIN (tc)\n+\t\t\t= cclauses[C_OMP_CLAUSE_SPLIT_TARGET];\n+\t\t      cclauses[C_OMP_CLAUSE_SPLIT_TARGET] = tc;\n+\t\t    }\n \t  tree stmt = make_node (OMP_TARGET);\n \t  TREE_TYPE (stmt) = void_type_node;\n \t  OMP_TARGET_CLAUSES (stmt) = cclauses[C_OMP_CLAUSE_SPLIT_TARGET];"}, {"sha": "82bf7dc26f6eba133eda7ace35d8d275fb119417", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -17437,6 +17437,13 @@ tsubst_omp_clauses (tree clauses, enum c_omp_region_type ort,\n \t    = tsubst_omp_clause_decl (OMP_CLAUSE_DECL (oc), args, complain,\n \t\t\t\t      in_decl, iterator_cache);\n \t  break;\n+\tcase OMP_CLAUSE_NUM_TEAMS:\n+\t  if (OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (oc))\n+\t    OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (nc)\n+\t      = tsubst_expr (OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (oc), args,\n+\t\t\t     complain, in_decl,\n+\t\t\t     /*integral_constant_expression_p=*/false);\n+\t  /* FALLTHRU */\n \tcase OMP_CLAUSE_TILE:\n \tcase OMP_CLAUSE_IF:\n \tcase OMP_CLAUSE_NUM_THREADS:\n@@ -17445,7 +17452,6 @@ tsubst_omp_clauses (tree clauses, enum c_omp_region_type ort,\n \tcase OMP_CLAUSE_FINAL:\n \tcase OMP_CLAUSE_DEVICE:\n \tcase OMP_CLAUSE_DIST_SCHEDULE:\n-\tcase OMP_CLAUSE_NUM_TEAMS:\n \tcase OMP_CLAUSE_THREAD_LIMIT:\n \tcase OMP_CLAUSE_SAFELEN:\n \tcase OMP_CLAUSE_SIMDLEN:\n@@ -18948,31 +18954,32 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \t{\n \t  tree teams = cp_walk_tree (&stmt, tsubst_find_omp_teams, NULL, NULL);\n \t  if (teams)\n-\t    {\n-\t      /* For combined target teams, ensure the num_teams and\n-\t\t thread_limit clause expressions are evaluated on the host,\n-\t\t before entering the target construct.  */\n-\t      tree c;\n-\t      for (c = OMP_TEAMS_CLAUSES (teams);\n-\t\t   c; c = OMP_CLAUSE_CHAIN (c))\n-\t\tif ((OMP_CLAUSE_CODE (c) == OMP_CLAUSE_NUM_TEAMS\n-\t\t     || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_THREAD_LIMIT)\n-\t\t    && TREE_CODE (OMP_CLAUSE_OPERAND (c, 0)) != INTEGER_CST)\n-\t\t  {\n-\t\t    tree expr = OMP_CLAUSE_OPERAND (c, 0);\n-\t\t    expr = force_target_expr (TREE_TYPE (expr), expr, tf_none);\n-\t\t    if (expr == error_mark_node)\n-\t\t      continue;\n-\t\t    tmp = TARGET_EXPR_SLOT (expr);\n-\t\t    add_stmt (expr);\n-\t\t    OMP_CLAUSE_OPERAND (c, 0) = expr;\n-\t\t    tree tc = build_omp_clause (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\t\t\tOMP_CLAUSE_FIRSTPRIVATE);\n-\t\t    OMP_CLAUSE_DECL (tc) = tmp;\n-\t\t    OMP_CLAUSE_CHAIN (tc) = OMP_TARGET_CLAUSES (t);\n-\t\t    OMP_TARGET_CLAUSES (t) = tc;\n-\t\t  }\n-\t    }\n+\t    /* For combined target teams, ensure the num_teams and\n+\t       thread_limit clause expressions are evaluated on the host,\n+\t       before entering the target construct.  */\n+\t    for (tree c = OMP_TEAMS_CLAUSES (teams);\n+\t\t c; c = OMP_CLAUSE_CHAIN (c))\n+\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_NUM_TEAMS\n+\t\t  || OMP_CLAUSE_CODE (c) == OMP_CLAUSE_THREAD_LIMIT)\n+\t\tfor (int i = 0;\n+\t\t     i <= (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_NUM_TEAMS); ++i)\n+\t\t  if (OMP_CLAUSE_OPERAND (c, i)\n+\t\t      && TREE_CODE (OMP_CLAUSE_OPERAND (c, i)) != INTEGER_CST)\n+\t\t    {\n+\t\t      tree expr = OMP_CLAUSE_OPERAND (c, i);\n+\t\t      expr = force_target_expr (TREE_TYPE (expr), expr,\n+\t\t\t\t\t\ttf_none);\n+\t\t      if (expr == error_mark_node)\n+\t\t\tcontinue;\n+\t\t      tmp = TARGET_EXPR_SLOT (expr);\n+\t\t      add_stmt (expr);\n+\t\t      OMP_CLAUSE_OPERAND (c, i) = expr;\n+\t\t      tree tc = build_omp_clause (OMP_CLAUSE_LOCATION (c),\n+\t\t\t\t\t\t  OMP_CLAUSE_FIRSTPRIVATE);\n+\t\t      OMP_CLAUSE_DECL (tc) = tmp;\n+\t\t      OMP_CLAUSE_CHAIN (tc) = OMP_TARGET_CLAUSES (t);\n+\t\t      OMP_TARGET_CLAUSES (t) = tc;\n+\t\t    }\n \t}\n       add_stmt (t);\n       break;"}, {"sha": "60e0982cc480427f3e835b82eeb9ee00401b3706", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -7228,6 +7228,53 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \t\t}\n \t      OMP_CLAUSE_OPERAND (c, 0) = t;\n \t    }\n+\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_NUM_TEAMS\n+\t      && OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (c)\n+\t      && !remove)\n+\t    {\n+\t      t = OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (c);\n+\t      if (t == error_mark_node)\n+\t\tremove = true;\n+\t      else if (!type_dependent_expression_p (t)\n+\t\t       && !INTEGRAL_TYPE_P (TREE_TYPE (t)))\n+\t\t{\n+\t\t  error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t    \"%qs expression must be integral\",\n+\t\t\t    omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t\t  remove = true;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  t = mark_rvalue_use (t);\n+\t\t  if (!processing_template_decl)\n+\t\t    {\n+\t\t      t = maybe_constant_value (t);\n+\t\t      if (TREE_CODE (t) == INTEGER_CST\n+\t\t\t  && tree_int_cst_sgn (t) != 1)\n+\t\t\t{\n+\t\t\t  warning_at (OMP_CLAUSE_LOCATION (c), 0,\n+\t\t\t\t      \"%qs value must be positive\",\n+\t\t\t\t      omp_clause_code_name\n+\t\t\t\t      [OMP_CLAUSE_CODE (c)]);\n+\t\t\t  t = NULL_TREE;\n+\t\t\t}\n+\t\t      else\n+\t\t\tt = fold_build_cleanup_point_expr (TREE_TYPE (t), t);\n+\t\t      tree upper = OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR (c);\n+\t\t      if (t\n+\t\t\t  && TREE_CODE (t) == INTEGER_CST\n+\t\t\t  && TREE_CODE (upper) == INTEGER_CST\n+\t\t\t  && tree_int_cst_lt (upper, t))\n+\t\t\t{\n+\t\t\t  warning_at (OMP_CLAUSE_LOCATION (c), 0,\n+\t\t\t\t      \"%<num_teams%> lower bound %qE bigger \"\n+\t\t\t\t      \"than upper bound %qE\", t, upper);\n+\t\t\t  t = NULL_TREE;\n+\t\t\t}\n+\t\t    }\n+\t\t  OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (c) = t;\n+\t\t}\n+\t    }\n \t  break;\n \n \tcase OMP_CLAUSE_SCHEDULE:"}, {"sha": "22d66629c07c8b5138a23f340638257b1bf38faf", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -3938,7 +3938,7 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n       gfc_add_block_to_block (block, &se.post);\n \n       c = build_omp_clause (gfc_get_location (&where), OMP_CLAUSE_NUM_TEAMS);\n-      OMP_CLAUSE_NUM_TEAMS_EXPR (c) = num_teams;\n+      OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR (c) = num_teams;\n       omp_clauses = gfc_trans_add_clause (c, omp_clauses);\n     }\n "}, {"sha": "e5877c8309952e5e72a65a237f89b2d6b9ac8354", "filename": "gcc/gimplify.c", "status": "modified", "additions": 50, "deletions": 5, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -10273,9 +10273,24 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t    = gimple_boolify (OMP_CLAUSE_OPERAND (c, 0));\n \t  /* Fall through.  */\n \n+\tcase OMP_CLAUSE_NUM_TEAMS:\n+\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_NUM_TEAMS\n+\t      && OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (c)\n+\t      && !is_gimple_min_invariant (OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (c)))\n+\t    {\n+\t      if (error_operand_p (OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (c)))\n+\t\t{\n+\t\t  remove = true;\n+\t\t  break;\n+\t\t}\n+\t      OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (c)\n+\t\t= get_initialized_tmp_var (OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (c),\n+\t\t\t\t\t   pre_p, NULL, true);\n+\t    }\n+\t  /* Fall through.  */\n+\n \tcase OMP_CLAUSE_SCHEDULE:\n \tcase OMP_CLAUSE_NUM_THREADS:\n-\tcase OMP_CLAUSE_NUM_TEAMS:\n \tcase OMP_CLAUSE_THREAD_LIMIT:\n \tcase OMP_CLAUSE_DIST_SCHEDULE:\n \tcase OMP_CLAUSE_DEVICE:\n@@ -13535,22 +13550,51 @@ optimize_target_teams (tree target, gimple_seq *pre_p)\n {\n   tree body = OMP_BODY (target);\n   tree teams = walk_tree (&body, find_omp_teams, NULL, NULL);\n-  tree num_teams = integer_zero_node;\n+  tree num_teams_lower = NULL_TREE;\n+  tree num_teams_upper = integer_zero_node;\n   tree thread_limit = integer_zero_node;\n   location_t num_teams_loc = EXPR_LOCATION (target);\n   location_t thread_limit_loc = EXPR_LOCATION (target);\n   tree c, *p, expr;\n   struct gimplify_omp_ctx *target_ctx = gimplify_omp_ctxp;\n \n   if (teams == NULL_TREE)\n-    num_teams = integer_one_node;\n+    num_teams_upper = integer_one_node;\n   else\n     for (c = OMP_TEAMS_CLAUSES (teams); c; c = OMP_CLAUSE_CHAIN (c))\n       {\n \tif (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_NUM_TEAMS)\n \t  {\n-\t    p = &num_teams;\n+\t    p = &num_teams_upper;\n \t    num_teams_loc = OMP_CLAUSE_LOCATION (c);\n+\t    if (OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (c))\n+\t      {\n+\t\texpr = OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (c);\n+\t\tif (TREE_CODE (expr) == INTEGER_CST)\n+\t\t  num_teams_lower = expr;\n+\t\telse if (walk_tree (&expr, computable_teams_clause,\n+\t\t\t\t    NULL, NULL))\n+\t\t  num_teams_lower = integer_minus_one_node;\n+\t\telse\n+\t\t  {\n+\t\t    num_teams_lower = expr;\n+\t\t    gimplify_omp_ctxp = gimplify_omp_ctxp->outer_context;\n+\t\t    if (gimplify_expr (&num_teams_lower, pre_p, NULL,\n+\t\t\t\t       is_gimple_val, fb_rvalue, false)\n+\t\t\t== GS_ERROR)\n+\t\t      {\n+\t\t\tgimplify_omp_ctxp = target_ctx;\n+\t\t\tnum_teams_lower = integer_minus_one_node;\n+\t\t      }\n+\t\t    else\n+\t\t      {\n+\t\t\tgimplify_omp_ctxp = target_ctx;\n+\t\t\tif (!DECL_P (expr) && TREE_CODE (expr) != TARGET_EXPR)\n+\t\t\t  OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (c)\n+\t\t\t    = num_teams_lower;\n+\t\t      }\n+\t\t  }\n+\t      }\n \t  }\n \telse if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_THREAD_LIMIT)\n \t  {\n@@ -13588,7 +13632,8 @@ optimize_target_teams (tree target, gimple_seq *pre_p)\n   OMP_CLAUSE_CHAIN (c) = OMP_TARGET_CLAUSES (target);\n   OMP_TARGET_CLAUSES (target) = c;\n   c = build_omp_clause (num_teams_loc, OMP_CLAUSE_NUM_TEAMS);\n-  OMP_CLAUSE_NUM_TEAMS_EXPR (c) = num_teams;\n+  OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR (c) = num_teams_upper;\n+  OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (c) = num_teams_lower;\n   OMP_CLAUSE_CHAIN (c) = OMP_TARGET_CLAUSES (target);\n   OMP_TARGET_CLAUSES (target) = c;\n }"}, {"sha": "1a5426e35170d981cf07f2cff649985896ddec48", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -938,7 +938,7 @@ expand_teams_call (basic_block bb, gomp_teams *entry_stmt)\n     num_teams = build_int_cst (unsigned_type_node, 0);\n   else\n     {\n-      num_teams = OMP_CLAUSE_NUM_TEAMS_EXPR (num_teams);\n+      num_teams = OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR (num_teams);\n       num_teams = fold_convert (unsigned_type_node, num_teams);\n     }\n   tree thread_limit = omp_find_clause (clauses, OMP_CLAUSE_THREAD_LIMIT);\n@@ -9625,7 +9625,7 @@ get_target_arguments (gimple_stmt_iterator *gsi, gomp_target *tgt_stmt)\n   tree clauses = gimple_omp_target_clauses (tgt_stmt);\n   tree t, c = omp_find_clause (clauses, OMP_CLAUSE_NUM_TEAMS);\n   if (c)\n-    t = OMP_CLAUSE_NUM_TEAMS_EXPR (c);\n+    t = OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR (c);\n   else\n     t = integer_minus_one_node;\n   push_target_argument_according_to_value (gsi, GOMP_TARGET_ARG_DEVICE_ALL,"}, {"sha": "d5841ea731320ad931dc6d10ab9a30f23df13013", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -13906,7 +13906,7 @@ lower_omp_teams (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n     num_teams = build_int_cst (unsigned_type_node, 0);\n   else\n     {\n-      num_teams = OMP_CLAUSE_NUM_TEAMS_EXPR (num_teams);\n+      num_teams = OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR (num_teams);\n       num_teams = fold_convert (unsigned_type_node, num_teams);\n       gimplify_expr (&num_teams, &bind_body, NULL, is_gimple_val, fb_rvalue);\n     }"}, {"sha": "3ff49e0a29829ddab278804ccde7e3a972f8c637", "filename": "gcc/testsuite/c-c++-common/gomp/clauses-1.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fclauses-1.c?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -164,7 +164,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ll++;\n   #pragma omp target teams \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n-    shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) nowait depend(inout: dd[0]) \\\n+    shared(s) default(shared) reduction(+:r) num_teams(nte - 1:nte) thread_limit(tl) nowait depend(inout: dd[0]) \\\n     allocate (omp_default_mem_alloc:f) in_reduction(+:r2)\n     ;\n   #pragma omp target teams distribute \\\n@@ -175,7 +175,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ;\n   #pragma omp target teams distribute parallel for \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n-    shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) \\\n+    shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl) \\\n     collapse(1) dist_schedule(static, 16) \\\n     if (parallel: i2) num_threads (nth) proc_bind(spread) \\\n     lastprivate (l) schedule(static, 4) nowait depend(inout: dd[0]) order(concurrent) \\\n@@ -194,7 +194,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ll++;\n   #pragma omp target teams distribute simd \\\n     device(d) map (tofrom: m) if (i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n-    shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) \\\n+    shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl) \\\n     collapse(1) dist_schedule(static, 16) order(concurrent) \\\n     safelen(8) simdlen(4) aligned(q: 32) nowait depend(inout: dd[0]) nontemporal(ntm) \\\n     allocate (omp_default_mem_alloc:f) in_reduction(+:r2)\n@@ -236,7 +236,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ;\n   #pragma omp target\n   #pragma omp teams distribute parallel for \\\n-    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) \\\n+    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl) \\\n     collapse(1) dist_schedule(static, 16) \\\n     if (parallel: i2) num_threads (nth) proc_bind(spread) \\\n     lastprivate (l) schedule(static, 4) order(concurrent) allocate (omp_default_mem_alloc: f)\n@@ -254,7 +254,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ll++;\n   #pragma omp target\n   #pragma omp teams distribute simd \\\n-    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) \\\n+    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl) \\\n     collapse(1) dist_schedule(static, 16) order(concurrent) \\\n     safelen(8) simdlen(4) aligned(q: 32) if(i3) nontemporal(ntm) \\\n     allocate (omp_default_mem_alloc: f)\n@@ -268,7 +268,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n   for (int i = 0; i < 64; i++)\n     ll++;\n   #pragma omp teams distribute parallel for \\\n-    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) \\\n+    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl) \\\n     collapse(1) dist_schedule(static, 16) order(concurrent) \\\n     if (parallel: i2) num_threads (nth) proc_bind(spread) \\\n     lastprivate (l) schedule(static, 4) allocate (f)\n@@ -284,7 +284,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n   for (int i = 0; i < 64; i++)\n     ll++;\n   #pragma omp teams distribute parallel for simd \\\n-    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) \\\n+    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl) \\\n     collapse(1) dist_schedule(static, 16) \\\n     if (parallel: i2) num_threads (nth) proc_bind(spread) \\\n     lastprivate (l) schedule(static, 4) order(concurrent) \\\n@@ -417,7 +417,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n   for (l = 0; l < 64; l++)\n     ll++;\n   #pragma omp teams loop \\\n-    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) \\\n+    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl) \\\n     collapse(1) lastprivate (l) bind(teams) allocate (f)\n   for (l = 0; l < 64; ++l)\n     ;\n@@ -442,7 +442,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ;\n   #pragma omp target teams loop \\\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp) \\\n-    shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) nowait depend(inout: dd[0]) \\\n+    shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl) nowait depend(inout: dd[0]) \\\n     lastprivate (l) bind(teams) collapse(1) \\\n     allocate (omp_default_mem_alloc: f) in_reduction(+:r2)\n   for (l = 0; l < 64; ++l)"}, {"sha": "50cad856cb3bc2ffa2efb1ea6db9ac27ded78a24", "filename": "gcc/testsuite/c-c++-common/gomp/num-teams-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fnum-teams-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fnum-teams-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fnum-teams-1.c?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -0,0 +1,48 @@\n+int fn (int);\n+\n+void\n+foo (void)\n+{\n+  #pragma omp teams num_teams (4 : 6)\n+  ;\n+  #pragma omp teams num_teams (7)\n+  ;\n+}\n+\n+void\n+bar (void)\n+{\n+  #pragma omp target teams num_teams (5 : 19)\n+  ;\n+  #pragma omp target teams num_teams (21)\n+  ;\n+}\n+\n+void\n+baz (void)\n+{\n+  #pragma omp teams num_teams (fn (1) : fn (2))\n+  ;\n+  #pragma omp teams num_teams (fn (3))\n+  ;\n+}\n+\n+void\n+qux (void)\n+{\n+  #pragma omp target teams num_teams (fn (4) : fn (5))\n+  ;\n+  #pragma omp target teams num_teams (fn (6))\n+  ;\n+}\n+\n+void\n+corge (void)\n+{\n+  #pragma omp target\n+  #pragma omp teams num_teams (fn (7) : fn (8))\n+  ;\n+  #pragma omp target\n+  #pragma omp teams num_teams (fn (9))\n+  ;\n+}"}, {"sha": "242b994da228c90094848d743500d3fe8b6781ab", "filename": "gcc/testsuite/c-c++-common/gomp/num-teams-2.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fnum-teams-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fnum-teams-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fnum-teams-2.c?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -0,0 +1,27 @@\n+int fn (int);\n+\n+void\n+foo (int i)\n+{\n+  #pragma omp teams num_teams (6 : 4)\t\t/* { dg-warning \"'num_teams' lower bound '6' bigger than upper bound '4'\" } */\n+  ;\n+  #pragma omp teams num_teams (-7)\t\t/* { dg-warning \"'num_teams' value must be positive\" } */\n+  ;\n+  #pragma omp teams num_teams (i : -7)\t\t/* { dg-warning \"'num_teams' value must be positive\" } */\n+  ;\n+  #pragma omp teams num_teams (-7 : 8)\t\t/* { dg-warning \"'num_teams' value must be positive\" } */\n+  ;\n+}\n+\n+void\n+bar (int i)\n+{\n+  #pragma omp target teams num_teams (6 : 4)\t/* { dg-warning \"'num_teams' lower bound '6' bigger than upper bound '4'\" } */\n+  ;\n+  #pragma omp target teams num_teams (-7)\t/* { dg-warning \"'num_teams' value must be positive\" } */\n+  ;\n+  #pragma omp target teams num_teams (i : -7)\t/* { dg-warning \"'num_teams' value must be positive\" } */\n+  ;\n+  #pragma omp target teams num_teams (-7 : 8)\t/* { dg-warning \"'num_teams' value must be positive\" } */\n+  ;\n+}"}, {"sha": "319ad3241de7dc99e8f4fd5fe76598ebd14889ed", "filename": "gcc/testsuite/g++.dg/gomp/attrs-1.C", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-1.C?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -211,7 +211,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ll++;\n   [[omp::sequence (directive (target teams\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp)\n-    shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) nowait depend(inout: dd[0])\n+    shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl) nowait depend(inout: dd[0])\n     allocate (omp_default_mem_alloc:f) in_reduction(+:r2)))]]\n     ;\n   [[omp::sequence (directive (target\n@@ -226,7 +226,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ;\n   [[omp::directive (target teams distribute parallel for\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp)\n-    shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl)\n+    shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl)\n     collapse(1) dist_schedule(static, 16)\n     if (parallel: i2) num_threads (nth) proc_bind(spread)\n     lastprivate (l) schedule(static, 4) nowait depend(inout: dd[0]) order(concurrent)\n@@ -245,7 +245,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ll++;\n   [[omp::directive (target teams distribute simd\n     device(d) map (tofrom: m) if (i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp)\n-    shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl)\n+    shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl)\n     collapse(1) dist_schedule(static, 16) order(concurrent)\n     safelen(8) simdlen(4) aligned(q: 32) nowait depend(inout: dd[0]) nontemporal(ntm)\n     allocate (omp_default_mem_alloc:f) in_reduction(+:r2))]]\n@@ -309,7 +309,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n   for (int i = 0; i < 64; i++)\n     ;\n   [[omp::directive (teams\n-    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl)\n+    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl)\n     allocate (omp_default_mem_alloc: f))]]\n     ;\n   [[omp::sequence (omp::directive (target),\n@@ -322,7 +322,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ll++;\n   [[omp::sequence (directive (target),\n     directive (teams distribute parallel for simd\n-    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl)\n+    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl)\n     collapse(1) dist_schedule(static, 16)\n     if (parallel: i2) num_threads (nth) proc_bind(spread)\n     lastprivate (l) schedule(static, 4) order(concurrent)\n@@ -339,7 +339,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n   for (int i = 0; i < 64; i++)\n     ll++;\n   [[omp::directive (teams distribute parallel for\n-    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl)\n+    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl)\n     collapse(1) dist_schedule(static, 16)\n     if (parallel: i2) num_threads (nth) proc_bind(spread)\n     lastprivate (l) schedule(static, 4) copyin(t) allocate (f))]]\n@@ -353,7 +353,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n   for (int i = 0; i < 64; i++)\n     ll++;\n   [[omp::directive (teams distribute parallel for simd\n-    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl)\n+    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl)\n     collapse(1) dist_schedule(static, 16)\n     if (parallel: i2) num_threads (nth) proc_bind(spread)\n     lastprivate (l) schedule(static, 4)\n@@ -371,7 +371,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n   for (int i = 0; i < 64; i++)\n     ll++;\n   [[omp::directive (teams distribute simd\n-    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl)\n+    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte-1:nte) thread_limit(tl)\n     collapse(1) dist_schedule(static, 16) order(concurrent)\n     safelen(8) simdlen(4) aligned(q: 32) if(i3) nontemporal(ntm) allocate(f))]]\n   for (int i = 0; i < 64; i++)\n@@ -507,7 +507,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n   for (l = 0; l < 64; ++l)\n     ;\n   [[omp::directive (teams loop\n-    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl)\n+    private(p) firstprivate (f) shared(s) default(shared) reduction(+:r) num_teams(nte - 1:nte) thread_limit(tl)\n     collapse(1) lastprivate (l) order(concurrent) allocate (f))]]\n   for (l = 0; l < 64; ++l)\n     ;\n@@ -534,7 +534,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ;\n   [[omp::directive (target teams loop\n     device(d) map (tofrom: m) if (target: i1) private (p) firstprivate (f) defaultmap(tofrom: scalar) is_device_ptr (idp)\n-    shared(s) default(shared) reduction(+:r) num_teams(nte) thread_limit(tl) nowait depend(inout: dd[0])\n+    shared(s) default(shared) reduction(+:r) num_teams(nte - 1 : nte) thread_limit(tl) nowait depend(inout: dd[0])\n     lastprivate (l) order(concurrent) collapse(1)\n     allocate (omp_default_mem_alloc: f) in_reduction(+:r2))]]\n   for (l = 0; l < 64; ++l)"}, {"sha": "955b2dd04c7b8805dcc4e694aef53a727cec97ef", "filename": "gcc/testsuite/g++.dg/gomp/attrs-2.C", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fattrs-2.C?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -220,7 +220,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ;\n   [[omp::sequence (omp::directive (target teams distribute,\n     device(d),map (tofrom: m),if (target: i1),private (p),firstprivate (f),defaultmap(tofrom: scalar),is_device_ptr (idp),\n-    shared(s),default(shared),reduction(+:r),num_teams(nte),thread_limit(tl),order(concurrent),\n+    shared(s),default(shared),reduction(+:r),num_teams(nte-1:nte),thread_limit(tl),order(concurrent),\n     collapse(1),dist_schedule(static, 16),nowait depend(inout: dd[0]),allocate (omp_default_mem_alloc:f),in_reduction(+:r2)))]]\n   for (int i = 0; i < 64; i++)\n     ;\n@@ -235,7 +235,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ll++;\n   [[omp::directive (target teams distribute parallel for simd,\n     device(d),map (tofrom: m),if (target: i1),private (p),firstprivate (f),defaultmap(tofrom: scalar),is_device_ptr (idp),\n-    shared(s),default(shared),reduction(+:r),num_teams(nte),thread_limit(tl),\n+    shared(s),default(shared),reduction(+:r),num_teams(2:nte),thread_limit(tl),\n     collapse(1),dist_schedule(static, 16),\n     if (parallel: i2),num_threads (nth),proc_bind(spread),\n     lastprivate (l),schedule(static, 4),order(concurrent),\n@@ -304,7 +304,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n   [[omp::directive (taskwait)]];\n   [[omp::sequence (directive (target, nowait,depend(inout: dd[0]),in_reduction(+:r2)),\n     directive (teams distribute,\n-    private(p),firstprivate (f),shared(s),default(shared),reduction(+:r),num_teams(nte),thread_limit(tl),\n+    private(p),firstprivate(f),shared(s),default(shared),reduction(+:r),num_teams(nte - 1 : nte),thread_limit(tl),\n     collapse(1),dist_schedule(static, 16),allocate (omp_default_mem_alloc: f),order(concurrent)))]]\n   for (int i = 0; i < 64; i++)\n     ;\n@@ -314,7 +314,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ;\n   [[omp::sequence (omp::directive (target),\n     omp::directive (teams distribute parallel for,\n-    private(p),firstprivate (f),shared(s),default(shared),reduction(+:r),num_teams(nte),thread_limit(tl),\n+    private(p),firstprivate(f),shared(s),default(shared),reduction(+:r),num_teams(16:nte),thread_limit(tl),\n     collapse(1),dist_schedule(static, 16),\n     if (parallel: i2),num_threads (nth),proc_bind(spread),\n     lastprivate (l),schedule(static, 4),order(concurrent),allocate (omp_default_mem_alloc: f)))]]\n@@ -332,7 +332,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ll++;\n   [[omp::sequence (directive (target),\n     directive (teams distribute simd,\n-    private(p),firstprivate (f),shared(s),default(shared),reduction(+:r),num_teams(nte),thread_limit(tl),\n+    private(p),firstprivate(f),shared(s),default(shared),reduction(+:r),num_teams(nte-1:nte),thread_limit(tl),\n     collapse(1),dist_schedule(static, 16),order(concurrent),\n     safelen(8),simdlen(4),aligned(q: 32),if(i3),nontemporal(ntm),\n     allocate (omp_default_mem_alloc: f)))]]\n@@ -346,7 +346,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n   for (int i = 0; i < 64; i++)\n     ll++;\n   [[omp::directive (teams distribute parallel for,\n-    private(p),firstprivate (f),shared(s),default(shared),reduction(+:r),num_teams(nte),thread_limit(tl),\n+    private(p),firstprivate (f),shared(s),default(shared),reduction(+:r),num_teams(nte-1:nte),thread_limit(tl),\n     collapse(1),dist_schedule(static, 16),order(concurrent),\n     if (parallel: i2),num_threads (nth),proc_bind(spread),\n     lastprivate (l),schedule(static, 4),allocate (f))]]\n@@ -362,7 +362,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n   for (int i = 0; i < 64; i++)\n     ll++;\n   [[omp::directive (teams distribute parallel for simd,\n-    private(p),firstprivate (f),shared(s),default(shared),reduction(+:r),num_teams(nte),thread_limit(tl),\n+    private(p),firstprivate (f),shared(s),default(shared),reduction(+:r),num_teams(nte-1:nte),thread_limit(tl),\n     collapse(1),dist_schedule(static, 16),\n     if (parallel: i2),num_threads (nth),proc_bind(spread),\n     lastprivate (l),schedule(static, 4),order(concurrent),\n@@ -502,7 +502,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n   for (l = 0; l < 64; l++)\n     ll++;\n   [[omp::directive (teams loop,\n-    private(p),firstprivate (f),shared(s),default(shared),reduction(+:r),num_teams(nte),thread_limit(tl),\n+    private(p),firstprivate (f),shared(s),default(shared),reduction(+:r),num_teams(nte-1:nte),thread_limit(tl),\n     collapse(1),lastprivate (l),bind(teams),allocate (f))]]\n   for (l = 0; l < 64; ++l)\n     ;\n@@ -527,7 +527,7 @@ bar (int d, int m, int i1, int i2, int i3, int p, int *idp, int s,\n     ;\n   [[omp::directive (target teams loop,\n     device(d),map (tofrom: m),if (target: i1),private (p),firstprivate (f),defaultmap(tofrom: scalar),is_device_ptr (idp),\n-    shared(s),default(shared),reduction(+:r),num_teams(nte),thread_limit(tl),nowait,depend(inout: dd[0]),\n+    shared(s),default(shared),reduction(+:r),num_teams(nte-1:nte),thread_limit(tl),nowait,depend(inout: dd[0]),\n     lastprivate (l),bind(teams),collapse(1),\n     allocate (omp_default_mem_alloc: f),in_reduction(+:r2))]]\n   for (l = 0; l < 64; ++l)"}, {"sha": "5b36ffb91ed441a2342b63e919ea34e1d97904f4", "filename": "gcc/testsuite/g++.dg/gomp/num-teams-1.C", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fnum-teams-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fnum-teams-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fnum-teams-1.C?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -0,0 +1,122 @@\n+int fn1 (int);\n+template <typename T>\n+T fn2 (T);\n+\n+template <int N>\n+void\n+f1 ()\n+{\n+  #pragma omp teams num_teams (4 : 6)\n+  ;\n+  #pragma omp teams num_teams (7)\n+  ;\n+}\n+\n+template <int N>\n+void\n+f2 ()\n+{\n+  #pragma omp target teams num_teams (5 : 19)\n+  ;\n+  #pragma omp target teams num_teams (21)\n+  ;\n+}\n+\n+template <int N>\n+void\n+f3 ()\n+{\n+  #pragma omp teams num_teams (fn1 (1) : fn1 (2))\n+  ;\n+  #pragma omp teams num_teams (fn1 (3))\n+  ;\n+}\n+\n+template <int N>\n+void\n+f4 ()\n+{\n+  #pragma omp target teams num_teams (fn1 (4) : fn1 (5))\n+  ;\n+  #pragma omp target teams num_teams (fn1 (6))\n+  ;\n+}\n+\n+template <int N>\n+void\n+f5 ()\n+{\n+  #pragma omp target\n+  #pragma omp teams num_teams (fn1 (7) : fn1 (8))\n+  ;\n+  #pragma omp target\n+  #pragma omp teams num_teams (fn1 (9))\n+  ;\n+}\n+\n+template <typename T, T N4, T N6, T N7>\n+void\n+f1 ()\n+{\n+  #pragma omp teams num_teams (N4 : N6)\n+  ;\n+  #pragma omp teams num_teams (N7)\n+  ;\n+}\n+\n+template <typename T, T N5, T N19, T N21>\n+void\n+f2 ()\n+{\n+  #pragma omp target teams num_teams (N5 : N19)\n+  ;\n+  #pragma omp target teams num_teams (N21)\n+  ;\n+}\n+\n+template <typename T, T N1, T N2, T N3>\n+void\n+f3 ()\n+{\n+  #pragma omp teams num_teams (fn2 (N1) : fn2 (N2))\n+  ;\n+  #pragma omp teams num_teams (fn2 (N3))\n+  ;\n+}\n+\n+template <typename T, T N4, T N5, T N6>\n+void\n+f4 ()\n+{\n+  #pragma omp target teams num_teams (fn2 (N4) : fn2 (N5))\n+  ;\n+  #pragma omp target teams num_teams (fn2 (N6))\n+  ;\n+}\n+\n+template <typename T, T N7, T N8, T N9>\n+void\n+f5 ()\n+{\n+  #pragma omp target\n+  #pragma omp teams num_teams (fn2 (N7) : fn2 (N8))\n+  ;\n+  #pragma omp target\n+  #pragma omp teams num_teams (fn2 (N9))\n+  ;\n+}\n+\n+void\n+test ()\n+{\n+  f1<0> ();\n+  f2<0> ();\n+  f3<0> ();\n+  f4<0> ();\n+  f5<0> ();\n+  f1<int, 4, 6, 7> ();\n+  f2<int, 5, 19, 21> ();\n+  f3<int, 1, 2, 3> ();\n+  f4<int, 4, 5, 6> ();\n+  f5<int, 7, 8, 9> ();\n+}"}, {"sha": "8b8933cd0d33f026d4a3bf714a5fc8d2adefbe53", "filename": "gcc/testsuite/g++.dg/gomp/num-teams-2.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fnum-teams-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fnum-teams-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fnum-teams-2.C?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -0,0 +1,64 @@\n+template <int N>\n+void\n+foo (int i)\n+{\n+  #pragma omp teams num_teams (6 : 4)\t\t// { dg-warning \"'num_teams' lower bound '6' bigger than upper bound '4'\" }\n+  ;\n+  #pragma omp teams num_teams (-7)\t\t// { dg-warning \"'num_teams' value must be positive\" }\n+  ;\n+  #pragma omp teams num_teams (i : -7)\t\t// { dg-warning \"'num_teams' value must be positive\" }\n+  ;\n+  #pragma omp teams num_teams (-7 : 8)\t\t// { dg-warning \"'num_teams' value must be positive\" }\n+  ;\n+}\n+\n+template <int N>\n+void\n+bar (int i)\n+{\n+  #pragma omp target teams num_teams (6 : 4)\t// { dg-warning \"'num_teams' lower bound '6' bigger than upper bound '4'\" }\n+  ;\n+  #pragma omp target teams num_teams (-7)\t// { dg-warning \"'num_teams' value must be positive\" }\n+  ;\n+  #pragma omp target teams num_teams (i : -7)\t// { dg-warning \"'num_teams' value must be positive\" }\n+  ;\n+  #pragma omp target teams num_teams (-7 : 8)\t// { dg-warning \"'num_teams' value must be positive\" }\n+  ;\n+}\n+\n+template <typename T, T NM7, T N4, T N6, T N8>\n+void\n+baz (T i)\n+{\n+  #pragma omp teams num_teams (N6 : N4)\t\t// { dg-warning \"'num_teams' lower bound '6' bigger than upper bound '4'\" }\n+  ;\n+  #pragma omp teams num_teams (NM7)\t\t// { dg-warning \"'num_teams' value must be positive\" }\n+  ;\n+  #pragma omp teams num_teams (i : NM7)\t\t// { dg-warning \"'num_teams' value must be positive\" }\n+  ;\n+  #pragma omp teams num_teams (NM7 : N8)\t// { dg-warning \"'num_teams' value must be positive\" }\n+  ;\n+}\n+\n+template <typename T, T NM7, T N4, T N6, T N8>\n+void\n+qux (T i)\n+{\n+  #pragma omp target teams num_teams (N6 : N4)\t// { dg-warning \"'num_teams' lower bound '6' bigger than upper bound '4'\" }\n+  ;\n+  #pragma omp target teams num_teams (NM7)\t// { dg-warning \"'num_teams' value must be positive\" }\n+  ;\n+  #pragma omp target teams num_teams (i : NM7)\t// { dg-warning \"'num_teams' value must be positive\" }\n+  ;\n+  #pragma omp target teams num_teams (NM7 : N8)\t// { dg-warning \"'num_teams' value must be positive\" }\n+  ;\n+}\n+\n+void\n+test ()\n+{\n+  foo<0> (5);\n+  bar<0> (5);\n+  baz<int, -7, 4, 6, 8> (5);\n+  qux<int, -7, 4, 6, 8> (5);\n+}"}, {"sha": "f6383b91efae8626a402e0e048f54d3d39835c19", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -994,7 +994,13 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n \n     case OMP_CLAUSE_NUM_TEAMS:\n       pp_string (pp, \"num_teams(\");\n-      dump_generic_node (pp, OMP_CLAUSE_NUM_TEAMS_EXPR (clause),\n+      if (OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (clause))\n+\t{\n+\t  dump_generic_node (pp, OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR (clause),\n+\t\t\t     spc, flags, false);\n+\t  pp_colon (pp);\n+\t}\n+      dump_generic_node (pp, OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR (clause),\n \t\t\t spc, flags, false);\n       pp_right_paren (pp);\n       break;"}, {"sha": "f2c829fa4c61cf8f2d89da7d3a1bce55f780e423", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -330,7 +330,7 @@ unsigned const char omp_clause_num_ops[] =\n   1, /* OMP_CLAUSE_DIST_SCHEDULE  */\n   0, /* OMP_CLAUSE_INBRANCH  */\n   0, /* OMP_CLAUSE_NOTINBRANCH  */\n-  1, /* OMP_CLAUSE_NUM_TEAMS  */\n+  2, /* OMP_CLAUSE_NUM_TEAMS  */\n   1, /* OMP_CLAUSE_THREAD_LIMIT  */\n   0, /* OMP_CLAUSE_PROC_BIND  */\n   1, /* OMP_CLAUSE_SAFELEN  */"}, {"sha": "92c3d77f09f0dd0522c20233408c3f20d0d276d7", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -1803,9 +1803,12 @@ class auto_suppress_location_wrappers\n #define OMP_CLAUSE_ALLOCATE_COMBINED(NODE) \\\n   (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_ALLOCATE)->base.public_flag)\n \n-#define OMP_CLAUSE_NUM_TEAMS_EXPR(NODE) \\\n+#define OMP_CLAUSE_NUM_TEAMS_UPPER_EXPR(NODE) \\\n   OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_NUM_TEAMS), 0)\n \n+#define OMP_CLAUSE_NUM_TEAMS_LOWER_EXPR(NODE) \\\n+  OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_NUM_TEAMS), 1)\n+\n #define OMP_CLAUSE_THREAD_LIMIT_EXPR(NODE) \\\n   OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, \\\n \t\t\t\t\t\tOMP_CLAUSE_THREAD_LIMIT), 0)"}, {"sha": "76189ef033060b97b6de018340983109d43dd142", "filename": "libgomp/testsuite/libgomp.c-c++-common/teams-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48d7327f2aaf65e224f5f0793a65b950297f6c7f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fteams-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48d7327f2aaf65e224f5f0793a65b950297f6c7f/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fteams-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fteams-1.c?ref=48d7327f2aaf65e224f5f0793a65b950297f6c7f", "patch": "@@ -0,0 +1,26 @@\n+#include <omp.h>\n+#include <stdlib.h>\n+\n+int\n+main ()\n+{\n+  #pragma omp teams num_teams (5)\n+  {\n+    if (omp_get_num_teams () != 5)\n+      abort ();\n+    #pragma omp distribute dist_schedule(static,1)\n+    for (int i = 0; i < 5; ++i)\n+      if (omp_get_team_num () != i)\n+\tabort ();\n+  }\n+  #pragma omp teams num_teams (7 : 9)\n+  {\n+    if (omp_get_num_teams () < 7 || omp_get_num_teams () > 9)\n+      abort ();\n+    #pragma omp distribute dist_schedule(static,1)\n+    for (int i = 0; i < omp_get_num_teams (); ++i)\n+      if (omp_get_team_num () != i)\n+\tabort ();\n+  }\n+  return 0;\n+}"}]}