{"sha": "92900aec89c94d569a94c4f2e42d90e25f993bb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI5MDBhZWM4OWM5NGQ1NjlhOTRjNGYyZTQyZDkwZTI1Zjk5M2JiMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-10-17T13:19:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-10-17T13:19:51Z"}, "message": "2017-10-17  Richard Biener  <rguenther@suse.de>\n\n\t* graphite-scop-detection.c\n\t(scop_detection::stmt_has_simple_data_refs_p): Always use\n\tthe full nest as region.\n\t(try_generate_gimple_bb): Likewise.\n\t* sese.c (scalar_evolution_in_region): Simplify now that\n\tSCEV can handle instantiation in regions.\n\t* tree-scalar-evolution.c (instantiate_scev_name): Also instantiate\n\tin the non-loop part of a function if requested.\n\nFrom-SVN: r253811", "tree": {"sha": "0c41f10e1e0ccec68344f859431ef7ab51907ab3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c41f10e1e0ccec68344f859431ef7ab51907ab3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92900aec89c94d569a94c4f2e42d90e25f993bb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92900aec89c94d569a94c4f2e42d90e25f993bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92900aec89c94d569a94c4f2e42d90e25f993bb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92900aec89c94d569a94c4f2e42d90e25f993bb0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7ea3a3c75964dfef45eaa771fc914ec15a6aada9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea3a3c75964dfef45eaa771fc914ec15a6aada9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ea3a3c75964dfef45eaa771fc914ec15a6aada9"}], "stats": {"total": 68, "additions": 21, "deletions": 47}, "files": [{"sha": "52ffae41945a481546fd0ae22acdbea1cda8b183", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92900aec89c94d569a94c4f2e42d90e25f993bb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92900aec89c94d569a94c4f2e42d90e25f993bb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92900aec89c94d569a94c4f2e42d90e25f993bb0", "patch": "@@ -1,3 +1,14 @@\n+2017-10-17  Richard Biener  <rguenther@suse.de>\n+\n+\t* graphite-scop-detection.c\n+\t(scop_detection::stmt_has_simple_data_refs_p): Always use\n+\tthe full nest as region.\n+\t(try_generate_gimple_bb): Likewise.\n+\t* sese.c (scalar_evolution_in_region): Simplify now that\n+\tSCEV can handle instantiation in regions.\n+\t* tree-scalar-evolution.c (instantiate_scev_name): Also instantiate\n+\tin the non-loop part of a function if requested.\n+\n 2017-10-17  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82563"}, {"sha": "a8963e1dd81706ba15adb40cce001e8a7468b960", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92900aec89c94d569a94c4f2e42d90e25f993bb0/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92900aec89c94d569a94c4f2e42d90e25f993bb0/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=92900aec89c94d569a94c4f2e42d90e25f993bb0", "patch": "@@ -1005,15 +1005,10 @@ scop_detection::graphite_can_represent_expr (sese_l scop, loop_p loop,\n bool\n scop_detection::stmt_has_simple_data_refs_p (sese_l scop, gimple *stmt)\n {\n-  edge nest;\n+  edge nest = scop.entry;;\n   loop_p loop = loop_containing_stmt (stmt);\n   if (!loop_in_sese_p (loop, scop))\n-    {\n-      nest = scop.entry;\n-      loop = NULL;\n-    }\n-  else\n-    nest = loop_preheader_edge (outermost_loop_in_sese (scop, gimple_bb (stmt)));\n+    loop = NULL;\n \n   auto_vec<data_reference_p> drs;\n   if (! graphite_find_data_references_in_stmt (nest, loop, stmt, &drs))\n@@ -1381,15 +1376,10 @@ try_generate_gimple_bb (scop_p scop, basic_block bb)\n   vec<scalar_use> reads = vNULL;\n \n   sese_l region = scop->scop_info->region;\n-  edge nest;\n+  edge nest = region.entry;\n   loop_p loop = bb->loop_father;\n   if (!loop_in_sese_p (loop, region))\n-    {\n-      nest = region.entry;\n-      loop = NULL;\n-    }\n-  else\n-    nest = loop_preheader_edge (outermost_loop_in_sese (region, bb));\n+    loop = NULL;\n \n   for (gimple_stmt_iterator gsi = gsi_start_bb (bb); !gsi_end_p (gsi);\n        gsi_next (&gsi))"}, {"sha": "7fcda75a028c35d0c33dd5d1b7bebaf21b921f91", "filename": "gcc/sese.c", "status": "modified", "additions": 4, "deletions": 29, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92900aec89c94d569a94c4f2e42d90e25f993bb0/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92900aec89c94d569a94c4f2e42d90e25f993bb0/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=92900aec89c94d569a94c4f2e42d90e25f993bb0", "patch": "@@ -459,41 +459,16 @@ scev_analyzable_p (tree def, sese_l &region)\n tree\n scalar_evolution_in_region (const sese_l &region, loop_p loop, tree t)\n {\n-  gimple *def;\n-  struct loop *def_loop;\n-\n   /* SCOP parameters.  */\n   if (TREE_CODE (t) == SSA_NAME\n       && !defined_in_sese_p (t, region))\n     return t;\n \n-  if (TREE_CODE (t) != SSA_NAME\n-      || loop_in_sese_p (loop, region))\n-    /* FIXME: we would need instantiate SCEV to work on a region, and be more\n-       flexible wrt. memory loads that may be invariant in the region.  */\n-    return instantiate_scev (region.entry, loop,\n-\t\t\t     analyze_scalar_evolution (loop, t));\n-\n-  def = SSA_NAME_DEF_STMT (t);\n-  def_loop = loop_containing_stmt (def);\n-\n-  if (loop_in_sese_p (def_loop, region))\n-    {\n-      t = analyze_scalar_evolution (def_loop, t);\n-      def_loop = superloop_at_depth (def_loop, loop_depth (loop) + 1);\n-      t = compute_overall_effect_of_inner_loop (def_loop, t);\n-      return t;\n-    }\n-\n-  bool has_vdefs = false;\n-  if (invariant_in_sese_p_rec (t, region, &has_vdefs))\n-    return t;\n-\n-  /* T variates in REGION.  */\n-  if (has_vdefs)\n-    return chrec_dont_know;\n+  if (!loop_in_sese_p (loop, region))\n+    loop = NULL;\n \n-  return instantiate_scev (region.entry, loop, t);\n+  return instantiate_scev (region.entry, loop,\n+\t\t\t   analyze_scalar_evolution (loop, t));\n }\n \n /* Return true if BB is empty, contains only DEBUG_INSNs.  */"}, {"sha": "b47b4ed77209ee76a7108aef8c17a873d02f522a", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92900aec89c94d569a94c4f2e42d90e25f993bb0/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92900aec89c94d569a94c4f2e42d90e25f993bb0/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=92900aec89c94d569a94c4f2e42d90e25f993bb0", "patch": "@@ -2358,11 +2358,9 @@ instantiate_scev_name (edge instantiate_below,\n   struct loop *def_loop;\n   basic_block def_bb = gimple_bb (SSA_NAME_DEF_STMT (chrec));\n \n-  /* A parameter (or loop invariant and we do not want to include\n-     evolutions in outer loops), nothing to do.  */\n+  /* A parameter, nothing to do.  */\n   if (!def_bb\n-      || loop_depth (def_bb->loop_father) == 0\n-      || ! dominated_by_p (CDI_DOMINATORS, def_bb, instantiate_below->dest))\n+      || !dominated_by_p (CDI_DOMINATORS, def_bb, instantiate_below->dest))\n     return chrec;\n \n   /* We cache the value of instantiated variable to avoid exponential"}]}