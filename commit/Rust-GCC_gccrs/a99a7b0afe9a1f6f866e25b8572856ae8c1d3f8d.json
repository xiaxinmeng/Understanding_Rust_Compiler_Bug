{"sha": "a99a7b0afe9a1f6f866e25b8572856ae8c1d3f8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk5YTdiMGFmZTlhMWY2Zjg2NmUyNWI4NTcyODU2YWU4YzFkM2Y4ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-04T05:01:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-05T12:25:52Z"}, "message": "c++: constexpr if and nested generic lambda [PR99201]\n\nWhen building up *_EXTRA_ARGS for a constexpr if or pack expansion, we need\nto walk into the body of a lambda to find all the local_specializations that\nwe need to remember, like we do in find_parameter_packs_r.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99201\n\t* pt.c (class el_data): Add visited field.\n\t(extract_local_specs): Pass it to cp_walk_tree.\n\t(extract_locals_r): Walk into the body of a lambda.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99201\n\t* g++.dg/cpp1z/constexpr-if-lambda4.C: New test.", "tree": {"sha": "044996edc2f599e93137ab1cfce6d4d4c14e01c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/044996edc2f599e93137ab1cfce6d4d4c14e01c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a99a7b0afe9a1f6f866e25b8572856ae8c1d3f8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a99a7b0afe9a1f6f866e25b8572856ae8c1d3f8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a99a7b0afe9a1f6f866e25b8572856ae8c1d3f8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a99a7b0afe9a1f6f866e25b8572856ae8c1d3f8d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a44a753a35542f86e82e198595ce3553f6d718f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a44a753a35542f86e82e198595ce3553f6d718f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a44a753a35542f86e82e198595ce3553f6d718f6"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "1d19a59dd6251cf9c533edf2a1c1eed632ac10c2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a99a7b0afe9a1f6f866e25b8572856ae8c1d3f8d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a99a7b0afe9a1f6f866e25b8572856ae8c1d3f8d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a99a7b0afe9a1f6f866e25b8572856ae8c1d3f8d", "patch": "@@ -12757,7 +12757,11 @@ tsubst_binary_right_fold (tree t, tree args, tsubst_flags_t complain,\n class el_data\n {\n public:\n+  /* Set of variables declared within the pattern.  */\n   hash_set<tree> internal;\n+  /* Set of AST nodes that have been visited by the traversal.  */\n+  hash_set<tree> visited;\n+  /* List of local_specializations used within the pattern.  */\n   tree extra;\n   tsubst_flags_t complain;\n \n@@ -12777,6 +12781,15 @@ extract_locals_r (tree *tp, int */*walk_subtrees*/, void *data_)\n \n   if (TREE_CODE (*tp) == DECL_EXPR)\n     data.internal.add (DECL_EXPR_DECL (*tp));\n+  else if (TREE_CODE (*tp) == LAMBDA_EXPR)\n+    {\n+      /* Since we defer implicit capture, look in the parms and body.  */\n+      tree fn = lambda_function (*tp);\n+      cp_walk_tree (&TREE_TYPE (fn), &extract_locals_r, &data,\n+\t\t    &data.visited);\n+      cp_walk_tree (&DECL_SAVED_TREE (fn), &extract_locals_r, &data,\n+\t\t    &data.visited);\n+    }\n   else if (tree spec = retrieve_local_specialization (*tp))\n     {\n       if (data.internal.contains (*tp))\n@@ -12833,7 +12846,7 @@ static tree\n extract_local_specs (tree pattern, tsubst_flags_t complain)\n {\n   el_data data (complain);\n-  cp_walk_tree_without_duplicates (&pattern, extract_locals_r, &data);\n+  cp_walk_tree (&pattern, extract_locals_r, &data, &data.visited);\n   return data.extra;\n }\n "}, {"sha": "99408025629229c33e363742691dedb599e334c4", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if-lambda4.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a99a7b0afe9a1f6f866e25b8572856ae8c1d3f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if-lambda4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a99a7b0afe9a1f6f866e25b8572856ae8c1d3f8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if-lambda4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if-lambda4.C?ref=a99a7b0afe9a1f6f866e25b8572856ae8c1d3f8d", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/99201\n+// { dg-do compile { target c++17 } }\n+\n+template <typename RefF>\n+  auto\n+  make_tester(const RefF& reffun)\n+  {\n+    return [=](auto in) {\n+      auto&& expected = [&](const auto&... vs) {\n+        if constexpr (sizeof(in) > 0)\n+          return [&](int i) { return reffun(vs[i]...); }(0);\n+        else\n+          return [&](int i) { return reffun(vs[i]...); }(0);\n+      };\n+    };\n+  }\n+\n+int main()\n+{\n+  make_tester([](int x) { return x; })(0);\n+  return 0;\n+}"}]}