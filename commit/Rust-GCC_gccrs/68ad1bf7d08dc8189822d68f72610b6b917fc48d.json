{"sha": "68ad1bf7d08dc8189822d68f72610b6b917fc48d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhhZDFiZjdkMDhkYzgxODk4MjJkNjhmNzI2MTBiNmI5MTdmYzQ4ZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-03-07T21:04:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-03-07T21:04:18Z"}, "message": "lambda.c (is_capture_proxy_with_ref): Remove.\n\n\t* lambda.c (is_capture_proxy_with_ref): Remove.\n\n\t* constexpr.c, expr.c, cp-tree.h, semantics.c: Adjust.\n\nFrom-SVN: r258341", "tree": {"sha": "8b0543de41823257bb455e6cdfe52c7a6d57af69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b0543de41823257bb455e6cdfe52c7a6d57af69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68ad1bf7d08dc8189822d68f72610b6b917fc48d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ad1bf7d08dc8189822d68f72610b6b917fc48d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68ad1bf7d08dc8189822d68f72610b6b917fc48d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ad1bf7d08dc8189822d68f72610b6b917fc48d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "335b7b5ad22ced0e2d4af7a3002a727caafbad02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/335b7b5ad22ced0e2d4af7a3002a727caafbad02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/335b7b5ad22ced0e2d4af7a3002a727caafbad02"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "9dd7c179710572dec1fc10238826e067958c12bf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ad1bf7d08dc8189822d68f72610b6b917fc48d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ad1bf7d08dc8189822d68f72610b6b917fc48d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=68ad1bf7d08dc8189822d68f72610b6b917fc48d", "patch": "@@ -1,3 +1,8 @@\n+2018-03-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* lambda.c (is_capture_proxy_with_ref): Remove.\n+\t* constexpr.c, expr.c, cp-tree.h, semantics.c: Adjust.\n+\n 2018-03-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/84684"}, {"sha": "2c5a71f3ee5635e63fb3457694d94ff2c2909a49", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ad1bf7d08dc8189822d68f72610b6b917fc48d/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ad1bf7d08dc8189822d68f72610b6b917fc48d/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=68ad1bf7d08dc8189822d68f72610b6b917fc48d", "patch": "@@ -5429,7 +5429,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n     case VAR_DECL:\n       if (DECL_HAS_VALUE_EXPR_P (t))\n \t{\n-\t  if (now && is_capture_proxy_with_ref (t))\n+\t  if (now && is_normal_capture_proxy (t))\n \t    {\n \t      /* -- in a lambda-expression, a reference to this or to a\n \t\t variable with automatic storage duration defined outside that"}, {"sha": "190286dceddb26ce2d2e5c4ba16c74dc316d740a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ad1bf7d08dc8189822d68f72610b6b917fc48d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ad1bf7d08dc8189822d68f72610b6b917fc48d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=68ad1bf7d08dc8189822d68f72610b6b917fc48d", "patch": "@@ -6895,7 +6895,6 @@ extern void insert_capture_proxy\t\t(tree);\n extern void insert_pending_capture_proxies\t(void);\n extern bool is_capture_proxy\t\t\t(tree);\n extern bool is_normal_capture_proxy             (tree);\n-extern bool is_capture_proxy_with_ref           (tree);\n extern void register_capture_members\t\t(tree);\n extern tree lambda_expr_this_capture            (tree, bool);\n extern void maybe_generic_this_capture\t\t(tree, tree);"}, {"sha": "2e67986897061d27bbd4b368af888025d76988d6", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ad1bf7d08dc8189822d68f72610b6b917fc48d/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ad1bf7d08dc8189822d68f72610b6b917fc48d/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=68ad1bf7d08dc8189822d68f72610b6b917fc48d", "patch": "@@ -111,7 +111,7 @@ mark_use (tree expr, bool rvalue_p, bool read_p,\n     {\n     case VAR_DECL:\n     case PARM_DECL:\n-      if (rvalue_p && is_capture_proxy_with_ref (expr))\n+      if (rvalue_p && is_normal_capture_proxy (expr))\n \t{\n \t  /* Look through capture by copy.  */\n \t  tree cap = DECL_CAPTURED_VARIABLE (expr);\n@@ -154,7 +154,7 @@ mark_use (tree expr, bool rvalue_p, bool read_p,\n \t{\n \t  /* Try to look through the reference.  */\n \t  tree ref = TREE_OPERAND (expr, 0);\n-\t  if (rvalue_p && is_capture_proxy_with_ref (ref))\n+\t  if (rvalue_p && is_normal_capture_proxy (ref))\n \t    {\n \t      /* Look through capture by reference.  */\n \t      tree cap = DECL_CAPTURED_VARIABLE (ref);"}, {"sha": "094979e81a3bd4be34b2009f84daef3bfa3be0a3", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ad1bf7d08dc8189822d68f72610b6b917fc48d/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ad1bf7d08dc8189822d68f72610b6b917fc48d/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=68ad1bf7d08dc8189822d68f72610b6b917fc48d", "patch": "@@ -291,24 +291,13 @@ is_normal_capture_proxy (tree decl)\n   return DECL_NORMAL_CAPTURE_P (val);\n }\n \n-/* Returns true iff DECL is a capture proxy for which we can use\n-   DECL_CAPTURED_VARIABLE.  In effect, this is a normal proxy other than a\n-   nested capture of a function parameter pack.  */\n-\n-bool\n-is_capture_proxy_with_ref (tree var)\n-{\n-  return (is_normal_capture_proxy (var) && DECL_LANG_SPECIFIC (var)\n-\t  && DECL_CAPTURED_VARIABLE (var));\n-}\n-\n /* VAR is a capture proxy created by build_capture_proxy; add it to the\n    current function, which is the operator() for the appropriate lambda.  */\n \n void\n insert_capture_proxy (tree var)\n {\n-  if (is_capture_proxy_with_ref (var))\n+  if (is_normal_capture_proxy (var))\n     {\n       tree cap = DECL_CAPTURED_VARIABLE (var);\n       if (CHECKING_P)"}, {"sha": "bb8b5953539ef1a64f8049ea037e0632362bc0ee", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ad1bf7d08dc8189822d68f72610b6b917fc48d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ad1bf7d08dc8189822d68f72610b6b917fc48d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=68ad1bf7d08dc8189822d68f72610b6b917fc48d", "patch": "@@ -3332,7 +3332,7 @@ process_outer_var_ref (tree decl, tsubst_flags_t complain, bool odr_use)\n     {\n       /* Check whether we've already built a proxy.  */\n       tree var = decl;\n-      while (is_capture_proxy_with_ref (var))\n+      while (is_normal_capture_proxy (var))\n \tvar = DECL_CAPTURED_VARIABLE (var);\n       tree d = retrieve_local_specialization (var);\n "}]}