{"sha": "cd5ecab6a73af62791d39b85db942600ccc37dad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q1ZWNhYjZhNzNhZjYyNzkxZDM5Yjg1ZGI5NDI2MDBjY2MzN2RhZA==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2007-05-29T21:10:48Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-05-29T21:10:48Z"}, "message": "gfortran.h: Renamed 'enum gfc_generic_isym_id' to 'enum gfc_isym_id'...\n\n2007-05-29  Daniel Franke  <franke.daniel@gmail.com>\n\n        * gfortran.h: Renamed 'enum gfc_generic_isym_id' to 'enum gfc_isym_id',\n        added missing GFC_ISYM_* enumerators, ordered alphabetically.\n        (struct gfc_intrinsic_sym): Renamed 'generic_id' to 'id'.\n        (gfc_find_subroutine): New prototype.\n        * intrinsic.c (add_sym, add_sym_*): Added argument 'id' and changed all callers.\n        (find_subroutine): Renamed to 'gfc_find_subroutine', removed static.\n        * dependency.c: Changed usage of isym->generic_id to isym->id.\n        * openmp.c: Likewise.\n        * resolve.c: Likewise.\n        * trans-array.c: Likewise.\n        * trans-expr.c: Likewise.\n        * trans-intrinsic.c: Likewise.\n        * trans-openmp.c: Likewise.\n\nFrom-SVN: r125168", "tree": {"sha": "a073a1400b9461ba32692af86f7f2c527a3cad86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a073a1400b9461ba32692af86f7f2c527a3cad86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd5ecab6a73af62791d39b85db942600ccc37dad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5ecab6a73af62791d39b85db942600ccc37dad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd5ecab6a73af62791d39b85db942600ccc37dad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5ecab6a73af62791d39b85db942600ccc37dad/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7616c4045535a8eb987dfc0f2fed84c3efbc675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7616c4045535a8eb987dfc0f2fed84c3efbc675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7616c4045535a8eb987dfc0f2fed84c3efbc675"}], "stats": {"total": 832, "additions": 448, "deletions": 384}, "files": [{"sha": "e61c6e46bf1ed2ff82a656859e4d8fcb144bf2f8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cd5ecab6a73af62791d39b85db942600ccc37dad", "patch": "@@ -1,3 +1,19 @@\n+2007-05-29  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\t* gfortran.h: Renamed 'enum gfc_generic_isym_id' to 'enum gfc_isym_id',\n+\tadded missing GFC_ISYM_* enumerators, ordered alphabetically.\n+\t(struct gfc_intrinsic_sym): Renamed 'generic_id' to 'id'.\n+\t(gfc_find_subroutine): New prototype.\n+\t* intrinsic.c (add_sym, add_sym_*): Added argument 'id' and changed all callers.\n+\t(find_subroutine): Renamed to 'gfc_find_subroutine', removed static.  \n+\t* dependency.c: Changed usage of isym->generic_id to isym->id.  \n+\t* openmp.c: Likewise.  \n+\t* resolve.c: Likewise.  \n+\t* trans-array.c: Likewise.  \n+\t* trans-expr.c: Likewise.  \n+\t* trans-intrinsic.c: Likewise.  \n+\t* trans-openmp.c: Likewise.\n+\n 2007-05-28  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n \n \t* gfortran.h (gfc_generic_isym_id): Add GFC_ISYM_SIZEOF."}, {"sha": "5ef63b4406c9e8d8417a87b3732917411fd7b468", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=cd5ecab6a73af62791d39b85db942600ccc37dad", "patch": "@@ -222,7 +222,7 @@ gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n       /* We should list the \"constant\" intrinsic functions.  Those\n \t without side-effects that provide equal results given equal\n \t argument lists.  */\n-      switch (e1->value.function.isym->generic_id)\n+      switch (e1->value.function.isym->id)\n \t{\n \tcase GFC_ISYM_CONVERSION:\n \t  /* Handle integer extensions specially, as __convert_i4_i8\n@@ -373,7 +373,7 @@ gfc_get_noncopying_intrinsic_argument (gfc_expr *expr)\n   if (expr->expr_type != EXPR_FUNCTION || !expr->value.function.isym)\n     return NULL;\n \n-  switch (expr->value.function.isym->generic_id)\n+  switch (expr->value.function.isym->id)\n     {\n     case GFC_ISYM_TRANSPOSE:\n       return expr->value.function.actual->expr;"}, {"sha": "cd0dfd12069f833916aa1185308400a45e1dafa4", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 59, "deletions": 16, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=cd5ecab6a73af62791d39b85db942600ccc37dad", "patch": "@@ -303,11 +303,12 @@ extern const mstring ifsrc_types[];\n /* Enumeration of all the generic intrinsic functions.  Used by the\n    backend for identification of a function.  */\n \n-enum gfc_generic_isym_id\n+enum gfc_isym_id\n {\n   /* GFC_ISYM_NONE is used for intrinsics which will never be seen by\n      the backend (eg. KIND).  */\n   GFC_ISYM_NONE = 0,\n+  GFC_ISYM_ABORT,\n   GFC_ISYM_ABS,\n   GFC_ISYM_ACCESS,\n   GFC_ISYM_ACHAR,\n@@ -317,23 +318,19 @@ enum gfc_generic_isym_id\n   GFC_ISYM_ADJUSTR,\n   GFC_ISYM_AIMAG,\n   GFC_ISYM_AINT,\n+  GFC_ISYM_ALARM,\n   GFC_ISYM_ALL,\n   GFC_ISYM_ALLOCATED,\n-  GFC_ISYM_ANINT,\n   GFC_ISYM_AND,\n+  GFC_ISYM_ANINT,\n   GFC_ISYM_ANY,\n   GFC_ISYM_ASIN,\n   GFC_ISYM_ASINH,\n   GFC_ISYM_ASSOCIATED,\n   GFC_ISYM_ATAN,\n-  GFC_ISYM_ATANH,\n   GFC_ISYM_ATAN2,\n-  GFC_ISYM_J0,\n-  GFC_ISYM_J1,\n-  GFC_ISYM_JN,\n-  GFC_ISYM_Y0,\n-  GFC_ISYM_Y1,\n-  GFC_ISYM_YN,\n+  GFC_ISYM_ATANH,\n+  GFC_ISYM_BIT_SIZE,\n   GFC_ISYM_BTEST,\n   GFC_ISYM_CEILING,\n   GFC_ISYM_CHAR,\n@@ -343,43 +340,63 @@ enum gfc_generic_isym_id\n   GFC_ISYM_COMMAND_ARGUMENT_COUNT,\n   GFC_ISYM_COMPLEX,\n   GFC_ISYM_CONJG,\n+  GFC_ISYM_CONVERSION,\n   GFC_ISYM_COS,\n   GFC_ISYM_COSH,\n   GFC_ISYM_COUNT,\n+  GFC_ISYM_CPU_TIME,\n   GFC_ISYM_CSHIFT,\n   GFC_ISYM_CTIME,\n+  GFC_ISYM_DATE_AND_TIME,\n   GFC_ISYM_DBLE,\n+  GFC_ISYM_DIGITS,\n   GFC_ISYM_DIM,\n   GFC_ISYM_DOT_PRODUCT,\n   GFC_ISYM_DPROD,\n+  GFC_ISYM_DTIME,\n   GFC_ISYM_EOSHIFT,\n+  GFC_ISYM_EPSILON,\n   GFC_ISYM_ERF,\n   GFC_ISYM_ERFC,\n   GFC_ISYM_ETIME,\n+  GFC_ISYM_EXIT,\n   GFC_ISYM_EXP,\n   GFC_ISYM_EXPONENT,\n   GFC_ISYM_FDATE,\n   GFC_ISYM_FGET,\n   GFC_ISYM_FGETC,\n   GFC_ISYM_FLOOR,\n+  GFC_ISYM_FLUSH,\n   GFC_ISYM_FNUM,\n   GFC_ISYM_FPUT,\n   GFC_ISYM_FPUTC,\n   GFC_ISYM_FRACTION,\n+  GFC_ISYM_FREE,\n+  GFC_ISYM_FSEEK,\n   GFC_ISYM_FSTAT,\n   GFC_ISYM_FTELL,\n+  GFC_ISYM_GERROR,\n+  GFC_ISYM_GETARG,\n+  GFC_ISYM_GET_COMMAND,\n+  GFC_ISYM_GET_COMMAND_ARGUMENT,\n   GFC_ISYM_GETCWD,\n+  GFC_ISYM_GETENV,\n+  GFC_ISYM_GET_ENVIRONMENT_VARIABLE,\n   GFC_ISYM_GETGID,\n+  GFC_ISYM_GETLOG,\n   GFC_ISYM_GETPID,\n   GFC_ISYM_GETUID,\n+  GFC_ISYM_GMTIME,\n   GFC_ISYM_HOSTNM,\n+  GFC_ISYM_HUGE,\n   GFC_ISYM_IACHAR,\n   GFC_ISYM_IAND,\n   GFC_ISYM_IARGC,\n   GFC_ISYM_IBCLR,\n   GFC_ISYM_IBITS,\n   GFC_ISYM_IBSET,\n   GFC_ISYM_ICHAR,\n+  GFC_ISYM_IDATE,\n   GFC_ISYM_IEOR,\n   GFC_ISYM_IERRNO,\n   GFC_ISYM_INDEX,\n@@ -391,13 +408,18 @@ enum gfc_generic_isym_id\n   GFC_ISYM_ISATTY,\n   GFC_ISYM_ISHFT,\n   GFC_ISYM_ISHFTC,\n+  GFC_ISYM_ITIME,\n+  GFC_ISYM_J0,\n+  GFC_ISYM_J1,\n+  GFC_ISYM_JN,\n   GFC_ISYM_KILL,\n+  GFC_ISYM_KIND,\n   GFC_ISYM_LBOUND,\n   GFC_ISYM_LEN,\n   GFC_ISYM_LEN_TRIM,\n-  GFC_ISYM_LINK,\n   GFC_ISYM_LGE,\n   GFC_ISYM_LGT,\n+  GFC_ISYM_LINK,\n   GFC_ISYM_LLE,\n   GFC_ISYM_LLT,\n   GFC_ISYM_LOC,\n@@ -407,58 +429,76 @@ enum gfc_generic_isym_id\n   GFC_ISYM_LONG,\n   GFC_ISYM_LSHIFT,\n   GFC_ISYM_LSTAT,\n+  GFC_ISYM_LTIME,\n   GFC_ISYM_MALLOC,\n   GFC_ISYM_MATMUL,\n   GFC_ISYM_MAX,\n+  GFC_ISYM_MAXEXPONENT,\n   GFC_ISYM_MAXLOC,\n   GFC_ISYM_MAXVAL,\n   GFC_ISYM_MCLOCK,\n   GFC_ISYM_MCLOCK8,\n   GFC_ISYM_MERGE,\n   GFC_ISYM_MIN,\n+  GFC_ISYM_MINEXPONENT,\n   GFC_ISYM_MINLOC,\n   GFC_ISYM_MINVAL,\n   GFC_ISYM_MOD,\n   GFC_ISYM_MODULO,\n+  GFC_ISYM_MOVE_ALLOC,\n+  GFC_ISYM_MVBITS,\n   GFC_ISYM_NEAREST,\n+  GFC_ISYM_NEW_LINE,\n   GFC_ISYM_NINT,\n   GFC_ISYM_NOT,\n+  GFC_ISYM_NULL,\n   GFC_ISYM_OR,\n   GFC_ISYM_PACK,\n+  GFC_ISYM_PERROR,\n+  GFC_ISYM_PRECISION,\n   GFC_ISYM_PRESENT,\n   GFC_ISYM_PRODUCT,\n+  GFC_ISYM_RADIX,\n   GFC_ISYM_RAND,\n+  GFC_ISYM_RANDOM_NUMBER,\n+  GFC_ISYM_RANDOM_SEED,\n+  GFC_ISYM_RANGE,\n   GFC_ISYM_REAL,\n   GFC_ISYM_RENAME,\n   GFC_ISYM_REPEAT,\n   GFC_ISYM_RESHAPE,\n-  GFC_ISYM_RSHIFT,\n   GFC_ISYM_RRSPACING,\n+  GFC_ISYM_RSHIFT,\n   GFC_ISYM_SCALE,\n   GFC_ISYM_SCAN,\n-  GFC_ISYM_SECOND,\n   GFC_ISYM_SECNDS,\n+  GFC_ISYM_SECOND,\n   GFC_ISYM_SET_EXPONENT,\n   GFC_ISYM_SHAPE,\n-  GFC_ISYM_SI_KIND,\n   GFC_ISYM_SIGN,\n   GFC_ISYM_SIGNAL,\n+  GFC_ISYM_SI_KIND,\n   GFC_ISYM_SIN,\n   GFC_ISYM_SINH,\n   GFC_ISYM_SIZE,\n+  GFC_ISYM_SLEEP,\n   GFC_ISYM_SIZEOF,\n   GFC_ISYM_SPACING,\n   GFC_ISYM_SPREAD,\n   GFC_ISYM_SQRT,\n+  GFC_ISYM_SRAND,\n   GFC_ISYM_SR_KIND,\n   GFC_ISYM_STAT,\n   GFC_ISYM_SUM,\n+  GFC_ISYM_SYMLINK,\n   GFC_ISYM_SYMLNK,\n   GFC_ISYM_SYSTEM,\n+  GFC_ISYM_SYSTEM_CLOCK,\n   GFC_ISYM_TAN,\n   GFC_ISYM_TANH,\n   GFC_ISYM_TIME,\n   GFC_ISYM_TIME8,\n+  GFC_ISYM_TINY,\n   GFC_ISYM_TRANSFER,\n   GFC_ISYM_TRANSPOSE,\n   GFC_ISYM_TRIM,\n@@ -469,9 +509,11 @@ enum gfc_generic_isym_id\n   GFC_ISYM_UNPACK,\n   GFC_ISYM_VERIFY,\n   GFC_ISYM_XOR,\n-  GFC_ISYM_CONVERSION\n+  GFC_ISYM_Y0,\n+  GFC_ISYM_Y1,\n+  GFC_ISYM_YN\n };\n-typedef enum gfc_generic_isym_id gfc_generic_isym_id;\n+typedef enum gfc_isym_id gfc_isym_id;\n \n /* Runtime errors.  The EOR and EOF errors are required to be negative.\n    These codes must be kept synchronized with their equivalents in\n@@ -1252,7 +1294,7 @@ typedef struct gfc_intrinsic_sym\n   gfc_check_f check;\n   gfc_resolve_f resolve;\n   struct gfc_intrinsic_sym *specific_head, *next;\n-  gfc_generic_isym_id generic_id;\n+  gfc_isym_id id;\n \n }\n gfc_intrinsic_sym;\n@@ -2020,6 +2062,7 @@ int gfc_specific_intrinsic (const char *);\n int gfc_intrinsic_name (const char *, int);\n int gfc_intrinsic_actual_ok (const char *, const bool);\n gfc_intrinsic_sym *gfc_find_function (const char *);\n+gfc_intrinsic_sym *gfc_find_subroutine (const char *);\n \n match gfc_intrinsic_func_interface (gfc_expr *, int);\n match gfc_intrinsic_sub_interface (gfc_code *, int);"}, {"sha": "4114a97130c9aa563da6e2638166a81cebd5e503", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 352, "deletions": 347, "changes": 699, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=cd5ecab6a73af62791d39b85db942600ccc37dad"}, {"sha": "9c5c03335ea393c5923169bfec28c2d6bde841dd", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=cd5ecab6a73af62791d39b85db942600ccc37dad", "patch": "@@ -942,7 +942,7 @@ is_conversion (gfc_expr *expr, bool widening)\n   if (expr->expr_type != EXPR_FUNCTION\n       || expr->value.function.isym == NULL\n       || expr->value.function.esym != NULL\n-      || expr->value.function.isym->generic_id != GFC_ISYM_CONVERSION)\n+      || expr->value.function.isym->id != GFC_ISYM_CONVERSION)\n     return NULL;\n \n   if (widening)\n@@ -1130,7 +1130,7 @@ resolve_omp_atomic (gfc_code *code)\n     {\n       gfc_actual_arglist *arg, *var_arg;\n \n-      switch (expr2->value.function.isym->generic_id)\n+      switch (expr2->value.function.isym->id)\n \t{\n \tcase GFC_ISYM_MIN:\n \tcase GFC_ISYM_MAX:"}, {"sha": "8a9f1674c84fc36d350cab516d03d590dd991f49", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=cd5ecab6a73af62791d39b85db942600ccc37dad", "patch": "@@ -1179,7 +1179,7 @@ resolve_elemental_actual (gfc_expr *expr, gfc_code *c)\n \t  && formal_optional\n \t  && arg->expr->rank\n \t  && (set_by_optional || arg->expr->rank != rank)\n-\t  && !(isym && isym->generic_id == GFC_ISYM_CONVERSION))\n+\t  && !(isym && isym->id == GFC_ISYM_CONVERSION))\n \t{\n \t  gfc_warning (\"'%s' at %L is an array and OPTIONAL; IF IT IS \"\n \t\t       \"MISSING, it cannot be the actual argument of an \"\n@@ -1653,7 +1653,7 @@ resolve_function (gfc_expr *expr)\n       t = FAILURE;\n     }\n \n-#define GENERIC_ID expr->value.function.isym->generic_id\n+#define GENERIC_ID expr->value.function.isym->id\n   else if (expr->value.function.actual != NULL\n \t   && expr->value.function.isym != NULL\n \t   && GENERIC_ID != GFC_ISYM_LBOUND"}, {"sha": "efff3fd655d09777b19c8aa1142cbb03b658abd8", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=cd5ecab6a73af62791d39b85db942600ccc37dad", "patch": "@@ -2736,7 +2736,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \n \t/* As usual, lbound and ubound are exceptions!.  */\n \tcase GFC_SS_INTRINSIC:\n-\t  switch (ss->expr->value.function.isym->generic_id)\n+\t  switch (ss->expr->value.function.isym->id)\n \t    {\n \t    case GFC_ISYM_LBOUND:\n \t    case GFC_ISYM_UBOUND:\n@@ -2772,7 +2772,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t  break;\n \n \tcase GFC_SS_INTRINSIC:\n-\t  switch (ss->expr->value.function.isym->generic_id)\n+\t  switch (ss->expr->value.function.isym->id)\n \t    {\n \t    /* Fall through to supply start and stride.  */\n \t    case GFC_ISYM_LBOUND:"}, {"sha": "c3981d788d5680d9d03ef1eb574538237ad45fec", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=cd5ecab6a73af62791d39b85db942600ccc37dad", "patch": "@@ -1655,7 +1655,7 @@ gfc_apply_interface_mapping_to_expr (gfc_interface_mapping * mapping,\n     case EXPR_FUNCTION:\n       if (expr->value.function.esym == NULL\n \t    && expr->value.function.isym != NULL\n-\t    && expr->value.function.isym->generic_id == GFC_ISYM_LEN\n+\t    && expr->value.function.isym->id == GFC_ISYM_LEN\n \t    && expr->value.function.actual->expr->expr_type == EXPR_VARIABLE\n \t    && gfc_apply_interface_mapping_to_expr (mapping,\n \t\t\texpr->value.function.actual->expr))"}, {"sha": "9a27b36b1dff12670009f4d0b9ece59860fbd2bc", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=cd5ecab6a73af62791d39b85db942600ccc37dad", "patch": "@@ -49,7 +49,7 @@ typedef struct gfc_intrinsic_map_t\tGTY(())\n {\n   /* The explicit enum is required to work around inadequacies in the\n      garbage collection/gengtype parsing mechanism.  */\n-  enum gfc_generic_isym_id id;\n+  enum gfc_isym_id id;\n \n   /* Enum value from the \"language-independent\", aka C-centric, part\n      of gcc, or END_BUILTINS of no such value set.  */\n@@ -649,9 +649,9 @@ gfc_conv_intrinsic_lib_function (gfc_se * se, gfc_expr * expr)\n   gfc_intrinsic_map_t *m;\n   tree args;\n   tree fndecl;\n-  gfc_generic_isym_id id;\n+  gfc_isym_id id;\n \n-  id = expr->value.function.isym->generic_id;\n+  id = expr->value.function.isym->id;\n   /* Find the entry for this function.  */\n   for (m = gfc_intrinsic_map; m->id != GFC_ISYM_NONE; m++)\n     {\n@@ -1468,7 +1468,7 @@ gfc_conv_intrinsic_funcall (gfc_se * se, gfc_expr * expr)\n   /* Calls to libgfortran_matmul need to be appended special arguments,\n      to be able to call the BLAS ?gemm functions if required and possible.  */\n   append_args = NULL_TREE;\n-  if (expr->value.function.isym->generic_id == GFC_ISYM_MATMUL\n+  if (expr->value.function.isym->id == GFC_ISYM_MATMUL\n       && sym->ts.type != BT_LOGICAL)\n     {\n       tree cint = gfc_get_int_type (gfc_c_int_kind);\n@@ -3634,7 +3634,7 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n \t}\n     }\n \n-  switch (expr->value.function.isym->generic_id)\n+  switch (expr->value.function.isym->id)\n     {\n     case GFC_ISYM_NONE:\n       gcc_unreachable ();\n@@ -4035,7 +4035,7 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n void\n gfc_add_intrinsic_ss_code (gfc_loopinfo * loop ATTRIBUTE_UNUSED, gfc_ss * ss)\n {\n-  switch (ss->expr->value.function.isym->generic_id)\n+  switch (ss->expr->value.function.isym->id)\n     {\n     case GFC_ISYM_UBOUND:\n     case GFC_ISYM_LBOUND:\n@@ -4098,7 +4098,7 @@ gfc_is_intrinsic_libcall (gfc_expr * expr)\n   gcc_assert (expr->expr_type == EXPR_FUNCTION && expr->value.function.isym);\n   gcc_assert (expr->rank > 0);\n \n-  switch (expr->value.function.isym->generic_id)\n+  switch (expr->value.function.isym->id)\n     {\n     case GFC_ISYM_ALL:\n     case GFC_ISYM_ANY:\n@@ -4146,7 +4146,7 @@ gfc_walk_intrinsic_function (gfc_ss * ss, gfc_expr * expr,\n     return gfc_walk_intrinsic_libfunc (ss, expr);\n \n   /* Special cases.  */\n-  switch (isym->generic_id)\n+  switch (isym->id)\n     {\n     case GFC_ISYM_LBOUND:\n     case GFC_ISYM_UBOUND:"}, {"sha": "7c381db4f6e5b2f717828836c140abe1cee70b77", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5ecab6a73af62791d39b85db942600ccc37dad/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=cd5ecab6a73af62791d39b85db942600ccc37dad", "patch": "@@ -733,7 +733,7 @@ gfc_trans_omp_atomic (gfc_code *code)\n \n   expr2 = code->expr2;\n   if (expr2->expr_type == EXPR_FUNCTION\n-      && expr2->value.function.isym->generic_id == GFC_ISYM_CONVERSION)\n+      && expr2->value.function.isym->id == GFC_ISYM_CONVERSION)\n     expr2 = expr2->value.function.actual->expr;\n \n   if (expr2->expr_type == EXPR_OP)\n@@ -773,7 +773,7 @@ gfc_trans_omp_atomic (gfc_code *code)\n \t}\n       e = expr2->value.op.op1;\n       if (e->expr_type == EXPR_FUNCTION\n-\t  && e->value.function.isym->generic_id == GFC_ISYM_CONVERSION)\n+\t  && e->value.function.isym->id == GFC_ISYM_CONVERSION)\n \te = e->value.function.actual->expr;\n       if (e->expr_type == EXPR_VARIABLE\n \t  && e->symtree != NULL\n@@ -786,7 +786,7 @@ gfc_trans_omp_atomic (gfc_code *code)\n \t{\n \t  e = expr2->value.op.op2;\n \t  if (e->expr_type == EXPR_FUNCTION\n-\t      && e->value.function.isym->generic_id == GFC_ISYM_CONVERSION)\n+\t      && e->value.function.isym->id == GFC_ISYM_CONVERSION)\n \t    e = e->value.function.actual->expr;\n \t  gcc_assert (e->expr_type == EXPR_VARIABLE\n \t\t      && e->symtree != NULL\n@@ -800,7 +800,7 @@ gfc_trans_omp_atomic (gfc_code *code)\n   else\n     {\n       gcc_assert (expr2->expr_type == EXPR_FUNCTION);\n-      switch (expr2->value.function.isym->generic_id)\n+      switch (expr2->value.function.isym->id)\n \t{\n \tcase GFC_ISYM_MIN:\n \t  op = MIN_EXPR;"}]}