{"sha": "b178305dfd934a716c1175039bec2f5f73215fc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE3ODMwNWRmZDkzNGE3MTZjMTE3NTAzOWJlYzJmNWY3MzIxNWZjMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@act-europe.fr", "date": "2004-02-26T18:40:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-02-26T18:40:41Z"}, "message": "sparc-protos.h (sparc_emit_floatunsdi): Add 'mode'.\n\n\t* config/sparc/sparc-protos.h (sparc_emit_floatunsdi): Add 'mode'.\n\t(sparc_emit_fixunsdi): New prototype.\n\t* config/sparc/sparc.c (sparc_emit_floatunsdi): Use 'mode' argument.\n\t(sparc_emit_fixunsdi): New function.\n\t* config/sparc/sparc.md (floatunsdisf2): Use 'general_operand' for\n\toperand 1.  Pass SFmode to sparc_emit_floatunsdi.\n\t(floatunsdidf2): Use 'general_operand' for operand 1.  Pass DFmode\n\tto sparc_emit_floatunsdi.\n\t(fixuns_truncsfdi2): New expander.\n\t(fixuns_truncdfdi2): Likewise.\n\nFrom-SVN: r78511", "tree": {"sha": "d6f5e3147f395bd8303240d39b62e901c7e3b6d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6f5e3147f395bd8303240d39b62e901c7e3b6d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b178305dfd934a716c1175039bec2f5f73215fc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b178305dfd934a716c1175039bec2f5f73215fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b178305dfd934a716c1175039bec2f5f73215fc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b178305dfd934a716c1175039bec2f5f73215fc1/comments", "author": null, "committer": null, "parents": [{"sha": "413580dc797ecbbf4246f19f53ba1aa0bd9fcfdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413580dc797ecbbf4246f19f53ba1aa0bd9fcfdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/413580dc797ecbbf4246f19f53ba1aa0bd9fcfdf"}], "stats": {"total": 116, "additions": 108, "deletions": 8}, "files": [{"sha": "7818fed3841370c692006fc7157182670467492a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b178305dfd934a716c1175039bec2f5f73215fc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b178305dfd934a716c1175039bec2f5f73215fc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b178305dfd934a716c1175039bec2f5f73215fc1", "patch": "@@ -1,3 +1,16 @@\n+2004-02-26  Eric Botcazou  <ebotcazou@act-europe.fr>\n+\n+\t* config/sparc/sparc-protos.h (sparc_emit_floatunsdi): Add 'mode'.\n+\t(sparc_emit_fixunsdi): New prototype.\n+\t* config/sparc/sparc.c (sparc_emit_floatunsdi): Use 'mode' argument.\n+\t(sparc_emit_fixunsdi): New function.\n+\t* config/sparc/sparc.md (floatunsdisf2): Use 'general_operand' for\n+\toperand 1.  Pass SFmode to sparc_emit_floatunsdi.\n+\t(floatunsdidf2): Use 'general_operand' for operand 1.  Pass DFmode\n+\tto sparc_emit_floatunsdi.\n+\t(fixuns_truncsfdi2): New expander.\n+\t(fixuns_truncdfdi2): Likewise.\n+\n 2004-02-26  Alan Modra  <amodra@bigpond.net.au>\n \n \t* gcse.c (delete_null_pointer_checks_1): Do not delete CC setter"}, {"sha": "0908aaa5ea58f53ffbbfa0c8ad01c31ec539b4e2", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b178305dfd934a716c1175039bec2f5f73215fc1/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b178305dfd934a716c1175039bec2f5f73215fc1/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=b178305dfd934a716c1175039bec2f5f73215fc1", "patch": "@@ -63,7 +63,8 @@ extern enum machine_mode select_cc_mode (enum rtx_code, rtx, rtx);\n /* Define the function that build the compare insn for scc and bcc.  */\n extern rtx gen_compare_reg (enum rtx_code code, rtx, rtx);\n extern void sparc_emit_float_lib_cmp (rtx, rtx, enum rtx_code);\n-extern void sparc_emit_floatunsdi (rtx [2]);\n+extern void sparc_emit_floatunsdi (rtx [2], enum machine_mode);\n+extern void sparc_emit_fixunsdi (rtx [2], enum machine_mode);\n extern void emit_tfmode_binop (enum rtx_code, rtx *);\n extern void emit_tfmode_unop (enum rtx_code, rtx *);\n extern void emit_tfmode_cvt (enum rtx_code, rtx *);"}, {"sha": "079ed5d9d164a39078ef05efb7066f9e5abeb24c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b178305dfd934a716c1175039bec2f5f73215fc1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b178305dfd934a716c1175039bec2f5f73215fc1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=b178305dfd934a716c1175039bec2f5f73215fc1", "patch": "@@ -6419,14 +6419,12 @@ sparc_emit_float_lib_cmp (rtx x, rtx y, enum rtx_code comparison)\n    optabs would emit if we didn't have TFmode patterns.  */\n \n void\n-sparc_emit_floatunsdi (rtx *operands)\n+sparc_emit_floatunsdi (rtx *operands, enum machine_mode mode)\n {\n   rtx neglab, donelab, i0, i1, f0, in, out;\n-  enum machine_mode mode;\n \n   out = operands[0];\n   in = force_reg (DImode, operands[1]);\n-  mode = GET_MODE (out);\n   neglab = gen_label_rtx ();\n   donelab = gen_label_rtx ();\n   i0 = gen_reg_rtx (DImode);\n@@ -6450,6 +6448,47 @@ sparc_emit_floatunsdi (rtx *operands)\n   emit_label (donelab);\n }\n \n+/* Generate an FP to unsigned DImode conversion.  This is the same code\n+   optabs would emit if we didn't have TFmode patterns.  */\n+\n+void\n+sparc_emit_fixunsdi (rtx *operands, enum machine_mode mode)\n+{\n+  rtx neglab, donelab, i0, i1, f0, in, out, limit;\n+\n+  out = operands[0];\n+  in = force_reg (mode, operands[1]);\n+  neglab = gen_label_rtx ();\n+  donelab = gen_label_rtx ();\n+  i0 = gen_reg_rtx (DImode);\n+  i1 = gen_reg_rtx (DImode);\n+  limit = gen_reg_rtx (mode);\n+  f0 = gen_reg_rtx (mode);\n+\n+  emit_move_insn (limit,\n+\t\t  CONST_DOUBLE_FROM_REAL_VALUE (\n+\t\t    REAL_VALUE_ATOF (\"9223372036854775808.0\", mode), mode));\n+  emit_cmp_and_jump_insns (in, limit, GE, NULL_RTX, mode, 0, neglab);\n+\n+  emit_insn (gen_rtx_SET (VOIDmode,\n+\t\t\t  out,\n+\t\t\t  gen_rtx_FIX (DImode, gen_rtx_FIX (mode, in))));\n+  emit_jump_insn (gen_jump (donelab));\n+  emit_barrier ();\n+\n+  emit_label (neglab);\n+\n+  emit_insn (gen_rtx_SET (VOIDmode, f0, gen_rtx_MINUS (mode, in, limit)));\n+  emit_insn (gen_rtx_SET (VOIDmode,\n+\t\t\t  i0,\n+\t\t\t  gen_rtx_FIX (DImode, gen_rtx_FIX (mode, f0))));\n+  emit_insn (gen_movdi (i1, const1_rtx));\n+  emit_insn (gen_ashldi3 (i1, i1, GEN_INT (63)));\n+  emit_insn (gen_xordi3 (out, i0, i1));\n+\n+  emit_label (donelab);\n+}\n+\n /* Return the string to output a conditional branch to LABEL, testing\n    register REG.  LABEL is the operand number of the label; REG is the\n    operand number of the reg.  OP is the conditional expression.  The mode"}, {"sha": "f0e69b173589ad458e2b6ad3a34b3851081241ce", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b178305dfd934a716c1175039bec2f5f73215fc1/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b178305dfd934a716c1175039bec2f5f73215fc1/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=b178305dfd934a716c1175039bec2f5f73215fc1", "patch": "@@ -4662,9 +4662,9 @@\n \n (define_expand \"floatunsdisf2\"\n   [(use (match_operand:SF 0 \"register_operand\" \"\"))\n-   (use (match_operand:DI 1 \"register_operand\" \"\"))]\n+   (use (match_operand:DI 1 \"general_operand\" \"\"))]\n   \"TARGET_ARCH64 && TARGET_FPU\"\n-  \"sparc_emit_floatunsdi (operands); DONE;\")\n+  \"sparc_emit_floatunsdi (operands, SFmode); DONE;\")\n \n (define_insn \"floatdidf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n@@ -4676,9 +4676,9 @@\n \n (define_expand \"floatunsdidf2\"\n   [(use (match_operand:DF 0 \"register_operand\" \"\"))\n-   (use (match_operand:DI 1 \"register_operand\" \"\"))]\n+   (use (match_operand:DI 1 \"general_operand\" \"\"))]\n   \"TARGET_ARCH64 && TARGET_FPU\"\n-  \"sparc_emit_floatunsdi (operands); DONE;\")\n+  \"sparc_emit_floatunsdi (operands, DFmode); DONE;\")\n \n (define_expand \"floatditf2\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n@@ -4747,6 +4747,12 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fptype\" \"double\")])\n \n+(define_expand \"fixuns_truncsfdi2\"\n+  [(use (match_operand:DI 0 \"register_operand\" \"\"))\n+   (use (match_operand:SF 1 \"general_operand\" \"\"))]\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n+  \"sparc_emit_fixunsdi (operands, SFmode); DONE;\")\n+\n (define_insn \"fix_truncdfdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=e\")\n \t(fix:DI (fix:DF (match_operand:DF 1 \"register_operand\" \"e\"))))]\n@@ -4755,6 +4761,12 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fptype\" \"double\")])\n \n+(define_expand \"fixuns_truncdfdi2\"\n+  [(use (match_operand:DI 0 \"register_operand\" \"\"))\n+   (use (match_operand:DF 1 \"general_operand\" \"\"))]\n+  \"TARGET_ARCH64 && TARGET_FPU\"\n+  \"sparc_emit_fixunsdi (operands, DFmode); DONE;\")\n+\n (define_expand \"fix_trunctfdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(fix:DI (match_operand:TF 1 \"general_operand\" \"\")))]"}, {"sha": "508a19247d5b49b86010bae2103d7a1fe3fa1cb1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b178305dfd934a716c1175039bec2f5f73215fc1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b178305dfd934a716c1175039bec2f5f73215fc1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b178305dfd934a716c1175039bec2f5f73215fc1", "patch": "@@ -1,3 +1,7 @@\n+2004-02-26  Eric Botcazou  <ebotcazou@act-europe.fr>\n+\n+\t* gcc.dg/fixuns-trunc-1.c: New test.\n+\n 2004-02-26  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* gcc.dg/builtins-config.h: Use #elif."}, {"sha": "0d0942952497ab6ba2afbc65085ce70c1d71dc3e", "filename": "gcc/testsuite/gcc.dg/fixuns-trunc-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b178305dfd934a716c1175039bec2f5f73215fc1/gcc%2Ftestsuite%2Fgcc.dg%2Ffixuns-trunc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b178305dfd934a716c1175039bec2f5f73215fc1/gcc%2Ftestsuite%2Fgcc.dg%2Ffixuns-trunc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffixuns-trunc-1.c?ref=b178305dfd934a716c1175039bec2f5f73215fc1", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99\" } */\n+\n+unsigned long foo(double d)\n+{\n+  return (unsigned long) d;\n+}\n+\n+extern void abort(void);\n+\n+int main(void)\n+{\n+  double d;\n+  unsigned long l;\n+\n+#ifdef __LP64__\n+  d = 9223372036854775808.7;\n+  l = 1LL << 63;\n+\n+  if (foo(d) != l)\n+    abort();\n+#endif\n+\n+  d = 122485.2;\n+  l = 122485;\n+\n+  if (foo(d) != l)\n+    abort();\n+\n+  return 0;\n+}"}]}