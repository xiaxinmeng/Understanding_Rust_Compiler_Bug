{"sha": "7b0518e33c7818cbaa640257226e13513e86671e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IwNTE4ZTMzYzc4MThjYmFhNjQwMjU3MjI2ZTEzNTEzZTg2NjcxZQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2008-06-18T20:49:12Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2008-06-18T20:49:12Z"}, "message": "targhooks.h (struct gcc_target): New member unwind_word_mode.\n\n\t* targhooks.h (struct gcc_target): New member unwind_word_mode.\n\t(default_unwind_word_mode): Add prototype.\n\t* targhooks.c (default_unwind_word_mode): New function.\n\t(default_eh_return_filter_mode): Return targetm.unwind_word_mode ()\n\tinstead of word_mode.\n\t* target-def.h (TARGET_UNWIND_WORD_MODE): New macro.\n\t(TARGET_INITIALIZER): Use it.\n\n\t* c-common.c (handle_mode_attribute): Support \"unwind_word\"\n\tmode attribute.\n\t* unwind-generic.h (_Unwind_Word, _Unwind_Sword): Use it.\n\n\t* except.c (init_eh): Use targetm.unwind_word_mode () instead of\n\tword_mode to access SjLj_Function_Context member \"data\".\n\t(sjlj_emit_dispatch_table): Likewise.  Also, perform type\n\tconversion from targetm.eh_return_filter_mode () to\n\ttargetm.unwind_word_mode () if they differ.\n\n\t* builtin-types.def (BT_UNWINDWORD): New primitive type.\n\t(BT_FN_UNWINDWORD_PTR): New function type.\n\t(BT_FN_WORD_PTR): Remove.\n\t* builtins.def (BUILT_IN_EXTEND_POINTER): Use BT_FN_UNWINDWORD_PTR.\n\t* except.c (expand_builtin_extend_pointer): Convert pointer to\n\ttargetm.unwind_word_mode () instead of word_mode.\n\n\t* config/spu/spu-protos.h (spu_eh_return_filter_mode): Remove.\n\t* config/spu/spu.c (spu_eh_return_filter_mode): Remove.\n\t(spu_unwind_word_mode): New function.\n\t(TARGET_EH_RETURN_FILTER_MODE): Do not define.\n\t(TARGET_UNWIND_WORD_MODE): Define.\n\t* config/spu/t-spu-elf (TARGET_LIBGCC2_CFLAGS): Remove -D__word__=SI.\n\nFrom-SVN: r136912", "tree": {"sha": "cdc7fc54ba1d87f25a40abeb7252e518dc5a4f8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdc7fc54ba1d87f25a40abeb7252e518dc5a4f8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b0518e33c7818cbaa640257226e13513e86671e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b0518e33c7818cbaa640257226e13513e86671e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b0518e33c7818cbaa640257226e13513e86671e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b0518e33c7818cbaa640257226e13513e86671e/comments", "author": null, "committer": null, "parents": [{"sha": "aa5d99391813f31c6ded568a345701fc935f2d83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa5d99391813f31c6ded568a345701fc935f2d83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa5d99391813f31c6ded568a345701fc935f2d83"}], "stats": {"total": 98, "additions": 76, "deletions": 22}, "files": [{"sha": "a4a237a31a5755dddc004da4535f827e64aa7498", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b0518e33c7818cbaa640257226e13513e86671e", "patch": "@@ -1,3 +1,37 @@\n+2008-06-18  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* targhooks.h (struct gcc_target): New member unwind_word_mode.\n+\t(default_unwind_word_mode): Add prototype.\n+\t* targhooks.c (default_unwind_word_mode): New function.\n+\t(default_eh_return_filter_mode): Return targetm.unwind_word_mode ()\n+\tinstead of word_mode.\n+\t* target-def.h (TARGET_UNWIND_WORD_MODE): New macro.\n+\t(TARGET_INITIALIZER): Use it.\n+\n+\t* c-common.c (handle_mode_attribute): Support \"unwind_word\"\n+\tmode attribute.\n+\t* unwind-generic.h (_Unwind_Word, _Unwind_Sword): Use it.\n+\n+\t* except.c (init_eh): Use targetm.unwind_word_mode () instead of\n+\tword_mode to access SjLj_Function_Context member \"data\".\n+\t(sjlj_emit_dispatch_table): Likewise.  Also, perform type\n+\tconversion from targetm.eh_return_filter_mode () to\n+\ttargetm.unwind_word_mode () if they differ.\n+\n+\t* builtin-types.def (BT_UNWINDWORD): New primitive type.\n+\t(BT_FN_UNWINDWORD_PTR): New function type.\n+\t(BT_FN_WORD_PTR): Remove.\n+\t* builtins.def (BUILT_IN_EXTEND_POINTER): Use BT_FN_UNWINDWORD_PTR.\n+\t* except.c (expand_builtin_extend_pointer): Convert pointer to\n+\ttargetm.unwind_word_mode () instead of word_mode.\n+\n+\t* config/spu/spu-protos.h (spu_eh_return_filter_mode): Remove.\n+\t* config/spu/spu.c (spu_eh_return_filter_mode): Remove.\n+\t(spu_unwind_word_mode): New function.\n+\t(TARGET_EH_RETURN_FILTER_MODE): Do not define.\n+\t(TARGET_UNWIND_WORD_MODE): Define.\n+\t* config/spu/t-spu-elf (TARGET_LIBGCC2_CFLAGS): Remove -D__word__=SI.\n+\n 2008-06-18  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/spu.c (reg_align): Remove."}, {"sha": "4676dd7641b282c04de717f2438783abd6e64b27", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=7b0518e33c7818cbaa640257226e13513e86671e", "patch": "@@ -77,6 +77,8 @@ DEF_PRIMITIVE_TYPE (BT_UINTMAX, uintmax_type_node)\n DEF_PRIMITIVE_TYPE (BT_UINT32, uint32_type_node)\n DEF_PRIMITIVE_TYPE (BT_UINT64, uint64_type_node)\n DEF_PRIMITIVE_TYPE (BT_WORD, (*lang_hooks.types.type_for_mode) (word_mode, 1))\n+DEF_PRIMITIVE_TYPE (BT_UNWINDWORD, (*lang_hooks.types.type_for_mode)\n+\t\t\t\t    (targetm.unwind_word_mode (), 1))\n DEF_PRIMITIVE_TYPE (BT_FLOAT, float_type_node)\n DEF_PRIMITIVE_TYPE (BT_DOUBLE, double_type_node)\n DEF_PRIMITIVE_TYPE (BT_LONGDOUBLE, long_double_type_node)\n@@ -203,7 +205,7 @@ DEF_FUNCTION_TYPE_1 (BT_FN_DFLOAT64_CONST_STRING, BT_DFLOAT64, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_DFLOAT128_CONST_STRING,\n \t\t     BT_DFLOAT128, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_STRING_CONST_STRING, BT_STRING, BT_CONST_STRING)\n-DEF_FUNCTION_TYPE_1 (BT_FN_WORD_PTR, BT_WORD, BT_PTR)\n+DEF_FUNCTION_TYPE_1 (BT_FN_UNWINDWORD_PTR, BT_UNWINDWORD, BT_PTR)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_WINT, BT_INT, BT_WINT)\n DEF_FUNCTION_TYPE_1 (BT_FN_WINT_WINT, BT_WINT, BT_WINT)\n DEF_FUNCTION_TYPE_1 (BT_FN_DFLOAT32_DFLOAT32, BT_DFLOAT32, BT_DFLOAT32)"}, {"sha": "009c35f8934dceed9c7e59b5d5cd10c394d96962", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=7b0518e33c7818cbaa640257226e13513e86671e", "patch": "@@ -635,7 +635,7 @@ DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECVP, \"execvp\", BT_FN_INT_CONST_STRING_PT\n DEF_EXT_LIB_BUILTIN        (BUILT_IN_EXECVE, \"execve\", BT_FN_INT_CONST_STRING_PTR_CONST_STRING_PTR_CONST_STRING, ATTR_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_EXIT, \"exit\", BT_FN_VOID_INT, ATTR_NORETURN_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_EXPECT, \"expect\", BT_FN_LONG_LONG_LONG, ATTR_CONST_NOTHROW_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_EXTEND_POINTER, \"extend_pointer\", BT_FN_WORD_PTR, ATTR_CONST_NOTHROW_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_EXTEND_POINTER, \"extend_pointer\", BT_FN_UNWINDWORD_PTR, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_EXTRACT_RETURN_ADDR, \"extract_return_addr\", BT_FN_PTR_PTR, ATTR_NULL)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_FFS, \"ffs\", BT_FN_INT_INT, ATTR_CONST_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_FFSIMAX, \"ffsimax\", BT_FN_INT_INTMAX, ATTR_CONST_NOTHROW_LIST)"}, {"sha": "ca051c888767dca971fa58a7bf69d5772737e2c9", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=7b0518e33c7818cbaa640257226e13513e86671e", "patch": "@@ -5292,6 +5292,8 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \tmode = targetm.libgcc_cmp_return_mode ();\n       else if (!strcmp (p, \"libgcc_shift_count\"))\n \tmode = targetm.libgcc_shift_count_mode ();\n+      else if (!strcmp (p, \"unwind_word\"))\n+\tmode = targetm.unwind_word_mode ();\n       else\n \tfor (j = 0; j < NUM_MACHINE_MODES; j++)\n \t  if (!strcmp (p, GET_MODE_NAME (j)))"}, {"sha": "a6b465ecff753b2eb439a6bd24600e5908fb9f4c", "filename": "gcc/config/spu/spu-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Fconfig%2Fspu%2Fspu-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-protos.h?ref=7b0518e33c7818cbaa640257226e13513e86671e", "patch": "@@ -19,7 +19,6 @@\n \n #include \"rtl.h\"\n \n-extern enum machine_mode spu_eh_return_filter_mode (void);\n extern void spu_cpu_cpp_builtins (struct cpp_reader * pfile);\n extern void builtin_define_std (const char *);\n extern void spu_optimization_options (int level, int size);\n@@ -76,7 +75,6 @@ extern rtx gen_cpat_const (rtx * ops);\n extern void constant_to_array (enum machine_mode mode, rtx x,\n \t\t\t       unsigned char *arr);\n extern rtx array_to_constant (enum machine_mode mode, unsigned char *arr);\n-extern enum machine_mode spu_eh_return_filter_mode (void);\n extern void spu_allocate_stack (rtx op0, rtx op1);\n extern void spu_restore_stack_nonlocal (rtx op0, rtx op1);\n extern void spu_restore_stack_block (rtx op0, rtx op1);"}, {"sha": "4dd3d7cc0fe5b29e279ba0835b5a1e987ce6797e", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=7b0518e33c7818cbaa640257226e13513e86671e", "patch": "@@ -176,6 +176,8 @@ static int cpat_info(unsigned char *arr, int size, int *prun, int *pstart);\n static enum immediate_class classify_immediate (rtx op,\n \t\t\t\t\t\tenum machine_mode mode);\n \n+static enum machine_mode spu_unwind_word_mode (void);\n+\n static enum machine_mode\n spu_libgcc_cmp_return_mode (void);\n \n@@ -193,8 +195,8 @@ tree spu_builtin_types[SPU_BTI_MAX];\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN spu_expand_builtin\n \n-#undef TARGET_EH_RETURN_FILTER_MODE\n-#define TARGET_EH_RETURN_FILTER_MODE spu_eh_return_filter_mode\n+#undef TARGET_UNWIND_WORD_MODE\n+#define TARGET_UNWIND_WORD_MODE spu_unwind_word_mode\n \n /* The .8byte directive doesn't seem to work well for a 32 bit\n    architecture. */\n@@ -4304,12 +4306,10 @@ spu_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n   return true;\n }\n \n-enum machine_mode\n-spu_eh_return_filter_mode (void)\n+static enum machine_mode\n+spu_unwind_word_mode (void)\n {\n-  /* We would like this to be SImode, but sjlj exceptions seems to work\n-     only with word_mode. */\n-  return TImode;\n+  return SImode;\n }\n \n /* Decide whether we can make a sibling call to a function.  DECL is the"}, {"sha": "0a3947d90175410ff499e7245e455e75924243ef", "filename": "gcc/config/spu/t-spu-elf", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Fconfig%2Fspu%2Ft-spu-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Ft-spu-elf?ref=7b0518e33c7818cbaa640257226e13513e86671e", "patch": "@@ -19,9 +19,7 @@\n LIBGCC1 =\n CROSS_LIBGCC1 =\n \n-# On SPU __word__ is TImode which is too inefficient and incomplete for\n-# implementing libgcc routines.\n-TARGET_LIBGCC2_CFLAGS = -fPIC -D__word__=SI -mwarn-reloc -D__IN_LIBGCC2\n+TARGET_LIBGCC2_CFLAGS = -fPIC -mwarn-reloc -D__IN_LIBGCC2\n \n LIB2FUNCS_STATIC_EXTRA = $(srcdir)/config/spu/float_unssidf.c \\\n \t\t\t $(srcdir)/config/spu/float_unsdidf.c \\"}, {"sha": "e6a16507cdb5929178d79bafbed5c62ed9f34c89", "filename": "gcc/except.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=7b0518e33c7818cbaa640257226e13513e86671e", "patch": "@@ -338,7 +338,8 @@ init_eh (void)\n       DECL_FIELD_CONTEXT (f_cs) = sjlj_fc_type_node;\n \n       tmp = build_index_type (build_int_cst (NULL_TREE, 4 - 1));\n-      tmp = build_array_type (lang_hooks.types.type_for_mode (word_mode, 1),\n+      tmp = build_array_type (lang_hooks.types.type_for_mode\n+\t\t\t\t(targetm.unwind_word_mode (), 1),\n \t\t\t      tmp);\n       f_data = build_decl (FIELD_DECL, get_identifier (\"__data\"), tmp);\n       DECL_FIELD_CONTEXT (f_data) = sjlj_fc_type_node;\n@@ -1932,6 +1933,8 @@ sjlj_emit_function_exit (void)\n static void\n sjlj_emit_dispatch_table (rtx dispatch_label, struct sjlj_lp_info *lp_info)\n {\n+  enum machine_mode unwind_word_mode = targetm.unwind_word_mode ();\n+  enum machine_mode filter_mode = targetm.eh_return_filter_mode ();\n   int i, first_reachable;\n   rtx mem, dispatch, seq, fc;\n   rtx before;\n@@ -1954,8 +1957,8 @@ sjlj_emit_dispatch_table (rtx dispatch_label, struct sjlj_lp_info *lp_info)\n \t\t\tsjlj_fc_call_site_ofs);\n   dispatch = copy_to_reg (mem);\n \n-  mem = adjust_address (fc, word_mode, sjlj_fc_data_ofs);\n-  if (word_mode != ptr_mode)\n+  mem = adjust_address (fc, unwind_word_mode, sjlj_fc_data_ofs);\n+  if (unwind_word_mode != ptr_mode)\n     {\n #ifdef POINTERS_EXTEND_UNSIGNED\n       mem = convert_memory_address (ptr_mode, mem);\n@@ -1965,7 +1968,10 @@ sjlj_emit_dispatch_table (rtx dispatch_label, struct sjlj_lp_info *lp_info)\n     }\n   emit_move_insn (crtl->eh.exc_ptr, mem);\n \n-  mem = adjust_address (fc, word_mode, sjlj_fc_data_ofs + UNITS_PER_WORD);\n+  mem = adjust_address (fc, unwind_word_mode,\n+\t\t\tsjlj_fc_data_ofs + GET_MODE_SIZE (unwind_word_mode));\n+  if (unwind_word_mode != filter_mode)\n+    mem = convert_to_mode (filter_mode, mem, 0);\n   emit_move_insn (crtl->eh.filter, mem);\n \n   /* Jump to one of the directly reachable regions.  */\n@@ -3002,7 +3008,7 @@ expand_builtin_extend_pointer (tree addr_tree)\n   extend = 1;\n #endif\n \n-  return convert_modes (word_mode, ptr_mode, addr, extend);\n+  return convert_modes (targetm.unwind_word_mode (), ptr_mode, addr, extend);\n }\n \f\n /* In the following functions, we represent entries in the action table"}, {"sha": "2692e94aabc970afab2979435874a76806151542", "filename": "gcc/target-def.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=7b0518e33c7818cbaa640257226e13513e86671e", "patch": "@@ -388,6 +388,9 @@\n #define TARGET_LIBGCC_CMP_RETURN_MODE  default_libgcc_cmp_return_mode\n #define TARGET_LIBGCC_SHIFT_COUNT_MODE default_libgcc_shift_count_mode\n \n+/* In unwind-generic.h.  */\n+#define TARGET_UNWIND_WORD_MODE default_unwind_word_mode\n+\n /* In tree.c.  */\n #define TARGET_MERGE_DECL_ATTRIBUTES merge_decl_attributes\n #define TARGET_MERGE_TYPE_ATTRIBUTES merge_type_attributes\n@@ -761,6 +764,7 @@\n   TARGET_EH_RETURN_FILTER_MODE,\t\t\t\\\n   TARGET_LIBGCC_CMP_RETURN_MODE,                \\\n   TARGET_LIBGCC_SHIFT_COUNT_MODE,               \\\n+  TARGET_UNWIND_WORD_MODE,\t\t\t\\\n   TARGET_MERGE_DECL_ATTRIBUTES,\t\t\t\\\n   TARGET_MERGE_TYPE_ATTRIBUTES,\t\t\t\\\n   TARGET_ATTRIBUTE_TABLE,\t\t\t\\"}, {"sha": "012d1c0099ba87948af63978fc0ce1f8c98d59b6", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=7b0518e33c7818cbaa640257226e13513e86671e", "patch": "@@ -463,6 +463,9 @@ struct gcc_target\n   /* Return machine mode for libgcc expanded shift instructions.  */\n   enum machine_mode (* libgcc_shift_count_mode) (void);\n \n+  /* Return machine mode to be used for _Unwind_Word type.  */\n+  enum machine_mode (* unwind_word_mode) (void);\n+\n   /* Given two decls, merge their attributes and return the result.  */\n   tree (* merge_decl_attributes) (tree, tree);\n "}, {"sha": "7e931c5ed9d353456dfd36c7e282cd453495c982", "filename": "gcc/targhooks.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=7b0518e33c7818cbaa640257226e13513e86671e", "patch": "@@ -152,7 +152,7 @@ default_pretend_outgoing_varargs_named (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED)\n enum machine_mode\n default_eh_return_filter_mode (void)\n {\n-  return word_mode;\n+  return targetm.unwind_word_mode ();\n }\n \n enum machine_mode\n@@ -167,6 +167,12 @@ default_libgcc_shift_count_mode (void)\n   return word_mode;\n }\n \n+enum machine_mode\n+default_unwind_word_mode (void)\n+{\n+  return word_mode;\n+}\n+\n /* The default implementation of TARGET_SHIFT_TRUNCATION_MASK.  */\n \n unsigned HOST_WIDE_INT"}, {"sha": "5aebc7e667b2baace84e9883d82d7ce32a859244", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=7b0518e33c7818cbaa640257226e13513e86671e", "patch": "@@ -34,6 +34,7 @@ extern bool default_pretend_outgoing_varargs_named (CUMULATIVE_ARGS *);\n extern enum machine_mode default_eh_return_filter_mode (void);\n extern enum machine_mode default_libgcc_cmp_return_mode (void);\n extern enum machine_mode default_libgcc_shift_count_mode (void);\n+extern enum machine_mode default_unwind_word_mode (void);\n extern unsigned HOST_WIDE_INT default_shift_truncation_mask\n   (enum machine_mode);\n extern unsigned int default_min_divisions_for_recip_mul (enum machine_mode);"}, {"sha": "5e0f608d8eaa7b78525de2446c01d9a6d0292e6e", "filename": "gcc/unwind-generic.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Funwind-generic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b0518e33c7818cbaa640257226e13513e86671e/gcc%2Funwind-generic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-generic.h?ref=7b0518e33c7818cbaa640257226e13513e86671e", "patch": "@@ -43,8 +43,8 @@ extern \"C\" {\n \n /* @@@ The IA-64 ABI uses uint64 throughout.  Most places this is\n    inefficient for 32-bit and smaller machines.  */\n-typedef unsigned _Unwind_Word __attribute__((__mode__(__word__)));\n-typedef signed _Unwind_Sword __attribute__((__mode__(__word__)));\n+typedef unsigned _Unwind_Word __attribute__((__mode__(__unwind_word__)));\n+typedef signed _Unwind_Sword __attribute__((__mode__(__unwind_word__)));\n #if defined(__ia64__) && defined(__hpux__)\n typedef unsigned _Unwind_Ptr __attribute__((__mode__(__word__)));\n #else"}]}