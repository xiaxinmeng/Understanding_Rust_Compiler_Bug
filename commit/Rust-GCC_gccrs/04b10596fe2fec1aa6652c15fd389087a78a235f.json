{"sha": "04b10596fe2fec1aa6652c15fd389087a78a235f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRiMTA1OTZmZTJmZWMxYWE2NjUyYzE1ZmQzODkwODdhNzhhMjM1Zg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-03-02T12:38:37Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-03-02T12:38:37Z"}, "message": "c++: Some preparatory type canonicalization fixes\n\nThe patches that follow revealed some latent type canonicalization\nissues during normalization/satisfaction, due to normalization of\nsome constraint-expressions now being performed in different contexts\nand more frequently (since the normalization caches get frequently\nemptied in a checking compiler).  The issues are:\n\n1. In tsubst_parameter_mapping, we canonicalize the arguments of a\n   substituted TYPE_ARGUMENT_PACK only if the argument we started with\n   wasn't a TYPE_ARGUMENT_PACK.  We should canonicalize a substituted\n   TYPE_ARGUMENT_PACK regardless of what we started with.\n\n2. We currently set DECL_CONTEXT and CONSTRAINT_VAR_P on each of the\n   parameters introduced in a requires expression _after_ we're done\n   processing the requirements.  But meanwhile we may have already\n   built and computed the canonical form of a type that uses one of\n   these PARM_DECLs (as say an operand to decltype).  But the canonical\n   form depends on the result of cp_tree_equal, which in turn depends on\n   the value of CONSTRAINT_VAR_P and DECL_CONTEXT.  So we must set these\n   fields earlier, before processing requirements.\n\n3. In do_auto_deduction, we use the result of finish_decltype_type later\n   as a template argument, so we should canonicalize the result too.\n   (While we're here, we should pass 'complain' to finish_decltype_type,\n   which fixes the testcase auto1.C below.)\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (tsubst_parameter_mapping): Canonicalize the\n\targuments of a substituted TYPE_ARGUMENT_PACK even if we've\n\tstarted with a TYPE_ARGUMENT_PACK.\n\t(finish_requires_expr): Don't set DECL_CONTEXT and\n\tCONSTRAINT_VAR_P on each of the introduced parameters here.\n\t* parser.c (cp_parser_requirement_parameter_list): Instead set\n\tthese fields earlier, here.\n\t* pt.c (do_auto_deduction): Canonicalize the result of\n\tdo_auto_deduction.  Pass 'complain' to finish_decltype_type.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/auto1.C: New test.", "tree": {"sha": "9775aca8f0ee0e9d720a87764802a3314f3c9eda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9775aca8f0ee0e9d720a87764802a3314f3c9eda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04b10596fe2fec1aa6652c15fd389087a78a235f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b10596fe2fec1aa6652c15fd389087a78a235f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b10596fe2fec1aa6652c15fd389087a78a235f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b10596fe2fec1aa6652c15fd389087a78a235f/comments", "author": null, "committer": null, "parents": [{"sha": "d6378b9785b856785d6649d0f769a25b8bb47c9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6378b9785b856785d6649d0f769a25b8bb47c9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6378b9785b856785d6649d0f769a25b8bb47c9b"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "39c97986082962ab90d03021822c3765682041ad", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b10596fe2fec1aa6652c15fd389087a78a235f/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b10596fe2fec1aa6652c15fd389087a78a235f/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=04b10596fe2fec1aa6652c15fd389087a78a235f", "patch": "@@ -2319,15 +2319,15 @@ tsubst_parameter_mapping (tree map, tree args, subst_info info)\n \t  new_arg = tsubst_template_arg (arg, args, complain, in_decl);\n \t  if (TYPE_P (new_arg))\n \t    new_arg = canonicalize_type_argument (new_arg, complain);\n-\t  if (TREE_CODE (new_arg) == TYPE_ARGUMENT_PACK)\n+\t}\n+      if (TREE_CODE (new_arg) == TYPE_ARGUMENT_PACK)\n+\t{\n+\t  tree pack_args = ARGUMENT_PACK_ARGS (new_arg);\n+\t  for (int i = 0; i < TREE_VEC_LENGTH (pack_args); i++)\n \t    {\n-\t      tree pack_args = ARGUMENT_PACK_ARGS (new_arg);\n-\t      for (int i = 0; i < TREE_VEC_LENGTH (pack_args); i++)\n-\t\t{\n-\t\t  tree& pack_arg = TREE_VEC_ELT (pack_args, i);\n-\t\t  if (TYPE_P (pack_arg))\n-\t\t    pack_arg = canonicalize_type_argument (pack_arg, complain);\n-\t\t}\n+\t      tree& pack_arg = TREE_VEC_ELT (pack_args, i);\n+\t      if (TYPE_P (pack_arg))\n+\t\tpack_arg = canonicalize_type_argument (pack_arg, complain);\n \t    }\n \t}\n       if (new_arg == error_mark_node)\n@@ -3253,15 +3253,6 @@ evaluate_concept_check (tree check, tsubst_flags_t complain)\n tree\n finish_requires_expr (location_t loc, tree parms, tree reqs)\n {\n-  /* Modify the declared parameters by removing their context\n-     so they don't refer to the enclosing scope and explicitly\n-     indicating that they are constraint variables. */\n-  for (tree parm = parms; parm; parm = DECL_CHAIN (parm))\n-    {\n-      DECL_CONTEXT (parm) = NULL_TREE;\n-      CONSTRAINT_VAR_P (parm) = true;\n-    }\n-\n   /* Build the node. */\n   tree r = build_min (REQUIRES_EXPR, boolean_type_node, parms, reqs, NULL_TREE);\n   TREE_SIDE_EFFECTS (r) = false;"}, {"sha": "92de144dc87065722ad8940c98ff2646780c4655", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b10596fe2fec1aa6652c15fd389087a78a235f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b10596fe2fec1aa6652c15fd389087a78a235f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=04b10596fe2fec1aa6652c15fd389087a78a235f", "patch": "@@ -28817,6 +28817,18 @@ cp_parser_requirement_parameter_list (cp_parser *parser)\n   if (!parens.require_close (parser))\n     return error_mark_node;\n \n+  /* Modify the declared parameters by removing their context\n+     so they don't refer to the enclosing scope and explicitly\n+     indicating that they are constraint variables. */\n+  for (tree parm = parms; parm; parm = TREE_CHAIN (parm))\n+    {\n+      if (parm == void_list_node || parm == explicit_void_list_node)\n+\tbreak;\n+      tree decl = TREE_VALUE (parm);\n+      DECL_CONTEXT (decl) = NULL_TREE;\n+      CONSTRAINT_VAR_P (decl) = true;\n+    }\n+\n   return parms;\n }\n "}, {"sha": "f324f6a1e1b91de9d677b5e06b9995d765ae7511", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b10596fe2fec1aa6652c15fd389087a78a235f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b10596fe2fec1aa6652c15fd389087a78a235f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=04b10596fe2fec1aa6652c15fd389087a78a235f", "patch": "@@ -29517,9 +29517,13 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n \t\t || ((TREE_CODE (init) == COMPONENT_REF\n \t\t      || TREE_CODE (init) == SCOPE_REF)\n \t\t     && !REF_PARENTHESIZED_P (init)));\n+      tree deduced = finish_decltype_type (init, id, complain);\n+      deduced = canonicalize_type_argument (deduced, complain);\n+      if (deduced == error_mark_node)\n+\treturn error_mark_node;\n       targs = make_tree_vec (1);\n-      TREE_VEC_ELT (targs, 0)\n-\t= finish_decltype_type (init, id, tf_warning_or_error);\n+      TREE_VEC_ELT (targs, 0) = deduced;\n+      /* FIXME: These errors ought to be diagnosed at parse time. */\n       if (type != auto_node)\n \t{\n           if (complain & tf_error)"}, {"sha": "5cc762a386eb8d723acc43746b98d13d9564cd94", "filename": "gcc/testsuite/g++.dg/cpp1z/auto1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b10596fe2fec1aa6652c15fd389087a78a235f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fauto1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b10596fe2fec1aa6652c15fd389087a78a235f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fauto1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fauto1.C?ref=04b10596fe2fec1aa6652c15fd389087a78a235f", "patch": "@@ -0,0 +1,13 @@\n+// Verify that deduction failure of the decltype(auto) template parameter is\n+// a SFINAE error.\n+// { dg-do compile { target c++17 } }\n+\n+template <class> void f();\n+template <class> void f(int);\n+\n+template <class T = int, decltype(auto) = &f<T>> void g();\n+template <class = int> void g();\n+\n+int main() {\n+  g();\n+}"}]}