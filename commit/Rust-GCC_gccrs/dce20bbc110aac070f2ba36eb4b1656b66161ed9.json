{"sha": "dce20bbc110aac070f2ba36eb4b1656b66161ed9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNlMjBiYmMxMTBhYWMwNzBmMmJhMzZlYjRiMTY1NmI2NjE2MWVkOQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2003-08-13T19:20:16Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2003-08-13T19:20:16Z"}, "message": "sh.c (sh_get_pr_initial_val): Always wrap in unspec for TARGET_SH1.\n\n\t* sh.c (sh_get_pr_initial_val): Always wrap in unspec for TARGET_SH1.\n\t* sh.md (load_ra): Change insn predicate to TARGET_SH1.\n\nFrom-SVN: r70410", "tree": {"sha": "078fefb0a2d0dbd20bc5a1f6c98739157d91cc0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/078fefb0a2d0dbd20bc5a1f6c98739157d91cc0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dce20bbc110aac070f2ba36eb4b1656b66161ed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce20bbc110aac070f2ba36eb4b1656b66161ed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dce20bbc110aac070f2ba36eb4b1656b66161ed9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce20bbc110aac070f2ba36eb4b1656b66161ed9/comments", "author": null, "committer": null, "parents": [{"sha": "bc5ad3e6c4208bbac1ccedcb16f7bc140e9a151d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc5ad3e6c4208bbac1ccedcb16f7bc140e9a151d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc5ad3e6c4208bbac1ccedcb16f7bc140e9a151d"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "a09b22821fa73a0a99a9433df3938e3c44ea311e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce20bbc110aac070f2ba36eb4b1656b66161ed9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce20bbc110aac070f2ba36eb4b1656b66161ed9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dce20bbc110aac070f2ba36eb4b1656b66161ed9", "patch": "@@ -1,3 +1,8 @@\n+2003-08-13  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* sh.c (sh_get_pr_initial_val): Always wrap in unspec for TARGET_SH1.\n+\t* sh.md (load_ra): Change insn predicate to TARGET_SH1.\n+\n 2003-08-13  Dale Johannesen  <dalej@apple.com>\n \n \t* config/rs6000/rs6000.md (ctrsi, ctrdi):  Reenable"}, {"sha": "15d1d1a57dd5905270e1d946a2546c0cec1725c4", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce20bbc110aac070f2ba36eb4b1656b66161ed9/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce20bbc110aac070f2ba36eb4b1656b66161ed9/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=dce20bbc110aac070f2ba36eb4b1656b66161ed9", "patch": "@@ -8865,9 +8865,13 @@ sh_get_pr_initial_val (void)\n      then, we end in trouble if we didn't use the register in the same\n      basic block before.  So call get_hard_reg_initial_val now and wrap it\n      in an unspec if we might need to replace it.  */\n+  /* ??? We also must do this for TARGET_SH1 in general, because otherwise\n+     combine can put the pseudo returned by get_hard_reg_initial_val into\n+     instructions that need a general purpose registers, which will fail to\n+     be recognized when the pseudo becomes allocated to PR.  */\n   val\n     = get_hard_reg_initial_val (Pmode, TARGET_SHMEDIA ? PR_MEDIA_REG : PR_REG);\n-  if (TARGET_SHCOMPACT && rtx_equal_function_value_matters)\n+  if (TARGET_SH1)\n     return gen_rtx_UNSPEC (SImode, gen_rtvec (1, val), UNSPEC_RA);\n   return val;\n }"}, {"sha": "bd341a0b2df0b1a8bafdda45d932454e965fdd31", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce20bbc110aac070f2ba36eb4b1656b66161ed9/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce20bbc110aac070f2ba36eb4b1656b66161ed9/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=dce20bbc110aac070f2ba36eb4b1656b66161ed9", "patch": "@@ -3475,13 +3475,13 @@\n (define_insn_and_split \"load_ra\"\n   [(set (match_operand:SI 0 \"general_movdst_operand\" \"\")\n \t(unspec:SI [(match_operand 1 \"register_operand\" \"\")] UNSPEC_RA))]\n-  \"TARGET_SHCOMPACT\"\n+  \"TARGET_SH1\"\n   \"#\"\n   \"&& ! rtx_equal_function_value_matters\"\n   [(set (match_dup 0) (match_dup 1))]\n   \"\n {\n-  if (current_function_has_nonlocal_label)\n+  if (TARGET_SHCOMPACT && current_function_has_nonlocal_label)\n     operands[1] = gen_rtx_MEM (SImode, return_address_pointer_rtx);\n }\")\n "}]}