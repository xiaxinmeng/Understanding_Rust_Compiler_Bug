{"sha": "68c17f30462516324d741c9d00ea729813fae657", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhjMTdmMzA0NjI1MTYzMjRkNzQxYzlkMDBlYTcyOTgxM2ZhZTY1Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-04-03T17:54:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-04-03T17:54:04Z"}, "message": "sched-rgn.c (sets_likely_spilled): New.\n\n        * sched-rgn.c (sets_likely_spilled): New.\n        (sets_likely_spilled_1): New.\n        (add_branch_dependences): Use it.\n\nFrom-SVN: r51806", "tree": {"sha": "e4d2ab0099140831bb645d188f2738638cc20c6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4d2ab0099140831bb645d188f2738638cc20c6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68c17f30462516324d741c9d00ea729813fae657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c17f30462516324d741c9d00ea729813fae657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c17f30462516324d741c9d00ea729813fae657", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c17f30462516324d741c9d00ea729813fae657/comments", "author": null, "committer": null, "parents": [{"sha": "9390eb1651b637a220f1b2d248e7e19b085243cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9390eb1651b637a220f1b2d248e7e19b085243cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9390eb1651b637a220f1b2d248e7e19b085243cc"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "6419ade58c173536788b7552a29d8c24d49e7f89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c17f30462516324d741c9d00ea729813fae657/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c17f30462516324d741c9d00ea729813fae657/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68c17f30462516324d741c9d00ea729813fae657", "patch": "@@ -1,3 +1,10 @@\n+2002-04-03  Richard Henderson  <rth@redhat.com>\n+\n+\tPR opt/4120\n+\t* sched-rgn.c (sets_likely_spilled): New.\n+\t(sets_likely_spilled_1): New.\n+\t(add_branch_dependences): Use it.\n+\n 2002-04-02  Richard Henderson  <rth@redhat.com>\n \n \tPR opt/4311"}, {"sha": "6ec2668bc32505757a90274a967d51f737ca11ea", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c17f30462516324d741c9d00ea729813fae657/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c17f30462516324d741c9d00ea729813fae657/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=68c17f30462516324d741c9d00ea729813fae657", "patch": "@@ -294,6 +294,8 @@ static int haifa_classify_insn PARAMS ((rtx));\n static int is_prisky PARAMS ((rtx, int, int));\n static int is_exception_free PARAMS ((rtx, int, int));\n \n+static bool sets_likely_spilled PARAMS ((rtx));\n+static void sets_likely_spilled_1 PARAMS ((rtx, rtx, void *));\n static void add_branch_dependences PARAMS ((rtx, rtx));\n static void compute_block_backward_dependences PARAMS ((int));\n void debug_dependencies PARAMS ((void));\n@@ -2268,6 +2270,31 @@ static struct sched_info region_sched_info =\n   0, 0\n };\n \n+/* Determine if PAT sets a CLASS_LIKELY_SPILLED_P register.  */\n+\n+static bool\n+sets_likely_spilled (pat)\n+     rtx pat;\n+{\n+  bool ret = false;\n+  note_stores (pat, sets_likely_spilled_1, &ret);\n+  return ret;\n+}\n+\n+static void\n+sets_likely_spilled_1 (x, pat, data)\n+     rtx x, pat;\n+     void *data;\n+{\n+  bool *ret = (bool *) data;\n+\n+  if (GET_CODE (pat) == SET\n+      && REG_P (x)\n+      && REGNO (x) < FIRST_PSEUDO_REGISTER\n+      && CLASS_LIKELY_SPILLED_P (REGNO_REG_CLASS (REGNO (x))))\n+    *ret = true;\n+}\n+\n /* Add dependences so that branches are scheduled to run last in their\n    block.  */\n \n@@ -2284,8 +2311,15 @@ add_branch_dependences (head, tail)\n \n      Branches must obviously remain at the end.  Calls should remain at the\n      end since moving them results in worse register allocation.  Uses remain\n-     at the end to ensure proper register allocation.  cc0 setters remaim\n-     at the end because they can't be moved away from their cc0 user.  */\n+     at the end to ensure proper register allocation.\n+\n+     cc0 setters remaim at the end because they can't be moved away from\n+     their cc0 user.\n+\n+     Insns setting CLASS_LIKELY_SPILLED_P registers (usually return values)\n+     are not moved before reload because we can wind up with register\n+     allocation failures.  */\n+\n   insn = tail;\n   last = 0;\n   while (GET_CODE (insn) == CALL_INSN\n@@ -2297,7 +2331,8 @@ add_branch_dependences (head, tail)\n #ifdef HAVE_cc0\n \t\t || sets_cc0_p (PATTERN (insn))\n #endif\n-\t     ))\n+\t\t || (!reload_completed\n+\t\t     && sets_likely_spilled (PATTERN (insn)))))\n \t || GET_CODE (insn) == NOTE)\n     {\n       if (GET_CODE (insn) != NOTE)"}]}