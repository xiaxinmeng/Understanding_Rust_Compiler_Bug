{"sha": "fdf473ae1b7e9b775418aa69918641dd651d0150", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRmNDczYWUxYjdlOWI3NzU0MThhYTY5OTE4NjQxZGQ2NTFkMDE1MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-02-08T22:20:16Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-02-08T22:20:16Z"}, "message": "expr.c (expand_expr): Mind EXPAND_INITIALIZER for truncation also.\n\n        * expr.c (expand_expr): Mind EXPAND_INITIALIZER for truncation also.\n        * final.c (output_addr_const): Accept and discard SUBREG.\n        * varasm.c (decode_addr_const): Don't abort on unknown expressions --\n        mark them unknown instead.\n        (simplify_subtraction): Handle RTX_UNKNOWN.\n        (initializer_constant_valid_p): Strip NOP_EXPRs that narrow the mode.\n\n        * gcc.c-torture/compile/labels-3.c: New.\n\nFrom-SVN: r49622", "tree": {"sha": "9c571efba5f72e86224f8701d8dd1487d6780ced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c571efba5f72e86224f8701d8dd1487d6780ced"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdf473ae1b7e9b775418aa69918641dd651d0150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf473ae1b7e9b775418aa69918641dd651d0150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf473ae1b7e9b775418aa69918641dd651d0150", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf473ae1b7e9b775418aa69918641dd651d0150/comments", "author": null, "committer": null, "parents": [{"sha": "30d287947efab771a850c16a1fb60fc65b2ae148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d287947efab771a850c16a1fb60fc65b2ae148", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d287947efab771a850c16a1fb60fc65b2ae148"}], "stats": {"total": 87, "additions": 77, "deletions": 10}, "files": [{"sha": "2d78c2699ab88b2f3d59a0c73378f9bb18dd15c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf473ae1b7e9b775418aa69918641dd651d0150/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf473ae1b7e9b775418aa69918641dd651d0150/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdf473ae1b7e9b775418aa69918641dd651d0150", "patch": "@@ -1,3 +1,12 @@\n+2002-02-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* expr.c (expand_expr): Mind EXPAND_INITIALIZER for truncation also.\n+\t* final.c (output_addr_const): Accept and discard SUBREG.\n+\t* varasm.c (decode_addr_const): Don't abort on unknown expressions --\n+\tmark them unknown instead.\n+\t(simplify_subtraction): Handle RTX_UNKNOWN.\n+\t(initializer_constant_valid_p): Strip NOP_EXPRs that narrow the mode.\n+\n 2002-02-08  David Edelsohn  <edelsohn@gnu.org>\n \n \t* doc/invoke.texi (RS/6000 and PowerPC Options): Fix typo."}, {"sha": "13995eef670291709e06581cb82a9ab9e8d87ab6", "filename": "gcc/expr.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf473ae1b7e9b775418aa69918641dd651d0150/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf473ae1b7e9b775418aa69918641dd651d0150/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=fdf473ae1b7e9b775418aa69918641dd651d0150", "patch": "@@ -7274,15 +7274,24 @@ expand_expr (exp, target, tmode, modifier)\n \t  return op0;\n \t}\n \n-      op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, mode, 0);\n+      op0 = expand_expr (TREE_OPERAND (exp, 0), NULL_RTX, mode, modifier);\n       if (GET_MODE (op0) == mode)\n \treturn op0;\n \n       /* If OP0 is a constant, just convert it into the proper mode.  */\n       if (CONSTANT_P (op0))\n-\treturn\n-\t  convert_modes (mode, TYPE_MODE (TREE_TYPE (TREE_OPERAND (exp, 0))),\n-\t\t\t op0, TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (exp, 0))));\n+\t{\n+\t  tree inner_type = TREE_TYPE (TREE_OPERAND (exp, 0));\n+\t  enum machine_mode inner_mode = TYPE_MODE (inner_type);\n+\n+          if (modifier == EXPAND_INITIALIZER)\n+\t    return simplify_gen_subreg (mode, op0, inner_mode,\n+\t\t\t\t\tsubreg_lowpart_offset (mode,\n+\t\t\t\t\t\t\t       inner_mode));\n+\t  else\n+\t    return convert_modes (mode, inner_mode, op0,\n+\t\t\t\t  TREE_UNSIGNED (inner_type));\n+\t}\n \n       if (modifier == EXPAND_INITIALIZER)\n \treturn gen_rtx_fmt_e (unsignedp ? ZERO_EXTEND : SIGN_EXTEND, mode, op0);"}, {"sha": "5f8de3035316d040b73d5db1996bdc12a1b4ece3", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf473ae1b7e9b775418aa69918641dd651d0150/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf473ae1b7e9b775418aa69918641dd651d0150/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=fdf473ae1b7e9b775418aa69918641dd651d0150", "patch": "@@ -3461,6 +3461,7 @@ output_addr_const (file, x)\n \n     case ZERO_EXTEND:\n     case SIGN_EXTEND:\n+    case SUBREG:\n       output_addr_const (file, XEXP (x, 0));\n       break;\n "}, {"sha": "2195de6e780bb68a78787473db5474efe542375b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf473ae1b7e9b775418aa69918641dd651d0150/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf473ae1b7e9b775418aa69918641dd651d0150/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fdf473ae1b7e9b775418aa69918641dd651d0150", "patch": "@@ -1,3 +1,7 @@\n+2002-02-08  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.c-torture/compile/labels-3.c: New.\n+\n 2002-02-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/execute/20020206-1.c: Test whether nesting 2"}, {"sha": "51ac88380b828a49da54237cd5d6636758072e8c", "filename": "gcc/testsuite/gcc.c-torture/compile/labels-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf473ae1b7e9b775418aa69918641dd651d0150/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flabels-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf473ae1b7e9b775418aa69918641dd651d0150/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flabels-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Flabels-3.c?ref=fdf473ae1b7e9b775418aa69918641dd651d0150", "patch": "@@ -0,0 +1,12 @@\n+/* Verify that we can narrow the storage associated with label diffs.  */\n+\n+int foo (int a)\n+{\n+  static const short ar[] = { &&l1 - &&l1, &&l2 - &&l1 };\n+  void *p = &&l1 + ar[a];\n+  goto *p;\n+ l1:\n+  return 1;\n+ l2:\n+  return 2;\n+}"}, {"sha": "e542817d1d029711800650529b59f2858e54a032", "filename": "gcc/varasm.c", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdf473ae1b7e9b775418aa69918641dd651d0150/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdf473ae1b7e9b775418aa69918641dd651d0150/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=fdf473ae1b7e9b775418aa69918641dd651d0150", "patch": "@@ -2382,7 +2382,7 @@ decode_addr_const (exp, value)\n   value->offset = offset;\n }\n \f\n-enum kind { RTX_DOUBLE, RTX_INT, RTX_UNSPEC };\n+enum kind { RTX_UNKNOWN, RTX_DOUBLE, RTX_INT, RTX_UNSPEC };\n struct rtx_const\n {\n   ENUM_BITFIELD(kind) kind : 16;\n@@ -3610,7 +3610,8 @@ decode_rtx_const (mode, x, value)\n       break;\n \n     default:\n-      abort ();\n+      value->kind = RTX_UNKNOWN;\n+      break;\n     }\n \n   if (value->kind == RTX_INT && value->un.addr.base != 0\n@@ -3630,7 +3631,7 @@ decode_rtx_const (mode, x, value)\n \t}\n     }\n \n-  if (value->kind != RTX_DOUBLE && value->un.addr.base != 0)\n+  if (value->kind > RTX_DOUBLE && value->un.addr.base != 0)\n     switch (GET_CODE (value->un.addr.base))\n       {\n       case SYMBOL_REF:\n@@ -3660,9 +3661,11 @@ simplify_subtraction (x)\n   decode_rtx_const (GET_MODE (x), XEXP (x, 0), &val0);\n   decode_rtx_const (GET_MODE (x), XEXP (x, 1), &val1);\n \n-  if (val0.kind != RTX_DOUBLE && val0.kind == val1.kind\n+  if (val0.kind > RTX_DOUBLE\n+      && val0.kind == val1.kind\n       && val0.un.addr.base == val1.un.addr.base)\n     return GEN_INT (val0.un.addr.offset - val1.un.addr.offset);\n+\n   return x;\n }\n \n@@ -4370,8 +4373,37 @@ initializer_constant_valid_p (value, endtype)\n \t  tree op0, op1;\n \t  op0 = TREE_OPERAND (value, 0);\n \t  op1 = TREE_OPERAND (value, 1);\n-\t  STRIP_NOPS (op0);\n-\t  STRIP_NOPS (op1);\n+\n+\t  /* Like STRIP_NOPS except allow the operand mode to widen.\n+\t     This works around a feature of fold that simplfies\n+\t     (int)(p1 - p2) to ((int)p1 - (int)p2) under the theory\n+\t     that the narrower operation is cheaper.  */\n+\n+\t  while (TREE_CODE (op0) == NOP_EXPR\n+\t\t || TREE_CODE (op0) == CONVERT_EXPR\n+\t\t || TREE_CODE (op0) == NON_LVALUE_EXPR)\n+\t    {\n+\t      tree inner = TREE_OPERAND (op0, 0);\n+\t      if (inner == error_mark_node\n+\t          || ! INTEGRAL_MODE_P (TYPE_MODE (TREE_TYPE (inner)))\n+\t\t  || (GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (op0)))\n+\t\t      > GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (inner)))))\n+\t\tbreak;\n+\t      op0 = inner;\n+\t    }\n+\n+\t  while (TREE_CODE (op1) == NOP_EXPR\n+\t\t || TREE_CODE (op1) == CONVERT_EXPR\n+\t\t || TREE_CODE (op1) == NON_LVALUE_EXPR)\n+\t    {\n+\t      tree inner = TREE_OPERAND (op1, 0);\n+\t      if (inner == error_mark_node\n+\t          || ! INTEGRAL_MODE_P (TYPE_MODE (TREE_TYPE (inner)))\n+\t\t  || (GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (op1)))\n+\t\t      > GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (inner)))))\n+\t\tbreak;\n+\t      op1 = inner;\n+\t    }\n \n \t  if (TREE_CODE (op0) == ADDR_EXPR\n \t      && TREE_CODE (TREE_OPERAND (op0, 0)) == LABEL_DECL"}]}