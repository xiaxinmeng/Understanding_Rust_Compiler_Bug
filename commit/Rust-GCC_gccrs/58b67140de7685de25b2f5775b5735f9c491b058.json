{"sha": "58b67140de7685de25b2f5775b5735f9c491b058", "node_id": "C_kwDOANBUbNoAKDU4YjY3MTQwZGU3Njg1ZGUyNWIyZjU3NzViNTczNWY5YzQ5MWIwNTg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-04T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-04T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "d37c6b438b98967e55cab346615bf159e94d0c3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d37c6b438b98967e55cab346615bf159e94d0c3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58b67140de7685de25b2f5775b5735f9c491b058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b67140de7685de25b2f5775b5735f9c491b058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58b67140de7685de25b2f5775b5735f9c491b058", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b67140de7685de25b2f5775b5735f9c491b058/comments", "author": null, "committer": null, "parents": [{"sha": "891d64721626f45fb95fa47a57a3f396b80f31e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891d64721626f45fb95fa47a57a3f396b80f31e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/891d64721626f45fb95fa47a57a3f396b80f31e9"}], "stats": {"total": 232, "additions": 231, "deletions": 1}, "files": [{"sha": "cf57c89161818948394d3de829c091d02d743175", "filename": "gcc/ChangeLog", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b67140de7685de25b2f5775b5735f9c491b058/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b67140de7685de25b2f5775b5735f9c491b058/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58b67140de7685de25b2f5775b5735f9c491b058", "patch": "@@ -1,3 +1,126 @@\n+2022-06-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/30314\n+\tPR middle-end/105777\n+\t* match.pd (__builtin_mul_overflow_p (x, cst, (stype) 0) ->\n+\tx > stype_max / cst || x < stype_min / cst): New simplification.\n+\n+2022-06-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::range_from_dom): Use\n+\tValue_Range.\n+\t* gimple-range.cc (gimple_ranger::register_inferred_ranges): Same.\n+\t* value-range.h (Value_Range::Value_Range): Implement copy\n+\tconstructor for Value_Range.\n+\n+2022-06-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.h (struct vrange_traits): Remove.\n+\t(is_a): Rewrite without vrange_traits.\n+\t(as_a): Same.\n+\n+2022-06-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* value-range.cc (vrange::contains_p): Implement.\n+\t(vrange::type): Return void.\n+\t(vrange::supports_type_p): Implement.\n+\t(irange::fits_p): Same.\n+\t(vrange::set_undefined): Same.\n+\t(irange::set_nonnegative): Same.\n+\t(vrange::set_varying): Same.\n+\t(vrange::union_): Same.\n+\t(unsupported_range::set): Move to vrange.\n+\t(unsupported_range::type): Move to vrange.\n+\t(vrange::intersect): Implement for varying and undefined.\n+\t(vrange::zero_p): Implement.\n+\t(unsupported_range::supports_type_p): Move to vrange.\n+\t(vrange::nonzero_p): Implement.\n+\t(unsupported_range::set_undefined): Move to vrange.\n+\t(unsupported_range::set_varying): Same.\n+\t(unsupported_range::dump): Same.\n+\t(unsupported_range::union_): Same.  Implement for varying and\n+\tundefined.\n+\t(unsupported_range::intersect): Move to vrange.\n+\t(unsupported_range::zero_p): Same.\n+\t(unsupported_range::nonzero_p): Same.\n+\t(unsupported_range::set_nonzero): Same.\n+\t(unsupported_range::set_zero): Same.\n+\t(unsupported_range::set_nonnegative): Same.\n+\t(unsupported_range::fits_p): Same.\n+\t* value-range.h (class vrange): Remove abstract markers for most\n+\tmethods.\n+\t(class unsupported_range): Remove most methods as they will now be\n+\tinherited from vrange.\n+\n+2022-06-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-edge.cc (gimple_outgoing_range_stmt_p): Adjust for\n+\tan object level supports_type_p for irange and a static\n+\tValue_Range::supports_type_p.\n+\t* gimple-range-fold.cc (fold_using_range::range_of_range_op): Same.\n+\t(fold_using_range::range_of_address): Same.\n+\t(fold_using_range::range_of_builtin_call): Same.\n+\t* gimple-range-fold.h (gimple_range_type): Same.\n+\t(gimple_range_ssa_p): Same.\n+\t* gimple-range-path.cc (path_range_query::internal_range_of_expr):\n+\tSame.\n+\t(path_range_query::range_of_stmt): Same.\n+\t(path_range_query::add_to_imports): Same.\n+\t* gimple-range.cc (gimple_ranger::range_on_edge): Same.\n+\t(gimple_ranger::export_global_ranges): Same.\n+\t* gimple-ssa-evrp-analyze.cc\n+\t(evrp_range_analyzer::record_ranges_from_phis):  Same.\n+\t* range-op.cc (range_operator::wi_fold): Same.\n+\t(range_operator::fold_range): Same.\n+\t* tree-ssa-loop-ch.cc (entry_loop_condition_is_static): Same.\n+\t* tree-ssa-loop-unswitch.cc (struct unswitch_predicate): Same.\n+\t(evaluate_control_stmt_using_entry_checks): Same.\n+\t* tree-ssa-threadedge.cc\n+\t(hybrid_jt_simplifier::compute_ranges_from_state): Same.\n+\t* tree-vrp.cc (supported_types_p): Same.\n+\t* value-query.cc (range_query::value_of_expr): Same.\n+\t(range_query::value_on_edge): Same.\n+\t(range_query::value_of_stmt): Same.\n+\t(range_query::get_tree_range): Same.\n+\t(get_range_global): Same.\n+\t(global_range_query::range_of_expr): Same.\n+\t* value-range-equiv.h (class value_range_equiv): Same.\n+\t* value-range.cc (irange::supports_type_p): Same.\n+\t(unsupported_range::supports_type_p): Same.\n+\t* value-range.h (enum value_range_discriminator): Same.\n+\t(Value_Range::init): Same.\n+\t(Value_Range::supports_type_p): Same.\n+\t(irange::supports_type_p): Same.\n+\t(irange::supports_p): Same.\n+\t(vrange::supports_type_p): Same.\n+\t(vrange_allocator::alloc_vrange): Same.\n+\n+2022-06-03  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* Makefile.in (ORIGINAL_OBJCOPY_FOR_TARGET): New.\n+\t* configure.ac: Check for objcopy, producing\n+\tORIGINAL_OBJCOPY_FOR_TARGET.\n+\t* configure: Update accordingly.\n+\t* exec-tool.in (ORIGINAL_OBJCOPY_FOR_TARGET): New.\n+\tHandle objcopy.\n+\n+2022-06-03  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/i386/mmx.md (mmx_psadbw): Convert to expander.\n+\t(*mmx_psadbw): New. Mark as commutative.\n+\t* config/i386/sse.md (<sse2_avx2>_psadbw): Convert to expander.\n+\t(*<sse2_avx2>_psadbw): New. Mark as commutative.\n+\n+2022-06-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR tree-optimization/105665\n+\tPR tree-optimization/100810\n+\t* tree-ssa-loop-ivopts.cc\n+\t(ssa_name_maybe_undef_p, ssa_name_set_maybe_undef): New.\n+\t(ssa_name_any_use_dominates_bb_p, mark_ssa_maybe_undefs): New.\n+\t(find_ssa_undef): Check precomputed flag and intervening uses.\n+\t(tree_ssa_iv_optimize): Call mark_ssa_maybe_undefs.\n+\n 2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* Makefile.in (OBJS): Add tree-diagnostic-client-data-hooks.o and"}, {"sha": "d6a682769fa8a802ca8c1c39741b310e1c9dd77e", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b67140de7685de25b2f5775b5735f9c491b058/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b67140de7685de25b2f5775b5735f9c491b058/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=58b67140de7685de25b2f5775b5735f9c491b058", "patch": "@@ -1 +1 @@\n-20220603\n+20220604"}, {"sha": "9b99a2170a08ef627b1d00e19eb77fe90450f35c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b67140de7685de25b2f5775b5735f9c491b058/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b67140de7685de25b2f5775b5735f9c491b058/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=58b67140de7685de25b2f5775b5735f9c491b058", "patch": "@@ -1,3 +1,40 @@\n+2022-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105756\n+\t* typeck.cc (cp_build_binary_op): Don't fold operands\n+\twhen c_inhibit_evaluation_warnings.\n+\n+2022-06-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105761\n+\t* decl.cc (duplicate_decls): Don't copy DECL_TEMPLATE_INFO\n+\tfrom a hidden friend.\n+\n+2022-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105637\n+\t* tree.cc (maybe_dummy_object): When returning a dummy\n+\tobject, respect the cv-quals of 'this' if available.\n+\n+2022-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100374\n+\t* pt.cc (determine_specialization): Compare overall constraints\n+\tnot just the trailing constraints.\n+\t(tsubst_each_template_parm_constraints): Define.\n+\t(tsubst_friend_function): Use it.\n+\t(tsubst_friend_class): Use it.\n+\t(tsubst_template_parm): Don't substitute TEMPLATE_PARM_CONSTRAINTS.\n+\n+2022-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105797\n+\t* pt.cc (for_each_template_parm_r) <case FUNCTION_DECL, VAR_DECL>:\n+\tDon't walk DECL_CONTEXT.\n+\t<case PARM_DECL>: Likewise.  Walk TREE_TYPE.\n+\t<case CONST_DECL>: Simplify.\n+\t(any_template_parm_r) <case PARM_DECL>: Don't walk TREE_TYPE.\n+\n 2022-06-02  Marek Polacek  <polacek@redhat.com>\n \n \t* constexpr.cc (potential_constant_expression_1): Treat"}, {"sha": "fd1edc848f1d5ed5adf837614d97be64c1107a86", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b67140de7685de25b2f5775b5735f9c491b058/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b67140de7685de25b2f5775b5735f9c491b058/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=58b67140de7685de25b2f5775b5735f9c491b058", "patch": "@@ -1,3 +1,7 @@\n+2022-06-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* openmp.cc (OMP_SCOPE_CLAUSES): Add firstprivate and allocate.\n+\n 2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* f95-lang.cc (gfc_get_sarif_source_language): New."}, {"sha": "177c82de87abd18c95c65dcaba1c8c5313b76455", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b67140de7685de25b2f5775b5735f9c491b058/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b67140de7685de25b2f5775b5735f9c491b058/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58b67140de7685de25b2f5775b5735f9c491b058", "patch": "@@ -1,3 +1,59 @@\n+2022-06-03  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/auto56.C: New test.\n+\n+2022-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105756\n+\t* g++.dg/cpp0x/decltype82.C: New test.\n+\n+2022-06-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/105761\n+\t* g++.dg/cpp1y/auto-fn64.C: New test.\n+\n+2022-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105637\n+\t* g++.dg/cpp0x/lambda/lambda-this22.C: New test.\n+\t* g++.dg/template/non-dependent23.C: New test.\n+\n+2022-06-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/scope-6.f90: Fix dg-final scan-tree-dump.\n+\n+2022-06-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/scope-5.f90: New test.\n+\t* gfortran.dg/gomp/scope-6.f90: New test.\n+\n+2022-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/100374\n+\t* g++.dg/cpp2a/concepts-spec2.C: New test.\n+\t* g++.dg/cpp2a/concepts-template-parm11.C: New test.\n+\n+2022-06-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/105797\n+\t* g++.dg/cpp2a/concepts-decltype4.C: New test.\n+\t* g++.dg/cpp2a/concepts-memfun3.C: New test.\n+\n+2022-06-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/30314\n+\tPR middle-end/105777\n+\t* gcc.dg/tree-ssa/pr30314.c: Add noipa attribute to all functions.\n+\t* gcc.dg/tree-ssa/pr105777.c: New test.\n+\t* gcc.c-torture/execute/pr30314.c: New test.\n+\t* gcc.c-torture/execute/pr105777.c: New test.\n+\n+2022-06-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\tPR tree-optimization/105665\n+\tPR tree-optimization/100810\n+\t* gcc.dg/torture/pr105665.c: New.\n+\n 2022-06-02  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/105803"}, {"sha": "7a2cacd597b16b3174a78c7c36667953645c87be", "filename": "libcody/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b67140de7685de25b2f5775b5735f9c491b058/libcody%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b67140de7685de25b2f5775b5735f9c491b058/libcody%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2FChangeLog?ref=58b67140de7685de25b2f5775b5735f9c491b058", "patch": "@@ -1,3 +1,8 @@\n+2022-06-03  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* Makefile.in (revision.stamp): Replace $() and += with more\n+\tportable shell constructs.\n+\n 2022-03-18  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* netclient.cc (OpenInet6): Do not provide a dummy port number"}, {"sha": "39d9277bf4e3253715241904911eec8cb9f250e7", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b67140de7685de25b2f5775b5735f9c491b058/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b67140de7685de25b2f5775b5735f9c491b058/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=58b67140de7685de25b2f5775b5735f9c491b058", "patch": "@@ -1,3 +1,8 @@\n+2022-06-03  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (OpenMP 5.2): Mark scope w/ firstprivate/allocate as Y.\n+\t* testsuite/libgomp.fortran/scope-2.f90: New test.\n+\n 2022-06-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* testsuite/lib/libgomp.exp: Add load_gcc_lib of scansarif.exp."}]}