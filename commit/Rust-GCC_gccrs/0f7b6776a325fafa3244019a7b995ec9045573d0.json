{"sha": "0f7b6776a325fafa3244019a7b995ec9045573d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY3YjY3NzZhMzI1ZmFmYTMyNDQwMTlhN2I5OTVlYzkwNDU1NzNkMA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-02-12T21:08:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-02-12T21:08:25Z"}, "message": "i386.md (paritydi2, paritysi2): New expanders.\n\n        * config/i386/i386.md (paritydi2, paritysi2): New expanders.\n        (paritydi2_cmp, paritydi2_cmp): New insn and split patterns.\n        (*parityhi2_cmp, *parityqi2_cmp): New insn patterns.\n\ntestsuite/ChangeLog:\n\n        * gcc.target/i386/parity-1.c: New test.\n        * gcc.target/i386/parity-2.c: New test.\n\nFrom-SVN: r121863", "tree": {"sha": "f5787497e75c26dc068e95256416a0b9dcbb12e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5787497e75c26dc068e95256416a0b9dcbb12e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f7b6776a325fafa3244019a7b995ec9045573d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7b6776a325fafa3244019a7b995ec9045573d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f7b6776a325fafa3244019a7b995ec9045573d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7b6776a325fafa3244019a7b995ec9045573d0/comments", "author": null, "committer": null, "parents": [{"sha": "6170a99877476a4af173c3a6a27a69590457ab15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6170a99877476a4af173c3a6a27a69590457ab15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6170a99877476a4af173c3a6a27a69590457ab15"}], "stats": {"total": 155, "additions": 153, "deletions": 2}, "files": [{"sha": "0b408448cac05a696e91cb68904862dfae6b5cd4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7b6776a325fafa3244019a7b995ec9045573d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7b6776a325fafa3244019a7b995ec9045573d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f7b6776a325fafa3244019a7b995ec9045573d0", "patch": "@@ -1,3 +1,9 @@\n+2007-02-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (paritydi2, paritysi2): New expanders.\n+\t(paritydi2_cmp, paritydi2_cmp): New insn and split patterns.\n+\t(*parityhi2_cmp, *parityqi2_cmp): New insn patterns.\n+\n 2007-02-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree.h (DECL_IGNORED_P): Document further effect for FUNCTION_DECL.\n@@ -173,8 +179,8 @@\n \tmode.\n \t* config/rs6000/rs6000.c (rs6000_builtin_conversion): New.\n \t(TARGET_VECTORIZE_BUILTIN_CONVERSION): Defined.\n-\t(rs6000_expand_builtin): Add handling a case of ALTIVEC_BUILTIN_VCFUX or\n-\tALTIVEC_BUILTIN_VCFSX.\n+\t(rs6000_expand_builtin): Add handling a case of ALTIVEC_BUILTIN_VCFUX\n+\tor ALTIVEC_BUILTIN_VCFSX.\n \n 2007-02-10  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n "}, {"sha": "5e39568a1e712c1d2e87aef95e6dfcb7744bab40", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7b6776a325fafa3244019a7b995ec9045573d0/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7b6776a325fafa3244019a7b995ec9045573d0/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0f7b6776a325fafa3244019a7b995ec9045573d0", "patch": "@@ -15122,6 +15122,130 @@\n   [(set_attr \"prefix_rep\" \"1\")\n    (set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"HI\")])\n+\n+(define_expand \"paritydi2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(parity:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")))]\n+  \"! TARGET_POPCNT\"\n+{\n+  rtx scratch = gen_reg_rtx (QImode);\n+  rtx cond;\n+\n+  emit_insn (gen_paritydi2_cmp (NULL_RTX, NULL_RTX,\n+\t\t\t\tNULL_RTX, operands[1]));\n+\n+  cond = gen_rtx_fmt_ee (ORDERED, QImode,\n+\t\t\t gen_rtx_REG (CCmode, FLAGS_REG),\n+\t\t\t const0_rtx);\n+  emit_insn (gen_rtx_SET (VOIDmode, scratch, cond));\n+\n+  if (TARGET_64BIT)\n+    emit_insn (gen_zero_extendqidi2 (operands[0], scratch));\n+  else\n+    {\n+      rtx tmp = gen_reg_rtx (SImode);\n+\n+      emit_insn (gen_zero_extendqisi2 (tmp, scratch));\n+      emit_insn (gen_zero_extendsidi2 (operands[0], tmp));\n+    }\n+  DONE;\n+})\n+\n+(define_insn_and_split \"paritydi2_cmp\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(parity:CC (match_operand:DI 3 \"nonimmediate_operand\" \"0,m\")))\n+   (clobber (match_scratch:DI 0 \"=r,X\"))\n+   (clobber (match_scratch:SI 1 \"=r,r\"))\n+   (clobber (match_scratch:HI 2 \"=Q,Q\"))]\n+  \"! TARGET_POPCNT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel\n+     [(set (match_dup 1)\n+\t   (xor:SI (match_dup 1) (match_dup 4)))\n+      (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+     [(set (reg:CC FLAGS_REG)\n+\t   (parity:CC (match_dup 1)))\n+      (clobber (match_dup 1))\n+      (clobber (match_dup 2))])]\n+{\n+  operands[4] = gen_lowpart (SImode, operands[3]);\n+\n+  if (MEM_P (operands[3]))\n+    emit_move_insn (operands[1], gen_highpart (SImode, operands[3]));\n+  else if (! TARGET_64BIT)\n+    operands[1] = gen_highpart (SImode, operands[3]);\n+  else\n+    {\n+      emit_move_insn (operands[1], gen_lowpart (SImode, operands[3]));\n+      emit_insn (gen_lshrdi3 (operands[3], operands[3], GEN_INT (32)));\n+    }\n+})\n+\n+(define_expand \"paritysi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(parity:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))]\n+  \"! TARGET_POPCNT\"\n+{\n+  rtx scratch = gen_reg_rtx (QImode);\n+  rtx cond;\n+\n+  emit_insn (gen_paritysi2_cmp (NULL_RTX, NULL_RTX, operands[1]));\n+\n+  cond = gen_rtx_fmt_ee (ORDERED, QImode,\n+\t\t\t gen_rtx_REG (CCmode, FLAGS_REG),\n+\t\t\t const0_rtx);\n+  emit_insn (gen_rtx_SET (VOIDmode, scratch, cond));\n+\n+  emit_insn (gen_zero_extendqisi2 (operands[0], scratch));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"paritysi2_cmp\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(parity:CC (match_operand:SI 2 \"nonimmediate_operand\" \"0,m\")))\n+   (clobber (match_scratch:SI 0 \"=r,X\"))\n+   (clobber (match_scratch:HI 1 \"=Q,Q\"))]\n+  \"! TARGET_POPCNT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel\n+     [(set (match_dup 1)\n+\t   (xor:HI (match_dup 1) (match_dup 3)))\n+      (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+     [(set (reg:CC FLAGS_REG)\n+\t   (parity:CC (match_dup 1)))\n+      (clobber (match_dup 1))])]\n+{\n+  operands[3] = gen_lowpart (HImode, operands[2]);\n+\n+  if (MEM_P (operands[2]))\n+    emit_move_insn (operands[1], gen_highpart (HImode, operands[2]));\n+  else\n+    {\n+      emit_move_insn (operands[1], gen_lowpart (HImode, operands[2]));\n+      emit_insn (gen_lshrsi3 (operands[2], operands[2], GEN_INT (16)));\n+    }\n+})\n+\n+(define_insn \"*parityhi2_cmp\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(parity:CC (match_operand:HI 1 \"register_operand\" \"0\")))\n+   (clobber (match_scratch:HI 0 \"=Q\"))]\n+  \"! TARGET_POPCNT\"\n+  \"xor{b}\\t{%h0, %b0|%b0, %h0}\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"mode\" \"HI\")])\n+\n+(define_insn \"*parityqi2_cmp\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(parity:CC (match_operand:QI 0 \"register_operand\" \"q\")))]\n+  \"! TARGET_POPCNT\"\n+  \"test{b}\\t%0, %0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"mode\" \"QI\")])\n \f\n ;; Thread-local storage patterns for ELF.\n ;;"}, {"sha": "a2edb27ad06c0170b90f627ea997aded20f0e990", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7b6776a325fafa3244019a7b995ec9045573d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7b6776a325fafa3244019a7b995ec9045573d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f7b6776a325fafa3244019a7b995ec9045573d0", "patch": "@@ -1,3 +1,8 @@\n+2007-02-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/parity-1.c: New test.\n+\t* gcc.target/i386/parity-2.c: New test.\n+\n 2007-02-12  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.target/i386/builtin-bswap-3.c: New test case."}, {"sha": "f6c881ba8954cadca40f0eac777e84fc19c0239a", "filename": "gcc/testsuite/gcc.target/i386/parity-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7b6776a325fafa3244019a7b995ec9045573d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7b6776a325fafa3244019a7b995ec9045573d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-1.c?ref=0f7b6776a325fafa3244019a7b995ec9045573d0", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler \"setnp\" } } */\n+\n+int foo(unsigned int x)\n+{\n+  return __builtin_parity(x);\n+}"}, {"sha": "cb7855a66c7dff15061f9cf27b70b0f834fc68d2", "filename": "gcc/testsuite/gcc.target/i386/parity-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7b6776a325fafa3244019a7b995ec9045573d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7b6776a325fafa3244019a7b995ec9045573d0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fparity-2.c?ref=0f7b6776a325fafa3244019a7b995ec9045573d0", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler \"setnp\" } } */\n+\n+int foo(unsigned long long int x)\n+{\n+  return __builtin_parityll(x);\n+}"}]}