{"sha": "1d8617eb8c089ee60000e50e53ed320b983092ea", "node_id": "C_kwDOANBUbNoAKDFkODYxN2ViOGMwODllZTYwMDAwZTUwZTUzZWQzMjBiOTgzMDkyZWE", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2021-07-06T20:42:31Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-21T15:25:00Z"}, "message": "[Ada] Cleanup old VxWorks in Makefile.rtl\n\ngcc/ada/\n\n\t* Makefile.rtl: Remove unused VxWorks sections.\n\t* libgnarl/s-vxwext__noints.adb: Remove.\n\t* libgnarl/s-vxwext__vthreads.ads: Remove.\n\t* libgnat/a-elchha__vxworks-ppc-full.adb: Remove.\n\t* libgnat/s-osprim__vxworks.adb: Remove.\n\t* libgnat/s-osvers__vxworks-653.ads: Remove.\n\t* libgnat/system-vxworks-e500-vthread.ads: Remove.\n\t* libgnat/system-vxworks-ppc-vthread.ads: Remove.\n\t* libgnat/system-vxworks-x86-vthread.ads: Remove.", "tree": {"sha": "bba4b3ec82db334862272420b2edfc770c64c3b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bba4b3ec82db334862272420b2edfc770c64c3b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d8617eb8c089ee60000e50e53ed320b983092ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8617eb8c089ee60000e50e53ed320b983092ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d8617eb8c089ee60000e50e53ed320b983092ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d8617eb8c089ee60000e50e53ed320b983092ea/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443"}], "stats": {"total": 1202, "additions": 0, "deletions": 1202}, "files": [{"sha": "db21f016f08b6999cd98a113ff4cbb2328213d5d", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 0, "deletions": 130, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d8617eb8c089ee60000e50e53ed320b983092ea/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d8617eb8c089ee60000e50e53ed320b983092ea/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=1d8617eb8c089ee60000e50e53ed320b983092ea", "patch": "@@ -1196,136 +1196,6 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks vxworksspe vxworks7% vxworks7spe\n   endif\n endif\n \n-# PowerPC and e500v2 VxWorks 653\n-ifeq ($(strip $(filter-out powerpc% wrs vxworksae vxworksaespe,$(target_cpu) $(target_vendor) $(target_os))),)\n-\n-  ifeq ($(strip $(filter-out e500%, $(target_alias))),)\n-     ARCH_STR=e500\n-     # gcc config translates the target e500v2-wrs-vxworks to\n-     # powerpc-wrs-vxworksspe. Let's keep the original alias here when\n-     # generating s-oscons.ads.\n-     target=$(target_alias)\n-  else\n-     ARCH_STR=ppc\n-  endif\n-\n-  # target pairs for vthreads runtime\n-  LIBGNAT_TARGET_PAIRS = \\\n-  a-elchha.adb<libgnat/a-elchha__vxworks-ppc-full.adb \\\n-  a-intnam.ads<libgnarl/a-intnam__vxworks.ads \\\n-  a-naliop.ads<libgnat/a-naliop__nolibm.ads \\\n-  a-nuaufl.ads<libgnat/a-nuaufl__wraplf.ads \\\n-  a-nashfl.ads<libgnat/a-nashfl__wraplf.ads \\\n-  g-io.adb<hie/g-io__vxworks-cert.adb \\\n-  s-dorepr.adb<libgnat/s-dorepr__fma.adb \\\n-  s-inmaop.adb<libgnarl/s-inmaop__vxworks.adb \\\n-  s-interr.adb<libgnarl/s-interr__vxworks.adb \\\n-  s-intman.ads<libgnarl/s-intman__vxworks.ads \\\n-  s-intman.adb<libgnarl/s-intman__vxworks.adb \\\n-  s-osinte.adb<libgnarl/s-osinte__vxworks.adb \\\n-  s-osinte.ads<libgnarl/s-osinte__vxworks.ads \\\n-  s-osprim.adb<libgnat/s-osprim__vxworks.adb \\\n-  s-parame.ads<libgnat/s-parame__ae653.ads \\\n-  s-parame.adb<libgnat/s-parame__vxworks.adb \\\n-  s-taprop.adb<libgnarl/s-taprop__vxworks.adb \\\n-  s-tasinf.ads<libgnarl/s-tasinf__vxworks.ads \\\n-  s-taspri.ads<libgnarl/s-taspri__vxworks.ads \\\n-  s-tpopsp.adb<libgnarl/s-tpopsp__vxworks.adb \\\n-  s-vxwext.adb<libgnarl/s-vxwext__noints.adb \\\n-  s-vxwext.ads<libgnarl/s-vxwext__vthreads.ads \\\n-  s-vxwork.ads<libgnarl/s-vxwork__ppc.ads \\\n-  $(ATOMICS_TARGET_PAIRS) \\\n-  $(ATOMICS_BUILTINS_TARGET_PAIRS) \\\n-  system.ads<libgnat/system-vxworks-$(ARCH_STR)-vthread.ads\n-\n-  EH_MECHANISM=-gcc\n-\n-  TOOLS_TARGET_PAIRS=indepsw.adb<indepsw-gnu.adb\n-\n-  EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o\n-  EXTRA_GNATRTL_TASKING_OBJS=i-vxinco.o s-vxwork.o s-vxwext.o\n-\n-  EXTRA_LIBGNAT_OBJS+=sigtramp-vxworks.o\n-  EXTRA_LIBGNAT_SRCS+=$(VX_SIGTRAMP_EXTRA_SRCS)\n-\n-  # Extra pairs for the vthreads runtime\n-  ifeq ($(strip $(filter-out vthreads,$(THREAD_KIND))),)\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-thread.adb<libgnat/s-thread__ae653.adb \\\n-    s-osvers.ads<libgnat/s-osvers__vxworks-653.ads \\\n-    $(DUMMY_SOCKETS_TARGET_PAIRS)\n-\n-    GNATRTL_SOCKETS_OBJS =\n-    EXTRA_GNATRTL_NONTASKING_OBJS += s-thread.o s-osvers.o\n-  else\n-    LIBGNAT_TARGET_PAIRS += \\\n-    g-socthi.ads<libgnat/g-socthi__vxworks.ads \\\n-    g-socthi.adb<libgnat/g-socthi__vxworks.adb \\\n-    g-sopowa.adb<libgnat/g-sopowa__posix.adb \\\n-    g-stsifd.adb<libgnat/g-stsifd__sockets.adb\n-  endif\n-\n-endif\n-\n-# VxWorksae / VxWorks 653 for x86 (vxsim) - ?? VxWorks mils not implemented\n-ifeq ($(strip $(filter-out %86 wrs vxworksae,$(target_cpu) $(target_vendor) $(target_os))),)\n-  # target pairs for kernel + vthreads runtime\n-  LIBGNAT_TARGET_PAIRS = \\\n-  a-elchha.adb<libgnat/a-elchha__vxworks-ppc-full.adb \\\n-  a-intnam.ads<libgnarl/a-intnam__vxworks.ads \\\n-  a-naliop.ads<libgnat/a-naliop__nolibm.ads \\\n-  a-nuaufl.ads<libgnat/a-nuaufl__wraplf.ads \\\n-  a-nashfl.ads<libgnat/a-nashfl__wraplf.ads \\\n-  g-io.adb<hie/g-io__vxworks-cert.adb \\\n-  s-inmaop.adb<libgnarl/s-inmaop__vxworks.adb \\\n-  s-interr.adb<libgnarl/s-interr__vxworks.adb \\\n-  s-intman.ads<libgnarl/s-intman__vxworks.ads \\\n-  s-intman.adb<libgnarl/s-intman__vxworks.adb \\\n-  s-osinte.adb<libgnarl/s-osinte__vxworks.adb \\\n-  s-osinte.ads<libgnarl/s-osinte__vxworks.ads \\\n-  s-osprim.adb<libgnat/s-osprim__vxworks.adb \\\n-  s-parame.ads<libgnat/s-parame__ae653.ads \\\n-  s-parame.adb<libgnat/s-parame__vxworks.adb \\\n-  s-taprop.adb<libgnarl/s-taprop__vxworks.adb \\\n-  s-tasinf.ads<libgnarl/s-tasinf__vxworks.ads \\\n-  s-taspri.ads<libgnarl/s-taspri__vxworks.ads \\\n-  s-tpopsp.adb<libgnarl/s-tpopsp__vxworks.adb \\\n-  s-vxwext.adb<libgnarl/s-vxwext__noints.adb \\\n-  s-vxwext.ads<libgnarl/s-vxwext__vthreads.ads \\\n-  s-vxwork.ads<libgnarl/s-vxwork__x86.ads \\\n-  system.ads<libgnat/system-vxworks-x86-vthread.ads \\\n-  $(ATOMICS_TARGET_PAIRS) \\\n-  $(ATOMICS_BUILTINS_TARGET_PAIRS)\n-\n-  EH_MECHANISM=-gcc\n-\n-  TOOLS_TARGET_PAIRS=indepsw.adb<indepsw-gnu.adb\n-\n-  EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o s-thread.o\n-  EXTRA_GNATRTL_TASKING_OBJS=i-vxinco.o s-vxwork.o s-vxwext.o\n-\n-  EXTRA_LIBGNAT_OBJS+=vx_stack_info.o\n-  GNATRTL_SOCKETS_OBJS =\n-\n-  # Extra pairs for the vthreads runtime\n-  ifeq ($(strip $(filter-out vthreads,$(THREAD_KIND))),)\n-    LIBGNAT_TARGET_PAIRS += \\\n-    s-thread.adb<libgnat/s-thread__ae653.adb \\\n-    s-osvers.ads<libgnat/s-osvers__vxworks-653.ads \\\n-    $(DUMMY_SOCKETS_TARGET_PAIRS)\n-\n-    GNATRTL_SOCKETS_OBJS =\n-    EXTRA_GNATRTL_NONTASKING_OBJS += s-thread.o s-osvers.o\n-  else\n-    LIBGNAT_TARGET_PAIRS += \\\n-    g-socthi.ads<libgnat/g-socthi__vxworks.ads \\\n-    g-socthi.adb<libgnat/g-socthi__vxworks.adb \\\n-    g-sopowa.adb<libgnat/g-sopowa__posix.adb \\\n-    g-stsifd.adb<libgnat/g-stsifd__sockets.adb\n-  endif\n-\n-endif\n-\n # x86/x86_64 VxWorks\n ifeq ($(strip $(filter-out %86 x86_64 wrs vxworks vxworks7%,$(target_cpu) $(target_vendor) $(target_os))),)\n "}, {"sha": "421781f8d53479d1a911b024a72fb166ec22ab81", "filename": "gcc/ada/libgnarl/s-vxwext__noints.adb", "status": "removed", "additions": 0, "deletions": 126, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnarl%2Fs-vxwext__noints.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnarl%2Fs-vxwext__noints.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-vxwext__noints.adb?ref=b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "patch": "@@ -1,126 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n---                                                                          --\n---                     S Y S T E M . V X W O R K S . E X T                  --\n---                                                                          --\n---                                   B o d y                                --\n---                                                                          --\n---            Copyright (C) 2008-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This package provides vxworks specific support functions needed\n---  by System.OS_Interface.\n-\n---  This is a version for VxWorks 5 based systems with no interrupts:\n---  HI-Ravenscar for VxWorks 5, VxWorks 653 vThreads (not ravenscar-cert)\n-\n-package body System.VxWorks.Ext is\n-\n-   ERROR : constant := -1;\n-\n-   --------------\n-   -- Int_Lock --\n-   --------------\n-\n-   function Int_Lock return int is\n-   begin\n-      return ERROR;\n-   end Int_Lock;\n-\n-   ----------------\n-   -- Int_Unlock --\n-   ----------------\n-\n-   function Int_Unlock (Old : int) return int is\n-      pragma Unreferenced (Old);\n-   begin\n-      return ERROR;\n-   end Int_Unlock;\n-\n-   -----------------------\n-   -- Interrupt_Connect --\n-   -----------------------\n-\n-   function Interrupt_Connect\n-     (Vector    : Interrupt_Vector;\n-      Handler   : Interrupt_Handler;\n-      Parameter : System.Address := System.Null_Address) return int\n-   is\n-      pragma Unreferenced (Vector, Handler, Parameter);\n-   begin\n-      return ERROR;\n-   end Interrupt_Connect;\n-\n-   -----------------------\n-   -- Interrupt_Context --\n-   -----------------------\n-\n-   function Interrupt_Context return int is\n-   begin\n-      --  For VxWorks 653 vThreads, never in an interrupt context\n-\n-      return 0;\n-   end Interrupt_Context;\n-\n-   --------------------------------\n-   -- Interrupt_Number_To_Vector --\n-   --------------------------------\n-\n-   function Interrupt_Number_To_Vector\n-     (intNum : int) return Interrupt_Vector\n-   is\n-      pragma Unreferenced (intNum);\n-   begin\n-      return 0;\n-   end Interrupt_Number_To_Vector;\n-\n-   ---------------\n-   -- semDelete --\n-   ---------------\n-\n-   function semDelete (Sem : SEM_ID) return int is\n-      function Os_Sem_Delete (Sem : SEM_ID) return int;\n-      pragma Import (C, Os_Sem_Delete, \"semDelete\");\n-   begin\n-      return Os_Sem_Delete (Sem);\n-   end semDelete;\n-\n-   ------------------------\n-   -- taskCpuAffinitySet --\n-   ------------------------\n-\n-   function taskCpuAffinitySet (tid : t_id; CPU : int) return int is\n-      pragma Unreferenced (tid, CPU);\n-   begin\n-      return ERROR;\n-   end taskCpuAffinitySet;\n-\n-   -------------------------\n-   -- taskMaskAffinitySet --\n-   -------------------------\n-\n-   function taskMaskAffinitySet (tid : t_id; CPU_Set : unsigned) return int is\n-      pragma Unreferenced (tid, CPU_Set);\n-   begin\n-      return ERROR;\n-   end taskMaskAffinitySet;\n-\n-end System.VxWorks.Ext;"}, {"sha": "e97561eb42adec193da8ae80e6ce777af524e424", "filename": "gcc/ada/libgnarl/s-vxwext__vthreads.ads", "status": "removed", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnarl%2Fs-vxwext__vthreads.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnarl%2Fs-vxwext__vthreads.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-vxwext__vthreads.ads?ref=b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "patch": "@@ -1,109 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                  GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                --\n---                                                                          --\n---                     S Y S T E M . V X W O R K S . E X T                  --\n---                                                                          --\n---                                   S p e c                                --\n---                                                                          --\n---            Copyright (C) 2008-2021, Free Software Foundation, Inc.       --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This package provides VxWorks specific support functions needed\n---  by System.OS_Interface.\n-\n---  This is the VxWorks 653 vThreads version of this package\n-\n-with Interfaces.C;\n-\n-package System.VxWorks.Ext is\n-   pragma Preelaborate;\n-\n-   subtype SEM_ID is Long_Integer;\n-   --  typedef struct semaphore *SEM_ID;\n-\n-   type sigset_t is mod 2 ** Interfaces.C.long'Size;\n-\n-   type t_id is new Long_Integer;\n-   subtype int is Interfaces.C.int;\n-   subtype unsigned is Interfaces.C.unsigned;\n-\n-   type Interrupt_Handler is access procedure (parameter : System.Address);\n-   pragma Convention (C, Interrupt_Handler);\n-\n-   type Interrupt_Vector is new System.Address;\n-   function Int_Lock return int;\n-   pragma Inline (Int_Lock);\n-\n-   function Int_Unlock (Old : int) return int;\n-   pragma Inline (Int_Unlock);\n-\n-   function Interrupt_Connect\n-     (Vector    : Interrupt_Vector;\n-      Handler   : Interrupt_Handler;\n-      Parameter : System.Address := System.Null_Address) return int;\n-   pragma Convention (C, Interrupt_Connect);\n-\n-   function Interrupt_Context return int;\n-   pragma Convention (C, Interrupt_Context);\n-\n-   function Interrupt_Number_To_Vector\n-     (intNum : int) return Interrupt_Vector;\n-   pragma Convention (C, Interrupt_Number_To_Vector);\n-\n-   function semDelete (Sem : SEM_ID) return int;\n-   pragma Convention (C, semDelete);\n-\n-   function Task_Cont (tid : t_id) return int;\n-   pragma Import (C, Task_Cont, \"taskResume\");\n-\n-   function Task_Stop (tid : t_id) return int;\n-   pragma Import (C, Task_Stop, \"taskSuspend\");\n-\n-   function kill (pid : t_id; sig : int) return int;\n-   pragma Import (C, kill, \"kill\");\n-\n-   function getpid return t_id;\n-   pragma Import (C, getpid, \"taskIdSelf\");\n-\n-   function Set_Time_Slice (ticks : int) return int;\n-   pragma Import (C, Set_Time_Slice, \"kernelTimeSlice\");\n-\n-   type UINT64 is mod 2 ** Long_Long_Integer'Size;\n-\n-   function tickGet return UINT64;\n-   --  \"tickGet\" not available for cert vThreads:\n-   pragma Import (C, tickGet, \"tick64Get\");\n-\n-   --------------------------------\n-   -- Processor Affinity for SMP --\n-   --------------------------------\n-\n-   function taskCpuAffinitySet (tid : t_id; CPU : int) return int;\n-   pragma Convention (C, taskCpuAffinitySet);\n-   --  For SMP run-times set the CPU affinity.\n-   --  For uniprocessor systems return ERROR status.\n-\n-   function taskMaskAffinitySet (tid : t_id; CPU_Set : unsigned) return int;\n-   pragma Convention (C, taskMaskAffinitySet);\n-   --  For SMP run-times set the CPU mask affinity.\n-   --  For uniprocessor systems return ERROR status.\n-\n-end System.VxWorks.Ext;"}, {"sha": "69f5cc236f0738ba89931e73a89ce8529720146d", "filename": "gcc/ada/libgnat/a-elchha__vxworks-ppc-full.adb", "status": "removed", "additions": 0, "deletions": 150, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnat%2Fa-elchha__vxworks-ppc-full.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnat%2Fa-elchha__vxworks-ppc-full.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-elchha__vxworks-ppc-full.adb?ref=b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "patch": "@@ -1,150 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT RUN-TIME COMPONENTS                         --\n---                                                                          --\n---    A D A . E X C E P T I O N S . L A S T _ C H A N C E _ H A N D L E R   --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 2003-2021, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-pragma Warnings (Off);\n-with System.Standard_Library;\n-pragma Warnings (On);\n-\n-with GNAT.Debug_Utilities; use GNAT.Debug_Utilities;\n-with GNAT.IO; use GNAT.IO;\n-\n---  Default last chance handler for use with the full VxWorks 653 partition OS\n---  Ada run-time library.\n-\n---  Logs error with health monitor, and dumps exception identity and argument\n---  string for vxaddr2line for generation of a symbolic stack backtrace.\n-\n-procedure Ada.Exceptions.Last_Chance_Handler (Except : Exception_Occurrence) is\n-\n-   ----------------------\n-   -- APEX definitions --\n-   ----------------------\n-\n-   pragma Warnings (Off);\n-   type Error_Code_Type is (\n-      Deadline_Missed,\n-      Application_Error,\n-      Numeric_Error,\n-      Illegal_Request,\n-      Stack_Overflow,\n-      Memory_Violation,\n-      Hardware_Fault,\n-      Power_Fail);\n-   pragma Warnings (On);\n-   pragma Convention (C, Error_Code_Type);\n-   --  APEX Health Management error codes\n-\n-   type Message_Addr_Type is new System.Address;\n-\n-   type Apex_Integer is range -(2 ** 31) .. (2 ** 31) - 1;\n-   pragma Convention (C, Apex_Integer);\n-\n-   Max_Error_Message_Size : constant := 64;\n-\n-   type Error_Message_Size_Type is new Apex_Integer range\n-      1 .. Max_Error_Message_Size;\n-\n-   pragma Warnings (Off);\n-   type Return_Code_Type is (\n-      No_Error,        --  request valid and operation performed\n-      No_Action,       --  status of system unaffected by request\n-      Not_Available,   --  resource required by request unavailable\n-      Invalid_Param,   --  invalid parameter specified in request\n-      Invalid_Config,  --  parameter incompatible with configuration\n-      Invalid_Mode,    --  request incompatible with current mode\n-      Timed_Out);      --  time-out tied up with request has expired\n-   pragma Warnings (On);\n-   pragma Convention (C, Return_Code_Type);\n-   --  APEX return codes\n-\n-   procedure Raise_Application_Error\n-     (Error_Code   : Error_Code_Type;\n-      Message_Addr : Message_Addr_Type;\n-      Length       : Error_Message_Size_Type;\n-      Return_Code  : out Return_Code_Type);\n-   pragma Import (C, Raise_Application_Error, \"RAISE_APPLICATION_ERROR\");\n-\n-   procedure Unhandled_Terminate;\n-   pragma No_Return (Unhandled_Terminate);\n-   pragma Import (C, Unhandled_Terminate, \"__gnat_unhandled_terminate\");\n-   --  Perform system dependent shutdown code\n-\n-   procedure Adainit;\n-   pragma Import (Ada, Adainit, \"adainit\");\n-\n-   Adainit_Addr : constant System.Address := Adainit'Code_Address;\n-   --  Part of arguments to vxaddr2line\n-\n-   Result : Return_Code_Type;\n-\n-   Message      : String :=\n-     Exception_Name (Except) &   \": \" & ASCII.LF &\n-     Exception_Message (Except) & ASCII.NUL;\n-\n-   Message_Length : Error_Message_Size_Type;\n-\n-begin\n-   New_Line;\n-   Put_Line (\"In last chance handler\");\n-   Put_Line (Message (1 .. Message'Length - 1));\n-   New_Line;\n-\n-   Put_Line (\"adainit and traceback addresses for vxaddr2line:\");\n-\n-   Put (Image_C (Adainit_Addr)); Put (\" \");\n-\n-   for J in 1 .. Except.Num_Tracebacks loop\n-      Put (Image_C (Except.Tracebacks (J)));\n-      Put (\" \");\n-   end loop;\n-\n-   New_Line;\n-\n-   if Message'Length > Error_Message_Size_Type'Last then\n-      Message_Length := Error_Message_Size_Type'Last;\n-   else\n-      Message_Length := Message'Length;\n-   end if;\n-\n-   Raise_Application_Error\n-     (Error_Code   => Application_Error,\n-      Message_Addr => Message_Addr_Type (Message (1)'Address),\n-      Length       => Message_Length,\n-      Return_Code  => Result);\n-\n-   --  Shutdown the run-time library now. The rest of the procedure needs to be\n-   --  careful not to use anything that would require runtime support. In\n-   --  particular, functions returning strings are banned since the sec stack\n-   --  is no longer functional.\n-\n-   System.Standard_Library.Adafinal;\n-   Unhandled_Terminate;\n-end Ada.Exceptions.Last_Chance_Handler;"}, {"sha": "ad2ac403ff3b098ee7914406aa37ab729e7bfa43", "filename": "gcc/ada/libgnat/s-osprim__vxworks.adb", "status": "removed", "additions": 0, "deletions": 162, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnat%2Fs-osprim__vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnat%2Fs-osprim__vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-osprim__vxworks.adb?ref=b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "patch": "@@ -1,162 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n---                                                                          --\n---                  S Y S T E M . O S _ P R I M I T I V E S                 --\n---                                                                          --\n---                                  B o d y                                 --\n---                                                                          --\n---          Copyright (C) 1998-2021, Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNARL is free software; you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNARL was developed by the GNARL team at Florida State University.       --\n--- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This version is for VxWorks targets\n-\n-with System.OS_Interface;\n---  Since the thread library is part of the VxWorks kernel, using OS_Interface\n---  is not a problem here, as long as we only use System.OS_Interface as a\n---  set of C imported routines: using Ada routines from this package would\n---  create a dependency on libgnarl in libgnat, which is not desirable.\n-\n-with System.OS_Constants;\n-with Interfaces.C;\n-\n-package body System.OS_Primitives is\n-\n-   use System.OS_Interface;\n-   use type Interfaces.C.int;\n-\n-   package OSC renames System.OS_Constants;\n-\n-   ------------------------\n-   -- Internal functions --\n-   ------------------------\n-\n-   function To_Clock_Ticks (D : Duration) return int;\n-   --  Convert a duration value (in seconds) into clock ticks.\n-   --  Note that this routine is duplicated from System.OS_Interface since\n-   --  as explained above, we do not want to depend on libgnarl\n-\n-   function To_Clock_Ticks (D : Duration) return int is\n-      Ticks          : Long_Long_Integer;\n-      Rate_Duration  : Duration;\n-      Ticks_Duration : Duration;\n-\n-   begin\n-      if D < 0.0 then\n-         return -1;\n-      end if;\n-\n-      --  Ensure that the duration can be converted to ticks\n-      --  at the current clock tick rate without overflowing.\n-\n-      Rate_Duration := Duration (sysClkRateGet);\n-\n-      if D > (Duration'Last / Rate_Duration) then\n-         Ticks := Long_Long_Integer (int'Last);\n-      else\n-         Ticks_Duration := D * Rate_Duration;\n-         Ticks := Long_Long_Integer (Ticks_Duration);\n-\n-         if Ticks_Duration > Duration (Ticks) then\n-            Ticks := Ticks + 1;\n-         end if;\n-\n-         if Ticks > Long_Long_Integer (int'Last) then\n-            Ticks := Long_Long_Integer (int'Last);\n-         end if;\n-      end if;\n-\n-      return int (Ticks);\n-   end To_Clock_Ticks;\n-\n-   -----------\n-   -- Clock --\n-   -----------\n-\n-   function Clock return Duration is\n-      TS     : aliased timespec;\n-      Result : int;\n-   begin\n-      Result := clock_gettime (OSC.CLOCK_RT_Ada, TS'Unchecked_Access);\n-      pragma Assert (Result = 0);\n-      return Duration (TS.ts_sec) + Duration (TS.ts_nsec) / 10#1#E9;\n-   end Clock;\n-\n-   -----------------\n-   -- Timed_Delay --\n-   -----------------\n-\n-   procedure Timed_Delay\n-     (Time : Duration;\n-      Mode : Integer)\n-   is\n-      Rel_Time   : Duration;\n-      Abs_Time   : Duration;\n-      Base_Time  : constant Duration := Clock;\n-      Check_Time : Duration := Base_Time;\n-      Ticks      : int;\n-\n-      Result     : int;\n-      pragma Unreferenced (Result);\n-\n-   begin\n-      if Mode = Relative then\n-         Rel_Time := Time;\n-         Abs_Time := Time + Check_Time;\n-      else\n-         Rel_Time := Time - Check_Time;\n-         Abs_Time := Time;\n-      end if;\n-\n-      if Rel_Time > 0.0 then\n-         loop\n-            Ticks := To_Clock_Ticks (Rel_Time);\n-\n-            if Mode = Relative and then Ticks < int'Last then\n-               --  The first tick will delay anytime between 0 and\n-               --  1 / sysClkRateGet seconds, so we need to add one to\n-               --  be on the safe side.\n-\n-               Ticks := Ticks + 1;\n-            end if;\n-\n-            Result := taskDelay (Ticks);\n-            Check_Time := Clock;\n-\n-            exit when Abs_Time <= Check_Time or else Check_Time < Base_Time;\n-\n-            Rel_Time := Abs_Time - Check_Time;\n-         end loop;\n-      end if;\n-   end Timed_Delay;\n-\n-   ----------------\n-   -- Initialize --\n-   ----------------\n-\n-   procedure Initialize is\n-   begin\n-      null;\n-   end Initialize;\n-\n-end System.OS_Primitives;"}, {"sha": "e180e7cb29ba6d371d980946563ba48a507b7a69", "filename": "gcc/ada/libgnat/s-osvers__vxworks-653.ads", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnat%2Fs-osvers__vxworks-653.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnat%2Fs-osvers__vxworks-653.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-osvers__vxworks-653.ads?ref=b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "patch": "@@ -1,38 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                      GNAT RUN-TIME LIBRARY COMPONENTS                    --\n---                                                                          --\n---                      S Y S T E M . O S _ V E R S I O N                   --\n---                                                                          --\n---                                  S p e c                                 --\n---                                                                          --\n---                      Copyright (C) 2010-2021, AdaCore                    --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is the VxWorks 653 Partition OS version of this file. If you add an OS\n---  variant please be sure to update type OS_Version in all variants of this\n---  file, which is part of the Level A certified run-time libraries.\n-\n-package System.OS_Versions is\n-   pragma Pure (System.OS_Versions);\n-   type OS_Version is\n-     (LynxOS_178, VxWorks_Cert, VxWorks_Cert_RTP, VxWorks_653, VxWorks_MILS);\n-   OS : constant OS_Version := VxWorks_653;\n-end System.OS_Versions;"}, {"sha": "0857c670baf91c20668521e870ea68494256b7d7", "filename": "gcc/ada/libgnat/system-vxworks-e500-vthread.ads", "status": "removed", "additions": 0, "deletions": 162, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-e500-vthread.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-e500-vthread.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-e500-vthread.ads?ref=b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "patch": "@@ -1,162 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                      (VxWorks e500 AE653 vThreads)                       --\n---                                                                          --\n---          Copyright (C) 1992-2021, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This version is for the AE653/e500v2 vThreads full run-time\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   pragma No_Elaboration_Code_All;\n-   --  Allow the use of that restriction in units that WITH this unit\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int             : constant := -2 ** (Standard'Max_Integer_Size - 1);\n-   Max_Int             : constant :=  2 ** (Standard'Max_Integer_Size - 1) - 1;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Standard'Max_Integer_Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := Standard'Max_Integer_Size - 1;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 1.0 / 60.0;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := High_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  Ada priorities are mapped to VxWorks priorities using the following\n-   --  transformation: 255 - Ada Priority\n-\n-   --  Ada priorities are used as follows:\n-\n-   --  256        is reserved for the VxWorks kernel\n-   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n-   --  247        is a catchall default \"interrupt\" priority for signals,\n-   --             allowing higher priority than normal tasks, but lower than\n-   --             hardware priority levels.  Protected Object ceilings can\n-   --             override these values.\n-   --  246        is used by the Interrupt_Manager task\n-\n-   Max_Priority           : constant Positive := 245;\n-   Max_Interrupt_Priority : constant Positive := 255;\n-\n-   subtype Any_Priority       is Integer      range   0 .. 255;\n-   subtype Priority           is Any_Priority range   0 .. 245;\n-   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n-\n-   Default_Priority : constant Priority := 122;\n-\n-private\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := False;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := True;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Machine_Overflows         : constant Boolean := False;\n-   Machine_Rounds            : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := False;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := True;\n-   Frontend_Exceptions       : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := False;\n-\n-   Executable_Extension : constant String := \".out\";\n-\n-end System;"}, {"sha": "64f130393435f3f862316ce55a339f37d4e8054c", "filename": "gcc/ada/libgnat/system-vxworks-ppc-vthread.ads", "status": "removed", "additions": 0, "deletions": 162, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-ppc-vthread.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-ppc-vthread.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-ppc-vthread.ads?ref=b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "patch": "@@ -1,162 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                       (VxWorks PPC AE653 vThreads)                       --\n---                                                                          --\n---          Copyright (C) 1992-2021, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This version is for the AE653 vThreads full run-time\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   pragma No_Elaboration_Code_All;\n-   --  Allow the use of that restriction in units that WITH this unit\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int             : constant := -2 ** (Standard'Max_Integer_Size - 1);\n-   Max_Int             : constant :=  2 ** (Standard'Max_Integer_Size - 1) - 1;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Standard'Max_Integer_Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := Standard'Max_Integer_Size - 1;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 1.0 / 60.0;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := High_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  Ada priorities are mapped to VxWorks priorities using the following\n-   --  transformation: 255 - Ada Priority\n-\n-   --  Ada priorities are used as follows:\n-\n-   --  256        is reserved for the VxWorks kernel\n-   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n-   --  247        is a catchall default \"interrupt\" priority for signals,\n-   --             allowing higher priority than normal tasks, but lower than\n-   --             hardware priority levels.  Protected Object ceilings can\n-   --             override these values.\n-   --  246        is used by the Interrupt_Manager task\n-\n-   Max_Priority           : constant Positive := 245;\n-   Max_Interrupt_Priority : constant Positive := 255;\n-\n-   subtype Any_Priority       is Integer      range   0 .. 255;\n-   subtype Priority           is Any_Priority range   0 .. 245;\n-   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n-\n-   Default_Priority : constant Priority := 122;\n-\n-private\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := False;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := True;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Machine_Overflows         : constant Boolean := True;\n-   Machine_Rounds            : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := False;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := True;\n-   Frontend_Exceptions       : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := False;\n-\n-   Executable_Extension : constant String := \".out\";\n-\n-end System;"}, {"sha": "3b78e7e9fdb744ab66576c5090a621aa72ab2b42", "filename": "gcc/ada/libgnat/system-vxworks-x86-vthread.ads", "status": "removed", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-x86-vthread.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-x86-vthread.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fsystem-vxworks-x86-vthread.ads?ref=b6bb60b2414b6cdfc8f24b3b50bbbdfc8090c443", "patch": "@@ -1,163 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                        GNAT RUN-TIME COMPONENTS                          --\n---                                                                          --\n---                               S Y S T E M                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                         (VxWorks 653 x86 vThreads)                       --\n---                                                                          --\n---          Copyright (C) 1992-2021, Free Software Foundation, Inc.         --\n---                                                                          --\n--- This specification is derived from the Ada Reference Manual for use with --\n--- GNAT. The copyright notice above, and the license provisions that follow --\n--- apply solely to the  contents of the part following the private keyword. --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n---                                                                          --\n--- As a special exception under Section 7 of GPL version 3, you are granted --\n--- additional permissions described in the GCC Runtime Library Exception,   --\n--- version 3.1, as published by the Free Software Foundation.               --\n---                                                                          --\n--- You should have received a copy of the GNU General Public License and    --\n--- a copy of the GCC Runtime Library Exception along with this program;     --\n--- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n--- <http://www.gnu.org/licenses/>.                                          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This version is for the AE653 vThreads full run-time\n-\n-package System is\n-   pragma Pure;\n-   --  Note that we take advantage of the implementation permission to make\n-   --  this unit Pure instead of Preelaborable; see RM 13.7.1(15). In Ada\n-   --  2005, this is Pure in any case (AI-362).\n-\n-   pragma No_Elaboration_Code_All;\n-   --  Allow the use of that restriction in units that WITH this unit\n-\n-   type Name is (SYSTEM_NAME_GNAT);\n-   System_Name : constant Name := SYSTEM_NAME_GNAT;\n-\n-   --  System-Dependent Named Numbers\n-\n-   Min_Int             : constant := -2 ** (Standard'Max_Integer_Size - 1);\n-   Max_Int             : constant :=  2 ** (Standard'Max_Integer_Size - 1) - 1;\n-\n-   Max_Binary_Modulus    : constant := 2 ** Standard'Max_Integer_Size;\n-   Max_Nonbinary_Modulus : constant := 2 ** Integer'Size - 1;\n-\n-   Max_Base_Digits       : constant := Long_Long_Float'Digits;\n-   Max_Digits            : constant := Long_Long_Float'Digits;\n-\n-   Max_Mantissa          : constant := Standard'Max_Integer_Size - 1;\n-   Fine_Delta            : constant := 2.0 ** (-Max_Mantissa);\n-\n-   Tick                  : constant := 1.0 / 60.0;\n-\n-   --  Storage-related Declarations\n-\n-   type Address is private;\n-   pragma Preelaborable_Initialization (Address);\n-   Null_Address : constant Address;\n-\n-   Storage_Unit : constant := 8;\n-   Word_Size    : constant := 32;\n-   Memory_Size  : constant := 2 ** 32;\n-\n-   --  Address comparison\n-\n-   function \"<\"  (Left, Right : Address) return Boolean;\n-   function \"<=\" (Left, Right : Address) return Boolean;\n-   function \">\"  (Left, Right : Address) return Boolean;\n-   function \">=\" (Left, Right : Address) return Boolean;\n-   function \"=\"  (Left, Right : Address) return Boolean;\n-\n-   pragma Import (Intrinsic, \"<\");\n-   pragma Import (Intrinsic, \"<=\");\n-   pragma Import (Intrinsic, \">\");\n-   pragma Import (Intrinsic, \">=\");\n-   pragma Import (Intrinsic, \"=\");\n-\n-   --  Other System-Dependent Declarations\n-\n-   type Bit_Order is (High_Order_First, Low_Order_First);\n-   Default_Bit_Order : constant Bit_Order := Low_Order_First;\n-   pragma Warnings (Off, Default_Bit_Order); -- kill constant condition warning\n-\n-   --  Priority-related Declarations (RM D.1)\n-\n-   --  Ada priorities are mapped to VxWorks priorities using the following\n-   --  transformation: 255 - Ada Priority\n-\n-   --  Ada priorities are used as follows:\n-\n-   --  256        is reserved for the VxWorks kernel\n-   --  248 - 255  correspond to hardware interrupt levels 0 .. 7\n-   --  247        is a catchall default \"interrupt\" priority for signals,\n-   --             allowing higher priority than normal tasks, but lower than\n-   --             hardware priority levels.  Protected Object ceilings can\n-   --             override these values.\n-   --  246        is used by the Interrupt_Manager task\n-\n-   Max_Priority           : constant Positive := 245;\n-   Max_Interrupt_Priority : constant Positive := 255;\n-\n-   subtype Any_Priority       is Integer      range   0 .. 255;\n-   subtype Priority           is Any_Priority range   0 .. 245;\n-   subtype Interrupt_Priority is Any_Priority range 246 .. 255;\n-\n-   Default_Priority : constant Priority := 122;\n-\n-private\n-\n-   type Address is mod Memory_Size;\n-   Null_Address : constant Address := 0;\n-\n-   --------------------------------------\n-   -- System Implementation Parameters --\n-   --------------------------------------\n-\n-   --  These parameters provide information about the target that is used\n-   --  by the compiler. They are in the private part of System, where they\n-   --  can be accessed using the special circuitry in the Targparm unit\n-   --  whose source should be consulted for more detailed descriptions\n-   --  of the individual switch values.\n-\n-   Backend_Divide_Checks     : constant Boolean := False;\n-   Backend_Overflow_Checks   : constant Boolean := True;\n-   Command_Line_Args         : constant Boolean := False;\n-   Configurable_Run_Time     : constant Boolean := False;\n-   Denorm                    : constant Boolean := True;\n-   Duration_32_Bits          : constant Boolean := False;\n-   Exit_Status_Supported     : constant Boolean := True;\n-   Machine_Overflows         : constant Boolean := True;\n-   Machine_Rounds            : constant Boolean := True;\n-   Preallocated_Stacks       : constant Boolean := False;\n-   Signed_Zeros              : constant Boolean := True;\n-   Stack_Check_Default       : constant Boolean := False;\n-   Stack_Check_Probes        : constant Boolean := True;\n-   Stack_Check_Limits        : constant Boolean := False;\n-   Support_Aggregates        : constant Boolean := True;\n-   Support_Atomic_Primitives : constant Boolean := True;\n-   Support_Composite_Assign  : constant Boolean := True;\n-   Support_Composite_Compare : constant Boolean := True;\n-   Support_Long_Shifts       : constant Boolean := True;\n-   Always_Compatible_Rep     : constant Boolean := False;\n-   Suppress_Standard_Library : constant Boolean := False;\n-   Use_Ada_Main_Program_Name : constant Boolean := True;\n-   Frontend_Exceptions       : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := False;\n-\n-   Executable_Extension : constant String := \".out\";\n-\n-end System;"}]}