{"sha": "af02daff557a0abbf5521c143f1cdda406848a9b", "node_id": "C_kwDOANBUbNoAKGFmMDJkYWZmNTU3YTBhYmJmNTUyMWMxNDNmMWNkZGE0MDY4NDhhOWI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-25T10:05:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-05-25T10:05:08Z"}, "message": "asan: Fix up instrumentation of assignments which are both loads and stores [PR105714]\n\nOn the following testcase with -Os asan pass sees:\n  <bb 6> [local count: 354334800]:\n  # h_21 = PHI <h_15(6), 0(5)>\n  *c.3_5 = *d.2_4;\n  h_15 = h_21 + 1;\n  if (h_15 != 3)\n    goto <bb 6>; [75.00%]\n  else\n    goto <bb 7>; [25.00%]\n\n  <bb 7> [local count: 118111600]:\n  *c.3_5 = MEM[(struct a *)&b + 12B];\n  _13 = c.3_5->x;\n  return _13;\nIt instruments the\n  *c.3_5 = *d.2_4;\nassignment by adding\n  .ASAN_CHECK (7, c.3_5, 4, 4);\n  .ASAN_CHECK (6, d.2_4, 4, 4);\nbefore it (which later lowers to checking the corresponding shadow\nmemory).  But when considering instrumentation of\n  *c.3_5 = MEM[(struct a *)&b + 12B];\nit doesn't instrument anything, because it sees that *c.3_5 store is\nalready instrumented in a dominating block and so there is no need\nto instrument *c.3_5 store again (i.e. add another\n  .ASAN_CHECK (7, c.3_5, 4, 4);\n).  That is true, but misses the fact that we still want to\ninstrument the MEM[(struct a *)&b + 12B] load.\n\nThe following patch fixes that by changing has_stmt_been_instrumented_p\nto consider both store and load in the assignment if it does both\n(returning true iff both have been instrumented).\nThat matches how we handle e.g. builtin calls, where we also perform AND\nof all the memory locs involved in the call.\n\nI've verified that we still don't add the redundant\n  .ASAN_CHECK (7, c.3_5, 4, 4);\ncall but just add\n  _18 = &MEM[(struct a *)&b + 12B];\n  .ASAN_CHECK (6, _18, 4, 4);\nto instrument the load.\n\n2022-05-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR sanitizer/105714\n\t* asan.cc (has_stmt_been_instrumented_p): For assignments which\n\tare both stores and loads, return true only if both destination\n\tand source have been instrumented.\n\n\t* gcc.dg/asan/pr105714.c: New test.", "tree": {"sha": "551d2b74dc05d6324dcedc6e3eaa4f88850fb03f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/551d2b74dc05d6324dcedc6e3eaa4f88850fb03f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af02daff557a0abbf5521c143f1cdda406848a9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af02daff557a0abbf5521c143f1cdda406848a9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af02daff557a0abbf5521c143f1cdda406848a9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af02daff557a0abbf5521c143f1cdda406848a9b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c125f504c43a1d863b040375872b6696a6c2b681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c125f504c43a1d863b040375872b6696a6c2b681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c125f504c43a1d863b040375872b6696a6c2b681"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "15b2cf8a94e5cb63fb08d3a12bbf172b6b386c95", "filename": "gcc/asan.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af02daff557a0abbf5521c143f1cdda406848a9b/gcc%2Fasan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af02daff557a0abbf5521c143f1cdda406848a9b/gcc%2Fasan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.cc?ref=af02daff557a0abbf5521c143f1cdda406848a9b", "patch": "@@ -1285,7 +1285,20 @@ has_stmt_been_instrumented_p (gimple *stmt)\n \n       if (get_mem_ref_of_assignment (as_a <gassign *> (stmt), &r,\n \t\t\t\t     &r_is_store))\n-\treturn has_mem_ref_been_instrumented (&r);\n+\t{\n+\t  if (!has_mem_ref_been_instrumented (&r))\n+\t    return false;\n+\t  if (r_is_store && gimple_assign_load_p (stmt))\n+\t    {\n+\t      asan_mem_ref src;\n+\t      asan_mem_ref_init (&src, NULL, 1);\n+\t      src.start = gimple_assign_rhs1 (stmt);\n+\t      src.access_size = int_size_in_bytes (TREE_TYPE (src.start));\n+\t      if (!has_mem_ref_been_instrumented (&src))\n+\t\treturn false;\n+\t    }\n+\t  return true;\n+\t}\n     }\n   else if (gimple_call_builtin_p (stmt, BUILT_IN_NORMAL))\n     {"}, {"sha": "d378b8ab0c4b929be4917b31db95f5465b206a5d", "filename": "gcc/testsuite/gcc.dg/asan/pr105714.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af02daff557a0abbf5521c143f1cdda406848a9b/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr105714.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af02daff557a0abbf5521c143f1cdda406848a9b/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr105714.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr105714.c?ref=af02daff557a0abbf5521c143f1cdda406848a9b", "patch": "@@ -0,0 +1,33 @@\n+/* PR sanitizer/105714 */\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-Os\" } } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+struct A { int x; };\n+struct A b[2];\n+struct A *c = b, *d = b;\n+int e;\n+\n+int\n+foo ()\n+{\n+  for (e = 0; e < 1; e++)\n+    {\n+      int i[1];\n+      i;\n+    }\n+  for (int h = 0; h < 3; h++)\n+    *c = *d;\n+  *c = *(b + 3);\n+  return c->x;\n+}\n+\n+int\n+main ()\n+{\n+  foo ();\n+  return 0;\n+}\n+\n+/* { dg-output \"ERROR: AddressSanitizer: global-buffer-overflow on address.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"READ of size.*\" } */"}]}