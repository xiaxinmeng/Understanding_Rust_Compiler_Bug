{"sha": "daff5ab71e8de29f3b3bd91a9151401f6a8ea197", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFmZjVhYjcxZThkZTI5ZjNiM2JkOTFhOTE1MTQwMWY2YThlYTE5Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-18T10:01:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-18T10:01:26Z"}, "message": "[multiple changes]\n\n2014-07-18  Robert Dewar  <dewar@adacore.com>\n\n\t* repinfo.ads: Add documentation on handling of back annotation\n\tfor dynamic case.\n\n2014-07-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sinfo.ads, sinfo.adb (Incomplete_View): New semantic attribute\n\tof full type declaration, denotes previous declaration for\n\tincomplete view of the type.\n\t* sem_ch3.adb (Analyze_Full_Type_Declaration): Set Incomplete_View\n\tof declaration if one is present.\n\t(Replace_Type): When constructing the signature of an inherited\n\toperation, handle properly the case where the operation has a\n\tformal whose type is an incomplete view.\n\t* sem_util.adb (Collect_Primitive_Operations): Handle properly\n\tthe case of an operation declared after an incomplete declaration\n\tfor a type T and before the full declaration of T.\n\n2014-07-18  Pascal Obry  <obry@adacore.com>\n\n\t* i-cstrea.ads: Add documentation for set_wide_text_mode.\n\nFrom-SVN: r212802", "tree": {"sha": "2a171b963b83e699b1397ae128743d670dbf52ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a171b963b83e699b1397ae128743d670dbf52ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daff5ab71e8de29f3b3bd91a9151401f6a8ea197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daff5ab71e8de29f3b3bd91a9151401f6a8ea197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daff5ab71e8de29f3b3bd91a9151401f6a8ea197", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daff5ab71e8de29f3b3bd91a9151401f6a8ea197/comments", "author": null, "committer": null, "parents": [{"sha": "c45e5332cc03dc81591dfc409fdc224e4e1643c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c45e5332cc03dc81591dfc409fdc224e4e1643c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c45e5332cc03dc81591dfc409fdc224e4e1643c0"}], "stats": {"total": 111, "additions": 98, "deletions": 13}, "files": [{"sha": "f136cc7337088d89cc591a6a54231d31f6263d82", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff5ab71e8de29f3b3bd91a9151401f6a8ea197/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff5ab71e8de29f3b3bd91a9151401f6a8ea197/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=daff5ab71e8de29f3b3bd91a9151401f6a8ea197", "patch": "@@ -1,3 +1,26 @@\n+2014-07-18  Robert Dewar  <dewar@adacore.com>\n+\n+\t* repinfo.ads: Add documentation on handling of back annotation\n+\tfor dynamic case.\n+\n+2014-07-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sinfo.ads, sinfo.adb (Incomplete_View): New semantic attribute\n+\tof full type declaration, denotes previous declaration for\n+\tincomplete view of the type.\n+\t* sem_ch3.adb (Analyze_Full_Type_Declaration): Set Incomplete_View\n+\tof declaration if one is present.\n+\t(Replace_Type): When constructing the signature of an inherited\n+\toperation, handle properly the case where the operation has a\n+\tformal whose type is an incomplete view.\n+\t* sem_util.adb (Collect_Primitive_Operations): Handle properly\n+\tthe case of an operation declared after an incomplete declaration\n+\tfor a type T and before the full declaration of T.\n+\n+2014-07-18  Pascal Obry  <obry@adacore.com>\n+\n+\t* i-cstrea.ads: Add documentation for set_wide_text_mode.\n+\n 2014-07-18  Robert Dewar  <dewar@adacore.com>\n \n \t* a-witeio.adb: Minor code reorganization."}, {"sha": "67ca62f6e953c7df87e6a7f8383ea6b2339871f9", "filename": "gcc/ada/i-cstrea.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff5ab71e8de29f3b3bd91a9151401f6a8ea197/gcc%2Fada%2Fi-cstrea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff5ab71e8de29f3b3bd91a9151401f6a8ea197/gcc%2Fada%2Fi-cstrea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cstrea.ads?ref=daff5ab71e8de29f3b3bd91a9151401f6a8ea197", "patch": "@@ -221,8 +221,6 @@ package Interfaces.C_Streams is\n    -- Control of Text/Binary Mode --\n    ---------------------------------\n \n-   --  Is the above section title good enough, given the new addition???\n-\n    --  If text_translation_required is true, then the following functions may\n    --  be used to dynamically switch a file from binary to text mode or vice\n    --  versa. These functions have no effect if text_translation_required is\n@@ -231,7 +229,11 @@ package Interfaces.C_Streams is\n    procedure set_binary_mode (handle : int);\n    procedure set_text_mode   (handle : int);\n \n-   --  The following needs documentation ???\n+   --  set_wide_text_mode is as set_text_mode but switches the translation to\n+   --  16-bits wide-character instead of 8-bits character. Again this routine\n+   --  has not effect if text_translation_required is false. On Windows this\n+   --  is used to have proper 16-bits wide string output on the console for\n+   --  example.\n \n    procedure set_wide_text_mode (handle : int);\n "}, {"sha": "b18d66891a506566c6042661c964b3ce31ad2eb6", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff5ab71e8de29f3b3bd91a9151401f6a8ea197/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff5ab71e8de29f3b3bd91a9151401f6a8ea197/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=daff5ab71e8de29f3b3bd91a9151401f6a8ea197", "patch": "@@ -2464,6 +2464,8 @@ package body Sem_Ch3 is\n       Prev := Find_Type_Name (N);\n \n       --  The full view, if present, now points to the current type\n+      --  If there is an incomplete partial view, set a link to it, to\n+      --  simplify the retrieval of primitive operations of the type.\n \n       --  Ada 2005 (AI-50217): If the type was previously decorated when\n       --  imported through a LIMITED WITH clause, it appears as incomplete\n@@ -2472,6 +2474,7 @@ package body Sem_Ch3 is\n       if Ekind (Prev) = E_Incomplete_Type and then Present (Full_View (Prev))\n       then\n          T := Full_View (Prev);\n+         Set_Incomplete_View (N, Parent (Prev));\n       else\n          T := Prev;\n       end if;\n@@ -13537,6 +13540,7 @@ package body Sem_Ch3 is\n       ------------------\n \n       procedure Replace_Type (Id, New_Id : Entity_Id) is\n+         Id_Type  : constant Entity_Id := Etype (Id);\n          Acc_Type : Entity_Id;\n          Par      : constant Node_Id := Parent (Derived_Type);\n \n@@ -13547,9 +13551,9 @@ package body Sem_Ch3 is\n          --  be out of the proper scope for Gigi, so we insert a reference to\n          --  it after the derivation.\n \n-         if Ekind (Etype (Id)) = E_Anonymous_Access_Type then\n+         if Ekind (Id_Type) = E_Anonymous_Access_Type then\n             declare\n-               Desig_Typ : Entity_Id := Designated_Type (Etype (Id));\n+               Desig_Typ : Entity_Id := Designated_Type (Id_Type);\n \n             begin\n                if Ekind (Desig_Typ) = E_Record_Type_With_Private\n@@ -13567,7 +13571,7 @@ package body Sem_Ch3 is\n                  or else (Is_Interface (Desig_Typ)\n                            and then not Is_Class_Wide_Type (Desig_Typ))\n                then\n-                  Acc_Type := New_Copy (Etype (Id));\n+                  Acc_Type := New_Copy (Id_Type);\n                   Set_Etype (Acc_Type, Acc_Type);\n                   Set_Scope (Acc_Type, New_Subp);\n \n@@ -13599,16 +13603,23 @@ package body Sem_Ch3 is\n                   Build_Itype_Reference (Acc_Type, Parent (Derived_Type));\n \n                else\n-                  Set_Etype (New_Id, Etype (Id));\n+                  Set_Etype (New_Id, Id_Type);\n                end if;\n             end;\n \n-         elsif Base_Type (Etype (Id)) = Base_Type (Parent_Type)\n+         --  In Ada2012, a formal may have an incomplete type but the type\n+         --  derivation that inherits the primitive follows the full view.\n+\n+         elsif Base_Type (Id_Type) = Base_Type (Parent_Type)\n            or else\n-             (Ekind (Etype (Id)) = E_Record_Type_With_Private\n-               and then Present (Full_View (Etype (Id)))\n+             (Ekind (Id_Type) = E_Record_Type_With_Private\n+               and then Present (Full_View (Id_Type))\n                and then\n-                 Base_Type (Full_View (Etype (Id))) = Base_Type (Parent_Type))\n+                 Base_Type (Full_View (Id_Type)) = Base_Type (Parent_Type))\n+           or else\n+             (Ada_Version >= Ada_2012\n+                and then Ekind (Id_Type) = E_Incomplete_Type\n+                and then Full_View (Id_Type) = Parent_Type)\n          then\n             --  Constraint checks on formals are generated during expansion,\n             --  based on the signature of the original subprogram. The bounds"}, {"sha": "d6b46c38de75d612452ce1a932395702e000a4e7", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff5ab71e8de29f3b3bd91a9151401f6a8ea197/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff5ab71e8de29f3b3bd91a9151401f6a8ea197/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=daff5ab71e8de29f3b3bd91a9151401f6a8ea197", "patch": "@@ -3400,7 +3400,14 @@ package body Sem_Util is\n             Etyp := Designated_Type (Etyp);\n          end if;\n \n-         return Base_Type (Etyp) = B_Type;\n+         --  In Ada 2012 a primitive operation may have a formal of an\n+         --  incomplete view of the parent type.\n+\n+         return Base_Type (Etyp) = B_Type\n+           or else\n+             (Ada_Version >= Ada_2012\n+               and then Ekind (Etyp) = E_Incomplete_Type\n+               and then Full_View (Etyp) = B_Type);\n       end Match;\n \n    --  Start of processing for Collect_Primitive_Operations\n@@ -3454,6 +3461,16 @@ package body Sem_Util is\n            and then In_Private_Part (B_Scope)\n          then\n             Id := Next_Entity (T);\n+\n+         --  In Ada 2012, If the type has an incomplete partial view, there\n+         --  may be primitive operations declared before the full view, so\n+         --  we need to start scanning from the incomplete view.\n+\n+         elsif Nkind (Parent (B_Type)) = N_Full_Type_Declaration\n+           and then Present (Incomplete_View (Parent (B_Type)))\n+         then\n+            Id := Defining_Entity (Next (Incomplete_View (Parent (B_Type))));\n+\n          else\n             Id := Next_Entity (B_Type);\n          end if;"}, {"sha": "ec7a23f1125c720522d91fb5d3e929708263c25e", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff5ab71e8de29f3b3bd91a9151401f6a8ea197/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff5ab71e8de29f3b3bd91a9151401f6a8ea197/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=daff5ab71e8de29f3b3bd91a9151401f6a8ea197", "patch": "@@ -1713,6 +1713,14 @@ package body Sinfo is\n       return Flag11 (N);\n    end Includes_Infinities;\n \n+   function Incomplete_View\n+     (N : Node_Id) return Node_Id is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Full_Type_Declaration);\n+      return Node2 (N);\n+   end Incomplete_View;\n+\n    function Inherited_Discriminant\n       (N : Node_Id) return Boolean is\n    begin\n@@ -4879,6 +4887,14 @@ package body Sinfo is\n       Set_Flag11 (N, Val);\n    end Set_Includes_Infinities;\n \n+   procedure Set_Incomplete_View\n+     (N : Node_Id; Val : Node_Id) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Full_Type_Declaration);\n+      Set_Node2 (N, Val); --  semantic field, no Parent set\n+   end Set_Incomplete_View;\n+\n    procedure Set_Inherited_Discriminant\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "d06bb4baad2ccca90ecf2cdfea0c088225de8d8c", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daff5ab71e8de29f3b3bd91a9151401f6a8ea197/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daff5ab71e8de29f3b3bd91a9151401f6a8ea197/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=daff5ab71e8de29f3b3bd91a9151401f6a8ea197", "patch": "@@ -1450,6 +1450,13 @@ package Sinfo is\n    --    range is given by the programmer, even if that range is identical to\n    --    the range for Float.\n \n+   --  Incomplete_View (Node2-Sem)\n+   --    Present in full type declarations that are completions of incomplete\n+   --    type declarations. Denotes the corresponding incomplete type\n+   --    declaration. Used to simplify the retrieval of primitive operations\n+   --    that may be declared between the partial and the full view of an\n+   --    untagged type.\n+\n    --  Inherited_Discriminant (Flag13-Sem)\n    --    This flag is present in N_Component_Association nodes. It indicates\n    --    that a given component association in an extension aggregate is the\n@@ -2488,6 +2495,7 @@ package Sinfo is\n       --  N_Full_Type_Declaration\n       --  Sloc points to TYPE\n       --  Defining_Identifier (Node1)\n+      --  Incomplete_View (Node2-Sem)\n       --  Discriminant_Specifications (List4) (set to No_List if none)\n       --  Type_Definition (Node3)\n       --  Discr_Check_Funcs_Built (Flag11-Sem)\n@@ -9120,6 +9128,9 @@ package Sinfo is\n    function Includes_Infinities\n      (N : Node_Id) return Boolean;    -- Flag11\n \n+   function Incomplete_View\n+     (N : Node_Id) return Node_Id;    -- Node2\n+\n    function Inherited_Discriminant\n      (N : Node_Id) return Boolean;    -- Flag13\n \n@@ -10128,6 +10139,9 @@ package Sinfo is\n    procedure Set_Includes_Infinities\n      (N : Node_Id; Val : Boolean := True);    -- Flag11\n \n+   procedure Set_Incomplete_View\n+     (N : Node_Id;  Val : Node_Id);           -- Node2\n+\n    procedure Set_Inherited_Discriminant\n      (N : Node_Id; Val : Boolean := True);    -- Flag13\n \n@@ -10801,7 +10815,7 @@ package Sinfo is\n \n      N_Full_Type_Declaration =>\n        (1 => True,    --  Defining_Identifier (Node1)\n-        2 => False,   --  unused\n+        2 => False,   --  Incomplete_View (Node2-Sem)\n         3 => True,    --  Type_Definition (Node3)\n         4 => True,    --  Discriminant_Specifications (List4)\n         5 => False),  --  unused\n@@ -12543,6 +12557,7 @@ package Sinfo is\n    pragma Inline (Includes_Infinities);\n    pragma Inline (Import_Interface_Present);\n    pragma Inline (In_Present);\n+   pragma Inline (Incomplete_View);\n    pragma Inline (Inherited_Discriminant);\n    pragma Inline (Instance_Spec);\n    pragma Inline (Intval);\n@@ -12873,6 +12888,7 @@ package Sinfo is\n    pragma Inline (Set_Import_Interface_Present);\n    pragma Inline (Set_In_Present);\n    pragma Inline (Set_Includes_Infinities);\n+   pragma Inline (Set_Incomplete_View);\n    pragma Inline (Set_Inherited_Discriminant);\n    pragma Inline (Set_Instance_Spec);\n    pragma Inline (Set_Interface_List);"}]}