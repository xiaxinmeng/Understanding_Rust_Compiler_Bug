{"sha": "bd19c9f4f283c657315570d53349408e5a5dfd04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQxOWM5ZjRmMjgzYzY1NzMxNTU3MGQ1MzM0OTQwOGU1YTVkZmQwNA==", "commit": {"author": {"name": "Jeff Sturm", "email": "jsturm@one-point.com", "date": "2003-05-08T20:41:24Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2003-05-08T20:41:24Z"}, "message": "Solaris 7 .register fix.\n\nFrom-SVN: r66617", "tree": {"sha": "dc52e2a78df5b97fc450ca08347d73013f70bfcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc52e2a78df5b97fc450ca08347d73013f70bfcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd19c9f4f283c657315570d53349408e5a5dfd04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd19c9f4f283c657315570d53349408e5a5dfd04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd19c9f4f283c657315570d53349408e5a5dfd04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd19c9f4f283c657315570d53349408e5a5dfd04/comments", "author": null, "committer": null, "parents": [{"sha": "d0affb9f031875e6514ebcc49cd3d32cd671dcc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0affb9f031875e6514ebcc49cd3d32cd671dcc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0affb9f031875e6514ebcc49cd3d32cd671dcc4"}], "stats": {"total": 109, "additions": 88, "deletions": 21}, "files": [{"sha": "b609f1d6212fbcb39b00a909cfc532099e490148", "filename": "libffi/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd19c9f4f283c657315570d53349408e5a5dfd04/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd19c9f4f283c657315570d53349408e5a5dfd04/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=bd19c9f4f283c657315570d53349408e5a5dfd04", "patch": "@@ -1,3 +1,12 @@\n+2003-05-07  Jeff Sturm  <jsturm@one-point.com>\n+\n+\tFixes PR bootstrap/10656\n+\t* configure.in (HAVE_AS_REGISTER_PSEUDO_OP): Test assembler\n+\tsupport for .register pseudo-op.\n+\t* src/sparc/v8.S: Use it.\n+\t* fficonfig.h.in: Rebuilt.\n+\t* configure: Rebuilt.\n+\n 2003-04-18  Jakub Jelinek  <jakub@redhat.com>\n \n \t* include/ffi.h.in (POWERPC64): Define if 64-bit."}, {"sha": "5cbef7ab2fa8dfe30ff8064680526d7354ab2b46", "filename": "libffi/configure", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd19c9f4f283c657315570d53349408e5a5dfd04/libffi%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd19c9f4f283c657315570d53349408e5a5dfd04/libffi%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure?ref=bd19c9f4f283c657315570d53349408e5a5dfd04", "patch": "@@ -3596,6 +3596,43 @@ echo \"$ac_t\"\"$libffi_cv_as_sparc_ua_pcrel\" 1>&6\n     if test \"x$libffi_cv_as_sparc_ua_pcrel\" = xyes; then\n \tcat >> confdefs.h <<\\EOF\n #define HAVE_AS_SPARC_UA_PCREL 1\n+EOF\n+\n+    fi\n+\n+    echo $ac_n \"checking assembler .register pseudo-op support\"\"... $ac_c\" 1>&6\n+echo \"configure:3600: checking assembler .register pseudo-op support\" >&5\n+if eval \"test \\\"`echo '$''{'libffi_cv_as_register_pseudo_op'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  \n+       libffi_cv_as_register_pseudo_op=unknown\n+       # Check if we have .register\n+       cat > conftest.$ac_ext <<EOF\n+#line 3608 \"configure\"\n+#include \"confdefs.h\"\n+asm (\".register %g2, #scratch\");\n+int main() {\n+\n+; return 0; }\n+EOF\n+if { (eval echo configure:3615: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+  rm -rf conftest*\n+  libffi_cv_as_register_pseudo_op=yes\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -rf conftest*\n+  libffi_cv_as_register_pseudo_op=no\n+fi\n+rm -f conftest*\n+    \n+fi\n+\n+echo \"$ac_t\"\"$libffi_cv_as_register_pseudo_op\" 1>&6\n+    if test \"x$libffi_cv_as_register_pseudo_op\" = xyes; then\n+       cat >> confdefs.h <<\\EOF\n+#define HAVE_AS_REGISTER_PSEUDO_OP 1\n EOF\n \n     fi"}, {"sha": "e71f67344eae716db619216e8ed99778e71b1485", "filename": "libffi/configure.in", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd19c9f4f283c657315570d53349408e5a5dfd04/libffi%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd19c9f4f283c657315570d53349408e5a5dfd04/libffi%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fconfigure.in?ref=bd19c9f4f283c657315570d53349408e5a5dfd04", "patch": "@@ -134,6 +134,19 @@ if test x$TARGET = xSPARC; then\n \tAC_DEFINE(HAVE_AS_SPARC_UA_PCREL, 1,\n \t\t  [Define if your assembler and linker support unaligned PC relative relocs.])\n     fi\n+\n+    AC_CACHE_CHECK([assembler .register pseudo-op support],\n+       libffi_cv_as_register_pseudo_op, [\n+       libffi_cv_as_register_pseudo_op=unknown\n+       # Check if we have .register\n+       AC_TRY_COMPILE([asm (\".register %g2, #scratch\");],,\n+                       [libffi_cv_as_register_pseudo_op=yes],\n+                       [libffi_cv_as_register_pseudo_op=no])\n+    ])\n+    if test \"x$libffi_cv_as_register_pseudo_op\" = xyes; then\n+       AC_DEFINE(HAVE_AS_REGISTER_PSEUDO_OP, 1,\n+               [Define if your assembler supports .register.])\n+    fi\n fi\n \n AC_SUBST(TARGET)"}, {"sha": "2b6f5817dd3e95c7f92862f42aa18fbb3fc58306", "filename": "libffi/fficonfig.h.in", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd19c9f4f283c657315570d53349408e5a5dfd04/libffi%2Ffficonfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd19c9f4f283c657315570d53349408e5a5dfd04/libffi%2Ffficonfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ffficonfig.h.in?ref=bd19c9f4f283c657315570d53349408e5a5dfd04", "patch": "@@ -25,10 +25,6 @@\n /* Define if you have the ANSI C header files.  */\n #undef STDC_HEADERS\n \n-/* Define if your processor stores words with the most significant\n-   byte first (like Motorola and SPARC, unlike Intel and VAX).  */\n-#undef WORDS_BIGENDIAN\n-\n /* Define this if you want extra debugging */\n #undef FFI_DEBUG\n \n@@ -42,32 +38,42 @@\n /* Define this is you do not want support for the raw API.  */\n #undef FFI_NO_RAW_API\n \n-/* The number of bytes in a double.  */\n-#undef SIZEOF_DOUBLE\n+/* Define if you have the memcpy function.  */\n+#undef HAVE_MEMCPY\n \n-/* The number of bytes in a float.  */\n-#undef SIZEOF_FLOAT\n+/* The number of bytes in type short */\n+#undef SIZEOF_SHORT\n \n-/* The number of bytes in a int.  */\n+/* The number of bytes in type int */\n #undef SIZEOF_INT\n \n-/* The number of bytes in a long.  */\n+/* The number of bytes in type long */\n #undef SIZEOF_LONG\n \n-/* The number of bytes in a long double.  */\n-#undef SIZEOF_LONG_DOUBLE\n-\n-/* The number of bytes in a long long.  */\n+/* The number of bytes in type long long */\n #undef SIZEOF_LONG_LONG\n \n-/* The number of bytes in a short.  */\n-#undef SIZEOF_SHORT\n+/* The number of bytes in type float */\n+#undef SIZEOF_FLOAT\n \n-/* The number of bytes in a void *.  */\n+/* The number of bytes in type double */\n+#undef SIZEOF_DOUBLE\n+\n+/* The number of bytes in type long double */\n+#undef SIZEOF_LONG_DOUBLE\n+\n+/* The number of bytes in type void * */\n #undef SIZEOF_VOID_P\n \n-/* Define if you have the memcpy function.  */\n-#undef HAVE_MEMCPY\n+/* whether byteorder is bigendian */\n+#undef WORDS_BIGENDIAN\n+\n+/* 1234 = LIL_ENDIAN, 4321 = BIGENDIAN */\n+#undef BYTEORDER\n \n-/* Define if your assembler and linker support unaligned PC relative relocs.  */\n+/* Define if your assembler and linker support unaligned PC relative relocs. */\n #undef HAVE_AS_SPARC_UA_PCREL\n+\n+/* Define if your assembler supports .register. */\n+#undef HAVE_AS_REGISTER_PSEUDO_OP\n+"}, {"sha": "53374de3855cd30ccde2bb16097c63e6bb617c9b", "filename": "libffi/src/sparc/v8.S", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd19c9f4f283c657315570d53349408e5a5dfd04/libffi%2Fsrc%2Fsparc%2Fv8.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd19c9f4f283c657315570d53349408e5a5dfd04/libffi%2Fsrc%2Fsparc%2Fv8.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fsparc%2Fv8.S?ref=bd19c9f4f283c657315570d53349408e5a5dfd04", "patch": "@@ -109,7 +109,9 @@ longlong:\n \t.globl ffi_closure_v8\n \n ffi_closure_v8:\n-\t.register\t%g2, #scratch\n+#ifdef HAVE_AS_REGISTER_PSEUDO_OP\n+\t\t.register\t%g2, #scratch\n+#endif\n .LLFB2:\n \tsave\t%sp, -STACKFRAME, %sp\n .LLCFI1:"}]}