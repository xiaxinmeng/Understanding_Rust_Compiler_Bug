{"sha": "7629320a5362a2f0b3acf21bdd0a4dd39be21fc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYyOTMyMGE1MzYyYTJmMGIzYWNmMjFiZGQwYTRkZDM5YmUyMWZjNQ==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@suse.com", "date": "2014-11-03T09:18:51Z"}, "committer": {"name": "Jan Beulich", "email": "jbeulich@gcc.gnu.org", "date": "2014-11-03T09:18:51Z"}, "message": "x86: extend vect-args testcase to AVX flavors\n\ngcc/testsuite:\n2014-11-03  Jan Beulich  <jbeulich@suse.com>\n\n\t* gcc.target/i386/i386.exp: Extend option set to test\n\tvect-args.c with to include -mavx, -mavx2, and -mavx512f.\n\t* gcc.target/i386/vect-args.c: Add AVX* modes and tests.\n\nFrom-SVN: r217032", "tree": {"sha": "446a7c31bce0f8ea93e54eb28465be7f4567fd6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/446a7c31bce0f8ea93e54eb28465be7f4567fd6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7629320a5362a2f0b3acf21bdd0a4dd39be21fc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7629320a5362a2f0b3acf21bdd0a4dd39be21fc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7629320a5362a2f0b3acf21bdd0a4dd39be21fc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7629320a5362a2f0b3acf21bdd0a4dd39be21fc5/comments", "author": {"login": "jbeulich", "id": 5610135, "node_id": "MDQ6VXNlcjU2MTAxMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbeulich", "html_url": "https://github.com/jbeulich", "followers_url": "https://api.github.com/users/jbeulich/followers", "following_url": "https://api.github.com/users/jbeulich/following{/other_user}", "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions", "organizations_url": "https://api.github.com/users/jbeulich/orgs", "repos_url": "https://api.github.com/users/jbeulich/repos", "events_url": "https://api.github.com/users/jbeulich/events{/privacy}", "received_events_url": "https://api.github.com/users/jbeulich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1c94de07fb4bf1a210b297c074d366f70fcfc20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c94de07fb4bf1a210b297c074d366f70fcfc20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c94de07fb4bf1a210b297c074d366f70fcfc20"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "06e9bee3b44ee7026d24b3f49cedf521a93e349e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7629320a5362a2f0b3acf21bdd0a4dd39be21fc5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7629320a5362a2f0b3acf21bdd0a4dd39be21fc5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7629320a5362a2f0b3acf21bdd0a4dd39be21fc5", "patch": "@@ -1,3 +1,9 @@\n+2014-11-03  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* gcc.target/i386/i386.exp: Extend option set to test\n+\tvect-args.c with to include -mavx, -mavx2, and -mavx512f.\n+\t* gcc.target/i386/vect-args.c: Add AVX* modes and tests.\n+\n 2014-11-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.c-torture/execute/20010129-1.c: Compile with -mtune=i686"}, {"sha": "493a1f425e5378539ac059ef0260bc3d32d95684", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7629320a5362a2f0b3acf21bdd0a4dd39be21fc5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7629320a5362a2f0b3acf21bdd0a4dd39be21fc5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=7629320a5362a2f0b3acf21bdd0a4dd39be21fc5", "patch": "@@ -361,9 +361,9 @@ clearcap-init\n \n global runtests\n # Special case compilation of vect-args.c so we don't have to\n-# replicate it 10 times.\n+# replicate it 16 times.\n if [runtest_file_p $runtests $srcdir/$subdir/vect-args.c] {\n-  foreach type { \"\" -mmmx -m3dnow -msse -msse2 } {\n+  foreach type { \"\" -mmmx -m3dnow -msse -msse2 -mavx -mavx2 -mavx512f } {\n     foreach level { \"\" -O } {\n       set flags \"$type $level\"\n       verbose -log \"Testing vect-args, $flags\" 1"}, {"sha": "02cf3f55eeb1555a37a7e7213e9eadecec1bb6a4", "filename": "gcc/testsuite/gcc.target/i386/vect-args.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7629320a5362a2f0b3acf21bdd0a4dd39be21fc5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-args.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7629320a5362a2f0b3acf21bdd0a4dd39be21fc5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-args.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvect-args.c?ref=7629320a5362a2f0b3acf21bdd0a4dd39be21fc5", "patch": "@@ -1,6 +1,22 @@\n /* { dg-do compile } */\n /* { dg-options \"-w -Wno-psabi\" } */\n \n+/* AVX512F and AVX512BW modes.  */\n+typedef unsigned char V64QImode __attribute__((vector_size(64)));\n+typedef unsigned short V32HImode __attribute__((vector_size(64)));\n+typedef unsigned int V16SImode __attribute__((vector_size(64)));\n+typedef unsigned long long V8DImode __attribute__((vector_size(64)));\n+typedef float V16SFmode __attribute__((vector_size(64)));\n+typedef double V8DFmode __attribute__((vector_size(64)));\n+\n+/* AVX and AVX2 modes.  */\n+typedef unsigned char V32QImode __attribute__((vector_size(32)));\n+typedef unsigned short V16HImode __attribute__((vector_size(32)));\n+typedef unsigned int V8SImode __attribute__((vector_size(32)));\n+typedef unsigned long long V4DImode __attribute__((vector_size(32)));\n+typedef float V8SFmode __attribute__((vector_size(32)));\n+typedef double V4DFmode __attribute__((vector_size(32)));\n+\n /* SSE1 and SSE2 modes.  */\n typedef unsigned char V16QImode __attribute__((vector_size(16)));\n typedef unsigned short V8HImode __attribute__((vector_size(16)));\n@@ -21,12 +37,27 @@ extern TYPE data_##TYPE;\t\t\t\t\\\n void r_##TYPE (TYPE x) { data_##TYPE = x; }\t\t\\\n void s_##TYPE (void) { r_##TYPE (data_##TYPE); }\n \n+TEST(V64QImode)\n+TEST(V32HImode)\n+TEST(V16SImode)\n+TEST(V8DImode)\n+TEST(V16SFmode)\n+TEST(V8DFmode)\n+\n+TEST(V32QImode)\n+TEST(V16HImode)\n+TEST(V8SImode)\n+TEST(V4DImode)\n+TEST(V8SFmode)\n+TEST(V4DFmode)\n+\n TEST(V16QImode)\n TEST(V8HImode)\n TEST(V4SImode)\n TEST(V2DImode)\n TEST(V4SFmode)\n TEST(V2DFmode)\n+\n TEST(V8QImode)\n TEST(V4HImode)\n TEST(V2SImode)"}]}