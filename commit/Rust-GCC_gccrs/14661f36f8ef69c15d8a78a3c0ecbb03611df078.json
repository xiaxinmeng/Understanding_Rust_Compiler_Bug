{"sha": "14661f36f8ef69c15d8a78a3c0ecbb03611df078", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ2NjFmMzZmOGVmNjljMTVkOGE3OGEzYzBlY2JiMDM2MTFkZjA3OA==", "commit": {"author": {"name": "Chao-ying Fu", "email": "fu@mips.com", "date": "2007-05-08T22:51:14Z"}, "committer": {"name": "Chao-ying Fu", "email": "chaoyingfu@gcc.gnu.org", "date": "2007-05-08T22:51:14Z"}, "message": "md.texi (msub@var{m}@var{n}4, [...]): Document.\n\n* doc/md.texi (msub@var{m}@var{n}4, usub@var{m}@var{n}4): Document.\n* optabs.h (OTI_smsub_widen, OTI_umsub_widen): New optab_indexes.\n(smsub_widen_optab, umsub_widen_optab): Define.\n* optabs.c (init_optabs): Initialize smsub_widen_optab and\numsub_widen_optab.\n* genopinit.c (optabs): Fill in smsub_widen_optab and\numsub_widen_optab.\n* expr.c (expand_expr_real_1): Try to use smsub_widen_optab\nand umsub_widen_optab to implement multiply-subtract sequences.\n* config/mips/mips.md (*msac<u>_di): Rename to...\n(<u>msubsidi4): ...this.  Extend condition to include\nGENERATE_MADD_MSUB and TARGET_DSPR2.  Change the constraint\nof operand 0 to \"ka\" and use the three-operand form of msub<u>\nfor TARGET_DSPR2.\n* config/mips/mips-dspr2.md (mips_msub, mips_msubu): Convert\nto define_expands.\n\nFrom-SVN: r124558", "tree": {"sha": "4f99bbafe98aff39b7f5885c910746129d4e95e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f99bbafe98aff39b7f5885c910746129d4e95e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14661f36f8ef69c15d8a78a3c0ecbb03611df078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14661f36f8ef69c15d8a78a3c0ecbb03611df078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14661f36f8ef69c15d8a78a3c0ecbb03611df078", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14661f36f8ef69c15d8a78a3c0ecbb03611df078/comments", "author": null, "committer": null, "parents": [{"sha": "10050f74a3151e7aa333bbbffb38dde95cb5e001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10050f74a3151e7aa333bbbffb38dde95cb5e001", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10050f74a3151e7aa333bbbffb38dde95cb5e001"}], "stats": {"total": 131, "additions": 103, "deletions": 28}, "files": [{"sha": "4c7ba636bfb29360badfe87a5775faf3658432e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14661f36f8ef69c15d8a78a3c0ecbb03611df078", "patch": "@@ -1,3 +1,22 @@\n+2007-05-08  Chao-ying Fu  <fu@mips.com>\n+\n+\t* doc/md.texi (msub@var{m}@var{n}4, usub@var{m}@var{n}4): Document.\n+\t* optabs.h (OTI_smsub_widen, OTI_umsub_widen): New optab_indexes.\n+\t(smsub_widen_optab, umsub_widen_optab): Define.\n+\t* optabs.c (init_optabs): Initialize smsub_widen_optab and\n+\tumsub_widen_optab.\n+\t* genopinit.c (optabs): Fill in smsub_widen_optab and\n+\tumsub_widen_optab.\n+\t* expr.c (expand_expr_real_1): Try to use smsub_widen_optab\n+\tand umsub_widen_optab to implement multiply-subtract sequences.\n+\t* config/mips/mips.md (*msac<u>_di): Rename to...\n+\t(<u>msubsidi4): ...this.  Extend condition to include\n+\tGENERATE_MADD_MSUB and TARGET_DSPR2.  Change the constraint\n+\tof operand 0 to \"ka\" and use the three-operand form of msub<u>\n+\tfor TARGET_DSPR2.\n+\t* config/mips/mips-dspr2.md (mips_msub, mips_msubu): Convert\n+\tto define_expands.\n+\n 2007-05-08  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR rtl-optimization/28011"}, {"sha": "201900851778aaf67a293ab6139d92a52739d81d", "filename": "gcc/config/mips/mips-dspr2.md", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2Fconfig%2Fmips%2Fmips-dspr2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2Fconfig%2Fmips%2Fmips-dspr2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-dspr2.md?ref=14661f36f8ef69c15d8a78a3c0ecbb03611df078", "patch": "@@ -162,31 +162,13 @@\n \t (match_operand:DI 1 \"register_operand\")))]\n   \"TARGET_DSPR2 && !TARGET_64BIT\")\n \n-(define_insn \"mips_msub\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n-\t(minus:DI\n-\t (match_operand:DI 1 \"register_operand\" \"0\")\n-\t (mult:DI (sign_extend:DI\n-\t\t   (match_operand:SI 2 \"register_operand\" \"d\"))\n-\t\t  (sign_extend:DI\n-\t\t   (match_operand:SI 3 \"register_operand\" \"d\")))))]\n-  \"TARGET_DSPR2 && !TARGET_64BIT\"\n-  \"msub\\t%q0,%2,%3\"\n-  [(set_attr \"type\"\t\"imadd\")\n-   (set_attr \"mode\"\t\"SI\")])\n-\n-(define_insn \"mips_msubu\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=a\")\n+(define_expand \"mips_msub<u>\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n \t(minus:DI\n-\t (match_operand:DI 1 \"register_operand\" \"0\")\n-\t (mult:DI (zero_extend:DI\n-\t\t   (match_operand:SI 2 \"register_operand\" \"d\"))\n-\t\t  (zero_extend:DI\n-\t\t   (match_operand:SI 3 \"register_operand\" \"d\")))))]\n-  \"TARGET_DSPR2 && !TARGET_64BIT\"\n-  \"msubu\\t%q0,%2,%3\"\n-  [(set_attr \"type\"\t\"imadd\")\n-   (set_attr \"mode\"\t\"SI\")])\n+\t (match_operand:DI 1 \"register_operand\")\n+\t (mult:DI (any_extend:DI (match_operand:SI 2 \"register_operand\"))\n+\t\t  (any_extend:DI (match_operand:SI 3 \"register_operand\")))))]\n+  \"TARGET_DSPR2 && !TARGET_64BIT\")\n \n (define_insn \"mulv2hi3\"\n   [(parallel"}, {"sha": "de592b9adc7a8bf4a3ecb5d64cc5ca5118848f28", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=14661f36f8ef69c15d8a78a3c0ecbb03611df078", "patch": "@@ -1649,16 +1649,18 @@\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*msac<u>_di\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=x\")\n+(define_insn \"<u>msubsidi4\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=ka\")\n         (minus:DI\n \t   (match_operand:DI 3 \"register_operand\" \"0\")\n \t   (mult:DI\n \t      (any_extend:DI (match_operand:SI 1 \"register_operand\" \"d\"))\n \t      (any_extend:DI (match_operand:SI 2 \"register_operand\" \"d\")))))]\n-  \"!TARGET_64BIT && ISA_HAS_MSAC\"\n+  \"!TARGET_64BIT && (ISA_HAS_MSAC || GENERATE_MADD_MSUB || TARGET_DSPR2)\"\n {\n-  if (TARGET_MIPS5500)\n+  if (TARGET_DSPR2)\n+    return \"msub<u>\\t%q0,%1,%2\";\n+  else if (TARGET_MIPS5500 || GENERATE_MADD_MSUB)\n     return \"msub<u>\\t%1,%2\";\n   else\n     return \"msac<u>\\t$0,%1,%2\";"}, {"sha": "53c5769f7887b1f0f151dedc88afd4af5a636c47", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=14661f36f8ef69c15d8a78a3c0ecbb03611df078", "patch": "@@ -3687,6 +3687,25 @@ These instructions are not allowed to @code{FAIL}.\n Like @code{madd@var{m}@var{n}4}, but zero-extend the multiplication\n operands instead of sign-extending them.\n \n+@cindex @code{msub@var{m}@var{n}4} instruction pattern\n+@item @samp{msub@var{m}@var{n}4}\n+Multiply operands 1 and 2, sign-extend them to mode @var{n}, subtract the\n+result from operand 3, and store the result in operand 0.  Operands 1 and 2\n+have mode @var{m} and operands 0 and 3 have mode @var{n}.\n+Both modes must be integer modes and @var{n} must be twice\n+the size of @var{m}.\n+\n+In other words, @code{msub@var{m}@var{n}4} is like\n+@code{mul@var{m}@var{n}3} except that it also subtracts the result\n+from operand 3.\n+\n+These instructions are not allowed to @code{FAIL}.\n+\n+@cindex @code{umsub@var{m}@var{n}4} instruction pattern\n+@item @samp{umsub@var{m}@var{n}4}\n+Like @code{msub@var{m}@var{n}4}, but zero-extend the multiplication\n+operands instead of sign-extending them.\n+\n @cindex @code{divmod@var{m}4} instruction pattern\n @item @samp{divmod@var{m}4}\n Signed division that produces both a quotient and a remainder."}, {"sha": "ce26ba63a2df4a8f24f394c2fbddf94fbe6c2195", "filename": "gcc/expr.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=14661f36f8ef69c15d8a78a3c0ecbb03611df078", "patch": "@@ -8133,6 +8133,47 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return REDUCE_BIT_FIELD (simplify_gen_binary (PLUS, mode, op0, op1));\n \n     case MINUS_EXPR:\n+      /* Check if this is a case for multiplication and subtraction.  */\n+      if (TREE_CODE (type) == INTEGER_TYPE\n+\t  && TREE_CODE (TREE_OPERAND (exp, 1)) == MULT_EXPR)\n+\t{\n+\t  tree subsubexp0, subsubexp1;\n+\t  enum tree_code code0, code1;\n+\n+\t  subexp1 = TREE_OPERAND (exp, 1);\n+\t  subsubexp0 = TREE_OPERAND (subexp1, 0);\n+\t  subsubexp1 = TREE_OPERAND (subexp1, 1);\n+\t  code0 = TREE_CODE (subsubexp0);\n+\t  code1 = TREE_CODE (subsubexp1);\n+\t  if (code0 == NOP_EXPR && code1 == NOP_EXPR\n+\t      && (TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (subsubexp0, 0)))\n+\t\t  < TYPE_PRECISION (TREE_TYPE (subsubexp0)))\n+\t      && (TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (subsubexp0, 0)))\n+\t\t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (subsubexp1, 0))))\n+\t      && (TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (subsubexp0, 0)))\n+\t\t  == TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (subsubexp1, 0)))))\n+\t    {\n+\t      tree op0type = TREE_TYPE (TREE_OPERAND (subsubexp0, 0));\n+\t      enum machine_mode innermode = TYPE_MODE (op0type);\n+\t      bool zextend_p = TYPE_UNSIGNED (op0type);\n+\t      this_optab = zextend_p ? umsub_widen_optab : smsub_widen_optab;\n+\t      if (mode == GET_MODE_2XWIDER_MODE (innermode)\n+\t\t  && (this_optab->handlers[(int) mode].insn_code\n+\t\t      != CODE_FOR_nothing))\n+\t\t{\n+\t\t  expand_operands (TREE_OPERAND (subsubexp0, 0),\n+\t\t\t\t   TREE_OPERAND (subsubexp1, 0),\n+\t\t\t\t   NULL_RTX, &op0, &op1, EXPAND_NORMAL);\n+\t\t  op2 = expand_expr (TREE_OPERAND (exp, 0), subtarget,\n+\t\t\t\t     VOIDmode, 0);\n+\t\t  temp = expand_ternary_op (mode, this_optab, op0, op1, op2,\n+\t\t\t\t\t    target, unsignedp);\n+\t\t  gcc_assert (temp);\n+\t\t  return REDUCE_BIT_FIELD (temp);\n+\t\t}\n+\t    }\n+\t}\n+\n       /* For initializers, we are allowed to return a MINUS of two\n \t symbolic constants.  Here we handle all cases when both operands\n \t are constant.  */"}, {"sha": "a137750f9485c5b4883a491836f15bb975bec5a3", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=14661f36f8ef69c15d8a78a3c0ecbb03611df078", "patch": "@@ -87,6 +87,8 @@ static const char * const optabs[] =\n   \"usmul_widen_optab->handlers[$B].insn_code = CODE_FOR_$(usmul$a$b3$)$N\",\n   \"smadd_widen_optab->handlers[$B].insn_code = CODE_FOR_$(madd$a$b4$)$N\",\n   \"umadd_widen_optab->handlers[$B].insn_code = CODE_FOR_$(umadd$a$b4$)$N\",\n+  \"smsub_widen_optab->handlers[$B].insn_code = CODE_FOR_$(msub$a$b4$)$N\",\n+  \"umsub_widen_optab->handlers[$B].insn_code = CODE_FOR_$(umsub$a$b4$)$N\",\n   \"sdiv_optab->handlers[$A].insn_code = CODE_FOR_$(div$a3$)\",\n   \"sdivv_optab->handlers[$A].insn_code = CODE_FOR_$(div$V$I$a3$)\",\n   \"udiv_optab->handlers[$A].insn_code = CODE_FOR_$(udiv$I$a3$)\","}, {"sha": "416c4d43e9b36c5c0e8d7dfa26fd6858539209ef", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=14661f36f8ef69c15d8a78a3c0ecbb03611df078", "patch": "@@ -5442,6 +5442,8 @@ init_optabs (void)\n   usmul_widen_optab = init_optab (UNKNOWN);\n   smadd_widen_optab = init_optab (UNKNOWN);\n   umadd_widen_optab = init_optab (UNKNOWN);\n+  smsub_widen_optab = init_optab (UNKNOWN);\n+  umsub_widen_optab = init_optab (UNKNOWN);\n   sdiv_optab = init_optab (DIV);\n   sdivv_optab = init_optabv (DIV);\n   sdivmod_optab = init_optab (UNKNOWN);"}, {"sha": "60dcc159729df4c3a881ce7362097a66fcb631b2", "filename": "gcc/optabs.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14661f36f8ef69c15d8a78a3c0ecbb03611df078/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=14661f36f8ef69c15d8a78a3c0ecbb03611df078", "patch": "@@ -92,6 +92,12 @@ enum optab_index\n   /* Unigned multiply and add with the result and addend one machine mode\n      wider than the multiplicand and multiplier.  */\n   OTI_umadd_widen,\n+  /* Signed multiply and subtract the result and minuend one machine mode\n+     wider than the multiplicand and multiplier.  */\n+  OTI_smsub_widen,\n+  /* Unigned multiply and subtract the result and minuend one machine mode\n+     wider than the multiplicand and multiplier.  */\n+  OTI_umsub_widen,\n \n   /* Signed divide */\n   OTI_sdiv,\n@@ -317,6 +323,8 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define usmul_widen_optab (optab_table[OTI_usmul_widen])\n #define smadd_widen_optab (optab_table[OTI_smadd_widen])\n #define umadd_widen_optab (optab_table[OTI_umadd_widen])\n+#define smsub_widen_optab (optab_table[OTI_smsub_widen])\n+#define umsub_widen_optab (optab_table[OTI_umsub_widen])\n #define sdiv_optab (optab_table[OTI_sdiv])\n #define smulv_optab (optab_table[OTI_smulv])\n #define sdivv_optab (optab_table[OTI_sdivv])"}]}