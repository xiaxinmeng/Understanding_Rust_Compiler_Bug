{"sha": "0c9b182b9f454fb2d5f57b17d22e860490c3c68f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM5YjE4MmI5ZjQ1NGZiMmQ1ZjU3YjE3ZDIyZTg2MDQ5MGMzYzY4Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-09-06T20:07:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-09-06T20:07:13Z"}, "message": "re PR c/23075 (Redundant / bogus warning)\n\n\tPR c/23075\n\t* c-typeck.c (c_finish_return): Set TREE_NO_WARNING on RETURN_EXPR\n\tif \"return with no value, in function returning non-void\" warning\n\thas been issued.\n  \t* tree-cfg.c (execute_warn_function_return): Don't look at\n\tRETURN_EXPRs with TREE_NO_WARNING set.\n\n\t* typeck.c (check_return_expr): Add no_warning argument.  Set\n\t*no_warning to true if \"return-statement with no value, in function\n\treturning\" warning has been issued.\n\t* cp-tree.h (check_return_expr): Adjust prototype.\n\t* semantics.c (finish_return_stmt): Set TREE_NO_WARNING if\n\tcheck_return_expr set *no_warning to true.\n\n\t* gcc.dg/pr23075.c: New test.\n\t* g++.dg/warn/pr23075.C: New test.\n\nFrom-SVN: r103967", "tree": {"sha": "26cc76717919b282649ef97b4afa9424d824fe86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26cc76717919b282649ef97b4afa9424d824fe86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c9b182b9f454fb2d5f57b17d22e860490c3c68f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c9b182b9f454fb2d5f57b17d22e860490c3c68f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c9b182b9f454fb2d5f57b17d22e860490c3c68f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73109af7527b8c42510b1144cc2118a175960903", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73109af7527b8c42510b1144cc2118a175960903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73109af7527b8c42510b1144cc2118a175960903"}], "stats": {"total": 84, "additions": 75, "deletions": 9}, "files": [{"sha": "7ed2b69d02395aad7a59b68a167acb33830481f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c9b182b9f454fb2d5f57b17d22e860490c3c68f", "patch": "@@ -1,5 +1,12 @@\n 2005-09-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/23075\n+\t* c-typeck.c (c_finish_return): Set TREE_NO_WARNING on RETURN_EXPR\n+\tif \"return with no value, in function returning non-void\" warning\n+\thas been issued.\n+  \t* tree-cfg.c (execute_warn_function_return): Don't look at\n+\tRETURN_EXPRs with TREE_NO_WARNING set.\n+\n \tPR target/22362\n \t* config/i386/i386.c (ix86_function_regparm): Make sure automatic regparm\n \tfor internal functions doesn't use registers used by global registers"}, {"sha": "ff8577be99cee20c26f25a379ee227c90f3e00b5", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=0c9b182b9f454fb2d5f57b17d22e860490c3c68f", "patch": "@@ -6702,7 +6702,8 @@ c_finish_goto_ptr (tree expr)\n tree\n c_finish_return (tree retval)\n {\n-  tree valtype = TREE_TYPE (TREE_TYPE (current_function_decl));\n+  tree valtype = TREE_TYPE (TREE_TYPE (current_function_decl)), ret_stmt;\n+  bool no_warning = false;\n \n   if (TREE_THIS_VOLATILE (current_function_decl))\n     warning (0, \"function declared %<noreturn%> has a %<return%> statement\");\n@@ -6712,8 +6713,11 @@ c_finish_return (tree retval)\n       current_function_returns_null = 1;\n       if ((warn_return_type || flag_isoc99)\n \t  && valtype != 0 && TREE_CODE (valtype) != VOID_TYPE)\n-\tpedwarn_c99 (\"%<return%> with no value, in \"\n-\t\t     \"function returning non-void\");\n+\t{\n+\t  pedwarn_c99 (\"%<return%> with no value, in \"\n+\t\t       \"function returning non-void\");\n+\t  no_warning = true;\n+\t}\n     }\n   else if (valtype == 0 || TREE_CODE (valtype) == VOID_TYPE)\n     {\n@@ -6789,7 +6793,9 @@ c_finish_return (tree retval)\n       retval = build2 (MODIFY_EXPR, TREE_TYPE (res), res, t);\n     }\n \n-  return add_stmt (build_stmt (RETURN_EXPR, retval));\n+  ret_stmt = build_stmt (RETURN_EXPR, retval);\n+  TREE_NO_WARNING (ret_stmt) |= no_warning;\n+  return add_stmt (ret_stmt);\n }\n \f\n struct c_switch {"}, {"sha": "f56a714b5063e74ac4741572b63c1921af5fbf40", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0c9b182b9f454fb2d5f57b17d22e860490c3c68f", "patch": "@@ -1,3 +1,13 @@\n+2005-09-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/23075\n+\t* typeck.c (check_return_expr): Add no_warning argument.  Set\n+\t*no_warning to true if \"return-statement with no value, in function\n+\treturning\" warning has been issued.\n+\t* cp-tree.h (check_return_expr): Adjust prototype.\n+\t* semantics.c (finish_return_stmt): Set TREE_NO_WARNING if\n+\tcheck_return_expr set *no_warning to true.\n+\n 2005-09-06  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (rvalue): New function."}, {"sha": "cf241290ca4455d2349c68ec709b6eb870b8e767", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0c9b182b9f454fb2d5f57b17d22e860490c3c68f", "patch": "@@ -4322,7 +4322,7 @@ extern tree type_after_usual_arithmetic_conversions (tree, tree);\n extern tree composite_pointer_type\t\t(tree, tree, tree, tree,\n \t\t\t\t\t\t const char*);\n extern tree merge_types\t\t\t\t(tree, tree);\n-extern tree check_return_expr\t\t\t(tree);\n+extern tree check_return_expr\t\t\t(tree, bool *);\n #define cp_build_binary_op(code, arg1, arg2) \\\n   build_binary_op(code, arg1, arg2, 1)\n #define cxx_sizeof(T)  cxx_sizeof_or_alignof_type (T, SIZEOF_EXPR, true)"}, {"sha": "c7fd1bbf92914a3a21576be4623b70f7260740a7", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0c9b182b9f454fb2d5f57b17d22e860490c3c68f", "patch": "@@ -743,8 +743,9 @@ tree\n finish_return_stmt (tree expr)\n {\n   tree r;\n+  bool no_warning;\n \n-  expr = check_return_expr (expr);\n+  expr = check_return_expr (expr, &no_warning);\n   if (!processing_template_decl)\n     {\n       if (DECL_DESTRUCTOR_P (current_function_decl)\n@@ -760,6 +761,7 @@ finish_return_stmt (tree expr)\n     }\n \n   r = build_stmt (RETURN_EXPR, expr);\n+  TREE_NO_WARNING (r) |= no_warning;\n   r = maybe_cleanup_point_expr_void (r);\n   r = add_stmt (r);\n   finish_stmt ();"}, {"sha": "b0dfa604d89dcb263a701420dfd5e19e308be8c3", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0c9b182b9f454fb2d5f57b17d22e860490c3c68f", "patch": "@@ -6134,17 +6134,21 @@ maybe_warn_about_returning_address_of_local (tree retval)\n /* Check that returning RETVAL from the current function is valid.\n    Return an expression explicitly showing all conversions required to\n    change RETVAL into the function return type, and to assign it to\n-   the DECL_RESULT for the function.  */\n+   the DECL_RESULT for the function.  Set *NO_WARNING to true if\n+   code reaches end of non-void function warning shouldn't be issued\n+   on this RETURN_EXPR.  */\n \n tree\n-check_return_expr (tree retval)\n+check_return_expr (tree retval, bool *no_warning)\n {\n   tree result;\n   /* The type actually returned by the function, after any\n      promotions.  */\n   tree valtype;\n   int fn_returns_value_p;\n \n+  *no_warning = false;\n+\n   /* A `volatile' function is one that isn't supposed to return, ever.\n      (This is a G++ extension, used to get better code for functions\n      that call the `volatile' function.)  */\n@@ -6195,6 +6199,10 @@ check_return_expr (tree retval)\n \t end of a non-void function (which we don't, we gave a\n \t return!).  */\n       current_function_returns_null = 0;\n+      /* And signal caller that TREE_NO_WARNING should be set on the\n+         RETURN_EXPR to avoid control reaches end of non-void function\n+         warnings in tree-cfg.c.  */\n+      *no_warning = true;\n     }\n   /* Check for a return statement with a value in a function that\n      isn't supposed to return a value.  */"}, {"sha": "74e070baef2308813732dc9049c2508efb5018ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c9b182b9f454fb2d5f57b17d22e860490c3c68f", "patch": "@@ -1,5 +1,9 @@\n 2005-09-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/23075\n+\t* gcc.dg/pr23075.c: New test.\n+\t* g++.dg/warn/pr23075.C: New test.\n+\n \tPR target/22362\n \t* gcc.target/i386/pr22362.c: New test.\n "}, {"sha": "cc71deada53d904ab6ab3c59007e31e3463871f3", "filename": "gcc/testsuite/g++.dg/warn/pr23075.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr23075.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr23075.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr23075.C?ref=0c9b182b9f454fb2d5f57b17d22e860490c3c68f", "patch": "@@ -0,0 +1,14 @@\n+// PR c/23075\n+// { dg-do compile }\n+// { dg-options \"-O2 -Wreturn-type\" }\n+\n+int\n+foo (void)\n+{\n+  return;\t// { dg-error \"with no value\" }\n+}\t\t// { dg-bogus \"control reaches end\" }\n+\n+int\n+bar (void)\n+{\n+}\t\t// { dg-warning \"control reaches end\" }"}, {"sha": "2d85fb0650fd9573df59f6d119df9870be23c3b6", "filename": "gcc/testsuite/gcc.dg/pr23075.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23075.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23075.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr23075.c?ref=0c9b182b9f454fb2d5f57b17d22e860490c3c68f", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/23075 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wreturn-type\" } */\n+\n+int\n+foo (void)\n+{\n+  return;\t/* { dg-warning \"with no value\" } */\n+}\t\t/* { dg-bogus \"control reaches end\" } */\n+\n+int\n+bar (void)\n+{\n+}\t\t/* { dg-warning \"control reaches end\" } */"}, {"sha": "371155629747b67e939890be638bae542f8baeb2", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c9b182b9f454fb2d5f57b17d22e860490c3c68f/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=0c9b182b9f454fb2d5f57b17d22e860490c3c68f", "patch": "@@ -5125,7 +5125,8 @@ execute_warn_function_return (void)\n \t{\n \t  tree last = last_stmt (e->src);\n \t  if (TREE_CODE (last) == RETURN_EXPR\n-\t      && TREE_OPERAND (last, 0) == NULL)\n+\t      && TREE_OPERAND (last, 0) == NULL\n+\t      && !TREE_NO_WARNING (last))\n \t    {\n #ifdef USE_MAPPED_LOCATION\n \t      location = EXPR_LOCATION (last);"}]}