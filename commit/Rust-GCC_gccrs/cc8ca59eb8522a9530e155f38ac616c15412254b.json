{"sha": "cc8ca59eb8522a9530e155f38ac616c15412254b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M4Y2E1OWViODUyMmE5NTMwZTE1NWYzOGFjNjE2YzE1NDEyMjU0Yg==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2015-11-09T12:16:55Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2015-11-09T12:16:55Z"}, "message": "Machine modes for address printing.\n\n\t* final.c (output_asm_insn): Pass VOIDmode to output_address.\n\t(output_address): Add MODE argument. Pass to print_operand_address\n\thook.\n\t* targhooks.c (default_print_operand_address): Add MODE argument.\n\t* targhooks.h (default_print_operand_address): Update prototype.\n\t* output.h (output_address): Update prototype.\n\t* target.def (print_operand_address): Add MODE argument.\n\t* config/vax/vax.c (print_operand_address): Pass VOIDmode to\n\toutput_address.\n\t(print_operand): Pass access mode to output_address.\n\t* config/mcore/mcore.c (mcore_print_operand_address): Add MODE\n\targument.\n\t(mcore_print_operand): Update calls to mcore_print_operand_address.\n\t* config/fr30/fr30.c (fr30_print_operand): Pass VOIDmode to\n\toutput_address.\n\t* config/lm32/lm32.c (lm32_print_operand): Pass mode in calls to\n\toutput_address.\n\t* config/tilegx/tilegx.c (output_memory_reference_mode): Remove\n\tglobal.\n\t(tilegx_print_operand): Don't set above global. Update calls to\n\toutput_address.\n\t(tilegx_print_operand_address): Add MODE argument. Use instead of\n\toutput_memory_reference_mode global.\n\t* config/frv/frv.c (frv_print_operand_address): Add MODE argument.\n\t(frv_print_operand): Pass mode to frv_print_operand_address calls.\n\t* config/mn10300/mn10300.c (mn10300_print_operand): Pass mode to\n\toutput_address.\n\t* config/cris/cris.c (cris_print_operand_address): Add MODE\n\targument.\n\t(cris_print_operand): Pass mode to output_address calls.\n\t* config/spu/spu.c (print_operand): Pass mode to output_address\n\tcalls.\n\t* config/aarch64/aarch64.h (aarch64_print_operand)\n\t(aarch64_print_operand_address): Remove prototypes.\n\t* config/aarch64/aarch64.c (aarch64_memory_reference_mode): Delete\n\tglobal.\n\t(aarch64_print_operand): Make static. Update calls to\n\toutput_address.\n\t(aarch64_print_operand_address): Add MODE argument. Use instead of\n\taarch64_memory_reference_mode global.\n\t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS): Define target\n\thooks.\n\t* config/aarch64/aarch64.h (PRINT_OPERAND, PRINT_OPERAND_ADDRESS):\n\tDelete macro definitions.\n\t* config/pa/pa.c (pa_print_operand): Pass mode in output_address\n\tcalls.\n\t* config/xtensa/xtensa.c (print_operand): Pass mode in\n\toutput_address calls.\n\t* config/h8300/h8300.c (h8300_print_operand_address): Add MODE\n\targument.\n\t(h83000_print_operand): Update calls to h8300_print_operand_address\n\tand output_address.\n\t* config/ia64/ia64.c (ia64_print_operand_address): Add MODE\n\targument.\n\t* config/tilepro/tilepro.c (output_memory_reference_mode): Delete\n\tglobal.\n\t(tilepro_print_operand): Pass mode to output_address.\n\t(tilepro_print_operand_address): Add MODE argument. Use instead of\n\toutput_memory_reference_mode.\n\t* config/nvptx/nvptx.c (output_decl_chunk, nvptx_assemble_integer)\n\t(nvptx_output_call_insn, nvptx_print_address_operand): Pass VOIDmode\n\tto output_address calls.\n\t(nvptx_print_operand_address): Add MODE argument.\n\t* config/alpha/alpha.c (print_operand): Pass mode argument in\n\toutput_address calls.\n\t* config/m68k/m68k.c (print_operand): Pass mode argument in\n\toutput_address call.\n\t* config/avr/avr.c (avr_print_operand_address): Add MODE argument.\n\t(avr_print_operand): Update calls to avr_print_operand_address.\n\t* config/sparc/sparc.c (sparc_print_operand_address): Add MODE\n\targument. Update calls to output_address.\n\t(sparc_print_operand): Pass mode to output_address.\n\t* config/iq2000/iq2000.c (iq2000_print_operand_address): Add MODE\n\targument.\n\t(iq2000_print_operand): Pass mode in output_address calls.\n\t* config/stormy16/stormy16.c (xstormy16_print_operand_address): Add\n\tMODE argument.\n\t(xstormy16_print_operand): Pass mode to\n\txstormy16_print_operand_address calls.\n\t* config/mips/mips.c (mips_print_operand): Update calls to\n\toutput_address.\n\t(mips_print_operand_address): Add MODE argument.\n\t* config/epiphany/epiphany.c (epiphany_print_operand): Update calls\n\tto output_address.\n\t(epiphany_print_operand_address): Add MODE argument. Add FIXME note.\n\t* config/pdp11/pdp11.c (pdp11_asm_print_operand): Update call to\n\toutput_address.\n\t* config/rx/rx.c (rx_print_operand_address): Add MODE argument.\n\t(rx_print_operand): Update calls to output_address,\n\trx_print_operand_address.\n\t* config/nds32/nds32.c (nds32_print_operand): Update calls to\n\toutput_address.\n\t(nds32_print_operand_address): Add MODE argument.\n\t* config/rs6000/rs6000.c (print_operand): Pass mem mode to\n\toutput_address calls.\n\t* config/c6x/c6x.c (print_address_offset): Pass mem mode to\n\toutput_address call.\n\t(c6x_print_address_operand): Update calls to output_address.\n\t(c6x_print_operand_address): Pass mode to above.\n\t* config/v850/v850.c (v850_print_operand_address): Add MODE\n\targument.\n\t(v850_print_operand): Pass mode to v850_print_operand_address,\n\toutput_address.\n\t* config/mmix/mmix.c (mmix_print_operand_address): Add MODE\n\targument.\n\t(mmix_print_operand): Pass mode in output_address calls.\n\t* config/sh/sh.c (sh_print_operand_address): Add MODE argument.\n\t(sh_print_operand): Pass mem mode to output_address,\n\tsh_print_operand_address.\n\t* config/cr16/cr16.c (cr16_print_operand_address): Add MODE\n\targument.\n\t(cr16_print_operand): Pass mode to output_address,\n\tcr16_print_operand_address.\n\t* config/bfin/bfin.c (print_address_operand): Pass VOIDmode to\n\toutput_address.\n\t* config/microblaze/microblaze.c (print_operand): Pass mode to\n\toutput_address.\n\t* config/nios2/nios2.c (nios2_print_operand): Pass VOIDmode to\n\toutput_address.\n\t(nios2_print_operand_address): Add MODE argument. Update call to\n\tnios2_print_operand_address.\n\t* config/s390/s390.c (print_operand): Pass mode to output_address.\n\t* config/m32c/m32c.c (m32c_print_operand_address): Add MODE\n\targument.\n\t* config/arc/arc.c (arc_print_operand): Pass VOIDmode to\n\toutput_address.\n\t* config/arm/arm.c (arm_print_operand_address): Add MODE argument.\n\tUse instead of output_memory_reference_mode.\n\t(output_memory_reference_mode): Delete global.\n\t(arm_print_operand): Pass mem mode to output_address.\n\t* config/m32r/m32r.c (m32r_print_operand_address): Add MODE\n\targument.\n\t(m32r_print_operand): Pass mode to output_address.\n\t* config/msp430/msp430.c (msp430_print_operand_addr): Add MODE\n\targument.\n\t(msp430_print_operand): Pass mode to msp430_print_operand_addr.\n\t* config/i386/i386.c (ix86_print_operand): Pass mode to\n\toutput_address calls.\n\t(ix86_print_operand_address): Add MODE argument.\n\nFrom-SVN: r230016", "tree": {"sha": "b6511fdc7652bcad79cdaebb2551d57e94c92865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6511fdc7652bcad79cdaebb2551d57e94c92865"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc8ca59eb8522a9530e155f38ac616c15412254b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc8ca59eb8522a9530e155f38ac616c15412254b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc8ca59eb8522a9530e155f38ac616c15412254b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc8ca59eb8522a9530e155f38ac616c15412254b/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7b95c729031bc2d698075a8c594b7ed6ba9e0191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b95c729031bc2d698075a8c594b7ed6ba9e0191", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b95c729031bc2d698075a8c594b7ed6ba9e0191"}], "stats": {"total": 630, "additions": 385, "deletions": 245}, "files": [{"sha": "eb6acd5f6d8421bd4f796a0f71676d1d431935cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -1,3 +1,145 @@\n+2015-11-09  Julian Brown  <julian@codesourcery.com>\n+\n+\t* final.c (output_asm_insn): Pass VOIDmode to output_address.\n+\t(output_address): Add MODE argument. Pass to print_operand_address\n+\thook.\n+\t* targhooks.c (default_print_operand_address): Add MODE argument.\n+\t* targhooks.h (default_print_operand_address): Update prototype.\n+\t* output.h (output_address): Update prototype.\n+\t* target.def (print_operand_address): Add MODE argument.\n+\t* config/vax/vax.c (print_operand_address): Pass VOIDmode to\n+\toutput_address.\n+\t(print_operand): Pass access mode to output_address.\n+\t* config/mcore/mcore.c (mcore_print_operand_address): Add MODE\n+\targument.\n+\t(mcore_print_operand): Update calls to mcore_print_operand_address.\n+\t* config/fr30/fr30.c (fr30_print_operand): Pass VOIDmode to\n+\toutput_address.\n+\t* config/lm32/lm32.c (lm32_print_operand): Pass mode in calls to\n+\toutput_address.\n+\t* config/tilegx/tilegx.c (output_memory_reference_mode): Remove\n+\tglobal.\n+\t(tilegx_print_operand): Don't set above global. Update calls to\n+\toutput_address.\n+\t(tilegx_print_operand_address): Add MODE argument. Use instead of\n+\toutput_memory_reference_mode global.\n+\t* config/frv/frv.c (frv_print_operand_address): Add MODE argument.\n+\t(frv_print_operand): Pass mode to frv_print_operand_address calls.\n+\t* config/mn10300/mn10300.c (mn10300_print_operand): Pass mode to\n+\toutput_address.\n+\t* config/cris/cris.c (cris_print_operand_address): Add MODE\n+\targument.\n+\t(cris_print_operand): Pass mode to output_address calls.\n+\t* config/spu/spu.c (print_operand): Pass mode to output_address\n+\tcalls.\n+\t* config/aarch64/aarch64.h (aarch64_print_operand)\n+\t(aarch64_print_operand_address): Remove prototypes.\n+\t* config/aarch64/aarch64.c (aarch64_memory_reference_mode): Delete\n+\tglobal.\n+\t(aarch64_print_operand): Make static. Update calls to\n+\toutput_address.\n+\t(aarch64_print_operand_address): Add MODE argument. Use instead of\n+\taarch64_memory_reference_mode global.\n+\t(TARGET_PRINT_OPERAND, TARGET_PRINT_OPERAND_ADDRESS): Define target\n+\thooks.\n+\t* config/aarch64/aarch64.h (PRINT_OPERAND, PRINT_OPERAND_ADDRESS):\n+\tDelete macro definitions.\n+\t* config/pa/pa.c (pa_print_operand): Pass mode in output_address\n+\tcalls.\n+\t* config/xtensa/xtensa.c (print_operand): Pass mode in\n+\toutput_address calls.\n+\t* config/h8300/h8300.c (h8300_print_operand_address): Add MODE\n+\targument.\n+\t(h83000_print_operand): Update calls to h8300_print_operand_address\n+\tand output_address.\n+\t* config/ia64/ia64.c (ia64_print_operand_address): Add MODE\n+\targument.\n+\t* config/tilepro/tilepro.c (output_memory_reference_mode): Delete\n+\tglobal.\n+\t(tilepro_print_operand): Pass mode to output_address.\n+\t(tilepro_print_operand_address): Add MODE argument. Use instead of\n+\toutput_memory_reference_mode.\n+\t* config/nvptx/nvptx.c (output_decl_chunk, nvptx_assemble_integer)\n+\t(nvptx_output_call_insn, nvptx_print_address_operand): Pass VOIDmode\n+\tto output_address calls.\n+\t(nvptx_print_operand_address): Add MODE argument.\n+\t* config/alpha/alpha.c (print_operand): Pass mode argument in\n+\toutput_address calls.\n+\t* config/m68k/m68k.c (print_operand): Pass mode argument in\n+\toutput_address call.\n+\t* config/avr/avr.c (avr_print_operand_address): Add MODE argument.\n+\t(avr_print_operand): Update calls to avr_print_operand_address.\n+\t* config/sparc/sparc.c (sparc_print_operand_address): Add MODE\n+\targument. Update calls to output_address.\n+\t(sparc_print_operand): Pass mode to output_address.\n+\t* config/iq2000/iq2000.c (iq2000_print_operand_address): Add MODE\n+\targument.\n+\t(iq2000_print_operand): Pass mode in output_address calls.\n+\t* config/stormy16/stormy16.c (xstormy16_print_operand_address): Add\n+\tMODE argument.\n+\t(xstormy16_print_operand): Pass mode to\n+\txstormy16_print_operand_address calls.\n+\t* config/mips/mips.c (mips_print_operand): Update calls to\n+\toutput_address.\n+\t(mips_print_operand_address): Add MODE argument.\n+\t* config/epiphany/epiphany.c (epiphany_print_operand): Update calls\n+\tto output_address.\n+\t(epiphany_print_operand_address): Add MODE argument. Add FIXME note.\n+\t* config/pdp11/pdp11.c (pdp11_asm_print_operand): Update call to\n+\toutput_address.\n+\t* config/rx/rx.c (rx_print_operand_address): Add MODE argument.\n+\t(rx_print_operand): Update calls to output_address,\n+\trx_print_operand_address.\n+\t* config/nds32/nds32.c (nds32_print_operand): Update calls to\n+\toutput_address.\n+\t(nds32_print_operand_address): Add MODE argument.\n+\t* config/rs6000/rs6000.c (print_operand): Pass mem mode to\n+\toutput_address calls.\n+\t* config/c6x/c6x.c (print_address_offset): Pass mem mode to\n+\toutput_address call.\n+\t(c6x_print_address_operand): Update calls to output_address.\n+\t(c6x_print_operand_address): Pass mode to above.\n+\t* config/v850/v850.c (v850_print_operand_address): Add MODE\n+\targument.\n+\t(v850_print_operand): Pass mode to v850_print_operand_address,\n+\toutput_address.\n+\t* config/mmix/mmix.c (mmix_print_operand_address): Add MODE\n+\targument.\n+\t(mmix_print_operand): Pass mode in output_address calls.\n+\t* config/sh/sh.c (sh_print_operand_address): Add MODE argument.\n+\t(sh_print_operand): Pass mem mode to output_address,\n+\tsh_print_operand_address.\n+\t* config/cr16/cr16.c (cr16_print_operand_address): Add MODE\n+\targument.\n+\t(cr16_print_operand): Pass mode to output_address,\n+\tcr16_print_operand_address.\n+\t* config/bfin/bfin.c (print_address_operand): Pass VOIDmode to\n+\toutput_address.\n+\t* config/microblaze/microblaze.c (print_operand): Pass mode to\n+\toutput_address.\n+\t* config/nios2/nios2.c (nios2_print_operand): Pass VOIDmode to\n+\toutput_address.\n+\t(nios2_print_operand_address): Add MODE argument. Update call to\n+\tnios2_print_operand_address.\n+\t* config/s390/s390.c (print_operand): Pass mode to output_address.\n+\t* config/m32c/m32c.c (m32c_print_operand_address): Add MODE\n+\targument.\n+\t* config/arc/arc.c (arc_print_operand): Pass VOIDmode to\n+\toutput_address.\n+\t* config/arm/arm.c (arm_print_operand_address): Add MODE argument.\n+\tUse instead of output_memory_reference_mode.\n+\t(output_memory_reference_mode): Delete global.\n+\t(arm_print_operand): Pass mem mode to output_address.\n+\t* config/m32r/m32r.c (m32r_print_operand_address): Add MODE\n+\targument.\n+\t(m32r_print_operand): Pass mode to output_address.\n+\t* config/msp430/msp430.c (msp430_print_operand_addr): Add MODE\n+\targument.\n+\t(msp430_print_operand): Pass mode to msp430_print_operand_addr.\n+\t* config/i386/i386.c (ix86_print_operand): Pass mode to\n+\toutput_address calls.\n+\t(ix86_print_operand_address): Add MODE argument.\n+\n 2015-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/68251"}, {"sha": "7c74f585fb8a5e483cd7b46fd449794b8a0ad2cf", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -345,8 +345,6 @@ void aarch64_init_cumulative_args (CUMULATIVE_ARGS *, const_tree, rtx,\n \t\t\t\t   const_tree, unsigned);\n void aarch64_init_expanders (void);\n void aarch64_init_simd_builtins (void);\n-void aarch64_print_operand (FILE *, rtx, char);\n-void aarch64_print_operand_address (FILE *, rtx);\n void aarch64_emit_call_insn (rtx);\n void aarch64_register_pragmas (void);\n void aarch64_relayout_simd_types (void);"}, {"sha": "d92ca07eec171cfc43580100cc6962458ffccde6", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -558,10 +558,6 @@ static const struct aarch64_option_extension all_extensions[] =\n   {NULL, 0, 0}\n };\n \n-/* Used to track the size of an address when generating a pre/post\n-   increment address.  */\n-static machine_mode aarch64_memory_reference_mode;\n-\n typedef enum aarch64_cond_code\n {\n   AARCH64_EQ = 0, AARCH64_NE, AARCH64_CS, AARCH64_CC, AARCH64_MI, AARCH64_PL,\n@@ -4133,8 +4129,8 @@ aarch64_ccmp_mode_to_code (enum machine_mode mode)\n }\n \n \n-void\n-aarch64_print_operand (FILE *f, rtx x, char code)\n+static void\n+aarch64_print_operand (FILE *f, rtx x, int code)\n {\n   switch (code)\n     {\n@@ -4364,8 +4360,7 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n \t  break;\n \n \tcase MEM:\n-\t  aarch64_memory_reference_mode = GET_MODE (x);\n-\t  output_address (XEXP (x, 0));\n+\t  output_address (GET_MODE (x), XEXP (x, 0));\n \t  break;\n \n \tcase CONST:\n@@ -4555,13 +4550,12 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n     }\n }\n \n-void\n-aarch64_print_operand_address (FILE *f, rtx x)\n+static void\n+aarch64_print_operand_address (FILE *f, machine_mode mode, rtx x)\n {\n   struct aarch64_address_info addr;\n \n-  if (aarch64_classify_address (&addr, x, aarch64_memory_reference_mode,\n-\t\t\t     MEM, true))\n+  if (aarch64_classify_address (&addr, x, mode, MEM, true))\n     switch (addr.type)\n       {\n       case ADDRESS_REG_IMM:\n@@ -4604,19 +4598,19 @@ aarch64_print_operand_address (FILE *f, rtx x)\n \t  {\n \t  case PRE_INC:\n \t    asm_fprintf (f, \"[%s, %d]!\", reg_names [REGNO (addr.base)],\n-\t\t\t GET_MODE_SIZE (aarch64_memory_reference_mode));\n+\t\t\t GET_MODE_SIZE (mode));\n \t    return;\n \t  case POST_INC:\n \t    asm_fprintf (f, \"[%s], %d\", reg_names [REGNO (addr.base)],\n-\t\t\t GET_MODE_SIZE (aarch64_memory_reference_mode));\n+\t\t\t GET_MODE_SIZE (mode));\n \t    return;\n \t  case PRE_DEC:\n \t    asm_fprintf (f, \"[%s, -%d]!\", reg_names [REGNO (addr.base)],\n-\t\t\t GET_MODE_SIZE (aarch64_memory_reference_mode));\n+\t\t\t GET_MODE_SIZE (mode));\n \t    return;\n \t  case POST_DEC:\n \t    asm_fprintf (f, \"[%s], -%d\", reg_names [REGNO (addr.base)],\n-\t\t\t GET_MODE_SIZE (aarch64_memory_reference_mode));\n+\t\t\t GET_MODE_SIZE (mode));\n \t    return;\n \t  case PRE_MODIFY:\n \t    asm_fprintf (f, \"[%s, %wd]!\", reg_names [REGNO (addr.base)],\n@@ -13811,6 +13805,12 @@ aarch64_promoted_type (const_tree t)\n #undef TARGET_USE_PSEUDO_PIC_REG\n #define TARGET_USE_PSEUDO_PIC_REG aarch64_use_pseudo_pic_reg\n \n+#undef TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND aarch64_print_operand\n+\n+#undef TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS aarch64_print_operand_address\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-aarch64.h\""}, {"sha": "5429b5703518535b68fd4f9b6cefe648f409efba", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -792,11 +792,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n /* Jump table alignment is explicit in ASM_OUTPUT_CASE_LABEL.  */\n #define ADDR_VEC_ALIGN(JUMPTABLE) 0\n \n-#define PRINT_OPERAND(STREAM, X, CODE) aarch64_print_operand (STREAM, X, CODE)\n-\n-#define PRINT_OPERAND_ADDRESS(STREAM, X) \\\n-  aarch64_print_operand_address (STREAM, X)\n-\n #define MCOUNT_NAME \"_mcount\"\n \n #define NO_PROFILE_COUNTERS 1"}, {"sha": "f2ad9d07cb3408a1175041619c5cfe2667da7d30", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -5327,7 +5327,7 @@ print_operand (FILE *file, rtx x, int code)\n       if (REG_P (x))\n \tfprintf (file, \"%s\", reg_names[REGNO (x)]);\n       else if (MEM_P (x))\n-\toutput_address (XEXP (x, 0));\n+\toutput_address (GET_MODE (x), XEXP (x, 0));\n       else if (GET_CODE (x) == CONST && GET_CODE (XEXP (x, 0)) == UNSPEC)\n \t{\n \t  switch (XINT (XEXP (x, 0), 1))"}, {"sha": "01261bc702a9b397d873ab197b20daf557535755", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -2929,19 +2929,22 @@ arc_print_operand (FILE *file, rtx x, int code)\n \t      || GET_CODE (XEXP (x, 0)) == POST_INC\n \t      || GET_CODE (XEXP (x, 0)) == POST_DEC\n \t      || GET_CODE (XEXP (x, 0)) == POST_MODIFY)\n-\t    output_address (plus_constant (Pmode, XEXP (XEXP (x, 0), 0), 4));\n+\t    output_address (VOIDmode,\n+\t\t\t    plus_constant (Pmode, XEXP (XEXP (x, 0), 0), 4));\n \t  else if (output_scaled)\n \t    {\n \t      rtx addr = XEXP (x, 0);\n \t      int size = GET_MODE_SIZE (GET_MODE (x));\n \n-\t      output_address (plus_constant (Pmode, XEXP (addr, 0),\n+\t      output_address (VOIDmode,\n+\t\t\t      plus_constant (Pmode, XEXP (addr, 0),\n \t\t\t\t\t     ((INTVAL (XEXP (addr, 1)) + 4)\n \t\t\t\t\t      >> (size == 2 ? 1 : 2))));\n \t      output_scaled = 0;\n \t    }\n \t  else\n-\t    output_address (plus_constant (Pmode, XEXP (x, 0), 4));\n+\t    output_address (VOIDmode,\n+\t\t\t    plus_constant (Pmode, XEXP (x, 0), 4));\n \t  fputc (']', file);\n \t}\n       else\n@@ -3132,28 +3135,31 @@ arc_print_operand (FILE *file, rtx x, int code)\n \tswitch (GET_CODE (addr))\n \t  {\n \t  case PRE_INC: case POST_INC:\n-\t    output_address (plus_constant (Pmode, XEXP (addr, 0), size)); break;\n+\t    output_address (VOIDmode,\n+\t\t\t    plus_constant (Pmode, XEXP (addr, 0), size)); break;\n \t  case PRE_DEC: case POST_DEC:\n-\t    output_address (plus_constant (Pmode, XEXP (addr, 0), -size));\n+\t    output_address (VOIDmode,\n+\t\t\t    plus_constant (Pmode, XEXP (addr, 0), -size));\n \t    break;\n \t  case PRE_MODIFY: case POST_MODIFY:\n-\t    output_address (XEXP (addr, 1)); break;\n+\t    output_address (VOIDmode, XEXP (addr, 1)); break;\n \t  case PLUS:\n \t    if (output_scaled)\n \t      {\n-\t\toutput_address (plus_constant (Pmode, XEXP (addr, 0),\n+\t\toutput_address (VOIDmode,\n+\t\t\t\tplus_constant (Pmode, XEXP (addr, 0),\n \t\t\t\t\t       (INTVAL (XEXP (addr, 1))\n \t\t\t\t\t\t>> (size == 2 ? 1 : 2))));\n \t\toutput_scaled = 0;\n \t      }\n \t    else\n-\t      output_address (addr);\n+\t      output_address (VOIDmode, addr);\n \t    break;\n \t  default:\n \t    if (flag_pic && CONSTANT_ADDRESS_P (addr))\n \t      arc_output_pic_addr_const (file, addr, code);\n \t    else\n-\t      output_address (addr);\n+\t      output_address (VOIDmode, addr);\n \t    break;\n \t  }\n \tfputc (']', file);\n@@ -3239,7 +3245,7 @@ arc_print_operand_address (FILE *file , rtx addr)\n \tgcc_assert (GET_CODE (XEXP (c, 0)) == SYMBOL_REF);\n \tgcc_assert (GET_CODE (XEXP (c, 1)) == CONST_INT);\n \n-\toutput_address(XEXP(addr,0));\n+\toutput_address (VOIDmode, XEXP (addr, 0));\n \n \tbreak;\n       }"}, {"sha": "f4ebbc80f160e135bacc20ecdd313aa04136a74f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -100,7 +100,7 @@ static bool thumb_force_lr_save (void);\n static unsigned arm_size_return_regs (void);\n static bool arm_assemble_integer (rtx, unsigned int, int);\n static void arm_print_operand (FILE *, rtx, int);\n-static void arm_print_operand_address (FILE *, rtx);\n+static void arm_print_operand_address (FILE *, machine_mode, rtx);\n static bool arm_print_operand_punct_valid_p (unsigned char code);\n static const char *fp_const_from_val (REAL_VALUE_TYPE *);\n static arm_cc get_arm_condition_code (rtx);\n@@ -869,11 +869,6 @@ int prefer_neon_for_64bits = 0;\n /* Nonzero if we shouldn't use literal pools.  */\n bool arm_disable_literal_pool = false;\n \n-/* In case of a PRE_INC, POST_INC, PRE_DEC, POST_DEC memory reference,\n-   we must report the mode of the memory reference from\n-   TARGET_PRINT_OPERAND to TARGET_PRINT_OPERAND_ADDRESS.  */\n-machine_mode output_memory_reference_mode;\n-\n /* The register number to be used for the PIC offset register.  */\n unsigned arm_pic_register = INVALID_REGNUM;\n \n@@ -22403,8 +22398,7 @@ arm_print_operand (FILE *stream, rtx x, int code)\n \t  break;\n \n \tcase MEM:\n-\t  output_memory_reference_mode = GET_MODE (x);\n-\t  output_address (XEXP (x, 0));\n+\t  output_address (GET_MODE (x), XEXP (x, 0));\n \t  break;\n \n \tcase CONST_DOUBLE:\n@@ -22433,7 +22427,7 @@ arm_print_operand (FILE *stream, rtx x, int code)\n \f\n /* Target hook for printing a memory address.  */\n static void\n-arm_print_operand_address (FILE *stream, rtx x)\n+arm_print_operand_address (FILE *stream, machine_mode mode, rtx x)\n {\n   if (TARGET_32BIT)\n     {\n@@ -22491,20 +22485,18 @@ arm_print_operand_address (FILE *stream, rtx x)\n       else if (GET_CODE (x) == PRE_INC || GET_CODE (x) == POST_INC\n \t       || GET_CODE (x) == PRE_DEC || GET_CODE (x) == POST_DEC)\n \t{\n-\t  extern machine_mode output_memory_reference_mode;\n-\n \t  gcc_assert (REG_P (XEXP (x, 0)));\n \n \t  if (GET_CODE (x) == PRE_DEC || GET_CODE (x) == PRE_INC)\n \t    asm_fprintf (stream, \"[%r, #%s%d]!\",\n \t\t\t REGNO (XEXP (x, 0)),\n \t\t\t GET_CODE (x) == PRE_DEC ? \"-\" : \"\",\n-\t\t\t GET_MODE_SIZE (output_memory_reference_mode));\n+\t\t\t GET_MODE_SIZE (mode));\n \t  else\n \t    asm_fprintf (stream, \"[%r], #%s%d\",\n \t\t\t REGNO (XEXP (x, 0)),\n \t\t\t GET_CODE (x) == POST_DEC ? \"-\" : \"\",\n-\t\t\t GET_MODE_SIZE (output_memory_reference_mode));\n+\t\t\t GET_MODE_SIZE (mode));\n \t}\n       else if (GET_CODE (x) == PRE_MODIFY)\n \t{"}, {"sha": "609a42b00e43d992203bc59dc9fb0634c9b6394c", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -2158,7 +2158,7 @@ cond_string (enum rtx_code code)\n /* Output ADDR to FILE as address.  */\n \n static void\n-avr_print_operand_address (FILE *file, rtx addr)\n+avr_print_operand_address (FILE *file, machine_mode /*mode*/, rtx addr)\n {\n   switch (GET_CODE (addr))\n     {\n@@ -2358,35 +2358,36 @@ avr_print_operand (FILE *file, rtx x, int code)\n           if (GET_CODE (addr) != PLUS)\n                fatal_insn (\"bad address, not (reg+disp):\", addr);\n \n-          avr_print_operand_address (file, XEXP (addr, 0));\n+          avr_print_operand_address (file, VOIDmode, XEXP (addr, 0));\n         }\n       else if (code == 'p' || code == 'r')\n         {\n           if (GET_CODE (addr) != POST_INC && GET_CODE (addr) != PRE_DEC)\n             fatal_insn (\"bad address, not post_inc or pre_dec:\", addr);\n \n           if (code == 'p')\n-            avr_print_operand_address (file, XEXP (addr, 0));  /* X, Y, Z */\n+\t    /* X, Y, Z */\n+            avr_print_operand_address (file, VOIDmode, XEXP (addr, 0));\n           else\n             avr_print_operand (file, XEXP (addr, 0), 0);  /* r26, r28, r30 */\n         }\n       else if (GET_CODE (addr) == PLUS)\n         {\n-          avr_print_operand_address (file, XEXP (addr,0));\n+          avr_print_operand_address (file, VOIDmode, XEXP (addr,0));\n           if (REGNO (XEXP (addr, 0)) == REG_X)\n             fatal_insn (\"internal compiler error.  Bad address:\"\n                         ,addr);\n           fputc ('+', file);\n           avr_print_operand (file, XEXP (addr,1), code);\n         }\n       else\n-        avr_print_operand_address (file, addr);\n+        avr_print_operand_address (file, VOIDmode, addr);\n     }\n   else if (code == 'i')\n     {\n       if (GET_CODE (x) == SYMBOL_REF && (SYMBOL_REF_FLAGS (x) & SYMBOL_FLAG_IO))\n \tavr_print_operand_address\n-\t  (file, plus_constant (HImode, x, -avr_arch->sfr_offset));\n+\t  (file, VOIDmode, plus_constant (HImode, x, -avr_arch->sfr_offset));\n       else\n \tfatal_insn (\"bad address, not an I/O address:\", x);\n     }\n@@ -2426,7 +2427,7 @@ avr_print_operand (FILE *file, rtx x, int code)\n   else if (code == 'k')\n     fputs (cond_string (reverse_condition (GET_CODE (x))), file);\n   else\n-    avr_print_operand_address (file, x);\n+    avr_print_operand_address (file, VOIDmode, x);\n }\n \n "}, {"sha": "d359fd4341be9dac2976a51f54d132136c4a6fc1", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -1300,21 +1300,21 @@ print_address_operand (FILE *file, rtx x)\n   switch (GET_CODE (x))\n     {\n     case PLUS:\n-      output_address (XEXP (x, 0));\n+      output_address (VOIDmode, XEXP (x, 0));\n       fprintf (file, \"+\");\n-      output_address (XEXP (x, 1));\n+      output_address (VOIDmode, XEXP (x, 1));\n       break;\n \n     case PRE_DEC:\n       fprintf (file, \"--\");\n-      output_address (XEXP (x, 0));    \n+      output_address (VOIDmode, XEXP (x, 0));    \n       break;\n     case POST_INC:\n-      output_address (XEXP (x, 0));\n+      output_address (VOIDmode, XEXP (x, 0));\n       fprintf (file, \"++\");\n       break;\n     case POST_DEC:\n-      output_address (XEXP (x, 0));\n+      output_address (VOIDmode, XEXP (x, 0));\n       fprintf (file, \"--\");\n       break;\n "}, {"sha": "f0d274e765c2d44e4f455367f332196edc44acd0", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -1854,7 +1854,7 @@ print_address_offset (FILE *file, rtx off, machine_mode mem_mode)\n \t}\n     }\n   fputs (\"(\", file);\n-  output_address (off);\n+  output_address (mem_mode, off);\n   fputs (\")\", file);\n }\n \n@@ -1877,7 +1877,7 @@ c6x_print_address_operand (FILE *file, rtx x, machine_mode mem_mode)\n     case PRE_MODIFY:\n     case POST_MODIFY:\n       if (GET_CODE (x) == POST_MODIFY)\n-\toutput_address (XEXP (x, 0));\n+\toutput_address (mem_mode, XEXP (x, 0));\n       off = XEXP (XEXP (x, 1), 1);\n       if (XEXP (x, 0) == stack_pointer_rtx)\n \t{\n@@ -1894,7 +1894,7 @@ c6x_print_address_operand (FILE *file, rtx x, machine_mode mem_mode)\n       else\n \tfprintf (file, \"++\");\n       if (GET_CODE (x) == PRE_MODIFY)\n-\toutput_address (XEXP (x, 0));\n+\toutput_address (mem_mode, XEXP (x, 0));\n       print_address_offset (file, off, mem_mode);\n       break;\n \n@@ -1907,28 +1907,28 @@ c6x_print_address_operand (FILE *file, rtx x, machine_mode mem_mode)\n \t}\n       else\n \tfprintf (file, \"+\");\n-      output_address (XEXP (x, 0));\n+      output_address (mem_mode, XEXP (x, 0));\n       print_address_offset (file, off, mem_mode);\n       break;\n \n     case PRE_DEC:\n       gcc_assert (XEXP (x, 0) != stack_pointer_rtx);\n       fprintf (file, \"--\");\n-      output_address (XEXP (x, 0));\n+      output_address (mem_mode, XEXP (x, 0));\n       fprintf (file, \"[1]\");\n       break;\n     case PRE_INC:\n       fprintf (file, \"++\");\n-      output_address (XEXP (x, 0));\n+      output_address (mem_mode, XEXP (x, 0));\n       fprintf (file, \"[1]\");\n       break;\n     case POST_INC:\n       gcc_assert (XEXP (x, 0) != stack_pointer_rtx);\n-      output_address (XEXP (x, 0));\n+      output_address (mem_mode, XEXP (x, 0));\n       fprintf (file, \"++[1]\");\n       break;\n     case POST_DEC:\n-      output_address (XEXP (x, 0));\n+      output_address (mem_mode, XEXP (x, 0));\n       fprintf (file, \"--[1]\");\n       break;\n \n@@ -2042,9 +2042,9 @@ c6x_print_unit_specifier_field (FILE *file, rtx_insn *insn)\n \n /* Output assembly language output for the address ADDR to FILE.  */\n static void\n-c6x_print_operand_address (FILE *file, rtx addr)\n+c6x_print_operand_address (FILE *file, machine_mode mode, rtx addr)\n {\n-  c6x_print_address_operand (file, addr, VOIDmode);\n+  c6x_print_address_operand (file, addr, mode);\n }\n \n /* Print an operand, X, to FILE, with an optional modifier in CODE."}, {"sha": "8fe836940bd4f401c74180245c3f3109724573f3", "filename": "gcc/config/cr16/cr16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fcr16%2Fcr16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fcr16%2Fcr16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -122,7 +122,7 @@ static enum data_model_type data_model = DM_DEFAULT;\n \n /* TARGETM Function Prototypes and forward declarations  */\n static void cr16_print_operand (FILE *, rtx, int);\n-static void cr16_print_operand_address (FILE *, rtx);\n+static void cr16_print_operand_address (FILE *, machine_mode, rtx);\n \n /* Stack layout and calling conventions.  */\n #undef  TARGET_STRUCT_VALUE_RTX\n@@ -1494,7 +1494,7 @@ cr16_print_operand (FILE * file, rtx x, int code)\n \t  return;\n \n \tcase MEM:\n-\t  output_address (XEXP (x, 0));\n+\t  output_address (GET_MODE (x), XEXP (x, 0));\n \t  return;\n \n \tcase CONST_DOUBLE:\n@@ -1524,7 +1524,7 @@ cr16_print_operand (FILE * file, rtx x, int code)\n \t    {\n \t      putc ('$', file);\n \t    }\n-\t  cr16_print_operand_address (file, x);\n+\t  cr16_print_operand_address (file, VOIDmode, x);\n \t  return;\n \t}\n     default:\n@@ -1537,7 +1537,7 @@ cr16_print_operand (FILE * file, rtx x, int code)\n /* Implements the macro PRINT_OPERAND_ADDRESS defined in cr16.h.  */\n \n static void\n-cr16_print_operand_address (FILE * file, rtx addr)\n+cr16_print_operand_address (FILE * file, machine_mode /*mode*/, rtx addr)\n {\n   enum cr16_addrtype addrtype;\n   struct cr16_address address;"}, {"sha": "6e40ea1487751cae40c488e58535cd85b73248e2", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -114,7 +114,7 @@ static int cris_reg_saved_in_regsave_area  (unsigned int, bool);\n \n static void cris_print_operand (FILE *, rtx, int);\n \n-static void cris_print_operand_address (FILE *, rtx);\n+static void cris_print_operand_address (FILE *, machine_mode, rtx);\n \n static bool cris_print_operand_punct_valid_p (unsigned char code);\n \n@@ -803,7 +803,7 @@ cris_print_operand (FILE *file, rtx x, int code)\n \t\treturn;\n \t      }\n \t  }\n-\toutput_address (addr);\n+\toutput_address (VOIDmode, addr);\n       }\n       return;\n \n@@ -942,7 +942,7 @@ cris_print_operand (FILE *file, rtx x, int code)\n \t      adj_mem\n \t\t= adjust_address (adj_mem, GET_MODE (adj_mem), size / 2);\n \n-\t    output_address (XEXP (adj_mem, 0));\n+\t    output_address (VOIDmode, XEXP (adj_mem, 0));\n \t    return;\n \t  }\n \n@@ -1129,7 +1129,7 @@ cris_print_operand (FILE *file, rtx x, int code)\n       return;\n \n     case MEM:\n-      output_address (XEXP (operand, 0));\n+      output_address (GET_MODE (operand), XEXP (operand, 0));\n       return;\n \n     case CONST_DOUBLE:\n@@ -1200,7 +1200,7 @@ cris_print_operand_punct_valid_p (unsigned char code)\n /* The PRINT_OPERAND_ADDRESS worker.  */\n \n static void\n-cris_print_operand_address (FILE *file, rtx x)\n+cris_print_operand_address (FILE *file, machine_mode /*mode*/, rtx x)\n {\n   /* All these were inside MEM:s so output indirection characters.  */\n   putc ('[', file);"}, {"sha": "1313fb44cbd1cec9727b386cd13e39fc598d669b", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -1317,7 +1317,7 @@ epiphany_print_operand (FILE *file, rtx x, int code)\n \t    offset = 0;\n \t    break;\n \t}\n-      output_address (addr);\n+      output_address (GET_MODE (x), addr);\n       fputc (']', file);\n       if (offset)\n \t{\n@@ -1338,7 +1338,7 @@ epiphany_print_operand (FILE *file, rtx x, int code)\n \t      case 1:\n \t\tbreak;\n \t    }\n-\t  output_address (offset);\n+\t  output_address (GET_MODE (x), offset);\n \t}\n       break;\n     case CONST_DOUBLE :\n@@ -1370,7 +1370,7 @@ epiphany_print_operand (FILE *file, rtx x, int code)\n /* Print a memory address as an operand to reference that memory location.  */\n \n static void\n-epiphany_print_operand_address (FILE *file, rtx addr)\n+epiphany_print_operand_address (FILE *file, machine_mode /*mode*/, rtx addr)\n {\n   register rtx base, index = 0;\n   int offset = 0;\n@@ -1424,7 +1424,9 @@ epiphany_print_operand_address (FILE *file, rtx addr)\n       break;\n     case PRE_INC: case PRE_DEC: case POST_INC: case POST_DEC: case POST_MODIFY:\n       /* We shouldn't get here as we've lost the mode of the memory object\n-\t (which says how much to inc/dec by.  */\n+\t (which says how much to inc/dec by.\n+\t FIXME: We have the mode now, address printing can be moved into this\n+\t function.  */\n       gcc_unreachable ();\n       break;\n     default:"}, {"sha": "c52a4e0c3c3f8476cf0e07f6f73f9e5e2e0bc4ba", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -662,7 +662,7 @@ fr30_print_operand (FILE *file, rtx x, int code)\n \t  break;\n \t  \n \tcase SYMBOL_REF:\n-\t  output_address (x0);\n+\t  output_address (VOIDmode, x0);\n \t  break;\n \t  \n \tdefault:"}, {"sha": "275b597b2e8872d98d4688c8f4e79439f3dcf465", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -262,7 +262,7 @@ static int frv_default_flags_for_cpu\t\t(void);\n static int frv_string_begins_with\t\t(const char *, const char *);\n static FRV_INLINE bool frv_small_data_reloc_p\t(rtx, int);\n static void frv_print_operand\t\t\t(FILE *, rtx, int);\n-static void frv_print_operand_address\t\t(FILE *, rtx);\n+static void frv_print_operand_address\t\t(FILE *, machine_mode, rtx);\n static bool frv_print_operand_punct_valid_p\t(unsigned char code);\n static void frv_print_operand_memory_reference_reg\n \t\t\t\t\t\t(FILE *, rtx);\n@@ -2470,7 +2470,7 @@ frv_index_memory (rtx memref, machine_mode mode, int index)\n \f\n /* Print a memory address as an operand to reference that memory location.  */\n static void\n-frv_print_operand_address (FILE * stream, rtx x)\n+frv_print_operand_address (FILE * stream, machine_mode /* mode */, rtx x)\n {\n   if (GET_CODE (x) == MEM)\n     x = XEXP (x, 0);\n@@ -3003,10 +3003,10 @@ frv_print_operand (FILE * file, rtx x, int code)\n \tfrv_output_const_unspec (file, &unspec);\n \n       else if (GET_CODE (x) == MEM)\n-        frv_print_operand_address (file, XEXP (x, 0));\n+        frv_print_operand_address (file, GET_MODE (x), XEXP (x, 0));\n \n       else if (CONSTANT_ADDRESS_P (x))\n-        frv_print_operand_address (file, x);\n+        frv_print_operand_address (file, VOIDmode, x);\n \n       else\n         fatal_insn (\"bad insn in frv_print_operand, 0 case\", x);"}, {"sha": "d5a726e32f3d693233a56bffe1c9850774045c7e", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -95,7 +95,7 @@ static unsigned int h8300_asm_insn_count (const char *);\n static tree h8300_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n static tree h8300_handle_eightbit_data_attribute (tree *, tree, tree, int, bool *);\n static tree h8300_handle_tiny_data_attribute (tree *, tree, tree, int, bool *);\n-static void h8300_print_operand_address (FILE *, rtx);\n+static void h8300_print_operand_address (FILE *, machine_mode, rtx);\n static void h8300_print_operand (FILE *, rtx, int);\n static bool h8300_print_operand_punct_valid_p (unsigned char code);\n #ifndef OBJECT_FORMAT_ELF\n@@ -1647,7 +1647,7 @@ h8300_print_operand (FILE *file, rtx x, int code)\n \t}\n       break;\n     case 'o':\n-      h8300_print_operand_address (file, x);\n+      h8300_print_operand_address (file, VOIDmode, x);\n       break;\n     case 's':\n       if (GET_CODE (x) == CONST_INT)\n@@ -1719,7 +1719,7 @@ h8300_print_operand (FILE *file, rtx x, int code)\n \t    rtx addr = XEXP (x, 0);\n \n \t    fprintf (file, \"@\");\n-\t    output_address (addr);\n+\t    output_address (GET_MODE (x), addr);\n \n \t    /* Add a length suffix to constant addresses.  Although this\n \t       is often unnecessary, it helps to avoid ambiguity in the\n@@ -1764,7 +1764,7 @@ h8300_print_operand (FILE *file, rtx x, int code)\n \tcase CONST:\n \tcase LABEL_REF:\n \t  fprintf (file, \"#\");\n-\t  h8300_print_operand_address (file, x);\n+\t  h8300_print_operand_address (file, VOIDmode, x);\n \t  break;\n \tcase CONST_DOUBLE:\n \t  {\n@@ -1790,7 +1790,7 @@ h8300_print_operand_punct_valid_p (unsigned char code)\n /* Output assembly language output for the address ADDR to FILE.  */\n \n static void\n-h8300_print_operand_address (FILE *file, rtx addr)\n+h8300_print_operand_address (FILE *file, machine_mode mode, rtx addr)\n {\n   rtx index;\n   int size;\n@@ -1824,12 +1824,12 @@ h8300_print_operand_address (FILE *file, rtx addr)\n       if (GET_CODE (index) == REG)\n \t{\n \t  /* reg,foo */\n-\t  h8300_print_operand_address (file, XEXP (addr, 1));\n+\t  h8300_print_operand_address (file, mode, XEXP (addr, 1));\n \t  fprintf (file, \",\");\n \t  switch (size)\n \t    {\n \t    case 0:\n-\t      h8300_print_operand_address (file, index);\n+\t      h8300_print_operand_address (file, mode, index);\n \t      break;\n \n \t    case 1:\n@@ -1852,9 +1852,9 @@ h8300_print_operand_address (FILE *file, rtx addr)\n       else\n \t{\n \t  /* foo+k */\n-\t  h8300_print_operand_address (file, XEXP (addr, 0));\n+\t  h8300_print_operand_address (file, mode, XEXP (addr, 0));\n \t  fprintf (file, \"+\");\n-\t  h8300_print_operand_address (file, XEXP (addr, 1));\n+\t  h8300_print_operand_address (file, mode, XEXP (addr, 1));\n \t}\n       fprintf (file, \")\");\n       break;"}, {"sha": "e93f7a0b41a68101140da629a9072bc98dfd08b9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -16612,7 +16612,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t  if (TARGET_64BIT)\n \t    x = gen_rtx_UNSPEC (DImode, gen_rtvec (1, x), UNSPEC_LEA_ADDR);\n \n-\t  output_address (x);\n+\t  output_address (VOIDmode, x);\n \t  return;\n \n \tcase 'L':\n@@ -17503,7 +17503,7 @@ ix86_print_operand_address_as (FILE *file, rtx addr, addr_space_t as)\n }\n \n static void\n-ix86_print_operand_address (FILE *file, rtx addr)\n+ix86_print_operand_address (FILE *file, machine_mode /*mode*/, rtx addr)\n {\n   ix86_print_operand_address_as (file, addr, ADDR_SPACE_GENERIC);\n }"}, {"sha": "08e9cb66cbf16a2e31da536fc8ac089ecc726de1", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -236,7 +236,7 @@ static void ia64_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void ia64_output_function_end_prologue (FILE *);\n \n static void ia64_print_operand (FILE *, rtx, int);\n-static void ia64_print_operand_address (FILE *, rtx);\n+static void ia64_print_operand_address (FILE *, machine_mode, rtx);\n static bool ia64_print_operand_punct_valid_p (unsigned char code);\n \n static int ia64_issue_rate (void);\n@@ -5239,6 +5239,7 @@ ia64_output_dwarf_dtprel (FILE *file, int size, rtx x)\n \n static void\n ia64_print_operand_address (FILE * stream ATTRIBUTE_UNUSED,\n+\t\t\t    machine_mode /*mode*/,\n \t\t\t    rtx address ATTRIBUTE_UNUSED)\n {\n }"}, {"sha": "26b9e6741ff103ea7e0dc9799cfa91502f850c61", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -172,7 +172,7 @@ static void iq2000_trampoline_init    (rtx, tree, rtx);\n static rtx iq2000_function_value      (const_tree, const_tree, bool);\n static rtx iq2000_libcall_value       (machine_mode, const_rtx);\n static void iq2000_print_operand      (FILE *, rtx, int);\n-static void iq2000_print_operand_address (FILE *, rtx);\n+static void iq2000_print_operand_address (FILE *, machine_mode, rtx);\n static bool iq2000_print_operand_punct_valid_p (unsigned char code);\n \n #undef  TARGET_INIT_BUILTINS\n@@ -2896,7 +2896,7 @@ iq2000_setup_incoming_varargs (cumulative_args_t cum_v,\n    reference whose address is ADDR.  ADDR is an RTL expression.  */\n \n static void\n-iq2000_print_operand_address (FILE * file, rtx addr)\n+iq2000_print_operand_address (FILE * file, machine_mode mode, rtx addr)\n {\n   if (!addr)\n     error (\"PRINT_OPERAND_ADDRESS, null pointer\");\n@@ -2921,7 +2921,7 @@ iq2000_print_operand_address (FILE * file, rtx addr)\n \t\t\t     \"PRINT_OPERAND_ADDRESS, LO_SUM with #1 not REG.\");\n \n \t  fprintf (file, \"%%lo(\");\n-\t  iq2000_print_operand_address (file, arg1);\n+\t  iq2000_print_operand_address (file, mode, arg1);\n \t  fprintf (file, \")(%s)\", reg_names [REGNO (arg0)]);\n \t}\n \tbreak;\n@@ -3169,10 +3169,12 @@ iq2000_print_operand (FILE *file, rtx op, int letter)\n \n   else if (code == MEM)\n     {\n+      machine_mode mode = GET_MODE (op);\n+\n       if (letter == 'D')\n-\toutput_address (plus_constant (Pmode, XEXP (op, 0), 4));\n+\toutput_address (mode, plus_constant (Pmode, XEXP (op, 0), 4));\n       else\n-\toutput_address (XEXP (op, 0));\n+\toutput_address (mode, XEXP (op, 0));\n     }\n \n   else if (code == CONST_DOUBLE"}, {"sha": "7a19a8204ca0d4785b91a69685773fb66145e37d", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -498,7 +498,7 @@ lm32_print_operand (FILE * file, rtx op, int letter)\n   else if (code == HIGH)\n     output_addr_const (file, XEXP (op, 0));  \n   else if (code == MEM)\n-    output_address (XEXP (op, 0));\n+    output_address (GET_MODE (op), XEXP (op, 0));\n   else if (letter == 'z' && GET_CODE (op) == CONST_INT && INTVAL (op) == 0)\n     fprintf (file, \"%s\", reg_names[0]);\n   else if (GET_CODE (op) == CONST_DOUBLE)\n@@ -551,7 +551,7 @@ lm32_print_operand_address (FILE * file, rtx addr)\n       break;\n \n     case MEM:\n-      output_address (XEXP (addr, 0));\n+      output_address (VOIDmode, XEXP (addr, 0));\n       break;\n \n     case PLUS:"}, {"sha": "baf978f2ddff2e6f8001bf4c52463badb367ccbf", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -2795,7 +2795,7 @@ m32c_print_operand_punct_valid_p (unsigned char c)\n #define TARGET_PRINT_OPERAND_ADDRESS m32c_print_operand_address\n \n static void\n-m32c_print_operand_address (FILE * stream, rtx address)\n+m32c_print_operand_address (FILE * stream, machine_mode /*mode*/, rtx address)\n {\n   if (GET_CODE (address) == MEM)\n     address = XEXP (address, 0);"}, {"sha": "e4085daf6a56f69aa82739e4efad03af11581558", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -66,7 +66,7 @@ static rtx   m32r_legitimize_address (rtx, rtx, machine_mode);\n static bool  m32r_mode_dependent_address_p (const_rtx, addr_space_t);\n static tree  m32r_handle_model_attribute (tree *, tree, tree, int, bool *);\n static void  m32r_print_operand (FILE *, rtx, int);\n-static void  m32r_print_operand_address (FILE *, rtx);\n+static void  m32r_print_operand_address (FILE *, machine_mode, rtx);\n static bool  m32r_print_operand_punct_valid_p (unsigned char code);\n static void  m32r_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void  m32r_output_function_epilogue (FILE *, HOST_WIDE_INT);\n@@ -2086,16 +2086,19 @@ m32r_print_operand (FILE * file, rtx x, int code)\n \tfputs (reg_names[REGNO (x)+1], file);\n       else if (MEM_P (x))\n \t{\n+\t  machine_mode mode = GET_MODE (x);\n+\n \t  fprintf (file, \"@(\");\n \t  /* Handle possible auto-increment.  Since it is pre-increment and\n \t     we have already done it, we can just use an offset of four.  */\n \t  /* ??? This is taken from rs6000.c I think.  I don't think it is\n \t     currently necessary, but keep it around.  */\n \t  if (GET_CODE (XEXP (x, 0)) == PRE_INC\n \t      || GET_CODE (XEXP (x, 0)) == PRE_DEC)\n-\t    output_address (plus_constant (Pmode, XEXP (XEXP (x, 0), 0), 4));\n+\t    output_address (mode, plus_constant (Pmode,\n+\t\t\t\t\t\t XEXP (XEXP (x, 0), 0), 4));\n \t  else\n-\t    output_address (plus_constant (Pmode, XEXP (x, 0), 4));\n+\t    output_address (mode, plus_constant (Pmode, XEXP (x, 0), 4));\n \t  fputc (')', file);\n \t}\n       else\n@@ -2255,7 +2258,7 @@ m32r_print_operand (FILE * file, rtx x, int code)\n       else\n \t{\n \t  fputs (\"@(\", file);\n-\t  output_address (XEXP (x, 0));\n+\t  output_address (GET_MODE (x), addr);\n \t  fputc (')', file);\n \t}\n       break;\n@@ -2282,7 +2285,7 @@ m32r_print_operand (FILE * file, rtx x, int code)\n /* Print a memory address as an operand to reference that memory location.  */\n \n static void\n-m32r_print_operand_address (FILE * file, rtx addr)\n+m32r_print_operand_address (FILE * file, machine_mode /*mode*/, rtx addr)\n {\n   rtx base;\n   rtx index = 0;"}, {"sha": "7a768d45c306dded1ab242a4bf03632fefe35b81", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -4470,7 +4470,7 @@ print_operand (FILE *file, rtx op, int letter)\n     }\n   else if (GET_CODE (op) == MEM)\n     {\n-      output_address (XEXP (op, 0));\n+      output_address (GET_MODE (op), XEXP (op, 0));\n       if (letter == 'd' && ! TARGET_68020\n \t  && CONSTANT_ADDRESS_P (XEXP (op, 0))\n \t  && !(GET_CODE (XEXP (op, 0)) == CONST_INT"}, {"sha": "d28f2b71ffcc499542da0ef50812ecb9170bba11", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -112,7 +112,7 @@ static void\t  mcore_asm_named_section       (const char *,\n \t\t\t\t\t\t unsigned int, tree);\n #endif\n static void       mcore_print_operand           (FILE *, rtx, int);\n-static void       mcore_print_operand_address   (FILE *, rtx);\n+static void       mcore_print_operand_address   (FILE *, machine_mode, rtx);\n static bool       mcore_print_operand_punct_valid_p (unsigned char code);\n static void       mcore_unique_section\t        (tree, int);\n static void mcore_encode_section_info\t\t(tree, rtx, int);\n@@ -309,7 +309,7 @@ calc_live_regs (int * count)\n /* Print the operand address in x to the stream.  */\n \n static void\n-mcore_print_operand_address (FILE * stream, rtx x)\n+mcore_print_operand_address (FILE * stream, machine_mode /*mode*/, rtx x)\n {\n   switch (GET_CODE (x))\n     {\n@@ -401,7 +401,7 @@ mcore_print_operand (FILE * stream, rtx x, int code)\n \t  break;\n \tcase MEM:\n \t  mcore_print_operand_address\n-\t    (stream, XEXP (adjust_address (x, SImode, 4), 0));\n+\t    (stream, GET_MODE (x), XEXP (adjust_address (x, SImode, 4), 0));\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();\n@@ -425,7 +425,7 @@ mcore_print_operand (FILE * stream, rtx x, int code)\n \t  fputs (reg_names[REGNO (x)], (stream));\n \t  break;\n \tcase MEM:\n-\t  output_address (XEXP (x, 0));\n+\t  output_address (GET_MODE (x), XEXP (x, 0));\n \t  break;\n \tdefault:\n \t  output_addr_const (stream, x);"}, {"sha": "aebbc3b038086430517974616485ffec3cbb47f8", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -2317,7 +2317,7 @@ print_operand (FILE * file, rtx op, int letter)\n     if (letter == 'o')\n       {\n \trtx op4 = adjust_address (op, GET_MODE (op), 4);\n-\toutput_address (XEXP (op4, 0));\n+\toutput_address (GET_MODE (op), XEXP (op4, 0));\n       }\n     else if (letter == 'y')\n       {\n@@ -2329,7 +2329,7 @@ print_operand (FILE * file, rtx op, int letter)\n         }\n       }\n     else\n-      output_address (XEXP (op, 0));\n+      output_address (GET_MODE (op), XEXP (op, 0));\n \n   else if (letter == 'h' || letter == 'j')\n     {"}, {"sha": "9880b236d6de9a9631e1dfe441c47132c6d35db1", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -8595,7 +8595,8 @@ mips_print_operand (FILE *file, rtx op, int letter)\n \n \tcase MEM:\n \t  if (letter == 'D')\n-\t    output_address (plus_constant (Pmode, XEXP (op, 0), 4));\n+\t    output_address (GET_MODE (op), plus_constant (Pmode,\n+\t\t\t\t\t\t\t  XEXP (op, 0), 4));\n \t  else if (letter == 'b')\n \t    {\n \t      gcc_assert (REG_P (XEXP (op, 0)));\n@@ -8604,7 +8605,7 @@ mips_print_operand (FILE *file, rtx op, int letter)\n \t  else if (letter && letter != 'z')\n \t    output_operand_lossage (\"invalid use of '%%%c'\", letter);\n \t  else\n-\t    output_address (XEXP (op, 0));\n+\t    output_address (GET_MODE (op), XEXP (op, 0));\n \t  break;\n \n \tdefault:\n@@ -8624,7 +8625,7 @@ mips_print_operand (FILE *file, rtx op, int letter)\n /* Implement TARGET_PRINT_OPERAND_ADDRESS.  */\n \n static void\n-mips_print_operand_address (FILE *file, rtx x)\n+mips_print_operand_address (FILE *file, machine_mode /*mode*/, rtx x)\n {\n   struct mips_address_info addr;\n "}, {"sha": "4cafc02d2f3a43bc94c0285bb1727cb22bd4900e", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -162,7 +162,7 @@ static bool mmix_frame_pointer_required (void);\n static void mmix_asm_trampoline_template (FILE *);\n static void mmix_trampoline_init (rtx, tree, rtx);\n static void mmix_print_operand (FILE *, rtx, int);\n-static void mmix_print_operand_address (FILE *, rtx);\n+static void mmix_print_operand_address (FILE *, machine_mode, rtx);\n static bool mmix_print_operand_punct_valid_p (unsigned char);\n static void mmix_conditional_register_usage (void);\n \n@@ -1697,7 +1697,7 @@ mmix_print_operand (FILE *stream, rtx x, int code)\n       return;\n \n     case MEM:\n-      output_address (XEXP (modified_x, 0));\n+      output_address (GET_MODE (modified_x), XEXP (modified_x, 0));\n       return;\n \n     case CONST_INT:\n@@ -1754,7 +1754,7 @@ mmix_print_operand_punct_valid_p (unsigned char code)\n /* TARGET_PRINT_OPERAND_ADDRESS.  */\n \n static void\n-mmix_print_operand_address (FILE *stream, rtx x)\n+mmix_print_operand_address (FILE *stream, machine_mode /*mode*/, rtx x)\n {\n   if (REG_P (x))\n     {"}, {"sha": "2f191e416fef5a1025061632eb5b007280abf577", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -239,7 +239,7 @@ mn10300_print_operand (FILE *file, rtx x, int code)\n \t{\n \tcase MEM:\n \t  fputc ('(', file);\n-\t  output_address (XEXP (x, 0));\n+\t  output_address (GET_MODE (x), XEXP (x, 0));\n \t  fputc (')', file);\n \t  break;\n \n@@ -258,7 +258,7 @@ mn10300_print_operand (FILE *file, rtx x, int code)\n \t{\n \tcase MEM:\n \t  fputc ('(', file);\n-\t  output_address (XEXP (x, 0));\n+\t  output_address (GET_MODE (x), XEXP (x, 0));\n \t  fputc (')', file);\n \t  break;\n \n@@ -317,7 +317,7 @@ mn10300_print_operand (FILE *file, rtx x, int code)\n \tcase MEM:\n \t  fputc ('(', file);\n \t  x = adjust_address (x, SImode, 4);\n-\t  output_address (XEXP (x, 0));\n+\t  output_address (GET_MODE (x), XEXP (x, 0));\n \t  fputc (')', file);\n \t  break;\n \n@@ -369,9 +369,10 @@ mn10300_print_operand (FILE *file, rtx x, int code)\n     case 'A':\n       fputc ('(', file);\n       if (REG_P (XEXP (x, 0)))\n-\toutput_address (gen_rtx_PLUS (SImode, XEXP (x, 0), const0_rtx));\n+\toutput_address (VOIDmode, gen_rtx_PLUS (SImode,\n+\t\t\t\t\t\tXEXP (x, 0), const0_rtx));\n       else\n-\toutput_address (XEXP (x, 0));\n+\toutput_address (VOIDmode, XEXP (x, 0));\n       fputc (')', file);\n       break;\n \n@@ -402,12 +403,12 @@ mn10300_print_operand (FILE *file, rtx x, int code)\n \t{\n \tcase MEM:\n \t  fputc ('(', file);\n-\t  output_address (XEXP (x, 0));\n+\t  output_address (GET_MODE (x), XEXP (x, 0));\n \t  fputc (')', file);\n \t  break;\n \n \tcase PLUS:\n-\t  output_address (x);\n+\t  output_address (VOIDmode, x);\n \t  break;\n \n \tcase REG:"}, {"sha": "8832582af8ef55c8f16edf20b5ae91bba1a8600c", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -3287,7 +3287,7 @@ msp430_print_operand_raw (FILE * file, rtx op)\n    is ADDR.  */\n \n static void\n-msp430_print_operand_addr (FILE * file, rtx addr)\n+msp430_print_operand_addr (FILE * file, machine_mode /*mode*/, rtx addr)\n {\n   switch (GET_CODE (addr))\n     {\n@@ -3531,7 +3531,7 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n \n     case MEM:\n       addr = XEXP (op, 0);\n-      msp430_print_operand_addr (file, addr);\n+      msp430_print_operand_addr (file, GET_MODE (op), addr);\n       break;\n \n     case CONST:"}, {"sha": "1bdb518a02e8104b6502ce42dced2f33aa887037", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -2311,7 +2311,7 @@ nds32_print_operand (FILE *stream, rtx x, int code)\n       break;\n \n     case MEM:\n-      output_address (XEXP (x, 0));\n+      output_address (GET_MODE (x), XEXP (x, 0));\n       break;\n \n     case CODE_LABEL:\n@@ -2331,7 +2331,7 @@ nds32_print_operand (FILE *stream, rtx x, int code)\n }\n \n static void\n-nds32_print_operand_address (FILE *stream, rtx x)\n+nds32_print_operand_address (FILE *stream, machine_mode /*mode*/, rtx x)\n {\n   rtx op0, op1;\n "}, {"sha": "3fd2d0144a00f0e8e01f9a8c20b9351d3672202d", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -2622,7 +2622,7 @@ nios2_print_operand (FILE *file, rtx op, int letter)\n \t}\n       if (letter == 0)\n         {\n-          output_address (op);\n+          output_address (VOIDmode, op);\n           return;\n         }\n       break;\n@@ -2705,7 +2705,7 @@ nios2_output_addr_const_extra (FILE *file, rtx op)\n \n /* Implement TARGET_PRINT_OPERAND_ADDRESS.  */\n static void\n-nios2_print_operand_address (FILE *file, rtx op)\n+nios2_print_operand_address (FILE *file, machine_mode mode, rtx op)\n {\n   switch (GET_CODE (op))\n     {\n@@ -2751,7 +2751,7 @@ nios2_print_operand_address (FILE *file, rtx op)\n     case MEM:\n       {\n         rtx base = XEXP (op, 0);\n-        nios2_print_operand_address (file, base);\n+        nios2_print_operand_address (file, mode, base);\n         return;\n       }\n     default:"}, {"sha": "f1ac307b34688aec6141cdd2f7b0f5f65060eb0c", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -1579,7 +1579,7 @@ static void\n output_decl_chunk (void)\n {\n   begin_decl_field ();\n-  output_address (gen_int_mode (init_part, decl_chunk_mode));\n+  output_address (VOIDmode, gen_int_mode (init_part, decl_chunk_mode));\n   init_part = 0;\n }\n \n@@ -1636,7 +1636,7 @@ nvptx_assemble_integer (rtx x, unsigned int size, int ARG_UNUSED (aligned_p))\n \t{\n \t  nvptx_record_needed_fndecl (SYMBOL_REF_DECL (x));\n \t  fprintf (asm_out_file, \"generic(\");\n-\t  output_address (x);\n+\t  output_address (VOIDmode, x);\n \t  fprintf (asm_out_file, \")\");\n \t}\n       if (off != 0)\n@@ -1894,7 +1894,7 @@ nvptx_output_call_insn (rtx_insn *insn, rtx result, rtx callee)\n       assemble_name (asm_out_file, name);\n     }\n   else\n-    output_address (callee);\n+    output_address (VOIDmode, callee);\n \n   if (arg_end > 1 || (decl && DECL_STATIC_CHAIN (decl)))\n     {\n@@ -1954,9 +1954,9 @@ nvptx_print_address_operand (FILE *file, rtx x, machine_mode)\n     {\n     case PLUS:\n       off = XEXP (x, 1);\n-      output_address (XEXP (x, 0));\n+      output_address (VOIDmode, XEXP (x, 0));\n       fprintf (file, \"+\");\n-      output_address (off);\n+      output_address (VOIDmode, off);\n       break;\n \n     case SYMBOL_REF:\n@@ -1974,9 +1974,9 @@ nvptx_print_address_operand (FILE *file, rtx x, machine_mode)\n /* Write assembly language output for the address ADDR to FILE.  */\n \n static void\n-nvptx_print_operand_address (FILE *file, rtx addr)\n+nvptx_print_operand_address (FILE *file, machine_mode mode, rtx addr)\n {\n-  nvptx_print_address_operand (file, addr, VOIDmode);\n+  nvptx_print_address_operand (file, addr, mode);\n }\n \n /* Print an operand, X, to FILE, with an optional modifier in CODE."}, {"sha": "b8caab523192984044e2d72963bf4356e02ef1d7", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -5413,10 +5413,10 @@ pa_print_operand (FILE *file, rtx x, int code)\n \t\t       reg_names [REGNO (index)], reg_names [REGNO (base)]);\n \t    }\n \t  else\n-\t    output_address (XEXP (x, 0));\n+\t    output_address (GET_MODE (x), XEXP (x, 0));\n \t  break;\n \tdefault:\n-\t  output_address (XEXP (x, 0));\n+\t  output_address (GET_MODE (x), XEXP (x, 0));\n \t  break;\n \t}\n     }"}, {"sha": "9a1aaebb6b55b3a9381a484a50e6c7ea94a4b6d5", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -724,7 +724,7 @@ pdp11_asm_print_operand (FILE *file, rtx x, int code)\n   else if (GET_CODE (x) == REG)\n     fprintf (file, \"%s\", reg_names[REGNO (x)]);\n   else if (GET_CODE (x) == MEM)\n-    output_address (XEXP (x, 0));\n+    output_address (GET_MODE (x), XEXP (x, 0));\n   else if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) != SImode)\n     {\n       REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (x), sval);"}, {"sha": "13d0193ea55cf4f5d0a943be3d8eaab8be435791", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -19259,18 +19259,19 @@ print_operand (FILE *file, rtx x, int code)\n \tfputs (reg_names[REGNO (x) + 1], file);\n       else if (MEM_P (x))\n \t{\n+\t  machine_mode mode = GET_MODE (x);\n \t  /* Handle possible auto-increment.  Since it is pre-increment and\n \t     we have already done it, we can just use an offset of word.  */\n \t  if (GET_CODE (XEXP (x, 0)) == PRE_INC\n \t      || GET_CODE (XEXP (x, 0)) == PRE_DEC)\n-\t    output_address (plus_constant (Pmode, XEXP (XEXP (x, 0), 0),\n-\t\t\t\t\t   UNITS_PER_WORD));\n+\t    output_address (mode, plus_constant (Pmode, XEXP (XEXP (x, 0), 0),\n+\t\t\t\t\t\t UNITS_PER_WORD));\n \t  else if (GET_CODE (XEXP (x, 0)) == PRE_MODIFY)\n-\t    output_address (plus_constant (Pmode, XEXP (XEXP (x, 0), 0),\n-\t\t\t\t\t   UNITS_PER_WORD));\n+\t    output_address (mode, plus_constant (Pmode, XEXP (XEXP (x, 0), 0),\n+\t\t\t\t\t\t UNITS_PER_WORD));\n \t  else\n-\t    output_address (XEXP (adjust_address_nv (x, SImode,\n-\t\t\t\t\t\t     UNITS_PER_WORD),\n+\t    output_address (mode, XEXP (adjust_address_nv (x, SImode,\n+\t\t\t\t\t\t\t   UNITS_PER_WORD),\n \t\t\t\t  0));\n \n \t  if (small_data_operand (x, GET_MODE (x)))\n@@ -19506,13 +19507,16 @@ print_operand (FILE *file, rtx x, int code)\n \tfputs (reg_names[REGNO (x) + 2], file);\n       else if (MEM_P (x))\n \t{\n+\t  machine_mode mode = GET_MODE (x);\n \t  if (GET_CODE (XEXP (x, 0)) == PRE_INC\n \t      || GET_CODE (XEXP (x, 0)) == PRE_DEC)\n-\t    output_address (plus_constant (Pmode, XEXP (XEXP (x, 0), 0), 8));\n+\t    output_address (mode, plus_constant (Pmode,\n+\t\t\t\t\t\t XEXP (XEXP (x, 0), 0), 8));\n \t  else if (GET_CODE (XEXP (x, 0)) == PRE_MODIFY)\n-\t    output_address (plus_constant (Pmode, XEXP (XEXP (x, 0), 0), 8));\n+\t    output_address (mode, plus_constant (Pmode,\n+\t\t\t\t\t\t XEXP (XEXP (x, 0), 0), 8));\n \t  else\n-\t    output_address (XEXP (adjust_address_nv (x, SImode, 8), 0));\n+\t    output_address (mode, XEXP (adjust_address_nv (x, SImode, 8), 0));\n \t  if (small_data_operand (x, GET_MODE (x)))\n \t    fprintf (file, \"@%s(%s)\", SMALL_DATA_RELOC,\n \t\t     reg_names[SMALL_DATA_REG]);\n@@ -19551,13 +19555,16 @@ print_operand (FILE *file, rtx x, int code)\n \tfputs (reg_names[REGNO (x) + 3], file);\n       else if (MEM_P (x))\n \t{\n+\t  machine_mode mode = GET_MODE (x);\n \t  if (GET_CODE (XEXP (x, 0)) == PRE_INC\n \t      || GET_CODE (XEXP (x, 0)) == PRE_DEC)\n-\t    output_address (plus_constant (Pmode, XEXP (XEXP (x, 0), 0), 12));\n+\t    output_address (mode, plus_constant (Pmode,\n+\t\t\t\t\t\t XEXP (XEXP (x, 0), 0), 12));\n \t  else if (GET_CODE (XEXP (x, 0)) == PRE_MODIFY)\n-\t    output_address (plus_constant (Pmode, XEXP (XEXP (x, 0), 0), 12));\n+\t    output_address (mode, plus_constant (Pmode,\n+\t\t\t\t\t\t XEXP (XEXP (x, 0), 0), 12));\n \t  else\n-\t    output_address (XEXP (adjust_address_nv (x, SImode, 12), 0));\n+\t    output_address (mode, XEXP (adjust_address_nv (x, SImode, 12), 0));\n \t  if (small_data_operand (x, GET_MODE (x)))\n \t    fprintf (file, \"@%s(%s)\", SMALL_DATA_RELOC,\n \t\t     reg_names[SMALL_DATA_REG]);\n@@ -19645,9 +19652,9 @@ print_operand (FILE *file, rtx x, int code)\n \t    fprintf (file, \"%d(%s)\", - GET_MODE_SIZE (GET_MODE (x)),\n \t\t     reg_names[REGNO (XEXP (XEXP (x, 0), 0))]);\n \t  else if (GET_CODE (XEXP (x, 0)) == PRE_MODIFY)\n-\t    output_address (XEXP (XEXP (x, 0), 1));\n+\t    output_address (GET_MODE (x), XEXP (XEXP (x, 0), 1));\n \t  else\n-\t    output_address (XEXP (x, 0));\n+\t    output_address (GET_MODE (x), XEXP (x, 0));\n \t}\n       else\n \t{"}, {"sha": "c2c95917907b282dcdc44663f812478c9ead24b0", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -379,7 +379,7 @@ rx_mode_dependent_address_p (const_rtx addr, addr_space_t as ATTRIBUTE_UNUSED)\n    reference whose address is ADDR.  */\n \n static void\n-rx_print_operand_address (FILE * file, rtx addr)\n+rx_print_operand_address (FILE * file, machine_mode /*mode*/, rtx addr)\n {\n   switch (GET_CODE (addr))\n     {\n@@ -690,7 +690,7 @@ rx_print_operand (FILE * file, rtx op, int letter)\n \tcase MEM:\n \t  if (! WORDS_BIG_ENDIAN)\n \t    op = adjust_address (op, SImode, 4);\n-\t  output_address (XEXP (op, 0));\n+\t  output_address (GET_MODE (op), XEXP (op, 0));\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();\n@@ -714,7 +714,7 @@ rx_print_operand (FILE * file, rtx op, int letter)\n \tcase MEM:\n \t  if (WORDS_BIG_ENDIAN)\n \t    op = adjust_address (op, SImode, 4);\n-\t  output_address (XEXP (op, 0));\n+\t  output_address (GET_MODE (op), XEXP (op, 0));\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();\n@@ -846,11 +846,11 @@ rx_print_operand (FILE * file, rtx op, int letter)\n \t  }\n \n \tcase MEM:\n-\t  output_address (XEXP (op, 0));\n+\t  output_address (GET_MODE (op), XEXP (op, 0));\n \t  break;\n \n \tcase PLUS:\n-\t  output_address (op);\n+\t  output_address (VOIDmode, op);\n \t  break;\n \n \tcase REG:\n@@ -915,7 +915,7 @@ rx_print_operand (FILE * file, rtx op, int letter)\n \tcase SYMBOL_REF:\n \tcase LABEL_REF:\n \tcase CODE_LABEL:\n-\t  rx_print_operand_address (file, op);\n+\t  rx_print_operand_address (file, VOIDmode, op);\n \t  break;\n \n \tdefault:"}, {"sha": "40ee2f77b3182a3aff177eff8aebe1abcef17717", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -7031,7 +7031,7 @@ print_operand (FILE *file, rtx x, int code)\n       break;\n \n     case MEM:\n-      output_address (XEXP (x, 0));\n+      output_address (GET_MODE (x), XEXP (x, 0));\n       break;\n \n     case CONST:"}, {"sha": "919ea1c99c7daf5b863f40656accf96827743bf7", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -212,7 +212,7 @@ static tree sh_handle_sp_switch_attribute (tree *, tree, tree, int, bool *);\n static tree sh_handle_trap_exit_attribute (tree *, tree, tree, int, bool *);\n static tree sh_handle_renesas_attribute (tree *, tree, tree, int, bool *);\n static void sh_print_operand (FILE *, rtx, int);\n-static void sh_print_operand_address (FILE *, rtx);\n+static void sh_print_operand_address (FILE *, machine_mode, rtx);\n static bool sh_print_operand_punct_valid_p (unsigned char code);\n static bool sh_asm_output_addr_const_extra (FILE *file, rtx x);\n static void sh_output_function_epilogue (FILE *, HOST_WIDE_INT);\n@@ -1144,7 +1144,7 @@ sh_override_options_after_change (void)\n \f\n /* Print the operand address in x to the stream.  */\n static void\n-sh_print_operand_address (FILE *stream, rtx x)\n+sh_print_operand_address (FILE *stream, machine_mode /*mode*/, rtx x)\n {\n   switch (GET_CODE (x))\n     {\n@@ -1296,7 +1296,7 @@ sh_print_operand (FILE *stream, rtx x, int code)\n       else if (MEM_P (x))\n \t{\n \t  x = adjust_address (x, SImode, 4 * SH_REG_LSW_OFFSET);\n-\t  sh_print_operand_address (stream, XEXP (x, 0));\n+\t  sh_print_operand_address (stream, GET_MODE (x), XEXP (x, 0));\n \t}\n       else\n \t{\n@@ -1323,7 +1323,7 @@ sh_print_operand (FILE *stream, rtx x, int code)\n       else if (MEM_P (x))\n \t{\n \t  x = adjust_address (x, SImode, 4 * SH_REG_MSW_OFFSET);\n-\t  sh_print_operand_address (stream, XEXP (x, 0));\n+\t  sh_print_operand_address (stream, GET_MODE (x), XEXP (x, 0));\n \t}\n       else\n \t{\n@@ -1348,10 +1348,13 @@ sh_print_operand (FILE *stream, rtx x, int code)\n \t  fputs (reg_names[REGNO (x) + 1], (stream));\n \t  break;\n \tcase MEM:\n-\t  if (GET_CODE (XEXP (x, 0)) != PRE_DEC\n-\t      && GET_CODE (XEXP (x, 0)) != POST_INC)\n-\t    x = adjust_address (x, SImode, 4);\n-\t  sh_print_operand_address (stream, XEXP (x, 0));\n+\t  {\n+\t    machine_mode mode = GET_MODE (x);\n+\t    if (GET_CODE (XEXP (x, 0)) != PRE_DEC\n+\t\t&& GET_CODE (XEXP (x, 0)) != POST_INC)\n+\t      x = adjust_address (x, SImode, 4);\n+\t    sh_print_operand_address (stream, mode, XEXP (x, 0));\n+\t  }\n \t  break;\n \tdefault:\n \t  break;\n@@ -1562,7 +1565,7 @@ sh_print_operand (FILE *stream, rtx x, int code)\n \t  break;\n \n \tcase MEM:\n-\t  output_address (XEXP (x, 0));\n+\t  output_address (GET_MODE (x), XEXP (x, 0));\n \t  break;\n \n \tdefault:"}, {"sha": "7fa702e7d865ab20cb821ce1a6618e50ea776fc9", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -617,7 +617,7 @@ static machine_mode sparc_preferred_simd_mode (machine_mode);\n static reg_class_t sparc_preferred_reload_class (rtx x, reg_class_t rclass);\n static bool sparc_print_operand_punct_valid_p (unsigned char);\n static void sparc_print_operand (FILE *, rtx, int);\n-static void sparc_print_operand_address (FILE *, rtx);\n+static void sparc_print_operand_address (FILE *, machine_mode, rtx);\n static reg_class_t sparc_secondary_reload (bool, rtx, reg_class_t,\n \t\t\t\t\t   machine_mode,\n \t\t\t\t\t   secondary_reload_info *);\n@@ -8802,7 +8802,7 @@ sparc_print_operand (FILE *file, rtx x, int code)\n       return;\n     case 'm':\n       /* Print the operand's address only.  */\n-      output_address (XEXP (x, 0));\n+      output_address (GET_MODE (x), XEXP (x, 0));\n       return;\n     case 'r':\n       /* In this case we need a register.  Use %g0 if the\n@@ -8895,7 +8895,7 @@ sparc_print_operand (FILE *file, rtx x, int code)\n       /* Operand must be a MEM; write its address.  */\n       if (GET_CODE (x) != MEM)\n \toutput_operand_lossage (\"invalid %%f operand\");\n-      output_address (XEXP (x, 0));\n+      output_address (GET_MODE (x), XEXP (x, 0));\n       return;\n \n     case 's':\n@@ -8933,7 +8933,7 @@ sparc_print_operand (FILE *file, rtx x, int code)\n \t/* Poor Sun assembler doesn't understand absolute addressing.  */\n       if (CONSTANT_P (XEXP (x, 0)))\n \tfputs (\"%g0+\", file);\n-      output_address (XEXP (x, 0));\n+      output_address (GET_MODE (x), XEXP (x, 0));\n       fputc (']', file);\n     }\n   else if (GET_CODE (x) == HIGH)\n@@ -8972,7 +8972,7 @@ sparc_print_operand (FILE *file, rtx x, int code)\n /* Implement TARGET_PRINT_OPERAND_ADDRESS.  */\n \n static void\n-sparc_print_operand_address (FILE *file, rtx x)\n+sparc_print_operand_address (FILE *file, machine_mode /*mode*/, rtx x)\n {\n   register rtx base, index = 0;\n   int offset = 0;\n@@ -8995,7 +8995,7 @@ sparc_print_operand_address (FILE *file, rtx x)\n \t\t      && ! TARGET_CM_MEDMID);\n \t  output_operand (XEXP (base, 0), 0);\n \t  fputs (\"+%lo(\", file);\n-\t  output_address (XEXP (base, 1));\n+\t  output_address (VOIDmode, XEXP (base, 1));\n \t  fprintf (file, \")+%d\", offset);\n \t}\n       else\n@@ -9027,7 +9027,7 @@ sparc_print_operand_address (FILE *file, rtx x)\n         fputs (\"+%l44(\", file);\n       else\n         fputs (\"+%lo(\", file);\n-      output_address (XEXP (addr, 1));\n+      output_address (VOIDmode, XEXP (addr, 1));\n       fputc (')', file);\n     }\n   else if (flag_pic"}, {"sha": "31502fb67b4b9219589fb42a2a542e40d68a9825", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -1339,7 +1339,7 @@ print_operand (FILE * file, rtx x, int code)\n \t    /* Used in indirect function calls. */\n \t    fprintf (file, \"%s\", reg_names[REGNO (XEXP (x, 0))]);\n \t  else\n-\t    output_address (XEXP (x, 0));\n+\t    output_address (GET_MODE (x), XEXP (x, 0));\n \t}\n       return;\n \n@@ -1432,7 +1432,7 @@ print_operand (FILE * file, rtx x, int code)\n       if (xcode == REG)\n \tfprintf (file, \"%s\", reg_names[REGNO (x)]);\n       else if (xcode == MEM)\n-\toutput_address (XEXP (x, 0));\n+\toutput_address (GET_MODE (x), XEXP (x, 0));\n       else if (xcode == CONST_VECTOR)\n \tprint_operand (file, CONST_VECTOR_ELT (x, 0), 0);\n       else"}, {"sha": "f626853225423a7023070e439e6d5bbb48c6a0cf", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -1662,7 +1662,8 @@ xstormy16_asm_out_constructor (rtx symbol, int priority)\n    Print a memory address as an operand to reference that memory location.  */\n \n static void\n-xstormy16_print_operand_address (FILE *file, rtx address)\n+xstormy16_print_operand_address (FILE *file, machine_mode /*mode*/,\n+\t\t\t\t rtx address)\n {\n   HOST_WIDE_INT offset;\n   int pre_dec, post_inc;\n@@ -1769,7 +1770,7 @@ xstormy16_print_operand (FILE *file, rtx x, int code)\n       else if (LABEL_P (x))\n \toutput_asm_label (x);\n       else\n-\txstormy16_print_operand_address (file, x);\n+\txstormy16_print_operand_address (file, VOIDmode, x);\n       return;\n \n     case 'o':\n@@ -1825,7 +1826,7 @@ xstormy16_print_operand (FILE *file, rtx x, int code)\n       break;\n \n     case MEM:\n-      xstormy16_print_operand_address (file, XEXP (x, 0));\n+      xstormy16_print_operand_address (file, GET_MODE (x), XEXP (x, 0));\n       break;\n \n     default:"}, {"sha": "d2210622ae5221880f76c2151c7e0f928c6a23c6", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -59,11 +59,6 @@\n /* SYMBOL_REF for GOT */\n static GTY(()) rtx g_got_symbol = NULL;\n \n-/* In case of a POST_INC or POST_DEC memory reference, we must report\n-   the mode of the memory reference from TARGET_PRINT_OPERAND to\n-   TARGET_PRINT_OPERAND_ADDRESS.  */\n-static machine_mode output_memory_reference_mode;\n-\n /* Report whether we're printing out the first address fragment of a\n    POST_INC or POST_DEC memory reference, from TARGET_PRINT_OPERAND to\n    TARGET_PRINT_OPERAND_ADDRESS.  */\n@@ -5268,10 +5263,8 @@ tilegx_print_operand (FILE *file, rtx x, int code)\n \t  return;\n \t}\n \n-      output_memory_reference_mode = GET_MODE (x);\n       output_memory_autoinc_first = true;\n-      output_address (XEXP (x, 0));\n-      output_memory_reference_mode = VOIDmode;\n+      output_address (GET_MODE (x), XEXP (x, 0));\n       return;\n \n     case 'i':\n@@ -5282,10 +5275,8 @@ tilegx_print_operand (FILE *file, rtx x, int code)\n \t  return;\n \t}\n \n-      output_memory_reference_mode = GET_MODE (x);\n       output_memory_autoinc_first = false;\n-      output_address (XEXP (x, 0));\n-      output_memory_reference_mode = VOIDmode;\n+      output_address (GET_MODE (x), XEXP (x, 0));\n       return;\n \n     case 'j':\n@@ -5404,8 +5395,7 @@ tilegx_print_operand (FILE *file, rtx x, int code)\n \t}\n       else if (MEM_P (x))\n \t{\n-\t  output_memory_reference_mode = VOIDmode;\n-\t  output_address (XEXP (x, 0));\n+\t  output_address (VOIDmode, XEXP (x, 0));\n \t  return;\n \t}\n       else\n@@ -5423,14 +5413,14 @@ tilegx_print_operand (FILE *file, rtx x, int code)\n \n /* Implement TARGET_PRINT_OPERAND_ADDRESS.  */\n static void\n-tilegx_print_operand_address (FILE *file, rtx addr)\n+tilegx_print_operand_address (FILE *file, machine_mode mode, rtx addr)\n {\n   if (GET_CODE (addr) == POST_DEC\n       || GET_CODE (addr) == POST_INC)\n     {\n-      int offset = GET_MODE_SIZE (output_memory_reference_mode);\n+      int offset = GET_MODE_SIZE (mode);\n \n-      gcc_assert (output_memory_reference_mode != VOIDmode);\n+      gcc_assert (mode != VOIDmode);\n \n       if (output_memory_autoinc_first)\n \tfprintf (file, \"%s\", reg_names[REGNO (XEXP (addr, 0))]);\n@@ -5440,7 +5430,7 @@ tilegx_print_operand_address (FILE *file, rtx addr)\n     }\n   else if (GET_CODE (addr) == POST_MODIFY)\n     {\n-      gcc_assert (output_memory_reference_mode != VOIDmode);\n+      gcc_assert (mode != VOIDmode);\n \n       gcc_assert (GET_CODE (XEXP (addr, 1)) == PLUS);\n "}, {"sha": "248b24e83858ea468c5d13af2832d49c927ef963", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -59,11 +59,6 @@\n /* SYMBOL_REF for GOT */\n static GTY(()) rtx g_got_symbol = NULL;\n \n-/* In case of a POST_INC or POST_DEC memory reference, we must report\n-   the mode of the memory reference from TARGET_PRINT_OPERAND to\n-   TARGET_PRINT_OPERAND_ADDRESS.  */\n-static machine_mode output_memory_reference_mode;\n-\n /* Report whether we're printing out the first address fragment of a\n    POST_INC or POST_DEC memory reference, from TARGET_PRINT_OPERAND to\n    TARGET_PRINT_OPERAND_ADDRESS.  */\n@@ -4594,10 +4589,8 @@ tilepro_print_operand (FILE *file, rtx x, int code)\n \t  return;\n \t}\n \n-      output_memory_reference_mode = GET_MODE (x);\n       output_memory_autoinc_first = true;\n-      output_address (XEXP (x, 0));\n-      output_memory_reference_mode = VOIDmode;\n+      output_address (GET_MODE (x), XEXP (x, 0));\n       return;\n \n     case 'i':\n@@ -4608,10 +4601,8 @@ tilepro_print_operand (FILE *file, rtx x, int code)\n \t  return;\n \t}\n \n-      output_memory_reference_mode = GET_MODE (x);\n       output_memory_autoinc_first = false;\n-      output_address (XEXP (x, 0));\n-      output_memory_reference_mode = VOIDmode;\n+      output_address (GET_MODE (x), XEXP (x, 0));\n       return;\n \n     case 'j':\n@@ -4810,8 +4801,7 @@ tilepro_print_operand (FILE *file, rtx x, int code)\n \t}\n       else if (MEM_P (x))\n \t{\n-\t  output_memory_reference_mode = VOIDmode;\n-\t  output_address (XEXP (x, 0));\n+\t  output_address (VOIDmode, XEXP (x, 0));\n \t  return;\n \t}\n       else\n@@ -4830,14 +4820,14 @@ tilepro_print_operand (FILE *file, rtx x, int code)\n \n /* Implement TARGET_PRINT_OPERAND_ADDRESS.  */\n static void\n-tilepro_print_operand_address (FILE *file, rtx addr)\n+tilepro_print_operand_address (FILE *file, machine_mode mode, rtx addr)\n {\n   if (GET_CODE (addr) == POST_DEC\n       || GET_CODE (addr) == POST_INC)\n     {\n-      int offset = GET_MODE_SIZE (output_memory_reference_mode);\n+      int offset = GET_MODE_SIZE (mode);\n \n-      gcc_assert (output_memory_reference_mode != VOIDmode);\n+      gcc_assert (mode != VOIDmode);\n \n       if (output_memory_autoinc_first)\n \tfprintf (file, \"%s\", reg_names[REGNO (XEXP (addr, 0))]);\n@@ -4847,7 +4837,7 @@ tilepro_print_operand_address (FILE *file, rtx addr)\n     }\n   else if (GET_CODE (addr) == POST_MODIFY)\n     {\n-      gcc_assert (output_memory_reference_mode != VOIDmode);\n+      gcc_assert (mode != VOIDmode);\n \n       gcc_assert (GET_CODE (XEXP (addr, 1)) == PLUS);\n "}, {"sha": "d642eca207c6ff622ec7c0a73c3eeba2f7ee7714", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -50,7 +50,7 @@\n #define streq(a,b) (strcmp (a, b) == 0)\n #endif\n \n-static void v850_print_operand_address (FILE *, rtx);\n+static void v850_print_operand_address (FILE *, machine_mode, rtx);\n \n /* Names of the various data areas used on the v850.  */\n const char * GHS_default_section_names [(int) COUNT_OF_GHS_SECTION_KINDS];\n@@ -540,10 +540,13 @@ v850_print_operand (FILE * file, rtx x, int code)\n \t  fprintf (file, reg_names[REGNO (x) + 1]);\n \t  break;\n \tcase MEM:\n-\t  x = XEXP (adjust_address (x, SImode, 4), 0);\n-\t  v850_print_operand_address (file, x);\n-\t  if (GET_CODE (x) == CONST_INT)\n-\t    fprintf (file, \"[r0]\");\n+\t  {\n+\t    machine_mode mode = GET_MODE (x);\n+\t    x = XEXP (adjust_address (x, SImode, 4), 0);\n+\t    v850_print_operand_address (file, mode, x);\n+\t    if (GET_CODE (x) == CONST_INT)\n+\t      fprintf (file, \"[r0]\");\n+\t  }\n \t  break;\n \t  \n \tcase CONST_INT:\n@@ -617,10 +620,11 @@ v850_print_operand (FILE * file, rtx x, int code)\n \t{\n \tcase MEM:\n \t  if (GET_CODE (XEXP (x, 0)) == CONST_INT)\n-\t    output_address (gen_rtx_PLUS (SImode, gen_rtx_REG (SImode, 0),\n+\t    output_address (GET_MODE (x),\n+\t\t\t    gen_rtx_PLUS (SImode, gen_rtx_REG (SImode, 0),\n \t\t\t\t\t  XEXP (x, 0)));\n \t  else\n-\t    output_address (XEXP (x, 0));\n+\t    output_address (GET_MODE (x), XEXP (x, 0));\n \t  break;\n \n \tcase REG:\n@@ -638,7 +642,7 @@ v850_print_operand (FILE * file, rtx x, int code)\n \tcase CONST:\n \tcase LABEL_REF:\n \tcase CODE_LABEL:\n-\t  v850_print_operand_address (file, x);\n+\t  v850_print_operand_address (file, VOIDmode, x);\n \t  break;\n \tdefault:\n \t  gcc_unreachable ();\n@@ -652,7 +656,7 @@ v850_print_operand (FILE * file, rtx x, int code)\n /* Output assembly language output for the address ADDR to FILE.  */\n \n static void\n-v850_print_operand_address (FILE * file, rtx addr)\n+v850_print_operand_address (FILE * file, machine_mode /*mode*/, rtx addr)\n {\n   switch (GET_CODE (addr))\n     {"}, {"sha": "c059751915cc161ae18d72a5757259c3db1e4f49", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -472,7 +472,7 @@ print_operand_address (FILE * file, rtx addr)\n \n \t    }\n \n-\t  output_address (offset);\n+\t  output_address (VOIDmode, offset);\n \t}\n \n       if (breg != 0)\n@@ -527,7 +527,7 @@ print_operand (FILE *file, rtx x, int code)\n   else if (REG_P (x))\n     fprintf (file, \"%s\", reg_names[REGNO (x)]);\n   else if (MEM_P (x))\n-    output_address (XEXP (x, 0));\n+    output_address (GET_MODE (x), XEXP (x, 0));\n   else if (GET_CODE (x) == CONST_DOUBLE && GET_MODE (x) == SFmode)\n     {\n       char dstr[30];"}, {"sha": "0f58655d34e8c1cf0d2e213aab4e4f2f4f2a42a8", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -2318,7 +2318,7 @@ print_operand (FILE *file, rtx x, int letter)\n \t  && (GET_MODE (x) == DFmode || GET_MODE (x) == DImode))\n \t{\n \t  x = adjust_address (x, GET_MODE (x) == DFmode ? SFmode : SImode, 4);\n-\t  output_address (XEXP (x, 0));\n+\t  output_address (GET_MODE (x), XEXP (x, 0));\n \t}\n       else\n \toutput_operand_lossage (\"invalid %%N value\");\n@@ -2429,7 +2429,7 @@ print_operand (FILE *file, rtx x, int letter)\n       if (GET_CODE (x) == REG || GET_CODE (x) == SUBREG)\n \tfprintf (file, \"%s\", reg_names[xt_true_regnum (x)]);\n       else if (GET_CODE (x) == MEM)\n-\toutput_address (XEXP (x, 0));\n+\toutput_address (GET_MODE (x), XEXP (x, 0));\n       else if (GET_CODE (x) == CONST_INT)\n \tfprintf (file, \"%ld\", INTVAL (x));\n       else"}, {"sha": "30b38267e46ba6f9444d1f9853ff7be772ae5be5", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -3713,7 +3713,7 @@ output_asm_insn (const char *templ, rtx *operands)\n \t    else if (letter == 'l')\n \t      output_asm_label (operands[opnum]);\n \t    else if (letter == 'a')\n-\t      output_address (operands[opnum]);\n+\t      output_address (VOIDmode, operands[opnum]);\n \t    else if (letter == 'c')\n \t      {\n \t\tif (CONSTANT_ADDRESS_P (operands[opnum]))\n@@ -3848,11 +3848,11 @@ output_operand (rtx x, int code ATTRIBUTE_UNUSED)\n    machine-dependent assembler syntax.  */\n \n void\n-output_address (rtx x)\n+output_address (machine_mode mode, rtx x)\n {\n   bool changed = false;\n   walk_alter_subreg (&x, &changed);\n-  targetm.asm_out.print_operand_address (asm_out_file, x);\n+  targetm.asm_out.print_operand_address (asm_out_file, mode, x);\n }\n \f\n /* Print an integer constant expression in assembler syntax."}, {"sha": "f6a576c22b8908849a432fbf46f75f0a9a4a781a", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -108,9 +108,9 @@ extern void output_asm_label (rtx);\n /* Marks SYMBOL_REFs in x as referenced through use of assemble_external.  */\n extern void mark_symbol_refs_as_used (rtx);\n \n-/* Print a memory reference operand for address X\n+/* Print a memory reference operand for address X with access mode MODE\n    using machine-dependent assembler syntax.  */\n-extern void output_address (rtx);\n+extern void output_address (machine_mode, rtx);\n \n /* Print an integer constant expression in assembler syntax.\n    Addition and subtraction are the only arithmetic"}, {"sha": "61cb14b1b52e49c64cf26dac3e484b934df1c771", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -893,7 +893,7 @@ DEFHOOK_UNDOC\n DEFHOOK_UNDOC\n (print_operand_address,\n  \"\",\n- void, (FILE *file, rtx addr),\n+ void, (FILE *file, machine_mode mode, rtx addr),\n  default_print_operand_address)\n \n /* Determine whether CODE is a valid punctuation character for the"}, {"sha": "c34b4e9ef6aee9fcf7a2264fdaad90cf17fbe25d", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -345,6 +345,7 @@ default_print_operand (FILE *stream ATTRIBUTE_UNUSED, rtx x ATTRIBUTE_UNUSED,\n \n void\n default_print_operand_address (FILE *stream ATTRIBUTE_UNUSED,\n+\t\t\t       machine_mode /*mode*/,\n \t\t\t       rtx x ATTRIBUTE_UNUSED)\n {\n #ifdef PRINT_OPERAND_ADDRESS"}, {"sha": "c9d745b00d65d855020f62d3741fbb4f2b726c29", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc8ca59eb8522a9530e155f38ac616c15412254b/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=cc8ca59eb8522a9530e155f38ac616c15412254b", "patch": "@@ -67,7 +67,7 @@ extern bool hook_callee_copies_named\n   (cumulative_args_t ca, machine_mode, const_tree, bool);\n \n extern void default_print_operand (FILE *, rtx, int);\n-extern void default_print_operand_address (FILE *, rtx);\n+extern void default_print_operand_address (FILE *, machine_mode, rtx);\n extern bool default_print_operand_punct_valid_p (unsigned char);\n extern tree default_mangle_assembler_name (const char *);\n "}]}