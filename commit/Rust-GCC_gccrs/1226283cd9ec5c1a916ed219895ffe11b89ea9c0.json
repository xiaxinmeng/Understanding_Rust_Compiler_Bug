{"sha": "1226283cd9ec5c1a916ed219895ffe11b89ea9c0", "node_id": "C_kwDOANBUbNoAKDEyMjYyODNjZDllYzVjMWE5MTZlZDIxOTg5NWZmZTExYjg5ZWE5YzA", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@adacore.com", "date": "2021-12-08T22:11:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-07T16:24:05Z"}, "message": "[Ada] Add an option to Get_Fullest_View to not recurse\n\ngcc/ada/\n\n\t* sem_util.ads, sem_util.adb (Get_Fullest_View): Add option to\n\tnot recurse and return the next-most-fullest view.", "tree": {"sha": "08824a3d3d745ae6abb5f8d7b80497661218124a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08824a3d3d745ae6abb5f8d7b80497661218124a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1226283cd9ec5c1a916ed219895ffe11b89ea9c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1226283cd9ec5c1a916ed219895ffe11b89ea9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1226283cd9ec5c1a916ed219895ffe11b89ea9c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1226283cd9ec5c1a916ed219895ffe11b89ea9c0/comments", "author": {"login": "richardkenner", "id": 56170968, "node_id": "MDQ6VXNlcjU2MTcwOTY4", "avatar_url": "https://avatars.githubusercontent.com/u/56170968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richardkenner", "html_url": "https://github.com/richardkenner", "followers_url": "https://api.github.com/users/richardkenner/followers", "following_url": "https://api.github.com/users/richardkenner/following{/other_user}", "gists_url": "https://api.github.com/users/richardkenner/gists{/gist_id}", "starred_url": "https://api.github.com/users/richardkenner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richardkenner/subscriptions", "organizations_url": "https://api.github.com/users/richardkenner/orgs", "repos_url": "https://api.github.com/users/richardkenner/repos", "events_url": "https://api.github.com/users/richardkenner/events{/privacy}", "received_events_url": "https://api.github.com/users/richardkenner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c65ca0625b426863ecd294eb9945513a6d057bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c65ca0625b426863ecd294eb9945513a6d057bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c65ca0625b426863ecd294eb9945513a6d057bc"}], "stats": {"total": 54, "additions": 32, "deletions": 22}, "files": [{"sha": "2e2ac247047f2b55290e5d8f762f2e18e5fc0707", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1226283cd9ec5c1a916ed219895ffe11b89ea9c0/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1226283cd9ec5c1a916ed219895ffe11b89ea9c0/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=1226283cd9ec5c1a916ed219895ffe11b89ea9c0", "patch": "@@ -10926,55 +10926,58 @@ package body Sem_Util is\n    ----------------------\n \n    function Get_Fullest_View\n-     (E : Entity_Id; Include_PAT : Boolean := True) return Entity_Id is\n+     (E           : Entity_Id;\n+      Include_PAT : Boolean := True;\n+      Recurse     : Boolean := True) return Entity_Id\n+   is\n+      New_E : Entity_Id := Empty;\n+\n    begin\n       --  Prevent cascaded errors\n \n       if No (E) then\n          return E;\n       end if;\n \n-      --  Strictly speaking, the recursion below isn't necessary, but\n-      --  it's both simplest and safest.\n+      --  Look at each kind of entity to see where we may need to go deeper.\n \n       case Ekind (E) is\n          when Incomplete_Kind =>\n             if From_Limited_With (E) then\n-               return Get_Fullest_View (Non_Limited_View (E), Include_PAT);\n+               New_E := Non_Limited_View (E);\n             elsif Present (Full_View (E)) then\n-               return Get_Fullest_View (Full_View (E), Include_PAT);\n+               New_E := Full_View (E);\n             elsif Ekind (E) = E_Incomplete_Subtype then\n-               return Get_Fullest_View (Etype (E));\n+               New_E := Etype (E);\n             end if;\n \n          when Private_Kind =>\n             if Present (Underlying_Full_View (E)) then\n-               return\n-                 Get_Fullest_View (Underlying_Full_View (E), Include_PAT);\n+               New_E := Underlying_Full_View (E);\n             elsif Present (Full_View (E)) then\n-               return Get_Fullest_View (Full_View (E), Include_PAT);\n+               New_E := Full_View (E);\n             elsif Etype (E) /= E then\n-               return Get_Fullest_View (Etype (E), Include_PAT);\n+               New_E := Etype (E);\n             end if;\n \n          when Array_Kind =>\n             if Include_PAT and then Present (Packed_Array_Impl_Type (E)) then\n-               return Get_Fullest_View (Packed_Array_Impl_Type (E));\n+               New_E := Packed_Array_Impl_Type (E);\n             end if;\n \n          when E_Record_Subtype =>\n             if Present (Cloned_Subtype (E)) then\n-               return Get_Fullest_View (Cloned_Subtype (E), Include_PAT);\n+               New_E := Cloned_Subtype (E);\n             end if;\n \n          when E_Class_Wide_Type =>\n-            return Get_Fullest_View (Root_Type (E), Include_PAT);\n+            New_E := Root_Type (E);\n \n          when E_Class_Wide_Subtype =>\n             if Present (Equivalent_Type (E)) then\n-               return Get_Fullest_View (Equivalent_Type (E), Include_PAT);\n+               New_E := Equivalent_Type (E);\n             elsif Present (Cloned_Subtype (E)) then\n-               return Get_Fullest_View (Cloned_Subtype (E), Include_PAT);\n+               New_E := Cloned_Subtype (E);\n             end if;\n \n          when E_Protected_Subtype\n@@ -10983,25 +10986,29 @@ package body Sem_Util is\n             | E_Task_Type\n          =>\n             if Present (Corresponding_Record_Type (E)) then\n-               return Get_Fullest_View (Corresponding_Record_Type (E),\n-                                        Include_PAT);\n+               New_E := Corresponding_Record_Type (E);\n             end if;\n \n          when E_Access_Protected_Subprogram_Type\n             | E_Anonymous_Access_Protected_Subprogram_Type\n          =>\n             if Present (Equivalent_Type (E)) then\n-               return Get_Fullest_View (Equivalent_Type (E), Include_PAT);\n+               New_E := Equivalent_Type (E);\n             end if;\n \n          when E_Access_Subtype =>\n-            return Get_Fullest_View (Base_Type (E), Include_PAT);\n+            New_E := Base_Type (E);\n \n          when others =>\n             null;\n       end case;\n \n-      return E;\n+      --  If we found a fuller view, either return it or recurse. Otherwise,\n+      --  return our input.\n+\n+      return (if    No (New_E) then E\n+              elsif Recurse then Get_Fullest_View (New_E, Include_PAT, Recurse)\n+              else  New_E);\n    end Get_Fullest_View;\n \n    ------------------------"}, {"sha": "0006cf9ac51d09c1cf638c0b9eee83b9447be713", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1226283cd9ec5c1a916ed219895ffe11b89ea9c0/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1226283cd9ec5c1a916ed219895ffe11b89ea9c0/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=1226283cd9ec5c1a916ed219895ffe11b89ea9c0", "patch": "@@ -1354,10 +1354,13 @@ package Sem_Util is\n    --    CRec_Typ  - the corresponding record type of the full views\n \n    function Get_Fullest_View\n-     (E : Entity_Id; Include_PAT : Boolean := True) return Entity_Id;\n+     (E           : Entity_Id;\n+      Include_PAT : Boolean := True;\n+      Recurse     : Boolean := True) return Entity_Id;\n    --  Get the fullest possible view of E, looking through private, limited,\n    --  packed array and other implementation types. If Include_PAT is False,\n-   --  don't look inside packed array types.\n+   --  don't look inside packed array types. If Recurse is False, just\n+   --  go down one level (so it's no longer the \"fullest\" view).\n \n    function Has_Access_Values (T : Entity_Id) return Boolean;\n    --  Returns true if the underlying type of T is an access type, or has a"}]}