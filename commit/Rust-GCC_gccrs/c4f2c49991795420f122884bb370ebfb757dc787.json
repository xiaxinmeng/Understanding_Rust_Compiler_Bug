{"sha": "c4f2c49991795420f122884bb370ebfb757dc787", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRmMmM0OTk5MTc5NTQyMGYxMjI4ODRiYjM3MGViZmI3NTdkYzc4Nw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-01-05T22:11:21Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-01-05T22:11:21Z"}, "message": "cse.c: Fix formatting.\n\n\t* cse.c: Fix formatting.\n\t* dwarf2asm.c: Likewise.\n\t* dwarf2out.c: Likewise.\n\t* explow.c: Likewise.\n\t* expmed.c: Likewise.\n\t* function.c: Likewise.\n\t* gcov.c: Likewise.\n\t* gencheck.c: Likewise.\n\t* genrecog.c: Likewise.\n\t* ggc-common.c: Likewise.\n\t* ggc-page.c: Likewise.\n\t* global.c: Likewise.\n\nFrom-SVN: r48570", "tree": {"sha": "c82a399277d5efe697a879308c7e2870fbb15a79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c82a399277d5efe697a879308c7e2870fbb15a79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4f2c49991795420f122884bb370ebfb757dc787", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4f2c49991795420f122884bb370ebfb757dc787", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4f2c49991795420f122884bb370ebfb757dc787", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4f2c49991795420f122884bb370ebfb757dc787/comments", "author": null, "committer": null, "parents": [{"sha": "cf0d9408617d653d4b53dd80e638ad0f4efe5161", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0d9408617d653d4b53dd80e638ad0f4efe5161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0d9408617d653d4b53dd80e638ad0f4efe5161"}], "stats": {"total": 97, "additions": 56, "deletions": 41}, "files": [{"sha": "6746ed0f262600528f86dfc3e1f515472365b766", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4f2c49991795420f122884bb370ebfb757dc787", "patch": "@@ -1,3 +1,18 @@\n+2002-01-05  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* cse.c: Fix formatting.\n+\t* dwarf2asm.c: Likewise.\n+\t* dwarf2out.c: Likewise.\n+\t* explow.c: Likewise.\n+\t* expmed.c: Likewise.\n+\t* function.c: Likewise.\n+\t* gcov.c: Likewise.\n+\t* gencheck.c: Likewise.\n+\t* genrecog.c: Likewise.\n+\t* ggc-common.c: Likewise.\n+\t* ggc-page.c: Likewise.\n+\t* global.c: Likewise.\n+\n 2002-01-05  Kazu Hirata  <kazu@hxi.com>\n \n \t* combine.c: Fix formatting."}, {"sha": "6cecb1c40d00efa6f44cfd432937e56742ca75d0", "filename": "gcc/cse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=c4f2c49991795420f122884bb370ebfb757dc787", "patch": "@@ -1,6 +1,6 @@\n /* Common subexpression elimination for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1989,7 +1989,7 @@ remove_invalid_refs (regno)\n       {\n \tnext = p->next_same_hash;\n \tif (GET_CODE (p->exp) != REG\n-\t    && refers_to_regno_p (regno, regno + 1, p->exp, (rtx*)0))\n+\t    && refers_to_regno_p (regno, regno + 1, p->exp, (rtx*) 0))\n \t  remove_from_table (p, i);\n       }\n }\n@@ -2019,7 +2019,7 @@ remove_invalid_subreg_refs (regno, offset, mode)\n \t\t|| (((SUBREG_BYTE (exp)\n \t\t      + (GET_MODE_SIZE (GET_MODE (exp)) - 1)) >= offset)\n \t\t    && SUBREG_BYTE (exp) <= end))\n-\t    && refers_to_regno_p (regno, regno + 1, p->exp, (rtx*)0))\n+\t    && refers_to_regno_p (regno, regno + 1, p->exp, (rtx*) 0))\n \t  remove_from_table (p, i);\n       }\n }"}, {"sha": "2222ecd4b3e7ac0c31c227f6228a867c48c31a4c", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=c4f2c49991795420f122884bb370ebfb757dc787", "patch": "@@ -1,5 +1,5 @@\n /* Dwarf2 assembler output helper routines.\n-   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -74,7 +74,7 @@ dw2_asm_output_data VPARAMS ((int size, unsigned HOST_WIDE_INT value,\n   VA_FIXEDARG (ap, const char *, comment);\n \n   if (size * 8 < HOST_BITS_PER_WIDE_INT)\n-    value &= ~(~(unsigned HOST_WIDE_INT)0 << (size * 8));\n+    value &= ~(~(unsigned HOST_WIDE_INT) 0 << (size * 8));\n \n   dw2_assemble_integer (size, GEN_INT (value));\n "}, {"sha": "4a94154549497f8df740191db7541b21c1725495", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c4f2c49991795420f122884bb370ebfb757dc787", "patch": "@@ -6195,7 +6195,7 @@ output_loc_list (list_head)\n   if (strcmp (curr->section, \".text\") == 0)\n     {\n       /* dw2_asm_output_data will mask off any extra bits in the ~0.  */\n-      dw2_asm_output_data (DWARF2_ADDR_SIZE, ~(unsigned HOST_WIDE_INT)0,\n+      dw2_asm_output_data (DWARF2_ADDR_SIZE, ~(unsigned HOST_WIDE_INT) 0,\n \t\t\t   \"Location list base address specifier fake entry\");\n       dw2_asm_output_offset (DWARF2_ADDR_SIZE, curr->section,\n \t\t\t     \"Location list base address specifier base\");"}, {"sha": "8f9e0bf427197ee1d2db95ec04d3d4aa1253f223", "filename": "gcc/explow.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=c4f2c49991795420f122884bb370ebfb757dc787", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines for manipulating rtx's in semantically interesting ways.\n    Copyright (C) 1987, 1991, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1133,7 +1133,7 @@ optimize_save_area_alloca (insns)\n \t\t      break;\n \n \t\t  if (srch == NULL_RTX)\n-\t\t    abort();\n+\t\t    abort ();\n \n \t\t  XEXP (srch, 1) = XEXP (note, 1);\n \t\t}"}, {"sha": "da9c5a9872b48e5dbb01e0498bf8acd4d1e28f97", "filename": "gcc/expmed.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=c4f2c49991795420f122884bb370ebfb757dc787", "patch": "@@ -1,7 +1,7 @@\n /* Medium-level subroutines: convert bit-field store and extract\n    and shifts, multiplies and divides to rtl instructions.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1209,8 +1209,8 @@ extract_bit_field (str_rtx, bitsize, bitnum, unsignedp,\n   if (int_mode == BLKmode)\n     int_mode = int_mode_for_mode (mode);\n   if (int_mode == BLKmode)\n-    abort();    /* Should probably push op0 out to memory and then\n-\t\t   do a load.  */\n+    abort ();    /* Should probably push op0 out to memory and then\n+\t\t    do a load.  */\n \n   /* OFFSET is the number of words or bytes (UNIT says which)\n      from STR_RTX to the first word or byte containing part of the field.  */\n@@ -2637,7 +2637,7 @@ choose_multiplier (d, n, precision, multiplier_ptr, post_shift_ptr, lgup_ptr)\n     abort ();\n   /* assert that mlow < mhigh.  */\n   if (! (mlow_hi < mhigh_hi || (mlow_hi == mhigh_hi && mlow_lo < mhigh_lo)))\n-    abort();\n+    abort ();\n \n   /* If precision == N, then mlow, mhigh exceed 2^N\n      (but they do not exceed 2^(N+1)).  */\n@@ -4702,18 +4702,18 @@ do_cmp_and_jump (arg1, arg2, op, mode, label)\n \t     that's the only equality operations we do */\n \tcase EQ:\n \t  if (arg2 != const0_rtx || mode != GET_MODE(arg1))\n-\t    abort();\n+\t    abort ();\n \t  do_jump_by_parts_equality_rtx (arg1, label2, label);\n \t  break;\n \n \tcase NE:\n \t  if (arg2 != const0_rtx || mode != GET_MODE(arg1))\n-\t    abort();\n+\t    abort ();\n \t  do_jump_by_parts_equality_rtx (arg1, label, label2);\n \t  break;\n \n \tdefault:\n-\t  abort();\n+\t  abort ();\n \t}\n \n       emit_label (label2);"}, {"sha": "12300f33714ca554f57b0145de5dc18f268ba27a", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c4f2c49991795420f122884bb370ebfb757dc787", "patch": "@@ -1,6 +1,6 @@\n /* Expands front end tree to back end RTL for GNU C-Compiler\n    Copyright (C) 1987, 1988, 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -726,7 +726,7 @@ assign_stack_temp_for_type (mode, size, keep, type)\n \t and round it now.  We also make sure ALIGNMENT is at least\n \t BIGGEST_ALIGNMENT.  */\n       if (mode == BLKmode && align < BIGGEST_ALIGNMENT)\n-\tabort();\n+\tabort ();\n       p->slot = assign_stack_local (mode,\n \t\t\t\t    (mode == BLKmode\n \t\t\t\t     ? CEIL_ROUND (size, align / BITS_PER_UNIT)"}, {"sha": "3bb2ce19e2fbdffe8689ccd24907cff2d4960ce4", "filename": "gcc/gcov.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=c4f2c49991795420f122884bb370ebfb757dc787", "patch": "@@ -1,7 +1,7 @@\n /* Gcov.c: prepend line execution counts and branch probabilities to a\n    source file.\n    Copyright (C) 1990, 1991, 1992, 1993, 1994, 1996, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by James E. Wilson of Cygnus Support.\n    Mangled by Bob Manson of Cygnus Support.\n \n@@ -615,7 +615,7 @@ create_program_flow_graph (bptr)\n \t{\n \t  gcov_type tmp_count = 0;\n \t  if (da_file && __read_gcov_type (&tmp_count, da_file, 8))\n-\t    abort();\n+\t    abort ();\n \n \t  arcptr->arc_count = tmp_count;\n \t  arcptr->count_valid = 1;\n@@ -760,7 +760,7 @@ read_files ()\n   /* Read and ignore the first word of the .da file, which is the count of\n      how many numbers follow.  */\n   if (da_file && __read_long (&total, da_file, 8))\n-    abort();\n+    abort ();\n \n   while (! feof (bbg_file))\n     {\n@@ -885,7 +885,7 @@ scan_for_source_files ()\n       else if (line_num < 0)\n \t{\n \t  /* Don't know what this is, but it's garbage.  */\n-\t  abort();\n+\t  abort ();\n \t}\n     }\n }"}, {"sha": "9eda355fa37253a9fd47425e92570e9dd3135865", "filename": "gcc/gencheck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fgencheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fgencheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencheck.c?ref=c4f2c49991795420f122884bb370ebfb757dc787", "patch": "@@ -1,5 +1,5 @@\n /* Generate check macros for tree codes.\n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -27,7 +27,7 @@ static const char *const tree_codes[] = {\n #include \"tree.def\"\n #include \"c-common.def\"\n #include \"gencheck.h\"\n-(char*)0\n+(char*) 0\n };\n \n static void usage PARAMS ((void));"}, {"sha": "136422c3e4f3c15ed1d9a1323d7c5fb7547502b2", "filename": "gcc/genrecog.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=c4f2c49991795420f122884bb370ebfb757dc787", "patch": "@@ -1,6 +1,6 @@\n /* Generate code from machine description to recognize rtl as insns.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -1258,7 +1258,7 @@ maybe_both_true (d1, d2, toplevel)\n   if (cmp != 0)\n     {\n       if (toplevel)\n-\tabort();\n+\tabort ();\n \n       /* If the d2->position was lexically lower, swap.  */\n       if (cmp > 0)"}, {"sha": "77614ff8b5b03d804944dc3c3f75332799f78a9b", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=c4f2c49991795420f122884bb370ebfb757dc787", "patch": "@@ -1,5 +1,5 @@\n /* Simple garbage collection for the GNU compiler.\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -165,7 +165,7 @@ ggc_del_root (base)\n       x = x->next;\n     }\n \n-  abort();\n+  abort ();\n }\n \n /* Add a hash table to be scanned when all roots have been processed.  We"}, {"sha": "ad3f815b9446b5dae6e04c7edbcc71b0240274c7", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=c4f2c49991795420f122884bb370ebfb757dc787", "patch": "@@ -1,5 +1,5 @@\n /* \"Bag-of-pages\" garbage collector for the GNU compiler.\n-   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -535,7 +535,7 @@ static inline size_t\n page_group_index (allocation, page)\n      char *allocation, *page;\n {\n-  return (size_t)(page - allocation) >> G.lg_pagesize;\n+  return (size_t) (page - allocation) >> G.lg_pagesize;\n }\n \n /* Set and clear the in_use bit for this page in the page group.  */\n@@ -654,7 +654,7 @@ alloc_page (order)\n \talloc_size = entry_size + G.pagesize - 1;\n       allocation = xmalloc (alloc_size);\n \n-      page = (char *)(((size_t) allocation + G.pagesize - 1) & -G.pagesize);\n+      page = (char *) (((size_t) allocation + G.pagesize - 1) & -G.pagesize);\n       head_slop = page - allocation;\n       if (multiple_pages)\n \ttail_slop = ((size_t) allocation + alloc_size) & (G.pagesize - 1);"}, {"sha": "99f54caf045252cbde543e6d00e24036408a74f6", "filename": "gcc/global.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4f2c49991795420f122884bb370ebfb757dc787/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=c4f2c49991795420f122884bb370ebfb757dc787", "patch": "@@ -1,6 +1,6 @@\n /* Allocate registers for pseudo-registers that span basic blocks.\n    Copyright (C) 1987, 1988, 1991, 1994, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -168,12 +168,12 @@ static int allocno_row_words;\n /* Two macros to test or store 1 in an element of `conflicts'.  */\n \n #define CONFLICTP(I, J) \\\n- (conflicts[(I) * allocno_row_words + (unsigned)(J) / INT_BITS]\t\\\n-  & ((INT_TYPE) 1 << ((unsigned)(J) % INT_BITS)))\n+ (conflicts[(I) * allocno_row_words + (unsigned) (J) / INT_BITS]\t\\\n+  & ((INT_TYPE) 1 << ((unsigned) (J) % INT_BITS)))\n \n #define SET_CONFLICT(I, J) \\\n- (conflicts[(I) * allocno_row_words + (unsigned)(J) / INT_BITS]\t\\\n-  |= ((INT_TYPE) 1 << ((unsigned)(J) % INT_BITS)))\n+ (conflicts[(I) * allocno_row_words + (unsigned) (J) / INT_BITS]\t\\\n+  |= ((INT_TYPE) 1 << ((unsigned) (J) % INT_BITS)))\n \n /* For any allocno set in ALLOCNO_SET, set ALLOCNO to that allocno,\n    and execute CODE.  */\n@@ -248,16 +248,16 @@ static INT_TYPE *allocnos_live;\n    a bit vector indexed by allocno.  */\n \n #define ALLOCNO_LIVE_P(I)\t\t\t\t\\\n-  (allocnos_live[(unsigned)(I) / INT_BITS]\t\t\\\n-   & ((INT_TYPE) 1 << ((unsigned)(I) % INT_BITS)))\n+  (allocnos_live[(unsigned) (I) / INT_BITS]\t\t\\\n+   & ((INT_TYPE) 1 << ((unsigned) (I) % INT_BITS)))\n \n #define SET_ALLOCNO_LIVE(I)\t\t\t\t\\\n-  (allocnos_live[(unsigned)(I) / INT_BITS]\t\t\\\n-     |= ((INT_TYPE) 1 << ((unsigned)(I) % INT_BITS)))\n+  (allocnos_live[(unsigned) (I) / INT_BITS]\t\t\\\n+     |= ((INT_TYPE) 1 << ((unsigned) (I) % INT_BITS)))\n \n #define CLEAR_ALLOCNO_LIVE(I)\t\t\t\t\\\n-  (allocnos_live[(unsigned)(I) / INT_BITS]\t\t\\\n-     &= ~((INT_TYPE) 1 << ((unsigned)(I) % INT_BITS)))\n+  (allocnos_live[(unsigned) (I) / INT_BITS]\t\t\\\n+     &= ~((INT_TYPE) 1 << ((unsigned) (I) % INT_BITS)))\n \n /* This is turned off because it doesn't work right for DImode.\n    (And it is only used for DImode, so the other cases are worthless.)"}]}