{"sha": "7c960b3dffaa649a5d7d1a1fc71ed14804dfc445", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M5NjBiM2RmZmFhNjQ5YTVkN2QxYTFmYzcxZWQxNDgwNGRmYzQ0NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-30T23:26:13Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-30T23:26:13Z"}, "message": "6.cc: New.\n\n2004-01-30  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/21_strings/basic_string/cons/char/6.cc: New.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/6.cc: New.\n\t* testsuite/performance/21_strings/string_cons_input_iterator.cc:\n\tNew.\n\nFrom-SVN: r77006", "tree": {"sha": "a7d5a0b50bf1baa62c349d6c97e8ecd27ba9a076", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7d5a0b50bf1baa62c349d6c97e8ecd27ba9a076"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c960b3dffaa649a5d7d1a1fc71ed14804dfc445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c960b3dffaa649a5d7d1a1fc71ed14804dfc445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c960b3dffaa649a5d7d1a1fc71ed14804dfc445", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c960b3dffaa649a5d7d1a1fc71ed14804dfc445/comments", "author": null, "committer": null, "parents": [{"sha": "bd5bd7ac814586764703bfafe74b3b123f03a202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd5bd7ac814586764703bfafe74b3b123f03a202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd5bd7ac814586764703bfafe74b3b123f03a202"}], "stats": {"total": 176, "additions": 176, "deletions": 0}, "files": [{"sha": "e4b787bea99b8f0a10ae89053161afbf8a5d17cb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c960b3dffaa649a5d7d1a1fc71ed14804dfc445/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c960b3dffaa649a5d7d1a1fc71ed14804dfc445/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7c960b3dffaa649a5d7d1a1fc71ed14804dfc445", "patch": "@@ -1,3 +1,9 @@\n+2004-01-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/21_strings/basic_string/cons/char/6.cc: New.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/6.cc: New.\n+\t* testsuite/performance/21_strings/string_cons_input_iterator.cc: New.\n+\t\n 2004-01-30  Felix Yen  <fwy@alumni.brown.edu>\n \n \t* testsuite/performance/20_util/allocator_thread.cc (do_loop):"}, {"sha": "a61323acfc7fe699152efbf7ce2dcfe98429073a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/6.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c960b3dffaa649a5d7d1a1fc71ed14804dfc445/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c960b3dffaa649a5d7d1a1fc71ed14804dfc445/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F6.cc?ref=7c960b3dffaa649a5d7d1a1fc71ed14804dfc445", "patch": "@@ -0,0 +1,56 @@\n+// 2004-01-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.1 basic_string constructors.\n+\n+#include <iterator>\n+#include <sstream>\n+#include <cstdlib>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+string data(long len)\n+{\n+  string ret;\n+  for (long i = 0; i < len; ++i)\n+    ret.push_back('a' + rand() % 26);\n+  return ret;\n+}\n+\n+void test01(int iter)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  for (long i = 0, j = 1; i < iter; ++i, j *= 3)\n+    {\n+      istringstream isstr(data(j));\n+\n+      string str((istreambuf_iterator<char>(isstr)),\n+\t\t istreambuf_iterator<char>());\n+      VERIFY( str == isstr.str() );\n+    }\n+}\n+\n+int main()\n+{\n+  test01(13);\n+  return 0;\n+}"}, {"sha": "fab4aa93a0e4d3a02112bc8ba222a7d2407403c3", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/6.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c960b3dffaa649a5d7d1a1fc71ed14804dfc445/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c960b3dffaa649a5d7d1a1fc71ed14804dfc445/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2F6.cc?ref=7c960b3dffaa649a5d7d1a1fc71ed14804dfc445", "patch": "@@ -0,0 +1,56 @@\n+// 2004-01-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 21.3.1 basic_string constructors.\n+\n+#include <iterator>\n+#include <sstream>\n+#include <cstdlib>\n+#include <testsuite_hooks.h>\n+\n+using namespace std;\n+\n+wstring data(long len)\n+{\n+  wstring ret;\n+  for (long i = 0; i < len; ++i)\n+    ret.push_back(L'a' + rand() % 26);\n+  return ret;\n+}\n+\n+void test01(int iter)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  for (long i = 0, j = 1; i < iter; ++i, j *= 3)\n+    {\n+      wistringstream isstr(data(j));\n+\n+      wstring str((istreambuf_iterator<wchar_t>(isstr)),\n+\t\t  istreambuf_iterator<wchar_t>());\n+      VERIFY( str == isstr.str() );\n+    }\n+}\n+\n+int main()\n+{\n+  test01(13);\n+  return 0;\n+}"}, {"sha": "655c85fd970973472fe7c186a020a12a9a046a3e", "filename": "libstdc++-v3/testsuite/performance/21_strings/string_cons_input_iterator.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c960b3dffaa649a5d7d1a1fc71ed14804dfc445/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F21_strings%2Fstring_cons_input_iterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c960b3dffaa649a5d7d1a1fc71ed14804dfc445/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F21_strings%2Fstring_cons_input_iterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F21_strings%2Fstring_cons_input_iterator.cc?ref=7c960b3dffaa649a5d7d1a1fc71ed14804dfc445", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <iterator>\n+#include <sstream>\n+\n+#include <testsuite_performance.h>\n+\n+void benchmark(long len)\n+{\n+  using namespace std;\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  istringstream isstr(string(len, 'a'));\n+  \n+  start_counters(time, resource);\n+  string str((istreambuf_iterator<char>(isstr)),\n+\t     istreambuf_iterator<char>());\n+  stop_counters(time, resource);\n+\n+  report_performance(__FILE__, \"\", time, resource);\n+  clear_counters(time, resource);\n+}\n+\n+int main()\n+{\n+  benchmark(500000);\n+  benchmark(5000000);\n+  benchmark(50000000);\n+  return 0;\n+}"}]}