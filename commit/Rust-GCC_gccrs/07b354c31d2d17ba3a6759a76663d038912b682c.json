{"sha": "07b354c31d2d17ba3a6759a76663d038912b682c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdiMzU0YzMxZDJkMTdiYTNhNjc1OWE3NjY2M2QwMzg5MTJiNjgyYw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-04T23:17:20Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-04T23:17:20Z"}, "message": "Fix name resolution for generic trait references\n\nThe canonical path for a traits does not include the generic arguments\nbut they must be resolved. This ensures we can actually resolve a generic\ntrait reference to the correct trait.", "tree": {"sha": "286e56fbaa133638fb1ba611ddea3c17f4ab3d59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/286e56fbaa133638fb1ba611ddea3c17f4ab3d59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07b354c31d2d17ba3a6759a76663d038912b682c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b354c31d2d17ba3a6759a76663d038912b682c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07b354c31d2d17ba3a6759a76663d038912b682c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b354c31d2d17ba3a6759a76663d038912b682c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c56ecf32c0daeb87ff61e33076a3b1c8c3fcb49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c56ecf32c0daeb87ff61e33076a3b1c8c3fcb49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c56ecf32c0daeb87ff61e33076a3b1c8c3fcb49"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "fab70b5916aec77522e9b58cf9df8b268c855385", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07b354c31d2d17ba3a6759a76663d038912b682c/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07b354c31d2d17ba3a6759a76663d038912b682c/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=07b354c31d2d17ba3a6759a76663d038912b682c", "patch": "@@ -243,8 +243,8 @@ Resolver::lookup_resolved_name (NodeId refId, NodeId *defId)\n void\n Resolver::insert_resolved_type (NodeId refId, NodeId defId)\n {\n-  auto it = resolved_types.find (refId);\n-  rust_assert (it == resolved_types.end ());\n+  // auto it = resolved_types.find (refId);\n+  // rust_assert (it == resolved_types.end ());\n \n   resolved_types[refId] = defId;\n   get_type_scope ().append_reference_for_def (refId, defId);\n@@ -560,17 +560,15 @@ ResolvePath::resolve_path (AST::QualifiedPathInExpression *expr)\n   ResolveType::go (root_segment.get_type ().get (), root_segment.get_node_id (),\n \t\t   canonicalize_type_with_generics);\n \n-  bool canonicalize_type_args = true;\n   bool type_resolve_generic_args = true;\n-\n   CanonicalPath impl_type_seg\n     = ResolveTypeToCanonicalPath::resolve (*root_segment.get_type ().get (),\n-\t\t\t\t\t   canonicalize_type_args,\n+\t\t\t\t\t   canonicalize_type_with_generics,\n \t\t\t\t\t   type_resolve_generic_args);\n \n   CanonicalPath trait_type_seg\n     = ResolveTypeToCanonicalPath::resolve (root_segment.get_as_type_path (),\n-\t\t\t\t\t   canonicalize_type_args,\n+\t\t\t\t\t   canonicalize_type_with_generics,\n \t\t\t\t\t   type_resolve_generic_args);\n   CanonicalPath root_seg_path\n     = TraitImplProjection::resolve (root_segment.get_node_id (), trait_type_seg,\n@@ -756,31 +754,30 @@ ResolveRelativeTypePath::resolve_qual_seg (AST::QualifiedPathType &seg,\n \t\t     seg.as_string ().c_str ());\n       return false;\n     }\n+  bool include_generic_args_in_path = false;\n \n-  bool canonicalize_type_with_generics = true;\n   NodeId type_resolved_node\n-    = ResolveType::go (seg.get_type ().get (), seg.get_node_id (),\n-\t\t       canonicalize_type_with_generics);\n+    = ResolveType::go (seg.get_type ().get (), seg.get_node_id ());\n   if (type_resolved_node == UNKNOWN_NODEID)\n     return false;\n \n   CanonicalPath impl_type_seg\n-    = ResolveTypeToCanonicalPath::resolve (*seg.get_type ().get ());\n+    = ResolveTypeToCanonicalPath::resolve (*seg.get_type ().get (),\n+\t\t\t\t\t   include_generic_args_in_path);\n   if (!seg.has_as_clause ())\n     {\n       result = result.append (impl_type_seg);\n       return true;\n     }\n \n   NodeId trait_resolved_node\n-    = ResolveType::go (&seg.get_as_type_path (), seg.get_node_id (),\n-\t\t       canonicalize_type_with_generics);\n-\n+    = ResolveType::go (&seg.get_as_type_path (), seg.get_node_id ());\n   if (trait_resolved_node == UNKNOWN_NODEID)\n     return false;\n \n   CanonicalPath trait_type_seg\n-    = ResolveTypeToCanonicalPath::resolve (seg.get_as_type_path ());\n+    = ResolveTypeToCanonicalPath::resolve (seg.get_as_type_path (),\n+\t\t\t\t\t   include_generic_args_in_path);\n   CanonicalPath projection\n     = TraitImplProjection::resolve (seg.get_node_id (), trait_type_seg,\n \t\t\t\t    impl_type_seg);"}]}