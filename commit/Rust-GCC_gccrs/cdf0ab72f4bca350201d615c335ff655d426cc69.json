{"sha": "cdf0ab72f4bca350201d615c335ff655d426cc69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RmMGFiNzJmNGJjYTM1MDIwMWQ2MTVjMzM1ZmY2NTVkNDI2Y2M2OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-06-10T14:10:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-06-10T14:10:57Z"}, "message": "re PR middle-end/61456 (Bogus \"may be used uninitialized\" warning)\n\n2014-06-10  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/61456\n\t* tree-ssa-alias.c (nonoverlapping_component_refs_of_decl_p):\n\tDo not use the main variant for the type comparison.\n\t(ncr_compar): Likewise.\n\t(nonoverlapping_component_refs_p): Likewise.\n\n\t* g++.dg/opt/pr61456.C: New testcase.\n\nFrom-SVN: r211411", "tree": {"sha": "fbc36a8e81a99186a057a1438ffb4e9d47919bfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbc36a8e81a99186a057a1438ffb4e9d47919bfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdf0ab72f4bca350201d615c335ff655d426cc69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdf0ab72f4bca350201d615c335ff655d426cc69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdf0ab72f4bca350201d615c335ff655d426cc69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdf0ab72f4bca350201d615c335ff655d426cc69/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1ab971761afd490ca8a6c56a3aae4e8a0a3c0f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ab971761afd490ca8a6c56a3aae4e8a0a3c0f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ab971761afd490ca8a6c56a3aae4e8a0a3c0f9"}], "stats": {"total": 61, "additions": 49, "deletions": 12}, "files": [{"sha": "7d37ddbcb4d5157719a8d45eaf1b8954c455b87e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf0ab72f4bca350201d615c335ff655d426cc69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf0ab72f4bca350201d615c335ff655d426cc69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdf0ab72f4bca350201d615c335ff655d426cc69", "patch": "@@ -1,3 +1,11 @@\n+2014-06-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/61456\n+\t* tree-ssa-alias.c (nonoverlapping_component_refs_of_decl_p):\n+\tDo not use the main variant for the type comparison.\n+\t(ncr_compar): Likewise.\n+\t(nonoverlapping_component_refs_p): Likewise.\n+\n 2014-06-10  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_save_or_restore_fprs): Fix"}, {"sha": "f3f1162a5a0c024d904c9fdfef79b3aa55452c45", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf0ab72f4bca350201d615c335ff655d426cc69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf0ab72f4bca350201d615c335ff655d426cc69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cdf0ab72f4bca350201d615c335ff655d426cc69", "patch": "@@ -1,3 +1,8 @@\n+2014-06-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/61456\n+\t* g++.dg/opt/pr61456.C: New testcase.\n+\n 2014-06-10  Dominique d'Humieres <dominiq@lps.ens.fr>\n \t    Mikael Morin <mikael@gcc.gnu.org>\n "}, {"sha": "14a118b5720e1639f6a3bbbebe35a1d64e94b9c6", "filename": "gcc/testsuite/g++.dg/opt/pr61456.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf0ab72f4bca350201d615c335ff655d426cc69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr61456.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf0ab72f4bca350201d615c335ff655d426cc69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr61456.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr61456.C?ref=cdf0ab72f4bca350201d615c335ff655d426cc69", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++11 -Werror=uninitialized\" }\n+\n+int rand ();\n+\n+class Funcs\n+{\n+public:\n+    int *f1 ();\n+    int *f2 ();\n+};\n+typedef decltype (&Funcs::f1) pfunc;\n+\n+static int Set (Funcs * f, const pfunc & fp)\n+{\n+  (f->*fp) ();\n+}\n+\n+void\n+Foo ()\n+{\n+  pfunc fp = &Funcs::f1;\n+  if (rand ())\n+    fp = &Funcs::f2;\n+  Set (0, fp);\n+}"}, {"sha": "5cc9cb58f750994c782b6131626d20a9b979708c", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdf0ab72f4bca350201d615c335ff655d426cc69/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdf0ab72f4bca350201d615c335ff655d426cc69/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=cdf0ab72f4bca350201d615c335ff655d426cc69", "patch": "@@ -835,8 +835,8 @@ nonoverlapping_component_refs_of_decl_p (tree ref1, tree ref2)\n       /* ??? We cannot simply use the type of operand #0 of the refs here\n \t as the Fortran compiler smuggles type punning into COMPONENT_REFs\n \t for common blocks instead of using unions like everyone else.  */\n-      tree type1 = TYPE_MAIN_VARIANT (DECL_CONTEXT (field1));\n-      tree type2 = TYPE_MAIN_VARIANT (DECL_CONTEXT (field2));\n+      tree type1 = DECL_CONTEXT (field1);\n+      tree type2 = DECL_CONTEXT (field2);\n \n       /* We cannot disambiguate fields in a union or qualified union.  */\n       if (type1 != type2 || TREE_CODE (type1) != RECORD_TYPE)\n@@ -866,10 +866,8 @@ ncr_compar (const void *field1_, const void *field2_)\n {\n   const_tree field1 = *(const_tree *) const_cast <void *>(field1_);\n   const_tree field2 = *(const_tree *) const_cast <void *>(field2_);\n-  unsigned int uid1\n-    = TYPE_UID (TYPE_MAIN_VARIANT (DECL_FIELD_CONTEXT (field1)));\n-  unsigned int uid2\n-    = TYPE_UID (TYPE_MAIN_VARIANT (DECL_FIELD_CONTEXT (field2)));\n+  unsigned int uid1 = TYPE_UID (DECL_FIELD_CONTEXT (field1));\n+  unsigned int uid2 = TYPE_UID (DECL_FIELD_CONTEXT (field2));\n   if (uid1 < uid2)\n     return -1;\n   else if (uid1 > uid2)\n@@ -893,7 +891,7 @@ nonoverlapping_component_refs_p (const_tree x, const_tree y)\n   while (TREE_CODE (x) == COMPONENT_REF)\n     {\n       tree field = TREE_OPERAND (x, 1);\n-      tree type = TYPE_MAIN_VARIANT (DECL_FIELD_CONTEXT (field));\n+      tree type = DECL_FIELD_CONTEXT (field);\n       if (TREE_CODE (type) == RECORD_TYPE)\n \tfieldsx.safe_push (field);\n       x = TREE_OPERAND (x, 0);\n@@ -904,7 +902,7 @@ nonoverlapping_component_refs_p (const_tree x, const_tree y)\n   while (TREE_CODE (y) == COMPONENT_REF)\n     {\n       tree field = TREE_OPERAND (y, 1);\n-      tree type = TYPE_MAIN_VARIANT (DECL_FIELD_CONTEXT (field));\n+      tree type = DECL_FIELD_CONTEXT (field);\n       if (TREE_CODE (type) == RECORD_TYPE)\n \tfieldsy.safe_push (TREE_OPERAND (y, 1));\n       y = TREE_OPERAND (y, 0);\n@@ -915,8 +913,8 @@ nonoverlapping_component_refs_p (const_tree x, const_tree y)\n   /* Most common case first.  */\n   if (fieldsx.length () == 1\n       && fieldsy.length () == 1)\n-    return ((TYPE_MAIN_VARIANT (DECL_FIELD_CONTEXT (fieldsx[0]))\n-\t     == TYPE_MAIN_VARIANT (DECL_FIELD_CONTEXT (fieldsy[0])))\n+    return ((DECL_FIELD_CONTEXT (fieldsx[0])\n+\t     == DECL_FIELD_CONTEXT (fieldsy[0]))\n \t    && fieldsx[0] != fieldsy[0]\n \t    && !(DECL_BIT_FIELD (fieldsx[0]) && DECL_BIT_FIELD (fieldsy[0])));\n \n@@ -949,8 +947,8 @@ nonoverlapping_component_refs_p (const_tree x, const_tree y)\n     {\n       const_tree fieldx = fieldsx[i];\n       const_tree fieldy = fieldsy[j];\n-      tree typex = TYPE_MAIN_VARIANT (DECL_FIELD_CONTEXT (fieldx));\n-      tree typey = TYPE_MAIN_VARIANT (DECL_FIELD_CONTEXT (fieldy));\n+      tree typex = DECL_FIELD_CONTEXT (fieldx);\n+      tree typey = DECL_FIELD_CONTEXT (fieldy);\n       if (typex == typey)\n \t{\n \t  /* We're left with accessing different fields of a structure,"}]}