{"sha": "9ff420f135551a6d3582b986997ef78ac6762f56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZmNDIwZjEzNTU1MWE2ZDM1ODJiOTg2OTk3ZWY3OGFjNjc2MmY1Ng==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2008-04-03T05:41:57Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2008-04-03T05:41:57Z"}, "message": "tree-inline.c (copy_generic_body, [...]): Export.\n\n2007-03-09  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* tree-inline.c (copy_generic_body, copy_decl_no_change): Export.\n\t(remap_block): Call id->transform_lang_insert_block instead\n\tof langhook.\n\t(optimize_inline_calls, unsave_expr_now, tree_function_versioning):\n\tSet id.transform_lang_insert_block to NULL.\n\t(clone_body): Move to cp/optimize.c\n\t* tree-inline.h (struct copy_body_data): Change\n\ttransform_lang_insert_block to function pointer.\n\t(copy_generic_body, copy_decl_no_change): Export.\n\t* langhooks.h (struct lang_hooks_for_decls): Kill insert_block.\n\t* langhooks-def.h (LANG_HOOKS_INSERT_BLOCK): Kill.\n\t(LANG_HOOKS_DECLS): Remove LANG_HOOKS_INSERT_BLOCK.\n\n\t* c-tree.h (insert_block): Kill.\n\t* c-decl.c (insert_block): Kill.\n\ncp:\n2007-03-09  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* optimize.c (clone_body): New, from tree-inline.c.\n\nada:\n2007-03-09  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* gigi.h (insert_block): Kill.\n\t* utils.c (insert_block): Kill.\n\njava:\n2007-03-09  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* java-tree.h (insert_block): Kill.\n\t* decl.c (insert_block): Kill.\n\nfortran:\n2007-03-09  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* f95-lang.c (insert_block): Kill.\n\nFrom-SVN: r133861", "tree": {"sha": "452e7c06ff6f1f3a8357898f7dcdc5ae66011637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/452e7c06ff6f1f3a8357898f7dcdc5ae66011637"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ff420f135551a6d3582b986997ef78ac6762f56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff420f135551a6d3582b986997ef78ac6762f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ff420f135551a6d3582b986997ef78ac6762f56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ff420f135551a6d3582b986997ef78ac6762f56/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2784db4e5b1950ca24582e3dd716af7f5e04906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2784db4e5b1950ca24582e3dd716af7f5e04906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2784db4e5b1950ca24582e3dd716af7f5e04906"}], "stats": {"total": 182, "additions": 78, "deletions": 104}, "files": [{"sha": "9d27cccb10911b8289bd96708f66e2ee7c00e2ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -1,3 +1,21 @@\n+2008-04-03  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * tree-inline.c (copy_generic_body, copy_decl_no_change): Export.\n+        (remap_block): Call id->transform_lang_insert_block instead\n+        of langhook.\n+        (optimize_inline_calls, unsave_expr_now, tree_function_versioning):\n+        Set id.transform_lang_insert_block to NULL.\n+        (clone_body): Move to cp/optimize.c\n+        * tree-inline.h (struct copy_body_data): Change\n+        transform_lang_insert_block to function pointer.\n+        (copy_generic_body, copy_decl_no_change): Export.\n+        * langhooks.h (struct lang_hooks_for_decls): Kill insert_block.\n+        * langhooks-def.h (LANG_HOOKS_INSERT_BLOCK): Kill.\n+        (LANG_HOOKS_DECLS): Remove LANG_HOOKS_INSERT_BLOCK.\n+\n+        * c-tree.h (insert_block): Kill.\n+        * c-decl.c (insert_block): Kill.\n+\n 2008-04-03  Paolo Bonzini  <bonzini@gnu.org>\n \n         * c-objc-common.h (LANG_HOOKS_FUNCTION_ENTER_NESTED,"}, {"sha": "57c55e218686294309393aff2ca66e327b32dfae", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -1,3 +1,8 @@\n+2008-04-03  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * gigi.h (insert_block): Kill.\n+        * utils.c (insert_block): Kill.\n+\n 2008-04-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* decl.c (gnat_to_gnu_entity) <object>: For a constant object whose"}, {"sha": "c57cd80e30ec25d5b9aa1a4f3002abbd379e1e5d", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -442,11 +442,6 @@ extern void set_block_jmpbuf_decl (tree decl);\n /* Get the setjmp_decl, if any, for the current binding level.  */\n extern tree get_block_jmpbuf_decl (void);\n \n-/* Insert BLOCK at the end of the list of subblocks of the\n-   current binding level.  This is used when a BIND_EXPR is expanded,\n-   to handle the BLOCK node inside the BIND_EXPR.  */\n-extern void insert_block (tree block);\n-\n /* Records a ..._DECL node DECL as belonging to the current lexical scope\n    and uses GNAT_NODE for location information.  */\n extern void gnat_pushdecl (tree decl, Node_Id gnat_node);"}, {"sha": "2cde34e6565a23f77384f7c14d3fb5f55171c399", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -382,17 +382,6 @@ gnat_poplevel ()\n   free_binding_level = level;\n }\n \n-/* Insert BLOCK at the end of the list of subblocks of the\n-   current binding level.  This is used when a BIND_EXPR is expanded,\n-   to handle the BLOCK node inside the BIND_EXPR.  */\n-\n-void\n-insert_block (tree block)\n-{\n-  TREE_USED (block) = 1;\n-  TREE_CHAIN (block) = BLOCK_SUBBLOCKS (current_binding_level->block);\n-  BLOCK_SUBBLOCKS (current_binding_level->block) = block;\n-}\n \f\n /* Records a ..._DECL node DECL as belonging to the current lexical scope\n    and uses GNAT_NODE for location information and propagating flags.  */"}, {"sha": "22491aaec6aa1c5cba18061472a1a472f39f12b9", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -931,16 +931,6 @@ pop_file_scope (void)\n   cgraph_finalize_compilation_unit ();\n }\n \n-/* Insert BLOCK at the end of the list of subblocks of the current\n-   scope.  This is used when a BIND_EXPR is expanded, to handle the\n-   BLOCK node inside the BIND_EXPR.  */\n-\n-void\n-insert_block (tree block)\n-{\n-  TREE_USED (block) = 1;\n-  SCOPE_LIST_APPEND (current_scope, blocks, block);\n-}\n \f\n /* Push a definition or a declaration of struct, union or enum tag \"name\".\n    \"type\" should be the type node."}, {"sha": "92df36ad6323303475d9a9a28b7988c5f1a8f105", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -455,7 +455,6 @@ extern tree c_cont_label;\n extern int global_bindings_p (void);\n extern void push_scope (void);\n extern tree pop_scope (void);\n-extern void insert_block (tree);\n \n extern void c_init_decl_processing (void);\n extern void c_dup_lang_specific_decl (tree);"}, {"sha": "5b6c4981eb1ecfb4d99b17b61e37a5a725052947", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -1,3 +1,7 @@\n+2008-04-03  Paolo Bonzini  <bonzini@gnu.org>\n+    \n+\t* optimize.c (clone_body): New, from tree-inline.c.\n+\n 2008-04-03  Paolo Bonzini  <bonzini@gnu.org>\n \n         * method.c (synthesize_method): Use {push,pop}_function_context."}, {"sha": "2ffbd6f218a0ef86828b4b7ffe19cceac0e14ca7", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -72,6 +72,37 @@ update_cloned_parm (tree parm, tree cloned_parm, bool first)\n   DECL_GIMPLE_REG_P (cloned_parm) = DECL_GIMPLE_REG_P (parm);\n }\n \n+/* FN is a function that has a complete body, and CLONE is a function whose\n+   body is to be set to a copy of FN, mapping argument declarations according\n+   to the ARG_MAP splay_tree.  */\n+\n+static void\n+clone_body (tree clone, tree fn, void *arg_map)\n+{\n+  copy_body_data id;\n+\n+  /* Clone the body, as if we were making an inline call.  But, remap the\n+     parameters in the callee to the parameters of caller.  */\n+  memset (&id, 0, sizeof (id));\n+  id.src_fn = fn;\n+  id.dst_fn = clone;\n+  id.src_cfun = DECL_STRUCT_FUNCTION (fn);\n+  id.decl_map = (struct pointer_map_t *)arg_map;\n+\n+  id.copy_decl = copy_decl_no_change;\n+  id.transform_call_graph_edges = CB_CGE_DUPLICATE;\n+  id.transform_new_cfg = true;\n+  id.transform_return_to_modify = false;\n+  id.transform_lang_insert_block = insert_block;\n+\n+  /* We're not inside any EH region.  */\n+  id.eh_region = -1;\n+\n+  /* Actually copy the body.  */\n+  append_to_statement_list_force (copy_generic_body (&id),\n+\t\t\t\t  &DECL_SAVED_TREE (clone));\n+}\n+\n /* FN is a function that has a complete body.  Clone the body as\n    necessary.  Returns nonzero if there's no longer any need to\n    process the main body.  */"}, {"sha": "bc622efc95601335b465d950839444d78c484c86", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -1,3 +1,7 @@\n+2008-04-03  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * f95-lang.c (insert_block): Kill.\n+\n 2008-04-01  George Helffrich <george@gcc.gnu.org>\n \n \t* trans-common.c (create_common):  Add decl to function"}, {"sha": "4639d6c27b69a3ada2773245b05be1056fd9bfc7", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -95,7 +95,6 @@ static void gfc_print_identifier (FILE *, tree, int);\n static bool gfc_mark_addressable (tree);\n void do_function_end (void);\n int global_bindings_p (void);\n-void insert_block (tree);\n static void clear_binding_stack (void);\n static void gfc_be_parse_file (int);\n static alias_set_type gfc_get_alias_set (tree);\n@@ -473,19 +472,6 @@ poplevel (int keep, int reverse, int functionbody)\n }\n \n \n-/* Insert BLOCK at the end of the list of subblocks of the\n-   current binding level.  This is used when a BIND_EXPR is expanded,\n-   to handle the BLOCK node inside the BIND_EXPR.  */\n-\n-void\n-insert_block (tree block)\n-{\n-  TREE_USED (block) = 1;\n-  current_binding_level->blocks\n-    = chainon (current_binding_level->blocks, block);\n-}\n-\n-\n /* Records a ..._DECL node DECL as belonging to the current lexical scope.\n    Returns the ..._DECL node.  */\n "}, {"sha": "ee1790b841a19705f095e0778397efc5e3508fe9", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -1,3 +1,8 @@\n+2008-04-03  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * java-tree.h (insert_block): Kill.\n+        * decl.c (insert_block): Kill.\n+\t\t\n 2008-04-01  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcj.texi: Include gpl_v3.texi instead of gpl.texi"}, {"sha": "d449e39b53958e203125147a5bfbe4969430de84", "filename": "gcc/java/decl.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -1581,18 +1581,6 @@ force_poplevels (int start_pc)\n     }\n }\n \n-/* Insert BLOCK at the end of the list of subblocks of the\n-   current binding level.  This is used when a BIND_EXPR is expanded,\n-   to handle the BLOCK node inside the BIND_EXPR.  */\n-\n-void\n-insert_block (tree block)\n-{\n-  TREE_USED (block) = 1;\n-  current_binding_level->blocks\n-    = chainon (current_binding_level->blocks, block);\n-}\n-\n /* integrate_decl_tree calls this function. */\n \n void"}, {"sha": "02f93e26fb7d9f72b7115402f7d0927a83634b3a", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -1051,7 +1051,6 @@ extern int global_bindings_p (void);\n extern tree getdecls (void);\n extern void pushlevel (int);\n extern tree poplevel (int,int, int);\n-extern void insert_block (tree);\n extern tree pushdecl (tree);\n extern void java_init_decl_processing (void);\n extern void java_dup_lang_specific_decl (tree);"}, {"sha": "47996a0d75bfa2c04a73617be8215a142f3d0695", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -196,7 +196,6 @@ extern tree lhd_make_node (enum tree_code);\n \n /* Declaration hooks.  */\n #define LANG_HOOKS_GLOBAL_BINDINGS_P global_bindings_p\n-#define LANG_HOOKS_INSERT_BLOCK\tinsert_block\n #define LANG_HOOKS_PUSHDECL\tpushdecl\n #define LANG_HOOKS_GETDECLS\tgetdecls\n #define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL lhd_warn_unused_global_decl\n@@ -214,7 +213,6 @@ extern tree lhd_make_node (enum tree_code);\n \n #define LANG_HOOKS_DECLS { \\\n   LANG_HOOKS_GLOBAL_BINDINGS_P, \\\n-  LANG_HOOKS_INSERT_BLOCK, \\\n   LANG_HOOKS_PUSHDECL, \\\n   LANG_HOOKS_GETDECLS, \\\n   LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL, \\"}, {"sha": "21e794fae809702f0a66c4885f8a1736d753a32f", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -158,11 +158,6 @@ struct lang_hooks_for_decls\n      returns -1 for an undocumented reason used in stor-layout.c.  */\n   int (*global_bindings_p) (void);\n \n-  /* Insert BLOCK at the end of the list of subblocks of the\n-     current binding level.  This is used when a BIND_EXPR is expanded,\n-     to handle the BLOCK node inside the BIND_EXPR.  */\n-  void (*insert_block) (tree);\n-\n   /* Function to add a decl to the current scope level.  Takes one\n      argument, a decl to add.  Returns that decl, or, if the same\n      symbol is already declared, may return a different decl for that"}, {"sha": "091a45a1439277adbcc091ada2bf30035d41003e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 6, "deletions": 38, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -127,7 +127,6 @@ eni_weights eni_time_weights;\n /* Prototypes.  */\n \n static tree declare_return_variable (copy_body_data *, tree, tree, tree *);\n-static tree copy_generic_body (copy_body_data *);\n static bool inlinable_function_p (tree);\n static void remap_block (tree *, copy_body_data *);\n static tree remap_decls (tree, copy_body_data *);\n@@ -140,7 +139,6 @@ static void remap_save_expr (tree *, void *, int *);\n static void add_lexical_block (tree current_block, tree new_block);\n static tree copy_decl_to_var (tree, copy_body_data *);\n static tree copy_result_decl_to_var (tree, copy_body_data *);\n-static tree copy_decl_no_change (tree, copy_body_data *);\n static tree copy_decl_maybe_to_var (tree, copy_body_data *);\n \n /* Insert a tree->tree mapping for ID.  Despite the name suggests\n@@ -498,7 +496,7 @@ remap_block (tree *block, copy_body_data *id)\n   fn = id->dst_fn;\n \n   if (id->transform_lang_insert_block)\n-    lang_hooks.decls.insert_block (new_block);\n+    id->transform_lang_insert_block (new_block);\n \n   /* Remember the remapped block.  */\n   insert_decl_map (id, old_block, new_block);\n@@ -1394,7 +1392,7 @@ copy_cfg_body (copy_body_data * id, gcov_type count, int frequency,\n /* Make a copy of the body of FN so that it can be inserted inline in\n    another function.  */\n \n-static tree\n+tree\n copy_generic_body (copy_body_data *id)\n {\n   tree body;\n@@ -3024,7 +3022,7 @@ optimize_inline_calls (tree fn)\n   id.transform_call_graph_edges = CB_CGE_DUPLICATE;\n   id.transform_new_cfg = false;\n   id.transform_return_to_modify = true;\n-  id.transform_lang_insert_block = false;\n+  id.transform_lang_insert_block = NULL;\n   id.statements_to_fold = pointer_set_create ();\n \n   push_gimplify_context ();\n@@ -3079,36 +3077,6 @@ optimize_inline_calls (tree fn)\n \t  | (profile_status != PROFILE_ABSENT ? TODO_rebuild_frequencies : 0));\n }\n \n-/* FN is a function that has a complete body, and CLONE is a function whose\n-   body is to be set to a copy of FN, mapping argument declarations according\n-   to the ARG_MAP splay_tree.  */\n-\n-void\n-clone_body (tree clone, tree fn, void *arg_map)\n-{\n-  copy_body_data id;\n-\n-  /* Clone the body, as if we were making an inline call.  But, remap the\n-     parameters in the callee to the parameters of caller.  */\n-  memset (&id, 0, sizeof (id));\n-  id.src_fn = fn;\n-  id.dst_fn = clone;\n-  id.src_cfun = DECL_STRUCT_FUNCTION (fn);\n-  id.decl_map = (struct pointer_map_t *)arg_map;\n-\n-  id.copy_decl = copy_decl_no_change;\n-  id.transform_call_graph_edges = CB_CGE_DUPLICATE;\n-  id.transform_new_cfg = true;\n-  id.transform_return_to_modify = false;\n-  id.transform_lang_insert_block = true;\n-\n-  /* We're not inside any EH region.  */\n-  id.eh_region = -1;\n-\n-  /* Actually copy the body.  */\n-  append_to_statement_list_force (copy_generic_body (&id), &DECL_SAVED_TREE (clone));\n-}\n-\n /* Passed to walk_tree.  Copies the node pointed to, if appropriate.  */\n \n tree\n@@ -3329,7 +3297,7 @@ unsave_expr_now (tree expr)\n   id.transform_call_graph_edges = CB_CGE_DUPLICATE;\n   id.transform_new_cfg = false;\n   id.transform_return_to_modify = false;\n-  id.transform_lang_insert_block = false;\n+  id.transform_lang_insert_block = NULL;\n \n   /* Walk the tree once to find local labels.  */\n   walk_tree_without_duplicates (&expr, mark_local_for_remap_r, &id);\n@@ -3475,7 +3443,7 @@ copy_result_decl_to_var (tree decl, copy_body_data *id)\n }\n \n \n-static tree\n+tree\n copy_decl_no_change (tree decl, copy_body_data *id)\n {\n   tree copy;\n@@ -3611,7 +3579,7 @@ tree_function_versioning (tree old_decl, tree new_decl, varray_type tree_map,\n     = update_clones ? CB_CGE_MOVE_CLONES : CB_CGE_MOVE;\n   id.transform_new_cfg = true;\n   id.transform_return_to_modify = false;\n-  id.transform_lang_insert_block = false;\n+  id.transform_lang_insert_block = NULL;\n \n   current_function_decl = new_decl;\n   old_entry_block = ENTRY_BLOCK_PTR_FOR_FUNCTION"}, {"sha": "a69afd00f99b7dacc96f2282e79bdfbb6c916867", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ff420f135551a6d3582b986997ef78ac6762f56/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=9ff420f135551a6d3582b986997ef78ac6762f56", "patch": "@@ -88,16 +88,15 @@ typedef struct copy_body_data\n      by manipulating the CFG rather than a statement.  */\n   bool transform_return_to_modify;\n \n-  /* True if lang_hooks.decls.insert_block should be invoked when\n-     duplicating BLOCK nodes.  */\n-  bool transform_lang_insert_block;\n-\n   /* True if this statement will need to be regimplified.  */\n   bool regimplify;\n \n   /* > 0 if we are remapping a type currently.  */\n   int remapping_type_depth;\n \n+  /* A function to be called when duplicating BLOCK nodes.  */\n+  void (*transform_lang_insert_block) (tree);\n+\n   /* Statements that might be possibly folded.  */\n   struct pointer_set_t *statements_to_fold;\n \n@@ -144,7 +143,8 @@ extern void insert_decl_map (copy_body_data *, tree, tree);\n unsigned int optimize_inline_calls (tree);\n bool tree_inlinable_function_p (tree);\n tree copy_tree_r (tree *, int *, void *);\n-void clone_body (tree, tree, void *);\n+tree copy_generic_body (copy_body_data *id);\n+tree copy_decl_no_change (tree decl, copy_body_data *id);\n void save_body (tree, tree *, tree *);\n int estimate_move_cost (tree type);\n int estimate_num_insns (tree expr, eni_weights *);"}]}