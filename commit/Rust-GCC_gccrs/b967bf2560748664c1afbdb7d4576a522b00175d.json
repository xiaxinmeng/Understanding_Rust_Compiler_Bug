{"sha": "b967bf2560748664c1afbdb7d4576a522b00175d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk2N2JmMjU2MDc0ODY2NGMxYWZiZGI3ZDQ1NzZhNTIyYjAwMTc1ZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-11-22T00:19:07Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-11-22T00:19:07Z"}, "message": "del_op.cc: Include c++config.h first.\n\n2005-11-21  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* libsupc++/del_op.cc: Include c++config.h first.\n\t* libsupc++/eh_alloc.cc: Same.\n\t* libsupc++/new_opv.cc: Same.\n\t* libsupc++/eh_throw.cc: Same.\n\t* libsupc++/new_op.cc: Same.\n\t* libsupc++/del_opv.cc: Same.\n\t* libsupc++/eh_catch.cc: Same.\n\t* libsupc++/guard.cc: Same.\n\t* libsupc++/del_opnt.cc: Same.\n\t* libsupc++/eh_exception.cc: Same.\n\t* libsupc++/new_opvnt.cc: Same.\n\t* libsupc++/eh_term_handler.cc: Same.\n\t* libsupc++/eh_personality.cc: Same.\n\t* libsupc++/eh_call.cc: Same.\n\t* libsupc++/new_opnt.cc: Same.\n\t* libsupc++/del_opvnt.cc: Same.\n\n2005-11-21  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/Makefile.am (LTCXXCOMPILE): CXXFLAGS last.\n\t* libsupc++/Makefile.am: Same.\n\t* src/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.in: Same.\n\nFrom-SVN: r107343", "tree": {"sha": "78d2cc8f3f9ce3e207a3d8589b10081ebb510aa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78d2cc8f3f9ce3e207a3d8589b10081ebb510aa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b967bf2560748664c1afbdb7d4576a522b00175d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b967bf2560748664c1afbdb7d4576a522b00175d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b967bf2560748664c1afbdb7d4576a522b00175d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b967bf2560748664c1afbdb7d4576a522b00175d/comments", "author": null, "committer": null, "parents": [{"sha": "6353ea3675b94d9f1f097acebaf11490b9d43c24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6353ea3675b94d9f1f097acebaf11490b9d43c24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6353ea3675b94d9f1f097acebaf11490b9d43c24"}], "stats": {"total": 81, "additions": 51, "deletions": 30}, "files": [{"sha": "c45b76cb102c63bca5a45a514ebd66715303f6c2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -1,3 +1,29 @@\n+2005-11-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* libsupc++/del_op.cc: Include c++config.h first.\n+\t* libsupc++/eh_alloc.cc: Same.\n+\t* libsupc++/new_opv.cc: Same.\n+\t* libsupc++/eh_throw.cc: Same.\n+\t* libsupc++/new_op.cc: Same.\n+\t* libsupc++/del_opv.cc: Same.\n+\t* libsupc++/eh_catch.cc: Same.\n+\t* libsupc++/guard.cc: Same.\n+\t* libsupc++/del_opnt.cc: Same.\n+\t* libsupc++/eh_exception.cc: Same.\n+\t* libsupc++/new_opvnt.cc: Same.\n+\t* libsupc++/eh_term_handler.cc: Same.\n+\t* libsupc++/eh_personality.cc: Same.\n+\t* libsupc++/eh_call.cc: Same.\n+\t* libsupc++/new_opnt.cc: Same.\n+\t* libsupc++/del_opvnt.cc: Same.\n+\n+2005-11-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/Makefile.am (LTCXXCOMPILE): CXXFLAGS last.\n+\t* libsupc++/Makefile.am: Same.\n+\t* src/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.in: Same.\n+\n 2005-11-21  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/sso_string_base.h: Minor formatting and stylistic fixes.\n@@ -20,9 +46,9 @@\n \tJust use a static member.\n \t(__rc_string_base<>::__rc_string_base(), _S_construct): Adjust.\n \n-\t* include/ext/rc_string_base.h (__rc_string_base<>::_Rep): Use anonymous\n-\tunion together with _CharT to fix alignment issues, rebind to _Rep and\n-\trename _Raw_alloc to _Rep_alloc_type.\n+\t* include/ext/rc_string_base.h (__rc_string_base<>::_Rep): Use\n+\tanonymous union together with _CharT to fix alignment issues,\n+\trebind to _Rep and rename _Raw_alloc to _Rep_alloc_type.\t\n \t(__rc_string_base<>::_Rep::_S_create, _M_destroy): Adjust consistently.\n \n \t* include/ext/vstring_util.h (__is_null_p): Move inside struct\n@@ -44,8 +70,7 @@\n \t(__rc_string_base<>::_M_is_leaked, _M_set_sharable): Change to private.\n \t* include/ext/sso_string_base.h\t(__sso_string_base<>::_M_swap):\n \tLikewise.\n-\t(__sso_string_base<>::_M_is_leaked, _M_set_sharable): Remove, unused.\t\n-\n+\t(__sso_string_base<>::_M_is_leaked, _M_set_sharable): Remove, unused.\n \t* include/ext/rc_string_base.h (__rc_string_base<>::_M_data(_CharT*):\n \tReturn void.\n \t* include/ext/sso_string_base.h (__sso_string_base<>::_M_data(_CharT*):"}, {"sha": "2c749cb0dbe9c549a45e4057cc1931c409234882", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -1,6 +1,7 @@\n ## Makefile for the GNU C++ Support library.\n ##\n-## Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+## Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005\n+## Free Software Foundation, Inc.\n ##\n ## Process this file with automake to produce Makefile.in.\n ##\n@@ -136,7 +137,7 @@ cp-demangle.o: cp-demangle.c\n # CXX undo the affect of disable-shared.\n LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n \t       --mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS)\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow g++ to"}, {"sha": "016bdb3dba9d3e2f4d3663542bff4c6dc2b10b35", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -395,7 +395,7 @@ LTCOMPILE = $(LIBTOOL) --tag CC --tag disable-shared --mode=compile $(CC) \\\n # CXX undo the affect of disable-shared.\n LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n \t       --mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS)\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if"}, {"sha": "93f4aa8373cb8dad20af9aeaac7a952c69921703", "filename": "libstdc++-v3/libsupc++/del_op.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_op.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -28,8 +28,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include \"new\"\n #include <bits/c++config.h>\n+#include \"new\"\n #if _GLIBCXX_HOSTED\n #include <cstdlib>\n #endif"}, {"sha": "1aa25d76ba5b75424629666d681050003cb05acb", "filename": "libstdc++-v3/libsupc++/del_opnt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opnt.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -28,8 +28,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include \"new\"\n #include <bits/c++config.h>\n+#include \"new\"\n \n extern \"C\" void free (void *);\n "}, {"sha": "9a08afbb54be94bc622206f2706254772b503df1", "filename": "libstdc++-v3/libsupc++/del_opv.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opv.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -28,8 +28,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include \"new\"\n #include <bits/c++config.h>\n+#include \"new\"\n \n _GLIBCXX_WEAK_DEFINITION void\n operator delete[] (void *ptr) throw ()"}, {"sha": "4dbe48931cfcdd4b1a9a6805e5a750a234a169ce", "filename": "libstdc++-v3/libsupc++/del_opvnt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fdel_opvnt.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -28,8 +28,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include \"new\"\n #include <bits/c++config.h>\n+#include \"new\"\n \n _GLIBCXX_WEAK_DEFINITION void\n operator delete[] (void *ptr, const std::nothrow_t&) throw ()"}, {"sha": "5a0d50c80587e3357696c76df3fc117ab4a1a351", "filename": "libstdc++-v3/libsupc++/eh_alloc.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Allocate exception objects.\n-// Copyright (C) 2001, 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -30,14 +30,14 @@\n // This is derived from the C++ ABI for IA-64.  Where we diverge\n // for cross-architecture compatibility are noted with \"@@@\".\n \n+#include <bits/c++config.h>\n #include <cstdlib>\n #if _GLIBCXX_HOSTED\n #include <cstring>\n #endif\n #include <climits>\n #include <exception>\n #include \"unwind-cxx.h\"\n-#include \"bits/c++config.h\"\n #include \"bits/gthr.h\"\n \n #if _GLIBCXX_HOSTED"}, {"sha": "edf62188a6b6d5cc547f3ee80323fe6a4cd79920", "filename": "libstdc++-v3/libsupc++/eh_call.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_call.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -27,7 +27,6 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n #include <bits/c++config.h>\n #include <cstdlib>\n #include <exception_defines.h>"}, {"sha": "77b8a82dd167b6092eef1f1d0d665914689d00e4", "filename": "libstdc++-v3/libsupc++/eh_catch.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_catch.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -27,7 +27,6 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n #include <cstdlib>\n #include \"unwind-cxx.h\"\n "}, {"sha": "81d7e70bcf3e2c49786384e18febc7caa503a998", "filename": "libstdc++-v3/libsupc++/eh_exception.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_exception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_exception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_exception.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -28,7 +28,6 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n #include \"typeinfo\"\n #include \"exception\"\n #include \"unwind-cxx.h\""}, {"sha": "917a397569cd091512d8de79caefbe5ebb4bde06", "filename": "libstdc++-v3/libsupc++/eh_personality.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_personality.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -27,7 +27,6 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n #include <bits/c++config.h>\n #include <cstdlib>\n #include <exception_defines.h>"}, {"sha": "b3914974931d64383cb544fd00fc2b8cf4eca762", "filename": "libstdc++-v3/libsupc++/eh_term_handler.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_term_handler.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -27,8 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include \"unwind-cxx.h\"\n #include <bits/c++config.h>\n+#include \"unwind-cxx.h\"\n \n /* We default to the talkative, informative handler in a normal hosted\n    library.  This pulls in the demangler, the dyn-string utilities, and"}, {"sha": "b405f8f7c64188c167227bb85d8d7a7d1fc866a4", "filename": "libstdc++-v3/libsupc++/eh_throw.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -27,7 +27,6 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-\n #include <bits/c++config.h>\n #include \"unwind-cxx.h\"\n "}, {"sha": "e7fe2b6e7b9b1966da835fd792dc6b3d38828b03", "filename": "libstdc++-v3/libsupc++/guard.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fguard.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -29,9 +29,9 @@\n // Written by Mark Mitchell, CodeSourcery LLC, <mark@codesourcery.com>\n // Thread support written by Jason Merrill, Red Hat Inc. <jason@redhat.com>\n \n+#include <bits/c++config.h>\n #include <cxxabi.h>\n #include <exception>\n-#include <bits/c++config.h>\n #include <bits/gthr.h>\n #include <bits/atomicity.h>\n "}, {"sha": "8059d1d110cc05026dda1ab78aba07c96aadb46a", "filename": "libstdc++-v3/libsupc++/new_op.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_op.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -29,10 +29,10 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include \"new\"\n+#include <bits/c++config.h>\n #include <cstdlib>\n #include <exception_defines.h>\n-#include <bits/c++config.h>\n+#include \"new\"\n \n using std::new_handler;\n using std::bad_alloc;"}, {"sha": "65b79a355f05ca8967432ce87cb9947bf7eaa25d", "filename": "libstdc++-v3/libsupc++/new_opnt.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opnt.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -27,9 +27,9 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include \"new\"\n-#include <exception_defines.h>\n #include <bits/c++config.h>\n+#include <exception_defines.h>\n+#include \"new\"\n \n using std::new_handler;\n using std::bad_alloc;"}, {"sha": "e40565bada7159777425305f78abe9cd1842a8fd", "filename": "libstdc++-v3/libsupc++/new_opv.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opv.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -28,8 +28,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include \"new\"\n #include <bits/c++config.h>\n+#include \"new\"\n \n _GLIBCXX_WEAK_DEFINITION void*\n operator new[] (std::size_t sz) throw (std::bad_alloc)"}, {"sha": "7d59d43c33fb5b5c0c87e4d9994f6695c6d4e292", "filename": "libstdc++-v3/libsupc++/new_opvnt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew_opvnt.cc?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -28,8 +28,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include \"new\"\n #include <bits/c++config.h>\n+#include \"new\"\n  \n _GLIBCXX_WEAK_DEFINITION void*\n operator new[] (std::size_t sz, const std::nothrow_t& nothrow) throw()"}, {"sha": "113f2dc0d3184c01f3c9472e4b181090c8cb33b8", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -1,6 +1,6 @@\n ## Makefile for the src subdirectory of the GNU C++ Standard library.\n ##\n-## Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+## Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005\n ## Free Software Foundation, Inc.\n ##\n ## This file is part of the libstdc++ version 3 distribution.\n@@ -221,7 +221,7 @@ AM_CXXFLAGS = \\\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS)\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) \n \n # 3) We'd have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow g++ to"}, {"sha": "d205c01eac86f0adaf771b84edc8d624c69d8cdc", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b967bf2560748664c1afbdb7d4576a522b00175d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=b967bf2560748664c1afbdb7d4576a522b00175d", "patch": "@@ -395,7 +395,7 @@ AM_CXXFLAGS = \\\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n-\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS)\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) \n \n \n # 3) We'd have a problem when building the shared libstdc++ object if"}]}