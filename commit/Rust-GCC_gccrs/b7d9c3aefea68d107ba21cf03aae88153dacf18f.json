{"sha": "b7d9c3aefea68d107ba21cf03aae88153dacf18f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdkOWMzYWVmZWE2OGQxMDdiYTIxY2YwM2FhZTg4MTUzZGFjZjE4Zg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-08-20T18:20:21Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-08-20T18:20:21Z"}, "message": "configure.ac: Replaced all AC_TRY_COMPILE macros with AC_COMPILE_IFELSE macros.\n\n2004-08-20  Michael Koch  <konqueror@gmx.de>\n\n\t* configure.ac: Replaced all AC_TRY_COMPILE macros with\n\tAC_COMPILE_IFELSE macros.\n\nFrom-SVN: r86333", "tree": {"sha": "34f1c4bf3fba08ce7cb617430bbcf9783ed1ba6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34f1c4bf3fba08ce7cb617430bbcf9783ed1ba6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7d9c3aefea68d107ba21cf03aae88153dacf18f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7d9c3aefea68d107ba21cf03aae88153dacf18f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7d9c3aefea68d107ba21cf03aae88153dacf18f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7d9c3aefea68d107ba21cf03aae88153dacf18f/comments", "author": null, "committer": null, "parents": [{"sha": "d64d5e80857fae533c75dc6474ebe67970dd78ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d64d5e80857fae533c75dc6474ebe67970dd78ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d64d5e80857fae533c75dc6474ebe67970dd78ca"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "05673a6eb97a05be940e09e6e9d25f259905a3e7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d9c3aefea68d107ba21cf03aae88153dacf18f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d9c3aefea68d107ba21cf03aae88153dacf18f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b7d9c3aefea68d107ba21cf03aae88153dacf18f", "patch": "@@ -1,3 +1,8 @@\n+2004-08-20  Michael Koch  <konqueror@gmx.de>\n+\n+\t* configure.ac: Replaced all AC_TRY_COMPILE macros with\n+\tAC_COMPILE_IFELSE macros.\n+\n 2004-08-20  Michael Koch  <konqueror@gmx.de>\n \n \t* configure.in: Renamed to configure.ac."}, {"sha": "0085b475b77001e0087d3e95fbadb722e44d3860", "filename": "libjava/configure.ac", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7d9c3aefea68d107ba21cf03aae88153dacf18f/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7d9c3aefea68d107ba21cf03aae88153dacf18f/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=b7d9c3aefea68d107ba21cf03aae88153dacf18f", "patch": "@@ -818,12 +818,12 @@ else\n \tAC_CACHE_CHECK([whether gethostbyname_r declaration requires -D_REENTRANT],\n \t[libjava_cv_gethostbyname_r_needs_reentrant],\n \t[ AC_LANG_PUSH(C++)\n-\t  AC_TRY_COMPILE([#include <netdb.h>],\n-\t    [gethostbyname_r(\"\", 0, 0);],\n+\t  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <netdb.h>]],\n+\t    [[gethostbyname_r(\"\", 0, 0);]])],\n \t    [libjava_cv_gethostbyname_r_needs_reentrant=no], [dnl\n \t\tCPPFLAGS_SAVE=\"$CPPFLAGS\"\n \t\tCPPFLAGS=\"$CPPFLAGS -D_REENTRANT\"\n-\t\tAC_TRY_COMPILE([#include <netdb.h>], [gethostbyname_r(\"\", 0, 0);],\n+\t\tAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <netdb.h>]], [[gethostbyname_r(\"\", 0, 0);]])],\n \t\t    [libjava_cv_gethostbyname_r_needs_reentrant=yes],\n \t\t    [libjava_cv_gethostbyname_r_needs_reentrant=fail])\n \t\tCPPFLAGS=\"$CPPFLAGS_SAVE\"\n@@ -838,11 +838,11 @@ else\n \n      AC_CACHE_CHECK([for struct hostent_data],\n \t[libjava_cv_struct_hostent_data], [dnl\n-\tAC_TRY_COMPILE([\n+\tAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n #if GETHOSTBYNAME_R_NEEDS_REENTRANT && !defined(_REENTRANT)\n # define _REENTRANT 1\n #endif\n-#include <netdb.h>], [struct hostent_data data;],\n+#include <netdb.h>]], [[struct hostent_data data;]])],\n \t  [libjava_cv_struct_hostent_data=yes],\n \t  [libjava_cv_struct_hostent_data=no])])\n      if test \"x$libjava_cv_struct_hostent_data\" = xyes; then\n@@ -903,13 +903,13 @@ else\n \n       # We can save a little space at runtime if the mutex has m_count\n       # or __m_count.  This is a nice hack for Linux.\n-      AC_TRY_COMPILE([#include <pthread.h>], [\n+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]], [[\n           extern pthread_mutex_t *mutex; int q = mutex->m_count;\n-        ], AC_DEFINE(PTHREAD_MUTEX_HAVE_M_COUNT, 1,\n+        ]])], AC_DEFINE(PTHREAD_MUTEX_HAVE_M_COUNT, 1,\n              [Define if pthread_mutex_t has m_count member.]), [\n-\tAC_TRY_COMPILE([#include <pthread.h>], [\n+\tAC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]], [[\n \t    extern pthread_mutex_t *mutex; int q = mutex->__m_count;\n-\t  ], AC_DEFINE(PTHREAD_MUTEX_HAVE___M_COUNT, 1,\n+\t  ]])], AC_DEFINE(PTHREAD_MUTEX_HAVE___M_COUNT, 1,\n             [Define if pthread_mutex_t has __m_count member.]))])\n    fi\n \n@@ -1194,50 +1194,50 @@ AC_HEADER_SYS_WAIT\n AC_CHECK_TYPE([ssize_t], [int])\n \n AC_MSG_CHECKING([for in_addr_t])\n-AC_TRY_COMPILE([#include <sys/types.h>\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n #if STDC_HEADERS\n #include <stdlib.h>\n #include <stddef.h>\n #endif\n #if HAVE_NETINET_IN_H\n #include <netinet/in.h>\n-#endif], [in_addr_t foo;],\n+#endif]], [[in_addr_t foo;]])],\n   [AC_DEFINE(HAVE_IN_ADDR_T, 1,\n      [Define to 1 if 'in_addr_t' is defined in sys/types.h or netinet/in.h.])\n    AC_MSG_RESULT(yes)],\n   [AC_MSG_RESULT(no)])\n \n AC_MSG_CHECKING([whether struct ip_mreq is in netinet/in.h])\n-AC_TRY_COMPILE([#include <netinet/in.h>], [struct ip_mreq mreq;],\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <netinet/in.h>]], [[struct ip_mreq mreq;]])],\n   [AC_DEFINE(HAVE_STRUCT_IP_MREQ, 1,\n      [Define if struct ip_mreq is defined in netinet/in.h.])\n    AC_MSG_RESULT(yes)],\n   [AC_MSG_RESULT(no)])\n \n AC_MSG_CHECKING([whether struct ipv6_mreq is in netinet/in.h])\n-AC_TRY_COMPILE([#include <netinet/in.h>], [struct ipv6_mreq mreq6;],\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <netinet/in.h>]], [[struct ipv6_mreq mreq6;]])],\n   [AC_DEFINE(HAVE_STRUCT_IPV6_MREQ, 1,\n      [Define if struct ipv6_mreq is defined in netinet/in.h.])\n    AC_MSG_RESULT(yes)],\n   [AC_MSG_RESULT(no)])\n \n AC_MSG_CHECKING([whether struct sockaddr_in6 is in netinet/in.h])\n-AC_TRY_COMPILE([#include <netinet/in.h>], [struct sockaddr_in6 addr6;],\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <netinet/in.h>]], [[struct sockaddr_in6 addr6;]])],\n   [AC_DEFINE(HAVE_INET6, 1,\n      [Define if inet6 structures are defined in netinet/in.h.])\n    AC_MSG_RESULT(yes)],\n   [AC_MSG_RESULT(no)])\n \n AC_MSG_CHECKING([for socklen_t in sys/socket.h])\n-AC_TRY_COMPILE([#define _POSIX_PII_SOCKET\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#define _POSIX_PII_SOCKET\n #include <sys/types.h>\n-#include <sys/socket.h>], [socklen_t x = 5;],\n+#include <sys/socket.h>]], [[socklen_t x = 5;]])],\n   [AC_DEFINE(HAVE_SOCKLEN_T, 1, [Define it socklen_t typedef is in sys/socket.h.])\n    AC_MSG_RESULT(yes)],\n   [AC_MSG_RESULT(no)])\n \n AC_MSG_CHECKING([for tm_gmtoff in struct tm])\n-AC_TRY_COMPILE([#include <time.h>], [struct tm tim; tim.tm_gmtoff = 0;],\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <time.h>]], [[struct tm tim; tim.tm_gmtoff = 0;]])],\n   [AC_DEFINE(STRUCT_TM_HAS_GMTOFF, 1, [Define if struct tm has tm_gmtoff field.])\n    AC_MSG_RESULT(yes)],\n   [AC_MSG_RESULT(no)\n@@ -1246,13 +1246,13 @@ AC_TRY_COMPILE([#include <time.h>], [struct tm tim; tim.tm_gmtoff = 0;],\n    dnl when cross-compiling.  So instead we make an assumption that\n    dnl the header file will mention timezone if it exists.\n    dnl Don't find the win32 function timezone\n-   AC_TRY_COMPILE([#include <time.h>], [void i(){long z2 = 2*timezone;}],\n+   AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <time.h>]], [[void i(){long z2 = 2*timezone;}]])],\n      [AC_DEFINE(HAVE_TIMEZONE, 1, [Define if global 'timezone' exists.])\n       AC_MSG_RESULT(yes)],\n      [AC_MSG_RESULT(no)\n        AC_MSG_CHECKING([for global _timezone variable])\n        dnl FIXME: As above, don't want link check\n-       AC_TRY_COMPILE([#include <time.h>], [long z2 = _timezone;],\n+       AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <time.h>]], [[long z2 = _timezone;]])],\n          [AC_DEFINE(HAVE_UNDERSCORE_TIMEZONE, 1,\n             [Define if your platform has the global _timezone variable.])\n           AC_MSG_RESULT(yes)],"}]}