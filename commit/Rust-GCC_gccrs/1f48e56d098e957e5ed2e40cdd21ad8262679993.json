{"sha": "1f48e56d098e957e5ed2e40cdd21ad8262679993", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY0OGU1NmQwOThlOTU3ZTVlZDJlNDBjZGQyMWFkODI2MjY3OTk5Mw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-06-30T07:57:58Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-06-30T07:57:58Z"}, "message": "i386.c (standard_80387_constant_p): Accept TFmode constants too.\n\n\t* i386.c (standard_80387_constant_p): Accept TFmode constants too.\n\t(init_ext_80387_constants): Likewise.\n\t(standard_80387_constant_rtx): Likewise.\n\t* i386.md (atanxf): Disable for TARGET_128BIT_LONG_LONG\n\t(atantf): Disable for !TARGET_128BIT_LONG_LONG\n\t(fyl2x_sfxf3, fyl2x_dfxf3): Accept TFmode operands.\n\t(fyl2x_xfxf3, fyl2x_tfxf3): Enable/disable as needed.\n\t(fscale_sfxf3, fscale_dfxf3): Accept TFmode operands.\n\t(fscale_xfxf3, fscale_tfxf3): Enable/disable as needed.\n\t(frndinttf2): New.\n\t(f2xm1tf2): New.\n\t(exp?f2): Use expsf2_tf when needed.\n\t(exp?f2_tf): New.\n\t(exptf): New.\n\nFrom-SVN: r68693", "tree": {"sha": "ca59069b301f08194333a86869f7a8cbfaf69972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca59069b301f08194333a86869f7a8cbfaf69972"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f48e56d098e957e5ed2e40cdd21ad8262679993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f48e56d098e957e5ed2e40cdd21ad8262679993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f48e56d098e957e5ed2e40cdd21ad8262679993", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f48e56d098e957e5ed2e40cdd21ad8262679993/comments", "author": null, "committer": null, "parents": [{"sha": "8f48afc165114bfe899f61709d486b9b56939212", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f48afc165114bfe899f61709d486b9b56939212", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f48afc165114bfe899f61709d486b9b56939212"}], "stats": {"total": 197, "additions": 168, "deletions": 29}, "files": [{"sha": "fafbdb97b7bded5bc91b85fec3a2a61550550a3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f48e56d098e957e5ed2e40cdd21ad8262679993/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f48e56d098e957e5ed2e40cdd21ad8262679993/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f48e56d098e957e5ed2e40cdd21ad8262679993", "patch": "@@ -1,3 +1,20 @@\n+Mon Jun 30 09:52:39 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (standard_80387_constant_p): Accept TFmode constants too.\n+\t(init_ext_80387_constants): Likewise.\n+\t(standard_80387_constant_rtx): Likewise.\n+\t* i386.md (atanxf): Disable for TARGET_128BIT_LONG_LONG\n+\t(atantf): Disable for !TARGET_128BIT_LONG_LONG\n+\t(fyl2x_sfxf3, fyl2x_dfxf3): Accept TFmode operands.\n+\t(fyl2x_xfxf3, fyl2x_tfxf3): Enable/disable as needed.\n+\t(fscale_sfxf3, fscale_dfxf3): Accept TFmode operands.\n+\t(fscale_xfxf3, fscale_tfxf3): Enable/disable as needed.\n+\t(frndinttf2): New.\n+\t(f2xm1tf2): New.\n+\t(exp?f2): Use expsf2_tf when needed.\n+\t(exp?f2_tf): New.\n+\t(exptf): New.\n+\n 2003-06-29 Uwe Stieber <uwe@kaos-group.de>\n \n \t* config.gcc (sh*-*-kaos*): Put tm_file setting in separate case"}, {"sha": "9e9a8e6b976c38a71e0b62df4fa4c06479a3821f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f48e56d098e957e5ed2e40cdd21ad8262679993/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f48e56d098e957e5ed2e40cdd21ad8262679993/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1f48e56d098e957e5ed2e40cdd21ad8262679993", "patch": "@@ -4292,7 +4292,8 @@ init_ext_80387_constants ()\n     {\n       real_from_string (&ext_80387_constants_table[i], cst[i]);\n       /* Ensure each constant is rounded to XFmode precision.  */\n-      real_convert (&ext_80387_constants_table[i], XFmode,\n+      real_convert (&ext_80387_constants_table[i],\n+\t\t    TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode,\n \t\t    &ext_80387_constants_table[i]);\n     }\n \n@@ -4316,7 +4317,7 @@ standard_80387_constant_p (x)\n \n   /* For XFmode constants, try to find a special 80387 instruction on\n      those CPUs that benefit from them.  */\n-  if (GET_MODE (x) == XFmode\n+  if ((GET_MODE (x) == XFmode || GET_MODE (x) == TFmode)\n       && x86_ext_80387_constants & TUNEMASK)\n     {\n       REAL_VALUE_TYPE r;\n@@ -4388,7 +4389,8 @@ standard_80387_constant_rtx (idx)\n       abort ();\n     }\n \n-  return CONST_DOUBLE_FROM_REAL_VALUE (ext_80387_constants_table[i], XFmode);\n+  return CONST_DOUBLE_FROM_REAL_VALUE (ext_80387_constants_table[i],\n+\t\t\t\t       TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode);\n }\n \n /* Return 1 if X is FP constant we can load to SSE register w/o using memory."}, {"sha": "9d0ea2447c790763d373d0c26cdd520c92a46e62", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 146, "deletions": 26, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f48e56d098e957e5ed2e40cdd21ad8262679993/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f48e56d098e957e5ed2e40cdd21ad8262679993/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1f48e56d098e957e5ed2e40cdd21ad8262679993", "patch": "@@ -15613,7 +15613,7 @@\n \t\t    UNSPEC_FPATAN))\n \t      (clobber (match_dup 1))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n   \"fpatan\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n@@ -15625,31 +15625,33 @@\n \t\t    UNSPEC_FPATAN))\n \t      (clobber (match_dup 1))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n   \"fpatan\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_insn \"*fyl2x_sfxf3\"\n   [(parallel [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t\t   (unspec:SF [(match_operand:SF 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t\t\t       (match_operand 1 \"register_operand\" \"u\")]\n \t\t    UNSPEC_FYL2X))\n \t      (clobber (match_dup 1))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations\n+   && GET_MODE (operands[1]) == TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode\"\n   \"fyl2x\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*fyl2x_dfxf3\"\n   [(parallel [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t\t   (unspec:DF [(match_operand:DF 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t\t\t       (match_operand 1 \"register_operand\" \"u\")]\n \t\t    UNSPEC_FYL2X))\n \t      (clobber (match_dup 1))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations\n+   && GET_MODE (operands[1]) == TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode\"\n   \"fyl2x\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"DF\")])\n@@ -15661,19 +15663,19 @@\n \t\t    UNSPEC_FYL2X))\n \t      (clobber (match_dup 1))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n   \"fyl2x\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_insn \"*fyl2x_tfxf3\"\n   [(parallel [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n \t\t   (unspec:TF [(match_operand:TF 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t\t\t       (match_operand:TF 1 \"register_operand\" \"u\")]\n \t\t    UNSPEC_FYL2X))\n \t      (clobber (match_dup 1))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n   \"fyl2x\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n@@ -15688,7 +15690,7 @@\n {\n   rtx temp;\n \n-  operands[2] = gen_reg_rtx (XFmode);\n+  operands[2] = gen_reg_rtx (TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode);\n   temp = standard_80387_constant_rtx (4); /* fldln2 */\n   emit_move_insn (operands[2], temp);\n })\n@@ -15703,7 +15705,7 @@\n {\n   rtx temp;\n \n-  operands[2] = gen_reg_rtx (XFmode);\n+  operands[2] = gen_reg_rtx (TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode);\n   temp = standard_80387_constant_rtx (4); /* fldln2 */\n   emit_move_insn (operands[2], temp);\n })\n@@ -15714,7 +15716,7 @@\n \t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n \t      (clobber (match_dup 2))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n {\n   rtx temp;\n \n@@ -15729,35 +15731,39 @@\n \t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n \t      (clobber (match_dup 2))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n {\n   rtx temp;\n \n-  operands[2] = gen_reg_rtx (XFmode);\n+  operands[2] = gen_reg_rtx (TFmode);\n   temp = standard_80387_constant_rtx (4); /* fldln2 */\n   emit_move_insn (operands[2], temp);\n })\n \n (define_insn \"*fscale_sfxf3\"\n   [(parallel [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t\t   (unspec:SF [(match_operand:XF 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t\t   (unspec:SF [(match_operand 2 \"register_operand\" \"0\")\n+\t\t\t       (match_operand 1 \"register_operand\" \"u\")]\n \t\t    UNSPEC_FSCALE))\n \t      (clobber (match_dup 1))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations\n+   && GET_MODE (operands[1]) == TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode\n+   && GET_MODE (operands[2]) == TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode\"\n   \"fscale\\;fstp\\t%y1\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*fscale_dfxf3\"\n   [(parallel [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t\t   (unspec:DF [(match_operand:XF 2 \"register_operand\" \"0\")\n-\t\t\t       (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t\t   (unspec:DF [(match_operand 2 \"register_operand\" \"0\")\n+\t\t\t       (match_operand 1 \"register_operand\" \"u\")]\n \t\t    UNSPEC_FSCALE))\n \t      (clobber (match_dup 1))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations\n+   && GET_MODE (operands[1]) == TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode\n+   && GET_MODE (operands[2]) == TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode\"\n   \"fscale\\;fstp\\t%y1\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"DF\")])\n@@ -15769,7 +15775,19 @@\n \t\t    UNSPEC_FSCALE))\n \t      (clobber (match_dup 1))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n+  \"fscale\\;fstp\\t%y1\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_insn \"*fscale_tf3\"\n+  [(parallel [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+\t\t   (unspec:TF [(match_operand:TF 2 \"register_operand\" \"0\")\n+\t\t\t       (match_operand:TF 1 \"register_operand\" \"u\")]\n+\t\t    UNSPEC_FSCALE))\n+\t      (clobber (match_dup 1))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n   \"fscale\\;fstp\\t%y1\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n@@ -15779,7 +15797,17 @@\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n \t UNSPEC_FRNDINT))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n+  \"frndint\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_insn \"*frndinttf2\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+\t(unspec:TF [(match_operand:TF 1 \"register_operand\" \"0\")]\n+\t UNSPEC_FRNDINT))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n   \"frndint\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n@@ -15789,7 +15817,17 @@\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n \t UNSPEC_F2XM1))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n+  \"f2xm1\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_insn \"*f2xm1tf2\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+\t(unspec:TF [(match_operand:TF 1 \"register_operand\" \"0\")]\n+\t UNSPEC_F2XM1))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n   \"f2xm1\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n@@ -15811,13 +15849,42 @@\n   rtx temp;\n   int i;\n \n+  if (TARGET_128BIT_LONG_DOUBLE)\n+    {\n+      emit_insn (gen_expsf2_tf (operands[0], operands[1]));\n+      DONE;\n+    }\n+\n   for (i=2; i<10; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n   temp = standard_80387_constant_rtx (5); /* fldl2e */\n   emit_move_insn (operands[3], temp);\n   emit_move_insn (operands[8], CONST1_RTX (XFmode));  /* fld1 */\n })\n \n+(define_expand \"expsf2_tf\"\n+  [(set (match_dup 2)\n+\t(float_extend:TF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (set (match_dup 4) (mult:TF (match_dup 2) (match_dup 3)))\n+   (set (match_dup 5) (unspec:TF [(match_dup 4)] UNSPEC_FRNDINT))\n+   (set (match_dup 6) (minus:TF (match_dup 4) (match_dup 5)))\n+   (set (match_dup 7) (unspec:TF [(match_dup 6)] UNSPEC_F2XM1))\n+   (set (match_dup 9) (plus:TF (match_dup 7) (match_dup 8)))\n+   (parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t\t   (unspec:SF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n+\t      (clobber (match_dup 5))])]\n+  \"\"\n+{\n+  rtx temp;\n+  int i;\n+\n+  for (i=2; i<10; i++)\n+    operands[i] = gen_reg_rtx (TFmode);\n+  temp = standard_80387_constant_rtx (5); /* fldl2e */\n+  emit_move_insn (operands[3], temp);\n+  emit_move_insn (operands[8], CONST1_RTX (TFmode));  /* fld1 */\n+})\n+\n (define_expand \"expdf2\"\n   [(set (match_dup 2)\n \t(float_extend:XF (match_operand:DF 1 \"register_operand\" \"\")))\n@@ -15835,13 +15902,43 @@\n   rtx temp;\n   int i;\n \n+  if (TARGET_128BIT_LONG_DOUBLE)\n+    {\n+      emit_insn (gen_expdf2_tf (operands[0], operands[1]));\n+      DONE;\n+    }\n+\n   for (i=2; i<10; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n   temp = standard_80387_constant_rtx (5); /* fldl2e */\n   emit_move_insn (operands[3], temp);\n   emit_move_insn (operands[8], CONST1_RTX (XFmode));  /* fld1 */\n })\n \n+\n+(define_expand \"expdf2_tf\"\n+  [(set (match_dup 2)\n+\t(float_extend:TF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (set (match_dup 4) (mult:TF (match_dup 2) (match_dup 3)))\n+   (set (match_dup 5) (unspec:TF [(match_dup 4)] UNSPEC_FRNDINT))\n+   (set (match_dup 6) (minus:TF (match_dup 4) (match_dup 5)))\n+   (set (match_dup 7) (unspec:TF [(match_dup 6)] UNSPEC_F2XM1))\n+   (set (match_dup 9) (plus:TF (match_dup 7) (match_dup 8)))\n+   (parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t\t   (unspec:DF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n+\t      (clobber (match_dup 5))])]\n+   \"\"\n+{\n+  rtx temp;\n+  int i;\n+\n+  for (i=2; i<10; i++)\n+    operands[i] = gen_reg_rtx (TFmode);\n+  temp = standard_80387_constant_rtx (5); /* fldl2e */\n+  emit_move_insn (operands[3], temp);\n+  emit_move_insn (operands[8], CONST1_RTX (TFmode));  /* fld1 */\n+})\n+\n (define_expand \"expxf2\"\n   [(set (match_dup 3) (mult:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t\t       (match_dup 2)))\n@@ -15853,7 +15950,7 @@\n \t\t   (unspec:XF [(match_dup 8) (match_dup 4)] UNSPEC_FSCALE))\n \t      (clobber (match_dup 4))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n {\n   rtx temp;\n   int i;\n@@ -15878,6 +15975,29 @@\n   emit_move_insn (operands[2], CONST1_RTX (SFmode));  /* fld1 */\n })\n \n+(define_expand \"exptf2\"\n+  [(set (match_dup 3) (mult:TF (match_operand:TF 1 \"register_operand\" \"\")\n+\t\t\t       (match_dup 2)))\n+   (set (match_dup 4) (unspec:TF [(match_dup 3)] UNSPEC_FRNDINT))\n+   (set (match_dup 5) (minus:TF (match_dup 3) (match_dup 4)))\n+   (set (match_dup 6) (unspec:TF [(match_dup 5)] UNSPEC_F2XM1))\n+   (set (match_dup 8) (plus:TF (match_dup 6) (match_dup 7)))\n+   (parallel [(set (match_operand:TF 0 \"register_operand\" \"\")\n+\t\t   (unspec:TF [(match_dup 8) (match_dup 4)] UNSPEC_FSCALE))\n+\t      (clobber (match_dup 4))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n+{\n+  rtx temp;\n+  int i;\n+\n+  for (i=2; i<9; i++)\n+    operands[i] = gen_reg_rtx (TFmode);\n+  temp = standard_80387_constant_rtx (5); /* fldl2e */\n+  emit_move_insn (operands[2], temp);\n+  emit_move_insn (operands[7], CONST1_RTX (TFmode));  /* fld1 */\n+})\n+\n (define_expand \"atandf2\"\n   [(parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t\t   (unspec:DF [(match_dup 2)\n@@ -15898,7 +16018,7 @@\n \t\t    UNSPEC_FPATAN))\n \t      (clobber (match_dup 1))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n {\n   operands[2] = gen_reg_rtx (XFmode);\n   emit_move_insn (operands[2], CONST1_RTX (XFmode));  /* fld1 */\n@@ -15911,7 +16031,7 @@\n \t\t    UNSPEC_FPATAN))\n \t      (clobber (match_dup 1))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n+   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n {\n   operands[2] = gen_reg_rtx (TFmode);\n   emit_move_insn (operands[2], CONST1_RTX (TFmode));  /* fld1 */"}]}