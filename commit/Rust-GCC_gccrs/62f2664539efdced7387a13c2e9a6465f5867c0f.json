{"sha": "62f2664539efdced7387a13c2e9a6465f5867c0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJmMjY2NDUzOWVmZGNlZDczODdhMTNjMmU5YTY0NjVmNTg2N2MwZg==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2018-01-26T11:34:31Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2018-01-26T11:34:31Z"}, "message": "[ARC] Add ARCv2 core3 tune option.\n\nARCv2 Core3 cpus are comming with dbnz support. Add this feature on\nthe tune option.\n\ngcc/\n2018-01-26  Claudiu Zissulescu  <claziss@synopsys.com>\n\n        * config/arc/arc-arch.h (arc_tune_attr): Add ARC_TUNE_CORE_3.\n        * config/arc/arc.c (arc_sched_issue_rate): Use ARC_TUNE_... .\n        (arc_init): Likewise.\n        (arc_override_options): Likewise.\n        (arc_file_start): Choose Tag_ARC_CPU_variation based on arc_tune\n        value.\n        (hwloop_fail): Use TARGET_DBNZ when we want to check for dbnz insn\n        support.\n        * config/arc/arc.h (TARGET_DBNZ): Define.\n        * config/arc/arc.md (attr tune): Add core_3, use ARC_TUNE_... to\n        properly set the tune attribute.\n        (dbnz): Use TARGET_DBNZ guard.\n        * config/arc/arc.opt (mtune): Add core3 option.\n\nFrom-SVN: r257085", "tree": {"sha": "28cc4ee393b1ed7dea6be60d782dd488828917c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28cc4ee393b1ed7dea6be60d782dd488828917c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62f2664539efdced7387a13c2e9a6465f5867c0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62f2664539efdced7387a13c2e9a6465f5867c0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62f2664539efdced7387a13c2e9a6465f5867c0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62f2664539efdced7387a13c2e9a6465f5867c0f/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20565692f0d31da53aab96fc0a8a4eaab2c2b142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20565692f0d31da53aab96fc0a8a4eaab2c2b142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20565692f0d31da53aab96fc0a8a4eaab2c2b142"}], "stats": {"total": 88, "additions": 58, "deletions": 30}, "files": [{"sha": "b6052fc3d74809be15eeb61300c3c2150e01efa1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f2664539efdced7387a13c2e9a6465f5867c0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f2664539efdced7387a13c2e9a6465f5867c0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62f2664539efdced7387a13c2e9a6465f5867c0f", "patch": "@@ -1,3 +1,19 @@\n+2018-01-26  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc-arch.h (arc_tune_attr): Add ARC_TUNE_CORE_3.\n+\t* config/arc/arc.c (arc_sched_issue_rate): Use ARC_TUNE_... .\n+\t(arc_init): Likewise.\n+\t(arc_override_options): Likewise.\n+\t(arc_file_start): Choose Tag_ARC_CPU_variation based on arc_tune\n+\tvalue.\n+\t(hwloop_fail): Use TARGET_DBNZ when we want to check for dbnz insn\n+\tsupport.\n+\t* config/arc/arc.h (TARGET_DBNZ): Define.\n+\t* config/arc/arc.md (attr tune): Add core_3, use ARC_TUNE_... to\n+\tproperly set the tune attribute.\n+\t(dbnz): Use TARGET_DBNZ guard.\n+\t* config/arc/arc.opt (mtune): Add core3 option.\n+\n 2018-01-26  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (arc_delegitimize_address_0): Refactored to"}, {"sha": "64866dd529b99da02918c309108b2986e5fc64c1", "filename": "gcc/config/arc/arc-arch.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f2664539efdced7387a13c2e9a6465f5867c0f/gcc%2Fconfig%2Farc%2Farc-arch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f2664539efdced7387a13c2e9a6465f5867c0f/gcc%2Fconfig%2Farc%2Farc-arch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-arch.h?ref=62f2664539efdced7387a13c2e9a6465f5867c0f", "patch": "@@ -72,7 +72,8 @@ enum arc_tune_attr\n     ARC_TUNE_NONE,\n     ARC_TUNE_ARC600,\n     ARC_TUNE_ARC700_4_2_STD,\n-    ARC_TUNE_ARC700_4_2_XMAC\n+    ARC_TUNE_ARC700_4_2_XMAC,\n+    ARC_TUNE_CORE_3\n   };\n \n /* CPU specific properties.  */"}, {"sha": "0c98083f37a1bfadc11742e4781b629d8d851468", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f2664539efdced7387a13c2e9a6465f5867c0f/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f2664539efdced7387a13c2e9a6465f5867c0f/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=62f2664539efdced7387a13c2e9a6465f5867c0f", "patch": "@@ -848,21 +848,21 @@ arc_init (void)\n   if (arc_multcost < 0)\n     switch (arc_tune)\n       {\n-      case TUNE_ARC700_4_2_STD:\n+      case ARC_TUNE_ARC700_4_2_STD:\n \t/* latency 7;\n \t   max throughput (1 multiply + 4 other insns) / 5 cycles.  */\n \tarc_multcost = COSTS_N_INSNS (4);\n \tif (TARGET_NOMPY_SET)\n \t  arc_multcost = COSTS_N_INSNS (30);\n \tbreak;\n-      case TUNE_ARC700_4_2_XMAC:\n+      case ARC_TUNE_ARC700_4_2_XMAC:\n \t/* latency 5;\n \t   max throughput (1 multiply + 2 other insns) / 3 cycles.  */\n \tarc_multcost = COSTS_N_INSNS (3);\n \tif (TARGET_NOMPY_SET)\n \t  arc_multcost = COSTS_N_INSNS (30);\n \tbreak;\n-      case TUNE_ARC600:\n+      case ARC_TUNE_ARC600:\n \tif (TARGET_MUL64_SET)\n \t  {\n \t    arc_multcost = COSTS_N_INSNS (4);\n@@ -1202,8 +1202,8 @@ arc_override_options (void)\n #undef ARC_OPT\n \n   /* Set Tune option.  */\n-  if (arc_tune == TUNE_NONE)\n-    arc_tune = (enum attr_tune) arc_selected_cpu->tune;\n+  if (arc_tune == ARC_TUNE_NONE)\n+    arc_tune = (enum arc_tune_attr) arc_selected_cpu->tune;\n \n   if (arc_size_opt_level == 3)\n     optimize_size = 1;\n@@ -5210,6 +5210,9 @@ static void arc_file_start (void)\n \t       TARGET_NO_SDATA_SET ? 0 : 2);\n   asm_fprintf (asm_out_file, \"\\t.arc_attribute Tag_ARC_ABI_exceptions, %d\\n\",\n \t       TARGET_OPTFPE ? 1 : 0);\n+  if (TARGET_V2)\n+    asm_fprintf (asm_out_file, \"\\t.arc_attribute Tag_ARC_CPU_variation, %d\\n\",\n+\t\t arc_tune == ARC_TUNE_CORE_3 ? 3 : 2);\n }\n \n /* Implement `TARGET_ASM_FILE_END'.  */\n@@ -7388,11 +7391,11 @@ hwloop_fail (hwloop_info loop)\n   rtx test;\n   rtx insn = loop->loop_end;\n \n-  if (TARGET_V2\n+  if (TARGET_DBNZ\n       && (loop->length && (loop->length <= ARC_MAX_LOOP_LENGTH))\n       && REG_P (loop->iter_reg))\n     {\n-      /* TARGET_V2 has dbnz instructions.  */\n+      /* TARGET_V2 core3 has dbnz instructions.  */\n       test = gen_dbnz (loop->iter_reg, loop->start_label);\n       insn = emit_jump_insn_before (test, loop->loop_end);\n     }"}, {"sha": "1f3ed44ec9849abe75dfcf6997a5f4a162c3965e", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f2664539efdced7387a13c2e9a6465f5867c0f/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f2664539efdced7387a13c2e9a6465f5867c0f/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=62f2664539efdced7387a13c2e9a6465f5867c0f", "patch": "@@ -1630,5 +1630,7 @@ enum\n /* Custom FP instructions used by QuarkSE EM cpu.  */\n #define TARGET_FPX_QUARK    (TARGET_EM && TARGET_SPFP\t\t\\\n \t\t\t     && (arc_fpu_build == FPX_QK))\n+/* DBNZ support is available for ARCv2 core3 cpus.  */\n+#define TARGET_DBNZ (TARGET_V2 && (arc_tune == ARC_TUNE_CORE_3))\n \n #endif /* GCC_ARC_H */"}, {"sha": "2ffd30043743d143c12ed9b0c50c44ce1729ef65", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f2664539efdced7387a13c2e9a6465f5867c0f/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f2664539efdced7387a13c2e9a6465f5867c0f/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=62f2664539efdced7387a13c2e9a6465f5867c0f", "patch": "@@ -595,14 +595,16 @@\n ;;   somehow modify them to become inelegible for delay slots if a decision\n ;;   is made that makes conditional execution required.\n \n-(define_attr \"tune\" \"none,arc600,arc700_4_2_std,arc700_4_2_xmac\"\n+(define_attr \"tune\" \"none,arc600,arc700_4_2_std,arc700_4_2_xmac, core_3\"\n   (const\n    (cond [(symbol_ref \"arc_tune == TUNE_ARC600\")\n \t  (const_string \"arc600\")\n \t  (symbol_ref \"arc_tune == TUNE_ARC700_4_2_STD\")\n \t  (const_string \"arc700_4_2_std\")\n \t  (symbol_ref \"arc_tune == TUNE_ARC700_4_2_XMAC\")\n-\t  (const_string \"arc700_4_2_xmac\")]\n+\t  (const_string \"arc700_4_2_xmac\")\n+\t  (symbol_ref \"arc_tune == ARC_TUNE_CORE_3\")\n+\t  (const_string \"core_3\")]\n \t (const_string \"none\"))))\n \n (define_attr \"tune_arc700\" \"false,true\"\n@@ -5182,11 +5184,11 @@\n \t(plus:SI (match_dup 0)\n \t\t (const_int -1)))\n    (clobber (match_scratch:SI 2 \"=X,r\"))]\n-  \"TARGET_V2\"\n+  \"TARGET_DBNZ\"\n   \"@\n    dbnz%#\\\\t%0,%l1\n    #\"\n-  \"TARGET_V2 && reload_completed && memory_operand (operands[0], SImode)\"\n+  \"TARGET_DBNZ && reload_completed && memory_operand (operands[0], SImode)\"\n   [(set (match_dup 2) (match_dup 0))\n    (set (match_dup 2) (plus:SI (match_dup 2) (const_int -1)))\n    (set (reg:CC CC_REG) (compare:CC (match_dup 2) (const_int 0)))"}, {"sha": "0c3cdf22316c799cfc979b2d193304e7d2e33333", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f2664539efdced7387a13c2e9a6465f5867c0f/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f2664539efdced7387a13c2e9a6465f5867c0f/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=62f2664539efdced7387a13c2e9a6465f5867c0f", "patch": "@@ -249,29 +249,33 @@ mmultcost=\n Target RejectNegative Joined UInteger Var(arc_multcost) Init(-1)\n Cost to assume for a multiply instruction, with 4 being equal to a normal insn.\n \n-mtune=ARC600\n-Target RejectNegative Var(arc_tune, TUNE_ARC600)\n-Tune for ARC600 cpu.\n+mtune=\n+Target RejectNegative ToLower Joined Var(arc_tune) Enum(arc_tune_attr) Init(ARC_TUNE_NONE)\n+-mcpu=TUNE Tune code for given ARC variant.\n \n-mtune=ARC601\n-Target RejectNegative Var(arc_tune, TUNE_ARC600)\n-Tune for ARC601 cpu.\n+Enum\n+Name(arc_tune_attr) Type(int)\n+\n+EnumValue\n+Enum(arc_tune_attr) String(arc600) Value(ARC_TUNE_ARC600)\n \n-mtune=ARC700\n-Target RejectNegative Var(arc_tune, TUNE_ARC700_4_2_STD)\n-Tune for ARC700 R4.2 Cpu with standard multiplier block.\n+EnumValue\n+Enum(arc_tune_attr) String(arc601) Value(ARC_TUNE_ARC600)\n \n-mtune=ARC700-xmac\n-Target RejectNegative Var(arc_tune, TUNE_ARC700_4_2_XMAC)\n-Tune for ARC700 R4.2 Cpu with XMAC block.\n+EnumValue\n+Enum(arc_tune_attr) String(arc700) Value(ARC_TUNE_ARC700_4_2_STD)\n \n-mtune=ARC725D\n-Target RejectNegative Var(arc_tune, TUNE_ARC700_4_2_XMAC)\n-Tune for ARC700 R4.2 Cpu with XMAC block.\n+EnumValue\n+Enum(arc_tune_attr) String(arc700-xmac) Value(ARC_TUNE_ARC700_4_2_XMAC)\n \n-mtune=ARC750D\n-Target RejectNegative Var(arc_tune, TUNE_ARC700_4_2_XMAC)\n-Tune for ARC700 R4.2 Cpu with XMAC block.\n+EnumValue\n+Enum(arc_tune_attr) String(arc725d) Value(ARC_TUNE_ARC700_4_2_XMAC)\n+\n+EnumValue\n+Enum(arc_tune_attr) String(arc750d) Value(ARC_TUNE_ARC700_4_2_XMAC)\n+\n+EnumValue\n+Enum(arc_tune_attr) String(core3) Value(ARC_TUNE_CORE_3)\n \n mindexed-loads\n Target Var(TARGET_INDEXED_LOADS) Init(TARGET_INDEXED_LOADS_DEFAULT)"}]}