{"sha": "fbc932e72cff3eb14122acb92415bbc0def82d74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJjOTMyZTcyY2ZmM2ViMTQxMjJhY2I5MjQxNWJiYzBkZWY4MmQ3NA==", "commit": {"author": {"name": "Edmar Wienskoski", "email": "edmar@freescale.com", "date": "2012-06-04T18:44:53Z"}, "committer": {"name": "Edmar Wienskoski", "email": "edmarwjr@gcc.gnu.org", "date": "2012-06-04T18:44:53Z"}, "message": "re PR target/53559 (ICE on altivec builtins stv[l|r]x[l])\n\n2012-06-04  Edmar Wienskoski  <edmar@freescale.com>\n\n\tPR target/53559\n\t* config/rs6000/altivec.md (altivec_stvlx): Change machine mode of\n\toperands.\n\t(altivec_stvlxl): Ditto.\n\t(altivec_stvrx): Ditto.\n\t(altivec_stvrxl): Ditto.\n\ngcc/testsuite\n2012-06-04  Edmar Wienskoski  <edmar@freescale.com>\n\n\tPR target/53559\n\t* gcc.target/powerpc/cell_builtin_1.c: New test case.\n\t* gcc.target/powerpc/cell_builtin_2.c: Ditto.\n\t* gcc.target/powerpc/cell_builtin_3.c: Ditto.\n\t* gcc.target/powerpc/cell_builtin_4.c: Ditto.\n\t* gcc.target/powerpc/cell_builtin_5.c: Ditto.\n\t* gcc.target/powerpc/cell_builtin_6.c: Ditto.\n\t* gcc.target/powerpc/cell_builtin_7.c: Ditto.\n\t* gcc.target/powerpc/cell_builtin_8.c: Ditto.\n\nFrom-SVN: r188200", "tree": {"sha": "08595c9e0a80a0c62939ac42b7d76ea4814831d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08595c9e0a80a0c62939ac42b7d76ea4814831d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbc932e72cff3eb14122acb92415bbc0def82d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbc932e72cff3eb14122acb92415bbc0def82d74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbc932e72cff3eb14122acb92415bbc0def82d74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbc932e72cff3eb14122acb92415bbc0def82d74/comments", "author": null, "committer": null, "parents": [{"sha": "165f639ceabc15665a5afe65b07a50fd0c18ce58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165f639ceabc15665a5afe65b07a50fd0c18ce58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/165f639ceabc15665a5afe65b07a50fd0c18ce58"}], "stats": {"total": 421, "additions": 413, "deletions": 8}, "files": [{"sha": "2cf78684a9212ec4bc310ea0153ad5f157a0e22c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbc932e72cff3eb14122acb92415bbc0def82d74", "patch": "@@ -1,3 +1,12 @@\n+2012-06-04  Edmar Wienskoski  <edmar@freescale.com>\n+\n+\tPR target/53559\n+\t* config/rs6000/altivec.md (altivec_stvlx): Change machine mode of\n+\toperands.\n+\t(altivec_stvlxl): Ditto.\n+\t(altivec_stvrx): Ditto.\n+\t(altivec_stvrxl): Ditto.\n+\n 2012-06-04  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* ira-int.h (struct target_ira_int): Add member"}, {"sha": "fd4bc9d353badd17ae9d9087ae2233b8df6fe4ea", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=fbc932e72cff3eb14122acb92415bbc0def82d74", "patch": "@@ -2380,35 +2380,35 @@\n \n (define_insn \"altivec_stvlx\"\n   [(parallel\n-    [(set (match_operand:V4SI 0 \"memory_operand\" \"=Z\")\n-\t  (match_operand:V4SI 1 \"register_operand\" \"v\"))\n+    [(set (match_operand:V16QI 0 \"memory_operand\" \"=Z\")\n+\t  (match_operand:V16QI 1 \"register_operand\" \"v\"))\n      (unspec [(const_int 0)] UNSPEC_STVLX)])]\n   \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n   \"stvlx %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n (define_insn \"altivec_stvlxl\"\n   [(parallel\n-    [(set (match_operand:V4SI 0 \"memory_operand\" \"=Z\")\n-\t  (match_operand:V4SI 1 \"register_operand\" \"v\"))\n+    [(set (match_operand:V16QI 0 \"memory_operand\" \"=Z\")\n+\t  (match_operand:V16QI 1 \"register_operand\" \"v\"))\n      (unspec [(const_int 0)] UNSPEC_STVLXL)])]\n   \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n   \"stvlxl %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n (define_insn \"altivec_stvrx\"\n   [(parallel\n-    [(set (match_operand:V4SI 0 \"memory_operand\" \"=Z\")\n-\t  (match_operand:V4SI 1 \"register_operand\" \"v\"))\n+    [(set (match_operand:V16QI 0 \"memory_operand\" \"=Z\")\n+\t  (match_operand:V16QI 1 \"register_operand\" \"v\"))\n      (unspec [(const_int 0)] UNSPEC_STVRX)])]\n   \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n   \"stvrx %1,%y0\"\n   [(set_attr \"type\" \"vecstore\")])\n \n (define_insn \"altivec_stvrxl\"\n   [(parallel\n-    [(set (match_operand:V4SI 0 \"memory_operand\" \"=Z\")\n-\t  (match_operand:V4SI 1 \"register_operand\" \"v\"))\n+    [(set (match_operand:V16QI 0 \"memory_operand\" \"=Z\")\n+\t  (match_operand:V16QI 1 \"register_operand\" \"v\"))\n      (unspec [(const_int 0)] UNSPEC_STVRXL)])]\n   \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n   \"stvrxl %1,%y0\""}, {"sha": "f9d5e93a6073db9448f3867aff408923453f5551", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fbc932e72cff3eb14122acb92415bbc0def82d74", "patch": "@@ -1,3 +1,15 @@\n+2012-06-04  Edmar Wienskoski  <edmar@freescale.com>\n+\n+\tPR target/53559\n+\t* gcc.target/powerpc/cell_builtin_1.c: New test case.\n+\t* gcc.target/powerpc/cell_builtin_2.c: Ditto.\n+\t* gcc.target/powerpc/cell_builtin_3.c: Ditto.\n+\t* gcc.target/powerpc/cell_builtin_4.c: Ditto.\n+\t* gcc.target/powerpc/cell_builtin_5.c: Ditto.\n+\t* gcc.target/powerpc/cell_builtin_6.c: Ditto.\n+\t* gcc.target/powerpc/cell_builtin_7.c: Ditto.\n+\t* gcc.target/powerpc/cell_builtin_8.c: Ditto.\n+\n 2012-06-04  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* g++.dg/debug/dwarf2/nested-3.C: Allow for | comments."}, {"sha": "f2bc7ffb3c4e2e8b98331a40e0ee5f47d279c049", "filename": "gcc/testsuite/gcc.target/powerpc/cell_builtin-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-1.c?ref=fbc932e72cff3eb14122acb92415bbc0def82d74", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-O2 -maltivec -mcpu=cell\" } */\n+/* { dg-final { scan-assembler-times \"lvlx\" 19 } } */\n+\n+#include <altivec.h>\n+\n+typedef __vector signed char vsc;\n+typedef __vector signed short vss;\n+typedef __vector signed int vsi;\n+typedef __vector unsigned char vuc;\n+typedef __vector unsigned short vus;\n+typedef __vector unsigned int vui;\n+typedef __vector bool char vbc;\n+typedef __vector bool short vbs;\n+typedef __vector bool int vbi;\n+typedef __vector float vsf;\n+typedef __vector pixel vp;\n+typedef signed char sc;\n+typedef signed short ss;\n+typedef signed int si;\n+typedef signed long sl;\n+typedef unsigned char uc;\n+typedef unsigned short us;\n+typedef unsigned int ui;\n+typedef unsigned long ul;\n+typedef float sf;\n+\n+vsc  lc1(long a, void *p)           { return __builtin_altivec_lvlx (a,p); }\n+vsf  llx01(long a, vsf *p)          { return __builtin_vec_lvlx (a,p); }\n+vsf  llx02(long a, sf *p)           { return __builtin_vec_lvlx (a,p); }\n+vbi  llx03(long a, vbi *p)          { return __builtin_vec_lvlx (a,p); }\n+vsi  llx04(long a, vsi *p)          { return __builtin_vec_lvlx (a,p); }\n+vsi  llx05(long a, si *p)           { return __builtin_vec_lvlx (a,p); }\n+vui  llx06(long a, vui *p)          { return __builtin_vec_lvlx (a,p); }\n+vui  llx07(long a, ui *p)           { return __builtin_vec_lvlx (a,p); }\n+vbs  llx08(long a, vbs *p)          { return __builtin_vec_lvlx (a,p); }\n+vp   llx09(long a, vp *p)           { return __builtin_vec_lvlx (a,p); }\n+vss  llx10(long a, vss *p)          { return __builtin_vec_lvlx (a,p); }\n+vss  llx11(long a, ss *p)           { return __builtin_vec_lvlx (a,p); }\n+vus  llx12(long a, vus *p)          { return __builtin_vec_lvlx (a,p); }\n+vus  llx13(long a, us *p)           { return __builtin_vec_lvlx (a,p); }\n+vbc  llx14(long a, vbc *p)          { return __builtin_vec_lvlx (a,p); }\n+vsc  llx15(long a, vsc *p)          { return __builtin_vec_lvlx (a,p); }\n+vsc  llx16(long a, sc *p)           { return __builtin_vec_lvlx (a,p); }\n+vuc  llx17(long a, vuc *p)          { return __builtin_vec_lvlx (a,p); }\n+vuc  llx18(long a, uc *p)           { return __builtin_vec_lvlx (a,p); }"}, {"sha": "220be571659336b79c034c99504de84ab448ed6b", "filename": "gcc/testsuite/gcc.target/powerpc/cell_builtin-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-2.c?ref=fbc932e72cff3eb14122acb92415bbc0def82d74", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-O2 -maltivec -mcpu=cell\" } */\n+/* { dg-final { scan-assembler-times \"lvlxl\" 19 } } */\n+\n+#include <altivec.h>\n+\n+typedef __vector signed char vsc;\n+typedef __vector signed short vss;\n+typedef __vector signed int vsi;\n+typedef __vector unsigned char vuc;\n+typedef __vector unsigned short vus;\n+typedef __vector unsigned int vui;\n+typedef __vector bool char vbc;\n+typedef __vector bool short vbs;\n+typedef __vector bool int vbi;\n+typedef __vector float vsf;\n+typedef __vector pixel vp;\n+typedef signed char sc;\n+typedef signed short ss;\n+typedef signed int si;\n+typedef signed long sl;\n+typedef unsigned char uc;\n+typedef unsigned short us;\n+typedef unsigned int ui;\n+typedef unsigned long ul;\n+typedef float sf;\n+\n+vsc  lc2(long a, void *p)           { return __builtin_altivec_lvlxl (a,p); }\n+vsf  llxl01(long a, vsf *p)         { return __builtin_vec_lvlxl (a,p); }\n+vsf  llxl02(long a, sf *p)          { return __builtin_vec_lvlxl (a,p); }\n+vbi  llxl03(long a, vbi *p)         { return __builtin_vec_lvlxl (a,p); }\n+vsi  llxl04(long a, vsi *p)         { return __builtin_vec_lvlxl (a,p); }\n+vsi  llxl05(long a, si *p)          { return __builtin_vec_lvlxl (a,p); }\n+vui  llxl06(long a, vui *p)         { return __builtin_vec_lvlxl (a,p); }\n+vui  llxl07(long a, ui *p)          { return __builtin_vec_lvlxl (a,p); }\n+vbs  llxl08(long a, vbs *p)         { return __builtin_vec_lvlxl (a,p); }\n+vp   llxl09(long a, vp *p)          { return __builtin_vec_lvlxl (a,p); }\n+vss  llxl10(long a, vss *p)         { return __builtin_vec_lvlxl (a,p); }\n+vss  llxl11(long a, ss *p)          { return __builtin_vec_lvlxl (a,p); }\n+vus  llxl12(long a, vus *p)         { return __builtin_vec_lvlxl (a,p); }\n+vus  llxl13(long a, us *p)          { return __builtin_vec_lvlxl (a,p); }\n+vbc  llxl14(long a, vbc *p)         { return __builtin_vec_lvlxl (a,p); }\n+vsc  llxl15(long a, vsc *p)         { return __builtin_vec_lvlxl (a,p); }\n+vsc  llxl16(long a, sc *p)          { return __builtin_vec_lvlxl (a,p); }\n+vuc  llxl17(long a, vuc *p)         { return __builtin_vec_lvlxl (a,p); }\n+vuc  llxl18(long a, uc *p)          { return __builtin_vec_lvlxl (a,p); }"}, {"sha": "4b437291ea57b75631622e8048d4620807780290", "filename": "gcc/testsuite/gcc.target/powerpc/cell_builtin-3.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-3.c?ref=fbc932e72cff3eb14122acb92415bbc0def82d74", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-O2 -maltivec -mcpu=cell\" } */\n+/* { dg-final { scan-assembler-times \"lvrx\" 19 } } */\n+\n+#include <altivec.h>\n+\n+typedef __vector signed char vsc;\n+typedef __vector signed short vss;\n+typedef __vector signed int vsi;\n+typedef __vector unsigned char vuc;\n+typedef __vector unsigned short vus;\n+typedef __vector unsigned int vui;\n+typedef __vector bool char vbc;\n+typedef __vector bool short vbs;\n+typedef __vector bool int vbi;\n+typedef __vector float vsf;\n+typedef __vector pixel vp;\n+typedef signed char sc;\n+typedef signed short ss;\n+typedef signed int si;\n+typedef signed long sl;\n+typedef unsigned char uc;\n+typedef unsigned short us;\n+typedef unsigned int ui;\n+typedef unsigned long ul;\n+typedef float sf;\n+\n+vsc  lc3(long a, void *p)           { return __builtin_altivec_lvrx (a,p); }\n+vsf  lrx01(long a, vsf *p)          { return __builtin_vec_lvrx (a,p); }\n+vsf  lrx02(long a, sf *p)           { return __builtin_vec_lvrx (a,p); }\n+vbi  lrx03(long a, vbi *p)          { return __builtin_vec_lvrx (a,p); }\n+vsi  lrx04(long a, vsi *p)          { return __builtin_vec_lvrx (a,p); }\n+vsi  lrx05(long a, si *p)           { return __builtin_vec_lvrx (a,p); }\n+vui  lrx06(long a, vui *p)          { return __builtin_vec_lvrx (a,p); }\n+vui  lrx07(long a, ui *p)           { return __builtin_vec_lvrx (a,p); }\n+vbs  lrx08(long a, vbs *p)          { return __builtin_vec_lvrx (a,p); }\n+vp   lrx09(long a, vp *p)           { return __builtin_vec_lvrx (a,p); }\n+vss  lrx10(long a, vss *p)          { return __builtin_vec_lvrx (a,p); }\n+vss  lrx11(long a, ss *p)           { return __builtin_vec_lvrx (a,p); }\n+vus  lrx12(long a, vus *p)          { return __builtin_vec_lvrx (a,p); }\n+vus  lrx13(long a, us *p)           { return __builtin_vec_lvrx (a,p); }\n+vbc  lrx14(long a, vbc *p)          { return __builtin_vec_lvrx (a,p); }\n+vsc  lrx15(long a, vsc *p)          { return __builtin_vec_lvrx (a,p); }\n+vsc  lrx16(long a, sc *p)           { return __builtin_vec_lvrx (a,p); }\n+vuc  lrx17(long a, vuc *p)          { return __builtin_vec_lvrx (a,p); }\n+vuc  lrx18(long a, uc *p)           { return __builtin_vec_lvrx (a,p); }"}, {"sha": "d73328ac43e5537fe1ccec5d2dc79fd824925b73", "filename": "gcc/testsuite/gcc.target/powerpc/cell_builtin-4.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-4.c?ref=fbc932e72cff3eb14122acb92415bbc0def82d74", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-O2 -maltivec -mcpu=cell\" } */\n+/* { dg-final { scan-assembler-times \"lvrxl\" 19 } } */\n+\n+#include <altivec.h>\n+\n+typedef __vector signed char vsc;\n+typedef __vector signed short vss;\n+typedef __vector signed int vsi;\n+typedef __vector unsigned char vuc;\n+typedef __vector unsigned short vus;\n+typedef __vector unsigned int vui;\n+typedef __vector bool char vbc;\n+typedef __vector bool short vbs;\n+typedef __vector bool int vbi;\n+typedef __vector float vsf;\n+typedef __vector pixel vp;\n+typedef signed char sc;\n+typedef signed short ss;\n+typedef signed int si;\n+typedef signed long sl;\n+typedef unsigned char uc;\n+typedef unsigned short us;\n+typedef unsigned int ui;\n+typedef unsigned long ul;\n+typedef float sf;\n+\n+vsc  lc4(long a, void *p)           { return __builtin_altivec_lvrxl (a,p); }\n+vsf  lrxl01(long a, vsf *p)         { return __builtin_vec_lvrxl (a,p); }\n+vsf  lrxl02(long a, sf *p)          { return __builtin_vec_lvrxl (a,p); }\n+vbi  lrxl03(long a, vbi *p)         { return __builtin_vec_lvrxl (a,p); }\n+vsi  lrxl04(long a, vsi *p)         { return __builtin_vec_lvrxl (a,p); }\n+vsi  lrxl05(long a, si *p)          { return __builtin_vec_lvrxl (a,p); }\n+vui  lrxl06(long a, vui *p)         { return __builtin_vec_lvrxl (a,p); }\n+vui  lrxl07(long a, ui *p)          { return __builtin_vec_lvrxl (a,p); }\n+vbs  lrxl08(long a, vbs *p)         { return __builtin_vec_lvrxl (a,p); }\n+vp   lrxl09(long a, vp *p)          { return __builtin_vec_lvrxl (a,p); }\n+vss  lrxl10(long a, vss *p)         { return __builtin_vec_lvrxl (a,p); }\n+vss  lrxl11(long a, ss *p)          { return __builtin_vec_lvrxl (a,p); }\n+vus  lrxl12(long a, vus *p)         { return __builtin_vec_lvrxl (a,p); }\n+vus  lrxl13(long a, us *p)          { return __builtin_vec_lvrxl (a,p); }\n+vbc  lrxl14(long a, vbc *p)         { return __builtin_vec_lvrxl (a,p); }\n+vsc  lrxl15(long a, vsc *p)         { return __builtin_vec_lvrxl (a,p); }\n+vsc  lrxl16(long a, sc *p)          { return __builtin_vec_lvrxl (a,p); }\n+vuc  lrxl17(long a, vuc *p)         { return __builtin_vec_lvrxl (a,p); }\n+vuc  lrxl18(long a, uc *p)          { return __builtin_vec_lvrxl (a,p); }"}, {"sha": "cc6adba8050f08fc7fb55dff49cc52709062bc9e", "filename": "gcc/testsuite/gcc.target/powerpc/cell_builtin-5.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-5.c?ref=fbc932e72cff3eb14122acb92415bbc0def82d74", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-O2 -maltivec -mcpu=cell\" } */\n+/* { dg-final { scan-assembler-times \"stvlx\" 19 } } */\n+\n+#include <altivec.h>\n+\n+typedef __vector signed char vsc;\n+typedef __vector signed short vss;\n+typedef __vector signed int vsi;\n+typedef __vector unsigned char vuc;\n+typedef __vector unsigned short vus;\n+typedef __vector unsigned int vui;\n+typedef __vector bool char vbc;\n+typedef __vector bool short vbs;\n+typedef __vector bool int vbi;\n+typedef __vector float vsf;\n+typedef __vector pixel vp;\n+typedef signed char sc;\n+typedef signed short ss;\n+typedef signed int si;\n+typedef signed long sl;\n+typedef unsigned char uc;\n+typedef unsigned short us;\n+typedef unsigned int ui;\n+typedef unsigned long ul;\n+typedef float sf;\n+\n+void sc1(vsc v, long a, void *p)    { __builtin_altivec_stvlx (v,a,p); }\n+void slx01(vsf v, long a, vsf *p)   { __builtin_vec_stvlx (v,a,p); }\n+void slx02(vsf v, long a, sf *p)    { __builtin_vec_stvlx (v,a,p); }\n+void slx03(vbi v, long a, vbi *p)   { __builtin_vec_stvlx (v,a,p); }\n+void slx04(vsi v, long a, vsi *p)   { __builtin_vec_stvlx (v,a,p); }\n+void slx05(vsi v, long a, si *p)    { __builtin_vec_stvlx (v,a,p); }\n+void slx06(vui v, long a, vui *p)   { __builtin_vec_stvlx (v,a,p); }\n+void slx07(vui v, long a, ui *p)    { __builtin_vec_stvlx (v,a,p); }\n+void slx08(vbs v, long a, vbs *p)   { __builtin_vec_stvlx (v,a,p); }\n+void slx09(vp v, long a, vp *p)     { __builtin_vec_stvlx (v,a,p); }\n+void slx10(vss v, long a, vss *p)   { __builtin_vec_stvlx (v,a,p); }\n+void slx11(vss v, long a, ss *p)    { __builtin_vec_stvlx (v,a,p); }\n+void slx12(vus v, long a, vus *p)   { __builtin_vec_stvlx (v,a,p); }\n+void slx13(vus v, long a, us *p)    { __builtin_vec_stvlx (v,a,p); }\n+void slx14(vbc v, long a, vbc *p)   { __builtin_vec_stvlx (v,a,p); }\n+void slx15(vsc v, long a, vsc *p)   { __builtin_vec_stvlx (v,a,p); }\n+void slx16(vsc v, long a, sc *p)    { __builtin_vec_stvlx (v,a,p); }\n+void slx17(vuc v, long a, vuc *p)   { __builtin_vec_stvlx (v,a,p); }\n+void slx18(vuc v, long a, uc *p)    { __builtin_vec_stvlx (v,a,p); }"}, {"sha": "9c748d973d881ceec74c86314031bbdc65a8085b", "filename": "gcc/testsuite/gcc.target/powerpc/cell_builtin-6.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-6.c?ref=fbc932e72cff3eb14122acb92415bbc0def82d74", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-O2 -maltivec -mcpu=cell\" } */\n+/* { dg-final { scan-assembler-times \"stvlxl\" 19 } } */\n+\n+#include <altivec.h>\n+\n+typedef __vector signed char vsc;\n+typedef __vector signed short vss;\n+typedef __vector signed int vsi;\n+typedef __vector unsigned char vuc;\n+typedef __vector unsigned short vus;\n+typedef __vector unsigned int vui;\n+typedef __vector bool char vbc;\n+typedef __vector bool short vbs;\n+typedef __vector bool int vbi;\n+typedef __vector float vsf;\n+typedef __vector pixel vp;\n+typedef signed char sc;\n+typedef signed short ss;\n+typedef signed int si;\n+typedef signed long sl;\n+typedef unsigned char uc;\n+typedef unsigned short us;\n+typedef unsigned int ui;\n+typedef unsigned long ul;\n+typedef float sf;\n+\n+void sc2(vsc v, long a, void *p)    { __builtin_altivec_stvlxl (v,a,p); }\n+void slxl01(vsf v, long a, vsf *p)  { __builtin_vec_stvlxl (v,a,p); }\n+void slxl02(vsf v, long a, sf *p)   { __builtin_vec_stvlxl (v,a,p); }\n+void slxl03(vbi v, long a, vbi *p)  { __builtin_vec_stvlxl (v,a,p); }\n+void slxl04(vsi v, long a, vsi *p)  { __builtin_vec_stvlxl (v,a,p); }\n+void slxl05(vsi v, long a, si *p)   { __builtin_vec_stvlxl (v,a,p); }\n+void slxl06(vui v, long a, vui *p)  { __builtin_vec_stvlxl (v,a,p); }\n+void slxl07(vui v, long a, ui *p)   { __builtin_vec_stvlxl (v,a,p); }\n+void slxl08(vbs v, long a, vbs *p)  { __builtin_vec_stvlxl (v,a,p); }\n+void slxl09(vp v, long a, vp *p)    { __builtin_vec_stvlxl (v,a,p); }\n+void slxl10(vss v, long a, vss *p)  { __builtin_vec_stvlxl (v,a,p); }\n+void slxl11(vss v, long a, ss *p)   { __builtin_vec_stvlxl (v,a,p); }\n+void slxl12(vus v, long a, vus *p)  { __builtin_vec_stvlxl (v,a,p); }\n+void slxl13(vus v, long a, us *p)   { __builtin_vec_stvlxl (v,a,p); }\n+void slxl14(vbc v, long a, vbc *p)  { __builtin_vec_stvlxl (v,a,p); }\n+void slxl15(vsc v, long a, vsc *p)  { __builtin_vec_stvlxl (v,a,p); }\n+void slxl16(vsc v, long a, sc *p)   { __builtin_vec_stvlxl (v,a,p); }\n+void slxl17(vuc v, long a, vuc *p)  { __builtin_vec_stvlxl (v,a,p); }\n+void slxl18(vuc v, long a, uc *p)   { __builtin_vec_stvlxl (v,a,p); }"}, {"sha": "abdb3b0caf1af783cf31b01968ab256223fc097a", "filename": "gcc/testsuite/gcc.target/powerpc/cell_builtin-7.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-7.c?ref=fbc932e72cff3eb14122acb92415bbc0def82d74", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-O2 -maltivec -mcpu=cell\" } */\n+/* { dg-final { scan-assembler-times \"stvrx\" 19 } } */\n+\n+#include <altivec.h>\n+\n+typedef __vector signed char vsc;\n+typedef __vector signed short vss;\n+typedef __vector signed int vsi;\n+typedef __vector unsigned char vuc;\n+typedef __vector unsigned short vus;\n+typedef __vector unsigned int vui;\n+typedef __vector bool char vbc;\n+typedef __vector bool short vbs;\n+typedef __vector bool int vbi;\n+typedef __vector float vsf;\n+typedef __vector pixel vp;\n+typedef signed char sc;\n+typedef signed short ss;\n+typedef signed int si;\n+typedef signed long sl;\n+typedef unsigned char uc;\n+typedef unsigned short us;\n+typedef unsigned int ui;\n+typedef unsigned long ul;\n+typedef float sf;\n+\n+void sc3(vsc v, long a, void *p)    { __builtin_altivec_stvrx (v,a,p); }\n+void srx01(vsf v, long a, vsf *p)   { __builtin_vec_stvrx (v,a,p); }\n+void srx02(vsf v, long a, sf *p)    { __builtin_vec_stvrx (v,a,p); }\n+void srx03(vbi v, long a, vbi *p)   { __builtin_vec_stvrx (v,a,p); }\n+void srx04(vsi v, long a, vsi *p)   { __builtin_vec_stvrx (v,a,p); }\n+void srx05(vsi v, long a, si *p)    { __builtin_vec_stvrx (v,a,p); }\n+void srx06(vui v, long a, vui *p)   { __builtin_vec_stvrx (v,a,p); }\n+void srx07(vui v, long a, ui *p)    { __builtin_vec_stvrx (v,a,p); }\n+void srx08(vbs v, long a, vbs *p)   { __builtin_vec_stvrx (v,a,p); }\n+void srx09(vp v, long a, vp *p)     { __builtin_vec_stvrx (v,a,p); }\n+void srx10(vss v, long a, vss *p)   { __builtin_vec_stvrx (v,a,p); }\n+void srx11(vss v, long a, ss *p)    { __builtin_vec_stvrx (v,a,p); }\n+void srx12(vus v, long a, vus *p)   { __builtin_vec_stvrx (v,a,p); }\n+void srx13(vus v, long a, us *p)    { __builtin_vec_stvrx (v,a,p); }\n+void srx14(vbc v, long a, vbc *p)   { __builtin_vec_stvrx (v,a,p); }\n+void srx15(vsc v, long a, vsc *p)   { __builtin_vec_stvrx (v,a,p); }\n+void srx16(vsc v, long a, sc *p)    { __builtin_vec_stvrx (v,a,p); }\n+void srx17(vuc v, long a, vuc *p)   { __builtin_vec_stvrx (v,a,p); }\n+void srx18(vuc v, long a, uc *p)    { __builtin_vec_stvrx (v,a,p); }"}, {"sha": "ec7fc3031b4161d73dbf5f43d8a7ba98355c7b78", "filename": "gcc/testsuite/gcc.target/powerpc/cell_builtin-8.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbc932e72cff3eb14122acb92415bbc0def82d74/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcell_builtin-8.c?ref=fbc932e72cff3eb14122acb92415bbc0def82d74", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-O2 -maltivec -mcpu=cell\" } */\n+/* { dg-final { scan-assembler-times \"stvrxl\" 19 } } */\n+\n+#include <altivec.h>\n+\n+typedef __vector signed char vsc;\n+typedef __vector signed short vss;\n+typedef __vector signed int vsi;\n+typedef __vector unsigned char vuc;\n+typedef __vector unsigned short vus;\n+typedef __vector unsigned int vui;\n+typedef __vector bool char vbc;\n+typedef __vector bool short vbs;\n+typedef __vector bool int vbi;\n+typedef __vector float vsf;\n+typedef __vector pixel vp;\n+typedef signed char sc;\n+typedef signed short ss;\n+typedef signed int si;\n+typedef signed long sl;\n+typedef unsigned char uc;\n+typedef unsigned short us;\n+typedef unsigned int ui;\n+typedef unsigned long ul;\n+typedef float sf;\n+\n+void sc4(vsc v, long a, void *p)    { __builtin_altivec_stvrxl (v,a,p); }\n+void srxl01(vsf v, long a, vsf *p)  { __builtin_vec_stvrxl (v,a,p); }\n+void srxl02(vsf v, long a, sf *p)   { __builtin_vec_stvrxl (v,a,p); }\n+void srxl03(vbi v, long a, vbi *p)  { __builtin_vec_stvrxl (v,a,p); }\n+void srxl04(vsi v, long a, vsi *p)  { __builtin_vec_stvrxl (v,a,p); }\n+void srxl05(vsi v, long a, si *p)   { __builtin_vec_stvrxl (v,a,p); }\n+void srxl06(vui v, long a, vui *p)  { __builtin_vec_stvrxl (v,a,p); }\n+void srxl07(vui v, long a, ui *p)   { __builtin_vec_stvrxl (v,a,p); }\n+void srxl08(vbs v, long a, vbs *p)  { __builtin_vec_stvrxl (v,a,p); }\n+void srxl09(vp v, long a, vp *p)    { __builtin_vec_stvrxl (v,a,p); }\n+void srxl10(vss v, long a, vss *p)  { __builtin_vec_stvrxl (v,a,p); }\n+void srxl11(vss v, long a, ss *p)   { __builtin_vec_stvrxl (v,a,p); }\n+void srxl12(vus v, long a, vus *p)  { __builtin_vec_stvrxl (v,a,p); }\n+void srxl13(vus v, long a, us *p)   { __builtin_vec_stvrxl (v,a,p); }\n+void srxl14(vbc v, long a, vbc *p)  { __builtin_vec_stvrxl (v,a,p); }\n+void srxl15(vsc v, long a, vsc *p)  { __builtin_vec_stvrxl (v,a,p); }\n+void srxl16(vsc v, long a, sc *p)   { __builtin_vec_stvrxl (v,a,p); }\n+void srxl17(vuc v, long a, vuc *p)  { __builtin_vec_stvrxl (v,a,p); }\n+void srxl18(vuc v, long a, uc *p)   { __builtin_vec_stvrxl (v,a,p); }"}]}