{"sha": "71271702b7edd7f6ba2d45835d643e2be3abb155", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyNzE3MDJiN2VkZDdmNmJhMmQ0NTgzNWQ2NDNlMmJlM2FiYjE1NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-09-07T15:40:51Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-09-07T15:40:51Z"}, "message": "Back out previous change\n\nFrom-SVN: r22311", "tree": {"sha": "9fc5faae3b555e52159ed79366ecd8c30c555bf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fc5faae3b555e52159ed79366ecd8c30c555bf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71271702b7edd7f6ba2d45835d643e2be3abb155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71271702b7edd7f6ba2d45835d643e2be3abb155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71271702b7edd7f6ba2d45835d643e2be3abb155", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71271702b7edd7f6ba2d45835d643e2be3abb155/comments", "author": null, "committer": null, "parents": [{"sha": "8251199e44be354aafd37dd69b56a4b1f9620120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8251199e44be354aafd37dd69b56a4b1f9620120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8251199e44be354aafd37dd69b56a4b1f9620120"}], "stats": {"total": 2498, "additions": 2, "deletions": 2496}, "files": [{"sha": "05ffca78dc68702493410b0ab01082f9d9bd3fd3", "filename": "gcc/cp/cp-error.def", "status": "removed", "additions": 0, "deletions": 2469, "changes": 2469, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8251199e44be354aafd37dd69b56a4b1f9620120/gcc%2Fcp%2Fcp-error.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8251199e44be354aafd37dd69b56a4b1f9620120/gcc%2Fcp%2Fcp-error.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-error.def?ref=8251199e44be354aafd37dd69b56a4b1f9620120"}, {"sha": "6751d87af85d4f55e9126f522062877b56bee126", "filename": "gcc/invoke.texi", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71271702b7edd7f6ba2d45835d643e2be3abb155/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71271702b7edd7f6ba2d45835d643e2be3abb155/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=71271702b7edd7f6ba2d45835d643e2be3abb155", "patch": "@@ -108,7 +108,7 @@ in the following sections.\n -fname-mangling-version-@var{n}  -fno-default-inline  \n -fno-gnu-keywords -fnonnull-objects -fguiding-decls\n -foperator-names  -fno-optional-diags -fstrict-prototype  -fthis-is-variable\n--ftemplate-depth-@var{n} -fdiag-codes -nostdinc++  -traditional  +e@var{n}\n+-ftemplate-depth-@var{n}  -nostdinc++  -traditional  +e@var{n}\n @end smallexample\n \n @item Warning Options\n@@ -129,7 +129,7 @@ in the following sections.\n -Wreturn-type -Wshadow  -Wsign-compare  -Wstrict-prototypes  \n -Wswitch -Wsynth  -Wtemplate-debugging  -Wtraditional  \n -Wtrigraphs -Wundef  -Wuninitialized  -Wunused  -Wwrite-strings\n--Wunknown-pragmas -Wnumber-@var{n}\n+-Wunknown-pragmas\n @end smallexample\n \n @item Debugging Options\n@@ -1165,19 +1165,6 @@ A limit on the template instantiation depth is needed to detect\n endless recursions during template class instantiation. ANSI/ISO C++\n conforming programs must not rely on a maximum depth greater than 17.\n \n-@item -fdiag-codes\n-When printing a diagnostic, also print the corresponding diagnostic\n-code.  The code is printed in square brackets, before the message\n-itself.  For example, you might see something like:\n-\n-@smallexample\n-test.C:3: warning: [62] all member functions in class `C' are private\n-@end smallexample\n-\n-which indicates that this is warning number 62.  Some diagnostics do not\n-(yet) have corresponding code numbers.  This option is useful in\n-conjuction with @samp{-Wnumber-@var{n}}.\n-\n @item -nostdinc++\n Do not search for header files in the standard directories specific to\n C++, but do still search the other standard directories.  (This option\n@@ -1202,7 +1189,6 @@ Do not assume @samp{inline} for functions defined inside a class scope.\n @item -Wold-style-cast\n @itemx -Woverloaded-virtual\n @itemx -Wtemplate-debugging\n-@itemx -Wnumber-@var{n}\n Warnings that apply only to C++ programs.  @xref{Warning\n Options,,Options to Request or Suppress Warnings}.\n \n@@ -1711,11 +1697,6 @@ conformant compiler code but disables the helpful warning.\n Warn if a function can not be inlined, and either it was declared as inline,\n or else the @samp{-finline-functions} option was given.\n \n-@item -Wnumber-@var{n} (C++ only)\n-Enable warning number @var{n}.  (Or, more often, with\n-@samp{-Wno-number-@var{n}}, disable that warning.)  To obtain the\n-appropriate numbers, use @samp{-fdiag-codes}.\n-\n @item -Wold-style-cast\n Warn if an old-style (C-style) cast is used within a program.\n "}, {"sha": "a8dfb1cb2c0800880deb6f0be82e2bc876f02ce1", "filename": "gcc/testsuite/g++.old-deja/g++.other/warn2.C", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8251199e44be354aafd37dd69b56a4b1f9620120/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fwarn2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8251199e44be354aafd37dd69b56a4b1f9620120/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fwarn2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fwarn2.C?ref=8251199e44be354aafd37dd69b56a4b1f9620120", "patch": "@@ -1,6 +0,0 @@\n-// Build don't link:\n-// Special g++ Options: -Wno-number-62\n-\n-class C {\n-  C();\n-};"}]}