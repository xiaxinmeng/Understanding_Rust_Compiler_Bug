{"sha": "556618c1b3931eeee3f9da0c1c4217b4f67d470a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU2NjE4YzFiMzkzMWVlZWUzZjlkYTBjMWM0MjE3YjRmNjdkNDcwYQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-11-26T17:38:20Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-11-26T17:38:20Z"}, "message": "re PR target/46623 (microblaze --enable-werror-always build fails)\n\n\tPR target/46623\n\t* config/microblaze/microblaze.c (microblaze_block_move_straight):\n\tUse XALLOCAVEC.\n\t(microblaze_option_override): Don't use C++ style comments.\n\t(save_restore_insns): Remove unused variable base_offset.\n\t(microblaze_expand_prologue): Remove unused variable insn.\n\t(microblaze_secondary_reload): Adjust type to match target.h .\n\t(microblaze_elf_in_small_data_p): Move declarations to start of block.\n\t(microblaze_expand_move): Likewise.\n\t* config/microblaze/microblaze.h (LARGE_INT):\n\tAvoid signed / unsigned comparisons.\n\t(ASM_OUTPUT_ALIGNED_COMMON, ASM_OUTPUT_ALIGNED_LOCAL): Likewise.\n\t(ASM_FORMAT_PRIVATE_NAME): Make format specifier match printed data.\n\t(ASM_FINISH_DECLARE_OBJECT): Likewise.  Constify name.\n\nFrom-SVN: r167186", "tree": {"sha": "02506a16d71a38dba9a2cf8c5d3637c96c3917cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02506a16d71a38dba9a2cf8c5d3637c96c3917cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/556618c1b3931eeee3f9da0c1c4217b4f67d470a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556618c1b3931eeee3f9da0c1c4217b4f67d470a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/556618c1b3931eeee3f9da0c1c4217b4f67d470a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556618c1b3931eeee3f9da0c1c4217b4f67d470a/comments", "author": null, "committer": null, "parents": [{"sha": "3ffcc54f1d69618192bc3481e5b399c8fbb6aaec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ffcc54f1d69618192bc3481e5b399c8fbb6aaec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ffcc54f1d69618192bc3481e5b399c8fbb6aaec"}], "stats": {"total": 76, "additions": 53, "deletions": 23}, "files": [{"sha": "808afedd8b165c1f31201f0263ae69b1df9f79b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556618c1b3931eeee3f9da0c1c4217b4f67d470a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556618c1b3931eeee3f9da0c1c4217b4f67d470a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=556618c1b3931eeee3f9da0c1c4217b4f67d470a", "patch": "@@ -1,3 +1,20 @@\n+2010-11-26  Joern Rennecke  <amylaar@spamcop.net>\n+\n+\tPR target/46623\n+\t* config/microblaze/microblaze.c (microblaze_block_move_straight):\n+\tUse XALLOCAVEC.\n+\t(microblaze_option_override): Don't use C++ style comments.\n+\t(save_restore_insns): Remove unused variable base_offset.\n+\t(microblaze_expand_prologue): Remove unused variable insn.\n+\t(microblaze_secondary_reload): Adjust type to match target.h .\n+\t(microblaze_elf_in_small_data_p): Move declarations to start of block.\n+\t(microblaze_expand_move): Likewise.\n+\t* config/microblaze/microblaze.h (LARGE_INT):\n+\tAvoid signed / unsigned comparisons.\n+\t(ASM_OUTPUT_ALIGNED_COMMON, ASM_OUTPUT_ALIGNED_LOCAL): Likewise.\n+\t(ASM_FORMAT_PRIVATE_NAME): Make format specifier match printed data.\n+\t(ASM_FINISH_DECLARE_OBJECT): Likewise.  Constify name.\n+\n 2010-11-26  Michael Matz  <matz@suse.de>\n \n \t* tree-ssa-copy.c (fini_copy_prop): Don't DCE when we have loops."}, {"sha": "efa000c49c030103704e274d1c824a1529f47ef4", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556618c1b3931eeee3f9da0c1c4217b4f67d470a/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556618c1b3931eeee3f9da0c1c4217b4f67d470a/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=556618c1b3931eeee3f9da0c1c4217b4f67d470a", "patch": "@@ -729,7 +729,7 @@ microblaze_block_move_straight (rtx dest, rtx src, HOST_WIDE_INT length)\n   delta = bits / BITS_PER_UNIT;\n \n   /* Allocate a buffer for the temporary registers.  */\n-  regs = alloca (sizeof (rtx) * length / delta);\n+  regs = XALLOCAVEC (rtx, length / delta);\n \n   /* Load as many BITS-sized chunks as possible.  Use a normal load if\n      the source has enough alignment, otherwise use left/right pairs.  */\n@@ -1317,23 +1317,29 @@ microblaze_option_override (void)\n   if (ver < 0)\n     {\n       /* No hardware exceptions in earlier versions. So no worries.  */\n-      // microblaze_select_flags &= ~(MICROBLAZE_MASK_NO_UNSAFE_DELAY);\n+#if 0\n+      microblaze_select_flags &= ~(MICROBLAZE_MASK_NO_UNSAFE_DELAY);\n+#endif\n       microblaze_no_unsafe_delay = 0;\n       microblaze_pipe = MICROBLAZE_PIPE_3;\n     }\n   else if (ver == 0\n \t   || (MICROBLAZE_VERSION_COMPARE (microblaze_select_cpu, \"v4.00.b\")\n \t       == 0))\n     {\n-      // microblaze_select_flags |= (MICROBLAZE_MASK_NO_UNSAFE_DELAY);\n+#if 0\n+      microblaze_select_flags |= (MICROBLAZE_MASK_NO_UNSAFE_DELAY);\n+#endif\n       microblaze_no_unsafe_delay = 1;\n       microblaze_pipe = MICROBLAZE_PIPE_3;\n     }\n   else\n     {\n       /* We agree to use 5 pipe-stage model even on area optimized 3 \n          pipe-stage variants.  */\n-      // microblaze_select_flags &= ~(MICROBLAZE_MASK_NO_UNSAFE_DELAY);\n+#if 0\n+      microblaze_select_flags &= ~(MICROBLAZE_MASK_NO_UNSAFE_DELAY);\n+#endif\n       microblaze_no_unsafe_delay = 0;\n       microblaze_pipe = MICROBLAZE_PIPE_5;\n       if (MICROBLAZE_VERSION_COMPARE (microblaze_select_cpu, \"v5.00.a\") == 0\n@@ -1362,7 +1368,9 @@ microblaze_option_override (void)\n   /* Always use DFA scheduler.  */\n   microblaze_sched_use_dfa = 1;\n \n-  // microblaze_abicalls = MICROBLAZE_ABICALLS_NO;\n+#if 0\n+  microblaze_abicalls = MICROBLAZE_ABICALLS_NO;\n+#endif\n \n   /* Initialize the high, low values for legit floating point constants.  */\n   real_maxval (&dfhigh, 0, DFmode);\n@@ -2068,7 +2076,7 @@ save_restore_insns (int prologue)\n     0, isr_mem_rtx = 0;\n   rtx isr_msr_rtx = 0, insn;\n   long mask = current_frame_info.mask;\n-  HOST_WIDE_INT base_offset, gp_offset;\n+  HOST_WIDE_INT gp_offset;\n   int regno;\n \n   if (frame_pointer_needed\n@@ -2094,7 +2102,6 @@ save_restore_insns (int prologue)\n   gcc_assert (gp_offset > 0);\n \n   base_reg_rtx = stack_pointer_rtx;\n-  base_offset = 0;\n \n   /* For interrupt_handlers, need to save/restore the MSR.  */\n   if (interrupt_handler)\n@@ -2391,9 +2398,8 @@ microblaze_expand_prologue (void)\n \n   if (flag_pic == 2 && df_regs_ever_live_p (MB_ABI_PIC_ADDR_REGNUM))\n     {\n-      rtx insn;\n       SET_REGNO (pic_offset_table_rtx, MB_ABI_PIC_ADDR_REGNUM);\n-      insn = emit_insn (gen_set_got (pic_offset_table_rtx));\t/* setting GOT.  */\n+      emit_insn (gen_set_got (pic_offset_table_rtx));\t/* setting GOT.  */\n     }\n \n   /* If we are profiling, make sure no instructions are scheduled before\n@@ -2518,9 +2524,9 @@ microblaze_can_use_return_insn (void)\n \n /* Implement TARGET_SECONDARY_RELOAD.  */\n \n-static enum reg_class\n+static reg_class_t\n microblaze_secondary_reload (bool in_p ATTRIBUTE_UNUSED, rtx x ATTRIBUTE_UNUSED, \n-\t\t\t     enum reg_class rclass, enum machine_mode mode ATTRIBUTE_UNUSED, \n+\t\t\t     reg_class_t rclass, enum machine_mode mode ATTRIBUTE_UNUSED, \n \t\t\t     secondary_reload_info *sri ATTRIBUTE_UNUSED)\n {\n   if (rclass == ST_REGS)\n@@ -2546,6 +2552,8 @@ microblaze_globalize_label (FILE * stream, const char *name)\n static bool\n microblaze_elf_in_small_data_p (const_tree decl)\n {\n+  HOST_WIDE_INT size;\n+\n   if (!TARGET_XLGPOPT)\n     return false;\n \n@@ -2567,7 +2575,7 @@ microblaze_elf_in_small_data_p (const_tree decl)\n \treturn true;\n     }\n \n-  HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (decl));\n+  size = int_size_in_bytes (TREE_TYPE (decl));\n \n   return (size > 0 && size <= microblaze_section_threshold);\n }\n@@ -2624,11 +2632,11 @@ microblaze_expand_move (enum machine_mode mode, rtx operands[])\n \t  rtx addr = XEXP (operands[0], 0);\n \t  if (GET_CODE (addr) == SYMBOL_REF)\n \t    {\n+\t      rtx ptr_reg, result;\n+\n \t      if (reload_in_progress)\n \t\tdf_set_regs_ever_live (PIC_OFFSET_TABLE_REGNUM, true);\n \n-\t      rtx ptr_reg, result;\n-\n \t      addr = expand_pic_symbol_ref (mode, addr);\n \t      ptr_reg = gen_reg_rtx (Pmode);\n \t      emit_move_insn (ptr_reg, addr);"}, {"sha": "7290f75187d52f13406b1c29ed303384dea61215", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556618c1b3931eeee3f9da0c1c4217b4f67d470a/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556618c1b3931eeee3f9da0c1c4217b4f67d470a/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=556618c1b3931eeee3f9da0c1c4217b4f67d470a", "patch": "@@ -369,7 +369,8 @@ extern enum reg_class microblaze_regno_to_class[];\n /* REGISTER AND CONSTANT CLASSES */\n \n #define SMALL_INT(X) ((unsigned HOST_WIDE_INT) (INTVAL (X) + 0x8000) < 0x10000)\n-#define LARGE_INT(X) (INTVAL (X) >= 0x80000000 && INTVAL (X) <= 0xffffffff)\n+#define LARGE_INT(X) \\\n+  (INTVAL (X) > 0 && UINTVAL (X) >= 0x80000000 && UINTVAL (X) <= 0xffffffff)\n #define PLT_ADDR_P(X) (GET_CODE (X) == UNSPEC && XINT (X,1) == UNSPEC_PLT)\n /* Test for a valid operand for a call instruction.\n    Don't allow the arg pointer register or virtual regs\n@@ -647,8 +648,9 @@ typedef struct microblaze_args\n #undef\tASM_OUTPUT_ALIGNED_COMMON\n #define\tASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  if (SIZE > 0 && SIZE <= microblaze_section_threshold                  \\\n-      && TARGET_XLGPOPT)                                               \\\n+  if ((SIZE) > 0 && (SIZE) <= INT_MAX\t\t\t\t\t\\\n+      && (int) (SIZE) <= microblaze_section_threshold\t\t\t\\\n+      && TARGET_XLGPOPT)\t\t\t\t\t\t\\\n     {                                                                   \\\n       switch_to_section (sbss_section);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -666,8 +668,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_OUTPUT_ALIGNED_LOCAL\n #define\tASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  if (SIZE > 0 && SIZE <= microblaze_section_threshold                  \\\n-      && TARGET_XLGPOPT)                                               \\\n+  if ((SIZE) > 0 && (SIZE) <= INT_MAX\t\t\t\t\t\\\n+      && (int) (SIZE) <= microblaze_section_threshold\t\t\t\\\n+      && TARGET_XLGPOPT)\t\t\t\t\t\t\\\n     {                                                                   \\\n       switch_to_section (sbss_section);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -736,7 +739,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    LABELNO is an integer which is different for each call.  */\n #define ASM_FORMAT_PRIVATE_NAME(OUTPUT, NAME, LABELNO)\t\t\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\t\t\\\n-  sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n+  sprintf ((OUTPUT), \"%s.%lu\", (NAME), (unsigned long)(LABELNO)))\n \n /* How to start an assembler comment.\n    The leading space is important (the microblaze assembler requires it).  */\n@@ -817,15 +820,16 @@ extern int save_volatiles;\n \tsize_directive_output = 1;\t\t\t\t\t\\\n \tfprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\t\\\n-\tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n+\tfprintf (FILE, \",\" HOST_WIDE_INT_PRINT_DEC \"\\n\",\t\t\\\n+\tint_size_in_bytes (TREE_TYPE (DECL)));\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n     microblaze_declare_object (FILE, NAME, \"\", \":\\n\", 0);\t\t\t\\\n   } while (0)\n \n #undef ASM_FINISH_DECLARE_OBJECT\n #define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n do {\t\t\t\t\t\t\t\t\t \\\n-     char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\t \\\n+     const char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t \\\n      if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n          && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n \t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\\n@@ -834,7 +838,8 @@ do {\t\t\t\t\t\t\t\t\t \\\n \t size_directive_output = 1;\t\t\t\t\t \\\n \t fprintf (FILE, \"%s\", SIZE_ASM_OP);\t\t\t         \\\n \t assemble_name (FILE, name);\t\t\t\t\t \\\n-\t fprintf (FILE, \",%d\\n\", int_size_in_bytes (TREE_TYPE (DECL)));  \\\n+\t fprintf (FILE, \",\" HOST_WIDE_INT_PRINT_DEC \"\\n\",\t\t \\\n+\t\t  int_size_in_bytes (TREE_TYPE (DECL)));\t\t \\\n        }\t\t\t\t\t\t\t\t \\\n    } while (0)\n "}]}