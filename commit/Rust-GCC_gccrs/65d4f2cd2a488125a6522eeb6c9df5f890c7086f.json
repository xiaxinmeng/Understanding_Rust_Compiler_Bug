{"sha": "65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVkNGYyY2QyYTQ4ODEyNWE2NTIyZWViNmM5ZGY1Zjg5MGM3MDg2Zg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-10-16T15:31:46Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2012-10-16T15:31:46Z"}, "message": "re PR c/53063 (encode group options in the .opt files)\n\n2012-10-16  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/53063\n\tPR c/40989\ngcc/\n\t* optc-gen.awk: Handle new form of LangEnabledBy.\n\t* opts.c (set_Wstrict_aliasing): Declare here. Make static.\n\t* common.opt (Wstrict-aliasing=,Wstrict-overflow=): Do not use Init.\n\t* doc/options.texi (LangEnabledBy): Document new form.\n\t* flags.h (set_Wstrict_aliasing): Do not declare.\nc-family/\n\t* c.opt (Wstrict-aliasing=,Wstrict-overflow=): Use LangEnabledBy.\n\t* c-opts.c (c_common_handle_option): Do not set them here. Add\n\tcomment.\n\t(c_common_post_options): Likewise.\ntestsuite/\n\t* gcc.dg/Wstrict-overflow-24.c: New.\n\nFrom-SVN: r192502", "tree": {"sha": "4ce566a273abe5c8b53f22c6bfb4b3a8226b26e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ce566a273abe5c8b53f22c6bfb4b3a8226b26e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/comments", "author": null, "committer": null, "parents": [{"sha": "80de67b8059a3df4ef55dd2837a69bc4b0bc26f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80de67b8059a3df4ef55dd2837a69bc4b0bc26f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80de67b8059a3df4ef55dd2837a69bc4b0bc26f2"}], "stats": {"total": 119, "additions": 86, "deletions": 33}, "files": [{"sha": "8d639811a3a7c8e6d56415ce01c19ebccccab46e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "patch": "@@ -1,3 +1,13 @@\n+2012-10-16  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/53063\n+\tPR c/40989\n+\t* optc-gen.awk: Handle new form of LangEnabledBy.\n+\t* opts.c (set_Wstrict_aliasing): Declare here. Make static.\n+\t* common.opt (Wstrict-aliasing=,Wstrict-overflow=): Do not use Init.\n+\t* doc/options.texi (LangEnabledBy): Document new form.\n+\t* flags.h (set_Wstrict_aliasing): Do not declare.\n+\n 2012-10-16  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* reload.c (find_reloads_subreg_address): Remove FORCE_REPLACE"}, {"sha": "e2499fb8dbe5036079d04d9868f722c123511cd9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "patch": "@@ -1,3 +1,12 @@\n+2012-10-16  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/53063\n+\tPR c/40989\n+\t* c.opt (Wstrict-aliasing=,Wstrict-overflow=): Use LangEnabledBy.\n+\t* c-opts.c (c_common_handle_option): Do not set them here. Add\n+\tcomment.\n+\t(c_common_post_options): Likewise.\n+\n 2012-10-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (ADA_HOST_WIDE_INT_PRINT_DOUBLE_HEX): Define."}, {"sha": "ebbf7d91c67444af9242a018a2e37cc0a5912878", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "patch": "@@ -360,6 +360,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_Wall:\n+      /* ??? Don't add new options here. Use LangEnabledBy in c.opt.  */\n       handle_generated_option (&global_options, &global_options_set,\n \t\t\t       OPT_Wunused, NULL, value,\n \t\t\t       c_family_lang_mask, kind, loc,\n@@ -375,11 +376,7 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       warn_sequence_point = value;\t/* Was C only.  */\n       warn_switch = value;\n       warn_sizeof_pointer_memaccess = value;\n-      if (warn_strict_aliasing == -1)\n-\tset_Wstrict_aliasing (&global_options, value);\n       warn_address = value;\n-      if (warn_strict_overflow == -1)\n-\twarn_strict_overflow = value;\n       warn_array_bounds = value;\n       warn_volatile_register_var = value;\n \n@@ -939,11 +936,6 @@ c_common_post_options (const char **pfilename)\n   if (warn_pointer_sign == -1)\n     warn_pointer_sign = 0;\n \n-  if (warn_strict_aliasing == -1)\n-    warn_strict_aliasing = 0;\n-  if (warn_strict_overflow == -1)\n-    warn_strict_overflow = 0;\n-\n   /* -Woverlength-strings is off by default, but is enabled by -Wpedantic.\n      It is never enabled in C++, as the minimum limit is not normative\n      in that standard.  */"}, {"sha": "316698468c163a3b1d973f6842062a1789ed70e2", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "patch": "@@ -629,6 +629,14 @@ Wstrict-prototypes\n C ObjC Var(warn_strict_prototypes) Warning\n Warn about unprototyped function declarations\n \n+Wstrict-aliasing=\n+C ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall, 3, 0)\n+;\n+\n+Wstrict-overflow=\n+C ObjC C++ ObjC++ LangEnabledBy(C ObjC C++ ObjC++,Wall, 1, 0)\n+;\n+\n Wstrict-selector-match\n ObjC ObjC++ Var(warn_strict_selector_match) Warning\n Warn if type signatures of candidate methods do not match exactly"}, {"sha": "0c6d578335afc0528f28a55e3ca02cdaff02b2d3", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "patch": "@@ -609,15 +609,15 @@ Common Warning\n Warn about code which might break strict aliasing rules\n \n Wstrict-aliasing=\n-Common Joined RejectNegative UInteger Var(warn_strict_aliasing) Init(-1) Warning\n+Common Joined RejectNegative UInteger Var(warn_strict_aliasing) Warning\n Warn about code which might break strict aliasing rules\n \n Wstrict-overflow\n Common Warning\n Warn about optimizations that assume that signed overflow is undefined\n \n Wstrict-overflow=\n-Common Joined RejectNegative UInteger Var(warn_strict_overflow) Init(-1) Warning\n+Common Joined RejectNegative UInteger Var(warn_strict_overflow) Warning\n Warn about optimizations that assume that signed overflow is undefined\n \n Wsuggest-attribute=const"}, {"sha": "8011502f9f1905b4b078800c2c3d6375b9dde116", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "patch": "@@ -463,11 +463,15 @@ value of @option{-fmath-errno} for languages that do not use\n If not explicitly set, the option is set to the value of @option{-@var{opt}}.\n \n @item LangEnabledBy(@var{language}, @var{opt})\n+@itemx LangEnabledBy(@var{language}, @var{opt}, @var{posarg}, @var{negarg})\n When compiling for the given language, the option is set to the value\n-of @option{-@var{opt}}, if not explicitly set. It is possible to\n-specify several different languages.  Each @var{language} must have\n-been declared by an earlier @code{Language} record.  @xref{Option file\n-format}.\n+of @option{-@var{opt}}, if not explicitly set. In the second form, if\n+@var{opt} is used in the positive form then @var{posarg} is considered\n+to be passed to the option, and if @var{opt} is used in the negative\n+form then @var{negarg} is considered to be passed to the option.  It\n+is possible to specify several different languages.  Each\n+@var{language} must have been declared by an earlier @code{Language}\n+record.  @xref{Option file format}.\n \n @item NoDWARFRecord\n The option is omitted from the producer string written by"}, {"sha": "d56d5411e7bb34f0e46c26c0195a11921cc08989", "filename": "gcc/flags.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "patch": "@@ -37,14 +37,6 @@ extern int base_of_path (const char *path, const char **base_out);\n extern bool fast_math_flags_set_p (const struct gcc_options *);\n extern bool fast_math_flags_struct_set_p (struct cl_optimization *);\n \n-/* Used to set the level of -Wstrict-aliasing in OPTS, when no level\n-   is specified.  The external way to set the default level is to use\n-   -Wstrict-aliasing=level.\n-   ONOFF is assumed to take value 1 when -Wstrict-aliasing is specified,\n-   and 0 otherwise.  After calling this function, wstrict_aliasing will be\n-   set to the default value of -Wstrict_aliasing=level.  */\n-\n-extern void set_Wstrict_aliasing (struct gcc_options *opts, int onoff);\n \f\n /* Now the symbols that are set with `-f' switches.  */\n "}, {"sha": "2b168756ef523be10661de72a3844fb6f91d9616", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "patch": "@@ -48,26 +48,36 @@ for (i = 0; i < n_opts; i++) {\n                 enabledby[n_enabledby] = enabledby_name;\n                 n_enabledby++;\n             }\n-            enables[enabledby_name] = enables[enabledby_name] opts[i] \",\";\n+            enables[enabledby_name] = enables[enabledby_name] opts[i] \";\";\n         }\n     }\n \n     enabledby_arg = opt_args(\"LangEnabledBy\", flags[i]);\n     if (enabledby_arg != \"\") {\n         n_enabledby_arg_langs = split(nth_arg(0, enabledby_arg), enabledby_arg_langs, \" \");\n         enabledby_name = nth_arg(1, enabledby_arg);\n+        enabledby_posarg = nth_arg(2, enabledby_arg)\n+\tenabledby_negarg = nth_arg(3, enabledby_arg)\n         enabledby_index = opt_numbers[enabledby_name];\n         if (enabledby_index == \"\") {\n-            print \"#error Enabledby: \" enabledby_name \n+            print \"#error LangEnabledby: \" enabledby_name \n         } else {\n+            if (enabledby_posarg != \"\" && enabledby_negarg != \"\") {\n+                with_args = \",\" enabledby_posarg \",\" enabledby_negarg\n+            } else if (enabledby_posarg == \"\" && enabledby_negarg == \"\") {\n+                with_args = \"\"\n+            } else {\n+                print \"#error LangEnabledBy with three arguments, it should have either 2 or 4\"\n+            }\n+\n             for (j = 1; j <= n_enabledby_arg_langs; j++) {\n                 lang_name = lang_sanitized_name(enabledby_arg_langs[j]);\n                 lang_index = lang_numbers[enabledby_arg_langs[j]];\n                 if (enables[lang_name,enabledby_name] == \"\") {\n                     enabledby[lang_name,n_enabledby_lang[lang_index]] = enabledby_name;\n                     n_enabledby_lang[lang_index]++;\n                 }\n-                enables[lang_name,enabledby_name] = enables[lang_name,enabledby_name] opts[i] \",\";\n+                enables[lang_name,enabledby_name] = enables[lang_name,enabledby_name] opts[i] with_args \";\";\n             }\n         }\n     }\n@@ -388,7 +398,7 @@ print \"    {                                                                 \"\n for (i = 0; i < n_enabledby; i++) {\n     enabledby_name = enabledby[i];\n     print \"    case \" opt_enum(enabledby_name) \":\"\n-    n_enables = split(enables[enabledby_name], thisenable, \",\");\n+    n_enables = split(enables[enabledby_name], thisenable, \";\");\n     for (j = 1; j < n_enables; j++) {\n         opt_var_name = var_name(flags[opt_numbers[thisenable[j]]]);\n         if (opt_var_name != \"\") {\n@@ -431,16 +441,26 @@ for (i = 0; i < n_langs; i++) {\n     for (k = 0; k < n_enabledby_lang[i]; k++) {\n         enabledby_name = enabledby[lang_name,k];\n         print \"    case \" opt_enum(enabledby_name) \":\"\n-        n_enables = split(enables[lang_name,enabledby_name], thisenable, \",\");\n-        for (j = 1; j < n_enables; j++) {\n-            opt_var_name = var_name(flags[opt_numbers[thisenable[j]]]);\n+        n_thisenable = split(enables[lang_name,enabledby_name], thisenable, \";\");\n+        for (j = 1; j < n_thisenable; j++) {\n+            n_thisenable_args = split(thisenable[j], thisenable_args, \",\");\n+            if (n_thisenable_args == 1) {\n+                thisenable_opt = thisenable[j];\n+                value = \"value\";\n+            } else {\n+                thisenable_opt = thisenable_args[1];\n+                with_posarg = thisenable_args[2];\n+                with_negarg = thisenable_args[3];\n+                value = \"value ? \" with_posarg \" : \" with_negarg;\n+            }\n+            opt_var_name = var_name(flags[opt_numbers[thisenable_opt]]);\n             if (opt_var_name != \"\") {\n                 print \"      if (!opts_set->x_\" opt_var_name \")\"\n                 print \"        handle_generated_option (opts, opts_set,\"\n-                print \"                                 \" opt_enum(thisenable[j]) \", arg, value,\"\n+                print \"                                 \" opt_enum(thisenable_opt) \", NULL, \" value \",\"\n                 print \"                                 lang_mask, kind, loc, handlers, dc);\"\n             } else {\n-                print \"#error \" thisenable[j] \" does not have a Var() flag\"\n+                print \"#error \" thisenable_opt \" does not have a Var() flag\"\n             }\n         }\n         print \"      break;\\n\""}, {"sha": "aea0cfc839f072849e06a6301a8ef066df483199", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "patch": "@@ -37,6 +37,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"insn-attr-common.h\"\n #include \"common/common-target.h\"\n \n+static void set_Wstrict_aliasing (struct gcc_options *opts, int onoff);\n+\n /* Indexed by enum debug_info_type.  */\n const char *const debug_type_names[] =\n {\n@@ -1801,7 +1803,7 @@ handle_param (struct gcc_options *opts, struct gcc_options *opts_set,\n    ONOFF is assumed to take value 1 when -Wstrict-aliasing is specified,\n    and 0 otherwise.  After calling this function, wstrict_aliasing will be\n    set to the default value of -Wstrict_aliasing=level, currently 3.  */\n-void\n+static void\n set_Wstrict_aliasing (struct gcc_options *opts, int onoff)\n {\n   gcc_assert (onoff == 0 || onoff == 1);"}, {"sha": "6c6bf05ef7028b821fcd6f4f831e5f0fe5d88f83", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "patch": "@@ -1,3 +1,9 @@\n+2012-10-16  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/53063\n+\tPR c/40989\n+\t* gcc.dg/Wstrict-overflow-24.c: New.\n+\n 2012-10-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/50981"}, {"sha": "05e8dd144844de9cab50db1b5218c1a7a795bc25", "filename": "gcc/testsuite/gcc.dg/Wstrict-overflow-24.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d4f2cd2a488125a6522eeb6c9df5f890c7086f/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstrict-overflow-24.c?ref=65d4f2cd2a488125a6522eeb6c9df5f890c7086f", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fstrict-overflow -O2\" } */\n+/* { dg-message \"warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n+#pragma GCC diagnostic error \"-Wstrict-overflow\"\n+\n+int\n+foo (int i)\n+{\n+  return __builtin_abs (i) >= 0; /* { dg-error \"assuming signed overflow does not occur\" \"correct warning\" } */\n+}"}]}