{"sha": "5b0cec3b3faa11b5448897bd696590e5ca215ce9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIwY2VjM2IzZmFhMTFiNTQ0ODg5N2JkNjk2NTkwZTVjYTIxNWNlOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-04-11T07:39:05Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-04-11T07:39:05Z"}, "message": "cp-tree.h (lang_type): Remove has_nonpublic_ctor and has_nonpublic_assign_ref.\n\n\t* cp-tree.h (lang_type): Remove has_nonpublic_ctor and\n\thas_nonpublic_assign_ref.\n\t(TYPE_HAS_NONPUBLIC_CTOR): Don't declare.\n\t(TYPE_HAS_NONPUBLIC_ASSIGN_REF): Likewise.\n\t* class.c (finish_struct_methods): Don't set\n\tTYPE_HAS_NONPUBLIC_CTOR or TYPE_HAS_NONPUBLIC_ASSIGN_REF.\n\t(interface_only): Don't declare.\n\t(interface_unknown): Likewise.\n\nFrom-SVN: r33074", "tree": {"sha": "b58359486a197a31509735bff5d62f903991d765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b58359486a197a31509735bff5d62f903991d765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b0cec3b3faa11b5448897bd696590e5ca215ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0cec3b3faa11b5448897bd696590e5ca215ce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b0cec3b3faa11b5448897bd696590e5ca215ce9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0cec3b3faa11b5448897bd696590e5ca215ce9/comments", "author": null, "committer": null, "parents": [{"sha": "34527c47b633878689fac74c64a6279a27a96a58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34527c47b633878689fac74c64a6279a27a96a58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34527c47b633878689fac74c64a6279a27a96a58"}], "stats": {"total": 96, "additions": 23, "deletions": 73}, "files": [{"sha": "f760057ca5570b42e324e72eedf98539b06beaec", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b0cec3b3faa11b5448897bd696590e5ca215ce9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b0cec3b3faa11b5448897bd696590e5ca215ce9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5b0cec3b3faa11b5448897bd696590e5ca215ce9", "patch": "@@ -1,3 +1,14 @@\n+2000-04-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (lang_type): Remove has_nonpublic_ctor and\n+\thas_nonpublic_assign_ref.\n+\t(TYPE_HAS_NONPUBLIC_CTOR): Don't declare.\n+\t(TYPE_HAS_NONPUBLIC_ASSIGN_REF): Likewise.\n+\t* class.c (finish_struct_methods): Don't set\n+\tTYPE_HAS_NONPUBLIC_CTOR or TYPE_HAS_NONPUBLIC_ASSIGN_REF.\n+\t(interface_only): Don't declare.\n+\t(interface_unknown): Likewise.\n+\n 2000-04-11  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* tree.h (HAVE_TEMPLATES): Remove definition."}, {"sha": "a3fd544f478b90ef6832fc8fe0433a8ee95bad25", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 55, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b0cec3b3faa11b5448897bd696590e5ca215ce9/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b0cec3b3faa11b5448897bd696590e5ca215ce9/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=5b0cec3b3faa11b5448897bd696590e5ca215ce9", "patch": "@@ -2122,22 +2122,16 @@ method_name_cmp (m1, m2)\n    list.  That allows them to be quickly deleted, and requires no\n    extra storage.\n \n-   If there are any constructors/destructors, they are moved to the\n-   front of the list.  This makes pushclass more efficient.\n-\n-   @@ The above comment is obsolete.  It mostly describes what add_method\n-   @@ and add_implicitly_declared_members do.\n-\n-   Sort methods that are not special (i.e., constructors, destructors, and\n-   type conversion operators) so that we can find them faster in search.  */\n+   Sort methods that are not special (i.e., constructors, destructors,\n+   and type conversion operators) so that we can find them faster in\n+   search.  */\n \n static void\n finish_struct_methods (t)\n      tree t;\n {\n   tree fn_fields;\n   tree method_vec;\n-  tree ctor_name = constructor_name (t);\n   int slot, len;\n \n   if (!TYPE_METHODS (t))\n@@ -2158,50 +2152,8 @@ finish_struct_methods (t)\n      and the next few with type conversion operators (if any).  */\n   for (fn_fields = TYPE_METHODS (t); fn_fields; \n        fn_fields = TREE_CHAIN (fn_fields))\n-    {\n-      tree fn_name = DECL_NAME (fn_fields);\n-\n-      /* Clear out this flag.\n-\n-\t @@ Doug may figure out how to break\n-\t @@ this with nested classes and friends.  */\n-      DECL_IN_AGGR_P (fn_fields) = 0;\n-\n-      /* Note here that a copy ctor is private, so we don't dare generate\n- \t a default copy constructor for a class that has a member\n- \t of this type without making sure they have access to it.  */\n-      if (fn_name == ctor_name)\n- \t{\n- \t  tree parmtypes = FUNCTION_ARG_CHAIN (fn_fields);\n- \t  tree parmtype = parmtypes ? TREE_VALUE (parmtypes) : void_type_node;\n-\t  \n- \t  if (TREE_CODE (parmtype) == REFERENCE_TYPE\n- \t      && TYPE_MAIN_VARIANT (TREE_TYPE (parmtype)) == t)\n- \t    {\n- \t      if (TREE_CHAIN (parmtypes) == NULL_TREE\n- \t\t  || TREE_CHAIN (parmtypes) == void_list_node\n- \t\t  || TREE_PURPOSE (TREE_CHAIN (parmtypes)))\n- \t\t{\n- \t\t  if (TREE_PROTECTED (fn_fields))\n- \t\t    TYPE_HAS_NONPUBLIC_CTOR (t) = 1;\n- \t\t  else if (TREE_PRIVATE (fn_fields))\n- \t\t    TYPE_HAS_NONPUBLIC_CTOR (t) = 2;\n- \t\t}\n- \t    }\n-\t}\n-      else if (fn_name == ansi_opname[(int) MODIFY_EXPR])\n-\t{\n-\t  tree parmtype = TREE_VALUE (FUNCTION_ARG_CHAIN (fn_fields));\n-\n-\t  if (copy_assignment_arg_p (parmtype, DECL_VIRTUAL_P (fn_fields)))\n-\t    {\n-\t      if (TREE_PROTECTED (fn_fields))\n-\t\tTYPE_HAS_NONPUBLIC_ASSIGN_REF (t) = 1;\n-\t      else if (TREE_PRIVATE (fn_fields))\n-\t\tTYPE_HAS_NONPUBLIC_ASSIGN_REF (t) = 2;\n-\t    }\n-\t}\n-    }\n+    /* Clear out this flag.  */\n+    DECL_IN_AGGR_P (fn_fields) = 0;\n \n   if (TYPE_HAS_DESTRUCTOR (t) && !TREE_VEC_ELT (method_vec, 1))\n     /* We thought there was a destructor, but there wasn't.  Some\n@@ -2922,8 +2874,6 @@ finish_struct_anon (t)\n     }\n }\n \n-extern int interface_only, interface_unknown;\n-\n /* Create default constructors, assignment operators, and so forth for\n    the type indicated by T, if they are needed.\n    CANT_HAVE_DEFAULT_CTOR, CANT_HAVE_CONST_CTOR, and"}, {"sha": "285f15e56324540791fbf5923f55c354242ec669", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b0cec3b3faa11b5448897bd696590e5ca215ce9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b0cec3b3faa11b5448897bd696590e5ca215ce9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5b0cec3b3faa11b5448897bd696590e5ca215ce9", "patch": "@@ -1327,8 +1327,10 @@ struct lang_type\n   unsigned has_const_assign_ref : 1;\n   unsigned anon_aggr : 1;\n \n-  unsigned has_nonpublic_ctor : 2;\n-  unsigned has_nonpublic_assign_ref : 2;\n+  unsigned has_mutable : 1;\n+  unsigned com_interface : 1;\n+  unsigned non_pod_class : 1;\n+  unsigned nearly_empty_p : 1;\n   unsigned vtable_needs_writing : 1;\n   unsigned has_assign_ref : 1;\n   unsigned has_new : 1;\n@@ -1361,20 +1363,15 @@ struct lang_type\n   unsigned has_abstract_assign_ref : 1;\n   unsigned non_aggregate : 1;\n   unsigned is_partial_instantiation : 1;\n-  unsigned has_mutable : 1;\n-\n-  unsigned com_interface : 1;\n-  unsigned non_pod_class : 1;\n-  unsigned nearly_empty_p : 1;\n \n   /* When adding a flag here, consider whether or not it ought to\n      apply to a template instance if it applies to the template.  If\n      so, make sure to copy it in instantiate_class_template!  */\n \n-  /* There are six bits left to fill out a 32-bit word.  Keep track of\n-     this by updating the size of this bitfield whenever you add or\n+  /* There are some bits left to fill out a 32-bit word.  Keep track\n+     of this by updating the size of this bitfield whenever you add or\n      remove a flag.  */\n-  unsigned dummy : 5;\n+  unsigned dummy : 9;\n       \n   int vsize;\n   int vfield_parent;\n@@ -1638,14 +1635,6 @@ struct lang_type\n /* Nonzero means that this type has an X() constructor.  */\n #define TYPE_HAS_DEFAULT_CONSTRUCTOR(NODE) (TYPE_LANG_SPECIFIC(NODE)->has_default_ctor)\n \n-/* Nonzero means the type declared a ctor as private or protected.  We\n-   use this to make sure we don't try to generate a copy ctor for a \n-   class that has a member of type NODE.  */\n-#define TYPE_HAS_NONPUBLIC_CTOR(NODE) (TYPE_LANG_SPECIFIC(NODE)->has_nonpublic_ctor)\n-\n-/* Ditto, for operator=.  */\n-#define TYPE_HAS_NONPUBLIC_ASSIGN_REF(NODE) (TYPE_LANG_SPECIFIC(NODE)->has_nonpublic_assign_ref)\n-\n /* Nonzero means that this type contains a mutable member */\n #define CLASSTYPE_HAS_MUTABLE(NODE) (TYPE_LANG_SPECIFIC(NODE)->has_mutable)\n #define TYPE_HAS_MUTABLE_P(NODE) (cp_has_mutable_p (NODE))"}]}