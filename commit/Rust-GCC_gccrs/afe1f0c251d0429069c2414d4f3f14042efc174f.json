{"sha": "afe1f0c251d0429069c2414d4f3f14042efc174f", "node_id": "C_kwDOANBUbNoAKGFmZTFmMGMyNTFkMDQyOTA2OWMyNDE0ZDRmM2YxNDA0MmVmYzE3NGY", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-02-09T20:58:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-09T15:25:46Z"}, "message": "c++: CTAD for less-specialized alias template [PR102529]\n\nThe standard was unclear what happens with the transformation of a deduction\nguide if the initial template argument deduction fails for a reason other\nthan not deducing all the arguments; my implementation assumed that the\nright thing was to give up on the deduction guide.  But in consideration of\nCWG2664 this week I realized that we get a better result by just continuing\nwith an empty set of deductions, so the alias deduction guide is the same as\nthe original deduction guide plus the deducible constraint.\n\n\tDR 2664\n\tPR c++/102529\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (alias_ctad_tweaks): Continue after deduction failure.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/DRs/dr2664.C: New test.\n\t* g++.dg/cpp2a/class-deduction-alias15.C: New test.", "tree": {"sha": "2b40a1943b30ad0d90ecca5a2410343bd0431dc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b40a1943b30ad0d90ecca5a2410343bd0431dc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afe1f0c251d0429069c2414d4f3f14042efc174f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe1f0c251d0429069c2414d4f3f14042efc174f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afe1f0c251d0429069c2414d4f3f14042efc174f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe1f0c251d0429069c2414d4f3f14042efc174f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e6170098d5e7756e85e880f8f4cb18e885a64fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e6170098d5e7756e85e880f8f4cb18e885a64fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e6170098d5e7756e85e880f8f4cb18e885a64fd"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "65341c40f97036a034ead6a6b3aba949ed554b4c", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe1f0c251d0429069c2414d4f3f14042efc174f/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe1f0c251d0429069c2414d4f3f14042efc174f/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=afe1f0c251d0429069c2414d4f3f14042efc174f", "patch": "@@ -30072,7 +30072,9 @@ alias_ctad_tweaks (tree tmpl, tree uguides)\n \t  tree targs = make_tree_vec (len);\n \t  int err = unify (ftparms, targs, ret, utype, UNIFY_ALLOW_NONE, false);\n \t  if (err)\n-\t    continue;\n+\t    /* CWG2664: Discard any deductions, still build the guide.  */\n+\t    for (unsigned i = 0; i < len; ++i)\n+\t      TREE_VEC_ELT (targs, i) = NULL_TREE;\n \n \t  /* The number of parms for f' is the number of parms for A plus\n \t     non-deduced parms of f.  */"}, {"sha": "f6bf8e2ecef853748b72797be85601a6068e7bef", "filename": "gcc/testsuite/g++.dg/DRs/dr2664.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe1f0c251d0429069c2414d4f3f14042efc174f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2664.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe1f0c251d0429069c2414d4f3f14042efc174f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2664.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2664.C?ref=afe1f0c251d0429069c2414d4f3f14042efc174f", "patch": "@@ -0,0 +1,17 @@\n+// CWG 2664\n+// { dg-do compile { target c++20 } }\n+\n+template <class S1, class S2> struct C {\n+  C(...);\n+};\n+\n+template<class T1> C(T1) -> C<T1, T1>;\n+template<class T1, class T2> C(T1, T2) -> C<T1 *, T2>;\n+\n+template<class V1, class V2> using A = C<V1, V2>;\n+\n+C c1{\"\"};\n+A a1{\"\"};\n+\n+C c2{\"\", 1};\n+A a2{\"\", 1};"}, {"sha": "db615faf8e24375cac1b02f5cd136c27c9ac7c80", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-alias15.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe1f0c251d0429069c2414d4f3f14042efc174f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe1f0c251d0429069c2414d4f3f14042efc174f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias15.C?ref=afe1f0c251d0429069c2414d4f3f14042efc174f", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/102529\n+// { dg-do compile { target c++20 } }\n+\n+template <typename T>\n+struct C {\n+    template <typename U>\n+    C(U);\n+};\n+\n+template <typename U>\n+C(U) -> C<U*>;\n+\n+template <typename T>\n+    requires true\n+using A = C<T>;\n+\n+C ok(1);   // ok, a is a C<int*>\n+A bad(2);  // fails"}]}