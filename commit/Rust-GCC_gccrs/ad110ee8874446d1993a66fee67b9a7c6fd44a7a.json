{"sha": "ad110ee8874446d1993a66fee67b9a7c6fd44a7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQxMTBlZTg4NzQ0NDZkMTk5M2E2NmZlZTY3YjlhN2M2ZmQ0NGE3YQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-10-07T12:33:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-07T12:33:30Z"}, "message": "exp_util.adb (Insert_Actions): Add handling of N_Parametrized_Expression.\n\n2010-10-07  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_util.adb (Insert_Actions): Add handling of\n\tN_Parametrized_Expression.\n\t* par-ch6.adb (P_Subprogram): Add parsing of parametrized expression\n\t* sem.adb: Add entry for N_Parametrized_Expression\n\t* sem_ch6.adb (Analyze_Parametrized_Expression): New procedure\n\t* sem_ch6.ads (Analyze_Parametrized_Expression): New procedure\n\t* sinfo.ads, sinfo.adb: Add N_Parametrized_Expression\n\t* sprint.adb (Sprint_Node): Add handling for N_Parametrized_Expression\n\t* par-ch4.adb: Minor reformatting.\n\nFrom-SVN: r165098", "tree": {"sha": "11fa351f4d10d26dff6b9d6899514fb48becef9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11fa351f4d10d26dff6b9d6899514fb48becef9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad110ee8874446d1993a66fee67b9a7c6fd44a7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad110ee8874446d1993a66fee67b9a7c6fd44a7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad110ee8874446d1993a66fee67b9a7c6fd44a7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/comments", "author": null, "committer": null, "parents": [{"sha": "2385e007496ef4abc4d978a644fbf3cd3f2a0094", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2385e007496ef4abc4d978a644fbf3cd3f2a0094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2385e007496ef4abc4d978a644fbf3cd3f2a0094"}], "stats": {"total": 229, "additions": 198, "deletions": 31}, "files": [{"sha": "4ed46f18e473213c21fb62f23b5bf00cc385fc73", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ad110ee8874446d1993a66fee67b9a7c6fd44a7a", "patch": "@@ -1,3 +1,15 @@\n+2010-10-07  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_util.adb (Insert_Actions): Add handling of\n+\tN_Parametrized_Expression.\n+\t* par-ch6.adb (P_Subprogram): Add parsing of parametrized expression\n+\t* sem.adb: Add entry for N_Parametrized_Expression\n+\t* sem_ch6.adb (Analyze_Parametrized_Expression): New procedure\n+\t* sem_ch6.ads (Analyze_Parametrized_Expression): New procedure\n+\t* sinfo.ads, sinfo.adb: Add N_Parametrized_Expression\n+\t* sprint.adb (Sprint_Node): Add handling for N_Parametrized_Expression\n+\t* par-ch4.adb: Minor reformatting.\n+\n 2010-10-07  Robert Dewar  <dewar@adacore.com>\n \n \t* scng.adb (Skip_Other_Format_Characters): New procedure"}, {"sha": "0a7e5ae670c91b0c530880399bac2dc0c86d57af", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=ad110ee8874446d1993a66fee67b9a7c6fd44a7a", "patch": "@@ -2592,6 +2592,7 @@ package body Exp_Util is\n                N_Package_Declaration                    |\n                N_Package_Instantiation                  |\n                N_Package_Renaming_Declaration           |\n+               N_Parametrized_Expression                |\n                N_Private_Extension_Declaration          |\n                N_Private_Type_Declaration               |\n                N_Procedure_Instantiation                |\n@@ -4583,15 +4584,14 @@ package body Exp_Util is\n \n       function Side_Effect_Free (N : Node_Id) return Boolean is\n       begin\n-         --  Note on checks that could raise Constraint_Error. Strictly, if\n-         --  we take advantage of 11.6, these checks do not count as side\n-         --  effects. However, we would just as soon consider that they are\n-         --  side effects, since the backend CSE does not work very well on\n-         --  expressions which can raise Constraint_Error. On the other\n-         --  hand, if we do not consider them to be side effect free, then\n-         --  we get some awkward expansions in -gnato mode, resulting in\n-         --  code insertions at a point where we do not have a clear model\n-         --  for performing the insertions.\n+         --  Note on checks that could raise Constraint_Error. Strictly, if we\n+         --  take advantage of 11.6, these checks do not count as side effects.\n+         --  However, we would prefer to consider that they are side effects,\n+         --  since the backend CSE does not work very well on expressions which\n+         --  can raise Constraint_Error. On the other hand if we don't consider\n+         --  them to be side effect free, then we get some awkward expansions\n+         --  in -gnato mode, resulting in code insertions at a point where we\n+         --  do not have a clear model for performing the insertions.\n \n          --  Special handling for entity names\n "}, {"sha": "a7952c56534fa4c07eb1f06b3069db7766ae2428", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=ad110ee8874446d1993a66fee67b9a7c6fd44a7a", "patch": "@@ -2634,7 +2634,7 @@ package body Ch4 is\n \n    --  Error_Recovery: cannot raise Error_Resync\n \n-   function  P_Qualified_Expression (Subtype_Mark : Node_Id) return Node_Id is\n+   function P_Qualified_Expression (Subtype_Mark : Node_Id) return Node_Id is\n       Qual_Node : Node_Id;\n    begin\n       Qual_Node := New_Node (N_Qualified_Expression, Prev_Token_Ptr);"}, {"sha": "2c979cfe674cea7615d623e8c5f50df1f6cf18cd", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 106, "deletions": 21, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=ad110ee8874446d1993a66fee67b9a7c6fd44a7a", "patch": "@@ -82,6 +82,7 @@ package body Ch6 is\n \n    --  This routine scans out a subprogram declaration, subprogram body,\n    --  subprogram renaming declaration or subprogram generic instantiation.\n+   --  It also handles the new Ada 2012 parametrized expression form\n \n    --  SUBPROGRAM_DECLARATION ::= SUBPROGRAM_SPECIFICATION;\n \n@@ -122,6 +123,9 @@ package body Ch6 is\n    --  is classified as a basic declarative item, but it is parsed here, with\n    --  other subprogram constructs.\n \n+   --  PARAMETRIZED_EXPRESSION ::=\n+   --    FUNCTION SPECIFICATION IS EXPRESSION;\n+\n    --  The value in Pf_Flags indicates which of these possible declarations\n    --  is acceptable to the caller:\n \n@@ -579,7 +583,7 @@ package body Ch6 is\n          end if;\n       end if;\n \n-      --  Processing for subprogram body\n+      --  Processing for subprogram body or parametrized expression\n \n       <<Subprogram_Body>>\n          if not Pf_Flags.Pbod then\n@@ -607,29 +611,110 @@ package body Ch6 is\n             TF_Semicolon;\n             return Stub_Node;\n \n-         --  Subprogram body case\n+         --  Subprogram body or parametrized expression case\n \n          else\n-            --  Here is the test for a suspicious IS (i.e. one that looks\n-            --  like it might more properly be a semicolon). See separate\n-            --  section discussing use of IS instead of semicolon in\n-            --  package Parse.\n-\n-            if (Token in Token_Class_Declk\n-                  or else\n-                Token = Tok_Identifier)\n-              and then Start_Column <= Scope.Table (Scope.Last).Ecol\n-              and then Scope.Last /= 1\n-            then\n-               Scope.Table (Scope.Last).Etyp := E_Suspicious_Is;\n-               Scope.Table (Scope.Last).S_Is := Prev_Token_Ptr;\n-            end if;\n+            --  Here we must distinguish a body and a parametrized expression\n+\n+            Parse_Body_Or_Parametrized_Expression : declare\n+               function Is_Parametrized_Expression return Boolean;\n+               --  Returns True if we have case of parametrized epression\n+\n+               --------------------------------\n+               -- Is_Parametrized_Expression --\n+               --------------------------------\n+\n+               function Is_Parametrized_Expression return Boolean is\n+               begin\n+                  --  Parametrized expression only allowed in Ada 2012\n+\n+                  if Ada_Version < Ada_12 then\n+                     return False;\n+\n+                  --  If currently pointing to BEGIN or a declaration keyword\n+                  --  or a pragma then we definitely do not have a parametrized\n+                  --  expression.\n+\n+                  elsif Token in Token_Class_Declk\n+                    or else Token = Tok_Begin\n+                    or else Token = Tok_Pragma\n+                  then\n+                     return False;\n+\n+                  --  A common error case, missing BEGIN before RETURN\n+\n+                  elsif Token = Tok_Return then\n+                     return False;\n+\n+                  --  Anything other than an identifier must be a parametrized\n+                  --  expression at this stage. Probably we could do a little\n+                  --  better job of distingushing some more error cases.\n+\n+                  elsif Token /= Tok_Identifier then\n+                     return True;\n+\n+                  --  For identifier we have to scan ahead if identifier is\n+                  --  followed by a colon or a comma, it is a declaration and\n+                  --  hence we have a subprogram body. Otherwise we have an\n+                  --  expression.\n+\n+                  else\n+                     declare\n+                        Scan_State : Saved_Scan_State;\n+                        Tok        : Token_Type;\n+                     begin\n+                        Save_Scan_State (Scan_State);\n+                        Scan; -- past identifier\n+                        Tok := Token;\n+                        Restore_Scan_State (Scan_State);\n+                        return Tok /= Tok_Colon and then Tok /= Tok_Comma;\n+                     end;\n+                  end if;\n+               end Is_Parametrized_Expression;\n+\n+            --  Start of processing for Parse_Body_Or_Parametrized_Expression\n+\n+            begin\n+               --  Parametrized_Expression case, parse expression\n+\n+               if Is_Parametrized_Expression then\n+                  Body_Node :=\n+                    New_Node\n+                      (N_Parametrized_Expression, Sloc (Specification_Node));\n+                  Set_Specification (Body_Node, Specification_Node);\n+                  Set_Expression (Body_Node, P_Expression);\n+                  T_Semicolon;\n+                  Pop_Scope_Stack;\n+\n+               --  Subprogram body case\n+\n+               else\n+                  --  Here is the test for a suspicious IS (i.e. one that looks\n+                  --  like it might more properly be a semicolon). See separate\n+                  --  section discussing use of IS instead of semicolon in\n+                  --  package Parse.\n+\n+                  if (Token in Token_Class_Declk\n+                        or else\n+                      Token = Tok_Identifier)\n+                    and then Start_Column <= Scope.Table (Scope.Last).Ecol\n+                    and then Scope.Last /= 1\n+                  then\n+                     Scope.Table (Scope.Last).Etyp := E_Suspicious_Is;\n+                     Scope.Table (Scope.Last).S_Is := Prev_Token_Ptr;\n+                  end if;\n+\n+                  --  Build and return subprogram body, parsing declarations\n+                  --  an statement sequence that belong to the body.\n+\n+                  Body_Node :=\n+                    New_Node (N_Subprogram_Body, Sloc (Specification_Node));\n+                  Set_Specification (Body_Node, Specification_Node);\n+                  Parse_Decls_Begin_End (Body_Node);\n+               end if;\n \n-            Body_Node :=\n-              New_Node (N_Subprogram_Body, Sloc (Specification_Node));\n-            Set_Specification (Body_Node, Specification_Node);\n-            Parse_Decls_Begin_End (Body_Node);\n-            return Body_Node;\n+               return Body_Node;\n+            end Parse_Body_Or_Parametrized_Expression;\n          end if;\n \n       --  Processing for subprogram declaration"}, {"sha": "a23bd46f0691740a3b08ab9c32ea721cf2d96d3a", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=ad110ee8874446d1993a66fee67b9a7c6fd44a7a", "patch": "@@ -437,6 +437,9 @@ package body Sem is\n          when N_Parameter_Association =>\n             Analyze_Parameter_Association (N);\n \n+         when N_Parametrized_Expression =>\n+            Analyze_Parametrized_Expression (N);\n+\n          when N_Pragma =>\n             Analyze_Pragma (N);\n "}, {"sha": "c178840e6e5ccccf2a8d8960b7729b1d83b173e8", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ad110ee8874446d1993a66fee67b9a7c6fd44a7a", "patch": "@@ -1038,6 +1038,31 @@ package body Sem_Ch6 is\n       Analyze (Explicit_Actual_Parameter (N));\n    end Analyze_Parameter_Association;\n \n+   -------------------------------------\n+   -- Analyze_Parametrized_Expression --\n+   -------------------------------------\n+\n+   procedure Analyze_Parametrized_Expression (N : Node_Id) is\n+      Loc  : constant Source_Ptr := Sloc (N);\n+      LocX : constant Source_Ptr := Sloc (Expression (N));\n+\n+   begin\n+      --  This is one of the occasions on which we write things during semantic\n+      --  analysis. We transform the parametrized expression into an equivalent\n+      --  subprogram body, and then analyze that.\n+\n+      Rewrite (N,\n+        Make_Subprogram_Body (Loc,\n+          Specification              => Specification (N),\n+          Declarations               => Empty_List,\n+          Handled_Statement_Sequence =>\n+            Make_Handled_Sequence_Of_Statements (LocX,\n+              Statements => New_List (\n+                Make_Simple_Return_Statement (LocX,\n+                  Expression => Expression (N))))));\n+      Analyze (N);\n+   end Analyze_Parametrized_Expression;\n+\n    ----------------------------\n    -- Analyze_Procedure_Call --\n    ----------------------------"}, {"sha": "cb3a91ace6602c8eb8235f1339d7e8176d191ad0", "filename": "gcc/ada/sem_ch6.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fsem_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fsem_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.ads?ref=ad110ee8874446d1993a66fee67b9a7c6fd44a7a", "patch": "@@ -39,6 +39,7 @@ package Sem_Ch6 is\n    procedure Analyze_Function_Call                   (N : Node_Id);\n    procedure Analyze_Operator_Symbol                 (N : Node_Id);\n    procedure Analyze_Parameter_Association           (N : Node_Id);\n+   procedure Analyze_Parametrized_Expression         (N : Node_Id);\n    procedure Analyze_Procedure_Call                  (N : Node_Id);\n    procedure Analyze_Simple_Return_Statement         (N : Node_Id);\n    procedure Analyze_Subprogram_Declaration          (N : Node_Id);"}, {"sha": "bf587dd0ef88589fa249ceec902b3db86d8d3644", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=ad110ee8874446d1993a66fee67b9a7c6fd44a7a", "patch": "@@ -1191,6 +1191,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Number_Declaration\n         or else NT (N).Nkind = N_Object_Declaration\n         or else NT (N).Nkind = N_Parameter_Specification\n+        or else NT (N).Nkind = N_Parametrized_Expression\n         or else NT (N).Nkind = N_Pragma_Argument_Association\n         or else NT (N).Nkind = N_Qualified_Expression\n         or else NT (N).Nkind = N_Raise_Statement\n@@ -2681,6 +2682,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Generic_Package_Declaration\n         or else NT (N).Nkind = N_Generic_Subprogram_Declaration\n         or else NT (N).Nkind = N_Package_Declaration\n+        or else NT (N).Nkind = N_Parametrized_Expression\n         or else NT (N).Nkind = N_Subprogram_Body\n         or else NT (N).Nkind = N_Subprogram_Body_Stub\n         or else NT (N).Nkind = N_Subprogram_Declaration\n@@ -4094,6 +4096,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Number_Declaration\n         or else NT (N).Nkind = N_Object_Declaration\n         or else NT (N).Nkind = N_Parameter_Specification\n+        or else NT (N).Nkind = N_Parametrized_Expression\n         or else NT (N).Nkind = N_Pragma_Argument_Association\n         or else NT (N).Nkind = N_Qualified_Expression\n         or else NT (N).Nkind = N_Raise_Statement\n@@ -5584,6 +5587,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Generic_Package_Declaration\n         or else NT (N).Nkind = N_Generic_Subprogram_Declaration\n         or else NT (N).Nkind = N_Package_Declaration\n+        or else NT (N).Nkind = N_Parametrized_Expression\n         or else NT (N).Nkind = N_Subprogram_Body\n         or else NT (N).Nkind = N_Subprogram_Body_Stub\n         or else NT (N).Nkind = N_Subprogram_Declaration"}, {"sha": "573759d7a5b3a86e0a81068169b7c565c7e9f3b9", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=ad110ee8874446d1993a66fee67b9a7c6fd44a7a", "patch": "@@ -4427,6 +4427,24 @@ package Sinfo is\n       --  Was_Originally_Stub (Flag13-Sem)\n       --  Has_Relative_Deadline_Pragma (Flag9-Sem)\n \n+      -----------------------------\n+      -- Parametrized Expression --\n+      -----------------------------\n+\n+      --  This is an Ada 2012 extension, we put it here for now, to be labeled\n+      --  and put in its proper section when we know exactly where that is!\n+\n+      --  PARAMETRIZED_EXPRESSION ::=\n+      --    FUNCTION SPECIFICATION IS EXPRESSION;\n+\n+      --  Note: there are no separate nodes for the profiles, instead the\n+      --  information appears directly in the following nodes.\n+\n+      --  N_Parametrized_Expression\n+      --  Sloc points to FUNCTION\n+      --  Specification (Node1)\n+      --  Expression (Node3)\n+\n       -----------------------------------\n       -- 6.4  Procedure Call Statement --\n       -----------------------------------\n@@ -7314,6 +7332,7 @@ package Sinfo is\n       N_Incomplete_Type_Declaration,\n       N_Loop_Parameter_Specification,\n       N_Object_Declaration,\n+      N_Parametrized_Expression,\n       N_Protected_Type_Declaration,\n       N_Private_Extension_Declaration,\n       N_Private_Type_Declaration,\n@@ -10422,6 +10441,13 @@ package Sinfo is\n         4 => True,    --  Handled_Statement_Sequence (Node4)\n         5 => False),  --  Corresponding_Spec (Node5-Sem)\n \n+     N_Parametrized_Expression =>\n+       (1 => True,    --  Specification (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => False,   --  unused\n+        5 => False),  --  unused\n+\n      N_Procedure_Call_Statement =>\n        (1 => False,   --  Controlling_Argument (Node1-Sem)\n         2 => True,    --  Name (Node2)"}, {"sha": "f7aceea18c167c6171abc723cb1a6a7a7f037acc", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad110ee8874446d1993a66fee67b9a7c6fd44a7a/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=ad110ee8874446d1993a66fee67b9a7c6fd44a7a", "patch": "@@ -2388,6 +2388,17 @@ package body Sprint is\n                Write_Str (\", \");\n             end if;\n \n+         when N_Parametrized_Expression =>\n+            Write_Indent;\n+            Sprint_Node_Sloc (Specification (Node));\n+\n+            Write_Str (\" is\");\n+            Indent_Begin;\n+            Write_Indent;\n+            Sprint_Node (Expression (Node));\n+            Write_Char (';');\n+            Indent_End;\n+\n          when N_Pop_Constraint_Error_Label =>\n             Write_Indent_Str (\"%pop_constraint_error_label\");\n "}]}