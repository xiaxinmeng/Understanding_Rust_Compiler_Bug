{"sha": "45e5214c6f9314d8b176cc284861e6fb4c087a50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVlNTIxNGM2ZjkzMTRkOGIxNzZjYzI4NDg2MWU2ZmI0YzA4N2E1MA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2010-09-09T11:30:15Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2010-09-09T11:30:15Z"}, "message": "s390.c (legitimate_reload_constant_p): Accept floating- point zero operands that fit into a single GPR.\n\n2010-09-09  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n\n\t* config/s390/s390.c (legitimate_reload_constant_p): Accept floating-\n\tpoint zero operands that fit into a single GPR.\n\t(s390_preferred_reload_class): Ensure we only return general-purpose\n\tregister classes.\n\t* config/s390/s390.md (\"*mov<mode>_64dfp\"): Use lghi to load\n\tfloating-point zero operands into GPRs.\n\t(\"*mov<mode>_64\"): Likewise.\n\t(\"mov<mode>\"): Likewise using lhi.\n\nFrom-SVN: r164076", "tree": {"sha": "1c9dbb79d7f4de70010eca2342ec66a538808500", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c9dbb79d7f4de70010eca2342ec66a538808500"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45e5214c6f9314d8b176cc284861e6fb4c087a50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e5214c6f9314d8b176cc284861e6fb4c087a50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45e5214c6f9314d8b176cc284861e6fb4c087a50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e5214c6f9314d8b176cc284861e6fb4c087a50/comments", "author": null, "committer": null, "parents": [{"sha": "98635b04ce12838412d2216a1f55d152346c9ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98635b04ce12838412d2216a1f55d152346c9ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98635b04ce12838412d2216a1f55d152346c9ff0"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "7fd3efdeaafb693a59d57e6814973a4556d8b2fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e5214c6f9314d8b176cc284861e6fb4c087a50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e5214c6f9314d8b176cc284861e6fb4c087a50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45e5214c6f9314d8b176cc284861e6fb4c087a50", "patch": "@@ -1,3 +1,14 @@\n+2010-09-09  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* config/s390/s390.c (legitimate_reload_constant_p): Accept floating-\n+\tpoint zero operands that fit into a single GPR.\n+\t(s390_preferred_reload_class): Ensure we only return general-purpose\n+\tregister classes.\n+\t* config/s390/s390.md (\"*mov<mode>_64dfp\"): Use lghi to load\n+\tfloating-point zero operands into GPRs.\n+\t(\"*mov<mode>_64\"): Likewise.\n+\t(\"mov<mode>\"): Likewise using lhi.\n+\n 2010-09-09  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/s390/s390.c (s390_symref_operand_p): Return false for"}, {"sha": "ee17153a6169d23ae046ad054a31570302b0a25c", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e5214c6f9314d8b176cc284861e6fb4c087a50/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e5214c6f9314d8b176cc284861e6fb4c087a50/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=45e5214c6f9314d8b176cc284861e6fb4c087a50", "patch": "@@ -2815,6 +2815,12 @@ legitimate_reload_constant_p (rtx op)\n       && larl_operand (op, VOIDmode))\n     return true;\n \n+  /* Accept floating-point zero operands that fit into a single GPR.  */\n+  if (GET_CODE (op) == CONST_DOUBLE\n+      && s390_float_const_zero_p (op)\n+      && GET_MODE_SIZE (GET_MODE (op)) <= UNITS_PER_WORD)\n+    return true;\n+\n   /* Accept double-word operands that can be split.  */\n   if (GET_CODE (op) == CONST_INT\n       && trunc_int_for_mode (INTVAL (op), word_mode) != INTVAL (op))\n@@ -2838,13 +2844,16 @@ s390_preferred_reload_class (rtx op, enum reg_class rclass)\n {\n   switch (GET_CODE (op))\n     {\n-      /* Constants we cannot reload must be forced into the\n-\t literal pool.  */\n-\n+      /* Constants we cannot reload into general registers\n+\t must be forced into the literal pool.  */\n       case CONST_DOUBLE:\n       case CONST_INT:\n-\tif (legitimate_reload_constant_p (op))\n-\t  return rclass;\n+\tif (reg_class_subset_p (GENERAL_REGS, rclass)\n+\t    && legitimate_reload_constant_p (op))\n+\t  return GENERAL_REGS;\n+\telse if (reg_class_subset_p (ADDR_REGS, rclass)\n+\t\t && legitimate_reload_constant_p (op))\n+\t  return ADDR_REGS;\n \telse\n \t  return NO_REGS;\n "}, {"sha": "80cb43ad2e30bd583ea9d82b3c87dd928ca0c6e6", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e5214c6f9314d8b176cc284861e6fb4c087a50/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e5214c6f9314d8b176cc284861e6fb4c087a50/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=45e5214c6f9314d8b176cc284861e6fb4c087a50", "patch": "@@ -2042,9 +2042,9 @@\n \n (define_insn \"*mov<mode>_64dfp\"\n   [(set (match_operand:DD_DF 0 \"nonimmediate_operand\"\n-\t\t\t       \"=f,f,d,f,f,R,T,d, d,RT\")\n+\t\t\t       \"=f,f,d,f,f,R,T,d,d, d,RT\")\n         (match_operand:DD_DF 1 \"general_operand\"\n-\t\t\t       \" f,d,f,R,T,f,f,d,RT, d\"))]\n+\t\t\t       \" f,d,f,R,T,f,f,G,d,RT, d\"))]\n   \"TARGET_DFP\"\n   \"@\n    ldr\\t%0,%1\n@@ -2054,32 +2054,34 @@\n    ldy\\t%0,%1\n    std\\t%1,%0\n    stdy\\t%1,%0\n+   lghi\\t%0,0\n    lgr\\t%0,%1\n    lg\\t%0,%1\n    stg\\t%1,%0\"\n-  [(set_attr \"op_type\" \"RR,RRE,RRE,RX,RXY,RX,RXY,RRE,RXY,RXY\")\n+  [(set_attr \"op_type\" \"RR,RRE,RRE,RX,RXY,RX,RXY,RI,RRE,RXY,RXY\")\n    (set_attr \"type\" \"floaddf,floaddf,floaddf,floaddf,floaddf,\n-                     fstoredf,fstoredf,lr,load,store\")\n-   (set_attr \"z10prop\" \"*,*,*,*,*,*,*,z10_fr_E1,z10_fwd_A3,z10_rec\")\n+                     fstoredf,fstoredf,*,lr,load,store\")\n+   (set_attr \"z10prop\" \"*,*,*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fwd_A3,z10_rec\")\n ])\n \n (define_insn \"*mov<mode>_64\"\n-  [(set (match_operand:DD_DF 0 \"nonimmediate_operand\" \"=f,f,f,R,T,d, d,RT\")\n-        (match_operand:DD_DF 1 \"general_operand\"       \"f,R,T,f,f,d,RT, d\"))]\n+  [(set (match_operand:DD_DF 0 \"nonimmediate_operand\" \"=f,f,f,R,T,d,d, d,RT\")\n+        (match_operand:DD_DF 1 \"general_operand\"       \"f,R,T,f,f,G,d,RT, d\"))]\n   \"TARGET_ZARCH\"\n   \"@\n    ldr\\t%0,%1\n    ld\\t%0,%1\n    ldy\\t%0,%1\n    std\\t%1,%0\n    stdy\\t%1,%0\n+   lghi\\t%0,0\n    lgr\\t%0,%1\n    lg\\t%0,%1\n    stg\\t%1,%0\"\n-  [(set_attr \"op_type\" \"RR,RX,RXY,RX,RXY,RRE,RXY,RXY\")\n+  [(set_attr \"op_type\" \"RR,RX,RXY,RX,RXY,RI,RRE,RXY,RXY\")\n    (set_attr \"type\" \"fload<mode>,fload<mode>,fload<mode>,\n-                     fstore<mode>,fstore<mode>,lr,load,store\")\n-   (set_attr \"z10prop\" \"*,*,*,*,*,z10_fr_E1,z10_fwd_A3,z10_rec\")])\n+                     fstore<mode>,fstore<mode>,*,lr,load,store\")\n+   (set_attr \"z10prop\" \"*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fwd_A3,z10_rec\")])\n \n (define_insn \"*mov<mode>_31\"\n   [(set (match_operand:DD_DF 0 \"nonimmediate_operand\"\n@@ -2150,25 +2152,26 @@\n \n (define_insn \"mov<mode>\"\n   [(set (match_operand:SD_SF 0 \"nonimmediate_operand\"\n-\t\t\t       \"=f,f,f,R,T,d,d,d,R,T\")\n+\t\t\t       \"=f,f,f,R,T,d,d,d,d,R,T\")\n         (match_operand:SD_SF 1 \"general_operand\"\n-\t\t\t       \" f,R,T,f,f,d,R,T,d,d\"))]\n+\t\t\t       \" f,R,T,f,f,G,d,R,T,d,d\"))]\n   \"\"\n   \"@\n    ler\\t%0,%1\n    le\\t%0,%1\n    ley\\t%0,%1\n    ste\\t%1,%0\n    stey\\t%1,%0\n+   lhi\\t%0,0\n    lr\\t%0,%1\n    l\\t%0,%1\n    ly\\t%0,%1\n    st\\t%1,%0\n    sty\\t%1,%0\"\n-  [(set_attr \"op_type\" \"RR,RX,RXY,RX,RXY,RR,RX,RXY,RX,RXY\")\n+  [(set_attr \"op_type\" \"RR,RX,RXY,RX,RXY,RI,RR,RX,RXY,RX,RXY\")\n    (set_attr \"type\" \"fload<mode>,fload<mode>,fload<mode>,\n-                     fstore<mode>,fstore<mode>,lr,load,load,store,store\")\n-   (set_attr \"z10prop\" \"*,*,*,*,*,z10_fr_E1,z10_fwd_A3,z10_fwd_A3,z10_rec,z10_rec\")])\n+                     fstore<mode>,fstore<mode>,*,lr,load,load,store,store\")\n+   (set_attr \"z10prop\" \"*,*,*,*,*,z10_fwd_A1,z10_fr_E1,z10_fwd_A3,z10_fwd_A3,z10_rec,z10_rec\")])\n \n ;\n ; movcc instruction pattern"}]}