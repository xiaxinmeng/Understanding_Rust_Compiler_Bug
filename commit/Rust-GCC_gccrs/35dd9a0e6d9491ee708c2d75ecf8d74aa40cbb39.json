{"sha": "35dd9a0e6d9491ee708c2d75ecf8d74aa40cbb39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVkZDlhMGU2ZDk0OTFlZTcwOGMyZDc1ZWNmOGQ3NGFhNDBjYmIzOQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2007-05-11T08:40:52Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2007-05-11T08:40:52Z"}, "message": "s390.md (GPR0_REGNUM, [...]): Constants added.\n\n2007-05-11  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.md (GPR0_REGNUM, FPR0_REGNUM, FPR2_REGNUM,\n\tPFPO_CONVERT, PFPO_OP_TYPE_SF, PFPO_OP_TYPE_DF, PFPO_OP_TYPE_TF,\n\tPFPO_OP_TYPE_SD, PFPO_OP_TYPE_DD, PFPO_OP_TYPE_TD, PFPO_OP0_TYPE_SHIFT,\n\tPFPO_OP1_TYPE_SHIFT): Constants added.\n\t(DFP_ALL): Mode macro defined.\n\t(\"*trunc<BFP:mode><DFP_ALL:mode>2\", \"*trunc<DFP_ALL:mode><BFP:mode>2\",\n\t\"*extend<BFP:mode><DFP_ALL:mode>2\", \"*extend<DFP_ALL:mode><BFP:mode>2\"):\n\tInsn definitions added.\n\t(\"trunc<BFP:mode><DFP_ALL:mode>2\", \"trunc<DFP_ALL:mode><BFP:mode>2\",\n\t\"extend<BFP:mode><DFP_ALL:mode>2\", \"extend<DFP_ALL:mode><BFP:mode>2\"):\n\tExpanders added.\n\nFrom-SVN: r124614", "tree": {"sha": "9d1c37bd8cb8a6b3c6be818e82ef992266bb5bc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d1c37bd8cb8a6b3c6be818e82ef992266bb5bc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35dd9a0e6d9491ee708c2d75ecf8d74aa40cbb39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35dd9a0e6d9491ee708c2d75ecf8d74aa40cbb39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35dd9a0e6d9491ee708c2d75ecf8d74aa40cbb39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35dd9a0e6d9491ee708c2d75ecf8d74aa40cbb39/comments", "author": null, "committer": null, "parents": [{"sha": "6c12686bc785194a7e9a7909cfb951e34c9d7355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c12686bc785194a7e9a7909cfb951e34c9d7355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c12686bc785194a7e9a7909cfb951e34c9d7355"}], "stats": {"total": 172, "additions": 172, "deletions": 0}, "files": [{"sha": "50e69eb16215b6776ac8e01285ed76da1062b2fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35dd9a0e6d9491ee708c2d75ecf8d74aa40cbb39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35dd9a0e6d9491ee708c2d75ecf8d74aa40cbb39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35dd9a0e6d9491ee708c2d75ecf8d74aa40cbb39", "patch": "@@ -1,3 +1,17 @@\n+2007-05-11  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.md (GPR0_REGNUM, FPR0_REGNUM, FPR2_REGNUM,\n+\tPFPO_CONVERT, PFPO_OP_TYPE_SF, PFPO_OP_TYPE_DF, PFPO_OP_TYPE_TF,\n+\tPFPO_OP_TYPE_SD, PFPO_OP_TYPE_DD, PFPO_OP_TYPE_TD, PFPO_OP0_TYPE_SHIFT,\n+\tPFPO_OP1_TYPE_SHIFT): Constants added.\n+\t(DFP_ALL): Mode macro defined.\n+\t(\"*trunc<BFP:mode><DFP_ALL:mode>2\", \"*trunc<DFP_ALL:mode><BFP:mode>2\",\n+\t\"*extend<BFP:mode><DFP_ALL:mode>2\", \"*extend<DFP_ALL:mode><BFP:mode>2\"):\n+\tInsn definitions added.\n+\t(\"trunc<BFP:mode><DFP_ALL:mode>2\", \"trunc<DFP_ALL:mode><BFP:mode>2\",\n+\t\"extend<BFP:mode><DFP_ALL:mode>2\", \"extend<DFP_ALL:mode><BFP:mode>2\"):\n+\tExpanders added.\n+\n 2007-05-10  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/31885"}, {"sha": "3fac610c543aee031635134eed873c2761d9db4e", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35dd9a0e6d9491ee708c2d75ecf8d74aa40cbb39/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35dd9a0e6d9491ee708c2d75ecf8d74aa40cbb39/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=35dd9a0e6d9491ee708c2d75ecf8d74aa40cbb39", "patch": "@@ -137,6 +137,8 @@\n ;; Registers\n ;;\n \n+; Registers with special meaning\n+\n (define_constants\n   [\n    ; Sibling call register.\n@@ -151,6 +153,37 @@\n    (TP_REGNUM\t\t\t36)\n   ])\n \n+; Hardware register names\n+\n+(define_constants\n+  [\n+   ; General purpose registers\n+   (GPR0_REGNUM                  0)\n+   ; Floating point registers.\n+   (FPR0_REGNUM                 16)\n+   (FPR2_REGNUM                 18)\n+  ])\n+\n+;;\n+;; PFPO GPR0 argument format\n+;;\n+\n+(define_constants\n+  [\n+   ; PFPO operation type\n+   (PFPO_CONVERT          0x1000000)\n+   ; PFPO operand types\n+   (PFPO_OP_TYPE_SF             0x5)\n+   (PFPO_OP_TYPE_DF             0x6)\n+   (PFPO_OP_TYPE_TF             0x7)\n+   (PFPO_OP_TYPE_SD             0x8)\n+   (PFPO_OP_TYPE_DD             0x9)\n+   (PFPO_OP_TYPE_TD             0xa)\n+   ; Bitposition of operand types\n+   (PFPO_OP0_TYPE_SHIFT          16)\n+   (PFPO_OP1_TYPE_SHIFT           8)\n+  ])\n+\n \n ;; Instruction operand type as used in the Principles of Operation.\n ;; Used to determine defaults for length and other attribute values.\n@@ -221,6 +254,7 @@\n (define_mode_macro FP [TF DF SF (TD \"TARGET_HARD_DFP\") (DD \"TARGET_HARD_DFP\")])\n (define_mode_macro BFP [TF DF SF])\n (define_mode_macro DFP [TD DD])\n+(define_mode_macro DFP_ALL [TD DD SD])\n (define_mode_macro DSF [DF SF])\n (define_mode_macro SD_SF [SF SD])\n (define_mode_macro DD_DF [DF DD])\n@@ -3437,6 +3471,130 @@\n   [(set_attr \"op_type\" \"RRF\")\n    (set_attr \"type\"    \"fsimptf\")])\n \n+; Binary <-> Decimal floating point trunc patterns\n+;\n+\n+(define_insn \"*trunc<BFP:mode><DFP_ALL:mode>2\"\n+  [(set (reg:DFP_ALL FPR0_REGNUM)\n+        (float_truncate:DFP_ALL (reg:BFP FPR2_REGNUM)))\n+   (use (reg:SI GPR0_REGNUM))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_HARD_FLOAT && TARGET_DFP\"\n+  \"pfpo\")\n+\n+(define_insn \"*trunc<DFP_ALL:mode><BFP:mode>2\"\n+  [(set (reg:BFP FPR0_REGNUM)\n+        (float_truncate:BFP (reg:DFP_ALL FPR2_REGNUM)))\n+   (use (reg:SI GPR0_REGNUM))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_HARD_FLOAT && TARGET_DFP\"\n+  \"pfpo\")\n+\n+(define_expand \"trunc<BFP:mode><DFP_ALL:mode>2\"\n+  [(set (reg:BFP FPR2_REGNUM) (match_operand:BFP 1 \"nonimmediate_operand\" \"\"))\n+   (set (reg:SI GPR0_REGNUM) (match_dup 2))\n+   (parallel\n+    [(set (reg:DFP_ALL FPR0_REGNUM)\n+          (float_truncate:DFP_ALL (reg:BFP FPR2_REGNUM)))\n+     (use (reg:SI GPR0_REGNUM))\n+     (clobber (reg:CC CC_REGNUM))])\n+   (set (match_operand:DFP_ALL 0 \"nonimmediate_operand\" \"\")\n+        (reg:DFP_ALL FPR0_REGNUM))]\n+  \"TARGET_HARD_FLOAT && TARGET_DFP\n+   && GET_MODE_SIZE (<BFP:MODE>mode) > GET_MODE_SIZE (<DFP_ALL:MODE>mode)\"\n+{\n+  HOST_WIDE_INT flags;\n+\n+  flags = (PFPO_CONVERT |\n+           PFPO_OP_TYPE_<DFP_ALL:MODE> << PFPO_OP0_TYPE_SHIFT |\n+           PFPO_OP_TYPE_<BFP:MODE> << PFPO_OP1_TYPE_SHIFT);\n+\n+  operands[2] = GEN_INT (flags);\n+})\n+\n+(define_expand \"trunc<DFP_ALL:mode><BFP:mode>2\"\n+  [(set (reg:DFP_ALL FPR2_REGNUM)\n+        (match_operand:DFP_ALL 1 \"nonimmediate_operand\" \"\"))\n+   (set (reg:SI GPR0_REGNUM) (match_dup 2))\n+   (parallel\n+    [(set (reg:BFP FPR0_REGNUM) (float_truncate:BFP (reg:DFP_ALL FPR2_REGNUM)))\n+     (use (reg:SI GPR0_REGNUM))\n+     (clobber (reg:CC CC_REGNUM))])\n+   (set (match_operand:BFP 0 \"nonimmediate_operand\" \"\") (reg:BFP FPR0_REGNUM))]\n+  \"TARGET_HARD_FLOAT && TARGET_DFP\n+   && GET_MODE_SIZE (<DFP_ALL:MODE>mode) >= GET_MODE_SIZE (<BFP:MODE>mode)\"\n+{\n+  HOST_WIDE_INT flags;\n+\n+  flags = (PFPO_CONVERT |\n+           PFPO_OP_TYPE_<BFP:MODE> << PFPO_OP0_TYPE_SHIFT |\n+           PFPO_OP_TYPE_<DFP_ALL:MODE> << PFPO_OP1_TYPE_SHIFT);\n+\n+  operands[2] = GEN_INT (flags);\n+})\n+\n+;\n+; Binary <-> Decimal floating point extend patterns\n+;\n+\n+(define_insn \"*extend<BFP:mode><DFP_ALL:mode>2\"\n+  [(set (reg:DFP_ALL FPR0_REGNUM) (float_extend:DFP_ALL (reg:BFP FPR2_REGNUM)))\n+   (use (reg:SI GPR0_REGNUM))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_HARD_FLOAT && TARGET_DFP\"\n+  \"pfpo\")\n+\n+(define_insn \"*extend<DFP_ALL:mode><BFP:mode>2\"\n+  [(set (reg:BFP FPR0_REGNUM) (float_extend:BFP (reg:DFP_ALL FPR2_REGNUM)))\n+   (use (reg:SI GPR0_REGNUM))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_HARD_FLOAT && TARGET_DFP\"\n+  \"pfpo\")\n+\n+(define_expand \"extend<BFP:mode><DFP_ALL:mode>2\"\n+  [(set (reg:BFP FPR2_REGNUM) (match_operand:BFP 1 \"nonimmediate_operand\" \"\"))\n+   (set (reg:SI GPR0_REGNUM) (match_dup 2))\n+   (parallel\n+    [(set (reg:DFP_ALL FPR0_REGNUM)\n+          (float_extend:DFP_ALL (reg:BFP FPR2_REGNUM)))\n+     (use (reg:SI GPR0_REGNUM))\n+     (clobber (reg:CC CC_REGNUM))])\n+   (set (match_operand:DFP_ALL 0 \"nonimmediate_operand\" \"\")\n+        (reg:DFP_ALL FPR0_REGNUM))]\n+  \"TARGET_HARD_FLOAT && TARGET_DFP\n+   && GET_MODE_SIZE (<BFP:MODE>mode) <= GET_MODE_SIZE (<DFP_ALL:MODE>mode)\"\n+{\n+  HOST_WIDE_INT flags;\n+\n+  flags = (PFPO_CONVERT |\n+           PFPO_OP_TYPE_<DFP_ALL:MODE> << PFPO_OP0_TYPE_SHIFT |\n+           PFPO_OP_TYPE_<BFP:MODE> << PFPO_OP1_TYPE_SHIFT);\n+\n+  operands[2] = GEN_INT (flags);\n+})\n+\n+(define_expand \"extend<DFP_ALL:mode><BFP:mode>2\"\n+  [(set (reg:DFP_ALL FPR2_REGNUM)\n+        (match_operand:DFP_ALL 1 \"nonimmediate_operand\" \"\"))\n+   (set (reg:SI GPR0_REGNUM) (match_dup 2))\n+   (parallel\n+    [(set (reg:BFP FPR0_REGNUM) (float_extend:BFP (reg:DFP_ALL FPR2_REGNUM)))\n+     (use (reg:SI GPR0_REGNUM))\n+     (clobber (reg:CC CC_REGNUM))])\n+   (set (match_operand:BFP 0 \"nonimmediate_operand\" \"\") (reg:BFP FPR0_REGNUM))]\n+  \"TARGET_HARD_FLOAT && TARGET_DFP\n+   && GET_MODE_SIZE (<DFP_ALL:MODE>mode) < GET_MODE_SIZE (<BFP:MODE>mode)\"\n+{\n+  HOST_WIDE_INT flags;\n+\n+  flags = (PFPO_CONVERT |\n+           PFPO_OP_TYPE_<BFP:MODE> << PFPO_OP0_TYPE_SHIFT |\n+           PFPO_OP_TYPE_<DFP_ALL:MODE> << PFPO_OP1_TYPE_SHIFT);\n+\n+  operands[2] = GEN_INT (flags);\n+})\n+\n+\n ;;\n ;; ARITHMETIC OPERATIONS\n ;;"}]}