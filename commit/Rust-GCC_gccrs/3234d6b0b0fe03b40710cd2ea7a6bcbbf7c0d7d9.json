{"sha": "3234d6b0b0fe03b40710cd2ea7a6bcbbf7c0d7d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIzNGQ2YjBiMGZlMDNiNDA3MTBjZDJlYTdhNmJjYmJmN2MwZDdkOQ==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@ira.uka.de", "date": "2008-05-06T08:55:57Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2008-05-06T08:55:57Z"}, "message": "2008-05-06  Johannes Singler  <singler@ira.uka.de>\n\n        * include/parallel/multiway_merge.h:\n          (multiway_merge_*_unguarded):\n          Pass sentinel directly, to allow correct determination.\n          (multiway_merge_loser_tree_unguarded):\n          Remove over-cautious assertion.\n          (calls to multiway_merge_*_splitting):\n          Parametrize with type that is correct in all cases.\n        * include/parallel/losertree.h:\n          (delete_min_insert (in many classes)):\n          Correct and standardize assertions.\n\nFrom-SVN: r134977", "tree": {"sha": "e9b5fe865265ce7f2fc7e762b25c399d81fe4209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9b5fe865265ce7f2fc7e762b25c399d81fe4209"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3234d6b0b0fe03b40710cd2ea7a6bcbbf7c0d7d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3234d6b0b0fe03b40710cd2ea7a6bcbbf7c0d7d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3234d6b0b0fe03b40710cd2ea7a6bcbbf7c0d7d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3234d6b0b0fe03b40710cd2ea7a6bcbbf7c0d7d9/comments", "author": null, "committer": null, "parents": [{"sha": "333d8f61a21edd364b966ab8aa70e232ccdc4810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/333d8f61a21edd364b966ab8aa70e232ccdc4810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/333d8f61a21edd364b966ab8aa70e232ccdc4810"}], "stats": {"total": 211, "additions": 133, "deletions": 78}, "files": [{"sha": "b5201c5b3323372053d0f8257e2393e275cc5b5e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3234d6b0b0fe03b40710cd2ea7a6bcbbf7c0d7d9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3234d6b0b0fe03b40710cd2ea7a6bcbbf7c0d7d9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3234d6b0b0fe03b40710cd2ea7a6bcbbf7c0d7d9", "patch": "@@ -1,3 +1,16 @@\n+2008-05-06  Johannes Singler  <singler@ira.uka.de>\n+\n+        * include/parallel/multiway_merge.h:\n+          (multiway_merge_*_unguarded):\n+          Pass sentinel directly, to allow correct determination.\n+          (multiway_merge_loser_tree_unguarded):\n+          Remove over-cautious assertion.\n+          (calls to multiway_merge_*_splitting):\n+          Parametrize with type that is correct in all cases.\n+        * include/parallel/losertree.h:\n+          (delete_min_insert (in many classes)):\n+          Correct and standardize assertions. \n+\n 2008-05-05  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/util/testsuite_visualization.h: Move contents into..."}, {"sha": "3736b908557e418a14c630bae27433d5a1ffde90", "filename": "libstdc++-v3/include/parallel/losertree.h", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3234d6b0b0fe03b40710cd2ea7a6bcbbf7c0d7d9/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3234d6b0b0fe03b40710cd2ea7a6bcbbf7c0d7d9/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flosertree.h?ref=3234d6b0b0fe03b40710cd2ea7a6bcbbf7c0d7d9", "patch": "@@ -220,6 +220,11 @@ class LoserTree : public LoserTreeBase<T, Comparator>\n   // Do not pass a const reference since key will be used as local variable.\n   void delete_min_insert(T key, bool sup)\n   {\n+#if _GLIBCXX_ASSERTIONS\n+    // no dummy sequence can ever be at the top!\n+    _GLIBCXX_PARALLEL_ASSERT(losers[0].source != -1);\n+#endif\n+\n     int source = losers[0].source;\n     for (unsigned int pos = (k + source) / 2; pos > 0; pos /= 2)\n       {\n@@ -313,8 +318,8 @@ class LoserTree</* stable == */false, T, Comparator> :\n   delete_min_insert(T key, bool sup)\n   {\n #if _GLIBCXX_ASSERTIONS\n-    // loser trees are only used for at least 2 sequences\n-    _GLIBCXX_PARALLEL_ASSERT(_M_log_k > 1);\n+    // no dummy sequence can ever be at the top!\n+    _GLIBCXX_PARALLEL_ASSERT(losers[0].source != -1);\n #endif\n \n     int source = losers[0].source;\n@@ -436,6 +441,11 @@ class LoserTreePointer : public LoserTreePointerBase<T, Comparator>\n \n   void delete_min_insert(const T& key, bool sup)\n   {\n+#if _GLIBCXX_ASSERTIONS\n+    // no dummy sequence can ever be at the top!\n+    _GLIBCXX_PARALLEL_ASSERT(losers[0].source != -1);\n+#endif\n+\n     const T* keyp = &key;\n     int source = losers[0].source;\n     for (unsigned int pos = (k + source) / 2; pos > 0; pos /= 2)\n@@ -511,6 +521,11 @@ class LoserTreePointer</* stable == */false, T, Comparator> :\n \n   void delete_min_insert(const T& key, bool sup)\n   {\n+#if _GLIBCXX_ASSERTIONS\n+    // no dummy sequence can ever be at the top!\n+    _GLIBCXX_PARALLEL_ASSERT(losers[0].source != -1);\n+#endif\n+\n     const T* keyp = &key;\n     int source = losers[0].source;\n     for (unsigned int pos = (k + source) / 2; pos > 0; pos /= 2)\n@@ -569,7 +584,7 @@ class LoserTreeUnguardedBase\n     // Avoid default-constructing losers[].key\n     losers = static_cast<Loser*>(::operator new(2 * k * sizeof(Loser)));\n \n-    for (unsigned int i = /*k + ik - 1*/0; i < (2 * k); ++i)\n+    for (unsigned int i = k + ik - 1; i < (2 * k); ++i)\n       {\n         losers[i].key = _sentinel;\n         losers[i].source = -1;\n@@ -582,8 +597,8 @@ class LoserTreeUnguardedBase\n   inline int\n   get_min_source()\n   {\n-    // no dummy sequence can ever be at the top!\n #if _GLIBCXX_ASSERTIONS\n+    // no dummy sequence can ever be at the top!\n     _GLIBCXX_PARALLEL_ASSERT(losers[0].source != -1);\n #endif\n     return losers[0].source;\n@@ -648,8 +663,8 @@ class LoserTreeUnguarded : public LoserTreeUnguardedBase<T, Comparator>\n   {\n     losers[0] = losers[init_winner(1)];\n \n-    // no dummy sequence can ever be at the top at the beginning (0 sequences!)\n #if _GLIBCXX_ASSERTIONS\n+    // no dummy sequence can ever be at the top at the beginning (0 sequences!)\n     _GLIBCXX_PARALLEL_ASSERT(losers[0].source != -1);\n #endif\n   }\n@@ -658,13 +673,12 @@ class LoserTreeUnguarded : public LoserTreeUnguardedBase<T, Comparator>\n   inline void\n   delete_min_insert(T key, bool)\n   {\n-    // No dummy sequence can ever be at the top and be retrieved!\n #if _GLIBCXX_ASSERTIONS\n+    // no dummy sequence can ever be at the top!\n     _GLIBCXX_PARALLEL_ASSERT(losers[0].source != -1);\n #endif\n \n     int source = losers[0].source;\n-    printf(\"%d\\n\", source);\n     for (unsigned int pos = (k + source) / 2; pos > 0; pos /= 2)\n       {\n         // The smaller one gets promoted, ties are broken by source.\n@@ -739,8 +753,8 @@ class LoserTreeUnguarded</* stable == */false, T, Comparator> :\n   {\n     losers[0] = losers[init_winner(1)];\n \n-    // no dummy sequence can ever be at the top at the beginning (0 sequences!)\n #if _GLIBCXX_ASSERTIONS\n+    // no dummy sequence can ever be at the top at the beginning (0 sequences!)\n     _GLIBCXX_PARALLEL_ASSERT(losers[0].source != -1);\n #endif\n   }\n@@ -749,7 +763,11 @@ class LoserTreeUnguarded</* stable == */false, T, Comparator> :\n   inline void\n   delete_min_insert(T key, bool)\n   {\n-    printf(\"wrong\\n\");\n+#if _GLIBCXX_ASSERTIONS\n+    // no dummy sequence can ever be at the top!\n+    _GLIBCXX_PARALLEL_ASSERT(losers[0].source != -1);\n+#endif\n+\n     int source = losers[0].source;\n     for (unsigned int pos = (k + source) / 2; pos > 0; pos /= 2)\n       {\n@@ -785,15 +803,14 @@ class LoserTreePointerUnguardedBase\n \n   unsigned int ik, k, offset;\n   Loser* losers;\n-  const T sentinel;\n   Comparator comp;\n \n public:\n \n   inline\n-  LoserTreePointerUnguardedBase(unsigned int _k, const T _sentinel,\n+  LoserTreePointerUnguardedBase(unsigned int _k, const T& _sentinel,\n       Comparator _comp = std::less<T>())\n-    : sentinel(_sentinel), comp(_comp)\n+    : comp(_comp)\n   {\n     ik = _k;\n \n@@ -803,9 +820,9 @@ class LoserTreePointerUnguardedBase\n     // Avoid default-constructing losers[].key\n     losers = new Loser[2 * k];\n \n-    for (unsigned int i = /*k + ik - 1*/0; i < (2 * k); ++i)\n+    for (unsigned int i = k + ik - 1; i < (2 * k); ++i)\n       {\n-        losers[i].keyp = &sentinel;\n+        losers[i].keyp = &_sentinel;\n         losers[i].source = -1;\n       }\n   }\n@@ -816,8 +833,8 @@ class LoserTreePointerUnguardedBase\n   inline int\n   get_min_source()\n   {\n-    // no dummy sequence can ever be at the top!\n #if _GLIBCXX_ASSERTIONS\n+    // no dummy sequence can ever be at the top!\n     _GLIBCXX_PARALLEL_ASSERT(losers[0].source != -1);\n #endif\n     return losers[0].source;\n@@ -847,7 +864,7 @@ class LoserTreePointerUnguarded :\n   using Base::losers;\n \n public:\n-  LoserTreePointerUnguarded(unsigned int _k, const T _sentinel,\n+  LoserTreePointerUnguarded(unsigned int _k, const T& _sentinel,\n       Comparator _comp = std::less<T>())\n     : Base::LoserTreePointerUnguardedBase(_k, _sentinel, _comp)\n   {}\n@@ -883,15 +900,20 @@ class LoserTreePointerUnguarded :\n   {\n     losers[0] = losers[init_winner(1)];\n \n-    // no dummy sequence can ever be at the top at the beginning (0 sequences!)\n #if _GLIBCXX_ASSERTIONS\n+    // no dummy sequence can ever be at the top at the beginning (0 sequences!)\n     _GLIBCXX_PARALLEL_ASSERT(losers[0].source != -1);\n #endif\n   }\n \n   inline void\n   delete_min_insert(const T& key, bool sup)\n   {\n+#if _GLIBCXX_ASSERTIONS\n+    // no dummy sequence can ever be at the top!\n+    _GLIBCXX_PARALLEL_ASSERT(losers[0].source != -1);\n+#endif\n+\n     const T* keyp = &key;\n     int source = losers[0].source;\n     for (unsigned int pos = (k + source) / 2; pos > 0; pos /= 2)\n@@ -908,11 +930,6 @@ class LoserTreePointerUnguarded :\n \n     losers[0].source = source;\n     losers[0].keyp = keyp;\n-\n-    // no dummy sequence can ever be at the top!\n-#if _GLIBCXX_ASSERTIONS\n-    _GLIBCXX_PARALLEL_ASSERT(losers[0].source != -1);\n-#endif\n   }\n };\n \n@@ -930,7 +947,7 @@ class LoserTreePointerUnguarded</* stable == */false, T, Comparator> :\n   using Base::losers;\n \n public:\n-  LoserTreePointerUnguarded(unsigned int _k, const T _sentinel,\n+  LoserTreePointerUnguarded(unsigned int _k, const T& _sentinel,\n       Comparator _comp = std::less<T>())\n     : Base::LoserTreePointerUnguardedBase(_k, _sentinel, _comp)\n   {}\n@@ -973,15 +990,20 @@ class LoserTreePointerUnguarded</* stable == */false, T, Comparator> :\n   {\n     losers[0] = losers[init_winner(1)];\n \n-    // no dummy sequence can ever be at the top at the beginning (0 sequences!)\n #if _GLIBCXX_ASSERTIONS\n+    // no dummy sequence can ever be at the top at the beginning (0 sequences!)\n     _GLIBCXX_PARALLEL_ASSERT(losers[0].source != -1);\n #endif\n   }\n \n   inline void\n   delete_min_insert(const T& key, bool sup)\n   {\n+#if _GLIBCXX_ASSERTIONS\n+    // no dummy sequence can ever be at the top!\n+    _GLIBCXX_PARALLEL_ASSERT(losers[0].source != -1);\n+#endif\n+\n     const T* keyp = &key;\n     int source = losers[0].source;\n     for (unsigned int pos = (k + source) / 2; pos > 0; pos /= 2)"}, {"sha": "37e99cdeb6a9adfdeacef3dac17ae99da9b61754", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 74, "deletions": 54, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3234d6b0b0fe03b40710cd2ea7a6bcbbf7c0d7d9/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3234d6b0b0fe03b40710cd2ea7a6bcbbf7c0d7d9/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=3234d6b0b0fe03b40710cd2ea7a6bcbbf7c0d7d9", "patch": "@@ -615,15 +615,19 @@ template<typename LT,\n  * @return End iterator of output sequence.\n  */\n template<typename LT,\n-\t typename RandomAccessIteratorIterator,\n-\t typename RandomAccessIterator3,\n-\t typename _DifferenceTp, typename Comparator>\n+    typename RandomAccessIteratorIterator,\n+    typename RandomAccessIterator3,\n+    typename _DifferenceTp, typename Comparator>\n   RandomAccessIterator3\n-  multiway_merge_loser_tree_unguarded(RandomAccessIteratorIterator seqs_begin,\n-                                      RandomAccessIteratorIterator seqs_end,\n-                                      RandomAccessIterator3 target,\n-                                      int min_seq, Comparator comp,\n-                                      _DifferenceTp length)\n+  multiway_merge_loser_tree_unguarded(\n+    RandomAccessIteratorIterator seqs_begin,\n+    RandomAccessIteratorIterator seqs_end,\n+    RandomAccessIterator3 target,\n+    const typename std::iterator_traits<typename std::iterator_traits<\n+      RandomAccessIteratorIterator>::value_type::first_type>::value_type&\n+        sentinel,\n+    Comparator comp,\n+    _DifferenceTp length)\n   {\n     _GLIBCXX_CALL(length)\n     typedef _DifferenceTp difference_type;\n@@ -636,10 +640,6 @@ template<typename LT,\n \n     int k = seqs_end - seqs_begin;\n \n-    // Determine the sentinel.  The sentinel is largest/last element of the\n-    // sequences with the smallest largest/last element.\n-    value_type sentinel = *(seqs_begin[min_seq].second - 1);\n-\n     LT lt(k, sentinel, comp);\n \n     for (int t = 0; t < k; ++t)\n@@ -674,9 +674,6 @@ template<typename LT,\n         *(target++) = *(seqs_begin[source].first++);\n \n #if _GLIBCXX_ASSERTIONS\n-        _GLIBCXX_PARALLEL_ASSERT(\n-            (seqs_begin[source].first != seqs_begin[source].second)\n-            || (i >= length - 1));\n         ++i;\n #endif\n         // Replace from same source.\n@@ -712,11 +709,15 @@ template<\n     typename _DifferenceTp,\n     typename Comparator>\n   RandomAccessIterator3\n-  multiway_merge_loser_tree_sentinel(RandomAccessIteratorIterator seqs_begin,\n-                                     RandomAccessIteratorIterator seqs_end,\n-                                     RandomAccessIterator3 target,\n-                                     Comparator comp,\n-                                     _DifferenceTp length)\n+  multiway_merge_loser_tree_sentinel(\n+    RandomAccessIteratorIterator seqs_begin,\n+    RandomAccessIteratorIterator seqs_end,\n+    RandomAccessIterator3 target,\n+    const typename std::iterator_traits<typename std::iterator_traits<\n+      RandomAccessIteratorIterator>::value_type::first_type>::value_type&\n+        sentinel,\n+    Comparator comp,\n+    _DifferenceTp length)\n   {\n     _GLIBCXX_CALL(length)\n \n@@ -739,7 +740,7 @@ template<\n \n     target_end = multiway_merge_loser_tree_unguarded\n         <UnguardedLoserTree>\n-      (seqs_begin, seqs_end, target, 0, comp, length);\n+      (seqs_begin, seqs_end, target, sentinel, comp, length);\n \n #if _GLIBCXX_ASSERTIONS\n     _GLIBCXX_PARALLEL_ASSERT(target_end == target + length);\n@@ -904,6 +905,9 @@ struct multiway_merge_k_variant_sentinel_switch\n       RandomAccessIteratorIterator seqs_begin,\n       RandomAccessIteratorIterator seqs_end,\n       RandomAccessIterator3 target,\n+      const typename std::iterator_traits<typename std::iterator_traits<\n+        RandomAccessIteratorIterator>::value_type::first_type>::value_type&\n+          sentinel,\n       Comparator comp, _DifferenceTp length)\n   {\n     typedef typename std::iterator_traits<RandomAccessIteratorIterator>\n@@ -917,7 +921,7 @@ struct multiway_merge_k_variant_sentinel_switch\n             loser_tree_traits<value_type>::use_pointer\n           , LoserTreePointerUnguarded<stable, value_type, Comparator>\n           , LoserTreeUnguarded<stable, value_type, Comparator>\n-        >::__type>(seqs_begin, seqs_end, target, comp, length);\n+        >::__type>(seqs_begin, seqs_end, target, sentinel, comp, length);\n   }\n };\n \n@@ -938,6 +942,9 @@ struct multiway_merge_k_variant_sentinel_switch\n       RandomAccessIteratorIterator seqs_begin,\n       RandomAccessIteratorIterator seqs_end,\n       RandomAccessIterator3 target,\n+      const typename std::iterator_traits<typename std::iterator_traits<\n+        RandomAccessIteratorIterator>::value_type::first_type>::value_type&\n+          sentinel,\n       Comparator comp, _DifferenceTp length)\n   {\n     typedef typename std::iterator_traits<RandomAccessIteratorIterator>\n@@ -976,10 +983,14 @@ template<\n     typename _DifferenceTp,\n     typename Comparator>\n   RandomAccessIterator3\n-  sequential_multiway_merge(RandomAccessIteratorIterator seqs_begin,\n-                 RandomAccessIteratorIterator seqs_end,\n-                 RandomAccessIterator3 target,\n-                 Comparator comp, _DifferenceTp length)\n+  sequential_multiway_merge(\n+    RandomAccessIteratorIterator seqs_begin,\n+    RandomAccessIteratorIterator seqs_end,\n+    RandomAccessIterator3 target,\n+    const typename std::iterator_traits<typename std::iterator_traits<\n+      RandomAccessIteratorIterator>::value_type::first_type>::value_type&\n+        sentinel,\n+    Comparator comp, _DifferenceTp length)\n   {\n     _GLIBCXX_CALL(length)\n \n@@ -1049,7 +1060,8 @@ template<\n             , RandomAccessIteratorIterator\n             , RandomAccessIterator3\n             , _DifferenceTp\n-            , Comparator>()(seqs_begin, seqs_end, target, comp, length);\n+            , Comparator>()\n+                (seqs_begin, seqs_end, target, sentinel, comp, length);\n           break;\n       }\n #if _GLIBCXX_ASSERTIONS\n@@ -1376,8 +1388,8 @@ template<\n \n           if(length > target_position)\n             sequential_multiway_merge<stable, sentinels>(\n-              chunks, chunks + k, target + target_position, comp,\n-              length - target_position);\n+              chunks, chunks + k, target + target_position,\n+              *(seqs_begin->second), comp, length - target_position);\n \n           delete[] chunks;\n         } // parallel\n@@ -1501,13 +1513,14 @@ multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n       </* stable = */ false, /* sentinels = */ false>\n         (seqs_begin, seqs_end, target, comp,\n         multiway_merge_sampling_splitting</* stable = */ false,\n-          RandomAccessIteratorPairIterator, Comparator, _DifferenceTp>,\n+          typename std::iterator_traits<RandomAccessIteratorPairIterator>\n+            ::value_type*, Comparator, _DifferenceTp>,\n         static_cast<difference_type>(length));\n   else\n     return sequential_multiway_merge\n       </* stable = */false, /* sentinels = */ false>(\n         seqs_begin, seqs_end,\n-        target, comp, length);\n+        target, *(seqs_begin->second), comp, length);\n }\n \n // public interface\n@@ -1533,7 +1546,7 @@ multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n   // Execute multiway merge *sequentially*.\n   return sequential_multiway_merge\n     </* stable = */ false, /* sentinels = */ false>\n-      (seqs_begin, seqs_end, target, comp, length);\n+      (seqs_begin, seqs_end, target, *(seqs_begin->second), comp, length);\n }\n \n //public interface\n@@ -1570,13 +1583,14 @@ multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n           seqs_begin, seqs_end,\n           target, comp,\n           multiway_merge_exact_splitting</* stable = */ false,\n-            RandomAccessIteratorPairIterator, Comparator, _DifferenceTp>,\n+            typename std::iterator_traits<RandomAccessIteratorPairIterator>\n+              ::value_type*, Comparator, _DifferenceTp>,\n           static_cast<difference_type>(length));\n     else\n       return sequential_multiway_merge\n                       </* stable = */ false, /* sentinels = */ false>(\n           seqs_begin, seqs_end,\n-          target, comp, length);\n+          target, *(seqs_begin->second), comp, length);\n }\n \n // public interface\n@@ -1612,13 +1626,14 @@ stable_multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n           seqs_begin, seqs_end,\n           target, comp,\n           multiway_merge_sampling_splitting</* stable = */ true,\n-          RandomAccessIteratorPairIterator, Comparator, _DifferenceTp>,\n+            typename std::iterator_traits<RandomAccessIteratorPairIterator>\n+              ::value_type*, Comparator, _DifferenceTp>,\n           static_cast<difference_type>(length));\n     else\n       return sequential_multiway_merge\n         </* stable = */ true, /* sentinels = */ false>(\n           seqs_begin, seqs_end,\n-          target, comp, length);\n+          target, *(seqs_begin->second), comp, length);\n }\n \n // public interface\n@@ -1644,7 +1659,7 @@ stable_multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n     // Execute multiway merge *sequentially*.\n     return sequential_multiway_merge\n       </* stable = */ true, /* sentinels = */ false>\n-        (seqs_begin, seqs_end, target, comp, length);\n+        (seqs_begin, seqs_end, target, *(seqs_begin->second), comp, length);\n }\n \n // public interface\n@@ -1681,14 +1696,15 @@ stable_multiway_merge(RandomAccessIteratorPairIterator seqs_begin\n           seqs_begin, seqs_end,\n           target, comp, \n           multiway_merge_exact_splitting\n-            </* stable = */ true, RandomAccessIteratorPairIterator,\n-             Comparator, _DifferenceTp>,\n+            </* stable = */ true,\n+              typename std::iterator_traits<RandomAccessIteratorPairIterator>\n+                ::value_type*, Comparator, _DifferenceTp>,\n           static_cast<difference_type>(length));\n     else\n       return sequential_multiway_merge</* stable = */ true,\n         /* sentinels = */ false>(\n           seqs_begin, seqs_end,\n-          target, comp, length);\n+          target, *(seqs_begin->second), comp, length);\n }\n \n /**\n@@ -1798,14 +1814,15 @@ multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n         </* stable = */ false, /* sentinels = */ true>\n           (seqs_begin, seqs_end, target, comp,\n           multiway_merge_sampling_splitting\n-            </* stable = */ false, RandomAccessIteratorPairIterator,\n-             Comparator, _DifferenceTp>,\n+            </* stable = */ false,\n+              typename std::iterator_traits<RandomAccessIteratorPairIterator>\n+                ::value_type*, Comparator, _DifferenceTp>,\n           static_cast<difference_type>(length));\n     else\n       return sequential_multiway_merge\n         </* stable = */false, /* sentinels = */ true>(\n           seqs_begin, seqs_end,\n-          target, comp, length);\n+          target, *(seqs_begin->second), comp, length);\n }\n \n //public interface\n@@ -1831,7 +1848,7 @@ multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n     // Execute multiway merge *sequentially*.\n     return sequential_multiway_merge\n       </* stable = */ false, /* sentinels = */ true>\n-        (seqs_begin, seqs_end, target, comp, length);\n+        (seqs_begin, seqs_end, target, *(seqs_begin->second), comp, length);\n }\n \n // public interface\n@@ -1868,14 +1885,15 @@ multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n           seqs_begin, seqs_end,\n           target, comp,\n           multiway_merge_exact_splitting\n-            </* stable = */ false, RandomAccessIteratorPairIterator,\n-              Comparator, _DifferenceTp>,\n+            </* stable = */ false,\n+              typename std::iterator_traits<RandomAccessIteratorPairIterator>\n+                ::value_type*, Comparator, _DifferenceTp>,\n           static_cast<difference_type>(length));\n     else\n       return sequential_multiway_merge\n         </* stable = */ false, /* sentinels = */ true>(\n           seqs_begin, seqs_end,\n-          target, comp, length);\n+          target, *(seqs_begin->second), comp, length);\n }\n \n // public interface\n@@ -1911,14 +1929,15 @@ stable_multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n           seqs_begin, seqs_end,\n           target, comp,\n           multiway_merge_sampling_splitting\n-            </* stable = */ true, RandomAccessIteratorPairIterator,\n-            Comparator, _DifferenceTp>,\n+            </* stable = */ true,\n+              typename std::iterator_traits<RandomAccessIteratorPairIterator>\n+                ::value_type*, Comparator, _DifferenceTp>,\n           static_cast<difference_type>(length));\n     else\n       return sequential_multiway_merge\n         </* stable = */ true, /* sentinels = */ true>(\n           seqs_begin, seqs_end,\n-          target, comp, length);\n+          target, *(seqs_begin->second), comp, length);\n }\n \n // public interface\n@@ -1944,7 +1963,7 @@ stable_multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n     // Execute multiway merge *sequentially*.\n     return sequential_multiway_merge\n       </* stable = */ true, /* sentinels = */ true>\n-        (seqs_begin, seqs_end, target, comp, length);\n+        (seqs_begin, seqs_end, target, *(seqs_begin->second), comp, length);\n }\n \n // public interface\n@@ -1981,14 +2000,15 @@ stable_multiway_merge_sentinels(RandomAccessIteratorPairIterator seqs_begin\n           seqs_begin, seqs_end,\n           target, comp, \n           multiway_merge_exact_splitting\n-            </* stable = */ true, RandomAccessIteratorPairIterator,\n-            Comparator, _DifferenceTp>,\n+            </* stable = */ true,\n+              typename std::iterator_traits<RandomAccessIteratorPairIterator>\n+                ::value_type*, Comparator, _DifferenceTp>,\n           static_cast<difference_type>(length));\n     else\n       return sequential_multiway_merge\n         </* stable = */ true, /* sentinels = */ true>(\n           seqs_begin, seqs_end,\n-          target, comp, length);\n+          target, *(seqs_begin->second), comp, length);\n }\n \n }; // namespace __gnu_parallel"}]}