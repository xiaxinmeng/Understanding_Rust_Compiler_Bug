{"sha": "e0f5e7926789f2ddeabb5b0266958532a43cc155", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBmNWU3OTI2Nzg5ZjJkZGVhYmI1YjAyNjY5NTg1MzJhNDNjYzE1NQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-02T00:16:41Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-12-02T00:16:41Z"}, "message": "Daily bump.", "tree": {"sha": "f80a5107f46a95b7bf2b73eb74b77c3404cb7c71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f80a5107f46a95b7bf2b73eb74b77c3404cb7c71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0f5e7926789f2ddeabb5b0266958532a43cc155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f5e7926789f2ddeabb5b0266958532a43cc155", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f5e7926789f2ddeabb5b0266958532a43cc155", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f5e7926789f2ddeabb5b0266958532a43cc155/comments", "author": null, "committer": null, "parents": [{"sha": "6591e422692d80d066bacdcdafea2f864d8259c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6591e422692d80d066bacdcdafea2f864d8259c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6591e422692d80d066bacdcdafea2f864d8259c6"}], "stats": {"total": 401, "additions": 400, "deletions": 1}, "files": [{"sha": "c4968b75fa2ec0e6a102e242cb78b4e723dc5a2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f5e7926789f2ddeabb5b0266958532a43cc155/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f5e7926789f2ddeabb5b0266958532a43cc155/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0f5e7926789f2ddeabb5b0266958532a43cc155", "patch": "@@ -1,3 +1,177 @@\n+2020-12-01  Eugene Rozenfeld  <Eugene.Rozenfeld@microsoft.com>\n+\n+\tPR tree-optimization/96708\n+\t* match.pd: New pattern for comparing X with MAX (X, Y)\n+\tor MIN (X, y).\n+\n+2020-12-01  Jeff Law  <law@redhat.com>\n+\n+\t* config/mcore/t-mcore (MULTILIB_EXCEPTIONS): Define.\n+\n+2020-12-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97595\n+\t* tree.c (component_ref_size): Fail when DECL_SIZE != TYPE_SIZE.\n+\t* tree.h (DECL_SIZE, TYPE_SIZE): Update comment.\n+\n+2020-12-01  JeanHeyd Meneide  <phdofthehouse@gmail.com>\n+\n+\t* doc/cpp.texi: Document new macros.\n+\n+2020-12-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97373\n+\t* builtins.c (compute_objsize): Rename...\n+\t(compute_objsize_r): to this.  Change order and types of arguments.\n+\tUse new argument.  Adjust calls to self.\n+\t(access_ref::get_ref): New member function.\n+\t(pointer_query::pointer_query): New member function.\n+\t(pointer_query::get_ref): Same.\n+\t(pointer_query::put_ref): Same.\n+\t(handle_min_max_size): Change order and types of arguments.\n+\t(maybe_emit_free_warning): Add a test.\n+\t* builtins.h (class pointer_query): New class.\n+\t(compute_objsize): Declare an overload.\n+\t* gimple-ssa-sprintf.c (get_destination_size): Add argument.\n+\t(handle_printf_call): Change argument type.\n+\t* tree-ssa-strlen.c (adjust_last_stmt): Add an argument and use it.\n+\t(maybe_warn_overflow): Same.\n+\t(handle_builtin_strcpy): Same.\n+\t(maybe_diag_stxncpy_trunc): Same.\n+\t(handle_builtin_memcpy): Change argument type.  Adjust calls.\n+\t(handle_builtin_strcat): Same.\n+\t(handle_builtin_memset): Same.\n+\t(handle_store): Same.\n+\t(strlen_check_and_optimize_call): Same.\n+\t(check_and_optimize_stmt): Same.\n+\t(strlen_dom_walker): Add new data members.\n+\t(strlen_dom_walker::before_dom_children): Use new member.\n+\t(printf_strlen_execute): Dump cache performance counters.  Remove\n+\tobjsize pass cleanup.\n+\t* tree-ssa-strlen.h (maybe_diag_stxncpy_trunc): Add argument.\n+\t(handle_printf_call): Change argument type.\n+\n+2020-12-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* function.c (gen_call_used_regs_seq): In a function subject to the\n+\tleaf register optimization, skip registers that are not present.\n+\t* config/sparc/sparc.c (TARGET_ZERO_CALL_USED_REGS): Define to...\n+\t(sparc_zero_call_used_regs): ...this.  New function.\n+\n+2020-12-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin.h: Remove unused 'X' specs in the link spec\n+\trather than driver self-specs.\n+\n+2020-12-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* params.opt (lazy-modules): New.\n+\t* timevar.def (TV_MODULE_IMPORT, TV_MODULE_EXPORT)\n+\t(TV_MODULE_MAPPER): New.\n+\n+2020-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/97459\n+\t* optabs.c (expand_doubleword_mod): Punt early for even op1.\n+\t(expand_binop): Don't require lshr_optab double-word handler.\n+\n+2020-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/97954\n+\t* loop-invariant.c (find_invariant_insn): Punt on JUMP_P insns.\n+\n+2020-12-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* configure.ac (check leb128 support): Check that assemblers both\n+\taccept the LEB128 directives and also give the expected output.\n+\tAdd a test for uleb128 with the MSB set for a 64 bit value.\n+\t* configure: Regenerated.\n+\n+2020-12-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* configure: Regnerated.\n+\n+2020-12-01  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* optabs-tree.c (vec_cmp_icode_p): New function.\n+\t(vec_cmp_eq_icode_p): New function.\n+\t(expand_vec_cmp_expr_p): Use vec_cmp_icode_p and\n+\tvec_cmp_eq_icode_p.\n+\t(vcond_icode_p): Use get_rtx_code_1, just to be uniform with\n+\tvec_cmp_icode_p.\n+\t* optabs.c (unsigned_optab_p): New function.\n+\t(insn_predicate_matches_p): New function.\n+\t(can_vec_cmp_compare_p): New function.\n+\t(can_vcond_compare_p): Use unsigned_optab_p and\n+\tinsn_predicate_matches_p.\n+\t(get_rtx_code): Use get_rtx_code_1.\n+\t(get_rtx_code_1): Version of get_rtx_code that returns UNKNOWN\n+\tinstead of asserting.\n+\t* optabs.h (can_vec_cmp_compare_p): New function.\n+\t(get_rtx_code_1): New function.\n+\n+2020-12-01  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/14799\n+\tPR ipa/88702\n+\t* Makefile.in: Add gimple-if-to-switch.o.\n+\t* dbgcnt.def (DEBUG_COUNTER): Add new debug counter.\n+\t* passes.def: Include new pass_if_to_switch pass.\n+\t* timevar.def (TV_TREE_IF_TO_SWITCH): New timevar.\n+\t* tree-pass.h (make_pass_if_to_switch): New.\n+\t* tree-ssa-reassoc.c (struct operand_entry): Move to the header.\n+\t(dump_range_entry): Move to header file.\n+\t(debug_range_entry): Likewise.\n+\t(no_side_effect_bb): Make it global.\n+\t* tree-switch-conversion.h (simple_cluster::simple_cluster):\n+\tAdd inline for couple of functions in order to prevent error\n+\tabout multiple defined symbols.\n+\t* gimple-if-to-switch.cc: New file.\n+\t* tree-ssa-reassoc.h: New file.\n+\n+2020-12-01  Marius Hillenbrand  <mhillen@linux.ibm.com>\n+\n+\t* configure.ac: Add configure option\n+\t--enable-s390-excess-float-precision and check to derive default\n+\tfrom glibc.\n+\t* config/s390/s390.c: Guard s390_excess_precision with an ifdef\n+\tfor ENABLE_S390_EXCESS_FLOAT_PRECISION.\n+\t* doc/install.texi: Document --enable-s390-excess-float-precision.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\n+2020-12-01  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/98057\n+\t* symtab.c (symtab_node::set_section_for_node): Drop\n+\timplicit_section if x_section is NULL.\n+\n+2020-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98063\n+\t* config/i386/i386-expand.c (ix86_expand_call): Handle non-plt\n+\tCM_LARGE_PIC calls.\n+\n+2020-12-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/98070\n+\t* builtins.c (builtin_fnspec): realloc is \".Cw \".\n+\n+2020-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* dwarf2out.c (gen_compile_unit_die): Treat GNU C++20\n+\tlike C++14 for -gdwarf-5.\n+\n+2020-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/97989\n+\t* gcc.c (cpp_unique_options): Add -dD if %:debug-level-gt(2)\n+\trather than g3|ggdb3|gstabs3|gxcoff3|gvms3.\n+\n+2020-12-01  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config.gcc (riscv*-*-*): Drop some commited accidentally code.\n+\n 2020-11-30  Jeff Law  <law@redhat.com>\n \n \t* symtab.c (set_section_for_node): Add function comment."}, {"sha": "ddafb1c0f90bdf9ff789d8d895ad484c1682376c", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f5e7926789f2ddeabb5b0266958532a43cc155/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f5e7926789f2ddeabb5b0266958532a43cc155/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e0f5e7926789f2ddeabb5b0266958532a43cc155", "patch": "@@ -1 +1 @@\n-20201201\n+20201202"}, {"sha": "0421c98cb858dc97d5889fa8798bdd4d3e1e3c35", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f5e7926789f2ddeabb5b0266958532a43cc155/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f5e7926789f2ddeabb5b0266958532a43cc155/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e0f5e7926789f2ddeabb5b0266958532a43cc155", "patch": "@@ -1,3 +1,32 @@\n+2020-12-01  JeanHeyd Meneide  <phdofthehouse@gmail.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Add predefined\n+\t{__GNUC_EXECUTION_CHARSET_NAME} and\n+\t_WIDE_EXECUTION_CHARSET_NAME} macros.\n+\n+2020-12-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-common.c (module, import, export): New internal tokens (with\n+\ttrailing space).\n+\t* c-common.h (RID__MODULE, RID__IMPORT & RID__EXPORT): Enumerate\n+\tthem.\n+\t(D_CXX_MODULES, D_CXX_MODULES_FLAGS): Enable them.\n+\t* c-cppbuiltin.c (c_cpp_builtins): Feature macro.\n+\n+2020-12-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-opts.c (c_common_init_options): Ask for module dependencies.\n+\t(c_common_handle_option): Handle -Mmodules -Mno-modules.\n+\t* c-pch.c (c_common_valid_pch): ... does not play with C++\n+\tmodules.\n+\t* c.opt (Mmodules, Mno-modules): New preprocessor dependency\n+\toptions.\n+\t(fmodules-ts, fmodule-header, fmodule-implicit-inline)\n+\t(fmodule-only, fmodule-mapper, fmodule-lazy)\n+\t(fmodule-version-ignore, Winvalid-imported-macros)\n+\t(flang-info-include-translate, flang-info-include-translate-not):\n+\tNew options\n+\n 2020-11-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (dump_nested_type) <RECORD_TYPE>: Remove obsolete code."}, {"sha": "9e5c0015d1c8cd6ac63905d8fba4581c7c64382c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f5e7926789f2ddeabb5b0266958532a43cc155/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f5e7926789f2ddeabb5b0266958532a43cc155/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e0f5e7926789f2ddeabb5b0266958532a43cc155", "patch": "@@ -1,3 +1,28 @@\n+2020-12-01  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR c++/98054\n+\t* cxx-pretty-print.c (pp_cxx_trait_expression):\n+\tAdd support for __is_nothrow_{assignable,constructible}.\n+\n+2020-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98072\n+\t* parser.c (cp_parser_omp_depobj): Suppress location wrappers when\n+\tparsing depend clause.\n+\n+2020-12-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* lex.c (init_reswords): Maybe enable module keywords.\n+\n+2020-12-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* lang-specs.h: Add module-related options.\n+\n+2020-12-01  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* parser.c (cp_parser_declaration): Add a not about where\n+\tattributes may be placed.\n+\n 2020-11-27  Martin Sebor  <msebor@redhat.com>\n \n \t* error.c (add_quotes): Revert previous change and use pragma to"}, {"sha": "5895c70e3fd6798b92413f93f05fb2b90a180e09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f5e7926789f2ddeabb5b0266958532a43cc155/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f5e7926789f2ddeabb5b0266958532a43cc155/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0f5e7926789f2ddeabb5b0266958532a43cc155", "patch": "@@ -1,3 +1,114 @@\n+2020-12-01  Eugene Rozenfeld  <Eugene.Rozenfeld@microsoft.com>\n+\n+\t* gcc.dg/pr96708-negative.c: New test.\n+\t* gcc.dg/pr96708-positive.c: New test.\n+\n+2020-12-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97595\n+\t* g++.dg/warn/Warray-bounds-14.C: New test.\n+\t* g++.dg/warn/Wstringop-overflow-6.C: New test.\n+\n+2020-12-01  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/pr96480.c: Disable jump table optimization\n+\n+2020-12-01  JeanHeyd Meneide  <phdofthehouse@gmail.com>\n+\n+\t* c-c++-common/cpp/wide-narrow-predef-macros.c: New test.\n+\n+2020-12-01  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/pr46309-2.c: Add -fno-bit-tests and -fno-jump-tables\n+\tto avoid compromising the test.\n+\n+2020-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/98072\n+\t* c-c++-common/gomp/depobj-2.c: New test.\n+\n+2020-12-01  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/97373\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-25.c: New test.\n+\n+2020-12-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/tree-ssa/if-to-switch-1.C: Do not allow newlines\n+\tin .* pattern.\n+\t* gcc.dg/tree-ssa/if-to-switch-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/if-to-switch-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/if-to-switch-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/if-to-switch-5.c: Likewise.\n+\n+2020-12-01  Martin Liska  <mliska@suse.cz>\n+\n+\tPR testsuite/98085\n+\t* g++.dg/tree-ssa/if-to-switch-1.C: Do not expect precise number\n+\tof BBs.\n+\t* gcc.dg/tree-ssa/if-to-switch-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/if-to-switch-2.c: Likewise. Find better name\n+\tfor the function.\n+\t* gcc.dg/tree-ssa/if-to-switch-3.c: Likewise. Find better name\n+\tfor the function.\n+\t* gcc.dg/tree-ssa/if-to-switch-5.c: Likewise.\n+\n+2020-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/97954\n+\t* gcc.dg/pr97954.c: New test.\n+\n+2020-12-01  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* lib/hwasan-dg.exp (check_effective_target_hwaddress_exec): Fix\n+\tcheck for correct kernel version.\n+\n+2020-12-01  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/14799\n+\tPR ipa/88702\n+\t* gcc.dg/tree-ssa/pr96480.c: Disable if-to-switch conversion.\n+\t* gcc.dg/tree-ssa/reassoc-32.c: Likewise.\n+\t* g++.dg/tree-ssa/if-to-switch-1.C: New test.\n+\t* gcc.dg/tree-ssa/if-to-switch-1.c: New test.\n+\t* gcc.dg/tree-ssa/if-to-switch-2.c: New test.\n+\t* gcc.dg/tree-ssa/if-to-switch-3.c: New test.\n+\t* gcc.dg/tree-ssa/if-to-switch-4.c: New test.\n+\t* gcc.dg/tree-ssa/if-to-switch-5.c: New test.\n+\t* gcc.dg/tree-ssa/if-to-switch-6.c: New test.\n+\t* gcc.dg/tree-ssa/if-to-switch-7.c: New test.\n+\t* gcc.dg/tree-ssa/if-to-switch-8.c: New test.\n+\n+2020-12-01  Marius Hillenbrand  <mhillen@linux.ibm.com>\n+\n+\t* gcc.target/s390/float_t-1.c: New test.\n+\t* gcc.target/s390/float_t-2.c: New test.\n+\n+2020-12-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/torture/pr93347.C: Reduce and remove LIT keywords.\n+\n+2020-12-01  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/98057\n+\t* g++.dg/ipa/pr98057.C: New test.\n+\n+2020-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98063\n+\t* gcc.target/i386/pr98063.c: New test.\n+\n+2020-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/debug/dwarf2/lang-cpp17.C: New test.\n+\t* g++.dg/debug/dwarf2/lang-cpp20.C: New test.\n+\n+2020-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/97989\n+\t* gcc.dg/cpp/pr97989-1.c: New test.\n+\t* gcc.dg/cpp/pr97989-2.c: New test.\n+\n 2020-11-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/plugin/analyzer_gil_plugin.c: New test."}, {"sha": "83cbde30b3cfb48aaefcf26c8b3014f09daae16b", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f5e7926789f2ddeabb5b0266958532a43cc155/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f5e7926789f2ddeabb5b0266958532a43cc155/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=e0f5e7926789f2ddeabb5b0266958532a43cc155", "patch": "@@ -1,3 +1,12 @@\n+2020-12-01  JeanHeyd Meneide  <phdofthehouse@gmail.com>\n+\n+\t* charset.c (init_iconv_desc): Initialize \"to\" and \"from\" fields.\n+\t* directives.c (cpp_get_narrow_charset_name): New function.\n+\t(cpp_get_wide_charset_name): Likewise.\n+\t* include/cpplib.h (cpp_get_narrow_charset_name): Prototype.\n+\t(cpp_get_wide_charset_name): Likewise.\n+\t* internal.h (cset_converter): Add \"to\" and \"from\" fields.\n+\n 2020-11-27  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR preprocessor/97602"}, {"sha": "d78021b2f89fada25a5dadce34374df190c2ec23", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f5e7926789f2ddeabb5b0266958532a43cc155/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f5e7926789f2ddeabb5b0266958532a43cc155/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e0f5e7926789f2ddeabb5b0266958532a43cc155", "patch": "@@ -1,3 +1,54 @@\n+2020-12-01  Thomas Rodgers  <trodgers@redhat.com>\n+\n+\t* include/bits/atomic_base.h: Replace usage of\n+\t_GLIBCXX_HAVE_ATOMIC_WAIT with __cpp_lib_atomic_wait.\n+\t* include/bits/atomic_timed_wait.h: Likewise.\n+\t* include/bits/atomic_wait.h: Define __cpp_lib_atomic_wait\n+\tfeature test macro.\n+\t* include/bits/semaphore_base.h: Replace usage of\n+\t_GLIBCXX_HAVE_ATOMIC_WAIT with __cpp_lib_atomic_wait.\n+\t* include/std/atomic: Likewise.\n+\t* include/std/latch: Likewise.\n+\t* include/std/semaphore: Likewise.\n+\t* include/std/version: Define __cpp_lib_atomic wait\n+\tfeature test macro and replace usage of\n+\t_GLIBCXX_HAVE_ATOMIC_WAIT.\n+\t* testsuite/29_atomics/atomic/wait_notify/1.cc: New test.\n+\t* testsuite/29_atomics/atomic/wait_notify/2.cc: Likewise.\n+\n+2020-12-01  Michael Weghorn  <m.weghorn@posteo.de>\n+\n+\t* python/libstdcxx/v6/printers.py (StdBitIteratorPrinter)\n+\t(StdBitReferencePrinter): Add pretty-printers for\n+\t_Bit_reference, _Bit_iterator and _Bit_const_iterator.\n+\t* testsuite/libstdc++-prettyprinters/simple.cc: Test\n+\tstd::_Bit_reference, std::_Bit_iterator and\n+\tstd::_Bit_const_iterator.\n+\t* testsuite/libstdc++-prettyprinters/simple11.cc: Likewise.\n+\n+2020-12-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/c++config (_GLIBCXX_HAS_BUILTIN): Define macro to\n+\twork around different implementations of __has_builtin.\n+\t(_GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP)\n+\t(_GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE)\n+\t(_GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED)\n+\t(_GLIBCXX_HAVE_BUILTIN_IS_SAME, _GLIBCXX_HAVE_BUILTIN_LAUNDER):\n+\tDefine using _GLIBCXX_HAS_BUILTIN.\n+\n+2020-12-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/27_io/basic_istream/get/char/lwg3464.cc: Add\n+\tdg-timeout-factor directive.\n+\t* testsuite/27_io/basic_istream/get/wchar_t/lwg3464.cc:\n+\tLikewise.\n+\n+2020-12-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/98003\n+\t* testsuite/27_io/basic_syncbuf/sync_ops/1.cc: Add options for\n+\tlibatomic.\n+\n 2020-11-30  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/doxygen/user.cfg.in (INPUT): Add <latch> and <semaphore>."}]}