{"sha": "134dc576a298b36dbbe5048b0acdf11e53838464", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM0ZGM1NzZhMjk4YjM2ZGJiZTUwNDhiMGFjZGYxMWU1MzgzODQ2NA==", "commit": {"author": {"name": "Michael Zolotukhin", "email": "michael.v.zolotukhin@intel.com", "date": "2011-12-02T19:49:10Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-12-02T19:49:10Z"}, "message": "Increase array sizes in vect-tests to enable 256-bit vectorization\n\n2011-12-02  Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n\n\t* gcc.dg/vect/slp-13.c: Increase array size, add initialization.\n\t* gcc.dg/vect/slp-24.c: Ditto.\n\t* gcc.dg/vect/slp-3.c: Likewise and fix scans.\n\t* gcc.dg/vect/slp-34.c: Ditto.\n\t* gcc.dg/vect/slp-4.c: Ditto.\n\t* gcc.dg/vect/slp-cond-2.c: Ditto.\n\t* gcc.dg/vect/slp-multitypes-11.c: Ditto.\n\t* gcc.dg/vect/vect-1.c: Ditto.\n\t* gcc.dg/vect/vect-10.c: Ditto.\n\t* gcc.dg/vect/vect-105.c: Ditto.\n\t* gcc.dg/vect/vect-112.c: Ditto.\n\t* gcc.dg/vect/vect-15.c: Ditto.\n\t* gcc.dg/vect/vect-2.c: Ditto.\n\t* gcc.dg/vect/vect-31.c: Ditto.\n\t* gcc.dg/vect/vect-32.c: Ditto.\n\t* gcc.dg/vect/vect-33.c: Ditto.\n\t* gcc.dg/vect/vect-34.c: Ditto.\n\t* gcc.dg/vect/vect-35.c: Ditto.\n\t* gcc.dg/vect/vect-36.c: Ditto.\n\t* gcc.dg/vect/vect-6.c: Ditto.\n\t* gcc.dg/vect/vect-73.c: Ditto.\n\t* gcc.dg/vect/vect-74.c: Ditto.\n\t* gcc.dg/vect/vect-75.c: Ditto.\n\t* gcc.dg/vect/vect-76.c: Ditto.\n\t* gcc.dg/vect/vect-80.c: Ditto.\n\t* gcc.dg/vect/vect-85.c: Ditto.\n\t* gcc.dg/vect/vect-89.c: Ditto.\n\t* gcc.dg/vect/vect-97.c: Ditto.\n\t* gcc.dg/vect/vect-98.c: Ditto.\n\t* gcc.dg/vect/vect-all.c: Ditto.\n\t* gcc.dg/vect/vect-double-reduc-6.c: Ditto.\n\t* gcc.dg/vect/vect-iv-8.c: Ditto.\n\t* gcc.dg/vect/vect-iv-8a.c: Ditto.\n\t* gcc.dg/vect/vect-outer-1.c: Ditto.\n\t* gcc.dg/vect/vect-outer-1a.c: Ditto.\n\t* gcc.dg/vect/vect-outer-1b.c: Ditto.\n\t* gcc.dg/vect/vect-outer-2.c: Ditto.\n\t* gcc.dg/vect/vect-outer-2a.c: Ditto.\n\t* gcc.dg/vect/vect-outer-2c.c: Ditto.\n\t* gcc.dg/vect/vect-outer-3.c: Ditto.\n\t* gcc.dg/vect/vect-outer-3a.c: Ditto.\n\t* gcc.dg/vect/vect-outer-4a.c: Ditto.\n\t* gcc.dg/vect/vect-outer-4b.c: Ditto.\n\t* gcc.dg/vect/vect-outer-4c.c: Ditto.\n\t* gcc.dg/vect/vect-outer-4d.c: Ditto.\n\t* gcc.dg/vect/vect-outer-4m.c: Ditto.\n\t* gcc.dg/vect/vect-outer-fir-lb.c: Ditto.\n\t* gcc.dg/vect/vect-outer-fir.c: Ditto.\n\t* gcc.dg/vect/vect-over-widen-1.c: Ditto.\n\t* gcc.dg/vect/vect-over-widen-2.c: Ditto.\n\t* gcc.dg/vect/vect-over-widen-3.c: Ditto.\n\t* gcc.dg/vect/vect-over-widen-4.c: Ditto.\n\t* gcc.dg/vect/vect-reduc-1char.c: Ditto.\n\t* gcc.dg/vect/vect-reduc-2char.c: Ditto.\n\t* gcc.dg/vect/vect-reduc-pattern-1b.c: Ditto.\n\t* gcc.dg/vect/vect-reduc-pattern-1c.c: Ditto.\n\t* gcc.dg/vect/vect-reduc-pattern-2b.c: Ditto.\n\t* gcc.dg/vect/vect-shift-2.c: Ditto.\n\t* gcc.dg/vect/vect-strided-a-u8-i8-gap2.c: Ditto.\n\t* gcc.dg/vect/vect-strided-a-u8-i8-gap7.c: Ditto.\n\t* gcc.dg/vect/vect-strided-u8-i8-gap2.c: Ditto.\n\t* gcc.dg/vect/vect-strided-u8-i8-gap4.c: Ditto.\n\t* gcc.dg/vect/vect-strided-u8-i8-gap7.c: Ditto.\n\nFrom-SVN: r181939", "tree": {"sha": "74ec6b21853a8cbc730676d0cc3b44a4b8e93a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74ec6b21853a8cbc730676d0cc3b44a4b8e93a52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/134dc576a298b36dbbe5048b0acdf11e53838464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134dc576a298b36dbbe5048b0acdf11e53838464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/134dc576a298b36dbbe5048b0acdf11e53838464", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134dc576a298b36dbbe5048b0acdf11e53838464/comments", "author": null, "committer": null, "parents": [{"sha": "506cf9aaead4f5519f5549a918d285365b44e989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/506cf9aaead4f5519f5549a918d285365b44e989", "html_url": "https://github.com/Rust-GCC/gccrs/commit/506cf9aaead4f5519f5549a918d285365b44e989"}], "stats": {"total": 970, "additions": 731, "deletions": 239}, "files": [{"sha": "dcf2343d6378952f102d11d4aa8e5dbf9ad22f14", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -1,3 +1,69 @@\n+2011-12-02  Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* gcc.dg/vect/slp-13.c: Increase array size, add initialization.\n+\t* gcc.dg/vect/slp-24.c: Ditto.\n+\t* gcc.dg/vect/slp-3.c: Likewise and fix scans.\n+\t* gcc.dg/vect/slp-34.c: Ditto.\n+\t* gcc.dg/vect/slp-4.c: Ditto.\n+\t* gcc.dg/vect/slp-cond-2.c: Ditto.\n+\t* gcc.dg/vect/slp-multitypes-11.c: Ditto.\n+\t* gcc.dg/vect/vect-1.c: Ditto.\n+\t* gcc.dg/vect/vect-10.c: Ditto.\n+\t* gcc.dg/vect/vect-105.c: Ditto.\n+\t* gcc.dg/vect/vect-112.c: Ditto.\n+\t* gcc.dg/vect/vect-15.c: Ditto.\n+\t* gcc.dg/vect/vect-2.c: Ditto.\n+\t* gcc.dg/vect/vect-31.c: Ditto.\n+\t* gcc.dg/vect/vect-32.c: Ditto.\n+\t* gcc.dg/vect/vect-33.c: Ditto.\n+\t* gcc.dg/vect/vect-34.c: Ditto.\n+\t* gcc.dg/vect/vect-35.c: Ditto.\n+\t* gcc.dg/vect/vect-36.c: Ditto.\n+\t* gcc.dg/vect/vect-6.c: Ditto.\n+\t* gcc.dg/vect/vect-73.c: Ditto.\n+\t* gcc.dg/vect/vect-74.c: Ditto.\n+\t* gcc.dg/vect/vect-75.c: Ditto.\n+\t* gcc.dg/vect/vect-76.c: Ditto.\n+\t* gcc.dg/vect/vect-80.c: Ditto.\n+\t* gcc.dg/vect/vect-85.c: Ditto.\n+\t* gcc.dg/vect/vect-89.c: Ditto.\n+\t* gcc.dg/vect/vect-97.c: Ditto.\n+\t* gcc.dg/vect/vect-98.c: Ditto.\n+\t* gcc.dg/vect/vect-all.c: Ditto.\n+\t* gcc.dg/vect/vect-double-reduc-6.c: Ditto.\n+\t* gcc.dg/vect/vect-iv-8.c: Ditto.\n+\t* gcc.dg/vect/vect-iv-8a.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-1.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-1a.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-1b.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-2.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-2a.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-2c.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-3.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-3a.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4a.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4b.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4c.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4d.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-4m.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-fir-lb.c: Ditto.\n+\t* gcc.dg/vect/vect-outer-fir.c: Ditto.\n+\t* gcc.dg/vect/vect-over-widen-1.c: Ditto.\n+\t* gcc.dg/vect/vect-over-widen-2.c: Ditto.\n+\t* gcc.dg/vect/vect-over-widen-3.c: Ditto.\n+\t* gcc.dg/vect/vect-over-widen-4.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-1char.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-2char.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-pattern-1b.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-pattern-1c.c: Ditto.\n+\t* gcc.dg/vect/vect-reduc-pattern-2b.c: Ditto.\n+\t* gcc.dg/vect/vect-shift-2.c: Ditto.\n+\t* gcc.dg/vect/vect-strided-a-u8-i8-gap2.c: Ditto.\n+\t* gcc.dg/vect/vect-strided-a-u8-i8-gap7.c: Ditto.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap2.c: Ditto.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap4.c: Ditto.\n+\t* gcc.dg/vect/vect-strided-u8-i8-gap7.c: Ditto.\n+\n 2011-12-02  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* gcc.c-torture/execute/vector-subscript-1.c (main): Fix"}, {"sha": "e1c4e415f67217fee6573b2a2094ed2f67d76211", "filename": "gcc/testsuite/gcc.dg/vect/slp-13.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-13.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,17 +3,25 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 8 \n+#define N 64\n+volatile int y = 0;\n \n int\n main1 ()\n {\n   int i;\n   unsigned short out[N*8];\n-  unsigned short in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n-  unsigned int in2[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n+  unsigned short in[N*8];\n+  unsigned int in2[N*8];\n   unsigned int out2[N*8];\n \n+  for (i = 0; i < N*8; i++)\n+    {\n+      in[i] = in2[i] = i;\n+      if (y) /* Avoid vectorization.  */\n+\tabort ();\n+    }\n+\n   /* Induction is not SLPable yet.  */\n   for (i = 0; i < N; i++)\n     {"}, {"sha": "690422231bd428902c1ceac4997096bf687349f0", "filename": "gcc/testsuite/gcc.dg/vect/slp-24.c", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-24.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,8 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n-#define DIFF 242\n+#define N 64\n \n typedef struct {\n    unsigned char a;\n@@ -13,8 +12,11 @@ typedef struct {\n    unsigned char d;\n } s;\n \n-unsigned char ub[N*2] = {1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-unsigned char uc[N] = {1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+unsigned char ub[N*2];\n+unsigned char uc[N];\n+\n+volatile int y = 0;\n+unsigned char check_diff = 2;\n \n void\n main1 (unsigned char x, unsigned char max_result, unsigned char min_result, s *arr)\n@@ -28,7 +30,7 @@ main1 (unsigned char x, unsigned char max_result, unsigned char min_result, s *a\n   s out[N];\n \n   for (i = 0; i < N; i++) {\n-    udiff += (unsigned char)(ub[i] - uc[i]);\n+    udiff += (unsigned char) (ub[i] - uc[i]);\n \n     ua1[2*i+1] = ub[2*i+1];\n     ua1[2*i] = ub[2*i];\n@@ -52,7 +54,7 @@ main1 (unsigned char x, unsigned char max_result, unsigned char min_result, s *a\n   }\n \n   /* check results:  */\n-  if (udiff != DIFF)\n+  if (udiff != check_diff)\n     abort ();\n }\n \n@@ -61,6 +63,21 @@ int main (void)\n   int i; \n   s arr[N];\n \n+  check_diff = 2;\n+  ub[0] = uc[0] = 1;\n+  for (i = 1; i < N; i++) {\n+    ub[i] = (i%5 == 0)?i*3:i;\n+    uc[i] = i;\n+    check_diff += (unsigned char) (ub[i] - uc[i]);\n+    if (y) /* Avoid vectorization.  */\n+      abort ();\n+  }\n+  for (; i < 2*N; i++) {\n+    ub[i] = 0;\n+    if (y) /* Avoid vectorization.  */\n+      abort ();\n+  }\n+\n   for (i = 0; i < N; i++)\n     {\n       arr[i].a = i + 9;"}, {"sha": "6c6a655b16ff8364a8904dc8d9c56aeea980d32a", "filename": "gcc/testsuite/gcc.dg/vect/slp-3.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,16 +3,24 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 12\n+#define N 96\n \n-unsigned short in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};\n+unsigned short in[N*8];\n+volatile int y = 0;\n \n int\n main1 ()\n {\n   int i;\n   unsigned short out[N*8];\n \n+  for (i = 0; i < N*8; i++)\n+    {\n+      in[i] = i&63;\n+      if (y) /* Avoid vectorization.  */\n+\tabort ();\n+    }\n+\n   for (i = 0; i < N; i++)\n     {\n       out[i*8] = in[i*8];\n@@ -141,7 +149,7 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n   "}, {"sha": "39b28e5464db30342a17213de044a784400cb2d0", "filename": "gcc/testsuite/gcc.dg/vect/slp-34.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-34.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,10 +3,11 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 8 \n+#define N 64\n \n-unsigned short in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n-unsigned short in2[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n+unsigned short in[N*8];\n+unsigned short in2[N*8];\n+volatile int y = 0;\n \n int\n main1 ()\n@@ -15,6 +16,13 @@ main1 ()\n   unsigned short out[N*8];\n   unsigned short out2[N*8];\n \n+  for (i = 0; i < N*8; i++)\n+    {\n+      in[i] = in2[i] = i;\n+      if (y) /* Avoid vectorization.  */\n+\tabort ();\n+    }\n+\n   /* SLP with unrolling by 8.  */\n   for (i = 0; i < N; i++)\n     {"}, {"sha": "3622f9d249a4c55f5c6ec090f9c1d4a137691171", "filename": "gcc/testsuite/gcc.dg/vect/slp-4.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-4.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,16 +3,24 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16 \n+#define N 128\n+volatile int y = 0;\n \n int\n main1 ()\n {\n   int i;\n   unsigned short out[N*8];\n-  unsigned short in[N*8] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63};\n+  unsigned short in[N*8];\n   unsigned int ia[N*2];\n \n+  for (i = 0; i < N*8; i++)\n+    {\n+      in[i] = i;\n+      if (y) /* Avoid vectorization.  */\n+\tabort ();\n+    }\n+\n   for (i = 0; i < N; i++)\n     {\n       out[i*8] = in[i*8];"}, {"sha": "8217b764af0f11f753ffd8313ecd28e3c8da9841", "filename": "gcc/testsuite/gcc.dg/vect/slp-cond-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-cond-2.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -1,7 +1,7 @@\n /* { dg-require-effective-target vect_cond_mixed } */\n #include \"tree-vect.h\"\n \n-#define N 32\n+#define N 128\n int d[N], e[N], f[N];\n unsigned char k[N];\n float a[N], b[N];"}, {"sha": "8ead45ee194647f7af6eddd253179affa4a760bd", "filename": "gcc/testsuite/gcc.dg/vect/slp-multitypes-11.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-multitypes-11.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 18 \n+#define N 144\n \n struct s \n {\n@@ -12,14 +12,22 @@ struct s\n   int c;\n };\n \n-char in[N*3] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53};\n+char in[N*3];\n+volatile int y = 0;\n \n __attribute__ ((noinline)) int\n main1 ()\n {\n   int i;\n   struct s out[N];\n \n+  for (i = 0; i < N; i++)\n+    {\n+      in[i] = i&127;\n+      if (y) /* Avoid vectorization.  */\n+\tabort ();\n+    }\n+\n   for (i = 0; i < N; i++)\n     {\n       out[i].a = (int) in[i*3] + 1;"}, {"sha": "3fe51228531835d8e8a7b6a441b421f4d83d6670", "filename": "gcc/testsuite/gcc.dg/vect/vect-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-1.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -2,7 +2,7 @@\n /* { dg-require-effective-target vect_int } */\n /* { dg-require-effective-target vect_float } */\n \n-#define N 16\n+#define N 128\n \n void fbar (float *);\n void ibar (int *);"}, {"sha": "393416eb38a3feee9a52c8d964135bb34fef38d6", "filename": "gcc/testsuite/gcc.dg/vect/vect-10.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-10.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -1,16 +1,28 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_int } */\n+#include <stdlib.h>\n \n-#define N 16\n+#define N 128\n \n short a[N];\n short d[N];\n \n+volatile int y = 0;\n+\n int foo ()\n {\n   int i;\n-  short b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-  short c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  short b[N];\n+  short c[N];\n+  for (i = 0; i < N/2; i++)\n+    {\n+      b[i] = i*3;\n+      c[i] = i;\n+\n+      /* Avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n \n   /* Strided access pattern.  */\n   for (i = 0; i < N/2; i++)"}, {"sha": "f2e68aeac41ad1d6c72980d6b7905e6c88d5532b", "filename": "gcc/testsuite/gcc.dg/vect/vect-105.c", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -4,25 +4,59 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 4\n+#define N 16\n \n struct extraction\n {\n   int a[N][N];\n   int b[N][N];\n };\n \n-static int a[N][N] = {{1,2,3,11},{4,5,6,12},{7,8,9,13},{34,45,67,83}};\n-static int b[N][N] = {{17,28,15,23},{0,2,3,24},{4,31,82,25},{29,31,432,256}};\n-static int c[N][N] = {{1,2,3,11},{4,9,13,34},{45,67,83,13},{34,45,67,83}};\n+static int a[N][N];\n+static int b[N][N];\n+static int c[N][N];\n \n volatile int y;\n \n __attribute__ ((noinline))\n int main1 (int x) {\n-  int i,j;\n+  int i,j, off;\n   struct extraction *p;\n   p = (struct extraction *) malloc (sizeof (struct extraction));\n+  for (i = 0; i < N; i++)\n+   {\n+    for (j = 0; j < N; j++)\n+     {\n+       a[i][j] = (i*7 + j*17)%53;\n+       b[i][j] = (i*11+ j*13)%41;\n+       if (y)\n+\t abort (); /* to avoid vectorization.  */\n+     }\n+   }\n+  for (i = 0; i < N; i++)\n+   {\n+    for (j = 0; j < N; j++)\n+     {\n+       c[i][j] = a[i][j];\n+       if (y)\n+\t abort (); /* to avoid vectorization.  */\n+     }\n+   }\n+  for (i = 1; i < N; i++)\n+  {\n+    for (j = 0; j < N; j++)\n+    {\n+      off = x + i + j + N+1;\n+      if (x + i + j > N*N-1)\n+\tbreak;\n+      if (off > N*N-1)\n+\t*(&c[0][0]+x+i+j) = *(&b[0][0] + off - N*N);\n+      else\n+\t*(&c[0][0]+x+i+j) = *(&a[0][0] + off);\n+       if (y)\n+\t abort (); /* to avoid vectorization.  */\n+    }\n+  }\n \n   for (i = 0; i < N; i++)\n    {\n@@ -33,7 +67,7 @@ int main1 (int x) {\n        /* Because Y is volatile, the compiler cannot move this check out\n \t  of the loop.  */\n        if (y)\n-\t abort (); /* to avoid vectorization  */\n+\t abort (); /* to avoid vectorization.  */\n      }\n    }\n \n@@ -42,7 +76,7 @@ int main1 (int x) {\n   {\n     for (j = 0; j < N; j++)\n     {\n-       *((int *)p + x + i + j) = *((int *)p + x + i + j + 5);\n+       *((int *)p + x + i + j) = *((int *)p + x + i + j + N+1);\n     }\n   }\n \n@@ -52,7 +86,7 @@ int main1 (int x) {\n     for (j = 0; j < N; j++)\n      {\n        if (p->a[i][j] != c[i][j])\n-         abort();\n+         abort ();\n      }\n   }\n   return 0;\n@@ -66,7 +100,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n-/*  { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { target vect_no_align } } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" { target vect_no_align } } } */\n /* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 0 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "a1302c1e93685fa133a729e24c4aefeff765dab8", "filename": "gcc/testsuite/gcc.dg/vect/vect-112.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-112.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-112.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-112.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,16 +3,27 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n \n-char cb[N] = {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17};\n-char cc[N] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\n+char cb[N];\n+char cc[N];\n+\n+volatile int y = 0;\n \n __attribute__ ((noinline)) int\n main1 (void)\n {\n   int i;\n   int diff = 0;\n+  int check_diff = 0;\n+  for (i = 0; i < N; i++) {\n+    cb[i] = i + 2;\n+    cc[i] = i + 1;\n+    check_diff += (cb[i] - cc[i]);\n+    /* Avoid vectorization.  */\n+    if (y)\n+      abort ();\n+  }\n \n   /* Cross-iteration cycle.  */\n   diff = 0;\n@@ -21,8 +32,8 @@ main1 (void)\n   }\n \n   /* Check results.  */\n-  if (diff != 16)\n-    abort();\n+  if (diff != check_diff)\n+    abort ();\n \n   return 0;\n }"}, {"sha": "cbc11c2074576db9634ef46a1e18102ea9b5150b", "filename": "gcc/testsuite/gcc.dg/vect/vect-15.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,14 +3,23 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n+\n+volatile int y = 0;\n \n __attribute__ ((noinline))\n int main1 ()\n {\n   int i;\n   int a[N];\n-  int b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+  int b[N];\n+\n+  for (i = 0; i <N; i++)\n+    {\n+      b[i] = i*3;\n+      if (y)\n+\tabort ();\n+    }\n \n   /* Not vectorizable yet (reverse access and forward access).  */\n   for (i = N; i > 0; i--)"}, {"sha": "e6399ff212f8e62edf8e4211bbc4bd559bfbce9d", "filename": "gcc/testsuite/gcc.dg/vect/vect-2.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-2.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,16 +3,26 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n \n-char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+char cb[N];\n char ca[N];\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) \n int main1 ()\n {  \n   int i;\n \n+  for (i = 0; i < N; i++)\n+    {\n+      cb[i] = i*3;\n+      /* To avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n+\n   for (i = 0; i < N; i++)\n     {\n       ca[i] = cb[i];"}, {"sha": "c6861fab78b6059166f2e71d2c1cff9aa3ba91cf", "filename": "gcc/testsuite/gcc.dg/vect/vect-31.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-31.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 32\n+#define N 256\n \n struct t{\n   int k[N];"}, {"sha": "143ebf52247786e11ab301c7c2462ffed766f00b", "filename": "gcc/testsuite/gcc.dg/vect/vect-32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-32.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n  \n __attribute__ ((noinline))\n int main1 ()"}, {"sha": "261d89af4f23d7699b4b17e24b0cd1df3518e5a0", "filename": "gcc/testsuite/gcc.dg/vect/vect-33.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-33.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -4,7 +4,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n struct test {\n   char ca[N];\n };"}, {"sha": "3f059c6b9d06867f083f5bec13ba4226b0e833ac", "filename": "gcc/testsuite/gcc.dg/vect/vect-34.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-34.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,18 +3,27 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n \n struct {\n   char ca[N];\n } s;\n-char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n- \n+char cb[N];\n+\n+volatile int y = 0;\n+\n __attribute__ ((noinline))\n int main1 ()\n {  \n   int i;\n \n+  for (i = 0; i < N; i++)\n+    {\n+      cb[i] = i*3;\n+      /* To avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n   for (i = 0; i < N; i++)\n     {\n       s.ca[i] = cb[i];"}, {"sha": "130e37647bfc7a79bd61969538f2ce890727ed24", "filename": "gcc/testsuite/gcc.dg/vect/vect-35.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-35.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n  \n __attribute__ ((noinline))\n int main1 ()"}, {"sha": "34f0d5ab8eae193877df072843692bafc2e65b3f", "filename": "gcc/testsuite/gcc.dg/vect/vect-36.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-36.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n  \n __attribute__ ((noinline))\n int main1 ()"}, {"sha": "4dcb1bea0f1ec9d350175c03fc6a4bac0b5e5ab4", "filename": "gcc/testsuite/gcc.dg/vect/vect-6.c", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-6.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,20 +3,41 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n \n-float results1[N] = {192.00,240.00,288.00,336.00,384.00,432.00,480.00,528.00,0.00};\n-float results2[N] = {0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,54.00,120.00,198.00,288.00,390.00,504.00,630.00};\n+float results1[N];\n+float results2[N];\n float a[N] = {0};\n float e[N] = {0};\n-float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+float b[N];\n+float c[N];\n+\n+volatile int y = 0;\n \n __attribute__ ((noinline))\n int main1 ()\n {\n   int i;\n \n+  for (i=0; i<N; i++)\n+    {\n+      b[i] = i*3;\n+      c[i] = i;\n+      results1[i] = 0;\n+      results2[i] = 0;\n+      /* Avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n+  for (i=0; i<N/2; i++)\n+    {\n+      results1[i] = b[i+N/2] * c[i+N/2] - b[i] * c[i];\n+      results2[i+N/2] = b[i] * c[i+N/2] + b[i+N/2] * c[i];\n+      /* Avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n+\n   for (i = 0; i < N/2; i++)\n     { \n       a[i] = b[i+N/2] * c[i+N/2] - b[i] * c[i];"}, {"sha": "19d8d24e0ac24473aad35b3b0e9e9ddf5b650961", "filename": "gcc/testsuite/gcc.dg/vect/vect-73.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-73.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-73.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-73.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,18 +3,27 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n \n int ic[N*2];\n-int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+int ib[N];\n \n #define ia (ic+N)\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline))\n int main1 ()\n {\n   int i, j;\n \n+  for (i = 0; i < N; i++)\n+    {\n+      ib[i] = i*3;\n+      if (y)\n+\tabort ();\n+    }\n+\n   for (i = 0; i < N; i++)\n     {\n        ia[i] = ib[i];\n@@ -24,7 +33,7 @@ int main1 ()\n   for (i = 0; i < N; i++)\n     {\n        if (ia[i] != ib[i])\n-         abort();\n+         abort ();\n     }\n \n   return 0;"}, {"sha": "f8e973ef358a450ca7c6770905faedd4a56b59c4", "filename": "gcc/testsuite/gcc.dg/vect/vect-74.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-74.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n \n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is\n@@ -13,12 +13,28 @@ float a[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n float b[N+4] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 7.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0}; \n float c[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 7.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5};\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (float *__restrict__  pa, float * __restrict__ pb, float * __restrict__ pc)\n {\n   int i;\n   float *q = pb + 4;\n \n+  for (i = 0; i < N; i++)\n+    {\n+      b[i] = i;\n+      c[i] = 0.5 + i;\n+      if (y)\n+\tabort ();\n+    }\n+  for (; i < N+4; i++)\n+    {\n+      b[i] = i;\n+      if (y)\n+\tabort ();\n+    }\n+\n   for (i = 0; i < N; i++)\n     {\n       pa[i] = q[i] * pc[i];\n@@ -27,7 +43,7 @@ main1 (float *__restrict__  pa, float * __restrict__ pb, float * __restrict__ pc\n   for (i = 0; i < N; i++)\n     {\n       if (pa[i] != q[i] * pc[i])\n-\tabort();\n+\tabort ();\n     }\n   \n   return 0;"}, {"sha": "1c70cc2c5186006c48cf560e4be2e0a4513bdbbb", "filename": "gcc/testsuite/gcc.dg/vect/vect-75.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-75.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,21 +3,29 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 8\n+#define N 120\n #define OFF 8\n \n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is\n    more involved than just an ssa_name.  */\n \n-int ib[N+OFF] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10, 14, 22, 26, 34};\n+int ib[N+OFF] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0, 1, 3, 5, 7, 11, 13, 17};\n+\n+volatile int y = 0;\n \n __attribute__ ((noinline))\n int main1 (int *ib)\n {\n   int i;\n   int ia[N];\n \n+  for (i = OFF; i < N+OFF; i++)\n+    {\n+      ib[i] = ib[i%OFF]*(i/OFF);\n+      if (y)\n+\tabort ();\n+    }\n   for (i = 0; i < N; i++)\n     {\n       ia[i] = ib[i+OFF];"}, {"sha": "edb0790e5a4bb996d14ff6133128283b8562a403", "filename": "gcc/testsuite/gcc.dg/vect/vect-76.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,21 +3,30 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 24\n+#define N 124\n #define OFF 4\n \n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is\n    more involved than just an ssa_name.  */\n \n-int ib[N+OFF] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10};\n-int ic[N+OFF] = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10};\n+int ib[N+OFF] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0, 1, 3, 5, 7, 11, 13, 17};\n+int ic[N+OFF] = {0, 1, 3, 5, 7, 11, 13, 17};\n+\n+volatile int y = 0;\n \n __attribute__ ((noinline))\n int main1 (int *pib)\n {\n   int i;\n   int ia[N+OFF];\n+  for (i = OFF; i < N+OFF; i++)\n+    {\n+      ib[i] = ib[i%8]*(i/8);\n+      ic[i] = ic[i%8]*(i/8);\n+      if (y)\n+\tabort ();\n+    }\n \n   for (i = OFF; i < N; i++)\n     {"}, {"sha": "f5cdbb2fd3014e5619c1779a36d20410cedc5443", "filename": "gcc/testsuite/gcc.dg/vect/vect-80.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-80.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,21 +3,36 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n \n float fa[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n-float fb[N+4] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 7.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0};\n-float fc[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 7.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5};\n+float fb[N+4] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+float fc[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n \n /* Check handling of accesses for which the \"initial condition\" -\n    the expression that represents the first location accessed - is\n    more involved than just an ssa_name.  */\n \n+volatile int y = 0;\n+\n __attribute__ ((noinline)) int\n main1 (float * __restrict__ pa, float * __restrict__ pb, float *__restrict__ pc)\n {\n   int i;\n   float *q = pb + 4;\n+  for (i = 0; i < N; i++)\n+    {\n+      fb[i] = i;\n+      fc[i] = 0.5+i;\n+      if (y)\n+\tabort ();\n+    }\n+  for (; i < N+4; i++)\n+    {\n+      fb[i] = i;\n+      if (y)\n+\tabort ();\n+    }\n \n   for (i = 0; i < N; i++)\n     {"}, {"sha": "136ff4a800ac79faf4ceb6fc0c97e3f02f639f2c", "filename": "gcc/testsuite/gcc.dg/vect/vect-85.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-85.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-85.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-85.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n \n __attribute__ ((noinline))\n int main1 (int *a)"}, {"sha": "d621785e38ad93be1fd8d625de23077f65481483", "filename": "gcc/testsuite/gcc.dg/vect/vect-89.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-89.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n \n struct tmp_struct\n {"}, {"sha": "f8bf4c321428c97133336b270c75ab6b6dfaa55e", "filename": "gcc/testsuite/gcc.dg/vect/vect-97.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-97.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-97.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-97.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,10 +3,12 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n  \n char x[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n-char cb[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__))) = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+char cb[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+\n+volatile int y = 0;\n \n __attribute__ ((noinline))\n int main1 ()\n@@ -16,6 +18,12 @@ int main1 ()\n     char *q;\n   } s;\n   int i;\n+  for (i = 0; i < N; i++)\n+    {\n+      cb[i] = i*3;\n+      if (y)\n+\tabort ();\n+    }\n \n   /* Check that datarefs analysis can determine that the access via pointer\n      s.p is based off array x, which enables us to antialias this access from"}, {"sha": "987c93bf17855d0845c13900ba47524b8f46c6b0", "filename": "gcc/testsuite/gcc.dg/vect/vect-98.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-98.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-98.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-98.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,8 +3,13 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 4\n-#define DOT4( a, b )  ( a[0]*b[0] + a[1]*b[1] + a[2]*b[2] + a[3]*b[3] )\n+#define N 16\n+#define DOT16( a, b)   ( a[0]*b[0]   + a[1]*b[1]   + a[2]*b[2]   + a[3]*b[3] + \\\n+\t\t\t a[4]*b[4]   + a[5]*b[5]   + a[6]*b[6]   + a[7]*b[7] + \\\n+\t\t\t a[8]*b[8]   + a[9]*b[9]   + a[10]*b[10] + a[11]*b[11] + \\\n+\t\t\t a[12]*b[12] + a[13]*b[13] + a[14]*b[14] + a[15]*b[15])\n+\n+volatile int y = 0;\n \n __attribute__ ((noinline))\n int main1 (int ia[][N])\n@@ -15,22 +20,31 @@ int main1 (int ia[][N])\n \n   for (i = 0; i < N; i++)\n     {\n-\tic[0][i] = DOT4 (ia[i], ib);\n+\tic[0][i] = DOT16 (ia[i], ib);\n     }\n \n   /* check results: */  \n   for (i = 0; i < N; i++)\n     {\n-       if (ic[0][i] != DOT4 (ia[i], ib))\n-           abort();\n+       if (ic[0][i] != DOT16 (ia[i], ib))\n+           abort ();\n     }\n \n   return 0;\n }\n \n int main (void)\n { \n-  int ia[N][N] = {{1,2,3,4},{2,3,5,7},{2,4,6,8},{22,43,55,77}};\n+  int ia[N][N];\n+  int i,j;\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      {\n+        ia[i][j] = i + j + 1;\n+\t/* Avoid vectorization.  */\n+\tif (y)\n+\t  abort ();\n+      }\n \n   check_vect ();\n "}, {"sha": "79ad5997b196f954dc05a6a2a374fde13ecb8dcc", "filename": "gcc/testsuite/gcc.dg/vect/vect-all.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-all.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -4,13 +4,13 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 128\n \n-int iadd_results[N] = {0,6,12,18,24,30,36,42,48,54,60,66,72,78,84,90};\n-float fadd_results[N] = {0.0,6.0,12.0,18.0,24.0,30.0,36.0,42.0,48.0,54.0,60.0,66.0,72.0,78.0,84.0,90.0};\n-float fmul_results[N] = {0.0,3.0,12.0,27.0,48.0,75.0,108.0,147.0,192.0,243.0,300.0,363.0,432.0,507.0,588.0,675.0};\n-float fresults1[N] = {192.00,240.00,288.00,336.00,384.00,432.00,480.00,528.00,48.00,54.00,60.00,66.00,72.00,78.00,84.00,90.00};\n-float fresults2[N] = {0.00,6.00,12.00,18.00,24.00,30.00,36.00,42.00,0.00,54.00,120.00,198.00,288.00,390.00,504.00,630.00};\n+int iadd_results[N];\n+float fadd_results[N];\n+float fmul_results[N];\n+float fresults1[N];\n+float fresults2[N];\n \n /****************************************************/\n __attribute__ ((noinline))\n@@ -77,12 +77,32 @@ char cb[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n char ca[N];\n short sa[N];\n \n-/* All of the loops below are currently vectorizable.  */\n+volatile int y = 0;\n+\n+/* All of the loops below are currently vectorizable, except\n+   initialization ones.  */\n \n __attribute__ ((noinline)) int\n main1 ()\n {\n   int i,j;\n+  /* Initialization.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      b[i] = i*3;\n+      c[i] = i;\n+      d[i] = i*2;\n+      ic[i] = i*3;\n+      ib[i] = i*3;\n+      cb[i] = i*3;\n+      fadd_results[i] = b[i] + c[i] + d[i];\n+      iadd_results[i] = ib[i] + ic[i];\n+      fmul_results[i] = b[i] * c[i];\n+      fresults1[i] = 0;\n+      fresults2[i] = 0;\n+      if (y)\n+\tabort ();\n+    }\n \n   /* Test 1: copy chars.  */\n   for (i = 0; i < N; i++)\n@@ -116,7 +136,21 @@ main1 ()\n   fbar_add (a);\n   fbar_add (e);\n \n-\n+  /* Initialization.  */\n+  for (i = 0; i < N; i++)\n+    {\n+      fresults1[i] = a[i];\n+      fresults2[i] = e[i];\n+      if (y)\n+\tabort ();\n+    }\n+  for (i = 0; i < N/2; i++)\n+    {\n+      fresults1[i] = b[i+N/2] * c[i+N/2] - b[i] * c[i];\n+      fresults2[i+N/2] = b[i] * c[i+N/2] + b[i+N/2] * c[i];\n+      if (y)\n+\tabort ();\n+    }\n   /* Test 4: access with offset.  */\n   for (i = 0; i < N/2; i++)\n     {"}, {"sha": "0b49ab77298757634d701da28e587df54e922826", "filename": "gcc/testsuite/gcc.dg/vect/vect-double-reduc-6.c", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-6.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,13 +3,15 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define K 4 \n+#define K 16\n \n int in[2*K][K] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n int out[K];\n-int check_result[K] = {0,16,256,4096};\n+int check_result[K];\n \n-__attribute__ ((noinline)) void \n+volatile int y = 0;\n+\n+__attribute__ ((noinline)) void\n foo ()\n {\n   int sum;\n@@ -18,7 +20,21 @@ foo ()\n   for (k = 0; k < K; k++)\n     {\n       sum = 1;\n-      for (j = 0; j < K; j++) \n+      for (j = 0; j < K; j++)\n+        for (i = 0; i < K; i++)\n+\t{\n+          sum *= in[i+k][j];\n+\t  /* Avoid vectorization.  */\n+\t  if (y)\n+\t    abort ();\n+\t}\n+      check_result[k] = sum;\n+    }\n+\n+  for (k = 0; k < K; k++)\n+    {\n+      sum = 1;\n+      for (j = 0; j < K; j++)\n         for (i = 0; i < K; i++)\n           sum *= in[i+k][j];\n       out[k] = sum;\n@@ -43,7 +59,7 @@ int main ()\n \n   return 0;\n }\n-        \n+\n /* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n-      \n+"}, {"sha": "4150ee2821688c75399b33144e81d45c41fd6ebf", "filename": "gcc/testsuite/gcc.dg/vect/vect-iv-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 26\n+#define N 128\n  \n __attribute__ ((noinline)) int main1 (short X)\n {  "}, {"sha": "3492030d2276959754dba18756073de709f0ae3e", "filename": "gcc/testsuite/gcc.dg/vect/vect-iv-8a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-iv-8a.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 26\n+#define N 128\n  \n __attribute__ ((noinline)) int main1 (short X)\n {  "}, {"sha": "e8094db411290e28d615d5d14a1091a3560b45f7", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n \n-#define N 64\n+#define N 256\n signed short image[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n signed short block[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n signed short out[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));"}, {"sha": "9b418fabaa9795772f4396dc4cef8d40ab3c6e49", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-1a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1a.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n \n-#define N 64\n+#define N 256\n signed short image[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n signed short block[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n "}, {"sha": "48b7180784e1544c17f5219aeda197d409434e5a", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-1b.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1b.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n \n-#define N 40\n+#define N 160\n signed short image[N][N];\n signed short block[N][N];\n signed short out[N];"}, {"sha": "ba3fa87b151afdd2b16092fdebc05602e1fdc8d9", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 40\n+#define N 160\n float image[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n float out[N];\n "}, {"sha": "062e1fdd45103732a09be06eee21f62a36fae969", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-2a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2a.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 40\n+#define N 160\n float image[N][N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n \n __attribute__ ((noinline)) void"}, {"sha": "cdea72aabe2cd1230299d71e61c26fecfbc381ad", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-2c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2c.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 40\n+#define N 160\n float image[2*N][2*N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n \n __attribute__ ((noinline)) void"}, {"sha": "83b6f994cd7fe46d2ba950d4caf6fd6a577f667c", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -2,7 +2,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 40\n+#define N 320\n float image[N][N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n float out[N];\n "}, {"sha": "9768a1ed57771ae0ecd016c61e0f72675f996303", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-3a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -2,7 +2,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 40\n+#define N 320\n float image[N][N+1] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n float out[N];\n "}, {"sha": "3981b94e6569d752dc938f32cf6aac13d9122b95", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4a.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4a.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n \n-#define N 40\n-#define M 128\n+#define N 512\n+#define M 1024\n signed short in[N+M];\n signed short coeff[M];\n signed short out[N];"}, {"sha": "a9035454729385019ab730352a9c3da89d93f18e", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4b.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4b.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n \n-#define N 40\n-#define M 128\n+#define N 320\n+#define M 1024\n signed short in[N+M];\n signed short coeff[M];\n int out[N];"}, {"sha": "4b6ffbf10ecc184236c4b0261fd89b08bfc2c661", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4c.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n \n-#define N 40\n-#define M 128\n+#define N 320\n+#define M 1024\n unsigned short in[N+M];\n unsigned short coeff[M];\n unsigned int out[N];"}, {"sha": "e70be3248c055e8107368f9f256f0bbcf98b294a", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4d.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4d.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,8 +3,8 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 40\n-#define M 128\n+#define N 320\n+#define M 1024\n float in[N+M];\n float out[N];\n "}, {"sha": "1087df0d4cf32ca0c509b538001fa892f69a254a", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4m.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4m.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4m.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4m.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -2,8 +2,8 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 40\n-#define M 128\n+#define N 320\n+#define M 1024\n unsigned short in[N+M];\n unsigned int out[N];\n "}, {"sha": "5ac62ac3a2f7f0f3aaa35e7b9df770e646e2c8c9", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-fir-lb.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-lb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-lb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir-lb.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,8 +3,8 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 40\n-#define M 64\n+#define N 80\n+#define M 128\n float in[N+M];\n float coeff[M];\n float out[N];"}, {"sha": "c81180c8313e3ff29282df167c976709bb7b26d5", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-fir.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-fir.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,8 +3,8 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 40\n-#define M 128\n+#define N 80\n+#define M 256\n float in[N+M];\n float coeff[M];\n float out[N];"}, {"sha": "2061594acc05360754b5c854ab72254fa3b7c976", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-1.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -5,7 +5,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 64\n+#define N 512\n \n /* Modified rgb to rgb conversion from FFmpeg.  */\n __attribute__ ((noinline)) void"}, {"sha": "bc738cef26c4604cd004c687e09583aa41beb3b6", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-2.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -5,7 +5,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 64\n+#define N 512\n \n /* Modified rgb to rgb conversion from FFmpeg.  */\n __attribute__ ((noinline)) void"}, {"sha": "d828c833f5558a39ca190e1ee1db59e95d23c421", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -5,7 +5,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 64\n+#define N 128\n \n /* Modified rgb to rgb conversion from FFmpeg.  */\n __attribute__ ((noinline)) void"}, {"sha": "d296dc944869015d5e2dc5c27fe3a1818dcf9393", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-4.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -5,7 +5,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 64\n+#define N 512\n \n /* Modified rgb to rgb conversion from FFmpeg.  */\n __attribute__ ((noinline)) int"}, {"sha": "7462cb34cc56e7e20652ba1dd67ab66475c1110d", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-1char.c", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-1char.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,11 +3,13 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n-#define DIFF 242\n+#define N 256\n \n-unsigned char ub[N] = {1,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n-unsigned char uc[N] = {1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+unsigned char ub[N];\n+unsigned char uc[N];\n+unsigned char diff;\n+\n+volatile int y = 0;\n \n __attribute__ ((noinline)) void\n main1 (unsigned char x, unsigned char max_result, unsigned char min_result)\n@@ -17,8 +19,26 @@ main1 (unsigned char x, unsigned char max_result, unsigned char min_result)\n   unsigned char umax = x;\n   unsigned char umin = x;\n \n+  diff = 2;\n+  for (i = 0; i < N; i++) {\n+    ub[i] = i;\n+    uc[i] = i;\n+    if (i%16 == 0)\n+      {\n+\tub[i] = i+2;\n+\tdiff += 2;\n+      }\n+    if (uc[i] > max_result)\n+      max_result = uc[i];\n+    if (uc[i] < min_result)\n+      min_result = uc[i];\n+\n+    /* Avoid vectorization.  */\n+    if (y)\n+      abort ();\n+  }\n   for (i = 0; i < N; i++) {\n-    udiff += (unsigned char)(ub[i] - uc[i]);\n+    udiff += (unsigned char) (ub[i] - uc[i]);\n   }\n \n   for (i = 0; i < N; i++) {\n@@ -30,7 +50,7 @@ main1 (unsigned char x, unsigned char max_result, unsigned char min_result)\n   }\n \n   /* check results:  */\n-  if (udiff != DIFF)\n+  if (udiff != diff)\n     abort ();\n   if (umax != max_result)\n     abort ();\n@@ -39,9 +59,9 @@ main1 (unsigned char x, unsigned char max_result, unsigned char min_result)\n }\n \n int main (void)\n-{ \n+{\n   check_vect ();\n-  \n+\n   main1 (100, 100, 1);\n   main1 (0, 15, 0);\n   return 0;"}, {"sha": "7004e9e4e4403e8fb11d7adf29acb3ac032073c8", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-2char.c", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-2char.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,21 +3,40 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n-#define DIFF 121\n+#define N 256\n+volatile int y = 0;\n \n __attribute__ ((noinline))\n void main1 (signed char x, signed char max_result, signed char min_result)\n {\n   int i;\n-  signed char b[N] = {1,2,3,6,8,10,12,14,16,18,20,22,24,26,28,30};\n-  signed char c[N] = {1,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+  signed char b[N];\n+  signed char c[N];\n+  signed char check_diff = 2;\n   signed char diff = 2;\n   signed char max = x;\n   signed char min = x;\n \n+  check_diff = 2;\n   for (i = 0; i < N; i++) {\n-    diff += (signed char)(b[i] - c[i]);\n+    b[i] = i;\n+    c[i] = i;\n+    if (i%16 == 0)\n+      {\n+\tc[i] = i + 1;\n+\tcheck_diff += 1;\n+      }\n+    if (c[i] > max_result)\n+      max_result = c[i];\n+    if (c[i] < min_result)\n+      min_result = c[i];\n+    /* Avoid vectorization.  */\n+    if (y)\n+      abort ();\n+  }\n+\n+  for (i = 0; i < N; i++) {\n+    diff += (signed char) (c[i] - b[i]);\n   }\n \n   for (i = 0; i < N; i++) {\n@@ -29,7 +48,7 @@ void main1 (signed char x, signed char max_result, signed char min_result)\n   }\n \n   /* check results:  */\n-  if (diff != DIFF)\n+  if (diff != check_diff)\n     abort ();\n   if (max != max_result)\n     abort ();\n@@ -38,9 +57,9 @@ void main1 (signed char x, signed char max_result, signed char min_result)\n }\n \n int main (void)\n-{ \n+{\n   check_vect ();\n-  \n+\n   main1 (100, 100, 1);\n   main1 (0, 15, 0);\n   return 0;"}, {"sha": "1967e3da6b237d2a7e7821f734dca17e74c7ed74", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1b.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1b.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,17 +3,26 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n-unsigned char udata_ch[N] =\n-  { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n-#define SUM 210\n+#define N 128\n+unsigned char udata_ch[N];\n+#define SUM N*(N-1)\n+\n+volatile int y = 0;\n \n __attribute__ ((noinline)) int\n foo ()\n {\n   int i;\n   unsigned int intsum = 0;\n \n+  for (i = 0; i < N; i++)\n+    {\n+      udata_ch[i] = i*2;\n+      /* Avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n+\n   /* widenning sum: sum chars into int.  */\n   for (i = 0; i < N; i++)\n     {"}, {"sha": "5394adee00ec1676284e5ae3b42b650ecb2125dc", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-1c.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-1c.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,17 +3,26 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n-unsigned char udata_ch[N] =\n-  { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n-#define SUM 210\n+#define N 128\n+unsigned char udata_ch[N];\n+#define SUM N*(N-1)\n+\n+volatile int y = 0;\n \n __attribute__ ((noinline)) int\n foo ()\n {\n   int i;\n   unsigned short shortsum = 0;\n \n+  for (i = 0; i < N; i++)\n+    {\n+      udata_ch[i] = i*2;\n+      /* Avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n+\n   /* widenning sum: sum chars into short.  */\n   for (i = 0; i < N; i++)\n     {"}, {"sha": "fa0100b9a9d94c7088c3dca91f08c5763040dc5b", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-pattern-2b.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-pattern-2b.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,16 +3,26 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n-signed char data_ch[N] =\n-  { 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 };\n-#define SUM 210\n+#define N 128\n+signed char data_ch[N];\n+\n+volatile int y = 0;\n \n __attribute__ ((noinline)) int\n foo ()\n {\n   int i;\n   signed int intsum = 0;\n+  signed int check_intsum = 0;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      data_ch[i] = i*2;\n+      check_intsum += data_ch[i];\n+      /* Avoid vectorization.  */\n+      if (y)\n+\tabort ();\n+    }\n \n   /* widenning sum: sum chars into int.  */\n   for (i = 0; i < N; i++)\n@@ -21,7 +31,7 @@ foo ()\n     }\n \n   /* check results:  */\n-  if (intsum != SUM)\n+  if (intsum != check_intsum)\n     abort ();\n \n   return 0;"}, {"sha": "0e1acfb7bebea3f73347dc0fd32325e8d3dc45dd", "filename": "gcc/testsuite/gcc.dg/vect/vect-shift-2.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-2.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -157,15 +157,15 @@ NAME (PREFIX, tests) (void)\t\t\t\t\t\t\\\n   NAME (PREFIX, check) ();\t\t\t\t\t\t\\\n }\n \n-VECT_TESTS(uc_, unsigned char,  16)\n-VECT_TESTS(us_, unsigned short, 32)\n-VECT_TESTS(ui_, unsigned int,   32)\n-VECT_TESTS(ul_, unsigned long,  32)\n-\n-VECT_TESTS(sc_, signed char,    16)\n-VECT_TESTS(ss_, short,          32)\n-VECT_TESTS(si_, int,            32)\n-VECT_TESTS(sl_, long,           32)\n+VECT_TESTS (uc_, unsigned char,  128)\n+VECT_TESTS (us_, unsigned short, 256)\n+VECT_TESTS (ui_, unsigned int,   256)\n+VECT_TESTS (ul_, unsigned long,  256)\n+\n+VECT_TESTS (sc_, signed char,    128)\n+VECT_TESTS (ss_, short,          256)\n+VECT_TESTS (si_, int,            256)\n+VECT_TESTS (sl_, long,           256)\n \n int main ()\n {"}, {"sha": "f20d158db70eb58a2daec3e4b9e76d43913df729", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i8-gap2.c", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap2.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16 \n+#define N 128\n \n typedef struct {\n    unsigned char a;\n@@ -22,6 +22,7 @@ main1 ()\n   int i;\n   s arr[N];\n   s *ptr = arr;\n+  s check_res[N];\n   s res[N];\n \n   for (i = 0; i < N; i++)\n@@ -34,6 +35,16 @@ main1 ()\n       arr[i].f = i * 2 + 2;\n       arr[i].g = i - 3;\n       arr[i].h = 56;\n+\n+      check_res[i].c = arr[i].a;\n+      check_res[i].a = arr[i].f + arr[i].a;\n+      check_res[i].d = arr[i].f - arr[i].a;\n+      check_res[i].b = arr[i].f;\n+      check_res[i].f = arr[i].a;\n+      check_res[i].e = arr[i].f - arr[i].a;\n+      check_res[i].h = arr[i].f;\n+      check_res[i].g = arr[i].f - arr[i].a;\n+\n       if (arr[i].a == 178)\n          abort();\n     }\n@@ -45,23 +56,23 @@ main1 ()\n       res[i].d = ptr->f - ptr->a;\n       res[i].b = ptr->f;\n       res[i].f = ptr->a;\n-      res[i].e = ptr->f - ptr->a; \n-      res[i].h = ptr->f;   \n+      res[i].e = ptr->f - ptr->a;\n+      res[i].h = ptr->f;\n       res[i].g = ptr->f - ptr->a;\n-      ptr++; \n-    } \n-   \n+      ptr++;\n+    }\n+\n   /* check results:  */\n   for (i = 0; i < N; i++)\n-    { \n-      if (res[i].c != arr[i].a\n-          || res[i].a != arr[i].f + arr[i].a\n-          || res[i].d != arr[i].f - arr[i].a\n-          || res[i].b != arr[i].f\n-          || res[i].f != arr[i].a\n-          || res[i].e != arr[i].f - arr[i].a\n-          || res[i].h != arr[i].f\n-          || res[i].g != arr[i].f - arr[i].a)\n+    {\n+      if (res[i].a != check_res[i].a\n+\t  || res[i].b != check_res[i].b\n+\t  || res[i].c != check_res[i].c\n+\t  || res[i].d != check_res[i].d\n+\t  || res[i].e != check_res[i].e\n+\t  || res[i].f != check_res[i].f\n+\t  || res[i].g != check_res[i].g\n+\t  || res[i].h != check_res[i].h)\n           abort();\n    }\n }\n@@ -78,4 +89,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided8 } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n-  \n+"}, {"sha": "28a9c58cd6567c186f66be55fa261252722a3ea0", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-a-u8-i8-gap7.c", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-a-u8-i8-gap7.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16 \n+#define N 128\n \n typedef struct {\n    unsigned char a;\n@@ -22,6 +22,7 @@ main1 ()\n   int i;\n   s arr[N];\n   s *ptr = arr;\n+  s check_res[N];\n   s res[N];\n   unsigned char u, t, s, x, y, z, w;\n \n@@ -35,6 +36,20 @@ main1 ()\n       arr[i].f = i * 5;\n       arr[i].g = i - 3;\n       arr[i].h = 67;\n+\n+      u = arr[i].b - arr[i].a;\n+      t = arr[i].d - arr[i].c;\n+      check_res[i].c = u + t;\n+      x = arr[i].b + arr[i].d;\n+      check_res[i].a = arr[i].a + x;\n+      check_res[i].d = u + t;\n+      s = arr[i].h - arr[i].a;\n+      check_res[i].b = s + t;\n+      check_res[i].f = arr[i].f + arr[i].h;\n+      check_res[i].e = arr[i].b + arr[i].e;\n+      check_res[i].h = arr[i].d;\n+      check_res[i].g = u + t;\n+\n       if (arr[i].a == 178)\n          abort();\n     }\n@@ -59,14 +74,14 @@ main1 ()\n   /* check results:  */\n   for (i = 0; i < N; i++)\n     { \n-      if (res[i].c != arr[i].b - arr[i].a + arr[i].d - arr[i].c\n-          || res[i].a != arr[i].a + arr[i].b + arr[i].d\n-          || res[i].d != arr[i].b - arr[i].a + arr[i].d - arr[i].c\n-          || res[i].b != arr[i].h - arr[i].a + arr[i].d - arr[i].c\n-          || res[i].f != arr[i].f + arr[i].h\n-          || res[i].e != arr[i].b + arr[i].e\n-          || res[i].h != arr[i].d\n-          || res[i].g != arr[i].b - arr[i].a + arr[i].d - arr[i].c)\n+      if (res[i].a != check_res[i].a\n+\t  || res[i].b != check_res[i].b\n+\t  || res[i].c != check_res[i].c\n+\t  || res[i].d != check_res[i].d\n+\t  || res[i].e != check_res[i].e\n+\t  || res[i].f != check_res[i].f\n+\t  || res[i].g != check_res[i].g\n+\t  || res[i].h != check_res[i].h)\n          abort();\n    }\n }"}, {"sha": "cc1b94989149c847ae63c45063a22d20fe1ae196", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap2.c", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap2.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16 \n+#define N 128\n \n typedef struct {\n    unsigned char a;\n@@ -16,6 +16,8 @@ typedef struct {\n    unsigned char h;\n } s;\n \n+s check_res[N];\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -30,24 +32,24 @@ main1 (s *arr)\n       res[i].d = ptr->f - ptr->b;\n       res[i].b = ptr->f;\n       res[i].f = ptr->b;\n-      res[i].e = ptr->f - ptr->b; \n-      res[i].h = ptr->f;   \n+      res[i].e = ptr->f - ptr->b;\n+      res[i].h = ptr->f;\n       res[i].g = ptr->f - ptr->b;\n-      ptr++; \n-    } \n-   \n+      ptr++;\n+    }\n+\n   /* check results:  */\n   for (i = 0; i < N; i++)\n-    { \n-      if (res[i].c != arr[i].b\n-          || res[i].a != arr[i].f + arr[i].b\n-          || res[i].d != arr[i].f - arr[i].b\n-          || res[i].b != arr[i].f\n-          || res[i].f != arr[i].b\n-          || res[i].e != arr[i].f - arr[i].b\n-          || res[i].h != arr[i].f\n-          || res[i].g != arr[i].f - arr[i].b)\n-          abort();\n+    {\n+      if (res[i].a != check_res[i].a\n+\t  || res[i].b != check_res[i].b\n+\t  || res[i].c != check_res[i].c\n+\t  || res[i].d != check_res[i].d\n+\t  || res[i].e != check_res[i].e\n+\t  || res[i].f != check_res[i].f\n+\t  || res[i].g != check_res[i].g\n+\t  || res[i].h != check_res[i].h)\n+          abort ();\n    }\n }\n \n@@ -56,11 +58,11 @@ int main (void)\n {\n   int i;\n   s arr[N];\n-  \n+\n   check_vect ();\n \n   for (i = 0; i < N; i++)\n-    { \n+    {\n       arr[i].a = i;\n       arr[i].b = i * 2;\n       arr[i].c = 17;\n@@ -69,9 +71,18 @@ int main (void)\n       arr[i].f = i * 2 + 2;\n       arr[i].g = i - 3;\n       arr[i].h = 56;\n+\n+      check_res[i].c = arr[i].b;\n+      check_res[i].a = arr[i].f + arr[i].b;\n+      check_res[i].d = arr[i].f - arr[i].b;\n+      check_res[i].b = arr[i].f;\n+      check_res[i].f = arr[i].b;\n+      check_res[i].e = arr[i].f - arr[i].b;\n+      check_res[i].h = arr[i].f;\n+      check_res[i].g = arr[i].f - arr[i].b;\n       if (arr[i].a == 178)\n-         abort(); \n-    } \n+         abort ();\n+    }\n \n   main1 (arr);\n \n@@ -80,4 +91,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided8 } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n-  \n+"}, {"sha": "92255d42707e6d6faf9b54dbb5612509de2e7a9c", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap4.c", "status": "modified", "additions": 38, "deletions": 25, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap4.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16 \n+#define N 128\n \n typedef struct {\n    unsigned char a;\n@@ -16,6 +16,8 @@ typedef struct {\n    unsigned char h;\n } s;\n \n+s check_res[N];\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -32,39 +34,39 @@ main1 (s *arr)\n       res[i].d = ptr->b + ptr->c;\n       res[i].b = ptr->c;\n       res[i].f = ptr->f + ptr->e;\n-      res[i].e = ptr->b + ptr->e; \n-      res[i].h = ptr->c;   \n+      res[i].e = ptr->b + ptr->e;\n+      res[i].h = ptr->c;\n       res[i].g = ptr->b + ptr->c;\n-      ptr++; \n-    } \n-   \n+      ptr++;\n+    }\n+\n   /* check results:  */\n   for (i = 0; i < N; i++)\n-    { \n-      if (res[i].c != arr[i].b + arr[i].c\n-          || res[i].a != arr[i].c + arr[i].f + arr[i].b\n-          || res[i].d != arr[i].b + arr[i].c\n-          || res[i].b != arr[i].c\n-          || res[i].f != arr[i].f + arr[i].e\n-          || res[i].e != arr[i].b + arr[i].e\n-          || res[i].h != arr[i].c\n-          || res[i].g != arr[i].b + arr[i].c)\n+    {\n+      if (res[i].a != check_res[i].a\n+\t  || res[i].b != check_res[i].b\n+\t  || res[i].c != check_res[i].c\n+\t  || res[i].d != check_res[i].d\n+\t  || res[i].e != check_res[i].e\n+\t  || res[i].f != check_res[i].f\n+\t  || res[i].g != check_res[i].g\n+\t  || res[i].h != check_res[i].h)\n           abort ();\n    }\n \n   ptr = arr;\n   /* Not vectorizable: gap in store. */\n   for (i = 0; i < N; i++)\n-    { \n+    {\n       res[i].a = ptr->b;\n       res[i].b = ptr->c;\n-      ptr++; \n+      ptr++;\n     }\n-  \n+\n   /* Check results.  */\n   for (i = 0; i < N; i++)\n     {\n-      if (res[i].a != arr[i].b \n+      if (res[i].a != arr[i].b\n \t  || res[i].b != arr[i].c)\n           abort ();\n     }\n@@ -76,11 +78,12 @@ int main (void)\n {\n   int i;\n   s arr[N];\n-  \n+  unsigned char x;\n+\n   check_vect ();\n \n   for (i = 0; i < N; i++)\n-    { \n+    {\n       arr[i].a = i;\n       arr[i].b = i * 2;\n       arr[i].c = 17;\n@@ -89,15 +92,25 @@ int main (void)\n       arr[i].f = i * 5;\n       arr[i].g = i - 3;\n       arr[i].h = 56;\n-      if (arr[i].a == 178)\n-         abort(); \n-    } \n \n+      check_res[i].c = arr[i].b + arr[i].c;\n+      x = arr[i].c + arr[i].f;\n+      check_res[i].a = x + arr[i].b;\n+      check_res[i].d = arr[i].b + arr[i].c;\n+      check_res[i].b = arr[i].c;\n+      check_res[i].f = arr[i].f + arr[i].e;\n+      check_res[i].e = arr[i].b + arr[i].e;\n+      check_res[i].h = arr[i].c;\n+      check_res[i].g = arr[i].b + arr[i].c;\n+\n+      if (arr[i].a == 178)\n+         abort ();\n+    }\n   main1 (arr);\n \n   return 0;\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_strided8 } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n-  \n+"}, {"sha": "0e3c0528dc9fc8f60462d5e41f649dee75f6241d", "filename": "gcc/testsuite/gcc.dg/vect/vect-strided-u8-i8-gap7.c", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/134dc576a298b36dbbe5048b0acdf11e53838464/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-strided-u8-i8-gap7.c?ref=134dc576a298b36dbbe5048b0acdf11e53838464", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16 \n+#define N 128\n \n typedef struct {\n    unsigned char a;\n@@ -16,6 +16,8 @@ typedef struct {\n    unsigned char h;\n } s;\n \n+s check_res[N];\n+\n __attribute__ ((noinline)) int\n main1 (s *arr)\n {\n@@ -44,14 +46,14 @@ main1 (s *arr)\n   /* check results:  */\n   for (i = 0; i < N; i++)\n     { \n-      if (res[i].c != arr[i].b - arr[i].a + arr[i].d - arr[i].c\n-          || res[i].a != arr[i].a + arr[i].b + arr[i].d\n-          || res[i].d != arr[i].b - arr[i].a + arr[i].d - arr[i].c\n-          || res[i].b != arr[i].h - arr[i].a + arr[i].d - arr[i].c\n-          || res[i].f != arr[i].f + arr[i].h\n-          || res[i].e != arr[i].b + arr[i].e\n-          || res[i].h != arr[i].d\n-          || res[i].g != arr[i].b - arr[i].a + arr[i].d - arr[i].c)\n+      if (res[i].a != check_res[i].a\n+\t  || res[i].b != check_res[i].b\n+\t  || res[i].c != check_res[i].c\n+\t  || res[i].d != check_res[i].d\n+\t  || res[i].e != check_res[i].e\n+\t  || res[i].f != check_res[i].f\n+\t  || res[i].g != check_res[i].g\n+\t  || res[i].h != check_res[i].h)\n          abort();\n    }\n }\n@@ -61,6 +63,7 @@ int main (void)\n {\n   int i;\n   s arr[N];\n+  unsigned char u, t, s, x, y, z, w;\n   \n   check_vect ();\n \n@@ -74,6 +77,20 @@ int main (void)\n       arr[i].f = i * 5;\n       arr[i].g = i - 3;\n       arr[i].h = 67;\n+\n+      u = arr[i].b - arr[i].a;\n+      t = arr[i].d - arr[i].c;\n+      check_res[i].c = u + t;\n+      x = arr[i].b + arr[i].d;\n+      check_res[i].a = arr[i].a + x;\n+      check_res[i].d = u + t;\n+      s = arr[i].h - arr[i].a;\n+      check_res[i].b = s + t;\n+      check_res[i].f = arr[i].f + arr[i].h;\n+      check_res[i].e = arr[i].b + arr[i].e;\n+      check_res[i].h = arr[i].d;\n+      check_res[i].g = u + t;\n+\n       if (arr[i].a == 178)\n          abort(); \n     } "}]}