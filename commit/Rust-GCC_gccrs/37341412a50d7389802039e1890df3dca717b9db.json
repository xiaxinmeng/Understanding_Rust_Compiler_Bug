{"sha": "37341412a50d7389802039e1890df3dca717b9db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczNDE0MTJhNTBkNzM4OTgwMjAzOWUxODkwZGYzZGNhNzE3YjlkYg==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@codesourcery.com", "date": "2015-10-18T10:11:03Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2015-10-18T10:11:03Z"}, "message": "Improve handling of -arch flag for Darwin\n\ngcc/\n\t* config/darwin-driver.c (darwin_driver_init): Handle '-arch' for\n\tPPC, detect conflicts between -arch and multilib settings.  Detect\n\tand warn about conflicts between multiple -arch definitions.\n\nFrom-SVN: r228941", "tree": {"sha": "a60939091867ded9f8eff90c5b85089fcf297933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a60939091867ded9f8eff90c5b85089fcf297933"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37341412a50d7389802039e1890df3dca717b9db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37341412a50d7389802039e1890df3dca717b9db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37341412a50d7389802039e1890df3dca717b9db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37341412a50d7389802039e1890df3dca717b9db/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38217d3ee7c6e1fee58331f10e5c78e40441009b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38217d3ee7c6e1fee58331f10e5c78e40441009b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38217d3ee7c6e1fee58331f10e5c78e40441009b"}], "stats": {"total": 106, "additions": 101, "deletions": 5}, "files": [{"sha": "fcdb43994d137524001129491e27ef6d68388866", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37341412a50d7389802039e1890df3dca717b9db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37341412a50d7389802039e1890df3dca717b9db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37341412a50d7389802039e1890df3dca717b9db", "patch": "@@ -1,6 +1,12 @@\n 2015-10-18  Iain Sandoe  <iain@codesourcery.com>\n \n-\t* config/darwin-driver.h: Adjust includes to add diagnostic-core.\n+\t* config/darwin-driver.c (darwin_driver_init): Handle '-arch' for\n+\tPPC, detect conflicts between -arch and multilib settings.  Detect\n+\tand warn about conflicts between multiple -arch definitions.\n+\n+2015-10-18  Iain Sandoe  <iain@codesourcery.com>\n+\n+\t* config/darwin-driver.c: Adjust includes to add diagnostic-core.\n \n 2015-10-16  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n "}, {"sha": "549ad1c137e625be542bafb3d0d04750c75358db", "filename": "gcc/config/darwin-driver.c", "status": "modified", "additions": 94, "deletions": 4, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37341412a50d7389802039e1890df3dca717b9db/gcc%2Fconfig%2Fdarwin-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37341412a50d7389802039e1890df3dca717b9db/gcc%2Fconfig%2Fdarwin-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-driver.c?ref=37341412a50d7389802039e1890df3dca717b9db", "patch": "@@ -179,21 +179,55 @@ darwin_driver_init (unsigned int *decoded_options_count,\n \t\t    struct cl_decoded_option **decoded_options)\n {\n   unsigned int i;\n+  bool seenX86 = false;\n+  bool seenX86_64 = false;\n+  bool seenPPC = false;\n+  bool seenPPC64 = false;\n+  bool seenM32 = false;\n+  bool seenM64 = false;\n+  bool appendM32 = false;\n+  bool appendM64 = false;\n \n   for (i = 1; i < *decoded_options_count; i++)\n     {\n       if ((*decoded_options)[i].errors & CL_ERR_MISSING_ARG)\n \tcontinue;\n+\n       switch ((*decoded_options)[i].opt_index)\n \t{\n-#if DARWIN_X86\n \tcase OPT_arch:\n+\t  /* Support provision of a single -arch xxxx flag as a means of\n+\t     specifying the sub-target/multi-lib.  Translate this into -m32/64\n+\t     as appropriate.  */  \n \t  if (!strcmp ((*decoded_options)[i].arg, \"i386\"))\n-\t    generate_option (OPT_m32, NULL, 1, CL_DRIVER, &(*decoded_options)[i]);\n+\t    seenX86 = true;\n \t  else if (!strcmp ((*decoded_options)[i].arg, \"x86_64\"))\n-\t    generate_option (OPT_m64, NULL, 1, CL_DRIVER, &(*decoded_options)[i]);\n+\t    seenX86_64 = true;\n+\t  else if (!strcmp ((*decoded_options)[i].arg, \"ppc\"))\n+\t    seenPPC = true;\n+\t  else if (!strcmp ((*decoded_options)[i].arg, \"ppc64\"))\n+\t    seenPPC64 = true;\n+\t  else\n+\t    error (\"this compiler does not support %s\",\n+\t\t   (*decoded_options)[i].arg);\n+\t  /* Now we've examined it, drop the -arch arg.  */\n+\t  if (*decoded_options_count > i) {\n+\t    memmove (*decoded_options + i,\n+\t\t     *decoded_options + i + 1,\n+\t\t     ((*decoded_options_count - i)\n+\t\t      * sizeof (struct cl_decoded_option)));\n+\t  }\n+\t  --i;\n+\t  --*decoded_options_count; \n+\t  break;\n+\n+\tcase OPT_m32:\n+\t  seenM32 = true;\n+\t  break;\n+\n+\tcase OPT_m64:\n+\t  seenM64 = true;\n \t  break;\n-#endif\n \n \tcase OPT_filelist:\n \tcase OPT_framework:\n@@ -218,4 +252,60 @@ darwin_driver_init (unsigned int *decoded_options_count,\n     }\n \n   darwin_default_min_version (decoded_options_count, decoded_options);\n+  /* Turn -arch xxxx into the appropriate -m32/-m64 flag.\n+     If the User tried to specify multiple arch flags (which is possible with\n+     some Darwin compilers) warn that this mode is not supported by this\n+     compiler (and ignore the arch flags, which means that the default multi-\n+     lib will be generated).  */\n+  /* TODO: determine if these warnings would better be errors.  */\n+#if DARWIN_X86\n+  if (seenPPC || seenPPC64)\n+    warning (0, \"this compiler does not support PowerPC (arch flags ignored)\");\n+  if (seenX86)\n+    {\n+      if (seenX86_64 || seenM64)\n+\twarning (0, \"%s conflicts with i386 (arch flags ignored)\",\n+\t        (seenX86_64? \"x86_64\": \"m64\"));\n+      else if (! seenM32) /* Add -m32 if the User didn't. */\n+\tappendM32 = true;\n+    }\n+  else if (seenX86_64)\n+    {\n+      if (seenX86 || seenM32)\n+\twarning (0, \"%s conflicts with x86_64 (arch flags ignored)\",\n+\t\t (seenX86? \"i386\": \"m32\"));\n+      else if (! seenM64) /* Add -m64 if the User didn't. */\n+\tappendM64 = true;\n+    }  \n+#elif DARWIN_PPC\n+  if (seenX86 || seenX86_64)\n+    warning (0, \"this compiler does not support X86 (arch flags ignored)\");\n+  if (seenPPC)\n+    {\n+      if (seenPPC64 || seenM64)\n+\twarning (0, \"%s conflicts with ppc (arch flags ignored)\",\n+\t\t (seenPPC64? \"ppc64\": \"m64\"));\n+      else if (! seenM32) /* Add -m32 if the User didn't. */\n+\tappendM32 = true;\n+    }\n+  else if (seenPPC64)\n+    {\n+      if (seenPPC || seenM32)\n+\twarning (0, \"%s conflicts with ppc64 (arch flags ignored)\",\n+\t\t (seenPPC? \"ppc\": \"m32\"));\n+      else if (! seenM64) /* Add -m64 if the User didn't. */\n+\tappendM64 = true;\n+    }\n+#endif\n+\n+  if (appendM32 || appendM64)\n+    {\n+      ++*decoded_options_count;\n+      *decoded_options = XRESIZEVEC (struct cl_decoded_option,\n+\t\t\t\t     *decoded_options,\n+\t\t\t\t     *decoded_options_count);\n+      generate_option (appendM32 ? OPT_m32 : OPT_m64, NULL, 1, CL_DRIVER,\n+\t\t       &(*decoded_options)[*decoded_options_count - 1]);\n+    }\n+\n }"}]}