{"sha": "7d6bb80931b429631f63e0fd27bee95f32eb57a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q2YmI4MDkzMWI0Mjk2MzFmNjNlMGZkMjdiZWU5NWYzMmViNTdhOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-03-26T08:50:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-27T06:23:08Z"}, "message": "tree-optimization/99776 - relax condition on vector ctor element extract\n\nThis relaxes the condition for the match.pd pattern doing vector ctor\nelement extracts to not require type identity but only size equality.\nSince we vectorize pointer data as unsigned integer data such mismatches\nhave to be tolerated to optimize scalar code uses of vector results.\n\n2021-03-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/99776\n\t* match.pd (bit_field_ref (ctor)): Relax element extract\n\ttype compatibility checks.\n\n\t* gcc.dg/tree-ssa/ssa-fre-91.c: New testcase.", "tree": {"sha": "c93617ede29c78771bae7244355fc9d446100438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c93617ede29c78771bae7244355fc9d446100438"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d6bb80931b429631f63e0fd27bee95f32eb57a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6bb80931b429631f63e0fd27bee95f32eb57a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6bb80931b429631f63e0fd27bee95f32eb57a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6bb80931b429631f63e0fd27bee95f32eb57a9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cde2d620fc5ff60264ee825fd6eea457d7c51d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cde2d620fc5ff60264ee825fd6eea457d7c51d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cde2d620fc5ff60264ee825fd6eea457d7c51d9"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "bb1d6231de13185ed62bc58cfa712251eee15d96", "filename": "gcc/match.pd", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6bb80931b429631f63e0fd27bee95f32eb57a9/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6bb80931b429631f63e0fd27bee95f32eb57a9/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=7d6bb80931b429631f63e0fd27bee95f32eb57a9", "patch": "@@ -6168,9 +6168,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n (simplify\n  (BIT_FIELD_REF CONSTRUCTOR@0 @1 @2)\n  (if (VECTOR_TYPE_P (TREE_TYPE (@0))\n-      && (types_match (type, TREE_TYPE (TREE_TYPE (@0)))\n+      && tree_fits_uhwi_p (TYPE_SIZE (type))\n+      && ((tree_to_uhwi (TYPE_SIZE (type))\n+\t   == tree_to_uhwi (TYPE_SIZE (TREE_TYPE (TREE_TYPE (@0)))))\n           || (VECTOR_TYPE_P (type)\n-\t      && types_match (TREE_TYPE (type), TREE_TYPE (TREE_TYPE (@0))))))\n+\t      && (tree_to_uhwi (TYPE_SIZE (TREE_TYPE (type)))\n+\t\t  == tree_to_uhwi (TYPE_SIZE (TREE_TYPE (TREE_TYPE (@0))))))))\n   (with\n    {\n      tree ctor = (TREE_CODE (@0) == SSA_NAME\n@@ -6226,10 +6229,15 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t  if (!CONSTANT_CLASS_P (e))\n \t\t    constant_p = false;\n \t\t}\n-\t      res = (constant_p ? build_vector_from_ctor (type, vals)\n-\t\t     : build_constructor (type, vals));\n+\t      tree evtype = (types_match (TREE_TYPE (type),\n+\t\t\t\t\t  TREE_TYPE (TREE_TYPE (ctor)))\n+\t\t\t     ? type\n+\t\t\t     : build_vector_type (TREE_TYPE (TREE_TYPE (ctor)),\n+\t\t\t\t\t\t  count));\n+\t      res = (constant_p ? build_vector_from_ctor (evtype, vals)\n+\t\t     : build_constructor (evtype, vals));\n \t    }\n-\t    { res; })))))\n+\t    (view_convert { res; }))))))\n       /* The bitfield references a single constructor element.  */\n       (if (k.is_constant (&const_k)\n \t   && idx + n <= (idx / const_k + 1) * const_k)"}, {"sha": "4999a3b66ab79173782ea022fa5607284a05040b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-91.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6bb80931b429631f63e0fd27bee95f32eb57a9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-91.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6bb80931b429631f63e0fd27bee95f32eb57a9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-91.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-91.c?ref=7d6bb80931b429631f63e0fd27bee95f32eb57a9", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-fre4\" } */\n+\n+extern void foo(void);\n+\n+static int a[2], b, *c[2];\n+\n+int main() {\n+  for (b = 0; b < 2; b++)\n+    c[b] = &a[1];\n+  if (!c[0])\n+    foo();\n+  return 0;\n+}\n+\n+/* Even when vectorizing we should eliminate the call to foo.  */\n+/* { dg-final { scan-tree-dump-not \"foo\" \"fre4\" } } */"}]}