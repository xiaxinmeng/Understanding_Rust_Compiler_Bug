{"sha": "05f9c67507bd614e1fa1e5184a855a8257bc04fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVmOWM2NzUwN2JkNjE0ZTFmYTFlNTE4NGE4NTVhODI1N2JjMDRmZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-11-19T08:18:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-11-19T08:18:53Z"}, "message": "re PR rtl-optimization/63843 (wrong code generation at -O1 and higher)\n\n\tPR rtl-optimization/63843\n\t* simplify-rtx.c (simplify_binary_operation_1) <case ASHIFTRT>: For\n\toptimization of ashiftrt of subreg of lshiftrt, check that code\n\tis ASHIFTRT.\n\n\t* gcc.c-torture/execute/pr63843.c: New test.\n\nFrom-SVN: r217753", "tree": {"sha": "add405212855dc07bdc60d4afe8c74e3fe7767ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/add405212855dc07bdc60d4afe8c74e3fe7767ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05f9c67507bd614e1fa1e5184a855a8257bc04fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f9c67507bd614e1fa1e5184a855a8257bc04fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f9c67507bd614e1fa1e5184a855a8257bc04fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f9c67507bd614e1fa1e5184a855a8257bc04fe/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26c87b1a648dce3764f9efdb56c75dcf953413c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26c87b1a648dce3764f9efdb56c75dcf953413c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26c87b1a648dce3764f9efdb56c75dcf953413c5"}], "stats": {"total": 116, "additions": 79, "deletions": 37}, "files": [{"sha": "b1bb78ffb0e745df257a7d201c12afd662d1a1eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f9c67507bd614e1fa1e5184a855a8257bc04fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f9c67507bd614e1fa1e5184a855a8257bc04fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05f9c67507bd614e1fa1e5184a855a8257bc04fe", "patch": "@@ -1,3 +1,10 @@\n+2014-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/63843\n+\t* simplify-rtx.c (simplify_binary_operation_1) <case ASHIFTRT>: For\n+\toptimization of ashiftrt of subreg of lshiftrt, check that code\n+\tis ASHIFTRT.\n+\n 2014-11-18  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* attribs.c (decl_attributes): Remove always true condition,"}, {"sha": "022e36fe7c0323c73404eacc0044dd2cd8caeac4", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 36, "deletions": 37, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f9c67507bd614e1fa1e5184a855a8257bc04fe/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f9c67507bd614e1fa1e5184a855a8257bc04fe/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=05f9c67507bd614e1fa1e5184a855a8257bc04fe", "patch": "@@ -3105,43 +3105,42 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t  && ! side_effects_p (op1))\n \treturn op0;\n       /* Given:\n-         scalar modes M1, M2\n-         scalar constants c1, c2\n-         size (M2) > size (M1)\n-         c1 == size (M2) - size (M1)\n-         optimize:\n-         (ashiftrt:M1 (subreg:M1 (lshiftrt:M2 (reg:M2)\n-                                              (const_int <c1>))\n-                                  <low_part>)\n-                      (const_int <c2>))\n-         to:\n-         (subreg:M1 (ashiftrt:M2 (reg:M2)\n-                                 (const_int <c1 + c2>))\n-          <low_part>).  */\n-      if (!VECTOR_MODE_P (mode)\n-          && SUBREG_P (op0)\n-          && CONST_INT_P (op1)\n-          && (GET_CODE (SUBREG_REG (op0)) == LSHIFTRT)\n-          && !VECTOR_MODE_P (GET_MODE (SUBREG_REG (op0)))\n-          && CONST_INT_P (XEXP (SUBREG_REG (op0), 1))\n-          && (GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (op0)))\n-              > GET_MODE_BITSIZE (mode))\n-          && (INTVAL (XEXP (SUBREG_REG (op0), 1))\n-              == (GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (op0)))\n-                  - GET_MODE_BITSIZE (mode)))\n-          && subreg_lowpart_p (op0))\n-        {\n-          rtx tmp = GEN_INT (INTVAL (XEXP (SUBREG_REG (op0), 1))\n-                             + INTVAL (op1));\n-          machine_mode inner_mode = GET_MODE (SUBREG_REG (op0));\n-          tmp = simplify_gen_binary (ASHIFTRT,\n-                                     GET_MODE (SUBREG_REG (op0)),\n-                                     XEXP (SUBREG_REG (op0), 0),\n-                                     tmp);\n-          return simplify_gen_subreg (mode, tmp, inner_mode,\n-                                      subreg_lowpart_offset (mode,\n-                                                             inner_mode));\n-        }\n+\t scalar modes M1, M2\n+\t scalar constants c1, c2\n+\t size (M2) > size (M1)\n+\t c1 == size (M2) - size (M1)\n+\t optimize:\n+\t (ashiftrt:M1 (subreg:M1 (lshiftrt:M2 (reg:M2) (const_int <c1>))\n+\t\t\t\t <low_part>)\n+\t\t      (const_int <c2>))\n+\t to:\n+\t (subreg:M1 (ashiftrt:M2 (reg:M2) (const_int <c1 + c2>))\n+\t\t    <low_part>).  */\n+      if (code == ASHIFTRT\n+\t  && !VECTOR_MODE_P (mode)\n+\t  && SUBREG_P (op0)\n+\t  && CONST_INT_P (op1)\n+\t  && GET_CODE (SUBREG_REG (op0)) == LSHIFTRT\n+\t  && !VECTOR_MODE_P (GET_MODE (SUBREG_REG (op0)))\n+\t  && CONST_INT_P (XEXP (SUBREG_REG (op0), 1))\n+\t  && (GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (op0)))\n+\t      > GET_MODE_BITSIZE (mode))\n+\t  && (INTVAL (XEXP (SUBREG_REG (op0), 1))\n+\t      == (GET_MODE_BITSIZE (GET_MODE (SUBREG_REG (op0)))\n+\t\t  - GET_MODE_BITSIZE (mode)))\n+\t  && subreg_lowpart_p (op0))\n+\t{\n+\t  rtx tmp = GEN_INT (INTVAL (XEXP (SUBREG_REG (op0), 1))\n+\t\t\t     + INTVAL (op1));\n+\t  machine_mode inner_mode = GET_MODE (SUBREG_REG (op0));\n+\t  tmp = simplify_gen_binary (ASHIFTRT,\n+\t\t\t\t     GET_MODE (SUBREG_REG (op0)),\n+\t\t\t\t     XEXP (SUBREG_REG (op0), 0),\n+\t\t\t\t     tmp);\n+\t  return simplify_gen_subreg (mode, tmp, inner_mode,\n+\t\t\t\t      subreg_lowpart_offset (mode,\n+\t\t\t\t\t\t\t     inner_mode));\n+\t}\n     canonicalize_shift:\n       if (SHIFT_COUNT_TRUNCATED && CONST_INT_P (op1))\n \t{"}, {"sha": "118805c26e19f10ba56bbe747dec0ef4f6dfd430", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f9c67507bd614e1fa1e5184a855a8257bc04fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f9c67507bd614e1fa1e5184a855a8257bc04fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05f9c67507bd614e1fa1e5184a855a8257bc04fe", "patch": "@@ -1,3 +1,8 @@\n+2014-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/63843\n+\t* gcc.c-torture/execute/pr63843.c: New test.\n+\n 2014-11-18  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \tPR target/63937"}, {"sha": "9f6c7b06c391fd70ca2ce76ecccf110a537b77b8", "filename": "gcc/testsuite/gcc.c-torture/execute/pr63843.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f9c67507bd614e1fa1e5184a855a8257bc04fe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr63843.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f9c67507bd614e1fa1e5184a855a8257bc04fe/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr63843.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr63843.c?ref=05f9c67507bd614e1fa1e5184a855a8257bc04fe", "patch": "@@ -0,0 +1,31 @@\n+/* PR rtl-optimization/63843 */\n+\n+static inline __attribute__ ((always_inline))\n+unsigned short foo (unsigned short v)\n+{\n+  return (v << 8) | (v >> 8);\n+}\n+\n+unsigned short __attribute__ ((noinline, noclone, hot))\n+bar (unsigned char *x)\n+{\n+  unsigned int a;\n+  unsigned short b;\n+  __builtin_memcpy (&a, &x[0], sizeof (a));\n+  a ^= 0x80808080U;\n+  __builtin_memcpy (&x[0], &a, sizeof (a));\n+  __builtin_memcpy (&b, &x[2], sizeof (b));\n+  return foo (b);\n+}\n+\n+int\n+main ()\n+{\n+  unsigned char x[8] = { 0x01, 0x01, 0x01, 0x01 };\n+  if (__CHAR_BIT__ == 8\n+      && sizeof (short) == 2\n+      && sizeof (int) == 4\n+      && bar (x) != 0x8181U)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}