{"sha": "ef976be1a23a5171082cf1a569d00573013a175c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY5NzZiZTFhMjNhNTE3MTA4MmNmMWE1NjlkMDA1NzMwMTNhMTc1Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-10-31T11:57:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-31T11:57:33Z"}, "message": "re PR middle-end/70359 (Code size increase for x86/ARM/others compared to gcc-5.3.0)\n\n2018-10-31  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/70359\n\tPR middle-end/86270\n\t* tree-outof-ssa.c (insert_backedge_copies): Restrict\n\tcopy generation to useful cases.  Place the copy before\n\tthe definition of the backedge value when possible.\n\n\t* gcc.target/i386/pr70359.c: New testcase.\n\t* gcc.target/i386/pr86270.c: Likewise.\n\nFrom-SVN: r265677", "tree": {"sha": "782afd083e18def3f782fe1b3164a3d22a3288ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/782afd083e18def3f782fe1b3164a3d22a3288ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef976be1a23a5171082cf1a569d00573013a175c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef976be1a23a5171082cf1a569d00573013a175c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef976be1a23a5171082cf1a569d00573013a175c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef976be1a23a5171082cf1a569d00573013a175c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "635aeaa20ffdf6e794f180cc8e053e8dc46db760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635aeaa20ffdf6e794f180cc8e053e8dc46db760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635aeaa20ffdf6e794f180cc8e053e8dc46db760"}], "stats": {"total": 96, "additions": 89, "deletions": 7}, "files": [{"sha": "1f45354555a378087b9c60bfac6023b51060d564", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef976be1a23a5171082cf1a569d00573013a175c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef976be1a23a5171082cf1a569d00573013a175c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef976be1a23a5171082cf1a569d00573013a175c", "patch": "@@ -1,3 +1,11 @@\n+2018-10-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/70359\n+\tPR middle-end/86270\n+\t* tree-outof-ssa.c (insert_backedge_copies): Restrict\n+\tcopy generation to useful cases.  Place the copy before\n+\tthe definition of the backedge value when possible.\n+\n 2018-10-31  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc-arch.h (ARC_TUNE_ARC7XX): New tune value."}, {"sha": "84923163780405ec01a1548f59c07a40d336a1da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef976be1a23a5171082cf1a569d00573013a175c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef976be1a23a5171082cf1a569d00573013a175c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef976be1a23a5171082cf1a569d00573013a175c", "patch": "@@ -1,3 +1,10 @@\n+2018-10-31  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/70359\n+\tPR middle-end/86270\n+\t* gcc.target/i386/pr70359.c: New testcase.\n+\t* gcc.target/i386/pr86270.c: Likewise.\n+\n 2018-10-31  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/jumptable.c: New test."}, {"sha": "85b7017e386509d0b9d72851ddcb414512862cd2", "filename": "gcc/testsuite/gcc.target/i386/pr70359.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef976be1a23a5171082cf1a569d00573013a175c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70359.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef976be1a23a5171082cf1a569d00573013a175c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70359.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70359.c?ref=ef976be1a23a5171082cf1a569d00573013a175c", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+char* inttostr(int i, char* buf, int len)\n+{\n+  unsigned int ui = (i > 0) ? i : -i;\n+  char *p = buf + len - 1;\n+  *p = '\\0';\n+  do {\n+    *--p = '0' + (ui % 10);\n+  } while ((ui /= 10) != 0);\n+  if (i < 0) {\n+    *--p = '-';\n+  }\n+  return p;\n+}\n+\n+/* In out-of-SSA we should have avoided splitting the latch edge of the\n+   loop by inserting copies.  */\n+/* { dg-final { scan-assembler-times \"L\\[0-9\\]+:\" 2 } } */"}, {"sha": "81841ef5bd70e4ea4ad103fda6f1131f47703098", "filename": "gcc/testsuite/gcc.target/i386/pr86270.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef976be1a23a5171082cf1a569d00573013a175c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86270.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef976be1a23a5171082cf1a569d00573013a175c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86270.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr86270.c?ref=ef976be1a23a5171082cf1a569d00573013a175c", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int *a;\n+long len;\n+\n+int\n+test ()\n+{\n+  for (int i = 0; i < len + 1; i++)\n+    a[i]=i;\n+}\n+\n+/* Check we do not split the backedge but keep nice loop form.  */\n+/* { dg-final { scan-assembler-times \"L\\[0-9\\]+:\" 2 } } */"}, {"sha": "60f3c40ba7ddd6a0fb68f2f2bc8e676efdf40993", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef976be1a23a5171082cf1a569d00573013a175c/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef976be1a23a5171082cf1a569d00573013a175c/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=ef976be1a23a5171082cf1a569d00573013a175c", "patch": "@@ -1171,15 +1171,19 @@ insert_backedge_copies (void)\n \t    {\n \t      tree arg = gimple_phi_arg_def (phi, i);\n \t      edge e = gimple_phi_arg_edge (phi, i);\n+\t      /* We are only interested in copies emitted on critical\n+                 backedges.  */\n+\t      if (!(e->flags & EDGE_DFS_BACK)\n+\t\t  || !EDGE_CRITICAL_P (e))\n+\t\tcontinue;\n \n \t      /* If the argument is not an SSA_NAME, then we will need a\n-\t\t constant initialization.  If the argument is an SSA_NAME with\n-\t\t a different underlying variable then a copy statement will be\n-\t\t needed.  */\n-\t      if ((e->flags & EDGE_DFS_BACK)\n-\t\t  && (TREE_CODE (arg) != SSA_NAME\n-\t\t      || SSA_NAME_VAR (arg) != SSA_NAME_VAR (result)\n-\t\t      || trivially_conflicts_p (bb, result, arg)))\n+\t\t constant initialization.  If the argument is an SSA_NAME then\n+\t\t a copy statement may be needed.  First handle the case\n+\t\t where we cannot insert before the argument definition.  */\n+\t      if (TREE_CODE (arg) != SSA_NAME\n+\t\t  || (gimple_code (SSA_NAME_DEF_STMT (arg)) == GIMPLE_PHI\n+\t\t      && trivially_conflicts_p (bb, result, arg)))\n \t\t{\n \t\t  tree name;\n \t\t  gassign *stmt;\n@@ -1226,6 +1230,34 @@ insert_backedge_copies (void)\n \t\t    gsi_insert_after (&gsi2, stmt, GSI_NEW_STMT);\n \t\t  SET_PHI_ARG_DEF (phi, i, name);\n \t\t}\n+\t      /* Insert a copy before the definition of the backedge value\n+\t\t and adjust all conflicting uses.  */\n+\t      else if (trivially_conflicts_p (bb, result, arg))\n+\t\t{\n+\t\t  gimple *def = SSA_NAME_DEF_STMT (arg);\n+\t\t  if (gimple_nop_p (def)\n+\t\t      || gimple_code (def) == GIMPLE_PHI)\n+\t\t    continue;\n+\t\t  tree name = copy_ssa_name (result);\n+\t\t  gimple *stmt = gimple_build_assign (name, result);\n+\t\t  imm_use_iterator imm_iter;\n+\t\t  gimple *use_stmt;\n+\t\t  /* The following matches trivially_conflicts_p.  */\n+\t\t  FOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, result)\n+\t\t    {\n+\t\t      if (gimple_bb (use_stmt) != bb\n+\t\t\t  || (gimple_code (use_stmt) != GIMPLE_PHI\n+\t\t\t      && (maybe_renumber_stmts_bb (bb), true)\n+\t\t\t      && gimple_uid (use_stmt) > gimple_uid (def)))\n+\t\t\t{\n+\t\t\t  use_operand_p use;\n+\t\t\t  FOR_EACH_IMM_USE_ON_STMT (use, imm_iter)\n+\t\t\t    SET_USE (use, name);\n+\t\t\t}\n+\t\t    }\n+\t\t  gimple_stmt_iterator gsi = gsi_for_stmt (def);\n+\t\t  gsi_insert_before (&gsi, stmt, GSI_SAME_STMT);\n+\t\t}\n \t    }\n \t}\n "}]}