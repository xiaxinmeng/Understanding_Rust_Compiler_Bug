{"sha": "6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkwMWVhNjI1YjQ3M2ZkMGYxMzE5NGJjYWFmMmExZjlhYzQ1OGQ2Mg==", "commit": {"author": {"name": "Andrew Senkevich", "email": "andrew.senkevich@intel.com", "date": "2016-12-05T17:18:42Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-12-05T17:18:42Z"}, "message": "Add AVX512 k-mask intrinsics\n\ngcc/\n\n2016-12-05  Andrew Senkevich  <andrew.senkevich@intel.com>\n\n\t* config/i386/avx512bwintrin.h: Add new k-mask intrinsics.\n\t* config/i386/avx512dqintrin.h: Ditto.\n\t* config/i386/avx512fintrin.h: Ditto.\n\t* config/i386/i386-builtin-types.def (UCHAR_FTYPE_UQI_UQI_PUCHAR,\n\tUCHAR_FTYPE_UHI_UHI_PUCHAR, UCHAR_FTYPE_USI_USI_PUCHAR,\n\tUCHAR_FTYPE_UDI_UDI_PUCHAR, UCHAR_FTYPE_UQI_UQI, UCHAR_FTYPE_UHI_UHI,\n\tUCHAR_FTYPE_USI_USI, UCHAR_FTYPE_UDI_UDI, UQI_FTYPE_UQI_INT,\n\tUHI_FTYPE_UHI_INT, USI_FTYPE_USI_INT, UDI_FTYPE_UDI_INT,\n\tUQI_FTYPE_UQI, USI_FTYPE_USI, UDI_FTYPE_UDI, UQI_FTYPE_UQI_UQI): New\n\tfunction types.\n\t* config/i386/i386-builtin.def (__builtin_ia32_knotqi,\n\t__builtin_ia32_knotsi, __builtin_ia32_knotdi,\n\t__builtin_ia32_korqi, __builtin_ia32_korsi, __builtin_ia32_kordi,\n\t__builtin_ia32_kxnorqi, __builtin_ia32_kxnorsi,\n\t__builtin_ia32_kxnordi, __builtin_ia32_kxorqi, __builtin_ia32_kxorsi,\n\t__builtin_ia32_kxordi, __builtin_ia32_kandqi,\n\t__builtin_ia32_kandsi, __builtin_ia32_kanddi, __builtin_ia32_kandnqi,\n\t__builtin_ia32_kandnsi, __builtin_ia32_kandndi): New.\n\t* config/i386/i386.c (ix86_expand_args_builtin): Handle new types.\n\ngcc/testsuite/\n\n2016-12-05  Andrew Senkevich  <andrew.senkevich@intel.com>\n\n\t* gcc.target/i386/avx512bw-kandd-1.c: New.\n\t* gcc.target/i386/avx512bw-kandnd-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-kandnq-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-kandq-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-knotd-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-knotq-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-kord-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-korq-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-kunpckdq-3.c: Ditto.\n\t* gcc.target/i386/avx512bw-kunpckwd-3.c: Ditto.\n\t* gcc.target/i386/avx512bw-kxnord-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-kxnorq-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-kxord-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-kxorq-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-kandb-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-kandnb-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-knotb-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-korb-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-kxnorb-1.c: Ditto.\n\t* gcc.target/i386/avx512dq-kxorb-1.c: Ditto.\n\t* gcc.target/i386/avx512f-kunpckbw-3.c: Ditto.\n\t* gcc.target/i386/avx512f-kandnw-1.c: Removed unneeded check.\n\nFrom-SVN: r243265", "tree": {"sha": "c5a3f530de27935be2a3bd2546f992b7557ca461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5a3f530de27935be2a3bd2546f992b7557ca461"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/comments", "author": null, "committer": null, "parents": [{"sha": "a80b4f579a10d01a6cfdfff37150cfccd134dc41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a80b4f579a10d01a6cfdfff37150cfccd134dc41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a80b4f579a10d01a6cfdfff37150cfccd134dc41"}], "stats": {"total": 637, "additions": 635, "deletions": 2}, "files": [{"sha": "02d560d1910b3ee739c00d897d593a8ba23cb9e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -1,3 +1,25 @@\n+2016-12-05  Andrew Senkevich  <andrew.senkevich@intel.com>\n+\n+\t* config/i386/avx512bwintrin.h: Add new k-mask intrinsics.\n+\t* config/i386/avx512dqintrin.h: Ditto.\n+\t* config/i386/avx512fintrin.h: Ditto.\n+\t* config/i386/i386-builtin-types.def (UCHAR_FTYPE_UQI_UQI_PUCHAR,\n+\tUCHAR_FTYPE_UHI_UHI_PUCHAR, UCHAR_FTYPE_USI_USI_PUCHAR,\n+\tUCHAR_FTYPE_UDI_UDI_PUCHAR, UCHAR_FTYPE_UQI_UQI, UCHAR_FTYPE_UHI_UHI,\n+\tUCHAR_FTYPE_USI_USI, UCHAR_FTYPE_UDI_UDI, UQI_FTYPE_UQI_INT,\n+\tUHI_FTYPE_UHI_INT, USI_FTYPE_USI_INT, UDI_FTYPE_UDI_INT,\n+\tUQI_FTYPE_UQI, USI_FTYPE_USI, UDI_FTYPE_UDI, UQI_FTYPE_UQI_UQI): New\n+\tfunction types.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_knotqi,\n+\t__builtin_ia32_knotsi, __builtin_ia32_knotdi,\n+\t__builtin_ia32_korqi, __builtin_ia32_korsi, __builtin_ia32_kordi,\n+\t__builtin_ia32_kxnorqi, __builtin_ia32_kxnorsi,\n+\t__builtin_ia32_kxnordi, __builtin_ia32_kxorqi, __builtin_ia32_kxorsi,\n+\t__builtin_ia32_kxordi, __builtin_ia32_kandqi,\n+\t__builtin_ia32_kandsi, __builtin_ia32_kanddi, __builtin_ia32_kandnqi,\n+\t__builtin_ia32_kandnsi, __builtin_ia32_kandndi): New.\n+\t* config/i386/i386.c (ix86_expand_args_builtin): Handle new types.\n+\n 2016-12-05  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* combine.c: Revert r243162."}, {"sha": "9e6e0ce9b11cb7f24c6080034b7b0549e3da034d", "filename": "gcc/config/i386/avx512bwintrin.h", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -40,6 +40,90 @@ typedef char __v64qi __attribute__ ((__vector_size__ (64)));\n \n typedef unsigned long long __mmask64;\n \n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_knot_mask32 (__mmask32 __A)\n+{\n+  return (__mmask32) __builtin_ia32_knotsi ((__mmask32) __A);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_knot_mask64 (__mmask64 __A)\n+{\n+  return (__mmask64) __builtin_ia32_knotdi ((__mmask64) __A);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kor_mask32 (__mmask32 __A, __mmask32 __B)\n+{\n+  return (__mmask32) __builtin_ia32_korsi ((__mmask32) __A, (__mmask32) __B);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kor_mask64 (__mmask64 __A, __mmask64 __B)\n+{\n+  return (__mmask64) __builtin_ia32_kordi ((__mmask64) __A, (__mmask64) __B);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kxnor_mask32 (__mmask32 __A, __mmask32 __B)\n+{\n+  return (__mmask32) __builtin_ia32_kxnorsi ((__mmask32) __A, (__mmask32) __B);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kxnor_mask64 (__mmask64 __A, __mmask64 __B)\n+{\n+  return (__mmask64) __builtin_ia32_kxnordi ((__mmask64) __A, (__mmask64) __B);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kxor_mask32 (__mmask32 __A, __mmask32 __B)\n+{\n+  return (__mmask32) __builtin_ia32_kxorsi ((__mmask32) __A, (__mmask32) __B);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kxor_mask64 (__mmask64 __A, __mmask64 __B)\n+{\n+  return (__mmask64) __builtin_ia32_kxordi ((__mmask64) __A, (__mmask64) __B);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kand_mask32 (__mmask32 __A, __mmask32 __B)\n+{\n+  return (__mmask32) __builtin_ia32_kandsi ((__mmask32) __A, (__mmask32) __B);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kand_mask64 (__mmask64 __A, __mmask64 __B)\n+{\n+  return (__mmask64) __builtin_ia32_kanddi ((__mmask64) __A, (__mmask64) __B);\n+}\n+\n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kandn_mask32 (__mmask32 __A, __mmask32 __B)\n+{\n+  return (__mmask32) __builtin_ia32_kandnsi ((__mmask32) __A, (__mmask32) __B);\n+}\n+\n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kandn_mask64 (__mmask64 __A, __mmask64 __B)\n+{\n+  return (__mmask64) __builtin_ia32_kandndi ((__mmask64) __A, (__mmask64) __B);\n+}\n+\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_mov_epi16 (__m512i __W, __mmask32 __U, __m512i __A)\n@@ -114,6 +198,14 @@ _mm512_kunpackw (__mmask32 __A, __mmask32 __B)\n \t\t\t\t\t      (__mmask32) __B);\n }\n \n+extern __inline __mmask32\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kunpackw_mask32 (__mmask16 __A, __mmask16 __B)\n+{\n+  return (__mmask32) __builtin_ia32_kunpcksi ((__mmask32) __A,\n+\t\t\t\t\t      (__mmask32) __B);\n+}\n+\n extern __inline __mmask64\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_kunpackd (__mmask64 __A, __mmask64 __B)\n@@ -122,6 +214,14 @@ _mm512_kunpackd (__mmask64 __A, __mmask64 __B)\n \t\t\t\t\t      (__mmask64) __B);\n }\n \n+extern __inline __mmask64\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kunpackd_mask64 (__mmask32 __A, __mmask32 __B)\n+{\n+  return (__mmask64) __builtin_ia32_kunpckdi ((__mmask64) __A,\n+\t\t\t\t\t      (__mmask64) __B);\n+}\n+\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_loadu_epi8 (__m512i __W, __mmask64 __U, void const *__P)"}, {"sha": "d2405c3ebf6a9173ca67a74ffafe27c4bac495f5", "filename": "gcc/config/i386/avx512dqintrin.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512dqintrin.h?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -34,6 +34,48 @@\n #define __DISABLE_AVX512DQ__\n #endif /* __AVX512DQ__ */\n \n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_knot_mask8 (__mmask8 __A)\n+{\n+  return (__mmask8) __builtin_ia32_knotqi ((__mmask8) __A);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kor_mask8 (__mmask8 __A, __mmask8 __B)\n+{\n+  return (__mmask8) __builtin_ia32_korqi ((__mmask8) __A, (__mmask8) __B);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kxnor_mask8 (__mmask8 __A, __mmask8 __B)\n+{\n+  return (__mmask8) __builtin_ia32_kxnorqi ((__mmask8) __A, (__mmask8) __B);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kxor_mask8 (__mmask8 __A, __mmask8 __B)\n+{\n+  return (__mmask8) __builtin_ia32_kxorqi ((__mmask8) __A, (__mmask8) __B);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kand_mask8 (__mmask8 __A, __mmask8 __B)\n+{\n+  return (__mmask8) __builtin_ia32_kandqi ((__mmask8) __A, (__mmask8) __B);\n+}\n+\n+extern __inline __mmask8\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kandn_mask8 (__mmask8 __A, __mmask8 __B)\n+{\n+  return (__mmask8) __builtin_ia32_kandnqi ((__mmask8) __A, (__mmask8) __B);\n+}\n+\n extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_broadcast_f64x2 (__m128d __A)"}, {"sha": "ab1704bbfed0197ef50948c1230dea86bc228005", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -9977,6 +9977,13 @@ _mm512_maskz_expandloadu_epi32 (__mmask16 __U, void const *__P)\n }\n \n /* Mask arithmetic operations */\n+#define _kand_mask16 _mm512_kand\n+#define _kandn_mask16 _mm512_kandn\n+#define _knot_mask16 _mm512_knot\n+#define _kor_mask16 _mm512_kor\n+#define _kxnor_mask16 _mm512_kxnor\n+#define _kxor_mask16 _mm512_kxor\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_kand (__mmask16 __A, __mmask16 __B)\n@@ -9988,7 +9995,8 @@ extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_kandn (__mmask16 __A, __mmask16 __B)\n {\n-  return (__mmask16) __builtin_ia32_kandnhi ((__mmask16) __A, (__mmask16) __B);\n+  return (__mmask16) __builtin_ia32_kandnhi ((__mmask16) __A,\n+\t\t\t\t\t     (__mmask16) __B);\n }\n \n extern __inline __mmask16\n@@ -10042,6 +10050,13 @@ _mm512_kunpackb (__mmask16 __A, __mmask16 __B)\n   return (__mmask16) __builtin_ia32_kunpckhi ((__mmask16) __A, (__mmask16) __B);\n }\n \n+extern __inline __mmask16\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_kunpackb_mask16 (__mmask8 __A, __mmask8 __B)\n+{\n+  return (__mmask16) __builtin_ia32_kunpckhi ((__mmask16) __A, (__mmask16) __B);\n+}\n+\n #ifdef __OPTIMIZE__\n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))"}, {"sha": "6e938ebf2845e397d14e1ecb2218516a6ed73581", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -139,6 +139,12 @@ DEF_POINTER_TYPE (PLONGLONG, LONGLONG)\n DEF_POINTER_TYPE (PULONGLONG, ULONGLONG)\n DEF_POINTER_TYPE (PUNSIGNED, UNSIGNED)\n \n+DEF_POINTER_TYPE (PUQI, UQI)\n+DEF_POINTER_TYPE (PUHI, UHI)\n+DEF_POINTER_TYPE (PUSI, USI)\n+DEF_POINTER_TYPE (PUDI, UDI)\n+DEF_POINTER_TYPE (PUCHAR, UCHAR)\n+\n DEF_POINTER_TYPE (PV2SI, V2SI)\n DEF_POINTER_TYPE (PV2DF, V2DF)\n DEF_POINTER_TYPE (PV2DI, V2DI)\n@@ -536,7 +542,28 @@ DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, V16SI, V16SI, V16SI, PCV4SI)\n \n \n # Instructions returning mask\n+DEF_FUNCTION_TYPE (UCHAR, UQI, UQI, PUCHAR)\n+DEF_FUNCTION_TYPE (UCHAR, UQI, UQI)\n+DEF_FUNCTION_TYPE (UCHAR, UHI, UHI, PUCHAR)\n+DEF_FUNCTION_TYPE (UCHAR, UHI, UHI)\n+DEF_FUNCTION_TYPE (UCHAR, USI, USI, PUCHAR)\n+DEF_FUNCTION_TYPE (UCHAR, USI, USI)\n+DEF_FUNCTION_TYPE (UCHAR, UDI, UDI, PUCHAR)\n+DEF_FUNCTION_TYPE (UCHAR, UDI, UDI)\n+\n+DEF_FUNCTION_TYPE (USI, UQI)\n+DEF_FUNCTION_TYPE (USI, UHI)\n+DEF_FUNCTION_TYPE (UQI, USI)\n+DEF_FUNCTION_TYPE (UHI, USI)\n+\n+DEF_FUNCTION_TYPE (UQI, UQI, INT)\n+DEF_FUNCTION_TYPE (UHI, UHI, INT)\n+DEF_FUNCTION_TYPE (USI, USI, INT)\n+DEF_FUNCTION_TYPE (UDI, UDI, INT)\n+DEF_FUNCTION_TYPE (UQI, UQI)\n DEF_FUNCTION_TYPE (UHI, UHI)\n+DEF_FUNCTION_TYPE (USI, USI)\n+DEF_FUNCTION_TYPE (UDI, UDI)\n DEF_FUNCTION_TYPE (UHI, V16QI)\n DEF_FUNCTION_TYPE (USI, V32QI)\n DEF_FUNCTION_TYPE (UDI, V64QI)\n@@ -549,6 +576,7 @@ DEF_FUNCTION_TYPE (UHI, V16SI)\n DEF_FUNCTION_TYPE (UQI, V2DI)\n DEF_FUNCTION_TYPE (UQI, V4DI)\n DEF_FUNCTION_TYPE (UQI, V8DI)\n+DEF_FUNCTION_TYPE (UQI, UQI, UQI)\n DEF_FUNCTION_TYPE (UHI, UHI, UHI)\n DEF_FUNCTION_TYPE (USI, USI, USI)\n DEF_FUNCTION_TYPE (UDI, UDI, UDI)"}, {"sha": "83a508909babb641329b0fa838fcf29d515d7177", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -1436,15 +1436,33 @@ BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_roundpd_vec_pack_sfix512, \"__bu\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_roundpd_vec_pack_sfix512, \"__builtin_ia32_ceilpd_vec_pack_sfix512\", IX86_BUILTIN_CEILPD_VEC_PACK_SFIX512, (enum rtx_code) ROUND_CEIL, (int) V16SI_FTYPE_V8DF_V8DF_ROUND)\n \n /* Mask arithmetic operations */\n+BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_kandqi, \"__builtin_ia32_kandqi\", IX86_BUILTIN_KAND8, UNKNOWN, (int) UQI_FTYPE_UQI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kandhi, \"__builtin_ia32_kandhi\", IX86_BUILTIN_KAND16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kandsi, \"__builtin_ia32_kandsi\", IX86_BUILTIN_KAND32, UNKNOWN, (int) USI_FTYPE_USI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kanddi, \"__builtin_ia32_kanddi\", IX86_BUILTIN_KAND64, UNKNOWN, (int) UDI_FTYPE_UDI_UDI)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_kandnqi, \"__builtin_ia32_kandnqi\", IX86_BUILTIN_KANDN8, UNKNOWN, (int) UQI_FTYPE_UQI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kandnhi, \"__builtin_ia32_kandnhi\", IX86_BUILTIN_KANDN16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kandnsi, \"__builtin_ia32_kandnsi\", IX86_BUILTIN_KANDN32, UNKNOWN, (int) USI_FTYPE_USI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kandndi, \"__builtin_ia32_kandndi\", IX86_BUILTIN_KANDN64, UNKNOWN, (int) UDI_FTYPE_UDI_UDI)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_knotqi, \"__builtin_ia32_knotqi\", IX86_BUILTIN_KNOT8, UNKNOWN, (int) UQI_FTYPE_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_knothi, \"__builtin_ia32_knothi\", IX86_BUILTIN_KNOT16, UNKNOWN, (int) UHI_FTYPE_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_knotsi, \"__builtin_ia32_knotsi\", IX86_BUILTIN_KNOT32, UNKNOWN, (int) USI_FTYPE_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_knotdi, \"__builtin_ia32_knotdi\", IX86_BUILTIN_KNOT64, UNKNOWN, (int) UDI_FTYPE_UDI)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_kiorqi, \"__builtin_ia32_korqi\", IX86_BUILTIN_KOR8, UNKNOWN, (int) UQI_FTYPE_UQI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kiorhi, \"__builtin_ia32_korhi\", IX86_BUILTIN_KOR16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kiorsi, \"__builtin_ia32_korsi\", IX86_BUILTIN_KOR32, UNKNOWN, (int) USI_FTYPE_USI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kiordi, \"__builtin_ia32_kordi\", IX86_BUILTIN_KOR64, UNKNOWN, (int) UDI_FTYPE_UDI_UDI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kortestchi, \"__builtin_ia32_kortestchi\", IX86_BUILTIN_KORTESTC16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kortestzhi, \"__builtin_ia32_kortestzhi\", IX86_BUILTIN_KORTESTZ16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kunpckhi, \"__builtin_ia32_kunpckhi\", IX86_BUILTIN_KUNPCKBW, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_kxnorqi, \"__builtin_ia32_kxnorqi\", IX86_BUILTIN_KXNOR8, UNKNOWN, (int) UQI_FTYPE_UQI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kxnorhi, \"__builtin_ia32_kxnorhi\", IX86_BUILTIN_KXNOR16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kxnorsi, \"__builtin_ia32_kxnorsi\", IX86_BUILTIN_KXNOR32, UNKNOWN, (int) USI_FTYPE_USI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kxnordi, \"__builtin_ia32_kxnordi\", IX86_BUILTIN_KXNOR64, UNKNOWN, (int) UDI_FTYPE_UDI_UDI)\n+BDESC (OPTION_MASK_ISA_AVX512DQ, CODE_FOR_kxorqi, \"__builtin_ia32_kxorqi\", IX86_BUILTIN_KXOR8, UNKNOWN, (int) UQI_FTYPE_UQI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kxorhi, \"__builtin_ia32_kxorhi\", IX86_BUILTIN_KXOR16, UNKNOWN, (int) UHI_FTYPE_UHI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kxorsi, \"__builtin_ia32_kxorsi\", IX86_BUILTIN_KXOR32, UNKNOWN, (int) USI_FTYPE_USI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_kxordi, \"__builtin_ia32_kxordi\", IX86_BUILTIN_KXOR64, UNKNOWN, (int) UDI_FTYPE_UDI_UDI)\n BDESC (OPTION_MASK_ISA_AVX512F, CODE_FOR_kmovw, \"__builtin_ia32_kmov16\", IX86_BUILTIN_KMOV16, UNKNOWN, (int) UHI_FTYPE_UHI)\n \n /* SHA */"}, {"sha": "003439fb68eeae126aa902794efdecdfb83630e0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -34842,7 +34842,12 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V4DI_FTYPE_V8HI:\n     case V4DI_FTYPE_V4SI:\n     case V4DI_FTYPE_V2DI:\n+    case UQI_FTYPE_UQI:\n     case UHI_FTYPE_UHI:\n+    case USI_FTYPE_USI:\n+    case USI_FTYPE_UQI:\n+    case USI_FTYPE_UHI:\n+    case UDI_FTYPE_UDI:\n     case UHI_FTYPE_V16QI:\n     case USI_FTYPE_V32QI:\n     case UDI_FTYPE_V64QI:\n@@ -34976,6 +34981,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case UINT_FTYPE_UINT_UCHAR:\n     case UINT16_FTYPE_UINT16_INT:\n     case UINT8_FTYPE_UINT8_INT:\n+    case UQI_FTYPE_UQI_UQI:\n     case UHI_FTYPE_UHI_UHI:\n     case USI_FTYPE_USI_USI:\n     case UDI_FTYPE_UDI_UDI:\n@@ -35023,6 +35029,10 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V4DI_FTYPE_V8DI_INT:\n     case QI_FTYPE_V4SF_INT:\n     case QI_FTYPE_V2DF_INT:\n+    case UQI_FTYPE_UQI_INT:\n+    case UHI_FTYPE_UHI_INT:\n+    case USI_FTYPE_USI_INT:\n+    case UDI_FTYPE_UDI_INT:\n       nargs = 2;\n       nargs_constant = 1;\n       break;"}, {"sha": "3b0a8fae0794bae94952a501db292974d7916e46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -1,3 +1,28 @@\n+2016-12-05  Andrew Senkevich  <andrew.senkevich@intel.com>\n+\n+\t* gcc.target/i386/avx512bw-kandd-1.c: New.\n+\t* gcc.target/i386/avx512bw-kandnd-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kandnq-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kandq-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-knotd-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-knotq-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kord-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-korq-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kunpckdq-3.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kunpckwd-3.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kxnord-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kxnorq-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kxord-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-kxorq-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-kandb-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-kandnb-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-knotb-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-korb-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-kxnorb-1.c: Ditto.\n+\t* gcc.target/i386/avx512dq-kxorb-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-kunpckbw-3.c: Ditto.\n+\t* gcc.target/i386/avx512f-kandnw-1.c: Removed unneeded check.\n+\n 2016-12-05  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* gcc.dg/fold-and-lshift.c, gcc.dg/fold-and-rshift-1.c,"}, {"sha": "2a934f562f9683efbf9c9bdd041cca74c5404162", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kandd-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kandd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kandd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kandd-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kandd\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask32 k1, k2, k3;\n+  volatile __m512i x = _mm512_setzero_epi32();\n+\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kand_mask32 (k1, k2);\n+  x = _mm512_mask_add_epi16 (x, k3, x, x);\n+}"}, {"sha": "69cbe043f509221b52329f213efff0c93faf355c", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kandnd-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kandnd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kandnd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kandnd-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kandnd\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask32 k1, k2, k3;\n+  volatile __m512i x = _mm512_setzero_si512 ();\n+\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kandn_mask32 (k1, k2);\n+  x = _mm512_mask_add_epi16 (x, k3, x, x);\n+}"}, {"sha": "e8b7a5f9aa2166511b8e477a941c6c1a9471ca3a", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kandnq-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kandnq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kandnq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kandnq-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kandnq\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask64 k1, k2, k3;\n+  volatile __m512i x = _mm512_setzero_si512 ();\n+\n+  __asm__( \"kmovq %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovq %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kandn_mask64 (k1, k2);\n+  x = _mm512_mask_add_epi8 (x, k3, x, x);\n+}"}, {"sha": "a1aaed67c66c60bd59799f353022e970f4a1087d", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kandq-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kandq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kandq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kandq-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kandq\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask64 k1, k2, k3;\n+  volatile __m512i x = _mm512_setzero_epi32();\n+\n+  __asm__( \"kmovq %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovq %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kand_mask64 (k1, k2);\n+  x = _mm512_mask_add_epi8 (x, k3, x, x);\n+}"}, {"sha": "8a7e033826b360fccdf9f4c31363885c58e939cd", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-knotd-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-knotd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-knotd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-knotd-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"knotd\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask32 k1, k2;\n+  volatile __m512i x = _mm512_setzero_si512 ();\n+\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k1) : \"r\" (45) );\n+\n+  k2 = _knot_mask32 (k1);\n+  x = _mm512_mask_add_epi16 (x, k1, x, x);\n+  x = _mm512_mask_add_epi16 (x, k2, x, x);\n+}"}, {"sha": "deb65795760044545c4b6ec8aab0828598f8726a", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-knotq-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-knotq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-knotq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-knotq-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"knotq\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask64 k1, k2;\n+  volatile __m512i x = _mm512_setzero_si512 ();\n+\n+  __asm__( \"kmovq %1, %0\" : \"=k\" (k1) : \"r\" (45) );\n+\n+  k2 = _knot_mask64 (k1);\n+  x = _mm512_mask_add_epi8 (x, k1, x, x);\n+  x = _mm512_mask_add_epi8 (x, k2, x, x);\n+}"}, {"sha": "4c35a816e904ec568fffa630dd0fe683982263ac", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kord-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kord-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kord-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kord-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kord\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask32 k1, k2, k3;\n+  volatile __m512i x = _mm512_setzero_si512 ();\n+\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kor_mask32 (k1, k2);\n+  x = _mm512_mask_add_epi16 (x, k3, x, x);\n+}"}, {"sha": "89753f02340c436d88a00045d4fd95e434191cd7", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-korq-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-korq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-korq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-korq-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"korq\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask64 k1, k2, k3;\n+  volatile __m512i x = _mm512_setzero_si512 ();\n+\n+  __asm__( \"kmovq %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovq %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kor_mask64 (k1, k2);\n+  x = _mm512_mask_add_epi8 (x, k3, x, x);\n+}"}, {"sha": "951260f429b28fb517457277fcd33294d93ccdfc", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kunpckdq-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckdq-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckdq-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckdq-3.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kunpckdq\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test () {\n+  volatile __mmask64 k3;\n+  __mmask32 k1, k2;\n+\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kunpackd_mask64 (k1, k2);\n+}"}, {"sha": "c68ad8cc1f75f282a5fbb42c203140bf7dbea39b", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kunpckwd-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckwd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckwd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kunpckwd-3.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kunpckwd\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[1-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test () {\n+  volatile __mmask32 k3;\n+  __mmask16 k1, k2;\n+\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovw %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kunpackw_mask32 (k1, k2);\n+}"}, {"sha": "d93d61e113b2acc0dbf0f413d8fd016ef6c1574d", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kxnord-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kxnord-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kxnord-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kxnord-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kxnord\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask32 k1, k2, k3;\n+  volatile __m512i x = _mm512_setzero_si512 ();\n+\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kxnor_mask32 (k1, k2);\n+  x = _mm512_mask_add_epi16 (x, k3, x, x);\n+}"}, {"sha": "ba72e1ff0862ec6eccb09a814d2db02017218ef3", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kxnorq-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kxnorq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kxnorq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kxnorq-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kxnorq\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask64 k1, k2, k3;\n+  volatile __m512i x = _mm512_setzero_si512 ();\n+\n+  __asm__( \"kmovq %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovq %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kxnor_mask64 (k1, k2);\n+  x = _mm512_mask_add_epi8 (x, k3, x, x);\n+}"}, {"sha": "97ea291e4ca94e315dd4314529be7a4db10a446d", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kxord-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kxord-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kxord-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kxord-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kxord\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask32 k1, k2, k3;\n+  volatile __m512i x = _mm512_setzero_si512 ();\n+\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovd %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kxor_mask32 (k1, k2);\n+  x = _mm512_mask_add_epi16 (x, k3, x, x);\n+}"}, {"sha": "abf4280965168c9738b04fa8cd12999c9a404d69", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-kxorq-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kxorq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kxorq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-kxorq-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"kxorq\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512bw_test ()\n+{\n+  __mmask64 k1, k2, k3;\n+  volatile __m512i x = _mm512_setzero_si512 ();\n+\n+  __asm__( \"kmovq %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovq %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kxor_mask64 (k1, k2);\n+  x = _mm512_mask_add_epi8 (x, k3, x, x);\n+}"}, {"sha": "b5b5367733eaec576f018e62c8c3cc83a65d08e3", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kandb-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kandb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kandb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kandb-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"kandb\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512dq_test ()\n+{\n+  __mmask8 k1, k2, k3;\n+  volatile __m512i x = _mm512_setzero_epi32();\n+\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kand_mask8 (k1, k2);\n+  x = _mm512_mask_add_epi64 (x, k3, x, x);\n+}"}, {"sha": "a0e96fde2d3d3c8ca138bc41daadd924657c97b6", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kandnb-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kandnb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kandnb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kandnb-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"kandnb\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512dq_test ()\n+{\n+  __mmask8 k1, k2, k3;\n+  volatile __m512d x = _mm512_setzero_pd();\n+\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kandn_mask8 (k1, k2);\n+  x = _mm512_mask_add_pd (x, k3, x, x);\n+}"}, {"sha": "03bbf83be6e0b09163c6a0e793bbe036ac49a4b5", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-knotb-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-knotb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-knotb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-knotb-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"knotb\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512dq_test ()\n+{\n+  __mmask8 k1, k2;\n+  volatile __m512d x = _mm512_setzero_pd();\n+\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k1) : \"r\" (45) );\n+\n+  k2 = _knot_mask8 (k1);\n+  x = _mm512_mask_add_pd (x, k1, x, x);\n+  x = _mm512_mask_add_pd (x, k2, x, x);\n+}"}, {"sha": "7717aeeb02609cd60af3094722a05a2a833a2f2b", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-korb-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-korb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-korb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-korb-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"korb\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512dq_test ()\n+{\n+  __mmask8 k1, k2, k3;\n+  volatile __m512d x = _mm512_setzero_pd();\n+\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kor_mask8 (k1, k2);\n+  x = _mm512_mask_add_pd (x, k3, x, x);\n+}"}, {"sha": "faa974fe28720c1681afb5c323f4d5f84997fa67", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kxnorb-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kxnorb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kxnorb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kxnorb-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"kxnorb\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512dq_test ()\n+{\n+  __mmask8 k1, k2, k3;\n+  volatile __m512d x = _mm512_setzero_pd();\n+\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kxnor_mask8 (k1, k2);\n+  x = _mm512_mask_add_pd (x, k3, x, x);\n+}"}, {"sha": "a21830bcdc6546df6609b9e063d751afee189b59", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-kxorb-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kxorb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kxorb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-kxorb-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-times \"kxorb\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512dq_test ()\n+{\n+  __mmask8 k1, k2, k3;\n+  volatile __m512d x = _mm512_setzero_pd();\n+\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kxor_mask8 (k1, k2);\n+  x = _mm512_mask_add_pd (x, k3, x, x);\n+}"}, {"sha": "17b7b295a0ec440f44ba0c73d2f5c440690c5489", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kandnw-1.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kandnw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kandnw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kandnw-1.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n /* { dg-final { scan-assembler-times \"kandnw\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"kmovw\" 2 } } */\n \n #include <immintrin.h>\n "}, {"sha": "2061f0a438e49eb09a7581b1a64722d7915ac4f6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-kunpckbw-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kunpckbw-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6901ea625b473fd0f13194bcaaf2a1f9ac458d62/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kunpckbw-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-kunpckbw-3.c?ref=6901ea625b473fd0f13194bcaaf2a1f9ac458d62", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"kunpckbw\\[ \\\\t\\]+\\[^\\{\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+void\n+avx512f_test () {\n+  __mmask8 k1, k2;\n+  __mmask16 k3;\n+  volatile __m512 x = _mm512_setzero_ps(); \n+\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k1) : \"r\" (1) );\n+  __asm__( \"kmovb %1, %0\" : \"=k\" (k2) : \"r\" (2) );\n+\n+  k3 = _kunpackb_mask16 (k1, k2);\n+  x = _mm512_mask_add_ps (x, k3, x, x);\n+}"}]}