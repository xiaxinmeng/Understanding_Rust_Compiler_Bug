{"sha": "37e58443ade8ac5b6ad08b0a935a9e9deab34847", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdlNTg0NDNhZGU4YWM1YjZhZDA4YjBhOTM1YTllOWRlYWIzNDg0Nw==", "commit": {"author": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1998-06-29T13:41:20Z"}, "committer": {"name": "Brendan Kehoe", "email": "brendan@gcc.gnu.org", "date": "1998-06-29T13:41:20Z"}, "message": "revert part of the last checkin\n\nFrom-SVN: r20794", "tree": {"sha": "239a22f33320ccc3a27ad55c1d6072e72382c0db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/239a22f33320ccc3a27ad55c1d6072e72382c0db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37e58443ade8ac5b6ad08b0a935a9e9deab34847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e58443ade8ac5b6ad08b0a935a9e9deab34847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37e58443ade8ac5b6ad08b0a935a9e9deab34847", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37e58443ade8ac5b6ad08b0a935a9e9deab34847/comments", "author": null, "committer": null, "parents": [{"sha": "a48ebb565014a55e24b4ef316a7942591c650ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a48ebb565014a55e24b4ef316a7942591c650ef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a48ebb565014a55e24b4ef316a7942591c650ef0"}], "stats": {"total": 6, "additions": 0, "deletions": 6}, "files": [{"sha": "05c54fa7e64e39920017ca235a41bc137e06cc4a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37e58443ade8ac5b6ad08b0a935a9e9deab34847/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37e58443ade8ac5b6ad08b0a935a9e9deab34847/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=37e58443ade8ac5b6ad08b0a935a9e9deab34847", "patch": "@@ -211,12 +211,6 @@ lvalue_p (ref)\n       return (lvalue_p (TREE_OPERAND (ref, 0))\n \t      && lvalue_p (TREE_OPERAND (ref, 1)));\n \n-    case NOP_EXPR:\n-      /* GNU extension:\n-\t A cast is a valid lvalue if its operand is an lvalue. */\n-      if (! pedantic)\n-\treturn lvalue_p (TREE_OPERAND (ref, 0));\n-\n     default:\n       break;\n     }"}]}