{"sha": "fa40983341e1d35fa2bebbb67f6474d8f3939215", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE0MDk4MzM0MWUxZDM1ZmEyYmViYmI2N2Y2NDc0ZDhmMzkzOTIxNQ==", "commit": {"author": {"name": "Ed Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2013-06-01T21:39:50Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-06-01T21:39:50Z"}, "message": "include/std/chrono: Collapse redundant 'inline' from 'inline constexpr'.\n\n2013-06-01  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\n\tinclude/std/chrono: Collapse redundant 'inline' from 'inline constexpr'.\n\tinclude/std/tuple: Ditto.\n\tinclude/bits/move.h: Ditto.\n\nFrom-SVN: r199587", "tree": {"sha": "d832db625fd21980b3c72f82be03d396d655b4af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d832db625fd21980b3c72f82be03d396d655b4af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa40983341e1d35fa2bebbb67f6474d8f3939215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa40983341e1d35fa2bebbb67f6474d8f3939215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa40983341e1d35fa2bebbb67f6474d8f3939215", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa40983341e1d35fa2bebbb67f6474d8f3939215/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c68a6e08c5177557d7ecc99a173593f064a15a7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c68a6e08c5177557d7ecc99a173593f064a15a7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c68a6e08c5177557d7ecc99a173593f064a15a7d"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "2350efe125734f69cc6d57b58cae9dd8354f203f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa40983341e1d35fa2bebbb67f6474d8f3939215/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa40983341e1d35fa2bebbb67f6474d8f3939215/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fa40983341e1d35fa2bebbb67f6474d8f3939215", "patch": "@@ -1,3 +1,9 @@\n+2013-06-01  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tinclude/std/chrono: Collapse redundant 'inline' from 'inline constexpr'.\n+\tinclude/std/tuple: Ditto.\n+\tinclude/bits/move.h: Ditto.\n+\n 2013-05-30  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement N3642 - User-defined Literals for Standard Library Types"}, {"sha": "d54edcd416897497e8a030860baf41c60ed0ba1c", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa40983341e1d35fa2bebbb67f6474d8f3939215/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa40983341e1d35fa2bebbb67f6474d8f3939215/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=fa40983341e1d35fa2bebbb67f6474d8f3939215", "patch": "@@ -116,7 +116,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  type is copyable, in which case an lvalue-reference is returned instead.\n    */\n   template<typename _Tp>\n-    inline constexpr typename\n+    constexpr typename\n     conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type\n     move_if_noexcept(_Tp& __x) noexcept\n     { return std::move(__x); }"}, {"sha": "7a574a62894cf964c235049f1c86a1d810e94314", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa40983341e1d35fa2bebbb67f6474d8f3939215/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa40983341e1d35fa2bebbb67f6474d8f3939215/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=fa40983341e1d35fa2bebbb67f6474d8f3939215", "patch": "@@ -819,12 +819,12 @@ inline namespace chrono_literals {\n \n   } // __detail\n \n-  inline constexpr chrono::duration<long double, ratio<3600,1>>\n+  constexpr chrono::duration<long double, ratio<3600,1>>\n   operator\"\" h(long double __hours)\n   { return chrono::duration<long double, ratio<3600,1>>{__hours}; }\n \n   template <char... _Digits>\n-    inline constexpr typename\n+    constexpr typename\n     __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n \t\t\t   chrono::hours>::type\n     operator\"\" h()\n@@ -834,12 +834,12 @@ inline namespace chrono_literals {\n \t\t\tchrono::hours>::value;\n     }\n \n-  inline constexpr chrono::duration<long double, ratio<60,1>>\n+  constexpr chrono::duration<long double, ratio<60,1>>\n   operator\"\" min(long double __mins)\n   { return chrono::duration<long double, ratio<60,1>>{__mins}; }\n \n   template <char... _Digits>\n-    inline constexpr typename\n+    constexpr typename\n     __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n \t\t\t   chrono::minutes>::type\n     operator\"\" min()\n@@ -849,12 +849,12 @@ inline namespace chrono_literals {\n \t\t\tchrono::minutes>::value;\n     }\n \n-  inline constexpr chrono::duration<long double>\n+  constexpr chrono::duration<long double>\n   operator\"\" s(long double __secs)\n   { return chrono::duration<long double>{__secs}; }\n \n   template <char... _Digits>\n-    inline constexpr typename\n+    constexpr typename\n     __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n \t\t\t   chrono::seconds>::type\n     operator\"\" s()\n@@ -864,12 +864,12 @@ inline namespace chrono_literals {\n \t\t\tchrono::seconds>::value;\n     }\n \n-  inline constexpr chrono::duration<long double, milli>\n+  constexpr chrono::duration<long double, milli>\n   operator\"\" ms(long double __msecs)\n   { return chrono::duration<long double, milli>{__msecs}; }\n \n   template <char... _Digits>\n-    inline constexpr typename\n+    constexpr typename\n     __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n \t\t\t   chrono::milliseconds>::type\n     operator\"\" ms()\n@@ -879,12 +879,12 @@ inline namespace chrono_literals {\n \t\t\tchrono::milliseconds>::value;\n     }\n \n-  inline constexpr chrono::duration<long double, micro>\n+  constexpr chrono::duration<long double, micro>\n   operator\"\" us(long double __usecs)\n   { return chrono::duration<long double, micro>{__usecs}; }\n \n   template <char... _Digits>\n-    inline constexpr typename\n+    constexpr typename\n     __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n \t\t\t   chrono::microseconds>::type\n     operator\"\" us()\n@@ -894,12 +894,12 @@ inline namespace chrono_literals {\n \t\t\tchrono::microseconds>::value;\n     }\n \n-  inline constexpr chrono::duration<long double, nano>\n+  constexpr chrono::duration<long double, nano>\n   operator\"\" ns(long double __nsecs)\n   { return chrono::duration<long double, nano>{__nsecs}; }\n \n   template <char... _Digits>\n-    inline constexpr typename\n+    constexpr typename\n     __detail::_Select_type<__select_int::_Select_int<_Digits...>::value,\n \t\t\t   chrono::nanoseconds>::type\n     operator\"\" ns()"}, {"sha": "063ce02e9c749bcb8bd999f9d08309bf88d444a6", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa40983341e1d35fa2bebbb67f6474d8f3939215/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa40983341e1d35fa2bebbb67f6474d8f3939215/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=fa40983341e1d35fa2bebbb67f6474d8f3939215", "patch": "@@ -856,25 +856,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename... _TElements, typename... _UElements>\n-    inline constexpr bool\n+    constexpr bool\n     operator!=(const tuple<_TElements...>& __t,\n \t       const tuple<_UElements...>& __u)\n     { return !(__t == __u); }\n \n   template<typename... _TElements, typename... _UElements>\n-    inline constexpr bool\n+    constexpr bool\n     operator>(const tuple<_TElements...>& __t,\n \t      const tuple<_UElements...>& __u)\n     { return __u < __t; }\n \n   template<typename... _TElements, typename... _UElements>\n-    inline constexpr bool\n+    constexpr bool\n     operator<=(const tuple<_TElements...>& __t,\n \t       const tuple<_UElements...>& __u)\n     { return !(__u < __t); }\n \n   template<typename... _TElements, typename... _UElements>\n-    inline constexpr bool\n+    constexpr bool\n     operator>=(const tuple<_TElements...>& __t,\n \t       const tuple<_UElements...>& __u)\n     { return !(__t < __u); }"}]}