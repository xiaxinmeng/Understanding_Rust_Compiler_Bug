{"sha": "97c281dacf21dcec5ed4f75f089960c8bfa81b0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdjMjgxZGFjZjIxZGNlYzVlZDRmNzVmMDg5OTYwYzhiZmE4MWIwYQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-07-11T20:26:54Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-07-11T20:26:54Z"}, "message": "avr.h (TARGET_CPU_CPP_BUILTINS): Redefine.\n\n\t* config/avr/avr.h (TARGET_CPU_CPP_BUILTINS): Redefine.\n\t(avr_extra_arch_macro) Remove declatation.\n\t* config/avr/avr.c (avr_cpu_cpp_builtins): New function.\n\t(avr_extra_arch_macro) Declare as static.\n\t* config/avr/avr-protos.h (avr_cpu_cpp_builtins): Dclare.\n\nFrom-SVN: r149519", "tree": {"sha": "52d7b6b41bad4c5c40993dfc3fc86b018e7e5d4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52d7b6b41bad4c5c40993dfc3fc86b018e7e5d4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97c281dacf21dcec5ed4f75f089960c8bfa81b0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c281dacf21dcec5ed4f75f089960c8bfa81b0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97c281dacf21dcec5ed4f75f089960c8bfa81b0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c281dacf21dcec5ed4f75f089960c8bfa81b0a/comments", "author": null, "committer": null, "parents": [{"sha": "7635b357c483c931e88e9394d8c785d1fae8489b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7635b357c483c931e88e9394d8c785d1fae8489b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7635b357c483c931e88e9394d8c785d1fae8489b"}], "stats": {"total": 105, "additions": 58, "deletions": 47}, "files": [{"sha": "4356b5a185a71ebb693061e58414cff1f59f9a35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c281dacf21dcec5ed4f75f089960c8bfa81b0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c281dacf21dcec5ed4f75f089960c8bfa81b0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97c281dacf21dcec5ed4f75f089960c8bfa81b0a", "patch": "@@ -1,3 +1,11 @@\n+2009-07-11  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/avr/avr.h (TARGET_CPU_CPP_BUILTINS): Redefine.\n+\t(avr_extra_arch_macro) Remove declatation.\n+\t* config/avr/avr.c (avr_cpu_cpp_builtins): New function.\n+\t(avr_extra_arch_macro) Declare as static.\n+\t* config/avr/avr-protos.h (avr_cpu_cpp_builtins): Dclare.\n+\n 2009-07-11  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/48388"}, {"sha": "719829d431f6a636192b36347db6a16e9a8f3f8e", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c281dacf21dcec5ed4f75f089960c8bfa81b0a/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c281dacf21dcec5ed4f75f089960c8bfa81b0a/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=97c281dacf21dcec5ed4f75f089960c8bfa81b0a", "patch": "@@ -24,6 +24,7 @@\n extern int function_arg_regno_p (int r);\n extern void avr_init_once (void);\n extern void avr_override_options (void);\n+extern void avr_cpu_cpp_builtins (struct cpp_reader * pfile);\n extern void avr_optimization_options (int level, int size);\n extern char *avr_change_section (char *sect_name);\n extern int avr_ret_register (void);"}, {"sha": "e715e39fe382d79fc3a3fc6f51187641040c8cbb", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c281dacf21dcec5ed4f75f089960c8bfa81b0a/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c281dacf21dcec5ed4f75f089960c8bfa81b0a/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=97c281dacf21dcec5ed4f75f089960c8bfa81b0a", "patch": "@@ -107,7 +107,7 @@ static const char *const avr_regnames[] = REGISTER_NAMES;\n static int last_insn_address = 0;\n \n /* Preprocessor macros to define depending on MCU type.  */\n-const char *avr_extra_arch_macro;\n+static const char *avr_extra_arch_macro;\n \n /* Current architecture.  */\n const struct base_arch_s *avr_current_arch;\n@@ -222,6 +222,53 @@ avr_override_options (void)\n   init_machine_status = avr_init_machine_status;\n }\n \n+/* Worker function for TARGET_CPU_CPP_BUILTINS.  */\n+\n+void\n+avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n+{\n+  builtin_define_std (\"AVR\");\n+\n+  if (avr_current_arch->macro)\n+    cpp_define (pfile, avr_current_arch->macro);\n+  if (avr_extra_arch_macro)\n+    cpp_define (pfile, avr_extra_arch_macro);\n+  if (avr_current_arch->have_elpm)\n+    cpp_define (pfile, \"__AVR_HAVE_RAMPZ__\");\n+  if (avr_current_arch->have_elpm)\n+    cpp_define (pfile, \"__AVR_HAVE_ELPM__\");\n+  if (avr_current_arch->have_elpmx)\n+    cpp_define (pfile, \"__AVR_HAVE_ELPMX__\");\n+  if (avr_current_arch->have_movw_lpmx)\n+    {\n+      cpp_define (pfile, \"__AVR_HAVE_MOVW__\");\n+      cpp_define (pfile, \"__AVR_HAVE_LPMX__\");\n+    }\n+  if (avr_current_arch->asm_only)\n+    cpp_define (pfile, \"__AVR_ASM_ONLY__\");\n+  if (avr_current_arch->have_mul)\n+    {\n+      cpp_define (pfile, \"__AVR_ENHANCED__\");\n+      cpp_define (pfile, \"__AVR_HAVE_MUL__\");\n+    }\n+  if (avr_current_arch->have_jmp_call)\n+    {\n+      cpp_define (pfile, \"__AVR_MEGA__\");\n+      cpp_define (pfile, \"__AVR_HAVE_JMP_CALL__\");\n+    }\n+  if (avr_current_arch->have_eijmp_eicall)\n+    {\n+      cpp_define (pfile, \"__AVR_HAVE_EIJMP_EICALL__\");\n+      cpp_define (pfile, \"__AVR_3_BYTE_PC__\");\n+    }\n+  else\n+    {\n+      cpp_define (pfile, \"__AVR_2_BYTE_PC__\");\n+    }\n+  if (TARGET_NO_INTERRUPTS)\n+    cpp_define (pfile, \"__NO_INTERRUPTS__\");\n+}\n+\n /*  return register class from register number.  */\n \n static const enum reg_class reg_class_tab[]={"}, {"sha": "73752467e086428d48fc08d6fd919ded57501cbf", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c281dacf21dcec5ed4f75f089960c8bfa81b0a/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c281dacf21dcec5ed4f75f089960c8bfa81b0a/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=97c281dacf21dcec5ed4f75f089960c8bfa81b0a", "patch": "@@ -102,52 +102,7 @@ extern const struct mcu_type_s *avr_current_device;\n extern const struct mcu_type_s avr_mcu_types[];\n extern const struct base_arch_s avr_arch_types[];\n \n-#define TARGET_CPU_CPP_BUILTINS()\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      builtin_define_std (\"AVR\");\t\t\\\n-      if (avr_current_arch->macro)\t\t\\\n-\tbuiltin_define (avr_current_arch->macro);\t\\\n-      if (avr_extra_arch_macro)\t\t\t\\\n-\tbuiltin_define (avr_extra_arch_macro);\t\\\n-      if (avr_current_arch->have_elpm)\t\t\\\n-\tbuiltin_define (\"__AVR_HAVE_RAMPZ__\");\t\\\n-      if (avr_current_arch->have_elpm)\t\t\\\n-\tbuiltin_define (\"__AVR_HAVE_ELPM__\");\t\\\n-      if (avr_current_arch->have_elpmx)\t\t\\\n-\tbuiltin_define (\"__AVR_HAVE_ELPMX__\");\t\\\n-      if (avr_current_arch->have_movw_lpmx)\t\\\n-\t{\t\t\t\t\t\\\n-\t  builtin_define (\"__AVR_HAVE_MOVW__\");\t\\\n-\t  builtin_define (\"__AVR_HAVE_LPMX__\");\t\\\n-\t}\t\t\t\t\t\\\n-      if (avr_current_arch->asm_only)\t\t\\\n-\tbuiltin_define (\"__AVR_ASM_ONLY__\");\t\\\n-      if (avr_current_arch->have_mul)\t\t\\\n-\t{\t\t\t\t\t\\\n-\t  builtin_define (\"__AVR_ENHANCED__\");\t\\\n-\t  builtin_define (\"__AVR_HAVE_MUL__\");\t\\\n- \t}\t\t\t\t\t\\\n-      if (avr_current_arch->have_jmp_call)\t\\\n-\t{\t\t\t\t\t\\\n-\t  builtin_define (\"__AVR_MEGA__\");\t\\\n-\t  builtin_define (\"__AVR_HAVE_JMP_CALL__\");\t\\\n- \t}\t\t\t\t\t\\\n-      if (avr_current_arch->have_eijmp_eicall)\t\\\n-        {\t\t\t\t\t\\\n-\t  builtin_define (\"__AVR_HAVE_EIJMP_EICALL__\");\t\\\n-\t  builtin_define (\"__AVR_3_BYTE_PC__\");\t\\\n-\t}\t\t\t\t\t\\\n-      else\t\t\t\t\t\\\n-        {\t\t\t\t\t\\\n-\t  builtin_define (\"__AVR_2_BYTE_PC__\");\t\\\n-\t}\t\t\t\t\t\\\n-      if (TARGET_NO_INTERRUPTS)\t\t\t\\\n-\tbuiltin_define (\"__NO_INTERRUPTS__\");\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n-extern const char *avr_extra_arch_macro;\n+#define TARGET_CPU_CPP_BUILTINS()\tavr_cpu_cpp_builtins (pfile)\n \n #if !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS)\n extern GTY(()) section *progmem_section;"}]}