{"sha": "b945f9f35e60d2dee6d208eb87198b6d11bde9e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk0NWY5ZjM1ZTYwZDJkZWU2ZDIwOGViODcxOThiNmQxMWJkZTllNQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-11-23T21:34:44Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-11-23T21:34:44Z"}, "message": "re PR fortran/37735 (Allocatable components in vectors of derived types cause ICE on assignment)\n\n2008-11-23  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/37735\n\t* trans-array.c (structure_alloc_comps): Do not duplicate the\n\tdescriptor if this is a descriptorless array!\n\n2008-11-23  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/37735\n\t* gfortran.dg/alloc_comp_assign_7.f90: New test.\n\nFrom-SVN: r142142", "tree": {"sha": "1925b52e77adf9675418ef5786bf894b8c6ab7c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1925b52e77adf9675418ef5786bf894b8c6ab7c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b945f9f35e60d2dee6d208eb87198b6d11bde9e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b945f9f35e60d2dee6d208eb87198b6d11bde9e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b945f9f35e60d2dee6d208eb87198b6d11bde9e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b945f9f35e60d2dee6d208eb87198b6d11bde9e5/comments", "author": null, "committer": null, "parents": [{"sha": "74e6a47563f8aa912cb0915e8fe9142cd84ac503", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e6a47563f8aa912cb0915e8fe9142cd84ac503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e6a47563f8aa912cb0915e8fe9142cd84ac503"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "4455365e87875483865bd0cd8e380efa6b149719", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b945f9f35e60d2dee6d208eb87198b6d11bde9e5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b945f9f35e60d2dee6d208eb87198b6d11bde9e5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b945f9f35e60d2dee6d208eb87198b6d11bde9e5", "patch": "@@ -1,3 +1,9 @@\n+2008-11-23  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/37735\n+\t* trans-array.c (structure_alloc_comps): Do not duplicate the\n+\tdescriptor if this is a descriptorless array!\n+\n 2008-11-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/38160"}, {"sha": "85e80c768bc126f3a97a113a6b9a8a93f1e26b51", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b945f9f35e60d2dee6d208eb87198b6d11bde9e5/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b945f9f35e60d2dee6d208eb87198b6d11bde9e5/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=b945f9f35e60d2dee6d208eb87198b6d11bde9e5", "patch": "@@ -5546,10 +5546,12 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \n       if (purpose == COPY_ALLOC_COMP)\n         {\n-          tmp = gfc_duplicate_allocatable (dest, decl, TREE_TYPE(decl), rank);\n-\t  gfc_add_expr_to_block (&fnblock, tmp);\n-\n-\t  tmp = build_fold_indirect_ref (gfc_conv_descriptor_data_get (dest));\n+\t  if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (dest)))\n+\t    {\n+\t      tmp = gfc_duplicate_allocatable (dest, decl, TREE_TYPE(decl), rank);\n+\t      gfc_add_expr_to_block (&fnblock, tmp);\n+\t    }\n+\t  tmp = build_fold_indirect_ref (gfc_conv_array_data (dest));\n \t  dref = gfc_build_array_ref (tmp, index, NULL);\n \t  tmp = structure_alloc_comps (der_type, vref, dref, rank, purpose);\n \t}"}, {"sha": "17ed9f1c3d4ea15103836766ebeebaa7b2d301f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b945f9f35e60d2dee6d208eb87198b6d11bde9e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b945f9f35e60d2dee6d208eb87198b6d11bde9e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b945f9f35e60d2dee6d208eb87198b6d11bde9e5", "patch": "@@ -1,3 +1,8 @@\n+2008-11-23  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/37735\n+\t* gfortran.dg/alloc_comp_assign_7.f90: New test.\n+\n 2008-11-23  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* g++.dg/ext/tmplattr9.C: Require weak."}, {"sha": "c0f3c76eb83251ac5120d9beab46f9a7d2012bb6", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_7.f90", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b945f9f35e60d2dee6d208eb87198b6d11bde9e5/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b945f9f35e60d2dee6d208eb87198b6d11bde9e5/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_7.f90?ref=b945f9f35e60d2dee6d208eb87198b6d11bde9e5", "patch": "@@ -0,0 +1,40 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR37735, in which gfc gagged in the assignement to\n+! 'p'.  The array component 'r' caused an ICE.\n+!\n+! Contributed by Steven Winfield <saw44@cam.ac.uk>\n+!\n+module PrettyPix_module\n+  implicit none\n+  type Spline\n+     real, allocatable, dimension(:) ::y2\n+  end type Spline\n+  type Path\n+     type(Spline) :: r(3)\n+  end type Path\n+  type Scene\n+     type(path) :: look_at_path\n+  end type Scene\n+contains\n+  subroutine scene_set_look_at_path(this,p)\n+    type(scene), intent(inout) :: this\n+    type(path),  intent(in)    :: p\n+    this%look_at_path = p\n+  end subroutine scene_set_look_at_path\n+end module PrettyPix_module\n+\n+  use PrettyPix_module\n+  implicit none\n+  integer :: i\n+  real :: x(3) = [1.0, 2.0, 3.0]\n+  type(scene) :: this\n+  type(path)  :: p\n+  p = path ([spline([x(1)]),spline([x(2)]),spline([x(3)])])\n+  call scene_set_look_at_path(this,p)\n+  do i = 1, 3\n+    if (this%look_at_path%r(i)%y2(1) .ne. x(i)) call abort\n+  end do\n+end\n+\n+! { dg-final { cleanup-modules \"PrettyPix_module\" } }"}]}