{"sha": "a1957c9755418f0f45a0bac296f61f486952960e", "node_id": "C_kwDOANBUbNoAKGExOTU3Yzk3NTU0MThmMGY0NWEwYmFjMjk2ZjYxZjQ4Njk1Mjk2MGU", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2021-10-27T18:00:36Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2021-10-27T18:00:36Z"}, "message": "Fix warnings building linux-atomic.c and fptr.c on hppa64-linux\n\nThe file fptr.c is specific to 32-bit hppa-linux and should not be\nincluded in LIB2ADD on hppa64-linux.\n\nThere is a builtin type mismatch in linux-atomic.c using the type\nlong long unsigned int for 64-bit atomic operations on hppa64-linux.\n\n2021-10-27  John David Anglin  <danglin@gcc.gnu.org>\n\nlibgcc/ChangeLog:\n\n\t* config.host (hppa*64*-*-linux*): Don't add pa/t-linux to\n\ttmake_file.\n\t* config/pa/linux-atomic.c: Define u8, u16 and u64 types.\n\tUse them in FETCH_AND_OP_2, OP_AND_FETCH_2, COMPARE_AND_SWAP_2,\n\tSYNC_LOCK_TEST_AND_SET_2 and SYNC_LOCK_RELEASE_1 macros.\n\t* config/pa/t-linux64 (LIB1ASMSRC): New define.\n\t(LIB1ASMFUNCS): Revise.\n\t(HOST_LIBGCC2_CFLAGS): Add \"-DLINUX=1\".", "tree": {"sha": "d136b9a568a773487ebf00946d710f25730ece3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d136b9a568a773487ebf00946d710f25730ece3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1957c9755418f0f45a0bac296f61f486952960e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1957c9755418f0f45a0bac296f61f486952960e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1957c9755418f0f45a0bac296f61f486952960e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1957c9755418f0f45a0bac296f61f486952960e/comments", "author": null, "committer": null, "parents": [{"sha": "99b1021d21e5812ed01221d8fca8e8a32488a934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99b1021d21e5812ed01221d8fca8e8a32488a934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99b1021d21e5812ed01221d8fca8e8a32488a934"}], "stats": {"total": 116, "additions": 62, "deletions": 54}, "files": [{"sha": "85de83da76664bc7bb869b49ec3bc9081b36a9ca", "filename": "libgcc/config.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1957c9755418f0f45a0bac296f61f486952960e/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1957c9755418f0f45a0bac296f61f486952960e/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=a1957c9755418f0f45a0bac296f61f486952960e", "patch": "@@ -619,7 +619,7 @@ h8300-*-linux*)\n \ttm_file=\"$tm_file h8300/h8300-lib.h\"\n \t;;\n hppa*64*-*-linux*)\n-\ttmake_file=\"$tmake_file pa/t-linux pa/t-linux64\"\n+\ttmake_file=\"$tmake_file pa/t-linux64\"\n \textra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n \t;;\n hppa*-*-linux*)"}, {"sha": "500a36524990490484ee683979e60297ad4ccddb", "filename": "libgcc/config/pa/linux-atomic.c", "status": "modified", "additions": 57, "deletions": 49, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1957c9755418f0f45a0bac296f61f486952960e/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1957c9755418f0f45a0bac296f61f486952960e/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Flinux-atomic.c?ref=a1957c9755418f0f45a0bac296f61f486952960e", "patch": "@@ -28,6 +28,14 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define EBUSY   16\n #define ENOSYS 251 \n \n+typedef unsigned char u8;\n+typedef short unsigned int u16;\n+#ifdef __LP64__\n+typedef long unsigned int u64;\n+#else\n+typedef long long unsigned int u64;\n+#endif\n+\n /* PA-RISC 2.0 supports out-of-order execution for loads and stores.\n    Thus, we need to synchonize memory accesses.  For more info, see:\n    \"Advanced Performance Features of the 64-bit PA-8000\" by Doug Hunt.\n@@ -117,26 +125,26 @@ __kernel_cmpxchg2 (volatile void *mem, const void *oldval, const void *newval,\n     return tmp;\t\t\t\t\t\t\t\t\\\n   }\n \n-FETCH_AND_OP_2 (add,   , +, long long unsigned int, 8, 3)\n-FETCH_AND_OP_2 (sub,   , -, long long unsigned int, 8, 3)\n-FETCH_AND_OP_2 (or,    , |, long long unsigned int, 8, 3)\n-FETCH_AND_OP_2 (and,   , &, long long unsigned int, 8, 3)\n-FETCH_AND_OP_2 (xor,   , ^, long long unsigned int, 8, 3)\n-FETCH_AND_OP_2 (nand, ~, &, long long unsigned int, 8, 3)\n-\n-FETCH_AND_OP_2 (add,   , +, short unsigned int, 2, 1)\n-FETCH_AND_OP_2 (sub,   , -, short unsigned int, 2, 1)\n-FETCH_AND_OP_2 (or,    , |, short unsigned int, 2, 1)\n-FETCH_AND_OP_2 (and,   , &, short unsigned int, 2, 1)\n-FETCH_AND_OP_2 (xor,   , ^, short unsigned int, 2, 1)\n-FETCH_AND_OP_2 (nand, ~, &, short unsigned int, 2, 1)\n-\n-FETCH_AND_OP_2 (add,   , +, unsigned char, 1, 0)\n-FETCH_AND_OP_2 (sub,   , -, unsigned char, 1, 0)\n-FETCH_AND_OP_2 (or,    , |, unsigned char, 1, 0)\n-FETCH_AND_OP_2 (and,   , &, unsigned char, 1, 0)\n-FETCH_AND_OP_2 (xor,   , ^, unsigned char, 1, 0)\n-FETCH_AND_OP_2 (nand, ~, &, unsigned char, 1, 0)\n+FETCH_AND_OP_2 (add,   , +, u64, 8, 3)\n+FETCH_AND_OP_2 (sub,   , -, u64, 8, 3)\n+FETCH_AND_OP_2 (or,    , |, u64, 8, 3)\n+FETCH_AND_OP_2 (and,   , &, u64, 8, 3)\n+FETCH_AND_OP_2 (xor,   , ^, u64, 8, 3)\n+FETCH_AND_OP_2 (nand, ~, &, u64, 8, 3)\n+\n+FETCH_AND_OP_2 (add,   , +, u16, 2, 1)\n+FETCH_AND_OP_2 (sub,   , -, u16, 2, 1)\n+FETCH_AND_OP_2 (or,    , |, u16, 2, 1)\n+FETCH_AND_OP_2 (and,   , &, u16, 2, 1)\n+FETCH_AND_OP_2 (xor,   , ^, u16, 2, 1)\n+FETCH_AND_OP_2 (nand, ~, &, u16, 2, 1)\n+\n+FETCH_AND_OP_2 (add,   , +, u8, 1, 0)\n+FETCH_AND_OP_2 (sub,   , -, u8, 1, 0)\n+FETCH_AND_OP_2 (or,    , |, u8, 1, 0)\n+FETCH_AND_OP_2 (and,   , &, u8, 1, 0)\n+FETCH_AND_OP_2 (xor,   , ^, u8, 1, 0)\n+FETCH_AND_OP_2 (nand, ~, &, u8, 1, 0)\n \n #define OP_AND_FETCH_2(OP, PFX_OP, INF_OP, TYPE, WIDTH, INDEX)\t\t\\\n   TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n@@ -154,26 +162,26 @@ FETCH_AND_OP_2 (nand, ~, &, unsigned char, 1, 0)\n     return PFX_OP (tmp INF_OP val);\t\t\t\t\t\\\n   }\n \n-OP_AND_FETCH_2 (add,   , +, long long unsigned int, 8, 3)\n-OP_AND_FETCH_2 (sub,   , -, long long unsigned int, 8, 3)\n-OP_AND_FETCH_2 (or,    , |, long long unsigned int, 8, 3)\n-OP_AND_FETCH_2 (and,   , &, long long unsigned int, 8, 3)\n-OP_AND_FETCH_2 (xor,   , ^, long long unsigned int, 8, 3)\n-OP_AND_FETCH_2 (nand, ~, &, long long unsigned int, 8, 3)\n-\n-OP_AND_FETCH_2 (add,   , +, short unsigned int, 2, 1)\n-OP_AND_FETCH_2 (sub,   , -, short unsigned int, 2, 1)\n-OP_AND_FETCH_2 (or,    , |, short unsigned int, 2, 1)\n-OP_AND_FETCH_2 (and,   , &, short unsigned int, 2, 1)\n-OP_AND_FETCH_2 (xor,   , ^, short unsigned int, 2, 1)\n-OP_AND_FETCH_2 (nand, ~, &, short unsigned int, 2, 1)\n-\n-OP_AND_FETCH_2 (add,   , +, unsigned char, 1, 0)\n-OP_AND_FETCH_2 (sub,   , -, unsigned char, 1, 0)\n-OP_AND_FETCH_2 (or,    , |, unsigned char, 1, 0)\n-OP_AND_FETCH_2 (and,   , &, unsigned char, 1, 0)\n-OP_AND_FETCH_2 (xor,   , ^, unsigned char, 1, 0)\n-OP_AND_FETCH_2 (nand, ~, &, unsigned char, 1, 0)\n+OP_AND_FETCH_2 (add,   , +, u64, 8, 3)\n+OP_AND_FETCH_2 (sub,   , -, u64, 8, 3)\n+OP_AND_FETCH_2 (or,    , |, u64, 8, 3)\n+OP_AND_FETCH_2 (and,   , &, u64, 8, 3)\n+OP_AND_FETCH_2 (xor,   , ^, u64, 8, 3)\n+OP_AND_FETCH_2 (nand, ~, &, u64, 8, 3)\n+\n+OP_AND_FETCH_2 (add,   , +, u16, 2, 1)\n+OP_AND_FETCH_2 (sub,   , -, u16, 2, 1)\n+OP_AND_FETCH_2 (or,    , |, u16, 2, 1)\n+OP_AND_FETCH_2 (and,   , &, u16, 2, 1)\n+OP_AND_FETCH_2 (xor,   , ^, u16, 2, 1)\n+OP_AND_FETCH_2 (nand, ~, &, u16, 2, 1)\n+\n+OP_AND_FETCH_2 (add,   , +, u8, 1, 0)\n+OP_AND_FETCH_2 (sub,   , -, u8, 1, 0)\n+OP_AND_FETCH_2 (or,    , |, u8, 1, 0)\n+OP_AND_FETCH_2 (and,   , &, u8, 1, 0)\n+OP_AND_FETCH_2 (xor,   , ^, u8, 1, 0)\n+OP_AND_FETCH_2 (nand, ~, &, u8, 1, 0)\n \n #define FETCH_AND_OP_WORD(OP, PFX_OP, INF_OP)\t\t\t\t\\\n   unsigned int HIDDEN\t\t\t\t\t\t\t\\\n@@ -254,9 +262,9 @@ typedef unsigned char bool;\n     return (failure == 0);\t\t\t\t\t\t\\\n   }\n \n-COMPARE_AND_SWAP_2 (long long unsigned int, 8, 3)\n-COMPARE_AND_SWAP_2 (short unsigned int, 2, 1)\n-COMPARE_AND_SWAP_2 (unsigned char, 1, 0)\n+COMPARE_AND_SWAP_2 (u64, 8, 3)\n+COMPARE_AND_SWAP_2 (u16, 2, 1)\n+COMPARE_AND_SWAP_2 (u8, 1, 0)\n \n unsigned int HIDDEN\n __sync_val_compare_and_swap_4 (volatile void *ptr, unsigned int oldval,\n@@ -304,9 +312,9 @@ TYPE HIDDEN\t\t\t\t\t\t\t\t\\\n     return oldval;\t\t\t\t\t\t\t\\\n   }\n \n-SYNC_LOCK_TEST_AND_SET_2 (long long unsigned int, 8, 3)\n-SYNC_LOCK_TEST_AND_SET_2 (short unsigned int, 2, 1)\n-SYNC_LOCK_TEST_AND_SET_2 (unsigned char, 1, 0)\n+SYNC_LOCK_TEST_AND_SET_2 (u64, 8, 3)\n+SYNC_LOCK_TEST_AND_SET_2 (u16, 2, 1)\n+SYNC_LOCK_TEST_AND_SET_2 (u8, 1, 0)\n \n unsigned int HIDDEN\n __sync_lock_test_and_set_4 (volatile void *ptr, unsigned int val)\n@@ -336,9 +344,9 @@ __sync_lock_test_and_set_4 (volatile void *ptr, unsigned int val)\n     } while (failure != 0);\t\t\t\t\t\\\n   }\n \n-SYNC_LOCK_RELEASE_1 (long long unsigned int, 8, 3)\n-SYNC_LOCK_RELEASE_1 (short unsigned int, 2, 1)\n-SYNC_LOCK_RELEASE_1 (unsigned char, 1, 0)\n+SYNC_LOCK_RELEASE_1 (u64, 8, 3)\n+SYNC_LOCK_RELEASE_1 (u16, 2, 1)\n+SYNC_LOCK_RELEASE_1 (u8, 1, 0)\n \n void HIDDEN\n __sync_lock_release_4 (volatile void *ptr)"}, {"sha": "026b48b02e5bb942a49e068f1fe2b6053a187114", "filename": "libgcc/config/pa/t-linux64", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1957c9755418f0f45a0bac296f61f486952960e/libgcc%2Fconfig%2Fpa%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1957c9755418f0f45a0bac296f61f486952960e/libgcc%2Fconfig%2Fpa%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Ft-linux64?ref=a1957c9755418f0f45a0bac296f61f486952960e", "patch": "@@ -1,8 +1,8 @@\n # Plug millicode routines into libgcc.a  We want these on both native and\n # cross compiles.\n-# FIXME: Explain.\n-LIB1ASMFUNCS := $(filter-out _dyncall, $(LIB1ASMFUNCS))\n+LIB1ASMSRC = pa/milli64.S\n+LIB1ASMFUNCS = _divI _divU _remI _remU _div_const _mulI\n \n-LIB2ADD_ST = $(srcdir)/config/pa/linux-atomic.c\n+HOST_LIBGCC2_CFLAGS += -Dpa64=1 -DELF=1 -DLINUX=1\n \n-HOST_LIBGCC2_CFLAGS += -Dpa64=1 -DELF=1\n+LIB2ADD_ST = $(srcdir)/config/pa/linux-atomic.c"}]}