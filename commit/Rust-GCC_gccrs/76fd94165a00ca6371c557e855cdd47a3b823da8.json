{"sha": "76fd94165a00ca6371c557e855cdd47a3b823da8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZmZDk0MTY1YTAwY2E2MzcxYzU1N2U4NTVjZGQ0N2EzYjgyM2RhOA==", "commit": {"author": {"name": "Pat Rogers", "email": "rogers@adacore.com", "date": "2019-07-01T13:35:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-01T13:35:53Z"}, "message": "[Ada] Correct size in representation clauses documentation\n\n2019-07-01  Pat Rogers  <rogers@adacore.com>\n\ngcc/ada/\n\n\t* doc/gnat_rm/representation_clauses_and_pragmas.rst: Correct\n\tsize indicated for R as a component of an array.\n\t* gnat_rm.texi: Regenerate.\n\nFrom-SVN: r272869", "tree": {"sha": "81e0504293682ea93b4cf9e90adb2186f75865d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81e0504293682ea93b4cf9e90adb2186f75865d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76fd94165a00ca6371c557e855cdd47a3b823da8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76fd94165a00ca6371c557e855cdd47a3b823da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76fd94165a00ca6371c557e855cdd47a3b823da8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76fd94165a00ca6371c557e855cdd47a3b823da8/comments", "author": {"login": "pat-rogers", "id": 14908705, "node_id": "MDQ6VXNlcjE0OTA4NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/14908705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pat-rogers", "html_url": "https://github.com/pat-rogers", "followers_url": "https://api.github.com/users/pat-rogers/followers", "following_url": "https://api.github.com/users/pat-rogers/following{/other_user}", "gists_url": "https://api.github.com/users/pat-rogers/gists{/gist_id}", "starred_url": "https://api.github.com/users/pat-rogers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pat-rogers/subscriptions", "organizations_url": "https://api.github.com/users/pat-rogers/orgs", "repos_url": "https://api.github.com/users/pat-rogers/repos", "events_url": "https://api.github.com/users/pat-rogers/events{/privacy}", "received_events_url": "https://api.github.com/users/pat-rogers/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "339ff2f61d916b1d2d449ed0f3d477c1a0510bf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/339ff2f61d916b1d2d449ed0f3d477c1a0510bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/339ff2f61d916b1d2d449ed0f3d477c1a0510bf6"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "e624e6b0819ca31dd9eec83dfb929fa5a25dfb18", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76fd94165a00ca6371c557e855cdd47a3b823da8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76fd94165a00ca6371c557e855cdd47a3b823da8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=76fd94165a00ca6371c557e855cdd47a3b823da8", "patch": "@@ -1,3 +1,9 @@\n+2019-07-01  Pat Rogers  <rogers@adacore.com>\n+\n+\t* doc/gnat_rm/representation_clauses_and_pragmas.rst: Correct\n+\tsize indicated for R as a component of an array.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2019-07-01  Justin Squirek  <squirek@adacore.com>\n \n \t* libgnat/s-win32.ads: Add definition for ULONG, modify"}, {"sha": "82dc97c34c90a06c86e1c8566204eab8aef4b952", "filename": "gcc/ada/doc/gnat_rm/representation_clauses_and_pragmas.rst", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76fd94165a00ca6371c557e855cdd47a3b823da8/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76fd94165a00ca6371c557e855cdd47a3b823da8/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst?ref=76fd94165a00ca6371c557e855cdd47a3b823da8", "patch": "@@ -610,14 +610,23 @@ alignment of the type (this is true for all types). In some cases the\n      end record;\n \n \n-On a typical 32-bit architecture, the X component will be four bytes, and\n-require four-byte alignment, and the Y component will be one byte. In this\n-case ``R'Value_Size`` will be 40 (bits) since this is the minimum size\n-required to store a value of this type, and for example, it is permissible\n-to have a component of type R in an outer array whose component size is\n-specified to be 48 bits. However, ``R'Object_Size`` will be 64 (bits),\n-since it must be rounded up so that this value is a multiple of the\n-alignment (4 bytes = 32 bits).\n+On a typical 32-bit architecture, the X component will occupy four bytes \n+and the Y component will occupy one byte, for a total of 5 bytes. As a \n+result ``R'Value_Size`` will be 40 (bits) since this is the minimum size \n+required to store a value of this type. For example, it is permissible \n+to have a component of type R in an array whose component size is \n+specified to be 40 bits. \n+\n+However, ``R'Object_Size`` will be 64 (bits). The difference is due to \n+the alignment requirement for objects of the record type. The X \n+component will require four-byte alignment because that is what type \n+Integer requires, whereas the Y component, a Character, will only \n+require 1-byte alignment. Since the alignment required for X is the \n+greatest of all the components' alignments, that is the alignment \n+required for the enclosing record type, i.e., 4 bytes or 32 bits. As \n+indicated above, the actual object size must be rounded up so that it is \n+a multiple of the alignment value. Therefore, 40 bits rounded up to the \n+next multiple of 32 yields 64 bits. \n \n For all other types, the ``Object_Size``\n and ``Value_Size`` are the same (and equivalent to the RM attribute ``Size``)."}, {"sha": "39a8a1ec80da9ac958414cb99c403be68f988e2f", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76fd94165a00ca6371c557e855cdd47a3b823da8/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76fd94165a00ca6371c557e855cdd47a3b823da8/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=76fd94165a00ca6371c557e855cdd47a3b823da8", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , Sep 24, 2018\n+GNAT Reference Manual , May 27, 2019\n \n AdaCore\n \n@@ -18982,14 +18982,23 @@ type R is record\n end record;\n @end example\n \n-On a typical 32-bit architecture, the X component will be four bytes, and\n-require four-byte alignment, and the Y component will be one byte. In this\n-case @code{R'Value_Size} will be 40 (bits) since this is the minimum size\n-required to store a value of this type, and for example, it is permissible\n-to have a component of type R in an outer array whose component size is\n-specified to be 48 bits. However, @code{R'Object_Size} will be 64 (bits),\n-since it must be rounded up so that this value is a multiple of the\n-alignment (4 bytes = 32 bits).\n+On a typical 32-bit architecture, the X component will occupy four bytes\n+and the Y component will occupy one byte, for a total of 5 bytes. As a\n+result @code{R'Value_Size} will be 40 (bits) since this is the minimum size\n+required to store a value of this type. For example, it is permissible\n+to have a component of type R in an array whose component size is\n+specified to be 40 bits.\n+\n+However, @code{R'Object_Size} will be 64 (bits). The difference is due to\n+the alignment requirement for objects of the record type. The X\n+component will require four-byte alignment because that is what type\n+Integer requires, whereas the Y component, a Character, will only\n+require 1-byte alignment. Since the alignment required for X is the\n+greatest of all the components' alignments, that is the alignment\n+required for the enclosing record type, i.e., 4 bytes or 32 bits. As\n+indicated above, the actual object size must be rounded up so that it is\n+a multiple of the alignment value. Therefore, 40 bits rounded up to the\n+next multiple of 32 yields 64 bits.\n \n For all other types, the @code{Object_Size}\n and @code{Value_Size} are the same (and equivalent to the RM attribute @code{Size})."}]}