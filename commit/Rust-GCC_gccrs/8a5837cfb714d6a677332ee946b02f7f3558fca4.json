{"sha": "8a5837cfb714d6a677332ee946b02f7f3558fca4", "node_id": "C_kwDOANBUbNoAKDhhNTgzN2NmYjcxNGQ2YTY3NzMzMmVlOTQ2YjAyZjdmMzU1OGZjYTQ", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T10:00:49Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-22T04:56:30Z"}, "message": "AVX512FP16: Add testcases for vfcmaddcsh/vfmaddcsh/vfcmulcsh/vfmulcsh.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-vfcmaddcsh-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vfcmaddcsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfcmulcsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfcmulcsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfmaddcsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfmaddcsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfmulcsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vfmulcsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-complex-constraints.c: Ditto.", "tree": {"sha": "da44413c8e538f46b7787189c0e2a77ebe43df07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da44413c8e538f46b7787189c0e2a77ebe43df07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a5837cfb714d6a677332ee946b02f7f3558fca4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5837cfb714d6a677332ee946b02f7f3558fca4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a5837cfb714d6a677332ee946b02f7f3558fca4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a5837cfb714d6a677332ee946b02f7f3558fca4/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db3b96df03fdbe2fb770729501e2e9b65e66c2da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3b96df03fdbe2fb770729501e2e9b65e66c2da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3b96df03fdbe2fb770729501e2e9b65e66c2da"}], "stats": {"total": 424, "additions": 424, "deletions": 0}, "files": [{"sha": "fcd37940f6e7d12031ea0b55e3ae713b8c7e7b42", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-complex-constraints.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-complex-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-complex-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-complex-constraints.c?ref=8a5837cfb714d6a677332ee946b02f7f3558fca4", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+\n+/* { dg-final { scan-assembler-not \"vfmulcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm1+\\[^\\n\\r]*%zmm0+\\[^\\n\\r]*%zmm0+(?:\\n|\\[ \\\\t\\]+#)\" } } */\n+/* { dg-final { scan-assembler-not \"vfmaddcph\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm0+\\[^\\n\\r]*%zmm0+\\[^\\n\\r]*%zmm0+(?:\\n|\\[ \\\\t\\]+#)\" } } */\n+/* { dg-final { scan-assembler-not \"vfmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm1+\\[^\\n\\r]*%xmm0+\\[^\\n\\r]*%xmm0+(?:\\n|\\[ \\\\t\\]+#)\" } } */\n+/* { dg-final { scan-assembler-not \"vfmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm0+\\[^\\n\\r]*%xmm0+\\[^\\n\\r]*%xmm0+(?:\\n|\\[ \\\\t\\]+#)\" } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512h a1;\n+volatile __m128h a2;\n+__m512h b1;\n+__m128h b2;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  a1 = _mm512_fmul_pch (a1, a1);\n+  b1 = _mm512_fmadd_pch (b1, b1, b1);\n+  a2 = _mm_fmul_sch (a2, a2);\n+  b2 = _mm_fmadd_sch (b2, b2, b2);\n+}"}, {"sha": "8bd8eebd8dfecbf800b71ee25285a9232f5e2ffe", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfcmaddcsh-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1a.c?ref=8a5837cfb714d6a677332ee946b02f7f3558fca4", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfcmaddcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res, res1, res2;\n+volatile __m128h x1, x2, x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx128f_test (void)\n+{\n+  res = _mm_fcmadd_sch (x1, x2, x3);\n+  res1 = _mm_mask_fcmadd_sch (res1, m8, x1, x2);\n+  res1 = _mm_mask3_fcmadd_sch (res1, x1, x2, m8);\n+  res2 = _mm_maskz_fcmadd_sch (m8, x1, x2, x3);\n+  res = _mm_fcmadd_round_sch (x1, x2, x3, 8);\n+  res1 = _mm_mask_fcmadd_round_sch (res1, m8, x1, x2, 8);\n+  res1 = _mm_mask3_fcmadd_round_sch (res1, x1, x2, m8, 8);\n+  res2 = _mm_maskz_fcmadd_round_sch (m8, x1, x2, x3, 11);\n+}"}, {"sha": "c4790684b66ff41842351e14ff1204602df3edee", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfcmaddcsh-1b.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmaddcsh-1b.c?ref=8a5837cfb714d6a677332ee946b02f7f3558fca4", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+EMULATE(c_fmadd_csh) (V512 * dest, V512 op1, V512 op2,\n+\t\t    __mmask8 k, int zero_mask, int c_flag,\n+\t\t    int is_mask3)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  int invert = 1;\n+  if (c_flag == 1)\n+    invert = -1;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(op2, &v3, &v4);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  if ((k&1) || !k) {\n+    v5.f32[0] = v1.f32[0] * v7.f32[0]\n+      - invert * (v1.f32[1] * v7.f32[1]) + v3.f32[0];\n+    v5.f32[1] = v1.f32[0] * v7.f32[1]\n+      + invert * (v1.f32[1] * v7.f32[0]) + v3.f32[1];\n+  }\n+  else if (zero_mask)\n+    v5.f32[0] = 0;\n+  else\n+    v5.f32[0] = v7.f32[0];\n+\n+  for (i = 2; i < 8; i++)\n+    v5.f32[i] = is_mask3? v3.f32[i] : v7.f32[i];\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_csh)(&exp, src1, src2,  0x1, 0, 1, 0);\n+  res.xmmh[0] = _mm_fcmadd_round_sch(res.xmmh[0], src1.xmmh[0],\n+\t\t\t\t     src2.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mm_fcmadd_sch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_csh)(&exp, src1, src2,  0x1, 0, 1, 0);\n+  res.xmmh[0] = _mm_mask_fcmadd_round_sch(res.xmmh[0], 0x1,\n+\t\t\t\t\t  src1.xmmh[0], src2.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mm_mask_fcmadd_sch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_csh)(&exp, src1, src2,  0x1, 0, 1, 1);\n+  res.xmmh[0] = _mm_mask3_fcmadd_round_sch(res.xmmh[0], src1.xmmh[0], src2.xmmh[0],\n+\t\t\t\t\t   0x1, _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mm_mask3_fcmadd_sch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_csh)(&exp, src1, src2,  0x3, 1, 1, 0);\n+  res.xmmh[0] = _mm_maskz_fcmadd_round_sch(0x3, res.xmmh[0], src1.xmmh[0],\n+\t\t\t\t\t   src2.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mm_maskz_fcmadd_sch);\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "872d91ac257020a38dc9825c2fde1e989ba5ec17", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfcmulcsh-1a.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcsh-1a.c?ref=8a5837cfb714d6a677332ee946b02f7f3558fca4", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfcmulcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res, res1, res2;\n+volatile __m128h x1, x2, x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_fcmul_sch (x1, x2);\n+  res1 = _mm_mask_fcmul_sch (res1, m8, x1, x2);\n+  res2 = _mm_maskz_fcmul_sch (m8, x1, x2);\n+  res = _mm_fcmul_round_sch (x1, x2, 8);\n+  res1 = _mm_mask_fcmul_round_sch (res1, m8, x1, x2, 8);\n+  res2 = _mm_maskz_fcmul_round_sch (m8, x1, x2, 11);\n+}"}, {"sha": "995df8422f4459241908ccb2506e741f1dbbe447", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfcmulcsh-1b.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfcmulcsh-1b.c?ref=8a5837cfb714d6a677332ee946b02f7f3558fca4", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+EMULATE(c_fmul_csh) (V512 * dest, V512 op1, V512 op2,\n+\t\t    __mmask8 k, int zero_mask, int c_flag)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  int invert = 1;\n+  if (c_flag == 1)\n+    invert = -1;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(op2, &v3, &v4);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  if ((k&1) || !k) {\n+    v5.f32[0] = v1.f32[0] * v3.f32[0]\n+      - invert * (v1.f32[1] * v3.f32[1]);\n+    v5.f32[1] = v1.f32[1] * v3.f32[0]\n+      + invert * (v1.f32[0] * v3.f32[1]);\n+  }\n+  else if (zero_mask)\n+    v5.f32[0] = 0;\n+  else\n+    v5.f32[0] = v7.f32[0];\n+\n+  for (i = 2; i < 8; i++)\n+    v5.f32[i] = v1.f32[i];\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmul_csh)(&exp, src1, src2,  0x1, 0 , 1);\n+  res.xmmh[0] = _mm_fcmul_round_sch(src1.xmmh[0], src2.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mm_fcmul_sch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmul_csh)(&exp, src1, src2,  0x1, 0, 1);\n+  res.xmmh[0] = _mm_mask_fcmul_round_sch(res.xmmh[0], 0x1,\n+\t\t\t\t\t src1.xmmh[0], src2.xmmh[0],\n+\t\t\t\t\t _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mm_mask_fcmul_sch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmul_csh)(&exp, src1, src2,  0x3, 1, 1);\n+  res.xmmh[0] = _mm_maskz_fcmul_round_sch(0x3, src1.xmmh[0],\n+\t\t\t\t\t  src2.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mm_maskz_fcmul_sch);\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "1e376b4a2bb69e82ebd88ebb740dd92267bc68d1", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmaddcsh-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1a.c?ref=8a5837cfb714d6a677332ee946b02f7f3558fca4", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vfmaddcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res, res1, res2;\n+volatile __m128h x1, x2, x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx128f_test (void)\n+{\n+  res = _mm_fmadd_sch (x1, x2, x3);\n+  res1 = _mm_mask_fmadd_sch (res1, m8, x1, x2);\n+  res1 = _mm_mask3_fmadd_sch (res1, x1, x2, m8);\n+  res2 = _mm_maskz_fmadd_sch (m8, x1, x2, x3);\n+  res = _mm_fmadd_round_sch (x1, x2, x3, 8);\n+  res1 = _mm_mask_fmadd_round_sch (res1, m8, x1, x2, 8);\n+  res1 = _mm_mask3_fmadd_round_sch (res1, x1, x2, m8, 8);\n+  res2 = _mm_maskz_fmadd_round_sch (m8, x1, x2, x3, 11);\n+}"}, {"sha": "4c74e01d8a0ee5f745e5ad1acf68317a13f09db0", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmaddcsh-1b.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmaddcsh-1b.c?ref=8a5837cfb714d6a677332ee946b02f7f3558fca4", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+EMULATE(c_fmadd_csh) (V512 * dest, V512 op1, V512 op2,\n+\t\t    __mmask8 k, int zero_mask, int c_flag,\n+\t\t    int is_mask3)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  int invert = 1;\n+  if (c_flag == 1)\n+    invert = -1;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(op2, &v3, &v4);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  if ((k&1) || !k) {\n+    v5.f32[0] = v1.f32[0] * v7.f32[0]\n+      - invert * (v1.f32[1] * v7.f32[1]) + v3.f32[0];\n+    v5.f32[1] = v1.f32[0] * v7.f32[1]\n+      + invert * (v1.f32[1] * v7.f32[0]) + v3.f32[1];\n+  }\n+  else if (zero_mask)\n+    v5.f32[0] = 0;\n+  else\n+    v5.f32[0] = v7.f32[0];\n+\n+  for (i = 2; i < 8; i++)\n+    v5.f32[i] = is_mask3? v3.f32[i] : v7.f32[i];\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_csh)(&exp, src1, src2,  0x1, 0, 0, 0);\n+  res.xmmh[0] = _mm_fmadd_round_sch(res.xmmh[0], src1.xmmh[0],\n+\t\t\t\t    src2.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mm_fmadd_sch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_csh)(&exp, src1, src2,  0x1, 0, 0, 0);\n+  res.xmmh[0] = _mm_mask_fmadd_round_sch(res.xmmh[0], 0x1, src1.xmmh[0],\n+\t\t\t\t\t src2.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mm_mask_fmadd_sch);\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_csh)(&exp, src1, src2,  0x1, 0, 0, 1);\n+  res.xmmh[0] = _mm_mask3_fmadd_round_sch(res.xmmh[0], src1.xmmh[0], src2.xmmh[0],\n+\t\t\t\t\t   0x1, _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mm_mask3_fmadd_sch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmadd_csh)(&exp, src1, src2,  0x3, 1, 0, 0);\n+  res.xmmh[0] = _mm_maskz_fmadd_round_sch(0x3, res.xmmh[0], src1.xmmh[0],\n+\t\t\t\t\t  src2.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mm_maskz_fmadd_sch);\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "5d48874b76097de1215793026ad232dcd49be96f", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmulcsh-1a.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcsh-1a.c?ref=8a5837cfb714d6a677332ee946b02f7f3558fca4", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\{\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vfmulcsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res, res1, res2;\n+volatile __m128h x1, x2, x3;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_fmul_sch (x1, x2);\n+  res1 = _mm_mask_fmul_sch (res1, m8, x1, x2);\n+  res2 = _mm_maskz_fmul_sch (m8, x1, x2);\n+  res = _mm_fmul_round_sch (x1, x2, 8);\n+  res1 = _mm_mask_fmul_round_sch (res1, m8, x1, x2, 8);\n+  res2 = _mm_maskz_fmul_round_sch (m8, x1, x2, 11);\n+}"}, {"sha": "45840d62f67c3bfac9afd310404870c75eb95a78", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vfmulcsh-1b.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a5837cfb714d6a677332ee946b02f7f3558fca4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vfmulcsh-1b.c?ref=8a5837cfb714d6a677332ee946b02f7f3558fca4", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+EMULATE(c_fmul_csh) (V512 * dest, V512 op1, V512 op2,\n+\t\t    __mmask8 k, int zero_mask, int c_flag)\n+{\n+  V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+  int i;\n+  int invert = 1;\n+  if (c_flag == 1)\n+    invert = -1;\n+\n+  unpack_ph_2twops(op1, &v1, &v2);\n+  unpack_ph_2twops(op2, &v3, &v4);\n+  unpack_ph_2twops(*dest, &v7, &v8);\n+\n+  if ((k&1) || !k) {\n+    v5.f32[0] = v1.f32[0] * v3.f32[0]\n+      - invert * (v1.f32[1] * v3.f32[1]);\n+    v5.f32[1] = v1.f32[0] * v3.f32[1]\n+      + invert * (v1.f32[1] * v3.f32[0]);\n+  }\n+  else if (zero_mask)\n+    v5.f32[0] = 0;\n+  else\n+    v5.f32[0] = v7.f32[0];\n+\n+  for (i = 2; i < 8; i++)\n+    v5.f32[i] = v1.f32[i];\n+\n+  *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+TEST (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmul_csh)(&exp, src1, src2,  0x1, 0 , 0);\n+  res.xmmh[0] = _mm_fmul_round_sch(src1.xmmh[0], src2.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mm_fmul_sch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmul_csh)(&exp, src1, src2,  0x1, 0, 0);\n+  res.xmmh[0] = _mm_mask_fmul_round_sch(res.xmmh[0], 0x1,\n+\t\t\t\t\tsrc1.xmmh[0], src2.xmmh[0],\n+\t\t\t\t\t_ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mm_mask_fmul_sch);\n+\n+  init_dest(&res, &exp);\n+  EMULATE(c_fmul_csh)(&exp, src1, src2,  0x3, 1, 0);\n+  res.xmmh[0] = _mm_maskz_fmul_round_sch(0x3, src1.xmmh[0],\n+\t\t\t\t\t src2.xmmh[0], _ROUND_NINT);\n+  CHECK_RESULT (&res, &exp, N_ELEMS, _mm_maskz_fmul_sch);\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}]}