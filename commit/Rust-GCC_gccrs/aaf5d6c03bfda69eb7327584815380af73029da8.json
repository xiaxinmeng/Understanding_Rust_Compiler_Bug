{"sha": "aaf5d6c03bfda69eb7327584815380af73029da8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFmNWQ2YzAzYmZkYTY5ZWI3MzI3NTg0ODE1MzgwYWY3MzAyOWRhOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-11-17T07:30:55Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-11-17T07:30:55Z"}, "message": "predicates.md (x86_64_szext_general_operand): Do not nest ior expressions.\n\n\t* config/i386/predicates.md (x86_64_szext_general_operand): Do not\n\tnest ior expressions.\n\t(x86_64_szext_nonmemory_operand): Ditto.\n\t(call_insn_operand): Ditto.\n\nFrom-SVN: r154241", "tree": {"sha": "bb76caa0d43851ba1fbafe3068b62006da015c63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb76caa0d43851ba1fbafe3068b62006da015c63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaf5d6c03bfda69eb7327584815380af73029da8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf5d6c03bfda69eb7327584815380af73029da8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaf5d6c03bfda69eb7327584815380af73029da8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaf5d6c03bfda69eb7327584815380af73029da8/comments", "author": null, "committer": null, "parents": [{"sha": "d22f0231e60287574538fc60f743f9464a0977f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d22f0231e60287574538fc60f743f9464a0977f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d22f0231e60287574538fc60f743f9464a0977f4"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "abe9443d6d0184fefd4e454acb963a073fad3cc4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf5d6c03bfda69eb7327584815380af73029da8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf5d6c03bfda69eb7327584815380af73029da8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaf5d6c03bfda69eb7327584815380af73029da8", "patch": "@@ -1,3 +1,10 @@\n+2009-11-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/predicates.md (x86_64_szext_general_operand): Do not\n+\tnest ior expressions.\n+\t(x86_64_szext_nonmemory_operand): Ditto.\n+\t(call_insn_operand): Ditto.\n+\n 2009-11-16  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* stmt.c (expand_asm_stmt): Get locus from stmt.\n@@ -79,7 +86,7 @@\n \t(execute_all_ipa_transforms): Update.\n \t(execute_one_pass): Update.\n \n-2009-11-14  Andy Hutchinson   <hutchinsonandy@gcc.gnu.org>\n+2009-11-14  Andy Hutchinson  <hutchinsonandy@gcc.gnu.org>\n \n \tPR target/21078, 21080\n \t* config/avr/avr.c (avr_return_addr_rtx): New function for"}, {"sha": "31a203758edc04200a531a6ca3ffb9ea546478db", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaf5d6c03bfda69eb7327584815380af73029da8/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaf5d6c03bfda69eb7327584815380af73029da8/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=aaf5d6c03bfda69eb7327584815380af73029da8", "patch": "@@ -327,8 +327,8 @@\n (define_predicate \"x86_64_szext_general_operand\"\n   (if_then_else (match_test \"TARGET_64BIT\")\n     (ior (match_operand 0 \"nonimmediate_operand\")\n-\t (ior (match_operand 0 \"x86_64_immediate_operand\")\n-\t      (match_operand 0 \"x86_64_zext_immediate_operand\")))\n+\t (match_operand 0 \"x86_64_immediate_operand\")\n+\t (match_operand 0 \"x86_64_zext_immediate_operand\"))\n     (match_operand 0 \"general_operand\")))\n \n ;; Return nonzero if OP is nonmemory operand representable on x86_64.\n@@ -342,8 +342,8 @@\n (define_predicate \"x86_64_szext_nonmemory_operand\"\n   (if_then_else (match_test \"TARGET_64BIT\")\n     (ior (match_operand 0 \"register_operand\")\n-\t (ior (match_operand 0 \"x86_64_immediate_operand\")\n-\t      (match_operand 0 \"x86_64_zext_immediate_operand\")))\n+\t (match_operand 0 \"x86_64_immediate_operand\")\n+\t (match_operand 0 \"x86_64_zext_immediate_operand\"))\n     (match_operand 0 \"nonmemory_operand\")))\n \n ;; Return true when operand is PIC expression that can be computed by lea\n@@ -577,8 +577,8 @@\n ;; Test for a valid operand for a call instruction.\n (define_predicate \"call_insn_operand\"\n   (ior (match_operand 0 \"constant_call_address_operand\")\n-       (ior (match_operand 0 \"call_register_no_elim_operand\")\n-\t    (match_operand 0 \"memory_operand\"))))\n+       (match_operand 0 \"call_register_no_elim_operand\")\n+       (match_operand 0 \"memory_operand\")))\n \n ;; Similarly, but for tail calls, in which we cannot allow memory references.\n (define_predicate \"sibcall_insn_operand\""}]}