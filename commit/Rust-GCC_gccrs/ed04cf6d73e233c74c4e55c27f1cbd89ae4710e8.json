{"sha": "ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQwNGNmNmQ3M2UyMzNjNzRjNGU1NWMyN2YxY2JkODlhZTQ3MTBlOA==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-06-29T17:09:56Z"}, "committer": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2021-07-30T21:53:39Z"}, "message": "rs6000: Add tests for SSE4.1 \"blend\" intrinsics\n\nCopy the tests for _mm_blend_pd, _mm_blendv_pd, _mm_blend_ps,\n_mm_blendv_ps from gcc/testsuite/gcc.target/i386.\n\n2021-07-30  Paul A. Clarke  <pc@us.ibm.com>\n\ngcc/testsuite\n\t* gcc.target/powerpc/sse4_1-blendpd.c: Copy from gcc.target/i386\n\tand adjust dg directives to suit.\n\t* gcc.target/powerpc/sse4_1-blendps-2.c: Likewise.\n\t* gcc.target/powerpc/sse4_1-blendps.c: Likewise.\n\t* gcc.target/powerpc/sse4_1-blendvpd.c: Likewise.", "tree": {"sha": "d51c04ab0fdb5e5860a7756eb9aa92baeba74eb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d51c04ab0fdb5e5860a7756eb9aa92baeba74eb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d352c68e8c8b642a36a6bcfc7f6b5dba11ac748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d352c68e8c8b642a36a6bcfc7f6b5dba11ac748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d352c68e8c8b642a36a6bcfc7f6b5dba11ac748"}], "stats": {"total": 325, "additions": 325, "deletions": 0}, "files": [{"sha": "ca1780471fa2bffe710d52c20197eb38857912cc", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-blendpd.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-blendpd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-blendpd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-blendpd.c?ref=ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8", "patch": "@@ -0,0 +1,89 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define NUM 20\n+\n+#ifndef MASK\n+#define MASK 0x03\n+#endif\n+\n+static void\n+init_blendpd (double *src1, double *src2)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM * 2; i++)\n+    {\n+      src1[i] = i * i * sign;\n+      src2[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static int\n+check_blendpd (__m128d *dst, double *src1, double *src2)\n+{\n+  double tmp[2];\n+  int j;\n+\n+  memcpy (&tmp[0], src1, sizeof (tmp));\n+\n+  for(j = 0; j < 2; j++)\n+    if ((MASK & (1 << j)))\n+      tmp[j] = src2[j];\n+\n+  return memcmp (dst, &tmp[0], sizeof (tmp));\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m128d x, y;\n+  union\n+    {\n+      __m128d x[NUM];\n+      double d[NUM * 2];\n+    } dst, src1, src2;\n+  union\n+    {\n+      __m128d x;\n+      double d[2];\n+    } src3;\n+  int i;\n+\n+  init_blendpd (src1.d, src2.d);\n+\n+  /* Check blendpd imm8, m128, xmm */\n+  for (i = 0; i < NUM; i++)\n+    {\n+      dst.x[i] = _mm_blend_pd (src1.x[i], src2.x[i], MASK);\n+      if (check_blendpd (&dst.x[i], &src1.d[i * 2], &src2.d[i * 2]))\n+\tabort ();\n+    }\n+    \n+  /* Check blendpd imm8, xmm, xmm */\n+  src3.x = _mm_setzero_pd ();\n+\n+  x = _mm_blend_pd (dst.x[2], src3.x, MASK);\n+  y = _mm_blend_pd (src3.x, dst.x[2], MASK);\n+\n+  if (check_blendpd (&x, &dst.d[4], &src3.d[0]))\n+    abort ();\n+\n+  if (check_blendpd (&y, &src3.d[0], &dst.d[4]))\n+    abort ();\n+}"}, {"sha": "768b6e64bbaed10389f079ba100c4da836f812b2", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-blendps-2.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-blendps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-blendps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-blendps-2.c?ref=ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+#include <stdlib.h>\n+\n+#define NUM 20\n+\n+#undef MASK\n+#define MASK 0xe\n+\n+static void\n+init_blendps (float *src1, float *src2)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM * 4; i++)\n+    {\n+      src1[i] = i * i * sign;\n+      src2[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static int\n+check_blendps (__m128 *dst, float *src1, float *src2)\n+{\n+  float tmp[4];\n+  int j;\n+\n+  memcpy (&tmp[0], src1, sizeof (tmp));\n+  for (j = 0; j < 4; j++)\n+    if ((MASK & (1 << j)))\n+      tmp[j] = src2[j];\n+\n+  return memcmp (dst, &tmp[0], sizeof (tmp));\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  __m128 x, y;\n+  union\n+    {\n+      __m128 x[NUM];\n+      float f[NUM * 4];\n+    } dst, src1, src2;\n+  union\n+    {\n+      __m128 x;\n+      float f[4];\n+    } src3;\n+  int i;\n+\n+  init_blendps (src1.f, src2.f);\n+\n+  for (i = 0; i < 4; i++)\n+    src3.f[i] = (int) rand ();\n+\n+  /* Check blendps imm8, m128, xmm */\n+  for (i = 0; i < NUM; i++)\n+    {\n+      dst.x[i] = _mm_blend_ps (src1.x[i], src2.x[i], MASK); \n+      if (check_blendps (&dst.x[i], &src1.f[i * 4], &src2.f[i * 4]))\n+\tabort ();\n+    }\n+    \n+   /* Check blendps imm8, xmm, xmm */\n+  x = _mm_blend_ps (dst.x[2], src3.x, MASK);\n+  y = _mm_blend_ps (src3.x, dst.x[2], MASK);\n+\n+  if (check_blendps (&x, &dst.f[8], &src3.f[0]))\n+    abort ();\n+\n+  if (check_blendps (&y, &src3.f[0], &dst.f[8]))\n+    abort ();\n+}"}, {"sha": "2f114b69a84b9c562e937c3b86767ffb6a42bb2f", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-blendps.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-blendps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-blendps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-blendps.c?ref=ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8", "patch": "@@ -0,0 +1,90 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+#include <stdlib.h>\n+\n+#define NUM 20\n+\n+#ifndef MASK\n+#define MASK 0x0f\n+#endif\n+\n+static void\n+init_blendps (float *src1, float *src2)\n+{\n+  int i, sign = 1;\n+\n+  for (i = 0; i < NUM * 4; i++)\n+    {\n+      src1[i] = i * i * sign;\n+      src2[i] = (i + 20) * sign;\n+      sign = -sign;\n+    }\n+}\n+\n+static int\n+check_blendps (__m128 *dst, float *src1, float *src2)\n+{\n+  float tmp[4];\n+  int j;\n+\n+  memcpy (&tmp[0], src1, sizeof (tmp));\n+  for (j = 0; j < 4; j++)\n+    if ((MASK & (1 << j)))\n+      tmp[j] = src2[j];\n+\n+  return memcmp (dst, &tmp[0], sizeof (tmp));\n+}\n+\n+static void\n+TEST (void)\n+{\n+  __m128 x, y;\n+  union\n+    {\n+      __m128 x[NUM];\n+      float f[NUM * 4];\n+    } dst, src1, src2;\n+  union\n+    {\n+      __m128 x;\n+      float f[4];\n+    } src3;\n+  int i;\n+\n+  init_blendps (src1.f, src2.f);\n+\n+  for (i = 0; i < 4; i++)\n+    src3.f[i] = (int) rand ();\n+\n+  /* Check blendps imm8, m128, xmm */\n+  for (i = 0; i < NUM; i++)\n+    {\n+      dst.x[i] = _mm_blend_ps (src1.x[i], src2.x[i], MASK); \n+      if (check_blendps (&dst.x[i], &src1.f[i * 4], &src2.f[i * 4]))\n+\tabort ();\n+    }\n+    \n+   /* Check blendps imm8, xmm, xmm */\n+  x = _mm_blend_ps (dst.x[2], src3.x, MASK);\n+  y = _mm_blend_ps (src3.x, dst.x[2], MASK);\n+\n+  if (check_blendps (&x, &dst.f[8], &src3.f[0]))\n+    abort ();\n+\n+  if (check_blendps (&y, &src3.f[0], &dst.f[8]))\n+    abort ();\n+}"}, {"sha": "b82cd28848a67f2e3fd8f3ef6a363e620301e2bd", "filename": "gcc/testsuite/gcc.target/powerpc/sse4_1-blendvpd.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-blendvpd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-blendvpd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fsse4_1-blendvpd.c?ref=ed04cf6d73e233c74c4e55c27f1cbd89ae4710e8", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-O2 -mpower8-vector -Wno-psabi\" } */\n+\n+#include \"sse4_1-check.h\"\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define NUM 20\n+\n+static void\n+init_blendvpd (double *src1, double *src2, double *mask)\n+{\n+  int i, msk, sign = 1; \n+\n+  msk = -1;\n+  for (i = 0; i < NUM * 2; i++)\n+    {\n+      if((i % 2) == 0)\n+\tmsk++;\n+      src1[i] = i* (i + 1) * sign;\n+      src2[i] = (i + 20) * sign;\n+      mask[i] = (i + 120) * i;\n+      if( (msk & (1 << (i % 2))))\n+\tmask[i] = -mask[i];\n+      sign = -sign;\n+    }\n+}\n+\n+static int\n+check_blendvpd (__m128d *dst, double *src1, double *src2,\n+\t\tdouble *mask)\n+{\n+  double tmp[2];\n+  int j;\n+\n+  memcpy (&tmp[0], src1, sizeof (tmp));\n+  for (j = 0; j < 2; j++)\n+    if (mask [j] < 0.0)\n+      tmp[j] = src2[j];\n+\n+  return memcmp (dst, &tmp[0], sizeof (tmp));\n+}\n+\n+static void\n+sse4_1_test (void)\n+{\n+  union\n+    {\n+      __m128d x[NUM];\n+      double d[NUM * 2];\n+    } dst, src1, src2, mask;\n+  int i;\n+\n+  init_blendvpd (src1.d, src2.d, mask.d);\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      dst.x[i] = _mm_blendv_pd (src1.x[i], src2.x[i], mask.x[i]);\n+      if (check_blendvpd (&dst.x[i], &src1.d[i * 2], &src2.d[i * 2],\n+\t\t\t  &mask.d[i * 2]))\n+\tabort ();\n+    }\n+}"}]}