{"sha": "f10a91352f83232394646df5a67bdb8f4366a067", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEwYTkxMzUyZjgzMjMyMzk0NjQ2ZGY1YTY3YmRiOGY0MzY2YTA2Nw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-08-08T18:13:00Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-08-08T18:13:00Z"}, "message": "[PATCH] line-map include-from representation\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-08/msg00554.html\n\tMake linemap::included_from a location\n\tlibcpp/\n\t* include/line-map.h (struct line_map_ordinary): Replace\n\tincluded_from map index with included_at source_location.\n\t(ORDINARY_MAP_INCLUDER_FILE_INDEX): Delete.\n\t(LAST_SOURCE_LINE_LOCATION): Delete.\n\t(LAST_SOURCE_LINE, LAST_SOURCE_COLUMN): Delete.\n\t(linemap_included_from): New.\n\t(linemap_included_from_linemap): Declare.\n\t(MAIN_FILE_P): Adjust.\n\t* line-map.c (linemap_included_from_linemap): New.\n\t(lonemap_check_files_exited): Use linemap_included_at.\n\t(linemap_add): Adjust inclusion setting.\n\t(linemap_dump, linemap_dump_location): Adjust.\n\t* directives.c (do_linemarker): Use linemap_included_at.\n\tgcc/\n\t* diagnostic.c (diagnostic_report_current_module): Use\n\tlinemap_included_from & linemap_included_from_linemap.\n\tgcc/c-family/\n\t* c-common.c (try_to_locate_new_include_inertion_point): Use\n\tlinemap_included_from_linemap.\n\t* c-lex.c (fe_file_change): Use linemap_included_from.\n\t* c-ppoutput.c (pp_file_change): Likewise.\n\tgcc/fortran/\n\t* cpp.c (cb_file_change): Use linemap_included_from.\n\tgcc/testsuite/\n\t* c-c++-common/inc-from-1a.h, c-c++-common/inc-from-1b.h,\n\tc-c++-common/inc-from-1.c: New\n\nFrom-SVN: r263429", "tree": {"sha": "a4ec7ecbde7bfc84329e5a2bb1dc8dea689d7d31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4ec7ecbde7bfc84329e5a2bb1dc8dea689d7d31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f10a91352f83232394646df5a67bdb8f4366a067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10a91352f83232394646df5a67bdb8f4366a067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10a91352f83232394646df5a67bdb8f4366a067", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10a91352f83232394646df5a67bdb8f4366a067/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a801991954f70fb9470502d305065719849c5660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a801991954f70fb9470502d305065719849c5660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a801991954f70fb9470502d305065719849c5660"}], "stats": {"total": 188, "additions": 101, "deletions": 87}, "files": [{"sha": "64704bcd6d80b5559fb34c6b8687a58f055d0e3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -1,3 +1,8 @@\n+2018-08-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* diagnostic.c (diagnostic_report_current_module): Use\n+\tlinemap_included_from & linemap_included_from_linemap.\n+\n 2018-08-08  Hongbo Zhang  <hongbo.zhang@linaro.org>\n \n \t* config/aarch64/aarch64-cores.def: Add phecda core."}, {"sha": "aa7aada317af42c4b163c504da3593add0a0b31d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -1,3 +1,10 @@\n+2018-08-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-common.c (try_to_locate_new_include_inertion_point): Use\n+\tlinemap_included_from_linemap.\n+\t* c-lex.c (fe_file_change): Use linemap_included_from.\n+\t* c-ppoutput.c (pp_file_change): Likewise.\n+\n 2018-08-01  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/86650"}, {"sha": "91e60f3268a8bf7a2e445dc8ad5e3e11676a5b74", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -8413,8 +8413,8 @@ try_to_locate_new_include_insertion_point (const char *file, location_t loc)\n       const line_map_ordinary *ord_map\n \t= LINEMAPS_ORDINARY_MAP_AT (line_table, i);\n \n-      const line_map_ordinary *from = INCLUDED_FROM (line_table, ord_map);\n-      if (from)\n+      if (const line_map_ordinary *from\n+\t  = linemap_included_from_linemap (line_table, ord_map))\n \tif (from->to_file == file)\n \t  {\n \t    last_include_ord_map = from;"}, {"sha": "ac58335cf3ad908509c321556402cb98b378826e", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -199,7 +199,7 @@ fe_file_change (const line_map_ordinary *new_map)\n \t we already did in compile_file.  */\n       if (!MAIN_FILE_P (new_map))\n \t{\n-\t  unsigned int included_at = LAST_SOURCE_LINE_LOCATION (new_map - 1);\n+\t  location_t included_at = linemap_included_from (new_map);\n \t  int line = 0;\n \t  if (included_at > BUILTINS_LOCATION)\n \t    line = SOURCE_LINE (new_map - 1, included_at);"}, {"sha": "b8fc1c6dad931c1f53dee78082a3034a0e241085", "filename": "gcc/c-family/c-ppoutput.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Fc-family%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Fc-family%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.c?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -663,11 +663,9 @@ pp_file_change (const line_map_ordinary *map)\n \t  /* Bring current file to correct line when entering a new file.  */\n \t  if (map->reason == LC_ENTER)\n \t    {\n-\t      const line_map_ordinary *from = INCLUDED_FROM (line_table, map);\n-\t      maybe_print_line (LAST_SOURCE_LINE_LOCATION (from));\n+\t      maybe_print_line (linemap_included_from (map));\n+\t      flags = \" 1\";\n \t    }\n-\t  if (map->reason == LC_ENTER)\n-\t    flags = \" 1\";\n \t  else if (map->reason == LC_LEAVE)\n \t    flags = \" 2\";\n \t  print_line (map->start_location, flags);"}, {"sha": "3d7f164f94ed6e2b5ae44be3599e94d8e4099326", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -590,9 +590,10 @@ diagnostic_report_current_module (diagnostic_context *context, location_t where)\n \t  bool first = true;\n \t  do\n \t    {\n-\t      map = INCLUDED_FROM (line_table, map);\n+\t      where = linemap_included_from (map);\n+\t      map = linemap_included_from_linemap (line_table, map);\n \t      const char *line_col\n-\t\t= maybe_line_and_column (LAST_SOURCE_LINE (map),\n+\t\t= maybe_line_and_column (SOURCE_LINE (map, where),\n \t\t\t\t\t first && context->show_column\n \t\t\t\t\t ? SOURCE_COLUMN (map, where) : 0);\n \t      static const char *const msgs[] ="}, {"sha": "705150962e9c78d23469971070e670a003a1c82a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -1,3 +1,7 @@\n+2018-08-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cpp.c (cb_file_change): Use linemap_included_from.\n+\n 2018-08-07  Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* trans-stmt.h: Remove stale reference to trans-openacc.c."}, {"sha": "4320461d07c940fcacd7b9c05336f3d057aac721", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -881,10 +881,7 @@ cb_file_change (cpp_reader * ARG_UNUSED (pfile), const line_map_ordinary *map)\n \t{\n \t  /* Bring current file to correct line when entering a new file.  */\n \t  if (map->reason == LC_ENTER)\n-\t    {\n-\t      const line_map_ordinary *from = INCLUDED_FROM (line_table, map);\n-\t      maybe_print_line (LAST_SOURCE_LINE_LOCATION (from));\n-\t    }\n+\t    maybe_print_line (linemap_included_from (map));\n \t  if (map->reason == LC_ENTER)\n \t    flags = \" 1\";\n \t  else if (map->reason == LC_LEAVE)"}, {"sha": "12f842592d3747c3116211ae9928fdff3de87e47", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -1,3 +1,8 @@\n+2018-08-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-c++-common/inc-from-1a.h, c-c++-common/inc-from-1b.h,\n+\tc-c++-common/inc-from-1.c: New\n+\n 2018-08-08  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \tPR target/85295"}, {"sha": "7e95c2ad62645f40867a907ba48f08535cc6bb63", "filename": "gcc/testsuite/c-c++-common/inc-from-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Finc-from-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Finc-from-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Finc-from-1.c?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -0,0 +1,5 @@\n+#include \"inc-from-1b.h\"\n+\n+/* { dg-error \"\" \"\"  { target *-*-* } 1 } */\n+\n+/* { dg-regexp \"In file included from \\[^\\n]*inc-from-1b.h:1,\\n *from \\[^\\n]*inc-from-1.c:1:\\n\" } */"}, {"sha": "684e8122bf02367cbc2b87977107ed685025463c", "filename": "gcc/testsuite/c-c++-common/inc-from-1a.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Finc-from-1a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Finc-from-1a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Finc-from-1a.h?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -0,0 +1 @@\n+void bleah;"}, {"sha": "40fae4acc46323b6ad97d68d114a63c57d0ade3f", "filename": "gcc/testsuite/c-c++-common/inc-from-1b.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Finc-from-1b.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Finc-from-1b.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Finc-from-1b.h?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -0,0 +1 @@\n+#include \"inc-from-1a.h\""}, {"sha": "3eaebfd812f28d6a8c7f2b2127be0def45832650", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -1,3 +1,21 @@\n+2018-08-08  Nathan Sidwell  <nathan@acm.org>\n+\n+\tMake linemap::included_from a location\n+\tlibcpp/\n+\t* include/line-map.h (struct line_map_ordinary): Replace\n+\tincluded_from map index with included_at source_location.\n+\t(ORDINARY_MAP_INCLUDER_FILE_INDEX): Delete.\n+\t(LAST_SOURCE_LINE_LOCATION): Delete.\n+\t(LAST_SOURCE_LINE, LAST_SOURCE_COLUMN): Delete.\n+\t(linemap_included_from): New.\n+\t(linemap_included_from_linemap): Declare.\n+\t(MAIN_FILE_P): Adjust.\n+\t* line-map.c (linemap_included_from_linemap): New.\n+\t(lonemap_check_files_exited): Use linemap_included_at.\n+\t(linemap_add): Adjust inclusion setting.\n+\t(linemap_dump, linemap_dump_location): Adjust.\n+\t* directives.c (do_linemarker): Use linemap_included_at.\n+\n 2018-08-07  Nathan Sidwell  <nathan@acm.org>\n \n \t* line-map.c: (linemap_init): Set default allocator here."}, {"sha": "352c59150d7bcb4e4d6c83b7487efce96ac6fbb0", "filename": "libcpp/directives.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -1088,10 +1088,10 @@ do_linemarker (cpp_reader *pfile)\n       /* Reread map since cpp_get_token can invalidate it with a\n \t reallocation.  */\n       map = LINEMAPS_LAST_ORDINARY_MAP (line_table);\n-      const line_map_ordinary *from;      \n+      const line_map_ordinary *from\n+\t= linemap_included_from_linemap (line_table, map);\n       if (MAIN_FILE_P (map)\n-\t  || (new_file\n-\t      && (from = INCLUDED_FROM (pfile->line_table, map)) != NULL\n+\t  || (from\n \t      && filename_cmp (ORDINARY_MAP_FILE_NAME (from), new_file) != 0))\n \t{\n \t  cpp_warning (pfile, CPP_W_NONE,"}, {"sha": "1061d201389facce8e12ed38b1fc16d20da3a595", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 11, "deletions": 50, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -440,10 +440,10 @@ struct GTY((tag (\"1\"))) line_map_ordinary : public line_map {\n   const char *to_file;\n   linenum_type to_line;\n \n-  /* An index into the set that gives the line mapping at whose end\n-     the current one was included.  File(s) at the bottom of the\n-     include stack have this set to -1.  */\n-  int included_from;\n+  /* Location from whence this line map was included.  For regular\n+     #includes, this location will be the last location of a map.  For\n+     outermost file, this is 0.  */\n+  source_location included_from;\n \n   /* Size is 20 or 24 bytes, no padding  */\n };\n@@ -634,17 +634,6 @@ ORDINARY_MAP_STARTING_LINE_NUMBER (const line_map_ordinary *ord_map)\n   return ord_map->to_line;\n }\n \n-/* Get the index of the ordinary map at whose end\n-   ordinary map MAP was included.\n-\n-   File(s) at the bottom of the include stack have this set.  */\n-\n-inline int\n-ORDINARY_MAP_INCLUDER_FILE_INDEX (const line_map_ordinary *ord_map)\n-{\n-  return ord_map->included_from;\n-}\n-\n /* Return a positive value if map encodes locations from a system\n    header, 0 otherwise. Returns 1 if ordinary map MAP encodes locations\n    in a system header and 2 if it encodes locations in a C system header\n@@ -1192,51 +1181,23 @@ SOURCE_COLUMN (const line_map_ordinary *ord_map, source_location loc)\n \t  & ((1 << ord_map->m_column_and_range_bits) - 1)) >> ord_map->m_range_bits;\n }\n \n-/* Return the location of the last source line within an ordinary\n-   map.  */\n-inline source_location\n-LAST_SOURCE_LINE_LOCATION (const line_map_ordinary *map)\n-{\n-  return (((map[1].start_location - 1\n-\t    - map->start_location)\n-\t   & ~((1 << map->m_column_and_range_bits) - 1))\n-\t  + map->start_location);\n-}\n-\n-/* Returns the last source line number within an ordinary map.  This\n-   is the (last) line of the #include, or other directive, that caused\n-   a map change.  */\n-inline linenum_type\n-LAST_SOURCE_LINE (const line_map_ordinary *map)\n-{\n-  return SOURCE_LINE (map, LAST_SOURCE_LINE_LOCATION (map));\n-}\n \n-/* Return the last column number within an ordinary map.  */\n-\n-inline linenum_type\n-LAST_SOURCE_COLUMN (const line_map_ordinary *map)\n+inline source_location\n+linemap_included_from (const line_map_ordinary *ord_map)\n {\n-  return SOURCE_COLUMN (map, LAST_SOURCE_LINE_LOCATION (map));\n+  return ord_map->included_from;\n }\n \n-/* Returns the map a given map was included from, or NULL if the map\n-   belongs to the main file, i.e, a file that wasn't included by\n-   another one.  */\n-inline line_map_ordinary *\n-INCLUDED_FROM (struct line_maps *set, const line_map_ordinary *ord_map)\n-{\n-  return ((ord_map->included_from == -1)\n-\t  ? NULL\n-\t  : LINEMAPS_ORDINARY_MAP_AT (set, ord_map->included_from));\n-}\n+/* The linemap containing the included-from location of MAP.  */\n+const line_map_ordinary *linemap_included_from_linemap\n+  (line_maps *set, const line_map_ordinary *map);\n \n /* True if the map is at the bottom of the include stack.  */\n \n inline bool\n MAIN_FILE_P (const line_map_ordinary *ord_map)\n {\n-  return ord_map->included_from < 0;\n+  return ord_map->included_from == 0;\n }\n \n /* Encode and return a source_location from a column number. The"}, {"sha": "555cd129a9c5541c012ed6e9168465201de18213", "filename": "libcpp/line-map.c", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10a91352f83232394646df5a67bdb8f4366a067/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10a91352f83232394646df5a67bdb8f4366a067/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=f10a91352f83232394646df5a67bdb8f4366a067", "patch": "@@ -355,17 +355,25 @@ linemap_init (struct line_maps *set,\n   set->builtin_location = builtin_location;\n }\n \n+/* Return the ordinary line map from whence MAP was included.  Returns\n+   NULL if MAP was not an include.  */\n+\n+const line_map_ordinary *\n+linemap_included_from_linemap (line_maps *set, const line_map_ordinary *map)\n+{\n+  return linemap_ordinary_map_lookup (set, linemap_included_from (map));\n+}\n+\n /* Check for and warn about line_maps entered but not exited.  */\n \n void\n linemap_check_files_exited (struct line_maps *set)\n {\n-  const line_map_ordinary *map;\n   /* Depending upon whether we are handling preprocessed input or\n      not, this can be a user error or an ICE.  */\n-  for (map = LINEMAPS_LAST_ORDINARY_MAP (set);\n+  for (const line_map_ordinary *map = LINEMAPS_LAST_ORDINARY_MAP (set);\n        ! MAIN_FILE_P (map);\n-       map = INCLUDED_FROM (set, map))\n+       map = linemap_included_from_linemap (set, map))\n     fprintf (stderr, \"line-map.c: file \\\"%s\\\" entered but not left\\n\",\n \t     ORDINARY_MAP_FILE_NAME (map));\n }\n@@ -494,19 +502,19 @@ linemap_add (struct line_maps *set, enum lc_reason reason,\n   if (reason == LC_RENAME_VERBATIM)\n     reason = LC_RENAME;\n \n+  const line_map_ordinary *from = NULL;\n   if (reason == LC_LEAVE)\n     {\n       /* When we are just leaving an \"included\" file, and jump to the next\n \t location inside the \"includer\" right after the #include\n \t \"included\", this variable points the map in use right before the\n \t #include \"included\", inside the same \"includer\" file.  */\n-      line_map_ordinary *from;\n \n       linemap_assert (!MAIN_FILE_P (map - 1));\n       /* (MAP - 1) points to the map we are leaving. The\n \t map from which (MAP - 1) got included should be the map\n \t that comes right before MAP in the same file.  */\n-      from = INCLUDED_FROM (set, map - 1);\n+      from = linemap_included_from_linemap (set, map - 1);\n \n       /* A TO_FILE of NULL is special - we use the natural values.  */\n       if (to_file == NULL)\n@@ -538,19 +546,24 @@ linemap_add (struct line_maps *set, enum lc_reason reason,\n \n   if (reason == LC_ENTER)\n     {\n-      map->included_from =\n-\tset->depth == 0 ? -1 : (int) (LINEMAPS_ORDINARY_USED (set) - 2);\n+      if (set->depth == 0)\n+\tmap->included_from = 0;\n+      else\n+\t/* The location of the end of the just-closed map.  */\n+\tmap->included_from\n+\t  = (((map[0].start_location - 1 - map[-1].start_location)\n+\t      & ~((1 << map[-1].m_column_and_range_bits) - 1))\n+\t     + map[-1].start_location);\n       set->depth++;\n       if (set->trace_includes)\n \ttrace_include (set, map);\n     }\n   else if (reason == LC_RENAME)\n-    map->included_from = ORDINARY_MAP_INCLUDER_FILE_INDEX (&map[-1]);\n+    map->included_from = linemap_included_from (&map[-1]);\n   else if (reason == LC_LEAVE)\n     {\n       set->depth--;\n-      map->included_from =\n-\tORDINARY_MAP_INCLUDER_FILE_INDEX (INCLUDED_FROM (set, map - 1));\n+      map->included_from = linemap_included_from (from);\n     }\n \n   return map;\n@@ -1761,17 +1774,13 @@ linemap_dump (FILE *stream, struct line_maps *set, unsigned ix, bool is_macro)\n   if (!is_macro)\n     {\n       const line_map_ordinary *ord_map = linemap_check_ordinary (map);\n-      unsigned includer_ix;\n-      const line_map_ordinary *includer_map;\n-\n-      includer_ix = ORDINARY_MAP_INCLUDER_FILE_INDEX (ord_map);\n-      includer_map = includer_ix < LINEMAPS_ORDINARY_USED (set)\n-\t\t     ? LINEMAPS_ORDINARY_MAP_AT (set, includer_ix)\n-\t\t     : NULL;\n+      const line_map_ordinary *includer_map\n+\t= linemap_included_from_linemap (set, ord_map);\n \n       fprintf (stream, \"File: %s:%d\\n\", ORDINARY_MAP_FILE_NAME (ord_map),\n \t       ORDINARY_MAP_STARTING_LINE_NUMBER (ord_map));\n-      fprintf (stream, \"Included from: [%d] %s\\n\", includer_ix,\n+      fprintf (stream, \"Included from: [%d] %s\\n\",\n+\t       includer_map ? int (includer_map - set->info_ordinary.maps) : -1,\n \t       includer_map ? ORDINARY_MAP_FILE_NAME (includer_map) : \"None\");\n     }\n   else\n@@ -1821,9 +1830,11 @@ linemap_dump_location (struct line_maps *set,\n       if (e)\n \tfrom = \"N/A\";\n       else\n-\tfrom = (INCLUDED_FROM (set, map))\n-\t  ? LINEMAP_FILE (INCLUDED_FROM (set, map))\n-\t  : \"<NULL>\";\n+\t{\n+\t  const line_map_ordinary *from_map\n+\t    = linemap_included_from_linemap (set, map);\n+\t  from = from_map ? LINEMAP_FILE (from_map) : \"<NULL>\";\n+\t}\n     }\n \n   /* P: path, L: line, C: column, S: in-system-header, M: map address,"}]}