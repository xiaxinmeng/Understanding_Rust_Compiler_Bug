{"sha": "3fb304e7e478d72e3e90492bfa57b6af9c2942df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZiMzA0ZTdlNDc4ZDcyZTNlOTA0OTJiZmE1N2I2YWY5YzI5NDJkZg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-04-22T12:01:30Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-04-22T12:01:30Z"}, "message": "ir.texi: Document complex number representation.\n\n2000-04-22  Gabriel Dos Reis <gdr@codesourcery.com>\n\n        * ir.texi:  Document complex number representation.\n\nFrom-SVN: r33338", "tree": {"sha": "8ee9bb432992c52856ec3df3869953c2b3de5665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ee9bb432992c52856ec3df3869953c2b3de5665"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fb304e7e478d72e3e90492bfa57b6af9c2942df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb304e7e478d72e3e90492bfa57b6af9c2942df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fb304e7e478d72e3e90492bfa57b6af9c2942df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb304e7e478d72e3e90492bfa57b6af9c2942df/comments", "author": null, "committer": null, "parents": [{"sha": "345ed1fe96a21671979f900d0d9075f225804a7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/345ed1fe96a21671979f900d0d9075f225804a7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/345ed1fe96a21671979f900d0d9075f225804a7a"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "8561e607454c8ba85b9659324ec5973421a6f24e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb304e7e478d72e3e90492bfa57b6af9c2942df/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb304e7e478d72e3e90492bfa57b6af9c2942df/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3fb304e7e478d72e3e90492bfa57b6af9c2942df", "patch": "@@ -1,3 +1,7 @@\n+2000-04-22  Gabriel Dos Reis <gdr@codesourcery.com>\n+\n+\t        * ir.texi:  Document complex number representation.\n+\t\n 2000-04-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* rtti.c (init_rtti_processing): Set tinfo_var_id in new-abi."}, {"sha": "f3bb39a8cec408a33dbc2f22a7d8b5af6ecdc459", "filename": "gcc/cp/ir.texi", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fb304e7e478d72e3e90492bfa57b6af9c2942df/gcc%2Fcp%2Fir.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fb304e7e478d72e3e90492bfa57b6af9c2942df/gcc%2Fcp%2Fir.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fir.texi?ref=3fb304e7e478d72e3e90492bfa57b6af9c2942df", "patch": "@@ -442,7 +442,8 @@ double} types.  The number of bits in the floating-point representation\n is given by @code{TYPE_PRECISION}, as in the @code{INTEGER_TYPE} case.\n \n @item COMPLEX_TYPE\n-FIXME: The __complex__ extension is supported in G++.  Document.\n+Used to represent GCC builtin @code{__complex__} data types.  The \n+@code{TREE_TYPE} is the type of the real and imaginary parts.\n \n @item ENUMERAL_TYPE\n Used to represent an enumeration type.  The @code{TYPE_PRECISION} gives\n@@ -1459,6 +1460,7 @@ The @code{WHILE_BODY} is the body of the loop.\n @findex tree_int_cst_lt\n @findex tree_int_cst_equal\n @tindex REAL_CST\n+@tindex COMPLEX_CST\n @tindex STRING_CST\n @findex TREE_STRING_LENGTH\n @findex TREE_STRING_POINTER\n@@ -1473,6 +1475,10 @@ The @code{WHILE_BODY} is the body of the loop.\n @tindex INDIRECT_REF\n @tindex FIX_TRUNC_EXPR\n @tindex FLOAT_EXPR\n+@tindex COMPLEX_EXPR\n+@tindex CONJ_EXPR\n+@tindex REALPART_EXPR\n+@tindex IMAGPART_EXPR\n @tindex NOP_EXPR\n @tindex CONVERT_EXPR\n @tindex THROW_EXPR\n@@ -1591,6 +1597,12 @@ its bit-pattern.\n FIXME: Talk about how to obtain representations of this constant, do\n comparisons, and so forth.\n \n+@item COMPLEX_CST\n+These nodes are used to represent complex number constants, that is a\n+@code{__complex__} whose parts are constant nodes.  The \n+@code{TREE_REALPART} and @code@TREE_IMAGPART} return the real and the\n+imaginary parts respectively.\n+\n @item STRING_CST\n These nodes represent string-constants.  The @code{TREE_STRING_LENGTH}\n returns the length of the string, as an @code{int}.  The\n@@ -1682,6 +1694,19 @@ the complete expression will have a floating-point type.\n FIXME: How is the operand supposed to be rounded?  Is this dependent on\n -mieee?\n \n+@item COMPLEX_EXPR\n+These nodes are used to represent complex numbers constructed from two\n+expressions of the same (integer or real) type.  The first operand is the\n+real part and the second operand is the imaginary part.\n+\n+@item CONJ_EXPR\n+These nodes represent the conjugate of their operand.\n+\n+@item REALPART_EXPR\n+@item IMAGPART_EXPR\n+These nodes represent respectively the real and the imaginary parts\n+of complex numbers (their sole argument).\n+\n @item NON_LVALUE_EXPR\n These nodes indicate that their one and only operand is not an lvalue.\n A back-end can treat these identically to the single operand."}]}