{"sha": "fa9fd689307b465aad4420f73b453198a9ac4afd", "node_id": "C_kwDOANBUbNoAKGZhOWZkNjg5MzA3YjQ2NWFhZDQ0MjBmNzNiNDUzMTk4YTlhYzRhZmQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-06T00:17:04Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-06T00:17:04Z"}, "message": "Daily bump.", "tree": {"sha": "19637fada5ece7bad39e30976e1aa0349164c48a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19637fada5ece7bad39e30976e1aa0349164c48a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa9fd689307b465aad4420f73b453198a9ac4afd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9fd689307b465aad4420f73b453198a9ac4afd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa9fd689307b465aad4420f73b453198a9ac4afd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9fd689307b465aad4420f73b453198a9ac4afd/comments", "author": null, "committer": null, "parents": [{"sha": "6aa1f40a3263741d964ef4716e85a0df5cec83b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa1f40a3263741d964ef4716e85a0df5cec83b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa1f40a3263741d964ef4716e85a0df5cec83b6"}], "stats": {"total": 694, "additions": 693, "deletions": 1}, "files": [{"sha": "6bfb1f15ee5a6e2d9266efbd91a4b82956832f1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 560, "deletions": 0, "changes": 560, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9fd689307b465aad4420f73b453198a9ac4afd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9fd689307b465aad4420f73b453198a9ac4afd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa9fd689307b465aad4420f73b453198a9ac4afd", "patch": "@@ -1,3 +1,563 @@\n+2023-03-05  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vsetvl.cc (reg_available_p): Fix bug.\n+\t(pass_vsetvl::backward_demand_fusion): Ditto.\n+\n+2023-03-05  Liao Shihua  <shihua@iscas.ac.cn>\n+\t    SiYu Wu  <siyu@isrc.iscas.ac.cn>\n+\n+\t* config/riscv/crypto.md (riscv_sm3p0_<mode>): Add ZKSED's and ZKSH's\n+\tinstructions.\n+\t(riscv_sm3p1_<mode>): New.\n+\t(riscv_sm4ed_<mode>): New.\n+\t(riscv_sm4ks_<mode>): New.\n+\t* config/riscv/riscv-builtins.cc (AVAIL): Add ZKSED's and ZKSH's AVAIL.\n+\t* config/riscv/riscv-scalar-crypto.def (RISCV_BUILTIN): Add ZKSED's and\n+\tZKSH's built-in functions.\n+\n+2023-03-05  Liao Shihua  <shihua@iscas.ac.cn>\n+\t    SiYu Wu  <siyu@isrc.iscas.ac.cn>\n+\n+\t* config/riscv/crypto.md (riscv_sha256sig0_<mode>): Add ZKNH's instructions.\n+\t(riscv_sha256sig1_<mode>): New.\n+\t(riscv_sha256sum0_<mode>): New.\n+\t(riscv_sha256sum1_<mode>): New.\n+\t(riscv_sha512sig0h): New.\n+\t(riscv_sha512sig0l): New.\n+\t(riscv_sha512sig1h): New.\n+\t(riscv_sha512sig1l): New.\n+\t(riscv_sha512sum0r): New.\n+\t(riscv_sha512sum1r): New.\n+\t(riscv_sha512sig0): New.\n+\t(riscv_sha512sig1): New.\n+\t(riscv_sha512sum0): New.\n+\t(riscv_sha512sum1): New.\n+\t* config/riscv/riscv-builtins.cc (AVAIL): And ZKNH's AVAIL.\n+\t* config/riscv/riscv-scalar-crypto.def (RISCV_BUILTIN): And ZKNH's\n+\tbuilt-in functions.\n+\t(DIRECT_BUILTIN): Add new.\n+\n+2023-03-05  Liao Shihua  <shihua@iscas.ac.cn>\n+\t    SiYu Wu  <siyu@isrc.iscas.ac.cn>\n+\n+\t* config/riscv/constraints.md (D03): Add constants of bs and rnum.\n+\t(DsA): New.\n+\t* config/riscv/crypto.md (riscv_aes32dsi): Add ZKND's and ZKNE's instructions.\n+\t(riscv_aes32dsmi): New.\n+\t(riscv_aes64ds): New.\n+\t(riscv_aes64dsm): New.\n+\t(riscv_aes64im): New.\n+\t(riscv_aes64ks1i): New.\n+\t(riscv_aes64ks2): New.\n+\t(riscv_aes32esi): New.\n+\t(riscv_aes32esmi): New.\n+\t(riscv_aes64es): New.\n+\t(riscv_aes64esm): New.\n+\t* config/riscv/riscv-builtins.cc (AVAIL): Add ZKND's and ZKNE's AVAIL.\n+\t* config/riscv/riscv-scalar-crypto.def (DIRECT_BUILTIN): Add ZKND's and\n+\tZKNE's built-in functions.\n+\n+2023-03-05  Liao Shihua  <shihua@iscas.ac.cn>\n+\t    SiYu Wu  <siyu@isrc.iscas.ac.cn>\n+\n+\t* config/riscv/bitmanip.md: Add ZBKB's instructions.\n+\t* config/riscv/riscv-builtins.cc (AVAIL): Add new.\n+\t* config/riscv/riscv.md: Add new type for crypto instructions.\n+\t* config/riscv/crypto.md: Add Scalar Cryptography extension's machine\n+\tdescription file.\n+\t* config/riscv/riscv-scalar-crypto.def: Add Scalar Cryptography\n+\textension's built-in function file.\n+\n+2023-03-05  Liao Shihua  <shihua@iscas.ac.cn>\n+\t    SiYu Wu  <siyu@isrc.iscas.ac.cn>\n+\n+\t* config/riscv/riscv-builtins.cc (RISCV_FTYPE_NAME2): New.\n+\t(RISCV_FTYPE_NAME3): New.\n+\t(RISCV_ATYPE_QI): New.\n+\t(RISCV_ATYPE_HI): New.\n+\t(RISCV_FTYPE_ATYPES2): New.\n+\t(RISCV_FTYPE_ATYPES3): New.\n+\t* config/riscv/riscv-ftypes.def (2): New.\n+\t(3): New.\n+\n+2023-03-05  Vineet Gupta  <vineetg@rivosinc.com>\n+\n+\t* config/riscv/riscv.cc (riscv_rtx_costs): Fixed IN_RANGE() to\n+\tuse exact_log2().\n+\n+2023-03-05  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\t    kito-cheng  <kito.cheng@sifive.com>\n+\n+\t* config/riscv/predicates.md (vector_any_register_operand): New predicate.\n+\t* config/riscv/riscv-c.cc (riscv_check_builtin_call): New function.\n+\t(riscv_register_pragmas): Add builtin function check call.\n+\t* config/riscv/riscv-protos.h (RVV_VUNDEF): Adapt macro.\n+\t(check_builtin_call): New function.\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class vundefined): New class.\n+\t(class vreinterpret): Ditto.\n+\t(class vlmul_ext): Ditto.\n+\t(class vlmul_trunc): Ditto.\n+\t(class vset): Ditto.\n+\t(class vget): Ditto.\n+\t(BASE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vluxei8): Change name.\n+\t(vluxei16): Ditto.\n+\t(vluxei32): Ditto.\n+\t(vluxei64): Ditto.\n+\t(vloxei8): Ditto.\n+\t(vloxei16): Ditto.\n+\t(vloxei32): Ditto.\n+\t(vloxei64): Ditto.\n+\t(vsuxei8): Ditto.\n+\t(vsuxei16): Ditto.\n+\t(vsuxei32): Ditto.\n+\t(vsuxei64): Ditto.\n+\t(vsoxei8): Ditto.\n+\t(vsoxei16): Ditto.\n+\t(vsoxei32): Ditto.\n+\t(vsoxei64): Ditto.\n+\t(vundefined): Add new intrinsic.\n+\t(vreinterpret): Ditto.\n+\t(vlmul_ext): Ditto.\n+\t(vlmul_trunc): Ditto.\n+\t(vset): Ditto.\n+\t(vget): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (struct return_mask_def): New class.\n+\t(struct narrow_alu_def): Ditto.\n+\t(struct reduc_alu_def): Ditto.\n+\t(struct vundefined_def): Ditto.\n+\t(struct misc_def): Ditto.\n+\t(struct vset_def): Ditto.\n+\t(struct vget_def): Ditto.\n+\t(SHAPE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-types.def (DEF_RVV_EEW8_INTERPRET_OPS): New def.\n+\t(DEF_RVV_EEW16_INTERPRET_OPS): Ditto.\n+\t(DEF_RVV_EEW32_INTERPRET_OPS): Ditto.\n+\t(DEF_RVV_EEW64_INTERPRET_OPS): Ditto.\n+\t(DEF_RVV_X2_VLMUL_EXT_OPS): Ditto.\n+\t(DEF_RVV_X4_VLMUL_EXT_OPS): Ditto.\n+\t(DEF_RVV_X8_VLMUL_EXT_OPS): Ditto.\n+\t(DEF_RVV_X16_VLMUL_EXT_OPS): Ditto.\n+\t(DEF_RVV_X32_VLMUL_EXT_OPS): Ditto.\n+\t(DEF_RVV_X64_VLMUL_EXT_OPS): Ditto.\n+\t(DEF_RVV_LMUL1_OPS): Ditto.\n+\t(DEF_RVV_LMUL2_OPS): Ditto.\n+\t(DEF_RVV_LMUL4_OPS): Ditto.\n+\t(vint16mf4_t): Ditto.\n+\t(vint16mf2_t): Ditto.\n+\t(vint16m1_t): Ditto.\n+\t(vint16m2_t): Ditto.\n+\t(vint16m4_t): Ditto.\n+\t(vint16m8_t): Ditto.\n+\t(vint32mf2_t): Ditto.\n+\t(vint32m1_t): Ditto.\n+\t(vint32m2_t): Ditto.\n+\t(vint32m4_t): Ditto.\n+\t(vint32m8_t): Ditto.\n+\t(vint64m1_t): Ditto.\n+\t(vint64m2_t): Ditto.\n+\t(vint64m4_t): Ditto.\n+\t(vint64m8_t): Ditto.\n+\t(vuint16mf4_t): Ditto.\n+\t(vuint16mf2_t): Ditto.\n+\t(vuint16m1_t): Ditto.\n+\t(vuint16m2_t): Ditto.\n+\t(vuint16m4_t): Ditto.\n+\t(vuint16m8_t): Ditto.\n+\t(vuint32mf2_t): Ditto.\n+\t(vuint32m1_t): Ditto.\n+\t(vuint32m2_t): Ditto.\n+\t(vuint32m4_t): Ditto.\n+\t(vuint32m8_t): Ditto.\n+\t(vuint64m1_t): Ditto.\n+\t(vuint64m2_t): Ditto.\n+\t(vuint64m4_t): Ditto.\n+\t(vuint64m8_t): Ditto.\n+\t(vint8mf4_t): Ditto.\n+\t(vint8mf2_t): Ditto.\n+\t(vint8m1_t): Ditto.\n+\t(vint8m2_t): Ditto.\n+\t(vint8m4_t): Ditto.\n+\t(vint8m8_t): Ditto.\n+\t(vuint8mf4_t): Ditto.\n+\t(vuint8mf2_t): Ditto.\n+\t(vuint8m1_t): Ditto.\n+\t(vuint8m2_t): Ditto.\n+\t(vuint8m4_t): Ditto.\n+\t(vuint8m8_t): Ditto.\n+\t(vint8mf8_t): Ditto.\n+\t(vuint8mf8_t): Ditto.\n+\t(vfloat32mf2_t): Ditto.\n+\t(vfloat32m1_t): Ditto.\n+\t(vfloat32m2_t): Ditto.\n+\t(vfloat32m4_t): Ditto.\n+\t(vfloat64m1_t): Ditto.\n+\t(vfloat64m2_t): Ditto.\n+\t(vfloat64m4_t): Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_TYPE): Ditto.\n+\t(DEF_RVV_EEW8_INTERPRET_OPS): Ditto.\n+\t(DEF_RVV_EEW16_INTERPRET_OPS): Ditto.\n+\t(DEF_RVV_EEW32_INTERPRET_OPS): Ditto.\n+\t(DEF_RVV_EEW64_INTERPRET_OPS): Ditto.\n+\t(DEF_RVV_X2_VLMUL_EXT_OPS): Ditto.\n+\t(DEF_RVV_X4_VLMUL_EXT_OPS): Ditto.\n+\t(DEF_RVV_X8_VLMUL_EXT_OPS): Ditto.\n+\t(DEF_RVV_X16_VLMUL_EXT_OPS): Ditto.\n+\t(DEF_RVV_X32_VLMUL_EXT_OPS): Ditto.\n+\t(DEF_RVV_X64_VLMUL_EXT_OPS): Ditto.\n+\t(DEF_RVV_LMUL1_OPS): Ditto.\n+\t(DEF_RVV_LMUL2_OPS): Ditto.\n+\t(DEF_RVV_LMUL4_OPS): Ditto.\n+\t(DEF_RVV_TYPE_INDEX): Ditto.\n+\t(required_extensions_p): Adapt for new intrinsic support/\n+\t(get_required_extensions): New function.\n+\t(check_required_extensions): Ditto.\n+\t(unsigned_base_type_p): Remove.\n+\t(rvv_arg_type_info::get_scalar_ptr_type): New function.\n+\t(get_mode_for_bitsize): Remove.\n+\t(rvv_arg_type_info::get_scalar_const_ptr_type): New function.\n+\t(rvv_arg_type_info::get_base_vector_type): Ditto.\n+\t(rvv_arg_type_info::get_function_type_index): Ditto.\n+\t(DEF_RVV_BASE_TYPE): New def.\n+\t(function_builder::apply_predication): New class.\n+\t(function_expander::mask_mode): Ditto.\n+\t(function_checker::function_checker): Ditto.\n+\t(function_checker::report_non_ice): Ditto.\n+\t(function_checker::report_out_of_range): Ditto.\n+\t(function_checker::require_immediate): Ditto.\n+\t(function_checker::require_immediate_range): Ditto.\n+\t(function_checker::check): Ditto.\n+\t(check_builtin_call): Ditto.\n+\t* config/riscv/riscv-vector-builtins.def (DEF_RVV_TYPE): New def.\n+\t(DEF_RVV_BASE_TYPE): Ditto.\n+\t(DEF_RVV_TYPE_INDEX): Ditto.\n+\t(vbool64_t): Ditto.\n+\t(vbool32_t): Ditto.\n+\t(vbool16_t): Ditto.\n+\t(vbool8_t): Ditto.\n+\t(vbool4_t): Ditto.\n+\t(vbool2_t): Ditto.\n+\t(vbool1_t): Ditto.\n+\t(vuint8mf8_t): Ditto.\n+\t(vuint8mf4_t): Ditto.\n+\t(vuint8mf2_t): Ditto.\n+\t(vuint8m1_t): Ditto.\n+\t(vuint8m2_t): Ditto.\n+\t(vint8m4_t): Ditto.\n+\t(vuint8m4_t): Ditto.\n+\t(vint8m8_t): Ditto.\n+\t(vuint8m8_t): Ditto.\n+\t(vint16mf4_t): Ditto.\n+\t(vuint16mf2_t): Ditto.\n+\t(vuint16m1_t): Ditto.\n+\t(vuint16m2_t): Ditto.\n+\t(vuint16m4_t): Ditto.\n+\t(vuint16m8_t): Ditto.\n+\t(vint32mf2_t): Ditto.\n+\t(vuint32m1_t): Ditto.\n+\t(vuint32m2_t): Ditto.\n+\t(vuint32m4_t): Ditto.\n+\t(vuint32m8_t): Ditto.\n+\t(vuint64m1_t): Ditto.\n+\t(vuint64m2_t): Ditto.\n+\t(vuint64m4_t): Ditto.\n+\t(vuint64m8_t): Ditto.\n+\t(vfloat32mf2_t): Ditto.\n+\t(vfloat32m1_t): Ditto.\n+\t(vfloat32m2_t): Ditto.\n+\t(vfloat32m4_t): Ditto.\n+\t(vfloat32m8_t): Ditto.\n+\t(vfloat64m1_t): Ditto.\n+\t(vfloat64m4_t): Ditto.\n+\t(vector): Move it def.\n+\t(scalar): Ditto.\n+\t(mask): Ditto.\n+\t(signed_vector): Ditto.\n+\t(unsigned_vector): Ditto.\n+\t(unsigned_scalar): Ditto.\n+\t(vector_ptr): Ditto.\n+\t(scalar_ptr): Ditto.\n+\t(scalar_const_ptr): Ditto.\n+\t(void): Ditto.\n+\t(size): Ditto.\n+\t(ptrdiff): Ditto.\n+\t(unsigned_long): Ditto.\n+\t(long): Ditto.\n+\t(eew8_index): Ditto.\n+\t(eew16_index): Ditto.\n+\t(eew32_index): Ditto.\n+\t(eew64_index): Ditto.\n+\t(shift_vector): Ditto.\n+\t(double_trunc_vector): Ditto.\n+\t(quad_trunc_vector): Ditto.\n+\t(oct_trunc_vector): Ditto.\n+\t(double_trunc_scalar): Ditto.\n+\t(double_trunc_signed_vector): Ditto.\n+\t(double_trunc_unsigned_vector): Ditto.\n+\t(double_trunc_unsigned_scalar): Ditto.\n+\t(double_trunc_float_vector): Ditto.\n+\t(float_vector): Ditto.\n+\t(lmul1_vector): Ditto.\n+\t(widen_lmul1_vector): Ditto.\n+\t(eew8_interpret): Ditto.\n+\t(eew16_interpret): Ditto.\n+\t(eew32_interpret): Ditto.\n+\t(eew64_interpret): Ditto.\n+\t(vlmul_ext_x2): Ditto.\n+\t(vlmul_ext_x4): Ditto.\n+\t(vlmul_ext_x8): Ditto.\n+\t(vlmul_ext_x16): Ditto.\n+\t(vlmul_ext_x32): Ditto.\n+\t(vlmul_ext_x64): Ditto.\n+\t* config/riscv/riscv-vector-builtins.h (DEF_RVV_BASE_TYPE): New def.\n+\t(struct function_type_info): New function.\n+\t(struct rvv_arg_type_info): Ditto.\n+\t(class function_checker): New class.\n+\t(rvv_arg_type_info::get_scalar_type): New function.\n+\t(rvv_arg_type_info::get_vector_type): Ditto.\n+\t(function_expander::ret_mode): New function.\n+\t(function_checker::arg_mode): Ditto.\n+\t(function_checker::ret_mode): Ditto.\n+\t* config/riscv/t-riscv: Add generator.\n+\t* config/riscv/vector-iterators.md: New iterators.\n+\t* config/riscv/vector.md (vundefined<mode>): New pattern.\n+\t(@vundefined<mode>): Ditto.\n+\t(@vreinterpret<mode>): Ditto.\n+\t(@vlmul_extx2<mode>): Ditto.\n+\t(@vlmul_extx4<mode>): Ditto.\n+\t(@vlmul_extx8<mode>): Ditto.\n+\t(@vlmul_extx16<mode>): Ditto.\n+\t(@vlmul_extx32<mode>): Ditto.\n+\t(@vlmul_extx64<mode>): Ditto.\n+\t(*vlmul_extx2<mode>): Ditto.\n+\t(*vlmul_extx4<mode>): Ditto.\n+\t(*vlmul_extx8<mode>): Ditto.\n+\t(*vlmul_extx16<mode>): Ditto.\n+\t(*vlmul_extx32<mode>): Ditto.\n+\t(*vlmul_extx64<mode>): Ditto.\n+\t* config/riscv/genrvv-type-indexer.cc: New file.\n+\n+2023-03-05  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-protos.h (enum vlen_enum): New enum.\n+\t(slide1_sew64_helper): New function.\n+\t* config/riscv/riscv-v.cc (compute_vlmax): Ditto.\n+\t(get_unknown_min_value): Ditto.\n+\t(force_vector_length_operand): Ditto.\n+\t(gen_no_side_effects_vsetvl_rtx): Ditto.\n+\t(get_vl_x2_rtx): Ditto.\n+\t(slide1_sew64_helper): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class slideop): New class.\n+\t(class vrgather): Ditto.\n+\t(class vrgatherei16): Ditto.\n+\t(class vcompress): Ditto.\n+\t(BASE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vslideup): Ditto.\n+\t(vslidedown): Ditto.\n+\t(vslide1up): Ditto.\n+\t(vslide1down): Ditto.\n+\t(vfslide1up): Ditto.\n+\t(vfslide1down): Ditto.\n+\t(vrgather): Ditto.\n+\t(vrgatherei16): Ditto.\n+\t(vcompress): Ditto.\n+\t* config/riscv/riscv-vector-builtins-types.def (DEF_RVV_EI16_OPS): New macro.\n+\t(vint8mf8_t): Ditto.\n+\t(vint8mf4_t): Ditto.\n+\t(vint8mf2_t): Ditto.\n+\t(vint8m1_t): Ditto.\n+\t(vint8m2_t): Ditto.\n+\t(vint8m4_t): Ditto.\n+\t(vint16mf4_t): Ditto.\n+\t(vint16mf2_t): Ditto.\n+\t(vint16m1_t): Ditto.\n+\t(vint16m2_t): Ditto.\n+\t(vint16m4_t): Ditto.\n+\t(vint16m8_t): Ditto.\n+\t(vint32mf2_t): Ditto.\n+\t(vint32m1_t): Ditto.\n+\t(vint32m2_t): Ditto.\n+\t(vint32m4_t): Ditto.\n+\t(vint32m8_t): Ditto.\n+\t(vint64m1_t): Ditto.\n+\t(vint64m2_t): Ditto.\n+\t(vint64m4_t): Ditto.\n+\t(vint64m8_t): Ditto.\n+\t(vuint8mf8_t): Ditto.\n+\t(vuint8mf4_t): Ditto.\n+\t(vuint8mf2_t): Ditto.\n+\t(vuint8m1_t): Ditto.\n+\t(vuint8m2_t): Ditto.\n+\t(vuint8m4_t): Ditto.\n+\t(vuint16mf4_t): Ditto.\n+\t(vuint16mf2_t): Ditto.\n+\t(vuint16m1_t): Ditto.\n+\t(vuint16m2_t): Ditto.\n+\t(vuint16m4_t): Ditto.\n+\t(vuint16m8_t): Ditto.\n+\t(vuint32mf2_t): Ditto.\n+\t(vuint32m1_t): Ditto.\n+\t(vuint32m2_t): Ditto.\n+\t(vuint32m4_t): Ditto.\n+\t(vuint32m8_t): Ditto.\n+\t(vuint64m1_t): Ditto.\n+\t(vuint64m2_t): Ditto.\n+\t(vuint64m4_t): Ditto.\n+\t(vuint64m8_t): Ditto.\n+\t(vfloat32mf2_t): Ditto.\n+\t(vfloat32m1_t): Ditto.\n+\t(vfloat32m2_t): Ditto.\n+\t(vfloat32m4_t): Ditto.\n+\t(vfloat32m8_t): Ditto.\n+\t(vfloat64m1_t): Ditto.\n+\t(vfloat64m2_t): Ditto.\n+\t(vfloat64m4_t): Ditto.\n+\t(vfloat64m8_t): Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc (DEF_RVV_EI16_OPS): Ditto.\n+\t* config/riscv/riscv.md: Adjust RVV instruction types.\n+\t* config/riscv/vector-iterators.md (down): New iterator.\n+\t(=vd,vr): New attribute.\n+\t(UNSPEC_VSLIDE1UP): New unspec.\n+\t* config/riscv/vector.md (@pred_slide<ud><mode>): New pattern.\n+\t(*pred_slide<ud><mode>): Ditto.\n+\t(*pred_slide<ud><mode>_extended): Ditto.\n+\t(@pred_gather<mode>): Ditto.\n+\t(@pred_gather<mode>_scalar): Ditto.\n+\t(@pred_gatherei16<mode>): Ditto.\n+\t(@pred_compress<mode>): Ditto.\n+\n+2023-03-05  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-vector-builtins.cc: Remove void_type_node.\n+\n+2023-03-05  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/constraints.md (Wb1): New constraint.\n+\t* config/riscv/predicates.md\n+\t(vector_least_significant_set_mask_operand): New predicate.\n+\t(vector_broadcast_mask_operand): Ditto.\n+\t* config/riscv/riscv-protos.h (enum vlmul_type): Adjust.\n+\t(gen_scalar_move_mask): New function.\n+\t* config/riscv/riscv-v.cc (gen_scalar_move_mask): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.cc (class vmv): New class.\n+\t(class vmv_s): Ditto.\n+\t(BASE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-bases.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins-functions.def (vmv_x): Ditto.\n+\t(vmv_s): Ditto.\n+\t(vfmv_f): Ditto.\n+\t(vfmv_s): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.cc (struct scalar_move_def): Ditto.\n+\t(SHAPE): Ditto.\n+\t* config/riscv/riscv-vector-builtins-shapes.h: Ditto.\n+\t* config/riscv/riscv-vector-builtins.cc (function_expander::mask_mode): Ditto.\n+\t(function_expander::use_exact_insn): New function.\n+\t(function_expander::use_contiguous_load_insn): New function.\n+\t(function_expander::use_contiguous_store_insn): New function.\n+\t(function_expander::use_ternop_insn): New function.\n+\t(function_expander::use_widen_ternop_insn): New function.\n+\t(function_expander::use_scalar_move_insn): New function.\n+\t* config/riscv/riscv-vector-builtins.def (s): New operand suffix.\n+\t* config/riscv/riscv-vector-builtins.h\n+\t(function_expander::add_scalar_move_mask_operand): New class.\n+\t* config/riscv/riscv-vsetvl.cc (ignore_vlmul_insn_p): New function.\n+\t(scalar_move_insn_p): Ditto.\n+\t(has_vsetvl_killed_avl_p): Ditto.\n+\t(anticipatable_occurrence_p): Ditto.\n+\t(insert_vsetvl): Ditto.\n+\t(get_vl_vtype_info): Ditto.\n+\t(calculate_sew): Ditto.\n+\t(calculate_vlmul): Ditto.\n+\t(incompatible_avl_p): Ditto.\n+\t(different_sew_p): Ditto.\n+\t(different_lmul_p): Ditto.\n+\t(different_ratio_p): Ditto.\n+\t(different_tail_policy_p): Ditto.\n+\t(different_mask_policy_p): Ditto.\n+\t(possible_zero_avl_p): Ditto.\n+\t(first_ratio_invalid_for_second_sew_p): Ditto.\n+\t(first_ratio_invalid_for_second_lmul_p): Ditto.\n+\t(second_ratio_invalid_for_first_sew_p): Ditto.\n+\t(second_ratio_invalid_for_first_lmul_p): Ditto.\n+\t(second_sew_less_than_first_sew_p): Ditto.\n+\t(first_sew_less_than_second_sew_p): Ditto.\n+\t(compare_lmul): Ditto.\n+\t(second_lmul_less_than_first_lmul_p): Ditto.\n+\t(first_lmul_less_than_second_lmul_p): Ditto.\n+\t(first_ratio_less_than_second_ratio_p): Ditto.\n+\t(second_ratio_less_than_first_ratio_p): Ditto.\n+\t(DEF_INCOMPATIBLE_COND): Ditto.\n+\t(greatest_sew): Ditto.\n+\t(first_sew): Ditto.\n+\t(second_sew): Ditto.\n+\t(first_vlmul): Ditto.\n+\t(second_vlmul): Ditto.\n+\t(first_ratio): Ditto.\n+\t(second_ratio): Ditto.\n+\t(vlmul_for_first_sew_second_ratio): Ditto.\n+\t(ratio_for_second_sew_first_vlmul): Ditto.\n+\t(DEF_SEW_LMUL_FUSE_RULE): Ditto.\n+\t(always_unavailable): Ditto.\n+\t(avl_unavailable_p): Ditto.\n+\t(sew_unavailable_p): Ditto.\n+\t(lmul_unavailable_p): Ditto.\n+\t(ge_sew_unavailable_p): Ditto.\n+\t(ge_sew_lmul_unavailable_p): Ditto.\n+\t(ge_sew_ratio_unavailable_p): Ditto.\n+\t(DEF_UNAVAILABLE_COND): Ditto.\n+\t(same_sew_lmul_demand_p): Ditto.\n+\t(propagate_avl_across_demands_p): Ditto.\n+\t(reg_available_p): Ditto.\n+\t(avl_info::has_non_zero_avl): Ditto.\n+\t(vl_vtype_info::has_non_zero_avl): Ditto.\n+\t(vector_insn_info::operator>=): Refactor.\n+\t(vector_insn_info::parse_insn): Adjust for scalar move.\n+\t(vector_insn_info::demand_vl_vtype): Remove.\n+\t(vector_insn_info::compatible_p): New function.\n+\t(vector_insn_info::compatible_avl_p): Ditto.\n+\t(vector_insn_info::compatible_vtype_p): Ditto.\n+\t(vector_insn_info::available_p): Ditto.\n+\t(vector_insn_info::merge): Ditto.\n+\t(vector_insn_info::fuse_avl): Ditto.\n+\t(vector_insn_info::fuse_sew_lmul): Ditto.\n+\t(vector_insn_info::fuse_tail_policy): Ditto.\n+\t(vector_insn_info::fuse_mask_policy): Ditto.\n+\t(vector_insn_info::dump): Ditto.\n+\t(vector_infos_manager::release): Ditto.\n+\t(pass_vsetvl::compute_local_backward_infos): Adjust for scalar move support.\n+\t(pass_vsetvl::get_backward_fusion_type): Adjust for scalar move support.\n+\t(pass_vsetvl::hard_empty_block_p): Ditto.\n+\t(pass_vsetvl::backward_demand_fusion): Ditto.\n+\t(pass_vsetvl::forward_demand_fusion): Ditto.\n+\t(pass_vsetvl::refine_vsetvls): Ditto.\n+\t(pass_vsetvl::cleanup_vsetvls): Ditto.\n+\t(pass_vsetvl::commit_vsetvls): Ditto.\n+\t(pass_vsetvl::propagate_avl): Ditto.\n+\t* config/riscv/riscv-vsetvl.h (enum demand_status): New class.\n+\t(struct demands_pair): Ditto.\n+\t(struct demands_cond): Ditto.\n+\t(struct demands_fuse_rule): Ditto.\n+\t* config/riscv/vector-iterators.md: New iterator.\n+\t* config/riscv/vector.md (@pred_broadcast<mode>): New pattern.\n+\t(*pred_broadcast<mode>): Ditto.\n+\t(*pred_broadcast<mode>_extended_scalar): Ditto.\n+\t(@pred_extract_first<mode>): Ditto.\n+\t(*pred_extract_first<mode>): Ditto.\n+\t(@pred_extract_first_trunc<mode>): Ditto.\n+\t* config/riscv/riscv-vsetvl.def: New file.\n+\n+2023-03-05  Lin Sinan  <sinan.lin@linux.alibaba.com>\n+\n+\t* config/riscv/bitmanip.md: allow 0 constant in max/min\n+\tpattern.\n+\n+2023-03-05  Lin Sinan  <sinan.lin@linux.alibaba.com>\n+\n+\t* config/riscv/bitmanip.md: Fix wrong index in the check.\n+\n 2023-03-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/109006"}, {"sha": "086e055556fe9d472dd182c6ce1a7c6c5617b835", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9fd689307b465aad4420f73b453198a9ac4afd/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9fd689307b465aad4420f73b453198a9ac4afd/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=fa9fd689307b465aad4420f73b453198a9ac4afd", "patch": "@@ -1 +1 @@\n-20230305\n+20230306"}, {"sha": "5283215c27dbef0cae068acc467232b67bf127ae", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9fd689307b465aad4420f73b453198a9ac4afd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9fd689307b465aad4420f73b453198a9ac4afd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fa9fd689307b465aad4420f73b453198a9ac4afd", "patch": "@@ -1,3 +1,19 @@\n+2023-03-05  Harald Anlauf  <anlauf@gmx.de>\n+\t    Tobias Burnus   <tobias@codesourcery.com>\n+\n+\tPR fortran/106856\n+\t* class.cc (gfc_build_class_symbol): Handle update of attributes of\n+\texisting class container.\n+\t(gfc_find_derived_vtab): Fix several memory leaks.\n+\t(find_intrinsic_vtab): Ditto.\n+\t* decl.cc (attr_decl1): Manage update of symbol attributes from\n+\tCLASS attributes.\n+\t* primary.cc (gfc_variable_attr): OPTIONAL shall not be taken or\n+\tupdated from the class container.\n+\t* symbol.cc (free_old_symbol): Adjust management of symbol versions\n+\tto not prematurely free array specs while working on the declation\n+\tof CLASS variables.\n+\n 2023-03-01  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR middle-end/108546"}, {"sha": "08e93e0593144e7736f2f45515b6b5fdbe410107", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9fd689307b465aad4420f73b453198a9ac4afd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9fd689307b465aad4420f73b453198a9ac4afd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa9fd689307b465aad4420f73b453198a9ac4afd", "patch": "@@ -1,3 +1,119 @@\n+2023-03-05  Harald Anlauf  <anlauf@gmx.de>\n+\t    Tobias Burnus   <tobias@codesourcery.com>\n+\n+\tPR fortran/106856\n+\t* gfortran.dg/interface_41.f90: Remove dg-pattern from valid testcase.\n+\t* gfortran.dg/class_74.f90: New test.\n+\t* gfortran.dg/class_75.f90: New test.\n+\n+2023-03-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/vect/slp-perm-8.c: Fix up syntax error in\n+\tscan-tree-dump-times target selector.\n+\n+2023-03-05  Liao Shihua  <shihua@iscas.ac.cn>\n+\t    SiYu Wu  <siyu@isrc.iscas.ac.cn>\n+\n+\t* gcc.target/riscv/zksed32.c: New test.\n+\t* gcc.target/riscv/zksed64.c: New test.\n+\t* gcc.target/riscv/zksh32.c: New test.\n+\t* gcc.target/riscv/zksh64.c: New test.\n+\n+2023-03-05  Liao Shihua  <shihua@iscas.ac.cn>\n+\t    SiYu Wu  <siyu@isrc.iscas.ac.cn>\n+\n+\t* gcc.target/riscv/zknh-sha256.c: New test.\n+\t* gcc.target/riscv/zknh-sha512-32.c: New test.\n+\t* gcc.target/riscv/zknh-sha512-64.c: New test.\n+\n+2023-03-05  Liao Shihua  <shihua@iscas.ac.cn>\n+\t    SiYu Wu  <siyu@isrc.iscas.ac.cn>\n+\n+\t* gcc.target/riscv/zknd32.c: New test.\n+\t* gcc.target/riscv/zknd64.c: New test.\n+\t* gcc.target/riscv/zkne32.c: New test.\n+\t* gcc.target/riscv/zkne64.c: New test.\n+\n+2023-03-05  Liao Shihua  <shihua@iscas.ac.cn>\n+\t    SiYu Wu  <siyu@isrc.iscas.ac.cn>\n+\n+\t* gcc.target/riscv/zbkb32.c: New test.\n+\t* gcc.target/riscv/zbkb64.c: New test.\n+\t* gcc.target/riscv/zbkc32.c: New test.\n+\t* gcc.target/riscv/zbkc64.c: New test.\n+\t* gcc.target/riscv/zbkx32.c: New test.\n+\t* gcc.target/riscv/zbkx64.c: New test.\n+\n+2023-03-05  Vineet Gupta  <vineetg@rivosinc.com>\n+\n+\t* gcc.target/riscv/zba-shNadd-07.c: f2(i*783) now generates MUL vs.\n+\t5 insn sh1add+slli+add+slli+sub.\n+\t* gcc.target/riscv/pr108987.c: New test.\n+\n+2023-03-05  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\t    kito-cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/rvv/base/vlmul_v.c: New test.\n+\n+2023-03-05  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/binop_vx_constraint-167.c: New test.\n+\t* gcc.target/riscv/rvv/base/binop_vx_constraint-168.c: New test.\n+\t* gcc.target/riscv/rvv/base/binop_vx_constraint-169.c: New test.\n+\t* gcc.target/riscv/rvv/base/binop_vx_constraint-170.c: New test.\n+\t* gcc.target/riscv/rvv/base/binop_vx_constraint-171.c: New test.\n+\t* gcc.target/riscv/rvv/base/binop_vx_constraint-172.c: New test.\n+\t* gcc.target/riscv/rvv/base/binop_vx_constraint-173.c: New test.\n+\t* gcc.target/riscv/rvv/base/binop_vx_constraint-174.c: New test.\n+\n+2023-03-05  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/scalar_move-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/scalar_move-2.c: New test.\n+\t* gcc.target/riscv/rvv/base/scalar_move-3.c: New test.\n+\t* gcc.target/riscv/rvv/base/scalar_move-4.c: New test.\n+\t* gcc.target/riscv/rvv/base/scalar_move-5.c: New test.\n+\t* gcc.target/riscv/rvv/base/scalar_move-6.c: New test.\n+\t* gcc.target/riscv/rvv/base/scalar_move-7.c: New test.\n+\t* gcc.target/riscv/rvv/base/scalar_move-8.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-100.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-101.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-78.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-79.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-80.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-81.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-82.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-83.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-84.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-85.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-86.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-87.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-88.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-89.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-90.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-91.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-92.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-93.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-94.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-95.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-96.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-97.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-98.c: New test.\n+\t* gcc.target/riscv/rvv/vsetvl/avl_single-99.c: New test.\n+\n+2023-03-05  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-10.c: Adjust test.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-11.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-12.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-15.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-18.c: Ditto.\n+\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-9.c: Ditto.\n+\n+2023-03-05  Lin Sinan  <sinan.lin@linux.alibaba.com>\n+\n+\t* gcc.target/riscv/zbb-min-max-03.c: New test.\n+\n 2023-03-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/vect/slp-3.c: Fix up syntax errors in scan-tree-dump-times"}]}