{"sha": "ce9657302380f236754ad11d6b8d0f0109075e37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U5NjU3MzAyMzgwZjIzNjc1NGFkMTFkNmI4ZDBmMDEwOTA3NWUzNw==", "commit": {"author": {"name": "Markus Trippelsdorf", "email": "markus@trippelsdorf.de", "date": "2015-08-29T18:51:26Z"}, "committer": {"name": "Markus Trippelsdorf", "email": "trippels@gcc.gnu.org", "date": "2015-08-29T18:51:26Z"}, "message": "Fix c++/67371 (issues with throw in constexpr)\n\nAs PR67371 shows gcc currently rejects all throw statements in\nconstant-expressions, even when they are never executed.\n\n\tPR c++/67371\n\t* constexpr.c (potential_constant_expression_1): Remove IF_STMT\n\tcase. Move label to COND_EXPR case. Remove checking of\n\tSWITCH_STMT_BODY.\n\nFrom-SVN: r227323", "tree": {"sha": "813dae7e59ddb927d2ea8535efd5aa49086dc622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/813dae7e59ddb927d2ea8535efd5aa49086dc622"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce9657302380f236754ad11d6b8d0f0109075e37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9657302380f236754ad11d6b8d0f0109075e37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce9657302380f236754ad11d6b8d0f0109075e37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce9657302380f236754ad11d6b8d0f0109075e37/comments", "author": null, "committer": null, "parents": [{"sha": "04ffad35321aaebeff3ffa8764d26454d93db59e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ffad35321aaebeff3ffa8764d26454d93db59e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ffad35321aaebeff3ffa8764d26454d93db59e"}], "stats": {"total": 66, "additions": 55, "deletions": 11}, "files": [{"sha": "7cbfa6591f188fc0121b81927170bc9385cbd277", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9657302380f236754ad11d6b8d0f0109075e37/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9657302380f236754ad11d6b8d0f0109075e37/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ce9657302380f236754ad11d6b8d0f0109075e37", "patch": "@@ -1,3 +1,10 @@\n+2015-08-29  Markus Trippelsdorf  <markus@trippelsdorf.de>\n+\n+\tPR c++/67371\n+\t* constexpr.c (potential_constant_expression_1): Remove IF_STMT\n+\tcase. Move label to COND_EXPR case. Remove checking of\n+\tSWITCH_STMT_BODY.\n+\n 2015-08-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/63693"}, {"sha": "0ff9b088cc268f7ab98b14c60635764ab5fbb043", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9657302380f236754ad11d6b8d0f0109075e37/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9657302380f236754ad11d6b8d0f0109075e37/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=ce9657302380f236754ad11d6b8d0f0109075e37", "patch": "@@ -4273,15 +4273,6 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \treturn false;\n       return true;\n \n-    case IF_STMT:\n-      if (!RECUR (IF_COND (t), rval))\n-\treturn false;\n-      if (!RECUR (THEN_CLAUSE (t), any))\n-\treturn false;\n-      if (!RECUR (ELSE_CLAUSE (t), any))\n-\treturn false;\n-      return true;\n-\n     case DO_STMT:\n       if (!RECUR (DO_COND (t), rval))\n \treturn false;\n@@ -4310,8 +4301,8 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n     case SWITCH_STMT:\n       if (!RECUR (SWITCH_STMT_COND (t), rval))\n \treturn false;\n-      if (!RECUR (SWITCH_STMT_BODY (t), any))\n-\treturn false;\n+      /* FIXME we don't check SWITCH_STMT_BODY currently, because even\n+\t unreachable labels would be checked.  */\n       return true;\n \n     case STMT_EXPR:\n@@ -4592,6 +4583,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \treturn false;\n      return true;\n \n+    case IF_STMT:\n     case COND_EXPR:\n     case VEC_COND_EXPR:\n       /* If the condition is a known constant, we know which of the legs we"}, {"sha": "7241fefc41e5c41cf64b0ca346eb8176b459ef2d", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-new.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9657302380f236754ad11d6b8d0f0109075e37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-new.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9657302380f236754ad11d6b8d0f0109075e37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-new.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-new.C?ref=ce9657302380f236754ad11d6b8d0f0109075e37", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++14 } }\n+\n+constexpr int *f4(bool b) {\n+  if (b) {\n+    return nullptr;\n+  } else {\n+    return new int{42}; // { dg-error \"call to non-constexpr\" }\n+  }\n+}\n+static_assert(f4(true) == nullptr, \"\");\n+static_assert(f4(false) == nullptr, \"\"); // { dg-error \"non-constant condition\" }"}, {"sha": "ac90051d5e99d6ab0dd1e2ec72204ab9d9d44b85", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-throw.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce9657302380f236754ad11d6b8d0f0109075e37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-throw.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce9657302380f236754ad11d6b8d0f0109075e37/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-throw.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-throw.C?ref=ce9657302380f236754ad11d6b8d0f0109075e37", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile { target c++14 } }\n+\n+constexpr void f1() {\n+  if (false)\n+    throw;\n+}\n+\n+constexpr void f2() {\n+  if (true)\n+    throw;\n+} // { dg-error \"not a constant-expression\" }\n+\n+constexpr void f3() {\n+  if (false)\n+    ;\n+  else\n+    throw;\n+}// { dg-error \"not a constant-expression\" }\n+\n+constexpr void f4() {\n+  throw;\n+}// { dg-error \"not a constant-expression\" }\n+\n+constexpr int fun(int n) {\n+  switch (n) {\n+  case 0:\n+    return 1;\n+  default:\n+    throw; // { dg-error \"not a constant-expression\" }\n+  }\n+}\n+\n+static_assert(fun(0), \"\");\n+static_assert(fun(1), \"\"); // { dg-error \"non-constant\" }"}]}