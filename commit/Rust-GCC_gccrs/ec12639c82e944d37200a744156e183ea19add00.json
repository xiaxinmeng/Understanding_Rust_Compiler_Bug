{"sha": "ec12639c82e944d37200a744156e183ea19add00", "node_id": "C_kwDOANBUbNoAKGVjMTI2MzljODJlOTQ0ZDM3MjAwYTc0NDE1NmUxODNlYTE5YWRkMDA", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-03-28T20:07:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-03-28T22:51:47Z"}, "message": "libstdc++: Do not use facets cached in ios for ATL128 build [PR103387]\n\nFor the powerpc64le build with two different long double\nrepresentations, we cannot use the ios_base::_M_num_put and\nios_base::_M_num_get pointers, because they might have been initialized\nin a translation unit using the other long double type. With the changes\nto add __try_use_facet to GCC 13 the cache isn't really needed now, we\ncan just access the right facet in the locale directly, without needing\nRTTI checks.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103387\n\t* include/bits/istream.tcc (istream::_M_extract(ValueT&)): Use\n\tstd::use_facet instead of cached _M_num_get facet.\n\t(istream::operator>>(short&)): Likewise.\n\t(istream::operator>>(int&)): Likewise.\n\t* include/bits/ostream.tcc (ostream::_M_insert(ValueT)): Use\n\tstd::use_facet instead of cached _M_num_put facet.", "tree": {"sha": "8ca1941da3de41a51b369d93c9593b9094d35e6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ca1941da3de41a51b369d93c9593b9094d35e6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec12639c82e944d37200a744156e183ea19add00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec12639c82e944d37200a744156e183ea19add00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec12639c82e944d37200a744156e183ea19add00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec12639c82e944d37200a744156e183ea19add00/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3c5933ee726004e4e47291d422dfe7ac3345062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3c5933ee726004e4e47291d422dfe7ac3345062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3c5933ee726004e4e47291d422dfe7ac3345062"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "334a91755aa453c3ae203092f6f8b1c9b969316c", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec12639c82e944d37200a744156e183ea19add00/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec12639c82e944d37200a744156e183ea19add00/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=ec12639c82e944d37200a744156e183ea19add00", "patch": "@@ -102,7 +102,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    ios_base::iostate __err = ios_base::goodbit;\n \t    __try\n \t      {\n+#ifndef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n \t\tconst __num_get_type& __ng = __check_facet(this->_M_num_get);\n+#else\n+\t\tconst __num_get_type& __ng\n+\t\t  = use_facet<__num_get_type>(this->_M_ios_locale);\n+#endif\n \t\t__ng.get(*this, 0, *this, __err, __v);\n \t      }\n \t    __catch(__cxxabiv1::__forced_unwind&)\n@@ -132,7 +137,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __try\n \t    {\n \t      long __l;\n+#ifndef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+#else\n+\t      const __num_get_type& __ng\n+\t\t= use_facet<__num_get_type>(this->_M_ios_locale);\n+#endif\n \t      __ng.get(*this, 0, *this, __err, __l);\n \n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -177,7 +187,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __try\n \t    {\n \t      long __l;\n+#ifndef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n \t      const __num_get_type& __ng = __check_facet(this->_M_num_get);\n+#else\n+\t      const __num_get_type& __ng\n+\t\t= use_facet<__num_get_type>(this->_M_ios_locale);\n+#endif\n \t      __ng.get(*this, 0, *this, __err, __l);\n \n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS"}, {"sha": "bb8584276f52a890a67dc54170fc7a6e478eac76", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec12639c82e944d37200a744156e183ea19add00/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec12639c82e944d37200a744156e183ea19add00/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=ec12639c82e944d37200a744156e183ea19add00", "patch": "@@ -69,7 +69,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    ios_base::iostate __err = ios_base::goodbit;\n \t    __try\n \t      {\n+#ifndef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT\n \t\tconst __num_put_type& __np = __check_facet(this->_M_num_put);\n+#else\n+\t\tconst __num_put_type& __np\n+\t\t  = use_facet<__num_put_type>(this->_M_ios_locale);\n+#endif\n \t\tif (__np.put(*this, *this, this->fill(), __v).failed())\n \t\t  __err |= ios_base::badbit;\n \t      }"}]}