{"sha": "71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFhY2Q4YjlkOWQ4Yzk0MzdiZmZmYTUxZjFiNTZmOTNjZmJjMjBlOQ==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2018-09-03T16:46:46Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2018-09-03T16:46:46Z"}, "message": "qsort_chk: call from gcc_qsort instead of wrapping it\n\n\t* sort.cc (gcc_qsort) [CHECKING_P]: Call qsort_chk.\n\t* system.h (qsort): Always redirect to gcc_qsort.  Update comment.\n\t* vec.c (qsort_chk): Do not call gcc_qsort.  Update comment.\n\nFrom-SVN: r264065", "tree": {"sha": "aeb1615ea6e77b0603ffbf15f04db99c43128a8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aeb1615ea6e77b0603ffbf15f04db99c43128a8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "158985b1a59e33d6536cb570bb5fbc9b79c96034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/158985b1a59e33d6536cb570bb5fbc9b79c96034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/158985b1a59e33d6536cb570bb5fbc9b79c96034"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "bfa9ce6a76e297c248c013a4af22f53459a92ad8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9", "patch": "@@ -1,3 +1,9 @@\n+2018-09-03  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* sort.cc (gcc_qsort) [CHECKING_P]: Call qsort_chk.\n+\t* system.h (qsort): Always redirect to gcc_qsort.  Update comment.\n+\t* vec.c (qsort_chk): Do not call gcc_qsort.  Update comment.\n+\n 2018-09-03  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (*mov<mode>_hardfloat32): Remove %U from the"}, {"sha": "9f8ee12e13b323c2a6d33216360a41f7490d8c31", "filename": "gcc/sort.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9/gcc%2Fsort.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9/gcc%2Fsort.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsort.cc?ref=71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9", "patch": "@@ -229,4 +229,7 @@ gcc_qsort (void *vbase, size_t n, size_t size, cmp_fn *cmp)\n   mergesort (base, &c, n, base, (char *)buf);\n   if (buf != scratch)\n     free (buf);\n+#if CHECKING_P\n+  qsort_chk (vbase, n, size, cmp);\n+#endif\n }"}, {"sha": "203c6a4f0cfc0b6e8fea8e2522f27727f54d66dc", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9", "patch": "@@ -1197,17 +1197,13 @@ helper_const_non_const_cast (const char *p)\n /* Get definitions of HOST_WIDE_INT.  */\n #include \"hwint.h\"\n \n-/* qsort comparator consistency checking: except in release-checking compilers,\n-   redirect 4-argument qsort calls to qsort_chk; keep 1-argument invocations\n+/* GCC qsort API-compatible functions: except in release-checking compilers,\n+   redirect 4-argument qsort calls to gcc_qsort; keep 1-argument invocations\n    corresponding to vec::qsort (cmp): they use C qsort internally anyway.  */\n void qsort_chk (void *, size_t, size_t, int (*)(const void *, const void *));\n void gcc_qsort (void *, size_t, size_t, int (*)(const void *, const void *));\n #define PP_5th(a1, a2, a3, a4, a5, ...) a5\n #undef qsort\n-#if CHECKING_P\n-#define qsort(...) PP_5th (__VA_ARGS__, qsort_chk, 3, 2, qsort, 0) (__VA_ARGS__)\n-#else\n #define qsort(...) PP_5th (__VA_ARGS__, gcc_qsort, 3, 2, qsort, 0) (__VA_ARGS__)\n-#endif\n \n #endif /* ! GCC_SYSTEM_H */"}, {"sha": "ac3226b5fcbf5f57f3b14f56ff3383f1fd77f4bb", "filename": "gcc/vec.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9/gcc%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9/gcc%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.c?ref=71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9", "patch": "@@ -201,21 +201,12 @@ qsort_chk_error (const void *p1, const void *p2, const void *p3,\n   internal_error (\"qsort checking failed\");\n }\n \n-/* Wrapper around qsort with checking that CMP is consistent on given input.\n-\n-   Strictly speaking, passing invalid (non-transitive, non-anti-commutative)\n-   comparators to libc qsort can result in undefined behavior.  Therefore we\n-   should ideally perform consistency checks prior to invoking qsort, but in\n-   order to do that optimally we'd need to sort the array ourselves beforehand\n-   with a sorting routine known to be \"safe\".  Instead, we expect that most\n-   implementations in practice will still produce some permutation of input\n-   array even for invalid comparators, which enables us to perform checks on\n-   the output array.  */\n+/* Verify anti-symmetry and transitivity for comparator CMP on sorted array\n+   of N SIZE-sized elements pointed to by BASE.  */\n void\n qsort_chk (void *base, size_t n, size_t size,\n \t   int (*cmp)(const void *, const void *))\n {\n-  gcc_qsort (base, n, size, cmp);\n #if 0\n #define LIM(n) (n)\n #else"}]}