{"sha": "df9ad6bc4901bf25c40b136fa6c1b39a78d76f41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY5YWQ2YmM0OTAxYmYyNWM0MGIxMzZmYTZjMWIzOWE3OGQ3NmY0MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T11:54:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T11:54:53Z"}, "message": "[multiple changes]\n\n2015-11-12  Gary Dismukes  <dismukes@adacore.com>\n\n\t* gnat1drv.adb, opt.ads: Minor reformatting.\n\n2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Number_Declaration): Call Analyze_Dimension,\n\tto propagate dimension information from expression to named\n\tnumber.\n\t* sem_dim.ads: Documentation:  number declaration and explicit\n\tdereference can carry dimension information.\n\t* sem_dim.adb (Analyze_Dimension_Number_Declaration): New\n\tprocedure, to propagate dimension information from expression\n\tof declaration to named number, whose type becomes one of the\n\tdimensioned base types rather than universal real.\n\t(Analyze_Dimension_Binary_Op):\n\ta) If one operand is a literal that is the value of a declared\n\tconstant after constant-foloding, use the dimensions of the\n\tdeclared constant.\n\tb) If an operand is a literal that is a contant-folded expression,\n\tand expander is active, do not report a dimension mismatch if\n\tliteral does not carry them, because dimension matching will\n\thave been checked previously.\n\nFrom-SVN: r230244", "tree": {"sha": "aa3b21fc032f8c4cdeea20baf480c8adda10a71f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa3b21fc032f8c4cdeea20baf480c8adda10a71f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41/comments", "author": null, "committer": null, "parents": [{"sha": "549cc9c2bcb93b5424c9a0967016d4e51e587311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/549cc9c2bcb93b5424c9a0967016d4e51e587311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/549cc9c2bcb93b5424c9a0967016d4e51e587311"}], "stats": {"total": 124, "additions": 109, "deletions": 15}, "files": [{"sha": "5290312447c3febf9d4d4287466a186a6d8e46fa", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=df9ad6bc4901bf25c40b136fa6c1b39a78d76f41", "patch": "@@ -1,3 +1,27 @@\n+2015-11-12  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* gnat1drv.adb, opt.ads: Minor reformatting.\n+\n+2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Number_Declaration): Call Analyze_Dimension,\n+\tto propagate dimension information from expression to named\n+\tnumber.\n+\t* sem_dim.ads: Documentation:  number declaration and explicit\n+\tdereference can carry dimension information.\n+\t* sem_dim.adb (Analyze_Dimension_Number_Declaration): New\n+\tprocedure, to propagate dimension information from expression\n+\tof declaration to named number, whose type becomes one of the\n+\tdimensioned base types rather than universal real.\n+\t(Analyze_Dimension_Binary_Op):\n+\ta) If one operand is a literal that is the value of a declared\n+\tconstant after constant-foloding, use the dimensions of the\n+\tdeclared constant.\n+\tb) If an operand is a literal that is a contant-folded expression,\n+\tand expander is active, do not report a dimension mismatch if\n+\tliteral does not carry them, because dimension matching will\n+\thave been checked previously.\n+\n 2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch8.adb (Find_Selected_Component): In a synchronized"}, {"sha": "e36533a0ddc5252129783365bed0a8a3301eda0a", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=df9ad6bc4901bf25c40b136fa6c1b39a78d76f41", "patch": "@@ -155,7 +155,7 @@ procedure Gnat1drv is\n          Operating_Mode := Generate_Code;\n \n          --  Suppress alignment checks since we do not have access to alignment\n-         --  info on the target\n+         --  info on the target.\n \n          Suppress_Options.Suppress (Alignment_Check) := False;\n       end if;"}, {"sha": "9041a88929baabce5a2d9725d5a930a5d5befcad", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=df9ad6bc4901bf25c40b136fa6c1b39a78d76f41", "patch": "@@ -200,7 +200,7 @@ package Opt is\n \n    Alternate_Main_Name : String_Ptr := null;\n    --  GNATBIND\n-   --  Set to non null when Bind_Alternate_Main_Name is True. This value\n+   --  Set to non-null when Bind_Alternate_Main_Name is True. This value\n    --  is modified as needed by Gnatbind.Scan_Bind_Arg.\n \n    ASIS_Mode : Boolean := False;\n@@ -424,7 +424,7 @@ package Opt is\n    --  The value given to the -g parameter. The default value for -g with\n    --  no value is 2. If no -g is specified, defaults to 0.\n    --  Note that the generated code should never depend on this variable,\n-   --  since we want debug info to be non intrusive on the generate code.\n+   --  since we want debug info to be nonintrusive on the generate code.\n \n    Default_Exit_Status : Int := 0;\n    --  GNATBIND\n@@ -1317,8 +1317,8 @@ package Opt is\n \n    Setup_Projects : Boolean := False;\n    --  GNAT DRIVER\n-   --  Set to True for GNAT SETUP: the Project Manager creates non existing\n-   --  object, library and exec directories.\n+   --  Set to True for GNAT SETUP: the Project Manager creates nonexistent\n+   --  object, library, and exec directories.\n \n    Shared_Libgnat : Boolean;\n    --  GNATBIND\n@@ -1880,7 +1880,7 @@ package Opt is\n    --  to date version of Ada).\n \n    Ada_Version_Pragma_Config : Node_Id;\n-   --  This will be set non empty if it is set by a configuration pragma\n+   --  This will be set nonempty if it is set by a configuration pragma\n \n    Ada_Version_Explicit_Config : Ada_Version_Type;\n    --  GNAT"}, {"sha": "31f6bd2a1f74fb92387209abb36b6c15029b57c8", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=df9ad6bc4901bf25c40b136fa6c1b39a78d76f41", "patch": "@@ -3270,6 +3270,8 @@ package body Sem_Ch3 is\n          Rewrite (E, Make_Integer_Literal (Sloc (N), 1));\n          Set_Etype (E, Any_Type);\n       end if;\n+\n+      Analyze_Dimension (N);\n    end Analyze_Number_Declaration;\n \n    --------------------------------"}, {"sha": "7a544b645ed36633ea119681442c717cbdbddd5d", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 74, "deletions": 8, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=df9ad6bc4901bf25c40b136fa6c1b39a78d76f41", "patch": "@@ -253,6 +253,11 @@ package body Sem_Dim is\n    --    N_Type_Conversion\n    --    N_Unchecked_Type_Conversion\n \n+   procedure Analyze_Dimension_Number_Declaration (N : Node_Id);\n+   --  Procedure to analyze dimension of expression in a number declaration.\n+   --  This allows a named number to have non-trivial dimensions, while by\n+   --  default a named number is dimensionless.\n+\n    procedure Analyze_Dimension_Object_Declaration (N : Node_Id);\n    --  Subroutine of Analyze_Dimension for object declaration. Check that\n    --  the dimensions of the object type and the dimensions of the expression\n@@ -1147,6 +1152,9 @@ package body Sem_Dim is\n               N_Unchecked_Type_Conversion =>\n             Analyze_Dimension_Has_Etype (N);\n \n+         when N_Number_Declaration =>\n+            Analyze_Dimension_Number_Declaration (N);\n+\n          when N_Object_Declaration =>\n             Analyze_Dimension_Object_Declaration (N);\n \n@@ -1308,10 +1316,30 @@ package body Sem_Dim is\n    procedure Analyze_Dimension_Binary_Op (N : Node_Id) is\n       N_Kind : constant Node_Kind := Nkind (N);\n \n+      function Dimensions_Of_Operand (N : Node_Id) return Dimension_Type;\n+      --  If the operand is a numeric literal that comes from a declared\n+      --  constant, use the dimensions of the constant which were computed\n+      --  from the expression of the constant declaration.\n+\n       procedure Error_Dim_Msg_For_Binary_Op (N, L, R : Node_Id);\n       --  Error using Error_Msg_NE and Error_Msg_N at node N. Output the\n       --  dimensions of both operands.\n \n+      ---------------------------\n+      -- Dimensions_Of_Operand --\n+      ---------------------------\n+\n+      function Dimensions_Of_Operand (N : Node_Id) return Dimension_Type is\n+      begin\n+         if Nkind (N) = N_Real_Literal\n+           and then Present (Original_Entity (N))\n+         then\n+            return Dimensions_Of (Original_Entity (N));\n+         else\n+            return Dimensions_Of (N);\n+         end if;\n+      end Dimensions_Of_Operand;\n+\n       ---------------------------------\n       -- Error_Dim_Msg_For_Binary_Op --\n       ---------------------------------\n@@ -1334,10 +1362,12 @@ package body Sem_Dim is\n       then\n          declare\n             L                : constant Node_Id        := Left_Opnd (N);\n-            Dims_Of_L        : constant Dimension_Type := Dimensions_Of (L);\n+            Dims_Of_L        : constant Dimension_Type :=\n+                                 Dimensions_Of_Operand (L);\n             L_Has_Dimensions : constant Boolean        := Exists (Dims_Of_L);\n             R                : constant Node_Id        := Right_Opnd (N);\n-            Dims_Of_R        : constant Dimension_Type := Dimensions_Of (R);\n+            Dims_Of_R        : constant Dimension_Type :=\n+                                 Dimensions_Of_Operand (R);\n             R_Has_Dimensions : constant Boolean        := Exists (Dims_Of_R);\n             Dims_Of_N        : Dimension_Type          := Null_Dimension;\n \n@@ -1453,20 +1483,40 @@ package body Sem_Dim is\n             --  Comparison cases\n \n             --  For relational operations, only dimension checking is\n-            --  performed (no propagation).\n+            --  performed (no propagation). If one operand is the result\n+            --  of constant folding the dimensions may have been lost\n+            --  in a tree copy, so assume that pre-analysis has verified\n+            --  that dimensions are correct.\n \n             elsif N_Kind in N_Op_Compare then\n                if (L_Has_Dimensions or R_Has_Dimensions)\n                  and then Dims_Of_L /= Dims_Of_R\n                then\n-                  Error_Dim_Msg_For_Binary_Op (N, L, R);\n+                  if Nkind (L) = N_Real_Literal\n+                    and then not (Comes_From_Source (L))\n+                    and then Expander_Active\n+                  then\n+                     null;\n+\n+                  elsif Nkind (R) = N_Real_Literal\n+                    and then not (Comes_From_Source (R))\n+                    and then Expander_Active\n+                  then\n+                     null;\n+\n+                  else\n+                     Error_Dim_Msg_For_Binary_Op (N, L, R);\n+                  end if;\n                end if;\n             end if;\n \n-            --  Removal of dimensions for each operands\n+            --  If  expander is active, remove dimension information from each\n+            --  operand, as only dimensions of result are relevant.\n \n-            Remove_Dimensions (L);\n-            Remove_Dimensions (R);\n+            if Expander_Active then\n+               Remove_Dimensions (L);\n+               Remove_Dimensions (R);\n+            end if;\n          end;\n       end if;\n    end Analyze_Dimension_Binary_Op;\n@@ -1929,7 +1979,7 @@ package body Sem_Dim is\n                Check_Error_Detected;\n                return;\n \n-            elsif Ekind (Id) = E_Constant\n+            elsif Ekind_In (Id,  E_Constant, E_Named_Real)\n               and then Exists (Dimensions_Of (Id))\n             then\n                Set_Dimensions (N, Dimensions_Of (Id));\n@@ -1980,6 +2030,22 @@ package body Sem_Dim is\n       end case;\n    end Analyze_Dimension_Has_Etype;\n \n+   ------------------------------------------\n+   -- Analyze_Dimension_Number_Declaration --\n+   ------------------------------------------\n+\n+   procedure Analyze_Dimension_Number_Declaration (N : Node_Id) is\n+      Expr        : constant Node_Id        := Expression (N);\n+      Id          : constant Entity_Id      := Defining_Identifier (N);\n+      Dim_Of_Expr : constant Dimension_Type := Dimensions_Of (Expr);\n+\n+   begin\n+      if Exists (Dim_Of_Expr) then\n+         Set_Dimensions (Id, Dim_Of_Expr);\n+         Set_Etype (Id, Etype (Expr));\n+      end if;\n+   end Analyze_Dimension_Number_Declaration;\n+\n    ------------------------------------------\n    -- Analyze_Dimension_Object_Declaration --\n    ------------------------------------------"}, {"sha": "d1521e90826c38ee9153f26008f9525419c53043", "filename": "gcc/ada/sem_dim.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41/gcc%2Fada%2Fsem_dim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df9ad6bc4901bf25c40b136fa6c1b39a78d76f41/gcc%2Fada%2Fsem_dim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.ads?ref=df9ad6bc4901bf25c40b136fa6c1b39a78d76f41", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -116,8 +116,10 @@ package Sem_Dim is\n    --    * compontent declaration\n    --    * extended return statement\n    --    * expanded name\n+   --    * explicit dereference\n    --    * identifier\n    --    * indexed component\n+   --    * number declaration\n    --    * object declaration\n    --    * object renaming declaration\n    --    * procedure call statement"}]}