{"sha": "847c76c86abab21f77c80bf224c35869f6a12736", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ3Yzc2Yzg2YWJhYjIxZjc3YzgwYmYyMjRjMzU4NjlmNmExMjczNg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-06-22T11:08:20Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-06-22T11:08:20Z"}, "message": "cpptrad.c (struct fun_macro): Add line number.\n\n\t* cpptrad.c (struct fun_macro): Add line number.\n\t(scan_out_logical_line): Set it, and use it to report unterminated\n\tmacro invocations.\ntestsuite:\n\t* gcc.dg/cpp/trad/comment-2.c. gcc.dg/cpp/trad/funlike-2.c,\n\tgcc.dg/cpp/trad/funlike.c, gcc.dg/cpp/trad/funlike-3.c,\n\tgcc.dg/cpp/trad/literals-1.c, gcc.dg/cpp/trad/literals-2.c,\n\tgcc.dg/cpp/trad/macroargs.c, gcc.dg/cpp/trad/quote.c: New tests.\n\nFrom-SVN: r54907", "tree": {"sha": "d5cc8fde896535a17af7b0bd1b7317936cbd2e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5cc8fde896535a17af7b0bd1b7317936cbd2e85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/847c76c86abab21f77c80bf224c35869f6a12736", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847c76c86abab21f77c80bf224c35869f6a12736", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847c76c86abab21f77c80bf224c35869f6a12736", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847c76c86abab21f77c80bf224c35869f6a12736/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "112bae7721708444619bfd87e881226918d9fd1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112bae7721708444619bfd87e881226918d9fd1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/112bae7721708444619bfd87e881226918d9fd1b"}], "stats": {"total": 160, "additions": 157, "deletions": 3}, "files": [{"sha": "0d3a098ca7e24f6751f6313bce3de747ae021b78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=847c76c86abab21f77c80bf224c35869f6a12736", "patch": "@@ -1,3 +1,9 @@\n+2002-06-22  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* cpptrad.c (struct fun_macro): Add line number.\n+\t(scan_out_logical_line): Set it, and use it to report unterminated\n+\tmacro invocations.\n+\n 2002-06-21  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* genautomata.c (copy_node, VLA_PTR_CREATE, VLA_PTR_EXPAND,"}, {"sha": "22320c49edcd7d31c49d02a474db376aac179939", "filename": "gcc/cpptrad.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Fcpptrad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Fcpptrad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpptrad.c?ref=847c76c86abab21f77c80bf224c35869f6a12736", "patch": "@@ -59,6 +59,9 @@ struct fun_macro\n   /* The offset of the macro name in the output buffer.  */\n   size_t offset;\n \n+  /* The line the macro name appeared on.  */\n+  unsigned int line;\n+\n   /* Zero-based index of argument being currently lexed.  */\n   unsigned int argc;\n };\n@@ -586,6 +589,7 @@ scan_out_logical_line (pfile, macro)\n \t\t    {\n \t\t      maybe_start_funlike (pfile, node, out_start, &fmacro);\n \t\t      lex_state = ls_fun_open;\n+\t\t      fmacro.line = pfile->line;\n \t\t      continue;\n \t\t    }\n \t\t  else\n@@ -721,9 +725,9 @@ scan_out_logical_line (pfile, macro)\n     _cpp_release_buff (pfile, fmacro.buff);\n \n   if (lex_state == ls_fun_close)\n-    cpp_error (pfile, DL_ERROR,\n-\t       \"unterminated argument list invoking macro \\\"%s\\\"\",\n-\t       NODE_NAME (fmacro.node));\n+    cpp_error_with_line (pfile, DL_ERROR, fmacro.line, 0,\n+\t\t\t \"unterminated argument list invoking macro \\\"%s\\\"\",\n+\t\t\t NODE_NAME (fmacro.node));\n }\n \n /* Push a context holding the replacement text of the macro NODE on"}, {"sha": "52b8c9b998999bdfc605157280b73b5c66c0f028", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=847c76c86abab21f77c80bf224c35869f6a12736", "patch": "@@ -1,3 +1,10 @@\n+2002-06-22  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* gcc.dg/cpp/trad/comment-2.c. gcc.dg/cpp/trad/funlike-2.c,\n+\tgcc.dg/cpp/trad/funlike.c, gcc.dg/cpp/trad/funlike-3.c,\n+\tgcc.dg/cpp/trad/literals-1.c, gcc.dg/cpp/trad/literals-2.c,\n+\tgcc.dg/cpp/trad/macroargs.c, gcc.dg/cpp/trad/quote.c: New tests.\n+\n 2002-06-21  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* gcc.dg/cpp/trad: New directory with traditional tests copied"}, {"sha": "8d54e3a0f3220dbfc81f97e7626c6c165c4b3661", "filename": "gcc/testsuite/gcc.dg/cpp/trad/comment-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcomment-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcomment-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fcomment-2.c?ref=847c76c86abab21f77c80bf224c35869f6a12736", "patch": "@@ -0,0 +1,11 @@\n+/* Test for warning of nested comments.  */\n+\n+/* { dg-do preprocess } */\n+\n+/* { dg-options \"-traditional-cpp -Wcomments\" }\n+\n+/* /* */   /* { dg-warning \"within comment\" } */\n+\n+/*\n+\n+ /* { dg-warning \"within comment\" } */"}, {"sha": "edcf2abf20033beadb1fb61418f2772f234fa750", "filename": "gcc/testsuite/gcc.dg/cpp/trad/funlike-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Ffunlike-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Ffunlike-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Ffunlike-2.c?ref=847c76c86abab21f77c80bf224c35869f6a12736", "patch": "@@ -0,0 +1,23 @@\n+/* Test that nested commas and parentheses in macro arguments are\n+   OK.  */\n+\n+/* { dg-do preprocess } */\n+\n+#define f(x) x\n+#define g(x, y) x y\n+\n+#if f((1)) != 1\n+# error\t\t/* { dg-bogus \"error\" \"nested parens 1\" } */\n+#endif\n+\n+#if f((1, 2)) != 2\n+# error\t\t/* { dg-bogus \"error\" \"nested comma 1\" } */\n+#endif\n+\n+#if g(, (1)) != 1\n+# error\t\t/* { dg-bogus \"error\" \"nested parens 2\" } */\n+#endif\n+\n+#if g((1, 2), + 3) != 5\n+# error\t\t/* { dg-bogus \"error\" \"nested comma 2\" } */\n+#endif"}, {"sha": "5300afba7087d4d6b8bae11ea4e8e39b5503bc7b", "filename": "gcc/testsuite/gcc.dg/cpp/trad/funlike-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Ffunlike-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Ffunlike-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Ffunlike-3.c?ref=847c76c86abab21f77c80bf224c35869f6a12736", "patch": "@@ -0,0 +1,12 @@\n+/* Test that function-like macros are restricted to directives, and\n+   that unterminated ones are warned about.  */\n+\n+/* { dg-do preprocess } */\n+\n+#define f(x) x\n+\n+#if 2 f(/* { dg-error \"unterminated\" \"unterminated macro in directive\" } */\n+)\n+#endif\n+\n+f( /* { dg-error \"unterminated\" \"unterminated macro\" } */"}, {"sha": "db550d53c76ba180c6fb2a692c077d04997473dd", "filename": "gcc/testsuite/gcc.dg/cpp/trad/funlike.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Ffunlike.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Ffunlike.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Ffunlike.c?ref=847c76c86abab21f77c80bf224c35869f6a12736", "patch": "@@ -0,0 +1,25 @@\n+/* Test that undefined names evaluate to zero, that macros after a\n+   funlike macro are expanded, and that if it is a '(' the funlike\n+   macro is not treated as such.  */\n+\n+/* { dg-do preprocess } */\n+\n+#define f(x) x\n+#define h != 0\n+#define i\n+#define paren (\n+\n+#if f != 0\n+# error\t\t/* { dg-bogus \"error\" \"undefined name\" } */\n+#endif\n+\n+#if f h\n+# error\t\t/* { dg-bogus \"error\" \"h not expanded\" } */\n+#endif\n+\n+#if f i\n+# error\t\t/* { dg-bogus \"error\" \"empty macro\" } */\n+#endif\n+\n+#if f paren 6) /* { dg-error \"missing binary\" \"macro-expanded parenthesis\" } */\n+#endif"}, {"sha": "7fde0d5422e1a17a2490f00abb1a4823f06abeed", "filename": "gcc/testsuite/gcc.dg/cpp/trad/literals-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fliterals-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fliterals-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fliterals-1.c?ref=847c76c86abab21f77c80bf224c35869f6a12736", "patch": "@@ -0,0 +1,28 @@\n+/* Test that (what looks like) comments are not recognised in literals\n+   and that quotes within quotes do not confused the preprocessor.  */\n+\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+\n+int main ()\n+{\n+  const char *str1 = \"/*\";\n+  const char *str2 = \"'\";\n+\n+  if (str1[0] != '/' || str1[1] != '*' || str1[2] != '\\0')\n+    abort ();\n+\n+  if (str2[0] != '\\'' || str2[1] != '\\0')\n+    abort ();\n+\n+#if '\"' != '\\\"'\n+#  error /* { dg-bogus \"error\" \"double quote in charconst\" } */\n+#endif\n+\n+#if !'\\''\n+#  error quote /* { dg-bogus \"quote\" \"quote in charconst\" } */\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "807bb0db0a8d401afeaf111c8277f2541e0c76ab", "filename": "gcc/testsuite/gcc.dg/cpp/trad/literals-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fliterals-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fliterals-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fliterals-2.c?ref=847c76c86abab21f77c80bf224c35869f6a12736", "patch": "@@ -0,0 +1,8 @@\n+/* Test that unterminated quotes in CPP expressions are\n+   recognized.  */\n+\n+/* { dg-do preprocess } */\n+\n+/* { dg-error \"missing terminating\" \"bad charconst\" { target *-*-* } 7 } */\n+#if 'x\n+#endif"}, {"sha": "12effa750040ec6078e4086e47035b1c195ed002", "filename": "gcc/testsuite/gcc.dg/cpp/trad/macroargs.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmacroargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmacroargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fmacroargs.c?ref=847c76c86abab21f77c80bf224c35869f6a12736", "patch": "@@ -0,0 +1,24 @@\n+/* Test that whitespace in arguments is preserved, and that each\n+   newline in macro arguments become a space.  */\n+\n+/* { dg-do run } */\n+\n+#define f(x, y) \"x y\"\n+\n+extern void abort (void);\n+\n+int main ()\n+{\n+  const char *str1 = f( foo ,bar);\n+  const char *str2 = f(\n+foo\n+,bar);\n+\n+  if (strcmp (str1, \" foo  bar\"))\n+    abort ();\n+\n+  if (strcmp (str1, str2))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "f8e61700fd7d439a0844c7184c440c86e67b17a8", "filename": "gcc/testsuite/gcc.dg/cpp/trad/quote.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fquote.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847c76c86abab21f77c80bf224c35869f6a12736/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fquote.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fquote.c?ref=847c76c86abab21f77c80bf224c35869f6a12736", "patch": "@@ -0,0 +1,6 @@\n+/* Test that unterminated quotes are OK when only preprocessing.  */\n+\n+/* { dg-do preprocess } */\n+\n+/* { dg-bogus \"unterminated\" } */  'x\n+/* { dg-bogus \"unterminated\" } */  \"x"}]}