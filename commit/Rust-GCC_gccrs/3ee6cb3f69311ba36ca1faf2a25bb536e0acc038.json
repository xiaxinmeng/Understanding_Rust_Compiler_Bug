{"sha": "3ee6cb3f69311ba36ca1faf2a25bb536e0acc038", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VlNmNiM2Y2OTMxMWJhMzZjYTFmYWYyYTI1YmI1MzZlMGFjYzAzOA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-05-09T08:02:52Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-05-09T08:02:52Z"}, "message": "re PR fortran/36162 (Non-ASCII character in module string gives ICE)\n\n        PR fortran/36162\n\n        * module.c (quote_string, unquote_string,\n        mio_allocated_wide_string): New functions.\n        (mio_expr): Call mio_allocated_wide_string where needed.\n\n\t* gfortran.dg/module_widestring_1.f90: New test.\n\nFrom-SVN: r135109", "tree": {"sha": "d21345dc9e4f8f7db29a2fdbef380d2d12b7f5fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d21345dc9e4f8f7db29a2fdbef380d2d12b7f5fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ee6cb3f69311ba36ca1faf2a25bb536e0acc038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ee6cb3f69311ba36ca1faf2a25bb536e0acc038", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ee6cb3f69311ba36ca1faf2a25bb536e0acc038", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ee6cb3f69311ba36ca1faf2a25bb536e0acc038/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b70837af6043670029d43da7f795f0918f20a50a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b70837af6043670029d43da7f795f0918f20a50a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b70837af6043670029d43da7f795f0918f20a50a"}], "stats": {"total": 169, "additions": 160, "deletions": 9}, "files": [{"sha": "e93c004d5ce61e16fbf2f679353033f3b9373253", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee6cb3f69311ba36ca1faf2a25bb536e0acc038/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee6cb3f69311ba36ca1faf2a25bb536e0acc038/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3ee6cb3f69311ba36ca1faf2a25bb536e0acc038", "patch": "@@ -1,3 +1,10 @@\n+2008-05-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/36162\n+\t* module.c (quote_string, unquote_string,\n+\tmio_allocated_wide_string): New functions.\n+\t(mio_expr): Call mio_allocated_wide_string where needed.\n+\n 2008-05-07 Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t * trans-decl.c (gfc_get_extern_function_decl, build_function_decl):"}, {"sha": "2c3d88ac6437556fc56f1f30679d710ff7ed3125", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 132, "deletions": 9, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee6cb3f69311ba36ca1faf2a25bb536e0acc038/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee6cb3f69311ba36ca1faf2a25bb536e0acc038/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=3ee6cb3f69311ba36ca1faf2a25bb536e0acc038", "patch": "@@ -1474,6 +1474,130 @@ mio_allocated_string (const char *s)\n }\n \n \n+/* Functions for quoting and unquoting strings.  */\n+\n+static char *\n+quote_string (const gfc_char_t *s, const size_t slength)\n+{\n+  const gfc_char_t *p;\n+  char *res, *q;\n+  size_t len = 0, i;\n+\n+  /* Calculate the length we'll need: a backslash takes two (\"\\\\\"),\n+     non-printable characters take 10 (\"\\Uxxxxxxxx\") and others take 1.  */\n+  for (p = s, i = 0; i < slength; p++, i++)\n+    {\n+      if (*p == '\\\\')\n+\tlen += 2;\n+      else if (!gfc_wide_is_printable (*p))\n+\tlen += 10;\n+      else\n+\tlen++;\n+    }\n+\n+  q = res = gfc_getmem (len + 1);\n+  for (p = s, i = 0; i < slength; p++, i++)\n+    {\n+      if (*p == '\\\\')\n+\t*q++ = '\\\\', *q++ = '\\\\';\n+      else if (!gfc_wide_is_printable (*p))\n+\t{\n+\t  sprintf (q, \"\\\\U%08\" HOST_WIDE_INT_PRINT \"ux\",\n+\t\t   (unsigned HOST_WIDE_INT) *p);\n+\t  q += 10;\n+\t}\n+      else\n+\t*q++ = (unsigned char) *p;\n+    }\n+\n+  res[len] = '\\0';\n+  return res;\n+}\n+\n+static gfc_char_t *\n+unquote_string (const char *s)\n+{\n+  size_t len, i;\n+  const char *p;\n+  gfc_char_t *res;\n+\n+  for (p = s, len = 0; *p; p++, len++)\n+    {\n+      if (*p != '\\\\')\n+\tcontinue;\n+\t\n+      if (p[1] == '\\\\')\n+\tp++;\n+      else if (p[1] == 'U')\n+\tp += 9; /* That is a \"\\U????????\". */\n+      else\n+\tgfc_internal_error (\"unquote_string(): got bad string\");\n+    }\n+\n+  res = gfc_get_wide_string (len + 1);\n+  for (i = 0, p = s; i < len; i++, p++)\n+    {\n+      gcc_assert (*p);\n+\n+      if (*p != '\\\\')\n+\tres[i] = (unsigned char) *p;\n+      else if (p[1] == '\\\\')\n+\t{\n+\t  res[i] = (unsigned char) '\\\\';\n+\t  p++;\n+\t}\n+      else\n+\t{\n+\t  /* We read the 8-digits hexadecimal constant that follows.  */\n+\t  int j;\n+\t  unsigned n;\n+\t  gfc_char_t c = 0;\n+\n+\t  gcc_assert (p[1] == 'U');\n+\t  for (j = 0; j < 8; j++)\n+\t    {\n+\t      c = c << 4;\n+\t      gcc_assert (sscanf (&p[j+2], \"%01x\", &n) == 1);\n+\t      c += n;\n+\t    }\n+\n+\t  res[i] = c;\n+\t  p += 9;\n+\t}\n+    }\n+\n+  res[len] = '\\0';\n+  return res;\n+}\n+\n+\n+/* Read or write a character pointer that points to a wide string on the\n+   heap, performing quoting/unquoting of nonprintable characters using the\n+   form \\U???????? (where each ? is a hexadecimal digit).\n+   Length is the length of the string, only known and used in output mode.  */\n+\n+static const gfc_char_t *\n+mio_allocated_wide_string (const gfc_char_t *s, const size_t length)\n+{\n+  if (iomode == IO_OUTPUT)\n+    {\n+      char *quoted = quote_string (s, length);\n+      write_atom (ATOM_STRING, quoted);\n+      gfc_free (quoted);\n+      return s;\n+    }\n+  else\n+    {\n+      gfc_char_t *unquoted;\n+\n+      require_atom (ATOM_STRING);\n+      unquoted = unquote_string (atom_string);\n+      gfc_free (atom_string);\n+      return unquoted;\n+    }\n+}\n+\n+\n /* Read or write a string that is in static memory.  */\n \n static void\n@@ -2708,7 +2832,6 @@ mio_expr (gfc_expr **ep)\n {\n   gfc_expr *e;\n   atom_type t;\n-  char *s;\n   int flag;\n \n   mio_lparen ();\n@@ -2833,10 +2956,10 @@ mio_expr (gfc_expr **ep)\n       break;\n \n     case EXPR_SUBSTRING:\n-      s = gfc_widechar_to_char (e->value.character.string, -1);\n-      s = CONST_CAST (char *, mio_allocated_string (s));\n-      e->value.character.string = gfc_char_to_widechar (s);\n-      gfc_free (s);\n+      e->value.character.string\n+\t= CONST_CAST (gfc_char_t *,\n+\t\t      mio_allocated_wide_string (e->value.character.string,\n+\t\t\t\t\t\t e->value.character.length));\n       mio_ref_list (&e->ref);\n       break;\n \n@@ -2870,10 +2993,10 @@ mio_expr (gfc_expr **ep)\n \n \tcase BT_CHARACTER:\n \t  mio_integer (&e->value.character.length);\n-\t  s = gfc_widechar_to_char (e->value.character.string, -1);\n-\t  s = CONST_CAST (char *, mio_allocated_string (s));\n-\t  e->value.character.string = gfc_char_to_widechar (s);\n-\t  gfc_free (s);\n+\t  e->value.character.string\n+\t    = CONST_CAST (gfc_char_t *,\n+\t\t\t  mio_allocated_wide_string (e->value.character.string,\n+\t\t\t\t\t\t     e->value.character.length));\n \t  break;\n \n \tdefault:"}, {"sha": "96bc1b4aa3bd94e401615e9eb90d876afc792145", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee6cb3f69311ba36ca1faf2a25bb536e0acc038/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee6cb3f69311ba36ca1faf2a25bb536e0acc038/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ee6cb3f69311ba36ca1faf2a25bb536e0acc038", "patch": "@@ -1,3 +1,8 @@\n+2008-05-09  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/36162\n+\t* gfortran.dg/module_widestring_1.f90: New test.\n+\n 2008-05-08  Rafael Espindola  <espindola@google.com>\n \n \t* gcc.dg/vect/vect-111.c: Rename to no-trapping-math-vect-111.c"}, {"sha": "f2e9fe23526eba2d0fc22908527943dc16e301a9", "filename": "gcc/testsuite/gfortran.dg/module_widestring_1.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ee6cb3f69311ba36ca1faf2a25bb536e0acc038/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_widestring_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ee6cb3f69311ba36ca1faf2a25bb536e0acc038/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_widestring_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmodule_widestring_1.f90?ref=3ee6cb3f69311ba36ca1faf2a25bb536e0acc038", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run }\n+! { dg-options \"-fbackslash\" }\n+!\n+! Testcase from PR36162\n+module m\n+  character(*), parameter ::  a ='H\\0z'\n+end module m\n+\n+  use m\n+  character(len=20) :: s\n+  if (a /= 'H\\0z') call abort\n+  if (ichar(a(2:2)) /= 0) call abort\n+  write (s,\"(A)\") a\n+end\n+\n+! { dg-final { cleanup-modules \"m\" } }"}]}