{"sha": "8251f319439ff9ae0816d31db861b8681c953fc1", "node_id": "C_kwDOANBUbNoAKDgyNTFmMzE5NDM5ZmY5YWUwODE2ZDMxZGI4NjFiODY4MWM5NTNmYzE", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-12-29T17:32:51Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-12-29T17:39:46Z"}, "message": "[C++] constraint: insert norm entry once\n\nUse NO_INSERT to test whether inserting should be attempted.\n\n\nfor  gcc/cp/ChangeLog\n\n\t* constraint.cc (normalize_concept_check): Use NO_INSERT for\n\tpre-insertion check.", "tree": {"sha": "ab2d603dee199ef66953b60f5896d298ef66c525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab2d603dee199ef66953b60f5896d298ef66c525"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8251f319439ff9ae0816d31db861b8681c953fc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8251f319439ff9ae0816d31db861b8681c953fc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8251f319439ff9ae0816d31db861b8681c953fc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8251f319439ff9ae0816d31db861b8681c953fc1/comments", "author": null, "committer": null, "parents": [{"sha": "d7c8a16537aaf0fca623bf01813f5679f845edcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7c8a16537aaf0fca623bf01813f5679f845edcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7c8a16537aaf0fca623bf01813f5679f845edcf"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "4edc0846dc185068c65b06b601642386459ede00", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8251f319439ff9ae0816d31db861b8681c953fc1/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8251f319439ff9ae0816d31db861b8681c953fc1/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=8251f319439ff9ae0816d31db861b8681c953fc1", "patch": "@@ -777,14 +777,16 @@ normalize_concept_check (tree check, tree args, norm_info info)\n   norm_entry entry = {tmpl, targs, NULL_TREE};\n   norm_entry **slot = nullptr;\n   hashval_t hash = 0;\n+  bool insert = false;\n   if (!info.generate_diagnostics ())\n     {\n       /* Cache the normal form of the substituted concept-id (when not\n \t diagnosing).  */\n       hash = norm_hasher::hash (&entry);\n-      slot = norm_cache->find_slot_with_hash (&entry, hash, INSERT);\n-      if (*slot)\n+      slot = norm_cache->find_slot_with_hash (&entry, hash, NO_INSERT);\n+      if (slot)\n \treturn (*slot)->norm;\n+      insert = true;\n     }\n \n   /* The concept may have been ill-formed.  */\n@@ -794,7 +796,7 @@ normalize_concept_check (tree check, tree args, norm_info info)\n \n   info.update_context (check, args);\n   tree norm = normalize_expression (def, targs, info);\n-  if (slot)\n+  if (insert)\n     {\n       /* Recompute SLOT since norm_cache may have been expanded during\n \t the recursive call.  */"}]}