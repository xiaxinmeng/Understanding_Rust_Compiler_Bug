{"sha": "ed38d6fe91424c7e84f464a9b883b1b3b24a5f2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzOGQ2ZmU5MTQyNGM3ZTg0ZjQ2NGE5Yjg4M2IxYjNiMjRhNWYyZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@act-europe.fr", "date": "2004-03-15T21:06:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-03-15T21:06:45Z"}, "message": "sparc.h: Rework comments about the code model in 64-bit environment and the mode 'Pmode'.\n\n\t* config/sparc/sparc.h: Rework comments about the code model\n\tin 64-bit environment and the mode 'Pmode'.\n\t* doc/invoke.texi (SPARC options): Rework description of the\n\tdifferent code models supported in 64-bit environment.\n\nFrom-SVN: r79509", "tree": {"sha": "30e1b9a7762c75df9ed61ce4757825f3ce4fdba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30e1b9a7762c75df9ed61ce4757825f3ce4fdba1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed38d6fe91424c7e84f464a9b883b1b3b24a5f2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed38d6fe91424c7e84f464a9b883b1b3b24a5f2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed38d6fe91424c7e84f464a9b883b1b3b24a5f2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed38d6fe91424c7e84f464a9b883b1b3b24a5f2d/comments", "author": null, "committer": null, "parents": [{"sha": "68a1af8795e896c86b0ff44662e6dc47e8b119ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a1af8795e896c86b0ff44662e6dc47e8b119ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a1af8795e896c86b0ff44662e6dc47e8b119ae"}], "stats": {"total": 105, "additions": 58, "deletions": 47}, "files": [{"sha": "1f6036839c4b0f3b6c54b7829cadb27282df9b0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed38d6fe91424c7e84f464a9b883b1b3b24a5f2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed38d6fe91424c7e84f464a9b883b1b3b24a5f2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed38d6fe91424c7e84f464a9b883b1b3b24a5f2d", "patch": "@@ -1,3 +1,10 @@\n+2004-03-15  Eric Botcazou  <ebotcazou@act-europe.fr>\n+\n+\t* config/sparc/sparc.h: Rework comments about the code model\n+\tin 64-bit environment and the mode 'Pmode'.\n+\t* doc/invoke.texi (SPARC options): Rework description of the\n+\tdifferent code models supported in 64-bit environment.\n+\n 2004-03-15  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* defaults.h (REVERSIBLE_CC_MODE): Define."}, {"sha": "44776c751397dcc611d144bee91f788b696defee", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed38d6fe91424c7e84f464a9b883b1b3b24a5f2d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed38d6fe91424c7e84f464a9b883b1b3b24a5f2d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=ed38d6fe91424c7e84f464a9b883b1b3b24a5f2d", "patch": "@@ -69,35 +69,41 @@ Boston, MA 02111-1307, USA.  */\n #endif /* IN_LIBGCC2 */\n #define TARGET_ARCH64 (! TARGET_ARCH32)\n \n-/* Code model selection.\n-   -mcmodel is used to select the v9 code model.\n-   Different code models aren't supported for v7/8 code.\n-\n-   TARGET_CM_32:     32 bit address space, top 32 bits = 0,\n-\t\t     pointers are 32 bits.  Note that this isn't intended\n-                     to imply a v7/8 abi.\n-\n-   TARGET_CM_MEDLOW: 32 bit address space, top 32 bits = 0,\n-                     avoid generating %uhi and %ulo terms,\n-\t\t     pointers are 64 bits.\n-\n-   TARGET_CM_MEDMID: 64 bit address space.\n-                     The executable must be in the low 16 TB of memory.\n-                     This corresponds to the low 44 bits, and the %[hml]44\n-                     relocs are used.  The text segment has a maximum size\n-                     of 31 bits.\n-\n-   TARGET_CM_MEDANY: 64 bit address space.\n-                     The text and data segments have a maximum size of 31\n-                     bits and may be located anywhere.  The maximum offset\n-                     from any instruction to the label _GLOBAL_OFFSET_TABLE_\n-                     is 31 bits.\n-\n-   TARGET_CM_EMBMEDANY: 64 bit address space.\n-                     The text and data segments have a maximum size of 31 bits\n-                     and may be located anywhere.  Register %g4 contains\n-                     the start address of the data segment.\n-*/\n+/* Code model selection in 64-bit environment.\n+\n+   The machine mode used for addresses is 32-bit wide:\n+\n+   TARGET_CM_32:     32-bit address space.\n+                     It is the code model used when generating 32-bit code.\n+\n+   The machine mode used for addresses is 64-bit wide:\n+\n+   TARGET_CM_MEDLOW: 32-bit address space.\n+                     The executable must be in the low 32 bits of memory.\n+                     This avoids generating %uhi and %ulo terms.  Programs\n+                     can be statically or dynamically linked.\n+\n+   TARGET_CM_MEDMID: 44-bit address space.\n+                     The executable must be in the low 44 bits of memory,\n+                     and the %[hml]44 terms are used.  The text and data\n+                     segments have a maximum size of 2GB (31-bit span).\n+                     The maximum offset from any instruction to the label\n+                     _GLOBAL_OFFSET_TABLE_ is 2GB (31-bit span).\n+\n+   TARGET_CM_MEDANY: 64-bit address space.\n+                     The text and data segments have a maximum size of 2GB\n+                     (31-bit span) and may be located anywhere in memory.\n+                     The maximum offset from any instruction to the label\n+                     _GLOBAL_OFFSET_TABLE_ is 2GB (31-bit span).\n+\n+   TARGET_CM_EMBMEDANY: 64-bit address space.\n+                     The text and data segments have a maximum size of 2GB\n+                     (31-bit span) and may be located anywhere in memory.\n+                     The global register %g4 contains the start address of\n+                     the data segment.  Programs are statically linked and\n+                     PIC is not supported.\n+\n+   Different code models are not supported in 32-bit environment.  */\n \n enum cmodel {\n   CM_32,\n@@ -2212,9 +2218,7 @@ do {                                                                    \\\n    is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-/* Specify the machine mode that pointers have.\n-   After generation of rtl, the compiler makes no further distinction\n-   between pointers and any other objects of this machine mode.  */\n+/* Specify the machine mode used for addresses.  */\n #define Pmode (TARGET_ARCH64 ? DImode : SImode)\n \n /* Generate calls to memcpy, memcmp and memset.  */"}, {"sha": "03aa5f827b734b011d30bdb2b177d2d774a94968", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed38d6fe91424c7e84f464a9b883b1b3b24a5f2d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed38d6fe91424c7e84f464a9b883b1b3b24a5f2d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ed38d6fe91424c7e84f464a9b883b1b3b24a5f2d", "patch": "@@ -6360,31 +6360,31 @@ to 64 bits.\n \n @item -mcmodel=medlow\n @opindex mcmodel=medlow\n-Generate code for the Medium/Low code model: the program must be linked\n-in the low 32 bits of the address space.  Pointers are 64 bits.\n-Programs can be statically or dynamically linked.\n+Generate code for the Medium/Low code model: 64-bit addresses, programs\n+must be linked in the low 32 bits of memory.  Programs can be statically\n+or dynamically linked.\n \n @item -mcmodel=medmid\n @opindex mcmodel=medmid\n-Generate code for the Medium/Middle code model: the program must be linked\n-in the low 44 bits of the address space, the text segment must be less than\n-2G bytes, and data segment must be within 2G of the text segment.\n-Pointers are 64 bits.\n+Generate code for the Medium/Middle code model: 64-bit addresses, programs\n+must be linked in the low 44 bits of memory, the text and data segments must\n+be less than 2GB in size and the data segment must be located within 2GB of\n+the text segment.\n \n @item -mcmodel=medany\n @opindex mcmodel=medany\n-Generate code for the Medium/Anywhere code model: the program may be linked\n-anywhere in the address space, the text segment must be less than\n-2G bytes, and data segment must be within 2G of the text segment.\n-Pointers are 64 bits.\n+Generate code for the Medium/Anywhere code model: 64-bit addresses, programs\n+may be linked anywhere in memory, the text and data segments must be less\n+than 2GB in size and the data segment must be located within 2GB of the\n+text segment.\n \n @item -mcmodel=embmedany\n @opindex mcmodel=embmedany\n Generate code for the Medium/Anywhere code model for embedded systems:\n-assume a 32-bit text and a 32-bit data segment, both starting anywhere\n-(determined at link time).  Register %g4 points to the base of the\n-data segment.  Pointers are still 64 bits.\n-Programs are statically linked, PIC is not supported.\n+64-bit addresses, the text and data segments must be less than 2GB in\n+size, both starting anywhere in memory (determined at link time).  The\n+global register %g4 points to the base of the data segment.  Programs\n+are statically linked and PIC is not supported.\n \n @item -mstack-bias\n @itemx -mno-stack-bias"}]}