{"sha": "03ab2eb725851203ccc34ca3210439801812a6be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNhYjJlYjcyNTg1MTIwM2NjYzM0Y2EzMjEwNDM5ODAxODEyYTZiZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-11-15T13:18:09Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-11-15T13:18:09Z"}, "message": "[PR c++/81574] lambda capture of function reference\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-11/msg01200.html\n\tPR c++/81574\n\t* lambda.c (lambda_capture_field_type): Function references are\n\talways catured by reference.\n\n\tPR c++/81574\n\t* g++.dg/cpp1y/pr81574.C: New.\n\nFrom-SVN: r254768", "tree": {"sha": "11000c7700a2d61a46ce3a7e455d12e6a4694c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11000c7700a2d61a46ce3a7e455d12e6a4694c66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03ab2eb725851203ccc34ca3210439801812a6be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ab2eb725851203ccc34ca3210439801812a6be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03ab2eb725851203ccc34ca3210439801812a6be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ab2eb725851203ccc34ca3210439801812a6be/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17bae2cadb4e28940545cc4fdb6223ca7e21ed60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17bae2cadb4e28940545cc4fdb6223ca7e21ed60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17bae2cadb4e28940545cc4fdb6223ca7e21ed60"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "e8c882f2253984389630fc526c495d390fb1cf80", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ab2eb725851203ccc34ca3210439801812a6be/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ab2eb725851203ccc34ca3210439801812a6be/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=03ab2eb725851203ccc34ca3210439801812a6be", "patch": "@@ -1,3 +1,9 @@\n+2017-11-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/81574\n+\t* lambda.c (lambda_capture_field_type): Function references are\n+\talways catured by reference.\n+\n 2017-11-15  Martin Liska  <mliska@suse.cz>\n \n \t* decl.c (begin_destructor_body): Use cp_build_fold_indirect_ref"}, {"sha": "4480c67dc5f61814811bf9c79e5be9824340364a", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ab2eb725851203ccc34ca3210439801812a6be/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ab2eb725851203ccc34ca3210439801812a6be/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=03ab2eb725851203ccc34ca3210439801812a6be", "patch": "@@ -245,7 +245,8 @@ lambda_capture_field_type (tree expr, bool explicit_init_p,\n     {\n       type = non_reference (unlowered_expr_type (expr));\n \n-      if (!is_this && by_reference_p)\n+      if (!is_this\n+\t  && (by_reference_p || TREE_CODE (type) == FUNCTION_TYPE))\n \ttype = build_reference_type (type);\n     }\n "}, {"sha": "8478a7a88f2d5ac60805dbfc18fc9bc089c65ae4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ab2eb725851203ccc34ca3210439801812a6be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ab2eb725851203ccc34ca3210439801812a6be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03ab2eb725851203ccc34ca3210439801812a6be", "patch": "@@ -1,3 +1,8 @@\n+2017-11-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/81574\n+\t* g++.dg/cpp1y/pr81574.C: New.\n+\n 2017-11-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82985"}, {"sha": "f9949ab90e9e91fe87b9bddc1b9a6721d5993b8a", "filename": "gcc/testsuite/g++.dg/cpp1y/pr81574.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ab2eb725851203ccc34ca3210439801812a6be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr81574.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ab2eb725851203ccc34ca3210439801812a6be/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr81574.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr81574.C?ref=03ab2eb725851203ccc34ca3210439801812a6be", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile { target c++14 } }\n+// PR c++/81574 references to functions are captured by reference.\n+\n+// 8.1.5.2/10\n+// For each entity captured by copy, ... an lvalue reference to the\n+// referenced function type if the entity is a reference to a function\n+\n+void f (void (&b)())\n+{\n+  [=] {  b; } ();\n+  [=, b(f)] { b; } ();\n+  [=, b(b)] { b; } ();\n+}"}]}