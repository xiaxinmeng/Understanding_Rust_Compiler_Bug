{"sha": "f8d136e50e6f82cba793483d910a2b2643108508", "node_id": "C_kwDOANBUbNoAKGY4ZDEzNmU1MGU2ZjgyY2JhNzkzNDgzZDkxMGEyYjI2NDMxMDg1MDg", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-07T13:42:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-11T13:34:44Z"}, "message": "tree-optimization/106904 - bogus -Wstringopt-overflow with vectors\n\nThe following avoids CSE of &ps->wp to &ps->wp.hwnd confusing\n-Wstringopt-overflow by making sure to produce addresses to the\nbiggest container from vectorization.  For this I introduce\nstrip_zero_offset_components which turns &ps->wp.hwnd into\n&(*ps) and use that to base the vector data references on.\nThat will also work for addresses with variable components,\nalternatively emitting pointer arithmetic via calling\nget_inner_reference and gimplifying that would be possible\nbut likely more intrusive.\n\nThis is by no means a complete fix for all of those issues\n(avoiding ADDR_EXPRs in favor of pointer arithmetic might be).\nOther passes will have similar issues.\n\nIn theory that might now cause false negatives.\n\n\tPR tree-optimization/106904\n\t* tree.h (strip_zero_offset_components): Declare.\n\t* tree.cc (strip_zero_offset_components): Define.\n\t* tree-vect-data-refs.cc (vect_create_addr_base_for_vector_ref):\n\tStrip zero offset components before building the address.\n\n\t* gcc.dg/Wstringop-overflow-pr106904.c: New testcase.", "tree": {"sha": "3339f7ecb0d9cd8b0b2bb00b2f8990e99dcc0a89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3339f7ecb0d9cd8b0b2bb00b2f8990e99dcc0a89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8d136e50e6f82cba793483d910a2b2643108508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d136e50e6f82cba793483d910a2b2643108508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d136e50e6f82cba793483d910a2b2643108508", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d136e50e6f82cba793483d910a2b2643108508/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "045592f665bcb67b75dc6b86badbe2fd44aed3e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045592f665bcb67b75dc6b86badbe2fd44aed3e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/045592f665bcb67b75dc6b86badbe2fd44aed3e6"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "15e67c28c15d09ad3b2f1b67c2cc5bc2ad33c32a", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-pr106904.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d136e50e6f82cba793483d910a2b2643108508/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-pr106904.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d136e50e6f82cba793483d910a2b2643108508/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-pr106904.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-pr106904.c?ref=f8d136e50e6f82cba793483d910a2b2643108508", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wstringop-overflow -fno-vect-cost-model\" } */\n+\n+struct windowpos\n+{\n+  int hwnd;\n+  int hwnd2;\n+};\n+\n+struct packed_windowpos\n+{\n+  int hwnd;\n+  int pad1;\n+  int hwnd2;\n+  int pad2;\n+};\n+\n+struct packed_structs\n+{\n+  struct packed_windowpos wp;\n+};\n+\n+void func(struct packed_structs *ps)\n+{\n+  struct windowpos wp;\n+\n+  wp.hwnd = ps->wp.hwnd;\n+  wp.hwnd2 = ps->wp.hwnd2;\n+  __builtin_memcpy(&ps->wp, &wp, sizeof(wp)); /* { dg-bogus \"into a region\" } */\n+}"}, {"sha": "18b0f962670ffc86fe5cc4e633097f3ce45341fe", "filename": "gcc/tree-vect-data-refs.cc", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d136e50e6f82cba793483d910a2b2643108508/gcc%2Ftree-vect-data-refs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d136e50e6f82cba793483d910a2b2643108508/gcc%2Ftree-vect-data-refs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.cc?ref=f8d136e50e6f82cba793483d910a2b2643108508", "patch": "@@ -4845,11 +4845,13 @@ vect_create_addr_base_for_vector_ref (vec_info *vinfo, stmt_vec_info stmt_info,\n   if (loop_vinfo)\n     addr_base = fold_build_pointer_plus (data_ref_base, base_offset);\n   else\n-    {\n-      addr_base = build1 (ADDR_EXPR,\n-\t\t\t  build_pointer_type (TREE_TYPE (DR_REF (dr))),\n-\t\t\t  unshare_expr (DR_REF (dr)));\n-    }\n+    addr_base = build1 (ADDR_EXPR,\n+\t\t\tbuild_pointer_type (TREE_TYPE (DR_REF (dr))),\n+\t\t\t/* Strip zero offset components since we don't need\n+\t\t\t   them and they can confuse late diagnostics if\n+\t\t\t   we CSE them wrongly.  See PR106904 for example.  */\n+\t\t\tunshare_expr (strip_zero_offset_components\n+\t\t\t\t\t\t\t\t(DR_REF (dr))));\n \n   vect_ptr_type = build_pointer_type (TREE_TYPE (DR_REF (dr)));\n   dest = vect_get_new_vect_var (vect_ptr_type, vect_pointer_var, base_name);"}, {"sha": "0a51f9ddb4d83cd84f73ee274b90b9dd90773446", "filename": "gcc/tree.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d136e50e6f82cba793483d910a2b2643108508/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d136e50e6f82cba793483d910a2b2643108508/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=f8d136e50e6f82cba793483d910a2b2643108508", "patch": "@@ -12014,6 +12014,18 @@ strip_invariant_refs (const_tree op)\n   return op;\n }\n \n+/* Strip handled components with zero offset from OP.  */\n+\n+tree\n+strip_zero_offset_components (tree op)\n+{\n+  while (TREE_CODE (op) == COMPONENT_REF\n+\t && integer_zerop (DECL_FIELD_OFFSET (TREE_OPERAND (op, 1)))\n+\t && integer_zerop (DECL_FIELD_BIT_OFFSET (TREE_OPERAND (op, 1))))\n+    op = TREE_OPERAND (op, 0);\n+  return op;\n+}\n+\n static GTY(()) tree gcc_eh_personality_decl;\n \n /* Return the GCC personality function decl.  */"}, {"sha": "73d3dd723f81c9f5662ee46abf66736a985afb18", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d136e50e6f82cba793483d910a2b2643108508/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d136e50e6f82cba793483d910a2b2643108508/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f8d136e50e6f82cba793483d910a2b2643108508", "patch": "@@ -5369,6 +5369,7 @@ extern bool tree_nop_conversion_p (const_tree, const_tree);\n extern tree tree_strip_nop_conversions (tree);\n extern tree tree_strip_sign_nop_conversions (tree);\n extern const_tree strip_invariant_refs (const_tree);\n+extern tree strip_zero_offset_components (tree);\n extern tree lhd_gcc_personality (void);\n extern void assign_assembler_name_if_needed (tree);\n extern bool warn_deprecated_use (tree, tree);"}]}