{"sha": "ceadb728b046622ad72dcd5df7fc8cba2767c09b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VhZGI3MjhiMDQ2NjIyYWQ3MmRjZDVkZjdmYzhjYmEyNzY3YzA5Yg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2009-05-27T16:06:44Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2009-05-27T16:06:44Z"}, "message": "expr.c (target_align): New function.\n\n\t* expr.c (target_align): New function.  Alignment the TARGET of an\n\tassignment may be assume to have.\n\t(highest_pow2_factor_for_target): Use it instead of relying on\n\timmediate tree attributes of TARGET, not necessarily honored when\n\tintermediate bitfields are involved.\n\n\ttestsuite/\n\t* gcc.c-torture/execute/align-nest.c: New testcase.\n\t* gnat.dg/misaligned_nest.adb: New testcase.\n\n\nCo-Authored-By: Eric Botcazou <ebotcazou@adacore.com>\n\nFrom-SVN: r147916", "tree": {"sha": "f0363ecd3a5e0d7186fb53caf50d4ad1fd624591", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0363ecd3a5e0d7186fb53caf50d4ad1fd624591"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceadb728b046622ad72dcd5df7fc8cba2767c09b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceadb728b046622ad72dcd5df7fc8cba2767c09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceadb728b046622ad72dcd5df7fc8cba2767c09b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceadb728b046622ad72dcd5df7fc8cba2767c09b/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c1df0e1ac5fa4fae5dabbace846c1aefeca3e4a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1df0e1ac5fa4fae5dabbace846c1aefeca3e4a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1df0e1ac5fa4fae5dabbace846c1aefeca3e4a9"}], "stats": {"total": 119, "additions": 111, "deletions": 8}, "files": [{"sha": "2be0ee95914285e3b2fbc48c595cb08b25f9b7b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceadb728b046622ad72dcd5df7fc8cba2767c09b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceadb728b046622ad72dcd5df7fc8cba2767c09b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ceadb728b046622ad72dcd5df7fc8cba2767c09b", "patch": "@@ -1,3 +1,11 @@\n+2009-05-28  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* expr.c (target_align): New function.  Alignment the TARGET of an\n+\tassignment may be assume to have.\n+\t(highest_pow2_factor_for_target): Use it instead of relying on\n+\timmediate tree attributes of TARGET, not necessarily honored when\n+\tintermediate bitfields are involved.\n+\t\n 2009-05-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/40266"}, {"sha": "1ecdb0277d2c2387c2c0415e7c9bacdb83ff87dd", "filename": "gcc/expr.c", "status": "modified", "additions": 43, "deletions": 8, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceadb728b046622ad72dcd5df7fc8cba2767c09b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceadb728b046622ad72dcd5df7fc8cba2767c09b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ceadb728b046622ad72dcd5df7fc8cba2767c09b", "patch": "@@ -6224,6 +6224,45 @@ component_ref_field_offset (tree exp)\n   else\n     return SUBSTITUTE_PLACEHOLDER_IN_EXPR (DECL_FIELD_OFFSET (field), exp);\n }\n+\n+/* Alignment in bits the TARGET of an assignment may be assumed to have.  */\n+\n+static unsigned HOST_WIDE_INT\n+target_align (const_tree target)\n+{\n+  /* We might have a chain of nested references with intermediate misaligning\n+     bitfields components, so need to recurse to find out.  */\n+\n+  unsigned HOST_WIDE_INT this_align, outer_align;\n+\n+  switch (TREE_CODE (target))\n+    {\n+    case BIT_FIELD_REF:\n+      return 1;\n+\n+    case COMPONENT_REF:\n+      this_align = DECL_ALIGN (TREE_OPERAND (target, 1));\n+      outer_align = target_align (TREE_OPERAND (target, 0));\n+      return MIN (this_align, outer_align);\n+\n+    case ARRAY_REF:\n+    case ARRAY_RANGE_REF:\n+      this_align = TYPE_ALIGN (TREE_TYPE (target));\n+      outer_align = target_align (TREE_OPERAND (target, 0));\n+      return MIN (this_align, outer_align);\n+\n+    CASE_CONVERT:\n+    case NON_LVALUE_EXPR:\n+    case VIEW_CONVERT_EXPR:\n+      this_align = TYPE_ALIGN (TREE_TYPE (target));\n+      outer_align = target_align (TREE_OPERAND (target, 0));\n+      return MAX (this_align, outer_align);\n+\n+    default:\n+      return TYPE_ALIGN (TREE_TYPE (target));\n+    }\n+}\n+\n \f\n /* Given an rtx VALUE that may contain additions and multiplications, return\n    an equivalent value that just refers to a register, memory, or constant.\n@@ -6670,14 +6709,10 @@ highest_pow2_factor (const_tree exp)\n static unsigned HOST_WIDE_INT\n highest_pow2_factor_for_target (const_tree target, const_tree exp)\n {\n-  unsigned HOST_WIDE_INT target_align, factor;\n-\n-  factor = highest_pow2_factor (exp);\n-  if (TREE_CODE (target) == COMPONENT_REF)\n-    target_align = DECL_ALIGN_UNIT (TREE_OPERAND (target, 1));\n-  else\n-    target_align = TYPE_ALIGN_UNIT (TREE_TYPE (target));\n-  return MAX (factor, target_align);\n+  unsigned HOST_WIDE_INT talign = target_align (target) / BITS_PER_UNIT;\n+  unsigned HOST_WIDE_INT factor = highest_pow2_factor (exp);\n+  \n+  return MAX (factor, talign);\n }\n \f\n /* Return &VAR expression for emulated thread local VAR.  */"}, {"sha": "0cc0a1000e487b053a5d8b67d7d0d1065d28be19", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceadb728b046622ad72dcd5df7fc8cba2767c09b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceadb728b046622ad72dcd5df7fc8cba2767c09b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ceadb728b046622ad72dcd5df7fc8cba2767c09b", "patch": "@@ -1,3 +1,9 @@\n+2009-05-28  Olivier Hainque  <hainque@adacore.com>\t\n+            Eric Botcazou  <botcazou@adacore.com>\n+    \n+\t* gcc.c-torture/execute/align-nest.c: New testcase.\n+\t* gnat.dg/misaligned_nest.adb: New testcase.\n+\n 2009-05-27  Rafael Avila de Espindola  <espindola@google.com>\n \n \t* g++.dg/plugin/attribute_plugin.c: Include gcc-plugin.h first."}, {"sha": "2ff2952c70c6840677b16acaab9b92bb82758d8d", "filename": "gcc/testsuite/gcc.c-torture/execute/align-nest.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceadb728b046622ad72dcd5df7fc8cba2767c09b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falign-nest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceadb728b046622ad72dcd5df7fc8cba2767c09b/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falign-nest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Falign-nest.c?ref=ceadb728b046622ad72dcd5df7fc8cba2767c09b", "patch": "@@ -0,0 +1,28 @@\n+\n+void foo(int n)\n+{\n+  typedef struct\n+  {\n+    int value;\n+  } myint;\n+  \n+  struct S\n+  {\n+    int i[n];\n+    unsigned int b:1;\n+    myint mi;\n+  } __attribute__ ((packed)) __attribute__ ((aligned (4)));\n+\n+  struct S s[2];\n+  int k;\n+  \n+  for (k = 0; k < 2; k ++)\n+    s[k].mi.value = 0;\n+}\n+\n+int main ()\n+{\n+  foo (2);\n+  return 0;\n+}\n+"}, {"sha": "3b6fd845da4d2e5fa69eb8e8787f9085e75a4ffe", "filename": "gcc/testsuite/gnat.dg/misaligned_nest.adb", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceadb728b046622ad72dcd5df7fc8cba2767c09b/gcc%2Ftestsuite%2Fgnat.dg%2Fmisaligned_nest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceadb728b046622ad72dcd5df7fc8cba2767c09b/gcc%2Ftestsuite%2Fgnat.dg%2Fmisaligned_nest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fmisaligned_nest.adb?ref=ceadb728b046622ad72dcd5df7fc8cba2767c09b", "patch": "@@ -0,0 +1,26 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatp\" }\n+\n+procedure Misaligned_Nest is\n+\n+   type Int is record\n+      V : Integer;\n+   end record;\n+\n+   type Block is record\n+      B : Boolean;\n+      I : Int;\n+   end record;\n+   pragma Pack (Block);\n+   for Block'Alignment use 1;\n+\n+   type Pair is array (1 .. 2) of Block;\n+\n+   P : Pair;\n+begin\n+   for K in P'Range loop\n+      P(K).I.V := 1;\n+   end loop;\n+end;\n+\n+"}]}