{"sha": "59ea036456a663cb19a4f5a03c0643bd66f55b30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTllYTAzNjQ1NmE2NjNjYjE5YTRmNWEwM2MwNjQzYmQ2NmY1NWIzMA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-08-22T19:44:27Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-08-22T19:44:27Z"}, "message": "re PR c++/62199 (ICE with -Wlogical-not-parentheses)\n\n\tPR c++/62199\n\t* doc/invoke.texi: Update -Wlogical-not-parentheses description.\nc-family/\n\t* c-common.c (warn_logical_not_parentheses): Don't check LHS.  Don't\n\tcheck for vector types.  Drop LHS argument.\n\t* c-common.h (warn_logical_not_parentheses): Adjust.\nc/\n\t* c-typeck.c (parser_build_binary_op): Adjust call to\n\twarn_logical_not_parentheses.\ncp/\n\t* parser.c (cp_parser_binary_expression): Check each LHS if it's\n\tpreceded with logical not.  Adjust call to\n\twarn_logical_not_parentheses.\ntestsuite/\n\t* c-c++-common/pr62199.c: New test.\n\t* c-c++-common/pr62199-2.c: New test.\n\t* g++.dg/warn/Wparentheses-25.C: Drop XFAILs.\n\nFrom-SVN: r214360", "tree": {"sha": "172770434748d3c011b458569b6b2790b8b20842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/172770434748d3c011b458569b6b2790b8b20842"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59ea036456a663cb19a4f5a03c0643bd66f55b30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ea036456a663cb19a4f5a03c0643bd66f55b30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59ea036456a663cb19a4f5a03c0643bd66f55b30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59ea036456a663cb19a4f5a03c0643bd66f55b30/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e0bf0dc2c0c17dd4fa6f76c87411906c33dfc3ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bf0dc2c0c17dd4fa6f76c87411906c33dfc3ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0bf0dc2c0c17dd4fa6f76c87411906c33dfc3ce"}], "stats": {"total": 222, "additions": 144, "deletions": 78}, "files": [{"sha": "caa40b37f2fa8760eb948cba86d707681c9fed75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=59ea036456a663cb19a4f5a03c0643bd66f55b30", "patch": "@@ -1,3 +1,8 @@\n+2014-08-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/62199\n+\t* doc/invoke.texi: Update -Wlogical-not-parentheses description.\n+\n 2014-08-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61271"}, {"sha": "4042306398d2b9b146d754151aae8b5884f748b5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=59ea036456a663cb19a4f5a03c0643bd66f55b30", "patch": "@@ -1,3 +1,10 @@\n+2014-08-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/62199\n+\t* c-common.c (warn_logical_not_parentheses): Don't check LHS.  Don't\n+\tcheck for vector types.  Drop LHS argument.\n+\t* c-common.h (warn_logical_not_parentheses): Adjust.\n+\n 2014-08-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* c.opt (Wcomment): Use CPP, Var and LangEnabledBy."}, {"sha": "58b976378d5e14e23707a5aa81fc63fed1d6947c", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=59ea036456a663cb19a4f5a03c0643bd66f55b30", "patch": "@@ -1727,21 +1727,15 @@ warn_logical_operator (location_t location, enum tree_code code, tree type,\n \n /* Warn about logical not used on the left hand side operand of a comparison.\n    This function assumes that the LHS is inside of TRUTH_NOT_EXPR.\n-   Do not warn if the LHS or RHS is of a boolean or a vector type.  */\n+   Do not warn if RHS is of a boolean type.  */\n \n void\n warn_logical_not_parentheses (location_t location, enum tree_code code,\n-\t\t\t      tree lhs, tree rhs)\n+\t\t\t      tree rhs)\n {\n-  if (TREE_CODE_CLASS (code) != tcc_comparison)\n-    return;\n-  if (TREE_TYPE (lhs) == NULL_TREE\n-      || TREE_TYPE (rhs) == NULL_TREE)\n-    ;\n-  else if (TREE_CODE (TREE_TYPE (lhs)) == BOOLEAN_TYPE\n-\t   || TREE_CODE (TREE_TYPE (rhs)) == BOOLEAN_TYPE\n-\t   || VECTOR_TYPE_P (TREE_TYPE (lhs))\n-\t   || VECTOR_TYPE_P (TREE_TYPE (rhs)))\n+  if (TREE_CODE_CLASS (code) != tcc_comparison\n+      || TREE_TYPE (rhs) == NULL_TREE\n+      || TREE_CODE (TREE_TYPE (rhs)) == BOOLEAN_TYPE)\n     return;\n \n   warning_at (location, OPT_Wlogical_not_parentheses,"}, {"sha": "20b65e99663ac2cb2d956c363305f76a0d890cb5", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=59ea036456a663cb19a4f5a03c0643bd66f55b30", "patch": "@@ -780,8 +780,7 @@ extern void overflow_warning (location_t, tree);\n extern bool warn_if_unused_value (const_tree, location_t);\n extern void warn_logical_operator (location_t, enum tree_code, tree,\n \t\t\t\t   enum tree_code, tree, enum tree_code, tree);\n-extern void warn_logical_not_parentheses (location_t, enum tree_code, tree,\n-\t\t\t\t\t  tree);\n+extern void warn_logical_not_parentheses (location_t, enum tree_code, tree);\n extern void check_main_parameter_types (tree decl);\n extern bool c_determine_visibility (tree);\n extern bool vector_types_compatible_elements_p (tree, tree);"}, {"sha": "00fb275613e61a21acd68abb9fa89afa47c4f366", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=59ea036456a663cb19a4f5a03c0643bd66f55b30", "patch": "@@ -1,3 +1,9 @@\n+2014-08-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/62199\n+\t* c-typeck.c (parser_build_binary_op): Adjust call to\n+\twarn_logical_not_parentheses.\n+\n 2014-08-22  Igor Zamyatin  <igor.zamyatin@intel.com>\n \n \tPR other/62008"}, {"sha": "a7de8f3c7343d252ffc4c513c59b332b6807a252", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=59ea036456a663cb19a4f5a03c0643bd66f55b30", "patch": "@@ -3414,7 +3414,7 @@ parser_build_binary_op (location_t location, enum tree_code code,\n   if (warn_logical_not_paren\n       && code1 == TRUTH_NOT_EXPR\n       && code2 != TRUTH_NOT_EXPR)\n-    warn_logical_not_parentheses (location, code, arg1.value, arg2.value);\n+    warn_logical_not_parentheses (location, code, arg2.value);\n \n   /* Warn about comparisons against string literals, with the exception\n      of testing for equality or inequality of a string literal with NULL.  */"}, {"sha": "b71dcba151f0078ca0014fbe6cd958f16f945a43", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=59ea036456a663cb19a4f5a03c0643bd66f55b30", "patch": "@@ -1,3 +1,10 @@\n+2014-08-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/62199\n+\t* parser.c (cp_parser_binary_expression): Check each LHS if it's\n+\tpreceded with logical not.  Adjust call to\n+\twarn_logical_not_parentheses.\n+\n 2014-08-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c++/57709"}, {"sha": "4dc7c33cb337ae039057df0d42be3c86573fa154", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=59ea036456a663cb19a4f5a03c0643bd66f55b30", "patch": "@@ -8020,13 +8020,12 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n   enum tree_code rhs_type;\n   enum cp_parser_prec new_prec, lookahead_prec;\n   tree overload;\n-  bool parenthesized_not_lhs_warn\n-    = cp_lexer_next_token_is (parser->lexer, CPP_NOT);\n \n   /* Parse the first expression.  */\n+  current.lhs_type = (cp_lexer_next_token_is (parser->lexer, CPP_NOT)\n+\t\t      ? TRUTH_NOT_EXPR : ERROR_MARK);\n   current.lhs = cp_parser_cast_expression (parser, /*address_p=*/false,\n \t\t\t\t\t   cast_p, decltype_p, pidk);\n-  current.lhs_type = ERROR_MARK;\n   current.prec = prec;\n \n   if (cp_parser_error_occurred (parser))\n@@ -8081,8 +8080,9 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n \n       /* Extract another operand.  It may be the RHS of this expression\n \t or the LHS of a new, higher priority expression.  */\n+      rhs_type = (cp_lexer_next_token_is (parser->lexer, CPP_NOT)\n+\t\t  ? TRUTH_NOT_EXPR : ERROR_MARK);\n       rhs = cp_parser_simple_cast_expression (parser);\n-      rhs_type = ERROR_MARK;\n \n       /* Get another operator token.  Look up its precedence to avoid\n \t building a useless (immediately popped) stack entry for common\n@@ -8125,9 +8125,8 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n \tc_inhibit_evaluation_warnings -= current.lhs == truthvalue_true_node;\n \n       if (warn_logical_not_paren\n-\t  && parenthesized_not_lhs_warn)\n-\twarn_logical_not_parentheses (current.loc, current.tree_type,\n-\t\t\t\t      TREE_OPERAND (current.lhs, 0), rhs);\n+\t  && current.lhs_type == TRUTH_NOT_EXPR)\n+\twarn_logical_not_parentheses (current.loc, current.tree_type, rhs);\n \n       overload = NULL;\n       /* ??? Currently we pass lhs_type == ERROR_MARK and rhs_type =="}, {"sha": "dda8e91250cd689e55da3f38bc187bca2ebb56f7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=59ea036456a663cb19a4f5a03c0643bd66f55b30", "patch": "@@ -4776,8 +4776,8 @@ bit-wise operator is likely to be expected.\n @opindex Wlogical-not-parentheses\n @opindex Wno-logical-not-parentheses\n Warn about logical not used on the left hand side operand of a comparison.\n-This option does not warn if the LHS or RHS operand is of a boolean or\n-a vector type.  Its purpose is to detect suspicious code like the following:\n+This option does not warn if the RHS operand is of a boolean type.  Its\n+purpose is to detect suspicious code like the following:\n @smallexample\n int a;\n @dots{}"}, {"sha": "9f40c35c15965b9d70dc8311f18757978d03f93a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59ea036456a663cb19a4f5a03c0643bd66f55b30", "patch": "@@ -1,3 +1,10 @@\n+2014-08-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/62199\n+\t* c-c++-common/pr62199.c: New test.\n+\t* c-c++-common/pr62199-2.c: New test.\n+\t* g++.dg/warn/Wparentheses-25.C: Drop XFAILs.\n+\n 2014-08-22  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c++/57709"}, {"sha": "7647f16042bd92ef256d803d56d320018a41e6c8", "filename": "gcc/testsuite/c-c++-common/pr62199-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr62199-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr62199-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr62199-2.c?ref=59ea036456a663cb19a4f5a03c0643bd66f55b30", "patch": "@@ -0,0 +1,20 @@\n+/* PR c++/62199 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wlogical-not-parentheses\" } */\n+\n+#ifndef __cplusplus\n+# define bool _Bool\n+#endif\n+\n+bool r;\n+\n+void\n+foo (bool b)\n+{\n+  r = !b == 1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  r = !b != 1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  r = !b > 1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  r = !b >= 1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  r = !b < 1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  r = !b <= 1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+}"}, {"sha": "51078c8403ff876101b3b659ad0f687d0a9bd8d1", "filename": "gcc/testsuite/c-c++-common/pr62199.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr62199.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr62199.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr62199.c?ref=59ea036456a663cb19a4f5a03c0643bd66f55b30", "patch": "@@ -0,0 +1,22 @@\n+/* PR c++/62199 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wlogical-not-parentheses\" } */\n+\n+int r;\n+void\n+foo (int a)\n+{\n+  r = a > 0 || !a >= 2; /* { dg-warning \"19:logical not is only applied to the left hand side of comparison\" } */\n+  r = !a || a == 10;\n+  r = !a && !a < 4; /* { dg-warning \"16:logical not is only applied to the left hand side of comparison\" } */\n+  r = !a > 0 && a < 6; /* { dg-warning \"10:logical not is only applied to the left hand side of comparison\" } */\n+  r = a + (!a < 12); /* { dg-warning \"15:logical not is only applied to the left hand side of comparison\" } */\n+  r = a == 7 || !a < 12; /* { dg-warning \"20:logical not is only applied to the left hand side of comparison\" } */\n+  r = (a == 7 * a > 0) || !a < 2; /* { dg-warning \"30:logical not is only applied to the left hand side of comparison\" } */\n+  r = (1 > !a) || (!42 > a); /* { dg-warning \"24:logical not is only applied to the left hand side of comparison\" } */\n+  r = (!5 > a); /* { dg-warning \"11:logical not is only applied to the left hand side of comparison\" } */\n+  r = (!0 > a); /* { dg-warning \"11:logical not is only applied to the left hand side of comparison\" } */\n+  r = (!-5 > a); /* { dg-warning \"12:logical not is only applied to the left hand side of comparison\" } */\n+  r = (!(5 + 3) > a); /* { dg-warning \"17:logical not is only applied to the left hand side of comparison\" } */\n+  r = (!(5 - a) > a); /* { dg-warning \"17:logical not is only applied to the left hand side of comparison\" } */\n+}"}, {"sha": "d9951a4f46b620ad9bad8284547586afe9995a53", "filename": "gcc/testsuite/g++.dg/warn/Wparentheses-25.C", "status": "modified", "additions": 55, "deletions": 55, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59ea036456a663cb19a4f5a03c0643bd66f55b30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWparentheses-25.C?ref=59ea036456a663cb19a4f5a03c0643bd66f55b30", "patch": "@@ -8,7 +8,7 @@ int foo (int);\n int\n bar (int a, int b, int c)\n {\n-  foo (!a & b); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & b); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo (!a & (b < c));\n   foo (!a & (b > c));\n   foo (!a & (b == c));\n@@ -20,7 +20,7 @@ bar (int a, int b, int c)\n   foo (!a & !b);\n   foo (!(a & b));\n   foo ((!a) & b);\n-  foo (!a & 2); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & 2); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo (!a & (2 < c));\n   foo (!a & (2 > c));\n   foo (!a & (2 == c));\n@@ -32,7 +32,7 @@ bar (int a, int b, int c)\n   foo (!a & !2);\n   foo (!(a & 2));\n   foo ((!a) & 2);\n-  foo (!1 & 2); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 & 2); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo (!1 & (2 < c));\n   foo (!1 & (2 > c));\n   foo (!1 & (2 == c));\n@@ -44,7 +44,7 @@ bar (int a, int b, int c)\n   foo (!1 & !2);\n   foo (!(1 & 2));\n \n-  foo (!a | b); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | b); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo (!a | (b < c));\n   foo (!a | (b > c));\n   foo (!a | (b == c));\n@@ -56,7 +56,7 @@ bar (int a, int b, int c)\n   foo (!a | !b);\n   foo (!(a | b));\n   foo ((!a) | b);\n-  foo (!a | 2); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a | 2); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo (!a | (2 < c));\n   foo (!a | (2 > c));\n   foo (!a | (2 == c));\n@@ -68,7 +68,7 @@ bar (int a, int b, int c)\n   foo (!a | !2);\n   foo (!(a | 2));\n   foo ((!a) | 2);\n-  foo (!1 | 2); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!1 | 2); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo (!1 | (2 < c));\n   foo (!1 | (2 > c));\n   foo (!1 | (2 == c));\n@@ -159,55 +159,55 @@ bar (int a, int b, int c)\n int\n baz (int a, int b, int c)\n {\n-  foo (!a & (b << c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & (b >> c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & (b + c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & (b - c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & (b = c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & ~b);      /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & (b & c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & (b | c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & 2);       /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & ~2);      /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a & (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 & (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 & (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 & (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 & (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 & (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 & ~2);      /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 & (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 & (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | (b << c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | (b >> c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | (b + c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | (b - c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | (b = c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | ~b);      /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | (b & c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | (b | c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | ~2);      /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!a | (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 | (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 | (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 | (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 | (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 | (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 | ~2);      /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 | (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n-  foo (!1 | (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" { xfail *-*-* } } */\n+  foo (!a & (b << c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (b >> c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (b + c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (b - c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (b = c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & ~b);      /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (b & c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (b | c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & 2);       /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & ~2);      /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a & (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & ~2);      /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 & (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (b << c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (b >> c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (b + c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (b - c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (b = c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | ~b);      /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (b & c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (b | c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | ~2);      /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!a | (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | (2 << c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | (2 >> c));/* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | (2 + c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | (2 - c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | (c = 2)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | ~2);      /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | (2 & c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n+  foo (!1 | (2 | c)); /* { dg-warning \"parentheses\" \"correct warning\" } */\n   foo ((b << c) & !a);\n   foo ((b >> c) & !a);\n   foo ((b + c) & !a);"}]}