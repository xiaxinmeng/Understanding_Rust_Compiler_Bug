{"sha": "53c964ad996a1bb22566b987eafb333b5899deab", "node_id": "C_kwDOANBUbNoAKDUzYzk2NGFkOTk2YTFiYjIyNTY2Yjk4N2VhZmIzMzNiNTg5OWRlYWI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-11-18T18:10:28Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-11-18T18:10:28Z"}, "message": "c++: error recovery during C++20 template-id ADL failure\n\nWhen diagnosing ADL failure we try to perform a second unqualified\nlookup for backwards compatibility with legacy code (via -fpermissive),\nand for better diagnostics.\n\nBut for C++20 template-id ADL, the backwards compatibility code\nsometimes causes confusing subsequent diagnostics such as in the\ntestcase below where we end up diagnosing deduction failure after\nemitting the helpful \"no declarations were found by ADL\".  This happens\nbecause the code just discards the arguments of the template-id callee\nwhen replacing it with the later-declared template, which leads to\noverload resolution failure:\n\n  <stdin>: In instantiation of \u2018void f() [with T = int]\u2019:\n  <stdin>:12:22:   required from here\n  <stdin>:5:9: error: \u2018g\u2019 was not declared in this scope, and no declarations were found by argument-dependent lookup at the point of instantiation [-fpermissive]\n  <stdin>:10:6: note: \u2018template<class T> void g(int)\u2019 declared here, later in the translation unit\n  <stdin>:5:9: error: no matching function for call to \u2018g(int)\u2019\n  <stdin>:10:6: note: candidate: \u2018template<class T> void g(int)\u2019\n  <stdin>:10:6: note:   template argument deduction/substitution failed:\n  <stdin>:5:9: note:   couldn\u2019t deduce template parameter \u2018T\u2019\n\nSo for C++20 template-id ADL, this patch disables the backwards\ncompatibility code while keeping the helpful \"no declarations were\nfound by ADL\" diagnostic.\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (tsubst_copy_and_build) <case CALL_EXPR>: Disable the\n\t-fpermissive fallback for C++20 template-id ADL, but keep the\n\tdiagnostic.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/fn-template25.C: New test.", "tree": {"sha": "2895631da6d0cd3b4d5dfaf2794d889f5799ba25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2895631da6d0cd3b4d5dfaf2794d889f5799ba25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53c964ad996a1bb22566b987eafb333b5899deab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c964ad996a1bb22566b987eafb333b5899deab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c964ad996a1bb22566b987eafb333b5899deab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c964ad996a1bb22566b987eafb333b5899deab/comments", "author": null, "committer": null, "parents": [{"sha": "75ac95f6647367783c4d65f6f686867ca425cb61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ac95f6647367783c4d65f6f686867ca425cb61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ac95f6647367783c4d65f6f686867ca425cb61"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "71a771fd0f2e3b134c744c98e9590b61d12e59f0", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c964ad996a1bb22566b987eafb333b5899deab/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c964ad996a1bb22566b987eafb333b5899deab/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=53c964ad996a1bb22566b987eafb333b5899deab", "patch": "@@ -20439,7 +20439,8 @@ tsubst_copy_and_build (tree t,\n \t\t\t\t\t\t\t    (function, 1))))\n \t    && !any_type_dependent_arguments_p (call_args))\n \t  {\n-\t    if (TREE_CODE (function) == TEMPLATE_ID_EXPR)\n+\t    bool template_id_p = (TREE_CODE (function) == TEMPLATE_ID_EXPR);\n+\t    if (template_id_p)\n \t      function = TREE_OPERAND (function, 0);\n \t    if (koenig_p && (complain & tf_warning_or_error))\n \t      {\n@@ -20454,20 +20455,21 @@ tsubst_copy_and_build (tree t,\n \n \t\tif (unq != function)\n \t\t  {\n-\t\t    /* In a lambda fn, we have to be careful to not\n-\t\t       introduce new this captures.  Legacy code can't\n-\t\t       be using lambdas anyway, so it's ok to be\n-\t\t       stricter.  */\n-\t\t    bool in_lambda = (current_class_type\n-\t\t\t\t      && LAMBDA_TYPE_P (current_class_type));\n \t\t    char const *const msg\n \t\t      = G_(\"%qD was not declared in this scope, \"\n \t\t\t   \"and no declarations were found by \"\n \t\t\t   \"argument-dependent lookup at the point \"\n \t\t\t   \"of instantiation\");\n \n+\t\t    bool in_lambda = (current_class_type\n+\t\t\t\t      && LAMBDA_TYPE_P (current_class_type));\n+\t\t    /* In a lambda fn, we have to be careful to not\n+\t\t       introduce new this captures.  Legacy code can't\n+\t\t       be using lambdas anyway, so it's ok to be\n+\t\t       stricter.  Be strict with C++20 template-id ADL too.  */\n+\t\t    bool strict = in_lambda || template_id_p;\n \t\t    bool diag = true;\n-\t\t    if (in_lambda)\n+\t\t    if (strict)\n \t\t      error_at (cp_expr_loc_or_input_loc (t),\n \t\t\t\tmsg, function);\n \t\t    else\n@@ -20503,7 +20505,7 @@ tsubst_copy_and_build (tree t,\n \t\t\t  inform (DECL_SOURCE_LOCATION (fn),\n \t\t\t\t  \"%qD declared here, later in the \"\n \t\t\t\t  \"translation unit\", fn);\n-\t\t\tif (in_lambda)\n+\t\t\tif (strict)\n \t\t\t  RETURN (error_mark_node);\n \t\t      }\n "}, {"sha": "5da409c2a1bee6c080fd8f7e9707bc5305a0eaf6", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template25.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c964ad996a1bb22566b987eafb333b5899deab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c964ad996a1bb22566b987eafb333b5899deab/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template25.C?ref=53c964ad996a1bb22566b987eafb333b5899deab", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile { target c++20 } }\n+\n+template<class T>\n+void f() {\n+  g<int>(T{}); // { dg-error \"argument-dependent lookup\" }\n+\t       // { dg-bogus \"no match\" \"\" { target *-*-* } .-1 }\n+}\n+\n+template<class T>\n+void g(int);   // { dg-message \"declared here, later\" }\n+\n+template void f<int>();"}]}