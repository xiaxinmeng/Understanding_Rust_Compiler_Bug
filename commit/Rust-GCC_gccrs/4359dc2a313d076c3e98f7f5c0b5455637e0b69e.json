{"sha": "4359dc2a313d076c3e98f7f5c0b5455637e0b69e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1OWRjMmEzMTNkMDc2YzNlOThmN2Y1YzBiNTQ1NTYzN2UwYjY5ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-09-14T10:11:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-09-14T10:11:11Z"}, "message": "re PR middle-end/45567 (__builtin_popcountl ICEs with -ftree-ter)\n\n\tPR middle-end/45567\n\t* builtins.c (expand_builtin_interclass_mathfn, expand_builtin_cexpi,\n\texpand_builtin_powi): Remove subtarget argument, pass NULL_RTX instead.\n\t(expand_builtin): Adjust caller.\n\t(expand_builtin_unop): Only use subtarget if it has the right mode.\n\n\t* gcc.dg/pr45567.c: New test.\n\nFrom-SVN: r164274", "tree": {"sha": "1802214627408ecab34dcced888bee5f329ad0c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1802214627408ecab34dcced888bee5f329ad0c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4359dc2a313d076c3e98f7f5c0b5455637e0b69e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4359dc2a313d076c3e98f7f5c0b5455637e0b69e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4359dc2a313d076c3e98f7f5c0b5455637e0b69e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4359dc2a313d076c3e98f7f5c0b5455637e0b69e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "515871c739c287a65e8d38326aad84e7b832a855", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515871c739c287a65e8d38326aad84e7b832a855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/515871c739c287a65e8d38326aad84e7b832a855"}], "stats": {"total": 55, "additions": 38, "deletions": 17}, "files": [{"sha": "f7a2fd8c040e0df285085e24b7663229e6d363fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4359dc2a313d076c3e98f7f5c0b5455637e0b69e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4359dc2a313d076c3e98f7f5c0b5455637e0b69e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4359dc2a313d076c3e98f7f5c0b5455637e0b69e", "patch": "@@ -1,3 +1,11 @@\n+2010-09-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/45567\n+\t* builtins.c (expand_builtin_interclass_mathfn, expand_builtin_cexpi,\n+\texpand_builtin_powi): Remove subtarget argument, pass NULL_RTX instead.\n+\t(expand_builtin): Adjust caller.\n+\t(expand_builtin_unop): Only use subtarget if it has the right mode.\n+\n 2010-09-14  Tristan Gingold  <gingold@adacore.com>\n \n \t* configure.ac (plugins): Fix typos."}, {"sha": "2dd6119c782b02c7cd829f18ecbeb0ac15ab2bd1", "filename": "gcc/builtins.c", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4359dc2a313d076c3e98f7f5c0b5455637e0b69e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4359dc2a313d076c3e98f7f5c0b5455637e0b69e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4359dc2a313d076c3e98f7f5c0b5455637e0b69e", "patch": "@@ -106,9 +106,9 @@ static void expand_errno_check (tree, rtx);\n static rtx expand_builtin_mathfn (tree, rtx, rtx);\n static rtx expand_builtin_mathfn_2 (tree, rtx, rtx);\n static rtx expand_builtin_mathfn_3 (tree, rtx, rtx);\n-static rtx expand_builtin_interclass_mathfn (tree, rtx, rtx);\n+static rtx expand_builtin_interclass_mathfn (tree, rtx);\n static rtx expand_builtin_sincos (tree);\n-static rtx expand_builtin_cexpi (tree, rtx, rtx);\n+static rtx expand_builtin_cexpi (tree, rtx);\n static rtx expand_builtin_int_roundingfn (tree, rtx);\n static rtx expand_builtin_int_roundingfn_2 (tree, rtx);\n static rtx expand_builtin_next_arg (void);\n@@ -2338,11 +2338,10 @@ interclass_mathfn_icode (tree arg, tree fndecl)\n    isnan, etc).\n    Return 0 if a normal call should be emitted rather than expanding the\n    function in-line.  EXP is the expression that is a call to the builtin\n-   function; if convenient, the result should be placed in TARGET.\n-   SUBTARGET may be used as the target for computing one of EXP's operands.  */\n+   function; if convenient, the result should be placed in TARGET.  */\n \n static rtx\n-expand_builtin_interclass_mathfn (tree exp, rtx target, rtx subtarget)\n+expand_builtin_interclass_mathfn (tree exp, rtx target)\n {\n   enum insn_code icode = CODE_FOR_nothing;\n   rtx op0;\n@@ -2375,7 +2374,7 @@ expand_builtin_interclass_mathfn (tree exp, rtx target, rtx subtarget)\n \t side-effects more the once.  */\n       CALL_EXPR_ARG (exp, 0) = arg = builtin_save_expr (arg);\n \n-      op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n+      op0 = expand_expr (arg, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n \n       if (mode != GET_MODE (op0))\n \top0 = convert_to_mode (mode, op0, 0);\n@@ -2442,11 +2441,10 @@ expand_builtin_sincos (tree exp)\n \n /* Expand a call to the internal cexpi builtin to the sincos math function.\n    EXP is the expression that is a call to the builtin function; if convenient,\n-   the result should be placed in TARGET.  SUBTARGET may be used as the target\n-   for computing one of EXP's operands.  */\n+   the result should be placed in TARGET.  */\n \n static rtx\n-expand_builtin_cexpi (tree exp, rtx target, rtx subtarget)\n+expand_builtin_cexpi (tree exp, rtx target)\n {\n   tree fndecl = get_callee_fndecl (exp);\n   tree arg, type;\n@@ -2469,7 +2467,7 @@ expand_builtin_cexpi (tree exp, rtx target, rtx subtarget)\n       op1 = gen_reg_rtx (mode);\n       op2 = gen_reg_rtx (mode);\n \n-      op0 = expand_expr (arg, subtarget, VOIDmode, EXPAND_NORMAL);\n+      op0 = expand_expr (arg, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n \n       /* Compute into op1 and op2.  */\n       expand_twoval_unop (sincos_optab, op0, op2, op1, 0);\n@@ -3215,7 +3213,7 @@ expand_builtin_pow (tree exp, rtx target, rtx subtarget)\n    function; if convenient, the result should be placed in TARGET.  */\n \n static rtx\n-expand_builtin_powi (tree exp, rtx target, rtx subtarget)\n+expand_builtin_powi (tree exp, rtx target)\n {\n   tree arg0, arg1;\n   rtx op0, op1;\n@@ -3244,7 +3242,7 @@ expand_builtin_powi (tree exp, rtx target, rtx subtarget)\n \t      || (optimize_insn_for_speed_p ()\n \t\t  && powi_cost (n) <= POWI_MAX_MULTS)))\n \t{\n-\t  op0 = expand_expr (arg0, subtarget, VOIDmode, EXPAND_NORMAL);\n+\t  op0 = expand_expr (arg0, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n \t  op0 = force_reg (mode, op0);\n \t  return expand_powi (op0, mode, n);\n \t}\n@@ -3258,7 +3256,7 @@ expand_builtin_powi (tree exp, rtx target, rtx subtarget)\n   if (target == NULL_RTX)\n     target = gen_reg_rtx (mode);\n \n-  op0 = expand_expr (arg0, subtarget, mode, EXPAND_NORMAL);\n+  op0 = expand_expr (arg0, NULL_RTX, mode, EXPAND_NORMAL);\n   if (GET_MODE (op0) != mode)\n     op0 = convert_to_mode (mode, op0, 0);\n   op1 = expand_expr (arg1, NULL_RTX, mode2, EXPAND_NORMAL);\n@@ -5000,7 +4998,10 @@ expand_builtin_unop (enum machine_mode target_mode, tree exp, rtx target,\n     return NULL_RTX;\n \n   /* Compute the argument.  */\n-  op0 = expand_expr (CALL_EXPR_ARG (exp, 0), subtarget,\n+  op0 = expand_expr (CALL_EXPR_ARG (exp, 0),\n+\t\t     (subtarget\n+\t\t      && (TYPE_MODE (TREE_TYPE (CALL_EXPR_ARG (exp, 0)))\n+\t\t\t  == GET_MODE (subtarget))) ? subtarget : NULL_RTX,\n \t\t     VOIDmode, EXPAND_NORMAL);\n   /* Compute op, into TARGET if possible.\n      Set TARGET to wherever the result comes back.  */\n@@ -5835,7 +5836,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     CASE_FLT_FN (BUILT_IN_FINITE):\n     case BUILT_IN_ISFINITE:\n     case BUILT_IN_ISNORMAL:\n-      target = expand_builtin_interclass_mathfn (exp, target, subtarget);\n+      target = expand_builtin_interclass_mathfn (exp, target);\n       if (target)\n \treturn target;\n       break;\n@@ -5865,7 +5866,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       break;\n \n     CASE_FLT_FN (BUILT_IN_POWI):\n-      target = expand_builtin_powi (exp, target, subtarget);\n+      target = expand_builtin_powi (exp, target);\n       if (target)\n \treturn target;\n       break;\n@@ -5887,7 +5888,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       break;\n \n     CASE_FLT_FN (BUILT_IN_CEXPI):\n-      target = expand_builtin_cexpi (exp, target, subtarget);\n+      target = expand_builtin_cexpi (exp, target);\n       gcc_assert (target);\n       return target;\n "}, {"sha": "e7877fb7d251a3bde41d192696e87cfd27b880ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4359dc2a313d076c3e98f7f5c0b5455637e0b69e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4359dc2a313d076c3e98f7f5c0b5455637e0b69e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4359dc2a313d076c3e98f7f5c0b5455637e0b69e", "patch": "@@ -1,5 +1,8 @@\n 2010-09-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/45567\n+\t* gcc.dg/pr45567.c: New test.\n+\n \tPR debug/45660\n \t* g++.dg/debug/pr45660.C: New test.\n "}, {"sha": "5bf4644077fb6c1a93baaf641a38fd50e5dc9157", "filename": "gcc/testsuite/gcc.dg/pr45567.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4359dc2a313d076c3e98f7f5c0b5455637e0b69e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45567.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4359dc2a313d076c3e98f7f5c0b5455637e0b69e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45567.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45567.c?ref=4359dc2a313d076c3e98f7f5c0b5455637e0b69e", "patch": "@@ -0,0 +1,9 @@\n+/* PR middle-end/45567 */\n+/* { dg-do compile } */\n+/* { dg-options \"-ftree-ter\" } */\n+\n+unsigned\n+foo (char c)\n+{\n+  return __builtin_popcountl ((unsigned long) c);\n+}"}]}