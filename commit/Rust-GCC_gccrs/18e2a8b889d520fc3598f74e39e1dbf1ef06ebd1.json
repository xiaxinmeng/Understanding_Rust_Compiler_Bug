{"sha": "18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThlMmE4Yjg4OWQ1MjBmYzM1OThmNzRlMzllMWRiZjFlZjA2ZWJkMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:20:30Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:20:30Z"}, "message": "[72/77] Pass scalar_mode to scalar_mode_supported_p\n\nThis patch makes the scalar_mode_supported_p target hook take a\nscalar_mode rather than a machine_mode.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* target.def (scalar_mode_supported_p): Take a scalar_mode\n\tinstead of a machine_mode.\n\t* targhooks.h (default_scalar_mode_supported_p): Likewise.\n\t* targhooks.c (default_scalar_mode_supported_p): Likewise.\n\t* config/aarch64/aarch64.c (aarch64_scalar_mode_supported_p): Likewise.\n\t* config/alpha/alpha.c (alpha_scalar_mode_supported_p): Likewise.\n\t* config/arm/arm.c (arm_scalar_mode_supported_p): Likewise.\n\t* config/avr/avr.c (avr_scalar_mode_supported_p): Likewise.\n\t* config/c6x/c6x.c (c6x_scalar_mode_supported_p): Likewise.\n\t* config/i386/i386.c (ix86_scalar_mode_supported_p): Likewise.\n\t* config/ia64/ia64.c (ia64_scalar_mode_supported_p): Likewise.\n\t* config/mips/mips.c (mips_scalar_mode_supported_p): Likewise.\n\t* config/msp430/msp430.c (msp430_scalar_mode_supported_p): Likewise.\n\t* config/pa/pa.c (pa_scalar_mode_supported_p): Likewise.\n\t* config/pdp11/pdp11.c (pdp11_scalar_mode_supported_p): Likewise.\n\t* config/powerpcspe/powerpcspe.c (rs6000_scalar_mode_supported_p):\n\tLikewise.\n\t* config/rs6000/rs6000.c (rs6000_scalar_mode_supported_p): Likewise.\n\t* config/s390/s390.c (s390_scalar_mode_supported_p): Likewise.\n\t* config/spu/spu.c (spu_scalar_mode_supported_p): Likewise.\n\t* config/tilegx/tilegx.c (tilegx_scalar_mode_supported_p): Likewise.\n\t* config/tilepro/tilepro.c (tilepro_scalar_mode_supported_p):\n\tLikewise.\n\t* doc/tm.texi: Regenerate.\n\ngcc/c-family/\n\t* c-attribs.c (vector_mode_valid_p) Fold GET_MODE_INNER call\n\tinto scalar_mode_supported_p call.\n\t(handle_mode_attribute): Update call to scalar_mode_supported_p.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251523", "tree": {"sha": "e1451bf5c192ca3f87cbe104e8705b376d580712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1451bf5c192ca3f87cbe104e8705b376d580712"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/comments", "author": null, "committer": null, "parents": [{"sha": "16d2200070f49ed71053b81699e37bd539a0ee69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16d2200070f49ed71053b81699e37bd539a0ee69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16d2200070f49ed71053b81699e37bd539a0ee69"}], "stats": {"total": 95, "additions": 65, "deletions": 30}, "files": [{"sha": "caaa95d7dcf47a2cc0449b748c4af7936ccfe113", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -1,3 +1,32 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* target.def (scalar_mode_supported_p): Take a scalar_mode\n+\tinstead of a machine_mode.\n+\t* targhooks.h (default_scalar_mode_supported_p): Likewise.\n+\t* targhooks.c (default_scalar_mode_supported_p): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_scalar_mode_supported_p): Likewise.\n+\t* config/alpha/alpha.c (alpha_scalar_mode_supported_p): Likewise.\n+\t* config/arm/arm.c (arm_scalar_mode_supported_p): Likewise.\n+\t* config/avr/avr.c (avr_scalar_mode_supported_p): Likewise.\n+\t* config/c6x/c6x.c (c6x_scalar_mode_supported_p): Likewise.\n+\t* config/i386/i386.c (ix86_scalar_mode_supported_p): Likewise.\n+\t* config/ia64/ia64.c (ia64_scalar_mode_supported_p): Likewise.\n+\t* config/mips/mips.c (mips_scalar_mode_supported_p): Likewise.\n+\t* config/msp430/msp430.c (msp430_scalar_mode_supported_p): Likewise.\n+\t* config/pa/pa.c (pa_scalar_mode_supported_p): Likewise.\n+\t* config/pdp11/pdp11.c (pdp11_scalar_mode_supported_p): Likewise.\n+\t* config/powerpcspe/powerpcspe.c (rs6000_scalar_mode_supported_p):\n+\tLikewise.\n+\t* config/rs6000/rs6000.c (rs6000_scalar_mode_supported_p): Likewise.\n+\t* config/s390/s390.c (s390_scalar_mode_supported_p): Likewise.\n+\t* config/spu/spu.c (spu_scalar_mode_supported_p): Likewise.\n+\t* config/tilegx/tilegx.c (tilegx_scalar_mode_supported_p): Likewise.\n+\t* config/tilepro/tilepro.c (tilepro_scalar_mode_supported_p):\n+\tLikewise.\n+\t* doc/tm.texi: Regenerate.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "9aba47fd6c2e989635bbcdeffd20140303d054c7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -1,3 +1,11 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* c-attribs.c (vector_mode_valid_p) Fold GET_MODE_INNER call\n+\tinto scalar_mode_supported_p call.\n+\t(handle_mode_attribute): Update call to scalar_mode_supported_p.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "4f6638fd99e0a816a307b5b92c884d4b418dcc4a", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -1339,7 +1339,6 @@ static bool\n vector_mode_valid_p (machine_mode mode)\n {\n   enum mode_class mclass = GET_MODE_CLASS (mode);\n-  machine_mode innermode;\n \n   /* Doh!  What's going on?  */\n   if (mclass != MODE_VECTOR_INT\n@@ -1354,14 +1353,12 @@ vector_mode_valid_p (machine_mode mode)\n   if (targetm.vector_mode_supported_p (mode))\n     return true;\n \n-  innermode = GET_MODE_INNER (mode);\n-\n   /* We should probably return 1 if requesting V4DI and we have no DI,\n      but we have V2DI, but this is probably very unlikely.  */\n \n   /* If we have support for the inner mode, we can safely emulate it.\n      We may not have V2DI, but me can emulate with a pair of DIs.  */\n-  return targetm.scalar_mode_supported_p (innermode);\n+  return targetm.scalar_mode_supported_p (GET_MODE_INNER (mode));\n }\n \n \n@@ -1437,7 +1434,8 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \tcase MODE_UFRACT:\n \tcase MODE_ACCUM:\n \tcase MODE_UACCUM:\n-\t  valid_mode = targetm.scalar_mode_supported_p (mode);\n+\t  valid_mode\n+\t    = targetm.scalar_mode_supported_p (as_a <scalar_mode> (mode));\n \t  break;\n \n \tcase MODE_COMPLEX_INT:"}, {"sha": "88e675b807b04d16b7235043925f03113f3777af", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -15150,7 +15150,7 @@ aarch64_libgcc_floating_mode_supported_p (scalar_float_mode mode)\n    if MODE is HFmode, and punt to the generic implementation otherwise.  */\n \n static bool\n-aarch64_scalar_mode_supported_p (machine_mode mode)\n+aarch64_scalar_mode_supported_p (scalar_mode mode)\n {\n   return (mode == HFmode\n \t  ? true"}, {"sha": "c37a7e3631f904a4a420987ec8a64744363913aa", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -691,7 +691,7 @@ resolve_reload_operand (rtx op)\n    indicates only DFmode.  */\n \n static bool\n-alpha_scalar_mode_supported_p (machine_mode mode)\n+alpha_scalar_mode_supported_p (scalar_mode mode)\n {\n   switch (mode)\n     {"}, {"sha": "7e0e9514d014e61233a82d104e3acab85340a797", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -257,7 +257,7 @@ static bool arm_output_addr_const_extra (FILE *, rtx);\n static bool arm_allocate_stack_slots_for_args (void);\n static bool arm_warn_func_return (tree);\n static tree arm_promoted_type (const_tree t);\n-static bool arm_scalar_mode_supported_p (machine_mode);\n+static bool arm_scalar_mode_supported_p (scalar_mode);\n static bool arm_frame_pointer_required (void);\n static bool arm_can_eliminate (const int, const int);\n static void arm_asm_trampoline_template (FILE *);\n@@ -23601,7 +23601,7 @@ arm_promoted_type (const_tree t)\n    special-cased in the default hook.  */\n \n static bool\n-arm_scalar_mode_supported_p (machine_mode mode)\n+arm_scalar_mode_supported_p (scalar_mode mode)\n {\n   if (mode == HFmode)\n     return (arm_fp16_format != ARM_FP16_FORMAT_NONE);"}, {"sha": "09bf5eedbde88dc53e2b5cae2a53bc95687e298d", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -884,7 +884,7 @@ avr_regno_reg_class (int r)\n /* Implement `TARGET_SCALAR_MODE_SUPPORTED_P'.  */\n \n static bool\n-avr_scalar_mode_supported_p (machine_mode mode)\n+avr_scalar_mode_supported_p (scalar_mode mode)\n {\n   if (ALL_FIXED_POINT_MODE_P (mode))\n     return true;"}, {"sha": "bf7ec7e4b008df0b92d060b7d7f61bfd4f9aa86e", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -6256,7 +6256,7 @@ c6x_preferred_simd_mode (machine_mode mode)\n /* Implement TARGET_SCALAR_MODE_SUPPORTED_P.  */\n \n static bool\n-c6x_scalar_mode_supported_p (machine_mode mode)\n+c6x_scalar_mode_supported_p (scalar_mode mode)\n {\n   if (ALL_FIXED_POINT_MODE_P (mode)\n       && GET_MODE_PRECISION (mode) <= 2 * BITS_PER_WORD)"}, {"sha": "7867372789a2e00c63c8b666c539684986af6780", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -45279,7 +45279,7 @@ ix86_expand_reduc (rtx (*fn) (rtx, rtx, rtx), rtx dest, rtx in)\n \f\n /* Target hook for scalar_mode_supported_p.  */\n static bool\n-ix86_scalar_mode_supported_p (machine_mode mode)\n+ix86_scalar_mode_supported_p (scalar_mode mode)\n {\n   if (DECIMAL_FLOAT_MODE_P (mode))\n     return default_decimal_float_supported_p ();"}, {"sha": "409977fadd8ff25cdd2234e321beddefd64a8646", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -310,7 +310,7 @@ static tree ia64_handle_version_id_attribute (tree *, tree, tree, int, bool *);\n static void ia64_encode_section_info (tree, rtx, int);\n static rtx ia64_struct_value_rtx (tree, int);\n static tree ia64_gimplify_va_arg (tree, tree, gimple_seq *, gimple_seq *);\n-static bool ia64_scalar_mode_supported_p (machine_mode mode);\n+static bool ia64_scalar_mode_supported_p (scalar_mode mode);\n static bool ia64_vector_mode_supported_p (machine_mode mode);\n static bool ia64_legitimate_constant_p (machine_mode, rtx);\n static bool ia64_legitimate_address_p (machine_mode, rtx, bool);\n@@ -10964,7 +10964,7 @@ ia64_struct_value_rtx (tree fntype,\n }\n \n static bool\n-ia64_scalar_mode_supported_p (machine_mode mode)\n+ia64_scalar_mode_supported_p (scalar_mode mode)\n {\n   switch (mode)\n     {"}, {"sha": "a810ba729fc1634248a7fed4a3ff822d145544ad", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -13312,7 +13312,7 @@ mips_vector_mode_supported_p (machine_mode mode)\n /* Implement TARGET_SCALAR_MODE_SUPPORTED_P.  */\n \n static bool\n-mips_scalar_mode_supported_p (machine_mode mode)\n+mips_scalar_mode_supported_p (scalar_mode mode)\n {\n   if (ALL_FIXED_POINT_MODE_P (mode)\n       && GET_MODE_PRECISION (mode) <= 2 * BITS_PER_WORD)"}, {"sha": "b8b21255c5539065e2942f59b5707cdab8536acb", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -872,7 +872,7 @@ msp430_option_override (void)\n #define TARGET_SCALAR_MODE_SUPPORTED_P msp430_scalar_mode_supported_p\n \n static bool\n-msp430_scalar_mode_supported_p (machine_mode m)\n+msp430_scalar_mode_supported_p (scalar_mode m)\n {\n   if (m == PSImode && msp430x)\n     return true;"}, {"sha": "95ad7cf8dcc73e0f551624941c326b3da3c8fa96", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -143,7 +143,7 @@ static rtx pa_expand_builtin (tree, rtx, rtx, machine_mode mode, int);\n static rtx hppa_builtin_saveregs (void);\n static void hppa_va_start (tree, rtx);\n static tree hppa_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n-static bool pa_scalar_mode_supported_p (machine_mode);\n+static bool pa_scalar_mode_supported_p (scalar_mode);\n static bool pa_commutative_p (const_rtx x, int outer_code);\n static void copy_fp_args (rtx_insn *) ATTRIBUTE_UNUSED;\n static int length_fp_args (rtx_insn *) ATTRIBUTE_UNUSED;\n@@ -6416,7 +6416,7 @@ hppa_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n    2 * BITS_PER_WORD isn't equal LONG_LONG_TYPE_SIZE.  */\n \n static bool\n-pa_scalar_mode_supported_p (machine_mode mode)\n+pa_scalar_mode_supported_p (scalar_mode mode)\n {\n   int precision = GET_MODE_PRECISION (mode);\n "}, {"sha": "b4d54fc0a78563500ab6c2351779d0c6f3f38e91", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -162,7 +162,7 @@ static void pdp11_function_arg_advance (cumulative_args_t,\n static void pdp11_conditional_register_usage (void);\n static bool pdp11_legitimate_constant_p (machine_mode, rtx);\n \n-static bool pdp11_scalar_mode_supported_p (machine_mode);\n+static bool pdp11_scalar_mode_supported_p (scalar_mode);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_BYTE_OP\n@@ -1911,7 +1911,7 @@ pdp11_legitimate_constant_p (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n /* Implement TARGET_SCALAR_MODE_SUPPORTED_P.  */\n \n static bool\n-pdp11_scalar_mode_supported_p (machine_mode mode)\n+pdp11_scalar_mode_supported_p (scalar_mode mode)\n {\n   /* Support SFmode even with -mfloat64.  */\n   if (mode == SFmode)"}, {"sha": "0d8eda48dff2780eee3ac41d52025ea4ded91ff5", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -39156,7 +39156,7 @@ rs6000_eh_return_filter_mode (void)\n \n /* Target hook for scalar_mode_supported_p.  */\n static bool\n-rs6000_scalar_mode_supported_p (machine_mode mode)\n+rs6000_scalar_mode_supported_p (scalar_mode mode)\n {\n   /* -m32 does not support TImode.  This is the default, from\n      default_scalar_mode_supported_p.  For -m32 -mpowerpc64 we want the"}, {"sha": "51b7ec01ca2e324d5716397b9a4b69b6052e02df", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -35913,7 +35913,7 @@ rs6000_eh_return_filter_mode (void)\n \n /* Target hook for scalar_mode_supported_p.  */\n static bool\n-rs6000_scalar_mode_supported_p (machine_mode mode)\n+rs6000_scalar_mode_supported_p (scalar_mode mode)\n {\n   /* -m32 does not support TImode.  This is the default, from\n      default_scalar_mode_supported_p.  For -m32 -mpowerpc64 we want the"}, {"sha": "957cfcbbdfac883774a43afcef1bac8fa857cbab", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -1229,7 +1229,7 @@ s390_unwind_word_mode (void)\n \n /* Return true if the back end supports mode MODE.  */\n static bool\n-s390_scalar_mode_supported_p (machine_mode mode)\n+s390_scalar_mode_supported_p (scalar_mode mode)\n {\n   /* In contrast to the default implementation reject TImode constants on 31bit\n      TARGET_ZARCH for ABI compliance.  */"}, {"sha": "5fabdd243d17a8f7a0160455e8629d34d1b9628c", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -288,7 +288,7 @@ spu_option_override (void)\n    be manipulated in non-trivial ways.  In particular, this means all\n    the arithmetic is supported.  */\n static bool\n-spu_scalar_mode_supported_p (machine_mode mode)\n+spu_scalar_mode_supported_p (scalar_mode mode)\n {\n   switch (mode)\n     {"}, {"sha": "2f00b7357414dac605d5fb5465185bf773bb40fc", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -107,7 +107,7 @@ tilegx_option_override (void)\n \n /* Implement TARGET_SCALAR_MODE_SUPPORTED_P.  */\n static bool\n-tilegx_scalar_mode_supported_p (machine_mode mode)\n+tilegx_scalar_mode_supported_p (scalar_mode mode)\n {\n   switch (mode)\n     {"}, {"sha": "9b6c5f6057eb163def554b60f0bacf2201917491", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -84,7 +84,7 @@ tilepro_option_override (void)\n \n /* Implement TARGET_SCALAR_MODE_SUPPORTED_P.  */\n static bool\n-tilepro_scalar_mode_supported_p (machine_mode mode)\n+tilepro_scalar_mode_supported_p (scalar_mode mode)\n {\n   switch (mode)\n     {"}, {"sha": "b1835af3bc07ae46bca214fba13e3d19c75a6063", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -4213,7 +4213,7 @@ hook returns true for both @code{ptr_mode} and @code{Pmode}.\n Define this to return nonzero if the memory reference @var{ref}  may alias with the system C library errno location.  The default  version of this hook assumes the system C library errno location  is either a declaration of type int or accessed by dereferencing  a pointer to int.\n @end deftypefn\n \n-@deftypefn {Target Hook} bool TARGET_SCALAR_MODE_SUPPORTED_P (machine_mode @var{mode})\n+@deftypefn {Target Hook} bool TARGET_SCALAR_MODE_SUPPORTED_P (scalar_mode @var{mode})\n Define this to return nonzero if the port is prepared to handle\n insns involving scalar mode @var{mode}.  For a scalar mode to be\n considered supported, all the basic arithmetic and comparisons"}, {"sha": "f8ef0d392ff5e2ea507c674e15c2c6e47af2c440", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -3315,7 +3315,7 @@ The default version of this hook returns true for any mode\\n\\\n required to handle the basic C types (as defined by the port).\\n\\\n Included here are the double-word arithmetic supported by the\\n\\\n code in @file{optabs.c}.\",\n- bool, (machine_mode mode),\n+ bool, (scalar_mode mode),\n  default_scalar_mode_supported_p)\n \n /* Similarly for vector modes.  \"Supported\" here is less strict.  At"}, {"sha": "15c71cf34e8dbe3900d2b2a4644966f7287e5f9a", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -395,7 +395,7 @@ default_mangle_assembler_name (const char *name ATTRIBUTE_UNUSED)\n    supported by optabs.c.  */\n \n bool\n-default_scalar_mode_supported_p (machine_mode mode)\n+default_scalar_mode_supported_p (scalar_mode mode)\n {\n   int precision = GET_MODE_PRECISION (mode);\n "}, {"sha": "a9ae75f57f3bf80c5fb6076b0d9205c904976d80", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1", "patch": "@@ -71,7 +71,7 @@ extern void default_print_operand_address (FILE *, machine_mode, rtx);\n extern bool default_print_operand_punct_valid_p (unsigned char);\n extern tree default_mangle_assembler_name (const char *);\n \n-extern bool default_scalar_mode_supported_p (machine_mode);\n+extern bool default_scalar_mode_supported_p (scalar_mode);\n extern bool default_libgcc_floating_mode_supported_p (scalar_float_mode);\n extern opt_scalar_float_mode default_floatn_mode (int, bool);\n extern bool targhook_words_big_endian (void);"}]}