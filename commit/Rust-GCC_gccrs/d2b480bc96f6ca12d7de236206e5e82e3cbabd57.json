{"sha": "d2b480bc96f6ca12d7de236206e5e82e3cbabd57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJiNDgwYmM5NmY2Y2ExMmQ3ZGUyMzYyMDZlNWU4MmUzY2JhYmQ1Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-08T22:35:30Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-08T22:35:30Z"}, "message": "runtime: Add matherr function when appropriate.\n\nFrom-SVN: r184024", "tree": {"sha": "4a8dab4b58205b5450ab14c370dd544cc25f9a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a8dab4b58205b5450ab14c370dd544cc25f9a09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2b480bc96f6ca12d7de236206e5e82e3cbabd57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b480bc96f6ca12d7de236206e5e82e3cbabd57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2b480bc96f6ca12d7de236206e5e82e3cbabd57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2b480bc96f6ca12d7de236206e5e82e3cbabd57/comments", "author": null, "committer": null, "parents": [{"sha": "09839cde4cf413ed731035886ecbc8ece14a7451", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09839cde4cf413ed731035886ecbc8ece14a7451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09839cde4cf413ed731035886ecbc8ece14a7451"}], "stats": {"total": 194, "additions": 172, "deletions": 22}, "files": [{"sha": "bb70b0f8aef867953959d22a48085b9ce4407600", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b480bc96f6ca12d7de236206e5e82e3cbabd57/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b480bc96f6ca12d7de236206e5e82e3cbabd57/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=d2b480bc96f6ca12d7de236206e5e82e3cbabd57", "patch": "@@ -422,6 +422,7 @@ runtime_files = \\\n \truntime/go-map-index.c \\\n \truntime/go-map-len.c \\\n \truntime/go-map-range.c \\\n+\truntime/go-matherr.c \\\n \truntime/go-nanotime.c \\\n \truntime/go-now.c \\\n \truntime/go-new-map.c \\"}, {"sha": "d412e699f5ae86073dffdd8ce39c4a3bea944139", "filename": "libgo/Makefile.in", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b480bc96f6ca12d7de236206e5e82e3cbabd57/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b480bc96f6ca12d7de236206e5e82e3cbabd57/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=d2b480bc96f6ca12d7de236206e5e82e3cbabd57", "patch": "@@ -192,12 +192,13 @@ am__libgo_la_SOURCES_DIST = runtime/go-append.c runtime/go-assert.c \\\n \truntime/go-interface-val-compare.c runtime/go-make-slice.c \\\n \truntime/go-map-delete.c runtime/go-map-index.c \\\n \truntime/go-map-len.c runtime/go-map-range.c \\\n-\truntime/go-nanotime.c runtime/go-now.c runtime/go-new-map.c \\\n-\truntime/go-new.c runtime/go-nosys.c runtime/go-panic.c \\\n-\truntime/go-print.c runtime/go-recover.c runtime/go-reflect.c \\\n-\truntime/go-reflect-call.c runtime/go-reflect-map.c \\\n-\truntime/go-rune.c runtime/go-runtime-error.c \\\n-\truntime/go-setenv.c runtime/go-signal.c runtime/go-strcmp.c \\\n+\truntime/go-matherr.c runtime/go-nanotime.c runtime/go-now.c \\\n+\truntime/go-new-map.c runtime/go-new.c runtime/go-nosys.c \\\n+\truntime/go-panic.c runtime/go-print.c runtime/go-recover.c \\\n+\truntime/go-reflect.c runtime/go-reflect-call.c \\\n+\truntime/go-reflect-map.c runtime/go-rune.c \\\n+\truntime/go-runtime-error.c runtime/go-setenv.c \\\n+\truntime/go-signal.c runtime/go-strcmp.c \\\n \truntime/go-string-to-byte-array.c \\\n \truntime/go-string-to-int-array.c runtime/go-strplus.c \\\n \truntime/go-strslice.c runtime/go-trampoline.c \\\n@@ -230,22 +231,23 @@ am__objects_4 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-int-array-to-string.lo go-int-to-string.lo \\\n \tgo-interface-compare.lo go-interface-eface-compare.lo \\\n \tgo-interface-val-compare.lo go-make-slice.lo go-map-delete.lo \\\n-\tgo-map-index.lo go-map-len.lo go-map-range.lo go-nanotime.lo \\\n-\tgo-now.lo go-new-map.lo go-new.lo go-nosys.lo go-panic.lo \\\n-\tgo-print.lo go-recover.lo go-reflect.lo go-reflect-call.lo \\\n-\tgo-reflect-map.lo go-rune.lo go-runtime-error.lo go-setenv.lo \\\n-\tgo-signal.lo go-strcmp.lo go-string-to-byte-array.lo \\\n-\tgo-string-to-int-array.lo go-strplus.lo go-strslice.lo \\\n-\tgo-trampoline.lo go-type-complex.lo go-type-eface.lo \\\n-\tgo-type-error.lo go-type-float.lo go-type-identity.lo \\\n-\tgo-type-interface.lo go-type-string.lo go-typedesc-equal.lo \\\n-\tgo-typestring.lo go-unreflect.lo go-unsafe-new.lo \\\n-\tgo-unsafe-newarray.lo go-unsafe-pointer.lo go-unwind.lo \\\n-\tchan.lo cpuprof.lo $(am__objects_1) mcache.lo mcentral.lo \\\n-\t$(am__objects_2) mfinal.lo mfixalloc.lo mgc0.lo mheap.lo \\\n-\tmsize.lo proc.lo runtime.lo thread.lo yield.lo \\\n-\t$(am__objects_3) iface.lo malloc.lo map.lo mprof.lo reflect.lo \\\n-\truntime1.lo sema.lo sigqueue.lo string.lo time.lo\n+\tgo-map-index.lo go-map-len.lo go-map-range.lo go-matherr.lo \\\n+\tgo-nanotime.lo go-now.lo go-new-map.lo go-new.lo go-nosys.lo \\\n+\tgo-panic.lo go-print.lo go-recover.lo go-reflect.lo \\\n+\tgo-reflect-call.lo go-reflect-map.lo go-rune.lo \\\n+\tgo-runtime-error.lo go-setenv.lo go-signal.lo go-strcmp.lo \\\n+\tgo-string-to-byte-array.lo go-string-to-int-array.lo \\\n+\tgo-strplus.lo go-strslice.lo go-trampoline.lo \\\n+\tgo-type-complex.lo go-type-eface.lo go-type-error.lo \\\n+\tgo-type-float.lo go-type-identity.lo go-type-interface.lo \\\n+\tgo-type-string.lo go-typedesc-equal.lo go-typestring.lo \\\n+\tgo-unreflect.lo go-unsafe-new.lo go-unsafe-newarray.lo \\\n+\tgo-unsafe-pointer.lo go-unwind.lo chan.lo cpuprof.lo \\\n+\t$(am__objects_1) mcache.lo mcentral.lo $(am__objects_2) \\\n+\tmfinal.lo mfixalloc.lo mgc0.lo mheap.lo msize.lo proc.lo \\\n+\truntime.lo thread.lo yield.lo $(am__objects_3) iface.lo \\\n+\tmalloc.lo map.lo mprof.lo reflect.lo runtime1.lo sema.lo \\\n+\tsigqueue.lo string.lo time.lo\n am_libgo_la_OBJECTS = $(am__objects_4)\n libgo_la_OBJECTS = $(am_libgo_la_OBJECTS)\n libgo_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n@@ -839,6 +841,7 @@ runtime_files = \\\n \truntime/go-map-index.c \\\n \truntime/go-map-len.c \\\n \truntime/go-map-range.c \\\n+\truntime/go-matherr.c \\\n \truntime/go-nanotime.c \\\n \truntime/go-now.c \\\n \truntime/go-new-map.c \\\n@@ -2391,6 +2394,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-map-index.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-map-len.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-map-range.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-matherr.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-nanotime.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-new-map.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-new.Plo@am__quote@\n@@ -2679,6 +2683,13 @@ go-map-range.lo: runtime/go-map-range.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-map-range.lo `test -f 'runtime/go-map-range.c' || echo '$(srcdir)/'`runtime/go-map-range.c\n \n+go-matherr.lo: runtime/go-matherr.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-matherr.lo -MD -MP -MF $(DEPDIR)/go-matherr.Tpo -c -o go-matherr.lo `test -f 'runtime/go-matherr.c' || echo '$(srcdir)/'`runtime/go-matherr.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-matherr.Tpo $(DEPDIR)/go-matherr.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/go-matherr.c' object='go-matherr.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-matherr.lo `test -f 'runtime/go-matherr.c' || echo '$(srcdir)/'`runtime/go-matherr.c\n+\n go-nanotime.lo: runtime/go-nanotime.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-nanotime.lo -MD -MP -MF $(DEPDIR)/go-nanotime.Tpo -c -o go-nanotime.lo `test -f 'runtime/go-nanotime.c' || echo '$(srcdir)/'`runtime/go-nanotime.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-nanotime.Tpo $(DEPDIR)/go-nanotime.Plo"}, {"sha": "44ae4282e183b2804a3af370910a2173b9684688", "filename": "libgo/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b480bc96f6ca12d7de236206e5e82e3cbabd57/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b480bc96f6ca12d7de236206e5e82e3cbabd57/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=d2b480bc96f6ca12d7de236206e5e82e3cbabd57", "patch": "@@ -48,6 +48,9 @@\n /* Define to 1 if the system has the type `loff_t'. */\n #undef HAVE_LOFF_T\n \n+/* Define to 1 if you have the `matherr' function. */\n+#undef HAVE_MATHERR\n+\n /* Define to 1 if you have the <memory.h> header file. */\n #undef HAVE_MEMORY_H\n \n@@ -99,6 +102,9 @@\n /* Define to 1 if you have the `strsignal' function. */\n #undef HAVE_STRSIGNAL\n \n+/* Define to 1 if <math.h> defines struct exception */\n+#undef HAVE_STRUCT_EXCEPTION\n+\n /* Define to 1 if the compiler provides the __sync_bool_compare_and_swap\n    function for uint32 */\n #undef HAVE_SYNC_BOOL_COMPARE_AND_SWAP_4"}, {"sha": "a93b0515dd9284ffddeaed04c3754651ac449e3d", "filename": "libgo/configure", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b480bc96f6ca12d7de236206e5e82e3cbabd57/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b480bc96f6ca12d7de236206e5e82e3cbabd57/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=d2b480bc96f6ca12d7de236206e5e82e3cbabd57", "patch": "@@ -14623,6 +14623,21 @@ done\n CFLAGS=\"$CFLAGS_hold\"\n LIBS=\"$LIBS_hold\"\n \n+LIBS_hold=\"$LIBS\"\n+LIBS=\"$LIBS $MATH_LIBS\"\n+for ac_func in matherr\n+do :\n+  ac_fn_c_check_func \"$LINENO\" \"matherr\" \"ac_cv_func_matherr\"\n+if test \"x$ac_cv_func_matherr\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_MATHERR 1\n+_ACEOF\n+\n+fi\n+done\n+\n+LIBS=\"$LIBS_hold\"\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for __sync_bool_compare_and_swap_4\" >&5\n $as_echo_n \"checking for __sync_bool_compare_and_swap_4... \" >&6; }\n if test \"${libgo_cv_func___sync_bool_compare_and_swap_4+set}\" = set; then :\n@@ -14784,6 +14799,20 @@ $as_echo \"$libgo_cv_c_epoll_event_fd_offset\" >&6; }\n STRUCT_EPOLL_EVENT_FD_OFFSET=${libgo_cv_c_epoll_event_fd_offset}\n \n \n+ac_fn_c_check_type \"$LINENO\" \"struct exception\" \"ac_cv_type_struct_exception\" \"#include <math.h>\n+\"\n+if test \"x$ac_cv_type_struct_exception\" = x\"\"yes; then :\n+  libgo_has_struct_exception=yes\n+else\n+  libgo_has_struct_exception=no\n+fi\n+\n+if test \"$libgo_has_struct_exception\" = \"yes\"; then\n+\n+$as_echo \"#define HAVE_STRUCT_EXCEPTION 1\" >>confdefs.h\n+\n+fi\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether setcontext clobbers TLS variables\" >&5\n $as_echo_n \"checking whether setcontext clobbers TLS variables... \" >&6; }\n if test \"${libgo_cv_lib_setcontext_clobbers_tls+set}\" = set; then :"}, {"sha": "67789032868c5eab5d0f937ac2f39dd4a08545e9", "filename": "libgo/configure.ac", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b480bc96f6ca12d7de236206e5e82e3cbabd57/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b480bc96f6ca12d7de236206e5e82e3cbabd57/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=d2b480bc96f6ca12d7de236206e5e82e3cbabd57", "patch": "@@ -478,6 +478,11 @@ AC_CHECK_FUNCS(sem_timedwait)\n CFLAGS=\"$CFLAGS_hold\"\n LIBS=\"$LIBS_hold\"\n \n+LIBS_hold=\"$LIBS\"\n+LIBS=\"$LIBS $MATH_LIBS\"\n+AC_CHECK_FUNCS(matherr)\n+LIBS=\"$LIBS_hold\"\n+\n AC_CACHE_CHECK([for __sync_bool_compare_and_swap_4],\n [libgo_cv_func___sync_bool_compare_and_swap_4],\n [AC_LINK_IFELSE([\n@@ -566,6 +571,16 @@ AC_CACHE_CHECK([epoll_event data.fd offset],\n STRUCT_EPOLL_EVENT_FD_OFFSET=${libgo_cv_c_epoll_event_fd_offset}\n AC_SUBST(STRUCT_EPOLL_EVENT_FD_OFFSET)\n \n+dnl See if struct exception is defined in <math.h>.\n+AC_CHECK_TYPE([struct exception],\n+[libgo_has_struct_exception=yes],\n+[libgo_has_struct_exception=no],\n+[#include <math.h>])\n+if test \"$libgo_has_struct_exception\" = \"yes\"; then\n+  AC_DEFINE(HAVE_STRUCT_EXCEPTION, 1,\n+            [Define to 1 if <math.h> defines struct exception])\n+fi\n+\n dnl See whether setcontext changes the value of TLS variables.\n AC_CACHE_CHECK([whether setcontext clobbers TLS variables],\n [libgo_cv_lib_setcontext_clobbers_tls],"}, {"sha": "786f3169d6a22d8017cc315de0f9f2d640111d6a", "filename": "libgo/runtime/go-matherr.c", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2b480bc96f6ca12d7de236206e5e82e3cbabd57/libgo%2Fruntime%2Fgo-matherr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2b480bc96f6ca12d7de236206e5e82e3cbabd57/libgo%2Fruntime%2Fgo-matherr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-matherr.c?ref=d2b480bc96f6ca12d7de236206e5e82e3cbabd57", "patch": "@@ -0,0 +1,88 @@\n+/* go-matherr.c -- a Go version of the matherr function.\n+\n+   Copyright 2012 The Go Authors. All rights reserved.\n+   Use of this source code is governed by a BSD-style\n+   license that can be found in the LICENSE file.  */\n+\n+/* The gccgo version of the math library calls libc functions.  On\n+   some systems, such as Solaris, those functions will call matherr on\n+   exceptional conditions.  This is a version of matherr appropriate\n+   for Go, one which returns the values that the Go math library\n+   expects.  This is fine for pure Go programs.  For mixed Go and C\n+   programs this will be problematic if the C programs themselves use\n+   matherr.  Normally the C version of matherr will override this, and\n+   the Go code will just have to cope.  If this turns out to be too\n+   problematic we can change to run pure Go code in the math library\n+   on systems that use matherr.  */\n+\n+#include <math.h>\n+#include <stdint.h>\n+\n+#include \"config.h\"\n+\n+#if defined(HAVE_MATHERR) && defined(HAVE_STRUCT_EXCEPTION)\n+\n+#define PI 3.14159265358979323846264338327950288419716939937510582097494459\n+\n+int\n+matherr (struct exception* e)\n+{\n+  const char *n;\n+\n+  if (e->type != DOMAIN)\n+    return 0;\n+\n+  n = e->name;\n+  if (__builtin_strcmp (n, \"acos\") == 0\n+      || __builtin_strcmp (n, \"asin\") == 0)\n+    e->retval = NAN;\n+  else if (__builtin_strcmp (n, \"atan2\") == 0)\n+    {\n+      if (e->arg1 == 0 && e->arg2 == 0)\n+\t{\n+\t  double nz;\n+\n+\t  nz = -0.0;\n+\t  if (__builtin_memcmp (&e->arg2, &nz, sizeof (double)) != 0)\n+\t    e->retval = e->arg1;\n+\t  else\n+\t    e->retval = copysign (PI, e->arg1);\n+\t}\n+      else\n+\treturn 0;\n+    }\n+  else if (__builtin_strcmp (n, \"log\") == 0\n+\t   || __builtin_strcmp (n, \"log10\") == 0)\n+    e->retval = NAN;\n+  else if (__builtin_strcmp (n, \"pow\") == 0)\n+    {\n+      if (e->arg1 < 0)\n+\te->retval = NAN;\n+      else if (e->arg1 == 0 && e->arg2 == 0)\n+\te->retval = 1.0;\n+      else if (e->arg1 == 0 && e->arg2 < 0)\n+\t{\n+\t  double i;\n+\n+\t  if (modf (e->arg2, &i) == 0 && ((int64_t) i & 1) == 1)\n+\t    e->retval = copysign (INFINITY, e->arg1);\n+\t  else\n+\t    e->retval = INFINITY;\n+\t}\n+      else\n+\treturn 0;\n+    }\n+  else if (__builtin_strcmp (n, \"sqrt\") == 0)\n+    {\n+      if (e->arg1 < 0)\n+\te->retval = NAN;\n+      else\n+\treturn 0;\n+    }\n+  else\n+    return 0;\n+\n+  return 1;\n+}\n+\n+#endif"}]}