{"sha": "e4b600fb239763b1da37a00cd42032415ff95c2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRiNjAwZmIyMzk3NjNiMWRhMzdhMDBjZDQyMDMyNDE1ZmY5NWMyYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-10-25T09:26:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-10-25T09:26:54Z"}, "message": "lwg-active.html, [...]: Import Revision 39.\n\n2005-10-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* docs/html/ext/lwg-active.html, lwg-defects.html: Import Revision 39.\n\t* docs/html/ext/howto.html: Adjust.\n\nFrom-SVN: r105884", "tree": {"sha": "1d14575bb2d95dd7352228390f9988cacd625d02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d14575bb2d95dd7352228390f9988cacd625d02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4b600fb239763b1da37a00cd42032415ff95c2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b600fb239763b1da37a00cd42032415ff95c2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4b600fb239763b1da37a00cd42032415ff95c2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b600fb239763b1da37a00cd42032415ff95c2a/comments", "author": null, "committer": null, "parents": [{"sha": "6868dfa02bdd289b23b8cc24041af2bf7c8b9bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6868dfa02bdd289b23b8cc24041af2bf7c8b9bdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6868dfa02bdd289b23b8cc24041af2bf7c8b9bdd"}], "stats": {"total": 1871, "additions": 1423, "deletions": 448}, "files": [{"sha": "4c78ad2cf6a769bd46817497322fc65749ce21a2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b600fb239763b1da37a00cd42032415ff95c2a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b600fb239763b1da37a00cd42032415ff95c2a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e4b600fb239763b1da37a00cd42032415ff95c2a", "patch": "@@ -1,3 +1,8 @@\n+2005-10-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* docs/html/ext/lwg-active.html, lwg-defects.html: Import Revision 39.\n+\t* docs/html/ext/howto.html: Adjust.\n+\n 2005-10-21  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/24450"}, {"sha": "b2e8b5b2dca31c820484cf33a5a10f98069791c0", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b600fb239763b1da37a00cd42032415ff95c2a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b600fb239763b1da37a00cd42032415ff95c2a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=e4b600fb239763b1da37a00cd42032415ff95c2a", "patch": "@@ -453,7 +453,7 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     <dd>Similar to 118.\n     </dd>\n \n-    <dt><a href=\"lwg-active.html#280\">280</a>:\n+    <dt><a href=\"lwg-defects.html#280\">280</a>:\n         <em>Comparison of reverse_iterator to const reverse_iterator</em>\n     </dt>\n     <dd>Add global functions with two template parameters.\n@@ -528,7 +528,7 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     <dd>Don't fail if the next pointer is null and newoff is zero.\n     </dd>\n \n-    <dt><a href=\"lwg-active.html#464\">464</a>:\n+    <dt><a href=\"lwg-defects.html#464\">464</a>:\n         <em>Suggestion for new member functions in standard containers</em>\n     </dt>\n     <dd>Add <code>data()</code> to <code>std::vector</code> and"}, {"sha": "f5b7662ed72640a98790ddcdae21ff4f8fe8ec68", "filename": "libstdc++-v3/docs/html/ext/lwg-active.html", "status": "modified", "additions": 993, "deletions": 418, "changes": 1411, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b600fb239763b1da37a00cd42032415ff95c2a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b600fb239763b1da37a00cd42032415ff95c2a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-active.html?ref=e4b600fb239763b1da37a00cd42032415ff95c2a", "patch": "@@ -5,11 +5,11 @@\n <table>\n <tbody><tr>\n <td align=\"left\">Doc. no.</td>\n-<td align=\"left\">N1830=05-0090</td>\n+<td align=\"left\">N1908=05-0168</td>\n </tr>\n <tr>\n <td align=\"left\">Date:</td>\n-<td align=\"left\">2005-06-24</td>\n+<td align=\"left\">2005-10-23</td>\n </tr>\n <tr>\n <td align=\"left\">Project:</td>\n@@ -20,7 +20,7 @@\n <td align=\"left\">Howard Hinnant &lt;howard.hinnant@gmail.com&gt;</td>\n </tr>\n </tbody></table>\n-<h1>C++ Standard Library Active Issues List (Revision R37)</h1>\n+<h1>C++ Standard Library Active Issues List (Revision R39)</h1>\n   <p>Reference ISO/IEC IS 14882:1998(E)</p>\n   <p>Also see:</p>\n   <ul>\n@@ -88,6 +88,21 @@ <h1>C++ Standard Library Active Issues List (Revision R37)</h1>\n   directory as the issues list files.  </p>\n <h2>Revision History</h2>\n <ul>\n+<li>R39: \n+2005-10-14 post-Mont Tremblant mailing.\n+Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#526\">526</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#528\">528</a>.\n+Moved issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#280\">280</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#461\">461</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#464\">464</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#465\">465</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#467\">467</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#468\">468</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#474\">474</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#496\">496</a> from Ready to WP as per the vote from Mont Tremblant.\n+Moved issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#247\">247</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#294\">294</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#342\">342</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#362\">362</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#369\">369</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#371\">371</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#376\">376</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#384\">384</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#475\">475</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#478\">478</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#495\">495</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#497\">497</a> from Review to Ready.\n+Moved issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#498\">498</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#504\">504</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#506\">506</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#509\">509</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#510\">510</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#511\">511</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#512\">512</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#513\">513</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#514\">514</a> from New to Open.\n+Moved issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#505\">505</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#507\">507</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#508\">508</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#519\">519</a> from New to Ready.\n+Moved issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-closed.html#500\">500</a> from New to NAD.\n+Moved issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#518\">518</a> from New to Review.\n+</li>\n+<li>R38: \n+2005-07-03 pre-Mont Tremblant mailing.\n+Merged open TR1 issues in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#504\">504</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#522\">522</a>.\n+Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#523\">523</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#523\">523</a>\n+</li>\n <li>R37: \n 2005-06 mid-term mailing.\n Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#498\">498</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#503\">503</a>.\n@@ -679,7 +694,7 @@ <h2>Active Issues</h2>\n ]</i></p>\n \n <hr>\n-<a name=\"247\"><h3>247.&nbsp;<tt>vector</tt>, <tt>deque::insert</tt> complexity</h3></a><p><b>Section:</b>&nbsp;23.2.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector.modifiers\"> [lib.vector.modifiers]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Lisa Lippincott&nbsp; <b>Date:</b>&nbsp;06 June 2000</p>\n+<a name=\"247\"><h3>247.&nbsp;<tt>vector</tt>, <tt>deque::insert</tt> complexity</h3></a><p><b>Section:</b>&nbsp;23.2.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector.modifiers\"> [lib.vector.modifiers]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Lisa Lippincott&nbsp; <b>Date:</b>&nbsp;06 June 2000</p>\n <p>Paragraph 2 of 23.2.4.3 [lib.vector.modifiers] describes the complexity\n of <tt>vector::insert</tt>:</p>\n \n@@ -952,73 +967,6 @@ <h2>Active Issues</h2>\n the second line from the bottom in table 32 already implies the\n desired property.  This issue should be considered in light of\n other issues related to allocator instances.]</i></p>\n-<hr>\n-<a name=\"280\"><h3>280.&nbsp;Comparison of reverse_iterator to const reverse_iterator</h3></a><p><b>Section:</b>&nbsp;24.4.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.reverse.iterators\"> [lib.reverse.iterators]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Steve Cleary&nbsp; <b>Date:</b>&nbsp;27 Nov 2000</p>\n-<p>\n-This came from an email from Steve Cleary to Fergus in reference to\n-issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#179\">179</a>. The library working group briefly discussed\n-this in Toronto and believed it should be a separate issue.  There was\n-also some reservations about whether this was a worthwhile problem to\n-fix.\n-</p>\n-\n-<p>\n-Steve said: \"Fixing reverse_iterator. std::reverse_iterator can\n-(and should) be changed to preserve these additional\n-requirements.\" He also said in email that it can be done without\n-breaking user's code: \"If you take a look at my suggested\n-solution, reverse_iterator doesn't have to take two parameters; there\n-is no danger of breaking existing code, except someone taking the\n-address of one of the reverse_iterator global operator functions, and\n-I have to doubt if anyone has ever done that. . .  <i>But</i>, just in\n-case they have, you can leave the old global functions in as well --\n-they won't interfere with the two-template-argument functions.  With\n-that, I don't see how <i>any</i> user code could break.\"\n-</p>\n-<p><b>Proposed resolution:</b></p>\n-<p>\n-<b>Section:</b> 24.4.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.reverse.iterator\"> [lib.reverse.iterator]</a>\n-add/change the following declarations:</p>\n-<pre>  A) Add a templated assignment operator, after the same manner\n-        as the templated copy constructor, i.e.:\n-\n-  template &lt; class U &gt;\n-  reverse_iterator &lt; Iterator &gt;&amp; operator=(const reverse_iterator&lt; U &gt;&amp; u);\n-\n-  B) Make all global functions (except the operator+) have\n-  two template parameters instead of one, that is, for\n-  operator ==, !=, &lt;, &gt;, &lt;=, &gt;=, - replace:\n-\n-       template &lt; class Iterator &gt;\n-       typename reverse_iterator&lt; Iterator &gt;::difference_type operator-(\n-                 const reverse_iterator&lt; Iterator &gt;&amp; x,\n-                 const reverse_iterator&lt; Iterator &gt;&amp; y);\n-\n-  with:\n-\n-      template &lt; class Iterator1, class Iterator2 &gt;\n-      typename reverse_iterator &lt; Iterator1 &gt;::difference_type operator-(\n-                 const reverse_iterator &lt; Iterator1 &gt; &amp; x,\n-                 const reverse_iterator &lt; Iterator2 &gt; &amp; y);\n-</pre>\n-<p>\n-Also make the addition/changes for these signatures in \n-24.4.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.reverse.iter.ops\"> [lib.reverse.iter.ops]</a>.\n-</p>\n-\n-<p><i>[\n-Copenhagen: The LWG is concerned that the proposed resolution \n-introduces new overloads.  Experience shows that introducing\n-overloads is always risky, and that it would be inappropriate to\n-make this change without implementation experience.  It may be\n-desirable to provide this feature in a different way.\n-]</i></p>\n-\n-<p><i>[\n-Lillehammer: We now have implementation experience, and agree that\n-this solution is safe and correct.\n-]</i></p>\n-\n <hr>\n <a name=\"290\"><h3>290.&nbsp;Requirements to for_each and its function object</h3></a><p><b>Section:</b>&nbsp;25.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.foreach\"> [lib.alg.foreach]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Angelika Langer&nbsp; <b>Date:</b>&nbsp;03 Jan 2001</p>\n <p>The specification of the for_each algorithm does not have a\n@@ -1053,7 +1001,7 @@ <h2>Active Issues</h2>\n   iterators unless otherwise specified.  Bill will provide wording.]</i></p>\n \n <hr>\n-<a name=\"294\"><h3>294.&nbsp;User defined macros and standard headers</h3></a><p><b>Section:</b>&nbsp;17.4.3.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.macro.names\"> [lib.macro.names]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;James Kanze&nbsp; <b>Date:</b>&nbsp;11 Jan 2001</p>\n+<a name=\"294\"><h3>294.&nbsp;User defined macros and standard headers</h3></a><p><b>Section:</b>&nbsp;17.4.3.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.macro.names\"> [lib.macro.names]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;James Kanze&nbsp; <b>Date:</b>&nbsp;11 Jan 2001</p>\n <p>Paragraph 2 of 17.4.3.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.macro.names\"> [lib.macro.names]</a> reads: \"A\n translation unit that includes a header shall not contain any macros\n that define names declared in that header.\" As I read this, it\n@@ -1204,7 +1152,7 @@ <h2>Active Issues</h2>\n   iterator redesign]</i></p>\n \n <hr>\n-<a name=\"342\"><h3>342.&nbsp;seek and eofbit</h3></a><p><b>Section:</b>&nbsp;27.6.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream.unformatted\"> [lib.istream.unformatted]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Howard Hinnant&nbsp; <b>Date:</b>&nbsp;09 Oct 2001</p>\n+<a name=\"342\"><h3>342.&nbsp;seek and eofbit</h3></a><p><b>Section:</b>&nbsp;27.6.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream.unformatted\"> [lib.istream.unformatted]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Howard Hinnant&nbsp; <b>Date:</b>&nbsp;09 Oct 2001</p>\n <p>I think we have a defect.</p>\n \n <p>According to lwg issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#60\">60</a> which is now a dr, the\n@@ -1291,7 +1239,7 @@ <h2>Active Issues</h2>\n   or <tt>badbit</tt> is set, so using <tt>!fail()</tt>, rather\n   than <tt>good()</tt>, satisfies this goal.</p>\n <hr>\n-<a name=\"362\"><h3>362.&nbsp;bind1st/bind2nd type safety</h3></a><p><b>Section:</b>&nbsp;20.3.6.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-utilities.html#lib.bind.1st\"> [lib.bind.1st]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Andrew Demkin&nbsp; <b>Date:</b>&nbsp;26 Apr 2002</p>\n+<a name=\"362\"><h3>362.&nbsp;bind1st/bind2nd type safety</h3></a><p><b>Section:</b>&nbsp;20.3.6.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-utilities.html#lib.bind.1st\"> [lib.bind.1st]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Andrew Demkin&nbsp; <b>Date:</b>&nbsp;26 Apr 2002</p>\n <p>\n The definition of bind1st() (20.3.6.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-utilities.html#lib.bind.1st\"> [lib.bind.1st]</a>) can result in\n the construction of an unsafe binding between incompatible pointer\n@@ -1339,7 +1287,7 @@ <h2>Active Issues</h2>\n <p>There is no point in fixing bind1st and bind2nd.  tr1::bind is a\n   superior solution.  It solves this problem and others.</p>\n <hr>\n-<a name=\"369\"><h3>369.&nbsp;io stream objects and static ctors</h3></a><p><b>Section:</b>&nbsp;27.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.iostream.objects\"> [lib.iostream.objects]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Ruslan Abdikeev&nbsp; <b>Date:</b>&nbsp;8 Jul 2002</p>\n+<a name=\"369\"><h3>369.&nbsp;io stream objects and static ctors</h3></a><p><b>Section:</b>&nbsp;27.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.iostream.objects\"> [lib.iostream.objects]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Ruslan Abdikeev&nbsp; <b>Date:</b>&nbsp;8 Jul 2002</p>\n <p>\n Is it safe to use standard iostream objects from constructors of\n static objects?  Are standard iostream objects constructed and are\n@@ -1407,15 +1355,18 @@ <h2>Active Issues</h2>\n \n <p>Add to 27.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.iostream.objects\"> [lib.iostream.objects]</a>, p2, immediately before the last sentence\n of the paragraph, the following two sentences:</p>\n+\n <blockquote>\n If a translation unit includes &lt;iostream&gt;, or explicitly\n-constructs an ios_base::Init object, dynamic initialization of objects\n-later in that translation unit may assume that these stream objects\n-have been constructed and destructors may assume that these stream\n-objects have not yet been destroyed.\n+constructs an ios_base::Init object, these stream objects shall\n+be constructed before dynamic initialization of non-local\n+objects defined later in that translation unit, and these stream\n+objects shall be destroyed after the destruction of dynamically\n+initialized non-local objects defined later in that translation unit.\n </blockquote>\n \n <p><i>[Lillehammer: Matt provided wording.]</i></p>\n+<p><i>[Mont Tremblant: Matt provided revised wording.]</i></p>\n <p><b>Rationale:</b></p>\n <p>\n The original proposed resolution unconditionally required\n@@ -1432,7 +1383,7 @@ <h2>Active Issues</h2>\n The new proposed resolution gives users guidance on what they need to\n do to ensure that stream objects are constructed during startup.</p>\n <hr>\n-<a name=\"371\"><h3>371.&nbsp;Stability of multiset and multimap member functions</h3></a><p><b>Section:</b>&nbsp;23.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.container.requirements\"> [lib.container.requirements]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Frank Compagner&nbsp; <b>Date:</b>&nbsp;20 Jul 2002</p>\n+<a name=\"371\"><h3>371.&nbsp;Stability of multiset and multimap member functions</h3></a><p><b>Section:</b>&nbsp;23.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.container.requirements\"> [lib.container.requirements]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Frank Compagner&nbsp; <b>Date:</b>&nbsp;20 Jul 2002</p>\n <p>\n The requirements for multiset and multimap containers (23.1\n [lib.containers.requirements], 23.1.2 [lib.associative.reqmnts],\n@@ -1489,7 +1440,7 @@ <h2>Active Issues</h2>\n <p><b>Proposed resolution:</b></p>\n \n <p>Add the following to the end of 23.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.associative.reqmts\"> [lib.associative.reqmts]</a> paragraph 4: \n-\"For <tt>set</tt> and <tt>map</tt>, <tt>insert</tt>and <tt>erase</tt>\n+\"For <tt>multiset</tt> and <tt>multimap</tt>, <tt>insert</tt>and <tt>erase</tt>\n   are <i>stable</i>: they preserve the relative ordering of equivalent\n   elements.</p> \n \n@@ -1498,14 +1449,17 @@ <h2>Active Issues</h2>\n multimap and multiset.  N1780 also addresses this issue and suggests\n wording.]</i></p>\n \n+<p><i>[Mont Tremblant: Changed set and map to multiset and multimap.]</i></p>\n+\n <p><b>Rationale:</b></p>\n <p>The LWG agrees that this guarantee is necessary for common user\n   idioms to work, and that all existing implementations provide this\n   property.  Note that this resolution guarantees stability for\n   multimap and multiset, not for all associative containers in\n   general.</p>\n+\n <hr>\n-<a name=\"376\"><h3>376.&nbsp;basic_streambuf semantics</h3></a><p><b>Section:</b>&nbsp;27.7.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Ray Lischner&nbsp; <b>Date:</b>&nbsp;14 Aug 2002</p>\n+<a name=\"376\"><h3>376.&nbsp;basic_streambuf semantics</h3></a><p><b>Section:</b>&nbsp;27.7.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Ray Lischner&nbsp; <b>Date:</b>&nbsp;14 Aug 2002</p>\n <p>\n In Section 27.7.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>, Table 90, the implication is that\n the four conditions should be mutually exclusive, but they are not.\n@@ -1653,7 +1607,7 @@ <h2>Active Issues</h2>\n   we need to make sure Martin and Howard agree.]</i></p>\n \n <hr>\n-<a name=\"384\"><h3>384.&nbsp;equal_range has unimplementable runtime complexity</h3></a><p><b>Section:</b>&nbsp;25.3.3.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.equal.range\"> [lib.equal.range]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Hans Bos&nbsp; <b>Date:</b>&nbsp;18 Oct 2002</p>\n+<a name=\"384\"><h3>384.&nbsp;equal_range has unimplementable runtime complexity</h3></a><p><b>Section:</b>&nbsp;25.3.3.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.equal.range\"> [lib.equal.range]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Hans Bos&nbsp; <b>Date:</b>&nbsp;18 Oct 2002</p>\n <p>\n Section 25.3.3.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.equal.range\"> [lib.equal.range]</a>\n states that at most 2 * log(last - first) + 1\n@@ -1952,7 +1906,7 @@ <h2>Active Issues</h2>\n <p><b>Rationale:</b></p>\n \n <hr>\n-<a name=\"396\"></a><h3><a name=\"396\">396.&nbsp;what are characters zero and one</a></h3><p><b>Section:</b>&nbsp;23.3.5.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.bitset.cons\"> [lib.bitset.cons]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;5 Jan 2003</p>\n+<a name=\"396\"><h3>396.&nbsp;what are characters zero and one</h3></a><p><b>Section:</b>&nbsp;23.3.5.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.bitset.cons\"> [lib.bitset.cons]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;5 Jan 2003</p>\n     <p>\n 23.3.5.1, p6 [lib.bitset.cons] talks about a generic character\n having the value of 0 or 1 but there is no definition of what\n@@ -3147,7 +3101,7 @@ <h2>Active Issues</h2>\n </code>\n \n <hr>\n-<a name=\"459\"><h3>459.&nbsp;Requirement for widening in stage 2 is overspecification</h3></a><p><b>Section:</b>&nbsp;22.2.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;16 Mar 2004</p>\n+<a name=\"459\"></a><h3><a name=\"459\">459.&nbsp;Requirement for widening in stage 2 is overspecification</a></h3><p><b>Section:</b>&nbsp;22.2.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;16 Mar 2004</p>\n <p>When parsing strings of wide-character digits, the standard\n   requires the library to widen narrow-character \"atoms\" and compare\n   the widened atoms against the characters that are being parsed.\n@@ -3223,95 +3177,6 @@ <h2>Active Issues</h2>\n       respectively; i.e., avoid calling widen or narrow\n       if it the source and destination types are the same</li>\n </ol>\n-<hr>\n-<a name=\"461\"><h3>461.&nbsp;time_get hard or impossible to implement</h3></a><p><b>Section:</b>&nbsp;22.2.5.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.time.get.virtuals\"> [lib.locale.time.get.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Bill Plauger&nbsp; <b>Date:</b>&nbsp;23 Mar 2004</p>\n-<p>\n-Template time_get currently contains difficult, if not impossible,\n-requirements for do_date_order, do_get_time, and do_get_date. All require\n-the implementation to scan a field generated by the %x or %X conversion\n-specifier in strftime. Yes, do_date_order can always return no_order, but\n-that doesn't help the other functions. The problem is that %x can be\n-nearly anything, and it can vary widely with locales. It's horribly\n-onerous to have to parse \"third sunday after Michaelmas in the year of\n-our Lord two thousand and three,\" but that's what we currently ask of\n-do_get_date. More practically, it leads some people to think that if\n-%x produces 10.2.04, we should know to look for dots as separators. Still\n-not easy.\n-</p>\n-\n-<p>\n-Note that this is the <i>opposite</i> effect from the intent stated in the\n-footnote earlier in this subclause:\n-</p>\n-\n-<blockquote>\n-\"In other words, user confirmation is required for reliable parsing of\n-user-entered dates and times, but machine-generated formats can be\n-parsed reliably. This allows parsers to be aggressive about interpreting\n-user variations on standard formats.\"\n-</blockquote>\n-\n-<p>\n-We should give both implementers and users an easier and more reliable\n-alternative: provide a (short) list of alternative delimiters and say\n-what the default date order is for no_order. For backward compatibility,\n-and maximum latitude, we can permit an implementation to parse whatever\n-%x or %X generates, but we shouldn't require it.\n-</p>\n-<p><b>Proposed resolution:</b></p>\n-\n-<p><b>In the description:</b></p>\n-<pre>iter_type do_get_time(iter_type s, iter_type end, ios_base&amp; str,\n-        ios_base::iostate&amp; err, tm* t) const;\n-</pre>\n-\n-<p>\n-2 Effects: Reads characters starting at suntil it has extracted those\n-struct tm members, and remaining format characters, used by\n-time_put&lt;&gt;::put to produce the format specified by 'X', or until it\n-encounters an error or end of sequence.\n-</p>\n-\n-<p><b>change:</b> 'X'</p>\n-\n-<p><b>to:</b> \"%H:%M:%S\"</p>\n-\n-\n-<p>Change</p>\n-<pre>iter_type do_get_date(iter_type s, iter_type end, ios_base&amp; str,\n-        ios_base::iostate&amp; err, tm* t) const;\n-\n-4 Effects: Reads characters starting at s until it has extracted those\n-struct tm members, and remaining format characters, used by\n-time_put&lt;&gt;::put to produce the format specified by 'x', or until it\n-encounters an error.\n-</pre>\n-\n-<p>to</p>\n-iter_type do_get_date(iter_type s, iter_type end, ios_base&amp; str,\n-        ios_base::iostate&amp; err, tm* t) const;\n-\n-4 Effects: Reads characters starting at s until it has extracted those\n-struct tm members, and remaining format characters, used by\n-time_put&lt;&gt;::put to produce one of the following formats, or until it\n-encounters an error. The format depends on the value returned by\n-date_order() as follows:\n-\n-        date_order()  format\n-\n-        no_order      \"%m/%d/%y\"\n-        dmy           \"%d/%m/%y\"\n-        mdy           \"%m/%d/%y\"\n-        ymd           \"%y/%m/%d\"\n-        ydm           \"%y/%d/%m\"\n-\n-An implementation may also accept additional implementation-defined formats.\n-<pre></pre>\n-\n-<p><i>[Redmond: agreed that this is a real problem.  The solution is\n-  probably to match C99's parsing rules.  Bill provided wording.\n-]</i></p>\n-\n <hr>\n <a name=\"462\"><h3>462.&nbsp;Destroying objects with static storage duration</h3></a><p><b>Section:</b>&nbsp;3.6.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/basic.html#basic.start.term\"> [basic.start.term]</a>, 18.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-support.html#lib.support.start.term\"> [lib.support.start.term]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Bill Plauger&nbsp; <b>Date:</b>&nbsp;23 Mar 2004</p>\n <p>\n@@ -3600,107 +3465,6 @@ <h2>Active Issues</h2>\n <p><i>[Redmond: punt for the moment. We haven't decided yet whether we\n   want to fix auto_ptr for C++-0x, or remove it and replace it with\n   move_ptr and unique_ptr.]</i></p>\n-<hr>\n-<a name=\"464\"><h3>464.&nbsp;Suggestion for new member functions in standard containers</h3></a><p><b>Section:</b>&nbsp;23.2.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector\"> [lib.vector]</a>, 23.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.map\"> [lib.map]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Thorsten Ottosen&nbsp; <b>Date:</b>&nbsp;12 May 2004</p>\n-\n-<p>To add slightly more convenience to vector&lt;T&gt; and map&lt;Key,T&gt; we should consider to add</p>\n-<ol>\n-<li> add vector&lt;T&gt;::data() member (const and non-const version)\n-semantics: if( empty() ) return 0; else return buffer_;</li>\n-<li> add map&lt;Key,T&gt;::at( const Key&amp; k ) member (const and non-const version)\n-<i>semantics</i>: iterator i = find( k ); if( i != end() ) return *i; else throw range_error();</li>\n-</ol>\n-\n-<p>Rationale:</p>\n-\n-<ul>\n-<li>To obtain a pointer to the vector's buffer, one must use either\n-operator[]() (which can give undefined behavior for empty vectors) or\n-at() (which will then throw if the vector is empty). </li>\n-<li>tr1::array&lt;T,sz&gt; already has a data() member</li>\n-<li>e cannot use operator[]() when T is not DefaultDonstructible</li>\n-<li>Neither when the map is const.</li>\n-<li>when we want to make sure we don't add an element accidently</li>\n-<li>when it should be considered an error if a key is not in the map</li>\n-</ul>\n-\n-<p><b>Proposed resolution:</b></p>\n-<p>In 23.2.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector\"> [lib.vector]</a>, add the following to the <tt>vector</tt>\n-  synopsis after \"element access\" and before \"modifiers\":</p>\n-<pre>  // <i>[lib.vector.data] data access</i>\n-  pointer       data();\n-  const_pointer data() const;\n-</pre>\n-\n-<p>Add a new subsection of 23.2.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector\"> [lib.vector]</a>:</p>\n-<blockquote>\n-<p>23.2.4.x <tt>vector</tt> data access</p>\n-<pre>   pointer       data();\n-   const_pointer data() const;\n-</pre>\n-<p><b>Returns:</b> A pointer such that [data(), data() + size()) is a valid\n-   range.  For a non-empty vector, data() == &amp;front().</p>\n-<p><b>Complexity:</b> Constant time.</p>\n-<p><b>Throws:</b> Nothing.</p>\n-</blockquote>\n-\n-<p>In 23.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.map\"> [lib.map]</a>, add the following to the <tt>map</tt>\n-synopsis immediately after the line for operator[]:</p>\n-<pre>  T&amp;       at(const key_type&amp; x);\n-  const T&amp; at(const key_type&amp; x) const;\n-</pre>\n-\n-<p>Add the following to 23.3.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.map.access\"> [lib.map.access]</a>:</p>\n-<blockquote>\n-<pre>  T&amp;       at(const key_type&amp; x);\n-  const T&amp; at(const key_type&amp; x) const;\n-</pre>\n-\n-<p><b>Returns:</b> A reference to the element whose key is equivalent\n-  to x, if such an element is present in the map.</p>\n-<p><b>Throws:</b> <tt>out_of_range</tt> if no such element is present.</p>\n-\n-</blockquote>\n-\n-<p><b>Rationale:</b></p>\n-<p>Neither of these additions provides any new functionality but the\n-  LWG agreed that they are convenient, especially for novices.  The\n-  exception type chosen for <tt>at</tt>, <tt>std::out_of_range</tt>,\n-  was chosen to match <tt>vector::at</tt>.</p>\n-<hr>\n-<a name=\"465\"><h3>465.&nbsp;Contents of &lt;ciso646&gt;</h3></a><p><b>Section:</b>&nbsp;17.4.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.headers\"> [lib.headers]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Steve Clamage&nbsp; <b>Date:</b>&nbsp;3 Jun 2004</p>\n-<p>C header &lt;iso646.h&gt; defines macros for some operators, such as\n-not_eq for !=.</p>\n-\n-<p>Section 17.4.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.headers\"> [lib.headers]</a> \"Headers\" says that except as noted in\n-clauses 18 through 27, the &lt;cname&gt; C++ header contents are the same\n-as the C header &lt;name.h&gt;. In particular, table 12 lists\n-&lt;ciso646&gt; as a C++ header.</p>\n-\n-<p>I don't find any other mention of &lt;ciso646&gt;, or any mention of\n-&lt;iso646.h&gt;, in clauses 17 thorough 27. That implies that the\n-contents of &lt;ciso646&gt; are the same as C header &lt;iso646.h&gt;.</p>\n-\n-<p>Annex C (informative, not normative) in [diff.header.iso646.h] C.2.2.2\n-\"Header &lt;iso646.h&gt;\" says that the alternative tokens are not\n-defined as macros in &lt;ciso646&gt;, but does not mention the contents\n-of &lt;iso646.h&gt;.</p>\n-\n-<p>I don't find any normative text to support C.2.2.2.</p>\n-\n-<p><b>Proposed resolution:</b></p>\n-<p>Add to section 17.4.1.2 Headers [lib.headers] a new paragraph after\n-  paragraph 6 (the one about functions must be functions):</p> \n-\n-<blockquote>\n-<p>Identifiers that are keywords or operators in C++ shall not be defined\n-as macros in C++ standard library headers. \n-[Footnote:In particular, including the standard header &lt;iso646.h&gt;\n-or &lt;ciso646&gt; has no effect. </p>\n-</blockquote>\n-\n-<p><i>[post-Redmond: Steve provided wording.]</i></p>\n-\n <hr>\n <a name=\"466\"><h3>466.&nbsp;basic_string ctor should prevent null pointer error</h3></a><p><b>Section:</b>&nbsp;21.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string.cons\"> [lib.string.cons]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Daniel Frey&nbsp; <b>Date:</b>&nbsp;10 Jun 2004</p>\n <p>\n@@ -3730,104 +3494,6 @@ <h2>Active Issues</h2>\n   case we catch the error of a literal 0, but not an expression whose\n   value is a null pointer), at run time, or both.]</i></p>\n \n-<hr>\n-<a name=\"467\"><h3>467.&nbsp;char_traits::lt(), compare(), and memcmp()</h3></a><p><b>Section:</b>&nbsp;21.1.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.char.traits.specializations.char\"> [lib.char.traits.specializations.char]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;28 Jun 2004</p>\n-\n-<p>\n-Table 37 describes the requirements on Traits::compare() in terms of\n-those on Traits::lt(). 21.1.3.1, p6 requires char_traits&lt;char&gt;::lt()\n-to yield the same result as operator&lt;(char, char).\n-</p>\n-\n-<p>\n-Most, if not all, implementations of char_traits&lt;char&gt;::compare()\n-call memcmp() for efficiency. However, the C standard requires both\n-memcmp() and strcmp() to interpret characters under comparison as\n-unsigned, regardless of the signedness of char. As a result, all\n-these char_traits implementations fail to meet the requirement\n-imposed by Table 37 on compare() when char is signed.\n-</p>\n-\n-\n-<p>Read email thread starting with c++std-lib-13499 for more. </p>\n-<p><b>Proposed resolution:</b></p>\n-\n-\n-<p>Change 21.1.3.1, p6 from</p>\n-<blockquote>\n-    The two-argument members assign, eq, and lt are defined identically\n-    to the built-in operators =, ==, and &lt; respectively.\n-</blockquote>\n-<p>to</p>\n-<blockquote>\n-  The two-argument member assign is defined identically to\n-  the built-in operator =. The two\n-  argument members eq and lt are defined identically to\n-  the built-in operators == and &lt; for type unsigned char.\n-</blockquote>\n-\n-<p><i>[Redmond: The LWG agreed with this general direction, but we\n-  also need to change <tt>eq</tt> to be consistent with this change.\n-  Post-Redmond: Martin provided wording.]</i></p>\n-\n-<hr>\n-<a name=\"468\"><h3>468.&nbsp;unexpected consequences of ios_base::operator void*()</h3></a><p><b>Section:</b>&nbsp;27.4.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.iostate.flags\"> [lib.iostate.flags]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;28 Jun 2004</p>\n-\n-<p>The program below is required to compile but when run it typically\n-produces unexpected results due to the user-defined conversion from\n-std::cout or any object derived from basic_ios to void*.\n-</p>\n-\n-<pre>    #include &lt;cassert&gt;\n-    #include &lt;iostream&gt;\n-\n-    int main ()\n-    {\n-        assert (std::cin.tie () == std::cout);\n-        // calls std::cout.ios::operator void*()\n-    }\n-</pre>\n-\n-<p><b>Proposed resolution:</b></p>\n-\n-<p>\n-Replace std::basic_ios&lt;charT, traits&gt;::operator void*() with another\n-conversion operator to some unspecified type that is guaranteed not\n-to be convertible to any other type except for bool (a pointer-to-member\n-might be one such suitable type). In addition, make it clear that the\n-pointer type need not be a pointer to a complete type and when non-null,\n-the value need not be valid.\n-</p>\n-\n-<p>Specifically, change in [lib.ios] the signature of</p>\n-<pre>    operator void*() const;\n-</pre>\n-<p>to</p>\n-<pre>    operator unspecified-bool-type() const;\n-</pre>\n-<p>and change [lib.iostate.flags], p1 from</p>\n-<pre>    operator void*() const;\n-</pre>\n-<p>to</p>\n-<pre>operator unspecified-bool-type() const;\n-\n-     -1- Returns: if fail() then a value that will evaluate false in a\n-      boolean context; otherwise a value that will evaluate true in a\n-      boolean context. The value type returned shall not be\n-      convertible to int.\n-\n-     -2- [Note: This conversion can be used in contexts where a bool\n-      is expected (e.g., an if condition); however, implicit\n-      conversions (e.g., to int) that can occur with bool are not\n-      allowed, eliminating some sources of user error. One possible\n-      implementation choice for this type is pointer-to-member.  - end\n-      note]\n-</pre>\n-\n-<p><i>[Redmond: 5-4 straw poll in favor of doing this.]</i></p>\n-<p><i>[Lillehammer: Doug provided revised wording for\n-  \"unspecified-bool-type\".]</i></p> \n-\n <hr>\n <a name=\"470\"><h3>470.&nbsp;accessing containers from their elements' special functions</h3></a><p><b>Section:</b>&nbsp;23 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.containers\"> [lib.containers]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;28 Jun 2004</p>\n \n@@ -3975,20 +3641,7 @@ <h2>Active Issues</h2>\n in clause 27 too, for that matter. A review is necessary.  Bill will\n provide wording.</p>\n <hr>\n-<a name=\"474\"><h3>474.&nbsp;confusing Footnote 297</h3></a><p><b>Section:</b>&nbsp;27.6.2.5.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ostream.inserters.character\"> [lib.ostream.inserters.character]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;1 Jul 2004</p>\n-\n-<p>\n-I think Footnote 297 is confused. The paragraph it applies to seems\n-quite clear in that widen() is only called if the object is not a char\n-stream (i.e., not basic_ostream&lt;char&gt;), so it's irrelevant what the\n-value of widen(c) is otherwise.\n-</p>\n-<p><b>Proposed resolution:</b></p>\n-<p>\n-I propose to strike the Footnote.\n-</p>\n-<hr>\n-<a name=\"475\"><h3>475.&nbsp;May the function object passed to for_each modify the elements of the iterated sequence?</h3></a><p><b>Section:</b>&nbsp;25.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.foreach\"> [lib.alg.foreach]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Stephan T. Lavavej, Jaakko Jarvi&nbsp; <b>Date:</b>&nbsp;9 Jul 2004</p>\n+<a name=\"475\"><h3>475.&nbsp;May the function object passed to for_each modify the elements of the iterated sequence?</h3></a><p><b>Section:</b>&nbsp;25.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.foreach\"> [lib.alg.foreach]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Stephan T. Lavavej, Jaakko Jarvi&nbsp; <b>Date:</b>&nbsp;9 Jul 2004</p>\n <p>\n It is not clear whether the function object passed to for_each is allowed to\n modify the elements of the sequence being iterated over.\n@@ -4059,7 +3712,7 @@ <h2>Active Issues</h2>\n   for_each is in a secion entitled \"nonmutating algorithms\", and the\n   title may be confusing.  A nonnormative note should clarify that.</p>\n <hr>\n-<a name=\"478\"><h3>478.&nbsp;Should forward iterator requirements table have a line for r-&gt;m?</h3></a><p><b>Section:</b>&nbsp;24.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.forward.iterators\"> [lib.forward.iterators]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Dave Abrahams&nbsp; <b>Date:</b>&nbsp;11 Jul 2004</p>\n+<a name=\"478\"><h3>478.&nbsp;Should forward iterator requirements table have a line for r-&gt;m?</h3></a><p><b>Section:</b>&nbsp;24.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.forward.iterators\"> [lib.forward.iterators]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Dave Abrahams&nbsp; <b>Date:</b>&nbsp;11 Jul 2004</p>\n <p>\n The Forward Iterator requirements table contains the following:\n </p>\n@@ -4108,6 +3761,10 @@ <h2>Active Issues</h2>\n <p>in paragraph 11 of [lib.iterator.requirements].</p>\n \n \n+<p><b>Rationale:</b></p>\n+<p>\n+This is a defect because it constrains an lvalue to returning a modifiable lvalue.\n+</p>\n <hr>\n <a name=\"479\"><h3>479.&nbsp;Container requirements and placement new</h3></a><p><b>Section:</b>&nbsp;23.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.container.requirements\"> [lib.container.requirements]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Herb Sutter&nbsp; <b>Date:</b>&nbsp;1 Aug 2004</p>\n <p>Nothing in the standard appears to make this program ill-formed:</p>\n@@ -4127,7 +3784,7 @@ <h2>Active Issues</h2>\n   to require containers to support types that define their own special\n   versions of <tt>operator new</tt>.</p>\n \n-<notes>\n+<p><i>[\n Lillehammer: A container will definitely never use this overridden\n operator new, but whether it will fail to compile is unclear from the\n standard.  Are containers supposed to use qualified or unqualified\n@@ -4137,7 +3794,7 @@ <h2>Active Issues</h2>\n containers use placement new are unspecified. That is the real bug,\n but it needs to be fixed as part of the allocator overhaul.  Weak\n support that the eventual solution should make this code well formed.\n-</notes>\n+]</i></p>\n \n <p><b>Proposed resolution:</b></p>\n <hr>\n@@ -4479,7 +4136,7 @@ <h2>Active Issues</h2>\n it doesn't cover. Bill will provide wording.]</i></p>\n \n <hr>\n-<a name=\"495\"><h3>495.&nbsp;Clause 22 template parameter requirements</h3></a><p><b>Section:</b>&nbsp;22 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.localization\"> [lib.localization]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Beman Dawes&nbsp; <b>Date:</b>&nbsp;10 Jan 2005</p>\n+<a name=\"495\"><h3>495.&nbsp;Clause 22 template parameter requirements</h3></a><p><b>Section:</b>&nbsp;22 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.localization\"> [lib.localization]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Beman Dawes&nbsp; <b>Date:</b>&nbsp;10 Jan 2005</p>\n <p>It appears that there are no requirements specified for many of the\n template parameters in clause 22. It looks like this issue has never\n come up, except perhaps for Facet.</p>\n@@ -4542,19 +4199,7 @@ <h2>Active Issues</h2>\n  for. The only issue is what to do about stateT. This wording is\n  thin, but probably adequate.</p>\n <hr>\n-<a name=\"496\"><h3>496.&nbsp;Illegal use of \"T\" in vector&lt;bool&gt;</h3></a><p><b>Section:</b>&nbsp;23.2.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector.bool\"> [lib.vector.bool]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;richard@ex-parrot.com&nbsp; <b>Date:</b>&nbsp;10 Feb 2005</p>\n-<p>\n-In the synopsis of the std::vector&lt;bool&gt; specialisation in 23.2.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector.bool\"> [lib.vector.bool]</a>,\n-the non-template assign() function has the signature</p>\n-\n-<pre>  void assign( size_type n, const T&amp; t );\n-</pre>\n-\n-<p>The type, T, is not defined in this context.</p>\n-<p><b>Proposed resolution:</b></p>\n-<p>Replace \"T\" with \"value_type\".</p>\n-<hr>\n-<a name=\"497\"><h3>497.&nbsp;meaning of numeric_limits::traps for floating point types</h3></a><p><b>Section:</b>&nbsp;18.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-support.html#lib.numeric.limits.members\"> [lib.numeric.limits.members]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;2 Mar 2005</p>\n+<a name=\"497\"><h3>497.&nbsp;meaning of numeric_limits::traps for floating point types</h3></a><p><b>Section:</b>&nbsp;18.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-support.html#lib.numeric.limits.members\"> [lib.numeric.limits.members]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;2 Mar 2005</p>\n \n <p>18.2.1.2, p59 says this much about the traps member of numeric_limits:</p>\n \n@@ -4603,7 +4248,7 @@ <h2>Active Issues</h2>\n  proposed resolution is at least consistent and slightly better than\n  nothing.</p>\n <hr>\n-<a name=\"498\"><h3>498.&nbsp;Requirements for partition() and stable_partition() too strong</h3></a><p><b>Section:</b>&nbsp;25.2.12 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.partitions\"> [lib.alg.partitions]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Sean Parent, Joe Gottman&nbsp; <b>Date:</b>&nbsp;4 May 2005</p>\n+<a name=\"498\"><h3>498.&nbsp;Requirements for partition() and stable_partition() too strong</h3></a><p><b>Section:</b>&nbsp;25.2.12 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.partitions\"> [lib.alg.partitions]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Sean Parent, Joe Gottman&nbsp; <b>Date:</b>&nbsp;4 May 2005</p>\n <p>\n Problem:\n The iterator requirements for partition() and stable_partition() [25.2.12]\n@@ -4643,6 +4288,21 @@ <h2>Active Issues</h2>\n (last - first) applications of the predicate are done. \n </p></blockquote>\n \n+<p><b>Rationale:</b></p>\n+Partition is a \"foundation\" algorithm useful in many contexts (like sorting\n+as just one example) - my motivation for extending it to include forward\n+iterators is slist - without this extension you can't partition an slist\n+(without writing your own partition). Holes like this in the standard\n+library weaken the argument for generic programming (ideally I'd be able\n+to provide a library that would refine std::partition() to other concepts\n+without fear of conflicting with other libraries doing the same - but\n+that is a digression). I consider the fact that partition isn't defined\n+to work for ForwardIterator a minor embarrassment.\n+\n+<p><i>[Mont Tremblant: Moved to Open, request motivation and use cases\n+by next meeting. Sean provided further rationale by post-meeting\n+mailing.]</i></p>\n+\n <hr>\n <a name=\"499\"><h3>499.&nbsp;Std. doesn't seem to require stable_sort() to be stable!</h3></a><p><b>Section:</b>&nbsp;25.3.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.stable.sort\"> [lib.stable.sort]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Prateek Karandikar&nbsp; <b>Date:</b>&nbsp;12 Apr 2005</p>\n <blockquote>\n@@ -4701,19 +4361,6 @@ <h2>Active Issues</h2>\n <p>\n </p>\n <hr>\n-<a name=\"500\"><h3>500.&nbsp;do_length cannot be implemented correctly</h3></a><p><b>Section:</b>&nbsp;22.2.1.5.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Krzysztof \ufffdelechowski&nbsp; <b>Date:</b>&nbsp;24 May 2005</p>\n-<ol>\n-<li>codecvt::do_length is of type int;</li>\n-<li>it is assumed to be sort-of returning from_next - from of type ptrdiff_t;</li>\n-<li>ptrdiff_t cannot be cast to an int without data loss.</li>\n-</ol>\n-<p>\n-Contradiction.\n-</p>\n-<p><b>Proposed resolution:</b></p>\n-<p>\n-</p>\n-<hr>\n <a name=\"501\"><h3>501.&nbsp;Proposal: strengthen guarantees of lib.comparisons</h3></a><p><b>Section:</b>&nbsp;20.3.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-utilities.html#lib.comparisons\"> [lib.comparisons]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Me &lt;anti_spam_email2003@yahoo.com&gt;&nbsp; <b>Date:</b>&nbsp;7 Jun 2005</p>\n <blockquote>\n \"For templates greater, less, greater_equal, and less_equal,\n@@ -4888,5 +4535,933 @@ <h2>Active Issues</h2>\n <p><b>Proposed resolution:</b></p>\n <p>\n </p>\n+<hr>\n+<a name=\"504\"><h3>504.&nbsp;Integer types in pseudo-random number engine requirements</h3></a><p><b>Section:</b>&nbsp;TR1 5.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.req\"> [tr.rand.req]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+In [tr.rand.req], Paragraph 2 states that \"... s is a value of integral type,\n+g is an ... object returning values of unsigned integral type ...\"\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+In 5.1.1 [tr.rand.req], Paragraph 2 replace\n+</p>\n+\n+<blockquote>\n+... s is a value of integral type, g is an lvalue of a type other than X that\n+defines a zero-argument function object returning values of <del>unsigned integral</del> type\n+<ins><tt>unsigned long int</tt></ins>,\n+...\n+</blockquote>\n+\n+<p>\n+In 5.1.1 [tr.rand.seq], Table 16, replace in the line for X(s)\n+</p>\n+\n+<blockquote>\n+creates an engine with the initial internal state\n+determined by <ins><tt>static_cast&lt;unsigned long&gt;(</tt></ins><tt><i>s</i></tt><ins><tt>)</tt></ins>\n+</blockquote>\n+\n+<p><i>[\n+Mont Tremblant:  Both s and g should be unsigned long.\n+This should refer to the constructor signatures. Jens  provided wording post Mont Tremblant.\n+]</i></p>\n+\n+<p><b>Rationale:</b></p>\n+<p>\n+Jens:  Just requiring X(unsigned long) still makes it possible\n+for an evil library writer to also supply a X(int) that does something\n+unexpected.  The wording above requires that X(s) always performs\n+as if X(unsigned long) would have been called.  I believe that is\n+sufficient and implements our intentions from Mont Tremblant.  I\n+see no additional use in actually requiring a X(unsigned long)\n+signature.  u.seed(s) is covered by its reference to X(s), same\n+arguments.\n+</p>\n+<hr>\n+<a name=\"505\"><h3>505.&nbsp;Result_type in random distribution requirements</h3></a><p><b>Section:</b>&nbsp;TR1 5.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.req\"> [tr.rand.req]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+Table 17: Random distribution requirements\n+</p>\n+<p>\n+Row 1 requires that each random distribution provide a nested type \"input_type\";\n+this type denotes the type of the values that the distribution consumes.\n+</p>\n+<p>\n+Inspection of all distributions in [tr.rand.dist] reveals that each distribution\n+provides a second typedef (\"result_type\") that denotes the type of the values the\n+distribution produces when called.  \n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+It seems to me that this is also a requirement\n+for all distributions and should therefore be  indicated as such via a new second\n+row to this table 17:\n+</p>\n+<table border=\"1\" cellpadding=\"5\">\n+<tbody><tr>\n+<td>X::result_type</td>\n+<td>T</td>\n+<td>---</td>\n+<td>compile-time</td>\n+</tr>\n+</tbody></table>\n+<hr>\n+<a name=\"506\"><h3>506.&nbsp;Requirements of Distribution parameter for variate_generator</h3></a><p><b>Section:</b>&nbsp;TR1 5.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.var\"> [tr.rand.var]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+Paragraph 3 requires that template argument U (which corresponds to template\n+parameter Engine) satisfy all uniform random number generator requirements.\n+However, there is no  analogous requirement regarding the template argument\n+that corresponds to template parameter Distribution.  We believe there should\n+be, and that it should require that this template argument satisfy all random\n+distribution requirements.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+Consequence 1: Remove the precondition clauses [tr.rand.var]/16 and /18.\n+</p>\n+<p>\n+Consequence 2: Add max() and min() functions to those distributions that\n+do not already have them.\n+</p>\n+\n+<p><i>[\n+Mont Tremblant: Jens reccommends NAD, min/max not needed everywhere.\n+Marc supports having min and max to satisfy generic programming interface.\n+]</i></p>\n+\n+<hr>\n+<a name=\"507\"><h3>507.&nbsp;Missing requirement for variate_generator::operator()</h3></a><p><b>Section:</b>&nbsp;TR1 5.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.var\"> [tr.rand.var]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+Paragraph 11 of [tr.rand.var] equires that the member template\n+</p>\n+<blockquote><pre>template&lt;class T&gt; result_type operator() (T value);\n+</pre></blockquote>\n+<p>\n+return\n+</p>\n+<blockquote><pre>distribution()(e, value)\n+</pre></blockquote>\n+<p>\n+However, not all distributions have an operator() with a corresponding signature.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+We therefore  recommend that we insert the following precondition before paragraph 11:\n+</p>\n+<blockquote>\n+Precondition:  <tt>distribution().operator()(e,value)</tt> is well-formed.\n+</blockquote>\n+<hr>\n+<a name=\"508\"><h3>508.&nbsp;Bad parameters for ranlux64_base_01</h3></a><p><b>Section:</b>&nbsp;TR1 5.1.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.predef\"> [tr.rand.predef]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+The fifth of these engines with predefined parameters, ranlux64_base_01,\n+appears to have an unintentional error for which there is a simple correction.\n+The two pre-defined  subtract_with_carry_01 engines are given as: \n+</p>\n+<blockquote><pre>typedef subtract_with_carry_01&lt;float,  24, 10, 24&gt; ranlux_base_01;\n+typedef subtract_with_carry_01&lt;double, 48, 10, 24&gt; ranlux64_base_01;\n+</pre></blockquote>\n+<p>\n+We demonstrate below that ranlux64_base_01 fails to meet the intent of the\n+random number generation proposal, but that the simple correction to\n+</p>\n+<blockquote><pre>typedef subtract_with_carry_01&lt;double, 48,  5, 12&gt; ranlux64_base_01;\n+</pre></blockquote>\n+<p>\n+does meet the intent of defining well-known good parameterizations.\n+</p>\n+<p>\n+The ranlux64_base_01 engine as presented fails to meet the intent for\n+predefined engines, stated in proposal N1398 (section E):\n+</p>\n+<blockquote><p>\n+In order to make good random numbers available to a large number of library\n+users, this proposal not only defines generic random-number engines, but also\n+provides a number of predefined well-known good parameterizations for those.\n+</p></blockquote>\n+<p>\n+The predefined ranlux_base_01 engine has been proven [1,2,3] to have a very\n+long period and so meets this criterion.  This property makes it suitable for\n+use in the excellent discard_block  engines defined subsequently.  The proof\n+of long period relies on the fact (proven in [1]) that 2**(w*r) - 2**(w*s)\n++ 1 is prime (w, r, and s are template parameters to subtract_with_carry_01,\n+as defined in [tr.rand.eng.sub1]).\n+</p>\n+<p>\n+The ranlux64_base_01 engine as presented in [tr.rand.predef] uses w=48, r=24, s=10.\n+For these numbers, the combination 2**(w*r)-2**(w*s)+1 is non-prime (though\n+explicit factorization  would be a challenge).  In consequence, while it is\n+certainly possible for some seeding states that this engine would have a very\n+long period, it is not at all \ufffdwell-known\ufffd that this is the case. The intent\n+in the N1398 proposal involved the base of the ranlux64 engine, which finds heavy\n+use in the physics community.  This is isomorphic to the predefined ranlux_base_01,\n+but exploits the ability of double variables to hold (at least) 48 bits of mantissa,\n+to deliver 48 random bits at a time rather than 24.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+To achieve this intended behavior, the correct template parameteriztion  would be:\n+</p>\n+<blockquote><pre>typedef subtract_with_carry_01&lt;double, 48, 5, 12&gt; ranlux64_base_01;\n+</pre></blockquote>\n+<p>\n+The sequence of mantissa bits delivered by this is isomorphic (treating each\n+double as having the  bits of two floats) to that delivered by ranlux_base_01.\n+</p>\n+<p>\n+<b>References:</b>\n+</p>\n+<ol>\n+<li>F. James, Comput. Phys. Commun. 60(1990) 329</li>\n+<li>G. Marsaglia and A. Zaman, Ann. Appl. Prob 1(1991) 462</li>\n+<li>M. Luscher, Comput. Phys. Commun. 79(1994) 100-110</li>\n+</ol>\n+\n+<hr>\n+<a name=\"509\"><h3>509.&nbsp;Uniform_int template parameters</h3></a><p><b>Section:</b>&nbsp;TR1 5.1.7.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.dist.iunif\"> [tr.rand.dist.iunif]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+In [tr.rand.dist.iunif] the uniform_int distribution currently has a single\n+template parameter, IntType, used as the input_type and as the result_type\n+of the distribution.  We believe there is no reason to conflate these types\n+in this way.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+We recommend that there be a second template  parameter to\n+reflect the distribution\ufffds input_type, and that the existing first template\n+parameter continue to reflect (solely) the result_type:\n+</p>\n+<blockquote><pre>template&lt; class IntType = int, UIntType = unsigned int &gt;\n+class uniform_int\n+{\n+public:\n+  // types\n+  typedef  UIntType  input_type;\n+  typedef  IntType   result_type;\n+</pre></blockquote>\n+<hr>\n+<a name=\"510\"><h3>510.&nbsp;Input_type for bernoulli_distribution</h3></a><p><b>Section:</b>&nbsp;TR1 5.1.7.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.dist.bern\"> [tr.rand.dist.bern]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+In [tr.rand.dist.bern] the distribution currently requires;\n+</p>\n+<blockquote><pre>typedef  int  input_type;\n+</pre></blockquote>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+We believe this is an unfortunate choice, and recommend instead:\n+</p>\n+<blockquote><pre>typedef  unsigned int  input_type;\n+</pre></blockquote>\n+<hr>\n+<a name=\"511\"><h3>511.&nbsp;Input_type for binomial_distribution</h3></a><p><b>Section:</b>&nbsp;TR1 5.1.7.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.dist.bin\"> [tr.rand.dist.bin]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+Unlike all other distributions in TR1, this binomial_distribution has an\n+implementation-defined  input_type.  We believe this is an unfortunate choice,\n+because it hinders users from writing portable code.  It also hinders the\n+writing of compliance tests.  We recommend instead:\n+</p>\n+<blockquote><pre>typedef  RealType  input_type;\n+</pre></blockquote>\n+<p>\n+While this choice is somewhat arbitrary (as it was for some of the other\n+distributions), we make  this particular choice because (unlike all other\n+distributions) otherwise this template would not publish its RealType\n+argument and so users could not write generic code that accessed this\n+second template parameter.  In this respect, the choice is consistent with\n+the other distributions in  TR1. \n+</p>\n+<p>\n+We have two reasons for recommending that a real type be specified instead.\n+One reason is  based specifically on characteristics of binomial distribution\n+implementations, while the other is based on mathematical characteristics of\n+probability distribution functions in general.\n+</p>\n+<p>\n+Implementations of binomial distributions commonly use Stirling approximations\n+for values in certain ranges.  It is far more natural to use real values to\n+represent these approximations than it would be to use integral values to do\n+so.  In other ranges, implementations reply on the Bernoulli  distribution to\n+obtain values.  While TR1\ufffds bernoulli_distribution::input_type is specified as\n+int, we believe this would be better specified as double.\n+</p>\n+<p>\n+This brings us to our main point:  The notion of a random distribution rests\n+on the notion of a cumulative distribution function, which in turn mathematically\n+depends on a continuous dependent variable.  Indeed, such a distribution function\n+would be meaningless if it depended on  discrete values such as integers\ufffdand this\n+remains true even if the distribution function were to take discrete steps.\n+</p>\n+<p>\n+Although this note is specifically about binomial_distribution::input_type,\n+we intend to recommend that all of the random distributions\ufffd input_types be\n+specified as a real type (either a RealType template parameter, or double,\n+as appropriate).\n+</p>\n+<p>\n+Of the nine distributions in TR1, four already have this characteristic\n+(uniform_real, exponential_distribution, normal_distribution, and\n+gamma_distribution).  We have already argued the case for the binomial the\n+remaining four distributions.\n+</p>\n+<p>\n+In the case of uniform_int, we believe that the calculations to produce an\n+integer result in a  specified range from an integer in a different specified\n+range is best done using real arithmetic.  This is because it involves a\n+product, one of whose terms is the ratio of the extents of the two ranges.\n+Without real arithmetic, the results become less uniform: some numbers become\n+more  (or less) probable that they should be.  This is, of course, undesireable\n+behavior in a uniform distribution.\n+</p>\n+<p>\n+Finally, we believe that in the case of the bernoulli_distribution (briefly\n+mentioned earlier), as well as the cases of the geometric_distribution and the\n+poisson_distribution, it would be far more natural to have a real input_type.\n+This is because the most natural computation involves the  random number\n+delivered and the distribution\ufffds parameter p (in the case of bernoulli_distribution,\n+for example, the computation is a comparison against p), and p is already specified\n+in each case as having some real type.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<blockquote><pre>typedef  RealType  input_type;\n+</pre></blockquote>\n+<hr>\n+<a name=\"512\"></a><h3><a name=\"512\">512.&nbsp;Seeding subtract_with_carry_01 from a single unsigned long</a></h3><p><b>Section:</b>&nbsp;TR1 5.1.4.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.eng.sub1\"> [tr.rand.eng.sub1]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+Paragraph 8 specifies the algorithm by which a subtract_with_carry_01  engine\n+is to be seeded given a single unsigned long.  This algorithm is seriously\n+flawed in the case where the engine parameter w (also known as word_size)\n+exceeds 31 [bits].  The key part of the paragraph reads:\n+</p>\n+<blockquote>\n+sets x(-r) ... x(-1) to (lcg(1)*2**(-w)) mod 1\n+</blockquote>\n+<p>\n+and so forth. \n+</p>\n+<p>\n+Since the specified linear congruential engine, lcg, delivers numbers with\n+a maximum of 2147483563 (just a shade under 31 bits), then when w is, for\n+example, 48, each of the x(i) will be less than 2**-17.  The consequence\n+is that roughly the first 400 numbers delivered will be  conspicuously\n+close to either zero or one.\n+</p>\n+<p>\n+Unfortunately, this is not an innocuous flaw:  One of the predefined engines\n+in [tr.rand.predef],  namely ranlux64_base_01, has w = 48 and would exhibit\n+this poor behavior, while the original N1378 proposal states that these\n+pre-defined engines are intended to be of \"known good properties.\"\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+In 5.1.4.4 [tr.rand.eng.sub1], replace the \"effects\" clause for\n+void seed(unsigned long value = 19780503) by\n+</p>\n+\n+<blockquote>\n+<i>Effects:</i> If <tt>value == 0</tt>, sets value to <tt>19780503</tt>. In any\n+case, <del>with a linear congruential generator <tt>lcg</tt>(i) having parameters\n+<tt><i>m<sub>lcg</sub></i> = 2147483563</tt>, <tt><i>a<sub>lcg</sub></i> = 40014</tt>,\n+<tt><i>c<sub>lcg</sub></i> = 0</tt>, and <tt><i>lcg</i>(0) = value</tt>,</del>\n+sets <ins>carry<tt>(-1)</tt> and</ins> <tt>x(-r) &#8230; x(-1)</tt>\n+<ins>as if executing</ins>\n+\n+<blockquote><pre><ins>\n+linear_congruential&lt;unsigned long, 40014, 0, 2147483563&gt; lcg(value);\n+seed(lcg);\n+</ins></pre></blockquote>\n+\n+<del>to <tt>(<i>lcg</i>(1) \ufffd 2<sup>-<i>w</i></sup>) mod 1\n+&#8230; (<i>lcg</i>(<i>r</i>) \ufffd 2<sup>-<i>w</i></sup>) mod 1</tt>,\n+respectively. If <tt><i>x</i>(-1) == 0</tt>, sets carry<tt>(-1) = 2<sup>-<i>w</i></sup></tt>,\n+else sets carry<tt>(-1) = 0</tt>.</del>\n+</blockquote>\n+\n+<p><i>[\n+Jens provided revised wording post Mont Tremblant.\n+]</i></p>\n+\n+<p><b>Rationale:</b></p>\n+<p>\n+Jens: I'm using an explicit type here, because fixing the\n+prose would probably not qualify for the (with issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#504\">504</a> even\n+stricter) requirements we have for seed(Gen&amp;).\n+</p>\n+<hr>\n+<a name=\"513\"><h3>513.&nbsp;Size of state for subtract_with_carry_01</h3></a><p><b>Section:</b>&nbsp;TR1 5.1.4.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.eng.sub1\"> [tr.rand.eng.sub1]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+Paragraph 3 begins:\n+</p>\n+<blockquote>\n+The size of the state is r.\n+</blockquote>\n+<p>\n+However, this is not quite consistent with the remainder of the paragraph\n+which specifies a total  of nr+1 items in the textual representation of\n+the state.  We recommend the sentence be corrected to match:\n+</p>\n+<blockquote>\n+The size of the state is nr+1.\n+</blockquote>\n+<p>\n+To give meaning to the coefficient n, it may be also desirable to move\n+n\ufffds definition from later in the paragraph.  Either of the following\n+seem reasonable formulations:\n+</p>\n+<blockquote>\n+With n=..., the size of the state is nr+1.\n+</blockquote>\n+<blockquote>\n+The size of the state is nr+1, where n=... .\n+</blockquote>\n+<p>\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p><i>[\n+Jens:  I plead for \"NAD\" on the grounds that \"size of state\" is only\n+used as an argument for big-O complexity notation, thus\n+constant factors and additions don't count.\n+]</i></p>\n+<hr>\n+<a name=\"514\"><h3>514.&nbsp;Size of state for subtract_with_carry</h3></a><p><b>Section:</b>&nbsp;TR1 5.1.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.eng.sub\"> [tr.rand.eng.sub]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Open\">Open</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+Paragraph 2 begins:\n+</p>\n+<blockquote>\n+The size of the state is r.\n+</blockquote>\n+<p>\n+However, the next sentence specifies a total of r+1 items in the textual\n+representation of the state,  r specific x\ufffds as well as a specific carry.\n+This makes a total of r+1 items that constitute the size of the state,\n+rather than r.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+We recommend the sentence be corrected to match:\n+</p>\n+<blockquote>\n+ The size of the state is r+1.\n+</blockquote>\n+\n+<p><i>[\n+Jens:  I plead for \"NAD\" on the grounds that \"size of state\" is only\n+used as an argument for big-O complexity notation, thus\n+constant factors and additions don't count.\n+]</i></p>\n+\n+<hr>\n+<a name=\"515\"><h3>515.&nbsp;Random number engine traits</h3></a><p><b>Section:</b>&nbsp;TR1 5.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.synopsis\"> [tr.rand.synopsis]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+To accompany the concept of a pseudo-random number engine as defined in Table 17,\n+we propose and recommend an adjunct template, engine_traits, to be declared in\n+[tr.rand.synopsis] as:\n+</p>\n+<blockquote><pre>template&lt; class PSRE &gt;\n+class engine_traits;\n+</pre></blockquote>\n+<p>\n+This template\ufffds primary purpose would be as an aid to generic programming involving\n+pseudo-random number engines.  Given only the facilities described in tr1, it would\n+be very difficult to produce any algorithms involving the notion of a generic engine.\n+The intent of this proposal is to  provide, via engine_traits&lt;&gt;, sufficient\n+descriptive information to allow an algorithm to employ a pseudo-random number engine\n+without regard to its exact type, i.e., as a template parameter.\n+</p>\n+<p>\n+For example, today it is not possible to write an efficient generic function that\n+requires any specific number of random bits.  More specifically, consider a\n+cryptographic application that internally needs 256 bits of randomness per call:\n+</p>\n+<blockquote><pre>template&lt; class Eng, class InIter, class OutIter &gt;\n+void crypto( Eng&amp; e, InIter in, OutIter out );\n+</pre></blockquote>\n+<p>\n+Without knowning the number of bits of randomness produced per call to a provided\n+engine, the algorithm has no means of determining how many times to call the engine.\n+</p>\n+<p>\n+In a new section [tr.rand.eng.traits], we proposed to define the engine_traits\n+template as: \n+</p>\n+<blockquote><pre>template&lt; class PSRE &gt;\n+class engine_traits\n+{\n+  static  std::size_t  bits_of_randomness = 0u;\n+  static  std::string  name()  { return \"unknown_engine\"; }\n+  // TODO: other traits here\n+};\n+</pre></blockquote>\n+<p>\n+Further, each engine described in [tr.rand.engine] would be accompanied by a\n+complete specialization of this new engine_traits template.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+\n+</p>\n+<hr>\n+<a name=\"516\"><h3>516.&nbsp;Seeding subtract_with_carry_01 using a generator</h3></a><p><b>Section:</b>&nbsp;TR1 5.1.4.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.eng.sub1\"> [tr.rand.eng.sub1]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+Paragraph 6 says:\n+</p>\n+<blockquote>\n+... obtained by successive invocations of g, ... \n+</blockquote>\n+<p>\n+We recommend instead:\n+</p>\n+<blockquote>\n+... obtained by taking successive invocations of g mod 2**32, ...\n+</blockquote>\n+<p>\n+as the context seems to require only 32-bit quantities be used here.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+\n+</p>\n+<hr>\n+<a name=\"517\"><h3>517.&nbsp;Should include name in external representation</h3></a><p><b>Section:</b>&nbsp;TR1 5.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.rand.req\"> [tr.rand.req]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Walter Brown&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+The last two rows of Table 16 deal with the i/o requirements of an engine,\n+specifying that the textual representation of an engine\ufffds state,\n+appropriately formatted, constitute the engine\ufffds  external representation.\n+</p>\n+<p>\n+This seems adequate when an engine\ufffds type is known.  However, it seems\n+inadequate in the  context of generic code, where it becomes useful and\n+perhaps even necessary to determine an engine\ufffds type via input.\n+</p>\n+<p>\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+We therefore recommend that, in each of these two rows of Table 16, the\n+text \"textual representation\" be expanded so as to read \"engine name\n+followed by the textual representation.\"\n+</p>\n+<hr>\n+<a name=\"518\"><h3>518.&nbsp;Are insert and erase stable for unordered_multiset and unordered_multimap?</h3></a><p><b>Section:</b>&nbsp;TR1 6.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.hash\"> [tr.hash]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Review\">Review</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+Issue 371 deals with stability of multiset/multimap under insert and erase\n+(i.e. do they preserve the relative order in ranges of equal elements).\n+The same issue applies to unordered_multiset and unordered_multimap.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+</p>\n+<hr>\n+<a name=\"519\"><h3>519.&nbsp;Data() undocumented</h3></a><p><b>Section:</b>&nbsp;TR1 6.2.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.array.array\"> [tr.array.array]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#Ready\">Ready</a>&nbsp; <b>Submitter:</b>&nbsp;Pete Becker&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+<tt>array&lt;&gt;::data()</tt> is present in the class synopsis, but not documented.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+Add a new section, after 6.2.2.3:\n+</p>\n+<blockquote><pre>T*       data()\n+const T* data() const;\n+</pre></blockquote>\n+<p>\n+<b>Returns:</b> <tt>elems</tt>.\n+</p>\n+<p>\n+Change 6.2.2.4/2 to:\n+</p>\n+<blockquote>\n+In the case where <tt>N == 0</tt>, <tt>begin() == end()</tt>. The return value\n+of <tt>data()</tt> is unspecified.\n+</blockquote>\n+<hr>\n+<a name=\"520\"><h3>520.&nbsp;Result_of and pointers to data members</h3></a><p><b>Section:</b>&nbsp;TR1 3.6 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.func.bind\"> [tr.func.bind]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Pete Becker&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+In the original proposal for binders, the return type of bind() when\n+called with a pointer to member data as it's callable object was\n+defined to be mem_fn(ptr); when Peter Dimov and I  unified the\n+descriptions of the TR1 function objects we hoisted the descriptions\n+of return types into the INVOKE pseudo-function and into result_of.\n+Unfortunately, we left pointer to member data out of result_of, so\n+bind doesn't have any specified behavior when called with a pointer\n+to  member data.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p><i>[\n+Pete and Peter will provide wording.\n+]</i></p>\n+<hr>\n+<a name=\"521\"><h3>521.&nbsp;Garbled requirements for argument_type in reference_wrapper</h3></a><p><b>Section:</b>&nbsp;TR1 2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.util.refwrp.refwrp\"> [tr.util.refwrp.refwrp]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Pete Becker&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+2.1.2/3, second bullet item currently says that reference_wrapper&lt;T&gt; is\n+derived from unary_function&lt;T, R&gt; if T is:\n+</p>\n+<blockquote>\n+a pointer to member function type with cv-qualifier cv and no arguments;\n+the type T1 is cv T* and R is the return type of the pointer to member function;\n+</blockquote>\n+<p>\n+The type of T1 can't be cv T*, 'cause that's a pointer to a pointer to member\n+function. It should be a pointer to the class that T is a pointer to member of.\n+Like this:\n+</p>\n+<blockquote>\n+a pointer to a member function R T0::f() cv (where cv represents the member\n+function's cv-qualifiers); the type T1 is cv T0*\n+</blockquote>\n+<p>\n+Similarly, bullet item 2 in 2.1.2/4 should be:\n+</p>\n+<blockquote>\n+a pointer to a member function R T0::f(T2) cv (where cv represents the member\n+function's cv-qualifiers); the type T1 is cv T0*\n+</blockquote>\n+<p><b>Proposed resolution:</b></p>\n+<hr>\n+<a name=\"522\"></a><h3><a name=\"522\">522.&nbsp;Tuple doesn't define swap</a></h3><p><b>Section:</b>&nbsp;TR1 6.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.tuple\"> [tr.tuple]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Andy Koenig&nbsp; <b>Date:</b>&nbsp;3 Jul 2005</p>\n+<p>\n+Tuple doesn't define swap().  It should.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<hr>\n+<a name=\"523\"><h3>523.&nbsp;regex case-insensitive character ranges are unimplementable as specified</h3></a><p><b>Section:</b>&nbsp;TR1 7 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.re\"> [tr.re]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Eric Niebler&nbsp; <b>Date:</b>&nbsp;1 Jul 2005</p>\n+<p>\n+A problem with TR1 regex is currently being discussed on the Boost \n+developers list. It involves the handling of case-insensitive matching \n+of character ranges such as [Z-a]. The proper behavior (according to the \n+ECMAScript standard) is unimplementable given the current specification \n+of the TR1 regex_traits&lt;&gt; class template. John Maddock, the author of \n+the TR1 regex proposal, agrees there is a problem. The full discussion \n+can be found at http://lists.boost.org/boost/2005/06/28850.php (first \n+message copied below). We don't have any recommendations as yet.\n+</p>\n+<p>\n+-- Begin original message --\n+</p>\n+<p>\n+The situation of interest is described in the ECMAScript specification\n+(ECMA-262), section 15.10.2.15:\n+</p>\n+<p>\n+\"Even if the pattern ignores case, the case of the two ends of a range\n+is significant in determining which characters belong to the range.\n+Thus, for example, the pattern /[E-F]/i matches only the letters E, F,\n+e, and f, while the pattern /[E-f]/i matches all upper and lower-case\n+ASCII letters as well as the symbols [, \\, ], ^, _, and `.\"\n+</p>\n+<p>\n+A more interesting case is what should happen when doing a\n+case-insentitive match on a range such as [Z-a]. It should match z, Z,\n+a, A and the symbols [, \\, ], ^, _, and `. This is not what happens with\n+Boost.Regex (it throws an exception from the regex constructor).\n+</p>\n+<p>\n+The tough pill to swallow is that, given the specification in TR1, I\n+don't think there is any effective way to handle this situation.\n+According to the spec, case-insensitivity is handled with\n+regex_traits&lt;&gt;::translate_nocase(CharT) -- two characters are equivalent\n+if they compare equal after both are sent through the translate_nocase\n+function. But I don't see any way of using this translation function to\n+make character ranges case-insensitive. Consider the difficulty of\n+detecting whether \"z\" is in the range [Z-a]. Applying the transformation\n+to \"z\" has no effect (it is essentially std::tolower). And we're not\n+allowed to apply the transformation to the ends of the range, because as\n+ECMA-262 says, \"the case of the two ends of a range is significant.\"\n+</p>\n+<p>\n+So AFAICT, TR1 regex is just broken, as is Boost.Regex. One possible fix\n+is to redefine translate_nocase to return a string_type containing all\n+the characters that should compare equal to the specified character. But\n+this function is hard to implement for Unicode, and it doesn't play nice\n+with the existing ctype facet. What a mess!\n+</p>\n+<p>\n+-- End original message --\n+</p>\n+\n+<p><i>[\n+John Maddock adds:\n+]</i></p>\n+\n+<p>\n+One small correction, I have since found that ICU's regex package does \n+implement this correctly, using a similar mechanism to the current \n+TR1.Regex.\n+</p>\n+<p>\n+Given an expression [c1-c2] that is compiled as case insensitive it:\n+</p>\n+<p>\n+Enumerates every character in the range c1 to c2 and converts it to it's \n+case folded equivalent.  That case folded character is then used a key to a \n+table of equivalence classes, and each member of the class is added to the \n+list of possible matches supported by the character-class.  This second step \n+isn't possible with our current traits class design, but isn't necessary if \n+the input text is also converted to a case-folded equivalent on the fly.\n+</p>\n+<p>\n+ICU applies similar brute force mechanisms to character classes such as \n+[[:lower:]] and [[:word:]], however these are at least cached, so the impact \n+is less noticeable in this case.\n+</p>\n+<p>\n+Quick and dirty performance comparisons show that expressions such as \n+\"[X-\\\\x{fff0}]+\" are indeed very slow to compile with ICU (about 200 times \n+slower than a \"normal\" expression).  For an application that uses a lot of \n+regexes this could have a noticeable performance impact.  ICU also has an \n+advantage in that it knows the range of valid characters codes: code points \n+outside that range are assumed not to require enumeration, as they can not \n+be part of any equivalence class.  I presume that if we want the TR1.Regex \n+to work with arbitrarily large character sets enumeration really does become \n+impractical.\n+</p>\n+<p>\n+Finally note that Unicode has:\n+</p>\n+<p>\n+Three cases (upper, lower and title).\n+One to many, and many to one case transformations.\n+Character that have context sensitive case translations - for example an \n+uppercase sigma has two different lowercase forms  - the form chosen depends \n+on context(is it end of a word or not), a caseless match for an upper case \n+sigma should match either of the lower case forms, which is why case folding \n+is often approximated by tolower(toupper(c)).\n+</p>\n+<p>\n+Probably we need some way to enumerate character equivalence classes, \n+including digraphs (either as a result or an input), and some way to tell \n+whether the next character pair is a valid digraph in the current locale.\n+</p>\n+<p>\n+Hoping this doesn't make this even more complex that it was already,\n+</p>\n+\n+<p><b>Proposed resolution:</b></p>\n+<hr>\n+<a name=\"524\"><h3>524.&nbsp;regex named character classes and case-insensitivity don't mix</h3></a><p><b>Section:</b>&nbsp;TR1 7 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.re\"> [tr.re]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Eric Niebler&nbsp; <b>Date:</b>&nbsp;1 Jul 2005</p>\n+<p>\n+This defect is also being discussed on the Boost developers list. The \n+full discussion can be found here:\n+http://lists.boost.org/boost/2005/07/29546.php\n+</p>\n+<p>\n+-- Begin original message --\n+</p>\n+<p>\n+Also, I may have found another issue, closely related to the one under\n+discussion. It regards case-insensitive matching of named character\n+classes. The regex_traits&lt;&gt; provides two functions for working with\n+named char classes: lookup_classname and isctype. To match a char class\n+such as [[:alpha:]], you pass \"alpha\" to lookup_classname and get a\n+bitmask. Later, you pass a char and the bitmask to isctype and get a\n+bool yes/no answer.\n+</p>\n+<p>\n+But how does case-insensitivity work in this scenario? Suppose we're\n+doing a case-insensitive match on [[:lower:]]. It should behave as if it\n+were [[:lower:][:upper:]], right? But there doesn't seem to be enough\n+smarts in the regex_traits interface to do this.\n+</p>\n+<p>\n+Imagine I write a traits class which recognizes [[:fubar:]], and the\n+\"fubar\" char class happens to be case-sensitive. How is the regex engine\n+to know that? And how should it do a case-insensitive match of a\n+character against the [[:fubar:]] char class? John, can you confirm this\n+is a legitimate problem?\n+</p>\n+<p>\n+I see two options:\n+</p>\n+<p>\n+1) Add a bool icase parameter to lookup_classname. Then,\n+lookup_classname( \"upper\", true ) will know to return lower|upper\n+instead of just upper.\n+</p>\n+<p>\n+2) Add a isctype_nocase function\n+</p>\n+<p>\n+I prefer (1) because the extra computation happens at the time the\n+pattern is compiled rather than when it is executed.\n+</p>\n+<p>\n+-- End original message --\n+</p>\n+\n+<p>\n+For what it's worth, John has also expressed his preference for option \n+(1) above.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<hr>\n+<a name=\"525\"><h3>525.&nbsp;type traits definitions not clear</h3></a><p><b>Section:</b>&nbsp;TR1 4.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.meta.unary\"> [tr.meta.unary]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Robert Klarer&nbsp; <b>Date:</b>&nbsp;11 Jul 2005</p>\n+<p>\n+It is not completely clear how the primary type traits deal with\n+cv-qualified types.  And several of the secondary type traits\n+seem to be lacking a definition.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<hr>\n+<a name=\"526\"></a><h3><a name=\"526\">526.&nbsp;Is it undefined if a function in the standard changes in parameters?</a></h3><p><b>Section:</b>&nbsp;23.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.sequence.reqmts\"> [lib.sequence.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Chris Jefferson&nbsp; <b>Date:</b>&nbsp;14 Sep 2005</p>\n+<p>\n+Problem: There are a number of places in the C++ standard library where\n+it is possible to write what appear to be sensible ways of calling\n+functions, but which can cause problems in some (or all)\n+implementations, as they cause the values given to the function to be\n+changed in a way not specified in standard (and therefore not coded to\n+correctly work). These fall into two similar categories.\n+</p>\n+\n+<p>\n+1) Parameters taken by const reference can be changed during execution\n+of the function\n+</p>\n+\n+<p>\n+Examples:\n+</p>\n+\n+<p>\n+Given std::vector&lt;int&gt; v:\n+</p>\n+<p>\n+v.insert(v.begin(), v[2]);\n+</p>\n+<p>\n+v[2] can be changed by moving elements of vector\n+</p>\n+\n+\n+<p>\n+Given std::list&lt;int&gt; l:\n+</p>\n+<p>\n+l.remove(*l.begin());\n+</p>\n+<p>\n+Will delete the first element, and then continue trying to access it.\n+This is particularily vicious, as it will appear to work in almost all\n+cases.\n+</p>\n+\n+<p>\n+2) A range is given which changes during the execution of the function:\n+Similarly,\n+</p>\n+\n+<p>\n+v.insert(v.begin(), v.begin()+4, v.begin()+6);\n+</p>\n+\n+<p>\n+This kind of problem has been partly covered in some cases. For example\n+std::copy(first, last, result) states that result cannot be in the range\n+[first, last). However, does this cover the case where result is a\n+reverse_iterator built from some iterator in the range [first, last)?\n+Also, std::copy would still break if result was reverse_iterator(last +\n+1), yet this is not forbidden by the standard\n+</p>\n+\n+<p>\n+Solution:\n+</p>\n+\n+<p>\n+One option would be to try to more carefully limit the requirements of\n+each function. There are many functions which would have to be checked.\n+However as has been shown in the std::copy case, this may be difficult.\n+A simpler, more global option would be to somewhere insert text similar to:\n+</p>\n+\n+<p>\n+If the execution of any function would change either any values passed\n+by reference or any value in any range passed to a function in a way not\n+defined in the definition of that function, the result is undefined.\n+</p>\n+\n+<p>\n+Such code would have to at least cover chapters 23 and 25 (the sections\n+I read through carefully). I can see no harm on applying it to much of\n+the rest of the standard.\n+</p>\n+\n+<p>\n+Some existing parts of the standard could be improved to fit with this,\n+for example the requires for 25.2.1 (Copy) could be adjusted to:\n+</p>\n+\n+<p>\n+Requires: For each non-negative integer n &lt; (last - first), assigning to\n+*(result + n) must not alter any value in the range [first + n, last).\n+</p>\n+\n+<p>\n+However, this may add excessive complication.\n+</p>\n+\n+<p>\n+One other benefit of clearly introducing this text is that it would\n+allow a number of small optimisations, such as caching values passed\n+by const reference.\n+</p>\n+\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+</p>\n+<hr>\n+<a name=\"527\"><h3>527.&nbsp;tr1::bind has lost its Throws clause</h3></a><p><b>Section:</b>&nbsp;TR1 3.6.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.func.bind.bind\"> [tr.func.bind.bind]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Peter Dimov&nbsp; <b>Date:</b>&nbsp;01 Oct 2005</p>\n+<p>\n+The original bind proposal gives the guarantee that tr1::bind(f, t1,\n+..., tN) does not throw when the copy constructors of f, t1, ..., tN\n+don't.\n+</p>\n+\n+<p>\n+This guarantee is not present in the final version of TR1.\n+</p>\n+\n+<p>\n+I'm pretty certain that we never removed it on purpose. Editorial omission? :-)\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+</p>\n+<hr>\n+<a name=\"528\"><h3>528.&nbsp;TR1: issue 6.19 vs 6.3.4.3/2 (and 6.3.4.5/2)</h3></a><p><b>Section:</b>&nbsp;TR1 6.3.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/tr1.html#tr.unord.unord\"> [tr.unord.unord]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#New\">New</a>&nbsp; <b>Submitter:</b>&nbsp;Paolo Carlini&nbsp; <b>Date:</b>&nbsp;12 Oct 2005</p>\n+<p>\n+while implementing the resolution of issue 6.19 I'm noticing the\n+following: according to 6.3.4.3/2 (and 6.3.4.5/2), for unordered_set and\n+unordered_multiset:\n+</p>\n+\n+<blockquote>\n+    \"The iterator and const_iterator types are both const types. It is\n+unspecified whether they are the same type\"\n+</blockquote>\n+\n+<p>\n+Now, according to the resolution of 6.19, we have overloads of insert\n+with hint and erase (single and range) both for iterator and\n+const_iterator, which, AFAICS, can be meaningful at the same time *only*\n+if iterator and const_iterator *are* in fact different types.\n+</p>\n+<p>\n+Then, iterator and const_iterator are *required* to be different types?\n+Or that is an unintended consequence? Maybe the overloads for plain\n+iterators should be added only to unordered_map and unordered_multimap?\n+Or, of course, I'm missing something?\n+</p>\n+\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+Add to 6.3.4.3p2 (and 6.3.4.5p2):\n+</p>\n+<p>\n+2  ... The iterator and const_iterator types are both <del>const</del>\n+<ins>constant</ins> iterator types.\n+It is unspecified whether they are the same type. <ins>If they are the\n+same type, those signatures that become otherwise indistinguishable\n+collapse into a single signature.</ins>\n+</p>\n+\n <p>----- End of document -----</p>\n </body></html>\n\\ No newline at end of file"}, {"sha": "380c85e70e66222536b609daf51fb94b93d1c6ed", "filename": "libstdc++-v3/docs/html/ext/lwg-defects.html", "status": "modified", "additions": 423, "deletions": 28, "changes": 451, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b600fb239763b1da37a00cd42032415ff95c2a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b600fb239763b1da37a00cd42032415ff95c2a/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Flwg-defects.html?ref=e4b600fb239763b1da37a00cd42032415ff95c2a", "patch": "@@ -5,11 +5,11 @@\n <table>\n <tbody><tr>\n <td align=\"left\">Doc. no.</td>\n-<td align=\"left\">N1831=05-0091</td>\n+<td align=\"left\">N1909=05-0169</td>\n </tr>\n <tr>\n <td align=\"left\">Date:</td>\n-<td align=\"left\">2005-06-24</td>\n+<td align=\"left\">2005-10-23</td>\n </tr>\n <tr>\n <td align=\"left\">Project:</td>\n@@ -20,7 +20,7 @@\n <td align=\"left\">Howard Hinnant &lt;howard.hinnant@gmail.com&gt;</td>\n </tr>\n </tbody></table>\n-<h1>C++ Standard Library Defect Report List (Revision R37)</h1>\n+<h1>C++ Standard Library Defect Report List (Revision R39)</h1>\n   <p>Reference ISO/IEC IS 14882:1998(E)</p>\n   <p>Also see:</p>\n     <ul>\n@@ -42,6 +42,21 @@ <h1>C++ Standard Library Defect Report List (Revision R37)</h1>\n   document.</p>\n <h2>Revision History</h2>\n <ul>\n+<li>R39: \n+2005-10-14 post-Mont Tremblant mailing.\n+Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#526\">526</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#528\">528</a>.\n+Moved issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#280\">280</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#461\">461</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#464\">464</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#465\">465</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#467\">467</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#468\">468</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#474\">474</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#496\">496</a> from Ready to WP as per the vote from Mont Tremblant.\n+Moved issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#247\">247</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#294\">294</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#342\">342</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#362\">362</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#369\">369</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#371\">371</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#376\">376</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#384\">384</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#475\">475</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#478\">478</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#495\">495</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#497\">497</a> from Review to Ready.\n+Moved issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#498\">498</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#504\">504</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#506\">506</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#509\">509</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#510\">510</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#511\">511</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#512\">512</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#513\">513</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#514\">514</a> from New to Open.\n+Moved issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#505\">505</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#507\">507</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#508\">508</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#519\">519</a> from New to Ready.\n+Moved issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-closed.html#500\">500</a> from New to NAD.\n+Moved issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#518\">518</a> from New to Review.\n+</li>\n+<li>R38: \n+2005-07-03 pre-Mont Tremblant mailing.\n+Merged open TR1 issues in <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#504\">504</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#522\">522</a>.\n+Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#523\">523</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#523\">523</a>\n+</li>\n <li>R37: \n 2005-06 mid-term mailing.\n Added new issues <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#498\">498</a>-<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#503\">503</a>.\n@@ -627,7 +642,7 @@ <h2>Defect Reports</h2>\n <p>See 99-0040/N1216, October 22, 1999, by Stephen D. Clamage for the analysis\n supporting to the proposed resolution.</p>\n <hr>\n-<a name=\"11\"></a><h3><a name=\"11\">11.&nbsp;Bitset minor problems</a></h3><p><b>Section:</b>&nbsp;23.3.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.template.bitset\"> [lib.template.bitset]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;22 Jan 1998</p>\n+<a name=\"11\"><h3>11.&nbsp;Bitset minor problems</h3></a><p><b>Section:</b>&nbsp;23.3.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.template.bitset\"> [lib.template.bitset]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Matt Austern&nbsp; <b>Date:</b>&nbsp;22 Jan 1998</p>\n <p>(1) bitset&lt;&gt;::operator[] is mentioned in the class synopsis (23.3.5), but it is\n not documented in 23.3.5.2. </p>\n \n@@ -680,7 +695,7 @@ <h2>Defect Reports</h2>\n <p>In 27.6.1.2.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream::extractors\"> [lib.istream::extractors]</a>, replace \"eos\" with\n \"charT()\"</p>\n <hr>\n-<a name=\"14\"></a><h3><a name=\"14\">14.&nbsp;Locale::combine should be const</a></h3><p><b>Section:</b>&nbsp;22.1.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.members\"> [lib.locale.members]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n+<a name=\"14\"><h3>14.&nbsp;Locale::combine should be const</h3></a><p><b>Section:</b>&nbsp;22.1.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.members\"> [lib.locale.members]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n <p>locale::combine is the only member function of locale (other than constructors and\n destructor) that is not const. There is no reason for it not to be const, and good reasons\n why it should have been const. Furthermore, leaving it non-const conflicts with 22.1.1\n@@ -879,7 +894,7 @@ <h2>Defect Reports</h2>\n believes to have been the original intent.</p>\n \n <hr>\n-<a name=\"24\"><h3>24.&nbsp;\"do_convert\" doesn't exist</h3></a><p><b>Section:</b>&nbsp;22.2.1.5.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n+<a name=\"24\"></a><h3><a name=\"24\">24.&nbsp;\"do_convert\" doesn't exist</a></h3><p><b>Section:</b>&nbsp;22.2.1.5.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n <p>The description of codecvt&lt;&gt;::do_out and do_in mentions a\n symbol \"do_convert\" which is not defined in the\n standard. This is a leftover from an edit, and should be \"do_in\n@@ -889,7 +904,7 @@ <h2>Defect Reports</h2>\n \"do_convert\" to \"do_in or do_out\". Also, in 22.2.1.5.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>, change \"do_convert()\" to \"do_in\n or do_out\". </p>\n <hr>\n-<a name=\"25\"></a><h3><a name=\"25\">25.&nbsp;String operator&lt;&lt; uses width() value wrong</a></h3><p><b>Section:</b>&nbsp;21.3.7.9 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string.io\"> [lib.string.io]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n+<a name=\"25\"><h3>25.&nbsp;String operator&lt;&lt; uses width() value wrong</h3></a><p><b>Section:</b>&nbsp;21.3.7.9 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string.io\"> [lib.string.io]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Nathan Myers&nbsp; <b>Date:</b>&nbsp;6 Aug 1998</p>\n <p>In the description of operator&lt;&lt; applied to strings, the standard says that uses\n the smaller of os.width() and str.size(), to pad \"as described in stage 3\"\n elsewhere; but this is inconsistent, as this allows no possibility of space for padding. </p>\n@@ -2368,7 +2383,7 @@ <h2>Defect Reports</h2>\n   extracted.\n </blockquote>\n <hr>\n-<a name=\"69\"></a><h3><a name=\"69\">69.&nbsp;Must elements of a vector be contiguous?</a></h3><p><b>Section:</b>&nbsp;23.2.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector\"> [lib.vector]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Andrew Koenig&nbsp; <b>Date:</b>&nbsp;29 Jul 1998</p>\n+<a name=\"69\"><h3>69.&nbsp;Must elements of a vector be contiguous?</h3></a><p><b>Section:</b>&nbsp;23.2.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector\"> [lib.vector]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Andrew Koenig&nbsp; <b>Date:</b>&nbsp;29 Jul 1998</p>\n <p>The issue is this: Must the elements of a vector be in contiguous memory?</p>\n \n <p>(Please note that this is entirely separate from the question of\n@@ -2737,7 +2752,7 @@ <h2>Defect Reports</h2>\n possibilities.  The proposed resolution makes it clear that these two\n functions do get characters from a streambuf.</p>\n <hr>\n-<a name=\"92\"><h3>92.&nbsp;Incomplete Algorithm Requirements</h3></a><p><b>Section:</b>&nbsp;25 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.algorithms\"> [lib.algorithms]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Nico Josuttis&nbsp; <b>Date:</b>&nbsp;29 Sep 1998</p>\n+<a name=\"92\"></a><h3><a name=\"92\">92.&nbsp;Incomplete Algorithm Requirements</a></h3><p><b>Section:</b>&nbsp;25 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.algorithms\"> [lib.algorithms]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Nico Josuttis&nbsp; <b>Date:</b>&nbsp;29 Sep 1998</p>\n <p>The standard does not state, how often a function object is copied,\n called, or the order of calls inside an algorithm. This may lead to\n surprising/buggy behavior. Consider the following example: </p>\n@@ -2869,7 +2884,7 @@ <h2>Defect Reports</h2>\n    of input iterators, we can't impose any requirements in the Input\n    Iterator requirements table that forward iterators don't satisfy.</p>\n <hr>\n-<a name=\"103\"></a><h3><a name=\"103\">103.&nbsp;set::iterator is required to be modifiable, but this allows modification of keys</a></h3><p><b>Section:</b>&nbsp;23.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.associative.reqmts\"> [lib.associative.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;AFNOR&nbsp; <b>Date:</b>&nbsp;7 Oct 1998</p>\n+<a name=\"103\"><h3>103.&nbsp;set::iterator is required to be modifiable, but this allows modification of keys</h3></a><p><b>Section:</b>&nbsp;23.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.associative.reqmts\"> [lib.associative.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;AFNOR&nbsp; <b>Date:</b>&nbsp;7 Oct 1998</p>\n <p>Set::iterator is described as implementation-defined with a\n reference to the container requirement; the container requirement says\n that const_iterator is an iterator pointing to const T and iterator an\n@@ -3158,7 +3173,7 @@ <h2>Defect Reports</h2>\n   <p><b>Requires</b>: <tt>s.rdbuf()</tt> is not null.</p>\n </blockquote>\n <hr>\n-<a name=\"114\"></a><h3><a name=\"114\">114.&nbsp;Placement forms example in error twice</a></h3><p><b>Section:</b>&nbsp;18.4.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-support.html#lib.new.delete.placement\"> [lib.new.delete.placement]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Steve Clamage&nbsp; <b>Date:</b>&nbsp;28 Oct 1998</p>\n+<a name=\"114\"><h3>114.&nbsp;Placement forms example in error twice</h3></a><p><b>Section:</b>&nbsp;18.4.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-support.html#lib.new.delete.placement\"> [lib.new.delete.placement]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Steve Clamage&nbsp; <b>Date:</b>&nbsp;28 Oct 1998</p>\n <p>Section 18.4.1.3 contains the following example: </p>\n \n <pre>[Example: This can be useful for constructing an object at a known address:\n@@ -3647,7 +3662,7 @@ <h2>Defect Reports</h2>\n <tt>do_scan_not()</tt> to return a <tt> const\n charT*</tt>. </p>\n <hr>\n-<a name=\"125\"><h3>125.&nbsp;valarray&lt;T&gt;::operator!() return type is inconsistent</h3></a><p><b>Section:</b>&nbsp;26.3.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.template.valarray\"> [lib.template.valarray]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Judy Ward&nbsp; <b>Date:</b>&nbsp;15 Dec 1998</p>\n+<a name=\"125\"></a><h3><a name=\"125\">125.&nbsp;valarray&lt;T&gt;::operator!() return type is inconsistent</a></h3><p><b>Section:</b>&nbsp;26.3.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.template.valarray\"> [lib.template.valarray]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Judy Ward&nbsp; <b>Date:</b>&nbsp;15 Dec 1998</p>\n <p>In Section 26.3.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.template.valarray\"> [lib.template.valarray]</a> valarray&lt;T&gt;::operator!() is\n declared to return a valarray&lt;T&gt;, but in Section 26.3.2.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-numerics.html#lib.valarray.unary\"> [lib.valarray.unary]</a> it is declared to return a valarray&lt;bool&gt;. The\n latter appears to be correct. </p>\n@@ -4151,7 +4166,7 @@ <h2>Defect Reports</h2>\n <p>For inserters, the LWG believes there is no defect; the standard is correct\n as written.</p>\n <hr>\n-<a name=\"147\"></a><h3><a name=\"147\">147.&nbsp;Library Intro refers to global functions that aren't global</a></h3><p><b>Section:</b>&nbsp;17.4.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.global.functions\"> [lib.global.functions]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Lois Goldthwaite&nbsp; <b>Date:</b>&nbsp;4 Jun 1999</p>\n+<a name=\"147\"><h3>147.&nbsp;Library Intro refers to global functions that aren't global</h3></a><p><b>Section:</b>&nbsp;17.4.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.global.functions\"> [lib.global.functions]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Lois Goldthwaite&nbsp; <b>Date:</b>&nbsp;4 Jun 1999</p>\n <p>The library had many global functions until 17.4.1.1 [lib.contents]\n paragraph 2 was added: </p>\n \n@@ -4405,8 +4420,8 @@ <h2>Defect Reports</h2>\n \"supplied\" with the words \"extracted from the\n stream\".</p>\n <hr>\n-<a name=\"160\"></a><h3><a name=\"160\">160.&nbsp;Typo: Use of non-existing function <tt>exception()</tt>\n-</a></h3><p><b>Section:</b>&nbsp;27.6.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream\"> [lib.istream]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Dietmar K\ufffdhl&nbsp; <b>Date:</b>&nbsp;20 Jul 1999</p>\n+<a name=\"160\"><h3>160.&nbsp;Typo: Use of non-existing function <tt>exception()</tt>\n+</h3></a><p><b>Section:</b>&nbsp;27.6.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream\"> [lib.istream]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Dietmar K\ufffdhl&nbsp; <b>Date:</b>&nbsp;20 Jul 1999</p>\n <p>The paragraph 4 refers to the function <tt>exception()</tt> which\n is not defined. Probably, the referred function is\n <tt>basic_ios&lt;&gt;::exceptions()</tt>.</p>\n@@ -4567,7 +4582,7 @@ <h2>Defect Reports</h2>\n deal with a const char*.  There's nothing better to do but fall back\n to char_traits&lt;char&gt;</p>\n <hr>\n-<a name=\"168\"></a><h3><a name=\"168\">168.&nbsp;Typo: formatted vs. unformatted</a></h3><p><b>Section:</b>&nbsp;27.6.2.6 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ostream.unformatted\"> [lib.ostream.unformatted]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Dietmar K\ufffdhl&nbsp; <b>Date:</b>&nbsp;20 Jul 1999</p>\n+<a name=\"168\"><h3>168.&nbsp;Typo: formatted vs. unformatted</h3></a><p><b>Section:</b>&nbsp;27.6.2.6 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ostream.unformatted\"> [lib.ostream.unformatted]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Dietmar K\ufffdhl&nbsp; <b>Date:</b>&nbsp;20 Jul 1999</p>\n <p>The first paragraph begins with a descriptions what has to be done\n in <i>formatted</i> output functions. Probably this is a typo and the\n paragraph really want to describe unformatted output functions...</p>\n@@ -4858,7 +4873,7 @@ <h2>Defect Reports</h2>\n where <tt>X</tt> is a container.  There is no requirement that\n <tt>X::reverse_iterator</tt> and <tt>X::const_reverse_iterator</tt>\n can be mixed.  If mixing them is considered important, that's a\n-separate issue.  (Issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#280\">280</a>.)\n+separate issue.  (Issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#280\">280</a>.)\n </p>\n <hr>\n <a name=\"181\"><h3>181.&nbsp;make_pair() unintended behavior</h3></a><p><b>Section:</b>&nbsp;20.2.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-utilities.html#lib.pairs\"> [lib.pairs]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Andrew Koenig&nbsp; <b>Date:</b>&nbsp;3 Aug 1999</p>\n@@ -5896,7 +5911,7 @@ <h2>Defect Reports</h2>\n or change the return to distance(b,a).  The LWG preferred the\n former for consistency.</p>\n <hr>\n-<a name=\"211\"></a><h3><a name=\"211\">211.&nbsp;operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</a></h3><p><b>Section:</b>&nbsp;21.3.7.9 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string.io\"> [lib.string.io]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Scott Snyder&nbsp; <b>Date:</b>&nbsp;4 Feb 2000</p>\n+<a name=\"211\"><h3>211.&nbsp;operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</h3></a><p><b>Section:</b>&nbsp;21.3.7.9 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string.io\"> [lib.string.io]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#TC\">TC</a>&nbsp; <b>Submitter:</b>&nbsp;Scott Snyder&nbsp; <b>Date:</b>&nbsp;4 Feb 2000</p>\n <p>The description of the stream extraction operator for std::string (section\n 21.3.7.9 [lib.string.io]) does not contain a requirement that failbit be set in\n the case that the operator fails to extract any characters from the input\n@@ -8406,6 +8421,73 @@ <h2>Defect Reports</h2>\n   element into the middle of a vector is correctly said to invalidate\n   all iterators pointing into the vector.  That doesn't necessarily\n   mean they all become singular.</p>\n+<hr>\n+<a name=\"280\"><h3>280.&nbsp;Comparison of reverse_iterator to const reverse_iterator</h3></a><p><b>Section:</b>&nbsp;24.4.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.reverse.iterators\"> [lib.reverse.iterators]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Steve Cleary&nbsp; <b>Date:</b>&nbsp;27 Nov 2000</p>\n+<p>\n+This came from an email from Steve Cleary to Fergus in reference to\n+issue <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#179\">179</a>. The library working group briefly discussed\n+this in Toronto and believed it should be a separate issue.  There was\n+also some reservations about whether this was a worthwhile problem to\n+fix.\n+</p>\n+\n+<p>\n+Steve said: \"Fixing reverse_iterator. std::reverse_iterator can\n+(and should) be changed to preserve these additional\n+requirements.\" He also said in email that it can be done without\n+breaking user's code: \"If you take a look at my suggested\n+solution, reverse_iterator doesn't have to take two parameters; there\n+is no danger of breaking existing code, except someone taking the\n+address of one of the reverse_iterator global operator functions, and\n+I have to doubt if anyone has ever done that. . .  <i>But</i>, just in\n+case they have, you can leave the old global functions in as well --\n+they won't interfere with the two-template-argument functions.  With\n+that, I don't see how <i>any</i> user code could break.\"\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+<b>Section:</b> 24.4.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.reverse.iterator\"> [lib.reverse.iterator]</a>\n+add/change the following declarations:</p>\n+<pre>  A) Add a templated assignment operator, after the same manner\n+        as the templated copy constructor, i.e.:\n+\n+  template &lt; class U &gt;\n+  reverse_iterator &lt; Iterator &gt;&amp; operator=(const reverse_iterator&lt; U &gt;&amp; u);\n+\n+  B) Make all global functions (except the operator+) have\n+  two template parameters instead of one, that is, for\n+  operator ==, !=, &lt;, &gt;, &lt;=, &gt;=, - replace:\n+\n+       template &lt; class Iterator &gt;\n+       typename reverse_iterator&lt; Iterator &gt;::difference_type operator-(\n+                 const reverse_iterator&lt; Iterator &gt;&amp; x,\n+                 const reverse_iterator&lt; Iterator &gt;&amp; y);\n+\n+  with:\n+\n+      template &lt; class Iterator1, class Iterator2 &gt;\n+      typename reverse_iterator &lt; Iterator1 &gt;::difference_type operator-(\n+                 const reverse_iterator &lt; Iterator1 &gt; &amp; x,\n+                 const reverse_iterator &lt; Iterator2 &gt; &amp; y);\n+</pre>\n+<p>\n+Also make the addition/changes for these signatures in \n+24.4.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iterators.html#lib.reverse.iter.ops\"> [lib.reverse.iter.ops]</a>.\n+</p>\n+\n+<p><i>[\n+Copenhagen: The LWG is concerned that the proposed resolution \n+introduces new overloads.  Experience shows that introducing\n+overloads is always risky, and that it would be inappropriate to\n+make this change without implementation experience.  It may be\n+desirable to provide this feature in a different way.\n+]</i></p>\n+\n+<p><i>[\n+Lillehammer: We now have implementation experience, and agree that\n+this solution is safe and correct.\n+]</i></p>\n+\n <hr>\n <a name=\"281\"><h3>281.&nbsp;std::min() and max() requirements overly restrictive</h3></a><p><b>Section:</b>&nbsp;25.3.7 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-algorithms.html#lib.alg.min.max\"> [lib.alg.min.max]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;02 Dec 2000</p>\n <p>The requirements in 25.3.7, p1 and 4 call for T to satisfy the\n@@ -9022,7 +9104,7 @@ <h2>Defect Reports</h2>\n <p><i>[Post-Cura\ufffdao: Robert Klarer provided new wording.]</i></p>\n \n <hr>\n-<a name=\"301\"></a><h3><a name=\"301\">301.&nbsp;basic_string template ctor effects clause omits allocator argument</a></h3><p><b>Section:</b>&nbsp;21.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string.cons\"> [lib.string.cons]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;27 Jan 2001</p>\n+<a name=\"301\"><h3>301.&nbsp;basic_string template ctor effects clause omits allocator argument</h3></a><p><b>Section:</b>&nbsp;21.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.string.cons\"> [lib.string.cons]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;27 Jan 2001</p>\n <p>\n The effects clause for the basic_string template ctor in 21.3.1, p15\n leaves out the third argument of type Allocator. I believe this to be\n@@ -10998,7 +11080,7 @@ <h2>Defect Reports</h2>\n <p><i>[Cura\ufffdao: LWG reviewed PR.]</i></p>\n \n <hr>\n-<a name=\"355\"><h3>355.&nbsp;Operational semantics for a.back()</h3></a><p><b>Section:</b>&nbsp;23.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.sequence.reqmts\"> [lib.sequence.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Yaroslav Mironov&nbsp; <b>Date:</b>&nbsp;23 Jan 2002</p>\n+<a name=\"355\"></a><h3><a name=\"355\">355.&nbsp;Operational semantics for a.back()</a></h3><p><b>Section:</b>&nbsp;23.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.sequence.reqmts\"> [lib.sequence.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Yaroslav Mironov&nbsp; <b>Date:</b>&nbsp;23 Jan 2002</p>\n \n <p>Table 68 \"Optional Sequence Operations\" in 23.1.1/12\n specifies operational semantics for \"a.back()\" as\n@@ -11067,8 +11149,8 @@ <h2>Defect Reports</h2>\n \"*tmp\" to \"return *tmp;\"]</i></p>\n \n <hr>\n-<a name=\"358\"><h3>358.&nbsp;interpreting <tt>thousands_sep</tt> after a <tt>decimal_point</tt>\n-</h3></a><p><b>Section:</b>&nbsp;22.2.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;12 Mar 2002</p>\n+<a name=\"358\"></a><h3><a name=\"358\">358.&nbsp;interpreting <tt>thousands_sep</tt> after a <tt>decimal_point</tt>\n+</a></h3><p><b>Section:</b>&nbsp;22.2.2.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.facet.num.get.virtuals\"> [lib.facet.num.get.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;12 Mar 2002</p>\n <p>\n I don't think <tt>thousands_sep</tt> is being treated correctly after\n decimal_point has been seen. Since grouping applies only to the\n@@ -11350,7 +11432,7 @@ <h2>Defect Reports</h2>\n <p><b>Rationale:</b></p>\n <p>Fixes an obvious typo.</p>\n <hr>\n-<a name=\"373\"><h3>373.&nbsp;Are basic_istream and basic_ostream to use (exceptions()&amp;badbit) != 0 ?</h3></a><p><b>Section:</b>&nbsp;27.6.1.2.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream.formatted.reqmts\"> [lib.istream.formatted.reqmts]</a>, 27.6.2.5.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ostream.formatted.reqmts\"> [lib.ostream.formatted.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Keith Baker&nbsp; <b>Date:</b>&nbsp;23 Jul 2002</p>\n+<a name=\"373\"></a><h3><a name=\"373\">373.&nbsp;Are basic_istream and basic_ostream to use (exceptions()&amp;badbit) != 0 ?</a></h3><p><b>Section:</b>&nbsp;27.6.1.2.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream.formatted.reqmts\"> [lib.istream.formatted.reqmts]</a>, 27.6.2.5.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ostream.formatted.reqmts\"> [lib.ostream.formatted.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Keith Baker&nbsp; <b>Date:</b>&nbsp;23 Jul 2002</p>\n \n <p>\n In 27.6.1.2.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.istream.formatted.reqmts\"> [lib.istream.formatted.reqmts]</a> and 27.6.2.5.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ostream.formatted.reqmts\"> [lib.ostream.formatted.reqmts]</a>\n@@ -11367,7 +11449,7 @@ <h2>Defect Reports</h2>\n <p><b>Rationale:</b></p>\n <p>Fixes an obvious typo.</p>\n <hr>\n-<a name=\"375\"><h3>375.&nbsp;basic_ios should be ios_base in 27.7.1.3</h3></a><p><b>Section:</b>&nbsp;27.7.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Ray Lischner&nbsp; <b>Date:</b>&nbsp;14 Aug 2002</p>\n+<a name=\"375\"></a><h3><a name=\"375\">375.&nbsp;basic_ios should be ios_base in 27.7.1.3</a></h3><p><b>Section:</b>&nbsp;27.7.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Ray Lischner&nbsp; <b>Date:</b>&nbsp;14 Aug 2002</p>\n <p>\n In Section 27.7.1.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.stringbuf.virtuals\"> [lib.stringbuf.virtuals]</a>: Table 90, Table 91, and paragraph\n 14 all contain references to \"basic_ios::\" which should be\n@@ -11449,7 +11531,7 @@ <h2>Defect Reports</h2>\n elements was needed to terminate a sequence given the value of state.\"\n </p>\n <hr>\n-<a name=\"381\"><h3>381.&nbsp;detection of invalid mbstate_t in codecvt</h3></a><p><b>Section:</b>&nbsp;22.2.1.5.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;6 Sep 2002</p>\n+<a name=\"381\"></a><h3><a name=\"381\">381.&nbsp;detection of invalid mbstate_t in codecvt</a></h3><p><b>Section:</b>&nbsp;22.2.1.5.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.codecvt.virtuals\"> [lib.locale.codecvt.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;6 Sep 2002</p>\n <p>\n All but one codecvt member functions that take a state_type argument\n list as one of their preconditions that the state_type argument have\n@@ -12023,7 +12105,7 @@ <h2>Defect Reports</h2>\n   of the three fstream class template instead.]</i></p>\n \n <hr>\n-<a name=\"410\"></a><h3><a name=\"410\">410.&nbsp;Missing semantics for stack and queue comparison operators</a></h3><p><b>Section:</b>&nbsp;23.2.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.queue\"> [lib.queue]</a>, 23.2.3.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.stack\"> [lib.stack]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Hans Bos&nbsp; <b>Date:</b>&nbsp;7 Jun 2003</p>\n+<a name=\"410\"><h3>410.&nbsp;Missing semantics for stack and queue comparison operators</h3></a><p><b>Section:</b>&nbsp;23.2.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.queue\"> [lib.queue]</a>, 23.2.3.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.stack\"> [lib.stack]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Hans Bos&nbsp; <b>Date:</b>&nbsp;7 Jun 2003</p>\n <p>\n Sections 23.2.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.queue\"> [lib.queue]</a> and 23.2.3.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.stack\"> [lib.stack]</a> list\n comparison operators (==, !=, &lt;, &lt;=, &gt;, =&gt;) for queue and\n@@ -12108,7 +12190,7 @@ <h2>Defect Reports</h2>\n <p><b>Proposed resolution:</b></p>\n <p>Change that sentence to use the correct names.</p>\n <hr>\n-<a name=\"412\"></a><h3><a name=\"412\">412.&nbsp;Typo in 27.4.4.3</a></h3><p><b>Section:</b>&nbsp;27.4.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.iostate.flags\"> [lib.iostate.flags]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;10 Jul 2003</p>\n+<a name=\"412\"><h3>412.&nbsp;Typo in 27.4.4.3</h3></a><p><b>Section:</b>&nbsp;27.4.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.iostate.flags\"> [lib.iostate.flags]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;10 Jul 2003</p>\n <p>\n The Effects clause in 27.4.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.iostate.flags\"> [lib.iostate.flags]</a> paragraph 5 says that the\n function only throws if the respective bits are already set prior to\n@@ -12774,7 +12856,7 @@ <h2>Defect Reports</h2>\n text.]</i></p>\n \n <hr>\n-<a name=\"438\"></a><h3><a name=\"438\">438.&nbsp;Ambiguity in the \"do the right thing\" clause</a></h3><p><b>Section:</b>&nbsp;23.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.sequence.reqmts\"> [lib.sequence.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Howard Hinnant&nbsp; <b>Date:</b>&nbsp;20 Oct 2003</p>\n+<a name=\"438\"><h3>438.&nbsp;Ambiguity in the \"do the right thing\" clause</h3></a><p><b>Section:</b>&nbsp;23.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.sequence.reqmts\"> [lib.sequence.reqmts]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Howard Hinnant&nbsp; <b>Date:</b>&nbsp;20 Oct 2003</p>\n \n <p>Section 23.1.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.sequence.reqmts\"> [lib.sequence.reqmts]</a>, paragraphs 9-11, fixed up the problem\n noticed with statements like:</p>\n@@ -13476,6 +13558,294 @@ <h2>Defect Reports</h2>\n   void open(const char*s,\n             ios_base::openmode mode = ios_base::in|ios_base::out);\n <hr>\n+<a name=\"461\"><h3>461.&nbsp;time_get hard or impossible to implement</h3></a><p><b>Section:</b>&nbsp;22.2.5.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-locales.html#lib.locale.time.get.virtuals\"> [lib.locale.time.get.virtuals]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Bill Plauger&nbsp; <b>Date:</b>&nbsp;23 Mar 2004</p>\n+<p>\n+Template time_get currently contains difficult, if not impossible,\n+requirements for do_date_order, do_get_time, and do_get_date. All require\n+the implementation to scan a field generated by the %x or %X conversion\n+specifier in strftime. Yes, do_date_order can always return no_order, but\n+that doesn't help the other functions. The problem is that %x can be\n+nearly anything, and it can vary widely with locales. It's horribly\n+onerous to have to parse \"third sunday after Michaelmas in the year of\n+our Lord two thousand and three,\" but that's what we currently ask of\n+do_get_date. More practically, it leads some people to think that if\n+%x produces 10.2.04, we should know to look for dots as separators. Still\n+not easy.\n+</p>\n+\n+<p>\n+Note that this is the <i>opposite</i> effect from the intent stated in the\n+footnote earlier in this subclause:\n+</p>\n+\n+<blockquote>\n+\"In other words, user confirmation is required for reliable parsing of\n+user-entered dates and times, but machine-generated formats can be\n+parsed reliably. This allows parsers to be aggressive about interpreting\n+user variations on standard formats.\"\n+</blockquote>\n+\n+<p>\n+We should give both implementers and users an easier and more reliable\n+alternative: provide a (short) list of alternative delimiters and say\n+what the default date order is for no_order. For backward compatibility,\n+and maximum latitude, we can permit an implementation to parse whatever\n+%x or %X generates, but we shouldn't require it.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+\n+<p><b>In the description:</b></p>\n+<pre>iter_type do_get_time(iter_type s, iter_type end, ios_base&amp; str,\n+        ios_base::iostate&amp; err, tm* t) const;\n+</pre>\n+\n+<p>\n+2 Effects: Reads characters starting at suntil it has extracted those\n+struct tm members, and remaining format characters, used by\n+time_put&lt;&gt;::put to produce the format specified by 'X', or until it\n+encounters an error or end of sequence.\n+</p>\n+\n+<p><b>change:</b> 'X'</p>\n+\n+<p><b>to:</b> \"%H:%M:%S\"</p>\n+\n+\n+<p>Change</p>\n+<pre>iter_type do_get_date(iter_type s, iter_type end, ios_base&amp; str,\n+        ios_base::iostate&amp; err, tm* t) const;\n+\n+4 Effects: Reads characters starting at s until it has extracted those\n+struct tm members, and remaining format characters, used by\n+time_put&lt;&gt;::put to produce the format specified by 'x', or until it\n+encounters an error.\n+</pre>\n+\n+<p>to</p>\n+iter_type do_get_date(iter_type s, iter_type end, ios_base&amp; str,\n+        ios_base::iostate&amp; err, tm* t) const;\n+\n+4 Effects: Reads characters starting at s until it has extracted those\n+struct tm members, and remaining format characters, used by\n+time_put&lt;&gt;::put to produce one of the following formats, or until it\n+encounters an error. The format depends on the value returned by\n+date_order() as follows:\n+\n+        date_order()  format\n+\n+        no_order      \"%m/%d/%y\"\n+        dmy           \"%d/%m/%y\"\n+        mdy           \"%m/%d/%y\"\n+        ymd           \"%y/%m/%d\"\n+        ydm           \"%y/%d/%m\"\n+\n+An implementation may also accept additional implementation-defined formats.\n+<pre></pre>\n+\n+<p><i>[Redmond: agreed that this is a real problem.  The solution is\n+  probably to match C99's parsing rules.  Bill provided wording.\n+]</i></p>\n+\n+<hr>\n+<a name=\"464\"><h3>464.&nbsp;Suggestion for new member functions in standard containers</h3></a><p><b>Section:</b>&nbsp;23.2.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector\"> [lib.vector]</a>, 23.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.map\"> [lib.map]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Thorsten Ottosen&nbsp; <b>Date:</b>&nbsp;12 May 2004</p>\n+\n+<p>To add slightly more convenience to vector&lt;T&gt; and map&lt;Key,T&gt; we should consider to add</p>\n+<ol>\n+<li> add vector&lt;T&gt;::data() member (const and non-const version)\n+semantics: if( empty() ) return 0; else return buffer_;</li>\n+<li> add map&lt;Key,T&gt;::at( const Key&amp; k ) member (const and non-const version)\n+<i>semantics</i>: iterator i = find( k ); if( i != end() ) return *i; else throw range_error();</li>\n+</ol>\n+\n+<p>Rationale:</p>\n+\n+<ul>\n+<li>To obtain a pointer to the vector's buffer, one must use either\n+operator[]() (which can give undefined behavior for empty vectors) or\n+at() (which will then throw if the vector is empty). </li>\n+<li>tr1::array&lt;T,sz&gt; already has a data() member</li>\n+<li>e cannot use operator[]() when T is not DefaultDonstructible</li>\n+<li>Neither when the map is const.</li>\n+<li>when we want to make sure we don't add an element accidently</li>\n+<li>when it should be considered an error if a key is not in the map</li>\n+</ul>\n+\n+<p><b>Proposed resolution:</b></p>\n+<p>In 23.2.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector\"> [lib.vector]</a>, add the following to the <tt>vector</tt>\n+  synopsis after \"element access\" and before \"modifiers\":</p>\n+<pre>  // <i>[lib.vector.data] data access</i>\n+  pointer       data();\n+  const_pointer data() const;\n+</pre>\n+\n+<p>Add a new subsection of 23.2.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector\"> [lib.vector]</a>:</p>\n+<blockquote>\n+<p>23.2.4.x <tt>vector</tt> data access</p>\n+<pre>   pointer       data();\n+   const_pointer data() const;\n+</pre>\n+<p><b>Returns:</b> A pointer such that [data(), data() + size()) is a valid\n+   range.  For a non-empty vector, data() == &amp;front().</p>\n+<p><b>Complexity:</b> Constant time.</p>\n+<p><b>Throws:</b> Nothing.</p>\n+</blockquote>\n+\n+<p>In 23.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.map\"> [lib.map]</a>, add the following to the <tt>map</tt>\n+synopsis immediately after the line for operator[]:</p>\n+<pre>  T&amp;       at(const key_type&amp; x);\n+  const T&amp; at(const key_type&amp; x) const;\n+</pre>\n+\n+<p>Add the following to 23.3.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.map.access\"> [lib.map.access]</a>:</p>\n+<blockquote>\n+<pre>  T&amp;       at(const key_type&amp; x);\n+  const T&amp; at(const key_type&amp; x) const;\n+</pre>\n+\n+<p><b>Returns:</b> A reference to the element whose key is equivalent\n+  to x, if such an element is present in the map.</p>\n+<p><b>Throws:</b> <tt>out_of_range</tt> if no such element is present.</p>\n+\n+</blockquote>\n+\n+<p><b>Rationale:</b></p>\n+<p>Neither of these additions provides any new functionality but the\n+  LWG agreed that they are convenient, especially for novices.  The\n+  exception type chosen for <tt>at</tt>, <tt>std::out_of_range</tt>,\n+  was chosen to match <tt>vector::at</tt>.</p>\n+<hr>\n+<a name=\"465\"><h3>465.&nbsp;Contents of &lt;ciso646&gt;</h3></a><p><b>Section:</b>&nbsp;17.4.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.headers\"> [lib.headers]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Steve Clamage&nbsp; <b>Date:</b>&nbsp;3 Jun 2004</p>\n+<p>C header &lt;iso646.h&gt; defines macros for some operators, such as\n+not_eq for !=.</p>\n+\n+<p>Section 17.4.1.2 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-intro.html#lib.headers\"> [lib.headers]</a> \"Headers\" says that except as noted in\n+clauses 18 through 27, the &lt;cname&gt; C++ header contents are the same\n+as the C header &lt;name.h&gt;. In particular, table 12 lists\n+&lt;ciso646&gt; as a C++ header.</p>\n+\n+<p>I don't find any other mention of &lt;ciso646&gt;, or any mention of\n+&lt;iso646.h&gt;, in clauses 17 thorough 27. That implies that the\n+contents of &lt;ciso646&gt; are the same as C header &lt;iso646.h&gt;.</p>\n+\n+<p>Annex C (informative, not normative) in [diff.header.iso646.h] C.2.2.2\n+\"Header &lt;iso646.h&gt;\" says that the alternative tokens are not\n+defined as macros in &lt;ciso646&gt;, but does not mention the contents\n+of &lt;iso646.h&gt;.</p>\n+\n+<p>I don't find any normative text to support C.2.2.2.</p>\n+\n+<p><b>Proposed resolution:</b></p>\n+<p>Add to section 17.4.1.2 Headers [lib.headers] a new paragraph after\n+  paragraph 6 (the one about functions must be functions):</p> \n+\n+<blockquote>\n+<p>Identifiers that are keywords or operators in C++ shall not be defined\n+as macros in C++ standard library headers. \n+[Footnote:In particular, including the standard header &lt;iso646.h&gt;\n+or &lt;ciso646&gt; has no effect. </p>\n+</blockquote>\n+\n+<p><i>[post-Redmond: Steve provided wording.]</i></p>\n+\n+<hr>\n+<a name=\"467\"><h3>467.&nbsp;char_traits::lt(), compare(), and memcmp()</h3></a><p><b>Section:</b>&nbsp;21.1.3.1 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-strings.html#lib.char.traits.specializations.char\"> [lib.char.traits.specializations.char]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;28 Jun 2004</p>\n+\n+<p>\n+Table 37 describes the requirements on Traits::compare() in terms of\n+those on Traits::lt(). 21.1.3.1, p6 requires char_traits&lt;char&gt;::lt()\n+to yield the same result as operator&lt;(char, char).\n+</p>\n+\n+<p>\n+Most, if not all, implementations of char_traits&lt;char&gt;::compare()\n+call memcmp() for efficiency. However, the C standard requires both\n+memcmp() and strcmp() to interpret characters under comparison as\n+unsigned, regardless of the signedness of char. As a result, all\n+these char_traits implementations fail to meet the requirement\n+imposed by Table 37 on compare() when char is signed.\n+</p>\n+\n+\n+<p>Read email thread starting with c++std-lib-13499 for more. </p>\n+<p><b>Proposed resolution:</b></p>\n+\n+\n+<p>Change 21.1.3.1, p6 from</p>\n+<blockquote>\n+    The two-argument members assign, eq, and lt are defined identically\n+    to the built-in operators =, ==, and &lt; respectively.\n+</blockquote>\n+<p>to</p>\n+<blockquote>\n+  The two-argument member assign is defined identically to\n+  the built-in operator =. The two\n+  argument members eq and lt are defined identically to\n+  the built-in operators == and &lt; for type unsigned char.\n+</blockquote>\n+\n+<p><i>[Redmond: The LWG agreed with this general direction, but we\n+  also need to change <tt>eq</tt> to be consistent with this change.\n+  Post-Redmond: Martin provided wording.]</i></p>\n+\n+<hr>\n+<a name=\"468\"><h3>468.&nbsp;unexpected consequences of ios_base::operator void*()</h3></a><p><b>Section:</b>&nbsp;27.4.4.3 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.iostate.flags\"> [lib.iostate.flags]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;28 Jun 2004</p>\n+\n+<p>The program below is required to compile but when run it typically\n+produces unexpected results due to the user-defined conversion from\n+std::cout or any object derived from basic_ios to void*.\n+</p>\n+\n+<pre>    #include &lt;cassert&gt;\n+    #include &lt;iostream&gt;\n+\n+    int main ()\n+    {\n+        assert (std::cin.tie () == std::cout);\n+        // calls std::cout.ios::operator void*()\n+    }\n+</pre>\n+\n+<p><b>Proposed resolution:</b></p>\n+\n+<p>\n+Replace std::basic_ios&lt;charT, traits&gt;::operator void*() with another\n+conversion operator to some unspecified type that is guaranteed not\n+to be convertible to any other type except for bool (a pointer-to-member\n+might be one such suitable type). In addition, make it clear that the\n+pointer type need not be a pointer to a complete type and when non-null,\n+the value need not be valid.\n+</p>\n+\n+<p>Specifically, change in [lib.ios] the signature of</p>\n+<pre>    operator void*() const;\n+</pre>\n+<p>to</p>\n+<pre>    operator unspecified-bool-type() const;\n+</pre>\n+<p>and change [lib.iostate.flags], p1 from</p>\n+<pre>    operator void*() const;\n+</pre>\n+<p>to</p>\n+<pre>operator unspecified-bool-type() const;\n+\n+     -1- Returns: if fail() then a value that will evaluate false in a\n+      boolean context; otherwise a value that will evaluate true in a\n+      boolean context. The value type returned shall not be\n+      convertible to int.\n+\n+     -2- [Note: This conversion can be used in contexts where a bool\n+      is expected (e.g., an if condition); however, implicit\n+      conversions (e.g., to int) that can occur with bool are not\n+      allowed, eliminating some sources of user error. One possible\n+      implementation choice for this type is pointer-to-member.  - end\n+      note]\n+</pre>\n+\n+<p><i>[Redmond: 5-4 straw poll in favor of doing this.]</i></p>\n+<p><i>[Lillehammer: Doug provided revised wording for\n+  \"unspecified-bool-type\".]</i></p> \n+\n+<hr>\n <a name=\"469\"><h3>469.&nbsp;vector&lt;bool&gt; ill-formed relational operators</h3></a><p><b>Section:</b>&nbsp;23.2.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector.bool\"> [lib.vector.bool]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;28 Jun 2004</p>\n \n <p>\n@@ -13491,5 +13861,30 @@ <h2>Defect Reports</h2>\n Remove all overloads of overloads of relational operators for\n vector&lt;bool&gt; from [lib.vector.bool].\n </p>\n+<hr>\n+<a name=\"474\"><h3>474.&nbsp;confusing Footnote 297</h3></a><p><b>Section:</b>&nbsp;27.6.2.5.4 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-iostreams.html#lib.ostream.inserters.character\"> [lib.ostream.inserters.character]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;Martin Sebor&nbsp; <b>Date:</b>&nbsp;1 Jul 2004</p>\n+\n+<p>\n+I think Footnote 297 is confused. The paragraph it applies to seems\n+quite clear in that widen() is only called if the object is not a char\n+stream (i.e., not basic_ostream&lt;char&gt;), so it's irrelevant what the\n+value of widen(c) is otherwise.\n+</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>\n+I propose to strike the Footnote.\n+</p>\n+<hr>\n+<a name=\"496\"><h3>496.&nbsp;Illegal use of \"T\" in vector&lt;bool&gt;</h3></a><p><b>Section:</b>&nbsp;23.2.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector.bool\"> [lib.vector.bool]</a>&nbsp; <b>Status:</b>&nbsp;<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#WP\">WP</a>&nbsp; <b>Submitter:</b>&nbsp;richard@ex-parrot.com&nbsp; <b>Date:</b>&nbsp;10 Feb 2005</p>\n+<p>\n+In the synopsis of the std::vector&lt;bool&gt; specialisation in 23.2.5 <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lib-containers.html#lib.vector.bool\"> [lib.vector.bool]</a>,\n+the non-template assign() function has the signature</p>\n+\n+<pre>  void assign( size_type n, const T&amp; t );\n+</pre>\n+\n+<p>The type, T, is not defined in this context.</p>\n+<p><b>Proposed resolution:</b></p>\n+<p>Replace \"T\" with \"value_type\".</p>\n <p>----- End of document -----</p>\n </body></html>\n\\ No newline at end of file"}]}