{"sha": "df704591a2cad3526456aa77be403d21c822724d", "node_id": "C_kwDOANBUbNoAKGRmNzA0NTkxYTJjYWQzNTI2NDU2YWE3N2JlNDAzZDIxYzgyMjcyNGQ", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-12-07T15:59:48Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-12-08T18:20:15Z"}, "message": "Use -fopt-info in unswitch pass.\n\ngcc/ChangeLog:\n\n\t* profile-count.c (profile_count::dump): Add function\n\tthat can dump to a provided buffer.\n\t(profile_probability::dump): Likewise.\n\t* profile-count.h: Likewise.\n\t* tree-ssa-loop-unswitch.c (tree_unswitch_single_loop):\n\tUse dump_printf_loc infrastructure.\n\t(tree_unswitch_outer_loop): Likewise.\n\t(find_loop_guard): Likewise.\n\t(hoist_guard): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/loop-unswitch-1.c: Adjust test-case based on\n\tdump_printf_loc.\n\t* gcc.dg/loop-unswitch-2.c: Likewise.\n\t* gcc.dg/loop-unswitch-3.c: Likewise.\n\t* gcc.dg/loop-unswitch-4.c: Likewise.\n\t* gcc.dg/loop-unswitch-5.c: Likewise.", "tree": {"sha": "226d3cfe0bb0322a14650b5381c7e69c22f01826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/226d3cfe0bb0322a14650b5381c7e69c22f01826"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df704591a2cad3526456aa77be403d21c822724d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df704591a2cad3526456aa77be403d21c822724d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df704591a2cad3526456aa77be403d21c822724d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df704591a2cad3526456aa77be403d21c822724d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7fac1e1a5858abc9737518ddbdac780fd2ad8b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7fac1e1a5858abc9737518ddbdac780fd2ad8b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7fac1e1a5858abc9737518ddbdac780fd2ad8b8"}], "stats": {"total": 202, "additions": 126, "deletions": 76}, "files": [{"sha": "c04b4fe823d8e816c98dc445ae9c3688bb04d941", "filename": "gcc/profile-count.c", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df704591a2cad3526456aa77be403d21c822724d/gcc%2Fprofile-count.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df704591a2cad3526456aa77be403d21c822724d/gcc%2Fprofile-count.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.c?ref=df704591a2cad3526456aa77be403d21c822724d", "patch": "@@ -84,18 +84,28 @@ const char *profile_quality_display_names[] =\n   \"precise\"\n };\n \n-/* Dump THIS to F.  */\n+/* Dump THIS to BUFFER.  */\n \n void\n-profile_count::dump (FILE *f) const\n+profile_count::dump (char *buffer) const\n {\n   if (!initialized_p ())\n-    fprintf (f, \"uninitialized\");\n+    sprintf (buffer, \"uninitialized\");\n   else\n-    fprintf (f, \"%\" PRId64 \" (%s)\", m_val,\n+    sprintf (buffer, \"%\" PRId64 \" (%s)\", m_val,\n \t     profile_quality_display_names[m_quality]);\n }\n \n+/* Dump THIS to F.  */\n+\n+void\n+profile_count::dump (FILE *f) const\n+{\n+  char buffer[64];\n+  dump (buffer);\n+  fputs (buffer, f);\n+}\n+\n /* Dump THIS to stderr.  */\n \n void\n@@ -151,32 +161,44 @@ profile_count::stream_out (struct lto_output_stream *ob)\n   streamer_write_uhwi_stream (ob, m_quality);\n }\n \n-/* Dump THIS to F.  */\n+\n+/* Output THIS to BUFFER.  */\n \n void\n-profile_probability::dump (FILE *f) const\n+profile_probability::dump (char *buffer) const\n {\n   if (!initialized_p ())\n-    fprintf (f, \"uninitialized\");\n+    sprintf (buffer, \"uninitialized\");\n   else\n     {\n       /* Make difference between 0.00 as a roundoff error and actual 0.\n \t Similarly for 1.  */\n       if (m_val == 0)\n-        fprintf (f, \"never\");\n+\tbuffer += sprintf (buffer, \"never\");\n       else if (m_val == max_probability)\n-        fprintf (f, \"always\");\n+\tbuffer += sprintf (buffer, \"always\");\n       else\n-        fprintf (f, \"%3.1f%%\", (double)m_val * 100 / max_probability);\n+\tbuffer += sprintf (buffer, \"%3.1f%%\", (double)m_val * 100 / max_probability);\n+\n       if (m_quality == ADJUSTED)\n-\tfprintf (f, \" (adjusted)\");\n+\tsprintf (buffer, \" (adjusted)\");\n       else if (m_quality == AFDO)\n-\tfprintf (f, \" (auto FDO)\");\n+\tsprintf (buffer, \" (auto FDO)\");\n       else if (m_quality == GUESSED)\n-\tfprintf (f, \" (guessed)\");\n+\tsprintf (buffer, \" (guessed)\");\n     }\n }\n \n+/* Dump THIS to F.  */\n+\n+void\n+profile_probability::dump (FILE *f) const\n+{\n+  char buffer[64];\n+  dump (buffer);\n+  fputs (buffer, f);\n+}\n+\n /* Dump THIS to stderr.  */\n \n void"}, {"sha": "f86091f23a86930803d1b888fe64e13cdaa52e07", "filename": "gcc/profile-count.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df704591a2cad3526456aa77be403d21c822724d/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df704591a2cad3526456aa77be403d21c822724d/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=df704591a2cad3526456aa77be403d21c822724d", "patch": "@@ -609,6 +609,9 @@ class GTY((user)) profile_probability\n   /* Output THIS to F.  */\n   void dump (FILE *f) const;\n \n+  /* Output THIS to BUFFER.  */\n+  void dump (char *buffer) const;\n+\n   /* Print THIS to stderr.  */\n   void debug () const;\n \n@@ -1208,6 +1211,9 @@ struct GTY(()) profile_count\n   /* Output THIS to F.  */\n   void dump (FILE *f) const;\n \n+  /* Output THIS to BUFFER.  */\n+  void dump (char *buffer) const;\n+\n   /* Print THIS to stderr.  */\n   void debug () const;\n "}, {"sha": "f9d628df5104fbd8ce3eda55aac582c0a93a29df", "filename": "gcc/testsuite/gcc.dg/loop-unswitch-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df704591a2cad3526456aa77be403d21c822724d/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df704591a2cad3526456aa77be403d21c822724d/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-1.c?ref=df704591a2cad3526456aa77be403d21c822724d", "patch": "@@ -1,6 +1,6 @@\n /* For PR rtl-optimization/27735  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -funswitch-loops -fdump-tree-unswitch-details -fno-finite-loops\" } */\n+/* { dg-options \"-O2 -funswitch-loops -fdump-tree-unswitch-all -fno-finite-loops\" } */\n \n void set_color(void);\n void xml_colorize_line(unsigned int *p, int state)\n@@ -33,4 +33,4 @@ parse_tag: ;\n }\n \n /* Test that we actually unswitched something.  */\n-/* { dg-final { scan-tree-dump \";; Unswitching loop\" \"unswitch\" } } */\n+/* { dg-final { scan-tree-dump \"Unswitching loop\" \"unswitch\" } } */"}, {"sha": "e92ae553516a12186020f4228786fbffccdf14a4", "filename": "gcc/testsuite/gcc.dg/loop-unswitch-2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df704591a2cad3526456aa77be403d21c822724d/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df704591a2cad3526456aa77be403d21c822724d/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-2.c?ref=df704591a2cad3526456aa77be403d21c822724d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -funswitch-loops -fdump-tree-unswitch-details -fno-thread-jumps\" } */\n+/* { dg-options \"-O2 -funswitch-loops -fdump-tree-unswitch-all -fno-thread-jumps\" } */\n \n void foo (float **a, float **b, float *c, int n, int m, int l)\n {\n@@ -11,6 +11,5 @@ void foo (float **a, float **b, float *c, int n, int m, int l)\n \tc[i] += a[i][k] * b[k][j];\n }\n \n-/* { dg-final { scan-tree-dump-times \"guard hoisted\" 3 \"unswitch\" } } */\n+/* { dg-final { scan-tree-dump-times \"Guard hoisted\" 3 \"unswitch\" } } */\n /* { dg-final { scan-tree-dump-not \"Invalid sum\" \"unswitch\" } } */\n-"}, {"sha": "31a90ef23eb48d303b9c9dead0c2a2fa8bd1baa1", "filename": "gcc/testsuite/gcc.dg/loop-unswitch-3.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df704591a2cad3526456aa77be403d21c822724d/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df704591a2cad3526456aa77be403d21c822724d/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-3.c?ref=df704591a2cad3526456aa77be403d21c822724d", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -funswitch-loops -fdump-tree-unswitch-details\" } */\n+/* { dg-options \"-O2 -funswitch-loops -fdump-tree-unswitch-all\" } */\n \n #include <stdlib.h>\n #define N 32\n@@ -21,7 +21,4 @@ float *foo(int ustride, int size, float *src)\n    return buffer;\n }\n \n-/* { dg-final { scan-tree-dump-times \"guard hoisted\" 1 \"unswitch\" } } */\n-/* { dg-final { scan-tree-dump-not \"Invalid sum\" \"unswitch\" } } */\n-\n-\n+/* { dg-final { scan-tree-dump-times \"Guard hoisted\" 1 \"unswitch\" } } */"}, {"sha": "05d0fe803210b8bf88009b3f69c8167c6d2e4d6c", "filename": "gcc/testsuite/gcc.dg/loop-unswitch-4.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df704591a2cad3526456aa77be403d21c822724d/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df704591a2cad3526456aa77be403d21c822724d/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-4.c?ref=df704591a2cad3526456aa77be403d21c822724d", "patch": "@@ -49,4 +49,3 @@ int main()\n  \n   return 0;\n }\n-"}, {"sha": "77880005301eacf6663e61182e8b0d128f86f36d", "filename": "gcc/testsuite/gcc.dg/loop-unswitch-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df704591a2cad3526456aa77be403d21c822724d/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df704591a2cad3526456aa77be403d21c822724d/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-unswitch-5.c?ref=df704591a2cad3526456aa77be403d21c822724d", "patch": "@@ -1,6 +1,6 @@\n /* PR middle-end/71691 */\n /* { dg-do run } */\n-/* { dg-options \"-fno-tree-vrp -O2 -funswitch-loops -fdump-tree-unswitch-details\" } */\n+/* { dg-options \"-fno-tree-vrp -O2 -funswitch-loops\" } */\n \n /* Note: The -fno-tree-vrp above is only there to avoid VRP papering\n    over the problem.  */"}, {"sha": "9fae549bf714ba4b800c95d442a34e30811527db", "filename": "gcc/tree-ssa-loop-unswitch.c", "status": "modified", "additions": 78, "deletions": 51, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df704591a2cad3526456aa77be403d21c822724d/gcc%2Ftree-ssa-loop-unswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df704591a2cad3526456aa77be403d21c822724d/gcc%2Ftree-ssa-loop-unswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-unswitch.c?ref=df704591a2cad3526456aa77be403d21c822724d", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-iterator.h\"\n #include \"cfghooks.h\"\n #include \"tree-ssa-loop-manip.h\"\n+#include \"tree-vectorizer.h\"\n \n /* This file implements the loop unswitching, i.e. transformation of loops like\n \n@@ -273,23 +274,27 @@ tree_unswitch_single_loop (class loop *loop, int num)\n   bool changed = false;\n   HOST_WIDE_INT iterations;\n \n+  dump_user_location_t loc = find_loop_location (loop);\n+\n   /* Perform initial tests if unswitch is eligible.  */\n   if (num == 0)\n     {\n       /* Do not unswitch in cold regions. */\n       if (optimize_loop_for_size_p (loop))\n \t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \";; Not unswitching cold loops\\n\");\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_NOTE, loc,\n+\t\t\t     \"Not unswitching cold loops\\n\");\n \t  return false;\n \t}\n \n       /* The loop should not be too large, to limit code growth. */\n       if (tree_num_loop_insns (loop, &eni_size_weights)\n \t  > (unsigned) param_max_unswitch_insns)\n \t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \";; Not unswitching, loop too big\\n\");\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_NOTE, loc,\n+\t\t\t     \"Not unswitching, loop too big\\n\");\n \t  return false;\n \t}\n \n@@ -300,9 +305,10 @@ tree_unswitch_single_loop (class loop *loop, int num)\n         iterations = likely_max_loop_iterations_int (loop);\n       if (iterations >= 0 && iterations <= 1)\n \t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \";; Not unswitching, loop is not expected\"\n-\t\t     \" to iterate\\n\");\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_NOTE, loc,\n+\t\t\t     \"Not unswitching, loop is not expected\"\n+\t\t\t     \" to iterate\\n\");\n \t  return false;\n \t}\n     }\n@@ -320,10 +326,10 @@ tree_unswitch_single_loop (class loop *loop, int num)\n \n       if (i == loop->num_nodes)\n \t{\n-\t  if (dump_file\n-\t      && num > param_max_unswitch_level\n-\t      && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \";; Not unswitching anymore, hit max level\\n\");\n+\t  if (dump_enabled_p ()\n+\t      && num > param_max_unswitch_level)\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, loc,\n+\t\t\t     \"Not unswitching anymore, hit max level\\n\");\n \n \t  if (found == loop->num_nodes)\n \t    {\n@@ -445,8 +451,10 @@ tree_unswitch_single_loop (class loop *loop, int num)\n \t}\n     }\n \n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    fprintf (dump_file, \";; Unswitching loop\\n\");\n+  if (dump_enabled_p ())\n+    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+\t\t     \"Unswitching loop on condition: %G\\n\",\n+\t\t     last_stmt (bbs[found]));\n \n   initialize_original_copy_tables ();\n   /* Unswitch the loop on this condition.  */\n@@ -520,9 +528,10 @@ tree_unswitch_outer_loop (class loop *loop)\n     iterations = likely_max_loop_iterations_int (loop);\n   if (iterations >= 0 && iterations <= 1)\n     {\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\tfprintf (dump_file, \";; Not unswitching, loop is not expected\"\n-\t\t \" to iterate\\n\");\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, find_loop_location (loop),\n+\t\t\t \"Not unswitching, loop is not expected\"\n+\t\t\t \" to iterate\\n\");\n       return false;\n     }\n \n@@ -623,26 +632,31 @@ find_loop_guard (class loop *loop)\n   else\n     return NULL;\n \n+  dump_user_location_t loc = find_loop_location (loop);\n+\n   /* Guard edge must skip inner loop.  */\n   if (!dominated_by_p (CDI_DOMINATORS, loop->inner->header,\n       guard_edge == fe ? te->dest : fe->dest))\n     {\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\tfprintf (dump_file, \"Guard edge %d --> %d is not around the loop!\\n\",\n-\t\t guard_edge->src->index, guard_edge->dest->index);\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, loc,\n+\t\t\t \"Guard edge %d --> %d is not around the loop!\\n\",\n+\t\t\t guard_edge->src->index, guard_edge->dest->index);\n       return NULL;\n     }\n   if (guard_edge->dest == loop->latch)\n     {\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\tfprintf (dump_file, \"Guard edge destination is loop latch.\\n\");\n+      if (dump_enabled_p ())\n+\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, loc,\n+\t\t\t \"Guard edge destination is loop latch.\\n\");\n       return NULL;\n     }\n \n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    fprintf (dump_file,\n-\t     \"Considering guard %d -> %d in loop %d\\n\",\n-\t     guard_edge->src->index, guard_edge->dest->index, loop->num);\n+  if (dump_enabled_p ())\n+    dump_printf_loc (MSG_NOTE, loc,\n+\t\t     \"Considering guard %d -> %d in loop %d\\n\",\n+\t\t     guard_edge->src->index, guard_edge->dest->index,\n+\t\t     loop->num);\n   /* Check if condition operands do not have definitions inside loop since\n      any bb copying is not performed.  */\n   FOR_EACH_SSA_TREE_OPERAND (use, cond, iter, SSA_OP_USE)\n@@ -652,9 +666,9 @@ find_loop_guard (class loop *loop)\n       if (def_bb\n           && flow_bb_inside_loop_p (loop, def_bb))\n \t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \"  guard operands have definitions\"\n-\t\t\t\t\" inside loop\\n\");\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_NOTE, loc, \"guard operands have definitions\"\n+\t\t\t     \" inside loop\\n\");\n \t  return NULL;\n \t}\n     }\n@@ -667,23 +681,26 @@ find_loop_guard (class loop *loop)\n \tcontinue;\n       if (bb->flags & BB_IRREDUCIBLE_LOOP)\n \t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \"Block %d is marked as irreducible in loop\\n\",\n-\t\t      bb->index);\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, loc,\n+\t\t\t     \"Block %d is marked as irreducible in loop\\n\",\n+\t\t\t     bb->index);\n \t  guard_edge = NULL;\n \t  goto end;\n \t}\n       if (!empty_bb_without_guard_p (loop, bb))\n \t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \"  block %d has side effects\\n\", bb->index);\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, loc,\n+\t\t\t     \"Block %d has side effects\\n\", bb->index);\n \t  guard_edge = NULL;\n \t  goto end;\n \t}\n     }\n \n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    fprintf (dump_file, \"  suitable to hoist\\n\");\n+  if (dump_enabled_p ())\n+    dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+\t\t     \"suitable to hoist\\n\");\n end:\n   if (body)\n     free (body);\n@@ -822,13 +839,19 @@ hoist_guard (class loop *loop, edge guard)\n   update_stmt (cond_stmt);\n   /* Create new loop pre-header.  */\n   e = split_block (pre_header, last_stmt (pre_header));\n-  if (dump_file && (dump_flags & TDF_DETAILS))\n+\n+  dump_user_location_t loc = find_loop_location (loop);\n+\n+  if (dump_enabled_p ())\n     {\n-      fprintf (dump_file, \"  Moving guard %i->%i (prob \",\n-\t       guard->src->index, guard->dest->index);\n-      guard->probability.dump (dump_file);\n-      fprintf (dump_file, \") to bb %i, new preheader is %i\\n\",\n-\t       e->src->index, e->dest->index);\n+      char buffer[64];\n+      guard->probability.dump (buffer);\n+\n+      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+\t\t       \"Moving guard %i->%i (prob %s) to bb %i, \"\n+\t\t       \"new preheader is %i\\n\",\n+\t\t       guard->src->index, guard->dest->index,\n+\t\t       buffer, e->src->index, e->dest->index);\n     }\n \n   gcc_assert (loop_preheader_edge (loop)->src == e->dest);\n@@ -860,11 +883,14 @@ hoist_guard (class loop *loop, edge guard)\n       fprintf (dump_file, \"  Capping count; expect profile inconsistency\\n\");\n       skip_count = e->count ();\n     }\n-  if (dump_file && (dump_flags & TDF_DETAILS))\n+  if (dump_enabled_p ())\n     {\n-      fprintf (dump_file, \"  Estimated probability of skipping loop is \");\n-      new_edge->probability.dump (dump_file);\n-      fprintf (dump_file, \"\\n\");\n+      char buffer[64];\n+      new_edge->probability.dump (buffer);\n+\n+      dump_printf_loc (MSG_NOTE, loc,\n+\t\t       \"Estimated probability of skipping loop is %s\\n\",\n+\t\t       buffer);\n     }\n \n   /* Update profile after the transform:\n@@ -883,15 +909,15 @@ hoist_guard (class loop *loop, edge guard)\n      where profile does not change.  */\n   basic_block *body = get_loop_body (loop);\n \n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    fprintf (dump_file, \"  Scaling nonguarded BBs in loop:\");\n   for (unsigned int i = 0; i < loop->num_nodes; i++)\n     {\n       basic_block bb = body[i];\n       if (!dominated_by_p (CDI_DOMINATORS, bb, not_guard->dest))\n \t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \" %i\", bb->index);\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_NOTE, loc,\n+\t\t\t     \"Scaling nonguarded BBs in loop: %i\\n\",\n+\t\t\t     bb->index);\n \t  if (e->probability.initialized_p ())\n             scale_bbs_frequencies (&bb, 1, e->probability);\n   \t}\n@@ -922,8 +948,9 @@ hoist_guard (class loop *loop, edge guard)\n \t}\n     }\n \n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    fprintf (dump_file, \"\\n  guard hoisted.\\n\");\n+  if (dump_enabled_p ())\n+    dump_printf_loc (MSG_MISSED_OPTIMIZATION, loc,\n+\t\t     \"Guard hoisted\\n\");\n \n   free (body);\n }"}]}