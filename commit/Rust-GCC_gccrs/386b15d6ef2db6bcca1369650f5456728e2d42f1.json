{"sha": "386b15d6ef2db6bcca1369650f5456728e2d42f1", "node_id": "C_kwDOANBUbNoAKDM4NmIxNWQ2ZWYyZGI2YmNjYTEzNjk2NTBmNTQ1NjcyOGUyZDQyZjE", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-13T18:11:41Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-13T18:12:41Z"}, "message": "i386: Cleanup V2QI arithmetic instructions\n\n2022-01-13  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\t* config/i386/mmx.md (negv2qi): Disparage GPR alternative a bit.\n\tDisable for TARGET_PARTIAL_REG_STALL unless optimizing for size.\n\t(negv2qi splitters): Use lowpart_subreg instead of\n\tgen_lowpart to create subreg.\n\t(<plusminus:insn>v2qi3): Disparage GPR alternative a bit.\n\tDisable for TARGET_PARTIAL_REG_STALL unless optimizing for size.\n\t(<plusminus:insn>v2qi3 splitters): Use lowpart_subreg instead of\n\tgen_lowpart to create subreg.\n\t* config/i386/i386.md (*subqi_ext<mode>_2): Move.", "tree": {"sha": "aee663fbd3de13cd62f3d2a387a936612f40f2f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aee663fbd3de13cd62f3d2a387a936612f40f2f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/386b15d6ef2db6bcca1369650f5456728e2d42f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386b15d6ef2db6bcca1369650f5456728e2d42f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/386b15d6ef2db6bcca1369650f5456728e2d42f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386b15d6ef2db6bcca1369650f5456728e2d42f1/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70ba28304b7ff91761db248bc8354eda8e9a4796", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ba28304b7ff91761db248bc8354eda8e9a4796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70ba28304b7ff91761db248bc8354eda8e9a4796"}], "stats": {"total": 104, "additions": 52, "deletions": 52}, "files": [{"sha": "bcaaa4993b1d242543f883fd35138342a673c544", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b15d6ef2db6bcca1369650f5456728e2d42f1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b15d6ef2db6bcca1369650f5456728e2d42f1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=386b15d6ef2db6bcca1369650f5456728e2d42f1", "patch": "@@ -6905,6 +6905,30 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"*subqi_ext<mode>_2\"\n+  [(set (zero_extract:SWI248\n+\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (const_int 8)\n+\t  (const_int 8))\n+\t(subreg:SWI248\n+\t  (minus:QI\n+\t    (subreg:QI\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 1 \"register_operand\" \"0\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)\n+\t    (subreg:QI\n+\t      (zero_extract:SWI248\n+\t        (match_operand:SWI248 2 \"register_operand\" \"Q\")\n+\t\t(const_int 8)\n+\t\t(const_int 8)) 0)) 0))\n+  (clobber (reg:CC FLAGS_REG))]\n+  \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n+   rtx_equal_p (operands[0], operands[1])\"\n+  \"sub{b}\\t{%h2, %h0|%h0, %h2}\"\n+  [(set_attr \"type\" \"alu\")\n+   (set_attr \"mode\" \"QI\")])\n+\n ;; Subtract with jump on overflow.\n (define_expand \"subv<mode>4\"\n   [(parallel [(set (reg:CCO FLAGS_REG)\n@@ -6932,30 +6956,6 @@\n     operands[4] = gen_rtx_SIGN_EXTEND (<DPWI>mode, operands[2]);\n })\n \n-(define_insn \"*subqi_ext<mode>_2\"\n-  [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n-\t  (const_int 8)\n-\t  (const_int 8))\n-\t(subreg:SWI248\n-\t  (minus:QI\n-\t    (subreg:QI\n-\t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 1 \"register_operand\" \"0\")\n-\t\t(const_int 8)\n-\t\t(const_int 8)) 0)\n-\t    (subreg:QI\n-\t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 2 \"register_operand\" \"Q\")\n-\t\t(const_int 8)\n-\t\t(const_int 8)) 0)) 0))\n-  (clobber (reg:CC FLAGS_REG))]\n-  \"/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n-   rtx_equal_p (operands[0], operands[1])\"\n-  \"sub{b}\\t{%h2, %h0|%h0, %h2}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"mode\" \"QI\")])\n-\n (define_insn \"*subv<mode>4\"\n   [(set (reg:CCO FLAGS_REG)\n \t(eq:CCO (minus:<DWI>"}, {"sha": "3d99a5e851bdf6a2da80c70efc6d560dd79bd72f", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/386b15d6ef2db6bcca1369650f5456728e2d42f1/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/386b15d6ef2db6bcca1369650f5456728e2d42f1/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=386b15d6ef2db6bcca1369650f5456728e2d42f1", "patch": "@@ -1633,12 +1633,20 @@\n   \"TARGET_MMX_WITH_SSE\"\n   \"operands[2] = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\")\n \n+(define_expand \"neg<mode>2\"\n+  [(set (match_operand:VI_32 0 \"register_operand\")\n+\t(minus:VI_32\n+\t  (match_dup 2)\n+\t  (match_operand:VI_32 1 \"register_operand\")))]\n+  \"TARGET_SSE2\"\n+  \"operands[2] = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\")\n+\n (define_insn \"negv2qi2\"\n   [(set (match_operand:V2QI 0 \"register_operand\" \"=?Q,&Yw\")\n         (neg:V2QI\n \t  (match_operand:V2QI 1 \"register_operand\" \"0,Yw\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n+  \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n   \"#\"\n   [(set_attr \"isa\" \"*,sse2\")\n    (set_attr \"type\" \"multi\")\n@@ -1664,10 +1672,10 @@\n \t\t\t\t  (const_int 8)) 0)) 0))\n       (clobber (reg:CC FLAGS_REG))])]\n {\n-  operands[3] = gen_lowpart (HImode, operands[1]);\n-  operands[2] = gen_lowpart (HImode, operands[0]);\n-  operands[1] = gen_lowpart (QImode, operands[1]);\n-  operands[0] = gen_lowpart (QImode, operands[0]);\n+  operands[3] = lowpart_subreg (HImode, operands[1], V2QImode);\n+  operands[2] = lowpart_subreg (HImode, operands[0], V2QImode);\n+  operands[1] = lowpart_subreg (QImode, operands[1], V2QImode);\n+  operands[0] = lowpart_subreg (QImode, operands[0], V2QImode);\n })\n \n (define_split\n@@ -1678,11 +1686,11 @@\n   \"reload_completed\"\n   [(set (match_dup 0) (match_dup 2))\n    (set (match_dup 0)\n-\t(minus:V4QI (match_dup 0) (match_dup 1)))]\n+\t(minus:V16QI (match_dup 0) (match_dup 1)))]\n {\n-  operands[2] = CONST0_RTX (V4QImode);\n-  operands[1] = gen_lowpart (V4QImode, operands[1]);\n-  operands[0] = gen_lowpart (V4QImode, operands[0]);\n+  operands[2] = CONST0_RTX (V16QImode);\n+  operands[1] = lowpart_subreg (V16QImode, operands[1], V2QImode);\n+  operands[0] = lowpart_subreg (V16QImode, operands[0], V2QImode);\n })\n \n (define_expand \"mmx_<insn><mode>3\"\n@@ -1718,14 +1726,6 @@\n    (set_attr \"type\" \"mmxadd,sseadd,sseadd\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n-(define_expand \"neg<mode>2\"\n-  [(set (match_operand:VI_32 0 \"register_operand\")\n-\t(minus:VI_32\n-\t  (match_dup 2)\n-\t  (match_operand:VI_32 1 \"register_operand\")))]\n-  \"TARGET_SSE2\"\n-  \"operands[2] = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\")\n-\n (define_insn \"<insn><mode>3\"\n   [(set (match_operand:VI_32 0 \"register_operand\" \"=x,Yw\")\n         (plusminus:VI_32\n@@ -1745,7 +1745,7 @@\n \t  (match_operand:V2QI 1 \"register_operand\" \"<comm>0,0,Yw\")\n \t  (match_operand:V2QI 2 \"register_operand\" \"Q,x,Yw\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n+  \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n   \"#\"\n   [(set_attr \"isa\" \"*,sse2_noavx,avx\")\n    (set_attr \"type\" \"multi,sseadd,sseadd\")\n@@ -1776,12 +1776,12 @@\n \t\t\t\t  (const_int 8)) 0)) 0))\n       (clobber (reg:CC FLAGS_REG))])]\n {\n-  operands[5] = gen_lowpart (HImode, operands[2]);\n-  operands[4] = gen_lowpart (HImode, operands[1]);\n-  operands[3] = gen_lowpart (HImode, operands[0]);\n-  operands[2] = gen_lowpart (QImode, operands[2]);\n-  operands[1] = gen_lowpart (QImode, operands[1]);\n-  operands[0] = gen_lowpart (QImode, operands[0]);\n+  operands[5] = lowpart_subreg (HImode, operands[2], V2QImode);\n+  operands[4] = lowpart_subreg (HImode, operands[1], V2QImode);\n+  operands[3] = lowpart_subreg (HImode, operands[0], V2QImode);\n+  operands[2] = lowpart_subreg (QImode, operands[2], V2QImode);\n+  operands[1] = lowpart_subreg (QImode, operands[1], V2QImode);\n+  operands[0] = lowpart_subreg (QImode, operands[0], V2QImode);\n })\n \n (define_split\n@@ -1792,11 +1792,11 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_SSE2 && reload_completed\"\n   [(set (match_dup 0)\n-        (plusminus:V4QI (match_dup 1) (match_dup 2)))]\n+        (plusminus:V16QI (match_dup 1) (match_dup 2)))]\n {\n-  operands[2] = gen_lowpart (V4QImode, operands[2]);\n-  operands[1] = gen_lowpart (V4QImode, operands[1]);\n-  operands[0] = gen_lowpart (V4QImode, operands[0]);\n+  operands[2] = lowpart_subreg (V16QImode, operands[2], V2QImode);\n+  operands[1] = lowpart_subreg (V16QImode, operands[1], V2QImode);\n+  operands[0] = lowpart_subreg (V16QImode, operands[0], V2QImode);\n })\n \n (define_expand \"mmx_<insn><mode>3\""}]}