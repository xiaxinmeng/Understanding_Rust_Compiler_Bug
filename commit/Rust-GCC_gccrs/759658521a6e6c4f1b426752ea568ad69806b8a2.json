{"sha": "759658521a6e6c4f1b426752ea568ad69806b8a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU5NjU4NTIxYTZlNmM0ZjFiNDI2NzUyZWE1NjhhZDY5ODA2YjhhMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-12T10:56:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-12T10:56:02Z"}, "message": "[multiple changes]\n\n2012-07-12  Vasiliy Fofanov  <fofanov@adacore.com>\n\n\t* vms_data.ads: Add VMS qualifiers for -gnatn1/2 switches.\n\n2012-07-12  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch5.adb, exp_pakd.adb, rtsfind.ads, freeze.adb, sem_util.adb,\n\tsem_util.ads, exp_aggr.adb\n\t(Exp_Aggr.Packed_Array_Aggregate_Handled): Simplify processing\n\tfor reverse storage order aggregate.\n\t(Exp_Pakd.Byte_Swap): New utility routine used by...\n\t(Exp_Pakd.Expand_Bit_Packed_Element_Set,\n\tExpand_Packed_Element_Reference): For the case of a free-standing\n\tpacked array with reverse storage order, perform byte swapping.\n\t(Rtsfind): Make new entities RE_Bswap_{16,32,64} available.\n\t(Freeze.Check_Component_Storage_Order): New utility routine\n\tto enforce legality rules for nested composite types whose\n\tenclosing composite has an explicitly defined Scalar_Storage_Order\n\tattribute.\n\t(Sem_Util.In_Reverse_Storage_Order_Object): Renamed from\n\tSem_Util.In_Reverse_Storage_Order_Record, as SSO now applies to\n\tarray types as well.\n\t(Exp_Ch5.Expand_Assign_Array): Remove now unnecessary kludge\n\tfor change of scalar storage order in assignments. The Lhs and\n\tRhs now always have the same scalar storage order.\n\n2012-07-12  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* g-debpoo.adb (Allocate): Add local constant\n\tNo_Element. Initialize the allocated memory chunk to No_Element.\n\n2012-07-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Validate_Derived_Type_Instance): Handle properly\n\tthe case of an instance of a child unit where a formal derived\n\ttype DT is an extension of a type T declared in a parent unit,\n\tand the actual in the instance of the child is the type T declared\n\tin the parent instance, and that actual is not a derived type.\n\n2012-07-12  Eric Botcazou  <ebotcazou@adacore.com>\n\t    Tristan Gingold  <gingold@adacore.com>\n\n\t* system-hpux-ia64.ads: Enable ZCX by default.\n\t* gcc-interface/Makefile.in: Use alternate stack on ia64-hpux.\n\tChange soext to .so.\n\nFrom-SVN: r189439", "tree": {"sha": "3f4ee2a3f34ece8b71fc886093da3456a5ae2ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f4ee2a3f34ece8b71fc886093da3456a5ae2ad1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/759658521a6e6c4f1b426752ea568ad69806b8a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/759658521a6e6c4f1b426752ea568ad69806b8a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/759658521a6e6c4f1b426752ea568ad69806b8a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/759658521a6e6c4f1b426752ea568ad69806b8a2/comments", "author": null, "committer": null, "parents": [{"sha": "727e7b1a870bdc057c4cb6d7d09ef1b56a84f222", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727e7b1a870bdc057c4cb6d7d09ef1b56a84f222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/727e7b1a870bdc057c4cb6d7d09ef1b56a84f222"}], "stats": {"total": 309, "additions": 250, "deletions": 59}, "files": [{"sha": "a5237868850b5c176ef8b8b4ff649a18e0e3218b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=759658521a6e6c4f1b426752ea568ad69806b8a2", "patch": "@@ -1,3 +1,49 @@\n+2012-07-12  Vasiliy Fofanov  <fofanov@adacore.com>\n+\n+\t* vms_data.ads: Add VMS qualifiers for -gnatn1/2 switches.\n+\n+2012-07-12  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch5.adb, exp_pakd.adb, rtsfind.ads, freeze.adb, sem_util.adb,\n+\tsem_util.ads, exp_aggr.adb\n+\t(Exp_Aggr.Packed_Array_Aggregate_Handled): Simplify processing\n+\tfor reverse storage order aggregate.\n+\t(Exp_Pakd.Byte_Swap): New utility routine used by...\n+\t(Exp_Pakd.Expand_Bit_Packed_Element_Set,\n+\tExpand_Packed_Element_Reference): For the case of a free-standing\n+\tpacked array with reverse storage order, perform byte swapping.\n+\t(Rtsfind): Make new entities RE_Bswap_{16,32,64} available.\n+\t(Freeze.Check_Component_Storage_Order): New utility routine\n+\tto enforce legality rules for nested composite types whose\n+\tenclosing composite has an explicitly defined Scalar_Storage_Order\n+\tattribute.\n+\t(Sem_Util.In_Reverse_Storage_Order_Object): Renamed from\n+\tSem_Util.In_Reverse_Storage_Order_Record, as SSO now applies to\n+\tarray types as well.\n+\t(Exp_Ch5.Expand_Assign_Array): Remove now unnecessary kludge\n+\tfor change of scalar storage order in assignments. The Lhs and\n+\tRhs now always have the same scalar storage order.\n+\n+2012-07-12  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* g-debpoo.adb (Allocate): Add local constant\n+\tNo_Element. Initialize the allocated memory chunk to No_Element.\n+\n+2012-07-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Validate_Derived_Type_Instance): Handle properly\n+\tthe case of an instance of a child unit where a formal derived\n+\ttype DT is an extension of a type T declared in a parent unit,\n+\tand the actual in the instance of the child is the type T declared\n+\tin the parent instance, and that actual is not a derived type.\n+\n+2012-07-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\t    Tristan Gingold  <gingold@adacore.com>\n+\n+\t* system-hpux-ia64.ads: Enable ZCX by default.\n+\t* gcc-interface/Makefile.in: Use alternate stack on ia64-hpux.\n+\tChange soext to .so.\n+\n 2012-07-12  Robert Dewar  <dewar@adacore.com>\n \n \t* s-atopri.adb, s-atopri.ads: Minor reformatting."}, {"sha": "0d816066237b5008991385f59bc11fb400bb5e82", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=759658521a6e6c4f1b426752ea568ad69806b8a2", "patch": "@@ -6123,35 +6123,7 @@ package body Exp_Aggr is\n             Expr : Node_Id;\n             --  Next expression from positional parameters of aggregate\n \n-            Enclosing_Aggregate : Node_Id;\n-\n-            In_Reverse_Storage_Order_Record : Boolean;\n-            --  True if we are within an aggregate of a record type with\n-            --  reversed storage order.\n-\n          begin\n-            --  Determine whether we are in a reversed storage order record\n-            --  aggregate.\n-\n-            In_Reverse_Storage_Order_Record := False;\n-            Enclosing_Aggregate := Parent (N);\n-            while Present (Enclosing_Aggregate) loop\n-               if Nkind (Enclosing_Aggregate) = N_Component_Association then\n-                  null;\n-\n-               elsif Nkind (Enclosing_Aggregate) /= N_Aggregate then\n-                  exit;\n-\n-               elsif Is_Record_Type (Etype (Enclosing_Aggregate))\n-                 and then Reverse_Storage_Order (Etype (Enclosing_Aggregate))\n-               then\n-                  In_Reverse_Storage_Order_Record := True;\n-                  exit;\n-               end if;\n-\n-               Enclosing_Aggregate := Parent (Enclosing_Aggregate);\n-            end loop;\n-\n             --  For little endian, we fill up the low order bits of the target\n             --  value. For big endian we fill up the high order bits of the\n             --  target value (which is a left justified modular value).\n@@ -6164,7 +6136,7 @@ package body Exp_Aggr is\n \n             if Bytes_Big_Endian\n               xor Debug_Flag_8\n-              xor In_Reverse_Storage_Order_Record\n+              xor Reverse_Storage_Order (Base_Type (Typ))\n             then\n                Shift := Csiz * (Len - 1);\n                Incr  := -Csiz;"}, {"sha": "43a1c75cdbee2914ccdb2899ca5ae76f5c470535", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=759658521a6e6c4f1b426752ea568ad69806b8a2", "patch": "@@ -344,15 +344,6 @@ package body Exp_Ch5 is\n       elsif Has_Controlled_Component (L_Type) then\n          Loop_Required := True;\n \n-      --  If changing scalar storage order and assigning a bit packed array,\n-      --  force loop expansion.\n-\n-      elsif Is_Bit_Packed_Array (L_Type)\n-        and then (In_Reverse_Storage_Order_Record (Rhs) /=\n-                  In_Reverse_Storage_Order_Record (Lhs))\n-      then\n-         Loop_Required := True;\n-\n       --  If object is atomic, we cannot tolerate a loop\n \n       elsif Is_Atomic_Object (Act_Lhs)"}, {"sha": "b958383f9334fbc6706236d3b6fc84865630358d", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=759658521a6e6c4f1b426752ea568ad69806b8a2", "patch": "@@ -543,6 +543,42 @@ package body Exp_Pakd is\n    --  array type on the fly). Such actions are inserted into the tree\n    --  directly using Insert_Action.\n \n+   function Byte_Swap (N : Node_Id) return Node_Id;\n+   --  Wrap N in a call to a byte swapping function, with appropriate type\n+   --  conversions.\n+\n+   ---------------\n+   -- Byte_Swap --\n+   ---------------\n+\n+   function Byte_Swap (N : Node_Id) return Node_Id is\n+      Loc     : constant Source_Ptr := Sloc (N);\n+      T       : constant Entity_Id := Etype (N);\n+      Swap_RE : RE_Id;\n+      Swap_F  : Entity_Id;\n+\n+   begin\n+      pragma Assert (Esize (T) > 8);\n+\n+      if Esize (T) <= 16 then\n+         Swap_RE := RE_Bswap_16;\n+      elsif Esize (T) <= 32 then\n+         Swap_RE := RE_Bswap_32;\n+      else pragma Assert (Esize (T) <= 64);\n+         Swap_RE := RE_Bswap_64;\n+      end if;\n+\n+      Swap_F := RTE (Swap_RE);\n+\n+      return Unchecked_Convert_To\n+               (T,\n+                Make_Function_Call (Loc,\n+                  Name                   =>\n+                    New_Occurrence_Of (Swap_F, Loc),\n+                  Parameter_Associations =>\n+                    New_List (Unchecked_Convert_To (Etype (Swap_F), N))));\n+   end Byte_Swap;\n+\n    ------------------------------\n    -- Compute_Linear_Subscript --\n    ------------------------------\n@@ -1304,6 +1340,12 @@ package body Exp_Pakd is\n       --  contains the value. Otherwise Rhs_Val_Known is set False, and\n       --  the Rhs_Val is undefined.\n \n+      Require_Byte_Swapping : Boolean := False;\n+      --  True if byte swapping required, for the Reverse_Storage_Order case\n+      --  when the packed array is a free-standing object. (If it is part\n+      --  of a composite type, and therefore potentially not aligned on a byte\n+      --  boundary, the swapping is done by the back-end).\n+\n       function Get_Shift return Node_Id;\n       --  Function used to get the value of Shift, making sure that it\n       --  gets duplicated if the function is called more than once.\n@@ -1415,6 +1457,11 @@ package body Exp_Pakd is\n \n          --    Obj := atyp!((Obj and Mask1) or (shift_left (rhs, Shift)))\n \n+         --  or in the case of a freestanding Reverse_Storage_Order object,\n+\n+         --    Obj := Swap (atyp!((Swap (Obj) and Mask1)\n+         --                         or (shift_left (rhs, Shift))))\n+\n          --      where Mask1 is obtained by shifting Cmask left Shift bits\n          --      and then complementing the result.\n \n@@ -1485,6 +1532,14 @@ package body Exp_Pakd is\n             Set_Etype (Obj, T);\n             Set_Etype (New_Lhs, T);\n             Set_Etype (New_Rhs, T);\n+\n+            if Reverse_Storage_Order (Base_Type (Atyp))\n+                 and then Esize (T) > 8\n+                 and then not In_Reverse_Storage_Order_Object (Obj)\n+            then\n+               Require_Byte_Swapping := True;\n+               New_Rhs := Byte_Swap (New_Rhs);\n+            end if;\n          end;\n \n          --  First we deal with the \"and\"\n@@ -1615,6 +1670,11 @@ package body Exp_Pakd is\n             end;\n          end if;\n \n+         if Require_Byte_Swapping then\n+            Set_Etype (New_Rhs, Etype (Obj));\n+            New_Rhs := Byte_Swap (New_Rhs);\n+         end if;\n+\n          --  Now do the rewrite\n \n          Rewrite (N,\n@@ -1977,6 +2037,17 @@ package body Exp_Pakd is\n          Lit := Make_Integer_Literal (Loc, Cmask);\n          Set_Print_In_Hex (Lit);\n \n+         --  Byte swapping required for the Reverse_Storage_Order case, but\n+         --  only for a free-standing object (see note on Require_Byte_Swapping\n+         --  in Expand_Bit_Packed_Element_Set).\n+\n+         if Reverse_Storage_Order (Atyp)\n+              and then Esize (Atyp) > 8\n+              and then not In_Reverse_Storage_Order_Object (Obj)\n+         then\n+            Obj := Byte_Swap (Obj);\n+         end if;\n+\n          --  We generate a shift right to position the field, followed by a\n          --  masking operation to extract the bit field, and we finally do an\n          --  unchecked conversion to convert the result to the required target.\n@@ -2726,7 +2797,7 @@ package body Exp_Pakd is\n \n       --  We also have to adjust if the storage order is reversed\n \n-      if Bytes_Big_Endian xor In_Reverse_Storage_Order_Record (Obj) then\n+      if Bytes_Big_Endian xor Reverse_Storage_Order (Base_Type (Atyp)) then\n          Shift :=\n            Make_Op_Subtract (Loc,\n              Left_Opnd  => Make_Integer_Literal (Loc, Osiz - Csiz),"}, {"sha": "c8547b1e5242d5af8fa9b7c45d88537664ee9d5a", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=759658521a6e6c4f1b426752ea568ad69806b8a2", "patch": "@@ -88,6 +88,14 @@ package body Freeze is\n    --  Apply legality checks to address clauses for object declarations,\n    --  at the point the object is frozen.\n \n+   procedure Check_Component_Storage_Order\n+     (Encl_Type : Entity_Id;\n+      Comp      : Entity_Id);\n+   --  For an Encl_Type that has a Scalar_Storage_Order attribute definition\n+   --  clause, verify that the component type is compatible. For arrays,\n+   --  Comp is Empty; for records, it is the entity of the component under\n+   --  consideration.\n+\n    procedure Check_Strict_Alignment (E : Entity_Id);\n    --  E is a base type. If E is tagged or has a component that is aliased\n    --  or tagged or contains something this is aliased or tagged, set\n@@ -1008,6 +1016,60 @@ package body Freeze is\n       Set_Size_Known_At_Compile_Time (T, Size_Known (T));\n    end Check_Compile_Time_Size;\n \n+   -----------------------------------\n+   -- Check_Component_Storage_Order --\n+   -----------------------------------\n+\n+   procedure Check_Component_Storage_Order\n+     (Encl_Type : Entity_Id;\n+      Comp      : Entity_Id)\n+   is\n+      Comp_Type : Entity_Id;\n+      Comp_Def  : Node_Id;\n+      Err_Node  : Node_Id;\n+      ADC       : Node_Id;\n+\n+   begin\n+      --  Record case\n+\n+      if Present (Comp) then\n+         Err_Node  := Comp;\n+         Comp_Type := Etype (Comp);\n+         Comp_Def  := Component_Definition (Parent (Comp));\n+\n+      --  Array case\n+\n+      else\n+         Err_Node  := Encl_Type;\n+         Comp_Type := Component_Type (Encl_Type);\n+         Comp_Def  := Component_Definition\n+                        (Type_Definition (Declaration_Node (Encl_Type)));\n+      end if;\n+\n+      --  Note: the Reverse_Storage_Order flag is set on the base type,\n+      --  but the attribute definition clause is attached to the first\n+      --  subtype.\n+\n+      Comp_Type := Base_Type (Comp_Type);\n+      ADC := Get_Attribute_Definition_Clause\n+               (First_Subtype (Comp_Type),\n+                Attribute_Scalar_Storage_Order);\n+\n+      if (Is_Record_Type (Comp_Type) or else Is_Array_Type (Comp_Type))\n+           and then\n+         (No (ADC) or else Reverse_Storage_Order (Encl_Type)\n+                        /= Reverse_Storage_Order (Etype (Comp_Type)))\n+      then\n+         Error_Msg_N\n+           (\"component type must have same scalar storage order as \"\n+            & \"enclosing composite\", Err_Node);\n+\n+      elsif Aliased_Present (Comp_Def) then\n+         Error_Msg_N (\"aliased component not permitted for type with \"\n+                      & \"explicit Scalar_Storage_Order\", Err_Node);\n+      end if;\n+   end Check_Component_Storage_Order;\n+\n    -----------------------------\n    -- Check_Debug_Info_Needed --\n    -----------------------------\n@@ -2202,20 +2264,29 @@ package body Freeze is\n             end if;\n \n             --  Warn if there is a Scalar_Storage_Order but no component clause\n+            --  (or pragma Pack).\n \n-            if not Placed_Component then\n+            if not (Placed_Component or else Is_Packed (Rec)) then\n                Error_Msg_N\n                  (\"?scalar storage order specified but no component clause\",\n                   ADC);\n             end if;\n+\n+            --  Check attribute on component types\n+\n+            Comp := First_Component (Rec);\n+            while Present (Comp) loop\n+               Check_Component_Storage_Order (Rec, Comp);\n+               Next_Component (Comp);\n+            end loop;\n          end if;\n \n          --  Deal with Bit_Order aspect specifying a non-default bit order\n \n          ADC := Get_Attribute_Definition_Clause (Rec, Attribute_Bit_Order);\n \n          if Present (ADC) and then Base_Type (Rec) = Rec then\n-            if not Placed_Component then\n+            if not (Placed_Component or else Is_Packed (Rec)) then\n                Error_Msg_N (\"?bit order specification has no effect\", ADC);\n                Error_Msg_N\n                  (\"\\?since no component clauses were specified\", ADC);\n@@ -3672,6 +3743,14 @@ package body Freeze is\n                      end if;\n                   end if;\n \n+                  --  Check for scalar storage order\n+\n+                  if Present (Get_Attribute_Definition_Clause\n+                               (E, Attribute_Scalar_Storage_Order))\n+                  then\n+                     Check_Component_Storage_Order (E, Empty);\n+                  end if;\n+\n                --  Processing that is done only for subtypes\n \n                else"}, {"sha": "ac3a9289cab9e5796c5344bf7f6ea37f2879e1c6", "filename": "gcc/ada/g-debpoo.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fg-debpoo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fg-debpoo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-debpoo.adb?ref=759658521a6e6c4f1b426752ea568ad69806b8a2", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -668,9 +668,10 @@ package body GNAT.Debug_Pools is\n       --  terms of wasted memory). To do that, all we should have to do it to\n       --  set the size of this array to the page size. See mprotect().\n \n-      P : Ptr;\n+      No_Element : constant Storage_Element := 0;\n \n       Current : Byte_Count;\n+      P       : Ptr;\n       Trace   : Traceback_Htable_Elem_Ptr;\n \n    begin\n@@ -693,15 +694,16 @@ package body GNAT.Debug_Pools is\n       --  Use standard (i.e. through malloc) allocations. This automatically\n       --  raises Storage_Error if needed. We also try once more to physically\n       --  release memory, so that even marked blocks, in the advanced scanning,\n-      --  are freed.\n+      --  are freed. Initialize the storage array to avoid bogus warnings by\n+      --  valgrind.\n \n       begin\n-         P := new Local_Storage_Array;\n+         P := new Local_Storage_Array'(others => No_Element);\n \n       exception\n          when Storage_Error =>\n             Free_Physically (Pool);\n-            P := new Local_Storage_Array;\n+            P := new Local_Storage_Array'(others => No_Element);\n       end;\n \n       Storage_Address :="}, {"sha": "83bcd17a355da35925800471bee010354e0ab364", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=759658521a6e6c4f1b426752ea568ad69806b8a2", "patch": "@@ -2014,7 +2014,7 @@ ifeq ($(strip $(filter-out ia64% hp hpux%,$(targ))),)\n   s-osinte.ads<s-osinte-hpux.ads \\\n   s-osprim.adb<s-osprim-posix.adb \\\n   s-taprop.adb<s-taprop-posix.adb \\\n-  s-taspri.ads<s-taspri-posix-noaltstack.ads \\\n+  s-taspri.ads<s-taspri-posix.ads \\\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n   system.ads<system-hpux-ia64.ads \\\n   $(ATOMICS_TARGET_PAIRS) \\\n@@ -2024,10 +2024,11 @@ ifeq ($(strip $(filter-out ia64% hp hpux%,$(targ))),)\n   mlib-tgt-specific.adb<mlib-tgt-specific-ia64-hpux.adb\n \n   MISCLIB=\n+  EH_MECHANISM=-gcc\n   THREADSLIB=-lpthread\n   GNATLIB_SHARED=gnatlib-shared-dual\n   GMEM_LIB = gmemlib\n-  soext = .sl\n+  soext = .so\n   SO_OPTS = -Wl,+h,\n   LIBRARY_VERSION := $(LIB_VERSION)\n endif"}, {"sha": "05983814a5e55cf1cc7fed14bb3286f6adaab7f5", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=759658521a6e6c4f1b426752ea568ad69806b8a2", "patch": "@@ -215,6 +215,7 @@ package Rtsfind is\n       System_Aux_DEC,\n       System_Bit_Ops,\n       System_Boolean_Array_Operations,\n+      System_Byte_Swapping,\n       System_Checked_Pools,\n       System_Compare_Array_Signed_16,\n       System_Compare_Array_Signed_32,\n@@ -772,6 +773,10 @@ package Rtsfind is\n      RE_Vector_Nxor,                     -- System_Boolean_Array_Operations,\n      RE_Vector_Xor,                      -- System_Boolean_Array_Operations,\n \n+     RE_Bswap_16,                        -- System.Byte_Swapping\n+     RE_Bswap_32,                        -- System.Byte_Swapping\n+     RE_Bswap_64,                        -- System.Byte_Swapping\n+\n      RE_Checked_Pool,                    -- System.Checked_Pools\n \n      RE_Compare_Array_S8,                -- System.Compare_Array_Signed_8\n@@ -1996,6 +2001,10 @@ package Rtsfind is\n      RE_Vector_Nxor                      => System_Boolean_Array_Operations,\n      RE_Vector_Xor                       => System_Boolean_Array_Operations,\n \n+     RE_Bswap_16                         => System_Byte_Swapping,\n+     RE_Bswap_32                         => System_Byte_Swapping,\n+     RE_Bswap_64                         => System_Byte_Swapping,\n+\n      RE_Compare_Array_S8                 => System_Compare_Array_Signed_8,\n      RE_Compare_Array_S8_Unaligned       => System_Compare_Array_Signed_8,\n "}, {"sha": "b2be58fec8e3f1ed316c2f1998796451d37d212a", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=759658521a6e6c4f1b426752ea568ad69806b8a2", "patch": "@@ -10821,6 +10821,17 @@ package body Sem_Ch12 is\n                  Get_Instance_Of (Base_Type (Get_Instance_Of (A_Gen_T)));\n             end if;\n \n+         --  An unusual case: the actual is a type declared in a parent unit,\n+         --  but is not a formal type so there is no instance_of for it.\n+         --  Retrieve it by analyzing the record extension.\n+\n+         elsif Is_Child_Unit (Scope (A_Gen_T))\n+           and then In_Open_Scopes (Scope (Act_T))\n+           and then Is_Generic_Instance (Scope (Act_T))\n+         then\n+            Analyze (Subtype_Mark (Def));\n+            Ancestor := Entity (Subtype_Mark (Def));\n+\n          else\n             Ancestor := Get_Instance_Of (Etype (Base_Type (A_Gen_T)));\n          end if;"}, {"sha": "721f958d6830ff53ec304021380287d1c74b4160", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=759658521a6e6c4f1b426752ea568ad69806b8a2", "patch": "@@ -6306,11 +6306,12 @@ package body Sem_Util is\n    end In_Parameter_Specification;\n \n    -------------------------------------\n-   -- In_Reverse_Storage_Order_Record --\n+   -- In_Reverse_Storage_Order_Object --\n    -------------------------------------\n \n-   function In_Reverse_Storage_Order_Record (N : Node_Id) return Boolean is\n+   function In_Reverse_Storage_Order_Object (N : Node_Id) return Boolean is\n       Pref : Node_Id;\n+      Btyp : Entity_Id := Empty;\n    begin\n       Pref := N;\n \n@@ -6331,10 +6332,14 @@ package body Sem_Util is\n          end case;\n       end loop;\n \n-      return Present (Pref)\n-               and then Is_Record_Type (Etype (Pref))\n-               and then Reverse_Storage_Order (Etype (Pref));\n-   end In_Reverse_Storage_Order_Record;\n+      if Present (Pref) then\n+         Btyp := Base_Type (Etype (Pref));\n+      end if;\n+\n+      return Present (Btyp)\n+               and then (Is_Record_Type (Btyp) or else Is_Array_Type (Btyp))\n+               and then Reverse_Storage_Order (Btyp);\n+   end In_Reverse_Storage_Order_Object;\n \n    --------------------------------------\n    -- In_Subprogram_Or_Concurrent_Unit --"}, {"sha": "282ae3a0fb28a7e0c173d5051012efafb940464f", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=759658521a6e6c4f1b426752ea568ad69806b8a2", "patch": "@@ -742,9 +742,9 @@ package Sem_Util is\n    function In_Parameter_Specification (N : Node_Id) return Boolean;\n    --  Returns True if node N belongs to a parameter specification\n \n-   function In_Reverse_Storage_Order_Record (N : Node_Id) return Boolean;\n-   --  Returns True if N denotes a component or subcomponent in a record object\n-   --  that has Reverse_Storage_Order.\n+   function In_Reverse_Storage_Order_Object (N : Node_Id) return Boolean;\n+   --  Returns True if N denotes a component or subcomponent in a record or\n+   --  array that has Reverse_Storage_Order.\n \n    function In_Subprogram_Or_Concurrent_Unit return Boolean;\n    --  Determines if the current scope is within a subprogram compilation unit"}, {"sha": "29b2a49152e73d574edceaa4e3f9d630bb916e79", "filename": "gcc/ada/system-hpux-ia64.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fsystem-hpux-ia64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fsystem-hpux-ia64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-hpux-ia64.ads?ref=759658521a6e6c4f1b426752ea568ad69806b8a2", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                           (HP-UX/ia64 Version)                           --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -138,6 +138,6 @@ private\n    Always_Compatible_Rep     : constant Boolean := True;\n    Suppress_Standard_Library : constant Boolean := False;\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n-   ZCX_By_Default            : constant Boolean := False;\n+   ZCX_By_Default            : constant Boolean := True;\n \n end System;"}, {"sha": "20d92a06900ce30175d23e7066cec51db8813073", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/759658521a6e6c4f1b426752ea568ad69806b8a2/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=759658521a6e6c4f1b426752ea568ad69806b8a2", "patch": "@@ -1789,6 +1789,10 @@ package VMS_Data is\n    S_GCC_Inline  : aliased constant S := \"/INLINE=\"                        &\n                                             \"PRAGMA \"                      &\n                                               \"-gnatn \"                    &\n+                                            \"PRAGMA_LEVEL_1 \"              &\n+                                              \"-gnatn1 \"                   &\n+                                            \"PRAGMA_LEVEL_2 \"              &\n+                                              \"-gnatn2 \"                   &\n                                             \"FULL \"                        &\n                                               \"-gnatN \"                    &\n                                             \"SUPPRESS \"                    &"}]}