{"sha": "7b820993a5a5523ab45d5d3bd967a11020895809", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I4MjA5OTNhNWE1NTIzYWI0NWQ1ZDNiZDk2N2ExMTAyMDg5NTgwOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-04-07T16:57:48Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-04-07T16:57:48Z"}, "message": "Rename abi::__vmi_class_type_info members.\n\n\t* inc/cxxabi.h (__vmi_class_type_info): Rename details, n_bases,\n\tbase_list, detail_masks members to vmi_flags, vmi_base_count,\n\tvmi_bases and vmi_flags_masks respectively.\n\t(__vmi_class_type_info::vmi_flags_masks): Rename\n\tdetails_unknown_mask to flags_unknown_mask.\n\t* tinfo.cc (__class_type_info::do_upcast): Adjust.\n\t(__vmi_class_type_info::do_find_public_src): Adjust.\n\t(__vmi_class_type_info::do_dyncast): Adjust.\n\t(__vmi_class_type_info::do_upcast): Adjust.\n\nFrom-SVN: r33004", "tree": {"sha": "77a699e79f234c6a6159445273384e13d04ec718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77a699e79f234c6a6159445273384e13d04ec718"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b820993a5a5523ab45d5d3bd967a11020895809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b820993a5a5523ab45d5d3bd967a11020895809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b820993a5a5523ab45d5d3bd967a11020895809", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b820993a5a5523ab45d5d3bd967a11020895809/comments", "author": null, "committer": null, "parents": [{"sha": "a9e6777fb2b223619cac9bd838b924dad53498c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e6777fb2b223619cac9bd838b924dad53498c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e6777fb2b223619cac9bd838b924dad53498c2"}], "stats": {"total": 67, "additions": 40, "deletions": 27}, "files": [{"sha": "a23b48d7eeaddbdb3def8f8835026a237b7cf5ed", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b820993a5a5523ab45d5d3bd967a11020895809/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b820993a5a5523ab45d5d3bd967a11020895809/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7b820993a5a5523ab45d5d3bd967a11020895809", "patch": "@@ -1,3 +1,16 @@\n+2000-04-07  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tRename abi::__vmi_class_type_info members.\n+\t* inc/cxxabi.h (__vmi_class_type_info): Rename details, n_bases,\n+\tbase_list, detail_masks members to vmi_flags, vmi_base_count,\n+\tvmi_bases and vmi_flags_masks respectively.\n+\t(__vmi_class_type_info::vmi_flags_masks): Rename\n+\tdetails_unknown_mask to flags_unknown_mask.\n+\t* tinfo.cc (__class_type_info::do_upcast): Adjust.\n+\t(__vmi_class_type_info::do_find_public_src): Adjust.\n+\t(__vmi_class_type_info::do_dyncast): Adjust.\n+\t(__vmi_class_type_info::do_upcast): Adjust.\n+\t\n 2000-04-07  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* tinfo.cc (convert_to_base): New function."}, {"sha": "e0c15317f7a91b32e6f332f425334536f1c5cbb7", "filename": "gcc/cp/inc/cxxabi.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b820993a5a5523ab45d5d3bd967a11020895809/gcc%2Fcp%2Finc%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b820993a5a5523ab45d5d3bd967a11020895809/gcc%2Fcp%2Finc%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finc%2Fcxxabi.h?ref=7b820993a5a5523ab45d5d3bd967a11020895809", "patch": "@@ -331,9 +331,9 @@ class __si_class_type_info\n class __vmi_class_type_info : public __class_type_info {\n /* abi defined member variables */\n public:\n-  int details;      /* details about the class heirarchy */\n-  int n_bases;      /* number of direct bases */\n-  __base_class_info base_list[1]; /* array of bases */\n+  int vmi_flags;                  /* details about the class heirarchy */\n+  int vmi_base_count;             /* number of direct bases */\n+  __base_class_info vmi_bases[1]; /* array of bases */\n   /* The array of bases uses the trailing array struct hack\n      so this class is not constructable with a normal constructor. It is\n      internally generated by the compiler. */\n@@ -343,19 +343,19 @@ class __vmi_class_type_info : public __class_type_info {\n   virtual ~__vmi_class_type_info ();\n public:\n   explicit __vmi_class_type_info (const char *n_,\n-                                  int details_)\n-    : __class_type_info (n_), details (details_), n_bases (0)\n+                                  int flags_)\n+    : __class_type_info (n_), vmi_flags (flags_), vmi_base_count (0)\n     { }\n \n /* implementation defined types */\n public:\n-  enum detail_masks {\n+  enum vmi_flags_masks {\n     non_diamond_repeat_mask = 0x1,   /* distinct instance of repeated base */\n     diamond_shaped_mask = 0x2,       /* diamond shaped multiple inheritance */\n     non_public_base_mask = 0x4,      /* has non-public direct or indirect base */\n     public_base_mask = 0x8,          /* has public base (direct) */\n     \n-    details_unknown_mask = 0x10\n+    flags_unknown_mask = 0x10\n   };\n \n /* implementation defined member functions */"}, {"sha": "0bf9cfe57c656d2e3a187d6b4f8db284832e6da9", "filename": "gcc/cp/tinfo.cc", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b820993a5a5523ab45d5d3bd967a11020895809/gcc%2Fcp%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b820993a5a5523ab45d5d3bd967a11020895809/gcc%2Fcp%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftinfo.cc?ref=7b820993a5a5523ab45d5d3bd967a11020895809", "patch": "@@ -667,7 +667,7 @@ do_catch (const type_info *thr_type, void **thr_obj,\n bool __class_type_info::\n do_upcast (const __class_type_info *dst_type, void **obj_ptr) const\n {\n-  upcast_result result (__vmi_class_type_info::details_unknown_mask);\n+  upcast_result result (__vmi_class_type_info::flags_unknown_mask);\n   \n   if (do_upcast (contained_public, dst_type, *obj_ptr, result))\n     return false;\n@@ -721,14 +721,14 @@ do_find_public_src (ptrdiff_t src2dst,\n   if (obj_ptr == src_ptr && *this == *src_type)\n     return contained_public;\n   \n-  for (size_t i = n_bases; i--;)\n+  for (size_t i = vmi_base_count; i--;)\n     {\n-      if (!base_list[i].is_public_p ())\n+      if (!vmi_bases[i].is_public_p ())\n         continue; // Not public, can't be here.\n       \n       const void *base = obj_ptr;\n-      ptrdiff_t offset = base_list[i].offset ();\n-      bool is_virtual = base_list[i].is_virtual_p ();\n+      ptrdiff_t offset = vmi_bases[i].offset ();\n+      bool is_virtual = vmi_bases[i].is_virtual_p ();\n       \n       if (is_virtual)\n         {\n@@ -737,7 +737,7 @@ do_find_public_src (ptrdiff_t src2dst,\n         }\n       base = convert_to_base (base, is_virtual, offset);\n       \n-      sub_kind base_kind = base_list[i].base->do_find_public_src\n+      sub_kind base_kind = vmi_bases[i].base->do_find_public_src\n                               (src2dst, base, src_type, src_ptr);\n       if (contained_p (base_kind))\n         {\n@@ -844,23 +844,23 @@ do_dyncast (ptrdiff_t src2dst,\n       return false;\n     }\n   bool result_ambig = false;\n-  for (size_t i = n_bases; i--;)\n+  for (size_t i = vmi_base_count; i--;)\n     {\n       dyncast_result result2;\n       void const *base = obj_ptr;\n       sub_kind base_access = access_path;\n-      ptrdiff_t offset = base_list[i].offset ();\n-      bool is_virtual = base_list[i].is_virtual_p ();\n+      ptrdiff_t offset = vmi_bases[i].offset ();\n+      bool is_virtual = vmi_bases[i].is_virtual_p ();\n       \n       if (is_virtual)\n         base_access = sub_kind (base_access | contained_virtual_mask);\n       base = convert_to_base (base, is_virtual, offset);\n \n-      if (!base_list[i].is_public_p ())\n+      if (!vmi_bases[i].is_public_p ())\n         base_access = sub_kind (base_access & ~contained_public_mask);\n       \n       bool result2_ambig\n-          = base_list[i].base->do_dyncast (src2dst, base_access,\n+          = vmi_bases[i].base->do_dyncast (src2dst, base_access,\n                                            dst_type, base,\n                                            src_type, src_ptr, result2);\n       result.whole2src = sub_kind (result.whole2src | result2.whole2src);\n@@ -1028,18 +1028,18 @@ do_upcast (sub_kind access_path,\n     }\n   \n   int src_details = result.src_details;\n-  if (src_details & details_unknown_mask)\n-    src_details = details;\n+  if (src_details & flags_unknown_mask)\n+    src_details = vmi_flags;\n   \n-  for (size_t i = n_bases; i--;)\n+  for (size_t i = vmi_base_count; i--;)\n     {\n       upcast_result result2 (src_details);\n       const void *base = obj_ptr;\n       sub_kind sub_access = access_path;\n-      ptrdiff_t offset = base_list[i].offset ();\n-      bool is_virtual = base_list[i].is_virtual_p ();\n+      ptrdiff_t offset = vmi_bases[i].offset ();\n+      bool is_virtual = vmi_bases[i].is_virtual_p ();\n       \n-      if (!base_list[i].is_public_p ())\n+      if (!vmi_bases[i].is_public_p ())\n         {\n           if (!(src_details & non_diamond_repeat_mask))\n             // original cannot have an ambiguous base\n@@ -1051,16 +1051,16 @@ do_upcast (sub_kind access_path,\n       if (base)\n         base = convert_to_base (base, is_virtual, offset);\n       \n-      if (base_list[i].base->do_upcast (sub_access, dst, base, result2))\n+      if (vmi_bases[i].base->do_upcast (sub_access, dst, base, result2))\n         return true; // must fail\n       if (result2.base_type)\n         {\n           if (result2.base_type == nonvirtual_base_type && is_virtual)\n-            result2.base_type = base_list[i].base;\n+            result2.base_type = vmi_bases[i].base;\n           if (!result.base_type)\n             {\n               result = result2;\n-              if (!(details & non_diamond_repeat_mask))\n+              if (!(vmi_flags & non_diamond_repeat_mask))\n                 // cannot have an ambiguous other base\n                 return false;\n             }"}]}