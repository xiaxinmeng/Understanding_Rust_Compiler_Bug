{"sha": "f9bd8d8e45377edd96155bc38295f483c67a973a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjliZDhkOGU0NTM3N2VkZDk2MTU1YmMzODI5NWY0ODNjNjdhOTczYQ==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-09-22T20:50:44Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-09-22T20:50:44Z"}, "message": "pa.c (hppa_legitimize_address): Handle full offsets for PA2.0 FP loads and stores.\n\n        * pa.c (hppa_legitimize_address): Handle full offsets for PA2.0\n        FP loads and stores.\n        (following_call): Always return zero for the PA8000.\n        * pa.h (GO_IF_LEGITIMATE_ADDRESS): Handle full offsets for PA2.0\n        FP loads and stores.\n        (LEGITIMIZE_RELOAD_ADDRESS): Similarly.\n\nFrom-SVN: r29603", "tree": {"sha": "81b91405d2d912ad51f47316dcefc68e8bad350d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81b91405d2d912ad51f47316dcefc68e8bad350d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9bd8d8e45377edd96155bc38295f483c67a973a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bd8d8e45377edd96155bc38295f483c67a973a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9bd8d8e45377edd96155bc38295f483c67a973a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bd8d8e45377edd96155bc38295f483c67a973a/comments", "author": null, "committer": null, "parents": [{"sha": "17f4971f7b328e930167ea2a0008402b8c130ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f4971f7b328e930167ea2a0008402b8c130ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17f4971f7b328e930167ea2a0008402b8c130ac1"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "dcca8b978cb9bfa8eccd322a08a94da14289ac89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bd8d8e45377edd96155bc38295f483c67a973a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bd8d8e45377edd96155bc38295f483c67a973a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9bd8d8e45377edd96155bc38295f483c67a973a", "patch": "@@ -37,6 +37,13 @@ Wed Sep 22 06:25:15 1999  Jim Kingdon  <http://developer.redhat.com>\n \n Wed Sep 22 06:06:57 1999  Jeffrey A Law  (law@cygnus.com)\n \n+        * pa.c (hppa_legitimize_address): Handle full offsets for PA2.0\n+        FP loads and stores.\n+\t(following_call): Always return zero for the PA8000.\n+\t* pa.h (GO_IF_LEGITIMATE_ADDRESS): Handle full offsets for PA2.0\n+\tFP loads and stores.\n+        (LEGITIMIZE_RELOAD_ADDRESS): Similarly.\n+\n \t* pa.h (BRANCH_COST): Define.\n \n \t* pa.md (return, return_internal): Use bve for PA2.0."}, {"sha": "04fe6d4d387420ba7aea88cae08da23644edd280", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bd8d8e45377edd96155bc38295f483c67a973a/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bd8d8e45377edd96155bc38295f483c67a973a/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=f9bd8d8e45377edd96155bc38295f483c67a973a", "patch": "@@ -791,7 +791,10 @@ hppa_legitimize_address (x, oldx, mode)\n       rtx int_part, ptr_reg;\n       int newoffset;\n       int offset = INTVAL (XEXP (x, 1));\n-      int mask = GET_MODE_CLASS (mode) == MODE_FLOAT ? 0x1f : 0x3fff;\n+      int mask;\n+\n+      mask = (GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t      ? (TARGET_PA_20 ? 0x3fff : 0x1f) : 0x3fff);\n \n       /* Choose which way to round the offset.  Round up if we\n \t are >= halfway to the next boundary.  */\n@@ -5939,6 +5942,11 @@ int\n following_call (insn)\n      rtx insn;\n {\n+  /* We do not parallel movb,addb or place jumps into call delay slots when\n+     optimizing for the PA8000.  */\n+  if (pa_cpu != PROCESSOR_8000)\n+    return 0;\n+\n   /* Find the previous real insn, skipping NOTEs.  */\n   insn = PREV_INSN (insn);\n   while (insn && GET_CODE (insn) == NOTE)"}, {"sha": "fbb920b367ac26c2feab7b0995c42dab018c18ea", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bd8d8e45377edd96155bc38295f483c67a973a/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bd8d8e45377edd96155bc38295f483c67a973a/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=f9bd8d8e45377edd96155bc38295f483c67a973a", "patch": "@@ -1339,8 +1339,13 @@ extern struct rtx_def *hppa_va_arg();\n    : ((C) == 'T' ? \t\t\t\t\t\\\n       (GET_CODE (OP) == MEM\t\t\t\t\\\n        /* Using DFmode forces only short displacements\t\\\n-\t  to be recognized as valid in reg+d addresses.  */\\\n-       && memory_address_p (DFmode, XEXP (OP, 0))\t\\\n+\t  to be recognized as valid in reg+d addresses. \\\n+\t  However, this is not necessary for PA2.0 since\\\n+\t  it has long FP loads/stores.  */\t\t\\\n+       && memory_address_p ((TARGET_PA_20\t\t\\\n+\t\t\t     ? GET_MODE (OP)\t\t\\\n+\t\t\t     : DFmode),\t\t\t\\\n+\t\t\t    XEXP (OP, 0))\t\t\\\n        && !(GET_CODE (XEXP (OP, 0)) == PLUS\t\t\\\n \t    && (GET_CODE (XEXP (XEXP (OP, 0), 0)) == MULT\\\n \t\t|| GET_CODE (XEXP (XEXP (OP, 0), 1)) == MULT)))\n@@ -1437,6 +1442,11 @@ extern struct rtx_def *hppa_va_arg();\n \tif (GET_CODE (index) == CONST_INT\t\t\\\n \t    && ((INT_14_BITS (index)\t\t\t\\\n \t\t && (TARGET_SOFT_FLOAT\t\t\t\\\n+\t\t     || (TARGET_PA_20\t\t\\\n+\t\t\t && ((MODE == SFmode\t\t\\\n+\t\t\t      && (INTVAL (index) % 4) == 0)\\\n+\t\t\t     || (MODE == DFmode\t\t\\\n+\t\t\t\t && (INTVAL (index) % 8) == 0)))\\\n \t\t     || ((MODE) != SFmode && (MODE) != DFmode))) \\\n \t\t|| INT_5_BITS (index)))\t\t\t\\\n \t  goto ADDR;\t\t\t\t\t\\\n@@ -1504,7 +1514,9 @@ extern struct rtx_def *hppa_va_arg();\n do { \t\t\t\t\t\t\t\t\t\\\n   int offset, newoffset, mask;\t\t\t\t\t\t\\\n   rtx new, temp = NULL_RTX;\t\t\t\t\t\t\\\n-  mask = GET_MODE_CLASS (MODE) == MODE_FLOAT ? 0x1f : 0x3fff;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  mask = (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\t\t\\\n+\t  ? (TARGET_PA_20 ? 0x3fff : 0x1f) : 0x3fff);\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   if (optimize\t\t\t\t\t\t\t\t\\\n       && GET_CODE (AD) == PLUS)\t\t\t\t\t\t\\"}]}