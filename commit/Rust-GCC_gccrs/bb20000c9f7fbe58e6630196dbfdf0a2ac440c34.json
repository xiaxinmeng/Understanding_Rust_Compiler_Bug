{"sha": "bb20000c9f7fbe58e6630196dbfdf0a2ac440c34", "node_id": "C_kwDOANBUbNoAKGJiMjAwMDBjOWY3ZmJlNThlNjYzMDE5NmRiZmRmMGEyYWM0NDBjMzQ", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2021-10-19T07:40:32Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-25T15:07:19Z"}, "message": "[Ada] Remove more uses of exception propagation during bootstrap\n\ngcc/ada/\n\n\t* sem_ch13.adb (Build_Discrete_Static_Predicate): Remove use of\n\texception propagation since this code is exercised during the\n\tbootstrap.", "tree": {"sha": "a9041186870f45f75cd9e05df2f9db8751a2f915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9041186870f45f75cd9e05df2f9db8751a2f915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb20000c9f7fbe58e6630196dbfdf0a2ac440c34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb20000c9f7fbe58e6630196dbfdf0a2ac440c34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb20000c9f7fbe58e6630196dbfdf0a2ac440c34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb20000c9f7fbe58e6630196dbfdf0a2ac440c34/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5145d173a85d9cc7afe351ce33639d559c344e9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5145d173a85d9cc7afe351ce33639d559c344e9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5145d173a85d9cc7afe351ce33639d559c344e9d"}], "stats": {"total": 135, "additions": 82, "deletions": 53}, "files": [{"sha": "71e2d2c26759803b30a7881f4d47a8bf224456e5", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 82, "deletions": 53, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb20000c9f7fbe58e6630196dbfdf0a2ac440c34/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb20000c9f7fbe58e6630196dbfdf0a2ac440c34/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=bb20000c9f7fbe58e6630196dbfdf0a2ac440c34", "patch": "@@ -8940,9 +8940,6 @@ package body Sem_Ch13 is\n    is\n       Loc : constant Source_Ptr := Sloc (Expr);\n \n-      Non_Static : exception;\n-      --  Raised if something non-static is found\n-\n       Btyp : constant Entity_Id := Base_Type (Typ);\n \n       BLo : constant Uint := Expr_Value (Type_Low_Bound  (Btyp));\n@@ -8995,17 +8992,21 @@ package body Sem_Ch13 is\n \n       function Build_Val (V : Uint) return Node_Id;\n       --  Return an analyzed N_Identifier node referencing this value, suitable\n-      --  for use as an entry in the Static_Discrte_Predicate list. This node\n+      --  for use as an entry in the Static_Discrete_Predicate list. This node\n       --  is typed with the base type.\n \n       function Build_Range (Lo : Uint; Hi : Uint) return Node_Id;\n       --  Return an analyzed N_Range node referencing this range, suitable for\n       --  use as an entry in the Static_Discrete_Predicate list. This node is\n       --  typed with the base type.\n \n-      function Get_RList (Exp : Node_Id) return RList;\n+      function Get_RList\n+        (Exp    : Node_Id;\n+         Static : access Boolean) return RList;\n       --  This is a recursive routine that converts the given expression into a\n       --  list of ranges, suitable for use in building the static predicate.\n+      --  Static.all will be set to False if the expression is found to be non\n+      --  static. Note that Static.all should be set to True by the caller.\n \n       function Is_False (R : RList) return Boolean;\n       pragma Inline (Is_False);\n@@ -9033,18 +9034,23 @@ package body Sem_Ch13 is\n       --  a static expression or static range, gets either the expression value\n       --  or the high bound of the range.\n \n-      function Membership_Entry (N : Node_Id) return RList;\n+      function Membership_Entry\n+        (N : Node_Id; Static : access Boolean) return RList;\n       --  Given a single membership entry (range, value, or subtype), returns\n-      --  the corresponding range list. Raises Static_Error if not static.\n+      --  the corresponding range list. Set Static.all to False if not static.\n \n-      function Membership_Entries (N : Node_Id) return RList;\n+      function Membership_Entries\n+        (N : Node_Id; Static : access Boolean) return RList;\n       --  Given an element on an alternatives list of a membership operation,\n       --  returns the range list corresponding to this entry and all following\n       --  entries (i.e. returns the \"or\" of this list of values).\n+      --  Set Static.all to False if not static.\n \n-      function Stat_Pred (Typ : Entity_Id) return RList;\n-      --  Given a type, if it has a static predicate, then return the predicate\n-      --  as a range list, otherwise raise Non_Static.\n+      function Stat_Pred\n+        (Typ    : Entity_Id;\n+         Static : access Boolean) return RList;\n+      --  Given a type, if it has a static predicate, then set Result to the\n+      --  predicate as a range list, otherwise set Static.all to False.\n \n       -----------\n       -- \"and\" --\n@@ -9296,7 +9302,10 @@ package body Sem_Ch13 is\n       -- Get_RList --\n       ---------------\n \n-      function Get_RList (Exp : Node_Id) return RList is\n+      function Get_RList\n+        (Exp    : Node_Id;\n+         Static : access Boolean) return RList\n+      is\n          Op  : Node_Kind;\n          Val : Uint;\n \n@@ -9322,23 +9331,23 @@ package body Sem_Ch13 is\n             when N_And_Then\n                | N_Op_And\n             =>\n-               return Get_RList (Left_Opnd (Exp))\n+               return Get_RList (Left_Opnd (Exp), Static)\n                         and\n-                      Get_RList (Right_Opnd (Exp));\n+                      Get_RList (Right_Opnd (Exp), Static);\n \n             --  Or\n \n             when N_Op_Or\n                | N_Or_Else\n             =>\n-               return Get_RList (Left_Opnd (Exp))\n+               return Get_RList (Left_Opnd (Exp), Static)\n                         or\n-                      Get_RList (Right_Opnd (Exp));\n+                      Get_RList (Right_Opnd (Exp), Static);\n \n             --  Not\n \n             when N_Op_Not =>\n-               return not Get_RList (Right_Opnd (Exp));\n+               return not Get_RList (Right_Opnd (Exp), Static);\n \n                --  Comparisons of type with static value\n \n@@ -9371,7 +9380,8 @@ package body Sem_Ch13 is\n                --  Other cases are non-static\n \n                else\n-                  raise Non_Static;\n+                  Static.all := False;\n+                  return False_Range;\n                end if;\n \n                --  Construct range according to comparison operation\n@@ -9403,26 +9413,30 @@ package body Sem_Ch13 is\n \n             when N_In =>\n                if not Is_Type_Ref (Left_Opnd (Exp)) then\n-                  raise Non_Static;\n+                  Static.all := False;\n+                  return False_Range;\n                end if;\n \n                if Present (Right_Opnd (Exp)) then\n-                  return Membership_Entry (Right_Opnd (Exp));\n+                  return Membership_Entry (Right_Opnd (Exp), Static);\n                else\n-                  return Membership_Entries (First (Alternatives (Exp)));\n+                  return Membership_Entries\n+                           (First (Alternatives (Exp)), Static);\n                end if;\n \n             --  Negative membership (NOT IN)\n \n             when N_Not_In =>\n                if not Is_Type_Ref (Left_Opnd (Exp)) then\n-                  raise Non_Static;\n+                  Static.all := False;\n+                  return False_Range;\n                end if;\n \n                if Present (Right_Opnd (Exp)) then\n-                  return not Membership_Entry (Right_Opnd (Exp));\n+                  return not Membership_Entry (Right_Opnd (Exp), Static);\n                else\n-                  return not Membership_Entries (First (Alternatives (Exp)));\n+                  return not Membership_Entries\n+                               (First (Alternatives (Exp)), Static);\n                end if;\n \n             --  Function call, may be call to static predicate\n@@ -9436,19 +9450,20 @@ package body Sem_Ch13 is\n                           or else\n                         Is_Predicate_Function_M (Ent)\n                      then\n-                        return Stat_Pred (Etype (First_Formal (Ent)));\n+                        return Stat_Pred (Etype (First_Formal (Ent)), Static);\n                      end if;\n                   end;\n                end if;\n \n                --  Other function call cases are non-static\n \n-               raise Non_Static;\n+               Static.all := False;\n+               return False_Range;\n \n             --  Qualified expression, dig out the expression\n \n             when N_Qualified_Expression =>\n-               return Get_RList (Expression (Exp));\n+               return Get_RList (Expression (Exp), Static);\n \n             when N_Case_Expression =>\n                declare\n@@ -9473,7 +9488,8 @@ package body Sem_Ch13 is\n                      Dep := Expression (Alt);\n \n                      if not Is_OK_Static_Expression (Dep) then\n-                        raise Non_Static;\n+                        Static.all := False;\n+                        return False_Range;\n \n                      elsif Is_True (Expr_Value (Dep)) then\n                         Append_List_To (Choices,\n@@ -9483,30 +9499,32 @@ package body Sem_Ch13 is\n                      Next (Alt);\n                   end loop;\n \n-                  return Membership_Entries (First (Choices));\n+                  return Membership_Entries (First (Choices), Static);\n                end;\n \n             --  Expression with actions: if no actions, dig out expression\n \n             when N_Expression_With_Actions =>\n                if Is_Empty_List (Actions (Exp)) then\n-                  return Get_RList (Expression (Exp));\n+                  return Get_RList (Expression (Exp), Static);\n                else\n-                  raise Non_Static;\n+                  Static.all := False;\n+                  return False_Range;\n                end if;\n \n             --  Xor operator\n \n             when N_Op_Xor =>\n-               return (Get_RList (Left_Opnd (Exp))\n-                        and not Get_RList (Right_Opnd (Exp)))\n-                 or   (Get_RList (Right_Opnd (Exp))\n-                        and not Get_RList (Left_Opnd (Exp)));\n+               return (Get_RList (Left_Opnd (Exp), Static)\n+                        and not Get_RList (Right_Opnd (Exp), Static))\n+                 or   (Get_RList (Right_Opnd (Exp), Static)\n+                        and not Get_RList (Left_Opnd (Exp), Static));\n \n             --  Any other node type is non-static\n \n             when others =>\n-               raise Non_Static;\n+               Static.all := False;\n+               return False_Range;\n          end case;\n       end Get_RList;\n \n@@ -9573,20 +9591,24 @@ package body Sem_Ch13 is\n       -- Membership_Entries --\n       ------------------------\n \n-      function Membership_Entries (N : Node_Id) return RList is\n+      function Membership_Entries\n+        (N : Node_Id; Static : access Boolean) return RList is\n       begin\n          if No (Next (N)) then\n-            return Membership_Entry (N);\n+            return Membership_Entry (N, Static);\n          else\n-            return Membership_Entry (N) or Membership_Entries (Next (N));\n+            return Membership_Entry (N, Static)\n+              or Membership_Entries (Next (N), Static);\n          end if;\n       end Membership_Entries;\n \n       ----------------------\n       -- Membership_Entry --\n       ----------------------\n \n-      function Membership_Entry (N : Node_Id) return RList is\n+      function Membership_Entry\n+        (N : Node_Id; Static : access Boolean) return RList\n+      is\n          Val : Uint;\n          SLo : Uint;\n          SHi : Uint;\n@@ -9599,7 +9621,8 @@ package body Sem_Ch13 is\n                  or else\n                not Is_OK_Static_Expression (High_Bound (N))\n             then\n-               raise Non_Static;\n+               Static.all := False;\n+               return False_Range;\n             else\n                SLo := Expr_Value (Low_Bound  (N));\n                SHi := Expr_Value (High_Bound (N));\n@@ -9642,7 +9665,7 @@ package body Sem_Ch13 is\n                --  If type has predicates, process them\n \n                if Has_Predicates (Entity (N)) then\n-                  return Stat_Pred (Entity (N));\n+                  return Stat_Pred (Entity (N), Static);\n \n                --  For static subtype without predicates, get range\n \n@@ -9654,14 +9677,16 @@ package body Sem_Ch13 is\n                --  Any other type makes us non-static\n \n                else\n-                  raise Non_Static;\n+                  Static.all := False;\n+                  return False_Range;\n                end if;\n \n             --  Any other kind of identifier in predicate (e.g. a non-static\n             --  expression value) means this is not a static predicate.\n \n             else\n-               raise Non_Static;\n+               Static.all := False;\n+               return False_Range;\n             end if;\n          end if;\n       end Membership_Entry;\n@@ -9670,12 +9695,15 @@ package body Sem_Ch13 is\n       -- Stat_Pred --\n       ---------------\n \n-      function Stat_Pred (Typ : Entity_Id) return RList is\n+      function Stat_Pred\n+        (Typ    : Entity_Id;\n+         Static : access Boolean) return RList is\n       begin\n          --  Not static if type does not have static predicates\n \n          if not Has_Static_Predicate (Typ) then\n-            raise Non_Static;\n+            Static.all := False;\n+            return False_Range;\n          end if;\n \n          --  Otherwise we convert the predicate list to a range list\n@@ -9716,12 +9744,19 @@ package body Sem_Ch13 is\n       --  Analyze the expression to see if it is a static predicate\n \n       declare\n-         Ranges : constant RList := Get_RList (Expr);\n+         Static : aliased Boolean := True;\n+         Ranges : constant RList := Get_RList (Expr, Static'Access);\n          --  Range list from expression if it is static\n \n          Plist : List_Id;\n \n       begin\n+         --  If non-static, return doing nothing\n+\n+         if not Static then\n+            return;\n+         end if;\n+\n          --  Convert range list into a form for the static predicate. In the\n          --  Ranges array, we just have raw ranges, these must be converted\n          --  to properly typed and analyzed static expressions or range nodes.\n@@ -9826,12 +9861,6 @@ package body Sem_Ch13 is\n             end if;\n          end;\n       end;\n-\n-      --  If non-static, return doing nothing\n-\n-   exception\n-      when Non_Static =>\n-         return;\n    end Build_Discrete_Static_Predicate;\n \n    --------------------------------"}]}