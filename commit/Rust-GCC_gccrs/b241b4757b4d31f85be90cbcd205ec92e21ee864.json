{"sha": "b241b4757b4d31f85be90cbcd205ec92e21ee864", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI0MWI0NzU3YjRkMzFmODViZTkwY2JjZDIwNWVjOTJlMjFlZTg2NA==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2009-08-24T06:17:33Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2009-08-24T06:17:33Z"}, "message": "Changelog gcc/\n\n2009-08-24  Kai Tietz  <kai.tietz@onevision.com>\n\n\tPR/40786\n\t* c-format.c (format_wanted_type):  Add new member scalar_identity_flag.\n\t(check_format_info_main): Use scalar_identify_flag.\n\t(check_format_types): Check for scalar size identity if\n\tscalar_identify_flag is set.\n\t(printf_length_specs): Extend by new field.\n\t(asm_fprintf_length_specs): Likewise.\n\t(gcc_diag_length_specs): Likewise.\n\t(scanf_length_specs): Likewise.\n\t(strfmon_length_specs): Likewise.\n\t(gcc_gfc_length_specs): Likewise.\n\t* config/i386/msformat-c.c (ms_printf_length_specs): Likewise.\n\t(ms_printf_flag_specs): Likewise.\n\t* c-format.h (format_length_info): Add new member scalar_identity_flag.\n\nChangelog gcc/testsuite\n\n2009-08-24  Kai Tietz  <kai.tietz@onevision.com>\n\n\t*gcc.dg/format/ms-format1.c: Add new cases for I32\n\twidth specifier.\n\t*gcc.dg/format/ms-format2.c: New test about illegal\n\tuse of I32/I64 width specifier.\n\nFrom-SVN: r151047", "tree": {"sha": "ced1677b66ea165e76b0af2c3bc13b58584e74b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ced1677b66ea165e76b0af2c3bc13b58584e74b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b241b4757b4d31f85be90cbcd205ec92e21ee864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b241b4757b4d31f85be90cbcd205ec92e21ee864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b241b4757b4d31f85be90cbcd205ec92e21ee864", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b241b4757b4d31f85be90cbcd205ec92e21ee864/comments", "author": null, "committer": null, "parents": [{"sha": "e523d8bcf768ba210681f90cc2983f03f1b4d983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e523d8bcf768ba210681f90cc2983f03f1b4d983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e523d8bcf768ba210681f90cc2983f03f1b4d983"}], "stats": {"total": 149, "additions": 111, "deletions": 38}, "files": [{"sha": "890a3dce37a638a3de8102b2ba1cdc84cc061658", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b241b4757b4d31f85be90cbcd205ec92e21ee864/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b241b4757b4d31f85be90cbcd205ec92e21ee864/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b241b4757b4d31f85be90cbcd205ec92e21ee864", "patch": "@@ -1,3 +1,20 @@\n+2009-08-24  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\tPR/40786\n+\t* c-format.c (format_wanted_type):  Add new member scalar_identity_flag.\n+\t(check_format_info_main): Use scalar_identify_flag.\n+\t(check_format_types): Check for scalar size identity if\n+\tscalar_identify_flag is set.\n+\t(printf_length_specs): Extend by new field.\n+\t(asm_fprintf_length_specs): Likewise.\n+\t(gcc_diag_length_specs): Likewise.\n+\t(scanf_length_specs): Likewise.\n+\t(strfmon_length_specs): Likewise.\n+\t(gcc_gfc_length_specs): Likewise.\n+\t* config/i386/msformat-c.c (ms_printf_length_specs): Likewise.\n+\t(ms_printf_flag_specs): Likewise.\n+\t* c-format.h (format_length_info): Add new member scalar_identity_flag.\n+\n 2009-08-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/40718"}, {"sha": "6b14f4026c73a1c837b12e7f904475bb6b2d0e14", "filename": "gcc/c-format.c", "status": "modified", "additions": 47, "deletions": 31, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b241b4757b4d31f85be90cbcd205ec92e21ee864/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b241b4757b4d31f85be90cbcd205ec92e21ee864/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=b241b4757b4d31f85be90cbcd205ec92e21ee864", "patch": "@@ -259,6 +259,8 @@ typedef struct format_wanted_type\n   tree wanted_type;\n   /* The name of this type to use in diagnostics.  */\n   const char *wanted_type_name;\n+  /* Should be type checked just for scalar width identity.  */\n+  int scalar_identity_flag;\n   /* The level of indirection through pointers at which this type occurs.  */\n   int pointer_count;\n   /* Whether, when pointer_count is 1, to allow any character type when\n@@ -288,33 +290,33 @@ typedef struct format_wanted_type\n \n static const format_length_info printf_length_specs[] =\n {\n-  { \"h\", FMT_LEN_h, STD_C89, \"hh\", FMT_LEN_hh, STD_C99 },\n-  { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C9L },\n-  { \"q\", FMT_LEN_ll, STD_EXT, NO_FMT },\n-  { \"L\", FMT_LEN_L, STD_C89, NO_FMT },\n-  { \"z\", FMT_LEN_z, STD_C99, NO_FMT },\n-  { \"Z\", FMT_LEN_z, STD_EXT, NO_FMT },\n-  { \"t\", FMT_LEN_t, STD_C99, NO_FMT },\n-  { \"j\", FMT_LEN_j, STD_C99, NO_FMT },\n-  { \"H\", FMT_LEN_H, STD_EXT, NO_FMT },\n-  { \"D\", FMT_LEN_D, STD_EXT, \"DD\", FMT_LEN_DD, STD_EXT },\n-  { NO_FMT, NO_FMT }\n+  { \"h\", FMT_LEN_h, STD_C89, \"hh\", FMT_LEN_hh, STD_C99, 0 },\n+  { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C9L, 0 },\n+  { \"q\", FMT_LEN_ll, STD_EXT, NO_FMT, 0 },\n+  { \"L\", FMT_LEN_L, STD_C89, NO_FMT, 0 },\n+  { \"z\", FMT_LEN_z, STD_C99, NO_FMT, 0 },\n+  { \"Z\", FMT_LEN_z, STD_EXT, NO_FMT, 0 },\n+  { \"t\", FMT_LEN_t, STD_C99, NO_FMT, 0 },\n+  { \"j\", FMT_LEN_j, STD_C99, NO_FMT, 0 },\n+  { \"H\", FMT_LEN_H, STD_EXT, NO_FMT, 0 },\n+  { \"D\", FMT_LEN_D, STD_EXT, \"DD\", FMT_LEN_DD, STD_EXT, 0 },\n+  { NO_FMT, NO_FMT, 0 }\n };\n \n /* Length specifiers valid for asm_fprintf.  */\n static const format_length_info asm_fprintf_length_specs[] =\n {\n-  { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C89 },\n-  { \"w\", FMT_LEN_none, STD_C89, NO_FMT },\n-  { NO_FMT, NO_FMT }\n+  { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C89, 0 },\n+  { \"w\", FMT_LEN_none, STD_C89, NO_FMT, 0 },\n+  { NO_FMT, NO_FMT, 0 }\n };\n \n /* Length specifiers valid for GCC diagnostics.  */\n static const format_length_info gcc_diag_length_specs[] =\n {\n-  { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C89 },\n-  { \"w\", FMT_LEN_none, STD_C89, NO_FMT },\n-  { NO_FMT, NO_FMT }\n+  { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C89, 0 },\n+  { \"w\", FMT_LEN_none, STD_C89, NO_FMT, 0 },\n+  { NO_FMT, NO_FMT, 0 }\n };\n \n /* The custom diagnostics all accept the same length specifiers.  */\n@@ -325,16 +327,16 @@ static const format_length_info gcc_diag_length_specs[] =\n /* This differs from printf_length_specs only in that \"Z\" is not accepted.  */\n static const format_length_info scanf_length_specs[] =\n {\n-  { \"h\", FMT_LEN_h, STD_C89, \"hh\", FMT_LEN_hh, STD_C99 },\n-  { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C9L },\n-  { \"q\", FMT_LEN_ll, STD_EXT, NO_FMT },\n-  { \"L\", FMT_LEN_L, STD_C89, NO_FMT },\n-  { \"z\", FMT_LEN_z, STD_C99, NO_FMT },\n-  { \"t\", FMT_LEN_t, STD_C99, NO_FMT },\n-  { \"j\", FMT_LEN_j, STD_C99, NO_FMT },\n-  { \"H\", FMT_LEN_H, STD_EXT, NO_FMT },\n-  { \"D\", FMT_LEN_D, STD_EXT, \"DD\", FMT_LEN_DD, STD_EXT },\n-  { NO_FMT, NO_FMT }\n+  { \"h\", FMT_LEN_h, STD_C89, \"hh\", FMT_LEN_hh, STD_C99, 0 },\n+  { \"l\", FMT_LEN_l, STD_C89, \"ll\", FMT_LEN_ll, STD_C9L, 0 },\n+  { \"q\", FMT_LEN_ll, STD_EXT, NO_FMT, 0 },\n+  { \"L\", FMT_LEN_L, STD_C89, NO_FMT, 0 },\n+  { \"z\", FMT_LEN_z, STD_C99, NO_FMT, 0 },\n+  { \"t\", FMT_LEN_t, STD_C99, NO_FMT, 0 },\n+  { \"j\", FMT_LEN_j, STD_C99, NO_FMT, 0 },\n+  { \"H\", FMT_LEN_H, STD_EXT, NO_FMT, 0 },\n+  { \"D\", FMT_LEN_D, STD_EXT, \"DD\", FMT_LEN_DD, STD_EXT, 0 },\n+  { NO_FMT, NO_FMT, 0 }\n };\n \n \n@@ -343,16 +345,16 @@ static const format_length_info scanf_length_specs[] =\n static const format_length_info strfmon_length_specs[] =\n {\n   /* A GNU extension.  */\n-  { \"L\", FMT_LEN_L, STD_C89, NO_FMT },\n-  { NO_FMT, NO_FMT }\n+  { \"L\", FMT_LEN_L, STD_C89, NO_FMT, 0 },\n+  { NO_FMT, NO_FMT, 0 }\n };\n \n \n /* For now, the Fortran front-end routines only use l as length modifier.  */\n static const format_length_info gcc_gfc_length_specs[] =\n {\n-  { \"l\", FMT_LEN_l, STD_C89, NO_FMT },\n-  { NO_FMT, NO_FMT }\n+  { \"l\", FMT_LEN_l, STD_C89, NO_FMT, 0 },\n+  { NO_FMT, NO_FMT, 0 }\n };\n \n \n@@ -1479,6 +1481,7 @@ check_format_info_main (format_check_results *res,\n       const format_char_info *fci = NULL;\n       char flag_chars[256];\n       int alloc_flag = 0;\n+      int scalar_identity_flag = 0;\n       const char *format_start = format_chars;\n       if (*format_chars == 0)\n \t{\n@@ -1612,6 +1615,7 @@ check_format_info_main (format_check_results *res,\n \t\t  width_wanted_type.wanted_type_name = NULL;\n \t\t  width_wanted_type.pointer_count = 0;\n \t\t  width_wanted_type.char_lenient_flag = 0;\n+\t\t  width_wanted_type.scalar_identity_flag = 0;\n \t\t  width_wanted_type.writing_in_flag = 0;\n \t\t  width_wanted_type.reading_from_flag = 0;\n \t\t  width_wanted_type.name = _(\"field width\");\n@@ -1714,6 +1718,7 @@ check_format_info_main (format_check_results *res,\n \t\t  precision_wanted_type.wanted_type_name = NULL;\n \t\t  precision_wanted_type.pointer_count = 0;\n \t\t  precision_wanted_type.char_lenient_flag = 0;\n+\t\t  precision_wanted_type.scalar_identity_flag = 0;\n \t\t  precision_wanted_type.writing_in_flag = 0;\n \t\t  precision_wanted_type.reading_from_flag = 0;\n \t\t  precision_wanted_type.name = _(\"field precision\");\n@@ -1767,6 +1772,7 @@ check_format_info_main (format_check_results *res,\n       length_chars = NULL;\n       length_chars_val = FMT_LEN_none;\n       length_chars_std = STD_C89;\n+      scalar_identity_flag = 0;\n       if (fli)\n \t{\n \t  while (fli->name != 0 \n@@ -1787,6 +1793,7 @@ check_format_info_main (format_check_results *res,\n \t\t  length_chars = fli->name;\n \t\t  length_chars_val = fli->index;\n \t\t  length_chars_std = fli->std;\n+\t\t  scalar_identity_flag = fli->scalar_identity_flag;\n \t\t}\n \t      i = strlen (flag_chars);\n \t      flag_chars[i++] = fki->length_code_char;\n@@ -2075,6 +2082,9 @@ check_format_info_main (format_check_results *res,\n \t      wanted_type_ptr->char_lenient_flag = 0;\n \t      if (strchr (fci->flags2, 'c') != 0)\n \t\twanted_type_ptr->char_lenient_flag = 1;\n+\t      wanted_type_ptr->scalar_identity_flag = 0;\n+\t      if (scalar_identity_flag)\n+\t\twanted_type_ptr->scalar_identity_flag = 1;\n \t      wanted_type_ptr->writing_in_flag = 0;\n \t      wanted_type_ptr->reading_from_flag = 0;\n \t      if (alloc_flag)\n@@ -2259,6 +2269,12 @@ check_format_types (format_wanted_type *types, const char *format_start,\n \t  && (!pedantic || i < 2)\n \t  && char_type_flag)\n \tcontinue;\n+      if (types->scalar_identity_flag\n+\t  && (TREE_CODE (cur_type) == TREE_CODE (wanted_type)\n+\t      || (INTEGRAL_TYPE_P (cur_type)\n+\t\t  && INTEGRAL_TYPE_P (wanted_type)))\n+\t  && TYPE_PRECISION (cur_type) == TYPE_PRECISION (wanted_type))\n+\tcontinue;\n       /* Now we have a type mismatch.  */\n       format_type_warning (types->name, format_start, format_length,\n \t\t\t   wanted_type, types->pointer_count,"}, {"sha": "9d01f0af495456caceb20c79323fa9bb3a4d1f6e", "filename": "gcc/c-format.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b241b4757b4d31f85be90cbcd205ec92e21ee864/gcc%2Fc-format.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b241b4757b4d31f85be90cbcd205ec92e21ee864/gcc%2Fc-format.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.h?ref=b241b4757b4d31f85be90cbcd205ec92e21ee864", "patch": "@@ -96,6 +96,10 @@ typedef struct\n   const char *double_name;\n   enum format_lengths double_index;\n   enum format_std_version double_std;\n+\n+  /* If this flag is set, just scalar width identity is checked, and\n+     not the type identity itself.  */\n+  int scalar_identity_flag;\n } format_length_info;\n \n "}, {"sha": "020cdb3c89789f4a57e06ceba40fd8924bf373ed", "filename": "gcc/config/i386/msformat-c.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b241b4757b4d31f85be90cbcd205ec92e21ee864/gcc%2Fconfig%2Fi386%2Fmsformat-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b241b4757b4d31f85be90cbcd205ec92e21ee864/gcc%2Fconfig%2Fi386%2Fmsformat-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmsformat-c.c?ref=b241b4757b4d31f85be90cbcd205ec92e21ee864", "patch": "@@ -36,12 +36,12 @@ along with GCC; see the file COPYING3.  If not see\n \n static format_length_info ms_printf_length_specs[] =\n {\n-  { \"h\", FMT_LEN_h, STD_C89, NULL, FMT_LEN_none, STD_C89 },\n-  { \"l\", FMT_LEN_l, STD_C89, NULL, FMT_LEN_none, STD_C89 },\n-  { \"I32\", FMT_LEN_l, STD_EXT, NULL, FMT_LEN_none, STD_C89 },\n-  { \"I64\", FMT_LEN_ll, STD_EXT, NULL, FMT_LEN_none, STD_C89 },\n-  { \"I\", FMT_LEN_L, STD_EXT, NULL, FMT_LEN_none, STD_C89 },\n-  { NULL, FMT_LEN_none, STD_C89, NULL, FMT_LEN_none, STD_C89 }\n+  { \"h\", FMT_LEN_h, STD_C89, NULL, FMT_LEN_none, STD_C89, 0 },\n+  { \"l\", FMT_LEN_l, STD_C89, NULL, FMT_LEN_none, STD_C89, 0 },\n+  { \"I32\", FMT_LEN_l, STD_EXT, NULL, FMT_LEN_none, STD_C89, 1 },\n+  { \"I64\", FMT_LEN_ll, STD_EXT, NULL, FMT_LEN_none, STD_C89, 1 },\n+  { \"I\", FMT_LEN_L, STD_EXT, NULL, FMT_LEN_none, STD_C89, 0 },\n+  { NULL, FMT_LEN_none, STD_C89, NULL, FMT_LEN_none, STD_C89, 0 }\n };\n \n static const format_flag_spec ms_printf_flag_specs[] ="}, {"sha": "896c6819e579fdd30d13fc4b4b5ae2c31682d2b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b241b4757b4d31f85be90cbcd205ec92e21ee864/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b241b4757b4d31f85be90cbcd205ec92e21ee864/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b241b4757b4d31f85be90cbcd205ec92e21ee864", "patch": "@@ -1,3 +1,10 @@\n+2009-08-24  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t*gcc.dg/format/ms-format1.c: Add new cases for I32\n+\twidth specifier.\n+\t*gcc.dg/format/ms-format2.c: New test about illegal\n+\tuse of I32/I64 width specifier.\n+\n 2009-08-23  Jerry DeLisle   <jvdelisle@gcc.gnu.org>\n \n \t* gfortran.dg/fmt_error_7.f: New test."}, {"sha": "e8f739dce35ff064445ce0aaa017d35f4db8a9c2", "filename": "gcc/testsuite/gcc.dg/format/ms-format1.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b241b4757b4d31f85be90cbcd205ec92e21ee864/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms-format1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b241b4757b4d31f85be90cbcd205ec92e21ee864/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms-format1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms-format1.c?ref=b241b4757b4d31f85be90cbcd205ec92e21ee864", "patch": "@@ -8,10 +8,16 @@\n #define USE_SYSTEM_FORMATS\n #include \"format.h\"\n \n+enum en1 { A=0, B=1 };\n+typedef enum { _A=0, _B=1 } en2;\n+\n void\n-foo (int i, long long ll, size_t z)\n+foo (int i, long l, long long ll, size_t z, enum en1 e1, en2 e2)\n {\n   printf (\"%I32d\", i);\n+  printf (\"%I32d\", l);\n+  printf (\"%I32d\", e1);\n+  printf (\"%I32d\", e2);\n   printf (\"%I64x\", ll);\n   printf (\"%Ix\", z);\n }"}, {"sha": "5c950522a7ca7d47de520605619c56153a97267a", "filename": "gcc/testsuite/gcc.dg/format/ms-format2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b241b4757b4d31f85be90cbcd205ec92e21ee864/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms-format2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b241b4757b4d31f85be90cbcd205ec92e21ee864/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms-format2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms-format2.c?ref=b241b4757b4d31f85be90cbcd205ec92e21ee864", "patch": "@@ -0,0 +1,23 @@\n+/* Test for printf formats.  Formats using extensions to the standard\n+   should be rejected in strict pedantic mode. But allowed by -Wno-pedantic-ms-format.\n+*/\n+/* Origin: Kai Tietz <kai.tietz@onevision.com> */\n+/* { dg-do compile { target { *-*-mingw* } } } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic -Wformat -Wno-pedantic-ms-format\" } */\n+\n+#define USE_SYSTEM_FORMATS\n+#include \"format.h\"\n+\n+#ifdef _WIN64\n+#define XXX \"%I64x\"\n+#else\n+#define XXX \"%I32x\"\n+#endif\n+\n+void\n+foo (float f, double d, void *p)\n+{\n+  printf (XXX, p); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%I32x\", f); /* { dg-warning \"format\" \"bad argument types\" } */\n+  printf (\"%I64x\", d); /* { dg-warning \"format\" \"bad argument types\" } */\n+}"}]}