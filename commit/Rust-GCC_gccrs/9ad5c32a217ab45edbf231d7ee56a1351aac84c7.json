{"sha": "9ad5c32a217ab45edbf231d7ee56a1351aac84c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWFkNWMzMmEyMTdhYjQ1ZWRiZjIzMWQ3ZWU1NmExMzUxYWFjODRjNw==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2016-09-21T10:07:06Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2016-09-21T10:07:06Z"}, "message": "Use rand_s on MinGW-w64, fix array bound overflow.\n\n2016-09-21  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* intrinsics/random.c (getosrandom): Use rand_s() on\n\tMinGW-w64. Fix bounds overflow in fallback code.\n\nFrom-SVN: r240309", "tree": {"sha": "d7543e41b04c30c8b50d74579cede77792e804c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7543e41b04c30c8b50d74579cede77792e804c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ad5c32a217ab45edbf231d7ee56a1351aac84c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad5c32a217ab45edbf231d7ee56a1351aac84c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad5c32a217ab45edbf231d7ee56a1351aac84c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad5c32a217ab45edbf231d7ee56a1351aac84c7/comments", "author": null, "committer": null, "parents": [{"sha": "bc084f84b3baee7b9fdc73cc05b6aa8adf1e97e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc084f84b3baee7b9fdc73cc05b6aa8adf1e97e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc084f84b3baee7b9fdc73cc05b6aa8adf1e97e5"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "3edd9eda2d5a446cc88f65392fb5f2473f79ee64", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad5c32a217ab45edbf231d7ee56a1351aac84c7/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad5c32a217ab45edbf231d7ee56a1351aac84c7/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=9ad5c32a217ab45edbf231d7ee56a1351aac84c7", "patch": "@@ -1,3 +1,8 @@\n+2016-09-21  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* intrinsics/random.c (getosrandom): Use rand_s() on\n+\tMinGW-w64. Fix bounds overflow in fallback code.\n+\n 2016-09-19  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \t* caf/libcaf.h: Add caf_reference_type."}, {"sha": "00f1cb15ae5b2342e4766c4bee593642aee206c5", "filename": "libgfortran/intrinsics/random.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ad5c32a217ab45edbf231d7ee56a1351aac84c7/libgfortran%2Fintrinsics%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ad5c32a217ab45edbf231d7ee56a1351aac84c7/libgfortran%2Fintrinsics%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom.c?ref=9ad5c32a217ab45edbf231d7ee56a1351aac84c7", "patch": "@@ -24,6 +24,9 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n+/* For rand_s.  */\n+#define _CRT_RAND_S\n+\n #include \"libgfortran.h\"\n #include <gthr.h>\n #include <string.h>\n@@ -43,6 +46,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifdef __MINGW32__\n #define HAVE_GETPID 1\n #include <process.h>\n+#include <_mingw.h> /* For __MINGW64_VERSION_MAJOR  */\n #endif\n \n extern void random_r4 (GFC_REAL_4 *);\n@@ -281,7 +285,7 @@ jump (xorshift1024star_state* rs)\n #define Q 127773 /* M / A (To avoid overflow on A * seed) */\n #define R 2836   /* M % A (To avoid overflow on A * seed) */\n \n-static uint32_t\n+__attribute__((unused)) static uint32_t\n lcg_parkmiller(uint32_t seed)\n {\n     uint32_t hi = seed / Q;\n@@ -297,14 +301,21 @@ lcg_parkmiller(uint32_t seed)\n #undef Q\n #undef R\n \n+\n /* Get some random bytes from the operating system in order to seed\n    the PRNG.  */\n \n static int\n getosrandom (void *buf, size_t buflen)\n {\n-  /* TODO: On Windows one could use CryptGenRandom\n-\n+  /* rand_s is available in MinGW-w64 but not plain MinGW.  */\n+#ifdef __MINGW64_VERSION_MAJOR\n+  unsigned int* b = buf;\n+  for (unsigned i = 0; i < buflen / sizeof (unsigned int); i++)\n+    rand_s (&b[i]);\n+  return buflen;\n+#else\n+  /*\n      TODO: When glibc adds a wrapper for the getrandom() system call\n      on Linux, one could use that.\n \n@@ -333,12 +344,13 @@ getosrandom (void *buf, size_t buflen)\n   seed ^= pid;\n #endif\n   uint32_t* ub = buf;\n-  for (size_t i = 0; i < buflen; i++)\n+  for (size_t i = 0; i < buflen / sizeof (uint32_t); i++)\n     {\n       ub[i] = seed;\n       seed = lcg_parkmiller (seed);\n     }\n   return buflen;\n+#endif /* __MINGW64_VERSION_MAJOR  */\n }\n \n "}]}