{"sha": "87774eb0aea1de69a1fcbcd010496ce75f54bad7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc3NzRlYjBhZWExZGU2OWExZmNiY2QwMTA0OTZjZTc1ZjU0YmFkNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-09-10T10:46:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-09-10T10:46:14Z"}, "message": "Initial revision\n\nFrom-SVN: r8072", "tree": {"sha": "297b85102ddf00553b5f0249313fc7b0cb896333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/297b85102ddf00553b5f0249313fc7b0cb896333"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87774eb0aea1de69a1fcbcd010496ce75f54bad7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87774eb0aea1de69a1fcbcd010496ce75f54bad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87774eb0aea1de69a1fcbcd010496ce75f54bad7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87774eb0aea1de69a1fcbcd010496ce75f54bad7/comments", "author": null, "committer": null, "parents": [{"sha": "caec8cf4d7f353c4a5318043110d44eafbf1157f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caec8cf4d7f353c4a5318043110d44eafbf1157f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caec8cf4d7f353c4a5318043110d44eafbf1157f"}], "stats": {"total": 204, "additions": 204, "deletions": 0}, "files": [{"sha": "763c5f0adcc346d8f8c3a1374dd92c694b18f5a8", "filename": "gcc/config/i386/seq2-sysv3.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87774eb0aea1de69a1fcbcd010496ce75f54bad7/gcc%2Fconfig%2Fi386%2Fseq2-sysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87774eb0aea1de69a1fcbcd010496ce75f54bad7/gcc%2Fconfig%2Fi386%2Fseq2-sysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fseq2-sysv3.h?ref=87774eb0aea1de69a1fcbcd010496ce75f54bad7", "patch": "@@ -0,0 +1,8 @@\n+/* Sequent DYNIX/ptx 2.x (SVr3) */\n+\n+#include \"i386/seq-sysv3.h\"\n+\n+/* Use atexit for static destructors, instead of defining\n+   our own exit function.  */\n+#define HAVE_ATEXIT\n+"}, {"sha": "7cac092d40138e6af39477fb143c88f7898074f6", "filename": "gcc/fixinc.ptx", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87774eb0aea1de69a1fcbcd010496ce75f54bad7/gcc%2Ffixinc.ptx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87774eb0aea1de69a1fcbcd010496ce75f54bad7/gcc%2Ffixinc.ptx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc.ptx?ref=87774eb0aea1de69a1fcbcd010496ce75f54bad7", "patch": "@@ -0,0 +1,196 @@\n+#! /bin/sh\n+# Install modified versions of certain ANSI-incompatible\n+# native Sequent DYNIX/ptx System V Release 3.2 system include files.\n+# Copyright (C) 1994 Free Software Foundation, Inc.\n+# Contributed by Bill Burton <billb@progress.com>\n+# Portions adapted from fixinc.svr4 and fixincludes.\n+#\n+# This file is part of GNU CC.\n+# \n+# GNU CC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2, or (at your option)\n+# any later version.\n+# \n+# GNU CC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GNU CC; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n+#\n+#\tThis script munges the native include files provided with DYNIX/ptx\n+#\tso as to remove things which are violations of the ANSI C standard.\n+#\tThis is done by first running fixinc.svr4 which does most of the\n+#\twork.  A few includes have fixes made to them afterwards  by this\n+#\tscript.  Once munged, the resulting new system include files are\n+#\tplaced in a directory that GNU C will search *before* searching the\n+#\t/usr/include directory. This script should work properly for most\n+#\tDYNIX/ptx systems.  For other types of systems, you should use the\n+#\t`fixincludes' script instead.\n+#\n+#\tSee README-fixinc for more information.\n+\n+# Directory containing the original header files.\n+INPUT=${2-${INPUT-/usr/include}}\n+\n+# Fail if no arg to specify a directory for the output.\n+if [ x$1 = x ]\n+then echo fixincludes: no output directory specified\n+exit 1\n+fi\n+\n+# Directory in which to store the results.\n+LIB=${1?\"fixincludes: output directory not specified\"}\n+\n+# Make sure it exists.\n+if [ ! -d $LIB ]; then\n+  mkdir $LIB || exit 1\n+fi\n+\n+ORIG_DIR=`pwd`\n+\n+# Make LIB absolute if it is relative.\n+# Don't do this if not necessary, since may screw up automounters.\n+case $LIB in\n+/*)\n+\t;;\n+*)\n+ \tLIB=$ORIG_DIR/$LIB\n+\t;;\n+esac\n+\n+echo 'Running fixinc.svr4'\n+# DYNIX/ptx has dirname so this is no problem\n+`dirname $0`/fixinc.svr4 $*\n+echo 'Finished fixinc.svr4'\n+\n+echo 'Building fixincludes in ' ${LIB}\n+\n+# Copied from fixincludes.\n+# Don't use or define the name va_list in stdio.h.\n+# This is for ANSI and also to interoperate properly with gcc's varargs.h.\n+file=stdio.h\n+if [ -r $file ] && [ ! -r ${LIB}/$file ]; then\n+  cp $file ${LIB}/$file >/dev/null 2>&1 || echo \"Can't copy $file\"\n+  chmod +w ${LIB}/$file 2>/dev/null\n+  chmod a+r ${LIB}/$file 2>/dev/null\n+fi\n+\n+if [ -r ${LIB}/$file ]; then\n+  echo Fixing $file, use of va_list\n+  # Arrange for stdio.h to use stdarg.h to define __gnuc_va_list\n+  (echo \"#define __need___va_list\"\n+   echo \"#include <stdarg.h>\") > ${LIB}/${file}.sed\n+  # Use __gnuc_va_list in arg types in place of va_list.\n+  # On 386BSD use __gnuc_va_list instead of _VA_LIST_. We're hoping the\n+  # trailing parentheses and semicolon save all other systems from this.\n+  # Define __va_list__ (something harmless and unused) instead of va_list.\n+  # Don't claim to have defined va_list.\n+  sed -e 's@ va_list @ __gnuc_va_list @' \\\n+      -e 's@ va_list)@ __gnuc_va_list)@' \\\n+      -e 's@ _VA_LIST_));@ __gnuc_va_list));@' \\\n+      -e 's@ va_list@ __va_list__@' \\\n+      -e 's@\\*va_list@*__va_list__@' \\\n+      -e 's@ __va_list)@ __gnuc_va_list)@' \\\n+      -e 's@_NEED___VA_LIST@_NEED___Va_LIST@' \\\n+      -e 's@VA_LIST@DUMMY_VA_LIST@' \\\n+      -e 's@_NEED___Va_LIST@_NEED___VA_LIST@' \\\n+    ${LIB}/$file >> ${LIB}/${file}.sed\n+  \n+  rm -f ${LIB}/$file; mv ${LIB}/${file}.sed ${LIB}/$file\n+  if cmp $file ${LIB}/$file >/dev/null 2>&1; then\n+    rm -f ${LIB}/$file\n+  fi\n+fi\n+\n+# In pwd.h, PTX 1.x needs stdio.h included since FILE * was added in a\n+# prototype later on in the file.\n+file=pwd.h\n+base=`basename $file`\n+if [ -r ${LIB}/$file ]; then\n+  file_to_fix=${LIB}/$file\n+else\n+  if [ -r ${INPUT}/$file ]; then\n+    file_to_fix=${INPUT}/$file\n+  else\n+    file_to_fix=\"\"\n+  fi\n+fi\n+if [ \\! -z \"$file_to_fix\" ]; then\n+  echo Checking $file_to_fix\n+  if grep stdio $file_to_fix > /dev/null; then\n+    true\n+  else\n+    sed -e '/#include \\<sys\\types\\.h\\>/a\\\n+\\\n+#if defined(__STDC__) || defined(__cplusplus)\\\n+#include <stdio.h>\\\n+#endif  /* __STDC__ */' \\\n+    $file_to_fix > ${LIB}/${file}.sed\n+    rm -f ${LIB}/$file; mv ${LIB}/${file}.sed ${LIB}/$file\n+    echo Fixed $file_to_fix\n+  fi\n+fi\n+\n+# Copied from fixincludes.\n+# math.h puts the declaration of matherr before the definition\n+# of struct exception, so the prototype (added by fixproto) causes havoc.\n+file=math.h\n+if [ -r $file ] && [ ! -r ${LIB}/$file ]; then\n+  cp $file ${LIB}/$file >/dev/null 2>&1 || echo \"Can't copy $file\"\n+  chmod +w ${LIB}/$file 2>/dev/null\n+  chmod a+r ${LIB}/$file 2>/dev/null\n+fi\n+\n+if [ -r ${LIB}/$file ]; then\n+  echo Fixing $file, matherr declaration\n+  sed -e '/^struct exception/,$b' \\\n+      -e '/matherr/i\\\n+struct exception;\n+'\\\n+    ${LIB}/$file > ${LIB}/${file}.sed\n+  rm -f ${LIB}/$file; mv ${LIB}/${file}.sed ${LIB}/$file\n+  if cmp $file ${LIB}/$file >/dev/null 2>&1; then\n+    rm -f ${LIB}/$file\n+  fi\n+fi\n+\n+# In netinet/in.h, the network byte swapping asm functions supported by the\n+# native cc compiler on PTX 1.x and 2.x is not supported in gcc.  Instead,\n+# include <sys/byteorder.h> written out by the fixinc.svr4 script which has\n+# these same routines written in an asm format supported by gcc.\n+file=netinet/in.h\n+base=`basename $file`\n+if [ -r ${LIB}/$file ]; then\n+  file_to_fix=${LIB}/$file\n+else\n+  if [ -r ${INPUT}/$file ]; then\n+    file_to_fix=${INPUT}/$file\n+  else\n+    file_to_fix=\"\"\n+  fi\n+fi\n+if [ \\! -z \"$file_to_fix\" ]; then\n+  echo Checking $file_to_fix\n+  if grep __GNUC__ $file_to_fix > /dev/null; then\n+    true\n+  else\n+    sed -e '/#define NETSWAP/a\\\n+\\\n+#if defined (__GNUC__) || defined (__GNUG__)\\\n+#include <sys/byteorder.h>\\\n+#else  /* not __GNUC__ */\\\n+' \\\n+    -e '/#endif[ \t]*\\/\\* NETSWAP \\*\\//i\\\n+#endif /* not __GNUC__ */' \\\n+    $file_to_fix > ${LIB}/${file}.sed\n+    rm -f ${LIB}/$file; mv ${LIB}/${file}.sed ${LIB}/$file\n+    echo Fixed $file_to_fix\n+  fi\n+fi\n+\n+exit 0\n+"}]}