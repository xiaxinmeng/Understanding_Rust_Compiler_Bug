{"sha": "869fb813039e8933a85f5f2a3a53cde156030b0a", "node_id": "C_kwDOANBUbNoAKDg2OWZiODEzMDM5ZTg5MzNhODVmNWYyYTNhNTNjZGUxNTYwMzBiMGE", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-02-07T02:25:25Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-02-09T04:13:11Z"}, "message": "compiler: recognize Go 1.18 runtime/internal/atomic methods\n\nThe Go 1.18 library introduces specific types in runtime/internal/atomic.\nRecognize and optimize the methods on those types, as we do with the\nfunctions in runtime/internal/atomic.\n\nWhile we're here avoid getting confused by methods in any other\npackage that we recognize specially.\n\n\t* go-gcc.cc (Gcc_backend::Gcc_backend): Define builtins\n\t__atomic_load_1 and __atomic_store_1.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/383654", "tree": {"sha": "ac6fbc1784a8cfd0c39e029b8e079de3789ceec7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac6fbc1784a8cfd0c39e029b8e079de3789ceec7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/869fb813039e8933a85f5f2a3a53cde156030b0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/869fb813039e8933a85f5f2a3a53cde156030b0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/869fb813039e8933a85f5f2a3a53cde156030b0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/869fb813039e8933a85f5f2a3a53cde156030b0a/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab49b1c822cf8c5748fa4de0ac970c948de6f8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a"}], "stats": {"total": 176, "additions": 174, "deletions": 2}, "files": [{"sha": "f3de7a8c183d33986d20a08759ff6d9f9b27981c", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/869fb813039e8933a85f5f2a3a53cde156030b0a/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/869fb813039e8933a85f5f2a3a53cde156030b0a/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=869fb813039e8933a85f5f2a3a53cde156030b0a", "patch": "@@ -897,6 +897,20 @@ Gcc_backend::Gcc_backend()\n   this->define_builtin(BUILT_IN_ATOMIC_ADD_FETCH_8, \"__atomic_add_fetch_8\", NULL,\n                        t, 0);\n \n+  t = build_function_type_list(unsigned_char_type_node,\n+\t\t\t       ptr_type_node,\n+\t\t\t       integer_type_node,\n+\t\t\t       NULL_TREE);\n+  this->define_builtin(BUILT_IN_ATOMIC_LOAD_1, \"__atomic_load_1\", NULL, t, 0);\n+\n+  t = build_function_type_list(void_type_node,\n+\t\t\t       ptr_type_node,\n+\t\t\t       unsigned_char_type_node,\n+\t\t\t       integer_type_node,\n+\t\t\t       NULL_TREE);\n+  this->define_builtin(BUILT_IN_ATOMIC_STORE_1, \"__atomic_store_1\", NULL,\n+\t\t       t, 0);\n+\n   t = build_function_type_list(unsigned_char_type_node,\n                                ptr_type_node,\n                                unsigned_char_type_node,"}, {"sha": "9cd22ef011e01b5e8e161f0049ea87d79dafc266", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/869fb813039e8933a85f5f2a3a53cde156030b0a/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/869fb813039e8933a85f5f2a3a53cde156030b0a/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=869fb813039e8933a85f5f2a3a53cde156030b0a", "patch": "@@ -1,4 +1,4 @@\n-262cb89fd5ed82ab135a3933b2ddf4eb67683149\n+3b1e46937d11b043d0986a3dfefaee27454c3da0\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "d7b64767a0086229103d90da13d5346fe655f61d", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 155, "deletions": 1, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/869fb813039e8933a85f5f2a3a53cde156030b0a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/869fb813039e8933a85f5f2a3a53cde156030b0a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=869fb813039e8933a85f5f2a3a53cde156030b0a", "patch": "@@ -11613,12 +11613,16 @@ Call_expression::intrinsify(Gogo* gogo,\n   std::string package = (no->package() != NULL\n                          ? no->package()->pkgpath()\n                          : gogo->pkgpath());\n+  bool is_method = ((no->is_function() && no->func_value()->is_method())\n+\t\t    || (no->is_function_declaration()\n+\t\t\t&& no->func_declaration_value()->is_method()));\n   Location loc = this->location();\n \n   Type* int_type = Type::lookup_integer_type(\"int\");\n   Type* int32_type = Type::lookup_integer_type(\"int32\");\n   Type* int64_type = Type::lookup_integer_type(\"int64\");\n   Type* uint_type = Type::lookup_integer_type(\"uint\");\n+  Type* uint8_type = Type::lookup_integer_type(\"uint8\");\n   Type* uint32_type = Type::lookup_integer_type(\"uint32\");\n   Type* uint64_type = Type::lookup_integer_type(\"uint64\");\n   Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n@@ -11629,6 +11633,9 @@ Call_expression::intrinsify(Gogo* gogo,\n \n   if (package == \"sync/atomic\")\n     {\n+      if (is_method)\n+\treturn NULL;\n+\n       // sync/atomic functions and runtime/internal/atomic functions\n       // are very similar. In order not to duplicate code, we just\n       // redirect to the latter and let the code below to handle them.\n@@ -11694,6 +11701,9 @@ Call_expression::intrinsify(Gogo* gogo,\n \n   if (package == \"runtime/internal/sys\")\n     {\n+      if (is_method)\n+\treturn NULL;\n+\n       // runtime/internal/sys functions and math/bits functions\n       // are very similar. In order not to duplicate code, we just\n       // redirect to the latter and let the code below to handle them.\n@@ -11713,6 +11723,9 @@ Call_expression::intrinsify(Gogo* gogo,\n \n   if (package == \"runtime\")\n     {\n+      if (is_method)\n+\treturn NULL;\n+\n       // Handle a couple of special runtime functions.  In the runtime\n       // package, getcallerpc returns the PC of the caller, and\n       // getcallersp returns the frame pointer of the caller.  Implement\n@@ -11743,6 +11756,9 @@ Call_expression::intrinsify(Gogo* gogo,\n     }\n   else if (package == \"math/bits\")\n     {\n+      if (is_method)\n+\treturn NULL;\n+\n       if ((name == \"ReverseBytes16\" || name == \"ReverseBytes32\"\n            || name == \"ReverseBytes64\" || name == \"ReverseBytes\")\n           && this->args_ != NULL && this->args_->size() == 1)\n@@ -11913,9 +11929,137 @@ Call_expression::intrinsify(Gogo* gogo,\n     {\n       int memorder = __ATOMIC_SEQ_CST;\n \n+      if (is_method)\n+\t{\n+\t  Function_type* ftype = (no->is_function()\n+\t\t\t\t  ? no->func_value()->type()\n+\t\t\t\t  : no->func_declaration_value()->type());\n+\t  Type* rtype = ftype->receiver()->type()->deref();\n+\t  go_assert(rtype->named_type() != NULL);\n+\t  const std::string& rname(rtype->named_type()->name());\n+\t  if (rname == \"Int32\")\n+\t    {\n+\t      if (name == \"Load\")\n+\t\tname = \"LoadInt32\";\n+\t      else if (name == \"Store\")\n+\t\tname = \"Storeint32\";\n+\t      else if (name == \"CompareAndSwap\")\n+\t\tname = \"Casint32\";\n+\t      else if (name == \"Swap\")\n+\t\tname = \"Xchgint32\";\n+\t      else if (name == \"Add\")\n+\t\tname = \"Xaddint32\";\n+\t      else\n+\t\tgo_unreachable();\n+\t    }\n+\t  else if (rname == \"Int64\")\n+\t    {\n+\t      if (name == \"Load\")\n+\t\tname = \"LoadInt64\";\n+\t      else if (name == \"Store\")\n+\t\tname = \"Storeint64\";\n+\t      else if (name == \"CompareAndSwap\")\n+\t\tname = \"Casint64\";\n+\t      else if (name == \"Swap\")\n+\t\tname = \"Xchgint64\";\n+\t      else if (name == \"Add\")\n+\t\tname = \"Xaddint64\";\n+\t      else\n+\t\tgo_unreachable();\n+\t    }\n+\t  else if (rname == \"Uint8\")\n+\t    {\n+\t      if (name == \"Load\")\n+\t\tname = \"Load8\";\n+\t      else if (name == \"Store\")\n+\t\tname = \"Store8\";\n+\t      else if (name == \"And\")\n+\t\tname = \"And8\";\n+\t      else if (name == \"Or\")\n+\t\tname = \"Or8\";\n+\t      else\n+\t\tgo_unreachable();\n+\t    }\n+\t  else if (rname == \"Uint32\")\n+\t    {\n+\t      if (name == \"Load\")\n+\t\tname = \"Load\";\n+\t      else if (name == \"LoadAcquire\")\n+\t\tname = \"LoadAcq\";\n+\t      else if (name == \"Store\")\n+\t\tname = \"Store\";\n+\t      else if (name == \"CompareAndSwap\")\n+\t\tname = \"Cas\";\n+\t      else if (name == \"CompareAndSwapRelease\")\n+\t\tname = \"CasRel\";\n+\t      else if (name == \"Swap\")\n+\t\tname = \"Xchg\";\n+\t      else if (name == \"And\")\n+\t\tname = \"And\";\n+\t      else if (name == \"Or\")\n+\t\tname = \"Or\";\n+\t      else if (name == \"Add\")\n+\t\tname = \"Xadd\";\n+\t      else\n+\t\tgo_unreachable();\n+\t    }\n+\t  else if (rname == \"Uint64\")\n+\t    {\n+\t      if (name == \"Load\")\n+\t\tname = \"Load64\";\n+\t      else if (name == \"Store\")\n+\t\tname = \"Store64\";\n+\t      else if (name == \"CompareAndSwap\")\n+\t\tname = \"Cas64\";\n+\t      else if (name == \"Swap\")\n+\t\tname = \"Xchgt64\";\n+\t      else if (name == \"Add\")\n+\t\tname = \"Xadd64\";\n+\t      else\n+\t\tgo_unreachable();\n+\t    }\n+\t  else if (rname == \"Uintptr\")\n+\t    {\n+\t      if (name == \"Load\")\n+\t\tname = \"Loaduintptr\";\n+\t      else if (name == \"LoadAcquire\")\n+\t\tname = \"Loadacquintptr\";\n+\t      else if (name == \"Store\")\n+\t\tname = \"Storeuintptr\";\n+\t      else if (name == \"StoreRelease\")\n+\t\tname = \"StoreReluintptr\";\n+\t      else if (name == \"CompareAndSwap\")\n+\t\tname = \"Casuintptr\";\n+\t      else if (name == \"Swap\")\n+\t\tname = \"Xchguintptr\";\n+\t      else if (name == \"Add\")\n+\t\tname = \"Xadduintptr\";\n+\t      else\n+\t\tgo_unreachable();\n+\t    }\n+\t  else if (rname == \"Float64\")\n+\t    {\n+\t      // Needs unsafe type conversion.  Don't intrinsify for now.\n+\t      return NULL;\n+\t    }\n+\t  else if (rname == \"UnsafePointer\")\n+\t    {\n+\t      if (name == \"Load\")\n+\t\tname = \"Loadp\";\n+\t      else if (name == \"StoreNoWB\")\n+\t\tname = \"StorepoWB\";\n+\t      else if (name == \"CompareAndSwapNoWB\")\n+\t\tname = \"Casp1\";\n+\t      else\n+\t\tgo_unreachable();\n+\t    }\n+\t  else\n+\t    go_unreachable();\n+\t}\n+\n       if ((name == \"Load\" || name == \"Load64\" || name == \"Loadint64\" || name == \"Loadp\"\n            || name == \"Loaduint\" || name == \"Loaduintptr\" || name == \"LoadAcq\"\n-           || name == \"Loadint32\")\n+           || name == \"Loadint32\" || name == \"Load8\")\n           && this->args_ != NULL && this->args_->size() == 1)\n         {\n           if (int_size < 8 && (name == \"Load64\" || name == \"Loadint64\"))\n@@ -11972,6 +12116,11 @@ Call_expression::intrinsify(Gogo* gogo,\n               res_type = uint32_type;\n               memorder = __ATOMIC_ACQUIRE;\n             }\n+\t  else if (name == \"Load8\")\n+\t    {\n+\t      code = Runtime::ATOMIC_LOAD_1;\n+\t      res_type = uint8_type;\n+\t    }\n           else\n             go_unreachable();\n           Expression* a1 = this->args_->front();\n@@ -12012,6 +12161,8 @@ Call_expression::intrinsify(Gogo* gogo,\n               code = Runtime::ATOMIC_STORE_4;\n               memorder = __ATOMIC_RELEASE;\n             }\n+\t  else if (name == \"Store8\")\n+\t    code = Runtime::ATOMIC_STORE_1;\n           else\n             go_unreachable();\n           Expression* a3 = Expression::make_integer_ul(memorder, int32_type, loc);\n@@ -12179,6 +12330,9 @@ Call_expression::intrinsify(Gogo* gogo,\n     }\n   else if (package == \"internal/abi\")\n     {\n+      if (is_method)\n+\treturn NULL;\n+\n       if ((name == \"FuncPCABI0\" || name == \"FuncPCABIInternal\")\n \t  && this->args_ != NULL\n \t  && this->args_->size() == 1)"}, {"sha": "b7dd4456a253911967fb0368b983e2321c219ad0", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/869fb813039e8933a85f5f2a3a53cde156030b0a/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/869fb813039e8933a85f5f2a3a53cde156030b0a/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=869fb813039e8933a85f5f2a3a53cde156030b0a", "patch": "@@ -478,6 +478,10 @@ DEF_GO_RUNTIME(ATOMIC_ADD_FETCH_4, \"__atomic_add_fetch_4\",\n DEF_GO_RUNTIME(ATOMIC_ADD_FETCH_8, \"__atomic_add_fetch_8\",\n                P3(POINTER, UINT64, INT32),\n                R1(UINT64))\n+DEF_GO_RUNTIME(ATOMIC_LOAD_1, \"__atomic_load_1\", P2(POINTER, INT32),\n+\t       R1(UINT8))\n+DEF_GO_RUNTIME(ATOMIC_STORE_1, \"__atomic_store_1\", P3(POINTER, UINT8, INT32),\n+\t       R0())\n DEF_GO_RUNTIME(ATOMIC_AND_FETCH_1, \"__atomic_and_fetch_1\",\n                P3(POINTER, UINT8, INT32),\n                R1(UINT8))"}]}