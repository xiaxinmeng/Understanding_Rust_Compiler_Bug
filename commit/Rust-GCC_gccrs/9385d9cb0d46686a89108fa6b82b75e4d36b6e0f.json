{"sha": "9385d9cb0d46686a89108fa6b82b75e4d36b6e0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM4NWQ5Y2IwZDQ2Njg2YTg5MTA4ZmE2YjgyYjc1ZTRkMzZiNmUwZg==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2002-04-24T00:33:28Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2002-04-24T00:33:28Z"}, "message": "std_fstream.h (basic_filebuf::sync): Hoist unconditional flush on lower-layer handle to here...\n\n\t* include/std/std_fstream.h (basic_filebuf::sync): Hoist\n\tunconditional flush on lower-layer handle to here...\n\t* include/bits/fstream.tcc (basic_filebuf::_M_really_overflow):\n\t...from here.  Optimize remaining _M_file.sync() call pattern.\n\t* testsuite/27_io/narrow_stream_objects.cc (test04): New test.\n\t(test05): Likewise.\n\nFrom-SVN: r52699", "tree": {"sha": "c2e2fb49adde7393d30c2b4c38bf72c2cf4e18ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2e2fb49adde7393d30c2b4c38bf72c2cf4e18ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9385d9cb0d46686a89108fa6b82b75e4d36b6e0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9385d9cb0d46686a89108fa6b82b75e4d36b6e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9385d9cb0d46686a89108fa6b82b75e4d36b6e0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9385d9cb0d46686a89108fa6b82b75e4d36b6e0f/comments", "author": null, "committer": null, "parents": [{"sha": "b602511f62e6f05166194ce08c1c02b21960930b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b602511f62e6f05166194ce08c1c02b21960930b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b602511f62e6f05166194ce08c1c02b21960930b"}], "stats": {"total": 63, "additions": 56, "deletions": 7}, "files": [{"sha": "3e4eb3e16820cda3e610f778a81c773c1e899712", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9385d9cb0d46686a89108fa6b82b75e4d36b6e0f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9385d9cb0d46686a89108fa6b82b75e4d36b6e0f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9385d9cb0d46686a89108fa6b82b75e4d36b6e0f", "patch": "@@ -1,3 +1,12 @@\n+2002-04-23  Loren J. Rittle <ljrittle@acm.org>\n+\n+\t* include/std/std_fstream.h (basic_filebuf::sync): Hoist\n+\tunconditional flush on lower-layer handle to here...\n+\t* include/bits/fstream.tcc (basic_filebuf::_M_really_overflow):\n+\t...from here.  Optimize remaining _M_file.sync() call pattern.\n+\t* testsuite/27_io/narrow_stream_objects.cc (test04): New test.\n+\t(test05): Likewise.\n+\n 2002-04-23  Jason Merrill  <jason@redhat.com>\n \n \t* include/bits/fstream.tcc (basic_filebuf::seekoff): Fix for"}, {"sha": "740d5e2c4334b0313002b2c6435f8b7af1993261", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9385d9cb0d46686a89108fa6b82b75e4d36b6e0f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9385d9cb0d46686a89108fa6b82b75e4d36b6e0f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=9385d9cb0d46686a89108fa6b82b75e4d36b6e0f", "patch": "@@ -476,16 +476,20 @@ namespace std\n \t\t\t\t   __elen, __plen);\n \n \t  // Convert pending sequence to external representation, output.\n+\t  // If eof, then just attempt sync.\n \t  if (!traits_type::eq_int_type(__c, traits_type::eof()))\n \t    {\n \t      char_type __pending = traits_type::to_char_type(__c);\n \t      _M_convert_to_external(&__pending, 1, __elen, __plen);\n-\t    }\n \n-\t  // Last, sync internal and external buffers.\n-\t  // NB: Need this so that external byte sequence reflects\n-\t  // internal buffer plus pending sequence.\n-\t  if (__elen == __plen && !_M_file.sync())\n+\t      // User code must flush when switching modes (thus don't sync).\n+\t      if (__elen == __plen)\n+\t\t{\n+\t\t  _M_set_indeterminate();\n+\t\t  __ret = traits_type::not_eof(__c);\n+\t\t}\n+\t    }\n+\t  else if (!_M_file.sync())\n \t    {\n \t      _M_set_indeterminate();\n \t      __ret = traits_type::not_eof(__c);"}, {"sha": "ce3a48e90bc2fc64129ab0bbcb6e6eeac63d3329", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9385d9cb0d46686a89108fa6b82b75e4d36b6e0f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9385d9cb0d46686a89108fa6b82b75e4d36b6e0f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=9385d9cb0d46686a89108fa6b82b75e4d36b6e0f", "patch": "@@ -204,14 +204,16 @@ namespace std\n \n \t// Make sure that the internal buffer resyncs its idea of\n \t// the file position with the external file.\n-\tif (__testput && !_M_file.sync())\n+\tif (__testput)\n \t  {\n \t    // Need to restore current position after the write.\n \t    off_type __off = _M_out_cur - _M_out_end;\n-\t    _M_really_overflow();\n+\t    _M_really_overflow(); // _M_file.sync() will be called within\n \t    if (__off)\n \t      _M_file.seekoff(__off, ios_base::cur);\n \t  }\n+\telse\n+\t  _M_file.sync();\n \t_M_last_overflowed = false;\n \treturn 0;\n       }"}, {"sha": "3abcb07b47eef4f17f035f12ea4bf4661cda9c77", "filename": "libstdc++-v3/testsuite/27_io/narrow_stream_objects.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9385d9cb0d46686a89108fa6b82b75e4d36b6e0f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9385d9cb0d46686a89108fa6b82b75e4d36b6e0f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fnarrow_stream_objects.cc?ref=9385d9cb0d46686a89108fa6b82b75e4d36b6e0f", "patch": "@@ -113,12 +113,46 @@ void test03()\n   cout << \"i == \" << i << endl;\n }\n \n+// Interactive test, to be exercised as follows:\n+// assign stderr to stdout in shell command line,\n+// pipe stdout to cat process and/or redirect stdout to file.\n+// \"hello fine world\\n\" should be written to stdout in proper order.\n+// This is a version of the scott snyder test taken from:\n+// http://gcc.gnu.org/ml/libstdc++/1999-q4/msg00108.html\n+void test04()\n+{\n+  using namespace std;\n+\n+  cout << \"hello \";\n+  cout.flush ();\n+  cerr << \"fine \";\n+  cerr.flush ();\n+  cout << \"world\" << endl;\n+  cout.flush ();\n+}\n+\n+// Interactive test, to be exercised as follows:\n+// run test under truss(1) or strace(1).  Look at\n+// size and pattern of write system calls.\n+// Should be 2 or 3 write(1,[...]) calls when run interactively\n+// depending upon buffering mode enforced.\n+void test05()\n+{\n+  std::cout << \"hello\" << ' ' << \"world\" <<std::endl;\n+  std::cout << \"Enter your name: \";\n+  std::string s;\n+  std::cin >> s;\n+  std::cout << \"hello \" << s << std::endl;\n+}\n+\n int \n main()\n {\n   test01();\n \n   // test02();\n   // test03();\n+  // test04();\n+  // test05();\n   return 0;\n }"}]}