{"sha": "9fa1246d49a9fa706cd7abef8de096a61c0cb4fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZhMTI0NmQ0OWE5ZmE3MDZjZDdhYmVmOGRlMDk2YTYxYzBjYjRmYg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-07-06T23:03:03Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-07-06T23:03:03Z"}, "message": "cygwin32.h: Add some declaration of external functions.\n\nX\n\t* i386/cygwin32.h: Add some declaration of external functions.\n \t(ASM_DECLARE_FUNCTION_NAME): Define.\n\t(ASM_OUTPUT_EXTERNAL, ASM_OUTPUT_EXTERNAL_LIBCALL): Define.\n\t(ASM_FILE_END): Define.\n\t* i386/winnt.c (i386_pe_declare_function_type): New function.\n\t(struct extern_list, extern_head): Define.\n\t(i386_pe_record_external_function): New function.\n\t(i386_pe_asm_file_end): New function.\n\nFrom-SVN: r20977", "tree": {"sha": "2c120f2a5c443c9fdb1e2d5a76b3c1decb0318e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c120f2a5c443c9fdb1e2d5a76b3c1decb0318e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fa1246d49a9fa706cd7abef8de096a61c0cb4fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa1246d49a9fa706cd7abef8de096a61c0cb4fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa1246d49a9fa706cd7abef8de096a61c0cb4fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa1246d49a9fa706cd7abef8de096a61c0cb4fb/comments", "author": null, "committer": null, "parents": [{"sha": "672a233f2d8305ec123f5bcce4d67936077a7ae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672a233f2d8305ec123f5bcce4d67936077a7ae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/672a233f2d8305ec123f5bcce4d67936077a7ae1"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "2f4cc888f6660000b65238e334b8dade81910353", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa1246d49a9fa706cd7abef8de096a61c0cb4fb/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa1246d49a9fa706cd7abef8de096a61c0cb4fb/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=9fa1246d49a9fa706cd7abef8de096a61c0cb4fb", "patch": "@@ -100,3 +100,80 @@ i386_pe_unique_section (decl, reloc)\n \n   DECL_SECTION_NAME (decl) = build_string (len, string);\n }\n+\f\n+/* The Microsoft linker requires that every function be marked as\n+   DT_FCN.  When using gas on cygwin32, we must emit appropriate .type\n+   directives.  */\n+\n+#include \"gsyms.h\"\n+\n+/* Mark a function appropriately.  This should only be called for\n+   functions for which we are not emitting COFF debugging information.\n+   FILE is the assembler output file, NAME is the name of the\n+   function, and PUBLIC is non-zero if the function is globally\n+   visible.  */\n+\n+void\n+i386_pe_declare_function_type (file, name, public)\n+     FILE *file;\n+     char *name;\n+     int public;\n+{\n+  fprintf (file, \"\\t.def\\t\");\n+  assemble_name (file, name);\n+  fprintf (file, \";\\t.scl\\t%d;\\t.type\\t%d;\\t.endef\\n\",\n+\t   public ? (int) C_EXT : (int) C_STAT,\n+\t   (int) DT_FCN << N_BTSHFT);\n+}\n+\n+/* Keep a list of external functions.  */\n+\n+struct extern_list\n+{\n+  struct extern_list *next;\n+  char *name;\n+};\n+\n+static struct extern_list *extern_head;\n+\n+/* Assemble an external function reference.  We need to keep a list of\n+   these, so that we can output the function types at the end of the\n+   assembly.  We can't output the types now, because we might see a\n+   definition of the function later on and emit debugging information\n+   for it then.  */\n+\n+void\n+i386_pe_record_external_function (name)\n+     char *name;\n+{\n+  struct extern_list *p;\n+\n+  p = (struct extern_list *) permalloc (sizeof *p);\n+  p->next = extern_head;\n+  p->name = name;\n+  extern_head = p;\n+}\n+\n+/* This is called at the end of assembly.  For each external function\n+   which has not been defined, we output a declaration now.  */\n+\n+void\n+i386_pe_asm_file_end (file)\n+     FILE *file;\n+{\n+  struct extern_list *p;\n+\n+  for (p = extern_head; p != NULL; p = p->next)\n+    {\n+      tree decl;\n+\n+      decl = get_identifier (p->name);\n+\n+      /* Positively ensure only one declaration for any given symbol.  */\n+      if (! TREE_ASM_WRITTEN (decl))\n+\t{\n+\t  TREE_ASM_WRITTEN (decl) = 1;\n+\t  i386_pe_declare_function_type (file, p->name, TREE_PUBLIC (decl));\n+\t}\n+    }\n+}"}]}