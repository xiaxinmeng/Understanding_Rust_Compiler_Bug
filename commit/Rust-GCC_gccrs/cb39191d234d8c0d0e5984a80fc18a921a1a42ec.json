{"sha": "cb39191d234d8c0d0e5984a80fc18a921a1a42ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IzOTE5MWQyMzRkOGMwZDBlNTk4NGE4MGZjMThhOTIxYTFhNDJlYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-10T05:31:24Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-10T05:31:24Z"}, "message": "semantics.c (RECHAIN_STMTS): Remove `last' parameter.\n\n\t* semantics.c (RECHAIN_STMTS): Remove `last' parameter.\n\t(RECHAIN_STMTS_FROM_LAST): Remove.  Replace all uses with\n\tRECHAIN_STMTS.\n\t(RECHAIN_STMST_FROM_CHAIN): Likewise.\n\nFrom-SVN: r29256", "tree": {"sha": "82d7f9cc86a94154a96aa97a25fb6da924e7752a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82d7f9cc86a94154a96aa97a25fb6da924e7752a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb39191d234d8c0d0e5984a80fc18a921a1a42ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb39191d234d8c0d0e5984a80fc18a921a1a42ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb39191d234d8c0d0e5984a80fc18a921a1a42ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb39191d234d8c0d0e5984a80fc18a921a1a42ec/comments", "author": null, "committer": null, "parents": [{"sha": "f4e5c65b060c18ea208bb12ec72f936827ab859b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e5c65b060c18ea208bb12ec72f936827ab859b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e5c65b060c18ea208bb12ec72f936827ab859b"}], "stats": {"total": 55, "additions": 26, "deletions": 29}, "files": [{"sha": "d54dac40977d25790ef919d34051abf0d8aa5a69", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb39191d234d8c0d0e5984a80fc18a921a1a42ec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb39191d234d8c0d0e5984a80fc18a921a1a42ec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cb39191d234d8c0d0e5984a80fc18a921a1a42ec", "patch": "@@ -1,5 +1,10 @@\n 1999-09-09  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* semantics.c (RECHAIN_STMTS): Remove `last' parameter.\n+\t(RECHAIN_STMTS_FROM_LAST): Remove.  Replace all uses with\n+\tRECHAIN_STMTS. \n+\t(RECHAIN_STMST_FROM_CHAIN): Likewise.\n+\n \t* parse.y (simple_stmt): Fix typo in last change.\n \n \t* cp-tree.h (EXPR_STMT_ASSIGNS_THIS): New macro."}, {"sha": "771f7c8a830fb160d3286010c6aef026568c5395", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb39191d234d8c0d0e5984a80fc18a921a1a42ec/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb39191d234d8c0d0e5984a80fc18a921a1a42ec/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=cb39191d234d8c0d0e5984a80fc18a921a1a42ec", "patch": "@@ -53,25 +53,19 @@ static tree expand_cond PROTO((tree));\n    bottom-up.  This macro makes LAST_TREE the indicated SUBSTMT of\n    STMT.  */\n \n-#define RECHAIN_STMTS(stmt, substmt, last)\t\\\n-  do {\t\t\t\t\t\t\\\n-    substmt = last;\t\t\t        \\\n-    TREE_CHAIN (stmt) = NULL_TREE;\t\t\\\n-    last_tree = stmt;\t\t\t\t\\\n+#define RECHAIN_STMTS(stmt, substmt)\t\\\n+  do {\t\t\t\t\t\\\n+    substmt = TREE_CHAIN (stmt);\t\\\n+    TREE_CHAIN (stmt) = NULL_TREE;\t\\\n+    last_tree = stmt;\t\t\t\\\n   } while (0)\n \n-#define RECHAIN_STMTS_FROM_LAST(stmt, substmt)\t\\\n-  RECHAIN_STMTS (stmt, substmt, last_tree)\n-\n-#define RECHAIN_STMTS_FROM_CHAIN(stmt, substmt)\t\\\n-  RECHAIN_STMTS (stmt, substmt, TREE_CHAIN (stmt))\n-\n /* Finish processing the COND, the SUBSTMT condition for STMT.  */\n \n #define FINISH_COND(cond, stmt, substmt) \t\\\n   do {\t\t\t\t\t\t\\\n     if (last_tree != stmt)\t\t\t\\\n-      RECHAIN_STMTS_FROM_LAST (stmt, substmt);\t\\\n+      RECHAIN_STMTS (stmt, substmt);\t        \\\n     else\t\t\t\t\t\\\n       substmt = cond;\t\t\t\t\\\n   } while (0)\n@@ -196,8 +190,7 @@ finish_then_clause (if_stmt)\n {\n   if (building_stmt_tree ())\n     {\n-      RECHAIN_STMTS_FROM_CHAIN (if_stmt, \n-\t\t\t\tTHEN_CLAUSE (if_stmt));\n+      RECHAIN_STMTS (if_stmt, THEN_CLAUSE (if_stmt));\n       last_tree = if_stmt;\n       return if_stmt;\n     }\n@@ -222,7 +215,7 @@ finish_else_clause (if_stmt)\n      tree if_stmt;\n {\n   if (building_stmt_tree ())\n-    RECHAIN_STMTS_FROM_CHAIN (if_stmt, ELSE_CLAUSE (if_stmt));\n+    RECHAIN_STMTS (if_stmt, ELSE_CLAUSE (if_stmt));\n }\n \n /* Finsh an if-statement.  */\n@@ -298,7 +291,7 @@ finish_while_stmt (while_stmt)\n   do_poplevel ();\n \n   if (building_stmt_tree ())\n-    RECHAIN_STMTS_FROM_CHAIN (while_stmt, WHILE_BODY (while_stmt));\n+    RECHAIN_STMTS (while_stmt, WHILE_BODY (while_stmt));\n   else\n     expand_end_loop ();\n   finish_stmt ();\n@@ -332,7 +325,7 @@ finish_do_body (do_stmt)\n      tree do_stmt;\n {\n   if (building_stmt_tree ())\n-    RECHAIN_STMTS_FROM_CHAIN (do_stmt, DO_BODY (do_stmt));\n+    RECHAIN_STMTS (do_stmt, DO_BODY (do_stmt));\n   else\n     expand_loop_continue_here ();\n }\n@@ -411,7 +404,7 @@ finish_for_init_stmt (for_stmt)\n   if (building_stmt_tree ())\n     {\n       if (last_tree != for_stmt)\n-\tRECHAIN_STMTS_FROM_CHAIN (for_stmt, FOR_INIT_STMT (for_stmt));\n+\tRECHAIN_STMTS (for_stmt, FOR_INIT_STMT (for_stmt));\n     }\n   else\n     {\n@@ -479,7 +472,7 @@ finish_for_stmt (expr, for_stmt)\n   do_poplevel ();\n \n   if (building_stmt_tree ())\n-    RECHAIN_STMTS_FROM_CHAIN (for_stmt, FOR_BODY (for_stmt));\n+    RECHAIN_STMTS (for_stmt, FOR_BODY (for_stmt));\n   else\n     {\n       emit_line_note (input_filename, lineno);\n@@ -577,7 +570,7 @@ finish_switch_stmt (cond, switch_stmt)\n      tree switch_stmt;\n {\n   if (building_stmt_tree ())\n-    RECHAIN_STMTS_FROM_CHAIN (switch_stmt, SWITCH_BODY (switch_stmt));\n+    RECHAIN_STMTS (switch_stmt, SWITCH_BODY (switch_stmt));\n   else\n     expand_end_case (cond);\n   pop_momentary ();\n@@ -676,7 +669,7 @@ finish_try_block (try_block)\n      tree try_block;\n {\n   if (building_stmt_tree ())\n-    RECHAIN_STMTS_FROM_LAST (try_block, TRY_STMTS (try_block));\n+    RECHAIN_STMTS (try_block, TRY_STMTS (try_block));\n   else\n     expand_start_all_catch ();  \n }\n@@ -705,7 +698,7 @@ finish_function_try_block (try_block)\n      tree try_block; \n {\n   if (building_stmt_tree ())\n-    RECHAIN_STMTS_FROM_LAST (try_block, TRY_STMTS (try_block));\n+    RECHAIN_STMTS (try_block, TRY_STMTS (try_block));\n   else\n     {\n       end_protect_partials ();\n@@ -722,7 +715,7 @@ finish_handler_sequence (try_block)\n      tree try_block;\n {\n   if (building_stmt_tree ())\n-    RECHAIN_STMTS_FROM_CHAIN (try_block, TRY_HANDLERS (try_block));\n+    RECHAIN_STMTS (try_block, TRY_HANDLERS (try_block));\n   else\n     expand_end_all_catch ();\n }\n@@ -734,7 +727,7 @@ finish_function_handler_sequence (try_block)\n      tree try_block;\n {\n   if (building_stmt_tree ())\n-    RECHAIN_STMTS_FROM_CHAIN (try_block, TRY_HANDLERS (try_block));\n+    RECHAIN_STMTS (try_block, TRY_HANDLERS (try_block));\n   else\n     {\n       in_function_try_handler = 0;\n@@ -770,7 +763,7 @@ finish_handler_parms (handler)\n      tree handler;\n {\n   if (building_stmt_tree ())\n-    RECHAIN_STMTS_FROM_CHAIN (handler, HANDLER_PARMS (handler));\n+    RECHAIN_STMTS (handler, HANDLER_PARMS (handler));\n }\n \n /* Finish a handler, which may be given by HANDLER.  */\n@@ -780,7 +773,7 @@ finish_handler (handler)\n      tree handler;\n {\n   if (building_stmt_tree ())\n-    RECHAIN_STMTS_FROM_CHAIN (handler, HANDLER_BODY (handler));\n+    RECHAIN_STMTS (handler, HANDLER_BODY (handler));\n   else\n     expand_end_catch_block ();\n \n@@ -840,10 +833,9 @@ finish_compound_stmt (has_no_scope, compound_stmt)\n     r = NULL_TREE;\n \n   if (building_stmt_tree ())\n-    RECHAIN_STMTS_FROM_CHAIN (compound_stmt, \n-\t\t\t      COMPOUND_BODY (compound_stmt));\n+    RECHAIN_STMTS (compound_stmt, COMPOUND_BODY (compound_stmt));\n \n-  /* When we call finish_stmt we will lost LAST_EXPR_TYPE.  But, since\n+  /* When we call finish_stmt we will lose LAST_EXPR_TYPE.  But, since\n      the precise purpose of that variable is store the type of the\n      last expression statement within the last compound statement, we\n      preserve the value.  */"}]}