{"sha": "d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBhY2E2YWJkYmNiYWJjMTAzZGY3YTY1ZTFlMGRjYmJhZDVlMDU1ZQ==", "commit": {"author": {"name": "Andrey Belevantsev", "email": "abel@ispras.ru", "date": "2016-03-12T17:12:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-03-12T17:12:29Z"}, "message": "re PR rtl-optimization/69307 (wrong code with -O2 -fselective-scheduling @ armv7a)\n\n\tPR rtl-optimization/69307\n\t* sel-sched.c (choose_best_pseudo_reg): Properly check for hard\n\tregisters in modes that span more than one register.\n\n\tPR rtl-optimization/69307\n\t* gcc.dg/pr69307.c: New test.\n\nFrom-SVN: r234163", "tree": {"sha": "31fa6bab43160c4b6f903cea42539f8bc86e59e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31fa6bab43160c4b6f903cea42539f8bc86e59e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e/comments", "author": {"login": "abonzo", "id": 20396542, "node_id": "MDQ6VXNlcjIwMzk2NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/20396542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonzo", "html_url": "https://github.com/abonzo", "followers_url": "https://api.github.com/users/abonzo/followers", "following_url": "https://api.github.com/users/abonzo/following{/other_user}", "gists_url": "https://api.github.com/users/abonzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonzo/subscriptions", "organizations_url": "https://api.github.com/users/abonzo/orgs", "repos_url": "https://api.github.com/users/abonzo/repos", "events_url": "https://api.github.com/users/abonzo/events{/privacy}", "received_events_url": "https://api.github.com/users/abonzo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cefe08a4ec4ff2e8dadfc26f89e70be5a3f21a1f"}], "stats": {"total": 104, "additions": 81, "deletions": 23}, "files": [{"sha": "6c41cf02c61500e33b05814ba9ecdab91da456a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e", "patch": "@@ -1,3 +1,9 @@\n+2016-03-12  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR rtl-optimization/69307\n+\t* sel-sched.c (choose_best_pseudo_reg): Properly check for hard\n+\tregisters in modes that span more than one register.\n+\n 2016-03-12  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/69614"}, {"sha": "09cf0284603819fbdf06ef2a125670518ef47442", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 36, "deletions": 23, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e", "patch": "@@ -1457,31 +1457,44 @@ choose_best_pseudo_reg (regset used_regs,\n         gcc_assert (mode == GET_MODE (dest));\n       orig_regno = REGNO (dest);\n \n-      if (!REGNO_REG_SET_P (used_regs, orig_regno))\n-        {\n-          if (orig_regno < FIRST_PSEUDO_REGISTER)\n-            {\n-              gcc_assert (df_regs_ever_live_p (orig_regno));\n+      /* Check that nothing in used_regs intersects with orig_regno.  When\n+\t we have a hard reg here, still loop over hard_regno_nregs.  */\n+      if (HARD_REGISTER_NUM_P (orig_regno))\n+\t{\n+\t  int j, n;\n+\t  for (j = 0, n = hard_regno_nregs[orig_regno][mode]; j < n; j++)\n+\t    if (REGNO_REG_SET_P (used_regs, orig_regno + j))\n+\t      break;\n+\t  if (j < n)\n+\t    continue;\n+\t}\n+      else\n+\t{\n+\t  if (REGNO_REG_SET_P (used_regs, orig_regno))\n+\t    continue;\n+\t}\n+      if (HARD_REGISTER_NUM_P (orig_regno))\n+\t{\n+\t  gcc_assert (df_regs_ever_live_p (orig_regno));\n \n-              /* For hard registers, we have to check hardware imposed\n-                 limitations (frame/stack registers, calls crossed).  */\n-              if (!TEST_HARD_REG_BIT (reg_rename_p->unavailable_hard_regs,\n-                                      orig_regno))\n-\t\t{\n-\t\t  /* Don't let register cross a call if it doesn't already\n-\t\t     cross one.  This condition is written in accordance with\n-\t\t     that in sched-deps.c sched_analyze_reg().  */\n-\t\t  if (!reg_rename_p->crosses_call\n-\t\t      || REG_N_CALLS_CROSSED (orig_regno) > 0)\n-\t\t    return gen_rtx_REG (mode, orig_regno);\n-\t\t}\n+\t  /* For hard registers, we have to check hardware imposed\n+\t     limitations (frame/stack registers, calls crossed).  */\n+\t  if (!TEST_HARD_REG_BIT (reg_rename_p->unavailable_hard_regs,\n+\t\t\t\t  orig_regno))\n+\t    {\n+\t      /* Don't let register cross a call if it doesn't already\n+\t\t cross one.  This condition is written in accordance with\n+\t\t that in sched-deps.c sched_analyze_reg().  */\n+\t      if (!reg_rename_p->crosses_call\n+\t\t  || REG_N_CALLS_CROSSED (orig_regno) > 0)\n+\t\treturn gen_rtx_REG (mode, orig_regno);\n+\t    }\n \n-              bad_hard_regs = true;\n-            }\n-          else\n-            return dest;\n-        }\n-     }\n+\t  bad_hard_regs = true;\n+\t}\n+      else\n+\treturn dest;\n+    }\n \n   *is_orig_reg_p_ptr = false;\n "}, {"sha": "13347121ea52c81f1ff7abc86290ce24ea1ed361", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e", "patch": "@@ -1,3 +1,8 @@\n+2016-03-12  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR rtl-optimization/69307\n+\t* gcc.dg/pr69307.c: New test.\n+\n 2016-03-12  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/69614"}, {"sha": "d9d343e973a581021313a65aa088c8634b95befd", "filename": "gcc/testsuite/gcc.dg/pr69307.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69307.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69307.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69307.c?ref=d0aca6abdbcbabc103df7a65e1e0dcbbad5e055e", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fselective-scheduling2\" } */\n+\n+typedef unsigned char uint8_t;\n+typedef unsigned short int uint16_t;\n+typedef unsigned int uint32_t;\n+typedef unsigned long long int uint64_t;\n+typedef uint8_t u8;\n+typedef uint16_t u16;\n+typedef uint32_t u32;\n+typedef uint64_t u64;\n+u64 __attribute__((noinline, noclone))\n+foo(u8 u8_0, u16 u16_0, u32 u32_0, u64 u64_0, u8 u8_1, u16 u16_1, u32 u32_1, u64 u64_1, u8 u8_2, u16 u16_2, u32 u32_2, u64 u64_2, u8 u8_3, u16 u16_3, u32 u32_3, u64 u64_3)\n+{\n+ u8 *p8_2 = &u8_2;\n+ u16 *p16_2 = &u16_2;\n+ u8 *p8_3 = &u8_3;\n+ u64 *p64_3 = &u64_3;\n+ p8_2 = &u8_3;\n+ *p8_3 -= *p64_3;\n+ *p8_2 = (u64)*p8_2 % ((u64)*p8_2 | 3);\n+ u8_2 = (u64)u8_2 / ((u64)*p16_2 | 1);\n+ u16_0 = (u64)u16_0 % ((u64)*p8_2 | 3);\n+ return u8_0 + u16_0 + u32_0 + u64_0 + u8_1 + u16_1 + u32_1 + u64_1 + u8_2 + u16_2 + u32_2 + u64_2 + u8_3 + u16_3 + u32_3 + u64_3;\n+}\n+int main()\n+{\n+ u64 x = 0;\n+ x += foo(3llu, 6llu, 15llu, 28llu, 5llu, 11llu, 20llu, 44llu, 7llu, 10llu, 20llu, 55llu, 0llu, 9llu, 17llu, 48llu);\n+ if (x != 0x1f3)\n+\t __builtin_abort();\n+ return 0;\n+}\n+"}]}