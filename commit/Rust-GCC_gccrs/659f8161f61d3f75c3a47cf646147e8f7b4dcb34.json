{"sha": "659f8161f61d3f75c3a47cf646147e8f7b4dcb34", "node_id": "C_kwDOANBUbNoAKDY1OWY4MTYxZjYxZDNmNzVjM2E0N2NmNjQ2MTQ3ZThmN2I0ZGNiMzQ", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-01-07T09:57:21Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-01-07T09:57:21Z"}, "message": "nvptx: Add support for PTX's cnot instruction.\n\nThis is a simple patch, now that the nvptx backend has transitioned\nto STORE_FLAG_VALUE=1, that adds support for NVidia's cnot instruction,\nthat implements C/C++ style logical negation.\n\nPreviously, the simple function:\n\nint foo(int x) { return !x; }\n\non nvptx-none with -O2 would generate:\n\n\tmov.u32 %r24, %ar0;\n\tsetp.eq.u32     %r28, %r24, 0;\n\tselp.u32        %value, 1, 0, %r28;\n\nwith this patch, GCC now generates:\n\n\tmov.u32 %r24, %ar0;\n\tcnot.b32        %value, %r24;\n\n2022-01-07  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/nvptx/nvptx.md (*cnot<mode>2): New define_insn.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/nvptx/cnot-1.c: New test case.", "tree": {"sha": "0b74b1a131369f0ca8adadd4e8f835ea6b951594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b74b1a131369f0ca8adadd4e8f835ea6b951594"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/659f8161f61d3f75c3a47cf646147e8f7b4dcb34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659f8161f61d3f75c3a47cf646147e8f7b4dcb34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/659f8161f61d3f75c3a47cf646147e8f7b4dcb34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659f8161f61d3f75c3a47cf646147e8f7b4dcb34/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "add37d3bf4f375bb202abdc7cf7768f27fc968d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/add37d3bf4f375bb202abdc7cf7768f27fc968d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/add37d3bf4f375bb202abdc7cf7768f27fc968d7"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "ce74672e5ae9beafea9c407a7407300d6266f323", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659f8161f61d3f75c3a47cf646147e8f7b4dcb34/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659f8161f61d3f75c3a47cf646147e8f7b4dcb34/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=659f8161f61d3f75c3a47cf646147e8f7b4dcb34", "patch": "@@ -592,6 +592,13 @@\n   \"\"\n   \"%.\\\\tnot.b%T0\\\\t%0, %1;\")\n \n+(define_insn \"*cnot<mode>2\"\n+  [(set (match_operand:HSDIM 0 \"nvptx_register_operand\" \"=R\")\n+\t(eq:HSDIM (match_operand:HSDIM 1 \"nvptx_register_operand\" \"R\")\n+\t\t  (const_int 0)))]\n+  \"\"\n+  \"%.\\\\tcnot.b%T0\\\\t%0, %1;\")\n+\n (define_insn \"bitrev<mode>2\"\n   [(set (match_operand:SDIM 0 \"nvptx_register_operand\" \"=R\")\n \t(unspec:SDIM [(match_operand:SDIM 1 \"nvptx_register_operand\" \"R\")]"}, {"sha": "d0bdccd2c472a95fbbd732d217777172a7fbd7eb", "filename": "gcc/testsuite/gcc.target/nvptx/cnot-1.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/659f8161f61d3f75c3a47cf646147e8f7b4dcb34/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fcnot-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/659f8161f61d3f75c3a47cf646147e8f7b4dcb34/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fcnot-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fcnot-1.c?ref=659f8161f61d3f75c3a47cf646147e8f7b4dcb34", "patch": "@@ -0,0 +1,94 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int test1(int x)\n+{\n+  return !x;\n+}\n+\n+int test2(int x)\n+{\n+  return x ? 0 : 1;\n+}\n+\n+int test3(int x)\n+{\n+  return (x == 0) ? 1 : 0;\n+}\n+\n+unsigned int test4(unsigned int x)\n+{\n+  return !x;\n+}\n+\n+unsigned int test5(unsigned int x)\n+{\n+  return x ? 0 : 1;\n+}\n+\n+unsigned int test6(unsigned int x)\n+{\n+  return (x == 0) ? 1 : 0;\n+}\n+\n+short test7(short x)\n+{\n+  return !x;\n+}\n+\n+short test8(short x)\n+{\n+  return x ? 0 : 1;\n+}\n+\n+short test9(short x)\n+{\n+  return (x == 0) ? 1 : 0;\n+}\n+\n+unsigned short test10(unsigned short x)\n+{\n+  return !x;\n+}\n+\n+unsigned short test11(unsigned short x)\n+{\n+  return x ? 0 : 1;\n+}\n+\n+unsigned short test12(unsigned short x)\n+{\n+  return (x == 0) ? 1 : 0;\n+}\n+\n+long test13(long x)\n+{\n+  return !x;\n+}\n+\n+long test14(long x)\n+{\n+  return x ? 0 : 1;\n+}\n+\n+long test15(long x)\n+{\n+  return (x == 0) ? 1: 0;\n+}\n+\n+unsigned long test16(unsigned long x)\n+{\n+  return !x;\n+}\n+\n+unsigned long test17(unsigned long x)\n+{\n+  return x ? 0 : 1;\n+}\n+\n+unsigned long test18(unsigned long x)\n+{\n+  return (x == 0) ? 1 : 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"cnot.b\" 18 } } */"}]}