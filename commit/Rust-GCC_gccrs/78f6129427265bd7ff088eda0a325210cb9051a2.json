{"sha": "78f6129427265bd7ff088eda0a325210cb9051a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhmNjEyOTQyNzI2NWJkN2ZmMDg4ZWRhMGEzMjUyMTBjYjkwNTFhMg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-10-11T09:32:44Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-10-11T09:32:44Z"}, "message": "c-common.c (warning_candidate_p): Change the return type to bool and return true/false instead of 1/0.\n\n\t* c-common.c (warning_candidate_p): Change the return type to bool\n\tand return true/false instead of 1/0.\n\t(vector_mode_valid_p): Likewise.\n\nFrom-SVN: r240974", "tree": {"sha": "ce4718f2566c55a8e11ea72402ee7d12c4066b48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce4718f2566c55a8e11ea72402ee7d12c4066b48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78f6129427265bd7ff088eda0a325210cb9051a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78f6129427265bd7ff088eda0a325210cb9051a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78f6129427265bd7ff088eda0a325210cb9051a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78f6129427265bd7ff088eda0a325210cb9051a2/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f153e9d5b09390325a01e189f401ca1f42aac317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f153e9d5b09390325a01e189f401ca1f42aac317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f153e9d5b09390325a01e189f401ca1f42aac317"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "78a494722cb59ede7d3d3c4459af14208935208e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f6129427265bd7ff088eda0a325210cb9051a2/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f6129427265bd7ff088eda0a325210cb9051a2/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=78f6129427265bd7ff088eda0a325210cb9051a2", "patch": "@@ -1,3 +1,9 @@\n+2016-10-11  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-common.c (warning_candidate_p): Change the return type to bool\n+\tand return true/false instead of 1/0.\n+\t(vector_mode_valid_p): Likewise.\n+\n 2016-10-11  Marek Polacek  <polacek@redhat.com>\n \n \t* c-common.c (fold_for_warn): No longer static."}, {"sha": "c4a0ce89c3845e12a3746d2aa527abad4aa562bd", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f6129427265bd7ff088eda0a325210cb9051a2/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f6129427265bd7ff088eda0a325210cb9051a2/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=78f6129427265bd7ff088eda0a325210cb9051a2", "patch": "@@ -1881,7 +1881,7 @@ static struct tlist_cache *save_expr_cache;\n static void add_tlist (struct tlist **, struct tlist *, tree, int);\n static void merge_tlist (struct tlist **, struct tlist *, int);\n static void verify_tree (tree, struct tlist **, struct tlist **, tree);\n-static int warning_candidate_p (tree);\n+static bool warning_candidate_p (tree);\n static bool candidate_equal_p (const_tree, const_tree);\n static void warn_for_collisions (struct tlist *);\n static void warn_for_collisions_1 (tree, tree, struct tlist *, int);\n@@ -2000,32 +2000,33 @@ warn_for_collisions (struct tlist *list)\n \n /* Return nonzero if X is a tree that can be verified by the sequence point\n    warnings.  */\n-static int\n+\n+static bool\n warning_candidate_p (tree x)\n {\n   if (DECL_P (x) && DECL_ARTIFICIAL (x))\n-    return 0;\n+    return false;\n \n   if (TREE_CODE (x) == BLOCK)\n-    return 0;\n+    return false;\n \n   /* VOID_TYPE_P (TREE_TYPE (x)) is workaround for cp/tree.c\n      (lvalue_p) crash on TRY/CATCH. */\n   if (TREE_TYPE (x) == NULL_TREE || VOID_TYPE_P (TREE_TYPE (x)))\n-    return 0;\n+    return false;\n \n   if (!lvalue_p (x))\n-    return 0;\n+    return false;\n \n   /* No point to track non-const calls, they will never satisfy\n      operand_equal_p.  */\n   if (TREE_CODE (x) == CALL_EXPR && (call_expr_flags (x) & ECF_CONST) == 0)\n-    return 0;\n+    return false;\n \n   if (TREE_CODE (x) == STRING_CST)\n-    return 0;\n+    return false;\n \n-  return 1;\n+  return true;\n }\n \n /* Return nonzero if X and Y appear to be the same candidate (or NULL) */\n@@ -6315,7 +6316,7 @@ handle_destructor_attribute (tree *node, tree name, tree args,\n    This returns nonzero even if there is no hardware support for the\n    vector mode, but we can emulate with narrower modes.  */\n \n-static int\n+static bool\n vector_mode_valid_p (machine_mode mode)\n {\n   enum mode_class mclass = GET_MODE_CLASS (mode);\n@@ -6328,11 +6329,11 @@ vector_mode_valid_p (machine_mode mode)\n       && mclass != MODE_VECTOR_UFRACT\n       && mclass != MODE_VECTOR_ACCUM\n       && mclass != MODE_VECTOR_UACCUM)\n-    return 0;\n+    return false;\n \n   /* Hardware support.  Woo hoo!  */\n   if (targetm.vector_mode_supported_p (mode))\n-    return 1;\n+    return true;\n \n   innermode = GET_MODE_INNER (mode);\n "}]}