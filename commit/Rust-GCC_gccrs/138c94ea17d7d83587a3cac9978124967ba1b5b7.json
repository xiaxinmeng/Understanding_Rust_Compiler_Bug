{"sha": "138c94ea17d7d83587a3cac9978124967ba1b5b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM4Yzk0ZWExN2Q3ZDgzNTg3YTNjYWM5OTc4MTI0OTY3YmExYjViNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-09T22:01:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-06-09T22:01:39Z"}, "message": "(left_shift): Ignore integer overflow.\n\nFrom-SVN: r9915", "tree": {"sha": "6f8f2251be66a017c766a5276ea4d4438347fde3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f8f2251be66a017c766a5276ea4d4438347fde3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/138c94ea17d7d83587a3cac9978124967ba1b5b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138c94ea17d7d83587a3cac9978124967ba1b5b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/138c94ea17d7d83587a3cac9978124967ba1b5b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138c94ea17d7d83587a3cac9978124967ba1b5b7/comments", "author": null, "committer": null, "parents": [{"sha": "245391da4ed030a58f54ecd3ae1f9cbbd31c965b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/245391da4ed030a58f54ecd3ae1f9cbbd31c965b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/245391da4ed030a58f54ecd3ae1f9cbbd31c965b"}], "stats": {"total": 16, "additions": 5, "deletions": 11}, "files": [{"sha": "79282b756e02411f8461b649da55e6256f5d2776", "filename": "gcc/cexp.y", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138c94ea17d7d83587a3cac9978124967ba1b5b7/gcc%2Fcexp.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138c94ea17d7d83587a3cac9978124967ba1b5b7/gcc%2Fcexp.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcexp.y?ref=138c94ea17d7d83587a3cac9978124967ba1b5b7", "patch": "@@ -898,21 +898,15 @@ left_shift (a, b)\n      struct constant *a;\n      unsigned long b;\n {\n+   /* It's unclear from the C standard whether shifts can overflow.\n+      The following code ignores overflow; perhaps a C standard\n+      interpretation ruling is needed.  */\n   if (b >= HOST_BITS_PER_LONG)\n-    {\n-      if (! a->unsignedp && a->value != 0)\n-\tinteger_overflow ();\n-      return 0;\n-    }\n+    return 0;\n   else if (a->unsignedp)\n     return (unsigned long) a->value << b;\n   else\n-    {\n-      long l = a->value << b;\n-      if (l >> b != a->value)\n-\tinteger_overflow ();\n-      return l;\n-    }\n+    return a->value << b;\n }\n \n static long"}]}