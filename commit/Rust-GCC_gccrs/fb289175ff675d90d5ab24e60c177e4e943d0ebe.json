{"sha": "fb289175ff675d90d5ab24e60c177e4e943d0ebe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIyODkxNzVmZjY3NWQ5MGQ1YWIyNGU2MGMxNzdlNGU5NDNkMGViZQ==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2018-06-02T00:17:58Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2018-06-02T00:17:58Z"}, "message": "altivec-12.c (main): Fix declaration of ucz to make it consistent with the naming convention in the file.\n\ngcc/testsuite/ChangeLog:\n\n2018-06-01  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/altivec-12.c (main): Fix declaration of ucz\n\tto make it consistent with the naming convention in the file.\n\t* gcc.target/powerpc/altivec-7-be.c: Move BE specific checks\n\tto altivec-7.c.  Delete file.\n\t* gcc.target/powerpc/altivec-7-le.c: Move LE specific checks\n\tto altivec-7.c.  Delete file.\n\t* gcc.target/powerpc/altivec-7.h: Move to altivec-7.c.\n\t* gcc.target/powerpc/altivec-7.c (main): Add vec_unpackh and\n\tvec_unpackl tests.  Update instruction counts.\n\t* gcc.target/powerpc/builtins-1-le.c: Move LE specific checks to\n\ttests to builtins-1.c.\n\t* gcc.target/powerpc/builtins-1-be.c: Move BE specific\n\ttests to builtins-1.c.\n\t* gcc.target/powerpc/builtins-1.h: Move to file builtins-1.c.\n\t* gcc.target/powerpc/builtins-1.c (main): Add test case for vec_and.\n\tvec_round, vec_rsqrt, vec_rsqrte, vec_mergee, vec_mergh, vec_mergo.\n\tRemove vec_ctf tests returning double.  Remove vec_cts with\n\tdouble args. Remove vec_sel with invalid arguments. Add tests for\n\tvec_splat.\n\tAdd instruction counts for new tests.\n\t* gcc.target/powerpc/builtins-3-runnable.c (main): Add test for\n\tvec_doublee, vec_doubleo, vec_doublel, vec_doubleh, vec_signed,\n\tvec_unsigned.\n\t* gcc.target/powerpc/builtins-3.c: Add tests test_sll_vuill_vuill_vuc,\n\ttest_sll_vsill_vsill_vuc.\n\t* gcc.target/powerpc/p9-xxbr-2.c (rev_bool_long_long): Added test for\n\tvec_revb.\n\t* gcc.target/powerpc/vsx-7.h: Rename to vsx-7.c. Remove redundant\n\ttests from altivec-7.h.\n\t* gcc.target/powerpc/vsx-7-be.c: Remove file.\n\t* gcc.target/powerpc/vsx-builtin-7.c: Add test functions splat_sc_s8,\n\tsplat_uc_u8, splat_ssi_s16, splat_usi_s16, splat_si_s32, splat_ui_u32,\n\tsplat_sll, splat_uc, splat_int128, splat_uint128.\n\tMake second argument of vec_extract and vec_insert a signed int.\n\t* gcc.target/powerpc/vsx-vector-5.c (vrint): Add vrint test for float\n\targument.\n\nFrom-SVN: r261097", "tree": {"sha": "8f21ec032866859b1f0d3c15ae95485b8717d9bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f21ec032866859b1f0d3c15ae95485b8717d9bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb289175ff675d90d5ab24e60c177e4e943d0ebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb289175ff675d90d5ab24e60c177e4e943d0ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb289175ff675d90d5ab24e60c177e4e943d0ebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb289175ff675d90d5ab24e60c177e4e943d0ebe/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1"}], "stats": {"total": 945, "additions": 523, "deletions": 422}, "files": [{"sha": "b2dacc55ed1070349bf15587aab90c66c01df3d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb289175ff675d90d5ab24e60c177e4e943d0ebe", "patch": "@@ -1,3 +1,42 @@\n+2018-06-01  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/altivec-12.c (main): Fix declaration of ucz\n+\tto make it consistent with the naming convention in the file.\n+\t* gcc.target/powerpc/altivec-7-be.c: Move BE specific checks\n+\tto altivec-7.c.  Delete file.\n+\t* gcc.target/powerpc/altivec-7-le.c: Move LE specific checks\n+\tto altivec-7.c.  Delete file.\n+\t* gcc.target/powerpc/altivec-7.h: Move to altivec-7.c.\n+\t* gcc.target/powerpc/altivec-7.c (main): Add vec_unpackh and\n+\tvec_unpackl tests.  Update instruction counts.\n+\t* gcc.target/powerpc/builtins-1-le.c: Move LE specific checks to\n+\ttests to builtins-1.c.\n+\t* gcc.target/powerpc/builtins-1-be.c: Move BE specific\n+\ttests to builtins-1.c.\n+\t* gcc.target/powerpc/builtins-1.h: Move to file builtins-1.c.\n+\t* gcc.target/powerpc/builtins-1.c (main): Add test case for vec_and.\n+\tvec_round, vec_rsqrt, vec_rsqrte, vec_mergee, vec_mergh, vec_mergo.\n+\tRemove vec_ctf tests returning double.  Remove vec_cts with\n+\tdouble args. Remove vec_sel with invalid arguments. Add tests for\n+\tvec_splat.\n+\tAdd instruction counts for new tests.\n+\t* gcc.target/powerpc/builtins-3-runnable.c (main): Add test for\n+\tvec_doublee, vec_doubleo, vec_doublel, vec_doubleh, vec_signed,\n+\tvec_unsigned.\n+\t* gcc.target/powerpc/builtins-3.c: Add tests test_sll_vuill_vuill_vuc,\n+\ttest_sll_vsill_vsill_vuc.\n+\t* gcc.target/powerpc/p9-xxbr-2.c (rev_bool_long_long): Added test for\n+\tvec_revb.\n+\t* gcc.target/powerpc/vsx-7.h: Rename to vsx-7.c. Remove redundant\n+\ttests from altivec-7.h.\n+\t* gcc.target/powerpc/vsx-7-be.c: Remove file.\n+\t* gcc.target/powerpc/vsx-builtin-7.c: Add test functions splat_sc_s8,\n+\tsplat_uc_u8, splat_ssi_s16, splat_usi_s16, splat_si_s32, splat_ui_u32,\n+\tsplat_sll, splat_uc, splat_int128, splat_uint128.\n+\tMake second argument of vec_extract and vec_insert a signed int.\n+\t* gcc.target/powerpc/vsx-vector-5.c (vrint): Add vrint test for float\n+\targument.\n+\n 2018-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/store_merging_20.c: New test."}, {"sha": "1f3175f97939762f4e8ee275003295c2310abb8d", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-12.c?ref=fb289175ff675d90d5ab24e60c177e4e943d0ebe", "patch": "@@ -18,7 +18,7 @@ vector char scz;\n vector unsigned char uca = {0,4,8,1,5,9,2,6,10,3,7,11,15,12,14,13};\n vector unsigned char ucb = {6,4,8,3,1,9,2,6,10,3,7,11,15,12,14,13};\n vector unsigned char uc_expected = {3,4,8,2,3,9,2,6,10,3,7,11,15,12,14,13};\n-vector char ucz;\n+vector unsigned char ucz;\n \n vector short int ssia = {9, 16, 25, 36};\n vector short int ssib = {-8, -27, -64, -125};"}, {"sha": "1e690be14452c4ce4f9dfe8ef8cce62cfeb746d1", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-7-be.c", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7-be.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7-be.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7-be.c?ref=a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1", "patch": "@@ -1,30 +0,0 @@\n-/* { dg-do compile { target powerpc*-*-* } } */\n-/* { dg-require-effective-target powerpc_altivec_ok } */\n-/* { dg-options \"-maltivec\" } */\n-\n-/* Expected results for Big Endian:\n-     vec_packpx                     vpkpx\n-     vec_ld                         lxvd2x\n-     vec_lde                        lvewx\n-     vec_ldl                        lxvl\n-     vec_lvewx                      lvewx\n-     vec_unpackh                    vupklsh\n-     vec_unpackl                    vupkhsh\n-     vec_andc                       xxnor\n-                                    xxland\n-     vec_vxor                       xxlxor\n-     vec_vmsumubm                   vmsumubm\n-     vec_vmulesb                    vmulesb\n-     vec_vmulosb                    vmulosb\n-*/\n-\n-/* { dg-final { scan-assembler-times \"vpkpx\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vmulesb\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmulosb\" 1 } } */\n-/* { dg-final { scan-assembler-times \"lvewx\" 2 } } */\n-/* { dg-final { scan-assembler-times \"lvxl\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vupklsh\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vupkhsh\" 1 } } */\n-\n-/* Source code for the test in altivec-7.h */\n-#include \"altivec-7.h\""}, {"sha": "38ce15362714f1b3dae2b7ba8acdfa83a322b0d5", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-7-le.c", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7-le.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7-le.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7-le.c?ref=a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1", "patch": "@@ -1,37 +0,0 @@\n-/* { dg-do compile { target powerpc64le-*-* } } */\n-/* { dg-require-effective-target powerpc_altivec_ok } */\n-/* { dg-options \"-maltivec\" } */\n-\n-/* Expected results for Little Endian:\n-     vec_packpx                     vpkpx\n-     vec_vmulosb                    vmulesb\n-     vec_ld                         lxv2x\n-     vec_lde                        lvewx\n-     vec_ldl                        lxvl\n-     vec_lvewx                      lvewx\n-     vec_unpackh                    vupklsh\n-     vec_unpackl                    vupkhsh\n-     vec_andc                       xxnor\n-                                    xxland\n-     vec_vxor                       xxlxor\n-     vec_vmsumubm                   vmsumubm\n-     vec_vmulesb                    vmulosb\n-     vec_vmulosb                    vmulesb\n-*/\n-\n-/* { dg-final { scan-assembler-times \"vpkpx\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vmulesb\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmulosb\" 1 } } */\n-/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M} 36 } } */\n-/* { dg-final { scan-assembler-times \"lvewx\" 2 } } */\n-/* { dg-final { scan-assembler-times \"lvxl\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vupklsh\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vupkhsh\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xxlnor\" 4 } } */\n-/* { dg-final { scan-assembler-times \"xxland\" 4 } } */\n-/* { dg-final { scan-assembler-times \"xxlxor\" 5 } } */\n-/* { dg-final { scan-assembler-times \"vupkhpx\" 1 } } */\n-\n-/* Source code for the test in altivec-7.h and vsx-7.h. */\n-#include \"altivec-7.h\"\n-#include \"vsx-7.h\""}, {"sha": "ba5f0ebe1468ca4572372cfb1507d1459b1d5a95", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-7.c", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7.c?ref=fb289175ff675d90d5ab24e60c177e4e943d0ebe", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+/* Origin: Aldy Hernandez  <aldyh@redhat.com>  */\n+\n+#include <altivec.h>\n+\n+int **intp;\n+int *var_int;\n+unsigned int **uintp;\n+vector pixel *varpixel;\n+vector signed char *vecchar;\n+vector signed int *vecint;\n+vector signed short *vecshort;\n+vector unsigned char *vecuchar;\n+vector unsigned int *vecuint;\n+vector bool int *vecubi;\n+vector bool char *vecubci;\n+vector bool short int *vecubsi;\n+vector bool long long int *vecublli;\n+vector unsigned short *vecushort;\n+vector bool int *vecbint;\n+vector float *vecfloat;\n+\n+int main ()\n+{\n+  *vecfloat++ = vec_andc((vector bool int)vecint[0], vecfloat[1]);\n+  *vecfloat++ = vec_andc(vecfloat[0], (vector bool int)vecint[1]);\n+  *vecfloat++ = vec_vxor((vector bool int)vecint[0], vecfloat[1]);\n+  *vecfloat++ = vec_vxor(vecfloat[0], (vector bool int)vecint[1]);\n+  *varpixel++ = vec_packpx(vecuint[0], vecuint[1]);\n+  *varpixel++ = vec_vpkpx(vecuint[0], vecuint[1]);\n+  *vecshort++ = vec_vmulesb(vecchar[0], vecchar[1]);\n+  *vecshort++ = vec_vmulosb(vecchar[0], vecchar[1]);\n+  *vecint++ = vec_ld(var_int[0], intp[1]);\n+  *vecint++ = vec_lde(var_int[0], intp[1]);\n+  *vecint++ = vec_ldl(var_int[0], intp[1]);\n+  *vecint++ = vec_lvewx(var_int[0], intp[1]);\n+  *vecint++ = vec_unpackh(vecshort[0]);\n+  *vecint++ = vec_unpackl(vecshort[0]);\n+  *vecushort++ = vec_andc((vector bool short)vecshort[0], vecushort[1]);\n+  *vecushort++ = vec_andc(vecushort[0], (vector bool short)vecshort[1]);\n+  *vecushort++ = vec_vxor((vector bool short)vecshort[0], vecushort[1]);\n+  *vecushort++ = vec_vxor(vecushort[0], (vector bool short)vecshort[1]);\n+  *vecuint++ = vec_ld(var_int[0], uintp[1]);\n+  *vecuint++ = vec_lvx(var_int[0], uintp[1]);\n+  *vecuint++ = vec_vmsumubm(vecuchar[0], vecuchar[1], vecuint[2]);\n+  *vecuchar++ = vec_xor(vecuchar[0], (vector unsigned char)vecchar[1]);\n+\n+  *vecubi++ = vec_unpackh(vecubsi[0]);\n+  *vecuint++ = vec_unpackh(varpixel[0]);\n+  *vecublli++ = vec_unpackh(vecubi[0]);\n+  *vecubsi++ = vec_unpackh(vecubci[0]);\n+  *vecshort++ = vec_unpackh(vecchar[0]);\n+\n+  *vecubi++ = vec_unpackl(vecubsi[0]);\n+  *vecuint++ = vec_unpackl(varpixel[0]);\n+  *vecublli++ = vec_unpackl(vecubi[0]);\n+  *vecubsi++ = vec_unpackl(vecubci[0]);\n+  *vecshort++ = vec_unpackl(vecchar[0]);\n+  \n+  return 0;\n+}\n+\n+/* Expected results:\n+     vec_packpx                     vpkpx\n+     vec_vmulosb                    vmulesb\n+     vec_ld                         lxv2x\n+     vec_lde                        lvewx\n+     vec_ldl                        lxvl\n+     vec_lvewx                      lvewx\n+     vec_unpackh                    vupklsh\n+     vec_unpackh                    vupklpx\n+     vec_unpackh                    vupklsw\n+     vec_unpackh                    vupklsb\n+     vec_unpackl                    vupkhsh\n+     vec_unpackl                    vupkhpx\n+     vec_unpackl                    vupkhsw\n+     vec_unpackl                    vupkhsb\n+     vec_andc                       xxnor\n+                                    xxland\n+     vec_vxor                       xxlxor\n+     vec_vmsumubm                   vmsumubm\n+     vec_vmulesb                    vmulosb\n+     vec_vmulosb                    vmulesb\n+     vec_ld                         lvx\n+*/\n+\n+/* { dg-final { scan-assembler-times \"vpkpx\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmulesb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulosb\" 1 } } */\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M} 44 { target le } } } */\n+/* { dg-final { scan-assembler-times {\\mlxvd2x\\M|\\mlxv\\M} 4 { target be } } } */\n+/* { dg-final { scan-assembler-times \"lvewx\" 2 } } */\n+/* { dg-final { scan-assembler-times \"lvxl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vupklsh\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vupkhsh\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxland\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxlxor\" 5 } } */\n+/* { dg-final { scan-assembler-times \"xxlandc\" 0 } } */\n+/* { dg-final { scan-assembler-times \"xxlxor\" 5 } } */\n+/* { dg-final { scan-assembler-times \"lvx\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmsumubm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vupklpx\" 1 } } } */\n+/* { dg-final { scan-assembler-times \"vupklsx\" 0 } } */\n+/* { dg-final { scan-assembler-times \"vupklsb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vupkhpx\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vupkhsw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vupkhsb\" 2 } } */"}, {"sha": "4dedcd8146988e2178294242e0b13a46f4a972d9", "filename": "gcc/testsuite/gcc.target/powerpc/altivec-7.h", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Faltivec-7.h?ref=a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1", "patch": "@@ -1,47 +0,0 @@\n-/* Origin: Aldy Hernandez  <aldyh@redhat.com>  */\n-\n-/* This test code is included into altivec-7-be.c and altivec-7-le.c.  \n-   The two files have the tests for the number of instructions generated for\n-   LE versus BE.  */\n-\n-#include <altivec.h>\n-\n-int **intp;\n-int *var_int;\n-unsigned int **uintp;\n-vector pixel *varpixel;\n-vector signed char *vecchar;\n-vector signed int *vecint;\n-vector signed short *vecshort;\n-vector unsigned char *vecuchar;\n-vector unsigned int *vecuint;\n-vector unsigned short *vecushort;\n-vector float *vecfloat;\n-\n-int main ()\n-{\n-  *vecfloat++ = vec_andc((vector bool int)vecint[0], vecfloat[1]);\n-  *vecfloat++ = vec_andc(vecfloat[0], (vector bool int)vecint[1]);\n-  *vecfloat++ = vec_vxor((vector bool int)vecint[0], vecfloat[1]);\n-  *vecfloat++ = vec_vxor(vecfloat[0], (vector bool int)vecint[1]);\n-  *varpixel++ = vec_packpx(vecuint[0], vecuint[1]);\n-  *varpixel++ = vec_vpkpx(vecuint[0], vecuint[1]);\n-  *vecshort++ = vec_vmulesb(vecchar[0], vecchar[1]);\n-  *vecshort++ = vec_vmulosb(vecchar[0], vecchar[1]);\n-  *vecint++ = vec_ld(var_int[0], intp[1]);\n-  *vecint++ = vec_lde(var_int[0], intp[1]);\n-  *vecint++ = vec_ldl(var_int[0], intp[1]);\n-  *vecint++ = vec_lvewx(var_int[0], intp[1]);\n-  *vecint++ = vec_unpackh(vecshort[0]);\n-  *vecint++ = vec_unpackl(vecshort[0]);\n-  *vecushort++ = vec_andc((vector bool short)vecshort[0], vecushort[1]);\n-  *vecushort++ = vec_andc(vecushort[0], (vector bool short)vecshort[1]);\n-  *vecushort++ = vec_vxor((vector bool short)vecshort[0], vecushort[1]);\n-  *vecushort++ = vec_vxor(vecushort[0], (vector bool short)vecshort[1]);\n-  *vecuint++ = vec_ld(var_int[0], uintp[1]);\n-  *vecuint++ = vec_lvx(var_int[0], uintp[1]);\n-  *vecuint++ = vec_vmsumubm(vecuchar[0], vecuchar[1], vecuint[2]);\n-  *vecuchar++ = vec_xor(vecuchar[0], (vector unsigned char)vecchar[1]);\n-\n-  return 0;\n-}"}, {"sha": "9de8baf166c03c8802adee1f880a973478d6c276", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1-be.c", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-be.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-be.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-be.c?ref=a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1", "patch": "@@ -1,76 +0,0 @@\n-/* { dg-do compile { target { powerpc64-*-* } } } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O0 -mno-fold-gimple -dp\" } */\n-/* { dg-prune-output \"gimple folding of rs6000 builtins has been disabled.\" } */\n-\n-/* Test that a number of newly added builtin overloads are accepted\n-   by the compiler.  */\n-\n-/* Expected results for Big Endian:\n-   vec_all_eq          vcmpequd.\n-   vec_all_ne          vcmpequd.\n-   vec_any_eq          vcmpequd.\n-   vec_any_ne          vcmpequd.\n-   vec_all_gt          vcmpgtud.\n-   vec_all_le          vcmpgtud.\n-   vec_any_gt          vcmpgtud.\n-   vec_any_lt          vcmpgtud.\n-   vec_any_le          vcmpgtud.\n-   vec_and             xxland\n-   vec_andc            xxlandc\n-   vec_cntlz           vclzd, vclzb, vclzw, vclzh\n-   xvcpsgnsp  vec_cpsgn\n-   vec_ctf    xvmuldp \n-   vec_cts xvcvdpsxds, vctsxs\n-   vec_ctu   xvcvdpuxds, vctuxs\n-   vec_div   divd, divdu | __divdi3(), __udivdi3()\n-   vec_mergel vmrghb, vmrghh, xxmrghw\n-   vec_mergeh  xxmrglw, vmrglh\n-   vec_mul mulld | mullw, mulhwu\n-   vec_nor xxlnor\n-   vec_or xxlor\n-   vec_packsu vpksdus\n-   vec_perm vperm\n-   vec_round xvrdpi\n-   vec_sel xxsel\n-   vec_xor xxlxor \n-   vec_rsqrt  xvrsqrtesp\n-   vec_rsqrte xvrsqrtesp  */\n-\n-/* { dg-final { scan-assembler-times {\\mvcmpequd\\M\\.} 4 } } */\n-/* { dg-final { scan-assembler-times {\\mvcmpgtud\\M\\.} 8 } } */\n-/* { dg-final { scan-assembler-times {\\mxxland\\M} 16 } } */\n-/* { dg-final { scan-assembler-times {\\mxxlandc\\M} 13 } } */\n-/* { dg-final { scan-assembler-times {\\mvclzb\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mvclzd\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mvclzw\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mvclzh\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcpsgnsp\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mxvmuldp\\M} 6 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcvdpsxds\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mvctsxs\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcvdpuxds\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mvctuxs\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mvmrghb\\M} 0 } } */\n-/* { dg-final { scan-assembler-times {\\mvmrghh\\M} 3 } } */\n-/* { dg-final { scan-assembler-times {\\mxxmrghw\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mxxmrglw\\M} 4 } } */\n-/* { dg-final { scan-assembler-times {\\mvmrglh\\M} 4 } } */\n-/* { dg-final { scan-assembler-times {\\mxxlnor\\M} 6 } } */\n-/* { dg-final { scan-assembler-times {(?n)\\mxxlor\\M.*\\mboolv4si3_internal\\M} 6 } } */\n-/* { dg-final { scan-assembler-times {\\mvpksdus\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mxvrdpi\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mxxsel\\M} 6 } } */\n-/* { dg-final { scan-assembler-times {\\mxxlxor\\M} 6 } } */\n-/* { dg-final { scan-assembler-times {\\mdivd\\M} 2 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mdivdu\\M} 2 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mmulld\\M} 4 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mbl __divdi3\\M} 2 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mbl __udivdi3\\M} 2 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mmullw\\M} 12 { target ilp32 } } } */\n-/* { dg-final { scan-assembler-times {\\mmulhwu\\M} 4 { target ilp32 } } } */\n-\n-/* The source code for the test is in builtins-1.h.  */\n-#include \"builtins-1.h\"\n-"}, {"sha": "2dd49539930c7c2fb5e70d7d91f20ddda55179da", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1-le.c", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-le.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-le.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1-le.c?ref=a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1", "patch": "@@ -1,71 +0,0 @@\n-/* { dg-do compile { target { powerpc64le-*-* } } } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n-/* { dg-options \"-mcpu=power8 -O0 -mno-fold-gimple -dp\" } */\n-/* { dg-prune-output \"gimple folding of rs6000 builtins has been disabled.\" } */\n-\n-/* Test that a number of newly added builtin overloads are accepted\n-   by the compiler.  */\n-\n-/* Expected results for Little Endian:\n-   vec_all_eq          vcmpequd.\n-   vec_all_ne          vcmpequd.\n-   vec_any_eq          vcmpequd.\n-   vec_any_ne          vcmpequd.\n-   vec_all_gt          vcmpgtud.\n-   vec_all_le          vcmpgtud.\n-   vec_any_gt          vcmpgtud.\n-   vec_any_lt          vcmpgtud.\n-   vec_any_le          vcmpgtud.\n-   vec_and             xxland\n-   vec_andc            xxlandc\n-   vec_cntlz           vclzd, vclzb, vclzw, vclzh\n-   xvcpsgnsp  vec_cpsgn\n-   vec_ctf    xvmuldp \n-   vec_cts xvcvdpsxds, vctsxs\n-   vec_ctu   xvcvdpuxds, vctuxs\n-   vec_div   divd, divdu\n-   vec_mergel vmrghb, vmrghh, xxmrghw\n-   vec_mergeh  xxmrglw, vmrglh\n-   vec_mul mulld\n-   vec_nor xxlnor\n-   vec_or xxlor\n-   vec_packsu vpksdus\n-   vec_perm vperm\n-   vec_round xvrdpi\n-   vec_sel xxsel\n-   vec_xor xxlxor \n-   vec_rsqrt  xvrsqrtesp\n-   vec_rsqrte xvrsqrtesp  */\n-\n-/* { dg-final { scan-assembler-times {\\mvcmpequd\\M\\.} 4 } } */\n-/* { dg-final { scan-assembler-times {\\mvcmpgtud\\M\\.} 8 } } */\n-/* { dg-final { scan-assembler-times {\\mxxland\\M} 16 } } */\n-/* { dg-final { scan-assembler-times {\\mxxlandc\\M} 13 } } */\n-/* { dg-final { scan-assembler-times {\\mvclzb\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mvclzd\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mvclzw\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mvclzh\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcpsgnsp\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mxvmuldp\\M} 6 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcvdpsxds\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mvctsxs\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mxvcvdpuxds\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mvctuxs\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mdivd\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mdivdu\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mvmrghb\\M} 3 } } */\n-/* { dg-final { scan-assembler-times {\\mvmrghh\\M} 4 } } */\n-/* { dg-final { scan-assembler-times {\\mxxmrghw\\M} 4 } } */\n-/* { dg-final { scan-assembler-times {\\mxxmrglw\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mvmrglh\\M} 3 } } */\n-/* { dg-final { scan-assembler-times {\\mmulld\\M} 4 } } */\n-/* { dg-final { scan-assembler-times {(?n)\\mxxlnor\\M.*\\mboolccv4si3_internal1\\M} 6 } } */\n-/* { dg-final { scan-assembler-times {(?n)\\mxxlor\\M.*\\mboolv4si3_internal\\M} 6 } } */\n-/* { dg-final { scan-assembler-times {\\mvpksdus\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mvperm\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mxvrdpi\\M} 1 } } */\n-/* { dg-final { scan-assembler-times {\\mxxsel\\M} 6 } } */\n-/* { dg-final { scan-assembler-times {\\mxxlxor\\M} 6 } } */\n-\n-/* The test code is in builtins -1.h.  */\n-#include \"builtins-1.h\""}, {"sha": "45727b965b43b15c317adfe948dc805c4cea629d", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-1.c", "status": "renamed", "additions": 146, "deletions": 8, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-1.c?ref=fb289175ff675d90d5ab24e60c177e4e943d0ebe", "patch": "@@ -1,5 +1,7 @@\n-/* This test is included into builtins-1-be.c and builtins-1-le.c to test on\n-   Big Endian and Little Endian machines.  */\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -O0 -mno-fold-gimple -dp\" } */\n+/* { dg-prune-output \"gimple folding of rs6000 builtins has been disabled.\" } */\n \n #include <altivec.h>\n \n@@ -19,6 +21,9 @@ int main ()\n   vector double db = {-2.0, -3.0};\n   vector double dz = vec_and (da, db);\n \n+  vector signed int si_a = {1, 2, 3, 4};\n+  vector unsigned int ui_a = {1, 2, 3, 4};\n+\n   vector long long la = {5L, 14L};\n   vector long long lb = {3L, 86L};\n   vector long long lc = vec_and (la, lb);\n@@ -87,6 +92,10 @@ int main ()\n   vector unsigned char ca = {0,4,8,1,5,9,2,6,10,3,7,11,15,12,14,13};\n   vector unsigned char cbb = {5,4,8,3,1,9,2,6,10,3,7,11,15,12,14,13};\n \n+  vector unsigned char ucba = {5,4,8,3,1,9,2,6,10,3,7,11,15,12,14,13};\n+  vector unsigned char ucbb = {5,4,8,3,1,9,2,6,10,3,7,11,15,12,14,13};\n+  vector unsigned char ucbc = {5,4,8,3,1,9,2,6,10,3,7,11,15,12,14,13};\n+\n   vector long long lv = vec_perm (la, lb, ca);\n \n   vector unsigned char  ucm = vec_and (ca, cbb);\n@@ -95,7 +104,6 @@ int main ()\n \n   vector unsigned long long uv = vec_perm (ua, ub, ca);\n \n-  vector long long lw = vec_sel (la, lb, lc);\n   vector long long lx = vec_sel (la, lb, uc);\n   vector long long ly = vec_sel (la, lb, ld);\n \n@@ -182,6 +190,8 @@ int main ()\n   vector signed char scb = vec_cntlz (sca);\n   vector signed char scc = vec_mergel (sca, scb);\n \n+  vector unsigned char uca = {4, 3, 9, 15, 30, 31, 0, 0,\n+\t\t\t      1, 117, 36, 99, 98, 97, 96, 95};\n   vector unsigned char cb = vec_cntlz (ca);\n \n   vector double dd = vec_xl (0, &y);\n@@ -191,6 +201,10 @@ int main ()\n   vector double dzz1 = vec_rsqrt (dd);\n   vector double dzz2 = vec_rsqrte (dd);\n \n+  vector float ff1 = vec_round (fa);\n+  vector float ff2 = vec_rsqrt (fa);\n+  vector float ff3 = vec_rsqrte (fa);\n+\n   vector double dff = vec_splat (de, 0);\n   vector double dgg = vec_splat (de, 1);\n   vector long long l3 = vec_splat (l2, 0);\n@@ -201,7 +215,8 @@ int main ()\n   vector bool long long l6 = vec_splat (ld, 1);\n   vector bool long long l10 = vec_mergee (ld, ld);\n   vector bool long long l11 = vec_mergeo (ld, ld);\n-\n+  vector bool long long l15 = vec_and (ld, ld);\n+  \n   vector long long l7 = vec_div (l3, l4);\n   vector unsigned long long u5 = vec_div (u3, u4);\n   vector long long l12 = vec_mergee (la, lb);\n@@ -212,11 +227,7 @@ int main ()\n   vector long long l8 = vec_mul (l3, l4);\n   vector unsigned long long u6 = vec_mul (u3, u4);\n \n-  vector double dh = vec_ctf (la, -2);\n-  vector double di = vec_ctf (ua, 2);\n   vector int sz = vec_cts (fa, 0x1F);\n-  vector long long l9 = vec_cts (dh, -2);\n-  vector unsigned long long u7 = vec_ctu (di, 2);\n   vector unsigned int usz = vec_ctu (fa, 0x1F);\n \n   vector float f1 = vec_mergee (fa, fb);\n@@ -225,5 +236,132 @@ int main ()\n   vector double d1 = vec_mergee (da, db);\n   vector double d2 = vec_mergeo (da, db);\n \n+  vector float f3 = vec_ctf (si_a, 1);\n+  vector float f4 = vec_ctf (ui_a, 2);\n+\n+  vector bool char z_vbc2 = vec_splat (bca, 0);\n+  vector signed char z_vsc1 = vec_splat (sca, 1);\n+  vector unsigned char z_vuc1 = vec_splat (ucbc, 2);\n+\n+  vector bool int z_vbi1 = vec_splat (bia, 3);\n+  vector signed int z_vsi1 = vec_splat (sia, 1);\n+  vector unsigned int z_vui1 = vec_splat (uia, 2);\n+\n+  vector bool int z_bi2 = vec_mergee (bia, bib);\n+  vector signed int z_si2 = vec_mergee (sia, sib);\n+  vector unsigned int z_ui2 = vec_mergee (uia, uib);\n+  \n+  vector bool char z_bc2 = vec_mergeh (bca, bcb);\n+  vector signed char z_sc2 = vec_mergeh (sca, scb);\n+  vector bool int z_bi3 = vec_mergeh (bia, bib);\n+  vector signed int z_si3 = vec_mergeh (sia, sib);\n+  vector unsigned int z_ui3 = vec_mergeh (uia, uib);\n+  vector bool short z_bs1 = vec_mergeh (bsa, bsb);\n+\n+  vector bool int z_bi4 = vec_mergeo (bia, bib);\n+  vector signed int z_si4 = vec_mergeo (sia, sib);\n+  vector unsigned int z_ui4 = vec_mergeo (uia, uib);\n+  \n+  vector pixel int z_vp1 = vec_splat (pa, 1);\n+  vector bool short z_bs2 = vec_splat (bsa, 0);\n+  vector short signed int z_vss1 = vec_splat (ssa, 2);\n+  vector unsigned short int z_vuss1 = vec_splat (usa, 1);\n+\n+\n   return 0;\n }\n+\n+/* Expected results:\n+   vec_all_eq          vcmpequd.\n+   vec_all_ge          vcmpgtud.\n+   vec_all_ne          vcmpequd.\n+   vec_any_eq          vcmpequd.\n+   vec_any_ne          vcmpequd.\n+   vec_all_gt          vcmpgtud.\n+   vec_all_le          vcmpgtud.\n+   vec_all_lt          vcmpgtud.\n+   vec_any_ge          vcmpgtud.\n+   vec_any_gt          vcmpgtud.\n+   vec_any_lt          vcmpgtud.\n+   vec_any_le          vcmpgtud.\n+   vec_and             xxland\n+   vec_andc            xxland\n+   vec_cntlz           vclzd, vclzb, vclzw, vclzh\n+   xvcpsgnsp           vec_cpsgn\n+   vec_ctf             xvmuldp \n+   vec_cts             xvcvdpsxds, vctsxs\n+   vec_ctu             xvcvdpuxds, vctuxs\n+   vec_div             divd, divdu | __divdi3(), __udivdi3()\n+   vec_mergel          vmrghb, vmrghh, xxmrghw\n+   vec_mergeh          xxmrglw, vmrglh\n+   vec_mul             mulld | mullw, mulhwu\n+   vec_nor             xxlnor\n+   vec_or              xxlor\n+   vec_packsu          vpksdus\n+   vec_                perm vperm\n+   vec_                round xvrdpi\n+   vec_sel             xxsel\n+   vec_xor             xxlxor \n+   vec_rsqrt           xvrsqrtesp\n+   vec_rsqrte          xvrsqrtesp\n+   vec_xl              lxvd2x\n+   vec_xst             stxvd2x\n+   vec_splat           xxspltb, xxspltw, vsplth\n+   vec_mergee          xxmrgld, vmrgow\n+   vec_mergeo          xxmrghd, vmrgew  */\n+\n+/* { dg-final { scan-assembler-times \"vcmpequd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtud\" 16 } } */\n+/* { dg-final { scan-assembler-times \"xxland\" 30 } } */\n+/* { dg-final { scan-assembler-times \"xxlandc\" 13 } } */\n+/* { dg-final { scan-assembler-times \"vclzb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vclzd\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vclzw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vclzh\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xvcpsgnsp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvcpsgndp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvmuldp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xvcvdpsxds\" 0 } } */\n+/* { dg-final { scan-assembler-times \"vctsxs\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xvcvdpuxds\" 0 } } */\n+/* { dg-final { scan-assembler-times \"vctuxs\" 2 } } */\n+\n+/* { dg-final { scan-assembler-times \"vmrghb\" 4 { target be } } } */\n+/* { dg-final { scan-assembler-times \"vmrghb\" 5 { target le } } } */\n+/* { dg-final { scan-assembler-times \"vmrghh\" 8 } } */\n+/* { dg-final { scan-assembler-times \"xxmrghw\" 8 } } */\n+/* { dg-final { scan-assembler-times \"xxmrglw\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vmrglh\" 8 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\" 6 } } */\n+/* { dg-final { scan-assembler-times \"xxlor\" 11 { target { ilp32 } } } } */\n+/* { dg-final { scan-assembler-times \"xxlor\" 7  { target { lp64 } } } } */\n+/* { dg-final { scan-assembler-times \"vpksdus\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vperm\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xvrdpi\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xxsel\" 10 } } */\n+/* { dg-final { scan-assembler-times \"xxlxor\" 6 } } */\n+/* { dg-final { scan-assembler-times \"divd\" 8  { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"divdu\" 2  { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"mulld\" 4  { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"bl __divdi3\" 3  { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times \"bl __udivdi3\" 3  { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times \"mullw\" 12  { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times \"mulhwu\" 4  { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times \"xxmrgld\" 0 } } */\n+/* { dg-final { scan-assembler-times \"xxmrghd\" 0 } } */\n+/* { dg-final { scan-assembler-times \"xvrsqrtesp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xvrsqrtedp\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xxspltd\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vcfsx\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vcfux\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vspltb\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vspltw\" 0 } } */\n+/* { dg-final { scan-assembler-times \"vmrgow\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vmrglb\" 5 { target le } } } */\n+/* { dg-final { scan-assembler-times \"vmrglb\" 6 { target be } } } */\n+/* { dg-final { scan-assembler-times \"vmrgew\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vsplth\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vcmpequd.\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vcmpgtud.\" 16 } } */\n+/* { dg-final { scan-assembler-times \"vrfin\" 2 } } */\n+", "previous_filename": "gcc/testsuite/gcc.target/powerpc/builtins-1.h"}, {"sha": "0231a1fd086b96ffbf9dcd55a7fa85d859b8ae08", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-3-runnable.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3-runnable.c?ref=fb289175ff675d90d5ab24e60c177e4e943d0ebe", "patch": "@@ -179,7 +179,7 @@ int main()\n \tvector long long int vec_ll_int_expected, vec_ll_int_result;\n \tvector long long unsigned int vec_ll_uns_int0, vec_ll_uns_int1;\n \tvector long long unsigned int vec_ll_uns_int_expected, vec_ll_uns_int_result;\n-\tvector float  vec_flt, vec_flt_result, vec_flt_expected;\n+\tvector float  vec_flt0, vec_flt1, vec_flt_result, vec_flt_expected;\n \tvector double vec_dble0, vec_dble1, vec_dble_result, vec_dble_expected;\n \n \tvec_int = (vector signed int){ -1, 3, -5, 1234567 };\n@@ -188,7 +188,7 @@ int main()\n \tvec_unint = (vector unsigned int){ 9, 11, 15, 2468013579 };\n \tvec_ll_uns_int0 = (vector unsigned long long int){ 102, 9753108642 };\n \tvec_ll_uns_int1 = (vector unsigned long long int){ 23, 29 };\n-\tvec_flt = (vector float){ -21., 3.5, -53., 78. };\n+\tvec_flt0 = (vector float){ -21., 3.5, -53., 78. };\n \tvec_dble0 = (vector double){ 34.0, 97.0 };\n \tvec_dble1 = (vector double){ 214.0, -5.5 };\n \n@@ -202,7 +202,7 @@ int main()\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n \n \tvec_dble_expected = (vector double){-21.000000, -53.000000};\n-\tvec_dble_result = vec_doublee (vec_flt);\n+\tvec_dble_result = vec_doublee (vec_flt0);\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n \n \n@@ -216,7 +216,7 @@ int main()\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n \n \tvec_dble_expected = (vector double){3.500000, 78.000000};\n-\tvec_dble_result = vec_doubleo (vec_flt);\n+\tvec_dble_result = vec_doubleo (vec_flt0);\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n \n \n@@ -230,7 +230,7 @@ int main()\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n \n \tvec_dble_expected = (vector double){-53.000000, 78.000000};\n-\tvec_dble_result = vec_doublel (vec_flt);\n+\tvec_dble_result = vec_doublel (vec_flt0);\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n \n \n@@ -244,7 +244,7 @@ int main()\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n \n \tvec_dble_expected = (vector double){-21.000000, 3.500000};\n-\tvec_dble_result = vec_doubleh (vec_flt);\n+\tvec_dble_result = vec_doubleh (vec_flt0);\n \ttest_result_dp(vec_dble_result, vec_dble_expected);\n \n \t/* conversion of integer vector to single precision float vector */\n@@ -283,9 +283,9 @@ int main()\n \ttest_result_sp(ODD, vec_flt_result, vec_flt_expected);\n \n \t/* Convert single precision float to int */\n-\tvec_flt = (vector float){-14.30, 34.00, 22.00, 97.00};\n+\tvec_flt0 = (vector float){-14.30, 34.00, 22.00, 97.00};\n \tvec_int_expected = (vector signed int){-14, 34, 22, 97};\n-\tvec_int_result = vec_signed (vec_flt);\n+\tvec_int_result = vec_signed (vec_flt0);\n \ttest_int_result (ALL, vec_int_result, vec_int_expected);\n \n \t/* Convert double precision float to long long int */\n@@ -306,6 +306,13 @@ int main()\n \tvec_int_result = vec_signedo (vec_dble0);\n \ttest_int_result (ODD, vec_int_result, vec_int_expected);\n \n+\t/* Convert single precision float to  unsigned int */\n+\tvec_flt0 = (vector float){124.930, 8134.49, 23.3, 45.4};\n+\tvec_uns_int_expected = (vector unsigned int){124, 8134, 23, 45};\n+\tvec_uns_int_result = vec_unsigned (vec_flt0);\n+\ttest_unsigned_int_result (ALL, vec_uns_int_result,\n+\t\t\t\t  vec_uns_int_expected);\n+\n \t/* Convert double precision float to long long unsigned int */\n \tvec_dble0 = (vector double){124.930, 8134.49};\n \tvec_ll_uns_int_expected = (vector long long unsigned int){124, 8134};"}, {"sha": "f0edd125763cff4f06057e2aa34fd271d713705f", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-3.c", "status": "modified", "additions": 60, "deletions": 16, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3.c?ref=fb289175ff675d90d5ab24e60c177e4e943d0ebe", "patch": "@@ -1,7 +1,6 @@\n-/* { dg-do compile } */\n-/* { dg-require-effective-target powerpc_vsx_ok } */\n-/* { dg-options \"-O2 -mvsx -mcpu=power6\" } */\n-/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power6\" } } */\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n \n #include <altivec.h>\n \n@@ -83,6 +82,20 @@ test_sll_vui_vui_vuc (vector unsigned int x, vector unsigned char y)\n \treturn vec_sll (x, y);\n }\n \n+vector signed int long long\n+test_sll_vsill_vsill_vuc (vector signed long long int x,\n+\t\t\t  vector unsigned char y)\n+{\n+\treturn vec_sll (x, y);\n+}\n+\n+vector unsigned int long long\n+test_sll_vuill_vuill_vuc (vector unsigned long long int x,\n+\t\t\t  vector unsigned char y)\n+{\n+\treturn vec_sll (x, y);\n+}\n+\n vector bool long long\n test_sll_vbll_vbll_vuc (vector bool long long x,\n \t\t\tvector unsigned char y)\n@@ -310,18 +323,46 @@ test_cmpb_float (vector float x, vector float y)\n      test_nabs_int             1 vspltisw, 1 vsubuwm, 1 vminsw\n      test_nabs_float           1 xvnabssp\n      test_nabs_double          1 xvnabsdp\n-     test_vsll_slo_vsll_vsc    1 vslo\n-     test_vsll_slo_vsll_vuc    1 vslo\n-     test_vull_slo_vsll_vsc    1 vslo\n-     test_vull_slo_vsll_vuc    1 vslo\n-     test_vsc_mulo_vsc_vsc     1 xxsldwi\n-     test_vuc_mulo_vuc_vuc     1 xxsldwi\n-     test_vssi_mulo_vssi_vssi  1 xxsldwi\n-     test_vusi_mulo_vusi_vusi  1 xxsldwi\n-     test_vsi_mulo_vsi_vsi     1 xxsldwi\n-     test_vui_mulo_vui_vui     1 xxsldwi\n-     test_vsl_mulo_vsl_vsl     1 xxsldwi\n-     test_vul_mulo_vul_vul     1 xxsldwi\n+     test_sll_vsc_vsc_vsuc     1 vsl\n+     test_sll_vuc_vuc_vuc      1 vsl\n+     test_sll_vsi_vsi_vuc      1 vsl\n+     test_sll_vui_vui_vuc      1 vsl\n+     test_sll_vsill_vsill_vuc  1 vsl\n+     test_sll_vuill_vuill_vuc  1 vsl\n+     test_sll_vbll_vbll_vuc    1 vsl\n+     test_sll_vbll_vbll_vull   1 vsl\n+     test_sll_vbll_vbll_vus    1 vsl\n+     test_sll_vp_vp_vuc        1 vsl\n+     test_sll_vssi_vssi_vuc    1 vsl\n+     test_sll_vusi_vusi_vuc    1 vsl\n+     test_slo_vsc_vsc_vsc      1 vslo\n+     test_slo_vsc_vsc_vuc      1 vslo\n+     test_slo_vuc_vuc_vsc      1 vslo\n+     test_slo_vuc_vuc_vuc      1 vslo\n+     test_slo_vsi_vsi_vsc      1 vslo\n+     test_slo_vsi_vsi_vuc      1 vslo\n+     test_slo_vui_vui_vsc      1 vslo\n+     test_slo_vui_vui_vuc      1 vslo\n+     test_slo_vsll_slo_vsll_vsc 1 vslo\n+     test_slo_vsll_slo_vsll_vuc 1 vslo\n+     test_slo_vull_slo_vull_vsc 1 vslo\n+     test_slo_vull_slo_vull_vuc 1 vslo\n+     test_slo_vp_vp_vsc        1 vslo\n+     test_slo_vp_vp_vuc        1 vslo\n+     test_slo_vssi_vssi_vsc    1 vslo\n+     test_slo_vssi_vssi_vuc    1 vslo\n+     test_slo_vusi_vusi_vsc    1 vslo\n+     test_slo_vusi_vusi_vuc    1 vslo\n+     test_slo_vf_vf_vsc        1 vslo\n+     test_slo_vf_vf_vuc        1 vslo\n+     test_vsc_sldw_vsc_vsc     1 xxsldwi\n+     test_vuc_sldw_vuc_vuc     1 xxsldwi\n+     test_vssi_sldw_vssi_vssi  1 xxsldwi\n+     test_vusi_sldw_vusi_vusi  1 xxsldwi\n+     test_vsi_sldw_vsi_vsi     1 xxsldwi\n+     test_vui_sldw_vui_vui     1 xxsldwi\n+     test_vsl_sldw_vsl_vsl     1 xxsldwi\n+     test_vul_sldw_vul_vul     1 xxsldwi\n      test_cmpb_float           1 vcmpbfp */\n \n /* { dg-final { scan-assembler-times \"vcmpequb\" 1 } } */\n@@ -340,3 +381,6 @@ test_cmpb_float (vector float x, vector float y)\n /* { dg-final { scan-assembler-times \"vslo\"    20 } } */\n /* { dg-final { scan-assembler-times \"xxsldwi\"  8 } } */\n /* { dg-final { scan-assembler-times \"vcmpbfp\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vsl\"     68 { target le } } } */\n+/* { dg-final { scan-assembler-times \"vsl\"     68 { target { be && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times \"vsl\"     82 { target { be && lp64  } } } } */"}, {"sha": "70fe528a5e7e219754d576af94b7ec69514496a4", "filename": "gcc/testsuite/gcc.target/powerpc/p9-xxbr-2.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-xxbr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-xxbr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fp9-xxbr-2.c?ref=fb289175ff675d90d5ab24e60c177e4e943d0ebe", "patch": "@@ -26,6 +26,12 @@ rev_long_long (vector long long a)\n   return vec_revb (a);\t\t/* XXBRD.  */\n }\n \n+vector bool long long\n+rev_bool_long_long (vector bool long long a)\n+{\n+  return vec_revb (a);\t\t/* XXBRD.  */\n+}\n+\n vector unsigned long long\n rev_ulong_ulong (vector unsigned long long a)\n {\n@@ -44,5 +50,5 @@ rev_uint128 (vector __uint128_t a)\n   return vec_revb (a);\t\t/* XXBRQ.  */\n }\n \n-/* { dg-final { scan-assembler-times \"xxbrd\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xxbrd\" 5 } } */\n /* { dg-final { scan-assembler-times \"xxbrq\" 2 } } */"}, {"sha": "2df9fca11d4a125a6df3dab833732b9a7c4a07ab", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-7-be.c", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-7-be.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-7-be.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-7-be.c?ref=a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1", "patch": "@@ -1,50 +0,0 @@\n-/* { dg-do compile { target powerpc*-*-* } } */\n-/* { dg-require-effective-target powerpc_vsx_ok } */\n-/* { dg-options \"-mvsx\" } */\n-\n-/* This is an extension of altivec-7-be.c, with vsx target features included. */\n-\n-/* Expected results for Big Endian:\n-(from altivec-7.h)\n-     vec_packpx                     vpkpx\n-     vec_ld                         lxvd2x or lxv\n-     vec_lde                        lvewx\n-     vec_ldl                        lxvl\n-     vec_lvewx                      lvewx\n-     vec_andc                       xxnor\n-                                    xxland\n-     vec_vxor                       xxlxor\n-     vec_vmsumubm                   vmsumubm\n-     vec_vmulesb                    vmulesb\n-     vec_vmulosb                    vmulosb\n-(from vsx-7.h)\n-     vec_unpackl                    vupkhsh\n-     vec_unpackh                    vupklsh\n-*/\n-\n-/* { dg-final { scan-assembler-times \"vpkpx\" 2 } } */\n-/* { dg-final { scan-assembler-times \"vmulesb\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vmulosb\" 1 } } */\n-\n-// For LE platforms P9 and later, we generate the lxv insn instead of lxvd2x.\n-/* { dg-final { scan-assembler-times {\\mlxvd2x\\M}  0  { target { { powerpc64*le-*-* } && { p9vector_hw } } } } } */\n-/* { dg-final { scan-assembler-times {\\mlxv\\M}    36  { target { { powerpc64*le-*-* } && { p9vector_hw } } } } } */\n-// For LE platforms < P9.\n-/* { dg-final { scan-assembler-times {\\mlxvd2x\\M}  36  { target { { powerpc64*le-*-* } && { ! p9vector_hw } } } } } */\n-// For BE platforms we generate 6 lxvd2x insns.\n-/* { dg-final { scan-assembler-times {\\mlxvd2x\\M}  6  { target { { ! powerpc64*le-*-* } && { ! p9vector_hw } } } } } */\n-\n-/* { dg-final { scan-assembler-times \"lvewx\" 2 } } */\n-/* { dg-final { scan-assembler-times \"lvxl\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vupklsh\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vupkhsh\" 1 } } */\n-/* { dg-final { scan-assembler-times \"xxlnor\" 4 } } */\n-/* { dg-final { scan-assembler-times \"xxland\" 4 } } */\n-/* { dg-final { scan-assembler-times \"xxlxor\" 5 } } */\n-/* { dg-final { scan-assembler-times \"vupkhpx\" 1 } } */\n-\n-/* Source code for the 'altivec' test in altivec-7.h */\n-/* Source code for the 'vsx' required tests in vsx-7.h */\n-\n-#include \"altivec-7.h\"\n-#include \"vsx-7.h\""}, {"sha": "94cb69ef85b243d836c808d1debe5c47ba32d59d", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-7.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-7.c?ref=fb289175ff675d90d5ab24e60c177e4e943d0ebe", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx\" } */\n+\n+#include <altivec.h>\n+\n+vector float *vecfloat;\n+vector double *vecdouble;\n+\n+int main2 ()\n+{\n+\n+  *vecdouble++ = vec_unpackl(vecfloat[0]);\n+  *vecdouble++ = vec_unpackh(vecfloat[0]);\n+\n+  return 0;\n+}\n+\n+/* Expected results:\n+     vec_unpackl                    vupkhsh\n+     vec_unpackh                    vupklsh\n+*/\n+\n+/* { dg-final { scan-assembler-times \"vupkhpx\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vupklpx\" 1 } } */\n+"}, {"sha": "fe5547243f45e1a4563fa29136458c37da6b5cf7", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-7.h", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-7.h?ref=a2b8cef0d31f0c5468170f4bd42d2ee37ca20bf1", "patch": "@@ -1,18 +0,0 @@\n-\n-/* This test code is included into vsx-7-be.c.\n- * this is meant to supplement code in altivec-7.h.  */\n-\n-#include <altivec.h>\n-\n-\n-vector float *vecfloat;\n-vector double *vecdouble;\n-\n-int main2 ()\n-{\n-\n-  *vecdouble++ = vec_unpackl(vecfloat[0]);\n-  *vecdouble++ = vec_unpackh(vecfloat[0]);\n-\n-  return 0;\n-}"}, {"sha": "03e391993443a38492775793e6e033c97909fdf1", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-builtin-7.c", "status": "modified", "additions": 105, "deletions": 55, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-builtin-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-builtin-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-builtin-7.c?ref=fb289175ff675d90d5ab24e60c177e4e943d0ebe", "patch": "@@ -8,17 +8,22 @@\n    supported with various options.  */\n \n #include <altivec.h>\n-\n-double extract_df_0_reg (vector double p) { return vec_extract (p, 0); }\n-double extract_df_1_reg (vector double p) { return vec_extract (p, 1); }\n+int c0 = 0;\n+int c1 = 1;\n+int c3 = 3;\n+int c7 = 7;\n+int c15 = 15;\n+\n+double extract_df_0_reg (vector double p) { return vec_extract (p, c0); }\n+double extract_df_1_reg (vector double p) { return vec_extract (p, c1); }\n double extract_df_n_reg (vector double p, int n) { return vec_extract (p, n); }\n \n-double extract_df_0_mem (vector double *p) { return vec_extract (*p, 0); }\n-double extract_df_1_mem (vector double *p) { return vec_extract (*p, 1); }\n+double extract_df_0_mem (vector double *p) { return vec_extract (*p, c0); }\n+double extract_df_1_mem (vector double *p) { return vec_extract (*p, c1); }\n double extract_df_n_mem (vector double *p, int n) { return vec_extract (*p, n); }\n \n-vector double insert_df_0 (vector double p, double x) { return vec_insert (x, p, 0); }\n-vector double insert_df_1 (vector double p, double x) { return vec_insert (x, p, 1); }\n+vector double insert_df_0 (vector double p, double x) { return vec_insert (x, p, c0); }\n+vector double insert_df_1 (vector double p, double x) { return vec_insert (x, p, c1); }\n vector double insert_df_n (vector double p, double x, int n) { return vec_insert (x, p, n); }\n \n vector double splat_df_reg (double x) { return vec_splats (x); }\n@@ -30,122 +35,167 @@ vector double splat_df_mem (double *x) { return vec_splats (*x); }\n #define ll long long\n #endif\n \n-ll extract_di_0_reg (vector ll p) { return vec_extract (p, 0); }\n-ll extract_di_1_reg (vector ll p) { return vec_extract (p, 1); }\n+ll extract_di_0_reg (vector ll p) { return vec_extract (p, c0); }\n+ll extract_di_1_reg (vector ll p) { return vec_extract (p, c1); }\n ll extract_di_n_reg (vector ll p, int n) { return vec_extract (p, n); }\n \n-ll extract_di_0_mem (vector ll *p) { return vec_extract (*p, 0); }\n-ll extract_di_1_mem (vector ll *p) { return vec_extract (*p, 1); }\n+ll extract_di_0_mem (vector ll *p) { return vec_extract (*p, c0); }\n+ll extract_di_1_mem (vector ll *p) { return vec_extract (*p, c1); }\n ll extract_di_n_mem (vector ll *p, int n) { return vec_extract (*p, n); }\n \n-vector ll insert_di_0 (vector ll p, ll x) { return vec_insert (x, p, 0); }\n-vector ll insert_di_1 (vector ll p, ll x) { return vec_insert (x, p, 1); }\n+vector ll insert_di_0 (vector ll p, ll x) { return vec_insert (x, p, c0); }\n+vector ll insert_di_1 (vector ll p, ll x) { return vec_insert (x, p, c1); }\n vector ll insert_di_n (vector ll p, ll x, int n) { return vec_insert (x, p, n); }\n+vector ll insert_di_0_v2 (vector ll int p, ll int x) { return vec_insert (x, p, c0); }\n+vector unsigned ll insert_di_0_v3 (vector unsigned ll int p, unsigned ll int x) { return vec_insert (x, p, c0); }\n \n vector ll splat_di_reg (ll x) { return vec_splats (x); }\n vector ll splat_di_mem (ll *x) { return vec_splats (*x); }\n \n-float extract_sf_0_reg (vector float p) { return vec_extract (p, 0); }\n-float extract_sf_3_reg (vector float p) { return vec_extract (p, 3); }\n+float extract_sf_0_reg (vector float p) { return vec_extract (p, c0); }\n+float extract_sf_3_reg (vector float p) { return vec_extract (p, c3); }\n float extract_sf_n_reg (vector float p, int n) { return vec_extract (p, n); }\n \n-float extract_sf_0_mem (vector float *p) { return vec_extract (*p, 0); }\n-float extract_sf_3_mem (vector float *p) { return vec_extract (*p, 3); }\n+float extract_sf_0_mem (vector float *p) { return vec_extract (*p, c0); }\n+float extract_sf_3_mem (vector float *p) { return vec_extract (*p, c3); }\n float extract_sf_n_mem (vector float *p, int n) { return vec_extract (*p, n); }\n \n-vector float insert_sf_0 (vector float p, float x) { return vec_insert (x, p, 0); }\n-vector float insert_sf_3 (vector float p, float x) { return vec_insert (x, p, 3); }\n+vector float insert_sf_0 (vector float p, float x) { return vec_insert (x, p, c0); }\n+vector float insert_sf_3 (vector float p, float x) { return vec_insert (x, p, c3); }\n vector float insert_sf_n (vector float p, float x, int n) { return vec_insert (x, p, n); }\n \n vector float splat_sf_reg (float x) { return vec_splats (x); }\n vector float splat_sf_mem (float *x) { return vec_splats (*x); }\n \n-int extract_si_0_reg (vector int p) { return vec_extract (p, 0); }\n-int extract_si_3_reg (vector int p) { return vec_extract (p, 3); }\n+int extract_si_0_reg (vector int p) { return vec_extract (p, c0); }\n+int extract_si_3_reg (vector int p) { return vec_extract (p, c3); }\n int extract_si_n_reg (vector int p, int n) { return vec_extract (p, n); }\n \n-int extract_si_0_mem (vector int *p) { return vec_extract (*p, 0); }\n-int extract_si_3_mem (vector int *p) { return vec_extract (*p, 3); }\n+int extract_si_0_mem (vector int *p) { return vec_extract (*p, c0); }\n+int extract_si_3_mem (vector int *p) { return vec_extract (*p, c3); }\n int extract_si_n_mem (vector int *p, int n) { return vec_extract (*p, n); }\n \n-vector int insert_si_0 (vector int p, int x) { return vec_insert (x, p, 0); }\n-vector int insert_si_3 (vector int p, int x) { return vec_insert (x, p, 3); }\n+vector int insert_si_0 (vector int p, int x) { return vec_insert (x, p, c0); }\n+vector int insert_si_3 (vector int p, int x) { return vec_insert (x, p, c3); }\n vector int insert_si_n (vector int p, int x, int n) { return vec_insert (x, p, n); }\n \n vector int splat_si_reg (int x) { return vec_splats (x); }\n vector int splat_si_mem (int *x) { return vec_splats (*x); }\n \n-unsigned int extract_usi_0_reg (vector unsigned int p) { return vec_extract (p, 0); }\n-unsigned int extract_usi_3_reg (vector unsigned int p) { return vec_extract (p, 3); }\n+unsigned int extract_usi_0_reg (vector unsigned int p) { return vec_extract (p, c0); }\n+unsigned int extract_usi_3_reg (vector unsigned int p) { return vec_extract (p, c3); }\n unsigned int extract_usi_n_reg (vector unsigned int p, int n) { return vec_extract (p, n); }\n \n-unsigned int extract_usi_0_mem (vector unsigned int *p) { return vec_extract (*p, 0); }\n-unsigned int extract_usi_3_mem (vector unsigned int *p) { return vec_extract (*p, 3); }\n+unsigned int extract_usi_0_mem (vector unsigned int *p) { return vec_extract (*p, c0); }\n+unsigned int extract_usi_3_mem (vector unsigned int *p) { return vec_extract (*p, c3); }\n unsigned int extract_usi_n_mem (vector unsigned int *p, int n) { return vec_extract (*p, n); }\n \n-vector unsigned int insert_usi_0 (vector unsigned int p, unsigned int x) { return vec_insert (x, p, 0); }\n-vector unsigned int insert_usi_3 (vector unsigned int p, unsigned int x) { return vec_insert (x, p, 3); }\n+vector unsigned int insert_usi_0 (vector unsigned int p, unsigned int x) { return vec_insert (x, p, c0); }\n+vector unsigned int insert_usi_3 (vector unsigned int p, unsigned int x) { return vec_insert (x, p, c3); }\n vector unsigned int insert_usi_n (vector unsigned int p, unsigned int x, int n) { return vec_insert (x, p, n); }\n \n vector unsigned int splat_usi_reg (unsigned int x) { return vec_splats (x); }\n vector unsigned int splat_usi_mem (unsigned int *x) { return vec_splats (*x); }\n \n-short extract_hi_0_reg (vector short p) { return vec_extract (p, 0); }\n-short extract_hi_7_reg (vector short p) { return vec_extract (p, 7); }\n+short extract_hi_0_reg (vector short p) { return vec_extract (p, c0); }\n+short extract_hi_7_reg (vector short p) { return vec_extract (p, c7); }\n short extract_hi_n_reg (vector short p, int n) { return vec_extract (p, n); }\n \n-short extract_hi_0_mem (vector short *p) { return vec_extract (*p, 0); }\n-short extract_hi_7_mem (vector short *p) { return vec_extract (*p, 7); }\n+short extract_hi_0_mem (vector short *p) { return vec_extract (*p, c0); }\n+short extract_hi_7_mem (vector short *p) { return vec_extract (*p, c7); }\n short extract_hi_n_mem (vector short *p, int n) { return vec_extract (*p, n); }\n \n-vector short insert_hi_0 (vector short p, short x) { return vec_insert (x, p, 0); }\n-vector short insert_hi_7 (vector short p, short x) { return vec_insert (x, p, 7); }\n+vector short insert_hi_0 (vector short p, short x) { return vec_insert (x, p, c0); }\n+vector short insert_hi_7 (vector short p, short x) { return vec_insert (x, p, c7); }\n vector short insert_hi_n (vector short p, short x, int n) { return vec_insert (x, p, n); }\n \n vector short splat_hi_reg (short x) { return vec_splats (x); }\n vector short splat_hi_mem (short *x) { return vec_splats (*x); }\n \n-unsigned short extract_uhi_0_reg (vector unsigned short p) { return vec_extract (p, 0); }\n-unsigned short extract_uhi_7_reg (vector unsigned short p) { return vec_extract (p, 7); }\n+unsigned short extract_uhi_0_reg (vector unsigned short p) { return vec_extract (p, c0); }\n+unsigned short extract_uhi_7_reg (vector unsigned short p) { return vec_extract (p, c7); }\n unsigned short extract_uhi_n_reg (vector unsigned short p, int n) { return vec_extract (p, n); }\n \n-unsigned short extract_uhi_0_mem (vector unsigned short *p) { return vec_extract (*p, 0); }\n-unsigned short extract_uhi_7_mem (vector unsigned short *p) { return vec_extract (*p, 7); }\n+unsigned short extract_uhi_0_mem (vector unsigned short *p) { return vec_extract (*p, c0); }\n+unsigned short extract_uhi_7_mem (vector unsigned short *p) { return vec_extract (*p, c7); }\n unsigned short extract_uhi_n_mem (vector unsigned short *p, int n) { return vec_extract (*p, n); }\n \n-vector unsigned short insert_uhi_0 (vector unsigned short p, unsigned short x) { return vec_insert (x, p, 0); }\n-vector unsigned short insert_uhi_7 (vector unsigned short p, unsigned short x) { return vec_insert (x, p, 7); }\n+vector unsigned short insert_uhi_0 (vector unsigned short p, unsigned short x) { return vec_insert (x, p, c0); }\n+vector unsigned short insert_uhi_7 (vector unsigned short p, unsigned short x) { return vec_insert (x, p, c7); }\n vector unsigned short insert_uhi_n (vector unsigned short p, unsigned short x, int n) { return vec_insert (x, p, n); }\n \n vector unsigned short splat_uhi_reg (unsigned short x) { return vec_splats (x); }\n vector unsigned short splat_uhi_mem (unsigned short *x) { return vec_splats (*x); }\n \n-signed char extract_qi_0_reg (vector signed char p) { return vec_extract (p, 0); }\n-signed char extract_qi_1_reg5 (vector signed char p) { return vec_extract (p, 15); }\n+signed char extract_qi_0_reg (vector signed char p) { return vec_extract (p, c0); }\n+unsigned char extract_uqi_0_reg (vector unsigned char p) { return vec_extract (p, c0); }\n+signed char extract_qi_1_reg5 (vector signed char p) { return vec_extract (p, c15); }\n signed char extract_qi_n_reg (vector signed char p, int n) { return vec_extract (p, n); }\n \n-signed char extract_qi_0_mem (vector signed char *p) { return vec_extract (*p, 0); }\n-signed char extract_qi_1_mem5 (vector signed char *p) { return vec_extract (*p, 15); }\n+signed char extract_qi_0_mem (vector signed char *p) { return vec_extract (*p, c0); }\n+signed char extract_qi_1_mem5 (vector signed char *p) { return vec_extract (*p, c15); }\n signed char extract_qi_n_mem (vector signed char *p, int n) { return vec_extract (*p, n); }\n \n-vector signed char insert_qi_0 (vector signed char p, signed char x) { return vec_insert (x, p, 0); }\n-vector signed char insert_qi_15 (vector signed char p, signed char x) { return vec_insert (x, p, 15); }\n+vector signed char insert_qi_0 (vector signed char p, signed char x) { return vec_insert (x, p, c0); }\n+vector signed char insert_qi_15 (vector signed char p, signed char x) { return vec_insert (x, p, c15); }\n vector signed char insert_qi_n (vector signed char p, signed char x, int n) { return vec_insert (x, p, n); }\n \n vector signed char splat_qi_reg (signed char x) { return vec_splats (x); }\n vector signed char splat_qi_mem (signed char *x) { return vec_splats (*x); }\n \n-unsigned char extract_uqi_0_reg (vector unsigned char p) { return vec_extract (p, 0); }\n-unsigned char extract_uqi_1_reg5 (vector unsigned char p) { return vec_extract (p, 15); }\n+unsigned char extract_uqi_1_reg5 (vector unsigned char p) { return vec_extract (p, c15); }\n unsigned char extract_uqi_n_reg (vector unsigned char p, int n) { return vec_extract (p, n); }\n \n-unsigned char extract_uqi_0_mem (vector unsigned char *p) { return vec_extract (*p, 0); }\n-unsigned char extract_uqi_1_mem5 (vector unsigned char *p) { return vec_extract (*p, 15); }\n+unsigned char extract_uqi_0_mem (vector unsigned char *p) { return vec_extract (*p, c0); }\n+unsigned char extract_uqi_1_mem5 (vector unsigned char *p) { return vec_extract (*p, c15); }\n unsigned char extract_uqi_n_mem (vector unsigned char *p, int n) { return vec_extract (*p, n); }\n \n-vector unsigned char insert_uqi_0 (vector unsigned char p, unsigned char x) { return vec_insert (x, p, 0); }\n-vector unsigned char insert_uqi_15 (vector unsigned char p, unsigned char x) { return vec_insert (x, p, 15); }\n+vector unsigned char insert_uqi_0 (vector unsigned char p, unsigned char x) { return vec_insert (x, p, c0); }\n+vector unsigned char insert_uqi_15 (vector unsigned char p, unsigned char x) { return vec_insert (x, p, c15); }\n vector unsigned char insert_uqi_n (vector unsigned char p, unsigned char x, int n) { return vec_insert (x, p, n); }\n \n vector unsigned char splat_uqi_reg (unsigned char x) { return vec_splats (x); }\n vector unsigned char splat_uqi_mem (unsigned char *x) { return vec_splats (*x); }\n+\n+vector signed char splat_sc_s8 () { return vec_splat_s8 (2); }\n+vector unsigned char splat_uc_u8 () { return vec_splat_u8 (3); }\n+\n+vector signed short int splat_ssi_s16() { return vec_splat_s16 (4); }\n+vector unsigned short int splat_usi_s16() { return vec_splat_u16 (5); }\n+\n+vector signed int splat_si_s32() { return vec_splat_s32 (6); }\n+vector unsigned int splat_ui_u32() { return vec_splat_u32 (7); }\n+\n+vector signed long long splat_sll (signed long long x)\n+  { return vec_splats (x); }\n+\n+vector unsigned long long splat_uc (unsigned long long x)\n+  { return vec_splats (x); }\n+\n+#ifdef __SIZEOF_INT128__\n+/* Note, int128 not supported on 32-bit platforms.  */\n+vector signed __int128 splat_int128 (signed __int128 x) { return vec_splats (x); }\n+vector unsigned __int128 splat_uint128 (unsigned __int128 x) { return vec_splats (x); }\n+#endif\n+\n+/* Expected results:\n+   vec_extract                       rldic\n+   vec_insert                        rldicr\n+   vec_splats                        xxspltd detected as xxpermdi\n+   vec_splat_s8                      vspltisb\n+   vec_splat_u8                      vspltisb\n+   vec_splat_s16                     vspltish\n+   vec_splat_u16                     vspltish\n+   vec_splat_s32                     vspltisw\n+   vec_splat_u32                     vspltisw\n+   return 128 vec_splats             vspltisw\n+ */\n+\n+/* { dg-final { scan-assembler-times {\\mrldic\\M} 0  { target { be && ilp32 } } } } */\n+/* { dg-final { scan-assembler-times {\\mrldic\\M} 64 { target { be && lp64 } } } } */\n+/* { dg-final { scan-assembler-times {\\mrldic\\M} 64 { target le } } } */\n+/* { dg-final { scan-assembler-times \"xxpermdi\" 4 { target be } } } */\n+/* { dg-final { scan-assembler-times \"xxpermdi\" 6 { target le } } } */\n+/* { dg-final { scan-assembler-times \"vspltisb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vspltish\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vspltisw\" 2 } } */"}, {"sha": "4570dc3e09be78f98d20c6b4c73f7aa9fd37a1c4", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-vector-5.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb289175ff675d90d5ab24e60c177e4e943d0ebe/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-vector-5.c?ref=fb289175ff675d90d5ab24e60c177e4e943d0ebe", "patch": "@@ -121,8 +121,14 @@ vnearbyint_f (vector float arg)\n   return vec_nearbyint (arg);\n }\n \n+static vector float\n+vrint_f (vector float arg)\n+{\n+  return vec_rint (arg);\n+}\n+\n static vector double\n-vrint (vector double arg)\n+vrint_d (vector double arg)\n {\n   return vec_rint (arg);\n }\n@@ -159,9 +165,9 @@ static struct\n   { {  1.0,  2.0 },\t{  1.1,  1.7 },\t\tvnearbyint_d,\t\"vnearbyint_d\" },\n   { { -1.0, -2.0 },\t{ -1.1, -1.7 },\t\tvnearbyint_d,\t\"vnearbyint_d\" },\n   { { -2.0,  2.0 },\t{ -1.5,  1.5 },\t\tvnearbyint_d,\t\"vnearbyint_d\" },\n-  { {  1.0,  2.0 },\t{  1.1,  1.7 },\t\tvrint,\t\t\"vrint\" },\n-  { { -1.0, -2.0 },\t{ -1.1, -1.7 },\t\tvrint,\t\t\"vrint\" },\n-  { { -2.0,  2.0 },\t{ -1.5,  1.5 },\t\tvrint,\t\t\"vrint\" },\n+  { {  1.0,  2.0 },\t{  1.1,  1.7 },\t\tvrint_d,\t\"vrint_d\" },\n+  { { -1.0, -2.0 },\t{ -1.1, -1.7 },\t\tvrint_d,\t\"vrint_d\" },\n+  { { -2.0,  2.0 },\t{ -1.5,  1.5 },\t\tvrint_d,\t\"vrint_d\" },\n \n   { {  2.0,  4.0 },\t{  4.0, 16.0 },\t\tvsqrt_d,\t\"vsqrt_d\" },\n };\n@@ -213,6 +219,9 @@ static struct\n   { {  1.0,  2.0, -3.0, 3.0 },\t{  1.1,  1.7, -3.1, 3.1 },\tvnearbyint_f,\t\"vnearbyint_f\" },\n   { { -1.0, -2.0, -3.0, 3.0 },\t{ -1.1, -1.7, -2.9, 2.9 },\tvnearbyint_f,\t\"vnearbyint_f\" },\n   { { -2.0,  2.0, -3.0, 3.0 },\t{ -1.5,  1.5, -2.55, 3.49 },\tvnearbyint_f,\t\"vnearbyint_f\" },\n+  { {  10.0,  18.0, 30.0, 40.0 }, {  10.1,  17.7, 30.0, 40.01 }, vrint_f,\t\"vrint_f\" },\n+  { { -11.0, -18.0, -30.0, -40.0 }, { -11.1, -17.7, -30.0, -40.01 }, vrint_f,\t\"vrint_f\" },\n+  \n   { {  2.0,  4.0 },\t{  4.0, 16.0 },\t\tvsqrt_f,\t\"vsqrt_f\" },\n };\n "}]}