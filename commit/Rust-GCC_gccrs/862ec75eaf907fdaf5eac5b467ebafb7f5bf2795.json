{"sha": "862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "node_id": "C_kwDOANBUbNoAKDg2MmVjNzVlYWY5MDdmZGFmNWVhYzViNDY3ZWJhZmI3ZjViZjI3OTU", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-04-08T05:37:56Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-04-13T11:50:47Z"}, "message": "Unify HIR::ExprStmt derived class visiting\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-stmt.cc\n\t(CompileStmt::visit): Unify ExprStmtWith{,out}Block visitors.\n\t* backend/rust-compile-stmt.h\n\t(CompileStmt::visit): Likewise.\n\t* backend/rust-compile-item.h\n\t(CompileItem::visit): Likewise.\n\t* hir/rust-hir-dump.cc\n\t(Dump::visit): Likewise.\n\t* hir/rust-hir-dump.h\n\t(Dump::visit): Likewise.\n\t* hir/tree/rust-hir-stmt.h\n\t(ExprStmt::accept_vis): Add.\n\t(ExprStmtWithoutBlock::accept_vis): Remove.\n\t(ExprStmtWithBlock::accept_vis): Remove.\n\t* hir/tree/rust-hir.cc\n\t(ExprStmt::accept_vis): Add.\n\t(ExprStmtWithoutBlock::accept_vis): Remove.\n\t(ExprStmtWithBlock::accept_vis): Remove.\n\t* hir/tree/rust-hir-visitor.h\n\t(HIRFullVisitor::visit): Likewise.\n\t(HIRFullVisitorBase::visit): Likewise.\n\t(HIRStmtVisitor::visit): Likewise.\n\t* checks/errors/rust-const-checker.cc\n\t(ConstChecker::visit): Likewise.\n\t* checks/errors/rust-const-checker.h\n\t(ConstChecker::visit): Likewise.\n\t* checks/errors/rust-unsafe-checker.cc\n\t(UnsafeChecker::visit): Likewise.\n\t* checks/errors/rust-unsafe-checker.h\n\t(UnsafeChecker::visit): Likewise.\n\t* checks/errors/privacy/rust-privacy-reporter.cc\n\t(PrivacyReporter::visit): Likewise.\n\t* checks/errors/privacy/rust-privacy-reporter.h\n\t(PrivacyReporter::visit): Likewise.\n\t* checks/lints/rust-lint-marklive.h\n\t(MarkLive::visit): Likewise.\n\t* typecheck/rust-hir-type-check-stmt.cc\n\t(TypeCheckStmt::visit): Likewise.\n\t* typecheck/rust-hir-type-check-stmt.h\n\t(TypeCheckStmt::visit): Likewise.\n\t* typecheck/rust-tycheck-dump.h\n\t(TypeResolverDump::visit): Likewise.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "47bf310eaae8a51761be6d294128992b177d9d3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47bf310eaae8a51761be6d294128992b177d9d3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0487d6731d5d901154396e1d804a671371ac2eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0487d6731d5d901154396e1d804a671371ac2eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0487d6731d5d901154396e1d804a671371ac2eb"}], "stats": {"total": 114, "additions": 23, "deletions": 91}, "files": [{"sha": "70efc15f127590dfae6eb779b8017b0db3838d6f", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -68,8 +68,7 @@ class CompileItem : private HIRCompileBase, protected HIR::HIRStmtVisitor\n   void visit (HIR::Trait &) override {}\n   void visit (HIR::EmptyStmt &) override {}\n   void visit (HIR::LetStmt &) override {}\n-  void visit (HIR::ExprStmtWithoutBlock &) override {}\n-  void visit (HIR::ExprStmtWithBlock &) override {}\n+  void visit (HIR::ExprStmt &) override {}\n \n protected:\n   CompileItem (Context *ctx, TyTy::BaseType *concrete, Location ref_locus)"}, {"sha": "5bb7b8daeb91770da8cd9425e36226ee31ac4ab1", "filename": "gcc/rust/backend/rust-compile-stmt.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fbackend%2Frust-compile-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fbackend%2Frust-compile-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.cc?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -36,13 +36,7 @@ CompileStmt::Compile (HIR::Stmt *stmt, Context *ctx)\n }\n \n void\n-CompileStmt::visit (HIR::ExprStmtWithBlock &stmt)\n-{\n-  translated = CompileExpr::Compile (stmt.get_expr (), ctx);\n-}\n-\n-void\n-CompileStmt::visit (HIR::ExprStmtWithoutBlock &stmt)\n+CompileStmt::visit (HIR::ExprStmt &stmt)\n {\n   translated = CompileExpr::Compile (stmt.get_expr (), ctx);\n }"}, {"sha": "498211d9ab744f05ff2837e786668f0d64f4135e", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -29,8 +29,7 @@ class CompileStmt : private HIRCompileBase, protected HIR::HIRStmtVisitor\n public:\n   static tree Compile (HIR::Stmt *stmt, Context *ctx);\n \n-  void visit (HIR::ExprStmtWithBlock &stmt) override;\n-  void visit (HIR::ExprStmtWithoutBlock &stmt) override;\n+  void visit (HIR::ExprStmt &stmt) override;\n   void visit (HIR::LetStmt &stmt) override;\n \n   // Empty visit for unused Stmt HIR nodes."}, {"sha": "60bfc222d797a312314de730781a8ae2795d8688", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -717,13 +717,7 @@ PrivacyReporter::visit (HIR::LetStmt &stmt)\n }\n \n void\n-PrivacyReporter::visit (HIR::ExprStmtWithoutBlock &stmt)\n-{\n-  stmt.get_expr ()->accept_vis (*this);\n-}\n-\n-void\n-PrivacyReporter::visit (HIR::ExprStmtWithBlock &stmt)\n+PrivacyReporter::visit (HIR::ExprStmt &stmt)\n {\n   stmt.get_expr ()->accept_vis (*this);\n }"}, {"sha": "26b8354a0c42ed48c9182a8d290b2403d02945de", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -151,8 +151,7 @@ types\n   virtual void visit (HIR::ExternBlock &block);\n   virtual void visit (HIR::EmptyStmt &stmt);\n   virtual void visit (HIR::LetStmt &stmt);\n-  virtual void visit (HIR::ExprStmtWithoutBlock &stmt);\n-  virtual void visit (HIR::ExprStmtWithBlock &stmt);\n+  virtual void visit (HIR::ExprStmt &stmt);\n \n   Analysis::Mappings &mappings;\n   Rust::Resolver::Resolver &resolver;"}, {"sha": "f368b2208b702daf764d3d8c5bd310137e244815", "filename": "gcc/rust/checks/errors/rust-const-checker.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -821,13 +821,7 @@ ConstChecker::visit (LetStmt &stmt)\n }\n \n void\n-ConstChecker::visit (ExprStmtWithoutBlock &stmt)\n-{\n-  stmt.get_expr ()->accept_vis (*this);\n-}\n-\n-void\n-ConstChecker::visit (ExprStmtWithBlock &stmt)\n+ConstChecker::visit (ExprStmt &stmt)\n {\n   stmt.get_expr ()->accept_vis (*this);\n }"}, {"sha": "bdc7f66ff0e25166bfa8e78b791688df6700932a", "filename": "gcc/rust/checks/errors/rust-const-checker.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -186,8 +186,7 @@ class ConstChecker : public HIRFullVisitor\n   virtual void visit (AltPattern &pattern) override;\n   virtual void visit (EmptyStmt &stmt) override;\n   virtual void visit (LetStmt &stmt) override;\n-  virtual void visit (ExprStmtWithoutBlock &stmt) override;\n-  virtual void visit (ExprStmtWithBlock &stmt) override;\n+  virtual void visit (ExprStmt &stmt) override;\n   virtual void visit (TraitBound &bound) override;\n   virtual void visit (ImplTraitType &type) override;\n   virtual void visit (TraitObjectType &type) override;"}, {"sha": "a0157e36afb5730cafd2adeda374775dfc03e4ee", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -888,13 +888,7 @@ UnsafeChecker::visit (LetStmt &stmt)\n }\n \n void\n-UnsafeChecker::visit (ExprStmtWithoutBlock &stmt)\n-{\n-  stmt.get_expr ()->accept_vis (*this);\n-}\n-\n-void\n-UnsafeChecker::visit (ExprStmtWithBlock &stmt)\n+UnsafeChecker::visit (ExprStmt &stmt)\n {\n   stmt.get_expr ()->accept_vis (*this);\n }"}, {"sha": "6fb50a49fbcafbb95363e3d820a1d9304a38075b", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -168,8 +168,7 @@ class UnsafeChecker : public HIRFullVisitor\n   virtual void visit (AltPattern &pattern) override;\n   virtual void visit (EmptyStmt &stmt) override;\n   virtual void visit (LetStmt &stmt) override;\n-  virtual void visit (ExprStmtWithoutBlock &stmt) override;\n-  virtual void visit (ExprStmtWithBlock &stmt) override;\n+  virtual void visit (ExprStmt &stmt) override;\n   virtual void visit (TraitBound &bound) override;\n   virtual void visit (ImplTraitType &type) override;\n   virtual void visit (TraitObjectType &type) override;"}, {"sha": "cf8f423d649e3bda1459c32edadff73b88f637cb", "filename": "gcc/rust/checks/lints/rust-lint-marklive.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.h?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -156,12 +156,7 @@ class MarkLive : public MarkLiveBase\n     expr.get_iterator_expr ()->accept_vis (*this);\n   }\n \n-  void visit (HIR::ExprStmtWithoutBlock &stmt) override\n-  {\n-    stmt.get_expr ()->accept_vis (*this);\n-  }\n-\n-  void visit (HIR::ExprStmtWithBlock &stmt) override\n+  void visit (HIR::ExprStmt &stmt) override\n   {\n     stmt.get_expr ()->accept_vis (*this);\n   }"}, {"sha": "4b0d61364731bdec09086dc9811491c892173596", "filename": "gcc/rust/hir/rust-hir-dump.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.cc?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -649,14 +649,11 @@ Dump::visit (LetStmt &let_stmt)\n   indentation.decrement ();\n }\n void\n-Dump::visit (ExprStmtWithoutBlock &expr_stmt)\n+Dump::visit (ExprStmt &expr_stmt)\n {\n   auto expr = expr_stmt.get_expr ();\n   expr->accept_vis (*this);\n }\n-void\n-Dump::visit (ExprStmtWithBlock &)\n-{}\n \n void\n Dump::visit (TraitBound &)"}, {"sha": "5cb10fb3a0e97f63d53ef1e0e26e0b087636cbd3", "filename": "gcc/rust/hir/rust-hir-dump.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.h?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -165,8 +165,7 @@ class Dump : public HIRFullVisitor\n \n   virtual void visit (EmptyStmt &) override;\n   virtual void visit (LetStmt &) override;\n-  virtual void visit (ExprStmtWithoutBlock &) override;\n-  virtual void visit (ExprStmtWithBlock &) override;\n+  virtual void visit (ExprStmt &) override;\n \n   virtual void visit (TraitBound &) override;\n   virtual void visit (ImplTraitType &) override;"}, {"sha": "d5d76e0716cd03d320b5d903361fd6accde1082b", "filename": "gcc/rust/hir/tree/rust-hir-stmt.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -166,6 +166,9 @@ class ExprStmt : public Stmt\n \n   Location get_locus () const override final { return locus; }\n \n+  void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRStmtVisitor &vis) override;\n+\n   bool is_item () const override final { return false; }\n \n   Expr *get_expr () { return expr.get (); }\n@@ -206,9 +209,6 @@ class ExprStmtWithoutBlock : public ExprStmt\n     : ExprStmt (std::move (mappings), std::move (expr), locus)\n   {}\n \n-  void accept_vis (HIRFullVisitor &vis) override;\n-  void accept_vis (HIRStmtVisitor &vis) override;\n-\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -231,9 +231,6 @@ class ExprStmtWithBlock : public ExprStmt\n       must_be_unit (must_be_unit)\n   {}\n \n-  void accept_vis (HIRFullVisitor &vis) override;\n-  void accept_vis (HIRStmtVisitor &vis) override;\n-\n   bool is_unit_check_needed () const override { return must_be_unit; }\n \n protected:"}, {"sha": "c7e1aad7790c6b7dd4112b1f92da3cb3dd9f3d74", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -138,8 +138,7 @@ class HIRFullVisitor\n   virtual void visit (AltPattern &pattern) = 0;\n   virtual void visit (EmptyStmt &stmt) = 0;\n   virtual void visit (LetStmt &stmt) = 0;\n-  virtual void visit (ExprStmtWithoutBlock &stmt) = 0;\n-  virtual void visit (ExprStmtWithBlock &stmt) = 0;\n+  virtual void visit (ExprStmt &stmt) = 0;\n   virtual void visit (TraitBound &bound) = 0;\n   virtual void visit (ImplTraitType &type) = 0;\n   virtual void visit (TraitObjectType &type) = 0;\n@@ -287,8 +286,7 @@ class HIRFullVisitorBase : public HIRFullVisitor\n \n   virtual void visit (EmptyStmt &) override {}\n   virtual void visit (LetStmt &) override {}\n-  virtual void visit (ExprStmtWithoutBlock &) override {}\n-  virtual void visit (ExprStmtWithBlock &) override {}\n+  virtual void visit (ExprStmt &) override {}\n \n   virtual void visit (TraitBound &) override {}\n   virtual void visit (ImplTraitType &) override {}\n@@ -394,8 +392,7 @@ class HIRStmtVisitor\n   virtual void visit (ExternBlock &block) = 0;\n   virtual void visit (EmptyStmt &stmt) = 0;\n   virtual void visit (LetStmt &stmt) = 0;\n-  virtual void visit (ExprStmtWithoutBlock &stmt) = 0;\n-  virtual void visit (ExprStmtWithBlock &stmt) = 0;\n+  virtual void visit (ExprStmt &stmt) = 0;\n };\n \n class HIRExpressionVisitor"}, {"sha": "03e7e263122b80652f5430f90aded4bff39cb616", "filename": "gcc/rust/hir/tree/rust-hir.cc", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -4426,13 +4426,7 @@ LetStmt::accept_vis (HIRFullVisitor &vis)\n }\n \n void\n-ExprStmtWithoutBlock::accept_vis (HIRFullVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-ExprStmtWithBlock::accept_vis (HIRFullVisitor &vis)\n+ExprStmt::accept_vis (HIRFullVisitor &vis)\n {\n   vis.visit (*this);\n }\n@@ -4774,7 +4768,7 @@ QualifiedPathInType::accept_vis (HIRTypeVisitor &vis)\n }\n \n void\n-ExprStmtWithoutBlock::accept_vis (HIRStmtVisitor &vis)\n+ExprStmt::accept_vis (HIRStmtVisitor &vis)\n {\n   vis.visit (*this);\n }\n@@ -4953,12 +4947,6 @@ QualifiedPathInExpression::accept_vis (HIRPatternVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-ExprStmtWithBlock::accept_vis (HIRStmtVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n PathInExpression::accept_vis (HIRPatternVisitor &vis)\n {"}, {"sha": "18df2e5a94dce003811c5a8509401346f37fc3dd", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.cc", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.cc?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -36,13 +36,7 @@ TypeCheckStmt::Resolve (HIR::Stmt *stmt)\n }\n \n void\n-TypeCheckStmt::visit (HIR::ExprStmtWithBlock &stmt)\n-{\n-  infered = TypeCheckExpr::Resolve (stmt.get_expr ());\n-}\n-\n-void\n-TypeCheckStmt::visit (HIR::ExprStmtWithoutBlock &stmt)\n+TypeCheckStmt::visit (HIR::ExprStmt &stmt)\n {\n   infered = TypeCheckExpr::Resolve (stmt.get_expr ());\n }"}, {"sha": "9e4ca082e80b005f2fba60feefb6cbc51131b8bf", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -29,8 +29,7 @@ class TypeCheckStmt : private TypeCheckBase, private HIR::HIRStmtVisitor\n public:\n   static TyTy::BaseType *Resolve (HIR::Stmt *stmt);\n \n-  void visit (HIR::ExprStmtWithBlock &stmt) override;\n-  void visit (HIR::ExprStmtWithoutBlock &stmt) override;\n+  void visit (HIR::ExprStmt &stmt) override;\n   void visit (HIR::EmptyStmt &stmt) override;\n   void visit (HIR::ExternBlock &extern_block) override;\n   void visit (HIR::ConstantItem &constant) override;"}, {"sha": "f6f239f0c72152ce6e87493800c22ccef554834d", "filename": "gcc/rust/typecheck/rust-tycheck-dump.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/862ec75eaf907fdaf5eac5b467ebafb7f5bf2795/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h?ref=862ec75eaf907fdaf5eac5b467ebafb7f5bf2795", "patch": "@@ -136,12 +136,7 @@ class TypeResolverDump : private TypeCheckBase, private HIR::HIRFullVisitorBase\n       }\n   }\n \n-  void visit (HIR::ExprStmtWithBlock &stmt) override\n-  {\n-    stmt.get_expr ()->accept_vis (*this);\n-  }\n-\n-  void visit (HIR::ExprStmtWithoutBlock &stmt) override\n+  void visit (HIR::ExprStmt &stmt) override\n   {\n     stmt.get_expr ()->accept_vis (*this);\n   }"}]}