{"sha": "437b3c097dbc0157e978e2e31c672542cf72d564", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM3YjNjMDk3ZGJjMDE1N2U5NzhlMmUzMWM2NzI1NDJjZjcyZDU2NA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-26T22:16:16Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-07-26T22:16:16Z"}, "message": "(simplify_shift_const): Inhibit hacks based on\nnum_sign_bit_copies if shift_mode differs from the mode of varop.\n\nFrom-SVN: r4994", "tree": {"sha": "5480a9655d364207cc743b920dacbd0dc0dd72de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5480a9655d364207cc743b920dacbd0dc0dd72de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/437b3c097dbc0157e978e2e31c672542cf72d564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437b3c097dbc0157e978e2e31c672542cf72d564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/437b3c097dbc0157e978e2e31c672542cf72d564", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437b3c097dbc0157e978e2e31c672542cf72d564/comments", "author": null, "committer": null, "parents": [{"sha": "fa1a4543fddd8de5f327b774e9cb71e62d66ee1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa1a4543fddd8de5f327b774e9cb71e62d66ee1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa1a4543fddd8de5f327b774e9cb71e62d66ee1d"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "b821af258696a2258a33eb64c1876698d8ce9d12", "filename": "gcc/combine.c", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/437b3c097dbc0157e978e2e31c672542cf72d564/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/437b3c097dbc0157e978e2e31c672542cf72d564/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=437b3c097dbc0157e978e2e31c672542cf72d564", "patch": "@@ -7122,25 +7122,31 @@ simplify_shift_const (x, code, result_mode, varop, count)\n       else if (count < 0)\n \tabort ();\n \n-      /* An arithmetic right shift of a quantity known to be -1 or 0\n-\t is a no-op.  */\n-      if (code == ASHIFTRT\n-\t  && (num_sign_bit_copies (varop, shift_mode)\n-\t      == GET_MODE_BITSIZE (shift_mode)))\n-\t{\n-\t  count = 0;\n-\t  break;\n-\t}\n+      /* If we have replaced VAROP with something wider\n+\t (such as, the SUBREG_REG), then this won't work;\n+\t num_sign_bit_copies will give the wrong answer in that case.  */\n+      if (shift_mode == GET_MODE (varop))\n+\t{\n+\t  /* An arithmetic right shift of a quantity known to be -1 or 0\n+\t     is a no-op.  */\n+\t  if (code == ASHIFTRT\n+\t      && (num_sign_bit_copies (varop, shift_mode)\n+\t\t  == GET_MODE_BITSIZE (shift_mode)))\n+\t    {\n+\t      count = 0;\n+\t      break;\n+\t    }\n \n-      /* If we are doing an arithmetic right shift and discarding all but\n-\t the sign bit copies, this is equivalent to doing a shift by the\n-\t bitsize minus one.  Convert it into that shift because it will often\n-\t allow other simplifications.  */\n+\t  /* If we are doing an arithmetic right shift and discarding all but\n+\t     the sign bit copies, this is equivalent to doing a shift by the\n+\t     bitsize minus one.  Convert it into that shift because it will often\n+\t     allow other simplifications.  */\n \n-      if (code == ASHIFTRT\n-\t  && (count + num_sign_bit_copies (varop, shift_mode)\n-\t      >= GET_MODE_BITSIZE (shift_mode)))\n-\tcount = GET_MODE_BITSIZE (shift_mode) - 1;\n+\t  if (code == ASHIFTRT\n+\t      && (count + num_sign_bit_copies (varop, shift_mode)\n+\t\t  >= GET_MODE_BITSIZE (shift_mode)))\n+\t    count = GET_MODE_BITSIZE (shift_mode) - 1;\n+\t}\n \n       /* We simplify the tests below and elsewhere by converting\n \t ASHIFTRT to LSHIFTRT if we know the sign bit is clear."}]}