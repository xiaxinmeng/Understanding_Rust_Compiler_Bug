{"sha": "62defc56c50c8abf92821432536314e4948b6d3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJkZWZjNTZjNTBjOGFiZjkyODIxNDMyNTM2MzE0ZTQ5NDhiNmQzYQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-12-07T17:05:19Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-12-07T17:05:19Z"}, "message": "PR c++/54401 - Confusing diagnostics about type-alias at class scope\n\nConsider this invalid example given in the PR, where T is not defined:\n\n     1\ttemplate<typename>\n     2\tstruct X {\n     3\t    using type = T;\n     4\t};\n\ng++ yields the confusing diagnostics:\n\ntest.cc:3:10: error: expected nested-name-specifier before 'type'\n    using type = T;\n          ^\ntest.cc:3:10: error: using-declaration for non-member at class scope\ntest.cc:3:15: error: expected ';' before '=' token\n    using type = T;\n               ^\ntest.cc:3:15: error: expected unqualified-id before '=' token\n\nI think this is because in cp_parser_member_declaration we tentatively\nparse an alias declaration; we then have a somewhat meaningful\ndiagnostic which alas is not emitted because we are parsing\ntentatively.  As the parsing didn't succeed (because the input is\ninvalid) we try to parse a using declaration, which fails as well; but\nthen the diagnostic emitted is the one for the failed attempt at\nparsing a using declaration, not an alias declaration.  Oops.\n\nThe idea of this patch is to commit the tentative parse when we see\nthe '=' token in the alias-declaration.  That way any error encounter\nafter that token is reported to the user.\n\nWe are now getting the following output:\n\n    test.cc:3:18: erreur: expected type-specifier before \u2018T\u2019\n\t using type = T;\n\t\t      ^\n    test.cc:3:18: erreur: \u2018T\u2019 does not name a type\n\nI don't really like the \"before 'T'\" there, but I think we maybe could\nrevisit the format of what cp_parser_error emits in general, now that\nwe have caret diagnostics;  We could maybe do away with the \"before T\"\naltogether?\n\nIn the mean time, it seems to me that this patch brings an improvement\nover what we already have in trunk, and the issue above could be\naddressed separately.\n\nTested on x86_64-unknown-linux-gnu against trunk.\n\ngcc/cp/\n\n\t* parser.c (cp_parser_alias_declaration): Commit to tentative\n\tparse when see the '=' token.  Get out if the type-id is invalid.\n\tUpdate function comment.\n\t(cp_parser_member_declaration): Don't try to parse a using\n\tdeclaration if we know that we expected an alias declaration; that\n\tis, if we see the '=' token after the identifier.\n\ngcc/testsuite/\n\n\t* g++.dg/cpp0x/alias-decl-28.C: New test.\n\t* g++.dg/cpp0x/alias-decl-16.C: Update.\n\nFrom-SVN: r194306", "tree": {"sha": "af6cdc4cf6c72a86564a7cf29400fa2d1fcac8da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af6cdc4cf6c72a86564a7cf29400fa2d1fcac8da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62defc56c50c8abf92821432536314e4948b6d3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62defc56c50c8abf92821432536314e4948b6d3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62defc56c50c8abf92821432536314e4948b6d3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62defc56c50c8abf92821432536314e4948b6d3a/comments", "author": null, "committer": null, "parents": [{"sha": "0588ac84f7e1696ab4977213dec5daaf73cd478c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0588ac84f7e1696ab4977213dec5daaf73cd478c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0588ac84f7e1696ab4977213dec5daaf73cd478c"}], "stats": {"total": 50, "additions": 47, "deletions": 3}, "files": [{"sha": "81c20488a37dd6b237af869aef1fb9c0a53758e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62defc56c50c8abf92821432536314e4948b6d3a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62defc56c50c8abf92821432536314e4948b6d3a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=62defc56c50c8abf92821432536314e4948b6d3a", "patch": "@@ -1,3 +1,13 @@\n+2012-12-07  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/54401\n+\t* parser.c (cp_parser_alias_declaration): Commit to tentative\n+\tparse when see the '=' token.  Get out if the type-id is invalid.\n+\tUpdate function comment.\n+\t(cp_parser_member_declaration): Don't try to parse a using\n+\tdeclaration if we know that we expected an alias declaration; that\n+\tis, if we see the '=' token after the identifier.\n+\n 2012-12-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/54325"}, {"sha": "3dc2ec6316a0d7b439d36c0a5d7034bdac70ef08", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62defc56c50c8abf92821432536314e4948b6d3a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62defc56c50c8abf92821432536314e4948b6d3a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=62defc56c50c8abf92821432536314e4948b6d3a", "patch": "@@ -15295,6 +15295,8 @@ cp_parser_alias_declaration (cp_parser* parser)\n   if (cp_parser_error_occurred (parser))\n     return error_mark_node;\n \n+  cp_parser_commit_to_tentative_parse (parser);\n+\n   /* Now we are going to parse the type-id of the declaration.  */\n \n   /*\n@@ -15324,10 +15326,19 @@ cp_parser_alias_declaration (cp_parser* parser)\n   if (parser->num_template_parameter_lists)\n     parser->type_definition_forbidden_message = saved_message;\n \n+  if (type == error_mark_node)\n+    {\n+      cp_parser_skip_to_end_of_block_or_statement (parser);\n+      return error_mark_node;\n+    }\n+\n   cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);\n \n   if (cp_parser_error_occurred (parser))\n-    return error_mark_node;\n+    {\n+      cp_parser_skip_to_end_of_block_or_statement (parser);\n+      return error_mark_node;\n+    }\n \n   /* A typedef-name can also be introduced by an alias-declaration. The\n      identifier following the using keyword becomes a typedef-name. It has\n@@ -19063,9 +19074,19 @@ cp_parser_member_declaration (cp_parser* parser)\n       else\n \t{\n \t  tree decl;\n+\t  bool alias_decl_expected;\n \t  cp_parser_parse_tentatively (parser);\n \t  decl = cp_parser_alias_declaration (parser);\n-\t  if (cp_parser_parse_definitely (parser))\n+\t  /* Note that if we actually see the '=' token after the\n+\t     identifier, cp_parser_alias_declaration commits the\n+\t     tentative parse.  In that case, we really expects an\n+\t     alias-declaration.  Otherwise, we expect a using\n+\t     declaration.  */\n+\t  alias_decl_expected =\n+\t    !cp_parser_uncommitted_to_tentative_parse_p (parser);\n+\t  cp_parser_parse_definitely (parser);\n+\n+\t  if (alias_decl_expected)\n \t    finish_member_declaration (decl);\n \t  else\n \t    cp_parser_using_declaration (parser,"}, {"sha": "1fd69fab38a69dcd866dc45e73ab0e6234841923", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62defc56c50c8abf92821432536314e4948b6d3a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62defc56c50c8abf92821432536314e4948b6d3a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=62defc56c50c8abf92821432536314e4948b6d3a", "patch": "@@ -1,3 +1,9 @@\n+2012-12-07  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/54401\n+\t* g++.dg/cpp0x/alias-decl-28.C: New test.\n+\t* g++.dg/cpp0x/alias-decl-16.C: Update.\n+\n 2012-12-07  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/55590"}, {"sha": "ce6ad0a62168b5b33f33324655389b36fa93d92f", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62defc56c50c8abf92821432536314e4948b6d3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62defc56c50c8abf92821432536314e4948b6d3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-16.C?ref=62defc56c50c8abf92821432536314e4948b6d3a", "patch": "@@ -23,6 +23,6 @@ template<class T>\n using A3 =\n     enum B3 {b = 0;}; //{ dg-error \"types may not be defined in alias template\" }\n \n-A3<int> a3;\n+A3<int> a3; // { dg-error \"'A3' does not name a type\" }\n \n int main() { }"}, {"sha": "086b5e54f807926d6461ac512b8010d916c1cffb", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-28.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62defc56c50c8abf92821432536314e4948b6d3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62defc56c50c8abf92821432536314e4948b6d3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-28.C?ref=62defc56c50c8abf92821432536314e4948b6d3a", "patch": "@@ -0,0 +1,7 @@\n+// Origin: PR c++/54401\n+// { dg-do compile { target c++11 } }\n+\n+template<typename>\n+struct X {\n+    using type = T; // { dg-error \"expected type-specifier|does not name a type\" }\n+};"}]}