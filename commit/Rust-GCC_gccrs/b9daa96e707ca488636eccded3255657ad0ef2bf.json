{"sha": "b9daa96e707ca488636eccded3255657ad0ef2bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlkYWE5NmU3MDdjYTQ4ODYzNmVjY2RlZDMyNTU2NTdhZDBlZjJiZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T10:50:26Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T10:50:26Z"}, "message": "[multiple changes]\n\n2012-12-05  Robert Dewar  <dewar@adacore.com>\n\n\t* gnatchop.adb, sem_attr.ads, sem_ch4.adb, sem_ch6.adb, exp_disp.adb,\n\tatree.adb, sem_eval.adb: Minor reformatting.\n\n2012-12-05  Yannick Moy  <moy@adacore.com>\n\n\t* uintp.adb (UI_Div_Rem): Correct algorithm D to remove potential\n\toverflow.\n\n2012-12-05  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Op_Mod): Minor comment additions.\n\t(Expand_N_Op_Rem): Ditto.\n\n2012-12-05  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb: Minor reformatting.\n\n2012-12-05  Robert Dewar  <dewar@adacore.com>\n\n\t* usage.adb: Update lines for -gnato? switch.\n\nFrom-SVN: r194202", "tree": {"sha": "c5c209c40ca9749ed464e50350da081265ed2a3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5c209c40ca9749ed464e50350da081265ed2a3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9daa96e707ca488636eccded3255657ad0ef2bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9daa96e707ca488636eccded3255657ad0ef2bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9daa96e707ca488636eccded3255657ad0ef2bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9daa96e707ca488636eccded3255657ad0ef2bf/comments", "author": null, "committer": null, "parents": [{"sha": "de6cad7c5c435279a851b6546d7cb6cd3001d96c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6cad7c5c435279a851b6546d7cb6cd3001d96c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de6cad7c5c435279a851b6546d7cb6cd3001d96c"}], "stats": {"total": 136, "additions": 90, "deletions": 46}, "files": [{"sha": "1fb42a70c71da5a1742c0bfbf749f6abee557aba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b9daa96e707ca488636eccded3255657ad0ef2bf", "patch": "@@ -1,3 +1,26 @@\n+2012-12-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnatchop.adb, sem_attr.ads, sem_ch4.adb, sem_ch6.adb, exp_disp.adb,\n+\tatree.adb, sem_eval.adb: Minor reformatting.\n+\n+2012-12-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* uintp.adb (UI_Div_Rem): Correct algorithm D to remove potential\n+\toverflow.\n+\n+2012-12-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Op_Mod): Minor comment additions.\n+\t(Expand_N_Op_Rem): Ditto.\n+\n+2012-12-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_attr.adb: Minor reformatting.\n+\n+2012-12-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* usage.adb: Update lines for -gnato? switch.\n+\n 2012-12-05  Ed Schonberg  <schonberg@adacore.com>\n \n \t* par-ch6.adb (P_Return_Object_Declaration): Do not check for"}, {"sha": "d51e85d300cbded8ff417477f3e1e4b60287fa19", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=b9daa96e707ca488636eccded3255657ad0ef2bf", "patch": "@@ -1931,6 +1931,7 @@ package body Atree is\n             if Is_Syntactic_Field (Nkind (Nod), FN) then\n                declare\n                   Elmt : Node_Id := First (List_Id (Fld));\n+\n                begin\n                   while Present (Elmt) loop\n                      if Traverse_Func (Elmt) = Abandon then"}, {"sha": "b3701bcdfcb32648f2a4a7a13a7471c294dd5955", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=b9daa96e707ca488636eccded3255657ad0ef2bf", "patch": "@@ -8001,8 +8001,15 @@ package body Exp_Ch4 is\n          end if;\n \n          --  Deal with annoying case of largest negative number remainder\n-         --  minus one. Gigi does not handle this case correctly, because\n-         --  it generates a divide instruction which may trap in this case.\n+         --  minus one. Gigi may not handle this case correctly, because\n+         --  on some targets, the mod value is computed using a divide\n+         --  instruction which gives an overflow trap for this case.\n+\n+         --  It would be a bit more efficient to figure out which targets\n+         --  this is really needed for, but in practice it is reasonable\n+         --  to do the following special check in all cases, since it means\n+         --  we get a clearer message, and also the overhead is minimal given\n+         --  that division is expensive in any case.\n \n          --  In fact the check is quite easy, if the right operand is -1, then\n          --  the mod value is always 0, and we can just ignore the left operand\n@@ -8674,8 +8681,15 @@ package body Exp_Ch4 is\n       end if;\n \n       --  Deal with annoying case of largest negative number remainder minus\n-      --  one. Gigi does not handle this case correctly, because it generates\n-      --  a divide instruction which may trap in this case.\n+      --  one. Gigi may not handle this case correctly, because on some\n+      --  targets, the mod value is computed using a divide instruction\n+      --  which gives an overflow trap for this case.\n+\n+      --  It would be a bit more efficient to figure out which targets this\n+      --  is really needed for, but in practice it is reasonable to do the\n+      --  following special check in all cases, since it means we get a clearer\n+      --  message, and also the overhead is minimal given that division is\n+      --  expensive in any case.\n \n       --  In fact the check is quite easy, if the right operand is -1, then\n       --  the remainder is always 0, and we can just ignore the left operand"}, {"sha": "23235d8db51a68feffb658fdebf13c884590fced", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=b9daa96e707ca488636eccded3255657ad0ef2bf", "patch": "@@ -1635,15 +1635,15 @@ package body Exp_Disp is\n       Formals : constant List_Id    := New_List;\n       Target  : constant Entity_Id  := Ultimate_Alias (Prim);\n \n-      Decl_1          : Node_Id;\n-      Decl_2          : Node_Id;\n-      Expr            : Node_Id;\n-      Formal          : Node_Id;\n-      Ftyp            : Entity_Id;\n-      Iface_Formal    : Node_Id;\n-      New_Arg         : Node_Id;\n-      Offset_To_Top   : Node_Id;\n-      Target_Formal   : Entity_Id;\n+      Decl_1        : Node_Id;\n+      Decl_2        : Node_Id;\n+      Expr          : Node_Id;\n+      Formal        : Node_Id;\n+      Ftyp          : Entity_Id;\n+      Iface_Formal  : Node_Id;\n+      New_Arg       : Node_Id;\n+      Offset_To_Top : Node_Id;\n+      Target_Formal : Entity_Id;\n \n    begin\n       Thunk_Id   := Empty;"}, {"sha": "82b944b78c572c23a5d730c9f75da05996620c27", "filename": "gcc/ada/gnatchop.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fgnatchop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fgnatchop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatchop.adb?ref=b9daa96e707ca488636eccded3255657ad0ef2bf", "patch": "@@ -1021,6 +1021,10 @@ procedure Gnatchop is\n \n       Buffer (Read_Ptr) := EOF;\n \n+      --  Comment needed for the following ???\n+      --  Under what circumstances can the test fail ???\n+      --  What is copy doing in that case???\n+\n       if Read_Ptr = Length then\n          Contents := Buffer;\n "}, {"sha": "b68b5937c38dcb3d6bef9ec866acee82687fcf4a", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=b9daa96e707ca488636eccded3255657ad0ef2bf", "patch": "@@ -5998,8 +5998,7 @@ package body Sem_Attr is\n          return\n            Is_Floating_Point_Type (Typ)\n              and then\n-               (Float_Format = 'V'\n-                  or else Float_Rep (Typ) = VAX_Native);\n+               (Float_Format = 'V' or else Float_Rep (Typ) = VAX_Native);\n       end Is_VAX_Float;\n \n       --------------"}, {"sha": "7583ab434f4f1faaddb5e179833d5b685b126469", "filename": "gcc/ada/sem_attr.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fsem_attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fsem_attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.ads?ref=b9daa96e707ca488636eccded3255657ad0ef2bf", "patch": "@@ -313,7 +313,7 @@ package Sem_Attr is\n       --  needed, and the value should never be accessed.\n \n       Attribute_Loop_Entry => True,\n-      --  For every object of a non-limited type, S'Loop_Entry { (Loop_Name) }\n+      --  For every object of a non-limited type, S'Loop_Entry [(Loop_Name)]\n       --  denotes the constant value of prefix S at the point of entry into the\n       --  related loop. The type of the attribute is the type of the prefix.\n "}, {"sha": "55051417c89992d990048122edc07d66ac8ebd5d", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=b9daa96e707ca488636eccded3255657ad0ef2bf", "patch": "@@ -5506,6 +5506,12 @@ package body Sem_Ch4 is\n    begin\n       if T1 = Universal_Integer\n         or else T1 = Universal_Real\n+\n+        --  If the left operand of an equality operator is null, the visibility\n+        --  of the operator must be determined from the interpretation of the\n+        --  right operand. This processing must be done for Any_Access, which\n+        --  is the internal representation of the type of the literal null.\n+\n         or else T1 = Any_Access\n       then\n          if not Is_Overloaded (R) then"}, {"sha": "2903e896e5ebebe263340b44e837e9e2c8bccdc2", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=b9daa96e707ca488636eccded3255657ad0ef2bf", "patch": "@@ -787,7 +787,6 @@ package body Sem_Ch6 is\n \n             Analyze_And_Resolve (Expr, R_Type);\n             Check_Limited_Return (Expr);\n-\n          end if;\n \n          --  RETURN only allowed in SPARK as the last statement in function\n@@ -808,10 +807,9 @@ package body Sem_Ch6 is\n \n          declare\n             Obj_Decl    : constant Node_Id :=\n-                         Last (Return_Object_Declarations (N));\n+                            Last (Return_Object_Declarations (N));\n             Has_Aliased : constant Boolean := Aliased_Present (Obj_Decl);\n-\n-            HSS : constant Node_Id := Handled_Statement_Sequence (N);\n+            HSS         : constant Node_Id := Handled_Statement_Sequence (N);\n \n          begin\n             Expr := Expression (Obj_Decl);"}, {"sha": "a4bb76e309b9620f35479f0ed9901ff9acb07713", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=b9daa96e707ca488636eccded3255657ad0ef2bf", "patch": "@@ -1314,13 +1314,14 @@ package body Sem_Eval is\n       --  is at optimizing and knowing that things are constant when they are\n       --  nonstatic.\n \n-      --  We make an exception for expressions that evaluate to True/False, to\n-      --  suppress spurious checks in ZFP mode.\n-\n       if Configurable_Run_Time_Mode\n         and then K /= N_Null\n         and then not Is_Static_Expression (Op)\n       then\n+         --  We make an exception for expressions that evaluate to True/False,\n+         --  to suppress spurious checks in ZFP mode. So far we have not seen\n+         --  any negative consequences of this exception.\n+\n          if Is_Entity_Name (Op)\n            and then Ekind (Entity (Op)) = E_Enumeration_Literal\n            and then Etype (Entity (Op)) = Standard_Boolean"}, {"sha": "bc014666224fba9c5caf93c3279a50aec14c7926", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=b9daa96e707ca488636eccded3255657ad0ef2bf", "patch": "@@ -1165,6 +1165,7 @@ package body Uintp is\n             Divisor_Dig1 : Int;\n             Divisor_Dig2 : Int;\n             Q_Guess      : Int;\n+            R_Guess      : Int;\n \n          begin\n             --  [ NORMALIZE ] (step D1 in the algorithm). First calculate the\n@@ -1218,30 +1219,26 @@ package body Uintp is\n \n                --  Note: this version of step D3 is from the original published\n                --  algorithm, which is known to have a bug causing overflows.\n-               --  See: http://www-cs-faculty.stanford.edu/~uno/err2-2e.ps.gz.\n-               --  In this code we are safe since our representation of double\n-               --  length numbers allows an expanded range.\n-\n-               --  We don't have a proof of this claim, but the only cases we\n-               --  have found that show the bug in step D3 work fine here.\n+               --  See: http://www-cs-faculty.stanford.edu/~uno/err2-2e.ps.gz\n+               --  and http://www-cs-faculty.stanford.edu/~uno/all2-pre.ps.gz.\n+               --  The code below is the fixed version of this step.\n \n                Tmp_Int := Dividend (J) * Base + Dividend (J + 1);\n \n                --  Initial guess\n \n-               if Dividend (J) = Divisor_Dig1 then\n-                  Q_Guess := Base - 1;\n-               else\n-                  Q_Guess := Tmp_Int / Divisor_Dig1;\n-               end if;\n+               Q_Guess := Tmp_Int / Divisor_Dig1;\n+               R_Guess := Tmp_Int rem Divisor_Dig1;\n \n                --  Refine the guess\n \n-               while Divisor_Dig2 * Q_Guess >\n-                     (Tmp_Int - Q_Guess * Divisor_Dig1) * Base +\n-                        Dividend (J + 2)\n+               while Q_Guess >= Base\n+                 or else Divisor_Dig2 * Q_Guess >\n+                           R_Guess * Base + Dividend (J + 2)\n                loop\n                   Q_Guess := Q_Guess - 1;\n+                  R_Guess := R_Guess + Divisor_Dig1;\n+                  exit when R_Guess >= Base;\n                end loop;\n \n                --  [ MULTIPLY & SUBTRACT ] (step D4). Q_Guess * Divisor is"}, {"sha": "c492ecfea65ca6869c5106d5c0c02a90361e1c28", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9daa96e707ca488636eccded3255657ad0ef2bf/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=b9daa96e707ca488636eccded3255657ad0ef2bf", "patch": "@@ -321,13 +321,14 @@ begin\n    Write_Switch_Char (\"o\");\n    Write_Line (\"Enable overflow checking mode to CHECKED (off by default)\");\n \n-   --  Line for -gnato? switch\n+   --  Lines for -gnato? switches\n \n    Write_Switch_Char (\"o?\");\n-   Write_Line (\"Set SUPPRESSED/CHECKED/MINIMIZED/ELIMINATED (?=0/1/2/3) mode\");\n-\n+   Write_Line\n+     (\"Enable overflow checks in STRICT/MINIMIZED/ELIMINATED (1/2/3) mode \");\n    Write_Switch_Char (\"o??\");\n-   Write_Line (\"Set mode for general/assertion expressions separately\");\n+   Write_Line\n+     (\"Set mode for general/assertion expressions separately\");\n \n    --  Line for -gnatO switch\n \n@@ -366,22 +367,22 @@ begin\n    Write_Switch_Char (\"R?s\");\n    Write_Line (\"List rep info to file.rep instead of standard output\");\n \n-   --  Lines for -gnats switch\n+   --  Line for -gnats switch\n \n    Write_Switch_Char (\"s\");\n    Write_Line (\"Syntax check only\");\n \n-   --  Lines for -gnatS switch\n+   --  Line for -gnatS switch\n \n    Write_Switch_Char (\"S\");\n    Write_Line (\"Print listing of package Standard\");\n \n-   --  Lines for -gnatt switch\n+   --  Line for -gnatt switch\n \n    Write_Switch_Char (\"t\");\n    Write_Line (\"Tree output file to be generated\");\n \n-   --  Line for -gnatT switch\n+   --  Line for -gnatTnn switch\n \n    Write_Switch_Char (\"Tnn\");\n    Write_Line (\"All compiler tables start at nn times usual starting size\");\n@@ -401,7 +402,7 @@ begin\n    Write_Switch_Char (\"v\");\n    Write_Line (\"Verbose mode. Full error output with source lines to stdout\");\n \n-   --  Line for -gnatV switch\n+   --  Lines for -gnatV switch\n \n    Write_Switch_Char (\"Vxx\");\n    Write_Line"}]}