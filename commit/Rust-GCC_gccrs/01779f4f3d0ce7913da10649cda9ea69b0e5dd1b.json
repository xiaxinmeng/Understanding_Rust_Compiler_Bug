{"sha": "01779f4f3d0ce7913da10649cda9ea69b0e5dd1b", "node_id": "C_kwDOANBUbNoAKDAxNzc5ZjRmM2QwY2U3OTEzZGExMDY0OWNkYTllYTY5YjBlNWRkMWI", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-06-24T12:17:24Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-06-29T16:36:18Z"}, "message": "c++: Rename macro location structs\n\nThe macro location tables should really mention they are about\nlocations.  So rename them.  Also, add a missing free of the remapping\ntable, and remove some now-unneeded macro checking.\n\n\tgcc/cp/\n\t* module.cc (macro_info, macro_traits, macro_table,\n\tmacro_remap): Rename to ...\n\t(macro_loc_info, macro_loc_traits, macro_loc_table,\n\tmacro_loc_remap): ... these.  Update all uses.\n\t(module_state::write_prepare_maps): Remove unneeded macro checking.\n\t(module_state::write_begin): Free macro_loc_remap.", "tree": {"sha": "6760277048c81f66c576529e16d560b5cab7bd49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6760277048c81f66c576529e16d560b5cab7bd49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01779f4f3d0ce7913da10649cda9ea69b0e5dd1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01779f4f3d0ce7913da10649cda9ea69b0e5dd1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01779f4f3d0ce7913da10649cda9ea69b0e5dd1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01779f4f3d0ce7913da10649cda9ea69b0e5dd1b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98c18e040e2c65db93f1498bb421e83165da3738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c18e040e2c65db93f1498bb421e83165da3738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98c18e040e2c65db93f1498bb421e83165da3738"}], "stats": {"total": 73, "additions": 25, "deletions": 48}, "files": [{"sha": "68a7ce53ee475e786c57c7b9d4d44dd18b5f0987", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 25, "deletions": 48, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01779f4f3d0ce7913da10649cda9ea69b0e5dd1b/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01779f4f3d0ce7913da10649cda9ea69b0e5dd1b/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=01779f4f3d0ce7913da10649cda9ea69b0e5dd1b", "patch": "@@ -3241,15 +3241,15 @@ class loc_spans {\n static loc_spans spans;\n \n /* Information about macro locations we stream out.  */\n-struct macro_info\n+struct macro_loc_info\n {\n   const line_map_macro *src;    // original expansion\n   unsigned remap;\t  // serialization\n \n   static int compare (const void *a_, const void *b_)\n   {\n-    auto *a = static_cast<const macro_info *> (a_);\n-    auto *b = static_cast<const macro_info *> (b_);\n+    auto *a = static_cast<const macro_loc_info *> (a_);\n+    auto *b = static_cast<const macro_loc_info *> (b_);\n \n     gcc_checking_assert (MAP_START_LOCATION (a->src)\n \t\t\t != MAP_START_LOCATION (b->src));\n@@ -3259,9 +3259,9 @@ struct macro_info\n       return +1;\n   }\n };\n-struct macro_traits\n+struct macro_loc_traits\n {\n-  typedef macro_info value_type;\n+  typedef macro_loc_info value_type;\n   typedef const line_map_macro *compare_type;\n \n   static const bool empty_zero_p = false;\n@@ -3294,9 +3294,9 @@ struct macro_traits\n   static void remove (value_type &) {}\n };\n /* Table keyed by line_map_macro, used for noting.  */\n-static  hash_table<macro_traits> *macro_table;\n+static  hash_table<macro_loc_traits> *macro_loc_table;\n /* Sorted vector, used for writing.  */\n-static vec<macro_info> *macro_remap;\n+static vec<macro_loc_info> *macro_loc_remap;\n \n /* Indirection to allow bsearching imports by ordinary location.  */\n static vec<module_state *> *ool;\n@@ -15616,7 +15616,7 @@ module_state::imported_from () const\n void\n module_state::note_location (location_t loc)\n {\n-  if (!macro_table)\n+  if (!macro_loc_table)\n     ;\n   else if (loc < RESERVED_LOCATION_COUNT)\n     ;\n@@ -15635,9 +15635,9 @@ module_state::note_location (location_t loc)\n \t{\n \t  const line_map *map = linemap_lookup (line_table, loc);\n \t  const line_map_macro *mac_map = linemap_check_macro (map);\n-\t  hashval_t hv = macro_traits::hash (mac_map);\n-\t  macro_info *slot\n-\t    = macro_table->find_slot_with_hash (mac_map, hv, INSERT);\n+\t  hashval_t hv = macro_loc_traits::hash (mac_map);\n+\t  macro_loc_info *slot\n+\t    = macro_loc_table->find_slot_with_hash (mac_map, hv, INSERT);\n \t  if (!slot->src)\n \t    {\n \t      slot->src = mac_map;\n@@ -15698,11 +15698,11 @@ module_state::write_location (bytes_out &sec, location_t loc)\n     }\n   else if (loc >= LINEMAPS_MACRO_LOWEST_LOCATION (line_table))\n     {\n-      const macro_info *info = nullptr;\n+      const macro_loc_info *info = nullptr;\n       unsigned offset = 0;\n-      if (unsigned hwm = macro_remap->length ())\n+      if (unsigned hwm = macro_loc_remap->length ())\n \t{\n-\t  info = macro_remap->begin ();\n+\t  info = macro_loc_remap->begin ();\n \t  while (hwm != 1)\n \t    {\n \t      unsigned mid = hwm / 2;\n@@ -15909,7 +15909,7 @@ module_state::read_location (bytes_in &sec) const\n void\n module_state::write_init_maps ()\n {\n-  macro_table = new hash_table<macro_traits> (EXPERIMENT (1, 400));\n+  macro_loc_table = new hash_table<macro_loc_traits> (EXPERIMENT (1, 400));\n }\n \n location_map_info\n@@ -15955,30 +15955,6 @@ module_state::write_prepare_maps (module_state_config *cfg)\n \n \t  info.num_maps.first += omap - fmap;\n \t}\n-\n-      if (span.macro.first != span.macro.second)\n-\t{\n-\t  /* Iterate over the span's macros, to elide the empty\n-\t     expansions.  */\n-\t  unsigned count = 0;\n-\t  for (unsigned macro\n-\t\t = linemap_lookup_macro_index (line_table,\n-\t\t\t\t\t       span.macro.second - 1);\n-\t       macro < LINEMAPS_MACRO_USED (line_table);\n-\t       macro++)\n-\t    {\n-\t      line_map_macro const *mmap\n-\t\t= LINEMAPS_MACRO_MAP_AT (line_table, macro);\n-\t      if (MAP_START_LOCATION (mmap) < span.macro.first)\n-\t\t/* Fallen out of the span.  */\n-\t\tbreak;\n-\n-\t      if (mmap->n_tokens)\n-\t\tcount++;\n-\t    }\n-\t  dump (dumper::LOCATION) && dump (\"Span:%u %u macro maps\", ix, count);\n-\t  info.num_maps.second += count;\n-\t}\n     }\n \n   /* Adjust the maps.  Ordinary ones ascend, and we must maintain\n@@ -16024,23 +16000,23 @@ module_state::write_prepare_maps (module_state_config *cfg)\n       ord_off = span.ordinary.second + span.ordinary_delta;\n     }\n \n-  vec_alloc (macro_remap, macro_table->size ());\n-  for (auto iter = macro_table->begin (), end = macro_table->end ();\n+  vec_alloc (macro_loc_remap, macro_loc_table->size ());\n+  for (auto iter = macro_loc_table->begin (), end = macro_loc_table->end ();\n        iter != end; ++iter)\n-    macro_remap->quick_push (*iter);\n-  delete macro_table;\n-  macro_table = nullptr;\n+    macro_loc_remap->quick_push (*iter);\n+  delete macro_loc_table;\n+  macro_loc_table = nullptr;\n \n-  macro_remap->qsort (&macro_info::compare);\n+  macro_loc_remap->qsort (&macro_loc_info::compare);\n   unsigned offset = 0;\n-  for (auto iter = macro_remap->begin (), end = macro_remap->end ();\n+  for (auto iter = macro_loc_remap->begin (), end = macro_loc_remap->end ();\n        iter != end; ++iter)\n     {\n       auto mac = iter->src;\n       iter->remap = offset;\n       offset += mac->n_tokens;\n     }\n-  info.num_maps.second = macro_remap->length ();\n+  info.num_maps.second = macro_loc_remap->length ();\n   cfg->macro_locs = offset;\n \n   dump () && dump (\"Ordinary:%u maps hwm:%u macro:%u maps %u locs\",\n@@ -16244,7 +16220,7 @@ module_state::write_macro_maps (elf_out *to, location_map_info &info,\n   sec.u (info.num_maps.second);\n \n   unsigned macro_num = 0;\n-  for (auto iter = macro_remap->end (), begin = macro_remap->begin ();\n+  for (auto iter = macro_loc_remap->end (), begin = macro_loc_remap->begin ();\n        iter-- != begin;)\n     {\n       auto mac = iter->src;\n@@ -17936,6 +17912,7 @@ module_state::write_begin (elf_out *to, cpp_reader *reader,\n   spaces.release ();\n   sccs.release ();\n \n+  vec_free (macro_loc_remap);\n   vec_free (ool);\n \n   // FIXME:QOI:  Have a command line switch to control more detailed"}]}