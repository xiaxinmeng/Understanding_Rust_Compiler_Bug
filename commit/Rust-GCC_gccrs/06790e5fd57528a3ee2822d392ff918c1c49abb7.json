{"sha": "06790e5fd57528a3ee2822d392ff918c1c49abb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY3OTBlNWZkNTc1MjhhM2VlMjgyMmQzOTJmZjkxOGMxYzQ5YWJiNw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-04-11T00:24:58Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-04-11T00:24:58Z"}, "message": "tree.c (tree_operand_check_failed): New function.\n\n\t* tree.c (tree_operand_check_failed): New function.\n\t* tree.h (TREE_OPERAND_CHECK, TREE_OPERAND_CHECK_CODE,\n\tTREE_RTL_OPERAND_CHECK): New checking macros.\n\t(TREE_OPERAND, SAVE_EXPR_CONTEXT, SAVE_EXPR_RTL,\n\tRTL_EXPR_SEQUENCE, RTL_EXPR_RTL, WITH_CLEANUP_EXPR_RTL,\n\tCONSTRUCTOR_ELTS, LABELED_BLOCK_LABEL, LABELED_BLOCK_BODY,\n\tEXIT_BLOCK_RETURN, LOOP_EXPR_BODY, EXPR_WFL_NODE,\n\tEXPR_WFL_FILENAME_NODE, EXPR_WFL_FILENAME, TARGET_EXPR_SLOT,\n\tTARGET_EXPR_INITIAL, TARGET_EXPR_CLEANUP): Use the new\n\tchecking macros.\n\nFrom-SVN: r65452", "tree": {"sha": "1fa5f9ae60027aff2b51248aca045b3cd343f3c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fa5f9ae60027aff2b51248aca045b3cd343f3c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06790e5fd57528a3ee2822d392ff918c1c49abb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06790e5fd57528a3ee2822d392ff918c1c49abb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06790e5fd57528a3ee2822d392ff918c1c49abb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06790e5fd57528a3ee2822d392ff918c1c49abb7/comments", "author": null, "committer": null, "parents": [{"sha": "5288c2a113d5dd42cecb9553edeb652616c77f8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5288c2a113d5dd42cecb9553edeb652616c77f8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5288c2a113d5dd42cecb9553edeb652616c77f8e"}], "stats": {"total": 124, "additions": 97, "deletions": 27}, "files": [{"sha": "572d52a6905253737c0212effc2f8513c8887055", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06790e5fd57528a3ee2822d392ff918c1c49abb7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06790e5fd57528a3ee2822d392ff918c1c49abb7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06790e5fd57528a3ee2822d392ff918c1c49abb7", "patch": "@@ -1,3 +1,16 @@\n+2003-04-10  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* tree.c (tree_operand_check_failed): New function.\n+\t* tree.h (TREE_OPERAND_CHECK, TREE_OPERAND_CHECK_CODE,\n+\tTREE_RTL_OPERAND_CHECK): New checking macros.\n+\t(TREE_OPERAND, SAVE_EXPR_CONTEXT, SAVE_EXPR_RTL,\n+\tRTL_EXPR_SEQUENCE, RTL_EXPR_RTL, WITH_CLEANUP_EXPR_RTL,\n+\tCONSTRUCTOR_ELTS, LABELED_BLOCK_LABEL, LABELED_BLOCK_BODY,\n+\tEXIT_BLOCK_RETURN, LOOP_EXPR_BODY, EXPR_WFL_NODE,\n+\tEXPR_WFL_FILENAME_NODE, EXPR_WFL_FILENAME, TARGET_EXPR_SLOT,\n+\tTARGET_EXPR_INITIAL, TARGET_EXPR_CLEANUP): Use the new\n+\tchecking macros.\n+\n Thu Apr 10 23:52:30 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \tPR inline-asm/8803\n@@ -94,7 +107,7 @@ Thu Apr 10 23:52:30 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t(sched_analyze_insn): Ditto.  Use anti-dependencies for\n \tMOVE_BARRIER and true-dependencies as TRUE_BARRIER.\n \t(init_deps_global): Initialize the barrier as NO_BARRIER.\n-\t\n+\n 2003-04-09  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* config/ia64/ia64.c (issue_nops_and_insn): Add new parameter.\n@@ -135,7 +148,7 @@ Thu Apr 10 23:52:30 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t* config/arm/xscale-elf.h (SUBTARGET_EXTRA_ASM_SPEC): Likewise,\n \tbut only if -msoft-float is specified pass.  Otherwise pass\n \t-mfpu=softvfp.\n-\t\n+\n 2003-04-09  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* function.c (purge_addressof): Use free_INSN_LIST_node instead of\n@@ -171,7 +184,7 @@ Thu Apr 10 23:52:30 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t* function.c (postponed_insns): New.\n \t(purge_addressof_1): Postpone processing of insns if addressofs\n \tare not put into stack.\n-\t(purge_addressof): Process postponed insns.\t\n+\t(purge_addressof): Process postponed insns.\n \n 2003-04-08  J\"orn Rennecke <joern.rennecke@superh.com>\n \n@@ -540,7 +553,7 @@ Mon Apr  7 14:36:24 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \thandle_pch.\n \t(c_common_write_pch): Call handle_pch.\n \t(c_common_read_pch): Don't call start_source_file,\n-\tor end_source_file.\t\n+\tor end_source_file.\n \n Fri Apr  4 17:43:52 2003  Olivier Hainque <hainque@act-europe.fr>\n \n@@ -585,7 +598,7 @@ Fri Apr  4 15:58:52 2003  J\"orn Rennecke <joern.rennecke@superh.com>\n \t* sh.c (fpscr_set_from_mem): Use ACTUAL_NORMAL_MODE.\n \n 2003-04-04  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n-\t\n+\n \t* doc/contrib.texi (Contributors): Add entries for Wolfgang\n \tBangerth, DJ Delorie, Christian Ehrhardt, Christopher Faylor,\n \tNathanael Nerode, Diego Novillo, Hartmut Penner, Volker Reichelt,\n@@ -665,7 +678,7 @@ Thu Apr  3 22:27:40 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t(dwarf2out_source_line): Don't do anything if line==0.\n \n \t* stor-layout.c (do_type_align): New fn, split out from...\n-\t(layout_decl): ...here.  Do all alignment calculations for \n+\t(layout_decl): ...here.  Do all alignment calculations for\n \tFIELD_DECLs here.\n \t(update_alignment_for_field): Not here.\n \t(start_record_layout, debug_rli): Remove unpadded_align.\n@@ -739,7 +752,7 @@ Thu Apr  3 00:31:21 CEST 2003  Jan Hubicka  <jh@suse.cz>\n Thu Apr  3 00:18:49 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (override_options):  Disable red zone by default on i386.\n-\t(compute_frame_layout, ix86_force_to_memory, ix86_free_from_memory):  \n+\t(compute_frame_layout, ix86_force_to_memory, ix86_free_from_memory):\n \tDo not test TARGET_64BIT together with TARGET_RED_ZONE\n \n 2003-04-02  Kazu Hirata  <kazu@cs.umass.edu>\n@@ -781,7 +794,7 @@ Thu Apr  3 00:18:49 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \tRemove additional cycle in the reservation before retirement.\n \t(ppc8540_mfcr, ppc8540_mtcrf, ppc8540_mtjmpr): Add missed\n \treservation of ppc8540_issue.\n-\t\n+\n 2003-04-02  Andreas Schwab  <schwab@suse.de>\n \n \t* real.c (decode_ieee_single): Fix decoding of SNaN bit.\n@@ -1839,7 +1852,7 @@ Mon Mar 24 20:03:03 CET 2003  Jan Hubicka  <jh@suse.cz>\n \toperands in case MULT_EXPR of 2003-02-16 patch.\n \n 2003-03-20  Daniel Berlin  <dberlin@dberlin.org>\n-\tMerge changes from new-regalloc-branch \n+\tMerge changes from new-regalloc-branch\n \n \tFrom Michael Matz  <matz@suse.de>\n \t* df.c (df_ref_record_1): Move init of loc to safe point."}, {"sha": "57d76b46401f5be74a1afa65d13071990999de9d", "filename": "gcc/tree.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06790e5fd57528a3ee2822d392ff918c1c49abb7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06790e5fd57528a3ee2822d392ff918c1c49abb7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=06790e5fd57528a3ee2822d392ff918c1c49abb7", "patch": "@@ -4587,6 +4587,22 @@ tree_vec_elt_check_failed (idx, len, file, line, function)\n      idx + 1, len, function, trim_filename (file), line);\n }\n \n+/* Similar to above, except that the check is for the bounds of the operand\n+   vector of an expression node.  */\n+\n+void\n+tree_operand_check_failed (idx, code, file, line, function)\n+     int idx;\n+     enum tree_code code;\n+     const char *file;\n+     int line;\n+     const char *function;\n+{\n+  internal_error\n+    (\"tree check: accessed operand %d of %s with %d operands in %s, at %s:%d\",\n+     idx + 1, tree_code_name[code], TREE_CODE_LENGTH (code),\n+     function, trim_filename (file), line);\n+}\n #endif /* ENABLE_TREE_CHECKING */\n \f\n /* For a new vector type node T, build the information necessary for"}, {"sha": "b4a6703b93270b9abdb8cf0188c163b064885d30", "filename": "gcc/tree.h", "status": "modified", "additions": 59, "deletions": 18, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06790e5fd57528a3ee2822d392ff918c1c49abb7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06790e5fd57528a3ee2822d392ff918c1c49abb7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=06790e5fd57528a3ee2822d392ff918c1c49abb7", "patch": "@@ -324,6 +324,40 @@ struct tree_common GTY(())\n \t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n     &__t->vec.a[__i]; }))\n \n+/* Special checks for TREE_OPERANDs.  */\n+#define TREE_OPERAND_CHECK(t, i) __extension__\t\t\t\t\\\n+(*({const tree __t = EXPR_CHECK(t);\t\t\t\t\t\\\n+    const int __i = (i);\t\t\t\t\t\t\\\n+    if (__i < 0 || __i >= TREE_CODE_LENGTH (TREE_CODE (__t)))\t\t\\\n+      tree_operand_check_failed (__i, TREE_CODE (__t),\t\t\t\\\n+\t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n+    &__t->exp.operands[__i]; }))\n+\n+#define TREE_OPERAND_CHECK_CODE(t, code, i) __extension__\t\t\\\n+(*({const tree __t = t;\t\t\t\t\t\t\t\\\n+    const int __i = (i);\t\t\t\t\t\t\\\n+    const enum tree_code __code = code;\t\t\t\t\t\\\n+    if (TREE_CODE (__t) != __code)\t\t\t\t\t\\\n+      tree_check_failed (__t, __code,\t\t\t\t\t\\\n+\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\t\\\n+    if (__i < 0 || __i >= TREE_CODE_LENGTH (__code))\t\t\t\\\n+      tree_operand_check_failed (__i, __code,\t\t\t\t\\\n+\t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n+    &__t->exp.operands[__i]; }))\n+\n+#define TREE_RTL_OPERAND_CHECK(t, code, i) __extension__\t\t\\\n+(*(rtx *)\t\t\t\t\t\t\t\t\\\n+ ({const tree __t = t;\t\t\t\t\t\t\t\\\n+    const int __i = (i);\t\t\t\t\t\t\\\n+    const enum tree_code __code = code;\t\t\t\t\t\\\n+    if (TREE_CODE (__t) != __code)\t\t\t\t\t\\\n+      tree_check_failed (__t, __code,\t\t\t\t\t\\\n+\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\t\\\n+    if (__i < 0 || __i >= TREE_CODE_LENGTH (__code))\t\t\t\\\n+      tree_operand_check_failed (__i, __code,\t\t\t\t\\\n+\t\t\t\t __FILE__, __LINE__, __FUNCTION__);\t\\\n+    &__t->exp.operands[__i]; }))\n+\n extern void tree_check_failed PARAMS ((const tree, enum tree_code,\n \t\t\t\t       const char *, int, const char *))\n     ATTRIBUTE_NORETURN;\n@@ -334,13 +368,20 @@ extern void tree_vec_elt_check_failed PARAMS ((int, int, const char *,\n \t\t\t\t\t       int, const char *))\n     ATTRIBUTE_NORETURN;\n \n+extern void tree_operand_check_failed PARAMS ((int, enum tree_code,\n+\t\t\t\t\t       const char *, int, const char *))\n+    ATTRIBUTE_NORETURN;\n+    \n #else /* not ENABLE_TREE_CHECKING, or not gcc */\n \n #define TREE_CHECK(t, code)\t\t(t)\n #define TREE_CLASS_CHECK(t, code)\t(t)\n #define CST_OR_CONSTRUCTOR_CHECK(t)\t(t)\n #define EXPR_CHECK(t)\t\t\t(t)\n #define TREE_VEC_ELT_CHECK(t, i)\t((t)->vec.a[i])\n+#define TREE_OPERAND_CHECK(t, i)\t((t)->exp.operands[i])\n+#define TREE_OPERAND_CHECK_CODE(t, code, i) ((t)->exp.operands[i])\n+#define TREE_RTL_OPERAND_CHECK(t, code, i)  (*(rtx *) &((t)->exp.operands[i]))\n \n #endif\n \n@@ -826,8 +867,9 @@ struct tree_vec GTY(())\n /* Define fields and accessors for some nodes that represent expressions.  */\n \n /* In a SAVE_EXPR node.  */\n-#define SAVE_EXPR_CONTEXT(NODE) TREE_OPERAND (SAVE_EXPR_CHECK (NODE), 1)\n-#define SAVE_EXPR_RTL(NODE) (*(rtx *) &SAVE_EXPR_CHECK (NODE)->exp.operands[2])\n+#define SAVE_EXPR_CONTEXT(NODE) TREE_OPERAND_CHECK_CODE (NODE, SAVE_EXPR, 1)\n+#define SAVE_EXPR_RTL(NODE) TREE_RTL_OPERAND_CHECK (NODE, SAVE_EXPR, 2)\n+\n #define SAVE_EXPR_NOPLACEHOLDER(NODE) TREE_UNSIGNED (SAVE_EXPR_CHECK (NODE))\n /* Nonzero if the SAVE_EXPRs value should be kept, even if it occurs\n    both in normal code and in a handler.  (Normally, in a handler, all\n@@ -836,42 +878,41 @@ struct tree_vec GTY(())\n #define SAVE_EXPR_PERSISTENT_P(NODE) TREE_ASM_WRITTEN (SAVE_EXPR_CHECK (NODE))\n \n /* In a RTL_EXPR node.  */\n-#define RTL_EXPR_SEQUENCE(NODE) \\\n-  (*(rtx *) &RTL_EXPR_CHECK (NODE)->exp.operands[0])\n-#define RTL_EXPR_RTL(NODE) (*(rtx *) &RTL_EXPR_CHECK (NODE)->exp.operands[1])\n+#define RTL_EXPR_SEQUENCE(NODE) TREE_RTL_OPERAND_CHECK (NODE, RTL_EXPR, 0)\n+#define RTL_EXPR_RTL(NODE) TREE_RTL_OPERAND_CHECK (NODE, RTL_EXPR, 1)\n \n /* In a WITH_CLEANUP_EXPR node.  */\n #define WITH_CLEANUP_EXPR_RTL(NODE) \\\n-  (*(rtx *) &WITH_CLEANUP_EXPR_CHECK (NODE)->exp.operands[2])\n+  TREE_RTL_OPERAND_CHECK (NODE, WITH_CLEANUP_EXPR, 2)\n \n /* In a CONSTRUCTOR node.  */\n-#define CONSTRUCTOR_ELTS(NODE) TREE_OPERAND (CONSTRUCTOR_CHECK (NODE), 1)\n+#define CONSTRUCTOR_ELTS(NODE) TREE_OPERAND_CHECK_CODE (NODE, CONSTRUCTOR, 1)\n \n /* In ordinary expression nodes.  */\n-#define TREE_OPERAND(NODE, I) (EXPR_CHECK (NODE)->exp.operands[I])\n+#define TREE_OPERAND(NODE, I) TREE_OPERAND_CHECK (NODE, I)\n #define TREE_COMPLEXITY(NODE) (EXPR_CHECK (NODE)->exp.complexity)\n \n /* In a LABELED_BLOCK_EXPR node.  */\n #define LABELED_BLOCK_LABEL(NODE) \\\n-  TREE_OPERAND (LABELED_BLOCK_EXPR_CHECK (NODE), 0)\n+  TREE_OPERAND_CHECK_CODE (NODE, LABELED_BLOCK_EXPR, 0)\n #define LABELED_BLOCK_BODY(NODE) \\\n-  TREE_OPERAND (LABELED_BLOCK_EXPR_CHECK (NODE), 1)\n+  TREE_OPERAND_CHECK_CODE (NODE, LABELED_BLOCK_EXPR, 1)\n \n /* In an EXIT_BLOCK_EXPR node.  */\n #define EXIT_BLOCK_LABELED_BLOCK(NODE) \\\n-  TREE_OPERAND (EXIT_BLOCK_EXPR_CHECK (NODE), 0)\n-#define EXIT_BLOCK_RETURN(NODE) TREE_OPERAND (EXIT_BLOCK_EXPR_CHECK (NODE), 1)\n+  TREE_OPERAND_CHECK_CODE (NODE, EXIT_BLOCK_EXPR, 0)\n+#define EXIT_BLOCK_RETURN(NODE) TREE_OPERAND_CHECK_CODE (NODE, EXIT_BLOCK_EXPR, 1)\n \n /* In a LOOP_EXPR node.  */\n-#define LOOP_EXPR_BODY(NODE) TREE_OPERAND (LOOP_EXPR_CHECK (NODE), 0)\n+#define LOOP_EXPR_BODY(NODE) TREE_OPERAND_CHECK_CODE (NODE, LOOP_EXPR, 0)\n \n /* In an EXPR_WITH_FILE_LOCATION node.  */\n #define EXPR_WFL_EMIT_LINE_NOTE(NODE) \\\n   (EXPR_WITH_FILE_LOCATION_CHECK (NODE)->common.public_flag)\n #define EXPR_WFL_NODE(NODE) \\\n-  TREE_OPERAND (EXPR_WITH_FILE_LOCATION_CHECK (NODE), 0)\n+  TREE_OPERAND_CHECK_CODE (NODE, EXPR_WITH_FILE_LOCATION, 0)\n #define EXPR_WFL_FILENAME_NODE(NODE) \\\n-  TREE_OPERAND (EXPR_WITH_FILE_LOCATION_CHECK (NODE), 1)\n+  TREE_OPERAND_CHECK_CODE (NODE, EXPR_WITH_FILE_LOCATION, 1)\n #define EXPR_WFL_FILENAME(NODE) \\\n   IDENTIFIER_POINTER (EXPR_WFL_FILENAME_NODE (NODE))\n /* ??? Java uses this in all expressions.  */\n@@ -882,9 +923,9 @@ struct tree_vec GTY(())\n   (EXPR_WFL_LINECOL(NODE) = ((LINE) << 12) | ((COL) & 0xfff))\n \n /* In a TARGET_EXPR node.  */\n-#define TARGET_EXPR_SLOT(NODE) TREE_OPERAND (TARGET_EXPR_CHECK (NODE), 0)\n-#define TARGET_EXPR_INITIAL(NODE) TREE_OPERAND (TARGET_EXPR_CHECK (NODE), 1)\n-#define TARGET_EXPR_CLEANUP(NODE) TREE_OPERAND (TARGET_EXPR_CHECK (NODE), 2)\n+#define TARGET_EXPR_SLOT(NODE) TREE_OPERAND_CHECK_CODE (NODE, TARGET_EXPR, 0)\n+#define TARGET_EXPR_INITIAL(NODE) TREE_OPERAND_CHECK_CODE (NODE, TARGET_EXPR, 1)\n+#define TARGET_EXPR_CLEANUP(NODE) TREE_OPERAND_CHECK_CODE (NODE, TARGET_EXPR, 2)\n \n struct tree_exp GTY(())\n {"}]}