{"sha": "9473c5226bfe4c2a3d0045028921a00a167e5c40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ3M2M1MjI2YmZlNGMyYTNkMDA0NTAyODkyMWEwMGExNjdlNWM0MA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-11-02T19:03:59Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-11-02T19:03:59Z"}, "message": "* collect2.c (main, write_c_file_stat), gcc.c (translate_options,\n\n\tprocess_command, main), gcov.c (open_files, output_data), tlink.c\n\t(frob_extension, scan_linker_output), toplev.c\n\t(file_name_nondirectory): Use strchr () and strrchr () instead of\n\tindex () and rindex ().\n\ncp:\n\t* dump.c (dequeue_and_dump), lex.c (interface_strcmp), method.c\n\t(build_overload_value), repo.c (open_repo_file), xref.c\n\t(open_xref_file): Use strchr () and strrchr () instead of index ()\n\tand rindex ().\n\nf:\n\t* com.c (open_include_file, ffecom_open_include_): Use strchr ()\n\tand strrchr () instead of index () and rindex ().\n\nFrom-SVN: r37206", "tree": {"sha": "79fd392a778483e0dba0d31c32d9d005dc4fdeeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79fd392a778483e0dba0d31c32d9d005dc4fdeeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9473c5226bfe4c2a3d0045028921a00a167e5c40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9473c5226bfe4c2a3d0045028921a00a167e5c40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9473c5226bfe4c2a3d0045028921a00a167e5c40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9473c5226bfe4c2a3d0045028921a00a167e5c40/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0304bbad379d530d08ca2aa11289875e71a44aa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0304bbad379d530d08ca2aa11289875e71a44aa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0304bbad379d530d08ca2aa11289875e71a44aa6"}], "stats": {"total": 112, "additions": 66, "deletions": 46}, "files": [{"sha": "c6b37dfd07913e109ab15ec7bfffd1d0d37555ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9473c5226bfe4c2a3d0045028921a00a167e5c40", "patch": "@@ -1,3 +1,11 @@\n+2000-11-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* collect2.c (main, write_c_file_stat), gcc.c (translate_options,\n+\tprocess_command, main), gcov.c (open_files, output_data), tlink.c\n+\t(frob_extension, scan_linker_output), toplev.c\n+\t(file_name_nondirectory): Use strchr () and strrchr () instead of\n+\tindex () and rindex ().\n+\n 2000-11-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.c (get_flag_spec, check_format_info_main,"}, {"sha": "139e6e83198b65f09faea4b0545a460ff47bbac7", "filename": "gcc/collect2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=9473c5226bfe4c2a3d0045028921a00a167e5c40", "patch": "@@ -1172,7 +1172,7 @@ main (argc, argv)\n \t\toutput_file = *ld1++ = *ld2++ = *++argv;\n \t      else if (1\n #ifdef SWITCHES_NEED_SPACES\n-\t\t       && ! index (SWITCHES_NEED_SPACES, arg[1])\n+\t\t       && ! strchr (SWITCHES_NEED_SPACES, arg[1])\n #endif\n \t\t       )\n \n@@ -1201,7 +1201,7 @@ main (argc, argv)\n \t      break;\n \t    }\n \t}\n-      else if ((p = rindex (arg, '.')) != (char *) 0\n+      else if ((p = strrchr (arg, '.')) != (char *) 0\n \t       && (strcmp (p, \".o\") == 0 || strcmp (p, \".a\") == 0\n \t\t   || strcmp (p, \".so\") == 0 || strcmp (p, \".lo\") == 0))\n \t{\n@@ -1829,15 +1829,15 @@ write_c_file_stat (stream, name)\n   int frames = (frame_tables.number > 0);\n \n   /* Figure out name of output_file, stripping off .so version.  */\n-  p = rindex (output_file, '/');\n+  p = strrchr (output_file, '/');\n   if (p == 0)\n     p = output_file;\n   else\n     p++;\n   q = p;\n   while (q)\n     {\n-      q = index (q,'.');\n+      q = strchr (q,'.');\n       if (q == 0)\n \t{\n \t  q = p + strlen (p);"}, {"sha": "0b1a322c69962b5d560c62481b3b599f0312d522", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9473c5226bfe4c2a3d0045028921a00a167e5c40", "patch": "@@ -1,3 +1,10 @@\n+2000-11-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* dump.c (dequeue_and_dump), lex.c (interface_strcmp), method.c\n+\t(build_overload_value), repo.c (open_repo_file), xref.c\n+\t(open_xref_file): Use strchr () and strrchr () instead of index ()\n+\tand rindex ().\n+\n 2000-11-01  Bernd Schmidt  <bernds@redhat.co.uk>\n \n \t* call.c (build_over_call): Call fold on the CALL_EXPR."}, {"sha": "618a714e14641b15ffab5398e72ae9737c64dc52", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=9473c5226bfe4c2a3d0045028921a00a167e5c40", "patch": "@@ -378,7 +378,7 @@ dequeue_and_dump (di)\n       /* And a source position.  */\n       if (DECL_SOURCE_FILE (t))\n \t{\n-\t  const char *filename = rindex (DECL_SOURCE_FILE (t), '/');\n+\t  const char *filename = strrchr (DECL_SOURCE_FILE (t), '/');\n \t  if (!filename)\n \t    filename = DECL_SOURCE_FILE (t);\n \t  else"}, {"sha": "8d0f5e6d9083168fa34c7f5f0ddc93fddf3e0555", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=9473c5226bfe4c2a3d0045028921a00a167e5c40", "patch": "@@ -1022,7 +1022,7 @@ interface_strcmp (s)\n \treturn 0;\n \n       /* Don't get faked out by xxx.yyy.cc vs xxx.zzz.cc.  */\n-      if (index (s1, '.') || index (t1, '.'))\n+      if (strchr (s1, '.') || strchr (t1, '.'))\n \tcontinue;\n \n       if (*s1 == '\\0' || s1[-1] != '.' || t1[-1] != '.')"}, {"sha": "532e45120f881113240a48a97cc355e161ccdf1f", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=9473c5226bfe4c2a3d0045028921a00a167e5c40", "patch": "@@ -770,7 +770,7 @@ build_overload_value (type, value, flags)\n \t    else\n \t      {\n \t\tREAL_VALUE_TO_DECIMAL (val, \"%.20e\", bufp);\n-\t\tbufp = (char *) index (bufp, 'e');\n+\t\tbufp = (char *) strchr (bufp, 'e');\n \t\tif (!bufp)\n \t\t  strcat (digit_buffer, \"e0\");\n \t\telse\n@@ -799,7 +799,7 @@ build_overload_value (type, value, flags)\n \t\t      }\n \t\t  }\n #ifdef NO_DOT_IN_LABEL\n-\t\tbufp = (char *) index (bufp, '.');\n+\t\tbufp = (char *) strchr (bufp, '.');\n \t\tif (bufp)\n \t\t  *bufp = '_';\n #endif"}, {"sha": "8feab83903821daae46d919fcf98e4bf2125ba93", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=9473c5226bfe4c2a3d0045028921a00a167e5c40", "patch": "@@ -301,7 +301,7 @@ open_repo_file (filename)\n     return;\n \n   p = file_name_nondirectory (s);\n-  p = rindex (p, '.');\n+  p = strrchr (p, '.');\n   if (! p)\n     p = s + strlen (s);\n "}, {"sha": "cf99fcd400b25bf492c2a6b8804e20d98a3a14f0", "filename": "gcc/cp/xref.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fcp%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fcp%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fxref.c?ref=9473c5226bfe4c2a3d0045028921a00a167e5c40", "patch": "@@ -811,14 +811,14 @@ open_xref_file(file)\n #ifdef XREF_FILE_NAME\n   XREF_FILE_NAME (xref_name, file);\n #else\n-  s = rindex (file, '/');\n+  s = strrchr (file, '/');\n   if (s == NULL)\n     sprintf (xref_name, \".%s.gxref\", file);\n   else\n     {\n       ++s;\n       strcpy (xref_name, file);\n-      t = rindex (xref_name, '/');\n+      t = strrchr (xref_name, '/');\n       ++t;\n       *t++ = '.';\n       strcpy (t, s);"}, {"sha": "fcb06affcbd7f9580c3dadded03f97775a29fba4", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=9473c5226bfe4c2a3d0045028921a00a167e5c40", "patch": "@@ -1,3 +1,8 @@\n+2000-11-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* com.c (open_include_file, ffecom_open_include_): Use strchr ()\n+\tand strrchr () instead of index () and rindex ().\n+\n 2000-10-27  Zack Weinberg  <zack@wolery.stanford.edu>\n \n \t* Make-lang.in: Move all build rules here from Makefile.in,"}, {"sha": "d158feda32b1c967081f7fe7a8ff56b5078a4059", "filename": "gcc/f/com.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=9473c5226bfe4c2a3d0045028921a00a167e5c40", "patch": "@@ -15794,11 +15794,11 @@ open_include_file (filename, searchptr)\n      looking in.  Thus #include <sys/types.h> will look up sys/types.h\n      in /usr/include/header.gcc and look up types.h in\n      /usr/include/sys/header.gcc.  */\n-  p = rindex (filename, '/');\n+  p = strrchr (filename, '/');\n #ifdef DIR_SEPARATOR\n-  if (! p) p = rindex (filename, DIR_SEPARATOR);\n+  if (! p) p = strrchr (filename, DIR_SEPARATOR);\n   else {\n-    char *tmp = rindex (filename, DIR_SEPARATOR);\n+    char *tmp = strrchr (filename, DIR_SEPARATOR);\n     if (tmp != NULL && tmp > p) p = tmp;\n   }\n #endif\n@@ -16139,18 +16139,18 @@ ffecom_open_include_ (char *name, ffewhereLine l, ffewhereColumn c)\n \t      dsp[0].next = search_start;\n \t      search_start = dsp;\n #ifndef VMS\n-\t      ep = rindex (nam, '/');\n+\t      ep = strrchr (nam, '/');\n #ifdef DIR_SEPARATOR\n-\t    if (ep == NULL) ep = rindex (nam, DIR_SEPARATOR);\n+\t    if (ep == NULL) ep = strrchr (nam, DIR_SEPARATOR);\n \t    else {\n-\t      char *tmp = rindex (nam, DIR_SEPARATOR);\n+\t      char *tmp = strrchr (nam, DIR_SEPARATOR);\n \t      if (tmp != NULL && tmp > ep) ep = tmp;\n \t    }\n #endif\n #else\t\t\t\t/* VMS */\n-\t      ep = rindex (nam, ']');\n-\t      if (ep == NULL) ep = rindex (nam, '>');\n-\t      if (ep == NULL) ep = rindex (nam, ':');\n+\t      ep = strrchr (nam, ']');\n+\t      if (ep == NULL) ep = strrchr (nam, '>');\n+\t      if (ep == NULL) ep = strrchr (nam, ':');\n \t      if (ep != NULL) ep++;\n #endif\t\t\t\t/* VMS */\n \t      if (ep != NULL)\n@@ -16229,7 +16229,7 @@ ffecom_open_include_ (char *name, ffewhereLine l, ffewhereColumn c)\n \t      fname[flen] = 0;\n #if 0\t/* Not for g77.  */\n \t      /* if it's '#include filename', add the missing .h */\n-\t      if (index (fname, '.') == NULL)\n+\t      if (strchr (fname, '.') == NULL)\n \t\tstrcat (fname, \".h\");\n #endif\n \t    }"}, {"sha": "bd8d70a1dccc6b5ebd97f19dae953d8f45cf2a41", "filename": "gcc/gcc.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=9473c5226bfe4c2a3d0045028921a00a167e5c40", "patch": "@@ -946,7 +946,7 @@ translate_options (argcp, argvp)\n \n \t\t      /* If this mapping requires extra text at end of name,\n \t\t\t accept that as \"argument\".  */\n-\t\t      else if (index (arginfo, '*') != 0)\n+\t\t      else if (strchr (arginfo, '*') != 0)\n \t\t\targ = argv[i] + optlen;\n \n \t\t      /* Otherwise, extra text at end means mismatch.\n@@ -955,14 +955,14 @@ translate_options (argcp, argvp)\n \t\t\tcontinue;\n \t\t    }\n \n-\t\t  else if (index (arginfo, '*') != 0)\n+\t\t  else if (strchr (arginfo, '*') != 0)\n \t\t    {\n \t\t      error (\"Incomplete `%s' option\", option_map[j].name);\n \t\t      break;\n \t\t    }\n \n \t\t  /* Handle arguments.  */\n-\t\t  if (index (arginfo, 'a') != 0)\n+\t\t  if (strchr (arginfo, 'a') != 0)\n \t\t    {\n \t\t      if (arg == 0)\n \t\t\t{\n@@ -976,9 +976,9 @@ translate_options (argcp, argvp)\n \t\t\t  arg = argv[++i];\n \t\t\t}\n \t\t    }\n-\t\t  else if (index (arginfo, '*') != 0)\n+\t\t  else if (strchr (arginfo, '*') != 0)\n \t\t    ;\n-\t\t  else if (index (arginfo, 'o') == 0)\n+\t\t  else if (strchr (arginfo, 'o') == 0)\n \t\t    {\n \t\t      if (arg != 0)\n \t\t\terror (\"Extraneous argument to `%s' option\",\n@@ -987,7 +987,7 @@ translate_options (argcp, argvp)\n \t\t    }\n \n \t\t  /* Store the translation as one argv elt or as two.  */\n-\t\t  if (arg != 0 && index (arginfo, 'j') != 0)\n+\t\t  if (arg != 0 && strchr (arginfo, 'j') != 0)\n \t\t    newv[newindex++] = concat (option_map[j].equivalent, arg,\n \t\t\t\t\t       NULL_PTR);\n \t\t  else if (arg != 0)\n@@ -3646,7 +3646,7 @@ process_command (argc, argv)\n \t      /* Null-terminate the vector.  */\n \t      switches[n_switches].args[j] = 0;\n \t    }\n-\t  else if (index (switches_need_spaces, c))\n+\t  else if (strchr (switches_need_spaces, c))\n \t    {\n \t      /* On some systems, ld cannot handle some options without\n \t\t a space.  So split the option from its argument.  */\n@@ -5288,7 +5288,7 @@ main (argc, argv)\n \tfirst_time = FALSE;\n \tobstack_grow (&collect_obstack, \"'-\", 2);\n \tq = switches[i].part1;\n-\twhile ((p = index (q, '\\'')))\n+\twhile ((p = strchr (q, '\\'')))\n \t  {\n \t    obstack_grow (&collect_obstack, q, p - q);\n \t    obstack_grow (&collect_obstack, \"'\\\\''\", 4);\n@@ -5301,7 +5301,7 @@ main (argc, argv)\n \t  {\n \t    obstack_grow (&collect_obstack, \" '\", 2);\n \t    q = *args;\n-\t    while ((p = index (q, '\\'')))\n+\t    while ((p = strchr (q, '\\'')))\n \t      {\n \t\tobstack_grow (&collect_obstack, q, p - q);\n \t\tobstack_grow (&collect_obstack, \"'\\\\''\", 4);"}, {"sha": "a1c57e524413cda95d4d3734cda232b766e42094", "filename": "gcc/gcov.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=9473c5226bfe4c2a3d0045028921a00a167e5c40", "patch": "@@ -376,7 +376,7 @@ open_files ()\n \t  strcat (bbg_file_name, \"/\");\n \t}\n \n-      cptr = rindex (input_file_name, '/');\n+      cptr = strrchr (input_file_name, '/');\n       if (cptr)\n \t{\n \t  strcat (da_file_name, cptr + 1);\n@@ -397,19 +397,19 @@ open_files ()\n       strcpy (bbg_file_name, input_file_name);\n     }\n \n-  cptr = rindex (bb_file_name, '.');\n+  cptr = strrchr (bb_file_name, '.');\n   if (cptr)\n     strcpy (cptr, \".bb\");\n   else\n     strcat (bb_file_name, \".bb\");\n \n-  cptr = rindex (da_file_name, '.');\n+  cptr = strrchr (da_file_name, '.');\n   if (cptr)\n     strcpy (cptr, \".da\");\n   else\n     strcat (da_file_name, \".da\");\n \n-  cptr = rindex (bbg_file_name, '.');\n+  cptr = strrchr (bbg_file_name, '.');\n   if (cptr)\n     strcpy (cptr, \".bbg\");\n   else\n@@ -1249,7 +1249,7 @@ output_data ()\n \t    }\n \n \t  count = strlen (source_file_name);\n-\t  cptr = rindex (s_ptr->name, '/');\n+\t  cptr = strrchr (s_ptr->name, '/');\n \t  if (cptr)\n \t    cptr = cptr + 1;\n \t  else\n@@ -1258,15 +1258,15 @@ output_data ()\n \t    {\n \t      gcov_file_name = xmalloc (count + 7 + strlen (input_file_name));\n \t      \n-\t      cptr = rindex (input_file_name, '/');\n+\t      cptr = strrchr (input_file_name, '/');\n \t      if (cptr)\n \t\tstrcpy (gcov_file_name, cptr + 1);\n \t      else\n \t\tstrcpy (gcov_file_name, input_file_name);\n \n \t      strcat (gcov_file_name, \".\");\n \n-\t      cptr = rindex (source_file_name, '/');\n+\t      cptr = strrchr (source_file_name, '/');\n \t      if (cptr)\n \t\tstrcat (gcov_file_name, cptr + 1);\n \t      else\n@@ -1275,7 +1275,7 @@ output_data ()\n \t  else\n \t    {\n \t      gcov_file_name = xmalloc (count + 6);\n-\t      cptr = rindex (source_file_name, '/');\n+\t      cptr = strrchr (source_file_name, '/');\n \t      if (cptr)\n \t\tstrcpy (gcov_file_name, cptr + 1);\n \t      else"}, {"sha": "8758556c14c01b9f133d399457d81a1d9dd863aa", "filename": "gcc/tlink.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=9473c5226bfe4c2a3d0045028921a00a167e5c40", "patch": "@@ -327,10 +327,10 @@ frob_extension (s, ext)\n      const char *s;\n      const char *ext;\n {\n-  const char *p = rindex (s, '/');\n+  const char *p = strrchr (s, '/');\n   if (! p)\n     p = s;\n-  p = rindex (p, '.');\n+  p = strrchr (p, '.');\n   if (! p)\n     p = s + strlen (s);\n \n@@ -652,12 +652,12 @@ scan_linker_output (fname)\n \t  q = 0;\n \n \t  /* First try `GNU style'.  */\n-\t  p = index (oldq, '`');\n+\t  p = strchr (oldq, '`');\n \t  if (p)\n-\t    p++, q = index (p, '\\'');\n+\t    p++, q = strchr (p, '\\'');\n \t  /* Then try \"double quotes\".  */\n-\t  else if (p = index (oldq, '\"'), p)\n-\t    p++, q = index (p, '\"');\n+\t  else if (p = strchr (oldq, '\"'), p)\n+\t    p++, q = strchr (p, '\"');\n \n \t  /* Don't let the strstr's below see the demangled name; we\n \t     might get spurious matches.  */"}, {"sha": "aa8c4ba7796939cefb1be7978f24c35496b3955e", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9473c5226bfe4c2a3d0045028921a00a167e5c40/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=9473c5226bfe4c2a3d0045028921a00a167e5c40", "patch": "@@ -1717,9 +1717,9 @@ char *\n file_name_nondirectory (x)\n      const char *x;\n {\n-  char *tmp = (char *) rindex (x, '/');\n+  char *tmp = (char *) strrchr (x, '/');\n   if (DIR_SEPARATOR != '/' && ! tmp)\n-    tmp = (char *) rindex (x, DIR_SEPARATOR);\n+    tmp = (char *) strrchr (x, DIR_SEPARATOR);\n   if (tmp)\n     return (char *) (tmp + 1);\n   else"}]}