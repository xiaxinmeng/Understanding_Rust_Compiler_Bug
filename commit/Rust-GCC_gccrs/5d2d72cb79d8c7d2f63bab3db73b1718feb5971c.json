{"sha": "5d2d72cb79d8c7d2f63bab3db73b1718feb5971c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQyZDcyY2I3OWQ4YzdkMmY2M2JhYjNkYjczYjE3MThmZWI1OTcxYw==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-05-23T00:00:17Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-05-23T00:00:17Z"}, "message": "re PR fortran/43851 (Add _gfortran_error_stop_numeric)\n\n2010-05-22 Jerry DeLisle <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/43851\n\t* match.c (gfc_match_stopcode): Use gfc_match_init_expr. Go to cleanup\n\tbefore returning MATCH_ERROR. Add check for scalar. Add check for\n\tdefault integer kind.\n\nFrom-SVN: r159747", "tree": {"sha": "f8656839e33d6e13b577cb319f8f03b0da1696cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8656839e33d6e13b577cb319f8f03b0da1696cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d2d72cb79d8c7d2f63bab3db73b1718feb5971c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2d72cb79d8c7d2f63bab3db73b1718feb5971c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d2d72cb79d8c7d2f63bab3db73b1718feb5971c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2d72cb79d8c7d2f63bab3db73b1718feb5971c/comments", "author": null, "committer": null, "parents": [{"sha": "7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a8cba34b0cb9b3e9449635581de3d7d5f83859a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a8cba34b0cb9b3e9449635581de3d7d5f83859a"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "8f4656bba6c63be7036a14f768992a4493fde3a3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2d72cb79d8c7d2f63bab3db73b1718feb5971c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2d72cb79d8c7d2f63bab3db73b1718feb5971c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5d2d72cb79d8c7d2f63bab3db73b1718feb5971c", "patch": "@@ -1,3 +1,10 @@\n+2010-05-22 Jerry DeLisle <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/43851\n+\t* match.c (gfc_match_stopcode): Use gfc_match_init_expr. Go to cleanup\n+\tbefore returning MATCH_ERROR. Add check for scalar. Add check for\n+\tdefault integer kind.\n+\n 2010-05-22  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/44212"}, {"sha": "a4900aa7eecb1762758761187b442826cfab394a", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2d72cb79d8c7d2f63bab3db73b1718feb5971c/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2d72cb79d8c7d2f63bab3db73b1718feb5971c/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=5d2d72cb79d8c7d2f63bab3db73b1718feb5971c", "patch": "@@ -2013,7 +2013,7 @@ gfc_match_stopcode (gfc_statement st)\n \n   if (gfc_match_eos () != MATCH_YES)\n     {\n-      m = gfc_match_expr (&e);\n+      m = gfc_match_init_expr (&e);\n       if (m == MATCH_ERROR)\n \tgoto cleanup;\n       if (m == MATCH_NO)\n@@ -2033,7 +2033,7 @@ gfc_match_stopcode (gfc_statement st)\n   if (st == ST_STOP && gfc_find_state (COMP_CRITICAL) == SUCCESS)\n     {\n       gfc_error (\"Image control statement STOP at %C in CRITICAL block\");\n-      return MATCH_ERROR;\n+      goto cleanup;\n     }\n \n   if (e != NULL)\n@@ -2042,22 +2042,30 @@ gfc_match_stopcode (gfc_statement st)\n \t{\n \t  gfc_error (\"STOP code at %L must be either INTEGER or CHARACTER type\",\n \t\t     &e->where);\n-\t  return MATCH_ERROR;\n+\t  goto cleanup;\n+\t}\n+\n+      if (e->rank != 0)\n+\t{\n+\t  gfc_error (\"STOP code at %L must be scalar\",\n+\t\t     &e->where);\n+\t  goto cleanup;\n \t}\n \n       if (e->ts.type == BT_CHARACTER\n \t  && e->ts.kind != gfc_default_character_kind)\n \t{\n \t  gfc_error (\"STOP code at %L must be default character KIND=%d\",\n \t\t     &e->where, (int) gfc_default_character_kind);\n-\t  return MATCH_ERROR;\n+\t  goto cleanup;\n \t}\n \n-      if (e->expr_type != EXPR_CONSTANT)\n+      if (e->ts.type == BT_INTEGER\n+\t  && e->ts.kind != gfc_default_integer_kind)\n \t{\n-\t  gfc_error (\"STOP code at %L must be a constant expression\",\n-\t\t     &e->where);\n-\t  return MATCH_ERROR;\n+\t  gfc_error (\"STOP code at %L must be default integer KIND=%d\",\n+\t\t     &e->where, (int) gfc_default_integer_kind);\n+\t  goto cleanup;\n \t}\n     }\n "}]}