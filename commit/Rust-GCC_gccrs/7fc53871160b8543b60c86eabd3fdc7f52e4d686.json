{"sha": "7fc53871160b8543b60c86eabd3fdc7f52e4d686", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZjNTM4NzExNjBiODU0M2I2MGM4NmVhYmQzZmRjN2Y1MmU0ZDY4Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-21T10:19:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-21T10:19:58Z"}, "message": "[multiple changes]\n\n2010-10-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Enter_Overloaded_Entity): Refine warning message about\n\thiding, to remove noise warnings about hiding predefined operators.\n\n2010-10-21  Emmanuel Briot  <briot@adacore.com>\n\n\t* g-comlin.adb (Add_Switch): Fix handling of switches with no separator\n\twhen the parameter has length 1.\n\n2010-10-21  Jose Ruiz  <ruiz@adacore.com>\n\n\t* sem_prag.adb (Set_Ravenscar_Profile): Enforce the restrictions of no\n\tdependence on Ada.Execution_Time.Timers,\n\tAda.Execution_Time.Group_Budget, and\n\tSystem.Multiprocessors.Dispatching_Domains which are part of the\n\tRavenscar Profile.\n\t* impunit.adb (Non_Imp_File_Names_05): Add the file \"a-etgrbu\" to the\n\tlist of Ada 2005 files for package Ada.Execution_Time.Group_Budgets.\n\t(Non_Imp_File_Names_12): Add the file \"s-mudido\" to the list of Ada 2012\n\tfiles for package System.Mutiprocessors.Dispatching_Domains.\n\n2010-10-21  Tristan Gingold  <gingold@adacore.com>\n\n\t* ug_words, vms_data.ads: Define the VMS qualifier for -gnateE.\n\n2010-10-21  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch3.ads (Process_Discriminants): Clarify cases where this is\n\tcalled for a completion.\n\n2010-10-21  Geert Bosch  <bosch@adacore.com>\n\n\t* uintp.ads: Expand image buffer to have enough room for 128-bit values\n\t* urealp.ads (UR_Write): Write constants in base 16 in hexadecimal\n\tnotation; either as fixed point literal or in canonical radix 16\n\tfloating point form.\n\nFrom-SVN: r165761", "tree": {"sha": "ef8a65291debfbf24d3b5bf506a70a871ead8c36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef8a65291debfbf24d3b5bf506a70a871ead8c36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fc53871160b8543b60c86eabd3fdc7f52e4d686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fc53871160b8543b60c86eabd3fdc7f52e4d686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fc53871160b8543b60c86eabd3fdc7f52e4d686", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fc53871160b8543b60c86eabd3fdc7f52e4d686/comments", "author": null, "committer": null, "parents": [{"sha": "3b42c566b8801956047b98983b4c9962a949634d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b42c566b8801956047b98983b4c9962a949634d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b42c566b8801956047b98983b4c9962a949634d"}], "stats": {"total": 340, "additions": 290, "deletions": 50}, "files": [{"sha": "5d4d7b88f2441bc06c475391999f159f21f541f2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7fc53871160b8543b60c86eabd3fdc7f52e4d686", "patch": "@@ -1,3 +1,41 @@\n+2010-10-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Enter_Overloaded_Entity): Refine warning message about\n+\thiding, to remove noise warnings about hiding predefined operators.\n+\n+2010-10-21  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* g-comlin.adb (Add_Switch): Fix handling of switches with no separator\n+\twhen the parameter has length 1.\n+\n+2010-10-21  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* sem_prag.adb (Set_Ravenscar_Profile): Enforce the restrictions of no\n+\tdependence on Ada.Execution_Time.Timers,\n+\tAda.Execution_Time.Group_Budget, and\n+\tSystem.Multiprocessors.Dispatching_Domains which are part of the\n+\tRavenscar Profile.\n+\t* impunit.adb (Non_Imp_File_Names_05): Add the file \"a-etgrbu\" to the\n+\tlist of Ada 2005 files for package Ada.Execution_Time.Group_Budgets.\n+\t(Non_Imp_File_Names_12): Add the file \"s-mudido\" to the list of Ada 2012\n+\tfiles for package System.Mutiprocessors.Dispatching_Domains.\n+\n+2010-10-21  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* ug_words, vms_data.ads: Define the VMS qualifier for -gnateE.\n+\n+2010-10-21  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch3.ads (Process_Discriminants): Clarify cases where this is\n+\tcalled for a completion.\n+\n+2010-10-21  Geert Bosch  <bosch@adacore.com>\n+\n+\t* uintp.ads: Expand image buffer to have enough room for 128-bit values\n+\t* urealp.ads (UR_Write): Write constants in base 16 in hexadecimal\n+\tnotation; either as fixed point literal or in canonical radix 16\n+\tfloating point form.\n+\n 2010-10-21  Robert Dewar  <dewar@adacore.com>\n \n \t* a-cgaaso.ads, a-tags.ads, exp_ch3.adb, exp_attr.adb, exp_ch4.adb,"}, {"sha": "e93042d9614c2d43b2b0a0522ae86d729db8b30a", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=7fc53871160b8543b60c86eabd3fdc7f52e4d686", "patch": "@@ -2109,14 +2109,21 @@ package body GNAT.Command_Line is\n          Index     : Integer)\n       is\n          pragma Unreferenced (Index);\n+         Sep : Character;\n \n       begin\n+         if Separator = \"\" then\n+            Sep := ASCII.NUL;\n+         else\n+            Sep := Separator (Separator'First);\n+         end if;\n+\n          if Cmd.Expanded = null then\n             Cmd.Expanded := new Argument_List'(1 .. 1 => new String'(Simple));\n \n             if Param /= \"\" then\n                Cmd.Params :=\n-                 new Argument_List'(1 .. 1 => new String'(Separator & Param));\n+                 new Argument_List'(1 .. 1 => new String'(Sep & Param));\n             else\n                Cmd.Params := new Argument_List'(1 .. 1 => null);\n             end if;\n@@ -2137,7 +2144,7 @@ package body GNAT.Command_Line is\n                    ((Cmd.Params (C) = null and then Param = \"\")\n                      or else\n                        (Cmd.Params (C) /= null\n-                         and then Cmd.Params (C).all = Separator & Param))\n+                         and then Cmd.Params (C).all = Sep & Param))\n                  and then\n                    ((Cmd.Sections (C) = null and then Section = \"\")\n                      or else\n@@ -2156,7 +2163,7 @@ package body GNAT.Command_Line is\n             if Param /= \"\" then\n                Add\n                  (Cmd.Params,\n-                  new String'(Separator & Param),\n+                  new String'(Sep & Param),\n                   Add_Before);\n             else\n                Add"}, {"sha": "e21119538594b059fc8084ed36ae9811bc93d08e", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=7fc53871160b8543b60c86eabd3fdc7f52e4d686", "patch": "@@ -394,6 +394,7 @@ package body Impunit is\n      \"a-disedf\",    -- Ada.Dispatching.EDF\n      \"a-dispat\",    -- Ada.Dispatching\n      \"a-envvar\",    -- Ada.Environment_Variables\n+     \"a-etgrbu\",    -- Ada.Execution_Time.Group_Budgets\n      \"a-exetim\",    -- Ada.Execution_Time\n      \"a-extiti\",    -- Ada.Execution_Time.Timers\n      \"a-izteio\",    -- Ada.Integer_Wide_Wide_Text_IO\n@@ -504,7 +505,8 @@ package body Impunit is\n    --  The following units should be used only in Ada 2012 mode\n \n    Non_Imp_File_Names_12 : constant File_List := (\n-     0 => \"s-multip\");   -- System.Mutiprocessors\n+     \"s-multip\",    -- System.Multiprocessors\n+     \"s-mudido\");   -- System.Multiprocessors.Dispatching_Domains\n \n    -----------------------\n    -- Alternative Units --"}, {"sha": "46605b3716cb1266bf9e0b0fc46ae64aba522341", "filename": "gcc/ada/sem_ch3.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fsem_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fsem_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.ads?ref=7fc53871160b8543b60c86eabd3fdc7f52e4d686", "patch": "@@ -277,6 +277,10 @@ package Sem_Ch3 is\n    --  Process the discriminants contained in an N_Full_Type_Declaration or\n    --  N_Incomplete_Type_Decl node N. If the declaration is a completion,\n    --  Prev is entity on the partial view, on which references are posted.\n+   --  However, note that Process_Discriminants is called for a completion only\n+   --  if partial view had no discriminants (else we just check conformance\n+   --  between the two views and do not call Process_Discriminants again for\n+   --  the completion).\n \n    function Replace_Anonymous_Access_To_Protected_Subprogram\n      (N : Node_Id) return Entity_Id;"}, {"sha": "0f2fce8dc0b359f0fd6174e5ceaecec0833241e2", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=7fc53871160b8543b60c86eabd3fdc7f52e4d686", "patch": "@@ -5914,15 +5914,30 @@ package body Sem_Ch6 is\n             E := Homonym (E);\n             exit when No (E);\n \n-            --  Warn unless genuine overloading\n+            --  Warn unless genuine overloading. Do not emit warning on\n+            --  hiding predefined operators in Standard (these are either an\n+            --  (artifact of our implicit declarations, or simple noise) but\n+            --  keep warning on a operator defined on a local subtype, because\n+            --  of the real danger that different operators may be applied in\n+            --  various parts of the program.\n \n             if (not Is_Overloadable (E) or else Subtype_Conformant (E, S))\n                   and then (Is_Immediately_Visible (E)\n                               or else\n                             Is_Potentially_Use_Visible (S))\n             then\n-               Error_Msg_Sloc := Sloc (E);\n-               Error_Msg_N (\"declaration of & hides one#?\", S);\n+               if Scope (E) /= Standard_Standard then\n+                  Error_Msg_Sloc := Sloc (E);\n+                  Error_Msg_N (\"declaration of & hides one#?\", S);\n+\n+               elsif Nkind (S) = N_Defining_Operator_Symbol\n+                 and then\n+                   Scope (\n+                     Base_Type (Etype (First_Formal (S)))) /= Scope (S)\n+               then\n+                  Error_Msg_N\n+                    (\"declaration of & hides predefined operator?\", S);\n+               end if;\n             end if;\n          end loop;\n       end if;"}, {"sha": "ea8bb10140db49afabe09641ddd0b6fea6a67e56", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7fc53871160b8543b60c86eabd3fdc7f52e4d686", "patch": "@@ -5410,7 +5410,20 @@ package body Sem_Prag is\n \n       --    Set required restrictions (see System.Rident for detailed list)\n \n+      --    Set the No_Dependence rules\n+      --      No_Dependence => Ada.Asynchronous_Task_Control\n+      --      No_Dependence => Ada.Calendar\n+      --      No_Dependence => Ada.Execution_Time.Group_Budget\n+      --      No_Dependence => Ada.Execution_Time.Timers\n+      --      No_Dependence => Ada.Task_Attributes\n+      --      No_Dependence => System.Multiprocessors.Dispatching_Domains\n+\n       procedure Set_Ravenscar_Profile (N : Node_Id) is\n+         Prefix_Entity   : Entity_Id;\n+         Selector_Entity : Entity_Id;\n+         Prefix_Node     : Node_Id;\n+         Node            : Node_Id;\n+\n       begin\n          --  pragma Task_Dispatching_Policy (FIFO_Within_Priorities)\n \n@@ -5459,6 +5472,106 @@ package body Sem_Prag is\n \n          Set_Profile_Restrictions\n            (Ravenscar, N, Warn => Treat_Restrictions_As_Warnings);\n+\n+         --  Set the No_Dependence restrictions\n+\n+         --  The following No_Dependence restrictions:\n+         --    No_Dependence => Ada.Asynchronous_Task_Control\n+         --    No_Dependence => Ada.Calendar\n+         --    No_Dependence => Ada.Task_Attributes\n+         --  are already set by previous call to Set_Profile_Restrictions.\n+\n+         --  Set the following restrictions which were added to Ada 2005:\n+         --    No_Dependence => Ada.Execution_Time.Group_Budget\n+         --    No_Dependence => Ada.Execution_Time.Timers\n+\n+         if Ada_Version >= Ada_2005 then\n+            Name_Buffer (1 .. 3) := \"ada\";\n+            Name_Len := 3;\n+\n+            Prefix_Entity := Make_Identifier (Loc, Name_Find);\n+\n+            Name_Buffer (1 .. 14) := \"execution_time\";\n+            Name_Len := 14;\n+\n+            Selector_Entity := Make_Identifier (Loc, Name_Find);\n+\n+            Prefix_Node :=\n+              Make_Selected_Component\n+                (Sloc          => Loc,\n+                 Prefix        => Prefix_Entity,\n+                 Selector_Name => Selector_Entity);\n+\n+            Name_Buffer (1 .. 13) := \"group_budgets\";\n+            Name_Len := 13;\n+\n+            Selector_Entity := Make_Identifier (Loc, Name_Find);\n+\n+            Node :=\n+              Make_Selected_Component\n+                (Sloc          => Loc,\n+                 Prefix        => Prefix_Node,\n+                 Selector_Name => Selector_Entity);\n+\n+            Set_Restriction_No_Dependence\n+              (Unit    => Node,\n+               Warn    => Treat_Restrictions_As_Warnings,\n+               Profile => Ravenscar);\n+\n+            Name_Buffer (1 .. 6) := \"timers\";\n+            Name_Len := 6;\n+\n+            Selector_Entity := Make_Identifier (Loc, Name_Find);\n+\n+            Node :=\n+              Make_Selected_Component\n+                (Sloc          => Loc,\n+                 Prefix        => Prefix_Node,\n+                 Selector_Name => Selector_Entity);\n+\n+            Set_Restriction_No_Dependence\n+              (Unit    => Node,\n+               Warn    => Treat_Restrictions_As_Warnings,\n+               Profile => Ravenscar);\n+         end if;\n+\n+         --  Set the following restrictions which was added to Ada 2012 (see\n+         --  AI-0171):\n+         --    No_Dependence => System.Multiprocessors.Dispatching_Domains\n+\n+         if Ada_Version >= Ada_2012 then\n+            Name_Buffer (1 .. 6) := \"system\";\n+            Name_Len := 6;\n+\n+            Prefix_Entity := Make_Identifier (Loc, Name_Find);\n+\n+            Name_Buffer (1 .. 15) := \"multiprocessors\";\n+            Name_Len := 15;\n+\n+            Selector_Entity := Make_Identifier (Loc, Name_Find);\n+\n+            Prefix_Node :=\n+              Make_Selected_Component\n+                (Sloc          => Loc,\n+                 Prefix        => Prefix_Entity,\n+                 Selector_Name => Selector_Entity);\n+\n+            Name_Buffer (1 .. 19) := \"dispatching_domains\";\n+            Name_Len := 19;\n+\n+            Selector_Entity := Make_Identifier (Loc, Name_Find);\n+\n+            Node :=\n+              Make_Selected_Component\n+                (Sloc          => Loc,\n+                 Prefix        => Prefix_Node,\n+                 Selector_Name => Selector_Entity);\n+\n+            Set_Restriction_No_Dependence\n+              (Unit    => Node,\n+               Warn    => Treat_Restrictions_As_Warnings,\n+               Profile => Ravenscar);\n+         end if;\n       end Set_Ravenscar_Profile;\n \n    --  Start of processing for Analyze_Pragma"}, {"sha": "aedfc0fe88291f80f948528ff3f5c08d40628153", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=7fc53871160b8543b60c86eabd3fdc7f52e4d686", "patch": "@@ -59,6 +59,7 @@ gcc -c          ^ GNAT COMPILE\n -gnatDG         ^ /XDEBUG /EXPAND_SOURCEA\n -gnatD          ^ /XDEBUG\n -gnatec         ^ /CONFIGURATION_PRAGMAS_FILE\n+-gnateE         ^ /EXTRA_EXCEPTION_INFORMATION\n -gnateD         ^ /SYMBOL_PREPROCESSING\n -gnatef         ^ /FULL_PATH_IN_BRIEF_MESSAGES\n -gnateG         ^ /GENERATE_PROCESSED_SOURCE"}, {"sha": "38863716770e57879f7c4b946fda13ebf3d3c082", "filename": "gcc/ada/uintp.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fuintp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fuintp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.ads?ref=7fc53871160b8543b60c86eabd3fdc7f52e4d686", "patch": "@@ -261,7 +261,7 @@ package Uintp is\n    --  or decimal format. Auto, the default setting, lets the routine make\n    --  a decision based on the value.\n \n-   UI_Image_Max    : constant := 32;\n+   UI_Image_Max    : constant := 48; -- Enough for a 128-bit number\n    UI_Image_Buffer : String (1 .. UI_Image_Max);\n    UI_Image_Length : Natural;\n    --  Buffer used for UI_Image as described below"}, {"sha": "1c95ee6117b2b01de135ebd4036066ab7aeeb2b2", "filename": "gcc/ada/urealp.adb", "status": "modified", "additions": 92, "deletions": 42, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Furealp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Furealp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.adb?ref=7fc53871160b8543b60c86eabd3fdc7f52e4d686", "patch": "@@ -1323,48 +1323,8 @@ package body Urealp is\n       if Val.Num = 0 then\n          Write_Str (\"0.0\");\n \n-      --  Constants in base 10 can be written in normal Ada literal style\n-\n-      elsif Val.Rbase = 10 then\n-\n-         --  Use fixed-point format for small scaling values\n-\n-         if Val.Den = 0 then\n-            UI_Write (Val.Num, Decimal);\n-            Write_Str (\".0\");\n-\n-         elsif Val.Den = 1 then\n-            UI_Write (Val.Num / 10, Decimal);\n-            Write_Char ('.');\n-            UI_Write (Val.Num mod 10, Decimal);\n-\n-         elsif Val.Den = 2 then\n-            UI_Write (Val.Num / 100, Decimal);\n-            Write_Char ('.');\n-            UI_Write (Val.Num mod 100 / 10, Decimal);\n-            UI_Write (Val.Num mod 10, Decimal);\n-\n-         elsif Val.Den = -1 then\n-            UI_Write (Val.Num, Decimal);\n-            Write_Str (\"0.0\");\n-\n-         elsif Val.Den = -2 then\n-            UI_Write (Val.Num, Decimal);\n-            Write_Str (\"00.0\");\n-\n-         --  Else use exponential format\n-\n-         else\n-            UI_Write (Val.Num / 10, Decimal);\n-            Write_Char ('.');\n-            UI_Write (Val.Num mod 10, Decimal);\n-            Write_Char ('E');\n-            UI_Write (1 - Val.Den, Decimal);\n-         end if;\n-\n-      --  If we have a constant in a base other than 10, and the denominator\n-      --  is zero, then the value is simply the numerator value, since we are\n-      --  dividing by base**0, which is 1.\n+      --  For constants with a denominator of zero, the value is simply the\n+      --  numerator value, since we are dividing by base**0, which is 1.\n \n       elsif Val.Den = 0 then\n          UI_Write (Val.Num, Decimal);\n@@ -1411,6 +1371,96 @@ package body Urealp is\n             Write_Str (\".0\");\n          end if;\n \n+      --  Constants in base 2, 10 or 16 can be written in normal Ada literal\n+      --  style, as long as they fit in the UI_Image_Buffer. Using hexadecimal\n+      --  notation, 4 bytes are required for the 16# # part, and every fifth\n+      --  character is an underscore. So, a buffer of size N has room for\n+\n+      --     ((N - 4) - (N - 4) / 5) * 4 bits\n+\n+      --   or at least\n+\n+      --     N * 16 / 5 - 12 bits\n+\n+      elsif (Val.Rbase = 10 or else Val.Rbase = 16)\n+        and then Num_Bits (Val.Num) < UI_Image_Buffer'Length * 16 / 5 - 12\n+      then\n+         declare\n+            Format : UI_Format := Decimal;\n+            Scale  : Uint;\n+\n+         begin\n+            if Val.Rbase = 16 then\n+               Write_Str (\"16#\");\n+               Format := Hex;\n+            end if;\n+\n+            --  Use fixed-point format for small scaling values\n+\n+            if Val.Den = 1 then\n+               UI_Write (Val.Num / Val.Rbase, Format);\n+               Write_Char ('.');\n+               UI_Write (Val.Num mod Val.Rbase, Format);\n+\n+            elsif Val.Den = 2 then\n+               UI_Write (Val.Num / Val.Rbase**Uint_2, Format);\n+               Write_Char ('.');\n+               UI_Write (Val.Num mod Val.Rbase**Uint_2 / Val.Rbase, Format);\n+               UI_Write (Val.Num mod Val.Rbase, Format);\n+\n+            elsif Val.Den = -1 then\n+               UI_Write (Val.Num, Format);\n+               Write_Str (\"0.0\");\n+\n+            elsif Val.Den = -2 then\n+               UI_Write (Val.Num, Format);\n+               Write_Str (\"00.0\");\n+\n+            --  Else use exponential format\n+\n+            else\n+               UI_Image (Val.Num, Format);\n+               Scale := UI_From_Int (Int (UI_Image_Length));\n+\n+               if Format = Decimal then\n+\n+                  --  Write decimal constants with a non-zero unit digit. This\n+                  --  matches usual scientific notation.\n+\n+                  Write_Char (UI_Image_Buffer (1));\n+                  Write_Char ('.');\n+\n+                  if UI_Image_Length = 1 then\n+                     Write_Char ('0');\n+                  else\n+                     Write_Str (UI_Image_Buffer (2 .. UI_Image_Length));\n+                  end if;\n+\n+                  Scale := Scale - 1; -- First digit is at unit position\n+               else\n+                  pragma Assert (Format = Hex);\n+\n+                  --  Write hexadecimal constants with a zero unit digit. This\n+                  --  matches the Ada canonical form for binary floating point\n+                  --  numbers, and also ensures that the underscores end up in\n+                  --  the correct place.\n+\n+                  Write_Str (\"0.\");\n+                  Write_Str (UI_Image_Buffer (4 .. UI_Image_Length));\n+                  Scale := Scale - 4;         -- Subtract 16# #\n+                  Scale := Scale - Scale / 5; -- Subtract underscores;\n+               end if;\n+\n+               Write_Char ('E');\n+               Format := Decimal;\n+               UI_Write (Scale - Val.Den, Decimal);\n+            end if;\n+\n+            if Format = Hex then\n+               Write_Char ('#');\n+            end if;\n+         end;\n+\n       --  Constants in a base other than 10 can still be easily written\n       --  in normal Ada literal style if the numerator is one.\n "}, {"sha": "8df60aae9f8e4dbce9e6f1414296ba720d0028bb", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fc53871160b8543b60c86eabd3fdc7f52e4d686/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=7fc53871160b8543b60c86eabd3fdc7f52e4d686", "patch": "@@ -1543,6 +1543,15 @@ package VMS_Data is\n                                             \"-gnatm999999\";\n    --  NODOC (see /ERROR_LIMIT)\n \n+   S_GCC_Except  : aliased constant S := \"/EXTRA_EXCEPTION_INFORMATION \"   &\n+                                            \"-gnateE\";\n+   --        /EXTRA_EXCEPTION_INFORMATION\n+   --\n+   --   Generate extra information in exception messages, in particular\n+   --   display extra column information and the value and range associated\n+   --   with index and range check failures, and extra column information for\n+   --   access checks.\n+\n    S_GCC_Expand  : aliased constant S := \"/EXPAND_SOURCE \"                 &\n                                             \"-gnatG\";\n    --        /NOEXPAND_SOURCE (D)\n@@ -3522,6 +3531,7 @@ package VMS_Data is\n                      S_GCC_ErrorX  'Access,\n                      S_GCC_Expand  'Access,\n                      S_GCC_Lexpand 'Access,\n+                     S_GCC_Except  'Access,\n                      S_GCC_Extend  'Access,\n                      S_GCC_Ext     'Access,\n                      S_GCC_File    'Access,"}]}