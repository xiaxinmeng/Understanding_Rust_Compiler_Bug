{"sha": "fba46f0328cd540880eafe802b0f54ee5690d493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJhNDZmMDMyOGNkNTQwODgwZWFmZTgwMmIwZjU0ZWU1NjkwZDQ5Mw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2015-10-29T15:39:09Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2015-10-29T15:39:09Z"}, "message": "Fix X - (X / Y) * Y in match.pd.\n\n2015-10-29  Marc Glisse  <marc.glisse@inria.fr>\n\n\t* match.pd (X-(X/Y)*Y): Properly handle conversions and commutativity.\n\nFrom-SVN: r229534", "tree": {"sha": "32b708b45bfab7f43eefe48927f0bf1bd5176759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32b708b45bfab7f43eefe48927f0bf1bd5176759"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fba46f0328cd540880eafe802b0f54ee5690d493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba46f0328cd540880eafe802b0f54ee5690d493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fba46f0328cd540880eafe802b0f54ee5690d493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba46f0328cd540880eafe802b0f54ee5690d493/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2adfab879c7aa3a78bb78efa09f9ca41603b0f99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2adfab879c7aa3a78bb78efa09f9ca41603b0f99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2adfab879c7aa3a78bb78efa09f9ca41603b0f99"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "3b723870b95d797a6a6fad38c8ae9936ce3c8673", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba46f0328cd540880eafe802b0f54ee5690d493/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba46f0328cd540880eafe802b0f54ee5690d493/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fba46f0328cd540880eafe802b0f54ee5690d493", "patch": "@@ -1,3 +1,7 @@\n+2015-10-29  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* match.pd (X-(X/Y)*Y): Properly handle conversions and commutativity.\n+\n 2015-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-call-cdce.c (shrink_wrap_one_built_in_call): Remove"}, {"sha": "f6c5c07b681ae546039b682363154bc1854621a7", "filename": "gcc/match.pd", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba46f0328cd540880eafe802b0f54ee5690d493/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba46f0328cd540880eafe802b0f54ee5690d493/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=fba46f0328cd540880eafe802b0f54ee5690d493", "patch": "@@ -318,10 +318,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n /* X - (X / Y) * Y is the same as X % Y.  */\n (simplify\n- (minus (convert1? @0) (convert2? (mult (trunc_div @0 @1) @1)))\n- (if ((INTEGRAL_TYPE_P (type) || VECTOR_INTEGER_TYPE_P (type))\n-      && TYPE_UNSIGNED (TREE_TYPE (@0)) == TYPE_UNSIGNED (type))\n-  (trunc_mod (convert @0) (convert @1))))\n+ (minus (convert1? @2) (convert2? (mult:c (trunc_div @0 @1) @1)))\n+ /* We cannot use matching captures here, since in the case of\n+    constants we really want the type of @0, not @2.  */\n+ (if (operand_equal_p (@0, @2, 0)\n+      && (INTEGRAL_TYPE_P (type) || VECTOR_INTEGER_TYPE_P (type)))\n+  (convert (trunc_mod @0 @1))))\n \n /* Optimize TRUNC_MOD_EXPR by a power of two into a BIT_AND_EXPR,\n    i.e. \"X % C\" into \"X & (C - 1)\", if X and C are positive."}]}