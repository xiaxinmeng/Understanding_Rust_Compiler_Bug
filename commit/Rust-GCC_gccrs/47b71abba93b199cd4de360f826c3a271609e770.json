{"sha": "47b71abba93b199cd4de360f826c3a271609e770", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdiNzFhYmJhOTNiMTk5Y2Q0ZGUzNjBmODI2YzNhMjcxNjA5ZTc3MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-09-15T00:05:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-09-15T00:05:53Z"}, "message": "vect.md (addv2sf3, subv2sf3): Rewrite as expand.\n\n        * config/ia64/vect.md (addv2sf3, subv2sf3): Rewrite as expand.\n        (addv2sf3_1, addv2sf3_2, subv2sf3_1, subv2sf3_2): New.\n\nFrom-SVN: r104287", "tree": {"sha": "6091d772b68b02df0113f9e7db9be35410d8b337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6091d772b68b02df0113f9e7db9be35410d8b337"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47b71abba93b199cd4de360f826c3a271609e770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47b71abba93b199cd4de360f826c3a271609e770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47b71abba93b199cd4de360f826c3a271609e770", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47b71abba93b199cd4de360f826c3a271609e770/comments", "author": null, "committer": null, "parents": [{"sha": "5139c66bf8920652bad424c08dbc8825775d0a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5139c66bf8920652bad424c08dbc8825775d0a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5139c66bf8920652bad424c08dbc8825775d0a48"}], "stats": {"total": 91, "additions": 81, "deletions": 10}, "files": [{"sha": "a3dd7605b594dbf093208bd8b720b57d131677f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47b71abba93b199cd4de360f826c3a271609e770/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47b71abba93b199cd4de360f826c3a271609e770/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47b71abba93b199cd4de360f826c3a271609e770", "patch": "@@ -1,3 +1,8 @@\n+2005-09-14  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/vect.md (addv2sf3, subv2sf3): Rewrite as expand.\n+\t(addv2sf3_1, addv2sf3_2, subv2sf3_1, subv2sf3_2): New.\n+\n 2005-09-14  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* config/i386/i386.c (contains_128bit_aligned_vector_p): Add break"}, {"sha": "88e9eb275af7f95a7080d696a60d004b3a07c247", "filename": "gcc/config/ia64/vect.md", "status": "modified", "additions": 76, "deletions": 10, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47b71abba93b199cd4de360f826c3a271609e770/gcc%2Fconfig%2Fia64%2Fvect.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47b71abba93b199cd4de360f826c3a271609e770/gcc%2Fconfig%2Fia64%2Fvect.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvect.md?ref=47b71abba93b199cd4de360f826c3a271609e770", "patch": "@@ -793,30 +793,96 @@\n   \"fpnegabs %0 = %1\"\n   [(set_attr \"itanium_class\" \"fmisc\")])\n \n+;; In order to convince combine to merge plus and mult to a useful fpma,\n+;; we need a couple of extra patterns.\n (define_expand \"addv2sf3\"\n-  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"\")\n-\t(plus:V2SF\n-\t  (mult:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"\")\n-\t\t     (match_dup 3))\n-\t  (match_operand:V2SF 2 \"fr_register_operand\" \"\")))]\n+  [(parallel\n+    [(set (match_operand:V2SF 0 \"fr_register_operand\" \"\")\n+\t  (plus:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"\")\n+\t\t     (match_operand:V2SF 2 \"fr_register_operand\" \"\")))\n+     (use (match_dup 3))])]\n   \"\"\n {\n   rtvec v = gen_rtvec (2, CONST1_RTX (SFmode), CONST1_RTX (SFmode));\n   operands[3] = force_reg (V2SFmode, gen_rtx_CONST_VECTOR (V2SFmode, v));\n })\n \n+;; The split condition here could be combine_completed, if we had such.\n+(define_insn_and_split \"*addv2sf3_1\"\n+  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n+\t(plus:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n+\t\t   (match_operand:V2SF 2 \"fr_register_operand\" \"f\")))\n+   (use (match_operand:V2SF 3 \"fr_register_operand\" \"f\"))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(plus:V2SF\n+\t  (mult:V2SF (match_dup 1) (match_dup 3))\n+\t  (match_dup 2)))]\n+  \"\")\n+\n+(define_insn_and_split \"*addv2sf3_2\"\n+  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n+\t(plus:V2SF\n+\t  (mult:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n+\t\t     (match_operand:V2SF 2 \"fr_register_operand\" \"f\"))\n+\t  (match_operand:V2SF 3 \"fr_register_operand\" \"f\")))\n+    (use (match_operand:V2SF 4 \"\" \"X\"))]\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0)\n+\t(plus:V2SF\n+\t  (mult:V2SF (match_dup 1) (match_dup 2))\n+\t  (match_dup 3)))]\n+  \"\")\n+\n+;; In order to convince combine to merge minus and mult to a useful fpms,\n+;; we need a couple of extra patterns.\n (define_expand \"subv2sf3\"\n-  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"\")\n-\t(minus:V2SF\n-\t  (mult:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"\")\n-\t\t     (match_dup 3))\n-\t  (match_operand:V2SF 2 \"fr_register_operand\" \"\")))]\n+  [(parallel\n+    [(set (match_operand:V2SF 0 \"fr_register_operand\" \"\")\n+\t  (minus:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"\")\n+\t\t      (match_operand:V2SF 2 \"fr_register_operand\" \"\")))\n+     (use (match_dup 3))])]\n   \"\"\n {\n   rtvec v = gen_rtvec (2, CONST1_RTX (SFmode), CONST1_RTX (SFmode));\n   operands[3] = force_reg (V2SFmode, gen_rtx_CONST_VECTOR (V2SFmode, v));\n })\n \n+;; The split condition here could be combine_completed, if we had such.\n+(define_insn_and_split \"*subv2sf3_1\"\n+  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n+\t(minus:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n+\t\t    (match_operand:V2SF 2 \"fr_register_operand\" \"f\")))\n+   (use (match_operand:V2SF 3 \"fr_register_operand\" \"f\"))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup 0)\n+\t(minus:V2SF\n+\t  (mult:V2SF (match_dup 1) (match_dup 3))\n+\t  (match_dup 2)))]\n+  \"\")\n+\n+(define_insn_and_split \"*subv2sf3_2\"\n+  [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n+\t(minus:V2SF\n+\t  (mult:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\")\n+\t\t     (match_operand:V2SF 2 \"fr_register_operand\" \"f\"))\n+\t  (match_operand:V2SF 3 \"fr_register_operand\" \"f\")))\n+    (use (match_operand:V2SF 4 \"\" \"X\"))]\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0)\n+\t(minus:V2SF\n+\t  (mult:V2SF (match_dup 1) (match_dup 2))\n+\t  (match_dup 3)))]\n+  \"\")\n+\n (define_insn \"mulv2sf3\"\n   [(set (match_operand:V2SF 0 \"fr_register_operand\" \"=f\")\n \t(mult:V2SF (match_operand:V2SF 1 \"fr_register_operand\" \"f\")"}]}