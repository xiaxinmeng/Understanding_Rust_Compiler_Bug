{"sha": "d4e1b0727a0d795a7edc712032f1712197b70eb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRlMWIwNzI3YTBkNzk1YTdlZGM3MTIwMzJmMTcxMjE5N2I3MGViOA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2008-12-16T01:28:46Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-12-16T01:28:46Z"}, "message": "cstdatomic: Remove assert include.\n\n2008-12-15  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/c_global/cstdatomic: Remove assert include.\n\t* include/debug/debug.h: Consolidate __replacement_assert...\n\t* include/parallel/base.h: Consolidate __replacement_assert...\n\t* include/bits/c++config: ...here.\n\t* include/bits/atomic_0.h: Use it.\n\t* include/bits/atomic_2.h: Same.\n\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Adjust line numbers.\n\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Same.\n\nFrom-SVN: r142777", "tree": {"sha": "0ddd8ef160e7779b6bf96622500036dda475f5cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ddd8ef160e7779b6bf96622500036dda475f5cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4e1b0727a0d795a7edc712032f1712197b70eb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4e1b0727a0d795a7edc712032f1712197b70eb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4e1b0727a0d795a7edc712032f1712197b70eb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4e1b0727a0d795a7edc712032f1712197b70eb8/comments", "author": null, "committer": null, "parents": [{"sha": "f2d6c7fb16ad1ee580e466b135631ddcee2142a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d6c7fb16ad1ee580e466b135631ddcee2142a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d6c7fb16ad1ee580e466b135631ddcee2142a7"}], "stats": {"total": 233, "additions": 113, "deletions": 120}, "files": [{"sha": "882fef670fa580217567aadfeafe6899e7169090", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d4e1b0727a0d795a7edc712032f1712197b70eb8", "patch": "@@ -1,3 +1,14 @@\n+2008-12-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/c_global/cstdatomic: Remove assert include.\n+\t* include/debug/debug.h: Consolidate __replacement_assert...\n+\t* include/parallel/base.h: Consolidate __replacement_assert...\n+\t* include/bits/c++config: ...here.\n+\t* include/bits/atomic_0.h: Use it.\n+\t* include/bits/atomic_2.h: Same.\n+\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Adjust line numbers.\n+\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Same.\n+\n 2008-12-13  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* src/atomic.cc: Revert last change."}, {"sha": "fa91d1268eec264d45b5e083ce3a0591dd5d29be", "filename": "libstdc++-v3/include/bits/atomic_0.h", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h?ref=d4e1b0727a0d795a7edc712032f1712197b70eb8", "patch": "@@ -124,17 +124,17 @@ namespace __atomic0\n     void\n     store(void* __v, memory_order __m = memory_order_seq_cst) volatile\n     {\n-      // XXX\n-      //if (__m != memory_order_acquire && __m != memory_order_acq_rel\n-      // && __m != memory_order_consume)\n+      __glibcxx_assert(__m == memory_order_acquire);\n+      __glibcxx_assert(__m == memory_order_acq_rel);\n+      __glibcxx_assert(__m == memory_order_consume);\n       _ATOMIC_STORE_(this, __v, __m);\n     }\n \n     void*\n     load(memory_order __m = memory_order_seq_cst) const volatile\n     {\n-      // XXX\n-      //if (__m != memory_order_release && __m != memory_order_acq_rel)\n+      __glibcxx_assert(__m == memory_order_release);\n+      __glibcxx_assert(__m == memory_order_acq_rel);\n       return _ATOMIC_LOAD_(this, __m);\n     }\n \n@@ -146,11 +146,10 @@ namespace __atomic0\n     compare_exchange_weak(void*& __v1, void* __v2, memory_order __m1,\n \t\t\t  memory_order __m2) volatile\n     {\n-      bool __ret = false;\n-      if (__m2 != memory_order_release && __m2 != memory_order_acq_rel\n-\t  && __m2 <= __m1)\n-\t__ret = _ATOMIC_CMPEXCHNG_(this, &__v1, __v2, __m1);\n-      return __ret;\n+      __glibcxx_assert(__m2 == memory_order_release);\n+      __glibcxx_assert(__m2 == memory_order_acq_rel);\n+      __glibcxx_assert(__m2 <= __m1);\n+      return _ATOMIC_CMPEXCHNG_(this, &__v1, __v2, __m1);\n     }\n \n     bool\n@@ -165,11 +164,10 @@ namespace __atomic0\n     compare_exchange_strong(void*& __v1, void* __v2, memory_order __m1,\n \t\t\t    memory_order __m2) volatile\n     {\n-      bool __ret = false;\n-      if (__m2 != memory_order_release && __m2 != memory_order_acq_rel\n-\t  && __m2 <= __m1)\n-\t__ret = _ATOMIC_CMPEXCHNG_(this, &__v1, __v2, __m1);\n-      return __ret;\n+      __glibcxx_assert(__m2 == memory_order_release);\n+      __glibcxx_assert(__m2 == memory_order_acq_rel);\n+      __glibcxx_assert(__m2 <= __m1);\n+      return _ATOMIC_CMPEXCHNG_(this, &__v1, __v2, __m1);\n     }\n \n     bool\n@@ -317,16 +315,17 @@ namespace __atomic0\n       store(__integral_type __i,\n \t    memory_order __m = memory_order_seq_cst) volatile\n       {\n-\t// XXX\n-\t//if (__m != memory_order_acquire && __m != memory_order_acq_rel\n-\t//  && __m != memory_order_consume)\n+\t__glibcxx_assert(__m == memory_order_acquire);\n+\t__glibcxx_assert(__m == memory_order_acq_rel);\n+\t__glibcxx_assert(__m == memory_order_consume);\n \t_ATOMIC_STORE_(this, __i, __m);\n       }\n \n       __integral_type\n       load(memory_order __m = memory_order_seq_cst) const volatile\n       {\n-\t// if (__m != memory_order_release && __m != memory_order_acq_rel)\n+\t__glibcxx_assert(__m == memory_order_release);\n+\t__glibcxx_assert(__m == memory_order_acq_rel);\n \treturn _ATOMIC_LOAD_(this, __m);\n       }\n \n@@ -339,11 +338,10 @@ namespace __atomic0\n       compare_exchange_weak(__integral_type& __i1, __integral_type __i2,\n \t\t\t    memory_order __m1, memory_order __m2) volatile\n       {\n-\tbool __ret = false;\n-\tif (__m2 != memory_order_release && __m2 != memory_order_acq_rel\n-\t    && __m2 <= __m1)\n-\t  __ret = _ATOMIC_CMPEXCHNG_(this, &__i1, __i2, __m1);\n-\treturn __ret;\n+\t__glibcxx_assert(__m2 == memory_order_release);\n+\t__glibcxx_assert(__m2 == memory_order_acq_rel);\n+\t__glibcxx_assert(__m2 <= __m1);\n+\treturn _ATOMIC_CMPEXCHNG_(this, &__i1, __i2, __m1);\n       }\n \n       bool\n@@ -358,11 +356,10 @@ namespace __atomic0\n       compare_exchange_strong(__integral_type& __i1, __integral_type __i2,\n \t\t\t      memory_order __m1, memory_order __m2) volatile\n       {\n-\tbool __ret = false;\n-\tif (__m2 != memory_order_release && __m2 != memory_order_acq_rel\n-\t    && __m2 <= __m1)\n-\t  __ret = _ATOMIC_CMPEXCHNG_(this, &__i1, __i2, __m1);\n-\treturn __ret;\n+\t__glibcxx_assert(__m2 == memory_order_release);\n+\t__glibcxx_assert(__m2 == memory_order_acq_rel);\n+\t__glibcxx_assert(__m2 <= __m1);\n+\treturn _ATOMIC_CMPEXCHNG_(this, &__i1, __i2, __m1);\n       }\n \n       bool"}, {"sha": "2b9c1d579ca90223504a1458cdbf2cfa4a9779b4", "filename": "libstdc++-v3/include/bits/atomic_2.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h?ref=d4e1b0727a0d795a7edc712032f1712197b70eb8", "patch": "@@ -98,9 +98,9 @@ namespace __atomic2\n     void\n     store(void* __v, memory_order __m = memory_order_seq_cst) volatile\n     {\n-      assert(__m == memory_order_acquire);\n-      assert(__m == memory_order_acq_rel);\n-      assert(__m == memory_order_consume);\n+      __glibcxx_assert(__m == memory_order_acquire);\n+      __glibcxx_assert(__m == memory_order_acq_rel);\n+      __glibcxx_assert(__m == memory_order_consume);\n \n       if (__m == memory_order_relaxed)\n \t_M_i = __v;\n@@ -116,8 +116,8 @@ namespace __atomic2\n     void*\n     load(memory_order __m = memory_order_seq_cst) const volatile\n     {\n-      assert(__m == memory_order_release);\n-      assert(__m == memory_order_acq_rel);\n+      __glibcxx_assert(__m == memory_order_release);\n+      __glibcxx_assert(__m == memory_order_acq_rel);\n \n       __sync_synchronize();\n       void* __ret = _M_i;\n@@ -149,9 +149,9 @@ namespace __atomic2\n     compare_exchange_strong(void*& __v1, void* __v2, memory_order __m1,\n \t\t\t    memory_order __m2) volatile\n     {\n-      assert(__m2 == memory_order_release);\n-      assert(__m2 == memory_order_acq_rel);\n-      assert(__m2 <= __m1);\n+      __glibcxx_assert(__m2 == memory_order_release);\n+      __glibcxx_assert(__m2 == memory_order_acq_rel);\n+      __glibcxx_assert(__m2 <= __m1);\n \n       void* __v1o = __v1;\n       void* __v1n = __sync_val_compare_and_swap(&_M_i, __v1o, __v2);\n@@ -289,9 +289,9 @@ namespace __atomic2\n       store(__integral_type __i,\n \t    memory_order __m = memory_order_seq_cst) volatile\n       {\n-\tassert(__m == memory_order_acquire);\n-\tassert(__m == memory_order_acq_rel);\n-\tassert(__m == memory_order_consume);\n+\t__glibcxx_assert(__m == memory_order_acquire);\n+\t__glibcxx_assert(__m == memory_order_acq_rel);\n+\t__glibcxx_assert(__m == memory_order_consume);\n \n \tif (__m == memory_order_relaxed)\n \t  _M_i = __i;\n@@ -307,8 +307,8 @@ namespace __atomic2\n       __integral_type\n       load(memory_order __m = memory_order_seq_cst) const volatile\n       {\n-\tassert(__m == memory_order_release);\n-\tassert(__m == memory_order_acq_rel);\n+\t__glibcxx_assert(__m == memory_order_release);\n+\t__glibcxx_assert(__m == memory_order_acq_rel);\n \n \t__sync_synchronize();\n \t__integral_type __ret = _M_i;\n@@ -341,9 +341,9 @@ namespace __atomic2\n       compare_exchange_strong(__integral_type& __i1, __integral_type __i2,\n \t\t\t      memory_order __m1, memory_order __m2) volatile\n       {\n-\tassert(__m2 == memory_order_release);\n-\tassert(__m2 == memory_order_acq_rel);\n-\tassert(__m2 <= __m1);\n+\t__glibcxx_assert(__m2 == memory_order_release);\n+\t__glibcxx_assert(__m2 == memory_order_acq_rel);\n+\t__glibcxx_assert(__m2 <= __m1);\n \n \t__integral_type __i1o = __i1;\n \t__integral_type __i1n = __sync_val_compare_and_swap(&_M_i, __i1o, __i2);"}, {"sha": "2fa1eea2f15336767551c58bc877976cadd863a3", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=d4e1b0727a0d795a7edc712032f1712197b70eb8", "patch": "@@ -271,6 +271,34 @@ namespace std\n # define _GLIBCXX_WEAK_DEFINITION\n #endif\n \n+// Assert.\n+// Avoid the use of assert, because we're trying to keep the <cassert>\n+// include out of the mix.\n+#if !defined(_GLIBCXX_DEBUG) && !defined(_GLIBCXX_PARALLEL)\n+#define __glibcxx_assert(_Condition)\n+#else\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+  // Avoid the use of assert, because we're trying to keep the <cassert>\n+  // include out of the mix.\n+  inline void\n+  __replacement_assert(const char* __file, int __line, \n+\t\t       const char* __function, const char* __condition)\n+  {\n+    __builtin_printf(\"%s:%d: %s: Assertion '%s' failed.\\n\", __file, __line,\n+\t\t     __function, __condition);\n+    __builtin_abort();\n+  }\n+_GLIBCXX_END_NAMESPACE\n+\n+#define __glibcxx_assert(_Condition)                               \t\\\n+  do \t\t\t\t\t\t\t\t        \\\n+  {\t\t\t\t\t\t\t      \t\t\\\n+    if (! (_Condition))                                                 \\\n+      std::__replacement_assert(__FILE__, __LINE__, \t\t\t\\\n+\t\t\t\t__PRETTY_FUNCTION__, #_Condition);\t\\\n+  } while (false)\n+#endif\n+\n // The remainder of the prewritten config is automatic; all the\n // user hooks are listed above.\n "}, {"sha": "82d699b8e8109d82f29e4e1845155694c12f3edd", "filename": "libstdc++-v3/include/c_global/cstdatomic", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdatomic?ref=d4e1b0727a0d795a7edc712032f1712197b70eb8", "patch": "@@ -52,7 +52,6 @@\n \n #include <stdatomic.h>\n #include <cstddef>\n-#include <cassert> // XXX static_assert vs. constant-expression PR38502\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n "}, {"sha": "411fce04f1daf9eaca36666de09ba8ea52aba659", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=d4e1b0727a0d795a7edc712032f1712197b70eb8", "patch": "@@ -86,33 +86,9 @@ namespace __gnu_debug\n \n #else\n \n-# include <cstdio>\n # include <debug/macros.h>\n \n-namespace std\n-{\n-  namespace __debug\n-  { \n-    // Avoid the use of assert, because we're trying to keep the <cassert>\n-    // include out of the mix.\n-    inline void\n-    __replacement_assert(const char* __file, int __line, \n-\t\t\t const char* __function, const char* __condition)\n-    {\n-      printf(\"%s:%d: %s: Assertion '%s' failed.\\n\", __file, __line,\n-\t     __function, __condition);\n-      __builtin_abort();\n-    }\n-  } // namespace __debug\n-} // namespace std\n-\n-#define _GLIBCXX_DEBUG_ASSERT(_Condition)                                   \\\n-  do \t\t\t\t\t\t\t\t\t    \\\n-  {\t\t\t\t\t\t\t\t\t    \\\n-    if (! (_Condition))                                                     \\\n-      std::__debug::__replacement_assert(__FILE__, __LINE__,\t\t    \\\n-\t\t\t\t\t __PRETTY_FUNCTION__, #_Condition); \\\n-  } while (false)\n+#define _GLIBCXX_DEBUG_ASSERT(_Condition) __glibcxx_assert(_Condition)\n \n #ifdef _GLIBCXX_DEBUG_PEDANTIC\n # define _GLIBCXX_DEBUG_PEDASSERT(_Condition) _GLIBCXX_DEBUG_ASSERT(_Condition)"}, {"sha": "ad69bc24c5a446f29507e84fe02c778deb653983", "filename": "libstdc++-v3/include/parallel/base.h", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h?ref=d4e1b0727a0d795a7edc712032f1712197b70eb8", "patch": "@@ -38,7 +38,6 @@\n #ifndef _GLIBCXX_PARALLEL_BASE_H\n #define _GLIBCXX_PARALLEL_BASE_H 1\n \n-#include <cstdio>\n #include <functional>\n #include <omp.h>\n #include <parallel/features.h>\n@@ -471,24 +470,7 @@ template<typename RandomAccessIterator, typename Comparator>\n       }\n   }\n \n-// Avoid the use of assert, because we're trying to keep the <cassert>\n-// include out of the mix. (Same as debug mode).\n-inline void\n-__replacement_assert(const char* __file, int __line,\n-                     const char* __function, const char* __condition)\n-{\n-  std::printf(\"%s:%d: %s: Assertion '%s' failed.\\n\", __file, __line,\n-              __function, __condition);\n-  __builtin_abort();\n-}\n-\n-#define _GLIBCXX_PARALLEL_ASSERT(_Condition)                            \\\n-do \t\t\t\t\t\t\t\t        \\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (!(_Condition))\t\t\t\t\t\t   \t\\\n-      __gnu_parallel::__replacement_assert(__FILE__, __LINE__,\t\t\\\n-                                  __PRETTY_FUNCTION__, #_Condition);\t\\\n-  } while (false)\n+#define _GLIBCXX_PARALLEL_ASSERT(_Condition) __glibcxx_assert(_Condition)\n \n } //namespace __gnu_parallel\n "}, {"sha": "021d1fedd4b607e807f35e215e9bc833f4634daf", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/assign_neg.cc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc?ref=d4e1b0727a0d795a7edc712032f1712197b70eb8", "patch": "@@ -39,19 +39,19 @@ int main()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 510 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 240 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 258 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 276 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 294 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 312 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 330 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 348 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 366 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 384 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 402 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 420 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 438 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 456 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 474 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 492 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 239 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 257 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 275 } \n+// { dg-error \"deleted function\" \"\" { target *-*-* } 293 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 311 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 329 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 347 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 365 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 383 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 401 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 419 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 437 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 455 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 473 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 491 }\n // { dg-excess-errors \"In member function\" }"}, {"sha": "94022289152193830c44804012a5d86985ff4be2", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/copy_neg.cc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4e1b0727a0d795a7edc712032f1712197b70eb8/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc?ref=d4e1b0727a0d795a7edc712032f1712197b70eb8", "patch": "@@ -39,19 +39,19 @@ int main()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 549 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 239 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 257 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 275 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 293 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 311 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 329 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 347 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 365 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 383 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 401 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 419 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 437 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 455 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 473 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 491 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 238 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 256 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 274 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 292 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 310 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 328 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 346 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 364 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 382 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 400 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 418 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 436 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 454 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 472 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 490 }\n // { dg-excess-errors \"In member function\" }"}]}