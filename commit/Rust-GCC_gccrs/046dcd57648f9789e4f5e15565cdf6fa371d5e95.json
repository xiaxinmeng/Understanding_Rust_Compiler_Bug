{"sha": "046dcd57648f9789e4f5e15565cdf6fa371d5e95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ2ZGNkNTc2NDhmOTc4OWU0ZjVlMTU1NjVjZGY2ZmEzNzFkNWU5NQ==", "commit": {"author": {"name": "Feng Wang", "email": "fengwang@nudt.edu.cn", "date": "2004-10-03T13:27:06Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-10-03T13:27:06Z"}, "message": "trans-intrinsic.c: Fix comments on spacing and rrspacing\n\n2004-10-03  Feng Wang  <fengwang@nudt.edu.cn>\n\n\t* trans-intrinsic.c: Fix comments on spacing and rrspacing\n\t(gfc_conv_intrinsic_rrspacing): Add fold on constant trees.\n\nFrom-SVN: r88446", "tree": {"sha": "2e7df97295bd7ab9decba65d22636aa2bb58c20e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e7df97295bd7ab9decba65d22636aa2bb58c20e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/046dcd57648f9789e4f5e15565cdf6fa371d5e95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046dcd57648f9789e4f5e15565cdf6fa371d5e95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/046dcd57648f9789e4f5e15565cdf6fa371d5e95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046dcd57648f9789e4f5e15565cdf6fa371d5e95/comments", "author": null, "committer": null, "parents": [{"sha": "d3471d77afe1723d6886efa13bc314afed486c48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3471d77afe1723d6886efa13bc314afed486c48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3471d77afe1723d6886efa13bc314afed486c48"}], "stats": {"total": 54, "additions": 38, "deletions": 16}, "files": [{"sha": "32f964f2c24fa6dda8cb2753657a4b839c911b48", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046dcd57648f9789e4f5e15565cdf6fa371d5e95/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046dcd57648f9789e4f5e15565cdf6fa371d5e95/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=046dcd57648f9789e4f5e15565cdf6fa371d5e95", "patch": "@@ -1,3 +1,8 @@\n+2004-10-03  Feng Wang  <fengwang@nudt.edu.cn>\n+\n+\t* trans-intrinsic.c: Fix comments on spacing and rrspacing\n+\t(gfc_conv_intrinsic_rrspacing): Add fold on constant trees.\n+\n 2004-10-01  Jan Hubicka  <jh@suse.cz>\n \n \t* f95-lang.c (gfc_expand_function): Update call of"}, {"sha": "5aa2b351048feca74f1f0bb72f923570b9e04684", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/046dcd57648f9789e4f5e15565cdf6fa371d5e95/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/046dcd57648f9789e4f5e15565cdf6fa371d5e95/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=046dcd57648f9789e4f5e15565cdf6fa371d5e95", "patch": "@@ -138,8 +138,8 @@ typedef struct\n   tree smask;   /* Constant tree of sign's mask.  */\n   tree emask;   /* Constant tree of exponent's mask.  */\n   tree fmask;   /* Constant tree of fraction's mask.  */\n-  tree edigits; /* Constant tree of bit numbers of exponent.  */\n-  tree fdigits; /* Constant tree of bit numbers of fraction.  */\n+  tree edigits; /* Constant tree of the number of exponent bits.  */\n+  tree fdigits; /* Constant tree of the number of fraction bits.  */\n   tree f1;      /* Constant tree of the f1 defined in the real model.  */\n   tree bias;    /* Constant tree of the bias of exponent in the memory.  */\n   tree type;    /* Type tree of arg1.  */\n@@ -2409,13 +2409,17 @@ call_builtin_clz (tree result_type, tree op0)\n   return convert (result_type, call);\n }\n \n-/* Generate code for SPACING (X) intrinsic function. We generate:\n \n-    t = expn - (BITS_OF_FRACTION)\n-    res = t << (BITS_OF_FRACTION)\n-    if (t < 0)\n+/* Generate code for SPACING (X) intrinsic function.\n+   SPACING (X) = POW (2, e-p)\n+\n+   We generate:\n+                                                                                \n+    t = expn - fdigits // e - p.\n+    res = t << fdigits // Form the exponent. Fraction is zero.\n+    if (t < 0) // The result is out of range. Denormalized case.\n       res = tiny(X)\n-*/\n+ */\n \n static void\n gfc_conv_intrinsic_spacing (gfc_se * se, gfc_expr * expr)\n@@ -2444,21 +2448,34 @@ gfc_conv_intrinsic_spacing (gfc_se * se, gfc_expr * expr)\n    se->expr = tmp;\n }\n \n-/* Generate code for RRSPACING (X) intrinsic function. We generate:\n+/* Generate code for RRSPACING (X) intrinsic function.\n+   RRSPACING (X) = |X * POW (2, -e)| * POW (2, p) = |FRACTION (X)| * POW (2, p)\n+\n+   So the result's exponenet is p. And if X is normalized, X's fraction part\n+   is the result's fraction. If X is denormalized, to get the X's fraction we\n+   shift X's fraction part to left until the first '1' is removed.\n+   \n+   We generate:\n \n     if (expn == 0 && frac == 0)\n        res = 0;\n     else\n     {\n+       // edigits is the number of exponent bits. Add the sign bit.\n        sedigits = edigits + 1;\n-       if (expn == 0)\n+\n+       if (expn == 0) // Denormalized case.\n        {\n          t1 = leadzero (frac);\n-         frac = frac << (t1 + sedigits);\n-         frac = frac >> (sedigits);\n+         frac = frac << (t1 + 1); //Remove the first '1'.\n+         frac = frac >> (sedigits); //Form the fraction.\n        }\n-       t = bias + BITS_OF_FRACTION_OF;\n-       res = (t << BITS_OF_FRACTION_OF) | frac;\n+\n+       //fdigits is the number of fraction bits. Form the exponent.\n+       t = bias + fdigits;\n+\n+       res = (t << fdigits) | frac;\n+    }\n */\n \n static void\n@@ -2476,7 +2493,7 @@ gfc_conv_intrinsic_rrspacing (gfc_se * se, gfc_expr * expr)\n    fraction = rcs.frac;\n    one = gfc_build_const (masktype, integer_one_node);\n    zero = gfc_build_const (masktype, integer_zero_node);\n-   t2 = build2 (PLUS_EXPR, masktype, rcs.edigits, one);\n+   t2 = fold (build2 (PLUS_EXPR, masktype, rcs.edigits, one));\n \n    t1 = call_builtin_clz (masktype, fraction);\n    tmp = build2 (PLUS_EXPR, masktype, t1, one);\n@@ -2485,8 +2502,8 @@ gfc_conv_intrinsic_rrspacing (gfc_se * se, gfc_expr * expr)\n    cond = build2 (EQ_EXPR, boolean_type_node, rcs.expn, zero);\n    fraction = build3 (COND_EXPR, masktype, cond, tmp, fraction);\n \n-   tmp = build2 (PLUS_EXPR, masktype, rcs.bias, fdigits);\n-   tmp = build2 (LSHIFT_EXPR, masktype, tmp, fdigits);\n+   tmp = fold (build2 (PLUS_EXPR, masktype, rcs.bias, fdigits));\n+   tmp = fold (build2 (LSHIFT_EXPR, masktype, tmp, fdigits));\n    tmp = build2 (BIT_IOR_EXPR, masktype, tmp, fraction);\n \n    cond2 = build2 (EQ_EXPR, boolean_type_node, rcs.frac, zero);"}]}