{"sha": "9d5c21c1f0bc3888f494dc9114e27570646c0a8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ1YzIxYzFmMGJjMzg4OGY0OTRkYzkxMTRlMjc1NzA2NDZjMGE4Zg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-06-17T18:08:24Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-06-17T18:08:24Z"}, "message": "re PR fortran/34396 (Length of substrings defined by expressions not correctly computed in constructors)\n\n2008-06-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/34396\n\t* resolve.c (add_dt_to_dt_list):  New function.\n\t(resolve_fl_derived): Call new function for pointer components\n\tand when derived type resolved.\n\n2008-06-17  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/36366\n\t* gfortran.dg/used_types_20.f90: New test.\n\nFrom-SVN: r136871", "tree": {"sha": "777ff3563d772b7c13c9ab6364690ee01d5f088d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/777ff3563d772b7c13c9ab6364690ee01d5f088d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d5c21c1f0bc3888f494dc9114e27570646c0a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d5c21c1f0bc3888f494dc9114e27570646c0a8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d5c21c1f0bc3888f494dc9114e27570646c0a8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d5c21c1f0bc3888f494dc9114e27570646c0a8f/comments", "author": null, "committer": null, "parents": [{"sha": "e416eb8f028f20ae4eb1f7b7beeee64715c342d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e416eb8f028f20ae4eb1f7b7beeee64715c342d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e416eb8f028f20ae4eb1f7b7beeee64715c342d8"}], "stats": {"total": 105, "additions": 93, "deletions": 12}, "files": [{"sha": "1bf3c931734f5c8e75df4ae2169c462368af3523", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5c21c1f0bc3888f494dc9114e27570646c0a8f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5c21c1f0bc3888f494dc9114e27570646c0a8f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9d5c21c1f0bc3888f494dc9114e27570646c0a8f", "patch": "@@ -1,3 +1,10 @@\n+2008-06-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/34396\n+\t* resolve.c (add_dt_to_dt_list):  New function.\n+\t(resolve_fl_derived): Call new function for pointer components\n+\tand when derived type resolved.\n+\n 2008-06-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/36515"}, {"sha": "37bafd091b7d43adc1c1ddf8311bafd2695bcb47", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 32, "deletions": 12, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5c21c1f0bc3888f494dc9114e27570646c0a8f/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5c21c1f0bc3888f494dc9114e27570646c0a8f/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=9d5c21c1f0bc3888f494dc9114e27570646c0a8f", "patch": "@@ -7586,13 +7586,33 @@ gfc_resolve_finalizers (gfc_symbol* derived)\n }\n \n \n+/* Add a derived type to the dt_list.  The dt_list is used in trans-types.c\n+   to give all identical derived types the same backend_decl.  */\n+static void\n+add_dt_to_dt_list (gfc_symbol *derived)\n+{\n+  gfc_dt_list *dt_list;\n+\n+  for (dt_list = gfc_derived_types; dt_list; dt_list = dt_list->next)\n+    if (derived == dt_list->derived)\n+      break;\n+\n+  if (dt_list == NULL)\n+    {\n+      dt_list = gfc_get_dt_list ();\n+      dt_list->next = gfc_derived_types;\n+      dt_list->derived = derived;\n+      gfc_derived_types = dt_list;\n+    }\n+}\n+\n+\n /* Resolve the components of a derived type.  */\n \n static try\n resolve_fl_derived (gfc_symbol *sym)\n {\n   gfc_component *c;\n-  gfc_dt_list * dt_list;\n   int i;\n \n   for (c = sym->components; c != NULL; c = c->next)\n@@ -7644,6 +7664,16 @@ resolve_fl_derived (gfc_symbol *sym)\n \t  return FAILURE;\n \t}\n \n+      /* Ensure that all the derived type components are put on the\n+\t derived type list; even in formal namespaces, where derived type\n+\t pointer components might not have been declared.  */\n+      if (c->ts.type == BT_DERIVED\n+\t    && c->ts.derived\n+\t    && c->ts.derived->components\n+\t    && c->pointer\n+\t    && sym != c->ts.derived)\n+\tadd_dt_to_dt_list (c->ts.derived);\n+\n       if (c->pointer || c->allocatable ||  c->as == NULL)\n \tcontinue;\n \n@@ -7669,17 +7699,7 @@ resolve_fl_derived (gfc_symbol *sym)\n     return FAILURE;\n \n   /* Add derived type to the derived type list.  */\n-  for (dt_list = gfc_derived_types; dt_list; dt_list = dt_list->next)\n-    if (sym == dt_list->derived)\n-      break;\n-\n-  if (dt_list == NULL)\n-    {\n-      dt_list = gfc_get_dt_list ();\n-      dt_list->next = gfc_derived_types;\n-      dt_list->derived = sym;\n-      gfc_derived_types = dt_list;\n-    }\n+  add_dt_to_dt_list (sym);\n \n   return SUCCESS;\n }"}, {"sha": "4f29172dfceb12dcca813f293c39bd1026397edc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5c21c1f0bc3888f494dc9114e27570646c0a8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5c21c1f0bc3888f494dc9114e27570646c0a8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d5c21c1f0bc3888f494dc9114e27570646c0a8f", "patch": "@@ -1,3 +1,8 @@\n+2008-06-17  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/36366\n+\t* gfortran.dg/used_types_20.f90: New test.\n+\n 2008-06-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/36546"}, {"sha": "c08235c67f297b3ac433a8cc49bf533a116987ed", "filename": "gcc/testsuite/gfortran.dg/used_types_20.f90", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5c21c1f0bc3888f494dc9114e27570646c0a8f/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5c21c1f0bc3888f494dc9114e27570646c0a8f/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_20.f90?ref=9d5c21c1f0bc3888f494dc9114e27570646c0a8f", "patch": "@@ -0,0 +1,49 @@\n+! { dg-do compile }\n+! Tests the fix for PR36366 a regression in which the order of USE statements\n+! in 'test2' would cause the result of 'test1' not to have a reference to\n+! the derived type 'inner'.\n+!\n+! Contributed by Jakub Jelinek <jakub@gcc.gnu.org>\n+!\n+MODULE types\n+  IMPLICIT NONE\n+  TYPE :: inner\n+    INTEGER, POINTER :: i(:)\n+  END TYPE inner\n+\n+  TYPE :: outer\n+    TYPE(inner), POINTER :: inr(:)\n+  END TYPE outer\n+END MODULE types\n+\n+MODULE mymod\n+  IMPLICIT NONE\n+CONTAINS\n+  FUNCTION test1()\n+    USE types\n+    IMPLICIT NONE\n+    TYPE(outer), POINTER :: test1\n+    NULLIFY(test1)\n+  END FUNCTION test1\n+END MODULE mymod\n+\n+MODULE test\n+  IMPLICIT NONE\n+CONTAINS\n+\n+  SUBROUTINE test2(a)\n+    USE mymod\n+    USE types\n+    IMPLICIT NONE\n+    TYPE(outer), INTENT(INOUT) :: a\n+    INTEGER :: i\n+    i = a%inr(1)%i(1)\n+  END SUBROUTINE test2\n+\n+  SUBROUTINE test3(a)\n+    USE types\n+    IMPLICIT NONE\n+    TYPE(outer), INTENT(IN) :: a\n+  END SUBROUTINE test3\n+END MODULE test\n+! { dg-final { cleanup-modules \"types mymod test\" } }"}]}