{"sha": "b18135da4e035ff2e10348590781d8bd37d18964", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE4MTM1ZGE0ZTAzNWZmMmUxMDM0ODU5MDc4MWQ4YmQzN2QxODk2NA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-31T22:46:19Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-31T22:46:19Z"}, "message": "entered into RCS\n\nFrom-SVN: r651", "tree": {"sha": "7f768ad18541c66080872dff9c54710d3f76812e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f768ad18541c66080872dff9c54710d3f76812e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b18135da4e035ff2e10348590781d8bd37d18964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b18135da4e035ff2e10348590781d8bd37d18964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b18135da4e035ff2e10348590781d8bd37d18964", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b18135da4e035ff2e10348590781d8bd37d18964/comments", "author": null, "committer": null, "parents": [{"sha": "43855b285f2bd75185cf28329e74fae7b35b9372", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43855b285f2bd75185cf28329e74fae7b35b9372", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43855b285f2bd75185cf28329e74fae7b35b9372"}], "stats": {"total": 99, "additions": 70, "deletions": 29}, "files": [{"sha": "e8cdc0816005d6e258fe884841049505cc136757", "filename": "gcc/config/m68k/apollo68.h", "status": "modified", "additions": 57, "deletions": 29, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b18135da4e035ff2e10348590781d8bd37d18964/gcc%2Fconfig%2Fm68k%2Fapollo68.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b18135da4e035ff2e10348590781d8bd37d18964/gcc%2Fconfig%2Fm68k%2Fapollo68.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fapollo68.h?ref=b18135da4e035ff2e10348590781d8bd37d18964", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Apollo 680X0 version.\n-   Copyright (C) 1989 Free Software Foundation, Inc.\n+   Copyright (C) 1989,1992 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -90,13 +90,10 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #define DOLLARS_IN_IDENTIFIERS 2\n \n-/* -m68000 requires special flags to the assembler.\n-   The -C flag is passed to a modified GNU assembler to cause COFF\n-   modules to be produced.  Remove it if you're not using this.\n-   (See vasta@apollo.com.)  */\n+/* -m68000 requires special flags to the assembler.  */\n \n #define ASM_SPEC \\\n- \"-C %{m68000:-mc68010}%{mc68000:-mc68010}%{!mc68000:%{!m68000:-mc68020}}\"\n+ \"%{m68000:-mc68010}%{mc68000:-mc68010}%{!mc68000:%{!m68000:-mc68020}}\"\n \n /* STARTFILE_SPEC\n    Note that includes knowledge of the default specs for gcc, ie. no\n@@ -122,41 +119,35 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef DBX_DEBUGGING_INFO\n #undef SDB_DEBUGGING_INFO\n \n+/* We have atexit(2).  So C++ can use it for global destructors.  */\n+\n+#define HAVE_ATEXIT\n+\n /* Every structure or union's size must be a multiple of 2 bytes.  */\n \n #define STRUCTURE_SIZE_BOUNDARY 16\n \n+/* Boundary (in *bits*) on which stack pointer should be aligned.  */\n+#undef STACK_BOUNDARY\n+#define STACK_BOUNDARY 32\n+\n /* Functions which return large structures get the address\n-   to place the wanted value at offset 8 from the frame.  */\n+   to place the wanted value from a hidden parameter.  */\n \n #undef  PCC_STATIC_STRUCT_RETURN\n #undef  STRUCT_VALUE_REGNUM\n-\n-/* Caller treats address of return area like a parm.  */\n #define STRUCT_VALUE 0\n-\n-#define STRUCT_VALUE_INCOMING \\\n-  gen_rtx (MEM, Pmode,\t\t\t\t\t\\\n-\t   gen_rtx (PLUS, SImode, frame_pointer_rtx,\t\\\n-\t\t    gen_rtx (CONST_INT, VOIDmode, 8)))\n-\n-/* Boundary (in *bits*) on which stack pointer should be aligned.  */\n-#undef STACK_BOUNDARY\n-#define STACK_BOUNDARY 32\n+#define STRUCT_VALUE_INCOMING 0\n \n /* Specify how to pad function arguments.\n    Arguments are not padded at all; the stack is kept aligned on long\n    boundaries. */\n \n #define FUNCTION_ARG_PADDING(mode, size) none\n \n-/* Short integral argument prototype promotion is not done */\n-\n-#undef  PROMOTE_PROTOTYPES\n-\n /* The definition of this macro imposes a limit on the size of\n    an aggregate object which can be treated as if it were a scalar\n-   object. */\n+   object.  */\n \n #define MAX_FIXED_MODE_SIZE    BITS_PER_WORD\n \n@@ -169,12 +160,49 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define RETURN_IN_MEMORY(type) \\\n   (GET_MODE_SIZE (TYPE_MODE (type)) > UNITS_PER_WORD)\n \n-/* This is how to output a reference to a user-level label named NAME.\n-   In order to link to Apollo libraries, no underscore is prepended to names.\n-   `assemble_name' uses this.  */\n+/* In order to link with Apollo libraries, we can't prefix external\n+   symbols with an underscore.  */\n+\n+#undef  USER_LABEL_PREFIX\n+\n+/* Use a prefix for local labels, just to be on the save side.  */\n+\n+#undef LOCAL_LABEL_PREFIX\n+#define LOCAL_LABEL_PREFIX \".\"\n+\n+/* Use a register prefix to avoid clashes with external symbols (classic\n+   example: `extern char PC;' in termcap).  */\n+\n+#undef REGISTER_PREFIX\n+#define REGISTER_PREFIX \"%\"\n+\n+/* In the machine description we can't use %R, because it will not be seen\n+   by ASM_FPRINTF.  (Isn't that a design bug?).  */\n+\n+#undef REGISTER_PREFIX_MD\n+#define REGISTER_PREFIX_MD \"%%\"\n+\n+/* config/m68k.md has an explicit reference to the program counter,\n+   prefix this by the register prefix.  */\n+\n+#define ASM_RETURN_CASE_JUMP    return \"jmp %%pc@(2,%0:w)\"\n \n-#undef  ASM_OUTPUT_LABELREF\n-#define ASM_OUTPUT_LABELREF(FILE,NAME)\t\\\n-  fprintf (FILE, \"%s\", NAME)\n \n+/* Here are the new register names.  */\n \n+#undef REGISTER_NAMES\n+#ifndef SUPPORT_SUN_FPA\n+#define REGISTER_NAMES \\\n+{\"%d0\", \"%d1\", \"%d2\", \"%d3\", \"%d4\", \"%d5\", \"%d6\", \"%d7\",\t\\\n+ \"%a0\", \"%a1\", \"%a2\", \"%a3\", \"%a4\", \"%a5\", \"%a6\", \"%sp\",\t\\\n+ \"%fp0\", \"%fp1\", \"%fp2\", \"%fp3\", \"%fp4\", \"%fp5\", \"%fp6\", \"%fp7\" }\n+#else /* SUPPORTED_SUN_FPA */\n+#define REGISTER_NAMES \\\n+{\"%d0\", \"%d1\", \"%d2\", \"%d3\", \"%d4\", \"%d5\", \"%d6\", \"%d7\",\t\\\n+ \"%a0\", \"%a1\", \"%a2\", \"%a3\", \"%a4\", \"%a5\", \"%a6\", \"%sp\",\t\\\n+ \"%fp0\", \"%fp1\", \"%fp2\", \"%fp3\", \"%fp4\", \"%fp5\", \"%fp6\", \"%fp7\", \\\n+ \"%fpa0\", \"%fpa1\", \"%fpa2\", \"%fpa3\", \"%fpa4\", \"%fpa5\", \"%fpa6\", \"%fpa7\", \\\n+ \"%fpa8\", \"%fpa9\", \"%fpa10\", \"%fpa11\", \"%fpa12\", \"%fpa13\", \"%fpa14\", \"%fpa15\", \\\n+ \"%fpa16\", \"%fpa17\", \"%fpa18\", \"%fpa19\", \"%fpa20\", \"%fpa21\", \"%fpa22\", \"%fpa23\", \\\n+ \"%fpa24\", \"%fpa25\", \"%fpa26\", \"%fpa27\", \"%fpa28\", \"%fpa29\", \"%fpa30\", \"%fpa31\" }\n+#endif /* defined SUPPORT_SUN_FPA */"}, {"sha": "958259ac7e69c1812232c4eb046ee135e67ea985", "filename": "gcc/config/m68k/x-apollo68", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b18135da4e035ff2e10348590781d8bd37d18964/gcc%2Fconfig%2Fm68k%2Fx-apollo68", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b18135da4e035ff2e10348590781d8bd37d18964/gcc%2Fconfig%2Fm68k%2Fx-apollo68", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fx-apollo68?ref=b18135da4e035ff2e10348590781d8bd37d18964", "patch": "@@ -1,4 +1,17 @@\n+# x-apollo68 -- 680x0 based Apollos as host system\n+\n # vasta@apollo.com says this is how to compile on an Apollo (SR10.x).\n # Use a Berkeley environment.\n CC=cc -g -A nansi -A cpu,3000 -A runtype,bsd4.3 -A systype,any -DSHORT_ENUM_BUG\n OLDCC=cc -g -A nansi -A cpu,3000 -A runtype,bsd4.3 -A systype,any -DSHORT_ENUM_BUG\n+\n+# Makefile.in has debugging turned on:\n+#\n+#    CFLAGS = -g\n+#    LIBGCC2_CFLAGS = -O2 $(GCC_CFLAGS) -g1\n+#\n+# but that's not supported on the Apollo yet, so we'd better avoid\n+# the warnings.\n+\n+CFLAGS =\n+LIBGCC2_CFLAGS = -O2 $(GCC_CFLAGS)"}]}