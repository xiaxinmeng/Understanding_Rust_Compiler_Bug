{"sha": "ffcfcb5fd9058825f8a4be55adbd70c0841b0d22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZjZmNiNWZkOTA1ODgyNWY4YTRiZTU1YWRiZDcwYzA4NDFiMGQyMg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2003-03-18T02:28:46Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2003-03-18T02:28:46Z"}, "message": "linux64.h (MASK_PROFILE_KERNEL): Define.\n\n\t* config/rs6000/linux64.h (MASK_PROFILE_KERNEL): Define.\n\t(TARGET_PROFILE_KERNEL): Define.\n\t(SUBTARGET_SWITCHES): Handle -mprofile-kernel.\n\t(PROFILE_BEFORE_PROLOGUE): Don't define.\n\t(PROFILE_KERNEL): Remove hacks.\n\t* config/rs6000/rs6000.c (TARGET_PROFILE_KERNEL): Define default.\n\t(rs6000_stack_info): No need to save lr if just for profiling when\n\tTARGET_KERNEL_PROFILE.\n\t(output_profile_hook): Output nothing when TARGET_KERNEL_PROFILE.\n\t(output_function_profiler): Localize label generation.  Emit code\n\tfor kernel profiling.\n\nFrom-SVN: r64519", "tree": {"sha": "f6c20c7ef890974dd12683dcabb182145fb1a63b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6c20c7ef890974dd12683dcabb182145fb1a63b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffcfcb5fd9058825f8a4be55adbd70c0841b0d22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffcfcb5fd9058825f8a4be55adbd70c0841b0d22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffcfcb5fd9058825f8a4be55adbd70c0841b0d22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffcfcb5fd9058825f8a4be55adbd70c0841b0d22/comments", "author": null, "committer": null, "parents": [{"sha": "9b98dc747728800939ca4fdacf9ede119189cbe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b98dc747728800939ca4fdacf9ede119189cbe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b98dc747728800939ca4fdacf9ede119189cbe0"}], "stats": {"total": 77, "additions": 61, "deletions": 16}, "files": [{"sha": "eaf09942c84b3fc417fc0748f7396d7ed9e1803f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffcfcb5fd9058825f8a4be55adbd70c0841b0d22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffcfcb5fd9058825f8a4be55adbd70c0841b0d22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffcfcb5fd9058825f8a4be55adbd70c0841b0d22", "patch": "@@ -1,3 +1,17 @@\n+2003-03-18  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/linux64.h (MASK_PROFILE_KERNEL): Define.\n+\t(TARGET_PROFILE_KERNEL): Define.\n+\t(SUBTARGET_SWITCHES): Handle -mprofile-kernel.\n+\t(PROFILE_BEFORE_PROLOGUE): Don't define.\n+\t(PROFILE_KERNEL): Remove hacks.\n+\t* config/rs6000/rs6000.c (TARGET_PROFILE_KERNEL): Define default.\n+\t(rs6000_stack_info): No need to save lr if just for profiling when\n+\tTARGET_KERNEL_PROFILE.\n+\t(output_profile_hook): Output nothing when TARGET_KERNEL_PROFILE.\n+\t(output_function_profiler): Localize label generation.  Emit code\n+\tfor kernel profiling.\n+\n 2003-03-17  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300-protos.h: Add a prototype for"}, {"sha": "be03b3b65b1b728a2b66bde6ce43c34d93ce2de6", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffcfcb5fd9058825f8a4be55adbd70c0841b0d22/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffcfcb5fd9058825f8a4be55adbd70c0841b0d22/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=ffcfcb5fd9058825f8a4be55adbd70c0841b0d22", "patch": "@@ -63,6 +63,15 @@ Boston, MA 02111-1307, USA.  */\n #undef\tTARGET_PROTOTYPE\n #define\tTARGET_PROTOTYPE\t0\n \n+/* Reuse sysv4 mask bits we made available above.  */\n+#define\tMASK_PROFILE_KERNEL\t0x08000000\n+\n+/* Non-standard profiling for kernels, which just saves LR then calls\n+   _mcount without worrying about arg saves.  The idea is to change\n+   the function prologue as little as possible as it isn't easy to\n+   account for arg save/restore code added just for _mcount.  */\n+#define TARGET_PROFILE_KERNEL\t(target_flags & MASK_PROFILE_KERNEL)\n+\n /* Override sysv4.h.  */\n #undef\tSUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n@@ -89,7 +98,11 @@ Boston, MA 02111-1307, USA.  */\n   {\"regnames\",\t\t MASK_REGNAMES,\t\t\t\t\t\\\n     N_(\"Use alternate register names\") },\t\t\t\t\\\n   {\"no-regnames\",\t-MASK_REGNAMES,\t\t\t\t\t\\\n-    N_(\"Don't use alternate register names\") },\n+    N_(\"Don't use alternate register names\") },\t\t\t\t\\\n+  {\"profile-kernel\",\t MASK_PROFILE_KERNEL,\t\t\t\t\\\n+   N_(\"Call mcount for profiling before a function prologue\") },\t\\\n+  {\"no-profile-kernel\",\t-MASK_PROFILE_KERNEL,\t\t\t\t\\\n+   N_(\"Call mcount for profiling after a function prologue\") },\n \n #undef\tSUBTARGET_OPTIONS\n #define\tSUBTARGET_OPTIONS\n@@ -99,19 +112,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* We use glibc _mcount for profiling.  */\n #define NO_PROFILE_COUNTERS 1\n-#undef  PROFILE_BEFORE_PROLOGUE\n-\n-/* Define this for kernel profiling, which just saves LR then calls\n-   _mcount without worrying about arg saves.  The idea is to change\n-   the function prologue as little as possible as it isn't easy to\n-   account for arg save/restore code added just for _mcount.  */\n-/* #define PROFILE_KERNEL 1 */\n-#if PROFILE_KERNEL\n-#define PROFILE_BEFORE_PROLOGUE 1\n-#undef  PROFILE_HOOK\n-#else\n #define PROFILE_HOOK(LABEL) output_profile_hook (LABEL)\n-#endif\n \n /* We don't need to generate entries in .fixup.  */\n #undef RELOCATABLE_NEEDS_FIXUP"}, {"sha": "4b7fefd66502d40ac990cb3fea03b5b3efa7014d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffcfcb5fd9058825f8a4be55adbd70c0841b0d22/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffcfcb5fd9058825f8a4be55adbd70c0841b0d22/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ffcfcb5fd9058825f8a4be55adbd70c0841b0d22", "patch": "@@ -335,6 +335,9 @@ static const char alt_reg_names[][8] =\n #ifndef MASK_STRICT_ALIGN\n #define MASK_STRICT_ALIGN 0\n #endif\n+#ifndef TARGET_PROFILE_KERNEL\n+#define TARGET_PROFILE_KERNEL 0\n+#endif\n \n /* The VRSAVE bitmask puts bit %v0 as the most significant bit.  */\n #define ALTIVEC_REG_BIT(REGNO) (0x80000000 >> ((REGNO) - FIRST_ALTIVEC_REGNO))\n@@ -9225,7 +9228,9 @@ rs6000_stack_info ()\n \n   /* Determine if we need to save the link register.  */\n   if (rs6000_ra_ever_killed ()\n-      || (DEFAULT_ABI == ABI_AIX && current_function_profile)\n+      || (DEFAULT_ABI == ABI_AIX\n+\t  && current_function_profile\n+\t  && !TARGET_PROFILE_KERNEL)\n #ifdef TARGET_RELOCATABLE\n       || (TARGET_RELOCATABLE && (get_pool_size () != 0))\n #endif\n@@ -12234,6 +12239,9 @@ void\n output_profile_hook (labelno)\n      int labelno ATTRIBUTE_UNUSED;\n {\n+  if (TARGET_PROFILE_KERNEL)\n+    return;\n+\n   if (DEFAULT_ABI == ABI_AIX)\n     {\n #ifdef NO_PROFILE_COUNTERS\n@@ -12285,7 +12293,6 @@ output_function_profiler (file, labelno)\n   char buf[100];\n   int save_lr = 8;\n \n-  ASM_GENERATE_INTERNAL_LABEL (buf, \"LP\", labelno);\n   switch (DEFAULT_ABI)\n     {\n     default:\n@@ -12301,6 +12308,7 @@ output_function_profiler (file, labelno)\n \t  warning (\"no profiling of 64-bit code for this ABI\");\n \t  return;\n \t}\n+      ASM_GENERATE_INTERNAL_LABEL (buf, \"LP\", labelno);\n       fprintf (file, \"\\tmflr %s\\n\", reg_names[0]);\n       if (flag_pic == 1)\n \t{\n@@ -12355,7 +12363,29 @@ output_function_profiler (file, labelno)\n \n     case ABI_AIX:\n     case ABI_DARWIN:\n-      /* Don't do anything, done in output_profile_hook ().  */\n+      if (!TARGET_PROFILE_KERNEL)\n+\t{\n+\t  /* Don't do anything, done in output_profile_hook (). */\n+\t}\n+      else\n+\t{\n+\t  if (TARGET_32BIT)\n+\t    abort ();\n+\n+\t  asm_fprintf (file, \"\\tmflr %s\\n\", reg_names[0]);\n+\t  asm_fprintf (file, \"\\tstd %s,16(%s)\\n\", reg_names[0], reg_names[1]);\n+\n+\t  if (current_function_needs_context)\n+\t    {\n+\t      asm_fprintf (file, \"\\tstd %s,24(%s)\\n\",\n+\t\t\t   reg_names[STATIC_CHAIN_REGNUM], reg_names[1]);\n+\t      fprintf (file, \"\\tbl %s\\n\", RS6000_MCOUNT);\n+\t      asm_fprintf (file, \"\\tld %s,24(%s)\\n\",\n+\t\t\t   reg_names[STATIC_CHAIN_REGNUM], reg_names[1]);\n+\t    }\n+\t  else\n+\t    fprintf (file, \"\\tbl %s\\n\", RS6000_MCOUNT);\n+\t}\n       break;\n     }\n }"}]}