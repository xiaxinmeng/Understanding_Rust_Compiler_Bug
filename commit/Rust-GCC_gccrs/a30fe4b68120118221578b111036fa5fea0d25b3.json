{"sha": "a30fe4b68120118221578b111036fa5fea0d25b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMwZmU0YjY4MTIwMTE4MjIxNTc4YjExMTAzNmZhNWZlYTBkMjViMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-10-07T10:06:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-10-07T10:06:24Z"}, "message": "bitmap.c (bitmap_elem_to_freelist): Set indx to -1.\n\n2016-10-07  Richard Biener  <rguenther@suse.de>\n\n\t* bitmap.c (bitmap_elem_to_freelist): Set indx to -1.\n\t* bitmap.h (bmp_iter_set): When advancing to the next element\n\tcheck that we didn't remove the current one.\n\t(bmp_iter_and): Likewise.\n\t(bmp_iter_and_compl): Likewise.\n\t* tree-ssa.c (release_defs_bitset): Do not remove worklist bit\n\twe currently iterate on but keep a one-level queue.\n\t* sched-deps.c (remove_from_deps): Do not clear current bit\n\tbut keep a one-level queue.\n\nFrom-SVN: r240859", "tree": {"sha": "b23b27954b915b8b7d050e18c30416a85b78a564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b23b27954b915b8b7d050e18c30416a85b78a564"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a30fe4b68120118221578b111036fa5fea0d25b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30fe4b68120118221578b111036fa5fea0d25b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a30fe4b68120118221578b111036fa5fea0d25b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30fe4b68120118221578b111036fa5fea0d25b3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a93cdc5c6f1d56226c3ef7b69423a4074783de34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93cdc5c6f1d56226c3ef7b69423a4074783de34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a93cdc5c6f1d56226c3ef7b69423a4074783de34"}], "stats": {"total": 140, "additions": 94, "deletions": 46}, "files": [{"sha": "56e5fd9a1b5e4f1f7d50cfa79992b8c7ddeec98c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30fe4b68120118221578b111036fa5fea0d25b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30fe4b68120118221578b111036fa5fea0d25b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a30fe4b68120118221578b111036fa5fea0d25b3", "patch": "@@ -1,3 +1,15 @@\n+2016-10-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* bitmap.c (bitmap_elem_to_freelist): Set indx to -1.\n+\t* bitmap.h (bmp_iter_set): When advancing to the next element\n+\tcheck that we didn't remove the current one.\n+\t(bmp_iter_and): Likewise.\n+\t(bmp_iter_and_compl): Likewise.\n+\t* tree-ssa.c (release_defs_bitset): Do not remove worklist bit\n+\twe currently iterate on but keep a one-level queue.\n+\t* sched-deps.c (remove_from_deps): Do not clear current bit\n+\tbut keep a one-level queue.\n+\n 2016-10-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/77664"}, {"sha": "1a32332439fa48550674dc73c8d559bb2690055c", "filename": "gcc/bitmap.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30fe4b68120118221578b111036fa5fea0d25b3/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30fe4b68120118221578b111036fa5fea0d25b3/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=a30fe4b68120118221578b111036fa5fea0d25b3", "patch": "@@ -66,6 +66,7 @@ bitmap_elem_to_freelist (bitmap head, bitmap_element *elt)\n   bitmap_obstack *bit_obstack = head->obstack;\n \n   elt->next = NULL;\n+  elt->indx = -1;\n   if (bit_obstack)\n     {\n       elt->prev = bit_obstack->elements;"}, {"sha": "e4e80d6ce5dab91baa412b047e1aa9ab01f17f8c", "filename": "gcc/bitmap.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30fe4b68120118221578b111036fa5fea0d25b3/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30fe4b68120118221578b111036fa5fea0d25b3/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=a30fe4b68120118221578b111036fa5fea0d25b3", "patch": "@@ -618,6 +618,9 @@ bmp_iter_set (bitmap_iterator *bi, unsigned *bit_no)\n \t  bi->word_no++;\n \t}\n \n+      /* Make sure we didn't remove the element while iterating.  */\n+      gcc_checking_assert (bi->elt1->indx != -1U);\n+\n       /* Advance to the next element.  */\n       bi->elt1 = bi->elt1->next;\n       if (!bi->elt1)\n@@ -664,6 +667,9 @@ bmp_iter_and (bitmap_iterator *bi, unsigned *bit_no)\n       /* Advance to the next identical element.  */\n       do\n \t{\n+\t  /* Make sure we didn't remove the element while iterating.  */\n+\t  gcc_checking_assert (bi->elt1->indx != -1U);\n+\n \t  /* Advance elt1 while it is less than elt2.  We always want\n \t     to advance one elt.  */\n \t  do\n@@ -674,6 +680,9 @@ bmp_iter_and (bitmap_iterator *bi, unsigned *bit_no)\n \t    }\n \t  while (bi->elt1->indx < bi->elt2->indx);\n \n+\t  /* Make sure we didn't remove the element while iterating.  */\n+\t  gcc_checking_assert (bi->elt2->indx != -1U);\n+\n \t  /* Advance elt2 to be no less than elt1.  This might not\n \t     advance.  */\n \t  while (bi->elt2->indx < bi->elt1->indx)\n@@ -726,11 +735,17 @@ bmp_iter_and_compl (bitmap_iterator *bi, unsigned *bit_no)\n \t  bi->word_no++;\n \t}\n \n+      /* Make sure we didn't remove the element while iterating.  */\n+      gcc_checking_assert (bi->elt1->indx != -1U);\n+\n       /* Advance to the next element of elt1.  */\n       bi->elt1 = bi->elt1->next;\n       if (!bi->elt1)\n \treturn false;\n \n+      /* Make sure we didn't remove the element while iterating.  */\n+      gcc_checking_assert (! bi->elt2 || bi->elt2->indx != -1U);\n+\n       /* Advance elt2 until it is no less than elt1.  */\n       while (bi->elt2 && bi->elt2->indx < bi->elt1->indx)\n \tbi->elt2 = bi->elt2->next;"}, {"sha": "dc46351ccd278305f3bc716000a1cc3142f62f74", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30fe4b68120118221578b111036fa5fea0d25b3/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30fe4b68120118221578b111036fa5fea0d25b3/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=a30fe4b68120118221578b111036fa5fea0d25b3", "patch": "@@ -3992,8 +3992,14 @@ remove_from_deps (struct deps_desc *deps, rtx_insn *insn)\n   removed = remove_from_dependence_list (insn, &deps->last_pending_memory_flush);\n   deps->pending_flush_length -= removed;\n \n+  unsigned to_clear = -1U;\n   EXECUTE_IF_SET_IN_REG_SET (&deps->reg_last_in_use, 0, i, rsi)\n     {\n+      if (to_clear != -1U)\n+\t{\n+\t  CLEAR_REGNO_REG_SET (&deps->reg_last_in_use, to_clear);\n+\t  to_clear = -1U;\n+\t}\n       struct deps_reg *reg_last = &deps->reg_last[i];\n       if (reg_last->uses)\n \tremove_from_dependence_list (insn, &reg_last->uses);\n@@ -4005,8 +4011,10 @@ remove_from_deps (struct deps_desc *deps, rtx_insn *insn)\n \tremove_from_dependence_list (insn, &reg_last->clobbers);\n       if (!reg_last->uses && !reg_last->sets && !reg_last->implicit_sets\n \t  && !reg_last->clobbers)\n-        CLEAR_REGNO_REG_SET (&deps->reg_last_in_use, i);\n+\tto_clear = i;\n     }\n+  if (to_clear != -1U)\n+    CLEAR_REGNO_REG_SET (&deps->reg_last_in_use, to_clear);\n \n   if (CALL_P (insn))\n     {"}, {"sha": "261d9b0c90b18506e3a476238c8896ef11dd61bd", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 57, "deletions": 45, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30fe4b68120118221578b111036fa5fea0d25b3/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30fe4b68120118221578b111036fa5fea0d25b3/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=a30fe4b68120118221578b111036fa5fea0d25b3", "patch": "@@ -551,58 +551,70 @@ release_defs_bitset (bitmap toremove)\n      most likely run in slightly superlinear time, rather than the\n      pathological quadratic worst case.  */\n   while (!bitmap_empty_p (toremove))\n-    EXECUTE_IF_SET_IN_BITMAP (toremove, 0, j, bi)\n-      {\n-\tbool remove_now = true;\n-\ttree var = ssa_name (j);\n-\tgimple *stmt;\n-\timm_use_iterator uit;\n-\n-\tFOR_EACH_IMM_USE_STMT (stmt, uit, var)\n-\t  {\n-\t    ssa_op_iter dit;\n-\t    def_operand_p def_p;\n+    {\n+      unsigned to_remove_bit = -1U;\n+      EXECUTE_IF_SET_IN_BITMAP (toremove, 0, j, bi)\n+\t{\n+\t  if (to_remove_bit != -1U)\n+\t    {\n+\t      bitmap_clear_bit (toremove, to_remove_bit);\n+\t      to_remove_bit = -1U;\n+\t    }\n \n-\t    /* We can't propagate PHI nodes into debug stmts.  */\n-\t    if (gimple_code (stmt) == GIMPLE_PHI\n-\t\t|| is_gimple_debug (stmt))\n-\t      continue;\n+\t  bool remove_now = true;\n+\t  tree var = ssa_name (j);\n+\t  gimple *stmt;\n+\t  imm_use_iterator uit;\n \n-\t    /* If we find another definition to remove that uses\n-\t       the one we're looking at, defer the removal of this\n-\t       one, so that it can be propagated into debug stmts\n-\t       after the other is.  */\n-\t    FOR_EACH_SSA_DEF_OPERAND (def_p, stmt, dit, SSA_OP_DEF)\n-\t      {\n-\t\ttree odef = DEF_FROM_PTR (def_p);\n+\t  FOR_EACH_IMM_USE_STMT (stmt, uit, var)\n+\t    {\n+\t      ssa_op_iter dit;\n+\t      def_operand_p def_p;\n+\n+\t      /* We can't propagate PHI nodes into debug stmts.  */\n+\t      if (gimple_code (stmt) == GIMPLE_PHI\n+\t\t  || is_gimple_debug (stmt))\n+\t\tcontinue;\n+\n+\t      /* If we find another definition to remove that uses\n+\t\t the one we're looking at, defer the removal of this\n+\t\t one, so that it can be propagated into debug stmts\n+\t\t after the other is.  */\n+\t      FOR_EACH_SSA_DEF_OPERAND (def_p, stmt, dit, SSA_OP_DEF)\n+\t\t{\n+\t\t  tree odef = DEF_FROM_PTR (def_p);\n \n-\t\tif (bitmap_bit_p (toremove, SSA_NAME_VERSION (odef)))\n-\t\t  {\n-\t\t    remove_now = false;\n-\t\t    break;\n-\t\t  }\n-\t      }\n+\t\t  if (bitmap_bit_p (toremove, SSA_NAME_VERSION (odef)))\n+\t\t    {\n+\t\t      remove_now = false;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n \n-\t    if (!remove_now)\n-\t      BREAK_FROM_IMM_USE_STMT (uit);\n-\t  }\n+\t      if (!remove_now)\n+\t\tBREAK_FROM_IMM_USE_STMT (uit);\n+\t    }\n \n-\tif (remove_now)\n-\t  {\n-\t    gimple *def = SSA_NAME_DEF_STMT (var);\n-\t    gimple_stmt_iterator gsi = gsi_for_stmt (def);\n+\t  if (remove_now)\n+\t    {\n+\t      gimple *def = SSA_NAME_DEF_STMT (var);\n+\t      gimple_stmt_iterator gsi = gsi_for_stmt (def);\n \n-\t    if (gimple_code (def) == GIMPLE_PHI)\n-\t      remove_phi_node (&gsi, true);\n-\t    else\n-\t      {\n-\t\tgsi_remove (&gsi, true);\n-\t\trelease_defs (def);\n-\t      }\n+\t      if (gimple_code (def) == GIMPLE_PHI)\n+\t\tremove_phi_node (&gsi, true);\n+\t      else\n+\t\t{\n+\t\t  gsi_remove (&gsi, true);\n+\t\t  release_defs (def);\n+\t\t}\n+\n+\t      to_remove_bit = j;\n+\t    }\n+\t}\n+      if (to_remove_bit != -1U)\n+\tbitmap_clear_bit (toremove, to_remove_bit);\n+    }\n \n-\t    bitmap_clear_bit (toremove, j);\n-\t  }\n-      }\n }\n \n /* Verify virtual SSA form.  */"}]}