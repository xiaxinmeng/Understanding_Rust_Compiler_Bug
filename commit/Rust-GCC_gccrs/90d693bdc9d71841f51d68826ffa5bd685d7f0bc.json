{"sha": "90d693bdc9d71841f51d68826ffa5bd685d7f0bc", "node_id": "C_kwDOANBUbNoAKDkwZDY5M2JkYzlkNzE4NDFmNTFkNjg4MjZmZmE1YmQ2ODVkN2YwYmM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-18T13:32:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-02-22T06:48:45Z"}, "message": "target/99881 - x86 vector cost of CTOR from integer regs\n\nThis uses the now passed SLP node to the vectorizer costing hook\nto adjust vector construction costs for the cost of moving an\ninteger component from a GPR to a vector register when that's\nrequired for building a vector from components.  A cruical difference\nhere is whether the component is loaded from memory or extracted\nfrom a vector register as in those cases no intermediate GPR is involved.\n\nThe pr99881.c testcase can be Un-XFAILed with this patch, the\npr91446.c testcase now produces scalar code which looks superior\nto me so I've adjusted it as well.\n\n2022-02-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104582\n\tPR target/99881\n\t* config/i386/i386.cc (ix86_vector_costs::add_stmt_cost):\n\tCost GPR to vector register moves for integer vector construction.\n\n\t* gcc.dg/vect/costmodel/x86_64/costmodel-pr104582-1.c: New.\n\t* gcc.dg/vect/costmodel/x86_64/costmodel-pr104582-2.c: Likewise.\n\t* gcc.dg/vect/costmodel/x86_64/costmodel-pr104582-3.c: Likewise.\n\t* gcc.dg/vect/costmodel/x86_64/costmodel-pr104582-4.c: Likewise.\n\t* gcc.target/i386/pr99881.c: Un-XFAIL.\n\t* gcc.target/i386/pr91446.c: Adjust to not expect vectorization.", "tree": {"sha": "f466ae8d8c711c6e67955c2febf119ee33c6a804", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f466ae8d8c711c6e67955c2febf119ee33c6a804"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90d693bdc9d71841f51d68826ffa5bd685d7f0bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d693bdc9d71841f51d68826ffa5bd685d7f0bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90d693bdc9d71841f51d68826ffa5bd685d7f0bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d693bdc9d71841f51d68826ffa5bd685d7f0bc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f24dfc76177b3994434c8beb287cde1a9976b5ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24dfc76177b3994434c8beb287cde1a9976b5ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f24dfc76177b3994434c8beb287cde1a9976b5ce"}], "stats": {"total": 105, "additions": 102, "deletions": 3}, "files": [{"sha": "b2bf90576d53ce2f6a66cf1fecdb1fa5c44bf081", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d693bdc9d71841f51d68826ffa5bd685d7f0bc/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d693bdc9d71841f51d68826ffa5bd685d7f0bc/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=90d693bdc9d71841f51d68826ffa5bd685d7f0bc", "patch": "@@ -22997,7 +22997,7 @@ ix86_vectorize_create_costs (vec_info *vinfo, bool costing_for_scalar)\n \n unsigned\n ix86_vector_costs::add_stmt_cost (int count, vect_cost_for_stmt kind,\n-\t\t\t\t  stmt_vec_info stmt_info, slp_tree,\n+\t\t\t\t  stmt_vec_info stmt_info, slp_tree node,\n \t\t\t\t  tree vectype, int misalign,\n \t\t\t\t  vect_cost_model_location where)\n {\n@@ -23160,6 +23160,49 @@ ix86_vector_costs::add_stmt_cost (int count, vect_cost_for_stmt kind,\n       stmt_cost = ix86_builtin_vectorization_cost (kind, vectype, misalign);\n       stmt_cost *= (TYPE_VECTOR_SUBPARTS (vectype) + 1);\n     }\n+  else if (kind == vec_construct\n+\t   && node\n+\t   && SLP_TREE_DEF_TYPE (node) == vect_external_def\n+\t   && INTEGRAL_TYPE_P (TREE_TYPE (vectype)))\n+    {\n+      stmt_cost = ix86_builtin_vectorization_cost (kind, vectype, misalign);\n+      unsigned i;\n+      tree op;\n+      FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_OPS (node), i, op)\n+\tif (TREE_CODE (op) == SSA_NAME)\n+\t  TREE_VISITED (op) = 0;\n+      FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_OPS (node), i, op)\n+\t{\n+\t  if (TREE_CODE (op) != SSA_NAME\n+\t      || TREE_VISITED (op))\n+\t    continue;\n+\t  TREE_VISITED (op) = 1;\n+\t  gimple *def = SSA_NAME_DEF_STMT (op);\n+\t  tree tem;\n+\t  if (is_gimple_assign (def)\n+\t      && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def))\n+\t      && ((tem = gimple_assign_rhs1 (def)), true)\n+\t      && TREE_CODE (tem) == SSA_NAME\n+\t      /* A sign-change expands to nothing.  */\n+\t      && tree_nop_conversion_p (TREE_TYPE (gimple_assign_lhs (def)),\n+\t\t\t\t\tTREE_TYPE (tem)))\n+\t    def = SSA_NAME_DEF_STMT (tem);\n+\t  /* When the component is loaded from memory we can directly\n+\t     move it to a vector register, otherwise we have to go\n+\t     via a GPR or via vpinsr which involves similar cost.\n+\t     Likewise with a BIT_FIELD_REF extracting from a vector\n+\t     register we can hope to avoid using a GPR.  */\n+\t  if (!is_gimple_assign (def)\n+\t      || (!gimple_assign_load_p (def)\n+\t\t  && (gimple_assign_rhs_code (def) != BIT_FIELD_REF\n+\t\t      || !VECTOR_TYPE_P (TREE_TYPE\n+\t\t\t\t(TREE_OPERAND (gimple_assign_rhs1 (def), 0))))))\n+\t    stmt_cost += ix86_cost->sse_to_integer;\n+\t}\n+      FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_OPS (node), i, op)\n+\tif (TREE_CODE (op) == SSA_NAME)\n+\t  TREE_VISITED (op) = 0;\n+    }\n   if (stmt_cost == -1)\n     stmt_cost = ix86_builtin_vectorization_cost (kind, vectype, misalign);\n "}, {"sha": "992a845ad7a7ff380beb3a11a6a44cdfc7e390b3", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-pr104582-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d693bdc9d71841f51d68826ffa5bd685d7f0bc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr104582-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d693bdc9d71841f51d68826ffa5bd685d7f0bc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr104582-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr104582-1.c?ref=90d693bdc9d71841f51d68826ffa5bd685d7f0bc", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-msse -fdump-tree-slp2-details\" } */\n+\n+struct S { unsigned long a, b; } s;\n+\n+void\n+foo (unsigned long *a, unsigned long *b)\n+{\n+  unsigned long a_ = *a;\n+  unsigned long b_ = *b;\n+  s.a = a_;\n+  s.b = b_;\n+}\n+\n+/* { dg-final { scan-tree-dump \"basic block part vectorized\" \"slp2\" } } */"}, {"sha": "7637cdb4a97ebdfeddb7db3356a26e5b32768947", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-pr104582-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d693bdc9d71841f51d68826ffa5bd685d7f0bc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr104582-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d693bdc9d71841f51d68826ffa5bd685d7f0bc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr104582-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr104582-2.c?ref=90d693bdc9d71841f51d68826ffa5bd685d7f0bc", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-msse -fdump-tree-slp2-details\" } */\n+\n+struct S { unsigned long a, b; } s;\n+\n+void\n+foo (unsigned long a, unsigned long b)\n+{\n+  s.a = a;\n+  s.b = b;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"basic block part vectorized\" \"slp2\" } } */"}, {"sha": "999c49057082ba20ca10bbd7797ddc13e3c9c919", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-pr104582-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d693bdc9d71841f51d68826ffa5bd685d7f0bc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr104582-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d693bdc9d71841f51d68826ffa5bd685d7f0bc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr104582-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr104582-3.c?ref=90d693bdc9d71841f51d68826ffa5bd685d7f0bc", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-msse -fdump-tree-slp2-details\" } */\n+\n+struct S { double a, b; } s;\n+\n+void\n+foo (double a, double b)\n+{\n+  s.a = a;\n+  s.b = b;\n+}\n+\n+/* { dg-final { scan-tree-dump \"basic block part vectorized\" \"slp2\" } } */"}, {"sha": "cc471e1ed730d61b9b0f7d076684be8a2b51373d", "filename": "gcc/testsuite/gcc.dg/vect/costmodel/x86_64/costmodel-pr104582-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d693bdc9d71841f51d68826ffa5bd685d7f0bc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr104582-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d693bdc9d71841f51d68826ffa5bd685d7f0bc/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr104582-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fcostmodel%2Fx86_64%2Fcostmodel-pr104582-4.c?ref=90d693bdc9d71841f51d68826ffa5bd685d7f0bc", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-msse -fdump-tree-slp2-details\" } */\n+\n+struct S { unsigned long a, b; } s;\n+\n+void\n+foo (signed long *a, unsigned long *b)\n+{\n+  unsigned long a_ = *a;\n+  unsigned long b_ = *b;\n+  s.a = a_;\n+  s.b = b_;\n+}\n+\n+/* { dg-final { scan-tree-dump \"basic block part vectorized\" \"slp2\" } } */"}, {"sha": "067bf43f69814937231c5b3f6e958e502534de14", "filename": "gcc/testsuite/gcc.target/i386/pr91446.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d693bdc9d71841f51d68826ffa5bd685d7f0bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91446.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d693bdc9d71841f51d68826ffa5bd685d7f0bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91446.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91446.c?ref=90d693bdc9d71841f51d68826ffa5bd685d7f0bc", "patch": "@@ -21,4 +21,4 @@ foo (unsigned long long width, unsigned long long height,\n   bar (&t);\n }\n \n-/* { dg-final { scan-assembler-times \"vmovdqa\\[^\\n\\r\\]*xmm\\[0-9\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"xmm\\[0-9\\]\" 0 } } */"}, {"sha": "a1ec1d1ba8a3e0d545912043301eb39e8c3629c6", "filename": "gcc/testsuite/gcc.target/i386/pr99881.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d693bdc9d71841f51d68826ffa5bd685d7f0bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99881.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d693bdc9d71841f51d68826ffa5bd685d7f0bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99881.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99881.c?ref=90d693bdc9d71841f51d68826ffa5bd685d7f0bc", "patch": "@@ -1,7 +1,7 @@\n /* PR target/99881.  */\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-Ofast -march=skylake\" } */\n-/* { dg-final { scan-assembler-not \"xmm\\[0-9\\]\" { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-not \"xmm\\[0-9\\]\" } } */\n \n void\n foo (int* __restrict a, int n, int c)"}]}