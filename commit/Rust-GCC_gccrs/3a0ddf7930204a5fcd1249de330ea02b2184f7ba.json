{"sha": "3a0ddf7930204a5fcd1249de330ea02b2184f7ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EwZGRmNzkzMDIwNGE1ZmNkMTI0OWRlMzMwZWEwMmIyMTg0ZjdiYQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-05-14T20:29:48Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-06-16T21:39:47Z"}, "message": "d: Remove names of unused function parameters.\n\ngcc/d/ChangeLog:\n\n\t* d-attribs.cc (handle_noreturn_attribute): Remove names of unused\n\tfunction parameters.\n\t(handle_leaf_attribute): Likewise.\n\t(handle_const_attribute): Likewise.\n\t(handle_malloc_attribute): Likewise.\n\t(handle_pure_attribute): Likewise.\n\t(handle_novops_attribute): Likewise.\n\t(handle_nonnull_attribute): Likewise.\n\t(handle_nothrow_attribute): Likewise.\n\t(handle_type_generic_attribute): Likewise.\n\t(handle_transaction_pure_attribute): Likewise.\n\t(handle_returns_twice_attribute): Likewise.\n\t(handle_fnspec_attribute): Likewise.\n\t(handle_always_inline_attribute): Likewise.\n\t(d_handle_noinline_attribute): Likewise.\n\t(d_handle_forceinline_attribute): Likewise.\n\t(d_handle_flatten_attribute): Likewise.\n\t(d_handle_noclone_attribute): Likewise.\n\t(d_handle_section_attribute): Likewise.\n\t(d_handle_alias_attribute): Likewise.\n\t(d_handle_weak_attribute): Likewise.", "tree": {"sha": "8cafc5436e999c91c418eb9193e3a7e79877912a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cafc5436e999c91c418eb9193e3a7e79877912a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a0ddf7930204a5fcd1249de330ea02b2184f7ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0ddf7930204a5fcd1249de330ea02b2184f7ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0ddf7930204a5fcd1249de330ea02b2184f7ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0ddf7930204a5fcd1249de330ea02b2184f7ba/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af3c19f0a5072199f70571a30271a0ee9a4ae5ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3c19f0a5072199f70571a30271a0ee9a4ae5ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af3c19f0a5072199f70571a30271a0ee9a4ae5ce"}], "stats": {"total": 96, "additions": 31, "deletions": 65}, "files": [{"sha": "964f59f96f4c7f4cf25635039cdb9eadaa0c81f4", "filename": "gcc/d/d-attribs.cc", "status": "modified", "additions": 31, "deletions": 65, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0ddf7930204a5fcd1249de330ea02b2184f7ba/gcc%2Fd%2Fd-attribs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0ddf7930204a5fcd1249de330ea02b2184f7ba/gcc%2Fd%2Fd-attribs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-attribs.cc?ref=3a0ddf7930204a5fcd1249de330ea02b2184f7ba", "patch": "@@ -344,15 +344,15 @@ apply_user_attributes (Dsymbol *sym, tree node)\n   input_location = saved_location;\n }\n \n-/* Built-in attribute handlers.  */\n+/* Built-in attribute handlers.\n+   These functions take the arguments:\n+   (tree *node, tree name, tree args, int flags, bool *no_add_attrs)  */\n \n /* Handle a \"noreturn\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_noreturn_attribute (tree *node, tree ARG_UNUSED (name),\n-\t\t\t   tree ARG_UNUSED (args), int ARG_UNUSED (flags),\n-\t\t\t   bool * ARG_UNUSED (no_add_attrs))\n+handle_noreturn_attribute (tree *node, tree, tree, int, bool *)\n {\n   tree type = TREE_TYPE (*node);\n \n@@ -374,9 +374,7 @@ handle_noreturn_attribute (tree *node, tree ARG_UNUSED (name),\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_leaf_attribute (tree *node, tree name,\n-\t\t       tree ARG_UNUSED (args),\n-\t\t       int ARG_UNUSED (flags), bool *no_add_attrs)\n+handle_leaf_attribute (tree *node, tree name, tree, int, bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n@@ -396,9 +394,7 @@ handle_leaf_attribute (tree *node, tree name,\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_const_attribute (tree *node, tree ARG_UNUSED (name),\n-\t\t\ttree ARG_UNUSED (args), int ARG_UNUSED (flags),\n-\t\t\tbool * ARG_UNUSED (no_add_attrs))\n+handle_const_attribute (tree *node, tree, tree, int, bool *)\n {\n   tree type = TREE_TYPE (*node);\n \n@@ -420,9 +416,7 @@ handle_const_attribute (tree *node, tree ARG_UNUSED (name),\n    struct attribute_spec.handler.  */\n \n tree\n-handle_malloc_attribute (tree *node, tree ARG_UNUSED (name),\n-\t\t\t tree ARG_UNUSED (args), int ARG_UNUSED (flags),\n-\t\t\t bool * ARG_UNUSED (no_add_attrs))\n+handle_malloc_attribute (tree *node, tree, tree, int, bool *)\n {\n   gcc_assert (TREE_CODE (*node) == FUNCTION_DECL\n \t      && POINTER_TYPE_P (TREE_TYPE (TREE_TYPE (*node))));\n@@ -434,9 +428,7 @@ handle_malloc_attribute (tree *node, tree ARG_UNUSED (name),\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_pure_attribute (tree *node, tree ARG_UNUSED (name),\n-\t\t       tree ARG_UNUSED (args), int ARG_UNUSED (flags),\n-\t\t       bool * ARG_UNUSED (no_add_attrs))\n+handle_pure_attribute (tree *node, tree, tree, int, bool *)\n {\n   gcc_assert (TREE_CODE (*node) == FUNCTION_DECL);\n   DECL_PURE_P (*node) = 1;\n@@ -447,9 +439,7 @@ handle_pure_attribute (tree *node, tree ARG_UNUSED (name),\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_novops_attribute (tree *node, tree ARG_UNUSED (name),\n-\t\t\t tree ARG_UNUSED (args), int ARG_UNUSED (flags),\n-\t\t\t bool * ARG_UNUSED (no_add_attrs))\n+handle_novops_attribute (tree *node, tree, tree, int, bool *)\n {\n   gcc_assert (TREE_CODE (*node) == FUNCTION_DECL);\n   DECL_IS_NOVOPS (*node) = 1;\n@@ -473,9 +463,7 @@ get_nonnull_operand (tree arg_num_expr, unsigned HOST_WIDE_INT *valp)\n /* Handle the \"nonnull\" attribute.  */\n \n static tree\n-handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n-\t\t\t  tree args, int ARG_UNUSED (flags),\n-\t\t\t  bool * ARG_UNUSED (no_add_attrs))\n+handle_nonnull_attribute (tree *node, tree, tree args, int, bool *)\n {\n   tree type = *node;\n \n@@ -525,9 +513,7 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_nothrow_attribute (tree *node, tree ARG_UNUSED (name),\n-\t\t\t  tree ARG_UNUSED (args), int ARG_UNUSED (flags),\n-\t\t\t  bool * ARG_UNUSED (no_add_attrs))\n+handle_nothrow_attribute (tree *node, tree, tree, int, bool *)\n {\n   gcc_assert (TREE_CODE (*node) == FUNCTION_DECL);\n   TREE_NOTHROW (*node) = 1;\n@@ -537,9 +523,7 @@ handle_nothrow_attribute (tree *node, tree ARG_UNUSED (name),\n /* Handle a \"type_generic\" attribute.  */\n \n static tree\n-handle_type_generic_attribute (tree *node, tree ARG_UNUSED (name),\n-\t\t\t       tree ARG_UNUSED (args), int ARG_UNUSED (flags),\n-\t\t\t       bool * ARG_UNUSED (no_add_attrs))\n+handle_type_generic_attribute (tree *node, tree, tree, int, bool *)\n {\n   /* Ensure we have a function type.  */\n   gcc_assert (TREE_CODE (*node) == FUNCTION_TYPE);\n@@ -553,10 +537,7 @@ handle_type_generic_attribute (tree *node, tree ARG_UNUSED (name),\n /* Handle a \"transaction_pure\" attribute.  */\n \n static tree\n-handle_transaction_pure_attribute (tree *node, tree ARG_UNUSED (name),\n-\t\t\t\t   tree ARG_UNUSED (args),\n-\t\t\t\t   int ARG_UNUSED (flags),\n-\t\t\t\t   bool * ARG_UNUSED (no_add_attrs))\n+handle_transaction_pure_attribute (tree *node, tree, tree, int, bool *)\n {\n   /* Ensure we have a function type.  */\n   gcc_assert (TREE_CODE (*node) == FUNCTION_TYPE);\n@@ -567,10 +548,7 @@ handle_transaction_pure_attribute (tree *node, tree ARG_UNUSED (name),\n /* Handle a \"returns_twice\" attribute.  */\n \n static tree\n-handle_returns_twice_attribute (tree *node, tree ARG_UNUSED (name),\n-\t\t\t\ttree ARG_UNUSED (args),\n-\t\t\t\tint ARG_UNUSED (flags),\n-\t\t\t\tbool * ARG_UNUSED (no_add_attrs))\n+handle_returns_twice_attribute (tree *node, tree, tree, int, bool *)\n {\n   gcc_assert (TREE_CODE (*node) == FUNCTION_DECL);\n \n@@ -583,9 +561,7 @@ handle_returns_twice_attribute (tree *node, tree ARG_UNUSED (name),\n    struct attribute_spec.handler.  */\n \n tree\n-handle_fnspec_attribute (tree *node ATTRIBUTE_UNUSED, tree ARG_UNUSED (name),\n-\t\t\t tree args, int ARG_UNUSED (flags),\n-\t\t\t bool *no_add_attrs ATTRIBUTE_UNUSED)\n+handle_fnspec_attribute (tree *, tree, tree args, int, bool *)\n {\n   gcc_assert (args\n \t      && TREE_CODE (TREE_VALUE (args)) == STRING_CST\n@@ -597,23 +573,22 @@ handle_fnspec_attribute (tree *node ATTRIBUTE_UNUSED, tree ARG_UNUSED (name),\n    struct attribute_spec.handler.  */\n \n static tree\n-handle_always_inline_attribute (tree *node, tree ARG_UNUSED (name),\n-\t\t\t\ttree ARG_UNUSED (args), int ARG_UNUSED (flags),\n-\t\t\t\tbool *no_add_attrs ATTRIBUTE_UNUSED)\n+handle_always_inline_attribute (tree *node, tree, tree, int, bool *)\n {\n   gcc_assert (TREE_CODE (*node) == FUNCTION_DECL);\n \n   return NULL_TREE;\n }\n \n-/* Language specific attribute handlers.  */\n+/* Language specific attribute handlers.\n+   These functions take the arguments:\n+   (tree *node, tree name, tree args, int flags, bool *no_add_attrs)  */\n \n /* Handle a \"noinline\" attribute.  */\n \n static tree\n-d_handle_noinline_attribute (tree *node, tree name,\n-\t\t\t     tree ARG_UNUSED (args),\n-\t\t\t     int ARG_UNUSED (flags), bool *no_add_attrs)\n+d_handle_noinline_attribute (tree *node, tree name, tree, int,\n+\t\t\t     bool *no_add_attrs)\n {\n   Type *t = TYPE_LANG_FRONTEND (TREE_TYPE (*node));\n \n@@ -631,9 +606,7 @@ d_handle_noinline_attribute (tree *node, tree name,\n /* Handle a \"forceinline\" attribute.  */\n \n static tree\n-d_handle_forceinline_attribute (tree *node, tree name,\n-\t\t\t\ttree ARG_UNUSED (args),\n-\t\t\t\tint ARG_UNUSED (flags),\n+d_handle_forceinline_attribute (tree *node, tree name, tree, int,\n \t\t\t\tbool *no_add_attrs)\n {\n   Type *t = TYPE_LANG_FRONTEND (TREE_TYPE (*node));\n@@ -663,9 +636,8 @@ d_handle_forceinline_attribute (tree *node, tree name,\n /* Handle a \"flatten\" attribute.  */\n \n static tree\n-d_handle_flatten_attribute (tree *node, tree name,\n-\t\t\t    tree args ATTRIBUTE_UNUSED,\n-\t\t\t    int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+d_handle_flatten_attribute (tree *node, tree name, tree, int,\n+\t\t\t    bool *no_add_attrs)\n {\n   Type *t = TYPE_LANG_FRONTEND (TREE_TYPE (*node));\n \n@@ -701,10 +673,8 @@ d_handle_target_attribute (tree *node, tree name, tree args, int flags,\n /* Handle a \"noclone\" attribute.  */\n \n static tree\n-d_handle_noclone_attribute (tree *node, tree name,\n-\t\t\t\ttree ARG_UNUSED (args),\n-\t\t\t\tint ARG_UNUSED (flags),\n-\t\t\t\tbool *no_add_attrs)\n+d_handle_noclone_attribute (tree *node, tree name, tree, int,\n+\t\t\t    bool *no_add_attrs)\n {\n   Type *t = TYPE_LANG_FRONTEND (TREE_TYPE (*node));\n \n@@ -730,8 +700,8 @@ d_handle_noclone_attribute (tree *node, tree name,\n    struct attribute_spec.handler.  */\n \n static tree\n-d_handle_section_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n-\t\t\t    int ARG_UNUSED (flags), bool *no_add_attrs)\n+d_handle_section_attribute (tree *node, tree, tree args, int,\n+\t\t\t    bool *no_add_attrs)\n {\n   tree decl = *node;\n \n@@ -791,9 +761,8 @@ d_handle_section_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n    struct attribute_spec.handler.  */\n \n static tree\n-d_handle_alias_attribute (tree *node, tree ARG_UNUSED (name),\n-\t\t\t  tree args, int ARG_UNUSED (flags),\n-\t\t\t  bool *no_add_attrs ATTRIBUTE_UNUSED)\n+d_handle_alias_attribute (tree *node, tree name, tree args, int,\n+\t\t\t  bool *no_add_attrs)\n {\n   tree decl = *node;\n \n@@ -850,10 +819,7 @@ d_handle_alias_attribute (tree *node, tree ARG_UNUSED (name),\n    struct attribute_spec.handler.  */\n \n static tree\n-d_handle_weak_attribute (tree *node, tree name,\n-\t\t\t tree ARG_UNUSED (args),\n-\t\t\t int ARG_UNUSED (flags),\n-\t\t\t bool * ARG_UNUSED (no_add_attrs))\n+d_handle_weak_attribute (tree *node, tree name, tree, int, bool *no_add_attrs)\n {\n   if (TREE_CODE (*node) == FUNCTION_DECL\n       && DECL_DECLARED_INLINE_P (*node))"}]}