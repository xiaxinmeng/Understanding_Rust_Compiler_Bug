{"sha": "b848dc65c43c049b0861d37ef2181b8ebbcf8254", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg0OGRjNjVjNDNjMDQ5YjA4NjFkMzdlZjIxODFiOGViYmNmODI1NA==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2001-09-24T16:16:07Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2001-09-24T16:16:07Z"}, "message": "pa.c (function_arg): Pass floating arguments in both general and floating registers in indirect...\n\n\t* pa.c (function_arg): Pass floating arguments in both general and\n\tfloating registers in indirect (dynamic) calls when generating code\n\tfor the 32 bit ABI and the HP assembler.\n\nFrom-SVN: r45775", "tree": {"sha": "0fe13440610ea5b1401f4b5a20f335e177affa65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fe13440610ea5b1401f4b5a20f335e177affa65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b848dc65c43c049b0861d37ef2181b8ebbcf8254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b848dc65c43c049b0861d37ef2181b8ebbcf8254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b848dc65c43c049b0861d37ef2181b8ebbcf8254", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b848dc65c43c049b0861d37ef2181b8ebbcf8254/comments", "author": null, "committer": null, "parents": [{"sha": "250d5688733963297fd909944cc203ce074f681d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/250d5688733963297fd909944cc203ce074f681d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/250d5688733963297fd909944cc203ce074f681d"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "172e5c97a8fe2fb6a3507fab69c589ff04909aa6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b848dc65c43c049b0861d37ef2181b8ebbcf8254/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b848dc65c43c049b0861d37ef2181b8ebbcf8254/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b848dc65c43c049b0861d37ef2181b8ebbcf8254", "patch": "@@ -1,3 +1,9 @@\n+2001-09-24  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* pa.c (function_arg): Pass floating arguments in both general and\n+\tfloating registers in indirect (dynamic) calls when generating code\n+\tfor the 32 bit ABI and the HP assembler.\n+\n 2001-09-24  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* doc/install.texi: Markup fixes."}, {"sha": "6ce61a8650cd2a56e2f7d3eb6e1d089c385c4ff2", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b848dc65c43c049b0861d37ef2181b8ebbcf8254/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b848dc65c43c049b0861d37ef2181b8ebbcf8254/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=b848dc65c43c049b0861d37ef2181b8ebbcf8254", "patch": "@@ -7145,22 +7145,30 @@ function_arg (cum, mode, type, named, incoming)\n \t\t\t\t\t gen_rtx_REG (DImode, gpr_reg_base),\n \t\t\t\t\t GEN_INT (8))));\n     }\n-  /* Determine if the register needs to be passed in both general and\n+  /* Determine if the argument needs to be passed in both general and\n      floating point registers.  */\n-  if ((TARGET_PORTABLE_RUNTIME || TARGET_64BIT || TARGET_ELF32)\n-      /* If we are doing soft-float with portable runtime, then there\n-\t is no need to worry about FP regs.  */\n-      && ! TARGET_SOFT_FLOAT\n-      /* The parameter must be some kind of float, else we can just\n-\t pass it in integer registers.  */\n-      && FLOAT_MODE_P (mode)\n-      /* The target function must not have a prototype.  */\n-      && cum->nargs_prototype <= 0\n-      /* libcalls do not need to pass items in both FP and general\n-\t registers.  */\n-      && type != NULL_TREE\n-      /* All this hair applies to outgoing args only.  */\n-      && !incoming)\n+  if (((TARGET_PORTABLE_RUNTIME || TARGET_64BIT || TARGET_ELF32)\n+       /* If we are doing soft-float with portable runtime, then there\n+\t  is no need to worry about FP regs.  */\n+       && ! TARGET_SOFT_FLOAT\n+       /* The parameter must be some kind of float, else we can just\n+\t  pass it in integer registers.  */\n+       && FLOAT_MODE_P (mode)\n+       /* The target function must not have a prototype.  */\n+       && cum->nargs_prototype <= 0\n+       /* libcalls do not need to pass items in both FP and general\n+\t  registers.  */\n+       && type != NULL_TREE\n+       /* All this hair applies to outgoing args only.  */\n+       && ! incoming)\n+      /* Also pass outgoing floating arguments in both registers in indirect\n+\t calls with the 32 bit ABI and the HP assembler since there is no\n+\t way to the specify argument locations in static functions.  */\n+      || (! TARGET_64BIT\n+\t  && ! TARGET_GAS\n+\t  && ! incoming\n+\t  && cum->indirect\n+\t  && FLOAT_MODE_P (mode)))\n     {\n       retval\n \t= gen_rtx_PARALLEL"}]}