{"sha": "bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ5YjNkM2QxYThkMzNlNDYwYWUxMzdkYTBjYjBkNWE5MTllOGY4Zg==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2018-08-13T12:04:24Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-08-13T12:04:24Z"}, "message": "[nvptx] Use CUDA driver API to select default runtime launch geometry\n\nThe CUDA driver API starting version 6.5 offers a set of runtime functions to\ncalculate several occupancy-related measures, as a replacement for the occupancy\ncalculator spreadsheet.\n\nThis patch adds a heuristic for default runtime launch geometry, based on the\nnew runtime function cuOccupancyMaxPotentialBlockSize.\n\nBuild on x86_64 with nvptx accelerator and ran libgomp testsuite.\n\n2018-08-13  Cesar Philippidis  <cesar@codesourcery.com>\n\t    Tom de Vries  <tdevries@suse.de>\n\n\tPR target/85590\n\t* plugin/cuda/cuda.h (CUoccupancyB2DSize): New typedef.\n\t(cuOccupancyMaxPotentialBlockSize): Declare.\n\t* plugin/cuda-lib.def (cuOccupancyMaxPotentialBlockSize): New\n\tCUDA_ONE_CALL_MAYBE_NULL.\n\t* plugin/plugin-nvptx.c (CUDA_VERSION < 6050): Define\n\tCUoccupancyB2DSize and declare\n\tcuOccupancyMaxPotentialBlockSize.\n\t(nvptx_exec): Use cuOccupancyMaxPotentialBlockSize to set the\n\tdefault num_gangs and num_workers when the driver supports it.\n\nCo-Authored-By: Tom de Vries <tdevries@suse.de>\n\nFrom-SVN: r263505", "tree": {"sha": "0729abf2a8dd6b64d2d8313c3c16b16b428c15ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0729abf2a8dd6b64d2d8313c3c16b16b428c15ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cdf899781c7321987a9948e5ca0847e8b38da798", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdf899781c7321987a9948e5ca0847e8b38da798", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdf899781c7321987a9948e5ca0847e8b38da798"}], "stats": {"total": 101, "additions": 89, "deletions": 12}, "files": [{"sha": "f54a695fb38b456dabe7c268e67454d6eee8e94b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f", "patch": "@@ -1,3 +1,17 @@\n+2018-08-13  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/85590\n+\t* plugin/cuda/cuda.h (CUoccupancyB2DSize): New typedef.\n+\t(cuOccupancyMaxPotentialBlockSize): Declare.\n+\t* plugin/cuda-lib.def (cuOccupancyMaxPotentialBlockSize): New\n+\tCUDA_ONE_CALL_MAYBE_NULL.\n+\t* plugin/plugin-nvptx.c (CUDA_VERSION < 6050): Define\n+\tCUoccupancyB2DSize and declare\n+\tcuOccupancyMaxPotentialBlockSize.\n+\t(nvptx_exec): Use cuOccupancyMaxPotentialBlockSize to set the\n+\tdefault num_gangs and num_workers when the driver supports it.\n+\n 2018-08-08  Tom de Vries  <tdevries@suse.de>\n \n \t* plugin/cuda-lib.def (cuLinkAddData_v2, cuLinkCreate_v2): Declare using"}, {"sha": "b2a4c2154ebce153200e4579dc88b00cdd00d94e", "filename": "libgomp/plugin/cuda-lib.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f/libgomp%2Fplugin%2Fcuda-lib.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f/libgomp%2Fplugin%2Fcuda-lib.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fcuda-lib.def?ref=bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f", "patch": "@@ -41,6 +41,7 @@ CUDA_ONE_CALL (cuModuleGetGlobal)\n CUDA_ONE_CALL (cuModuleLoad)\n CUDA_ONE_CALL (cuModuleLoadData)\n CUDA_ONE_CALL (cuModuleUnload)\n+CUDA_ONE_CALL_MAYBE_NULL (cuOccupancyMaxPotentialBlockSize)\n CUDA_ONE_CALL (cuStreamCreate)\n CUDA_ONE_CALL (cuStreamDestroy)\n CUDA_ONE_CALL (cuStreamQuery)"}, {"sha": "b4c1b29c5d895bb412974b8eadf7c8a1c995abe3", "filename": "libgomp/plugin/cuda/cuda.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f/libgomp%2Fplugin%2Fcuda%2Fcuda.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f/libgomp%2Fplugin%2Fcuda%2Fcuda.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fcuda%2Fcuda.h?ref=bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f", "patch": "@@ -44,6 +44,7 @@ typedef void *CUevent;\n typedef void *CUfunction;\n typedef void *CUlinkState;\n typedef void *CUmodule;\n+typedef size_t (*CUoccupancyB2DSize)(int);\n typedef void *CUstream;\n \n typedef enum {\n@@ -170,6 +171,8 @@ CUresult cuModuleGetGlobal (CUdeviceptr *, size_t *, CUmodule, const char *);\n CUresult cuModuleLoad (CUmodule *, const char *);\n CUresult cuModuleLoadData (CUmodule *, const void *);\n CUresult cuModuleUnload (CUmodule);\n+CUresult cuOccupancyMaxPotentialBlockSize(int *, int *, CUfunction,\n+\t\t\t\t\t  CUoccupancyB2DSize, size_t, int);\n CUresult cuStreamCreate (CUstream *, unsigned);\n #define cuStreamDestroy cuStreamDestroy_v2\n CUresult cuStreamDestroy (CUstream);"}, {"sha": "bae1b05ccaa9f6c530c1f36898a73eff2aa1a8e3", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 71, "deletions": 12, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=bd9b3d3d1a8d33e460ae137da0cb0d5a919e8f8f", "patch": "@@ -61,9 +61,12 @@ CUresult cuLinkAddData (CUlinkState, CUjitInputType, void *, size_t,\n \t\t\tconst char *, unsigned, CUjit_option *, void **);\n CUresult cuLinkCreate (unsigned, CUjit_option *, void **, CUlinkState *);\n #else\n+typedef size_t (*CUoccupancyB2DSize)(int);\n CUresult cuLinkAddData_v2 (CUlinkState, CUjitInputType, void *, size_t,\n \t\t\t   const char *, unsigned, CUjit_option *, void **);\n CUresult cuLinkCreate_v2 (unsigned, CUjit_option *, void **, CUlinkState *);\n+CUresult cuOccupancyMaxPotentialBlockSize(int *, int *, CUfunction,\n+\t\t\t\t\t  CUoccupancyB2DSize, size_t, int);\n #endif\n \n #define DO_PRAGMA(x) _Pragma (#x)\n@@ -1200,21 +1203,77 @@ nvptx_exec (void (*fn), size_t mapnum, void **hostaddrs, void **devaddrs,\n       {\n \tbool default_dim_p[GOMP_DIM_MAX];\n \tfor (i = 0; i != GOMP_DIM_MAX; i++)\n+\t  default_dim_p[i] = !dims[i];\n+\n+\tif (!CUDA_CALL_EXISTS (cuOccupancyMaxPotentialBlockSize))\n \t  {\n-\t    default_dim_p[i] = !dims[i];\n-\t    if (default_dim_p[i])\n-\t      dims[i] = nvthd->ptx_dev->default_dims[i];\n+\t    for (i = 0; i != GOMP_DIM_MAX; i++)\n+\t      if (default_dim_p[i])\n+\t\tdims[i] = nvthd->ptx_dev->default_dims[i];\n+\n+\t    if (default_dim_p[GOMP_DIM_VECTOR])\n+\t      dims[GOMP_DIM_VECTOR]\n+\t\t= MIN (dims[GOMP_DIM_VECTOR],\n+\t\t       (targ_fn->max_threads_per_block / warp_size\n+\t\t\t* warp_size));\n+\n+\t    if (default_dim_p[GOMP_DIM_WORKER])\n+\t      dims[GOMP_DIM_WORKER]\n+\t\t= MIN (dims[GOMP_DIM_WORKER],\n+\t\t       targ_fn->max_threads_per_block / dims[GOMP_DIM_VECTOR]);\n \t  }\n+\telse\n+\t  {\n+\t    /* Handle the case that the compiler allows the runtime to choose\n+\t       the vector-length conservatively, by ignoring\n+\t       gomp_openacc_dims[GOMP_DIM_VECTOR].  TODO: actually handle\n+\t       it.  */\n+\t    int vectors = 0;\n+\t    /* TODO: limit gomp_openacc_dims[GOMP_DIM_WORKER] such that that\n+\t       gomp_openacc_dims[GOMP_DIM_WORKER] * actual_vectors does not\n+\t       exceed targ_fn->max_threads_per_block. */\n+\t    int workers = gomp_openacc_dims[GOMP_DIM_WORKER];\n+\t    int gangs = gomp_openacc_dims[GOMP_DIM_GANG];\n+\t    int grids, blocks;\n+\n+\t    CUDA_CALL_ASSERT (cuOccupancyMaxPotentialBlockSize, &grids,\n+\t\t\t      &blocks, function, NULL, 0,\n+\t\t\t      dims[GOMP_DIM_WORKER] * dims[GOMP_DIM_VECTOR]);\n+\t    GOMP_PLUGIN_debug (0, \"cuOccupancyMaxPotentialBlockSize: \"\n+\t\t\t       \"grid = %d, block = %d\\n\", grids, blocks);\n+\n+\t    /* Keep the num_gangs proportional to the block size.  In\n+\t       the case were a block size is limited by shared-memory\n+\t       or the register file capacity, the runtime will not\n+\t       excessively over assign gangs to the multiprocessor\n+\t       units if their state is going to be swapped out even\n+\t       more than necessary. The constant factor 2 is there to\n+\t       prevent threads from idling when there is insufficient\n+\t       work for them.  */\n+\t    if (gangs == 0)\n+\t      gangs = 2 * grids * (blocks / warp_size);\n+\n+\t    if (vectors == 0)\n+\t      vectors = warp_size;\n+\n+\t    if (workers == 0)\n+\t      {\n+\t\tint actual_vectors = (default_dim_p[GOMP_DIM_VECTOR]\n+\t\t\t\t      ? vectors\n+\t\t\t\t      : dims[GOMP_DIM_VECTOR]);\n+\t\tworkers = blocks / actual_vectors;\n+\t      }\n \n-\tif (default_dim_p[GOMP_DIM_VECTOR])\n-\t  dims[GOMP_DIM_VECTOR]\n-\t    = MIN (dims[GOMP_DIM_VECTOR],\n-\t\t   (targ_fn->max_threads_per_block / warp_size * warp_size));\n-\n-\tif (default_dim_p[GOMP_DIM_WORKER])\n-\t  dims[GOMP_DIM_WORKER]\n-\t    = MIN (dims[GOMP_DIM_WORKER],\n-\t\t   targ_fn->max_threads_per_block / dims[GOMP_DIM_VECTOR]);\n+\t    for (i = 0; i != GOMP_DIM_MAX; i++)\n+\t      if (default_dim_p[i])\n+\t\tswitch (i)\n+\t\t  {\n+\t\t  case GOMP_DIM_GANG: dims[i] = gangs; break;\n+\t\t  case GOMP_DIM_WORKER: dims[i] = workers; break;\n+\t\t  case GOMP_DIM_VECTOR: dims[i] = vectors; break;\n+\t\t  default: GOMP_PLUGIN_fatal (\"invalid dim\");\n+\t\t  }\n+\t  }\n       }\n     }\n "}]}