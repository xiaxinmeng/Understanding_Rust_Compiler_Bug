{"sha": "c04343dbab902e5b8a5f047266645a5e7d40a5ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA0MzQzZGJhYjkwMmU1YjhhNWYwNDcyNjY2NDVhNWU3ZDQwYTVlZA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-05-07T12:19:29Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-05-11T14:37:19Z"}, "message": "Explicitly track crate names within the mappings\n\nWe need to track crate names including the translation units one for symbol\nmangling purposes. This defaults to TestCrate for now and will need more\nwork to actually make this a compiler option as part of imports and\nvisbility.", "tree": {"sha": "96f4029948ed5263ed7ef218a58f49c774948a89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96f4029948ed5263ed7ef218a58f49c774948a89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c04343dbab902e5b8a5f047266645a5e7d40a5ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04343dbab902e5b8a5f047266645a5e7d40a5ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c04343dbab902e5b8a5f047266645a5e7d40a5ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04343dbab902e5b8a5f047266645a5e7d40a5ed/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "299d98d8e6fcb8d014b299adc426d93cf0c8050f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299d98d8e6fcb8d014b299adc426d93cf0c8050f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/299d98d8e6fcb8d014b299adc426d93cf0c8050f"}], "stats": {"total": 59, "additions": 47, "deletions": 12}, "files": [{"sha": "5e9746fc7269246659626ae62a36f6a7e1defcb3", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04343dbab902e5b8a5f047266645a5e7d40a5ed/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04343dbab902e5b8a5f047266645a5e7d40a5ed/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=c04343dbab902e5b8a5f047266645a5e7d40a5ed", "patch": "@@ -70,6 +70,10 @@ const char *kHIRDumpFile = \"gccrs.hir.dump\";\n const char *kHIRTypeResolutionDumpFile = \"gccrs.type-resolution.dump\";\n const char *kTargetOptionsDumpFile = \"gccrs.target-options.dump\";\n \n+// FIME in the imports/visibility milestone - this needs to be command line\n+// option\n+const std::string kDefaultCrateName = \"TestCrate\";\n+\n // Implicitly enable a target_feature (and recursively enable dependencies).\n void\n Session::implicitly_enable_feature (std::string feature_name)\n@@ -445,6 +449,10 @@ Session::enable_dump (std::string arg)\n void\n Session::parse_files (int num_files, const char **files)\n {\n+  auto mappings = Analysis::Mappings::get ();\n+  CrateNum crate_num = mappings->setup_crate_mappings (kDefaultCrateName);\n+  mappings->set_current_crate (crate_num);\n+\n   for (int i = 0; i < num_files; i++)\n     {\n       printf (\"Attempting to parse file: %s\\n\", files[i]);"}, {"sha": "3a0cbb10ec1686461aa11e853caa49288c26266c", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04343dbab902e5b8a5f047266645a5e7d40a5ed/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04343dbab902e5b8a5f047266645a5e7d40a5ed/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=c04343dbab902e5b8a5f047266645a5e7d40a5ed", "patch": "@@ -107,7 +107,7 @@ Mappings::get ()\n {\n   static std::unique_ptr<Mappings> instance;\n   if (!instance)\n-    instance = std::move (std::unique_ptr<Mappings> (new Mappings ()));\n+    instance = std::unique_ptr<Mappings> (new Mappings ());\n \n   return instance.get ();\n }\n@@ -125,18 +125,23 @@ Mappings::set_current_crate (CrateNum crateNum)\n }\n \n CrateNum\n-Mappings::get_current_crate ()\n+Mappings::setup_crate_mappings (std::string crate_name)\n {\n-  // HACK\n-  if (hirIdIter.find (currentCrateNum) == hirIdIter.end ())\n-    {\n-      hirIdIter[currentCrateNum] = UNKNOWN_HIRID;\n-      nodeIdIter[currentCrateNum] = UNKNOWN_NODEID;\n-      localIdIter[currentCrateNum] = UNKNOWN_LOCAL_DEFID;\n-      nodeIdToHirMappings[currentCrateNum] = {};\n-      locations[currentCrateNum] = {};\n-    }\n+  CrateNum crate_num = get_next_crate_num ();\n \n+  hirIdIter[crate_num] = UNKNOWN_HIRID;\n+  nodeIdIter[crate_num] = UNKNOWN_NODEID;\n+  localIdIter[crate_num] = UNKNOWN_LOCAL_DEFID;\n+  nodeIdToHirMappings[crate_num] = {};\n+  locations[crate_num] = {};\n+  crate_names[crate_num] = crate_name;\n+\n+  return crate_num;\n+}\n+\n+CrateNum\n+Mappings::get_current_crate () const\n+{\n   return currentCrateNum;\n }\n "}, {"sha": "a198be6db9359ab0f5083c3763e5afd5651cb349", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c04343dbab902e5b8a5f047266645a5e7d40a5ed/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c04343dbab902e5b8a5f047266645a5e7d40a5ed/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=c04343dbab902e5b8a5f047266645a5e7d40a5ed", "patch": "@@ -83,7 +83,26 @@ class Mappings\n \n   CrateNum get_next_crate_num ();\n   void set_current_crate (CrateNum crateNum);\n-  CrateNum get_current_crate ();\n+  CrateNum get_current_crate () const;\n+  CrateNum setup_crate_mappings (std::string crate_name);\n+\n+  bool get_crate_name (CrateNum crate_num, std::string &name) const\n+  {\n+    auto it = crate_names.find (crate_num);\n+    if (it == crate_names.end ())\n+      return false;\n+\n+    name.assign (it->second);\n+    return true;\n+  }\n+\n+  std::string get_current_crate_name () const\n+  {\n+    std::string name;\n+    bool ok = get_crate_name (get_current_crate (), name);\n+    rust_assert (ok);\n+    return name;\n+  }\n \n   NodeId get_next_node_id () { return get_next_node_id (get_current_crate ()); }\n   NodeId get_next_node_id (CrateNum crateNum);\n@@ -212,6 +231,9 @@ class Mappings\n \n   // all hirid nodes\n   std::map<CrateNum, std::set<HirId> > hirNodesWithinCrate;\n+\n+  // crate names\n+  std::map<CrateNum, std::string> crate_names;\n };\n \n } // namespace Analysis"}]}