{"sha": "6e27bc2b885207d51500b2c42f949ca5073dbe72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUyN2JjMmI4ODUyMDdkNTE1MDBiMmM0MmY5NDljYTUwNzNkYmU3Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-09T08:52:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-09T09:16:58Z"}, "message": "Avoid full DOM walk in LIM fill_always_executed_in\n\nThis avoids a full DOM walk via get_loop_body_in_dom_order in the\nloop body walk of fill_always_executed_in which is often terminating\nthe walk of a loop body early by integrating the DOM walk of\nget_loop_body_in_dom_order with the actual processing done by\nfill_always_executed_in.  This trades the fully populated loop\nbody array with a worklist allocation of the same size and thus\nshould be a strict improvement over the recursive approach of\nget_loop_body_in_dom_order.\n\n2021-09-09  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-loop-im.c (fill_always_executed_in_1): Integrate\n\tDOM walk from get_loop_body_in_dom_order using a worklist\n\tapproach.", "tree": {"sha": "b8e5f31bd8012fb603362bc9d58869ae41ea47c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8e5f31bd8012fb603362bc9d58869ae41ea47c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e27bc2b885207d51500b2c42f949ca5073dbe72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e27bc2b885207d51500b2c42f949ca5073dbe72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e27bc2b885207d51500b2c42f949ca5073dbe72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e27bc2b885207d51500b2c42f949ca5073dbe72/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f77f3adebde0547ed734a260f29e5afc85dcbe49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f77f3adebde0547ed734a260f29e5afc85dcbe49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f77f3adebde0547ed734a260f29e5afc85dcbe49"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "5d6845478e76c70cc3f2baec06d59a37b53902c2", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e27bc2b885207d51500b2c42f949ca5073dbe72/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e27bc2b885207d51500b2c42f949ca5073dbe72/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=6e27bc2b885207d51500b2c42f949ca5073dbe72", "patch": "@@ -3030,19 +3030,19 @@ do_store_motion (void)\n static void\n fill_always_executed_in_1 (class loop *loop, sbitmap contains_call)\n {\n-  basic_block bb = NULL, *bbs, last = NULL;\n-  unsigned i;\n+  basic_block bb = NULL, last = NULL;\n   edge e;\n   class loop *inn_loop = loop;\n \n   if (ALWAYS_EXECUTED_IN (loop->header) == NULL)\n     {\n-      bbs = get_loop_body_in_dom_order (loop);\n-\n-      for (i = 0; i < loop->num_nodes; i++)\n+      auto_vec<basic_block, 64> worklist;\n+      worklist.reserve_exact (loop->num_nodes);\n+      worklist.quick_push (loop->header);\n+      do\n \t{\n \t  edge_iterator ei;\n-\t  bb = bbs[i];\n+\t  bb = worklist.pop ();\n \n \t  if (!flow_bb_inside_loop_p (inn_loop, bb))\n \t    {\n@@ -3083,7 +3083,32 @@ fill_always_executed_in_1 (class loop *loop, sbitmap contains_call)\n \t\t since it might not be finite.  */\n \t      inn_loop = bb->loop_father;\n \t    }\n+\n+\t  /* Walk the body of LOOP sorted by dominance relation.  Additionally,\n+\t     if a basic block S dominates the latch, then only blocks dominated\n+\t     by S are after it.\n+\t     This is get_loop_body_in_dom_order using a worklist algorithm and\n+\t     stopping once we are no longer interested in visiting further\n+\t     blocks.  */\n+\t  unsigned old_len = worklist.length ();\n+\t  unsigned postpone = 0;\n+\t  for (basic_block son = first_dom_son (CDI_DOMINATORS, bb);\n+\t       son;\n+\t       son = next_dom_son (CDI_DOMINATORS, son))\n+\t    {\n+\t      if (!flow_bb_inside_loop_p (loop, son))\n+\t\tcontinue;\n+\t      if (dominated_by_p (CDI_DOMINATORS, loop->latch, son))\n+\t\tpostpone = worklist.length ();\n+\t      worklist.quick_push (son);\n+\t    }\n+\t  if (postpone)\n+\t    /* Postponing the block that dominates the latch means\n+\t       processing it last and thus putting it earliest in the\n+\t       worklist.  */\n+\t    std::swap (worklist[old_len], worklist[postpone]);\n \t}\n+      while (!worklist.is_empty ());\n \n       while (1)\n \t{\n@@ -3095,8 +3120,6 @@ fill_always_executed_in_1 (class loop *loop, sbitmap contains_call)\n \t    break;\n \t  last = get_immediate_dominator (CDI_DOMINATORS, last);\n \t}\n-\n-      free (bbs);\n     }\n \n   for (loop = loop->inner; loop; loop = loop->next)"}]}