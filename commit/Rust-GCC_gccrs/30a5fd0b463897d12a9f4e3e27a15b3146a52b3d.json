{"sha": "30a5fd0b463897d12a9f4e3e27a15b3146a52b3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBhNWZkMGI0NjM4OTdkMTJhOWY0ZTNlMjdhMTViMzE0NmE1MmIzZA==", "commit": {"author": {"name": "Jerome Lambourg", "email": "lambourg@adacore.com", "date": "2018-12-11T11:10:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:10:37Z"}, "message": "[Ada] Remove vxlink and vxaddr2line from this repository\n\nThose tools need a dedicated repository as they're VxWorks specific and\nnot related with the Ada front-end.\n\n2018-12-11  Jerome Lambourg  <lambourg@adacore.com>\n\ngcc/ada/\n\n\t* vxaddr2line.adb, vxlink-bind.adb, vxlink-bind.ads,\n\tvxlink-link.adb, vxlink-link.ads, vxlink-main.adb, vxlink.adb,\n\tvxlink.ads: Remove.\n\t* gcc-interface/Make-lang.in, gcc-interface/Makefile.in: Remove\n\tbits for vxaddr2line.\n\nFrom-SVN: r266995", "tree": {"sha": "5ce7d44af7605fd8cab79d0a9db905b696078b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ce7d44af7605fd8cab79d0a9db905b696078b62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30a5fd0b463897d12a9f4e3e27a15b3146a52b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a5fd0b463897d12a9f4e3e27a15b3146a52b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a5fd0b463897d12a9f4e3e27a15b3146a52b3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a5fd0b463897d12a9f4e3e27a15b3146a52b3d/comments", "author": {"login": "lambourg", "id": 480233, "node_id": "MDQ6VXNlcjQ4MDIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/480233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambourg", "html_url": "https://github.com/lambourg", "followers_url": "https://api.github.com/users/lambourg/followers", "following_url": "https://api.github.com/users/lambourg/following{/other_user}", "gists_url": "https://api.github.com/users/lambourg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambourg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambourg/subscriptions", "organizations_url": "https://api.github.com/users/lambourg/orgs", "repos_url": "https://api.github.com/users/lambourg/repos", "events_url": "https://api.github.com/users/lambourg/events{/privacy}", "received_events_url": "https://api.github.com/users/lambourg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2401c98f33bb8d615cea1da559599eae7a26ac65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2401c98f33bb8d615cea1da559599eae7a26ac65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2401c98f33bb8d615cea1da559599eae7a26ac65"}], "stats": {"total": 1731, "additions": 8, "deletions": 1723}, "files": [{"sha": "44424dee5da2378c98ed03ecb2a744de488d251a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a5fd0b463897d12a9f4e3e27a15b3146a52b3d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a5fd0b463897d12a9f4e3e27a15b3146a52b3d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=30a5fd0b463897d12a9f4e3e27a15b3146a52b3d", "patch": "@@ -1,3 +1,11 @@\n+2018-12-11  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* vxaddr2line.adb, vxlink-bind.adb, vxlink-bind.ads,\n+\tvxlink-link.adb, vxlink-link.ads, vxlink-main.adb, vxlink.adb,\n+\tvxlink.ads: Remove.\n+\t* gcc-interface/Make-lang.in, gcc-interface/Makefile.in: Remove\n+\tbits for vxaddr2line.\n+\n 2018-12-11  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_aggr.adb, exp_ch7.adb, gnat1drv.adb, sem_ch10.adb,"}, {"sha": "de23b1410f2753f9e6fe458173894cc50f9544b0", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a5fd0b463897d12a9f4e3e27a15b3146a52b3d/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a5fd0b463897d12a9f4e3e27a15b3146a52b3d/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=30a5fd0b463897d12a9f4e3e27a15b3146a52b3d", "patch": "@@ -675,12 +675,10 @@ regnattools:\n cross-gnattools: force\n \t$(MAKE) -C ada $(ADA_TOOLS_FLAGS_TO_PASS) gnattools1-re\n \t$(MAKE) -C ada $(ADA_TOOLS_FLAGS_TO_PASS) gnattools2\n-\t$(MAKE) -C ada $(ADA_TOOLS_FLAGS_TO_PASS) gnattools4\n \n canadian-gnattools: force\n \t$(MAKE) -C ada $(ADA_TOOLS_FLAGS_TO_PASS) gnattools1-re\n \t$(MAKE) -C ada $(ADA_TOOLS_FLAGS_TO_PASS) gnattools2\n-\t$(MAKE) -C ada $(ADA_TOOLS_FLAGS_TO_PASS) gnattools4\n \n gnatlib gnatlib-sjlj gnatlib-zcx gnatlib-shared: force\n \t$(MAKE) -C ada $(COMMON_FLAGS_TO_PASS)  \\\n@@ -811,8 +809,6 @@ doc/gnat-style.pdf: ada/gnat-style.texi $(gcc_docdir)/include/fdl.texi\n # gnatlink, gnatls, gnatmake, gnatname, gnatprep, gnatxref, gnatfind,\n # gnatclean).\n # gnatdll is only used on Windows.\n-# vxaddr2line is only used for cross VxWorks ports (it calls the underlying\n-# cross addr2line).\n ada.install-common:\n \t$(MKDIR) $(DESTDIR)$(bindir)\n \t-if [ -f gnat1$(exeext) ] ; \\\n@@ -829,11 +825,6 @@ ada.install-common:\n \t  done; \\\n \t  $(RM) $(DESTDIR)$(bindir)/gnatdll$(exeext); \\\n \t  $(INSTALL_PROGRAM) gnatdll$(exeext) $(DESTDIR)$(bindir)/gnatdll$(exeext); \\\n-\t  if [ -f vxaddr2line$(exeext) ] ; \\\n-\t  then \\\n-\t    $(RM) $(DESTDIR)$(bindir)/vxaddr2line$(exeext); \\\n-\t    $(INSTALL_PROGRAM) vxaddr2line$(exeext) $(DESTDIR)$(bindir)/vxaddr2line$(exeext); \\\n-\t  fi ; \\\n \tfi\n \n #\n@@ -859,7 +850,6 @@ ada.uninstall:\n \t  -$(RM) $(DESTDIR)$(bindir)/$$install_name; \\\n \tdone\n \t-$(RM) $(DESTDIR)$(tooldir)/bin/gnatdll$(exeext)\n-\t-$(RM) $(DESTDIR)$(tooldir)/bin/vxaddr2line$(exeext)\n \n # Clean hooks:\n # A lot of the ancillary files are deleted by the main makefile."}, {"sha": "07dc1e598139c5b2e2a8d66880acaa644bc5d8d9", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a5fd0b463897d12a9f4e3e27a15b3146a52b3d/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a5fd0b463897d12a9f4e3e27a15b3146a52b3d/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=30a5fd0b463897d12a9f4e3e27a15b3146a52b3d", "patch": "@@ -434,19 +434,6 @@ gnattools2: ../stamp-tools\n \t$(MAKE) -C tools -f ../Makefile $(TOOLS_FLAGS_TO_PASS) \\\n \t  TOOLSCASE=native common-tools $(EXTRA_GNATTOOLS)\n \n-# those tools are only built for the cross version\n-gnattools4: ../stamp-tools\n-ifeq ($(ENABLE_VXADDR2LINE),true)\n-\t$(MAKE) -C tools -f ../Makefile $(TOOLS_FLAGS_TO_PASS) \\\n-\t  TOOLSCASE=cross top_buildir=../../.. \\\n-\t  ../../vxaddr2line$(exeext)\n-endif\n-ifeq ($(ENABLE_VXLINK),true)\n-\t$(MAKE) -C tools -f ../Makefile $(TOOLS_FLAGS_TO_PASS) \\\n-\t  TOOLSCASE=cross top_build=../../.. \\\n-\t  ../../vxlink$(exeext)\n-endif\n-\n common-tools: ../stamp-tools\n \t$(GNATMAKE) -j0 -c -b $(ADA_INCLUDES) \\\n \t  --GNATBIND=\"$(GNATBIND)\" --GCC=\"$(CC) $(ALL_ADAFLAGS)\" \\\n@@ -477,18 +464,6 @@ common-tools: ../stamp-tools\n \t$(GNATLINK) -v gnatdll -o $@ \\\n \t  --GCC=\"$(CC) $(ADA_INCLUDES)\" --LINK=\"$(GCC_LINK)\" $(TOOLS_LIBS)\n \n-../../vxaddr2line$(exeext): ../stamp-tools\n-\t$(GNATMAKE) -c  $(ADA_INCLUDES) vxaddr2line --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n-\t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) vxaddr2line\n-\t$(GNATLINK) -v vxaddr2line -o $@ \\\n-\t  --GCC=\"$(CC) $(ADA_INCLUDES)\" --LINK=\"$(GCC_LINK)\" ../targext.o $(CLIB)\n-\n-../../vxlink$(exeext): ../stamp-tools\n-\t$(GNATMAKE) -c  $(ADA_INCLUDES) vxlink-main --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n-\t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) vxlink-main\n-\t$(GNATLINK) -v vxlink-main -o $@ \\\n-\t  --GCC=\"$(CC) $(ADA_INCLUDES)\" --LINK=\"$(GCC_LINK)\"\n-\n gnatmake-re: ../stamp-tools\n \t$(GNATMAKE) -j0 $(ADA_INCLUDES) -u sdefault --GCC=\"$(CC) $(MOST_ADA_FLAGS)\"\n \t$(GNATMAKE) -j0 -c $(ADA_INCLUDES) gnatmake --GCC=\"$(CC) $(ALL_ADAFLAGS)\""}, {"sha": "e893aa4f65869b5b89e3858cd9907cda18d3c0d6", "filename": "gcc/ada/vxaddr2line.adb", "status": "removed", "additions": 0, "deletions": 525, "changes": 525, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxaddr2line.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxaddr2line.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxaddr2line.adb?ref=2401c98f33bb8d615cea1da559599eae7a26ac65", "patch": "@@ -1,525 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                           V X A D D R 2 L I N E                          --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---                     Copyright (C) 2002-2018, AdaCore                     --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This program is meant to be used with vxworks to compute symbolic\n---  backtraces on the host from non-symbolic backtraces obtained on the target.\n-\n---  The basic idea is to automate the computation of the necessary address\n---  adjustments prior to calling addr2line when the application has only been\n---  partially linked on the host.\n-\n---  Variants for various targets are supported, and the command line should\n---  be like :\n-\n---  <target>-addr2line [-a <target_arch>] <exe_file> <ref_address>\n---                     <backtrace addresses>\n-\n---  Where:\n---  <target_arch> :\n---    selects the target architecture. In the absence of this parameter the\n---    default variant is chosen based on the Detect_Arch result. Generally,\n---    this parameter will only be used if vxaddr2line is recompiled manually.\n---    Otherwise, the command name will always be of the form:\n---      <target>-vxaddr2line\n---    where there is no ambiguity on the target's architecture.\n-\n---  <exe_file> :\n---    The name of the partially linked binary file for the application.\n-\n---  <ref_address> :\n---    Runtime address (on the target) of a reference symbol you choose. This\n---    name must match the value of the Ref_Symbol variable declared below.\n---    A symbol with a small offset from the beginning of the text segment is\n---    better, so \"adainit\" is a good choice.\n-\n---  <backtrace addresses> :\n---    The call chain addresses you obtained at run time on the target and\n---    for which you want a symbolic association.\n-\n---  TO ADD A NEW ARCHITECTURE add an appropriate value to Architecture type\n---  (in a format <host>_<target>), and then an appropriate value to Config_List\n---  array\n-\n-with Ada.Text_IO;       use Ada.Text_IO;\n-with Ada.Command_Line;  use Ada.Command_Line;\n-with Ada.Strings.Fixed; use Ada.Strings.Fixed;\n-with Interfaces;        use Interfaces;\n-\n-with GNAT.OS_Lib;               use GNAT.OS_Lib;\n-with GNAT.Directory_Operations; use GNAT.Directory_Operations;\n-with GNAT.Expect;               use GNAT.Expect;\n-with GNAT.Regpat;               use GNAT.Regpat;\n-\n-procedure VxAddr2Line is\n-\n-   package Unsigned_64_IO is new Modular_IO (Unsigned_64);\n-   --  Instantiate Modular_IO to have Put\n-\n-   Ref_Symbol : constant String := \"adainit\";\n-   --  This is the name of the reference symbol whose runtime address must\n-   --  be provided as the <ref_address> argument.\n-\n-   --  All supported architectures\n-   type Architecture is\n-     (LINUX_AARCH64,\n-      LINUX_ARM,\n-      LINUX_E500V2,\n-      LINUX_I586,\n-      LINUX_POWERPC,\n-      LINUX_POWERPC64,\n-      LINUX_X86_64,\n-      WINDOWS_AARCH64,\n-      WINDOWS_ARM,\n-      WINDOWS_E500V2,\n-      WINDOWS_I586,\n-      WINDOWS_POWERPC,\n-      WINDOWS_POWERPC64,\n-      WINDOWS_X86_64);\n-\n-   type Arch_Record is record\n-      Addr2line_Binary : String_Access;\n-      --  Name of the addr2line utility to use\n-\n-      Nm_Binary : String_Access;\n-      --  Name of the host nm utility, which will be used to find out the\n-      --  offset of the reference symbol in the text segment of the partially\n-      --  linked executable.\n-\n-      Addr_Digits_To_Skip : Integer;\n-      --  When addresses such as 0xfffffc0001dfed50 are provided, for instance\n-      --  on ALPHA, indicate the number of leading digits that can be ignored,\n-      --  which will avoid computational overflows. Typically only useful when\n-      --  64bit addresses are provided.\n-\n-      Bt_Offset_From_Call : Unsigned_64;\n-      --  Offset from a backtrace address to the address of the corresponding\n-      --  call instruction. This should always be 0, except on platforms where\n-      --  the backtrace addresses actually correspond to return and not call\n-      --  points. In such cases, a negative value is most likely.\n-   end record;\n-\n-   --  Configuration for each of the architectures\n-   Arch_List : array (Architecture'Range) of Arch_Record :=\n-     (LINUX_AARCH64 =>\n-        (Addr2line_Binary    => null,\n-         Nm_Binary           => null,\n-         Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -2),\n-      LINUX_ARM =>\n-        (Addr2line_Binary    => null,\n-         Nm_Binary           => null,\n-         Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -2),\n-      LINUX_E500V2 =>\n-        (Addr2line_Binary    => null,\n-         Nm_Binary           => null,\n-         Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -4),\n-      LINUX_I586 =>\n-        (Addr2line_Binary    => null,\n-         Nm_Binary           => null,\n-         Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -2),\n-      LINUX_POWERPC =>\n-        (Addr2line_Binary    => null,\n-         Nm_Binary           => null,\n-         Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -4),\n-      LINUX_POWERPC64 =>\n-        (Addr2line_Binary    => null,\n-         Nm_Binary           => null,\n-         Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -4),\n-      LINUX_X86_64 =>\n-        (Addr2line_Binary    => null,\n-         Nm_Binary           => null,\n-         Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -2),\n-      WINDOWS_AARCH64 =>\n-        (Addr2line_Binary    => null,\n-         Nm_Binary           => null,\n-         Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -2),\n-      WINDOWS_ARM =>\n-        (Addr2line_Binary    => null,\n-         Nm_Binary           => null,\n-         Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -2),\n-      WINDOWS_E500V2 =>\n-        (Addr2line_Binary    => null,\n-         Nm_Binary           => null,\n-         Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -4),\n-      WINDOWS_I586 =>\n-        (Addr2line_Binary    => null,\n-         Nm_Binary           => null,\n-         Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -2),\n-      WINDOWS_POWERPC =>\n-        (Addr2line_Binary    => null,\n-         Nm_Binary           => null,\n-         Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -4),\n-      WINDOWS_POWERPC64 =>\n-        (Addr2line_Binary    => null,\n-         Nm_Binary           => null,\n-         Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -4),\n-      WINDOWS_X86_64 =>\n-        (Addr2line_Binary    => null,\n-         Nm_Binary           => null,\n-         Addr_Digits_To_Skip => 0,\n-         Bt_Offset_From_Call => -2)\n-     );\n-\n-   --  Current architecture\n-   Cur_Arch : Architecture;\n-\n-   --  State of architecture detection\n-   Detect_Success : Boolean := False;\n-\n-   -----------------------\n-   -- Local subprograms --\n-   -----------------------\n-\n-   procedure Error (Msg : String);\n-   pragma No_Return (Error);\n-   --  Prints the message and then terminates the program\n-\n-   procedure Usage;\n-   pragma No_Return (Usage);\n-   --  Displays the short help message and then terminates the program\n-\n-   function Get_Reference_Offset return Unsigned_64;\n-   --  Computes the static offset of the reference symbol by calling nm\n-\n-   function Get_Value_From_Hex_Arg (Arg : Natural) return Unsigned_64;\n-   --  Threats the argument number Arg as a C-style hexadecimal literal\n-   --  and returns its integer value\n-\n-   function Hex_Image (Value : Unsigned_64) return String_Access;\n-   --  Returns access to a string that contains hexadecimal image of Value\n-\n-   --  Separate functions that provide build-time customization:\n-\n-   procedure Detect_Arch;\n-   --  Saves in Cur_Arch the current architecture, based on the name of\n-   --  vxaddr2line instance and properties of the host. Detect_Success is False\n-   --  if detection fails\n-\n-   -----------------\n-   -- Detect_Arch --\n-   -----------------\n-\n-   procedure Detect_Arch is\n-      Name   : constant String := Base_Name (Command_Name);\n-      Proc   : constant String :=\n-                 Name (Name'First .. Index (Name, \"-\") - 1);\n-      Target : constant String :=\n-                 Name (Name'First .. Index (Name, \"vxaddr2line\") - 1);\n-\n-   begin\n-      Detect_Success := False;\n-\n-      if Proc = \"\" then\n-         return;\n-      end if;\n-\n-      --  Let's detect a Linux or Windows host.\n-      if Directory_Separator = '/' then\n-         Cur_Arch := Architecture'Value (\"linux_\" & Proc);\n-      else\n-         Cur_Arch := Architecture'Value (\"windows_\" & Proc);\n-      end if;\n-\n-      if Arch_List (Cur_Arch).Addr2line_Binary = null then\n-         Arch_List (Cur_Arch).Addr2line_Binary := new String'\n-           (Target & \"addr2line\");\n-      end if;\n-      if Arch_List (Cur_Arch).Nm_Binary = null then\n-         Arch_List (Cur_Arch).Nm_Binary := new String'\n-           (Target & \"nm\");\n-      end if;\n-\n-      Detect_Success := True;\n-\n-   exception\n-      when others =>\n-         return;\n-   end Detect_Arch;\n-\n-   -----------\n-   -- Error --\n-   -----------\n-\n-   procedure Error (Msg : String) is\n-   begin\n-      Put_Line (Msg);\n-      OS_Exit (1);\n-      raise Program_Error;\n-   end Error;\n-\n-   --------------------------\n-   -- Get_Reference_Offset --\n-   --------------------------\n-\n-   function Get_Reference_Offset return Unsigned_64 is\n-      Nm_Cmd  : constant String_Access :=\n-                  Locate_Exec_On_Path (Arch_List (Cur_Arch).Nm_Binary.all);\n-\n-      Nm_Args : constant Argument_List :=\n-                  (new String'(\"-P\"),\n-                   new String'(Argument (1)));\n-\n-      Forever   : aliased String := \"^@@@@\";\n-      Reference : aliased String := Ref_Symbol & \"\\s+\\S\\s+([\\da-fA-F]+)\";\n-\n-      Pd     : Process_Descriptor;\n-      Result : Expect_Match;\n-\n-   begin\n-      --  If Nm is not found, abort\n-\n-      if Nm_Cmd = null then\n-         Error (\"Couldn't find \" & Arch_List (Cur_Arch).Nm_Binary.all);\n-      end if;\n-\n-      Non_Blocking_Spawn\n-        (Pd, Nm_Cmd.all, Nm_Args, Buffer_Size => 0, Err_To_Out => True);\n-\n-      --  Expect a string containing the reference symbol\n-\n-      Expect (Pd, Result,\n-              Regexp_Array'(1 => Reference'Unchecked_Access),\n-              Timeout => -1);\n-\n-      --  If we are here, the pattern was matched successfully\n-\n-      declare\n-         Match_String : constant String := Expect_Out_Match (Pd);\n-         Matches      : Match_Array (0 .. 1);\n-         Value        : Unsigned_64 := 0;\n-\n-      begin\n-         Match (Reference, Match_String, Matches);\n-         Value := Unsigned_64'Value\n-           (\"16#\"\n-            & Match_String (Matches (1).First .. Matches (1).Last) & \"#\");\n-\n-         --  Expect a string that will never be emitted, so that the\n-         --  process can be correctly terminated (with Process_Died)\n-\n-         Expect (Pd, Result,\n-                 Regexp_Array'(1 => Forever'Unchecked_Access),\n-                 Timeout => -1);\n-\n-      exception\n-         when Process_Died =>\n-            return Value;\n-      end;\n-\n-      --  We cannot get here\n-\n-      raise Program_Error;\n-\n-   exception\n-      when Invalid_Process =>\n-         Error (\"Could not spawn a process \" & Nm_Cmd.all);\n-\n-      when others    =>\n-\n-         --  The process died without matching the reference symbol or the\n-         --  format wasn't recognized.\n-\n-         Error (\"Unexpected output from \" & Nm_Cmd.all);\n-   end Get_Reference_Offset;\n-\n-   ----------------------------\n-   -- Get_Value_From_Hex_Arg --\n-   ----------------------------\n-\n-   function Get_Value_From_Hex_Arg (Arg : Natural) return Unsigned_64 is\n-      Cur_Arg : constant String := Argument (Arg);\n-      Offset  : Natural;\n-\n-   begin\n-      --  Skip \"0x\" prefix if present\n-\n-      if Cur_Arg'Length > 2 and then Cur_Arg (1 .. 2) = \"0x\" then\n-         Offset := 3;\n-      else\n-         Offset := 1;\n-      end if;\n-\n-      --  Add architecture-specific offset\n-\n-      Offset := Offset + Arch_List (Cur_Arch).Addr_Digits_To_Skip;\n-\n-      --  Convert to value\n-\n-      return Unsigned_64'Value\n-        (\"16#\" & Cur_Arg (Offset .. Cur_Arg'Last) & \"#\");\n-\n-   exception\n-      when Constraint_Error =>\n-\n-         Error (\"Can't parse backtrace address '\" & Cur_Arg & \"'\");\n-         raise;\n-   end Get_Value_From_Hex_Arg;\n-\n-   ---------------\n-   -- Hex_Image --\n-   ---------------\n-\n-   function Hex_Image (Value : Unsigned_64) return String_Access is\n-      Result    : String (1 .. 20);\n-      Start_Pos : Natural;\n-\n-   begin\n-      Unsigned_64_IO.Put (Result, Value, 16);\n-      Start_Pos := Index (Result, \"16#\") + 3;\n-      return new String'(Result (Start_Pos .. Result'Last - 1));\n-   end Hex_Image;\n-\n-   -----------\n-   -- Usage --\n-   -----------\n-\n-   procedure Usage is\n-   begin\n-      Put_Line (\"Usage : \" & Base_Name (Command_Name)\n-                & \" <executable> <\"\n-                & Ref_Symbol & \" offset on target> <addr1> ...\");\n-\n-      OS_Exit (1);\n-   end Usage;\n-\n-   Ref_Static_Offset, Ref_Runtime_Address, Bt_Address : Unsigned_64;\n-\n-   Addr2line_Cmd : String_Access;\n-\n-   Addr2line_Args : Argument_List (1 .. 501);\n-   --  We expect that there won't be more than 500 backtrace frames\n-\n-   Addr2line_Args_Count : Natural;\n-\n-   Success : Boolean;\n-\n---  Start of processing for VxAddr2Line\n-\n-begin\n-\n-   Detect_Arch;\n-\n-   --  There should be at least two arguments\n-\n-   if Argument_Count < 2 then\n-      Usage;\n-   end if;\n-\n-   --  Enforce HARD LIMIT There should be at most 501 arguments. Why 501???\n-\n-   if Argument_Count > 501 then\n-      Error (\"Too many backtrace frames\");\n-   end if;\n-\n-   --  Do we have a valid architecture?\n-\n-   if not Detect_Success then\n-      Put_Line (\"Couldn't detect the architecture\");\n-      return;\n-   end if;\n-\n-   Addr2line_Cmd :=\n-     Locate_Exec_On_Path (Arch_List (Cur_Arch).Addr2line_Binary.all);\n-\n-   --  If Addr2line is not found, abort\n-\n-   if Addr2line_Cmd = null then\n-      Error (\"Couldn't find \" & Arch_List (Cur_Arch).Addr2line_Binary.all);\n-   end if;\n-\n-   --  The first argument specifies the image file. Check if it exists\n-\n-   if not Is_Regular_File (Argument (1)) then\n-      Error (\"Couldn't find the executable \" & Argument (1));\n-   end if;\n-\n-   --  The second argument specifies the reference symbol runtime address.\n-   --  Let's parse and store it\n-\n-   Ref_Runtime_Address := Get_Value_From_Hex_Arg (2);\n-\n-   --  Run nm command to get the reference symbol static offset\n-\n-   Ref_Static_Offset := Get_Reference_Offset;\n-\n-   --  Build addr2line parameters. First, the standard part\n-\n-   Addr2line_Args (1) := new String'(\"--exe=\" & Argument (1));\n-   Addr2line_Args_Count := 1;\n-\n-   --  Now, append to this the adjusted backtraces in arguments 4 and further\n-\n-   for J in 3 .. Argument_Count loop\n-\n-      --  Basically, for each address in the runtime backtrace ...\n-\n-      --  o We compute its offset relatively to the runtime address of the\n-      --    reference symbol,\n-\n-      --  and then ...\n-\n-      --  o We add this offset to the static one for the reference symbol in\n-      --    the executable to find the executable offset corresponding to the\n-      --    backtrace address.\n-\n-      Bt_Address := Get_Value_From_Hex_Arg (J);\n-\n-      Bt_Address :=\n-        Bt_Address - Ref_Runtime_Address\n-                   + Ref_Static_Offset\n-                   + Arch_List (Cur_Arch).Bt_Offset_From_Call;\n-\n-      Addr2line_Args_Count := Addr2line_Args_Count + 1;\n-      Addr2line_Args (Addr2line_Args_Count) := Hex_Image (Bt_Address);\n-   end loop;\n-\n-   --  Run the resulting command\n-\n-   Spawn (Addr2line_Cmd.all,\n-          Addr2line_Args (1 .. Addr2line_Args_Count), Success);\n-\n-   if not Success then\n-      Error (\"Couldn't spawn \" & Addr2line_Cmd.all);\n-   end if;\n-\n-exception\n-   when others =>\n-\n-      --  Mask all exceptions\n-\n-      return;\n-end VxAddr2Line;"}, {"sha": "9f456944506d67bfe606e6dc008d1980f2f3ce96", "filename": "gcc/ada/vxlink-bind.adb", "status": "removed", "additions": 0, "deletions": 390, "changes": 390, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxlink-bind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxlink-bind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxlink-bind.adb?ref=2401c98f33bb8d615cea1da559599eae7a26ac65", "patch": "@@ -1,390 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                          V X L I N K . B I N D                           --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---                     Copyright (C) 2018, AdaCore                          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-pragma Ada_2012;\n-\n-with Ada.Text_IO;       use Ada.Text_IO;\n-with Ada.IO_Exceptions;\n-with Ada.Strings.Fixed;\n-\n-with GNAT.Regpat;       use GNAT.Regpat;\n-\n-package body VxLink.Bind is\n-\n-   function Split_Lines (S : String) return Strings_List.Vector;\n-\n-   function Split (S : String; C : Character) return Strings_List.Vector;\n-\n-   function Parse_Nm_Output (S : String) return Symbol_Sets.Set;\n-\n-   procedure Emit_Module_Dtor\n-     (FP : File_Type);\n-\n-   procedure Emit_CDtor\n-     (FP  : File_Type;\n-      Var : String;\n-      Set : Symbol_Sets.Set);\n-\n-   -----------------\n-   -- Split_Lines --\n-   -----------------\n-\n-   function Split_Lines (S : String) return Strings_List.Vector\n-   is\n-      Last : Natural := S'First;\n-      Ret  : Strings_List.Vector;\n-   begin\n-      for J in S'Range loop\n-         if S (J) = ASCII.CR\n-           and then J < S'Last\n-           and then S (J + 1) = ASCII.LF\n-         then\n-            Ret.Append (S (Last .. J - 1));\n-            Last := J + 2;\n-         elsif S (J) = ASCII.LF then\n-            Ret.Append (S (Last .. J - 1));\n-            Last := J + 1;\n-         end if;\n-      end loop;\n-\n-      if Last <= S'Last then\n-         Ret.Append (S (Last .. S'Last));\n-      end if;\n-\n-      return Ret;\n-   end Split_Lines;\n-\n-   -----------\n-   -- Split --\n-   -----------\n-\n-   function Split (S : String; C : Character) return Strings_List.Vector\n-   is\n-      Last : Natural := S'First;\n-      Ret  : Strings_List.Vector;\n-   begin\n-      for J in S'Range loop\n-         if S (J) = C then\n-            if J > Last then\n-               Ret.Append (S (Last .. J - 1));\n-            end if;\n-\n-            Last := J + 1;\n-         end if;\n-      end loop;\n-\n-      if Last <= S'Last then\n-         Ret.Append (S (Last .. S'Last));\n-      end if;\n-\n-      return Ret;\n-   end Split;\n-\n-   ---------------------\n-   -- Parse_Nm_Output --\n-   ---------------------\n-\n-   function Parse_Nm_Output (S : String) return Symbol_Sets.Set\n-   is\n-      Nm_Regexp        : constant Pattern_Matcher :=\n-                           Compile (\"^[0-9A-Za-z]* ([a-zA-Z]) (.*)$\");\n-      type CDTor_Type is\n-        (CTOR_Diab,\n-         CTOR_Gcc,\n-         DTOR_Diab,\n-         DTOR_Gcc);\n-      subtype CTOR_Type is CDTor_Type range CTOR_Diab .. CTOR_Gcc;\n-      CTOR_DIAB_Regexp : aliased constant Pattern_Matcher :=\n-                           Compile (\"^__?STI__*([0-9]+)_\");\n-      CTOR_GCC_Regexp  : aliased constant Pattern_Matcher :=\n-                           Compile (\"^__?GLOBAL_.I._*([0-9]+)_\");\n-      DTOR_DIAB_Regexp : aliased constant Pattern_Matcher :=\n-                           Compile (\"^__?STD__*([0-9]+)_\");\n-      DTOR_GCC_Regexp  : aliased constant Pattern_Matcher :=\n-                           Compile (\"^__?GLOBAL_.D._*([0-9]+)_\");\n-      type Regexp_Access is access constant Pattern_Matcher;\n-      CDTor_Regexps    : constant array (CDTor_Type) of Regexp_Access :=\n-                           (CTOR_Diab => CTOR_DIAB_Regexp'Access,\n-                            CTOR_Gcc  => CTOR_GCC_Regexp'Access,\n-                            DTOR_Diab => DTOR_DIAB_Regexp'Access,\n-                            DTOR_Gcc  => DTOR_GCC_Regexp'Access);\n-      Result           : Symbol_Sets.Set;\n-\n-   begin\n-      for Line of Split_Lines (S) loop\n-         declare\n-            Sym     : Symbol;\n-            Nm_Grps : Match_Array (0 .. 2);\n-            Ctor_Grps : Match_Array (0 .. 1);\n-         begin\n-            Match (Nm_Regexp, Line, Nm_Grps);\n-\n-            if Nm_Grps (0) /= No_Match then\n-               declare\n-                  Sym_Type : constant Character :=\n-                               Line (Nm_Grps (1).First);\n-                  Sym_Name : constant String :=\n-                               Line (Nm_Grps (2).First .. Nm_Grps (2).Last);\n-               begin\n-                  Sym :=\n-                    (Name     => To_Unbounded_String (Sym_Name),\n-                     Cat      => Sym_Type,\n-                     Internal => False,\n-                     Kind     => Sym_Other,\n-                     Priority => -1);\n-\n-                  for J in CDTor_Regexps'Range loop\n-                     Match (CDTor_Regexps (J).all, Sym_Name, Ctor_Grps);\n-\n-                     if Ctor_Grps (0) /= No_Match then\n-                        if J in CTOR_Type then\n-                           Sym.Kind := Sym_Ctor;\n-                        else\n-                           Sym.Kind := Sym_Dtor;\n-                        end if;\n-\n-                        Sym.Priority := Integer'Value\n-                          (Line (Ctor_Grps (1).First .. Ctor_Grps (1).Last));\n-\n-                        exit;\n-                     end if;\n-                  end loop;\n-\n-                  Result.Include (Sym);\n-               end;\n-            end if;\n-         end;\n-      end loop;\n-\n-      return Result;\n-   end Parse_Nm_Output;\n-\n-   ----------------\n-   -- Initialize --\n-   ----------------\n-\n-   procedure Initialize\n-     (Binder      : out VxLink_Binder;\n-      Object_File : String)\n-   is\n-      Args                   : Arguments_List;\n-      Module_Dtor_Not_Needed : Boolean := False;\n-      Module_Dtor_Needed     : Boolean := False;\n-\n-   begin\n-      Args.Append (Nm);\n-      Args.Append (Object_File);\n-\n-      declare\n-         Output  : constant String := Run (Args);\n-         Symbols : Symbol_Sets.Set;\n-      begin\n-         if Is_Error_State then\n-            return;\n-         end if;\n-\n-         Symbols := Parse_Nm_Output (Output);\n-\n-         for Sym of Symbols loop\n-            if Sym.Kind = Sym_Ctor then\n-               Binder.Constructors.Insert (Sym);\n-            elsif Sym.Kind = Sym_Dtor then\n-               Binder.Destructors.Insert (Sym);\n-            elsif Match (\"_?__.*_atexit$\", To_String (Sym.Name)) then\n-               if Sym.Cat = 'T' then\n-                  Module_Dtor_Not_Needed := True;\n-               elsif Sym.Cat = 'U' then\n-                  Module_Dtor_Needed := True;\n-               end if;\n-            end if;\n-         end loop;\n-\n-         Binder.Module_Dtor_Needed :=\n-           not Module_Dtor_Not_Needed and then Module_Dtor_Needed;\n-      end;\n-   end Initialize;\n-\n-   --------------------\n-   -- Parse_Tag_File --\n-   --------------------\n-\n-   procedure Parse_Tag_File\n-     (Binder : in out VxLink_Binder;\n-      File   : String)\n-   is\n-      FP   : Ada.Text_IO.File_Type;\n-\n-   begin\n-      Open\n-        (FP,\n-         Mode => In_File,\n-         Name => File);\n-      loop\n-         declare\n-            Line   : constant String :=\n-                      Ada.Strings.Fixed.Trim\n-                        (Get_Line (FP), Ada.Strings.Both);\n-            Tokens : Strings_List.Vector;\n-\n-         begin\n-            if Line'Length = 0 then\n-               --  Skip empty lines\n-               null;\n-\n-            elsif Line (Line'First) = '#' then\n-               --  Skip comment\n-               null;\n-\n-            else\n-               Tokens := Split (Line, ' ');\n-               if Tokens.First_Element = \"section\" then\n-                  --  Sections are not used for tags, only when building\n-                  --  kernels. So skip for now\n-                  null;\n-               else\n-                  Binder.Tags_List.Append (Line);\n-               end if;\n-            end if;\n-         end;\n-      end loop;\n-\n-   exception\n-      when Ada.IO_Exceptions.End_Error =>\n-         Close (FP);\n-      when others =>\n-         Log_Error (\"Cannot open file \" & File &\n-                      \". DKM tags won't be generated\");\n-   end Parse_Tag_File;\n-\n-   ----------------------\n-   -- Emit_Module_Dtor --\n-   ----------------------\n-\n-   procedure Emit_Module_Dtor\n-     (FP : File_Type)\n-   is\n-      Dtor_Name : constant String := \"_GLOBAL__D_65536_0_cxa_finalize\";\n-   begin\n-      Put_Line (FP, \"extern void __cxa_finalize(void *);\");\n-      Put_Line (FP, \"static void \" & Dtor_Name & \"()\");\n-      Put_Line (FP, \"{\");\n-      Put_Line (FP, \"  __cxa_finalize(&__dso_handle);\");\n-      Put_Line (FP, \"}\");\n-      Put_Line (FP, \"\");\n-   end Emit_Module_Dtor;\n-\n-   ----------------\n-   -- Emit_CDtor --\n-   ----------------\n-\n-   procedure Emit_CDtor\n-     (FP  : File_Type;\n-      Var : String;\n-      Set : Symbol_Sets.Set)\n-   is\n-   begin\n-      for Sym of Set loop\n-         if not Sym.Internal then\n-            Put_Line (FP, \"extern void \" & To_String (Sym.Name) & \"();\");\n-         end if;\n-      end loop;\n-\n-      New_Line (FP);\n-\n-      Put_Line (FP, \"extern void (*\" & Var & \"[])();\");\n-      Put_Line (FP, \"void (*\" & Var & \"[])() =\");\n-      Put_Line (FP, \"  {\");\n-      for Sym of Set loop\n-         Put_Line (FP, \"  \" & To_String (Sym.Name) & \",\");\n-      end loop;\n-      Put_Line (FP, \"  0};\");\n-      New_Line (FP);\n-   end Emit_CDtor;\n-\n-   ---------------\n-   -- Emit_CTDT --\n-   ---------------\n-\n-   procedure Emit_CTDT\n-     (Binder    : in out VxLink_Binder;\n-      Namespace : String)\n-   is\n-      FP         : Ada.Text_IO.File_Type;\n-      CDtor_File : constant String := Namespace & \"-cdtor.c\";\n-   begin\n-      Binder.CTDT_File := To_Unbounded_String (CDtor_File);\n-      Create\n-        (File => FP,\n-         Name => CDtor_File);\n-      Put_Line (FP, \"#if defined(_HAVE_TOOL_XTORS)\");\n-      Put_Line (FP, \"#include <vxWorks.h>\");\n-      if Binder.Module_Dtor_Needed then\n-         Put_Line (FP, \"#define _WRS_NEED_CALL_CXA_FINALIZE\");\n-      end if;\n-      Put_Line (FP, \"#include TOOL_HEADER (toolXtors.h)\");\n-      Put_Line (FP, \"#else\");\n-      Put_Line (FP, \"\");\n-\n-      if Binder.Module_Dtor_Needed then\n-         Emit_Module_Dtor (FP);\n-      end if;\n-\n-      Emit_CDtor (FP, \"_ctors\", Binder.Constructors);\n-      Emit_CDtor (FP, \"_dtors\", Binder.Destructors);\n-\n-      Put_Line (FP, \"#endif\");\n-\n-      if not Binder.Tags_List.Is_Empty then\n-         New_Line (FP);\n-         Put_Line (FP, \"/* build variables */\");\n-         Put_Line (FP, \"__asm(\"\"  .section \\\"\".wrs_build_vars\\\"\",\\\"\"a\\\"\"\"\");\");\n-         for Tag of Binder.Tags_List loop\n-            Put_Line (FP, \"__asm(\"\"  .ascii \\\"\"\" & Tag & \"\\\"\"\"\");\");\n-            Put_Line (FP, \"__asm(\"\"  .byte 0\"\");\");\n-         end loop;\n-         Put_Line (FP, \"__asm(\"\"  .ascii \\\"\"end\\\"\"\"\");\");\n-         Put_Line (FP, \"__asm(\"\"  .byte 0\"\");\");\n-      end if;\n-\n-      Close (FP);\n-\n-   exception\n-      when others =>\n-         Close (FP);\n-         Set_Error_State (\"Internal error\");\n-         raise;\n-   end Emit_CTDT;\n-\n-   ---------------\n-   -- CTDT_File --\n-   ---------------\n-\n-   function CTDT_File (Binder : VxLink_Binder) return String\n-   is\n-   begin\n-      return To_String (Binder.CTDT_File);\n-   end CTDT_File;\n-\n-end VxLink.Bind;"}, {"sha": "7e6a1b09e482495ff30ee38acb400a3b202bd383", "filename": "gcc/ada/vxlink-bind.ads", "status": "removed", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxlink-bind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxlink-bind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxlink-bind.ads?ref=2401c98f33bb8d615cea1da559599eae7a26ac65", "patch": "@@ -1,87 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                          V X L I N K . B I N D                           --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---                     Copyright (C) 2018, AdaCore                          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-pragma Ada_2012;\n-\n-private with Ada.Containers.Ordered_Sets;\n-private with Ada.Strings.Unbounded;\n-\n-package VxLink.Bind is\n-\n-   type VxLink_Binder is private;\n-\n-   procedure Initialize\n-     (Binder      : out VxLink_Binder;\n-      Object_File : String);\n-\n-   procedure Parse_Tag_File\n-     (Binder : in out VxLink_Binder;\n-      File   : String);\n-\n-   procedure Emit_CTDT\n-     (Binder    : in out VxLink_Binder;\n-      Namespace : String);\n-\n-   function CTDT_File (Binder : VxLink_Binder) return String;\n-\n-private\n-\n-   use Ada.Strings.Unbounded;\n-\n-   type Symbol_Kind is (Sym_Ctor, Sym_Dtor, Sym_Other);\n-\n-   type Symbol is record\n-      Name     : Unbounded_String;\n-      Cat      : Character;\n-      Internal : Boolean;\n-      Kind     : Symbol_Kind;\n-      Priority : Integer;\n-   end record;\n-\n-   function \"=\" (S1, S2 : Symbol) return Boolean\n-   is (S1.Name = S2.Name and then S1.Cat = S2.Cat);\n-\n-   function \"<\" (S1, S2 : Symbol) return Boolean\n-   is (if S1.Priority /= S2.Priority\n-       then S1.Priority < S2.Priority\n-       elsif S1.Name /= S2.Name\n-       then S1.Name < S2.Name\n-       else S1.Cat < S2.Cat);\n-\n-   package Symbol_Sets is new Ada.Containers.Ordered_Sets\n-     (Symbol,\n-      \"<\" => \"<\",\n-      \"=\" => \"=\");\n-\n-   type VxLink_Binder is record\n-      CTDT_File          : Unbounded_String;\n-      Constructors       : Symbol_Sets.Set;\n-      Destructors        : Symbol_Sets.Set;\n-      Module_Dtor_Needed : Boolean;\n-      EH_Frame_Needed    : Boolean;\n-      Tags_List          : Strings_List.Vector;\n-   end record;\n-\n-end VxLink.Bind;"}, {"sha": "5211074aee84e20c0e2fa814866ee995a22f3751", "filename": "gcc/ada/vxlink-link.adb", "status": "removed", "additions": 0, "deletions": 194, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxlink-link.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxlink-link.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxlink-link.adb?ref=2401c98f33bb8d615cea1da559599eae7a26ac65", "patch": "@@ -1,194 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                          V X L I N K . L I N K                           --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---                     Copyright (C) 2018, AdaCore                          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-pragma Ada_2012;\n-\n-with Ada.Command_Line;          use Ada.Command_Line;\n-with GNAT.Directory_Operations; use GNAT.Directory_Operations;\n-\n-package body VxLink.Link is\n-\n-   Gcc : constant String := VxLink.Gcc;\n-\n-   ----------------\n-   -- Initialize --\n-   ----------------\n-\n-   procedure Initialize\n-     (Linker : out VxLink_Linker)\n-   is\n-      Leading        : Boolean := True;\n-      Next_Is_Object : Boolean := False;\n-\n-   begin\n-      for J in 1 .. Ada.Command_Line.Argument_Count loop\n-         declare\n-            Arg : String renames Argument (J);\n-         begin\n-            if Next_Is_Object then\n-               Next_Is_Object     := False;\n-               Linker.Dest_Object := To_Unbounded_String (Arg);\n-               Leading            := False;\n-\n-            elsif Argument (J) = \"-o\" then\n-               Next_Is_Object := True;\n-\n-            elsif Argument (J) = \"-noauto-register\" then\n-               --  Filter out this argument, and do not generate _ctors/_dtors\n-               Linker.Add_CDtors := False;\n-            elsif Arg = \"-v\" and then not Is_Verbose then\n-               --  first -v means VxLink should be verbose, two -v passes -v to\n-               --  the linker.\n-               Set_Verbose (True);\n-            else\n-               if Arg = \"-nostdlib\" or Arg = \"-nostartfiles\" then\n-                  Linker.Add_CDtors := False;\n-               end if;\n-\n-               if Leading then\n-                  Linker.Args_Leading.Append (Arg);\n-               else\n-                  Linker.Args_Trailing.Append (Arg);\n-               end if;\n-            end if;\n-         end;\n-      end loop;\n-\n-      if Linker.Dest_Object = Null_Unbounded_String then\n-         Set_Error_State (\"no output object is defined\");\n-      elsif Linker.Add_CDtors then\n-         --  We'll need to create intermediate artefacts, so we'll use the\n-         --  destination object as base namespace just in case we have\n-         --  several link operations in the same directory\n-         declare\n-            Obj : constant String :=\n-                    Base_Name (To_String (Linker.Dest_Object));\n-\n-         begin\n-            for J in reverse Obj'Range loop\n-               if Obj (J) = '.' then\n-                  Linker.Dest_Base :=\n-                    To_Unbounded_String (Obj (Obj'First .. J - 1));\n-                  exit;\n-               end if;\n-            end loop;\n-\n-            Linker.Partial_Obj := Linker.Dest_Base & \"-partial.o\";\n-         end;\n-      end if;\n-   end Initialize;\n-\n-   -----------------\n-   -- Needs_CDtor --\n-   -----------------\n-\n-   function Needs_CDtor (Linker : VxLink_Linker) return Boolean is\n-   begin\n-      return Linker.Add_CDtors;\n-   end Needs_CDtor;\n-\n-   --------------------\n-   -- Partial_Object --\n-   --------------------\n-\n-   function Partial_Object (Linker : VxLink_Linker) return String is\n-   begin\n-      return To_String (Linker.Partial_Obj);\n-   end Partial_Object;\n-\n-   ---------------\n-   -- Namespace --\n-   ---------------\n-\n-   function Namespace (Linker : VxLink_Linker) return String is\n-   begin\n-      return To_String (Linker.Dest_Base);\n-   end Namespace;\n-\n-   ---------------------\n-   -- Do_Initial_Link --\n-   ---------------------\n-\n-   procedure Do_Initial_Link (Linker : VxLink_Linker)\n-   is\n-      Args : Arguments_List;\n-      Gxx_Path : constant String := Gxx;\n-   begin\n-      if Is_Error_State then\n-         return;\n-      end if;\n-\n-      if Gxx_Path'Length /= 0 then\n-         Args.Append (Gxx);\n-      else\n-         Args.Append (Gcc);\n-      end if;\n-      Args.Append (Linker.Args_Leading);\n-      Args.Append (\"-o\");\n-\n-      if Linker.Add_CDtors then\n-         Args.Append (To_String (Linker.Partial_Obj));\n-      else\n-         Args.Append (To_String (Linker.Dest_Object));\n-      end if;\n-\n-      Args.Append (Linker.Args_Trailing);\n-\n-      if not Linker.Add_CDtors then\n-         Args.Append (\"-nostartfiles\");\n-      end if;\n-\n-      Run (Args);\n-   end Do_Initial_Link;\n-\n-   -------------------\n-   -- Do_Final_Link --\n-   -------------------\n-\n-   procedure Do_Final_Link\n-     (Linker   : VxLink_Linker;\n-      Ctdt_Obj : String)\n-   is\n-      Args : Arguments_List;\n-   begin\n-      if not Linker.Add_CDtors then\n-         return;\n-      end if;\n-\n-      if Is_Error_State then\n-         return;\n-      end if;\n-\n-      Args.Append (Gcc);\n-      Args.Append (\"-nostdlib\");\n-      Args.Append (Ctdt_Obj);\n-      Args.Append (To_String (Linker.Partial_Obj));\n-      Args.Append (\"-o\");\n-      Args.Append (To_String (Linker.Dest_Object));\n-\n-      Run (Args);\n-   end Do_Final_Link;\n-\n-end VxLink.Link;"}, {"sha": "4c46f4872707714b924c18ffe5cc387c1ff4faa8", "filename": "gcc/ada/vxlink-link.ads", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxlink-link.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxlink-link.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxlink-link.ads?ref=2401c98f33bb8d615cea1da559599eae7a26ac65", "patch": "@@ -1,63 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                          V X L I N K . L I N K                           --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---                     Copyright (C) 2018, AdaCore                          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-pragma Ada_2012;\n-\n-private with Ada.Strings.Unbounded;\n-\n-package VxLink.Link is\n-\n-   type VxLink_Linker is private;\n-\n-   procedure Initialize\n-     (Linker : out VxLink_Linker);\n-\n-   function Needs_CDtor (Linker : VxLink_Linker) return Boolean;\n-\n-   function Partial_Object (Linker : VxLink_Linker) return String;\n-\n-   function Namespace (Linker : VxLink_Linker) return String;\n-\n-   procedure Do_Initial_Link\n-     (Linker : VxLink_Linker);\n-\n-   procedure Do_Final_Link\n-     (Linker   : VxLink_Linker;\n-      Ctdt_Obj : String);\n-\n-private\n-\n-   use Ada.Strings.Unbounded;\n-\n-   type VxLink_Linker is record\n-      Args_Leading  : Arguments_List;\n-      Args_Trailing : Arguments_List;\n-      Add_CDtors    : Boolean := True;\n-      Dest_Object   : Unbounded_String;\n-      Dest_Base     : Unbounded_String;\n-      Partial_Obj   : Unbounded_String;\n-   end record;\n-\n-end VxLink.Link;"}, {"sha": "04a22c3ef0c95172cf7f5bfa0933fe1939bfe19f", "filename": "gcc/ada/vxlink-main.adb", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxlink-main.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxlink-main.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxlink-main.adb?ref=2401c98f33bb8d615cea1da559599eae7a26ac65", "patch": "@@ -1,81 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                          V X L I N K . M A I N                           --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---                     Copyright (C) 2018, AdaCore                          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  VxLink is a helper tool used as a wrapper around g++/gcc to build VxWorks\n---  DKM (Downloadable Kernel Modules).\n---  Such DKM is a partially linked object that contains entry points for\n---  constructors and destructors. This tool thus uses g++ to generate an\n---  intermediate partially linked object, retrieves the list of constructors\n---  and destructors in it and produces a C file that lists those ctors/dtors\n---  in a way that is understood be VxWorks kernel. It then links this file\n---  with the intermediate object to produce a valid DKM.\n-\n-pragma Ada_2012;\n-\n-with GNAT.OS_Lib; use GNAT.OS_Lib;\n-\n-with VxLink.Link; use VxLink.Link;\n-with VxLink.Bind; use VxLink.Bind;\n-\n-procedure VxLink.Main is\n-   Linker  : VxLink_Linker;\n-   Binder  : VxLink_Binder;\n-   VSB_Dir : String_Access := Getenv (\"VSB_DIR\");\n-begin\n-   Initialize (Linker);\n-\n-   if Is_Error_State then\n-      return;\n-   end if;\n-\n-   Do_Initial_Link (Linker);\n-\n-   if Is_Error_State then\n-      return;\n-   end if;\n-\n-   if not Needs_CDtor (Linker) then\n-      --  Initial link is enough, let's return\n-      return;\n-   end if;\n-\n-   if VSB_Dir /= null and then VSB_Dir'Length > 0 then\n-      declare\n-         DKM_Tag_File : constant String :=\n-                          Normalize_Pathname\n-                            (\"krnl/tags/dkm.tags\", VSB_Dir.all);\n-      begin\n-         if Is_Regular_File (DKM_Tag_File) then\n-            Parse_Tag_File (Binder, DKM_Tag_File);\n-         end if;\n-      end;\n-   end if;\n-\n-   Initialize (Binder, Object_File => Partial_Object (Linker));\n-   Emit_CTDT (Binder, Namespace => Namespace (Linker));\n-\n-   Do_Final_Link (Linker, CTDT_File (Binder));\n-   Free (VSB_Dir);\n-end VxLink.Main;"}, {"sha": "8ffcaa6c5e89049ad84b1a4ebc293ebc8304b2c4", "filename": "gcc/ada/vxlink.adb", "status": "removed", "additions": 0, "deletions": 280, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxlink.adb?ref=2401c98f33bb8d615cea1da559599eae7a26ac65", "patch": "@@ -1,280 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                               V X L I N K                                --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---                     Copyright (C) 2018, AdaCore                          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-pragma Ada_2012;\n-\n-with Ada.Command_Line;\n-with Ada.Strings.Unbounded;     use Ada.Strings.Unbounded;\n-with Ada.Text_IO;\n-\n-with GNAT.Directory_Operations; use GNAT.Directory_Operations;\n-with GNAT.Expect;               use GNAT.Expect;\n-with GNAT.OS_Lib;               use GNAT.OS_Lib;\n-\n-package body VxLink is\n-\n-   Target_Triplet : Unbounded_String := Null_Unbounded_String;\n-   Verbose        : Boolean := False;\n-   Error_State    : Boolean := False;\n-\n-   function Triplet return String;\n-   --  ??? missing spec\n-\n-   function Which (Exe : String) return String;\n-   --  ??? missing spec\n-\n-   -------------\n-   -- Triplet --\n-   -------------\n-\n-   function Triplet return String is\n-   begin\n-      if Target_Triplet = Null_Unbounded_String then\n-         declare\n-            Exe : constant String := File_Name (Ada.Command_Line.Command_Name);\n-         begin\n-            for J in reverse Exe'Range loop\n-               if Exe (J) = '-' then\n-                  Target_Triplet := To_Unbounded_String (Exe (Exe'First .. J));\n-                  exit;\n-               end if;\n-            end loop;\n-         end;\n-      end if;\n-\n-      return To_String (Target_Triplet);\n-   end Triplet;\n-\n-   -----------\n-   -- Which --\n-   -----------\n-\n-   function Which (Exe : String) return String is\n-      Suffix   : GNAT.OS_Lib.String_Access := Get_Executable_Suffix;\n-      Basename : constant String := Exe & Suffix.all;\n-      Path     : GNAT.OS_Lib.String_Access := Getenv (\"PATH\");\n-      Last     : Natural := Path'First;\n-\n-   begin\n-      Free (Suffix);\n-\n-      for J in Path'Range loop\n-         if Path (J) = Path_Separator then\n-            declare\n-               Full : constant String := Normalize_Pathname\n-                 (Name           => Basename,\n-                  Directory      => Path (Last .. J - 1),\n-                  Resolve_Links  => False,\n-                  Case_Sensitive => True);\n-            begin\n-               if Is_Executable_File (Full) then\n-                  Free (Path);\n-\n-                  return Full;\n-               end if;\n-            end;\n-\n-            Last := J + 1;\n-         end if;\n-      end loop;\n-\n-      Free (Path);\n-\n-      return \"\";\n-   end Which;\n-\n-   -----------------\n-   -- Set_Verbose --\n-   -----------------\n-\n-   procedure Set_Verbose (Value : Boolean) is\n-   begin\n-      Verbose := Value;\n-   end Set_Verbose;\n-\n-   ----------------\n-   -- Is_Verbose --\n-   ----------------\n-\n-   function Is_Verbose return Boolean is\n-   begin\n-      return Verbose;\n-   end Is_Verbose;\n-\n-   ---------------------\n-   -- Set_Error_State --\n-   ---------------------\n-\n-   procedure Set_Error_State (Message : String) is\n-   begin\n-      Log_Error (\"Error: \" & Message);\n-      Error_State := True;\n-      Ada.Command_Line.Set_Exit_Status (1);\n-   end Set_Error_State;\n-\n-   --------------------\n-   -- Is_Error_State --\n-   --------------------\n-\n-   function Is_Error_State return Boolean is\n-   begin\n-      return Error_State;\n-   end Is_Error_State;\n-\n-   --------------\n-   -- Log_Info --\n-   --------------\n-\n-   procedure Log_Info (S : String) is\n-   begin\n-      if Verbose then\n-         Ada.Text_IO.Put_Line (S);\n-      end if;\n-   end Log_Info;\n-\n-   ---------------\n-   -- Log_Error --\n-   ---------------\n-\n-   procedure Log_Error (S : String) is\n-   begin\n-      Ada.Text_IO.Put_Line (Ada.Text_IO.Standard_Error, S);\n-   end Log_Error;\n-\n-   ---------\n-   -- Run --\n-   ---------\n-\n-   procedure Run (Arguments : Arguments_List) is\n-      Output : constant String := Run (Arguments);\n-   begin\n-      if not Is_Error_State then\n-         --  In case of erroneous execution, the function version of run will\n-         --  have already displayed the output\n-         Ada.Text_IO.Put (Output);\n-      end if;\n-   end Run;\n-\n-   ---------\n-   -- Run --\n-   ---------\n-\n-   function Run (Arguments : Arguments_List) return String is\n-      Args       : GNAT.OS_Lib.Argument_List_Access :=\n-                     new GNAT.OS_Lib.Argument_List\n-                       (1 .. Natural (Arguments.Length) - 1);\n-      Base       : constant String := Base_Name (Arguments.First_Element);\n-\n-      Debug_Line : Unbounded_String;\n-      Add_Quotes : Boolean;\n-\n-   begin\n-      if Verbose then\n-         Append (Debug_Line, Base);\n-      end if;\n-\n-      for J in Arguments.First_Index + 1 .. Arguments.Last_Index loop\n-         declare\n-            Arg : String renames Arguments.Element (J);\n-         begin\n-            Args (J - 1) := new String'(Arg);\n-\n-            if Verbose then\n-               Add_Quotes := False;\n-\n-               for K in Arg'Range loop\n-                  if Arg (K) = ' ' then\n-                     Add_Quotes := True;\n-                     exit;\n-                  end if;\n-               end loop;\n-\n-               Append (Debug_Line, ' ');\n-\n-               if Add_Quotes then\n-                  Append (Debug_Line, '\"' & Arg & '\"');\n-               else\n-                  Append (Debug_Line, Arg);\n-               end if;\n-            end if;\n-         end;\n-      end loop;\n-\n-      if Verbose then\n-         Ada.Text_IO.Put_Line (To_String (Debug_Line));\n-      end if;\n-\n-      declare\n-         Status : aliased Integer := 0;\n-         Ret    : constant String :=\n-                    Get_Command_Output\n-                      (Command    => Arguments.First_Element,\n-                       Arguments  => Args.all,\n-                       Input      => \"\",\n-                       Status     => Status'Access,\n-                       Err_To_Out => True);\n-\n-      begin\n-         GNAT.OS_Lib.Free (Args);\n-\n-         if Status /= 0 then\n-            Ada.Text_IO.Put_Line (Ret);\n-            Set_Error_State\n-              (Base_Name (Arguments.First_Element) &\n-                 \" returned\" & Status'Image);\n-         end if;\n-\n-         return Ret;\n-      end;\n-   end Run;\n-\n-   ---------\n-   -- Gcc --\n-   ---------\n-\n-   function Gcc return String is\n-   begin\n-      return Which (Triplet & \"gcc\");\n-   end Gcc;\n-\n-   ---------\n-   -- Gxx --\n-   ---------\n-\n-   function Gxx return String is\n-   begin\n-      return Which (Triplet & \"g++\");\n-   end Gxx;\n-\n-   --------\n-   -- Nm --\n-   --------\n-\n-   function Nm return String is\n-   begin\n-      return Which (Triplet & \"nm\");\n-   end Nm;\n-\n-end VxLink;"}, {"sha": "37ae5d7023a212f0da18f7a3fe5d5684796b2de9", "filename": "gcc/ada/vxlink.ads", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxlink.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2401c98f33bb8d615cea1da559599eae7a26ac65/gcc%2Fada%2Fvxlink.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxlink.ads?ref=2401c98f33bb8d615cea1da559599eae7a26ac65", "patch": "@@ -1,68 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                               V X L I N K                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---                     Copyright (C) 2018, AdaCore                          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT; see file COPYING3.  If not, go to --\n--- http://www.gnu.org/licenses for a complete copy of the license.          --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  See vxlink-main.adb for a description of the tool.\n---\n---  This package contains only common utility functions used by the other\n---  child packages.\n-\n-pragma Ada_2012;\n-\n-with Ada.Containers.Indefinite_Vectors;\n-\n-package VxLink is\n-\n-   package Strings_List is new Ada.Containers.Indefinite_Vectors\n-     (Positive, String);\n-\n-   subtype Arguments_List is Strings_List.Vector;\n-\n-   procedure Set_Verbose (Value : Boolean);\n-   function Is_Verbose return Boolean;\n-\n-   procedure Set_Error_State (Message : String);\n-   function Is_Error_State return Boolean;\n-\n-   procedure Log_Info (S : String);\n-   procedure Log_Error (S : String);\n-\n-   procedure Run (Arguments : Arguments_List);\n-\n-   function Run (Arguments : Arguments_List) return String;\n-\n-   function Gcc return String;\n-   --  Current toolchain's gcc command\n-\n-   function Gxx return String;\n-   --  Current toolchain's g++ command\n-\n-   function Nm return String;\n-   --  Current toolchain's nm command\n-\n-   function Ends_With (Str, Suffix : String) return Boolean\n-   is (Str'Length >= Suffix'Length\n-       and then Str (Str'Last - Suffix'Length + 1 .. Str'Last) = Suffix);\n-\n-end VxLink;"}]}