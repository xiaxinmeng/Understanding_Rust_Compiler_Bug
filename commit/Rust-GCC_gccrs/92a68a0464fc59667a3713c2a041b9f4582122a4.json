{"sha": "92a68a0464fc59667a3713c2a041b9f4582122a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJhNjhhMDQ2NGZjNTk2NjdhMzcxM2MyYTA0MWI5ZjQ1ODIxMjJhNA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-08-21T14:50:03Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-08-21T14:50:03Z"}, "message": "[Ada] Minor reformattings\n\n2018-08-21  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* checks.adb, contracts.adb, exp_aggr.adb, exp_attr.adb,\n\texp_ch6.adb, exp_ch7.adb, exp_ch9.adb, exp_unst.adb,\n\texp_util.adb, freeze.adb, gnatlink.adb, layout.adb,\n\tlib-writ.adb, lib-xref-spark_specific.adb, sem_ch13.adb,\n\tsem_ch3.adb, sem_ch6.adb, sem_res.adb, sem_util.adb, sinfo.ads,\n\tsprint.adb: Minor reformatting.\n\nFrom-SVN: r263737", "tree": {"sha": "bc4a2c0acd603dd31646404b2abf2c573e7f272b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc4a2c0acd603dd31646404b2abf2c573e7f272b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92a68a0464fc59667a3713c2a041b9f4582122a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a68a0464fc59667a3713c2a041b9f4582122a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92a68a0464fc59667a3713c2a041b9f4582122a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a68a0464fc59667a3713c2a041b9f4582122a4/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ec8edb56ea77f8627b6fc7b9f95751d27cd9162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ec8edb56ea77f8627b6fc7b9f95751d27cd9162"}], "stats": {"total": 295, "additions": 163, "deletions": 132}, "files": [{"sha": "062270177fb17fc9e2dc1c241aa3a769da4529ec", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -1,3 +1,12 @@\n+2018-08-21  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* checks.adb, contracts.adb, exp_aggr.adb, exp_attr.adb,\n+\texp_ch6.adb, exp_ch7.adb, exp_ch9.adb, exp_unst.adb,\n+\texp_util.adb, freeze.adb, gnatlink.adb, layout.adb,\n+\tlib-writ.adb, lib-xref-spark_specific.adb, sem_ch13.adb,\n+\tsem_ch3.adb, sem_ch6.adb, sem_res.adb, sem_util.adb, sinfo.ads,\n+\tsprint.adb: Minor reformatting.\n+\n 2018-08-21  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* vxlink-bind.adb, vxlink-bind.ads, vxlink-link.adb,"}, {"sha": "1704a2f81f2a31a7a7e444b5c810aa2221cf5919", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -6780,9 +6780,9 @@ package body Checks is\n            and then Is_Integer_Type (Target_Base_Type)\n          then\n             Conv_Node :=\n-              OK_Convert_To (\n-                Typ  => Target_Base_Type,\n-                Expr => Duplicate_Subexpr (N));\n+              OK_Convert_To\n+                (Typ  => Target_Base_Type,\n+                 Expr => Duplicate_Subexpr (N));\n \n          --  Common case\n "}, {"sha": "26a8d2894b2ea0ab704e1d517fba755934919c87", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -592,18 +592,20 @@ package body Contracts is\n             null;\n \n          --  Otherwise analyze the pre/postconditions. Their expressions\n-         --  might include references to types that are not frozen yet,\n-         --  in the case where the body is a rewritten expression function\n-         --  that is a completion, so freeze all types within before\n-         --  constructing the contract code.\n+         --  might include references to types that are not frozen yet, in the\n+         --  case where the body is a rewritten expression function that is a\n+         --  completion, so freeze all types within before constructing the\n+         --  contract code.\n \n          else\n             declare\n-               Bod : Node_Id;\n+               Bod          : Node_Id;\n                Freeze_Types : Boolean := False;\n+\n             begin\n                if Present (Freeze_Id) then\n                   Bod := Unit_Declaration_Node (Freeze_Id);\n+\n                   if Nkind (Bod) = N_Subprogram_Body\n                     and then Was_Expression_Function (Bod)\n                     and then Ekind (Subp_Id) = E_Function\n@@ -617,8 +619,11 @@ package body Contracts is\n                Prag := Pre_Post_Conditions (Items);\n                while Present (Prag) loop\n                   if Freeze_Types then\n-                     Freeze_Expr_Types (Subp_Id, Standard_Boolean,\n-                       Expression (Corresponding_Aspect (Prag)), Bod);\n+                     Freeze_Expr_Types\n+                       (Def_Id => Subp_Id,\n+                        Typ    => Standard_Boolean,\n+                        Expr   => Expression (Corresponding_Aspect (Prag)),\n+                        N      => Bod);\n                   end if;\n \n                   Analyze_Pre_Post_Condition_In_Decl_Part (Prag, Freeze_Id);"}, {"sha": "f65230f5a72f78119c6777813ed5d24df974c393", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -6212,7 +6212,7 @@ package body Exp_Aggr is\n          Establish_Transient_Scope (N, Manage_Sec_Stack => False);\n       end if;\n \n-      --  An array of limited components is built in place.\n+      --  An array of limited components is built in place\n \n       if Is_Limited_Type (Typ) then\n          Maybe_In_Place_OK := True;\n@@ -6258,7 +6258,7 @@ package body Exp_Aggr is\n       --  oversight: the rules in 7.6 (17) are clear.\n \n       if (not Has_Default_Init_Comps (N)\n-            or else Is_Limited_Type (Etype (N)))\n+           or else Is_Limited_Type (Etype (N)))\n         and then Comes_From_Source (Parent_Node)\n         and then Parent_Kind = N_Object_Declaration\n         and then Present (Expression (Parent_Node))\n@@ -6385,7 +6385,6 @@ package body Exp_Aggr is\n             if Has_Default_Init_Comps (N)\n               and then not Maybe_In_Place_OK\n             then\n-\n                --  Ada 2005 (AI-287): This case has not been analyzed???\n \n                raise Program_Error;"}, {"sha": "d789748613b46bed220027a721716df1d2d5525b", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -3672,29 +3672,35 @@ package body Exp_Attr is\n          if Is_Fixed_Point_Type (Etype (N)) then\n             declare\n                Loc     : constant Source_Ptr := Sloc (N);\n-               Equiv_T : constant Entity_Id := Make_Temporary (Loc, 'T', N);\n-               Expr    : constant Node_Id := Expression (N);\n-               Fst     : constant Entity_Id := Root_Type (Etype (N));\n+               Equiv_T : constant Entity_Id  := Make_Temporary (Loc, 'T', N);\n+               Expr    : constant Node_Id    := Expression (N);\n+               Fst     : constant Entity_Id  := Root_Type (Etype (N));\n                Decl    : Node_Id;\n \n             begin\n-               Decl := Make_Full_Type_Declaration (Sloc (N),\n-                 Equiv_T,\n-                 Type_Definition =>\n-                    Make_Signed_Integer_Type_Definition (Loc,\n-                      Low_Bound => Make_Integer_Literal (Loc,\n-                        Intval => Corresponding_Integer_Value\n-                                    (Type_Low_Bound (Fst))),\n-                      High_Bound => Make_Integer_Literal (Loc,\n-                        Intval => Corresponding_Integer_Value\n-                                    (Type_High_Bound (Fst)))));\n+               Decl :=\n+                 Make_Full_Type_Declaration (Sloc (N),\n+                 Defining_Identifier => Equiv_T,\n+                 Type_Definition     =>\n+                   Make_Signed_Integer_Type_Definition (Loc,\n+                     Low_Bound  =>\n+                       Make_Integer_Literal (Loc,\n+                         Intval =>\n+                           Corresponding_Integer_Value\n+                             (Type_Low_Bound (Fst))),\n+                     High_Bound =>\n+                       Make_Integer_Literal (Loc,\n+                         Intval =>\n+                           Corresponding_Integer_Value\n+                             (Type_High_Bound (Fst)))));\n                Insert_Action (N, Decl);\n \n-               --  Verify that the conversion is possible.\n-               Generate_Range_Check\n-                 (Expr, Equiv_T, CE_Overflow_Check_Failed);\n+               --  Verify that the conversion is possible\n+\n+               Generate_Range_Check (Expr, Equiv_T, CE_Overflow_Check_Failed);\n+\n+               --  and verify that the result is in range\n \n-               --  and verify that the result is in range.\n                Generate_Range_Check (N, Etype (N), CE_Range_Check_Failed);\n             end;\n          end if;"}, {"sha": "e08b748fa353f148cd5fe0c3eacc2721428dcf8e", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -6402,12 +6402,13 @@ package body Exp_Ch6 is\n            and then Is_Protected_Type (Etype (Prefix (Name (Parent (N)))))\n            and then Is_Entity_Name (Name (N))\n            and then Scope (Entity (Name (N))) =\n-                     Etype (Prefix (Name (Parent (N))))\n+                      Etype (Prefix (Name (Parent (N))))\n          then\n             Rewrite (Name (N),\n               Make_Selected_Component (Sloc (N),\n-                Prefix => New_Copy_Tree (Prefix (Name (Parent (N)))),\n+                Prefix        => New_Copy_Tree (Prefix (Name (Parent (N)))),\n                 Selector_Name => Relocate_Node (Name (N))));\n+\n             Analyze_And_Resolve (N);\n             return;\n "}, {"sha": "ee04b22254a8585723787fbf01031a0c4c30c64e", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -4030,8 +4030,8 @@ package body Exp_Ch7 is\n       -----------------------\n \n       function First_Local_Scope (L : List_Id) return Entity_Id is\n-         Stat : Node_Id;\n          Scop : Entity_Id;\n+         Stat : Node_Id;\n \n       begin\n          Stat := First (L);\n@@ -4099,6 +4099,7 @@ package body Exp_Ch7 is\n                when others =>\n                   null;\n             end case;\n+\n             Next (Stat);\n          end loop;\n \n@@ -4119,8 +4120,8 @@ package body Exp_Ch7 is\n         and then Present (Handled_Statement_Sequence (N))\n         and then Is_Compilation_Unit (Current_Scope)\n       then\n-         Ent := First_Local_Scope\n-                  (Statements (Handled_Statement_Sequence (N)));\n+         Ent :=\n+           First_Local_Scope (Statements (Handled_Statement_Sequence (N)));\n \n          if Present (Ent) then\n             Elab_Proc :="}, {"sha": "4470c4e98545284ea9c22779e0acc3cbffc0d8c3", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -8241,6 +8241,7 @@ package body Exp_Ch9 is\n       end if;\n \n       Analyze (N);\n+\n       Reset_Scopes_To (N, Entity (Identifier (N)));\n    end Expand_N_Conditional_Entry_Call;\n \n@@ -10707,7 +10708,7 @@ package body Exp_Ch9 is\n               Make_Defining_Identifier (Eloc,\n                 New_External_Name (Chars (Ename), 'A', Num_Accept));\n \n-            --  Link the acceptor to the original receiving entry.\n+            --  Link the acceptor to the original receiving entry\n \n             Set_Ekind           (PB_Ent, E_Procedure);\n             Set_Receiving_Entry (PB_Ent, Eent);\n@@ -14850,7 +14851,6 @@ package body Exp_Ch9 is\n    ---------------------\n \n    procedure Reset_Scopes_To (Bod : Node_Id; E : Entity_Id) is\n-\n       function Reset_Scope (N : Node_Id) return Traverse_Result;\n       --  Temporaries may have been declared during expansion of the procedure\n       --  created for an entry body or an accept alternative. Indicate that\n@@ -14880,8 +14880,8 @@ package body Exp_Ch9 is\n          --  Ditto for a package declaration or a full type declaration, etc.\n \n          elsif Nkind (N) = N_Package_Declaration\n-             or else Nkind (N) in N_Declaration\n-             or else Nkind (N) in N_Renaming_Declaration\n+           or else Nkind (N) in N_Declaration\n+           or else Nkind (N) in N_Renaming_Declaration\n          then\n             Set_Scope (Defining_Entity (N), E);\n             return Skip;"}, {"sha": "d688157e768ca78d712356c3ebc6feb96ea5b8ab", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -260,12 +260,10 @@ package body Exp_Unst is\n          E := Ultimate_Alias (E);\n \n          --  The body of a protected operation has a different name and\n-         --  has been scanned at this point, and thus has an entry in\n-         --  the subprogram table.\n+         --  has been scanned at this point, and thus has an entry in the\n+         --  subprogram table.\n \n-         if E = Sub\n-           and then Convention (E) = Convention_Protected\n-         then\n+         if E = Sub and then Convention (E) = Convention_Protected then\n             E := Protected_Body_Subprogram (E);\n          end if;\n \n@@ -551,9 +549,8 @@ package body Exp_Unst is\n \n                   --  Explicit dereference and selected component case\n \n-                  elsif Nkind_In (N,\n-                    N_Explicit_Dereference,\n-                    N_Selected_Component)\n+                  elsif Nkind_In (N, N_Explicit_Dereference,\n+                                     N_Selected_Component)\n                   then\n                      Note_Uplevel_Bound (Prefix (N), Ref);\n "}, {"sha": "314e3ee97cd1e353c351b18ea0b6e9b0cce62985", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -8402,26 +8402,23 @@ package body Exp_Util is\n \n                declare\n                   Align_In_Bits : constant Nat := M * System_Storage_Unit;\n-                  Off : Uint;\n-                  Siz : Uint;\n+                  Comp : Entity_Id;\n+\n                begin\n+                  Comp := C;\n+\n                   --  For a component inherited in a record extension, the\n                   --  clause is inherited but position and size are not set.\n \n                   if Is_Base_Type (Etype (P))\n                     and then Is_Tagged_Type (Etype (P))\n-                    and then Present (Original_Record_Component (C))\n+                    and then Present (Original_Record_Component (Comp))\n                   then\n-                     Off :=\n-                       Component_Bit_Offset (Original_Record_Component (C));\n-                     Siz := Esize (Original_Record_Component (C));\n-                  else\n-                     Off := Component_Bit_Offset (C);\n-                     Siz := Esize (C);\n+                     Comp := Original_Record_Component (Comp);\n                   end if;\n \n-                  if Off mod Align_In_Bits /= 0\n-                    or else Siz mod Align_In_Bits /= 0\n+                  if Component_Bit_Offset (Comp) mod Align_In_Bits /= 0\n+                    or else Esize (Comp) mod Align_In_Bits /= 0\n                   then\n                      return True;\n                   end if;"}, {"sha": "5036a7991eda65932c031bcedbd0f12de06760c2", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -3619,7 +3619,7 @@ package body Freeze is\n                if Is_Access_Type (F_Type)\n                  and then Esize (F_Type) > Ttypes.System_Address_Size\n                  and then (not Unnest_Subprogram_Mode\n-                             or else not Is_Access_Subprogram_Type (F_Type))\n+                            or else not Is_Access_Subprogram_Type (F_Type))\n                then\n                   Error_Msg_N\n                     (\"?x?type of & does not correspond to C pointer!\", Formal);\n@@ -7654,10 +7654,9 @@ package body Freeze is\n       Expr   : Node_Id;\n       N      : Node_Id)\n    is\n-\n       function Cloned_Expression return Node_Id;\n-      --  Build a duplicate of the expression of the return statement that\n-      --  has no defining entities shared with the original expression.\n+      --  Build a duplicate of the expression of the return statement that has\n+      --  no defining entities shared with the original expression.\n \n       function Freeze_Type_Refs (Node : Node_Id) return Traverse_Result;\n       --  Freeze all types referenced in the subtree rooted at Node\n@@ -7680,8 +7679,8 @@ package body Freeze is\n             if Nkind_In (Node, N_Iterator_Specification,\n                                N_Loop_Parameter_Specification)\n             then\n-               Set_Defining_Identifier (Node,\n-                 New_Copy (Defining_Identifier (Node)));\n+               Set_Defining_Identifier\n+                 (Node, New_Copy (Defining_Identifier (Node)));\n             end if;\n \n             return OK;\n@@ -7741,9 +7740,9 @@ package body Freeze is\n                return;\n             end if;\n \n-            --  This provides a better error message than generating\n-            --  primitives whose compilation fails much later. Refine\n-            --  the error message if possible.\n+            --  This provides a better error message than generating primitives\n+            --  whose compilation fails much later. Refine the error message if\n+            --  possible.\n \n             Check_Fully_Declared (Typ, Node);\n \n@@ -7773,10 +7772,10 @@ package body Freeze is\n                Check_And_Freeze_Type (Scope (Entity (Node)));\n             end if;\n \n-         --  Freezing an access type does not freeze the designated type,\n-         --  but freezing conversions between access to interfaces requires\n-         --  that the interface types themselves be frozen, so that dispatch\n-         --  table entities are properly created.\n+         --  Freezing an access type does not freeze the designated type, but\n+         --  freezing conversions between access to interfaces requires that\n+         --  the interface types themselves be frozen, so that dispatch table\n+         --  entities are properly created.\n \n          --  Unclear whether a more general rule is needed ???\n \n@@ -7787,10 +7786,10 @@ package body Freeze is\n             Check_And_Freeze_Type (Designated_Type (Etype (Node)));\n          end if;\n \n-         --  An implicit dereference freezes the designated type. In the\n-         --  case of a dispatching call whose controlling argument is an\n-         --  access type, the dereference is not made explicit, so we must\n-         --  check for such a call and freeze the designated type.\n+         --  An implicit dereference freezes the designated type. In the case\n+         --  of a dispatching call whose controlling argument is an access\n+         --  type, the dereference is not made explicit, so we must check for\n+         --  such a call and freeze the designated type.\n \n          if Nkind (Node) in N_Has_Etype\n            and then Present (Etype (Node))"}, {"sha": "5c8bb7da540fe6f0e4b6de5e75bebdebceefed3a", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -1103,9 +1103,9 @@ procedure Gnatlink is\n                   --  as it is in the same directory as the shared version.\n \n                   if Nlast >= Library_Version'Length\n-                    and then Next_Line\n-                      (Nlast - Library_Version'Length + 1 .. Nlast)\n-                        = Library_Version\n+                    and then\n+                      Next_Line (Nlast - Library_Version'Length + 1 .. Nlast) =\n+                        Library_Version\n                   then\n                      --  Set Last to point to last character before the\n                      --  library version."}, {"sha": "a7b24ab43c8311e258811a67ed3524195f73f7ee", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -326,14 +326,13 @@ package body Layout is\n             Init_Size (E, 2 * System_Address_Size);\n \n          --  If unnesting subprograms, subprogram access types contain the\n-         --  address of both the subprogram and an activation record.  But\n-         --  if we set that, we'll get a warning on different unchecked\n-         --  conversion sizes in the RTS.  So leave unset ub that case.\n+         --  address of both the subprogram and an activation record. But if we\n+         --  set that, we'll get a warning on different unchecked conversion\n+         --  sizes in the RTS. So leave unset ub that case.\n \n          elsif Unnest_Subprogram_Mode\n            and then Is_Access_Subprogram_Type (E)\n          then\n-            --  Init_Size (E, 2 * System_Address_Size);\n             null;\n \n          --  Normal case of thin pointer"}, {"sha": "a4f952655f03316f8673325a58439e2b09e2d3e5", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -963,10 +963,11 @@ package body Lib.Writ is\n                   --  allow partial analysis on incomplete sources.\n \n                   if GNATprove_Mode then\n-\n                      Body_Fname :=\n-                       Get_File_Name (Get_Body_Name (Uname),\n-                                       Subunit => False, May_Fail => True);\n+                       Get_File_Name\n+                         (Uname    => Get_Body_Name (Uname),\n+                          Subunit  => False,\n+                          May_Fail => True);\n \n                      Body_Index := Get_Unit_Index (Get_Body_Name (Uname));\n \n@@ -981,8 +982,10 @@ package body Lib.Writ is\n \n                   else\n                      Body_Fname :=\n-                       Get_File_Name (Get_Body_Name (Uname),\n-                                       Subunit => False, May_Fail => False);\n+                       Get_File_Name\n+                         (Uname    => Get_Body_Name (Uname),\n+                          Subunit  => False,\n+                          May_Fail => False);\n \n                      Body_Index := Get_Unit_Index (Get_Body_Name (Uname));\n                   end if;"}, {"sha": "ce4538ba46b64e0ce5aef51f0e9adf3621f60139", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -228,6 +228,7 @@ package body SPARK_Specific is\n                end loop;\n \n                if Nkind (Context) = N_Pragma then\n+\n                   --  When used for cross-references then aspects might not be\n                   --  yet linked to pragmas; when used for AST navigation in\n                   --  GNATprove this routine is expected to follow those links."}, {"sha": "00854c9be58e6736f4f41efa8d81a9f13015af50", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -8754,6 +8754,7 @@ package body Sem_Ch13 is\n       --  Case where predicates are present\n \n       if Present (Expr) then\n+\n          --  Test for raise expression present\n \n          Test_REs (Expr);\n@@ -8764,44 +8765,45 @@ package body Sem_Ch13 is\n \n          if Raise_Expression_Present then\n             declare\n-               Map   : constant Elist_Id := New_Elmt_List;\n-               New_V : Entity_Id := Empty;\n-\n-               --  The unanalyzed expression will be copied and appear in\n-               --  both functions. Normally expressions do not declare new\n-               --  entities, but quantified expressions do, so we need to\n-               --  create new entities for their bound variables, to prevent\n-               --  multiple definitions in gigi.\n-\n-               function Reset_Loop_Variable (N : Node_Id)\n-                 return Traverse_Result;\n+               function Reset_Loop_Variable\n+                 (N : Node_Id) return Traverse_Result;\n \n-               procedure Collect_Loop_Variables is\n+               procedure Reset_Loop_Variables is\n                  new Traverse_Proc (Reset_Loop_Variable);\n \n                ------------------------\n                -- Reset_Loop_Variable --\n                ------------------------\n \n-               function Reset_Loop_Variable (N : Node_Id)\n-                 return Traverse_Result\n+               function Reset_Loop_Variable\n+                 (N : Node_Id) return Traverse_Result\n                is\n                begin\n                   if Nkind (N) = N_Iterator_Specification then\n-                     New_V := Make_Defining_Identifier\n-                       (Sloc (N), Chars (Defining_Identifier (N)));\n-\n-                     Set_Defining_Identifier (N, New_V);\n+                     Set_Defining_Identifier (N,\n+                       Make_Defining_Identifier\n+                         (Sloc (N), Chars (Defining_Identifier (N))));\n                   end if;\n \n                   return OK;\n                end Reset_Loop_Variable;\n \n+               --  Local variables\n+\n+               Map : constant Elist_Id := New_Elmt_List;\n+\n             begin\n                Append_Elmt (Object_Entity, Map);\n                Append_Elmt (Object_Entity_M, Map);\n                Expr_M := New_Copy_Tree (Expr, Map => Map);\n-               Collect_Loop_Variables (Expr_M);\n+\n+               --  The unanalyzed expression will be copied and appear in\n+               --  both functions. Normally expressions do not declare new\n+               --  entities, but quantified expressions do, so we need to\n+               --  create new entities for their bound variables, to prevent\n+               --  multiple definitions in gigi.\n+\n+               Reset_Loop_Variables (Expr_M);\n             end;\n          end if;\n \n@@ -8862,8 +8864,8 @@ package body Sem_Ch13 is\n             --  loops during analysis and expansion.\n \n             declare\n-               function Reset_Quantified_Variable_Scope (N : Node_Id)\n-                 return Traverse_Result;\n+               function Reset_Quantified_Variable_Scope\n+                 (N : Node_Id) return Traverse_Result;\n \n                procedure Reset_Quantified_Variables_Scope is\n                  new Traverse_Proc (Reset_Quantified_Variable_Scope);\n@@ -8872,8 +8874,8 @@ package body Sem_Ch13 is\n                -- Reset_Quantified_Variable_Scope --\n                -------------------------------------\n \n-               function Reset_Quantified_Variable_Scope (N : Node_Id)\n-                 return Traverse_Result\n+               function Reset_Quantified_Variable_Scope\n+                 (N : Node_Id) return Traverse_Result\n                is\n                begin\n                   if Nkind_In (N, N_Iterator_Specification,\n@@ -8882,6 +8884,7 @@ package body Sem_Ch13 is\n                      Set_Scope (Defining_Identifier (N),\n                        Predicate_Function (Typ));\n                   end if;\n+\n                   return OK;\n                end Reset_Quantified_Variable_Scope;\n "}, {"sha": "cc84f9c3f2dc391ef6bde731118d3b5347972dae", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -13693,8 +13693,12 @@ package body Sem_Ch3 is\n       Related_Nod : Node_Id) return Entity_Id\n    is\n       T_Sub : constant Entity_Id :=\n-                Create_Itype (E_Record_Subtype,\n-                  Related_Nod, Corr_Rec, 'C', Suffix_Index => -1);\n+                Create_Itype\n+                  (Ekind        => E_Record_Subtype,\n+                   Related_Nod  => Related_Nod,\n+                   Related_Id   => Corr_Rec,\n+                   Suffix       => 'C',\n+                   Suffix_Index => -1);\n \n    begin\n       Set_Etype             (T_Sub, Corr_Rec);"}, {"sha": "b330426db5cbef9dcadd4ecd17a32621df994950", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -398,7 +398,11 @@ package body Sem_Ch6 is\n          --  As elsewhere, we do not emit freeze nodes within a generic unit.\n \n          if not Inside_A_Generic then\n-            Freeze_Expr_Types (Def_Id, Etype (Def_Id), Expr, N);\n+            Freeze_Expr_Types\n+              (Def_Id => Def_Id,\n+               Typ    => Etype (Def_Id),\n+               Expr   => Expr,\n+               N      => N);\n          end if;\n \n          --  For navigation purposes, indicate that the function is a body\n@@ -7241,16 +7245,16 @@ package body Sem_Ch6 is\n                   end if;\n                end;\n \n-            --  Functions can override abstract interface functions\n-            --  Return types must be subtype conformant.\n+            --  Functions can override abstract interface functions. Return\n+            --  types must be subtype conformant.\n \n             elsif Ekind (Def_Id) = E_Function\n               and then Ekind (Subp) = E_Function\n               and then Matches_Prefixed_View_Profile\n                          (Parameter_Specifications (Parent (Def_Id)),\n                           Parameter_Specifications (Parent (Subp)))\n-              and then Conforming_Types (Etype (Def_Id), Etype (Subp),\n-                Subtype_Conformant)\n+              and then Conforming_Types\n+                         (Etype (Def_Id), Etype (Subp), Subtype_Conformant)\n             then\n                Candidate := Subp;\n "}, {"sha": "2002b75876f7cb8ce56f0b63d269b8687ed12191", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -6081,18 +6081,18 @@ package body Sem_Res is\n       then\n          if Is_Expression_Function (Entity (Subp)) then\n \n-            --  Force freeze of expression function in call.\n+            --  Force freeze of expression function in call\n \n             Set_Comes_From_Source (Subp, True);\n-            Set_Must_Not_Freeze (Subp, False);\n+            Set_Must_Not_Freeze   (Subp, False);\n          end if;\n \n          Freeze_Expression (Subp);\n       end if;\n \n       --  For a predefined operator, the type of the result is the type imposed\n       --  by context, except for a predefined operation on universal fixed.\n-      --  Otherwise The type of the call is the type returned by the subprogram\n+      --  Otherwise the type of the call is the type returned by the subprogram\n       --  being called.\n \n       if Is_Predefined_Op (Nam) then\n@@ -6128,14 +6128,21 @@ package body Sem_Res is\n             Ret_Type   : constant Entity_Id := Etype (Nam);\n \n          begin\n-            --  If this is a parameterless call there is no ambiguity\n-            --  and the call has the type of the function.\n+            --  If this is a parameterless call there is no ambiguity and the\n+            --  call has the type of the function.\n \n             if No (First_Actual (N)) then\n                Set_Etype (N, Etype (Nam));\n+\n                if Present (First_Formal (Nam)) then\n                   Resolve_Actuals (N, Nam);\n                end if;\n+\n+               --  Annotate the tree by creating a call marker in case the\n+               --  original call is transformed by expansion. The call marker\n+               --  is automatically saved for later examination by the ABE\n+               --  Processing phase.\n+\n                Build_Call_Marker (N);\n \n             elsif Is_Access_Type (Ret_Type)"}, {"sha": "2b31cf752cb0c0c1c19fa83205210033c2a1d70a", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -24040,12 +24040,11 @@ package body Sem_Util is\n          then\n             return True;\n \n-         --  OUtside of its scope, a synchronized type may just be\n-         --  private.\n+         --  Outside of its scope, a synchronized type may just be private\n \n          elsif Is_Private_Type (Curr)\n            and then Present (Full_View (Curr))\n-            and then Is_Concurrent_Type (Full_View (Curr))\n+           and then Is_Concurrent_Type (Full_View (Curr))\n          then\n             return Scope_Within (Full_View (Curr), Outer);\n          end if;"}, {"sha": "1359c944670708baf059759e421d5dccc6135355", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -4674,7 +4674,7 @@ package Sinfo is\n \n       --------------------------\n       -- 4.5.7  If Expression --\n-      ----------------------------\n+      --------------------------\n \n       --  IF_EXPRESSION ::=\n       --    if CONDITION then DEPENDENT_EXPRESSION"}, {"sha": "ab7eecb7257e4e1870b5e01c0e3ae1dd64c7794b", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92a68a0464fc59667a3713c2a041b9f4582122a4/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=92a68a0464fc59667a3713c2a041b9f4582122a4", "patch": "@@ -3540,17 +3540,14 @@ package body Sprint is\n       --  where the aspects are printed inside the package specification.\n \n       if Has_Aspects (Node)\n-        and then not Nkind_In (Node, N_Package_Declaration,\n-                               N_Generic_Package_Declaration)\n-        and then not Is_Empty_List (Aspect_Specifications (Node))\n+        and then not Nkind_In (Node, N_Generic_Package_Declaration,\n+                                     N_Package_Declaration)\n         and then not Is_Empty_List (Aspect_Specifications (Node))\n       then\n          Sprint_Aspect_Specifications (Node, Semicolon => True);\n       end if;\n \n-      if Nkind (Node) in N_Subexpr\n-        and then Do_Range_Check (Node)\n-      then\n+      if Nkind (Node) in N_Subexpr and then Do_Range_Check (Node) then\n          Write_Str (\"}\");\n       end if;\n "}]}