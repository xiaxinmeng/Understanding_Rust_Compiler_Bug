{"sha": "3ef39186b61939da7c658561b97f04b62973bf92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VmMzkxODZiNjE5MzlkYTdjNjU4NTYxYjk3ZjA0YjYyOTczYmY5Mg==", "commit": {"author": {"name": "JunMa", "email": "JunMa@linux.alibaba.com", "date": "2020-01-21T10:18:09Z"}, "committer": {"name": "JunMa", "email": "JunMa@linux.alibaba.com", "date": "2020-02-05T00:54:46Z"}, "message": "Handle type deduction of auto and decltype(auto) with reference expression\n\ngcc/cp\n    * coroutines.cc (build_co_await): Call convert_from_reference\n    to wrap co_await_expr with indirect_ref which avoid\n    reference/non-reference type confusion.\n\n    (co_await_expander):  Sink to call_expr if await_resume\n    is wrapped by indirect_ref.\n\ngcc/testsuite\n    * g++.dg/coroutines/co-await-14-return-ref-to-auto.C: New test.", "tree": {"sha": "5766772318711e97df9aabf30eabd54e9ac9b609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5766772318711e97df9aabf30eabd54e9ac9b609"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ef39186b61939da7c658561b97f04b62973bf92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef39186b61939da7c658561b97f04b62973bf92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ef39186b61939da7c658561b97f04b62973bf92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef39186b61939da7c658561b97f04b62973bf92/comments", "author": {"login": "junparser", "id": 59546948, "node_id": "MDQ6VXNlcjU5NTQ2OTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/59546948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/junparser", "html_url": "https://github.com/junparser", "followers_url": "https://api.github.com/users/junparser/followers", "following_url": "https://api.github.com/users/junparser/following{/other_user}", "gists_url": "https://api.github.com/users/junparser/gists{/gist_id}", "starred_url": "https://api.github.com/users/junparser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/junparser/subscriptions", "organizations_url": "https://api.github.com/users/junparser/orgs", "repos_url": "https://api.github.com/users/junparser/repos", "events_url": "https://api.github.com/users/junparser/events{/privacy}", "received_events_url": "https://api.github.com/users/junparser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "junparser", "id": 59546948, "node_id": "MDQ6VXNlcjU5NTQ2OTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/59546948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/junparser", "html_url": "https://github.com/junparser", "followers_url": "https://api.github.com/users/junparser/followers", "following_url": "https://api.github.com/users/junparser/following{/other_user}", "gists_url": "https://api.github.com/users/junparser/gists{/gist_id}", "starred_url": "https://api.github.com/users/junparser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/junparser/subscriptions", "organizations_url": "https://api.github.com/users/junparser/orgs", "repos_url": "https://api.github.com/users/junparser/repos", "events_url": "https://api.github.com/users/junparser/events{/privacy}", "received_events_url": "https://api.github.com/users/junparser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81d73774ed6ee26876052c8cb915e73152ffca3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81d73774ed6ee26876052c8cb915e73152ffca3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81d73774ed6ee26876052c8cb915e73152ffca3a"}], "stats": {"total": 70, "additions": 67, "deletions": 3}, "files": [{"sha": "a54c8db23a6155bfc6e225bbc0c11f770ed0545f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef39186b61939da7c658561b97f04b62973bf92/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef39186b61939da7c658561b97f04b62973bf92/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3ef39186b61939da7c658561b97f04b62973bf92", "patch": "@@ -1,3 +1,12 @@\n+2020-02-05  Jun Ma <JunMa@linux.alibaba.com>\n+\n+\t* coroutines.cc (build_co_await): Call convert_from_reference\n+\tto wrap co_await_expr with indirect_ref which avoid\n+\treference/non-reference type confusion.\n+\n+\t(co_await_expander):  Sink to call_expr if await_resume\n+\tis wrapped by indirect_ref.\n+\n 2020-02-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/93551"}, {"sha": "e24ea7b29ad67bf02876ab46214363bb8da5a302", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef39186b61939da7c658561b97f04b62973bf92/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef39186b61939da7c658561b97f04b62973bf92/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=3ef39186b61939da7c658561b97f04b62973bf92", "patch": "@@ -803,9 +803,12 @@ build_co_await (location_t loc, tree a, suspend_point_kind suspend_kind)\n   TREE_VEC_ELT (awaiter_calls, 1) = awsp_call; /* await_suspend().  */\n   TREE_VEC_ELT (awaiter_calls, 2) = awrs_call; /* await_resume().  */\n \n-  return build5_loc (loc, CO_AWAIT_EXPR, TREE_TYPE (awrs_call), a,\n-\t\t     e_proxy, o, awaiter_calls,\n-\t\t     build_int_cst (integer_type_node, (int) suspend_kind));\n+  tree await_expr = build5_loc (loc, CO_AWAIT_EXPR,\n+\t\t\t\tTREE_TYPE (TREE_TYPE (awrs_func)),\n+\t\t\t\ta, e_proxy, o, awaiter_calls,\n+\t\t\t\tbuild_int_cst (integer_type_node,\n+\t\t\t\t\t       (int) suspend_kind));\n+  return convert_from_reference (await_expr);\n }\n \n tree\n@@ -1566,6 +1569,9 @@ co_await_expander (tree *stmt, int * /*do_subtree*/, void *d)\n   /* This will produce the value (if one is provided) from the co_await\n      expression.  */\n   tree resume_call = TREE_VEC_ELT (awaiter_calls, 2); /* await_resume().  */\n+  if (REFERENCE_REF_P (resume_call))\n+    /* Sink to await_resume call_expr.  */\n+    resume_call = TREE_OPERAND (resume_call, 0);\n   switch (stmt_code)\n     {\n     default: /* not likely to work .. but... */"}, {"sha": "3b2be718c5fe36423d51a2375c254266653ba660", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef39186b61939da7c658561b97f04b62973bf92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef39186b61939da7c658561b97f04b62973bf92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ef39186b61939da7c658561b97f04b62973bf92", "patch": "@@ -1,3 +1,7 @@\n+2020-02-05  Jun Ma <JunMa@linux.alibaba.com>\n+\n+\t* g++.dg/coroutines/co-await-14-return-ref-to-auto.C: New test.\n+\n 2020-02-04  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/data-model-1.c (struct coord): Convert fields"}, {"sha": "0a7c035ef2ab114b0d37bf10673cff33daa5d585", "filename": "gcc/testsuite/g++.dg/coroutines/torture/co-await-14-return-ref-to-auto.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef39186b61939da7c658561b97f04b62973bf92/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fco-await-14-return-ref-to-auto.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef39186b61939da7c658561b97f04b62973bf92/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fco-await-14-return-ref-to-auto.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Ftorture%2Fco-await-14-return-ref-to-auto.C?ref=3ef39186b61939da7c658561b97f04b62973bf92", "patch": "@@ -0,0 +1,45 @@\n+//  { dg-do run }\n+\n+/* The simplest valued co_await we can do.  */\n+\n+#include \"../coro.h\"\n+\n+// boiler-plate for tests of codegen\n+#include \"../coro1-ret-int-yield-int.h\"\n+\n+\n+coro1\n+f ()\n+{\n+  int t1 = 5;\n+  int t2 = 5;\n+  auto gX = co_await coro1::suspend_always_intrefprt{t1};\n+  if (gX != t1)\n+\t  abort();\n+  decltype(auto) gX1 = co_await coro1::suspend_always_intrefprt{t2};\n+  if (&gX1 != &t2)\n+\t  abort();\n+  co_return t1 + 10;\n+}\n+\n+int main ()\n+{\n+  PRINT (\"main: create coro1\");\n+  struct coro1 f_coro = f ();\n+  if (f_coro.handle.done())\n+    {\n+      PRINT (\"main: we should not be 'done' [1]\");\n+      abort ();\n+    }\n+  PRINT (\"main: resuming [1] initial suspend\");\n+  while (!f_coro.handle.done())\n+    f_coro.handle.resume();\n+  /* we should now have returned with the co_return (15) */\n+  if (!f_coro.handle.done())\n+    {\n+      PRINT (\"main: we should be 'done' \");\n+      abort ();\n+    }\n+  puts (\"main: done\");\n+  return 0;\n+}"}]}