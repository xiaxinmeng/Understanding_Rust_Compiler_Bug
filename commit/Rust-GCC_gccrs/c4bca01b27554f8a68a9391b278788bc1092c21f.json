{"sha": "c4bca01b27554f8a68a9391b278788bc1092c21f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRiY2EwMWIyNzU1NGY4YTY4YTkzOTFiMjc4Nzg4YmMxMDkyYzIxZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-01-07T22:50:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-01-07T22:50:42Z"}, "message": "re PR libstdc++/38732 (Openoffice.org segfaults with runtime libs built from GCC trunk)\n\n\tPR libstdc++/38732\n\t* libsupc++/unwind-cxx.h (__cxxabiv1::__cxa_exception): Remove\n\treferenceCount field again.\n\t(__cxxabiv1::__cxa_refcounted_exception): New struct.\n\t(__cxxabiv1::__get_refcounted_exception_header_from_obj,\n\t__cxxabiv1::__get_refcounted_exception_header_from_ue): New static\n\tinline functions.\n\t* libsupc++/eh_alloc.cc (__cxxabiv1::__cxa_allocate_exception,\n\t__cxxabiv1::__cxa_free_exception): Use __cxa_refcounted_exception\n\tinstead of __cxa_exception.\n\t* libsupc++/eh_throw.cc (__gxx_exception_cleanup,\n\t__cxxabiv1::__cxa_throw): Likewise.\n\t* libsupc++/eh_ptr.cc (std::rethrow_exception,\n\tstd::__exception_ptr::exception_ptr::_M_addref,\n\tstd::__exception_ptr::exception_ptr::_M_release,\n\t__gxx_dependent_exception_cleanup): Likewise.\n\t* testsuite/18_support/exception/38732.cc: New test.\n\nFrom-SVN: r143170", "tree": {"sha": "c60d6aa70fbdd55088e82c165c1341adb947d48c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c60d6aa70fbdd55088e82c165c1341adb947d48c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4bca01b27554f8a68a9391b278788bc1092c21f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4bca01b27554f8a68a9391b278788bc1092c21f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4bca01b27554f8a68a9391b278788bc1092c21f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4bca01b27554f8a68a9391b278788bc1092c21f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1f93f6871ed8248e799690c7029cf1d5b12ff2f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f93f6871ed8248e799690c7029cf1d5b12ff2f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f93f6871ed8248e799690c7029cf1d5b12ff2f2"}], "stats": {"total": 208, "additions": 171, "deletions": 37}, "files": [{"sha": "ed698d3d51e2ecd677e0b799d63b0c8cd7578643", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bca01b27554f8a68a9391b278788bc1092c21f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bca01b27554f8a68a9391b278788bc1092c21f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c4bca01b27554f8a68a9391b278788bc1092c21f", "patch": "@@ -1,5 +1,23 @@\n 2009-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR libstdc++/38732\n+\t* libsupc++/unwind-cxx.h (__cxxabiv1::__cxa_exception): Remove\n+\treferenceCount field again.\n+\t(__cxxabiv1::__cxa_refcounted_exception): New struct.\n+\t(__cxxabiv1::__get_refcounted_exception_header_from_obj,\n+\t__cxxabiv1::__get_refcounted_exception_header_from_ue): New static\n+\tinline functions.\n+\t* libsupc++/eh_alloc.cc (__cxxabiv1::__cxa_allocate_exception,\n+\t__cxxabiv1::__cxa_free_exception): Use __cxa_refcounted_exception\n+\tinstead of __cxa_exception.\n+\t* libsupc++/eh_throw.cc (__gxx_exception_cleanup,\n+\t__cxxabiv1::__cxa_throw): Likewise.\n+\t* libsupc++/eh_ptr.cc (std::rethrow_exception,\n+\tstd::__exception_ptr::exception_ptr::_M_addref,\n+\tstd::__exception_ptr::exception_ptr::_M_release,\n+\t__gxx_dependent_exception_cleanup): Likewise.\n+\t* testsuite/18_support/exception/38732.cc: New test.\n+\n \tPR libstdc++/38092\n \t* acinclude.m4 (HAVE_AS_SYMVER_DIRECTIVE): New test.\n \t* src/compatibility.cc: Don't use .symver directives if"}, {"sha": "495a25f28f08ef158b7171952974b647a7f5d033", "filename": "libstdc++-v3/libsupc++/eh_alloc.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bca01b27554f8a68a9391b278788bc1092c21f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bca01b27554f8a68a9391b278788bc1092c21f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc?ref=c4bca01b27554f8a68a9391b278788bc1092c21f", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Allocate exception objects.\n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n@@ -103,7 +103,7 @@ __cxxabiv1::__cxa_allocate_exception(std::size_t thrown_size) throw()\n {\n   void *ret;\n \n-  thrown_size += sizeof (__cxa_exception);\n+  thrown_size += sizeof (__cxa_refcounted_exception);\n   ret = malloc (thrown_size);\n \n   if (! ret)\n@@ -137,9 +137,9 @@ __cxxabiv1::__cxa_allocate_exception(std::size_t thrown_size) throw()\n   __cxa_eh_globals *globals = __cxa_get_globals ();\n   globals->uncaughtExceptions += 1;\n \n-  memset (ret, 0, sizeof (__cxa_exception));\n+  memset (ret, 0, sizeof (__cxa_refcounted_exception));\n \n-  return (void *)((char *)ret + sizeof (__cxa_exception));\n+  return (void *)((char *)ret + sizeof (__cxa_refcounted_exception));\n }\n \n \n@@ -158,7 +158,7 @@ __cxxabiv1::__cxa_free_exception(void *vptr) throw()\n       emergency_used &= ~((bitmask_type)1 << which);\n     }\n   else\n-    free (ptr - sizeof (__cxa_exception));\n+    free (ptr - sizeof (__cxa_refcounted_exception));\n }\n \n "}, {"sha": "414a6b9e0101943417987421878201e48f804d13", "filename": "libstdc++-v3/libsupc++/eh_ptr.cc", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bca01b27554f8a68a9391b278788bc1092c21f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bca01b27554f8a68a9391b278788bc1092c21f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc?ref=c4bca01b27554f8a68a9391b278788bc1092c21f", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Implement the members of exception_ptr.\n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -84,8 +84,8 @@ std::__exception_ptr::exception_ptr::_M_addref() throw()\n {\n   if (_M_exception_object)\n     {\n-      __cxa_exception *eh =\n-        __get_exception_header_from_obj (_M_exception_object);\n+      __cxa_refcounted_exception *eh =\n+\t__get_refcounted_exception_header_from_obj (_M_exception_object);\n       __sync_add_and_fetch (&eh->referenceCount, 1);\n     }\n }\n@@ -96,12 +96,12 @@ std::__exception_ptr::exception_ptr::_M_release() throw()\n {\n   if (_M_exception_object)\n     {\n-      __cxa_exception *eh =\n-        __get_exception_header_from_obj (_M_exception_object);\n+      __cxa_refcounted_exception *eh =\n+\t__get_refcounted_exception_header_from_obj (_M_exception_object);\n       if (__sync_sub_and_fetch (&eh->referenceCount, 1) == 0)\n         {\n-          if (eh->exceptionDestructor)\n-            eh->exceptionDestructor (_M_exception_object);\n+\t  if (eh->exc.exceptionDestructor)\n+\t    eh->exc.exceptionDestructor (_M_exception_object);\n \n           __cxa_free_exception (_M_exception_object);\n           _M_exception_object = 0;\n@@ -191,22 +191,22 @@ __gxx_dependent_exception_cleanup (_Unwind_Reason_Code code,\n {\n   // This cleanup is set only for dependents.\n   __cxa_dependent_exception *dep = __get_dependent_exception_from_ue (exc);\n-  __cxa_exception *header =\n-    __get_exception_header_from_obj (dep->primaryException);\n+  __cxa_refcounted_exception *header =\n+    __get_refcounted_exception_header_from_obj (dep->primaryException);\n \n   // We only want to be called through _Unwind_DeleteException.\n   // _Unwind_DeleteException in the HP-UX IA64 libunwind library\n   // returns _URC_NO_REASON and not _URC_FOREIGN_EXCEPTION_CAUGHT\n   // like the GCC _Unwind_DeleteException function does.\n   if (code != _URC_FOREIGN_EXCEPTION_CAUGHT && code != _URC_NO_REASON)\n-    __terminate (header->terminateHandler);\n+    __terminate (header->exc.terminateHandler);\n \n   __cxa_free_dependent_exception (dep);\n \n   if (__sync_sub_and_fetch (&header->referenceCount, 1) == 0)\n     {\n-      if (header->exceptionDestructor)\n-        header->exceptionDestructor (header + 1);\n+      if (header->exc.exceptionDestructor)\n+\theader->exc.exceptionDestructor (header + 1);\n \n       __cxa_free_exception (header + 1);\n     }\n@@ -217,7 +217,8 @@ void\n std::rethrow_exception(std::exception_ptr ep)\n {\n   void *obj = ep._M_get();\n-  __cxa_exception *eh = __get_exception_header_from_obj (obj);\n+  __cxa_refcounted_exception *eh\n+    = __get_refcounted_exception_header_from_obj (obj);\n \n   __cxa_dependent_exception *dep = __cxa_allocate_dependent_exception ();\n   dep->primaryException = obj;"}, {"sha": "afe7c683c5bfa12780fd0c6fafe97f745ee5ea56", "filename": "libstdc++-v3/libsupc++/eh_throw.cc", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bca01b27554f8a68a9391b278788bc1092c21f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bca01b27554f8a68a9391b278788bc1092c21f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_throw.cc?ref=c4bca01b27554f8a68a9391b278788bc1092c21f", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Exception handling routines for throwing.\n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n@@ -38,21 +38,22 @@ static void\n __gxx_exception_cleanup (_Unwind_Reason_Code code, _Unwind_Exception *exc)\n {\n   // This cleanup is set only for primaries.\n-  __cxa_exception *header = __get_exception_header_from_ue (exc);\n+  __cxa_refcounted_exception *header\n+    = __get_refcounted_exception_header_from_ue (exc);\n \n   // We only want to be called through _Unwind_DeleteException.\n   // _Unwind_DeleteException in the HP-UX IA64 libunwind library\n   // returns _URC_NO_REASON and not _URC_FOREIGN_EXCEPTION_CAUGHT\n   // like the GCC _Unwind_DeleteException function does.\n   if (code != _URC_FOREIGN_EXCEPTION_CAUGHT && code != _URC_NO_REASON)\n-    __terminate (header->terminateHandler);\n+    __terminate (header->exc.terminateHandler);\n \n #ifdef _GLIBCXX_ATOMIC_BUILTINS_4\n   if (__sync_sub_and_fetch (&header->referenceCount, 1) == 0)\n     {\n #endif\n-      if (header->exceptionDestructor)\n-        header->exceptionDestructor (header + 1);\n+      if (header->exc.exceptionDestructor)\n+\theader->exc.exceptionDestructor (header + 1);\n \n       __cxa_free_exception (header + 1);\n #ifdef _GLIBCXX_ATOMIC_BUILTINS_4\n@@ -66,23 +67,24 @@ __cxxabiv1::__cxa_throw (void *obj, std::type_info *tinfo,\n \t\t\t void (*dest) (void *))\n {\n   // Definitely a primary.\n-  __cxa_exception *header = __get_exception_header_from_obj (obj);\n+  __cxa_refcounted_exception *header\n+    = __get_refcounted_exception_header_from_obj (obj);\n   header->referenceCount = 1;\n-  header->exceptionType = tinfo;\n-  header->exceptionDestructor = dest;\n-  header->unexpectedHandler = __unexpected_handler;\n-  header->terminateHandler = __terminate_handler;\n-  __GXX_INIT_PRIMARY_EXCEPTION_CLASS(header->unwindHeader.exception_class);\n-  header->unwindHeader.exception_cleanup = __gxx_exception_cleanup;\n+  header->exc.exceptionType = tinfo;\n+  header->exc.exceptionDestructor = dest;\n+  header->exc.unexpectedHandler = __unexpected_handler;\n+  header->exc.terminateHandler = __terminate_handler;\n+  __GXX_INIT_PRIMARY_EXCEPTION_CLASS(header->exc.unwindHeader.exception_class);\n+  header->exc.unwindHeader.exception_cleanup = __gxx_exception_cleanup;\n \n #ifdef _GLIBCXX_SJLJ_EXCEPTIONS\n-  _Unwind_SjLj_RaiseException (&header->unwindHeader);\n+  _Unwind_SjLj_RaiseException (&header->exc.unwindHeader);\n #else\n-  _Unwind_RaiseException (&header->unwindHeader);\n+  _Unwind_RaiseException (&header->exc.unwindHeader);\n #endif\n \n   // Some sort of unwinding error.  Note that terminate is a handler.\n-  __cxa_begin_catch (&header->unwindHeader);\n+  __cxa_begin_catch (&header->exc.unwindHeader);\n   std::terminate ();\n }\n "}, {"sha": "3e2cf0f00b40cd2223ca3cc322bc412371a17faa", "filename": "libstdc++-v3/libsupc++/unwind-cxx.h", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bca01b27554f8a68a9391b278788bc1092c21f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bca01b27554f8a68a9391b278788bc1092c21f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h?ref=c4bca01b27554f8a68a9391b278788bc1092c21f", "patch": "@@ -1,5 +1,5 @@\n // -*- C++ -*- Exception handling and frame unwind runtime interface routines.\n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n // Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n@@ -53,9 +53,6 @@ namespace __cxxabiv1\n \n struct __cxa_exception\n {\n-  // Manage this header.\n-  _Atomic_word referenceCount;\n-\n   // Manage the exception object itself.\n   std::type_info *exceptionType;\n   void (*exceptionDestructor)(void *); \n@@ -92,6 +89,14 @@ struct __cxa_exception\n   _Unwind_Exception unwindHeader;\n };\n \n+struct __cxa_refcounted_exception\n+{\n+  // Manage this header.\n+  _Atomic_word referenceCount;\n+  // __cxa_exception must be last, and no padding can be after it.\n+  __cxa_exception exc;\n+};\n+\n // A dependent C++ exception object consists of a wrapper around an unwind\n // object header with additional C++ specific information, containing a pointer\n // to a primary exception object.\n@@ -227,6 +232,21 @@ __get_exception_header_from_ue (_Unwind_Exception *exc)\n   return reinterpret_cast<__cxa_exception *>(exc + 1) - 1;\n }\n \n+// Acquire the C++ refcounted exception header from the C++ object.\n+static inline __cxa_refcounted_exception *\n+__get_refcounted_exception_header_from_obj (void *ptr)\n+{\n+  return reinterpret_cast<__cxa_refcounted_exception *>(ptr) - 1;\n+}\n+\n+// Acquire the C++ refcounted exception header from the generic exception\n+// header.\n+static inline __cxa_refcounted_exception *\n+__get_refcounted_exception_header_from_ue (_Unwind_Exception *exc)\n+{\n+  return reinterpret_cast<__cxa_refcounted_exception *>(exc + 1) - 1;\n+}\n+\n static inline __cxa_dependent_exception *\n __get_dependent_exception_from_ue (_Unwind_Exception *exc)\n {"}, {"sha": "9286552035a0f9b1f30242862d1c3095f1deedc4", "filename": "libstdc++-v3/testsuite/18_support/exception/38732.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4bca01b27554f8a68a9391b278788bc1092c21f/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception%2F38732.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4bca01b27554f8a68a9391b278788bc1092c21f/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception%2F38732.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception%2F38732.cc?ref=c4bca01b27554f8a68a9391b278788bc1092c21f", "patch": "@@ -0,0 +1,93 @@\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <typeinfo>\n+#include <exception>\n+#include <cstddef>\n+#include \"unwind.h\"\n+#include <testsuite_hooks.h>\n+\n+// Before exception_ptr was introduced, some programs copied\n+// part of unwind-cxx.h and used __cxa_get_globals to get at the\n+// current exceptionType.  __cxa_exception structure is described in the\n+// C++ ABI, so they have the right to assume it works.\n+// Ensure it is true.\n+\n+struct __cxa_exception\n+{\n+  std::type_info *exceptionType;\n+  void (*exceptionDestructor)(void *);\n+  std::unexpected_handler unexpectedHandler;\n+  std::terminate_handler terminateHandler;\n+  __cxa_exception *nextException;\n+  int handlerCount;\n+#ifdef __ARM_EABI_UNWINDER__\n+  __cxa_exception* nextPropagatingException;\n+  int propagationCount;\n+#else\n+  int handlerSwitchValue;\n+  const unsigned char *actionRecord;\n+  const unsigned char *languageSpecificData;\n+  _Unwind_Ptr catchTemp;\n+  void *adjustedPtr;\n+#endif\n+  _Unwind_Exception unwindHeader;\n+};\n+\n+struct __cxa_eh_globals\n+{\n+  __cxa_exception *caughtExceptions;\n+  unsigned int uncaughtExceptions;\n+#ifdef __ARM_EABI_UNWINDER__\n+  __cxa_exception* propagatingExceptions;\n+#endif\n+};\n+\n+extern \"C\" __cxa_eh_globals *__cxa_get_globals () throw();\n+\n+// PR libstdc++/38732\n+void test01 ()\n+{\n+  bool test __attribute__((unused)) = true;\n+  try {\n+    throw 0;\n+  } catch(...) {\n+    __cxa_exception *exc = __cxa_get_globals()->caughtExceptions;\n+    VERIFY ( exc != NULL );\n+    VERIFY ( typeid(int) == *exc->exceptionType );\n+  }\n+  try {\n+    throw 0LL;\n+  } catch(...) {\n+    __cxa_exception *exc = __cxa_get_globals()->caughtExceptions;\n+    VERIFY ( exc != NULL );\n+    VERIFY ( typeid(long long int) == *exc->exceptionType );\n+  }\n+  try {\n+    throw 0.0;\n+  } catch(...) {\n+    __cxa_exception *exc = __cxa_get_globals()->caughtExceptions;\n+    VERIFY ( exc != NULL );\n+    VERIFY ( typeid(double) == *exc->exceptionType );\n+  }\n+}\n+\n+int main ()\n+{\n+  test01 ();\n+}"}]}