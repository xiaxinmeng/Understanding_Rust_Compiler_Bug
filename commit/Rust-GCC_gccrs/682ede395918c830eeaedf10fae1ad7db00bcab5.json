{"sha": "682ede395918c830eeaedf10fae1ad7db00bcab5", "node_id": "C_kwDOANBUbNoAKDY4MmVkZTM5NTkxOGM4MzBlZWFlZGYxMGZhZTFhZDdkYjAwYmNhYjU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-04T00:16:24Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-02-04T00:16:24Z"}, "message": "Daily bump.", "tree": {"sha": "7c811111ee503d5c2f13fc9c80118341a86ffeca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c811111ee503d5c2f13fc9c80118341a86ffeca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/682ede395918c830eeaedf10fae1ad7db00bcab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/682ede395918c830eeaedf10fae1ad7db00bcab5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/682ede395918c830eeaedf10fae1ad7db00bcab5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/682ede395918c830eeaedf10fae1ad7db00bcab5/comments", "author": null, "committer": null, "parents": [{"sha": "82e31c8973eb1a752c2ffd01005efe291d35cee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e31c8973eb1a752c2ffd01005efe291d35cee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e31c8973eb1a752c2ffd01005efe291d35cee3"}], "stats": {"total": 523, "additions": 522, "deletions": 1}, "files": [{"sha": "6c41f80497e152ad057dbf3c24265b8012648e6c", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682ede395918c830eeaedf10fae1ad7db00bcab5/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682ede395918c830eeaedf10fae1ad7db00bcab5/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=682ede395918c830eeaedf10fae1ad7db00bcab5", "patch": "@@ -1,3 +1,7 @@\n+2022-02-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* fixinc.in: Use mkdir -p rather that a loop.\n+\n 2022-01-16  Olivier Hainque  <hainque@adacore.com>\n \n \t* inclhack.def (vxworks_posix_open): New hack."}, {"sha": "8f3ba4c03192cc95d1e2633648cf4591332f5d0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 217, "deletions": 0, "changes": 217, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682ede395918c830eeaedf10fae1ad7db00bcab5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682ede395918c830eeaedf10fae1ad7db00bcab5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=682ede395918c830eeaedf10fae1ad7db00bcab5", "patch": "@@ -1,3 +1,220 @@\n+2022-02-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/104260\n+\t* passes.def (pass_warn_access): Adjust pass placement.\n+\n+2022-02-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/104362\n+\t* config/i386/i386.cc (find_drap_reg): For 32bit targets\n+\treturn DI_REG if function uses __builtin_eh_return.\n+\n+2022-02-03  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gimple-ssa-warn-restrict.cc (class pass_wrestrict): Outline ctor.\n+\t(pass_wrestrict::m_ptr_qry): New member.\n+\t(wrestrict_walk): Rename...\n+\t(pass_wrestrict::check_block): ...to this.\n+\t(pass_wrestrict::execute): Set up and tear down pointer_query and\n+\tranger.\n+\t(builtin_memref::builtin_memref): Change ctor argument.  Simplify.\n+\t(builtin_access::builtin_access): Same.\n+\t(builtin_access::m_ptr_qry): New member.\n+\t(check_call): Rename...\n+\t(pass_wrestrict::check_call): ...to this.\n+\t(check_bounds_or_overlap): Change argument.\n+\t* gimple-ssa-warn-restrict.h (check_bounds_or_overlap): Same.\n+\n+2022-02-03  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gimple-array-bounds.cc (array_bounds_checker::array_bounds_checker):\n+\tDefine ctor.\n+\t(array_bounds_checker::get_value_range): Use new member.\n+\t(array_bounds_checker::check_mem_ref): Same.\n+\t* gimple-array-bounds.h (array_bounds_checker::array_bounds_checker):\n+\tOutline ctor.\n+\t(array_bounds_checker::m_ptr_query): New member.\n+\n+2022-02-03  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gimple-ssa-warn-access.cc (pass_waccess::pass_waccess): Remove\n+\tpointer_query cache.\n+\t* pointer-query.cc (pointer_query::pointer_query): Remove cache\n+\targument.  Zero-initialize new cache member.\n+\t(pointer_query::get_ref): Replace cache pointer with direct access.\n+\t(pointer_query::put_ref): Same.\n+\t(pointer_query::flush_cache): Same.\n+\t(pointer_query::dump): Same.\n+\t* pointer-query.h (class pointer_query): Remove cache argument from\n+\tctor.  Change cache pointer to cache subobject member.\n+\t* tree-ssa-strlen.cc: Remove pointer_query cache.\n+\n+2022-02-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/104119\n+\t* gimple-ssa-sprintf.cc (struct directive): Change argument type.\n+\t(format_none): Same.\n+\t(format_percent): Same.\n+\t(format_integer): Same.\n+\t(format_floating): Same.\n+\t(get_string_length): Same.\n+\t(format_character): Same.\n+\t(format_string): Same.\n+\t(format_plain): Same.\n+\t(format_directive): Same.\n+\t(compute_format_length): Same.\n+\t(handle_printf_call): Same.\n+\t* tree-ssa-strlen.cc (get_range_strlen_dynamic): Same.   Call\n+\tget_maxbound.\n+\t(get_range_strlen_phi): Same.\n+\t(get_maxbound): New function.\n+\t(strlen_pass::get_len_or_size): Adjust to parameter change.\n+\t* tree-ssa-strlen.h (get_range_strlen_dynamic): Change argument type.\n+\n+2022-02-03  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/103686\n+\t* config/rs6000/rs6000-builtin.cc (rs6000_gimple_fold_builtin):\tRemove\n+\ttest for !rs6000_fold_gimple.\n+\t* config/rs6000/rs6000.cc (rs6000_option_override_internal): Likewise.\n+\t* config/rs6000/rs6000.opt (mfold-gimple): Remove.\n+\n+2022-02-03  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/95082\n+\t* config/rs6000/rs6000-builtin.cc (rs6000_expand_builtin): Handle\n+\tendianness for vclzlsbb and vctzlsbb.\n+\t* config/rs6000/rs6000-builtins.def (VCLZLSBB_V16QI): Change\n+\tdefault pattern and indicate a different pattern will be used for\n+\tbig endian.\n+\t(VCLZLSBB_V4SI): Likewise.\n+\t(VCLZLSBB_V8HI): Likewise.\n+\t(VCTZLSBB_V16QI): Likewise.\n+\t(VCTZLSBB_V4SI): Likewise.\n+\t(VCTZLSBB_V8HI): Likewise.\n+\n+2022-02-03  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config.gcc (powerpc*-*-*): Add rs6000-builtin.o to extra_objs.\n+\t* config/rs6000/rs6000-builtin.cc: New file, containing code moved\n+\tfrom other files.\n+\t* config/rs6000/rs6000-call.cc (cpu_is_info): Move to\n+\trs6000-builtin.cc.\n+\t(cpu_supports_info): Likewise.\n+\t(rs6000_type_string): Likewise.\n+\t(altivec_expand_predicate_builtin): Likewise.\n+\t(rs6000_htm_spr_icode): Likewise.\n+\t(altivec_expand_vec_init_builtin): Likewise.\n+\t(get_element_number): Likewise.\n+\t(altivec_expand_vec_set_builtin): Likewise.\n+\t(altivec_expand_vec_ext_builtin): Likewise.\n+\t(rs6000_invalid_builtin): Likewise.\n+\t(rs6000_fold_builtin): Likewise.\n+\t(fold_build_vec_cmp): Likewise.\n+\t(fold_compare_helper): Likewise.\n+\t(map_to_integral_tree_type): Likewise.\n+\t(fold_mergehl_helper): Likewise.\n+\t(fold_mergeeo_helper): Likewise.\n+\t(rs6000_builtin_valid_without_lhs): Likewise.\n+\t(rs6000_builtin_is_supported): Likewise.\n+\t(rs6000_gimple_fold_mma_builtin): Likewise.\n+\t(rs6000_gimple_fold_builtin): Likewise.\n+\t(rs6000_expand_ldst_mask): Likewise.\n+\t(cpu_expand_builtin): Likewise.\n+\t(elemrev_icode): Likewise.\n+\t(ldv_expand_builtin): Likewise.\n+\t(lxvrse_expand_builtin): Likewise.\n+\t(lxvrze_expand_builtin): Likewise.\n+\t(stv_expand_builtin): Likewise.\n+\t(mma_expand_builtin): Likewise.\n+\t(htm_spr_num): Likewise.\n+\t(htm_expand_builtin): Likewise.\n+\t(rs6000_expand_builtin): Likewise.\n+\t(rs6000_vector_type): Likewise.\n+\t(rs6000_init_builtins): Likewise.  Remove initialization of\n+\tbuiltin_mode_to_type entries.\n+\t(rs6000_builtin_decl): Move to rs6000-builtin.cc.\n+\t* config/rs6000/rs6000.cc (rs6000_builtin_mask_for_load): New\n+\texternal declaration.\n+\t(rs6000_builtin_md_vectorized_function): Likewise.\n+\t(rs6000_builtin_reciprocal): Likewise.\n+\t(altivec_builtin_mask_for_load): Move to rs6000-builtin.cc.\n+\t(rs6000_builtin_types): Likewise.\n+\t(builtin_mode_to_type): Remove.\n+\t(rs6000_builtin_mask_for_load): Move to rs6000-builtin.cc.  Remove\n+\tstatic qualifier.\n+\t(rs6000_builtin_md_vectorized_function): Likewise.\n+\t(rs6000_builtin_reciprocal): Likewise.\n+\t* config/rs6000/rs6000.h (builtin_mode_to_type): Remove.\n+\t* config/rs6000/t-rs6000 (rs6000-builtin.o): New target.\n+\n+2022-02-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/104337\n+\t* tree-nrv.cc (pass_nrv::execute): Remove tieing result and found\n+\ttogether via DECL_ABSTRACT_ORIGIN.\n+\n+2022-02-03  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000-call.cc (rs6000_expand_builtin): Revise error\n+\tmessage for RES_BITS case.\n+\n+2022-02-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gimple-range-fold.cc (fur_list::fur_list): Set m_local[1] correctly.\n+\n+2022-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/arm/arm.opt (mfix-cortex-a57-aes-1742098,\n+\tmfix-cortex-a72-aes-1655431): Ensure description ends with full stop.\n+\n+2022-02-03  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* cfganal.cc (verify_marked_backedges): New.\n+\t* cfganal.h (verify_marked_backedges): New.\n+\t* gimple-range-path.cc (path_range_query::path_range_query):\n+\tVerify freshness of back edges.\n+\t* tree-ssa-loop-ch.cc (ch_base::copy_headers): Call\n+\tmark_dfs_back_edges.\n+\t* tree-ssa-threadbackward.cc (back_threader::back_threader): Move\n+\tpath_range_query construction after backedges have been\n+\tupdated.\n+\n+2022-02-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (movmisalign<mode>): Extend from\n+\tVALL to VALL_F16.\n+\n+2022-02-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (VALL_F16MOV): Delete.\n+\t* config/aarch64/aarch64-simd.md (mov<mode>): Use VALL_F16 instead\n+\tof VALL_F16MOV.\n+\n+2022-02-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/i386/i386-options.cc (ix86_valid_target_attribute_inner_p):\n+\tChange subject and object in the error message.\n+\t* config/s390/s390.cc (s390_valid_target_attribute_inner_p):\n+\tLikewise.\n+\n+2022-02-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/s390/s390.cc (s390_valid_target_attribute_inner_p):\n+\tUse the error message for i386 target.\n+\n+2022-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/104334\n+\t* range-op.cc (range_operator::wi_fold_in_parts): Change lh_range\n+\tand rh_range type to widest_int and subtract in widest_int.  Remove\n+\tov_rh, ov_lh and sign vars, always perform comparisons as signed\n+\tand use >, < and == operators for it.\n+\n+2022-02-03  Martin Sebor  <msebor@redhat.com>\n+\n+\t* common.opt (-Wuse-after-free): Correct typos.\n+\n 2022-02-02  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/104270"}, {"sha": "1264d4e89ae58495dcbc3a094067037e2bd95fc0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682ede395918c830eeaedf10fae1ad7db00bcab5/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682ede395918c830eeaedf10fae1ad7db00bcab5/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=682ede395918c830eeaedf10fae1ad7db00bcab5", "patch": "@@ -1 +1 @@\n-20220203\n+20220204"}, {"sha": "b008c66f34b50b074d8d92cd050a58ed38ebcdbf", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682ede395918c830eeaedf10fae1ad7db00bcab5/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682ede395918c830eeaedf10fae1ad7db00bcab5/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=682ede395918c830eeaedf10fae1ad7db00bcab5", "patch": "@@ -1,3 +1,29 @@\n+2022-02-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104369\n+\t* engine.cc (exploded_graph::process_node): Use the node for any\n+\tdiagnostics, avoiding ICE if a bifurcation update adds a\n+\tsaved_diagnostic, such as for a tainted realloc size.\n+\t* region-model-impl-calls.cc\n+\t(region_model::impl_call_realloc::success_no_move::update_model):\n+\tRequire the old pointer to be non-NULL to be able successfully\n+\tgrow in place.  Use model->deref_rvalue rather than maybe_get_region\n+\tto support the old pointer being symbolic.\n+\t(region_model::impl_call_realloc::success_with_move::update_model):\n+\tLikewise.  Add a constraint that the new pointer != the old pointer.\n+\tUse a sized_region when setting the value of the new region.\n+\tHandle the case where we don't know the dynamic size of the old\n+\tregion by marking the new region as unknown.\n+\t* sm-taint.cc (tainted_allocation_size::tainted_allocation_size):\n+\tUpdate assertion to also allow for MEMSPACE_UNKNOWN.\n+\t(tainted_allocation_size::emit): Likewise.\n+\t(region_model::check_dynamic_size_for_taint): Likewise.\n+\n+2022-02-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model-impl-calls.cc (region_model::impl_call_calloc): Use\n+\ta sized_region when calling zero_fill_region.\n+\n 2022-02-02  David Malcolm  <dmalcolm@redhat.com>\n \n \t* region-model.cc (region_model::on_return): Replace usage of"}, {"sha": "089a36f424eddea389ce0cf622b30869c7fcff51", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682ede395918c830eeaedf10fae1ad7db00bcab5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682ede395918c830eeaedf10fae1ad7db00bcab5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=682ede395918c830eeaedf10fae1ad7db00bcab5", "patch": "@@ -1,3 +1,22 @@\n+2022-02-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/104079\n+\t* pt.cc (value_dependent_noexcept_spec_p): New predicate split\n+\tout from ...\n+\t(dependent_type_p_r): ... here.\n+\t(instantiation_dependent_r): Use value_dependent_noexcept_spec_p\n+\tto consider dependence of a noexcept-spec before C++17.\n+\t* tree.cc (fixup_deferred_exception_variants): Clear\n+\tTYPE_DEPENDENT_P_VALID.\n+\n+2022-02-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104302\n+\t* decl.cc (maybe_deduce_size_from_array_init): Give up\n+\ton type-dependent init.\n+\t(cp_complete_array_type): Only call reshape_init for character\n+\tarray.\n+\n 2022-02-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/103186"}, {"sha": "2d19d1ebed30c95076978500cd817a85bf5a9ea3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682ede395918c830eeaedf10fae1ad7db00bcab5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682ede395918c830eeaedf10fae1ad7db00bcab5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=682ede395918c830eeaedf10fae1ad7db00bcab5", "patch": "@@ -1,3 +1,17 @@\n+2022-02-03  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104311\n+\t* check.cc (gfc_calculate_transfer_sizes): Checks for case when\n+\tstorage size of SOURCE is greater than zero while the storage size\n+\tof MOLD is zero and MOLD is an array shall not depend on SIZE.\n+\n+2022-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/104328\n+\t* openmp.cc (is_scalar_intrinsic_expr): If must_be_var && conv_ok\n+\tand expr is conversion, verify it is a conversion from EXPR_VARIABLE\n+\twith non-NULL symtree.  Check ->block->next before dereferencing it.\n+\n 2022-02-01  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/104331"}, {"sha": "ff8b08db869adec77b07a3d581bc86b7df4951f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682ede395918c830eeaedf10fae1ad7db00bcab5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682ede395918c830eeaedf10fae1ad7db00bcab5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=682ede395918c830eeaedf10fae1ad7db00bcab5", "patch": "@@ -1,3 +1,203 @@\n+2022-02-03  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/104079\n+\t* g++.dg/cpp0x/noexcept74.C: New test.\n+\t* g++.dg/cpp0x/noexcept74a.C: New test.\n+\n+2022-02-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/104369\n+\t* gcc.dg/analyzer/pr104369-1.c: New test.\n+\t* gcc.dg/analyzer/pr104369-2.c: New test.\n+\t* gcc.dg/analyzer/realloc-3.c: New test.\n+\t* gcc.dg/analyzer/realloc-4.c: New test.\n+\t* gcc.dg/analyzer/taint-realloc.c: New test.\n+\n+2022-02-03  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/calloc-1.c: New test.\n+\n+2022-02-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/104362\n+\t* gcc.target/i386/pr104362.c: New test.\n+\n+2022-02-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/104119\n+\t* gcc.dg/tree-ssa/builtin-snprintf-13.c: New test.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-29.c: New test.\n+\n+2022-02-03  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/104311\n+\t* gfortran.dg/transfer_simplify_15.f90: New test.\n+\n+2022-02-03  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/103686\n+\t* gcc.target/powerpc/builtins-1-be-folded.c: Remove -mfold-gimple\n+\toption.\n+\t* gcc.target/powerpc/builtins-1-le-folded.c: Likewise.\n+\t* gcc.target/powerpc/builtins-1.c: Rewrite to use small functions and\n+\trestrict to -O2 -mbig for predictability.  Adjust instruction counts.\n+\t* gcc.target/powerpc/builtins-5.c: Remove -mno-fold-gimple option.\n+\t* gcc.target/powerpc/p8-vec-xl-xst.c: Likewise.\n+\t* gcc.target/powerpc/pr83926.c: Likewise.\n+\t* gcc.target/powerpc/pr86731-nogimplefold-longlong.c: Delete.\n+\t* gcc.target/powerpc/pr86731-nogimplefold.c: Delete.\n+\t* gcc.target/powerpc/swaps-p8-17.c: Remove -mno-fold-gimple option.\n+\n+2022-02-03  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\tPR target/95082\n+\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-0.c: Restrict to -mbig.\n+\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-1.c: Likewise.\n+\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-3.c: New.\n+\t* gcc.target/powerpc/vsu/vec-cntlz-lsbb-4.c: New.\n+\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-0.c: Restrict to -mbig.\n+\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-1.c: Likewise.\n+\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-3.c: New.\n+\t* gcc.target/powerpc/vsu/vec-cnttz-lsbb-4.c: New.\n+\n+2022-02-03  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/104337\n+\t* gcc.dg/debug/pr104337.c: New testcase.\n+\n+2022-02-03  Bill Schmidt  <wschmidt@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-10.c: Adjust error\n+\tmessages.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-2.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-3.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-4.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-5.c: Likewise.\n+\t* gcc.target/powerpc/bfp/scalar-test-data-class-9.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-test-data-class-4.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-test-data-class-5.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-test-data-class-6.c: Likewise.\n+\t* gcc.target/powerpc/bfp/vec-test-data-class-7.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-12.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-14.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-17.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-19.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-2.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-22.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-24.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-27.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-29.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-32.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-34.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-37.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-39.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-4.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-42.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-44.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-47.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-49.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-52.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-54.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-57.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-59.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-62.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-64.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-67.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-69.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-7.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-72.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-74.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-77.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-79.c: Likewise.\n+\t* gcc.target/powerpc/dfp/dtstsfi-9.c: Likewise.\n+\t* gcc.target/powerpc/pr80315-1.c: Likewise.\n+\t* gcc.target/powerpc/pr80315-2.c: Likewise.\n+\t* gcc.target/powerpc/pr80315-3.c: Likewise.\n+\t* gcc.target/powerpc/pr80315-4.c: Likewise.\n+\t* gcc.target/powerpc/pr82015.c: Likewise.\n+\t* gcc.target/powerpc/pr91903.c: Likewise.\n+\t* gcc.target/powerpc/test_fpscr_rn_builtin_error.c: Likewise.\n+\t* gcc.target/powerpc/vec-ternarylogic-10.c: Likewise.\n+\n+2022-02-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/104356\n+\t* gnat.dg/div_zero.adb: Add dg-skip-if directive for PowerPC.\n+\n+2022-02-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/struct_vect_25.c: Remove XFAILs.\n+\n+2022-02-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/mask_struct_load_1.c: Use intptr_t\n+\titerators instead of int iterators.\n+\t* gcc.target/aarch64/sve/mask_struct_load_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_load_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_store_1.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_store_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_store_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/mask_struct_store_4.c: Likewise.\n+\n+2022-02-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/single_5.c: Remove some XFAILs.\n+\n+2022-02-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s1115.c: Don't XFAIL for SVE.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s114.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s1161.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s1232.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s124.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s1279.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s161.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s253.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s257.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s271.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s2711.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s2712.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s272.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s273.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s274.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s276.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s278.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s279.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s3111.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s4113.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s441.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s443.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-s491.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-vas.c: Likewise.\n+\t* gcc.dg/vect/tsvc/vect-tsvc-vif.c: Likewise.\n+\n+2022-02-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/guality/ipa-sra-1.c: Update aarch64*-*-* xfails.\n+\t* gcc.dg/guality/pr54519-1.c: Likewise.\n+\t* gcc.dg/guality/pr54519-3.c: Likewise.\n+\n+2022-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/104334\n+\t* g++.dg/opt/pr104334.C: New test.\n+\n+2022-02-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR fortran/104328\n+\t* gfortran.dg/gomp/atomic-27.f90: New test.\n+\n+2022-02-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/104302\n+\t* g++.dg/template/array35.C: New test.\n+\t* g++.dg/template/array36.C: New test.\n+\n 2022-02-02  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* lib/target-supports.exp (check_effective_target_powerpc_altivec_ok):"}, {"sha": "e9eba5744d83251e37f4071067ed2373287c92cb", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682ede395918c830eeaedf10fae1ad7db00bcab5/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682ede395918c830eeaedf10fae1ad7db00bcab5/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=682ede395918c830eeaedf10fae1ad7db00bcab5", "patch": "@@ -1,3 +1,9 @@\n+2022-02-03  David Seifert  <soap@gentoo.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac: Support --disable-werror.\n+\t* configure: Regenerate.\n+\n 2022-01-31  Martin Liska  <mliska@suse.cz>\n \n \t* acinclude.m4: Detect *_ld_is_mold and use it."}, {"sha": "c77fe7a5aea1f06320311e19776d6ae11cf515d3", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682ede395918c830eeaedf10fae1ad7db00bcab5/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682ede395918c830eeaedf10fae1ad7db00bcab5/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=682ede395918c830eeaedf10fae1ad7db00bcab5", "patch": "@@ -1,3 +1,9 @@\n+2022-02-03  David Seifert  <soap@gentoo.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac: Support --disable-werror.\n+\t* configure: Regenerate.\n+\n 2021-12-28  Francois-Xavier Coudert  <fxcoudert@gmail.com>\n \n \tPR libbacktrace/103822"}, {"sha": "245b593477359e23127d2a0352fb2bd6afcbaa31", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682ede395918c830eeaedf10fae1ad7db00bcab5/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682ede395918c830eeaedf10fae1ad7db00bcab5/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=682ede395918c830eeaedf10fae1ad7db00bcab5", "patch": "@@ -1,3 +1,9 @@\n+2022-02-03  David Seifert  <soap@gentoo.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac: Support --disable-werror.\n+\t* configure: Regenerate.\n+\n 2022-02-01  Tom de Vries  <tdevries@suse.de>\n \n \t* testsuite/libgomp.oacc-c-c++-common/private-atomic-1.c: Remove"}, {"sha": "fc9e9a07f5f8aa941b9e1510ac228908bdcd0292", "filename": "libitm/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682ede395918c830eeaedf10fae1ad7db00bcab5/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682ede395918c830eeaedf10fae1ad7db00bcab5/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=682ede395918c830eeaedf10fae1ad7db00bcab5", "patch": "@@ -1,3 +1,9 @@\n+2022-02-03  David Seifert  <soap@gentoo.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac: Support --disable-werror.\n+\t* configure: Regenerate.\n+\n 2022-01-31  Martin Liska  <mliska@suse.cz>\n \n \t* acinclude.m4: Detect *_ld_is_mold and use it."}, {"sha": "92714c8fe6a89271a33f729c7268e2e8c5712bf8", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682ede395918c830eeaedf10fae1ad7db00bcab5/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682ede395918c830eeaedf10fae1ad7db00bcab5/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=682ede395918c830eeaedf10fae1ad7db00bcab5", "patch": "@@ -1,3 +1,20 @@\n+2022-02-03  David Seifert  <soap@gentoo.org>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* configure.ac: Support --disable-werror.\n+\t* aclocal.m4: Include also ../config/warnings.m4.\n+\t* libbacktrace/Makefile.am (WARN_FLAGS): Remove.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\t* asan/Makefile.in: Regenerate.\n+\t* hwasan/Makefile.in: Regenerate.\n+\t* interception/Makefile.in: Regenerate.\n+\t* libbacktrace/Makefile.in: Regenerate.\n+\t* lsan/Makefile.in: Regenerate.\n+\t* sanitizer_common/Makefile.in: Regenerate.\n+\t* tsan/Makefile.in: Regenerate.\n+\t* ubsan/Makefile.in: Regenerate.\n+\n 2021-12-06  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* LOCAL_PATCHES: Add commit 70b043845d7."}]}