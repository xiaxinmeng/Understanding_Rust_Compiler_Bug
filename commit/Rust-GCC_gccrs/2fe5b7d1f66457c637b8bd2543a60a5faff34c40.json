{"sha": "2fe5b7d1f66457c637b8bd2543a60a5faff34c40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZlNWI3ZDFmNjY0NTdjNjM3YjhiZDI1NDNhNjBhNWZhZmYzNGM0MA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-20T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-09-20T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "80992f090abad40686c27d62c089fa59064fe465", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80992f090abad40686c27d62c089fa59064fe465"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fe5b7d1f66457c637b8bd2543a60a5faff34c40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe5b7d1f66457c637b8bd2543a60a5faff34c40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe5b7d1f66457c637b8bd2543a60a5faff34c40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/comments", "author": null, "committer": null, "parents": [{"sha": "3f9a497d1b0dd9da87908a11b59bf364ad40ddca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f9a497d1b0dd9da87908a11b59bf364ad40ddca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f9a497d1b0dd9da87908a11b59bf364ad40ddca"}], "stats": {"total": 362, "additions": 361, "deletions": 1}, "files": [{"sha": "41b34b207fc11e9c2e39b99a5f879c0950391f7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2fe5b7d1f66457c637b8bd2543a60a5faff34c40", "patch": "@@ -1,3 +1,82 @@\n+2020-09-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/82608\n+\tPR middle-end/94195\n+\tPR c/50584\n+\tPR middle-end/84051\n+\t* gimple-array-bounds.cc (get_base_decl): New function.\n+\t(get_ref_size): New function.\n+\t(trailing_array): New function.\n+\t(array_bounds_checker::check_array_ref): Call them.  Handle arrays\n+\tdeclared in function parameters.\n+\t(array_bounds_checker::check_mem_ref):  Same.  Handle references to\n+\tdynamically allocated arrays.\n+\n+2020-09-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/50584\n+\t* builtins.c (warn_for_access): Add argument.  Distinguish between\n+\treads and writes.\n+\t(check_access): Add argument.  Distinguish between reads and writes.\n+\t(gimple_call_alloc_size): Set range even on failure.\n+\t(gimple_parm_array_size): New function.\n+\t(compute_objsize): Call it.\n+\t(check_memop_access): Pass check_access an additional argument.\n+\t(expand_builtin_memchr, expand_builtin_strcat): Same.\n+\t(expand_builtin_strcpy, expand_builtin_stpcpy_1): Same.\n+\t(expand_builtin_stpncpy, check_strncat_sizes): Same.\n+\t(expand_builtin_strncat, expand_builtin_strncpy): Same.\n+\t(expand_builtin_memcmp): Same.\n+\t* builtins.h (compute_objsize): Declare a new overload.\n+\t(gimple_parm_array_size): Declare.\n+\t(check_access): Add argument.\n+\t* calls.c (append_attrname): Simplify.\n+\t(maybe_warn_rdwr_sizes): Handle internal attribute access.\n+\t* tree-ssa-uninit.c (maybe_warn_pass_by_reference): Avoid adding\n+\tquotes.\n+\n+2020-09-19  Martin Sebor  <msebor@redhat.com>\n+\n+\t* tree-ssa-uninit.c (maybe_warn_pass_by_reference): Handle attribute\n+\taccess internal representation of arrays.\n+\n+2020-09-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/50584\n+\t* attribs.c (decl_attributes): Also pass decl along with type\n+\tattributes to handlers.\n+\t(init_attr_rdwr_indices): Change second argument to attribute chain.\n+\tHandle internal attribute representation in addition to external.\n+\t(get_parm_access): New function.\n+\t(attr_access::to_internal_string): Define new member function.\n+\t(attr_access::to_external_string): Define new member function.\n+\t(attr_access::vla_bounds): Define new member function.\n+\t* attribs.h (struct attr_access): Declare new members.\n+\t(attr_access::from_mode_char): Define new member function.\n+\t(get_parm_access): Declare new function.\n+\t* calls.c (initialize_argument_information): Pass function type\n+\tattributes to init_attr_rdwr_indices.\n+\t* doc/invoke.texi (-Warray-parameter, -Wvla-parameter): Document.\n+\t* tree-pretty-print.c (dump_generic_node): Correct handling of\n+\tqualifiers.\n+\t* tree-ssa-uninit.c (maybe_warn_pass_by_reference): Same.\n+\t* tree.h (access_mode): Add new enumerator.\n+\n+2020-09-19  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/generic.texi (Basic Statements): Document SWITCH_EXPR here,\n+\tnot SWITCH_STMT.\n+\t(Statements for C and C++): Rename node to reflect what\n+\tthe introduction already says about sharing between C and C++\n+\tfront ends.  Copy-edit and correct documentation for structured\n+\tloops and switch.\n+\n+2020-09-19  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/96861\n+\t* config/i386/x86-tune-costs.h (skylake_cost): increase rtx\n+\tcost of sse_to_integer from 2 to 6.\n+\n 2020-09-18  Sudi Das  <sudi.das@arm.com>\n \t    Omar Tahir  <omar.tahir@arm.com>\n "}, {"sha": "2225e4604f0ff9e2f582da229ed79355155ccb64", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2fe5b7d1f66457c637b8bd2543a60a5faff34c40", "patch": "@@ -1 +1 @@\n-20200919\n+20200920"}, {"sha": "bc002cf9670abac6422ceca2f0923232e317dff3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2fe5b7d1f66457c637b8bd2543a60a5faff34c40", "patch": "@@ -1,3 +1,79 @@\n+2020-09-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/50584\n+\t* c-common.h (warn_parm_array_mismatch): Declare new function.\n+\t(has_attribute): Move declaration of an existing function.\n+\t(build_attr_access_from_parms): Declare new function.\n+\t* c-warn.c (parm_array_as_string): Define new function.\n+\t(plus_one):  Define new function.\n+\t(warn_parm_ptrarray_mismatch): Define new function.\n+\t(warn_parm_array_mismatch):  Define new function.\n+\t(vla_bound_parm_decl): New function.\n+\t* c.opt (-Warray-parameter, -Wvla-parameter): New options.\n+\t* c-pretty-print.c (pp_c_type_qualifier_list): Don't print array type\n+\tqualifiers here...\n+\t(c_pretty_printer::direct_abstract_declarator): ...but instead print\n+\tthem in brackets here.  Also print [static].  Strip extraneous\n+\texpressions from VLA bounds.\n+\n+2020-09-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/50584\n+\t* c-attribs.c (c_common_attribute_table): Add \"arg spec\" attribute.\n+\t(handle_argspec_attribute): New function.\n+\t(get_argument, get_argument_type): New functions.\n+\t(append_access_attrs): Add overload.  Handle internal attribute\n+\trepresentation in addition to external.\n+\t(handle_access_attribute): Handle internal attribute representation\n+\tin addition to external.\n+\t(build_attr_access_from_parms): New function.\n+\n+2020-09-19  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* c-gimplify.c (genericize_c_loop): Rewrite to match\n+\tc_finish_loop in c-typeck.c.\n+\n+2020-09-19  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* c-common.c (c_block_may_fallthrough): New, split from\n+\tcxx_block_may_fallthrough in the cp front end.\n+\t(c_common_init_ts): Move handling of loop and switch-related\n+\tstatements here from the cp front end.\n+\t* c-common.def (FOR_STMT, WHILE_STMT, DO_STMT): Move here from\n+\tcp front end.\n+\t(BREAK_STMT, CONTINUE_STMT, SWITCH_STMT): Likewise.\n+\t* c-common.h (c_block_may_fallthru): Declare.\n+\t(bc_state_t): Move here from cp front end.\n+\t(save_bc_state, restore_bc_state): Declare.\n+\t(c_genericize_control_stmt): Declare.\n+\t(WHILE_COND, WHILE_BODY): Likewise.\n+\t(DO_COND, DO_BODY): Likewise.\n+\t(FOR_INIT_STMT, FOR_COND, FOR_EXPR, FOR_BODY, FOR_SCOPE): Likewise.\n+\t(SWITCH_STMT_COND, SWITCH_STMT_BODY): Likewise.\n+\t(SWITCH_STMT_TYPE, SWITCH_STMT_SCOPE): Likewise.\n+\t(SWITCH_STMT_ALL_CASES_P, SWITCH_STMT_NO_BREAK_P): Likewise.\n+\t(LABEL_DECL_BREAK, LABEL_DECL_CONTINUE): Likewise.\n+\t* c-dump.c (dump_stmt): Copy from cp front end.\n+\t(c_dump_tree): Move code to handle structured loop and switch\n+\ttree nodes here from cp front end.\n+\t* c-gimplify.c: Adjust includes.\n+\t(enum bc_t, bc_label, begin_bc_block, finish_bc_block): Move from\n+\tcp front end.\n+\t(save_bc_state, restore_bc_state): New functions using old code\n+\tfrom cp front end.\n+\t(get_bc_label, expr_loc_or_loc): Move from cp front end.\n+\t(genericize_c_loop): Move from cp front end.\n+\t(genericize_for_stmt, genericize_while_stmt): Likewise.\n+\t(genericize_do_stmt, genericize_switch_stmt): Likewise.\n+\t(genericize_continue_stmt, genericize_break_stmt): Likewise.\n+\t(genericize_omp_for_stmt): Likewise.\n+\t(c_genericize_control_stmt): New function using code split from\n+\tcp front end.\n+\t(c_genericize_control_r): New.\n+\t(c_genericize): Call walk_tree with c_genericize_control_r.\n+\t* c-pretty-print.c (c_pretty_printer::statement): Move code to handle\n+\tstructured loop and switch tree nodes here from cp front end.\n+\n 2020-09-17  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c/80076"}, {"sha": "839bfa17ad1244c19ec598df7e5afaa50acd88e7", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=2fe5b7d1f66457c637b8bd2543a60a5faff34c40", "patch": "@@ -1,3 +1,59 @@\n+2020-09-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/50584\n+\t* c-decl.c (lookup_last_decl): Define new function.\n+\t(c_decl_attributes): Call it.\n+\t(start_decl): Add argument and use it.\n+\t(finish_decl): Call build_attr_access_from_parms and decl_attributes.\n+\t(get_parm_array_spec): Define new function.\n+\t(push_parm_decl): Call get_parm_array_spec.\n+\t(start_function): Call warn_parm_array_mismatch.  Build attribute\n+\taccess and add it to current function.\n+\t* c-parser.c (c_parser_declaration_or_fndef): Diagnose mismatches\n+\tin forms of array parameters.\n+\t* c-tree.h (start_decl): Add argument.\n+\n+2020-09-19  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* c-decl.c (c_break_label, c_cont_label): Delete, and replace\n+\twith...\n+\t(in_statement): New.\n+\t(start_function): Adjust for above change.\n+\t(c_push_function_context, c_pop_function_context): Likewise.\n+\t* c-lang.h (struct language_function): Likewise.\n+\t* c-objc-common.h (LANG_HOOKS_BLOCK_MAY_FALLTHRU): Define.\n+\t* c-parser.c (objc_foreach_break_label, objc_foreach_continue_label):\n+\tNew.\n+\t(c_parser_statement_after_labels): Adjust calls to c_finish_bc_stmt.\n+\t(c_parser_switch_statement): Adjust break/switch context handling\n+\tand calls to renamed functions.\n+\t(c_parser_while_statement): Adjust break/switch context handling and\n+\tbuild a WHILE_STMT.\n+\t(c_parser_do_statement): Ditto, with DO_STMT respectively.\n+\t(c_parser_for_statement): Ditto, with FOR_STMT respectively.\n+\t(c_parser_omp_for_loop): Adjust break/switch context handling.\n+\t* c-tree.h (c_break_label, c_cont_label): Delete.\n+\t(IN_SWITCH_STMT, IN_ITERATION_STMT): Define.\n+\t(IN_OMP_BLOCK, IN_OMP_FOR, IN_OBJC_FOREACH): Define.\n+\t(in_statement, switch_statement_break_seen_p): Declare.\n+\t(c_start_case, c_finish_case): Renamed to...\n+\t(c_start_switch, c_finish_switch).\n+\t(c_finish_bc_stmt): Adjust arguments.\n+\t* c-typeck.c (build_function_call_vec): Don't try to print\n+\tstatements with %qE format.\n+\t(struct c_switch):  Rename switch_expr field to switch_stmt.\n+\tAdd break_stmt_seen_p field.\n+\t(c_start_case): Rename to c_start_switch.  Build a SWITCH_STMT\n+\tinstead of a SWITCH_EXPR.  Update for changes to struct c_switch.\n+\t(do_case): Update for changes to struct c_switch.\n+\t(c_finish_case): Rename to c_finish_switch.  Update for changes to\n+\tstruct c_switch and change of representation from SWITCH_EXPR to\n+\tSWITCH_STMT.\n+\t(c_finish_loop): Delete.\n+\t(c_finish_bc_stmt): Update to reflect changes to break/continue\n+\tstate representation.  Build a BREAK_STMT or CONTINUE_STMT instead\n+\tof a GOTO_EXPR except for objc foreach loops.\n+\n 2020-09-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/96867"}, {"sha": "8e6fd0d31b7f64e1336a771a32fe31f769fe5d65", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2fe5b7d1f66457c637b8bd2543a60a5faff34c40", "patch": "@@ -1,3 +1,55 @@\n+2020-09-19  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* cp-gimplify.c (enum bc_t, bc_label): Move to c-family.\n+\t(begin_bc_block, finish_bc_block, get_bc_label): Likewise.\n+\t(genericize_cp_loop): Likewise.\n+\t(genericize_for_stmt, genericize_while_stmt): Likewise.\n+\t(genericize_do_stmt, genericize_switch_stmt): Likewise.\n+\t(genericize_continue_stmt, genericize_break_stmt): Likewise.\n+\t(genericize_omp_for_stmt): Likewise.\n+\t(cp_genericize_r): Call c_genericize_control_stmt instead of\n+\tabove functions directly.\n+\t(cp_genericize): Call save_bc_state and restore_bc_state instead\n+\tof manipulating bc_label directly.\n+\t* cp-objcp-common.c (cxx_block_may_fallthru): Defer to\n+\tc_block_may_fallthru instead of handling SWITCH_STMT here.\n+\t(cp_common_init_ts): Move handling of loop and switch-related\n+\tstatements to c-family.\n+\t* cp-tree.def (FOR_STMT, WHILE_STMT, DO_STMT): Move to c-family.\n+\t(BREAK_STMT, CONTINUE_STMT, SWITCH_STMT): Likewise.\n+\t* cp-tree.h (LABEL_DECL_BREAK, LABEL_DECL_CONTINUE): Likewise.\n+\t(WHILE_COND, WHILE_BODY): Likewise.\n+\t(DO_COND, DO_BODY): Likewise.\n+\t(FOR_INIT_STMT, FOR_COND, FOR_EXPR, FOR_BODY, FOR_SCOPE): Likewise.\n+\t(SWITCH_STMT_COND, SWITCH_STMT_BODY): Likewise.\n+\t(SWITCH_STMT_TYPE, SWITCH_STMT_SCOPE): Likewise.\n+\t(SWITCH_STMT_ALL_CASES_P, SWITCH_STMT_NO_BREAK_P): Likewise.\n+\t* cxx-pretty-print.c (cxx_pretty_printer::statement): Move code\n+\tto handle structured loop and switch tree nodes to c-family.\n+\t* dump.c (cp_dump_tree): Likewise.\n+\n+2020-09-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96531\n+\tPR c++/97103\n+\t* constraint.cc (map_arguments): Call template_parm_to_arg\n+\tin the self-mapping case.\n+\t(finish_shorthand_constraint): No need to build a TREE_LIST\n+\tbefore calling template_parm_to_arg.\n+\t* pt.c (template_parm_to_arg): Rewrite to handle TEMPLATE_PARM_P\n+\tnodes as well as DECL_TEMPLATE_PARM_P nodes, and to make the\n+\toverlying TREE_LIST node optional.\n+\t(keep_template_parm): Don't record a BOUND_TEMPLATE_TEMPLATE_PARM,\n+\tinstead record its corresponding TEMPLATE_TEMPLATE_PARM.\n+\t(convert_generic_types_to_packs): Don't call\n+\ttemplate_parm_to_arg.\n+\n+2020-09-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97051\n+\t* constraint.cc (satisfy_atom): Pass true as the\n+\tmanifestly_const_eval argument to maybe_constant_value.\n+\n 2020-09-18  Jason Merrill  <jason@redhat.com>\n \n \tPR bootstrap/97118"}, {"sha": "3c8701e2192abe19d2c5d74613ecf90fae9e6c8b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2fe5b7d1f66457c637b8bd2543a60a5faff34c40", "patch": "@@ -1,3 +1,13 @@\n+2020-09-19  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* interface.c (gfc_compare_actual_formal): Add assertion after\n+\tmain processing loop to silence maybe-uninitialized error.\n+\n+2020-09-19  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* symbol.c (gfc_check_conflict): Allow ELEMENTAL RECURSIVE\n+\tprocedure prefix for -std=f2018.\n+\n 2020-09-17  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/96041"}, {"sha": "fd36c3d19af04b3b552719a7cb63000453beb618", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=2fe5b7d1f66457c637b8bd2543a60a5faff34c40", "patch": "@@ -1,3 +1,8 @@\n+2020-09-19  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* objc-act.c (objc_start_method_definition): Update to reflect\n+\tchanges to break/continue state bookkeeping in C front end.\n+\n 2020-09-17  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c/80076"}, {"sha": "716f644f662ea4592e5f3b6fc8583d102355ef93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fe5b7d1f66457c637b8bd2543a60a5faff34c40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2fe5b7d1f66457c637b8bd2543a60a5faff34c40", "patch": "@@ -1,3 +1,85 @@\n+2020-09-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/82608\n+\tPR middle-end/94195\n+\tPR c/50584\n+\tPR middle-end/84051\n+\t* c-c++-common/Warray-bounds.c: Adjust.\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-9.c: Adjust.\n+\t* gcc.dg/Warray-bounds-63.c: New test.\n+\t* gcc.dg/Warray-bounds-64.c: New test.\n+\t* gcc.dg/Warray-bounds-65.c: New test.\n+\t* gcc.dg/Warray-bounds-66.c: New test.\n+\t* gcc.dg/Warray-bounds-67.c: New test.\n+\n+2020-09-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/50584\n+\t* c-c++-common/Wsizeof-pointer-memaccess1.c: Disable new expected\n+\twarnings.\n+\t* g++.dg/ext/attr-access.C: Update text of expected warnings.\n+\t* gcc.dg/Wstringop-overflow-23.c: Same.\n+\t* gcc.dg/Wstringop-overflow-24.c: Same.\n+\t* gcc.dg/attr-access-none.c: Same.\n+\t* gcc.dg/dfp/composite-type.c: Prune expected warnings.\n+\t* gcc.dg/torture/pr57147-1.c: Add a member to an otherwise empty\n+\tstruct to avoid a warning.\n+\t* gcc.dg/torture/pr57147-3.c: Same.\n+\t* gcc.dg/Warray-bounds-30.c: Adjust.\n+\t* gcc.dg/attr-access-none.c: Same.\n+\t* gcc.dg/Wstringop-overflow-40.c: New test.\n+\t* gcc.dg/attr-access-2.c: New test.\n+\n+2020-09-19  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/uninit-37.c: New test.\n+\n+2020-09-19  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/50584\n+\t* gcc.dg/attr-access-read-write-2.c: Adjust text of expected message.\n+\t* c-c++-common/Warray-bounds-6.c: Correct C++ declaration, adjust\n+\ttext of expected diagnostics.\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-9.c: Prune expected warning.\n+\t* gcc.dg/Warray-parameter-2.c: New test.\n+\t* gcc.dg/Warray-parameter-3.c: New test.\n+\t* gcc.dg/Warray-parameter-4.c: New test.\n+\t* gcc.dg/Warray-parameter-5.c: New test.\n+\t* gcc.dg/Warray-parameter.c: New test.\n+\t* gcc.dg/Wvla-parameter-2.c: New test.\n+\t* gcc.dg/Wvla-parameter-3.c: New test.\n+\t* gcc.dg/Wvla-parameter.c: New test.\n+\t* gcc.dg/Wvla-parameter-4.c: New file.\n+\n+2020-09-19  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gcc.dg/gomp/block-7.c: Update expected error message wording.\n+\n+2020-09-19  Harald Anlauf  <anlauf@gmx.de>\n+\n+\t* gfortran.dg/pr97036.f90: New test.\n+\n+2020-09-19  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/96861\n+\t* gcc.target/i386/pr96861.c: New test.\n+\n+2020-09-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96531\n+\tPR c++/97103\n+\t* g++.dg/cpp2a/concepts-ttp2.C: New test.\n+\t* g++.dg/cpp2a/concepts-variadic1.C: New test.\n+\n+2020-09-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/97051\n+\t* g++.dg/cpp2a/is-constant-evaluated11.C: New test.\n+\n+2020-09-19  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr95021-3.c: Add -mtune=generic.\n+\n 2020-09-18  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/97105"}]}