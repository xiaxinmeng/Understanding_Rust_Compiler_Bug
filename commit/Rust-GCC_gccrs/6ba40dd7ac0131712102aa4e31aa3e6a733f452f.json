{"sha": "6ba40dd7ac0131712102aa4e31aa3e6a733f452f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJhNDBkZDdhYzAxMzE3MTIxMDJhYTRlMzFhYTNlNmE3MzNmNDUyZg==", "commit": {"author": {"name": "Dave Korn", "email": "dave.korn@artimi.com", "date": "2005-04-15T18:22:57Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2005-04-15T18:22:57Z"}, "message": "gcc.c (default_compilers): Clarify obscure error message when reading from standard input.\n\n\t* gcc.c (default_compilers): Clarify obscure error message when\n\treading from standard input.\n\nFrom-SVN: r98196", "tree": {"sha": "0e4e21bed4f51156fe49cea4cd9d41b46da09f42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e4e21bed4f51156fe49cea4cd9d41b46da09f42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ba40dd7ac0131712102aa4e31aa3e6a733f452f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba40dd7ac0131712102aa4e31aa3e6a733f452f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ba40dd7ac0131712102aa4e31aa3e6a733f452f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ba40dd7ac0131712102aa4e31aa3e6a733f452f/comments", "author": null, "committer": null, "parents": [{"sha": "192082e74d100d24faa3fc9afd35970a3eeedd3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/192082e74d100d24faa3fc9afd35970a3eeedd3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/192082e74d100d24faa3fc9afd35970a3eeedd3e"}], "stats": {"total": 175, "additions": 90, "deletions": 85}, "files": [{"sha": "f1757895d31830061b5b2b28b958b01f9fa1bda7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 89, "deletions": 84, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba40dd7ac0131712102aa4e31aa3e6a733f452f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba40dd7ac0131712102aa4e31aa3e6a733f452f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ba40dd7ac0131712102aa4e31aa3e6a733f452f", "patch": "@@ -1,3 +1,8 @@\n+2005-04-15  Dave Korn  <dave.korn@artimi.com>\n+\n+\t* gcc.c (default_compilers): Clarify obscure error message when\n+\treading from standard input.\n+\n 2005-04-15  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* basic-block.h (PROP_EQUAL_NOTES): Remove.\n@@ -8,7 +13,7 @@\n \n 2005-04-15  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* tree-vect-analyze.c (vect_stmt_relevant_p): Process immediate uses \n+\t* tree-vect-analyze.c (vect_stmt_relevant_p): Process immediate uses\n \tof non-virtual PHI nodes like we use to.\n \n 2005-05-15  Paolo Bonzini  <bonzini@gnu.org>\n@@ -30,9 +35,9 @@\n \n \t* tree-ssa-pre.c (compute_avail): It's okay to have\n \tTREE_INVARIANT's here, and value number the resulting expressions.\n-\t(create_expression_by_pieces): Make sure operands that were \n+\t(create_expression_by_pieces): Make sure operands that were\n \tmin_invariant when we started, stay that way.\n-\t\n+\n 2005-04-15  David Edelsohn  <edelsohn@gnu.org>\n \n \t* doc/install.texi (*-ibm-aix*): Add comment about system limits.\n@@ -248,7 +253,7 @@\n \n \tFix PR tree-optimization/20963\n \t* tree-ssa-pre.c (compute_avail): Remove special case for\n-\tTREE_INVARIANT. \n+\tTREE_INVARIANT.\n \t(create_expression_by_pieces): Add value numbers for forced out\n \tstatements.\n \n@@ -300,7 +305,7 @@\n 2005-04-13 Fariborz Jahanian <fjahanian@apple.com>\n \n \t* simplify-rtx.c (simplify_binary_operation_1): Return\n-\tscalar or vector of constant 0, depending on the xor's \n+\tscalar or vector of constant 0, depending on the xor's\n \tmode.\n \n 2005-04-13  Dale Johannesen  <dalej@apple.com>\n@@ -317,7 +322,7 @@\n \n \t* tree-if-conv.c (tree_if_convert_cond_expr): Do not create extra\n \ttemp variables.\n-\t\n+\n 2005-04-13  Hans-Peter Nilsson  <hp@axis.com>\n \n \tCRIS prologue as RTL.\n@@ -378,7 +383,7 @@\n \n \t* config/elfos.h (MAKE_DECL_ONE_ONLY): Redefined to stop DECL_WEAK from\n \tbeing used for symbols with vague linkage when HAVE_GAS_COMDAT_GROUP\n-\tis true. \n+\tis true.\n \n 2005-04-13  Kazu Hirata  <kazu@cs.umass.edu>\n \n@@ -444,7 +449,7 @@\n \tVar(bfin_lib_id_given).\n \n 2005-04-13  Matt Thomas  <matt@3am-software.com>\n- \n+\n  \t* config/rs6000/sysv4.h (NO_IMPLICIT_EXTERN_C): undefine before\n  \tdefining.\n \n@@ -467,7 +472,7 @@\n 2005-04-12  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (ix86_prepare_sse_fp_compare_args): Split ...\n-\t(ix86_expand_sse_fp_minmax): ... from ... \n+\t(ix86_expand_sse_fp_minmax): ... from ...\n \t(ix86_expand_fp_movcc): ... here.\n \t(ix86_expand_sse_movcc): Rewrite from ix86_split_sse_movcc.\n \t* config/i386/i386-protos.h: Update.\n@@ -500,13 +505,13 @@\n 2005-04-12  Caroline Tice  <ctice@apple.com>\n \n \tTemporary fix for partitioning problems.\n-\t* passes.c (rest_of_handle_final): Remove code that \n+\t* passes.c (rest_of_handle_final): Remove code that\n \tfrees unlikely_text_section_name,\n \t* varasm.c (assemble_start_function): Test for partitioning\n \tflag before writing out section labels.\n \t(assemble_end_function): Test for partitioning flag before\n \twriting out section labels.\n-\t\n+\n 2005-04-12  Steven Bosscher  <stevenb@suse.de>\n \t    Stuart Hastings <stuart@apple.com>\n \t    Jan Hubicka  <jh@suse.cz>\n@@ -570,7 +575,7 @@\n \t* function.h (struct function): Revert my patch from April 9.\n \t* opts.c (decode_options): Revert my patch from April 9.\n \t* output.h (unlikely_section_label, hot_section_label,\n-\thot_section_end_label, cold_section_end_label, \n+\thot_section_end_label, cold_section_end_label,\n \tunlikely_text_section_name): Revert my patch from April 9.\n \t* passes.c (rest_of_handle_final): Revert my patch from April 9.\n \t* varasm.c (unlikely_section_label, hot_section_label,\n@@ -585,7 +590,7 @@\n \t(assemble_start_function): Revert my patch from April 9.\n \t(assemble_end_function): Revert my patch from April 9.\n \t(default_section_type_flags_1): Revert my patch from April 9.\n-\t\n+\n 2005-04-12  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.h (APPLY_RESULT_SIZE): Set to 24 in 64-bit mode.\n@@ -726,7 +731,7 @@\n \t* tree-vectorizer.h (enum stmt_vec_info_type): Add\n \tcondition_vec_info_type.\n \t(vectorizable_condition): New.\n-\t\n+\n 2005-04-11  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/i386/i386.h (TARGET_FPMATH_DEFAULT): New.\n@@ -765,7 +770,7 @@\n \tfflush, fgetc, fgets, ferror, fread): Redefine to the associated\n \t_unlocked function.\n \t(fwrite_unlocked): Fix prototype.\n-\t\n+\n \t* configure, config.in: Regenerate.\n \n 2005-04-11  David Edelsohn  <edelsohn@gnu.org>\n@@ -779,14 +784,14 @@\n 2005-04-11  Daniel Berlin  <dberlin@dberlin.org>\n \n \tFix PR tree-optimization/20926\n-\t\n+\n \t* tree-ssa-alias.c (add_type_alias): Handle subvars.\n-\t\n+\n 2005-04-11  Devang Patel  <dpatel@apple.com>\n \n \t* config/rs6000.c (rs6000_emit_vector_select): Fix vector select\n \toperand ordering.\n-\t\n+\n 2005-04-11  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* fold-const.c (fold_binary_op_with_conditional_arg):\n@@ -796,7 +801,7 @@\n \t(fold_binary): Likewise.\n \n 2005-04-11  Daniel Berlin  <dberlin@dberlin.org>\n-\t\n+\n \tFix PR tree-optimization/20612\n \t* lambda-code.c (lambda_loopnest_to_gcc_loopnest): Fix increment\n \thandling\n@@ -1000,7 +1005,7 @@\n \t(current_function_section): Likewise.\n \t(assemble_start_function): Modify to get/put unlikely_text_section_name\n \tin current function struct; modify to get hot/cold section labels\n-\tfrom function struct; initialize labels using \n+\tfrom function struct; initialize labels using\n \tASM_GENERATE_INTERNAL_LABEL;\n \ttest partitioning flag before writing out hot section label.\n \t(assemble_end_function): Test partitioning flag before writing out\n@@ -1337,7 +1342,7 @@\n \t* tree-sra.c (decide_instantiations): Mark all symbols in\n \tSRA_CANDIDATES for renaming.\n \t(mark_all_v_defs_1): Rename from mark_all_v_defs.\n-\t(mark_all_v_defs): New function.  Update all users to call it \n+\t(mark_all_v_defs): New function.  Update all users to call it\n \twith the whole list of scalarized statements, not just the\n \tfirst one.\n \t* tree-ssa-alias.c (count_ptr_derefs): Make extern.\n@@ -1456,7 +1461,7 @@\n \n \tPR target/20814\n \t* config/rs6000/predicates.md (altivec_register_operand): Accept\n-\tSUBREG. \n+\tSUBREG.\n \t(and64_operand): Do not limit CONST_INT to mask64_operand.\n \t(and64_2_operand): Do not limit CONST_INT to mask64_1or2_operand.\n \t(and_operand): Do not limit CONST_INT to mask_operand.\n@@ -1471,7 +1476,7 @@\n 2005-04-08  Mike Stump  <mrs@apple.com>\n \n \t* config/darwin.c (indirect_data): Fix typo in strncmp logic.\n-\t\n+\n \t* config/rs6000/rs6000.c (rs6000_emit_prologue): Use 5 nops,\n \tinstead of 4.\n \n@@ -1575,7 +1580,7 @@\n \tusing gen_lowpart and gen_highpart_mode.\n \t(note_invalid_constants): All constants in an RTX with a constraint\n \tthat permits memory are now pushed to the constant pool.\n-\t(output_move_double): Delete code to handle reg to reg and \n+\t(output_move_double): Delete code to handle reg to reg and\n \tconstant to reg moves.\n \t(const_double_needs_minipool, output_mov_immediate): Delete.\n \t* arm.h (EXTRA_CONSTRAINT_STR_ARM): All 'D' variants now handle\n@@ -1725,7 +1730,7 @@\n 2005-04-06  Dorit Naishlos  <dorit@il.ibm.com>\n \n \t* tree-vect-analyze.c (vect_analyze_loop_form): Call\n-\tsplit_loop_exit_edge instead of loop_split_edge_with. \n+\tsplit_loop_exit_edge instead of loop_split_edge_with.\n \n 2005-04-06  Paolo Bonzini  <bonzini@gnu.org>\n \n@@ -1858,12 +1863,12 @@\n \tdump_immediate_uses_for, debug_immediate_uses_for): Delete.\n \t(mark_new_vars_to_rename): Call update_stmt.\n \t* tree-dump.c (dump_option_value_in): Add \"stmtaddr\".\n-\t* tree-flow-inline.h (modify_stmt): Rename to mark_stmt_modified.  \n+\t* tree-flow-inline.h (modify_stmt): Rename to mark_stmt_modified.\n \tIgnore PHI nodes.\n \t(unmodify_stmt): Delete.\n \t(update_stmt): New.  Force an update of a stmt.\n \t(update_stmt_if_modified): update a stmt if it is out of date.\n-\t(get_stmt_operands): Verify stmt is NOT modified. \n+\t(get_stmt_operands): Verify stmt is NOT modified.\n \t(stmt_modified_p): Update comment.\n \t(delink_imm_use): Remove a use node from its immuse list.\n \t(link_imm_use_to_list): Link a use node to a specific list.\n@@ -1888,7 +1893,7 @@\n \t(num_imm_uses): New.  Return the number of immediate uses.\n \t(get_v_must_def_ops): Use is now a pointer.\n \t(use_operand_p, get_v_may_def_op_ptr, get_vuse_op_ptr,\n-\tget_v_must_def_kill_ptr, get_phi_arg_def_ptr): Return the address of \n+\tget_v_must_def_kill_ptr, get_phi_arg_def_ptr): Return the address of\n \tthe use node.\n \t(get_immediate_uses, num_immediate_uses, immediate_use): Delete.\n \t(delink_stmt_imm_use): Delink all immuses from a stmt.\n@@ -1897,19 +1902,19 @@\n \t(immediate_use_iterator_d): New.  Immediate use iterator struct.\n \t(FOR_EACH_IMM_USE_FAST): New.  Macro for read only immuse iteration.\n \t(FOR_EACH_IMM_USE_SAFE): New.  Macro for write-safe immuse iteration.\n-\t(BREAK_FROM_SAFE_IMM_USE): New.  Macro for earlyu exit from write-safe \n+\t(BREAK_FROM_SAFE_IMM_USE): New.  Macro for earlyu exit from write-safe\n \titeration.\n \t(struct stmt_ann_d): Remove dataflow_t from struct.\n \t* tree-if-conv.c (tree_if_conversion).  Don't call free_df.\n \t(if_convertible_phi_p): Use FAST immuse iterator.\n \t(if_convertible_loop_p): Don't call compute_immediate_uses.\n \t(replace_phi_with_cond_modify_expr): Call update_stmt.\n-\t* tree-into-ssa.c (mark_def_sites, ssa_mark_def_sites): Call \n+\t* tree-into-ssa.c (mark_def_sites, ssa_mark_def_sites): Call\n \tupdate_stmt_if_modified.\n \t(rewrite_all_into_ssa): Initialize ssa operands.\n \t* tree-loop-linear.c (linear_transform_loops): Don't call free_df or\n \tcompute_immediate_uses.\n-\t* tree-optimize.c (execute_todo): Call verify_ssa whenever the \n+\t* tree-optimize.c (execute_todo): Call verify_ssa whenever the\n \tssa_property is available.\n \t(execute_one_pass):  Change parameters passed to execute_todo.\n \t* tree-outof-ssa.c (rewrite_trees): Don't call modify_stmt.\n@@ -1929,7 +1934,7 @@\n \t* tree-ssa-cpp.c (need_imm_uses_for): Delete.\n \t(ccp_initialize): Remove call to compute_immediate_uses.\n \t(substitute_and_fold, execute_fold_all_builtins): Call update_stmt.\n-\t* tree-ssa-dom.c (tree_ssa_dominator_optimize): Update all modified \n+\t* tree-ssa-dom.c (tree_ssa_dominator_optimize): Update all modified\n \tstmts.\n \t(simplify_cond_and_lookup_avail_expr): Call mark_stmt_modified.\n \t(simplify_switch_and_lookup_avail_expr): Call mark_stmt_modified.\n@@ -1943,7 +1948,7 @@\n \t(substitute_single_use_vars): Use new immuse interface.\n \t(tree_ssa_forward_propagate_single_use_vars): Remove calls to free_df\n \tand compute_immediate_uses.\n-\t* tree-ssa-loop-im.c (single_reachable_address): Use new immuse \n+\t* tree-ssa-loop-im.c (single_reachable_address): Use new immuse\n \tinterface.\n \t(rewrite_mem_refs): Call update_stmt.\n \t(determine_lsm): Remove call to compute_imm_uses and free_df.\n@@ -1954,7 +1959,7 @@\n \t(compute_phi_arg_on_exit): Insert each stmt before trying to process.\n \t(rewrite_use) : Call update_stmt.\n \t* tree-ssa-loop-manip.c (verify_loop_closed_ssa): Add arg to call.\n-\t* tree-ssa-loop-unswitch.c (tree_unswitch_single_loop): Call \n+\t* tree-ssa-loop-unswitch.c (tree_unswitch_single_loop): Call\n \tupdate_stmt.\n \t* tree-ssa-operands.c (NULL_USE_OPERAND_P): Remove declaration.\n \t(allocate_use_optype, allocate_vuse_optype): Adjust allocation size.\n@@ -1991,7 +1996,7 @@\n \t(SET_USE): Call set_ssa_use_from_ptr.\n \t(USE_STMT): Define.\n \t(PHI_ARG_INDEX_FROM_USE): Define.\n-\t* tree-ssa-phiopt.c (replace_phi_edge_with_variable): Set the phi \n+\t* tree-ssa-phiopt.c (replace_phi_edge_with_variable): Set the phi\n \targument via SET_USE, not PHI_ARG_DEF_TREE.\n \t* tree-ssa-pre.c (eliminate): Call update_stmt.\n \t* tree-ssa-propagate.c (cfg_blocks_get): Use imm_use iterators.  Don't\n@@ -2011,7 +2016,7 @@\n \twas changed.\n \t(replace_immediate_uses): Use imm_use iterator, call update_stmt.\n \t(check_phi_redundancy): Use imm_use iterator.\n-\t(kill_redundant_phi_nodes): Don't call compute_immediate_uses or \n+\t(kill_redundant_phi_nodes): Don't call compute_immediate_uses or\n \tfree_df.\n \t* tree-ssanames.c (make_ssa_name): Initialize imm_use node.\n \t(release_ssa_name): Delink node and all elements in its imm_use list.\n@@ -2049,7 +2054,7 @@\n \t* c-decl.c (finish_function): If USE_MAPPED_LOCATION set the location\n \tof the artification 'return 0' in main() to BUILTINS_LOCATION.\n \t* tree-cfg.c (remove_bb): Check that location isn't BUILTINS_LOCATION\n-\tbefore warning.\t\n+\tbefore warning.\n \n 2004-04-05  Devang Patel  <dpatel@apple.com>\n \n@@ -2059,7 +2064,7 @@\n \t(ashr<mode>3): ... new name.\n \t* config/rs6000/rs6000.c (builtin_description): Rename shift\n \toperations.\n-\t\n+\n 2004-04-05  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* combine.c (RTL_HOOKS_GEN_LOWPART_NO_EMIT): Use\n@@ -2103,7 +2108,7 @@\n \t* config.gcc: Add bfin*-* and bfin*-elf configurations.\n \n 2005-04-05  Olivier Hainque  <hainque@adacore.com>\n-\t\n+\n \t* config/mips/iris6.h (DWARF_FRAME_RETURN_COLUMN): Redefine to\n \tmatch what the system unwinder expects.\n \t* config/mips/mips.c (mips_frame_set): If we're saving the return\n@@ -2140,7 +2145,7 @@\n \t* config/i386/i386.md (frndintxf2_floor, frndintxf2_ceil)\n \t(frndintxf2_trunc, frndintxf2_mask_pm): Add FLAGS_REG clobber.\n \tAllocate local stack slots here.  Set ix86_optimize_mode_switching.\n-\tflag here. Implement using define_insn_and_split.  \n+\tflag here. Implement using define_insn_and_split.\n \t(frndintxf2_floor_i387, frndintxf2_ceil_i387, frndintxf2_trunc_i387)\n \t(frndintxf2_mask_pm_i387): New insn patterns.\n \t(floorsf2, floordf2, floorxf2): Remove local stack slot allocations.\n@@ -2314,10 +2319,10 @@\n \n 2005-04-02  Daniel Berlin  <dberlin@dberlin.org>\n \t    Diego Novillo <dnovillo@redhat.com>\n-\t    \n+\n \tFix PR tree-optimization/20703\n \tFix PR tree-optimization/20725\n-\t\n+\n \t* tree-ssa-pre.c (phi_translate): Handle tcc_comparison.\n \t(create_expression_by_pieces): Ditto.\n \t(valid_in_set): Ditto. Also handle tcc_declaration.\n@@ -2433,7 +2438,7 @@\n \tattribute.\n \t(\"imul\"): Removed from \"type\" attribute.\n \t(\"*muldi3_sign\", \"muldi3\"): Changed type to imuldi.\n-\t(\"mulsi3/1\", \"mulsi3/3\", \"mulsi/4\", \"mulsidi3\", \"umulsidi3\"): \n+\t(\"mulsi3/1\", \"mulsi3/3\", \"mulsi/4\", \"mulsidi3\", \"umulsidi3\"):\n \tChanged type to imulsi.\n \t(\"*mulsi3_sign\", \"mulsi3/2\"): Changed type to imulhi.\n \n@@ -2543,7 +2548,7 @@\n \t(compare_negsi_si): New pattern.\n \t(cmpsi_negshiftsi_si): New pattern.\n \t(negated_cbranchsi4): Restrict to equality_operator.\n-\t\n+\n \t* arm.md (movhi_insn_arch4): delete trailing white space from assembler\n \ttemplate.\n \n@@ -2934,7 +2939,7 @@\n \n \t* doc/md.texi: Remove remark about impossibility to query unit\n \tpresence in non nondeterministic automaton state.\n-\t\n+\n \t* config/ia64/ia64.c (get_template): Change order of unit querying.\n \n 2005-03-31  Kazu Hirata  <kazu@cs.umass.edu>\n@@ -2999,30 +3004,30 @@\n \tcold blocks to last round.\n \t(find_traces): Remove code that added extra round of trace finding\n \twhen doing partitioning.\n-\t(find_traces_1_round) :  Remove variable last_round;  add code to \n-\tupdate new struct field, in_trace; correct trace_length where it was \n-\tincorrect before (after call to copy_bb); change code that pushed all \n-\tcold blocks to last round. Instead verify that all blocks going into \n+\t(find_traces_1_round) :  Remove variable last_round;  add code to\n+\tupdate new struct field, in_trace; correct trace_length where it was\n+\tincorrect before (after call to copy_bb); change code that pushed all\n+\tcold blocks to last round. Instead verify that all blocks going into\n \ta trace belong in the same partition.\n \t(connect_traces): Modify to connect the traces in two passes, if the\n-\tfunction contains both hot and cold blocks.  The first pass connects \n-\tall the traces for blocks in the partition that the first block in \n-\tthe function belongs to; the second pass connnects all the traces \n+\tfunction contains both hot and cold blocks.  The first pass connects\n+\tall the traces for blocks in the partition that the first block in\n+\tthe function belongs to; the second pass connnects all the traces\n \tcontaining blocks that belong in the other partition.\n \t(find_rarely_executed_basic_blocks_and_crossing_edges):  Remove\n \tcode that automatically put the first block in a function into the\n \thot partition if the function had any hot blocks.\n-\t(fix_crossing_unconditional_branches): Check number of succ edges \n+\t(fix_crossing_unconditional_branches): Check number of succ edges\n \tbefore attempting to get one.\n \t(fix_edges_for_rarely_executed_code):  Update comment describing\n \tfunction.\n \t(reorder_basic_blocks):  Add code to initialize new field (in_trace);\n-\tremove call to add_unlikely_executed_notes; add call to \n+\tremove call to add_unlikely_executed_notes; add call to\n \tverify_hot_cold_block_grouping.\n-\t(duplicate_computed_gotos): Don't change computed goto if it's a \n+\t(duplicate_computed_gotos): Don't change computed goto if it's a\n \tcrossing edge.\n \t(partition_hot_cold_basic_blocks):  Update function comment.\n-\t* cfgcleanup.c (try_simplify_condjump): Remove redundacy from \n+\t* cfgcleanup.c (try_simplify_condjump): Remove redundacy from\n \tcondition.\n \t(try_forward_edges): Likewise.\n \t(merge_blocks_move_predecessor_nojumps): Likewise.\n@@ -3044,7 +3049,7 @@\n \tUNLIKELY_EXECUTED_CODE notes to cold bb's.\n \t(commit_one_edge_insertion): Likewise.\n \t(cfg_layout_can_merge_blocks_p): Remove redundancy from condition.\n-\t* dbxout.c (FORCE_TEXT): Replace function_section with \n+\t* dbxout.c (FORCE_TEXT): Replace function_section with\n \tcurrent_function_section.\n \t(struct dbx_debug_h): Add do_nothing function for new debug_hooks\n \tfunction, switch_text_section.\n@@ -3055,16 +3060,16 @@\n \tfor new debug_hooks funciton, switch_text_section..\n \t* debug.h (struct gcc_debug_hooks):  Add new function to debug_hooks,\n \tswitch_text_section.\n-\t* dwarf2out.c (struct dw_fde_struct):  Add five new fields: \n-\tdw_fde_hot_section_label, dw_fde_hot_section_end_label, \n-\tdw_fde_unlikely_section_label, dw_fde_unlikely_section_end_label and \n+\t* dwarf2out.c (struct dw_fde_struct):  Add five new fields:\n+\tdw_fde_hot_section_label, dw_fde_hot_section_end_label,\n+\tdw_fde_unlikely_section_label, dw_fde_unlikely_section_end_label and\n \tdw_fde_switched_sections.\n \t(output_call_frame_info):  Add test to see if function switches text\n-\tsections in the middle; if so, use appropriate extra hot and cold \n+\tsections in the middle; if so, use appropriate extra hot and cold\n \tsection labels to compute size deltas for the hot and cold sections.\n-\t(dwarf2out_begin_prologue): Add code to initialize new fields in \n+\t(dwarf2out_begin_prologue): Add code to initialize new fields in\n \tdw_fde_struct.\n-\t(dwarf2out_switch_text_section): New function (invoked through \n+\t(dwarf2out_switch_text_section): New function (invoked through\n \tdebug_hook); updates new fields in dw_fde_struct appropriately and\n \tincrements separate_line_info_table_in_use.\n \t(dwarf2_debug_hooks): Initialize switch_text_section function to be\n@@ -3081,19 +3086,19 @@\n \tcurrent_function_section.\n \t(dwarf2out_end_block): Likewise.\n \t(dwarf2out_source_line): Likewise.\n-\t(dwarf2out_var_location): Add code to check whether in hot or cold \n+\t(dwarf2out_var_location): Add code to check whether in hot or cold\n \tsection and use the appropriate label.\n-\t* except.c (output_function_exception_table): Change call to \n+\t* except.c (output_function_exception_table): Change call to\n \tfunction_section into call to current_function_section.\n \t* final.c (profile_function): Likewise.\n \t(scan_ahead_for_unlikely_executed_note): Remove function.\n-\t(final_scan_insn):  Remove calls to \n-\tscan_ahead_for_unlikely_executed_note, and related code for switching \n-\tto cold section, except for the single time \n-\tNOTE_INSN_SWITCH_TEXT_SECTIONS may be encountered;  add calls to \n-\tdebug_hooks->switch_text_sections; replace appropriate calls to \n+\t(final_scan_insn):  Remove calls to\n+\tscan_ahead_for_unlikely_executed_note, and related code for switching\n+\tto cold section, except for the single time\n+\tNOTE_INSN_SWITCH_TEXT_SECTIONS may be encountered;  add calls to\n+\tdebug_hooks->switch_text_sections; replace appropriate calls to\n \tfunction_section with calls to current_function_section.\n-\t* ifcvt.c (find_if_case_1): Remove redundancy from condition, add \n+\t* ifcvt.c (find_if_case_1): Remove redundancy from condition, add\n \ttest_bb to condition.\n \t(find_if_case_2): Likewise.\n \t* insn-notes.def: Change NOTE_INSN_UNLIKELY_EXECUTED_CODE to\n@@ -3114,9 +3119,9 @@\n \t* passes.c (rest_of_handle_final): Free unlikely_text_section_name.\n \t* print-rtl.c (print_rtx): Change NOTE_INSN_UNLIKELY_EXECUTED_CODE\n \tto NOTE_INSN_SWITCH_TEXT_SECTIONS.\n-\t* reg-stack.c (emit_swap_insn): Remove UNLIKELY_EXECUTED_CODE note \n+\t* reg-stack.c (emit_swap_insn): Remove UNLIKELY_EXECUTED_CODE note\n \tinsn from consideration.\n-\t* sdbout.c (sdb_debug_hooks): Add do_nothing for new function, \n+\t* sdbout.c (sdb_debug_hooks): Add do_nothing for new function,\n \tswitch_text_section.\n \t* varasm.c (basic-block.h): Add new include.\n \t(unlikely_section_label_printed): Remove global variable.\n@@ -3131,27 +3136,27 @@\n \t(initialize_cold_section_name): New function.\n \t(enum in_section): Move declaration to output.h.\n \t(text_section): Update last_text_section.\n-\t(unlikely_text_section): Replace code to determine cold section name \n-\twith call to initialize_cold_section_name; Add code to update \n+\t(unlikely_text_section): Replace code to determine cold section name\n+\twith call to initialize_cold_section_name; Add code to update\n \tlast_text_section; remove code for printing out label.\n-\t(named_section_real): Add code to update last_text_section and \n+\t(named_section_real): Add code to update last_text_section and\n \tlast_text_section_name as appropriate.\n \t(function_section): Change test for 'unlikely' to depend on\n-\tfirst_function_block_is_cold (moved old test to \n+\tfirst_function_block_is_cold (moved old test to\n \tcurrent_function_section).\n \t(current_function_section): New function.\n-\t(assemble_start_function): Move code that frees \n-\tunlikely_text_section_name; initialize hot_section_end_label; \n-\tprint hot and cold section labels at the start of the function; \n+\t(assemble_start_function): Move code that frees\n+\tunlikely_text_section_name; initialize hot_section_end_label;\n+\tprint hot and cold section labels at the start of the function;\n \tset first_function_block_is_cold, if appropriate; initialize l\n \tast_text_section; add call to insert_section_boundary_note.\n \t(assemble_end_function):  Add code to write out hot and cold section\n \tend labels.\n \t*vmsdbgout.c (vmsdbg_debug_hooks): Add do_nothing for new function,\n \tswitch_text_section.\n-\t* config/darwin.c (machopic_select_section): Replace incorrect \n+\t* config/darwin.c (machopic_select_section): Replace incorrect\n \tfunction in base_funs; update reloc for cold sections if necessary.\n-\t* config/darwin.h (SECTION_FUNCTION):  Add code to update \n+\t* config/darwin.h (SECTION_FUNCTION):  Add code to update\n \tlast_text_section if appropriate.\n \t(text_unlikely_section): Remove.\n \t* config/sparc/sparc.c (sparc_output_deferred_case_vectors): Likewise.\n@@ -3168,7 +3173,7 @@\n \n \tPR c++/18644\n \t* doc/invoke.texi (-Wsynth): Don't document, as it now is void of\n-\tsemantics. \n+\tsemantics.\n \n 2005-03-31  Alan Modra  <amodra@bigpond.net.au>\n \n@@ -3189,7 +3194,7 @@\n \n \t* tree-sra.c (decide_block_copy): Disable scalarization of\n \tsub-elements.\n-\t\n+\n 2005-03-30  Stuart Hastings  <stuart@apple.com>\n \t    Dale Johannesen  <dalej@apple.com>\n "}, {"sha": "373b6179bde7d9fc61773255f9f1793e630794b5", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ba40dd7ac0131712102aa4e31aa3e6a733f452f/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ba40dd7ac0131712102aa4e31aa3e6a733f452f/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=6ba40dd7ac0131712102aa4e31aa3e6a733f452f", "patch": "@@ -942,7 +942,7 @@ static const struct compiler default_compilers[] =\n \t\tcc1 %(cpp_unique_options) %(cc1_options)}}\\\n                 %{!fsyntax-only:%(invoke_as)}}}}}}\", 0, 1, 1},\n   {\"-\",\n-   \"%{!E:%e-E required when input is from standard input}\\\n+   \"%{!E:%e-E or -x required when input is from standard input}\\\n     %(trad_capable_cpp) %(cpp_options) %(cpp_debug_options)\", 0, 0, 0},\n   {\".h\", \"@c-header\", 0, 0, 0},\n   {\"@c-header\","}]}