{"sha": "e261fcefb71e1270673f0457fcc73711f13d3079", "node_id": "C_kwDOANBUbNoAKGUyNjFmY2VmYjcxZTEyNzA2NzNmMDQ1N2ZjYzczNzExZjEzZDMwNzk", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2023-02-02T17:08:44Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2023-02-03T20:33:07Z"}, "message": "irange: Compare nonzero bits in irange with widest_int [PR108639]\n\nThe problem here is we are trying to compare two ranges with different\nprecisions and the == operator in wide_int is complaining.\n\nInterestingly, the problem is not the nonzero bits, but the fact that\nthe entire ranges have different precisions.  The reason we don't ICE\nwhen comparing the sub-ranges, is because the code in\nirange::operator== works on trees, and tree_int_cst_equal is\npromoting the comparison to a widest int:\n\n  if (TREE_CODE (t1) == INTEGER_CST\n      && TREE_CODE (t2) == INTEGER_CST\n      && wi::to_widest (t1) == wi::to_widest (t2))\n    return 1;\n\nThis is why we don't see the ICE until the nonzero bits comparison is\ndone on wide ints.  I think we should maintain the current equality\nbehavior, and follow suit in the nonzero bit comparison.\n\nI have also fixed the legacy equality code, even though technically\nnonzero bits shouldn't appear in legacy.  But better safe than sorry.\n\n\tPR tree-optimization/108639\n\ngcc/ChangeLog:\n\n\t* value-range.cc (irange::legacy_equal_p): Compare nonzero bits as\n\twidest_int.\n\t(irange::operator==): Same.", "tree": {"sha": "a63c6017ebeeeb2399abb409dc07ad3291534194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a63c6017ebeeeb2399abb409dc07ad3291534194"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e261fcefb71e1270673f0457fcc73711f13d3079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e261fcefb71e1270673f0457fcc73711f13d3079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e261fcefb71e1270673f0457fcc73711f13d3079", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e261fcefb71e1270673f0457fcc73711f13d3079/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10bd26d6efe88a8cf03a6a325351bc470a910cab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bd26d6efe88a8cf03a6a325351bc470a910cab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10bd26d6efe88a8cf03a6a325351bc470a910cab"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "755c151a09af170108c282232aa65de9b570f055", "filename": "gcc/testsuite/gcc.c-torture/compile/pr108638.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e261fcefb71e1270673f0457fcc73711f13d3079/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108638.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e261fcefb71e1270673f0457fcc73711f13d3079/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108638.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108638.c?ref=e261fcefb71e1270673f0457fcc73711f13d3079", "patch": "@@ -0,0 +1,12 @@\n+/* PR tree-optimization/108638 */\n+\n+long long a;\n+int b;\n+\n+void\n+foo (void)\n+{\n+  for (a = 0; a < __SIZEOF_LONG_LONG__ * __CHAR_BIT__; a++)\n+    if (b)\n+      b |= a << a;\n+}"}, {"sha": "ed826cc2f5a6337a5834b97395d022274b36c795", "filename": "gcc/testsuite/gcc.c-torture/compile/pr108639.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e261fcefb71e1270673f0457fcc73711f13d3079/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108639.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e261fcefb71e1270673f0457fcc73711f13d3079/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108639.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr108639.c?ref=e261fcefb71e1270673f0457fcc73711f13d3079", "patch": "@@ -0,0 +1,11 @@\n+/* PR tree-optimization/108639 */\n+\n+long long a;\n+\n+int\n+main ()\n+{\n+  a = a ? 0 || 0 % 0 : 0;\n+  a = a << a;\n+  return 0;\n+}"}, {"sha": "a535337c47a9ba0a12bb26105c38bcd30f637b13", "filename": "gcc/value-range.cc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e261fcefb71e1270673f0457fcc73711f13d3079/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e261fcefb71e1270673f0457fcc73711f13d3079/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=e261fcefb71e1270673f0457fcc73711f13d3079", "patch": "@@ -1259,7 +1259,10 @@ irange::legacy_equal_p (const irange &other) const\n \t\t\t       other.tree_lower_bound (0))\n \t  && vrp_operand_equal_p (tree_upper_bound (0),\n \t\t\t\t  other.tree_upper_bound (0))\n-\t  && get_nonzero_bits () == other.get_nonzero_bits ());\n+\t  && (widest_int::from (get_nonzero_bits (),\n+\t\t\t\tTYPE_SIGN (type ()))\n+\t      == widest_int::from (other.get_nonzero_bits (),\n+\t\t\t\t   TYPE_SIGN (other.type ()))));\n }\n \n bool\n@@ -1294,7 +1297,11 @@ irange::operator== (const irange &other) const\n \t  || !operand_equal_p (ub, ub_other, 0))\n \treturn false;\n     }\n-  return get_nonzero_bits () == other.get_nonzero_bits ();\n+  widest_int nz1 = widest_int::from (get_nonzero_bits (),\n+\t\t\t\t     TYPE_SIGN (type ()));\n+  widest_int nz2 = widest_int::from (other.get_nonzero_bits (),\n+\t\t\t\t     TYPE_SIGN (other.type ()));\n+  return nz1 == nz2;\n }\n \n /* Return TRUE if this is a symbolic range.  */"}]}