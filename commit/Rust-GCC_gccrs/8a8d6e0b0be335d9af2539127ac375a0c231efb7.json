{"sha": "8a8d6e0b0be335d9af2539127ac375a0c231efb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE4ZDZlMGIwYmUzMzVkOWFmMjUzOTEyN2FjMzc1YTBjMjMxZWZiNw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-08-02T20:07:54Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2007-08-02T20:07:54Z"}, "message": "re PR fortran/32770 ([Meta-bug] -fdefault-integer-8 issues)\n\n2007-08-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/32770\n\t* gfortran.dg/unf_read_corrupted_1.f90:  Make all kinds\n\texplicit so test passes with -fdefault-integer-8.\n\t* gfortran.dg/unformatted_recl_1.f90:  Likewise.\n\t* gfortran.dg/unformatted_subrecord_1.f90:  Likewise.\n\nFrom-SVN: r127168", "tree": {"sha": "2812554fc97082acb17fef9b13260de5653282c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2812554fc97082acb17fef9b13260de5653282c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a8d6e0b0be335d9af2539127ac375a0c231efb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8d6e0b0be335d9af2539127ac375a0c231efb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a8d6e0b0be335d9af2539127ac375a0c231efb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8d6e0b0be335d9af2539127ac375a0c231efb7/comments", "author": null, "committer": null, "parents": [{"sha": "f8ff69ea9a57722ddf980ea9834682c2137ea8db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ff69ea9a57722ddf980ea9834682c2137ea8db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8ff69ea9a57722ddf980ea9834682c2137ea8db"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "fe19024a0103cca07476252042b14b825e4a645c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8d6e0b0be335d9af2539127ac375a0c231efb7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8d6e0b0be335d9af2539127ac375a0c231efb7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a8d6e0b0be335d9af2539127ac375a0c231efb7", "patch": "@@ -1,3 +1,11 @@\n+2007-08-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/32770\n+\t* gfortran.dg/unf_read_corrupted_1.f90:  Make all kinds\n+\texplicit so test passes with -fdefault-integer-8.\n+\t* gfortran.dg/unformatted_recl_1.f90:  Likewise.\n+\t* gfortran.dg/unformatted_subrecord_1.f90:  Likewise.\n+\n 2007-08-02  Lee Millward  <lee.millward@gmail.com>\n \n \tPR c++/30849"}, {"sha": "1361ca3669c47dee131e80ff32f6f12d7415dc79", "filename": "gcc/testsuite/gfortran.dg/unf_read_corrupted_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8d6e0b0be335d9af2539127ac375a0c231efb7/gcc%2Ftestsuite%2Fgfortran.dg%2Funf_read_corrupted_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8d6e0b0be335d9af2539127ac375a0c231efb7/gcc%2Ftestsuite%2Fgfortran.dg%2Funf_read_corrupted_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funf_read_corrupted_1.f90?ref=8a8d6e0b0be335d9af2539127ac375a0c231efb7", "patch": "@@ -3,16 +3,16 @@\n ! corrupted.\n program main\n   implicit none\n-  integer :: i1, i2\n-  integer :: ios\n+  integer(kind=4) :: i1, i2\n+  integer(kind=4) :: ios\n   character(len=50) :: msg\n \n   ! Write out a truncated unformatted sequential file by\n   ! using unformatted stream.\n \n   open (10, form=\"unformatted\", access=\"stream\", file=\"foo.dat\", &\n   status=\"unknown\")\n-  write (10) 16, 1\n+  write (10) 16_4, 1_4\n   close (10, status=\"keep\")\n \n   ! Try to read"}, {"sha": "dbafff131e83b2ba09f53483f8f047e5e82e1cd1", "filename": "gcc/testsuite/gfortran.dg/unformatted_recl_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8d6e0b0be335d9af2539127ac375a0c231efb7/gcc%2Ftestsuite%2Fgfortran.dg%2Funformatted_recl_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8d6e0b0be335d9af2539127ac375a0c231efb7/gcc%2Ftestsuite%2Fgfortran.dg%2Funformatted_recl_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funformatted_recl_1.f90?ref=8a8d6e0b0be335d9af2539127ac375a0c231efb7", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do run } \n ! PR31099 Runtime error on legal code using RECL\n program test\n-  integer :: a, b\n+  integer(kind=4) :: a, b\n   a=1\n   b=2\n   open(10, status=\"scratch\", form=\"unformatted\", recl=8)"}, {"sha": "5d59daad186fed5e1e516fdea792d30e379d8ad4", "filename": "gcc/testsuite/gfortran.dg/unformatted_subrecord_1.f90", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8d6e0b0be335d9af2539127ac375a0c231efb7/gcc%2Ftestsuite%2Fgfortran.dg%2Funformatted_subrecord_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8d6e0b0be335d9af2539127ac375a0c231efb7/gcc%2Ftestsuite%2Fgfortran.dg%2Funformatted_subrecord_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funformatted_subrecord_1.f90?ref=8a8d6e0b0be335d9af2539127ac375a0c231efb7", "patch": "@@ -1,13 +1,15 @@\n ! { dg-do run }\n ! { dg-options \"-fmax-subrecord-length=16\" }\n ! Test Intel record markers with 16-byte subrecord sizes.\n+! PR 32770:  Use explicit kinds for all integers and constants,\n+! to avoid problems with -fdefault-integer-8 and -fdefault-real-8\n program main\n   implicit none\n-  integer, dimension(20) :: n\n-  integer, dimension(30) :: m\n-  integer :: i\n-  real :: r\n-  integer :: k\n+  integer(kind=4), dimension(20) :: n\n+  integer(kind=4), dimension(30) :: m\n+  integer(kind=4) :: i\n+  real(kind=4) :: r\n+  integer(kind=4) :: k\n   ! Maximum subrecord length is 16 here, or the test will fail.\n   open (10, file=\"f10.dat\", &\n        form=\"unformatted\", access=\"sequential\")\n@@ -33,13 +35,13 @@ program main\n   if (any(n(1:5) .ne. (/ 1, 4, 9, 16, 25 /))) call abort\n   if (any(n(6:20) .ne. 0)) call abort\n   ! Append to the end of the file\n-  write (10) 3.14\n+  write (10) 3.14_4\n   ! Test multiple backspace statements\n   backspace 10\n   backspace 10\n   read (10) k\n   if (k .ne. 1) call abort\n   read (10) r\n-  if (abs(r-3.14) .gt. 1e-7) call abort\n+  if (abs(r-3.14_4) .gt. 1e-7) call abort\n   close (10, status=\"delete\")\n end program main"}]}