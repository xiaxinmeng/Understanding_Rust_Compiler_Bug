{"sha": "3e35924cf19b7e45b7fa6f294b8122ba12a8725c", "node_id": "C_kwDOANBUbNoAKDNlMzU5MjRjZjE5YjdlNDViN2ZhNmYyOTRiODEyMmJhMTJhODcyNWM", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-09T11:27:03Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-11T15:34:50Z"}, "message": "aarch64: Use type-qualified builtins for U[R]HADD Neon intrinsics\n\nDeclare unsigned type-qualified builtins and use them to implement\n(rounding) halving-add Neon intrinsics. This removes the need for\nmany casts in arm_neon.h.\n\ngcc/ChangeLog:\n\n2021-11-09  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Use BINOPU type\n\tqualifiers in generator macros for u[r]hadd builtins.\n\t* config/aarch64/arm_neon.h (vhadd_s8): Remove unnecessary\n\tcast.\n\t(vhadd_s16): Likewise.\n\t(vhadd_s32): Likewise.\n\t(vhadd_u8): Use type-qualified builtin and remove casts.\n\t(vhadd_u16): Likewise.\n\t(vhadd_u32): Likewise.\n\t(vhaddq_s8): Remove unnecessary cast.\n\t(vhaddq_s16): Likewise.\n\t(vhaddq_s32): Likewise.\n\t(vhaddq_u8): Use type-qualified builtin and remove casts.\n\t(vhaddq_u16): Likewise.\n\t(vhaddq_u32): Likewise.\n\t(vrhadd_s8): Remove unnecessary cast.\n\t(vrhadd_s16): Likewise.\n\t(vrhadd_s32): Likewise.\n\t(vrhadd_u8): Use type-qualified builtin and remove casts.\n\t(vrhadd_u16): Likewise.\n\t(vrhadd_u32): Likewise.\n\t(vrhaddq_s8): Remove unnecessary cast.\n\t(vrhaddq_s16): Likewise.\n\t(vrhaddq_s32): Likewise.\n\t(vrhaddq_u8): Use type-wualified builtin and remove casts.\n\t(vrhaddq_u16): Likewise.\n\t(vrhaddq_u32): Likewise.", "tree": {"sha": "8f6152605d7d540bc009838c30a9cb5b75cd725e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f6152605d7d540bc009838c30a9cb5b75cd725e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e35924cf19b7e45b7fa6f294b8122ba12a8725c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e35924cf19b7e45b7fa6f294b8122ba12a8725c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e35924cf19b7e45b7fa6f294b8122ba12a8725c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e35924cf19b7e45b7fa6f294b8122ba12a8725c/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee03bed0b05ad77010719b1c7f196a7bb26b8d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee03bed0b05ad77010719b1c7f196a7bb26b8d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee03bed0b05ad77010719b1c7f196a7bb26b8d6f"}], "stats": {"total": 64, "additions": 26, "deletions": 38}, "files": [{"sha": "e21ca76893c30b8ed9ad0f9ae658bcb02edfd5ea", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e35924cf19b7e45b7fa6f294b8122ba12a8725c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e35924cf19b7e45b7fa6f294b8122ba12a8725c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=3e35924cf19b7e45b7fa6f294b8122ba12a8725c", "patch": "@@ -178,10 +178,10 @@\n   /* Implemented by aarch64_<sur>h<addsub><mode>.  */\n   BUILTIN_VDQ_BHSI (BINOP, shadd, 0, NONE)\n   BUILTIN_VDQ_BHSI (BINOP, shsub, 0, NONE)\n-  BUILTIN_VDQ_BHSI (BINOP, uhadd, 0, NONE)\n+  BUILTIN_VDQ_BHSI (BINOPU, uhadd, 0, NONE)\n   BUILTIN_VDQ_BHSI (BINOP, uhsub, 0, NONE)\n   BUILTIN_VDQ_BHSI (BINOP, srhadd, 0, NONE)\n-  BUILTIN_VDQ_BHSI (BINOP, urhadd, 0, NONE)\n+  BUILTIN_VDQ_BHSI (BINOPU, urhadd, 0, NONE)\n \n   /* Implemented by aarch64_<su>addlp<mode>.  */\n   BUILTIN_VDQV_L (UNOP, saddlp, 0, NONE)"}, {"sha": "0848b019de5c947dfca4704830849817b815dccf", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 24, "deletions": 36, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e35924cf19b7e45b7fa6f294b8122ba12a8725c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e35924cf19b7e45b7fa6f294b8122ba12a8725c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=3e35924cf19b7e45b7fa6f294b8122ba12a8725c", "patch": "@@ -545,180 +545,168 @@ __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhadd_s8 (int8x8_t __a, int8x8_t __b)\n {\n-  return (int8x8_t) __builtin_aarch64_shaddv8qi (__a, __b);\n+  return __builtin_aarch64_shaddv8qi (__a, __b);\n }\n \n __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhadd_s16 (int16x4_t __a, int16x4_t __b)\n {\n-  return (int16x4_t) __builtin_aarch64_shaddv4hi (__a, __b);\n+  return __builtin_aarch64_shaddv4hi (__a, __b);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhadd_s32 (int32x2_t __a, int32x2_t __b)\n {\n-  return (int32x2_t) __builtin_aarch64_shaddv2si (__a, __b);\n+  return __builtin_aarch64_shaddv2si (__a, __b);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhadd_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n-  return (uint8x8_t) __builtin_aarch64_uhaddv8qi ((int8x8_t) __a,\n-\t\t\t\t\t\t  (int8x8_t) __b);\n+  return __builtin_aarch64_uhaddv8qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhadd_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n-  return (uint16x4_t) __builtin_aarch64_uhaddv4hi ((int16x4_t) __a,\n-\t\t\t\t\t\t   (int16x4_t) __b);\n+  return __builtin_aarch64_uhaddv4hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhadd_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n-  return (uint32x2_t) __builtin_aarch64_uhaddv2si ((int32x2_t) __a,\n-\t\t\t\t\t\t   (int32x2_t) __b);\n+  return __builtin_aarch64_uhaddv2si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhaddq_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  return (int8x16_t) __builtin_aarch64_shaddv16qi (__a, __b);\n+  return __builtin_aarch64_shaddv16qi (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhaddq_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return (int16x8_t) __builtin_aarch64_shaddv8hi (__a, __b);\n+  return __builtin_aarch64_shaddv8hi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhaddq_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return (int32x4_t) __builtin_aarch64_shaddv4si (__a, __b);\n+  return __builtin_aarch64_shaddv4si (__a, __b);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhaddq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return (uint8x16_t) __builtin_aarch64_uhaddv16qi ((int8x16_t) __a,\n-\t\t\t\t\t\t    (int8x16_t) __b);\n+  return __builtin_aarch64_uhaddv16qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhaddq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return (uint16x8_t) __builtin_aarch64_uhaddv8hi ((int16x8_t) __a,\n-\t\t\t\t\t\t   (int16x8_t) __b);\n+  return __builtin_aarch64_uhaddv8hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhaddq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return (uint32x4_t) __builtin_aarch64_uhaddv4si ((int32x4_t) __a,\n-\t\t\t\t\t\t   (int32x4_t) __b);\n+  return __builtin_aarch64_uhaddv4si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrhadd_s8 (int8x8_t __a, int8x8_t __b)\n {\n-  return (int8x8_t) __builtin_aarch64_srhaddv8qi (__a, __b);\n+  return __builtin_aarch64_srhaddv8qi (__a, __b);\n }\n \n __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrhadd_s16 (int16x4_t __a, int16x4_t __b)\n {\n-  return (int16x4_t) __builtin_aarch64_srhaddv4hi (__a, __b);\n+  return __builtin_aarch64_srhaddv4hi (__a, __b);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrhadd_s32 (int32x2_t __a, int32x2_t __b)\n {\n-  return (int32x2_t) __builtin_aarch64_srhaddv2si (__a, __b);\n+  return __builtin_aarch64_srhaddv2si (__a, __b);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrhadd_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n-  return (uint8x8_t) __builtin_aarch64_urhaddv8qi ((int8x8_t) __a,\n-\t\t\t\t\t\t   (int8x8_t) __b);\n+  return __builtin_aarch64_urhaddv8qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrhadd_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n-  return (uint16x4_t) __builtin_aarch64_urhaddv4hi ((int16x4_t) __a,\n-\t\t\t\t\t\t    (int16x4_t) __b);\n+  return __builtin_aarch64_urhaddv4hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrhadd_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n-  return (uint32x2_t) __builtin_aarch64_urhaddv2si ((int32x2_t) __a,\n-\t\t\t\t\t\t    (int32x2_t) __b);\n+  return __builtin_aarch64_urhaddv2si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrhaddq_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  return (int8x16_t) __builtin_aarch64_srhaddv16qi (__a, __b);\n+  return __builtin_aarch64_srhaddv16qi (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrhaddq_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return (int16x8_t) __builtin_aarch64_srhaddv8hi (__a, __b);\n+  return __builtin_aarch64_srhaddv8hi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrhaddq_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return (int32x4_t) __builtin_aarch64_srhaddv4si (__a, __b);\n+  return __builtin_aarch64_srhaddv4si (__a, __b);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrhaddq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return (uint8x16_t) __builtin_aarch64_urhaddv16qi ((int8x16_t) __a,\n-\t\t\t\t\t\t     (int8x16_t) __b);\n+  return __builtin_aarch64_urhaddv16qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrhaddq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return (uint16x8_t) __builtin_aarch64_urhaddv8hi ((int16x8_t) __a,\n-\t\t\t\t\t\t    (int16x8_t) __b);\n+  return __builtin_aarch64_urhaddv8hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vrhaddq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return (uint32x4_t) __builtin_aarch64_urhaddv4si ((int32x4_t) __a,\n-\t\t\t\t\t\t    (int32x4_t) __b);\n+  return __builtin_aarch64_urhaddv4si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int8x8_t"}]}