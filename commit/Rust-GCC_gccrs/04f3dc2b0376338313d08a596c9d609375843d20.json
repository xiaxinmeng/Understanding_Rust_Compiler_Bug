{"sha": "04f3dc2b0376338313d08a596c9d609375843d20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRmM2RjMmIwMzc2MzM4MzEzZDA4YTU5NmM5ZDYwOTM3NTg0M2QyMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-11-19T04:56:45Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-11-19T04:56:45Z"}, "message": "decl.c (grokparms): Don't even function types of `void' type, either.\n\n\t* decl.c (grokparms): Don't even function types of `void' type,\n\teither.\n\t* mangle.c (write_type): Don't crash when confronted with the\n\terror_mark_node.\n\nFrom-SVN: r37555", "tree": {"sha": "7fea522200428b59794c12580af53bd15eb4ead2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fea522200428b59794c12580af53bd15eb4ead2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04f3dc2b0376338313d08a596c9d609375843d20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f3dc2b0376338313d08a596c9d609375843d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04f3dc2b0376338313d08a596c9d609375843d20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f3dc2b0376338313d08a596c9d609375843d20/comments", "author": null, "committer": null, "parents": [{"sha": "b35431cf0745e4f775964ac12097f1a2c545862e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b35431cf0745e4f775964ac12097f1a2c545862e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b35431cf0745e4f775964ac12097f1a2c545862e"}], "stats": {"total": 96, "additions": 54, "deletions": 42}, "files": [{"sha": "0fb019deda48eb1334b94a6156c91b01917aeeda", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f3dc2b0376338313d08a596c9d609375843d20/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f3dc2b0376338313d08a596c9d609375843d20/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04f3dc2b0376338313d08a596c9d609375843d20", "patch": "@@ -1,5 +1,10 @@\n 2000-11-18  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* decl.c (grokparms): Don't even function types of `void' type,\n+\teither.\n+\t* mangle.c (write_type): Don't crash when confronted with the\n+\terror_mark_node.\n+\n \t* decl.c (grokparms): Don't create parameters of `void' type.\n \n 2000-11-17  Zack Weinberg  <zack@wolery.stanford.edu>"}, {"sha": "d6419303c2ca4804dcf3f81c60fffa2d95dadfb5", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 46, "deletions": 42, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f3dc2b0376338313d08a596c9d609375843d20/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f3dc2b0376338313d08a596c9d609375843d20/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=04f3dc2b0376338313d08a596c9d609375843d20", "patch": "@@ -12025,51 +12025,55 @@ grokparms (first_parm)\n \t  /* It's not a good idea to actually create parameters of\n \t     type `void'; other parts of the compiler assume that a\n \t     void type terminates the parameter list.  */\n+\t  type = error_mark_node;\n \t  TREE_TYPE (decl) = error_mark_node;\n         }\n-      \n-      /* Top-level qualifiers on the parameters are\n-         ignored for function types.  */\n-      type = TYPE_MAIN_VARIANT (type);\n-      if (TREE_CODE (type) == METHOD_TYPE)\n-        {\n-          cp_error (\"parameter `%D' invalidly declared method type\", decl);\n-          type = build_pointer_type (type);\n-          TREE_TYPE (decl) = type;\n-        }\n-      else if (TREE_CODE (type) == OFFSET_TYPE)\n-        {\n-          cp_error (\"parameter `%D' invalidly declared offset type\", decl);\n-          type = build_pointer_type (type);\n-          TREE_TYPE (decl) = type;\n-        }\n-      else if (abstract_virtuals_error (decl, type))\n-        any_error = 1;  /* Seems like a good idea. */\n-      else if (POINTER_TYPE_P (type))\n-        {\n-          /* [dcl.fct]/6, parameter types cannot contain pointers (references)\n-             to arrays of unknown bound.  */\n-          tree t = type;\n-          \n-          while (POINTER_TYPE_P (t)\n-                 || (TREE_CODE (t) == ARRAY_TYPE\n-                     && TYPE_DOMAIN (t) != NULL_TREE))\n-    \t    t = TREE_TYPE (t);\n-          if (TREE_CODE (t) == ARRAY_TYPE)\n-    \t    cp_error (\"parameter `%D' includes %s to array of unknown bound `%T'\",\n-    \t\t      decl, TYPE_PTR_P (type) ? \"pointer\" : \"reference\", t);\n-        }\n \n-      DECL_ARG_TYPE (decl) = TREE_TYPE (decl);\n-      if (PROMOTE_PROTOTYPES\n-\t  && (TREE_CODE (type) == INTEGER_TYPE\n-\t      || TREE_CODE (type) == ENUMERAL_TYPE)\n-\t  && TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node))\n-\tDECL_ARG_TYPE (decl) = integer_type_node;\n-      if (!any_error && init)\n-        init = check_default_argument (decl, init);\n-      else\n-\tinit = NULL_TREE;\n+      if (type != error_mark_node) \n+\t{\n+\t  /* Top-level qualifiers on the parameters are\n+\t     ignored for function types.  */\n+\t  type = TYPE_MAIN_VARIANT (type);\n+\t  if (TREE_CODE (type) == METHOD_TYPE)\n+\t    {\n+\t      cp_error (\"parameter `%D' invalidly declared method type\", decl);\n+\t      type = build_pointer_type (type);\n+\t      TREE_TYPE (decl) = type;\n+\t    }\n+\t  else if (TREE_CODE (type) == OFFSET_TYPE)\n+\t    {\n+\t      cp_error (\"parameter `%D' invalidly declared offset type\", decl);\n+\t      type = build_pointer_type (type);\n+\t      TREE_TYPE (decl) = type;\n+\t    }\n+\t  else if (abstract_virtuals_error (decl, type))\n+\t    any_error = 1;  /* Seems like a good idea. */\n+\t  else if (POINTER_TYPE_P (type))\n+\t    {\n+\t      /* [dcl.fct]/6, parameter types cannot contain pointers\n+\t\t (references) to arrays of unknown bound.  */\n+\t      tree t = type;\n+\n+\t      while (POINTER_TYPE_P (t)\n+\t\t     || (TREE_CODE (t) == ARRAY_TYPE\n+\t\t\t && TYPE_DOMAIN (t) != NULL_TREE))\n+\t\tt = TREE_TYPE (t);\n+\t      if (TREE_CODE (t) == ARRAY_TYPE)\n+\t\tcp_error (\"parameter `%D' includes %s to array of unknown bound `%T'\",\n+\t\t\t  decl, TYPE_PTR_P (type) ? \"pointer\" : \"reference\", t);\n+\t    }\n+\n+\t  DECL_ARG_TYPE (decl) = TREE_TYPE (decl);\n+\t  if (PROMOTE_PROTOTYPES\n+\t      && (TREE_CODE (type) == INTEGER_TYPE\n+\t\t  || TREE_CODE (type) == ENUMERAL_TYPE)\n+\t      && TYPE_PRECISION (type) < TYPE_PRECISION (integer_type_node))\n+\t    DECL_ARG_TYPE (decl) = integer_type_node;\n+\t  if (!any_error && init)\n+\t    init = check_default_argument (decl, init);\n+\t  else\n+\t    init = NULL_TREE;\n+\t}\n \n       TREE_CHAIN (decl) = decls;\n       decls = decl;"}, {"sha": "7353cf881ad2f32ca0b1ab18e79143a9d961c14d", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04f3dc2b0376338313d08a596c9d609375843d20/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04f3dc2b0376338313d08a596c9d609375843d20/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=04f3dc2b0376338313d08a596c9d609375843d20", "patch": "@@ -1245,6 +1245,9 @@ write_type (type)\n \n   MANGLE_TRACE_TREE (\"type\", type);\n \n+  if (type == error_mark_node)\n+    return;\n+\n   if (find_substitution (type))\n     return;\n   "}]}