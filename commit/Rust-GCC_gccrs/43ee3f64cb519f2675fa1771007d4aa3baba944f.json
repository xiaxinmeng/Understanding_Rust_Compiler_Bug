{"sha": "43ee3f64cb519f2675fa1771007d4aa3baba944f", "node_id": "C_kwDOANBUbNoAKDQzZWUzZjY0Y2I1MTlmMjY3NWZhMTc3MTAwN2Q0YWEzYmFiYTk0NGY", "commit": {"author": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-10-17T23:19:25Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-10-17T23:19:25Z"}, "message": "Add missing splitter for H8\n\nWhile testing a minor optimization on the H8 my builds failed due to\nfailure to split a zero-extended memory load.    That particular pattern\nis a bit special on the H8 in that it's split at assembly time primarily\nto get the length computations correct.  Arguably that alternative should\ngo away completely, but I haven't really looked into that.\n\nAnyway, with the final-asm split we obviously need to match a define_split\nsomewhere.  But none was ever written after adding CCZN optimizations.  So\nif we had a zero extend of a memory operand and it was used to eliminate\na compare, then we'd abort at final asm time.\n\nRegression tested (in conjunction with various other in-progress patches) on\nH8 without regressions.\n\ngcc/\n\t* config/h8300/extensions.md (CCZN setting zero extended load): Add\n\tmissing splitter.", "tree": {"sha": "933db053eba2660c6603939066e00c6d32833dac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/933db053eba2660c6603939066e00c6d32833dac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43ee3f64cb519f2675fa1771007d4aa3baba944f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ee3f64cb519f2675fa1771007d4aa3baba944f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43ee3f64cb519f2675fa1771007d4aa3baba944f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43ee3f64cb519f2675fa1771007d4aa3baba944f/comments", "author": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9072db9d5b549db5e2f14335ac0adc7735d43bc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9072db9d5b549db5e2f14335ac0adc7735d43bc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9072db9d5b549db5e2f14335ac0adc7735d43bc6"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "7149dc0ac52ef0157ce516bfa0f1b340d8ade883", "filename": "gcc/config/h8300/extensions.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43ee3f64cb519f2675fa1771007d4aa3baba944f/gcc%2Fconfig%2Fh8300%2Fextensions.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43ee3f64cb519f2675fa1771007d4aa3baba944f/gcc%2Fconfig%2Fh8300%2Fextensions.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fextensions.md?ref=43ee3f64cb519f2675fa1771007d4aa3baba944f", "patch": "@@ -47,6 +47,24 @@\n     operands[2] = gen_rtx_REG (QImode, REGNO (operands[0]));\n   })\n \n+;; Similarly, but setting cczn.\n+(define_split\n+  [(set (reg:CCZN CC_REG)\n+\t(compare:CCZN\n+\t  (zero_extend:HI (match_operand:QI 1 \"general_operand_src\" \"\"))\n+\t  (const_int 0)))\n+   (set (match_operand:HI 0 \"register_operand\" \"\")\n+        (zero_extend:HI (match_dup 1)))]\n+  \"!REG_P (operands[1]) && reload_completed\"\n+  [(parallel [(set (match_dup 2) (match_dup 1))\n+\t      (clobber (reg:CC CC_REG))])\n+   (parallel [(set (reg:CCZN CC_REG)\n+\t\t   (compare:CCZN (zero_extend:HI (match_dup 2)) (const_int 0)))\n+\t      (set (match_dup 0) (zero_extend:HI (match_dup 2)))])]\n+  {\n+    operands[2] = gen_rtx_REG (QImode, REGNO (operands[0]));\n+  })\n+\n (define_insn \"*zero_extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:SI (match_operand:QI 1 \"general_operand_src\" \"0,g>\")))]"}]}