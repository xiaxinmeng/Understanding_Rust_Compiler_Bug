{"sha": "58cb41e617c5af9a01dff6d1e6cb80907a48f49d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThjYjQxZTYxN2M1YWY5YTAxZGZmNmQxZTZjYjgwOTA3YTQ4ZjQ5ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-02-19T00:26:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-02-19T00:26:38Z"}, "message": "re PR c/20043 (transparent_union doesn't allow restrict qualifier removal)\n\n\tPR c/20043\n\t* c-typeck.c (composite_type): Handle quals in transparent unions.\n\t(type_lists_compatible_p): Likewise.\n\n\t* gcc.dg/transparent-union-1.c: New test.\n\t* gcc.dg/transparent-union-2.c: New test.\n\nFrom-SVN: r95255", "tree": {"sha": "13856bf51e112b777e161d4900a76caa28f904d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13856bf51e112b777e161d4900a76caa28f904d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58cb41e617c5af9a01dff6d1e6cb80907a48f49d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58cb41e617c5af9a01dff6d1e6cb80907a48f49d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58cb41e617c5af9a01dff6d1e6cb80907a48f49d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58cb41e617c5af9a01dff6d1e6cb80907a48f49d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8f61f71a7080d0e397009c08095a21d625962d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8f61f71a7080d0e397009c08095a21d625962d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8f61f71a7080d0e397009c08095a21d625962d2"}], "stats": {"total": 183, "additions": 165, "deletions": 18}, "files": [{"sha": "760a480e62444defb8d8e03f4982117e7b43406e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cb41e617c5af9a01dff6d1e6cb80907a48f49d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cb41e617c5af9a01dff6d1e6cb80907a48f49d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58cb41e617c5af9a01dff6d1e6cb80907a48f49d", "patch": "@@ -1,3 +1,9 @@\n+2005-02-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/20043\n+\t* c-typeck.c (composite_type): Handle quals in transparent unions.\n+\t(type_lists_compatible_p): Likewise.\n+\n 2005-02-18  Stan Shebs  <shebs@apple.com>\n \n \t* config/darwin.c (machopic_select_rtx_section): Don't put relocatable"}, {"sha": "3a38d22923b5554221758a8b0989f9c18f8cd382", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 52, "deletions": 18, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cb41e617c5af9a01dff6d1e6cb80907a48f49d/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cb41e617c5af9a01dff6d1e6cb80907a48f49d/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=58cb41e617c5af9a01dff6d1e6cb80907a48f49d", "patch": "@@ -375,29 +375,51 @@ composite_type (tree t1, tree t2)\n \t\t&& TREE_VALUE (p1) != TREE_VALUE (p2))\n \t      {\n \t\ttree memb;\n+\t\ttree mv2 = TREE_VALUE (p2);\n+\t\tif (mv2 && mv2 != error_mark_node\n+\t\t    && TREE_CODE (mv2) != ARRAY_TYPE)\n+\t\t  mv2 = TYPE_MAIN_VARIANT (mv2);\n \t\tfor (memb = TYPE_FIELDS (TREE_VALUE (p1));\n \t\t     memb; memb = TREE_CHAIN (memb))\n-\t\t  if (comptypes (TREE_TYPE (memb), TREE_VALUE (p2)))\n-\t\t    {\n-\t\t      TREE_VALUE (n) = TREE_VALUE (p2);\n-\t\t      if (pedantic)\n-\t\t\tpedwarn (\"function types not truly compatible in ISO C\");\n-\t\t      goto parm_done;\n-\t\t    }\n+\t\t  {\n+\t\t    tree mv3 = TREE_TYPE (memb);\n+\t\t    if (mv3 && mv3 != error_mark_node\n+\t\t\t&& TREE_CODE (mv3) != ARRAY_TYPE)\n+\t\t      mv3 = TYPE_MAIN_VARIANT (mv3);\n+\t\t    if (comptypes (mv3, mv2))\n+\t\t      {\n+\t\t\tTREE_VALUE (n) = composite_type (TREE_TYPE (memb),\n+\t\t\t\t\t\t\t TREE_VALUE (p2));\n+\t\t\tif (pedantic)\n+\t\t\t  pedwarn (\"function types not truly compatible in ISO C\");\n+\t\t\tgoto parm_done;\n+\t\t      }\n+\t\t  }\n \t      }\n \t    if (TREE_CODE (TREE_VALUE (p2)) == UNION_TYPE\n \t\t&& TREE_VALUE (p2) != TREE_VALUE (p1))\n \t      {\n \t\ttree memb;\n+\t\ttree mv1 = TREE_VALUE (p1);\n+\t\tif (mv1 && mv1 != error_mark_node\n+\t\t    && TREE_CODE (mv1) != ARRAY_TYPE)\n+\t\t  mv1 = TYPE_MAIN_VARIANT (mv1);\n \t\tfor (memb = TYPE_FIELDS (TREE_VALUE (p2));\n \t\t     memb; memb = TREE_CHAIN (memb))\n-\t\t  if (comptypes (TREE_TYPE (memb), TREE_VALUE (p1)))\n-\t\t    {\n-\t\t      TREE_VALUE (n) = TREE_VALUE (p1);\n-\t\t      if (pedantic)\n-\t\t\tpedwarn (\"function types not truly compatible in ISO C\");\n-\t\t      goto parm_done;\n-\t\t    }\n+\t\t  {\n+\t\t    tree mv3 = TREE_TYPE (memb);\n+\t\t    if (mv3 && mv3 != error_mark_node\n+\t\t\t&& TREE_CODE (mv3) != ARRAY_TYPE)\n+\t\t      mv3 = TYPE_MAIN_VARIANT (mv3);\n+\t\t    if (comptypes (mv3, mv1))\n+\t\t      {\n+\t\t\tTREE_VALUE (n) = composite_type (TREE_TYPE (memb),\n+\t\t\t\t\t\t\t TREE_VALUE (p1));\n+\t\t\tif (pedantic)\n+\t\t\t  pedwarn (\"function types not truly compatible in ISO C\");\n+\t\t\tgoto parm_done;\n+\t\t      }\n+\t\t  }\n \t      }\n \t    TREE_VALUE (n) = composite_type (TREE_VALUE (p1), TREE_VALUE (p2));\n \t  parm_done: ;\n@@ -1122,8 +1144,14 @@ type_lists_compatible_p (tree args1, tree args2)\n \t      tree memb;\n \t      for (memb = TYPE_FIELDS (a1);\n \t\t   memb; memb = TREE_CHAIN (memb))\n-\t\tif (comptypes (TREE_TYPE (memb), a2))\n-\t\t  break;\n+\t\t{\n+\t\t  tree mv3 = TREE_TYPE (memb);\n+\t\t  if (mv3 && mv3 != error_mark_node\n+\t\t      && TREE_CODE (mv3) != ARRAY_TYPE)\n+\t\t    mv3 = TYPE_MAIN_VARIANT (mv3);\n+\t\t  if (comptypes (mv3, mv2))\n+\t\t    break;\n+\t\t}\n \t      if (memb == 0)\n \t\treturn 0;\n \t    }\n@@ -1137,8 +1165,14 @@ type_lists_compatible_p (tree args1, tree args2)\n \t      tree memb;\n \t      for (memb = TYPE_FIELDS (a2);\n \t\t   memb; memb = TREE_CHAIN (memb))\n-\t\tif (comptypes (TREE_TYPE (memb), a1))\n-\t\t  break;\n+\t\t{\n+\t\t  tree mv3 = TREE_TYPE (memb);\n+\t\t  if (mv3 && mv3 != error_mark_node\n+\t\t      && TREE_CODE (mv3) != ARRAY_TYPE)\n+\t\t    mv3 = TYPE_MAIN_VARIANT (mv3);\n+\t\t  if (comptypes (mv3, mv1))\n+\t\t    break;\n+\t\t}\n \t      if (memb == 0)\n \t\treturn 0;\n \t    }"}, {"sha": "eaf57edcb3c4df528dd749190e46d8c5e3368755", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cb41e617c5af9a01dff6d1e6cb80907a48f49d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cb41e617c5af9a01dff6d1e6cb80907a48f49d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58cb41e617c5af9a01dff6d1e6cb80907a48f49d", "patch": "@@ -1,3 +1,9 @@\n+2005-02-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/20043\n+\t* gcc.dg/transparent-union-1.c: New test.\n+\t* gcc.dg/transparent-union-2.c: New test.\n+\n 2005-02-18  James E Wilson  <wilson@specifixinc.com>\n \n \tPR tree-optimization/18977"}, {"sha": "a5be8ce91860a9143f9e261e3bbf678e4b7bf157", "filename": "gcc/testsuite/gcc.dg/transparent-union-1.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cb41e617c5af9a01dff6d1e6cb80907a48f49d/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cb41e617c5af9a01dff6d1e6cb80907a48f49d/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-1.c?ref=58cb41e617c5af9a01dff6d1e6cb80907a48f49d", "patch": "@@ -0,0 +1,83 @@\n+/* PR c/20043 */\n+/* { dg-compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+extern void f0 (int *);\n+extern void f0 (int *__restrict);\n+\n+extern void f1 (int *__restrict);\n+extern void f1 (int *);\n+\n+typedef union { int *i; long *l; } U2\n+  __attribute__((transparent_union));\n+extern void f2 (U2);\n+extern void f2 (int *);\n+\n+typedef union { int *__restrict i; long *__restrict l; } U3\n+  __attribute__((transparent_union));\n+extern void f3 (U3);\n+extern void f3 (int *__restrict);\n+\n+extern void f4 (U3);\n+extern void f4 (int *);\n+\n+extern void f5 (U2);\n+extern void f5 (int *__restrict);\n+\n+typedef union { long *l; int *i; } U6\n+  __attribute__((transparent_union));\n+extern void f6 (U6);\n+extern void f6 (int *);\n+\n+typedef union { long *__restrict l; int *__restrict i; } U7\n+  __attribute__((transparent_union));\n+extern void f7 (U7);\n+extern void f7 (int *__restrict);\n+\n+extern void f8 (U7);\n+extern void f8 (int *);\n+\n+extern void f9 (U6);\n+extern void f9 (int *__restrict);\n+\n+extern void f10 (U2);\n+extern void f11 (U3);\n+extern void f12 (U6);\n+extern void f13 (U7);\n+\n+int i;\n+long l;\n+\n+int\n+main (void)\n+{\n+  f0 (&i);\n+  f0 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f0' from incompatible pointer type\" } */\n+  f1 (&i);\n+  f1 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f1' from incompatible pointer type\" } */\n+  f2 (&i);\n+  f2 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f2' from incompatible pointer type\" } */\n+  f3 (&i);\n+  f3 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f3' from incompatible pointer type\" } */\n+  f4 (&i);\n+  f4 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f4' from incompatible pointer type\" } */\n+  f5 (&i);\n+  f5 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f5' from incompatible pointer type\" } */\n+  f6 (&i);\n+  f6 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f6' from incompatible pointer type\" } */\n+  f7 (&i);\n+  f7 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f7' from incompatible pointer type\" } */\n+  f8 (&i);\n+  f8 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f8' from incompatible pointer type\" } */\n+  f9 (&i);\n+  f9 (&l);\t/* { dg-warning \"warning: passing argument 1 of 'f9' from incompatible pointer type\" } */\n+  f10 (&i);\n+  f10 (&l);\n+  f11 (&i);\n+  f11 (&l);\n+  f12 (&i);\n+  f12 (&l);\n+  f13 (&i);\n+  f13 (&l);\n+  return 0;\n+}"}, {"sha": "f466c4aa2be582cfec3fc19b9e38d447ab8122ad", "filename": "gcc/testsuite/gcc.dg/transparent-union-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58cb41e617c5af9a01dff6d1e6cb80907a48f49d/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58cb41e617c5af9a01dff6d1e6cb80907a48f49d/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-2.c?ref=58cb41e617c5af9a01dff6d1e6cb80907a48f49d", "patch": "@@ -0,0 +1,18 @@\n+/* PR c/20043 */\n+/* { dg-compile } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+typedef union { int *i; long *l; } U\n+  __attribute__((transparent_union));\n+\n+extern void f0 (U);\t\t/* { dg-error \"previous declaration\" } */\n+extern void f0 (void *);\t/* { dg-error \"conflicting types\" } */\n+\n+extern void f1 (U);\t\t/* { dg-error \"previous declaration\" } */\n+extern void f1 (unsigned long);\t/* { dg-error \"conflicting types\" } */\n+\n+extern void f2 (void *);\t/* { dg-error \"previous declaration\" } */\n+extern void f2 (U);\t\t/* { dg-error \"conflicting types\" } */\n+\n+extern void f3 (unsigned long);\t/* { dg-error \"previous declaration\" } */\n+extern void f3 (U);\t\t/* { dg-error \"conflicting types\" } */"}]}