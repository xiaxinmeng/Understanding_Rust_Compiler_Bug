{"sha": "30b300de8eb9a53c8ad8d80caf06e386e916bc66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBiMzAwZGU4ZWI5YTUzYzhhZDhkODBjYWYwNmUzODZlOTE2YmM2Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-19T10:27:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-08-19T12:02:12Z"}, "message": "libstdc++: Improve doxygen docs for smart pointers\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/shared_ptr.h: Add @since and @headerfile tags.\n\t* include/bits/unique_ptr.h: Add @headerfile tags.", "tree": {"sha": "3d785f38c883c4f53fee3cc182b86d19b5292ee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d785f38c883c4f53fee3cc182b86d19b5292ee7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30b300de8eb9a53c8ad8d80caf06e386e916bc66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b300de8eb9a53c8ad8d80caf06e386e916bc66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30b300de8eb9a53c8ad8d80caf06e386e916bc66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30b300de8eb9a53c8ad8d80caf06e386e916bc66/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65441d8fc3c132a58c8bef6faefa2bc25e82a913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65441d8fc3c132a58c8bef6faefa2bc25e82a913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65441d8fc3c132a58c8bef6faefa2bc25e82a913"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "214ce20a878117b0f564a13b072dfe1cc40bdeeb", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b300de8eb9a53c8ad8d80caf06e386e916bc66/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b300de8eb9a53c8ad8d80caf06e386e916bc66/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=30b300de8eb9a53c8ad8d80caf06e386e916bc66", "patch": "@@ -102,6 +102,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    *  @brief  A smart pointer with reference-counted copy semantics.\n+   *  @headerfile memory\n+   *  @since C++11\n    *\n    * A `shared_ptr` object is either empty or _owns_ a pointer passed\n    * to the constructor. Copies of a `shared_ptr` share ownership of\n@@ -139,6 +141,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201703L\n # define __cpp_lib_shared_ptr_weak_type 201606\n       /// The corresponding weak_ptr type for this shared_ptr\n+      /// @since C++17\n       using weak_type = weak_ptr<_Tp>;\n #endif\n       /**\n@@ -266,6 +269,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __r  A `shared_ptr`.\n        *  @param  __p  A pointer that will remain valid while `*__r` is valid.\n        *  @post   `get() == __p && !__r.use_count() && !__r.get()`\n+       *  @since C++17\n        *\n        *  This can be used to construct a `shared_ptr` to a sub-object\n        *  of an object managed by an existing `shared_ptr`. The complete\n@@ -607,6 +611,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201703L\n   /// Convert type of `shared_ptr`, via `reinterpret_cast`\n+  /// @since C++17\n   template<typename _Tp, typename _Up>\n     inline shared_ptr<_Tp>\n     reinterpret_pointer_cast(const shared_ptr<_Up>& __r) noexcept\n@@ -620,6 +625,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // 2996. Missing rvalue overloads for shared_ptr operations\n \n   /// Convert type of `shared_ptr` rvalue, via `static_cast`\n+  /// @since C++20\n   template<typename _Tp, typename _Up>\n     inline shared_ptr<_Tp>\n     static_pointer_cast(shared_ptr<_Up>&& __r) noexcept\n@@ -630,6 +636,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   /// Convert type of `shared_ptr` rvalue, via `const_cast`\n+  /// @since C++20\n   template<typename _Tp, typename _Up>\n     inline shared_ptr<_Tp>\n     const_pointer_cast(shared_ptr<_Up>&& __r) noexcept\n@@ -640,6 +647,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   /// Convert type of `shared_ptr` rvalue, via `dynamic_cast`\n+  /// @since C++20\n   template<typename _Tp, typename _Up>\n     inline shared_ptr<_Tp>\n     dynamic_pointer_cast(shared_ptr<_Up>&& __r) noexcept\n@@ -651,6 +659,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   /// Convert type of `shared_ptr` rvalue, via `reinterpret_cast`\n+  /// @since C++20\n   template<typename _Tp, typename _Up>\n     inline shared_ptr<_Tp>\n     reinterpret_pointer_cast(shared_ptr<_Up>&& __r) noexcept\n@@ -666,6 +675,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @brief  A non-owning observer for a pointer owned by a shared_ptr\n+   * @headerfile memory\n+   * @since C++11\n    *\n    * A weak_ptr provides a safe alternative to a raw pointer when you want\n    * a non-owning reference to an object that is managed by a shared_ptr.\n@@ -786,7 +797,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n \n   /**\n-   *  @brief Base class allowing use of member function shared_from_this.\n+   * @brief Base class allowing use of the member function `shared_from_this`.\n+   * @headerfile memory\n+   * @since C++11\n    */\n   template<typename _Tp>\n     class enable_shared_from_this\n@@ -813,13 +826,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11\n #define __cpp_lib_enable_shared_from_this 201603\n+      /** @{\n+       * Get a `weak_ptr` referring to the object that has `*this` as its base.\n+       * @since C++17\n+       */\n       weak_ptr<_Tp>\n       weak_from_this() noexcept\n       { return this->_M_weak_this; }\n \n       weak_ptr<const _Tp>\n       weak_from_this() const noexcept\n       { return this->_M_weak_this; }\n+      /// @}\n #endif\n \n     private:"}, {"sha": "f34ca10ce65fbf2e2aebb20777668ce844d57fd8", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30b300de8eb9a53c8ad8d80caf06e386e916bc66/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30b300de8eb9a53c8ad8d80caf06e386e916bc66/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=30b300de8eb9a53c8ad8d80caf06e386e916bc66", "patch": "@@ -240,6 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // 20.7.1.2 unique_ptr for single objects.\n \n   /// A move-only smart pointer that manages unique ownership of a resource.\n+  /// @headerfile memory\n   /// @since C++11\n   template <typename _Tp, typename _Dp = default_delete<_Tp>>\n     class unique_ptr\n@@ -478,6 +479,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // DR 740 - omit specialization for array objects with a compile time length\n \n   /// A move-only smart pointer that manages unique ownership of an array.\n+  /// @headerfile memory\n   /// @since C++11\n   template<typename _Tp, typename _Dp>\n     class unique_ptr<_Tp[], _Dp>"}]}