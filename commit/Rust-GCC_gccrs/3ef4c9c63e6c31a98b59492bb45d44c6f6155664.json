{"sha": "3ef4c9c63e6c31a98b59492bb45d44c6f6155664", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VmNGM5YzYzZTZjMzFhOThiNTk0OTJiYjQ1ZDQ0YzZmNjE1NTY2NA==", "commit": {"author": {"name": "Jason Eckhardt", "email": "jle@cygnus.com", "date": "2000-05-03T04:41:04Z"}, "committer": {"name": "Jason Eckhardt", "email": "jle@gcc.gnu.org", "date": "2000-05-03T04:41:04Z"}, "message": "bb-reorder (chain_reorder_blocks): Changed code to test for EDGE_FALLTHRU rather than making erroneous assumption...\n\nTue May  2 23:38:37 2000  Jason Eckhardt  <jle@cygnus.com>\n\n\t* bb-reorder (chain_reorder_blocks): Changed code to test for\n\tEDGE_FALLTHRU rather than making erroneous assumption that the\n\tfirst outgoing edge is the fall-through edge.\n\nFrom-SVN: r33623", "tree": {"sha": "d8a97018954a33131a39a148919f14614696f45b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8a97018954a33131a39a148919f14614696f45b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ef4c9c63e6c31a98b59492bb45d44c6f6155664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef4c9c63e6c31a98b59492bb45d44c6f6155664", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ef4c9c63e6c31a98b59492bb45d44c6f6155664", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef4c9c63e6c31a98b59492bb45d44c6f6155664/comments", "author": null, "committer": null, "parents": [{"sha": "88774c2cc65b3327bc65611e7247f139a7f96c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88774c2cc65b3327bc65611e7247f139a7f96c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88774c2cc65b3327bc65611e7247f139a7f96c77"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "1c35a686f6a70e75146afee42847609966362975", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef4c9c63e6c31a98b59492bb45d44c6f6155664/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef4c9c63e6c31a98b59492bb45d44c6f6155664/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ef4c9c63e6c31a98b59492bb45d44c6f6155664", "patch": "@@ -1,3 +1,9 @@\n+Tue May  2 23:38:37 2000  Jason Eckhardt  <jle@cygnus.com>\n+\n+        * bb-reorder (chain_reorder_blocks): Changed code to test for\n+        EDGE_FALLTHRU rather than making erroneous assumption that the\n+        first outgoing edge is the fall-through edge.\n+\n Tue May  2 18:20:31 2000  Donald Lindsay  <dlindsay@hound.cygnus.com>\n \n \t* config/mips/mips.c (mips_build_va_list,mips_va_start,mips_va_arg): new "}, {"sha": "f6e226e4ac37c5d8f6a31316204b4a515d602296", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef4c9c63e6c31a98b59492bb45d44c6f6155664/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef4c9c63e6c31a98b59492bb45d44c6f6155664/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=3ef4c9c63e6c31a98b59492bb45d44c6f6155664", "patch": "@@ -323,6 +323,7 @@ chain_reorder_blocks (e, ceb)\n   basic_block db = e->dest;\n   rtx cebe_insn, dbh_insn, dbe_insn;\n   edge ee, last_edge;\n+  edge e_fallthru, e_jump;\n \n   enum cond_types {NO_COND, PREDICT_THEN_WITH_ELSE, PREDICT_ELSE,\n \t\t   PREDICT_THEN_NO_ELSE, PREDICT_NOT_THEN_NO_ELSE};\n@@ -342,33 +343,53 @@ chain_reorder_blocks (e, ceb)\n       && ceb->index + 1 == db->index && NEXT_INSN (cebe_insn))\n     return db;\n \n+  e_fallthru = e_jump = e;\n+\n   /* Get the type of block and type of condition.  */\n   cond_type = NO_COND;\n   cond_block_type = NO_COND_BLOCK;\n   if (GET_CODE (sb->end) == JUMP_INSN && ! simplejump_p (sb->end)\n       && condjump_p (sb->end))\n     {\n+      if (e->flags & EDGE_FALLTHRU)\n+\t{\n+\t  if (e == sb->succ)\n+\t    e_jump = sb->succ->succ_next;\n+\t  else if (e == sb->succ->succ_next)\n+\t    e_jump = sb->succ;\n+\t  else\n+\t    abort ();\n+\t}\n+      else\n+\t{\n+\t  if (e == sb->succ)\n+\t    e_fallthru = sb->succ->succ_next;\n+\t  else if (e == sb->succ->succ_next)\n+\t    e_fallthru = sb->succ;\n+\t  else\n+\t    abort ();\n+\t}\n+\n       if (e->flags & EDGE_FALLTHRU)\n \tcond_block_type = THEN_BLOCK;\n-      else if (get_common_dest (sb->succ->dest, sb))\n+      else if (get_common_dest (e_fallthru->dest, sb))\n \tcond_block_type = NO_ELSE_BLOCK;\n       else \n \tcond_block_type = ELSE_BLOCK;\n \n-      if (sb->succ->succ_next\n-\t  && get_common_dest (sb->succ->dest, sb))\n+      if (get_common_dest (e_fallthru->dest, sb))\n \t{\n \t  if (cond_block_type == THEN_BLOCK)\n \t    {\n-\t      if (! (REORDER_BLOCK_FLAGS (sb->succ->succ_next->dest)\n+\t      if (! (REORDER_BLOCK_FLAGS (e->dest)\n \t\t     & REORDER_BLOCK_VISITED))\n \t\tcond_type = PREDICT_THEN_NO_ELSE;\n \t      else\n \t\tcond_type = PREDICT_NOT_THEN_NO_ELSE;\n \t    }\n \t  else if (cond_block_type == NO_ELSE_BLOCK)\n \t    {\n-\t      if (! (REORDER_BLOCK_FLAGS (sb->succ->dest)\n+\t      if (! (REORDER_BLOCK_FLAGS (e->dest)\n \t\t     & REORDER_BLOCK_VISITED))\n \t\tcond_type = PREDICT_NOT_THEN_NO_ELSE;\n \t      else\n@@ -379,16 +400,16 @@ chain_reorder_blocks (e, ceb)\n \t{\n \t  if (cond_block_type == THEN_BLOCK)\n \t    {\n-\t      if (! (REORDER_BLOCK_FLAGS (sb->succ->succ_next->dest)\n+\t      if (! (REORDER_BLOCK_FLAGS (e->dest)\n \t\t     & REORDER_BLOCK_VISITED))\n \t\tcond_type = PREDICT_THEN_WITH_ELSE;\n \t      else\n \t\tcond_type = PREDICT_ELSE;\n \t    }\n \t  else if (cond_block_type == ELSE_BLOCK\n-\t\t   && sb->succ->dest != EXIT_BLOCK_PTR)\n+\t\t   && e_fallthru->dest != EXIT_BLOCK_PTR)\n \t    {\n-\t      if (! (REORDER_BLOCK_FLAGS (sb->succ->dest)\n+\t      if (! (REORDER_BLOCK_FLAGS (e->dest)\n \t\t     & REORDER_BLOCK_VISITED))\n \t\tcond_type = PREDICT_ELSE;\n \t      else\n@@ -421,25 +442,26 @@ chain_reorder_blocks (e, ceb)\n       if (rtl_dump_file)\n \tfprintf (rtl_dump_file,\n \t\t \"    then jump from block %d to block %d\\n\",\n-\t\t sb->index, sb->succ->dest->index);\n+\t\t sb->index, e_fallthru->dest->index);\n \n       /* Jump to reordered then block.  */\n-      REORDER_BLOCK_ADD_JUMP (sb) = sb->succ->dest;\n+      REORDER_BLOCK_ADD_JUMP (sb) = e_fallthru->dest;\n     }\n   \n   /* Reflect that then block will jump back when we have no else.  */\n   if (cond_block_type != THEN_BLOCK\n       && cond_type == PREDICT_NOT_THEN_NO_ELSE)\n     {\n-      for (ee = sb->succ->dest->succ;\n+      basic_block jbb = e_fallthru->dest;\n+      for (ee = jbb->succ;\n \t   ee && ! (ee->flags & EDGE_FALLTHRU);\n \t   ee = ee->succ_next)\n \tcontinue;\n \n-      if (ee && ! (GET_CODE (sb->succ->dest->end) == JUMP_INSN\n-\t\t   && ! simplejump_p (sb->succ->dest->end)))\n+      if (ee && ! (GET_CODE (jbb->end) == JUMP_INSN\n+\t\t   && ! simplejump_p (jbb->end)))\n \t{\n-\t  REORDER_BLOCK_ADD_JUMP (sb->succ->dest) = ee->dest;\n+\t  REORDER_BLOCK_ADD_JUMP (jbb) = ee->dest;\n \t}\n     }\n "}]}