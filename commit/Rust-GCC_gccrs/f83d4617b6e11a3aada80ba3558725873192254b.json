{"sha": "f83d4617b6e11a3aada80ba3558725873192254b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgzZDQ2MTdiNmUxMWEzYWFkYTgwYmEzNTU4NzI1ODczMTkyMjU0Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-22T23:15:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-05-22T23:15:56Z"}, "message": "(mystrstr): Replacement for strstr.\n\nFrom-SVN: r9773", "tree": {"sha": "ddf5950ed1f51e99c264e8c6163d8857f15f469f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddf5950ed1f51e99c264e8c6163d8857f15f469f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f83d4617b6e11a3aada80ba3558725873192254b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83d4617b6e11a3aada80ba3558725873192254b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f83d4617b6e11a3aada80ba3558725873192254b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83d4617b6e11a3aada80ba3558725873192254b/comments", "author": null, "committer": null, "parents": [{"sha": "2a6d5ce076ac1e78cc23e0e1de55be1324184d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a6d5ce076ac1e78cc23e0e1de55be1324184d87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a6d5ce076ac1e78cc23e0e1de55be1324184d87"}], "stats": {"total": 11, "additions": 4, "deletions": 7}, "files": [{"sha": "b03cda983e77a91a879daf593af4381fe32b7d7a", "filename": "gcc/cplus-dem.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f83d4617b6e11a3aada80ba3558725873192254b/gcc%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f83d4617b6e11a3aada80ba3558725873192254b/gcc%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcplus-dem.c?ref=f83d4617b6e11a3aada80ba3558725873192254b", "patch": "@@ -35,11 +35,9 @@ Cambridge, MA 02139, USA.  */\n \n extern char *xmalloc PARAMS((unsigned));\n extern char *xrealloc PARAMS((char *, unsigned));\n-extern char *strstr ();\n \n-#ifndef POSIX\n char *\n-strstr (s1, s2)\n+mystrstr (s1, s2)\n   char *s1, *s2;\n {\n   register char *p = s1;\n@@ -59,7 +57,6 @@ strstr (s1, s2)\n     }\n   return (0);\n }\n-#endif\n \n /* In order to allow a single demangler executable to demangle strings\n    using various common values of CPLUS_MARKER, as well as any specific\n@@ -1102,7 +1099,7 @@ arm_pt (work, mangled, n, anchor, args)\n      const char **anchor, **args;\n {\n   /* ARM template? */\n-  if (ARM_DEMANGLING && (*anchor = strstr(mangled, \"__pt__\")))\n+  if (ARM_DEMANGLING && (*anchor = mystrstr (mangled, \"__pt__\")))\n     {\n \tint len;\n         *args = *anchor + 6;\n@@ -1318,7 +1315,7 @@ demangle_prefix (work, mangled, declp)\n \n /*  This block of code is a reduction in strength time optimization\n     of:\n-    \tscan = strstr (*mangled, \"__\"); */\n+    \tscan = mystrstr (*mangled, \"__\"); */\n \n   {\n     scan = *mangled;\n@@ -1388,7 +1385,7 @@ demangle_prefix (work, mangled, declp)\n \t    {\n \t      scan++;\n \t    }\n-\t  if ((scan = strstr (scan, \"__\")) == NULL || (*(scan + 2) == '\\0'))\n+\t  if ((scan = mystrstr (scan, \"__\")) == NULL || (*(scan + 2) == '\\0'))\n \t    {\n \t      /* No separator (I.E. \"__not_mangled\"), or empty signature\n \t\t (I.E. \"__not_mangled_either__\") */"}]}