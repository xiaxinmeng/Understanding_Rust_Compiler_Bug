{"sha": "a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBmMGFiOWZjMTlkZWEyMTA3NmQ3YjRkN2U4YjhjNWMzMmI3ODQ1NQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-04-28T19:59:57Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-04-28T19:59:57Z"}, "message": "re PR c/25309 (ICE on initialization of a huge array)\n\n\n\tPR c/25309\n\t* c-typeck.c (struct spelling): Make I an unsigned HOST_WIDE_INT.\n\t(push_array_bounds): Delete prototype.  Change BOUNDS argument to\n\tan unsigned HOST_WIDE_INT.\n\t(print_spelling): Use HOST_WIDE_INT_PRINT_UNSIGNED to output the\n\tarray index.\n\t(really_start_incremental_init): No need to call convert because\n\tbitsize_zero_node is already of type bitsizetype.\n\t(push_init_level): Extract the value of constructor_index as an\n\tunsigned HOST_WIDE_INT quantity, using tree_low_cst.\n\t(process_init_element): Likewise.\n\n\t* gcc.dg/large-size-array-2.c: New test case.\n\nFrom-SVN: r113355", "tree": {"sha": "a6a89ff234f97fde1db810e9fc1190006ae95009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6a89ff234f97fde1db810e9fc1190006ae95009"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455/comments", "author": null, "committer": null, "parents": [{"sha": "87ceee72364d3777b7fb602f60cde99c2c66fe41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87ceee72364d3777b7fb602f60cde99c2c66fe41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87ceee72364d3777b7fb602f60cde99c2c66fe41"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "99f3503bceef1645c82c36285a90ab463a90c570", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455", "patch": "@@ -1,3 +1,17 @@\n+2006-04-28  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR c/25309\n+\t* c-typeck.c (struct spelling): Make I an unsigned HOST_WIDE_INT.\n+\t(push_array_bounds): Delete prototype.  Change BOUNDS argument to\n+\tan unsigned HOST_WIDE_INT.\n+\t(print_spelling): Use HOST_WIDE_INT_PRINT_UNSIGNED to output the\n+\tarray index.\n+\t(really_start_incremental_init): No need to call convert because\n+\tbitsize_zero_node is already of type bitsizetype.\n+\t(push_init_level): Extract the value of constructor_index as an\n+\tunsigned HOST_WIDE_INT quantity, using tree_low_cst.\n+\t(process_init_element): Likewise.\n+\n 2006-04-28  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* gcc.c (process_command): Add program name to GCC_EXEC_PREFIX"}, {"sha": "64fa9f15336103822e9a135fc8868d1e6a70486e", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455", "patch": "@@ -90,7 +90,6 @@ static tree convert_for_assignment (tree, tree, enum impl_conv, tree, tree,\n static tree valid_compound_expr_initializer (tree, tree);\n static void push_string (const char *);\n static void push_member_name (tree);\n-static void push_array_bounds (int);\n static int spelling_length (void);\n static char *print_spelling (char *);\n static void warning_init (const char *);\n@@ -4309,7 +4308,7 @@ struct spelling\n   int kind;\n   union\n     {\n-      int i;\n+      unsigned HOST_WIDE_INT i;\n       const char *s;\n     } u;\n };\n@@ -4369,7 +4368,7 @@ push_member_name (tree decl)\n /* Push an array bounds on the stack.  Printed as [BOUNDS].  */\n \n static void\n-push_array_bounds (int bounds)\n+push_array_bounds (unsigned HOST_WIDE_INT bounds)\n {\n   PUSH_SPELLING (SPELLING_BOUNDS, bounds, u.i);\n }\n@@ -4404,7 +4403,7 @@ print_spelling (char *buffer)\n   for (p = spelling_base; p < spelling; p++)\n     if (p->kind == SPELLING_BOUNDS)\n       {\n-\tsprintf (d, \"[%d]\", p->u.i);\n+\tsprintf (d, \"[\" HOST_WIDE_INT_PRINT_UNSIGNED \"]\", p->u.i);\n \td += strlen (d);\n       }\n     else\n@@ -5083,7 +5082,7 @@ really_start_incremental_init (tree type)\n       /* Vectors are like simple fixed-size arrays.  */\n       constructor_max_index =\n \tbuild_int_cst (NULL_TREE, TYPE_VECTOR_SUBPARTS (constructor_type) - 1);\n-      constructor_index = convert (bitsizetype, bitsize_zero_node);\n+      constructor_index = bitsize_zero_node;\n       constructor_unfilled_index = constructor_index;\n     }\n   else\n@@ -5200,7 +5199,7 @@ push_init_level (int implicit)\n   else if (TREE_CODE (constructor_type) == ARRAY_TYPE)\n     {\n       constructor_type = TREE_TYPE (constructor_type);\n-      push_array_bounds (tree_low_cst (constructor_index, 0));\n+      push_array_bounds (tree_low_cst (constructor_index, 1));\n       constructor_depth++;\n     }\n \n@@ -6588,7 +6587,7 @@ process_init_element (struct c_expr value)\n \t  /* Now output the actual element.  */\n \t  if (value.value)\n \t    {\n-\t      push_array_bounds (tree_low_cst (constructor_index, 0));\n+\t      push_array_bounds (tree_low_cst (constructor_index, 1));\n \t      output_init_element (value.value, strict_string,\n \t\t\t\t   elttype, constructor_index, 1);\n \t      RESTORE_SPELLING_DEPTH (constructor_depth);"}, {"sha": "5a7ccc9e745102cbf75570ce3b8c498d02a4b7bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455", "patch": "@@ -1,3 +1,8 @@\n+2006-04-28  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR c/25309\n+\t* gcc.dg/large-size-array-2.c: New test case.\n+\n 2006-04-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR target/26826"}, {"sha": "6ac31d11af4261f8a7d9ebcd3be87e21c2f4a1d5", "filename": "gcc/testsuite/gcc.dg/large-size-array-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flarge-size-array-2.c?ref=a0f0ab9fc19dea21076d7b4d7e8b8c5c32b78455", "patch": "@@ -0,0 +1,7 @@\n+/* PR c/25309 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+static char * name[] = {\n+    [0x80000000]  = \"bar\"\n+  };\n+"}]}