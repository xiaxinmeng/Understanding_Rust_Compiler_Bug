{"sha": "ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "node_id": "C_kwDOANBUbNoAKGFiMGI1ZmJmZTkwMTY4ZDJlNDcwYWVmYjE5ZTBjZjMxNTI2MjkwYmM", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-06-19T12:12:48Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2022-02-09T12:38:54Z"}, "message": "x86: Add -m[no-]direct-extern-access\n\nAdd -m[no-]direct-extern-access and nodirect_extern_access attribute.\n-mdirect-extern-access is the default.  With nodirect_extern_access\nattribute, GOT is always used to access undefined data and function\nsymbols with nodirect_extern_access attribute, including in PIE and\nnon-PIE.  With -mno-direct-extern-access:\n\n1. Always use GOT to access undefined data and function symbols,\n   including in PIE and non-PIE.  These will avoid copy relocations\n   in executables.  This is compatible with existing executables and\n   shared libraries.\n2. In executable and shared library, bind symbols with the STV_PROTECTED\n   visibility locally:\n   a. The address of data symbol is the address of data body.\n   b. For systems without function descriptor, the function pointer is\n      the address of function body.\n   c. The resulting shared libraries may not be incompatible with\n      executables which have copy relocations on protected symbols or\n      use executable PLT entries as function addresses for protected\n      functions in shared libraries.\n3. Update asm_preferred_eh_data_format to select PC relative EH encoding\nformat with -mno-direct-extern-access to avoid copy relocation.\n4. Add ix86_reloc_rw_mask for TARGET_ASM_RELOC_RW_MASK to avoid copy\nrelocation with -mno-direct-extern-access.\n\ngcc/\n\n\tPR target/35513\n\tPR target/100593\n\t* config/i386/gnu-property.cc: Include \"i386-protos.h\".\n\t(file_end_indicate_exec_stack_and_gnu_property): Generate\n\ta GNU_PROPERTY_1_NEEDED note for -mno-direct-extern-access or\n\tnodirect_extern_access attribute.\n\t* config/i386/i386-options.cc\n\t(handle_nodirect_extern_access_attribute): New function.\n\t(ix86_attribute_table): Add nodirect_extern_access attribute.\n\t* config/i386/i386-protos.h (ix86_force_load_from_GOT_p): Add a\n\tbool argument.\n\t(ix86_has_no_direct_extern_access): New.\n\t* config/i386/i386.cc (ix86_has_no_direct_extern_access): New.\n\t(ix86_force_load_from_GOT_p): Add a bool argument to indicate\n\tcall operand.  Force non-call load from GOT for\n\t-mno-direct-extern-access or nodirect_extern_access attribute.\n\t(legitimate_pic_address_disp_p): Avoid copy relocation in PIE\n\tfor -mno-direct-extern-access or nodirect_extern_access attribute.\n\t(ix86_print_operand): Pass true to ix86_force_load_from_GOT_p\n\tfor call operand.\n\t(asm_preferred_eh_data_format): Use PC-relative format for\n\t-mno-direct-extern-access to avoid copy relocation.  Check\n\tptr_mode instead of TARGET_64BIT when selecting DW_EH_PE_sdata4.\n\t(ix86_binds_local_p): Set ix86_has_no_direct_extern_access to\n\ttrue for -mno-direct-extern-access or nodirect_extern_access\n\tattribute.  Don't treat protected data as extern and avoid copy\n\trelocation on common symbol with -mno-direct-extern-access or\n\tnodirect_extern_access attribute.\n\t(ix86_reloc_rw_mask): New to avoid copy relocation for\n\t-mno-direct-extern-access.\n\t(TARGET_ASM_RELOC_RW_MASK): New.\n\t* config/i386/i386.opt: Add -mdirect-extern-access.\n\t* doc/extend.texi: Document nodirect_extern_access attribute.\n\t* doc/invoke.texi: Document -m[no-]direct-extern-access.\n\ngcc/testsuite/\n\n\tPR target/35513\n\tPR target/100593\n\t* g++.target/i386/pr35513-1.C: New file.\n\t* g++.target/i386/pr35513-2.C: Likewise.\n\t* gcc.target/i386/pr35513-1a.c: Likewise.\n\t* gcc.target/i386/pr35513-1b.c: Likewise.\n\t* gcc.target/i386/pr35513-2a.c: Likewise.\n\t* gcc.target/i386/pr35513-2b.c: Likewise.\n\t* gcc.target/i386/pr35513-3a.c: Likewise.\n\t* gcc.target/i386/pr35513-3b.c: Likewise.\n\t* gcc.target/i386/pr35513-4a.c: Likewise.\n\t* gcc.target/i386/pr35513-4b.c: Likewise.\n\t* gcc.target/i386/pr35513-5a.c: Likewise.\n\t* gcc.target/i386/pr35513-5b.c: Likewise.\n\t* gcc.target/i386/pr35513-6a.c: Likewise.\n\t* gcc.target/i386/pr35513-6b.c: Likewise.\n\t* gcc.target/i386/pr35513-7a.c: Likewise.\n\t* gcc.target/i386/pr35513-7b.c: Likewise.\n\t* gcc.target/i386/pr35513-8.c: Likewise.\n\t* gcc.target/i386/pr35513-9a.c: Likewise.\n\t* gcc.target/i386/pr35513-9b.c: Likewise.\n\t* gcc.target/i386/pr35513-10a.c: Likewise.\n\t* gcc.target/i386/pr35513-10b.c: Likewise.\n\t* gcc.target/i386/pr35513-11a.c: Likewise.\n\t* gcc.target/i386/pr35513-11b.c: Likewise.\n\t* gcc.target/i386/pr35513-12a.c: Likewise.\n\t* gcc.target/i386/pr35513-12b.c: Likewise.", "tree": {"sha": "736de4846f3c063c6373bae97e8603ef8bd2d011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/736de4846f3c063c6373bae97e8603ef8bd2d011"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5390a2f191682dae3c6d1e1deac20e05be413514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5390a2f191682dae3c6d1e1deac20e05be413514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5390a2f191682dae3c6d1e1deac20e05be413514"}], "stats": {"total": 672, "additions": 655, "deletions": 17}, "files": [{"sha": "ea63c1ec58c19bfb5f189ad7687a2c92c800c3ad", "filename": "gcc/config/i386/gnu-property.cc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Fconfig%2Fi386%2Fgnu-property.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Fconfig%2Fi386%2Fgnu-property.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-property.cc?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"output.h\"\n #include \"linux-common.h\"\n+#include \"i386-protos.h\"\n \n static void\n emit_gnu_property (unsigned int type, unsigned int data)\n@@ -60,7 +61,9 @@ file_end_indicate_exec_stack_and_gnu_property (void)\n {\n   file_end_indicate_exec_stack ();\n \n-  if (flag_cf_protection == CF_NONE && !ix86_needed)\n+  if (flag_cf_protection == CF_NONE\n+      && !ix86_needed\n+      && !ix86_has_no_direct_extern_access)\n     return;\n \n   unsigned int feature_1 = 0;\n@@ -121,4 +124,9 @@ file_end_indicate_exec_stack_and_gnu_property (void)\n   /* Generate GNU_PROPERTY_X86_ISA_1_NEEDED.  */\n   if (isa_1)\n     emit_gnu_property (0xc0008002, isa_1);\n+\n+  if (ix86_has_no_direct_extern_access)\n+    /* Emite a GNU_PROPERTY_1_NEEDED note with\n+       GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS.  */\n+    emit_gnu_property (0xb0008000, (1U << 0));\n }"}, {"sha": "805539364108eee07f5bda527acd6f39f3f7bf95", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -3775,6 +3775,36 @@ ix86_handle_fentry_name (tree *node, tree name, tree args,\n   return NULL_TREE;\n }\n \n+/* Handle a \"nodirect_extern_access\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_nodirect_extern_access_attribute (tree *pnode, tree name,\n+\t\t\t\t\t tree ARG_UNUSED (args),\n+\t\t\t\t\t int ARG_UNUSED (flags),\n+\t\t\t\t\t bool *no_add_attrs)\n+{\n+  tree node = *pnode;\n+\n+  if (VAR_OR_FUNCTION_DECL_P (node))\n+    {\n+      if ((!TREE_STATIC (node) && TREE_CODE (node) != FUNCTION_DECL\n+\t   && !DECL_EXTERNAL (node)) || !TREE_PUBLIC (node))\n+\t{\n+\t  warning (OPT_Wattributes,\n+\t\t   \"%qE attribute have effect only on public objects\", name);\n+\t  *no_add_attrs = true;\n+\t}\n+    }\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Table of valid machine attributes.  */\n const struct attribute_spec ix86_attribute_table[] =\n {\n@@ -3855,6 +3885,8 @@ const struct attribute_spec ix86_attribute_table[] =\n     ix86_handle_fentry_name, NULL },\n   { \"cf_check\", 0, 0, true, false, false, false,\n     ix86_handle_fndecl_attribute, NULL },\n+  { \"nodirect_extern_access\", 0, 0, true, false, false, false,\n+    handle_nodirect_extern_access_attribute, NULL },\n \n   /* End element.  */\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }"}, {"sha": "b7e9aa75d25421063b53bac73fa236de1ac7e9ec", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -79,7 +79,7 @@ extern bool ix86_expand_cmpstrn_or_cmpmem (rtx, rtx, rtx, rtx, rtx, bool);\n extern bool constant_address_p (rtx);\n extern bool legitimate_pic_operand_p (rtx);\n extern bool legitimate_pic_address_disp_p (rtx);\n-extern bool ix86_force_load_from_GOT_p (rtx);\n+extern bool ix86_force_load_from_GOT_p (rtx, bool = false);\n extern void print_reg (rtx, int, FILE*);\n extern void ix86_print_operand (FILE *, rtx, int);\n \n@@ -401,3 +401,5 @@ extern rtl_opt_pass *make_pass_insert_endbr_and_patchable_area\n   (gcc::context *);\n extern rtl_opt_pass *make_pass_remove_partial_avx_dependency\n   (gcc::context *);\n+\n+extern bool ix86_has_no_direct_extern_access;"}, {"sha": "6b97a2b0e5026af1d7e3adb7768ce801a00bdf81", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 53, "deletions": 14, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -363,6 +363,9 @@ unsigned int ix86_default_incoming_stack_boundary;\n /* Alignment for incoming stack boundary in bits.  */\n unsigned int ix86_incoming_stack_boundary;\n \n+/* True if there is no direct access to extern symbols.  */\n+bool ix86_has_no_direct_extern_access;\n+\n /* Calling abi specific va_list type nodes.  */\n tree sysv_va_list_type_node;\n tree ms_va_list_type_node;\n@@ -10514,25 +10517,34 @@ darwin_local_data_pic (rtx disp)\n }\n \n /* True if the function symbol operand X should be loaded from GOT.\n+   If CALL_P is true, X is a call operand.\n+\n+   NB: -mno-direct-extern-access doesn't force load from GOT for\n+   call.\n \n    NB: In 32-bit mode, only non-PIC is allowed in inline assembly\n    statements, since a PIC register could not be available at the\n    call site.  */\n \n bool\n-ix86_force_load_from_GOT_p (rtx x)\n+ix86_force_load_from_GOT_p (rtx x, bool call_p)\n {\n   return ((TARGET_64BIT || (!flag_pic && HAVE_AS_IX86_GOT32X))\n \t  && !TARGET_PECOFF && !TARGET_MACHO\n \t  && (!flag_pic || this_is_asm_operands)\n \t  && ix86_cmodel != CM_LARGE\n \t  && ix86_cmodel != CM_LARGE_PIC\n \t  && GET_CODE (x) == SYMBOL_REF\n-\t  && SYMBOL_REF_FUNCTION_P (x)\n-\t  && (!flag_plt\n-\t      || (SYMBOL_REF_DECL (x)\n-\t\t  && lookup_attribute (\"noplt\",\n-\t\t\t\t       DECL_ATTRIBUTES (SYMBOL_REF_DECL (x)))))\n+\t  && ((!call_p\n+\t       && (!ix86_direct_extern_access\n+\t\t   || (SYMBOL_REF_DECL (x)\n+\t\t       && lookup_attribute (\"nodirect_extern_access\",\n+\t\t\t\t\t    DECL_ATTRIBUTES (SYMBOL_REF_DECL (x))))))\n+\t      || (SYMBOL_REF_FUNCTION_P (x)\n+\t\t  && (!flag_plt\n+\t\t      || (SYMBOL_REF_DECL (x)\n+\t\t\t  && lookup_attribute (\"noplt\",\n+\t\t\t\t\t       DECL_ATTRIBUTES (SYMBOL_REF_DECL (x)))))))\n \t  && !SYMBOL_REF_LOCAL_P (x));\n }\n \n@@ -10799,7 +10811,11 @@ legitimate_pic_address_disp_p (rtx disp)\n \t    }\n \t  else if (!SYMBOL_REF_FAR_ADDR_P (op0)\n \t\t   && (SYMBOL_REF_LOCAL_P (op0)\n-\t\t       || (HAVE_LD_PIE_COPYRELOC\n+\t\t       || ((ix86_direct_extern_access\n+\t\t\t    && !(SYMBOL_REF_DECL (op0)\n+\t\t\t\t && lookup_attribute (\"nodirect_extern_access\",\n+\t\t\t\t\t\t      DECL_ATTRIBUTES (SYMBOL_REF_DECL (op0)))))\n+\t\t\t   && HAVE_LD_PIE_COPYRELOC\n \t\t\t   && flag_pie\n \t\t\t   && !SYMBOL_REF_WEAK (op0)\n \t\t\t   && !SYMBOL_REF_FUNCTION_P (op0)))\n@@ -13755,7 +13771,7 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \n       if (code == 'P')\n \t{\n-\t  if (ix86_force_load_from_GOT_p (x))\n+\t  if (ix86_force_load_from_GOT_p (x, true))\n \t    {\n \t      /* For inline assembly statement, load function address\n \t\t from GOT with 'P' operand modifier to avoid PLT.  */\n@@ -22536,10 +22552,10 @@ int\n asm_preferred_eh_data_format (int code, int global)\n {\n   /* PE-COFF is effectively always -fPIC because of the .reloc section.  */\n-  if (flag_pic || TARGET_PECOFF)\n+  if (flag_pic || TARGET_PECOFF || !ix86_direct_extern_access)\n     {\n       int type = DW_EH_PE_sdata8;\n-      if (!TARGET_64BIT\n+      if (ptr_mode == SImode\n \t  || ix86_cmodel == CM_SMALL_PIC\n \t  || (ix86_cmodel == CM_MEDIUM_PIC && (global || code)))\n \ttype = DW_EH_PE_sdata4;\n@@ -23629,10 +23645,28 @@ ix86_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n static bool\n ix86_binds_local_p (const_tree exp)\n {\n-  return default_binds_local_p_3 (exp, flag_shlib != 0, true, true,\n-\t\t\t\t  (!flag_pic\n-\t\t\t\t   || (TARGET_64BIT\n-\t\t\t\t       && HAVE_LD_PIE_COPYRELOC != 0)));\n+  bool direct_extern_access\n+    = (ix86_direct_extern_access\n+       && !(VAR_OR_FUNCTION_DECL_P (exp)\n+\t    && lookup_attribute (\"nodirect_extern_access\",\n+\t\t\t\t DECL_ATTRIBUTES (exp))));\n+  if (!direct_extern_access)\n+    ix86_has_no_direct_extern_access = true;\n+  return default_binds_local_p_3 (exp, flag_shlib != 0, true,\n+\t\t\t\t  direct_extern_access,\n+\t\t\t\t  (direct_extern_access\n+\t\t\t\t   && (!flag_pic\n+\t\t\t\t       || (TARGET_64BIT\n+\t\t\t\t\t   && HAVE_LD_PIE_COPYRELOC != 0))));\n+}\n+\n+/* If flag_pic or ix86_direct_extern_access is false, then neither\n+   local nor global relocs should be placed in readonly memory.  */\n+\n+static int\n+ix86_reloc_rw_mask (void)\n+{\n+  return (flag_pic || !ix86_direct_extern_access) ? 3 : 0;\n }\n #endif\n \n@@ -24697,6 +24731,11 @@ ix86_libgcc_floating_mode_supported_p\n #undef TARGET_IFUNC_REF_LOCAL_OK\n #define TARGET_IFUNC_REF_LOCAL_OK hook_bool_void_true\n \n+#if !TARGET_MACHO && !TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+# undef TARGET_ASM_RELOC_RW_MASK\n+# define TARGET_ASM_RELOC_RW_MASK ix86_reloc_rw_mask\n+#endif\n+\n static bool ix86_libc_has_fast_function (int fcode ATTRIBUTE_UNUSED)\n {\n #ifdef OPTION_GLIBC"}, {"sha": "d8e8656a8ab85ae384570cd006d7150a89194fe6", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -1206,3 +1206,7 @@ Support MWAIT and MONITOR built-in functions and code generation.\n mavx512fp16\n Target Mask(ISA2_AVX512FP16) Var(ix86_isa_flags2) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512FP16 built-in functions and code generation.\n+\n+mdirect-extern-access\n+Target Var(ix86_direct_extern_access) Init(1)\n+Do not use GOT to access external symbols."}, {"sha": "0dc752e8aadd526f4b5f1c34be97d6af441f52f7", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -7220,6 +7220,12 @@ On x86 targets, the @code{fentry_section} attribute sets the name\n of the section to record function entry instrumentation calls in when\n enabled with @option{-pg -mrecord-mcount}\n \n+@item nodirect_extern_access\n+@cindex @code{nodirect_extern_access} function attribute\n+@opindex mno-direct-extern-access\n+This attribute, attached to a global variable or function, is the\n+counterpart to option @option{-mno-direct-extern-access}.\n+\n @end table\n \n @node Xstormy16 Function Attributes"}, {"sha": "b49ba22df89e49fd244bdc3695d2d29fdbbb90c3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -1437,7 +1437,7 @@ See RS/6000 and PowerPC Options.\n -mgeneral-regs-only  -mcall-ms2sysv-xlogues -mrelax-cmpxchg-loop @gol\n -mindirect-branch=@var{choice}  -mfunction-return=@var{choice} @gol\n -mindirect-branch-register -mharden-sls=@var{choice} @gol\n--mindirect-branch-cs-prefix -mneeded}\n+-mindirect-branch-cs-prefix -mneeded -mno-direct-extern-access}\n \n @emph{x86 Windows Options}\n @gccoptlist{-mconsole  -mcygwin  -mno-cygwin  -mdll @gol\n@@ -32809,6 +32809,19 @@ x32 environments.\n @opindex mneeded\n Emit GNU_PROPERTY_X86_ISA_1_NEEDED GNU property for Linux target to\n indicate the micro-architecture ISA level required to execute the binary.\n+\n+@item -mno-direct-extern-access\n+@opindex mno-direct-extern-access\n+@opindex mdirect-extern-access\n+Without @option{-fpic} nor @option{-fPIC}, always use the GOT pointer\n+to access external symbols.  With @option{-fpic} or @option{-fPIC},\n+treat access to protected symbols as local symbols.  The default is\n+@option{-mdirect-extern-access}.\n+\n+@strong{Warning:} shared libraries compiled with\n+@option{-mno-direct-extern-access} and executable compiled with\n+@option{-mdirect-extern-access} may not be binary compatible if\n+protected symbols are used in shared libraries and executable.\n @end table\n \n @node x86 Windows Options"}, {"sha": "6f8db37fb7c9c0a66bc57febc9c8330f6b4c7597", "filename": "gcc/testsuite/g++.target/i386/pr35513-1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr35513-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr35513-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr35513-1.C?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do run }\n+// { dg-options \"-O2 -mno-direct-extern-access\" }\n+\n+#include <iostream>\n+\n+class Bug\n+{\n+};\n+\n+int throw_bug()\n+{\n+  throw Bug();\n+\n+  return 0;\n+}\n+\n+int main()\n+{\n+  try {\n+      std::cout << throw_bug();\n+  } catch (Bug bug) {\n+  };\n+\n+  return 0;\n+}"}, {"sha": "9143ff3f0a5ac9911501785042134b56f880605d", "filename": "gcc/testsuite/g++.target/i386/pr35513-2.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr35513-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr35513-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr35513-2.C?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do run  }\n+// { dg-options \"-O2 -mno-direct-extern-access\" }\n+\n+class Foo \n+{\n+public:\n+  Foo(int n) : n_(n) { }\n+  int f() { return n_; }\n+\n+  int badTest();\n+  int goodTest();\n+\n+private:\n+\n+  int n_;\n+};\n+\n+int Foo::badTest()\n+{\n+  try {\n+      throw int(99);\n+  }\n+\n+  catch (int &i) {\n+      n_ = 16;\n+  }\n+\n+  return n_;\n+}\n+\n+\n+int Foo::goodTest()\n+{\n+  int\tn;\n+\n+  try {\n+      throw int(99);\n+  }\n+\n+  catch (int &i) {\n+      n = 16;\n+  }\n+\n+  return n_;\n+}\n+\n+int main() \n+{\n+  Foo foo(5);\n+  foo.goodTest();\n+  foo.badTest();\n+  return 0;\n+}"}, {"sha": "d7b5c98fa8cb76b0ec4cf27ca7cb7889dc4da4d4", "filename": "gcc/testsuite/gcc.target/i386/pr35513-10a.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-10a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-10a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-10a.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -mno-direct-extern-access\" } */\n+\n+/* Weak common symbol with -fpic.  */\n+__attribute__((weak, visibility(\"protected\")))\n+int xxx;\n+\n+int\n+foo ()\n+{\n+  return xxx;\n+}\n+\n+/* { dg-final { scan-assembler \"xxx\\\\(%rip\\\\)\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xxx@GOTOFF\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOT\\\\(\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "a40692e6e3d73ed194f5f527f3740d91144d4010", "filename": "gcc/testsuite/gcc.target/i386/pr35513-10b.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-10b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-10b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-10b.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -mdirect-extern-access\" } */\n+\n+/* Weak common symbol with -fpic.  */\n+__attribute__((weak, visibility(\"protected\"),nodirect_extern_access))\n+int xxx;\n+\n+int\n+foo ()\n+{\n+  return xxx;\n+}\n+\n+/* { dg-final { scan-assembler \"xxx\\\\(%rip\\\\)\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xxx@GOTOFF\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOT\\\\(\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "5489f1e5ceeae45aab94305e22a7426dfa6a9c0b", "filename": "gcc/testsuite/gcc.target/i386/pr35513-11a.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-11a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-11a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-11a.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -mno-direct-extern-access\" } */\n+\n+/* Initialized symbol with -fpic.  */\n+__attribute__((visibility(\"protected\")))\n+int xxx = -1;\n+\n+int\n+foo ()\n+{\n+  return xxx;\n+}\n+\n+/* { dg-final { scan-assembler \"xxx\\\\(%rip\\\\)\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xxx@GOTOFF\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOT\\\\(\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "2704900fed5eb472b6cb5d01f58b1fc1802abfbc", "filename": "gcc/testsuite/gcc.target/i386/pr35513-11b.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-11b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-11b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-11b.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -mdirect-extern-access\" } */\n+\n+/* Initialized symbol with -fpic.  */\n+__attribute__((visibility(\"protected\"), nodirect_extern_access))\n+int xxx = -1;\n+\n+int\n+foo ()\n+{\n+  return xxx;\n+}\n+\n+/* { dg-final { scan-assembler \"xxx\\\\(%rip\\\\)\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xxx@GOTOFF\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOT\\\\(\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "8b3123f9042ebd231ee420aca5e586d49e8cc443", "filename": "gcc/testsuite/gcc.target/i386/pr35513-12a.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-12a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-12a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-12a.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -mno-direct-extern-access\" } */\n+\n+/* Weak initialized symbol with -fpic.  */\n+__attribute__((weak, visibility(\"protected\")))\n+int xxx = -1;\n+\n+int\n+foo ()\n+{\n+  return xxx;\n+}\n+\n+/* { dg-final { scan-assembler \"xxx\\\\(%rip\\\\)\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xxx@GOTOFF\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOT\\\\(\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "a1b6b9e92dff56709d4d61c8836f695ef4d9c5d9", "filename": "gcc/testsuite/gcc.target/i386/pr35513-12b.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-12b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-12b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-12b.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -mdirect-extern-access\" } */\n+\n+/* Weak initialized symbol with -fpic.  */\n+__attribute__((weak, visibility(\"protected\"), nodirect_extern_access))\n+int xxx = -1;\n+\n+int\n+foo ()\n+{\n+  return xxx;\n+}\n+\n+/* { dg-final { scan-assembler \"xxx\\\\(%rip\\\\)\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xxx@GOTOFF\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOT\\\\(\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "972542423cbba12215976577413606bb7c7782e7", "filename": "gcc/testsuite/gcc.target/i386/pr35513-1a.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-1a.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fno-pic -mno-direct-extern-access\" } */\n+\n+extern void bar (void);\n+extern void *p;\n+\n+void\n+foo (void)\n+{\n+  p = &bar;\n+}\n+\n+/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]*bar@GOT,\" { target { ia32 && got32x_reloc } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ia32 && got32x_reloc } } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "54a579a9e37a33ee041dc38f8671c25b5949a274", "filename": "gcc/testsuite/gcc.target/i386/pr35513-1b.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-1b.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fno-pic -mdirect-extern-access\" } */\n+\n+extern void bar (void) __attribute__ ((nodirect_extern_access));\n+extern void *p;\n+\n+void\n+foo (void)\n+{\n+  p = &bar;\n+}\n+\n+/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]*bar@GOT,\" { target { ia32 && got32x_reloc } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ia32 && got32x_reloc } } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "74fa8fc9d977679fc2cb6d90eab39bc2ae7b97af", "filename": "gcc/testsuite/gcc.target/i386/pr35513-2a.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-2a.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fno-pic -mno-direct-extern-access\" } */\n+\n+extern int bar;\n+\n+int\n+foo (void)\n+{\n+  return bar;\n+}\n+\n+/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]*bar@GOT,\" { target { ia32 && got32x_reloc } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ia32 && got32x_reloc } } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "ae2edff8d9364a79c6c3809e22e7e756baba1d7c", "filename": "gcc/testsuite/gcc.target/i386/pr35513-2b.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-2b.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fno-pic -mdirect-extern-access\" } */\n+\n+extern int bar __attribute__ ((nodirect_extern_access));\n+\n+int\n+foo (void)\n+{\n+  return bar;\n+}\n+\n+/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]*bar@GOT,\" { target { ia32 && got32x_reloc } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ia32 && got32x_reloc } } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "4ca4332c4ab0f90a69333966e901afc5d86390d2", "filename": "gcc/testsuite/gcc.target/i386/pr35513-3a.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-3a.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpie -mno-direct-extern-access\" } */\n+\n+extern int bar;\n+\n+int\n+foo (void)\n+{\n+  return bar;\n+}\n+\n+/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]*bar@GOT\" { target { ia32 && got32x_reloc } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ia32 && got32x_reloc } } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "c3888039834af6a58f0363f5054f209d08eab86f", "filename": "gcc/testsuite/gcc.target/i386/pr35513-3b.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-3b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-3b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-3b.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpie -mdirect-extern-access\" } */\n+\n+extern int bar __attribute__ ((nodirect_extern_access));\n+\n+int\n+foo (void)\n+{\n+  return bar;\n+}\n+\n+/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"movl\\[ \\t\\]*bar@GOT\" { target { ia32 && got32x_reloc } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" { target { ia32 && got32x_reloc } } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "9c3a199404c126627da18f52a1773338630a0b99", "filename": "gcc/testsuite/gcc.target/i386/pr35513-4a.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-4a.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fplt -fno-pic -mno-direct-extern-access\" } */\n+\n+extern void foo (void);\n+\n+int\n+bar (void)\n+{\n+  foo ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*foo\" } } */\n+/* { dg-final { scan-assembler-not \"foo@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"foo@GOT\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "e1a50784bf989ea98371450b935349ba85c87753", "filename": "gcc/testsuite/gcc.target/i386/pr35513-4b.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-4b.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fplt -fno-pic -mdirect-extern-access\" } */\n+\n+extern void foo (void) __attribute__ ((nodirect_extern_access));\n+\n+int\n+bar (void)\n+{\n+  foo ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*foo\" } } */\n+/* { dg-final { scan-assembler-not \"foo@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"foo@GOT\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "4d2e1732838f9af47bb0719ba31e2b7115184cb7", "filename": "gcc/testsuite/gcc.target/i386/pr35513-5a.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-5a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-5a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-5a.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fplt -fpic -mno-direct-extern-access\" } */\n+\n+extern void foo (void);\n+\n+int\n+bar (void)\n+{\n+  foo ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*foo@PLT\" } } */\n+/* { dg-final { scan-assembler-not \"foo@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"foo@GOT\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "81e98ed7836e96bb0eaeb776db46435a23f045db", "filename": "gcc/testsuite/gcc.target/i386/pr35513-5b.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-5b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-5b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-5b.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fplt -fpic -mdirect-extern-access\" } */\n+\n+extern void foo (void) __attribute__ ((nodirect_extern_access));\n+\n+int\n+bar (void)\n+{\n+  foo ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*foo@PLT\" } } */\n+/* { dg-final { scan-assembler-not \"foo@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"foo@GOT\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "ece878e3c3a8227b9543ba7f71503717a5e3a0c3", "filename": "gcc/testsuite/gcc.target/i386/pr35513-6a.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-6a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-6a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-6a.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fplt -fno-pic -mno-direct-extern-access\" } */\n+\n+extern void foo (void);\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*foo\" } } */\n+/* { dg-final { scan-assembler-not \"foo@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"foo@GOT\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "3f679defdabd348e07b5bfa4bf19975a37cb9e43", "filename": "gcc/testsuite/gcc.target/i386/pr35513-6b.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-6b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-6b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-6b.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fplt -fno-pic -mdirect-extern-access\" } */\n+\n+extern void foo (void) __attribute__ ((nodirect_extern_access));\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*foo\" } } */\n+/* { dg-final { scan-assembler-not \"foo@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"foo@GOT\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "1de014d39c2e1d079a07d53132812d0d74bc2bd5", "filename": "gcc/testsuite/gcc.target/i386/pr35513-7a.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-7a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-7a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-7a.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fplt -fpic -mno-direct-extern-access\" } */\n+\n+extern void foo (void);\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*foo@PLT\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*foo@PLT\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"foo@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"foo@GOT\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "984e2dc275219ee84191ac19709661c86a9d6ef0", "filename": "gcc/testsuite/gcc.target/i386/pr35513-7b.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-7b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-7b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-7b.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fplt -fpic -mdirect-extern-access\" } */\n+\n+extern void foo (void) __attribute__ ((nodirect_extern_access));\n+\n+void\n+bar (void)\n+{\n+  foo ();\n+}\n+\n+/* { dg-final { scan-assembler \"jmp\\[ \\t\\]*foo@PLT\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"call\\[ \\t\\]*foo@PLT\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"foo@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"foo@GOT\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "7ba67de215629010487c612db15ecb2b281732c8", "filename": "gcc/testsuite/gcc.target/i386/pr35513-8.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-8.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do assemble { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-require-effective-target maybe_x32 } */\n+/* { dg-options \"-mx32 -O2 -fno-pic -fexceptions -fasynchronous-unwind-tables -mno-direct-extern-access\" } */\n+\n+extern int foo (int);\n+extern void exit (int __status) __attribute__ ((__nothrow__ )) __attribute__ ((__noreturn__));\n+struct __pthread_cleanup_frame\n+{\n+  void (*__cancel_routine) (void *);\n+  void *__cancel_arg;\n+  int __do_it;\n+  int __cancel_type;\n+};\n+extern __inline void\n+__pthread_cleanup_routine (struct __pthread_cleanup_frame *__frame)\n+{\n+  if (__frame->__do_it)\n+    __frame->__cancel_routine (__frame->__cancel_arg);\n+}\n+static int cl_called;\n+\n+static void\n+cl (void *arg)\n+{\n+  ++cl_called;\n+}\n+\n+\n+void *\n+tf_usleep (void *arg)\n+{\n+\n+  do { struct __pthread_cleanup_frame __clframe __attribute__ ((__cleanup__ (__pthread_cleanup_routine))) = { .__cancel_routine = (cl), .__cancel_arg = (\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ((void *)0)), .__do_it = 1 };;\n+\n+    foo (arg == ((void *)0) ? (0x7fffffffL * 2UL + 1UL) : 0);\n+\n+    __clframe.__do_it = (0); } while (0);\n+\n+  exit (1);\n+}\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "533f1d2ddb4f9cf7beb31101f0d6db44696154ae", "filename": "gcc/testsuite/gcc.target/i386/pr35513-9a.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-9a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-9a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-9a.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -mno-direct-extern-access\" } */\n+\n+/* Common symbol with -fpic.  */\n+__attribute__((visibility(\"protected\")))\n+int xxx;\n+\n+int\n+foo ()\n+{\n+  return xxx;\n+}\n+\n+/* { dg-final { scan-assembler \"xxx\\\\(%rip\\\\)\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xxx@GOTOFF\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOT\\\\(\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}, {"sha": "b6c66f43b40d176d05caaf09701c00a65fe8f90e", "filename": "gcc/testsuite/gcc.target/i386/pr35513-9b.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-9b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab0b5fbfe90168d2e470aefb19e0cf31526290bc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-9b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr35513-9b.c?ref=ab0b5fbfe90168d2e470aefb19e0cf31526290bc", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic -mdirect-extern-access\" } */\n+\n+/* Common symbol with -fpic.  */\n+__attribute__((visibility(\"protected\"), nodirect_extern_access))\n+int xxx;\n+\n+int\n+foo ()\n+{\n+  return xxx;\n+}\n+\n+/* { dg-final { scan-assembler \"xxx\\\\(%rip\\\\)\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xxx@GOTOFF\" { target ia32 } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOT\\\\(\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"\\.section\\[ \\t]+.note.gnu.property,\" } } */\n+/* { dg-final { scan-assembler \"\\.long\\[ \\t]+0xb0008000\" } } */\n+"}]}