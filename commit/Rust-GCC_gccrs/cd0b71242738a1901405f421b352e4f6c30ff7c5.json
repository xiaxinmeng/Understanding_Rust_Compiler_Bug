{"sha": "cd0b71242738a1901405f421b352e4f6c30ff7c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QwYjcxMjQyNzM4YTE5MDE0MDVmNDIxYjM1MmU0ZjZjMzBmZjdjNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-17T20:21:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-17T20:21:16Z"}, "message": "c++: Fix parsing of invalid enum specifiers [PR90995]\n\nThe testcase shows some accepts-invalid (the ones without alignas) and\nice-on-invalid-code (the ones with alignas) cases.\nIf the enum doesn't have an underlying type and is not a definition,\nthe caller retries to parse it as elaborated type specifier.\nE.g. for enum struct S s it will then pedwarn that elaborated type specifier\nshouldn't have the struct/class keywords.\nThe problem is if the enum specifier is not followed by { when it has\nunderlying type.  In that case we have already called\ncp_parser_parse_definitely to end the tentative parsing started at the\nbeginning of cp_parser_enum_specifier.  But the\ncp_parser_error (parser, \"expected %<;%> or %<{%>\");\ndoesn't emit any error because the whole function is called from yet another\ntentative parse and the caller starts parsing the elaborated type\nspecifier where the cp_parser_enum_specifier stopped (i.e. after the\nunderlying type token(s)).  The ultimate caller than commits the tentative\nparsing (and even if it wouldn't, it wouldn't know what kind of error\nto report).  I think after seeing enum {,struct,class} : type not being\nfollowed by { or ;, there is no reason not to report it right away, as it\ncan't be valid C++, which is what the patch does.  Not sure if we shouldn't\nalso return error_mark_node instead of NULL_TREE, so that the caller doesn't\ntry to parse it as elaborated type specifier (the patch doesn't do that\nright now).\n\nFurthermore, while reading the code, I've noticed that\nparser->colon_corrects_to_scope_p is saved and set to false at the start\nof the function, but not restored back in some cases.  Don't have a testcase\nwhere this would be a problem, but it just seems wrong.  Either we can in\nthe two spots replace return NULL_TREE; with { type = NULL_TREE; goto out; }\nor we could perhaps abuse warning_sentinel or create a special class with\ndtor to clean the flag up.\n\nAnd lastly, I've fixed some formatting issues in the function while reading\nit.\n\n2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/90995\n\t* parser.c (cp_parser_enum_specifier): Use temp_override for\n\tparser->colon_corrects_to_scope_p, replace goto out with return.\n\tIf scoped enum or enum with underlying type is not followed by\n\t{ or ;, call cp_parser_commit_to_tentative_parse before calling\n\tcp_parser_error and make sure to return error_mark_node instead of\n\tNULL_TREE.  Formatting fixes.\n\n\t* g++.dg/cpp0x/enum40.C: New test.", "tree": {"sha": "186fb6ceaa448d9aebb7d74359ce993dd9da5c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/186fb6ceaa448d9aebb7d74359ce993dd9da5c77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd0b71242738a1901405f421b352e4f6c30ff7c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0b71242738a1901405f421b352e4f6c30ff7c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd0b71242738a1901405f421b352e4f6c30ff7c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd0b71242738a1901405f421b352e4f6c30ff7c5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a703f0726b3bb6c5ac8b600369106985906590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a703f0726b3bb6c5ac8b600369106985906590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a703f0726b3bb6c5ac8b600369106985906590"}], "stats": {"total": 93, "additions": 62, "deletions": 31}, "files": [{"sha": "1db1e090e51a004365f79cffdea0e552ce006249", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0b71242738a1901405f421b352e4f6c30ff7c5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0b71242738a1901405f421b352e4f6c30ff7c5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cd0b71242738a1901405f421b352e4f6c30ff7c5", "patch": "@@ -1,3 +1,13 @@\n+2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/90995\n+\t* parser.c (cp_parser_enum_specifier): Use temp_override for\n+\tparser->colon_corrects_to_scope_p, replace goto out with return.\n+\tIf scoped enum or enum with underlying type is not followed by\n+\t{ or ;, call cp_parser_commit_to_tentative_parse before calling\n+\tcp_parser_error and make sure to return error_mark_node instead of\n+\tNULL_TREE.  Formatting fixes.\n+\n 2020-03-17  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR c++/94197"}, {"sha": "26e023666455378f7e17a026cb330228803ea38d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 21, "deletions": 31, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0b71242738a1901405f421b352e4f6c30ff7c5/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0b71242738a1901405f421b352e4f6c30ff7c5/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=cd0b71242738a1901405f421b352e4f6c30ff7c5", "patch": "@@ -19001,9 +19001,7 @@ cp_parser_enum_specifier (cp_parser* parser)\n   bool is_unnamed = false;\n   tree underlying_type = NULL_TREE;\n   cp_token *type_start_token = NULL;\n-  bool saved_colon_corrects_to_scope_p = parser->colon_corrects_to_scope_p;\n-\n-  parser->colon_corrects_to_scope_p = false;\n+  temp_override<bool> cleanup (parser->colon_corrects_to_scope_p, false);\n \n   /* Parse tentatively so that we can back up if we don't find a\n      enum-specifier.  */\n@@ -19043,24 +19041,24 @@ cp_parser_enum_specifier (cp_parser* parser)\n \n   push_deferring_access_checks (dk_no_check);\n   nested_name_specifier\n-      = cp_parser_nested_name_specifier_opt (parser,\n-\t\t\t\t\t     /*typename_keyword_p=*/true,\n-\t\t\t\t\t     /*check_dependency_p=*/false,\n-\t\t\t\t\t     /*type_p=*/false,\n-\t\t\t\t\t     /*is_declaration=*/false);\n+    = cp_parser_nested_name_specifier_opt (parser,\n+\t\t\t\t\t   /*typename_keyword_p=*/true,\n+\t\t\t\t\t   /*check_dependency_p=*/false,\n+\t\t\t\t\t   /*type_p=*/false,\n+\t\t\t\t\t   /*is_declaration=*/false);\n \n   if (nested_name_specifier)\n     {\n       tree name;\n \n       identifier = cp_parser_identifier (parser);\n-      name =  cp_parser_lookup_name (parser, identifier,\n-\t\t\t\t     enum_type,\n-\t\t\t\t     /*is_template=*/false,\n-\t\t\t\t     /*is_namespace=*/false,\n-\t\t\t\t     /*check_dependency=*/true,\n-\t\t\t\t     /*ambiguous_decls=*/NULL,\n-\t\t\t\t     input_location);\n+      name = cp_parser_lookup_name (parser, identifier,\n+\t\t\t\t    enum_type,\n+\t\t\t\t    /*is_template=*/false,\n+\t\t\t\t    /*is_namespace=*/false,\n+\t\t\t\t    /*check_dependency=*/true,\n+\t\t\t\t    /*ambiguous_decls=*/NULL,\n+\t\t\t\t    input_location);\n       if (name && name != error_mark_node)\n \t{\n \t  type = TREE_TYPE (name);\n@@ -19140,23 +19138,21 @@ cp_parser_enum_specifier (cp_parser* parser)\n     {\n       if (cxx_dialect < cxx11 || (!scoped_enum_p && !underlying_type))\n \t{\n+\t  if (has_underlying_type)\n+\t    cp_parser_commit_to_tentative_parse (parser);\n \t  cp_parser_error (parser, \"expected %<{%>\");\n \t  if (has_underlying_type)\n-\t    {\n-\t      type = NULL_TREE;\n-\t      goto out;\n-\t    }\n+\t    return error_mark_node;\n \t}\n       /* An opaque-enum-specifier must have a ';' here.  */\n       if ((scoped_enum_p || underlying_type)\n \t  && cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))\n \t{\n+\t  if (has_underlying_type)\n+\t    cp_parser_commit_to_tentative_parse (parser);\n \t  cp_parser_error (parser, \"expected %<;%> or %<{%>\");\n \t  if (has_underlying_type)\n-\t    {\n-\t      type = NULL_TREE;\n-\t      goto out;\n-\t    }\n+\t    return error_mark_node;\n \t}\n     }\n \n@@ -19172,9 +19168,7 @@ cp_parser_enum_specifier (cp_parser* parser)\n \t  push_scope (nested_name_specifier);\n \t}\n       else if (TREE_CODE (nested_name_specifier) == NAMESPACE_DECL)\n-\t{\n-\t  push_nested_namespace (nested_name_specifier);\n-\t}\n+\tpush_nested_namespace (nested_name_specifier);\n     }\n \n   /* Issue an error message if type-definitions are forbidden here.  */\n@@ -19334,12 +19328,8 @@ cp_parser_enum_specifier (cp_parser* parser)\n \t  pop_scope (nested_name_specifier);\n \t}\n       else if (TREE_CODE (nested_name_specifier) == NAMESPACE_DECL)\n-\t{\n-\t  pop_nested_namespace (nested_name_specifier);\n-\t}\n+\tpop_nested_namespace (nested_name_specifier);\n     }\n- out:\n-  parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;\n   return type;\n }\n "}, {"sha": "45fb82941cc8cf5edce1ef2ada51186021749c82", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0b71242738a1901405f421b352e4f6c30ff7c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0b71242738a1901405f421b352e4f6c30ff7c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cd0b71242738a1901405f421b352e4f6c30ff7c5", "patch": "@@ -1,3 +1,8 @@\n+2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/90995\n+\t* g++.dg/cpp0x/enum40.C: New test.\n+\n 2020-03-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/bfcvt-nosimd.c: Skip for"}, {"sha": "cfdf2a4a18a5fe94add617e73288518262252ea8", "filename": "gcc/testsuite/g++.dg/cpp0x/enum40.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd0b71242738a1901405f421b352e4f6c30ff7c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd0b71242738a1901405f421b352e4f6c30ff7c5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum40.C?ref=cd0b71242738a1901405f421b352e4f6c30ff7c5", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/90995\n+// { dg-do compile { target c++11 } }\n+\n+void\n+foo ()\n+{\n+  enum : int a alignas;\t\t// { dg-error \"expected\" }\n+}\n+\n+void\n+bar ()\n+{\n+  enum : int a;\t\t\t// { dg-error \"expected\" }\n+}\n+\n+void\n+baz ()\n+{\n+  enum class a : int b alignas;\t// { dg-error \"expected\" }\n+}\n+\n+void\n+qux ()\n+{\n+  enum class a : int b;\t\t// { dg-error \"expected\" }\n+}"}]}