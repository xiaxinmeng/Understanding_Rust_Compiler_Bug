{"sha": "71197a5d13d0b540a9b5efe7ae2512d76386e9d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzExOTdhNWQxM2QwYjU0MGE5YjVlZmU3YWUyNTEyZDc2Mzg2ZTlkMQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-08-09T22:14:58Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-08-09T22:14:58Z"}, "message": "middle-end: Correct calculation of mul_widen_cost and mul_highpart_cost.\n\nThis patch fixes a subtle bug in the depths of GCC's synth_mult,\nwhere the middle-end queries whether (how well) the target supports\nwidening and highpart multiplications by calling targetm.rtx_costs.\nThe code in init_expmed and init_expmed_one_mode iterates over various\nRTL patterns querying the cost of each.  To avoid generating & garbage\ncollecting too much junk, it reuses the same RTL over and over, but\nadjusting the modes between each call.\n\nAlas this reuse of state is a little fragile, and at some point a\nchange to init_expmed_one_conv has resulted in the state (mode of\na register) being changed, but not reset before being used again.\n\nUsing the old software engineering/defensive programming maxim of\n\"why fix a bug just once, if it can be fixed in multiple places\",\nthis patch both restores the original value in init_expmed_one_conv,\nand also sets it to the expected value in init_expmed_one_mode.\nThis should hopefully signal the need to be careful of invariants for\nanyone modifying this code in future.\n\n2020-08-09  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* expmed.c (init_expmed_one_conv): Restore all->reg's mode.\n\t(init_expmed_one_mode): Set all->reg to desired mode.\n\ngcc/testsuite/ChangeLog\n\tPR target/71321\n\t* gcc.target/i386/pr71321.c: Check that the code doesn't use\n\tthe 4B zero displacement lea, not that it uses lea.", "tree": {"sha": "b6842e0d0dbd0d46b8586d39da37c8cbe096a7c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6842e0d0dbd0d46b8586d39da37c8cbe096a7c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71197a5d13d0b540a9b5efe7ae2512d76386e9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71197a5d13d0b540a9b5efe7ae2512d76386e9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71197a5d13d0b540a9b5efe7ae2512d76386e9d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71197a5d13d0b540a9b5efe7ae2512d76386e9d1/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94d4f4387de8264ee289cf71f692d59ca6ac36f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94d4f4387de8264ee289cf71f692d59ca6ac36f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94d4f4387de8264ee289cf71f692d59ca6ac36f8"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "d34f0fb0b5445b4e2edc303e5e22f87fb2e4bf91", "filename": "gcc/expmed.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71197a5d13d0b540a9b5efe7ae2512d76386e9d1/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71197a5d13d0b540a9b5efe7ae2512d76386e9d1/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=71197a5d13d0b540a9b5efe7ae2512d76386e9d1", "patch": "@@ -155,6 +155,8 @@ init_expmed_one_conv (struct init_expmed_rtl *all, scalar_int_mode to_mode,\n   PUT_MODE (all->reg, from_mode);\n   set_convert_cost (to_mode, from_mode, speed,\n \t\t    set_src_cost (which, to_mode, speed));\n+  /* Restore all->reg's mode.  */\n+  PUT_MODE (all->reg, to_mode);\n }\n \n static void\n@@ -229,6 +231,7 @@ init_expmed_one_mode (struct init_expmed_rtl *all,\n       if (GET_MODE_CLASS (int_mode_to) == MODE_INT\n \t  && GET_MODE_WIDER_MODE (int_mode_to).exists (&wider_mode))\n \t{\n+\t  PUT_MODE (all->reg, mode);\n \t  PUT_MODE (all->zext, wider_mode);\n \t  PUT_MODE (all->wide_mult, wider_mode);\n \t  PUT_MODE (all->wide_lshr, wider_mode);"}, {"sha": "24d144b281261dfed1630438e4f0cbc9a00a3404", "filename": "gcc/testsuite/gcc.target/i386/pr71321.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71197a5d13d0b540a9b5efe7ae2512d76386e9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71321.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71197a5d13d0b540a9b5efe7ae2512d76386e9d1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71321.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr71321.c?ref=71197a5d13d0b540a9b5efe7ae2512d76386e9d1", "patch": "@@ -12,5 +12,4 @@ unsigned cvt_to_2digit_ascii(uint8_t i)\n {\n   return cvt_to_2digit(i, 10) + 0x0a3030;\n }\n-/* { dg-final { scan-assembler-times \"lea.\\t\\\\(%\\[0-9a-z\\]+,%\\[0-9a-z\\]+,4\" 3 } } */\n-/* { dg-final { scan-assembler-times \"lea.\\t\\\\(%\\[0-9a-z\\]+,%\\[0-9a-z\\]+,8\" 1 } } */\n+/* { dg-final { scan-assembler-not \"lea.*0\" } } */"}]}