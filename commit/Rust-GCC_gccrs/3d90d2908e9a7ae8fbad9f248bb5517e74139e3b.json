{"sha": "3d90d2908e9a7ae8fbad9f248bb5517e74139e3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q5MGQyOTA4ZTlhN2FlOGZiYWQ5ZjI0OGJiNTUxN2U3NDEzOWUzYg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-04T20:15:00Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-04T20:15:00Z"}, "message": "Makefile.in (c-lex.o): Update.\n\n\t* Makefile.in (c-lex.o): Update.\n\t* c-lex.c: Include target.h.\n\t(cb_register_builtins): New.\n\t(init_c_lex): Set builtins callback.\n\t* c-lex.h (cpp_define, cpp_assert): New prototypes.\n\t* cppinit.c (init_builtins): Use callback, including for\n\tGXX_WEAK.\n\t* cpplib.h (struct cpp_callbacks): New member.\n\t* target-def.h (TARGET_REGISTER_CPP_BUILTINS): New.\n\t(TARGET_INITIALIZER): Update.\n\t* target.h (struct gcc_target): New hook.\n\t* tree.c (default_register_cpp_builtins): New.\n\t* tree.h (default_register_cpp_builtins): New.\ndoc:\n\t* tm.texi (TARGET_REGISTER_CPP_BUILTINS): Document.\n\nFrom-SVN: r53165", "tree": {"sha": "a2449890a6a273739539cb635907054553cde2bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2449890a6a273739539cb635907054553cde2bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/comments", "author": null, "committer": null, "parents": [{"sha": "625458d0b97e2665f53f56832778214e7e7ae6b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625458d0b97e2665f53f56832778214e7e7ae6b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/625458d0b97e2665f53f56832778214e7e7ae6b6"}], "stats": {"total": 87, "additions": 79, "deletions": 8}, "files": [{"sha": "98117b19c257b8cd2e14d88576697d67140986ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d90d2908e9a7ae8fbad9f248bb5517e74139e3b", "patch": "@@ -1,3 +1,21 @@\n+2002-05-04  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in (c-lex.o): Update.\n+\t* c-lex.c: Include target.h.\n+\t(cb_register_builtins): New.\n+\t(init_c_lex): Set builtins callback.\n+\t* c-lex.h (cpp_define, cpp_assert): New prototypes.\n+\t* cppinit.c (init_builtins): Use callback, including for\n+\tGXX_WEAK.\n+\t* cpplib.h (struct cpp_callbacks): New member.\n+\t* target-def.h (TARGET_REGISTER_CPP_BUILTINS): New.\n+\t(TARGET_INITIALIZER): Update.\n+\t* target.h (struct gcc_target): New hook.\n+\t* tree.c (default_register_cpp_builtins): New.\n+\t* tree.h (default_register_cpp_builtins): New.\n+doc:\n+\t* tm.texi (TARGET_REGISTER_CPP_BUILTINS): Document.\n+\n 2002-05-04  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cppinit.c (MAX_WCHAR_TYPE_SIZE): Move to cpplib.h"}, {"sha": "068add3f977fcd8392057098b3a4aac5d5834a94", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3d90d2908e9a7ae8fbad9f248bb5517e74139e3b", "patch": "@@ -1157,7 +1157,7 @@ c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     langhooks.h langhooks-def.h c-common.h\n c-lex.o : c-lex.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) c-lex.h \\\n-    debug.h $(C_TREE_H) c-common.h \\\n+    debug.h $(C_TREE_H) c-common.h $(TARGET_H) \\\n     c-pragma.h input.h intl.h flags.h toplev.h output.h \\\n     mbchar.h $(CPPLIB_H) $(EXPR_H) $(TM_P_H)\n c-objc-common.o : c-objc-common.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\"}, {"sha": "9679b607f973a584785eb529dccb1b92597d8a5e", "filename": "gcc/c-lex.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=3d90d2908e9a7ae8fbad9f248bb5517e74139e3b", "patch": "@@ -39,6 +39,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm_p.h\"\n #include \"splay-tree.h\"\n #include \"debug.h\"\n+#include \"target.h\"\n \n #ifdef MULTIBYTE_CHARS\n #include \"mbchar.h\"\n@@ -80,6 +81,7 @@ static tree lex_string\t\tPARAMS ((const unsigned char *, unsigned int,\n static tree lex_charconst\tPARAMS ((const cpp_token *));\n static void update_header_times\tPARAMS ((const char *));\n static int dump_one_header\tPARAMS ((splay_tree_node, void *));\n+static void cb_register_builtins PARAMS ((cpp_reader *));\n static void cb_line_change     PARAMS ((cpp_reader *, const cpp_token *, int));\n static void cb_ident\t\tPARAMS ((cpp_reader *, unsigned int,\n \t\t\t\t\t const cpp_string *));\n@@ -121,6 +123,7 @@ init_c_lex (filename)\n   cb->ident = cb_ident;\n   cb->file_change = cb_file_change;\n   cb->def_pragma = cb_def_pragma;\n+  cb->register_builtins = cb_register_builtins;\n \n   /* Set the debug callbacks if we can use them.  */\n   if (debug_info_level == DINFO_LEVEL_VERBOSE\n@@ -225,6 +228,22 @@ dump_time_statistics ()\n   splay_tree_foreach (file_info_tree, dump_one_header, 0);\n }\n \n+/* Register preprocessor built-ins.  */\n+static void\n+cb_register_builtins (pfile)\n+     cpp_reader *pfile;\n+{\n+  if (c_language == clk_cplusplus)\n+    {\n+      if (SUPPORTS_ONE_ONLY)\n+\tcpp_define (pfile, \"__GXX_WEAK__\");\n+      else\n+\tcpp_define (pfile, \"__GXX_WEAK__=0\");\n+    }\n+\n+  (*targetm.register_cpp_builtins) (pfile);\n+}\n+\n /* Not yet handled: #pragma, #define, #undef.\n    No need to deal with linemarkers under normal conditions.  */\n "}, {"sha": "7821ab90ee134178e06ef45b797a4cdecfc0edc8", "filename": "gcc/c-lex.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Fc-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Fc-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.h?ref=3d90d2908e9a7ae8fbad9f248bb5517e74139e3b", "patch": "@@ -34,5 +34,9 @@ extern int indent_level;\n \n struct cpp_reader;\n extern struct cpp_reader* parse_in;\n+/* Copied from cpplib.h to avoid target code having to pull in all of\n+   cpplib.h.  */\n+extern void cpp_define PARAMS ((struct cpp_reader *, const char *));\n+extern void cpp_assert PARAMS ((struct cpp_reader *, const char *));\n \n #endif /* ! GCC_C_LEX_H */"}, {"sha": "9e7241a4ea313b2e8923cee019a85fd44328acec", "filename": "gcc/cppinit.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=3d90d2908e9a7ae8fbad9f248bb5517e74139e3b", "patch": "@@ -769,13 +769,8 @@ init_builtins (pfile)\n     }\n \n   if (CPP_OPTION (pfile, cplusplus))\n-    {\n-      _cpp_define_builtin (pfile, \"__cplusplus 1\");\n-      if (SUPPORTS_ONE_ONLY)\n-\t_cpp_define_builtin (pfile, \"__GXX_WEAK__ 1\");\n-      else\n-\t_cpp_define_builtin (pfile, \"__GXX_WEAK__ 0\");\n-    }\n+    _cpp_define_builtin (pfile, \"__cplusplus 1\");\n+\n   if (CPP_OPTION (pfile, objc))\n     _cpp_define_builtin (pfile, \"__OBJC__ 1\");\n \n@@ -793,6 +788,9 @@ init_builtins (pfile)\n     _cpp_define_builtin (pfile, \"__STRICT_ANSI__ 1\");\n   else if (CPP_OPTION (pfile, lang) == CLK_ASM)\n     _cpp_define_builtin (pfile, \"__ASSEMBLER__ 1\");\n+\n+  if (pfile->cb.register_builtins)\n+    (*pfile->cb.register_builtins) (pfile);\n }\n #undef BUILTIN\n #undef OPERATOR"}, {"sha": "72f4884e41999670a39319e4942ffa543fc1fb68", "filename": "gcc/cpplib.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=3d90d2908e9a7ae8fbad9f248bb5517e74139e3b", "patch": "@@ -406,6 +406,9 @@ struct cpp_callbacks\n   void (*undef) PARAMS ((cpp_reader *, unsigned int, cpp_hashnode *));\n   void (*ident) PARAMS ((cpp_reader *, unsigned int, const cpp_string *));\n   void (*def_pragma) PARAMS ((cpp_reader *, unsigned int));\n+  /* Called when the client has a chance to properly register\n+     built-ins with cpp_define() and cpp_assert().  */\n+  void (*register_builtins) PARAMS ((cpp_reader *));\n };\n \n #define CPP_FATAL_LIMIT 1000\n@@ -557,6 +560,8 @@ extern cppchar_t\n cpp_interpret_charconst PARAMS ((cpp_reader *, const cpp_token *,\n \t\t\t\t int, unsigned int *, int *));\n \n+/* Used to register builtins during the register_builtins callback.\n+   The text is the same as the command line argument.  */\n extern void cpp_define PARAMS ((cpp_reader *, const char *));\n extern void cpp_assert PARAMS ((cpp_reader *, const char *));\n extern void cpp_undef  PARAMS ((cpp_reader *, const char *));"}, {"sha": "c41c0984b2c45c5b904e4c21c4f65b7173c0653f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3d90d2908e9a7ae8fbad9f248bb5517e74139e3b", "patch": "@@ -622,6 +622,18 @@ The macro @code{STANDARD_STARTFILE_PREFIX}.\n @c prevent bad page break with this line\n Here are run-time target specifications.\n \n+@deftypefn {Target Hook} void TARGET_REGISTER_CPP_BUILTINS (cpp_reader *@var{pfile})\n+This macro expands to a target-specific function, called by the C\n+family of front ends, that allows you to define preprocessor built-in\n+macros and assertions at run-time.\n+\n+Pass the argument (a preprocessor handle) as the first argument to the\n+functions @code{cpp_define} and @code{cpp_assert}, declared in\n+@file{c-lex.h}.  The second argument is the same as the argument to\n+the respective command-line option, for example @code{__mips__} for\n+@code{cpp_define}, and @code{cpu=mips} for @code{cpp_assert}.\n+@end deftypefn\n+\n @table @code\n @findex CPP_PREDEFINES\n @item CPP_PREDEFINES"}, {"sha": "c419441976ab11e7db6b4818262370f2c26b25a7", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=3d90d2908e9a7ae8fbad9f248bb5517e74139e3b", "patch": "@@ -179,6 +179,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES default_set_default_type_attributes\n #define TARGET_INSERT_ATTRIBUTES default_insert_attributes\n #define TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P default_function_attribute_inlinable_p\n+#define TARGET_REGISTER_CPP_BUILTINS default_register_cpp_builtins\n #define TARGET_MS_BITFIELD_LAYOUT_P default_ms_bitfield_layout_p\n \n /* In builtins.c.  */\n@@ -205,6 +206,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_SET_DEFAULT_TYPE_ATTRIBUTES,\t\t\\\n   TARGET_INSERT_ATTRIBUTES,\t\t\t\\\n   TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P,\t\\\n+  TARGET_REGISTER_CPP_BUILTINS,\t\t\t\\\n   TARGET_MS_BITFIELD_LAYOUT_P,\t\t\t\\\n   TARGET_INIT_BUILTINS,\t\t\t\t\\\n   TARGET_EXPAND_BUILTIN,\t\t\t\\"}, {"sha": "a21c5126b79dbee0e863e8526b9ee268586fed99", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=3d90d2908e9a7ae8fbad9f248bb5517e74139e3b", "patch": "@@ -44,6 +44,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n    to gradually reduce the amount of conditional compilation that is\n    scattered throughout GCC.  */\n \n+struct cpp_reader;\n+\n struct gcc_target\n {\n   /* Functions that output assembler for the target.  */\n@@ -198,6 +200,8 @@ struct gcc_target\n      can be inlined despite its machine attributes, false otherwise.  */\n   bool (* function_attribute_inlinable_p) PARAMS ((tree fndecl));\n \n+  void (* register_cpp_builtins) PARAMS ((struct cpp_reader *));\n+\n   /* Return true if bitfields in RECORD_TYPE should follow the\n      Microsoft Visual C++ bitfield layout rules.  */\n   bool (* ms_bitfield_layout_p) PARAMS ((tree record_type));"}, {"sha": "aaef9737db6057b5611174e2fb2a2d368abf7c14", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3d90d2908e9a7ae8fbad9f248bb5517e74139e3b", "patch": "@@ -2543,6 +2543,13 @@ build_type_attribute_variant (ttype, attribute)\n   return ttype;\n }\n \n+/* Default registration of target-specific CPP built-ins.  */\n+void\n+default_register_cpp_builtins (pfile)\n+     struct cpp_reader *pfile ATTRIBUTE_UNUSED;\n+{\n+}\n+\n /* Default value of targetm.comp_type_attributes that always returns 1.  */\n \n int"}, {"sha": "15397b242c3f161d8c6bcbd74578c653bab29f66", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d90d2908e9a7ae8fbad9f248bb5517e74139e3b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3d90d2908e9a7ae8fbad9f248bb5517e74139e3b", "patch": "@@ -2261,6 +2261,8 @@ extern void default_set_default_type_attributes PARAMS ((tree));\n extern void default_insert_attributes PARAMS ((tree, tree *));\n extern bool default_function_attribute_inlinable_p PARAMS ((tree));\n extern bool default_ms_bitfield_layout_p PARAMS ((tree));\n+struct cpp_reader;\n+extern void default_register_cpp_builtins PARAMS ((struct cpp_reader *));\n \n /* Split a list of declspecs and attributes into two.  */\n "}]}