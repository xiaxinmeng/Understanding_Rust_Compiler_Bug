{"sha": "8327f9c2da69615df75f9748308d6fdb38149cea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMyN2Y5YzJkYTY5NjE1ZGY3NWY5NzQ4MzA4ZDZmZGIzODE0OWNlYQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2008-08-24T20:31:09Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2008-08-24T20:31:09Z"}, "message": "re PR fortran/37201 (ICE in in gfc_conv_string_parameter)\n\n2008-08-24  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/37201\n        * decl.c (verify_bind_c_sym): Reject array/string returning\n        functions.\n\n2008-08-24  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/37201\n        * gfortran.dg/bind_c_18.f90: New.\n\nFrom-SVN: r139545", "tree": {"sha": "ce575b9620d360c2a7af70b4fdbc5eab086070c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce575b9620d360c2a7af70b4fdbc5eab086070c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8327f9c2da69615df75f9748308d6fdb38149cea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8327f9c2da69615df75f9748308d6fdb38149cea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8327f9c2da69615df75f9748308d6fdb38149cea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8327f9c2da69615df75f9748308d6fdb38149cea/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d4746214c859ef2b53d898bdd6dda81b6e4b903", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d4746214c859ef2b53d898bdd6dda81b6e4b903", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d4746214c859ef2b53d898bdd6dda81b6e4b903"}], "stats": {"total": 65, "additions": 50, "deletions": 15}, "files": [{"sha": "8c8c679549abe692bc3abc6fc91d694f4785a9b7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8327f9c2da69615df75f9748308d6fdb38149cea/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8327f9c2da69615df75f9748308d6fdb38149cea/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8327f9c2da69615df75f9748308d6fdb38149cea", "patch": "@@ -1,3 +1,9 @@\n+2008-08-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/37201\n+\t* decl.c (verify_bind_c_sym): Reject array/string returning\n+\tfunctions.\n+\n 2008-08-24  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/37201"}, {"sha": "406b5af345dd8668589231e868af94e64a5d279a", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8327f9c2da69615df75f9748308d6fdb38149cea/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8327f9c2da69615df75f9748308d6fdb38149cea/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=8327f9c2da69615df75f9748308d6fdb38149cea", "patch": "@@ -3368,8 +3368,12 @@ gfc_try\n verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n                    int is_in_common, gfc_common_head *com_block)\n {\n+  bool bind_c_function = false;\n   gfc_try retval = SUCCESS;\n \n+  if (tmp_sym->attr.function && tmp_sym->attr.is_bind_c)\n+    bind_c_function = true;\n+\n   if (tmp_sym->attr.function && tmp_sym->result != NULL)\n     {\n       tmp_sym = tmp_sym->result;\n@@ -3385,7 +3389,7 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n \t  tmp_sym->attr.is_c_interop = 1;\n \t}\n     }\n-  \n+\n   /* Here, we know we have the bind(c) attribute, so if we have\n      enough type info, then verify that it's a C interop kind.\n      The info could be in the symbol already, or possibly still in\n@@ -3451,22 +3455,23 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n \t      retval = FAILURE;\n \t    }\n \n-\t  /* If it is a BIND(C) function, make sure the return value is a\n-\t     scalar value.  The previous tests in this function made sure\n-\t     the type is interoperable.  */\n-\t  if (tmp_sym->attr.function == 1 && tmp_sym->as != NULL)\n-\t    gfc_error (\"Return type of BIND(C) function '%s' at %L cannot \"\n-\t\t       \"be an array\", tmp_sym->name, &(tmp_sym->declared_at));\n-\n-\t  /* BIND(C) functions can not return a character string.  */\n-\t  if (tmp_sym->attr.function == 1 && tmp_sym->ts.type == BT_CHARACTER)\n-\t    if (tmp_sym->ts.cl == NULL || tmp_sym->ts.cl->length == NULL\n-\t\t|| tmp_sym->ts.cl->length->expr_type != EXPR_CONSTANT\n-\t\t|| mpz_cmp_si (tmp_sym->ts.cl->length->value.integer, 1) != 0)\n-\t      gfc_error (\"Return type of BIND(C) function '%s' at %L cannot \"\n+        }\n+\n+      /* If it is a BIND(C) function, make sure the return value is a\n+\t scalar value.  The previous tests in this function made sure\n+\t the type is interoperable.  */\n+      if (bind_c_function && tmp_sym->as != NULL)\n+\tgfc_error (\"Return type of BIND(C) function '%s' at %L cannot \"\n+\t\t   \"be an array\", tmp_sym->name, &(tmp_sym->declared_at));\n+\n+      /* BIND(C) functions can not return a character string.  */\n+      if (bind_c_function && tmp_sym->ts.type == BT_CHARACTER)\n+\tif (tmp_sym->ts.cl == NULL || tmp_sym->ts.cl->length == NULL\n+\t    || tmp_sym->ts.cl->length->expr_type != EXPR_CONSTANT\n+\t    || mpz_cmp_si (tmp_sym->ts.cl->length->value.integer, 1) != 0)\n+\t  gfc_error (\"Return type of BIND(C) function '%s' at %L cannot \"\n \t\t\t \"be a character string\", tmp_sym->name,\n \t\t\t &(tmp_sym->declared_at));\n-\t}\n     }\n \n   /* See if the symbol has been marked as private.  If it has, make sure"}, {"sha": "0a06a36c24c856f9c6436eb02db651b01395ddc4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8327f9c2da69615df75f9748308d6fdb38149cea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8327f9c2da69615df75f9748308d6fdb38149cea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8327f9c2da69615df75f9748308d6fdb38149cea", "patch": "@@ -1,3 +1,8 @@\n+2008-08-24  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/37201\n+\t* gfortran.dg/bind_c_18.f90: New.\n+\n 2008-08-24  Jan Hubicka <jh@suse.cz>\n \n \t* gcc.dg/ipa/ipacost-1.c: New testcase."}, {"sha": "6360f01aaccadae4d075f2e2ef8bbe573ca1dbf9", "filename": "gcc/testsuite/gfortran.dg/bind_c_18.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8327f9c2da69615df75f9748308d6fdb38149cea/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8327f9c2da69615df75f9748308d6fdb38149cea/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_18.f90?ref=8327f9c2da69615df75f9748308d6fdb38149cea", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! PR fortran/37201\n+!\n+! Before character arrays were allowed as bind(C) return value.\n+!\n+implicit none\n+  INTERFACE \n+    FUNCTION my() BIND(C,name=\"my\") RESULT(r) ! { dg-error \"cannot be an array\" }\n+      USE iso_c_binding\n+      CHARACTER(kind=C_CHAR) :: r(10)\n+    END FUNCTION\n+  END INTERFACE\n+  INTERFACE \n+    FUNCTION two() BIND(C,name=\"two\") RESULT(r) ! { dg-error \"cannot be a character string\" }\n+      USE iso_c_binding\n+      CHARACTER(kind=C_CHAR,len=2) :: r\n+    END FUNCTION\n+  END INTERFACE\n+END"}]}