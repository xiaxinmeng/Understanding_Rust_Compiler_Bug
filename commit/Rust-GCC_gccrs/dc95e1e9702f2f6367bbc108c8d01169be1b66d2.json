{"sha": "dc95e1e9702f2f6367bbc108c8d01169be1b66d2", "node_id": "C_kwDOANBUbNoAKGRjOTVlMWU5NzAyZjJmNjM2N2JiYzEwOGM4ZDAxMTY5YmUxYjY2ZDI", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2022-01-17T05:01:51Z"}, "committer": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2022-11-15T05:34:05Z"}, "message": "Optimize VEC_PERM_EXPR with same permutation index and operation\n\nThe sequence\n     c1 = VEC_PERM_EXPR (a, a, mask)\n     c2 = VEC_PERM_EXPR (b, b, mask)\n     c3 = c1 op c2\ncan be optimized to\n     c = a op b\n     c3 = VEC_PERM_EXPR (c, c, mask)\nfor all integer vector operation, and float operation with\nfull permutation.\n\ngcc/ChangeLog:\n\n\tPR target/98167\n\t* match.pd: New perm + vector op patterns for int and fp vector.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/98167\n\t* gcc.target/i386/pr98167.c: New test.", "tree": {"sha": "50faeba31b0e0b822022987ca50fd70b946a8879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50faeba31b0e0b822022987ca50fd70b946a8879"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc95e1e9702f2f6367bbc108c8d01169be1b66d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc95e1e9702f2f6367bbc108c8d01169be1b66d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc95e1e9702f2f6367bbc108c8d01169be1b66d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc95e1e9702f2f6367bbc108c8d01169be1b66d2/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73b582a8e34a3c523c8ece0c6674f473acecab53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73b582a8e34a3c523c8ece0c6674f473acecab53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73b582a8e34a3c523c8ece0c6674f473acecab53"}], "stats": {"total": 98, "additions": 98, "deletions": 0}, "files": [{"sha": "39edc894aa59a404437743c08d3660311404d4e5", "filename": "gcc/match.pd", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc95e1e9702f2f6367bbc108c8d01169be1b66d2/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc95e1e9702f2f6367bbc108c8d01169be1b66d2/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=dc95e1e9702f2f6367bbc108c8d01169be1b66d2", "patch": "@@ -8245,3 +8245,57 @@ and,\n  (bit_and (negate @0) integer_onep@1)\n  (if (!TYPE_OVERFLOW_SANITIZED (type))\n   (bit_and @0 @1)))\n+\n+/* Optimize\n+   c1 = VEC_PERM_EXPR (a, a, mask)\n+   c2 = VEC_PERM_EXPR (b, b, mask)\n+   c3 = c1 op c2\n+   -->\n+   c = a op b\n+   c3 = VEC_PERM_EXPR (c, c, mask)\n+   For all integer non-div operations.  */\n+(for op (plus minus mult bit_and bit_ior bit_xor\n+\t lshift rshift)\n+ (simplify\n+  (op (vec_perm @0 @0 @2) (vec_perm @1 @1 @2))\n+   (if (VECTOR_INTEGER_TYPE_P (type))\n+    (vec_perm (op @0 @1) (op @0 @1) @2))))\n+\n+/* Similar for float arithmetic when permutation constant covers\n+   all vector elements.  */\n+(for op (plus minus mult)\n+ (simplify\n+  (op (vec_perm @0 @0 VECTOR_CST@2) (vec_perm @1 @1 VECTOR_CST@2))\n+   (if (VECTOR_FLOAT_TYPE_P (type)\n+\t&& TYPE_VECTOR_SUBPARTS (type).is_constant ())\n+    (with\n+     {\n+       tree perm_cst = @2;\n+       vec_perm_builder builder;\n+       bool full_perm_p = false;\n+       if (tree_to_vec_perm_builder (&builder, perm_cst))\n+\t {\n+\t   unsigned HOST_WIDE_INT nelts;\n+\n+\t   nelts = TYPE_VECTOR_SUBPARTS (type).to_constant ();\n+\t   /* Create a vec_perm_indices for the VECTOR_CST.  */\n+\t   vec_perm_indices sel (builder, 1, nelts);\n+\n+\t   /* Check if perm indices covers all vector elements.  */\n+\t   if (sel.encoding ().encoded_full_vector_p ())\n+\t     {\n+\t       auto_sbitmap seen (nelts);\n+\t       unsigned HOST_WIDE_INT count = 0, i;\n+\n+\t       for (i = 0; i < nelts; i++)\n+\t\t {\n+\t\t   if (!bitmap_set_bit (seen, sel[i].to_constant ()))\n+\t\t    break;\n+\t\t   count++;\n+\t\t }\n+\t       full_perm_p = count == nelts;\n+\t     }\n+\t }\n+      }\n+      (if (full_perm_p)\n+\t(vec_perm (op @0 @1) (op @0 @1) @2))))))"}, {"sha": "40e0ac113329f9e33dc4c6591785adf4397382c8", "filename": "gcc/testsuite/gcc.target/i386/pr98167.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc95e1e9702f2f6367bbc108c8d01169be1b66d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98167.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc95e1e9702f2f6367bbc108c8d01169be1b66d2/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98167.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98167.c?ref=dc95e1e9702f2f6367bbc108c8d01169be1b66d2", "patch": "@@ -0,0 +1,44 @@\n+/* PR target/98167 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+/* { dg-final { scan-assembler-times \"vpshufd\\t\" 8 } } */\n+/* { dg-final { scan-assembler-times \"vpermilps\\t\" 3 } } */\n+\n+#define VEC_PERM_4 \\\n+  2, 3, 1, 0\n+#define VEC_PERM_8 \\\n+  4, 5, 6, 7, 3, 2, 1, 0\n+#define VEC_PERM_16 \\\n+  8, 9, 10, 11, 12, 13, 14, 15, 7, 6, 5, 4, 3, 2, 1, 0\n+\n+#define TYPE_PERM_OP(type, size, op, name) \\\n+  typedef type v##size##s##type __attribute__ ((vector_size(4*size))); \\\n+  v##size##s##type type##foo##size##i_##name (v##size##s##type a, \\\n+\t\t\t\t\t      v##size##s##type b) \\\n+  { \\\n+    v##size##s##type a1 = __builtin_shufflevector (a, a, \\\n+\t\t\t\t\t\t   VEC_PERM_##size); \\\n+    v##size##s##type b1 = __builtin_shufflevector (b, b, \\\n+\t\t\t\t\t\t   VEC_PERM_##size); \\\n+    return a1 op b1; \\\n+  }\n+\n+#define INT_PERMS(op, name) \\\n+  TYPE_PERM_OP (int, 4, op, name) \\\n+\n+#define FP_PERMS(op, name) \\\n+  TYPE_PERM_OP (float, 4, op, name) \\\n+\n+INT_PERMS (+, add)\n+INT_PERMS (-, sub)\n+INT_PERMS (*, mul)\n+INT_PERMS (|, ior)\n+INT_PERMS (^, xor)\n+INT_PERMS (&, and)\n+INT_PERMS (<<, shl)\n+INT_PERMS (>>, shr)\n+FP_PERMS (+, add)\n+FP_PERMS (-, sub)\n+FP_PERMS (*, mul)\n+"}]}