{"sha": "11f2c78ae877382e2c25313b520aaf9b4e111be6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFmMmM3OGFlODc3MzgyZTJjMjUzMTNiNTIwYWFmOWI0ZTExMWJlNg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2015-07-26T17:04:31Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2015-07-26T17:04:31Z"}, "message": "Fix PR c++/18969 (invalid return statement diagnosed too late)\n\ngcc/cp/ChangeLog:\n\n\tPR c++/18969\n\t* typeck.c (check_return_expr): Also do the basic return-value\n\tvalidity checking if processing_template_decl and yet types are\n\tnot dependent.  Remove obsolete code.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/18969\n\t* g++.dg/template/pr18969.C: New test.\n\t* g++.dg/template/pr18969-2.C: New test.\n\t* g++.old-deja/g++.jason/overload.C: Remove return value in\n\ttemplate function returning void.\n\nFrom-SVN: r226236", "tree": {"sha": "07d1909c8fdadd4a61a5000e8ed989ebebe54fa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07d1909c8fdadd4a61a5000e8ed989ebebe54fa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11f2c78ae877382e2c25313b520aaf9b4e111be6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f2c78ae877382e2c25313b520aaf9b4e111be6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11f2c78ae877382e2c25313b520aaf9b4e111be6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f2c78ae877382e2c25313b520aaf9b4e111be6/comments", "author": null, "committer": null, "parents": [{"sha": "af7186706c6cd7d5014f0637308c80d8f2cd2545", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af7186706c6cd7d5014f0637308c80d8f2cd2545", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af7186706c6cd7d5014f0637308c80d8f2cd2545"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "a9fa4457c6823050b03dafe020c08bbfc73eceb9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f2c78ae877382e2c25313b520aaf9b4e111be6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f2c78ae877382e2c25313b520aaf9b4e111be6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=11f2c78ae877382e2c25313b520aaf9b4e111be6", "patch": "@@ -1,3 +1,10 @@\n+2015-07-26  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/18969\n+\t* typeck.c (check_return_expr): Also do the basic return-value\n+\tvalidity checking if processing_template_decl and yet types are\n+\tnot dependent.  Remove obsolete code.\n+\n 2015-07-26  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (poplevel): Use Use DECL_SOURCE_LOCATION and \"%qD\""}, {"sha": "2ed43beeb0d1edc1a5885559838f545d2218779a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f2c78ae877382e2c25313b520aaf9b4e111be6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f2c78ae877382e2c25313b520aaf9b4e111be6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=11f2c78ae877382e2c25313b520aaf9b4e111be6", "patch": "@@ -8519,12 +8519,19 @@ check_return_expr (tree retval, bool *no_warning)\n       return NULL_TREE;\n     }\n \n+  const tree saved_retval = retval;\n+\n   if (processing_template_decl)\n     {\n       current_function_returns_value = 1;\n+\n       if (check_for_bare_parameter_packs (retval))\n-        retval = error_mark_node;\n-      return retval;\n+\treturn error_mark_node;\n+\n+      if (WILDCARD_TYPE_P (TREE_TYPE (DECL_RESULT (current_function_decl)))\n+\t  || (retval != NULL_TREE\n+\t      && type_dependent_expression_p (retval)))\n+        return retval;\n     }\n \n   functype = TREE_TYPE (TREE_TYPE (current_function_decl));\n@@ -8568,14 +8575,10 @@ check_return_expr (tree retval, bool *no_warning)\n       functype = type;\n     }\n \n-  /* When no explicit return-value is given in a function with a named\n-     return value, the named return value is used.  */\n   result = DECL_RESULT (current_function_decl);\n   valtype = TREE_TYPE (result);\n   gcc_assert (valtype != NULL_TREE);\n   fn_returns_value_p = !VOID_TYPE_P (valtype);\n-  if (!retval && DECL_NAME (result) && fn_returns_value_p)\n-    retval = result;\n \n   /* Check for a return statement with no return value in a function\n      that's supposed to return a value.  */\n@@ -8660,6 +8663,13 @@ check_return_expr (tree retval, bool *no_warning)\n \twarning (OPT_Weffc__, \"%<operator=%> should return a reference to %<*this%>\");\n     }\n \n+  if (processing_template_decl)\n+    {\n+      /* We should not have changed the return value.  */\n+      gcc_assert (retval == saved_retval);\n+      return retval;\n+    }\n+\n   /* The fabled Named Return Value optimization, as per [class.copy]/15:\n \n      [...]      For  a function with a class return type, if the expression"}, {"sha": "c711f8362d5c9d4c7f2b7d1a11a4c82a17d49ace", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f2c78ae877382e2c25313b520aaf9b4e111be6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f2c78ae877382e2c25313b520aaf9b4e111be6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11f2c78ae877382e2c25313b520aaf9b4e111be6", "patch": "@@ -1,3 +1,11 @@\n+2015-07-26  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\tPR c++/18969\n+\t* g++.dg/template/pr18969.C: New test.\n+\t* g++.dg/template/pr18969-2.C: New test.\n+\t* g++.old-deja/g++.jason/overload.C: Remove return value in\n+\ttemplate function returning void.\n+\n 2015-07-26  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/alpha/pr66140.c (lpfc_bg_setup_bpl): Use unsigned"}, {"sha": "e0b0c1bf9d44a58bc86699146174c494bf544a85", "filename": "gcc/testsuite/g++.dg/template/pr18969-2.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f2c78ae877382e2c25313b520aaf9b4e111be6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr18969-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f2c78ae877382e2c25313b520aaf9b4e111be6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr18969-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr18969-2.C?ref=11f2c78ae877382e2c25313b520aaf9b4e111be6", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/18969\n+// { dg-do compile { target c++14 } }\n+\n+template <typename T>\n+struct A\n+{\n+    auto *f1 () { return; } // { dg-error \"return-statement\" }\n+    auto &f2 () { return; } // { dg-error \"return-statement\" }\n+\n+    auto f3 () { return; } // { dg-bogus \"return-statement\" }\n+};"}, {"sha": "dba5eb92eb9d884902d9a12a19403e386a337be5", "filename": "gcc/testsuite/g++.dg/template/pr18969.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f2c78ae877382e2c25313b520aaf9b4e111be6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr18969.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f2c78ae877382e2c25313b520aaf9b4e111be6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr18969.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr18969.C?ref=11f2c78ae877382e2c25313b520aaf9b4e111be6", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/18969\n+\n+template <typename T>\n+struct A\n+{\n+    int f1 () { return; } // { dg-error \"return-statement\" }\n+    void f2 () { return 5; } // { dg-error \"return-statement\" }\n+    T *f3 () { return; } // { dg-error \"return-statement\" }\n+    typename T::f &f4 () { return; } // { dg-error \"return-statement\" }\n+\n+    T f5 () { return; } // { dg-bogus \"return-statement\" }\n+    void f6 () { return (T)true; } // { dg-bogus \"return-statement\" }\n+    typename T::f f7 () { return; } // { dg-bogus \"return-statement\" }\n+};"}, {"sha": "28b029f48be87f42afb3dbc048a3770e69f54757", "filename": "gcc/testsuite/g++.old-deja/g++.jason/overload.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f2c78ae877382e2c25313b520aaf9b4e111be6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f2c78ae877382e2c25313b520aaf9b4e111be6/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Foverload.C?ref=11f2c78ae877382e2c25313b520aaf9b4e111be6", "patch": "@@ -5,7 +5,7 @@ enum bar {};\n void operator+ (int, int);// { dg-error \"\" } .*\n void operator+ (bar&, int);\n \n-template <class T> void operator+ (int b, T& t) { return b; }\n+template <class T> void operator+ (int b, T& t) { return; }\n void operator+ (int, bar&);\n \n template <class T> class foo"}]}