{"sha": "65d06d56e8201e365e60adeef9121386a626a203", "node_id": "C_kwDOANBUbNoAKDY1ZDA2ZDU2ZTgyMDFlMzY1ZTYwYWRlZWY5MTIxMzg2YTYyNmEyMDM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-30T10:09:57Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-30T10:38:52Z"}, "message": "Implement Byte Strings\n\nByte strings are not str's they are arrays of [u8; capacity], this\npreserves their type guarantees as a byte string.\n\nThis patch merges work from Mark to implement the correct typing, the\nmissing piece was that each implicit type needed its own implicit id, other\nwise their is a loop in looking up the covariant types.\n\nFixes #697\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "e82ee610e2a862a728131eb414217b37613b6c81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e82ee610e2a862a728131eb414217b37613b6c81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65d06d56e8201e365e60adeef9121386a626a203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65d06d56e8201e365e60adeef9121386a626a203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65d06d56e8201e365e60adeef9121386a626a203", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65d06d56e8201e365e60adeef9121386a626a203/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdcad086e134b889ba542fadc1150bb2fcef8aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdcad086e134b889ba542fadc1150bb2fcef8aea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdcad086e134b889ba542fadc1150bb2fcef8aea"}], "stats": {"total": 91, "additions": 84, "deletions": 7}, "files": [{"sha": "eb245dce5be7a949139ae2649023327a7d28174d", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d06d56e8201e365e60adeef9121386a626a203/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d06d56e8201e365e60adeef9121386a626a203/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=65d06d56e8201e365e60adeef9121386a626a203", "patch": "@@ -304,15 +304,54 @@ class CompileExpr : public HIRCompileBase\n \t}\n \treturn;\n \n-      case HIR::Literal::STRING:\n-\tcase HIR::Literal::BYTE_STRING: {\n+\tcase HIR::Literal::STRING: {\n \t  auto base = ctx->get_backend ()->string_constant_expression (\n \t    literal_value->as_string ());\n \t  translated\n \t    = ctx->get_backend ()->address_expression (base, expr.get_locus ());\n \t}\n \treturn;\n \n+\tcase HIR::Literal::BYTE_STRING: {\n+\t  TyTy::BaseType *tyty = nullptr;\n+\t  if (!ctx->get_tyctx ()->lookup_type (\n+\t\texpr.get_mappings ().get_hirid (), &tyty))\n+\t    {\n+\t      rust_fatal_error (expr.get_locus (),\n+\t\t\t\t\"did not resolve type for this array expr\");\n+\t      return;\n+\t    }\n+\n+\t  // the type here is &[ty; capacity]\n+\t  rust_assert (tyty->get_kind () == TyTy::TypeKind::REF);\n+\t  auto ref_tyty = static_cast<TyTy::ReferenceType *> (tyty);\n+\t  auto base_tyty = ref_tyty->get_base ();\n+\t  rust_assert (base_tyty->get_kind () == TyTy::TypeKind::ARRAY);\n+\t  auto array_tyty = static_cast<TyTy::ArrayType *> (base_tyty);\n+\n+\t  std::string value_str = expr.get_literal ()->as_string ();\n+\t  std::vector<Bexpression *> vals;\n+\t  std::vector<unsigned long> indexes;\n+\t  for (size_t i = 0; i < value_str.size (); i++)\n+\t    {\n+\t      char b = value_str.at (i);\n+\t      Bexpression *bb\n+\t\t= ctx->get_backend ()->char_constant_expression (b);\n+\t      vals.push_back (bb);\n+\t      indexes.push_back (i);\n+\t    }\n+\n+\t  Btype *array_type = TyTyResolveCompile::compile (ctx, array_tyty);\n+\t  Bexpression *constructed\n+\t    = ctx->get_backend ()->array_constructor_expression (\n+\t      array_type, indexes, vals, expr.get_locus ());\n+\n+\t  translated\n+\t    = ctx->get_backend ()->address_expression (constructed,\n+\t\t\t\t\t\t       expr.get_locus ());\n+\t}\n+\treturn;\n+\n       default:\n \trust_fatal_error (expr.get_locus (), \"unknown literal\");\n \treturn;"}, {"sha": "28b985108cf1b3512194db3af13729adf0f4a94e", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d06d56e8201e365e60adeef9121386a626a203/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d06d56e8201e365e60adeef9121386a626a203/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=65d06d56e8201e365e60adeef9121386a626a203", "patch": "@@ -609,15 +609,49 @@ class TypeCheckExpr : public TypeCheckBase\n \tbreak;\n \n \tcase HIR::Literal::LitType::BYTE_STRING: {\n-\t  /* We just treat this as a string, but it really is an arraytype of\n-\t     u8. It isn't in UTF-8, but really just a byte array.  */\n-\t  TyTy::BaseType *base = nullptr;\n-\t  auto ok = context->lookup_builtin (\"str\", &base);\n+\t  /* This is an arraytype of u8 reference (&[u8;size]). It isn't in\n+\t     UTF-8, but really just a byte array. Code to construct the array\n+\t     reference copied from ArrayElemsValues and ArrayType. */\n+\t  TyTy::BaseType *u8;\n+\t  auto ok = context->lookup_builtin (\"u8\", &u8);\n \t  rust_assert (ok);\n \n+\t  auto crate_num = mappings->get_current_crate ();\n+\t  Analysis::NodeMapping capacity_mapping (crate_num, UNKNOWN_NODEID,\n+\t\t\t\t\t\t  mappings->get_next_hir_id (\n+\t\t\t\t\t\t    crate_num),\n+\t\t\t\t\t\t  UNKNOWN_LOCAL_DEFID);\n+\n+\t  /* Capacity is the size of the string (number of chars).\n+\t     It is a constant, but for fold it to get a Bexpression.  */\n+\t  std::string capacity_str\n+\t    = std::to_string (expr.get_literal ()->as_string ().size ());\n+\t  HIR::LiteralExpr literal_capacity (capacity_mapping, capacity_str,\n+\t\t\t\t\t     HIR::Literal::LitType::INT,\n+\t\t\t\t\t     PrimitiveCoreType::CORETYPE_USIZE,\n+\t\t\t\t\t     expr.get_locus ());\n+\n+\t  // mark the type for this implicit node\n+\t  context->insert_type (capacity_mapping,\n+\t\t\t\tnew TyTy::USizeType (\n+\t\t\t\t  capacity_mapping.get_hirid ()));\n+\n+\t  Bexpression *capacity\n+\t    = ConstFold::ConstFoldExpr::fold (&literal_capacity);\n+\n+\t  Analysis::NodeMapping array_mapping (crate_num, UNKNOWN_NODEID,\n+\t\t\t\t\t       mappings->get_next_hir_id (\n+\t\t\t\t\t\t crate_num),\n+\t\t\t\t\t       UNKNOWN_LOCAL_DEFID);\n+\n+\t  TyTy::ArrayType *array\n+\t    = new TyTy::ArrayType (array_mapping.get_hirid (), capacity,\n+\t\t\t\t   TyTy::TyVar (u8->get_ref ()));\n+\t  context->insert_type (array_mapping, array);\n+\n \t  infered\n \t    = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n-\t\t\t\t       TyTy::TyVar (base->get_ref ()), false);\n+\t\t\t\t       TyTy::TyVar (array->get_ref ()), false);\n \t}\n \tbreak;\n "}, {"sha": "28934d2581d95b8d3f8a27c9ef2a523e1d8bfb68", "filename": "gcc/testsuite/rust/compile/torture/byte_str.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65d06d56e8201e365e60adeef9121386a626a203/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbyte_str.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65d06d56e8201e365e60adeef9121386a626a203/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbyte_str.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbyte_str.rs?ref=65d06d56e8201e365e60adeef9121386a626a203", "patch": "@@ -0,0 +1,4 @@\n+pub fn main() {\n+    let a: &[u8; 4];\n+    a = b\"test\";\n+}"}]}