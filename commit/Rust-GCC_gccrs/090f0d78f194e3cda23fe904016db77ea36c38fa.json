{"sha": "090f0d78f194e3cda23fe904016db77ea36c38fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkwZjBkNzhmMTk0ZTNjZGEyM2ZlOTA0MDE2ZGI3N2VhMzZjMzhmYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-03T07:54:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-03T07:54:58Z"}, "message": "openmp: Improve expand_omp_atomic_pipeline\n\nWhen __atomic_* builtins were introduced, omp-expand.c (omp-low.c\nat that point) has been adjusted in several spots so that it uses\nthe atomic builtins instead of sync builtins, but\nexpand_omp_atomic_pipeline has not because the __atomic_compare_exchange_*\nAPIs take address of the argument, so it kept using __sync_val_compare_swap_*.\nThat means it always uses seq_cst though.\nThis patch changes it to use the ATOMIC_COMPARE_EXCHANGE ifn which gimple-fold\nfolds __atomic_compare_exchange_* into - that ifn also passes expected\ndirectly.\n\n2021-09-03  Jakub Jelinek  <jakub@redhat.com>\n\n\t* omp-expand.c (expand_omp_atomic_pipeline): Use\n\tIFN_ATOMIC_COMPARE_EXCHANGE instead of\n\tBUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_? so that memory order\n\tcan be provided.", "tree": {"sha": "87259b34ec46b2c39b0ff629fc54106acc9d8404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87259b34ec46b2c39b0ff629fc54106acc9d8404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/090f0d78f194e3cda23fe904016db77ea36c38fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/090f0d78f194e3cda23fe904016db77ea36c38fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/090f0d78f194e3cda23fe904016db77ea36c38fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/090f0d78f194e3cda23fe904016db77ea36c38fa/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e902136b310ee17d4b49eb42d9d5e487d5dcf4a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e902136b310ee17d4b49eb42d9d5e487d5dcf4a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e902136b310ee17d4b49eb42d9d5e487d5dcf4a1"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "f2b6f6fa6a6ac9a8b32b88403a2c62cebfd89e9f", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/090f0d78f194e3cda23fe904016db77ea36c38fa/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/090f0d78f194e3cda23fe904016db77ea36c38fa/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=090f0d78f194e3cda23fe904016db77ea36c38fa", "patch": "@@ -8807,8 +8807,6 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n   edge e;\n   enum built_in_function fncode;\n \n-  /* ??? We need a non-pointer interface to __atomic_compare_exchange in\n-     order to use the RELAXED memory model effectively.  */\n   fncode = (enum built_in_function)((int)BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_N\n \t\t\t\t    + index + 1);\n   cmpxchg = builtin_decl_explicit (fncode);\n@@ -8825,6 +8823,15 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n   /* Load the initial value, replacing the GIMPLE_OMP_ATOMIC_LOAD.  */\n   si = gsi_last_nondebug_bb (load_bb);\n   gcc_assert (gimple_code (gsi_stmt (si)) == GIMPLE_OMP_ATOMIC_LOAD);\n+  location_t loc = gimple_location (gsi_stmt (si));\n+  enum omp_memory_order omo = gimple_omp_atomic_memory_order (gsi_stmt (si));\n+  enum memmodel imo = omp_memory_order_to_memmodel (omo);\n+  tree mo = build_int_cst (NULL, imo);\n+  if (imo == MEMMODEL_RELEASE)\n+    imo = MEMMODEL_RELAXED;\n+  else if (imo == MEMMODEL_ACQ_REL)\n+    imo = MEMMODEL_ACQUIRE;\n+  tree fmo = build_int_cst (NULL, imo);\n \n   /* For floating-point values, we'll need to view-convert them to integers\n      so that we can perform the atomic compare and swap.  Simplify the\n@@ -8921,7 +8928,15 @@ expand_omp_atomic_pipeline (basic_block load_bb, basic_block store_bb,\n \t\t\t\t  GSI_SAME_STMT);\n \n   /* Build the compare&swap statement.  */\n-  new_storedi = build_call_expr (cmpxchg, 3, iaddr, loadedi, storedi);\n+  tree ctype = build_complex_type (itype);\n+  int flag = int_size_in_bytes (itype);\n+  new_storedi = build_call_expr_internal_loc (loc, IFN_ATOMIC_COMPARE_EXCHANGE,\n+\t\t\t\t\t      ctype, 6, iaddr, loadedi,\n+\t\t\t\t\t      storedi,\n+\t\t\t\t\t      build_int_cst (integer_type_node,\n+\t\t\t\t\t\t\t     flag),\n+\t\t\t\t\t      mo, fmo);\n+  new_storedi = build1 (REALPART_EXPR, itype, new_storedi);\n   new_storedi = force_gimple_operand_gsi (&si,\n \t\t\t\t\t  fold_convert (TREE_TYPE (loadedi),\n \t\t\t\t\t\t\tnew_storedi),"}]}