{"sha": "56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b", "node_id": "C_kwDOANBUbNoAKDU2NTcyYTA4ZWM0YTBmYzFhNzgwMmQzNzM3Y2Q3ZjdjYzkwODljNGI", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-03T22:59:21Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-03T22:59:21Z"}, "message": "analyzer: provide placeholder implementation of sprintf\n\nPreviously, the analyzer lacked a known_function implementation of\nsprintf, and thus would handle calls to sprintf with the \"anything could\nhappen\" fallback.\n\nWhilst working on PR analyzer/107565 I noticed that this was preventing\na lot of genuine memory leaks from being reported for Doom; fixing\nthusly.\n\nIntegration testing of the effect of the patch shows a big increase in\ntrue positives due to the case mentioned in Doom, and one new false\npositive (in pcre2), which I'm tracking as PR analyzer/109014.\n\nComparison:\n  GOOD:  67 -> 123 (+56); 10.91% -> 18.33%\n   BAD: 547 -> 548 (+1)\n\nwhere the affected warnings/projects are:\n\n  -Wanalyzer-malloc-leak:\n    GOOD:  0 -> 56 (+56);  0.00% -> 41.48%\n     BAD: 79\n      True positives: 0 -> 56 (+56)\n        (all in Doom)\n\n  -Wanalyzer-use-of-uninitialized-value:\n    GOOD: 0;  0.00%\n     BAD: 80 -> 81 (+1)\n      False positives:\n        pcre2-10.42: 0 -> 1 (+1)\n\ngcc/analyzer/ChangeLog:\n\t* kf.cc (class kf_sprintf): New.\n\t(register_known_functions): Register it.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/doom-d_main-IdentifyVersion.c: New test.\n\t* gcc.dg/analyzer/sprintf-1.c: New test.\n\t* gcc.dg/analyzer/sprintf-concat.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "eab4594d22b277acd4d3b265e32935ab231d9ba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eab4594d22b277acd4d3b265e32935ab231d9ba7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3ef73867e3f70a343ad5aa4e00b270be85fa572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ef73867e3f70a343ad5aa4e00b270be85fa572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ef73867e3f70a343ad5aa4e00b270be85fa572"}], "stats": {"total": 400, "additions": 400, "deletions": 0}, "files": [{"sha": "93c46630f36100385b277b171e94712d61a97503", "filename": "gcc/analyzer/kf.cc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b/gcc%2Fanalyzer%2Fkf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b/gcc%2Fanalyzer%2Fkf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fkf.cc?ref=56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b", "patch": "@@ -778,6 +778,34 @@ kf_strchr::impl_call_post (const call_details &cd) const\n     }\n }\n \n+/* Handler for \"sprintf\".\n+     int sprintf(char *str, const char *format, ...);\n+*/\n+\n+class kf_sprintf : public known_function\n+{\n+public:\n+  bool matches_call_types_p (const call_details &cd) const final override\n+  {\n+    return (cd.num_args () >= 2\n+\t    && cd.arg_is_pointer_p (0)\n+\t    && cd.arg_is_pointer_p (1));\n+  }\n+\n+  void impl_call_pre (const call_details &cd) const final override\n+  {\n+    /* For now, merely assume that the destination buffer gets set to a\n+       new svalue.  */\n+    region_model *model = cd.get_model ();\n+    region_model_context *ctxt = cd.get_ctxt ();\n+    const svalue *dst_ptr = cd.get_arg_svalue (0);\n+    const region *dst_reg\n+      = model->deref_rvalue (dst_ptr, cd.get_arg_tree (0), ctxt);\n+    const svalue *content = cd.get_or_create_conjured_svalue (dst_reg);\n+    model->set_value (dst_reg, content, ctxt);\n+  }\n+};\n+\n /* Handler for \"__builtin_stack_restore\".  */\n \n class kf_stack_restore : public known_function\n@@ -990,6 +1018,7 @@ register_known_functions (known_function_manager &kfm)\n     kfm.add (BUILT_IN_MEMSET, make_unique<kf_memset> ());\n     kfm.add (BUILT_IN_MEMSET_CHK, make_unique<kf_memset> ());\n     kfm.add (BUILT_IN_REALLOC, make_unique<kf_realloc> ());\n+    kfm.add (BUILT_IN_SPRINTF, make_unique<kf_sprintf> ());\n     kfm.add (BUILT_IN_STACK_RESTORE, make_unique<kf_stack_restore> ());\n     kfm.add (BUILT_IN_STACK_SAVE, make_unique<kf_stack_save> ());\n     kfm.add (BUILT_IN_STRCHR, make_unique<kf_strchr> ());"}, {"sha": "982b9b74349d5c3a403cf98782ead4ab42f4e75a", "filename": "gcc/testsuite/gcc.dg/analyzer/doom-d_main-IdentifyVersion.c", "status": "added", "additions": 272, "deletions": 0, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdoom-d_main-IdentifyVersion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdoom-d_main-IdentifyVersion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fdoom-d_main-IdentifyVersion.c?ref=56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b", "patch": "@@ -0,0 +1,272 @@\n+/* Reduced from Doom's d_main.c, which is under the GPLv2 or later.  */\n+\n+/* { dg-additional-options \"-Wno-analyzer-too-complex\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+typedef struct _IO_FILE FILE;\n+\n+extern int\n+printf(const char* __restrict, ...);\n+\n+extern int\n+sprintf(char* __restrict __s, const char* __restrict, ...)\n+  __attribute__((__nothrow__));\n+\n+extern void*\n+malloc(size_t __size) __attribute__((__nothrow__, __leaf__))\n+__attribute__((__malloc__)) __attribute__((__alloc_size__(1)));\n+extern char*\n+getenv(const char* __name) __attribute__((__nothrow__, __leaf__))\n+__attribute__((__nonnull__(1)));\n+extern int\n+access(const char* __name, int __type) __attribute__((__nothrow__, __leaf__))\n+__attribute__((__nonnull__(1)));\n+extern char*\n+strcpy(char* __restrict __dest, const char* __restrict __src)\n+  __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));\n+extern size_t\n+strlen(const char* __s) __attribute__((__nothrow__, __leaf__))\n+__attribute__((__pure__)) __attribute__((__nonnull__(1)));\n+\n+typedef enum\n+{\n+  shareware,\n+  registered,\n+  commercial,\n+\n+  retail,\n+  indetermined\n+\n+} GameMode_t;\n+\n+typedef enum\n+{\n+  doom,\n+  doom2,\n+  pack_tnt,\n+  pack_plut,\n+  none\n+\n+} GameMission_t;\n+\n+typedef enum\n+{\n+  english,\n+  french,\n+  german,\n+  unknown\n+\n+} Language_t;\n+\n+typedef enum\n+{\n+  false,\n+  true\n+} boolean;\n+\n+extern boolean devparm;\n+extern GameMode_t gamemode;\n+extern Language_t language;\n+extern char basedefault[1024];\n+int\n+M_CheckParm(char* check);\n+void\n+I_Error(char* error, ...);\n+\n+extern char* wadfiles[20];\n+\n+void\n+D_AddFile(char* file)\n+{\n+  int numwadfiles;\n+  char* newfile;\n+\n+  for (numwadfiles = 0; wadfiles[numwadfiles]; numwadfiles++)\n+    ;\n+\n+  newfile = malloc(strlen(file) + 1);\n+  strcpy(newfile, file); /* { dg-warning \"use of possibly-NULL 'newfile' where non-null expected\" } */\n+\n+  wadfiles[numwadfiles] = newfile;\n+}\n+\n+void\n+IdentifyVersion(void)\n+{\n+\n+  char* doom1wad;\n+  char* doomwad;\n+  char* doomuwad;\n+  char* doom2wad;\n+\n+  char* doom2fwad;\n+  char* plutoniawad;\n+  char* tntwad;\n+\n+  char* home;\n+  char* doomwaddir;\n+  doomwaddir = getenv(\"DOOMWADDIR\");\n+  if (!doomwaddir)\n+    doomwaddir = \".\";\n+\n+  doom2wad = malloc(strlen(doomwaddir) + 1 + 9 + 1);\n+  sprintf(doom2wad, \"%s/doom2.wad\", doomwaddir); /* { dg-warning \"possibly-NULL 'doom2wad'\" } */\n+\n+  doomuwad = malloc(strlen(doomwaddir) + 1 + 8 + 1);\n+  sprintf(doomuwad, \"%s/doomu.wad\", doomwaddir); /* { dg-warning \"possibly-NULL 'doomuwad'\" } */\n+\n+  doomwad = malloc(strlen(doomwaddir) + 1 + 8 + 1);\n+  sprintf(doomwad, \"%s/doom.wad\", doomwaddir); /* { dg-warning \"possibly-NULL 'doomwad'\" } */\n+\n+  doom1wad = malloc(strlen(doomwaddir) + 1 + 9 + 1);\n+  sprintf(doom1wad, \"%s/doom1.wad\", doomwaddir); /* { dg-warning \"possibly-NULL 'doom1wad'\" } */\n+\n+  plutoniawad = malloc(strlen(doomwaddir) + 1 + 12 + 1);\n+  sprintf(plutoniawad, \"%s/plutonia.wad\", doomwaddir); /* { dg-warning \"possibly-NULL 'plutoniawad'\" } */\n+\n+  tntwad = malloc(strlen(doomwaddir) + 1 + 9 + 1);\n+  sprintf(tntwad, \"%s/tnt.wad\", doomwaddir); /* { dg-warning \"possibly-NULL 'tntwad'\" } */\n+\n+  doom2fwad = malloc(strlen(doomwaddir) + 1 + 10 + 1);\n+  sprintf(doom2fwad, \"%s/doom2f.wad\", doomwaddir); /* { dg-warning \"possibly-NULL 'doom2fwad'\" } */\n+\n+  home = getenv(\"HOME\");\n+  if (!home)\n+    I_Error(\"Please set $HOME to your home directory\");\n+  sprintf(basedefault, \"%s/.doomrc\", home);\n+\n+  if (M_CheckParm(\"-shdev\")) {\n+    gamemode = shareware;\n+    devparm = true;\n+    D_AddFile(\"devdata\"\n+              \"doom1.wad\");\n+    D_AddFile(\"devmaps\"\n+              \"data_se/texture1.lmp\");\n+    D_AddFile(\"devmaps\"\n+              \"data_se/pnames.lmp\");\n+    strcpy(basedefault,\n+           \"devdata\"\n+           \"default.cfg\");\n+    return; /* { dg-warning \"leak of 'doom2wad'\" } */\n+    /* { dg-warning \"leak of 'doomuwad'\"    \"leak\" { target *-*-* } .-1 } */\n+    /* { dg-warning \"leak of 'doomwad'\"     \"leak\" { target *-*-* } .-2 } */\n+    /* { dg-warning \"leak of 'doom1wad'\"    \"leak\" { target *-*-* } .-3 } */\n+    /* { dg-warning \"leak of 'plutoniawad'\" \"leak\" { target *-*-* } .-4 } */\n+    /* { dg-warning \"leak of 'tntwad'\"      \"leak\" { target *-*-* } .-5 } */\n+    /* { dg-warning \"leak of 'doom2fwad'\"   \"leak\" { target *-*-* } .-6 } */\n+  }\n+\n+  if (M_CheckParm(\"-regdev\")) {\n+    gamemode = registered;\n+    devparm = true;\n+    D_AddFile(\"devdata\"\n+              \"doom.wad\");\n+    D_AddFile(\"devmaps\"\n+              \"data_se/texture1.lmp\");\n+    D_AddFile(\"devmaps\"\n+              \"data_se/texture2.lmp\");\n+    D_AddFile(\"devmaps\"\n+              \"data_se/pnames.lmp\");\n+    strcpy(basedefault,\n+           \"devdata\"\n+           \"default.cfg\");\n+    return; /* { dg-warning \"leak of 'doom2wad'\" } */\n+    /* { dg-warning \"leak of 'doomuwad'\"    \"leak\" { target *-*-* } .-1 } */\n+    /* { dg-warning \"leak of 'doomwad'\"     \"leak\" { target *-*-* } .-2 } */\n+    /* { dg-warning \"leak of 'doom1wad'\"    \"leak\" { target *-*-* } .-3 } */\n+    /* { dg-warning \"leak of 'plutoniawad'\" \"leak\" { target *-*-* } .-4 } */\n+    /* { dg-warning \"leak of 'tntwad'\"      \"leak\" { target *-*-* } .-5 } */\n+    /* { dg-warning \"leak of 'doom2fwad'\"   \"leak\" { target *-*-* } .-6 } */\n+  }\n+\n+  if (M_CheckParm(\"-comdev\")) {\n+    gamemode = commercial;\n+    devparm = true;\n+\n+    D_AddFile(\"devdata\"\n+              \"doom2.wad\");\n+\n+    D_AddFile(\"devmaps\"\n+              \"cdata/texture1.lmp\");\n+    D_AddFile(\"devmaps\"\n+              \"cdata/pnames.lmp\");\n+    strcpy(basedefault,\n+           \"devdata\"\n+           \"default.cfg\");\n+    return; /* { dg-warning \"leak of 'doom2wad'\" } */\n+    /* { dg-warning \"leak of 'doomuwad'\"    \"leak\" { target *-*-* } .-1 } */\n+    /* { dg-warning \"leak of 'doomwad'\"     \"leak\" { target *-*-* } .-2 } */\n+    /* { dg-warning \"leak of 'doom1wad'\"    \"leak\" { target *-*-* } .-3 } */\n+    /* { dg-warning \"leak of 'plutoniawad'\" \"leak\" { target *-*-* } .-4 } */\n+    /* { dg-warning \"leak of 'tntwad'\"      \"leak\" { target *-*-* } .-5 } */\n+    /* { dg-warning \"leak of 'doom2fwad'\"   \"leak\" { target *-*-* } .-6 } */\n+  }\n+\n+  if (!access(doom2fwad, 4)) {\n+    gamemode = commercial;\n+\n+    language = french;\n+    printf(\"French version\\n\");\n+    D_AddFile(doom2fwad);\n+    return; /* { dg-warning \"leak of 'doom2wad'\" } */\n+    /* { dg-warning \"leak of 'doomuwad'\"    \"leak\" { target *-*-* } .-1 } */\n+    /* { dg-warning \"leak of 'doomwad'\"     \"leak\" { target *-*-* } .-2 } */\n+    /* { dg-warning \"leak of 'doom1wad'\"    \"leak\" { target *-*-* } .-3 } */\n+    /* { dg-warning \"leak of 'plutoniawad'\" \"leak\" { target *-*-* } .-4 } */\n+    /* { dg-warning \"leak of 'tntwad'\"      \"leak\" { target *-*-* } .-5 } */\n+    /* { dg-warning \"leak of 'doom2fwad'\"   \"leak\" { target *-*-* } .-6 } */\n+  }\n+\n+  if (!access(doom2wad, 4)) {\n+    gamemode = commercial;\n+    D_AddFile(doom2wad);\n+    return; /* { dg-warning \"leak of 'doom2wad'\" } */\n+    /* { dg-warning \"leak of 'doomuwad'\"    \"leak\" { target *-*-* } .-1 } */\n+    /* { dg-warning \"leak of 'doomwad'\"     \"leak\" { target *-*-* } .-2 } */\n+    /* { dg-warning \"leak of 'doom1wad'\"    \"leak\" { target *-*-* } .-3 } */\n+    /* { dg-warning \"leak of 'plutoniawad'\" \"leak\" { target *-*-* } .-4 } */\n+    /* { dg-warning \"leak of 'tntwad'\"      \"leak\" { target *-*-* } .-5 } */\n+    /* { dg-warning \"leak of 'doom2fwad'\"   \"leak\" { target *-*-* } .-6 } */\n+  }\n+\n+  if (!access(plutoniawad, 4)) {\n+    gamemode = commercial;\n+    D_AddFile(plutoniawad);\n+    return; /* { dg-warning \"leak of 'doom2wad'\" } */\n+    /* { dg-warning \"leak of 'doomuwad'\"    \"leak\" { target *-*-* } .-1 } */\n+    /* { dg-warning \"leak of 'doomwad'\"     \"leak\" { target *-*-* } .-2 } */\n+    /* { dg-warning \"leak of 'doom1wad'\"    \"leak\" { target *-*-* } .-3 } */\n+    /* { dg-warning \"leak of 'plutoniawad'\" \"leak\" { target *-*-* } .-4 } */\n+    /* { dg-warning \"leak of 'tntwad'\"      \"leak\" { target *-*-* } .-5 } */\n+    /* { dg-warning \"leak of 'doom2fwad'\"   \"leak\" { target *-*-* } .-6 } */\n+  }\n+\n+  if (!access(tntwad, 4)) {\n+    gamemode = commercial;\n+    D_AddFile(tntwad);\n+    return; /* { dg-warning \"leak of 'doom2wad'\" } */\n+    /* { dg-warning \"leak of 'doomuwad'\"    \"leak\" { target *-*-* } .-1 } */\n+    /* { dg-warning \"leak of 'doomwad'\"     \"leak\" { target *-*-* } .-2 } */\n+    /* { dg-warning \"leak of 'doom1wad'\"    \"leak\" { target *-*-* } .-3 } */\n+    /* { dg-warning \"leak of 'plutoniawad'\" \"leak\" { target *-*-* } .-4 } */\n+    /* { dg-warning \"leak of 'tntwad'\"      \"leak\" { target *-*-* } .-5 } */\n+    /* { dg-warning \"leak of 'doom2fwad'\"   \"leak\" { target *-*-* } .-6 } */\n+  }\n+\n+  if (!access(doomuwad, 4)) {\n+    gamemode = retail;\n+    D_AddFile(doomuwad);\n+    return; /* { dg-warning \"leak of 'doom2wad'\" } */\n+    /* { dg-warning \"leak of 'doomuwad'\"    \"leak\" { target *-*-* } .-1 } */\n+    /* { dg-warning \"leak of 'doomwad'\"     \"leak\" { target *-*-* } .-2 } */\n+    /* { dg-warning \"leak of 'doom1wad'\"    \"leak\" { target *-*-* } .-3 } */\n+    /* { dg-warning \"leak of 'plutoniawad'\" \"leak\" { target *-*-* } .-4 } */\n+    /* { dg-warning \"leak of 'tntwad'\"      \"leak\" { target *-*-* } .-5 } */\n+    /* { dg-warning \"leak of 'doom2fwad'\"   \"leak\" { target *-*-* } .-6 } */\n+  }\n+\n+  /* [...snip...] */\n+\n+  printf(\"Game mode indeterminate.\\n\");\n+  gamemode = indetermined;\n+}"}, {"sha": "c79525d912f15515350eb89af4a206c243d9e0ef", "filename": "gcc/testsuite/gcc.dg/analyzer/sprintf-1.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsprintf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsprintf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsprintf-1.c?ref=56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b", "patch": "@@ -0,0 +1,64 @@\n+/* See e.g. https://en.cppreference.com/w/c/io/fprintf\n+   and https://www.man7.org/linux/man-pages/man3/sprintf.3.html */\n+\n+extern int\n+sprintf(char* dst, const char* fmt, ...)\n+  __attribute__((__nothrow__));\n+\n+#define NULL ((void *)0)\n+\n+int\n+test_passthrough (char* dst, const char* fmt)\n+{\n+  /* This assumes that fmt doesn't have any arguments.  */\n+  return sprintf (dst, fmt);\n+}\n+\n+void\n+test_known (void)\n+{\n+  char buf[10];\n+  int res = sprintf (buf, \"foo\");\n+  /* TODO: ideally we would know the value of \"res\" is 3,\n+     and known the content and strlen of \"buf\" after the call */\n+}\n+\n+int\n+test_null_dst (void)\n+{\n+  return sprintf (NULL, \"hello world\"); /* { dg-warning \"use of NULL where non-null expected\" } */\n+}\n+\n+int\n+test_null_fmt (char *dst)\n+{\n+  return sprintf (dst, NULL);  /* { dg-warning \"use of NULL where non-null expected\" } */\n+}\n+\n+int\n+test_uninit_dst (void)\n+{\n+  char *dst;\n+  return sprintf (dst, \"hello world\"); /* { dg-warning \"use of uninitialized value 'dst'\" } */\n+}\n+\n+int\n+test_uninit_fmt_ptr (char *dst)\n+{\n+  const char *fmt;\n+  return sprintf (dst, fmt); /* { dg-warning \"use of uninitialized value 'fmt'\" } */\n+}\n+\n+int\n+test_uninit_fmt_buf (char *dst)\n+{\n+  const char fmt[10];\n+  return sprintf (dst, fmt); // TODO (PR analyzer/105899): complain about \"fmt\" not being initialized\n+}\n+\n+int\n+test_fmt_not_terminated (char *dst)\n+{\n+  const char fmt[3] = \"foo\";\n+  return sprintf (dst, fmt); // TODO (PR analyzer/105899): complain about \"fmt\" not being terminated\n+}"}, {"sha": "0094f3e64496fdf008059869727885185794f224", "filename": "gcc/testsuite/gcc.dg/analyzer/sprintf-concat.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsprintf-concat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsprintf-concat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsprintf-concat.c?ref=56572a08ec4a0fc1a7802d3737cd7f7cc9089c4b", "patch": "@@ -0,0 +1,35 @@\n+typedef __SIZE_TYPE__ size_t;\n+#define NULL ((void *)0)\n+\n+extern size_t\n+strlen(const char* __s) __attribute__((__nothrow__, __leaf__))\n+__attribute__((__pure__)) __attribute__((__nonnull__(1)));\n+\n+extern void*\n+malloc(size_t __size) __attribute__((__nothrow__, __leaf__))\n+__attribute__((__malloc__)) __attribute__((__alloc_size__(1)));\n+\n+extern int\n+sprintf(char* __restrict __s, const char* __restrict, ...)\n+  __attribute__((__nothrow__));\n+\n+char *\n+test_1 (const char *a, const char *b)\n+{\n+  size_t sz = strlen (a) + strlen (b) + 2;\n+  char *p = malloc (sz);\n+  if (!p)\n+    return NULL;\n+  sprintf (p, \"%s/%s\", a, b);\n+  return p;\n+}\n+\n+void\n+test_2 (const char *a, const char *b)\n+{\n+  size_t sz = strlen (a) + strlen (b) + 2;\n+  char *p = malloc (sz); /* { dg-message \"allocated here\" } */\n+  if (!p)\n+    return;\n+  sprintf (p, \"%s/%s\", a, b); /* { dg-warning \"leak of 'p' \" } */\n+}"}]}