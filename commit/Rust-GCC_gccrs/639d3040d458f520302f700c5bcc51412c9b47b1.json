{"sha": "639d3040d458f520302f700c5bcc51412c9b47b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM5ZDMwNDBkNDU4ZjUyMDMwMmY3MDBjNWJjYzUxNDEyYzliNDdiMQ==", "commit": {"author": {"name": "Dirk Mueller", "email": "dmueller@suse.de", "date": "2007-07-15T11:45:30Z"}, "committer": {"name": "Dirk Mueller", "email": "mueller@gcc.gnu.org", "date": "2007-07-15T11:45:30Z"}, "message": "omega.c (coalesce): Fix memory leak on early exit.\n\n2007-07-15  Dirk Mueller  <dmueller@suse.de>\n\n        * omega.c (coalesce): Fix memory leak on early exit.\n        * matrix-reorg.c (check_allocation_function): Likewise.\n        * tree-vect-transform.c (vect_get_new_vect_var): free result\n        of concat().\n        * bb-reorder.c (find_rarely_executed_basic_blocks_and_crossing_edges):\n        pass pointer to edge vector\n        (partition_hot_cold_basic_blocks): Fix memory leak.\n        * collect2.c (prefix_from_string): Free temporary storage.\n        * reload1.c (fixup_abnormal_edges): Free sbitmap.\n\nFrom-SVN: r126653", "tree": {"sha": "ee710b19d6216c4dec1c96e78150fde55e460e43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee710b19d6216c4dec1c96e78150fde55e460e43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/639d3040d458f520302f700c5bcc51412c9b47b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639d3040d458f520302f700c5bcc51412c9b47b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/639d3040d458f520302f700c5bcc51412c9b47b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/639d3040d458f520302f700c5bcc51412c9b47b1/comments", "author": null, "committer": null, "parents": [{"sha": "d40150cc3c1e85a9cbbaebb2679b6bac7a62ecbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40150cc3c1e85a9cbbaebb2679b6bac7a62ecbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40150cc3c1e85a9cbbaebb2679b6bac7a62ecbc"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "4903b79093847dfa34d16825dd3dc2ec86a738f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639d3040d458f520302f700c5bcc51412c9b47b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639d3040d458f520302f700c5bcc51412c9b47b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=639d3040d458f520302f700c5bcc51412c9b47b1", "patch": "@@ -1,3 +1,15 @@\n+2007-07-14  Dirk Mueller  <dmueller@suse.de>\n+\n+\t* omega.c (coalesce): Fix memory leak on early exit.\n+\t* matrix-reorg.c (check_allocation_function): Likewise.\n+\t* tree-vect-transform.c (vect_get_new_vect_var): free result\n+\tof concat().\n+\t* bb-reorder.c (find_rarely_executed_basic_blocks_and_crossing_edges):\n+\tpass pointer to edge vector\n+\t(partition_hot_cold_basic_blocks): Fix memory leak.\n+\t* collect2.c (prefix_from_string): Free temporary storage.\n+\t* reload1.c (fixup_abnormal_edges): Free sbitmap.\n+\n 2007-07-14  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.h (DO_GLOBAL_CTORS_BODY): Add void to prototype."}, {"sha": "4be0d80bbd37cf272a19416578d6fe0070012cb7", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639d3040d458f520302f700c5bcc51412c9b47b1/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639d3040d458f520302f700c5bcc51412c9b47b1/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=639d3040d458f520302f700c5bcc51412c9b47b1", "patch": "@@ -180,7 +180,7 @@ static void connect_traces (int, struct trace *);\n static bool copy_bb_p (basic_block, int);\n static int get_uncond_jump_length (void);\n static bool push_to_next_round_p (basic_block, int, int, int, gcov_type);\n-static void find_rarely_executed_basic_blocks_and_crossing_edges (edge *,\n+static void find_rarely_executed_basic_blocks_and_crossing_edges (edge **,\n \t\t\t\t\t\t\t\t  int *,\n \t\t\t\t\t\t\t\t  int *);\n static void add_labels_and_missing_jumps (edge *, int);\n@@ -1219,7 +1219,7 @@ get_uncond_jump_length (void)\n    cache locality).  */\n \n static void\n-find_rarely_executed_basic_blocks_and_crossing_edges (edge *crossing_edges,\n+find_rarely_executed_basic_blocks_and_crossing_edges (edge **crossing_edges,\n \t\t\t\t\t\t      int *n_crossing_edges,\n \t\t\t\t\t\t      int *max_idx)\n {\n@@ -1256,10 +1256,10 @@ find_rarely_executed_basic_blocks_and_crossing_edges (edge *crossing_edges,\n \t  if (i == *max_idx)\n \t    {\n \t      *max_idx *= 2;\n-\t      crossing_edges = xrealloc (crossing_edges,\n+\t      *crossing_edges = xrealloc (*crossing_edges,\n \t\t\t\t\t (*max_idx) * sizeof (edge));\n \t    }\n-\t  crossing_edges[i++] = e;\n+\t  (*crossing_edges)[i++] = e;\n \t}\n       else\n \te->flags &= ~EDGE_CROSSING;\n@@ -2168,7 +2168,7 @@ partition_hot_cold_basic_blocks (void)\n \t&& cur_bb->next_bb->index >= NUM_FIXED_BLOCKS)\n       cur_bb->aux = cur_bb->next_bb;\n \n-  find_rarely_executed_basic_blocks_and_crossing_edges (crossing_edges,\n+  find_rarely_executed_basic_blocks_and_crossing_edges (&crossing_edges,\n \t\t\t\t\t\t\t&n_crossing_edges,\n \t\t\t\t\t\t\t&max_edges);\n "}, {"sha": "1ef3bbf2c126bd9df4089ebed9be1854acc5a91c", "filename": "gcc/collect2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639d3040d458f520302f700c5bcc51412c9b47b1/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639d3040d458f520302f700c5bcc51412c9b47b1/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=639d3040d458f520302f700c5bcc51412c9b47b1", "patch": "@@ -737,6 +737,7 @@ prefix_from_string (const char *p, struct path_prefix *pprefix)\n       else\n \tendp++;\n     }\n+  free (nstore);\n }\n \f\n /* Main program.  */"}, {"sha": "0cff06f1ee261318bfe112e6a9352247537c22d3", "filename": "gcc/matrix-reorg.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639d3040d458f520302f700c5bcc51412c9b47b1/gcc%2Fmatrix-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639d3040d458f520302f700c5bcc51412c9b47b1/gcc%2Fmatrix-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatrix-reorg.c?ref=639d3040d458f520302f700c5bcc51412c9b47b1", "patch": "@@ -1481,10 +1481,13 @@ check_allocation_function (void **slot, void *data ATTRIBUTE_UNUSED)\n   block_stmt_iterator bsi;\n   basic_block bb_level_0;\n   struct matrix_info *mi = *slot;\n-  sbitmap visited = sbitmap_alloc (num_ssa_names);\n+  sbitmap visited;\n \n   if (!mi->malloc_for_level)\n     return 1;\n+\n+  visited = sbitmap_alloc (num_ssa_names);\n+\n   /* Do nothing if the current function is not the allocation\n      function of MI.  */\n   if (mi->allocation_function_decl != current_function_decl"}, {"sha": "ed6f536f39f6c8aad64adb37a0c60d7f26a661b2", "filename": "gcc/omega.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639d3040d458f520302f700c5bcc51412c9b47b1/gcc%2Fomega.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639d3040d458f520302f700c5bcc51412c9b47b1/gcc%2Fomega.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomega.c?ref=639d3040d458f520302f700c5bcc51412c9b47b1", "patch": "@@ -2454,7 +2454,7 @@ coalesce (omega_pb pb)\n {\n   int e, e2;\n   int colors = 0;\n-  bool *is_dead = XNEWVEC (bool, OMEGA_MAX_GEQS);\n+  bool *is_dead;\n   int found_something = 0;\n \n   for (e = 0; e < pb->num_geqs; e++)\n@@ -2464,6 +2464,8 @@ coalesce (omega_pb pb)\n   if (colors < 2)\n     return;\n \n+  is_dead = XNEWVEC (bool, OMEGA_MAX_GEQS);\n+\n   for (e = 0; e < pb->num_geqs; e++)\n     is_dead[e] = false;\n "}, {"sha": "12b847bea6acd3197fdd30c520f2a96afc52042f", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639d3040d458f520302f700c5bcc51412c9b47b1/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639d3040d458f520302f700c5bcc51412c9b47b1/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=639d3040d458f520302f700c5bcc51412c9b47b1", "patch": "@@ -8639,6 +8639,7 @@ fixup_abnormal_edges (void)\n       blocks = sbitmap_alloc (last_basic_block);\n       sbitmap_ones (blocks);\n       find_many_sub_basic_blocks (blocks);\n+      sbitmap_free (blocks);\n     }\n \n   if (inserted)"}, {"sha": "a46ff804dda20049e853c279895230c321773556", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/639d3040d458f520302f700c5bcc51412c9b47b1/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/639d3040d458f520302f700c5bcc51412c9b47b1/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=639d3040d458f520302f700c5bcc51412c9b47b1", "patch": "@@ -671,7 +671,11 @@ vect_get_new_vect_var (tree type, enum vect_var_kind var_kind, const char *name)\n   }\n \n   if (name)\n-    new_vect_var = create_tmp_var (type, concat (prefix, name, NULL));\n+    {\n+      char* tmp = concat (prefix, name, NULL);\n+      new_vect_var = create_tmp_var (type, tmp);\n+      free (tmp);\n+    }\n   else\n     new_vect_var = create_tmp_var (type, prefix);\n \n@@ -4443,7 +4447,7 @@ vect_transform_strided_load (tree stmt, VEC(tree,heap) *dr_chain, int size,\n      corresponds the order of data-refs in RESULT_CHAIN.  */\n   next_stmt = first_stmt;\n   gap_count = 1;\n-  for (i = 0; VEC_iterate(tree, result_chain, i, tmp_data_ref); i++)\n+  for (i = 0; VEC_iterate (tree, result_chain, i, tmp_data_ref); i++)\n     {\n       if (!next_stmt)\n \tbreak;"}]}