{"sha": "98060bbea842d8b0f3b5d41efa6ef15c266efcf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgwNjBiYmVhODQyZDhiMGYzYjVkNDFlZmE2ZWYxNWMyNjZlZmNmNA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2016-07-27T20:31:57Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2016-07-27T20:31:57Z"}, "message": "vector.md (vec_extract<mode>): Change the calling signature of rs6000_expand_vector_extract so that the...\n\n2016-07-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/vector.md (vec_extract<mode>): Change the calling\n\tsignature of rs6000_expand_vector_extract so that the element\n\tnumber is a RTX instead of a constant integer.\n\t* config/rs6000/rs6000-protos.h (rs6000_expand_vector_extract):\n\tLikewise.\n\t* config/rs6000/rs6000.c (rs6000_expand_vector_extract): Likewise.\n\t(altivec_expand_vec_ext_builtin): Likewise.\n\t* config/rs6000/altivec.md (reduc_plus_scal_<mode>): Likewise.\n\t* config/rs6000/vsx.md (vsx_extract_<mode>): Fix spelling of the\n\tMFVSRLD instruction.\n\nFrom-SVN: r238799", "tree": {"sha": "64d3fd0fe7cb9c243b1bc04c081285338e017d36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64d3fd0fe7cb9c243b1bc04c081285338e017d36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98060bbea842d8b0f3b5d41efa6ef15c266efcf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98060bbea842d8b0f3b5d41efa6ef15c266efcf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98060bbea842d8b0f3b5d41efa6ef15c266efcf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98060bbea842d8b0f3b5d41efa6ef15c266efcf4/comments", "author": null, "committer": null, "parents": [{"sha": "427f68c6c2b14b3865f62bb3aaaa75174d574441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427f68c6c2b14b3865f62bb3aaaa75174d574441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/427f68c6c2b14b3865f62bb3aaaa75174d574441"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "858228fbb69a2ef73e5b754f82c22f3b3e8c9d78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98060bbea842d8b0f3b5d41efa6ef15c266efcf4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98060bbea842d8b0f3b5d41efa6ef15c266efcf4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98060bbea842d8b0f3b5d41efa6ef15c266efcf4", "patch": "@@ -1,3 +1,16 @@\n+2016-07-27  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/vector.md (vec_extract<mode>): Change the calling\n+\tsignature of rs6000_expand_vector_extract so that the element\n+\tnumber is a RTX instead of a constant integer.\n+\t* config/rs6000/rs6000-protos.h (rs6000_expand_vector_extract):\n+\tLikewise.\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_extract): Likewise.\n+\t(altivec_expand_vec_ext_builtin): Likewise.\n+\t* config/rs6000/altivec.md (reduc_plus_scal_<mode>): Likewise.\n+\t* config/rs6000/vsx.md (vsx_extract_<mode>): Fix spelling of the\n+\tMFVSRLD instruction.\n+\n 2016-07-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* input.c (get_pure_location): Move here from tree.c."}, {"sha": "c39a0b655b4b26524fda60e1d0f499f21896c583", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98060bbea842d8b0f3b5d41efa6ef15c266efcf4/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98060bbea842d8b0f3b5d41efa6ef15c266efcf4/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=98060bbea842d8b0f3b5d41efa6ef15c266efcf4", "patch": "@@ -2781,7 +2781,7 @@\n   emit_insn (gen_altivec_vspltisw (vzero, const0_rtx));\n   emit_insn (gen_altivec_vsum4s<VI_char>s (vtmp1, operands[1], vzero));\n   emit_insn (gen_altivec_vsumsws_direct (dest, vtmp1, vzero));\n-  rs6000_expand_vector_extract (operands[0], vtmp2, elt);\n+  rs6000_expand_vector_extract (operands[0], vtmp2, GEN_INT (elt));\n   DONE;\n })\n "}, {"sha": "fefe7049804a538c17722881a8a5de65bc4a4411", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98060bbea842d8b0f3b5d41efa6ef15c266efcf4/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98060bbea842d8b0f3b5d41efa6ef15c266efcf4/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=98060bbea842d8b0f3b5d41efa6ef15c266efcf4", "patch": "@@ -61,7 +61,7 @@ extern void convert_int_to_float128 (rtx *, enum rtx_code);\n extern void rs6000_expand_vector_init (rtx, rtx);\n extern void paired_expand_vector_init (rtx, rtx);\n extern void rs6000_expand_vector_set (rtx, rtx, int);\n-extern void rs6000_expand_vector_extract (rtx, rtx, int);\n+extern void rs6000_expand_vector_extract (rtx, rtx, rtx);\n extern bool altivec_expand_vec_perm_const (rtx op[4]);\n extern void altivec_expand_vec_perm_le (rtx op[4]);\n extern bool rs6000_expand_vec_perm_const (rtx op[4]);"}, {"sha": "ac331109bd225998314ebacf683d5e58586e2e05", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98060bbea842d8b0f3b5d41efa6ef15c266efcf4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98060bbea842d8b0f3b5d41efa6ef15c266efcf4/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=98060bbea842d8b0f3b5d41efa6ef15c266efcf4", "patch": "@@ -6911,65 +6911,68 @@ rs6000_expand_vector_set (rtx target, rtx val, int elt)\n /* Extract field ELT from VEC into TARGET.  */\n \n void\n-rs6000_expand_vector_extract (rtx target, rtx vec, int elt)\n+rs6000_expand_vector_extract (rtx target, rtx vec, rtx elt)\n {\n   machine_mode mode = GET_MODE (vec);\n   machine_mode inner_mode = GET_MODE_INNER (mode);\n   rtx mem;\n \n-  if (VECTOR_MEM_VSX_P (mode))\n+  if (VECTOR_MEM_VSX_P (mode) && CONST_INT_P (elt))\n     {\n       switch (mode)\n \t{\n \tdefault:\n \t  break;\n \tcase V1TImode:\n-\t  gcc_assert (elt == 0 && inner_mode == TImode);\n+\t  gcc_assert (INTVAL (elt) == 0 && inner_mode == TImode);\n \t  emit_move_insn (target, gen_lowpart (TImode, vec));\n \t  break;\n \tcase V2DFmode:\n-\t  emit_insn (gen_vsx_extract_v2df (target, vec, GEN_INT (elt)));\n+\t  emit_insn (gen_vsx_extract_v2df (target, vec, elt));\n \t  return;\n \tcase V2DImode:\n-\t  emit_insn (gen_vsx_extract_v2di (target, vec, GEN_INT (elt)));\n+\t  emit_insn (gen_vsx_extract_v2di (target, vec, elt));\n \t  return;\n \tcase V4SFmode:\n-\t  emit_insn (gen_vsx_extract_v4sf (target, vec, GEN_INT (elt)));\n+\t  emit_insn (gen_vsx_extract_v4sf (target, vec, elt));\n \t  return;\n \tcase V16QImode:\n \t  if (TARGET_VEXTRACTUB)\n \t    {\n-\t      emit_insn (gen_vsx_extract_v16qi (target, vec, GEN_INT (elt)));\n+\t      emit_insn (gen_vsx_extract_v16qi (target, vec, elt));\n \t      return;\n \t    }\n \t  else\n \t    break;\n \tcase V8HImode:\n \t  if (TARGET_VEXTRACTUB)\n \t    {\n-\t      emit_insn (gen_vsx_extract_v8hi (target, vec, GEN_INT (elt)));\n+\t      emit_insn (gen_vsx_extract_v8hi (target, vec, elt));\n \t      return;\n \t    }\n \t  else\n \t    break;\n \tcase V4SImode:\n \t  if (TARGET_VEXTRACTUB)\n \t    {\n-\t      emit_insn (gen_vsx_extract_v4si (target, vec, GEN_INT (elt)));\n+\t      emit_insn (gen_vsx_extract_v4si (target, vec, elt));\n \t      return;\n \t    }\n \t  else\n \t    break;\n \t}\n     }\n \n+  gcc_assert (CONST_INT_P (elt));\n+\n   /* Allocate mode-sized buffer.  */\n   mem = assign_stack_temp (mode, GET_MODE_SIZE (mode));\n \n   emit_move_insn (mem, vec);\n \n   /* Add offset to field within buffer matching vector element.  */\n-  mem = adjust_address_nv (mem, inner_mode, elt * GET_MODE_SIZE (inner_mode));\n+  mem = adjust_address_nv (mem, inner_mode,\n+\t\t\t   INTVAL (elt) * GET_MODE_SIZE (inner_mode));\n \n   emit_move_insn (target, adjust_address_nv (mem, inner_mode, 0));\n }\n@@ -14658,14 +14661,18 @@ altivec_expand_vec_ext_builtin (tree exp, rtx target)\n {\n   machine_mode tmode, mode0;\n   tree arg0, arg1;\n-  int elt;\n   rtx op0;\n+  rtx op1;\n \n   arg0 = CALL_EXPR_ARG (exp, 0);\n   arg1 = CALL_EXPR_ARG (exp, 1);\n \n   op0 = expand_normal (arg0);\n-  elt = get_element_number (TREE_TYPE (arg0), arg1);\n+  op1 = expand_normal (arg1);\n+\n+  /* Call get_element_number to validate arg1 if it is a constant.  */\n+  if (TREE_CODE (arg1) == INTEGER_CST)\n+    (void) get_element_number (TREE_TYPE (arg0), arg1);\n \n   tmode = TYPE_MODE (TREE_TYPE (TREE_TYPE (arg0)));\n   mode0 = TYPE_MODE (TREE_TYPE (arg0));\n@@ -14676,7 +14683,7 @@ altivec_expand_vec_ext_builtin (tree exp, rtx target)\n   if (optimize || !target || !register_operand (target, tmode))\n     target = gen_reg_rtx (tmode);\n \n-  rs6000_expand_vector_extract (target, op0, elt);\n+  rs6000_expand_vector_extract (target, op0, op1);\n \n   return target;\n }"}, {"sha": "fbfa9bf12e4722dd593eea70a31a3b91c6b6a069", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98060bbea842d8b0f3b5d41efa6ef15c266efcf4/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98060bbea842d8b0f3b5d41efa6ef15c266efcf4/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=98060bbea842d8b0f3b5d41efa6ef15c266efcf4", "patch": "@@ -858,8 +858,7 @@\n    (match_operand 2 \"const_int_operand\" \"\")]\n   \"VECTOR_MEM_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n {\n-  rs6000_expand_vector_extract (operands[0], operands[1],\n-\t\t\t\tINTVAL (operands[2]));\n+  rs6000_expand_vector_extract (operands[0], operands[1], operands[2]);\n   DONE;\n })\n \f"}, {"sha": "1fddebcf5c3f72f3f9b1fc4eca03b3c5c60d37b9", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98060bbea842d8b0f3b5d41efa6ef15c266efcf4/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98060bbea842d8b0f3b5d41efa6ef15c266efcf4/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=98060bbea842d8b0f3b5d41efa6ef15c266efcf4", "patch": "@@ -2159,7 +2159,7 @@\n \n   else if (element == VECTOR_ELEMENT_MFVSRLD_64BIT && INT_REGNO_P (op0_regno)\n \t   && TARGET_P9_VECTOR && TARGET_POWERPC64 && TARGET_DIRECT_MOVE)\n-    return \"mfvsrdl %0,%x1\";\n+    return \"mfvsrld %0,%x1\";\n \n   else if (VSX_REGNO_P (op0_regno))\n     {"}]}