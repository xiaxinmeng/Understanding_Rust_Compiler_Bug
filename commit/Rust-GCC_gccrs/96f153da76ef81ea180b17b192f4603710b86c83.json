{"sha": "96f153da76ef81ea180b17b192f4603710b86c83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZmMTUzZGE3NmVmODFlYTE4MGIxN2IxOTJmNDYwMzcxMGI4NmM4Mw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-01-09T08:51:21Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-01-09T08:51:21Z"}, "message": "(expand_binop): For complex mult, compute res in each alternative, not before.\n\nFrom-SVN: r3165", "tree": {"sha": "f0f7a06c5b9716367d11471ab72f223a924e5685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0f7a06c5b9716367d11471ab72f223a924e5685"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96f153da76ef81ea180b17b192f4603710b86c83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f153da76ef81ea180b17b192f4603710b86c83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96f153da76ef81ea180b17b192f4603710b86c83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f153da76ef81ea180b17b192f4603710b86c83/comments", "author": null, "committer": null, "parents": [{"sha": "676ce2231660dc6ef0272e7af463f4f24733082d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676ce2231660dc6ef0272e7af463f4f24733082d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676ce2231660dc6ef0272e7af463f4f24733082d"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "f46f4597be48ad57ba502de18911fe64abb7121c", "filename": "gcc/optabs.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96f153da76ef81ea180b17b192f4603710b86c83/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96f153da76ef81ea180b17b192f4603710b86c83/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=96f153da76ef81ea180b17b192f4603710b86c83", "patch": "@@ -889,7 +889,9 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n       switch (binoptab->code)\n \t{\n \tcase PLUS:\n+\t  /* (a+ib) + (c+id) = (a+c) + i(b+d) */\n \tcase MINUS:\n+\t  /* (a+ib) - (c+id) = (a-c) + i(b-d) */\n \t  res = expand_binop (submode, binoptab, real0, real1,\n \t\t\t      realr, unsignedp, methods);\n \t  if (res != realr)\n@@ -912,15 +914,14 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \tcase MULT:\n \t  /* (a+ib) * (c+id) = (ac-bd) + i(ad+cb) */\n \n-\t  res = expand_binop (submode, binoptab, real0, real1,\n-\t\t\t      realr, unsignedp, methods);\n-\n \t  if (imag0 && imag1)\n \t    {\n \t      rtx temp =\n-\t\texpand_binop (submode, sub_optab, res,\n-\t\t\t      expand_binop (submode, binoptab, imag0, imag1,\n-\t\t\t\t\t    0, unsignedp, methods),\n+\t\texpand_binop (submode, sub_optab,\n+\t\t\t      expand_binop (submode, binoptab, real0,\n+\t\t\t\t\t    real1, 0, unsignedp, methods),\n+\t\t\t      expand_binop (submode, binoptab, imag0,\n+\t\t\t\t\t    imag1, 0, unsignedp, methods),\n \t\t\t      realr, unsignedp, methods);\n \n \t      if (temp != realr)\n@@ -939,6 +940,8 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t    }\n \t  else\n \t    {\n+\t      res = expand_binop (submode, binoptab, real0, real1,\n+\t\t\t\t  realr, unsignedp, methods);\n \t      if (res != realr)\n \t\temit_move_insn (realr, res);\n \n@@ -954,11 +957,11 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t  break;\n \n \tcase DIV:\n-\t  /* (c+id)/(a+ib) == ((c+id)*(a-ib))/(a*a+b*b) */\n+\t  /* (a+ib) / (c+id) = ((ac+bd)/(cc+dd)) + i((bc-ad)/(cc+dd)) */\n \t  \n \t  if (! imag1)\n-\t    {\n-\t      /* Simply divide the real and imaginary parts by `a' */\n+\t    {\t/* (a+ib) / (c+i0) = (a/c) + i(b/c) */\n+\t      /* Simply divide the real and imaginary parts by `c' */\n \t      res = expand_binop (submode, binoptab, real0, real1,\n \t\t\t\t  realr, unsignedp, methods);\n \t      if (res != realr)"}]}