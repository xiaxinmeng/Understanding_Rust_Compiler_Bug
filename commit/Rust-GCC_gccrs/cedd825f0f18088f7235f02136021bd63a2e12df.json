{"sha": "cedd825f0f18088f7235f02136021bd63a2e12df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VkZDgyNWYwZjE4MDg4ZjcyMzVmMDIxMzYwMjFiZDYzYTJlMTJkZg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-01-24T20:41:49Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-01-24T20:41:49Z"}, "message": "c-parse.in (cast_expr): Move compound literals from here ...\n\n\t* c-parse.in (cast_expr): Move compound literals from here ...\n\t(primary): ... to here.  Use standard terminology \"compound\n\tliteral\" instead of \"constructor expression\".\n\ntestsuite:\n\t* gcc.c-torture/compile/20010124-1.c: New test.\n\nFrom-SVN: r39246", "tree": {"sha": "fb7631bc21b96e7a0071cd36b5ff78d5c6b71fe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb7631bc21b96e7a0071cd36b5ff78d5c6b71fe9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cedd825f0f18088f7235f02136021bd63a2e12df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cedd825f0f18088f7235f02136021bd63a2e12df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cedd825f0f18088f7235f02136021bd63a2e12df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cedd825f0f18088f7235f02136021bd63a2e12df/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bad11e125dadee39cbefe8e52a2fc9fa77ef062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bad11e125dadee39cbefe8e52a2fc9fa77ef062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bad11e125dadee39cbefe8e52a2fc9fa77ef062"}], "stats": {"total": 77, "additions": 48, "deletions": 29}, "files": [{"sha": "9f8b613c7731fa7cbb8e7896fb970c57abb115c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedd825f0f18088f7235f02136021bd63a2e12df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedd825f0f18088f7235f02136021bd63a2e12df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cedd825f0f18088f7235f02136021bd63a2e12df", "patch": "@@ -1,3 +1,9 @@\n+2001-01-24  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-parse.in (cast_expr): Move compound literals from here ...\n+\t(primary): ... to here.  Use standard terminology \"compound\n+\tliteral\" instead of \"constructor expression\".\n+\n 2001-01-24  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.1, cpp.1: Regenerate."}, {"sha": "5b32768866c70c5bd917405ba0face7ddfa4788a", "filename": "gcc/c-parse.in", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedd825f0f18088f7235f02136021bd63a2e12df/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedd825f0f18088f7235f02136021bd63a2e12df/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=cedd825f0f18088f7235f02136021bd63a2e12df", "patch": "@@ -542,35 +542,6 @@ cast_expr:\n \t\t  type = groktypename ($2);\n \t\t  warn_strict_prototypes = SAVED_warn_strict_prototypes;\n \t\t  $$ = build_c_cast (type, $4); }\n-\t| '(' typename ')' '{' \n-\t\t{ start_init (NULL_TREE, NULL, 0);\n-\t\t  $2 = groktypename ($2);\n-\t\t  really_start_incremental_init ($2); }\n-\t  initlist_maybe_comma '}'  %prec UNARY\n-\t\t{ const char *name;\n-\t\t  tree result = pop_init_level (0);\n-\t\t  tree type = $2;\n-\t\t  finish_init ();\n-\n-\t\t  if (pedantic && ! flag_isoc99)\n-\t\t    pedwarn (\"ISO C89 forbids constructor expressions\");\n-\t\t  if (TYPE_NAME (type) != 0)\n-\t\t    {\n-\t\t      if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE)\n-\t\t\tname = IDENTIFIER_POINTER (TYPE_NAME (type));\n-\t\t      else\n-\t\t\tname = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n-\t\t    }\n-\t\t  else\n-\t\t    name = \"\";\n-\t\t  $$ = result;\n-\t\t  if (TREE_CODE (type) == ARRAY_TYPE && !COMPLETE_TYPE_P (type))\n-\t\t    {\n-\t\t      int failure = complete_array_type (type, $$, 1);\n-\t\t      if (failure)\n-\t\t\tabort ();\n-\t\t    }\n-\t\t}\n \t;\n \n expr_no_commas:\n@@ -659,6 +630,35 @@ primary:\n \t| CONSTANT\n \t| string\n \t\t{ $$ = combine_strings ($1); }\n+\t| '(' typename ')' '{' \n+\t\t{ start_init (NULL_TREE, NULL, 0);\n+\t\t  $2 = groktypename ($2);\n+\t\t  really_start_incremental_init ($2); }\n+\t  initlist_maybe_comma '}'  %prec UNARY\n+\t\t{ const char *name;\n+\t\t  tree result = pop_init_level (0);\n+\t\t  tree type = $2;\n+\t\t  finish_init ();\n+\n+\t\t  if (pedantic && ! flag_isoc99)\n+\t\t    pedwarn (\"ISO C89 forbids compound literals\");\n+\t\t  if (TYPE_NAME (type) != 0)\n+\t\t    {\n+\t\t      if (TREE_CODE (TYPE_NAME (type)) == IDENTIFIER_NODE)\n+\t\t\tname = IDENTIFIER_POINTER (TYPE_NAME (type));\n+\t\t      else\n+\t\t\tname = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n+\t\t    }\n+\t\t  else\n+\t\t    name = \"\";\n+\t\t  $$ = result;\n+\t\t  if (TREE_CODE (type) == ARRAY_TYPE && !COMPLETE_TYPE_P (type))\n+\t\t    {\n+\t\t      int failure = complete_array_type (type, $$, 1);\n+\t\t      if (failure)\n+\t\t\tabort ();\n+\t\t    }\n+\t\t}\n \t| '(' expr ')'\n \t\t{ char class = TREE_CODE_CLASS (TREE_CODE ($2));\n \t\t  if (class == 'e' || class == '1'"}, {"sha": "c68a93d35f02ec313cfce79034ff230352143aeb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedd825f0f18088f7235f02136021bd63a2e12df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedd825f0f18088f7235f02136021bd63a2e12df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cedd825f0f18088f7235f02136021bd63a2e12df", "patch": "@@ -1,3 +1,7 @@\n+2001-01-24  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.c-torture/compile/20010124-1.c: New test.\n+\n 2001-01-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.pt/spec38.C: New test."}, {"sha": "dd2d9c11737f07cc5afc61f18b35b1afdd79a6b9", "filename": "gcc/testsuite/gcc.c-torture/compile/20010124-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cedd825f0f18088f7235f02136021bd63a2e12df/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010124-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cedd825f0f18088f7235f02136021bd63a2e12df/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010124-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010124-1.c?ref=cedd825f0f18088f7235f02136021bd63a2e12df", "patch": "@@ -0,0 +1,9 @@\n+/* Origin: testcase from Joseph Myers <jsm28@cam.ac.uk>, problem pointed\n+   out in a post to comp.std.c\n+   <980283801.3063.0.nnrp-07.c2deb1c2@news.demon.co.uk>\n+   by Dibyendu Majumdar <dibyendu@mazumdar.demon.co.uk>.\n+   Compound literals should be parsed as postfix expressions, rather than\n+   as cast expressions.  In particular, they are valid operands of sizeof.  */\n+\n+struct s { int a; int b; };\n+char x[((sizeof (struct s){ 1, 2 }) == sizeof (struct s)) ? 1 : -1];"}]}