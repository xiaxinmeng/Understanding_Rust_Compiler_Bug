{"sha": "67f7c3918150e70c096d69d563c4bc01f22b3793", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdmN2MzOTE4MTUwZTcwYzA5NmQ2OWQ1NjNjNGJjMDFmMjJiMzc5Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-07-23T02:29:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-07-23T02:29:34Z"}, "message": "class.c (build_vtable): Pass at_eof to import_export_vtable.\n\n\t* class.c (build_vtable): Pass at_eof to import_export_vtable.\n\t(prepare_fresh_vtable): Likewise.\n\t* decl2.c (import_export_class): Split out...\n\t(finish_prevtable_vardecl): From here.\n\t* class.c (finish_struct_1): Call import_export_class if at_eof.\n\t* decl.c (start_function): #if 0 mysterious code I wrote and have\n\tforgotten why.\n\t* rtti.c (get_tinfo_fn): If this is for a class type, set\n\tDECL_CONTEXT.\n\nFrom-SVN: r21345", "tree": {"sha": "e4ff50d1659a906f2d15e18dc6ec669ec8964826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4ff50d1659a906f2d15e18dc6ec669ec8964826"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67f7c3918150e70c096d69d563c4bc01f22b3793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f7c3918150e70c096d69d563c4bc01f22b3793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f7c3918150e70c096d69d563c4bc01f22b3793", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f7c3918150e70c096d69d563c4bc01f22b3793/comments", "author": null, "committer": null, "parents": [{"sha": "1af1ed70350cb1ead004cbad75069e683b9a5d9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af1ed70350cb1ead004cbad75069e683b9a5d9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af1ed70350cb1ead004cbad75069e683b9a5d9a"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "06e62e57fd798532ccd35c15f7aeed08f0d71fab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f7c3918150e70c096d69d563c4bc01f22b3793/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f7c3918150e70c096d69d563c4bc01f22b3793/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=67f7c3918150e70c096d69d563c4bc01f22b3793", "patch": "@@ -1,3 +1,16 @@\n+1998-07-23  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* class.c (build_vtable): Pass at_eof to import_export_vtable.\n+\t(prepare_fresh_vtable): Likewise.\n+\t* decl2.c (import_export_class): Split out...\n+\t(finish_prevtable_vardecl): From here.\n+\t* class.c (finish_struct_1): Call import_export_class if at_eof.\n+\n+\t* decl.c (start_function): #if 0 mysterious code I wrote and have \n+\tforgotten why.\n+\t* rtti.c (get_tinfo_fn): If this is for a class type, set\n+\tDECL_CONTEXT.\n+\n 1998-07-22  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* inc/exception: Change terminate and unexpected to ()."}, {"sha": "714aad64225b2beb4f72d8d3e3b49a60b291777b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f7c3918150e70c096d69d563c4bc01f22b3793/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f7c3918150e70c096d69d563c4bc01f22b3793/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=67f7c3918150e70c096d69d563c4bc01f22b3793", "patch": "@@ -704,7 +704,7 @@ build_vtable (binfo, type)\n #endif\n \n   /* Set TREE_PUBLIC and TREE_EXTERN as appropriate.  */\n-  import_export_vtable (decl, type, 0);\n+  import_export_vtable (decl, type, at_eof);\n \n   decl = pushdecl_top_level (decl);\n   SET_IDENTIFIER_GLOBAL_VALUE (name, decl);\n@@ -890,7 +890,7 @@ prepare_fresh_vtable (binfo, for_type)\n #endif\n \n   /* Set TREE_PUBLIC and TREE_EXTERN as appropriate.  */\n-  import_export_vtable (new_decl, for_type, 0);\n+  import_export_vtable (new_decl, for_type, at_eof);\n \n   if (TREE_VIA_VIRTUAL (binfo))\n     my_friendly_assert (binfo == binfo_member (BINFO_TYPE (binfo),\n@@ -3943,6 +3943,11 @@ finish_struct_1 (t, warn_anon)\n   if (max_has_virtual > 0)\n     TYPE_VIRTUAL_P (t) = 1;\n \n+  /* Do this here before we start messing with vtables so that we are ready\n+     for import_export_vtable.  */\n+  if (at_eof)\n+    import_export_class (t);\n+\n   if (flag_rtti && TYPE_VIRTUAL_P (t) && !pending_hard_virtuals)\n     modify_all_vtables (t, NULL_TREE, NULL_TREE);\n "}, {"sha": "51835de5ea779376123f5146206ef35c4a87569c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f7c3918150e70c096d69d563c4bc01f22b3793/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f7c3918150e70c096d69d563c4bc01f22b3793/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=67f7c3918150e70c096d69d563c4bc01f22b3793", "patch": "@@ -11959,8 +11959,11 @@ start_function (declspecs, declarator, attrs, pre_parsed_p)\n     {\n       decl1 = declarator;\n \n+#if 0\n+      /* What was this testing for, exactly?  */\n       if (! DECL_ARGUMENTS (decl1)\n \t  && !DECL_STATIC_FUNCTION_P (decl1)\n+\t  && !DECL_ARTIFICIAL (decl1)\n \t  && DECL_CLASS_SCOPE_P (decl1)\n \t  && TYPE_IDENTIFIER (DECL_CONTEXT (decl1))\n \t  && IDENTIFIER_TEMPLATE (TYPE_IDENTIFIER (DECL_CONTEXT (decl1))))\n@@ -11973,6 +11976,7 @@ start_function (declspecs, declarator, attrs, pre_parsed_p)\n \t  else if (BINDING_VALUE (binding))\n \t    cp_error_at (\"previous declaration here\", BINDING_VALUE (binding));\n \t}\n+#endif\n \n       fntype = TREE_TYPE (decl1);\n       if (TREE_CODE (fntype) == METHOD_TYPE)"}, {"sha": "270c2fd9a15818e0b9ad1f035fea86655ddc5c19", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f7c3918150e70c096d69d563c4bc01f22b3793/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f7c3918150e70c096d69d563c4bc01f22b3793/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=67f7c3918150e70c096d69d563c4bc01f22b3793", "patch": "@@ -2607,12 +2607,11 @@ import_export_template (type)\n       CLASSTYPE_VTABLE_NEEDS_WRITING (type) = 0;\n     }\n }\n-    \n-int\n-finish_prevtable_vardecl (prev, vars)\n-     tree prev, vars;\n+\n+void\n+import_export_class (ctype)\n+     tree ctype;\n {\n-  tree ctype = DECL_CONTEXT (vars);\n   import_export_template (ctype);\n \n #ifndef MULTIPLE_SYMBOL_SPACES\n@@ -2636,7 +2635,14 @@ finish_prevtable_vardecl (prev, vars)\n \t}\n     }\n #endif\n-\n+}\n+    \n+int\n+finish_prevtable_vardecl (prev, vars)\n+     tree prev, vars;\n+{\n+  tree ctype = DECL_CONTEXT (vars);\n+  import_export_class (ctype);\n   import_export_vtable (vars, ctype, 1);\n   return 1;\n }"}, {"sha": "0750fa3649bf32ee36479caca2da9e3da2c45167", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f7c3918150e70c096d69d563c4bc01f22b3793/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f7c3918150e70c096d69d563c4bc01f22b3793/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=67f7c3918150e70c096d69d563c4bc01f22b3793", "patch": "@@ -368,6 +368,17 @@ get_tinfo_fn (type)\n   DECL_NOT_REALLY_EXTERN (d) = 1;\n   DECL_MUTABLE_P (d) = 1;\n   TREE_TYPE (name) = copy_to_permanent (type);\n+\n+  /* We set DECL_CONTEXT for the benefit of backend stuff that wants to\n+     know what type this artificial function is associated with.  dllexport\n+     handling, for instance.  This is a kludge, and the DECL_NO_STATIC_CHAIN\n+     bit is necessary to keep local classes from breaking.  */\n+  if (IS_AGGR_TYPE (type))\n+    {\n+      DECL_CONTEXT (d) = type;\n+      DECL_NO_STATIC_CHAIN (d) = 1;\n+    }\n+\n   pushdecl_top_level (d);\n   make_function_rtl (d);\n   assemble_external (d);"}]}