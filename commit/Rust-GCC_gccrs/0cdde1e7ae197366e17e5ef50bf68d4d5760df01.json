{"sha": "0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNkZGUxZTdhZTE5NzM2NmUxN2U1ZWY1MGJmNjhkNGQ1NzYwZGYwMQ==", "commit": {"author": {"name": "Nikhil Benesch", "email": "nikhil.benesch@gmail.com", "date": "2020-10-26T18:42:08Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-10-29T01:20:50Z"}, "message": "libgo: handle linking to NetBSD's versioned symbols\n\nOn NetBSD, for backwards compatibility, various libc symbols are\nrenamed to a symbol with a version suffix. For example, this is the\n(abbreviated) definition of sigaction:\n\n    int sigaction(...) __asm__ (\"__sigaction14\")\n\nThis poses a challenge for libgo, which attempts to link sigaction by\nway of an \"//extern\" comment:\n\n    //extern sigaction\n    func sigaction(...)\n\nThis results in a reference to the deprecated compatibility symbol\n\"sigaction\", rather than the desired \"__sigaction14\" symbol.\n\nThis patch introduces a new \"//extern-sysinfo\" comment to handle this\nsituation. The new mklinknames.awk script scans a package for these\ncomments and outputs a \"//go:linkname\" directive that links the wrapper\nto the correct versioned symbol, as determined by parsing the __asm__\nannotation on the function's declaration in gen-sysinfo.go.\n\nFor now, only the following packages are scanned by mklinknames.awk:\n\n    os\n    os/user\n    runtime\n    syscall\n\ngotools/:\n\t* Makefile.am (check-runtime): Add runtime_linknames.go to\n\t--extrafiles.\n\t* Makefile.in: Regenerate.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/265125", "tree": {"sha": "35bfb1e6e1551c39558abb3b699b032e952823c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35bfb1e6e1551c39558abb3b699b032e952823c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/comments", "author": {"login": "benesch", "id": 882976, "node_id": "MDQ6VXNlcjg4Mjk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/882976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benesch", "html_url": "https://github.com/benesch", "followers_url": "https://api.github.com/users/benesch/followers", "following_url": "https://api.github.com/users/benesch/following{/other_user}", "gists_url": "https://api.github.com/users/benesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/benesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benesch/subscriptions", "organizations_url": "https://api.github.com/users/benesch/orgs", "repos_url": "https://api.github.com/users/benesch/repos", "events_url": "https://api.github.com/users/benesch/events{/privacy}", "received_events_url": "https://api.github.com/users/benesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e93aae4a497c38b46df818a629c78149fe6af24b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93aae4a497c38b46df818a629c78149fe6af24b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93aae4a497c38b46df818a629c78149fe6af24b"}], "stats": {"total": 241, "additions": 202, "deletions": 39}, "files": [{"sha": "149f20077e3cc71eb8c8adfac31c86b6740c8fdd", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -1,4 +1,4 @@\n-88a25df9133e9a1fc28a00b08ee30d7e5ab2cdbb\n+ae20684902b82883d3d65f2cde0894c7cb3b995b\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "1b8702e98bb513415a5168ac1cdb7b937a80713c", "filename": "gotools/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/gotools%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/gotools%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FMakefile.am?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -241,14 +241,14 @@ check-runtime: go$(EXEEXT) $(noinst_PROGRAMS) check-head check-gccgo check-gcc\n \texport LD_LIBRARY_PATH; \\\n \tGOARCH=`$(abs_builddir)/go$(EXEEXT) env GOARCH`; \\\n \tGOOS=`$(abs_builddir)/go$(EXEEXT) env GOOS`; \\\n-\tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go\" --tag=libffi`; \\\n+\tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_linknames.go $(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go\" --tag=libffi`; \\\n \techo \"$(ECHO_ENV) GC='$(abs_builddir)/check-gccgo -fgo-compiling-runtime' GOARCH=$${GOARCH} GOOS=$${GOOS} $(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles='$${files}' $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v\" > runtime-testlog\n \t$(CHECK_ENV) \\\n \tGC=\"$${GCCGO} -fgo-compiling-runtime\"; \\\n \texport GC; \\\n \tGOARCH=`$(abs_builddir)/go$(EXEEXT) env GOARCH`; \\\n \tGOOS=`$(abs_builddir)/go$(EXEEXT) env GOOS`; \\\n-\tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go\" --tag=libffi`; \\\n+\tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_linknames.go $(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go\" --tag=libffi`; \\\n \t$(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles=\"$${files}\" $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v >> runtime-testlog 2>&1 || echo \"--- $${fl}: go test runtime (0.00s)\" >> runtime-testlog\n \tgrep '^--- ' runtime-testlog | sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/' | sort -k 2\n "}, {"sha": "9292312a38532b3d1109e955ba5f3409b5d36c96", "filename": "gotools/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/gotools%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/gotools%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FMakefile.in?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -912,14 +912,14 @@ mostlyclean-local:\n @NATIVE_TRUE@\texport LD_LIBRARY_PATH; \\\n @NATIVE_TRUE@\tGOARCH=`$(abs_builddir)/go$(EXEEXT) env GOARCH`; \\\n @NATIVE_TRUE@\tGOOS=`$(abs_builddir)/go$(EXEEXT) env GOOS`; \\\n-@NATIVE_TRUE@\tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go\" --tag=libffi`; \\\n+@NATIVE_TRUE@\tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_linknames.go $(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go\" --tag=libffi`; \\\n @NATIVE_TRUE@\techo \"$(ECHO_ENV) GC='$(abs_builddir)/check-gccgo -fgo-compiling-runtime' GOARCH=$${GOARCH} GOOS=$${GOOS} $(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles='$${files}' $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v\" > runtime-testlog\n @NATIVE_TRUE@\t$(CHECK_ENV) \\\n @NATIVE_TRUE@\tGC=\"$${GCCGO} -fgo-compiling-runtime\"; \\\n @NATIVE_TRUE@\texport GC; \\\n @NATIVE_TRUE@\tGOARCH=`$(abs_builddir)/go$(EXEEXT) env GOARCH`; \\\n @NATIVE_TRUE@\tGOOS=`$(abs_builddir)/go$(EXEEXT) env GOOS`; \\\n-@NATIVE_TRUE@\tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go\" --tag=libffi`; \\\n+@NATIVE_TRUE@\tfiles=`$(SHELL) $(libgosrcdir)/../match.sh --goarch=$${GOARCH} --goos=$${GOOS} --srcdir=$(libgosrcdir)/runtime --extrafiles=\"$(libgodir)/runtime_linknames.go $(libgodir)/runtime_sysinfo.go $(libgodir)/sigtab.go\" --tag=libffi`; \\\n @NATIVE_TRUE@\t$(SHELL) $(libgosrcdir)/../testsuite/gotest --goarch=$${GOARCH} --goos=$${GOOS} --basedir=$(libgosrcdir)/.. --srcdir=$(libgosrcdir)/runtime --pkgpath=runtime --pkgfiles=\"$${files}\" $(GOTESTFLAGS) -test.timeout=$(GOTOOLS_TEST_TIMEOUT)s -test.v >> runtime-testlog 2>&1 || echo \"--- $${fl}: go test runtime (0.00s)\" >> runtime-testlog\n @NATIVE_TRUE@\tgrep '^--- ' runtime-testlog | sed -e 's/^--- \\(.*\\) ([^)]*)$$/\\1/' | sort -k 2\n "}, {"sha": "f7a163e4a84ac7b8bc4ac138b0bad174694ba9c1", "filename": "libgo/Makefile.am", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -574,6 +574,48 @@ s-gccgosizes: Makefile goarch.sh\n \t$(SHELL) $(srcdir)/mvifdiff.sh gccgosizes.go.tmp gccgosizes.go\n \t$(STAMP) $@\n \n+os_linknames.go: s-os_linknames; @true\n+s-os_linknames: os-list gen-sysinfo.go $(srcdir)/mklinknames.awk $(srcdir)/go/os/*.go\n+\trm -f os_linknames.go.tmp\n+\t$(AWK) -f $(srcdir)/mklinknames.awk -v package=os `cat os-list` > os_linknames.go.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh os_linknames.go.tmp os_linknames.go\n+\t$(STAMP) $@\n+\n+os-list: s-os-list; @true\n+s-os-list: Makefile $(srcdir)/go/os/*.go\n+\trm -f os-list.tmp\n+\t$(SHELL) $(srcdir)/match.sh --goarch=$(GOARCH) --goos=$(GOOS) --srcdir=$(srcdir)/go/os > os-list.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh os-list.tmp os-list\n+\t$(STAMP) $@\n+\n+os_user_linknames.go: s-os_user_linknames; @true\n+s-os_user_linknames: os-user-list gen-sysinfo.go $(srcdir)/mklinknames.awk $(srcdir)/go/os/user/*.go\n+\trm -f os_user_linknames.go.tmp\n+\t$(AWK) -f $(srcdir)/mklinknames.awk -v package=user `cat os-user-list` > os_user_linknames.go.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh os_user_linknames.go.tmp os_user_linknames.go\n+\t$(STAMP) $@\n+\n+os-user-list: s-os-user-list; @true\n+s-os-user-list: Makefile $(srcdir)/go/os/user/*.go\n+\trm -f os-user-list.tmp\n+\t$(SHELL) $(srcdir)/match.sh --goarch=$(GOARCH) --goos=$(GOOS) --srcdir=$(srcdir)/go/os/user > os-user-list.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh os-user-list.tmp os-user-list\n+\t$(STAMP) $@\n+\n+runtime_linknames.go: s-runtime_linknames; @true\n+s-runtime_linknames: runtime-list gen-sysinfo.go $(srcdir)/mklinknames.awk $(srcdir)/go/runtime/*.go\n+\trm -f runtime_linknames.go.tmp\n+\t$(AWK) -f $(srcdir)/mklinknames.awk -v package=runtime `cat runtime-list` > runtime_linknames.go.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh runtime_linknames.go.tmp runtime_linknames.go\n+\t$(STAMP) $@\n+\n+runtime-list: s-runtime-list; @true\n+s-runtime-list: Makefile $(srcdir)/go/runtime/*.go\n+\trm -f runtime-list.tmp\n+\t$(SHELL) $(srcdir)/match.sh --goarch=$(GOARCH) --goos=$(GOOS) --srcdir=$(srcdir)/go/runtime > runtime-list.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh runtime-list.tmp runtime-list\n+\t$(STAMP) $@\n+\n runtime_sysinfo.go: s-runtime_sysinfo; @true\n s-runtime_sysinfo: $(srcdir)/mkrsysinfo.sh gen-sysinfo.go\n \tGOARCH=$(GOARCH) GOOS=$(GOOS) $(SHELL) $(srcdir)/mkrsysinfo.sh\n@@ -654,6 +696,13 @@ s-syscall_arch: Makefile\n \t$(SHELL) $(srcdir)/mvifdiff.sh syscall_arch.go.tmp syscall_arch.go\n \t$(STAMP) $@\n \n+syscall_linknames.go: s-syscall_linknames; @true\n+s-syscall_linknames: libcalls.go gen-sysinfo.go $(srcdir)/mklinknames.awk\n+\trm -f syscall_linknames.go.tmp\n+\t$(AWK) -v package=syscall -f $(srcdir)/mklinknames.awk libcalls.go > syscall_linknames.go.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh syscall_linknames.go.tmp syscall_linknames.go\n+\t$(STAMP) $@\n+\n SYSINFO_FLAGS = \\\n \t$(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n \t$(CPPFLAGS) $(OSCFLAGS) -O\n@@ -940,15 +989,16 @@ $(foreach package,$(GOTOOL_PACKAGES),$(eval $(call PACKAGE_template,$(package)))\n math_lo_GOCFLAGS = $(MATH_FLAG)\n math_check_GOCFLAGS = $(MATH_FLAG)\n \n-# Add the generated file runtime_sysinfo.go to the runtime package.\n-extra_go_files_runtime = runtime_sysinfo.go sigtab.go\n+# Add generated files to the runtime package.\n+extra_go_files_runtime = runtime_linknames.go runtime_sysinfo.go sigtab.go\n runtime.lo.dep: $(extra_go_files_runtime)\n \n # Add generated files to the syscall package.\n extra_go_files_syscall = \\\n \tlibcalls.go \\\n \tsysinfo.go \\\n \tsyscall_arch.go \\\n+\tsyscall_linknames.go \\\n \t$(syscall_epoll_file)\n syscall.lo.dep: $(extra_go_files_syscall)\n \n@@ -1006,6 +1056,12 @@ cmd/internal/objabi.lo.dep: $(extra_go_files_cmd_internal_objabi)\n extra_go_files_cmd_go_internal_cfg = zdefaultcc.go\n cmd/go/internal/cfg.lo.dep: $(extra_go_files_cmd_go_internal_cfg)\n \n+extra_go_files_os = os_linknames.go\n+os.lo.dep: $(extra_go_files_os)\n+\n+extra_go_files_os_user = os_user_linknames.go\n+os/user.lo.dep: $(extra_go_files_os_user)\n+\n extra_check_libs_cmd_go_internal_cache = $(abs_builddir)/libgotool.a\n extra_check_libs_cmd_go_internal_generate = $(abs_builddir)/libgotool.a\n extra_check_libs_cmd_go_internal_get = $(abs_builddir)/libgotool.a"}, {"sha": "ba202a639eb520d94e849353d5d4b911f251ad31", "filename": "libgo/Makefile.in", "status": "modified", "additions": 56, "deletions": 2, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -1085,14 +1085,15 @@ CHECK_DEPS = $(toolexeclibgo_DATA) $(toolexeclibgoarchive_DATA) \\\n math_lo_GOCFLAGS = $(MATH_FLAG)\n math_check_GOCFLAGS = $(MATH_FLAG)\n \n-# Add the generated file runtime_sysinfo.go to the runtime package.\n-extra_go_files_runtime = runtime_sysinfo.go sigtab.go\n+# Add generated files to the runtime package.\n+extra_go_files_runtime = runtime_linknames.go runtime_sysinfo.go sigtab.go\n \n # Add generated files to the syscall package.\n extra_go_files_syscall = \\\n \tlibcalls.go \\\n \tsysinfo.go \\\n \tsyscall_arch.go \\\n+\tsyscall_linknames.go \\\n \t$(syscall_epoll_file)\n \n \n@@ -1128,6 +1129,8 @@ extra_go_files_internal_goroot = zstdpkglist.go\n extra_go_files_go_types = gccgosizes.go\n extra_go_files_cmd_internal_objabi = objabi.go\n extra_go_files_cmd_go_internal_cfg = zdefaultcc.go\n+extra_go_files_os = os_linknames.go\n+extra_go_files_os_user = os_user_linknames.go\n extra_check_libs_cmd_go_internal_cache = $(abs_builddir)/libgotool.a\n extra_check_libs_cmd_go_internal_generate = $(abs_builddir)/libgotool.a\n extra_check_libs_cmd_go_internal_get = $(abs_builddir)/libgotool.a\n@@ -2748,6 +2751,48 @@ s-gccgosizes: Makefile goarch.sh\n \t$(SHELL) $(srcdir)/mvifdiff.sh gccgosizes.go.tmp gccgosizes.go\n \t$(STAMP) $@\n \n+os_linknames.go: s-os_linknames; @true\n+s-os_linknames: os-list gen-sysinfo.go $(srcdir)/mklinknames.awk $(srcdir)/go/os/*.go\n+\trm -f os_linknames.go.tmp\n+\t$(AWK) -f $(srcdir)/mklinknames.awk -v package=os `cat os-list` > os_linknames.go.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh os_linknames.go.tmp os_linknames.go\n+\t$(STAMP) $@\n+\n+os-list: s-os-list; @true\n+s-os-list: Makefile $(srcdir)/go/os/*.go\n+\trm -f os-list.tmp\n+\t$(SHELL) $(srcdir)/match.sh --goarch=$(GOARCH) --goos=$(GOOS) --srcdir=$(srcdir)/go/os > os-list.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh os-list.tmp os-list\n+\t$(STAMP) $@\n+\n+os_user_linknames.go: s-os_user_linknames; @true\n+s-os_user_linknames: os-user-list gen-sysinfo.go $(srcdir)/mklinknames.awk $(srcdir)/go/os/user/*.go\n+\trm -f os_user_linknames.go.tmp\n+\t$(AWK) -f $(srcdir)/mklinknames.awk -v package=user `cat os-user-list` > os_user_linknames.go.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh os_user_linknames.go.tmp os_user_linknames.go\n+\t$(STAMP) $@\n+\n+os-user-list: s-os-user-list; @true\n+s-os-user-list: Makefile $(srcdir)/go/os/user/*.go\n+\trm -f os-user-list.tmp\n+\t$(SHELL) $(srcdir)/match.sh --goarch=$(GOARCH) --goos=$(GOOS) --srcdir=$(srcdir)/go/os/user > os-user-list.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh os-user-list.tmp os-user-list\n+\t$(STAMP) $@\n+\n+runtime_linknames.go: s-runtime_linknames; @true\n+s-runtime_linknames: runtime-list gen-sysinfo.go $(srcdir)/mklinknames.awk $(srcdir)/go/runtime/*.go\n+\trm -f runtime_linknames.go.tmp\n+\t$(AWK) -f $(srcdir)/mklinknames.awk -v package=runtime `cat runtime-list` > runtime_linknames.go.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh runtime_linknames.go.tmp runtime_linknames.go\n+\t$(STAMP) $@\n+\n+runtime-list: s-runtime-list; @true\n+s-runtime-list: Makefile $(srcdir)/go/runtime/*.go\n+\trm -f runtime-list.tmp\n+\t$(SHELL) $(srcdir)/match.sh --goarch=$(GOARCH) --goos=$(GOOS) --srcdir=$(srcdir)/go/runtime > runtime-list.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh runtime-list.tmp runtime-list\n+\t$(STAMP) $@\n+\n runtime_sysinfo.go: s-runtime_sysinfo; @true\n s-runtime_sysinfo: $(srcdir)/mkrsysinfo.sh gen-sysinfo.go\n \tGOARCH=$(GOARCH) GOOS=$(GOOS) $(SHELL) $(srcdir)/mkrsysinfo.sh\n@@ -2816,6 +2861,13 @@ s-syscall_arch: Makefile\n \t$(SHELL) $(srcdir)/mvifdiff.sh syscall_arch.go.tmp syscall_arch.go\n \t$(STAMP) $@\n \n+syscall_linknames.go: s-syscall_linknames; @true\n+s-syscall_linknames: libcalls.go gen-sysinfo.go $(srcdir)/mklinknames.awk\n+\trm -f syscall_linknames.go.tmp\n+\t$(AWK) -v package=syscall -f $(srcdir)/mklinknames.awk libcalls.go > syscall_linknames.go.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh syscall_linknames.go.tmp syscall_linknames.go\n+\t$(STAMP) $@\n+\n gen-sysinfo.go: s-gen-sysinfo; @true\n s-gen-sysinfo: $(srcdir)/sysinfo.c config.h\n \t$(CC) $(SYSINFO_FLAGS) -fdump-go-spec=tmp-gen-sysinfo.go -std=gnu99 -S -o sysinfo.s $(srcdir)/sysinfo.c\n@@ -2918,6 +2970,8 @@ internal/goroot.lo.dep: $(extra_go_files_internal_goroot)\n go/types.lo.dep: $(extra_go_files_go_types)\n cmd/internal/objabi.lo.dep: $(extra_go_files_cmd_internal_objabi)\n cmd/go/internal/cfg.lo.dep: $(extra_go_files_cmd_go_internal_cfg)\n+os.lo.dep: $(extra_go_files_os)\n+os/user.lo.dep: $(extra_go_files_os_user)\n \n # FIXME: The following C files may as well move to the runtime\n # directory and be treated like other C files."}, {"sha": "1126790379bdbb995aae526ffbb91e051e23a30f", "filename": "libgo/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -138,6 +138,9 @@\n /* Define to 1 if you have the `logl' function. */\n #undef HAVE_LOGL\n \n+/* Define to 1 if you have the <lwp.h> header file. */\n+#undef HAVE_LWP_H\n+\n /* Define to 1 if you have the `matherr' function. */\n #undef HAVE_MATHERR\n "}, {"sha": "e7379f87047931ace5061cbdfa0936fb99f19b59", "filename": "libgo/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -15202,7 +15202,7 @@ $as_echo \"#define HAVE_GETIPINFO 1\" >>confdefs.h\n   fi\n \n \n-for ac_header in port.h sched.h semaphore.h sys/file.h sys/mman.h syscall.h sys/epoll.h sys/event.h sys/inotify.h sys/ptrace.h sys/syscall.h sys/sysctl.h sys/user.h sys/utsname.h sys/select.h sys/socket.h net/bpf.h net/if.h net/if_arp.h net/route.h netpacket/packet.h sys/prctl.h sys/mount.h sys/vfs.h sys/statfs.h sys/timex.h sys/sysinfo.h utime.h linux/ether.h linux/fs.h linux/ptrace.h linux/reboot.h netinet/in_syst.h netinet/ip.h netinet/ip_mroute.h netinet/if_ether.h\n+for ac_header in port.h sched.h semaphore.h sys/file.h sys/mman.h syscall.h sys/epoll.h sys/event.h sys/inotify.h sys/ptrace.h sys/syscall.h sys/sysctl.h sys/user.h sys/utsname.h sys/select.h sys/socket.h net/bpf.h net/if.h net/if_arp.h net/route.h netpacket/packet.h sys/prctl.h sys/mount.h sys/vfs.h sys/statfs.h sys/timex.h sys/sysinfo.h utime.h linux/ether.h linux/fs.h linux/ptrace.h linux/reboot.h netinet/in_syst.h netinet/ip.h netinet/ip_mroute.h netinet/if_ether.h lwp.h\n do :\n   as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n ac_fn_c_check_header_mongrel \"$LINENO\" \"$ac_header\" \"$as_ac_Header\" \"$ac_includes_default\""}, {"sha": "80537f5f440acc5703eb02f84ac3a842f83071f3", "filename": "libgo/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -580,7 +580,7 @@ AC_C_BIGENDIAN\n \n GCC_CHECK_UNWIND_GETIPINFO\n \n-AC_CHECK_HEADERS(port.h sched.h semaphore.h sys/file.h sys/mman.h syscall.h sys/epoll.h sys/event.h sys/inotify.h sys/ptrace.h sys/syscall.h sys/sysctl.h sys/user.h sys/utsname.h sys/select.h sys/socket.h net/bpf.h net/if.h net/if_arp.h net/route.h netpacket/packet.h sys/prctl.h sys/mount.h sys/vfs.h sys/statfs.h sys/timex.h sys/sysinfo.h utime.h linux/ether.h linux/fs.h linux/ptrace.h linux/reboot.h netinet/in_syst.h netinet/ip.h netinet/ip_mroute.h netinet/if_ether.h)\n+AC_CHECK_HEADERS(port.h sched.h semaphore.h sys/file.h sys/mman.h syscall.h sys/epoll.h sys/event.h sys/inotify.h sys/ptrace.h sys/syscall.h sys/sysctl.h sys/user.h sys/utsname.h sys/select.h sys/socket.h net/bpf.h net/if.h net/if_arp.h net/route.h netpacket/packet.h sys/prctl.h sys/mount.h sys/vfs.h sys/statfs.h sys/timex.h sys/sysinfo.h utime.h linux/ether.h linux/fs.h linux/ptrace.h linux/reboot.h netinet/in_syst.h netinet/ip.h netinet/ip_mroute.h netinet/if_ether.h lwp.h)\n \n AC_CHECK_HEADERS([netinet/icmp6.h], [], [],\n [#include <netinet/in.h>"}, {"sha": "b2e66235493d0ed4780b53703bb53f6e99cbdaa0", "filename": "libgo/go/os/dir_regfile.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fos%2Fdir_regfile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fos%2Fdir_regfile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fdir_regfile.go?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -15,5 +15,5 @@ package os\n \n import \"syscall\"\n \n-//extern readdir_r\n+//extern-sysinfo readdir_r\n func libc_readdir_r(*syscall.DIR, *syscall.Dirent, **syscall.Dirent) syscall.Errno"}, {"sha": "6ffaced4563e5924a803ce75f069ca3a1bb00313", "filename": "libgo/go/os/user/decls_unix.go", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fos%2Fuser%2Fdecls_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fos%2Fuser%2Fdecls_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fuser%2Fdecls_unix.go?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -11,17 +11,17 @@ import \"syscall\"\n \n // Declarations for the libc functions on most Unix systems.\n \n-//extern getpwnam_r\n+//extern-sysinfo getpwnam_r\n func libc_getpwnam_r(name *byte, pwd *syscall.Passwd, buf *byte, buflen syscall.Size_t, result **syscall.Passwd) int\n \n-//extern getpwuid_r\n+//extern-sysinfo getpwuid_r\n func libc_getpwuid_r(uid syscall.Uid_t, pwd *syscall.Passwd, buf *byte, buflen syscall.Size_t, result **syscall.Passwd) int\n \n-//extern getgrnam_r\n+//extern-sysinfo getgrnam_r\n func libc_getgrnam_r(name *byte, grp *syscall.Group, buf *byte, buflen syscall.Size_t, result **syscall.Group) int\n \n-//extern getgrgid_r\n+//extern-sysinfo getgrgid_r\n func libc_getgrgid_r(gid syscall.Gid_t, grp *syscall.Group, buf *byte, buflen syscall.Size_t, result **syscall.Group) int\n \n-//extern getgrouplist\n+//extern-sysinfo getgrouplist\n func libc_getgrouplist(user *byte, group syscall.Gid_t, groups *syscall.Gid_t, ngroups *int32) int"}, {"sha": "1724f37e7322758ede422f1ac9daac0757caa12a", "filename": "libgo/go/runtime/netpoll_kqueue.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fruntime%2Fnetpoll_kqueue.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fruntime%2Fnetpoll_kqueue.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fnetpoll_kqueue.go?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -13,11 +13,11 @@ import (\n \t\"unsafe\"\n )\n \n-//extern kqueue\n+//extern-sysinfo kqueue\n func kqueue() int32\n \n //go:noescape\n-//extern kevent\n+//extern-sysinfo kevent\n func kevent(kq int32, ch *keventt, nch uintptr, ev *keventt, nev uintptr, ts *timespec) int32\n \n var ("}, {"sha": "79331c5bbe3e7ef4bac0f8457794cda3f7dedbc0", "filename": "libgo/go/runtime/os_gccgo.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fruntime%2Fos_gccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fruntime%2Fos_gccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_gccgo.go?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -52,7 +52,7 @@ func getRandomData(r []byte) {\n }\n \n //go:noescape\n-//extern pipe\n+//extern-sysinfo pipe\n func libcPipe(*[2]int32) int32\n \n func pipe() (r, w int32, e int32) {\n@@ -65,7 +65,7 @@ func pipe() (r, w int32, e int32) {\n }\n \n //go:noescape\n-//extern pipe2\n+//extern-sysinfo pipe2\n func libcPipe2(*[2]int32, int32) int32\n \n func pipe2(flags int32) (r, w int32, e int32) {"}, {"sha": "00c32856616c23e96ac2a45d9a47c6fc93c43b72", "filename": "libgo/go/runtime/os_netbsd.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fruntime%2Fos_netbsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fruntime%2Fos_netbsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fos_netbsd.go?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -18,19 +18,19 @@ func getProcID() uint64 {\n \treturn uint64(lwp_self())\n }\n \n-//extern _lwp_self\n+//extern-sysinfo _lwp_self\n func lwp_self() int32\n \n //go:noescape\n-//extern _lwp_park\n+//extern-sysinfo _lwp_park\n func lwp_park(ts int32, rel int32, abstime *timespec, unpark int32, hint, unparkhint unsafe.Pointer) int32\n \n //go:noescape\n-//extern _lwp_unpark\n+//extern-sysinfo _lwp_unpark\n func lwp_unpark(lwp int32, hint unsafe.Pointer) int32\n \n //go:noescape\n-//extern sysctl\n+//extern-sysinfo sysctl\n func sysctl(*uint32, uint32, *byte, *uintptr, *byte, uintptr) int32\n \n func getncpu() int32 {"}, {"sha": "2eece687e35bebb95b454c66ee60213bae0a7a73", "filename": "libgo/go/runtime/signal_gccgo.go", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fruntime%2Fsignal_gccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fruntime%2Fsignal_gccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fsignal_gccgo.go?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -14,44 +14,44 @@ import (\n // these are written in OS-specific files and in assembler.\n \n //go:noescape\n-//extern sigaction\n+//extern-sysinfo sigaction\n func sigaction(signum uint32, act *_sigaction, oact *_sigaction) int32\n \n //go:noescape\n-//extern sigprocmask\n+//extern-sysinfo sigprocmask\n func sigprocmask(how int32, set *sigset, oldset *sigset) int32\n \n //go:noescape\n-//extern sigfillset\n+//extern-sysinfo sigfillset\n func sigfillset(set *sigset) int32\n \n //go:noescape\n-//extern sigemptyset\n+//extern-sysinfo sigemptyset\n func sigemptyset(set *sigset) int32\n \n //go:noescape\n-//extern sigaddset\n+//extern-sysinfo sigaddset\n func c_sigaddset(set *sigset, signum uint32) int32\n \n //go:noescape\n-//extern sigdelset\n+//extern-sysinfo sigdelset\n func c_sigdelset(set *sigset, signum uint32) int32\n \n //go:noescape\n-//extern sigaltstack\n+//extern-sysinfo sigaltstack\n func sigaltstack(ss *_stack_t, oss *_stack_t) int32\n \n-//extern raise\n+//extern-sysinfo raise\n func raise(sig uint32) int32\n \n-//extern getpid\n+//extern-sysinfo getpid\n func getpid() _pid_t\n \n-//extern kill\n+//extern-sysinfo kill\n func kill(pid _pid_t, sig uint32) int32\n \n //go:noescape\n-//extern setitimer\n+//extern-sysinfo setitimer\n func setitimer(which int32, new *_itimerval, old *_itimerval) int32\n \n type sigctxt struct {"}, {"sha": "0aaed29ee871eb69230830ce208413f1922f754b", "filename": "libgo/go/runtime/stubs2.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fruntime%2Fstubs2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fruntime%2Fstubs2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstubs2.go?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -17,7 +17,7 @@ func read(fd int32, p unsafe.Pointer, n int32) int32\n \n func closefd(fd int32) int32\n \n-//extern exit\n+//extern-sysinfo exit\n func exit(code int32)\n func usleep(usec uint32)\n "}, {"sha": "5f467278a034824ee2676d2536e887876a5d93ad", "filename": "libgo/go/syscall/mksyscall.awk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fsyscall%2Fmksyscall.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fgo%2Fsyscall%2Fmksyscall.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fmksyscall.awk?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -28,7 +28,7 @@\n # type, without a name.\n \n BEGIN {\n-    print \"// This file was automatically generated by mksyscall.awk\"\n+    print \"// Code generated by mksyscall.awk. DO NOT EDIT.\"\n     print \"\"\n     print \"package syscall\"\n     print \"\"\n@@ -99,7 +99,7 @@ BEGIN {\n     if (!(cfnname in cfns)) {\n         cfns[cfnname] = 1\n         printf(\"//go:noescape\\n\")\n-        printf(\"//extern %s\\n\", cfnname)\n+        printf(\"//extern-sysinfo %s\\n\", cfnname)\n         printf(\"func c_%s(%s) %s\\n\", cfnname, cfnparams, cfnresult)\n     }\n     printf(\"func %s(%s) %s%s%s%s{\\n\","}, {"sha": "71cb3be79669f240e00b5745132b3be456e59a41", "filename": "libgo/mklinknames.awk", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fmklinknames.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fmklinknames.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmklinknames.awk?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -0,0 +1,46 @@\n+# Copyright 2020 The Go Authors. All rights reserved.\n+# Use of this source code is governed by a BSD-style\n+# license that can be found in the LICENSE file.\n+\n+# This AWK script reads a Go file with special //extern-sysinfo\n+# comments annotating functions which should be linked to libc\n+# functions. It generates a Go file containing the appropriate\n+# //go:linkname directives.\n+#\n+# For each annotated function, the script searches gen-sysinfo.go\n+# to see if a different assembly name is known for the function.\n+# For example, on NetBSD, the timegm symbol is renamed to\n+# __timegm50 by an __asm__ annotation on its declaration in time.h.\n+\n+BEGIN {\n+    print \"// Code generated by mklinknames.awk. DO NOT EDIT.\"\n+    print \"\"\n+    print \"package\", package\n+    print \"\"\n+    print \"import _ \\\"unsafe\\\"\"\n+    print \"\"\n+}\n+\n+/^\\/\\/extern-sysinfo/ {\n+    cfnname = $2\n+    getline\n+    if ($1 != \"func\") {\n+\tprintf(\"mklinknames.awk: error: %s:%d: unattached extern-sysinfo directive\\n\", FILENAME, FNR) | \"cat 1>&2\"\n+\texit 1\n+    }\n+    split($2, a, \"(\")\n+    gofnname = a[1]\n+    def = sprintf(\"grep '^func _%s[ (]' gen-sysinfo.go\", cfnname)\n+    # def looks like one of the following:\n+    #     func _timegm (*_tm) int64 __asm__(\"__timegm50\")\n+    #     func _timegm (*_tm) int64 __asm__(\"*__timegm50\")\n+    # The goal is to extract \"__timegm50\".\n+    if ((def | getline fndef) > 0 && match(fndef, \"__asm__\\\\(\\\"\\\\*?\")) {\n+\tasmname = substr(fndef, RSTART + RLENGTH)\n+\tasmname = substr(asmname, 0, length(asmname) - 2)\n+\tprintf(\"//go:linkname %s %s\\n\", gofnname, asmname)\n+    } else {\n+\t# Assume the asm name is the same as the declared C name.\n+\tprintf(\"//go:linkname %s %s\\n\", gofnname, cfnname)\n+    }\n+}"}, {"sha": "7086381a14c3915ac42d6bfee7be34cef82e5af6", "filename": "libgo/sysinfo.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fsysinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cdde1e7ae197366e17e5ef50bf68d4d5760df01/libgo%2Fsysinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsysinfo.c?ref=0cdde1e7ae197366e17e5ef50bf68d4d5760df01", "patch": "@@ -10,6 +10,7 @@\n #include \"config.h\"\n \n #include <stddef.h>\n+#include <stdlib.h>\n #include <sys/types.h>\n #include <dirent.h>\n #include <errno.h>\n@@ -177,6 +178,9 @@\n #if defined(HAVE_PORT_H)\n #include <port.h>\n #endif\n+#if defined(HAVE_LWP_H)\n+#include <lwp.h>\n+#endif\n \n #ifdef USE_LIBFFI\n #include \"ffi.h\""}]}