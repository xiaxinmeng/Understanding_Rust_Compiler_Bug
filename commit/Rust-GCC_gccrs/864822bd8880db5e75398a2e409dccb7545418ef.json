{"sha": "864822bd8880db5e75398a2e409dccb7545418ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY0ODIyYmQ4ODgwZGI1ZTc1Mzk4YTJlNDA5ZGNjYjc1NDU0MThlZg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2015-01-06T20:44:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-01-06T20:44:32Z"}, "message": "re PR c++/64489 (A simple struct wrapping a const int is not trivially copyable)\n\n\tPR c++/64489\n\t* class.c (check_field_decls): Make copy assignment operators\n\tcomplex only in c++98 mode.\n\nFrom-SVN: r219265", "tree": {"sha": "a13a58d2c9f4194eb423925bafcc02a58f365f02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a13a58d2c9f4194eb423925bafcc02a58f365f02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/864822bd8880db5e75398a2e409dccb7545418ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/864822bd8880db5e75398a2e409dccb7545418ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/864822bd8880db5e75398a2e409dccb7545418ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/864822bd8880db5e75398a2e409dccb7545418ef/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "512ef949392e2dbcc9d4e76b855da765c68db371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512ef949392e2dbcc9d4e76b855da765c68db371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/512ef949392e2dbcc9d4e76b855da765c68db371"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "9c0159f812bf546b57fe2e315d09a5930d2b2404", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864822bd8880db5e75398a2e409dccb7545418ef/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864822bd8880db5e75398a2e409dccb7545418ef/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=864822bd8880db5e75398a2e409dccb7545418ef", "patch": "@@ -1,3 +1,9 @@\n+2015-01-06  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR c++/64489\n+\t* class.c (check_field_decls): Make copy assignment operators\n+\tcomplex only in c++98 mode.\n+\n 2015-01-05  Trevor Saunders  <tsaunders@mozilla.com>\n \n \tPR c++/31397"}, {"sha": "2153a73241a3201b1240df9b79658c63e15ee067", "filename": "gcc/cp/class.c", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864822bd8880db5e75398a2e409dccb7545418ef/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864822bd8880db5e75398a2e409dccb7545418ef/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=864822bd8880db5e75398a2e409dccb7545418ef", "patch": "@@ -3607,13 +3607,15 @@ check_field_decls (tree t, tree *access_decls,\n \t  CLASSTYPE_NON_STD_LAYOUT (t) = 1;\n \t  if (DECL_INITIAL (x) == NULL_TREE)\n \t    SET_CLASSTYPE_REF_FIELDS_NEED_INIT (t, 1);\n-\n-\t  /* ARM $12.6.2: [A member initializer list] (or, for an\n-\t     aggregate, initialization by a brace-enclosed list) is the\n-\t     only way to initialize nonstatic const and reference\n-\t     members.  */\n-\t  TYPE_HAS_COMPLEX_COPY_ASSIGN (t) = 1;\n-\t  TYPE_HAS_COMPLEX_MOVE_ASSIGN (t) = 1;\n+\t  if (cxx_dialect < cxx11)\n+\t    {\n+\t      /* ARM $12.6.2: [A member initializer list] (or, for an\n+\t\t aggregate, initialization by a brace-enclosed list) is the\n+\t\t only way to initialize nonstatic const and reference\n+\t\t members.  */\n+\t      TYPE_HAS_COMPLEX_COPY_ASSIGN (t) = 1;\n+\t      TYPE_HAS_COMPLEX_MOVE_ASSIGN (t) = 1;\n+\t    }\n \t}\n \n       type = strip_array_types (type);\n@@ -3715,13 +3717,15 @@ check_field_decls (tree t, tree *access_decls,\n \t  C_TYPE_FIELDS_READONLY (t) = 1;\n \t  if (DECL_INITIAL (x) == NULL_TREE)\n \t    SET_CLASSTYPE_READONLY_FIELDS_NEED_INIT (t, 1);\n-\n-\t  /* ARM $12.6.2: [A member initializer list] (or, for an\n-\t     aggregate, initialization by a brace-enclosed list) is the\n-\t     only way to initialize nonstatic const and reference\n-\t     members.  */\n-\t  TYPE_HAS_COMPLEX_COPY_ASSIGN (t) = 1;\n-\t  TYPE_HAS_COMPLEX_MOVE_ASSIGN (t) = 1;\n+\t  if (cxx_dialect < cxx11)\n+\t    {\n+\t      /* ARM $12.6.2: [A member initializer list] (or, for an\n+\t\t aggregate, initialization by a brace-enclosed list) is the\n+\t\t only way to initialize nonstatic const and reference\n+\t\t members.  */\n+\t      TYPE_HAS_COMPLEX_COPY_ASSIGN (t) = 1;\n+\t      TYPE_HAS_COMPLEX_MOVE_ASSIGN (t) = 1;\n+\t    }\n \t}\n       /* A field that is pseudo-const makes the structure likewise.  */\n       else if (CLASS_TYPE_P (type))"}, {"sha": "a5bac7b482e58c1f5d71380e3647edab938ba7d6", "filename": "gcc/testsuite/g++.dg/ext/is_trivially_constructible1.C", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864822bd8880db5e75398a2e409dccb7545418ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_trivially_constructible1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864822bd8880db5e75398a2e409dccb7545418ef/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_trivially_constructible1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fis_trivially_constructible1.C?ref=864822bd8880db5e75398a2e409dccb7545418ef", "patch": "@@ -36,3 +36,8 @@ SA(!__is_trivially_constructible(D));\n \n SA(__is_trivially_copyable(int));\n SA(!__is_trivially_copyable(volatile int));\n+\n+struct E1 {const int val;};\n+SA(__is_trivially_copyable(E1));\n+struct E2 {int& val;};\n+SA(__is_trivially_copyable(E2));"}]}