{"sha": "2443d4e110e88050c438b4db7cba7b47dfb90893", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ0M2Q0ZTExMGU4ODA1MGM0MzhiNGRiN2NiYTdiNDdkZmI5MDg5Mw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-05-05T17:05:09Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-05-05T17:05:09Z"}, "message": "c-common.c (c_common_init): Set up CPP arithmetic.\n\n\t* c-common.c (c_common_init): Set up CPP arithmetic.\n\t* cppinit.c (cpp_create_reader): Default CPP arithmetic to\n\tsomething reasonable for the host.\n\t(sanity_checks): Add checks.\n\t(cpp_read_main_file): Call sanity_checks() from here...\n\t(cpp_post_options): ... not here.\n\t* cpplex.c (cpp_interpret_charconst): Get max_chars right.\n\t* cpplib.h (struct cpp_options): New member int_precision.\ntestsuite:\n\t* gcc.dg/cpp/charconst.c: Update tests.\n\nFrom-SVN: r53186", "tree": {"sha": "97978ba189f956d7357a86c98b15c1b1b5adaa02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97978ba189f956d7357a86c98b15c1b1b5adaa02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2443d4e110e88050c438b4db7cba7b47dfb90893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2443d4e110e88050c438b4db7cba7b47dfb90893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2443d4e110e88050c438b4db7cba7b47dfb90893", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2443d4e110e88050c438b4db7cba7b47dfb90893/comments", "author": null, "committer": null, "parents": [{"sha": "791a949fb9c633016bdb00f954979c53b0e75e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/791a949fb9c633016bdb00f954979c53b0e75e9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/791a949fb9c633016bdb00f954979c53b0e75e9a"}], "stats": {"total": 138, "additions": 88, "deletions": 50}, "files": [{"sha": "5fc92e18f9191e4db568706aff51d322ffc5da99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2443d4e110e88050c438b4db7cba7b47dfb90893/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2443d4e110e88050c438b4db7cba7b47dfb90893/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2443d4e110e88050c438b4db7cba7b47dfb90893", "patch": "@@ -1,3 +1,14 @@\n+2002-05-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-common.c (c_common_init): Set up CPP arithmetic.\n+\t* cppinit.c (cpp_create_reader): Default CPP arithmetic to\n+\tsomething reasonable for the host.\n+\t(sanity_checks): Add checks.\n+\t(cpp_read_main_file): Call sanity_checks() from here...\n+\t(cpp_post_options): ... not here.\n+\t* cpplex.c (cpp_interpret_charconst): Get max_chars right.\n+\t* cpplib.h (struct cpp_options): New member int_precision.\n+\n 2002-05-05  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \t* doc/install.texi (powerpc-*-linux-gnu*): Update build requirements."}, {"sha": "72c4988b1f3155a99c64e450c2cbaaea4a8722c7", "filename": "gcc/c-common.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2443d4e110e88050c438b4db7cba7b47dfb90893/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2443d4e110e88050c438b4db7cba7b47dfb90893/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2443d4e110e88050c438b4db7cba7b47dfb90893", "patch": "@@ -4299,6 +4299,14 @@ const char *\n c_common_init (filename)\n      const char *filename;\n {\n+  cpp_options *options = cpp_get_options (parse_in);\n+\n+  /* Set up preprocessor arithmetic.  Must be done after call to\n+     c_common_nodes_and_builtins for wchar_type_node to be good.  */\n+  options->char_precision = TYPE_PRECISION (char_type_node);\n+  options->int_precision = TYPE_PRECISION (integer_type_node);\n+  options->wchar_precision = TYPE_PRECISION (wchar_type_node);\n+\n   /* NULL is passed up to toplev.c and we exit quickly.  */\n   if (flag_preprocess_only)\n     {"}, {"sha": "974a1ebae85e8b6686bd4fc190fac8bb5c3da937", "filename": "gcc/cppinit.c", "status": "modified", "additions": 51, "deletions": 40, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2443d4e110e88050c438b4db7cba7b47dfb90893/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2443d4e110e88050c438b4db7cba7b47dfb90893/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=2443d4e110e88050c438b4db7cba7b47dfb90893", "patch": "@@ -502,14 +502,13 @@ cpp_create_reader (lang)\n   CPP_OPTION (pfile, pending) =\n     (struct cpp_pending *) xcalloc (1, sizeof (struct cpp_pending));\n \n-  /* CPP arithmetic done to existing rules for now.  */\n+  /* Default CPP arithmetic to something sensible for the host for the\n+     benefit of dumb users like fix-header.  */\n #define BITS_PER_HOST_WIDEST_INT (CHAR_BIT * sizeof (HOST_WIDEST_INT))\n   CPP_OPTION (pfile, precision) = BITS_PER_HOST_WIDEST_INT;\n-#ifndef MAX_CHAR_TYPE_SIZE\n-#define MAX_CHAR_TYPE_SIZE CHAR_TYPE_SIZE\n-#endif\n-  CPP_OPTION (pfile, char_precision) = MAX_CHAR_TYPE_SIZE;\n-  CPP_OPTION (pfile, wchar_precision) = MAX_WCHAR_TYPE_SIZE;\n+  CPP_OPTION (pfile, char_precision) = CHAR_BIT;\n+  CPP_OPTION (pfile, wchar_precision) = CHAR_BIT * sizeof (int);\n+  CPP_OPTION (pfile, int_precision) = CHAR_BIT * sizeof (int);\n \n   /* It's simplest to just create this struct whether or not it will\n      be needed.  */\n@@ -923,6 +922,50 @@ free_chain (head)\n     }\n }\n \n+/* Sanity-checks are dependent on command-line options, so it is\n+   called as a subroutine of cpp_read_main_file ().  */\n+#if ENABLE_CHECKING\n+static void sanity_checks PARAMS ((cpp_reader *));\n+static void sanity_checks (pfile)\n+     cpp_reader *pfile;\n+{\n+  cppchar_t test = 0;\n+\n+  /* Sanity checks for assumptions about CPP arithmetic and target\n+     type precisions made by cpplib.  */\n+  test--;\n+  if (test < 1)\n+    cpp_error (pfile, DL_FATAL, \"cppchar_t must be an unsigned type\");\n+\n+  if (CPP_OPTION (pfile, precision) > BITS_PER_HOST_WIDEST_INT)\n+    cpp_error (pfile, DL_FATAL,\n+\t       \"preprocessor arithmetic has maximum precision of %u bits; target requires %u bits\",\n+\t       BITS_PER_HOST_WIDEST_INT, CPP_OPTION (pfile, precision));\n+\n+  if (CPP_OPTION (pfile, precision) < CPP_OPTION (pfile, int_precision))\n+    cpp_error (pfile, DL_FATAL,\n+\t       \"CPP arithmetic must be at least as precise as a target int\");\n+\n+  if (CPP_OPTION (pfile, char_precision) < 8)\n+    cpp_error (pfile, DL_FATAL, \"target char is less than 8 bits wide\");\n+\n+  if (CPP_OPTION (pfile, wchar_precision) < CPP_OPTION (pfile, char_precision))\n+    cpp_error (pfile, DL_FATAL,\n+\t       \"target wchar_t is narrower than target char\");\n+\n+  if (CPP_OPTION (pfile, int_precision) < CPP_OPTION (pfile, char_precision))\n+    cpp_error (pfile, DL_FATAL,\n+\t       \"target int is narrower than target char\");\n+\n+  if (CPP_OPTION (pfile, wchar_precision) > BITS_PER_CPPCHAR_T)\n+    cpp_error (pfile, DL_FATAL,\n+\t       \"CPP on this host cannot handle wide character constants over %u bits, but the target requires %u bits\",\n+\t       BITS_PER_CPPCHAR_T, CPP_OPTION (pfile, wchar_precision));\n+}\n+#else\n+# define sanity_checks(PFILE)\n+#endif\n+\n /* This is called after options have been parsed, and partially\n    processed.  Setup for processing input from the file named FNAME,\n    or stdin if it is the empty string.  Return the original filename\n@@ -933,6 +976,8 @@ cpp_read_main_file (pfile, fname, table)\n      const char *fname;\n      hash_table *table;\n {\n+  sanity_checks (pfile);\n+\n   /* The front ends don't set up the hash table until they have\n      finished processing the command line options, so initializing the\n      hashtable is deferred until now.  */\n@@ -1788,46 +1833,12 @@ cpp_handle_options (pfile, argc, argv)\n   return i;\n }\n \n-/* Sanity-checks are dependent on command-line options, so it is\n-   called as a subroutine of cpp_post_options ().  */\n-#if ENABLE_CHECKING\n-static void sanity_checks PARAMS ((cpp_reader *));\n-static void sanity_checks (pfile)\n-     cpp_reader *pfile;\n-{\n-  cppchar_t test = 0;\n-  size_t max_prec;\n-\n-  /* Sanity checks for CPP arithmetic.  */\n-  test--;\n-  if (test < 1)\n-    cpp_error (pfile, DL_FATAL, \"cppchar_t must be an unsigned type\");\n-\n-  if (CPP_OPTION (pfile, precision) > BITS_PER_HOST_WIDEST_INT)\n-    cpp_error (pfile, DL_FATAL,\n-\t       \"preprocessor arithmetic has maximum precision of %u bits; target requires %u bits\",\n-\t       BITS_PER_HOST_WIDEST_INT, CPP_OPTION (pfile, precision));\n-\n-  max_prec = CPP_OPTION (pfile, char_precision);\n-  if (max_prec < CPP_OPTION (pfile, wchar_precision))\n-    max_prec = CPP_OPTION (pfile, wchar_precision);\n-  if (max_prec > BITS_PER_CPPCHAR_T)\n-    cpp_error (pfile, DL_FATAL,\n-\t       \"CPP on this host cannot handle (wide) character constants over %u bits, but the target requires %u bits\",\n-\t       BITS_PER_CPPCHAR_T, max_prec);\n-}\n-#else\n-# define sanity_checks(PFILE)\n-#endif\n-\n /* Extra processing when all options are parsed, after all calls to\n    cpp_handle_option[s].  Consistency checks etc.  */\n void\n cpp_post_options (pfile)\n      cpp_reader *pfile;\n {\n-  sanity_checks (pfile);\n-\n   if (pfile->print_version)\n     {\n       fprintf (stderr, _(\"GNU CPP version %s (cpplib)\"), version_string);"}, {"sha": "ee34512c73becdacabf824eae97321cc4953842b", "filename": "gcc/cpplex.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2443d4e110e88050c438b4db7cba7b47dfb90893/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2443d4e110e88050c438b4db7cba7b47dfb90893/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=2443d4e110e88050c438b4db7cba7b47dfb90893", "patch": "@@ -1883,19 +1883,20 @@ cpp_interpret_charconst (pfile, token, warn_multi, pchars_seen, unsignedp)\n   if (token->type == CPP_CHAR)\n     {\n       width = CPP_OPTION (pfile, char_precision);\n+      max_chars = CPP_OPTION (pfile, int_precision) / width;\n       unsigned_p = CPP_OPTION (pfile, signed_char) == 0;\n     }\n   else\n     {\n       width = CPP_OPTION (pfile, wchar_precision);\n+      max_chars = 1;\n       unsigned_p = WCHAR_UNSIGNED;\n     }\n \n   if (width < BITS_PER_CPPCHAR_T)\n     mask = ((cppchar_t) 1 << width) - 1;\n   else\n     mask = ~0;\n-  max_chars = BITS_PER_CPPCHAR_T / width;\n \n   while (str < limit)\n     {"}, {"sha": "42eae9177e7b94f517bb394f5a2eb9662395bfb8", "filename": "gcc/cpplib.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2443d4e110e88050c438b4db7cba7b47dfb90893/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2443d4e110e88050c438b4db7cba7b47dfb90893/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=2443d4e110e88050c438b4db7cba7b47dfb90893", "patch": "@@ -251,9 +251,9 @@ struct cpp_options\n   /* -fleading_underscore sets this to \"_\".  */\n   const char *user_label_prefix;\n \n-  /* Precision for target CPP arithmetic, target characters and target\n-     wide characters, respectively.  */\n-  size_t precision, char_precision, wchar_precision;\n+  /* Precision for target CPP arithmetic, target characters, target\n+     ints and target wide characters, respectively.  */\n+  size_t precision, char_precision, int_precision, wchar_precision;\n \n   /* The language we're preprocessing.  */\n   enum c_lang lang;"}, {"sha": "29463de55dc434b9ec58f033fface656b174dfe5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2443d4e110e88050c438b4db7cba7b47dfb90893/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2443d4e110e88050c438b4db7cba7b47dfb90893/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2443d4e110e88050c438b4db7cba7b47dfb90893", "patch": "@@ -1,3 +1,7 @@\n+2002-05-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* gcc.dg/cpp/charconst.c: Update tests.\n+\n 2002-05-05  Tim Josling  <tej@melbpc.org.au>\n \n \t* treelang: Added directory for new sample language treelang. Also"}, {"sha": "07257a74a4ff57bc1b373e6fa037a8f295110191", "filename": "gcc/testsuite/gcc.dg/cpp/charconst.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2443d4e110e88050c438b4db7cba7b47dfb90893/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2443d4e110e88050c438b4db7cba7b47dfb90893/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcharconst.c?ref=2443d4e110e88050c438b4db7cba7b47dfb90893", "patch": "@@ -21,13 +21,16 @@\n \n void foo ()\n {\n-  int c = '';\t\t/* { dg-warning \"empty\" \"empty charconst\" } */\n-  c = L'';\t\t/* { dg-warning \"empty\" \"empty wide charconst\" } */\n+  int c;\n+  __WCHAR_TYPE__ w;\n+\n+  c = '';\t\t/* { dg-warning \"empty\" \"empty charconst\" } */\n+  w = L'';\t\t/* { dg-warning \"empty\" \"empty wide charconst\" } */\n \n   c = 'very long';\t/* { dg-warning \"too long\" \"long charconst\" } */\n-  c = L'very long';\t/* { dg-warning \"too long\" \"long wide charconst\" } */\n+  w = L'very long';\t/* { dg-warning \"too long\" \"long wide charconst\" } */\n \n-  /* Don't do this test for L'ab'; it depends upon sizeof (wchar_t).  */\n-  c = 'ab';\t\t/* { dg-warning \"multi-char\" \"multi-character\" } */\n- \n+  c = 'ab';\t\t/* { dg-warning \"multi-char\" \"multi-char\" } */\n+  /* Wide charconsts cannot contain more than one wide character.  */\n+  w = L'ab';\t\t/* { dg-warning \"too long\" \"multi-char wide\" } */\n }"}]}