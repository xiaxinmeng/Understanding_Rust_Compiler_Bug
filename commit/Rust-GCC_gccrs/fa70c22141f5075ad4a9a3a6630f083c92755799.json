{"sha": "fa70c22141f5075ad4a9a3a6630f083c92755799", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE3MGMyMjE0MWY1MDc1YWQ0YTlhM2E2NjMwZjA4M2M5Mjc1NTc5OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-05-22T11:52:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-05-22T11:52:19Z"}, "message": "alias.c (ao_ref_from_mem): Move stack-slot sharing rewrite ...\n\n2019-05-22  Richard Biener  <rguenther@suse.de>\n\n\t* alias.c (ao_ref_from_mem): Move stack-slot sharing\n\trewrite ...\n\t* emit-rtl.c (set_mem_attributes_minus_bitpos): ... here.\n\nFrom-SVN: r271510", "tree": {"sha": "afc708401f7b33651371ed0a0acb4844cef27279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afc708401f7b33651371ed0a0acb4844cef27279"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa70c22141f5075ad4a9a3a6630f083c92755799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa70c22141f5075ad4a9a3a6630f083c92755799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa70c22141f5075ad4a9a3a6630f083c92755799", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa70c22141f5075ad4a9a3a6630f083c92755799/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6149853c3b57be410fa3316448532f609300aa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6149853c3b57be410fa3316448532f609300aa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6149853c3b57be410fa3316448532f609300aa8"}], "stats": {"total": 42, "additions": 30, "deletions": 12}, "files": [{"sha": "c043e9b83d83eb6bea0aef7518a940f08491ebfe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa70c22141f5075ad4a9a3a6630f083c92755799/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa70c22141f5075ad4a9a3a6630f083c92755799/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa70c22141f5075ad4a9a3a6630f083c92755799", "patch": "@@ -1,3 +1,9 @@\n+2019-05-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* alias.c (ao_ref_from_mem): Move stack-slot sharing\n+\trewrite ...\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): ... here.\n+\n 2019-05-22  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/90500"}, {"sha": "d3cc07c721663ad2edd9bd5cc0a633b337e8a827", "filename": "gcc/alias.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa70c22141f5075ad4a9a3a6630f083c92755799/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa70c22141f5075ad4a9a3a6630f083c92755799/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=fa70c22141f5075ad4a9a3a6630f083c92755799", "patch": "@@ -307,18 +307,6 @@ ao_ref_from_mem (ao_ref *ref, const_rtx mem)\n \t    && TREE_CODE (TMR_BASE (base)) == SSA_NAME)))\n     return false;\n \n-  /* If this is a reference based on a partitioned decl replace the\n-     base with a MEM_REF of the pointer representative we\n-     created during stack slot partitioning.  */\n-  if (VAR_P (base)\n-      && ! is_global_var (base)\n-      && cfun->gimple_df->decls_to_pointers != NULL)\n-    {\n-      tree *namep = cfun->gimple_df->decls_to_pointers->get (base);\n-      if (namep)\n-\tref->base = build_simple_mem_ref (*namep);\n-    }\n-\n   ref->ref_alias_set = MEM_ALIAS_SET (mem);\n \n   /* If MEM_OFFSET or MEM_SIZE are unknown what we got from MEM_EXPR"}, {"sha": "58286f797c4d46dceb7dd01535b278f924f3fb73", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa70c22141f5075ad4a9a3a6630f083c92755799/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa70c22141f5075ad4a9a3a6630f083c92755799/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=fa70c22141f5075ad4a9a3a6630f083c92755799", "patch": "@@ -61,6 +61,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"predict.h\"\n #include \"rtx-vector-builder.h\"\n+#include \"gimple.h\"\n+#include \"gimple-ssa.h\"\n+#include \"gimplify.h\"\n \n struct target_rtl default_target_rtl;\n #if SWITCHABLE_TARGET\n@@ -2128,6 +2131,27 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t  apply_bitpos = bitpos;\n \t}\n \n+      /* If this is a reference based on a partitioned decl replace the\n+\t base with a MEM_REF of the pointer representative we created\n+\t during stack slot partitioning.  */\n+      if (attrs.expr\n+\t  && VAR_P (base)\n+\t  && ! is_global_var (base)\n+\t  && cfun->gimple_df->decls_to_pointers != NULL)\n+\t{\n+\t  tree *namep = cfun->gimple_df->decls_to_pointers->get (base);\n+\t  if (namep)\n+\t    {\n+\t      attrs.expr = unshare_expr (attrs.expr);\n+\t      tree *orig_base = &attrs.expr;\n+\t      while (handled_component_p (*orig_base))\n+\t\torig_base = &TREE_OPERAND (*orig_base, 0);\n+\t      tree aptrt = reference_alias_ptr_type (*orig_base);\n+\t      *orig_base = build2 (MEM_REF, TREE_TYPE (*orig_base), *namep,\n+\t\t\t\t   build_int_cst (aptrt, 0));\n+\t    }\n+\t}\n+\n       /* Compute the alignment.  */\n       unsigned int obj_align;\n       unsigned HOST_WIDE_INT obj_bitpos;"}]}