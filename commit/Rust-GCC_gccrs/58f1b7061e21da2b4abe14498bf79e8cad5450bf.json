{"sha": "58f1b7061e21da2b4abe14498bf79e8cad5450bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThmMWI3MDYxZTIxZGEyYjRhYmUxNDQ5OGJmNzllOGNhZDU0NTBiZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-02-27T14:27:27Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-02-27T14:27:27Z"}, "message": "re PR ada/42253 (run time crash on null for thin pointers)\n\n\tPR ada/42253\n\t* gcc-interface/utils2.c (build_binary_op) <EQ_EXPR>: Assert that fat\n\tpointer base types are variant of each other.  Apply special treatment\n\tfor null to fat pointer types in all cases.\n\nFrom-SVN: r157107", "tree": {"sha": "6f0bdf8f29de379dced1cd49b40268ab7fa3ec32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f0bdf8f29de379dced1cd49b40268ab7fa3ec32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58f1b7061e21da2b4abe14498bf79e8cad5450bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f1b7061e21da2b4abe14498bf79e8cad5450bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f1b7061e21da2b4abe14498bf79e8cad5450bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f1b7061e21da2b4abe14498bf79e8cad5450bf/comments", "author": null, "committer": null, "parents": [{"sha": "cb7e3948d0e479cf2d52a24d647ba5201cc61092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb7e3948d0e479cf2d52a24d647ba5201cc61092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb7e3948d0e479cf2d52a24d647ba5201cc61092"}], "stats": {"total": 122, "additions": 89, "deletions": 33}, "files": [{"sha": "b0d871b7bd4dc14ff3a84b9697ea4e85c74483b1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=58f1b7061e21da2b4abe14498bf79e8cad5450bf", "patch": "@@ -1,3 +1,10 @@\n+2010-02-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/42253\n+\t* gcc-interface/utils2.c (build_binary_op) <EQ_EXPR>: Assert that fat\n+\tpointer base types are variant of each other.  Apply special treatment\n+\tfor null to fat pointer types in all cases.\n+\n 2010-01-28  Pascal Obry  <obry@adacore.com>\n \n \t* s-win32.ads: Add some missing constants."}, {"sha": "3d6ac201107667d553478c9b8b7613d17a4021e8", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=58f1b7061e21da2b4abe14498bf79e8cad5450bf", "patch": "@@ -834,26 +834,28 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \t  return result;\n \t}\n \n-      /* Otherwise, the base types must be the same unless the objects are\n-\t fat pointers or records.  If we have records, use the best type and\n-\t convert both operands to that type.  */\n+      /* Otherwise, the base types must be the same, unless they are both fat\n+\t pointer types or record types.  In the latter case, use the best type\n+\t and convert both operands to that type.  */\n       if (left_base_type != right_base_type)\n \t{\n \t  if (TYPE_IS_FAT_POINTER_P (left_base_type)\n-\t      && TYPE_IS_FAT_POINTER_P (right_base_type)\n-\t      && TYPE_MAIN_VARIANT (left_base_type)\n-\t\t == TYPE_MAIN_VARIANT (right_base_type))\n-\t    best_type = left_base_type;\n+\t      && TYPE_IS_FAT_POINTER_P (right_base_type))\n+\t    {\n+\t      gcc_assert (TYPE_MAIN_VARIANT (left_base_type)\n+\t\t\t  == TYPE_MAIN_VARIANT (right_base_type));\n+\t      best_type = left_base_type;\n+\t    }\n+\n \t  else if (TREE_CODE (left_base_type) == RECORD_TYPE\n \t\t   && TREE_CODE (right_base_type) == RECORD_TYPE)\n \t    {\n-\t      /* The only way these are permitted to be the same is if both\n-\t\t types have the same name.  In that case, one of them must\n-\t\t not be self-referential.  Use that one as the best type.\n-\t\t Even better is if one is of fixed size.  */\n+\t      /* The only way this is permitted is if both types have the same\n+\t\t name.  In that case, one of them must not be self-referential.\n+\t\t Use it as the best type.  Even better with a fixed size.  */\n \t      gcc_assert (TYPE_NAME (left_base_type)\n-\t\t\t  && (TYPE_NAME (left_base_type)\n-\t\t\t      == TYPE_NAME (right_base_type)));\n+\t\t\t  && TYPE_NAME (left_base_type)\n+\t\t\t     == TYPE_NAME (right_base_type));\n \n \t      if (TREE_CONSTANT (TYPE_SIZE (left_base_type)))\n \t\tbest_type = left_base_type;\n@@ -866,34 +868,34 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \t      else\n \t\tgcc_unreachable ();\n \t    }\n+\n \t  else\n \t    gcc_unreachable ();\n \n \t  left_operand = convert (best_type, left_operand);\n \t  right_operand = convert (best_type, right_operand);\n \t}\n-\n-      /* If we are comparing a fat pointer against zero, we need to\n-\t just compare the data pointer.  */\n-      else if (TYPE_IS_FAT_POINTER_P (left_base_type)\n-\t       && TREE_CODE (right_operand) == CONSTRUCTOR\n-\t       && integer_zerop (VEC_index (constructor_elt,\n-\t\t\t\t\t    CONSTRUCTOR_ELTS (right_operand),\n-\t\t\t\t\t    0)\n-\t\t\t\t ->value))\n-\t{\n-\t  right_operand = build_component_ref (left_operand, NULL_TREE,\n-\t\t\t\t\t       TYPE_FIELDS (left_base_type),\n-\t\t\t\t\t       false);\n-\t  left_operand = convert (TREE_TYPE (right_operand),\n-\t\t\t\t  integer_zero_node);\n-\t}\n       else\n \t{\n \t  left_operand = convert (left_base_type, left_operand);\n \t  right_operand = convert (right_base_type, right_operand);\n \t}\n \n+      /* If we are comparing a fat pointer against zero, we just need to\n+\t compare the data pointer.  */\n+      if (TYPE_IS_FAT_POINTER_P (left_base_type)\n+\t  && TREE_CODE (right_operand) == CONSTRUCTOR\n+\t  && integer_zerop (VEC_index (constructor_elt,\n+\t\t\t\t       CONSTRUCTOR_ELTS (right_operand),\n+\t\t\t\t       0)->value))\n+\t{\n+\t  left_operand\n+\t    = build_component_ref (left_operand, NULL_TREE,\n+\t\t\t\t   TYPE_FIELDS (left_base_type), false);\n+\t  right_operand\n+\t    = convert (TREE_TYPE (left_operand), integer_zero_node);\n+\t}\n+\n       modulus = NULL_TREE;\n       break;\n "}, {"sha": "bc56a66c9120dc413f62a5f697168918b962369b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=58f1b7061e21da2b4abe14498bf79e8cad5450bf", "patch": "@@ -1,3 +1,10 @@\n+2010-02-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/thin_pointer.ad[sb]: Rename into...\n+\t* gnat.dg/thin_pointer1.ad[sb]: ...this.\n+\t* gnat.dg/thin_pointer2.adb: New test.\n+\t* gnat.dg/thin_pointer2_pkg.ad[sb]: New helper.\n+\n 2010-02-26  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/20631"}, {"sha": "8bc586ee47523fbabcf7394653895a1726f7d7a0", "filename": "gcc/testsuite/gnat.dg/thin_pointer1.adb", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer1.adb?ref=58f1b7061e21da2b4abe14498bf79e8cad5450bf", "patch": "@@ -1,11 +1,11 @@\n -- { dg-do compile }\n -- { dg-options \"-O\" }\n \n-package body Thin_Pointer is\n+package body Thin_Pointer1 is\n \n    procedure Set_Buffer (AD : Buf_Ptr; Buffer : Stream_ptr) is\n    begin\n       AD.B.A := Buffer (Buffer'First)'Address;\n    end Set_Buffer;\n \n-end Thin_Pointer;\n+end Thin_Pointer1;", "previous_filename": "gcc/testsuite/gnat.dg/thin_pointer.adb"}, {"sha": "7332e84b74d81ea0cac674af4e413440f39879e5", "filename": "gcc/testsuite/gnat.dg/thin_pointer1.ads", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer1.ads?ref=58f1b7061e21da2b4abe14498bf79e8cad5450bf", "patch": "@@ -1,6 +1,6 @@\n with System;\n \n-package Thin_Pointer is\n+package Thin_Pointer1 is\n \n    type Stream is array (Integer range <>) of Character;\n \n@@ -19,4 +19,4 @@ package Thin_Pointer is\n \n    procedure Set_Buffer (AD : Buf_Ptr; Buffer : Stream_ptr);\n \n-end Thin_Pointer;\n+end Thin_Pointer1;", "previous_filename": "gcc/testsuite/gnat.dg/thin_pointer.ads"}, {"sha": "52c4dd6deab1a864bc9460f50056147c57911d98", "filename": "gcc/testsuite/gnat.dg/thin_pointer2.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer2.adb?ref=58f1b7061e21da2b4abe14498bf79e8cad5450bf", "patch": "@@ -0,0 +1,13 @@\n+-- PR ada/42253\n+-- Testcase by Duncan Sands <baldrick@gcc.gnu.org>\n+\n+-- { dg-do run }\n+\n+with Thin_Pointer2_Pkg; use Thin_Pointer2_Pkg;\n+\n+procedure Thin_Pointer2 is\n+begin\n+   if F /= '*' then\n+      raise Program_Error;\n+   end if;\n+end;"}, {"sha": "22500773cdc5e79739f564186fbbe9b90e05a072", "filename": "gcc/testsuite/gnat.dg/thin_pointer2_pkg.adb", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer2_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer2_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer2_pkg.adb?ref=58f1b7061e21da2b4abe14498bf79e8cad5450bf", "patch": "@@ -0,0 +1,18 @@\n+package body Thin_Pointer2_Pkg is\n+\n+   type SB is access constant String;\n+\n+   function Inner (S : SB) return Character is\n+   begin\n+      if S /= null and then S'Length > 0 then\n+         return S (S'First);\n+      end if;\n+      return '*';\n+   end;\n+\n+   function F return Character is\n+   begin\n+      return Inner (SB (S));\n+   end;\n+\n+end Thin_Pointer2_Pkg;"}, {"sha": "f6752b0d726df93a446019fd34f0eec3cd6c54ec", "filename": "gcc/testsuite/gnat.dg/thin_pointer2_pkg.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer2_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58f1b7061e21da2b4abe14498bf79e8cad5450bf/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer2_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fthin_pointer2_pkg.ads?ref=58f1b7061e21da2b4abe14498bf79e8cad5450bf", "patch": "@@ -0,0 +1,9 @@\n+package Thin_Pointer2_Pkg is\n+\n+   type SA is access String;\n+   for SA'Size use Standard'Address_Size;\n+   S : SA;\n+\n+   function F return Character;\n+\n+end Thin_Pointer2_Pkg;"}]}