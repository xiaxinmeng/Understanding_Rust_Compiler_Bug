{"sha": "ea2954df43d4162af23a20c84f4c5485463977ac", "node_id": "C_kwDOANBUbNoAKGVhMjk1NGRmNDNkNDE2MmFmMjNhMjBjODRmNGM1NDg1NDYzOTc3YWM", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-19T01:42:41Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-19T12:06:43Z"}, "message": "Fix tree-optimization/103314 : Limit folding of (type) X op CST where type is a nop convert to gimple\n\nThere is some re-association code in fold_binary which conflicts with\nthis optimization due keeping around some \"constants\" which are not\nINTEGER_CST (1 << -1) so we end up in an infinite loop because of that.\nSo we need to limit this case to GIMPLE level only.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\n\tPR tree-optimization/103314\n\ngcc/ChangeLog:\n\n\t* match.pd ((type) X op CST): Restrict the equal\n\tTYPE_PRECISION case to GIMPLE only.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.c-torture/compile/pr103314-1.c: New test.", "tree": {"sha": "0c386e398ebd235fc0305681cb9df9671bcef4ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c386e398ebd235fc0305681cb9df9671bcef4ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea2954df43d4162af23a20c84f4c5485463977ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2954df43d4162af23a20c84f4c5485463977ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2954df43d4162af23a20c84f4c5485463977ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2954df43d4162af23a20c84f4c5485463977ac/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74a4ece02df1b1b6f396fd0e24dbbf8b0897858a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a4ece02df1b1b6f396fd0e24dbbf8b0897858a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74a4ece02df1b1b6f396fd0e24dbbf8b0897858a"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "e5985defe6f7e326dc18610a5f719d41f7063608", "filename": "gcc/match.pd", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2954df43d4162af23a20c84f4c5485463977ac/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2954df43d4162af23a20c84f4c5485463977ac/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=ea2954df43d4162af23a20c84f4c5485463977ac", "patch": "@@ -1619,7 +1619,11 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t      after hoisting the conversion the operation will be narrower.\n \t      It is also a good if the conversion is a nop as moves the\n \t      conversion to one side; allowing for combining of the conversions.  */\n-\t   TYPE_PRECISION (TREE_TYPE (@0)) <= TYPE_PRECISION (type)\n+\t   TYPE_PRECISION (TREE_TYPE (@0)) < TYPE_PRECISION (type)\n+\t   /* The conversion check for being a nop can only be done at the gimple\n+\t      level as fold_binary has some re-association code which can conflict\n+\t      with this if there is a \"constant\" which is not a full INTEGER_CST.  */\n+\t   || (GIMPLE && TYPE_PRECISION (TREE_TYPE (@0)) == TYPE_PRECISION (type))\n \t   /* It's also a good idea if the conversion is to a non-integer\n \t      mode.  */\n \t   || GET_MODE_CLASS (TYPE_MODE (type)) != MODE_INT"}, {"sha": "f4a631304219b6421dfd407217c9ce6fdd32798e", "filename": "gcc/testsuite/gcc.c-torture/compile/pr103314-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea2954df43d4162af23a20c84f4c5485463977ac/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr103314-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea2954df43d4162af23a20c84f4c5485463977ac/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr103314-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr103314-1.c?ref=ea2954df43d4162af23a20c84f4c5485463977ac", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-options \"\" } */\n+int main() {\n+  int t = 1;\n+  unsigned c = 0, d1 = t ? 1 ^ c ^ 1 >> (-1) : 0; /* { dg-warning \"is negative\"  } */\n+  return d1;\n+}"}]}