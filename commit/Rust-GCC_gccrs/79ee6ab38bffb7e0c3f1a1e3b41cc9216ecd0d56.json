{"sha": "79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzllZTZhYjM4YmZmYjdlMGMzZjFhMWUzYjQxY2M5MjE2ZWNkMGQ1Ng==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-17T10:14:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-07-17T10:14:38Z"}, "message": "[multiple changes]\n\n2012-07-17  Tristan Gingold  <gingold@adacore.com>\n\n\t* gnat_rm.texi: Adjust previous change.\n\n2012-07-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Process_Import_Or_Interface): If the pragma\n\tcomes from an aspect, it applies to the corresponding entity\n\twithout further check.\n\n2012-07-17  Olivier Hainque  <hainque@adacore.com>\n\n\t* initialize.c (__gnat_initialize for VxWorks): Remove section with\n\tcall to __gnat_vxw_setup_for_eh.\n\t* system-vxworks-ppc.ads: Add -auto-register to -crtbe, relying\n\ton the VxWorks constructor mechanism for network loaded modules\n\tby default.\n\n2012-07-17  Tristan Gingold  <gingold@adacore.com>\n\n\t* adaint.c: Minor reformatting.\n\n2012-07-17  Pascal Obry  <obry@adacore.com>\n\n\t* s-regexp.adb (Adjust): Fix access violation in Adjust.\n\n2012-07-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* freeze.adb (Freeze_Entity): Warn if an imported subprogram\n\thas pre/post conditions, because these will not be enforced.\n\n2012-07-17  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_ch7.adb (Process_Transient_Objects): Put all the\n\tfinalization blocks and the final raise statement into a wrapper\n\tblock.\n\n2012-07-17  Vincent Pucci  <pucci@adacore.com>\n\n\t* s-atopri.adb (Lock_Free_Try_Write_X): Atomic_Compare_Exchange_X\n\treplaced by Sync_Compare_And_Swap_X.\n\t(Lock_Free_Try_Write_64): Removed.\n\t* s-atopri.ads (Sync_Compare_And_Swap_X): Replaces previous\n\troutine Atomic_Compare_Exchange_X.\n\t(Lock_Free_Read_64): Renaming of Atomic_Load_64.\n\t(Lock_Free_Try_Write_64): Renaming of Sync_Compare_And_Swap_64.\n\n2012-07-17  Vincent Celier  <celier@adacore.com>\n\n\t* switch-m.adb (Normalize_Compiler_Switches): Recognize new\n\tswitches -gnatn1 and -gnatn2.\n\n2012-07-17  Vincent Pucci  <pucci@adacore.com>\n\n\t* gnat_ugn.texi: GNAT dimensionality checking\n\tdocumentation updated with System.Dim.Mks modifications.\n\n2012-07-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb: sloc of array init_proc is sloc of type declaration.\n\n2012-07-17  Tristan Gingold  <gingold@adacore.com>\n\n\t* raise-gcc.c (get_call_site_action_for): Remove useless init\n\texpression for p.\n\t(get_action_description_for): Do not overwrite action->kind.\n\n2012-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Add local variables Attr\n\tand Conversion_Added.  Add local constant Typ.\n\tRetrieve the original attribute after the arithmetic check\n\tmachinery has modified the node. Add a conversion to the target\n\ttype when the prefix of attribute Max_Size_In_Storage_Elements\n\tis a controlled type.\n\n2012-07-17  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch6.adb (Expand_Inlined_Call): For each actual parameter\n\tof mode 'out' or 'in out' that denotes an entity, reset\n\tLast_Assignment on the entity so that any assignments to the\n\tcorresponding formal in the inlining will not trigger spurious\n\twarnings about overwriting assignments.\n\nFrom-SVN: r189569", "tree": {"sha": "883be09ca8713e7bce0bcab7c634167e418e42f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/883be09ca8713e7bce0bcab7c634167e418e42f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/comments", "author": null, "committer": null, "parents": [{"sha": "e3b3266c50e0ccc8a3351b2215c028e760e297db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3b3266c50e0ccc8a3351b2215c028e760e297db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3b3266c50e0ccc8a3351b2215c028e760e297db"}], "stats": {"total": 329, "additions": 193, "deletions": 136}, "files": [{"sha": "eb1a526610eb8008080914d8287fe303e1b5a9bb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "patch": "@@ -1,3 +1,87 @@\n+2012-07-17  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* gnat_rm.texi: Adjust previous change.\n+\n+2012-07-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Process_Import_Or_Interface): If the pragma\n+\tcomes from an aspect, it applies to the corresponding entity\n+\twithout further check.\n+\n+2012-07-17  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* initialize.c (__gnat_initialize for VxWorks): Remove section with\n+\tcall to __gnat_vxw_setup_for_eh.\n+\t* system-vxworks-ppc.ads: Add -auto-register to -crtbe, relying\n+\ton the VxWorks constructor mechanism for network loaded modules\n+\tby default.\n+\n+2012-07-17  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* adaint.c: Minor reformatting.\n+\n+2012-07-17  Pascal Obry  <obry@adacore.com>\n+\n+\t* s-regexp.adb (Adjust): Fix access violation in Adjust.\n+\n+2012-07-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Freeze_Entity): Warn if an imported subprogram\n+\thas pre/post conditions, because these will not be enforced.\n+\n+2012-07-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch7.adb (Process_Transient_Objects): Put all the\n+\tfinalization blocks and the final raise statement into a wrapper\n+\tblock.\n+\n+2012-07-17  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* s-atopri.adb (Lock_Free_Try_Write_X): Atomic_Compare_Exchange_X\n+\treplaced by Sync_Compare_And_Swap_X.\n+\t(Lock_Free_Try_Write_64): Removed.\n+\t* s-atopri.ads (Sync_Compare_And_Swap_X): Replaces previous\n+\troutine Atomic_Compare_Exchange_X.\n+\t(Lock_Free_Read_64): Renaming of Atomic_Load_64.\n+\t(Lock_Free_Try_Write_64): Renaming of Sync_Compare_And_Swap_64.\n+\n+2012-07-17  Vincent Celier  <celier@adacore.com>\n+\n+\t* switch-m.adb (Normalize_Compiler_Switches): Recognize new\n+\tswitches -gnatn1 and -gnatn2.\n+\n+2012-07-17  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* gnat_ugn.texi: GNAT dimensionality checking\n+\tdocumentation updated with System.Dim.Mks modifications.\n+\n+2012-07-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb: sloc of array init_proc is sloc of type declaration.\n+\n+2012-07-17  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* raise-gcc.c (get_call_site_action_for): Remove useless init\n+\texpression for p.\n+\t(get_action_description_for): Do not overwrite action->kind.\n+\n+2012-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Add local variables Attr\n+\tand Conversion_Added.  Add local constant Typ.\n+\tRetrieve the original attribute after the arithmetic check\n+\tmachinery has modified the node. Add a conversion to the target\n+\ttype when the prefix of attribute Max_Size_In_Storage_Elements\n+\tis a controlled type.\n+\n+2012-07-17  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Inlined_Call): For each actual parameter\n+\tof mode 'out' or 'in out' that denotes an entity, reset\n+\tLast_Assignment on the entity so that any assignments to the\n+\tcorresponding formal in the inlining will not trigger spurious\n+\twarnings about overwriting assignments.\n+\n 2012-07-17  Robert Dewar  <dewar@adacore.com>\n \n \t* s-assert.ads: Fix comments to make it clear that this is used"}, {"sha": "54244bdf2afc5906df33196f23bfc748ecf398e8", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "patch": "@@ -83,7 +83,6 @@ extern \"C\" {\n #include <sys/stat.h>\n #include <fcntl.h>\n #include <time.h>\n-\n #ifdef VMS\n #include <unixio.h>\n #endif"}, {"sha": "9be3a18bb1782dff072d15465ca88b06f7c65d48", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "patch": "@@ -4390,6 +4390,7 @@ package body Exp_Ch7 is\n          Obj_Id    : Entity_Id;\n          Obj_Ref   : Node_Id;\n          Obj_Typ   : Entity_Id;\n+         Prev_Fin  : Node_Id := Empty;\n          Stmt      : Node_Id;\n          Stmts     : List_Id;\n          Temp_Id   : Entity_Id;\n@@ -4428,7 +4429,6 @@ package body Exp_Ch7 is\n                   Fin_Decls := New_List;\n \n                   Build_Object_Declarations (Fin_Data, Fin_Decls, Loc);\n-                  Insert_List_Before_And_Analyze (First_Object, Fin_Decls);\n \n                   Built := True;\n                end if;\n@@ -4560,15 +4560,25 @@ package body Exp_Ch7 is\n                        Exception_Handlers => New_List (\n                          Build_Exception_Handler (Fin_Data))));\n \n-               Insert_After_And_Analyze (Last_Object, Fin_Block);\n+               --  The single raise statement must be inserted after all the\n+               --  finalization blocks. And we put everything into a wrapper\n+               --  block to clearly expose the construct to the back-end.\n \n-               --  The raise statement must be inserted after all the\n-               --  finalization blocks.\n+               if Present (Prev_Fin) then\n+                  Insert_Before_And_Analyze (Prev_Fin, Fin_Block);\n+               else\n+                  Insert_After_And_Analyze (Last_Object,\n+                    Make_Block_Statement (Loc,\n+                      Declarations => Fin_Decls,\n+                      Handled_Statement_Sequence =>\n+                        Make_Handled_Sequence_Of_Statements (Loc,\n+                          Statements => New_List (Fin_Block))));\n \n-               if No (Last_Fin) then\n                   Last_Fin := Fin_Block;\n                end if;\n \n+               Prev_Fin := Fin_Block;\n+\n             --  When the associated node is an array object, the expander may\n             --  sometimes generate a loop and create transient objects inside\n             --  the loop."}, {"sha": "cd106fc98da67bd6cc116c3f4545e50df0df5fb1", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "patch": "@@ -3026,6 +3026,21 @@ package body Freeze is\n                      end if;\n                   end if;\n                end;\n+\n+               --  Pre/Post conditions are implemented through a subprogram in\n+               --  the corresponding body, and therefore are not checked on an\n+               --  imported subprogram for which the body is not available.\n+\n+               if Is_Subprogram (E)\n+                 and then Is_Imported (E)\n+                 and then Present (Contract (E))\n+                 and then Present (Spec_PPC_List (Contract (E)))\n+               then\n+                  Error_Msg_NE (\"pre/post conditions on imported subprogram \"\n+                     & \"are not enforced?\",\n+                     E, Spec_PPC_List (Contract (E)));\n+               end if;\n+\n             end if;\n \n             --  Must freeze its parent first if it is a derived subprogram"}, {"sha": "eb0b4219c1a776fc53bf7f1efcb9c30611f395b3", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "patch": "@@ -16638,10 +16638,11 @@ This pragma identifies an imported function (imported in the usual way\n with pragma @code{Import}) as corresponding to a C++ constructor.\n @end table\n \n-In addition, C++ exceptions are propagated and can be handled in a\n+In addition, C++ exceptions are propagated and can be handled in an\n @code{others} choice of an exception handler. The corresponding Ada\n occurrence has no message, and the simple name of the exception identity\n-contains @samp{Foreign_Exception}.\n+contains @samp{Foreign_Exception}. Finalization and awaiting dependent\n+tasks works properly when such foreign exceptions are propagated.\n \n @node Interfacing to COBOL\n @section Interfacing to COBOL"}, {"sha": "7e1141a9be7f5690b9a66dfa2f8686e19a22cb0b", "filename": "gcc/ada/initialize.c", "status": "modified", "additions": 3, "deletions": 54, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Finitialize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Finitialize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finitialize.c?ref=79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2011, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -221,7 +221,8 @@ __gnat_initialize (void *eh ATTRIBUTE_UNUSED)\n \n \t\t     FindClose (hDir);\n \n-\t\t     free (dir);\n+\t\t     if (dir != NULL)\n+\t\t       free (dir);\n \t\t   }\n \t       }\n \t     else\n@@ -280,58 +281,6 @@ void\n __gnat_initialize (void *eh)\n {\n   __gnat_init_float ();\n-\n-  /* On targets where we use the ZCX scheme, we need to register the frame\n-     tables at load/startup time.\n-\n-     For applications loaded as a set of \"modules\", the crtstuff objects\n-     linked in (crtbegin.o/end.o) are tailored to provide this service\n-     automatically, a-la C++ constructor fashion, triggered by the VxWorks\n-     loader thanks to a special variable declaration in crtbegin.o (_ctors).\n-\n-     Automatic de-registration is handled symmetrically, a-la C++ destructor\n-     fashion (with a _dtors variable also in crtbegin.o) triggered by the\n-     dynamic unloader.\n-\n-     Note that since the tables shall be registered against a common\n-     data structure, libgcc should be one of the modules (vs being partially\n-     linked against all the others at build time) and shall be loaded first.\n-\n-     For applications linked with the kernel, the scheme above would lead to\n-     duplicated symbols because the VxWorks kernel build \"munches\" by default,\n-     so we link against crtbeginT.o instead of crtbegin.o, which doesn't\n-     include the special variables. We know which set of crt objects is used\n-     thanks to a boolean indicator present in both sets (__module_has_ctors),\n-     and directly call the appropriate function here in the not-automatic\n-     case. We'll never unload that, so there is no de-registration to worry\n-     about.\n-\n-     For whole applications loaded as a single module, we may use one scheme\n-     or the other, except for the mixed Ada/C++ case in which the first scheme\n-     would fail for the same reason as in the linked-with-kernel situation.\n-\n-     The crt set selection is controlled by command line options via GCC's\n-     STARTFILE_SPEC in rs6000/vxworks.h.  This is tightly synchronized with a\n-     number of other GCC configuration and crtstuff changes, and we need to\n-     ensure that those changes are there to activate this circuitry.  */\n-\n-#if (__GNUC__ >= 3) && (defined (_ARCH_PPC) || defined (__ppc))\n- {\n-   /* The scheme described above is only useful for the actual ZCX case, and\n-      we don't want any reference to the crt provided symbols otherwise.  We\n-      may not link with any of the crt objects in the non-ZCX case, e.g. from\n-      documented procedures instructing the use of -nostdlib, and references\n-      to the ctors symbols here would just remain unsatisfied.\n-\n-      We have no way to avoid those references in the right conditions in this\n-      C module, because we have nothing like a IN_ZCX_RTS macro.  This aspect\n-      is then deferred to an Ada routine, which can do that based on a test\n-      against a constant System flag value.  */\n-\n-   extern void __gnat_vxw_setup_for_eh (void);\n-   __gnat_vxw_setup_for_eh ();\n- }\n-#endif\n }\n \n #elif defined(_T_HPUX10) || (!defined(IN_RTS) && defined(_X_HPUX10))"}, {"sha": "1977ba43598cbf549b30061f1fc6e89ea284cb06", "filename": "gcc/ada/s-atopri.adb", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fs-atopri.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fs-atopri.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atopri.adb?ref=79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "patch": "@@ -44,7 +44,7 @@ package body System.Atomic_Primitives is\n \n    begin\n       if Expected /= Desired then\n-         Actual := Atomic_Compare_Exchange_8 (Ptr, Expected, Desired);\n+         Actual := Sync_Compare_And_Swap_8 (Ptr, Expected, Desired);\n \n          if Actual /= Expected then\n             Expected := Actual;\n@@ -68,7 +68,7 @@ package body System.Atomic_Primitives is\n \n    begin\n       if Expected /= Desired then\n-         Actual := Atomic_Compare_Exchange_16 (Ptr, Expected, Desired);\n+         Actual := Sync_Compare_And_Swap_16 (Ptr, Expected, Desired);\n \n          if Actual /= Expected then\n             Expected := Actual;\n@@ -92,7 +92,7 @@ package body System.Atomic_Primitives is\n \n    begin\n       if Expected /= Desired then\n-         Actual := Atomic_Compare_Exchange_32 (Ptr, Expected, Desired);\n+         Actual := Sync_Compare_And_Swap_32 (Ptr, Expected, Desired);\n \n          if Actual /= Expected then\n             Expected := Actual;\n@@ -102,28 +102,4 @@ package body System.Atomic_Primitives is\n \n       return True;\n    end Lock_Free_Try_Write_32;\n-\n-   ----------------------------\n-   -- Lock_Free_Try_Write_64 --\n-   ----------------------------\n-\n-   function Lock_Free_Try_Write_64\n-      (Ptr      : Address;\n-       Expected : in out uint64;\n-       Desired  : uint64) return Boolean\n-   is\n-      Actual : uint64;\n-\n-   begin\n-      if Expected /= Desired then\n-         Actual := Atomic_Compare_Exchange_64 (Ptr, Expected, Desired);\n-\n-         if Actual /= Expected then\n-            Expected := Actual;\n-            return False;\n-         end if;\n-      end if;\n-\n-      return True;\n-   end Lock_Free_Try_Write_64;\n end System.Atomic_Primitives;"}, {"sha": "80eeb5ec41b71e36e3b9045a775fe5d1813ee640", "filename": "gcc/ada/s-atopri.ads", "status": "modified", "additions": 39, "deletions": 38, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fs-atopri.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fs-atopri.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atopri.ads?ref=79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "patch": "@@ -62,69 +62,69 @@ package System.Atomic_Primitives is\n    -- GCC built-in atomic primitives --\n    ------------------------------------\n \n-   function Atomic_Compare_Exchange_8\n+   function Atomic_Load_8\n+     (Ptr   : Address;\n+      Model : Mem_Model := Seq_Cst) return uint8;\n+   pragma Import (Intrinsic, Atomic_Load_8, \"__atomic_load_1\");\n+\n+   function Atomic_Load_16\n+     (Ptr   : Address;\n+      Model : Mem_Model := Seq_Cst) return uint16;\n+   pragma Import (Intrinsic, Atomic_Load_16, \"__atomic_load_2\");\n+\n+   function Atomic_Load_32\n+     (Ptr   : Address;\n+      Model : Mem_Model := Seq_Cst) return uint32;\n+   pragma Import (Intrinsic, Atomic_Load_32, \"__atomic_load_4\");\n+\n+   function Atomic_Load_64\n+     (Ptr   : Address;\n+      Model : Mem_Model := Seq_Cst) return uint64;\n+   pragma Import (Intrinsic, Atomic_Load_64, \"__atomic_load_8\");\n+\n+   function Sync_Compare_And_Swap_8\n      (Ptr      : Address;\n       Expected : uint8;\n       Desired  : uint8) return uint8;\n    pragma Import (Intrinsic,\n-                  Atomic_Compare_Exchange_8,\n+                  Sync_Compare_And_Swap_8,\n                   \"__sync_val_compare_and_swap_1\");\n \n    --  ??? Should use __atomic_compare_exchange_1 (doesn't work yet):\n-   --  function Atomic_Compare_Exchange_8\n+   --  function Sync_Compare_And_Swap_8\n    --    (Ptr           : Address;\n    --     Expected      : Address;\n    --     Desired       : uint8;\n    --     Weak          : Boolean   := False;\n    --     Success_Model : Mem_Model := Seq_Cst;\n    --     Failure_Model : Mem_Model := Seq_Cst) return Boolean;\n    --  pragma Import (Intrinsic,\n-   --                 Atomic_Compare_Exchange_8,\n+   --                 Sync_Compare_And_Swap_8,\n    --                 \"__atomic_compare_exchange_1\");\n \n-   function Atomic_Compare_Exchange_16\n+   function Sync_Compare_And_Swap_16\n      (Ptr      : Address;\n       Expected : uint16;\n       Desired  : uint16) return uint16;\n    pragma Import (Intrinsic,\n-                  Atomic_Compare_Exchange_16,\n+                  Sync_Compare_And_Swap_16,\n                   \"__sync_val_compare_and_swap_2\");\n \n-   function Atomic_Compare_Exchange_32\n+   function Sync_Compare_And_Swap_32\n      (Ptr      : Address;\n       Expected : uint32;\n       Desired  : uint32) return uint32;\n    pragma Import (Intrinsic,\n-                  Atomic_Compare_Exchange_32,\n+                  Sync_Compare_And_Swap_32,\n                   \"__sync_val_compare_and_swap_4\");\n \n-   function Atomic_Compare_Exchange_64\n+   function Sync_Compare_And_Swap_64\n      (Ptr      : Address;\n       Expected : uint64;\n-      Desired  : uint64) return uint64;\n+      Desired  : uint64) return Boolean;\n    pragma Import (Intrinsic,\n-                  Atomic_Compare_Exchange_64,\n-                  \"__sync_val_compare_and_swap_8\");\n-\n-   function Atomic_Load_8\n-     (Ptr   : Address;\n-      Model : Mem_Model := Seq_Cst) return uint8;\n-   pragma Import (Intrinsic, Atomic_Load_8, \"__atomic_load_1\");\n-\n-   function Atomic_Load_16\n-     (Ptr   : Address;\n-      Model : Mem_Model := Seq_Cst) return uint16;\n-   pragma Import (Intrinsic, Atomic_Load_16, \"__atomic_load_2\");\n-\n-   function Atomic_Load_32\n-     (Ptr   : Address;\n-      Model : Mem_Model := Seq_Cst) return uint32;\n-   pragma Import (Intrinsic, Atomic_Load_32, \"__atomic_load_4\");\n-\n-   function Atomic_Load_64\n-     (Ptr   : Address;\n-      Model : Mem_Model := Seq_Cst) return uint64;\n-   pragma Import (Intrinsic, Atomic_Load_64, \"__atomic_load_8\");\n+                  Sync_Compare_And_Swap_64,\n+                  \"__sync_bool_compare_and_swap_8\");\n \n    --------------------------\n    -- Lock-free operations --\n@@ -136,8 +136,8 @@ package System.Atomic_Primitives is\n    --  * Lock_Free_Read_N atomically loads the value of the protected component\n    --    accessed by the current protected operation.\n \n-   --  * Lock_Free_Try_Write_N tries to write the the Desired value into Ptr\n-   --    only if Expected and Desired mismatch.\n+   --  * Lock_Free_Try_Write_N tries to write the Desired value into Ptr only\n+   --    if Expected and Desired mismatch.\n \n    function Lock_Free_Read_8 (Ptr : Address) return uint8 is\n      (Atomic_Load_8 (Ptr, Acquire));\n@@ -148,8 +148,9 @@ package System.Atomic_Primitives is\n    function Lock_Free_Read_32 (Ptr : Address) return uint32 is\n       (Atomic_Load_32 (Ptr, Acquire));\n \n-   function Lock_Free_Read_64 (Ptr : Address) return uint64 is\n-      (Atomic_Load_64 (Ptr, Acquire));\n+   function Lock_Free_Read_64\n+     (Ptr : Address;\n+      Model : Mem_Model := Seq_Cst) return uint64 renames Atomic_Load_64;\n \n    function Lock_Free_Try_Write_8\n       (Ptr      : Address;\n@@ -168,8 +169,8 @@ package System.Atomic_Primitives is\n \n    function Lock_Free_Try_Write_64\n       (Ptr      : Address;\n-       Expected : in out uint64;\n-       Desired  : uint64) return Boolean;\n+       Expected : uint64;\n+       Desired  : uint64) return Boolean renames Sync_Compare_And_Swap_64;\n \n    pragma Inline (Lock_Free_Read_8);\n    pragma Inline (Lock_Free_Read_16);"}, {"sha": "56c38a8a5eee4deb1a5e32e9a12508f5b8b5aa56", "filename": "gcc/ada/s-regexp.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fs-regexp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fs-regexp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-regexp.adb?ref=79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2010, AdaCore                     --\n+--                     Copyright (C) 1999-2012, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -100,10 +100,12 @@ package body System.Regexp is\n       Tmp : Regexp_Access;\n \n    begin\n-      Tmp := new Regexp_Value (Alphabet_Size => R.R.Alphabet_Size,\n-                               Num_States    => R.R.Num_States);\n-      Tmp.all := R.R.all;\n-      R.R := Tmp;\n+      if R.R /= null then\n+         Tmp := new Regexp_Value (Alphabet_Size => R.R.Alphabet_Size,\n+                                  Num_States    => R.R.Num_States);\n+         Tmp.all := R.R.all;\n+         R.R := Tmp;\n+      end if;\n    end Adjust;\n \n    -------------"}, {"sha": "87fd15285e73331dda18a5aee4fe308f6d8738fb", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "patch": "@@ -4555,10 +4555,12 @@ package body Sem_Prag is\n                   null;\n \n                --  Verify that the homonym is in the same declarative part (not\n-               --  just the same scope).\n+               --  just the same scope). If the pragma comes from an aspect\n+               --  specification we know that it is part of the declaration.\n \n                elsif Parent (Unit_Declaration_Node (Def_Id)) /= Parent (N)\n                  and then Nkind (Parent (N)) /= N_Compilation_Unit_Aux\n+                 and then not From_Aspect_Specification (N)\n                then\n                   exit;\n "}, {"sha": "ea3b586961b6b269c76624f4fee3ae6aa8bb792f", "filename": "gcc/ada/switch-m.adb", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fswitch-m.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fswitch-m.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-m.adb?ref=79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -236,7 +236,7 @@ package body Switch.M is\n                   --  One-letter switches\n \n                   when 'a' | 'A' | 'b' | 'B' | 'c' | 'C' | 'E' | 'f' |\n-                       'F' | 'g' | 'h' | 'H' | 'I' | 'L' | 'n' | 'N' |\n+                       'F' | 'g' | 'h' | 'H' | 'I' | 'L' | 'N' |\n                        'o' | 'p' | 'P' | 'q' | 'Q' | 'r' | 's' | 'S' |\n                        't' | 'u' | 'U' | 'v' | 'x' | 'X' | 'Z' =>\n                      Storing (First_Stored) := C;\n@@ -423,6 +423,24 @@ package body Switch.M is\n                         return;\n                      end if;\n \n+                  --  -gnatn may be -gnatn, -gnatn1 or -gnat2\n+\n+                  when 'n' =>\n+                     Last_Stored := First_Stored;\n+                     Storing (Last_Stored) := 'n';\n+                     Ptr := Ptr + 1;\n+\n+                     if Ptr <= Max\n+                       and then Switch_Chars (Ptr) in '1' .. '2'\n+                     then\n+                        Last_Stored := Last_Stored + 1;\n+                        Storing (Last_Stored) := Switch_Chars (Ptr);\n+                        Ptr := Ptr + 1;\n+                     end if;\n+\n+                     Add_Switch_Component\n+                       (Storing (Storing'First .. Last_Stored));\n+\n                   --  -gnatR may be followed by '0', '1', '2' or '3',\n                   --  then by 's'\n "}, {"sha": "c1e85b2a812e4bd5b8209cd02baf693eef0d5da1", "filename": "gcc/ada/system-vxworks-ppc.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fsystem-vxworks-ppc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56/gcc%2Fada%2Fsystem-vxworks-ppc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vxworks-ppc.ads?ref=79ee6ab38bffb7e0c3f1a1e3b41cc9216ecd0d56", "patch": "@@ -115,7 +115,7 @@ package System is\n \n private\n \n-   pragma Linker_Options (\"-crtbe\");\n+   pragma Linker_Options (\"-crtbe\" & ASCII.NUL & \"-auto-register\");\n    --  Required by ZCX on VxWorks kernel\n \n    type Address is mod Memory_Size;"}]}