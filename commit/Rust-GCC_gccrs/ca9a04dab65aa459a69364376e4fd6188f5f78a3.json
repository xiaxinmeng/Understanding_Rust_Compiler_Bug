{"sha": "ca9a04dab65aa459a69364376e4fd6188f5f78a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E5YTA0ZGFiNjVhYTQ1OWE2OTM2NDM3NmU0ZmQ2MTg4ZjVmNzhhMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-11-15T16:53:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-11-15T16:53:51Z"}, "message": "lto-streamer-out.c (hash_tree): Use cl_optimization_hash.\n\n\t* lto-streamer-out.c (hash_tree): Use cl_optimization_hash.\n\t* lto-streamer.h (cl_optimization_stream_out, cl_optimization_stream_in): Declare.\n\t* optc-save-gen.awk: Generate cl_optimization LTO streaming and hashing routines.\n\t* opth-gen.awk: Add prototype of cl_optimization_hash.\n\t* tree-streamer-in.c (unpack_ts_optimization): Remove.\n\t(streamer_unpack_tree_bitfields): Use cl_optimization_stream_in.\n\t* tree-streamer-out.c (pack_ts_optimization): Remove.\n\t(streamer_pack_tree_bitfields): Use cl_optimization_stream_out.\n\nFrom-SVN: r217607", "tree": {"sha": "76e6169e67fc97082991b66e36d3b94491a938ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76e6169e67fc97082991b66e36d3b94491a938ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca9a04dab65aa459a69364376e4fd6188f5f78a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca9a04dab65aa459a69364376e4fd6188f5f78a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca9a04dab65aa459a69364376e4fd6188f5f78a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca9a04dab65aa459a69364376e4fd6188f5f78a3/comments", "author": null, "committer": null, "parents": [{"sha": "64ec531860ae0632d2e02cf545e1b2f99aa32b44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ec531860ae0632d2e02cf545e1b2f99aa32b44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64ec531860ae0632d2e02cf545e1b2f99aa32b44"}], "stats": {"total": 114, "additions": 78, "deletions": 36}, "files": [{"sha": "bb82d0e4743afc5b976a1d21ed899868c3e69dff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9a04dab65aa459a69364376e4fd6188f5f78a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9a04dab65aa459a69364376e4fd6188f5f78a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca9a04dab65aa459a69364376e4fd6188f5f78a3", "patch": "@@ -1,3 +1,14 @@\n+2014-11-15  Jan Hubicka <hubicka@ucw.cz>\n+\n+\t* lto-streamer-out.c (hash_tree): Use cl_optimization_hash.\n+\t* lto-streamer.h (cl_optimization_stream_out, cl_optimization_stream_in): Declare.\n+\t* optc-save-gen.awk: Generate cl_optimization LTO streaming and hashing routines.\n+\t* opth-gen.awk: Add prototype of cl_optimization_hash.\n+\t* tree-streamer-in.c (unpack_ts_optimization): Remove.\n+\t(streamer_unpack_tree_bitfields): Use cl_optimization_stream_in.\n+\t* tree-streamer-out.c (pack_ts_optimization): Remove.\n+\t(streamer_pack_tree_bitfields): Use cl_optimization_stream_out.\n+\n 2014-11-15  Mircea Namolaru  <mircea.namolaru@inria.fr>\n \n \t* common.opt (flag_loop_unroll_and_jam): New flag."}, {"sha": "ab067274ad720b95bbba942b9343b8af9168becd", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9a04dab65aa459a69364376e4fd6188f5f78a3/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9a04dab65aa459a69364376e4fd6188f5f78a3/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=ca9a04dab65aa459a69364376e4fd6188f5f78a3", "patch": "@@ -948,7 +948,7 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n     hstate.add_wide_int (cl_target_option_hash (TREE_TARGET_OPTION (t)));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n-    hstate.add (t, sizeof (struct cl_optimization));\n+    hstate.add_wide_int (cl_optimization_hash (TREE_OPTIMIZATION (t)));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_IDENTIFIER))\n     hstate.merge_hash (IDENTIFIER_HASH_VALUE (t));"}, {"sha": "000c147dc5894f80995878db3e70cd8b8bedbc2e", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9a04dab65aa459a69364376e4fd6188f5f78a3/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9a04dab65aa459a69364376e4fd6188f5f78a3/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=ca9a04dab65aa459a69364376e4fd6188f5f78a3", "patch": "@@ -844,6 +844,10 @@ void cl_target_option_stream_in (struct data_in *,\n \t\t\t\t struct bitpack_d *,\n \t\t\t\t struct cl_target_option *);\n \n+void cl_optimization_stream_out (struct bitpack_d *, struct cl_optimization *);\n+\n+void cl_optimization_stream_in (struct bitpack_d *, struct cl_optimization *);\n+\n \n /* In lto-symtab.c.  */\n extern void lto_symtab_merge_decls (void);"}, {"sha": "54c2ed21afce6acaa147b0d284f08ddd9341f2d5", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9a04dab65aa459a69364376e4fd6188f5f78a3/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9a04dab65aa459a69364376e4fd6188f5f78a3/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=ca9a04dab65aa459a69364376e4fd6188f5f78a3", "patch": "@@ -551,4 +551,61 @@ for (i = 0; i < n_target_val; i++) {\n \n print \"}\";\n \n+n_opt_val = 2;\n+var_opt_val[0] = \"x_optimize\"\n+var_opt_val_type[0] = \"char \"\n+var_opt_val[1] = \"x_optimize_size\"\n+var_opt_val_type[1] = \"char \"\n+for (i = 0; i < n_opts; i++) {\n+\tif (flag_set_p(\"Optimization\", flags[i])) {\n+\t\tname = var_name(flags[i])\n+\t\tif(name == \"\")\n+\t\t\tcontinue;\n+\n+\t\tif(name in var_opt_list_seen)\n+\t\t\tcontinue;\n+\n+\t\tvar_opt_list_seen[name]++;\n+\n+\t\totype = var_type_struct(flags[i])\n+\t\tvar_opt_val_type[n_opt_val] = otype;\n+\t\tvar_opt_val[n_opt_val++] = \"x_\" name;\n+\t}\n+}\n+print \"\";\n+print \"/* Hash optimization options  */\";\n+print \"hashval_t\";\n+print \"cl_optimization_hash (struct cl_optimization const *ptr ATTRIBUTE_UNUSED)\";\n+print \"{\";\n+print \"  inchash::hash hstate;\";\n+for (i = 0; i < n_opt_val; i++) {\n+\tname = var_opt_val[i]\n+\tprint \"  hstate.add_wide_int (ptr->\" name\");\";\n+}\n+print \"  return hstate.end ();\";\n+print \"}\";\n+\n+print \"\";\n+print \"/* Stream out optimization options  */\";\n+print \"void\";\n+print \"cl_optimization_stream_out (struct bitpack_d *bp,\";\n+print \"                            struct cl_optimization *ptr)\";\n+print \"{\";\n+for (i = 0; i < n_opt_val; i++) {\n+\tname = var_opt_val[i]\n+\tprint \"  bp_pack_value (bp, ptr->\" name\", 64);\";\n+}\n+print \"}\";\n+\n+print \"\";\n+print \"/* Stream in optimization options  */\";\n+print \"void\";\n+print \"cl_optimization_stream_in (struct bitpack_d *bp,\";\n+print \"                           struct cl_optimization *ptr)\";\n+print \"{\";\n+for (i = 0; i < n_opt_val; i++) {\n+\tname = var_opt_val[i]\n+\tprint \"  ptr->\" name\" = (\" var_opt_val_type[i] \") bp_unpack_value (bp, 64);\";\n+}\n+print \"}\";\n }"}, {"sha": "56e706a48577d425b2ad63f308b4b6c5d49241f6", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9a04dab65aa459a69364376e4fd6188f5f78a3/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9a04dab65aa459a69364376e4fd6188f5f78a3/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=ca9a04dab65aa459a69364376e4fd6188f5f78a3", "patch": "@@ -299,6 +299,9 @@ print \"\";\n print \"/* Hash option variables from a structure.  */\";\n print \"extern hashval_t cl_target_option_hash (const struct cl_target_option *);\";\n print \"\";\n+print \"/* Hash optimization from a structure.  */\";\n+print \"extern hashval_t cl_optimization_hash (const struct cl_optimization *);\";\n+print \"\";\n print \"/* Anything that includes tm.h, does not necessarily need this.  */\"\n print \"#if !defined(GCC_TM_H)\"\n print \"#include \\\"input.h\\\" /* for location_t */\""}, {"sha": "a11a46e168d93f12a87cb80f55f864cddcc6e8e2", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9a04dab65aa459a69364376e4fd6188f5f78a3/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9a04dab65aa459a69364376e4fd6188f5f78a3/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=ca9a04dab65aa459a69364376e4fd6188f5f78a3", "patch": "@@ -399,21 +399,6 @@ unpack_ts_translation_unit_decl_value_fields (struct data_in *data_in,\n   vec_safe_push (all_translation_units, expr);\n }\n \n-/* Unpack a TS_OPTIMIZATION tree from BP into EXPR.  */\n-\n-static void\n-unpack_ts_optimization (struct bitpack_d *bp, tree expr)\n-{\n-  unsigned i, len;\n-  struct cl_optimization *t = TREE_OPTIMIZATION (expr);\n-\n-  len = sizeof (struct cl_optimization);\n-  for (i = 0; i < len; i++)\n-    ((unsigned char *)t)[i] = bp_unpack_value (bp, 8);\n-  if (bp_unpack_value (bp, 32) != 0x12345678)\n-    fatal_error (\"cl_optimization size mismatch in LTO reader and writer\");\n-}\n-\n \n /* Unpack all the non-pointer fields of the TS_OMP_CLAUSE\n    structure of expression EXPR from bitpack BP.  */\n@@ -507,7 +492,7 @@ unpack_value_fields (struct data_in *data_in, struct bitpack_d *bp, tree expr)\n     unpack_ts_translation_unit_decl_value_fields (data_in, bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n-    unpack_ts_optimization (bp, expr);\n+    cl_optimization_stream_in (bp, TREE_OPTIMIZATION (expr));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_BINFO))\n     {"}, {"sha": "f735b5674215a1f5240f8322a3d003b2983582e9", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca9a04dab65aa459a69364376e4fd6188f5f78a3/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca9a04dab65aa459a69364376e4fd6188f5f78a3/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=ca9a04dab65aa459a69364376e4fd6188f5f78a3", "patch": "@@ -363,24 +363,6 @@ pack_ts_translation_unit_decl_value_fields (struct output_block *ob,\n   bp_pack_string (ob, bp, TRANSLATION_UNIT_LANGUAGE (expr), true);\n }\n \n-/* Pack a TS_OPTIMIZATION tree in EXPR to BP.  */\n-\n-static void\n-pack_ts_optimization (struct bitpack_d *bp, tree expr)\n-{\n-  struct cl_optimization *t = TREE_OPTIMIZATION (expr);\n-  unsigned i, len;\n-\n-  /* The cl_optimization is generated by the options\n-     awk script, so we just recreate a byte-by-byte copy here. */\n-\n-  len = sizeof (struct cl_optimization);\n-  for (i = 0; i < len; i++)\n-    bp_pack_value (bp, ((unsigned char *)t)[i], 8);\n-  /* Catch struct size mismatches between reader and writer. */\n-  bp_pack_value (bp, 0x12345678, 32);\n-}\n-\n \n /* Pack all the non-pointer fields of the TS_OMP_CLAUSE structure\n    of expression EXPR into bitpack BP.  */\n@@ -473,7 +455,7 @@ streamer_pack_tree_bitfields (struct output_block *ob,\n     pack_ts_translation_unit_decl_value_fields (ob, bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n-    pack_ts_optimization (bp, expr);\n+    cl_optimization_stream_out (bp, TREE_OPTIMIZATION (expr));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_BINFO))\n     bp_pack_var_len_unsigned (bp, vec_safe_length (BINFO_BASE_ACCESSES (expr)));"}]}