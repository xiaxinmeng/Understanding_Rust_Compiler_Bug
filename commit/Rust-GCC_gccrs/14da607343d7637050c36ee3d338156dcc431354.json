{"sha": "14da607343d7637050c36ee3d338156dcc431354", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRkYTYwNzM0M2Q3NjM3MDUwYzM2ZWUzZDMzODE1NmRjYzQzMTM1NA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2007-03-06T15:50:28Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2007-03-06T15:50:28Z"}, "message": "re PR bootstrap/31020 (cannot write in </test/gnu/gcc/objdir/prev-gcc/../gcc/./include>)\n\nfixincludes:\n\t* mkheaders.in: Fix headers for each multilib required.\n\ngcc:\n\tPR bootstrap/31020\n\t* configure.ac (CROSS_SYSTEM_HEADER_DIR, build_system_header_dir):\n\tDefine using $${sysroot_headers_suffix}.\n\t* configure: Regenerate.\n\t* cppdefault.c (cpp_include_defaults): Make FIXED_INCLUDE_DIR a\n\tmultilib-suffixed directory if SYSROOT_HEADERS_SUFFIX_SPEC\n\tdefined.\n\t* doc/invoke.texi (-print-sysroot-headers-suffix): Document.\n\t* gcc.c (print_sysroot_headers_suffix): New.\n\t(option_map): Include --print-sysroot-headers-suffix.\n\t(display_help): Mention -print-sysroot-headers-suffix.\n\t(process_command): Handle -print-sysroot-headers-suffix.\n\t(do_spec_1): Append multilib directory to include-fixed path if\n\tsysroot suffixes in use.\n\t(main): Handle -print-sysroot-headers-suffix.\n\t* Makefile.in (start.encap): Don't depend on xlimits.h\n\t(xlimits.h): Remove.\n\t(stmp-int-hdrs): Don't depend on xlimits.h.  Inline generation of\n\tlimits.h for each multilib in fixinc_list.\n\t(fixinc_list, s-fixinc_list): New.\n\t(stmp-fixinc): Depend on fixinc_list.  If not copying headers,\n\tgenerate them for each multilib in fixinc_list.\n\t(stmp-fixproto): Use include-fixed.  Run fixproto for each\n\tmultilib in fixinc_list.\n\t(mostlyclean): Don't remove xlimits.h.\n\t(clean): Remove include-fixed.\n\t(real-install-headers-tar, real-install-headers-cpio,\n\treal-install-headers-cp): Don't copy include, only include-fixed.\n\t(install-mkheaders): Depend on fixinc_list.  Don't depend on\n\txlimits.h.  Save limits.h files for each multilib in fixinc_list.\n\tAlways save mkinstalldirs.  Preserve ${sysroot_headers_suffix} in\n\tSYSTEM_HEADER_DIR setting in mkheaders.conf.\n\nFrom-SVN: r122620", "tree": {"sha": "8c9042406cd938c21327303d5cf16abd1b592581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c9042406cd938c21327303d5cf16abd1b592581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14da607343d7637050c36ee3d338156dcc431354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14da607343d7637050c36ee3d338156dcc431354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14da607343d7637050c36ee3d338156dcc431354", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14da607343d7637050c36ee3d338156dcc431354/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e669430fe3291fa26128e18c6083d0b0e61d9a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e669430fe3291fa26128e18c6083d0b0e61d9a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e669430fe3291fa26128e18c6083d0b0e61d9a3"}], "stats": {"total": 288, "additions": 205, "deletions": 83}, "files": [{"sha": "35187bd7e51d91f021c205275f70d375d9eb3d8a", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14da607343d7637050c36ee3d338156dcc431354/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14da607343d7637050c36ee3d338156dcc431354/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=14da607343d7637050c36ee3d338156dcc431354", "patch": "@@ -1,3 +1,7 @@\n+2007-03-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* mkheaders.in: Fix headers for each multilib required.\n+\n 2007-03-01  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* Makefile.in: Add dummy install-pdf target."}, {"sha": "b584b68d6aff1a17fff72f130483f7c840ee0d89", "filename": "fixincludes/mkheaders.in", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14da607343d7637050c36ee3d338156dcc431354/fixincludes%2Fmkheaders.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14da607343d7637050c36ee3d338156dcc431354/fixincludes%2Fmkheaders.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fmkheaders.in?ref=14da607343d7637050c36ee3d338156dcc431354", "patch": "@@ -78,29 +78,33 @@ libexecsubdir=${libexecdir}/gcc/${target_noncanonical}/${version}\n itoolsdir=${libexecsubdir}/install-tools\n itoolsdatadir=${libsubdir}/install-tools\n incdir=${libsubdir}/include-fixed\n-\n-. ${itoolsdatadir}/mkheaders.conf\n+mkinstalldirs=\"@SHELL@ ${itoolsdir}/mkinstalldirs\"\n \n cd ${itoolsdir}\n rm -rf ${incdir}/*\n \n-if [ x${STMP_FIXINC} != x ] ; then\n+for ml in `cat ${itoolsdatadir}/fixinc_list`; do\n+  sysroot_headers_suffix=`echo ${ml} | sed -e 's/;.*$//'`\n+  multi_dir=`echo ${ml} | sed -e 's/^[^;]*;//'`\n+  subincdir=${incdir}${multi_dir}\n+  . ${itoolsdatadir}/mkheaders.conf\n+  if [ x${STMP_FIXINC} != x ] ; then\n \tTARGET_MACHINE=\"${target}\" target_canonical=\"${target}\" \\\n \t    MACRO_LIST=\"${itoolsdatadir}/macro_list\" \\\n-\t    @SHELL@ ./fixinc.sh ${incdir} \\\n+\t    @SHELL@ ./fixinc.sh ${subincdir} \\\n \t    ${isysroot}${SYSTEM_HEADER_DIR} ${OTHER_FIXINCLUDES_DIRS}\n-\trm -f ${incdir}/syslimits.h\n-\tif [ -f ${incdir}/limits.h ]; then\n-\t  mv ${incdir}/limits.h ${incdir}/syslimits.h\n+\trm -f ${subincdir}/syslimits.h\n+\tif [ -f ${subincdir}/limits.h ]; then\n+\t  mv ${subincdir}/limits.h ${subincdir}/syslimits.h\n \telse\n-\t  cp ${itoolsdatadir}/gsyslimits.h ${incdir}/syslimits.h\n+\t  cp ${itoolsdatadir}/gsyslimits.h ${subincdir}/syslimits.h\n \tfi\n-fi\n+  fi\n \n-cp ${itoolsdatadir}/include/* ${incdir}\n+  cp ${itoolsdatadir}/include${multi_dir}/limits.h ${subincdir}\n \n-if [ x${STMP_FIXPROTO} != x ] ; then\n-  mkinstalldirs=\"@SHELL@ ${itoolsdir}/mkinstalldirs\"\n-  export FIXPROTO_DEFINES mkinstalldirs\n-  @SHELL@ fixproto ${incdir} ${incdir} ${isysroot}${SYSTEM_HEADER_DIR} || exit 1\n-fi\n+  if [ x${STMP_FIXPROTO} != x ] ; then\n+    export FIXPROTO_DEFINES mkinstalldirs\n+    @SHELL@ fixproto ${subincdir} ${subincdir} ${isysroot}${SYSTEM_HEADER_DIR} || exit 1\n+  fi\n+done"}, {"sha": "4430d04c3c331de39b7a9fb22c20b9c58b1f81e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14da607343d7637050c36ee3d338156dcc431354/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14da607343d7637050c36ee3d338156dcc431354/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14da607343d7637050c36ee3d338156dcc431354", "patch": "@@ -1,3 +1,38 @@\n+2007-03-06  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR bootstrap/31020\n+\t* configure.ac (CROSS_SYSTEM_HEADER_DIR, build_system_header_dir):\n+\tDefine using $${sysroot_headers_suffix}.\n+\t* configure: Regenerate.\n+\t* cppdefault.c (cpp_include_defaults): Make FIXED_INCLUDE_DIR a\n+\tmultilib-suffixed directory if SYSROOT_HEADERS_SUFFIX_SPEC\n+\tdefined.\n+\t* doc/invoke.texi (-print-sysroot-headers-suffix): Document.\n+\t* gcc.c (print_sysroot_headers_suffix): New.\n+\t(option_map): Include --print-sysroot-headers-suffix.\n+\t(display_help): Mention -print-sysroot-headers-suffix.\n+\t(process_command): Handle -print-sysroot-headers-suffix.\n+\t(do_spec_1): Append multilib directory to include-fixed path if\n+\tsysroot suffixes in use.\n+\t(main): Handle -print-sysroot-headers-suffix.\n+\t* Makefile.in (start.encap): Don't depend on xlimits.h\n+\t(xlimits.h): Remove.\n+\t(stmp-int-hdrs): Don't depend on xlimits.h.  Inline generation of\n+\tlimits.h for each multilib in fixinc_list.\n+\t(fixinc_list, s-fixinc_list): New.\n+\t(stmp-fixinc): Depend on fixinc_list.  If not copying headers,\n+\tgenerate them for each multilib in fixinc_list.\n+\t(stmp-fixproto): Use include-fixed.  Run fixproto for each\n+\tmultilib in fixinc_list.\n+\t(mostlyclean): Don't remove xlimits.h.\n+\t(clean): Remove include-fixed.\n+\t(real-install-headers-tar, real-install-headers-cpio,\n+\treal-install-headers-cp): Don't copy include, only include-fixed.\n+\t(install-mkheaders): Depend on fixinc_list.  Don't depend on\n+\txlimits.h.  Save limits.h files for each multilib in fixinc_list.\n+\tAlways save mkinstalldirs.  Preserve ${sysroot_headers_suffix} in\n+\tSYSTEM_HEADER_DIR setting in mkheaders.conf.\n+\n 2007-03-06  Jan Hubicka  <jh@suse.cz>\n \n \t* regstack.c (reg_to_stack): When in 64bit PIC mode, we still can load"}, {"sha": "4feaa9fea19e365211dcf36ebc1471624860d78b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 100, "deletions": 63, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14da607343d7637050c36ee3d338156dcc431354/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14da607343d7637050c36ee3d338156dcc431354/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=14da607343d7637050c36ee3d338156dcc431354", "patch": "@@ -1418,7 +1418,7 @@ all.cross: native gcc-cross$(exeext) cpp$(exeext) specs \\\n \tlibgcc-support lang.all.cross doc @GENINSRC@ srcextra\n # This is what must be made before installing GCC and converting libraries.\n start.encap: native xgcc$(exeext) cpp$(exeext) specs \\\n-\tlibgcc-support xlimits.h lang.start.encap @GENINSRC@ srcextra\n+\tlibgcc-support lang.start.encap @GENINSRC@ srcextra\n # These can't be made until after GCC can run.\n rest.encap: $(STMP_FIXPROTO) lang.rest.encap\n # This is what is made with the host's compiler\n@@ -1542,14 +1542,6 @@ cc1$(exeext): $(C_OBJS) cc1-checksum.o $(BACKEND) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(C_OBJS) cc1-checksum.o \\\n \t  $(BACKEND) $(LIBS)\n \n-# Build the version of limits.h that we will install.\n-xlimits.h: glimits.h limitx.h limity.h\n-\tif $(LIMITS_H_TEST) ; then \\\n-\t  cat $(srcdir)/limitx.h $(srcdir)/glimits.h $(srcdir)/limity.h > tmp-xlimits.h; \\\n-\telse \\\n-\t  cat $(srcdir)/glimits.h > tmp-xlimits.h; \\\n-\tfi\n-\tmv tmp-xlimits.h xlimits.h\n #\f\n # Build libgcc.a.\n \n@@ -3325,7 +3317,7 @@ gcov-dump$(exeext): $(GCOV_DUMP_OBJS) $(LIBDEPS)\n # be rebuilt.\n \n # Build the include directories.\n-stmp-int-hdrs: $(STMP_FIXINC) $(USER_H) xlimits.h $(UNWIND_H)\n+stmp-int-hdrs: $(STMP_FIXINC) $(USER_H) $(UNWIND_H)\n # Copy in the headers provided with gcc.\n # The sed command gets just the last file name component;\n # this is necessary because VPATH could add a dirname.\n@@ -3342,11 +3334,23 @@ stmp-int-hdrs: $(STMP_FIXINC) $(USER_H) xlimits.h $(UNWIND_H)\n \t    chmod a+r include/$$realfile; \\\n \t  fi; \\\n \tdone\n-\trm -f include-fixed/limits.h\n-\tcp xlimits.h include-fixed/limits.h\n-\tchmod a+r include-fixed/limits.h\n \trm -f include/unwind.h\n \tcp $(UNWIND_H) include/unwind.h\n+\tset -e; for ml in `cat fixinc_list`; do \\\n+\t  sysroot_headers_suffix=`echo $${ml} | sed -e 's/;.*$$//'`; \\\n+\t  multi_dir=`echo $${ml} | sed -e 's/^[^;]*;//'`; \\\n+\t  fix_dir=include-fixed$${multi_dir}; \\\n+\t  if $(LIMITS_H_TEST) ; then \\\n+\t    cat $(srcdir)/limitx.h $(srcdir)/glimits.h $(srcdir)/limity.h > tmp-xlimits.h; \\\n+\t  else \\\n+\t    cat $(srcdir)/glimits.h > tmp-xlimits.h; \\\n+\t  fi; \\\n+\t  $(mkinstalldirs) $${fix_dir}; \\\n+\t  chmod a+rx $${fix_dir} || true; \\\n+\t  rm -f $${fix_dir}/limits.h; \\\n+\t  mv tmp-xlimits.h $${fix_dir}/limits.h; \\\n+\t  chmod a+r $${fix_dir}/limits.h; \\\n+\tdone\n # Install the README\n \trm -f include-fixed/README\n \tcp $(srcdir)/../fixincludes/README-fixinc include-fixed/README\n@@ -3366,6 +3370,28 @@ s-macro_list : $(GCC_PASSES)\n \t$(SHELL) $(srcdir)/../move-if-change tmp-macro_list macro_list\n \t$(STAMP) s-macro_list\n \n+fixinc_list: s-fixinc_list; @true\n+s-fixinc_list : $(GCC_PASSES)\n+# Build up a list of multilib directories and corresponding sysroot\n+# suffixes, in form sysroot;multilib.\n+\tif $(GCC_FOR_TARGET) -print-sysroot-headers-suffix > /dev/null 2>&1; then \\\n+\t  set -e; for ml in `$(GCC_FOR_TARGET) -print-multi-lib`; do \\\n+\t    multi_dir=`echo $${ml} | sed -e 's/;.*$$//'`; \\\n+\t    flags=`echo $${ml} | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`; \\\n+\t    sfx=`$(GCC_FOR_TARGET) $${flags} -print-sysroot-headers-suffix`; \\\n+\t    if [ \"$${multi_dir}\" = \".\" ]; \\\n+\t      then multi_dir=\"\"; \\\n+\t    else \\\n+\t      multi_dir=/$${multi_dir}; \\\n+\t    fi; \\\n+\t    echo \"$${sfx};$${multi_dir}\"; \\\n+\t  done; \\\n+\telse \\\n+\t  echo \";\"; \\\n+\tfi > tmp-fixinc_list\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-fixinc_list fixinc_list\n+\t$(STAMP) s-fixinc_list\n+\n # The line below is supposed to avoid accidentally matching the\n # built-in suffix rule `.o:' to build fixincl out of fixincl.o.  You'd\n # expect fixincl to be newer than fixincl.o, such that this situation\n@@ -3383,37 +3409,44 @@ s-macro_list : $(GCC_PASSES)\n # Build fixed copies of system files.\n # Abort if no system headers available, unless building a crosscompiler.\n # FIXME: abort unless building --without-headers would be more accurate and less ugly\n-stmp-fixinc: gsyslimits.h macro_list \\\n+stmp-fixinc: gsyslimits.h macro_list fixinc_list \\\n   $(build_objdir)/fixincludes/fixincl \\\n   $(build_objdir)/fixincludes/fixinc.sh\n-\t@if ! $(inhibit_libc) && test ! -d ${SYSTEM_HEADER_DIR}; then \\\n-\t  echo The directory that should contain system headers does not exist: >&2 ; \\\n-\t  echo \"  ${SYSTEM_HEADER_DIR}\" >&2 ; \\\n-\t  tooldir_sysinc=`echo \"${gcc_tooldir}/sys-include\" | sed -e :a -e \"s,[^/]*/\\.\\.\\/,,\" -e ta`; \\\n-\t  if test \"x${SYSTEM_HEADER_DIR}\" = \"x$${tooldir_sysinc}\"; \\\n-\t  then sleep 1; else exit 1; fi; \\\n-\tfi\n \trm -rf include-fixed; mkdir include-fixed\n \t-chmod a+rx include-fixed\n \tif [ -d ../prev-gcc ]; then \\\n \t  cd ../prev-gcc && \\\n \t  $(MAKE) real-$(INSTALL_HEADERS_DIR) DESTDIR=`pwd`/../gcc/ \\\n \t    libsubdir=. ; \\\n \telse \\\n-\t  (TARGET_MACHINE='$(target)'; srcdir=`cd $(srcdir); ${PWD_COMMAND}`; \\\n-\t    SHELL='$(SHELL)'; MACRO_LIST=`${PWD_COMMAND}`/macro_list ; \\\n-\t    export TARGET_MACHINE srcdir SHELL MACRO_LIST && \\\n-\t    cd $(build_objdir)/fixincludes && \\\n-\t    $(SHELL) ./fixinc.sh ../../gcc/include-fixed \\\n-\t      $(SYSTEM_HEADER_DIR) $(OTHER_FIXINCLUDES_DIRS) ); \\\n-\t  rm -f include-fixed/syslimits.h; \\\n-\t  if [ -f include-fixed/limits.h ]; then \\\n-\t    mv include-fixed/limits.h include-fixed/syslimits.h; \\\n-\t  else \\\n-\t    cp $(srcdir)/gsyslimits.h include-fixed/syslimits.h; \\\n-\t  fi; \\\n+\t  set -e; for ml in `cat fixinc_list`; do \\\n+\t    sysroot_headers_suffix=`echo $${ml} | sed -e 's/;.*$$//'`; \\\n+\t    multi_dir=`echo $${ml} | sed -e 's/^[^;]*;//'`; \\\n+\t    fix_dir=include-fixed$${multi_dir}; \\\n+\t    if ! $(inhibit_libc) && test ! -d ${SYSTEM_HEADER_DIR}; then \\\n+\t      echo The directory that should contain system headers does not exist: >&2 ; \\\n+\t      echo \"  ${SYSTEM_HEADER_DIR}\" >&2 ; \\\n+\t      tooldir_sysinc=`echo \"${gcc_tooldir}/sys-include\" | sed -e :a -e \"s,[^/]*/\\.\\.\\/,,\" -e ta`; \\\n+\t      if test \"x${SYSTEM_HEADER_DIR}\" = \"x$${tooldir_sysinc}\"; \\\n+\t      then sleep 1; else exit 1; fi; \\\n+\t    fi; \\\n+\t    $(mkinstalldirs) $${fix_dir}; \\\n+\t    chmod a+rx $${fix_dir} || true; \\\n+\t    (TARGET_MACHINE='$(target)'; srcdir=`cd $(srcdir); ${PWD_COMMAND}`; \\\n+\t      SHELL='$(SHELL)'; MACRO_LIST=`${PWD_COMMAND}`/macro_list ; \\\n+\t      export TARGET_MACHINE srcdir SHELL MACRO_LIST && \\\n+\t      cd $(build_objdir)/fixincludes && \\\n+\t      $(SHELL) ./fixinc.sh ../../gcc/$${fix_dir} \\\n+\t        $(SYSTEM_HEADER_DIR) $(OTHER_FIXINCLUDES_DIRS) ); \\\n+\t    rm -f $${fix_dir}/syslimits.h; \\\n+\t    if [ -f $${fix_dir}/limits.h ]; then \\\n+\t      mv $${fix_dir}/limits.h $${fix_dir}/syslimits.h; \\\n+\t    else \\\n+\t      cp $(srcdir)/gsyslimits.h $${fix_dir}/syslimits.h; \\\n+\t    fi; \\\n+\t    chmod a+r $${fix_dir}/syslimits.h; \\\n+\t  done; \\\n \tfi\n-\tchmod a+r include-fixed/syslimits.h\n \t$(STAMP) stmp-fixinc\n \n # Files related to the fixproto script.\n@@ -3480,21 +3513,26 @@ fixhdr.ready: build/fix-header$(build_exeext)\n \n # stmp-int-hdrs is to make sure fixincludes has already finished.\n # The if statement is so that we don't run fixproto a second time\n-# if it has already been run on the files in `include'.\n-stmp-fixproto: fixhdr.ready fixproto stmp-int-hdrs\n-\tif [ -f include/fixed ] ; then true; \\\n-\telse \\\n-\t  : This line works around a 'make' bug in BSDI 1.1.; \\\n-\t  FIXPROTO_DEFINES=\"$(FIXPROTO_DEFINES)\"; export FIXPROTO_DEFINES; \\\n-\t  FIX_HEADER=\"build/fix-header$(build_exeext)\"; export FIX_HEADER; \\\n-\t  mkinstalldirs=\"$(mkinstalldirs)\"; \\\n-\t    export mkinstalldirs; \\\n-\t  if [ -d \"$(SYSTEM_HEADER_DIR)\" ]; then \\\n-\t    $(SHELL) ${srcdir}/fixproto include include $(SYSTEM_HEADER_DIR); \\\n-\t    if [ $$? -eq 0 ] ; then true ; else exit 1 ; fi ; \\\n-\t  else true; fi; \\\n-\t  $(STAMP) include/fixed; \\\n-\tfi\n+# if it has already been run on the files in `include-fixed'.\n+stmp-fixproto: fixhdr.ready fixproto fixinc_list stmp-int-hdrs\n+\tset -e; for ml in `cat fixinc_list`; do \\\n+\t  sysroot_headers_suffix=`echo $${ml} | sed -e 's/;.*$$//'`; \\\n+\t  multi_dir=`echo $${ml} | sed -e 's/^[^;]*;//'`; \\\n+\t  fix_dir=include-fixed$${multi_dir}; \\\n+\t  if [ -f $${fix_dir}/fixed ] ; then true; \\\n+\t  else \\\n+\t    : This line works around a 'make' bug in BSDI 1.1.; \\\n+\t    FIXPROTO_DEFINES=\"$(FIXPROTO_DEFINES)\"; export FIXPROTO_DEFINES; \\\n+\t    FIX_HEADER=\"build/fix-header$(build_exeext)\"; export FIX_HEADER; \\\n+\t    mkinstalldirs=\"$(mkinstalldirs)\"; \\\n+\t      export mkinstalldirs; \\\n+\t    if [ -d \"$(SYSTEM_HEADER_DIR)\" ]; then \\\n+\t      $(SHELL) ${srcdir}/fixproto $${fix_dir} $${fix_dir} $(SYSTEM_HEADER_DIR); \\\n+\t      if [ $$? -eq 0 ] ; then true ; else exit 1 ; fi ; \\\n+\t    else true; fi; \\\n+\t    $(STAMP) $${fix_dir}/fixed; \\\n+\t  fi; \\\n+\tdone\n \t$(STAMP) stmp-fixproto\n \n # We can't run fixproto (it's being built for a different host), but we still\n@@ -3696,8 +3734,6 @@ mostlyclean: lang.mostlyclean\n # Delete build programs\n \t-rm -f build/*\n \t-rm -f mddeps.mk\n-# Delete the temp files made in the course of building libgcc.a.\n-\t-rm -f xlimits.h\n # Delete other built files.\n \t-rm -f xsys-protos.hT\n \t-rm -f specs.h gencheck.h options.c options.h\n@@ -3738,8 +3774,8 @@ clean: mostlyclean lang.clean\n \t-rm -f cs-*\n \t-rm -f doc/*.dvi\n \t-rm -f doc/*.pdf\n-# Delete the include directory.\n-\t-rm -rf include\n+# Delete the include directories.\n+\t-rm -rf include include-fixed\n # Delete files used by the \"multilib\" facility (including libgcc subdirs).\n \t-rm -f multilib.h tmpmultilib*\n \t-if [ \"x$(MULTILIB_DIRNAMES)\" != x ] ; then \\\n@@ -4017,36 +4053,37 @@ install-headers-cp: stmp-int-hdrs $(STMP_FIXPROTO) install-include-dir\n \n # Targets without dependencies, for use in prev-gcc during bootstrap.\n real-install-headers-tar:\n-\t(cd `${PWD_COMMAND}`/include ; \\\n-\t tar -cf - .; exit 0) | (cd $(DESTDIR)$(libsubdir)/include; tar xpf - )\n \t(cd `${PWD_COMMAND}`/include-fixed ; \\\n \t tar -cf - .; exit 0) | (cd $(DESTDIR)$(libsubdir)/include-fixed; tar xpf - )\n \n real-install-headers-cpio:\n-\tcd `${PWD_COMMAND}`/include ; \\\n-\tfind . -print | cpio -pdum $(DESTDIR)$(libsubdir)/include\n \tcd `${PWD_COMMAND}`/include-fixed ; \\\n \tfind . -print | cpio -pdum $(DESTDIR)$(libsubdir)/include-fixed\n \n real-install-headers-cp:\n-\tcp -p -r include $(DESTDIR)$(libsubdir)\n \tcp -p -r include-fixed $(DESTDIR)$(libsubdir)\n \n # Install supporting files for fixincludes to be run later.\n install-mkheaders: stmp-int-hdrs $(STMP_FIXPROTO) install-itoolsdirs \\\n-  macro_list xlimits.h\n-\t$(INSTALL_DATA) xlimits.h $(DESTDIR)$(itoolsdatadir)/include/limits.h\n+  macro_list fixinc_list\n \t$(INSTALL_DATA) $(srcdir)/gsyslimits.h \\\n \t  $(DESTDIR)$(itoolsdatadir)/gsyslimits.h\n \t$(INSTALL_DATA) macro_list $(DESTDIR)$(itoolsdatadir)/macro_list\n-\tif [ x$(STMP_FIXPROTO) != x ] ; then \\\n-\t  $(INSTALL_SCRIPT) $(mkinstalldirs) \\\n+\t$(INSTALL_DATA) fixinc_list $(DESTDIR)$(itoolsdatadir)/fixinc_list\n+\tset -e; for ml in `cat fixinc_list`; do \\\n+\t  multi_dir=`echo $${ml} | sed -e 's/^[^;]*;//'`; \\\n+\t  $(mkinstalldirs) $(DESTDIR)$(itoolsdatadir)/include$${multi_dir}; \\\n+\t  $(INSTALL_DATA) include-fixed$${multidir}/limits.h $(DESTDIR)$(itoolsdatadir)/include$${multi_dir}/limits.h; \\\n+\tdone\n+\t$(INSTALL_SCRIPT) $(srcdir)/../mkinstalldirs \\\n \t\t$(DESTDIR)$(itoolsdir)/mkinstalldirs ; \\\n+\tif [ x$(STMP_FIXPROTO) != x ] ; then \\\n \t  $(INSTALL_SCRIPT) $(srcdir)/fixproto $(DESTDIR)$(itoolsdir)/fixproto ; \\\n \t  $(INSTALL_PROGRAM) build/fix-header$(build_exeext) \\\n \t\t$(DESTDIR)$(itoolsdir)/fix-header$(build_exeext) ; \\\n \telse :; fi\n-\techo 'SYSTEM_HEADER_DIR=\"'\"$(SYSTEM_HEADER_DIR)\"'\"' \\\n+\tsysroot_headers_suffix='$${sysroot_headers_suffix}'; \\\n+\t\techo 'SYSTEM_HEADER_DIR=\"'\"$(SYSTEM_HEADER_DIR)\"'\"' \\\n \t\t> $(DESTDIR)$(itoolsdatadir)/mkheaders.conf\n \techo 'OTHER_FIXINCLUDES_DIRS=\"$(OTHER_FIXINCLUDES_DIRS)\"' \\\n \t\t>> $(DESTDIR)$(itoolsdatadir)/mkheaders.conf"}, {"sha": "15e9b31d917f5432f39511d0ab9df5ebce724275", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14da607343d7637050c36ee3d338156dcc431354/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14da607343d7637050c36ee3d338156dcc431354/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=14da607343d7637050c36ee3d338156dcc431354", "patch": "@@ -7128,7 +7128,7 @@ if test \"${with_sysroot+set}\" = set; then\n  esac\n \n  TARGET_SYSTEM_ROOT_DEFINE='-DTARGET_SYSTEM_ROOT=\\\"$(TARGET_SYSTEM_ROOT)\\\"'\n- CROSS_SYSTEM_HEADER_DIR='$(TARGET_SYSTEM_ROOT)$(NATIVE_SYSTEM_HEADER_DIR)'\n+ CROSS_SYSTEM_HEADER_DIR='$(TARGET_SYSTEM_ROOT)$${sysroot_headers_suffix}$(NATIVE_SYSTEM_HEADER_DIR)'\n \n  if test \"x$exec_prefix\" = xNONE; then\n   if test \"x$prefix\" = xNONE; then\n@@ -13121,7 +13121,7 @@ ALL=all.internal\n SYSTEM_HEADER_DIR='$(NATIVE_SYSTEM_HEADER_DIR)'\n \n if test \"x$with_build_sysroot\" != x; then\n-  build_system_header_dir=$with_build_sysroot'$(NATIVE_SYSTEM_HEADER_DIR)'\n+  build_system_header_dir=$with_build_sysroot'$${sysroot_headers_suffix}$(NATIVE_SYSTEM_HEADER_DIR)'\n else\n   # This value is used, even on a native system, because\n   # CROSS_SYSTEM_HEADER_DIR is just"}, {"sha": "2a0c86c0e2164aff9733761746f3654c4bd0ede5", "filename": "gcc/configure.ac", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14da607343d7637050c36ee3d338156dcc431354/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14da607343d7637050c36ee3d338156dcc431354/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=14da607343d7637050c36ee3d338156dcc431354", "patch": "@@ -754,7 +754,7 @@ AC_ARG_WITH(sysroot,\n  esac\n    \n  TARGET_SYSTEM_ROOT_DEFINE='-DTARGET_SYSTEM_ROOT=\\\"$(TARGET_SYSTEM_ROOT)\\\"'\n- CROSS_SYSTEM_HEADER_DIR='$(TARGET_SYSTEM_ROOT)$(NATIVE_SYSTEM_HEADER_DIR)'\n+ CROSS_SYSTEM_HEADER_DIR='$(TARGET_SYSTEM_ROOT)$${sysroot_headers_suffix}$(NATIVE_SYSTEM_HEADER_DIR)'\n \t\n  if test \"x$exec_prefix\" = xNONE; then\n   if test \"x$prefix\" = xNONE; then\n@@ -1704,7 +1704,7 @@ ALL=all.internal\t\t\t\tAC_SUBST(ALL)\n SYSTEM_HEADER_DIR='$(NATIVE_SYSTEM_HEADER_DIR)'\tAC_SUBST(SYSTEM_HEADER_DIR)\n \n if test \"x$with_build_sysroot\" != x; then\n-  build_system_header_dir=$with_build_sysroot'$(NATIVE_SYSTEM_HEADER_DIR)'\n+  build_system_header_dir=$with_build_sysroot'$${sysroot_headers_suffix}$(NATIVE_SYSTEM_HEADER_DIR)'\n else\n   # This value is used, even on a native system, because \n   # CROSS_SYSTEM_HEADER_DIR is just "}, {"sha": "597988ee332b1abc3b79f25bfe41be3d99895fb7", "filename": "gcc/cppdefault.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14da607343d7637050c36ee3d338156dcc431354/gcc%2Fcppdefault.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14da607343d7637050c36ee3d338156dcc431354/gcc%2Fcppdefault.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppdefault.c?ref=14da607343d7637050c36ee3d338156dcc431354", "patch": "@@ -71,7 +71,15 @@ const struct default_include cpp_include_defaults[]\n #endif\n #ifdef FIXED_INCLUDE_DIR\n     /* This is the dir for fixincludes.  */\n-    { FIXED_INCLUDE_DIR, \"GCC\", 0, 0, 0, 0 },\n+    { FIXED_INCLUDE_DIR, \"GCC\", 0, 0, 0,\n+      /* A multilib suffix needs adding if different multilibs use\n+\t different headers.  */\n+#ifdef SYSROOT_HEADERS_SUFFIX_SPEC\n+      1\n+#else\n+      0\n+#endif\n+    },\n #endif\n #ifdef CROSS_INCLUDE_DIR\n     /* One place the target system's headers might be.  */"}, {"sha": "84dd396516941fa66c247839224c0e2e0e993f30", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14da607343d7637050c36ee3d338156dcc431354/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14da607343d7637050c36ee3d338156dcc431354/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=14da607343d7637050c36ee3d338156dcc431354", "patch": "@@ -302,6 +302,7 @@ Objective-C and Objective-C++ Dialects}.\n -p  -pg  -print-file-name=@var{library}  -print-libgcc-file-name @gol\n -print-multi-directory  -print-multi-lib @gol\n -print-prog-name=@var{program}  -print-search-dirs  -Q @gol\n+-print-sysroot-headers-suffix @gol\n -save-temps  -time}\n \n @item Optimization Options\n@@ -4697,6 +4698,12 @@ variable @env{GCC_EXEC_PREFIX} to the directory where you installed them.\n Don't forget the trailing @samp{/}.\n @xref{Environment Variables}.\n \n+@item -print-sysroot-headers-suffix\n+@opindex print-sysroot-headers-suffix\n+Print the suffix added to the target sysroot when searching for\n+headers, or give an error if the compiler is not configured with such\n+a suffix---and don't do anything else.\n+\n @item -dumpmachine\n @opindex dumpmachine\n Print the compiler's target machine (for example,"}, {"sha": "7a5056a5ba02f9295434971fbb00c81c6bb7297d", "filename": "gcc/gcc.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14da607343d7637050c36ee3d338156dcc431354/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14da607343d7637050c36ee3d338156dcc431354/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=14da607343d7637050c36ee3d338156dcc431354", "patch": "@@ -168,6 +168,11 @@ static int print_multi_lib;\n \n static int print_help_list;\n \n+/* Flag saying to print the sysroot suffix used for searching for\n+   headers.  */\n+\n+static int print_sysroot_headers_suffix;\n+\n /* Flag indicating whether we should print the command and arguments */\n \n static int verbose_flag;\n@@ -1125,6 +1130,7 @@ static const struct option_map option_map[] =\n    {\"--print-multi-directory\", \"-print-multi-directory\", 0},\n    {\"--print-multi-os-directory\", \"-print-multi-os-directory\", 0},\n    {\"--print-prog-name\", \"-print-prog-name=\", \"aj\"},\n+   {\"--print-sysroot-headers-suffix\", \"-print-sysroot-headers-suffix\", 0},\n    {\"--profile\", \"-p\", 0},\n    {\"--profile-blocks\", \"-a\", 0},\n    {\"--quiet\", \"-q\", 0},\n@@ -3193,6 +3199,7 @@ display_help (void)\n   -print-multi-lib         Display the mapping between command line options and\\n\\\n                            multiple library search directories\\n\"), stdout);\n   fputs (_(\"  -print-multi-os-directory Display the relative path to OS libraries\\n\"), stdout);\n+  fputs (_(\"  -print-sysroot-headers-suffix Display the sysroot suffix used to find headers\\n\"), stdout);\n   fputs (_(\"  -Wa,<options>            Pass comma-separated <options> on to the assembler\\n\"), stdout);\n   fputs (_(\"  -Wp,<options>            Pass comma-separated <options> on to the preprocessor\\n\"), stdout);\n   fputs (_(\"  -Wl,<options>            Pass comma-separated <options> on to the linker\\n\"), stdout);\n@@ -3637,6 +3644,8 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \tprint_multi_directory = 1;\n       else if (! strcmp (argv[i], \"-print-multi-os-directory\"))\n \tprint_multi_os_directory = 1;\n+      else if (! strcmp (argv[i], \"-print-sysroot-headers-suffix\"))\n+\tprint_sysroot_headers_suffix = 1;\n       else if (! strncmp (argv[i], \"-Wa,\", 4))\n \t{\n \t  int prev, j;\n@@ -4066,6 +4075,8 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t;\n       else if (! strcmp (argv[i], \"-print-multi-os-directory\"))\n \t;\n+      else if (! strcmp (argv[i], \"-print-sysroot-headers-suffix\"))\n+\t;\n       else if (! strncmp (argv[i], \"--sysroot=\", strlen (\"--sysroot=\")))\n \t{\n \t  target_system_root = argv[i] + strlen (\"--sysroot=\");\n@@ -4978,6 +4989,9 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\t\t     spec_path, &info);\n \n \t      info.append = \"include-fixed\";\n+\t      if (*sysroot_hdrs_suffix_spec)\n+\t\tinfo.append = concat (info.append, dir_separator_str,\n+\t\t\t\t      multilib_dir, NULL);\n \t      info.append_len = strlen (info.append);\n \t      for_each_path (&include_prefixes, false, info.append_len,\n \t\t\t     spec_path, &info);\n@@ -6394,6 +6408,19 @@ main (int argc, char **argv)\n       return (0);\n     }\n \n+  if (print_sysroot_headers_suffix)\n+    {\n+      if (*sysroot_hdrs_suffix_spec)\n+\t{\n+\t  printf(\"%s\\n\", target_sysroot_hdrs_suffix);\n+\t  return (0);\n+\t}\n+      else\n+\t/* The error status indicates that only one set of fixed\n+\t   headers should be built.  */\n+\tfatal (\"not configured with sysroot headers suffix\");\n+    }\n+\n   if (print_help_list)\n     {\n       display_help ();"}]}