{"sha": "ee03c51c0b62d64497eb31d630ec386df6c7299d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUwM2M1MWMwYjYyZDY0NDk3ZWIzMWQ2MzBlYzM4NmRmNmM3Mjk5ZA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-12-13T10:37:15Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-12-13T10:37:15Z"}, "message": "[AArch64][doc] Clarify -msve-vector-bits=128 behaviour\n\nWe've received reports about the -msve-vector-bits=128 bits being somewhat ambiguous.\nIt isn't clear whether -msve-vector-bits=128 forces vector-length-agnostic code or whether\n-msve-vector-bits=scalable forces 128-bit vector-lengh-specific code.\nThe latter is a, perhaps unintuitive, reading that we want to exclude.\n\nThis patch makes it more explicit that -msve-vector-bits=128 is special and produces\nvector-length *agnostic* code. In the end, I've rewritten the whole option documentation.\n\nChecked make pdf that the output looks reasonable.\n\n    * doc/invoke.texi (-msve-vector-bits): Clarify -msve-vector-bits=128\n    behavior.\n\nFrom-SVN: r267081", "tree": {"sha": "cda00bd5d203054cdcf4661b86c0c9fba88eacb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cda00bd5d203054cdcf4661b86c0c9fba88eacb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee03c51c0b62d64497eb31d630ec386df6c7299d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee03c51c0b62d64497eb31d630ec386df6c7299d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee03c51c0b62d64497eb31d630ec386df6c7299d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee03c51c0b62d64497eb31d630ec386df6c7299d/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cab07f0891dec03f64ae4be225f7dd5ea4c70ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cab07f0891dec03f64ae4be225f7dd5ea4c70ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cab07f0891dec03f64ae4be225f7dd5ea4c70ee"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "ba32d6d53c17e854a3bd0ee17f8789ed293c27d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee03c51c0b62d64497eb31d630ec386df6c7299d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee03c51c0b62d64497eb31d630ec386df6c7299d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee03c51c0b62d64497eb31d630ec386df6c7299d", "patch": "@@ -1,3 +1,8 @@\n+2018-12-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* doc/invoke.texi (-msve-vector-bits): Clarify -msve-vector-bits=128\n+\tbehavior.\n+\n 2018-12-13  Wei Xiao  <wei3.xiao@intel.com>\n \n \t* common/config/i386/i386-common.c (processor_names): Add cascadelake."}, {"sha": "44e1069de3b4c6904e9f494745cf8aaa0d29cd27", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee03c51c0b62d64497eb31d630ec386df6c7299d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee03c51c0b62d64497eb31d630ec386df6c7299d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ee03c51c0b62d64497eb31d630ec386df6c7299d", "patch": "@@ -15675,16 +15675,19 @@ an effect when SVE is enabled.\n \n GCC supports two forms of SVE code generation: ``vector-length\n agnostic'' output that works with any size of vector register and\n-``vector-length specific'' output that only works when the vector\n-registers are a particular size.  Replacing @var{bits} with\n-@samp{scalable} selects vector-length agnostic output while\n-replacing it with a number selects vector-length specific output.\n-The possible lengths in the latter case are: 128, 256, 512, 1024\n-and 2048.  @samp{scalable} is the default.\n-\n-At present, @samp{-msve-vector-bits=128} produces the same output\n-as @samp{-msve-vector-bits=scalable}.\n-\n+``vector-length specific'' output that allows GCC to make assumptions\n+about the vector length when it is useful for optimization reasons.\n+The possible values of @samp{bits} are: @samp{scalable}, @samp{128},\n+@samp{256}, @samp{512}, @samp{1024} and @samp{2048}.\n+Specifying @samp{scalable} selects vector-length agnostic\n+output.  At present @samp{-msve-vector-bits=128} also generates vector-length\n+agnostic output.  All other values generate vector-length specific code.\n+The behavior of these values may change in future releases and no value except\n+@samp{scalable} should be relied on for producing code that is portable across\n+different hardware SVE vector lengths.\n+\n+The default is @samp{-msve-vector-bits=scalable}, which produces\n+vector-length agnostic code.\n @end table\n \n @subsubsection @option{-march} and @option{-mcpu} Feature Modifiers"}]}