{"sha": "3ad17f7bb5f47201b858f83476ded95672d57a76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FkMTdmN2JiNWY0NzIwMWI4NThmODM0NzZkZWQ5NTY3MmQ1N2E3Ng==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-19T10:57:02Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-19T10:57:02Z"}, "message": "arc.h, [...]: Remove commented-out or useless definitions of CASE_VECTOR_PC_RELATIVE.\n\n\t* config/arc/arc.h, config/arm/arm.h, config/frv/frv.h,\n\tconfig/h8300/h8300.h, config/i386/i386.h, config/i860/i860.h,\n\tconfig/iq2000/iq2000.h, config/m32r/m32r.h,\n\tconfig/pdp11/pdp11.h, config/sparc/sparc.h,\n\tconfig/xtensa/xtensa.h: Remove commented-out or useless\n\tdefinitions of CASE_VECTOR_PC_RELATIVE.\n\nFrom-SVN: r78091", "tree": {"sha": "3c89f424eda3b963b1d9b3e44480f2bfce1aaf99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c89f424eda3b963b1d9b3e44480f2bfce1aaf99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ad17f7bb5f47201b858f83476ded95672d57a76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad17f7bb5f47201b858f83476ded95672d57a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ad17f7bb5f47201b858f83476ded95672d57a76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad17f7bb5f47201b858f83476ded95672d57a76/comments", "author": null, "committer": null, "parents": [{"sha": "a3b182a7874b3114e3d363caa3c103a03dcb4556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3b182a7874b3114e3d363caa3c103a03dcb4556", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3b182a7874b3114e3d363caa3c103a03dcb4556"}], "stats": {"total": 75, "additions": 9, "deletions": 66}, "files": [{"sha": "c6675c981d5864b02a969cf3397f8c613843ad0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ad17f7bb5f47201b858f83476ded95672d57a76", "patch": "@@ -1,3 +1,12 @@\n+2004-02-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/arc/arc.h, config/arm/arm.h, config/frv/frv.h,\n+\tconfig/h8300/h8300.h, config/i386/i386.h, config/i860/i860.h,\n+\tconfig/iq2000/iq2000.h, config/m32r/m32r.h,\n+\tconfig/pdp11/pdp11.h, config/sparc/sparc.h,\n+\tconfig/xtensa/xtensa.h: Remove commented-out or useless\n+\tdefinitions of CASE_VECTOR_PC_RELATIVE.\n+\n 2004-02-19  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* loop.c (all_sets_invariant_p): Remove."}, {"sha": "48044403c9c76adc7ea42814da23608232ecfc13", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=3ad17f7bb5f47201b858f83476ded95672d57a76", "patch": "@@ -1186,15 +1186,6 @@ do { if ((LOG) != 0) fprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG)); } while (0)\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE Pmode\n \n-/* Define as C expression which evaluates to nonzero if the tablejump\n-   instruction expects the table to contain offsets from the address of the\n-   table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* It's not clear what PIC will look like or whether we want to use -fpic\n-   for the embedded form currently being talked about.  For now require -fpic\n-   to get pc relative switch tables.  */\n-/*#define CASE_VECTOR_PC_RELATIVE 1 */\n-\n /* Define if operations between registers always perform the operation\n    on the full register even if a narrower mode is specified.  */\n #define WORD_REGISTER_OPERATIONS"}, {"sha": "320bee052992ebeccba4eac92eeee1bba3b4cf01", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=3ad17f7bb5f47201b858f83476ded95672d57a76", "patch": "@@ -2399,12 +2399,6 @@ do {\t\t\t\t\t\t\t\\\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE Pmode\n \n-/* Define as C expression which evaluates to nonzero if the tablejump\n-   instruction expects the table to contain offsets from the address of the\n-   table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE 1 */\n-\n /* signed 'char' is most compatible, but RISC OS wants it unsigned.\n    unsigned is probably best, but may break some code.  */\n #ifndef DEFAULT_SIGNED_CHAR"}, {"sha": "021740c4782d88306f395e6316329642387a96e4", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=3ad17f7bb5f47201b858f83476ded95672d57a76", "patch": "@@ -2878,11 +2878,6 @@ do {                                                                    \\\n   (*targetm.asm_out.internal_label) (STREAM, PREFIX, NUM);                      \\\n } while (0)\n \n-/* Define this to determine whether case statement labels are relative to\n-   the start of the case statement or not.  */\n-\n-#define CASE_VECTOR_PC_RELATIVE (flag_pic)\n-\n \f\n /* Assembler Commands for Exception Regions.  */\n "}, {"sha": "aad99ec2c453af39bbc75404e67153e7268347ba", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=3ad17f7bb5f47201b858f83476ded95672d57a76", "patch": "@@ -916,12 +916,6 @@ struct cum_arg\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE Pmode\n \n-/* Define as C expression which evaluates to nonzero if the tablejump\n-   instruction expects the table to contain offsets from the address of the\n-   table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/*#define CASE_VECTOR_PC_RELATIVE 1 */\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.\n \n    On the H8/300, sign extension is expensive, so we'll say that chars"}, {"sha": "5cbddb139783eb0e9778dd487e829b3fdf183b49", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=3ad17f7bb5f47201b858f83476ded95672d57a76", "patch": "@@ -2516,12 +2516,6 @@ enum ix86_builtins\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE (!TARGET_64BIT || flag_pic ? SImode : DImode)\n \n-/* Define as C expression which evaluates to nonzero if the tablejump\n-   instruction expects the table to contain offsets from the address of the\n-   table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE 1 */\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "1b29a08adbe80feda7a1fab852d34ab703743857", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=3ad17f7bb5f47201b858f83476ded95672d57a76", "patch": "@@ -821,12 +821,6 @@ struct cumulative_args { int ints, floats; };\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE SImode\n \n-/* Define as C expression which evaluates to nonzero if the tablejump\n-   instruction expects the table to contain offsets from the address of the\n-   table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE 1 */\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "2574dbc8ebb90db17307baaf769f6263f660a013", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=3ad17f7bb5f47201b858f83476ded95672d57a76", "patch": "@@ -866,8 +866,6 @@ while (0)\n \n #define CASE_VECTOR_MODE SImode\n \n-#define CASE_VECTOR_PC_RELATIVE 0\n-\n #define WORD_REGISTER_OPERATIONS\n \n #define LOAD_EXTEND_OP(MODE) ZERO_EXTEND"}, {"sha": "5b716113579e63d6323374b7f2e4500b6e3a5326", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=3ad17f7bb5f47201b858f83476ded95672d57a76", "patch": "@@ -1725,15 +1725,6 @@ extern char m32r_punct_chars[256];\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE (flag_pic ? SImode : Pmode)\n \n-/* Define as C expression which evaluates to nonzero if the tablejump\n-   instruction expects the table to contain offsets from the address of the\n-   table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* It's not clear what PIC will look like or whether we want to use -fpic\n-   for the embedded form currently being talked about.  For now require -fpic\n-   to get pc relative switch tables.  */\n-/*#define CASE_VECTOR_PC_RELATIVE 1 */\n-\n /* Define if operations between registers always perform the operation\n    on the full register even if a narrower mode is specified.  */\n #define WORD_REGISTER_OPERATIONS"}, {"sha": "60198431cf1f2d6d2b3efd86493f1e1c223accaa", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=3ad17f7bb5f47201b858f83476ded95672d57a76", "patch": "@@ -880,12 +880,6 @@ extern int may_call_alloca;\n    `tablejump' insn.  */\n #define CASE_TAKES_INDEX_RAW\n \n-/* Define as C expression which evaluates to nonzero if the tablejump\n-   instruction expects the table to contain offsets from the address of the\n-   table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE 1 */\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "4e5235a954119a078e50a5235694596604fe9c7c", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=3ad17f7bb5f47201b858f83476ded95672d57a76", "patch": "@@ -2190,12 +2190,6 @@ do {                                                                    \\\n (! TARGET_PTR64 ? SImode : flag_pic ? DImode : TARGET_CM_MEDLOW ? SImode : DImode)\n #endif\n \n-/* Define as C expression which evaluates to nonzero if the tablejump\n-   instruction expects the table to contain offsets from the address of the\n-   table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE 1 */\n-\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n "}, {"sha": "4665786a87e620433d2e3b2655c3dcb16620839f", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ad17f7bb5f47201b858f83476ded95672d57a76/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=3ad17f7bb5f47201b858f83476ded95672d57a76", "patch": "@@ -1118,11 +1118,6 @@ typedef struct xtensa_args\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE (SImode)\n \n-/* Define this if the tablejump instruction expects the table\n-   to contain offsets from the address of the table.\n-   Do not define this if the table should contain absolute addresses.  */\n-/* #define CASE_VECTOR_PC_RELATIVE */\n-\n /* Define this as 1 if 'char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 0\n "}]}