{"sha": "d035c29621111dc216939c9a59ce612ff9c360d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAzNWMyOTYyMTExMWRjMjE2OTM5YzlhNTljZTYxMmZmOWMzNjBkNg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-05-30T16:20:29Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-05-30T16:20:29Z"}, "message": "re PR c++/21784 (Using vs builtin names)\n\n\tPR c++/21784\n\t* name-lookup.c (do_nonmember_using_decl): Ignore builtin\n\tfunctions, even\twhen the used name is not a function.\n\n\tPR c++/21784\n\t* g++.dg/lookup/using14.C: New test.\n\nFrom-SVN: r100365", "tree": {"sha": "34c66f3acb0861f9975d593fef0186158dbba67f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34c66f3acb0861f9975d593fef0186158dbba67f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d035c29621111dc216939c9a59ce612ff9c360d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d035c29621111dc216939c9a59ce612ff9c360d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d035c29621111dc216939c9a59ce612ff9c360d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d035c29621111dc216939c9a59ce612ff9c360d6/comments", "author": null, "committer": null, "parents": [{"sha": "2a2ea376740f560a57da8b03a179928c7d29c3d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2ea376740f560a57da8b03a179928c7d29c3d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a2ea376740f560a57da8b03a179928c7d29c3d4"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "ae4aca71f5f1fa00d57534c8a4864cf56202f29a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d035c29621111dc216939c9a59ce612ff9c360d6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d035c29621111dc216939c9a59ce612ff9c360d6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d035c29621111dc216939c9a59ce612ff9c360d6", "patch": "@@ -1,9 +1,20 @@\n+2005-05-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/21784\n+\t* name-lookup.c (do_nonmember_using_decl): Ignore builtin\n+\tfunctions, even\twhen the used name is not a function.\n+\n 2005-05-30  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* operators.def, optimize.c: Update copyright.\n \n 2005-05-28  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/21210\n+\t* call.c (standard_conversion): Permit conversions to complex\n+\ttypes if conversion to the corresponding scalar type would be\n+\tpermitted.\n+\n \tPR c++/21340\n \t* method.c (implicitly_declare_fn): Clear processing_template_decl\n \twhen generating implicit declaration."}, {"sha": "dde4227f790e83dc0c21116f3270dd6af6f528d8", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d035c29621111dc216939c9a59ce612ff9c360d6/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d035c29621111dc216939c9a59ce612ff9c360d6/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=d035c29621111dc216939c9a59ce612ff9c360d6", "patch": "@@ -2032,6 +2032,14 @@ do_nonmember_using_decl (tree scope, tree name, tree oldval, tree oldtype,\n       return;\n     }\n \n+  /* It is impossible to overload a built-in function; any explicit\n+     declaration eliminates the built-in declaration.  So, if OLDVAL\n+     is a built-in, then we can just pretend it isn't there.  */\n+  if (oldval \n+      && TREE_CODE (oldval) == FUNCTION_DECL\n+      && DECL_ANTICIPATED (oldval))\n+    oldval = NULL_TREE;\n+\n   /* Check for using functions.  */\n   if (decls.value && is_overloaded_fn (decls.value))\n     {\n@@ -2044,15 +2052,6 @@ do_nonmember_using_decl (tree scope, tree name, tree oldval, tree oldtype,\n \t  oldval = NULL_TREE;\n \t}\n \n-      /* It is impossible to overload a built-in function; any\n-\t explicit declaration eliminates the built-in declaration.\n-\t So, if OLDVAL is a built-in, then we can just pretend it\n-\t isn't there.  */\n-      if (oldval \n-\t  && TREE_CODE (oldval) == FUNCTION_DECL\n-\t  && DECL_ANTICIPATED (oldval))\n-\toldval = NULL_TREE;\n-\n       *newval = oldval;\n       for (tmp = decls.value; tmp; tmp = OVL_NEXT (tmp))\n \t{"}, {"sha": "3e3c60900d5bf32f4def9b5d2eff06313efaa74a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d035c29621111dc216939c9a59ce612ff9c360d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d035c29621111dc216939c9a59ce612ff9c360d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d035c29621111dc216939c9a59ce612ff9c360d6", "patch": "@@ -1,3 +1,8 @@\n+2005-05-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/21784\n+\t* g++.dg/lookup/using14.C: New test.\n+\n 2005-05-30  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* gcc.dg/c99-math-double-1.c, gcc.dg/c99-math-float-1.c,\n@@ -29,6 +34,9 @@\n \n 2005-05-28  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/21210\n+\t* g++.dg/ext/complex1.C: New test.\n+\n \tPR c++/21340\n \t* g++.dg/init/ctor6.C: New test.\n "}, {"sha": "072018e3b8ff52f2c90489d0581f45437d9bd01d", "filename": "gcc/testsuite/g++.dg/lookup/using14.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d035c29621111dc216939c9a59ce612ff9c360d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d035c29621111dc216939c9a59ce612ff9c360d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fusing14.C?ref=d035c29621111dc216939c9a59ce612ff9c360d6", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/21784\n+\n+namespace mine\n+{\n+  int cpow;\n+};\n+\n+using mine::cpow;"}]}