{"sha": "a1612a6c5f78d5ae93e6abdca7f09bf8daa939bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE2MTJhNmM1Zjc4ZDVhZTkzZTZhYmRjYTdmMDliZjhkYWE5MzliYw==", "commit": {"author": {"name": "Mumit Khan", "email": "khan@xraylith.wisc.edu", "date": "1998-08-29T14:01:47Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-08-29T14:01:47Z"}, "message": "cygwin32.h (ASM_OUTPUT_SECTION_NAME): Don't emit .linkonce directive after the first time.\n\n0\n        * i386/cygwin32.h (ASM_OUTPUT_SECTION_NAME): Don't emit\n        .linkonce directive after the first time.\n\nFrom-SVN: r22086", "tree": {"sha": "5ffcf0f8048a60bcf9059d1bdd6f3adda2005b72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ffcf0f8048a60bcf9059d1bdd6f3adda2005b72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1612a6c5f78d5ae93e6abdca7f09bf8daa939bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1612a6c5f78d5ae93e6abdca7f09bf8daa939bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1612a6c5f78d5ae93e6abdca7f09bf8daa939bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1612a6c5f78d5ae93e6abdca7f09bf8daa939bc/comments", "author": null, "committer": null, "parents": [{"sha": "9c79f69ef974ec2446e3c2f225b83b3ed65d1689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c79f69ef974ec2446e3c2f225b83b3ed65d1689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c79f69ef974ec2446e3c2f225b83b3ed65d1689"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "76f2b9bf136d973af56ce437034fc30d0cb35730", "filename": "gcc/config/i386/cygwin32.h", "status": "modified", "additions": 47, "deletions": 15, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1612a6c5f78d5ae93e6abdca7f09bf8daa939bc/gcc%2Fconfig%2Fi386%2Fcygwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1612a6c5f78d5ae93e6abdca7f09bf8daa939bc/gcc%2Fconfig%2Fi386%2Fcygwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin32.h?ref=a1612a6c5f78d5ae93e6abdca7f09bf8daa939bc", "patch": "@@ -335,21 +335,53 @@ extern void i386_pe_unique_section ();\n    NULL_TREE.  Some target formats do not support arbitrary sections.  Do not\n    define this macro in such cases.  */\n #undef ASM_OUTPUT_SECTION_NAME\n-#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC)\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-    fprintf (STREAM, \"\\t.section %s,\\\"x\\\"\\n\", (NAME));\t\t\\\n-  else if ((DECL) && DECL_READONLY_SECTION (DECL, RELOC))\t\\\n-    fprintf (STREAM, \"\\t.section %s,\\\"\\\"\\n\", (NAME));\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.section %s,\\\"w\\\"\\n\", (NAME));\t\t\\\n-  /* Functions may have been compiled at various levels of\t\\\n-     optimization so we can't use `same_size' here.  Instead,\t\\\n-     have the linker pick one.  */\t\t\t\t\\\n-  if ((DECL) && DECL_ONE_ONLY (DECL))\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.linkonce %s\\n\",\t\t\t\\\n-\t     TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n-\t     ? \"discard\" : \"same_size\");\t\t\t\\\n+#define ASM_OUTPUT_SECTION_NAME(STREAM, DECL, NAME, RELOC)\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  static struct section_info\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      struct section_info *next;\t\t\t\t\t\\\n+      char *name;\t\t\t\t\t\t\t\\\n+      enum sect_enum {SECT_RW, SECT_RO, SECT_EXEC} type;\t\t\\\n+    } *sections;\t\t\t\t\t\t\t\\\n+  struct section_info *s;\t\t\t\t\t\t\\\n+  char *mode;\t\t\t\t\t\t\t\t\\\n+  enum sect_enum type;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  for (s = sections; s; s = s->next)\t\t\t\t\t\\\n+    if (!strcmp (NAME, s->name))\t\t\t\t\t\\\n+      break;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (DECL && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n+    type = SECT_EXEC, mode = \"x\";\t\t\t\t\t\\\n+  else if (DECL && DECL_READONLY_SECTION (DECL, RELOC))\t\t\t\\\n+    type = SECT_RO, mode = \"\";\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    type = SECT_RW, mode = \"w\";\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (s == 0)\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      s = (struct section_info *) xmalloc (sizeof (struct section_info)); \\\n+      s->name = xmalloc ((strlen (NAME) + 1) * sizeof (*NAME));\t\t\\\n+      strcpy (s->name, NAME);\t\t\t\t\t\t\\\n+      s->type = type;\t\t\t\t\t\t\t\\\n+      s->next = sections;\t\t\t\t\t\t\\\n+      sections = s;\t\t\t\t\t\t\t\\\n+      fprintf (STREAM, \".section\\t%s,\\\"%s\\\"\\n\", NAME, mode);\t\t\\\n+      /* Functions may have been compiled at various levels of\t\t\\\n+         optimization so we can't use `same_size' here.  Instead,\t\\\n+         have the linker pick one.  */\t\t\t\t\t\\\n+      if ((DECL) && DECL_ONE_ONLY (DECL))\t\t\t\t\\\n+        fprintf (STREAM, \"\\t.linkonce %s\\n\",\t\t\t\t\\\n+\t         TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n+\t         ? \"discard\" : \"same_size\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (DECL && s->type != type)\t\t\t\t\t\\\n+\terror_with_decl (DECL, \"%s causes a section type conflict\");\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      fprintf (STREAM, \".section\\t%s,\\\"%s\\\"\\n\", NAME, mode);\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n /* Write the extra assembler code needed to declare a function"}]}