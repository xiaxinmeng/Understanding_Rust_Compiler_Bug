{"sha": "828335beb77676acffb5911e575672cb55beb2e9", "node_id": "C_kwDOANBUbNoAKDgyODMzNWJlYjc3Njc2YWNmZmI1OTExZTU3NTY3MmNiNTViZWIyZTk", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-02-17T11:46:57Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-12T10:05:29Z"}, "message": "Add 'gcc/tree.cc:user_omp_clause_code_name' [PR65095]\n\nRe PR65095 \"Adapt OpenMP diagnostic messages for OpenACC\", move C/C++\nfront end 'gcc/c-family/c-omp.cc:c_omp_map_clause_name' to generic\n'gcc/tree.cc:user_omp_clause_code_name' .  No functional change.\n\n\tPR other/65095\n\tgcc/\n\t* tree-core.h (user_omp_claus_code_name): Declare function.\n\t* tree.cc (user_omp_clause_code_name): New function.\n\tgcc/c/\n\t* c-typeck.cc (handle_omp_array_sections_1)\n\t(c_oacc_check_attachments): Call 'user_omp_clause_code_name'\n\tinstead of 'c_omp_map_clause_name'.\n\tgcc/cp/\n\t* semantics.cc (handle_omp_array_sections_1)\n\t(cp_oacc_check_attachments): Call 'user_omp_clause_code_name'\n\tinstead of 'c_omp_map_clause_name'.\n\tgcc/c-family/\n\t* c-common.h (c_omp_map_clause_name): Remove.\n\t* c-omp.cc (c_omp_map_clause_name): Remove.", "tree": {"sha": "fc053dc2a1bb8517efff2aa6c4377278644e2a17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc053dc2a1bb8517efff2aa6c4377278644e2a17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/828335beb77676acffb5911e575672cb55beb2e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828335beb77676acffb5911e575672cb55beb2e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828335beb77676acffb5911e575672cb55beb2e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828335beb77676acffb5911e575672cb55beb2e9/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72c243017dee611bf3c32ea7bfad6ac538021aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72c243017dee611bf3c32ea7bfad6ac538021aaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72c243017dee611bf3c32ea7bfad6ac538021aaf"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "5f0b5d99d07f1a4bb829b5c282c6c98dc5e73892", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828335beb77676acffb5911e575672cb55beb2e9/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828335beb77676acffb5911e575672cb55beb2e9/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=828335beb77676acffb5911e575672cb55beb2e9", "patch": "@@ -1250,7 +1250,6 @@ extern enum omp_clause_default_kind c_omp_predetermined_sharing (tree);\n extern enum omp_clause_defaultmap_kind c_omp_predetermined_mapping (tree);\n extern tree c_omp_check_context_selector (location_t, tree);\n extern void c_omp_mark_declare_variant (location_t, tree, tree);\n-extern const char *c_omp_map_clause_name (tree, bool);\n extern void c_omp_adjust_map_clauses (tree, bool);\n \n enum c_omp_directive_kind {"}, {"sha": "777cdc655722d6e0ecd11a92f3cc39cbeccebb7e", "filename": "gcc/c-family/c-omp.cc", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828335beb77676acffb5911e575672cb55beb2e9/gcc%2Fc-family%2Fc-omp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828335beb77676acffb5911e575672cb55beb2e9/gcc%2Fc-family%2Fc-omp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.cc?ref=828335beb77676acffb5911e575672cb55beb2e9", "patch": "@@ -2996,39 +2996,6 @@ c_omp_predetermined_mapping (tree decl)\n }\n \n \n-/* For OpenACC, the OMP_CLAUSE_MAP_KIND of an OMP_CLAUSE_MAP is used internally\n-   to distinguish clauses as seen by the user.  Return the \"friendly\" clause\n-   name for error messages etc., where possible.  See also\n-   c/c-parser.cc:c_parser_oacc_data_clause and\n-   cp/parser.cc:cp_parser_oacc_data_clause.  */\n-\n-const char *\n-c_omp_map_clause_name (tree clause, bool oacc)\n-{\n-  if (oacc && OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_MAP)\n-    switch (OMP_CLAUSE_MAP_KIND (clause))\n-    {\n-    case GOMP_MAP_FORCE_ALLOC:\n-    case GOMP_MAP_ALLOC: return \"create\";\n-    case GOMP_MAP_FORCE_TO:\n-    case GOMP_MAP_TO: return \"copyin\";\n-    case GOMP_MAP_FORCE_FROM:\n-    case GOMP_MAP_FROM: return \"copyout\";\n-    case GOMP_MAP_FORCE_TOFROM:\n-    case GOMP_MAP_TOFROM: return \"copy\";\n-    case GOMP_MAP_RELEASE: return \"delete\";\n-    case GOMP_MAP_FORCE_PRESENT: return \"present\";\n-    case GOMP_MAP_ATTACH: return \"attach\";\n-    case GOMP_MAP_FORCE_DETACH:\n-    case GOMP_MAP_DETACH: return \"detach\";\n-    case GOMP_MAP_DEVICE_RESIDENT: return \"device_resident\";\n-    case GOMP_MAP_LINK: return \"link\";\n-    case GOMP_MAP_FORCE_DEVICEPTR: return \"deviceptr\";\n-    default: break;\n-    }\n-  return omp_clause_code_name[OMP_CLAUSE_CODE (clause)];\n-}\n-\n /* Used to merge map clause information in c_omp_adjust_map_clauses.  */\n struct map_clause\n {"}, {"sha": "c0812de84b47db8237ca12b4f24d4eaaa6b33c21", "filename": "gcc/c/c-typeck.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828335beb77676acffb5911e575672cb55beb2e9/gcc%2Fc%2Fc-typeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828335beb77676acffb5911e575672cb55beb2e9/gcc%2Fc%2Fc-typeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.cc?ref=828335beb77676acffb5911e575672cb55beb2e9", "patch": "@@ -13373,7 +13373,7 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n \t{\n \t  error_at (OMP_CLAUSE_LOCATION (c),\n \t\t    \"expected single pointer in %qs clause\",\n-\t\t    c_omp_map_clause_name (c, ort == C_ORT_ACC));\n+\t\t    user_omp_clause_code_name (c, ort == C_ORT_ACC));\n \t  return error_mark_node;\n \t}\n     }\n@@ -14096,7 +14096,7 @@ c_oacc_check_attachments (tree c)\n       if (TREE_CODE (TREE_TYPE (t)) != POINTER_TYPE)\n \t{\n \t  error_at (OMP_CLAUSE_LOCATION (c), \"expected pointer in %qs clause\",\n-\t\t    c_omp_map_clause_name (c, true));\n+\t\t    user_omp_clause_code_name (c, true));\n \t  return true;\n \t}\n     }"}, {"sha": "da270e8f05c369fbb4851d221f7891fc4b2f1b8f", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828335beb77676acffb5911e575672cb55beb2e9/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828335beb77676acffb5911e575672cb55beb2e9/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=828335beb77676acffb5911e575672cb55beb2e9", "patch": "@@ -5195,7 +5195,7 @@ handle_omp_array_sections_1 (tree c, tree t, vec<tree> &types,\n \t{\n \t  error_at (OMP_CLAUSE_LOCATION (c),\n \t\t    \"expected single pointer in %qs clause\",\n-\t\t    c_omp_map_clause_name (c, ort == C_ORT_ACC));\n+\t\t    user_omp_clause_code_name (c, ort == C_ORT_ACC));\n \t  return error_mark_node;\n \t}\n     }\n@@ -6653,7 +6653,7 @@ cp_oacc_check_attachments (tree c)\n       if (TREE_CODE (type) != POINTER_TYPE)\n \t{\n \t  error_at (OMP_CLAUSE_LOCATION (c), \"expected pointer in %qs clause\",\n-\t\t    c_omp_map_clause_name (c, true));\n+\t\t    user_omp_clause_code_name (c, true));\n \t  return true;\n \t}\n     }"}, {"sha": "f1c2b6413a3ca73dcfefa1a09c1408cf1a9e4e6b", "filename": "gcc/tree-core.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828335beb77676acffb5911e575672cb55beb2e9/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828335beb77676acffb5911e575672cb55beb2e9/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=828335beb77676acffb5911e575672cb55beb2e9", "patch": "@@ -2283,6 +2283,7 @@ extern const char * built_in_names[(int) END_BUILTINS];\n /* Number of operands and names for each OMP_CLAUSE node.  */\n extern unsigned const char omp_clause_num_ops[];\n extern const char * const omp_clause_code_name[];\n+extern const char *user_omp_clause_code_name (tree, bool);\n \n /* A vector of all translation-units.  */\n extern GTY (()) vec<tree, va_gc> *all_translation_units;"}, {"sha": "b8017af6cfc17b85b013cbdba8a5dd6801061f65", "filename": "gcc/tree.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828335beb77676acffb5911e575672cb55beb2e9/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828335beb77676acffb5911e575672cb55beb2e9/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=828335beb77676acffb5911e575672cb55beb2e9", "patch": "@@ -69,6 +69,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-fold.h\"\n #include \"escaped_string.h\"\n #include \"gimple-range.h\"\n+#include \"gomp-constants.h\"\n \n /* Tree code classes.  */\n \n@@ -439,6 +440,41 @@ const char * const omp_clause_code_name[] =\n   \"nohost\",\n };\n \n+/* Unless specific to OpenACC, we tend to internally maintain OpenMP-centric\n+   clause names, but for use in diagnostics etc. would like to use the \"user\"\n+   clause names.  */\n+\n+const char *\n+user_omp_clause_code_name (tree clause, bool oacc)\n+{\n+  /* For OpenACC, the 'OMP_CLAUSE_MAP_KIND' of an 'OMP_CLAUSE_MAP' is used to\n+     distinguish clauses as seen by the user.  See also where front ends do\n+     'build_omp_clause' with 'OMP_CLAUSE_MAP'.  */\n+  if (oacc && OMP_CLAUSE_CODE (clause) == OMP_CLAUSE_MAP)\n+    switch (OMP_CLAUSE_MAP_KIND (clause))\n+      {\n+      case GOMP_MAP_FORCE_ALLOC:\n+      case GOMP_MAP_ALLOC: return \"create\";\n+      case GOMP_MAP_FORCE_TO:\n+      case GOMP_MAP_TO: return \"copyin\";\n+      case GOMP_MAP_FORCE_FROM:\n+      case GOMP_MAP_FROM: return \"copyout\";\n+      case GOMP_MAP_FORCE_TOFROM:\n+      case GOMP_MAP_TOFROM: return \"copy\";\n+      case GOMP_MAP_RELEASE: return \"delete\";\n+      case GOMP_MAP_FORCE_PRESENT: return \"present\";\n+      case GOMP_MAP_ATTACH: return \"attach\";\n+      case GOMP_MAP_FORCE_DETACH:\n+      case GOMP_MAP_DETACH: return \"detach\";\n+      case GOMP_MAP_DEVICE_RESIDENT: return \"device_resident\";\n+      case GOMP_MAP_LINK: return \"link\";\n+      case GOMP_MAP_FORCE_DEVICEPTR: return \"deviceptr\";\n+      default: break;\n+      }\n+\n+  return omp_clause_code_name[OMP_CLAUSE_CODE (clause)];\n+}\n+\n \n /* Return the tree node structure used by tree code CODE.  */\n "}]}