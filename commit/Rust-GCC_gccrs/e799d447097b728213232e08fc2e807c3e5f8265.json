{"sha": "e799d447097b728213232e08fc2e807c3e5f8265", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc5OWQ0NDcwOTdiNzI4MjEzMjMyZTA4ZmMyZTgwN2MzZTVmODI2NQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-01-30T15:51:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-01-30T15:51:23Z"}, "message": "re PR tree-optimization/52028 (wrong code with -O2 -ftree-loop-distribution)\n\n2012-01-30  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/52028\n\t* tree-loop-distribution.c (ldist_gen): Properly update\n\tvirtual SSA form.\n\n\t* gcc.dg/torture/pr52028.c: New testcase.\n\t* gfortran.dg/ldist-pr45199.f: Adjust.\n\t* gcc.dg/tree-ssa/ldist-16.c: Likewise.\n\t* gcc.dg/tree-ssa/ldist-17.c: Likewise.\n\t* gcc.dg/tree-ssa/ldist-pr45948.c: Likewise.\n\nFrom-SVN: r183730", "tree": {"sha": "e4abc17cead0b0fef2107e331dfd9d19e5b4de5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4abc17cead0b0fef2107e331dfd9d19e5b4de5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e799d447097b728213232e08fc2e807c3e5f8265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e799d447097b728213232e08fc2e807c3e5f8265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e799d447097b728213232e08fc2e807c3e5f8265", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e799d447097b728213232e08fc2e807c3e5f8265/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be5295721cf937f31d88f77e7868884e643016b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be5295721cf937f31d88f77e7868884e643016b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be5295721cf937f31d88f77e7868884e643016b4"}], "stats": {"total": 109, "additions": 104, "deletions": 5}, "files": [{"sha": "c15f4ea6489d7c771625919cc3a3a152423a38f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e799d447097b728213232e08fc2e807c3e5f8265", "patch": "@@ -1,3 +1,9 @@\n+2012-01-30  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52028\n+\t* tree-loop-distribution.c (ldist_gen): Properly update\n+\tvirtual SSA form.\n+\n 2012-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/52027"}, {"sha": "394f8ee738bf470c7cebcdecdda6c439128921dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e799d447097b728213232e08fc2e807c3e5f8265", "patch": "@@ -1,3 +1,12 @@\n+2012-01-30  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52028\n+\t* gcc.dg/torture/pr52028.c: New testcase.\n+\t* gfortran.dg/ldist-pr45199.f: Adjust.\n+\t* gcc.dg/tree-ssa/ldist-16.c: Likewise.\n+\t* gcc.dg/tree-ssa/ldist-17.c: Likewise.\n+\t* gcc.dg/tree-ssa/ldist-pr45948.c: Likewise.\n+\n 2012-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/52027"}, {"sha": "764377c3c4666ae7e163aadc1325e31449cd4082", "filename": "gcc/testsuite/gcc.dg/torture/pr52028.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52028.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52028.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52028.c?ref=e799d447097b728213232e08fc2e807c3e5f8265", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target int32plus } */\n+/* { dg-options \"-ftree-loop-distribution\" } */\n+\n+#define CAST_LONG unsigned int\n+typedef struct cast_key_st\n+{\n+  CAST_LONG data[32];\n+} CAST_KEY;\n+#define CAST_exp(l,A,a,n) \\\n+\tA[n/4]=l; \\\n+\ta[n+3]=(l    )&0xff; \\\n+\ta[n+2]=(l>> 8)&0xff; \\\n+\ta[n+1]=(l>>16)&0xff; \\\n+\ta[n+0]=(l>>24)&0xff;\n+\n+CAST_LONG CAST_S_table[1024];\n+\n+#define S4 (CAST_S_table + 000)\n+#define S5 (CAST_S_table + 256)\n+#define S6 (CAST_S_table + 512)\n+#define S7 (CAST_S_table + 768)\n+\n+void\n+CAST_set_key (CAST_KEY * key)\n+{\n+  CAST_LONG x[16];\n+  CAST_LONG z[16];\n+  CAST_LONG k[32];\n+  CAST_LONG X[4] = {0,0,0,0}, Z[4];\n+  CAST_LONG l, *K = k;\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    x[i] = 0;\n+  for (;;)\n+    {\n+      l = X[0] ^ S4[x[13]] ^ S5[x[15]] ^ S6[x[12]] ^ S7[x[14]] ^ S6[x[8]];\n+      CAST_exp (l, Z, z, 0);\n+      CAST_exp (l, Z, z, 4);\n+      CAST_exp (l, Z, z, 8);\n+      CAST_exp (l, Z, z, 12);\n+      K[0] = S4[z[8]] ^ S5[z[9]] ^ S6[z[7]] ^ S7[z[6]] ^ S4[z[2]];\n+      K[1] = S4[z[10]] ^ S5[z[11]] ^ S6[z[5]] ^ S7[z[4]] ^ S5[z[6]];\n+      K[2] = S4[z[12]] ^ S5[z[13]] ^ S6[z[3]] ^ S7[z[2]] ^ S6[z[9]];\n+      K[3] = S4[z[14]] ^ S5[z[15]] ^ S6[z[1]] ^ S7[z[0]] ^ S7[z[12]];\n+      K[4] = S4[x[3]] ^ S5[x[2]] ^ S6[x[12]] ^ S7[x[13]] ^ S4[x[8]];\n+      K[5] = S4[x[1]] ^ S5[x[0]] ^ S6[x[14]] ^ S7[x[15]] ^ S5[x[13]];\n+      K[6] = S4[x[7]] ^ S5[x[6]] ^ S6[x[8]] ^ S7[x[9]] ^ S6[x[3]];\n+      K[7] = S4[x[5]] ^ S5[x[4]] ^ S6[x[10]] ^ S7[x[11]] ^ S7[x[7]];\n+      K[8] = S4[z[3]] ^ S5[z[2]] ^ S6[z[12]] ^ S7[z[13]] ^ S4[z[9]];\n+      K[9] = S4[z[1]] ^ S5[z[0]] ^ S6[z[14]] ^ S7[z[15]] ^ S5[z[12]];\n+      K[10] = S4[z[7]] ^ S5[z[6]] ^ S6[z[8]] ^ S7[z[9]] ^ S6[z[2]];\n+      K[11] = S4[z[5]] ^ S5[z[4]] ^ S6[z[10]] ^ S7[z[11]] ^ S7[z[6]];\n+      l = Z[2] ^ S4[z[5]] ^ S5[z[7]] ^ S6[z[4]] ^ S7[z[6]] ^ S6[z[0]];\n+      CAST_exp (l, X, x, 0);\n+      K[12] = S4[x[8]] ^ S5[x[9]] ^ S6[x[7]] ^ S7[x[6]] ^ S4[x[3]];\n+      K[13] = S4[x[10]] ^ S5[x[11]] ^ S6[x[5]] ^ S7[x[4]] ^ S5[x[7]];\n+      K[14] = S4[x[12]] ^ S5[x[13]] ^ S6[x[3]] ^ S7[x[2]] ^ S6[x[8]];\n+      K[15] = S4[x[14]] ^ S5[x[15]] ^ S6[x[1]] ^ S7[x[0]] ^ S7[x[13]];\n+      if (K != k)\n+\tbreak;\n+      K += 16;\n+    }\n+  for (i = 0; i < 16; i++)\n+    {\n+      key->data[i * 2] = k[i];\n+      key->data[i * 2 + 1] = ((k[i + 16]) + 16) & 0x1f;\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  CAST_KEY ref = { {0x0069B3F8, 0x00000013, 0x000AEFF8, 0x00000013, 0x004AD0E0, 0x0000001B, 0x00818F18, 0x00000018, 0x008FF000, 0x0000001B, 0x002D1C00, 0x0000001B, 0x00EA2800, 0x00000010, 0x00C73400, 0x00000010, 0x004BF8E0, 0x0000001B, 0x00B3D718, 0x00000018, 0x00B0EBF8, 0x00000013, 0x003247F8, 0x00000013, 0x00C5BA20, 0x00000010, 0x002D1C00, 0x00000010, 0x0060822B, 0x00000008, 0x0096236B, 0x0000001B} };\n+  CAST_KEY key;\n+  unsigned i;\n+  for (i = 1; i < 1024; i++)\n+    CAST_S_table[i] = (CAST_S_table[i-1] * 7 + 3) & 0xFFFFFF;\n+  CAST_set_key (&key);\n+  if (__builtin_memcmp(&ref, &key, sizeof(ref)))\n+    __builtin_abort();\n+  return 0;\n+}"}, {"sha": "a26999e890593cb1616ad7316e6b27a0d0a667b2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-16.c?ref=e799d447097b728213232e08fc2e807c3e5f8265", "patch": "@@ -17,5 +17,5 @@ void foo (int n)\n /* We should apply loop distribution and generate a memset (0).  */\n \n /* { dg-final { scan-tree-dump \"distributed: split to 2\" \"ldist\" } } */\n-/* { dg-final { scan-tree-dump-times \"__builtin_memset\" 2 \"ldist\" } } */\n+/* { dg-final { scan-tree-dump-times \"generated memset zero\" 1 \"ldist\" } } */\n /* { dg-final { cleanup-tree-dump \"ldist\" } } */"}, {"sha": "6690b9137705581112d62defabd7538f531ff644", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-17.c?ref=e799d447097b728213232e08fc2e807c3e5f8265", "patch": "@@ -46,5 +46,5 @@ mad_synth_mute (struct mad_synth *synth)\n }\n \n /* { dg-final { scan-tree-dump \"distributed: split to 4\" \"ldist\" } } */\n-/* { dg-final { scan-tree-dump-times \"__builtin_memset\" 8 \"ldist\" } } */\n+/* { dg-final { scan-tree-dump-times \"generated memset zero\" 4 \"ldist\" } } */\n /* { dg-final { cleanup-tree-dump \"ldist\" } } */"}, {"sha": "593031c8bcf83bd5627b0804fe2eafe0f5d34a46", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-pr45948.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-pr45948.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-pr45948.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-pr45948.c?ref=e799d447097b728213232e08fc2e807c3e5f8265", "patch": "@@ -19,5 +19,5 @@ foo (int i, int n)\n /* We should apply loop distribution and generate 2 memset (0).  */\n \n /* { dg-final { scan-tree-dump \"distributed: split to 2\" \"ldist\" } } */\n-/* { dg-final { scan-tree-dump-times \"__builtin_memset\" 4 \"ldist\" } } */\n+/* { dg-final { scan-tree-dump-times \"generated memset zero\" 2 \"ldist\" } } */\n /* { dg-final { cleanup-tree-dump \"ldist\" } } */"}, {"sha": "22b202e07e6a4de33bb4d7fb3e66dc43f0ca49fc", "filename": "gcc/testsuite/gfortran.dg/ldist-pr45199.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2Ftestsuite%2Fgfortran.dg%2Fldist-pr45199.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2Ftestsuite%2Fgfortran.dg%2Fldist-pr45199.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fldist-pr45199.f?ref=e799d447097b728213232e08fc2e807c3e5f8265", "patch": "@@ -23,5 +23,5 @@\n ! GCC should apply memset zero loop distribution and it should not ICE.\n \n ! { dg-final { scan-tree-dump \"distributed: split to 9 loops\" \"ldist\" } }\n-! { dg-final { scan-tree-dump-times \"__builtin_memset\" 18 \"ldist\" } }\n+! { dg-final { scan-tree-dump-times \"generated memset zero\" 9 \"ldist\" } }\n ! { dg-final { cleanup-tree-dump \"ldist\" } }"}, {"sha": "06dd14d42ce2ccef5a40b344d0e296252888fc03", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e799d447097b728213232e08fc2e807c3e5f8265/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=e799d447097b728213232e08fc2e807c3e5f8265", "patch": "@@ -1143,7 +1143,8 @@ ldist_gen (struct loop *loop, struct graph *rdg,\n       goto ldist_done;\n \n   rewrite_into_loop_closed_ssa (NULL, TODO_update_ssa);\n-  update_ssa (TODO_update_ssa_only_virtuals | TODO_update_ssa);\n+  mark_sym_for_renaming (gimple_vop (cfun));\n+  update_ssa (TODO_update_ssa_only_virtuals);\n \n  ldist_done:\n "}]}