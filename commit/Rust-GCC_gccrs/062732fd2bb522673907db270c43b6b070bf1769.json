{"sha": "062732fd2bb522673907db270c43b6b070bf1769", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYyNzMyZmQyYmI1MjI2NzM5MDdkYjI3MGM0M2I2YjA3MGJmMTc2OQ==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2004-01-25T18:36:04Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2004-01-25T18:36:04Z"}, "message": "TextArea.java: Fix indentation.\n\n2004-01-25  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* java/awt/TextArea.java: Fix indentation.  Flesh out javadocs.\n\t(getMinimumSize (int, int)): Fix FIXME -- return Dimension (0,0)\n\twhen peer is null.\n\t(setColumns): Remove FIXME -- peer will retrieve number of\n\tcolumns by calling getColumns.\n\t(setRows): Likewise for number of rows.\n\t(next_text_number): New field.\n\t(paramString): Fix param string.\n\t(generateName): New method.\n\t(getUniqueLong): New method.\n\nFrom-SVN: r76577", "tree": {"sha": "f561232c5777aa50173676d00dfa4e0155a9039c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f561232c5777aa50173676d00dfa4e0155a9039c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/062732fd2bb522673907db270c43b6b070bf1769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062732fd2bb522673907db270c43b6b070bf1769", "html_url": "https://github.com/Rust-GCC/gccrs/commit/062732fd2bb522673907db270c43b6b070bf1769", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062732fd2bb522673907db270c43b6b070bf1769/comments", "author": null, "committer": null, "parents": [{"sha": "0058a7d875d6eebaaab9602278d0e44254fe63c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0058a7d875d6eebaaab9602278d0e44254fe63c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0058a7d875d6eebaaab9602278d0e44254fe63c7"}], "stats": {"total": 1145, "additions": 591, "deletions": 554}, "files": [{"sha": "fc7ee9cdd92c700aa1567730efadedcb9b8329d1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062732fd2bb522673907db270c43b6b070bf1769/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062732fd2bb522673907db270c43b6b070bf1769/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=062732fd2bb522673907db270c43b6b070bf1769", "patch": "@@ -1,3 +1,16 @@\n+2004-01-25  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* java/awt/TextArea.java: Fix indentation.  Flesh out javadocs.\n+\t(getMinimumSize (int, int)): Fix FIXME -- return Dimension (0,0)\n+\twhen peer is null.\n+\t(setColumns): Remove FIXME -- peer will retrieve number of\n+\tcolumns by calling getColumns.\n+\t(setRows): Likewise for number of rows.\n+\t(next_text_number): New field.\n+\t(paramString): Fix param string.\n+\t(generateName): New method.\n+\t(getUniqueLong): New method.\n+\n 2004-01-25  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n \t* gnu/java/awt/peer/gtk/GtkToolkit.java (checkImage): Inform"}, {"sha": "356efeb921dbaa2582e84020915370c61c358119", "filename": "libjava/java/awt/TextArea.java", "status": "modified", "additions": 578, "deletions": 554, "changes": 1132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062732fd2bb522673907db270c43b6b070bf1769/libjava%2Fjava%2Fawt%2FTextArea.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062732fd2bb522673907db270c43b6b070bf1769/libjava%2Fjava%2Fawt%2FTextArea.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FTextArea.java?ref=062732fd2bb522673907db270c43b6b070bf1769", "patch": "@@ -1,565 +1,589 @@\n-/* TextArea.java -- A multi-line text entry widget\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n-\n-This file is part of GNU Classpath.\n-\n-GNU Classpath is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GNU Classpath is distributed in the hope that it will be useful, but\n-WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GNU Classpath; see the file COPYING.  If not, write to the\n-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n-02111-1307 USA.\n-\n-Linking this library statically or dynamically with other modules is\n-making a combined work based on this library.  Thus, the terms and\n-conditions of the GNU General Public License cover the whole\n-combination.\n-\n-As a special exception, the copyright holders of this library give you\n-permission to link this library with independent modules to produce an\n-executable, regardless of the license terms of these independent\n-modules, and to copy and distribute the resulting executable under\n-terms of your choice, provided that you also meet, for each linked\n-independent module, the terms and conditions of the license of that\n-module.  An independent module is a module which is not derived from\n-or based on this library.  If you modify this library, you may extend\n-this exception to your version of the library, but you are not\n-obligated to do so.  If you do not wish to do so, delete this\n-exception statement from your version. */\n-\n+/* TextArea.java -- A multi-line text entry component\n+   Copyright (C) 1999, 2004 Free Software Foundation, Inc.\n+\n+   This file is part of GNU Classpath.\n+\n+   GNU Classpath is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 2, or (at your option)\n+   any later version.\n+\n+   GNU Classpath is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GNU Classpath; see the file COPYING.  If not, write to the\n+   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+   02111-1307 USA.\n+\n+   Linking this library statically or dynamically with other modules is\n+   making a combined work based on this library.  Thus, the terms and\n+   conditions of the GNU General Public License cover the whole\n+   combination.\n+\n+   As a special exception, the copyright holders of this library give you\n+   permission to link this library with independent modules to produce an\n+   executable, regardless of the license terms of these independent\n+   modules, and to copy and distribute the resulting executable under\n+   terms of your choice, provided that you also meet, for each linked\n+   independent module, the terms and conditions of the license of that\n+   module.  An independent module is a module which is not derived from\n+   or based on this library.  If you modify this library, you may extend\n+   this exception to your version of the library, but you are not\n+   obligated to do so.  If you do not wish to do so, delete this\n+   exception statement from your version. */\n \n package java.awt;\n \n import java.awt.peer.ComponentPeer;\n import java.awt.peer.TextAreaPeer;\n \n-/**\n-  * This implements a multi-line text entry widget.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public class TextArea extends TextComponent implements java.io.Serializable\n-{\n-\n-/*\n- * Static Variables\n- */\n-\n-/**\n-  * Use both horiztonal and vertical scroll bars.\n-  */\n-public static final int SCROLLBARS_BOTH = 0;\n-\n-/**\n-  * Use vertical scroll bars only.\n-  */\n-public static final int SCROLLBARS_VERTICAL_ONLY = 1;\n-\n-/**\n-  * Use horizatonal scroll bars only.\n-  */\n-public static final int SCROLLBARS_HORIZONTAL_ONLY = 2;\n-\n-/**\n-  * Use no scrollbars.\n-  */\n-public static final int SCROLLBARS_NONE = 3;\n-\n-// Serialization constant\n-private static final long serialVersionUID = 3692302836626095722L;\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Variables\n- */\n-\n-/**\n-  * @serial The number of columns in this text area.\n-  */\n-private int columns;\n-\n-/**\n-  * @serial The number of rows in this text area.\n-  */\n-private int rows;\n-\n-/**\n-  * @serial The type of scrollbars to display, which will be one of\n-  * the contstants from this class.\n-  */\n-private int scrollbarVisibility;\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * Initialize a new instance of <code>TextArea</code> that is empty\n-  * and is one row and one column.  Both horizontal and vertical\n-  * scrollbars will be used.\n-  *\n-  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n-  */\n-public\n-TextArea()\n-{\n-  this(\"\", 1, 1, SCROLLBARS_BOTH);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Initializes a new instance of <code>TextArea</code> that \n-  * contains the specified string.  Both horizontal and veritcal\n-  * scrollbars will be used.\n-  *\n-  * @param text The text to display in this text area.\n-  *\n-  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n-  */\n-public\n-TextArea(String text)\n-{\n-  this(text, 1, text.length(), SCROLLBARS_BOTH);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Initializes a new instance of <code>TextArea</code> that is empty\n-  * and has the specified number of rows and columns.  Both\n-  * horizontal and vertical scrollbars will be used.\n-  *\n-  * @param rows The number of rows in this text area.\n-  * @param columns The number of columns in this text area.\n-  *\n-  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n-  */\n-public\n-TextArea(int rows, int columns)\n-{\n-  this(\"\", rows, columns, SCROLLBARS_BOTH);\n-}\n-\n-/*************************************************************************/\n \n /**\n-  * Initializes a new instance of <code>TextArea</code> that is the\n-  * specified size and has the specified text.\n-  *\n-  * @param text The text to display in this text area.\n-  * @param rows The number of rows in this text area.\n-  * @param columns The number of columns in this text area.\n-  *\n-  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n-  */\n-public\n-TextArea(String text, int rows, int columns)\n-{\n-  this(text, rows, columns, SCROLLBARS_BOTH);\n-}\n-\n-/*************************************************************************/\n-\n-/** \n-  * Initializes a new instance of <code>TextArea</code> with the\n-  * specified values.  The scrollbar visibility value must be one\n-  * of the constants in this class.\n-  *\n-  * @param text The text to display in this text area.\n-  * @param rows The number of rows in this text area.\n-  * @param columns The number of columns in this text area.\n-  * @param scrollbarVisibility Which scrollbars to display.\n-  *\n-  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n-  */\n-public\n-TextArea(String text, int rows, int columns, int scrollbarVisibility)\n-{\n-  super(text);\n-\n-  if (GraphicsEnvironment.isHeadless())\n-    throw new HeadlessException ();\n-\n-  if ((rows < 1) || (columns < 0))\n-    throw new IllegalArgumentException(\"Bad row or column value\");\n-\n-  if ((scrollbarVisibility != SCROLLBARS_BOTH) &&\n-      (scrollbarVisibility != SCROLLBARS_VERTICAL_ONLY) &&\n-      (scrollbarVisibility != SCROLLBARS_HORIZONTAL_ONLY) &&\n-      (scrollbarVisibility != SCROLLBARS_NONE))\n-    throw new IllegalArgumentException(\"Bad scrollbar visibility value\");\n-\n-  this.rows = rows;\n-  this.columns = columns;\n-  this.scrollbarVisibility = scrollbarVisibility;\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Variables\n+ * A TextArea is a text component capable of displaying multiple lines\n+ * of user-editable text.  A TextArea handles its own scrolling and\n+ * can display vertical and horizontal scrollbars as navigation aids.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n-/**\n-  * Returns the number of columns in the field.\n-  *\n-  * @return The number of columns in the field.\n-  */\n-public int\n-getColumns()\n-{\n-  return(columns);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Sets the number of columns in this field to the specified value.\n-  *\n-  * @param columns The new number of columns in the field.\n-  *\n-  * @exception IllegalArgumentException If columns is less than zero.\n-  */\n-public synchronized void\n-setColumns(int columns)\n-{\n-  if (columns < 0)\n-    throw new IllegalArgumentException(\"Value is less than zero: \" +\n-                                       columns);\n-\n-  this.columns = columns;\n-  // FIXME: How to we communicate this to our peer?\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the number of rows in the field.\n-  *\n-  * @return The number of rows in the field.\n-  */\n-public int\n-getRows()\n-{\n-  return(rows);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Sets the number of rows in this field to the specified value.\n-  *\n-  * @param rows The new number of rows in the field.\n-  *\n-  * @exception IllegalArgumentException If rows is less than zero.\n-  */\n-public synchronized void\n-setRows(int rows)\n-{\n-  if (rows < 1)\n-    throw new IllegalArgumentException(\"Value is less than one: \" +\n-                                       rows);\n-\n-  this.rows = rows;\n-  // FIXME: How to we communicate this to our peer?\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the minimum size for this text field.\n-  *\n-  * @return The minimum size for this text field.\n-  */\n-public Dimension\n-getMinimumSize()\n-{\n-  return(getMinimumSize(getRows(), getColumns()));\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the minimum size of a text field with the specified number\n-  * of rows and columns.\n-  *\n-  * @param rows The number of rows to get the minimum size for.\n-  * @param columns The number of columns to get the minimum size for.\n-  */\n-public Dimension\n-getMinimumSize(int rows, int columns)\n-{\n-  TextAreaPeer tap = (TextAreaPeer)getPeer();\n-  if (tap == null)\n-    return(null); // FIXME: What do we do if there is no peer?\n-\n-  return(tap.getMinimumSize(rows, columns));\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the minimum size for this text field.\n-  *\n-  * @return The minimum size for this text field.\n-  *\n-  * @deprecated This method is depcreated in favor of\n-  * <code>getMinimumSize()</code>.\n-  */\n-public Dimension\n-minimumSize()\n-{\n-  return(getMinimumSize(getRows(), getColumns()));\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the minimum size of a text field with the specified number\n-  * of rows and columns.\n-  *\n-  * @param rows The number of rows to get the minimum size for.\n-  * @param columns The number of columns to get the minimum size for.\n-  *\n-  * @deprecated This method is deprecated in favor of \n-  * <code>getMinimumSize(int)</code>.\n-  */\n-public Dimension\n-minimumSize(int rows, int columns)\n-{\n-  return(getMinimumSize(rows, columns));\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the preferred size for this text field.\n-  *\n-  * @return The preferred size for this text field.\n-  */\n-public Dimension\n-getPreferredSize()\n-{\n-  return(getPreferredSize(getRows(), getColumns()));\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the preferred size of a text field with the specified number\n-  * of rows and columns.\n-  *\n-  * @param rows The number of rows to get the preferred size for.\n-  * @param columns The number of columns to get the preferred size for.\n-  */\n-public Dimension\n-getPreferredSize(int rows, int columns)\n-{\n-  TextAreaPeer tap = (TextAreaPeer)getPeer();\n-  if (tap == null)\n-    {\n-      // Sun's JDK just seems to return Dimension(0,0) in this case.\n-      // we do the same.\n-      return new Dimension(0, 0);\n-    }\n-\n-  return(tap.getPreferredSize(rows, columns));\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the preferred size for this text field.\n-  *\n-  * @return The preferred size for this text field.\n-  *\n-  * @deprecated This method is deprecated in favor of \n-  * <code>getPreferredSize()</code>.\n-  */\n-public Dimension\n-preferredSize()\n-{\n-  return(getPreferredSize(getRows(), getColumns()));\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the preferred size of a text field with the specified number\n-  * of rows and columns.\n-  *\n-  * @param rows The number of rows to get the preferred size for.\n-  * @param columns The number of columns to get the preferred size for.\n-  *\n-  * @deprecated This method is deprecated in favor of \n-  * <code>getPreferredSize(int)</code>.\n-  */\n-public Dimension\n-preferredSize(int rows, int columns)\n-{\n-  return(getPreferredSize(rows, columns));\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns one of the constants from this class indicating which\n-  * types of scrollbars this object uses, if any.\n-  *\n-  * @return The scrollbar type constant for this object.\n-  */\n-public int\n-getScrollbarVisibility()\n-{\n-  return(scrollbarVisibility);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Notify this object that it should create its native peer.\n-  */\n-public void\n-addNotify()\n-{\n-  if (getPeer() != null)\n-    return;\n-\n-  setPeer((ComponentPeer)getToolkit().createTextArea(this));\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Appends the specified text to the end of the current text.\n-  *\n-  * @param text The text to append.\n-  */\n-public void\n-append(String str)\n-{\n-  TextAreaPeer tap = (TextAreaPeer)getPeer();\n-  if (tap == null) \n-    return;\n-\n-  tap.insert(str, tap.getText().length());\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Appends the specified text to the end of the current text.\n-  *\n-  * @param text The text to append.\n-  *\n-  * @deprecated This method is deprecated in favor of \n-  * <code>append()</code>.\n-  */\n-public void\n-appendText(String text)\n-{\n-  append(text);\n-}\n- \n-/*************************************************************************/\n-\n-/**\n-  * Inserts the specified text at the specified location.\n-  *\n-  * @param text The text to insert.\n-  * @param pos The insert position.\n-  */\n-public void\n-insert(String text, int pos)\n-{\n-  TextAreaPeer tap = (TextAreaPeer)getPeer();\n-  if (tap == null)\n-    return;\n-\n-  tap.insert(text, pos);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Inserts the specified text at the specified location.\n-  *\n-  * @param text The text to insert.\n-  * @param pos The insert position.\n-  *\n-  * @deprecated This method is depcreated in favor of <code>insert()</code>.\n-  */\n-public void\n-insertText(String text, int pos)\n-{\n-  insert(text, pos);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Replaces the text bounded by the specified start and end positions\n-  * with the specified text.\n-  *\n-  * @param text The new text for the range.\n-  * @param start The start position of the replacement range.\n-  * @param end The end position of the replacement range.\n-  */\n-public void\n-replaceRange(String text, int start, int end)\n-{\n-  TextAreaPeer tap = (TextAreaPeer)getPeer();\n-  if (tap == null)\n-    return;\n-\n-  tap.replaceRange(text, start, end);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Replaces the text bounded by the specified start and end positions\n-  * with the specified text.\n-  *\n-  * @param text The new text for the range.\n-  * @param start The start position of the replacement range.\n-  * @param end The end position of the replacement range.\n-  *\n-  * @deprecated This method is deprecated in favor of\n-  * <code>replaceRange()</code>.\n-  */\n-public void\n-replaceText(String text, int start, int end)\n-{\n-  replaceRange(text, start, end);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns a debugging string for this text area.\n-  *\n-  * @return A debugging string for this text area.\n-  */\n-protected String\n-paramString()\n+public class TextArea extends TextComponent implements java.io.Serializable\n {\n-  return(getClass().getName() + \"(rows=\" + getRows() + \",columns=\" +\n-         getColumns() + \",scrollbars=\" + getScrollbarVisibility() +\n-         \")\");\n+  /**\n+   * Display both horiztonal and vertical scroll bars.\n+   */\n+  public static final int SCROLLBARS_BOTH = 0;\n+\n+  /**\n+   * Display vertical scroll bar only.\n+   */\n+  public static final int SCROLLBARS_VERTICAL_ONLY = 1;\n+\n+  /**\n+   * Display horizatonal scroll bar only.\n+   */\n+  public static final int SCROLLBARS_HORIZONTAL_ONLY = 2;\n+\n+  /**\n+   * Do not display scrollbars.\n+   */\n+  public static final int SCROLLBARS_NONE = 3;\n+\n+  /**\n+   * Serialization constant.\n+   */\n+  private static final long serialVersionUID = 3692302836626095722L;\n+\n+  /**\n+   * @serial The number of columns used in this text area's preferred\n+   * and minimum size calculations.\n+   */\n+  private int columns;\n+\n+  /**\n+   * @serial The number of rows used in this text area's preferred and\n+   * minimum size calculations.\n+   */\n+  private int rows;\n+\n+  /**\n+   * @serial The scrollbar display policy.  One of SCROLLBARS_BOTH,\n+   * SCROLLBARS_VERTICAL_ONLY, SCROLLBARS_HORIZONTAL_ONLY,\n+   * SCROLLBARS_NONE.\n+   */\n+  private int scrollbarVisibility;\n+\n+  /*\n+   * The number used to generate the name returned by getName.\n+   */\n+  private static transient long next_text_number = 0;\n+\n+  /**\n+   * Initialize a new instance of <code>TextArea</code> that is empty\n+   * and is one row by one column.  Both horizontal and vertical\n+   * scrollbars will be displayed.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless () is true,\n+   */\n+  public TextArea ()\n+  {\n+    this (\"\", 1, 1, SCROLLBARS_BOTH);\n+  }\n+\n+  /**\n+   * Initialize a new instance of <code>TextArea</code> that initially\n+   * contains the specified text.  Both horizontal and veritcal\n+   * scrollbars will be displayed.\n+   *\n+   * @param text The text to display in this text area.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless () is true,\n+   */\n+  public TextArea (String text)\n+  {\n+    this (text, 1, text.length (), SCROLLBARS_BOTH);\n+  }\n+\n+  /**\n+   * Initialize a new instance of <code>TextArea</code> that is empty\n+   * and can display the specified number of rows and columns of text,\n+   * without the need to scroll.  Both horizontal and vertical\n+   * scrollbars will be displayed.\n+   *\n+   * @param rows The number of rows in this text area.\n+   * @param columns The number of columns in this text area.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless () is true,\n+   */\n+  public TextArea (int rows, int columns)\n+  {\n+    this (\"\", rows, columns, SCROLLBARS_BOTH);\n+  }\n+\n+  /**\n+   * Initialize a new instance of <code>TextArea</code> that can\n+   * display the specified number of rows and columns of text, without\n+   * the need to scroll.  The TextArea initially contains the\n+   * specified text.\n+   *\n+   * @param text The text to display in this text area.\n+   * @param rows The number of rows in this text area.\n+   * @param columns The number of columns in this text area.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless () is true,\n+   */\n+  public TextArea (String text, int rows, int columns)\n+  {\n+    this (text, rows, columns, SCROLLBARS_BOTH);\n+  }\n+\n+  /**\n+   * Initialize a new instance of <code>TextArea</code> that initially\n+   * contains the specified text.  The TextArea can display the\n+   * specified number of rows and columns of text, without the need to\n+   * scroll.  This constructor allows specification of the scroll bar\n+   * display policy.\n+   *\n+   * @param text The text to display in this text area.\n+   * @param rows The number of rows in this text area.\n+   * @param columns The number of columns in this text area.\n+   * @param scrollbarVisibility The scroll bar display policy. One of\n+   * SCROLLBARS_BOTH, SCROLLBARS_VERTICAL_ONLY,\n+   * SCROLLBARS_HORIZONTAL_ONLY, SCROLLBARS_NONE.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless () is true,\n+   */\n+  public TextArea (String text, int rows, int columns, int scrollbarVisibility)\n+  {\n+    super (text);\n+\n+    if (GraphicsEnvironment.isHeadless ())\n+      throw new HeadlessException ();\n+\n+    if (rows < 1 || columns < 0)\n+      throw new IllegalArgumentException (\"Bad row or column value\");\n+\n+    if (scrollbarVisibility != SCROLLBARS_BOTH\n+        && scrollbarVisibility != SCROLLBARS_VERTICAL_ONLY\n+        && scrollbarVisibility != SCROLLBARS_HORIZONTAL_ONLY\n+        && scrollbarVisibility != SCROLLBARS_NONE)\n+      throw new IllegalArgumentException (\"Bad scrollbar visibility value\");\n+\n+    this.rows = rows;\n+    this.columns = columns;\n+    this.scrollbarVisibility = scrollbarVisibility;\n+  }\n+\n+  /*\n+   * Instance Variables\n+   */\n+\n+  /**\n+   * Retrieve the number of columns that this text area would prefer\n+   * to display.  This value may or may not correspond to the number\n+   * of columns that are actually displayed.\n+   *\n+   * @return The preferred number of columns.\n+   */\n+  public int getColumns ()\n+  {\n+    return columns;\n+  }\n+\n+  /**\n+   * Set the preferred number of columns for this text area.  This\n+   * method does not cause the number of columns displayed by the text\n+   * area to be updated, if the text area is currently visible.\n+   *\n+   * @param columns The preferred number of columns.\n+   *\n+   * @exception IllegalArgumentException If columns is less than zero.\n+   */\n+  public synchronized void setColumns (int columns)\n+  {\n+    if (columns < 0)\n+      throw new IllegalArgumentException (\"Value is less than zero: \"\n+                                          + columns);\n+\n+    this.columns = columns;\n+  }\n+\n+  /**\n+   * Retrieve the number of rows that this text area would prefer to\n+   * display.  This value may or may not correspond to the number of\n+   * rows that are actually displayed.\n+   *\n+   * @return The preferred number of rows.\n+   */\n+  public int getRows ()\n+  {\n+    return rows;\n+  }\n+\n+  /**\n+   * Set the preferred number of rows for this text area.  This method\n+   * does not cause the number of columns displayed by the text area\n+   * to be updated, if the text area is currently visible.\n+   *\n+   * @param rows The preferred number of rows.\n+   *\n+   * @exception IllegalArgumentException If rows is less than zero.\n+   */\n+  public synchronized void setRows (int rows)\n+  {\n+    if (rows < 1)\n+      throw new IllegalArgumentException (\"Value is less than one: \" + rows);\n+\n+    this.rows = rows;\n+  }\n+\n+  /**\n+   * Retrieve the minimum size for this text area, considering the\n+   * text area's current row and column values.  A text area's minimum\n+   * size depends on the number of rows and columns of text it would\n+   * prefer to display, and on the size of the font in which the text\n+   * would be displayed.\n+   *\n+   * @return The minimum size for this text field.\n+   */\n+  public Dimension getMinimumSize ()\n+  {\n+    return getMinimumSize (getRows (), getColumns ());\n+  }\n+\n+  /**\n+   * Retrieve the minimum size that this text area would have if its\n+   * row and column values were equal to those specified.  A text\n+   * area's minimum size depends on the number of rows and columns of\n+   * text it would prefer to display, and on the size of the font in\n+   * which the text would be displayed.\n+   *\n+   * @param rows The number of rows to use in the minimum size\n+   * calculation.\n+   * @param columns The number of columns to use in the minimum size\n+   * calculation.\n+   *\n+   * @return The minimum size for this text area.\n+   */\n+  public Dimension getMinimumSize (int rows, int columns)\n+  {\n+    TextAreaPeer peer = (TextAreaPeer) getPeer ();\n+\n+    // Sun returns Dimension (0,0) in this case.\n+    if (peer == null)\n+      return new Dimension (0, 0);\n+\n+    return peer.getMinimumSize (rows, columns);\n+  }\n+\n+  /**\n+   * Retrieve the minimum size for this text area, considering the\n+   * text area's current row and column values.  A text area's minimum\n+   * size depends on the number of rows and columns of text it would\n+   * prefer to display, and on the size of the font in which the text\n+   * would be displayed.\n+   *\n+   * @return The minimum size for this text area.\n+   *\n+   * @deprecated This method is deprecated in favor of\n+   * <code>getMinimumSize ()</code>.\n+   */\n+  public Dimension minimumSize ()\n+  {\n+    return getMinimumSize (getRows (), getColumns ());\n+  }\n+\n+  /**\n+   * Retrieve the minimum size that this text area would have if its\n+   * row and column values were equal to those specified.  A text\n+   * area's minimum size depends on the number of rows and columns of\n+   * text it would prefer to display, and on the size of the font in\n+   * which the text would be displayed.\n+   *\n+   * @param rows The number of rows to use in the minimum size\n+   * calculation.\n+   * @param columns The number of columns to use in the minimum size\n+   * calculation.\n+   *\n+   * @return The minimum size for this text area.\n+   *\n+   * @deprecated This method is deprecated in favor of\n+   * <code>getMinimumSize (int, int)</code>.\n+   */\n+  public Dimension minimumSize (int rows, int columns)\n+  {\n+    return getMinimumSize (rows, columns);\n+  }\n+\n+  /**\n+   * Retrieve the preferred size for this text area, considering the\n+   * text area's current row and column values.  A text area's preferred\n+   * size depends on the number of rows and columns of text it would\n+   * prefer to display, and on the size of the font in which the text\n+   * would be displayed.\n+   *\n+   * @return The preferred size for this text field.\n+   */\n+  public Dimension getPreferredSize ()\n+  {\n+    return getPreferredSize (getRows (), getColumns ());\n+  }\n+\n+  /**\n+   * Retrieve the preferred size that this text area would have if its\n+   * row and column values were equal to those specified.  A text\n+   * area's preferred size depends on the number of rows and columns\n+   * of text it would prefer to display, and on the size of the font\n+   * in which the text would be displayed.\n+   *\n+   * @param rows The number of rows to use in the preferred size\n+   * calculation.\n+   * @param columns The number of columns to use in the preferred size\n+   * calculation.\n+   *\n+   * @return The preferred size for this text area.\n+   */\n+  public Dimension getPreferredSize (int rows, int columns)\n+  {\n+    TextAreaPeer peer = (TextAreaPeer) getPeer ();\n+\n+    // Sun returns Dimension (0,0) in this case.\n+    if (peer == null)\n+      return new Dimension (0, 0);\n+\n+    return peer.getPreferredSize (rows, columns);\n+  }\n+\n+  /**\n+   * Retrieve the preferred size for this text area, considering the\n+   * text area's current row and column values.  A text area's preferred\n+   * size depends on the number of rows and columns of text it would\n+   * prefer to display, and on the size of the font in which the text\n+   * would be displayed.\n+   *\n+   * @return The preferred size for this text field.\n+   *\n+   * @deprecated This method is deprecated in favor of\n+   * <code>getPreferredSize ()</code>.\n+   */\n+  public Dimension preferredSize ()\n+  {\n+    return getPreferredSize (getRows (), getColumns ());\n+  }\n+\n+  /**\n+   * Retrieve the preferred size that this text area would have if its\n+   * row and column values were equal to those specified.  A text\n+   * area's preferred size depends on the number of rows and columns\n+   * of text it would prefer to display, and on the size of the font\n+   * in which the text would be displayed.\n+   *\n+   * @param rows The number of rows to use in the preferred size\n+   * calculation.\n+   * @param columns The number of columns to use in the preferred size\n+   * calculation.\n+   *\n+   * @return The preferred size for this text area.\n+   *\n+   * @deprecated This method is deprecated in favor of\n+   * <code>getPreferredSize (int, int)</code>.\n+   */\n+  public Dimension preferredSize (int rows, int columns)\n+  {\n+    return getPreferredSize (rows, columns);\n+  }\n+\n+  /**\n+   * Retrieve the scroll bar display policy -- one of SCROLLBARS_BOTH,\n+   * SCROLLBARS_VERTICAL_ONLY, SCROLLBARS_HORIZONTAL_ONLY,\n+   * SCROLLBARS_NONE.\n+   *\n+   * @return The current scroll bar display policy.\n+   */\n+  public int getScrollbarVisibility ()\n+  {\n+    return scrollbarVisibility;\n+  }\n+\n+  /**\n+   * Notify this object that it should create its native peer.\n+   */\n+  public void addNotify ()\n+  {\n+    if (getPeer () != null)\n+      return;\n+\n+    setPeer ((ComponentPeer) getToolkit().createTextArea (this));\n+  }\n+\n+  /**\n+   * Append the specified text to the end of the current text.\n+   *\n+   * @param text The text to append.\n+   */\n+  public void append (String str)\n+  {\n+    TextAreaPeer peer = (TextAreaPeer) getPeer ();\n+    if (peer == null)\n+      return;\n+\n+    peer.insert (str, peer.getText().length ());\n+  }\n+\n+  /**\n+   * Append the specified text to the end of the current text.\n+   *\n+   * @param text The text to append.\n+   *\n+   * @deprecated This method is deprecated in favor of\n+   * <code>append ()</code>.\n+   */\n+  public void appendText (String text)\n+  {\n+    append (text);\n+  }\n+\n+  /**\n+   * Insert the specified text at the specified position.  The first\n+   * character in the text area is at position zero.\n+   *\n+   * @param text The text to insert.\n+   * @param pos The position at which to insert text.\n+   */\n+  public void insert (String text, int pos)\n+  {\n+    TextAreaPeer peer = (TextAreaPeer) getPeer ();\n+    if (peer == null)\n+      return;\n+\n+    peer.insert (text, pos);\n+  }\n+\n+  /**\n+   * Insert the specified text at the specified position.  The first\n+   * character in the text area is at position zero.\n+   *\n+   * @param text The text to insert.\n+   * @param pos The position at which to insert text.\n+   *\n+   * @deprecated This method is depcreated in favor of\n+   * <code>insert ()</code>.\n+   */\n+  public void insertText (String text, int pos)\n+  {\n+    insert (text, pos);\n+  }\n+\n+  /**\n+   * Replace a range of characters with the specified text.  The\n+   * character at the start position will be replaced, unless start ==\n+   * end.  The character at the end posistion will not be replaced.\n+   * The first character in the text area is at position zero.  The\n+   * length of the replacement text may differ from the length of the\n+   * text that is replaced.\n+   *\n+   * @param text The new text for the range.\n+   * @param start The start position of the replacement range.\n+   * @param end The end position of the replacement range.\n+   */\n+  public void replaceRange (String text, int start, int end)\n+  {\n+    TextAreaPeer peer = (TextAreaPeer) getPeer ();\n+    if (peer == null)\n+      return;\n+\n+    peer.replaceRange (text, start, end);\n+  }\n+\n+  /**\n+   * Replace a range of characters with the specified text.  The\n+   * character at the start position will be replaced, unless start ==\n+   * end.  The character at the end posistion will not be replaced.\n+   * The first character in the text area is at position zero.  The\n+   * length of the replacement text may differ from the length of the\n+   * text that is replaced.\n+   *\n+   * @param text The new text for the range.\n+   * @param start The start position of the replacement range.\n+   * @param end The end position of the replacement range.\n+   *\n+   * @deprecated This method is deprecated in favor of\n+   * <code>replaceRange ()</code>.\n+   */\n+  public void replaceText (String text, int start, int end)\n+  {\n+    replaceRange (text, start, end);\n+  }\n+\n+  /**\n+   * Retrieve a debugging string for this text area.\n+   *\n+   * @return A debugging string for this text area.\n+   */\n+  protected String paramString ()\n+  {\n+    String sbVisibility = \"\";\n+\n+    switch (scrollbarVisibility)\n+      {\n+      case SCROLLBARS_BOTH:\n+\tsbVisibility = \"both\";\n+\tbreak;\n+      case SCROLLBARS_VERTICAL_ONLY:\n+\tsbVisibility = \"vertical-only\";\n+\tbreak;\n+      case SCROLLBARS_HORIZONTAL_ONLY:\n+\tsbVisibility = \"horizontal-only\";\n+\tbreak;\n+      case SCROLLBARS_NONE:\n+\tsbVisibility = \"none\";\n+\tbreak;\n+      }\n+\n+    String editable = \"\";\n+    if (isEditable ())\n+      editable = \"editable,\";\n+\n+    return getName () + \",\" + getX () + \",\" + getY () + \",\" + getWidth ()\n+           + \"x\" + getHeight () + \",\" + \"text=\" + getText () + \",\" + editable\n+           + \"selection=\" + getSelectionStart () + \"-\" + getSelectionEnd ()\n+           + \",rows=\" + rows + \",columns=\" + columns + \",scrollbarVisibility=\"\n+           + sbVisibility;\n+  }\n+\n+  /**\n+   * Generate a unique name for this text area.\n+   *\n+   * @return A unique name for this text area.\n+   */\n+  String generateName ()\n+  {\n+    return \"text\" + getUniqueLong ();\n+  }\n+\n+  private static synchronized long getUniqueLong ()\n+  {\n+    return next_text_number++;\n+  }\n }\n-\n-} // class TextArea \n-"}]}