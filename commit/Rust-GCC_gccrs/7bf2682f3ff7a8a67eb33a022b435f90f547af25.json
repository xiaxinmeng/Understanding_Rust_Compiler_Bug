{"sha": "7bf2682f3ff7a8a67eb33a022b435f90f547af25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JmMjY4MmYzZmY3YThhNjdlYjMzYTAyMmI0MzVmOTBmNTQ3YWYyNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchell@usa.net", "date": "1998-01-29T11:06:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-01-29T11:06:22Z"}, "message": "pt.c (convert_nontype_argument): Move check for is_overloaded_fn early to avoid bogus error.\n\n\t* pt.c (convert_nontype_argument): Move check for is_overloaded_fn\n\tearly to avoid bogus error.  Handle overloaded function\n\tnames provided as template arguments correctly.\n\t(coerce_template_parms): Don't mishandle overloaded functions when\n\tdealing with template template parameters.\n\t(lookup_template_class): Issue an error message, rather than\n\tcrashing, when the TYPE_DECL provided is not a template type.\n\nFrom-SVN: r17552", "tree": {"sha": "be8e6b3632153ed218587e2bd2c340b15ecaf8d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be8e6b3632153ed218587e2bd2c340b15ecaf8d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bf2682f3ff7a8a67eb33a022b435f90f547af25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf2682f3ff7a8a67eb33a022b435f90f547af25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bf2682f3ff7a8a67eb33a022b435f90f547af25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf2682f3ff7a8a67eb33a022b435f90f547af25/comments", "author": null, "committer": null, "parents": [{"sha": "c25520e8b93f2c1e367dfb29c01dbffabf7b7762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25520e8b93f2c1e367dfb29c01dbffabf7b7762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c25520e8b93f2c1e367dfb29c01dbffabf7b7762"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "67391f8b9569dcd41724da322bc3ad7e4ce85a8f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf2682f3ff7a8a67eb33a022b435f90f547af25/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf2682f3ff7a8a67eb33a022b435f90f547af25/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7bf2682f3ff7a8a67eb33a022b435f90f547af25", "patch": "@@ -1,3 +1,13 @@\n+Thu Jan 29 10:39:30 1998  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* pt.c (convert_nontype_argument): Move check for is_overloaded_fn\n+\tearly to avoid bogus error.  Handle overloaded function\n+\tnames provided as template arguments correctly.\n+\t(coerce_template_parms): Don't mishandle overloaded functions when\n+\tdealing with template template parameters.\n+\t(lookup_template_class): Issue an error message, rather than\n+\tcrashing, when the TYPE_DECL provided is not a template type.\n+\n Wed Jan 28 23:14:44 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* class.c (instantiate_type): Don't just return a known type if"}, {"sha": "77672b197dc482d4306ba0e288e6456c1b519a18", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf2682f3ff7a8a67eb33a022b435f90f547af25/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf2682f3ff7a8a67eb33a022b435f90f547af25/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7bf2682f3ff7a8a67eb33a022b435f90f547af25", "patch": "@@ -1417,9 +1417,17 @@ convert_nontype_argument (type, expr)\n   if (INTEGRAL_TYPE_P (expr_type) && TREE_READONLY_DECL_P (expr))\n     expr = decl_constant_value (expr);\n \n-  if (INTEGRAL_TYPE_P (expr_type) \n-      || TYPE_PTRMEM_P (expr_type) \n-      || TYPE_PTRMEMFUNC_P (expr_type))\n+  if (is_overloaded_fn (expr))\n+    /* OK for now.  We'll check that it has external linkage later.\n+       Check this first since if expr_type is the unknown_type_node\n+       we would otherwise complain below.  */\n+    ;\n+  else if (INTEGRAL_TYPE_P (expr_type) \n+\t   || TYPE_PTRMEM_P (expr_type) \n+\t   || TYPE_PTRMEMFUNC_P (expr_type)\n+\t   /* The next two are g++ extensions.  */\n+\t   || TREE_CODE (expr_type) == REAL_TYPE\n+\t   || TREE_CODE (expr_type) == COMPLEX_TYPE)\n     {\n       if (! TREE_CONSTANT (expr))\n \t{\n@@ -1474,9 +1482,6 @@ convert_nontype_argument (type, expr)\n       if (!TREE_PUBLIC (expr))\n \tgoto bad_argument;\n     }\n-  else if (is_overloaded_fn (expr))\n-    /* OK for now.  We'll check that it has external linkage later.  */\n-    ;\n   else \n     {\n       cp_error (\"object `%E' cannot be used as template argument\", expr);\n@@ -1526,8 +1531,7 @@ convert_nontype_argument (type, expr)\n \t    tree fns;\n \t    tree fn;\n \n-\t    if (TYPE_PTRFN_P (expr_type) ||\n-\t\texpr_type == unknown_type_node)\n+\t    if (TREE_CODE (expr) == ADDR_EXPR)\n \t      fns = TREE_OPERAND (expr, 0);\n \t    else\n \t      fns = expr;\n@@ -1819,7 +1823,7 @@ coerce_template_parms (parms, arglist, in_decl,\n       /* In case we are checking arguments inside a template template\n \t parameter, ARG that does not come from default argument is \n \t also a TREE_LIST node */\n-      if (TREE_CODE (arg) == TREE_LIST)\n+      if (TREE_CODE (arg) == TREE_LIST && ! is_overloaded_fn (arg))\n \t{\n           is_tmpl_parm = 1;\n \t  arg = TREE_VALUE (arg);\n@@ -2227,6 +2231,8 @@ lookup_template_class (d1, arglist, in_decl, context)\n     }\n   else if (TREE_CODE (d1) == TYPE_DECL && IS_AGGR_TYPE (TREE_TYPE (d1)))\n     {\n+      if (CLASSTYPE_TEMPLATE_INFO (TREE_TYPE (d1)) == NULL_TREE)\n+\treturn error_mark_node;\n       template = CLASSTYPE_TI_TEMPLATE (TREE_TYPE (d1));\n       d1 = DECL_NAME (template);\n     }"}]}