{"sha": "0a7501658c43bba75e8130f250ae6445eab0ea9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE3NTAxNjU4YzQzYmJhNzVlODEzMGYyNTBhZTY0NDVlYWIwZWE5Zg==", "commit": {"author": {"name": "Rong Xu", "email": "xur@gcc.gnu.org", "date": "2014-10-07T04:06:12Z"}, "committer": {"name": "Rong Xu", "email": "xur@gcc.gnu.org", "date": "2014-10-07T04:06:12Z"}, "message": "params.def (PARAM_INDIR_CALL_TOPN_PROFILE): New param.\n\n2014-10-06  Rong Xu  <xur@google.com>\n\n\t* gcc/params.def (PARAM_INDIR_CALL_TOPN_PROFILE): New param.\n\t* gcc/tree-profile.c: (params.h): New include.\n        (init_ic_make_global_vars): Make __gcov_indirect_call_topn_callee\n        and __gcov_indirect_call_topn_counters for\n        indirect_call_topn_profile.\n\t(gimple_init_edge_profiler): New decls for \n        __gcov_indirect_call_topn_profiler.\n\t(gimple_gen_ic_profiler): Generate the correct profiler call.\n\t(gimple_gen_ic_func_profiler): Fix format.\n\t* gcc/value-prof.c (params.h): New include.\n        (dump_histogram_value): Hanlde indirect_call_topn counters.\n\t(stream_in_histogram_value): Ditto.\n\t(gimple_indirect_call_to_profile): Use indirect_call_topn\n        profile when PARAM_INDIR_CALL_TOPN_PROFILE is set.\n\t(gimple_find_values_to_profile): Hanlde indirect_call_topn\n        counters.\n\t* gcc/value-prof.h (enum hist_type): Histrogram type for\n        indirect_call_topn counters.\n\t* gcc/profile.c (instrument_values): Instrument\n        indirect_call_topn counters.\n\nFrom-SVN: r215963", "tree": {"sha": "3f660889ad3bf100d6e658c24a2f620b8f2c0414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f660889ad3bf100d6e658c24a2f620b8f2c0414"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a7501658c43bba75e8130f250ae6445eab0ea9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7501658c43bba75e8130f250ae6445eab0ea9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a7501658c43bba75e8130f250ae6445eab0ea9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a7501658c43bba75e8130f250ae6445eab0ea9f/comments", "author": null, "committer": null, "parents": [{"sha": "afe0c5ee91ab504daf13f1c07ee5559b2ba5b6e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe0c5ee91ab504daf13f1c07ee5559b2ba5b6e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afe0c5ee91ab504daf13f1c07ee5559b2ba5b6e4"}], "stats": {"total": 79, "additions": 67, "deletions": 12}, "files": [{"sha": "beff7e632124129f9751ab701a45b5ae59e4dbc1", "filename": "gcc/params.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7501658c43bba75e8130f250ae6445eab0ea9f/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7501658c43bba75e8130f250ae6445eab0ea9f/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=0a7501658c43bba75e8130f250ae6445eab0ea9f", "patch": "@@ -882,6 +882,14 @@ DEFPARAM (PARAM_PROFILE_FUNC_INTERNAL_ID,\n          \"use internal function id in profile lookup\",\n           0, 0, 1)\n \n+/* When the parameter is 1, track the most frequent N target\n+   addresses in indirect-call profile. This disables\n+   indirect_call_profiler_v2 which tracks single target.  */\n+DEFPARAM (PARAM_INDIR_CALL_TOPN_PROFILE,\n+         \"indir-call-topn-profile\",\n+         \"track topn target addresses in indirect-call profile\",\n+          0, 0, 1)\n+\n /* Avoid SLP vectorization of large basic blocks.  */\n DEFPARAM (PARAM_SLP_MAX_INSNS_IN_BB,\n           \"slp-max-insns-in-bb\","}, {"sha": "6be8a030fc6e0ade3632f1e18cbddf9e2fac5e2f", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7501658c43bba75e8130f250ae6445eab0ea9f/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7501658c43bba75e8130f250ae6445eab0ea9f/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=0a7501658c43bba75e8130f250ae6445eab0ea9f", "patch": "@@ -183,6 +183,7 @@ instrument_values (histogram_values values)\n \t  break;\n \n  \tcase HIST_TYPE_INDIR_CALL:\n+ \tcase HIST_TYPE_INDIR_CALL_TOPN:\n  \t  gimple_gen_ic_profiler (hist, t, 0);\n   \t  break;\n "}, {"sha": "48d13a22d341f94764e9ed2f5e3af79be930cea2", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7501658c43bba75e8130f250ae6445eab0ea9f/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7501658c43bba75e8130f250ae6445eab0ea9f/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=0a7501658c43bba75e8130f250ae6445eab0ea9f", "patch": "@@ -56,6 +56,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"tree-cfgcleanup.h\"\n #include \"tree-nested.h\"\n+#include \"params.h\"\n \n static GTY(()) tree gcov_type_node;\n static GTY(()) tree tree_interval_profiler_fn;\n@@ -101,7 +102,10 @@ init_ic_make_global_vars (void)\n     {\n       ic_void_ptr_var\n \t= build_decl (UNKNOWN_LOCATION, VAR_DECL,\n-\t\t      get_identifier (\"__gcov_indirect_call_callee\"),\n+\t\t      get_identifier (\n+\t\t\t      (PARAM_VALUE (PARAM_INDIR_CALL_TOPN_PROFILE) ?\n+\t\t\t       \"__gcov_indirect_call_topn_callee\" :\n+\t\t\t       \"__gcov_indirect_call_callee\")),\n \t\t      ptr_void);\n       TREE_PUBLIC (ic_void_ptr_var) = 1;\n       DECL_EXTERNAL (ic_void_ptr_var) = 1;\n@@ -131,7 +135,10 @@ init_ic_make_global_vars (void)\n     {\n       ic_gcov_type_ptr_var\n \t= build_decl (UNKNOWN_LOCATION, VAR_DECL,\n-\t\t      get_identifier (\"__gcov_indirect_call_counters\"),\n+\t\t      get_identifier (\n+\t\t\t      (PARAM_VALUE (PARAM_INDIR_CALL_TOPN_PROFILE) ?\n+\t\t\t       \"__gcov_indirect_call_topn_counters\" :\n+\t\t               \"__gcov_indirect_call_counters\")),\n \t\t      gcov_type_ptr);\n       TREE_PUBLIC (ic_gcov_type_ptr_var) = 1;\n       DECL_EXTERNAL (ic_gcov_type_ptr_var) = 1;\n@@ -226,8 +233,10 @@ gimple_init_edge_profiler (void)\n \t\t\t\t\t      ptr_void,\n \t\t\t\t\t      NULL_TREE);\n \t  tree_indirect_call_profiler_fn\n-\t\t  = build_fn_decl (\"__gcov_indirect_call_profiler_v2\",\n-\t\t\t\t\t ic_profiler_fn_type);\n+\t\t  = build_fn_decl ( (PARAM_VALUE (PARAM_INDIR_CALL_TOPN_PROFILE) ?\n+\t\t\t\t     \"__gcov_indirect_call_topn_profiler\":\n+\t\t\t\t     \"__gcov_indirect_call_profiler_v2\"),\n+\t\t\t\t   ic_profiler_fn_type);\n         }\n       TREE_NOTHROW (tree_indirect_call_profiler_fn) = 1;\n       DECL_ATTRIBUTES (tree_indirect_call_profiler_fn)\n@@ -398,6 +407,12 @@ gimple_gen_ic_profiler (histogram_value value, unsigned tag, unsigned base)\n   gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n   tree ref_ptr = tree_coverage_counter_addr (tag, base);\n \n+  if ( (PARAM_VALUE (PARAM_INDIR_CALL_TOPN_PROFILE) &&\n+        tag == GCOV_COUNTER_V_INDIR) ||\n+       (!PARAM_VALUE (PARAM_INDIR_CALL_TOPN_PROFILE) &&\n+        tag == GCOV_COUNTER_ICALL_TOPNV))\n+    return;\n+\n   ref_ptr = force_gimple_operand_gsi (&gsi, ref_ptr,\n \t\t\t\t      true, NULL_TREE, true, GSI_SAME_STMT);\n \n@@ -442,8 +457,7 @@ gimple_gen_ic_func_profiler (void)\n     stmt1: __gcov_indirect_call_profiler_v2 (profile_id,\n \t\t\t\t\t     &current_function_decl)\n    */\n-  gsi =\n-\t\t\t\t\t     gsi_after_labels (split_edge (single_succ_edge (ENTRY_BLOCK_PTR_FOR_FN (cfun))));\n+  gsi = gsi_after_labels (split_edge (single_succ_edge (ENTRY_BLOCK_PTR_FOR_FN (cfun))));\n \n   cur_func = force_gimple_operand_gsi (&gsi,\n \t\t\t\t       build_addr (current_function_decl,"}, {"sha": "37710ca6da61a3e4e36f6fcde1b45bd98f31e4ee", "filename": "gcc/value-prof.c", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7501658c43bba75e8130f250ae6445eab0ea9f/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7501658c43bba75e8130f250ae6445eab0ea9f/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=0a7501658c43bba75e8130f250ae6445eab0ea9f", "patch": "@@ -60,6 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"tree-nested.h\"\n #include \"hash-set.h\"\n+#include \"params.h\"\n \n /* In this file value profile based optimizations are placed.  Currently the\n    following optimizations are implemented (for more detailed descriptions\n@@ -359,6 +360,22 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n       }\n       fprintf (dump_file, \".\\n\");\n       break;\n+    case HIST_TYPE_INDIR_CALL_TOPN:\n+      fprintf (dump_file, \"Indirect call topn \");\n+      if (hist->hvalue.counters)\n+\t{\n+           int i;\n+\n+           fprintf (dump_file, \"accu:%\"PRId64, hist->hvalue.counters[0]);\n+           for (i = 1; i < (GCOV_ICALL_TOPN_VAL << 2); i += 2)\n+             {\n+               fprintf (dump_file, \" target:%\"PRId64 \" value:%\"PRId64,\n+                       (int64_t) hist->hvalue.counters[i],\n+                       (int64_t) hist->hvalue.counters[i+1]);\n+             }\n+        }\n+      fprintf (dump_file, \".\\n\");\n+      break;\n     case HIST_TYPE_MAX:\n       gcc_unreachable ();\n    }\n@@ -432,9 +449,14 @@ stream_in_histogram_value (struct lto_input_block *ib, gimple stmt)\n \t  break;\n \n \tcase HIST_TYPE_IOR:\n-  case HIST_TYPE_TIME_PROFILE:\n+        case HIST_TYPE_TIME_PROFILE:\n \t  ncounters = 1;\n \t  break;\n+\n+        case HIST_TYPE_INDIR_CALL_TOPN:\n+          ncounters = (GCOV_ICALL_TOPN_VAL << 2) + 1;\n+          break;\n+\n \tcase HIST_TYPE_MAX:\n \t  gcc_unreachable ();\n \t}\n@@ -1920,8 +1942,12 @@ gimple_indirect_call_to_profile (gimple stmt, histogram_values *values)\n \n   values->reserve (3);\n \n-  values->quick_push (gimple_alloc_histogram_value (cfun, HIST_TYPE_INDIR_CALL,\n-\t\t\t\t\t\t    stmt, callee));\n+  values->quick_push (gimple_alloc_histogram_value (\n+                        cfun,\n+                        PARAM_VALUE (PARAM_INDIR_CALL_TOPN_PROFILE) ?\n+                          HIST_TYPE_INDIR_CALL_TOPN :\n+                          HIST_TYPE_INDIR_CALL,\n+\t\t\tstmt, callee));\n \n   return;\n }\n@@ -2011,9 +2037,9 @@ gimple_find_values_to_profile (histogram_values *values)\n  \t  hist->n_counters = 3;\n \t  break;\n \n-  case HIST_TYPE_TIME_PROFILE:\n-    hist->n_counters = 1;\n-    break;\n+        case HIST_TYPE_TIME_PROFILE:\n+          hist->n_counters = 1;\n+          break;\n \n \tcase HIST_TYPE_AVERAGE:\n \t  hist->n_counters = 2;\n@@ -2023,6 +2049,10 @@ gimple_find_values_to_profile (histogram_values *values)\n \t  hist->n_counters = 1;\n \t  break;\n \n+        case HIST_TYPE_INDIR_CALL_TOPN:\n+          hist->n_counters = GCOV_ICALL_TOPN_NCOUNTS;\n+          break;\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "00a89fab2a43ad8ffdb798fa76e1ad2cc5dc528d", "filename": "gcc/value-prof.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a7501658c43bba75e8130f250ae6445eab0ea9f/gcc%2Fvalue-prof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a7501658c43bba75e8130f250ae6445eab0ea9f/gcc%2Fvalue-prof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.h?ref=0a7501658c43bba75e8130f250ae6445eab0ea9f", "patch": "@@ -35,6 +35,8 @@ enum hist_type\n   HIST_TYPE_AVERAGE,\t/* Compute average value (sum of all values).  */\n   HIST_TYPE_IOR,\t/* Used to compute expected alignment.  */\n   HIST_TYPE_TIME_PROFILE, /* Used for time profile */\n+  HIST_TYPE_INDIR_CALL_TOPN, /* Tries to identify the top N most frequently\n+                                called functions in indirect call.  */\n   HIST_TYPE_MAX\n };\n "}]}