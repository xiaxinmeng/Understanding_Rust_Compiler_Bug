{"sha": "18963d3bee780cd8a6477ad5a198410758ec4e60", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg5NjNkM2JlZTc4MGNkOGE2NDc3YWQ1YTE5ODQxMDc1OGVjNGU2MA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-09-27T09:41:58Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-11-02T23:06:40Z"}, "message": "can_implement_as_sibling_call_p REG_PARM_STACK_SPACE check\n\nThis moves an #ifdef block of code from calls.c to\ntargetm.function_ok_for_sibcall.  Only two targets, x86 and rs6000,\ndefine REG_PARM_STACK_SPACE or OUTGOING_REG_PARM_STACK_SPACE macros\nthat might vary depending on the called function.  Macros like\nUNITS_PER_WORD don't change over a function boundary, nor does the\nMIPS ABI, nor does TARGET_64BIT on PA-RISC.  Other targets are even\nmore trivially proven to not need the calls.c code.\n\nBesides cleaning up a small piece of #ifdef code, the motivation for\nthis patch is to allow tail calls on PowerPC for functions that\nrequire less reg_parm_stack_space than their caller.  The original\ncode in calls.c only permitted tail calls when exactly equal, but on\nPowerPC we can tail call if the callee has less or equal\nREG_PARM_STACK_SPACE than the caller, as demonstrated by the\ntestcase.  So we should use\n\n  /* If reg parm stack space increases, we cannot sibcall.  */\n  if (REG_PARM_STACK_SPACE (decl ? decl : fntype)\n      > INCOMING_REG_PARM_STACK_SPACE (current_function_decl))\n\nand note the change to use INCOMING_REG_PARM_STACK_SPACE.\nREG_PARM_STACK_SPACE has always been wrong there for PowerPC.  See\nhttps://gcc.gnu.org/pipermail/gcc-patches/2014-May/389867.html for why\nif you're curious.  Not that it matters, because PowerPC can do\nwithout this check entirely, relying on a stack slot test in generic\ncode.\n\na) The generic code checks that arg passing stack in the callee is not\n   greater than that in the caller, and,\nb) ELFv2 only allocates reg_parm_stack_space when some parameter is\n   passed on the stack.\nPoint (b) means that zero reg_parm_stack_space implies zero stack\nspace, and non-zero reg_parm_stack_space implies non-zero stack\nspace.  So the case of 0 reg_parm_stack_space in the caller and 64 in\nthe callee will be caught by (a).\n\ngcc/\n\tPR middle-end/97267\n\t* calls.h (maybe_complain_about_tail_call): Declare.\n\t* calls.c (maybe_complain_about_tail_call): Make global.\n\t(can_implement_as_sibling_call_p): Delete reg_parm_stack_space\n\tparam.  Adjust caller.  Move REG_PARM_STACK_SPACE check to..\n\t* config/i386/i386.c (ix86_function_ok_for_sibcall): ..here.\n\ngcc/testsuite/\n\tPR middle-end/97267\n\t* gcc.target/powerpc/pr97267.c: New test.", "tree": {"sha": "cb7655415ee5b592ad09023beec1f1466cd365e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb7655415ee5b592ad09023beec1f1466cd365e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18963d3bee780cd8a6477ad5a198410758ec4e60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18963d3bee780cd8a6477ad5a198410758ec4e60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18963d3bee780cd8a6477ad5a198410758ec4e60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18963d3bee780cd8a6477ad5a198410758ec4e60/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ceaafc95c77cded164cde58da41bed0cbe76489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ceaafc95c77cded164cde58da41bed0cbe76489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ceaafc95c77cded164cde58da41bed0cbe76489"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "1a7632d2d4867faed8ad3e74e61deb1050bddfb6", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18963d3bee780cd8a6477ad5a198410758ec4e60/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18963d3bee780cd8a6477ad5a198410758ec4e60/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=18963d3bee780cd8a6477ad5a198410758ec4e60", "patch": "@@ -1922,7 +1922,7 @@ maybe_warn_nonstring_arg (tree fndecl, tree exp)\n /* Issue an error if CALL_EXPR was flagged as requiring\n    tall-call optimization.  */\n \n-static void\n+void\n maybe_complain_about_tail_call (tree call_expr, const char *reason)\n {\n   gcc_assert (TREE_CODE (call_expr) == CALL_EXPR);\n@@ -3525,7 +3525,6 @@ static bool\n can_implement_as_sibling_call_p (tree exp,\n \t\t\t\t rtx structure_value_addr,\n \t\t\t\t tree funtype,\n-\t\t\t\t int reg_parm_stack_space ATTRIBUTE_UNUSED,\n \t\t\t\t tree fndecl,\n \t\t\t\t int flags,\n \t\t\t\t tree addr,\n@@ -3550,20 +3549,6 @@ can_implement_as_sibling_call_p (tree exp,\n       return false;\n     }\n \n-#ifdef REG_PARM_STACK_SPACE\n-  /* If outgoing reg parm stack space changes, we cannot do sibcall.  */\n-  if (OUTGOING_REG_PARM_STACK_SPACE (funtype)\n-      != OUTGOING_REG_PARM_STACK_SPACE (TREE_TYPE (current_function_decl))\n-      || (reg_parm_stack_space != REG_PARM_STACK_SPACE (current_function_decl)))\n-    {\n-      maybe_complain_about_tail_call (exp,\n-\t\t\t\t      \"inconsistent size of stack space\"\n-\t\t\t\t      \" allocated for arguments which are\"\n-\t\t\t\t      \" passed in registers\");\n-      return false;\n-    }\n-#endif\n-\n   /* Check whether the target is able to optimize the call\n      into a sibcall.  */\n   if (!targetm.function_ok_for_sibcall (fndecl, exp))\n@@ -4088,7 +4073,6 @@ expand_call (tree exp, rtx target, int ignore)\n     try_tail_call = can_implement_as_sibling_call_p (exp,\n \t\t\t\t\t\t     structure_value_addr,\n \t\t\t\t\t\t     funtype,\n-\t\t\t\t\t\t     reg_parm_stack_space,\n \t\t\t\t\t\t     fndecl,\n \t\t\t\t\t\t     flags, addr, args_size);\n "}, {"sha": "b20d24bb888691030e178e59059b387d40e5a84e", "filename": "gcc/calls.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18963d3bee780cd8a6477ad5a198410758ec4e60/gcc%2Fcalls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18963d3bee780cd8a6477ad5a198410758ec4e60/gcc%2Fcalls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.h?ref=18963d3bee780cd8a6477ad5a198410758ec4e60", "patch": "@@ -133,6 +133,7 @@ extern bool reference_callee_copied (CUMULATIVE_ARGS *,\n extern void maybe_warn_alloc_args_overflow (tree, tree, tree[2], int[2]);\n extern tree get_attr_nonstring_decl (tree, tree * = NULL);\n extern bool maybe_warn_nonstring_arg (tree, tree);\n+extern void maybe_complain_about_tail_call (tree, const char *);\n enum size_range_flags\n   {\n    /* Set to consider zero a valid range.  */"}, {"sha": "caa9b9d5ac1abc083d3ce2e896108edf3798c9d1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18963d3bee780cd8a6477ad5a198410758ec4e60/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18963d3bee780cd8a6477ad5a198410758ec4e60/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=18963d3bee780cd8a6477ad5a198410758ec4e60", "patch": "@@ -939,6 +939,19 @@ ix86_function_ok_for_sibcall (tree decl, tree exp)\n       decl_or_type = type;\n     }\n \n+  /* If outgoing reg parm stack space changes, we cannot do sibcall.  */\n+  if ((OUTGOING_REG_PARM_STACK_SPACE (type)\n+       != OUTGOING_REG_PARM_STACK_SPACE (TREE_TYPE (current_function_decl)))\n+      || (REG_PARM_STACK_SPACE (decl_or_type)\n+\t  != REG_PARM_STACK_SPACE (current_function_decl)))\n+    {\n+      maybe_complain_about_tail_call (exp,\n+\t\t\t\t      \"inconsistent size of stack space\"\n+\t\t\t\t      \" allocated for arguments which are\"\n+\t\t\t\t      \" passed in registers\");\n+      return false;\n+    }\n+\n   /* Check that the return value locations are the same.  Like\n      if we are returning floats on the 80387 register stack, we cannot\n      make a sibcall from a function that doesn't return a float to a"}, {"sha": "cab46245fc9ad84e1c63c68d91fea5eb3c6423be", "filename": "gcc/testsuite/gcc.target/powerpc/pr97267.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18963d3bee780cd8a6477ad5a198410758ec4e60/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr97267.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18963d3bee780cd8a6477ad5a198410758ec4e60/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr97267.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr97267.c?ref=18963d3bee780cd8a6477ad5a198410758ec4e60", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+static int __attribute__ ((__noclone__, __noinline__))\n+reg_args (int j1, int j2, int j3, int j4, int j5, int j6, int j7, int j8)\n+{\n+  return j1 + j2 + j3 + j4 + j5 + j6 + j7 + j8;\n+}\n+\n+int __attribute__ ((__noclone__, __noinline__))\n+stack_args (int j1, int j2, int j3, int j4, int j5, int j6, int j7, int j8,\n+\t    int j9)\n+{\n+  if (j9 == 0)\n+    return 0;\n+  return reg_args (j1, j2, j3, j4, j5, j6, j7, j8);\n+}\n+\n+/* { dg-final { scan-assembler-not {(?n)^\\s+bl\\s} } } */"}]}