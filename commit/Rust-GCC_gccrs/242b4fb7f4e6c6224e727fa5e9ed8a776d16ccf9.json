{"sha": "242b4fb7f4e6c6224e727fa5e9ed8a776d16ccf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQyYjRmYjdmNGU2YzYyMjRlNzI3ZmE1ZTllZDhhNzc2ZDE2Y2NmOQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-18T17:31:25Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-19T04:21:55Z"}, "message": "libstdc++: P1983R0 Wording for GB301, US296, US292, US291, and US283\n\nAmong other changes, P1983R0 resolves LWG 3278 in a different way, so this patch\nalso reverts the already-applied wording of LWG 3278.\n\nThe wording for US291 (the join_view::begin hunk) also required adding the\nfriend _Iterator<!_Const> to join_view::_Iterator.  This friend is needed so\nthat _Iterator's converting constructor can access the private members of an\n_Iterator of the opposite constness.\n\nThe wording for US283 has already been applied it seems.\n\nlibstdc++-v3/ChangeLog:\n\n\tP1983R0 Wording for GB301, US296, US292, US291, and US283\n\t* include/std/ranges (filter_view::pred): New member function.\n\t(join_view::_Iterator::_Iterator): Remove now-redundant comment since\n\tP1983R0 fixes the highlighted issue in the same way.\n\t(join_view::_Iterator<_Const>): Add friend\n\tjoin_view::_Iterator<!_Const>.\n\t(join_view::_M_inner): Remove mutable specifier, effectively reverting\n\tthe proposed wording changes of P3278.\n\t(join_view::begin): Refine the condition for when to return a const\n\titerator.\n\t(split_view::_OuterIter::_OuterIter): Adjust constraints.\n\t* testsuite/std/ranges/adaptors/filter.cc: Test that filter_view::pred\n\texists and works.", "tree": {"sha": "4529acc85a30bec27365baf92bf08a435dc45a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4529acc85a30bec27365baf92bf08a435dc45a03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/242b4fb7f4e6c6224e727fa5e9ed8a776d16ccf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/242b4fb7f4e6c6224e727fa5e9ed8a776d16ccf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/242b4fb7f4e6c6224e727fa5e9ed8a776d16ccf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/242b4fb7f4e6c6224e727fa5e9ed8a776d16ccf9/comments", "author": null, "committer": null, "parents": [{"sha": "6fa35f0e2843759cf5a4f2d309aa26090fd25f80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fa35f0e2843759cf5a4f2d309aa26090fd25f80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fa35f0e2843759cf5a4f2d309aa26090fd25f80"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "b60f5c301b4727fd04b99210f3afee56fdac0180", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/242b4fb7f4e6c6224e727fa5e9ed8a776d16ccf9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/242b4fb7f4e6c6224e727fa5e9ed8a776d16ccf9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=242b4fb7f4e6c6224e727fa5e9ed8a776d16ccf9", "patch": "@@ -1,3 +1,19 @@\n+2020-02-18  Patrick Palka  <ppalka@redhat.com>\n+\n+\tP1983R0 Wording for GB301, US296, US292, US291, and US283\n+\t* include/std/ranges (filter_view::pred): New member function.\n+\t(join_view::_Iterator::_Iterator): Remove now-redundant comment since\n+\tP1983R0 fixes the highlighted issue in the same way.\n+\t(join_view::_Iterator<_Const>): Add friend\n+\tjoin_view::_Iterator<!_Const>.\n+\t(join_view::_M_inner): Remove mutable specifier, effectively reverting\n+\tthe proposed wording changes of P3278.\n+\t(join_view::begin): Refine the condition for when to return a const\n+\titerator.\n+\t(split_view::_OuterIter::_OuterIter): Adjust constraints.\n+\t* testsuite/std/ranges/adaptors/filter.cc: Test that filter_view::pred\n+\texists and works.\n+\n 2020-02-18  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/93818"}, {"sha": "e0eb84748a23ca9d1c36c3755c5c877be8be34f1", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/242b4fb7f4e6c6224e727fa5e9ed8a776d16ccf9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/242b4fb7f4e6c6224e727fa5e9ed8a776d16ccf9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=242b4fb7f4e6c6224e727fa5e9ed8a776d16ccf9", "patch": "@@ -1488,6 +1488,10 @@ namespace views\n       base() &&\n       { return std::move(_M_base); }\n \n+      constexpr const _Pred&\n+      pred() const\n+      { return *_M_pred; }\n+\n       constexpr _Iterator\n       begin()\n       {\n@@ -2336,8 +2340,6 @@ namespace views\n \n \t  _Iterator() = default;\n \n-\t  // XXX: had to change the type of __outer from iterator_t<_Vp> to\n-\t  // iterator_t<_Base> here, a possible defect in the spec?\n \t  constexpr\n \t  _Iterator(_Parent& __parent, _Outer_iter __outer)\n \t    : _M_outer(std::move(__outer)),\n@@ -2437,6 +2439,7 @@ namespace views\n \t    noexcept(noexcept(ranges::iter_swap(__x._M_inner, __y._M_inner)))\n \t  { return ranges::iter_swap(__x._M_inner, __y._M_inner); }\n \n+\t  friend _Iterator<!_Const>;\n \t  friend _Sentinel<_Const>;\n \t};\n \n@@ -2475,8 +2478,7 @@ namespace views\n       _Vp _M_base = _Vp();\n \n       // XXX: _M_inner is \"present only when !is_reference_v<_InnerRange>\"\n-      // Applied P3278 and made this field mutable.\n-      [[no_unique_address]] mutable\n+      [[no_unique_address]]\n \tconditional_t<!is_reference_v<_InnerRange>,\n \t\t      all_view<_InnerRange>, __detail::_Empty> _M_inner;\n \n@@ -2509,8 +2511,10 @@ namespace views\n       constexpr auto\n       begin()\n       {\n-\treturn _Iterator<__detail::__simple_view<_Vp>>{*this,\n-\t\t\t\t\t\t       ranges::begin(_M_base)};\n+\tconstexpr bool __use_const\n+\t  = (__detail::__simple_view<_Vp>\n+\t     && is_reference_v<range_reference_t<_Vp>>);\n+\treturn _Iterator<__use_const>{*this, ranges::begin(_M_base)};\n       }\n \n       constexpr auto\n@@ -2676,7 +2680,7 @@ namespace views\n \t  constexpr\n \t  _OuterIter(_OuterIter<!_Const> __i)\n \t    requires _Const\n-\t      && convertible_to<iterator_t<_Vp>, iterator_t<const _Vp>>\n+\t      && convertible_to<iterator_t<_Vp>, iterator_t<_Base>>\n \t    : _M_parent(__i._M_parent), _M_current(std::move(__i._M_current))\n \t  { }\n "}, {"sha": "4edbf0b657da5317ea4775bd71cf4c77a0ac2686", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/filter.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/242b4fb7f4e6c6224e727fa5e9ed8a776d16ccf9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ffilter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/242b4fb7f4e6c6224e727fa5e9ed8a776d16ccf9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ffilter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ffilter.cc?ref=242b4fb7f4e6c6224e727fa5e9ed8a776d16ccf9", "patch": "@@ -46,6 +46,8 @@ test01()\n   static_assert(ranges::range<ranges::all_view<R>>);\n   VERIFY( ranges::equal(v, (int[]){1,3,5}) );\n   VERIFY( ranges::equal(v | views::reverse, (int[]){5,3,1}) );\n+  VERIFY( v.pred()(3) == true );\n+  VERIFY( v.pred()(4) == false );\n }\n \n void"}]}