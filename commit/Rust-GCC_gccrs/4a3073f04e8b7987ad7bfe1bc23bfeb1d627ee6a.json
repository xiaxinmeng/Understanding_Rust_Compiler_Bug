{"sha": "4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a", "node_id": "C_kwDOANBUbNoAKDRhMzA3M2YwNGU4Yjc5ODdhZDdiZmUxYmMyM2JmZWIxZDYyN2VlNmE", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-03-21T10:51:56Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-03-21T10:51:56Z"}, "message": "rtl-ssa: Fix prev/next_def confusion [PR104869]\n\nrtl-ssa chains definitions into an RPO list.  It also groups\nsequences of clobbers together into a single node, so that it's\npossible to skip over the clobbers in constant time in order to\nget the next or previous set.\n\nWhen adding a clobber to an insn, the main DF barriers for that\nclobber are the last use of the previous set (if any) and the next\nset (if any); adding a new clobber to a sea of clobbers is fine.\ndef_lookup provided the basis for these barriers as prev_def ()\nand next_def ().\n\nBut of course, in hindsight, those were bad names, since they\nimplied that the returned values were literally the previous\ndefinition (of any kind) or the next definition (of any kind).\nAnd function_info::make_use_available was using the same routines\nassuming that they had that meaning. :-(\n\nThis made a difference for the case where the start of a BB\noccurs in the middle of an (RPO) clobber group: we then want\nthe previous and next clobbers in the group, rather than the\nset before the clobber group and the set after the clobber group.\n\nThis patch renames the existing routines to something that's hopefully\nclearer (though also more long-winded).  It then adds routines that\nreally do provide the previous and next definitions.\n\nThis complication is supposed to be internal to rtl-ssa and, as\nmentioned above, is part of trying to reduce time complexity.\n\ngcc/\n\tPR middle-end/104869\n\t* rtl-ssa/accesses.h (clobber_group::prev_clobber): Declare.\n\t(clobber_group::next_clobber): Likewise.\n\t(def_lookup::prev_def): Rename to...\n\t(def_lookup::last_def_of_prev_group): ...this.\n\t(def_lookup::next_def): Rename to...\n\t(def_lookup::first_def_of_next_group): ...this.\n\t(def_lookup::matching_or_prev_def): Rename to...\n\t(def_lookup::matching_set_or_last_def_of_prev_group): ...this.\n\t(def_lookup::matching_or_next_def): Rename to...\n\t(def_lookup::matching_set_or_first_def_of_next_group): ...this.\n\t(def_lookup::prev_def): New function, taking the lookup insn as\n\targument.\n\t(def_lookup::next_def): Likewise.\n\t* rtl-ssa/member-fns.inl (def_lookup::prev_def): Rename to...\n\t(def_lookup::last_def_of_prev_group): ...this.\n\t(def_lookup::next_def): Rename to...\n\t(def_lookup::first_def_of_next_group): ...this.\n\t(def_lookup::matching_or_prev_def): Rename to...\n\t(def_lookup::matching_set_or_last_def_of_prev_group): ...this.\n\t(def_lookup::matching_or_next_def): Rename to...\n\t(def_lookup::matching_set_or_first_def_of_next_group): ...this.\n\t* rtl-ssa/movement.h (restrict_movement_for_dead_range): Update after\n\tabove renaming.\n\t* rtl-ssa/accesses.cc (clobber_group::prev_clobber): New function.\n\t(clobber_group::next_clobber): Likewise.\n\t(def_lookup::prev_def): Likewise.\n\t(def_lookup::next_def): Likewise.\n\t(function_info::make_use_available): Pass the lookup insn to\n\tdef_lookup::prev_def and def_lookup::next_def.\n\ngcc/testsuite/\n\tPR middle-end/104869\n\t* g++.dg/pr104869.C: New test.", "tree": {"sha": "3d4cf5b01aae7ac2536c128e7ae40ca0a2af67f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d4cf5b01aae7ac2536c128e7ae40ca0a2af67f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d810acbd2c0fb73939e5a38b68b22152a4f3cc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d810acbd2c0fb73939e5a38b68b22152a4f3cc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d810acbd2c0fb73939e5a38b68b22152a4f3cc9"}], "stats": {"total": 170, "additions": 155, "deletions": 15}, "files": [{"sha": "dcf2335056bcda9e14c07835c908df0dab7a3738", "filename": "gcc/rtl-ssa/accesses.cc", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a/gcc%2Frtl-ssa%2Faccesses.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a/gcc%2Frtl-ssa%2Faccesses.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-ssa%2Faccesses.cc?ref=4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a", "patch": "@@ -393,6 +393,28 @@ set_node::print (pretty_printer *pp) const\n   pp_access (pp, first_def ());\n }\n \n+// See the comment above the declaration.\n+clobber_info *\n+clobber_group::prev_clobber (insn_info *insn) const\n+{\n+  auto &tree = const_cast<clobber_tree &> (m_clobber_tree);\n+  int comparison = lookup_clobber (tree, insn);\n+  if (comparison <= 0)\n+    return dyn_cast<clobber_info *> (tree.root ()->prev_def ());\n+  return tree.root ();\n+}\n+\n+// See the comment above the declaration.\n+clobber_info *\n+clobber_group::next_clobber (insn_info *insn) const\n+{\n+  auto &tree = const_cast<clobber_tree &> (m_clobber_tree);\n+  int comparison = lookup_clobber (tree, insn);\n+  if (comparison >= 0)\n+    return dyn_cast<clobber_info *> (tree.root ()->next_def ());\n+  return tree.root ();\n+}\n+\n // See the comment above the declaration.\n void\n clobber_group::print (pretty_printer *pp) const\n@@ -415,6 +437,32 @@ clobber_group::print (pretty_printer *pp) const\n   pp_indentation (pp) -= 4;\n }\n \n+// See the comment above the declaration.\n+def_info *\n+def_lookup::prev_def (insn_info *insn) const\n+{\n+  if (mux && comparison == 0)\n+    if (auto *node = mux.dyn_cast<def_node *> ())\n+      if (auto *group = dyn_cast<clobber_group *> (node))\n+\tif (clobber_info *clobber = group->prev_clobber (insn))\n+\t  return clobber;\n+\n+  return last_def_of_prev_group ();\n+}\n+\n+// See the comment above the declaration.\n+def_info *\n+def_lookup::next_def (insn_info *insn) const\n+{\n+  if (mux && comparison == 0)\n+    if (auto *node = mux.dyn_cast<def_node *> ())\n+      if (auto *group = dyn_cast<clobber_group *> (node))\n+\tif (clobber_info *clobber = group->next_clobber (insn))\n+\t  return clobber;\n+\n+  return first_def_of_next_group ();\n+}\n+\n // Return a clobber_group for CLOBBER, creating one if CLOBBER doesn't\n // already belong to a group.\n clobber_group *\n@@ -1299,9 +1347,9 @@ function_info::make_use_available (use_info *use, bb_info *bb,\n \t  input->m_is_temp = true;\n \t  phi->m_is_temp = true;\n \t  phi->make_degenerate (input);\n-\t  if (def_info *prev = dl.prev_def ())\n+\t  if (def_info *prev = dl.prev_def (phi_insn))\n \t    phi->set_prev_def (prev);\n-\t  if (def_info *next = dl.next_def ())\n+\t  if (def_info *next = dl.next_def (phi_insn))\n \t    phi->set_next_def (next);\n \t}\n "}, {"sha": "85c8b2cfdf3dabd56a101c6347aea4dc609a47e7", "filename": "gcc/rtl-ssa/accesses.h", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a/gcc%2Frtl-ssa%2Faccesses.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a/gcc%2Frtl-ssa%2Faccesses.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-ssa%2Faccesses.h?ref=4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a", "patch": "@@ -909,6 +909,12 @@ class clobber_group : public def_node\n   clobber_info *first_clobber () const;\n   clobber_info *last_clobber () const { return m_last_clobber; }\n \n+  // Return the last clobber before INSN in the group, or null if none.\n+  clobber_info *prev_clobber (insn_info *insn) const;\n+\n+  // Return the next clobber after INSN in the group, or null if none.\n+  clobber_info *next_clobber (insn_info *insn) const;\n+\n   // Return true if this group has been replaced by new clobber_groups.\n   bool has_been_superceded () const { return !m_last_clobber; }\n \n@@ -993,25 +999,33 @@ class def_lookup\n   //\n   // Otherwise, return the last definition that occurs before P,\n   // or null if none.\n-  def_info *prev_def () const;\n+  def_info *last_def_of_prev_group () const;\n \n   // If we found a clobber_group that spans P, return the definition\n   // that follows the end of the group, or null if none.\n   //\n   // Otherwise, return the first definition that occurs after P,\n   // or null if none.\n-  def_info *next_def () const;\n+  def_info *first_def_of_next_group () const;\n \n   // If we found a set_info at P, return that set_info, otherwise return null.\n   set_info *matching_set () const;\n \n   // If we found a set_info at P, return that set_info, otherwise return\n   // prev_def ().\n-  def_info *matching_or_prev_def () const;\n+  def_info *matching_set_or_last_def_of_prev_group () const;\n \n   // If we found a set_info at P, return that set_info, otherwise return\n   // next_def ().\n-  def_info *matching_or_next_def () const;\n+  def_info *matching_set_or_first_def_of_next_group () const;\n+\n+  // P is the location of INSN.  Return the last definition (of any kind)\n+  // that occurs before INSN, or null if none.\n+  def_info *prev_def (insn_info *insn) const;\n+\n+  // P is the location of INSN.  Return the next definition (of any kind)\n+  // that occurs after INSN, or null if none.\n+  def_info *next_def (insn_info *insn) const;\n \n   def_mux mux;\n   int comparison;"}, {"sha": "eea20b9c4c082375f77ed9cb7919c9aa85ed2ff7", "filename": "gcc/rtl-ssa/member-fns.inl", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a/gcc%2Frtl-ssa%2Fmember-fns.inl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a/gcc%2Frtl-ssa%2Fmember-fns.inl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-ssa%2Fmember-fns.inl?ref=4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a", "patch": "@@ -401,7 +401,7 @@ def_mux::set () const\n }\n \n inline def_info *\n-def_lookup::prev_def () const\n+def_lookup::last_def_of_prev_group () const\n {\n   if (!mux)\n     return nullptr;\n@@ -413,7 +413,7 @@ def_lookup::prev_def () const\n }\n \n inline def_info *\n-def_lookup::next_def () const\n+def_lookup::first_def_of_next_group () const\n {\n   if (!mux)\n     return nullptr;\n@@ -433,19 +433,19 @@ def_lookup::matching_set () const\n }\n \n inline def_info *\n-def_lookup::matching_or_prev_def () const\n+def_lookup::matching_set_or_last_def_of_prev_group () const\n {\n   if (set_info *set = matching_set ())\n     return set;\n-  return prev_def ();\n+  return last_def_of_prev_group ();\n }\n \n inline def_info *\n-def_lookup::matching_or_next_def () const\n+def_lookup::matching_set_or_first_def_of_next_group () const\n {\n   if (set_info *set = matching_set ())\n     return set;\n-  return next_def ();\n+  return first_def_of_next_group ();\n }\n \n inline insn_note::insn_note (insn_note_kind kind)"}, {"sha": "98a0ac3a5b9142bfa3d8af9e779b9e9283dd3a9f", "filename": "gcc/rtl-ssa/movement.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a/gcc%2Frtl-ssa%2Fmovement.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a/gcc%2Frtl-ssa%2Fmovement.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-ssa%2Fmovement.h?ref=4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a", "patch": "@@ -103,7 +103,7 @@ restrict_movement_for_dead_range (insn_range_info &move_range,\n   resource_info resource = full_register (regno);\n   def_lookup dl = crtl->ssa->find_def (resource, insn);\n \n-  def_info *prev = dl.prev_def ();\n+  def_info *prev = dl.last_def_of_prev_group ();\n   ebb_info *ebb = insn->ebb ();\n   if (!prev || prev->ebb () != ebb)\n     {\n@@ -143,8 +143,8 @@ restrict_movement_for_dead_range (insn_range_info &move_range,\n     }\n \n   // Stop the instruction moving beyond the next relevant definition of REGNO.\n-  def_info *next = first_def_ignoring (dl.matching_or_next_def (),\n-\t\t\t\t       ignore_clobbers::YES, ignore);\n+  def_info *next = dl.matching_set_or_first_def_of_next_group ();\n+  next = first_def_ignoring (next, ignore_clobbers::YES, ignore);\n   if (next)\n     move_range = move_earlier_than (move_range, next->insn ());\n "}, {"sha": "9a6ef88adbda41ffeddb2d1fc4d5f3abca43dcde", "filename": "gcc/testsuite/g++.dg/pr104869.C", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr104869.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr104869.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr104869.C?ref=4a3073f04e8b7987ad7bfe1bc23bfeb1d627ee6a", "patch": "@@ -0,0 +1,78 @@\n+// PR rtl-optimization/104869\n+// { dg-do run }\n+// { dg-options \"-O2 -fvisibility=hidden -std=c++11\" }\n+// { dg-require-visibility \"\" }\n+\n+struct QBasicAtomicInteger {\n+  [[gnu::noipa]] int loadRelaxed() { return 1; }\n+};\n+struct RefCount {\n+  bool deref() {\n+    int count = atomic.loadRelaxed();\n+    if (count)\n+      return false;\n+    return deref();\n+  }\n+  QBasicAtomicInteger atomic;\n+};\n+struct QArrayData {\n+  RefCount ref;\n+};\n+struct QString {\n+  ~QString();\n+  QArrayData d;\n+};\n+int ok;\n+QString::~QString() { d.ref.deref(); }\n+struct Label {\n+  bool isValid() { return generator; }\n+  int *generator;\n+  int index;\n+};\n+struct ControlFlow;\n+struct Codegen {\n+  [[gnu::noipa]] bool visit();\n+  ControlFlow *controlFlow;\n+};\n+struct ControlFlow {\n+  enum UnwindType { EE };\n+  struct UnwindTarget {\n+    Label linkLabel;\n+  };\n+  ControlFlow *parent;\n+  UnwindType unwindTarget_type;\n+  UnwindTarget unwindTarget() {\n+    QString label;\n+    ControlFlow *flow = this;\n+    while (flow) {\n+      Label l = getUnwindTarget(unwindTarget_type, label);\n+      if (l.isValid())\n+        return {l};\n+      flow = flow->parent;\n+    }\n+    return UnwindTarget();\n+  }\n+  [[gnu::noipa]] Label getUnwindTarget(UnwindType, QString &) {\n+    Label l = { &ok, 0 };\n+    return l;\n+  }\n+};\n+[[gnu::noipa]] void foo(int) {\n+  ok = 1;\n+}\n+[[gnu::noipa]] bool Codegen::visit() {\n+  if (!controlFlow)\n+    return false;\n+  ControlFlow::UnwindTarget target = controlFlow->unwindTarget();\n+  if (target.linkLabel.isValid())\n+    foo(2);\n+  return false;\n+}\n+int\n+main() {\n+  ControlFlow cf = { nullptr, ControlFlow::UnwindType::EE };\n+  Codegen c = { &cf };\n+  c.visit();\n+  if (!ok)\n+    __builtin_abort ();\n+}"}]}