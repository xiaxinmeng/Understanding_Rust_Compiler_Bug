{"sha": "0ab7816b23a53b7558deadf841591ef02e177685", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFiNzgxNmIyM2E1M2I3NTU4ZGVhZGY4NDE1OTFlZjAyZTE3NzY4NQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-09-17T10:12:06Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-09-17T10:12:06Z"}, "message": "resolve.c (resolve_fl_procedure): Allow private dummies for Fortran 2003.\n\n2007-09-17  Tobias Burnus  <burnus@net-b.de>\n\n\t* resolve.c (resolve_fl_procedure): Allow private dummies\n\tfor Fortran 2003.\n\n2007-09-17  Tobias Burnus  <burnus@net-b.de>\n\n\t* gfortran.dg/interface_15.f90: Compile with -std=f95.\n\t* gfortran.dg/private_type_1.f90: Ditto\n\t* gfortran.dg/interface_18.f90: New.\n\t* gfortran.dg/private_type_8.f90: New.\n\nFrom-SVN: r128541", "tree": {"sha": "56db3b58416c1136678431d5bd3e7a342b178613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56db3b58416c1136678431d5bd3e7a342b178613"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ab7816b23a53b7558deadf841591ef02e177685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab7816b23a53b7558deadf841591ef02e177685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ab7816b23a53b7558deadf841591ef02e177685", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab7816b23a53b7558deadf841591ef02e177685/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfcf0b12d158836cc29b0c373584a73dd7b68de8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfcf0b12d158836cc29b0c373584a73dd7b68de8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfcf0b12d158836cc29b0c373584a73dd7b68de8"}], "stats": {"total": 92, "additions": 76, "deletions": 16}, "files": [{"sha": "8d5bcfac932d19e323d53be479c773e7f144ce01", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab7816b23a53b7558deadf841591ef02e177685/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab7816b23a53b7558deadf841591ef02e177685/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0ab7816b23a53b7558deadf841591ef02e177685", "patch": "@@ -1,3 +1,8 @@\n+2007-09-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* resolve.c (resolve_fl_procedure): Allow private dummies\n+\tfor Fortran 2003.\n+\n 2007-09-17  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* trans-types.c (gfc_get_desc_dim_type): Do not to try"}, {"sha": "a2444a348946157c945d8c73333054a637b9a9d7", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab7816b23a53b7558deadf841591ef02e177685/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab7816b23a53b7558deadf841591ef02e177685/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=0ab7816b23a53b7558deadf841591ef02e177685", "patch": "@@ -6885,12 +6885,13 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t      && arg->sym->ts.type == BT_DERIVED\n \t      && !arg->sym->ts.derived->attr.use_assoc\n \t      && !gfc_check_access (arg->sym->ts.derived->attr.access,\n-\t\t\t\t    arg->sym->ts.derived->ns->default_access))\n+\t\t\t\t    arg->sym->ts.derived->ns->default_access)\n+\t      && gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: '%s' is of a \"\n+\t\t\t\t \"PRIVATE type and cannot be a dummy argument\"\n+\t\t\t\t \" of '%s', which is PUBLIC at %L\",\n+\t\t\t\t arg->sym->name, sym->name, &sym->declared_at)\n+\t\t == FAILURE)\n \t    {\n-\t      gfc_error_now (\"'%s' is of a PRIVATE type and cannot be \"\n-\t\t\t     \"a dummy argument of '%s', which is \"\n-\t\t\t     \"PUBLIC at %L\", arg->sym->name, sym->name,\n-\t\t\t     &sym->declared_at);\n \t      /* Stop this message from recurring.  */\n \t      arg->sym->ts.derived->attr.access = ACCESS_PUBLIC;\n \t      return FAILURE;\n@@ -6907,12 +6908,14 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t\t  && arg->sym->ts.type == BT_DERIVED\n \t\t  && !arg->sym->ts.derived->attr.use_assoc\n \t\t  && !gfc_check_access (arg->sym->ts.derived->attr.access,\n-\t\t\t\t\targ->sym->ts.derived->ns->default_access))\n+\t\t\t\t\targ->sym->ts.derived->ns->default_access)\n+\t\t  && gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: Procedure \"\n+\t\t\t\t     \"'%s' in PUBLIC interface '%s' at %L \"\n+\t\t\t\t     \"takes dummy arguments of '%s' which is \"\n+\t\t\t\t     \"PRIVATE\", iface->sym->name, sym->name,\n+\t\t\t\t     &iface->sym->declared_at,\n+\t\t\t\t     gfc_typename (&arg->sym->ts)) == FAILURE)\n \t\t{\n-\t\t  gfc_error_now (\"Procedure '%s' in PUBLIC interface '%s' at %L takes \"\n-\t\t\t\t \"dummy arguments of '%s' which is PRIVATE\",\n-\t\t\t\t iface->sym->name, sym->name, &iface->sym->declared_at,\n-\t\t\t\t gfc_typename(&arg->sym->ts));\n \t\t  /* Stop this message from recurring.  */\n \t\t  arg->sym->ts.derived->attr.access = ACCESS_PUBLIC;\n \t\t  return FAILURE;\n@@ -6930,12 +6933,14 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n \t\t  && arg->sym->ts.type == BT_DERIVED\n \t\t  && !arg->sym->ts.derived->attr.use_assoc\n \t\t  && !gfc_check_access (arg->sym->ts.derived->attr.access,\n-\t\t\t\t\targ->sym->ts.derived->ns->default_access))\n+\t\t\t\t\targ->sym->ts.derived->ns->default_access)\n+\t\t  && gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: Procedure \"\n+\t\t\t\t     \"'%s' in PUBLIC interface '%s' at %L \"\n+\t\t\t\t     \"takes dummy arguments of '%s' which is \"\n+\t\t\t\t     \"PRIVATE\", iface->sym->name, sym->name,\n+\t\t\t\t     &iface->sym->declared_at,\n+\t\t\t\t     gfc_typename (&arg->sym->ts)) == FAILURE)\n \t\t{\n-\t\t  gfc_error_now (\"Procedure '%s' in PUBLIC interface '%s' at %L takes \"\n-\t\t\t\t \"dummy arguments of '%s' which is PRIVATE\",\n-\t\t\t\t iface->sym->name, sym->name, &iface->sym->declared_at,\n-\t\t\t\t gfc_typename(&arg->sym->ts));\n \t\t  /* Stop this message from recurring.  */\n \t\t  arg->sym->ts.derived->attr.access = ACCESS_PUBLIC;\n \t\t  return FAILURE;"}, {"sha": "94285578b5cea11a500f4836cb3cd2a7d349a84a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab7816b23a53b7558deadf841591ef02e177685/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab7816b23a53b7558deadf841591ef02e177685/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ab7816b23a53b7558deadf841591ef02e177685", "patch": "@@ -1,3 +1,10 @@\n+2007-09-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/interface_15.f90: Compile with -std=f95.\n+\t* gfortran.dg/private_type_1.f90: Ditto\n+\t* gfortran.dg/interface_18.f90: New.\n+\t* gfortran.dg/private_type_8.f90: New.\n+\n 2007-09-16  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/33124"}, {"sha": "15f4298390e945e1a7f508a479d6d31bc5e346cd", "filename": "gcc/testsuite/gfortran.dg/interface_15.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab7816b23a53b7558deadf841591ef02e177685/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab7816b23a53b7558deadf841591ef02e177685/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_15.f90?ref=0ab7816b23a53b7558deadf841591ef02e177685", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-c\" }\n+! { dg-options \"-c -std=f95\" }\n ! Testcase from PR fortran/25094\n ! Contributed by Joost VandeVondele <jv244@cam.ac.uk>\n "}, {"sha": "d0a54754883bdcfda0589b5ae7cee798ede6136e", "filename": "gcc/testsuite/gfortran.dg/interface_18.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab7816b23a53b7558deadf841591ef02e177685/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab7816b23a53b7558deadf841591ef02e177685/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_18.f90?ref=0ab7816b23a53b7558deadf841591ef02e177685", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n+! Public procedures with private types for the dummies\n+! is valid F2003, but invalid per Fortran 95, Sect. 5.2.3\n+! See interface_15.f90 for the F95 test case.\n+!\n+   module mytype_application\n+     implicit none\n+     private\n+     public :: mytype_test\n+     type :: mytype_type\n+       integer :: i=0\n+     end type mytype_type\n+   contains\n+     subroutine mytype_test( mytype )\n+       type(mytype_type), intent(in out) :: mytype\n+     end subroutine mytype_test\n+   end module mytype_application \n+\n+! { dg-final { cleanup-modules \"mytype_application\" } }"}, {"sha": "b6e915104b95a9a8a40e4c7c84bfc2e3590869ea", "filename": "gcc/testsuite/gfortran.dg/private_type_1.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab7816b23a53b7558deadf841591ef02e177685/gcc%2Ftestsuite%2Fgfortran.dg%2Fprivate_type_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab7816b23a53b7558deadf841591ef02e177685/gcc%2Ftestsuite%2Fgfortran.dg%2Fprivate_type_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fprivate_type_1.f90?ref=0ab7816b23a53b7558deadf841591ef02e177685", "patch": "@@ -1,4 +1,5 @@\n ! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n ! PR21986 - test based on original example.\n ! A public subroutine must not have private-type, dummy arguments.\n ! Contributed by Paul Thomas <pault@gcc.gnu.org>"}, {"sha": "df1609646cfa3e2788435dd3b1a6bef2ad0f1a75", "filename": "gcc/testsuite/gfortran.dg/private_type_8.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab7816b23a53b7558deadf841591ef02e177685/gcc%2Ftestsuite%2Fgfortran.dg%2Fprivate_type_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab7816b23a53b7558deadf841591ef02e177685/gcc%2Ftestsuite%2Fgfortran.dg%2Fprivate_type_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fprivate_type_8.f90?ref=0ab7816b23a53b7558deadf841591ef02e177685", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+! A public subroutine can have private-type, dummy arguments\n+! in Fortran 2003 (but not in Fortran 95).\n+! See private_type_1.f90 for the F95 test.\n+!\n+module modboom\n+  implicit none\n+  private\n+  public:: dummysub\n+  type:: intwrapper\n+    integer n\n+  end type intwrapper\n+contains\n+  subroutine dummysub(size, arg_array)\n+   type(intwrapper) :: size\n+   real, dimension(size%n) :: arg_array\n+   real :: local_array(4)\n+  end subroutine dummysub\n+end module modboom\n+\n+! { dg-final { cleanup-modules \"modboom\" } }"}]}