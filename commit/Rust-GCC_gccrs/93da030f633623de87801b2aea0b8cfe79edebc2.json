{"sha": "93da030f633623de87801b2aea0b8cfe79edebc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNkYTAzMGY2MzM2MjNkZTg3ODAxYjJhZWEwYjhjZmU3OWVkZWJjMg==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-04-29T13:53:20Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-04-29T13:53:20Z"}, "message": "sched.c (new_insn_dead_notes): Check if the register was used in the original instruction.\n\n\t* sched.c (new_insn_dead_notes): Check if the register was\n\tused in the original instruction.\n\t* haifa-sched.c (new_insn_dead_notes): Likewise.\n\nFrom-SVN: r19494", "tree": {"sha": "1f31fde3493a2484bb977cf52131e3ece99e3543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f31fde3493a2484bb977cf52131e3ece99e3543"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93da030f633623de87801b2aea0b8cfe79edebc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93da030f633623de87801b2aea0b8cfe79edebc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93da030f633623de87801b2aea0b8cfe79edebc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93da030f633623de87801b2aea0b8cfe79edebc2/comments", "author": null, "committer": null, "parents": [{"sha": "0c84c6183433da16ca1062e0accb15b5f3abd664", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c84c6183433da16ca1062e0accb15b5f3abd664", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c84c6183433da16ca1062e0accb15b5f3abd664"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "b0c68c2b96790d4b144870bb567ba2b2c8fdc6b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93da030f633623de87801b2aea0b8cfe79edebc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93da030f633623de87801b2aea0b8cfe79edebc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93da030f633623de87801b2aea0b8cfe79edebc2", "patch": "@@ -1,3 +1,9 @@\n+Wed Apr 29 21:45:16 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* sched.c (new_insn_dead_notes): Check if the register was\n+\tused in the original instruction.\n+\t* haifa-sched.c (new_insn_dead_notes): Likewise.\n+\n Wed Apr 29 13:46:03 1998  Jim Wilson  <wilson@cygnus.com>\n \n \t* dwarf2out.c (scope_die_for): If could not find proper scope,"}, {"sha": "7fccfd2be7935495c0e0b8ca9f44e75a7419aafa", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93da030f633623de87801b2aea0b8cfe79edebc2/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93da030f633623de87801b2aea0b8cfe79edebc2/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=93da030f633623de87801b2aea0b8cfe79edebc2", "patch": "@@ -7621,6 +7621,13 @@ new_insn_dead_notes (pat, insn, last, orig_insn)\n \n   if (GET_CODE (dest) == REG)\n     {\n+      /* If the original insn already used this register, we may not add new\n+         notes for it.  One example for a split that needs this test is\n+\t when a multi-word memory access with register-indirect addressing\n+\t is split into multiple memory accesses with auto-increment and\n+\t one adjusting add instruction for the address register.  */\n+      if (reg_referenced_p (dest, PATTERN (orig_insn)))\n+\treturn;\n       for (tem = last; tem != insn; tem = PREV_INSN (tem))\n \t{\n \t  if (GET_RTX_CLASS (GET_CODE (tem)) == 'i'"}, {"sha": "635dceba09d401fa8ef65fe541ff27b5012ffa92", "filename": "gcc/sched.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93da030f633623de87801b2aea0b8cfe79edebc2/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93da030f633623de87801b2aea0b8cfe79edebc2/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=93da030f633623de87801b2aea0b8cfe79edebc2", "patch": "@@ -3655,6 +3655,13 @@ new_insn_dead_notes (pat, insn, last, orig_insn)\n \n   if (GET_CODE (dest) == REG)\n     {\n+      /* If the original insn already used this register, we may not add new\n+         notes for it.  One example for a split that needs this test is\n+\t when a multi-word memory access with register-indirect addressing\n+\t is split into multiple memory accesses with auto-increment and\n+\t one adjusting add instruction for the address register.  */\n+      if (reg_referenced_p (dest, PATTERN (orig_insn)))\n+\treturn;\n       for (tem = last; tem != insn; tem = PREV_INSN (tem))\n \t{\n \t  if (GET_RTX_CLASS (GET_CODE (tem)) == 'i'"}]}