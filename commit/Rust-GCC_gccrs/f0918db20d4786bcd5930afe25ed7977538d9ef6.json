{"sha": "f0918db20d4786bcd5930afe25ed7977538d9ef6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA5MThkYjIwZDQ3ODZiY2Q1OTMwYWZlMjVlZDc5Nzc1MzhkOWVmNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-22T03:39:43Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-22T03:39:43Z"}, "message": "(ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL): Use SIZE, not ROUNDED.\n\n(FUNCTION_PROLOGUE, FUNCTION_EPILOGUE): Definitions turned off.\n(REGISTER_PREFIX, IMMEDIATE_PREFIX): New definitions.\n(PARM_BOUNDARY): New definition.\n\nFrom-SVN: r6137", "tree": {"sha": "e6f528924dbbf01954009dbe4be52ce3d5b59622", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6f528924dbbf01954009dbe4be52ce3d5b59622"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0918db20d4786bcd5930afe25ed7977538d9ef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0918db20d4786bcd5930afe25ed7977538d9ef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0918db20d4786bcd5930afe25ed7977538d9ef6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0918db20d4786bcd5930afe25ed7977538d9ef6/comments", "author": null, "committer": null, "parents": [{"sha": "0c8ae3d30b985b3ceec0650ae4ebd33d474c60b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c8ae3d30b985b3ceec0650ae4ebd33d474c60b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c8ae3d30b985b3ceec0650ae4ebd33d474c60b2"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "a3fbd7e5fbd705e63e6e878bc37a57febe29958c", "filename": "gcc/config/m68k/mot3300.h", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0918db20d4786bcd5930afe25ed7977538d9ef6/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0918db20d4786bcd5930afe25ed7977538d9ef6/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fmot3300.h?ref=f0918db20d4786bcd5930afe25ed7977538d9ef6", "patch": "@@ -71,6 +71,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* Every structure or union's size must be a multiple of 2 bytes.  */\n \n #define STRUCTURE_SIZE_BOUNDARY 16\n+  \n+/* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n+/* Be compatible with native compiler.  */\n+#undef PARM_BOUNDARY\n+#define PARM_BOUNDARY 16\n \n /* cpp has to support a #sccs directive for the /usr/include files */\n \n@@ -80,12 +85,19 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #define SDB_DEBUGGING_INFO\n \n+#undef REGISTER_PREFIX\n+#define REGISTER_PREFIX \"%\"\n+\n+#undef IMMEDIATE_PREFIX\n+#define IMMEDIATE_PREFIX \"&\"\n+\n #undef REGISTER_NAMES\n #define REGISTER_NAMES \\\n {\"%d0\", \"%d1\", \"%d2\", \"%d3\", \"%d4\", \"%d5\", \"%d6\", \"%d7\",\t\\\n  \"%a0\", \"%a1\", \"%a2\", \"%a3\", \"%a4\", \"%a5\", \"%fp\", \"%sp\",\t\\\n  \"%fp0\", \"%fp1\", \"%fp2\", \"%fp3\", \"%fp4\", \"%fp5\", \"%fp6\", \"%fp7\"}\n \n+#if 0 /* phdm@info.ucl.ac.be says the standard ones work.  */\n #undef FUNCTION_PROLOGUE\n #define FUNCTION_PROLOGUE(FILE, SIZE)     \\\n { register int regno;\t\t\t\t\t\t\\\n@@ -113,11 +125,13 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n   if (exact_log2 (mask) >= 0)\t\t\t\t\t\\\n     fprintf (FILE, \"\\tmov.l %s,-(%%sp)\\n\", reg_names[15 - exact_log2 (mask)]);  \\\n   else if (mask) fprintf (FILE, \"\\tmovm.l &0x%x,-(%%sp)\\n\", mask); }\n+#endif /* 0 */\n \n #undef FUNCTION_PROFILER\n #define FUNCTION_PROFILER(FILE, LABEL_NO)\t\\\n     fprintf (FILE, \"\\tmov.l &LP%%%d,%%a0\\n\\tjsr mcount%%\\n\", (LABEL_NO))\n \n+#if 0 /* phdm@info.ucl.ac.be says the standard ones work.  */\n #undef FUNCTION_EPILOGUE\n #define FUNCTION_EPILOGUE(FILE, SIZE) \\\n { register int regno;\t\t\t\t\t\t\\\n@@ -174,6 +188,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n   if (current_function_pops_args)\t\t\t\t\\\n     fprintf (FILE, \"\\trtd &%d\\n\", current_function_pops_args);\t\\\n   else fprintf (FILE, \"\\trts\\n\"); }\n+#endif /* 0 */\n \n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */\n@@ -220,6 +235,7 @@ output_file_directive ((FILE), main_input_filename)\n #undef CPP_PREDEFINES\n #define CPP_PREDEFINES \"-Dm68k -Dunix -DsysV68 -D__motorola__ -Asystem(unix) -Asystem(svr3) -Acpu(m68k) -Amachine(m68k)\"\n \n+#if 0 /* phdm@info.ucl.ac.be says the right way is with PARM_BOUNDARY.  */\n /* Specify how to pad function arguments.\n    Value should be `upward', `downward' or `none'.\n    Same as the default, except no padding for large or variable-size args.  */\n@@ -230,6 +246,7 @@ output_file_directive ((FILE), main_input_filename)\n        && int_size_in_bytes (TYPE) < PARM_BOUNDARY / BITS_PER_UNIT)\t\\\n     : GET_MODE_BITSIZE (MODE) < PARM_BOUNDARY)\t\t\t\t\\\n    ? downward : none)\n+#endif /* 0 */\n \n /* Override part of the obstack macros.  */\n \n@@ -735,14 +752,16 @@ int switch_table_difference_label_flag;\n       fprintf ((FILE), \"jmp 8(\"); }\t\t\t\\\n }\n \n+/* phdm@info.ucl.ac.be says to pass SIZE, not ROUNDED.  */\n+\n /* This says how to output an assembler line\n    to define a global common symbol.  */\n \n #undef ASM_OUTPUT_COMMON\n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\"\\tcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",%u\\n\", (SIZE)))\n \n /* This says how to output an assembler line\n    to define a local common symbol.  */\n@@ -751,7 +770,7 @@ int switch_table_difference_label_flag;\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\"\\tlcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",%u\\n\", (SIZE)))\n \n \f\n /* Override usual definitions of SDB output macros."}]}