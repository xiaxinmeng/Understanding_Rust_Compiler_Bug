{"sha": "eedafec2f2dc0fb189752663de80b95e27ed84b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVkYWZlYzJmMmRjMGZiMTg5NzUyNjYzZGU4MGI5NWUyN2VkODRiMw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-03-18T19:26:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-11T09:53:54Z"}, "message": "[Ada] Make libgnat/a-nbnbin__gmp.adb compile\n\n2020-06-11  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/a-nbnbin__gmp.adb: There's no Optional_Big_Integer\n\tanymore.  Invalid_Big_Integer is not used.\n\tGreatest_Common_Divisor returns Big_Positive.", "tree": {"sha": "a3deaf1f11e72004839b9e95d1ca47f9db45662c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3deaf1f11e72004839b9e95d1ca47f9db45662c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eedafec2f2dc0fb189752663de80b95e27ed84b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eedafec2f2dc0fb189752663de80b95e27ed84b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eedafec2f2dc0fb189752663de80b95e27ed84b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eedafec2f2dc0fb189752663de80b95e27ed84b3/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bfa32f922bc432fce94283661e15079d389c515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bfa32f922bc432fce94283661e15079d389c515", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bfa32f922bc432fce94283661e15079d389c515"}], "stats": {"total": 53, "additions": 23, "deletions": 30}, "files": [{"sha": "5695bc1ff0a4966adf26c8ffb0a0a59cdf214ee1", "filename": "gcc/ada/libgnat/a-nbnbin__gmp.adb", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedafec2f2dc0fb189752663de80b95e27ed84b3/gcc%2Fada%2Flibgnat%2Fa-nbnbin__gmp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedafec2f2dc0fb189752663de80b95e27ed84b3/gcc%2Fada%2Flibgnat%2Fa-nbnbin__gmp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbin__gmp.adb?ref=eedafec2f2dc0fb189752663de80b95e27ed84b3", "patch": "@@ -56,16 +56,16 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    function To_Address is new\n      Ada.Unchecked_Conversion (mpz_t_ptr, System.Address);\n \n-   function Get_Mpz (Arg : Optional_Big_Integer) return mpz_t_ptr is\n+   function Get_Mpz (Arg : Big_Integer) return mpz_t_ptr is\n      (To_Mpz (Arg.Value.C));\n    --  Return the mpz_t value stored in Arg\n \n-   procedure Set_Mpz (Arg : in out Optional_Big_Integer; Value : mpz_t_ptr)\n+   procedure Set_Mpz (Arg : in out Big_Integer; Value : mpz_t_ptr)\n      with Inline;\n    --  Set the mpz_t value stored in Arg to Value\n \n-   procedure Allocate (This : in out Optional_Big_Integer) with Inline;\n-   --  Allocate an Optional_Big_Integer, including the underlying mpz\n+   procedure Allocate (This : in out Big_Integer) with Inline;\n+   --  Allocate a Big_Integer, including the underlying mpz\n \n    procedure mpz_init_set (ROP : access mpz_t;  OP : access constant mpz_t);\n    pragma Import (C, mpz_init_set, \"__gmpz_init_set\");\n@@ -102,7 +102,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- Set_Mpz --\n    -------------\n \n-   procedure Set_Mpz (Arg : in out Optional_Big_Integer; Value : mpz_t_ptr) is\n+   procedure Set_Mpz (Arg : in out Big_Integer; Value : mpz_t_ptr) is\n    begin\n       Arg.Value.C := To_Address (Value);\n    end Set_Mpz;\n@@ -111,16 +111,9 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- Is_Valid --\n    --------------\n \n-   function Is_Valid (Arg : Optional_Big_Integer) return Boolean is\n+   function Is_Valid (Arg : Big_Integer) return Boolean is\n      (Arg.Value.C /= System.Null_Address);\n \n-   --------------------------\n-   -- Invalid_Big_Integer --\n-   --------------------------\n-\n-   function Invalid_Big_Integer return Optional_Big_Integer is\n-     (Value => (Ada.Finalization.Controlled with C => System.Null_Address));\n-\n    ---------\n    -- \"=\" --\n    ---------\n@@ -171,7 +164,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    --------------------\n \n    function To_Big_Integer (Arg : Integer) return Big_Integer is\n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       Allocate (Result);\n       mpz_set_si (Get_Mpz (Result), long (Arg));\n@@ -198,7 +191,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n       --------------------\n \n       function To_Big_Integer (Arg : Int) return Big_Integer is\n-         Result : Optional_Big_Integer;\n+         Result : Big_Integer;\n       begin\n          Allocate (Result);\n          mpz_set_si (Get_Mpz (Result), long (Arg));\n@@ -227,7 +220,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n       --------------------\n \n       function To_Big_Integer (Arg : Int) return Big_Integer is\n-         Result : Optional_Big_Integer;\n+         Result : Big_Integer;\n       begin\n          Allocate (Result);\n          mpz_set_ui (Get_Mpz (Result), unsigned_long (Arg));\n@@ -342,7 +335,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n          base : Integer := 10) return Integer;\n       pragma Import (C, mpz_set_str, \"__gmpz_set_str\");\n \n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n       First  : Natural;\n       Last   : Natural;\n       Base   : Natural;\n@@ -422,7 +415,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    ---------\n \n    function \"+\" (L : Big_Integer) return Big_Integer is\n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       Set_Mpz (Result, new mpz_t);\n       mpz_init_set (Get_Mpz (Result), Get_Mpz (L));\n@@ -434,7 +427,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    ---------\n \n    function \"-\" (L : Big_Integer) return Big_Integer is\n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       Allocate (Result);\n       mpz_neg (Get_Mpz (Result), Get_Mpz (L));\n@@ -449,7 +442,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n       procedure mpz_abs (ROP : access mpz_t;  OP : access constant mpz_t);\n       pragma Import (C, mpz_abs, \"__gmpz_abs\");\n \n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       Allocate (Result);\n       mpz_abs (Get_Mpz (Result), Get_Mpz (L));\n@@ -465,7 +458,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n         (ROP : access mpz_t;  OP1, OP2 : access constant mpz_t);\n       pragma Import (C, mpz_add, \"__gmpz_add\");\n \n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n \n    begin\n       Allocate (Result);\n@@ -478,7 +471,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    ---------\n \n    function \"-\" (L, R : Big_Integer) return Big_Integer is\n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n    begin\n       Allocate (Result);\n       mpz_sub (Get_Mpz (Result), Get_Mpz (L), Get_Mpz (R));\n@@ -494,7 +487,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n         (ROP : access mpz_t;  OP1, OP2 : access constant mpz_t);\n       pragma Import (C, mpz_mul, \"__gmpz_mul\");\n \n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n \n    begin\n       Allocate (Result);\n@@ -515,7 +508,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n       end if;\n \n       declare\n-         Result : Optional_Big_Integer;\n+         Result : Big_Integer;\n       begin\n          Allocate (Result);\n          mpz_tdiv_q (Get_Mpz (Result), Get_Mpz (L), Get_Mpz (R));\n@@ -540,7 +533,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n       end if;\n \n       declare\n-         Result : Optional_Big_Integer;\n+         Result : Big_Integer;\n       begin\n          Allocate (Result);\n          L_Negative := mpz_cmp_ui (Get_Mpz (L), 0) < 0;\n@@ -620,7 +613,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n       end if;\n \n       declare\n-         Result : Optional_Big_Integer;\n+         Result : Big_Integer;\n       begin\n          Allocate (Result);\n          mpz_tdiv_r (R => Get_Mpz (Result),\n@@ -642,7 +635,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n                             EXP : unsigned_long);\n       pragma Import (C, mpz_pow_ui, \"__gmpz_pow_ui\");\n \n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n \n    begin\n       Allocate (Result);\n@@ -668,12 +661,12 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- Greatest_Common_Divisor --\n    -----------------------------\n \n-   function Greatest_Common_Divisor (L, R : Big_Integer) return Big_Integer is\n+   function Greatest_Common_Divisor (L, R : Big_Integer) return Big_Positive is\n       procedure mpz_gcd\n         (ROP : access mpz_t;  Op1, Op2 : access constant mpz_t);\n       pragma Import (C, mpz_gcd, \"__gmpz_gcd\");\n \n-      Result : Optional_Big_Integer;\n+      Result : Big_Integer;\n \n    begin\n       Allocate (Result);\n@@ -685,7 +678,7 @@ package body Ada.Numerics.Big_Numbers.Big_Integers is\n    -- Allocate --\n    --------------\n \n-   procedure Allocate (This : in out Optional_Big_Integer) is\n+   procedure Allocate (This : in out Big_Integer) is\n       procedure mpz_init (this : access mpz_t);\n       pragma Import (C, mpz_init, \"__gmpz_init\");\n    begin"}]}