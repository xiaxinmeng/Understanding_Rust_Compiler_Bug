{"sha": "b30f86de98a05244dbe3bf57f6afd170f2421f23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMwZjg2ZGU5OGEwNTI0NGRiZTNiZjU3ZjZhZmQxNzBmMjQyMWYyMw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-05-23T10:23:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-23T10:23:29Z"}, "message": "[Ada] Implementation of AI12-0131: legality of class-wide precondition\n\nThis patch refines the legality check on a class-wide precondition on a type\nextension when ancestor does not have a class-wide precondition. Previously the\ncompiler accepted such a precondition when the ancestor had a class-wide\npostcondition.\n\nCompiling pck.ads must yield:\n\n  pck.ads:7:04: illegal class-wide precondition on overriding operation\n\n----\npackage Pck is\n   type Parent is tagged null record;\n   procedure Init (P : Parent) with Post'Class => True;\n\n   type Child is new Parent with null record;\n   overriding procedure Init (C : Child) with\n   Pre'Class => True;\nend Pck;\n\n2018-05-23  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_prag.adb (Inherit_Class_Wide_Pre): Refine legality check on\n\tclass-wide precondition on a type extension when ancestor does not have\n\ta class-wide precondition.  Previously the compiler accepted such a\n\tprecondition when the ancestor had a class-wide postcondition.\n\nFrom-SVN: r260592", "tree": {"sha": "0b2984aa4e45544a09aff85097c0e32994bb0e3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b2984aa4e45544a09aff85097c0e32994bb0e3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b30f86de98a05244dbe3bf57f6afd170f2421f23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b30f86de98a05244dbe3bf57f6afd170f2421f23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b30f86de98a05244dbe3bf57f6afd170f2421f23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b30f86de98a05244dbe3bf57f6afd170f2421f23/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "026733d84e1f13ec9fdfc124d5d727fcce64e91c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/026733d84e1f13ec9fdfc124d5d727fcce64e91c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/026733d84e1f13ec9fdfc124d5d727fcce64e91c"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "1a4e63e65aba61904a1b6089e825ef64eb23b38b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30f86de98a05244dbe3bf57f6afd170f2421f23/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30f86de98a05244dbe3bf57f6afd170f2421f23/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b30f86de98a05244dbe3bf57f6afd170f2421f23", "patch": "@@ -1,3 +1,10 @@\n+2018-05-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Inherit_Class_Wide_Pre): Refine legality check on\n+\tclass-wide precondition on a type extension when ancestor does not have\n+\ta class-wide precondition.  Previously the compiler accepted such a\n+\tprecondition when the ancestor had a class-wide postcondition.\n+\n 2018-05-23  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_attr.adb (Valid_Scalars): Do not invoke Error_Attr_P to report"}, {"sha": "21ef6cb8c5beec6b9b0e76905e697bb83c6ac9af", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30f86de98a05244dbe3bf57f6afd170f2421f23/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30f86de98a05244dbe3bf57f6afd170f2421f23/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=b30f86de98a05244dbe3bf57f6afd170f2421f23", "patch": "@@ -4444,7 +4444,9 @@ package body Sem_Prag is\n                if Present (Cont) then\n                   Prag := Pre_Post_Conditions (Cont);\n                   while Present (Prag) loop\n-                     if Class_Present (Prag) then\n+                     if Pragma_Name (Prag) = Name_Precondition\n+                       and then Class_Present (Prag)\n+                     then\n                         return True;\n                      end if;\n "}]}