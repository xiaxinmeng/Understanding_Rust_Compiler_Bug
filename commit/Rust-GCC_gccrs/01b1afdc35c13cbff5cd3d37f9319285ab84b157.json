{"sha": "01b1afdc35c13cbff5cd3d37f9319285ab84b157", "node_id": "C_kwDOANBUbNoAKDAxYjFhZmRjMzVjMTNjYmZmNWNkM2QzN2Y5MzE5Mjg1YWI4NGIxNTc", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2021-01-28T21:23:28Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2022-08-08T18:11:59Z"}, "message": "libstdc++: [_GLIBCXX_DEBUG] Do not consider detached iterators as value-initialized\n\nAn attach iterator has its _M_version set to something != 0, the container version. This\nvalue shall be preserved when detaching it so that the iterator does not look like a\nvalue-initialized one.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/debug/formatter.h (__singular_value_init): New _Iterator_state enum entry.\n\t(_Parameter<>(const _Safe_iterator<>&, const char*, _Is_iterator)): Check if iterator\n\tparameter is value-initialized.\n\t(_Parameter<>(const _Safe_local_iterator<>&, const char*, _Is_iterator)): Likewise.\n\t* include/debug/safe_iterator.h (_Safe_iterator<>::_M_value_initialized()): New. Adapt\n\tchecks.\n\t* include/debug/safe_local_iterator.h (_Safe_local_iterator<>::_M_value_initialized()): New.\n\tAdapt checks.\n\t* src/c++11/debug.cc (_Safe_iterator_base::_M_reset): Do not reset _M_version.\n\t(print_field(PrintContext&, const _Parameter&, const char*)): Adapt state_names.\n\t* testsuite/23_containers/deque/debug/iterator1_neg.cc: New test.\n\t* testsuite/23_containers/deque/debug/iterator2_neg.cc: New test.\n\t* testsuite/23_containers/forward_list/debug/iterator1_neg.cc: New test.\n\t* testsuite/23_containers/forward_list/debug/iterator2_neg.cc: New test.\n\t* testsuite/23_containers/forward_list/debug/iterator3_neg.cc: New test.", "tree": {"sha": "a8a490f0aab53b1d8c94b6366e7b1fd1fe114576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8a490f0aab53b1d8c94b6366e7b1fd1fe114576"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01b1afdc35c13cbff5cd3d37f9319285ab84b157", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b1afdc35c13cbff5cd3d37f9319285ab84b157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01b1afdc35c13cbff5cd3d37f9319285ab84b157", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b1afdc35c13cbff5cd3d37f9319285ab84b157/comments", "author": null, "committer": null, "parents": [{"sha": "21c7aab09805d0c8c7695c8a69c8715d673a739a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c7aab09805d0c8c7695c8a69c8715d673a739a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c7aab09805d0c8c7695c8a69c8715d673a739a"}], "stats": {"total": 259, "additions": 241, "deletions": 18}, "files": [{"sha": "748d4fbfea45c18290ac49a9b506ec85640e8415", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=01b1afdc35c13cbff5cd3d37f9319285ab84b157", "patch": "@@ -185,6 +185,7 @@ namespace __gnu_debug\n       __rbegin,\t\t// dereferenceable, and at the reverse-beginning\n       __rmiddle,\t// reverse-dereferenceable, not at the reverse-beginning\n       __rend,\t\t// reverse-past-the-end\n+      __singular_value_init,\t// singular, value initialized\n       __last_state\n     };\n \n@@ -280,7 +281,12 @@ namespace __gnu_debug\n \t  _M_variant._M_iterator._M_seq_type = _GLIBCXX_TYPEID(_Sequence);\n \n \t  if (__it._M_singular())\n-\t    _M_variant._M_iterator._M_state = __singular;\n+\t    {\n+\t      if (__it._M_value_initialized())\n+\t\t_M_variant._M_iterator._M_state = __singular_value_init;\n+\t      else\n+\t\t_M_variant._M_iterator._M_state = __singular;\n+\t    }\n \t  else\n \t    {\n \t      if (__it._M_is_before_begin())\n@@ -308,7 +314,12 @@ namespace __gnu_debug\n \t  _M_variant._M_iterator._M_seq_type = _GLIBCXX_TYPEID(_Sequence);\n \n \t  if (__it._M_singular())\n-\t    _M_variant._M_iterator._M_state = __singular;\n+\t    {\n+\t      if (__it._M_value_initialized())\n+\t\t_M_variant._M_iterator._M_state = __singular_value_init;\n+\t      else\n+\t\t_M_variant._M_iterator._M_state = __singular;\n+\t    }\n \t  else\n \t    {\n \t      if (__it._M_is_end())"}, {"sha": "33f7a86478ad997a09c2b5ddd59bcbf55795ff2e", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=01b1afdc35c13cbff5cd3d37f9319285ab84b157", "patch": "@@ -41,8 +41,8 @@\n \n #define _GLIBCXX_DEBUG_VERIFY_OPERANDS(_Lhs, _Rhs, _BadMsgId, _DiffMsgId) \\\n   _GLIBCXX_DEBUG_VERIFY(!_Lhs._M_singular() && !_Rhs._M_singular()\t\\\n-\t\t\t|| (_Lhs.base() == _Iterator()\t\t\t\\\n-\t\t\t    && _Rhs.base() == _Iterator()),\t\t\\\n+\t\t\t|| (_Lhs._M_value_initialized()\t\t\t\\\n+\t\t\t    && _Rhs._M_value_initialized()),\t\t\\\n \t\t\t_M_message(_BadMsgId)\t\t\t\t\\\n \t\t\t._M_iterator(_Lhs, #_Lhs)\t\t\t\\\n \t\t\t._M_iterator(_Rhs, #_Rhs));\t\t\t\\\n@@ -177,7 +177,7 @@ namespace __gnu_debug\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// DR 408. Is vector<reverse_iterator<char*> > forbidden?\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t      || __x.base() == _Iterator(),\n+\t\t\t      || __x._M_value_initialized(),\n \t\t\t      _M_message(__msg_init_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n@@ -193,7 +193,7 @@ namespace __gnu_debug\n       : _Iter_base()\n       {\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t      || __x.base() == _Iterator(),\n+\t\t\t      || __x._M_value_initialized(),\n \t\t\t      _M_message(__msg_init_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n@@ -220,7 +220,7 @@ namespace __gnu_debug\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // DR 408. Is vector<reverse_iterator<char*> > forbidden?\n \t  _GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t\t|| __x.base() == _MutableIterator(),\n+\t\t\t\t|| __x._M_value_initialized(),\n \t\t\t\t_M_message(__msg_init_const_singular)\n \t\t\t\t._M_iterator(*this, \"this\")\n \t\t\t\t._M_iterator(__x, \"other\"));\n@@ -236,7 +236,7 @@ namespace __gnu_debug\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// DR 408. Is vector<reverse_iterator<char*> > forbidden?\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t      || __x.base() == _Iterator(),\n+\t\t\t      || __x._M_value_initialized(),\n \t\t\t      _M_message(__msg_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n@@ -266,7 +266,7 @@ namespace __gnu_debug\n       operator=(_Safe_iterator&& __x) noexcept\n       {\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t      || __x.base() == _Iterator(),\n+\t\t\t      || __x._M_value_initialized(),\n \t\t\t      _M_message(__msg_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n@@ -405,6 +405,11 @@ namespace __gnu_debug\n       _M_incrementable() const\n       { return !this->_M_singular() && !_M_is_end(); }\n \n+      /// Is the iterator value-initialized?\n+      bool\n+      _M_value_initialized() const\n+      { return _M_version == 0 && base() == _Iter_base(); }\n+\n       // Can we advance the iterator @p __n steps (@p __n may be negative)\n       bool\n       _M_can_advance(difference_type __n, bool __strict = false) const;"}, {"sha": "6e3c4eb15052f602983aadaf298b8587bf6d329f", "filename": "libstdc++-v3/include/debug/safe_local_iterator.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_local_iterator.h?ref=01b1afdc35c13cbff5cd3d37f9319285ab84b157", "patch": "@@ -33,8 +33,8 @@\n \n #define _GLIBCXX_DEBUG_VERIFY_OPERANDS(_Lhs, _Rhs) \\\n   _GLIBCXX_DEBUG_VERIFY(!_Lhs._M_singular() && !_Rhs._M_singular()\t\\\n-\t\t\t|| (_Lhs.base() == _Iterator{}\t\t\t\\\n-\t\t\t    && _Rhs.base() == _Iterator{}),\t\t\\\n+\t\t\t|| (_Lhs._M_value_initialized()\t\t\t\\\n+\t\t\t    && _Rhs._M_value_initialized()),\t\t\\\n \t\t\t_M_message(__msg_iter_compare_bad)\t\t\\\n \t\t\t._M_iterator(_Lhs, \"lhs\")\t\t\t\\\n \t\t\t._M_iterator(_Rhs, \"rhs\"));\t\t\t\\\n@@ -127,7 +127,7 @@ namespace __gnu_debug\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// DR 408. Is vector<reverse_iterator<char*> > forbidden?\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t      || __x.base() == _Iterator(),\n+\t\t\t      || __x._M_value_initialized(),\n \t\t\t      _M_message(__msg_init_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n@@ -142,7 +142,7 @@ namespace __gnu_debug\n       : _Iter_base()\n       {\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t      || __x.base() == _Iterator(),\n+\t\t\t      || __x._M_value_initialized(),\n \t\t\t      _M_message(__msg_init_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n@@ -167,7 +167,7 @@ namespace __gnu_debug\n \t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t  // DR 408. Is vector<reverse_iterator<char*> > forbidden?\n \t  _GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t\t|| __x.base() == _MutableIterator(),\n+\t\t\t\t|| __x._M_value_initialized(),\n \t\t\t\t_M_message(__msg_init_const_singular)\n \t\t\t\t._M_iterator(*this, \"this\")\n \t\t\t\t._M_iterator(__x, \"other\"));\n@@ -183,7 +183,7 @@ namespace __gnu_debug\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t// DR 408. Is vector<reverse_iterator<char*> > forbidden?\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t      || __x.base() == _Iterator(),\n+\t\t\t      || __x._M_value_initialized(),\n \t\t\t      _M_message(__msg_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n@@ -212,7 +212,7 @@ namespace __gnu_debug\n       operator=(_Safe_local_iterator&& __x) noexcept\n       {\n \t_GLIBCXX_DEBUG_VERIFY(!__x._M_singular()\n-\t\t\t      || __x.base() == _Iterator(),\n+\t\t\t      || __x._M_value_initialized(),\n \t\t\t      _M_message(__msg_copy_singular)\n \t\t\t      ._M_iterator(*this, \"this\")\n \t\t\t      ._M_iterator(__x, \"other\"));\n@@ -343,6 +343,11 @@ namespace __gnu_debug\n       _M_incrementable() const\n       { return !this->_M_singular() && !_M_is_end(); }\n \n+      /// Is the iterator value-initialized?\n+      bool\n+      _M_value_initialized() const\n+      { return _M_version == 0 && base() == _Iter_base{}; }\n+\n       // Is the iterator range [*this, __rhs) valid?\n       bool\n       _M_valid_range(const _Safe_local_iterator& __rhs,"}, {"sha": "8ed61a699139a511adad79e539ad3078c5cd09df", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=01b1afdc35c13cbff5cd3d37f9319285ab84b157", "patch": "@@ -426,7 +426,9 @@ namespace __gnu_debug\n   _M_reset() throw ()\n   {\n     __atomic_store_n(&_M_sequence, (_Safe_sequence_base*)0, __ATOMIC_RELEASE);\n-    _M_version = 0;\n+    // Do not reset version, so that a detached iterator does not look like a\n+    // value-initialized one.\n+    // _M_version = 0;\n     _M_prior = 0;\n     _M_next = 0;\n   }\n@@ -767,7 +769,8 @@ namespace\n \t \"before-begin\",\n \t \"dereferenceable (start-of-reverse-sequence)\",\n \t \"dereferenceable (reverse)\",\n-\t \"past-the-reverse-end\"\n+\t \"past-the-reverse-end\",\n+\t \"singular (value-initialized)\"\n \t};\n       print_word(ctx, state_names[iterator._M_state]);\n     }"}, {"sha": "73f8a044d43358ec49657350da0f21bf78a08153", "filename": "libstdc++-v3/testsuite/23_containers/deque/debug/iterator1_neg.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2Fiterator1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2Fiterator1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2Fiterator1_neg.cc?ref=01b1afdc35c13cbff5cd3d37f9319285ab84b157", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2022 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <deque>\n+\n+void test01()\n+{\n+  typedef typename std::deque<int>::iterator It;\n+  std::deque<int> dq;\n+  dq.push_back(1);\n+\n+  It it = It();\n+  (void)(dq.begin() != it);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0abf5cbd4ec8357ca8032ec2d8bd63f17b9c5e0d", "filename": "libstdc++-v3/testsuite/23_containers/deque/debug/iterator2_neg.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2Fiterator2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2Fiterator2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2Fiterator2_neg.cc?ref=01b1afdc35c13cbff5cd3d37f9319285ab84b157", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2022 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <deque>\n+\n+void test01()\n+{\n+  typedef typename std::deque<int>::iterator It;\n+  It it;\n+  {\n+    std::deque<int> dq;\n+    it = dq.begin();\n+  }\n+\n+  It value_init_it = It();\n+  (void)(it != value_init_it);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8ca44e248ed6f0df6052d7dd1c31179dd4c86e18", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/debug/iterator1_neg.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fiterator1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fiterator1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fiterator1_neg.cc?ref=01b1afdc35c13cbff5cd3d37f9319285ab84b157", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2022 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <forward_list>\n+\n+void test01()\n+{\n+  typedef typename std::forward_list<int>::iterator It;\n+  std::forward_list<int> fl;\n+  fl.push_front(1);\n+\n+  It it = It();\n+  (void)(fl.begin() != it);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "92ab059e6b8d1bf685a286ea065be2d7d50ebeae", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/debug/iterator2_neg.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fiterator2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fiterator2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fiterator2_neg.cc?ref=01b1afdc35c13cbff5cd3d37f9319285ab84b157", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2022 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { target c++11 xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <forward_list>\n+\n+void test01()\n+{\n+  typedef typename std::forward_list<int>::iterator It;\n+  It it;\n+  {\n+    std::forward_list<int> fl;\n+    it = fl.begin();\n+  }\n+\n+  It value_init_it{};\n+  (void)(it != value_init_it);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "32ae7a5b7a6214b7ad8fe870610dcd286d3694eb", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/debug/iterator3_neg.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fiterator3_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b1afdc35c13cbff5cd3d37f9319285ab84b157/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fiterator3_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2Fiterator3_neg.cc?ref=01b1afdc35c13cbff5cd3d37f9319285ab84b157", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2022 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+//\n+// { dg-do run { xfail *-*-* } }\n+// { dg-require-debug-mode \"\" }\n+\n+#include <forward_list>\n+\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  typedef typename std::forward_list<int>::iterator It;\n+  It end1, end2;\n+\n+  {\n+    std::forward_list<int> fl;\n+    fl.push_front(1);\n+\n+    end1 = end2 = fl.end();\n+    VERIFY( end1 == end2 );\n+  }\n+\n+  (void)(end1 == end2);\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}