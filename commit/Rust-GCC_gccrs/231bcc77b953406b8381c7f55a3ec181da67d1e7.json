{"sha": "231bcc77b953406b8381c7f55a3ec181da67d1e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMxYmNjNzdiOTUzNDA2YjgzODFjN2Y1NWEzZWMxODFkYTY3ZDFlNw==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-07-28T08:24:52Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-07-29T01:06:24Z"}, "message": "Add a separate function to calculate cost for WIDEN_MULT_EXPR.\n\ngcc/ChangeLog:\n\n\tPR target/39821\n\t* config/i386/i386.c (ix86_widen_mult_cost): New function.\n\t(ix86_add_stmt_cost): Use ix86_widen_mult_cost for\n\tWIDEN_MULT_EXPR.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/39821\n\t* gcc.target/i386/sse2-pr39821.c: New test.\n\t* gcc.target/i386/sse4-pr39821.c: New test.", "tree": {"sha": "5c87cc5f978a8e99f3ffdb18e8218e67d3b84ab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c87cc5f978a8e99f3ffdb18e8218e67d3b84ab9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/231bcc77b953406b8381c7f55a3ec181da67d1e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231bcc77b953406b8381c7f55a3ec181da67d1e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/231bcc77b953406b8381c7f55a3ec181da67d1e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/231bcc77b953406b8381c7f55a3ec181da67d1e7/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aafa38b5bfed5e3eff258aa5354ed928f4986709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aafa38b5bfed5e3eff258aa5354ed928f4986709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aafa38b5bfed5e3eff258aa5354ed928f4986709"}], "stats": {"total": 97, "additions": 96, "deletions": 1}, "files": [{"sha": "a0285e659ad90cb80618678f7223dc360c259584", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231bcc77b953406b8381c7f55a3ec181da67d1e7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231bcc77b953406b8381c7f55a3ec181da67d1e7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=231bcc77b953406b8381c7f55a3ec181da67d1e7", "patch": "@@ -19845,6 +19845,44 @@ ix86_vec_cost (machine_mode mode, int cost)\n   return cost;\n }\n \n+/* Return cost of vec_widen_<s>mult_hi/lo_<mode>,\n+   vec_widen_<s>mul_hi/lo_<mode> is only available for VI124_AVX2.  */\n+static int\n+ix86_widen_mult_cost (const struct processor_costs *cost,\n+\t\t      enum machine_mode mode, bool uns_p)\n+{\n+  gcc_assert (GET_MODE_CLASS (mode) == MODE_VECTOR_INT);\n+  int extra_cost = 0;\n+  int basic_cost = 0;\n+  switch (mode)\n+    {\n+    case V8HImode:\n+    case V16HImode:\n+      if (!uns_p || mode == V16HImode)\n+\textra_cost = cost->sse_op * 2;\n+      basic_cost = cost->mulss * 2 + cost->sse_op * 4;\n+      break;\n+    case V4SImode:\n+    case V8SImode:\n+      /* pmulhw/pmullw can be used.  */\n+      basic_cost = cost->mulss * 2 + cost->sse_op * 2;\n+      break;\n+    case V2DImode:\n+      /* pmuludq under sse2, pmuldq under sse4.1, for sign_extend,\n+\t require extra 4 mul, 4 add, 4 cmp and 2 shift.  */\n+      if (!TARGET_SSE4_1 && !uns_p)\n+\textra_cost = (cost->mulss + cost->addss + cost->sse_op) * 4\n+\t\t      + cost->sse_op * 2;\n+      /* Fallthru.  */\n+    case V4DImode:\n+      basic_cost = cost->mulss * 2 + cost->sse_op * 4;\n+      break;\n+    default:\n+      gcc_unreachable();\n+    }\n+  return ix86_vec_cost (mode, basic_cost + extra_cost);\n+}\n+\n /* Return cost of multiplication in MODE.  */\n \n static int\n@@ -22575,10 +22613,18 @@ ix86_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \t  break;\n \n \tcase MULT_EXPR:\n-\tcase WIDEN_MULT_EXPR:\n+\t  /* For MULT_HIGHPART_EXPR, x86 only supports pmulhw,\n+\t     take it as MULT_EXPR.  */\n \tcase MULT_HIGHPART_EXPR:\n \t  stmt_cost = ix86_multiplication_cost (ix86_cost, mode);\n \t  break;\n+\t  /* There's no direct instruction for WIDEN_MULT_EXPR,\n+\t     take emulation into account.  */\n+\tcase WIDEN_MULT_EXPR:\n+\t  stmt_cost = ix86_widen_mult_cost (ix86_cost, mode,\n+\t\t\t\t\t    TYPE_UNSIGNED (vectype));\n+\t  break;\n+\n \tcase NEGATE_EXPR:\n \t  if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n \t    stmt_cost = ix86_cost->sse_op;"}, {"sha": "bcd4b772c985eacf9d70c532f963d243bc1412d7", "filename": "gcc/testsuite/gcc.target/i386/sse2-pr39821.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231bcc77b953406b8381c7f55a3ec181da67d1e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr39821.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231bcc77b953406b8381c7f55a3ec181da67d1e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr39821.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-pr39821.c?ref=231bcc77b953406b8381c7f55a3ec181da67d1e7", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse2 -mno-sse4.1 -O3 -fdump-tree-vect-details\" } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 5 \"vect\" } } */\n+#include<stdint.h>\n+void\n+vec_widen_smul8 (int16_t* __restrict v3, int8_t *v1, int8_t *v2, int order)\n+{\n+  while (order--)\n+    *v3++ = (int16_t) *v1++ * *v2++;\n+}\n+\n+void\n+vec_widen_umul8(uint16_t* __restrict v3, uint8_t *v1, uint8_t *v2, int order)\n+{\n+  while (order--)\n+    *v3++ = (uint16_t) *v1++ * *v2++;\n+}\n+\n+void\n+vec_widen_smul16(int32_t* __restrict v3, int16_t *v1, int16_t *v2, int order)\n+{\n+  while (order--)\n+    *v3++ = (int32_t) *v1++ * *v2++;\n+}\n+\n+void\n+vec_widen_umul16(uint32_t* __restrict v3, uint16_t *v1, uint16_t *v2, int order)\n+{\n+  while (order--)\n+    *v3++ = (uint32_t) *v1++ * *v2++;\n+}\n+\n+void\n+vec_widen_smul32(int64_t* __restrict v3, int32_t *v1, int32_t *v2, int order)\n+{\n+  while (order--)\n+    *v3++ = (int64_t) *v1++ * *v2++;\n+}\n+\n+void\n+vec_widen_umul32(uint64_t* __restrict v3, uint32_t *v1, uint32_t *v2, int order)\n+{\n+  while (order--)\n+    *v3++ = (uint64_t) *v1++ * *v2++;\n+}"}, {"sha": "4456c31e43ecc51203a3f564217451ccf104cc01", "filename": "gcc/testsuite/gcc.target/i386/sse4-pr39821.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/231bcc77b953406b8381c7f55a3ec181da67d1e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4-pr39821.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/231bcc77b953406b8381c7f55a3ec181da67d1e7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4-pr39821.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4-pr39821.c?ref=231bcc77b953406b8381c7f55a3ec181da67d1e7", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-msse4.1 -O3 -fdump-tree-vect-details\" } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 6 \"vect\"} } */\n+#include \"sse2-pr39821.c\""}]}