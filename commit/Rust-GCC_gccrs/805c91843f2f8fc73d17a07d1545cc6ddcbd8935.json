{"sha": "805c91843f2f8fc73d17a07d1545cc6ddcbd8935", "node_id": "C_kwDOANBUbNoAKDgwNWM5MTg0M2YyZjhmYzczZDE3YTA3ZDE1NDVjYzZkZGNiZDg5MzU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-02T12:10:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-02T12:55:53Z"}, "message": "Refactor RPO VN API to allow timevar tracking\n\nThe following refactors things sligtly so \"utility\" use of the RPO VN\nmachinery gets its own timevar when invoked from other passes.\n\n\t* timevar.def (TV_TREE_RPO_VN): New.\n\t* tree-ssa-sccvn.h (do_rpo_vn): Remove one overload.\n\t* tree-ssa-sccvn.cc (do_rpo_vn_1): Rename the worker.\n\t(do_rpo_vn): Unify the public API, track with TV_TREE_RPO_VN.\n\t(pass_fre::execute): Adjust.\n\t* tree-ssa-uninit.cc (execute_early_warn_uninitialized): Adjust.", "tree": {"sha": "f242ed9a2b98a905126d895407a7bf4553fecf6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f242ed9a2b98a905126d895407a7bf4553fecf6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/805c91843f2f8fc73d17a07d1545cc6ddcbd8935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/805c91843f2f8fc73d17a07d1545cc6ddcbd8935", "html_url": "https://github.com/Rust-GCC/gccrs/commit/805c91843f2f8fc73d17a07d1545cc6ddcbd8935", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/805c91843f2f8fc73d17a07d1545cc6ddcbd8935/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be1b42de9c151d46c89f9a8f82d4c5839a19ea94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1b42de9c151d46c89f9a8f82d4c5839a19ea94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be1b42de9c151d46c89f9a8f82d4c5839a19ea94"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "eac4370431f019002f818fc4327b6e02aeabed51", "filename": "gcc/timevar.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805c91843f2f8fc73d17a07d1545cc6ddcbd8935/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805c91843f2f8fc73d17a07d1545cc6ddcbd8935/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=805c91843f2f8fc73d17a07d1545cc6ddcbd8935", "patch": "@@ -176,6 +176,7 @@ DEFTIMEVAR (TV_TREE_SPLIT_EDGES      , \"tree split crit edges\")\n DEFTIMEVAR (TV_TREE_REASSOC          , \"tree reassociation\")\n DEFTIMEVAR (TV_TREE_PRE\t\t     , \"tree PRE\")\n DEFTIMEVAR (TV_TREE_FRE\t\t     , \"tree FRE\")\n+DEFTIMEVAR (TV_TREE_RPO_VN\t     , \"tree RPO VN\")\n DEFTIMEVAR (TV_TREE_SINK             , \"tree code sinking\")\n DEFTIMEVAR (TV_TREE_PHIOPT\t     , \"tree linearize phis\")\n DEFTIMEVAR (TV_TREE_BACKPROP\t     , \"tree backward propagate\")"}, {"sha": "74b8d8d18efcc43382bfb3b1b3358badbe8be597", "filename": "gcc/tree-ssa-sccvn.cc", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805c91843f2f8fc73d17a07d1545cc6ddcbd8935/gcc%2Ftree-ssa-sccvn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805c91843f2f8fc73d17a07d1545cc6ddcbd8935/gcc%2Ftree-ssa-sccvn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.cc?ref=805c91843f2f8fc73d17a07d1545cc6ddcbd8935", "patch": "@@ -7290,14 +7290,14 @@ eliminate_with_rpo_vn (bitmap inserted_exprs)\n   return walker.eliminate_cleanup ();\n }\n \n-unsigned\n-do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n-\t   bool iterate, bool eliminate, vn_lookup_kind kind);\n+static unsigned\n+do_rpo_vn_1 (function *fn, edge entry, bitmap exit_bbs,\n+\t     bool iterate, bool eliminate, vn_lookup_kind kind);\n \n void\n run_rpo_vn (vn_lookup_kind kind)\n {\n-  do_rpo_vn (cfun, NULL, NULL, true, false, kind);\n+  do_rpo_vn_1 (cfun, NULL, NULL, true, false, kind);\n \n   /* ???  Prune requirement of these.  */\n   constant_to_value_id = new hash_table<vn_constant_hasher> (23);\n@@ -7995,9 +7995,9 @@ do_unwind (unwind_state *to, rpo_elim &avail)\n    executed and iterate.  If ELIMINATE is true then perform\n    elimination, otherwise leave that to the caller.  */\n \n-unsigned\n-do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n-\t   bool iterate, bool eliminate, vn_lookup_kind kind)\n+static unsigned\n+do_rpo_vn_1 (function *fn, edge entry, bitmap exit_bbs,\n+\t     bool iterate, bool eliminate, vn_lookup_kind kind)\n {\n   unsigned todo = 0;\n   default_vn_walk_kind = kind;\n@@ -8415,12 +8415,18 @@ do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n /* Region-based entry for RPO VN.  Performs value-numbering and elimination\n    on the SEME region specified by ENTRY and EXIT_BBS.  If ENTRY is not\n    the only edge into the region at ENTRY->dest PHI nodes in ENTRY->dest\n-   are not considered.  */\n+   are not considered.\n+   If ITERATE is true then treat backedges optimistically as not\n+   executed and iterate.  If ELIMINATE is true then perform\n+   elimination, otherwise leave that to the caller.\n+   KIND specifies the amount of work done for handling memory operations.  */\n \n unsigned\n-do_rpo_vn (function *fn, edge entry, bitmap exit_bbs)\n+do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n+\t   bool iterate, bool eliminate, vn_lookup_kind kind)\n {\n-  unsigned todo = do_rpo_vn (fn, entry, exit_bbs, false, true, VN_WALKREWRITE);\n+  auto_timevar tv (TV_TREE_RPO_VN);\n+  unsigned todo = do_rpo_vn_1 (fn, entry, exit_bbs, iterate, eliminate, kind);\n   free_rpo_vn ();\n   return todo;\n }\n@@ -8476,7 +8482,7 @@ pass_fre::execute (function *fun)\n   if (iterate_p)\n     loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n \n-  todo = do_rpo_vn (fun, NULL, NULL, iterate_p, true, VN_WALKREWRITE);\n+  todo = do_rpo_vn_1 (fun, NULL, NULL, iterate_p, true, VN_WALKREWRITE);\n   free_rpo_vn ();\n \n   if (iterate_p)"}, {"sha": "abcf7e666c2d6e12b7425d7f1d477abfc7e0769e", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805c91843f2f8fc73d17a07d1545cc6ddcbd8935/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805c91843f2f8fc73d17a07d1545cc6ddcbd8935/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=805c91843f2f8fc73d17a07d1545cc6ddcbd8935", "patch": "@@ -295,8 +295,12 @@ value_id_constant_p (unsigned int v)\n tree fully_constant_vn_reference_p (vn_reference_t);\n tree vn_nary_simplify (vn_nary_op_t);\n \n-unsigned do_rpo_vn (function *, edge, bitmap, bool, bool, vn_lookup_kind);\n-unsigned do_rpo_vn (function *, edge, bitmap);\n+unsigned do_rpo_vn (function *, edge, bitmap,\n+\t\t    /* iterate */ bool = false,\n+\t\t    /* eliminate */ bool = true,\n+\t\t    vn_lookup_kind = VN_WALKREWRITE);\n+\n+/* Private interface for PRE.  */\n void run_rpo_vn (vn_lookup_kind);\n unsigned eliminate_with_rpo_vn (bitmap);\n void free_rpo_vn (void);"}, {"sha": "29dc48c4a29e6082c7b158b534422338b1ffdf3a", "filename": "gcc/tree-ssa-uninit.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/805c91843f2f8fc73d17a07d1545cc6ddcbd8935/gcc%2Ftree-ssa-uninit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/805c91843f2f8fc73d17a07d1545cc6ddcbd8935/gcc%2Ftree-ssa-uninit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.cc?ref=805c91843f2f8fc73d17a07d1545cc6ddcbd8935", "patch": "@@ -1466,10 +1466,7 @@ execute_early_warn_uninitialized (struct function *fun)\n      elimination to compute edge reachability.  Don't bother when\n      we only warn for unconditionally executed code though.  */\n   if (!optimize)\n-    {\n-      do_rpo_vn (fun, NULL, NULL, false, false, VN_NOWALK);\n-      free_rpo_vn ();\n-    }\n+    do_rpo_vn (fun, NULL, NULL, false, false, VN_NOWALK);\n   else\n     set_all_edges_as_executable (fun);\n "}]}