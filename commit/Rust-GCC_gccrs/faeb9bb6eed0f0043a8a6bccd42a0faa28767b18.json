{"sha": "faeb9bb6eed0f0043a8a6bccd42a0faa28767b18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFlYjliYjZlZWQwZjAwNDNhOGE2YmNjZDQyYTBmYWEyODc2N2IxOA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-02-13T14:57:27Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-02-13T14:57:27Z"}, "message": "s390-protos.h (s390_output_symbolic_const): Remove.\n\n\t* config/s390/s390-protos.h (s390_output_symbolic_const): Remove.\n\t(s390_output_addr_const_extra): Declare.\n\t(s390_output_pool_entry): Remove FILE * argument.\n\t* config/s390/s390.c (s390_output_symbolic_const): Remove.\n\t(s390_output_addr_const_extra): New function.\n\t(print_operand_address): Call output_addr_const instead of\n\ts390_output_symbolic_const.\n\t(print_operand): Likewise.\n\t(s390_output_pool_entry): Use assemble_integer for symbolic constants.\n\tRemove FILE * argument.\n\t* config/s390/s390.h (OUTPUT_ADDR_CONST_EXTRA): Define.\n\t* config/s390/s390.md (\"*pool_entry\"): Adapt s390_output_pool_entry\n\tcall.\n\nFrom-SVN: r77757", "tree": {"sha": "a26ad50507f2db265f2de36d01c2262727c34110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a26ad50507f2db265f2de36d01c2262727c34110"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faeb9bb6eed0f0043a8a6bccd42a0faa28767b18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faeb9bb6eed0f0043a8a6bccd42a0faa28767b18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faeb9bb6eed0f0043a8a6bccd42a0faa28767b18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faeb9bb6eed0f0043a8a6bccd42a0faa28767b18/comments", "author": null, "committer": null, "parents": [{"sha": "cfbe3efe4518a3f9784fc350082561ba1882b422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfbe3efe4518a3f9784fc350082561ba1882b422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfbe3efe4518a3f9784fc350082561ba1882b422"}], "stats": {"total": 198, "additions": 86, "deletions": 112}, "files": [{"sha": "d5a3ce4aa0dc953d8d87bae6839b30a4fdf333fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faeb9bb6eed0f0043a8a6bccd42a0faa28767b18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faeb9bb6eed0f0043a8a6bccd42a0faa28767b18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=faeb9bb6eed0f0043a8a6bccd42a0faa28767b18", "patch": "@@ -1,3 +1,19 @@\n+2004-02-13  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_output_symbolic_const): Remove.\n+\t(s390_output_addr_const_extra): Declare.\n+\t(s390_output_pool_entry): Remove FILE * argument.\n+\t* config/s390/s390.c (s390_output_symbolic_const): Remove.\n+\t(s390_output_addr_const_extra): New function.\n+\t(print_operand_address): Call output_addr_const instead of\n+\ts390_output_symbolic_const.\n+\t(print_operand): Likewise.\n+\t(s390_output_pool_entry): Use assemble_integer for symbolic constants.\n+\tRemove FILE * argument.\n+\t* config/s390/s390.h (OUTPUT_ADDR_CONST_EXTRA): Define.\n+\t* config/s390/s390.md (\"*pool_entry\"): Adapt s390_output_pool_entry\n+\tcall.\n+\n 2004-02-13  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* cfgloopanal.c (mark_irreducible_loops): Rewriten."}, {"sha": "49dad24b5e701a3f713d2e993964c5fed539c6cd", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faeb9bb6eed0f0043a8a6bccd42a0faa28767b18/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faeb9bb6eed0f0043a8a6bccd42a0faa28767b18/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=faeb9bb6eed0f0043a8a6bccd42a0faa28767b18", "patch": "@@ -78,12 +78,11 @@ extern void s390_expand_clrstr (rtx, rtx);\n extern void s390_expand_cmpmem (rtx, rtx, rtx, rtx);\n extern rtx s390_return_addr_rtx (int, rtx);\n \n-extern void s390_output_symbolic_const (FILE *, rtx);\n+extern bool s390_output_addr_const_extra (FILE*, rtx);\n extern void print_operand_address (FILE *, rtx);\n extern void print_operand (FILE *, rtx, int);\n extern void s390_output_constant_pool (rtx, rtx);\n-extern void s390_output_pool_entry (FILE *, rtx, enum machine_mode, \n-\t\t\t\t    unsigned int);\n+extern void s390_output_pool_entry (rtx, enum machine_mode, unsigned int);\n extern void s390_trampoline_template (FILE *);\n extern void s390_initialize_trampoline (rtx, rtx, rtx);\n extern rtx s390_gen_rtx_const_DI (int, int);"}, {"sha": "914e261c474e3af926e9cce2ead78497b3d9685e", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 60, "deletions": 108, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faeb9bb6eed0f0043a8a6bccd42a0faa28767b18/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faeb9bb6eed0f0043a8a6bccd42a0faa28767b18/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=faeb9bb6eed0f0043a8a6bccd42a0faa28767b18", "patch": "@@ -3301,98 +3301,63 @@ get_some_local_dynamic_name_1 (rtx *px, void *data ATTRIBUTE_UNUSED)\n   return 0;\n }\n \n-/* Output symbolic constant X in assembler syntax to\n-   stdio stream FILE.  */\n+/* Output machine-dependent UNSPECs occurring in address constant X \n+   in assembler syntax to stdio stream FILE.  Returns true if the\n+   constant X could be recognized, false otherwise.  */\n \n-void\n-s390_output_symbolic_const (FILE *file, rtx x)\n+bool\n+s390_output_addr_const_extra (FILE *file, rtx x)\n {\n-  switch (GET_CODE (x))\n-    {\n-    case CONST:\n-    case ZERO_EXTEND:\n-    case SIGN_EXTEND:\n-      s390_output_symbolic_const (file, XEXP (x, 0));\n-      break;\n-\n-    case PLUS:\n-      s390_output_symbolic_const (file, XEXP (x, 0));\n-      fprintf (file, \"+\");\n-      s390_output_symbolic_const (file, XEXP (x, 1));\n-      break;\n-\n-    case MINUS:\n-      s390_output_symbolic_const (file, XEXP (x, 0));\n-      fprintf (file, \"-\");\n-      s390_output_symbolic_const (file, XEXP (x, 1));\n-      break;\n-\n-    case CONST_INT:\n-    case LABEL_REF:\n-    case CODE_LABEL:\n-    case SYMBOL_REF:\n-      output_addr_const (file, x);\n-      break;\n-\n-    case UNSPEC:\n-      if (XVECLEN (x, 0) != 1)\n-        output_operand_lossage (\"invalid UNSPEC as operand (1)\");\n-      switch (XINT (x, 1))\n-        {\n-\tcase UNSPEC_GOTENT:\n-\t  s390_output_symbolic_const (file, XVECEXP (x, 0, 0));\n-\t  fprintf (file, \"@GOTENT\");\n-\t  break;\n-\tcase UNSPEC_GOT:\n-\t  s390_output_symbolic_const (file, XVECEXP (x, 0, 0));\n-\t  fprintf (file, \"@GOT\");\n-\t  break;\n-\tcase UNSPEC_GOTOFF:\n-\t  s390_output_symbolic_const (file, XVECEXP (x, 0, 0));\n-\t  fprintf (file, \"@GOTOFF\");\n-\t  break;\n-\tcase UNSPEC_PLT:\n-\t  s390_output_symbolic_const (file, XVECEXP (x, 0, 0));\n-\t  fprintf (file, \"@PLT\");\n-\t  break;\n-\tcase UNSPEC_PLTOFF:\n-\t  s390_output_symbolic_const (file, XVECEXP (x, 0, 0));\n-\t  fprintf (file, \"@PLTOFF\");\n-\t  break;\n-\tcase UNSPEC_TLSGD:\n-\t  s390_output_symbolic_const (file, XVECEXP (x, 0, 0));\n-\t  fprintf (file, \"@TLSGD\");\n-\t  break;\n-\tcase UNSPEC_TLSLDM:\n-\t  assemble_name (file, get_some_local_dynamic_name ());\n-\t  fprintf (file, \"@TLSLDM\");\n-\t  break;\n-\tcase UNSPEC_DTPOFF:\n-\t  s390_output_symbolic_const (file, XVECEXP (x, 0, 0));\n-\t  fprintf (file, \"@DTPOFF\");\n-\t  break;\n-\tcase UNSPEC_NTPOFF:\n-\t  s390_output_symbolic_const (file, XVECEXP (x, 0, 0));\n-\t  fprintf (file, \"@NTPOFF\");\n-\t  break;\n-\tcase UNSPEC_GOTNTPOFF:\n-\t  s390_output_symbolic_const (file, XVECEXP (x, 0, 0));\n-\t  fprintf (file, \"@GOTNTPOFF\");\n-\t  break;\n-\tcase UNSPEC_INDNTPOFF:\n-\t  s390_output_symbolic_const (file, XVECEXP (x, 0, 0));\n-\t  fprintf (file, \"@INDNTPOFF\");\n-\t  break;\n-\tdefault:\n-\t  output_operand_lossage (\"invalid UNSPEC as operand (2)\");\n-\t  break;\n-        }\n-      break;\n+  if (GET_CODE (x) == UNSPEC && XVECLEN (x, 0) == 1)\n+    switch (XINT (x, 1))\n+      {\n+      case UNSPEC_GOTENT:\n+\toutput_addr_const (file, XVECEXP (x, 0, 0));\n+\tfprintf (file, \"@GOTENT\");\n+\treturn true;\n+      case UNSPEC_GOT:\n+\toutput_addr_const (file, XVECEXP (x, 0, 0));\n+\tfprintf (file, \"@GOT\");\n+\treturn true;\n+      case UNSPEC_GOTOFF:\n+\toutput_addr_const (file, XVECEXP (x, 0, 0));\n+\tfprintf (file, \"@GOTOFF\");\n+\treturn true;\n+      case UNSPEC_PLT:\n+\toutput_addr_const (file, XVECEXP (x, 0, 0));\n+\tfprintf (file, \"@PLT\");\n+\treturn true;\n+      case UNSPEC_PLTOFF:\n+\toutput_addr_const (file, XVECEXP (x, 0, 0));\n+\tfprintf (file, \"@PLTOFF\");\n+\treturn true;\n+      case UNSPEC_TLSGD:\n+\toutput_addr_const (file, XVECEXP (x, 0, 0));\n+\tfprintf (file, \"@TLSGD\");\n+\treturn true;\n+      case UNSPEC_TLSLDM:\n+\tassemble_name (file, get_some_local_dynamic_name ());\n+\tfprintf (file, \"@TLSLDM\");\n+\treturn true;\n+      case UNSPEC_DTPOFF:\n+\toutput_addr_const (file, XVECEXP (x, 0, 0));\n+\tfprintf (file, \"@DTPOFF\");\n+\treturn true;\n+      case UNSPEC_NTPOFF:\n+\toutput_addr_const (file, XVECEXP (x, 0, 0));\n+\tfprintf (file, \"@NTPOFF\");\n+\treturn true;\n+      case UNSPEC_GOTNTPOFF:\n+\toutput_addr_const (file, XVECEXP (x, 0, 0));\n+\tfprintf (file, \"@GOTNTPOFF\");\n+\treturn true;\n+      case UNSPEC_INDNTPOFF:\n+\toutput_addr_const (file, XVECEXP (x, 0, 0));\n+\tfprintf (file, \"@INDNTPOFF\");\n+\treturn true;\n+      }\n \n-    default:\n-      fatal_insn (\"UNKNOWN in s390_output_symbolic_const !?\", x);\n-      break;\n-    }\n+  return false;\n }\n \n /* Output address operand ADDR in assembler syntax to\n@@ -3409,7 +3374,7 @@ print_operand_address (FILE *file, rtx addr)\n     output_operand_lossage (\"Cannot decompose address.\");\n \n   if (ad.disp)\n-    s390_output_symbolic_const (file, ad.disp);\n+    output_addr_const (file, ad.disp);\n   else\n     fprintf (file, \"0\");\n \n@@ -3483,7 +3448,7 @@ print_operand (FILE *file, rtx x, int code)\n           abort ();\n \n         if (ad.disp)\n-          s390_output_symbolic_const (file, ad.disp);\n+          output_addr_const (file, ad.disp);\n         else\n           fprintf (file, \"0\");\n       }\n@@ -3543,7 +3508,7 @@ print_operand (FILE *file, rtx x, int code)\n     case CODE_LABEL:\n     case LABEL_REF:\n     case SYMBOL_REF:\n-      s390_output_symbolic_const (file, x);\n+      output_addr_const (file, x);\n       break;\n \n     case CONST_INT:\n@@ -4915,12 +4880,10 @@ s390_chunkify_cancel (struct constant_pool *pool_list)\n }\n \n \n-/* Output to FILE the constant pool entry EXP in mode MODE\n-   with alignment ALIGN.  */\n+/* Output the constant pool entry EXP in mode MODE with alignment ALIGN.  */\n \n void\n-s390_output_pool_entry (FILE *file, rtx exp, enum machine_mode mode, \n-\t\t\tunsigned int align)\n+s390_output_pool_entry (rtx exp, enum machine_mode mode, unsigned int align)\n {\n   REAL_VALUE_TYPE r;\n \n@@ -4935,18 +4898,7 @@ s390_output_pool_entry (FILE *file, rtx exp, enum machine_mode mode,\n       break;\n \n     case MODE_INT:\n-      if (GET_CODE (exp) == CONST\n-\t  || GET_CODE (exp) == SYMBOL_REF\n-\t  || GET_CODE (exp) == LABEL_REF)\n-\t{\n-\t  fputs (integer_asm_op (GET_MODE_SIZE (mode), TRUE), file);\n-\t  s390_output_symbolic_const (file, exp);\n-\t  fputc ('\\n', file);\n-\t}\n-      else\n-\t{\n-\t  assemble_integer (exp, GET_MODE_SIZE (mode), align, 1);\n-\t}\n+      assemble_integer (exp, GET_MODE_SIZE (mode), align, 1);\n       break;\n \n     default:"}, {"sha": "f1386a7edcce72c11882cf3b56e263939e759820", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faeb9bb6eed0f0043a8a6bccd42a0faa28767b18/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faeb9bb6eed0f0043a8a6bccd42a0faa28767b18/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=faeb9bb6eed0f0043a8a6bccd42a0faa28767b18", "patch": "@@ -970,6 +970,13 @@ extern int flag_pic;\n #define PRINT_OPERAND(FILE, X, CODE) print_operand (FILE, X, CODE)\n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address (FILE, ADDR)\n \n+/* Output machine-dependent UNSPECs in address constants.  */\n+#define OUTPUT_ADDR_CONST_EXTRA(FILE, X, FAIL)\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  if (!s390_output_addr_const_extra (FILE, (X)))\t\\\n+    goto FAIL;\t\t\t\t\t\t\\\n+} while (0);\n+\n /* Output an element of a case-vector that is absolute.  */\n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "874b19b681f74d3fbd6fe792c393721557050c7f", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faeb9bb6eed0f0043a8a6bccd42a0faa28767b18/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faeb9bb6eed0f0043a8a6bccd42a0faa28767b18/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=faeb9bb6eed0f0043a8a6bccd42a0faa28767b18", "patch": "@@ -7403,7 +7403,7 @@\n {\n   enum machine_mode mode = GET_MODE (PATTERN (insn));\n   unsigned int align = GET_MODE_BITSIZE (mode);\n-  s390_output_pool_entry (asm_out_file, operands[0], mode, align);\n+  s390_output_pool_entry (operands[0], mode, align);\n   return \"\";\n }\n   [(set_attr \"op_type\" \"NN\")"}]}