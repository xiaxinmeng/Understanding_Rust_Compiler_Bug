{"sha": "edac124d95be8bd327fd5754651f4eb25f0a280b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRhYzEyNGQ5NWJlOGJkMzI3ZmQ1NzU0NjUxZjRlYjI1ZjBhMjgwYg==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2000-12-15T01:11:38Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2000-12-15T01:11:38Z"}, "message": "pt.c (check_explicit_specialization): Propagate default function arguments to explicit specializations.\n\n\t* pt.c (check_explicit_specialization): Propagate default\n\tfunction arguments to explicit specializations.\n\n\t* g++.old-deja/g++.pt/spec33.C: New test.\n\nFrom-SVN: r38266", "tree": {"sha": "f98f68098b30f27326cc180033a42815d24ad090", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f98f68098b30f27326cc180033a42815d24ad090"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edac124d95be8bd327fd5754651f4eb25f0a280b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edac124d95be8bd327fd5754651f4eb25f0a280b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edac124d95be8bd327fd5754651f4eb25f0a280b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edac124d95be8bd327fd5754651f4eb25f0a280b/comments", "author": null, "committer": null, "parents": [{"sha": "07467d31def1f9c3870a3b0ae6c8756b6244ac41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07467d31def1f9c3870a3b0ae6c8756b6244ac41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07467d31def1f9c3870a3b0ae6c8756b6244ac41"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "07753bf4149239f782e10a87400cbd362eaf4cc8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edac124d95be8bd327fd5754651f4eb25f0a280b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edac124d95be8bd327fd5754651f4eb25f0a280b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=edac124d95be8bd327fd5754651f4eb25f0a280b", "patch": "@@ -1,3 +1,8 @@\n+2000-12-14  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\t* pt.c (check_explicit_specialization): Propagate default\n+\tfunction arguments to explicit specializations.\n+\n 2000-12-13  DJ Delorie  <dj@redhat.com>\n \n \t* typeck.c (build_binary_op): Do signed/unsigned warnings for >?"}, {"sha": "34540a84b33d46f7af84f21ff4a6a5275e3f8678", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edac124d95be8bd327fd5754651f4eb25f0a280b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edac124d95be8bd327fd5754651f4eb25f0a280b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=edac124d95be8bd327fd5754651f4eb25f0a280b", "patch": "@@ -1543,6 +1543,31 @@ check_explicit_specialization (declarator, decl, template_count, flags)\n \t      last_function_parms = TREE_CHAIN (last_function_parms);\n \t    }\n \n+\t  /* Inherit default function arguments from the template\n+\t     DECL is specializing.  */\n+\t  {\n+\t    tree t1 = TYPE_ARG_TYPES (TREE_TYPE (decl));\n+\t    tree t2 = TYPE_ARG_TYPES (TREE_TYPE (DECL_TEMPLATE_RESULT (tmpl)));\n+\n+\t    /* DECL may contain more parameters than TMPL due to the extra\n+\t       in-charge parameter in constructors and destructors.  */\n+\t    if (DECL_NONSTATIC_MEMBER_FUNCTION_P (decl))\n+\t      t1 = TREE_CHAIN (t1), t2 = TREE_CHAIN (t2);\n+\t    if (DECL_HAS_IN_CHARGE_PARM_P (decl))\n+\t      t1 = TREE_CHAIN (t1);\n+\n+\t     /* Note that we do not need to reparse default arguments, \n+\t\tsince explicit specialization cannot be declared in \n+\t\tclass scope as in [temp.expl.spec].  */\n+\t    for (; t1 && t2; t1 = TREE_CHAIN (t1), t2 = TREE_CHAIN (t2))\n+\t      {\n+\t\tif (TREE_PURPOSE (t2))\n+\t\t  TREE_PURPOSE (t1) = TREE_PURPOSE (t2);\n+\t      }\n+\n+\t    my_friendly_assert (t1 == NULL_TREE && t2 == NULL_TREE, 20001211);\n+\t  }\n+\n \t  /* Set up the DECL_TEMPLATE_INFO for DECL.  */\n \t  DECL_TEMPLATE_INFO (decl) = tree_cons (tmpl, targs, NULL_TREE);\n "}, {"sha": "a12aab2af50e0b0c3ec3e29b4171f95f5d0663e4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edac124d95be8bd327fd5754651f4eb25f0a280b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edac124d95be8bd327fd5754651f4eb25f0a280b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=edac124d95be8bd327fd5754651f4eb25f0a280b", "patch": "@@ -1,3 +1,7 @@\n+2000-12-14  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\t* g++.old-deja/g++.pt/spec33.C: New test.\n+\n 2000-12-14  Catherine Moore  <clm@redhat.com>\n \n \t* gcc.c-torture/execute/920501-7.c: Check for NO_TRAMPOLINES."}, {"sha": "a458c1dc417c653055efe39432465d28df499b67", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec33.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edac124d95be8bd327fd5754651f4eb25f0a280b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edac124d95be8bd327fd5754651f4eb25f0a280b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec33.C?ref=edac124d95be8bd327fd5754651f4eb25f0a280b", "patch": "@@ -0,0 +1,26 @@\n+// Build don't link:\n+// Origin: James McKelvey <mckelvey@fafnir.com>\n+\n+class A\n+{\n+  public:\n+  template <class T> A(T x, bool y = false);\n+};\n+\n+template <class T> A::A(T, bool)\n+{\n+}\n+\n+template <> A::A(char, bool)\n+{\n+}\n+\n+int main()\n+{\n+  int  b;\n+  char c;\n+\n+  A x(b);\n+  A y(c);\n+  A z(c, false);\n+}"}]}