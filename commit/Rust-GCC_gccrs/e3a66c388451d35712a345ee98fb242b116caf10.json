{"sha": "e3a66c388451d35712a345ee98fb242b116caf10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNhNjZjMzg4NDUxZDM1NzEyYTM0NWVlOThmYjI0MmIxMTZjYWYxMA==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2012-02-15T23:00:38Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2012-02-15T23:00:38Z"}, "message": "invoke.texi: Clean up \"n-bit/byte/word\" modifiers.\n\n2012-02-15  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi: Clean up \"n-bit/byte/word\" modifiers.\n\nFrom-SVN: r184291", "tree": {"sha": "6106234a36abecd14a0d2bf716527585989996f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6106234a36abecd14a0d2bf716527585989996f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3a66c388451d35712a345ee98fb242b116caf10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a66c388451d35712a345ee98fb242b116caf10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3a66c388451d35712a345ee98fb242b116caf10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3a66c388451d35712a345ee98fb242b116caf10/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca59d219fea069cdc604aea49ffb4e482b518cee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca59d219fea069cdc604aea49ffb4e482b518cee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca59d219fea069cdc604aea49ffb4e482b518cee"}], "stats": {"total": 117, "additions": 61, "deletions": 56}, "files": [{"sha": "030b51afd20fe16e327e161993b9214f079c5a16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a66c388451d35712a345ee98fb242b116caf10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a66c388451d35712a345ee98fb242b116caf10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3a66c388451d35712a345ee98fb242b116caf10", "patch": "@@ -1,3 +1,7 @@\n+2012-02-15  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi: Clean up \"n-bit/byte/word\" modifiers.\n+\n 2012-02-15  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/52199"}, {"sha": "50c96ba56cb3ce3f269ff717d340b85e757ce884", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 57, "deletions": 56, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3a66c388451d35712a345ee98fb242b116caf10/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3a66c388451d35712a345ee98fb242b116caf10/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e3a66c388451d35712a345ee98fb242b116caf10", "patch": "@@ -10440,7 +10440,7 @@ for direct calls.  The default is @option{-mlong-calls}.\n \n @item -msmall16\n @opindex msmall16\n-Assume addresses can be loaded as 16 bit unsigned values.  This does not\n+Assume addresses can be loaded as 16-bit unsigned values.  This does not\n apply to function addresses for which @option{-mlong-calls} semantics\n are in effect.\n \n@@ -10487,8 +10487,8 @@ The default is @option{-mfp-mode=caller}\n @opindex mno-postinc\n @item -mno-postmodify\n @opindex mno-postmodify\n-Code generation tweaks that disable, respectively, splitting of 32\n-bit loads, generation of post-increment addresses, and generation of\n+Code generation tweaks that disable, respectively, splitting of 32-bit\n+loads, generation of post-increment addresses, and generation of\n post-modify addresses.  The defaults are @option{msplit-lohi},\n @option{-mpost-inc}, and @option{-mpost-modify}.\n \n@@ -10903,7 +10903,7 @@ this option and always use the original scheme.\n \n @item -mword-relocations\n @opindex mword-relocations\n-Only generate absolute relocations on word sized values (i.e. R_ARM_ABS32).\n+Only generate absolute relocations on word-sized values (i.e. R_ARM_ABS32).\n This is enabled by default on targets (uClinux, SymbianOS) where the runtime\n loader imposes this restriction, and when @option{-fpic} or @option{-fPIC}\n is specified.\n@@ -11021,7 +11021,7 @@ subroutines.  Code size will be smaller.\n \n @item -mint8\n @opindex mint8\n-Assume int to be 8 bit integer.  This affects the sizes of all types: A\n+Assume int to be 8-bit integer.  This affects the sizes of all types: a\n char will be 1 byte, an int will be 1 byte, a long will be 2 bytes\n and long long will be 4 bytes.  Please note that this option does not\n comply to the C standards, but it will provide you with smaller code\n@@ -11251,7 +11251,7 @@ with up to 128@tie{}KiB of program memory.\n \n @item __AVR_HAVE_8BIT_SP__\n @item __AVR_HAVE_16BIT_SP__\n-The stack pointer (SP) is 8@tie{}bits resp. 16@tie{}bits wide.\n+The stack pointer (SP) is respectively 8 or 16 bits wide.\n The definition of these macros is affected by @code{-mtiny-stack}.\n \n @item __NO_INTERRUPTS__\n@@ -11410,7 +11410,7 @@ This is the default.\n Tells the compiler to perform function calls by first loading the\n address of the function into a register and then performing a subroutine\n call on this register.  This switch is needed if the target function\n-will lie outside of the 24 bit addressing range of the offset based\n+lies outside of the 24-bit addressing range of the offset-based\n version of subroutine call instruction.\n \n This feature is not enabled by default.  Specifying\n@@ -12312,7 +12312,7 @@ routine for the debugger.\n \n @item -mmalloc64\n @opindex mmalloc64\n-Default to 64bit memory allocation routines.\n+Default to 64-bit memory allocation routines.\n @end table\n \n @node FR30 Options\n@@ -12730,9 +12730,9 @@ Make @code{int} data 32 bits by default.\n @item -malign-300\n @opindex malign-300\n On the H8/300H and H8S, use the same alignment rules as for the H8/300.\n-The default for the H8/300H and H8S is to align longs and floats on 4\n-byte boundaries.\n-@option{-malign-300} causes them to be aligned on 2 byte boundaries.\n+The default for the H8/300H and H8S is to align longs and floats on\n+4-byte boundaries.\n+@option{-malign-300} causes them to be aligned on 2-byte boundaries.\n This option has no effect on the H8/300.\n @end table\n \n@@ -12869,7 +12869,7 @@ are passed to that ld.  The ld that is called is determined by the\n @option{--with-ld} configure option, GCC's program search path, and\n finally by the user's @env{PATH}.  The linker used by GCC can be printed\n using @samp{which `gcc -print-prog-name=ld`}.  This option is only available\n-on the 64 bit HP-UX GCC, i.e.@: configured with @samp{hppa*64*-*-hpux*}.\n+on the 64-bit HP-UX GCC, i.e.@: configured with @samp{hppa*64*-*-hpux*}.\n \n @item -mhp-ld\n @opindex mhp-ld\n@@ -12881,7 +12881,7 @@ which ld is called, it only changes what parameters are passed to that\n ld.  The ld that is called is determined by the @option{--with-ld}\n configure option, GCC's program search path, and finally by the user's\n @env{PATH}.  The linker used by GCC can be printed using @samp{which\n-`gcc -print-prog-name=ld`}.  This option is only available on the 64 bit\n+`gcc -print-prog-name=ld`}.  This option is only available on the 64-bit\n HP-UX GCC, i.e.@: configured with @samp{hppa*64*-*-hpux*}.\n \n @item -mlong-calls\n@@ -13140,7 +13140,7 @@ effective.  For the x86-64 compiler, these extensions are enabled by default.\n \n The resulting code should be considerably faster in the majority of cases and avoid\n the numerical instability problems of 387 code, but may break some existing\n-code that expects temporaries to be 80bit.\n+code that expects temporaries to be 80 bits.\n \n This is the default choice for the x86-64 compiler.\n \n@@ -13209,9 +13209,9 @@ instructions are not generated unless you also use the\n @opindex malign-double\n @opindex mno-align-double\n Control whether GCC aligns @code{double}, @code{long double}, and\n-@code{long long} variables on a two word boundary or a one word\n-boundary.  Aligning @code{double} variables on a two word boundary will\n-produce code that runs somewhat faster on a @samp{Pentium} at the\n+@code{long long} variables on a two-word boundary or a one-word\n+boundary.  Aligning @code{double} variables on a two-word boundary\n+produces code that runs somewhat faster on a @samp{Pentium} at the\n expense of more memory.\n \n On x86-64, @option{-malign-double} is enabled by default.\n@@ -13228,17 +13228,17 @@ without that switch.\n @opindex m128bit-long-double\n These switches control the size of @code{long double} type.  The i386\n application binary interface specifies the size to be 96 bits,\n-so @option{-m96bit-long-double} is the default in 32 bit mode.\n+so @option{-m96bit-long-double} is the default in 32-bit mode.\n \n-Modern architectures (Pentium and newer) would prefer @code{long double}\n-to be aligned to an 8 or 16 byte boundary.  In arrays or structures\n-conforming to the ABI, this would not be possible.  So specifying a\n-@option{-m128bit-long-double} will align @code{long double}\n-to a 16 byte boundary by padding the @code{long double} with an additional\n-32 bit zero.\n+Modern architectures (Pentium and newer) prefer @code{long double}\n+to be aligned to an 8- or 16-byte boundary.  In arrays or structures\n+conforming to the ABI, this is not possible.  So specifying\n+@option{-m128bit-long-double} aligns @code{long double}\n+to a 16-byte boundary by padding the @code{long double} with an additional\n+32-bit zero.\n \n In the x86-64 compiler, @option{-m128bit-long-double} is the default choice as\n-its ABI specifies that @code{long double} is to be aligned on 16 byte boundary.\n+its ABI specifies that @code{long double} is to be aligned on 16-byte boundary.\n \n Notice that neither of these options enable any extra precision over the x87\n standard of 80 bits for a @code{long double}.\n@@ -13361,10 +13361,10 @@ boundary.  If @option{-mincoming-stack-boundary} is not specified,\n the one specified by @option{-mpreferred-stack-boundary} will be used.\n \n On Pentium and PentiumPro, @code{double} and @code{long double} values\n-should be aligned to an 8 byte boundary (see @option{-malign-double}) or\n+should be aligned to an 8-byte boundary (see @option{-malign-double}) or\n suffer significant run time performance penalties.  On Pentium III, the\n Streaming SIMD Extension (SSE) data type @code{__m128} may not work\n-properly if it is not 16 byte aligned.\n+properly if it is not 16-byte aligned.\n \n To ensure proper alignment of this values on the stack, the stack boundary\n must be as aligned as that required by any value stored on the stack.\n@@ -13625,8 +13625,9 @@ but GCC doesn't know about it.\n \n @item -minline-all-stringops\n @opindex minline-all-stringops\n-By default GCC inlines string operations only when destination is known to be\n-aligned at least to 4 byte boundary.  This enables more inlining, increase code\n+By default GCC inlines string operations only when the destination is \n+known to be aligned to least a 4-byte boundary.  \n+This enables more inlining, increase code\n size, but may improve performance of code that depends on fast memcpy, strlen\n and memset for short lengths.\n \n@@ -14118,7 +14119,7 @@ routine for the debugger.\n \n @item -mmalloc64\n @opindex mmalloc64\n-Default to 64bit memory allocation routines.\n+Default to 64-bit memory allocation routines.\n @end table\n \n @node LM32 Options\n@@ -14727,7 +14728,7 @@ Always treat bit-fields as int-sized.\n @itemx -mno-4byte-functions\n @opindex m4byte-functions\n @opindex mno-4byte-functions\n-Force all functions to be aligned to a four byte boundary.\n+Force all functions to be aligned to a 4-byte boundary.\n \n @item -mcallgraph-data\n @itemx -mno-callgraph-data\n@@ -14795,7 +14796,7 @@ registers.\n @opindex mbased=\n Variables of size @var{n} bytes or smaller will be placed in the\n @code{.based} section by default.  Based variables use the @code{$tp}\n-register as a base register, and there is a 128 byte limit to the\n+register as a base register, and there is a 128-byte limit to the\n @code{.based} section.\n \n @item -mbitops\n@@ -14895,7 +14896,7 @@ low-overhead looping.\n @item -ms\n @opindex ms\n Causes all variables to default to the @code{.tiny} section.  Note\n-that there is a 65536 byte limit to this section.  Accesses to these\n+that there is a 65536-byte limit to this section.  Accesses to these\n variables use the @code{%gp} base register.\n \n @item -msatur\n@@ -14927,7 +14928,7 @@ this option, functions default to the @code{.near} section.\n Variables that are @var{n} bytes or smaller will be allocated to the\n @code{.tiny} section.  These variables use the @code{$gp} base\n register.  The default for this option is 4, but note that there's a\n-65536 byte limit to the @code{.tiny} section.\n+65536-byte limit to the @code{.tiny} section.\n \n @end table\n \n@@ -16748,9 +16749,9 @@ and unions that contain bit-fields to be aligned to the base type of the\n bit-field.\n \n For example, by default a structure containing nothing but 8\n-@code{unsigned} bit-fields of length 1 would be aligned to a 4 byte\n-boundary and have a size of 4 bytes.  By using @option{-mno-bit-align},\n-the structure would be aligned to a 1 byte boundary and be one byte in\n+@code{unsigned} bit-fields of length 1 is aligned to a 4-byte\n+boundary and has a size of 4 bytes.  By using @option{-mno-bit-align},\n+the structure is aligned to a 1-byte boundary and is 1 byte in\n size.\n \n @item -mno-strict-align\n@@ -16771,7 +16772,7 @@ PowerPC system loader should relocate the entire contents of\n a table of 32-bit addresses generated by this option.  For this to\n work, all objects linked together must be compiled with\n @option{-mrelocatable} or @option{-mrelocatable-lib}.\n-@option{-mrelocatable} code aligns the stack to an 8 byte boundary.\n+@option{-mrelocatable} code aligns the stack to an 8-byte boundary.\n \n @item -mrelocatable-lib\n @itemx -mno-relocatable-lib\n@@ -16987,11 +16988,11 @@ header to indicate that @samp{eabi} extended relocations are used.\n On System V.4 and embedded PowerPC systems do (do not) adhere to the\n Embedded Applications Binary Interface (eabi) which is a set of\n modifications to the System V.4 specifications.  Selecting @option{-meabi}\n-means that the stack is aligned to an 8 byte boundary, a function\n+means that the stack is aligned to an 8-byte boundary, a function\n @code{__eabi} is called to from @code{main} to set up the eabi\n environment, and the @option{-msdata} option can use both @code{r2} and\n @code{r13} to point to two separate small data areas.  Selecting\n-@option{-mno-eabi} means that the stack is aligned to a 16 byte boundary,\n+@option{-mno-eabi} means that the stack is aligned to a 16-byte boundary,\n do not call an initialization function from @code{main}, and the\n @option{-msdata} option will only use @code{r13} to point to a single\n small data area.  The @option{-meabi} option is on by default if you\n@@ -17201,7 +17202,7 @@ the floating-point number is too large to fit in an integer.\n @opindex mpointers-to-nested-functions\n Generate (do not generate) code to load up the static chain register\n (@var{r11}) when calling through a pointer on AIX and 64-bit Linux\n-systems where a function pointer points to a 3 word descriptor giving\n+systems where a function pointer points to a 3-word descriptor giving\n the function address, TOC value to be loaded in register @var{r2}, and\n static chain value to be loaded in register @var{r11}.  The\n @option{-mpointers-to-nested-functions} is on by default.  You will\n@@ -17425,7 +17426,7 @@ instructions.  This is the default for @option{-march=z9-ec} or higher.\n @opindex mlong-double-64\n @opindex mlong-double-128\n These switches control the size of @code{long double} type. A size\n-of 64bit makes the @code{long double} type equivalent to the @code{double}\n+of 64 bits makes the @code{long double} type equivalent to the @code{double}\n type. This is the default.\n \n @item -mbackchain\n@@ -17779,7 +17780,7 @@ Mark the @code{MAC} register as call-clobbered, even if\n @opindex mieee\n Increase IEEE compliance of floating-point code.\n At the moment, this is equivalent to @option{-fno-finite-math-only}.\n-When generating 16 bit SH opcodes, getting IEEE-conforming results for\n+When generating 16-bit SH opcodes, getting IEEE-conforming results for\n comparisons of NANs / infinities incurs extra overhead in every\n floating-point comparison, therefore the default is set to\n @option{-ffinite-math-only}.\n@@ -17878,7 +17879,7 @@ needed for unwinding to avoid changing the stack frame around conditional code.\n \n @item -mdivsi3_libfunc=@var{name}\n @opindex mdivsi3_libfunc=@var{name}\n-Set the name of the library function used for 32 bit signed division to\n+Set the name of the library function used for 32-bit signed division to\n @var{name}.  This only affect the name used in the call and inv:call\n division strategies, and the compiler will still expect the same\n sets of input/output/clobbered registers as if this option was not present.\n@@ -17900,12 +17901,12 @@ TARGET_ADJUST_UNROLL_MAX target hook.\n @item -mindexed-addressing\n @opindex mindexed-addressing\n Enable the use of the indexed addressing mode for SHmedia32/SHcompact.\n-This is only safe if the hardware and/or OS implement 32 bit wrap-around\n+This is only safe if the hardware and/or OS implement 32-bit wrap-around\n semantics for the indexed addressing mode.  The architecture allows the\n-implementation of processors with 64 bit MMU, which the OS could use to\n-get 32 bit addressing, but since no current hardware implementation supports\n+implementation of processors with 64-bit MMU, which the OS could use to\n+get 32-bit addressing, but since no current hardware implementation supports\n this or any other way to make the indexed addressing mode safe to use in\n-the 32 bit ABI, the default is -mno-indexed-addressing.\n+the 32-bit ABI, the default is @option{-mno-indexed-addressing}.\n \n @item -mgettrcost=@var{number}\n @opindex mgettrcost=@var{number}\n@@ -18059,11 +18060,11 @@ this is much slower than calling the ABI library routines.  Thus the\n @itemx -munaligned-doubles\n @opindex mno-unaligned-doubles\n @opindex munaligned-doubles\n-Assume that doubles have 8 byte alignment.  This is the default.\n+Assume that doubles have 8-byte alignment.  This is the default.\n \n-With @option{-munaligned-doubles}, GCC assumes that doubles have 8 byte\n+With @option{-munaligned-doubles}, GCC assumes that doubles have 8-byte\n alignment only if they are contained in another type, or if they have an\n-absolute address.  Otherwise, it assumes they have 4 byte alignment.\n+absolute address.  Otherwise, it assumes they have 4-byte alignment.\n Specifying this option avoids some rare compatibility problems with code\n generated by other compilers.  It is not the default because it results\n in a performance loss, especially for floating-point code.\n@@ -18073,7 +18074,7 @@ in a performance loss, especially for floating-point code.\n @opindex mno-faster-structs\n @opindex mfaster-structs\n With @option{-mfaster-structs}, the compiler assumes that structures\n-should have 8 byte alignment.  This enables the use of pairs of\n+should have 8-byte alignment.  This enables the use of pairs of\n @code{ldd} and @code{std} instructions for copies in structure\n assignment, in place of twice as many @code{ld} and @code{st} pairs.\n However, the use of this changed alignment directly violates the SPARC\n@@ -18181,7 +18182,7 @@ native Solaris and GNU/Linux toolchains, @samp{native} can also be used.\n @opindex mno-v8plus\n With @option{-mv8plus}, GCC generates code for the SPARC-V8+ ABI@.  The\n difference from the V8 ABI is that the global and out registers are\n-considered 64-bit wide.  This is enabled by default on Solaris in 32-bit\n+considered 64 bits wide.  This is enabled by default on Solaris in 32-bit\n mode for all SPARC-V9 processors.\n \n @item -mvis\n@@ -18364,7 +18365,7 @@ or to make an object a little bit smaller.\n \n By default, GCC generates code assuming that addresses are never larger\n than 18 bits.  With @option{-mlarge-mem} code is generated that assumes\n-a full 32 bit address.\n+a full 32-bit address.\n \n @item -mstdmain\n @opindex mstdmain\n@@ -19388,8 +19389,8 @@ field's type, aligned to a natural alignment if possible.  For\n example, targets with memory-mapped peripheral registers might require\n all such accesses to be 16 bits wide; with this flag the user could\n declare all peripheral bitfields as ``unsigned short'' (assuming short\n-is 16 bits on these targets) to force GCC to use 16 bit accesses\n-instead of, perhaps, a more efficient 32 bit access.\n+is 16 bits on these targets) to force GCC to use 16-bit accesses\n+instead of, perhaps, a more efficient 32-bit access.\n \n If this option is disabled, the compiler will use the most efficient\n instruction.  In the previous example, that might be a 32-bit load"}]}