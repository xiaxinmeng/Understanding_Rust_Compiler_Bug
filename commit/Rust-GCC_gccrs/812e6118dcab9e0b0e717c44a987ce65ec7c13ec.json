{"sha": "812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEyZTYxMThkY2FiOWUwYjBlNzE3YzQ0YTk4N2NlNjVlYzdjMTNlYw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2018-05-30T08:57:44Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-30T08:57:44Z"}, "message": "[Ada] Spell preanalysis, preanalyze correctly\n\n2018-05-30  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* aspects.ads, contracts.adb, exp_util.adb, expander.adb, expander.ads,\n\tfreeze.adb, inline.adb, lib-xref.adb, sem.ads, sem_aggr.adb,\n\tsem_attr.adb, sem_ch13.adb, sem_ch3.adb, sem_ch5.adb, sem_ch6.adb,\n\tsem_ch8.adb, sem_dim.adb, sem_elab.adb, sem_res.adb, sem_res.ads,\n\tsinfo.ads: Spell preanalysis, preanalyze correctly.\n\nFrom-SVN: r260937", "tree": {"sha": "586116fe9dbaf0dd4e45e3723e1944ee5660de88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/586116fe9dbaf0dd4e45e3723e1944ee5660de88"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "83d849a82572a11104ea861b16ca5a8a6451ae3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83d849a82572a11104ea861b16ca5a8a6451ae3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83d849a82572a11104ea861b16ca5a8a6451ae3b"}], "stats": {"total": 84, "additions": 46, "deletions": 38}, "files": [{"sha": "1e1056b6fd9a921118482a3c04cb0e41f59b3ce4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -1,3 +1,11 @@\n+2018-05-30  Bob Duff  <duff@adacore.com>\n+\n+\t* aspects.ads, contracts.adb, exp_util.adb, expander.adb, expander.ads,\n+\tfreeze.adb, inline.adb, lib-xref.adb, sem.ads, sem_aggr.adb,\n+\tsem_attr.adb, sem_ch13.adb, sem_ch3.adb, sem_ch5.adb, sem_ch6.adb,\n+\tsem_ch8.adb, sem_dim.adb, sem_elab.adb, sem_res.adb, sem_res.ads,\n+\tsinfo.ads: Spell preanalysis, preanalyze correctly.\n+\n 2018-05-30  Bob Duff  <duff@adacore.com>\n \n \t* libgnat/g-sestin.ads: Rework documentation comments."}, {"sha": "16dcab8c9ef7ce921a8ec6a911ccb1e7eec4a67a", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -59,7 +59,7 @@\n --    5. If the semantic analysis of expressions/names in the aspect should not\n --       occur at the point the aspect is defined, add code in the adequate\n --       semantic analysis procedure for the aspect. For example, this is the\n---       case for aspects Pre and Post on subprograms, which are pre-analyzed\n+--       case for aspects Pre and Post on subprograms, which are preanalyzed\n --       at the end of the declaration list to which the subprogram belongs,\n --       and fully analyzed (possibly with expansion) during the semantic\n --       analysis of subprogram bodies."}, {"sha": "51cde068db15c5746409a79194ad8efee31729b2", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -405,7 +405,7 @@ package body Contracts is\n          then\n             Analyze_Task_Contract (Defining_Entity (Decl));\n \n-         --  For type declarations, we need to do the pre-analysis of Iterable\n+         --  For type declarations, we need to do the preanalysis of Iterable\n          --  aspect specifications.\n \n          --  Other type aspects need to be resolved here???"}, {"sha": "7573121c1547b793ac5f132af96fd8c1c363f9ae", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -11194,7 +11194,7 @@ package body Exp_Util is\n       --  Handle cases in which there is nothing to do. In GNATprove mode,\n       --  removal of side effects is useful for the light expansion of\n       --  renamings. This removal should only occur when not inside a\n-      --  generic and not doing a pre-analysis.\n+      --  generic and not doing a preanalysis.\n \n       if not Expander_Active\n         and (Inside_A_Generic or not Full_Analysis or not GNATprove_Mode)"}, {"sha": "f6d91dc0bb3df8a512f65bae6e086b33d5c7efaf", "filename": "gcc/ada/expander.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fexpander.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fexpander.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -125,12 +125,12 @@ package body Expander is\n \n       --  The first is when are not generating code. In this mode the\n       --  Full_Analysis flag indicates whether we are performing a complete\n-      --  analysis, in which case Full_Analysis = True or a pre-analysis in\n+      --  analysis, in which case Full_Analysis = True or a preanalysis in\n       --  which case Full_Analysis = False. See the spec of Sem for more info\n       --  on this.\n \n       --  The second reason for the Expander_Active flag to be False is that\n-      --  we are performing a pre-analysis. During pre-analysis all expansion\n+      --  we are performing a preanalysis. During preanalysis all expansion\n       --  activity is turned off to make sure nodes are semantically decorated\n       --  but no extra nodes are generated. This is for instance needed for\n       --  the first pass of aggregate semantic processing. Note that in this"}, {"sha": "b3e933c59abd6811b851009bd3d9e64aa980d8f9", "filename": "gcc/ada/expander.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fexpander.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fexpander.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.ads?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -135,12 +135,12 @@ package Expander is\n    --        or declaration (see routines Start_Generic_Processing and\n    --        End_Generic_Processing in Sem_Ch12)\n    --\n-   --    (b) when starting/completing the pre-analysis of an expression\n-   --        (see the spec of package Sem for more info on pre-analysis.)\n+   --    (b) when starting/completing the preanalysis of an expression\n+   --        (see the spec of package Sem for more info on preanalysis.)\n    --\n    --  Note that when processing a spec expression (In_Spec_Expression\n    --  is True) or performing semantic analysis of a generic spec or body\n-   --  (Inside_A_Generic) or when performing pre-analysis (Full_Analysis is\n+   --  (Inside_A_Generic) or when performing preanalysis (Full_Analysis is\n    --  False) the Expander_Active flag is False.\n \n    procedure Expand (N : Node_Id);"}, {"sha": "598714980b6ab5325dc58bb4856e5d31edbfe413", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -186,7 +186,7 @@ package body Freeze is\n    --  This procedure is called for each subprogram to complete processing of\n    --  default expressions at the point where all types are known to be frozen.\n    --  The expressions must be analyzed in full, to make sure that all error\n-   --  processing is done (they have only been pre-analyzed). If the expression\n+   --  processing is done (they have only been preanalyzed). If the expression\n    --  is not an entity or literal, its analysis may generate code which must\n    --  not be executed. In that case we build a function body to hold that\n    --  code. This wrapper function serves no other purpose (it used to be"}, {"sha": "336b336365af134d0db176effc333e3efcc279dd", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -1156,7 +1156,7 @@ package body Inline is\n          Append (Body_To_Analyze, Declarations (N));\n       end if;\n \n-      --  The body to inline is pre-analyzed. In GNATprove mode we must disable\n+      --  The body to inline is preanalyzed. In GNATprove mode we must disable\n       --  full analysis as well so that light expansion does not take place\n       --  either, and name resolution is unaffected.\n "}, {"sha": "eaa7aa64c4945be21f4644c30c6dacbeec54b925", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -666,7 +666,7 @@ package body Lib.Xref is\n \n       --  Do not generate references if we are within a postcondition sub-\n       --  program, because the reference does not comes from source, and the\n-      --  pre-analysis of the aspect has already created an entry for the ALI\n+      --  preanalysis of the aspect has already created an entry for the ALI\n       --  file at the proper source location.\n \n       if Chars (Current_Scope) = Name_uPostconditions then"}, {"sha": "0d8f41d7a074ee6f503b69c4cdb0c6f1662cced3", "filename": "gcc/ada/sem.ads", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.ads?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -161,7 +161,7 @@\n --  code for the pragma is generated.\n \n ------------------\n--- Pre-Analysis --\n+-- Preanalysis --\n ------------------\n \n --  For certain kind of expressions, such as aggregates, we need to defer\n@@ -186,17 +186,17 @@\n --  expanded code for \"new Thing (Function_Call)\".\n \n --  To remedy this situation we introduce a flag that signals whether we want a\n---  full analysis (i.e. expansion is enabled) or a pre-analysis which performs\n+--  full analysis (i.e. expansion is enabled) or a preanalysis which performs\n --  Analysis and Resolution but no expansion.\n \n---  After the complete pre-analysis of an expression has been carried out we\n+--  After the complete preanalysis of an expression has been carried out we\n --  can transform the expression and then carry out the full three stage\n --  (Analyze-Resolve-Expand) cycle on the transformed expression top-down so\n --  that the expansion of inner expressions happens inside the newly generated\n --  node for the parent expression.\n \n --  Note that the difference between processing of default expressions and\n---  pre-analysis of other expressions is that we do carry out freezing in\n+--  preanalysis of other expressions is that we do carry out freezing in\n --  the latter but not in the former (except for static scalar expressions).\n --  The routine that performs preanalysis and corresponding resolution is\n --  called Preanalyze_And_Resolve and is in Sem_Res.\n@@ -214,12 +214,12 @@ package Sem is\n    -----------------------------\n \n    Full_Analysis : Boolean := True;\n-   --  Switch to indicate if we are doing a full analysis or a pre-analysis.\n+   --  Switch to indicate if we are doing a full analysis or a preanalysis.\n    --  In normal analysis mode (Analysis-Expansion for instructions or\n    --  declarations) or (Analysis-Resolution-Expansion for expressions) this\n    --  flag is set. Note that if we are not generating code the expansion phase\n    --  merely sets the Analyzed flag to True in this case. If we are in\n-   --  Pre-Analysis mode (see above) this flag is set to False then the\n+   --  Preanalysis mode (see above) this flag is set to False then the\n    --  expansion phase is skipped.\n    --\n    --  When this flag is False the flag Expander_Active is also False (the\n@@ -688,9 +688,9 @@ package Sem is\n    --  Determine whether preanalysis is active at the point of invocation\n \n    procedure Preanalyze (N : Node_Id);\n-   --  Performs a pre-analysis of node N. During pre-analysis no expansion is\n-   --  carried out for N or its children. For more info on pre-analysis read\n-   --  the spec of Sem.\n+   --  Performs a preanalysis of node N. During preanalysis no expansion is\n+   --  carried out for N or its children. See above for more info on\n+   --  preanalysis.\n \n    generic\n       with procedure Action (Item : Node_Id);"}, {"sha": "5e8705f90af000d51c3a119f2bac37cdf04a11cb", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -115,7 +115,7 @@ package body Sem_Aggr is\n    --  expressions allowed for a limited component association (namely, an\n    --  aggregate, function call, or <> notation). Report error for violations.\n    --  Expression is also OK in an instance or inlining context, because we\n-   --  have already pre-analyzed and it is known to be type correct.\n+   --  have already preanalyzed and it is known to be type correct.\n \n    procedure Check_Qualified_Aggregate (Level : Nat; Expr : Node_Id);\n    --  Given aggregate Expr, check that sub-aggregates of Expr that are nested"}, {"sha": "cb1b2d5d2cc71acfad1de5690238244619380557", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -1799,7 +1799,7 @@ package body Sem_Attr is\n             --  designated type of the access type, since the type of the\n             --  referenced array is this type (see AI95-00106).\n \n-            --  As done elsewhere, freezing must not happen when pre-analyzing\n+            --  As done elsewhere, freezing must not happen when preanalyzing\n             --  a pre- or postcondition or a default value for an object or for\n             --  a formal parameter.\n "}, {"sha": "d287f2632b53b62f2c52872cdb3831c65aac2b9e", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -119,7 +119,7 @@ package body Sem_Ch13 is\n    --  Build the declaration for a predicate function. The declaration is built\n    --  at the end of the declarative part containing the type definition, which\n    --  may be before the freeze point of the type. The predicate expression is\n-   --  pre-analyzed at this point, to catch visibility errors.\n+   --  preanalyzed at this point, to catch visibility errors.\n \n    procedure Build_Predicate_Functions (Typ : Entity_Id; N : Node_Id);\n    --  If Typ has predicates (indicated by Has_Predicates being set for Typ),\n@@ -8839,7 +8839,7 @@ package body Sem_Ch13 is\n \n             --  within a generic unit, prevent a double analysis of the body\n             --  which will not be marked analyzed yet. This will happen when\n-            --  the freeze node is created during the pre-analysis of an\n+            --  the freeze node is created during the preanalysis of an\n             --  expression function.\n \n             if Inside_A_Generic then"}, {"sha": "b9186d73ae347509f148b03ce2f0cf915bde0ccd", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -2218,7 +2218,7 @@ package body Sem_Ch3 is\n       --  Context denotes the owner of the declarative list.\n \n       procedure Check_Entry_Contracts;\n-      --  Perform a pre-analysis of the pre- and postconditions of an entry\n+      --  Perform a preanalysis of the pre- and postconditions of an entry\n       --  declaration. This must be done before full resolution and creation\n       --  of the parameter block, etc. to catch illegal uses within the\n       --  contract expression. Full analysis of the expression is done when\n@@ -5286,7 +5286,7 @@ package body Sem_Ch3 is\n \n       --  Finally this happens in some complex cases when validity checks are\n       --  enabled, where the same subtype declaration may be analyzed twice.\n-      --  This can happen if the subtype is created by the pre-analysis of\n+      --  This can happen if the subtype is created by the preanalysis of\n       --  an attribute tht gives the range of a loop statement, and the loop\n       --  itself appears within an if_statement that will be rewritten during\n       --  expansion."}, {"sha": "3ce57ea3d4b38eff5535d24bb199ac21bb4c0d64", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -2278,7 +2278,7 @@ package body Sem_Ch5 is\n          begin\n \n             --  If the domain of iteration is an array component that depends\n-            --  on a discriminant, create actual subtype for it. Pre-analysis\n+            --  on a discriminant, create actual subtype for it. preanalysis\n             --  does not generate the actual subtype of a selected component.\n \n             if Nkind (Iter_Name) = N_Selected_Component\n@@ -2702,7 +2702,7 @@ package body Sem_Ch5 is\n       --  If the iteration is given by a range, create temporaries and\n       --  assignment statements block to capture the bounds and perform\n       --  required finalization actions in case a bound includes a function\n-      --  call that uses the temporary stack. We first pre-analyze a copy of\n+      --  call that uses the temporary stack. We first preanalyze a copy of\n       --  the range in order to determine the expected type, and analyze and\n       --  resolve the original bounds.\n \n@@ -3131,7 +3131,7 @@ package body Sem_Ch5 is\n \n          else\n             --  A quantified expression that appears in a pre/post condition\n-            --  is pre-analyzed several times.  If the range is given by an\n+            --  is preanalyzed several times.  If the range is given by an\n             --  attribute reference it is rewritten as a range, and this is\n             --  done even with expansion disabled. If the type is already set\n             --  do not reanalyze, because a range with static bounds may be"}, {"sha": "f000f71a3a9a6bbc4dbb67d98d5d95ede33dd2c0", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -708,7 +708,7 @@ package body Sem_Ch6 is\n          Set_Corresponding_Body (N, Defining_Entity (New_Body));\n          Set_Corresponding_Spec (New_Body, Def_Id);\n \n-         --  Within a generic pre-analyze the original expression for name\n+         --  Within a generic preanalyze the original expression for name\n          --  capture. The body is also generated but plays no role in\n          --  this because it is not part of the original source.\n \n@@ -3643,7 +3643,7 @@ package body Sem_Ch6 is\n \n                if No (Spec_Id) and then GNATprove_Mode\n \n-                 --  Inlining does not apply during pre-analysis of code\n+                 --  Inlining does not apply during preanalysis of code\n \n                  and then Full_Analysis\n "}, {"sha": "02471d73bbb368ad00d43a8a4eb61d4f1c1eeaec", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -7109,7 +7109,7 @@ package body Sem_Ch8 is\n             end if;\n \n          --  If the selected component appears within a default expression\n-         --  and it has an actual subtype, the pre-analysis has not yet\n+         --  and it has an actual subtype, the preanalysis has not yet\n          --  completed its analysis, because Insert_Actions is disabled in\n          --  that context. Within the init proc of the enclosing type we\n          --  must complete this analysis, if an actual subtype was created."}, {"sha": "884c86f5aa2011cd6d5da9aa097de1b024cba2c1", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -1558,7 +1558,7 @@ package body Sem_Dim is\n             --  For relational operations, only dimension checking is\n             --  performed (no propagation). If one operand is the result\n             --  of constant folding the dimensions may have been lost\n-            --  in a tree copy, so assume that pre-analysis has verified\n+            --  in a tree copy, so assume that preanalysis has verified\n             --  that dimensions are correct.\n \n             elsif N_Kind in N_Op_Compare then"}, {"sha": "72bb0cbc46e02bec6c7e821a50d72d05c5a39500", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -12945,7 +12945,7 @@ package body Sem_Elab is\n       then\n          return;\n \n-      --  Nothing to do if call is being pre-analyzed, as when within a\n+      --  Nothing to do if call is being preanalyzed, as when within a\n       --  pre/postcondition, a predicate, or an invariant.\n \n       elsif In_Spec_Expression then"}, {"sha": "9df0cd6ae5a000f7d8edcdfbef6eb6a748e36994", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -6676,7 +6676,7 @@ package body Sem_Res is\n                Cannot_Inline\n                  (\"cannot inline & (in default expression)?\", N, Nam_UA);\n \n-            --  Inlining should not be performed during pre-analysis\n+            --  Inlining should not be performed during preanalysis\n \n             elsif Full_Analysis then\n "}, {"sha": "58c8b5ebaa6515a511a1eb1e431fb3912c9e21a3", "filename": "gcc/ada/sem_res.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_res.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsem_res.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.ads?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -85,9 +85,9 @@ package Sem_Res is\n    --  The parameter T is the Typ for the corresponding resolve call.\n \n    procedure Preanalyze_And_Resolve (N : Node_Id; T : Entity_Id);\n-   --  Performs a pre-analysis of expression node N. During pre-analysis, N is\n+   --  Performs a preanalysis of expression node N. During preanalysis, N is\n    --  analyzed and then resolved against type T, but no expansion is carried\n-   --  out for N or its children. For more info on pre-analysis read the spec\n+   --  out for N or its children. For more info on preanalysis read the spec\n    --  of Sem.\n \n    procedure Preanalyze_And_Resolve (N : Node_Id);"}, {"sha": "6aaeff86c2594bdad5f23db04ead32baa524dcb6", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/812e6118dcab9e0b0e717c44a987ce65ec7c13ec/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=812e6118dcab9e0b0e717c44a987ce65ec7c13ec", "patch": "@@ -640,7 +640,7 @@ package Sinfo is\n \n    --  The tree after this light expansion should be fully analyzed\n    --  semantically, which sometimes requires the insertion of semantic\n-   --  pre-analysis, for example for subprogram contracts and pragma\n+   --  preanalysis, for example for subprogram contracts and pragma\n    --  check/assert. In particular, all expression must have their proper type,\n    --  and semantic links should be set between tree nodes (partial to full\n    --  view, etc.) Some kinds of nodes should be either absent, or can be"}]}