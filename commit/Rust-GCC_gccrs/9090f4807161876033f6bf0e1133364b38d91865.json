{"sha": "9090f4807161876033f6bf0e1133364b38d91865", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA5MGY0ODA3MTYxODc2MDMzZjZiZjBlMTEzMzM2NGIzOGQ5MTg2NQ==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2021-04-21T22:07:39Z"}, "committer": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2021-06-09T16:20:07Z"}, "message": "Conversions between 128-bit integer and floating point values.\n\nThe files fixkfti-sw.c and fixunskfti-sw.c are renamed versions of\nfixkfti.c and fixunskfti.c respectively to do the conversions in software.\nThe function names in the files were updated with the rename as well as\nsome white spaces fixes. The file float128-p10.c contains the functions\nfor using the ISA 3.1 hardware instructions to perform the conversions.\n\n2021-06-08  Carl Love  <cel@us.ibm.com>\n\ngcc/ChangeLog\n\n\t* config/rs6000/rs6000.c (__fixkfti, __fixunskfti, __floattikf,\n\t__floatuntikf): Names changed to __fixkfti_sw, __fixunskfti_sw,\n\t__floattikf_sw, __floatuntikf_sw respectively.\n\t* config/rs6000/rs6000.md (floatti<mode>2, floatunsti<mode>2,\n\tfix_trunc<mode>ti2, fixuns_trunc<mode>ti2): Add\n\tdefine_insn for mode IEEE 128.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.target/powerpc/fp128_conversions.c: New file.\n\t* gcc.target/powerpc/int_128bit-runnable.c(vextsd2q,\n\tvcmpuq, vcmpsq, vcmpequq, vcmpequq., vcmpgtsq, vcmpgtsq.\n\tvcmpgtuq, vcmpgtuq.): Update scan-assembler-times.\n\t(ppc_native_128bit): Remove dg-require-effective-target.\n\nlibgcc/ChangeLog\n\n\t* config.host: Add if test and set for\n\tlibgcc_cv_powerpc_3_1_float128_hw.\n\t* config/rs6000/fixkfti.c: Renamed to fixkfti-sw.c.\n\tChange calls of __fixkfti to __fixkfti_sw.\n\t* config/rs6000/fixunskfti.c: Renamed to fixunskfti-sw.c.\n\tChange calls of __fixunskfti to __fixunskfti_sw.\n\t* config/rs6000/float128-p10.c (__floattikf_hw,\n\t__floatuntikf_hw, __fixkfti_hw, __fixunskfti_hw): New file.\n\t* config/rs6000/float128-ifunc.c (SW_OR_HW_ISA3_1): New macro.\n\t(__floattikf_resolve, __floatuntikf_resolve, __fixkfti_resolve,\n\t__fixunskfti_resolve): Add resolve functions.\n\t(__floattikf, __floatuntikf, __fixkfti, __fixunskfti): New functions.\n\t* config/rs6000/float128-sed (floattitf, __floatuntitf,\n\t__fixtfti, __fixunstfti): Add editor commands to change names.\n\t* config/rs6000/float128-sed-hw (__floattitf,\n\t__floatuntitf, __fixtfti, __fixunstfti): Add editor commands to\n\tchange names.\n\t* config/rs6000/floattikf.c: Renamed to floattikf-sw.c.\n\t* config/rs6000/floatuntikf.c: Renamed to floatuntikf-sw.c.\n\t* config/rs6000/quad-float128.h (__floattikf_sw,\n\t__floatuntikf_sw, __fixkfti_sw, __fixunskfti_sw, __floattikf_hw,\n\t__floatuntikf_hw, __fixkfti_hw, __fixunskfti_hw, __floattikf,\n\t__floatuntikf, __fixkfti, __fixunskfti): New extern declarations.\n\t* config/rs6000/t-float128 (floattikf, floatuntikf,\n\tfixkfti, fixunskfti): Remove file names from fp128_ppc_funcs.\n\t(floattikf-sw, floatuntikf-sw, fixkfti-sw, fixunskfti-sw): Add\n\tfile names to fp128_ppc_funcs.\n\t* config/rs6000/t-float128-hw(fp128_3_1_hw_funcs,\n\tfp128_3_1_hw_src, fp128_3_1_hw_static_obj, fp128_3_1_hw_shared_obj,\n\tfp128_3_1_hw_obj): Add variables for ISA 3.1 support.\n\t* config/rs6000/t-float128-p10-hw: New file.\n\t* configure: Update script for isa 3.1 128-bit float support.\n\t* configure.ac: Add check for 128-bit float hardware support.", "tree": {"sha": "5360f8bb969758257a28e52ef2839137fd8934bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5360f8bb969758257a28e52ef2839137fd8934bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9090f4807161876033f6bf0e1133364b38d91865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9090f4807161876033f6bf0e1133364b38d91865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9090f4807161876033f6bf0e1133364b38d91865", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9090f4807161876033f6bf0e1133364b38d91865/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f170186446d03638cd82e37aa2a1bcf4dc1adba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f170186446d03638cd82e37aa2a1bcf4dc1adba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f170186446d03638cd82e37aa2a1bcf4dc1adba2"}], "stats": {"total": 625, "additions": 589, "deletions": 36}, "files": [{"sha": "75c2cc4f8b7b11827861f088bc9f25224b8fb4ae", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -11014,10 +11014,10 @@ init_float128_ieee (machine_mode mode)\n \n       if (TARGET_POWERPC64)\n \t{\n-\t  set_conv_libfunc (sfix_optab, TImode, mode, \"__fixkfti\");\n-\t  set_conv_libfunc (ufix_optab, TImode, mode, \"__fixunskfti\");\n-\t  set_conv_libfunc (sfloat_optab, mode, TImode, \"__floattikf\");\n-\t  set_conv_libfunc (ufloat_optab, mode, TImode, \"__floatuntikf\");\n+\t  set_conv_libfunc (sfix_optab, TImode, mode, \"__fixkfti_sw\");\n+\t  set_conv_libfunc (ufix_optab, TImode, mode, \"__fixunskfti_sw\");\n+\t  set_conv_libfunc (sfloat_optab, mode, TImode, \"__floattikf_sw\");\n+\t  set_conv_libfunc (ufloat_optab, mode, TImode, \"__floatuntikf_sw\");\n \t}\n     }\n "}, {"sha": "89c70f4a64e4b37c0d8b862922b069ab5b6dfd3e", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -6441,6 +6441,42 @@\n    xscvsxddp %x0,%x1\"\n   [(set_attr \"type\" \"fp\")])\n \n+(define_insn \"floatti<mode>2\"\n+  [(set (match_operand:IEEE128 0 \"vsx_register_operand\" \"=v\")\n+\t(float:IEEE128 (match_operand:TI 1 \"vsx_register_operand\" \"v\")))]\n+  \"TARGET_POWER10\"\n+{\n+  return  \"xscvsqqp %0,%1\";\n+}\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"floatunsti<mode>2\"\n+  [(set (match_operand:IEEE128 0 \"vsx_register_operand\" \"=v\")\n+\t(unsigned_float:IEEE128 (match_operand:TI 1 \"vsx_register_operand\" \"v\")))]\n+  \"TARGET_POWER10\"\n+{\n+  return  \"xscvuqqp %0,%1\";\n+}\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"fix_trunc<mode>ti2\"\n+  [(set (match_operand:TI 0 \"vsx_register_operand\" \"=v\")\n+\t(fix:TI (match_operand:IEEE128 1 \"vsx_register_operand\" \"v\")))]\n+  \"TARGET_POWER10\"\n+{\n+  return  \"xscvqpsqz %0,%1\";\n+}\n+  [(set_attr \"type\" \"fp\")])\n+\n+(define_insn \"fixuns_trunc<mode>ti2\"\n+  [(set (match_operand:TI 0 \"vsx_register_operand\" \"=v\")\n+\t(unsigned_fix:TI (match_operand:IEEE128 1 \"vsx_register_operand\" \"v\")))]\n+  \"TARGET_POWER10\"\n+{\n+  return  \"xscvqpuqz %0,%1\";\n+}\n+  [(set_attr \"type\" \"fp\")])\n+\n ; Allow the combiner to merge source memory operands to the conversion so that\n ; the optimizer/register allocator doesn't try to load the value too early in a\n ; GPR and then use store/load to move it to a FPR and suffer from a store-load"}, {"sha": "c20282fa0e0bc5c4c41609b3baa9e50888e78d20", "filename": "gcc/testsuite/gcc.target/powerpc/fp128_conversions.c", "status": "added", "additions": 294, "deletions": 0, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffp128_conversions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffp128_conversions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffp128_conversions.c?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -0,0 +1,294 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target power10_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -save-temps\" } */\n+\n+/* Check that the expected 128-bit instructions are generated if the processor\n+   supports the 128-bit integer instructions. */\n+/* { dg-final { scan-assembler-times {\\mxscvsqqp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxscvuqqp\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxscvqpsqz\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxscvqpuqz\\M} 1 } } */\n+\n+#include <stdio.h>\n+#include <math.h>\n+#include <fenv.h>\n+#include <stdlib.h>\n+#include <wchar.h>\n+\n+#define DEBUG 0\n+\n+void\n+abort (void);\n+\n+float\n+conv_i_2_fp( long long int a)\n+{\n+  return (float) a;\n+}\n+\n+double\n+conv_i_2_fpd( long long int a)\n+{\n+  return (double) a;\n+}\n+\n+double\n+conv_ui_2_fpd( unsigned long long int a)\n+{\n+  return (double) a;\n+}\n+\n+__float128\n+conv_i128_2_fp128 (__int128_t a)\n+{\n+  // default, gen inst KF mode\n+  // -mabi=ibmlongdouble, gen inst floattiieee KF mode\n+  // -mabi=ieeelongdouble gen inst floattiieee TF mode\n+  return (__float128) a;\n+}\n+\n+__float128\n+conv_ui128_2_fp128 (__uint128_t a)\n+{\n+  // default, gen inst KF mode\n+  // -mabi=ibmlongdouble, gen inst floattiieee KF mode\n+  // -mabi=ieeelongdouble gen inst floattiieee TF mode\n+  return (__float128) a;\n+}\n+\n+__int128_t\n+conv_fp128_2_i128 (__float128 a)\n+{\n+  // default, gen inst KF mode\n+  // -mabi=ibmlongdouble, gen inst floattiieee KF mode\n+  // -mabi=ieeelongdouble gen inst floattiieee TF mode\n+  return (__int128_t) a;\n+}\n+\n+__uint128_t\n+conv_fp128_2_ui128 (__float128 a)\n+{\n+  // default, gen inst KF mode\n+  // -mabi=ibmlongdouble, gen inst floattiieee KF mode\n+  // -mabi=ieeelongdouble gen inst floattiieee TF mode\n+  return (__uint128_t) a;\n+}\n+\n+long double\n+conv_i128_2_ld (__int128_t a)\n+{\n+  // default, gen call __floattitf\n+  // -mabi=ibmlongdouble, gen call __floattitf\n+  // -mabi=ieeelongdouble gen inst floattiieee TF mode\n+  return (long double) a;\n+}\n+\n+__ibm128\n+conv_i128_2_ibm128 (__int128_t a)\n+{\n+  // default, gen call __floattitf\n+  // -mabi=ibmlongdouble, gen call __floattitf\n+  // -mabi=ieeelongdouble, message uses IBM long double, no binary output\n+  return (__ibm128) a;\n+}\n+\n+int\n+main()\n+{\n+\tfloat a, expected_result_float;\n+\tdouble b, expected_result_double;\n+\tlong long int c, expected_result_llint;\n+\tunsigned long long int u;\n+\t__int128_t d;\n+\t__uint128_t u128;\n+\tunsigned long long expected_result_uint128[2] ;\n+\t__float128 e;\n+\tlong double ld;     // another 128-bit float version\n+\n+\tunion conv_t {\n+\t\tfloat a;\n+\t\tdouble b;\n+\t\tlong long int c;\n+\t\tlong long int128[2] ;\n+\t\tunsigned long long uint128[2] ;\n+\t\tunsigned long long int u;\n+\t\t__int128_t d;\n+\t\t__uint128_t u128;\n+\t\t__float128 e;\n+\t\tlong double ld;     // another 128-bit float version\n+\t} conv, conv_result;\n+\n+\tc = 20;\n+\texpected_result_llint = 20.00000;\n+\ta = conv_i_2_fp (c);\n+\n+\tif (a != expected_result_llint) {\n+#if DEBUG\n+\t\tprintf(\"ERROR: conv_i_2_fp(%lld) = %10.5f\\n\", c, a);\n+\t\tprintf(\"\\n does not match expected_result = %10.5f\\n\\n\",\n+\t\t\t\t expected_result_llint);\n+#else\n+\t\tabort();\n+#endif\n+\t}\n+\n+\tc = 20;\n+\texpected_result_double = 20.00000;\n+\tb = conv_i_2_fpd (c);\n+\n+\tif (b != expected_result_double) {\n+#if DEBUG\n+\t\tprintf(\"ERROR: conv_i_2_fpd(%lld) = %10.5f\\n\", d, b);\n+\t\tprintf(\"\\n does not match expected_result = %10.5f\\n\\n\",\n+\t\t\t\t expected_result_double);\n+ #else\n+\t\tabort();\n+#endif\n+\t}\n+\n+\tu = 20;\n+\texpected_result_double = 20.00000;\n+\tb = conv_ui_2_fpd (u);\n+\n+\tif (b != expected_result_double) {\n+#if DEBUG\n+\t\tprintf(\"ERROR: conv_ui_2_fpd(%llu) = %10.5f\\n\", u, b);\n+\t\tprintf(\"\\n does not match expected_result = %10.5f\\n\\n\",\n+\t\t\t\t expected_result_double);\n+ #else\n+\t\tabort();\n+#endif\n+\t}\n+\n+  d = -3210;\n+  d = (d * 10000000000) + 9876543210;\n+  conv_result.e = conv_i128_2_fp128 (d);\n+  expected_result_uint128[1] = 0xc02bd2f9068d1160;\n+  expected_result_uint128[0] = 0x0;\n+  \n+  if ((conv_result.uint128[1] != expected_result_uint128[1])\n+\t\t&& (conv_result.uint128[0] != expected_result_uint128[0])) {\n+#if DEBUG\n+\t  printf(\"ERROR: conv_i128_2_fp128(-32109876543210) = (result in hex) 0x%llx %llx\\n\",\n+\t\t\t\tconv.uint128[1], conv.uint128[0]);\n+\t  printf(\"\\n does not match expected_result = (result in hex) 0x%llx %llx\\n\\n\",\n+\t\t\t\texpected_result_uint128[1], expected_result_uint128[0]);\n+ #else\n+\t  abort();\n+#endif\n+\t}\n+\n+  d = 123;\n+  d = (d * 10000000000) + 1234567890;\n+  conv_result.ld = conv_i128_2_fp128 (d);\n+  expected_result_uint128[1] = 0x0;\n+  expected_result_uint128[0] = 0x4271eab4c8ed2000;\n+\n+  if ((conv_result.uint128[1] != expected_result_uint128[1])\n+\t\t&& (conv_result.uint128[0] != expected_result_uint128[0])) {\n+#if DEBUG\n+\t  printf(\"ERROR: conv_i128_2_fp128(1231234567890) = (result in hex) 0x%llx %llx\\n\",\n+\t\t\t\tconv.uint128[1], conv.uint128[0]);\n+\t  printf(\"\\n does not match expected_result = (result in hex) 0x%llx %llx\\n\\n\",\n+\t\t\t\texpected_result_uint128[1], expected_result_uint128[0]);\n+ #else\n+\t  abort();\n+#endif\n+\t}\n+\n+  u128 = 8760;\n+  u128 = (u128 * 10000000000) + 1234567890;\n+  conv_result.e = conv_ui128_2_fp128 (u128);\n+  expected_result_uint128[1] = 0x402d3eb101df8b48;\n+  expected_result_uint128[0] = 0x0;\n+\n+  if ((conv_result.uint128[1] != expected_result_uint128[1])\n+\t\t&& (conv_result.uint128[0] != expected_result_uint128[0])) {\n+#if DEBUG\n+\t  printf(\"ERROR: conv_ui128_2_fp128(87601234567890) = (result in hex) 0x%llx %llx\\n\",\n+\t\t\t\tconv.uint128[1], conv.uint128[0]);\n+\t  printf(\"\\n does not match expected_result = (result in hex) 0x%llx %llx\\n\\n\",\n+\t\t\t\texpected_result_uint128[1], expected_result_uint128[0]);\n+ #else\n+\t  abort();\n+#endif\n+\t}\n+\n+  u128 = 3210;\n+  u128 = (u128 * 10000000000) + 9876543210;\n+  expected_result_uint128[1] = 0x402bd3429c8feea0;\n+  expected_result_uint128[0] = 0x0;\n+  conv_result.e = conv_ui128_2_fp128 (u128);\n+\n+  if ((conv_result.uint128[1] != expected_result_uint128[1])\n+\t\t&& (conv_result.uint128[0] != expected_result_uint128[0])) {\n+#if DEBUG\n+\t  printf(\"ERROR: conv_ui128_2_fp128(32109876543210) = (result in hex) 0x%llx %llx\\n\",\n+\t\t\t\tconv.uint128[1], conv.uint128[0]);\n+\t  printf(\"\\n does not match expected_result = (result in hex) 0x%llx %llx\\n\\n\",\n+\t\t\t\texpected_result_uint128[1], expected_result_uint128[0]);\n+ #else\n+\t  abort();\n+#endif\n+\t}\n+\n+  conv.e = 12345.6789;\n+  expected_result_uint128[1] = 0x1407374883526960;\n+  expected_result_uint128[0] = 0x3039;\n+\n+  conv_result.d = conv_fp128_2_i128 (conv.e);\n+\n+  if ((conv_result.uint128[1] != expected_result_uint128[1])\n+\t\t&& (conv_result.uint128[0] != expected_result_uint128[0])) {\n+#if DEBUG\n+\t  printf(\"ERROR: conv_fp128_2_i128(0x%llx %llx) =  \",\n+\t\t\t\tconv.uint128[1], conv.uint128[0]);\n+\t  printf(\"0x%llx %llx\\n\", conv_result.uint128[1], conv_result.uint128[0]);\n+\n+\t  printf(\"\\n does not match expected_result = (result in hex) 0x%llx %llx\\n\\n\",\n+\t\t\t\texpected_result_uint128[1], expected_result_uint128[0]);\n+ #else\n+\t  abort();\n+#endif\n+\t}\n+\n+  conv.e = -6789.12345;\n+  expected_result_uint128[1] = 0x0;\n+  expected_result_uint128[0] = 0xffffffffffffe57b;\n+  conv_result.d = conv_fp128_2_i128 (conv.e);\n+ \n+  if ((conv_result.uint128[1] != expected_result_uint128[1])\n+\t\t&& (conv_result.uint128[0] != expected_result_uint128[0])) {\n+#if DEBUG\n+\t  printf(\"ERROR: conv_fp128_2_i128(0x%llx %llx) = \",\n+\t\t\t\tconv.uint128[1], conv.uint128[0]);\n+\t  printf(\"0x%llx %llx\\n\", conv_result.uint128[1], conv_result.uint128[0]);\n+\n+\t  printf(\"\\n does not match expected_result = (result in hex) 0x%llx %llx\\n\\n\",\n+\t\t\t\texpected_result_uint128[1], expected_result_uint128[0]);\n+ #else\n+\t  abort();\n+#endif\n+\t}\n+\n+  conv.e = 6789.12345;\n+  expected_result_uint128[1] = 0x0;\n+  expected_result_uint128[0] = 0x1a85;\n+  conv_result.d = conv_fp128_2_ui128 (conv.e);\n+ \n+  if ((conv_result.uint128[1] != expected_result_uint128[1])\n+\t\t&& (conv_result.uint128[0] != expected_result_uint128[0])) {\n+#if DEBUG\n+\t  printf(\"ERROR: conv_fp128_2_ui128(0x%llx %llx) = \",\n+\t\t\t\tconv.uint128[1], conv.uint128[0]);\n+\t  printf(\"0x%llx %llx\\n\", conv_result.uint128[1], conv_result.uint128[0]);\n+\t  \n+\t  printf(\"\\n does not match expected_result = (result in hex) 0x%llx %llx\\n\\n\",\n+\t\t\t\texpected_result_uint128[1], expected_result_uint128[0]);\n+ #else\n+\t  abort();\n+#endif\n+\t}\n+\n+  return 0;\n+}"}, {"sha": "94dbd2b623072f39c3291a175745b09ecdf13d90", "filename": "gcc/testsuite/gcc.target/powerpc/int_128bit-runnable.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -4,21 +4,16 @@\n \n /* Check that the expected 128-bit instructions are generated if the processor\n    supports the 128-bit integer instructions. */\n+/* { dg-final { scan-assembler-times {\\mvextsd2q\\M} 4 } } */\n /* { dg-final { scan-assembler-times {\\mvslq\\M} 2 } } */\n /* { dg-final { scan-assembler-times {\\mvsrq\\M} 2 } } */\n /* { dg-final { scan-assembler-times {\\mvsraq\\M} 2 } } */\n /* { dg-final { scan-assembler-times {\\mvrlq\\M} 2 } } */\n /* { dg-final { scan-assembler-times {\\mvrlqnm\\M} 2 } } */\n /* { dg-final { scan-assembler-times {\\mvrlqmi\\M} 2 } } */\n-/* { dg-final { scan-assembler-times {\\mvcmpuq\\M} 0 } } */\n-/* { dg-final { scan-assembler-times {\\mvcmpsq\\M} 0 } } */\n-/* { dg-final { scan-assembler-times {\\mvcmpequq\\M} 0 } } */\n-/* { dg-final { scan-assembler-times {\\mvcmpequq.\\M} 16 } } */\n-/* { dg-final { scan-assembler-times {\\mvcmpgtsq\\M} 0 } } */\n-/* { dg-final { scan-assembler-times {\\mvcmpgtsq.\\M} 16 } } */\n-/* { dg-final { scan-assembler-times {\\mvcmpgtuq\\M} 0 } } */\n-/* { dg-final { scan-assembler-times {\\mvcmpgtuq.\\M} 16 } } */\n-/* { dg-final { scan-assembler-times {\\mvmuleud\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvcmpequq\\M} 16 } } */\n+/* { dg-final { scan-assembler-times {\\mvcmpgtsq\\M} 16 } } */\n+/* { dg-final { scan-assembler-times {\\mvcmpgtuq\\M} 16 } } */\n /* { dg-final { scan-assembler-times {\\mvmuloud\\M} 1 } } */\n /* { dg-final { scan-assembler-times {\\mvmulesd\\M} 1 } } */\n /* { dg-final { scan-assembler-times {\\mvmulosd\\M} 1 } } */"}, {"sha": "50f00062232b0279ac45420cc9a2a5683ace2262", "filename": "libgcc/config.host", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -1224,6 +1224,10 @@ powerpc*-*-linux*)\n \t\ttmake_file=\"${tmake_file} rs6000/t-float128-hw\"\n \tfi\n \n+\tif test $libgcc_cv_powerpc_3_1_float128_hw = yes; then\n+\t\ttmake_file=\"${tmake_file} rs6000/t-float128-p10-hw\"\n+\tfi\n+\n \textra_parts=\"$extra_parts ecrti.o ecrtn.o ncrti.o ncrtn.o\"\n \tmd_unwind_header=rs6000/linux-unwind.h\n \t;;"}, {"sha": "cc000fca0f8a37197e3b16973a1d06cfbc535dbf", "filename": "libgcc/config/rs6000/fixkfti-sw.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffixkfti-sw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffixkfti-sw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ffixkfti-sw.c?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -5,7 +5,7 @@\n    This file is part of the GNU C Library.\n    Contributed by Steven Munroe (munroesj@linux.vnet.ibm.com)\n    Code is based on the main soft-fp library written by:\n-   \t   Uros Bizjak (ubizjak@gmail.com).\n+\t   Uros Bizjak (ubizjak@gmail.com).\n \n    The GNU C Library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n@@ -35,7 +35,7 @@\n #include \"quad-float128.h\"\n \n TItype\n-__fixkfti (TFtype a)\n+__fixkfti_sw (TFtype a)\n {\n   FP_DECL_EX;\n   FP_DECL_Q (A);", "previous_filename": "libgcc/config/rs6000/fixkfti.c"}, {"sha": "7a04d1a489a66645edf1734a94be9e4c40de914a", "filename": "libgcc/config/rs6000/fixunskfti-sw.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffixunskfti-sw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffixunskfti-sw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ffixunskfti-sw.c?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -5,7 +5,7 @@\n    This file is part of the GNU C Library.\n    Contributed by Steven Munroe (munroesj@linux.vnet.ibm.com)\n    Code is based on the main soft-fp library written by:\n-   \t   Uros Bizjak (ubizjak@gmail.com).\n+\t   Uros Bizjak (ubizjak@gmail.com).\n \n    The GNU C Library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n@@ -35,7 +35,7 @@\n #include \"quad-float128.h\"\n \n UTItype\n-__fixunskfti (TFtype a)\n+__fixunskfti_sw (TFtype a)\n {\n   FP_DECL_EX;\n   FP_DECL_Q (A);", "previous_filename": "libgcc/config/rs6000/fixunskfti.c"}, {"sha": "57545dd7edbb8cf7e5b78b99e8af53115738acab", "filename": "libgcc/config/rs6000/float128-ifunc.c", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffloat128-ifunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffloat128-ifunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ffloat128-ifunc.c?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -46,14 +46,9 @@\n #endif\n \n #define SW_OR_HW(SW, HW) (__builtin_cpu_supports (\"ieee128\") ? HW : SW)\n+#define SW_OR_HW_ISA3_1(SW, HW) (__builtin_cpu_supports (\"arch_3_1\") ? HW : SW)\n \n /* Resolvers.  */\n-\n-/* We do not provide ifunc resolvers for __fixkfti, __fixunskfti, __floattikf,\n-   and __floatuntikf.  There is no ISA 3.0 instruction that converts between\n-   128-bit integer types and 128-bit IEEE floating point, or vice versa.  So\n-   use the emulator functions for these conversions.  */\n-\n static __typeof__ (__addkf3_sw) *\n __addkf3_resolve (void)\n {\n@@ -102,6 +97,18 @@ __floatdikf_resolve (void)\n   return SW_OR_HW (__floatdikf_sw, __floatdikf_hw);\n }\n \n+static __typeof__ (__floattikf_sw) *\n+__floattikf_resolve (void)\n+{\n+  return SW_OR_HW_ISA3_1 (__floattikf_sw, __floattikf_hw);\n+}\n+\n+static __typeof__ (__floatuntikf_sw) *\n+__floatuntikf_resolve (void)\n+{\n+  return SW_OR_HW_ISA3_1 (__floatuntikf_sw, __floatuntikf_hw);\n+}\n+\n static __typeof__ (__floatunsikf_sw) *\n __floatunsikf_resolve (void)\n {\n@@ -114,6 +121,19 @@ __floatundikf_resolve (void)\n   return SW_OR_HW (__floatundikf_sw, __floatundikf_hw);\n }\n \n+\n+static __typeof__ (__fixkfti_sw) *\n+__fixkfti_resolve (void)\n+{\n+  return SW_OR_HW_ISA3_1 (__fixkfti_sw, __fixkfti_hw);\n+}\n+\n+static __typeof__ (__fixunskfti_sw) *\n+__fixunskfti_resolve (void)\n+{\n+  return SW_OR_HW_ISA3_1 (__fixunskfti_sw, __fixunskfti_hw);\n+}\n+\n static __typeof__ (__fixkfsi_sw) *\n __fixkfsi_resolve (void)\n {\n@@ -303,6 +323,18 @@ TFtype __floatsikf (SItype_ppc)\n TFtype __floatdikf (DItype_ppc)\n   __attribute__ ((__ifunc__ (\"__floatdikf_resolve\")));\n \n+TFtype __floattikf (TItype_ppc)\n+  __attribute__ ((__ifunc__ (\"__floattikf_resolve\")));\n+\n+TFtype __floatuntikf (UTItype_ppc)\n+  __attribute__ ((__ifunc__ (\"__floatuntikf_resolve\")));\n+\n+TItype_ppc __fixkfti (TFtype)\n+  __attribute__ ((__ifunc__ (\"__fixkfti_resolve\")));\n+\n+UTItype_ppc __fixunskfti (TFtype)\n+  __attribute__ ((__ifunc__ (\"__fixunskfti_resolve\")));\n+\n TFtype __floatunsikf (USItype_ppc)\n   __attribute__ ((__ifunc__ (\"__floatunsikf_resolve\")));\n "}, {"sha": "7f5d317631a3f11f676034cd3c613a566e48d16d", "filename": "libgcc/config/rs6000/float128-p10.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffloat128-p10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffloat128-p10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ffloat128-p10.c?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -0,0 +1,71 @@\n+/* Automatic switching between software and hardware IEEE 128-bit\n+   ISA 3.1 floating-point emulation for PowerPC.\n+\n+   Copyright (C) 2016-2020 Free Software Foundation, Inc.\n+   This file is part of the GNU C Library.\n+   Contributed by Carl Love (cel@us.ibm.com)\n+   Code is based on the main soft-fp library written by:\n+\tRichard Henderson (rth@cygnus.com) and\n+\tJakub Jelinek (jj@ultra.linux.cz).\n+\n+   The GNU C Library is free software; you can redistribute it and/or\n+   modify it under the terms of the GNU Lesser General Public\n+   License as published by the Free Software Foundation; either\n+   version 2.1 of the License, or (at your option) any later version.\n+\n+   In addition to the permissions in the GNU Lesser General Public\n+   License, the Free Software Foundation gives you unlimited\n+   permission to link the compiled version of this file into\n+   combinations with other programs, and to distribute those\n+   combinations without any restriction coming from the use of this\n+   file.  (The Lesser General Public License restrictions do apply in\n+   other respects; for example, they cover modification of the file,\n+   and distribution when not linked into a combine executable.)\n+\n+   The GNU C Library is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+   Lesser General Public License for more details.\n+\n+   You should have received a copy of the GNU Lesser General Public\n+   License along with the GNU C Library; if not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Note, the hardware conversion instructions for 128-bit integers are\n+   supported for ISA 3.1 and later.  Only compile this file with -mcpu=power10\n+   or newer support.  */\n+\n+#include <soft-fp.h>\n+#include <quad-float128.h>\n+\n+#ifndef __FLOAT128_HARDWARE__\n+#error \"This module must be compiled with IEEE 128-bit hardware support\"\n+#endif\n+\n+#ifndef _ARCH_PWR10\n+#error \"This module must be compiled for Power 10 support\"\n+#endif\n+\n+TFtype\n+__floattikf_hw (TItype_ppc a)\n+{\n+  return (TFtype) a;\n+}\n+\n+TFtype\n+__floatuntikf_hw (UTItype_ppc a)\n+{\n+  return (TFtype) a;\n+}\n+\n+TItype_ppc\n+__fixkfti_hw (TFtype a)\n+{\n+  return (TItype_ppc) a;\n+}\n+\n+UTItype_ppc\n+__fixunskfti_hw (TFtype a)\n+{\n+  return (UTItype_ppc) a;\n+}"}, {"sha": "c0fcddb1959b328f459c56e0a580eac6137e7e6d", "filename": "libgcc/config/rs6000/float128-sed", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffloat128-sed", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffloat128-sed", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ffloat128-sed?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -8,6 +8,10 @@ s/__fixtfsi/__fixkfsi/g\n s/__fixunstfdi/__fixunskfdi/g\n s/__fixunstfsi/__fixunskfsi/g\n s/__floatditf/__floatdikf/g\n+s/__floattitf/__floattikf/g\n+s/__floatuntitf/__floatuntikf/g\n+s/__fixtfti/__fixkfti/g\n+s/__fixunstfti/__fixunskfti/g\n s/__floatsitf/__floatsikf/g\n s/__floatunditf/__floatundikf/g\n s/__floatunsitf/__floatunsikf/g"}, {"sha": "3d2bf556da1a1164bf085d72430e6abc478b13b5", "filename": "libgcc/config/rs6000/float128-sed-hw", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffloat128-sed-hw", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffloat128-sed-hw", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ffloat128-sed-hw?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -8,6 +8,10 @@ s/__fixtfsi/__fixkfsi_sw/g\n s/__fixunstfdi/__fixunskfdi_sw/g\n s/__fixunstfsi/__fixunskfsi_sw/g\n s/__floatditf/__floatdikf_sw/g\n+s/__floattitf/__floattikf_sw/g\n+s/__floatuntitf/__floatuntikf_sw/g\n+s/__fixtfti/__fixkfti_sw/g\n+s/__fixunstfti/__fixunskfti_sw/g\n s/__floatsitf/__floatsikf_sw/g\n s/__floatunditf/__floatundikf_sw/g\n s/__floatunsitf/__floatunsikf_sw/g"}, {"sha": "4e1786cd229058832f1ed72a6b41af2272663bd6", "filename": "libgcc/config/rs6000/floattikf-sw.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffloattikf-sw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffloattikf-sw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ffloattikf-sw.c?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -5,7 +5,7 @@\n    This file is part of the GNU C Library.\n    Contributed by Steven Munroe (munroesj@linux.vnet.ibm.com)\n    Code is based on the main soft-fp library written by:\n-   \t   Uros Bizjak (ubizjak@gmail.com).\n+\t   Uros Bizjak (ubizjak@gmail.com).\n \n    The GNU C Library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n@@ -35,7 +35,7 @@\n #include \"quad-float128.h\"\n \n TFtype\n-__floattikf (TItype i)\n+__floattikf_sw (TItype i)\n {\n   FP_DECL_EX;\n   FP_DECL_Q (A);", "previous_filename": "libgcc/config/rs6000/floattikf.c"}, {"sha": "c4b814ddd682c2691eb2477b1dc5585e5fd5d270", "filename": "libgcc/config/rs6000/floatuntikf-sw.c", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffloatuntikf-sw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ffloatuntikf-sw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ffloatuntikf-sw.c?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -5,7 +5,7 @@\n    This file is part of the GNU C Library.\n    Contributed by Steven Munroe (munroesj@linux.vnet.ibm.com)\n    Code is based on the main soft-fp library written by:\n-   \t   Uros Bizjak (ubizjak@gmail.com).\n+\t   Uros Bizjak (ubizjak@gmail.com).\n \n    The GNU C Library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n@@ -35,7 +35,7 @@\n #include \"quad-float128.h\"\n \n TFtype\n-__floatuntikf (UTItype i)\n+__floatuntikf_sw (UTItype i)\n {\n   FP_DECL_EX;\n   FP_DECL_Q (A);", "previous_filename": "libgcc/config/rs6000/floatuntikf.c"}, {"sha": "c4d775b4ad3ff42e6446603db107f118637e4f12", "filename": "libgcc/config/rs6000/quad-float128.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -88,19 +88,18 @@ extern USItype_ppc __fixunskfsi_sw (TFtype);\n extern UDItype_ppc __fixunskfdi_sw (TFtype);\n extern TFtype __floatsikf_sw (SItype_ppc);\n extern TFtype __floatdikf_sw (DItype_ppc);\n+extern TFtype __floattikf_sw (TItype_ppc);\n extern TFtype __floatunsikf_sw (USItype_ppc);\n extern TFtype __floatundikf_sw (UDItype_ppc);\n+extern TFtype __floatuntikf_sw (UTItype_ppc);\n+extern TItype_ppc __fixkfti_sw (TFtype);\n+extern UTItype_ppc __fixunskfti_sw (TFtype);\n extern IBM128_TYPE __extendkftf2_sw (TFtype);\n extern TFtype __trunctfkf2_sw (IBM128_TYPE);\n extern TCtype __mulkc3_sw (TFtype, TFtype, TFtype, TFtype);\n extern TCtype __divkc3_sw (TFtype, TFtype, TFtype, TFtype);\n \n #ifdef _ARCH_PPC64\n-/* We do not provide ifunc resolvers for __fixkfti, __fixunskfti, __floattikf,\n-   and __floatuntikf.  There is no ISA 3.0 instruction that converts between\n-   128-bit integer types and 128-bit IEEE floating point, or vice versa.  So\n-   use the emulator functions for these conversions.  */\n-\n extern TItype_ppc __fixkfti (TFtype);\n extern UTItype_ppc __fixunskfti (TFtype);\n extern TFtype __floattikf (TItype_ppc);\n@@ -131,8 +130,12 @@ extern USItype_ppc __fixunskfsi_hw (TFtype);\n extern UDItype_ppc __fixunskfdi_hw (TFtype);\n extern TFtype __floatsikf_hw (SItype_ppc);\n extern TFtype __floatdikf_hw (DItype_ppc);\n+extern TFtype __floattikf_hw (TItype_ppc);\n extern TFtype __floatunsikf_hw (USItype_ppc);\n extern TFtype __floatundikf_hw (UDItype_ppc);\n+extern TFtype __floatuntikf_hw (UTItype_ppc);\n+extern TItype_ppc __fixkfti_hw (TFtype);\n+extern UTItype_ppc __fixunskfti_hw (TFtype);\n extern IBM128_TYPE __extendkftf2_hw (TFtype);\n extern TFtype __trunctfkf2_hw (IBM128_TYPE);\n extern TCtype __mulkc3_hw (TFtype, TFtype, TFtype, TFtype);\n@@ -163,8 +166,12 @@ extern USItype_ppc __fixunskfsi (TFtype);\n extern UDItype_ppc __fixunskfdi (TFtype);\n extern TFtype __floatsikf (SItype_ppc);\n extern TFtype __floatdikf (DItype_ppc);\n+extern TFtype __floattikf (TItype_ppc);\n extern TFtype __floatunsikf (USItype_ppc);\n extern TFtype __floatundikf (UDItype_ppc);\n+extern TFtype __floatuntikf (UTItype_ppc);\n+extern TItype_ppc __fixkfti (TFtype);\n+extern UTItype_ppc __fixunskfti (TFtype);\n extern IBM128_TYPE __extendkftf2 (TFtype);\n extern TFtype __trunctfkf2 (IBM128_TYPE);\n "}, {"sha": "b09b5664af0ec31fc81276dabd2ea4d99ab43f36", "filename": "libgcc/config/rs6000/t-float128", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ft-float128", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ft-float128", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-float128?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -31,7 +31,8 @@ ibm128_dec_funcs\t= _tf_to_sd _tf_to_dd _tf_to_td \\\n \t\t\t  _sd_to_tf _dd_to_tf _td_to_tf\n \n # New functions for software emulation\n-fp128_ppc_funcs\t\t= floattikf floatuntikf fixkfti fixunskfti \\\n+fp128_ppc_funcs\t\t= floattikf-sw floatuntikf-sw \\\n+\t\t\t  fixkfti-sw fixunskfti-sw \\\n \t\t\t  extendkftf2-sw trunctfkf2-sw \\\n \t\t\t  sfp-exceptions _mulkc3 _divkc3 _powikf2\n \n@@ -47,13 +48,16 @@ fp128_ppc_obj\t\t= $(fp128_ppc_static_obj) $(fp128_ppc_shared_obj)\n \n # All functions\n fp128_funcs\t\t= $(fp128_softfp_funcs) $(fp128_ppc_funcs) \\\n-\t\t\t  $(fp128_hw_funcs) $(fp128_ifunc_funcs)\n+\t\t\t  $(fp128_hw_funcs) $(fp128_ifunc_funcs) \\\n+\t\t\t  $(fp128_3_1_hw_funcs)\n \n fp128_src\t\t= $(fp128_softfp_src) $(fp128_ppc_src) \\\n-\t\t\t  $(fp128_hw_src) $(fp128_ifunc_src)\n+\t\t\t  $(fp128_hw_src) $(fp128_ifunc_src) \\\n+\t\t\t  $(fp128_3_1_hw_src)\n \n fp128_obj\t\t= $(fp128_softfp_obj) $(fp128_ppc_obj) \\\n-\t\t\t  $(fp128_hw_obj) $(fp128_ifunc_obj)\n+\t\t\t  $(fp128_hw_obj) $(fp128_ifunc_obj) \\\n+\t\t\t  $(fp128_3_1_hw_obj)\n \n fp128_sed\t\t= $(srcdir)/config/rs6000/float128-sed$(fp128_sed_hw)\n fp128_dep\t\t= $(fp128_sed) $(srcdir)/config/rs6000/t-float128"}, {"sha": "c0827366cc48ec6b97f43cccc4ef0d15dce4975b", "filename": "libgcc/config/rs6000/t-float128-hw", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ft-float128-hw", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ft-float128-hw", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-float128-hw?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -13,6 +13,13 @@ fp128_hw_static_obj\t= $(addsuffix $(objext),$(fp128_hw_funcs))\n fp128_hw_shared_obj\t= $(addsuffix _s$(objext),$(fp128_hw_funcs))\n fp128_hw_obj\t\t= $(fp128_hw_static_obj) $(fp128_hw_shared_obj)\n \n+# New functions for ISA 3.1 hardware support\n+fp128_3_1_hw_funcs\t= float128-p10\n+fp128_3_1_hw_src\t= $(srcdir)/config/rs6000/float128-p10.c\n+fp128_3_1_hw_static_obj\t= $(addsuffix $(objext),$(fp128_3_1_hw_funcs))\n+fp128_3_1_hw_shared_obj\t= $(addsuffix _s$(objext),$(fp128_3_1_hw_funcs))\n+fp128_3_1_hw_obj\t= $(fp128_3_1_hw_static_obj) $(fp128_3_1_hw_shared_obj)\n+\n fp128_ifunc_funcs\t= float128-ifunc\n fp128_ifunc_src\t\t= $(srcdir)/config/rs6000/float128-ifunc.c\n fp128_ifunc_static_obj\t= float128-ifunc$(objext)\n@@ -30,9 +37,18 @@ FP128_CFLAGS_HW\t\t = -Wno-type-limits -mvsx -mfloat128 \\\n \t\t\t   -I$(srcdir)/config/rs6000 \\\n \t\t\t   $(FLOAT128_HW_INSNS)\n \n+FP128_3_1_CFLAGS_HW\t = -Wno-type-limits -mvsx -mcpu=power10 \\\n+\t\t\t   -mfloat128-hardware -mno-gnu-attribute \\\n+\t\t\t   -I$(srcdir)/soft-fp \\\n+\t\t\t   -I$(srcdir)/config/rs6000 \\\n+\t\t\t   $(FLOAT128_HW_INSNS)\n+\n $(fp128_hw_obj)\t\t : INTERNAL_CFLAGS += $(FP128_CFLAGS_HW)\n $(fp128_hw_obj)\t\t : $(srcdir)/config/rs6000/t-float128-hw\n \n+$(fp128_3_1_hw_obj)\t : INTERNAL_CFLAGS += $(FP128_3_1_CFLAGS_HW)\n+$(fp128_3_1_hw_obj)\t : $(srcdir)/config/rs6000/t-float128-p10-hw\n+\n $(fp128_ifunc_obj)\t : INTERNAL_CFLAGS += $(FP128_CFLAGS_SW)\n $(fp128_ifunc_obj)\t : $(srcdir)/config/rs6000/t-float128-hw\n "}, {"sha": "de36227c3d1c76c9ef85076049c9c1e9924618bb", "filename": "libgcc/config/rs6000/t-float128-p10-hw", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ft-float128-p10-hw", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfig%2Frs6000%2Ft-float128-p10-hw", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-float128-p10-hw?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -0,0 +1,24 @@\n+# Support for adding __float128 hardware support to the powerpc.\n+# Tell the float128 functions that the ISA 3.1 hardware support can\n+# be compiled it to be selected via IFUNC functions.\n+\n+FLOAT128_HW_INSNS\t= -DFLOAT128_HW_INSNS\n+\n+# New functions for hardware support\n+\n+fp128_3_1_hw_funcs\t= float128-p10\n+fp128_3_1_hw_src\t= $(srcdir)/config/rs6000/float128-p10.c\n+fp128_3_1_hw_static_obj\t= $(addsuffix $(objext),$(fp128_3_1_hw_funcs))\n+fp128_3_1_hw_shared_obj\t= $(addsuffix _s$(objext),$(fp128_3_1_hw_funcs))\n+fp128_3_1_hw_obj\t= $(fp128_3_1_hw_static_obj) $(fp128_3_1_hw_shared_obj)\n+\n+# Build the hardware support functions with appropriate hardware support\n+FP128_3_1_CFLAGS_HW\t = -Wno-type-limits -mvsx -mfloat128 \\\n+\t\t\t   -mpower10 \\\n+\t\t\t   -mfloat128-hardware -mno-gnu-attribute \\\n+\t\t\t   -I$(srcdir)/soft-fp \\\n+\t\t\t   -I$(srcdir)/config/rs6000 \\\n+\t\t\t   $(FLOAT128_HW_INSNS)\n+\n+$(fp128_3_1_hw_obj)\t\t : INTERNAL_CFLAGS += $(FP128_3_1_CFLAGS_HW)\n+$(fp128_3_1_hw_obj)\t\t : $(srcdir)/config/rs6000/t-float128-p10-hw"}, {"sha": "ce05e0dd48b7a419e7aff4a85acd67349c6e38d4", "filename": "libgcc/configure", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -5263,6 +5263,43 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_powerpc_float128_hw\" >&5\n $as_echo \"$libgcc_cv_powerpc_float128_hw\" >&6; }\n   CFLAGS=\"$saved_CFLAGS\"\n+\n+  saved_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -mpower10 -mfloat128-hardware\"\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for PowerPC ISA 3.1 to build hardware __float128 libraries\" >&5\n+$as_echo_n \"checking for PowerPC ISA 3.1 to build hardware __float128 libraries... \" >&6; }\n+if ${libgcc_cv_powerpc_float128_hw+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <sys/auxv.h>\n+     #ifndef AT_PLATFORM\n+     #error \"AT_PLATFORM is not defined\"\n+     #endif\n+     #ifndef __BUILTIN_CPU_SUPPORTS__\n+     #error \"__builtin_cpu_supports is not available\"\n+     #endif\n+     vector unsigned char add (vector unsigned char a, vector unsigned char b)\n+     {\n+       vector unsigned char ret;\n+       __asm__ (\"xscvsqqp %0,%1,%2\" : \"=v\" (ret) : \"v\" (a), \"v\" (b));\n+       return ret;\n+     }\n+     void *add_resolver (void) { return (void *) add; }\n+     __float128 add_ifunc (__float128, __float128)\n+\t__attribute__ ((__ifunc__ (\"add_resolver\")));\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  libgcc_cv_powerpc_3_1_float128_hw=yes\n+else\n+  libgcc_cv_powerpc_3_1_float128_hw=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_powerpc_float128_hw\" >&5\n+  $as_echo \"$libgcc_cv_powerpc_float128_hw\" >&6; }\n+  CFLAGS=\"$saved_CFLAGS\"\n esac\n \n # Collect host-machine-specific information."}, {"sha": "bc315dec7e403218d668c48b6d97b0333ab018bb", "filename": "libgcc/configure.ac", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9090f4807161876033f6bf0e1133364b38d91865/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=9090f4807161876033f6bf0e1133364b38d91865", "patch": "@@ -458,6 +458,31 @@ powerpc*-*-linux*)\n     [libgcc_cv_powerpc_float128_hw=yes],\n     [libgcc_cv_powerpc_float128_hw=no])])\n   CFLAGS=\"$saved_CFLAGS\"\n+\n+  saved_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"$CFLAGS -mpower10 -mfloat128-hardware\"\n+  AC_CACHE_CHECK([for PowerPC ISA 3.1 to build hardware __float128 libraries],\n+\t\t [libgcc_cv_powerpc_float128_hw],\n+\t\t [AC_COMPILE_IFELSE(\n+    [AC_LANG_SOURCE([#include <sys/auxv.h>\n+     #ifndef AT_PLATFORM\n+     #error \"AT_PLATFORM is not defined\"\n+     #endif\n+     #ifndef __BUILTIN_CPU_SUPPORTS__\n+     #error \"__builtin_cpu_supports is not available\"\n+     #endif\n+     vector unsigned char add (vector unsigned char a, vector unsigned char b)\n+     {\n+       vector unsigned char ret;\n+       __asm__ (\"xscvsqqp %0,%1,%2\" : \"=v\" (ret) : \"v\" (a), \"v\" (b));\n+       return ret;\n+     }\n+     void *add_resolver (void) { return (void *) add; }\n+     __float128 add_ifunc (__float128, __float128)\n+\t__attribute__ ((__ifunc__ (\"add_resolver\")));])],\n+    [libgcc_cv_powerpc_3_1_float128_hw=yes],\n+    [libgcc_cv_powerpc_3_1_float128_hw=no])])\n+  CFLAGS=\"$saved_CFLAGS\"\n esac\n \n # Collect host-machine-specific information."}]}