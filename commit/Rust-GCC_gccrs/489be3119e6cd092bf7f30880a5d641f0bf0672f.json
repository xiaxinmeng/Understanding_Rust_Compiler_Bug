{"sha": "489be3119e6cd092bf7f30880a5d641f0bf0672f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg5YmUzMTE5ZTZjZDA5MmJmN2YzMDg4MGE1ZDY0MWYwYmYwNjcyZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-11-24T15:01:45Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-11-24T15:01:45Z"}, "message": "aarch64: Fix aapcs64 testsuite failures\n\nVarious aapcs64 tests were failing at -O1 and above because\nthe assignments to testfunc_ptr were being deleted as dead.\nThat in turn happened because FUNC_VAL_CHECK hid the tail call\nto myfunc using an LR asm trick:\n\n    asm volatile (\"mov %0, x30\" : \"=r\" (saved_return_address));\n    asm volatile (\"mov x30, %0\" : : \"r\" ((unsigned long long) myfunc));\n\nand so the compiler couldn't see any calls that might read\ntestfunc_ptr.\n\nThat in itself could be fixed by adding a memory clobber to the\nsecond asm above, forcing the compiler to keep both the testfunc_ptr\nand the saved_return_address assignments.  But since this is an ABI\ntest, it seems better to make sure that we don't do any IPA at all.\nThe fact that doing IPA caused a problem was kind-of helpful and\nso it might be better to avoid making the test \u201cwork\u201d in the\npresence of IPA.\n\nThe patch therefore just replaced \u201cnoinline\u201d with \u201cnoipa\u201d.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/aapcs64/abitest.h (FUNC_VAL_CHECK): Use\n\tnoipa rather than noinline.\n\t* gcc.target/aarch64/aapcs64/abitest-2.h (FUNC_VAL_CHECK): Likewise.", "tree": {"sha": "e6450b53240437f1997d2e4bb9f406c0406ac9ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6450b53240437f1997d2e4bb9f406c0406ac9ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/489be3119e6cd092bf7f30880a5d641f0bf0672f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/489be3119e6cd092bf7f30880a5d641f0bf0672f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/489be3119e6cd092bf7f30880a5d641f0bf0672f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/489be3119e6cd092bf7f30880a5d641f0bf0672f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e0078f8643f9204777152ed0f915b52072a05c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e0078f8643f9204777152ed0f915b52072a05c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e0078f8643f9204777152ed0f915b52072a05c8"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "b917938884bd833b0f13c7c22849349956cd3542", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/abitest-2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/489be3119e6cd092bf7f30880a5d641f0bf0672f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/489be3119e6cd092bf7f30880a5d641f0bf0672f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-2.h?ref=489be3119e6cd092bf7f30880a5d641f0bf0672f", "patch": "@@ -66,7 +66,7 @@ MYFUNCTYPE myfunc () PCSATTR;\n    of bugs like a short vector being returned in X0 after copied from V0.  */\n #undef FUNC_VAL_CHECK\n #define FUNC_VAL_CHECK(id, type, var, offset, layout)\t\t\t  \\\n-__attribute__ ((noinline)) type FUNC_NAME (id) (int i, double d, type t)  \\\n+__attribute__ ((noipa)) type FUNC_NAME (id) (int i, double d, type t)\t  \\\n   {\t\t\t\t\t\t\t\t\t  \\\n     asm (\"\"::\"r\" (i),\"r\" (d)); /* asm prevents function from getting      \\\n \t\t\t\t  optimized away.  Using i and d prevents \\"}, {"sha": "667f4d0f2dd880cb31cda2bc61015f12412bf4bf", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/abitest.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/489be3119e6cd092bf7f30880a5d641f0bf0672f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/489be3119e6cd092bf7f30880a5d641f0bf0672f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest.h?ref=489be3119e6cd092bf7f30880a5d641f0bf0672f", "patch": "@@ -73,7 +73,7 @@ MYFUNCTYPE myfunc(\n \n /* Dummy function to help reset parameter passing registers, i.e. X0-X7\n    and V0-V7 (by being passed 0 in W0-W7 and 0.f in S0-S7).  */\n-__attribute__ ((noinline)) void\n+__attribute__ ((noipa)) void\n dummy_func (int w0, int w1, int w2, int w3, int w4, int w5, int w6, int w7,\n \t    float s0, float s1, float s2, float s3, float s4, float s5,\n \t    float s6, float s7)"}]}