{"sha": "f1544089c12d6288f75074eedbd3b7653b48404c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE1NDQwODljMTJkNjI4OGY3NTA3NGVlZGJkM2I3NjUzYjQ4NDA0Yw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-07-11T10:03:38Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-07-11T10:03:38Z"}, "message": "re PR middle-end/66353 (Missing bb_has_abnormal_call_pred in basic-block.h)\n\n\tPR middle-end/66353\n\t* basic-block.h\t(has_abnormal_call_or_eh_pred_edge_p): New function.\n\t* ira-lives.c (bb_has_abnormal_call_pred): Remove function.\n\t(process_bb_node_lives): Call has_abnormal_call_or_eh_pred_edge_p\n\trather than bb_has_abnormal_call_pred.\n\t* lra-lives.c (bb_has_abnormal_call_pred): Remove function.\n\t(process_bb_lives): Call has_abnormal_call_or_eh_pred_edge_p\n\trather than bb_has_abnormal_call_pred.\n\nFrom-SVN: r225711", "tree": {"sha": "f8104aafda3dcc7f86f9693a27325a81ccd17590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8104aafda3dcc7f86f9693a27325a81ccd17590"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1544089c12d6288f75074eedbd3b7653b48404c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1544089c12d6288f75074eedbd3b7653b48404c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1544089c12d6288f75074eedbd3b7653b48404c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1544089c12d6288f75074eedbd3b7653b48404c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15015c1adbcad827a109ca352b2d88953bd43f7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15015c1adbcad827a109ca352b2d88953bd43f7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15015c1adbcad827a109ca352b2d88953bd43f7a"}], "stats": {"total": 66, "additions": 32, "deletions": 34}, "files": [{"sha": "dd6155e583a13c2c7ac120fe3c1291f5ce283a20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1544089c12d6288f75074eedbd3b7653b48404c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1544089c12d6288f75074eedbd3b7653b48404c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1544089c12d6288f75074eedbd3b7653b48404c", "patch": "@@ -1,3 +1,14 @@\n+2015-07-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR middle-end/66353\n+\t* basic-block.h\t(has_abnormal_call_or_eh_pred_edge_p): New function.\n+\t* ira-lives.c (bb_has_abnormal_call_pred): Remove function.\n+\t(process_bb_node_lives): Call has_abnormal_call_or_eh_pred_edge_p\n+\trather than bb_has_abnormal_call_pred.\n+\t* lra-lives.c (bb_has_abnormal_call_pred): Remove function.\n+\t(process_bb_lives): Call has_abnormal_call_or_eh_pred_edge_p\n+\trather than bb_has_abnormal_call_pred.\n+\n 2015-07-10  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/v850/v850.h (REG_OK_FOR_BASE_P, REG_OK_FOR_INDEX_P,"}, {"sha": "389ed9fcee70293b56a640a7b4941cd39e840fd8", "filename": "gcc/basic-block.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1544089c12d6288f75074eedbd3b7653b48404c/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1544089c12d6288f75074eedbd3b7653b48404c/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=f1544089c12d6288f75074eedbd3b7653b48404c", "patch": "@@ -632,4 +632,21 @@ has_abnormal_or_eh_outgoing_edge_p (basic_block bb)\n \n   return false;\n }\n+\n+/* Return true when one of the predecessor edges of BB is marked with\n+   EDGE_ABNORMAL_CALL or EDGE_EH.  */\n+\n+static inline bool\n+has_abnormal_call_or_eh_pred_edge_p (basic_block bb)\n+{\n+  edge e;\n+  edge_iterator ei;\n+\n+  FOR_EACH_EDGE (e, ei, bb->preds)\n+    if (e->flags & (EDGE_ABNORMAL_CALL | EDGE_EH))\n+      return true;\n+\n+  return false;\n+}\n+\n #endif /* GCC_BASIC_BLOCK_H */"}, {"sha": "1cb05c2b6db66f3099a47025b4af54fdca0ca1f3", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1544089c12d6288f75074eedbd3b7653b48404c/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1544089c12d6288f75074eedbd3b7653b48404c/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=f1544089c12d6288f75074eedbd3b7653b48404c", "patch": "@@ -968,22 +968,6 @@ process_single_reg_class_operands (bool in_p, int freq)\n     }\n }\n \n-/* Return true when one of the predecessor edges of BB is marked with\n-   EDGE_ABNORMAL_CALL or EDGE_EH.  */\n-static bool\n-bb_has_abnormal_call_pred (basic_block bb)\n-{\n-  edge e;\n-  edge_iterator ei;\n-\n-  FOR_EACH_EDGE (e, ei, bb->preds)\n-    {\n-      if (e->flags & (EDGE_ABNORMAL_CALL | EDGE_EH))\n-\treturn true;\n-    }\n-  return false;\n-}\n-\n /* Look through the CALL_INSN_FUNCTION_USAGE of a call insn INSN, and see if\n    we find a SET rtx that we can use to deduce that a register can be cheaply\n    caller-saved.  Return such a register, or NULL_RTX if none is found.  */\n@@ -1343,7 +1327,8 @@ process_bb_node_lives (ira_loop_tree_node_t loop_tree_node)\n \t  /* No need to record conflicts for call clobbered regs if we\n \t     have nonlocal labels around, as we don't ever try to\n \t     allocate such regs in this case.  */\n-\t  if (!cfun->has_nonlocal_label && bb_has_abnormal_call_pred (bb))\n+\t  if (!cfun->has_nonlocal_label\n+\t      && has_abnormal_call_or_eh_pred_edge_p (bb))\n \t    for (px = 0; px < FIRST_PSEUDO_REGISTER; px++)\n \t      if (call_used_regs[px]\n #ifdef REAL_PIC_OFFSET_TABLE_REGNUM"}, {"sha": "322b3bf6551bdfc96dd2982a54a2a5cc15d1bfe6", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1544089c12d6288f75074eedbd3b7653b48404c/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1544089c12d6288f75074eedbd3b7653b48404c/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=f1544089c12d6288f75074eedbd3b7653b48404c", "patch": "@@ -508,22 +508,6 @@ static lra_insn_recog_data_t curr_id;\n /* The insn static data.  */\n static struct lra_static_insn_data *curr_static_id;\n \n-/* Return true when one of the predecessor edges of BB is marked with\n-   EDGE_ABNORMAL_CALL or EDGE_EH.  */\n-static bool\n-bb_has_abnormal_call_pred (basic_block bb)\n-{\n-  edge e;\n-  edge_iterator ei;\n-\n-  FOR_EACH_EDGE (e, ei, bb->preds)\n-    {\n-      if (e->flags & (EDGE_ABNORMAL_CALL | EDGE_EH))\n-\treturn true;\n-    }\n-  return false;\n-}\n-\n /* Vec containing execution frequencies of program points.  */\n static vec<int> point_freq_vec;\n \n@@ -965,7 +949,8 @@ process_bb_lives (basic_block bb, int &curr_point, bool dead_insn_p)\n       /* No need to record conflicts for call clobbered regs if we\n \t have nonlocal labels around, as we don't ever try to\n \t allocate such regs in this case.  */\n-      if (!cfun->has_nonlocal_label && bb_has_abnormal_call_pred (bb))\n+      if (!cfun->has_nonlocal_label\n+\t  && has_abnormal_call_or_eh_pred_edge_p (bb))\n \tfor (px = 0; px < FIRST_PSEUDO_REGISTER; px++)\n \t  if (call_used_regs[px]\n #ifdef REAL_PIC_OFFSET_TABLE_REGNUM"}]}