{"sha": "e49cee5c8dce341f688741e5b093f6b5560c8090", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ5Y2VlNWM4ZGNlMzQxZjY4ODc0MWU1YjA5M2Y2YjU1NjBjODA5MA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-01-27T03:24:59Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-05-09T01:43:51Z"}, "message": "cris.md: Post-reload, split/generate clobberless memory destination moves\n\nIn preparation for compare-elimination (for it to be obviously\nuseful), we have to have some common insn in-between that\ndoesn't clobber condition-codes.  A move to memory is an obvious\nchoice.  Note the FIXME: we can do this for a zero source too;\nlater.\n\ngcc:\n\t* config/cris/cris.md (\"movsi\"): For memory destination\n\tpost-reload, generate clobberless variant.\n\t(\"*mov_tomem<mode>_split\"): New split.\n\t(\"*mov_tomem<mode>\"): New insn.\n\t(\"enabled\", mov_tomem_enabled): Define and use to exclude \"x\" ->\n\t\"Q>m\" for less-than-SImode.", "tree": {"sha": "5bac190390374e2d6228d73eb194990f89973675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bac190390374e2d6228d73eb194990f89973675"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e49cee5c8dce341f688741e5b093f6b5560c8090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49cee5c8dce341f688741e5b093f6b5560c8090", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e49cee5c8dce341f688741e5b093f6b5560c8090", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e49cee5c8dce341f688741e5b093f6b5560c8090/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4f15e7ae10e2ac5f3baa4c1d5e16801e5967c18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f15e7ae10e2ac5f3baa4c1d5e16801e5967c18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f15e7ae10e2ac5f3baa4c1d5e16801e5967c18"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "6234bd71bdb0139047081394b94ba857128456c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49cee5c8dce341f688741e5b093f6b5560c8090/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49cee5c8dce341f688741e5b093f6b5560c8090/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e49cee5c8dce341f688741e5b093f6b5560c8090", "patch": "@@ -42,6 +42,13 @@\n \n \t* config/cris/cris.h (REVERSIBLE_CC_MODE): Define to true.\n \n+\t* config/cris/cris.md (\"movsi\"): For memory destination\n+\tpost-reload, generate clobberless variant.\n+\t(\"*mov_tomem<mode>_split\"): New split.\n+\t(\"*mov_tomem<mode>\"): New insn.\n+\t(\"enabled\", mov_tomem_enabled): Define and use to exclude \"x\" ->\n+\t\"Q>m\" for less-than-SImode.\n+\n 2020-05-08  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* ira-color.c (update_costs_from_allocno): Remove"}, {"sha": "3de2f5a136fd45b9cb36d69c9060ec3f6339d744", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e49cee5c8dce341f688741e5b093f6b5560c8090/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e49cee5c8dce341f688741e5b093f6b5560c8090/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=e49cee5c8dce341f688741e5b093f6b5560c8090", "patch": "@@ -147,6 +147,7 @@\n \t(not (match_test \"dead_or_set_regno_p (insn, CRIS_SRP_REGNUM)\")))\n    (nil) (nil)])\n \n+(define_attr \"enabled\" \"no,yes\" (const_string \"yes\"))\n \f\n ;; Iterator definitions.\n \n@@ -445,6 +446,15 @@\n       && operands[1] != const0_rtx\n       && can_create_pseudo_p ())\n     operands[1] = force_reg (SImode, operands[1]);\n+\n+   /* At post-reload time, we'll get here for e.g. split multi-mode insns\n+      with a memory destination.  Go directly to the clobber-less variant.\n+      FIXME: Also applies to zero source.  */\n+   if (MEM_P (operands[0]) && reload_completed)\n+     {\n+        emit_insn (gen_rtx_SET (operands[0], operands[1]));\n+        DONE;\n+     }\n })\n \n (define_insn \"*movsi_internal\"\n@@ -650,6 +660,43 @@\n    move %1,%0\n    move %1,%0\"\n   [(set_attr \"slottable\" \"yes,yes,yes,yes,yes,no,no,no,yes,yes,yes,no,yes,no\")])\n+\n+;; Post-reload, for memory destinations, split the clobber-variant and\n+;; get rid of the clobber.\n+\n+(define_split ;; \"*mov_tomem<mode>_split\"\n+  [(set (match_operand:BWD 0 \"memory_operand\")\n+\t(match_operand:BWD 1 \"nonmemory_operand\"))\n+   (clobber (reg:CC CRIS_CC0_REGNUM))]\n+  \"reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))]\n+  \"\")\n+\n+;; Exclude moving special-registers to memory from matching for\n+;; less-than-SImode, as they are SImode only (or actually, the size of\n+;; the register, but the ones free for \"x\" are naturally SImode; see\n+;; special measures taken for reload).\n+;; This might be a belt-and-suspenders thing, as a move from special\n+;; register to memory in less-than-SImode should not have made it here.\n+\n+(define_mode_attr mov_tomem_enabled\n+  [(SI \"yes,yes,yes,yes,yes,yes\")\n+   (HI \"yes,yes,no,yes,yes,no\")\n+   (QI \"yes,yes,no,yes,yes,no\")])\n+\n+(define_insn \"*mov_tomem<mode>\"\n+  [(set (match_operand:BWD 0 \"memory_operand\"   \"=Q>,Q>,Q>,m,m,m\")\n+\t(match_operand:BWD 1 \"nonmemory_operand\" \"M, r, x, M,r,x\"))]\n+  \"reload_completed\"\n+  \"@\n+   clear<m> %0\n+   move<m> %1,%0\n+   move %1,%0\n+   clear<m> %0\n+   move<m> %1,%0\n+   move %1,%0\"\n+  [(set_attr \"slottable\" \"yes,yes,yes,no,no,no\")\n+   (set_attr \"enabled\" \"<mov_tomem_enabled>\")])\n \f\n ;; Movem patterns.  Primarily for use in function prologue and epilogue.\n ;; Unfortunately, movem stores R0 in the highest memory location, thus"}]}