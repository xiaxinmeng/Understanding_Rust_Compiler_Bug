{"sha": "f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZkMWMzYTY5YjY0ZWRjMmZmNmQxMGQ4ZWM4OTQ1NjU1MmE1ZjNhOA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-03-20T15:23:50Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-03-20T15:23:50Z"}, "message": "c-common.c (handle_aligned_attribute, [...]): Do not strip NOPS from INTEGER_CSTs.\n\n\t* c-common.c (handle_aligned_attribute, check_function_sentinel,\n\tget_nonnull_operand, handle_sentinel_attribute,\n\tcheck_function_arguments_recurse): Do not strip NOPS from\n\tINTEGER_CSTs.\n\t* c-decl.c (check_bitfield_type_and_width, build_enumerator):\n\tLikewise.\n\t* c-format.c (get_constant): Likewise.\n\t* c-parser.c (c_parser_postfix_expression): Likewise.\n\t* c-typeck.c (set_init_index): Likewise.\n\t(convert_arguments): Don't check for NOP_EXPR containing integer\n\tconstant.\n\nFrom-SVN: r96760", "tree": {"sha": "4b6f9cfd528a8733782d0ef9c585656d6f4190ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b6f9cfd528a8733782d0ef9c585656d6f4190ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e498b9f1a0460c20a42d6835470de35d858379da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e498b9f1a0460c20a42d6835470de35d858379da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e498b9f1a0460c20a42d6835470de35d858379da"}], "stats": {"total": 71, "additions": 17, "deletions": 54}, "files": [{"sha": "171eeefc5f351055683a887a55aafed3fe7e7daa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8", "patch": "@@ -1,3 +1,17 @@\n+2005-03-20  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (handle_aligned_attribute, check_function_sentinel,\n+\tget_nonnull_operand, handle_sentinel_attribute,\n+\tcheck_function_arguments_recurse): Do not strip NOPS from\n+\tINTEGER_CSTs.\n+\t* c-decl.c (check_bitfield_type_and_width, build_enumerator):\n+\tLikewise.\n+\t* c-format.c (get_constant): Likewise.\n+\t* c-parser.c (c_parser_postfix_expression): Likewise.\n+\t* c-typeck.c (set_init_index): Likewise.\n+\t(convert_arguments): Don't check for NOP_EXPR containing integer\n+\tconstant.\n+\n 2005-03-20  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* builtins.c (fold_fixed_mathfn, fold_builtin_trunc,"}, {"sha": "f8162fc64afcaea79a03dd3df7482669b84c05c1", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8", "patch": "@@ -4481,12 +4481,6 @@ handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n   else if (TYPE_P (*node))\n     type = node, is_type = 1;\n \n-  /* Strip any NOPs of any kind.  */\n-  while (TREE_CODE (align_expr) == NOP_EXPR\n-\t || TREE_CODE (align_expr) == CONVERT_EXPR\n-\t || TREE_CODE (align_expr) == NON_LVALUE_EXPR)\n-    align_expr = TREE_OPERAND (align_expr, 0);\n-\n   if (TREE_CODE (align_expr) != INTEGER_CST)\n     {\n       error (\"requested alignment is not a constant\");\n@@ -5119,7 +5113,6 @@ check_function_sentinel (tree attrs, tree params)\n \t  if (TREE_VALUE (attr))\n \t    {\n \t      tree p = TREE_VALUE (TREE_VALUE (attr));\n-\t      STRIP_NOPS (p);\n \t      pos = TREE_INT_CST_LOW (p);\n \t    }\n \n@@ -5199,13 +5192,7 @@ check_nonnull_arg (void * ARG_UNUSED (ctx), tree param,\n static bool\n get_nonnull_operand (tree arg_num_expr, unsigned HOST_WIDE_INT *valp)\n {\n-  /* Strip any conversions from the arg number and verify they\n-     are constants.  */\n-  while (TREE_CODE (arg_num_expr) == NOP_EXPR\n-\t || TREE_CODE (arg_num_expr) == CONVERT_EXPR\n-\t || TREE_CODE (arg_num_expr) == NON_LVALUE_EXPR)\n-    arg_num_expr = TREE_OPERAND (arg_num_expr, 0);\n-\n+  /* Verify the arg number is a constant.  */\n   if (TREE_CODE (arg_num_expr) != INTEGER_CST\n       || TREE_INT_CST_HIGH (arg_num_expr) != 0)\n     return false;\n@@ -5324,7 +5311,6 @@ handle_sentinel_attribute (tree *node, tree name, tree args,\n     {\n       tree position = TREE_VALUE (args);\n \n-      STRIP_NOPS (position);\n       if (TREE_CODE (position) != INTEGER_CST)\n         {\n \t  warning (\"requested position is not an integer constant\");\n@@ -5402,10 +5388,6 @@ check_function_arguments_recurse (void (*callback)\n \t    /* Extract the argument number, which was previously checked\n \t       to be valid.  */\n \t    format_num_expr = TREE_VALUE (TREE_VALUE (attrs));\n-\t    while (TREE_CODE (format_num_expr) == NOP_EXPR\n-\t\t   || TREE_CODE (format_num_expr) == CONVERT_EXPR\n-\t\t   || TREE_CODE (format_num_expr) == NON_LVALUE_EXPR)\n-\t      format_num_expr = TREE_OPERAND (format_num_expr, 0);\n \n \t    gcc_assert (TREE_CODE (format_num_expr) == INTEGER_CST\n \t\t\t&& !TREE_INT_CST_HIGH (format_num_expr));"}, {"sha": "0b86086992e268b7b46f44a8ff9573353847e683", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8", "patch": "@@ -3637,9 +3637,6 @@ check_bitfield_type_and_width (tree *type, tree *width, const char *orig_name)\n   unsigned HOST_WIDE_INT w;\n   const char *name = orig_name ? orig_name: _(\"<anonymous>\");\n \n-  /* Necessary?  */\n-  STRIP_NOPS (*width);\n-\n   /* Detect and ignore out of range field width and process valid\n      field widths.  */\n   if (!INTEGRAL_TYPE_P (TREE_TYPE (*width))\n@@ -5624,10 +5621,6 @@ build_enumerator (tree name, tree value)\n \n   /* Validate and default VALUE.  */\n \n-  /* Remove no-op casts from the value.  */\n-  if (value)\n-    STRIP_TYPE_NOPS (value);\n-\n   if (value != 0)\n     {\n       /* Don't issue more errors for error_mark_node (i.e. an"}, {"sha": "a228b4b886f454dd165aaac41c6823c65921f3a0", "filename": "gcc/c-format.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8", "patch": "@@ -147,17 +147,12 @@ check_format_string (tree argument, unsigned HOST_WIDE_INT format_num,\n   return true;\n }\n \n-/* Strip any conversions from the expression, verify it is a constant,\n-   and store its value. If validated_p is true, abort on errors.\n+/* Verify EXPR is a constant, and store its value.\n+   If validated_p is true, abort on errors.\n    Returns true on success, false otherwise.  */\n static bool\n get_constant (tree expr, unsigned HOST_WIDE_INT *value, int validated_p)\n {\n-  while (TREE_CODE (expr) == NOP_EXPR\n-\t || TREE_CODE (expr) == CONVERT_EXPR\n-\t || TREE_CODE (expr) == NON_LVALUE_EXPR)\n-    expr = TREE_OPERAND (expr, 0);\n-\n   if (TREE_CODE (expr) != INTEGER_CST || TREE_INT_CST_HIGH (expr) != 0)\n     {\n       gcc_assert (!validated_p);"}, {"sha": "99b6e090492e5e382c7b4269631205269f4829d2", "filename": "gcc/c-parser.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8", "patch": "@@ -5019,7 +5019,6 @@ c_parser_postfix_expression (c_parser *parser)\n \t    tree c;\n \n \t    c = fold (e1.value);\n-\t    STRIP_NOPS (c);\n \t    if (TREE_CODE (c) != INTEGER_CST)\n \t      error (\"first argument to %<__builtin_choose_expr%> not\"\n \t\t     \" a constant\");"}, {"sha": "3b35acf928095793b261e08a5c438c5d36131a16", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=f6d1c3a69b64edc2ff6d10d8ec89456552a5f3a8", "patch": "@@ -2234,11 +2234,6 @@ convert_arguments (tree typelist, tree values, tree function, tree fundecl)\n \t\t\t/* Change in signedness doesn't matter\n \t\t\t   if a constant value is unaffected.  */\n \t\t\t;\n-\t\t      /* Likewise for a constant in a NOP_EXPR.  */\n-\t\t      else if (TREE_CODE (val) == NOP_EXPR\n-\t\t\t       && TREE_CODE (TREE_OPERAND (val, 0)) == INTEGER_CST\n-\t\t\t       && int_fits_type_p (TREE_OPERAND (val, 0), type))\n-\t\t\t;\n \t\t      /* If the value is extended from a narrower\n \t\t\t unsigned type, it doesn't matter whether we\n \t\t\t pass it as signed or unsigned; the value\n@@ -5205,21 +5200,6 @@ set_init_index (tree first, tree last)\n       return;\n     }\n \n-  while ((TREE_CODE (first) == NOP_EXPR\n-\t  || TREE_CODE (first) == CONVERT_EXPR\n-\t  || TREE_CODE (first) == NON_LVALUE_EXPR)\n-\t && (TYPE_MODE (TREE_TYPE (first))\n-\t     == TYPE_MODE (TREE_TYPE (TREE_OPERAND (first, 0)))))\n-    first = TREE_OPERAND (first, 0);\n-\n-  if (last)\n-    while ((TREE_CODE (last) == NOP_EXPR\n-\t    || TREE_CODE (last) == CONVERT_EXPR\n-\t    || TREE_CODE (last) == NON_LVALUE_EXPR)\n-\t   && (TYPE_MODE (TREE_TYPE (last))\n-\t       == TYPE_MODE (TREE_TYPE (TREE_OPERAND (last, 0)))))\n-      last = TREE_OPERAND (last, 0);\n-\n   if (TREE_CODE (first) != INTEGER_CST)\n     error_init (\"nonconstant array index in initializer\");\n   else if (last != 0 && TREE_CODE (last) != INTEGER_CST)"}]}