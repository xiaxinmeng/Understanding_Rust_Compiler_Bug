{"sha": "8c1d6d62a680bf67cb921c550662306b4cb3a67b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMxZDZkNjJhNjgwYmY2N2NiOTIxYzU1MDY2MjMwNmI0Y2IzYTY3Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-08-24T16:39:43Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-08-24T16:39:43Z"}, "message": "c-decl.c (c_init_decl_processing): Adjust build_common_tree_nodes call.\n\n\t* c-decl.c (c_init_decl_processing): Adjust\n\tbuild_common_tree_nodes call.\n\t* expmed.c (const_mult_add_overflow_p): Use\n\tbuild_distinct_type_copy.\n\t* stor-layout.c (early_type_list): Remove.\n\t(layout_type): Don't append to early_type_list.\n\t(initialize_sizetypes): Add signed_p argument.\n\t(set_sizetype): Overwrite the stub type nodes directly.\n\t* tree.c (copy_node_stat): Clear a type's value cache here ...\n\t(build_distinct_type): ... not here.\n\t(build_common_tree_nodes): Add signed_sizetype argument. Adjust.\n\t* tree.h (initialize_sizetypes): Add signed_p argument.\n\t(build_common_tree_nodes): Likewise.\n\n\t* ada/utils.c (gnat_init_decl_processing): Adjust\n\tbuild_common_tree_nodes call.\n\n\t* cp/decl.c (cxx_init_decl_processing): Adjust\n\tbuild_common_tree_nodes call.\n\n\t* fortran/f95-lang.c (gfc_init_decl_processing): Adjust\n\tbuild_common_tree_nodes call.\n\n\t* java/decl.c (java_init_decl_processing): Adjust\n\tinitialize_sizetypes call.\n\n\t* objc/objc-act.c (get_static_reference): Use\n\tbuild_variant_type_copy.\n\t(get_protocol_reference): Likewise.\n\t* objc/objc-act.h (TREE_STATIC_TEMPLATE): Use TREE_PRIVATE.\n\n\t* treelang/treetree.c (treelang_init_decl_processing): Adjust\n\tbuild_common_tree_nodes call.\n\nFrom-SVN: r86493", "tree": {"sha": "68fa8feee0d0759d7e8c1a8d496ea0bff1000fc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68fa8feee0d0759d7e8c1a8d496ea0bff1000fc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c1d6d62a680bf67cb921c550662306b4cb3a67b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c1d6d62a680bf67cb921c550662306b4cb3a67b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c1d6d62a680bf67cb921c550662306b4cb3a67b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c1d6d62a680bf67cb921c550662306b4cb3a67b/comments", "author": null, "committer": null, "parents": [{"sha": "436529eae35b089720e402b3e9354b7786ea2c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436529eae35b089720e402b3e9354b7786ea2c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/436529eae35b089720e402b3e9354b7786ea2c38"}], "stats": {"total": 253, "additions": 119, "deletions": 134}, "files": [{"sha": "fa822696d7764ade152d69e1fa40972ec2bf7ccd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -1,3 +1,24 @@\n+2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-decl.c (c_init_decl_processing): Adjust\n+\tbuild_common_tree_nodes call.\n+\t* expmed.c (const_mult_add_overflow_p): Use\n+\tbuild_distinct_type_copy.\n+\t* stor-layout.c (early_type_list): Remove.\n+\t(layout_type): Don't append to early_type_list.\n+\t(initialize_sizetypes): Add signed_p argument.\n+\t(set_sizetype): Overwrite the stub type nodes directly.\n+\t* tree.c (copy_node_stat): Clear a type's value cache here ...\n+\t(build_distinct_type): ... not here.\n+\t(build_common_tree_nodes): Add signed_sizetype argument. Adjust.\n+\t* tree.h (initialize_sizetypes): Add signed_p argument.\n+\t(build_common_tree_nodes): Likewise.\n+\n+\t* objc/objc-act.c (get_static_reference): Use\n+\tbuild_variant_type_copy.\n+\t(get_protocol_reference): Likewise.\n+\t* objc/objc-act.h (TREE_STATIC_TEMPLATE): Use TREE_PRIVATE.\n+\n 2004-08-24  Richard Henderson  <rth@redhat.com>\n             Andrew Pinski  <apinski@apple.com>\n "}, {"sha": "dc3dd9a26f9dfec5feb4ce741ecde4eb6f146102", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -1,3 +1,8 @@\n+2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* ada/utils.c (gnat_init_decl_processing): Adjust\n+\tbuild_common_tree_nodes call.\n+\n 2004-08-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* utils2.c (build_allocator): Use build_int_cst for negative"}, {"sha": "f0440f7eef89f5330364f5677a4ff33d2fe46d2c", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -381,7 +381,7 @@ gnat_init_decl_processing (void)\n   free_binding_level = 0;\n   gnat_pushlevel ();\n \n-  build_common_tree_nodes (0);\n+  build_common_tree_nodes (false, false);\n \n   /* In Ada, we use a signed type for SIZETYPE.  Use the signed type\n      corresponding to the size of Pmode.  In most cases when ptr_mode and"}, {"sha": "ffa4747d02a05eac290a9ef90e6f3dcdc24b39ce", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -2421,7 +2421,7 @@ c_init_decl_processing (void)\n   input_location.line = 0;\n #endif\n \n-  build_common_tree_nodes (flag_signed_char);\n+  build_common_tree_nodes (flag_signed_char, false);\n \n   c_common_nodes_and_builtins ();\n "}, {"sha": "faebdc08cf4cdc61a16a9bb47fcf94b176957a64", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -1,3 +1,8 @@\n+2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp/decl.c (cxx_init_decl_processing): Adjust\n+\tbuild_common_tree_nodes call.\n+\n 2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/16889"}, {"sha": "0ae7d7136fe7be60010a2d4cbd403c66fa8eb6e0", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -2903,7 +2903,7 @@ cxx_init_decl_processing (void)\n   tree void_ftype;\n   tree void_ftype_ptr;\n \n-  build_common_tree_nodes (flag_signed_char);\n+  build_common_tree_nodes (flag_signed_char, false);\n \n   /* Create all the identifiers we need.  */\n   initialize_predefined_identifiers ();"}, {"sha": "dd79390f9e8418fc42d96bbe130fd3ba99e0a7ea", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -4564,13 +4564,7 @@ const_mult_add_overflow_p (rtx x, rtx mult, rtx add,\n     {\n       /* FIXME:It would be nice if we could step directly from this\n \t type to its sizetype equivalent.  */\n-      mult_type = copy_node (type);\n-      if (TYPE_CACHED_VALUES_P (mult_type))\n-\t{\n-\t  /* Clear any set of cached values it has. */\n-\t  TYPE_CACHED_VALUES_P (mult_type) = 0;\n-\t  TYPE_CACHED_VALUES (mult_type) = NULL_TREE;\n-\t}\n+      mult_type = build_distinct_type_copy (type);\n       TYPE_IS_SIZETYPE (mult_type) = 1;\n     }\n "}, {"sha": "29f50695c4a81c84176f3de6b78264c083e3eb03", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -1,3 +1,8 @@\n+2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* fortran/f95-lang.c (gfc_init_decl_processing): Adjust\n+\tbuild_common_tree_nodes call.\n+\n 2004-08-24  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* trans-types.c: Spelling and formatting fixes.\n@@ -1148,7 +1153,7 @@\n \t* symbol.c (gfc_add_common): Disable checks to work around other more\n \tfundamental inadequacies.\n \n-2004-05-22  Tobias Schl\u00fcter  <tobias.schlueter@physik.uni-muenchen.de>\n+2004-05-22  Tobias Schl\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* trans-decl.c (gfc_get_extern_function_decl): Set DECL_IS_PURE\n \tonly for functions.\n@@ -1356,7 +1361,7 @@\n \n \t* decl.c (variable_decl): Always apply default initializer.\n \n-2004-05-08  Tobias Schl\u00fcter <tobias.schlueter@physik.uni-muenchen.de>\n+2004-05-08  Tobias Schl\ufffdter <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/15206\n \t* trans-intrinsic.c (gfc_conv_intrinsic_rrspacing): Fixed to\n@@ -1430,7 +1435,7 @@\n \tRemove \"set DEVELOPMENT\".\n \t(Compiling GFORTRAN): Remove.\n \n-2004-05-09  Tobias Schl\u00fcter  <tobias.schlueter@physik.uni-muenchen.de>\n+2004-05-09  Tobias Schl\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* array.c (match_subscript, match_array_ref): Add comments\n \texplaining argument 'init'.\n@@ -1440,20 +1445,20 @@\n \t* primary.c (match_digits, match_integer_constant): Add comment\n \texplaining signflag.\n \n-2004-05-01  Tobias Schl\u00fcter <tobias.schlueter@physik.uni-muenchen.de>\n+2004-05-01  Tobias Schl\ufffdter <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/13940\n \t* primary.c: Include system.h and flags.h, needed for pedantic.\n \t(match_boz_constant): Allow \"x\" for hexadecimal constants, warn if\n \tpedantic is set.\n \n-2004-05-01  Tobias Schl\u00fcter <tobias.schlueter@physik.uni-muenchen.de>\n+2004-05-01  Tobias Schl\ufffdter <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/13940\n \t* match.c (match_data_constant): Handle case where\n \tgfc_find_symbol\tsets sym to NULL\n \n-2004-04-28  Tobias Schl\u00fcter <tobias.schlueter@physik.uni-muenchen.de>\n+2004-04-28  Tobias Schl\ufffdter <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* Make-lang.in (f95-lang.o, trans-intrinsic.o): Add missing\n \tdependency on mathbuiltins.def\n@@ -1467,7 +1472,7 @@\n \n \t* gfortranspec.c: Do not include multilib.h.\n \n-2004-04-24  Tobias Schl\u00fcter  <tobias.schlueter@physik.uni-muenchen.de>\n+2004-04-24  Tobias Schl\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* trans-intrinsic.c: Fix comment, this is not trans-expr.c. Add\n \t2004 to copyright years."}, {"sha": "d5b58ce9fd3bc8efc04313fc14c51a819d309639", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -571,7 +571,7 @@ gfc_init_decl_processing (void)\n   /* Build common tree nodes. char_type_node is unsigned because we\n      only use it for actual characters, not for INTEGER(1). Also, we\n      want double_type_node to actually have double precision.   */\n-  build_common_tree_nodes (0);\n+  build_common_tree_nodes (false, false);\n   set_sizetype (long_unsigned_type_node);\n   build_common_tree_nodes_2 (0);\n "}, {"sha": "dd6274c4cb98e6beeabe15ecf31991dbb5657ca2", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -1,3 +1,8 @@\n+2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* java/decl.c (java_init_decl_processing): Adjust\n+\tinitialize_sizetypes call.\n+\n 2004-08-23  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* jv-scan.c (fancy_abort): Add.\n@@ -8596,7 +8601,7 @@\n \tproperly initialize `finished_label'. Don't emit gotos for empty\n \ttry statements.\n \n-2000-03-19  Martin v. L\u00f6wis  <loewis@informatik.hu-berlin.de>\n+2000-03-19  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n \n \t* except.c (emit_handlers): Clear catch_clauses_last.\n "}, {"sha": "93dfcd70537036f3fe8275b440ed36bd3353f627", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -554,7 +554,7 @@ java_init_decl_processing (void)\n   TREE_TYPE (error_mark_node) = error_mark_node;\n \n   /* Create sizetype first - needed for other types. */\n-  initialize_sizetypes ();\n+  initialize_sizetypes (false);\n \n   byte_type_node = make_signed_type (8);\n   pushdecl (build_decl (TYPE_DECL, get_identifier (\"byte\"), byte_type_node));"}, {"sha": "92e52283c8971e037ba5ee6abe24f3fb4513e2cf", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 5, "deletions": 33, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -958,25 +958,11 @@ get_static_reference (tree interface, tree protocols)\n \n   if (protocols)\n     {\n-      tree t, m = TYPE_MAIN_VARIANT (type);\n-\n-      t = copy_node (type);\n-\n-      /* Add this type to the chain of variants of TYPE.  */\n-      TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (m);\n-      TYPE_NEXT_VARIANT (m) = t;\n-\n+      type = build_variant_type_copy (type);\n+      \n       /* Look up protocols and install in lang specific list.  Note\n \t that the protocol list can have a different lifetime than T!  */\n-      SET_TYPE_PROTOCOL_LIST (t, lookup_and_install_protocols (protocols));\n-\n-      /* This forces a new pointer type to be created later\n-\t (in build_pointer_type)...so that the new template\n-\t we just created will actually be used...what a hack!  */\n-      if (TYPE_POINTER_TO (t))\n-\tTYPE_POINTER_TO (t) = NULL_TREE;\n-\n-      type = t;\n+      SET_TYPE_PROTOCOL_LIST (type, lookup_and_install_protocols (protocols));\n     }\n \n   return type;\n@@ -1008,24 +994,10 @@ get_protocol_reference (tree protocols)\n \n   if (protocols)\n     {\n-      tree t, m = TYPE_MAIN_VARIANT (type);\n-\n-      t = copy_node (type);\n-\n-      /* Add this type to the chain of variants of TYPE.  */\n-      TYPE_NEXT_VARIANT (t) = TYPE_NEXT_VARIANT (m);\n-      TYPE_NEXT_VARIANT (m) = t;\n+      type = build_variant_type_copy (type);\n \n       /* Look up protocols...and install in lang specific list */\n-      SET_TYPE_PROTOCOL_LIST (t, lookup_and_install_protocols (protocols));\n-\n-      /* This forces a new pointer type to be created later\n-\t (in build_pointer_type)...so that the new template\n-\t we just created will actually be used...what a hack!  */\n-      if (TYPE_POINTER_TO (t))\n-\tTYPE_POINTER_TO (t) = NULL_TREE;\n-\n-      type = t;\n+      SET_TYPE_PROTOCOL_LIST (type, lookup_and_install_protocols (protocols));\n     }\n   return type;\n }"}, {"sha": "75507aef7af9f224307198b486988902ca42adba", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -125,7 +125,7 @@ tree build_encode_expr (tree);\n \n /* Set by `continue_class' and checked by `objc_is_public'.  */\n \n-#define TREE_STATIC_TEMPLATE(record_type) (TREE_PUBLIC (record_type))\n+#define TREE_STATIC_TEMPLATE(record_type) (TREE_PRIVATE (record_type))\n #define TYPED_OBJECT(type) \\\n        (TREE_CODE (type) == RECORD_TYPE && TREE_STATIC_TEMPLATE (type))\n #define OBJC_TYPE_NAME(type) TYPE_NAME(type)"}, {"sha": "3b04dc724e6a1ce12adce4684299469179640f21", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 41, "deletions": 66, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -40,10 +40,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Set to one when set_sizetype has been called.  */\n static int sizetype_set;\n \n-/* List of types created before set_sizetype has been called.  We do not\n-   make this a GGC root since we want these nodes to be reclaimed.  */\n-static tree early_type_list;\n-\n /* Data type for the expressions representing sizes of data types.\n    It is the first integer type laid out.  */\n tree sizetype_tab[(int) TYPE_KIND_LAST];\n@@ -1812,11 +1808,6 @@ layout_type (tree type)\n       && TREE_CODE (type) != QUAL_UNION_TYPE)\n     finalize_type_size (type);\n \n-  /* If this type is created before sizetype has been permanently set,\n-     record it so set_sizetype can fix it up.  */\n-  if (! sizetype_set)\n-    early_type_list = tree_cons (NULL_TREE, type, early_type_list);\n-\n   /* If an alias set has been set for this aggregate when it was incomplete,\n      force it into alias set 0.\n      This is too conservative, but we cannot call record_component_aliases\n@@ -1856,34 +1847,33 @@ make_unsigned_type (int precision)\n    value to enable integer types to be created.  */\n \n void\n-initialize_sizetypes (void)\n+initialize_sizetypes (bool signed_p)\n {\n   tree t = make_node (INTEGER_TYPE);\n \n   TYPE_MODE (t) = SImode;\n   TYPE_ALIGN (t) = GET_MODE_ALIGNMENT (SImode);\n   TYPE_USER_ALIGN (t) = 0;\n   TYPE_IS_SIZETYPE (t) = 1;\n+  TYPE_UNSIGNED (t) = !signed_p;\n   TYPE_SIZE (t) = build_int_cst (t, GET_MODE_BITSIZE (SImode), 0);\n   TYPE_SIZE_UNIT (t) = build_int_cst (t, GET_MODE_SIZE (SImode), 0);\n-  TYPE_UNSIGNED (t) = 1;\n   TYPE_PRECISION (t) = GET_MODE_BITSIZE (SImode);\n   TYPE_MIN_VALUE (t) = build_int_cst (t, 0, 0);\n \n   /* 1000 avoids problems with possible overflow and is certainly\n      larger than any size value we'd want to be storing.  */\n   TYPE_MAX_VALUE (t) = build_int_cst (t, 1000, 0);\n \n-  /* These two must be different nodes because of the caching done in\n-     size_int_wide.  */\n   sizetype = t;\n-  bitsizetype = copy_node (t);\n-  TYPE_CACHED_VALUES (bitsizetype) = NULL_TREE;\n-  TYPE_CACHED_VALUES_P (bitsizetype) = 0;\n+  bitsizetype = build_distinct_type_copy (t);\n }\n \n-/* Set sizetype to TYPE, and initialize *sizetype accordingly.\n-   Also update the type of any standard type's sizes made so far.  */\n+/* Make sizetype a version of TYPE, and initialize *sizetype\n+   accordingly.  We do this by overwriting the stub sizetype and\n+   bitsizetype nodes created by initialize_sizetypes.  This makes sure\n+   that (a) anything stubby about them no longer exists, (b) any\n+   INTEGER_CSTs created with such a type, remain valid.  */\n \n void\n set_sizetype (tree type)\n@@ -1895,67 +1885,52 @@ set_sizetype (tree type)\n      precision.  */\n   int precision = MIN (oprecision + BITS_PER_UNIT_LOG + 1,\n \t\t       2 * HOST_BITS_PER_WIDE_INT);\n-  unsigned int i;\n   tree t;\n \n   if (sizetype_set)\n     abort ();\n+  if (TYPE_UNSIGNED (type) != TYPE_UNSIGNED (sizetype))\n+    abort ();\n \n-  /* Make copies of nodes since we'll be setting TYPE_IS_SIZETYPE.  */\n-  sizetype = copy_node (type);\n-  TYPE_CACHED_VALUES (sizetype) = make_tree_vec (INTEGER_SHARE_LIMIT);\n-  TYPE_CACHED_VALUES_P (sizetype) = 1;\n-  TREE_TYPE (TYPE_CACHED_VALUES (sizetype)) = type;\n-  TYPE_IS_SIZETYPE (sizetype) = 1;\n-  bitsizetype = make_node (INTEGER_TYPE);\n-  TYPE_NAME (bitsizetype) = TYPE_NAME (type);\n-  TYPE_PRECISION (bitsizetype) = precision;\n-  TYPE_IS_SIZETYPE (bitsizetype) = 1;\n-\n-  if (TYPE_UNSIGNED (type))\n-    fixup_unsigned_type (bitsizetype);\n-  else\n-    fixup_signed_type (bitsizetype);\n-\n-  layout_type (bitsizetype);\n-\n+  t = build_distinct_type_copy (type);\n+  /* We do want to use sizetype's cache, as we will be replacing that\n+     type.  */\n+  TYPE_CACHED_VALUES (t) = TYPE_CACHED_VALUES (sizetype);\n+  TYPE_CACHED_VALUES_P (t) = TYPE_CACHED_VALUES_P (sizetype);\n+  TREE_TYPE (TYPE_CACHED_VALUES (t)) = type;\n+  TYPE_UID (t) = TYPE_UID (sizetype);\n+  TYPE_IS_SIZETYPE (t) = 1;\n+  \n+  /* Replace our original stub sizetype.  */\n+  memcpy (sizetype, t, tree_size (sizetype));\n+  TYPE_MAIN_VARIANT (sizetype) = sizetype;\n+  \n+  t = make_node (INTEGER_TYPE);\n+  TYPE_NAME (t) = get_identifier (\"bit_size_type\");\n+  /* We do want to use bitsizetype's cache, as we will be replacing that\n+     type.  */\n+  TYPE_CACHED_VALUES (t) = TYPE_CACHED_VALUES (bitsizetype);\n+  TYPE_CACHED_VALUES_P (t) = TYPE_CACHED_VALUES_P (bitsizetype);\n+  TYPE_PRECISION (t) = precision;\n+  TYPE_UID (t) = TYPE_UID (bitsizetype);\n+  TYPE_IS_SIZETYPE (t) = 1;\n+  /* Replace our original stub bitsizetype.  */\n+  memcpy (bitsizetype, t, tree_size (bitsizetype));\n+  \n   if (TYPE_UNSIGNED (type))\n     {\n-      ssizetype = copy_node (make_signed_type (oprecision));\n-      sbitsizetype = copy_node (make_signed_type (precision));\n+      fixup_unsigned_type (bitsizetype);\n+      ssizetype = build_distinct_type_copy (make_signed_type (oprecision));\n+      TYPE_IS_SIZETYPE (ssizetype) = 1;\n+      sbitsizetype = build_distinct_type_copy (make_signed_type (precision));\n+      TYPE_IS_SIZETYPE (sbitsizetype) = 1;\n     }\n   else\n     {\n+      fixup_signed_type (bitsizetype);\n       ssizetype = sizetype;\n       sbitsizetype = bitsizetype;\n     }\n-\n-  TYPE_NAME (bitsizetype) = get_identifier (\"bit_size_type\");\n-\n-  /* Show is a sizetype, is a main type, and has no pointers to it.  */\n-  for (i = 0; i < ARRAY_SIZE (sizetype_tab); i++)\n-    {\n-      TYPE_IS_SIZETYPE (sizetype_tab[i]) = 1;\n-      TYPE_MAIN_VARIANT (sizetype_tab[i]) = sizetype_tab[i];\n-      TYPE_NEXT_VARIANT (sizetype_tab[i]) = 0;\n-      TYPE_POINTER_TO (sizetype_tab[i]) = 0;\n-      TYPE_REFERENCE_TO (sizetype_tab[i]) = 0;\n-    }\n-\n-  /* Go down each of the types we already made and set the proper type\n-     for the sizes in them.  */\n-  for (t = early_type_list; t != 0; t = TREE_CHAIN (t))\n-    {\n-      if (TREE_CODE (TREE_VALUE (t)) != INTEGER_TYPE\n-\t  && TREE_CODE (TREE_VALUE (t)) != BOOLEAN_TYPE)\n-\tabort ();\n-\n-      TREE_TYPE (TYPE_SIZE (TREE_VALUE (t))) = bitsizetype;\n-      TREE_TYPE (TYPE_SIZE_UNIT (TREE_VALUE (t))) = sizetype;\n-    }\n-\n-  early_type_list = 0;\n-  sizetype_set = 1;\n }\n \f\n /* TYPE is an integral type, i.e., an INTEGRAL_TYPE, ENUMERAL_TYPE,"}, {"sha": "12aa391d8e8eb46e6141fc55a2753fd7e580e91d", "filename": "gcc/tree.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -392,6 +392,13 @@ copy_node_stat (tree node MEM_STAT_DECL)\n \t but the optimizer should catch that.  */\n       TYPE_SYMTAB_POINTER (t) = 0;\n       TYPE_SYMTAB_ADDRESS (t) = 0;\n+      \n+      /* Do not copy the values cache.  */\n+      if (TYPE_CACHED_VALUES_P(t))\n+\t{\n+\t  TYPE_CACHED_VALUES_P (t) = 0;\n+\t  TYPE_CACHED_VALUES (t) = NULL_TREE;\n+\t}\n     }\n \n   return t;\n@@ -3141,15 +3148,6 @@ build_distinct_type_copy (tree type)\n {\n   tree t = copy_node (type);\n   \n-  if (TYPE_CACHED_VALUES_P(t))\n-    {\n-      /* Do not copy the values cache.  */\n-      if (TREE_CODE (t) == INTEGER_TYPE && TYPE_IS_SIZETYPE (t))\n-\tabort ();\n-      TYPE_CACHED_VALUES_P (t) = 0;\n-      TYPE_CACHED_VALUES (t) = NULL_TREE;\n-    }\n-\n   TYPE_POINTER_TO (t) = 0;\n   TYPE_REFERENCE_TO (t) = 0;\n \n@@ -5374,12 +5372,12 @@ make_or_reuse_type (unsigned size, int unsignedp)\n    this function to select one of the types as sizetype.  */\n \n void\n-build_common_tree_nodes (int signed_char)\n+build_common_tree_nodes (bool signed_char, bool signed_sizetype)\n {\n   error_mark_node = make_node (ERROR_MARK);\n   TREE_TYPE (error_mark_node) = error_mark_node;\n \n-  initialize_sizetypes ();\n+  initialize_sizetypes (signed_sizetype);\n \n   /* Define both `signed char' and `unsigned char'.  */\n   signed_char_type_node = make_signed_type (CHAR_TYPE_SIZE);"}, {"sha": "8d916efbe5f734358648453c3d8f515516879eea", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -2770,7 +2770,7 @@ extern tree build_empty_stmt (void);\n \n extern tree make_signed_type (int);\n extern tree make_unsigned_type (int);\n-extern void initialize_sizetypes (void);\n+extern void initialize_sizetypes (bool);\n extern void set_sizetype (tree);\n extern void fixup_unsigned_type (tree);\n extern tree build_pointer_type_for_mode (tree, enum machine_mode, bool);\n@@ -3499,7 +3499,7 @@ extern int real_onep (tree);\n extern int real_twop (tree);\n extern int real_minus_onep (tree);\n extern void init_ttree (void);\n-extern void build_common_tree_nodes (int);\n+extern void build_common_tree_nodes (bool, bool);\n extern void build_common_tree_nodes_2 (int);\n extern tree build_nonstandard_integer_type (unsigned HOST_WIDE_INT, int);\n extern tree build_range_type (tree, tree, tree);"}, {"sha": "b6d89cb263e8aadb193b62d1058bd30fc14d47db", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -1,3 +1,8 @@\n+2004-08-24  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* treelang/treetree.c (treelang_init_decl_processing): Adjust\n+\tbuild_common_tree_nodes call.\n+\n 2004-08-14  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* treetree.c (tree_code_get_integer_value): Use build_int_cst."}, {"sha": "b55c6d1d057358a115ebfeb2ac225fa206d980ce", "filename": "gcc/treelang/treetree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Ftreelang%2Ftreetree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c1d6d62a680bf67cb921c550662306b4cb3a67b/gcc%2Ftreelang%2Ftreetree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreetree.c?ref=8c1d6d62a680bf67cb921c550662306b4cb3a67b", "patch": "@@ -1179,7 +1179,7 @@ treelang_init_decl_processing (void)\n   pushlevel (0);\t/* make the binding_level structure for global names */\n   global_binding_level = current_binding_level;\n \n-  build_common_tree_nodes (flag_signed_char);\n+  build_common_tree_nodes (flag_signed_char, false);\n \n   /* set standard type names */\n "}]}