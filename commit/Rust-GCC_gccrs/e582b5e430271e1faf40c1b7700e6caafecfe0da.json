{"sha": "e582b5e430271e1faf40c1b7700e6caafecfe0da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU4MmI1ZTQzMDI3MWUxZmFmNDBjMWI3NzAwZTZjYWFmZWNmZTBkYQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-19T14:00:10Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-19T14:00:10Z"}, "message": "In gcc/testsuite/: 2010-12-19 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/testsuite/:\n2010-12-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc.dg/gnu-api-2-objc_msg_lookup.m: New.\n\t* obj-c++.dg/gnu-api-2-objc_msg_lookup.mm: New.\n\nFrom-SVN: r168052", "tree": {"sha": "240c3c05ef45f8f3dafa30688e5d70e847230756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/240c3c05ef45f8f3dafa30688e5d70e847230756"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e582b5e430271e1faf40c1b7700e6caafecfe0da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e582b5e430271e1faf40c1b7700e6caafecfe0da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e582b5e430271e1faf40c1b7700e6caafecfe0da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e582b5e430271e1faf40c1b7700e6caafecfe0da/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2899534b2c76c416d71d077c396f2396a784c4c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2899534b2c76c416d71d077c396f2396a784c4c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2899534b2c76c416d71d077c396f2396a784c4c5"}], "stats": {"total": 159, "additions": 159, "deletions": 0}, "files": [{"sha": "069607901e780a2702d1133d1f1751b1905d6828", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e582b5e430271e1faf40c1b7700e6caafecfe0da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e582b5e430271e1faf40c1b7700e6caafecfe0da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e582b5e430271e1faf40c1b7700e6caafecfe0da", "patch": "@@ -1,3 +1,8 @@\n+2010-12-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/gnu-api-2-objc_msg_lookup.m: New.\n+\t* obj-c++.dg/gnu-api-2-objc_msg_lookup.mm: New.\t\n+\n 2010-12-19  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* gcc.target/arm/vfp-1.c (test_ldst): New test for VFP"}, {"sha": "dcbf6d21f14ae0d2ce76f1b84fd7900e26a7f537", "filename": "gcc/testsuite/obj-c++.dg/gnu-api-2-objc_msg_lookup.mm", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e582b5e430271e1faf40c1b7700e6caafecfe0da/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-objc_msg_lookup.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e582b5e430271e1faf40c1b7700e6caafecfe0da/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-objc_msg_lookup.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-objc_msg_lookup.mm?ref=e582b5e430271e1faf40c1b7700e6caafecfe0da", "patch": "@@ -0,0 +1,77 @@\n+/* Test the Modern GNU Objective-C Runtime API.\n+\n+   This is test 'objc_msg_lookup', covering objc_msg_lookup(),\n+   objc_msg_lookup_super() and struct objc_super.  */\n+\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n+\n+/* To get the modern GNU Objective-C Runtime API, you include\n+   objc/runtime.h.  */\n+#include <objc/runtime.h>\n+\n+/* For objc_msg_lookup(), objc_msg_lookup_super() and struct\n+   objc_super.  */\n+#include <objc/message.h>\n+\n+#include <stdlib.h>\n+#include <iostream>\n+#include <cstring>\n+\n+@interface MyRootClass\n+{ Class isa; }\n++ alloc;\n+- init;\n+- (int) test;\n+@end\n+\n+@implementation MyRootClass\n++ alloc { return class_createInstance (self, 0); }\n+- init  { return self; }\n+- (int) test { return 20; }\n+@end\n+\n+@interface MySubClass : MyRootClass\n+- (int) test;\n+@end\n+\n+@implementation MySubClass\n+- (int) test { return 11; }\n+@end\n+\n+int main ()\n+{\n+  /* Functions are tested in alphabetical order.  */\n+\n+  std::cout << \"Testing objc_msg_lookup () ...\\n\";\n+  {\n+    MySubClass *object = [[MySubClass alloc] init];\n+    int (* test_IMP) (id receiver, SEL selector);\n+\n+    test_IMP = (int (*)(id, SEL))objc_msg_lookup (object, @selector (test));    \n+    \n+    if (test_IMP (object, @selector (test)) != 11)\n+      abort ();\n+  }\n+\n+  std::cout << \"Testing objc_msg_lookup_super () ...\\n\";\n+  {\n+    MySubClass *object = [[MySubClass alloc] init];\n+    struct objc_super super = { 0, 0 };\n+    int (* test_IMP) (id receiver, SEL selector);\n+\n+    /* Get the implementation of -test for the superclass of object -\n+       as if we were calling [super test] inside a method\n+       implementation of object.  */\n+    super.self = object;\n+    super.super_class = class_getSuperclass (object_getClass (object));\n+    test_IMP = (int (*)(id, SEL))objc_msg_lookup_super (&super, @selector (test));\n+\n+    /* Invoke it.  The method in MyRootClass, not the one in\n+       MySubClass, should be invoked.  */\n+    if (test_IMP (object, @selector (test)) != 20)\n+      abort ();\n+  }\n+\n+  return (0);\n+}"}, {"sha": "5751f3fd298b2fc6a49d7e78d99f7317eec4bcf9", "filename": "gcc/testsuite/objc.dg/gnu-api-2-objc_msg_lookup.m", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e582b5e430271e1faf40c1b7700e6caafecfe0da/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-objc_msg_lookup.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e582b5e430271e1faf40c1b7700e6caafecfe0da/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-objc_msg_lookup.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-objc_msg_lookup.m?ref=e582b5e430271e1faf40c1b7700e6caafecfe0da", "patch": "@@ -0,0 +1,77 @@\n+/* Test the Modern GNU Objective-C Runtime API.\n+\n+   This is test 'objc_msg_lookup', covering objc_msg_lookup(),\n+   objc_msg_lookup_super() and struct objc_super.  */\n+\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fnext-runtime\" } { \"\" } } */\n+\n+/* To get the modern GNU Objective-C Runtime API, you include\n+   objc/runtime.h.  */\n+#include <objc/runtime.h>\n+\n+/* For objc_msg_lookup(), objc_msg_lookup_super() and struct\n+   objc_super.  */\n+#include <objc/message.h>\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+@interface MyRootClass\n+{ Class isa; }\n++ alloc;\n+- init;\n+- (int) test;\n+@end\n+\n+@implementation MyRootClass\n++ alloc { return class_createInstance (self, 0); }\n+- init  { return self; }\n+- (int) test { return 20; }\n+@end\n+\n+@interface MySubClass : MyRootClass\n+- (int) test;\n+@end\n+\n+@implementation MySubClass\n+- (int) test { return 11; }\n+@end\n+\n+int main (int argc, void **args)\n+{\n+  /* Functions are tested in alphabetical order.  */\n+\n+  printf (\"Testing objc_msg_lookup ()...\\n\");\n+  {\n+    MySubClass *object = [[MySubClass alloc] init];\n+    int (* test_IMP) (id receiver, SEL selector);\n+\n+    test_IMP = (int (*)(id, SEL))objc_msg_lookup (object, @selector (test));    \n+    \n+    if (test_IMP (object, @selector (test)) != 11)\n+      abort ();\n+  }\n+\n+  printf (\"Testing objc_msg_lookup_super ()...\\n\");\n+  {\n+    MySubClass *object = [[MySubClass alloc] init];\n+    struct objc_super super = { 0, 0 };\n+    int (* test_IMP) (id receiver, SEL selector);\n+\n+    /* Get the implementation of -test for the superclass of object -\n+       as if we were calling [super test] inside a method\n+       implementation of object.  */\n+    super.self = object;\n+    super.super_class = class_getSuperclass (object_getClass (object));\n+    test_IMP = (int (*)(id, SEL))objc_msg_lookup_super (&super, @selector (test));\n+\n+    /* Invoke it.  The method in MyRootClass, not the one in\n+       MySubClass, should be invoked.  */\n+    if (test_IMP (object, @selector (test)) != 20)\n+      abort ();\n+  }\n+\n+  return 0;\n+}"}]}