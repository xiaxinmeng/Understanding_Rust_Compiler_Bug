{"sha": "50d724a75026efc61783b772dae0f12a823fb720", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBkNzI0YTc1MDI2ZWZjNjE3ODNiNzcyZGFlMGYxMmE4MjNmYjcyMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-08-20T20:54:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-08-20T20:54:25Z"}, "message": "re PR target/45336 (pextr{b,w,d}, (worse than) redundant extensions)\n\n\tPR target/45336\n\t* config/i386/sse.md (*sse4_1_pextrb): Add SWI48 mode iterator\n\tto cover zero extension into 64-bit register.\n\t(*sse2_pextrw): Likewise.\n\t(*sse4_1_pextrd_zext): New insn.\n\nFrom-SVN: r163420", "tree": {"sha": "24bf4e4c7e3829e93a93dc829c6b9c0309b4cc7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24bf4e4c7e3829e93a93dc829c6b9c0309b4cc7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50d724a75026efc61783b772dae0f12a823fb720", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50d724a75026efc61783b772dae0f12a823fb720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50d724a75026efc61783b772dae0f12a823fb720", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50d724a75026efc61783b772dae0f12a823fb720/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c6d8116af92b7c733ff5b3180e1ae1a7becbb377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d8116af92b7c733ff5b3180e1ae1a7becbb377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d8116af92b7c733ff5b3180e1ae1a7becbb377"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "6ccc0a185be0c8cb83b9df80f27684189bc4513b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50d724a75026efc61783b772dae0f12a823fb720/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50d724a75026efc61783b772dae0f12a823fb720/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50d724a75026efc61783b772dae0f12a823fb720", "patch": "@@ -1,3 +1,11 @@\n+2010-08-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/45336\n+\t* config/i386/sse.md (*sse4_1_pextrb): Add SWI48 mode iterator\n+\tto cover zero extension into 64-bit register.\n+\t(*sse2_pextrw): Likewise.\n+\t(*sse4_1_pextrd_zext): New insn.\n+\n 2010-08-20  Iain Sandoe  <iains@gcc.gnu.org>\n \n \trevert r163410, partially revert r163267."}, {"sha": "3f756d9b636fe856c1479736c2169af12e17d681", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50d724a75026efc61783b772dae0f12a823fb720/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50d724a75026efc61783b772dae0f12a823fb720/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=50d724a75026efc61783b772dae0f12a823fb720", "patch": "@@ -7075,14 +7075,14 @@\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*sse4_1_pextrb\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:SI\n+(define_insn \"*sse4_1_pextrb_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(zero_extend:SWI48\n \t  (vec_select:QI\n \t    (match_operand:V16QI 1 \"register_operand\" \"x\")\n \t    (parallel [(match_operand:SI 2 \"const_0_to_15_operand\" \"n\")]))))]\n   \"TARGET_SSE4_1\"\n-  \"%vpextrb\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"%vpextrb\\t{%2, %1, %k0|%k0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n@@ -7102,14 +7102,14 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"*sse2_pextrw\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:SI\n+(define_insn \"*sse2_pextrw_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(zero_extend:SWI48\n \t  (vec_select:HI\n \t    (match_operand:V8HI 1 \"register_operand\" \"x\")\n \t    (parallel [(match_operand:SI 2 \"const_0_to_7_operand\" \"n\")]))))]\n   \"TARGET_SSE2\"\n-  \"%vpextrw\\t{%2, %1, %0|%0, %1, %2}\"\n+  \"%vpextrw\\t{%2, %1, %k0|%k0, %1, %2}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n@@ -7142,6 +7142,20 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"*sse4_1_pextrd_zext\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (vec_select:SI\n+\t    (match_operand:V4SI 1 \"register_operand\" \"x\")\n+\t    (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n\")]))))]\n+  \"TARGET_64BIT && TARGET_SSE4_1\"\n+  \"%vpextrd\\t{%2, %1, %k0|%k0, %1, %2}\"\n+  [(set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix_extra\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"mode\" \"TI\")])\n+\n ;; It must come before *vec_extractv2di_1_sse since it is preferred.\n (define_insn \"*sse4_1_pextrq\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm\")"}]}