{"sha": "733ba9b9a347d8a2ac2dedec820c51481c5c6338", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMzYmE5YjlhMzQ3ZDhhMmFjMmRlZGVjODIwYzUxNDgxYzVjNjMzOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-10-25T20:52:54Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-10-25T20:52:54Z"}, "message": "[C++ PATCH] Label checking cleanups\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-10/msg01847.html\n\t* decl.c (identifier_goto): Reduce duplication.\n\t(check_previous_goto_1): Likewise.\n\t(check_goto): Move var decls to initialization.\n\t(check_omp_return, define_label_1, define_label): Likewise.\n\nFrom-SVN: r254086", "tree": {"sha": "ced319b25a8fac4a097c8fd9bf227edfd93a21ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ced319b25a8fac4a097c8fd9bf227edfd93a21ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/733ba9b9a347d8a2ac2dedec820c51481c5c6338", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733ba9b9a347d8a2ac2dedec820c51481c5c6338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/733ba9b9a347d8a2ac2dedec820c51481c5c6338", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733ba9b9a347d8a2ac2dedec820c51481c5c6338/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4fe6139ab2e39d8b264befaf38f748e5c88d76a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4fe6139ab2e39d8b264befaf38f748e5c88d76a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4fe6139ab2e39d8b264befaf38f748e5c88d76a"}], "stats": {"total": 156, "additions": 76, "deletions": 80}, "files": [{"sha": "9788518c627b0fa200433798405810d2907960b4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733ba9b9a347d8a2ac2dedec820c51481c5c6338/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733ba9b9a347d8a2ac2dedec820c51481c5c6338/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=733ba9b9a347d8a2ac2dedec820c51481c5c6338", "patch": "@@ -1,3 +1,10 @@\n+2017-10-25  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl.c (identifier_goto): Reduce duplication.\n+\t(check_previous_goto_1): Likewise.\n+\t(check_goto): Move var decls to initialization.\n+\t(check_omp_return, define_label_1, define_label): Likewise.\n+\n 2017-10-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libstdc++/81706"}, {"sha": "45c3482da874240477275116930e4fc7d12a7c83", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 69, "deletions": 80, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733ba9b9a347d8a2ac2dedec820c51481c5c6338/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733ba9b9a347d8a2ac2dedec820c51481c5c6338/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=733ba9b9a347d8a2ac2dedec820c51481c5c6338", "patch": "@@ -3093,8 +3093,9 @@ identify_goto (tree decl, location_t loc, const location_t *locus,\n \t       diagnostic_t diag_kind)\n {\n   bool complained\n-    = (decl ? emit_diagnostic (diag_kind, loc, 0, \"jump to label %qD\", decl)\n-\t    : emit_diagnostic (diag_kind, loc, 0, \"jump to case label\"));\n+    = emit_diagnostic (diag_kind, loc, 0,\n+\t\t       decl ? \"jump to label %qD\" : \"jump to case label\",\n+\t\t       decl);\n   if (complained && locus)\n     inform (*locus, \"  from here\");\n   return complained;\n@@ -3149,68 +3150,62 @@ check_previous_goto_1 (tree decl, cp_binding_level* level, tree names,\n \t\t\t\"  crosses initialization of %q#D\", new_decls);\n \t      else\n \t\tinform (DECL_SOURCE_LOCATION (new_decls),\n-\t\t\t\"  enters scope of %q#D which has \"\n+\t\t\t\"  enters scope of %q#D, which has \"\n \t\t\t\"non-trivial destructor\", new_decls);\n \t    }\n \t}\n \n       if (b == level)\n \tbreak;\n-      if ((b->kind == sk_try || b->kind == sk_catch) && !saw_eh)\n+\n+      const char *inf = NULL;\n+      location_t loc = input_location;\n+      switch (b->kind)\n \t{\n-\t  if (identified < 2)\n-\t    {\n-\t      complained = identify_goto (decl, input_location, locus,\n-\t\t\t\t\t  DK_ERROR);\n-\t      identified = 2;\n-\t    }\n-\t  if (complained)\n-\t    {\n-\t      if (b->kind == sk_try)\n-\t\tinform (input_location, \"  enters try block\");\n-\t      else\n-\t\tinform (input_location, \"  enters catch block\");\n-\t    }\n+\tcase sk_try:\n+\t  if (!saw_eh)\n+\t    inf = \"enters try block\";\n \t  saw_eh = true;\n-\t}\n-      if (b->kind == sk_omp && !saw_omp)\n-\t{\n-\t  if (identified < 2)\n-\t    {\n-\t      complained = identify_goto (decl, input_location, locus,\n-\t\t\t\t\t  DK_ERROR);\n-\t      identified = 2;\n-\t    }\n-\t  if (complained)\n-\t    inform (input_location, \"  enters OpenMP structured block\");\n+\t  break;\n+\n+\tcase sk_catch:\n+\t  if (!saw_eh)\n+\t    inf = \"enters catch block\";\n+\t  saw_eh = true;\n+\t  break;\n+\n+\tcase sk_omp:\n+\t  if (!saw_omp)\n+\t    inf = \"enters OpenMP structured block\";\n \t  saw_omp = true;\n-\t}\n-      if (b->kind == sk_transaction && !saw_tm)\n-\t{\n-\t  if (identified < 2)\n+\t  break;\n+\n+\tcase sk_transaction:\n+\t  if (!saw_tm)\n+\t    inf = \"enters synchronized or atomic statement\";\n+\t  saw_tm = true;\n+\t  break;\n+\n+\tcase sk_block:\n+\t  if (!saw_cxif && level_for_constexpr_if (b->level_chain))\n \t    {\n-\t      complained = identify_goto (decl, input_location, locus,\n-\t\t\t\t\t  DK_ERROR);\n-\t      identified = 2;\n+\t      inf = \"enters constexpr if statement\";\n+\t      loc = EXPR_LOCATION (b->level_chain->this_entity);\n+\t      saw_cxif = true;\n \t    }\n-\t  if (complained)\n-\t    inform (input_location,\n-\t\t    \"  enters synchronized or atomic statement\");\n-\t  saw_tm = true;\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n \t}\n-      if (!saw_cxif && b->kind == sk_block\n-\t  && level_for_constexpr_if (b->level_chain))\n+\n+      if (inf)\n \t{\n \t  if (identified < 2)\n-\t    {\n-\t      complained = identify_goto (decl, input_location, locus,\n-\t\t\t\t\t  DK_ERROR);\n-\t      identified = 2;\n-\t    }\n+\t    complained = identify_goto (decl, input_location, locus, DK_ERROR);\n+\t  identified = 2;\n \t  if (complained)\n-\t    inform (EXPR_LOCATION (b->level_chain->this_entity),\n-\t\t    \"  enters constexpr if statement\");\n-\t  saw_cxif = true;\n+\t    inform (loc, \"  %s\", inf);\n \t}\n     }\n \n@@ -3238,10 +3233,6 @@ void\n check_goto (tree decl)\n {\n   struct named_label_entry *ent, dummy;\n-  bool saw_catch = false, complained = false;\n-  int identified = 0;\n-  tree bad;\n-  unsigned ix;\n \n   /* We can't know where a computed goto is jumping.\n      So we assume that it's OK.  */\n@@ -3279,6 +3270,11 @@ check_goto (tree decl)\n       return;\n     }\n \n+  bool saw_catch = false, complained = false;\n+  int identified = 0;\n+  tree bad;\n+  unsigned ix;\n+\n   if (ent->in_try_scope || ent->in_catch_scope || ent->in_transaction_scope\n       || ent->in_constexpr_if\n       || ent->in_omp_scope || !vec_safe_is_empty (ent->bad_decls))\n@@ -3339,27 +3335,24 @@ check_goto (tree decl)\n \tinform (input_location, \"  enters OpenMP structured block\");\n     }\n   else if (flag_openmp)\n-    {\n-      cp_binding_level *b;\n-      for (b = current_binding_level; b ; b = b->level_chain)\n-\t{\n-\t  if (b == ent->binding_level)\n+    for (cp_binding_level *b = current_binding_level; b ; b = b->level_chain)\n+      {\n+\tif (b == ent->binding_level)\n+\t  break;\n+\tif (b->kind == sk_omp)\n+\t  {\n+\t    if (identified < 2)\n+\t      {\n+\t\tcomplained = identify_goto (decl,\n+\t\t\t\t\t    DECL_SOURCE_LOCATION (decl),\n+\t\t\t\t\t    &input_location, DK_ERROR);\n+\t\tidentified = 2;\n+\t      }\n+\t    if (complained)\n+\t      inform (input_location, \"  exits OpenMP structured block\");\n \t    break;\n-\t  if (b->kind == sk_omp)\n-\t    {\n-\t      if (identified < 2)\n-\t\t{\n-\t\t  complained = identify_goto (decl,\n-\t\t\t\t\t      DECL_SOURCE_LOCATION (decl),\n-\t\t\t\t\t      &input_location, DK_ERROR);\n-\t\t  identified = 2;\n-\t\t}\n-\t      if (complained)\n-\t\tinform (input_location, \"  exits OpenMP structured block\");\n-\t      break;\n-\t    }\n-\t}\n-    }\n+\t  }\n+      }\n }\n \n /* Check that a return is ok wrt OpenMP structured blocks.\n@@ -3368,8 +3361,7 @@ check_goto (tree decl)\n bool\n check_omp_return (void)\n {\n-  cp_binding_level *b;\n-  for (b = current_binding_level; b ; b = b->level_chain)\n+  for (cp_binding_level *b = current_binding_level; b ; b = b->level_chain)\n     if (b->kind == sk_omp)\n       {\n \terror (\"invalid exit from OpenMP structured block\");\n@@ -3413,8 +3405,6 @@ define_label_1 (location_t location, tree name)\n     }\n   else\n     {\n-      struct named_label_use_entry *use;\n-\n       /* Mark label as having been defined.  */\n       DECL_INITIAL (decl) = error_mark_node;\n       /* Say where in the source.  */\n@@ -3423,7 +3413,7 @@ define_label_1 (location_t location, tree name)\n       ent->binding_level = current_binding_level;\n       ent->names_in_scope = current_binding_level->names;\n \n-      for (use = ent->uses; use ; use = use->next)\n+      for (named_label_use_entry *use = ent->uses; use; use = use->next)\n \tcheck_previous_goto (decl, use);\n       ent->uses = NULL;\n     }\n@@ -3436,9 +3426,8 @@ define_label_1 (location_t location, tree name)\n tree\n define_label (location_t location, tree name)\n {\n-  tree ret;\n   bool running = timevar_cond_start (TV_NAME_LOOKUP);\n-  ret = define_label_1 (location, name);\n+  tree ret = define_label_1 (location, name);\n   timevar_cond_stop (TV_NAME_LOOKUP, running);\n   return ret;\n }"}]}