{"sha": "5fdfba85be35635b2e37c62108dfa90acc36f74c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZkZmJhODViZTM1NjM1YjJlMzdjNjIxMDhkZmE5MGFjYzM2Zjc0Yw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-01-17T07:13:39Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-01-17T07:13:39Z"}, "message": "gen-num-limits.cc (INSTANTIATIONS): New macro.\n\n\t* src/gen-num-limits.cc (INSTANTIATIONS): New macro.\n\tUse it do explicitly instantiate predicate<T> and value<T> for\n\tall the builtin Ts.\n\nFrom-SVN: r39086", "tree": {"sha": "865655440fcb04d8df91e2725819310bf654cc76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/865655440fcb04d8df91e2725819310bf654cc76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fdfba85be35635b2e37c62108dfa90acc36f74c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fdfba85be35635b2e37c62108dfa90acc36f74c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fdfba85be35635b2e37c62108dfa90acc36f74c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fdfba85be35635b2e37c62108dfa90acc36f74c/comments", "author": null, "committer": null, "parents": [{"sha": "c99a2d31378c6ad32f86dbeb14b5cbb47942fc2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c99a2d31378c6ad32f86dbeb14b5cbb47942fc2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c99a2d31378c6ad32f86dbeb14b5cbb47942fc2a"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "4e28ed0ead1be38fa2088461b46d904721b4c664", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fdfba85be35635b2e37c62108dfa90acc36f74c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fdfba85be35635b2e37c62108dfa90acc36f74c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5fdfba85be35635b2e37c62108dfa90acc36f74c", "patch": "@@ -1,3 +1,9 @@\n+2001-01-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* src/gen-num-limits.cc (INSTANTIATIONS): New macro.\n+\tUse it do explicitly instantiate predicate<T> and value<T> for\n+\tall the builtin Ts.\n+\n 2001-01-16  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* libsupc++/exception_support.cc (__cp_pop_exception): Fix"}, {"sha": "aca1c841bd6f03abd64b71697775d23a22ffc7c8", "filename": "libstdc++-v3/src/gen-num-limits.cc", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fdfba85be35635b2e37c62108dfa90acc36f74c/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fdfba85be35635b2e37c62108dfa90acc36f74c/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc?ref=5fdfba85be35635b2e37c62108dfa90acc36f74c", "patch": "@@ -770,3 +770,28 @@ int main()\n     // .__convert_long_double_d); }\n }\n \n+// G++ doesn't have support for automatic instantiation of static data\n+// members on platforms that don't have weak symbols.  On AIX, in\n+// particular, static data members must be explicitly instantiated.\n+// So, we explicitly instantiate some of the ones we need.  To save\n+// typing, we don't name the static data members explicitly; we\n+// instead name their containing types.\n+\n+#define INSTANTIATIONS(TYPE)\t\t\t\\\n+  template struct predicate<TYPE>;\t\t\\\n+  template struct value<TYPE>\n+\n+INSTANTIATIONS (bool);\n+INSTANTIATIONS (char);\n+INSTANTIATIONS (signed char);\n+INSTANTIATIONS (unsigned char);\n+INSTANTIATIONS (short);\n+INSTANTIATIONS (unsigned short);\n+INSTANTIATIONS (int);\n+INSTANTIATIONS (unsigned int);\n+INSTANTIATIONS (long);\n+INSTANTIATIONS (unsigned long);\n+INSTANTIATIONS (float);\n+INSTANTIATIONS (double);\n+INSTANTIATIONS (long double);\n+"}]}