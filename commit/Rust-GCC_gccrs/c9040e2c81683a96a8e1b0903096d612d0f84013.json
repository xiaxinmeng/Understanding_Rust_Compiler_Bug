{"sha": "c9040e2c81683a96a8e1b0903096d612d0f84013", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkwNDBlMmM4MTY4M2E5NmE4ZTFiMDkwMzA5NmQ2MTJkMGY4NDAxMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1995-03-07T22:34:39Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1995-03-07T22:34:39Z"}, "message": "Add support for #pragma align\n\nFrom-SVN: r9128", "tree": {"sha": "2fbf13310c29fb79472beacc131cae99941c1ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fbf13310c29fb79472beacc131cae99941c1ab1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9040e2c81683a96a8e1b0903096d612d0f84013", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9040e2c81683a96a8e1b0903096d612d0f84013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9040e2c81683a96a8e1b0903096d612d0f84013", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9040e2c81683a96a8e1b0903096d612d0f84013/comments", "author": null, "committer": null, "parents": [{"sha": "ae8b85c2ad253791fc8059e5f90b4ec68989e290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8b85c2ad253791fc8059e5f90b4ec68989e290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae8b85c2ad253791fc8059e5f90b4ec68989e290"}], "stats": {"total": 151, "additions": 81, "deletions": 70}, "files": [{"sha": "7d72000b3c8a6466d34cabd07b20def715abb90b", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 77, "deletions": 64, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9040e2c81683a96a8e1b0903096d612d0f84013/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9040e2c81683a96a8e1b0903096d612d0f84013/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=c9040e2c81683a96a8e1b0903096d612d0f84013", "patch": "@@ -83,57 +83,86 @@ static int ret_label = 0;\n   && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (TREE_TYPE (FNDECL)))) != void_type_node))    \\\n  || current_function_varargs)\n \n-#if 0\n /* Handle pragmas for compatibility with Intel's compilers.  */\n \n /* ??? This is incomplete, since it does not handle all pragmas that the\n-   intel compilers understand.  Also, it needs to be rewritten to accept\n-   a stream instead of a string for GCC 2.  */\n+   intel compilers understand.  */\n \n void\n-process_pragma(str)\n-     char  *str;\n+process_pragma (finput)\n+     FILE *finput;\n {\n-  int align;\n+  int c;\n   int i;\n \n-  if ((i = sscanf (str, \" align %d\", &align)) == 1)\n-    switch (align)\n-      {\n-      case 0:\t\t\t/* Return to last alignment.  */\n-        align = i960_last_maxbitalignment / 8;\n-\n-      case 16:\t\t\t/* Byte alignments. */\n-      case 8:\n-      case 4:\n-      case 2:\n-      case 1:\n-        i960_last_maxbitalignment = i960_maxbitalignment;\n-        i960_maxbitalignment = align * 8;\n-        break;\n-\n-      default:\t\t\t/* Unknown, silently ignore.  */\n-        break;\n-      }\n+  c = getc (finput);\n+  while (c == ' ' || c == '\\t')\n+    c = getc (finput);\n \n-  /* NOTE: ic960 R3.0 pragma align definition:\n+  if (c == 'a'\n+      && getc (finput) == 'l'\n+      && getc (finput) == 'i'\n+      && getc (finput) == 'g'\n+      && getc (finput) == 'n'\n+      && ((c = getc (finput)) == ' ' || c == '\\t' || c == '\\n'))\n+    {\n+      char buf[20];\n+      char *s = buf;\n+      int align;\n+\n+      while (c == ' ' || c == '\\t')\n+\tc = getc (finput);\n+      if (c == '(')\n+\tc = getc (finput);\n+      while (c >= '0' && c <= '9')\n+\t{\n+\t  if (s < buf + sizeof buf - 1)\n+\t    *s++ = c;\n+\t  c = getc (finput);\n+\t}\n+      *s = '\\0';\n \n-     #pragma align [(size)] | (identifier=size[,...])\n-     #pragma noalign [(identifier)[,...]]\n+      align = atoi (buf);\n+      switch (align)\n+\t{\n+\tcase 0:\n+\t  /* Return to last alignment.  */\n+\t  align = i960_last_maxbitalignment / 8;\n+\t  /* Fall through.  */\n+\tcase 16:\n+\tcase 8:\n+\tcase 4:\n+\tcase 2:\n+\tcase 1:\n+\t  i960_last_maxbitalignment = i960_maxbitalignment;\n+\t  i960_maxbitalignment = align * 8;\n+\t  break;\n \n-     (all parens are optional)\n+\tdefault:\n+\t  /* Silently ignore bad values.  */\n+\t  break;\n+\t}\n+\n+      /* NOTE: ic960 R3.0 pragma align definition:\n \n-     - size is [1,2,4,8,16]\n-     - noalign means size==1\n-     - applies only to component elements of a struct (and union?)\n-     - identifier applies to structure tag (only)\n-     - missing identifier means next struct\n+\t #pragma align [(size)] | (identifier=size[,...])\n+\t #pragma noalign [(identifier)[,...]]\n \n-     - alignment rules for bitfields need more investigation  */\n+\t (all parens are optional)\n+\n+\t - size is [1,2,4,8,16]\n+\t - noalign means size==1\n+\t - applies only to component elements of a struct (and union?)\n+\t - identifier applies to structure tag (only)\n+\t - missing identifier means next struct\n+\n+\t - alignment rules for bitfields need more investigation  */\n+    }\n \n   /* Should be pragma 'far' or equivalent for callx/balx here.  */\n+\n+  ungetc (c, finput);\n }\n-#endif\n \n /* Initialize variables before compiling any files.  */\n \n@@ -2133,45 +2162,29 @@ i960_object_bytes_bitalign (n)\n   return n;\n }\n \n-/* Compute the size of an aggregate type TSIZE.  */\n-\n-tree\n-i960_round_size (tsize)\n-     tree tsize;\n-{\n-  int size, byte_size, align;\n-\n-  if (TREE_CODE (tsize) != INTEGER_CST)\n-    return tsize;\n-\n-  size = TREE_INT_CST_LOW (tsize);\n-  byte_size = (size + BITS_PER_UNIT - 1) / BITS_PER_UNIT;\n-  align = i960_object_bytes_bitalign (byte_size);\n-\n-  /* Handle #pragma align.  */\n-  if (align > i960_maxbitalignment)\n-    align = i960_maxbitalignment;\n-\n-  if (size % align)\n-    size = ((size / align) + 1) * align;\n-\n-  return size_int (size);\n-}\n-\n-/* Compute the alignment for an aggregate type TSIZE.  */\n+/* Compute the alignment for an aggregate type TSIZE.\n+   Alignment is MAX (greatest member alignment,\n+                     MIN (pragma align, structure size alignment)).  */\n \n int\n i960_round_align (align, tsize)\n      int align;\n      tree tsize;\n {\n-  int byte_size;\n+  int new_align;\n \n   if (TREE_CODE (tsize) != INTEGER_CST)\n     return align;\n \n-  byte_size = (TREE_INT_CST_LOW (tsize) + BITS_PER_UNIT - 1) / BITS_PER_UNIT;\n-  align = i960_object_bytes_bitalign (byte_size);\n+  new_align = i960_object_bytes_bitalign (TREE_INT_CST_LOW (tsize)\n+\t\t\t\t\t  / BITS_PER_UNIT);\n+  /* Handle #pragma align.  */\n+  if (new_align > i960_maxbitalignment)\n+    new_align = i960_maxbitalignment;\n+\n+  if (align < new_align)\n+    align = new_align;\n+\n   return align;\n }\n \f"}, {"sha": "67b39095e3c799528105194d350b7c144bd2d160", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9040e2c81683a96a8e1b0903096d612d0f84013/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9040e2c81683a96a8e1b0903096d612d0f84013/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=c9040e2c81683a96a8e1b0903096d612d0f84013", "patch": "@@ -117,6 +117,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define PUT_SDB_TYPE(A) \\\n   fprintf (asm_out_file, \"\\t.type\\t0x%x;\", (A & 0xf) + 2 * (A & ~0xf))\n \n+/* Handle pragmas for compatibility with Intel's compilers.  */\n+#define HANDLE_PRAGMA(FILE) process_pragma (FILE)\n+\n /* Run-time compilation parameters selecting different hardware subsets.  */\n \n /* 960 architecture with floating-point.  */\n@@ -391,13 +394,8 @@ extern int target_flags;\n \n #define ROUND_TYPE_ALIGN(TYPE, COMPUTED, SPECIFIED)\t\t\\\n   ((!TARGET_OLD_ALIGN && TREE_CODE (TYPE) == RECORD_TYPE)\t\\\n-   ? i960_round_align ((SPECIFIED), TYPE_SIZE (TYPE))\t\t\\\n+   ? i960_round_align (MAX ((COMPUTED), (SPECIFIED)), TYPE_SIZE (TYPE)) \\\n    : MAX ((COMPUTED), (SPECIFIED)))\n-\n-#define ROUND_TYPE_SIZE(TYPE, SIZE, ALIGN)\t\t\t\\\n-  ((!TARGET_OLD_ALIGN && TREE_CODE (TYPE) == RECORD_TYPE)\t\\\n-   ? (tree) i960_round_size (SIZE)\t\t\t\t\\\n-   : round_up ((SIZE), (ALIGN)))\n \f\n /* Standard register usage.  */\n "}]}