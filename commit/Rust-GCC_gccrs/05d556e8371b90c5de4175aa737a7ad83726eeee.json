{"sha": "05d556e8371b90c5de4175aa737a7ad83726eeee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVkNTU2ZTgzNzFiOTBjNWRlNDE3NWFhNzM3YTdhZDgzNzI2ZWVlZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-14T05:54:33Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-14T05:54:33Z"}, "message": "Don't incorrectly parse expression as type switch.\n\nImprove error reporting of invalid type assertions.\n\nFrom-SVN: r167787", "tree": {"sha": "3ce6c4d7b40fb91fe7be5dd40089df6dda444202", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ce6c4d7b40fb91fe7be5dd40089df6dda444202"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05d556e8371b90c5de4175aa737a7ad83726eeee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d556e8371b90c5de4175aa737a7ad83726eeee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05d556e8371b90c5de4175aa737a7ad83726eeee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05d556e8371b90c5de4175aa737a7ad83726eeee/comments", "author": null, "committer": null, "parents": [{"sha": "0c2e69043fd589833dc3fc2bbb77c40b02700369", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c2e69043fd589833dc3fc2bbb77c40b02700369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c2e69043fd589833dc3fc2bbb77c40b02700369"}], "stats": {"total": 45, "additions": 28, "deletions": 17}, "files": [{"sha": "6320f09fc11331a89f36062d84a2fedf0dfa1276", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d556e8371b90c5de4175aa737a7ad83726eeee/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d556e8371b90c5de4175aa737a7ad83726eeee/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=05d556e8371b90c5de4175aa737a7ad83726eeee", "patch": "@@ -11620,24 +11620,29 @@ Type_guard_expression::do_check_types(Gogo*)\n \tthis->report_error(_(\"invalid unsafe.Pointer conversion\"));\n     }\n   else if (expr_type->interface_type() == NULL)\n-    this->report_error(_(\"type assertion only valid for interface types\"));\n+    {\n+      if (!expr_type->is_error_type() && !this->type_->is_error_type())\n+\tthis->report_error(_(\"type assertion only valid for interface types\"));\n+      this->set_is_error();\n+    }\n   else if (this->type_->interface_type() == NULL)\n     {\n       std::string reason;\n       if (!expr_type->interface_type()->implements_interface(this->type_,\n \t\t\t\t\t\t\t     &reason))\n \t{\n-\t  if (reason.empty())\n-\t    this->report_error(_(\"impossible type assertion: \"\n-\t\t\t\t \"type does not implement interface\"));\n-\t  else\n+\t  if (!this->type_->is_error_type())\n \t    {\n-\t      error_at(this->location(),\n-\t\t       (\"impossible type assertion: \"\n-\t\t\t\"type does not implement interface (%s)\"),\n-\t\t       reason.c_str());\n-\t      this->set_is_error();\n+\t      if (reason.empty())\n+\t\tthis->report_error(_(\"impossible type assertion: \"\n+\t\t\t\t     \"type does not implement interface\"));\n+\t      else\n+\t\terror_at(this->location(),\n+\t\t\t (\"impossible type assertion: \"\n+\t\t\t  \"type does not implement interface (%s)\"),\n+\t\t\t reason.c_str());\n \t    }\n+\t  this->set_is_error();\n \t}\n     }\n }"}, {"sha": "5f4cef5015d2bd506b716d7a6a327a3b8212b77c", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d556e8371b90c5de4175aa737a7ad83726eeee/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d556e8371b90c5de4175aa737a7ad83726eeee/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=05d556e8371b90c5de4175aa737a7ad83726eeee", "patch": "@@ -2647,12 +2647,18 @@ Parse::selector(Expression* left, bool* is_type_switch)\n     {\n       this->advance_token();\n       Type* type = NULL;\n-      if (is_type_switch == NULL\n-\t  || !this->peek_token()->is_keyword(KEYWORD_TYPE))\n+      if (!this->peek_token()->is_keyword(KEYWORD_TYPE))\n \ttype = this->type();\n       else\n \t{\n-\t  *is_type_switch = true;\n+\t  if (is_type_switch != NULL)\n+\t    *is_type_switch = true;\n+\t  else\n+\t    {\n+\t      error_at(this->location(),\n+\t\t       \"use of %<.(type)%> outside type switch\");\n+\t      type = Type::make_error_type();\n+\t    }\n \t  this->advance_token();\n \t}\n       if (!this->peek_token()->is_op(OPERATOR_RPAREN))\n@@ -2866,7 +2872,7 @@ Parse::expression(Precedence precedence, bool may_be_sink,\n       left = this->verify_not_sink(left);\n       Expression* right = this->expression(right_precedence, false,\n \t\t\t\t\t   may_be_composite_lit,\n-\t\t\t\t\t   is_type_switch);\n+\t\t\t\t\t   NULL);\n       if (op == OPERATOR_CHANOP)\n \tleft = Expression::make_send(left, right, binop_location);\n       else\n@@ -2959,8 +2965,7 @@ Parse::unary_expr(bool may_be_sink, bool may_be_composite_lit,\n \t  return Expression::make_type(this->type(), location);\n \t}\n \n-      Expression* expr = this->unary_expr(false, may_be_composite_lit,\n-\t\t\t\t\t  is_type_switch);\n+      Expression* expr = this->unary_expr(false, may_be_composite_lit, NULL);\n       if (expr->is_error_expression())\n \t;\n       else if (op == OPERATOR_MULT && expr->is_type_expression())"}, {"sha": "2d17797c9dd818d1437055a297a6a9283fa14ab1", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05d556e8371b90c5de4175aa737a7ad83726eeee/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05d556e8371b90c5de4175aa737a7ad83726eeee/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=05d556e8371b90c5de4175aa737a7ad83726eeee", "patch": "@@ -1296,7 +1296,8 @@ Tuple_type_guard_assignment_statement::do_lower(Gogo*, Block* enclosing)\n   Type* expr_type = this->expr_->type();\n   if (expr_type->interface_type() == NULL)\n     {\n-      this->report_error(_(\"type assertion only valid for interface types\"));\n+      if (!expr_type->is_error_type() && !this->type_->is_error_type())\n+\tthis->report_error(_(\"type assertion only valid for interface types\"));\n       return Statement::make_error_statement(loc);\n     }\n "}]}