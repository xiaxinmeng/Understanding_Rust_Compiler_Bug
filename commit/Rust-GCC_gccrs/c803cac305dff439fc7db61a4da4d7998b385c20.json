{"sha": "c803cac305dff439fc7db61a4da4d7998b385c20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgwM2NhYzMwNWRmZjQzOWZjN2RiNjFhNGRhNGQ3OTk4YjM4NWMyMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-03T18:41:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-03T18:41:09Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1145", "tree": {"sha": "9a7ddc4549e35e8f19f7045e2de33c79fd168488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a7ddc4549e35e8f19f7045e2de33c79fd168488"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c803cac305dff439fc7db61a4da4d7998b385c20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c803cac305dff439fc7db61a4da4d7998b385c20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c803cac305dff439fc7db61a4da4d7998b385c20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c803cac305dff439fc7db61a4da4d7998b385c20/comments", "author": null, "committer": null, "parents": [{"sha": "8f80f942873eee8c285c8316d8d9ae99f5c8f68a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f80f942873eee8c285c8316d8d9ae99f5c8f68a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f80f942873eee8c285c8316d8d9ae99f5c8f68a"}], "stats": {"total": 282, "additions": 264, "deletions": 18}, "files": [{"sha": "ec73c4d713895bbee3fdbab319ac7fba4b34305d", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 264, "deletions": 18, "changes": 282, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c803cac305dff439fc7db61a4da4d7998b385c20/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c803cac305dff439fc7db61a4da4d7998b385c20/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=c803cac305dff439fc7db61a4da4d7998b385c20", "patch": "@@ -69,6 +69,14 @@\n \t\t(const_string \"yes\")\n \t\t(const_string \"no\")))\n \n+;; Attribute to indicate if an instruction is 'safe' to fill a load\n+;; delay slot because the first real instruction geneated is something\n+;; like load of $1 or a clobbered register.  Logical operations (&, |, ^)\n+;; which have operand[2] being a large integer constant fall into\n+;; this category.\n+\n+(define_attr \"safe\" \"no,yes\" (const_string \"no\"))\n+\n ;; Attribute describing the processor.  This attribute must match exactly\n ;; with the processor_type enumeration in mips.h.\n \n@@ -1153,19 +1161,98 @@ move\\\\t%0,%z4\\\\n\\\\\n ;; the optimizer can fold things together, at the expense of not moving the\n ;; constant out of loops.\n \n-(define_insn \"andsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,?d,?d\")\n+(define_expand \"andsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(and:SI (match_operand:SI 1 \"arith32_operand\" \"dKIM\")\n+\t\t(match_operand:SI 2 \"arith32_operand\" \"dKIM\")))]\n+  \"\"\n+  \"\n+{\n+  extern rtx gen_andsi3_internal2 ();\n+\n+  /* Canonlicalize */\n+  if (GET_CODE (operands[1]) == CONST_INT)\n+    {\n+      rtx temp;\n+\n+      if (GET_CODE (operands[2]) == CONST_INT)\n+\t{\n+\t  emit_move_insn (operands[0],\n+\t\t\t  gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t\t   INTVAL (operands[1]) & INTVAL (operands[2])));\n+\t  DONE;\n+\t}\n+\n+      temp = operands[1];\n+      operands[1] = operands[2];\n+      operands[2] = temp;\n+    }\n+\n+  if (GET_CODE (operands[2]) == CONST_INT && !SMALL_INT_UNSIGNED (operands[2]))\n+    {\n+      emit_insn (gen_andsi3_internal2 (operands[0],\n+\t\t\t\t       operands[1],\n+\t\t\t\t       operands[2],\n+\t\t\t\t       gen_reg_rtx (SImode)));\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"andsi3_internal1\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+\t(and:SI (match_operand:SI 1 \"arith32_operand\" \"%d,d\")\n+\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K\")))]\n+  \"\"\n+  \"@\n+   and\\\\t%0,%1,%2\n+   andi\\\\t%0,%1,%x2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"1\")])\n+\n+(define_insn \"andsi3_internal2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n \t(and:SI (match_operand:SI 1 \"arith32_operand\" \"%d,d,d,d\")\n-\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K,I,M\")))]\n+\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K,I,M\")))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"=d,d,d,d\"))]\n   \"\"\n   \"@\n    and\\\\t%0,%1,%2\n    andi\\\\t%0,%1,%x2\n-   %[li\\\\t%@,%X2\\;and\\\\t%0,%1,%@%]\n-   %[li\\\\t%@,%X2\\;and\\\\t%0,%1,%@%]\"\n+   lui\\\\t%3,(%X2)>>16\\;and\\\\t%0,%1,%3\n+   li\\\\t%@,%X2\\;and\\\\t%0,%1,%@\"\n   [(set_attr \"type\"\t\"arith,arith,multi,multi\")\n    (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"1,1,2,3\")])\n+   (set_attr \"length\"\t\"1,1,2,3\")\n+   (set_attr \"safe\"\t\"no,no,yes,yes\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(and:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"lui_int\" \"\")))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  \"reload_completed && !TARGET_DEBUG_D_MODE\"\n+\n+  [(set (match_dup 3) (match_dup 2))\n+   (set (match_dup 0) (and:SI (match_dup 1) (match_dup 3)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(and:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"large_int\" \"\")))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  \"reload_completed && !TARGET_DEBUG_D_MODE\"\n+\n+  [(set (match_dup 3) (match_dup 4))\n+   (set (match_dup 3) (ior:SI (match_dup 3) (match_dup 5)))\n+   (set (match_dup 0) (and:SI (match_dup 1) (match_dup 3)))]\n+  \"\n+{\n+  int val = INTVAL (operands[2]);\n+  operands[4] = gen_rtx (CONST_INT, VOIDmode, val & 0xffff0000);\n+  operands[5] = gen_rtx (CONST_INT, VOIDmode, val & 0x0000ffff);\n+}\")\n \n (define_insn \"anddi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n@@ -1190,19 +1277,98 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set (subreg:SI (match_dup 0) 1) (and:SI (subreg:SI (match_dup 1) 1) (subreg:SI (match_dup 2) 1)))]\n   \"\")\n \n-(define_insn \"iorsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,?d,?d\")\n+(define_expand \"iorsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(ior:SI (match_operand:SI 1 \"arith32_operand\" \"dKIM\")\n+\t\t(match_operand:SI 2 \"arith32_operand\" \"dKIM\")))]\n+  \"\"\n+  \"\n+{\n+  extern rtx gen_iorsi3_internal2 ();\n+\n+  /* Canonlicalize */\n+  if (GET_CODE (operands[1]) == CONST_INT)\n+    {\n+      rtx temp;\n+\n+      if (GET_CODE (operands[2]) == CONST_INT)\n+\t{\n+\t  emit_move_insn (operands[0],\n+\t\t\t  gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t\t   INTVAL (operands[1]) | INTVAL (operands[2])));\n+\t  DONE;\n+\t}\n+\n+      temp = operands[1];\n+      operands[1] = operands[2];\n+      operands[2] = temp;\n+    }\n+\n+  if (GET_CODE (operands[2]) == CONST_INT && !SMALL_INT_UNSIGNED (operands[2]))\n+    {\n+      emit_insn (gen_iorsi3_internal2 (operands[0],\n+\t\t\t\t       operands[1],\n+\t\t\t\t       operands[2],\n+\t\t\t\t       gen_reg_rtx (SImode)));\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"iorsi3_internal1\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+\t(ior:SI (match_operand:SI 1 \"arith32_operand\" \"%d,d\")\n+\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K\")))]\n+  \"\"\n+  \"@\n+   or\\\\t%0,%1,%2\n+   ori\\\\t%0,%1,%x2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"1\")])\n+\n+(define_insn \"iorsi3_internal2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n \t(ior:SI (match_operand:SI 1 \"arith32_operand\" \"%d,d,d,d\")\n-\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K,I,M\")))]\n+\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K,I,M\")))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"=d,d,d,d\"))]\n   \"\"\n   \"@\n    or\\\\t%0,%1,%2\n    ori\\\\t%0,%1,%x2\n-   %[li\\\\t%@,%X2\\;or\\\\t%0,%1,%@%]\n-   %[li\\\\t%@,%X2\\;or\\\\t%0,%1,%@%]\"\n+   lui\\\\t%3,(%X2)>>16\\;or\\\\t%0,%1,%3\n+   li\\\\t%@,%X2\\;or\\\\t%0,%1,%@\"\n   [(set_attr \"type\"\t\"arith,arith,multi,multi\")\n    (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"1,1,2,3\")])\n+   (set_attr \"length\"\t\"1,1,2,3\")\n+   (set_attr \"safe\"\t\"no,no,yes,yes\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(ior:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"lui_int\" \"\")))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  \"reload_completed && !TARGET_DEBUG_D_MODE\"\n+\n+  [(set (match_dup 3) (match_dup 2))\n+   (set (match_dup 0) (ior:SI (match_dup 1) (match_dup 3)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(ior:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"large_int\" \"\")))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  \"reload_completed && !TARGET_DEBUG_D_MODE\"\n+\n+  [(set (match_dup 3) (match_dup 4))\n+   (set (match_dup 3) (ior:SI (match_dup 3) (match_dup 5)))\n+   (set (match_dup 0) (ior:SI (match_dup 1) (match_dup 3)))]\n+  \"\n+{\n+  int val = INTVAL (operands[2]);\n+  operands[4] = gen_rtx (CONST_INT, VOIDmode, val & 0xffff0000);\n+  operands[5] = gen_rtx (CONST_INT, VOIDmode, val & 0x0000ffff);\n+}\")\n \n (define_insn \"iordi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n@@ -1227,19 +1393,99 @@ move\\\\t%0,%z4\\\\n\\\\\n    (set (subreg:SI (match_dup 0) 1) (ior:SI (subreg:SI (match_dup 1) 1) (subreg:SI (match_dup 2) 1)))]\n   \"\")\n \n-(define_insn \"xorsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,?d,?d\")\n+(define_expand \"xorsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(xor:SI (match_operand:SI 1 \"arith32_operand\" \"dKIM\")\n+\t\t(match_operand:SI 2 \"arith32_operand\" \"dKIM\")))]\n+  \"\"\n+  \"\n+{\n+  extern rtx gen_xorsi3_internal2 ();\n+\n+  /* Canonlicalize */\n+  if (GET_CODE (operands[1]) == CONST_INT)\n+    {\n+      rtx temp;\n+\n+      if (GET_CODE (operands[2]) == CONST_INT)\n+\t{\n+\t  emit_move_insn (operands[0],\n+\t\t\t  gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t\t   INTVAL (operands[1]) ^ INTVAL (operands[2])));\n+\t  DONE;\n+\t}\n+\n+      temp = operands[1];\n+      operands[1] = operands[2];\n+      operands[2] = temp;\n+    }\n+\n+  if (GET_CODE (operands[2]) == CONST_INT && !SMALL_INT_UNSIGNED (operands[2]))\n+    {\n+      emit_insn (gen_xorsi3_internal2 (operands[0],\n+\t\t\t\t       operands[1],\n+\t\t\t\t       operands[2],\n+\t\t\t\t       gen_reg_rtx (SImode)));\n+      DONE;\n+    }\n+}\")\n+\n+(define_insn \"xorsi3_internal1\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n+\t(xor:SI (match_operand:SI 1 \"arith32_operand\" \"%d,d\")\n+\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K\")))]\n+  \"\"\n+  \"@\n+   xor\\\\t%0,%1,%2\n+   xori\\\\t%0,%1,%x2\"\n+  [(set_attr \"type\"\t\"arith\")\n+   (set_attr \"mode\"\t\"SI\")\n+   (set_attr \"length\"\t\"1\")])\n+\n+(define_insn \"xorsi3_internal2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d\")\n \t(xor:SI (match_operand:SI 1 \"arith32_operand\" \"%d,d,d,d\")\n-\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K,I,M\")))]\n+\t\t(match_operand:SI 2 \"arith32_operand\" \"d,K,I,M\")))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"=d,d,d,d\"))]\n   \"\"\n   \"@\n    xor\\\\t%0,%1,%2\n    xori\\\\t%0,%1,%x2\n-   %[li\\\\t%@,%X2\\;xor\\\\t%0,%1,%@%]\n-   %[li\\\\t%@,%X2\\;xor\\\\t%0,%1,%@%]\"\n+   lui\\\\t%3,(%X2)>>16\\;xor\\\\t%0,%1,%3\n+   li\\\\t%@,%X2\\;xor\\\\t%0,%1,%@\"\n   [(set_attr \"type\"\t\"arith,arith,multi,multi\")\n    (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"1,1,2,3\")])\n+   (set_attr \"length\"\t\"1,1,2,3\")\n+   (set_attr \"safe\"\t\"no,no,yes,yes\")])\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(xor:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"lui_int\" \"\")))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  \"reload_completed && !TARGET_DEBUG_D_MODE\"\n+\n+  [(set (match_dup 3) (match_dup 2))\n+   (set (match_dup 0) (xor:SI (match_dup 1) (match_dup 3)))]\n+  \"\")\n+\n+(define_split\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(xor:SI (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t(match_operand:SI 2 \"large_int\" \"\")))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n+  \"reload_completed && !TARGET_DEBUG_D_MODE\"\n+\n+  [(set (match_dup 3) (match_dup 4))\n+   (set (match_dup 3) (ior:SI (match_dup 3) (match_dup 5)))\n+   (set (match_dup 0) (xor:SI (match_dup 1) (match_dup 3)))]\n+  \"\n+{\n+  int val = INTVAL (operands[2]);\n+  operands[4] = gen_rtx (CONST_INT, VOIDmode, val & 0xffff0000);\n+  operands[5] = gen_rtx (CONST_INT, VOIDmode, val & 0x0000ffff);\n+}\")\n+\n \n (define_insn \"xordi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d\")"}]}