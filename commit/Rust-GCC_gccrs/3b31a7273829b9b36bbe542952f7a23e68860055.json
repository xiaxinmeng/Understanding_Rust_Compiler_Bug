{"sha": "3b31a7273829b9b36bbe542952f7a23e68860055", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IzMWE3MjczODI5YjliMzZiYmU1NDI5NTJmN2EyM2U2ODg2MDA1NQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2013-06-10T23:11:05Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2013-06-10T23:11:05Z"}, "message": "c++config (_GLIBCXX_ABI_TAG_CXX11): Add.\n\n2013-06-10  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/c++config (_GLIBCXX_ABI_TAG_CXX11): Add.\n\t* include/bits/stl_map.h (erase): Use abi_tag when C++11.\n\t* include/bits/stl_multimap.h: Same.\n\t* include/bits/stl_multiset.h: Same.\n\t* include/bits/stl_set.h: Same.\n\t* include/bits/stl_tree.h: Same.\n\t* include/std/complex (real, imag): Use macro for abi_tag.\n\n\t* testsuite/lib/libstdc++.exp: Disable inlinling with -fno-inline.\n\t* testsuite/util/testsuite_containers.h (erase_external): New\n\tdeclarations.\n\t(erase_external_iterators): Same.\n\t(linkage_check_cxx98_cxx11_erase): Same.\n\t(linkage_check_cxx98_cxx11_erase_iterators): Same.\n\t* testsuite/util/testsuite_shared.cc: Define.\n\t* testsuite/23_containers/map/modifiers/erase/abi_tag.cc: New.\n\t* testsuite/23_containers/map/modifiers/erase/\n\tdr130-linkage-check.cc: New.\n\t* testsuite/23_containers/multimap/modifiers/erase/abi_tag.cc: New.\n\t* testsuite/23_containers/multimap/modifiers/erase/\n\tdr130-linkage-check.cc: New.\n\t* testsuite/23_containers/multiset/modifiers/erase/abi_tag.cc: New.\n\t* testsuite/23_containers/multiset/modifiers/erase/\n\tdr130-linkage-check.cc: New.\n\t* testsuite/23_containers/set/modifiers/erase/abi_tag.cc: New.\n\t* testsuite/23_containers/set/modifiers/erase/dr130-linkage-check.cc:\n\tNew.\n\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust line number.\n\n\t* testsuite/23_containers/map/dr130.cc: Move...\n\t* testsuite/23_containers/map/modifiers/dr130.cc: ...here.\n\t* testsuite/23_containers/multimap/dr130.cc: Move ...\n\t* testsuite/23_containers/multimap/modifiers/dr130.cc: ...here.\n\t* testsuite/23_containers/multiset/dr130.cc: Move...\n\t* testsuite/23_containers/multiset/modifiers/dr130.cc: ...here.\n\t* testsuite/23_containers/set/dr130.cc: Move...\n\t* testsuite/23_containers/set/modifiers/dr130.cc: ...here.\n\nFrom-SVN: r199924", "tree": {"sha": "6e23bd35a1443585f8f865dfbba9b0e48f3b6f73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e23bd35a1443585f8f865dfbba9b0e48f3b6f73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b31a7273829b9b36bbe542952f7a23e68860055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b31a7273829b9b36bbe542952f7a23e68860055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b31a7273829b9b36bbe542952f7a23e68860055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b31a7273829b9b36bbe542952f7a23e68860055/comments", "author": null, "committer": null, "parents": [{"sha": "19be72ab30d4518ebabbed3c3aefb020d00e374d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19be72ab30d4518ebabbed3c3aefb020d00e374d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19be72ab30d4518ebabbed3c3aefb020d00e374d"}], "stats": {"total": 507, "additions": 489, "deletions": 18}, "files": [{"sha": "ec9bfd2bd2b896616f17b74c0bb79c5550891a08", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -1,3 +1,43 @@\n+2013-06-10  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/c++config (_GLIBCXX_ABI_TAG_CXX11): Add.\n+\t* include/bits/stl_map.h (erase): Use abi_tag when C++11.\n+\t* include/bits/stl_multimap.h: Same.\n+\t* include/bits/stl_multiset.h: Same.\n+\t* include/bits/stl_set.h: Same.\n+\t* include/bits/stl_tree.h: Same.\n+\t* include/std/complex (real, imag): Use macro for abi_tag.\n+\n+\t* testsuite/lib/libstdc++.exp: Disable inlinling with -fno-inline.\n+\t* testsuite/util/testsuite_containers.h (erase_external): New\n+\tdeclarations.\n+\t(erase_external_iterators): Same.\n+\t(linkage_check_cxx98_cxx11_erase): Same.\n+\t(linkage_check_cxx98_cxx11_erase_iterators): Same.\n+\t* testsuite/util/testsuite_shared.cc: Define.\n+\t* testsuite/23_containers/map/modifiers/erase/abi_tag.cc: New.\n+\t* testsuite/23_containers/map/modifiers/erase/\n+\tdr130-linkage-check.cc: New.\n+\t* testsuite/23_containers/multimap/modifiers/erase/abi_tag.cc: New.\n+\t* testsuite/23_containers/multimap/modifiers/erase/\n+\tdr130-linkage-check.cc: New.\n+\t* testsuite/23_containers/multiset/modifiers/erase/abi_tag.cc: New.\n+\t* testsuite/23_containers/multiset/modifiers/erase/\n+\tdr130-linkage-check.cc: New.\n+\t* testsuite/23_containers/set/modifiers/erase/abi_tag.cc: New.\n+\t* testsuite/23_containers/set/modifiers/erase/dr130-linkage-check.cc:\n+\tNew.\n+\t* testsuite/ext/profile/mutex_extensions_neg.cc: Adjust line number.\n+\n+\t* testsuite/23_containers/map/dr130.cc: Move...\n+\t* testsuite/23_containers/map/modifiers/dr130.cc: ...here.\n+\t* testsuite/23_containers/multimap/dr130.cc: Move ...\n+\t* testsuite/23_containers/multimap/modifiers/dr130.cc: ...here.\n+\t* testsuite/23_containers/multiset/dr130.cc: Move...\n+\t* testsuite/23_containers/multiset/modifiers/dr130.cc: ...here.\n+\t* testsuite/23_containers/set/dr130.cc: Move...\n+\t* testsuite/23_containers/set/modifiers/dr130.cc: ...here.\n+\n 2013-06-10  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/17_intro/headers/c++1998/49745.cc: Extend current"}, {"sha": "aca8484e222fee1a98f5d3117797437322ebbbd2", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -84,6 +84,12 @@\n # define _GLIBCXX_DEPRECATED\n #endif\n \n+// Macros for ABI tag attributes.\n+#ifndef _GLIBCXX_ABI_TAG_CXX11\n+# define _GLIBCXX_ABI_TAG_CXX11 __attribute ((__abi_tag__ (\"cxx11\")))\n+#endif\n+\n+\n #if __cplusplus\n \n // Macro for constexpr, to support in mixed 03/0x mode."}, {"sha": "d05e4b9ab7d939c25f6f36fc14a52c909fed6348", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -690,7 +690,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       erase(const_iterator __position)\n       { return _M_t.erase(__position); }\n \n-      // LWG 2059.\n+      // LWG 2059\n+      _GLIBCXX_ABI_TAG_CXX11\n       iterator\n       erase(iterator __position)\n       { return _M_t.erase(__position); }"}, {"sha": "809ea540b8a87a840082051a1add3dddeff5fed6", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -596,6 +596,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       { return _M_t.erase(__position); }\n \n       // LWG 2059.\n+      _GLIBCXX_ABI_TAG_CXX11\n       iterator\n       erase(iterator __position)\n       { return _M_t.erase(__position); }"}, {"sha": "8ceb02ac65fd3bb5e40c9c3c733e76e7ae0ccd7b", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -532,6 +532,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  not touched in any way.  Managing the pointer is the user's\n        *  responsibility.\n        */\n+      _GLIBCXX_ABI_TAG_CXX11\n       iterator\n       erase(const_iterator __position)\n       { return _M_t.erase(__position); }\n@@ -583,6 +584,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  touched in any way.  Managing the pointer is the user's\n        *  responsibility.\n        */\n+      _GLIBCXX_ABI_TAG_CXX11\n       iterator\n       erase(const_iterator __first, const_iterator __last)\n       { return _M_t.erase(__first, __last); }"}, {"sha": "44eb5897f0ec314d1ca31eb77687b2fef9797a1e", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -546,6 +546,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  touched in any way.  Managing the pointer is the user's\n        *  responsibility.\n        */\n+      _GLIBCXX_ABI_TAG_CXX11\n       iterator\n       erase(const_iterator __position)\n       { return _M_t.erase(__position); }\n@@ -597,6 +598,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  the element is itself a pointer, the pointed-to memory is not touched\n        *  in any way.  Managing the pointer is the user's responsibility.\n        */\n+      _GLIBCXX_ABI_TAG_CXX11\n       iterator\n       erase(const_iterator __first, const_iterator __last)\n       { return _M_t.erase(__first, __last); }"}, {"sha": "91bf4df451144efe7250d1375da60685d94a2267", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -336,21 +336,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n               _Node_allocator;\n \n     protected:\n-      typedef _Rb_tree_node_base* _Base_ptr;\n-      typedef const _Rb_tree_node_base* _Const_Base_ptr;\n+      typedef _Rb_tree_node_base* \t\t_Base_ptr;\n+      typedef const _Rb_tree_node_base* \t_Const_Base_ptr;\n \n     public:\n-      typedef _Key key_type;\n-      typedef _Val value_type;\n-      typedef value_type* pointer;\n-      typedef const value_type* const_pointer;\n-      typedef value_type& reference;\n-      typedef const value_type& const_reference;\n-      typedef _Rb_tree_node<_Val>* _Link_type;\n-      typedef const _Rb_tree_node<_Val>* _Const_Link_type;\n-      typedef size_t size_type;\n-      typedef ptrdiff_t difference_type;\n-      typedef _Alloc allocator_type;\n+      typedef _Key \t\t\t\tkey_type;\n+      typedef _Val \t\t\t\tvalue_type;\n+      typedef value_type* \t\t\tpointer;\n+      typedef const value_type* \t\tconst_pointer;\n+      typedef value_type& \t\t\treference;\n+      typedef const value_type& \t\tconst_reference;\n+      typedef _Rb_tree_node<_Val>* \t\t_Link_type;\n+      typedef const _Rb_tree_node<_Val>*\t_Const_Link_type;\n+      typedef size_t \t\t\t\tsize_type;\n+      typedef ptrdiff_t \t\t\tdifference_type;\n+      typedef _Alloc \t\t\t\tallocator_type;\n \n       _Node_allocator&\n       _M_get_Node_allocator() _GLIBCXX_NOEXCEPT\n@@ -800,6 +800,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 130. Associative erase should return an iterator.\n+      _GLIBCXX_ABI_TAG_CXX11\n       iterator\n       erase(const_iterator __position)\n       {\n@@ -810,6 +811,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       // LWG 2059.\n+      _GLIBCXX_ABI_TAG_CXX11\n       iterator\n       erase(iterator __position)\n       {\n@@ -833,6 +835,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 130. Associative erase should return an iterator.\n+      _GLIBCXX_ABI_TAG_CXX11\n       iterator\n       erase(const_iterator __first, const_iterator __last)\n       {"}, {"sha": "7f100a0420d5d51f73ba89fee40de2fb514c8fd6", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -142,11 +142,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 387. std::complex over-encapsulated.\n-      __attribute ((__abi_tag__ (\"cxx11\")))\n+      _GLIBCXX_ABI_TAG_CXX11\n       constexpr _Tp \n       real() { return _M_real; }\n \n-      __attribute ((__abi_tag__ (\"cxx11\")))\n+      _GLIBCXX_ABI_TAG_CXX11\n       constexpr _Tp \n       imag() { return _M_imag; }\n #else"}, {"sha": "e155b4a43380404ea50d4dbf108a19f6b5af3e4d", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/dr130.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Fdr130.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Fdr130.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Fdr130.cc?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "previous_filename": "libstdc++-v3/testsuite/23_containers/map/dr130.cc"}, {"sha": "0a17c56c62bf46ae716470bd38486cdfd0d760ef", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/erase/abi_tag.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2Fabi_tag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2Fabi_tag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2Fabi_tag.cc?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options -std=c++11 }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Test that the C++11 variants have an ABI tag\n+\n+#include <map>\n+\n+using container = std::map<int, int>;\n+using iterator = typename container::iterator;\n+using const_iterator = typename container::const_iterator;\n+\n+// { dg-final { scan-assembler \"_ZNSt3mapIiiSt4lessIiESaISt4pairIKiiEEE5eraseB5cxx11ESt17_Rb_tree_iteratorIS4_E\" } }\n+iterator (container::*p1)(iterator) = &container::erase;"}, {"sha": "9d7cde973f201dd0c452f2c2b773bcb0e666c175", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/erase/dr130-linkage-check.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2Fdr130-linkage-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2Fdr130-linkage-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Ferase%2Fdr130-linkage-check.cc?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -0,0 +1,40 @@\n+// { dg-require-effective-target ia32 }\n+// { dg-require-sharedlib \"\" }\n+// { dg-options \"-fno-inline -std=gnu++11 ./testsuite_shared.so\" }\n+// 2013-06-03  Benjamin Kosnik  <bkoz@redhat..com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+\n+int main()\n+{\n+  typedef std::map<int, int>\t\tcontainer_type;\n+\n+  {\n+    container_type s { {0,0} , {1,1} , {2,2} };\n+    __gnu_test::linkage_check_cxx98_cxx11_erase(s);\n+  }\n+\n+  {\n+    container_type s { {0,0} , {1,1} , {2,2} };\n+    __gnu_test::linkage_check_cxx98_cxx11_erase_iterators(s);\n+  }\n+\n+  return 0;\n+}"}, {"sha": "b303fa62e52a432328114a714f88d53228f22729", "filename": "libstdc++-v3/testsuite/23_containers/multimap/modifiers/dr130.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Fdr130.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Fdr130.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Fdr130.cc?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "previous_filename": "libstdc++-v3/testsuite/23_containers/multimap/dr130.cc"}, {"sha": "7bd26a35245d8042f5c580d9a1a07d1952624812", "filename": "libstdc++-v3/testsuite/23_containers/multimap/modifiers/erase/abi_tag.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2Fabi_tag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2Fabi_tag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2Fabi_tag.cc?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options -std=c++11 }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Test that the C++11 variants have an ABI tag\n+\n+#include <map>\n+\n+using container = std::multimap<int, int>;\n+using iterator = typename container::iterator;\n+using const_iterator = typename container::const_iterator;\n+\n+// { dg-final { scan-assembler \"_ZNSt8multimapIiiSt4lessIiESaISt4pairIKiiEEE5eraseB5cxx11ESt17_Rb_tree_iteratorIS4_E\" } }\n+iterator (container::*p1)(iterator) = &container::erase;"}, {"sha": "236100cd920650c73f2b038bc526a18bbbc6ec20", "filename": "libstdc++-v3/testsuite/23_containers/multimap/modifiers/erase/dr130-linkage-check.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2Fdr130-linkage-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2Fdr130-linkage-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Ferase%2Fdr130-linkage-check.cc?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -0,0 +1,40 @@\n+// { dg-require-effective-target ia32 }\n+// { dg-require-sharedlib \"\" }\n+// { dg-options \"-fno-inline -std=gnu++11 ./testsuite_shared.so\" }\n+// 2013-06-03  Benjamin Kosnik  <bkoz@redhat..com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+\n+int main()\n+{\n+  typedef std::multimap<int, int>\t\tcontainer_type;\n+\n+  {\n+    container_type s { {0,0} , {1,1} , {2,2} };\n+    __gnu_test::linkage_check_cxx98_cxx11_erase(s);\n+  }\n+\n+  {\n+    container_type s { {0,0} , {1,1} , {2,2} };\n+    __gnu_test::linkage_check_cxx98_cxx11_erase_iterators(s);\n+  }\n+\n+  return 0;\n+}"}, {"sha": "fc8aaf6d8251c7bea97c4729363f5829d2710dec", "filename": "libstdc++-v3/testsuite/23_containers/multiset/modifiers/dr130.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Fdr130.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Fdr130.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Fdr130.cc?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "previous_filename": "libstdc++-v3/testsuite/23_containers/multiset/dr130.cc"}, {"sha": "bbe2d054d9470c5021c34d8a0d56528520a5073a", "filename": "libstdc++-v3/testsuite/23_containers/multiset/modifiers/erase/abi_tag.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Ferase%2Fabi_tag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Ferase%2Fabi_tag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Ferase%2Fabi_tag.cc?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+// { dg-options -std=c++11 }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Test that the C++11 variants have an ABI tag\n+\n+#include <set>\n+\n+using container = std::multiset<int>;\n+using iterator = typename container::iterator;\n+using const_iterator = typename container::const_iterator;\n+\n+// { dg-final { scan-assembler \"_ZNSt8multisetIiSt4lessIiESaIiEE5eraseB5cxx11ESt23_Rb_tree_const_iteratorIiE\" } }\n+iterator (container::*p1)(const_iterator) = &container::erase;\n+\n+// { dg-final { scan-assembler \"_ZNSt8multisetIiSt4lessIiESaIiEE5eraseB5cxx11ESt23_Rb_tree_const_iteratorIiES5_\" } }\n+iterator (container::*p2)(const_iterator, const_iterator) = &container::erase;"}, {"sha": "9155b648c1598888d06983c0c608dbf24b5aad2e", "filename": "libstdc++-v3/testsuite/23_containers/multiset/modifiers/erase/dr130-linkage-check.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Ferase%2Fdr130-linkage-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Ferase%2Fdr130-linkage-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Ferase%2Fdr130-linkage-check.cc?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -0,0 +1,40 @@\n+// { dg-require-effective-target ia32 }\n+// { dg-require-sharedlib \"\" }\n+// { dg-options \"-fno-inline -std=gnu++11 ./testsuite_shared.so\" }\n+// 2013-06-03  Benjamin Kosnik  <bkoz@redhat..com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+\n+int main()\n+{\n+  typedef std::multiset<int>\t\t\tcontainer_type;\n+\n+  {\n+    container_type s { 0, 1, 2 };\n+    __gnu_test::linkage_check_cxx98_cxx11_erase(s);\n+  }\n+\n+  {\n+    container_type s { 0, 1, 2 };\n+    __gnu_test::linkage_check_cxx98_cxx11_erase_iterators(s);\n+  }\n+\n+  return 0;\n+}"}, {"sha": "18b863240dc3b8f0246624df016e687bc28e1546", "filename": "libstdc++-v3/testsuite/23_containers/set/modifiers/dr130.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Fdr130.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Fdr130.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Fdr130.cc?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "previous_filename": "libstdc++-v3/testsuite/23_containers/set/dr130.cc"}, {"sha": "e612b2c9943c4576a0f4bdba94a8f2f92ff411fe", "filename": "libstdc++-v3/testsuite/23_containers/set/modifiers/erase/abi_tag.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Ferase%2Fabi_tag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Ferase%2Fabi_tag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Ferase%2Fabi_tag.cc?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -0,0 +1,38 @@\n+// { dg-do compile }\n+// { dg-options -std=c++11 }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+// Test that the C++11 variants have an ABI tag\n+\n+#include <set>\n+\n+using container = std::set<int>;\n+using iterator = typename container::iterator;\n+using const_iterator = typename container::const_iterator;\n+\n+// { dg-final { scan-assembler \"_ZNSt3setIiSt4lessIiESaIiEE5eraseB5cxx11ESt23_Rb_tree_const_iteratorIiE\" } }\n+iterator (container::*p1)(const_iterator) = &container::erase;\n+\n+// { dg-final { scan-assembler \"_ZNSt3setIiSt4lessIiESaIiEE5eraseB5cxx11ESt23_Rb_tree_const_iteratorIiES5_\" } }\n+iterator (container::*p2)(const_iterator, const_iterator) = &container::erase;"}, {"sha": "a894f0ce709a34600c14233200f38e605a236be4", "filename": "libstdc++-v3/testsuite/23_containers/set/modifiers/erase/dr130-linkage-check.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Ferase%2Fdr130-linkage-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Ferase%2Fdr130-linkage-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Ferase%2Fdr130-linkage-check.cc?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -0,0 +1,40 @@\n+// { dg-require-effective-target ia32 }\n+// { dg-require-sharedlib \"\" }\n+// { dg-options \"-fno-inline -std=gnu++11 ./testsuite_shared.so\" }\n+// 2013-06-03  Benjamin Kosnik  <bkoz@redhat..com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+\n+int main()\n+{\n+  typedef std::set<int>\t\t\tcontainer_type;\n+\n+  {\n+    container_type s { 0, 1, 2 };\n+    __gnu_test::linkage_check_cxx98_cxx11_erase(s);\n+  }\n+\n+  {\n+    container_type s { 0, 1, 2 };\n+    __gnu_test::linkage_check_cxx98_cxx11_erase_iterators(s);\n+  }\n+\n+  return 0;\n+}"}, {"sha": "23c551b0b6ef3b2677baa735a570b1e0017aa499", "filename": "libstdc++-v3/testsuite/ext/profile/mutex_extensions_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fprofile%2Fmutex_extensions_neg.cc?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -25,4 +25,4 @@\n \n #include <vector>\n \n-// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 269 }\n+// { dg-error \"multiple inlined namespaces\" \"\" { target *-*-* } 275 }"}, {"sha": "c339044a656d6fcf0715736deb41769c8286569e", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -628,7 +628,7 @@ proc v3-build_support { } {\n \t    # Compile with \"-w\" so that warnings issued by the compiler\n \t    # do not prevent compilation.\n \t    if { [v3_target_compile $srcdir/util/$f $object_file \"sharedlib\" \\\n-\t     [list \"incdir=$srcdir\" \"additional_flags=-w -shared -fPIC -DPIC\"]]\n+\t     [list \"incdir=$srcdir\" \"additional_flags=-fno-inline -w -shared -fPIC -DPIC\"]]\n \t\t != \"\" } {\n \t\terror \"could not compile $f\"\n \t    }"}, {"sha": "7e41d05ef433758c0f661aa3029bc68d95c5ba03", "filename": "libstdc++-v3/testsuite/util/testsuite_containers.h", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -223,6 +223,58 @@ namespace __gnu_test\n   template<typename _Tp>\n   _Tp citerator<_Tp>::_S_container;\n \n+  // DR 130 vs. C++98 vs. C++11.\n+  // Defined in testsuite_shared.cc.\n+  void \n+  erase_external(std::set<int>& s);\n+\n+  void \n+  erase_external(std::multiset<int>& s);\n+\n+  void \n+  erase_external(std::map<int, int>& s);\n+\n+  void \n+  erase_external(std::multimap<int, int>& s);\n+\n+  void \n+  erase_external_iterators(std::set<int>& s);\n+\n+  void \n+  erase_external_iterators(std::multiset<int>& s);\n+\n+  void \n+  erase_external_iterators(std::map<int, int>& s);\n+\n+  void \n+  erase_external_iterators(std::multimap<int, int>& s);\n+\n+// NB: \"must be compiled with C++11\"\n+#if __cplusplus >= 201103L\n+template<typename _Tp>\n+  void \n+  linkage_check_cxx98_cxx11_erase(_Tp& container)\n+  {\n+    // Crashing when exteral reference and internal reference symbols are\n+    // equivalently mangled but have different size return types in C++98\n+    // and C++11 signatures.\n+    erase_external(container); \t\t// C++98\n+    container.erase(container.begin());\t// C++11\n+  }\n+\n+template<typename _Tp>\n+  void \n+  linkage_check_cxx98_cxx11_erase_iterators(_Tp& container)\n+  {\n+    // Crashing when exteral reference and internal reference symbols are\n+    // equivalently mangled but have different size return types in C++98\n+    // and C++11 signatures.\n+    erase_external_iterators(container);// C++98\n+\n+    auto iter = container.begin();\n+    container.erase(iter, ++iter);\t// C++11\n+  }\n+#endif\n \n } // namespace __gnu_test\n "}, {"sha": "e07a03e6a477271f156fece6c82a648a6c4a97d9", "filename": "libstdc++-v3/testsuite/util/testsuite_shared.cc", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_shared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b31a7273829b9b36bbe542952f7a23e68860055/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_shared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_shared.cc?ref=3b31a7273829b9b36bbe542952f7a23e68860055", "patch": "@@ -19,9 +19,13 @@\n #include <stdexcept>\n #include <iostream>\n #include <sstream>\n+#include <set>\n+#include <map>\n #include <ext/mt_allocator.h>\n #include <bits/functexcept.h>\n \n+namespace __gnu_test\n+{\n // libstdc++/22309\n extern \"C\" void\n try_allocation()\n@@ -70,3 +74,57 @@ try_function_random_fail()\n   // Randomly throw. See if other threads cleanup.\n   std::__throw_bad_exception();\n }\n+\n+#if __cplusplus < 201103L\n+// \"must be compiled with C++98\"\n+  void \n+  erase_external(std::set<int>& s)\n+  { s.erase(s.begin()); }\n+\n+  void \n+  erase_external(std::multiset<int>& s)\n+  { s.erase(s.begin()); }\n+  \n+  void \n+  erase_external(std::map<int, int>& s)\n+  { s.erase(s.begin()); }\n+  \n+  void \n+  erase_external(std::multimap<int, int>& s)\n+  { s.erase(s.begin()); }\n+\n+  void \n+  erase_external_iterators(std::set<int>& s)\n+  {\n+    typedef typename std::set<int>::iterator iterator_type;\n+    iterator_type iter = s.begin();\n+    s.erase(iter, ++iter);\n+  }\n+\n+  void \n+  erase_external_iterators(std::multiset<int>& s)\n+  {\n+    typedef typename std::multiset<int>::iterator iterator_type;\n+    iterator_type iter = s.begin();\n+    s.erase(iter, ++iter);\n+  }\n+\n+  void \n+  erase_external_iterators(std::map<int, int>& s)\n+  {\n+    typedef typename std::map<int, int>::iterator iterator_type;\n+    iterator_type iter = s.begin();\n+    s.erase(iter, ++iter);\n+  }\n+\n+  \n+  void \n+  erase_external_iterators(std::multimap<int, int>& s)\n+  {\n+    typedef typename std::multimap<int, int>::iterator iterator_type;\n+    iterator_type iter = s.begin();\n+    s.erase(iter, ++iter);\n+  }\n+#endif\n+\n+} // end namepace __gnu_test"}]}