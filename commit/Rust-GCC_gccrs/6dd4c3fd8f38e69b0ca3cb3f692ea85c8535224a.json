{"sha": "6dd4c3fd8f38e69b0ca3cb3f692ea85c8535224a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRkNGMzZmQ4ZjM4ZTY5YjBjYTNjYjNmNjkyZWE4NWM4NTM1MjI0YQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gnu.org", "date": "2000-05-01T00:14:10Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-05-01T00:14:10Z"}, "message": "mknumeric_limits (trait_name): Fix copyright notice.\n\n\n2000-04-30  Benjamin Kosnik  <bkoz@gnu.org>\n\n\t* mknumeric_limits (trait_name): Fix copyright notice.\n\t* src/gen-num-limits.cc: Explicitly instantiate epsilon and\n\tround_error data members of struct value. This works around\n\tweak-linking issues on AIX, HPUX.\n\nFrom-SVN: r33558", "tree": {"sha": "040d96945a8132668b68d16390e8e799bcbf3df0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/040d96945a8132668b68d16390e8e799bcbf3df0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dd4c3fd8f38e69b0ca3cb3f692ea85c8535224a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dd4c3fd8f38e69b0ca3cb3f692ea85c8535224a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dd4c3fd8f38e69b0ca3cb3f692ea85c8535224a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dd4c3fd8f38e69b0ca3cb3f692ea85c8535224a/comments", "author": {"login": "bdekoz", "id": 997439, "node_id": "MDQ6VXNlcjk5NzQzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/997439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdekoz", "html_url": "https://github.com/bdekoz", "followers_url": "https://api.github.com/users/bdekoz/followers", "following_url": "https://api.github.com/users/bdekoz/following{/other_user}", "gists_url": "https://api.github.com/users/bdekoz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdekoz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdekoz/subscriptions", "organizations_url": "https://api.github.com/users/bdekoz/orgs", "repos_url": "https://api.github.com/users/bdekoz/repos", "events_url": "https://api.github.com/users/bdekoz/events{/privacy}", "received_events_url": "https://api.github.com/users/bdekoz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "82c3a53ec9b06b9bce83135f6afc27c1e54d0e7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82c3a53ec9b06b9bce83135f6afc27c1e54d0e7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82c3a53ec9b06b9bce83135f6afc27c1e54d0e7d"}], "stats": {"total": 67, "additions": 62, "deletions": 5}, "files": [{"sha": "226e2efd2caa7aa41ac87a4c058e35e0df82aa17", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dd4c3fd8f38e69b0ca3cb3f692ea85c8535224a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dd4c3fd8f38e69b0ca3cb3f692ea85c8535224a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6dd4c3fd8f38e69b0ca3cb3f692ea85c8535224a", "patch": "@@ -1,3 +1,10 @@\n+2000-04-30  Benjamin Kosnik  <bkoz@gnu.org>\n+\n+\t* mknumeric_limits (trait_name): Fix copyright notice.\n+\t* src/gen-num-limits.cc: Explicitly instantiate epsilon and\n+\tround_error data members of struct value. This works around\n+\tweak-linking issues on AIX, HPUX.\n+\n 2000-04-29  Phil Edwards  <pme@sourceware.cygnus.com>\n \n \t* docs/download.html:  Add link to list of mirror sites."}, {"sha": "3f5221152b1e2e8b5f53d3f13cbc115e6a87c713", "filename": "libstdc++-v3/mknumeric_limits", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dd4c3fd8f38e69b0ca3cb3f692ea85c8535224a/libstdc%2B%2B-v3%2Fmknumeric_limits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dd4c3fd8f38e69b0ca3cb3f692ea85c8535224a/libstdc%2B%2B-v3%2Fmknumeric_limits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmknumeric_limits?ref=6dd4c3fd8f38e69b0ca3cb3f692ea85c8535224a", "patch": "@@ -189,7 +189,7 @@ trait_name=numeric_limits\n cat <<EOF > $OUT_C\n // Static data members of -*- C++ -*- numeric_limits classes\n \n-// Copyright (C) 1999 Cygnus Solutions\n+// Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "f9ecbacf09d330b1e289e9c808fb5c5b84bec7e0", "filename": "libstdc++-v3/src/gen-num-limits.cc", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dd4c3fd8f38e69b0ca3cb3f692ea85c8535224a/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dd4c3fd8f38e69b0ca3cb3f692ea85c8535224a/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fgen-num-limits.cc?ref=6dd4c3fd8f38e69b0ca3cb3f692ea85c8535224a", "patch": "@@ -342,7 +342,7 @@ template<typename T>\n const int value<T>::digits =\n       bits_per_byte * sizeof(T) - int(predicate<T>::is_signed);\n \n-// Non integer types should specialize this.  Alwyas two for\n+// Non integer types should specialize this.  Always two for\n // integer types.\n template<typename T>\n const int value<T>::radix = 2;\n@@ -366,16 +366,38 @@ SPECIALIZE_RADIX(long double, FLT_RADIX);\n \n #undef SPECIALIZE_RADIX\n \n+// Non integer types should specialize this.  \n+// Unfortunately, systems that don't deal with weak linking correctly\n+// (Ie, hpux and aix), cannot use this sophisticated yet sane method. So,\n+// explicitly instantiate all the data members here so that they will\n+// be happy.\n \n+// sophisticated, sane method\n+#if 0\n template<typename T>\n const char value<T>::epsilon[] = \"0\";\n-\n-template<typename T>\n-const char value<T>::round_error[] = \"0\";\n+#endif\n \n #define SPECIALIZE_EPSILON(T, E) DO_SPECIALIZE_EPSILON(T, E)\n #define DO_SPECIALIZE_EPSILON(T, E) const char value< T >::epsilon[] = #E\n \n+// unsophisticated, gross method\n+#if 1\n+SPECIALIZE_EPSILON(bool, 0);\n+SPECIALIZE_EPSILON(char, 0);\n+SPECIALIZE_EPSILON(unsigned char, 0);\n+SPECIALIZE_EPSILON(signed char, 0);\n+SPECIALIZE_EPSILON(wchar_t, 0);\n+SPECIALIZE_EPSILON(short, 0);\n+SPECIALIZE_EPSILON(unsigned short, 0);\n+SPECIALIZE_EPSILON(int, 0);\n+SPECIALIZE_EPSILON(unsigned int, 0);\n+SPECIALIZE_EPSILON(long, 0);\n+SPECIALIZE_EPSILON(unsigned long, 0);\n+SPECIALIZE_EPSILON(long long, 0);\n+SPECIALIZE_EPSILON(unsigned long long, 0);\n+#endif\n+\n SPECIALIZE_EPSILON(float, FLT_EPSILON);\n SPECIALIZE_EPSILON(double, DBL_EPSILON);\n SPECIALIZE_EPSILON(long double, LDBL_EPSILON);\n@@ -384,7 +406,35 @@ SPECIALIZE_EPSILON(long double, LDBL_EPSILON);\n #undef SPECIALIZE_EPSILON\n \n \n+// Non integer types should specialize this.  \n+// Unfortunately, systems that don't deal with weak linking correctly\n+// (Ie, hpux and aix), cannot use this sophisticated yet sane method. So,\n+// explicitly instantiate all the data members here so that they will\n+// be happy.\n+\n+// sophisticated, sane method\n+#if 0\n+template<typename T>\n+const char value<T>::round_error[] = \"0\";\n+#endif\n+\n #define SPECIALIZE_ROUND_ERROR(T, R) const char value< T >::round_error[] = #R\n+// unsophisticated, gross method\n+#if 1\n+SPECIALIZE_ROUND_ERROR(bool, 0);\n+SPECIALIZE_ROUND_ERROR(char, 0);\n+SPECIALIZE_ROUND_ERROR(unsigned char, 0);\n+SPECIALIZE_ROUND_ERROR(signed char, 0);\n+SPECIALIZE_ROUND_ERROR(wchar_t, 0);\n+SPECIALIZE_ROUND_ERROR(short, 0);\n+SPECIALIZE_ROUND_ERROR(unsigned short, 0);\n+SPECIALIZE_ROUND_ERROR(int, 0);\n+SPECIALIZE_ROUND_ERROR(unsigned int, 0);\n+SPECIALIZE_ROUND_ERROR(long, 0);\n+SPECIALIZE_ROUND_ERROR(unsigned long, 0);\n+SPECIALIZE_ROUND_ERROR(long long, 0);\n+SPECIALIZE_ROUND_ERROR(unsigned long long, 0);\n+#endif\n \n SPECIALIZE_ROUND_ERROR(float, 1.0f);\n SPECIALIZE_ROUND_ERROR(double, 1.0);"}]}