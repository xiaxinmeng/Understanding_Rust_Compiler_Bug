{"sha": "0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY3ODY2ZTdiYTEwOWJjNjhhZTJjMGQxNGVjMDM5OTc2NWZjMTQ0Yg==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2002-08-10T02:18:28Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2002-08-10T02:18:28Z"}, "message": "c-common.c (flag_objc): New.\n\n2002-08-09  Ziemowit Laski  <zlaski@apple.com>\n\n        * c-common.c (flag_objc): New.\n        * c-common.h (c_language_kind): Get rid of clk_objective_c\n        enum value.\n        (flag_objc): New extern declaration.\n        * c-decl.c (implicitly_declare): Call objc_check_decl\n        instead of maybe_objc_check_decl.\n        (finish_decl): Likewise.\n        (grokfield): Likewise.\n        (finish_struct): Likewise.\n        * c-lang.c (maybe_objc_check_decl): Rename to objc_check_decl.\n        (maybe_objc_comptypes): Rename to objc_comptypes.\n        (maybe_building_objc_message_expr): Rename to\n        objc_message_selector.\n        * c-lex.c (lex_charconst): Remove uses of clk_objective_c,\n        replace with flag_objc as needed.\n        * c-opts.c (c_common_init_options): Likewise.\n        (c_common_decode_option): Likewise.\n        * c-parse.in (init_reswords): Likewise.\n        * c-tree.h (maybe_objc_check_decl): Rename to objc_check_decl.\n        (maybe_objc_comptypes): Rename to objc_comptypes.\n        (maybe_building_objc_message_expr): Rename to\n        objc_message_selector.\n        * c-typeck.c (comptypes): Call objc_comptypes instead of\n        maybe_objc_comptypes, and/or objc_message_selector instead of\n        (comp_target_types): Likewise.\n        (convert_for_assignment): Likewise.\n        (warn_for_assignment): Likewise.\n        * cppinit.c (init_builtins): Set __OBJC__ manifest constant\n        independently of those for other languages.\n        * objc/objc-act.c (maybe_objc_comptypes): Delete.\n        (maybe_objc_check_decl): Delete.\n        (maybe_building_objc_message_expr): Rename to\n        objc_message_selector.\n        * objc/objc-lang.c (objc_init_options): Use clk_c instead of\n        clk_objective_c; set flag_objc flag.\n\nFrom-SVN: r56173", "tree": {"sha": "9eae3f190177c258108b75e7081a965f0c60e1f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9eae3f190177c258108b75e7081a965f0c60e1f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/comments", "author": null, "committer": null, "parents": [{"sha": "9e259dd1ff3f146f89ff4261d9e48685b378b693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e259dd1ff3f146f89ff4261d9e48685b378b693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e259dd1ff3f146f89ff4261d9e48685b378b693"}], "stats": {"total": 159, "additions": 98, "deletions": 61}, "files": [{"sha": "df1380c3953a5ecb44e4855fe2a294546782ce96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "patch": "@@ -1,3 +1,42 @@\n+2002-08-09  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* c-common.c (flag_objc): New.\n+\t* c-common.h (c_language_kind): Get rid of clk_objective_c\n+\tenum value.\n+\t(flag_objc): New extern declaration.\n+\t* c-decl.c (implicitly_declare): Call objc_check_decl\n+\tinstead of maybe_objc_check_decl.\n+\t(finish_decl): Likewise.\n+\t(grokfield): Likewise.\n+\t(finish_struct): Likewise.\n+\t* c-lang.c (maybe_objc_check_decl): Rename to objc_check_decl.\n+\t(maybe_objc_comptypes): Rename to objc_comptypes.\n+\t(maybe_building_objc_message_expr): Rename to \n+\tobjc_message_selector.\n+\t* c-lex.c (lex_charconst): Remove uses of clk_objective_c,\n+\treplace with flag_objc as needed.\n+\t* c-opts.c (c_common_init_options): Likewise.\n+\t(c_common_decode_option): Likewise.\n+\t* c-parse.in (init_reswords): Likewise.\n+\t* c-tree.h (maybe_objc_check_decl): Rename to objc_check_decl.\n+\t(maybe_objc_comptypes): Rename to objc_comptypes.\n+\t(maybe_building_objc_message_expr): Rename to       \n+\tobjc_message_selector.\n+\t* c-typeck.c (comptypes): Call objc_comptypes instead of\n+\tmaybe_objc_comptypes, and/or objc_message_selector instead of\n+\tmaybe_building_objc_message_expr.\n+\t(comp_target_types): Likewise.\n+\t(convert_for_assignment): Likewise.\n+\t(warn_for_assignment): Likewise.\n+\t* cppinit.c (init_builtins): Set __OBJC__ manifest constant\n+\tindependently of those for other languages.\n+\t* objc/objc-act.c (maybe_objc_comptypes): Delete.\n+\t(maybe_objc_check_decl): Delete.\n+\t(maybe_building_objc_message_expr): Rename to \n+\tobjc_message_selector.\n+\t* objc/objc-lang.c (objc_init_options): Use clk_c instead of\n+\tclk_objective_c; set flag_objc flag.\n+\n 2002-08-09  Toshiyasu Morita  <toshiyasu.morita@hsa.hitachi.com>\n \n \t* ifcvt.c (find_if_case_2): Test correct basic block for size."}, {"sha": "bdf47c4d1ee2affd5eed3ebd1aabb1b109fdacd3", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "patch": "@@ -200,6 +200,9 @@ int flag_preprocess_only;\n    user's namespace.  */\n int flag_iso;\n \n+/* Nonzero whenever Objective-C functionality is being used.  */\n+int flag_objc;\n+\n /* Nonzero if -undef was given.  It suppresses target built-in macros\n    and assertions.  */\n int flag_undef;"}, {"sha": "63a6837e29d40a930a9596f872fa2f12b9aa520b", "filename": "gcc/c-common.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "patch": "@@ -240,8 +240,7 @@ typedef enum c_language_kind\n {\n   clk_c,           /* A dialect of C: K&R C, ANSI/ISO C89, C2000,\n \t\t       etc.  */\n-  clk_cplusplus,   /* ANSI/ISO C++ */\n-  clk_objective_c  /* Objective C */\n+  clk_cplusplus   /* ANSI/ISO C++ */\n }\n c_language_kind;\n \n@@ -367,7 +366,6 @@ struct c_lang_decl GTY(()) {\n \n extern c_language_kind c_language;\n \n-\n /* Switches common to the C front ends.  */\n \n /* Nonzero if prepreprocessing only.  */\n@@ -377,6 +375,9 @@ extern int flag_preprocess_only;\n    user's namespace.  */\n extern int flag_iso;\n \n+/* Nonzero whenever Objective-C functionality is being used.  */\n+extern int flag_objc;\n+\n /* Nonzero if -undef was given.  It suppresses target built-in macros\n    and assertions.  */\n extern int flag_undef;\n@@ -794,9 +795,6 @@ extern int warn_deprecated;\n \n extern int max_tinst_depth;\n \n-\n-\n-\n /* C types are partitioned into three subsets: object, function, and\n    incomplete types.  */\n #define C_TYPE_OBJECT_P(type) \\"}, {"sha": "7a926cf2ab0df8476a449fdbe0f1d9406f68618f", "filename": "gcc/c-decl.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "patch": "@@ -2059,8 +2059,9 @@ implicitly_declare (functionid)\n      So we record the decl in the standard fashion.  */\n   pushdecl (decl);\n \n-  /* This is a no-op in c-lang.c or something real in objc-actions.c.  */\n-  maybe_objc_check_decl (decl);\n+  /* This is a no-op in c-lang.c or something real in objc-act.c.  */\n+  if (flag_objc)\n+    objc_check_decl (decl);\n \n   rest_of_decl_compilation (decl, NULL, 0, 0);\n \n@@ -3097,8 +3098,9 @@ finish_decl (decl, init, asmspec_tree)\n \n   if (TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == FUNCTION_DECL)\n     {\n-      /* This is a no-op in c-lang.c or something real in objc-actions.c.  */\n-      maybe_objc_check_decl (decl);\n+      /* This is a no-op in c-lang.c or something real in objc-act.c.  */\n+      if (flag_objc)\n+\tobjc_check_decl (decl);\n \n       if (!DECL_CONTEXT (decl))\n \t{\n@@ -3160,8 +3162,9 @@ finish_decl (decl, init, asmspec_tree)\n \n   if (TREE_CODE (decl) == TYPE_DECL)\n     {\n-      /* This is a no-op in c-lang.c or something real in objc-actions.c.  */\n-      maybe_objc_check_decl (decl);\n+      /* This is a no-op in c-lang.c or something real in objc-act.c.  */\n+      if (flag_objc)\n+\tobjc_check_decl (decl);\n       rest_of_decl_compilation (decl, NULL, DECL_CONTEXT (decl) == 0, 0);\n     }\n \n@@ -5009,7 +5012,8 @@ grokfield (filename, line, declarator, declspecs, width)\n   finish_decl (value, NULL_TREE, NULL_TREE);\n   DECL_INITIAL (value) = width;\n \n-  maybe_objc_check_decl (value);\n+  if (flag_objc)\n+    objc_check_decl (value);\n   return value;\n }\n \f\n@@ -5297,8 +5301,9 @@ finish_struct (t, fieldlist, attributes)\n \t      && TREE_CODE (decl) != TYPE_DECL)\n \t    {\n \t      layout_decl (decl, 0);\n-\t      /* This is a no-op in c-lang.c or something real in objc-actions.c.  */\n-\t      maybe_objc_check_decl (decl);\n+\t      /* This is a no-op in c-lang.c or something real in objc-act.c.  */\n+\t      if (flag_objc)\n+\t\tobjc_check_decl (decl);\n \t      rest_of_decl_compilation (decl, NULL, toplevel, 0);\n \t      if (! toplevel)\n \t\texpand_decl (decl);\n@@ -5320,7 +5325,8 @@ finish_struct (t, fieldlist, attributes)\n \t\t  if (TREE_CODE (decl) != TYPE_DECL)\n \t\t    {\n \t\t      layout_decl (decl, 0);\n-\t\t      maybe_objc_check_decl (decl);\n+\t\t      if (flag_objc)\n+\t\t\tobjc_check_decl (decl);\n \t\t      rest_of_decl_compilation (decl, NULL, toplevel, 0);\n \t\t      if (! toplevel)\n \t\t\texpand_decl (decl);"}, {"sha": "7d256ababe85025219870404520d2b31be73fa38", "filename": "gcc/c-lang.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "patch": "@@ -183,13 +183,13 @@ is_class_name (arg)\n }\n \n void\n-maybe_objc_check_decl (decl)\n+objc_check_decl (decl)\n      tree decl ATTRIBUTE_UNUSED;\n {\n }\n \n int\n-maybe_objc_comptypes (lhs, rhs, reflexive)\n+objc_comptypes (lhs, rhs, reflexive)\n      tree lhs ATTRIBUTE_UNUSED;\n      tree rhs ATTRIBUTE_UNUSED;\n      int reflexive ATTRIBUTE_UNUSED;\n@@ -198,7 +198,7 @@ maybe_objc_comptypes (lhs, rhs, reflexive)\n }\n \n tree\n-maybe_building_objc_message_expr ()\n+objc_message_selector ()\n {\n   return 0;\n }"}, {"sha": "b4cc301deb17e5e26d3ec82ed284bfa3430c3bca", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "patch": "@@ -1078,8 +1078,7 @@ lex_charconst (token)\n     type = wchar_type_node;\n   /* In C, a character constant has type 'int'.\n      In C++ 'char', but multi-char charconsts have type 'int'.  */\n-  else if ((c_language == clk_c || c_language == clk_objective_c)\n-\t   || chars_seen > 1)\n+  else if ((c_language == clk_c) || chars_seen > 1)\n     type = integer_type_node;\n   else\n     type = char_type_node;"}, {"sha": "02f1ada8c2e260e6ea8cc8459d062b1803b2b67a", "filename": "gcc/c-opts.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "patch": "@@ -406,11 +406,11 @@ c_common_init_options (lang)\n #endif\n \n   c_language = lang;\n-  parse_in = cpp_create_reader (lang == clk_c || lang == clk_objective_c\n+  parse_in = cpp_create_reader (lang == clk_c\n \t\t\t\t? CLK_GNUC89 : CLK_GNUCXX);\n   cpp_opts = cpp_get_options (parse_in);\n \n-  if (lang == clk_objective_c)\n+  if (flag_objc)\n     cpp_opts->objc = 1;\n \n   flag_const_strings = (lang == clk_cplusplus);\n@@ -447,9 +447,14 @@ c_common_decode_option (argc, argv)\n \n   switch (c_language)\n     {\n-    case clk_c:\t\t\tlang_flag = CL_C_ONLY; break;\n-    case clk_cplusplus:\t\tlang_flag = CL_CXX_ONLY; break;\n-    case clk_objective_c:\tlang_flag = CL_OBJC_ONLY; break;\n+    case clk_c:\t\t\tlang_flag = (flag_objc\n+\t\t\t\t\t     ? CL_C\n+\t\t\t\t\t     : CL_C_ONLY);\n+\t\t\t\tbreak;\n+    case clk_cplusplus:\t\tlang_flag = (flag_objc\n+\t\t\t\t\t     ? CL_CXX\n+\t\t\t\t\t     : CL_CXX_ONLY);\n+\t\t\t\tbreak;\n     default:\t\t\tabort ();\n     }\n \n@@ -557,7 +562,7 @@ c_common_decode_option (argc, argv)\n       if (warn_uninitialized != 1)\n \twarn_uninitialized = (on ? 2 : 0);\n \n-      if (c_language == clk_c || c_language == clk_objective_c)\n+      if (c_language == clk_c)\n \t/* We set this to 2 here, but 1 in -Wmain, so -ffreestanding\n \t   can turn it off only if it's not explicit.  */\n \twarn_main = on * 2;\n@@ -813,7 +818,7 @@ c_common_decode_option (argc, argv)\n       break;\n \n     case OPT_Wwrite_strings:\n-      if (c_language == clk_c || c_language == clk_objective_c)\n+      if (c_language == clk_c)\n \tflag_const_strings = on;\n       else\n \twarn_write_strings = on;\n@@ -824,7 +829,7 @@ c_common_decode_option (argc, argv)\n       break;\n \n     case OPT_fcond_mismatch:\n-      if (c_language == clk_c || c_language == clk_objective_c)\n+      if (c_language == clk_c)\n \t{\n \t  flag_cond_mismatch = on;\n \t  break;\n@@ -1114,7 +1119,7 @@ c_common_decode_option (argc, argv)\n     case OPT_std_iso9899_199409:\n     case OPT_ansi:\n       /* Note: -ansi is used by both the C and C++ front ends.  */\n-      if (c_language == clk_c || c_language == clk_objective_c)\n+      if (c_language == clk_c)\n \t{\n \t  flag_no_asm = 1;\n \t  flag_writable_strings = 0;"}, {"sha": "11e0e442cc2ffe7ab40818a283e05195aaa37d9c", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "patch": "@@ -3546,7 +3546,7 @@ init_reswords ()\n   int mask = (flag_isoc99 ? 0 : D_C89)\n \t      | (flag_no_asm ? (flag_isoc99 ? D_EXT : D_EXT|D_EXT89) : 0);\n \n-  if (c_language != clk_objective_c)\n+  if (!flag_objc)\n      mask |= D_OBJC;\n \n   /* It is not necessary to register ridpointers as a GC root, because"}, {"sha": "c92f1f13565df427ba7f22f03b87ad48473ee87a", "filename": "gcc/c-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "patch": "@@ -165,10 +165,10 @@ struct lang_type GTY(())\n /* in c-lang.c and objc-act.c */\n extern tree lookup_interface\t\t\tPARAMS ((tree));\n extern tree is_class_name\t\t\tPARAMS ((tree));\n-extern void maybe_objc_check_decl\t\tPARAMS ((tree));\n+extern void objc_check_decl\t\t\tPARAMS ((tree));\n extern void finish_file\t\t\t\tPARAMS ((void));\n-extern int maybe_objc_comptypes                 PARAMS ((tree, tree, int));\n-extern tree maybe_building_objc_message_expr    PARAMS ((void));\n+extern int objc_comptypes                 \tPARAMS ((tree, tree, int));\n+extern tree objc_message_selector\t\tPARAMS ((void));\n extern int recognize_objc_keyword\t\tPARAMS ((void));\n extern tree lookup_objc_ivar\t\t\tPARAMS ((tree));\n "}, {"sha": "dedb72f59ffdb14b5f7a390a0a3f7e564b1ae25b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "patch": "@@ -568,7 +568,7 @@ comptypes (type1, type2)\n       }\n \n     case RECORD_TYPE:\n-      if (maybe_objc_comptypes (t1, t2, 0) == 1)\n+      if (flag_objc && objc_comptypes (t1, t2, 0) == 1)\n \tval = 1;\n       break;\n \n@@ -588,7 +588,7 @@ comp_target_types (ttl, ttr)\n   int val;\n \n   /* Give maybe_objc_comptypes a crack at letting these types through.  */\n-  if ((val = maybe_objc_comptypes (ttl, ttr, 1)) >= 0)\n+  if ((val = objc_comptypes (ttl, ttr, 1)) >= 0)\n     return val;\n \n   val = comptypes (TYPE_MAIN_VARIANT (TREE_TYPE (ttl)),\n@@ -3985,7 +3985,8 @@ convert_for_assignment (type, rhs, errtype, fundecl, funname, parmnum)\n       overflow_warning (rhs);\n       /* Check for Objective-C protocols.  This will issue a warning if\n \t there are protocol violations.  No need to use the return value.  */\n-      maybe_objc_comptypes (type, rhstype, 0);\n+      if (flag_objc)\n+\tobjc_comptypes (type, rhstype, 0);\n       return rhs;\n     }\n \n@@ -4213,7 +4214,7 @@ convert_for_assignment (type, rhs, errtype, fundecl, funname, parmnum)\n     {\n       if (funname)\n  \t{\n- \t  tree selector = maybe_building_objc_message_expr ();\n+ \t  tree selector = objc_message_selector ();\n  \n  \t  if (selector && parmnum > 2)\n  \t    error (\"incompatible type for argument %d of `%s'\",\n@@ -4271,7 +4272,7 @@ warn_for_assignment (msgid, opname, function, argnum)\n {\n   if (opname == 0)\n     {\n-      tree selector = maybe_building_objc_message_expr ();\n+      tree selector = objc_message_selector ();\n       char * new_opname;\n       \n       if (selector && argnum > 2)"}, {"sha": "212da6b358af3783b23b227b60f3fe8bc6bc2326", "filename": "gcc/cppinit.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "patch": "@@ -694,16 +694,16 @@ init_builtins (pfile)\n \n   if (CPP_OPTION (pfile, cplusplus))\n     _cpp_define_builtin (pfile, \"__cplusplus 1\");\n-  else if (CPP_OPTION (pfile, objc))\n-    _cpp_define_builtin (pfile, \"__OBJC__ 1\");\n   else if (CPP_OPTION (pfile, lang) == CLK_ASM)\n     _cpp_define_builtin (pfile, \"__ASSEMBLER__ 1\");\n-\n-  if (CPP_OPTION (pfile, lang) == CLK_STDC94)\n+  else if (CPP_OPTION (pfile, lang) == CLK_STDC94)\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199409L\");\n   else if (CPP_OPTION (pfile, c99))\n     _cpp_define_builtin (pfile, \"__STDC_VERSION__ 199901L\");\n \n+  if (CPP_OPTION (pfile, objc))\n+    _cpp_define_builtin (pfile, \"__OBJC__ 1\");\n+\n   if (pfile->cb.register_builtins)\n     (*pfile->cb.register_builtins) (pfile);\n }"}, {"sha": "44edf72bec9745e1f7d65288a35d79e2b4fbcb13", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "patch": "@@ -518,14 +518,6 @@ define_decl (declarator, declspecs)\n    `a' and `b' are the same class type, or\n    `a' and `b' are of class types A and B such that B is a descendant of A.  */\n \n-int\n-maybe_objc_comptypes (lhs, rhs, reflexive)\n-     tree lhs, rhs;\n-     int reflexive;\n-{\n-  return objc_comptypes (lhs, rhs, reflexive);\n-}\n-\n static tree\n lookup_method_in_protocol_list (rproto_list, sel_name, class_meth)\n    tree rproto_list;\n@@ -764,13 +756,6 @@ objc_check_decl (decl)\n     error_with_decl (decl, \"`%s' cannot be statically allocated\");\n }\n \n-void\n-maybe_objc_check_decl (decl)\n-     tree decl;\n-{\n-  objc_check_decl (decl);\n-}\n-\n /* Implement static typing.  At this point, we know we have an interface.  */\n \n tree\n@@ -4690,7 +4675,7 @@ receiver_is_class_object (receiver)\n static tree building_objc_message_expr = 0;\n \n tree\n-maybe_building_objc_message_expr ()\n+objc_message_selector ()\n {\n   return building_objc_message_expr;\n }"}, {"sha": "73e6204c43b227f443a82fde9d0b023a9898bc1c", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f7866e7ba109bc68ae2c0d14ec0399765fc144b/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=0f7866e7ba109bc68ae2c0d14ec0399765fc144b", "patch": "@@ -162,5 +162,6 @@ const char * const tree_code_name[] = {\n static void \n objc_init_options ()\n {\n-  c_common_init_options (clk_objective_c);\n-} \n+  flag_objc = 1;\n+  c_common_init_options (clk_c);\n+}"}]}