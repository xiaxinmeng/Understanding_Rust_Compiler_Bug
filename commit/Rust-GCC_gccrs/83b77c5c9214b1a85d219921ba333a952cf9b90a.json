{"sha": "83b77c5c9214b1a85d219921ba333a952cf9b90a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNiNzdjNWM5MjE0YjFhODVkMjE5OTIxYmEzMzNhOTUyY2Y5YjkwYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-07T09:58:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-09-07T09:58:24Z"}, "message": "[multiple changes]\n\n2017-09-07  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_prag.adb (Collect_States_And_Objects): Detect also instances of\n\tsingle concurrent objects.\n\n2017-09-07  Javier Miranda  <miranda@adacore.com>\n\n\t* s-regexp.ads: Fix documentation of the globbing grammar.\n\n2017-09-07  Gary Dismukes  <dismukes@adacore.com>\n\n\t* a-tags.ads, einfo.ads, exp_disp.ads: Minor reformatting.\n\n2017-09-07  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat1drv.adb (Gnat1drv): Enable pragma Ignore_Pragma (Global)\n\tin CodePeer mode, to support more legacy code automatically.\n\n2017-09-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_disp.adb (Replace_Formals): If thr formal is classwide,\n\tand thus not a controlling argument, preserve its type after\n\trewriting because it may appear in an nested call with a classwide\n\tparameter.\n\n2017-09-07  Arnaud Charlet  <charlet@adacore.com>\n\n\t* comperr.adb (Delete_SCIL_Files): Handle case of\n\tN_Package_Instantiation.\n\n2017-09-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch10.adb (Remove_Private_With_Clause): If a private with\n\tclause for a unit U appears in a context that includes a regular\n\twith_clause on U, rewrite the redundant private clause into a null\n\tstatement, rather than removing it altogether from the context,\n\tso that ASIS tools can reconstruct the original source.\n\n2017-09-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Check_Aspect_At_Freeze_Point): The expression\n\tfor aspect Small can be of any real type (not only a universal\n\treal literal) as long as it is a static constant.\n\n2017-09-07  Thomas Quinot  <quinot@adacore.com>\n\n\t* par_sco.adb: Minor reformatting.\n\nFrom-SVN: r251840", "tree": {"sha": "1ab9b2444374f8865dbf407b8d497e740366022f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ab9b2444374f8865dbf407b8d497e740366022f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83b77c5c9214b1a85d219921ba333a952cf9b90a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b77c5c9214b1a85d219921ba333a952cf9b90a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83b77c5c9214b1a85d219921ba333a952cf9b90a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b77c5c9214b1a85d219921ba333a952cf9b90a/comments", "author": null, "committer": null, "parents": [{"sha": "e9cb22313e73de3931d581b0918e52bf0b581d76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9cb22313e73de3931d581b0918e52bf0b581d76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9cb22313e73de3931d581b0918e52bf0b581d76"}], "stats": {"total": 123, "additions": 100, "deletions": 23}, "files": [{"sha": "c8f6d7cea8987674a167e12fdfb92c923f5f0e81", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=83b77c5c9214b1a85d219921ba333a952cf9b90a", "patch": "@@ -1,3 +1,51 @@\n+2017-09-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_prag.adb (Collect_States_And_Objects): Detect also instances of\n+\tsingle concurrent objects.\n+\n+2017-09-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* s-regexp.ads: Fix documentation of the globbing grammar.\n+\n+2017-09-07  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* a-tags.ads, einfo.ads, exp_disp.ads: Minor reformatting.\n+\n+2017-09-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat1drv.adb (Gnat1drv): Enable pragma Ignore_Pragma (Global)\n+\tin CodePeer mode, to support more legacy code automatically.\n+\n+2017-09-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_disp.adb (Replace_Formals): If thr formal is classwide,\n+\tand thus not a controlling argument, preserve its type after\n+\trewriting because it may appear in an nested call with a classwide\n+\tparameter.\n+\n+2017-09-07  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* comperr.adb (Delete_SCIL_Files): Handle case of\n+\tN_Package_Instantiation.\n+\n+2017-09-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb (Remove_Private_With_Clause): If a private with\n+\tclause for a unit U appears in a context that includes a regular\n+\twith_clause on U, rewrite the redundant private clause into a null\n+\tstatement, rather than removing it altogether from the context,\n+\tso that ASIS tools can reconstruct the original source.\n+\n+2017-09-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Aspect_At_Freeze_Point): The expression\n+\tfor aspect Small can be of any real type (not only a universal\n+\treal literal) as long as it is a static constant.\n+\n+2017-09-07  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* par_sco.adb: Minor reformatting.\n+\n 2017-09-07  Arnaud Charlet  <charlet@adacore.com>\n \n \t* s-parame-ae653.ads: Removed."}, {"sha": "564ce205f49384b33e7cf00c67c7a9bd12796b8f", "filename": "gcc/ada/a-tags.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fa-tags.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fa-tags.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.ads?ref=83b77c5c9214b1a85d219921ba333a952cf9b90a", "patch": "@@ -557,13 +557,13 @@ private\n    --\n    --  \"This\" is the object whose dispatch table is being initialized. Prim_T\n    --  is the primary tag of such object. Interface_T is the interface tag for\n-   --  which the secondary dispatch table is being initialized, Offset_Value\n+   --  which the secondary dispatch table is being initialized. Offset_Value\n    --  is the distance from \"This\" to the object component containing the tag\n    --  of the secondary dispatch table (a zero value means that this interface\n    --  shares the primary dispatch table). Offset_Func references a function\n-   --  that must be called to evaluate the offset at runtime. This routine also\n-   --  takes care of registering these values in the table of interfaces of the\n-   --  type.\n+   --  that must be called to evaluate the offset at run time. This routine\n+   --  also takes care of registering these values in the table of interfaces\n+   --  of the type.\n \n    procedure Set_Entry_Index (T : Tag; Position : Positive; Value : Positive);\n    --  Ada 2005 (AI-345): Set the entry index of a primitive operation in T's"}, {"sha": "67df3431ed1c03b2428bb7fe1cbcefdbb87cc205", "filename": "gcc/ada/comperr.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fcomperr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fcomperr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcomperr.adb?ref=83b77c5c9214b1a85d219921ba333a952cf9b90a", "patch": "@@ -476,7 +476,9 @@ package body Comperr is\n          when N_Package_Body =>\n             Unit_Name := Corresponding_Spec (Main);\n \n-         when N_Package_Renaming_Declaration =>\n+         when N_Package_Renaming_Declaration\n+            | N_Package_Instantiation\n+         =>\n             Unit_Name := Defining_Unit_Name (Main);\n \n          --  No SCIL file generated for generic package declarations"}, {"sha": "e83c1c430d4031baf89e471151bcc66bb3c1db67", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=83b77c5c9214b1a85d219921ba333a952cf9b90a", "patch": "@@ -357,10 +357,10 @@ package Einfo is\n \n --    Access_Disp_Table_Elab_Flag (Node30) [implementation base type only]\n --       Defined in E_Record_Type and E_Record_Subtype entities. Set in tagged\n---       types whose dispatch table elaboration must be completed at runtime by\n---       the IP routine to point to its pending elaboration flag entity. This\n---       flag is needed when the elaboration of the dispatch table relies on\n---       attribute 'Position applied to an object of the type; it is used by\n+--       types whose dispatch table elaboration must be completed at run time\n+--       by the IP routine to point to its pending elaboration flag entity.\n+--       This flag is needed when the elaboration of the dispatch table relies\n+--       on attribute 'Position applied to an object of the type; it is used by\n --       the IP routine to avoid performing this elaboration twice.\n \n --    Activation_Record_Component (Node31)"}, {"sha": "dd0266fdcc669d620a8e4bff48f2397aaaadbfd5", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=83b77c5c9214b1a85d219921ba333a952cf9b90a", "patch": "@@ -701,6 +701,16 @@ package body Exp_Disp is\n                   while Present (F) loop\n                      if F = Entity (N) then\n                         Rewrite (N, New_Copy_Tree (A));\n+\n+                        --  If the formal is class-wide, and thus not a\n+                        --  controlling argument, preserve its type because\n+                        --  it may appear in a nested call with a class-wide\n+                        --  parameter.\n+\n+                        if Is_Class_Wide_Type (Etype (F)) then\n+                           Set_Etype (N, Etype (F));\n+                        end if;\n+\n                         exit;\n                      end if;\n "}, {"sha": "cfd4b7821c9ce5dcf281d8a592de2d8325bf7441", "filename": "gcc/ada/exp_disp.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fexp_disp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fexp_disp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.ads?ref=83b77c5c9214b1a85d219921ba333a952cf9b90a", "patch": "@@ -216,7 +216,7 @@ package Exp_Disp is\n \n    function Elab_Flag_Needed (Typ : Entity_Id) return Boolean;\n    --  Return True if the elaboration of the tagged type Typ is completed at\n-   --  runtime by the execution of code located in the IP routine and the\n+   --  run time by the execution of code located in the IP routine and the\n    --  expander must generate an extra elaboration flag to avoid performing\n    --  such elaboration twice.\n "}, {"sha": "6264c0b38e0838c722babc04fcc76def1c9d6628", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=83b77c5c9214b1a85d219921ba333a952cf9b90a", "patch": "@@ -264,7 +264,11 @@ procedure Gnat1drv is\n          Restrict.Restrictions.Set   (Max_Asynchronous_Select_Nesting) := True;\n          Restrict.Restrictions.Value (Max_Asynchronous_Select_Nesting) := 0;\n \n-         --  Suppress division by zero and access checks since they are handled\n+         --  Enable pragma Ignore_Pragma (Global) to support legacy code\n+\n+         Set_Name_Table_Boolean3 (Name_Id'(Name_Find (\"global\")), True);\n+\n+         --  Suppress division by zero checks since they are handled\n          --  implicitly by CodePeer.\n \n          --  Turn off dynamic elaboration checks: generates inconsistencies in"}, {"sha": "1a93f4d7eb496f1dcce1b6166b7b34dfb35a4d4c", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=83b77c5c9214b1a85d219921ba333a952cf9b90a", "patch": "@@ -214,8 +214,8 @@ package body Par_SCO is\n    --  Parameter D, when present, indicates the dominant of the first\n    --  declaration or statement within N.\n \n-   --  Why is Traverse_Sync_Definition commented specificaly and\n-   --   the others are not???\n+   --  Why is Traverse_Sync_Definition commented specifically, whereas\n+   --  the others are not???\n \n    procedure Traverse_Generic_Package_Declaration (N : Node_Id);\n "}, {"sha": "0155b43be4ddac3875111d83755e2fa8fd6acc2d", "filename": "gcc/ada/s-regexp.ads", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fs-regexp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fs-regexp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-regexp.ads?ref=83b77c5c9214b1a85d219921ba333a952cf9b90a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2010, AdaCore                     --\n+--                     Copyright (C) 1998-2017, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -83,14 +83,18 @@ package System.Regexp is\n    --     regexp ::= term\n \n    --     term   ::= elmt\n-\n    --     term   ::= elmt elmt ...     -- concatenation (elmt then elmt)\n-   --     term   ::= *                 -- any string of 0 or more characters\n-   --     term   ::= ?                 -- matches any character\n-   --     term   ::= [char char ...]   -- matches any character listed\n-   --     term   ::= [char - char]     -- matches any character in given range\n    --     term   ::= {elmt, elmt, ...} -- alternation (matches any of elmt)\n \n+   --     elmt   ::= *                 -- any string of 0 or more characters\n+   --     elmt   ::= ?                 -- matches any character\n+   --     elmt   ::= char\n+   --     elmt   ::= [^ char char ...] -- matches any character not listed\n+   --     elmt   ::= [char char ...]   -- matches any character listed\n+   --     elmt   ::= [char - char]     -- matches any character in given range\n+\n+   --     \\char is also supported by this grammar.\n+\n    --  Important note : This package was mainly intended to match regular\n    --  expressions against file names. The whole string has to match the\n    --  regular expression. If only a substring matches, then the function"}, {"sha": "6da229cfc590c56064b7df5100380ef7688e6130", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=83b77c5c9214b1a85d219921ba333a952cf9b90a", "patch": "@@ -6638,13 +6638,16 @@ package body Sem_Ch10 is\n \n             --  If private_with_clause is redundant, remove it from context,\n             --  as a small optimization to subsequent handling of private_with\n-            --  clauses in other nested packages.\n+            --  clauses in other nested packages. We replace the clause with\n+            --  a null statement, which is otherwise ignored by the rest of\n+            --  the compiler, so that ASIS tools can reconstruct the source.\n \n             if In_Regular_With_Clause (Entity (Name (Item))) then\n                declare\n                   Nxt : constant Node_Id := Next (Item);\n                begin\n-                  Remove (Item);\n+                  Rewrite (Item, Make_Null_Statement (Sloc (Item)));\n+                  Analyze (Item);\n                   Item := Nxt;\n                end;\n "}, {"sha": "1bd332daee1232de24225a6b47e97e8b3b0f4b8f", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=83b77c5c9214b1a85d219921ba333a952cf9b90a", "patch": "@@ -9280,7 +9280,10 @@ package body Sem_Ch13 is\n             T := Standard_Integer;\n \n          when Aspect_Small =>\n-            T := Universal_Real;\n+            --  Note that the expression can be of any real type (not just\n+            --  a real universal literal) as long as it is a static constant.\n+\n+            T := Any_Real;\n \n          --  For a simple storage pool, we have to retrieve the type of the\n          --  pool object associated with the aspect's corresponding attribute"}, {"sha": "4104e756e315e462bb1d784869cec7eee12f8b9d", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83b77c5c9214b1a85d219921ba333a952cf9b90a/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=83b77c5c9214b1a85d219921ba333a952cf9b90a", "patch": "@@ -3066,7 +3066,7 @@ package body Sem_Prag is\n             States_And_Objs := New_Copy_Elist (Abstract_States (Pack_Id));\n          end if;\n \n-         --  Collect all objects the appear in the visible declarations of the\n+         --  Collect all objects that appear in the visible declarations of the\n          --  related package.\n \n          if Present (Visible_Declarations (Pack_Spec)) then\n@@ -3076,6 +3076,9 @@ package body Sem_Prag is\n                  and then Nkind (Decl) = N_Object_Declaration\n                then\n                   Append_New_Elmt (Defining_Entity (Decl), States_And_Objs);\n+               elsif Is_Single_Concurrent_Type_Declaration (Decl) then\n+                  Append_New_Elmt (Anonymous_Object (Defining_Entity (Decl)),\n+                                   States_And_Objs);\n                end if;\n \n                Next (Decl);"}]}