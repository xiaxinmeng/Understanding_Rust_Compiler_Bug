{"sha": "fb638355db9972c6cf5b9a8cfa49b0e9238083cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI2MzgzNTVkYjk5NzJjNmNmNWI5YThjZmE0OWIwZTkyMzgwODNjYg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2006-03-08T00:03:32Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2006-03-08T00:03:32Z"}, "message": "dwarf2out.c (DWARF2_FRAME_REG_OUT): Move up in file.\n\n\t* dwarf2out.c (DWARF2_FRAME_REG_OUT): Move up in file.\n\t(expand_builtin_dwarf_sp_column): Call DWARF2_FRAME_REG_OUT.\n\t(expand_builtin_init_dwarf_reg_sizes): Likewise.\n\nFrom-SVN: r111825", "tree": {"sha": "0142d297e0d48d04fcd64b2623f774beb0a43b39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0142d297e0d48d04fcd64b2623f774beb0a43b39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb638355db9972c6cf5b9a8cfa49b0e9238083cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb638355db9972c6cf5b9a8cfa49b0e9238083cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb638355db9972c6cf5b9a8cfa49b0e9238083cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb638355db9972c6cf5b9a8cfa49b0e9238083cb/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f04768574a28d1021663bdf2e4b49ffc543ffd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f04768574a28d1021663bdf2e4b49ffc543ffd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f04768574a28d1021663bdf2e4b49ffc543ffd5"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "5f0ca64e3c7bf5bc1879ab8538eb20d31f1e3093", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb638355db9972c6cf5b9a8cfa49b0e9238083cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb638355db9972c6cf5b9a8cfa49b0e9238083cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb638355db9972c6cf5b9a8cfa49b0e9238083cb", "patch": "@@ -1,3 +1,9 @@\n+2006-03-07  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* dwarf2out.c (DWARF2_FRAME_REG_OUT): Move up in file.\n+\t(expand_builtin_dwarf_sp_column): Call DWARF2_FRAME_REG_OUT.\n+\t(expand_builtin_init_dwarf_reg_sizes): Likewise.\n+\n 2006-03-08  David Billinghurst <David.Billinghurst@riotinto.com>\n \n \tPR target/26588"}, {"sha": "8ee34b34e933fcbf2f3f918519bda6a610a7ddf3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb638355db9972c6cf5b9a8cfa49b0e9238083cb/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb638355db9972c6cf5b9a8cfa49b0e9238083cb/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=fb638355db9972c6cf5b9a8cfa49b0e9238083cb", "patch": "@@ -99,6 +99,13 @@ static void dwarf2out_source_line (unsigned int, const char *);\n # endif\n #endif\n \n+/* Map register numbers held in the call frame info that gcc has\n+   collected using DWARF_FRAME_REGNUM to those that should be output in\n+   .debug_frame and .eh_frame.  */\n+#ifndef DWARF2_FRAME_REG_OUT\n+#define DWARF2_FRAME_REG_OUT(REGNO, FOR_EH) (REGNO)\n+#endif\n+\n /* Decide whether we want to emit frame unwind information for the current\n    translation unit.  */\n \n@@ -404,7 +411,8 @@ static void def_cfa_1 (const char *, dw_cfa_location *);\n rtx\n expand_builtin_dwarf_sp_column (void)\n {\n-  return GEN_INT (DWARF_FRAME_REGNUM (STACK_POINTER_REGNUM));\n+  int dwarf_regnum = DWARF_FRAME_REGNUM (STACK_POINTER_REGNUM);\n+  return GEN_INT (DWARF2_FRAME_REG_OUT (dwarf_regnum, 1));\n }\n \n /* Return a pointer to a copy of the section string name S with all\n@@ -437,27 +445,31 @@ expand_builtin_init_dwarf_reg_sizes (tree address)\n   bool wrote_return_column = false;\n \n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-    if (DWARF_FRAME_REGNUM (i) < DWARF_FRAME_REGISTERS)\n-      {\n-\tHOST_WIDE_INT offset = DWARF_FRAME_REGNUM (i) * GET_MODE_SIZE (mode);\n-\tenum machine_mode save_mode = reg_raw_mode[i];\n-\tHOST_WIDE_INT size;\n-\n-\tif (HARD_REGNO_CALL_PART_CLOBBERED (i, save_mode))\n-\t  save_mode = choose_hard_reg_mode (i, 1, true);\n-\tif (DWARF_FRAME_REGNUM (i) == DWARF_FRAME_RETURN_COLUMN)\n-\t  {\n-\t    if (save_mode == VOIDmode)\n-\t      continue;\n-\t    wrote_return_column = true;\n-\t  }\n-\tsize = GET_MODE_SIZE (save_mode);\n-\tif (offset < 0)\n-\t  continue;\n-\n-\temit_move_insn (adjust_address (mem, mode, offset),\n-\t\t\tgen_int_mode (size, mode));\n-      }\n+    {\n+      int rnum = DWARF2_FRAME_REG_OUT (DWARF_FRAME_REGNUM (i), 1);\n+      \n+      if (rnum < DWARF_FRAME_REGISTERS)\n+\t{\n+\t  HOST_WIDE_INT offset = rnum * GET_MODE_SIZE (mode);\n+\t  enum machine_mode save_mode = reg_raw_mode[i];\n+\t  HOST_WIDE_INT size;\n+\t  \n+\t  if (HARD_REGNO_CALL_PART_CLOBBERED (i, save_mode))\n+\t    save_mode = choose_hard_reg_mode (i, 1, true);\n+\t  if (DWARF_FRAME_REGNUM (i) == DWARF_FRAME_RETURN_COLUMN)\n+\t    {\n+\t      if (save_mode == VOIDmode)\n+\t\tcontinue;\n+\t      wrote_return_column = true;\n+\t    }\n+\t  size = GET_MODE_SIZE (save_mode);\n+\t  if (offset < 0)\n+\t    continue;\n+\t  \n+\t  emit_move_insn (adjust_address (mem, mode, offset),\n+\t\t\t  gen_int_mode (size, mode));\n+\t}\n+    }\n \n #ifdef DWARF_ALT_FRAME_RETURN_COLUMN\n   gcc_assert (wrote_return_column);\n@@ -2011,13 +2023,6 @@ switch_to_eh_frame_section (void)\n     }\n }\n \n-/* Map register numbers held in the call frame info that gcc has\n-   collected using DWARF_FRAME_REGNUM to those that should be output in\n-   .debug_frame and .eh_frame.  */\n-#ifndef DWARF2_FRAME_REG_OUT\n-#define DWARF2_FRAME_REG_OUT(REGNO, FOR_EH) (REGNO)\n-#endif\n-\n /* Output a Call Frame Information opcode and its operand(s).  */\n \n static void"}]}