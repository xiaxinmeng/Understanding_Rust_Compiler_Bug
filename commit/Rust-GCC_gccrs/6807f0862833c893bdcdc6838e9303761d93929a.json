{"sha": "6807f0862833c893bdcdc6838e9303761d93929a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgwN2YwODYyODMzYzg5M2JkY2RjNjgzOGU5MzAzNzYxZDkzOTI5YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-01-06T12:33:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-01-06T12:33:58Z"}, "message": "PR78991 make __gnu_cxx::__ops constructors explicit\n\n\tPR libstdc++/78991\n\t* include/bits/predefined_ops.h (_Iter_comp_iter, _Iter_comp_val)\n\t(_Val_comp_iter, _Iter_equals_val, _Iter_pred, _Iter_comp_to_val)\n\t(_Iter_comp_to_iter, _Iter_negate): Make constructors explicit and\n\tmove function objects.\n\t(__iter_comp_iter, __iter_comp_val, __val_comp_iter, __pred_iter)\n\t(__iter_comp_val, __iter_comp_iter, __negate): Move function objects.\n\t* testsuite/25_algorithms/sort/78991.cc: New test.\n\nFrom-SVN: r244150", "tree": {"sha": "4899a4955e6f61ccc394d28a15aeb1e9f5b82533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4899a4955e6f61ccc394d28a15aeb1e9f5b82533"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6807f0862833c893bdcdc6838e9303761d93929a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6807f0862833c893bdcdc6838e9303761d93929a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6807f0862833c893bdcdc6838e9303761d93929a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6807f0862833c893bdcdc6838e9303761d93929a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88456bc19d4362b60fbe8e37f59d70a09675098f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88456bc19d4362b60fbe8e37f59d70a09675098f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88456bc19d4362b60fbe8e37f59d70a09675098f"}], "stats": {"total": 106, "additions": 85, "deletions": 21}, "files": [{"sha": "bf4f415c15db8194a3d1e0c813cb0b60c926342d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6807f0862833c893bdcdc6838e9303761d93929a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6807f0862833c893bdcdc6838e9303761d93929a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6807f0862833c893bdcdc6838e9303761d93929a", "patch": "@@ -1,3 +1,14 @@\n+2017-01-06  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/78991\n+\t* include/bits/predefined_ops.h (_Iter_comp_iter, _Iter_comp_val)\n+\t(_Val_comp_iter, _Iter_equals_val, _Iter_pred, _Iter_comp_to_val)\n+\t(_Iter_comp_to_iter, _Iter_negate): Make constructors explicit and\n+\tmove function objects.\n+\t(__iter_comp_iter, __iter_comp_val, __val_comp_iter, __pred_iter)\n+\t(__iter_comp_val, __iter_comp_iter, __negate): Move function objects.\n+\t* testsuite/25_algorithms/sort/78991.cc: New test.\n+\n 2017-01-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/std_function.h (function::_Signature_type): Remove."}, {"sha": "2742984b6470946755e080cc8b7ac5f2e02af9f4", "filename": "libstdc++-v3/include/bits/predefined_ops.h", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6807f0862833c893bdcdc6838e9303761d93929a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpredefined_ops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6807f0862833c893bdcdc6838e9303761d93929a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpredefined_ops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpredefined_ops.h?ref=6807f0862833c893bdcdc6838e9303761d93929a", "patch": "@@ -42,6 +42,7 @@ namespace __ops\n       operator()(_Iterator1 __it1, _Iterator2 __it2) const\n       { return *__it1 < *__it2; }\n   };\n+\n   _GLIBCXX14_CONSTEXPR\n   inline _Iter_less_iter\n   __iter_less_iter()\n@@ -53,7 +54,7 @@ namespace __ops\n       bool\n       operator()(_Iterator __it, _Value& __val) const\n       { return *__it < __val; }\n-    };\n+  };\n \n   inline _Iter_less_val\n   __iter_less_val()\n@@ -69,7 +70,7 @@ namespace __ops\n       bool\n       operator()(_Value& __val, _Iterator __it) const\n       { return __val < *__it; }\n-    };\n+  };\n \n   inline _Val_less_iter\n   __val_less_iter()\n@@ -85,7 +86,7 @@ namespace __ops\n       bool\n       operator()(_Iterator1 __it1, _Iterator2 __it2) const\n       { return *__it1 == *__it2; }\n-    };\n+  };\n \n   inline _Iter_equal_to_iter\n   __iter_equal_to_iter()\n@@ -97,7 +98,7 @@ namespace __ops\n       bool\n       operator()(_Iterator __it, _Value& __val) const\n       { return *__it == __val; }\n-    };\n+  };\n \n   inline _Iter_equal_to_val\n   __iter_equal_to_val()\n@@ -111,9 +112,10 @@ namespace __ops\n     struct _Iter_comp_iter\n     {\n       _Compare _M_comp;\n-      _GLIBCXX14_CONSTEXPR\n+\n+      explicit _GLIBCXX14_CONSTEXPR\n       _Iter_comp_iter(_Compare __comp)\n-\t: _M_comp(__comp)\n+\t: _M_comp(_GLIBCXX_MOVE(__comp))\n       { }\n \n       template<typename _Iterator1, typename _Iterator2>\n@@ -127,15 +129,16 @@ namespace __ops\n     _GLIBCXX14_CONSTEXPR\n     inline _Iter_comp_iter<_Compare>\n     __iter_comp_iter(_Compare __comp)\n-    { return _Iter_comp_iter<_Compare>(__comp); }\n+    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }\n \n   template<typename _Compare>\n     struct _Iter_comp_val\n     {\n       _Compare _M_comp;\n \n+      explicit\n       _Iter_comp_val(_Compare __comp)\n-\t: _M_comp(__comp)\n+\t: _M_comp(_GLIBCXX_MOVE(__comp))\n       { }\n \n       template<typename _Iterator, typename _Value>\n@@ -147,20 +150,21 @@ namespace __ops\n   template<typename _Compare>\n    inline _Iter_comp_val<_Compare>\n     __iter_comp_val(_Compare __comp)\n-    { return _Iter_comp_val<_Compare>(__comp); }\n+    { return _Iter_comp_val<_Compare>(_GLIBCXX_MOVE(__comp)); }\n \n   template<typename _Compare>\n     inline _Iter_comp_val<_Compare>\n     __iter_comp_val(_Iter_comp_iter<_Compare> __comp)\n-    { return _Iter_comp_val<_Compare>(__comp._M_comp); }\n+    { return _Iter_comp_val<_Compare>(_GLIBCXX_MOVE(__comp._M_comp)); }\n \n   template<typename _Compare>\n     struct _Val_comp_iter\n     {\n       _Compare _M_comp;\n \n+      explicit\n       _Val_comp_iter(_Compare __comp)\n-\t: _M_comp(__comp)\n+\t: _M_comp(_GLIBCXX_MOVE(__comp))\n       { }\n \n       template<typename _Value, typename _Iterator>\n@@ -172,18 +176,19 @@ namespace __ops\n   template<typename _Compare>\n     inline _Val_comp_iter<_Compare>\n     __val_comp_iter(_Compare __comp)\n-    { return _Val_comp_iter<_Compare>(__comp); }\n+    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }\n \n   template<typename _Compare>\n     inline _Val_comp_iter<_Compare>\n     __val_comp_iter(_Iter_comp_iter<_Compare> __comp)\n-    { return _Val_comp_iter<_Compare>(__comp._M_comp); }\n+    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp._M_comp)); }\n \n   template<typename _Value>\n     struct _Iter_equals_val\n     {\n       _Value& _M_value;\n \n+      explicit\n       _Iter_equals_val(_Value& __value)\n \t: _M_value(__value)\n       { }\n@@ -204,6 +209,7 @@ namespace __ops\n     {\n       typename std::iterator_traits<_Iterator1>::reference _M_ref;\n \n+      explicit\n       _Iter_equals_iter(_Iterator1 __it1)\n \t: _M_ref(*__it1)\n       { }\n@@ -224,8 +230,9 @@ namespace __ops\n     {\n       _Predicate _M_pred;\n \n+      explicit\n       _Iter_pred(_Predicate __pred)\n-\t: _M_pred(__pred)\n+\t: _M_pred(_GLIBCXX_MOVE(__pred))\n       { }\n \n       template<typename _Iterator>\n@@ -237,7 +244,7 @@ namespace __ops\n   template<typename _Predicate>\n     inline _Iter_pred<_Predicate>\n     __pred_iter(_Predicate __pred)\n-    { return _Iter_pred<_Predicate>(__pred); }\n+    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }\n \n   template<typename _Compare, typename _Value>\n     struct _Iter_comp_to_val\n@@ -246,7 +253,7 @@ namespace __ops\n       _Value& _M_value;\n \n       _Iter_comp_to_val(_Compare __comp, _Value& __value)\n-\t: _M_comp(__comp), _M_value(__value)\n+\t: _M_comp(_GLIBCXX_MOVE(__comp)), _M_value(__value)\n       { }\n \n       template<typename _Iterator>\n@@ -258,7 +265,9 @@ namespace __ops\n   template<typename _Compare, typename _Value>\n     _Iter_comp_to_val<_Compare, _Value>\n     __iter_comp_val(_Compare __comp, _Value &__val)\n-    { return _Iter_comp_to_val<_Compare, _Value>(__comp, __val); }\n+    {\n+      return _Iter_comp_to_val<_Compare, _Value>(_GLIBCXX_MOVE(__comp), __val);\n+    }\n \n   template<typename _Compare, typename _Iterator1>\n     struct _Iter_comp_to_iter\n@@ -267,7 +276,7 @@ namespace __ops\n       typename std::iterator_traits<_Iterator1>::reference _M_ref;\n \n       _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)\n-\t: _M_comp(__comp), _M_ref(*__it1)\n+\t: _M_comp(_GLIBCXX_MOVE(__comp)), _M_ref(*__it1)\n       { }\n \n       template<typename _Iterator2>\n@@ -279,15 +288,19 @@ namespace __ops\n   template<typename _Compare, typename _Iterator>\n     inline _Iter_comp_to_iter<_Compare, _Iterator>\n     __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)\n-    { return _Iter_comp_to_iter<_Compare, _Iterator>(__comp._M_comp, __it); }\n+    {\n+      return _Iter_comp_to_iter<_Compare, _Iterator>(\n+\t  _GLIBCXX_MOVE(__comp._M_comp), __it);\n+    }\n \n   template<typename _Predicate>\n     struct _Iter_negate\n     {\n       _Predicate _M_pred;\n \n+      explicit\n       _Iter_negate(_Predicate __pred)\n-\t: _M_pred(__pred)\n+\t: _M_pred(_GLIBCXX_MOVE(__pred))\n       { }\n \n       template<typename _Iterator>\n@@ -299,7 +312,7 @@ namespace __ops\n   template<typename _Predicate>\n     inline _Iter_negate<_Predicate>\n     __negate(_Iter_pred<_Predicate> __pred)\n-    { return _Iter_negate<_Predicate>(__pred._M_pred); }\n+    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }\n \n } // namespace __ops\n } // namespace __gnu_cxx"}, {"sha": "472763deb5416990d3d3ab805d6f02ae0b3949c3", "filename": "libstdc++-v3/testsuite/25_algorithms/sort/78991.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6807f0862833c893bdcdc6838e9303761d93929a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2F78991.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6807f0862833c893bdcdc6838e9303761d93929a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2F78991.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsort%2F78991.cc?ref=6807f0862833c893bdcdc6838e9303761d93929a", "patch": "@@ -0,0 +1,40 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++14 } }\n+\n+// PR 78991\n+// This failed to compile with Clang because the result_of expression causes\n+// instantiation of _Iter_comp_iter::operator() outside the immediate context.\n+\n+#include <algorithm>\n+\n+struct function\n+{\n+  function() = default;\n+\n+  template<typename F, typename = std::result_of_t<F&(int, int)>>\n+    function(F) { }\n+\n+  bool operator()(int x, int y) const { return x < y; }\n+};\n+\n+int main()\n+{\n+  int a[2]{ 2, 1 };\n+  std::sort(a, a+2, function{});\n+}"}]}