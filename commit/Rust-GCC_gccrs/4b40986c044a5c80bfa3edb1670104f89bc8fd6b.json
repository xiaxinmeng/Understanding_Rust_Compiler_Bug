{"sha": "4b40986c044a5c80bfa3edb1670104f89bc8fd6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI0MDk4NmMwNDRhNWM4MGJmYTNlZGIxNjcwMTA0Zjg5YmM4ZmQ2Yg==", "commit": {"author": {"name": "Jackson Woodruff", "email": "jackson.woodruff@arm.com", "date": "2017-07-24T11:37:09Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2017-07-24T11:37:09Z"}, "message": "[AArch64, Patch] Generate MLA when multiply + add vector by scalar\n\n(On behalf of jackson.woodruff@arm.com)\n\nThis merges vector multiplies and adds into a single mla instruction\nwhen the multiplication is done by a scalar.\n\n    typedef int __attribute__((vector_size(16))) vec;\n\n    vec\n    mla1(vec v0, vec v1, int v2)\n    {\n      return v0 + v1 * c;\n    }\n\nNow generates:\n\n    mla1:\n        fmov   s2, w0\n        mla    v0.4s, v1.4s, v2.s[0]\n\nThis is also done for the identical case for a multiply followed by a\nsubtract of vectors with an integer operand on the multiply.\n\ngcc/\n\n2017-07-24  Jackson Woodruff  <jackson.woodruff@arm.com>\n\n        * config/aarch64/aarch64-simd.md (aarch64_mla_elt_merge<mode>): New.\n        (aarch64_mls_elt_merge<mode>): Likewise.\n\ngcc/testsuite/\n\n2017-07-24  Jackson Woodruff  <jackson.woodruff@arm.com>\n\n\t* gcc.target/aarch64/simd/vmla_elem_1.c: New.\n\nFrom-SVN: r250475", "tree": {"sha": "6370c05986447ec193aed0d71fc6bbae1b124ea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6370c05986447ec193aed0d71fc6bbae1b124ea0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b40986c044a5c80bfa3edb1670104f89bc8fd6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b40986c044a5c80bfa3edb1670104f89bc8fd6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b40986c044a5c80bfa3edb1670104f89bc8fd6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b40986c044a5c80bfa3edb1670104f89bc8fd6b/comments", "author": null, "committer": null, "parents": [{"sha": "e678ce869e96e110de95db1038388127767390cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e678ce869e96e110de95db1038388127767390cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e678ce869e96e110de95db1038388127767390cc"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "4809a2180f2d0a9f5c195a7a6b05df2b0f075265", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b40986c044a5c80bfa3edb1670104f89bc8fd6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b40986c044a5c80bfa3edb1670104f89bc8fd6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b40986c044a5c80bfa3edb1670104f89bc8fd6b", "patch": "@@ -1,3 +1,8 @@\n+2017-07-24  Jackson Woodruff  <jackson.woodruff@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_mla_elt_merge<mode>): New.\n+\t(aarch64_mls_elt_merge<mode>): Likewise.\n+\n 2017-07-23  Krister Walfridsson  <krister.walfridsson@gmail.com>\n \n \t* config.gcc (*-*-netbsd*): Remove check for NetBSD versions not"}, {"sha": "011fcec07958f5923f5d06119705cef9891d5799", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b40986c044a5c80bfa3edb1670104f89bc8fd6b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b40986c044a5c80bfa3edb1670104f89bc8fd6b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=4b40986c044a5c80bfa3edb1670104f89bc8fd6b", "patch": "@@ -1033,6 +1033,18 @@\n   [(set_attr \"type\" \"neon_mla_<Vetype>_scalar<q>\")]\n )\n \n+(define_insn \"*aarch64_mla_elt_merge<mode>\"\n+  [(set (match_operand:VDQHS 0 \"register_operand\" \"=w\")\n+\t(plus:VDQHS\n+\t  (mult:VDQHS (vec_duplicate:VDQHS\n+\t\t  (match_operand:<VEL> 1 \"register_operand\" \"w\"))\n+\t\t(match_operand:VDQHS 2 \"register_operand\" \"w\"))\n+\t  (match_operand:VDQHS 3 \"register_operand\" \"0\")))]\n+ \"TARGET_SIMD\"\n+ \"mla\\t%0.<Vtype>, %2.<Vtype>, %1.<Vetype>[0]\"\n+  [(set_attr \"type\" \"neon_mla_<Vetype>_scalar<q>\")]\n+)\n+\n (define_insn \"aarch64_mls<mode>\"\n  [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n        (minus:VDQ_BHSI (match_operand:VDQ_BHSI 1 \"register_operand\" \"0\")\n@@ -1080,6 +1092,18 @@\n   [(set_attr \"type\" \"neon_mla_<Vetype>_scalar<q>\")]\n )\n \n+(define_insn \"*aarch64_mls_elt_merge<mode>\"\n+  [(set (match_operand:VDQHS 0 \"register_operand\" \"=w\")\n+\t(minus:VDQHS\n+\t  (match_operand:VDQHS 1 \"register_operand\" \"0\")\n+\t  (mult:VDQHS (vec_duplicate:VDQHS\n+\t\t  (match_operand:<VEL> 2 \"register_operand\" \"w\"))\n+\t\t(match_operand:VDQHS 3 \"register_operand\" \"w\"))))]\n+  \"TARGET_SIMD\"\n+  \"mls\\t%0.<Vtype>, %3.<Vtype>, %2.<Vetype>[0]\"\n+  [(set_attr \"type\" \"neon_mla_<Vetype>_scalar<q>\")]\n+)\n+\n ;; Max/Min operations.\n (define_insn \"<su><maxmin><mode>3\"\n  [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")"}, {"sha": "951cabb0aa5754c0cf1d401855de179c965bb316", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b40986c044a5c80bfa3edb1670104f89bc8fd6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b40986c044a5c80bfa3edb1670104f89bc8fd6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b40986c044a5c80bfa3edb1670104f89bc8fd6b", "patch": "@@ -1,3 +1,7 @@\n+2017-07-24  Jackson Woodruff  <jackson.woodruff@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vmla_elem_1.c: New.\n+\n 2017-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \t    Mikael Morin <mikael@gcc.gnu.org>\n "}, {"sha": "df777581ab43b9b9e20b61f3f8d46193bdfda5fb", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vmla_elem_1.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b40986c044a5c80bfa3edb1670104f89bc8fd6b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmla_elem_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b40986c044a5c80bfa3edb1670104f89bc8fd6b/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmla_elem_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvmla_elem_1.c?ref=4b40986c044a5c80bfa3edb1670104f89bc8fd6b", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+typedef short int __attribute__ ((vector_size (16))) v8hi;\n+\n+v8hi\n+mla8hi (v8hi v0, v8hi v1, short int v2)\n+{\n+  /* { dg-final { scan-assembler \"mla\\\\tv\\[0-9\\]\\+\\\\.8h, v\\[0-9\\]\\+\\\\.8h, v\\[0-9\\]\\+\\\\.h\\\\\\[0\\\\\\]\" } } */\n+  return v0 + v1 * v2;\n+}\n+\n+\n+v8hi\n+mls8hi (v8hi v0, v8hi v1, short int v2)\n+{\n+  /* { dg-final { scan-assembler \"mls\\\\tv\\[0-9\\]\\+\\\\.8h, v\\[0-9\\]\\+\\\\.8h, v\\[0-9\\]\\+\\\\.h\\\\\\[0\\\\\\]\" } } */\n+  return v0 - v1 * v2;\n+}\n+\n+typedef short int __attribute__ ((vector_size (8))) v4hi;\n+\n+v4hi\n+mla4hi (v4hi v0, v4hi v1, short int v2)\n+{\n+  /* { dg-final { scan-assembler \"mla\\\\tv\\[0-9\\]\\+\\\\.4h, v\\[0-9\\]\\+\\\\.4h, v\\[0-9\\]\\+\\\\.h\\\\\\[0\\\\\\]\" } } */\n+  return v0 + v1 * v2;\n+}\n+\n+v4hi\n+mls4hi (v4hi v0, v4hi v1, short int v2)\n+{\n+  /* { dg-final { scan-assembler \"mls\\\\tv\\[0-9\\]\\+\\\\.4h, v\\[0-9\\]\\+\\\\.4h, v\\[0-9\\]\\+\\\\.h\\\\\\[0\\\\\\]\" } } */\n+  return v0 - v1 * v2;\n+}\n+\n+typedef int __attribute__ ((vector_size (16))) v4si;\n+\n+v4si\n+mla4si (v4si v0, v4si v1, int v2)\n+{\n+  /* { dg-final { scan-assembler \"mla\\\\tv\\[0-9\\]\\+\\\\.4s, v\\[0-9\\]\\+\\\\.4s, v\\[0-9\\]\\+\\\\.s\\\\\\[0\\\\\\]\" } } */\n+  return v0 + v1 * v2;\n+}\n+\n+v4si\n+mls4si (v4si v0, v4si v1, int v2)\n+{\n+  /* { dg-final { scan-assembler \"mls\\\\tv\\[0-9\\]\\+\\\\.4s, v\\[0-9\\]\\+\\\\.4s, v\\[0-9\\]\\+\\\\.s\\\\\\[0\\\\\\]\" } } */\n+  return v0 - v1 * v2;\n+}\n+\n+typedef int __attribute__((vector_size (8))) v2si;\n+\n+v2si\n+mla2si (v2si v0, v2si v1, int v2)\n+{\n+  /* { dg-final { scan-assembler \"mla\\\\tv\\[0-9\\]\\+\\\\.2s, v\\[0-9\\]\\+\\\\.2s, v\\[0-9\\]\\+\\\\.s\\\\\\[0\\\\\\]\" } } */\n+  return v0 + v1 * v2;\n+}\n+\n+v2si\n+mls2si (v2si v0, v2si v1, int v2)\n+{\n+  /* { dg-final { scan-assembler \"mls\\\\tv\\[0-9\\]\\+\\\\.2s, v\\[0-9\\]\\+\\\\.2s, v\\[0-9\\]\\+\\\\.s\\\\\\[0\\\\\\]\" } } */\n+  return v0 - v1 * v2;\n+}"}]}