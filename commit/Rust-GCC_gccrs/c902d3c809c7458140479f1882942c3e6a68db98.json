{"sha": "c902d3c809c7458140479f1882942c3e6a68db98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkwMmQzYzgwOWM3NDU4MTQwNDc5ZjE4ODI5NDJjM2U2YTY4ZGI5OA==", "commit": {"author": {"name": "Sofiane Naci", "email": "sofiane.naci@arm.com", "date": "2013-04-02T09:30:02Z"}, "committer": {"name": "Sofiane Naci", "email": "sofiane@gcc.gnu.org", "date": "2013-04-02T09:30:02Z"}, "message": "aarch64.md (*mov<mode>_aarch64): Add variants for scalar load/store operations using B/H registers.\n\n\t* config/aarch64/aarch64.md (*mov<mode>_aarch64): Add variants for scalar\n\tload/store operations using B/H registers.\n\t(*zero_extend<SHORT:mode><GPI:mode>2_aarch64): Likewise.\n\nFrom-SVN: r197342", "tree": {"sha": "62270e75638a482db1f2ec18f88523aa232adadc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62270e75638a482db1f2ec18f88523aa232adadc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c902d3c809c7458140479f1882942c3e6a68db98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c902d3c809c7458140479f1882942c3e6a68db98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c902d3c809c7458140479f1882942c3e6a68db98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c902d3c809c7458140479f1882942c3e6a68db98/comments", "author": null, "committer": null, "parents": [{"sha": "051d0e2f45082269e127c6e048c69faee664b129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/051d0e2f45082269e127c6e048c69faee664b129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/051d0e2f45082269e127c6e048c69faee664b129"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "de5ec18ed123ac3d75681586c471f2a2539df5dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c902d3c809c7458140479f1882942c3e6a68db98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c902d3c809c7458140479f1882942c3e6a68db98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c902d3c809c7458140479f1882942c3e6a68db98", "patch": "@@ -1,3 +1,9 @@\n+2013-04-02  Sofiane Naci  <sofiane.naci@arm.com>\n+\n+\t* config/aarch64/aarch64.md (*mov<mode>_aarch64): Add variants for scalar\n+\tload/store operations using B/H registers.\n+\t(*zero_extend<SHORT:mode><GPI:mode>2_aarch64): Likewise.\n+\n 2013-04-02  Sofiane Naci  <sofiane.naci@arm.com>\n \n \t* config/aarch64/aarch64.md (*mov<mode>_aarch64): Add alternatives for"}, {"sha": "2533145b94b18b954f29ae48b444d8992fbf04c1", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c902d3c809c7458140479f1882942c3e6a68db98/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c902d3c809c7458140479f1882942c3e6a68db98/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=c902d3c809c7458140479f1882942c3e6a68db98", "patch": "@@ -763,21 +763,23 @@\n )\n \n (define_insn \"*mov<mode>_aarch64\"\n-  [(set (match_operand:SHORT 0 \"nonimmediate_operand\" \"=r,r,   *w,r, m, r,*w,*w\")\n-        (match_operand:SHORT 1 \"general_operand\"      \" r,M,D<hq>,m,rZ,*w, r,*w\"))]\n+  [(set (match_operand:SHORT 0 \"nonimmediate_operand\" \"=r,r,   *w,r,*w, m, m, r,*w,*w\")\n+        (match_operand:SHORT 1 \"general_operand\"      \" r,M,D<hq>,m, m,rZ,*w,*w, r,*w\"))]\n   \"(register_operand (operands[0], <MODE>mode)\n     || aarch64_reg_or_zero (operands[1], <MODE>mode))\"\n   \"@\n    mov\\\\t%w0, %w1\n    mov\\\\t%w0, %1\n    movi\\\\t%0.<Vallxd>, %1\n    ldr<size>\\\\t%w0, %1\n+   ldr\\\\t%<size>0, %1\n    str<size>\\\\t%w1, %0\n+   str\\\\t%<size>1, %0\n    umov\\\\t%w0, %1.<v>[0]\n    dup\\\\t%0.<Vallxd>, %w1\n    dup\\\\t%0, %1.<v>[0]\"\n-  [(set_attr \"v8type\" \"move,alu,alu,load1,store1,*,*,*\")\n-   (set_attr \"simd_type\" \"*,*,simd_move_imm,*,*,simd_movgp,simd_dupgp,simd_dup\")\n+  [(set_attr \"v8type\" \"move,alu,alu,load1,load1,store1,store1,*,*,*\")\n+   (set_attr \"simd_type\" \"*,*,simd_move_imm,*,*,*,*,simd_movgp,simd_dupgp,simd_dup\")\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"simd_mode\" \"<MODE>\")]\n )\n@@ -1151,13 +1153,14 @@\n )\n \n (define_insn \"*zero_extend<SHORT:mode><GPI:mode>2_aarch64\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r,r\")\n-        (zero_extend:GPI (match_operand:SHORT 1 \"nonimmediate_operand\" \"r,m\")))]\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r,r,*w\")\n+        (zero_extend:GPI (match_operand:SHORT 1 \"nonimmediate_operand\" \"r,m,m\")))]\n   \"\"\n   \"@\n    uxt<SHORT:size>\\t%<GPI:w>0, %w1\n-   ldr<SHORT:size>\\t%w0, %1\"\n-  [(set_attr \"v8type\" \"extend,load1\")\n+   ldr<SHORT:size>\\t%w0, %1\n+   ldr\\t%<SHORT:size>0, %1\"\n+  [(set_attr \"v8type\" \"extend,load1,load1\")\n    (set_attr \"mode\" \"<GPI:MODE>\")]\n )\n "}]}