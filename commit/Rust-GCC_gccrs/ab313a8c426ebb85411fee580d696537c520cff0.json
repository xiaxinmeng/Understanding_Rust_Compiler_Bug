{"sha": "ab313a8c426ebb85411fee580d696537c520cff0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIzMTNhOGM0MjZlYmI4NTQxMWZlZTU4MGQ2OTY1MzdjNTIwY2ZmMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-06-16T10:29:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-06-16T10:29:16Z"}, "message": "tree-vect-stmts.c (vectorizable_load): Properly start loads with the first element if this is grouped loads.\n\n2015-06-16  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-stmts.c (vectorizable_load): Properly start loads\n\twith the first element if this is grouped loads.\n\n\t* gcc.dg/vect/slp-perm-11.c: New testcase.\n\nFrom-SVN: r224511", "tree": {"sha": "25366b7c45eb141a299fe1e4c61b7bf5f6d753c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25366b7c45eb141a299fe1e4c61b7bf5f6d753c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab313a8c426ebb85411fee580d696537c520cff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab313a8c426ebb85411fee580d696537c520cff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab313a8c426ebb85411fee580d696537c520cff0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab313a8c426ebb85411fee580d696537c520cff0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c764591d76467d91fb75753352b5a8281f82c56a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c764591d76467d91fb75753352b5a8281f82c56a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c764591d76467d91fb75753352b5a8281f82c56a"}], "stats": {"total": 70, "additions": 60, "deletions": 10}, "files": [{"sha": "6090a2d029c636f17620a0c14172027d78dc47a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab313a8c426ebb85411fee580d696537c520cff0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab313a8c426ebb85411fee580d696537c520cff0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab313a8c426ebb85411fee580d696537c520cff0", "patch": "@@ -1,3 +1,8 @@\n+2015-06-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-stmts.c (vectorizable_load): Properly start loads\n+\twith the first element if this is grouped loads.\n+\n 2015-06-16  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/arm/arm-protos.h (struct tune_params): Rename"}, {"sha": "980363667a13f99c86a1207035d41b49f8c6ea9e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab313a8c426ebb85411fee580d696537c520cff0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab313a8c426ebb85411fee580d696537c520cff0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab313a8c426ebb85411fee580d696537c520cff0", "patch": "@@ -1,3 +1,7 @@\n+2015-06-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/slp-perm-11.c: New testcase.\n+\n 2015-06-16  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/arm/thumb-ifcvt.c: Add -mno-restrict-it to"}, {"sha": "0318d468ef102cb263d090a33429849221dc3c0d", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-11.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab313a8c426ebb85411fee580d696537c520cff0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab313a8c426ebb85411fee580d696537c520cff0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-11.c?ref=ab313a8c426ebb85411fee580d696537c520cff0", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-require-effective-target vect_int } */\n+\n+#include \"tree-vect.h\"\n+\n+int a[64];\n+int b[128];\n+\n+void __attribute__((noinline, noclone))\n+foo (int s)\n+{\n+  int i;\n+  for (i = 0; i < 32; ++i)\n+    {\n+      a[2*i] = b[i*s+1];\n+      a[2*i+1] = b[i*s];\n+    }\n+}\n+\n+int main ()\n+{\n+  int i;\n+  check_vect ();\n+  for (i = 0; i < 128; ++i)\n+    {\n+      b[i] = i;\n+      __asm__ volatile (\"\");\n+    }\n+  foo (4);\n+  for (i = 0; i < 64; ++i)\n+    if (a[i] != (4*(i/2) + (i & 1) ^ 1))\n+      abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { target vect_perm } } } */"}, {"sha": "59a4390c153bf4e1290049c91db58f7aba9793ca", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab313a8c426ebb85411fee580d696537c520cff0/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab313a8c426ebb85411fee580d696537c520cff0/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=ab313a8c426ebb85411fee580d696537c520cff0", "patch": "@@ -6247,13 +6247,19 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \n       gcc_assert (!nested_in_vect_loop);\n \n+      if (grouped_load)\n+\tfirst_dr = STMT_VINFO_DATA_REF\n+\t    (vinfo_for_stmt (GROUP_FIRST_ELEMENT (stmt_info)));\n+      else\n+\tfirst_dr = dr;\n+\n       stride_base\n \t= fold_build_pointer_plus\n-\t    (unshare_expr (DR_BASE_ADDRESS (dr)),\n+\t    (DR_BASE_ADDRESS (first_dr),\n \t     size_binop (PLUS_EXPR,\n-\t\t\t convert_to_ptrofftype (unshare_expr (DR_OFFSET (dr))),\n-\t\t\t convert_to_ptrofftype (DR_INIT (dr))));\n-      stride_step = fold_convert (sizetype, unshare_expr (DR_STEP (dr)));\n+\t\t\t convert_to_ptrofftype (DR_OFFSET (first_dr)),\n+\t\t\t convert_to_ptrofftype (DR_INIT (first_dr))));\n+      stride_step = fold_convert (sizetype, DR_STEP (first_dr));\n \n       /* For a load with loop-invariant (but other than power-of-2)\n          stride (i.e. not a grouped access) like so:\n@@ -6271,25 +6277,25 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t     vectemp = {tmp1, tmp2, ...}\n          */\n \n-      ivstep = stride_step;\n-      ivstep = fold_build2 (MULT_EXPR, TREE_TYPE (ivstep), ivstep,\n-\t\t\t    build_int_cst (TREE_TYPE (ivstep), vf));\n+      ivstep = fold_build2 (MULT_EXPR, TREE_TYPE (stride_step), stride_step,\n+\t\t\t    build_int_cst (TREE_TYPE (stride_step), vf));\n \n       standard_iv_increment_position (loop, &incr_gsi, &insert_after);\n \n-      create_iv (stride_base, ivstep, NULL,\n+      create_iv (unshare_expr (stride_base), unshare_expr (ivstep), NULL,\n \t\t loop, &incr_gsi, insert_after,\n \t\t &offvar, NULL);\n       incr = gsi_stmt (incr_gsi);\n       set_vinfo_for_stmt (incr, new_stmt_vec_info (incr, loop_vinfo, NULL));\n \n-      stride_step = force_gimple_operand (stride_step, &stmts, true, NULL_TREE);\n+      stride_step = force_gimple_operand (unshare_expr (stride_step),\n+\t\t\t\t\t  &stmts, true, NULL_TREE);\n       if (stmts)\n \tgsi_insert_seq_on_edge_immediate (loop_preheader_edge (loop), stmts);\n \n       prev_stmt_info = NULL;\n       running_off = offvar;\n-      alias_off = build_int_cst (reference_alias_ptr_type (DR_REF (dr)), 0);\n+      alias_off = build_int_cst (reference_alias_ptr_type (DR_REF (first_dr)), 0);\n       int nloads = nunits;\n       tree ltype = TREE_TYPE (vectype);\n       auto_vec<tree> dr_chain;"}]}