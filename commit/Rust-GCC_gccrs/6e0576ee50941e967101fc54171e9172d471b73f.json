{"sha": "6e0576ee50941e967101fc54171e9172d471b73f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUwNTc2ZWU1MDk0MWU5NjcxMDFmYzU0MTcxZTkxNzJkNDcxYjczZg==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-01-29T17:31:04Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-01-29T17:31:04Z"}, "message": "re PR libfortran/47434 (Wrong field width for NaN with (F0.n) formatting)\n\n2011-01-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/47434\n\t* io/write_float.def (write_infnan): Use calculate_sign to determine\n\tif the sign should be given and check field widths accordingly.\n\nFrom-SVN: r169390", "tree": {"sha": "e69ac08764003fae3205b41012afee45c9b480ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e69ac08764003fae3205b41012afee45c9b480ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e0576ee50941e967101fc54171e9172d471b73f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0576ee50941e967101fc54171e9172d471b73f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e0576ee50941e967101fc54171e9172d471b73f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0576ee50941e967101fc54171e9172d471b73f/comments", "author": null, "committer": null, "parents": [{"sha": "69ca976728b43ad84f9a8e3be9aaf852cdee8a8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ca976728b43ad84f9a8e3be9aaf852cdee8a8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69ca976728b43ad84f9a8e3be9aaf852cdee8a8f"}], "stats": {"total": 58, "additions": 44, "deletions": 14}, "files": [{"sha": "dc10be50cb0ab822762dffedb4972461f9cda2ce", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0576ee50941e967101fc54171e9172d471b73f/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0576ee50941e967101fc54171e9172d471b73f/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=6e0576ee50941e967101fc54171e9172d471b73f", "patch": "@@ -1,3 +1,9 @@\n+2011-01-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/47434\n+\t* io/write_float.def (write_infnan): Use calculate_sign to determine\n+\tif the sign should be given and check field widths accordingly.\n+\n 2011-01-29  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* intrinsics/ctime.c (ctime_r): Improve implementation.\n@@ -35,6 +41,12 @@\n \t* config.h.in: Regenerate.\n \t* configure: Regenerate.\n \n+2011-01-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/47285\n+\t* io/write_float.def (write_infnan): Adjust processor selected width\n+\tto 3 if NaN.\n+\n 2011-01-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/47285"}, {"sha": "a77b30427686344feee9616012f88b644cd7746d", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0576ee50941e967101fc54171e9172d471b73f/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0576ee50941e967101fc54171e9172d471b73f/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=6e0576ee50941e967101fc54171e9172d471b73f", "patch": "@@ -660,15 +660,26 @@ write_infnan (st_parameter_dt *dtp, const fnode *f, int isnan_flag, int sign_bit\n {\n   char * p, fin;\n   int nb = 0;\n+  sign_t sign;\n+  int mark;\n \n   if (f->format != FMT_B && f->format != FMT_O && f->format != FMT_Z)\n     {\n+      sign = calculate_sign (dtp, sign_bit);\n+      mark = (sign == S_PLUS || sign == S_MINUS) ? 8 : 7;\n+\n       nb =  f->u.real.w;\n   \n       /* If the field width is zero, the processor must select a width \n \t not zero.  4 is chosen to allow output of '-Inf' or '+Inf' */\n      \n-      if (nb == 0) nb = 4;\n+      if (nb == 0)\n+\t{\n+\t  if (isnan_flag)\n+\t    nb = 3;\n+\t  else\n+\t    nb = (sign == S_PLUS || sign == S_MINUS) ? 4 : 3;\n+\t}\n       p = write_block (dtp, nb);\n       if (p == NULL)\n \treturn;\n@@ -720,35 +731,42 @@ write_infnan (st_parameter_dt *dtp, const fnode *f, int isnan_flag, int sign_bit\n \t  if (unlikely (is_char4_unit (dtp)))\n \t    {\n \t      gfc_char4_t *p4 = (gfc_char4_t *) p;\n-\t      if (nb > 8)\n+\n+\t      if (nb > mark)\n \t\t/* We have room, so output 'Infinity' */\n \t\tmemcpy4 (p4 + nb - 8, \"Infinity\", 8);\n \t      else\n-\t\t/* For the case of width equals 8, there is not enough room\n+\t\t/* For the case of width equals mark, there is not enough room\n \t\t   for the sign and 'Infinity' so we go with 'Inf' */\n \t\tmemcpy4 (p4 + nb - 3, \"Inf\", 3);\n \n-\t      if (nb < 9 && nb > 3)\n-\t        /* Put the sign in front of Inf */\n-\t\tp4[nb - 4] = (gfc_char4_t) fin;\n-\t      else if (nb > 8)\n-\t        /* Put the sign in front of Infinity */\n-\t\tp4[nb - 9] = (gfc_char4_t) fin;\n+\t      if (sign == S_PLUS || sign == S_MINUS)\n+\t\t{\n+\t\t  if (nb < 9 && nb > 3)\n+\t\t    /* Put the sign in front of Inf */\n+\t\t    p4[nb - 4] = (gfc_char4_t) fin;\n+\t\t  else if (nb > 8)\n+\t\t    /* Put the sign in front of Infinity */\n+\t\t    p4[nb - 9] = (gfc_char4_t) fin;\n+\t\t}\n \t      return;\n \t    }\n \n-\t  if (nb > 8)\n+\t  if (nb > mark)\n \t    /* We have room, so output 'Infinity' */\n \t    memcpy(p + nb - 8, \"Infinity\", 8);\n \t  else\n \t    /* For the case of width equals 8, there is not enough room\n \t       for the sign and 'Infinity' so we go with 'Inf' */\n \t    memcpy(p + nb - 3, \"Inf\", 3);\n \n-\t  if (nb < 9 && nb > 3)\n-\t    p[nb - 4] = fin;  /* Put the sign in front of Inf */\n-\t  else if (nb > 8)\n-\t    p[nb - 9] = fin;  /* Put the sign in front of Infinity */\n+\t  if (sign == S_PLUS || sign == S_MINUS)\n+\t    {\n+\t      if (nb < 9 && nb > 3)\n+\t\tp[nb - 4] = fin;  /* Put the sign in front of Inf */\n+\t      else if (nb > 8)\n+\t\tp[nb - 9] = fin;  /* Put the sign in front of Infinity */\n+\t    }\n \t}\n       else\n         {"}]}