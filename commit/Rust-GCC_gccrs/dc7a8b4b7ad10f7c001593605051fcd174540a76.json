{"sha": "dc7a8b4b7ad10f7c001593605051fcd174540a76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM3YThiNGI3YWQxMGY3YzAwMTU5MzYwNTA1MWZjZDE3NDU0MGE3Ng==", "commit": {"author": {"name": "James Norris", "email": "jnorris@codesourcery.com", "date": "2015-11-22T16:45:38Z"}, "committer": {"name": "James Norris", "email": "jnorris@gcc.gnu.org", "date": "2015-11-22T16:45:38Z"}, "message": "dump-parse-tree.c (show_namespace): Handle declares.\n\n\n\tgcc/fortran/\n\t* dump-parse-tree.c (show_namespace): Handle declares.\n\t* gfortran.h (struct symbol_attribute): New fields.\n\t(enum gfc_omp_map_map): Add OMP_MAP_DEVICE_RESIDENT and OMP_MAP_LINK.\n\t(OMP_LIST_LINK): New enum.\n\t(struct gfc_oacc_declare): New structure.\n\t(gfc_get_oacc_declare): New definition.\n\t(struct gfc_namespace): Change type.\n\t(enum gfc_exec_op): Add EXEC_OACC_DECLARE.\n\t(struct gfc_code): New field.\n\t* module.c (enum ab_attribute): Add AB_OACC_DECLARE_CREATE,\n\tAB_OACC_DECLARE_COPYIN, AB_OACC_DECLARE_DEVICEPTR,\n\tAB_OACC_DECLARE_DEVICE_RESIDENT, AB_OACC_DECLARE_LINK\n\t(attr_bits): Add new initializers.\n\t(mio_symbol_attribute): Handle new atributes.\n\t* openmp.c (gfc_free_oacc_declare_clauses): New function.\n\t(gfc_match_oacc_clause_link: Likewise.\n\t(OMP_CLAUSE_LINK): New definition.\n\t(gfc_match_omp_clauses): Handle OMP_CLAUSE_LINK.\n\t(OACC_DECLARE_CLAUSES): Add OMP_CLAUSE_LINK\n\t(gfc_match_oacc_declare): Add checking and module handling.\n\t(resolve_omp_clauses): Add array initializer.\n\t(gfc_resolve_oacc_declare): Reimplement.\n\t* parse.c (case_decl): Add ST_OACC_DECLARE.\n\t(parse_spec): Remove handling.\n\t(parse_progunit): Remove handling.\n\t* parse.h (struct gfc_state_data): Change type.\n\t* resolve.c (gfc_resolve_blocks): Handle EXEC_OACC_DECLARE.\n\t* st.c (gfc_free_statement): Handle EXEC_OACC_DECLARE.\n\t* symbol.c (check_conflict): Add conflict checks.\n\t(gfc_add_oacc_declare_create, gfc_add_oacc_declare_copyin, \n\tgfc_add_oacc_declare_deviceptr, gfc_add_oacc_declare_device_resident):\n\tNew functions.\n\t(gfc_copy_attr): Handle new symbols.\n\t* trans-decl.c (add_clause, find_module_oacc_declare_clauses,\n\tfinish_oacc_declare): New functions.\n\t(gfc_generate_function_code): Replace with call.\n\t* trans-openmp.c (gfc_trans_oacc_declare): Reimplement.\n\t(gfc_trans_oacc_directive): Handle EXEC_OACC_DECLARE.\n\t* trans-stmt.c (gfc_trans_block_construct): Replace with call.\n\t* trans-stmt.h (gfc_trans_oacc_declare): Remove argument.\n\t* trans.c (trans_code): Handle EXEC_OACC_DECLARE.\n\n\tgcc/testsuite\n\t* gfortran.dg/goacc/declare-1.f95: Update test.\n\t* gfortran.dg/goacc/declare-2.f95: New test.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-fortran/declare-1.f90: New test.\n\t* testsuite/libgomp.oacc-fortran/declare-2.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/declare-3.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/declare-4.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/declare-5.f90: Likewise.\n\nCo-Authored-By: Cesar Philippidis <cesar@codesourcery.com>\n\nFrom-SVN: r230722", "tree": {"sha": "07e91d9f58d420855371941119707e37a4f2c08e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07e91d9f58d420855371941119707e37a4f2c08e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc7a8b4b7ad10f7c001593605051fcd174540a76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc7a8b4b7ad10f7c001593605051fcd174540a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc7a8b4b7ad10f7c001593605051fcd174540a76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc7a8b4b7ad10f7c001593605051fcd174540a76/comments", "author": null, "committer": null, "parents": [{"sha": "9030a4d3aa90c1db1a657fe5588c823f0ea73a86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9030a4d3aa90c1db1a657fe5588c823f0ea73a86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9030a4d3aa90c1db1a657fe5588c823f0ea73a86"}], "stats": {"total": 1198, "additions": 1114, "deletions": 84}, "files": [{"sha": "e1a27462d118bedcfbeea1420d63307fdf2279f2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -1,3 +1,48 @@\n+2015-11-22  James Norris  <jnorris@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* dump-parse-tree.c (show_namespace): Handle declares.\n+\t* gfortran.h (struct symbol_attribute): New fields.\n+\t(enum gfc_omp_map_map): Add OMP_MAP_DEVICE_RESIDENT and OMP_MAP_LINK.\n+\t(OMP_LIST_LINK): New enum.\n+\t(struct gfc_oacc_declare): New structure.\n+\t(gfc_get_oacc_declare): New definition.\n+\t(struct gfc_namespace): Change type.\n+\t(enum gfc_exec_op): Add EXEC_OACC_DECLARE.\n+\t(struct gfc_code): New field.\n+\t* module.c (enum ab_attribute): Add AB_OACC_DECLARE_CREATE,\n+\tAB_OACC_DECLARE_COPYIN, AB_OACC_DECLARE_DEVICEPTR,\n+\tAB_OACC_DECLARE_DEVICE_RESIDENT, AB_OACC_DECLARE_LINK\n+\t(attr_bits): Add new initializers.\n+\t(mio_symbol_attribute): Handle new atributes.\n+\t* openmp.c (gfc_free_oacc_declare_clauses): New function.\n+\t(gfc_match_oacc_clause_link: Likewise.\n+\t(OMP_CLAUSE_LINK): New definition.\n+\t(gfc_match_omp_clauses): Handle OMP_CLAUSE_LINK.\n+\t(OACC_DECLARE_CLAUSES): Add OMP_CLAUSE_LINK\n+\t(gfc_match_oacc_declare): Add checking and module handling.\n+\t(resolve_omp_clauses): Add array initializer.\n+\t(gfc_resolve_oacc_declare): Reimplement.\n+\t* parse.c (case_decl): Add ST_OACC_DECLARE.\n+\t(parse_spec): Remove handling.\n+\t(parse_progunit): Remove handling.\n+\t* parse.h (struct gfc_state_data): Change type.\n+\t* resolve.c (gfc_resolve_blocks): Handle EXEC_OACC_DECLARE.\n+\t* st.c (gfc_free_statement): Handle EXEC_OACC_DECLARE.\n+\t* symbol.c (check_conflict): Add conflict checks.\n+\t(gfc_add_oacc_declare_create, gfc_add_oacc_declare_copyin, \n+\tgfc_add_oacc_declare_deviceptr, gfc_add_oacc_declare_device_resident):\n+\tNew functions.\n+\t(gfc_copy_attr): Handle new symbols.\n+\t* trans-decl.c (add_clause, find_module_oacc_declare_clauses,\n+\tfinish_oacc_declare): New functions.\n+\t(gfc_generate_function_code): Replace with call.\n+\t* trans-openmp.c (gfc_trans_oacc_declare): Reimplement.\n+\t(gfc_trans_oacc_directive): Handle EXEC_OACC_DECLARE.\n+\t* trans-stmt.c (gfc_trans_block_construct): Replace with call.\n+\t* trans-stmt.h (gfc_trans_oacc_declare): Remove argument.\n+\t* trans.c (trans_code): Handle EXEC_OACC_DECLARE.\n+\n 2015-11-21  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* simplify.c (gfc_simplify_cshift): Work around bootstrap issues"}, {"sha": "48476af56d3173c18afad6f8eadd9ae855b8c5b7", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -2570,12 +2570,16 @@ show_namespace (gfc_namespace *ns)\n   for (eq = ns->equiv; eq; eq = eq->next)\n     show_equiv (eq);\n \n-  if (ns->oacc_declare_clauses)\n+  if (ns->oacc_declare)\n     {\n+      struct gfc_oacc_declare *decl;\n       /* Dump !$ACC DECLARE clauses.  */\n-      show_indent ();\n-      fprintf (dumpfile, \"!$ACC DECLARE\");\n-      show_omp_clauses (ns->oacc_declare_clauses);\n+      for (decl = ns->oacc_declare; decl; decl = decl->next)\n+\t{\n+\t  show_indent ();\n+\t  fprintf (dumpfile, \"!$ACC DECLARE\");\n+\t  show_omp_clauses (decl->clauses);\n+\t}\n     }\n \n   fputc ('\\n', dumpfile);"}, {"sha": "5487c9343e4872b25b2227ea5c0242c5d0e0940a", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -841,6 +841,13 @@ typedef struct\n   /* Mentioned in OMP DECLARE TARGET.  */\n   unsigned omp_declare_target:1;\n \n+  /* Mentioned in OACC DECLARE.  */\n+  unsigned oacc_declare_create:1;\n+  unsigned oacc_declare_copyin:1;\n+  unsigned oacc_declare_deviceptr:1;\n+  unsigned oacc_declare_device_resident:1;\n+  unsigned oacc_declare_link:1;\n+\n   /* Attributes set by compiler extensions (!GCC$ ATTRIBUTES).  */\n   unsigned ext_attr:EXT_ATTR_NUM;\n \n@@ -1106,7 +1113,9 @@ enum gfc_omp_map_op\n   OMP_MAP_FORCE_FROM,\n   OMP_MAP_FORCE_TOFROM,\n   OMP_MAP_FORCE_PRESENT,\n-  OMP_MAP_FORCE_DEVICEPTR\n+  OMP_MAP_FORCE_DEVICEPTR,\n+  OMP_MAP_DEVICE_RESIDENT,\n+  OMP_MAP_LINK\n };\n \n /* For use in OpenMP clauses in case we need extra information\n@@ -1148,6 +1157,7 @@ enum\n   OMP_LIST_FROM,\n   OMP_LIST_REDUCTION,\n   OMP_LIST_DEVICE_RESIDENT,\n+  OMP_LIST_LINK,\n   OMP_LIST_USE_DEVICE,\n   OMP_LIST_CACHE,\n   OMP_LIST_NUM\n@@ -1234,6 +1244,20 @@ gfc_omp_clauses;\n #define gfc_get_omp_clauses() XCNEW (gfc_omp_clauses)\n \n \n+/* Node in the linked list used for storing !$oacc declare constructs.  */\n+\n+typedef struct gfc_oacc_declare\n+{\n+  struct gfc_oacc_declare *next;\n+  bool module_var;\n+  gfc_omp_clauses *clauses;\n+  locus loc;\n+}\n+gfc_oacc_declare;\n+\n+#define gfc_get_oacc_declare() XCNEW (gfc_oacc_declare)\n+\n+\n /* Node in the linked list used for storing !$omp declare simd constructs.  */\n \n typedef struct gfc_omp_declare_simd\n@@ -1645,8 +1669,8 @@ typedef struct gfc_namespace\n      this namespace.  */\n   struct gfc_data *data, *old_data;\n \n-  /* !$ACC DECLARE clauses.  */\n-  gfc_omp_clauses *oacc_declare_clauses;\n+  /* !$ACC DECLARE.  */\n+  gfc_oacc_declare *oacc_declare;\n \n   gfc_charlen *cl_list, *old_cl_list;\n \n@@ -2324,6 +2348,7 @@ enum gfc_exec_op\n   EXEC_OACC_PARALLEL, EXEC_OACC_KERNELS, EXEC_OACC_DATA, EXEC_OACC_HOST_DATA,\n   EXEC_OACC_LOOP, EXEC_OACC_UPDATE, EXEC_OACC_WAIT, EXEC_OACC_CACHE,\n   EXEC_OACC_ENTER_DATA, EXEC_OACC_EXIT_DATA, EXEC_OACC_ATOMIC,\n+  EXEC_OACC_DECLARE,\n   EXEC_OMP_CRITICAL, EXEC_OMP_DO, EXEC_OMP_FLUSH, EXEC_OMP_MASTER,\n   EXEC_OMP_ORDERED, EXEC_OMP_PARALLEL, EXEC_OMP_PARALLEL_DO,\n   EXEC_OMP_PARALLEL_SECTIONS, EXEC_OMP_PARALLEL_WORKSHARE,\n@@ -2405,6 +2430,7 @@ typedef struct gfc_code\n     struct gfc_code *which_construct;\n     int stop_code;\n     gfc_entry_list *entry;\n+    gfc_oacc_declare *oacc_declare;\n     gfc_omp_clauses *omp_clauses;\n     const char *omp_name;\n     gfc_omp_namelist *omp_namelist;\n@@ -2907,6 +2933,7 @@ gfc_expr *gfc_get_parentheses (gfc_expr *);\n /* openmp.c */\n struct gfc_omp_saved_state { void *ptrs[2]; int ints[1]; };\n void gfc_free_omp_clauses (gfc_omp_clauses *);\n+void gfc_free_oacc_declare_clauses (struct gfc_oacc_declare *);\n void gfc_free_omp_declare_simd (gfc_omp_declare_simd *);\n void gfc_free_omp_declare_simd_list (gfc_omp_declare_simd *);\n void gfc_free_omp_udr (gfc_omp_udr *);\n@@ -3224,4 +3251,8 @@ gfc_expr *gfc_simplify_ieee_functions (gfc_expr *);\n \n bool gfc_is_reallocatable_lhs (gfc_expr *);\n \n+/* trans-decl.c */\n+\n+void finish_oacc_declare (gfc_namespace *, gfc_symbol *, bool);\n+\n #endif /* GCC_GFORTRAN_H  */"}, {"sha": "6b544ee7596fdfe898ff12817a8268d5504a9469", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -1986,7 +1986,9 @@ enum ab_attribute\n   AB_IS_CLASS, AB_PROCEDURE, AB_PROC_POINTER, AB_ASYNCHRONOUS, AB_CODIMENSION,\n   AB_COARRAY_COMP, AB_VTYPE, AB_VTAB, AB_CONTIGUOUS, AB_CLASS_POINTER,\n   AB_IMPLICIT_PURE, AB_ARTIFICIAL, AB_UNLIMITED_POLY, AB_OMP_DECLARE_TARGET,\n-  AB_ARRAY_OUTER_DEPENDENCY, AB_MODULE_PROCEDURE\n+  AB_ARRAY_OUTER_DEPENDENCY, AB_MODULE_PROCEDURE, AB_OACC_DECLARE_CREATE,\n+  AB_OACC_DECLARE_COPYIN, AB_OACC_DECLARE_DEVICEPTR,\n+  AB_OACC_DECLARE_DEVICE_RESIDENT, AB_OACC_DECLARE_LINK\n };\n \n static const mstring attr_bits[] =\n@@ -2043,6 +2045,11 @@ static const mstring attr_bits[] =\n     minit (\"OMP_DECLARE_TARGET\", AB_OMP_DECLARE_TARGET),\n     minit (\"ARRAY_OUTER_DEPENDENCY\", AB_ARRAY_OUTER_DEPENDENCY),\n     minit (\"MODULE_PROCEDURE\", AB_MODULE_PROCEDURE),\n+    minit (\"OACC_DECLARE_CREATE\", AB_OACC_DECLARE_CREATE),\n+    minit (\"OACC_DECLARE_COPYIN\", AB_OACC_DECLARE_COPYIN),\n+    minit (\"OACC_DECLARE_DEVICEPTR\", AB_OACC_DECLARE_DEVICEPTR),\n+    minit (\"OACC_DECLARE_DEVICE_RESIDENT\", AB_OACC_DECLARE_DEVICE_RESIDENT),\n+    minit (\"OACC_DECLARE_LINK\", AB_OACC_DECLARE_LINK),\n     minit (NULL, -1)\n };\n \n@@ -2230,6 +2237,16 @@ mio_symbol_attribute (symbol_attribute *attr)\n \tMIO_NAME (ab_attribute) (AB_MODULE_PROCEDURE, attr_bits);\n \t  no_module_procedures = false;\n \t}\n+      if (attr->oacc_declare_create)\n+\tMIO_NAME (ab_attribute) (AB_OACC_DECLARE_CREATE, attr_bits);\n+      if (attr->oacc_declare_copyin)\n+\tMIO_NAME (ab_attribute) (AB_OACC_DECLARE_COPYIN, attr_bits);\n+      if (attr->oacc_declare_deviceptr)\n+\tMIO_NAME (ab_attribute) (AB_OACC_DECLARE_DEVICEPTR, attr_bits);\n+      if (attr->oacc_declare_device_resident)\n+\tMIO_NAME (ab_attribute) (AB_OACC_DECLARE_DEVICE_RESIDENT, attr_bits);\n+      if (attr->oacc_declare_link)\n+\tMIO_NAME (ab_attribute) (AB_OACC_DECLARE_LINK, attr_bits);\n \n       mio_rparen ();\n \n@@ -2402,6 +2419,21 @@ mio_symbol_attribute (symbol_attribute *attr)\n \t    case AB_MODULE_PROCEDURE:\n \t      attr->module_procedure =1;\n \t      break;\n+\t    case AB_OACC_DECLARE_CREATE:\n+\t      attr->oacc_declare_create = 1;\n+\t      break;\n+\t    case AB_OACC_DECLARE_COPYIN:\n+\t      attr->oacc_declare_copyin = 1;\n+\t      break;\n+\t    case AB_OACC_DECLARE_DEVICEPTR:\n+\t      attr->oacc_declare_deviceptr = 1;\n+\t      break;\n+\t    case AB_OACC_DECLARE_DEVICE_RESIDENT:\n+\t      attr->oacc_declare_device_resident = 1;\n+\t      break;\n+\t    case AB_OACC_DECLARE_LINK:\n+\t      attr->oacc_declare_link = 1;\n+\t      break;\n \t    }\n \t}\n     }"}, {"sha": "ffdce0b18480b6d5a774c8216af0df052f068ceb", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 246, "deletions": 30, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -90,6 +90,25 @@ gfc_free_omp_clauses (gfc_omp_clauses *c)\n   free (c);\n }\n \n+/* Free oacc_declare structures.  */\n+\n+void\n+gfc_free_oacc_declare_clauses (struct gfc_oacc_declare *oc)\n+{\n+  struct gfc_oacc_declare *decl = oc;\n+\n+  do\n+    {\n+      struct gfc_oacc_declare *next;\n+\n+      next = decl->next;\n+      gfc_free_omp_clauses (decl->clauses);\n+      free (decl);\n+      decl = next;\n+    }\n+  while (decl);\n+}\n+\n /* Free expression list. */\n void\n gfc_free_expr_list (gfc_expr_list *list)\n@@ -393,6 +412,109 @@ match_oacc_clause_gang (gfc_omp_clauses *cp)\n   return gfc_match (\" %e )\", &cp->gang_expr);\n }\n \n+static match\n+gfc_match_oacc_clause_link (const char *str, gfc_omp_namelist **list)\n+{\n+  gfc_omp_namelist *head, *tail, *p;\n+  locus old_loc;\n+  char n[GFC_MAX_SYMBOL_LEN+1];\n+  gfc_symbol *sym;\n+  match m;\n+  gfc_symtree *st;\n+\n+  old_loc = gfc_current_locus;\n+\n+  m = gfc_match (str);\n+  if (m != MATCH_YES)\n+    return m;\n+\n+  m = gfc_match (\" (\");\n+\n+  for (;;)\n+    {\n+      m = gfc_match_symbol (&sym, 0);\n+      switch (m)\n+\t{\n+\tcase MATCH_YES:\n+\t  if (sym->attr.in_common)\n+\t    {\n+\t      gfc_error_now (\"Variable at %C is an element of a COMMON block\");\n+\t      goto cleanup;\n+\t    }\n+\t  gfc_set_sym_referenced (sym);\n+\t  p = gfc_get_omp_namelist ();\n+\t  if (head == NULL)\n+\t    head = tail = p;\n+\t  else\n+\t    {\n+\t      tail->next = p;\n+\t      tail = tail->next;\n+\t    }\n+\t  tail->sym = sym;\n+\t  tail->expr = NULL;\n+\t  tail->where = gfc_current_locus;\n+\t  goto next_item;\n+\tcase MATCH_NO:\n+\t  break;\n+\n+\tcase MATCH_ERROR:\n+\t  goto cleanup;\n+\t}\n+\n+      m = gfc_match (\" / %n /\", n);\n+      if (m == MATCH_ERROR)\n+\tgoto cleanup;\n+      if (m == MATCH_NO || n[0] == '\\0')\n+\tgoto syntax;\n+\n+      st = gfc_find_symtree (gfc_current_ns->common_root, n);\n+      if (st == NULL)\n+\t{\n+\t  gfc_error (\"COMMON block /%s/ not found at %C\", n);\n+\t  goto cleanup;\n+\t}\n+\n+      for (sym = st->n.common->head; sym; sym = sym->common_next)\n+\t{\n+\t  gfc_set_sym_referenced (sym);\n+\t  p = gfc_get_omp_namelist ();\n+\t  if (head == NULL)\n+\t    head = tail = p;\n+\t  else\n+\t    {\n+\t      tail->next = p;\n+\t      tail = tail->next;\n+\t    }\n+\t  tail->sym = sym;\n+\t  tail->where = gfc_current_locus;\n+\t}\n+\n+    next_item:\n+      if (gfc_match_char (')') == MATCH_YES)\n+\tbreak;\n+      if (gfc_match_char (',') != MATCH_YES)\n+\tgoto syntax;\n+    }\n+\n+  if (gfc_match_omp_eos () != MATCH_YES)\n+    {\n+      gfc_error (\"Unexpected junk after !$ACC DECLARE at %C\");\n+      goto cleanup;\n+    }\n+\n+  while (*list)\n+    list = &(*list)->next;\n+  *list = head;\n+  return MATCH_YES;\n+\n+syntax:\n+  gfc_error (\"Syntax error in !$ACC DECLARE list at %C\");\n+\n+cleanup:\n+  gfc_current_locus = old_loc;\n+  return MATCH_ERROR;\n+}\n+\n #define OMP_CLAUSE_PRIVATE\t\t((uint64_t) 1 << 0)\n #define OMP_CLAUSE_FIRSTPRIVATE\t\t((uint64_t) 1 << 1)\n #define OMP_CLAUSE_LASTPRIVATE\t\t((uint64_t) 1 << 2)\n@@ -453,6 +575,7 @@ match_oacc_clause_gang (gfc_omp_clauses *cp)\n #define OMP_CLAUSE_DELETE\t\t((uint64_t) 1 << 55)\n #define OMP_CLAUSE_AUTO\t\t\t((uint64_t) 1 << 56)\n #define OMP_CLAUSE_TILE\t\t\t((uint64_t) 1 << 57)\n+#define OMP_CLAUSE_LINK\t\t\t((uint64_t) 1 << 58)\n \n /* Helper function for OpenACC and OpenMP clauses involving memory\n    mapping.  */\n@@ -691,6 +814,11 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, uint64_t mask,\n \t\t\t\t\t  true)\n \t     == MATCH_YES)\n \tcontinue;\n+      if ((mask & OMP_CLAUSE_LINK)\n+\t  && gfc_match_oacc_clause_link (\"link (\",\n+\t\t\t\t\t  &c->lists[OMP_LIST_LINK])\n+\t     == MATCH_YES)\n+\tcontinue;\n       if ((mask & OMP_CLAUSE_OACC_DEVICE)\n \t  && gfc_match (\"device ( \") == MATCH_YES\n \t  && gfc_match_omp_map_clause (&c->lists[OMP_LIST_MAP],\n@@ -1176,7 +1304,7 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, uint64_t mask,\n    | OMP_CLAUSE_CREATE | OMP_CLAUSE_DEVICEPTR | OMP_CLAUSE_DEVICE_RESIDENT    \\\n    | OMP_CLAUSE_PRESENT | OMP_CLAUSE_PRESENT_OR_COPY                          \\\n    | OMP_CLAUSE_PRESENT_OR_COPYIN | OMP_CLAUSE_PRESENT_OR_COPYOUT             \\\n-   | OMP_CLAUSE_PRESENT_OR_CREATE)\n+   | OMP_CLAUSE_PRESENT_OR_CREATE | OMP_CLAUSE_LINK)\n #define OACC_UPDATE_CLAUSES \\\n   (OMP_CLAUSE_IF | OMP_CLAUSE_ASYNC | OMP_CLAUSE_HOST_SELF \\\n    | OMP_CLAUSE_OACC_DEVICE | OMP_CLAUSE_WAIT)\n@@ -1293,12 +1421,80 @@ match\n gfc_match_oacc_declare (void)\n {\n   gfc_omp_clauses *c;\n+  gfc_omp_namelist *n;\n+  gfc_namespace *ns = gfc_current_ns;\n+  gfc_oacc_declare *new_oc;\n+  bool module_var = false;\n+  locus where = gfc_current_locus;\n+\n   if (gfc_match_omp_clauses (&c, OACC_DECLARE_CLAUSES, false, false, true)\n       != MATCH_YES)\n     return MATCH_ERROR;\n \n-  new_st.ext.omp_clauses = c;\n-  new_st.ext.omp_clauses->loc = gfc_current_locus;\n+  for (n = c->lists[OMP_LIST_DEVICE_RESIDENT]; n != NULL; n = n->next)\n+    n->sym->attr.oacc_declare_device_resident = 1;\n+\n+  for (n = c->lists[OMP_LIST_LINK]; n != NULL; n = n->next)\n+    n->sym->attr.oacc_declare_link = 1;\n+\n+  for (n = c->lists[OMP_LIST_MAP]; n != NULL; n = n->next)\n+    {\n+      gfc_symbol *s = n->sym;\n+\n+      if (s->ns->proc_name && s->ns->proc_name->attr.proc == PROC_MODULE)\n+\t{\n+\t  if (n->u.map_op != OMP_MAP_FORCE_ALLOC\n+\t      && n->u.map_op != OMP_MAP_FORCE_TO)\n+\t    {\n+\t      gfc_error (\"Invalid clause in module with $!ACC DECLARE at %L\",\n+\t\t\t &where);\n+\t      return MATCH_ERROR;\n+\t    }\n+\n+\t  module_var = true;\n+\t}\n+\n+      if (s->attr.use_assoc)\n+\t{\n+\t  gfc_error (\"Variable is USE-associated with $!ACC DECLARE at %L\",\n+\t\t     &where);\n+\t  return MATCH_ERROR;\n+\t}\n+\n+      if ((s->attr.dimension || s->attr.codimension)\n+\t  && s->attr.dummy && s->as->type != AS_EXPLICIT)\n+\t{\n+\t  gfc_error (\"Assumed-size dummy array with $!ACC DECLARE at %L\",\n+\t\t     &where);\n+\t  return MATCH_ERROR;\n+\t}\n+\n+      switch (n->u.map_op)\n+\t{\n+\t  case OMP_MAP_FORCE_ALLOC:\n+\t    s->attr.oacc_declare_create = 1;\n+\t    break;\n+\n+\t  case OMP_MAP_FORCE_TO:\n+\t    s->attr.oacc_declare_copyin = 1;\n+\t    break;\n+\n+\t  case OMP_MAP_FORCE_DEVICEPTR:\n+\t    s->attr.oacc_declare_deviceptr = 1;\n+\t    break;\n+\n+\t  default:\n+\t    break;\n+\t}\n+    }\n+\n+  new_oc = gfc_get_oacc_declare ();\n+  new_oc->next = ns->oacc_declare;\n+  new_oc->module_var = module_var;\n+  new_oc->clauses = c;\n+  new_oc->loc = gfc_current_locus;\n+  ns->oacc_declare = new_oc;\n+\n   return MATCH_YES;\n }\n \n@@ -2870,7 +3066,7 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n   static const char *clause_names[]\n     = { \"PRIVATE\", \"FIRSTPRIVATE\", \"LASTPRIVATE\", \"COPYPRIVATE\", \"SHARED\",\n \t\"COPYIN\", \"UNIFORM\", \"ALIGNED\", \"LINEAR\", \"DEPEND\", \"MAP\",\n-\t\"TO\", \"FROM\", \"REDUCTION\", \"DEVICE_RESIDENT\", \"USE_DEVICE\",\n+\t\"TO\", \"FROM\", \"REDUCTION\", \"DEVICE_RESIDENT\", \"LINK\", \"USE_DEVICE\",\n \t\"CACHE\" };\n \n   if (omp_clauses == NULL)\n@@ -4613,44 +4809,64 @@ resolve_oacc_loop (gfc_code *code)\n   resolve_oacc_nested_loops (code, do_code, collapse, \"collapsed\");\n }\n \n-\n void\n gfc_resolve_oacc_declare (gfc_namespace *ns)\n {\n   int list;\n   gfc_omp_namelist *n;\n-  locus loc;\n+  gfc_oacc_declare *oc;\n \n-  if (ns->oacc_declare_clauses == NULL)\n+  if (ns->oacc_declare == NULL)\n     return;\n \n-  loc = ns->oacc_declare_clauses->loc;\n+  for (oc = ns->oacc_declare; oc; oc = oc->next)\n+    {\n+      for (list = 0; list <= OMP_LIST_NUM; list++)\n+\tfor (n = oc->clauses->lists[list]; n; n = n->next)\n+\t  {\n+\t    n->sym->mark = 0;\n+\t    if (n->sym->attr.flavor == FL_PARAMETER)\n+\t      {\n+\t\tgfc_error (\"PARAMETER object %qs is not allowed at %L\",\n+\t\t\t   n->sym->name, &oc->loc);\n+\t\tcontinue;\n+\t      }\n \n-  for (list = OMP_LIST_DEVICE_RESIDENT;\n-       list <= OMP_LIST_DEVICE_RESIDENT; list++)\n-    for (n = ns->oacc_declare_clauses->lists[list]; n; n = n->next)\n-      {\n-\tn->sym->mark = 0;\n-\tif (n->sym->attr.flavor == FL_PARAMETER)\n-\t  gfc_error (\"PARAMETER object %qs is not allowed at %L\", n->sym->name, &loc);\n-      }\n+\t    if (n->expr && n->expr->ref->type == REF_ARRAY)\n+\t      {\n+\t\tgfc_error (\"Array sections: %qs not allowed in\"\n+\t\t\t   \" $!ACC DECLARE at %L\", n->sym->name, &oc->loc);\n+\t\tcontinue;\n+\t      }\n+\t  }\n \n-  for (list = OMP_LIST_DEVICE_RESIDENT;\n-       list <= OMP_LIST_DEVICE_RESIDENT; list++)\n-    for (n = ns->oacc_declare_clauses->lists[list]; n; n = n->next)\n-      {\n-\tif (n->sym->mark)\n-\t  gfc_error (\"Symbol %qs present on multiple clauses at %L\",\n-\t\t     n->sym->name, &loc);\n-\telse\n-\t  n->sym->mark = 1;\n-      }\n+      for (n = oc->clauses->lists[OMP_LIST_DEVICE_RESIDENT]; n; n = n->next)\n+\tcheck_array_not_assumed (n->sym, oc->loc, \"DEVICE_RESIDENT\");\n+    }\n \n-  for (n = ns->oacc_declare_clauses->lists[OMP_LIST_DEVICE_RESIDENT]; n;\n-       n = n->next)\n-    check_array_not_assumed (n->sym, loc, \"DEVICE_RESIDENT\");\n-}\n+  for (oc = ns->oacc_declare; oc; oc = oc->next)\n+    {\n+      for (list = 0; list <= OMP_LIST_NUM; list++)\n+\tfor (n = oc->clauses->lists[list]; n; n = n->next)\n+\t  {\n+\t    if (n->sym->mark)\n+\t      {\n+\t\tgfc_error (\"Symbol %qs present on multiple clauses at %L\",\n+\t\t\t   n->sym->name, &oc->loc);\n+\t\tcontinue;\n+\t      }\n+\t    else\n+\t      n->sym->mark = 1;\n+\t  }\n+    }\n \n+  for (oc = ns->oacc_declare; oc; oc = oc->next)\n+    {\n+      for (list = 0; list <= OMP_LIST_NUM; list++)\n+\tfor (n = oc->clauses->lists[list]; n; n = n->next)\n+\t  n->sym->mark = 0;\n+    }\n+}\n \n void\n gfc_resolve_oacc_directive (gfc_code *code, gfc_namespace *ns ATTRIBUTE_UNUSED)"}, {"sha": "b2806214e1a638ffc1091aebe466abde9fce508e", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -1385,7 +1385,7 @@ next_statement (void)\n   case ST_EQUIVALENCE: case ST_NAMELIST: case ST_STATEMENT_FUNCTION: \\\n   case ST_TYPE: case ST_INTERFACE: case ST_OMP_THREADPRIVATE: \\\n   case ST_PROCEDURE: case ST_OMP_DECLARE_SIMD: case ST_OMP_DECLARE_REDUCTION: \\\n-  case ST_OMP_DECLARE_TARGET: case ST_OACC_ROUTINE\n+  case ST_OMP_DECLARE_TARGET: case ST_OACC_ROUTINE: case ST_OACC_DECLARE\n \n /* Block end statements.  Errors associated with interchanging these\n    are detected in gfc_match_end().  */\n@@ -2449,7 +2449,6 @@ verify_st_order (st_state *p, gfc_statement st, bool silent)\n     case ST_PUBLIC:\n     case ST_PRIVATE:\n     case ST_DERIVED_DECL:\n-    case ST_OACC_DECLARE:\n     case_decl:\n       if (p->state >= ORDER_EXEC)\n \tgoto order;\n@@ -3361,19 +3360,6 @@ parse_spec (gfc_statement st)\n       st = next_statement ();\n       goto loop;\n \n-    case ST_OACC_DECLARE:\n-      if (!verify_st_order(&ss, st, false))\n-\t{\n-\t  reject_statement ();\n-\t  st = next_statement ();\n-\t  goto loop;\n-\t}\n-      if (gfc_state_stack->ext.oacc_declare_clauses == NULL)\n-\tgfc_state_stack->ext.oacc_declare_clauses = new_st.ext.omp_clauses;\n-      accept_statement (st);\n-      st = next_statement ();\n-      goto loop;\n-\n     default:\n       break;\n     }\n@@ -5213,13 +5199,6 @@ parse_progunit (gfc_statement st)\n \n done:\n   gfc_current_ns->code = gfc_state_stack->head;\n-  if (gfc_state_stack->state == COMP_PROGRAM\n-      || gfc_state_stack->state == COMP_MODULE\n-      || gfc_state_stack->state == COMP_SUBROUTINE\n-      || gfc_state_stack->state == COMP_FUNCTION\n-      || gfc_state_stack->state == COMP_BLOCK)\n-    gfc_current_ns->oacc_declare_clauses\n-      = gfc_state_stack->ext.oacc_declare_clauses;\n }\n \n "}, {"sha": "94b2ada8ba7aef201ff11e9e4e485f3a4587b387", "filename": "gcc/fortran/parse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.h?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -48,7 +48,7 @@ typedef struct gfc_state_data\n   union\n   {\n     gfc_st_label *end_do_label;\n-    gfc_omp_clauses *oacc_declare_clauses;\n+    gfc_oacc_declare *oacc_declare_clauses;\n   }\n   ext;\n }"}, {"sha": "685e3f540079464f9cebbac2c355f82e512ac0ec", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -10695,6 +10695,7 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \tcase EXEC_OACC_ENTER_DATA:\n \tcase EXEC_OACC_EXIT_DATA:\n \tcase EXEC_OACC_ATOMIC:\n+\tcase EXEC_OACC_DECLARE:\n \t  gfc_resolve_oacc_directive (code, ns);\n \t  break;\n "}, {"sha": "d0a11aab793f9a84af00bd4867bfbe35f0e1a401", "filename": "gcc/fortran/st.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fst.c?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -185,6 +185,11 @@ gfc_free_statement (gfc_code *p)\n       gfc_free_forall_iterator (p->ext.forall_iterator);\n       break;\n \n+    case EXEC_OACC_DECLARE:\n+      if (p->ext.oacc_declare)\n+\tgfc_free_oacc_declare_clauses (p->ext.oacc_declare);\n+      break;\n+\n     case EXEC_OACC_PARALLEL_LOOP:\n     case EXEC_OACC_PARALLEL:\n     case EXEC_OACC_KERNELS_LOOP:"}, {"sha": "ff9aff93a144441f91c43bff959f6df4d9092e69", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -375,6 +375,11 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n     *contiguous = \"CONTIGUOUS\", *generic = \"GENERIC\";\n   static const char *threadprivate = \"THREADPRIVATE\";\n   static const char *omp_declare_target = \"OMP DECLARE TARGET\";\n+  static const char *oacc_declare_copyin = \"OACC DECLARE COPYIN\";\n+  static const char *oacc_declare_create = \"OACC DECLARE CREATE\";\n+  static const char *oacc_declare_deviceptr = \"OACC DECLARE DEVICEPTR\";\n+  static const char *oacc_declare_device_resident =\n+\t\t\t\t\t\t\"OACC DECLARE DEVICE_RESIDENT\";\n \n   const char *a1, *a2;\n   int standard;\n@@ -511,6 +516,10 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n   conf (in_equivalence, allocatable);\n   conf (in_equivalence, threadprivate);\n   conf (in_equivalence, omp_declare_target);\n+  conf (in_equivalence, oacc_declare_create);\n+  conf (in_equivalence, oacc_declare_copyin);\n+  conf (in_equivalence, oacc_declare_deviceptr);\n+  conf (in_equivalence, oacc_declare_device_resident);\n \n   conf (dummy, result);\n   conf (entry, result);\n@@ -560,6 +569,10 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n   conf (cray_pointee, in_equivalence);\n   conf (cray_pointee, threadprivate);\n   conf (cray_pointee, omp_declare_target);\n+  conf (cray_pointee, oacc_declare_create);\n+  conf (cray_pointee, oacc_declare_copyin);\n+  conf (cray_pointee, oacc_declare_deviceptr);\n+  conf (cray_pointee, oacc_declare_device_resident);\n \n   conf (data, dummy);\n   conf (data, function);\n@@ -614,6 +627,10 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n   conf (proc_pointer, abstract)\n \n   conf (entry, omp_declare_target)\n+  conf (entry, oacc_declare_create)\n+  conf (entry, oacc_declare_copyin)\n+  conf (entry, oacc_declare_deviceptr)\n+  conf (entry, oacc_declare_device_resident)\n \n   a1 = gfc_code2string (flavors, attr->flavor);\n \n@@ -651,6 +668,10 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n       conf2 (subroutine);\n       conf2 (threadprivate);\n       conf2 (omp_declare_target);\n+      conf2 (oacc_declare_create);\n+      conf2 (oacc_declare_copyin);\n+      conf2 (oacc_declare_deviceptr);\n+      conf2 (oacc_declare_device_resident);\n \n       if (attr->access == ACCESS_PUBLIC || attr->access == ACCESS_PRIVATE)\n \t{\n@@ -733,6 +754,10 @@ check_conflict (symbol_attribute *attr, const char *name, locus *where)\n       conf2 (threadprivate);\n       conf2 (result);\n       conf2 (omp_declare_target);\n+      conf2 (oacc_declare_create);\n+      conf2 (oacc_declare_copyin);\n+      conf2 (oacc_declare_deviceptr);\n+      conf2 (oacc_declare_device_resident);\n \n       if (attr->intent != INTENT_UNKNOWN)\n \t{\n@@ -1243,6 +1268,66 @@ gfc_add_omp_declare_target (symbol_attribute *attr, const char *name,\n }\n \n \n+bool\n+gfc_add_oacc_declare_create (symbol_attribute *attr, const char *name,\n+\t\t\t     locus *where)\n+{\n+  if (check_used (attr, name, where))\n+    return false;\n+\n+  if (attr->oacc_declare_create)\n+    return true;\n+\n+  attr->oacc_declare_create = 1;\n+  return check_conflict (attr, name, where);\n+}\n+\n+\n+bool\n+gfc_add_oacc_declare_copyin (symbol_attribute *attr, const char *name,\n+\t\t\t     locus *where)\n+{\n+  if (check_used (attr, name, where))\n+    return false;\n+\n+  if (attr->oacc_declare_copyin)\n+    return true;\n+\n+  attr->oacc_declare_copyin = 1;\n+  return check_conflict (attr, name, where);\n+}\n+\n+\n+bool\n+gfc_add_oacc_declare_deviceptr (symbol_attribute *attr, const char *name,\n+\t\t\t\tlocus *where)\n+{\n+  if (check_used (attr, name, where))\n+    return false;\n+\n+  if (attr->oacc_declare_deviceptr)\n+    return true;\n+\n+  attr->oacc_declare_deviceptr = 1;\n+  return check_conflict (attr, name, where);\n+}\n+\n+\n+bool\n+gfc_add_oacc_declare_device_resident (symbol_attribute *attr, const char *name,\n+\t\t\t\t      locus *where)\n+{\n+  if (check_used (attr, name, where))\n+    return false;\n+\n+  if (attr->oacc_declare_device_resident)\n+    return true;\n+\n+  attr->oacc_declare_device_resident = 1;\n+  return check_conflict (attr, name, where);\n+}\n+\n+\n bool\n gfc_add_target (symbol_attribute *attr, locus *where)\n {\n@@ -1820,6 +1905,18 @@ gfc_copy_attr (symbol_attribute *dest, symbol_attribute *src, locus *where)\n   if (src->omp_declare_target\n       && !gfc_add_omp_declare_target (dest, NULL, where))\n     goto fail;\n+  if (src->oacc_declare_create\n+      && !gfc_add_oacc_declare_create (dest, NULL, where))\n+    goto fail;\n+  if (src->oacc_declare_copyin\n+      && !gfc_add_oacc_declare_copyin (dest, NULL, where))\n+    goto fail;\n+  if (src->oacc_declare_deviceptr\n+      && !gfc_add_oacc_declare_deviceptr (dest, NULL, where))\n+    goto fail;\n+  if (src->oacc_declare_device_resident\n+      && !gfc_add_oacc_declare_device_resident (dest, NULL, where))\n+    goto fail;\n   if (src->target && !gfc_add_target (dest, where))\n     goto fail;\n   if (src->dummy && !gfc_add_dummy (dest, NULL, where))"}, {"sha": "39ff8e27f5bbc8f36381efdc781fec1757f7aa5e", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 144, "deletions": 6, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -5760,6 +5760,149 @@ is_ieee_module_used (gfc_namespace *ns)\n }\n \n \n+static gfc_omp_clauses *module_oacc_clauses;\n+\n+\n+static void\n+add_clause (gfc_symbol *sym, gfc_omp_map_op map_op)\n+{\n+  gfc_omp_namelist *n;\n+\n+  n = gfc_get_omp_namelist ();\n+  n->sym = sym;\n+  n->u.map_op = map_op;\n+\n+  if (!module_oacc_clauses)\n+    module_oacc_clauses = gfc_get_omp_clauses ();\n+\n+  if (module_oacc_clauses->lists[OMP_LIST_MAP])\n+    n->next = module_oacc_clauses->lists[OMP_LIST_MAP];\n+\n+  module_oacc_clauses->lists[OMP_LIST_MAP] = n;\n+}\n+\n+\n+static void\n+find_module_oacc_declare_clauses (gfc_symbol *sym)\n+{\n+  if (sym->attr.use_assoc)\n+    {\n+      gfc_omp_map_op map_op;\n+\n+      if (sym->attr.oacc_declare_create)\n+\tmap_op = OMP_MAP_FORCE_ALLOC;\n+\n+      if (sym->attr.oacc_declare_copyin)\n+\tmap_op = OMP_MAP_FORCE_TO;\n+\n+      if (sym->attr.oacc_declare_deviceptr)\n+\tmap_op = OMP_MAP_FORCE_DEVICEPTR;\n+\n+      if (sym->attr.oacc_declare_device_resident)\n+\tmap_op = OMP_MAP_DEVICE_RESIDENT;\n+\n+      if (sym->attr.oacc_declare_create\n+\t  || sym->attr.oacc_declare_copyin\n+\t  || sym->attr.oacc_declare_deviceptr\n+\t  || sym->attr.oacc_declare_device_resident)\n+\t{\n+\t  sym->attr.referenced = 1;\n+\t  add_clause (sym, map_op);\n+\t}\n+    }\n+}\n+\n+\n+void\n+finish_oacc_declare (gfc_namespace *ns, gfc_symbol *sym, bool block)\n+{\n+  gfc_code *code;\n+  gfc_oacc_declare *oc;\n+  locus where = gfc_current_locus;\n+  gfc_omp_clauses *omp_clauses = NULL;\n+  gfc_omp_namelist *n, *p;\n+\n+  gfc_traverse_ns (ns, find_module_oacc_declare_clauses);\n+\n+  if (module_oacc_clauses && sym->attr.flavor == FL_PROGRAM)\n+    {\n+      gfc_oacc_declare *new_oc;\n+\n+      new_oc = gfc_get_oacc_declare ();\n+      new_oc->next = ns->oacc_declare;\n+      new_oc->clauses = module_oacc_clauses;\n+\n+      ns->oacc_declare = new_oc;\n+      module_oacc_clauses = NULL;\n+    }\n+\n+  if (!ns->oacc_declare)\n+    return;\n+\n+  for (oc = ns->oacc_declare; oc; oc = oc->next)\n+    {\n+      if (oc->module_var)\n+\tcontinue;\n+\n+      if (block)\n+\tgfc_error (\"Sorry, $!ACC DECLARE at %L is not allowed \"\n+\t\t   \"in BLOCK construct\", &oc->loc);\n+\n+\n+      if (oc->clauses && oc->clauses->lists[OMP_LIST_MAP])\n+\t{\n+\t  if (omp_clauses == NULL)\n+\t    {\n+\t      omp_clauses = oc->clauses;\n+\t      continue;\n+\t    }\n+\n+\t  for (n = oc->clauses->lists[OMP_LIST_MAP]; n; p = n, n = n->next)\n+\t    ;\n+\n+\t  gcc_assert (p->next == NULL);\n+\n+\t  p->next = omp_clauses->lists[OMP_LIST_MAP];\n+\t  omp_clauses = oc->clauses;\n+\t}\n+    }\n+\n+  if (!omp_clauses)\n+    return;\n+\n+  for (n = omp_clauses->lists[OMP_LIST_MAP]; n; n = n->next)\n+    {\n+      switch (n->u.map_op)\n+\t{\n+\t  case OMP_MAP_DEVICE_RESIDENT:\n+\t    n->u.map_op = OMP_MAP_FORCE_ALLOC;\n+\t    break;\n+\n+\t  default:\n+\t    break;\n+\t}\n+    }\n+\n+  code = XCNEW (gfc_code);\n+  code->op = EXEC_OACC_DECLARE;\n+  code->loc = where;\n+\n+  code->ext.oacc_declare = gfc_get_oacc_declare ();\n+  code->ext.oacc_declare->clauses = omp_clauses;\n+\n+  code->block = XCNEW (gfc_code);\n+  code->block->op = EXEC_OACC_DECLARE;\n+  code->block->loc = where;\n+\n+  if (ns->code)\n+    code->block->next = ns->code;\n+\n+  ns->code = code;\n+\n+  return;\n+}\n+\n+\n /* Generate code for a function.  */\n \n void\n@@ -5896,12 +6039,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n   if ((gfc_option.rtcheck & GFC_RTCHECK_BOUNDS) && !sym->attr.is_bind_c)\n     add_argument_checking (&body, sym);\n \n-  /* Generate !$ACC DECLARE directive. */\n-  if (ns->oacc_declare_clauses)\n-    {\n-      tree tmp = gfc_trans_oacc_declare (&body, ns);\n-      gfc_add_expr_to_block (&body, tmp);\n-    }\n+  finish_oacc_declare (ns, sym, false);\n \n   tmp = gfc_trans_code (ns->code);\n   gfc_add_expr_to_block (&body, tmp);"}, {"sha": "261291c8ef59d5fa311382cde11c51f1eed87992", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -4421,13 +4421,24 @@ gfc_trans_omp_workshare (gfc_code *code, gfc_omp_clauses *clauses)\n }\n \n tree\n-gfc_trans_oacc_declare (stmtblock_t *block, gfc_namespace *ns)\n+gfc_trans_oacc_declare (gfc_code *code)\n {\n-  tree oacc_clauses;\n-  oacc_clauses = gfc_trans_omp_clauses (block, ns->oacc_declare_clauses,\n-\t\t\t\t\tns->oacc_declare_clauses->loc);\n-  return build1_loc (ns->oacc_declare_clauses->loc.lb->location,\n-\t\t     OACC_DECLARE, void_type_node, oacc_clauses);\n+  stmtblock_t block;\n+  tree stmt, oacc_clauses;\n+  enum tree_code construct_code;\n+\n+  construct_code = OACC_DATA;\n+\n+  gfc_start_block (&block);\n+\n+  oacc_clauses = gfc_trans_omp_clauses (&block, code->ext.oacc_declare->clauses,\n+\t\t\t\t\tcode->loc);\n+  stmt = gfc_trans_omp_code (code->block->next, true);\n+  stmt = build2_loc (input_location, construct_code, void_type_node, stmt,\n+\t\t     oacc_clauses);\n+  gfc_add_expr_to_block (&block, stmt);\n+\n+  return gfc_finish_block (&block);\n }\n \n tree\n@@ -4455,6 +4466,8 @@ gfc_trans_oacc_directive (gfc_code *code)\n       return gfc_trans_oacc_wait_directive (code);\n     case EXEC_OACC_ATOMIC:\n       return gfc_trans_omp_atomic (code);\n+    case EXEC_OACC_DECLARE:\n+      return gfc_trans_oacc_declare (code);\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "06591a31a3ea3cd1bd60800eaa242ce635ecd825", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -1575,12 +1575,7 @@ gfc_trans_block_construct (gfc_code* code)\n   exit_label = gfc_build_label_decl (NULL_TREE);\n   code->exit_label = exit_label;\n \n-  /* Generate !$ACC DECLARE directive. */\n-  if (ns->oacc_declare_clauses)\n-    {\n-      tree tmp = gfc_trans_oacc_declare (&body, ns);\n-      gfc_add_expr_to_block (&body, tmp);\n-    }\n+  finish_oacc_declare (ns, sym, true);\n \n   gfc_add_expr_to_block (&body, gfc_trans_code (ns->code));\n   gfc_add_expr_to_block (&body, build1_v (LABEL_EXPR, exit_label));"}, {"sha": "0ff93c490339ca27b268ea4113ce2f9ad3d33e6d", "filename": "gcc/fortran/trans-stmt.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Ftrans-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Ftrans-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.h?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -67,7 +67,7 @@ void gfc_trans_omp_declare_simd (gfc_namespace *);\n \n /* trans-openacc.c */\n tree gfc_trans_oacc_directive (gfc_code *);\n-tree gfc_trans_oacc_declare (stmtblock_t *block, gfc_namespace *);\n+tree gfc_trans_oacc_declare (gfc_namespace *);\n \n /* trans-io.c */\n tree gfc_trans_open (gfc_code *);"}, {"sha": "2a91c3521b6f12904d1bf82dc0b155856d3c6854", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -1917,6 +1917,7 @@ trans_code (gfc_code * code, tree cond)\n \tcase EXEC_OACC_ENTER_DATA:\n \tcase EXEC_OACC_EXIT_DATA:\n \tcase EXEC_OACC_ATOMIC:\n+\tcase EXEC_OACC_DECLARE:\n \t  res = gfc_trans_oacc_directive (code);\n \t  break;\n "}, {"sha": "f3e961879573f5d021d233e801fd781cc8bfdb5a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -1,3 +1,9 @@\n+2015-11-22  James Norris  <jnorris@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/declare-1.f95: Update test.\n+\t* gfortran.dg/goacc/declare-2.f95: New test.\n+\n 2015-11-22  Bilyan Borisov  <bilyan.borisov@arm.com>\n \n \t* gcc.target/aarch64/simd/vmulx_lane_f32_1.c: New."}, {"sha": "1ff8e6ab4dfc296c1987090e673da72f820c1d08", "filename": "gcc/testsuite/gfortran.dg/goacc/declare-1.f95", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdeclare-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdeclare-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdeclare-1.f95?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -1,5 +1,4 @@\n ! { dg-do compile } \n-! { dg-additional-options \"-fdump-tree-original\" } \n \n program test\n   implicit none\n@@ -11,9 +10,7 @@ real function foo(n)\n     integer, value :: n\n     BLOCK\n        integer i\n-       !$acc declare copy(i)\n+       !$acc declare copy(i) ! { dg-error \"is not allowed\" }\n     END BLOCK\n   end function foo\n end program test\n-! { dg-prune-output \"unimplemented\" }\n-! { dg-final { scan-tree-dump-times \"pragma acc declare map\\\\(force_tofrom:i\\\\)\" 2 \"original\" } } "}, {"sha": "aa1704f77d0bebca08dab33ae4690a6f4e3c286b", "filename": "gcc/testsuite/gfortran.dg/goacc/declare-2.f95", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdeclare-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdeclare-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fdeclare-2.f95?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -0,0 +1,71 @@\n+\n+module amod\n+\n+contains\n+\n+subroutine asubr (b)\n+  implicit none\n+  integer :: b(8)\n+\n+  !$acc declare copy (b) ! { dg-error \"Invalid clause in module\" }\n+  !$acc declare copyout (b) ! { dg-error \"Invalid clause in module\" }\n+  !$acc declare present (b) ! { dg-error \"Invalid clause in module\" }\n+  !$acc declare present_or_copy (b) ! { dg-error \"Invalid clause in module\" }\n+  !$acc declare present_or_copyin (b) ! { dg-error \"Invalid clause in module\" }\n+  !$acc declare present_or_copyout (b) ! { dg-error \"Invalid clause in module\" }\n+  !$acc declare present_or_create (b) ! { dg-error \"Invalid clause in module\" }\n+  !$acc declare deviceptr (b) ! { dg-error \"Invalid clause in module\" }\n+  !$acc declare create (b) copyin (b) ! { dg-error \"present on multiple clauses\" }\n+\n+end subroutine\n+\n+end module\n+\n+module bmod\n+\n+  implicit none\n+  integer :: a, b, c, d, e, f, g, h, i\n+  common /data1/ a, b, c\n+  common /data2/ d, e, f\n+  common /data3/ g, h, i\n+  !$acc declare link (a) ! { dg-error \"element of a COMMON\" }\n+  !$acc declare link (/data1/)\n+  !$acc declare link (a, b, c) ! { dg-error \"element of a COMMON\" }\n+  !$acc declare link (/foo/) ! { dg-error \"not found\" }\n+  !$acc declare device_resident (/data2/)\n+  !$acc declare device_resident (/data3/) ! { dg-error \"present on multiple clauses\" }\n+  !$acc declare device_resident (g, h, i)\n+\n+end module\n+\n+subroutine bsubr (foo)\n+  implicit none\n+\n+  integer, dimension (:) :: foo\n+\n+  !$acc declare copy (foo) ! { dg-error \"Assumed-size dummy array\" }\n+  !$acc declare copy (foo(1:2)) ! { dg-error \"Assumed-size dummy array\" }\n+\n+end subroutine bsubr\n+\n+subroutine multiline\n+  integer :: b(8)\n+\n+  !$acc declare copyin (b) ! { dg-error \"present on multiple clauses\" }\n+  !$acc declare copyin (b)\n+\n+end subroutine multiline\n+\n+subroutine subarray\n+  integer :: c(8)\n+\n+  !$acc declare copy (c(1:2)) ! { dg-error \"Array sections: 'c' not allowed\" }\n+\n+end subroutine subarray\n+\n+program test\n+  integer :: a(8)\n+\n+  !$acc declare create (a) copyin (a) ! { dg-error \"present on multiple clauses\" }\n+\n+end program"}, {"sha": "a083f35f7626072b6c48147926303cabe5c55b97", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -1,3 +1,12 @@\n+2015-11-22  James Norris  <jnorris@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/declare-1.f90: New test.\n+\t* testsuite/libgomp.oacc-fortran/declare-2.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/declare-3.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/declare-4.f90: Likewise.\n+\t* testsuite/libgomp.oacc-fortran/declare-5.f90: Likewise.\n+\n 2015-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/68221"}, {"sha": "f717d1b762685fffb8f8d943ba576eda98bb7139", "filename": "libgomp/testsuite/libgomp.oacc-fortran/declare-1.f90", "status": "added", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-1.f90?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -0,0 +1,248 @@\n+! { dg-do run  { target openacc_nvidia_accel_selected } }\n+\n+module vars\n+  implicit none\n+  integer z\n+  !$acc declare create (z)\n+end module vars\n+\n+subroutine subr6 (a, d)\n+  implicit none\n+  integer, parameter :: N = 8\n+  integer :: i\n+  integer :: a(N)\n+  !$acc declare deviceptr (a)\n+  integer :: d(N)\n+\n+  i = 0\n+\n+  !$acc parallel copy (d)\n+    do i = 1, N\n+      d(i) = a(i) + a(i)\n+    end do\n+  !$acc end parallel\n+\n+end subroutine\n+\n+subroutine subr5 (a, b, c, d)\n+  implicit none\n+  integer, parameter :: N = 8\n+  integer :: i\n+  integer :: a(N)\n+  !$acc declare present_or_copyin (a)\n+  integer :: b(N)\n+  !$acc declare present_or_create (b)\n+  integer :: c(N)\n+  !$acc declare present_or_copyout (c)\n+  integer :: d(N)\n+  !$acc declare present_or_copy (d)\n+\n+  i = 0\n+\n+  !$acc parallel\n+    do i = 1, N\n+      b(i) = a(i)\n+      c(i) = b(i)\n+      d(i) = d(i) + b(i)\n+    end do\n+  !$acc end parallel\n+\n+end subroutine\n+\n+subroutine subr4 (a, b)\n+  implicit none\n+  integer, parameter :: N = 8\n+  integer :: i\n+  integer :: a(N)\n+  !$acc declare present (a)\n+  integer :: b(N)\n+  !$acc declare copyout (b)\n+\n+  i = 0\n+\n+  !$acc parallel\n+  do i = 1, N\n+    b(i) = a(i)\n+  end do\n+  !$acc end parallel\n+\n+end subroutine\n+\n+subroutine subr3 (a, c)\n+  implicit none\n+  integer, parameter :: N = 8\n+  integer :: i\n+  integer :: a(N)\n+  !$acc declare present (a)\n+  integer :: c(N)\n+  !$acc declare copyin (c)\n+\n+  i = 0\n+\n+  !$acc parallel\n+  do i = 1, N\n+    a(i) = c(i)\n+    c(i) = 0\n+  end do\n+  !$acc end parallel\n+\n+end subroutine\n+\n+subroutine subr2 (a, b, c)\n+  implicit none\n+  integer, parameter :: N = 8\n+  integer :: i\n+  integer :: a(N)\n+  !$acc declare present (a)\n+  integer :: b(N)\n+  !$acc declare create (b)\n+  integer :: c(N)\n+  !$acc declare copy (c)\n+\n+  i = 0\n+\n+  !$acc parallel\n+  do i = 1, N\n+    b(i) = a(i)\n+    c(i) = b(i) + c(i) + 1\n+  end do\n+  !$acc end parallel\n+\n+end subroutine\n+\n+subroutine subr1 (a)\n+  implicit none\n+  integer, parameter :: N = 8\n+  integer :: i\n+  integer :: a(N)\n+  !$acc declare present (a)\n+\n+  i = 0\n+\n+  !$acc parallel\n+  do i = 1, N\n+    a(i) = a(i) + 1\n+  end do\n+  !$acc end parallel\n+\n+end subroutine\n+\n+subroutine test (a, e)\n+  use openacc\n+  implicit none\n+  logical :: e\n+  integer, parameter :: N = 8\n+  integer :: a(N)\n+\n+  if (acc_is_present (a) .neqv. e) call abort\n+\n+end subroutine\n+\n+subroutine subr0 (a, b, c, d)\n+  implicit none\n+  integer, parameter :: N = 8\n+  integer :: a(N)\n+  !$acc declare copy (a)\n+  integer :: b(N)\n+  integer :: c(N)\n+  integer :: d(N)\n+  integer :: i\n+\n+  call test (a, .true.)\n+  call test (b, .false.)\n+  call test (c, .false.)\n+\n+  call subr1 (a)\n+\n+  call test (a, .true.)\n+  call test (b, .false.)\n+  call test (c, .false.)\n+\n+  call subr2 (a, b, c)\n+\n+  call test (a, .true.)\n+  call test (b, .false.)\n+  call test (c, .false.)\n+\n+  do i = 1, N\n+    if (c(i) .ne. 8) call abort\n+  end do\n+\n+  call subr3 (a, c)\n+\n+  call test (a, .true.)\n+  call test (b, .false.)\n+  call test (c, .false.)\n+\n+  do i = 1, N\n+    if (a(i) .ne. 2) call abort\n+    if (c(i) .ne. 8) call abort\n+  end do\n+\n+  call subr4 (a, b)\n+\n+  call test (a, .true.)\n+  call test (b, .false.)\n+  call test (c, .false.)\n+\n+  do i = 1, N\n+    if (b(i) .ne. 8) call abort\n+  end do\n+\n+  call subr5 (a, b, c, d)\n+\n+  call test (a, .true.)\n+  call test (b, .false.)\n+  call test (c, .false.)\n+  call test (d, .false.)\n+\n+  do i = 1, N\n+    if (c(i) .ne. 8) call abort\n+    if (d(i) .ne. 13) call abort\n+  end do\n+\n+  call subr6 (a, d)\n+\n+  call test (a, .true.)\n+  call test (d, .false.)\n+\n+  do i = 1, N\n+    if (d(i) .ne. 16) call abort\n+  end do\n+\n+end subroutine\n+\n+program main\n+  use vars\n+  use openacc\n+  implicit none\n+  integer, parameter :: N = 8\n+  integer :: a(N)\n+  integer :: b(N)\n+  integer :: c(N)\n+  integer :: d(N)\n+  integer :: i\n+\n+  a(:) = 2\n+  b(:) = 3\n+  c(:) = 4\n+  d(:) = 5\n+\n+  if (acc_is_present (z) .neqv. .true.) call abort\n+\n+  call subr0 (a, b, c, d)\n+\n+  call test (a, .false.)\n+  call test (b, .false.)\n+  call test (c, .false.)\n+  call test (d, .false.)\n+\n+  do i = 1, N\n+    if (a(i) .ne. 8) call abort\n+    if (b(i) .ne. 8) call abort\n+    if (c(i) .ne. 8) call abort\n+    if (d(i) .ne. 16) call abort\n+  end do\n+\n+\n+end program"}, {"sha": "2aa79079d91170bdf22112516c250de61ed70be6", "filename": "libgomp/testsuite/libgomp.oacc-fortran/declare-2.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-2.f90?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run  { target openacc_nvidia_accel_selected } }\n+\n+module globalvars\n+  implicit none\n+  integer a\n+  !$acc declare create (a)\n+end module globalvars\n+\n+program test\n+  use globalvars\n+  use openacc\n+  implicit none\n+\n+  if (acc_is_present (a) .neqv. .true.) call abort\n+\n+end program test"}, {"sha": "3a6b420f1c7a2f1881ddbe5ae26b1f93c00f4ba9", "filename": "libgomp/testsuite/libgomp.oacc-fortran/declare-3.f90", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-3.f90?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -0,0 +1,68 @@\n+! { dg-do run  { target openacc_nvidia_accel_selected } }\n+\n+module globalvars\n+  implicit none\n+  real b\n+  !$acc declare link (b)\n+end module globalvars\n+\n+program test\n+  use openacc\n+  use globalvars\n+  implicit none\n+\n+  real a\n+  real c\n+  !$acc declare link (c)\n+\n+  if (acc_is_present (b) .neqv. .false.) call abort\n+  if (acc_is_present (c) .neqv. .false.) call abort\n+\n+  a = 0.0\n+  b = 1.0\n+\n+  !$acc parallel copy (a) copyin (b)\n+    b = b + 4.0\n+    a = b\n+  !$acc end parallel\n+\n+  if (a .ne. 5.0) call abort\n+\n+  if (acc_is_present (b) .neqv. .false.) call abort\n+\n+  a = 0.0\n+\n+  !$acc parallel copy (a) create (b)\n+    b = 4.0\n+    a = b\n+  !$acc end parallel\n+\n+  if (a .ne. 4.0) call abort\n+\n+  if (acc_is_present (b) .neqv. .false.) call abort\n+\n+  a = 0.0\n+\n+  !$acc parallel copy (a) copy (b)\n+    b = 4.0\n+    a = b\n+  !$acc end parallel\n+\n+  if (a .ne. 4.0) call abort\n+  if (b .ne. 4.0) call abort\n+\n+  if (acc_is_present (b) .neqv. .false.) call abort\n+\n+  a = 0.0\n+\n+  !$acc parallel copy (a) copy (b) copy (c)\n+    b = 4.0\n+    c = b\n+    a = c\n+  !$acc end parallel\n+\n+  if (a .ne. 4.0) call abort\n+\n+  if (acc_is_present (b) .neqv. .false.) call abort\n+\n+end program test"}, {"sha": "226264e38c11d2dabb3342732070efdff04d86ee", "filename": "libgomp/testsuite/libgomp.oacc-fortran/declare-4.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-4.f90?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do run  { target openacc_nvidia_accel_selected } }\n+\n+module vars\n+  implicit none\n+  real b\n+ !$acc declare create (b)\n+end module vars\n+\n+program test\n+  use vars\n+  use openacc\n+  implicit none\n+  real a\n+\n+  if (acc_is_present (b) .neqv. .true.) call abort\n+\n+  a = 2.0\n+\n+  !$acc parallel copy (a)\n+    b = a\n+    a = 1.0\n+    a = a + b\n+   !$acc end parallel\n+\n+  if (acc_is_present (b) .neqv. .true.) call abort\n+\n+  if (a .ne. 3.0) call abort\n+\n+end program test"}, {"sha": "bcd9c9c72b53fb0c082b9f40703ef464dfecf8af", "filename": "libgomp/testsuite/libgomp.oacc-fortran/declare-5.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7a8b4b7ad10f7c001593605051fcd174540a76/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7a8b4b7ad10f7c001593605051fcd174540a76/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fdeclare-5.f90?ref=dc7a8b4b7ad10f7c001593605051fcd174540a76", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do run  { target openacc_nvidia_accel_selected } }\n+\n+module vars\n+  implicit none\n+  real b\n+ !$acc declare device_resident (b)\n+end module vars\n+\n+program test\n+  use vars\n+  use openacc\n+  implicit none\n+  real a\n+\n+  if (acc_is_present (b) .neqv. .true.) call abort\n+\n+  a = 2.0\n+\n+  !$acc parallel copy (a)\n+    b = a\n+    a = 1.0\n+    a = a + b\n+   !$acc end parallel\n+\n+  if (acc_is_present (b) .neqv. .true.) call abort\n+\n+  if (a .ne. 3.0) call abort\n+\n+end program test"}]}