{"sha": "cc914f8cbf08651475d06920039616636173b75c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M5MTRmOGNiZjA4NjUxNDc1ZDA2OTIwMDM5NjE2NjM2MTczYjc1Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-08-24T22:17:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-08-24T22:17:54Z"}, "message": "New tests.\n\nFrom-SVN: r35959", "tree": {"sha": "92fb8653cba8ef26648311fd07e35f75e6ed18cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92fb8653cba8ef26648311fd07e35f75e6ed18cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc914f8cbf08651475d06920039616636173b75c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc914f8cbf08651475d06920039616636173b75c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc914f8cbf08651475d06920039616636173b75c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc914f8cbf08651475d06920039616636173b75c/comments", "author": null, "committer": null, "parents": [{"sha": "0551c32d8bd642833f411c7cea2b870b3d87a70d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0551c32d8bd642833f411c7cea2b870b3d87a70d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0551c32d8bd642833f411c7cea2b870b3d87a70d"}], "stats": {"total": 222, "additions": 222, "deletions": 0}, "files": [{"sha": "9c51afed5e0d5c6a9066c8fafe4eb2af65b11865", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc914f8cbf08651475d06920039616636173b75c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc914f8cbf08651475d06920039616636173b75c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc914f8cbf08651475d06920039616636173b75c", "patch": "@@ -1,3 +1,9 @@\n+2000-08-24  Richard Henderson  <rth@cygnus.com>\n+\n+\t* gcc.dg/ia64-sync-1.c: New test.\n+\t* gcc.dg/ia64-sync-2.c: New test.\n+\t* gcc.dg/ia64-asm-1.c: New test.\n+\n 2000-08-24  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.dg/c99-scanf-2.c: Remove test for scanf \"Z\" length."}, {"sha": "48b24d31a7a4f25fa4b6fb2fc921348d911464d3", "filename": "gcc/testsuite/gcc.dg/ia64-asm-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc914f8cbf08651475d06920039616636173b75c/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-asm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc914f8cbf08651475d06920039616636173b75c/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-asm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-asm-1.c?ref=cc914f8cbf08651475d06920039616636173b75c", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target ia64-*-* } } */\n+/* { dg-options } */\n+\n+/* Test that \"=S\" properly avoids the post-increment on the memory address.  */\n+\n+static void foo(int *x)\n+{\n+  long i;\n+  for (i = 0; i < 100; ++i)\n+    __asm__(\"st4 %0 = r0\" : \"=S\"(x[i]));\n+}\n+\n+int main()\n+{\n+  int array[100];\n+  long i;\n+\n+  for (i = 0; i < 100; ++i)\n+    array[i] = -1;\n+\n+  foo(array);\n+\n+  for (i = 0; i < 100; ++i)\n+    if (array[i])\n+      abort ();\n+  return 0;\n+}"}, {"sha": "d2a9b0bb6e8b1d63d34f00e830fe7f3178c77299", "filename": "gcc/testsuite/gcc.dg/ia64-sync-1.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc914f8cbf08651475d06920039616636173b75c/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-sync-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc914f8cbf08651475d06920039616636173b75c/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-sync-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-sync-1.c?ref=cc914f8cbf08651475d06920039616636173b75c", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do run { target ia64-*-* } } */\n+/* { dg-options } */\n+\n+/* Test basic functionality of the intrinsics.  The operations should\n+   not be optimized away if no one checks the return values.  */\n+\n+#include <ia64intrin.h>\n+\n+static int AI[12];\n+static int init_noret_si[12] = { 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0 };\n+static int test_noret_si[12] = { 1, 1, 1, 0, 1, 4, 22, -12, 7, 8, 9, 7 };\n+\n+static void\n+do_noret_si (void)\n+{\n+  __sync_val_compare_and_swap(AI+0, 0, 1);\n+  __sync_bool_compare_and_swap(AI+1, 0, 1);\n+  __sync_lock_test_and_set(AI+2, 1);\n+  __sync_lock_release(AI+3);\n+\n+  __sync_fetch_and_add(AI+4, 1);\n+  __sync_fetch_and_add(AI+5, 4);\n+  __sync_fetch_and_add(AI+6, 22);\n+  __sync_fetch_and_sub(AI+7, 12);\n+  __sync_fetch_and_and(AI+8, 7);\n+  __sync_fetch_and_or(AI+9, 8);\n+  __sync_fetch_and_xor(AI+10, 9);\n+  __sync_fetch_and_nand(AI+11, 7);\n+}\n+\n+static long AL[12];\n+static long init_noret_di[12] = { 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0 };\n+static long test_noret_di[12] = { 1, 1, 1, 0, 1, 4, 22, -12, 7, 8, 9, 7 };\n+\n+static void\n+do_noret_di (void)\n+{\n+  __sync_val_compare_and_swap(AL+0, 0, 1);\n+  __sync_bool_compare_and_swap(AL+1, 0, 1);\n+  __sync_lock_test_and_set(AL+2, 1);\n+  __sync_lock_release(AL+3);\n+\n+  __sync_fetch_and_add(AL+4, 1);\n+  __sync_fetch_and_add(AL+5, 4);\n+  __sync_fetch_and_add(AL+6, 22);\n+  __sync_fetch_and_sub(AL+7, 12);\n+  __sync_fetch_and_and(AL+8, 7);\n+  __sync_fetch_and_or(AL+9, 8);\n+  __sync_fetch_and_xor(AL+10, 9);\n+  __sync_fetch_and_nand(AL+11, 7);\n+}\n+\n+int main()\n+{\n+  memcpy(AI, init_noret_si, sizeof(init_noret_si));\n+  memcpy(AL, init_noret_di, sizeof(init_noret_di));\n+\n+  do_noret_si ();\n+  do_noret_di ();\n+\n+  if (memcmp (AI, test_noret_si, sizeof(test_noret_si)))\n+    abort ();\n+  if (memcmp (AL, test_noret_di, sizeof(test_noret_di)))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "8d745b0153583272eff5f455ae77249ef817bd09", "filename": "gcc/testsuite/gcc.dg/ia64-sync-2.c", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc914f8cbf08651475d06920039616636173b75c/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-sync-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc914f8cbf08651475d06920039616636173b75c/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-sync-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fia64-sync-2.c?ref=cc914f8cbf08651475d06920039616636173b75c", "patch": "@@ -0,0 +1,122 @@\n+/* { dg-do run { target ia64-*-* } } */\n+/* { dg-options } */\n+\n+/* Test basic functionality of the intrinsics.  */\n+\n+#include <ia64intrin.h>\n+\n+static int AI[18];\n+static int init_si[18] = { 0,0,0,1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0 };\n+static int test_si[18] = { 1,1,1,1,1,4,22,-12,7,8,9,7,1,-12,7,8,9,7 };\n+\n+static void\n+do_si (void)\n+{\n+  if (__sync_val_compare_and_swap(AI+0, 0, 1) != 0)\n+    abort ();\n+  if (__sync_val_compare_and_swap(AI+0, 0, 1) != 1)\n+    abort ();\n+  if (__sync_bool_compare_and_swap(AI+1, 0, 1) != 1)\n+    abort ();\n+  if (__sync_bool_compare_and_swap(AI+1, 0, 1) != 0)\n+    abort ();\n+\n+  if (__sync_lock_test_and_set(AI+2, 1) != 0)\n+    abort ();\n+\n+  if (__sync_fetch_and_add(AI+4, 1) != 0)\n+    abort ();\n+  if (__sync_fetch_and_add(AI+5, 4) != 0)\n+    abort ();\n+  if (__sync_fetch_and_add(AI+6, 22) != 0)\n+    abort ();\n+  if (__sync_fetch_and_sub(AI+7, 12) != 0)\n+    abort ();\n+  if (__sync_fetch_and_and(AI+8, 7) != -1)\n+    abort ();\n+  if (__sync_fetch_and_or(AI+9, 8) != 0)\n+    abort ();\n+  if (__sync_fetch_and_xor(AI+10, 9) != 0)\n+    abort ();\n+  if (__sync_fetch_and_nand(AI+11, 7) != 0)\n+    abort ();\n+\n+  if (__sync_add_and_fetch(AI+12, 1) != 1)\n+    abort ();\n+  if (__sync_sub_and_fetch(AI+13, 12) != -12)\n+    abort ();\n+  if (__sync_and_and_fetch(AI+14, 7) != 7)\n+    abort ();\n+  if (__sync_or_and_fetch(AI+15, 8) != 8)\n+    abort ();\n+  if (__sync_xor_and_fetch(AI+16, 9) != 9)\n+    abort ();\n+  if (__sync_nand_and_fetch(AI+17, 7) != 7)\n+    abort ();\n+}\n+\n+static long AL[18];\n+static long init_di[18] = { 0,0,0,1,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0 };\n+static long test_di[18] = { 1,1,1,1,1,4,22,-12,7,8,9,7,1,-12,7,8,9,7 };\n+\n+static void\n+do_di (void)\n+{\n+  if (__sync_val_compare_and_swap(AL+0, 0, 1) != 0)\n+    abort ();\n+  if (__sync_val_compare_and_swap(AL+0, 0, 1) != 1)\n+    abort ();\n+  if (__sync_bool_compare_and_swap(AL+1, 0, 1) != 1)\n+    abort ();\n+  if (__sync_bool_compare_and_swap(AL+1, 0, 1) != 0)\n+    abort ();\n+\n+  if (__sync_lock_test_and_set(AL+2, 1) != 0)\n+    abort ();\n+\n+  if (__sync_fetch_and_add(AL+4, 1) != 0)\n+    abort ();\n+  if (__sync_fetch_and_add(AL+5, 4) != 0)\n+    abort ();\n+  if (__sync_fetch_and_add(AL+6, 22) != 0)\n+    abort ();\n+  if (__sync_fetch_and_sub(AL+7, 12) != 0)\n+    abort ();\n+  if (__sync_fetch_and_and(AL+8, 7) != -1)\n+    abort ();\n+  if (__sync_fetch_and_or(AL+9, 8) != 0)\n+    abort ();\n+  if (__sync_fetch_and_xor(AL+10, 9) != 0)\n+    abort ();\n+  if (__sync_fetch_and_nand(AL+11, 7) != 0)\n+    abort ();\n+\n+  if (__sync_add_and_fetch(AL+12, 1) != 1)\n+    abort ();\n+  if (__sync_sub_and_fetch(AL+13, 12) != -12)\n+    abort ();\n+  if (__sync_and_and_fetch(AL+14, 7) != 7)\n+    abort ();\n+  if (__sync_or_and_fetch(AL+15, 8) != 8)\n+    abort ();\n+  if (__sync_xor_and_fetch(AL+16, 9) != 9)\n+    abort ();\n+  if (__sync_nand_and_fetch(AL+17, 7) != 7)\n+    abort ();\n+}\n+\n+int main()\n+{\n+  memcpy(AI, init_si, sizeof(init_si));\n+  memcpy(AL, init_di, sizeof(init_di));\n+\n+  do_si ();\n+  do_di ();\n+\n+  if (memcmp (AI, test_si, sizeof(test_si)))\n+    abort ();\n+  if (memcmp (AL, test_di, sizeof(test_di)))\n+    abort ();\n+\n+  return 0;\n+}"}]}