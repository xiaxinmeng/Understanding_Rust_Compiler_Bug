{"sha": "3dff7ed031b733e5472f5d2bc39a3c846c395cbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmZjdlZDAzMWI3MzNlNTQ3MmY1ZDJiYzM5YTNjODQ2YzM5NWNiYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-19T04:46:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-19T04:46:25Z"}, "message": "crtbegin.asm (dtor_ptr): Make gp-relative.\n\n        * config/ia64/crtbegin.asm (dtor_ptr): Make gp-relative.\n        (__do_global_dtors_aux): Update to match.\n        (__JCR_LIST__, __do_jv_register_classes): New.\n        (.init): Call it.\n        * config/ia64/crtend.asm (__JCR_END__): New.\n        (__do_global_ctors_aux): Use a GPREL64I reloc to __CTOR_END__\n        instead of an indirect LTOFF22 reloc.\n\nFrom-SVN: r45023", "tree": {"sha": "cd88847f7a5719bd529eb801dc84602e7729b9f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd88847f7a5719bd529eb801dc84602e7729b9f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dff7ed031b733e5472f5d2bc39a3c846c395cbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dff7ed031b733e5472f5d2bc39a3c846c395cbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dff7ed031b733e5472f5d2bc39a3c846c395cbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dff7ed031b733e5472f5d2bc39a3c846c395cbc/comments", "author": null, "committer": null, "parents": [{"sha": "213f974a3aefc61c3370525fc379eb54a386167d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213f974a3aefc61c3370525fc379eb54a386167d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/213f974a3aefc61c3370525fc379eb54a386167d"}], "stats": {"total": 111, "additions": 100, "deletions": 11}, "files": [{"sha": "23a47a9a26295c3fd7dfd5e2545772dfbaeb88cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dff7ed031b733e5472f5d2bc39a3c846c395cbc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dff7ed031b733e5472f5d2bc39a3c846c395cbc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dff7ed031b733e5472f5d2bc39a3c846c395cbc", "patch": "@@ -5,6 +5,14 @@\n \t(frame_dummy, __frame_dummy): Do java registration here ...\n \t(__do_global_ctors_aux): ... not here.\n \n+\t* config/ia64/crtbegin.asm (dtor_ptr): Make gp-relative.\n+\t(__do_global_dtors_aux): Update to match.\n+\t(__JCR_LIST__, __do_jv_register_classes): New.\n+\t(.init): Call it.\n+\t* config/ia64/crtend.asm (__JCR_END__): New.\n+\t(__do_global_ctors_aux): Use a GPREL64I reloc to __CTOR_END__\n+\tinstead of an indirect LTOFF22 reloc.\n+\n 2001-08-18  Richard Henderson  <rth@redhat.com>\n \n \t* flow.c (mark_regs_live_at_end): Use regs_invalidated_by_call."}, {"sha": "5a3667c821bab757e8c2016fb80a9a1462e25f53", "filename": "gcc/config/ia64/crtbegin.asm", "status": "modified", "additions": 80, "deletions": 7, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dff7ed031b733e5472f5d2bc39a3c846c395cbc/gcc%2Fconfig%2Fia64%2Fcrtbegin.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dff7ed031b733e5472f5d2bc39a3c846c395cbc/gcc%2Fconfig%2Fia64%2Fcrtbegin.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fcrtbegin.asm?ref=3dff7ed031b733e5472f5d2bc39a3c846c395cbc", "patch": "@@ -26,11 +26,15 @@ __CTOR_LIST__:\n __DTOR_LIST__:\n \tdata8\t-1\n \n+.section .jcr,\"aw\",\"progbits\"\n+\t.align\t8\n+__JCR_LIST__:\n+\n .section .sdata\n \t.type dtor_ptr#,@object\n \t.size dtor_ptr#,8\n dtor_ptr:\n-\tdata8\t__DTOR_LIST__# + 8\n+\tdata8\t@gprel(__DTOR_LIST__# + 8)\n \n \t/* A handle for __cxa_finalize to manage c++ local destructors.  */\n \t.global __dso_handle#\n@@ -77,6 +81,24 @@ __dso_handle:\n \t  ;;\n \t}\n \n+/* Likewise for _init.  */\n+\n+.section .init,\"ax\",\"progbits\"\n+\t{ .mlx\n+\t  movl r2 = @pcrel(__do_jv_register_classes# - 16)\n+\t}\n+\t{ .mii\n+\t  mov r3 = ip\n+\t  ;;\n+\t  add r2 = r2, r3\n+\t  ;;\n+\t}\n+\t{ .mib\n+\t  mov b6 = r2\n+\t  br.call.sptk.many b0 = b6\n+\t  ;;\n+\t}\n+\n .section .text\n \t.align\t16\n \t.proc\t__do_global_dtors_aux#\n@@ -150,24 +172,75 @@ __do_global_dtors_aux:\n \t{ .mmi\n \t  ld8 r15 = [loc0]\n \t  ;;\n-\t  ld8 r16 = [r15], 8\n+\t  add r16 = r15, gp\n+\t  adds r15 = 8, r15\n \t  ;;\n \t}\n-\t{ .mfb\n-\t  cmp.ne p6, p0 = r0, r16\n-(p6)\t  br.cond.sptk.few 0b\n-\t}\n-\t{ .mii\n+\t{ .mmi\n+\t  ld8 r16 = [r16]\n \t  mov gp = loc2\n \t  mov b0 = loc1\n+\t  ;;\n+\t}\n+\t{ .mib\n+\t  cmp.ne p6, p0 = r0, r16\n \t  mov ar.pfs = loc3\n+(p6)\t  br.cond.sptk.few 0b\n \t}\n \t{ .bbb\n \t  br.ret.sptk.many b0\n \t  ;;\n \t}\n \t.endp\t__do_global_dtors_aux#\n \n+\t.align\t16\n+\t.proc\t__do_jv_register_classes#\n+__do_jv_register_classes:\n+\t{ .mlx\n+\t  alloc loc2 = ar.pfs, 0, 3, 1, 0\n+\t  movl out0 = @gprel(__JCR_LIST__)\n+\t  ;;\n+\t}\n+\t{ .mmi\n+\t  addl r14 = @ltoff(@fptr(_Jv_RegisterClasses)), gp\n+\t  add out0 = out0, gp\n+\t  ;;\n+\t}\n+\t{ .mmi\n+\t  ld8 r14 = [r14]\n+\t  ld8 r15 = [out0]\n+\t  cmp.ne p6, p0 = r0, r0\n+\t  ;;\n+\t}\n+\t{ .mib\n+\t  cmp.eq.or p6, p0 = r0, r14\n+\t  cmp.eq.or p6, p0 = r0, r15\n+(p6)\t  br.ret.sptk.many b0\n+\t}\n+\t{ .mii\n+\t  ld8 r15 = [r14], 8\n+\t  mov loc0 = b0\n+\t  mov loc1 = gp\n+\t  ;;\n+\t}\n+\t{ .mib\n+\t  ld8 gp = [r14]\n+\t  mov b6 = r15\n+\t  br.call.sptk.many b0 = b6\n+\t  ;;\n+\t}\n+\t{ .mii\n+\t  mov gp = loc1\n+\t  mov b0 = loc0\n+\t  mov ar.pfs = loc2\n+\t}\n+\t{ .bbb\n+\t  br.ret.sptk.many b0\n+\t  ;;\n+\t}\n+\t.endp\t__do_jv_register_classes#\n+\n #ifdef SHARED\n .weak __cxa_finalize#\n #endif\n+.weak _Jv_RegisterClasses"}, {"sha": "e5d109ae5b33e2e62cee50b2e3ead2dc9ac993e3", "filename": "gcc/config/ia64/crtend.asm", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dff7ed031b733e5472f5d2bc39a3c846c395cbc/gcc%2Fconfig%2Fia64%2Fcrtend.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dff7ed031b733e5472f5d2bc39a3c846c395cbc/gcc%2Fconfig%2Fia64%2Fcrtend.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fcrtend.asm?ref=3dff7ed031b733e5472f5d2bc39a3c846c395cbc", "patch": "@@ -26,6 +26,11 @@ __CTOR_END__:\n __DTOR_END__:\n \tdata8\t0\n \n+.section .jcr,\"aw\",\"progbits\"\n+\t.align 8\n+__JCR_END__:\n+\tdata8\t0\n+\n /*\n  * Fragment of the ELF _init routine that invokes our dtor cleanup.\n  *\n@@ -63,15 +68,18 @@ __do_global_ctors_aux:\n \t\tfor (loc0 = __CTOR_END__-1; *p != -1; --p)\n \t\t  (*p) ();\n \t*/\n-\t{ .mii\n+\t{ .mlx\n \t  alloc loc4 = ar.pfs, 0, 5, 0, 0\n-\t  addl loc0 = @ltoff(__CTOR_END__# - 8), gp\n-\t  mov loc1 = b0\n+\t  movl loc0 = @gprel(__CTOR_END__# - 8)\n \t  ;;\n \t}\n \t{ .mmi\n-\t  ld8 loc0 = [loc0]\n+\t  add loc0 = loc0, gp\n+\t  mov loc1 = b0\n \t  ;;\n+\t}\n+\t{\n+\t  .mmi\n \t  ld8 loc3 = [loc0], -8\n \t  mov loc2 = gp\n \t  ;;"}]}