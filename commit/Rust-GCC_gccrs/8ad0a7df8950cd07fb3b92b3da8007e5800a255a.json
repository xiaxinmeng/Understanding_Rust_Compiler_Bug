{"sha": "8ad0a7df8950cd07fb3b92b3da8007e5800a255a", "node_id": "C_kwDOANBUbNoAKDhhZDBhN2RmODk1MGNkMDdmYjNiOTJiM2RhODAwN2U1ODAwYTI1NWE", "commit": {"author": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2022-12-13T08:45:10Z"}, "committer": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2022-12-13T08:51:10Z"}, "message": "rs6000: enable cbranchcc4\n\nThis patch enables \"have_cbranchcc4\" on rs6000 by defining a\n\"cbranchcc4\" expander. \"have_cbrnachcc4\" is a flag in ifcvt.cc to\nindicate if branching by CC bits is valid or not. With this flag\nenabled, some branches can be optimized to conditional moves.\n\n2022-12-07  Haochen Gui <guihaoc@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000.md (cbranchcc4): New expander.\n\ngcc/testsuite\n\t* gcc.target/powerpc/cbranchcc4-1.c: New.\n\t* gcc.target/powerpc/cbranchcc4-2.c: New.", "tree": {"sha": "509e66890c3cfe8bec6a61f79c979e5e08f2f691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/509e66890c3cfe8bec6a61f79c979e5e08f2f691"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ad0a7df8950cd07fb3b92b3da8007e5800a255a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad0a7df8950cd07fb3b92b3da8007e5800a255a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ad0a7df8950cd07fb3b92b3da8007e5800a255a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ad0a7df8950cd07fb3b92b3da8007e5800a255a/comments", "author": null, "committer": null, "parents": [{"sha": "99cce60d0b8f3c3a77be8e1bb716f3e2fee37d46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99cce60d0b8f3c3a77be8e1bb716f3e2fee37d46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99cce60d0b8f3c3a77be8e1bb716f3e2fee37d46"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "6011f5bf76adc9fea859bf094482249e7e6843c3", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0a7df8950cd07fb3b92b3da8007e5800a255a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0a7df8950cd07fb3b92b3da8007e5800a255a/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=8ad0a7df8950cd07fb3b92b3da8007e5800a255a", "patch": "@@ -11913,6 +11913,16 @@\n   DONE;\n })\n \n+(define_expand \"cbranchcc4\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 0 \"branch_comparison_operator\"\n+\t\t\t[(match_operand 1 \"cc_reg_operand\")\n+\t\t\t (match_operand 2 \"zero_constant\")])\n+\t\t      (label_ref (match_operand 3))\n+\t\t      (pc)))]\n+  \"\"\n+  \"\")\n+\n (define_expand \"cstore<mode>4_signed\"\n   [(use (match_operator 1 \"signed_comparison_operator\"\n          [(match_operand:P 2 \"gpc_reg_operand\")"}, {"sha": "6c2cd130b6dabbcab0a77f31ae372f4cf8cdb9fc", "filename": "gcc/testsuite/gcc.target/powerpc/cbranchcc4-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0a7df8950cd07fb3b92b3da8007e5800a255a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcbranchcc4-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0a7df8950cd07fb3b92b3da8007e5800a255a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcbranchcc4-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcbranchcc4-1.c?ref=8ad0a7df8950cd07fb3b92b3da8007e5800a255a", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+/* Verify there is no ICE with cbranchcc4 enabled.  */\n+\n+int foo (double d)\n+{\n+  if (d == 0.0)\n+    return 0;\n+\n+  d = ((d) >= 0 ? (d) : -(d));\n+\n+  if (d < 1.0)\n+    return 1;\n+}"}, {"sha": "528ba1a878d27466863836348f2e54077cdfdfcc", "filename": "gcc/testsuite/gcc.target/powerpc/cbranchcc4-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ad0a7df8950cd07fb3b92b3da8007e5800a255a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcbranchcc4-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ad0a7df8950cd07fb3b92b3da8007e5800a255a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcbranchcc4-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcbranchcc4-2.c?ref=8ad0a7df8950cd07fb3b92b3da8007e5800a255a", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-rtl-ce1\" } */\n+/* { dg-final { scan-rtl-dump \"noce_try_store_flag_constants\" \"ce1\" } } */\n+\n+/* The inner branch should be detected by ifcvt then be converted to a setcc\n+   with a plus by noce_try_store_flag_constants.  */\n+\n+int test (unsigned int a, unsigned int b)\n+{\n+    return (a < b ? 0 : (a > b ? 2 : 1));\n+}"}]}