{"sha": "30cd1c5d04c18770e8688d7199c20c2d528df1cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBjZDFjNWQwNGMxODc3MGU4Njg4ZDcxOTljMjBjMmQ1MjhkZjFjZA==", "commit": {"author": {"name": "Artjoms Sinkarovs", "email": "artyom.shinkaroff@gmail.com", "date": "2010-10-22T20:03:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-10-22T20:03:33Z"}, "message": "c-typeck.c (build_array_ref): Handle subscripting of vectors.\n\n2010-10-22  Artjoms Sinkarovs <artyom.shinakroff@gmail.com>\n\tAndrew Pinski <pinskia@gmail.com>\n\n\t* c-typeck.c (build_array_ref): Handle subscripting of vectors.\n\t* doc/extend.texi: New paragraph\n\n\tc-family/\n\t* c-common.h (c_common_mark_addressable_vec): Declare.\n\t* c-common.c (c_common_mark_addressable_vec): New function.\n\n\ttestsuite/\n\t* gcc.c-torture/execute/vector-subscript-1.c: Likewise.\n\t* gcc.c-torture/execute/vector-subscript-2.c: Likewise.\n\t* gcc.c-torture/execute/vector-subscript-3.c: New testcase.\n\t* gcc.dg/vector-subscript-1.c: Likewise.\n\t* gcc.dg/vector-subscript-2.c: Likewise.\n\t* gcc.dg/vector-subscript-3.c: New testcase.\n\t* gcc.dg/array-8.c: Adjust.\n\nCo-Authored-By: Andrew Pinski <pinskia@gmail.com>\n\nFrom-SVN: r165861", "tree": {"sha": "172cd8381465be00018205c3573f8252e5a8a669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/172cd8381465be00018205c3573f8252e5a8a669"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30cd1c5d04c18770e8688d7199c20c2d528df1cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30cd1c5d04c18770e8688d7199c20c2d528df1cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30cd1c5d04c18770e8688d7199c20c2d528df1cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30cd1c5d04c18770e8688d7199c20c2d528df1cd/comments", "author": {"login": "ashinkarov", "id": 892232, "node_id": "MDQ6VXNlcjg5MjIzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/892232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashinkarov", "html_url": "https://github.com/ashinkarov", "followers_url": "https://api.github.com/users/ashinkarov/followers", "following_url": "https://api.github.com/users/ashinkarov/following{/other_user}", "gists_url": "https://api.github.com/users/ashinkarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashinkarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashinkarov/subscriptions", "organizations_url": "https://api.github.com/users/ashinkarov/orgs", "repos_url": "https://api.github.com/users/ashinkarov/repos", "events_url": "https://api.github.com/users/ashinkarov/events{/privacy}", "received_events_url": "https://api.github.com/users/ashinkarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c958bdaed6ab98447c6aa3bf6104086cd5954ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c958bdaed6ab98447c6aa3bf6104086cd5954ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c958bdaed6ab98447c6aa3bf6104086cd5954ce"}], "stats": {"total": 279, "additions": 276, "deletions": 3}, "files": [{"sha": "313ad111080cf88f7c4fbca6beab94bd73ffd9e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30cd1c5d04c18770e8688d7199c20c2d528df1cd", "patch": "@@ -1,3 +1,9 @@\n+2010-10-22  Artjoms Sinkarovs <artyom.shinakroff@gmail.com>\n+\tAndrew Pinski <pinskia@gmail.com>\n+\n+\t* c-typeck.c (build_array_ref): Handle subscripting of vectors.\n+\t* doc/extend.texi: New paragraph\n+\n 2010-10-22  Paul Koning  <ni1d@arrl.net>\n \n \t* config.pdp11/pdp11.h (DBX_DEBUGGING_INFO): Define."}, {"sha": "93664f35337a4bf8d22c5eebf13cb6ea29728c92", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=30cd1c5d04c18770e8688d7199c20c2d528df1cd", "patch": "@@ -1,3 +1,9 @@\n+2010-10-22  Artjoms Sinkarovs <artyom.shinakroff@gmail.com>\n+\tAndrew Pinski <pinskia@gmail.com>\n+\n+\t* c-common.h (c_common_mark_addressable_vec): Declare.\n+\t* c-common.c (c_common_mark_addressable_vec): New function.\n+\n 2010-10-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* c-common.h (objc_set_method_type): Removed."}, {"sha": "2f205adf3ecfc00cb757e97d85d202799e060349", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=30cd1c5d04c18770e8688d7199c20c2d528df1cd", "patch": "@@ -8703,6 +8703,18 @@ complete_array_type (tree *ptype, tree initial_value, bool do_default)\n   return failure;\n }\n \n+/* Like c_mark_addressable but don't check register qualifier.  */\n+void \n+c_common_mark_addressable_vec (tree t)\n+{   \n+  while (handled_component_p (t))\n+    t = TREE_OPERAND (t, 0);\n+  if (TREE_CODE (t) != VAR_DECL && TREE_CODE (t) != PARM_DECL)\n+    return;\n+  TREE_ADDRESSABLE (t) = 1;\n+}\n+\n+\n \f\n /* Used to help initialize the builtin-types.def table.  When a type of\n    the correct size doesn't exist, use error_mark_node instead of NULL."}, {"sha": "f882a8f87f81196ffe1174ee340dcbb61ff6e3b8", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=30cd1c5d04c18770e8688d7199c20c2d528df1cd", "patch": "@@ -931,6 +931,8 @@ extern int complete_array_type (tree *, tree, bool);\n \n extern tree builtin_type_for_size (int, bool);\n \n+extern void c_common_mark_addressable_vec (tree);\n+\n extern void warn_array_subscript_with_type_char (tree);\n extern void warn_about_parentheses (enum tree_code,\n \t\t\t\t    enum tree_code, tree,"}, {"sha": "1476b6d4ffc6d970c7a99a27eb49d8aa69fe22c6", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=30cd1c5d04c18770e8688d7199c20c2d528df1cd", "patch": "@@ -2305,6 +2305,9 @@ build_indirect_ref (location_t loc, tree ptr, ref_operator errstring)\n    arrays that are not lvalues (for example, members of structures returned\n    by functions).\n \n+   For vector types, allow vector[i] but not i[vector], and create\n+   *(((type*)&vectortype) + i) for the expression.\n+\n    LOC is the location to use for the returned expression.  */\n \n tree\n@@ -2317,13 +2320,17 @@ build_array_ref (location_t loc, tree array, tree index)\n     return error_mark_node;\n \n   if (TREE_CODE (TREE_TYPE (array)) != ARRAY_TYPE\n-      && TREE_CODE (TREE_TYPE (array)) != POINTER_TYPE)\n+      && TREE_CODE (TREE_TYPE (array)) != POINTER_TYPE\n+      /* Allow vector[index] but not index[vector].  */\n+      && TREE_CODE (TREE_TYPE (array)) != VECTOR_TYPE)\n     {\n       tree temp;\n       if (TREE_CODE (TREE_TYPE (index)) != ARRAY_TYPE\n \t  && TREE_CODE (TREE_TYPE (index)) != POINTER_TYPE)\n \t{\n-\t  error_at (loc, \"subscripted value is neither array nor pointer\");\n+          error_at (loc, \n+            \"subscripted value is neither array nor pointer nor vector\");\n+\n \t  return error_mark_node;\n \t}\n       temp = array;\n@@ -2353,6 +2360,27 @@ build_array_ref (location_t loc, tree array, tree index)\n   index = default_conversion (index);\n \n   gcc_assert (TREE_CODE (TREE_TYPE (index)) == INTEGER_TYPE);\n+  \n+  /* For vector[index], convert the vector to a \n+     pointer of the underlying type.  */\n+  if (TREE_CODE (TREE_TYPE (array)) == VECTOR_TYPE)\n+    {\n+      tree type = TREE_TYPE (array);\n+      tree type1;\n+\n+      if (TREE_CODE (index) == INTEGER_CST)\n+        if (!host_integerp (index, 1) \n+            || ((unsigned HOST_WIDE_INT) tree_low_cst (index, 1) \n+               >= TYPE_VECTOR_SUBPARTS (TREE_TYPE (array))))\n+          warning_at (loc, OPT_Warray_bounds, \"index value is out of bound\");\n+     \n+      c_common_mark_addressable_vec (array);\n+      type = build_qualified_type (TREE_TYPE (type), TYPE_QUALS (type));\n+      type = build_pointer_type (type);\n+      type1 = build_pointer_type (TREE_TYPE (array));\n+      array = build1 (ADDR_EXPR, type1, array);\n+      array = convert (type, array);\n+    }\n \n   if (TREE_CODE (TREE_TYPE (array)) == ARRAY_TYPE)\n     {"}, {"sha": "0828ff1d2de4010475429b45f4bc1636ece28a8d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=30cd1c5d04c18770e8688d7199c20c2d528df1cd", "patch": "@@ -6310,6 +6310,12 @@ minus or complement operators on a vector type is a vector whose\n elements are the negative or complemented values of the corresponding\n elements in the operand.\n \n+In C vectors can be subscripted as if the vector were an array with\n+the same number of elements and base type.  Out of bound accesses\n+invoke undefined behavior at runtime.  Warnings for out of bound\n+accesses for vector subscription can be enabled with\n+@option{-Warray-bounds}.\n+\n You can declare variables and use them in function calls and returns, as\n well as in assignments and some casts.  You can specify a vector type as\n a return type for a function.  Vector types can also be used as function"}, {"sha": "41020f8bbbf1efc7b0c28f4e4d1630475b0d6c43", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30cd1c5d04c18770e8688d7199c20c2d528df1cd", "patch": "@@ -1,3 +1,14 @@\n+2010-10-22  Artjoms Sinkarovs <artyom.shinakroff@gmail.com>\n+\tAndrew Pinski <pinskia@gmail.com>\n+\n+\t* gcc.c-torture/execute/vector-subscript-1.c: Likewise.\n+\t* gcc.c-torture/execute/vector-subscript-2.c: Likewise.\n+\t* gcc.c-torture/execute/vector-subscript-3.c: New testcase.\n+\t* gcc.dg/vector-subscript-1.c: Likewise.\n+\t* gcc.dg/vector-subscript-2.c: Likewise.\n+\t* gcc.dg/vector-subscript-3.c: New testcase.\n+\t* gcc.dg/array-8.c: Adjust.\n+\n 2010-10-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/46137"}, {"sha": "03647fd5074d61c97f56b92c9bb396dcfd6d878a", "filename": "gcc/testsuite/gcc.c-torture/execute/vector-subscript-1.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-subscript-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-subscript-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-subscript-1.c?ref=30cd1c5d04c18770e8688d7199c20c2d528df1cd", "patch": "@@ -0,0 +1,60 @@\n+/* dg-do run */\n+#define vector __attribute__((vector_size(sizeof(int)*4) ))\n+\n+/* Check to make sure that we extract and insert the vector at the same\n+   location for vector subscripting and that vectors layout are the same\n+   as arrays. */\n+\n+struct TV4\n+{\n+    vector int v;\n+};\n+\n+typedef struct TV4 MYV4;\n+static inline int *f(MYV4 *a, int i)\n+{\n+  return &(a->v[i]);\n+}\n+\n+static inline MYV4 myfunc2( int x, int y, int z, int w )\n+{\n+    MYV4 temp;\n+    *f(&temp, 0 ) = x;\n+    *f(&temp, 1 ) = y;\n+    *f(&temp, 2 ) = z;\n+    *f(&temp, 3 ) = w;\n+    return temp;\n+}\n+\n+MYV4 val3;\n+\n+__attribute__((noinline)) void modify (void) \n+{\n+    val3 = myfunc2( 1, 2, 3, 4 );\n+}\n+\n+int main( int argc, char* argv[] )\n+{\n+  int a[4];\n+  int i;\n+  \n+  modify();\n+  \n+  if (*f(&val3, 0 ) != 1)\n+    __builtin_abort ();\n+  if (*f(&val3, 1 ) != 2)\n+    __builtin_abort ();\n+  if (*f(&val3, 2 ) != 3)\n+    __builtin_abort ();\n+  if (*f(&val3, 3 ) != 4)\n+    __builtin_abort ();\n+    \n+  __builtin_memcpy(a, &val3, 16);\n+  for(i = 0; i < 4; i++)\n+    if (a[i] != i+1)\n+      __builtin_abort ();\n+  \n+  \n+  return 0;\n+}\n+"}, {"sha": "d0e5b889c66f582aca6f1ff52b7a74d8b2fb1b8d", "filename": "gcc/testsuite/gcc.c-torture/execute/vector-subscript-2.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-subscript-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-subscript-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-subscript-2.c?ref=30cd1c5d04c18770e8688d7199c20c2d528df1cd", "patch": "@@ -0,0 +1,67 @@\n+#define vector __attribute__((vector_size(sizeof(int)*4) ))\n+\n+/* Check to make sure that we extract and insert the vector at the same\n+   location for vector subscripting (with constant indexes) and\n+   that vectors layout are the same as arrays. */\n+\n+struct TV4\n+{\n+    vector int v;\n+};\n+\n+typedef struct TV4 MYV4;\n+\n+static inline MYV4 myfunc2( int x, int y, int z, int w )\n+{\n+    MYV4 temp;\n+    temp.v[0] = x;\n+    temp.v[1] = y;\n+    temp.v[2] = z;\n+    temp.v[3] = w;\n+    return temp;\n+}\n+MYV4 val3;\n+__attribute__((noinline)) void modify (void) \n+{\n+    val3 = myfunc2( 1, 2, 3, 4 );\n+}\n+int main( int argc, char* argv[] )\n+{\n+  int a[4];\n+  int i;\n+  \n+  /* Set up the vector.  */\n+  modify();\n+  \n+  /* Check the vector via the global variable.  */\n+  if (val3.v[0] != 1)\n+    __builtin_abort ();\n+  if (val3.v[1] != 2)\n+    __builtin_abort ();\n+  if (val3.v[2] != 3)\n+    __builtin_abort ();\n+  if (val3.v[3] != 4)\n+    __builtin_abort ();\n+    \n+  vector int a1 = val3.v;\n+  \n+   /* Check the vector via a local variable.  */\n+  if (a1[0] != 1)\n+    __builtin_abort ();\n+  if (a1[1] != 2)\n+    __builtin_abort ();\n+  if (a1[2] != 3)\n+    __builtin_abort ();\n+  if (a1[3] != 4)\n+    __builtin_abort ();\n+    \n+  __builtin_memcpy(a, &val3, sizeof(a));  \n+   /* Check the vector via copying it to an array.  */\n+  for(i = 0; i < 4; i++)\n+    if (a[i] != i+1)\n+      __builtin_abort ();\n+  \n+  \n+  return 0;\n+}\n+"}, {"sha": "97d531c17339b14da44d2237968ed1aa8792dbbc", "filename": "gcc/testsuite/gcc.c-torture/execute/vector-subscript-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-subscript-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-subscript-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-subscript-3.c?ref=30cd1c5d04c18770e8688d7199c20c2d528df1cd", "patch": "@@ -0,0 +1,26 @@\n+/* dg-do run */\n+#define vector __attribute__((vector_size(16) ))\n+\n+/* Check whether register declaration of vector type still \n+   allow us to subscript this type.  */\n+\n+typedef vector short myvec_t;\n+\n+struct vec_s {\n+    vector short member;\n+};\n+\n+\n+int main () {\n+  register short vector v0 = {1,2,3,4,5,6,7};\n+  register myvec_t v1 = {1,2,3,4,5,6,7};\n+  register struct vec_s v2;\n+    \n+  v2.member = v1;\n+\n+  short r = v0[0] + v1[1] + v2.member[2];\n+  if (r != 6)\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "d469a80eaf24b788014df7495d20a77740f56396", "filename": "gcc/testsuite/gcc.dg/array-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2Fgcc.dg%2Farray-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2Fgcc.dg%2Farray-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Farray-8.c?ref=30cd1c5d04c18770e8688d7199c20c2d528df1cd", "patch": "@@ -35,7 +35,7 @@ g (void)\n   f().c[0];\n   0[f().c];\n   /* Various invalid cases.  */\n-  c[c]; /* { dg-error \"subscripted value is neither array nor pointer\" } */\n+  c[c]; /* { dg-error \"subscripted value is neither array nor pointer nor vector\" } */\n   p[1.0]; /* { dg-error \"array subscript is not an integer\" } */\n   1.0[a]; /* { dg-error \"array subscript is not an integer\" } */\n   fp[0]; /* { dg-error \"subscripted value is pointer to function\" } */"}, {"sha": "7cc50af999be74f8c6460980020fcf3b1c424d84", "filename": "gcc/testsuite/gcc.dg/vector-subscript-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-subscript-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-subscript-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-subscript-1.c?ref=30cd1c5d04c18770e8688d7199c20c2d528df1cd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-w\" } */\n+\n+#define vector __attribute__((vector_size(16) ))\n+/* Check that vector[index] works and index[vector] is rejected.  */\n+\n+float vf(vector float a)\n+{\n+  return 0[a]; /* { dg-error \"subscripted value is neither array nor pointer nor vector\" } */\n+}\n+\n+\n+float fv(vector float a)\n+{\n+  return a[0];\n+}\n+"}, {"sha": "3a8d522ad42bf0cc5d824dc56ad4738dc1dd4ccd", "filename": "gcc/testsuite/gcc.dg/vector-subscript-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-subscript-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-subscript-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-subscript-2.c?ref=30cd1c5d04c18770e8688d7199c20c2d528df1cd", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+/* Check that subscripting of vectors work with register storage class decls.  */\n+\n+#define vector __attribute__((vector_size(16) ))\n+\n+\n+float vf(int i)\n+{\n+  register vector float a;\n+  return a[0];\n+}\n+"}, {"sha": "55ed2b370258329d5538e9bb356ebe49fdfa5146", "filename": "gcc/testsuite/gcc.dg/vector-subscript-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-subscript-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cd1c5d04c18770e8688d7199c20c2d528df1cd/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-subscript-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvector-subscript-3.c?ref=30cd1c5d04c18770e8688d7199c20c2d528df1cd", "patch": "@@ -0,0 +1,19 @@\n+/* Check the case when index is out of bound */\n+/* { dg-do compile } */\n+/* { dg-options \"-Warray-bounds\" } */\n+\n+#define vector __attribute__((vector_size(16) ))\n+\n+\n+int test0(void)\n+{\n+  vector int a;\n+  return a[10]; /* { dg-warning \"index value is out of bound\" } */\n+}\n+\n+int test1(void)\n+{\n+  vector int a;\n+  return a[-1]; /* { dg-warning \"index value is out of bound\" } */\n+}\n+"}]}