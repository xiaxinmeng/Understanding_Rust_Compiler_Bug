{"sha": "332316cdbc646ca9deb29db4badf4cdd06ca3f5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMyMzE2Y2RiYzY0NmNhOWRlYjI5ZGI0YmFkZjRjZGQwNmNhM2Y1YQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.co.uk", "date": "2000-10-31T10:04:44Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2000-10-31T10:04:44Z"}, "message": "MMX/SSE bugfixes\n\nFrom-SVN: r37154", "tree": {"sha": "caae1d2501f51d4be6b1811bcb447bfd56d84661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caae1d2501f51d4be6b1811bcb447bfd56d84661"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/332316cdbc646ca9deb29db4badf4cdd06ca3f5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332316cdbc646ca9deb29db4badf4cdd06ca3f5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/332316cdbc646ca9deb29db4badf4cdd06ca3f5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332316cdbc646ca9deb29db4badf4cdd06ca3f5a/comments", "author": null, "committer": null, "parents": [{"sha": "aac31e403b7e3942658f100f09ae3ba44543b652", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac31e403b7e3942658f100f09ae3ba44543b652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac31e403b7e3942658f100f09ae3ba44543b652"}], "stats": {"total": 59, "additions": 39, "deletions": 20}, "files": [{"sha": "39ddefc3e801789c8ac1e3f983bdb7f71b1a9f27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332316cdbc646ca9deb29db4badf4cdd06ca3f5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332316cdbc646ca9deb29db4badf4cdd06ca3f5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=332316cdbc646ca9deb29db4badf4cdd06ca3f5a", "patch": "@@ -1,3 +1,22 @@\n+2000-10-31  Bernd Schmidt  <bernds@redhat.co.uk>\n+\n+        * config/i386/i386.c (ix86_init_builtins): Correct return type\n+\tbuilding v4hi_ftype_v4hi_int_int tree node.\n+\t(ix86_expand_builtin): Use correct operand numbers 0 and 1.\n+\tCopy operand 0 into a Pmode register, don't generate a MEM rtx.\n+\n+\t* config/i386/i386.md (sse_movntdi): Use mmx register constraint\n+\tfor operand 1.\n+\t(mmx__uavgv8qi3): Correct insn mnemonic.\n+\t(mmx_psadbw): Correct insn mnemonic.  Use V8QI mode for operands 1 and 2.\n+\t(mmx_punpckhwd): Correct insn mnemonic.\n+\t(mmx_punpckhdq): Likewise.\n+\t(mmx_punpcklwd): Likewise.\n+\t(mmx_punpckldq): Likewise.\n+\t(prefetch): Use immediare_operand and 'n' constraint for operand 1.\n+\tRenumber case labels to match the _mm_prefetch constants defined in\n+\txmmintrin.h.\n+\n 2000-10-30  Neil Booth  <neilb@earthling.net>\n \n \t* cppfiles.c (stack_include_file): Check for stacked contexts"}, {"sha": "078eea0408d15da65a0d094b954ca0fb0ed75ef8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332316cdbc646ca9deb29db4badf4cdd06ca3f5a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332316cdbc646ca9deb29db4badf4cdd06ca3f5a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=332316cdbc646ca9deb29db4badf4cdd06ca3f5a", "patch": "@@ -7354,7 +7354,7 @@ ix86_init_builtins ()\n \t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n \t\t\t\t\t\t endlink)));\n   tree v4hi_ftype_v4hi_int_int\n-    = build_function_type (integer_type_node,\n+    = build_function_type (V4HI_type_node,\n \t\t\t   tree_cons (NULL_TREE, V4HI_type_node,\n \t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n \t\t\t\t\t\t tree_cons (NULL_TREE,\n@@ -8155,17 +8155,17 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n       arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n       op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n       op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n-      mode0 = insn_data[icode].operand[1].mode;\n-      mode1 = insn_data[icode].operand[2].mode;\n+      mode0 = insn_data[icode].operand[0].mode;\n+      mode1 = insn_data[icode].operand[1].mode;\n \n-      op0 = gen_rtx_MEM (mode0, copy_to_mode_reg (Pmode, op0));\n-      if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n+      if (! (*insn_data[icode].operand[1].predicate) (op1, mode1))\n \t{\n \t  /* @@@ better error message */\n \t  error (\"selector must be an immediate\");\n \t  return const0_rtx;\n \t}\n \n+      op0 = copy_to_mode_reg (Pmode, op0);\n       pat = GEN_FCN (icode) (op0, op1);\n       if (! pat)\n \treturn 0;"}, {"sha": "1aea39e1d84353d7e663403273eb4a5287ee4eb4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332316cdbc646ca9deb29db4badf4cdd06ca3f5a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332316cdbc646ca9deb29db4badf4cdd06ca3f5a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=332316cdbc646ca9deb29db4badf4cdd06ca3f5a", "patch": "@@ -11999,7 +11999,7 @@\n \n (define_insn \"sse_movntdi\"\n   [(set (match_operand:DI 0 \"memory_operand\" \"=m\")\n-\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"x\")] 34))]\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"y\")] 34))]\n   \"TARGET_SSE\"\n   \"movntq\\\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")])\n@@ -12773,7 +12773,7 @@\n \t\t\t\t\t       (const_int 1)])))\n \t (const_int 1)))]\n   \"TARGET_SSE\"\n-  \"pavgbn\\\\t{%2, %0|%0, %2}\"\n+  \"pavgb\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"mmx_uavgv4hi3\"\n@@ -12788,15 +12788,15 @@\n \t\t\t\t\t       (const_int 1)])))\n \t (const_int 1)))]\n   \"TARGET_SSE\"\n-  \"pavgwn\\\\t{%2, %0|%0, %2}\"\n+  \"pavgw\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n (define_insn \"mmx_psadbw\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=y\")\n-        (abs:V8QI (minus:V8QI (match_operand:DI 1 \"register_operand\" \"0\")\n-\t\t\t      (match_operand:DI 2 \"nonimmediate_operand\" \"ym\"))))]\n+        (abs:V8QI (minus:V8QI (match_operand:V8QI 1 \"register_operand\" \"0\")\n+\t\t\t      (match_operand:V8QI 2 \"nonimmediate_operand\" \"ym\"))))]\n   \"TARGET_SSE\"\n-  \"padbw\\\\t{%2, %0|%0, %2}\"\n+  \"psadbw\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sse\")])\n \n \n@@ -13059,7 +13059,7 @@\n \t\t\t\t     (const_int 1)]))\n \t (const_int 5)))]\n   \"TARGET_MMX\"\n-  \"punpckhbw\\\\t{%2, %0|%0, %2}\"\n+  \"punpckhwd\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmx\")])\n \n (define_insn \"mmx_punpckhdq\"\n@@ -13073,7 +13073,7 @@\n \t\t\t\t     (const_int 0)]))\n \t (const_int 1)))]\n   \"TARGET_MMX\"\n-  \"punpckhbw\\\\t{%2, %0|%0, %2}\"\n+  \"punpckhdq\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmx\")])\n \n (define_insn \"mmx_punpcklbw\"\n@@ -13117,7 +13117,7 @@\n \t\t\t\t     (const_int 3)]))\n \t (const_int 5)))]\n   \"TARGET_MMX\"\n-  \"punpcklbw\\\\t{%2, %0|%0, %2}\"\n+  \"punpcklwd\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmx\")])\n \n (define_insn \"mmx_punpckldq\"\n@@ -13131,7 +13131,7 @@\n \t\t\t\t     (const_int 1)]))\n \t (const_int 1)))]\n   \"TARGET_MMX\"\n-  \"punpcklbw\\\\t{%2, %0|%0, %2}\"\n+  \"punpckldq\\\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"mmx\")])\n \n \n@@ -13193,20 +13193,20 @@\n \n (define_insn \"prefetch\"\n   [(unspec [(match_operand:SI 0 \"address_operand\" \"p\")\n-\t    (match_operand:SI 1 \"address_operand\" \"p\")] 35)]\n+\t    (match_operand:SI 1 \"immediate_operand\" \"n\")] 35)]\n   \"TARGET_SSE\"\n   \"*\n {\n   switch (INTVAL (operands[1]))\n     {\n     case 0:\n-      return \\\"prefetcht0\\\\t%0\\\";\n+      return \\\"prefetchnta\\\\t%a0\\\";\n     case 1:\n-      return \\\"prefetcht1\\\\t%0\\\";\n+      return \\\"prefetcht0\\\\t%a0\\\";\n     case 2:\n-      return \\\"prefetcht2\\\\t%0\\\";\n+      return \\\"prefetcht1\\\\t%a0\\\";\n     case 3:\n-      return \\\"prefetchnta\\\\t%0\\\";\n+      return \\\"prefetcht2\\\\t%a0\\\";\n     default:\n       abort ();\n     }"}]}