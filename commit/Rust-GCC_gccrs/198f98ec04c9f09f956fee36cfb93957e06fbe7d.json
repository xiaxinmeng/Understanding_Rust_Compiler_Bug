{"sha": "198f98ec04c9f09f956fee36cfb93957e06fbe7d", "node_id": "C_kwDOANBUbNoAKDE5OGY5OGVjMDRjOWYwOWY5NTZmZWUzNmNmYjkzOTU3ZTA2ZmJlN2Q", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-04-18T11:36:29Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-04-26T15:02:40Z"}, "message": "gccrs: add error state to TypeCheckContextItem and missing copy ctor's\n\nWhen checking current context we might be in the const or static context\nwhich does not have a current function or impl or trait context associated\nwith it. So this allows us to represent the an error state for that case.\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check.h: New error state and missing copy implementations\n\t* typecheck/rust-typecheck-context.cc (TypeCheckContextItem::TypeCheckContextItem):\n\tmissing copy ctor\n\t(TypeCheckContextItem::operator=): missing copy implementation\n\t(TypeCheckContextItem::get_error): new static function\n\t(TypeCheckContextItem::is_error): new method\n\t(TypeCheckContextItem::get_context_type): handle error state\n\t(TypeCheckContextItem::get_defid): handle error state\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "d8505260d926896c5615f064a28a3d843edb082c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8505260d926896c5615f064a28a3d843edb082c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/198f98ec04c9f09f956fee36cfb93957e06fbe7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/198f98ec04c9f09f956fee36cfb93957e06fbe7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/198f98ec04c9f09f956fee36cfb93957e06fbe7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/198f98ec04c9f09f956fee36cfb93957e06fbe7d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c630493edcd2ccbef51a5893796f5deecd9d8a0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c630493edcd2ccbef51a5893796f5deecd9d8a0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c630493edcd2ccbef51a5893796f5deecd9d8a0b"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "4f8364d798f8881e34ed74a173ca8aa9e9e3b7b0", "filename": "gcc/rust/typecheck/rust-hir-type-check.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/198f98ec04c9f09f956fee36cfb93957e06fbe7d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/198f98ec04c9f09f956fee36cfb93957e06fbe7d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.h?ref=198f98ec04c9f09f956fee36cfb93957e06fbe7d", "patch": "@@ -35,11 +35,19 @@ class TypeCheckContextItem\n     ITEM,\n     IMPL_ITEM,\n     TRAIT_ITEM,\n+    ERROR\n   };\n \n   TypeCheckContextItem (HIR::Function *item);\n   TypeCheckContextItem (HIR::ImplBlock *impl_block, HIR::Function *item);\n   TypeCheckContextItem (HIR::TraitItemFunc *trait_item);\n+  TypeCheckContextItem (const TypeCheckContextItem &other);\n+\n+  TypeCheckContextItem &operator= (const TypeCheckContextItem &other);\n+\n+  static TypeCheckContextItem get_error ();\n+\n+  bool is_error () const;\n \n   ItemType get_type () const;\n \n@@ -54,6 +62,8 @@ class TypeCheckContextItem\n   DefId get_defid () const;\n \n private:\n+  TypeCheckContextItem ();\n+\n   union Item\n   {\n     HIR::Function *item;"}, {"sha": "2e3a6284fb10a72cbe02ae2b8a2be948a444c6e7", "filename": "gcc/rust/typecheck/rust-typecheck-context.cc", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/198f98ec04c9f09f956fee36cfb93957e06fbe7d/gcc%2Frust%2Ftypecheck%2Frust-typecheck-context.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/198f98ec04c9f09f956fee36cfb93957e06fbe7d/gcc%2Frust%2Ftypecheck%2Frust-typecheck-context.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-typecheck-context.cc?ref=198f98ec04c9f09f956fee36cfb93957e06fbe7d", "patch": "@@ -525,6 +525,71 @@ TypeCheckContextItem::TypeCheckContextItem (HIR::TraitItemFunc *trait_item)\n   : type (ItemType::TRAIT_ITEM), item (trait_item)\n {}\n \n+TypeCheckContextItem::TypeCheckContextItem (const TypeCheckContextItem &other)\n+  : type (other.type), item (other.item)\n+{\n+  switch (other.type)\n+    {\n+    case ITEM:\n+      item.item = other.item.item;\n+      break;\n+\n+    case IMPL_ITEM:\n+      item.impl_item = other.item.impl_item;\n+      break;\n+\n+    case TRAIT_ITEM:\n+      item.trait_item = other.item.trait_item;\n+      break;\n+\n+    case ERROR:\n+      item.item = nullptr;\n+      break;\n+    }\n+}\n+\n+TypeCheckContextItem::TypeCheckContextItem ()\n+  : type (ItemType::ERROR), item (static_cast<HIR::Function *> (nullptr))\n+{}\n+\n+TypeCheckContextItem &\n+TypeCheckContextItem::operator= (const TypeCheckContextItem &other)\n+{\n+  type = other.type;\n+  switch (other.type)\n+    {\n+    case ITEM:\n+      item.item = other.item.item;\n+      break;\n+\n+    case IMPL_ITEM:\n+      item.impl_item = other.item.impl_item;\n+      break;\n+\n+    case TRAIT_ITEM:\n+      item.trait_item = other.item.trait_item;\n+      break;\n+\n+    case ERROR:\n+      item.item = nullptr;\n+      break;\n+    }\n+\n+  return *this;\n+}\n+\n+TypeCheckContextItem\n+TypeCheckContextItem::get_error ()\n+{\n+  return TypeCheckContextItem ();\n+}\n+\n+bool\n+TypeCheckContextItem::is_error () const\n+{\n+  return type == ERROR;\n+}\n+\n HIR::Function *\n TypeCheckContextItem::get_item ()\n {\n@@ -571,6 +636,10 @@ TypeCheckContextItem::get_context_type ()\n     case TRAIT_ITEM:\n       reference = get_trait_item ()->get_mappings ().get_hirid ();\n       break;\n+\n+    case ERROR:\n+      gcc_unreachable ();\n+      return nullptr;\n     }\n \n   rust_assert (reference != UNKNOWN_HIRID);\n@@ -595,6 +664,9 @@ TypeCheckContextItem::get_defid () const\n \n     case TRAIT_ITEM:\n       return item.trait_item->get_mappings ().get_defid ();\n+\n+    case ERROR:\n+      return UNKNOWN_DEFID;\n     }\n \n   return UNKNOWN_DEFID;"}]}