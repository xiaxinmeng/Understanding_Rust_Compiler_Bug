{"sha": "7ed9919dff52443091071203bf93685cf78002a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VkOTkxOWRmZjUyNDQzMDkxMDcxMjAzYmY5MzY4NWNmNzgwMDJhMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-09-05T09:02:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-09-05T09:02:07Z"}, "message": "gigi.h (renaming_from_generic_instantiation_p): Turn to\n\n\t* gcc-interface/gigi.h (renaming_from_generic_instantiation_p): Turn to\n\t(renaming_from_instantiation_p): ...this.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use inline predicate\n\tinstead of explicit tests on kind of entities.  Adjust for renaming.\n\t(gnat_to_gnu_profile_type): Likewise.\n\t(gnat_to_gnu_subprog_type): Likewise.\n\t* gcc-interface/trans.c (Identifier_to_gnu): Likewise.\n\t(Case_Statement_to_gnu): Likewise.\n\t(gnat_to_gnu): Likewise.\n\t(process_freeze_entity): Likewise.\n\t(process_type): Likewise.\n\t(add_stmt_with_node): Adjust for renaming.\n\t* gcc-interface/utils.c (gnat_pushdecl): Adjust for renaming.\n\t(renaming_from_generic_instantiation_p): Rename to...\n\t(renaming_from_instantiation_p): ...this.  Use inline predicate.\n\t(pad_type_hasher::keep_cache_entry): Fold.\n\nFrom-SVN: r251700", "tree": {"sha": "b6bac242e9f042c2132f09593100f19d1ca16cc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6bac242e9f042c2132f09593100f19d1ca16cc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ed9919dff52443091071203bf93685cf78002a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed9919dff52443091071203bf93685cf78002a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ed9919dff52443091071203bf93685cf78002a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ed9919dff52443091071203bf93685cf78002a3/comments", "author": null, "committer": null, "parents": [{"sha": "806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/806fcf7183377c7df062a7fa0bcf9d0ce8ea1fc0"}], "stats": {"total": 105, "additions": 59, "deletions": 46}, "files": [{"sha": "a263b95e08bf390c1c62039ec958d2257bacd50c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed9919dff52443091071203bf93685cf78002a3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed9919dff52443091071203bf93685cf78002a3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7ed9919dff52443091071203bf93685cf78002a3", "patch": "@@ -1,3 +1,22 @@\n+2017-09-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (renaming_from_generic_instantiation_p): Turn to\n+\t(renaming_from_instantiation_p): ...this.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use inline predicate\n+\tinstead of explicit tests on kind of entities.  Adjust for renaming.\n+\t(gnat_to_gnu_profile_type): Likewise.\n+\t(gnat_to_gnu_subprog_type): Likewise.\n+\t* gcc-interface/trans.c (Identifier_to_gnu): Likewise.\n+\t(Case_Statement_to_gnu): Likewise.\n+\t(gnat_to_gnu): Likewise.\n+\t(process_freeze_entity): Likewise.\n+\t(process_type): Likewise.\n+\t(add_stmt_with_node): Adjust for renaming.\n+\t* gcc-interface/utils.c (gnat_pushdecl): Adjust for renaming.\n+\t(renaming_from_generic_instantiation_p): Rename to...\n+\t(renaming_from_instantiation_p): ...this.  Use inline predicate.\n+\t(pad_type_hasher::keep_cache_entry): Fold.\n+\n 2017-09-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (adjust_for_implicit_deref): New function."}, {"sha": "569fe859d4e6b3ecf4f80e23a7dcf8d38b9b46c3", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed9919dff52443091071203bf93685cf78002a3/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed9919dff52443091071203bf93685cf78002a3/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=7ed9919dff52443091071203bf93685cf78002a3", "patch": "@@ -341,14 +341,14 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t    gnat_temp\n \t      = Corresponding_Spec (Parent (Declaration_Node (gnat_temp)));\n \n-\t  if (IN (Ekind (gnat_temp), Subprogram_Kind)\n+\t  if (Is_Subprogram (gnat_temp)\n \t      && Present (Protected_Body_Subprogram (gnat_temp)))\n \t    gnat_temp = Protected_Body_Subprogram (gnat_temp);\n \n \t  if (Ekind (gnat_temp) == E_Entry\n \t      || Ekind (gnat_temp) == E_Entry_Family\n \t      || Ekind (gnat_temp) == E_Task_Type\n-\t      || (IN (Ekind (gnat_temp), Subprogram_Kind)\n+\t      || (Is_Subprogram (gnat_temp)\n \t\t  && present_gnu_tree (gnat_temp)\n \t\t  && (current_function_decl\n \t\t      == gnat_to_gnu_entity (gnat_temp, NULL_TREE, false))))\n@@ -426,7 +426,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n      inherit another source location.  */\n   gnu_entity_name = get_entity_name (gnat_entity);\n   if (Sloc (gnat_entity) != No_Location\n-      && !renaming_from_generic_instantiation_p (gnat_entity))\n+      && !renaming_from_instantiation_p (gnat_entity))\n     Sloc_to_locus (Sloc (gnat_entity), &input_location);\n \n   /* For cases when we are not defining (i.e., we are referencing from\n@@ -2922,7 +2922,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n       /* Create the type for a string literal.  */\n       {\n \tEntity_Id gnat_full_type\n-\t  = (IN (Ekind (Etype (gnat_entity)), Private_Kind)\n+\t  = (Is_Private_Type (Etype (gnat_entity))\n \t     && Present (Full_View (Etype (gnat_entity)))\n \t     ? Full_View (Etype (gnat_entity)) : Etype (gnat_entity));\n \ttree gnu_string_type = get_unpadded_type (gnat_full_type);\n@@ -3198,7 +3198,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t    if (has_discr)\n \t      {\n \t\t/* The actual parent subtype is the full view.  */\n-\t\tif (IN (Ekind (gnat_parent), Private_Kind))\n+\t\tif (Is_Private_Type (gnat_parent))\n \t\t  {\n \t\t    if (Present (Full_View (gnat_parent)))\n \t\t      gnat_parent = Full_View (gnat_parent);\n@@ -3583,14 +3583,14 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \tEntity_Id gnat_desig_equiv = Gigi_Equivalent_Type (gnat_desig_type);\n \t/* Whether it comes from a limited with.  */\n \tconst bool is_from_limited_with\n-\t  = (IN (Ekind (gnat_desig_equiv), Incomplete_Kind)\n+\t  = (Is_Incomplete_Type (gnat_desig_equiv)\n \t     && From_Limited_With (gnat_desig_equiv));\n \t/* Whether it is a completed Taft Amendment type.  Such a type is to\n \t   be treated as coming from a limited with clause if it is not in\n \t   the main unit, i.e. we break potential circularities here in case\n \t   the body of an external unit is loaded for inter-unit inlining.  */\n         const bool is_completed_taft_type\n-\t  = (IN (Ekind (gnat_desig_equiv), Incomplete_Kind)\n+\t  = (Is_Incomplete_Type (gnat_desig_equiv)\n \t     && Has_Completion_In_Body (gnat_desig_equiv)\n \t     && Present (Full_View (gnat_desig_equiv)));\n \t/* The \"full view\" of the designated type.  If this is an incomplete\n@@ -3603,12 +3603,12 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \tEntity_Id gnat_desig_full_direct_first\n \t  = (is_from_limited_with\n \t     ? Non_Limited_View (gnat_desig_equiv)\n-\t     : (IN (Ekind (gnat_desig_equiv), Incomplete_Or_Private_Kind)\n+\t     : (Is_Incomplete_Or_Private_Type (gnat_desig_equiv)\n \t\t? Full_View (gnat_desig_equiv) : Empty));\n \tEntity_Id gnat_desig_full_direct\n \t  = ((is_from_limited_with\n \t      && Present (gnat_desig_full_direct_first)\n-\t      && IN (Ekind (gnat_desig_full_direct_first), Private_Kind))\n+\t      && Is_Private_Type (gnat_desig_full_direct_first))\n \t     ? Full_View (gnat_desig_full_direct_first)\n \t     : gnat_desig_full_direct_first);\n \tEntity_Id gnat_desig_full\n@@ -3856,9 +3856,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t      p->next = defer_incomplete_list;\n \t      defer_incomplete_list = p;\n \t    }\n-\t  else if (!IN (Ekind (Base_Type\n-\t\t\t       (Directly_Designated_Type (gnat_entity))),\n-\t\t        Incomplete_Or_Private_Kind))\n+\t  else if (!Is_Incomplete_Or_Private_Type\n+\t\t      (Base_Type (Directly_Designated_Type (gnat_entity))))\n \t    gnat_to_gnu_entity (Directly_Designated_Type (gnat_entity),\n \t\t\t\tNULL_TREE, false);\n \t}\n@@ -5484,17 +5483,17 @@ gnat_to_gnu_profile_type (Entity_Id gnat_type)\n      ought to be merged at some point.  */\n   Entity_Id gnat_equiv = Gigi_Equivalent_Type (gnat_type);\n   const bool is_from_limited_with\n-    = (IN (Ekind (gnat_equiv), Incomplete_Kind)\n+    = (Is_Incomplete_Type (gnat_equiv)\n        && From_Limited_With (gnat_equiv));\n   Entity_Id gnat_full_direct_first\n     = (is_from_limited_with\n        ? Non_Limited_View (gnat_equiv)\n-       : (IN (Ekind (gnat_equiv), Incomplete_Or_Private_Kind)\n+       : (Is_Incomplete_Or_Private_Type (gnat_equiv)\n \t  ? Full_View (gnat_equiv) : Empty));\n   Entity_Id gnat_full_direct\n     = ((is_from_limited_with\n \t&& Present (gnat_full_direct_first)\n-\t&& IN (Ekind (gnat_full_direct_first), Private_Kind))\n+\t&& Is_Private_Type (gnat_full_direct_first))\n        ? Full_View (gnat_full_direct_first)\n        : gnat_full_direct_first);\n   Entity_Id gnat_full = Gigi_Equivalent_Type (gnat_full_direct);\n@@ -5818,7 +5817,7 @@ gnat_to_gnu_subprog_type (Entity_Id gnat_subprog, bool definition,\n \t\t       && (gnat_decl = Parent (gnat_subprog))\n \t\t       && Nkind (gnat_decl) == N_Procedure_Specification\n \t\t       && Null_Present (gnat_decl)\n-\t\t       && IN (Ekind (gnat_param_type), Incomplete_Kind))\n+\t\t       && Is_Incomplete_Type (gnat_param_type))\n \t\tgnu_param = create_param_decl (gnu_param_name, ptr_type_node);\n \n \t      else"}, {"sha": "a5084c684151104cef2a2e16bbbfd0ee7b124657", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed9919dff52443091071203bf93685cf78002a3/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed9919dff52443091071203bf93685cf78002a3/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=7ed9919dff52443091071203bf93685cf78002a3", "patch": "@@ -998,7 +998,7 @@ extern int fp_size_to_prec (int size);\n    from the parameter association for the instantiation of a generic.  We do\n    not want to emit source location for them: the code generated for their\n    initialization is likely to disturb debugging.  */\n-extern bool renaming_from_generic_instantiation_p (Node_Id gnat_node);\n+extern bool renaming_from_instantiation_p (Node_Id gnat_node);\n \n /* Try to process all nodes in the deferred context queue.  Keep in the queue\n    the ones that cannot be processed yet, remove the other ones.  If FORCE is"}, {"sha": "270bf7a49dc10cb115dcf71be5f73365def48770", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed9919dff52443091071203bf93685cf78002a3/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed9919dff52443091071203bf93685cf78002a3/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=7ed9919dff52443091071203bf93685cf78002a3", "patch": "@@ -1053,14 +1053,14 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n \t\t  && (Etype (gnat_node)\n \t\t      == Packed_Array_Impl_Type (gnat_temp_type)))\n \t      || (Is_Class_Wide_Type (Etype (gnat_node)))\n-\t      || (IN (Ekind (gnat_temp_type), Incomplete_Or_Private_Kind)\n+\t      || (Is_Incomplete_Or_Private_Type (gnat_temp_type)\n \t\t  && Present (Full_View (gnat_temp_type))\n \t\t  && ((Etype (gnat_node) == Full_View (gnat_temp_type))\n \t\t      || (Is_Packed (Full_View (gnat_temp_type))\n \t\t\t  && (Etype (gnat_node)\n \t\t\t      == Packed_Array_Impl_Type\n \t\t\t           (Full_View (gnat_temp_type))))))\n-\t      || (IN (Ekind (gnat_temp_type), Incomplete_Kind)\n+\t      || (Is_Incomplete_Type (gnat_temp_type)\n \t\t  && From_Limited_With (gnat_temp_type)\n \t\t  && Present (Non_Limited_View (gnat_temp_type))\n \t\t  && Etype (gnat_node) == Non_Limited_View (gnat_temp_type))\n@@ -1069,7 +1069,7 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n \t\t   || Ekind (gnat_temp) == E_Component\n \t\t   || Ekind (gnat_temp) == E_Constant\n \t\t   || Ekind (gnat_temp) == E_Loop_Parameter\n-\t\t   || IN (Ekind (gnat_temp), Formal_Kind)));\n+\t\t   || Is_Formal (gnat_temp)));\n \n   /* If this is a reference to a deferred constant whose partial view is an\n      unconstrained private type, the proper type is on the full view of the\n@@ -2558,7 +2558,7 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n \t    case N_Expanded_Name:\n \t      /* This represents either a subtype range or a static value of\n \t\t some kind; Ekind says which.  */\n-\t      if (IN (Ekind (Entity (gnat_choice)), Type_Kind))\n+\t      if (Is_Type (Entity (gnat_choice)))\n \t\t{\n \t\t  tree gnu_type = get_unpadded_type (Entity (gnat_choice));\n \n@@ -6007,7 +6007,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \n       /* If this is of a fixed-point type, the value we want is the value of\n \t the corresponding integer.  */\n-      if (IN (Ekind (Underlying_Type (Etype (gnat_node))), Fixed_Point_Kind))\n+      if (Is_Fixed_Point_Type (Underlying_Type (Etype (gnat_node))))\n \t{\n \t  gnu_result = UI_To_gnu (Corresponding_Integer_Value (gnat_node),\n \t\t\t\t  gnu_result_type);\n@@ -6599,7 +6599,7 @@ gnat_to_gnu (Node_Id gnat_node)\n       /* If the result is a pointer type, see if we are improperly\n \t converting to a stricter alignment.  */\n       if (STRICT_ALIGNMENT && POINTER_TYPE_P (gnu_result_type)\n-\t  && IN (Ekind (Etype (gnat_node)), Access_Kind))\n+\t  && Is_Access_Type (Etype (gnat_node)))\n \t{\n \t  unsigned int align = known_alignment (gnu_expr);\n \t  tree gnu_obj_type = TREE_TYPE (gnu_result_type);\n@@ -8110,8 +8110,7 @@ add_stmt_with_node (tree gnu_stmt, Node_Id gnat_node)\n {\n   /* Do not emit a location for renamings that come from generic instantiation,\n      they are likely to disturb debugging.  */\n-  if (Present (gnat_node)\n-      && !renaming_from_generic_instantiation_p (gnat_node))\n+  if (Present (gnat_node) && !renaming_from_instantiation_p (gnat_node))\n     set_expr_location_from_node (gnu_stmt, gnat_node);\n   add_stmt (gnu_stmt);\n }\n@@ -8748,33 +8747,33 @@ process_freeze_entity (Node_Id gnat_node)\n     {\n       save_gnu_tree (gnat_entity, NULL_TREE, false);\n \n-      if (IN (kind, Incomplete_Or_Private_Kind)\n+      if (Is_Incomplete_Or_Private_Type (gnat_entity)\n \t  && Present (Full_View (gnat_entity)))\n \t{\n \t  Entity_Id full_view = Full_View (gnat_entity);\n \n \t  save_gnu_tree (full_view, NULL_TREE, false);\n \n-          if (IN (Ekind (full_view), Private_Kind)\n+          if (Is_Private_Type (full_view)\n \t      && Present (Underlying_Full_View (full_view)))\n \t    {\n \t      full_view = Underlying_Full_View (full_view);\n \t      save_gnu_tree (full_view, NULL_TREE, false);\n \t    }\n \t}\n \n-      if (IN (kind, Type_Kind)\n+      if (Is_Type (gnat_entity)\n \t  && Present (Class_Wide_Type (gnat_entity))\n \t  && Root_Type (Class_Wide_Type (gnat_entity)) == gnat_entity)\n \tsave_gnu_tree (Class_Wide_Type (gnat_entity), NULL_TREE, false);\n     }\n \n-  if (IN (kind, Incomplete_Or_Private_Kind)\n+  if (Is_Incomplete_Or_Private_Type (gnat_entity)\n       && Present (Full_View (gnat_entity)))\n     {\n       Entity_Id full_view = Full_View (gnat_entity);\n \n-      if (IN (Ekind (full_view), Private_Kind)\n+      if (Is_Private_Type (full_view)\n \t  && Present (Underlying_Full_View (full_view)))\n \tfull_view = Underlying_Full_View (full_view);\n \n@@ -8806,7 +8805,7 @@ process_freeze_entity (Node_Id gnat_node)\n       gnu_new = gnat_to_gnu_entity (gnat_entity, gnu_init, true);\n     }\n \n-  if (IN (kind, Type_Kind)\n+  if (Is_Type (gnat_entity)\n       && Present (Class_Wide_Type (gnat_entity))\n       && Root_Type (Class_Wide_Type (gnat_entity)) == gnat_entity)\n     save_gnu_tree (Class_Wide_Type (gnat_entity), gnu_new, false);\n@@ -9626,7 +9625,7 @@ process_type (Entity_Id gnat_entity)\n \t{\n \t  tree gnu_decl = TYPE_STUB_DECL (make_dummy_type (gnat_entity));\n \t  save_gnu_tree (gnat_entity, gnu_decl, false);\n-\t  if (IN (Ekind (gnat_entity), Incomplete_Or_Private_Kind)\n+\t  if (Is_Incomplete_Or_Private_Type (gnat_entity)\n \t      && Present (Full_View (gnat_entity)))\n \t    {\n \t      if (Has_Completion_In_Body (gnat_entity))"}, {"sha": "b0f6d2dba1e8ecc9cd04406dfc6f21b1848594eb", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ed9919dff52443091071203bf93685cf78002a3/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ed9919dff52443091071203bf93685cf78002a3/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=7ed9919dff52443091071203bf93685cf78002a3", "patch": "@@ -231,11 +231,15 @@ struct pad_type_hasher : ggc_cache_ptr_hash<pad_type_hash>\n {\n   static inline hashval_t hash (pad_type_hash *t) { return t->hash; }\n   static bool equal (pad_type_hash *a, pad_type_hash *b);\n-  static int keep_cache_entry (pad_type_hash *&);\n+\n+  static int\n+  keep_cache_entry (pad_type_hash *&t)\n+  {\n+    return ggc_marked_p (t->type);\n+  }\n };\n \n-static GTY ((cache))\n-  hash_table<pad_type_hasher> *pad_type_hash_table;\n+static GTY ((cache)) hash_table<pad_type_hasher> *pad_type_hash_table;\n \n static tree merge_sizes (tree, tree, tree, bool, bool);\n static tree fold_bit_position (const_tree);\n@@ -750,7 +754,7 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n   TREE_NO_WARNING (decl) = (No (gnat_node) || Warnings_Off (gnat_node));\n \n   /* Set the location of DECL and emit a declaration for it.  */\n-  if (Present (gnat_node) && !renaming_from_generic_instantiation_p (gnat_node))\n+  if (Present (gnat_node) && !renaming_from_instantiation_p (gnat_node))\n     Sloc_to_locus (Sloc (gnat_node), &DECL_SOURCE_LOCATION (decl));\n \n   add_decl_expr (decl, gnat_node);\n@@ -1192,14 +1196,6 @@ make_type_from_size (tree type, tree size_tree, bool for_biased)\n   return type;\n }\n \n-/* See if the data pointed to by the hash table slot is marked.  */\n-\n-int\n-pad_type_hasher::keep_cache_entry (pad_type_hash *&t)\n-{\n-  return ggc_marked_p (t->type);\n-}\n-\n /* Return true iff the padded types are equivalent.  */\n \n bool\n@@ -2899,10 +2895,10 @@ value_factor_p (tree value, HOST_WIDE_INT factor)\n    initialization is likely to disturb debugging.  */\n \n bool\n-renaming_from_generic_instantiation_p (Node_Id gnat_node)\n+renaming_from_instantiation_p (Node_Id gnat_node)\n {\n   if (Nkind (gnat_node) != N_Defining_Identifier\n-      || !IN (Ekind (gnat_node), Object_Kind)\n+      || !Is_Object (gnat_node)\n       || Comes_From_Source (gnat_node)\n       || !Present (Renamed_Object (gnat_node)))\n     return false;"}]}