{"sha": "228156e84966963a318c2c09dc15aed887e8eb0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI4MTU2ZTg0OTY2OTYzYTMxOGMyYzA5ZGMxNWFlZDg4N2U4ZWIwZg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2020-10-30T02:15:10Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2020-10-30T02:15:10Z"}, "message": "PowerPC: Adjust float128/ibm128 warnings.\n\nThis patch ccombines two patches:\n\n1) If GLIBC is 2.32 or newer, and the language is C or C++, allow the user to\n   change the long double type without having to use -Wno-psabi.\n\n2) Adjust the warnings for intermixing __float128 and __ibm128 to accomidate\n   the future change to allow long double to use the IEEE 128-bit format.\n\ngcc/\n2020-10-29  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Allow\n\tlong double type to be changed for C/C++ if glibc 2.32 or newer.\n\t(rs6000_invalid_binary_op): Update error messages about mixing IBM\n\tlong double and IEEE 128-bit.\n\ngcc/testsuite/\n2020-10-27  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* gcc.target/powerpc/float128-mix-2.c: New test.\n\t* gcc.target/powerpc/float128-mix-3.c: New test.\n\t* gcc.target/powerpc/float128-mix.c: Update failure messages.", "tree": {"sha": "dbc80841078f28e3002a94d53231220479f0831e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbc80841078f28e3002a94d53231220479f0831e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/228156e84966963a318c2c09dc15aed887e8eb0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/228156e84966963a318c2c09dc15aed887e8eb0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/228156e84966963a318c2c09dc15aed887e8eb0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/228156e84966963a318c2c09dc15aed887e8eb0f/comments", "author": null, "committer": null, "parents": [{"sha": "dec1eb4c276f1b3c003154c159b539eb7110a13f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dec1eb4c276f1b3c003154c159b539eb7110a13f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dec1eb4c276f1b3c003154c159b539eb7110a13f"}], "stats": {"total": 81, "additions": 55, "deletions": 26}, "files": [{"sha": "bcd4c4a82b32520609fcd352407403707500ff6e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/228156e84966963a318c2c09dc15aed887e8eb0f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/228156e84966963a318c2c09dc15aed887e8eb0f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=228156e84966963a318c2c09dc15aed887e8eb0f", "patch": "@@ -4158,8 +4158,15 @@ rs6000_option_override_internal (bool global_init_p)\n \n       if (rs6000_ieeequad != TARGET_IEEEQUAD_DEFAULT && TARGET_LONG_DOUBLE_128)\n \t{\n+\t  /* Determine if the user can change the default long double type at\n+\t     compilation time.  Only C and C++ support this, and you need GLIBC\n+\t     2.32 or newer.  Only issue one warning.  */\n \t  static bool warned_change_long_double;\n-\t  if (!warned_change_long_double)\n+\n+\t  if (!warned_change_long_double\n+\t      && (!OPTION_GLIBC\n+\t\t  || (!lang_GNU_C () && !lang_GNU_CXX ())\n+\t\t  || ((TARGET_GLIBC_MAJOR * 1000) + TARGET_GLIBC_MINOR) < 2032))\n \t    {\n \t      warned_change_long_double = true;\n \t      if (TARGET_IEEEQUAD)\n@@ -14392,22 +14399,10 @@ rs6000_invalid_binary_op (int op ATTRIBUTE_UNUSED,\n \n   if (!TARGET_FLOAT128_CVT)\n     {\n-      if ((mode1 == KFmode && mode2 == IFmode)\n-\t  || (mode1 == IFmode && mode2 == KFmode))\n-\treturn N_(\"__float128 and __ibm128 cannot be used in the same \"\n-\t\t  \"expression\");\n-\n-      if (TARGET_IEEEQUAD\n-\t  && ((mode1 == IFmode && mode2 == TFmode)\n-\t      || (mode1 == TFmode && mode2 == IFmode)))\n-\treturn N_(\"__ibm128 and long double cannot be used in the same \"\n-\t\t  \"expression\");\n-\n-      if (!TARGET_IEEEQUAD\n-\t  && ((mode1 == KFmode && mode2 == TFmode)\n-\t      || (mode1 == TFmode && mode2 == KFmode)))\n-\treturn N_(\"__float128 and long double cannot be used in the same \"\n-\t\t  \"expression\");\n+      if ((FLOAT128_IEEE_P (mode1) && FLOAT128_IBM_P (mode2))\n+\t  || (FLOAT128_IBM_P (mode1) && FLOAT128_IEEE_P (mode2)))\n+\treturn N_(\"Invalid mixing of IEEE 128-bit and IBM 128-bit floating \"\n+\t\t  \"point types\");\n     }\n \n   return NULL;"}, {"sha": "61227132c207e3e100f3d066cb2015f4c6c244a9", "filename": "gcc/testsuite/gcc.target/powerpc/float128-mix-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/228156e84966963a318c2c09dc15aed887e8eb0f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-mix-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/228156e84966963a318c2c09dc15aed887e8eb0f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-mix-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-mix-2.c?ref=228156e84966963a318c2c09dc15aed887e8eb0f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-require-effective-target ppc_float128_sw } */\n+/* { dg-options \"-O2 -mvsx -Wno-psabi -mabi=ieeelongdouble -mlong-double-128\" } */\n+\n+/* Test to make sure that __float128 and long double do not generate errors if\n+   long double uses the IEEE 128-bit format.  */\n+__float128\n+add (__float128 a, long double b)\n+{\n+  return a+b;\n+}\n+\n+long double\n+sub (long double a, __float128 b)\n+{\n+  return a-b;\n+}"}, {"sha": "a2582bb10356e413a9c63c28ca0d2403629c1592", "filename": "gcc/testsuite/gcc.target/powerpc/float128-mix-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/228156e84966963a318c2c09dc15aed887e8eb0f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-mix-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/228156e84966963a318c2c09dc15aed887e8eb0f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-mix-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-mix-3.c?ref=228156e84966963a318c2c09dc15aed887e8eb0f", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-require-effective-target ppc_float128_sw } */\n+/* { dg-options \"-O2 -mvsx -Wno-psabi -mabi=ibmlongdouble -mlong-double-128\" } */\n+\n+/* Test to make sure that __float128 and __ibm128 cannot be combined\n+   together.  */\n+__float128\n+add (__float128 a, __ibm128 b)\n+{\n+  return a+b;\t/* { dg-error \"IEEE 128-bit and IBM 128-bit floating point\" } */\n+}\n+\n+__ibm128\n+sub (__ibm128 a, __float128 b)\n+{\n+  return a-b;\t/* { dg-error \"IEEE 128-bit and IBM 128-bit floating point\" } */\n+}"}, {"sha": "48e651cdba0c76ad9b83c1d24d3681a716b8702b", "filename": "gcc/testsuite/gcc.target/powerpc/float128-mix.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/228156e84966963a318c2c09dc15aed887e8eb0f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-mix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/228156e84966963a318c2c09dc15aed887e8eb0f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-mix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-mix.c?ref=228156e84966963a318c2c09dc15aed887e8eb0f", "patch": "@@ -1,15 +1,17 @@\n-/* { dg-do compile { target { powerpc*-*-linux* } } } */\n-/* { dg-require-effective-target powerpc_vsx_ok } */\n-/* { dg-options \"-O2 -mvsx\" } */\n+/* { dg-require-effective-target ppc_float128_sw } */\n+/* { dg-options \"-O2 -mvsx -Wno-psabi -mabi=ibmlongdouble -mlong-double-128\" } */\n \n-\n-/* Test to make sure that __float128 and long double cannot be combined together.  */\n-__float128 add (__float128 a, long double b)\n+/* Test to make sure that __float128 and long double cannot be combined\n+   together, when long double uses the IBM extended double format, and\n+   __float128 uses the IEEE 128-bit format.  */\n+__float128\n+add (__float128 a, long double b)\n {\n-  return a+b;\t/* { dg-error \"__float128 and long double cannot be used in the same expression\" } */\n+  return a+b;\t/* { dg-error \"IEEE 128-bit and IBM 128-bit floating point\" } */\n }\n \n-__ibm128 sub (long double a, __float128 b)\n+long double\n+sub (long double a, __float128 b)\n {\n-  return a-b;\t/* { dg-error \"__float128 and long double cannot be used in the same expression\" } */\n+  return a-b;\t/* { dg-error \"IEEE 128-bit and IBM 128-bit floating point\" } */\n }"}]}