{"sha": "9144eabb893bf3cb4bad4c2447e8b56c5db7f577", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE0NGVhYmI4OTNiZjNjYjRiYWQ0YzI0NDdlOGI1NmM1ZGI3ZjU3Nw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-08-29T17:10:23Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-08-29T17:10:23Z"}, "message": "make_location: ensure end-points are pure locations\n\ngcc/ChangeLog:\n\t* input.c (make_location): Call get_start and get_finish\n\ton the endpoints to avoid storing packed ranges or ad-hoc\n\tranges in them.\n\t(selftest::test_make_location_nonpure_range_endpoints): New function.\n\t(selftest::input_c_tests): Call it.\n\t* input.h (get_start): New inline function.\n\nFrom-SVN: r239831", "tree": {"sha": "31d88147ce6530ac2c8a2b9c9137f481d64d072c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31d88147ce6530ac2c8a2b9c9137f481d64d072c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9144eabb893bf3cb4bad4c2447e8b56c5db7f577", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9144eabb893bf3cb4bad4c2447e8b56c5db7f577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9144eabb893bf3cb4bad4c2447e8b56c5db7f577", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9144eabb893bf3cb4bad4c2447e8b56c5db7f577/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "328eae1cb4cca4903f4b6de3bf56c4e59fdbdeae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328eae1cb4cca4903f4b6de3bf56c4e59fdbdeae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/328eae1cb4cca4903f4b6de3bf56c4e59fdbdeae"}], "stats": {"total": 83, "additions": 81, "deletions": 2}, "files": [{"sha": "fc2ccfc25c9be9d97bb73583f92d7d0dce80e5f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9144eabb893bf3cb4bad4c2447e8b56c5db7f577/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9144eabb893bf3cb4bad4c2447e8b56c5db7f577/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9144eabb893bf3cb4bad4c2447e8b56c5db7f577", "patch": "@@ -1,3 +1,12 @@\n+2016-08-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* input.c (make_location): Call get_start and get_finish\n+\ton the endpoints to avoid storing packed ranges or ad-hoc\n+\tranges in them.\n+\t(selftest::test_make_location_nonpure_range_endpoints): New function.\n+\t(selftest::input_c_tests): Call it.\n+\t* input.h (get_start): New inline function.\n+\n 2016-08-29  Tom de Vries  <tom@codesourcery.com>\n \n \tPR c/77398"}, {"sha": "4ec218d52a4d8f2e495fc3a54b6992d8382384ac", "filename": "gcc/input.c", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9144eabb893bf3cb4bad4c2447e8b56c5db7f577/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9144eabb893bf3cb4bad4c2447e8b56c5db7f577/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=9144eabb893bf3cb4bad4c2447e8b56c5db7f577", "patch": "@@ -879,8 +879,8 @@ make_location (location_t caret, location_t start, location_t finish)\n {\n   location_t pure_loc = get_pure_location (caret);\n   source_range src_range;\n-  src_range.m_start = start;\n-  src_range.m_finish = finish;\n+  src_range.m_start = get_start (start);\n+  src_range.m_finish = get_finish (finish);\n   location_t combined_loc = COMBINE_LOCATION_DATA (line_table,\n \t\t\t\t\t\t   pure_loc,\n \t\t\t\t\t\t   src_range,\n@@ -1741,6 +1741,67 @@ test_builtins ()\n   ASSERT_PRED1 (is_location_from_builtin_token, BUILTINS_LOCATION);\n }\n \n+/* Regression test for make_location.\n+   Ensure that we use the caret locations of the start/finish, rather\n+   than storing a packed or ad-hoc range as the start/finish.  */\n+\n+static void\n+test_make_location_nonpure_range_endpoints (const line_table_case &case_)\n+{\n+  /* Issue seen with testsuite/c-c++-common/Wlogical-not-parentheses-2.c\n+     with C++ frontend.\n+     ....................0000000001111111111222.\n+     ....................1234567890123456789012.  */\n+  const char *content = \"     r += !aaa == bbb;\\n\";\n+  temp_source_file tmp (SELFTEST_LOCATION, \".C\", content);\n+  line_table_test ltt (case_);\n+  linemap_add (line_table, LC_ENTER, false, tmp.get_filename (), 1);\n+\n+  const location_t c11 = linemap_position_for_column (line_table, 11);\n+  const location_t c12 = linemap_position_for_column (line_table, 12);\n+  const location_t c13 = linemap_position_for_column (line_table, 13);\n+  const location_t c14 = linemap_position_for_column (line_table, 14);\n+  const location_t c21 = linemap_position_for_column (line_table, 21);\n+\n+  if (c21 > LINE_MAP_MAX_LOCATION_WITH_COLS)\n+    return;\n+\n+  /* Use column 13 for the caret location, arbitrarily, to verify that we\n+     handle start != caret.  */\n+  const location_t aaa = make_location (c13, c12, c14);\n+  ASSERT_EQ (c13, get_pure_location (aaa));\n+  ASSERT_EQ (c12, get_start (aaa));\n+  ASSERT_FALSE (IS_ADHOC_LOC (get_start (aaa)));\n+  ASSERT_EQ (c14, get_finish (aaa));\n+  ASSERT_FALSE (IS_ADHOC_LOC (get_finish (aaa)));\n+\n+  /* Make a location using a location with a range as the start-point.  */\n+  const location_t not_aaa = make_location (c11, aaa, c14);\n+  ASSERT_EQ (c11, get_pure_location (not_aaa));\n+  /* It should use the start location of the range, not store the range\n+     itself.  */\n+  ASSERT_EQ (c12, get_start (not_aaa));\n+  ASSERT_FALSE (IS_ADHOC_LOC (get_start (not_aaa)));\n+  ASSERT_EQ (c14, get_finish (not_aaa));\n+  ASSERT_FALSE (IS_ADHOC_LOC (get_finish (not_aaa)));\n+\n+  /* Similarly, make a location with a range as the end-point.  */\n+  const location_t aaa_eq_bbb = make_location (c12, c12, c21);\n+  ASSERT_EQ (c12, get_pure_location (aaa_eq_bbb));\n+  ASSERT_EQ (c12, get_start (aaa_eq_bbb));\n+  ASSERT_FALSE (IS_ADHOC_LOC (get_start (aaa_eq_bbb)));\n+  ASSERT_EQ (c21, get_finish (aaa_eq_bbb));\n+  ASSERT_FALSE (IS_ADHOC_LOC (get_finish (aaa_eq_bbb)));\n+  const location_t not_aaa_eq_bbb = make_location (c11, c12, aaa_eq_bbb);\n+  /* It should use the finish location of the range, not store the range\n+     itself.  */\n+  ASSERT_EQ (c11, get_pure_location (not_aaa_eq_bbb));\n+  ASSERT_EQ (c12, get_start (not_aaa_eq_bbb));\n+  ASSERT_FALSE (IS_ADHOC_LOC (get_start (not_aaa_eq_bbb)));\n+  ASSERT_EQ (c21, get_finish (not_aaa_eq_bbb));\n+  ASSERT_FALSE (IS_ADHOC_LOC (get_finish (not_aaa_eq_bbb)));\n+}\n+\n /* Verify reading of input files (e.g. for caret-based diagnostics).  */\n \n static void\n@@ -3187,6 +3248,7 @@ input_c_tests ()\n   test_should_have_column_data_p ();\n   test_unknown_location ();\n   test_builtins ();\n+  for_each_line_table_case (test_make_location_nonpure_range_endpoints);\n \n   for_each_line_table_case (test_accessing_ordinary_linemaps);\n   for_each_line_table_case (test_lexer);"}, {"sha": "ecf8db3a7ea58d5e8aa6cdcc3d680daa93bafb97", "filename": "gcc/input.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9144eabb893bf3cb4bad4c2447e8b56c5db7f577/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9144eabb893bf3cb4bad4c2447e8b56c5db7f577/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=9144eabb893bf3cb4bad4c2447e8b56c5db7f577", "patch": "@@ -79,6 +79,14 @@ extern location_t input_location;\n \n extern location_t get_pure_location (location_t loc);\n \n+/* Get the start of any range encoded within location LOC.  */\n+\n+static inline location_t\n+get_start (location_t loc)\n+{\n+  return get_range_from_loc (line_table, loc).m_start;\n+}\n+\n /* Get the endpoint of any range encoded within location LOC.  */\n \n static inline location_t"}]}