{"sha": "7524f419ae7935594e7ec85daf7cdf736a835b04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUyNGY0MTlhZTc5MzU1OTRlN2VjODVkYWY3Y2RmNzM2YTgzNWIwNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-30T12:18:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-30T12:18:34Z"}, "message": "gimple-fold.c (fold_gimple_assign): Do not dispatch to fold () on single RHSs.\n\n2015-10-30  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-fold.c (fold_gimple_assign): Do not dispatch to\n\tfold () on single RHSs.  Allow CONSTRUCTORS with trailing\n\tzeros to be folded to VECTOR_CSTs.\n\t* tree.c (build_vector_from_ctor): Handle VECTOR_CST elements.\n\t* fold-const.c (fold): Use build_vector_from_ctor.\n\nFrom-SVN: r229574", "tree": {"sha": "3269624dbefe5c8fadf56f8111a9ab750dc67096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3269624dbefe5c8fadf56f8111a9ab750dc67096"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7524f419ae7935594e7ec85daf7cdf736a835b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7524f419ae7935594e7ec85daf7cdf736a835b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7524f419ae7935594e7ec85daf7cdf736a835b04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7524f419ae7935594e7ec85daf7cdf736a835b04/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04e3481107705d98ecd442657ee0b6b594e53b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e3481107705d98ecd442657ee0b6b594e53b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04e3481107705d98ecd442657ee0b6b594e53b78"}], "stats": {"total": 82, "additions": 38, "deletions": 44}, "files": [{"sha": "4e0d45d9c97af9af4a4c33a3454dd25318ebff6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7524f419ae7935594e7ec85daf7cdf736a835b04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7524f419ae7935594e7ec85daf7cdf736a835b04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7524f419ae7935594e7ec85daf7cdf736a835b04", "patch": "@@ -1,3 +1,11 @@\n+2015-10-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-fold.c (fold_gimple_assign): Do not dispatch to\n+\tfold () on single RHSs.  Allow CONSTRUCTORS with trailing\n+\tzeros to be folded to VECTOR_CSTs.\n+\t* tree.c (build_vector_from_ctor): Handle VECTOR_CST elements.\n+\t* fold-const.c (fold): Use build_vector_from_ctor.\n+\n 2015-10-30  Evandro Menezes  <e.menezes@samsung.com>\n \n \t* config/aarch64/aarch64.md (*movhf_aarch64): Change the type of"}, {"sha": "7c5b75a2684e2535aa38ab7e59640409c23b373e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7524f419ae7935594e7ec85daf7cdf736a835b04/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7524f419ae7935594e7ec85daf7cdf736a835b04/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7524f419ae7935594e7ec85daf7cdf736a835b04", "patch": "@@ -11968,26 +11968,13 @@ fold (tree expr)\n \tif (TREE_CODE (type) != VECTOR_TYPE)\n \t  return t;\n \n-\ttree *vec = XALLOCAVEC (tree, TYPE_VECTOR_SUBPARTS (type));\n-\tunsigned HOST_WIDE_INT idx, pos = 0;\n-\ttree value;\n-\n-\tFOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (t), idx, value)\n-\t  {\n-\t    if (!CONSTANT_CLASS_P (value))\n-\t      return t;\n-\t    if (TREE_CODE (value) == VECTOR_CST)\n-\t      {\n-\t\tfor (unsigned i = 0; i < VECTOR_CST_NELTS (value); ++i)\n-\t\t  vec[pos++] = VECTOR_CST_ELT (value, i);\n-\t      }\n-\t    else\n-\t      vec[pos++] = value;\n-\t  }\n-\tfor (; pos < TYPE_VECTOR_SUBPARTS (type); ++pos)\n-\t  vec[pos] = build_zero_cst (TREE_TYPE (type));\n+\tunsigned i;\n+\ttree val;\n+\tFOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (t), i, val)\n+\t  if (! CONSTANT_CLASS_P (val))\n+\t    return t;\n \n-\treturn build_vector (type, vec);\n+\treturn build_vector_from_ctor (type, CONSTRUCTOR_ELTS (t));\n       }\n \n     case CONST_DECL:"}, {"sha": "13a6219bf9d075392aeb94d5c62b1ceaecbf328f", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7524f419ae7935594e7ec85daf7cdf736a835b04/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7524f419ae7935594e7ec85daf7cdf736a835b04/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=7524f419ae7935594e7ec85daf7cdf736a835b04", "patch": "@@ -354,8 +354,8 @@ fold_gimple_assign (gimple_stmt_iterator *si)\n \t\t    return val;\n \t\t  }\n \t      }\n-\n \t  }\n+\n \telse if (TREE_CODE (rhs) == ADDR_EXPR)\n \t  {\n \t    tree ref = TREE_OPERAND (rhs, 0);\n@@ -370,21 +370,29 @@ fold_gimple_assign (gimple_stmt_iterator *si)\n \t    else if (TREE_CODE (ref) == MEM_REF\n \t\t     && integer_zerop (TREE_OPERAND (ref, 1)))\n \t      result = fold_convert (TREE_TYPE (rhs), TREE_OPERAND (ref, 0));\n+\n+\t    if (result)\n+\t      {\n+\t\t/* Strip away useless type conversions.  Both the\n+\t\t   NON_LVALUE_EXPR that may have been added by fold, and\n+\t\t   \"useless\" type conversions that might now be apparent\n+\t\t   due to propagation.  */\n+\t\tSTRIP_USELESS_TYPE_CONVERSION (result);\n+\n+\t\tif (result != rhs && valid_gimple_rhs_p (result))\n+\t\t  return result;\n+\t      }\n \t  }\n \n \telse if (TREE_CODE (rhs) == CONSTRUCTOR\n-\t\t && TREE_CODE (TREE_TYPE (rhs)) == VECTOR_TYPE\n-\t\t && (CONSTRUCTOR_NELTS (rhs)\n-\t\t     == TYPE_VECTOR_SUBPARTS (TREE_TYPE (rhs))))\n+\t\t && TREE_CODE (TREE_TYPE (rhs)) == VECTOR_TYPE)\n \t  {\n \t    /* Fold a constant vector CONSTRUCTOR to VECTOR_CST.  */\n \t    unsigned i;\n \t    tree val;\n \n \t    FOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (rhs), i, val)\n-\t      if (TREE_CODE (val) != INTEGER_CST\n-\t\t  && TREE_CODE (val) != REAL_CST\n-\t\t  && TREE_CODE (val) != FIXED_CST)\n+\t      if (! CONSTANT_CLASS_P (val))\n \t\treturn NULL_TREE;\n \n \t    return build_vector_from_ctor (TREE_TYPE (rhs),\n@@ -393,21 +401,6 @@ fold_gimple_assign (gimple_stmt_iterator *si)\n \n \telse if (DECL_P (rhs))\n \t  return get_symbol_constant_value (rhs);\n-\n-        /* If we couldn't fold the RHS, hand over to the generic\n-           fold routines.  */\n-        if (result == NULL_TREE)\n-          result = fold (rhs);\n-\n-        /* Strip away useless type conversions.  Both the NON_LVALUE_EXPR\n-           that may have been added by fold, and \"useless\" type\n-           conversions that might now be apparent due to propagation.  */\n-        STRIP_USELESS_TYPE_CONVERSION (result);\n-\n-        if (result != rhs && valid_gimple_rhs_p (result))\n-\t  return result;\n-\n-\treturn NULL_TREE;\n       }\n       break;\n "}, {"sha": "9228a6abd54b394567da9fff58234d68907c09c5", "filename": "gcc/tree.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7524f419ae7935594e7ec85daf7cdf736a835b04/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7524f419ae7935594e7ec85daf7cdf736a835b04/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7524f419ae7935594e7ec85daf7cdf736a835b04", "patch": "@@ -1729,13 +1729,19 @@ tree\n build_vector_from_ctor (tree type, vec<constructor_elt, va_gc> *v)\n {\n   tree *vec = XALLOCAVEC (tree, TYPE_VECTOR_SUBPARTS (type));\n-  unsigned HOST_WIDE_INT idx;\n+  unsigned HOST_WIDE_INT idx, pos = 0;\n   tree value;\n \n   FOR_EACH_CONSTRUCTOR_VALUE (v, idx, value)\n-    vec[idx] = value;\n+    {\n+      if (TREE_CODE (value) == VECTOR_CST)\n+\tfor (unsigned i = 0; i < VECTOR_CST_NELTS (value); ++i)\n+\t  vec[pos++] = VECTOR_CST_ELT (value, i);\n+      else\n+\tvec[pos++] = value;\n+    }\n   for (; idx < TYPE_VECTOR_SUBPARTS (type); ++idx)\n-    vec[idx] = build_zero_cst (TREE_TYPE (type));\n+    vec[pos++] = build_zero_cst (TREE_TYPE (type));\n \n   return build_vector (type, vec);\n }"}]}