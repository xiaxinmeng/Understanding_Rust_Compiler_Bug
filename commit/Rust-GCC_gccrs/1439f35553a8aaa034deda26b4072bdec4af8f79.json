{"sha": "1439f35553a8aaa034deda26b4072bdec4af8f79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQzOWYzNTU1M2E4YWFhMDM0ZGVkYTI2YjQwNzJiZGVjNGFmOGY3OQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-01-11T23:21:40Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-01-11T23:21:40Z"}, "message": "PR c++/88692, c++/87882 - -Wredundant-move false positive with *this.\n\n\t* typeck.c (maybe_warn_pessimizing_move): Return if ARG isn't\n\tADDR_EXPR.\n\n\t* g++.dg/cpp0x/Wredundant-move5.C: New test.\n\t* g++.dg/cpp0x/Wredundant-move6.C: New test.\n\nFrom-SVN: r267862", "tree": {"sha": "0118cad4ed344b3d30e541633c945294301995f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0118cad4ed344b3d30e541633c945294301995f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1439f35553a8aaa034deda26b4072bdec4af8f79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1439f35553a8aaa034deda26b4072bdec4af8f79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1439f35553a8aaa034deda26b4072bdec4af8f79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1439f35553a8aaa034deda26b4072bdec4af8f79/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "378b9abe569d030bbe33f74a55b55519da9bf4bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378b9abe569d030bbe33f74a55b55519da9bf4bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/378b9abe569d030bbe33f74a55b55519da9bf4bb"}], "stats": {"total": 113, "additions": 111, "deletions": 2}, "files": [{"sha": "9c661a5ced243548191217a2d00db172069568c7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1439f35553a8aaa034deda26b4072bdec4af8f79/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1439f35553a8aaa034deda26b4072bdec4af8f79/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1439f35553a8aaa034deda26b4072bdec4af8f79", "patch": "@@ -1,3 +1,9 @@\n+2019-01-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/88692, c++/87882 - -Wredundant-move false positive with *this.\n+\t* typeck.c (maybe_warn_pessimizing_move): Return if ARG isn't\n+\tADDR_EXPR.\n+\n 2019-01-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/88312 - pack expansion of decltype."}, {"sha": "43d2899a3c4ddb08df15f15cc07f952aef2fe125", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1439f35553a8aaa034deda26b4072bdec4af8f79/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1439f35553a8aaa034deda26b4072bdec4af8f79/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=1439f35553a8aaa034deda26b4072bdec4af8f79", "patch": "@@ -9412,8 +9412,9 @@ maybe_warn_pessimizing_move (tree retval, tree functype)\n \t{\n \t  tree arg = CALL_EXPR_ARG (fn, 0);\n \t  STRIP_NOPS (arg);\n-\t  if (TREE_CODE (arg) == ADDR_EXPR)\n-\t    arg = TREE_OPERAND (arg, 0);\n+\t  if (TREE_CODE (arg) != ADDR_EXPR)\n+\t    return;\n+\t  arg = TREE_OPERAND (arg, 0);\n \t  arg = convert_from_reference (arg);\n \t  /* Warn if we could do copy elision were it not for the move.  */\n \t  if (can_do_nrvo_p (arg, functype))"}, {"sha": "11845e3d0cc05cf264d6edd8870001a36b9dd441", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1439f35553a8aaa034deda26b4072bdec4af8f79/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1439f35553a8aaa034deda26b4072bdec4af8f79/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1439f35553a8aaa034deda26b4072bdec4af8f79", "patch": "@@ -1,3 +1,9 @@\n+2019-01-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/88692, c++/87882 - -Wredundant-move false positive with *this.\n+\t* g++.dg/cpp0x/Wredundant-move5.C: New test.\n+\t* g++.dg/cpp0x/Wredundant-move6.C: New test.\n+\n 2019-01-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/85956"}, {"sha": "0e2ec46d11e0689a5a1b680a9bb1160dcd572b55", "filename": "gcc/testsuite/g++.dg/cpp0x/Wredundant-move5.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1439f35553a8aaa034deda26b4072bdec4af8f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1439f35553a8aaa034deda26b4072bdec4af8f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move5.C?ref=1439f35553a8aaa034deda26b4072bdec4af8f79", "patch": "@@ -0,0 +1,53 @@\n+// PR c++/88692\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wredundant-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+struct X {\n+    X f() && {\n+        return std::move(*this); // { dg-bogus \"redundant move in return statement\" }\n+    }\n+\n+    X f2() & {\n+        return std::move(*this); // { dg-bogus \"redundant move in return statement\" }\n+    }\n+\n+    X f3() {\n+        return std::move(*this); // { dg-bogus \"redundant move in return statement\" }\n+    }\n+};\n+\n+struct S { int i; int j; };\n+\n+struct Y {\n+  S f1 (S s) {\n+    return std::move (s); // { dg-warning \"redundant move in return statement\" }\n+  }\n+\n+  S f2 (S* s) {\n+    return std::move (*s); // { dg-bogus \"redundant move in return statement\" }\n+  }\n+\n+  S f3 (S** s) {\n+    return std::move (**s); // { dg-bogus \"redundant move in return statement\" }\n+  }\n+};"}, {"sha": "5808a78638eaef344b5145fa4455955b19298106", "filename": "gcc/testsuite/g++.dg/cpp0x/Wredundant-move6.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1439f35553a8aaa034deda26b4072bdec4af8f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1439f35553a8aaa034deda26b4072bdec4af8f79/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move6.C?ref=1439f35553a8aaa034deda26b4072bdec4af8f79", "patch": "@@ -0,0 +1,43 @@\n+// PR c++/87882\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wredundant-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+struct Foo {\n+   Foo Bar() {\n+     return std::move(*this); // { dg-bogus \"redundant move in return statement\" }\n+   }\n+   Foo Baz() {\n+     return *this;\n+   }\n+  int i;\n+};\n+\n+void Move(Foo & f)\n+{\n+  f = Foo{}.Bar();\n+}\n+\n+void NoMove(Foo & f)\n+{\n+  f = Foo{}.Baz();\n+}"}]}