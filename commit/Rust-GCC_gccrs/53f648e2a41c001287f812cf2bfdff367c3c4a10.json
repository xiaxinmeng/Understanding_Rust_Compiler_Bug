{"sha": "53f648e2a41c001287f812cf2bfdff367c3c4a10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNmNjQ4ZTJhNDFjMDAxMjg3ZjgxMmNmMmJmZGZmMzY3YzNjNGExMA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2009-02-13T14:34:00Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-02-13T14:34:00Z"}, "message": "re PR target/39162 (Gcc doesn't warn __m256 when -mavx isn't used)\n\ngcc/\n\n2009-02-13  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/39162\n\t* config/i386/i386.c (type_natural_mode): Add a new argument.\n\tReturn the original mode and warn ABI change if vector size\n\tis 32byte.\n\t(function_arg_advance): Updated.\n\t(function_arg): Likewise.\n\t(ix86_function_value): Likewise.\n\t(ix86_return_in_memory): Likewise.\n\t(ix86_sol10_return_in_memory): Likewise.\n\t(ix86_gimplify_va_arg): Likewise.\n\t(function_arg_32): Don't warn ABX ABI change here.\n\t(function_arg_64): Likewise.\n\ngcc/testsuite/\n\n2009-02-13  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/39162\n\t* gcc.target/i386/pr39162.c: New.\n\nFrom-SVN: r144157", "tree": {"sha": "eb753e0a3b9428309f906cc65200bfdb06a71419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb753e0a3b9428309f906cc65200bfdb06a71419"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53f648e2a41c001287f812cf2bfdff367c3c4a10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f648e2a41c001287f812cf2bfdff367c3c4a10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53f648e2a41c001287f812cf2bfdff367c3c4a10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f648e2a41c001287f812cf2bfdff367c3c4a10/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df20009b99bc5938598de5397d291655190df2a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df20009b99bc5938598de5397d291655190df2a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df20009b99bc5938598de5397d291655190df2a6"}], "stats": {"total": 100, "additions": 67, "deletions": 33}, "files": [{"sha": "56ef5774ee9c225175ac2ee5dc073bb7df7c6b0e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f648e2a41c001287f812cf2bfdff367c3c4a10/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f648e2a41c001287f812cf2bfdff367c3c4a10/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53f648e2a41c001287f812cf2bfdff367c3c4a10", "patch": "@@ -1,3 +1,18 @@\n+2009-02-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/39162\n+\t* config/i386/i386.c (type_natural_mode): Add a new argument.\n+\tReturn the original mode and warn ABI change if vector size\n+\tis 32byte.\n+\t(function_arg_advance): Updated.\n+\t(function_arg): Likewise.\n+\t(ix86_function_value): Likewise.\n+\t(ix86_return_in_memory): Likewise.\n+\t(ix86_sol10_return_in_memory): Likewise.\n+\t(ix86_gimplify_va_arg): Likewise.\n+\t(function_arg_32): Don't warn ABX ABI change here.\n+\t(function_arg_64): Likewise.\n+\n 2008-02-13  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* loop-iv.c (implies_p): In the final case, test that operands 0"}, {"sha": "3a543360382fad11bdc5f521fecd7a7f0f0c0dba", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f648e2a41c001287f812cf2bfdff367c3c4a10/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f648e2a41c001287f812cf2bfdff367c3c4a10/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=53f648e2a41c001287f812cf2bfdff367c3c4a10", "patch": "@@ -4719,17 +4719,21 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n    modes, the generic vector support in gcc will choose some non-vector mode\n    in order to implement the type.  By computing the natural mode, we'll\n    select the proper ABI location for the operand and not depend on whatever\n-   the middle-end decides to do with these vector types.  */\n+   the middle-end decides to do with these vector types.\n+\n+   The midde-end can't deal with the vector types > 16 bytes.  In this\n+   case, we return the original mode and warn ABI change if CUM isn't\n+   NULL.  */\n \n static enum machine_mode\n-type_natural_mode (const_tree type)\n+type_natural_mode (const_tree type, CUMULATIVE_ARGS *cum)\n {\n   enum machine_mode mode = TYPE_MODE (type);\n \n   if (TREE_CODE (type) == VECTOR_TYPE && !VECTOR_MODE_P (mode))\n     {\n       HOST_WIDE_INT size = int_size_in_bytes (type);\n-      if ((size == 8 || size == 16)\n+      if ((size == 8 || size == 16 || size == 32)\n \t  /* ??? Generic code allows us to create width 1 vectors.  Ignore.  */\n \t  && TYPE_VECTOR_SUBPARTS (type) > 1)\n \t{\n@@ -4744,7 +4748,24 @@ type_natural_mode (const_tree type)\n \t  for (; mode != VOIDmode; mode = GET_MODE_WIDER_MODE (mode))\n \t    if (GET_MODE_NUNITS (mode) == TYPE_VECTOR_SUBPARTS (type)\n \t\t&& GET_MODE_INNER (mode) == innermode)\n-\t      return mode;\n+\t      {\n+\t\tif (size == 32 && !TARGET_AVX)\n+\t\t  {\n+\t\t    static bool warnedavx;\n+\n+\t\t    if (cum\n+\t\t\t&& !warnedavx \n+\t\t\t&& cum->warn_avx)\n+\t\t      {\n+\t\t\twarnedavx = true;\n+\t\t\twarning (0, \"AVX vector argument without AVX \"\n+\t\t\t\t \" enabled changes the ABI\");\n+\t\t      }\n+\t\t    return TYPE_MODE (type);\n+\t\t  }\n+\t\telse\n+\t\t  return mode;\n+\t      }\n \n \t  gcc_unreachable ();\n \t}\n@@ -5539,7 +5560,7 @@ function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   words = (bytes + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n \n   if (type)\n-    mode = type_natural_mode (type);\n+    mode = type_natural_mode (type, NULL);\n \n   if (TARGET_64BIT && (cum ? cum->call_abi : DEFAULT_ABI) == MS_ABI)\n     function_arg_advance_ms_64 (cum, bytes, words);\n@@ -5567,7 +5588,7 @@ function_arg_32 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t\t enum machine_mode orig_mode, tree type,\n \t\t HOST_WIDE_INT bytes, HOST_WIDE_INT words)\n {\n-  static bool warnedavx, warnedsse, warnedmmx;\n+  static bool warnedsse, warnedmmx;\n \n   /* Avoid the AL settings for the Unix64 ABI.  */\n   if (mode == VOIDmode)\n@@ -5647,12 +5668,6 @@ function_arg_32 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     case V4DImode:\n       if (!type || !AGGREGATE_TYPE_P (type))\n \t{\n-\t  if (!TARGET_AVX && !warnedavx && cum->warn_avx)\n-\t    {\n-\t      warnedavx = true;\n-\t      warning (0, \"AVX vector argument without AVX enabled \"\n-\t\t       \"changes the ABI\");\n-\t    }\n \t  if (cum->sse_nregs)\n \t    return gen_reg_or_parallel (mode, orig_mode,\n \t\t\t\t        cum->sse_regno + FIRST_SSE_REG);\n@@ -5686,8 +5701,6 @@ static rtx\n function_arg_64 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t\t enum machine_mode orig_mode, tree type, int named)\n {\n-  static bool warnedavx;\n-\n   /* Handle a hidden AL argument containing number of registers\n      for varargs x86-64 functions.  */\n   if (mode == VOIDmode)\n@@ -5713,15 +5726,6 @@ function_arg_64 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     case V4DImode:\n       /* In 64bit, we pass TImode in interger registers and OImode on\n \t stack.  */\n-      if (!type || !AGGREGATE_TYPE_P (type))\n-\t{\n-\t  if (!TARGET_AVX && !warnedavx && cum->warn_avx)\n-\t    {\n-\t      warnedavx = true;\n-\t      warning (0, \"AVX vector argument without AVX enabled \"\n-\t\t       \"changes the ABI\");\n-\t    }\n-\t}\n \n       /* Unnamed 256bit vector mode parameters are passed on stack.  */\n       if (!named)\n@@ -5799,7 +5803,7 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode omode,\n   /* To simplify the code below, represent vector types with a vector mode\n      even if MMX/SSE are not active.  */\n   if (type && TREE_CODE (type) == VECTOR_TYPE)\n-    mode = type_natural_mode (type);\n+    mode = type_natural_mode (type, cum);\n \n   if (TARGET_64BIT && (cum ? cum->call_abi : DEFAULT_ABI) == MS_ABI)\n     return function_arg_ms_64 (cum, mode, omode, named, bytes);\n@@ -6115,7 +6119,7 @@ ix86_function_value (const_tree valtype, const_tree fntype_or_decl,\n   enum machine_mode mode, orig_mode;\n \n   orig_mode = TYPE_MODE (valtype);\n-  mode = type_natural_mode (valtype);\n+  mode = type_natural_mode (valtype, NULL);\n   return ix86_function_value_1 (valtype, fntype_or_decl, orig_mode, mode);\n }\n \n@@ -6191,14 +6195,14 @@ ix86_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n #ifdef SUBTARGET_RETURN_IN_MEMORY\n   return SUBTARGET_RETURN_IN_MEMORY (type, fntype);\n #else\n-   const enum machine_mode mode = type_natural_mode (type);\n+  const enum machine_mode mode = type_natural_mode (type, NULL);\n  \n   if (TARGET_64BIT_MS_ABI)\n-     return return_in_memory_ms_64 (type, mode);\n-   else if (TARGET_64BIT)\n-     return return_in_memory_64 (type, mode);\n-   else\n-     return return_in_memory_32 (type, mode);\n+    return return_in_memory_ms_64 (type, mode);\n+  else if (TARGET_64BIT)\n+    return return_in_memory_64 (type, mode);\n+  else\n+    return return_in_memory_32 (type, mode);\n #endif\n }\n \n@@ -6211,7 +6215,7 @@ bool\n ix86_sol10_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n   int size;\n-  enum machine_mode mode = type_natural_mode (type);\n+  enum machine_mode mode = type_natural_mode (type, NULL);\n \n   if (TARGET_64BIT)\n     return return_in_memory_64 (type, mode);\n@@ -6665,7 +6669,7 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   size = int_size_in_bytes (type);\n   rsize = (size + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n \n-  nat_mode = type_natural_mode (type);\n+  nat_mode = type_natural_mode (type, NULL);\n   switch (nat_mode)\n     {\n     case V8SFmode:"}, {"sha": "cb75a981e9634a83619cde140661d736c5843404", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f648e2a41c001287f812cf2bfdff367c3c4a10/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f648e2a41c001287f812cf2bfdff367c3c4a10/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53f648e2a41c001287f812cf2bfdff367c3c4a10", "patch": "@@ -1,3 +1,8 @@\n+2009-02-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/39162\n+\t* gcc.target/i386/pr39162.c: New.\n+\n 2009-02-13  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/35444"}, {"sha": "2d114b8fd00113216cc23e9fd10b4e826f498d8d", "filename": "gcc/testsuite/gcc.target/i386/pr39162.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f648e2a41c001287f812cf2bfdff367c3c4a10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39162.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f648e2a41c001287f812cf2bfdff367c3c4a10/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39162.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39162.c?ref=53f648e2a41c001287f812cf2bfdff367c3c4a10", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mno-avx\" } */\n+\n+typedef long long __m256i __attribute__ ((__vector_size__ (32), __may_alias__));\n+\n+__m256i\n+bar (__m256i x) /* { dg-warning \"AVX\" \"\" } */\n+{\n+  return x;\n+}"}]}