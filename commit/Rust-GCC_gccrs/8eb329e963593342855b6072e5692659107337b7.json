{"sha": "8eb329e963593342855b6072e5692659107337b7", "node_id": "C_kwDOANBUbNoAKDhlYjMyOWU5NjM1OTMzNDI4NTViNjA3MmU1NjkyNjU5MTA3MzM3Yjc", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-06T15:47:48Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-06T15:47:48Z"}, "message": "c++: dependent noexcept-spec on defaulted comparison op [PR96242]\n\nHere we're failing to instantiate the defaulted comparison op's\nexplicit dependent noexcept-spec.  The problem is ultimately that\nmark_used relies on maybe_instantiate_noexcept to synthesize a defaulted\ncomparison op, but the relevant DECL_MAYBE_DELETED fn handling in m_i_n\nis intended for such functions whose noexcept-spec wasn't explicitly\nprovided (and is therefore determined via synthesis), so m_i_n just\nexits early afterwards, without considering that the synthesized fn may\nhave an explicit noexcept-spec that needs instantiating.\n\nThis patch fixes this issue by making mark_used directly synthesize a\nDECL_MAYBE_DELETED fn before calling maybe_instantiate_noexcept.  And\nin turn, we can properly restrict the DECL_MAYBE_DELETED fn synthesis\nin m_i_n to only those without an explicit noexcept-spec.\n\n\tPR c++/96242\n\ngcc/cp/ChangeLog:\n\n\t* decl2.cc (mark_used): Directly synthesize a DECL_MAYBE_DELETED\n\tfn by calling maybe_synthesize_method instead of relying on\n\tmaybe_instantiate_noexcept.  Move call to m_i_n after the\n\tDECL_DELETED_FN handling.\n\t* pt.cc (maybe_instantiate_noexcept): Restrict DECL_MAYBE_DELETED\n\tfn synthesis to only those with an implicit noexcept-spec, and\n\treturn !DECL_DELETED_FN instead of !DECL_MAYBE_DELETED afterwards.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/spaceship-synth15.C: New test.", "tree": {"sha": "b861c67b6cd3240eb26404f2152626924f5cbbf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b861c67b6cd3240eb26404f2152626924f5cbbf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8eb329e963593342855b6072e5692659107337b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb329e963593342855b6072e5692659107337b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eb329e963593342855b6072e5692659107337b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb329e963593342855b6072e5692659107337b7/comments", "author": null, "committer": null, "parents": [{"sha": "f9e900ce9b17dc7d3a3809d0b0648ebe529a87c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9e900ce9b17dc7d3a3809d0b0648ebe529a87c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9e900ce9b17dc7d3a3809d0b0648ebe529a87c5"}], "stats": {"total": 76, "additions": 53, "deletions": 23}, "files": [{"sha": "789083399893c7b226b65e240e0d3ea658d38cf2", "filename": "gcc/cp/decl2.cc", "status": "modified", "additions": 25, "deletions": 18, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb329e963593342855b6072e5692659107337b7/gcc%2Fcp%2Fdecl2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb329e963593342855b6072e5692659107337b7/gcc%2Fcp%2Fdecl2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.cc?ref=8eb329e963593342855b6072e5692659107337b7", "patch": "@@ -5772,27 +5772,34 @@ mark_used (tree decl, tsubst_flags_t complain)\n   if (TREE_CODE (decl) == CONST_DECL)\n     used_types_insert (DECL_CONTEXT (decl));\n \n-  if (TREE_CODE (decl) == FUNCTION_DECL\n-      && !DECL_DELETED_FN (decl)\n-      && !maybe_instantiate_noexcept (decl, complain))\n-    return false;\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    {\n+      if (DECL_MAYBE_DELETED (decl))\n+\t{\n+\t  ++function_depth;\n+\t  maybe_synthesize_method (decl);\n+\t  --function_depth;\n+\t}\n \n-  if (TREE_CODE (decl) == FUNCTION_DECL\n-      && DECL_DELETED_FN (decl))\n-    {\n-      if (DECL_ARTIFICIAL (decl)\n-\t  && DECL_CONV_FN_P (decl)\n-\t  && LAMBDA_TYPE_P (DECL_CONTEXT (decl)))\n-\t/* We mark a lambda conversion op as deleted if we can't\n-\t   generate it properly; see maybe_add_lambda_conv_op.  */\n-\tsorry (\"converting lambda that uses %<...%> to function pointer\");\n-      else if (complain & tf_error)\n+      if (DECL_DELETED_FN (decl))\n \t{\n-\t  error (\"use of deleted function %qD\", decl);\n-\t  if (!maybe_explain_implicit_delete (decl))\n-\t    inform (DECL_SOURCE_LOCATION (decl), \"declared here\");\n+\t  if (DECL_ARTIFICIAL (decl)\n+\t      && DECL_CONV_FN_P (decl)\n+\t      && LAMBDA_TYPE_P (DECL_CONTEXT (decl)))\n+\t    /* We mark a lambda conversion op as deleted if we can't\n+\t       generate it properly; see maybe_add_lambda_conv_op.  */\n+\t    sorry (\"converting lambda that uses %<...%> to function pointer\");\n+\t  else if (complain & tf_error)\n+\t    {\n+\t      error (\"use of deleted function %qD\", decl);\n+\t      if (!maybe_explain_implicit_delete (decl))\n+\t\tinform (DECL_SOURCE_LOCATION (decl), \"declared here\");\n+\t    }\n+\t  return false;\n \t}\n-      return false;\n+\n+      if (!maybe_instantiate_noexcept (decl, complain))\n+\treturn false;\n     }\n \n   if (VAR_OR_FUNCTION_DECL_P (decl) && DECL_LOCAL_DECL_P (decl))"}, {"sha": "c7af4712d8bc6d58e1f0aa138b924e630cc687b2", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb329e963593342855b6072e5692659107337b7/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb329e963593342855b6072e5692659107337b7/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=8eb329e963593342855b6072e5692659107337b7", "patch": "@@ -25981,7 +25981,11 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n       && (!flag_noexcept_type || type_dependent_expression_p (fn)))\n     return true;\n \n-  if (DECL_MAYBE_DELETED (fn))\n+  tree fntype = TREE_TYPE (fn);\n+  tree spec = TYPE_RAISES_EXCEPTIONS (fntype);\n+\n+  if ((!spec || UNEVALUATED_NOEXCEPT_SPEC_P (spec))\n+      && DECL_MAYBE_DELETED (fn))\n     {\n       if (fn == current_function_decl)\n \t/* We're in start_preparsed_function, keep going.  */\n@@ -25990,12 +25994,9 @@ maybe_instantiate_noexcept (tree fn, tsubst_flags_t complain)\n       ++function_depth;\n       maybe_synthesize_method (fn);\n       --function_depth;\n-      return !DECL_MAYBE_DELETED (fn);\n+      return !DECL_DELETED_FN (fn);\n     }\n \n-  tree fntype = TREE_TYPE (fn);\n-  tree spec = TYPE_RAISES_EXCEPTIONS (fntype);\n-\n   if (!spec || !TREE_PURPOSE (spec))\n     return true;\n "}, {"sha": "00ea6c10474481ae74a02daf184f270bd40b8fcf", "filename": "gcc/testsuite/g++.dg/cpp2a/spaceship-synth15.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8eb329e963593342855b6072e5692659107337b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8eb329e963593342855b6072e5692659107337b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fspaceship-synth15.C?ref=8eb329e963593342855b6072e5692659107337b7", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/96242\n+// { dg-do compile { target c++20 } }\n+\n+#include <compare>\n+\n+template<bool B>\n+struct X {\n+  auto operator<=>(const X&) const noexcept(B) = default;\n+  bool operator==(const X&) const noexcept(!B) = default;\n+};\n+\n+X<true> x_t;\n+static_assert(noexcept(x_t <=> x_t));\n+static_assert(noexcept(x_t < x_t));\n+static_assert(!noexcept(x_t == x_t));\n+static_assert(!noexcept(x_t != x_t));\n+\n+X<false> x_f;\n+static_assert(!noexcept(x_f <=> x_f));\n+static_assert(!noexcept(x_f < x_f));\n+static_assert(noexcept(x_f == x_f));\n+static_assert(noexcept(x_f != x_f));"}]}