{"sha": "fc531c2ed3ce456efca946e995544b216b3c16df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM1MzFjMmVkM2NlNDU2ZWZjYTk0NmU5OTU1NDRiMjE2YjNjMTZkZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-12T09:46:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-12T09:46:04Z"}, "message": "c++: Fix up constexpr CLEANUP_POINT_EXPR and TRY_FINALLY_EXPR handling [PR97790]\n\nAs the testcase shows, CLEANUP_POINT_EXPR (and I think TRY_FINALLY_EXPR too)\nsuffer from the same problem that I was trying to fix in\nr10-3597-g1006c9d4395a939820df76f37c7b085a4a1a003f\nfor CLEANUP_STMT, namely that if in the middle of the body expression of\nthose stmts is e.g. return stmt, goto, break or continue (something that\nchanges *jump_target and makes it start skipping stmts), we then skip the\ncleanups too, which is not appropriate - the cleanups were either queued up\nduring the non-skipping execution of the body (for CLEANUP_POINT_EXPR), or\nfor TRY_FINALLY_EXPR are relevant already after entering the body block.\n\n> Would it make sense to always use a NULL jump_target when evaluating\n> cleanups?\n\nI was afraid of that, especially for TRY_FINALLY_EXPR, but it seems that\nduring constexpr evaluation the cleanups will most often be just very simple\ndestructor calls (or calls to cleanup attribute functions).\nFurthermore, for neither of these 3 tree codes we'll reach that code if\njump_target && *jump_target initially (there is a return NULL_TREE much\nearlier for those except for trees that could embed labels etc. in it and\nclearly these 3 don't count in that).\n\n2020-11-12  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/97790\n\t* constexpr.c (cxx_eval_constant_expression) <case CLEANUP_POINT_EXPR,\n\tcase TRY_FINALLY_EXPR, case CLEANUP_STMT>: Don't pass jump_target to\n\tcxx_eval_constant_expression when evaluating the cleanups.\n\n\t* g++.dg/cpp2a/constexpr-dtor9.C: New test.", "tree": {"sha": "6ba352f249b3f50b27fc48f9f0b9a109848a945a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ba352f249b3f50b27fc48f9f0b9a109848a945a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc531c2ed3ce456efca946e995544b216b3c16df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc531c2ed3ce456efca946e995544b216b3c16df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc531c2ed3ce456efca946e995544b216b3c16df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc531c2ed3ce456efca946e995544b216b3c16df/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d9ade39b8720b61cf63a8be181fb3b487f6ac5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9ade39b8720b61cf63a8be181fb3b487f6ac5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d9ade39b8720b61cf63a8be181fb3b487f6ac5b"}], "stats": {"total": 65, "additions": 43, "deletions": 22}, "files": [{"sha": "e6ab5eecd68eec4a521835596e9272e44d654803", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc531c2ed3ce456efca946e995544b216b3c16df/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc531c2ed3ce456efca946e995544b216b3c16df/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=fc531c2ed3ce456efca946e995544b216b3c16df", "patch": "@@ -6018,8 +6018,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t/* Evaluate the cleanups.  */\n \tFOR_EACH_VEC_ELT_REVERSE (cleanups, i, cleanup)\n \t  cxx_eval_constant_expression (ctx, cleanup, false,\n-\t\t\t\t\tnon_constant_p, overflow_p,\n-\t\t\t\t\tjump_target);\n+\t\t\t\t\tnon_constant_p, overflow_p);\n       }\n       break;\n \n@@ -6030,29 +6029,20 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       if (!*non_constant_p)\n \t/* Also evaluate the cleanup.  */\n \tcxx_eval_constant_expression (ctx, TREE_OPERAND (t, 1), true,\n-\t\t\t\t      non_constant_p, overflow_p,\n-\t\t\t\t      jump_target);\n+\t\t\t\t      non_constant_p, overflow_p);\n       break;\n \n     case CLEANUP_STMT:\n-      {\n-\ttree initial_jump_target = jump_target ? *jump_target : NULL_TREE;\n-\tr = cxx_eval_constant_expression (ctx, CLEANUP_BODY (t), lval,\n-\t\t\t\t\t  non_constant_p, overflow_p,\n-\t\t\t\t\t  jump_target);\n-\tif (!CLEANUP_EH_ONLY (t) && !*non_constant_p)\n-\t  {\n-\t    iloc_sentinel ils (loc);\n-\t    /* Also evaluate the cleanup.  If we weren't skipping at the\n-\t       start of the CLEANUP_BODY, change jump_target temporarily\n-\t       to &initial_jump_target, so that even a return or break or\n-\t       continue in the body doesn't skip the cleanup.  */\n-\t    cxx_eval_constant_expression (ctx, CLEANUP_EXPR (t), true,\n-\t\t\t\t\t  non_constant_p, overflow_p,\n-\t\t\t\t\t  jump_target ? &initial_jump_target\n-\t\t\t\t\t  : NULL);\n-\t  }\n-      }\n+      r = cxx_eval_constant_expression (ctx, CLEANUP_BODY (t), lval,\n+\t\t\t\t\tnon_constant_p, overflow_p,\n+\t\t\t\t\tjump_target);\n+      if (!CLEANUP_EH_ONLY (t) && !*non_constant_p)\n+\t{\n+\t  iloc_sentinel ils (loc);\n+\t  /* Also evaluate the cleanup.  */\n+\t  cxx_eval_constant_expression (ctx, CLEANUP_EXPR (t), true,\n+\t\t\t\t\tnon_constant_p, overflow_p);\n+\t}\n       break;\n \n       /* These differ from cxx_eval_unary_expression in that this doesn't"}, {"sha": "975e5fcfdfd3b8bf125b0e8f6b1ac5c0602cb8e4", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor9.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc531c2ed3ce456efca946e995544b216b3c16df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc531c2ed3ce456efca946e995544b216b3c16df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor9.C?ref=fc531c2ed3ce456efca946e995544b216b3c16df", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/97790\n+// { dg-do compile { target c++20 } }\n+\n+struct S\n+{\n+  int *d;\n+  int n;\n+  constexpr S () : d(new int[1]{}), n(1) {}\n+  constexpr ~S () { delete [] d; }\n+};\n+\n+constexpr S\n+foo ()\n+{\n+  return S ();\n+}\n+\n+constexpr int\n+bar ()\n+{\n+  return foo ().n;\n+}\n+\n+constexpr int\n+baz ()\n+{\n+  return S ().n;\n+}\n+\n+constexpr int a = baz ();\n+constexpr int b = bar ();"}]}