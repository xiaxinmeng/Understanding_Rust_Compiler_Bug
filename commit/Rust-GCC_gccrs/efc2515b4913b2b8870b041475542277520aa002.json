{"sha": "efc2515b4913b2b8870b041475542277520aa002", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZjMjUxNWI0OTEzYjJiODg3MGIwNDE0NzU1NDIyNzc1MjBhYTAwMg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2003-10-17T14:45:47Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-10-17T14:45:47Z"}, "message": "arm.c (use_return_insn): Not a single instruction, if there's a frame pointer.\n\n\t* config/arm/arm.c (use_return_insn): Not a single instruction, if\n\tthere's a frame pointer.\n\t(arm_output_epilogue): Protect stack pointer from being corrupted\n\ton interrupt.\n\nCo-Authored-By: Nathan Sidwell <nathan@codesourcery.com>\n\nFrom-SVN: r72606", "tree": {"sha": "431e646419600f7ff50a09192331f97028048699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/431e646419600f7ff50a09192331f97028048699"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efc2515b4913b2b8870b041475542277520aa002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc2515b4913b2b8870b041475542277520aa002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc2515b4913b2b8870b041475542277520aa002", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc2515b4913b2b8870b041475542277520aa002/comments", "author": null, "committer": null, "parents": [{"sha": "51a785a03619403e4dec65d83553edb5bdff0f75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a785a03619403e4dec65d83553edb5bdff0f75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51a785a03619403e4dec65d83553edb5bdff0f75"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "912074a9ea10bc75edd934bbd6149ecd8bff5a3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc2515b4913b2b8870b041475542277520aa002/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc2515b4913b2b8870b041475542277520aa002/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efc2515b4913b2b8870b041475542277520aa002", "patch": "@@ -1,3 +1,11 @@\n+2003-10-17  Richard Earnshaw <rearnsha@arm.com>\n+\t    Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/arm/arm.c (use_return_insn): Not a single instruction, if\n+\tthere's a frame pointer.\n+\t(arm_output_epilogue): Protect stack pointer from being corrupted\n+\ton interrupt.\n+\n 2003-10-17  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* ifcvt.c (noce_try_addcc): Handle ifs with 'else' case."}, {"sha": "70ea4cda89a8adaab09fb13a0f3b184f9cc64799", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efc2515b4913b2b8870b041475542277520aa002/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efc2515b4913b2b8870b041475542277520aa002/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=efc2515b4913b2b8870b041475542277520aa002", "patch": "@@ -986,7 +986,11 @@ use_return_insn (int iscond)\n   /* Never use a return instruction before reload has run.  */\n   if (!reload_completed)\n     return 0;\n-      \n+\n+  /* We need two instructions when there's a frame pointer. */\n+  if (frame_pointer_needed)\n+    return 0;\n+  \n   func_type = arm_current_func_type ();\n \n   /* Naked functions and volatile functions need special\n@@ -8500,8 +8504,18 @@ arm_output_epilogue (int really_return)\n \tsaved_regs_mask &= ~ (1 << LR_REGNUM);\n       else\n \tsaved_regs_mask &= ~ (1 << PC_REGNUM);\n-      \n-      print_multi_reg (f, \"ldmea\\t%r\", FP_REGNUM, saved_regs_mask);\n+\n+      /* We must use SP as the base register, because SP is one of the\n+         registers being restored.  If an interrupt or page fault\n+         happens in the ldm instruction, the SP might or might not\n+         have been restored.  That would be bad, as then SP will no\n+         longer indicate the safe area of stack, and we can get stack\n+         corruption.  Using SP as the base register means that it will\n+         be reset correctly to the original value, should an interrupt\n+         occur.  */\n+      asm_fprintf (f, \"\\tsub\\t%r,%r,#%d\\n\", SP_REGNUM, FP_REGNUM,\n+\t\t   4 * bit_count (saved_regs_mask));\n+      print_multi_reg (f, \"ldmfd\\t%r\", SP_REGNUM, saved_regs_mask);\n \n       if (IS_INTERRUPT (func_type))\n \t/* Interrupt handlers will have pushed the"}]}