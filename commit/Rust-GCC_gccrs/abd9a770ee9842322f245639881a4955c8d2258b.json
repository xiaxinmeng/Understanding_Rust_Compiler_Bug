{"sha": "abd9a770ee9842322f245639881a4955c8d2258b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJkOWE3NzBlZTk4NDIzMjJmMjQ1NjM5ODgxYTQ5NTVjOGQyMjU4Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-05-21T22:49:05Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-05-21T22:49:05Z"}, "message": "sparc.md (setjmp): Handle PIC mode and use the hard frame pointer.\n\n\t* config/sparc/sparc.md (setjmp): Handle PIC mode and use the hard\n\tframe pointer.\n\nFrom-SVN: r174013", "tree": {"sha": "5d8787561526867d0b4b549db5b50814501ced81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d8787561526867d0b4b549db5b50814501ced81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abd9a770ee9842322f245639881a4955c8d2258b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd9a770ee9842322f245639881a4955c8d2258b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd9a770ee9842322f245639881a4955c8d2258b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd9a770ee9842322f245639881a4955c8d2258b/comments", "author": null, "committer": null, "parents": [{"sha": "bd9a3248ab251b7ba3560b80e589cd55e05a5a8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9a3248ab251b7ba3560b80e589cd55e05a5a8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd9a3248ab251b7ba3560b80e589cd55e05a5a8d"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "80233d7eff9517f6073ef188cc9cc0f94d46cb25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd9a770ee9842322f245639881a4955c8d2258b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd9a770ee9842322f245639881a4955c8d2258b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abd9a770ee9842322f245639881a4955c8d2258b", "patch": "@@ -1,3 +1,8 @@\n+2011-05-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.md (setjmp): Handle PIC mode and use the hard\n+\tframe pointer.\n+\n 2011-05-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc.c (eligible_for_return_delay): Do not return"}, {"sha": "5e16179a62b288150ec14a69bcfc9889540aa95e", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd9a770ee9842322f245639881a4955c8d2258b/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd9a770ee9842322f245639881a4955c8d2258b/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=abd9a770ee9842322f245639881a4955c8d2258b", "patch": "@@ -6507,8 +6507,8 @@\n \t\t      (const_int 4)))])\n \n ;; For __builtin_setjmp we need to flush register windows iff the function\n-;; calls alloca as well, because otherwise the register window might be\n-;; saved after %sp adjustment and thus setjmp would crash\n+;; calls alloca as well, because otherwise the current register window might\n+;; be saved after the %sp adjustment and thus setjmp would crash.\n (define_expand \"builtin_setjmp_setup\"\n   [(match_operand 0 \"register_operand\" \"r\")]\n   \"\"\n@@ -6547,19 +6547,26 @@\n                (eq_attr \"pic\" \"true\")\n                  (const_int 4)] (const_int 3)))])\n \n-;; Pattern for use after a setjmp to store FP and the return register\n-;; into the stack area.\n+;; Pattern for use after a setjmp to store registers into the save area.\n \n (define_expand \"setjmp\"\n   [(const_int 0)]\n   \"\"\n {\n   rtx mem;\n-  \n+\n+  if (flag_pic)\n+    {\n+      mem = gen_rtx_MEM (Pmode,\n+\t\t\t plus_constant (stack_pointer_rtx,\n+\t\t\t\t\tSPARC_STACK_BIAS + 7 * UNITS_PER_WORD));\n+      emit_insn (gen_rtx_SET (VOIDmode, mem, pic_offset_table_rtx));\n+    }\n+\n   mem = gen_rtx_MEM (Pmode,\n \t\t     plus_constant (stack_pointer_rtx,\n \t\t\t\t    SPARC_STACK_BIAS + 14 * UNITS_PER_WORD));\n-  emit_insn (gen_rtx_SET (VOIDmode, mem, frame_pointer_rtx));\n+  emit_insn (gen_rtx_SET (VOIDmode, mem, hard_frame_pointer_rtx));\n \n   mem = gen_rtx_MEM (Pmode,\n \t\t     plus_constant (stack_pointer_rtx,"}]}