{"sha": "2ed356a4c9af0629d9d5fd30969e432de6302cb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVkMzU2YTRjOWFmMDYyOWQ5ZDVmZDMwOTY5ZTQzMmRlNjMwMmNiMw==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-08-24T15:01:47Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-08-24T18:46:02Z"}, "message": "rs6000: Add Power9 builtins\n\n2021-08-24  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-builtin-new.def: Add power9-vector, power9,\n\tand power9-64 stanzas.", "tree": {"sha": "affe6a0515c97363c5f82b23f99a847fbb616a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/affe6a0515c97363c5f82b23f99a847fbb616a28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ed356a4c9af0629d9d5fd30969e432de6302cb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ed356a4c9af0629d9d5fd30969e432de6302cb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ed356a4c9af0629d9d5fd30969e432de6302cb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ed356a4c9af0629d9d5fd30969e432de6302cb3/comments", "author": null, "committer": null, "parents": [{"sha": "3c496e92d795a8fe5c527e3c5b5a6606669ae50d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c496e92d795a8fe5c527e3c5b5a6606669ae50d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c496e92d795a8fe5c527e3c5b5a6606669ae50d"}], "stats": {"total": 368, "additions": 368, "deletions": 0}, "files": [{"sha": "04627977b55adc9f87c47d9f182961441fde4aee", "filename": "gcc/config/rs6000/rs6000-builtin-new.def", "status": "modified", "additions": 368, "deletions": 0, "changes": 368, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ed356a4c9af0629d9d5fd30969e432de6302cb3/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ed356a4c9af0629d9d5fd30969e432de6302cb3/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin-new.def?ref=2ed356a4c9af0629d9d5fd30969e432de6302cb3", "patch": "@@ -2438,3 +2438,371 @@\n \n   const double __builtin_vsx_xscvspdpn (vf);\n     XSCVSPDPN vsx_xscvspdpn {}\n+\n+\n+; Power9 vector builtins.\n+[power9-vector]\n+  const vss __builtin_altivec_convert_4f32_8f16 (vf, vf);\n+    CONVERT_4F32_8F16 convert_4f32_8f16 {}\n+\n+  const vss __builtin_altivec_convert_4f32_8i16 (vf, vf);\n+    CONVERT_4F32_8I16 convert_4f32_8i16 {}\n+\n+  const signed int __builtin_altivec_first_match_index_v16qi (vsc, vsc);\n+    VFIRSTMATCHINDEX_V16QI first_match_index_v16qi {}\n+\n+  const signed int __builtin_altivec_first_match_index_v8hi (vss, vss);\n+    VFIRSTMATCHINDEX_V8HI first_match_index_v8hi {}\n+\n+  const signed int __builtin_altivec_first_match_index_v4si (vsi, vsi);\n+    VFIRSTMATCHINDEX_V4SI first_match_index_v4si {}\n+\n+  const signed int __builtin_altivec_first_match_or_eos_index_v16qi (vsc, vsc);\n+    VFIRSTMATCHOREOSINDEX_V16QI first_match_or_eos_index_v16qi {}\n+\n+  const signed int __builtin_altivec_first_match_or_eos_index_v8hi (vss, vss);\n+    VFIRSTMATCHOREOSINDEX_V8HI first_match_or_eos_index_v8hi {}\n+\n+  const signed int __builtin_altivec_first_match_or_eos_index_v4si (vsi, vsi);\n+    VFIRSTMATCHOREOSINDEX_V4SI first_match_or_eos_index_v4si {}\n+\n+  const signed int __builtin_altivec_first_mismatch_index_v16qi (vsc, vsc);\n+    VFIRSTMISMATCHINDEX_V16QI first_mismatch_index_v16qi {}\n+\n+  const signed int __builtin_altivec_first_mismatch_index_v8hi (vss, vss);\n+    VFIRSTMISMATCHINDEX_V8HI first_mismatch_index_v8hi {}\n+\n+  const signed int __builtin_altivec_first_mismatch_index_v4si (vsi, vsi);\n+    VFIRSTMISMATCHINDEX_V4SI first_mismatch_index_v4si {}\n+\n+  const signed int __builtin_altivec_first_mismatch_or_eos_index_v16qi (vsc, vsc);\n+    VFIRSTMISMATCHOREOSINDEX_V16QI first_mismatch_or_eos_index_v16qi {}\n+\n+  const signed int __builtin_altivec_first_mismatch_or_eos_index_v8hi (vss, vss);\n+    VFIRSTMISMATCHOREOSINDEX_V8HI first_mismatch_or_eos_index_v8hi {}\n+\n+  const signed int __builtin_altivec_first_mismatch_or_eos_index_v4si (vsi, vsi);\n+    VFIRSTMISMATCHOREOSINDEX_V4SI first_mismatch_or_eos_index_v4si {}\n+\n+  const vsc __builtin_altivec_vadub (vsc, vsc);\n+    VADUB vaduv16qi3 {}\n+\n+  const vss __builtin_altivec_vaduh (vss, vss);\n+    VADUH vaduv8hi3 {}\n+\n+  const vsi __builtin_altivec_vaduw (vsi, vsi);\n+    VADUW vaduv4si3 {}\n+\n+  const vsll __builtin_altivec_vbpermd (vsll, vsc);\n+    VBPERMD altivec_vbpermd {}\n+\n+  const signed int __builtin_altivec_vclzlsbb_v16qi (vsc);\n+    VCLZLSBB_V16QI vclzlsbb_v16qi {}\n+\n+  const signed int __builtin_altivec_vclzlsbb_v4si (vsi);\n+    VCLZLSBB_V4SI vclzlsbb_v4si {}\n+\n+  const signed int __builtin_altivec_vclzlsbb_v8hi (vss);\n+    VCLZLSBB_V8HI vclzlsbb_v8hi {}\n+\n+  const vsc __builtin_altivec_vctzb (vsc);\n+    VCTZB ctzv16qi2 {}\n+\n+  const vsll __builtin_altivec_vctzd (vsll);\n+    VCTZD ctzv2di2 {}\n+\n+  const vss __builtin_altivec_vctzh (vss);\n+    VCTZH ctzv8hi2 {}\n+\n+  const vsi __builtin_altivec_vctzw (vsi);\n+    VCTZW ctzv4si2 {}\n+\n+  const signed int __builtin_altivec_vctzlsbb_v16qi (vsc);\n+    VCTZLSBB_V16QI vctzlsbb_v16qi {}\n+\n+  const signed int __builtin_altivec_vctzlsbb_v4si (vsi);\n+    VCTZLSBB_V4SI vctzlsbb_v4si {}\n+\n+  const signed int __builtin_altivec_vctzlsbb_v8hi (vss);\n+    VCTZLSBB_V8HI vctzlsbb_v8hi {}\n+\n+  const signed int __builtin_altivec_vcmpaeb_p (vsc, vsc);\n+    VCMPAEB_P vector_ae_v16qi_p {}\n+\n+  const signed int __builtin_altivec_vcmpaed_p (vsll, vsll);\n+    VCMPAED_P vector_ae_v2di_p {}\n+\n+  const signed int __builtin_altivec_vcmpaedp_p (vd, vd);\n+    VCMPAEDP_P vector_ae_v2df_p {}\n+\n+  const signed int __builtin_altivec_vcmpaefp_p (vf, vf);\n+    VCMPAEFP_P vector_ae_v4sf_p {}\n+\n+  const signed int __builtin_altivec_vcmpaeh_p (vss, vss);\n+    VCMPAEH_P vector_ae_v8hi_p {}\n+\n+  const signed int __builtin_altivec_vcmpaew_p (vsi, vsi);\n+    VCMPAEW_P vector_ae_v4si_p {}\n+\n+  const vsc __builtin_altivec_vcmpneb (vsc, vsc);\n+    VCMPNEB vcmpneb {}\n+\n+  const signed int __builtin_altivec_vcmpneb_p (vsc, vsc);\n+    VCMPNEB_P vector_ne_v16qi_p {}\n+\n+  const signed int __builtin_altivec_vcmpned_p (vsll, vsll);\n+    VCMPNED_P vector_ne_v2di_p {}\n+\n+  const signed int __builtin_altivec_vcmpnedp_p (vd, vd);\n+    VCMPNEDP_P vector_ne_v2df_p {}\n+\n+  const signed int __builtin_altivec_vcmpnefp_p (vf, vf);\n+    VCMPNEFP_P vector_ne_v4sf_p {}\n+\n+  const vss __builtin_altivec_vcmpneh (vss, vss);\n+    VCMPNEH vcmpneh {}\n+\n+  const signed int __builtin_altivec_vcmpneh_p (vss, vss);\n+    VCMPNEH_P vector_ne_v8hi_p {}\n+\n+  const vsi __builtin_altivec_vcmpnew (vsi, vsi);\n+    VCMPNEW vcmpnew {}\n+\n+  const signed int __builtin_altivec_vcmpnew_p (vsi, vsi);\n+    VCMPNEW_P vector_ne_v4si_p {}\n+\n+  const vsc __builtin_altivec_vcmpnezb (vsc, vsc);\n+    CMPNEZB vcmpnezb {}\n+\n+  const signed int __builtin_altivec_vcmpnezb_p (signed int, vsc, vsc);\n+    VCMPNEZB_P vector_nez_v16qi_p {pred}\n+\n+  const vss __builtin_altivec_vcmpnezh (vss, vss);\n+    CMPNEZH vcmpnezh {}\n+\n+  const signed int __builtin_altivec_vcmpnezh_p (signed int, vss, vss);\n+    VCMPNEZH_P vector_nez_v8hi_p {pred}\n+\n+  const vsi __builtin_altivec_vcmpnezw (vsi, vsi);\n+    CMPNEZW vcmpnezw {}\n+\n+  const signed int __builtin_altivec_vcmpnezw_p (signed int, vsi, vsi);\n+    VCMPNEZW_P vector_nez_v4si_p {pred}\n+\n+  const signed int __builtin_altivec_vextublx (signed int, vsc);\n+    VEXTUBLX vextublx {}\n+\n+  const signed int __builtin_altivec_vextubrx (signed int, vsc);\n+    VEXTUBRX vextubrx {}\n+\n+  const signed int __builtin_altivec_vextuhlx (signed int, vss);\n+    VEXTUHLX vextuhlx {}\n+\n+  const signed int __builtin_altivec_vextuhrx (signed int, vss);\n+    VEXTUHRX vextuhrx {}\n+\n+  const signed int __builtin_altivec_vextuwlx (signed int, vsi);\n+    VEXTUWLX vextuwlx {}\n+\n+  const signed int __builtin_altivec_vextuwrx (signed int, vsi);\n+    VEXTUWRX vextuwrx {}\n+\n+  const vsq __builtin_altivec_vmsumudm (vsll, vsll, vsq);\n+    VMSUMUDM altivec_vmsumudm {}\n+\n+  const vsll __builtin_altivec_vprtybd (vsll);\n+    VPRTYBD parityv2di2 {}\n+\n+  const vsq __builtin_altivec_vprtybq (vsq);\n+    VPRTYBQ parityv1ti2 {}\n+\n+  const vsi __builtin_altivec_vprtybw (vsi);\n+    VPRTYBW parityv4si2 {}\n+\n+  const vsll __builtin_altivec_vrldmi (vsll, vsll, vsll);\n+    VRLDMI altivec_vrldmi {}\n+\n+  const vsll __builtin_altivec_vrldnm (vsll, vsll);\n+    VRLDNM altivec_vrldnm {}\n+\n+  const vsi __builtin_altivec_vrlwmi (vsi, vsi, vsi);\n+    VRLWMI altivec_vrlwmi {}\n+\n+  const vsi __builtin_altivec_vrlwnm (vsi, vsi);\n+    VRLWNM altivec_vrlwnm {}\n+\n+  const vsll __builtin_altivec_vsignextsb2d (vsc);\n+    VSIGNEXTSB2D vsignextend_qi_v2di {}\n+\n+  const vsi __builtin_altivec_vsignextsb2w (vsc);\n+    VSIGNEXTSB2W vsignextend_qi_v4si {}\n+\n+  const vsll __builtin_altivec_visgnextsh2d (vss);\n+    VSIGNEXTSH2D vsignextend_hi_v2di {}\n+\n+  const vsi __builtin_altivec_vsignextsh2w (vss);\n+    VSIGNEXTSH2W vsignextend_hi_v4si {}\n+\n+  const vsll __builtin_altivec_vsignextsw2d (vsi);\n+    VSIGNEXTSW2D vsignextend_si_v2di {}\n+\n+  const vsc __builtin_altivec_vslv (vsc, vsc);\n+    VSLV vslv {}\n+\n+  const vsc __builtin_altivec_vsrv (vsc, vsc);\n+    VSRV vsrv {}\n+\n+  const signed int __builtin_scalar_byte_in_range (signed int, signed int);\n+    CMPRB cmprb {}\n+\n+  const signed int __builtin_scalar_byte_in_either_range (signed int, signed int);\n+    CMPRB2 cmprb2 {}\n+\n+  const vsll __builtin_vsx_extract4b (vsc, const int[0,12]);\n+    EXTRACT4B extract4b {}\n+\n+  const vd __builtin_vsx_extract_exp_dp (vd);\n+    VEEDP xvxexpdp {}\n+\n+  const vf __builtin_vsx_extract_exp_sp (vf);\n+    VEESP xvxexpsp {}\n+\n+  const vd __builtin_vsx_extract_sig_dp (vd);\n+    VESDP xvxsigdp {}\n+\n+  const vf __builtin_vsx_extract_sig_sp (vf);\n+    VESSP xvxsigsp {}\n+\n+  const vsc __builtin_vsx_insert4b (vsi, vsc, const int[0,12]);\n+    INSERT4B insert4b {}\n+\n+  const vd __builtin_vsx_insert_exp_dp (vd, vd);\n+    VIEDP xviexpdp {}\n+\n+  const vf __builtin_vsx_insert_exp_sp (vf, vf);\n+    VIESP xviexpsp {}\n+\n+  const signed int __builtin_vsx_scalar_cmp_exp_dp_eq (double, double);\n+    VSCEDPEQ xscmpexpdp_eq {}\n+\n+  const signed int __builtin_vsx_scalar_cmp_exp_dp_gt (double, double);\n+    VSCEDPGT xscmpexpdp_gt {}\n+\n+  const signed int __builtin_vsx_scalar_cmp_exp_dp_lt (double, double);\n+    VSCEDPLT xscmpexpdp_lt {}\n+\n+  const signed int __builtin_vsx_scalar_cmp_exp_dp_unordered (double, double);\n+    VSCEDPUO xscmpexpdp_unordered {}\n+\n+  const signed int __builtin_vsx_scalar_test_data_class_dp (double, const int<7>);\n+    VSTDCDP xststdcdp {}\n+\n+  const signed int __builtin_vsx_scalar_test_data_class_sp (float, const int<7>);\n+    VSTDCSP xststdcsp {}\n+\n+  const signed int __builtin_vsx_scalar_test_neg_dp (double);\n+    VSTDCNDP xststdcnegdp {}\n+\n+  const signed int __builtin_vsx_scalar_test_neg_sp (float);\n+    VSTDCNSP xststdcnegsp {}\n+\n+  const vsll __builtin_vsx_test_data_class_dp (vd, const int<7>);\n+    VTDCDP xvtstdcdp {}\n+\n+  const vsi __builtin_vsx_test_data_class_sp (vf, const int<7>);\n+    VTDCSP xvtstdcsp {}\n+\n+  const vf __builtin_vsx_vextract_fp_from_shorth (vss);\n+    VEXTRACT_FP_FROM_SHORTH vextract_fp_from_shorth {}\n+\n+  const vf __builtin_vsx_vextract_fp_from_shortl (vss);\n+    VEXTRACT_FP_FROM_SHORTL vextract_fp_from_shortl {}\n+\n+  const vd __builtin_vsx_xxbrd_v2df (vd);\n+    XXBRD_V2DF p9_xxbrd_v2df {}\n+\n+  const vsll __builtin_vsx_xxbrd_v2di (vsll);\n+    XXBRD_V2DI p9_xxbrd_v2di {}\n+\n+  const vss __builtin_vsx_xxbrh_v8hi (vss);\n+    XXBRH_V8HI p9_xxbrh_v8hi {}\n+\n+  const vsc __builtin_vsx_xxbrq_v16qi (vsc);\n+    XXBRQ_V16QI p9_xxbrq_v16qi {}\n+\n+  const vsq __builtin_vsx_xxbrq_v1ti (vsq);\n+    XXBRQ_V1TI p9_xxbrq_v1ti {}\n+\n+  const vf __builtin_vsx_xxbrw_v4sf (vf);\n+    XXBRW_V4SF p9_xxbrw_v4sf {}\n+\n+  const vsi __builtin_vsx_xxbrw_v4si (vsi);\n+    XXBRW_V4SI p9_xxbrw_v4si {}\n+\n+\n+; Miscellaneous P9 functions\n+[power9]\n+  signed long long __builtin_darn ();\n+    DARN darn {}\n+\n+  signed int __builtin_darn_32 ();\n+    DARN_32 darn_32 {}\n+\n+  signed long long __builtin_darn_raw ();\n+    DARN_RAW darn_raw {}\n+\n+  double __builtin_mffsl ();\n+    MFFSL rs6000_mffsl {}\n+\n+  const signed int __builtin_dtstsfi_eq_dd (const int<6>, _Decimal64);\n+    TSTSFI_EQ_DD dfptstsfi_eq_dd {}\n+\n+  const signed int __builtin_dtstsfi_eq_td (const int<6>, _Decimal128);\n+    TSTSFI_EQ_TD dfptstsfi_eq_td {}\n+\n+  const signed int __builtin_dtstsfi_gt_dd (const int<6>, _Decimal64);\n+    TSTSFI_GT_DD dfptstsfi_gt_dd {}\n+\n+  const signed int __builtin_dtstsfi_gt_td (const int<6>, _Decimal128);\n+    TSTSFI_GT_TD dfptstsfi_gt_td {}\n+\n+  const signed int __builtin_dtstsfi_lt_dd (const int<6>, _Decimal64);\n+    TSTSFI_LT_DD dfptstsfi_lt_dd {}\n+\n+  const signed int __builtin_dtstsfi_lt_td (const int<6>, _Decimal128);\n+    TSTSFI_LT_TD dfptstsfi_lt_td {}\n+\n+  const signed int __builtin_dtstsfi_ov_dd (const int<6>, _Decimal64);\n+    TSTSFI_OV_DD dfptstsfi_unordered_dd {}\n+\n+  const signed int __builtin_dtstsfi_ov_td (const int<6>, _Decimal128);\n+    TSTSFI_OV_TD dfptstsfi_unordered_td {}\n+\n+\n+[power9-64]\n+  void __builtin_altivec_xst_len_r (vsc, void *, long);\n+    XST_LEN_R xst_len_r {}\n+\n+  void __builtin_altivec_stxvl (vsc, void *, long);\n+    STXVL stxvl {}\n+\n+  const signed int __builtin_scalar_byte_in_set (signed int, signed long long);\n+    CMPEQB cmpeqb {}\n+\n+  pure vsc __builtin_vsx_lxvl (const void *, signed long);\n+    LXVL lxvl {}\n+\n+  const signed long __builtin_vsx_scalar_extract_exp (double);\n+    VSEEDP xsxexpdp {}\n+\n+  const signed long __builtin_vsx_scalar_extract_sig (double);\n+    VSESDP xsxsigdp {}\n+\n+  const double __builtin_vsx_scalar_insert_exp (unsigned long long, unsigned long long);\n+    VSIEDP xsiexpdp {}\n+\n+  const double __builtin_vsx_scalar_insert_exp_dp (double, unsigned long long);\n+    VSIEDPF xsiexpdpf {}\n+\n+  pure vsc __builtin_vsx_xl_len_r (void *, signed long);\n+    XL_LEN_R xl_len_r {}"}]}