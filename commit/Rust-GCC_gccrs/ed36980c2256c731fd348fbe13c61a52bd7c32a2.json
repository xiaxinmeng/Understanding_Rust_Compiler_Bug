{"sha": "ed36980c2256c731fd348fbe13c61a52bd7c32a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzNjk4MGMyMjU2YzczMWZkMzQ4ZmJlMTNjNjFhNTJiZDdjMzJhMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-12-08T20:29:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-12-08T20:29:15Z"}, "message": "Give the anonymous namespace a null DECL_NAME.\n\n        * cp-tree.h: Don't declare anonymous_namespace_name.\n        * decl.c: Don't define it.\n        * dump.c (cp_dump_tree): Don't check for it.\n        * cxx-pretty-print.c (pp_cxx_original_namespace_definition): Likewise.\n        * error.c (dump_decl): Likewise.\n        * name-lookup.c: Define it here.\n        (push_namespace): Put it in DECL_ASSEMBLER_NAME instead.\n        * mangle.c (write_unqualified_name): Adjust.\n\nFrom-SVN: r74433", "tree": {"sha": "f26daf46f4eda155a0360bde32fbd2e8f0259682", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f26daf46f4eda155a0360bde32fbd2e8f0259682"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed36980c2256c731fd348fbe13c61a52bd7c32a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed36980c2256c731fd348fbe13c61a52bd7c32a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed36980c2256c731fd348fbe13c61a52bd7c32a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed36980c2256c731fd348fbe13c61a52bd7c32a2/comments", "author": null, "committer": null, "parents": [{"sha": "4e8537aea1415315c858401000dec14a03f00280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e8537aea1415315c858401000dec14a03f00280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e8537aea1415315c858401000dec14a03f00280"}], "stats": {"total": 62, "additions": 38, "deletions": 24}, "files": [{"sha": "3fa1392a98398112f7612a420f2630dcbd241464", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ed36980c2256c731fd348fbe13c61a52bd7c32a2", "patch": "@@ -1,13 +1,25 @@\n-2003-12-07  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\r\n-\r\n-\tPR c++/2294\r\n-\t* name-lookup.c (push_overloaded_decl): Always construct an \r\n-\tOVERLOAD unless the declaration is a built-in.\r\n-\t(set_namespace_binding): While binding OVERLOADs with only one\r\n-\tdeclaration, we still need to call supplement_binding.\r\n-\t* init.c (build_new_1): Deal with an OVERLOAD set when\r\n-\tlooking up for _Jv_AllocObject.\r\n-\t* except.c (build_throw): Likewise for _Jv_Throw.\r\n+2003-12-08  Jason Merrill  <jason@redhat.com>\n+\n+\tGive the anonymous namespace a null DECL_NAME.\n+\t* cp-tree.h: Don't declare anonymous_namespace_name.\n+\t* decl.c: Don't define it.\n+\t* dump.c (cp_dump_tree): Don't check for it.\n+\t* cxx-pretty-print.c (pp_cxx_original_namespace_definition): Likewise.\n+\t* error.c (dump_decl): Likewise.\n+\t* name-lookup.c: Define it here.\n+\t(push_namespace): Put it in DECL_ASSEMBLER_NAME instead.\n+\t* mangle.c (write_unqualified_name): Adjust.\n+\n+2003-12-07  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/2294\n+\t* name-lookup.c (push_overloaded_decl): Always construct an\n+\tOVERLOAD unless the declaration is a built-in.\n+\t(set_namespace_binding): While binding OVERLOADs with only one\n+\tdeclaration, we still need to call supplement_binding.\n+\t* init.c (build_new_1): Deal with an OVERLOAD set when\n+\tlooking up for _Jv_AllocObject.\n+\t* except.c (build_throw): Likewise for _Jv_Throw.\n \n 2003-12-06  Mark Mitchell  <mark@codesourcery.com>\n "}, {"sha": "b1a434e0b0e145c48d12e313754dc9d1ca6c1ae6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ed36980c2256c731fd348fbe13c61a52bd7c32a2", "patch": "@@ -3085,8 +3085,6 @@ extern GTY(()) tree error_mark_list;\n extern GTY(()) tree integer_two_node;\n extern GTY(()) tree integer_three_node;\n \n-extern GTY(()) tree anonymous_namespace_name;\n-\n /* The number of function bodies which we are currently processing.\n    (Zero if we are at namespace scope, one inside the body of a\n    function, two inside the body of a function in a local class, etc.)  */"}, {"sha": "a27e2584d1473b60968d3e3d838d33e758882e6a", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=ed36980c2256c731fd348fbe13c61a52bd7c32a2", "patch": "@@ -1479,7 +1479,7 @@ static void\n pp_cxx_original_namespace_definition (cxx_pretty_printer *pp, tree t)\n {\n   pp_cxx_identifier (pp, \"namespace\");\n-  if (DECL_NAME (t) != anonymous_namespace_name)\n+  if (DECL_NAME (t))\n     pp_cxx_unqualified_id (pp, t);\n   pp_cxx_whitespace (pp);\n   pp_cxx_left_brace (pp);"}, {"sha": "9c6379fa4b2f8e53b0cb9b40ee2585a590fa92bf", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ed36980c2256c731fd348fbe13c61a52bd7c32a2", "patch": "@@ -228,10 +228,6 @@ struct named_label_list GTY(())\n \n #define named_labels cp_function_chain->x_named_labels\n \f\n-/* The name of the anonymous namespace, throughout this translation\n-   unit.  */\n-tree anonymous_namespace_name;\n-\n /* The number of function bodies which we are currently processing.\n    (Zero if we are at namespace scope, one inside the body of a\n    function, two inside the body of a function in a local class, etc.)  */"}, {"sha": "17b30c94367bb52de4d32ab1eacf1bdaeec21552", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=ed36980c2256c731fd348fbe13c61a52bd7c32a2", "patch": "@@ -230,11 +230,6 @@ cp_dump_tree (void* dump_info, tree t)\n \t  dump_child (\"tynm\", TREE_TYPE (t));\n \t  return true;\n \t}\n-      else if (t == anonymous_namespace_name)\n-\t{\n-\t  dump_string (di, \"unnamed\");\n-\t  return true;\n-\t}\n       break;\n \n     case OFFSET_TYPE:"}, {"sha": "dab0f2eafd36d3e951db15050355558cdd81353c", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=ed36980c2256c731fd348fbe13c61a52bd7c32a2", "patch": "@@ -805,7 +805,7 @@ dump_decl (tree t, int flags)\n       else\n         {\n           dump_scope (CP_DECL_CONTEXT (t), flags);\n-          if (DECL_NAME (t) == anonymous_namespace_name)\n+          if (DECL_NAME (t) == NULL_TREE)\n             pp_identifier (cxx_pp, \"<unnamed>\");\n           else\n             pp_tree_identifier (cxx_pp, DECL_NAME (t));"}, {"sha": "94c885cacc48e4f0065ac1f8ecb162ee7d320464", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=ed36980c2256c731fd348fbe13c61a52bd7c32a2", "patch": "@@ -991,6 +991,8 @@ write_unqualified_name (const tree decl)\n     write_special_name_constructor (decl);\n   else if (DECL_LANG_SPECIFIC (decl) != NULL && DECL_DESTRUCTOR_P (decl))\n     write_special_name_destructor (decl);\n+  else if (DECL_NAME (decl) == NULL_TREE)\n+    write_source_name (DECL_ASSEMBLER_NAME (decl));\n   else if (DECL_CONV_FN_P (decl)) \n     {\n       /* Conversion operator. Handle it right here.  "}, {"sha": "7446b30c524ef69135300d45cfef9c41119b00ed", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed36980c2256c731fd348fbe13c61a52bd7c32a2/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=ed36980c2256c731fd348fbe13c61a52bd7c32a2", "patch": "@@ -48,6 +48,10 @@ static tree push_using_directive (tree);\n \n tree global_namespace;\n \n+/* The name of the anonymous namespace, throughout this translation\n+   unit.  */\n+GTY(()) tree anonymous_namespace_name;\n+\n \n /* Compute the chain index of a binding_entry given the HASH value of its\n    name and the total COUNT of chains.  COUNT is assumed to be a power\n@@ -2990,6 +2994,7 @@ push_namespace (tree name)\n   tree d = NULL_TREE;\n   int need_new = 1;\n   int implicit_use = 0;\n+  bool anon = !name;\n \n   timevar_push (TV_NAME_LOOKUP);\n   \n@@ -2999,7 +3004,7 @@ push_namespace (tree name)\n   my_friendly_assert (global_namespace != NULL && name != global_scope_name,\n                       20030531);\n \n-  if (!name)\n+  if (anon)\n     {\n       /* The name of anonymous namespace is unique for the translation\n          unit.  */\n@@ -3034,6 +3039,12 @@ push_namespace (tree name)\n       d = build_lang_decl (NAMESPACE_DECL, name, void_type_node);\n       DECL_CONTEXT (d) = FROB_CONTEXT (current_namespace);\n       d = pushdecl (d);\n+      if (anon)\n+\t{\n+\t  /* Clear DECL_NAME for the benefit of debugging back ends.  */\n+\t  SET_DECL_ASSEMBLER_NAME (d, name);\n+\t  DECL_NAME (d) = NULL_TREE;\n+\t}\n       begin_scope (sk_namespace, d);\n     }\n   else"}]}