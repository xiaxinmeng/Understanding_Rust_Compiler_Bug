{"sha": "d0e9bf2a6db4df95b776c5bcd728f0e159116659", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBlOWJmMmE2ZGI0ZGY5NWI3NzZjNWJjZDcyOGYwZTE1OTExNjY1OQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-05-15T15:08:04Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-05-15T15:08:04Z"}, "message": "i386: Emulate MMX mmx_pmaddwd with SSE\n\nEmulate MMX pmaddwd with SSE.  Only SSE register source operand is\nallowed.\n\n\tPR target/89021\n\t* config/i386/mmx.md (mmx_pmaddwd): Also allow TARGET_MMX_WITH_SSE.\n\t(*mmx_pmaddwd): Also allow TARGET_MMX_WITH_SSE.  Add SSE support.\n\nFrom-SVN: r271220", "tree": {"sha": "ce6b5556c5b88e16295926c8b585e52c897b7af8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce6b5556c5b88e16295926c8b585e52c897b7af8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0e9bf2a6db4df95b776c5bcd728f0e159116659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e9bf2a6db4df95b776c5bcd728f0e159116659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e9bf2a6db4df95b776c5bcd728f0e159116659", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e9bf2a6db4df95b776c5bcd728f0e159116659/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3fdce4b1ef47f305cd90e62905b4adc8a13a73c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fdce4b1ef47f305cd90e62905b4adc8a13a73c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fdce4b1ef47f305cd90e62905b4adc8a13a73c5"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "597ba816fd40862c90c8d1fd68d229ff27a3204f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e9bf2a6db4df95b776c5bcd728f0e159116659/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e9bf2a6db4df95b776c5bcd728f0e159116659/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0e9bf2a6db4df95b776c5bcd728f0e159116659", "patch": "@@ -1,3 +1,9 @@\n+2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89021\n+\t* config/i386/mmx.md (mmx_pmaddwd): Also allow TARGET_MMX_WITH_SSE.\n+\t(*mmx_pmaddwd): Also allow TARGET_MMX_WITH_SSE.  Add SSE support.\n+\n 2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89021"}, {"sha": "7cbca961a6089327fc6df891cb333b1aa4f31b82", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e9bf2a6db4df95b776c5bcd728f0e159116659/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e9bf2a6db4df95b776c5bcd728f0e159116659/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=d0e9bf2a6db4df95b776c5bcd728f0e159116659", "patch": "@@ -835,11 +835,11 @@\n \t  (mult:V2SI\n \t    (sign_extend:V2SI\n \t      (vec_select:V2HI\n-\t\t(match_operand:V4HI 1 \"nonimmediate_operand\")\n+\t\t(match_operand:V4HI 1 \"register_mmxmem_operand\")\n \t\t(parallel [(const_int 0) (const_int 2)])))\n \t    (sign_extend:V2SI\n \t      (vec_select:V2HI\n-\t\t(match_operand:V4HI 2 \"nonimmediate_operand\")\n+\t\t(match_operand:V4HI 2 \"register_mmxmem_operand\")\n \t\t(parallel [(const_int 0) (const_int 2)]))))\n \t  (mult:V2SI\n \t    (sign_extend:V2SI\n@@ -848,20 +848,20 @@\n \t    (sign_extend:V2SI\n \t      (vec_select:V2HI (match_dup 2)\n \t\t(parallel [(const_int 1) (const_int 3)]))))))]\n-  \"TARGET_MMX\"\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n   \"ix86_fixup_binary_operands_no_copy (MULT, V4HImode, operands);\")\n \n (define_insn \"*mmx_pmaddwd\"\n-  [(set (match_operand:V2SI 0 \"register_operand\" \"=y\")\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=y,x,Yv\")\n         (plus:V2SI\n \t  (mult:V2SI\n \t    (sign_extend:V2SI\n \t      (vec_select:V2HI\n-\t\t(match_operand:V4HI 1 \"nonimmediate_operand\" \"%0\")\n+\t\t(match_operand:V4HI 1 \"register_mmxmem_operand\" \"%0,0,Yv\")\n \t\t(parallel [(const_int 0) (const_int 2)])))\n \t    (sign_extend:V2SI\n \t      (vec_select:V2HI\n-\t\t(match_operand:V4HI 2 \"nonimmediate_operand\" \"ym\")\n+\t\t(match_operand:V4HI 2 \"register_mmxmem_operand\" \"ym,x,Yv\")\n \t\t(parallel [(const_int 0) (const_int 2)]))))\n \t  (mult:V2SI\n \t    (sign_extend:V2SI\n@@ -870,10 +870,15 @@\n \t    (sign_extend:V2SI\n \t      (vec_select:V2HI (match_dup 2)\n \t\t(parallel [(const_int 1) (const_int 3)]))))))]\n-  \"TARGET_MMX && ix86_binary_operator_ok (MULT, V4HImode, operands)\"\n-  \"pmaddwd\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxmul\")\n-   (set_attr \"mode\" \"DI\")])\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n+   && ix86_binary_operator_ok (MULT, V4HImode, operands)\"\n+  \"@\n+   pmaddwd\\t{%2, %0|%0, %2}\n+   pmaddwd\\t{%2, %0|%0, %2}\n+   vpmaddwd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n+   (set_attr \"type\" \"mmxmul,sseiadd,sseiadd\")\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n \n (define_expand \"mmx_pmulhrwv4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\")"}]}