{"sha": "cb8e3dda35164dcb85056556779daa673b40166a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I4ZTNkZGEzNTE2NGRjYjg1MDU2NTU2Nzc5ZGFhNjczYjQwMTY2YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-11-01T14:06:50Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-11-01T14:06:50Z"}, "message": "Use (CONST_VECTOR|GET_MODE)_NUNITS in simplify-rtx.c\n\nThis patch avoids some calculations of the form:\n\n  GET_MODE_SIZE (vector_mode) / GET_MODE_SIZE (element_mode)\n\nin simplify-rtx.c.  If we're dealing with CONST_VECTORs, it's better\nto use CONST_VECTOR_NUNITS, since that remains constant even after the\nSVE patches.  In other cases we can get the number from GET_MODE_NUNITS.\n\n2017-11-01  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* simplify-rtx.c (simplify_const_unary_operation): Use GET_MODE_NUNITS\n\tand CONST_VECTOR_NUNITS instead of computing the number of units from\n\tthe byte sizes of the vector and element.\n\t(simplify_binary_operation_1): Likewise.\n\t(simplify_const_binary_operation): Likewise.\n\t(simplify_ternary_operation): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r254311", "tree": {"sha": "9e495e9d8e1dfea243a6580db21d16fb76b82b37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e495e9d8e1dfea243a6580db21d16fb76b82b37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb8e3dda35164dcb85056556779daa673b40166a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8e3dda35164dcb85056556779daa673b40166a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb8e3dda35164dcb85056556779daa673b40166a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb8e3dda35164dcb85056556779daa673b40166a/comments", "author": null, "committer": null, "parents": [{"sha": "d6dd9d7f8efcf92c5c70a9e91e99a9719b31cd51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6dd9d7f8efcf92c5c70a9e91e99a9719b31cd51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6dd9d7f8efcf92c5c70a9e91e99a9719b31cd51"}], "stats": {"total": 72, "additions": 26, "deletions": 46}, "files": [{"sha": "8cf72e622b5d09dfc8cd44ead0429912e1e56137", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8e3dda35164dcb85056556779daa673b40166a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8e3dda35164dcb85056556779daa673b40166a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb8e3dda35164dcb85056556779daa673b40166a", "patch": "@@ -1,3 +1,14 @@\n+2017-11-01  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* simplify-rtx.c (simplify_const_unary_operation): Use GET_MODE_NUNITS\n+\tand CONST_VECTOR_NUNITS instead of computing the number of units from\n+\tthe byte sizes of the vector and element.\n+\t(simplify_binary_operation_1): Likewise.\n+\t(simplify_const_binary_operation): Likewise.\n+\t(simplify_ternary_operation): Likewise.\n+\n 2017-11-01  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "5cdea355ecdf299e22720e68b29d0de96ac3e0f2", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 15, "deletions": 46, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb8e3dda35164dcb85056556779daa673b40166a/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb8e3dda35164dcb85056556779daa673b40166a/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=cb8e3dda35164dcb85056556779daa673b40166a", "patch": "@@ -1749,18 +1749,12 @@ simplify_const_unary_operation (enum rtx_code code, machine_mode mode,\n \treturn gen_const_vec_duplicate (mode, op);\n       if (GET_CODE (op) == CONST_VECTOR)\n \t{\n-\t  int elt_size = GET_MODE_UNIT_SIZE (mode);\n-          unsigned n_elts = (GET_MODE_SIZE (mode) / elt_size);\n-\t  rtvec v = rtvec_alloc (n_elts);\n-\t  unsigned int i;\n-\n-\t  machine_mode inmode = GET_MODE (op);\n-\t  int in_elt_size = GET_MODE_UNIT_SIZE (inmode);\n-\t  unsigned in_n_elts = (GET_MODE_SIZE (inmode) / in_elt_size);\n-\n+\t  unsigned int n_elts = GET_MODE_NUNITS (mode);\n+\t  unsigned int in_n_elts = CONST_VECTOR_NUNITS (op);\n \t  gcc_assert (in_n_elts < n_elts);\n \t  gcc_assert ((n_elts % in_n_elts) == 0);\n-\t  for (i = 0; i < n_elts; i++)\n+\t  rtvec v = rtvec_alloc (n_elts);\n+\t  for (unsigned i = 0; i < n_elts; i++)\n \t    RTVEC_ELT (v, i) = CONST_VECTOR_ELT (op, i % in_n_elts);\n \t  return gen_rtx_CONST_VECTOR (mode, v);\n \t}\n@@ -3601,9 +3595,7 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t      rtx op0 = XEXP (trueop0, 0);\n \t      rtx op1 = XEXP (trueop0, 1);\n \n-\t      machine_mode opmode = GET_MODE (op0);\n-\t      int elt_size = GET_MODE_UNIT_SIZE (opmode);\n-\t      int n_elts = GET_MODE_SIZE (opmode) / elt_size;\n+\t      int n_elts = GET_MODE_NUNITS (GET_MODE (op0));\n \n \t      int i = INTVAL (XVECEXP (trueop1, 0, 0));\n \t      int elem;\n@@ -3630,21 +3622,8 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t\t  mode01 = GET_MODE (op01);\n \n \t\t  /* Find out number of elements of each operand.  */\n-\t\t  if (VECTOR_MODE_P (mode00))\n-\t\t    {\n-\t\t      elt_size = GET_MODE_UNIT_SIZE (mode00);\n-\t\t      n_elts00 = GET_MODE_SIZE (mode00) / elt_size;\n-\t\t    }\n-\t\t  else\n-\t\t    n_elts00 = 1;\n-\n-\t\t  if (VECTOR_MODE_P (mode01))\n-\t\t    {\n-\t\t      elt_size = GET_MODE_UNIT_SIZE (mode01);\n-\t\t      n_elts01 = GET_MODE_SIZE (mode01) / elt_size;\n-\t\t    }\n-\t\t  else\n-\t\t    n_elts01 = 1;\n+\t\t  n_elts00 = GET_MODE_NUNITS (mode00);\n+\t\t  n_elts01 = GET_MODE_NUNITS (mode01);\n \n \t\t  gcc_assert (n_elts == n_elts00 + n_elts01);\n \n@@ -3764,9 +3743,8 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t      rtx subop1 = XEXP (trueop0, 1);\n \t      machine_mode mode0 = GET_MODE (subop0);\n \t      machine_mode mode1 = GET_MODE (subop1);\n-\t      int li = GET_MODE_UNIT_SIZE (mode0);\n-\t      int l0 = GET_MODE_SIZE (mode0) / li;\n-\t      int l1 = GET_MODE_SIZE (mode1) / li;\n+\t      int l0 = GET_MODE_NUNITS (mode0);\n+\t      int l1 = GET_MODE_NUNITS (mode1);\n \t      int i0 = INTVAL (XVECEXP (trueop1, 0, 0));\n \t      if (i0 == 0 && !side_effects_p (op1) && mode == mode0)\n \t\t{\n@@ -3924,14 +3902,10 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t\t|| CONST_SCALAR_INT_P (trueop1) \n \t\t|| CONST_DOUBLE_AS_FLOAT_P (trueop1)))\n \t  {\n-\t    int elt_size = GET_MODE_UNIT_SIZE (mode);\n-\t    unsigned n_elts = (GET_MODE_SIZE (mode) / elt_size);\n+\t    unsigned n_elts = GET_MODE_NUNITS (mode);\n+\t    unsigned in_n_elts = GET_MODE_NUNITS (op0_mode);\n \t    rtvec v = rtvec_alloc (n_elts);\n \t    unsigned int i;\n-\t    unsigned in_n_elts = 1;\n-\n-\t    if (VECTOR_MODE_P (op0_mode))\n-\t      in_n_elts = (GET_MODE_SIZE (op0_mode) / elt_size);\n \t    for (i = 0; i < n_elts; i++)\n \t      {\n \t\tif (i < in_n_elts)\n@@ -4019,16 +3993,12 @@ simplify_const_binary_operation (enum rtx_code code, machine_mode mode,\n       && GET_CODE (op0) == CONST_VECTOR\n       && GET_CODE (op1) == CONST_VECTOR)\n     {\n-      unsigned n_elts = GET_MODE_NUNITS (mode);\n-      machine_mode op0mode = GET_MODE (op0);\n-      unsigned op0_n_elts = GET_MODE_NUNITS (op0mode);\n-      machine_mode op1mode = GET_MODE (op1);\n-      unsigned op1_n_elts = GET_MODE_NUNITS (op1mode);\n+      unsigned int n_elts = CONST_VECTOR_NUNITS (op0);\n+      gcc_assert (n_elts == (unsigned int) CONST_VECTOR_NUNITS (op1));\n+      gcc_assert (n_elts == GET_MODE_NUNITS (mode));\n       rtvec v = rtvec_alloc (n_elts);\n       unsigned int i;\n \n-      gcc_assert (op0_n_elts == n_elts);\n-      gcc_assert (op1_n_elts == n_elts);\n       for (i = 0; i < n_elts; i++)\n \t{\n \t  rtx x = simplify_binary_operation (code, GET_MODE_INNER (mode),\n@@ -5705,8 +5675,7 @@ simplify_ternary_operation (enum rtx_code code, machine_mode mode,\n       trueop2 = avoid_constant_pool_reference (op2);\n       if (CONST_INT_P (trueop2))\n \t{\n-\t  int elt_size = GET_MODE_UNIT_SIZE (mode);\n-\t  unsigned n_elts = (GET_MODE_SIZE (mode) / elt_size);\n+\t  unsigned n_elts = GET_MODE_NUNITS (mode);\n \t  unsigned HOST_WIDE_INT sel = UINTVAL (trueop2);\n \t  unsigned HOST_WIDE_INT mask;\n \t  if (n_elts == HOST_BITS_PER_WIDE_INT)"}]}