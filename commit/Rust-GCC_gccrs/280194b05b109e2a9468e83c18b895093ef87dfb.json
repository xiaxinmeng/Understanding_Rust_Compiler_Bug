{"sha": "280194b05b109e2a9468e83c18b895093ef87dfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgwMTk0YjA1YjEwOWUyYTk0NjhlODNjMThiODk1MDkzZWY4N2RmYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-05T06:34:26Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-05T06:34:26Z"}, "message": "(gen_realpart, gen_imagpart): New functions.\n\nFrom-SVN: r2323", "tree": {"sha": "c7eb28e6d0cc78ef36d73ddd51e2396d76ba3e33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7eb28e6d0cc78ef36d73ddd51e2396d76ba3e33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/280194b05b109e2a9468e83c18b895093ef87dfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280194b05b109e2a9468e83c18b895093ef87dfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/280194b05b109e2a9468e83c18b895093ef87dfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280194b05b109e2a9468e83c18b895093ef87dfb/comments", "author": null, "committer": null, "parents": [{"sha": "2d7050fdca69677d8f6b4de9ff499abfb3b60fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7050fdca69677d8f6b4de9ff499abfb3b60fa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7050fdca69677d8f6b4de9ff499abfb3b60fa1"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "d301bfc9ff61ee31bb94979a945f374fb8166086", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/280194b05b109e2a9468e83c18b895093ef87dfb/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/280194b05b109e2a9468e83c18b895093ef87dfb/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=280194b05b109e2a9468e83c18b895093ef87dfb", "patch": "@@ -656,6 +656,34 @@ gen_lowpart_common (mode, x)\n   return 0;\n }\n \f\n+/* Return the real part (which has mode MODE) of a complex value X.\n+   This always comes at the low address in memory.  */\n+\n+rtx\n+gen_realpart (mode, x)\n+     enum machine_mode mode;\n+     register rtx x;\n+{\n+  if (WORDS_BIG_ENDIAN)\n+    return gen_highpart (mode, x);\n+  else\n+    return gen_lowpart (mode, x);\n+}\n+\n+/* Return the imaginary part (which has mode MODE) of a complex value X.\n+   This always comes at the high address in memory.  */\n+\n+rtx\n+gen_imagpart (mode, x)\n+     enum machine_mode mode;\n+     register rtx x;\n+{\n+  if (WORDS_BIG_ENDIAN)\n+    return gen_lowpart (mode, x);\n+  else\n+    return gen_highpart (mode, x);\n+}\n+\f\n /* Assuming that X is an rtx (e.g., MEM, REG or SUBREG) for a value,\n    return an rtx (MEM, SUBREG, or CONST_INT) that refers to the\n    least-significant part of X."}]}