{"sha": "ca4ef1ff8fe9c9c60a98d3d9e12ddf8f8471100e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E0ZWYxZmY4ZmU5YzljNjBhOThkM2Q5ZTEyZGRmOGY4NDcxMTAwZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-15T12:29:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-04-15T12:29:32Z"}, "message": "re PR c++/69517 (SEGV on a VLA with excess initializer elements)\n\n\tPR c++/69517\n\tPR c++/70019\n\tPR c++/70588\n\t* g++.dg/cpp1y/vla11.C: Revert for real.\n\nFrom-SVN: r235021", "tree": {"sha": "d42047ddb9a9d4ee38c49750ee9cd4d5fa236b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d42047ddb9a9d4ee38c49750ee9cd4d5fa236b81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca4ef1ff8fe9c9c60a98d3d9e12ddf8f8471100e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4ef1ff8fe9c9c60a98d3d9e12ddf8f8471100e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4ef1ff8fe9c9c60a98d3d9e12ddf8f8471100e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4ef1ff8fe9c9c60a98d3d9e12ddf8f8471100e/comments", "author": null, "committer": null, "parents": [{"sha": "dda1bf6123a4e69cb9aa5072442b803f82da2be3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dda1bf6123a4e69cb9aa5072442b803f82da2be3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dda1bf6123a4e69cb9aa5072442b803f82da2be3"}], "stats": {"total": 719, "additions": 6, "deletions": 713}, "files": [{"sha": "253d7c6aea0c8e3f290ee8c2d71bb800c472fcbe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4ef1ff8fe9c9c60a98d3d9e12ddf8f8471100e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4ef1ff8fe9c9c60a98d3d9e12ddf8f8471100e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca4ef1ff8fe9c9c60a98d3d9e12ddf8f8471100e", "patch": "@@ -1,5 +1,10 @@\n 2016-04-15  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/69517\n+\tPR c++/70019\n+\tPR c++/70588\n+\t* g++.dg/cpp1y/vla11.C: Revert for real.\n+\n \tPR c/70436\n \t* c-c++-common/Wparentheses-1.c: New test.\n \t* c-c++-common/gomp/Wparentheses-1.c: New test.\n@@ -16,7 +21,7 @@\n \t* gcc.target/i386/pr70662.c: New test.\n \n 2016-04-15  Richard Biener  <rguenther@suse.de>\n-\tAlan Modra  <amodra@gmail.com>\n+\t    Alan Modra  <amodra@gmail.com>\n \n \tPR tree-optimization/70130\n \t* gcc.dg/vect/O3-pr70130.c: New testcase."}, {"sha": "36609abe53bc5564a848b341f26736568666056d", "filename": "gcc/testsuite/g++.dg/cpp1y/vla11.C", "status": "removed", "additions": 0, "deletions": 712, "changes": 712, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dda1bf6123a4e69cb9aa5072442b803f82da2be3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dda1bf6123a4e69cb9aa5072442b803f82da2be3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvla11.C?ref=dda1bf6123a4e69cb9aa5072442b803f82da2be3", "patch": "@@ -1,712 +0,0 @@\n-// PR c++/69517 - [5/6 regression] SEGV on a VLA with excess initializer\n-//   elements\n-// PR c++/70019 - VLA size overflow not detected\n-//\n-// Runtime test to verify that attempting to either construct a VLA with\n-// erroneous bounds, or initialize one with an initializer-list that\n-// contains more elements than the VLA's non-constant (runtime) bounds\n-// causes an exception to be thrown.  Test also verifies that valid\n-// VLAs and their initializers don't cause such an exception.\n-\n-// { dg-do run { target c++11 } }\n-// { dg-additional-options \"-Wno-vla\" }\n-\n-#pragma GCC diagnostic ignored \"-Wvla\"\n-\n-#define INT_MAX    __INT_MAX__\n-#define LONG_MAX   __LONG_MAX__\n-#define SIZE_MAX   __SIZE_MAX__\n-#define UINT_MAX   (~0U)\n-#define ULONG_MAX  (~0LU)\n-\n-#define INT_MIN    (-__INT_MAX__ - 1)\n-#define LONG_MIN   (-__LONG_MAX__ - 1)\n-\n-// The size of the largest allowed VLA in bytes.  Bigger objects\n-// cause an exception to be thrown.  Unless the maximum size is\n-// obscenely large, smaller objects should be successfully created\n-// provided there's enough stack space.  See TEST_NEAR_VLA_MAX_SIZE\n-// below.\n-#define MAX   (__SIZE_MAX__ / 2)\n-\n-// Define to non-zero to exercise very large VLAs with size just\n-// below the implementation-defined maximum.\n-#define TEST_NEAR_VLA_MAX_SIZE    0\n-\n-// Define to zero to enable tests that cause an ICE due to c++/58646.\n-#define BUG_58646 1\n-\n-// Helper macro to make it possible to pass as one multpile arguments\n-// to another macro.\n-#define Init(...) __VA_ARGS__\n-\n-typedef __SIZE_TYPE__ size_t;\n-\n-// Incremented for each test failure.\n-int fail;\n-\n-// Used to convert a constant array dimension to a non-constant one.\n-template <class T>\n-T d (T n)\n-{\n-  return n;\n-}\n-\n-// Verify either that an expected exception has been thrown or that\n-// one hasn't been thrown if one isn't expected.\n-int __attribute__ ((noclone, noinline))\n-sink (void *p, int line, bool expect, const char *expr)\n-{\n-  if (!p != expect)\n-    {\n-      __builtin_printf (\"line %i: Assertion failed: '%s': \"\n-                        \"exception unexpectedly %sthrown\\n\",\n-                        line, expr, !p ? \"\" : \"not \");\n-      ++fail;\n-    }\n-  else\n-    {\n-#if defined DEBUG && DEBUG\n-    __builtin_printf (\"line %i: Assertion passed: '%s': \"\n-\t\t      \"exception %sthrown as expected\\n\",\n-\t\t      line, expr, !p ? \"\" : \"not \");\n-#endif\n-    }\n-  return 0;\n-}\n-\n-#define _CAT(name, line) name ## line\n-#define CAT(name, line) _CAT (name, line)\n-\n-#define STR(...) #__VA_ARGS__\n-\n-// Type to exercise VLA with.  TYPESIZE is the size of the type in bytes.\n-// Using a template serves two purposes.  First, it makes it possible to\n-// parameterize the test on VLAs of different size.  Second, it verifies\n-// that the checking code can deal with templates (i.e., completes\n-// the element type of the VLA when necessary).\n-template <unsigned TypeSize>\n-union TestType\n-{\n-  char data;\n-  char padding [TypeSize];\n-};\n-\n-// Test function invoked with a pointer to each test case.  Must\n-// return a value though what value doesn't matter.\n-int __attribute__ ((noclone, noinline))\n-tester (int (*testcase)(const char*),\n-\tconst char *str, int line, bool expect)\n-{\n-  try\n-    {\n-      return testcase (str);\n-    }\n-  catch (...)\n-    {\n-      return sink (0, line, expect, str);\n-    }\n-}\n-\n-// Macro to define a unique specialization of a function template to\n-// exercise a VLA of type T, rank N, with dimensions given by Dims\n-// and initializer Init.  Expect is true when the VLA initialization\n-// is expected to trigger an exception.\n-// The macro creates a unique global dummy int object and initializes\n-// it with the result of the function.  The dummy object servers no\n-// other purpose but to call the function.  The function verifies\n-// the expected postconditions.\n-#define TEST(TypeSize, Dims, Init, Expect)\t\t\t\t\\\n-  static int CAT (testcase, __LINE__)(const char *str)\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    TestType<TypeSize> vla Dims Init;\t\t\t\t\t\\\n-    static_assert (sizeof (TestType<TypeSize>) == TypeSize,\t\t\\\n-\t\t   \"wrong test type size\");\t\t\t\t\\\n-    return sink (vla, __LINE__, Expect, str);\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-  const int CAT (dummy, __LINE__)\t\t\t\t\t\\\n-    = tester (CAT (testcase, __LINE__),\t\t\t\t\t\\\n-\t      \"T<\" #TypeSize \"> a\" #Dims \" \" STR (Init) \";\",\t\t\\\n-\t      __LINE__, Expect)\n-\n-\n-// Create and run a test function exercising a VLA definition\n-// of one of the following forms:\n-//    TestType<Size> VLA Dims;        // uninitialized (with Init ())\n-// or:\n-//    TestType<Size> VLA Dims Init;   // initialized (with = Init ({...})\n-//\n-//    +-- Element Size (in Bytes)\n-//    |  +-- VLA Dimensions (constant as in [3], otherwise d(3))\n-//    |  |         +-- VLA Initializer Expression (if any)\n-//    |  |         |                  +-- Expect Exception\n-//    |  |         |                  |\n-//    V  V         V                  V\n-TEST (1, [d(0)],   Init (/* none*/),  true);   // uninitialized\n-\n-#if !BUG_58646\n-// The following causes an ICE due to c++/58646.\n-TEST (1, [d(0)],   Init ({}),         true);\n-#endif\n-TEST (1, [d(0)],   Init ({1}),        true);   // initialized with \" {1}\"\n-TEST (1, [d(0)],   = Init ({1}),      true);   // initialized with \"= {1}\"\n-\n-TEST (1, [d(1)],   Init (),           false);\n-TEST (1, [d(1)],   Init ({}),         false);\n-TEST (1, [d(1)],   = Init ({}),       false);\n-TEST (1, [d(1)],   Init ({1}),        false);\n-TEST (1, [d(1)],   = Init ({1}),      false);\n-TEST (1, [d(1)],   Init ({1, 2}),     true);\n-TEST (1, [d(1)],   = Init ({1, 2}),   true);\n-\n-TEST (1, [d(2)],   Init (),           false);\n-TEST (1, [d(2)],   Init ({}),         false);\n-TEST (1, [d(2)],   Init ({1}),        false);\n-TEST (1, [d(2)],   Init ({1, 2}),     false);\n-TEST (1, [d(2)],   Init ({1, 2, 3}),  true);\n-\n-#if TEST_NEAR_VLA_MAX_SIZE\n-// Very large but not erroneous one dimensional VLAs.\n-TEST (1, [d(MAX)], Init (),           false);\n-TEST (1, [d(MAX)], Init ({}),         false);\n-TEST (1, [d(MAX)], Init ({1}),        false);\n-TEST (1, [d(MAX)], Init ({1, 2}),     false);\n-TEST (1, [d(MAX)], Init ({1, 2, 3}),  false);\n-\n-TEST ( 2, [d(MAX / 2)],   Init (),    false);\n-TEST ( 4, [d(MAX / 4)],   Init (),    false);\n-TEST ( 8, [d(MAX / 8)],   Init (),    false);\n-TEST (16, [d(MAX / 16)],  Init (),    false);\n-TEST (32, [d(MAX / 32)],  Init (),    false);\n-TEST (64, [d(MAX / 64)],  Init (),    false);\n-#endif   // TEST_NEAR_VLA_MAX_SIZE\n-\n-// One dimensional VLAs with a negative upper bound.\n-TEST (1, [d(LONG_MIN)],  Init (),       true);\n-TEST (1, [d(INT_MIN)],   Init (),       true);\n-TEST (1, [d(-1234)],     Init (),       true);\n-TEST (1, [d(-1)],        Init (),       true);\n-\n-// Excessively large one dimensional VLAs.\n-TEST ( 1, [d(MAX + 1)],   Init (),      true);\n-TEST ( 2, [d(MAX)],       Init (),      true);\n-TEST ( 4, [d(MAX / 2)],   Init (),      true);\n-TEST ( 4, [d(MAX / 3)],   Init (),      true);\n-TEST ( 8, [d(MAX / 2)],   Init (),      true);\n-TEST ( 8, [d(MAX / 3)],   Init (),      true);\n-TEST ( 8, [d(MAX / 4)],   Init (),      true);\n-TEST ( 8, [d(MAX / 5)],   Init (),      true);\n-TEST ( 8, [d(MAX / 6)],   Init (),      true);\n-TEST ( 8, [d(MAX / 7)],   Init (),      true);\n-TEST (16, [d(MAX / 15)],  Init (),      true);\n-TEST (32, [d(MAX / 31)],  Init (),      true);\n-TEST (64, [d(MAX / 63)],  Init (),      true);\n-TEST ( 1, [d(SIZE_MAX)],  Init (),      true);\n-\n-TEST (1, [d(LONG_MIN)],  Init ({}),     true);\n-TEST (1, [d(INT_MIN)],   Init ({}),     true);\n-TEST (1, [d(-1)],        Init ({}),     true);\n-\n-TEST (1, [d(SIZE_MAX)],  Init ({}),     true);\n-\n-TEST (1, [d(LONG_MIN)],  Init ({0}),    true);\n-TEST (1, [d(INT_MIN)],   Init ({0}),    true);\n-TEST (1, [d(-1)],        Init ({0}),    true);\n-\n-TEST (1, [d(SIZE_MAX)],  Init ({0}),    true);\n-\n-TEST ( 1, [d(SIZE_MAX/2)  + 1], Init (), true);\n-TEST ( 2, [d(SIZE_MAX/4)  + 1], Init (), true);\n-TEST ( 4, [d(SIZE_MAX/8)  + 1], Init (), true);\n-TEST ( 8, [d(SIZE_MAX/16) + 1], Init (), true);\n-TEST (16, [d(SIZE_MAX/32) + 1], Init (), true);\n-\n-TEST ( 1, [d(SIZE_MAX/2)  + 1], Init ({1}),             true);\n-TEST ( 2, [d(SIZE_MAX/4)  + 1], Init ({1, 2}),          true);\n-TEST ( 4, [d(SIZE_MAX/8)  + 1], Init ({1, 2, 3}),       true);\n-TEST ( 8, [d(SIZE_MAX/16) + 1], Init ({1, 2, 3, 4}),    true);\n-TEST (16, [d(SIZE_MAX/32) + 1], Init ({1, 2, 3, 4, 5}), true);\n-\n-// Two dimensional VLAs with one constant bound.\n-\n-TEST (1, [1][d(0)],   Init (),          true);\n-\n-#if !BUG_58646\n-// The following causes an ICE due to c++/58646.\n-TEST (1, [1][d(0)],   Init ({}),        true);\n-#endif\n-TEST (1, [ ][d(0)],   Init ({{1}}),     true);   // unspecified bound\n-TEST (1, [1][d(0)],   Init ({{1}}),     true);\n-\n-TEST (1, [1][d(1)],   Init (),             false);\n-TEST (1, [1][d(1)],   Init ({{1}}),        false);\n-TEST (1, [1][d(1)],   Init ({{1, 2}}),     true);\n-TEST (1, [ ][d(1)],   Init ({{1, 2}}),     true);\n-\n-TEST (1, [1][d(2)],   Init (),             false);\n-TEST (1, [1][d(2)],   Init ({{1}}),        false);\n-TEST (1, [1][d(2)],   Init ({{1, 2}}),     false);\n-TEST (1, [ ][d(2)],   Init ({{1, 2}}),     false);\n-TEST (1, [1][d(2)],   Init ({{1, 2, 3}}),  true);\n-TEST (1, [ ][d(2)],   Init ({{1, 2, 3}}),  true);\n-\n-TEST (1, [2][d(1)],   Init (),                 false);\n-TEST (1, [2][d(1)],   Init ({{1}}),            false);\n-TEST (1, [ ][d(1)],   Init ({{1}}),            false);\n-TEST (1, [2][d(1)],   Init ({{1}, {2}}),       false);\n-TEST (1, [ ][d(1)],   Init ({{1}, {2}}),       false);\n-TEST (1, [2][d(1)],   Init ({{1, 2}}),         true);\n-TEST (1, [ ][d(1)],   Init ({{1, 2}}),         true);\n-TEST (1, [2][d(1)],   Init ({{1}, {2, 3}}),    true);\n-TEST (1, [ ][d(1)],   Init ({{1}, {2, 3}}),    true);\n-TEST (1, [2][d(1)],   Init ({{1, 2, 3}}),      true);\n-TEST (1, [ ][d(1)],   Init ({{1, 2, 3}}),      true);\n-TEST (1, [2][d(1)],   Init ({{1, 2, 3}, {4}}), true);\n-TEST (1, [ ][d(1)],   Init ({{1, 2, 3}, {4}}), true);\n-TEST (1, [2][d(1)],   Init ({{1, 2}, {3, 4}}), true);\n-TEST (1, [ ][d(1)],   Init ({{1, 2}, {3, 4}}), true);\n-\n-TEST (1, [2][d(2)],   Init (),                       false);\n-TEST (1, [2][d(2)],   Init ({{1}}),                  false);\n-TEST (1, [2][d(2)],   Init ({{1, 2}}),               false);\n-TEST (1, [2][d(2)],   Init ({{1, 2}, {3}}),          false);\n-TEST (1, [2][d(2)],   Init ({{1, 2}, {3, 4}}),       false);\n-TEST (1, [2][d(2)],   Init ({{1}, {2, 3, 4}}),       true);\n-TEST (1, [2][d(2)],   Init ({{1}, {2, 3, 4, 5}}),    true);\n-TEST (1, [2][d(2)],   Init ({{1, 2}, {3, 4, 5}}),    true);\n-TEST (1, [2][d(2)],   Init ({{1, 2, 3}, {4, 5}}),    true);\n-TEST (1, [2][d(2)],   Init ({{1, 2, 3}, {4, 5, 6}}), true);\n-\n-TEST (1, [2][d(3)],   Init (),                          false);\n-TEST (1, [2][d(3)],   Init ({{1}}),                     false);\n-TEST (1, [2][d(3)],   Init ({{1, 2}}),                  false);\n-TEST (1, [2][d(3)],   Init ({{1, 2}, {3}}),             false);\n-TEST (1, [2][d(3)],   Init ({{1, 2}, {3, 4}}),          false);\n-TEST (1, [2][d(3)],   Init ({{1}, {2, 3, 4}}),          false);\n-TEST (1, [2][d(3)],   Init ({{1}, {2, 3, 4, 5}}),       true);\n-TEST (1, [2][d(3)],   Init ({{1, 2}, {3, 4, 5}}),       false);\n-TEST (1, [2][d(3)],   Init ({{1, 2, 3}, {4, 5}}),       false);\n-TEST (1, [2][d(3)],   Init ({{1, 2, 3}, {4, 5, 6}}),    false);\n-TEST (1, [2][d(3)],   Init ({{1, 2, 3}, {4, 5, 6, 7}}), true);\n-TEST (1, [2][d(3)],   Init ({{1, 2, 3, 4}, {5, 6, 7}}), true);\n-TEST (1, [2][d(3)],   Init ({{1, 2, 3, 4, 5}, {6, 7}}), true);\n-TEST (1, [2][d(3)],   Init ({{1, 2, 3, 4, 5, 6}, {7}}), true);\n-TEST (1, [2][d(3)],   Init ({{1, 2, 3, 4, 5, 6, 7}}),   true);\n-\n-#if TEST_NEAR_VLA_MAX_SIZE\n-TEST (1, [1][d(MAX)], Init (),                 false);\n-#  if !BUG_58646\n-// The following causes an ICE due to c++/58646.\n-TEST (1, [1][d(MAX)], Init ({}),               false);\n-#  endif\n-TEST (1, [1][d(MAX)], Init ({{1}}),            false);\n-TEST (1, [1][d(MAX)], Init ({{1, 2}}),         false);\n-TEST (1, [1][d(MAX)], Init ({{1, 2, 3}}),      false);\n-TEST (1, [1][d(MAX)], Init ({{1, 2, 3, 4}}),   false);\n-\n-TEST (1, [2][d(MAX / 2)], Init (),                       false);\n-TEST (1, [2][d(MAX / 2)], Init ({{1}}),                  false);\n-TEST (1, [2][d(MAX / 2)], Init ({{1, 2}}),               false);\n-TEST (1, [2][d(MAX / 2)], Init ({{1, 2, 3}}),            false);\n-TEST (1, [2][d(MAX / 2)], Init ({{1, 2, 3, 4}}),         false);\n-TEST (1, [2][d(MAX / 2)], Init ({{1}, {2}}),             false);\n-TEST (1, [2][d(MAX / 2)], Init ({{1}, {2, 3}}),          false);\n-TEST (1, [2][d(MAX / 2)], Init ({{1, 2}, {3}}),          false);\n-TEST (1, [2][d(MAX / 2)], Init ({{1, 2}, {3, 4}}),       false);\n-TEST (1, [2][d(MAX / 2)], Init ({{1, 2, 3}, {4}}),       false);\n-TEST (1, [2][d(MAX / 2)], Init ({{1, 2, 3}, {4, 5}}),    false);\n-TEST (1, [2][d(MAX / 2)], Init ({{1, 2, 3}, {4, 5, 6}}), false);\n-#endif   // TEST_NEAR_VLA_MAX_SIZE\n-\n-// Excessively large two dimensional VLAs.\n-TEST (1, [1][d(LONG_MIN)],  Init (),       true);\n-TEST (1, [1][d(INT_MIN)],   Init (),       true);\n-TEST (1, [1][d(-1)],        Init (),       true);\n-\n-TEST (1, [1][d(SIZE_MAX)],  Init (),       true);\n-\n-#if !BUG_58646\n-// The following cause an ICE due to c++/58646.\n-TEST (1, [1][d(LONG_MIN)],  Init ({}),     true);\n-TEST (1, [1][d(INT_MIN)],   Init ({}),     true);\n-TEST (1, [1][d(-1)],        Init ({}),     true);\n-TEST (1, [1][d(SIZE_MAX)],  Init ({}),     true);\n-#endif\n-\n-TEST (1, [1][d(LONG_MIN)],  Init ({{0}}),  true);\n-TEST (1, [1][d(INT_MIN)],   Init ({{0}}),  true);\n-TEST (1, [1][d(-1)],        Init ({{0}}),  true);\n-TEST (1, [1][d(SIZE_MAX)],  Init ({{0}}),  true);\n-\n-TEST (1, [d(LONG_MIN)][1],  Init (),       true);\n-TEST (1, [d(INT_MIN)][1],   Init (),       true);\n-TEST (1, [d(-1)][1],        Init (),       true);\n-TEST (1, [d(SIZE_MAX)][1],  Init (),       true);\n-\n-TEST (1, [d(LONG_MIN)][1],  Init ({}),     true);\n-TEST (1, [d(INT_MIN)][1],   Init ({}),     true);\n-TEST (1, [d(-1)][1],        Init ({}),     true);\n-TEST (1, [d(SIZE_MAX)][1],  Init ({}),     true);\n-\n-TEST (1, [d(LONG_MIN)][1],  Init ({{0}}),  true);\n-TEST (1, [d(INT_MIN)][1],   Init ({{0}}),  true);\n-TEST (1, [d(-1)][1],        Init ({{0}}),  true);\n-TEST (1, [d(SIZE_MAX)][1],  Init ({{0}}),  true);\n-\n-// Two dimensional VLAs with no constant bound.\n-TEST (1, [d(0)][d(0)],   Init (),          true);\n-TEST (1, [d(0)][d(0)],   Init ({}),        true);\n-#if !BUG_58646\n-// The following cause an ICE due to c++/58646.\n-TEST (1, [d(0)][d(0)],   Init ({{}}),      true);\n-TEST (1, [d(0)][d(0)],   Init ({{}, {}}),  true);\n-#endif\n-\n-TEST (1, [d(0)][d(0)],   Init ({{1}}),     true);\n-TEST (1, [d(0)][d(0)],   Init ({{1, 2}}),  true);\n-#if !BUG_58646\n-TEST (1, [d(0)][d(0)],   Init ({{1}, {}}), true);\n-TEST (1, [d(0)][d(0)],   Init ({{}, {1}}), true);\n-#endif\n-\n-TEST (1, [d(1)][d(0)],   Init (),          true);\n-TEST (1, [d(1)][d(0)],   Init ({}),        true);\n-TEST (1, [d(1)][d(0)],   Init ({{1}}),     true);\n-\n-TEST (1, [d(1)][d(1)],   Init (),             false);\n-TEST (1, [d(1)][d(1)],   Init ({{1}}),        false);\n-TEST (1, [d(1)][d(1)],   Init ({{1, 2}}),     true);\n-\n-TEST (1, [d(1)][d(2)],   Init (),             false);\n-TEST (1, [d(1)][d(2)],   Init ({{1}}),        false);\n-TEST (1, [d(1)][d(2)],   Init ({{1, 2}}),     false);\n-TEST (1, [d(1)][d(2)],   Init ({{1, 2, 3}}),  true);\n-\n-TEST (1, [d(2)][d(1)],   Init (),                 false);\n-TEST (1, [d(2)][d(1)],   Init ({{1}}),            false);\n-TEST (1, [d(2)][d(1)],   Init ({{1}, {2}}),       false);\n-TEST (1, [d(2)][d(1)],   Init ({{1, 2}}),         true);\n-TEST (1, [d(2)][d(1)],   Init ({{1}, {2, 3}}),    true);\n-TEST (1, [d(2)][d(1)],   Init ({{1, 2, 3}}),      true);\n-TEST (1, [d(2)][d(1)],   Init ({{1, 2, 3}, {4}}), true);\n-TEST (1, [d(2)][d(1)],   Init ({{1, 2}, {3, 4}}), true);\n-\n-TEST (1, [d(2)][d(2)],   Init (),                       false);\n-TEST (1, [d(2)][d(2)],   Init ({{1}}),                  false);\n-TEST (1, [d(2)][d(2)],   Init ({{1, 2}}),               false);\n-TEST (1, [d(2)][d(2)],   Init ({{1, 2}, {3}}),          false);\n-TEST (1, [d(2)][d(2)],   Init ({{1, 2}, {3, 4}}),       false);\n-TEST (1, [d(2)][d(2)],   Init ({{1}, {2, 3, 4}}),       true);\n-TEST (1, [d(2)][d(2)],   Init ({{1}, {2, 3, 4, 5}}),    true);\n-TEST (1, [d(2)][d(2)],   Init ({{1, 2}, {3, 4, 5}}),    true);\n-TEST (1, [d(2)][d(2)],   Init ({{1, 2, 3}, {4, 5}}),    true);\n-TEST (1, [d(2)][d(2)],   Init ({{1, 2, 3}, {4, 5, 6}}), true);\n-\n-TEST (1, [d(2)][d(3)],   Init (),                          false);\n-TEST (1, [d(2)][d(3)],   Init ({{1}}),                     false);\n-TEST (1, [d(2)][d(3)],   Init ({{1, 2}}),                  false);\n-TEST (1, [d(2)][d(3)],   Init ({{1, 2}, {3}}),             false);\n-TEST (1, [d(2)][d(3)],   Init ({{1, 2}, {3, 4}}),          false);\n-TEST (1, [d(2)][d(3)],   Init ({{1}, {2, 3, 4}}),          false);\n-TEST (1, [d(2)][d(3)],   Init ({{1}, {2, 3, 4, 5}}),       true);\n-TEST (1, [d(2)][d(3)],   Init ({{1, 2}, {3, 4, 5}}),       false);\n-TEST (1, [d(2)][d(3)],   Init ({{1, 2, 3}, {4, 5}}),       false);\n-TEST (1, [d(2)][d(3)],   Init ({{1, 2, 3}, {4, 5, 6}}),    false);\n-TEST (1, [d(2)][d(3)],   Init ({{1, 2, 3}, {4, 5, 6, 7}}), true);\n-TEST (1, [d(2)][d(3)],   Init ({{1, 2, 3, 4}, {5, 6, 7}}), true);\n-TEST (1, [d(2)][d(3)],   Init ({{1, 2, 3, 4, 5}, {6, 7}}), true);\n-TEST (1, [d(2)][d(3)],   Init ({{1, 2, 3, 4, 5, 6}, {7}}), true);\n-TEST (1, [d(2)][d(3)],   Init ({{1, 2, 3, 4, 5, 6, 7}}),   true);\n-\n-#if TEST_NEAR_VLA_MAX_SIZE\n-TEST (1, [d(1)][d(MAX)], Init (),                              false);\n-TEST (1, [d(1)][d(MAX)], Init ({}),                            false);\n-TEST (1, [d(1)][d(MAX)], Init ({{1}}),                         false);\n-TEST (1, [d(1)][d(MAX)], Init ({{1, 2}}),                      false);\n-TEST (1, [d(1)][d(MAX)], Init ({{1, 2, 3}}),                   false);\n-TEST (1, [d(1)][d(MAX)], Init ({{1, 2, 3, 4}}),                false);\n-TEST (1, [d(1)][d(MAX)], Init ({{1, 2, 3, 4, 5}}),             false);\n-TEST (1, [d(1)][d(MAX)], Init ({{1, 2, 3, 4, 5, 6}}),          false);\n-TEST (1, [d(1)][d(MAX)], Init ({{1, 2, 3, 4, 5, 6, 7}}),       false);\n-TEST (1, [d(1)][d(MAX)], Init ({{1, 2, 3, 4, 5, 6, 7, 8}}),    false);\n-TEST (1, [d(1)][d(MAX)], Init ({{1, 2, 3, 4, 5, 6, 7, 8, 9}}), false);\n-\n-TEST (1, [d(2)][d(MAX / 2)], Init (),                              false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1}}),                         false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1, 2}}),                      false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1, 2, 3}}),                   false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1, 2, 3, 4}}),                false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1, 2, 3, 4, 5}}),             false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1, 2, 3, 4, 5, 6}}),          false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1, 2, 3, 4, 5, 6, 7}}),       false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1, 2, 3, 4, 5, 6, 7, 8}}),    false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1, 2, 3, 4, 5, 6, 7, 8, 9}}), false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1}, {2}}),                    false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1}, {2, 3}}),                 false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1, 2}, {3}}),                 false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1, 2}, {3, 4}}),              false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1, 2, 3}, {4}}),              false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1, 2, 3}, {4, 5}}),           false);\n-TEST (1, [d(2)][d(MAX / 2)], Init ({{1, 2, 3}, {4, 5, 6}}),        false);\n-#endif\n-\n-TEST (1, [d(2)][d(MAX)],        Init (),                         true);\n-TEST (1, [d(2)][d(MAX)],        Init ({{1}}),                    true);\n-TEST (1, [d(MAX)][d(MAX)],      Init ({{1, 2}}),                 true);\n-TEST (1, [d(0)][d(MAX)],        Init ({{1}, {2}}),               true);\n-TEST (1, [d(INT_MAX)][d(MAX)],  Init ({{1}, {2, 3}}),            true);\n-TEST (1, [d(SIZE_MAX)][d(MAX)], Init ({{1, 2}, {3, 4}, {5}}),    true);\n-\n-// Erroneous two-dimensional VLAs with size exceeding SIZE_MAX / 2\n-// (those must be rejected because no object can be bigger than that,\n-// otherwise pointer arithmetic breaks).\n-TEST ( 1, [2][d(SIZE_MAX/2)],  Init (), true);\n-TEST ( 2, [2][d(SIZE_MAX/4)],  Init (), true);\n-TEST ( 4, [2][d(SIZE_MAX/8)],  Init (), true);\n-TEST ( 8, [2][d(SIZE_MAX/16)], Init (), true);\n-TEST (16, [2][d(SIZE_MAX/32)], Init (), true);\n-\n-TEST ( 1, [d(SIZE_MAX/2)][2],  Init (), true);\n-TEST ( 2, [d(SIZE_MAX/4)][2],  Init (), true);\n-TEST ( 4, [d(SIZE_MAX/8)][2],  Init (), true);\n-TEST ( 8, [d(SIZE_MAX/16)][2], Init (), true);\n-TEST (16, [d(SIZE_MAX/32)][2], Init (), true);\n-\n-// Verify that the unspecified bound is factored into the computation\n-// of the total size.\n-TEST ( 1, [][d(SIZE_MAX/2)],  Init ({{1}, {2}}),      true);\n-TEST ( 2, [][d(SIZE_MAX/4)],  Init ({{1}, {2}}),      true);\n-TEST ( 4, [][d(SIZE_MAX/8)],  Init ({{1}, {2}}),      true);\n-TEST ( 8, [][d(SIZE_MAX/16)], Init ({{1}, {2}}),      true);\n-TEST (16, [][d(SIZE_MAX/32)], Init ({{1}, {2}}),      true);\n-TEST (16, [][d(SIZE_MAX/64)], Init ({{1}, {2}, {3}}), true);\n-\n-// Three dimensional VLAs with two constant bounds.\n-\n-TEST (1, [1][1][d(-1)], Init (),                    true);\n-TEST (1, [1][1][d(0)], Init (),                     true);\n-\n-#if !BUG_58646\n-// The following causes an ICE due to c++/58646.\n-TEST (1, [1][1][d(0)],  Init ({}),                   true);\n-TEST (1, [1][1][d(-1)], Init ({{}}),                 true);\n-TEST (1, [1][d(-1)][1], Init ({{}}),                 true);\n-TEST (1, [d(-1)][1][1], Init ({{}}),                 true);\n-\n-TEST (1, [1][1][d(0)], Init ({{}}),                  true);\n-TEST (1, [1][d(0)][1], Init ({{}}),                  true);\n-TEST (1, [d(0)][1][1], Init ({{}}),                  true);\n-#endif\n-\n-TEST (1, [1][1][d(1)], Init (),                      false);\n-\n-#if !BUG_58646\n-TEST (1, [1][1][d(1)], Init ({{}}),                  false);\n-TEST (1, [1][1][d(1)], Init ({{{}}}),                false);\n-TEST (1, [1][1][d(1)], Init ({{{1}}}),               false);\n-#endif\n-\n-TEST (1, [1][1][d(1)], Init ({{{1, 2}}}),            true);\n-TEST (1, [1][1][d(1)], Init ({{{1, 2, 3}}}),         true);\n-\n-TEST (1, [1][d(1)][1], Init (),                      false);\n-\n-#if !BUG_58646\n-TEST (1, [1][d(1)][1], Init ({{}}),                  false);\n-TEST (1, [1][d(1)][1], Init ({{{}}}),                false);\n-#endif\n-\n-TEST (1, [1][d(1)][1], Init ({{{1}}}),               false);\n-TEST (1, [1][d(1)][1], Init ({{{1}, {2}}}),          true);\n-TEST (1, [1][d(1)][1], Init ({{{1}, {2}, {3}}}),     true);\n-\n-TEST (1, [d(1)][1][1], Init (),                      false);\n-\n-#if !BUG_58646\n-TEST (1, [d(1)][1][1], Init ({{}}),                  false);\n-TEST (1, [d(1)][1][1], Init ({{{}}}),                false);\n-#endif\n-\n-TEST (1, [d(1)][1][1], Init ({{{1}}}),               false);\n-TEST (1, [d(1)][1][1], Init ({{{1}}, {{2}}}),        true);\n-TEST (1, [d(1)][1][1], Init ({{{1}}, {{2}}, {{3}}}), true);\n-\n-TEST (1, [1][1][d(2)], Init (),                      false);\n-\n-#if !BUG_58646\n-TEST (1, [1][1][d(2)], Init ({{}}),                  false);\n-TEST (1, [1][1][d(2)], Init ({{{}}}),                false);\n-#endif\n-\n-TEST (1, [1][1][d(2)], Init ({{{1}}}),               false);\n-TEST (1, [1][1][d(2)], Init ({{{1, 2}}}),            false);\n-TEST (1, [1][1][d(2)], Init ({{{1, 2, 3}}}),         true);\n-\n-TEST (1, [1][d(2)][1], Init (),                      false);\n-\n-#if !BUG_58646\n-TEST (1, [1][d(2)][1], Init ({{}}),                  false);\n-TEST (1, [1][d(2)][1], Init ({{{}}}),                false);\n-#endif\n-TEST (1, [1][d(2)][1], Init ({{{1}}}),               false);\n-TEST (1, [1][d(2)][1], Init ({{{1}, {2}}}),          false);\n-TEST (1, [1][d(2)][1], Init ({{{1}, {2}, {3}}}),     true);\n-\n-TEST (1, [d(2)][1][1], Init (),                      false);\n-\n-#if !BUG_58646\n-TEST (1, [d(2)][1][1], Init ({{}}),                  false);\n-TEST (1, [d(2)][1][1], Init ({{{}}}),                false);\n-#endif\n-TEST (1, [d(2)][1][1], Init ({{{1}}}),               false);\n-TEST (1, [d(2)][1][1], Init ({{{1}}, {{2}}}),        false);\n-TEST (1, [d(2)][1][1], Init ({{{1}}, {{2}}, {{3}}}), true);\n-\n-TEST (1, [1][2][d(2)], Init (),                      false);\n-\n-#if !BUG_58646\n-TEST (1, [1][2][d(2)], Init ({{}}),                  false);\n-TEST (1, [1][2][d(2)], Init ({{{}}}),                false);\n-#endif\n-\n-TEST (1, [1][2][d(2)], Init ({{{1}}}),               false);\n-TEST (1, [1][2][d(2)], Init ({{{1, 2}}}),            false);\n-TEST (1, [1][2][d(2)], Init ({{{1, 2, 3}}}),         true);\n-\n-TEST (1, [1][2][d(2)], Init ({{{1}, {2}}}),          false);\n-TEST (1, [1][2][d(2)], Init ({{{1}, {2, 3}}}),       false);\n-TEST (1, [1][2][d(2)], Init ({{{1, 2}, {3}}}),       false);\n-TEST (1, [1][2][d(2)], Init ({{{1, 2}, {3, 4}}}),    false);\n-TEST (1, [1][2][d(2)], Init ({{{1}, {2, 3, 4}}}),    true);\n-TEST (1, [1][2][d(2)], Init ({{{1, 2, 3}, {}}}),     true);\n-TEST (1, [1][2][d(2)], Init ({{{1, 2, 3}, {4}}}),    true);\n-TEST (1, [1][2][d(2)], Init ({{{1, 2, 3, 4}}}),      true);\n-TEST (1, [1][2][d(2)], Init ({{{1, 2, 3, 4}, {}}}),  true);\n-TEST (1, [1][2][d(2)], Init ({{{1, 2, 3, 4}, {5}}}), true);\n-\n-TEST (1, [2][2][d(2)], Init ({{{1}, {2}}}),                         false);\n-TEST (1, [2][2][d(2)], Init ({{{1}, {2, 3}}}),                      false);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2}}}),                           false);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2}, {3}}}),                      false);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2}, {3, 4}}}),                   false);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2}, {3, 4}}, {{5}}}),            false);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2}, {3, 4}}, {{5, 6}}}),         false);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2}, {3, 4}}, {{5, 6}, {7}}}),    false);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2}, {3, 4}}, {{5, 6}, {7, 8}}}), false);\n-\n-TEST (1, [2][2][d(2)], Init ({{{1}, {2, 3, 4}}}),                      true);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2, 3}, {}}}),                       true);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2, 3}, {4}}}),                      true);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2, 3, 4}}}),                        true);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2, 3, 4}, {}}}),                    true);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2, 3, 4}, {5}}}),                   true);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2}, {3, 4}}, {{5, 6}, {7, 8, 9}}}), true);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2}, {3, 4}}, {{5, 6, 7}, {8, 9}}}), true);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2}, {3, 4, 5}}, {{6, 7}, {8, 9}}}), true);\n-TEST (1, [2][2][d(2)], Init ({{{1, 2, 3}, {4, 5}}, {{6, 7}, {8, 9}}}), true);\n-TEST (1, [2][2][d(2)], Init ({{{1}, {2}}, {{3}, {4, 5, 6}}}),          true);\n-TEST (1, [2][2][d(2)], Init ({{{1}}, {{2}, {3, 4, 5, 6}}}),            true);\n-\n-// Three dimensional VLAs with one constant bound.\n-TEST (1, [2][d(-1)][d(-1)], Init (),                                      true);\n-TEST (1, [2][d(-1)][d(0)],  Init (),                                      true);\n-TEST (1, [2][d(0)][d(-1)],  Init (),                                      true);\n-TEST (1, [2][d(1)][d(-1)],  Init (),                                      true);\n-TEST (1, [2][d(1)][d(0)],   Init (),                                      true);\n-TEST (1, [2][d(-1)][d(1)],  Init (),                                      true);\n-TEST (1, [2][d(0)][d(1)],   Init (),                                      true);\n-\n-TEST (1, [2][d(2)][d(2)], Init (),                                        false);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1}}}),                                 false);\n-TEST (1, [ ][d(2)][d(2)], Init ({{{1}}}),                                 false);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1}, {2}}}),                            false);\n-TEST (1, [ ][d(2)][d(2)], Init ({{{1}, {2}}}),                            false);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1}, {2, 3}}}),                         false);\n-TEST (1, [ ][d(2)][d(2)], Init ({{{1}, {2, 3}}}),                         false);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2}, {3}}}),                         false);\n-TEST (1, [ ][d(2)][d(2)], Init ({{{1, 2}, {3}}}),                         false);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2}, {3, 4}}}),                      false);\n-TEST (1, [ ][d(2)][d(2)], Init ({{{1, 2}, {3, 4}}}),                      false);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2}, {3, 4}}, {{5, 6}, {7, 8}}}),    false);\n-TEST (1, [ ][d(2)][d(2)], Init ({{{1, 2}, {3, 4}}, {{5, 6}, {7, 8}}}),    false);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1}, {2, 3, 4}}}),                      true);\n-TEST (1, [ ][d(2)][d(2)], Init ({{{1}, {2, 3, 4}}}),                      true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2, 3}, {}}}),                       true);\n-TEST (1, [ ][d(2)][d(2)], Init ({{{1, 2, 3}, {}}}),                       true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2, 3}, {4}}}),                      true);\n-TEST (1, [ ][d(2)][d(2)], Init ({{{1, 2, 3}, {4}}}),                      true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2, 3, 4}}}),                        true);\n-TEST (1, [ ][d(2)][d(2)], Init ({{{1, 2, 3, 4}}}),                        true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2, 3, 4}, {}}}),                    true);\n-TEST (1, [ ][d(2)][d(2)], Init ({{{1, 2, 3, 4}, {}}}),                    true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2, 3, 4}, {5}}}),                   true);\n-TEST (1, [ ][d(2)][d(2)], Init ({{{1, 2, 3, 4}, {5}}}),                   true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1}, {2, 3, 4}}}),                      true);\n-TEST (1, [ ][d(2)][d(2)], Init ({{{1}, {2, 3, 4}}}),                      true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1}, {2, 3}, {4}}}),                    true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2, 3}, {}}}),                       true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2, 3}, {4}}}),                      true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2, 3, 4}}}),                        true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2, 3, 4}, {}}}),                    true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2, 3, 4}, {5}}}),                   true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2}, {3, 4}}, {{5, 6}, {7, 8, 9}}}), true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2}, {3, 4}}, {{5, 6, 7}, {8, 9}}}), true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2}, {3, 4, 5}}, {{6, 7}, {8, 9}}}), true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1, 2, 3}, {4, 5}}, {{6, 7}, {8, 9}}}), true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1}, {2}}, {{3}, {4, 5, 6}}}),          true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1}}, {{2}, {3, 4, 5, 6}}}),            true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1}, {2}, {3}}}),                       true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1}, {2, 3}, {4}}}),                    true);\n-TEST (1, [2][d(2)][d(2)], Init ({{{1}, {2, 3, 4}, {5}}}),                 true);\n-\n-#if TEST_NEAR_VLA_MAX_SIZE\n-// Very large but not erroneous three-dimensional VLAs.\n-TEST ( 1, [2][d(1)][d(MAX/2)], Init (),  false);\n-TEST ( 2, [2][d(1)][d(MAX/4)], Init (),  false);\n-TEST ( 4, [2][d(1)][d(MAX/8)], Init (),  false);\n-TEST ( 8, [2][d(1)][d(MAX/16)], Init (), false);\n-TEST (16, [2][d(1)][d(MAX/32)], Init (), false);\n-\n-TEST ( 1, [2][d(MAX/2)][d(1)], Init (),  false);\n-TEST ( 2, [2][d(MAX/4)][d(1)], Init (),  false);\n-TEST ( 4, [2][d(MAX/8)][d(1)], Init (),  false);\n-TEST ( 8, [2][d(MAX/16)][d(1)], Init (), false);\n-TEST (16, [2][d(MAX/32)][d(1)], Init (), false);\n-\n-TEST ( 1, [d(MAX/2)][2][d(1)], Init (),  false);\n-TEST ( 2, [d(MAX/4)][2][d(1)], Init (),  false);\n-TEST ( 4, [d(MAX/8)][2][d(1)], Init (),  false);\n-TEST ( 8, [d(MAX/16)][2][d(1)], Init (), false);\n-TEST (16, [d(MAX/32)][2][d(1)], Init (), false);\n-#endif   // TEST_NEAR_VLA_MAX_SIZE\n-\n-// Erroneous three-dimensional VLAs with size exceeding SIZE_MAX / 2\n-// (those must be rejected because no object can be bigger than that,\n-// otherwise pointer arithmetic breaks).\n-TEST ( 1, [2][d(1)][d(SIZE_MAX/2)],  Init (), true);\n-TEST ( 2, [2][d(1)][d(SIZE_MAX/4)],  Init (), true);\n-TEST ( 4, [2][d(1)][d(SIZE_MAX/8)],  Init (), true);\n-TEST ( 8, [2][d(1)][d(SIZE_MAX/16)], Init (), true);\n-TEST (16, [2][d(1)][d(SIZE_MAX/32)], Init (), true);\n-\n-TEST ( 1, [2][d(SIZE_MAX/2)][d(1)],  Init (), true);\n-TEST ( 2, [2][d(SIZE_MAX/4)][d(1)],  Init (), true);\n-TEST ( 4, [2][d(SIZE_MAX/8)][d(1)],  Init (), true);\n-TEST ( 8, [2][d(SIZE_MAX/16)][d(1)], Init (), true);\n-TEST (16, [2][d(SIZE_MAX/32)][d(1)], Init (), true);\n-\n-TEST ( 1, [d(SIZE_MAX/2)][2][d(1)],  Init (), true);\n-TEST ( 2, [d(SIZE_MAX/4)][2][d(1)],  Init (), true);\n-TEST ( 4, [d(SIZE_MAX/8)][2][d(1)],  Init (), true);\n-TEST ( 8, [d(SIZE_MAX/16)][2][d(1)], Init (), true);\n-TEST (16, [d(SIZE_MAX/32)][2][d(1)], Init (), true);\n-\n-TEST (16, [3][d(SIZE_MAX)][d(SIZE_MAX)], Init (), true);\n-TEST (32, [d(SIZE_MAX)][5][d(SIZE_MAX)], Init (), true);\n-TEST (64, [d(SIZE_MAX)][d(SIZE_MAX)][7], Init (), true);\n-\n-int main ()\n-{\n-  if (fail)\n-    __builtin_abort ();\n-}"}]}