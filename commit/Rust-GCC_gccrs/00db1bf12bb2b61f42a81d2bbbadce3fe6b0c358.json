{"sha": "00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkYjFiZjEyYmIyYjYxZjQyYTgxZDJiYmJhZGNlM2ZlNmIwYzM1OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-03-09T09:06:52Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-03-09T09:06:52Z"}, "message": "re PR target/84763 (ICE in i386_pe_seh_cold_init)\n\n\tPR target/84763\n\t* config/i386/winnt.c (i386_pe_seh_cold_init): Use small pre-allocation\n\twhen the function accesses prior frames.\n\nFrom-SVN: r258381", "tree": {"sha": "c782f9705e8c1752cce605cfca8b3b6074d6ea37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c782f9705e8c1752cce605cfca8b3b6074d6ea37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358/comments", "author": null, "committer": null, "parents": [{"sha": "5da6b0135551f0060cd86d62cbbbfa5a4013157d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da6b0135551f0060cd86d62cbbbfa5a4013157d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5da6b0135551f0060cd86d62cbbbfa5a4013157d"}], "stats": {"total": 56, "additions": 52, "deletions": 4}, "files": [{"sha": "69b7def90bf33f75d7396ef2124b483c842c8e6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358", "patch": "@@ -1,3 +1,9 @@\n+2018-03-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/84763\n+\t* config/i386/winnt.c (i386_pe_seh_cold_init): Use small pre-allocation\n+\twhen the function accesses prior frames.\n+\n 2018-03-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/84456"}, {"sha": "d5c256b23ceb811622a098ccbaedac77466968de", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358", "patch": "@@ -879,7 +879,7 @@ void\n i386_pe_seh_cold_init (FILE *f, const char *name)\n {\n   struct seh_frame_state *seh;\n-  HOST_WIDE_INT offset;\n+  HOST_WIDE_INT alloc_offset, offset;\n \n   if (!TARGET_SEH)\n     return;\n@@ -891,7 +891,16 @@ i386_pe_seh_cold_init (FILE *f, const char *name)\n   assemble_name (f, name);\n   fputc ('\\n', f);\n \n-  offset = seh->sp_offset - INCOMING_FRAME_SP_OFFSET;\n+  /* In the normal case, the frame pointer is near the bottom of the frame\n+     so we can do the full stack allocation and set it afterwards.  There\n+     is an exception when the function accesses prior frames so, in this\n+     case, we need to pre-allocate a small chunk before setting it.  */\n+  if (crtl->accesses_prior_frames)\n+    alloc_offset = seh->cfa_offset;\n+  else\n+    alloc_offset = seh->sp_offset;\n+\n+  offset = alloc_offset - INCOMING_FRAME_SP_OFFSET;\n   if (offset > 0 && offset < SEH_MAX_FRAME_SIZE)\n     fprintf (f, \"\\t.seh_stackalloc\\t\" HOST_WIDE_INT_PRINT_DEC \"\\n\", offset);\n \n@@ -903,12 +912,12 @@ i386_pe_seh_cold_init (FILE *f, const char *name)\n \t\t : (gcc_unreachable (), \"\")), f);\n \tprint_reg (gen_rtx_REG (DImode, regno), 0, f);\n \tfprintf (f, \", \" HOST_WIDE_INT_PRINT_DEC \"\\n\",\n-\t\t seh->sp_offset - seh->reg_offset[regno]);\n+\t\t alloc_offset - seh->reg_offset[regno]);\n       }\n \n   if (seh->cfa_reg != stack_pointer_rtx)\n     {\n-      offset = seh->sp_offset - seh->cfa_offset;\n+      offset = alloc_offset - seh->cfa_offset;\n \n       gcc_assert ((offset & 15) == 0);\n       gcc_assert (IN_RANGE (offset, 0, 240));\n@@ -918,6 +927,13 @@ i386_pe_seh_cold_init (FILE *f, const char *name)\n       fprintf (f, \", \" HOST_WIDE_INT_PRINT_DEC \"\\n\", offset);\n     }\n \n+  if (crtl->accesses_prior_frames)\n+    {\n+      offset = seh->sp_offset - alloc_offset;\n+      if (offset > 0 && offset < SEH_MAX_FRAME_SIZE)\n+\tfprintf (f, \"\\t.seh_stackalloc\\t\" HOST_WIDE_INT_PRINT_DEC \"\\n\", offset);\n+    }\n+\n   fputs (\"\\t.seh_endprologue\\n\", f);\n }\n "}, {"sha": "80d60c880f84912df1f43620e9dd59200791f199", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358", "patch": "@@ -1,3 +1,7 @@\n+2018-03-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/compile/20180309-1.c: New test.\n+\n 2018-03-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/80598"}, {"sha": "078446696e9bf52fa2a914249cf5ed4ed9b4fddc", "filename": "gcc/testsuite/gcc.c-torture/compile/20180309-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20180309-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20180309-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20180309-1.c?ref=00db1bf12bb2b61f42a81d2bbbadce3fe6b0c358", "patch": "@@ -0,0 +1,22 @@\n+/* PR target/84763 */\n+/* { dg-require-effective-target return_address } */\n+\n+extern void abort (void);\n+\n+void *foo (unsigned int *data, unsigned int len)\n+{\n+  unsigned int local_data[128];\n+\n+  if (len > 128)\n+    abort ();\n+\n+  for (unsigned int i = 0; i < len; i++)\n+    local_data[i] = data[i] + data[len - 1 - i] * 2;\n+\n+  void *ret = __builtin_frame_address (0);\n+\n+  for (unsigned int i = 0; i < len; i++)\n+    ret = ret + local_data[i] % 8;\n+\n+  return ret;\n+}"}]}