{"sha": "30402573869ec1e624da994d10a9501e9b500d80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA0MDI1NzM4NjllYzFlNjI0ZGE5OTRkMTBhOTUwMWU5YjUwMGQ4MA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2009-08-21T23:14:32Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2009-08-21T23:14:32Z"}, "message": "Fix 40671, 41145\n\nFrom-SVN: r151004", "tree": {"sha": "076c4409198f73a9a102218e1c7015ddefcbf45a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/076c4409198f73a9a102218e1c7015ddefcbf45a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30402573869ec1e624da994d10a9501e9b500d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30402573869ec1e624da994d10a9501e9b500d80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30402573869ec1e624da994d10a9501e9b500d80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30402573869ec1e624da994d10a9501e9b500d80/comments", "author": null, "committer": null, "parents": [{"sha": "5399093be27221fc1dace508233bb244fc28571c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5399093be27221fc1dace508233bb244fc28571c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5399093be27221fc1dace508233bb244fc28571c"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "38d4dcc79781d267cb05a2b615331ac5fd4bfa53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30402573869ec1e624da994d10a9501e9b500d80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30402573869ec1e624da994d10a9501e9b500d80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30402573869ec1e624da994d10a9501e9b500d80", "patch": "@@ -1,3 +1,14 @@\n+2009-08-21  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/40671\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Use\n+\tTARGET_64BIT instead of TARGET_POWERPC64 to set the size of\n+\tpointers.\n+\n+\tPR target/41145\n+\t* config/rs6000/rs6000.c (rs6000_handle_altivec_attribute): Fix\n+\treporting of vector + decimal/boolean/complex, \n+\n 2009-08-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (rs6000_init_builtins): Fix type of"}, {"sha": "95f8ab5aae20bdb69fd01367ba6fa232e09d640a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30402573869ec1e624da994d10a9501e9b500d80/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30402573869ec1e624da994d10a9501e9b500d80/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=30402573869ec1e624da994d10a9501e9b500d80", "patch": "@@ -2198,7 +2198,7 @@ rs6000_override_options (const char *default_cpu)\n   };\n \n   /* Set the pointer size.  */\n-  if (TARGET_POWERPC64)\n+  if (TARGET_64BIT)\n     {\n       rs6000_pmode = (int)DImode;\n       rs6000_pointer_size = 64;\n@@ -22827,7 +22827,15 @@ rs6000_handle_altivec_attribute (tree *node,\n   mode = TYPE_MODE (type);\n \n   /* Check for invalid AltiVec type qualifiers.  */\n-  if (!TARGET_VSX)\n+  if (type == long_double_type_node)\n+    error (\"use of %<long double%> in AltiVec types is invalid\");\n+  else if (type == boolean_type_node)\n+    error (\"use of boolean types in AltiVec types is invalid\");\n+  else if (TREE_CODE (type) == COMPLEX_TYPE)\n+    error (\"use of %<complex%> in AltiVec types is invalid\");\n+  else if (DECIMAL_FLOAT_MODE_P (mode))\n+    error (\"use of decimal floating point types in AltiVec types is invalid\");\n+  else if (!TARGET_VSX)\n     {\n       if (type == long_unsigned_type_node || type == long_integer_type_node)\n \t{\n@@ -22845,14 +22853,6 @@ rs6000_handle_altivec_attribute (tree *node,\n       else if (type == double_type_node)\n \terror (\"use of %<double%> in AltiVec types is invalid without -mvsx\");\n     }\n-  else if (type == long_double_type_node)\n-    error (\"use of %<long double%> in AltiVec types is invalid\");\n-  else if (type == boolean_type_node)\n-    error (\"use of boolean types in AltiVec types is invalid\");\n-  else if (TREE_CODE (type) == COMPLEX_TYPE)\n-    error (\"use of %<complex%> in AltiVec types is invalid\");\n-  else if (DECIMAL_FLOAT_MODE_P (mode))\n-    error (\"use of decimal floating point types in AltiVec types is invalid\");\n \n   switch (altivec_type)\n     {"}]}