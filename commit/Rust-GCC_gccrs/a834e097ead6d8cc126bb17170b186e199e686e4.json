{"sha": "a834e097ead6d8cc126bb17170b186e199e686e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgzNGUwOTdlYWQ2ZDhjYzEyNmJiMTcxNzBiMTg2ZTE5OWU2ODZlNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-09-07T16:41:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-09-07T16:41:06Z"}, "message": "acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Check wcstoimax and wcstoumax, define _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1.\n\n2008-09-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Check wcstoimax and\n\twcstoumax, define _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1.\n\t* include/tr1_impl/cinttypes: Use the latter.\n\t* testsuite/tr1/8_c_compatibility/cinttypes/functions.cc: Likewise.\n\t* configure: Regenerate.\n\t* config.h.in: Likewise.\n\nFrom-SVN: r140089", "tree": {"sha": "f403006d4a968b42f1ff5cd365237a9849e462cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f403006d4a968b42f1ff5cd365237a9849e462cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a834e097ead6d8cc126bb17170b186e199e686e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a834e097ead6d8cc126bb17170b186e199e686e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a834e097ead6d8cc126bb17170b186e199e686e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a834e097ead6d8cc126bb17170b186e199e686e4/comments", "author": null, "committer": null, "parents": [{"sha": "fd7f97542330504c3ead0e857be4a94eb6f55b07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7f97542330504c3ead0e857be4a94eb6f55b07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd7f97542330504c3ead0e857be4a94eb6f55b07"}], "stats": {"total": 115, "additions": 108, "deletions": 7}, "files": [{"sha": "60af9a7d1e7ad75c0c23d5ab9041db41dc7ab0b2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a834e097ead6d8cc126bb17170b186e199e686e4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a834e097ead6d8cc126bb17170b186e199e686e4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a834e097ead6d8cc126bb17170b186e199e686e4", "patch": "@@ -1,3 +1,12 @@\n+2008-09-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Check wcstoimax and\n+\twcstoumax, define _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1.\n+\t* include/tr1_impl/cinttypes: Use the latter.\n+\t* testsuite/tr1/8_c_compatibility/cinttypes/functions.cc: Likewise.\n+\t* configure: Regenerate.\n+\t* config.h.in: Likewise.\n+\n 2008-09-05  Peter Dimov  <pdimov@mmltd.net>\n \n \t* testsuite/20_util/shared_ptr/cons/unique_ptr_deleter_ref_2.cc: New."}, {"sha": "2485922eb701e4e573850f0d04b190dd30e39d00", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a834e097ead6d8cc126bb17170b186e199e686e4/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a834e097ead6d8cc126bb17170b186e199e686e4/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=a834e097ead6d8cc126bb17170b186e199e686e4", "patch": "@@ -1520,7 +1520,7 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n   fi\n \n   # Check for the existence of <inttypes.h> functions (NB: doesn't make\n-  # sense if the previous check fails, per C99, 7.8/1).\n+  # sense if the glibcxx_cv_c99_stdint_tr1 check fails, per C99, 7.8/1).\n   ac_c99_inttypes_tr1=no;\n   if test x\"$glibcxx_cv_c99_stdint_tr1\" = x\"yes\"; then\n     AC_MSG_CHECKING([for ISO C99 support to TR1 in <inttypes.h>])\n@@ -1541,6 +1541,27 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n               <tr1/cinttypes> in namespace std::tr1.])\n   fi\n \n+  # Check for the existence of whcar_t <inttypes.h> functions (NB: doesn't\n+  # make sense if the glibcxx_cv_c99_stdint_tr1 check fails, per C99, 7.8/1).\n+  ac_c99_inttypes_wchar_t_tr1=no;\n+  if test x\"$glibcxx_cv_c99_stdint_tr1\" = x\"yes\"; then\n+    AC_MSG_CHECKING([for wchar_t ISO C99 support to TR1 in <inttypes.h>])\n+    AC_TRY_COMPILE([#include <inttypes.h>],\n+\t           [intmax_t base;\n+\t\t    const wchar_t* s;\n+\t            wchar_t** endptr;\n+\t            intmax_t ret = wcstoimax(s, endptr, base);\n+\t            uintmax_t uret = wcstoumax(s, endptr, base);\n+        \t   ],[ac_c99_inttypes_wchar_t_tr1=yes],\n+\t\t     [ac_c99_inttypes_wchar_t_tr1=no])\n+  fi\n+  AC_MSG_RESULT($ac_c99_inttypes_wchar_t_tr1)\n+  if test x\"$ac_c99_inttypes_wchar_t_tr1\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1, 1,\n+              [Define if wchar_t C99 functions in <inttypes.h> should be\n+\t      imported in <tr1/cinttypes> in namespace std::tr1.])\n+  fi\n+\n   # Check for the existence of the <stdbool.h> header.\t\n   AC_CHECK_HEADERS(stdbool.h)\n "}, {"sha": "8e3b000fbd189ef86910c8159786cb283047366d", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a834e097ead6d8cc126bb17170b186e199e686e4/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a834e097ead6d8cc126bb17170b186e199e686e4/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=a834e097ead6d8cc126bb17170b186e199e686e4", "patch": "@@ -760,6 +760,10 @@\n    <tr1/cinttypes> in namespace std::tr1. */\n #undef _GLIBCXX_USE_C99_INTTYPES_TR1\n \n+/* Define if wchar_t C99 functions in <inttypes.h> should be imported in\n+   <tr1/cinttypes> in namespace std::tr1. */\n+#undef _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1\n+\n /* Define if C99 functions or macros in <math.h> should be imported in <cmath>\n    in namespace std. */\n #undef _GLIBCXX_USE_C99_MATH"}, {"sha": "1a1c4182c7d3df350a3078d79be47a2c9e70c316", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a834e097ead6d8cc126bb17170b186e199e686e4/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a834e097ead6d8cc126bb17170b186e199e686e4/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=a834e097ead6d8cc126bb17170b186e199e686e4", "patch": "@@ -20351,7 +20351,7 @@ _ACEOF\n   fi\n \n   # Check for the existence of <inttypes.h> functions (NB: doesn't make\n-  # sense if the previous check fails, per C99, 7.8/1).\n+  # sense if the glibcxx_cv_c99_stdint_tr1 check fails, per C99, 7.8/1).\n   ac_c99_inttypes_tr1=no;\n   if test x\"$glibcxx_cv_c99_stdint_tr1\" = x\"yes\"; then\n     echo \"$as_me:$LINENO: checking for ISO C99 support to TR1 in <inttypes.h>\" >&5\n@@ -20419,6 +20419,73 @@ _ACEOF\n \n   fi\n \n+  # Check for the existence of whcar_t <inttypes.h> functions (NB: doesn't\n+  # make sense if the glibcxx_cv_c99_stdint_tr1 check fails, per C99, 7.8/1).\n+  ac_c99_inttypes_wchar_t_tr1=no;\n+  if test x\"$glibcxx_cv_c99_stdint_tr1\" = x\"yes\"; then\n+    echo \"$as_me:$LINENO: checking for wchar_t ISO C99 support to TR1 in <inttypes.h>\" >&5\n+echo $ECHO_N \"checking for wchar_t ISO C99 support to TR1 in <inttypes.h>... $ECHO_C\" >&6\n+    cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <inttypes.h>\n+int\n+main ()\n+{\n+intmax_t base;\n+\t\t    const wchar_t* s;\n+\t            wchar_t** endptr;\n+\t            intmax_t ret = wcstoimax(s, endptr, base);\n+\t            uintmax_t uret = wcstoumax(s, endptr, base);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_c99_inttypes_wchar_t_tr1=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_c99_inttypes_wchar_t_tr1=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+  fi\n+  echo \"$as_me:$LINENO: result: $ac_c99_inttypes_wchar_t_tr1\" >&5\n+echo \"${ECHO_T}$ac_c99_inttypes_wchar_t_tr1\" >&6\n+  if test x\"$ac_c99_inttypes_wchar_t_tr1\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1 1\n+_ACEOF\n+\n+  fi\n+\n   # Check for the existence of the <stdbool.h> header.\n \n for ac_header in stdbool.h"}, {"sha": "2dfafa824f9060d3fb1b5293df3ef8a6a89b8d69", "filename": "libstdc++-v3/include/tr1_impl/cinttypes", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a834e097ead6d8cc126bb17170b186e199e686e4/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcinttypes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a834e097ead6d8cc126bb17170b186e199e686e4/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcinttypes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcinttypes?ref=a834e097ead6d8cc126bb17170b186e199e686e4", "patch": "@@ -1,6 +1,6 @@\n // TR1 cinttypes -*- C++ -*-\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -64,7 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n   using ::strtoimax;\n   using ::strtoumax;\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n+#if defined(_GLIBCXX_USE_WCHAR_T) && _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1\n   using ::wcstoimax;\n   using ::wcstoumax;\n #endif"}, {"sha": "97bab0c260b1ca59a2c15d5ddd9947fb18598c37", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cinttypes/functions.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a834e097ead6d8cc126bb17170b186e199e686e4/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcinttypes%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a834e097ead6d8cc126bb17170b186e199e686e4/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcinttypes%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcinttypes%2Ffunctions.cc?ref=a834e097ead6d8cc126bb17170b186e199e686e4", "patch": "@@ -2,7 +2,7 @@\n \n // 2006-01-30  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -31,7 +31,7 @@ void test01()\n   std::tr1::intmax_t i = 0, numer = 0, denom = 0, base = 0;\n   const char* s = 0;\n   char** endptr = 0;\n-#ifdef _GLIBCXX_USE_WCHAR_T\n+#if defined(_GLIBCXX_USE_WCHAR_T) && _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1\n   const wchar_t* ws = 0;\n   wchar_t** wendptr = 0;\n #endif  \n@@ -49,7 +49,7 @@ void test01()\n   ret = std::tr1::strtoimax(s, endptr, base);\n   uret = std::tr1::strtoumax(s, endptr, base);\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n+#if defined(_GLIBCXX_USE_WCHAR_T) && _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1\n   ret = std::tr1::wcstoimax(ws, wendptr, base);\n   uret = std::tr1::wcstoumax(ws, wendptr, base);\n #endif"}]}