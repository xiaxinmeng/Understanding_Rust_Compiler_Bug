{"sha": "688e49197de88a4d7615eafd2b7691623a8424d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg4ZTQ5MTk3ZGU4OGE0ZDc2MTVlYWZkMmI3NjkxNjIzYTg0MjRkMQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2010-09-02T17:10:15Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2010-09-02T17:10:15Z"}, "message": "Optimize (double)(long) to generate FRIZ if -ffast-math\n\nFrom-SVN: r163786", "tree": {"sha": "0f6120139829fdb66510b48c79f050c3ba9411bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f6120139829fdb66510b48c79f050c3ba9411bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/688e49197de88a4d7615eafd2b7691623a8424d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688e49197de88a4d7615eafd2b7691623a8424d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/688e49197de88a4d7615eafd2b7691623a8424d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688e49197de88a4d7615eafd2b7691623a8424d1/comments", "author": null, "committer": null, "parents": [{"sha": "398da2ac319656b0318279edecdaf88e7fccc3c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/398da2ac319656b0318279edecdaf88e7fccc3c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/398da2ac319656b0318279edecdaf88e7fccc3c9"}], "stats": {"total": 89, "additions": 87, "deletions": 2}, "files": [{"sha": "4062f95e144315a49a39ea2dceae42e97ad6dce3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=688e49197de88a4d7615eafd2b7691623a8424d1", "patch": "@@ -1,3 +1,16 @@\n+2010-09-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.opt (-mfriz): New switch to control whether\n+\tto convert (double)(long) into a single FRIZ instruction or not\n+\twhen -ffast-math is used.\n+\n+\t* config/rs6000/vsx.md (VSX_DF): New iterator for DF/V2DF modes.\n+\t(vsx_float_fix_<mode>2): Optimize (double)(long) into X{S,V}RDPIZ\n+\tor FRIZ instruction if -ffast-math.\n+\t* config/rs6000/rs6000.md (friz): Ditto.\n+\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document -mfriz.\n+\n 2010-09-02  Joseph Myers  <joseph@codesourcery.com>\n \n \t* opth-gen.awk (quote, comma): Remove unused variables."}, {"sha": "23fde85bb53411491a8aa030e5cb93f7a2add5fb", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=688e49197de88a4d7615eafd2b7691623a8424d1", "patch": "@@ -6983,6 +6983,18 @@\n   \"fctiwuz %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n+;; Only optimize (float (fix x)) -> frz if we are in fast-math mode, since\n+;; since the friz instruction does not truncate the value if the floating\n+;; point value is < LONG_MIN or > LONG_MAX.\n+(define_insn \"*friz\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d\")\n+\t(float:DF (fix:DI (match_operand:DF 1 \"gpc_reg_operand\" \"d\"))))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && TARGET_POPCNTB\n+   && !VECTOR_UNIT_VSX_P (DFmode) && flag_unsafe_math_optimizations\n+   && !flag_trapping_math && TARGET_FRIZ\"\n+  \"friz %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n ;; No VSX equivalent to fctid\n (define_insn \"lrint<mode>di2\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d\")"}, {"sha": "659bcb6d324d35b49148fe2e0ab0e73a4a5aba1d", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=688e49197de88a4d7615eafd2b7691623a8424d1", "patch": "@@ -1,6 +1,7 @@\n ; Options for the rs6000 port of the compiler\n ;\n-; Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010 Free Software\n+; Foundation, Inc.\n ; Contributed by Aldy Hernandez <aldy@quesejoda.com>.\n ;\n ; This file is part of GCC.\n@@ -115,6 +116,10 @@ mpopcntd\n Target Report Mask(POPCNTD)\n Use PowerPC V2.06 popcntd instruction\n \n+mfriz\n+Target Report Var(TARGET_FRIZ) Init(-1)\n+Under -ffast-math, generate a FRIZ instruction for (double)(long long) conversions\n+\n mveclibabi=\n Target RejectNegative Joined Var(rs6000_veclibabi_name)\n Vector library ABI to use"}, {"sha": "4b395e3bbd3888461e4985b2ff3c7cbe79367f4b", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=688e49197de88a4d7615eafd2b7691623a8424d1", "patch": "@@ -28,6 +28,9 @@\n ;; Iterator for the 2 32-bit vector types\n (define_mode_iterator VSX_W [V4SF V4SI])\n \n+;; Iterator for the DF types\n+(define_mode_iterator VSX_DF [V2DF DF])\n+\n ;; Iterator for vector floating point types supported by VSX\n (define_mode_iterator VSX_F [V4SF V2DF])\n \n@@ -1053,6 +1056,22 @@\n   \"VECTOR_UNIT_VSX_P (V2DFmode)\"\n   \"xvcvspuxds %x0,%x1\"\n   [(set_attr \"type\" \"vecfloat\")])\n+\n+;; Only optimize (float (fix x)) -> frz if we are in fast-math mode, since\n+;; since the xsrdpiz instruction does not truncate the value if the floating\n+;; point value is < LONG_MIN or > LONG_MAX.\n+(define_insn \"*vsx_float_fix_<mode>2\"\n+  [(set (match_operand:VSX_DF 0 \"vsx_register_operand\" \"=<VSr>,?wa\")\n+\t(float:VSX_DF\n+\t (fix:<VSI>\n+\t  (match_operand:VSX_DF 1 \"vsx_register_operand\" \"<VSr>,?wa\"))))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n+   && VECTOR_UNIT_VSX_P (<MODE>mode) && flag_unsafe_math_optimizations\n+   && !flag_trapping_math && TARGET_FRIZ\"\n+  \"x<VSv>r<VSs>iz %x0,%x1\"\n+  [(set_attr \"type\" \"<VStype_simple>\")\n+   (set_attr \"fp_type\" \"<VSfptype_simple>\")])\n+\n \f\n ;; Logical and permute operations\n (define_insn \"*vsx_and<mode>3\""}, {"sha": "797a66024333fb7bbb4b96966ae3a1a00584b78f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=688e49197de88a4d7615eafd2b7691623a8424d1", "patch": "@@ -789,7 +789,7 @@ See RS/6000 and PowerPC Options.\n -msdata=@var{opt}  -mvxworks  -G @var{num}  -pthread @gol\n -mrecip -mrecip=@var{opt} -mno-recip -mrecip-precision\n -mno-recip-precision @gol\n--mveclibabi=@var{type}}\n+-mveclibabi=@var{type} -mfriz -mno-friz}\n \n @emph{RX Options}\n @gccoptlist{-m64bit-doubles  -m32bit-doubles  -fpu  -nofpu@gol\n@@ -15931,6 +15931,15 @@ GCC will currently emit calls to @code{acosd2}, @code{acosf4},\n for power7.  Both @option{-ftree-vectorize} and\n @option{-funsafe-math-optimizations} have to be enabled.  The MASS\n libraries will have to be specified at link time.\n+\n+@item -mfriz\n+@itemx -mno-friz\n+@opindex mfriz\n+Generate (do not generate) the @code{friz} instruction when the\n+@option{-funsafe-math-optimizations} option is used to optimize\n+rounding a floating point value to 64-bit integer and back to floating\n+point.  The @code{friz} instruction does not return the same value if\n+the floating point number is too large to fit in an integer.\n @end table\n \n @node RX Options"}, {"sha": "e947d3c57e47d2ef2f10e03f5e69907494e619c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=688e49197de88a4d7615eafd2b7691623a8424d1", "patch": "@@ -1,3 +1,9 @@\n+2010-09-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/ppc-fpconv-10.c: New file to test generating\n+\tFRIZ/XSRIZ instruciton for (double)(long long)x.\n+\t* gcc.target/powerpc/ppc-fpconv-11.c: Ditto.\n+\n 2010-09-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* g++.dg/debug/dwarf2/nested-2.C: Allow for ! as comment delimiter."}, {"sha": "59ba5f91f4800a12cbce938eab592d47cdf898ed", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fpconv-10.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-10.c?ref=688e49197de88a4d7615eafd2b7691623a8424d1", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O2 -mcpu=power7 -ffast-math\" } */\n+/* { dg-final { scan-assembler \"xsrdpiz\" } } */\n+/* { dg-final { scan-assembler-not \"friz\" } } */\n+\n+double round_double_llong (double a)\n+{\n+  return (double)(long long)a;\n+}"}, {"sha": "f6d28cdc8c55321bec56f8eddbeca76ea2f6884c", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fpconv-11.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/688e49197de88a4d7615eafd2b7691623a8424d1/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fpconv-11.c?ref=688e49197de88a4d7615eafd2b7691623a8424d1", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-options \"-O2 -mcpu=power5 -ffast-math\" } */\n+/* { dg-final { scan-assembler-not \"xsrdpiz\" } } */\n+/* { dg-final { scan-assembler \"friz\" } } */\n+\n+double round_double_llong (double a)\n+{\n+  return (double)(long long)a;\n+}"}]}