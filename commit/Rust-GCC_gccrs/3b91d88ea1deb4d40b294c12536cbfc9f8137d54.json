{"sha": "3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I5MWQ4OGVhMWRlYjRkNDBiMjk0YzEyNTM2Y2JmYzlmODEzN2Q1NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T07:46:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T07:46:06Z"}, "message": "a-calend-mingw.adb: Add call to OS_Primitives.Initialize;\n\n\t* a-calend-mingw.adb: Add call to OS_Primitives.Initialize;\n\n\t* s-taprop-mingw.adb, s-taprop-vms.adb, s-taprop-solaris.adb,\n\ts-taprop-os2.adb, s-taprop-irix-athread.adb, s-taprop-linux.adb,\n\ts-taprop-hpux-dce.adb, s-taprop-irix.adb, s-taprop-tru64.adb,\n\ts-taprop-lynxos.adb: Move with clauses outside Warnings Off now that\n\tdependent units are Preelaborate.\n\t(Initialize): Call Interrupt_Managemeent.Initialize and\n\tOS_Primitives.Initialize to ensure proper initialization of this unit.\n\tRemove use of System.Soft_Links\n\tMake this unit Preelaborate.\n\n\t* s-stache.ads, s-taspri-vxworks.ads, s-taspri-mingw.ads,\n\ts-taspri-vms.ads, s-tasinf-solaris.ads, s-taspri-os2.ads,\n\ts-taspri-lynxos.ads, s-taspri-hpux-dce.ads, s-taspri-tru64.ads,\n\ts-tasinf-tru64.ads, s-tasinf-irix.ads, s-tasinf-irix-athread.ads,\n\ts-proinf-irix-athread.adb, s-proinf-irix-athread.ads,\n\ts-tratas.ads, s-tasinf.ads: Minor reformatting.\n\tAdd pragma Preelaborate, since these packages are suitable for this\n\tcategorization.\n\tUpdate comments.\n\n\t* s-traent-vms.ads, s-intman-dummy.adb,\n\ts-taprop-dummy.adb: Make this unit Preelaborate.\n\n\t* s-osprim-vxworks.adb, s-osprim-vms.adb, s-osprim-vms.ads,\n\ts-osprim-mingw.adb, s-intman-vxworks.ads, s-intman-vxworks.adb,\n\ts-intman-vms.adb, s-intman-mingw.adb, s-intman-vms.ads,\n\ts-osprim-unix.adb, s-osprim-os2.adb, s-osprim-solaris.adb,\n\ts-intman-solaris.adb, s-intman-irix-athread.adb,\n\ts-intman-irix.adb: Mark this unit Preelaborate.\n\t(Initialize): New procedure.\n\tUpdate comments.\n\n\t* s-taspri-linux.ads: Removed.\n\n\t* s-tpopsp-solaris.adb (Initialize): Create the key in this procedure,\n\tas done by other implementations (e.g. posix).\n\n\t* s-taprop.ads (Timed_Delay): Update spec since the caller now is\n\tresponsible for deferring abort.\n\tMark this unit Preelaborate.\n\n\t* s-taprob.adb, s-tarest.adb: Call System.Tasking.Initialize to ensure\n\tproper initialization of the tasking run-time.\n\n\t* s-tasdeb.ads: Mark this unit Preelaborate.\n\t(Known_Tasks): Add explicit default value to avoid elaboration code.\n\n\t* s-inmaop-vms.adb (Elaboration code): Add call to\n\tInterrupt_Management.Initialize since the elaboration code depends on\n\tproper initialization of this package.\n\n\t* s-intman.ads, s-inmaop-posix.adb, s-intman-posix.adb,\n\ts-osprim.ads, s-taprop-posix.adb, s-taspri-posix.ads,\n\ts-osprim-posix.adb: Make this unit Preelaborate.\n\n\t* a-calend.adb: Add call to OS_Primitives.Initialize\n\n\t* a-elchha.adb: Update use of Except.Id.Full_Name.\n\tMinor reformatting.\n\tRemove use of Ada.Exceptions.Traceback when possible, cleaner.\n\n\t* a-dynpri.adb, a-sytaco.adb, a-sytaco.ads:\n\tMove with clauses outside Warnings Off now that dependent units are\n\tPreelaborate.\n\tUse raise xxx with \"...\"; Ada 2005 form.\n\n\t* a-taside.ads, a-taside.adb:\n\tRemove some dependencies, to make it easier to make this unit truly\n\tPreelaborate.\n\tRewrite some code to be conformant with Preelaborate rules.\n\n\t* g-os_lib.adb: Remove non-preelaborate code so that this unit can be\n\tmarked Preelaborate in the future.\n\n\t* s-proinf.ads, g-string.ads, s-auxdec.ads, s-auxdec-vms_64.ads: Make\n\tthese units Preelaborate.\n\n\t* s-exctab.adb: Update use of Except.Id.Full_Name.\n\n\t* s-soflin.ads, s-soflin.adb: Mark this unit Preelaborate_05.\n\t(Set_Exc_Stack_Addr_Soft, Get_Exc_Stack_Addr_NT, Set_Exc_Stack_Addr_NT,\n\tSet_Exc_Stack_Addr): Removed, no longer used.\n\tRemove reference to *Machine_State_Addr*, no longer needed.\n\n\t* s-stalib.ads: Mark this unit as Preelaborate[_05].\n\t(Exception_Data): Full_Name is now a System.Address so that this unit\n\tcan be made Preelaborate.\n\tClean up/simplify code thanks to Full_Name being a System.Address.\n\tRemove obsolete pragma Suppress (All_Checks), no longer needed.\n\n\t* s-taskin.ads, s-taskin.adb:\n\tMove with clauses outside Warnings Off now that dependent units are\n\tPreelaborate.\n\tMake this unit Preelaborate.\n\t(Initialize): New proceduure, replace elaboration code and makes the\n\tset up of the tasking run-time cleaner.\n\t(Detect_Blocking): Now a function instead of a deferred boolean, to\n\tobey Preelaborate rules.\n\n\t* s-tassta.adb (Finalize_Global_Tasks): Remove Get/Set_Exc_Stack_Addr\n\tsoft links, no longer used.\n\n\t* s-traces.ads, s-traent.ads: Add pragma Preelaborate, since these\n\tpackages are suitable for this categorization.\n\n\t* s-solita.adb: Replace use of Ada.Exception by raise xxx with \"...\"\n\tsince we compile run-time sources in Ada 2005 mode.\n\t(Timed_Delay_T): Call Abort_Defer/Undefer around Timed_Delay, to\n\tavoid having s-taprop*.adb depend on s-soflin and to avoid code\n\tduplication.\n\tRemove reference to *Machine_State_Addr*, no longer needed.\n\nFrom-SVN: r103847", "tree": {"sha": "a6cb1c584d1988e1b5e855ab100aea15d2e374d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6cb1c584d1988e1b5e855ab100aea15d2e374d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/comments", "author": null, "committer": null, "parents": [{"sha": "ca88769356a174361bf9c343dcbe8ea41192a662", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca88769356a174361bf9c343dcbe8ea41192a662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca88769356a174361bf9c343dcbe8ea41192a662"}], "stats": {"total": 2172, "additions": 854, "deletions": 1318}, "files": [{"sha": "71599bd419c3250bc2486f0a4fe98492f1c95c48", "filename": "gcc/ada/a-calend-mingw.adb", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-calend-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-calend-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend-mingw.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 1997-2002 Free Software Foundation, Inc.        --\n+--            Copyright (C) 1997-2005 Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is the Windows NT/95 version.\n+--  This is the Windows NT/95 version\n \n with System.OS_Primitives;\n --  used for Clock\n@@ -262,7 +262,7 @@ package body Ada.Calendar is\n \n       end if;\n \n-      --  Date_Int is the number of seconds from Epoch.\n+      --  Date_Int is the number of seconds from Epoch\n \n       Date_Int := Long_Long_Integer\n         (Int_Date * Sec_Unit / system_time_ns) + epoch_1970;\n@@ -391,4 +391,6 @@ package body Ada.Calendar is\n       return DY;\n    end Year;\n \n+begin\n+   System.OS_Primitives.Initialize;\n end Ada.Calendar;"}, {"sha": "c0180e4e995ed869ec80f77b4e88d4c79b8724dd", "filename": "gcc/ada/a-calend.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -476,4 +476,6 @@ package body Ada.Calendar is\n       return DY;\n    end Year;\n \n+begin\n+   System.OS_Primitives.Initialize;\n end Ada.Calendar;"}, {"sha": "a8acb2342b4dea9170e0af18ef6ff75f3e8ad7ff", "filename": "gcc/ada/a-dynpri.adb", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-dynpri.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-dynpri.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-dynpri.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -31,11 +31,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Warnings (Off);\n---  Allow withing of non-Preelaborated units in Ada 2005 mode where this\n---  package will be categorized as Preelaborate. See AI-362 for details.\n---  It is safe in the context of the run-time to violate the rules!\n-\n with Ada.Task_Identification;\n --  used for Task_Id\n --           Current_Task\n@@ -52,26 +47,22 @@ with System.Task_Primitives.Operations;\n with System.Tasking;\n --  used for Task_Id\n \n-with Ada.Exceptions;\n---  used for Raise_Exception\n-\n-with System.Tasking.Initialization;\n---  used for Defer/Undefer_Abort\n-\n with System.Parameters;\n --  used for Single_Lock\n \n-with Unchecked_Conversion;\n+with System.Soft_Links;\n+--  use for Abort_Defer\n+--          Abort_Undefer\n \n-pragma Warnings (On);\n+with Unchecked_Conversion;\n \n package body Ada.Dynamic_Priorities is\n \n    package STPO renames System.Task_Primitives.Operations;\n+   package SSL renames System.Soft_Links;\n \n    use System.Parameters;\n    use System.Tasking;\n-   use Ada.Exceptions;\n \n    function Convert_Ids is new\n      Unchecked_Conversion\n@@ -92,13 +83,11 @@ package body Ada.Dynamic_Priorities is\n \n    begin\n       if Target = Convert_Ids (Ada.Task_Identification.Null_Task_Id) then\n-         Raise_Exception (Program_Error'Identity,\n-           Error_Message & \"null task\");\n+         raise Program_Error with Error_Message & \"null task\";\n       end if;\n \n       if Task_Identification.Is_Terminated (T) then\n-         Raise_Exception (Tasking_Error'Identity,\n-           Error_Message & \"null task\");\n+         raise Tasking_Error with Error_Message & \"null task\";\n       end if;\n \n       return Target.Common.Base_Priority;\n@@ -121,16 +110,14 @@ package body Ada.Dynamic_Priorities is\n \n    begin\n       if Target = Convert_Ids (Ada.Task_Identification.Null_Task_Id) then\n-         Raise_Exception (Program_Error'Identity,\n-           Error_Message & \"null task\");\n+         raise Program_Error with Error_Message & \"null task\";\n       end if;\n \n       if Task_Identification.Is_Terminated (T) then\n-         Raise_Exception (Tasking_Error'Identity,\n-           Error_Message & \"terminated task\");\n+         raise Tasking_Error with Error_Message & \"terminated task\";\n       end if;\n \n-      Initialization.Defer_Abort (Self_ID);\n+      SSL.Abort_Defer.all;\n \n       if Single_Lock then\n          STPO.Lock_RTS;\n@@ -148,7 +135,7 @@ package body Ada.Dynamic_Priorities is\n             STPO.Unlock_RTS;\n          end if;\n \n-         --  Yield is needed to enforce FIFO task dispatching.\n+         --  Yield is needed to enforce FIFO task dispatching\n \n          --  LL Set_Priority is made while holding the RTS lock so that it\n          --  is inheriting high priority until it release all the RTS locks.\n@@ -175,7 +162,7 @@ package body Ada.Dynamic_Priorities is\n          end if;\n       end if;\n \n-      Initialization.Undefer_Abort (Self_ID);\n+      SSL.Abort_Undefer.all;\n    end Set_Priority;\n \n end Ada.Dynamic_Priorities;"}, {"sha": "34530edea418cce0a39af3e4361b1a4a6b648a43", "filename": "gcc/ada/a-elchha.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-elchha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-elchha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-elchha.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---           Copyright (C) 2003-2004 Free Software Foundation, Inc.         --\n+--           Copyright (C) 2003-2005 Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -37,6 +37,8 @@\n \n --  Default version for most targets\n \n+with System.Standard_Library; use System.Standard_Library;\n+\n procedure Ada.Exceptions.Last_Chance_Handler\n   (Except : Exception_Occurrence)\n is\n@@ -88,7 +90,7 @@ begin\n    --  really an exception at all. We recognize this by the fact that\n    --  it is the only exception whose name starts with underscore.\n \n-   if Except.Id.Full_Name.all (1) = '_' then\n+   if To_Ptr (Except.Id.Full_Name) (1) = '_' then\n       To_Stderr (Nline);\n       To_Stderr (\"Execution terminated by abort of environment task\");\n       To_Stderr (Nline);\n@@ -100,7 +102,8 @@ begin\n    elsif Except.Num_Tracebacks = 0 then\n       To_Stderr (Nline);\n       To_Stderr (\"raised \");\n-      To_Stderr (Except.Id.Full_Name.all (1 .. Except.Id.Name_Length - 1));\n+      To_Stderr\n+        (To_Ptr (Except.Id.Full_Name) (1 .. Except.Id.Name_Length - 1));\n \n       if Exception_Message_Length (Except) /= 0 then\n          To_Stderr (\" : \");"}, {"sha": "98fcfaa5f9809d748e1aafb1faffacb68a0af5fe", "filename": "gcc/ada/a-sytaco.adb", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-sytaco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-sytaco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-sytaco.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -31,11 +31,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Warnings (Off);\n---  Allow withing of non-Preelaborated units in Ada 2005 mode where this\n---  package will be categorized as Preelaborate. See AI-362 for details.\n---  It is safe in the context of the run-time to violate the rules!\n-\n with System.Tasking;\n --  Used for Detect_Blocking\n --           Self\n@@ -51,8 +46,6 @@ with System.Task_Primitives.Operations;\n --           Set_True\n --           Suspend_Until_True\n \n-pragma Warnings (On);\n-\n package body Ada.Synchronous_Task_Control is\n \n    ----------------"}, {"sha": "5e6315cdba59b01bf01752359d286a1c53d62ff5", "filename": "gcc/ada/a-sytaco.ads", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-sytaco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-sytaco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-sytaco.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -35,22 +35,15 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Warnings (Off);\n---  Allow withing of non-Preelaborated units in Ada 2005 mode where this\n---  package will be implicitly categorized as Preelaborate. See AI-362 for\n---  details. It is safe in the context of the run-time to violate the rules!\n-\n with System.Task_Primitives;\n --  Used for Suspension_Object\n \n with Ada.Finalization;\n --  Used for Limited_Controlled\n \n-pragma Warnings (On);\n-\n package Ada.Synchronous_Task_Control is\n-pragma Preelaborate_05 (Synchronous_Task_Control);\n---  In accordance with Ada 2005 AI-362\n+   pragma Preelaborate_05;\n+   --  In accordance with Ada 2005 AI-362\n \n    type Suspension_Object is limited private;\n \n@@ -71,12 +64,13 @@ private\n    --  Finalization for Suspension_Object\n \n    type Suspension_Object is\n-     new Ada.Finalization.Limited_Controlled with record\n+     new Ada.Finalization.Limited_Controlled with\n+   record\n       SO : System.Task_Primitives.Suspension_Object;\n       --  Use low-level suspension objects so that the synchronization\n       --  functionality provided by this object can be achieved using\n       --  efficient operating system primitives.\n-     end record;\n+   end record;\n \n    pragma Inline (Set_True);\n    pragma Inline (Set_False);"}, {"sha": "a63719d5cbe451c4fc117ce97d9bff57691aa155", "filename": "gcc/ada/a-taside.adb", "status": "modified", "additions": 52, "deletions": 19, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-taside.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-taside.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-taside.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -31,32 +31,28 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+with System.Address_Image;\n+with System.Parameters;\n+with System.Soft_Links;\n+with System.Task_Primitives.Operations;\n+with System.Tasking;\n+\n+with Unchecked_Conversion;\n+\n pragma Warnings (Off);\n --  Allow withing of non-Preelaborated units in Ada 2005 mode where this\n --  package will be categorized as Preelaborate. See AI-362 for details.\n --  It is safe in the context of the run-time to violate the rules!\n \n-with System.Address_Image;\n---  used for the function itself\n-\n-with System.Tasking;\n---  used for Task_List\n-\n with System.Tasking.Stages;\n---  used for Terminated\n---           Abort_Tasks\n \n-with System.Tasking.Rendezvous;\n---  used for Callable\n+pragma Warnings (On);\n \n-with System.Task_Primitives.Operations;\n---  used for Self\n-\n-with Unchecked_Conversion;\n+package body Ada.Task_Identification is\n \n-pragma Warnings (Off);\n+   use System.Parameters;\n \n-package body Ada.Task_Identification is\n+   package STPO renames System.Task_Primitives.Operations;\n \n    -----------------------\n    -- Local Subprograms --\n@@ -71,7 +67,7 @@ package body Ada.Task_Identification is\n    -- \"=\" --\n    ---------\n \n-   function  \"=\" (Left, Right : Task_Id) return Boolean is\n+   function \"=\" (Left, Right : Task_Id) return Boolean is\n    begin\n       return System.Tasking.\"=\" (Convert_Ids (Left), Convert_Ids (Right));\n    end \"=\";\n@@ -139,11 +135,28 @@ package body Ada.Task_Identification is\n    -----------------\n \n    function Is_Callable (T : Task_Id) return Boolean is\n+      Result : Boolean;\n+      Id     : constant System.Tasking.Task_Id := Convert_Ids (T);\n    begin\n       if T = Null_Task_Id then\n          raise Program_Error;\n       else\n-         return System.Tasking.Rendezvous.Callable (Convert_Ids (T));\n+         System.Soft_Links.Abort_Defer.all;\n+\n+         if Single_Lock then\n+            STPO.Lock_RTS;\n+         end if;\n+\n+         STPO.Write_Lock (Id);\n+         Result := Id.Callable;\n+         STPO.Unlock (Id);\n+\n+         if Single_Lock then\n+            STPO.Unlock_RTS;\n+         end if;\n+\n+         System.Soft_Links.Abort_Undefer.all;\n+         return Result;\n       end if;\n    end Is_Callable;\n \n@@ -152,11 +165,31 @@ package body Ada.Task_Identification is\n    -------------------\n \n    function Is_Terminated (T : Task_Id) return Boolean is\n+      Result : Boolean;\n+      Id     : constant System.Tasking.Task_Id := Convert_Ids (T);\n+\n+      use System.Tasking;\n+\n    begin\n       if T = Null_Task_Id then\n          raise Program_Error;\n       else\n-         return System.Tasking.Stages.Terminated (Convert_Ids (T));\n+         System.Soft_Links.Abort_Defer.all;\n+\n+         if Single_Lock then\n+            STPO.Lock_RTS;\n+         end if;\n+\n+         STPO.Write_Lock (Id);\n+         Result := Id.Common.State = Terminated;\n+         STPO.Unlock (Id);\n+\n+         if Single_Lock then\n+            STPO.Unlock_RTS;\n+         end if;\n+\n+         System.Soft_Links.Abort_Undefer.all;\n+         return Result;\n       end if;\n    end Is_Terminated;\n "}, {"sha": "fcceff5de579a2abc6acc9805404cff671e02d7e", "filename": "gcc/ada/a-taside.ads", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-taside.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fa-taside.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-taside.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -35,25 +35,18 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-pragma Warnings (Off);\n---  Allow withing of non-Preelaborated units in Ada 2005 mode where this\n---  package will be categorized as Preelaborate. See AI-362 for details.\n---  It is safe in the context of the run-time to violate the rules!\n-\n with System;\n with System.Tasking;\n \n-pragma Warnings (On);\n-\n package Ada.Task_Identification is\n-pragma Preelaborate_05 (Task_Identification);\n---  In accordance with Ada 2005 AI-362\n+   pragma Preelaborate_05;\n+   --  In accordance with Ada 2005 AI-362\n \n    type Task_Id is private;\n \n    Null_Task_Id : constant Task_Id;\n \n-   function  \"=\" (Left, Right : Task_Id) return Boolean;\n+   function \"=\" (Left, Right : Task_Id) return Boolean;\n    pragma Inline (\"=\");\n \n    function Image (T : Task_Id) return String;\n@@ -63,7 +56,7 @@ pragma Preelaborate_05 (Task_Identification);\n \n    procedure Abort_Task (T : Task_Id);\n    pragma Inline (Abort_Task);\n-   --  Note: parameter is mode IN, not IN OUT, per AI-00101.\n+   --  Note: parameter is mode IN, not IN OUT, per AI-00101\n \n    function Is_Terminated (T : Task_Id) return Boolean;\n    pragma Inline (Is_Terminated);\n@@ -75,13 +68,6 @@ private\n \n    type Task_Id is new System.Tasking.Task_Id;\n \n-   pragma Warnings (Off);\n-   --  Allow non-static constant in Ada 2005 mode where this package will be\n-   --  categorized as Preelaborate. See AI-362 for details. It is safe in the\n-   --  context of the run-time to violate the rules!\n-\n-   Null_Task_Id : constant Task_Id := Task_Id (System.Tasking.Null_Task);\n-\n-   pragma Warnings (On);\n+   Null_Task_Id : constant Task_Id := null;\n \n end Ada.Task_Identification;"}, {"sha": "825c05c5786a79fed3ce7e4ee23819f24c0a88e0", "filename": "gcc/ada/g-os_lib.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fg-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fg-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-os_lib.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -65,11 +65,14 @@ package body GNAT.OS_Lib is\n \n    --  The following are used by Create_Temp_File\n \n-   Current_Temp_File_Name : String := \"GNAT-TEMP-000000.TMP\";\n+   First_Temp_File_Name : constant String := \"GNAT-TEMP-000000.TMP\";\n+   --  Used to initialize Current_Temp_File_Name and Temp_File_Name_Last_Digit\n+\n+   Current_Temp_File_Name : String := First_Temp_File_Name;\n    --  Name of the temp file last created\n \n    Temp_File_Name_Last_Digit : constant Positive :=\n-                                 Current_Temp_File_Name'Last - 4;\n+                                 First_Temp_File_Name'Last - 4;\n    --  Position of the last digit in Current_Temp_File_Name\n \n    Max_Attempts : constant := 100;"}, {"sha": "f4f2e696da94b0cab1870c50453aceb82afdb657", "filename": "gcc/ada/g-string.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fg-string.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fg-string.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-string.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1995-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1995-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,6 +36,7 @@\n with Unchecked_Deallocation;\n \n package GNAT.Strings is\n+   pragma Preelaborate;\n \n    type String_Access is access all String;\n    --  General purpose string access type. Note that the caller is"}, {"sha": "3bf7a5b69b5b33c6fad405fefb543bae8bd338f1", "filename": "gcc/ada/s-auxdec-vms_64.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-auxdec-vms_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-auxdec-vms_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec-vms_64.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1996-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,7 +42,7 @@\n with Unchecked_Conversion;\n \n package System.Aux_DEC is\n-pragma Elaborate_Body (Aux_DEC);\n+   pragma Preelaborate;\n \n    subtype Short_Address is Address\n      range -2 ** (32 - 1) .. +2 ** (32 - 1) - 1;"}, {"sha": "0a0bd35fa474ba25c45be854cf436aaaec9e1c64", "filename": "gcc/ada/s-auxdec.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-auxdec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-auxdec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1996-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,7 +40,7 @@\n with Unchecked_Conversion;\n \n package System.Aux_DEC is\n-pragma Elaborate_Body (Aux_DEC);\n+   pragma Preelaborate;\n \n    subtype Short_Address is Address;\n    --  In some versions of System.Aux_DEC, notably that for VMS on the"}, {"sha": "7b7cfc14c21c408ad40443d4dde38b9dd1b7b55f", "filename": "gcc/ada/s-exctab.adb", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-exctab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-exctab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exctab.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1996-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -43,9 +43,9 @@ package body System.Exception_Table is\n    procedure Set_HT_Link (T : Exception_Data_Ptr; Next : Exception_Data_Ptr);\n    function  Get_HT_Link (T : Exception_Data_Ptr) return Exception_Data_Ptr;\n \n-   function Hash (F : Big_String_Ptr) return HTable_Headers;\n-   function Equal (A, B : Big_String_Ptr) return Boolean;\n-   function Get_Key (T : Exception_Data_Ptr) return Big_String_Ptr;\n+   function Hash (F : System.Address) return HTable_Headers;\n+   function Equal (A, B : System.Address) return Boolean;\n+   function Get_Key (T : Exception_Data_Ptr) return System.Address;\n \n    package Exception_HTable is new System.HTable.Static_HTable (\n      Header_Num => HTable_Headers,\n@@ -54,7 +54,7 @@ package body System.Exception_Table is\n      Null_Ptr   => null,\n      Set_Next   => Set_HT_Link,\n      Next       => Get_HT_Link,\n-     Key        => Big_String_Ptr,\n+     Key        => System.Address,\n      Get_Key    => Get_Key,\n      Hash       => Hash,\n      Equal      => Equal);\n@@ -63,15 +63,17 @@ package body System.Exception_Table is\n    -- Equal --\n    -----------\n \n-   function Equal (A, B : Big_String_Ptr) return Boolean is\n-      J    : Integer := 1;\n+   function Equal (A, B : System.Address) return Boolean is\n+      S1 : constant Big_String_Ptr := To_Ptr (A);\n+      S2 : constant Big_String_Ptr := To_Ptr (B);\n+      J : Integer := 1;\n \n    begin\n       loop\n-         if A (J) /= B (J) then\n+         if S1 (J) /= S2 (J) then\n             return False;\n \n-         elsif A (J) = ASCII.NUL then\n+         elsif S1 (J) = ASCII.NUL then\n             return True;\n \n          else\n@@ -93,7 +95,7 @@ package body System.Exception_Table is\n    -- Get_Key --\n    -------------\n \n-   function Get_Key (T : Exception_Data_Ptr) return Big_String_Ptr is\n+   function Get_Key (T : Exception_Data_Ptr) return System.Address is\n    begin\n       return T.Full_Name;\n    end Get_Key;\n@@ -125,20 +127,21 @@ package body System.Exception_Table is\n    -- Hash --\n    ----------\n \n-   function Hash (F : Big_String_Ptr) return HTable_Headers is\n+   function Hash (F : System.Address) return HTable_Headers is\n       type S is mod 2**8;\n \n+      Str  : constant Big_String_Ptr := To_Ptr (F);\n       Size : constant S := S (HTable_Headers'Last - HTable_Headers'First + 1);\n       Tmp  : S := 0;\n       J    : Positive;\n \n    begin\n       J := 1;\n       loop\n-         if F (J) = ASCII.NUL then\n+         if Str (J) = ASCII.NUL then\n             return HTable_Headers'First + HTable_Headers'Base (Tmp mod Size);\n          else\n-            Tmp := Tmp xor S (Character'Pos (F (J)));\n+            Tmp := Tmp xor S (Character'Pos (Str (J)));\n          end if;\n          J := J + 1;\n       end loop;\n@@ -161,7 +164,7 @@ package body System.Exception_Table is\n    begin\n       Copy (X'Range) := X;\n       Copy (Copy'Last) := ASCII.NUL;\n-      Res := Exception_HTable.Get (To_Ptr (Copy'Address));\n+      Res := Exception_HTable.Get (Copy'Address);\n \n       --  If unknown exception, create it on the heap. This is a legitimate\n       --  situation in the distributed case when an exception is defined only\n@@ -175,7 +178,7 @@ package body System.Exception_Table is\n              (Not_Handled_By_Others => False,\n               Lang                  => 'A',\n               Name_Length           => Copy'Length,\n-              Full_Name             => To_Ptr (Dyn_Copy.all'Address),\n+              Full_Name             => Dyn_Copy.all'Address,\n               HTable_Ptr            => null,\n               Import_Code           => 0,\n               Raise_Hook            => null);"}, {"sha": "2dab2de08ab9a0b281f199735f48537e4ca04622", "filename": "gcc/ada/s-inmaop-posix.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-inmaop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-inmaop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-inmaop-posix.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -286,13 +286,14 @@ package body System.Interrupt_Management.Operations is\n    end Setup_Interrupt_Mask;\n \n begin\n-\n    declare\n       mask    : aliased sigset_t;\n       allmask : aliased sigset_t;\n       Result  : Interfaces.C.int;\n \n    begin\n+      Interrupt_Management.Initialize;\n+\n       for Sig in 1 .. Signal'Last loop\n          Result := sigaction\n            (Sig, null, Initial_Action (Sig)'Unchecked_Access);"}, {"sha": "ba421ec6a0a1a839c948860239f67191e1484893", "filename": "gcc/ada/s-inmaop-vms.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-inmaop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-inmaop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-inmaop-vms.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -295,6 +295,7 @@ package body System.Interrupt_Management.Operations is\n    end Setup_Interrupt_Mask;\n \n begin\n+   Interrupt_Management.Initialize;\n    Environment_Mask := (others => False);\n    All_Tasks_Mask := (others => True);\n "}, {"sha": "9a115106672327b8ed3fbf6783a348c0d40909d1", "filename": "gcc/ada/s-intman-dummy.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-dummy.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-dummy.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-dummy.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -35,4 +35,13 @@\n \n package body System.Interrupt_Management is\n \n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize is\n+   begin\n+      null;\n+   end Initialize;\n+\n end System.Interrupt_Management;"}, {"sha": "71b20fc6dbd57d931a27fc3790e46494abbc0782", "filename": "gcc/ada/s-intman-irix-athread.adb", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-irix-athread.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-irix-athread.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-irix-athread.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -34,9 +34,6 @@\n \n --  This is an Irix (old pthread library) version of this package.\n \n---  PLEASE DO NOT add any dependences on other packages.\n---  This package is designed to work with or without tasking support.\n-\n --  Make a careful study of all signals available under the OS,\n --  to see which need to be reserved, kept always unmasked,\n --  or kept always unmasked.\n@@ -49,6 +46,7 @@ with System.OS_Interface;\n \n with Interfaces.C;\n --  used for \"int\"\n+\n package body System.Interrupt_Management is\n \n    use System.OS_Interface;\n@@ -82,25 +80,27 @@ package body System.Interrupt_Management is\n    pragma Import\n      (C, Unreserve_All_Interrupts, \"__gl_unreserve_all_interrupts\");\n \n-begin\n-   declare\n-      function State (Int : Interrupt_ID) return Character;\n-      pragma Import (C, State, \"__gnat_get_interrupt_state\");\n-      --  Get interrupt state.  Defined in a-init.c\n-      --  The input argument is the interrupt number,\n-      --  and the result is one of the following:\n-\n-      User    : constant Character := 'u';\n-      Runtime : constant Character := 'r';\n-      Default : constant Character := 's';\n-      --    'n'   this interrupt not set by any Interrupt_State pragma\n-      --    'u'   Interrupt_State pragma set state to User\n-      --    'r'   Interrupt_State pragma set state to Runtime\n-      --    's'   Interrupt_State pragma set state to System (use \"default\"\n-      --           system handler)\n-\n+   function State (Int : Interrupt_ID) return Character;\n+   pragma Import (C, State, \"__gnat_get_interrupt_state\");\n+   --  Get interrupt state.  Defined in a-init.c\n+   --  The input argument is the interrupt number,\n+   --  and the result is one of the following:\n+\n+   User    : constant Character := 'u';\n+   Runtime : constant Character := 'r';\n+   Default : constant Character := 's';\n+   --    'n'   this interrupt not set by any Interrupt_State pragma\n+   --    'u'   Interrupt_State pragma set state to User\n+   --    'r'   Interrupt_State pragma set state to Runtime\n+   --    's'   Interrupt_State pragma set state to System (use \"default\"\n+   --           system handler)\n+\n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize is\n       use Interfaces.C;\n-\n    begin\n       Abort_Task_Interrupt := Abort_Signal;\n \n@@ -158,5 +158,6 @@ begin\n       --  mark it as reserved.\n \n       Reserve (0) := True;\n-   end;\n+   end Initialize;\n+\n end System.Interrupt_Management;"}, {"sha": "d47912d00b7314e92dc7b6b52e465151e9363f39", "filename": "gcc/ada/s-intman-irix.adb", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-irix.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -34,9 +34,6 @@\n \n --  This is a SGI Pthread version of this package.\n \n---  PLEASE DO NOT add any dependences on other packages.\n---  This package is designed to work with or without tasking support.\n-\n --  Make a careful study of all signals available under the OS,\n --  to see which need to be reserved, kept always unmasked,\n --  or kept always unmasked.\n@@ -63,27 +60,36 @@ package body System.Interrupt_Management is\n    pragma Import\n      (C, Unreserve_All_Interrupts, \"__gl_unreserve_all_interrupts\");\n \n-   use type Interfaces.C.int;\n+   function State (Int : Interrupt_ID) return Character;\n+   pragma Import (C, State, \"__gnat_get_interrupt_state\");\n+\n+   --  Get interrupt state.  Defined in a-init.c\n+   --  The input argument is the interrupt number,\n+   --  and the result is one of the following:\n \n-begin\n-   declare\n-      function State (Int : Interrupt_ID) return Character;\n-      pragma Import (C, State, \"__gnat_get_interrupt_state\");\n+   User    : constant Character := 'u';\n+   Runtime : constant Character := 'r';\n+   Default : constant Character := 's';\n+   --    'n'   this interrupt not set by any Interrupt_State pragma\n+   --    'u'   Interrupt_State pragma set state to User\n+   --    'r'   Interrupt_State pragma set state to Runtime\n+   --    's'   Interrupt_State pragma set state to System (use \"default\"\n+   --           system handler)\n \n-      --  Get interrupt state.  Defined in a-init.c\n-      --  The input argument is the interrupt number,\n-      --  and the result is one of the following:\n+   ----------------\n+   -- Initialize --\n+   ----------------\n \n-      User    : constant Character := 'u';\n-      Runtime : constant Character := 'r';\n-      Default : constant Character := 's';\n-      --    'n'   this interrupt not set by any Interrupt_State pragma\n-      --    'u'   Interrupt_State pragma set state to User\n-      --    'r'   Interrupt_State pragma set state to Runtime\n-      --    's'   Interrupt_State pragma set state to System (use \"default\"\n-      --           system handler)\n+   Initialized : Boolean := False;\n \n+   procedure Initialize is\n+      use type Interfaces.C.int;\n    begin\n+      if Initialized then\n+         return;\n+      end if;\n+\n+      Initialized := True;\n       Abort_Task_Interrupt := SIGABRT;\n \n       --  Change this if you want to use another signal for task abort.\n@@ -137,5 +143,6 @@ begin\n       --  mark it as reserved.\n \n       Reserve (0) := True;\n-   end;\n+   end Initialize;\n+\n end System.Interrupt_Management;"}, {"sha": "f531750ab5a2755a11ec1ce09062f37285133249", "filename": "gcc/ada/s-intman-mingw.adb", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-mingw.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -33,34 +33,29 @@\n \n --  This is the NT version of this package\n \n---  This file performs the system-dependent translation between machine\n---  exceptions and the Ada exceptions, if any, that should be raised when they\n---  occur.\n+with System.OS_Interface; use System.OS_Interface;\n \n---  PLEASE DO NOT add any dependences on other packages.\n---  This package is designed to work with or without tasking support.\n+package body System.Interrupt_Management is\n \n---  See the other warnings in the package specification before making any\n---  modifications to this file.\n+   ----------------\n+   -- Initialize --\n+   ----------------\n \n---  Make a careful study of all signals available under the OS, to see which\n---  need to be reserved, kept always unmasked, or kept always unmasked. Be on\n---  the lookout for special signals that may be used by the thread library.\n+   procedure Initialize is\n+   begin\n+      --  \"Reserve\" all the interrupts, except those that are explicitely\n+      --  defined.\n \n-with System.OS_Interface; use System.OS_Interface;\n-\n-package body System.Interrupt_Management is\n-begin\n-   --  \"Reserve\" all the interrupts, except those that are explicitely defined\n+      for J in Interrupt_ID'Range loop\n+         Reserve (J) := True;\n+      end loop;\n \n-   for J in Interrupt_ID'Range loop\n-      Reserve (J) := True;\n-   end loop;\n+      Reserve (SIGINT)  := False;\n+      Reserve (SIGILL)  := False;\n+      Reserve (SIGABRT) := False;\n+      Reserve (SIGFPE)  := False;\n+      Reserve (SIGSEGV) := False;\n+      Reserve (SIGTERM) := False;\n+   end Initialize;\n \n-   Reserve (SIGINT)  := False;\n-   Reserve (SIGILL)  := False;\n-   Reserve (SIGABRT) := False;\n-   Reserve (SIGFPE)  := False;\n-   Reserve (SIGSEGV) := False;\n-   Reserve (SIGTERM) := False;\n end System.Interrupt_Management;"}, {"sha": "26ddbe5f7173bc8a68f95c9c3e97300a2e98e123", "filename": "gcc/ada/s-intman-posix.adb", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-posix.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -33,12 +33,6 @@\n \n --  This is the POSIX threads version of this package\n \n---  PLEASE DO NOT add any dependences on other packages. ??? why not ???\n---  This package is designed to work with or without tasking support.\n-\n---  See the other warnings in the package specification before making\n---  any modifications to this file.\n-\n --  Make a careful study of all signals available under the OS, to see which\n --  need to be reserved, kept always unmasked, or kept always unmasked. Be on\n --  the lookout for special signals that may be used by the thread library.\n@@ -88,6 +82,21 @@ package body System.Interrupt_Management is\n    -- Local Subprograms --\n    -----------------------\n \n+   function State (Int : Interrupt_ID) return Character;\n+   pragma Import (C, State, \"__gnat_get_interrupt_state\");\n+   --  Get interrupt state. Defined in init.c\n+   --  The input argument is the interrupt number,\n+   --  and the result is one of the following:\n+\n+   User    : constant Character := 'u';\n+   Runtime : constant Character := 'r';\n+   Default : constant Character := 's';\n+   --    'n'   this interrupt not set by any Interrupt_State pragma\n+   --    'u'   Interrupt_State pragma set state to User\n+   --    'r'   Interrupt_State pragma set state to Runtime\n+   --    's'   Interrupt_State pragma set state to System (use \"default\"\n+   --           system handler)\n+\n    procedure Notify_Exception\n      (signo    : Signal;\n       siginfo  : System.Address;\n@@ -154,32 +163,24 @@ package body System.Interrupt_Management is\n       end case;\n    end Notify_Exception;\n \n--------------------------\n--- Package Elaboration --\n--------------------------\n+   ----------------\n+   -- Initialize --\n+   ----------------\n \n-begin\n-   declare\n+   Initialized : Boolean := False;\n+\n+   procedure Initialize is\n       act     : aliased struct_sigaction;\n       old_act : aliased struct_sigaction;\n       Result  : System.OS_Interface.int;\n \n-      function State (Int : Interrupt_ID) return Character;\n-      pragma Import (C, State, \"__gnat_get_interrupt_state\");\n-      --  Get interrupt state. Defined in a-init.c\n-      --  The input argument is the interrupt number,\n-      --  and the result is one of the following:\n-\n-      User    : constant Character := 'u';\n-      Runtime : constant Character := 'r';\n-      Default : constant Character := 's';\n-      --    'n'   this interrupt not set by any Interrupt_State pragma\n-      --    'u'   Interrupt_State pragma set state to User\n-      --    'r'   Interrupt_State pragma set state to Runtime\n-      --    's'   Interrupt_State pragma set state to System (use \"default\"\n-      --           system handler)\n-\n    begin\n+      if Initialized then\n+         return;\n+      end if;\n+\n+      Initialized := True;\n+\n       --  Need to call pthread_init very early because it is doing signal\n       --  initializations.\n \n@@ -295,5 +296,6 @@ begin\n       --  mark it as reserved.\n \n       Reserve (0) := True;\n-   end;\n+   end Initialize;\n+\n end System.Interrupt_Management;"}, {"sha": "05f1e042429f98c8de2c1f4467cab2154efb1b62", "filename": "gcc/ada/s-intman-solaris.adb", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-solaris.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -33,9 +33,6 @@\n \n --  This is a Solaris version of this package.\n \n---  PLEASE DO NOT add any dependences on other packages.\n---  This package is designed to work with or without tasking support.\n-\n --  Make a careful study of all signals available under the OS,\n --  to see which need to be reserved, kept always unmasked,\n --  or kept always unmasked.\n@@ -63,6 +60,21 @@ package body System.Interrupt_Management is\n    pragma Import\n      (C, Unreserve_All_Interrupts, \"__gl_unreserve_all_interrupts\");\n \n+   function State (Int : Interrupt_ID) return Character;\n+   pragma Import (C, State, \"__gnat_get_interrupt_state\");\n+   --  Get interrupt state.  Defined in init.c\n+   --  The input argument is the interrupt number,\n+   --  and the result is one of the following:\n+\n+   User    : constant Character := 'u';\n+   Runtime : constant Character := 'r';\n+   Default : constant Character := 's';\n+   --    'n'   this interrupt not set by any Interrupt_State pragma\n+   --    'u'   Interrupt_State pragma set state to User\n+   --    'r'   Interrupt_State pragma set state to Runtime\n+   --    's'   Interrupt_State pragma set state to System (use \"default\"\n+   --           system handler)\n+\n    ----------------------\n    -- Notify_Exception --\n    ----------------------\n@@ -86,8 +98,7 @@ package body System.Interrupt_Management is\n       info    : access siginfo_t;\n       context : access ucontext_t)\n    is\n-      pragma Warnings (Off, context);\n-\n+      pragma Unreferenced (context);\n    begin\n       --  Check that treatment of exception propagation here\n       --  is consistent with treatment of the abort signal in\n@@ -121,33 +132,25 @@ package body System.Interrupt_Management is\n       end case;\n    end Notify_Exception;\n \n-----------------------------\n--- Package Initialization --\n-----------------------------\n+   ----------------\n+   -- Initialize --\n+   ----------------\n \n-begin\n-   declare\n+   Initialized : Boolean := False;\n+\n+   procedure Initialize is\n       act     : aliased struct_sigaction;\n       old_act : aliased struct_sigaction;\n       mask    : aliased sigset_t;\n       Result  : Interfaces.C.int;\n \n-      function State (Int : Interrupt_ID) return Character;\n-      pragma Import (C, State, \"__gnat_get_interrupt_state\");\n-      --  Get interrupt state.  Defined in a-init.c\n-      --  The input argument is the interrupt number,\n-      --  and the result is one of the following:\n-      --\n-      User    : constant Character := 'u';\n-      Runtime : constant Character := 'r';\n-      Default : constant Character := 's';\n-      --    'n'   this interrupt not set by any Interrupt_State pragma\n-      --    'u'   Interrupt_State pragma set state to User\n-      --    'r'   Interrupt_State pragma set state to Runtime\n-      --    's'   Interrupt_State pragma set state to System (use \"default\"\n-      --           system handler)\n-\n    begin\n+      if Initialized then\n+         return;\n+      end if;\n+\n+      Initialized := True;\n+\n       --  Need to call pthread_init very early because it is doing signal\n       --  initializations.\n \n@@ -248,5 +251,6 @@ begin\n       --  mark it as reserved.\n \n       Reserve (0) := True;\n-   end;\n+   end Initialize;\n+\n end System.Interrupt_Management;"}, {"sha": "7ad7f278d9bc870b29c9cf20ce4408ad1acb58a9", "filename": "gcc/ada/s-intman-vms.adb", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-vms.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -38,20 +38,29 @@ with System.OS_Interface;\n \n package body System.Interrupt_Management is\n \n-   use System.OS_Interface;\n-   use type unsigned_long;\n+   ----------------\n+   -- Initialize --\n+   ----------------\n \n-begin\n-   Abort_Task_Interrupt := Interrupt_ID_0;\n-   --  Unused\n+   Initialized : Boolean := False;\n \n-   Reserve := Reserve or Keep_Unmasked or Keep_Masked;\n-\n-   Reserve (Interrupt_ID_0) := True;\n-\n-   declare\n+   procedure Initialize is\n+      use System.OS_Interface;\n+      use type unsigned_long;\n       Status : Cond_Value_Type;\n+\n    begin\n+      if Initialized then\n+         return;\n+      end if;\n+\n+      Initialized := True;\n+      Abort_Task_Interrupt := Interrupt_ID_0;\n+      --  Unused\n+\n+      Reserve := Reserve or Keep_Unmasked or Keep_Masked;\n+      Reserve (Interrupt_ID_0) := True;\n+\n       Sys_Crembx\n         (Status => Status,\n          Prmflg => False,\n@@ -60,15 +69,14 @@ begin\n          Bufquo => Interrupt_Bufquo,\n          Lognam => \"GNAT_Interrupt_Mailbox\",\n          Flags  => CMB_M_READONLY);\n-\n       pragma Assert ((Status and 1) = 1);\n \n       Sys_Assign\n         (Status => Status,\n          Devnam => \"GNAT_Interrupt_Mailbox\",\n          Chan   => Snd_Interrupt_Chan,\n          Flags  => AGN_M_WRITEONLY);\n-\n       pragma Assert ((Status and 1) = 1);\n-   end;\n+   end Initialize;\n+\n end System.Interrupt_Management;"}, {"sha": "028facc79fdd212caf8405e8fa7623f7805400f8", "filename": "gcc/ada/s-intman-vms.ads", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-vms.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -39,16 +39,6 @@\n \n --  PLEASE DO NOT add any with-clauses to this package\n \n---  This is designed to work for both tasking and non-tasking systems, without\n---  pulling in any of the tasking support.\n-\n---  PLEASE DO NOT remove the Elaborate_Body pragma from this package.\n---  Elaboration of this package should happen early, as most other\n-\n---  Forcing immediate elaboration of the body also helps to enforce the design\n---  assumption that this is a second-level package, just one level above\n---  System.OS_Interface, with no cross-dependences.\n-\n --  PLEASE DO NOT put any subprogram declarations with arguments of type\n --  Interrupt_ID into the visible part of this package.\n \n@@ -62,8 +52,7 @@ with System.OS_Interface;\n --           sigset_t\n \n package System.Interrupt_Management is\n-\n-   pragma Elaborate_Body;\n+   pragma Preelaborate;\n \n    type Interrupt_Mask is limited private;\n \n@@ -110,6 +99,11 @@ package System.Interrupt_Management is\n    --  example, if interrupts are OS signals and signal masking is per-task,\n    --  use of the sigwait operation requires the signal be masked in all tasks.\n \n+   procedure Initialize;\n+   --  Initialize the various variables defined in this package.\n+   --  This procedure must be called before accessing any object from this\n+   --  package and can be called multiple times.\n+\n private\n    use type System.OS_Interface.unsigned_long;\n "}, {"sha": "d31ad56d0ff8058c8cb8312969613531590e8049", "filename": "gcc/ada/s-intman-vxworks.adb", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-vxworks.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -33,15 +33,6 @@\n \n --  This is the VxWorks version of this package.\n \n---  It is likely to need tailoring to fit each operating system\n---  and machine architecture.\n-\n---  PLEASE DO NOT add any dependences on other packages.\n---  This package is designed to work with or without tasking support.\n-\n---  See the other warnings in the package specification before making\n---  any modifications to this file.\n-\n --  Make a careful study of all signals available under the OS,\n --  to see which need to be reserved, kept always unmasked,\n --  or kept always unmasked.\n@@ -74,6 +65,20 @@ package body System.Interrupt_Management is\n    -- Local Subprograms --\n    -----------------------\n \n+   function State (Int : Interrupt_ID) return Character;\n+   pragma Import (C, State, \"__gnat_get_interrupt_state\");\n+   --  Get interrupt state.  Defined in init.c\n+   --  The input argument is the interrupt number,\n+   --  and the result is one of the following:\n+\n+   Runtime : constant Character := 'r';\n+   Default : constant Character := 's';\n+   --    'n'   this interrupt not set by any Interrupt_State pragma\n+   --    'u'   Interrupt_State pragma set state to User\n+   --    'r'   Interrupt_State pragma set state to Runtime\n+   --    's'   Interrupt_State pragma set state to System (use \"default\"\n+   --           system handler)\n+\n    procedure Notify_Exception (signo : Signal);\n    --  Identify the Ada exception to be raised using\n    --  the information when the system received a synchronous signal.\n@@ -116,27 +121,21 @@ package body System.Interrupt_Management is\n       end loop;\n    end Initialize_Interrupts;\n \n-begin\n-   declare\n-      mask   : aliased sigset_t;\n-      Result : int;\n-\n-      function State (Int : Interrupt_ID) return Character;\n-      pragma Import (C, State, \"__gnat_get_interrupt_state\");\n-      --  Get interrupt state.  Defined in a-init.c\n-      --  The input argument is the interrupt number,\n-      --  and the result is one of the following:\n+   ----------------\n+   -- Initialize --\n+   ----------------\n \n-      Runtime : constant Character := 'r';\n-      Default : constant Character := 's';\n-      --    'n'   this interrupt not set by any Interrupt_State pragma\n-      --    'u'   Interrupt_State pragma set state to User\n-      --    'r'   Interrupt_State pragma set state to Runtime\n-      --    's'   Interrupt_State pragma set state to System (use \"default\"\n-      --           system handler)\n+   Initialized : Boolean := False;\n \n+   procedure Initialize is\n+      mask   : aliased sigset_t;\n+      Result : int;\n    begin\n-      --  Initialize signal handling\n+      if Initialized then\n+         return;\n+      end if;\n+\n+      Initialized := True;\n \n       --  Change this if you want to use another signal for task abort.\n       --  SIGTERM might be a good one.\n@@ -176,5 +175,6 @@ begin\n       --  The abort signal must also be unmasked\n \n       Keep_Unmasked (Abort_Task_Signal) := True;\n-   end;\n+   end Initialize;\n+\n end System.Interrupt_Management;"}, {"sha": "14ceb91a28e483abf94bcfbd015b2d5a15f64811", "filename": "gcc/ada/s-intman-vxworks.ads", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman-vxworks.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -40,13 +40,6 @@\n --  Unlike the original design, System.Interrupt_Management can only\n --  be used for tasking systems.\n \n---  PLEASE DO NOT remove the Elaborate_Body pragma from this package.\n---  Elaboration of this package should happen early, as most other\n---  initializations depend on it. Forcing immediate elaboration of\n---  the body also helps to enforce the design assumption that this\n---  is a second-level package, just one level above System.OS_Interface\n---  with no cross-dependencies.\n-\n --  PLEASE DO NOT put any subprogram declarations with arguments of\n --  type Interrupt_ID into the visible part of this package. The type\n --  Interrupt_ID is used to derive the type in Ada.Interrupts, and\n@@ -61,8 +54,7 @@ with Interfaces.C;\n --  used for int\n \n package System.Interrupt_Management is\n-\n-   pragma Elaborate_Body;\n+   pragma Preelaborate;\n \n    type Interrupt_Mask is limited private;\n \n@@ -114,6 +106,11 @@ package System.Interrupt_Management is\n    --  This procedure is used to initialize signal-to-exception mapping in\n    --  each task.\n \n+   procedure Initialize;\n+   --  Initialize the various variables defined in this package.\n+   --  This procedure must be called before accessing any object from this\n+   --  package and can be called multiple times.\n+\n private\n    type Interrupt_Mask is new System.OS_Interface.sigset_t;\n    --  In some implementation Interrupt_Mask can be represented as a linked"}, {"sha": "a7909c91c4992deb4ebd9d1f82c5d15e09fc1db0", "filename": "gcc/ada/s-intman.ads", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-intman.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-intman.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -38,13 +38,6 @@\n --  Unlike the original design, System.Interrupt_Management can only be used\n --  for tasking systems.\n \n---  PLEASE DO NOT remove the Elaborate_Body pragma from this package.\n---  Elaboration of this package should happen early, as most other\n---  initializations depend on it. Forcing immediate elaboration of the body\n---  also helps to enforce the design assumption that this is a second-level\n---  package, just one level above System.OS_Interface with no\n---  cross-dependencies.\n-\n --  PLEASE DO NOT put any subprogram declarations with arguments of type\n --  Interrupt_ID into the visible part of this package. The type Interrupt_ID\n --  is used to derive the type in Ada.Interrupts, and adding more operations\n@@ -59,8 +52,7 @@ with Interfaces.C;\n --  used for int\n \n package System.Interrupt_Management is\n-\n-   pragma Elaborate_Body;\n+   pragma Preelaborate;\n \n    type Interrupt_Mask is limited private;\n \n@@ -103,6 +95,11 @@ package System.Interrupt_Management is\n    --  example, it may be mapped to an exception used to implement task abort,\n    --  or used to implement time delays.\n \n+   procedure Initialize;\n+   --  Initialize the various variables defined in this package.\n+   --  This procedure must be called before accessing any object from this\n+   --  package, and can be called multiple times.\n+\n private\n    type Interrupt_Mask is new System.OS_Interface.sigset_t;\n    --  In some implementations Interrupt_Mask can be represented as a linked"}, {"sha": "eb38ac8852fa77b79f8db162bbf625cdd850ea0d", "filename": "gcc/ada/s-osprim-mingw.adb", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osprim-mingw.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -33,7 +33,6 @@\n \n --  This is the NT version of this package\n \n-with Ada.Exceptions;\n with Interfaces.C;\n \n package body System.OS_Primitives is\n@@ -267,20 +266,35 @@ package body System.OS_Primitives is\n       end if;\n    end Timed_Delay;\n \n---  Package elaboration, get starting time as base\n+   ----------------\n+   -- Initialize --\n+   ----------------\n \n-begin\n-   if not QueryPerformanceFrequency (Tick_Frequency'Access) then\n-      Ada.Exceptions.Raise_Exception\n-        (Program_Error'Identity,\n-         \"cannot get high performance counter frequency\");\n-   end if;\n+   Initialized : Boolean := False;\n \n-   Get_Base_Time;\n+   procedure Initialize is\n+   begin\n+      if Initialized then\n+         return;\n+      end if;\n+\n+      Initialized := True;\n+\n+      --  Get starting time as base\n+\n+      if not QueryPerformanceFrequency (Tick_Frequency'Access) then\n+         raise Program_Error\n+           with \"cannot get high performance counter frequency\";\n+      end if;\n+\n+      Get_Base_Time;\n+\n+      --  Keep base clock and ticks for the monotonic clock. These values\n+      --  should never be changed to ensure proper behavior of the monotonic\n+      --  clock.\n \n-   --  Keep base clock and ticks for the monotonic clock. These values should\n-   --  never be changed to ensure proper behavior of the monotonic clock.\n+      Base_Monotonic_Clock := Base_Clock;\n+      Base_Monotonic_Ticks := Base_Ticks;\n+   end Initialize;\n \n-   Base_Monotonic_Clock := Base_Clock;\n-   Base_Monotonic_Ticks := Base_Ticks;\n end System.OS_Primitives;"}, {"sha": "b8863f65dad211cecee00b634351fdda02beaaf3", "filename": "gcc/ada/s-osprim-os2.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-os2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-os2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osprim-os2.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -167,6 +167,18 @@ package body System.OS_Primitives is\n       end if;\n    end Timed_Delay;\n \n-begin\n-   Set_Epoch_Offset;\n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   Initialized : Boolean := False;\n+\n+   procedure Initialize is\n+   begin\n+      if not Initialized then\n+         Initialized := True;\n+         Set_Epoch_Offset;\n+      end if;\n+   end Initialize;\n+\n end System.OS_Primitives;"}, {"sha": "6d4431c6c8cf92b42964d602b96c881c28141d40", "filename": "gcc/ada/s-osprim-posix.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osprim-posix.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -156,4 +156,13 @@ package body System.OS_Primitives is\n       end if;\n    end Timed_Delay;\n \n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize is\n+   begin\n+      null;\n+   end Initialize;\n+\n end System.OS_Primitives;"}, {"sha": "6e7436f7a0143a56c5efc2854ed64878d7adb3fe", "filename": "gcc/ada/s-osprim-solaris.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osprim-solaris.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -121,4 +121,13 @@ package body System.OS_Primitives is\n       end if;\n    end Timed_Delay;\n \n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize is\n+   begin\n+      null;\n+   end Initialize;\n+\n end System.OS_Primitives;"}, {"sha": "75110346914a263bcfed1db8cce00f0ec434ba5e", "filename": "gcc/ada/s-osprim-unix.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-unix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-unix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osprim-unix.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -121,4 +121,13 @@ package body System.OS_Primitives is\n       end if;\n    end Timed_Delay;\n \n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize is\n+   begin\n+      null;\n+   end Initialize;\n+\n end System.OS_Primitives;"}, {"sha": "7d7a7dc510e32205b5ddc3479ffb3b584fc9e1d7", "filename": "gcc/ada/s-osprim-vms.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osprim-vms.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -45,14 +45,22 @@ package body System.OS_Primitives is\n    pragma Import (C, Get_GMToff, \"get_gmtoff\");\n    --  Get the offset from GMT for this timezone\n \n-   VMS_Epoch_Offset : constant Long_Integer :=\n-                        10_000_000 *\n-                          (3_506_716_800 + Long_Integer (Get_GMToff));\n+   function VMS_Epoch_Offset return Long_Integer;\n+   pragma Inline (VMS_Epoch_Offset);\n    --  The offset between the Unix Epoch and the VMS Epoch\n \n    subtype Cond_Value_Type is System.Aux_DEC.Unsigned_Longword;\n    --  Condition Value return type\n \n+   ----------------------\n+   -- VMS_Epoch_Offset --\n+   ----------------------\n+\n+   function VMS_Epoch_Offset return Long_Integer is\n+   begin\n+      return 10_000_000 * (3_506_716_800 + Long_Integer (Get_GMToff));\n+   end VMS_Epoch_Offset;\n+\n    ----------------\n    -- Sys_Schdwk --\n    ----------------"}, {"sha": "91d545c4087ab6fe84a716a31a83ce371117763c", "filename": "gcc/ada/s-osprim-vms.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osprim-vms.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -35,11 +35,12 @@\n --  delays in non tasking applications on Alpha/VMS\n \n --  The choice of the real clock/delay implementation (depending on whether\n---  tasking is involved or not) is done via soft links (see s-tasoli.ads)\n+--  tasking is involved or not) is done via soft links (see s-soflin.ads)\n \n --  NEVER add any dependency to tasking packages here\n \n package System.OS_Primitives is\n+   pragma Preelaborate;\n \n    subtype OS_Time is Long_Integer;\n    --  System time on VMS is used for performance reasons."}, {"sha": "85a7dce94cad8e43b1bb6860eb055cfe5c5e3380", "filename": "gcc/ada/s-osprim-vxworks.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osprim-vxworks.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -158,4 +158,13 @@ package body System.OS_Primitives is\n       end if;\n    end Timed_Delay;\n \n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n+   procedure Initialize is\n+   begin\n+      null;\n+   end Initialize;\n+\n end System.OS_Primitives;"}, {"sha": "8166bce5f6c32ba65adf5b207cce34b9fa452598", "filename": "gcc/ada/s-osprim.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-osprim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osprim.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -35,11 +35,12 @@\n --  delays in non tasking applications.\n \n --  The choice of the real clock/delay implementation (depending on whether\n---  tasking is involved or not) is done via soft links (see s-tasoli.ads)\n+--  tasking is involved or not) is done via soft links (see s-soflin.ads)\n \n --  NEVER add any dependency to tasking packages here\n \n package System.OS_Primitives is\n+   pragma Preelaborate;\n \n    Max_Sensible_Delay : constant Duration :=\n                           Duration'Min (183 * 24 * 60 * 60.0,\n@@ -53,6 +54,11 @@ package System.OS_Primitives is\n    --  occurs in high integrity mode with 32-bit words, and possibly on\n    --  some specific ports of GNAT), Duration'Last is used instead.\n \n+   procedure Initialize;\n+   --  Initialize global settings related to this package.\n+   --  This procedure should be called before any other subprograms in\n+   --  this package. Note that this procedure can be called several times.\n+\n    function Clock return Duration;\n    pragma Inline (Clock);\n    --  Returns \"absolute\" time, represented as an offset"}, {"sha": "1baf726e414c754d2fb8f972e20d31514f79f153", "filename": "gcc/ada/s-proinf-irix-athread.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-proinf-irix-athread.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-proinf-irix-athread.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-proinf-irix-athread.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-1999 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1997-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,7 +46,9 @@\n --  then relink your application as usual.\n --\n \n+pragma Warnings (Off);\n with GNAT.OS_Lib;\n+pragma Warnings (On);\n \n package body System.Program_Info is\n "}, {"sha": "40b0cb6443bb1646dd78b605c1ebd78566f3cb47", "filename": "gcc/ada/s-proinf-irix-athread.ads", "status": "modified", "additions": 7, "deletions": 24, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-proinf-irix-athread.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-proinf-irix-athread.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-proinf-irix-athread.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1997-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1997-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,62 +35,45 @@\n --  to the run-time system at program startup for the SGI implementation.\n \n package System.Program_Info is\n+   pragma Preelaborate;\n \n    function Initial_Sproc_Count return Integer;\n-   --\n    --  The number of sproc created at program startup for scheduling\n    --  threads.\n-   --\n \n-   function Max_Sproc_Count     return Integer;\n-   --\n+   function Max_Sproc_Count return Integer;\n    --  The maximum number of sprocs that can be created by the program\n    --  for servicing threads.  This limit includes both the pre-created\n    --  sprocs and those explicitly created under program control.\n-   --\n \n-   function Sproc_Stack_Size    return Integer;\n-   --\n+   function Sproc_Stack_Size return Integer;\n    --  The size, in bytes, of the sproc's initial stack.\n-   --\n \n    function Default_Time_Slice  return Duration;\n-   --\n    --  The default time quanta for round-robin scheduling of threads of\n    --  equal priority.  This default value can be overridden on a per-task\n    --  basis by specifying an alternate value via the implementation-defined\n    --  Task_Info pragma. See s-tasinf.ads for more information.\n-   --\n \n-   function Default_Task_Stack  return Integer;\n-   --\n+   function Default_Task_Stack return Integer;\n    --  The default stack size for each created thread.  This default value\n    --  can be overriden on a per-task basis by the language-defined\n    --  Storage_Size pragma.\n-   --\n \n-   function Stack_Guard_Pages   return Integer;\n-   --\n+   function Stack_Guard_Pages return Integer;\n    --  The number of non-writable, guard pages to append to the bottom of\n    --  each thread's stack.\n-   --\n \n    function Pthread_Sched_Signal return Integer;\n-   --\n    --  The signal used by the Pthreads library to affect scheduling actions\n    --  in remote sprocs.\n-   --\n \n-   function Pthread_Arena_Size  return Integer;\n-   --\n+   function Pthread_Arena_Size return Integer;\n    --  The size of the shared arena from which pthread locks are allocated.\n    --  See the usinit(3p) man page for more information on shared arenas.\n-   --\n \n    function Os_Default_Priority return Integer;\n-   --\n    --  The default Irix Non-Degrading priority for each sproc created to\n    --  service threads.\n-   --\n \n end System.Program_Info;"}, {"sha": "2a4e78e9766212ac2413a80566a421b9daf721a4", "filename": "gcc/ada/s-proinf.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-proinf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-proinf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-proinf.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 1996-2003 Free Software Foundation, Inc.        --\n+--            Copyright (C) 1996-2005 Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,6 +35,7 @@\n --  to the run-time system at program startup.\n \n package System.Program_Info is\n+   pragma Preelaborate;\n \n    function Default_Task_Stack return Integer;\n    --  The default stack size for each created thread.  This default value"}, {"sha": "02b57bfe364c4c094c433bf371dd6cf3843f495f", "filename": "gcc/ada/s-soflin.adb", "status": "modified", "additions": 10, "deletions": 81, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-soflin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-soflin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-soflin.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2001 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,26 +35,26 @@ pragma Polling (Off);\n --  We must turn polling off for this unit, because otherwise we get\n --  an infinite loop from the code within the Poll routine itself.\n \n-with System.Machine_State_Operations; use System.Machine_State_Operations;\n---  Used for Create_TSD, Destroy_TSD\n-\n with System.Parameters;\n --  Used for Sec_Stack_Ratio\n \n+pragma Warnings (Off);\n+--  Disable warnings since System.Secondary_Stack is currently not\n+--  Preelaborate\n with System.Secondary_Stack;\n+pragma Warnings (On);\n \n package body System.Soft_Links is\n \n    package SST renames System.Secondary_Stack;\n \n-   --  Allocate an exception stack for the main program to use.\n-   --  We make sure that the stack has maximum alignment. Some systems require\n-   --  this (e.g. Sun), and in any case it is a good idea for efficiency.\n-\n    NT_Exc_Stack : array (0 .. 8192) of aliased Character;\n    for NT_Exc_Stack'Alignment use Standard'Maximum_Alignment;\n+   --  Allocate an exception stack for the main program to use.\n+   --  This is currently only used under VMS.\n \n    NT_TSD : TSD;\n+   --  Note: we rely on the default initialization of NT_TSD.\n \n    --------------------\n    -- Abort_Defer_NT --\n@@ -116,10 +116,6 @@ package body System.Soft_Links is\n          SST.SS_Init\n            (New_TSD.Sec_Stack_Addr, SST.Default_Secondary_Stack_Size);\n       end if;\n-\n-      New_TSD.Machine_State_Addr :=\n-        System.Address\n-          (System.Machine_State_Operations.Allocate_Machine_State);\n    end Create_TSD;\n \n    -----------------------\n@@ -138,8 +134,6 @@ package body System.Soft_Links is\n    procedure Destroy_TSD (Old_TSD : in out TSD) is\n    begin\n       SST.SS_Free (Old_TSD.Sec_Stack_Addr);\n-      System.Machine_State_Operations.Free_Machine_State\n-        (Machine_State (Old_TSD.Machine_State_Addr));\n    end Destroy_TSD;\n \n    ---------------------\n@@ -166,14 +160,14 @@ package body System.Soft_Links is\n \n    function Get_Exc_Stack_Addr_NT return Address is\n    begin\n-      return NT_TSD.Exc_Stack_Addr;\n+      return NT_Exc_Stack (NT_Exc_Stack'Last)'Address;\n    end Get_Exc_Stack_Addr_NT;\n \n    -----------------------------\n    -- Get_Exc_Stack_Addr_Soft --\n    -----------------------------\n \n-   function Get_Exc_Stack_Addr_Soft return  Address is\n+   function Get_Exc_Stack_Addr_Soft return Address is\n    begin\n       return Get_Exc_Stack_Addr.all;\n    end Get_Exc_Stack_Addr_Soft;\n@@ -205,24 +199,6 @@ package body System.Soft_Links is\n       return Get_Jmpbuf_Address.all;\n    end Get_Jmpbuf_Address_Soft;\n \n-   -------------------------------\n-   -- Get_Machine_State_Addr_NT --\n-   -------------------------------\n-\n-   function Get_Machine_State_Addr_NT return  Address is\n-   begin\n-      return NT_TSD.Machine_State_Addr;\n-   end Get_Machine_State_Addr_NT;\n-\n-   ---------------------------------\n-   -- Get_Machine_State_Addr_Soft --\n-   ---------------------------------\n-\n-   function Get_Machine_State_Addr_Soft return  Address is\n-   begin\n-      return Get_Machine_State_Addr.all;\n-   end Get_Machine_State_Addr_Soft;\n-\n    ---------------------------\n    -- Get_Sec_Stack_Addr_NT --\n    ---------------------------\n@@ -259,26 +235,6 @@ package body System.Soft_Links is\n       null;\n    end Null_Adafinal;\n \n-   ---------------------------\n-   -- Set_Exc_Stack_Addr_NT --\n-   ---------------------------\n-\n-   procedure Set_Exc_Stack_Addr_NT (Self_ID : Address; Addr : Address) is\n-      pragma Warnings (Off, Self_ID);\n-\n-   begin\n-      NT_TSD.Exc_Stack_Addr := Addr;\n-   end Set_Exc_Stack_Addr_NT;\n-\n-   -----------------------------\n-   -- Set_Exc_Stack_Addr_Soft --\n-   -----------------------------\n-\n-   procedure Set_Exc_Stack_Addr_Soft (Self_ID : Address; Addr : Address) is\n-   begin\n-      Set_Exc_Stack_Addr (Self_ID, Addr);\n-   end Set_Exc_Stack_Addr_Soft;\n-\n    ---------------------------\n    -- Set_Jmpbuf_Address_NT --\n    ---------------------------\n@@ -293,24 +249,6 @@ package body System.Soft_Links is\n       Set_Jmpbuf_Address (Addr);\n    end Set_Jmpbuf_Address_Soft;\n \n-   -------------------------------\n-   -- Set_Machine_State_Addr_NT --\n-   -------------------------------\n-\n-   procedure Set_Machine_State_Addr_NT (Addr : Address) is\n-   begin\n-      NT_TSD.Machine_State_Addr := Addr;\n-   end Set_Machine_State_Addr_NT;\n-\n-   ---------------------------------\n-   -- Set_Machine_State_Addr_Soft --\n-   ---------------------------------\n-\n-   procedure Set_Machine_State_Addr_Soft (Addr : Address) is\n-   begin\n-      Set_Machine_State_Addr (Addr);\n-   end Set_Machine_State_Addr_Soft;\n-\n    ---------------------------\n    -- Set_Sec_Stack_Addr_NT --\n    ---------------------------\n@@ -365,13 +303,4 @@ package body System.Soft_Links is\n       return \"main_task\";\n    end Task_Name_NT;\n \n-   -------------------------\n-   -- Package Elaboration --\n-   -------------------------\n-\n-begin\n-   NT_TSD.Exc_Stack_Addr := NT_Exc_Stack (8192)'Address;\n-   Ada.Exceptions.Save_Occurrence\n-     (NT_TSD.Current_Excep, Ada.Exceptions.Null_Occurrence);\n-\n end System.Soft_Links;"}, {"sha": "8f166e612637e5384cf5b01e5c33cdd57f3cbc2f", "filename": "gcc/ada/s-soflin.ads", "status": "modified", "additions": 11, "deletions": 39, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-soflin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-soflin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-soflin.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -32,7 +32,7 @@\n ------------------------------------------------------------------------------\n \n --  This package contains a set of subprogram access variables that access\n---  some low-level primitives that are called different depending wether\n+--  some low-level primitives that are called different depending whether\n --  tasking is involved or not (e.g. the Get/Set_Jmpbuf_Address that needs\n --  to provide a different value for each task). To avoid dragging in the\n --  tasking all the time, we use a system of soft links where the links are\n@@ -43,7 +43,9 @@ with Ada.Exceptions;\n with System.Stack_Checking;\n \n package System.Soft_Links is\n-   pragma Elaborate_Body;\n+   pragma Warnings (Off);\n+   pragma Preelaborate_05;\n+   pragma Warnings (On);\n \n    subtype EOA is Ada.Exceptions.Exception_Occurrence_Access;\n    subtype EO is Ada.Exceptions.Exception_Occurrence;\n@@ -210,21 +212,8 @@ package System.Soft_Links is\n    Get_Sec_Stack_Addr : Get_Address_Call := Get_Sec_Stack_Addr_NT'Access;\n    Set_Sec_Stack_Addr : Set_Address_Call := Set_Sec_Stack_Addr_NT'Access;\n \n-   function  Get_Machine_State_Addr_NT return  Address;\n-   procedure Set_Machine_State_Addr_NT (Addr : Address);\n-\n-   Get_Machine_State_Addr : Get_Address_Call\n-     := Get_Machine_State_Addr_NT'Access;\n-   Set_Machine_State_Addr : Set_Address_Call\n-     := Set_Machine_State_Addr_NT'Access;\n-\n-   function  Get_Exc_Stack_Addr_NT return Address;\n-   procedure Set_Exc_Stack_Addr_NT (Self_ID : Address; Addr : Address);\n-   --  Self_ID is a Task_Id, but in the non-tasking case there is no\n-   --  Task_Id type available, so make do with Address.\n-\n+   function Get_Exc_Stack_Addr_NT return Address;\n    Get_Exc_Stack_Addr : Get_Address_Call := Get_Exc_Stack_Addr_NT'Access;\n-   Set_Exc_Stack_Addr : Set_Address_Call2 := Set_Exc_Stack_Addr_NT'Access;\n \n    function  Get_Current_Excep_NT return EOA;\n \n@@ -302,24 +291,18 @@ package System.Soft_Links is\n       --  to the tasks requested stack size before the task can do\n       --  its first stack check.\n \n-      Jmpbuf_Address : Address := Null_Address;\n+      pragma Warnings (Off);\n+      Jmpbuf_Address : System.Address := System.Null_Address;\n       --  Address of jump buffer used to store the address of the\n       --  current longjmp/setjmp buffer for exception management.\n       --  These buffers are threaded into a stack, and the address\n       --  here is the top of the stack. A null address means that\n       --  no exception handler is currently active.\n \n-      Sec_Stack_Addr : Address := Null_Address;\n+      Sec_Stack_Addr : System.Address := System.Null_Address;\n+      pragma Warnings (On);\n       --  Address of currently allocated secondary stack\n \n-      Exc_Stack_Addr : Address := Null_Address;\n-      --  Address of a task-specific stack used for the propagation of\n-      --  exceptions in response to synchronous faults. This alternate\n-      --  stack is necessary when propagating Storage_Error resulting\n-      --  from a stack overflow, as the task's primary stack is full.\n-      --  This is currently only used on the SGI, and this value stays\n-      --  null on other platforms.\n-\n       Current_Excep : aliased EO;\n       --  Exception occurrence that contains the information for the\n       --  current exception. Note that any exception in the same task\n@@ -328,9 +311,6 @@ package System.Soft_Links is\n       --\n       --  Also act as a list of the active exceptions in the case of the GCC\n       --  exception mechanism, organized as a stack with the most recent first.\n-\n-      Machine_State_Addr : Address := Null_Address;\n-      --  Machine state address. Used by front-end zero cost exception\n    end record;\n \n    procedure Create_TSD (New_TSD : in out TSD);\n@@ -340,7 +320,7 @@ package System.Soft_Links is\n \n    procedure Destroy_TSD (Old_TSD : in out TSD);\n    pragma Inline (Destroy_TSD);\n-   --  Called from s-tassta  just before a thread is destroyed to perform\n+   --  Called from s-tassta just before a thread is destroyed to perform\n    --  any required finalization.\n \n    function Get_GNAT_Exception return Ada.Exceptions.Exception_Id;\n@@ -364,14 +344,6 @@ package System.Soft_Links is\n    pragma Inline (Get_Sec_Stack_Addr_Soft);\n    pragma Inline (Set_Sec_Stack_Addr_Soft);\n \n-   function  Get_Exc_Stack_Addr_Soft return Address;\n-   procedure Set_Exc_Stack_Addr_Soft (Self_ID : Address; Addr : Address);\n-   pragma Inline (Get_Exc_Stack_Addr_Soft);\n-   pragma Inline (Set_Exc_Stack_Addr_Soft);\n-\n-   function  Get_Machine_State_Addr_Soft return Address;\n-   procedure Set_Machine_State_Addr_Soft (Addr : Address);\n-   pragma Inline (Get_Machine_State_Addr_Soft);\n-   pragma Inline (Set_Machine_State_Addr_Soft);\n+   function Get_Exc_Stack_Addr_Soft return Address;\n \n end System.Soft_Links;"}, {"sha": "920284764b443d25db88333ae139ed3dbc1b6370", "filename": "gcc/ada/s-solita.adb", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-solita.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-solita.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-solita.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 2004, Free Software Foundation, Inc.           --\n+--          Copyright (C) 2004-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,9 +47,6 @@ with System.Task_Primitives.Operations;\n with System.Tasking;\n --  Used for Task_Id\n \n-with Ada.Exceptions;\n---  Used for Raise_Exception\n-\n package body System.Soft_Links.Tasking is\n \n    package STPO renames System.Task_Primitives.Operations;\n@@ -75,10 +72,6 @@ package body System.Soft_Links.Tasking is\n    procedure Set_Sec_Stack_Addr (Addr : Address);\n    --  Get/Set location of current task's secondary stack\n \n-   function  Get_Machine_State_Addr return Address;\n-   procedure Set_Machine_State_Addr (Addr : Address);\n-   --  Get/Set the address for storing the current task's machine state\n-\n    function Get_Current_Excep return SSL.EOA;\n    --  Task-safe version of SSL.Get_Current_Excep\n \n@@ -99,11 +92,6 @@ package body System.Soft_Links.Tasking is\n       return STPO.Self.Common.Compiler_Data.Jmpbuf_Address;\n    end Get_Jmpbuf_Address;\n \n-   function Get_Machine_State_Addr return Address is\n-   begin\n-      return STPO.Self.Common.Compiler_Data.Machine_State_Addr;\n-   end Get_Machine_State_Addr;\n-\n    function Get_Sec_Stack_Addr return  Address is\n    begin\n       return STPO.Self.Common.Compiler_Data.Sec_Stack_Addr;\n@@ -118,11 +106,6 @@ package body System.Soft_Links.Tasking is\n       STPO.Self.Common.Compiler_Data.Jmpbuf_Address := Addr;\n    end Set_Jmpbuf_Address;\n \n-   procedure Set_Machine_State_Addr (Addr : Address) is\n-   begin\n-      STPO.Self.Common.Compiler_Data.Machine_State_Addr := Addr;\n-   end Set_Machine_State_Addr;\n-\n    procedure Set_Sec_Stack_Addr (Addr : Address) is\n    begin\n       STPO.Self.Common.Compiler_Data.Sec_Stack_Addr := Addr;\n@@ -143,12 +126,12 @@ package body System.Soft_Links.Tasking is\n       if System.Tasking.Detect_Blocking\n         and then Self_Id.Common.Protected_Action_Nesting > 0\n       then\n-         Ada.Exceptions.Raise_Exception\n-           (Program_Error'Identity, \"potentially blocking operation\");\n+         raise Program_Error with \"potentially blocking operation\";\n       else\n+         Abort_Defer.all;\n          STPO.Timed_Delay (Self_Id, Time, Mode);\n+         Abort_Undefer.all;\n       end if;\n-\n    end Timed_Delay_T;\n \n    -----------------------------\n@@ -172,8 +155,6 @@ package body System.Soft_Links.Tasking is\n          SSL.Set_Jmpbuf_Address     := Set_Jmpbuf_Address'Access;\n          SSL.Get_Sec_Stack_Addr     := Get_Sec_Stack_Addr'Access;\n          SSL.Set_Sec_Stack_Addr     := Set_Sec_Stack_Addr'Access;\n-         SSL.Get_Machine_State_Addr := Get_Machine_State_Addr'Access;\n-         SSL.Set_Machine_State_Addr := Set_Machine_State_Addr'Access;\n          SSL.Get_Current_Excep      := Get_Current_Excep'Access;\n          SSL.Timed_Delay            := Timed_Delay_T'Access;\n \n@@ -182,7 +163,6 @@ package body System.Soft_Links.Tasking is\n \n          SSL.Set_Sec_Stack_Addr     (SSL.Get_Sec_Stack_Addr_NT);\n          SSL.Set_Jmpbuf_Address     (SSL.Get_Jmpbuf_Address_NT);\n-         SSL.Set_Machine_State_Addr (SSL.Get_Machine_State_Addr_NT);\n       end if;\n    end Init_Tasking_Soft_Links;\n "}, {"sha": "7ccf95b57cdb60b39fa2203b78020c5c71f823a8", "filename": "gcc/ada/s-stache.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-stache.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-stache.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stache.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -40,7 +40,7 @@\n with System.Storage_Elements;\n \n package System.Stack_Checking is\n-\n+   pragma Preelaborate;\n    pragma Elaborate_Body;\n    --  This unit has a junk null body. The reason is that historically we\n    --  used to have a real body, and it causes bootstrapping path problems"}, {"sha": "8388e8d7ac252bf2c65b1b04a103d568540c7277", "filename": "gcc/ada/s-stalib.ads", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-stalib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-stalib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stalib.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -54,11 +54,9 @@ with System;\n with Unchecked_Conversion;\n \n package System.Standard_Library is\n-\n-   pragma Suppress (All_Checks);\n-   --  Suppress explicitely all the checks to work around the Solaris linker\n-   --  bug when using gnatmake -f -a (but without -gnatp). This is not needed\n-   --  with Solaris 2.6, so eventually can be removed ???\n+   pragma Warnings (Off);\n+   pragma Preelaborate_05;\n+   pragma Warnings (On);\n \n    type Big_String_Ptr is access all String (Positive);\n    --  A non-fat pointer type for null terminated strings\n@@ -137,8 +135,9 @@ package System.Standard_Library is\n       Name_Length : Natural;\n       --  Length of fully expanded name of exception\n \n-      Full_Name : Big_String_Ptr;\n+      Full_Name : System.Address;\n       --  Fully expanded name of exception, null terminated\n+      --  You can use To_Ptr to convert this to a string.\n \n       HTable_Ptr : Exception_Data_Ptr;\n       --  Hash table pointer used to link entries together in the hash table\n@@ -157,7 +156,6 @@ package System.Standard_Library is\n       --  whenever the exception is raised. This call occurs immediately,\n       --  before any other actions taken by the raise (and in particular\n       --  before any unwinding of the stack occurs).\n-\n    end record;\n \n    --  Definitions for standard predefined exceptions defined in Standard,\n@@ -179,7 +177,7 @@ package System.Standard_Library is\n      (Not_Handled_By_Others => False,\n       Lang                  => 'A',\n       Name_Length           => Constraint_Error_Name'Length,\n-      Full_Name             => To_Ptr (Constraint_Error_Name'Address),\n+      Full_Name             => Constraint_Error_Name'Address,\n       HTable_Ptr            => null,\n       Import_Code           => 0,\n       Raise_Hook            => null);\n@@ -188,7 +186,7 @@ package System.Standard_Library is\n      (Not_Handled_By_Others => False,\n       Lang                  => 'A',\n       Name_Length           => Numeric_Error_Name'Length,\n-      Full_Name             => To_Ptr (Numeric_Error_Name'Address),\n+      Full_Name             => Numeric_Error_Name'Address,\n       HTable_Ptr            => null,\n       Import_Code           => 0,\n       Raise_Hook            => null);\n@@ -197,7 +195,7 @@ package System.Standard_Library is\n      (Not_Handled_By_Others => False,\n       Lang                  => 'A',\n       Name_Length           => Program_Error_Name'Length,\n-      Full_Name             => To_Ptr (Program_Error_Name'Address),\n+      Full_Name             => Program_Error_Name'Address,\n       HTable_Ptr            => null,\n       Import_Code           => 0,\n       Raise_Hook            => null);\n@@ -206,7 +204,7 @@ package System.Standard_Library is\n      (Not_Handled_By_Others => False,\n       Lang                  => 'A',\n       Name_Length           => Storage_Error_Name'Length,\n-      Full_Name             => To_Ptr (Storage_Error_Name'Address),\n+      Full_Name             => Storage_Error_Name'Address,\n       HTable_Ptr            => null,\n       Import_Code           => 0,\n       Raise_Hook            => null);\n@@ -215,7 +213,7 @@ package System.Standard_Library is\n      (Not_Handled_By_Others => False,\n       Lang                  => 'A',\n       Name_Length           => Tasking_Error_Name'Length,\n-      Full_Name             => To_Ptr (Tasking_Error_Name'Address),\n+      Full_Name             => Tasking_Error_Name'Address,\n       HTable_Ptr            => null,\n       Import_Code           => 0,\n       Raise_Hook            => null);\n@@ -224,7 +222,7 @@ package System.Standard_Library is\n      (Not_Handled_By_Others => True,\n       Lang                  => 'A',\n       Name_Length           => Abort_Signal_Name'Length,\n-      Full_Name             => To_Ptr (Abort_Signal_Name'Address),\n+      Full_Name             => Abort_Signal_Name'Address,\n       HTable_Ptr            => null,\n       Import_Code           => 0,\n       Raise_Hook            => null);"}, {"sha": "cd762c7ec5bb07b10757ae14b0a11cbbc9cb01c9", "filename": "gcc/ada/s-taprob.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprob.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprob.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprob.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -241,7 +241,9 @@ package body System.Tasking.Protected_Objects is\n    end Unlock;\n \n begin\n-   --  Ensure that tasking soft links are set when using protected objects\n+   --  Ensure that tasking is initialized, as well as tasking soft links\n+   --  when using protected objects.\n \n+   Tasking.Initialize;\n    System.Soft_Links.Tasking.Init_Tasking_Soft_Links;\n end System.Tasking.Protected_Objects;"}, {"sha": "873b1fd78aea05e6388d2f22b5da80bec0fffaa8", "filename": "gcc/ada/s-taprop-dummy.adb", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-dummy.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-dummy.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-dummy.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -40,10 +40,6 @@ pragma Polling (Off);\n --  Turn off polling, we do not want ATC polling to take place during\n --  tasking operations. It causes infinite loops and other problems.\n \n-with System.Tasking;\n---  used for Ada_Task_Control_Block\n---           Task_Id\n-\n with System.Error_Reporting;\n --  used for Shutdown\n \n@@ -55,9 +51,6 @@ package body System.Task_Primitives.Operations is\n    pragma Warnings (Off);\n    --  Turn off warnings since so many unreferenced parameters\n \n-   No_Tasking : Boolean;\n-   --  Comment required here ???\n-\n    ----------------\n    -- Abort_Task --\n    ----------------\n@@ -193,8 +186,11 @@ package body System.Task_Primitives.Operations is\n    ----------------\n \n    procedure Initialize (Environment_Task : Task_Id) is\n+      No_Tasking : Boolean;\n    begin\n-      null;\n+      No_Tasking :=\n+        System.Error_Reporting.Shutdown\n+          (\"Tasking not implemented on this configuration\");\n    end Initialize;\n \n    procedure Initialize (S : in out Suspension_Object) is\n@@ -479,11 +475,4 @@ package body System.Task_Primitives.Operations is\n       null;\n    end Yield;\n \n-begin\n-   --  Can't raise an exception because target independent packages try to\n-   --  do an Abort_Defer, which gets a memory fault.\n-\n-   No_Tasking :=\n-     System.Error_Reporting.Shutdown\n-       (\"Tasking not implemented on this configuration\");\n end System.Task_Primitives.Operations;"}, {"sha": "5989c197a071bec8cf1bea8edc05bd8406b22caa", "filename": "gcc/ada/s-taprop-hpux-dce.adb", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-hpux-dce.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -43,41 +43,32 @@ pragma Polling (Off);\n with System.Tasking.Debug;\n --  used for Known_Tasks\n \n-with Interfaces.C;\n---  used for int\n---           size_t\n-\n with System.Interrupt_Management;\n --  used for Keep_Unmasked\n --           Abort_Task_Interrupt\n --           Interrupt_ID\n \n+pragma Warnings (Off);\n with System.Interrupt_Management.Operations;\n --  used for Set_Interrupt_Mask\n --           All_Tasks_Mask\n pragma Elaborate_All (System.Interrupt_Management.Operations);\n \n+pragma Warnings (On);\n+\n+with System.OS_Primitives;\n+--  used for Delay_Modes\n+\n+with Interfaces.C;\n+--  used for int\n+--           size_t\n+\n with System.Parameters;\n --  used for Size_Type\n \n with System.Task_Primitives.Interrupt_Operations;\n --  used for Get_Interrupt_ID\n \n-with System.Tasking;\n---  used for Ada_Task_Control_Block\n---           Task_Id\n-\n-with System.Soft_Links;\n---  used for Defer/Undefer_Abort\n-\n---  Note that we do not use System.Tasking.Initialization directly since\n---  this is a higher level package that we shouldn't depend on. For example\n---  when using the restricted run time, it is replaced by\n---  System.Tasking.Restricted.Stages.\n-\n-with System.OS_Primitives;\n---  used for Delay_Modes\n-\n with Unchecked_Conversion;\n with Unchecked_Deallocation;\n \n@@ -91,7 +82,6 @@ package body System.Task_Primitives.Operations is\n    use System.OS_Primitives;\n \n    package PIO renames System.Task_Primitives.Interrupt_Operations;\n-   package SSL renames System.Soft_Links;\n \n    ----------------\n    -- Local Data --\n@@ -124,9 +114,6 @@ package body System.Task_Primitives.Operations is\n    --  is not implemented for DCE threads. The HPUX 10 port is at this\n    --  stage considered dead, and no further work is planned on it.\n \n-   FIFO_Within_Priorities : constant Boolean := Dispatching_Policy = 'F';\n-   --  Indicates whether FIFO_Within_Priorities is set\n-\n    Foreign_Task_Elaborated : aliased Boolean := True;\n    --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n@@ -495,11 +482,6 @@ package body System.Task_Primitives.Operations is\n       Result     : Interfaces.C.int;\n \n    begin\n-      --  The little window between deferring abort and locking Self_ID is the\n-      --  only reason to check for pending abort and priority change below!\n-\n-      SSL.Abort_Defer.all;\n-\n       if Single_Lock then\n          Lock_RTS;\n       end if;\n@@ -550,7 +532,6 @@ package body System.Task_Primitives.Operations is\n       end if;\n \n       Result := sched_yield;\n-      SSL.Abort_Undefer.all;\n    end Timed_Delay;\n \n    ---------------------\n@@ -632,7 +613,7 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_RR, Param'Access);\n \n-      elsif FIFO_Within_Priorities or else Time_Slice_Val = 0 then\n+      elsif Dispatching_Policy = 'F' or else Time_Slice_Val = 0 then\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_FIFO, Param'Access);\n \n@@ -643,7 +624,7 @@ package body System.Task_Primitives.Operations is\n \n       pragma Assert (Result = 0);\n \n-      if FIFO_Within_Priorities then\n+      if Dispatching_Policy = 'F' then\n \n          --  Annex D requirement [RM D.2.2 par. 9]:\n          --    If the task drops its priority due to the loss of inherited\n@@ -1162,6 +1143,8 @@ package body System.Task_Primitives.Operations is\n    begin\n       Environment_Task_Id := Environment_Task;\n \n+      Interrupt_Management.Initialize;\n+\n       --  Initialize the lock used to synchronize chain of all ATCBs\n \n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);"}, {"sha": "43c0fa6380f0be6f8170550016c9066c87f8269f", "filename": "gcc/ada/s-taprop-irix-athread.adb", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-irix-athread.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-irix-athread.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix-athread.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -47,38 +47,26 @@ with Interfaces.C;\n with System.Tasking.Debug;\n --  used for Known_Tasks\n \n-with System.Task_Info;\n-\n with System.Interrupt_Management;\n --  used for Keep_Unmasked\n --           Abort_Task_Interrupt\n --           Interrupt_ID\n \n+with System.OS_Primitives;\n+--  used for Delay_Modes\n+\n+with System.Task_Info;\n+\n with System.Parameters;\n --  used for Size_Type\n \n-with System.Tasking;\n---  used for Ada_Task_Control_Block\n---           Task_Id\n-\n with System.Program_Info;\n --  used for Default_Task_Stack\n --           Default_Time_Slice\n --           Stack_Guard_Pages\n --           Pthread_Sched_Signal\n --           Pthread_Arena_Size\n \n-with System.Soft_Links;\n---  used for Defer/Undefer_Abort\n-\n---  Note that we do not use System.Tasking.Initialization directly since\n---  this is a higher level package that we shouldn't depend on. For example\n---  when using the restricted run time, it is replaced by\n---  System.Tasking.Restricted.Stages.\n-\n-with System.OS_Primitives;\n---  used for Delay_Modes\n-\n with System.Storage_Elements;\n --  used for To_Address\n \n@@ -94,8 +82,6 @@ package body System.Task_Primitives.Operations is\n    use System.Parameters;\n    use System.OS_Primitives;\n \n-   package SSL renames System.Soft_Links;\n-\n    -----------------\n    -- Local Data  --\n    -----------------\n@@ -433,12 +419,6 @@ package body System.Task_Primitives.Operations is\n       Result     : Interfaces.C.int;\n \n    begin\n-      --  Only the little window between deferring abort and\n-      --  locking Self_ID is the reason we need to\n-      --  check for pending abort and priority change below!\n-\n-      SSL.Abort_Defer.all;\n-\n       if Single_Lock then\n          Lock_RTS;\n       end if;\n@@ -490,7 +470,6 @@ package body System.Task_Primitives.Operations is\n       end if;\n \n       pthread_yield;\n-      SSL.Abort_Undefer.all;\n    end Timed_Delay;\n \n    ---------------------\n@@ -819,7 +798,7 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Abort_Task;\n \n-      ----------------\n+   ----------------\n    -- Initialize --\n    ----------------\n \n@@ -1087,7 +1066,9 @@ package body System.Task_Primitives.Operations is\n \n    procedure Initialize (Environment_Task : Task_Id) is\n    begin\n+      Initialize_Athread_Library;\n       Environment_Task_Id := Environment_Task;\n+      Interrupt_Management.Initialize;\n \n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n       --  Initialize the lock used to synchronize chain of all ATCBs.\n@@ -1126,8 +1107,4 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Initialize_Athread_Library;\n \n---  Package initialization\n-\n-begin\n-   Initialize_Athread_Library;\n end System.Task_Primitives.Operations;"}, {"sha": "5c610b0585420c5566fe59f1674dee17a4812f8d", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 20, "deletions": 53, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -49,28 +49,19 @@ with System.Task_Info;\n with System.Tasking.Debug;\n --  used for Known_Tasks\n \n-with System.IO;\n---  used for Put_Line\n-\n with System.Interrupt_Management;\n --  used for Keep_Unmasked\n --           Abort_Task_Interrupt\n --           Interrupt_ID\n \n-with System.Parameters;\n---  used for Size_Type\n-\n-with System.Tasking;\n---  used for Ada_Task_Control_Block\n---           Task_Id\n+with System.OS_Primitives;\n+--  used for Delay_Modes\n \n-with System.Soft_Links;\n---  used for Defer/Undefer_Abort\n+with System.IO;\n+--  used for Put_Line\n \n---  Note that we do not use System.Tasking.Initialization directly since\n---  this is a higher level package that we shouldn't depend on. For example\n---  when using the restricted run time, it is replaced by\n---  System.Tasking.Restricted.Stages.\n+with System.Parameters;\n+--  used for Size_Type\n \n with System.Program_Info;\n --  used for Default_Task_Stack\n@@ -82,9 +73,6 @@ with System.Program_Info;\n with System.OS_Interface;\n --  used for various type, constant, and operations\n \n-with System.OS_Primitives;\n---  used for Delay_Modes\n-\n with Unchecked_Conversion;\n with Unchecked_Deallocation;\n \n@@ -97,8 +85,6 @@ package body System.Task_Primitives.Operations is\n    use System.OS_Primitives;\n    use System.Parameters;\n \n-   package SSL renames System.Soft_Links;\n-\n    ----------------\n    -- Local Data --\n    ----------------\n@@ -515,12 +501,6 @@ package body System.Task_Primitives.Operations is\n       Result     : Interfaces.C.int;\n \n    begin\n-      --  The little window between deferring abort and locking Self_ID is\n-      --  the only reason we need to check for pending abort and priority\n-      --  change below!\n-\n-      SSL.Abort_Defer.all;\n-\n       if Single_Lock then\n          Lock_RTS;\n       end if;\n@@ -565,7 +545,6 @@ package body System.Task_Primitives.Operations is\n       end if;\n \n       Yield;\n-      SSL.Abort_Undefer.all;\n    end Timed_Delay;\n \n    ---------------------\n@@ -1243,6 +1222,8 @@ package body System.Task_Primitives.Operations is\n    begin\n       Environment_Task_Id := Environment_Task;\n \n+      Interrupt_Management.Initialize;\n+\n       --  Initialize the lock used to synchronize chain of all ATCBs.\n \n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n@@ -1251,6 +1232,18 @@ package body System.Task_Primitives.Operations is\n \n       Enter_Task (Environment_Task);\n \n+      --  Prepare the set of signals that should unblocked in all tasks\n+\n+      Result := sigemptyset (Unblocked_Signal_Mask'Access);\n+      pragma Assert (Result = 0);\n+\n+      for J in Interrupt_Management.Interrupt_ID loop\n+         if System.Interrupt_Management.Keep_Unmasked (J) then\n+            Result := sigaddset (Unblocked_Signal_Mask'Access, Signal (J));\n+            pragma Assert (Result = 0);\n+         end if;\n+      end loop;\n+\n       --  Install the abort-signal handler\n \n       if State (System.Interrupt_Management.Abort_Task_Interrupt)\n@@ -1272,30 +1265,4 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Initialize;\n \n-begin\n-   declare\n-      Result : Interfaces.C.int;\n-   begin\n-      --  Prepare the set of signals that should unblocked in all tasks\n-\n-      Result := sigemptyset (Unblocked_Signal_Mask'Access);\n-      pragma Assert (Result = 0);\n-\n-      for J in Interrupt_Management.Interrupt_ID loop\n-         if System.Interrupt_Management.Keep_Unmasked (J) then\n-            Result := sigaddset (Unblocked_Signal_Mask'Access, Signal (J));\n-            pragma Assert (Result = 0);\n-         end if;\n-      end loop;\n-\n-      --  Pick the highest resolution Clock for Clock_Realtime\n-\n-      --  ??? This code currently doesn't work (see c94007[ab] for example)\n-\n-      --  if syssgi (SGI_CYCLECNTR_SIZE) = 64 then\n-      --     Real_Time_Clock_Id := CLOCK_SGI_CYCLE;\n-      --  else\n-      --     Real_Time_Clock_Id := CLOCK_REALTIME;\n-      --  end if;\n-   end;\n end System.Task_Primitives.Operations;"}, {"sha": "6cb7eb7e5cb094232375136afd830b1e452d5089", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 43, "deletions": 120, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -40,44 +40,32 @@ pragma Polling (Off);\n --  Turn off polling, we do not want ATC polling to take place during\n --  tasking operations. It causes infinite loops and other problems.\n \n-with System.Tasking.Debug;\n---  used for Known_Tasks\n-\n with Interfaces.C;\n --  used for int\n --           size_t\n \n+with System.Parameters;\n+--  used for Size_Type\n+\n+with System.Tasking.Debug;\n+--  used for Known_Tasks\n+\n with System.Interrupt_Management;\n --  used for Keep_Unmasked\n --           Abort_Task_Interrupt\n --           Interrupt_ID\n \n-with System.Parameters;\n---  used for Size_Type\n+with System.OS_Primitives;\n+--  used for Delay_Modes\n \n-with System.Tasking;\n---  used for Ada_Task_Control_Block\n---           Task_Id\n+with System.Soft_Links;\n+--  used for Abort_Defer/Undefer\n \n with Ada.Exceptions;\n --  used for Raise_Exception\n --           Raise_From_Signal_Handler\n --           Exception_Id\n \n-with System.Soft_Links;\n---  used for Defer/Undefer_Abort\n-\n---  Note that we do not use System.Tasking.Initialization directly since\n---  this is a higher level package that we shouldn't depend on. For example\n---  when using the restricted run time, it is replaced by\n---  System.Tasking.Restricted.Stages.\n-\n-with System.OS_Primitives;\n---  used for Delay_Modes\n-\n-with System.Soft_Links;\n---  used for Abort_Defer/Undefer\n-\n with Unchecked_Conversion;\n with Unchecked_Deallocation;\n \n@@ -90,8 +78,6 @@ package body System.Task_Primitives.Operations is\n    use System.Parameters;\n    use System.OS_Primitives;\n \n-   package SSL renames System.Soft_Links;\n-\n    ----------------\n    -- Local Data --\n    ----------------\n@@ -111,12 +97,10 @@ package body System.Task_Primitives.Operations is\n    --  A variable to hold Task_Id for the environment task\n \n    Unblocked_Signal_Mask : aliased sigset_t;\n-   --  The set of signals that should unblocked in all tasks\n+   --  The set of signals that should be unblocked in all tasks\n \n    --  The followings are internal configuration constants needed\n \n-   Priority_Ceiling_Emulation : constant Boolean := True;\n-\n    Next_Serial_Number : Task_Serial_Number := 100;\n    --  We start at 100, to reserve some special values for\n    --  using in error checking.\n@@ -127,9 +111,6 @@ package body System.Task_Primitives.Operations is\n    Dispatching_Policy : Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n-   FIFO_Within_Priorities : constant Boolean := Dispatching_Policy = 'F';\n-   --  Indicates whether FIFO_Within_Priorities is set\n-\n    --  The following are effectively constants, but they need to\n    --  be initialized by calling a pthread_ function.\n \n@@ -280,14 +261,11 @@ package body System.Task_Primitives.Operations is\n      (Prio : System.Any_Priority;\n       L    : access Lock)\n    is\n-      Result : Interfaces.C.int;\n+      pragma Unreferenced (Prio);\n \n+      Result : Interfaces.C.int;\n    begin\n-      if Priority_Ceiling_Emulation then\n-         L.Ceiling := Prio;\n-      end if;\n-\n-      Result := pthread_mutex_init (L.L'Access, Mutex_Attr'Access);\n+      Result := pthread_mutex_init (L, Mutex_Attr'Access);\n \n       pragma Assert (Result = 0 or else Result = ENOMEM);\n \n@@ -319,7 +297,7 @@ package body System.Task_Primitives.Operations is\n    procedure Finalize_Lock (L : access Lock) is\n       Result : Interfaces.C.int;\n    begin\n-      Result := pthread_mutex_destroy (L.L'Access);\n+      Result := pthread_mutex_destroy (L);\n       pragma Assert (Result = 0);\n    end Finalize_Lock;\n \n@@ -336,37 +314,13 @@ package body System.Task_Primitives.Operations is\n \n    procedure Write_Lock (L : access Lock; Ceiling_Violation : out Boolean) is\n       Result : Interfaces.C.int;\n-\n    begin\n-      if Priority_Ceiling_Emulation then\n-         declare\n-            Self_ID : constant Task_Id := Self;\n-\n-         begin\n-            if Self_ID.Common.LL.Active_Priority > L.Ceiling then\n-               Ceiling_Violation := True;\n-               return;\n-            end if;\n-\n-            L.Saved_Priority := Self_ID.Common.LL.Active_Priority;\n+      Result := pthread_mutex_lock (L);\n+      Ceiling_Violation := Result = EINVAL;\n \n-            if Self_ID.Common.LL.Active_Priority < L.Ceiling then\n-               Self_ID.Common.LL.Active_Priority := L.Ceiling;\n-            end if;\n-\n-            Result := pthread_mutex_lock (L.L'Access);\n-            pragma Assert (Result = 0);\n-            Ceiling_Violation := False;\n-         end;\n-\n-      else\n-         Result := pthread_mutex_lock (L.L'Access);\n-         Ceiling_Violation := Result = EINVAL;\n-\n-         --  Assume the cause of EINVAL is a priority ceiling violation\n+      --  Assume the cause of EINVAL is a priority ceiling violation\n \n-         pragma Assert (Result = 0 or else Result = EINVAL);\n-      end if;\n+      pragma Assert (Result = 0 or else Result = EINVAL);\n    end Write_Lock;\n \n    procedure Write_Lock\n@@ -405,25 +359,9 @@ package body System.Task_Primitives.Operations is\n \n    procedure Unlock (L : access Lock) is\n       Result : Interfaces.C.int;\n-\n    begin\n-      if Priority_Ceiling_Emulation then\n-         declare\n-            Self_ID : constant Task_Id := Self;\n-\n-         begin\n-            Result := pthread_mutex_unlock (L.L'Access);\n-            pragma Assert (Result = 0);\n-\n-            if Self_ID.Common.LL.Active_Priority > L.Saved_Priority then\n-               Self_ID.Common.LL.Active_Priority := L.Saved_Priority;\n-            end if;\n-         end;\n-\n-      else\n-         Result := pthread_mutex_unlock (L.L'Access);\n-         pragma Assert (Result = 0);\n-      end if;\n+      Result := pthread_mutex_unlock (L);\n+      pragma Assert (Result = 0);\n    end Unlock;\n \n    procedure Unlock (L : access RTS_Lock; Global_Lock : Boolean := False) is\n@@ -553,14 +491,8 @@ package body System.Task_Primitives.Operations is\n       Abs_Time   : Duration;\n       Request    : aliased timespec;\n       Result     : Interfaces.C.int;\n-   begin\n-\n-      --  Only the little window between deferring abort and\n-      --  locking Self_ID is the reason we need to\n-      --  check for pending abort and priority change below! :(\n-\n-      SSL.Abort_Defer.all;\n \n+   begin\n       if Single_Lock then\n          Lock_RTS;\n       end if;\n@@ -611,7 +543,6 @@ package body System.Task_Primitives.Operations is\n       end if;\n \n       Result := sched_yield;\n-      SSL.Abort_Undefer.all;\n    end Timed_Delay;\n \n    ---------------------\n@@ -678,12 +609,6 @@ package body System.Task_Primitives.Operations is\n    begin\n       T.Common.Current_Priority := Prio;\n \n-      if Priority_Ceiling_Emulation then\n-         if T.Common.LL.Active_Priority < Prio then\n-            T.Common.LL.Active_Priority := Prio;\n-         end if;\n-      end if;\n-\n       --  Priorities are in range 1 .. 99 on GNU/Linux, so we map\n       --  map 0 .. 31 to 1 .. 32\n \n@@ -693,7 +618,7 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_RR, Param'Access);\n \n-      elsif FIFO_Within_Priorities or else Time_Slice_Val = 0 then\n+      elsif Dispatching_Policy = 'F' or else Time_Slice_Val = 0 then\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_FIFO, Param'Access);\n \n@@ -1167,6 +1092,26 @@ package body System.Task_Primitives.Operations is\n    begin\n       Environment_Task_Id := Environment_Task;\n \n+      Interrupt_Management.Initialize;\n+\n+      --  Prepare the set of signals that should be unblocked in all tasks\n+\n+      Result := sigemptyset (Unblocked_Signal_Mask'Access);\n+      pragma Assert (Result = 0);\n+\n+      for J in Interrupt_Management.Interrupt_ID loop\n+         if System.Interrupt_Management.Keep_Unmasked (J) then\n+            Result := sigaddset (Unblocked_Signal_Mask'Access, Signal (J));\n+            pragma Assert (Result = 0);\n+         end if;\n+      end loop;\n+\n+      Result := pthread_mutexattr_init (Mutex_Attr'Access);\n+      pragma Assert (Result = 0);\n+\n+      Result := pthread_condattr_init (Cond_Attr'Access);\n+      pragma Assert (Result = 0);\n+\n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n \n       --  Initialize the global RTS lock\n@@ -1196,26 +1141,4 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Initialize;\n \n-begin\n-   declare\n-      Result : Interfaces.C.int;\n-   begin\n-      --  Prepare the set of signals that should unblocked in all tasks\n-\n-      Result := sigemptyset (Unblocked_Signal_Mask'Access);\n-      pragma Assert (Result = 0);\n-\n-      for J in Interrupt_Management.Interrupt_ID loop\n-         if System.Interrupt_Management.Keep_Unmasked (J) then\n-            Result := sigaddset (Unblocked_Signal_Mask'Access, Signal (J));\n-            pragma Assert (Result = 0);\n-         end if;\n-      end loop;\n-\n-      Result := pthread_mutexattr_init (Mutex_Attr'Access);\n-      pragma Assert (Result = 0);\n-\n-      Result := pthread_condattr_init (Cond_Attr'Access);\n-      pragma Assert (Result = 0);\n-   end;\n end System.Task_Primitives.Operations;"}, {"sha": "06313ed5fdfd747d279ce64071048b6fb6b15415", "filename": "gcc/ada/s-taprop-lynxos.adb", "status": "modified", "additions": 23, "deletions": 49, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-lynxos.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-lynxos.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-lynxos.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -44,36 +44,24 @@ pragma Polling (Off);\n with System.Tasking.Debug;\n --  used for Known_Tasks\n \n+with System.Interrupt_Management;\n+--  used for Keep_Unmasked\n+--           Abort_Task_Interrupt\n+--           Interrupt_ID\n+\n+with System.OS_Primitives;\n+--  used for Delay_Modes\n+\n with System.Task_Info;\n --  used for Task_Info_Type\n \n with Interfaces.C;\n --  used for int\n --           size_t\n \n-with System.Interrupt_Management;\n---  used for Keep_Unmasked\n---           Abort_Task_Interrupt\n---           Interrupt_ID\n-\n with System.Parameters;\n --  used for Size_Type\n \n-with System.Tasking;\n---  used for Ada_Task_Control_Block\n---           Task_Id\n-\n-with System.Soft_Links;\n---  used for Defer/Undefer_Abort\n-\n---  Note that we do not use System.Tasking.Initialization directly since\n---  this is a higher level package that we shouldn't depend on. For example\n---  when using the restricted run time, it is replaced by\n---  System.Tasking.Restricted.Stages.\n-\n-with System.OS_Primitives;\n---  used for Delay_Modes\n-\n with Unchecked_Deallocation;\n \n package body System.Task_Primitives.Operations is\n@@ -85,8 +73,6 @@ package body System.Task_Primitives.Operations is\n    use System.Parameters;\n    use System.OS_Primitives;\n \n-   package SSL renames System.Soft_Links;\n-\n    ----------------\n    -- Local Data --\n    ----------------\n@@ -127,9 +113,6 @@ package body System.Task_Primitives.Operations is\n    Dispatching_Policy : Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n-   FIFO_Within_Priorities : constant Boolean := Dispatching_Policy = 'F';\n-   --  Indicates whether FIFO_Within_Priorities is set\n-\n    Foreign_Task_Elaborated : aliased Boolean := True;\n    --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n@@ -560,12 +543,6 @@ package body System.Task_Primitives.Operations is\n       Result     : Interfaces.C.int;\n \n    begin\n-      --  Only the little window between deferring abort and\n-      --  locking Self_ID is the reason we need to\n-      --  check for pending abort and priority change below!\n-\n-      SSL.Abort_Defer.all;\n-\n       if Single_Lock then\n          Lock_RTS;\n       end if;\n@@ -632,7 +609,6 @@ package body System.Task_Primitives.Operations is\n       end if;\n \n       Result := sched_yield;\n-      SSL.Abort_Undefer.all;\n    end Timed_Delay;\n \n    ---------------------\n@@ -703,7 +679,7 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_RR, Param'Access);\n \n-      elsif FIFO_Within_Priorities or else Time_Slice_Val = 0 then\n+      elsif Dispatching_Policy = 'F' or else Time_Slice_Val = 0 then\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_FIFO, Param'Access);\n \n@@ -1302,6 +1278,20 @@ package body System.Task_Primitives.Operations is\n    begin\n       Environment_Task_Id := Environment_Task;\n \n+      Interrupt_Management.Initialize;\n+\n+      --  Prepare the set of signals that should unblocked in all tasks\n+\n+      Result := sigemptyset (Unblocked_Signal_Mask'Access);\n+      pragma Assert (Result = 0);\n+\n+      for J in Interrupt_Management.Interrupt_ID loop\n+         if System.Interrupt_Management.Keep_Unmasked (J) then\n+            Result := sigaddset (Unblocked_Signal_Mask'Access, Signal (J));\n+            pragma Assert (Result = 0);\n+         end if;\n+      end loop;\n+\n       --  Initialize the lock used to synchronize chain of all ATCBs\n \n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n@@ -1332,20 +1322,4 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Initialize;\n \n-begin\n-   declare\n-      Result : Interfaces.C.int;\n-   begin\n-      --  Prepare the set of signals that should unblocked in all tasks\n-\n-      Result := sigemptyset (Unblocked_Signal_Mask'Access);\n-      pragma Assert (Result = 0);\n-\n-      for J in Interrupt_Management.Interrupt_ID loop\n-         if System.Interrupt_Management.Keep_Unmasked (J) then\n-            Result := sigaddset (Unblocked_Signal_Mask'Access, Signal (J));\n-            pragma Assert (Result = 0);\n-         end if;\n-      end loop;\n-   end;\n end System.Task_Primitives.Operations;"}, {"sha": "c18bdb3bfc986751b2e8035cf2709edce8c9ef31", "filename": "gcc/ada/s-taprop-mingw.adb", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-mingw.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -43,6 +43,9 @@ pragma Polling (Off);\n with System.Tasking.Debug;\n --  used for Known_Tasks\n \n+with System.OS_Primitives;\n+--  used for Delay_Modes\n+\n with Interfaces.C;\n --  used for int\n --           size_t\n@@ -56,22 +59,6 @@ with System.OS_Interface;\n with System.Parameters;\n --  used for Size_Type\n \n-with System.Tasking;\n---  used for Ada_Task_Control_Block\n---           Task_Id\n-\n-with System.Soft_Links;\n---  used for Defer/Undefer_Abort\n---       to initialize TSD for a C thread, in function Self\n-\n---  Note that we do not use System.Tasking.Initialization directly since\n---  this is a higher level package that we shouldn't depend on. For example\n---  when using the restricted run time, it is replaced by\n---  System.Tasking.Restricted.Stages.\n-\n-with System.OS_Primitives;\n---  used for Delay_Modes\n-\n with System.Task_Info;\n --  used for Unspecified_Task_Info\n \n@@ -92,8 +79,6 @@ package body System.Task_Primitives.Operations is\n    --  permit to have more than 30 tasks running at the same time. Note that\n    --  we set the stack size for non tasking programs on System unit.\n \n-   package SSL renames System.Soft_Links;\n-\n    ----------------\n    -- Local Data --\n    ----------------\n@@ -112,9 +97,6 @@ package body System.Task_Primitives.Operations is\n    Dispatching_Policy : Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n-   FIFO_Within_Priorities : constant Boolean := Dispatching_Policy = 'F';\n-   --  Indicates whether FIFO_Within_Priorities is set\n-\n    Foreign_Task_Elaborated : aliased Boolean := True;\n    --  Used to identified fake tasks (i.e., non-Ada Threads)\n \n@@ -595,12 +577,6 @@ package body System.Task_Primitives.Operations is\n       Timedout   : Boolean;\n \n    begin\n-      --  Only the little window between deferring abort and\n-      --  locking Self_ID is the reason we need to\n-      --  check for pending abort and priority change below!\n-\n-      SSL.Abort_Defer.all;\n-\n       if Single_Lock then\n          Lock_RTS;\n       end if;\n@@ -651,7 +627,6 @@ package body System.Task_Primitives.Operations is\n       end if;\n \n       Yield;\n-      SSL.Abort_Undefer.all;\n    end Timed_Delay;\n \n    ------------\n@@ -702,7 +677,7 @@ package body System.Task_Primitives.Operations is\n         (T.Common.LL.Thread, Interfaces.C.int (Underlying_Priorities (Prio)));\n       pragma Assert (Res = True);\n \n-      if FIFO_Within_Priorities then\n+      if Dispatching_Policy = 'F' then\n \n          --  Annex D requirement [RM D.2.2 par. 9]:\n          --    If the task drops its priority due to the loss of inherited\n@@ -883,7 +858,7 @@ package body System.Task_Primitives.Operations is\n \n       Set_Priority (T, Priority);\n \n-      if Time_Slice_Val = 0 or else FIFO_Within_Priorities then\n+      if Time_Slice_Val = 0 or else Dispatching_Policy = 'F' then\n          --  Here we need Annex E semantics so we disable the NT priority\n          --  boost. A priority boost is temporarily given by the system to a\n          --  thread when it is taken out of a wait state.\n@@ -997,10 +972,11 @@ package body System.Task_Primitives.Operations is\n \n    begin\n       Environment_Task_Id := Environment_Task;\n+      OS_Primitives.Initialize;\n \n-      if Time_Slice_Val = 0 or else FIFO_Within_Priorities then\n+      if Time_Slice_Val = 0 or else Dispatching_Policy = 'F' then\n \n-         --  Here we need Annex E semantics, switch the current process to the\n+         --  Here we need Annex D semantics, switch the current process to the\n          --  High_Priority_Class.\n \n          Discard :="}, {"sha": "0455b404c86e67bbb9409d9d7dc51a6d9b7b1220", "filename": "gcc/ada/s-taprop-os2.adb", "status": "modified", "additions": 21, "deletions": 41, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-os2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-os2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-os2.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -43,37 +43,23 @@ pragma Polling (Off);\n with System.Tasking.Debug;\n --  used for Known_Tasks\n \n-with Interfaces.C;\n---  used for size_t\n-\n-with Interfaces.C.Strings;\n---  used for Null_Ptr\n+with System.OS_Primitives;\n+--  used for Delay_Modes\n+--           Clock\n \n with Interfaces.OS2Lib.Errors;\n with Interfaces.OS2Lib.Threads;\n with Interfaces.OS2Lib.Synchronization;\n \n-with System.Parameters;\n---  used for Size_Type\n+with Interfaces.C;\n+--  used for size_t\n \n-with System.Tasking;\n---  used for Task_Id\n+with Interfaces.C.Strings;\n+--  used for Null_Ptr\n \n with System.Parameters;\n --  used for Size_Type\n \n-with System.Soft_Links;\n---  used for Defer/Undefer_Abort\n-\n---  Note that we do not use System.Tasking.Initialization directly since\n---  this is a higher level package that we shouldn't depend on. For example\n---  when using the restricted run time, it is replaced by\n---  System.Tasking.Restricted.Stages.\n-\n-with System.OS_Primitives;\n---  used for Delay_Modes\n---           Clock\n-\n with Unchecked_Conversion;\n with Unchecked_Deallocation;\n \n@@ -82,7 +68,6 @@ package body System.Task_Primitives.Operations is\n    package IC  renames Interfaces.C;\n    package ICS renames Interfaces.C.Strings;\n    package OSP renames System.OS_Primitives;\n-   package SSL renames System.Soft_Links;\n \n    use Interfaces.OS2Lib;\n    use Interfaces.OS2Lib.Errors;\n@@ -599,12 +584,6 @@ package body System.Task_Primitives.Operations is\n       Count      : aliased ULONG;  --  Used to store dummy result\n \n    begin\n-      --  Only the little window between deferring abort and\n-      --  locking Self_ID is the reason we need to\n-      --  check for pending abort and priority change below! :(\n-\n-      SSL.Abort_Defer.all;\n-\n       if Single_Lock then\n          Lock_RTS;\n       else\n@@ -672,7 +651,6 @@ package body System.Task_Primitives.Operations is\n       end if;\n \n       System.OS_Interface.Yield;\n-      SSL.Abort_Undefer.all;\n    end Timed_Delay;\n \n    ------------\n@@ -1244,6 +1222,20 @@ package body System.Task_Primitives.Operations is\n    begin\n       Environment_Task_Id := Environment_Task;\n \n+      OS_Primitives.Initialize;\n+\n+      --  Initialize pointer to task local data.\n+      --  This is done once, for all tasks.\n+\n+      Must_Not_Fail (DosAllocThreadLocalMemory\n+         ((Thread_Local_Data'Size + 31) / 32,  --  nr of 32-bit words\n+          To_PPVOID (Thread_Local_Data_Ptr'Access)));\n+\n+      --  Initialize thread local data for main thread\n+\n+      Thread_Local_Data_Ptr.Self_ID := null;\n+      Thread_Local_Data_Ptr.Lock_Prio_Level := 0;\n+\n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n       --  Initialize the lock used to synchronize chain of all ATCBs\n \n@@ -1279,16 +1271,4 @@ package body System.Task_Primitives.Operations is\n       --  initialization needed for the environment task.\n    end Initialize;\n \n-begin\n-   --  Initialize pointer to task local data.\n-   --  This is done once, for all tasks.\n-\n-   Must_Not_Fail (DosAllocThreadLocalMemory\n-      ((Thread_Local_Data'Size + 31) / 32,  --  nr of 32-bit words\n-       To_PPVOID (Thread_Local_Data_Ptr'Access)));\n-\n-   --  Initialize thread local data for main thread\n-\n-   Thread_Local_Data_Ptr.Self_ID := null;\n-   Thread_Local_Data_Ptr.Lock_Prio_Level := 0;\n end System.Task_Primitives.Operations;"}, {"sha": "3ad2659f7a7cb17111027b8db309e4aa6bb7f8c5", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 24, "deletions": 50, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -49,36 +49,24 @@ pragma Polling (Off);\n with System.Tasking.Debug;\n --  used for Known_Tasks\n \n+with System.Interrupt_Management;\n+--  used for Keep_Unmasked\n+--           Abort_Task_Interrupt\n+--           Interrupt_ID\n+\n+with System.OS_Primitives;\n+--  used for Delay_Modes\n+\n with System.Task_Info;\n --  used for Task_Info_Type\n \n with Interfaces.C;\n --  used for int\n --           size_t\n \n-with System.Interrupt_Management;\n---  used for Keep_Unmasked\n---           Abort_Task_Interrupt\n---           Interrupt_ID\n-\n with System.Parameters;\n --  used for Size_Type\n \n-with System.Tasking;\n---  used for Ada_Task_Control_Block\n---           Task_Id\n-\n-with System.Soft_Links;\n---  used for Defer/Undefer_Abort\n-\n---  Note that we do not use System.Tasking.Initialization directly since\n---  this is a higher level package that we shouldn't depend on. For example\n---  when using the restricted run time, it is replaced by\n---  System.Tasking.Restricted.Stages.\n-\n-with System.OS_Primitives;\n---  used for Delay_Modes\n-\n with Unchecked_Conversion;\n with Unchecked_Deallocation;\n \n@@ -91,8 +79,6 @@ package body System.Task_Primitives.Operations is\n    use System.Parameters;\n    use System.OS_Primitives;\n \n-   package SSL renames System.Soft_Links;\n-\n    ----------------\n    -- Local Data --\n    ----------------\n@@ -133,9 +119,6 @@ package body System.Task_Primitives.Operations is\n    Dispatching_Policy : Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n-   FIFO_Within_Priorities : constant Boolean := Dispatching_Policy = 'F';\n-   --  Indicates whether FIFO_Within_Priorities is set.\n-\n    Foreign_Task_Elaborated : aliased Boolean := True;\n    --  Used to identified fake tasks (i.e., non-Ada Threads).\n \n@@ -603,12 +586,6 @@ package body System.Task_Primitives.Operations is\n       Result     : Interfaces.C.int;\n \n    begin\n-      --  Only the little window between deferring abort and\n-      --  locking Self_ID is the reason we need to\n-      --  check for pending abort and priority change below! :(\n-\n-      SSL.Abort_Defer.all;\n-\n       if Single_Lock then\n          Lock_RTS;\n       end if;\n@@ -673,7 +650,6 @@ package body System.Task_Primitives.Operations is\n       end if;\n \n       Result := sched_yield;\n-      SSL.Abort_Undefer.all;\n    end Timed_Delay;\n \n    ---------------------\n@@ -746,7 +722,7 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_RR, Param'Access);\n \n-      elsif FIFO_Within_Priorities or else Time_Slice_Val = 0 then\n+      elsif Dispatching_Policy = 'F' or else Time_Slice_Val = 0 then\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_FIFO, Param'Access);\n \n@@ -1038,7 +1014,7 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Abort_Task;\n \n-      ----------------\n+   ----------------\n    -- Initialize --\n    ----------------\n \n@@ -1323,6 +1299,20 @@ package body System.Task_Primitives.Operations is\n    begin\n       Environment_Task_Id := Environment_Task;\n \n+      Interrupt_Management.Initialize;\n+\n+      --  Prepare the set of signals that should unblocked in all tasks\n+\n+      Result := sigemptyset (Unblocked_Signal_Mask'Access);\n+      pragma Assert (Result = 0);\n+\n+      for J in Interrupt_Management.Interrupt_ID loop\n+         if System.Interrupt_Management.Keep_Unmasked (J) then\n+            Result := sigaddset (Unblocked_Signal_Mask'Access, Signal (J));\n+            pragma Assert (Result = 0);\n+         end if;\n+      end loop;\n+\n       --  Initialize the lock used to synchronize chain of all ATCBs.\n \n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n@@ -1352,20 +1342,4 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Initialize;\n \n-begin\n-   declare\n-      Result : Interfaces.C.int;\n-   begin\n-      --  Prepare the set of signals that should unblocked in all tasks\n-\n-      Result := sigemptyset (Unblocked_Signal_Mask'Access);\n-      pragma Assert (Result = 0);\n-\n-      for J in Interrupt_Management.Interrupt_ID loop\n-         if System.Interrupt_Management.Keep_Unmasked (J) then\n-            Result := sigaddset (Unblocked_Signal_Mask'Access, Signal (J));\n-            pragma Assert (Result = 0);\n-         end if;\n-      end loop;\n-   end;\n end System.Task_Primitives.Operations;"}, {"sha": "371f7411826f8558ced4511f323c9e9f4e61d8e1", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 77, "deletions": 112, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -43,44 +43,30 @@ pragma Polling (Off);\n with System.Tasking.Debug;\n --  used for Known_Tasks\n \n-with Ada.Exceptions;\n---  used for Raise_Exception\n+with System.Interrupt_Management;\n+--  used for Keep_Unmasked\n+--           Abort_Task_Interrupt\n+--           Interrupt_ID\n+\n+with System.OS_Primitives;\n+--  used for Delay_Modes\n \n+pragma Warnings (Off);\n with GNAT.OS_Lib;\n --  used for String_Access, Getenv\n \n+pragma Warnings (On);\n+\n with Interfaces.C;\n --  used for int\n --           size_t\n \n-with System.Interrupt_Management;\n---  used for Keep_Unmasked\n---           Abort_Task_Interrupt\n---           Interrupt_ID\n-\n with System.Parameters;\n --  used for Size_Type\n \n-with System.Tasking;\n---  used for Ada_Task_Control_Block\n---           Task_Id\n---           ATCB components and types\n-\n with System.Task_Info;\n --  to initialize Task_Info for a C thread, in function Self\n \n-with System.Soft_Links;\n---  used for Defer/Undefer_Abort\n---       to initialize TSD for a C thread, in function Self\n-\n---  Note that we do not use System.Tasking.Initialization directly since\n---  this is a higher level package that we shouldn't depend on. For example\n---  when using the restricted run time, it is replaced by\n---  System.Tasking.Restricted.Stages.\n-\n-with System.OS_Primitives;\n---  used for Delay_Modes\n-\n with Unchecked_Deallocation;\n \n package body System.Task_Primitives.Operations is\n@@ -90,11 +76,8 @@ package body System.Task_Primitives.Operations is\n    use Interfaces.C;\n    use System.OS_Interface;\n    use System.Parameters;\n-   use Ada.Exceptions;\n    use System.OS_Primitives;\n \n-   package SSL renames System.Soft_Links;\n-\n    ----------------\n    -- Local Data --\n    ----------------\n@@ -280,7 +263,6 @@ package body System.Task_Primitives.Operations is\n       Old_Set : aliased sigset_t;\n \n       Result : Interfaces.C.int;\n-      pragma Unreferenced (Result);\n \n    begin\n       --  It is not safe to raise an exception when using ZCX and the GCC\n@@ -425,11 +407,73 @@ package body System.Task_Primitives.Operations is\n    begin\n       Environment_Task_Id := Environment_Task;\n \n-      --  This is done in Enter_Task, but this is too late for the\n+      Interrupt_Management.Initialize;\n+\n+      --  Prepare the set of signals that should unblocked in all tasks\n+\n+      Result := sigemptyset (Unblocked_Signal_Mask'Access);\n+      pragma Assert (Result = 0);\n+\n+      for J in Interrupt_Management.Interrupt_ID loop\n+         if System.Interrupt_Management.Keep_Unmasked (J) then\n+            Result := sigaddset (Unblocked_Signal_Mask'Access, Signal (J));\n+            pragma Assert (Result = 0);\n+         end if;\n+      end loop;\n+\n+      if Dispatching_Policy = 'F' then\n+         declare\n+            Result      : Interfaces.C.long;\n+            Class_Info  : aliased struct_pcinfo;\n+            Secs, Nsecs : Interfaces.C.long;\n+\n+         begin\n+            --  If a pragma Time_Slice is specified, takes the value in account\n+\n+            if Time_Slice_Val > 0 then\n+               --  Convert Time_Slice_Val (microseconds) into seconds and\n+               --  nanoseconds\n+\n+               Secs := Time_Slice_Val / 1_000_000;\n+               Nsecs := (Time_Slice_Val rem 1_000_000) * 1_000;\n+\n+            --  Otherwise, default to no time slicing (i.e run until blocked)\n+\n+            else\n+               Secs := RT_TQINF;\n+               Nsecs := RT_TQINF;\n+            end if;\n+\n+            --  Get the real time class id.\n+\n+            Class_Info.pc_clname (1) := 'R';\n+            Class_Info.pc_clname (2) := 'T';\n+            Class_Info.pc_clname (3) := ASCII.NUL;\n+\n+            Result := priocntl (PC_VERSION, P_LWPID, P_MYID, PC_GETCID,\n+              Class_Info'Address);\n+\n+            --  Request the real time class\n+\n+            Prio_Param.pc_cid := Class_Info.pc_cid;\n+            Prio_Param.rt_pri := pri_t (Class_Info.rt_maxpri);\n+            Prio_Param.rt_tqsecs := Secs;\n+            Prio_Param.rt_tqnsecs := Nsecs;\n+\n+            Result := priocntl (PC_VERSION, P_LWPID, P_MYID, PC_SETPARMS,\n+              Prio_Param'Address);\n+\n+            Using_Real_Time_Class := Result /= -1;\n+         end;\n+      end if;\n+\n+      Specific.Initialize (Environment_Task);\n+\n+      --  The following is done in Enter_Task, but this is too late for the\n       --  Environment Task, since we need to call Self in Check_Locks when\n       --  the run time is compiled with assertions on.\n \n-      Specific.Initialize (Environment_Task);\n+      Specific.Set (Environment_Task);\n \n       --  Initialize the lock used to synchronize chain of all ATCBs.\n \n@@ -496,7 +540,7 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0 or else Result = ENOMEM);\n \n       if Result = ENOMEM then\n-         Raise_Exception (Storage_Error'Identity, \"Failed to allocate a lock\");\n+         raise Storage_Error with \"Failed to allocate a lock\";\n       end if;\n    end Initialize_Lock;\n \n@@ -513,7 +557,7 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0 or else Result = ENOMEM);\n \n       if Result = ENOMEM then\n-         Raise_Exception (Storage_Error'Identity, \"Failed to allocate a lock\");\n+         raise Storage_Error with \"Failed to allocate a lock\";\n       end if;\n    end Initialize_Lock;\n \n@@ -1244,12 +1288,6 @@ package body System.Task_Primitives.Operations is\n       Yielded    : Boolean := False;\n \n    begin\n-      --  Only the little window between deferring abort and\n-      --  locking Self_ID is the reason we need to\n-      --  check for pending abort and priority change below!\n-\n-      SSL.Abort_Defer.all;\n-\n       if Single_Lock then\n          Lock_RTS;\n       end if;\n@@ -1310,8 +1348,6 @@ package body System.Task_Primitives.Operations is\n       if not Yielded then\n          thr_yield;\n       end if;\n-\n-      SSL.Abort_Undefer.all;\n    end Timed_Delay;\n \n    ------------\n@@ -1643,7 +1679,7 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0 or else Result = ENOMEM);\n \n       if Result = ENOMEM then\n-         Raise_Exception (Storage_Error'Identity, \"Failed to allocate a lock\");\n+         raise Storage_Error with \"Failed to allocate a lock\";\n       end if;\n \n       --  Initialize internal condition variable\n@@ -1872,75 +1908,4 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Resume_Task;\n \n---  Package elaboration\n-\n-begin\n-   declare\n-      Result : Interfaces.C.int;\n-   begin\n-      --  Prepare the set of signals that should unblocked in all tasks\n-\n-      Result := sigemptyset (Unblocked_Signal_Mask'Access);\n-      pragma Assert (Result = 0);\n-\n-      for J in Interrupt_Management.Interrupt_ID loop\n-         if System.Interrupt_Management.Keep_Unmasked (J) then\n-            Result := sigaddset (Unblocked_Signal_Mask'Access, Signal (J));\n-            pragma Assert (Result = 0);\n-         end if;\n-      end loop;\n-\n-      --  We need the following code to support automatic creation of fake\n-      --  ATCB's for C threads that call the Ada run-time system, even if\n-      --  we use a faster way of getting Self for real Ada tasks.\n-\n-      Result := thr_keycreate (ATCB_Key'Access, System.Null_Address);\n-      pragma Assert (Result = 0);\n-   end;\n-\n-   if Dispatching_Policy = 'F' then\n-      declare\n-         Result      : Interfaces.C.long;\n-         Class_Info  : aliased struct_pcinfo;\n-         Secs, Nsecs : Interfaces.C.long;\n-\n-      begin\n-         --  If a pragma Time_Slice is specified, takes the value in account.\n-\n-         if Time_Slice_Val > 0 then\n-            --  Convert Time_Slice_Val (microseconds) into seconds and\n-            --  nanoseconds\n-\n-            Secs := Time_Slice_Val / 1_000_000;\n-            Nsecs := (Time_Slice_Val rem 1_000_000) * 1_000;\n-\n-         --  Otherwise, default to no time slicing (i.e run until blocked)\n-\n-         else\n-            Secs := RT_TQINF;\n-            Nsecs := RT_TQINF;\n-         end if;\n-\n-         --  Get the real time class id.\n-\n-         Class_Info.pc_clname (1) := 'R';\n-         Class_Info.pc_clname (2) := 'T';\n-         Class_Info.pc_clname (3) := ASCII.NUL;\n-\n-         Result := priocntl (PC_VERSION, P_LWPID, P_MYID, PC_GETCID,\n-           Class_Info'Address);\n-\n-         --  Request the real time class\n-\n-         Prio_Param.pc_cid := Class_Info.pc_cid;\n-         Prio_Param.rt_pri := pri_t (Class_Info.rt_maxpri);\n-         Prio_Param.rt_tqsecs := Secs;\n-         Prio_Param.rt_tqnsecs := Nsecs;\n-\n-         Result := priocntl (PC_VERSION, P_LWPID, P_MYID, PC_SETPARMS,\n-           Prio_Param'Address);\n-\n-         Using_Real_Time_Class := Result /= -1;\n-      end;\n-   end if;\n end System.Task_Primitives.Operations;"}, {"sha": "d4846d545e338baf5a154aff33d7a47b3b403149", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 26, "deletions": 53, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -43,6 +43,14 @@ pragma Polling (Off);\n with System.Tasking.Debug;\n --  used for Known_Tasks\n \n+with System.Interrupt_Management;\n+--  used for Keep_Unmasked\n+--           Abort_Task_Interrupt\n+--           Interrupt_ID\n+\n+with System.OS_Primitives;\n+--  used for Delay_Modes\n+\n with System.Task_Info;\n --  used for Task_Info_Type\n \n@@ -53,30 +61,9 @@ with Interfaces.C;\n --  used for int\n --           size_t\n \n-with System.Interrupt_Management;\n---  used for Keep_Unmasked\n---           Abort_Task_Interrupt\n---           Interrupt_ID\n-\n with System.Parameters;\n --  used for Size_Type\n \n-with System.Tasking;\n---  used for Ada_Task_Control_Block\n---           Task_Id\n---           ATCB components and types\n-\n-with System.Soft_Links;\n---  used for Defer/Undefer_Abort\n-\n---  Note that we do not use System.Tasking.Initialization directly since\n---  this is a higher level package that we shouldn't depend on. For example\n---  when using the restricted run time, it is replaced by\n---  System.Tasking.Restricted.Stages.\n-\n-with System.OS_Primitives;\n---  used for Delay_Modes\n-\n with Unchecked_Deallocation;\n \n package body System.Task_Primitives.Operations is\n@@ -88,8 +75,6 @@ package body System.Task_Primitives.Operations is\n    use System.Parameters;\n    use System.OS_Primitives;\n \n-   package SSL renames System.Soft_Links;\n-\n    ----------------\n    -- Local Data --\n    ----------------\n@@ -120,9 +105,6 @@ package body System.Task_Primitives.Operations is\n    Dispatching_Policy : Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n-   FIFO_Within_Priorities : constant Boolean := Dispatching_Policy = 'F';\n-   --  Indicates whether FIFO_Within_Priorities is set\n-\n    Curpid : pid_t;\n \n    Foreign_Task_Elaborated : aliased Boolean := True;\n@@ -527,12 +509,6 @@ package body System.Task_Primitives.Operations is\n       Result     : Interfaces.C.int;\n \n    begin\n-      --  Only the little window between deferring abort and\n-      --  locking Self_ID is the reason we need to\n-      --  check for pending abort and priority change below! :(\n-\n-      SSL.Abort_Defer.all;\n-\n       if Single_Lock then\n          Lock_RTS;\n       end if;\n@@ -585,7 +561,6 @@ package body System.Task_Primitives.Operations is\n       end if;\n \n       Yield;\n-      SSL.Abort_Undefer.all;\n    end Timed_Delay;\n \n    ---------------------\n@@ -661,7 +636,7 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_setschedparam\n                      (T.Common.LL.Thread, SCHED_RR, Param'Access);\n \n-      elsif FIFO_Within_Priorities or else Time_Slice_Val = 0 then\n+      elsif Dispatching_Policy = 'F' or else Time_Slice_Val = 0 then\n          Result := pthread_setschedparam\n                      (T.Common.LL.Thread, SCHED_FIFO, Param'Access);\n \n@@ -846,7 +821,7 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_attr_setschedpolicy\n                      (Attributes'Access, System.OS_Interface.SCHED_RR);\n \n-      elsif FIFO_Within_Priorities or else Time_Slice_Val = 0 then\n+      elsif Dispatching_Policy = 'F' or else Time_Slice_Val = 0 then\n          Result := pthread_attr_setschedpolicy\n                      (Attributes'Access, System.OS_Interface.SCHED_FIFO);\n \n@@ -1240,6 +1215,22 @@ package body System.Task_Primitives.Operations is\n    begin\n       Environment_Task_Id := Environment_Task;\n \n+      Interrupt_Management.Initialize;\n+\n+      --  Prepare the set of signals that should unblocked in all tasks\n+\n+      Result := sigemptyset (Unblocked_Signal_Mask'Access);\n+      pragma Assert (Result = 0);\n+\n+      for J in Interrupt_Management.Interrupt_ID loop\n+         if System.Interrupt_Management.Keep_Unmasked (J) then\n+            Result := sigaddset (Unblocked_Signal_Mask'Access, Signal (J));\n+            pragma Assert (Result = 0);\n+         end if;\n+      end loop;\n+\n+      Curpid := getpid;\n+\n       --  Initialize the lock used to synchronize chain of all ATCBs\n \n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);\n@@ -1269,22 +1260,4 @@ package body System.Task_Primitives.Operations is\n       end if;\n    end Initialize;\n \n-begin\n-   declare\n-      Result : Interfaces.C.int;\n-   begin\n-      --  Prepare the set of signals that should unblocked in all tasks\n-\n-      Result := sigemptyset (Unblocked_Signal_Mask'Access);\n-      pragma Assert (Result = 0);\n-\n-      for J in Interrupt_Management.Interrupt_ID loop\n-         if System.Interrupt_Management.Keep_Unmasked (J) then\n-            Result := sigaddset (Unblocked_Signal_Mask'Access, Signal (J));\n-            pragma Assert (Result = 0);\n-         end if;\n-      end loop;\n-   end;\n-\n-   Curpid := getpid;\n end System.Task_Primitives.Operations;"}, {"sha": "896dbe11c468e14e19cc20c7ed74897490125f29", "filename": "gcc/ada/s-taprop-vms.adb", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vms.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -43,28 +43,18 @@ pragma Polling (Off);\n with System.Tasking.Debug;\n --  used for Known_Tasks\n \n+with System.OS_Primitives;\n+--  used for Delay_Modes\n+\n with Interfaces.C;\n --  used for int\n --           size_t\n \n with System.Parameters;\n --  used for Size_Type\n \n-with System.Tasking;\n---  used for Ada_Task_Control_Block\n---           Task_Id\n-\n with System.Soft_Links;\n---  used for Defer/Undefer_Abort\n---           Set_Exc_Stack_Addr\n-\n---  Note that we do not use System.Tasking.Initialization directly since\n---  this is a higher level package that we shouldn't depend on. For example\n---  when using the restricted run time, it is replaced by\n---  System.Tasking.Restricted.Stages.\n-\n-with System.OS_Primitives;\n---  used for Delay_Modes\n+--  used for Get_Exc_Stack_Addr\n \n with Unchecked_Conversion;\n with Unchecked_Deallocation;\n@@ -105,9 +95,6 @@ package body System.Task_Primitives.Operations is\n    Dispatching_Policy : Character;\n    pragma Import (C, Dispatching_Policy, \"__gl_task_dispatching_policy\");\n \n-   FIFO_Within_Priorities : constant Boolean := Dispatching_Policy = 'F';\n-   --  Indicates whether FIFO_Within_Priorities is set.\n-\n    Foreign_Task_Elaborated : aliased Boolean := True;\n    --  Used to identified fake tasks (i.e., non-Ada Threads).\n \n@@ -156,6 +143,9 @@ package body System.Task_Primitives.Operations is\n \n    function To_Address is new Unchecked_Conversion (Task_Id, System.Address);\n \n+   function Get_Exc_Stack_Addr return Address;\n+   --  Replace System.Soft_Links.Get_Exc_Stack_Addr_NT\n+\n    procedure Timer_Sleep_AST (ID : Address);\n    --  Signal the condition variable when AST fires.\n \n@@ -492,17 +482,12 @@ package body System.Task_Primitives.Operations is\n       Yielded    : Boolean := False;\n \n    begin\n-      --  Only the little window between deferring abort and\n-      --  locking Self_ID is the reason we need to\n-      --  check for pending abort and priority change below!\n-\n       if Single_Lock then\n          Lock_RTS;\n       end if;\n \n       --  More comments required in body below ???\n \n-      SSL.Abort_Defer.all;\n       Write_Lock (Self_ID);\n \n       if Time /= 0.0 or else Mode /= Relative then\n@@ -562,8 +547,6 @@ package body System.Task_Primitives.Operations is\n          Result := sched_yield;\n          pragma Assert (Result = 0);\n       end if;\n-\n-      SSL.Abort_Undefer.all;\n    end Timed_Delay;\n \n    ---------------------\n@@ -629,7 +612,7 @@ package body System.Task_Primitives.Operations is\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_RR, Param'Access);\n \n-      elsif FIFO_Within_Priorities or else Time_Slice_Val = 0 then\n+      elsif Dispatching_Policy = 'F' or else Time_Slice_Val = 0 then\n          Result := pthread_setschedparam\n            (T.Common.LL.Thread, SCHED_FIFO, Param'Access);\n \n@@ -749,9 +732,6 @@ package body System.Task_Primitives.Operations is\n       if Result = 0 then\n          Succeeded := True;\n          Self_ID.Common.LL.Exc_Stack_Ptr := new Exc_Stack_T;\n-         SSL.Set_Exc_Stack_Addr\n-           (To_Address (Self_ID),\n-            Self_ID.Common.LL.Exc_Stack_Ptr (Exc_Stack_T'Last)'Address);\n \n       else\n          if not Single_Lock then\n@@ -766,6 +746,15 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0);\n    end Initialize_TCB;\n \n+   ------------------------\n+   -- Get_Exc_Stack_Addr --\n+   ------------------------\n+\n+   function Get_Exc_Stack_Addr return Address is\n+   begin\n+      return Self.Common.LL.Exc_Stack_Ptr (Exc_Stack_T'Last)'Address;\n+   end Get_Exc_Stack_Addr;\n+\n    -----------------\n    -- Create_Task --\n    -----------------\n@@ -1169,6 +1158,8 @@ package body System.Task_Primitives.Operations is\n    begin\n       Environment_Task_Id := Environment_Task;\n \n+      SSL.Get_Exc_Stack_Addr := Get_Exc_Stack_Addr'Access;\n+\n       --  Initialize the lock used to synchronize chain of all ATCBs\n \n       Initialize_Lock (Single_RTS_Lock'Access, RTS_Lock_Level);"}, {"sha": "bf98c5cbba26b1405feab37abcda8a5e5fb73092", "filename": "gcc/ada/s-taprop.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taprop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -44,8 +44,8 @@ with System.OS_Interface;\n --  used for Thread_Id\n \n package System.Task_Primitives.Operations is\n+   pragma Preelaborate;\n \n-   pragma Elaborate_Body;\n    package ST renames System.Tasking;\n    package OSI renames System.OS_Interface;\n \n@@ -356,8 +356,8 @@ package System.Task_Primitives.Operations is\n      (Self_ID : ST.Task_Id;\n       Time    : Duration;\n       Mode    : ST.Delay_Modes);\n-   --  Implement the semantics of the delay statement. It is assumed that\n-   --  the caller is not abort-deferred and does not hold any locks.\n+   --  Implement the semantics of the delay statement.\n+   --  The caller should be abort-deferred and should not hold any locks.\n \n    procedure Wakeup\n      (T      : ST.Task_Id;"}, {"sha": "f8d9a1fd096ea8e994ee4310b3f7c9934556cb82", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -505,6 +505,8 @@ package body System.Tasking.Restricted.Stages is\n \n    procedure Init_RTS is\n    begin\n+      Tasking.Initialize;\n+\n       --  Initialize lock used to implement mutual exclusion between all tasks\n \n       STPO.Initialize_Lock (Global_Task_Lock'Access, STPO.Global_Task_Level);"}, {"sha": "d0c230d1f285e646c11be595dbccd212cb216352", "filename": "gcc/ada/s-tasdeb.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tasdeb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tasdeb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasdeb.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -38,6 +38,7 @@ with System.Tasking;\n with System.OS_Interface;\n \n package System.Tasking.Debug is\n+   pragma Preelaborate;\n \n    ------------------------------------------\n    -- Application-level debugging routines --\n@@ -66,7 +67,7 @@ package System.Tasking.Debug is\n    -- General GDB support --\n    -------------------------\n \n-   Known_Tasks : array (0 .. 999) of Task_Id;\n+   Known_Tasks : array (0 .. 999) of Task_Id := (others => null);\n    --  Global array of tasks read by gdb, and updated by\n    --  Create_Task and Finalize_TCB\n "}, {"sha": "96a709d8190c11a0914918fa667d4a3fca6dc9df", "filename": "gcc/ada/s-tasinf-irix-athread.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tasinf-irix-athread.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tasinf-irix-athread.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf-irix-athread.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,11 +41,12 @@\n --  This unit may be used directly from an application program by providing\n --  an appropriate WITH, and the interface can be expected to remain stable.\n \n---  This is the SGI (libathread) specific version of this module.\n+--  This is the SGI (libathread) specific version of this module\n \n with System.OS_Interface;\n \n package System.Task_Info is\n+   pragma Preelaborate;\n    pragma Elaborate_Body;\n    --  To ensure that a body is allowed\n \n@@ -147,7 +148,7 @@ package System.Task_Info is\n    ANY_CPU : constant CPU_Number := CPU_Number'First;\n \n    type Non_Degrading_Priority is range 0 .. 255;\n-   --  Specification of IRIX Non Degrading Priorities.\n+   --  Specification of IRIX Non Degrading Priorities\n    --\n    --  WARNING: IRIX priorities have the reverse meaning of Ada priorities.\n    --           The lower the priority value, the greater the greater the\n@@ -203,8 +204,7 @@ package System.Task_Info is\n       CPU             : CPU_Number             := ANY_CPU;\n       Resident        : Page_Locking           := NOLOCK;\n       NDPRI           : Non_Degrading_Priority := NDP_NONE) return sproc_t;\n-   --  Allocates a sproc_t control structure and creates the\n-   --  corresponding sproc.\n+   --  Allocates a sproc_t control structure and creates corresponding sproc\n \n    Invalid_CPU_Number : exception;\n    Permission_Error   : exception;"}, {"sha": "eb8432d63b7564ebefdd2a6def1f5181ac2be28f", "filename": "gcc/ada/s-tasinf-irix.ads", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tasinf-irix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tasinf-irix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf-irix.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,14 +44,12 @@\n --  This is the IRIX (kernel threads) version of this package\n \n with Interfaces.C;\n-with System.OS_Interface;\n \n package System.Task_Info is\n+   pragma Preelaborate;\n    pragma Elaborate_Body;\n    --  To ensure that a body is allowed\n \n-   package OSI renames System.OS_Interface;\n-\n    -----------------------------------------\n    -- Implementation of Task_Info Feature --\n    -----------------------------------------\n@@ -91,27 +89,13 @@ package System.Task_Info is\n    subtype Thread_Scheduling_Priority is Integer range\n      No_Specified_Priority .. 255;\n \n-   function Min (Policy : Interfaces.C.int) return Interfaces.C.int\n-     renames OSI.sched_get_priority_min;\n-\n-   function Max (Policy : Interfaces.C.int) return Interfaces.C.int\n-     renames OSI.sched_get_priority_max;\n-\n-   subtype FIFO_Priority is Thread_Scheduling_Priority range\n-      Thread_Scheduling_Priority (Min (OSI.SCHED_FIFO)) ..\n-      Thread_Scheduling_Priority (Max (OSI.SCHED_FIFO));\n+   subtype FIFO_Priority is Thread_Scheduling_Priority range 0 .. 255;\n \n-   subtype RR_Priority is Thread_Scheduling_Priority range\n-      Thread_Scheduling_Priority (Min (OSI.SCHED_RR)) ..\n-      Thread_Scheduling_Priority (Max (OSI.SCHED_RR));\n+   subtype RR_Priority is Thread_Scheduling_Priority range 0 .. 255;\n \n-   subtype TS_Priority is Thread_Scheduling_Priority range\n-      Thread_Scheduling_Priority (Min (OSI.SCHED_TS)) ..\n-      Thread_Scheduling_Priority (Max (OSI.SCHED_TS));\n+   subtype TS_Priority is Thread_Scheduling_Priority range 1 .. 40;\n \n-   subtype OTHER_Priority is Thread_Scheduling_Priority range\n-      Thread_Scheduling_Priority (Min (OSI.SCHED_OTHER)) ..\n-      Thread_Scheduling_Priority (Max (OSI.SCHED_OTHER));\n+   subtype OTHER_Priority is Thread_Scheduling_Priority range 1 .. 40;\n \n    subtype CPU_Number is Integer range -1 .. Integer'Last;\n    ANY_CPU : constant CPU_Number := CPU_Number'First;"}, {"sha": "efa51b7e1665eb454a2c2061bb82a78c96f16525", "filename": "gcc/ada/s-tasinf-solaris.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tasinf-solaris.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tasinf-solaris.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf-solaris.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,6 +46,7 @@\n with System.OS_Interface;\n \n package System.Task_Info is\n+   pragma Preelaborate;\n    pragma Elaborate_Body;\n    --  To ensure that a body is allowed\n "}, {"sha": "895fde49a625b30f254c6ad5713d418b0b5be5cd", "filename": "gcc/ada/s-tasinf-tru64.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tasinf-tru64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tasinf-tru64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf-tru64.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                           (Compiler Interface)                           --\n --                                                                          --\n---         Copyright (C) 1998-2003 Free Software Foundation, Inc.           --\n+--         Copyright (C) 1998-2005 Free Software Foundation, Inc.           --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -45,6 +45,7 @@\n --  This is a DEC Unix 4.0d version of this package.\n \n package System.Task_Info is\n+   pragma Preelaborate;\n    pragma Elaborate_Body;\n    --  To ensure that a body is allowed\n "}, {"sha": "8d8b2dd9da2de1f77de0a1fe3132832cf4e80fef", "filename": "gcc/ada/s-tasinf.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tasinf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tasinf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasinf.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,6 +42,7 @@\n --  an appropriate WITH, and the interface can be expected to remain stable.\n \n package System.Task_Info is\n+   pragma Preelaborate;\n    pragma Elaborate_Body;\n    --  To ensure that a body is allowed\n "}, {"sha": "fd76b575761467145f97a4c812ad53d1e4b8387d", "filename": "gcc/ada/s-taskin.adb", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -48,6 +48,21 @@ package body System.Tasking is\n \n    package STPO renames System.Task_Primitives.Operations;\n \n+   ---------------------\n+   -- Detect_Blocking --\n+   ---------------------\n+\n+   function Detect_Blocking return Boolean is\n+      GL_Detect_Blocking : Integer;\n+      pragma Import (C, GL_Detect_Blocking, \"__gl_detect_blocking\");\n+      --  Global variable exported by the binder generated file.\n+      --  A value equal to 1 indicates that pragma Detect_Blocking is active,\n+      --  while 0 is used for the pragma not being present.\n+\n+   begin\n+      return GL_Detect_Blocking = 1;\n+   end Detect_Blocking;\n+\n    ----------\n    -- Self --\n    ----------\n@@ -116,35 +131,34 @@ package body System.Tasking is\n       All_Tasks_List := T;\n    end Initialize_ATCB;\n \n+   ----------------\n+   -- Initialize --\n+   ----------------\n+\n    Main_Task_Image : constant String := \"main_task\";\n-   --  Image of environment task.\n+   --  Image of environment task\n \n    Main_Priority : Integer;\n    pragma Import (C, Main_Priority, \"__gl_main_priority\");\n    --  Priority for main task. Note that this is of type Integer, not\n    --  Priority, because we use the value -1 to indicate the default\n    --  main priority, and that is of course not in Priority'range.\n \n-   ----------------------------\n-   -- Tasking Initialization --\n-   ----------------------------\n-\n-   --  This block constitutes the first part of the initialization of the\n-   --  GNARL. This includes creating data structures to make the initial thread\n-   --  into the environment task. The last part of the initialization is done\n-   --  in System.Tasking.Initialization or System.Tasking.Restricted.Stages.\n-   --  All the initializations used to be in Tasking.Initialization, but this\n-   --  is no longer possible with the run time simplification (including\n-   --  optimized PO and the restricted run time) since one cannot rely on\n-   --  System.Tasking.Initialization being present, as was done before.\n-\n-begin\n-   declare\n+   Initialized : Boolean := False;\n+   --  Used to prevent multiple calls to Initialize\n+\n+   procedure Initialize is\n       T             : Task_Id;\n       Success       : Boolean;\n       Base_Priority : Any_Priority;\n \n    begin\n+      if Initialized then\n+         return;\n+      end if;\n+\n+      Initialized := True;\n+\n       --  Initialize Environment Task\n \n       if Main_Priority = Unspecified_Priority then\n@@ -170,5 +184,6 @@ begin\n       --  in ravenscar mode. Rest of the initialization is done in Init_RTS.\n \n       T.Entry_Calls (1).Self := T;\n-   end;\n+   end Initialize;\n+\n end System.Tasking;"}, {"sha": "e979b7ab13bac25b503b18bdb8df08684ea20270", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -54,6 +54,7 @@ with System.Task_Primitives;\n with Unchecked_Conversion;\n \n package System.Tasking is\n+   pragma Preelaborate;\n \n    -------------------\n    -- Locking Rules --\n@@ -342,8 +343,9 @@ package System.Tasking is\n \n    type Access_Boolean is access all Boolean;\n \n-   Detect_Blocking : constant Boolean;\n-   --  Boolean constant set True iff Detect_Blocking is active\n+   function Detect_Blocking return Boolean;\n+   pragma Inline (Detect_Blocking);\n+   --  Return whether the Detect_Blocking pragma is enabled.\n \n    ----------------------------------------------\n    -- Ada_Task_Control_Block (ATCB) definition --\n@@ -977,9 +979,19 @@ package System.Tasking is\n       --  has exclusive access to this field.\n    end record;\n \n-   ---------------------\n-   -- Initialize_ATCB --\n-   ---------------------\n+   --------------------\n+   -- Initialization --\n+   --------------------\n+\n+   procedure Initialize;\n+   --  This procedure constitutes the first part of the initialization of the\n+   --  GNARL. This includes creating data structures to make the initial thread\n+   --  into the environment task. The last part of the initialization is done\n+   --  in System.Tasking.Initialization or System.Tasking.Restricted.Stages.\n+   --  All the initializations used to be in Tasking.Initialization, but this\n+   --  is no longer possible with the run time simplification (including\n+   --  optimized PO and the restricted run time) since one cannot rely on\n+   --  System.Tasking.Initialization being present, as was done before.\n \n    procedure Initialize_ATCB\n      (Self_ID          : Task_Id;\n@@ -999,14 +1011,6 @@ package System.Tasking is\n private\n    Null_Task : constant Task_Id := null;\n \n-   GL_Detect_Blocking : Integer;\n-   pragma Import (C, GL_Detect_Blocking, \"__gl_detect_blocking\");\n-   --  Global variable exported by the binder generated file. A value equal to\n-   --  1 indicates that pragma Detect_Blocking is active, while 0 is used for\n-   --  the pragma not being present.\n-\n-   Detect_Blocking : constant Boolean := GL_Detect_Blocking = 1;\n-\n    type Activation_Chain is record\n       T_ID : Task_Id;\n    end record;"}, {"sha": "311df3fcae28b018880e1fe2f1997c6a9de6338f", "filename": "gcc/ada/s-taspri-hpux-dce.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-hpux-dce.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-hpux-dce.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-hpux-dce.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -45,6 +45,7 @@ with System.OS_Interface;\n --           pthread_t\n \n package System.Task_Primitives is\n+   pragma Preelaborate;\n \n    type Lock is limited private;\n    --  Should be used for implementation of protected objects"}, {"sha": "cb426e155423403e3315a96cc450ed3df41e7623", "filename": "gcc/ada/s-taspri-linux.ads", "status": "removed", "additions": 0, "deletions": 118, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca88769356a174361bf9c343dcbe8ea41192a662/gcc%2Fada%2Fs-taspri-linux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca88769356a174361bf9c343dcbe8ea41192a662/gcc%2Fada%2Fs-taspri-linux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-linux.ads?ref=ca88769356a174361bf9c343dcbe8ea41192a662", "patch": "@@ -1,118 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                GNU ADA RUN-TIME LIBRARY (GNARL) COMPONENTS               --\n---                                                                          --\n---                 S Y S T E M . T A S K _ P R I M I T I V E S              --\n---                                                                          --\n---                                  S p e c                                 --\n---                                                                          --\n---           Copyright (C) 1991-2005 Free Software Foundation, Inc.         --\n---                                                                          --\n--- GNARL is free software; you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion. GNARL is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNARL; see file COPYING.  If not, write --\n--- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n--- Boston, MA 02110-1301, USA.                                              --\n---                                                                          --\n--- As a special exception,  if other files  instantiate  generics from this --\n--- unit, or you link  this unit with other files  to produce an executable, --\n--- this  unit  does not  by itself cause  the resulting  executable  to  be --\n--- covered  by the  GNU  General  Public  License.  This exception does not --\n--- however invalidate  any other reasons why  the executable file  might be --\n--- covered by the  GNU Public License.                                      --\n---                                                                          --\n--- GNARL was developed by the GNARL team at Florida State University.       --\n--- Extensive contributions were provided by Ada Core Technologies, Inc.     --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  This is the GNU/Linux (GNU/LinuxThreads) version of this package\n-\n---  This package provides low-level support for most tasking features\n-\n-pragma Polling (Off);\n---  Turn off polling, we do not want ATC polling to take place during\n---  tasking operations. It causes infinite loops and other problems.\n-\n-with System.OS_Interface;\n---  used for pthread_mutex_t\n---           pthread_cond_t\n---           pthread_t\n-\n-package System.Task_Primitives is\n-\n-   type Lock is limited private;\n-   --  Should be used for implementation of protected objects\n-\n-   type RTS_Lock is limited private;\n-   --  Should be used inside the runtime system. The difference between Lock\n-   --  and the RTS_Lock is that the later one serves only as a semaphore so\n-   --  that do not check for ceiling violations.\n-\n-   type Suspension_Object is limited private;\n-   --  Should be used for the implementation of Ada.Synchronous_Task_Control\n-\n-   type Task_Body_Access is access procedure;\n-   --  Pointer to the task body's entry point (or possibly a wrapper\n-   --  declared local to the GNARL).\n-\n-   type Private_Data is limited private;\n-   --  Any information that the GNULLI needs maintained on a per-task basis.\n-   --  A component of this type is guaranteed to be included in the\n-   --  Ada_Task_Control_Block.\n-\n-private\n-\n-   type Prio_Array_Type is array (System.Any_Priority) of Integer;\n-\n-   type Lock is record\n-      L              : aliased System.OS_Interface.pthread_mutex_t;\n-      Ceiling        : System.Any_Priority := System.Any_Priority'First;\n-      Saved_Priority : System.Any_Priority := System.Any_Priority'First;\n-   end record;\n-\n-   type RTS_Lock is new System.OS_Interface.pthread_mutex_t;\n-\n-   type Suspension_Object is record\n-      State : Boolean;\n-      pragma Atomic (State);\n-      --  Boolean that indicates whether the object is open. This field is\n-      --  marked Atomic to ensure that we can read its value without locking\n-      --  the access to the Suspension_Object.\n-\n-      Waiting : Boolean;\n-      --  Flag showing if there is a task already suspended on this object\n-\n-      L : aliased System.OS_Interface.pthread_mutex_t;\n-      --  Protection for ensuring mutual exclusion on the Suspension_Object\n-\n-      CV : aliased System.OS_Interface.pthread_cond_t;\n-      --  Condition variable used to queue threads until the condition is\n-      --  signaled.\n-   end record;\n-\n-   type Private_Data is record\n-      Thread      : aliased System.OS_Interface.pthread_t;\n-      pragma Atomic (Thread);\n-      --  Thread field may be updated by two different threads of control.\n-      --  (See, Enter_Task and Create_Task in s-taprop.adb).\n-      --  They put the same value (thr_self value). We do not want to\n-      --  use lock on those operations and the only thing we have to\n-      --  make sure is that they are updated in atomic fashion.\n-\n-      CV : aliased System.OS_Interface.pthread_cond_t;\n-\n-      L : aliased RTS_Lock;\n-      --  Protection for all components is lock L\n-\n-      Active_Priority : System.Any_Priority := System.Any_Priority'First;\n-      --  Simulated active priority, used only if Priority_Ceiling_Support\n-      --  is True.\n-   end record;\n-\n-end System.Task_Primitives;"}, {"sha": "03eb447ac3f3c805c6928cca70da1eed68ae9594", "filename": "gcc/ada/s-taspri-lynxos.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-lynxos.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-lynxos.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-lynxos.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -32,7 +32,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This is a LynxOS version of this package, derived from 7staspri.ads\n+--  This is a LynxOS version of this package, derived from s-taspri-posix.ads\n \n pragma Polling (Off);\n --  Turn off polling, we do not want ATC polling to take place during\n@@ -44,6 +44,7 @@ with System.OS_Interface;\n --           pthread_t\n \n package System.Task_Primitives is\n+   pragma Preelaborate;\n \n    type Lock is limited private;\n    --  Should be used for implementation of protected objects"}, {"sha": "8af68156a1002c45486f15590be15e198437bbab", "filename": "gcc/ada/s-taspri-mingw.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-mingw.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -43,6 +43,7 @@ with System.OS_Interface;\n --           pthread_t\n \n package System.Task_Primitives is\n+   pragma Preelaborate;\n \n    type Lock is limited private;\n    --  Should be used for implementation of protected objects"}, {"sha": "502260e96d2edaa2d7f8c2417b73a4497bbb5ab7", "filename": "gcc/ada/s-taspri-os2.ads", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-os2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-os2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-os2.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -44,15 +44,12 @@ with Interfaces.OS2Lib.Threads;\n with Interfaces.OS2Lib.Synchronization;\n \n package System.Task_Primitives is\n-\n    pragma Preelaborate;\n \n-   --  Why are these commented out ???\n-\n---   type Lock is limited private;\n+   type Lock is limited private;\n    --  Should be used for implementation of protected objects.\n \n---   type RTS_Lock is limited private;\n+   type RTS_Lock is limited private;\n    --  Should be used inside the runtime system.\n    --  The difference between Lock and the RTS_Lock is that the later\n    --  one serves only as a semaphore so that do not check for\n@@ -62,12 +59,12 @@ package System.Task_Primitives is\n    --  Pointer to the task body's entry point (or possibly a wrapper\n    --  declared local to the GNARL).\n \n---   type Private_Data is limited private;\n+   type Private_Data is limited private;\n    --  Any information that the GNULLI needs maintained on a per-task\n    --  basis.  A component of this type is guaranteed to be included\n    --  in the Ada_Task_Control_Block.\n \n---  private (why commented out???)\n+private\n \n    type Lock is record\n       Mutex          : aliased Interfaces.OS2Lib.Synchronization.HMTX;"}, {"sha": "22bad81b4e0f2886fa6a03e27e14e3e8645ee451", "filename": "gcc/ada/s-taspri-posix.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-posix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-posix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-posix.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -46,6 +46,7 @@ with System.OS_Interface;\n --           pthread_t\n \n package System.Task_Primitives is\n+   pragma Preelaborate;\n \n    type Lock is limited private;\n    --  Should be used for implementation of protected objects"}, {"sha": "db281adc32e352642f0fa6a738909db3630123a7", "filename": "gcc/ada/s-taspri-tru64.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-tru64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-tru64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-tru64.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -49,6 +49,7 @@ with System.OS_Interface;\n --           pthread_t\n \n package System.Task_Primitives is\n+   pragma Preelaborate;\n \n    type Lock is limited private;\n    --  Should be used for implementation of protected objects"}, {"sha": "7f3d8eae3e8a4392edda4e0c768434b4c9545c82", "filename": "gcc/ada/s-taspri-vms.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-vms.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -49,6 +49,7 @@ with System.OS_Interface;\n --           pthread_t\n \n package System.Task_Primitives is\n+   pragma Preelaborate;\n \n    type Lock is limited private;\n    --  Should be used for implementation of protected objects"}, {"sha": "dad195fe0140e7b697193b0b500a795cb0bea8f8", "filename": "gcc/ada/s-taspri-vxworks.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-taspri-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-vxworks.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -40,6 +40,7 @@ pragma Polling (Off);\n with System.OS_Interface;\n \n package System.Task_Primitives is\n+   pragma Preelaborate;\n \n    type Lock is limited private;\n    --  Should be used for implementation of protected objects"}, {"sha": "1ac7edb2dd06436f73844d9095774c4fd4b4b1e1", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -846,8 +846,6 @@ package body System.Tasking.Stages is\n       SSL.Set_Jmpbuf_Address := SSL.Set_Jmpbuf_Address_NT'Access;\n       SSL.Get_Sec_Stack_Addr := SSL.Get_Sec_Stack_Addr_NT'Access;\n       SSL.Set_Sec_Stack_Addr := SSL.Set_Sec_Stack_Addr_NT'Access;\n-      SSL.Get_Exc_Stack_Addr := SSL.Get_Exc_Stack_Addr_NT'Access;\n-      SSL.Set_Exc_Stack_Addr := SSL.Set_Exc_Stack_Addr_NT'Access;\n       SSL.Check_Abort_Status := SSL.Check_Abort_Status_NT'Access;\n       SSL.Get_Stack_Info     := SSL.Get_Stack_Info_NT'Access;\n \n@@ -1135,7 +1133,6 @@ package body System.Tasking.Stages is\n       procedure To_Stderr (S : String);\n       pragma Import (Ada, To_Stderr, \"__gnat_to_stderr\");\n \n-      use System.Task_Info;\n       use System.Soft_Links;\n       use System.Standard_Library;\n "}, {"sha": "176b186ae9c365f378102bbaa89626cd60f82bc6", "filename": "gcc/ada/s-tpopsp-solaris.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tpopsp-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tpopsp-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpopsp-solaris.adb?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -42,9 +42,10 @@ package body Specific is\n    ----------------\n \n    procedure Initialize (Environment_Task : Task_Id) is\n+      pragma Unreferenced (Environment_Task);\n       Result : Interfaces.C.int;\n    begin\n-      Result := thr_setspecific (ATCB_Key, To_Address (Environment_Task));\n+      Result := thr_keycreate (ATCB_Key'Access, System.Null_Address);\n       pragma Assert (Result = 0);\n    end Initialize;\n "}, {"sha": "2c6d00984b35f3f59b876b5b626fb4747fe6b7f8", "filename": "gcc/ada/s-traces.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-traces.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-traces.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traces.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -55,6 +55,7 @@\n --  To add a new target, just adapt System.Traces.Send to your own purpose.\n \n package System.Traces is\n+   pragma Preelaborate;\n \n    type Trace_T is\n      ("}, {"sha": "ab90478b0b405a244a6a44d9f30f8c0d7d16541e", "filename": "gcc/ada/s-traent-vms.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-traent-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-traent-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traent-vms.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -38,6 +38,7 @@\n --  This is the Alpha/OpenVMS version of this package\n \n package System.Traceback_Entries is\n+   pragma Preelaborate;\n \n    type Traceback_Entry is record\n       PC : System.Address;"}, {"sha": "384c9a0704163418490fdc141a114c98474f0e43", "filename": "gcc/ada/s-traent.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-traent.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-traent.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traent.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -41,12 +41,13 @@\n --  address of a call instruction part of the call-chain.\n \n package System.Traceback_Entries is\n+   pragma Preelaborate;\n \n    subtype Traceback_Entry is System.Address;\n-   --  This subtype defines what each traceback array entry contains.\n+   --  This subtype defines what each traceback array entry contains\n \n    Null_TB_Entry : constant Traceback_Entry := System.Null_Address;\n-   --  This is the value to be used when initializing an entry.\n+   --  This is the value to be used when initializing an entry\n \n    function PC_For (TB_Entry : Traceback_Entry) return System.Address;\n    pragma Inline (PC_For);\n@@ -55,6 +56,6 @@ package System.Traceback_Entries is\n \n    function TB_Entry_For (PC : System.Address) return Traceback_Entry;\n    pragma Inline (TB_Entry_For);\n-   --  Returns an entry representing a frame for a call instruction at PC.\n+   --  Returns an entry representing a frame for a call instruction at PC\n \n end System.Traceback_Entries;"}, {"sha": "5a0b3348e8f28eda92cff5f6bd762f7abe10c05f", "filename": "gcc/ada/s-tratas.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tratas.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b91d88ea1deb4d40b294c12536cbfc9f8137d54/gcc%2Fada%2Fs-tratas.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tratas.ads?ref=3b91d88ea1deb4d40b294c12536cbfc9f8137d54", "patch": "@@ -41,6 +41,7 @@\n with System.Tasking;\n \n package System.Traces.Tasking is\n+   pragma Preelaborate;\n \n    package ST renames System.Tasking;\n "}]}