{"sha": "d395d8e771fce88e46e5c3908e53669adb5b71c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM5NWQ4ZTc3MWZjZTg4ZTQ2ZTVjMzkwOGU1MzY2OWFkYjViNzFjNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-04-20T06:18:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-04-20T06:18:30Z"}, "message": "PR c++/90171 - ICE with destroying delete with size_t parm.\n\nThe problem here was that \"second parm is size_t\" is false for a destroying\nsized delete.  So let's introduce sized_deallocation_fn_p when that's what\nwe're asking, and reserve second_parm_is_size_t for the specific case of\nwarning about possible confusion with placement delete.\n\n\t* call.c (sized_deallocation_fn_p): New.  Use it instead of\n\tsecond_parm_is_size_t in most cases.\n\t(second_parm_is_size_t): Don't check for aligned.\n\nFrom-SVN: r270467", "tree": {"sha": "76e47dc2a375b689c261b98bd13908eab3711885", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76e47dc2a375b689c261b98bd13908eab3711885"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d395d8e771fce88e46e5c3908e53669adb5b71c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d395d8e771fce88e46e5c3908e53669adb5b71c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d395d8e771fce88e46e5c3908e53669adb5b71c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d395d8e771fce88e46e5c3908e53669adb5b71c4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9eff98e6fd81e72f662f721f31b99d6f8db5f7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9eff98e6fd81e72f662f721f31b99d6f8db5f7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9eff98e6fd81e72f662f721f31b99d6f8db5f7e"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "9e2c46624de4067a4f6daacebd20a68e591687fb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d395d8e771fce88e46e5c3908e53669adb5b71c4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d395d8e771fce88e46e5c3908e53669adb5b71c4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d395d8e771fce88e46e5c3908e53669adb5b71c4", "patch": "@@ -1,3 +1,10 @@\n+2019-04-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/90171 - ICE with destroying delete with size_t parm.\n+\t* call.c (sized_deallocation_fn_p): New.  Use it instead of\n+\tsecond_parm_is_size_t in most cases.\n+\t(second_parm_is_size_t): Don't check for aligned.\n+\n 2019-04-19  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/89900"}, {"sha": "f27a80dfa3b420f0bd5ab7d5e01439d00b17c627", "filename": "gcc/cp/call.c", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d395d8e771fce88e46e5c3908e53669adb5b71c4/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d395d8e771fce88e46e5c3908e53669adb5b71c4/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d395d8e771fce88e46e5c3908e53669adb5b71c4", "patch": "@@ -6307,10 +6307,6 @@ second_parm_is_size_t (tree fn)\n   t = TREE_CHAIN (t);\n   if (t == void_list_node)\n     return true;\n-  if (aligned_new_threshold && t\n-      && same_type_p (TREE_VALUE (t), align_type_node)\n-      && TREE_CHAIN (t) == void_list_node)\n-    return true;\n   return false;\n }\n \n@@ -6383,6 +6379,26 @@ aligned_deallocation_fn_p (tree t)\n   return false;\n }\n \n+/* Returns true if FN is a usual deallocation fn with a size_t parameter.  */\n+\n+static bool\n+sized_deallocation_fn_p (tree fn)\n+{\n+  tree t = FUNCTION_ARG_CHAIN (fn);\n+  if (destroying_delete_p (fn))\n+    t = TREE_CHAIN (t);\n+  if (!t || !same_type_p (TREE_VALUE (t), size_type_node))\n+    return false;\n+  t = TREE_CHAIN (t);\n+  if (t == void_list_node)\n+    return true;\n+  if (aligned_new_threshold && t\n+      && same_type_p (TREE_VALUE (t), align_type_node)\n+      && TREE_CHAIN (t) == void_list_node)\n+    return true;\n+  return false;\n+}\n+\n /* Returns true iff T, an element of an OVERLOAD chain, is a usual\n    deallocation function (3.7.4.2 [basic.stc.dynamic.deallocation]).  */\n \n@@ -6395,13 +6411,11 @@ usual_deallocation_fn_p (tree t)\n       || primary_template_specialization_p (t))\n     return false;\n \n-  /* If a class T has a member deallocation function named operator delete\n-     with exactly one parameter, then that function is a usual\n-     (non-placement) deallocation function. If class T does not declare\n-     such an operator delete but does declare a member deallocation\n-     function named operator delete with exactly two parameters, the second\n-     of which has type std::size_t (18.2), then this function is a usual\n-     deallocation function.  */\n+  /* A usual deallocation function is a deallocation function whose parameters\n+     after the first are\n+     - optionally, a parameter of type std::destroying_delete_t, then\n+     - optionally, a parameter of type std::size_t, then\n+     - optionally, a parameter of type std::align_val_t.  */\n   bool global = DECL_NAMESPACE_SCOPE_P (t);\n   tree chain = FUNCTION_ARG_CHAIN (t);\n   if (!chain)\n@@ -6410,7 +6424,7 @@ usual_deallocation_fn_p (tree t)\n     chain = TREE_CHAIN (chain);\n   if (chain == void_list_node\n       || ((!global || flag_sized_deallocation)\n-\t  && second_parm_is_size_t (t)))\n+\t  && sized_deallocation_fn_p (t)))\n     return true;\n   if (aligned_deallocation_fn_p (t))\n     return true;\n@@ -6625,8 +6639,8 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t\t  /* We need a cookie to determine the array size.  */\n \t\t  want_size = false;\n \t      }\n-\t    bool fn_size = second_parm_is_size_t (fn);\n-\t    bool elt_size = second_parm_is_size_t (elt);\n+\t    bool fn_size = sized_deallocation_fn_p (fn);\n+\t    bool elt_size = sized_deallocation_fn_p (elt);\n \t    gcc_assert (fn_size != elt_size);\n \t    if (want_size == elt_size)\n \t      fn = elt;\n@@ -6682,7 +6696,7 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t  args->quick_push (addr);\n \t  if (destroying)\n \t    args->quick_push (destroying);\n-\t  if (second_parm_is_size_t (fn))\n+\t  if (sized_deallocation_fn_p (fn))\n \t    args->quick_push (size);\n \t  if (aligned_deallocation_fn_p (fn))\n \t    {"}, {"sha": "c122cee4942ac482b303e604c97e44460fd8cc18", "filename": "gcc/testsuite/g++.dg/cpp2a/destroying-delete4.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d395d8e771fce88e46e5c3908e53669adb5b71c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d395d8e771fce88e46e5c3908e53669adb5b71c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete4.C?ref=d395d8e771fce88e46e5c3908e53669adb5b71c4", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/90171\n+// { dg-do compile { target c++2a } }\n+\n+#include <new>\n+\n+struct A {\n+  void operator delete(A*, std::destroying_delete_t, std::align_val_t);\n+  void operator delete(A*, std::destroying_delete_t, std::size_t, std::align_val_t);\n+};\n+\n+void delete_A(A *a) { delete a; }"}]}