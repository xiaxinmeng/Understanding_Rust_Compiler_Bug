{"sha": "76b382d9a042b307efa3d87c68b692c2c51d3197", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZiMzgyZDlhMDQyYjMwN2VmYTNkODdjNjhiNjkyYzJjNTFkMzE5Nw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-05-29T09:35:57Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-29T09:35:57Z"}, "message": "[Ada] Minor cleanup in repinfo unit\n\nThis factors out the various cases where a marker for an unknown value is\noutput by the -gnatR switches.  No functional changes.\n\n2018-05-29  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* repinfo.adb (Write_Unknown_Val): New procedure.\n\t(List_GCC_Expression): Call it.\n\t(List_Record_Layout): Likewise.\n\t(Write_Val): Likewise.\n\nFrom-SVN: r260866", "tree": {"sha": "cd155c3c2695703eb84c56d6559dfb55a3e488d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd155c3c2695703eb84c56d6559dfb55a3e488d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76b382d9a042b307efa3d87c68b692c2c51d3197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b382d9a042b307efa3d87c68b692c2c51d3197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76b382d9a042b307efa3d87c68b692c2c51d3197", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b382d9a042b307efa3d87c68b692c2c51d3197/comments", "author": null, "committer": null, "parents": [{"sha": "c35c40e7f6c3dcc80cb925c5da2e811dffe25343", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35c40e7f6c3dcc80cb925c5da2e811dffe25343", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c35c40e7f6c3dcc80cb925c5da2e811dffe25343"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "cea7085988b03891d8d13d6c7c2594de632d47d1", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b382d9a042b307efa3d87c68b692c2c51d3197/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b382d9a042b307efa3d87c68b692c2c51d3197/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=76b382d9a042b307efa3d87c68b692c2c51d3197", "patch": "@@ -1,3 +1,10 @@\n+2018-05-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* repinfo.adb (Write_Unknown_Val): New procedure.\n+\t(List_GCC_Expression): Call it.\n+\t(List_Record_Layout): Likewise.\n+\t(Write_Val): Likewise.\n+\n 2018-05-29  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* exp_ch4.adb (Expand_N_Op_Abs): Clear Do_Overflow_Check when inserting"}, {"sha": "737570d31d01d04ad353377df6f68eb533ca32d3", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b382d9a042b307efa3d87c68b692c2c51d3197/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b382d9a042b307efa3d87c68b692c2c51d3197/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=76b382d9a042b307efa3d87c68b692c2c51d3197", "patch": "@@ -189,6 +189,9 @@ package body Repinfo is\n    procedure Write_Mechanism (M : Mechanism_Type);\n    --  Writes symbolic string for mechanism represented by M\n \n+   procedure Write_Unknown_Val;\n+   --  Writes symbolic string for an unknown or non-representable value\n+\n    procedure Write_Val (Val : Node_Ref_Or_Val; Paren : Boolean := False);\n    --  Given a representation value, write it out. No_Uint values or values\n    --  dependent on discriminants are written as two question marks. If the\n@@ -653,7 +656,7 @@ package body Repinfo is\n \n    begin\n       if U = No_Uint then\n-         Write_Str (\"??\");\n+         Write_Unknown_Val;\n       else\n          Print_Expr (U);\n       end if;\n@@ -1111,7 +1114,7 @@ package body Repinfo is\n                   --  Otherwise we can continue\n \n                   else\n-                     Write_Str (\"??\");\n+                     Write_Unknown_Val;\n                   end if;\n                end if;\n \n@@ -1128,8 +1131,8 @@ package body Repinfo is\n                --  Allowing Uint_0 here is an annoying special case. Really\n                --  this should be a fine Esize value but currently it means\n                --  unknown, except that we know after gigi has back annotated\n-               --  that a size  of zero is real, since otherwise gigi back\n-               --  annotates using No_Uint as the value to indicate unknown).\n+               --  that a size of zero is real, since otherwise gigi back\n+               --  annotates using No_Uint as the value to indicate unknown.\n \n                if (Esize (Comp) = Uint_0 or else Known_Static_Esize (Comp))\n                  and then Known_Static_Normalized_First_Bit (Comp)\n@@ -1151,7 +1154,7 @@ package body Repinfo is\n                elsif List_Representation_Info < 3\n                  or else (Esize (Comp) /= Uint_0 and then Unknown_Esize (Comp))\n                then\n-                  Write_Str (\"??\");\n+                  Write_Unknown_Val;\n \n                --  List_Representation >= 3 and Known_Esize (Comp)\n \n@@ -1674,6 +1677,15 @@ package body Repinfo is\n       end case;\n    end Write_Mechanism;\n \n+   -----------------------\n+   -- Write_Unknown_Val --\n+   -----------------------\n+\n+   procedure Write_Unknown_Val is\n+   begin\n+      Write_Str (\"??\");\n+   end Write_Unknown_Val;\n+\n    ---------------\n    -- Write_Val --\n    ---------------\n@@ -1682,7 +1694,7 @@ package body Repinfo is\n    begin\n       if Rep_Not_Constant (Val) then\n          if List_Representation_Info < 3 or else Val = No_Uint then\n-            Write_Str (\"??\");\n+            Write_Unknown_Val;\n \n          else\n             if Paren then"}]}