{"sha": "7d6ce202609bd8bcbd8618507cef32e793b477e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q2Y2UyMDI2MDliZDhiY2JkODYxODUwN2NlZjMyZTc5M2I0NzdlNA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-02-17T14:05:34Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-02-17T14:05:34Z"}, "message": "re PR fortran/84381 (replace non-std 'call abort' by 'stop 1' in gfortran testsuite)\n\n2018-02-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/84381\n\t* gfortran.dg/abort_shoulfail.f90: New test.\n\t* gcc.target/powerpc/ppc-fortran/pr80108-1.f90: Replace CALL ABORT\n\tby STOP n.\n\t* gfortran.dg/PR19754_2.f90: Likewise.\n\t* gfortran.dg/PR19872.f: Likewise.\n\t* gfortran.dg/PR49268.f90: Likewise.\n\t* gfortran.dg/Wall.f90: Likewise.\n\t* gfortran.dg/Wno-all.f90: Likewise.\n\t* gfortran.dg/achar_1.f90: Likewise.\n\t* gfortran.dg/achar_2.f90: Likewise.\n\t* gfortran.dg/achar_4.f90: Likewise.\n\t* gfortran.dg/achar_6.F90: Likewise.\n\t* gfortran.dg/actual_array_constructor_1.f90: Likewise.\n\t* gfortran.dg/actual_array_constructor_2.f90: Likewise.\n\t* gfortran.dg/actual_array_constructor_3.f90: Likewise.\n\t* gfortran.dg/actual_array_offset_1.f90: Likewise.\n\t* gfortran.dg/actual_array_result_1.f90: Likewise.\n\t* gfortran.dg/actual_array_substr_1.f90: Likewise.\n\t* gfortran.dg/actual_array_substr_2.f90: Likewise.\n\t* gfortran.dg/actual_pointer_function_1.f90: Likewise.\n\t* gfortran.dg/actual_procedure_1.f90: Likewise.\n\t* gfortran.dg/adjustl_1.f90: Likewise.\n\t* gfortran.dg/advance_1.f90: Likewise.\n\t* gfortran.dg/advance_4.f90: Likewise.\n\t* gfortran.dg/advance_5.f90: Likewise.\n\t* gfortran.dg/advance_6.f90: Likewise.\n\t* gfortran.dg/aint_anint_1.f90: Likewise.\n\t* gfortran.dg/aliasing_array_result_1.f90: Likewise.\n\t* gfortran.dg/aliasing_dummy_1.f90: Likewise.\n\t* gfortran.dg/aliasing_dummy_4.f90: Likewise.\n\t* gfortran.dg/aliasing_dummy_5.f90: Likewise.\n\t* gfortran.dg/alloc_comp_assign_1.f90: Likewise.\n\t* gfortran.dg/alloc_comp_assign_10.f90: Likewise.\n\t* gfortran.dg/alloc_comp_assign_11.f90: Likewise.\n\t* gfortran.dg/alloc_comp_assign_12.f03: Likewise.\n\t* gfortran.dg/alloc_comp_assign_13.f08: Likewise.\n\t* gfortran.dg/alloc_comp_assign_14.f08: Likewise.\n\t* gfortran.dg/alloc_comp_assign_15.f03: Likewise.\n\t* gfortran.dg/alloc_comp_assign_2.f90: Likewise.\n\t* gfortran.dg/alloc_comp_assign_3.f90: Likewise.\n\t* gfortran.dg/alloc_comp_assign_4.f90: Likewise.\n\t* gfortran.dg/alloc_comp_assign_5.f90: Likewise.\n\t* gfortran.dg/alloc_comp_assign_6.f90: Likewise.\n\t* gfortran.dg/alloc_comp_assign_7.f90: Likewise.\n\t* gfortran.dg/alloc_comp_assign_8.f90: Likewise.\n\t* gfortran.dg/alloc_comp_assign_9.f90: Likewise.\n\t* gfortran.dg/alloc_comp_auto_array_1.f90: Likewise.\n\t* gfortran.dg/alloc_comp_auto_array_2.f90: Likewise.\n\t* gfortran.dg/alloc_comp_basics_1.f90: Likewise.\n\t* gfortran.dg/alloc_comp_basics_2.f90: Likewise.\n\t* gfortran.dg/alloc_comp_basics_5.f90: Likewise.\n\t* gfortran.dg/alloc_comp_bounds_1.f90: Likewise.\n\t* gfortran.dg/alloc_comp_class_1.f90: Likewise.\n\t* gfortran.dg/alloc_comp_class_2.f90: Likewise.\n\t* gfortran.dg/alloc_comp_class_4.f03: Likewise.\n\t* gfortran.dg/alloc_comp_class_5.f03: Likewise.\n\t* gfortran.dg/alloc_comp_constructor_1.f90: Likewise.\n\t* gfortran.dg/alloc_comp_constructor_2.f90: Likewise.\n\t* gfortran.dg/alloc_comp_constructor_3.f90: Likewise.\n\t* gfortran.dg/alloc_comp_constructor_4.f90: Likewise.\n\t* gfortran.dg/alloc_comp_constructor_5.f90: Likewise.\n\t* gfortran.dg/alloc_comp_constructor_6.f90: Likewise.\n\t* gfortran.dg/alloc_comp_constructor_7.f90: Likewise.\n\t* gfortran.dg/alloc_comp_deep_copy_1.f03: Likewise.\n\t* gfortran.dg/alloc_comp_deep_copy_2.f03: Likewise.\n\t* gfortran.dg/alloc_comp_deep_copy_3.f03: Likewise.\n\t* gfortran.dg/alloc_comp_default_init_1.f90: Likewise.\n\t* gfortran.dg/alloc_comp_default_init_2.f90: Likewise.\n\t* gfortran.dg/alloc_comp_initializer_1.f90: Likewise.\n\t* gfortran.dg/alloc_comp_initializer_4.f03: Likewise.\n\t* gfortran.dg/alloc_comp_optional_1.f90: Likewise.\n\t* gfortran.dg/alloc_comp_result_1.f90: Likewise.\n\t* gfortran.dg/alloc_comp_result_2.f90: Likewise.\n\t* gfortran.dg/alloc_comp_scalar_1.f90: Likewise.\n\t* gfortran.dg/alloc_comp_transformational_1.f90: Likewise.\n\t* gfortran.dg/allocatable_dummy_1.f90: Likewise.\n\t* gfortran.dg/allocatable_dummy_3.f90: Likewise.\n\t* gfortran.dg/allocatable_function_1.f90: Likewise.\n\t* gfortran.dg/allocatable_function_10.f90: Likewise.\n\t* gfortran.dg/allocatable_function_3.f90: Likewise.\n\t* gfortran.dg/allocatable_function_5.f90: Likewise.\n\t* gfortran.dg/allocatable_function_6.f90: Likewise.\n\t* gfortran.dg/allocatable_function_7.f90: Likewise.\n\t* gfortran.dg/allocatable_function_8.f90: Likewise.\n\t* gfortran.dg/allocatable_scalar_1.f90: Likewise.\n\t* gfortran.dg/allocatable_scalar_10.f90: Likewise.\n\t* gfortran.dg/allocatable_scalar_12.f90: Likewise.\n\t* gfortran.dg/allocatable_scalar_13.f90: Likewise.\n\t* gfortran.dg/allocatable_scalar_3.f90: Likewise.\n\t* gfortran.dg/allocatable_scalar_4.f90: Likewise.\n\t* gfortran.dg/allocatable_scalar_5.f90: Likewise.\n\t* gfortran.dg/allocatable_scalar_6.f90: Likewise.\n\t* gfortran.dg/allocatable_scalar_7.f90: Likewise.\n\t* gfortran.dg/allocatable_scalar_8.f90: Likewise.\n\t* gfortran.dg/allocatable_scalar_9.f90: Likewise.\n\t* gfortran.dg/allocate_alloc_opt_10.f90: Likewise.\n\t* gfortran.dg/allocate_alloc_opt_3.f90: Likewise.\n\t* gfortran.dg/allocate_alloc_opt_6.f90: Likewise.\n\t* gfortran.dg/allocate_assumed_charlen_1.f90: Likewise.\n\t* gfortran.dg/allocate_assumed_charlen_2.f90: Likewise.\n\t* gfortran.dg/allocate_class_3.f90: Likewise.\n\t* gfortran.dg/allocate_deferred_char_scalar_1.f03: Likewise.\n\t* gfortran.dg/allocate_deferred_char_scalar_2.f03: Likewise.\n\t* gfortran.dg/allocate_derived_5.f90: Likewise.\n\t* gfortran.dg/allocate_with_arrayspec_1.f90: Likewise.\n\t* gfortran.dg/allocate_with_mold_1.f90: Likewise.\n\t* gfortran.dg/allocate_with_source_1.f90: Likewise.\n\t* gfortran.dg/allocate_with_source_10.f08: Likewise.\n\t* gfortran.dg/allocate_with_source_11.f08: Likewise.\n\t* gfortran.dg/allocate_with_source_12.f03: Likewise.\n\t* gfortran.dg/allocate_with_source_15.f03: Likewise.\n\t* gfortran.dg/allocate_with_source_16.f90: Likewise.\n\t* gfortran.dg/allocate_with_source_17.f03: Likewise.\n\t* gfortran.dg/allocate_with_source_18.f03: Likewise.\n\t* gfortran.dg/allocate_with_source_2.f90: Likewise.\n\t* gfortran.dg/allocate_with_source_20.f03: Likewise.\n\t* gfortran.dg/allocate_with_source_22.f03: Likewise.\n\t* gfortran.dg/allocate_with_source_23.f03: Likewise.\n\t* gfortran.dg/allocate_with_source_24.f90: Likewise.\n\t* gfortran.dg/allocate_with_source_5.f90: Likewise.\n\t* gfortran.dg/allocate_with_source_6.f90: Likewise.\n\t* gfortran.dg/allocate_with_source_7.f08: Likewise.\n\t* gfortran.dg/allocate_with_source_8.f08: Likewise.\n\t* gfortran.dg/allocate_with_source_9.f08: Likewise.\n\t* gfortran.dg/allocate_zerosize_1.f90: Likewise.\n\t* gfortran.dg/allocate_zerosize_3.f: Likewise.\n\t* gfortran.dg/altreturn_3.f90: Likewise.\n\t* gfortran.dg/altreturn_5.f90: Likewise.\n\t* gfortran.dg/altreturn_7.f90: Likewise.\n\t* gfortran.dg/and_or_xor.f90: Likewise.\n\t* gfortran.dg/anint_1.f90: Likewise.\n\t* gfortran.dg/any_all_1.f90: Likewise.\n\t* gfortran.dg/anyallcount_1.f90: Likewise.\n\t* gfortran.dg/append_1.f90: Likewise.\n\t* gfortran.dg/argument_checking_1.f90: Likewise.\n\t* gfortran.dg/argument_checking_2.f90: Likewise.\n\t* gfortran.dg/argument_checking_8.f90: Likewise.\n\t* gfortran.dg/arithmetic_if.f90: Likewise.\n\t* gfortran.dg/array_1.f90: Likewise.\n\t* gfortran.dg/array_2.f90: Likewise.\n\t* gfortran.dg/array_alloc_1.f90: Likewise.\n\t* gfortran.dg/array_alloc_2.f90: Likewise.\n\t* gfortran.dg/array_alloc_3.f90: Likewise.\n\t* gfortran.dg/array_assignment_1.F90: Likewise.\n\t* gfortran.dg/array_assignment_5.f90: Likewise.\n\t* gfortran.dg/array_constructor_1.f90: Likewise.\n\t* gfortran.dg/array_constructor_10.f90: Likewise.\n\t* gfortran.dg/array_constructor_11.f90: Likewise.\n\t* gfortran.dg/array_constructor_12.f90: Likewise.\n\t* gfortran.dg/array_constructor_15.f90: Likewise.\n\t* gfortran.dg/array_constructor_16.f90: Likewise.\n\t* gfortran.dg/array_constructor_17.f90: Likewise.\n\t* gfortran.dg/array_constructor_19.f90: Likewise.\n\t* gfortran.dg/array_constructor_23.f: Likewise.\n\t* gfortran.dg/array_constructor_24.f: Likewise.\n\t* gfortran.dg/array_constructor_32.f90: Likewise.\n\t* gfortran.dg/array_constructor_36.f90: Likewise.\n\t* gfortran.dg/array_constructor_39.f90: Likewise.\n\t* gfortran.dg/array_constructor_4.f90: Likewise.\n\t* gfortran.dg/array_constructor_40.f90: Likewise.\n\t* gfortran.dg/array_constructor_44.f90: Likewise.\n\t* gfortran.dg/array_constructor_45.f90: Likewise.\n\t* gfortran.dg/array_constructor_46.f90: Likewise.\n\t* gfortran.dg/array_constructor_47.f90: Likewise.\n\t* gfortran.dg/array_constructor_49.f90: Likewise.\n\t* gfortran.dg/array_constructor_5.f90: Likewise.\n\t* gfortran.dg/array_constructor_50.f90: Likewise.\n\t* gfortran.dg/array_constructor_6.f90: Likewise.\n\t* gfortran.dg/array_constructor_7.f90: Likewise.\n\t* gfortran.dg/array_constructor_8.f90: Likewise.\n\t* gfortran.dg/array_constructor_9.f90: Likewise.\n\t* gfortran.dg/array_constructor_type_1.f03: Likewise.\n\t* gfortran.dg/array_constructor_type_10.f03: Likewise.\n\t* gfortran.dg/array_constructor_type_11.f03: Likewise.\n\t* gfortran.dg/array_constructor_type_12.f03: Likewise.\n\t* gfortran.dg/array_constructor_type_13.f90: Likewise.\n\t* gfortran.dg/array_constructor_type_14.f03: Likewise.\n\t* gfortran.dg/array_constructor_type_16.f03: Likewise.\n\t* gfortran.dg/array_constructor_type_2.f03: Likewise.\n\t* gfortran.dg/array_constructor_type_22.f03: Likewise.\n\t* gfortran.dg/array_constructor_type_3.f03: Likewise.\n\t* gfortran.dg/array_constructor_type_4.f03: Likewise.\n\t* gfortran.dg/array_constructor_type_5.f03: Likewise.\n\t* gfortran.dg/array_constructor_type_6.f03: Likewise.\n\t* gfortran.dg/array_constructor_type_7.f03: Likewise.\n\t* gfortran.dg/array_function_1.f90: Likewise.\n\t* gfortran.dg/array_function_5.f90: Likewise.\n\t* gfortran.dg/array_initializer_1.f90: Likewise.\n\t* gfortran.dg/array_initializer_2.f90: Likewise.\n\t* gfortran.dg/array_memcpy_5.f90: Likewise.\n\t* gfortran.dg/array_memset_2.f90: Likewise.\n\t* gfortran.dg/array_reference_1.f90: Likewise.\n\t* gfortran.dg/array_return_value_1.f90: Likewise.\n\t* gfortran.dg/array_section_1.f90: Likewise.\n\t* gfortran.dg/array_temporaries_3.f90: Likewise.\n\t* gfortran.dg/arrayio_1.f90: Likewise.\n\t* gfortran.dg/arrayio_10.f90: Likewise.\n\t* gfortran.dg/arrayio_11.f90: Likewise.\n\t* gfortran.dg/arrayio_12.f90: Likewise.\n\t* gfortran.dg/arrayio_13.f90: Likewise.\n\t* gfortran.dg/arrayio_14.f90: Likewise.\n\t* gfortran.dg/arrayio_16.f90: Likewise.\n\t* gfortran.dg/arrayio_2.f90: Likewise.\n\t* gfortran.dg/arrayio_3.f90: Likewise.\n\t* gfortran.dg/arrayio_4.f90: Likewise.\n\t* gfortran.dg/arrayio_5.f90: Likewise.\n\t* gfortran.dg/arrayio_6.f90: Likewise.\n\t* gfortran.dg/arrayio_7.f90: Likewise.\n\t* gfortran.dg/arrayio_8.f90: Likewise.\n\t* gfortran.dg/arrayio_9.f90: Likewise.\n\t* gfortran.dg/arrayio_derived_1.f90: Likewise.\n\t* gfortran.dg/assign_10.f90: Likewise.\n\t* gfortran.dg/assign_9.f90: Likewise.\n\t* gfortran.dg/assign_func_dtcomp_1.f90: Likewise.\n\t* gfortran.dg/assignment_1.f90: Likewise.\n\t* gfortran.dg/associate_1.f03: Likewise.\n\t* gfortran.dg/associate_11.f90: Likewise.\n\t* gfortran.dg/associate_13.f90: Likewise.\n\t* gfortran.dg/associate_15.f90: Likewise.\n\t* gfortran.dg/associate_17.f90: Likewise.\n\t* gfortran.dg/associate_18.f08: Likewise.\n\t* gfortran.dg/associate_19.f03: Likewise.\n\t* gfortran.dg/associate_20.f03: Likewise.\n\t* gfortran.dg/associate_22.f90: Likewise.\n\t* gfortran.dg/associate_23.f90: Likewise.\n\t* gfortran.dg/associate_24.f90: Likewise.\n\t* gfortran.dg/associate_25.f90: Likewise.\n\t* gfortran.dg/associate_27.f90: Likewise.\n\t* gfortran.dg/associate_28.f90: Likewise.\n\t* gfortran.dg/associate_32.f03: Likewise.\n\t* gfortran.dg/associate_33.f03: Likewise.\n\t* gfortran.dg/associate_34.f90: Likewise.\n\t* gfortran.dg/associate_6.f03: Likewise.\n\t* gfortran.dg/associate_7.f03: Likewise.\n\t* gfortran.dg/associate_8.f03: Likewise.\n\t* gfortran.dg/associate_9.f03: Likewise.\n\t* gfortran.dg/associated_1.f90: Likewise.\n\t* gfortran.dg/associated_2.f90: Likewise.\n\t* gfortran.dg/associated_5.f90: Likewise.\n\t* gfortran.dg/associated_6.f90: Likewise.\n\t* gfortran.dg/associated_target_3.f90: Likewise.\n\t* gfortran.dg/associated_target_4.f90: Likewise.\n\t* gfortran.dg/associated_target_5.f03: Likewise.\n\t* gfortran.dg/associated_target_6.f03: Likewise.\n\t* gfortran.dg/assumed_dummy_1.f90: Likewise.\n\t* gfortran.dg/assumed_rank_1.f90: Likewise.\n\t* gfortran.dg/assumed_rank_10.f90: Likewise.\n\t* gfortran.dg/assumed_rank_2.f90: Likewise.\n\t* gfortran.dg/assumed_rank_7.f90: Likewise.\n\t* gfortran.dg/assumed_rank_8.f90: Likewise.\n\t* gfortran.dg/assumed_rank_9.f90: Likewise.\n\t* gfortran.dg/assumed_rank_bounds_1.f90: Likewise.\n\t* gfortran.dg/assumed_rank_bounds_2.f90: Likewise.\n\t* gfortran.dg/assumed_shape_ranks_2.f90: Likewise.\n\t* gfortran.dg/assumed_type_2.f90: Likewise.\n\t* gfortran.dg/atan2_1.f90: Likewise.\n\t* gfortran.dg/auto_array_1.f90: Likewise.\n\t* gfortran.dg/auto_char_dummy_array_1.f90: Likewise.\n\t* gfortran.dg/auto_char_dummy_array_3.f90: Likewise.\n\t* gfortran.dg/auto_char_len_3.f90: Likewise.\n\t* gfortran.dg/auto_char_pointer_array_result_1.f90: Likewise.\n\t* gfortran.dg/auto_internal_assumed.f90: Likewise.\n\t* gfortran.dg/auto_pointer_array_result_1.f90: Likewise.\n\t* gfortran.dg/auto_save_2.f90: Likewise.\n\t* gfortran.dg/automatic_default_init_1.f90: Likewise.\n\t* gfortran.dg/backslash_1.f90: Likewise.\n\t* gfortran.dg/backslash_2.f90: Likewise.\n\t* gfortran.dg/backslash_3.f: Likewise.\n\t* gfortran.dg/backspace_1.f: Likewise.\n\t* gfortran.dg/backspace_10.f90: Likewise.\n\t* gfortran.dg/backspace_11.f90: Likewise.\n\t* gfortran.dg/backspace_2.f: Likewise.\n\t* gfortran.dg/backspace_3.f: Likewise.\n\t* gfortran.dg/backspace_4.f: Likewise.\n\t* gfortran.dg/backspace_5.f: Likewise.\n\t* gfortran.dg/backspace_6.f: Likewise.\n\t* gfortran.dg/backspace_7.f90: Likewise.\n\t* gfortran.dg/backspace_8.f: Likewise.\n\t* gfortran.dg/backspace_9.f: Likewise.\n\t* gfortran.dg/bessel_1.f90: Likewise.\n\t* gfortran.dg/bessel_2.f90: Likewise.\n\t* gfortran.dg/bessel_5.f90: Likewise.\n\t* gfortran.dg/bessel_6.f90: Likewise.\n\t* gfortran.dg/bessel_7.f90: Likewise.\n\t* gfortran.dg/bind_c_dts_2.f03: Likewise.\n\t* gfortran.dg/bind_c_dts_3.f03: Likewise.\n\t* gfortran.dg/bind_c_usage_15.f90: Likewise.\n\t* gfortran.dg/bind_c_usage_16.f03: Likewise.\n\t* gfortran.dg/bind_c_usage_17.f90: Likewise.\n\t* gfortran.dg/bind_c_usage_24.f90: Likewise.\n\t* gfortran.dg/binding_c_table_15_1.f03: Likewise.\n\t* gfortran.dg/binding_label_tests_16.f03: Likewise.\n\t* gfortran.dg/binding_label_tests_23.f90: Likewise.\n\t* gfortran.dg/bit_comparison_1.F90: Likewise.\n\t* gfortran.dg/bit_comparison_2.F90: Likewise.\n\t* gfortran.dg/block_1.f08: Likewise.\n\t* gfortran.dg/block_13.f08: Likewise.\n\t* gfortran.dg/block_14.f90: Likewise.\n\t* gfortran.dg/block_2.f08: Likewise.\n\t* gfortran.dg/block_6.f08: Likewise.\n\t* gfortran.dg/block_7.f08: Likewise.\n\t* gfortran.dg/block_8.f08: Likewise.\n\t* gfortran.dg/blockdata_1.f90: Likewise.\n\t* gfortran.dg/bound_1.f90: Likewise.\n\t* gfortran.dg/bound_2.f90: Likewise.\n\t* gfortran.dg/bound_3.f90: Likewise.\n\t* gfortran.dg/bound_4.f90: Likewise.\n\t* gfortran.dg/bound_5.f90: Likewise.\n\t* gfortran.dg/bound_6.f90: Likewise.\n\t* gfortran.dg/bound_7.f90: Likewise.\n\t* gfortran.dg/bound_8.f90: Likewise.\n\t* gfortran.dg/bound_9.f90: Likewise.\n\t* gfortran.dg/bound_simplification_1.f90: Likewise.\n\t* gfortran.dg/bound_simplification_3.f90: Likewise.\n\t* gfortran.dg/bound_simplification_4.f90: Likewise.\n\t* gfortran.dg/bound_simplification_5.f90: Likewise.\n\t* gfortran.dg/bound_simplification_6.f90: Likewise.\n\t* gfortran.dg/bounds_check_1.f90: Likewise.\n\t* gfortran.dg/bounds_check_12.f90: Likewise.\n\t* gfortran.dg/bounds_check_14.f90: Likewise.\n\t* gfortran.dg/bounds_check_15.f90: Likewise.\n\t* gfortran.dg/bounds_check_19.f90: Likewise.\n\t* gfortran.dg/bounds_check_8.f90: Likewise.\n\t* gfortran.dg/bounds_check_9.f90: Likewise.\n\t* gfortran.dg/bounds_check_fail_2.f90: Likewise.\n\t* gfortran.dg/bounds_check_fail_3.f90: Likewise.\n\t* gfortran.dg/bounds_check_fail_4.f90: Likewise.\n\t* gfortran.dg/boz_1.f90: Likewise.\n\t* gfortran.dg/boz_11.f90: Likewise.\n\t* gfortran.dg/boz_13.f90: Likewise.\n\t* gfortran.dg/boz_14.f90: Likewise.\n\t* gfortran.dg/boz_15.f90: Likewise.\n\t* gfortran.dg/boz_3.f90: Likewise.\n\t* gfortran.dg/boz_6.f90: Likewise.\n\t* gfortran.dg/boz_9.f90: Likewise.\n\t* gfortran.dg/byte_1.f90: Likewise.\n\t* gfortran.dg/byte_2.f90: Likewise.\n\t* gfortran.dg/c_assoc.f90: Likewise.\n\t* gfortran.dg/c_assoc_2.f03: Likewise.\n\t* gfortran.dg/c_assoc_3.f90: Likewise.\n\t* gfortran.dg/c_by_val_1.f: Likewise.\n\t* gfortran.dg/c_by_val_5.f90: Likewise.\n\t* gfortran.dg/c_char_tests.f03: Likewise.\n\t* gfortran.dg/c_char_tests_2.f03: Likewise.\n\t* gfortran.dg/c_f_pointer_complex.f03: Likewise.\n\t* gfortran.dg/c_f_pointer_logical.f03: Likewise.\n\t* gfortran.dg/c_f_pointer_shape_tests_2.f03: Likewise.\n\t* gfortran.dg/c_f_pointer_shape_tests_4.f03: Likewise.\n\t* gfortran.dg/c_f_pointer_shape_tests_5.f90: Likewise.\n\t* gfortran.dg/c_f_pointer_tests.f90: Likewise.\n\t* gfortran.dg/c_f_pointer_tests_4.f90: Likewise.\n\t* gfortran.dg/c_kind_int128_test2.f03: Likewise.\n\t* gfortran.dg/c_kind_params.f90: Likewise.\n\t* gfortran.dg/c_loc_test_20.f90: Likewise.\n\t* gfortran.dg/c_loc_tests_2.f03: Likewise.\n\t* gfortran.dg/c_ptr_tests_14.f90: Likewise.\n\t* gfortran.dg/c_ptr_tests_15.f90: Likewise.\n\t* gfortran.dg/c_size_t_test.f03: Likewise.\n\t* gfortran.dg/c_sizeof_1.f90: Likewise.\n\t* gfortran.dg/c_sizeof_5.f90: Likewise.\n\t* gfortran.dg/c_sizeof_6.f90: Likewise.\n\t* gfortran.dg/char4_iunit_1.f03: Likewise.\n\t* gfortran.dg/char4_iunit_2.f03: Likewise.\n\t* gfortran.dg/char_allocation_1.f90: Likewise.\n\t* gfortran.dg/char_array_constructor.f90: Likewise.\n\t* gfortran.dg/char_array_structure_constructor.f90: Likewise.\n\t* gfortran.dg/char_assign_1.f90: Likewise.\n\t* gfortran.dg/char_associated_1.f90: Likewise.\n\t* gfortran.dg/char_cast_2.f90: Likewise.\n\t* gfortran.dg/char_comparison_1.f: Likewise.\n\t* gfortran.dg/char_component_initializer_1.f90: Likewise.\n\t* gfortran.dg/char_component_initializer_2.f90: Likewise.\n\t* gfortran.dg/char_cons_len.f90: Likewise.\n\t* gfortran.dg/char_conversion.f90: Likewise.\n\t* gfortran.dg/char_cshift_1.f90: Likewise.\n\t* gfortran.dg/char_cshift_2.f90: Likewise.\n\t* gfortran.dg/char_decl_2.f90: Likewise.\n\t* gfortran.dg/char_eoshift_1.f90: Likewise.\n\t* gfortran.dg/char_eoshift_2.f90: Likewise.\n\t* gfortran.dg/char_eoshift_3.f90: Likewise.\n\t* gfortran.dg/char_eoshift_4.f90: Likewise.\n\t* gfortran.dg/char_eoshift_5.f90: Likewise.\n\t* gfortran.dg/char_expr_1.f90: Likewise.\n\t* gfortran.dg/char_expr_3.f90: Likewise.\n\t* gfortran.dg/char_initialiser_actual.f90: Likewise.\n\t* gfortran.dg/char_length_12.f90: Likewise.\n\t* gfortran.dg/char_length_14.f90: Likewise.\n\t* gfortran.dg/char_length_15.f90: Likewise.\n\t* gfortran.dg/char_length_17.f90: Likewise.\n\t* gfortran.dg/char_length_20.f90: Likewise.\n\t* gfortran.dg/char_length_21.f90: Likewise.\n\t* gfortran.dg/char_length_5.f90: Likewise.\n\t* gfortran.dg/char_length_6.f90: Likewise.\n\t* gfortran.dg/char_length_7.f90: Likewise.\n\t* gfortran.dg/char_length_8.f90: Likewise.\n\t* gfortran.dg/char_pack_1.f90: Likewise.\n\t* gfortran.dg/char_pack_2.f90: Likewise.\n\t* gfortran.dg/char_pointer_assign.f90: Likewise.\n\t* gfortran.dg/char_pointer_assign_3.f90: Likewise.\n\t* gfortran.dg/char_pointer_comp_assign.f90: Likewise.\n\t* gfortran.dg/char_pointer_dependency.f90: Likewise.\n\t* gfortran.dg/char_pointer_dummy.f90: Likewise.\n\t* gfortran.dg/char_pointer_func.f90: Likewise.\n\t* gfortran.dg/char_reshape_1.f90: Likewise.\n\t* gfortran.dg/char_result_1.f90: Likewise.\n\t* gfortran.dg/char_result_12.f90: Likewise.\n\t* gfortran.dg/char_result_13.f90: Likewise.\n\t* gfortran.dg/char_result_14.f90: Likewise.\n\t* gfortran.dg/char_result_15.f90: Likewise.\n\t* gfortran.dg/char_result_2.f90: Likewise.\n\t* gfortran.dg/char_result_3.f90: Likewise.\n\t* gfortran.dg/char_result_4.f90: Likewise.\n\t* gfortran.dg/char_result_5.f90: Likewise.\n\t* gfortran.dg/char_result_6.f90: Likewise.\n\t* gfortran.dg/char_result_7.f90: Likewise.\n\t* gfortran.dg/char_result_8.f90: Likewise.\n\t* gfortran.dg/char_spread_1.f90: Likewise.\n\t* gfortran.dg/char_transpose_1.f90: Likewise.\n\t* gfortran.dg/char_type_len.f90: Likewise.\n\t* gfortran.dg/char_unpack_1.f90: Likewise.\n\t* gfortran.dg/char_unpack_2.f90: Likewise.\n\t* gfortran.dg/character_array_constructor_1.f90: Likewise.\n\t* gfortran.dg/character_comparison_1.f90: Likewise.\n\t* gfortran.dg/character_comparison_2.f90: Likewise.\n\t* gfortran.dg/character_comparison_3.f90: Likewise.\n\t* gfortran.dg/character_comparison_4.f90: Likewise.\n\t* gfortran.dg/character_comparison_5.f90: Likewise.\n\t* gfortran.dg/character_comparison_6.f90: Likewise.\n\t* gfortran.dg/character_comparison_7.f90: Likewise.\n\t* gfortran.dg/character_comparison_8.f90: Likewise.\n\t* gfortran.dg/character_comparison_9.f90: Likewise.\n\t* gfortran.dg/charlen_15.f90: Likewise.\n\t* gfortran.dg/charlen_16.f90: Likewise.\n\t* gfortran.dg/chkbits.f90: Likewise.\n\t* gfortran.dg/chmod_1.f90: Likewise.\n\t* gfortran.dg/chmod_2.f90: Likewise.\n\t* gfortran.dg/chmod_3.f90: Likewise.\n\t* gfortran.dg/class_1.f03: Likewise.\n\t* gfortran.dg/class_18.f03: Likewise.\n\t* gfortran.dg/class_19.f03: Likewise.\n\t* gfortran.dg/class_35.f90: Likewise.\n\t* gfortran.dg/class_46.f03: Likewise.\n\t* gfortran.dg/class_48.f90: Likewise.\n\t* gfortran.dg/class_51.f90: Likewise.\n\t* gfortran.dg/class_52.f90: Likewise.\n\t* gfortran.dg/class_6.f03: Likewise.\n\t* gfortran.dg/class_63.f90: Likewise.\n\t* gfortran.dg/class_64.f90: Likewise.\n\t* gfortran.dg/class_65.f90: Likewise.\n\t* gfortran.dg/class_66.f90: Likewise.\n\t* gfortran.dg/class_67.f90: Likewise.\n\t* gfortran.dg/class_9.f03: Likewise.\n\t* gfortran.dg/class_alias.f90: Likewise.\n\t* gfortran.dg/class_allocate_1.f03: Likewise.\n\t* gfortran.dg/class_allocate_10.f03: Likewise.\n\t* gfortran.dg/class_allocate_13.f90: Likewise.\n\t* gfortran.dg/class_allocate_14.f90: Likewise.\n\t* gfortran.dg/class_allocate_15.f90: Likewise.\n\t* gfortran.dg/class_allocate_19.f03: Likewise.\n\t* gfortran.dg/class_allocate_21.f90: Likewise.\n\t* gfortran.dg/class_allocate_22.f90: Likewise.\n\t* gfortran.dg/class_allocate_3.f03: Likewise.\n\t* gfortran.dg/class_allocate_4.f03: Likewise.\n\t* gfortran.dg/class_allocate_5.f90: Likewise.\n\t* gfortran.dg/class_allocate_6.f03: Likewise.\n\t* gfortran.dg/class_allocate_7.f03: Likewise.\n\t* gfortran.dg/class_allocate_8.f03: Likewise.\n\t* gfortran.dg/class_allocate_9.f03: Likewise.\n\t* gfortran.dg/class_array_1.f03: Likewise.\n\t* gfortran.dg/class_array_14.f90: Likewise.\n\t* gfortran.dg/class_array_15.f03: Likewise.\n\t* gfortran.dg/class_array_16.f90: Likewise.\n\t* gfortran.dg/class_array_2.f03: Likewise.\n\t* gfortran.dg/class_array_20.f03: Likewise.\n\t* gfortran.dg/class_array_21.f03: Likewise.\n\t* gfortran.dg/class_array_3.f03: Likewise.\n\t* gfortran.dg/class_array_4.f03: Likewise.\n\t* gfortran.dg/class_array_7.f03: Likewise.\n\t* gfortran.dg/class_array_8.f03: Likewise.\n\t* gfortran.dg/class_array_9.f03: Likewise.\n\t* gfortran.dg/class_defined_operator_1.f03: Likewise.\n\t* gfortran.dg/class_dummy_1.f03: Likewise.\n\t* gfortran.dg/class_optional_1.f90: Likewise.\n\t* gfortran.dg/class_optional_2.f90: Likewise.\n\t* gfortran.dg/class_result_5.f90: Likewise.\n\t* gfortran.dg/class_result_6.f90: Likewise.\n\t* gfortran.dg/class_to_type_1.f03: Likewise.\n\t* gfortran.dg/class_to_type_2.f90: Likewise.\n\t* gfortran.dg/class_to_type_3.f03: Likewise.\n\t* gfortran.dg/class_to_type_4.f90: Likewise.\n\t* gfortran.dg/coarray/alloc_comp_1.f90: Likewise.\n\t* gfortran.dg/coarray/alloc_comp_4.f90: Likewise.\n\t* gfortran.dg/coarray/allocate_errgmsg.f90: Likewise.\n\t* gfortran.dg/coarray/atomic_1.f90: Likewise.\n\t* gfortran.dg/coarray/atomic_2.f90: Likewise.\n\t* gfortran.dg/coarray/codimension.f90: Likewise.\n\t* gfortran.dg/coarray/coindexed_1.f90: Likewise.\n\t* gfortran.dg/coarray/collectives_1.f90: Likewise.\n\t* gfortran.dg/coarray/collectives_2.f90: Likewise.\n\t* gfortran.dg/coarray/collectives_3.f90: Likewise.\n\t* gfortran.dg/coarray/collectives_4.f90: Likewise.\n\t* gfortran.dg/coarray/cosubscript_1.f90: Likewise.\n\t* gfortran.dg/coarray/dummy_1.f90: Likewise.\n\t* gfortran.dg/coarray/event_1.f90: Likewise.\n\t* gfortran.dg/coarray/event_2.f90: Likewise.\n\t* gfortran.dg/coarray/get_array.f90: Likewise.\n\t* gfortran.dg/coarray/image_index_1.f90: Likewise.\n\t* gfortran.dg/coarray/image_index_2.f90: Likewise.\n\t* gfortran.dg/coarray/image_index_3.f90: Likewise.\n\t* gfortran.dg/coarray/lib_realloc_1.f90: Likewise.\n\t* gfortran.dg/coarray/lock_1.f90: Likewise.\n\t* gfortran.dg/coarray/lock_2.f90: Likewise.\n\t* gfortran.dg/coarray/move_alloc_1.f90: Likewise.\n\t* gfortran.dg/coarray/poly_run_1.f90: Likewise.\n\t* gfortran.dg/coarray/poly_run_2.f90: Likewise.\n\t* gfortran.dg/coarray/poly_run_3.f90: Likewise.\n\t* gfortran.dg/coarray/ptr_comp_3.f08: Likewise.\n\t* gfortran.dg/coarray/registering_1.f90: Likewise.\n\t* gfortran.dg/coarray/scalar_alloc_1.f90: Likewise.\n\t* gfortran.dg/coarray/scalar_alloc_2.f90: Likewise.\n\t* gfortran.dg/coarray/send_array.f90: Likewise.\n\t* gfortran.dg/coarray/send_char_array_1.f90: Likewise.\n\t* gfortran.dg/coarray/sendget_array.f90: Likewise.\n\t* gfortran.dg/coarray/subobject_1.f90: Likewise.\n\t* gfortran.dg/coarray/sync_1.f90: Likewise.\n\t* gfortran.dg/coarray/sync_3.f90: Likewise.\n\t* gfortran.dg/coarray/this_image_1.f90: Likewise.\n\t* gfortran.dg/coarray/this_image_2.f90: Likewise.\n\t* gfortran.dg/coarray_13.f90: Likewise.\n\t* gfortran.dg/coarray_15.f90: Likewise.\n\t* gfortran.dg/coarray_16.f90: Likewise.\n\t* gfortran.dg/coarray_2.f90: Likewise.\n\t* gfortran.dg/coarray_23.f90: Likewise.\n\t* gfortran.dg/coarray_40.f90: Likewise.\n\t* gfortran.dg/coarray_alloc_comp_1.f08: Likewise.\n\t* gfortran.dg/coarray_alloc_comp_2.f08: Likewise.\n\t* gfortran.dg/coarray_allocate_10.f08: Likewise.\n\t* gfortran.dg/coarray_allocate_2.f08: Likewise.\n\t* gfortran.dg/coarray_allocate_3.f08: Likewise.\n\t* gfortran.dg/coarray_allocate_4.f08: Likewise.\n\t* gfortran.dg/coarray_allocate_5.f08: Likewise.\n\t* gfortran.dg/coarray_allocate_7.f08: Likewise.\n\t* gfortran.dg/coarray_allocate_8.f08: Likewise.\n\t* gfortran.dg/coarray_allocate_9.f08: Likewise.\n\t* gfortran.dg/coarray_lib_alloc_4.f90: Likewise.\n\t* gfortran.dg/coarray_lib_comm_1.f90: Likewise.\n\t* gfortran.dg/coarray_lib_realloc_1.f90: Likewise.\n\t* gfortran.dg/coarray_lib_token_1.f90: Likewise.\n\t* gfortran.dg/coarray_lib_token_2.f90: Likewise.\n\t* gfortran.dg/coarray_ptr_comp_1.f08: Likewise.\n\t* gfortran.dg/coarray_ptr_comp_2.f08: Likewise.\n\t* gfortran.dg/coarray_send_by_ref_1.f08: Likewise.\n\t* gfortran.dg/coarray_stat_2.f90: Likewise.\n\t* gfortran.dg/coarray_subobject_1.f90: Likewise.\n\t* gfortran.dg/coindexed_1.f90: Likewise.\n\t* gfortran.dg/comma.f: Likewise.\n\t* gfortran.dg/comma_format_extension_3.f: Likewise.\n\t* gfortran.dg/comma_format_extension_4.f: Likewise.\n\t* gfortran.dg/common_2.f90: Likewise.\n\t* gfortran.dg/common_4.f90: Likewise.\n\t* gfortran.dg/common_align_1.f90: Likewise.\n\t* gfortran.dg/common_align_2.f90: Likewise.\n\t* gfortran.dg/common_equivalence_1.f: Likewise.\n\t* gfortran.dg/common_pointer_1.f90: Likewise.\n\t* gfortran.dg/common_resize_1.f: Likewise.\n\t* gfortran.dg/complex_intrinsic_1.f90: Likewise.\n\t* gfortran.dg/complex_intrinsic_3.f90: Likewise.\n\t* gfortran.dg/complex_intrinsic_5.f90: Likewise.\n\t* gfortran.dg/complex_intrinsic_7.f90: Likewise.\n\t* gfortran.dg/complex_read.f90: Likewise.\n\t* gfortran.dg/complex_write.f90: Likewise.\n\t* gfortran.dg/constant_substring.f: Likewise.\n\t* gfortran.dg/constructor_2.f90: Likewise.\n\t* gfortran.dg/constructor_3.f90: Likewise.\n\t* gfortran.dg/constructor_6.f90: Likewise.\n\t* gfortran.dg/contained_1.f90: Likewise.\n\t* gfortran.dg/contained_3.f90: Likewise.\n\t* gfortran.dg/contained_equivalence_1.f90: Likewise.\n\t* gfortran.dg/contained_module_proc_1.f90: Likewise.\n\t* gfortran.dg/continuation_1.f90: Likewise.\n\t* gfortran.dg/continuation_11.f90: Likewise.\n\t* gfortran.dg/continuation_12.f90: Likewise.\n\t* gfortran.dg/continuation_13.f90: Likewise.\n\t* gfortran.dg/continuation_14.f: Likewise.\n\t* gfortran.dg/continuation_8.f90: Likewise.\n\t* gfortran.dg/convert_2.f90: Likewise.\n\t* gfortran.dg/convert_implied_open.f90: Likewise.\n\t* gfortran.dg/count_init_expr.f03: Likewise.\n\t* gfortran.dg/cr_lf.f90: Likewise.\n\t* gfortran.dg/cray_pointers_10.f90: Likewise.\n\t* gfortran.dg/cray_pointers_2.f90: Likewise.\n\t* gfortran.dg/cray_pointers_5.f90: Likewise.\n\t* gfortran.dg/cray_pointers_7.f90: Likewise.\n\t* gfortran.dg/cray_pointers_8.f90: Likewise.\n\t* gfortran.dg/cshift_1.f90: Likewise.\n\t* gfortran.dg/cshift_2.f90: Likewise.\n\t* gfortran.dg/cshift_large_1.f90: Likewise.\n\t* gfortran.dg/cshift_nan_1.f90: Likewise.\n\t* gfortran.dg/csqrt_2.f: Likewise.\n\t* gfortran.dg/data_array_1.f90: Likewise.\n\t* gfortran.dg/data_char_1.f90: Likewise.\n\t* gfortran.dg/data_char_2.f90: Likewise.\n\t* gfortran.dg/data_char_3.f90: Likewise.\n\t* gfortran.dg/data_derived_1.f90: Likewise.\n\t* gfortran.dg/data_implied_do_1.f90: Likewise.\n\t* gfortran.dg/data_namelist_conflict.f90: Likewise.\n\t* gfortran.dg/deallocate_alloc_opt_3.f90: Likewise.\n\t* gfortran.dg/deallocate_stat.f90: Likewise.\n\t* gfortran.dg/deallocate_stat_2.f90: Likewise.\n\t* gfortran.dg/debug/pr37738.f: Likewise.\n\t* gfortran.dg/dec_bitwise_ops_1.f90: Likewise.\n\t* gfortran.dg/dec_bitwise_ops_2.f90: Likewise.\n\t* gfortran.dg/dec_exp_1.f90: Likewise.\n\t* gfortran.dg/dec_init_1.f90: Likewise.\n\t* gfortran.dg/dec_init_2.f90: Likewise.\n\t* gfortran.dg/dec_init_3.f90: Likewise.\n\t* gfortran.dg/dec_init_4.f90: Likewise.\n\t* gfortran.dg/dec_io_1.f90: Likewise.\n\t* gfortran.dg/dec_io_2.f90: Likewise.\n\t* gfortran.dg/dec_io_2a.f90: Likewise.\n\t* gfortran.dg/dec_io_6.f90: Likewise.\n\t* gfortran.dg/dec_loc_rval_1.f90: Likewise.\n\t* gfortran.dg/dec_logical_xor_1.f90: Likewise.\n\t* gfortran.dg/dec_math.f90: Likewise.\n\t* gfortran.dg/dec_parameter_1.f: Likewise.\n\t* gfortran.dg/dec_parameter_2.f90: Likewise.\n\t* gfortran.dg/dec_static_1.f90: Likewise.\n\t* gfortran.dg/dec_static_2.f90: Likewise.\n\t* gfortran.dg/dec_structure_1.f90: Likewise.\n\t* gfortran.dg/dec_structure_10.f90: Likewise.\n\t* gfortran.dg/dec_structure_18.f90: Likewise.\n\t* gfortran.dg/dec_structure_19.f90: Likewise.\n\t* gfortran.dg/dec_structure_2.f90: Likewise.\n\t* gfortran.dg/dec_structure_22.f90: Likewise.\n\t* gfortran.dg/dec_structure_3.f90: Likewise.\n\t* gfortran.dg/dec_structure_4.f90: Likewise.\n\t* gfortran.dg/dec_structure_5.f90: Likewise.\n\t* gfortran.dg/dec_structure_6.f90: Likewise.\n\t* gfortran.dg/dec_structure_7.f90: Likewise.\n\t* gfortran.dg/dec_union_1.f90: Likewise.\n\t* gfortran.dg/dec_union_2.f90: Likewise.\n\t* gfortran.dg/dec_union_3.f90: Likewise.\n\t* gfortran.dg/dec_union_4.f90: Likewise.\n\t* gfortran.dg/dec_union_5.f90: Likewise.\n\t* gfortran.dg/default_format_1.f90: Likewise.\n\t* gfortran.dg/default_format_2.f90: Likewise.\n\t* gfortran.dg/default_format_denormal_1.f90: Likewise.\n\t* gfortran.dg/default_format_denormal_2.f90: Likewise.\n\t* gfortran.dg/default_initialization_3.f90: Likewise.\n\t* gfortran.dg/default_initialization_4.f90: Likewise.\n\t* gfortran.dg/default_initialization_5.f90: Likewise.\n\t* gfortran.dg/deferred_character_1.f90: Likewise.\n\t* gfortran.dg/deferred_character_10.f90: Likewise.\n\t* gfortran.dg/deferred_character_11.f90: Likewise.\n\t* gfortran.dg/deferred_character_12.f90: Likewise.\n\t* gfortran.dg/deferred_character_13.f90: Likewise.\n\t* gfortran.dg/deferred_character_14.f90: Likewise.\n\t* gfortran.dg/deferred_character_15.f90: Likewise.\n\t* gfortran.dg/deferred_character_16.f90: Likewise.\n\t* gfortran.dg/deferred_character_2.f90: Likewise.\n\t* gfortran.dg/deferred_character_3.f90: Likewise.\n\t* gfortran.dg/deferred_character_4.f90: Likewise.\n\t* gfortran.dg/deferred_character_5.f90: Likewise.\n\t* gfortran.dg/deferred_character_6.f90: Likewise.\n\t* gfortran.dg/deferred_character_7.f90: Likewise.\n\t* gfortran.dg/deferred_character_8.f90: Likewise.\n\t* gfortran.dg/deferred_character_9.f90: Likewise.\n\t* gfortran.dg/deferred_character_assignment_1.f90: Likewise.\n\t* gfortran.dg/deferred_type_component_1.f90: Likewise.\n\t* gfortran.dg/deferred_type_component_2.f90: Likewise.\n\t* gfortran.dg/deferred_type_param_2.f90: Likewise.\n\t* gfortran.dg/deferred_type_param_4.f90: Likewise.\n\t* gfortran.dg/deferred_type_param_5.f90: Likewise.\n\t* gfortran.dg/deferred_type_param_6.f90: Likewise.\n\t* gfortran.dg/deferred_type_param_8.f90: Likewise.\n\t* gfortran.dg/deferred_type_param_9.f90: Likewise.\n\t* gfortran.dg/deferred_type_proc_pointer_1.f90: Likewise.\n\t* gfortran.dg/deferred_type_proc_pointer_2.f90: Likewise.\n\t* gfortran.dg/defined_assignment_1.f90: Likewise.\n\t* gfortran.dg/defined_assignment_10.f90: Likewise.\n\t* gfortran.dg/defined_assignment_11.f90: Likewise.\n\t* gfortran.dg/defined_assignment_2.f90: Likewise.\n\t* gfortran.dg/defined_assignment_3.f90: Likewise.\n\t* gfortran.dg/defined_assignment_4.f90: Likewise.\n\t* gfortran.dg/defined_assignment_5.f90: Likewise.\n\t* gfortran.dg/defined_assignment_8.f90: Likewise.\n\t* gfortran.dg/defined_assignment_9.f90: Likewise.\n\t* gfortran.dg/dependency_2.f90: Likewise.\n\t* gfortran.dg/dependency_21.f90: Likewise.\n\t* gfortran.dg/dependency_22.f90: Likewise.\n\t* gfortran.dg/dependency_23.f90: Likewise.\n\t* gfortran.dg/dependency_24.f90: Likewise.\n\t* gfortran.dg/dependency_25.f90: Likewise.\n\t* gfortran.dg/dependency_26.f90: Likewise.\n\t* gfortran.dg/dependency_39.f90: Likewise.\n\t* gfortran.dg/dependency_40.f90: Likewise.\n\t* gfortran.dg/dependency_41.f90: Likewise.\n\t* gfortran.dg/dependency_42.f90: Likewise.\n\t* gfortran.dg/dependency_43.f90: Likewise.\n\t* gfortran.dg/dependency_44.f90: Likewise.\n\t* gfortran.dg/dependency_45.f90: Likewise.\n\t* gfortran.dg/dependency_50.f90: Likewise.\n\t* gfortran.dg/dependency_51.f90: Likewise.\n\t* gfortran.dg/dependent_decls_1.f90: Likewise.\n\t* gfortran.dg/der_array_1.f90: Likewise.\n\t* gfortran.dg/der_array_io_1.f90: Likewise.\n\t* gfortran.dg/der_array_io_2.f90: Likewise.\n\t* gfortran.dg/der_array_io_3.f90: Likewise.\n\t* gfortran.dg/der_io_1.f90: Likewise.\n\t* gfortran.dg/der_io_3.f90: Likewise.\n\t* gfortran.dg/der_pointer_2.f90: Likewise.\n\t* gfortran.dg/derived_comp_array_ref_1.f90: Likewise.\n\t* gfortran.dg/derived_comp_array_ref_2.f90: Likewise.\n\t* gfortran.dg/derived_comp_array_ref_4.f90: Likewise.\n\t* gfortran.dg/derived_comp_array_ref_7.f90: Likewise.\n\t* gfortran.dg/derived_constructor_char_3.f90: Likewise.\n\t* gfortran.dg/derived_constructor_comps_1.f90: Likewise.\n\t* gfortran.dg/derived_constructor_comps_4.f90: Likewise.\n\t* gfortran.dg/derived_constructor_comps_5.f90: Likewise.\n\t* gfortran.dg/derived_constructor_comps_6.f90: Likewise.\n\t* gfortran.dg/derived_external_function_1.f90: Likewise.\n\t* gfortran.dg/derived_init_1.f90: Likewise.\n\t* gfortran.dg/derived_init_2.f90: Likewise.\n\t* gfortran.dg/derived_init_3.f90: Likewise.\n\t* gfortran.dg/derived_init_4.f90: Likewise.\n\t* gfortran.dg/derived_pointer_null_1.f90: Likewise.\n\t* gfortran.dg/derived_pointer_recursion_2.f90: Likewise.\n\t* gfortran.dg/dev_null.F90: Likewise.\n\t* gfortran.dg/dfloat_1.f90: Likewise.\n\t* gfortran.dg/dim_sum_1.f90: Likewise.\n\t* gfortran.dg/dim_sum_2.f90: Likewise.\n\t* gfortran.dg/dim_sum_3.f90: Likewise.\n\t* gfortran.dg/direct_io_10.f: Likewise.\n\t* gfortran.dg/direct_io_11.f90: Likewise.\n\t* gfortran.dg/direct_io_12.f90: Likewise.\n\t* gfortran.dg/direct_io_2.f90: Likewise.\n\t* gfortran.dg/direct_io_3.f90: Likewise.\n\t* gfortran.dg/direct_io_4.f90: Likewise.\n\t* gfortran.dg/direct_io_5.f90: Likewise.\n\t* gfortran.dg/direct_io_6.f90: Likewise.\n\t* gfortran.dg/direct_io_7.f90: Likewise.\n\t* gfortran.dg/direct_io_8.f90: Likewise.\n\t* gfortran.dg/direct_io_9.f: Likewise.\n\t* gfortran.dg/do_1.f90: Likewise.\n\t* gfortran.dg/do_3.F90: Likewise.\n\t* gfortran.dg/do_concurrent_2.f90: Likewise.\n\t* gfortran.dg/do_concurrent_4.f90: Likewise.\n\t* gfortran.dg/do_corner_warn.f90: Likewise.\n\t* gfortran.dg/do_iterator_2.f90: Likewise.\n\t* gfortran.dg/dollar_edit_descriptor_1.f: Likewise.\n\t* gfortran.dg/dollar_edit_descriptor_2.f: Likewise.\n\t* gfortran.dg/dos_eol.f: Likewise.\n\t* gfortran.dg/dot_product_1.f03: Likewise.\n\t* gfortran.dg/dot_product_2.f90: Likewise.\n\t* gfortran.dg/dot_product_4.f90: Likewise.\n\t* gfortran.dg/dshift_1.F90: Likewise.\n\t* gfortran.dg/dshift_2.F90: Likewise.\n\t* gfortran.dg/dtio_1.f90: Likewise.\n\t* gfortran.dg/dtio_10.f90: Likewise.\n\t* gfortran.dg/dtio_12.f90: Likewise.\n\t* gfortran.dg/dtio_14.f90: Likewise.\n\t* gfortran.dg/dtio_15.f90: Likewise.\n\t* gfortran.dg/dtio_16.f90: Likewise.\n\t* gfortran.dg/dtio_17.f90: Likewise.\n\t* gfortran.dg/dtio_19.f90: Likewise.\n\t* gfortran.dg/dtio_2.f90: Likewise.\n\t* gfortran.dg/dtio_20.f03: Likewise.\n\t* gfortran.dg/dtio_22.f90: Likewise.\n\t* gfortran.dg/dtio_24.f90: Likewise.\n\t* gfortran.dg/dtio_25.f90: Likewise.\n\t* gfortran.dg/dtio_26.f03: Likewise.\n\t* gfortran.dg/dtio_27.f90: Likewise.\n\t* gfortran.dg/dtio_28.f03: Likewise.\n\t* gfortran.dg/dtio_3.f90: Likewise.\n\t* gfortran.dg/dtio_30.f03: Likewise.\n\t* gfortran.dg/dtio_31.f03: Likewise.\n\t* gfortran.dg/dtio_32.f03: Likewise.\n\t* gfortran.dg/dtio_4.f90: Likewise.\n\t* gfortran.dg/dtio_5.f90: Likewise.\n\t* gfortran.dg/dtio_7.f90: Likewise.\n\t* gfortran.dg/dtio_8.f90: Likewise.\n\t* gfortran.dg/dtio_9.f90: Likewise.\n\t* gfortran.dg/dummy_procedure_3.f90: Likewise.\n\t* gfortran.dg/dummy_procedure_7.f90: Likewise.\n\t* gfortran.dg/dup_save_1.f90: Likewise.\n\t* gfortran.dg/dup_save_2.f90: Likewise.\n\t* gfortran.dg/dynamic_dispatch_1.f03: Likewise.\n\t* gfortran.dg/dynamic_dispatch_11.f03: Likewise.\n\t* gfortran.dg/dynamic_dispatch_12.f90: Likewise.\n\t* gfortran.dg/dynamic_dispatch_2.f03: Likewise.\n\t* gfortran.dg/dynamic_dispatch_3.f03: Likewise.\n\t* gfortran.dg/dynamic_dispatch_4.f03: Likewise.\n\t* gfortran.dg/dynamic_dispatch_5.f03: Likewise.\n\t* gfortran.dg/dynamic_dispatch_7.f03: Likewise.\n\t* gfortran.dg/dynamic_dispatch_8.f03: Likewise.\n\t* gfortran.dg/dynamic_dispatch_9.f03: Likewise.\n\t* gfortran.dg/e_d_fmt.f90: Likewise.\n\t* gfortran.dg/edit_real_1.f90: Likewise.\n\t* gfortran.dg/elemental_by_value_1.f90: Likewise.\n\t* gfortran.dg/elemental_dependency_1.f90: Likewise.\n\t* gfortran.dg/elemental_dependency_4.f90: Likewise.\n\t* gfortran.dg/elemental_dependency_5.f90: Likewise.\n\t* gfortran.dg/elemental_dependency_6.f90: Likewise.\n\t* gfortran.dg/elemental_optional_args_2.f90: Likewise.\n\t* gfortran.dg/elemental_optional_args_3.f90: Likewise.\n\t* gfortran.dg/elemental_optional_args_4.f90: Likewise.\n\t* gfortran.dg/elemental_optional_args_5.f03: Likewise.\n\t* gfortran.dg/elemental_optional_args_6.f90: Likewise.\n\t* gfortran.dg/elemental_optional_args_7.f90: Likewise.\n\t* gfortran.dg/elemental_scalar_args_1.f90: Likewise.\n\t* gfortran.dg/elemental_scalar_args_2.f90: Likewise.\n\t* gfortran.dg/elemental_subroutine_1.f90: Likewise.\n\t* gfortran.dg/elemental_subroutine_10.f90: Likewise.\n\t* gfortran.dg/elemental_subroutine_11.f90: Likewise.\n\t* gfortran.dg/elemental_subroutine_2.f90: Likewise.\n\t* gfortran.dg/elemental_subroutine_3.f90: Likewise.\n\t* gfortran.dg/elemental_subroutine_7.f90: Likewise.\n\t* gfortran.dg/elemental_subroutine_9.f90: Likewise.\n\t* gfortran.dg/empty_format_1.f90: Likewise.\n\t* gfortran.dg/endfile.f: Likewise.\n\t* gfortran.dg/endfile.f90: Likewise.\n\t* gfortran.dg/endfile_2.f90: Likewise.\n\t* gfortran.dg/entry_1.f90: Likewise.\n\t* gfortran.dg/entry_10.f90: Likewise.\n\t* gfortran.dg/entry_12.f90: Likewise.\n\t* gfortran.dg/entry_13.f90: Likewise.\n\t* gfortran.dg/entry_14.f90: Likewise.\n\t* gfortran.dg/entry_16.f90: Likewise.\n\t* gfortran.dg/entry_3.f90: Likewise.\n\t* gfortran.dg/entry_6.f90: Likewise.\n\t* gfortran.dg/entry_9.f90: Likewise.\n\t* gfortran.dg/entry_array_specs_2.f: Likewise.\n\t* gfortran.dg/enum_1.f90: Likewise.\n\t* gfortran.dg/enum_9.f90: Likewise.\n\t* gfortran.dg/eof_1.f90: Likewise.\n\t* gfortran.dg/eof_2.f90: Likewise.\n\t* gfortran.dg/eof_4.f90: Likewise.\n\t* gfortran.dg/eof_5.f90: Likewise.\n\t* gfortran.dg/eor_handling_1.f90: Likewise.\n\t* gfortran.dg/eor_handling_2.f90: Likewise.\n\t* gfortran.dg/eor_handling_3.f90: Likewise.\n\t* gfortran.dg/eor_handling_4.f90: Likewise.\n\t* gfortran.dg/eor_handling_5.f90: Likewise.\n\t* gfortran.dg/eoshift_3.f90: Likewise.\n\t* gfortran.dg/eoshift_4.f90: Likewise.\n\t* gfortran.dg/eoshift_5.f90: Likewise.\n\t* gfortran.dg/eoshift_6.f90: Likewise.\n\t* gfortran.dg/eoshift_large_1.f90: Likewise.\n\t* gfortran.dg/equiv_6.f90: Likewise.\n\t* gfortran.dg/equiv_7.f90: Likewise.\n\t* gfortran.dg/equiv_9.f90: Likewise.\n\t* gfortran.dg/equiv_constraint_4.f90: Likewise.\n\t* gfortran.dg/erf_2.F90: Likewise.\n\t* gfortran.dg/erf_3.F90: Likewise.\n\t* gfortran.dg/erfc_scaled_1.f90: Likewise.\n\t* gfortran.dg/error_format_2.f90: Likewise.\n\t* gfortran.dg/error_recovery_5.f90: Likewise.\n\t* gfortran.dg/execute_command_line_2.f90: Likewise.\n\t* gfortran.dg/execute_command_line_3.f90: Likewise.\n\t* gfortran.dg/exit_1.f08: Likewise.\n\t* gfortran.dg/exit_3.f08: Likewise.\n\t* gfortran.dg/exponent_1.f90: Likewise.\n\t* gfortran.dg/exponent_2.f90: Likewise.\n\t* gfortran.dg/extended_char_comparison_1.f: Likewise.\n\t* gfortran.dg/extends_1.f03: Likewise.\n\t* gfortran.dg/extends_16.f90: Likewise.\n\t* gfortran.dg/extends_2.f03: Likewise.\n\t* gfortran.dg/extends_3.f03: Likewise.\n\t* gfortran.dg/extends_4.f03: Likewise.\n\t* gfortran.dg/extends_type_of_1.f03: Likewise.\n\t* gfortran.dg/extends_type_of_2.f03: Likewise.\n\t* gfortran.dg/external_procedures_3.f90: Likewise.\n\t* gfortran.dg/f2003_inquire_1.f03: Likewise.\n\t* gfortran.dg/f2003_io_1.f03: Likewise.\n\t* gfortran.dg/f2003_io_4.f03: Likewise.\n\t* gfortran.dg/f2003_io_5.f03: Likewise.\n\t* gfortran.dg/f2003_io_6.f03: Likewise.\n\t* gfortran.dg/f2003_io_7.f03: Likewise.\n\t* gfortran.dg/f2c_1.f90: Likewise.\n\t* gfortran.dg/f2c_2.f90: Likewise.\n\t* gfortran.dg/f2c_3.f90: Likewise.\n\t* gfortran.dg/f2c_4.f90: Likewise.\n\t* gfortran.dg/f2c_6.f90: Likewise.\n\t* gfortran.dg/f2c_7.f90: Likewise.\n\t* gfortran.dg/f2c_9.f90: Likewise.\n\t* gfortran.dg/fgetc_1.f90: Likewise.\n\t* gfortran.dg/fgetc_2.f90: Likewise.\n\t* gfortran.dg/filename_null.f90: Likewise.\n\t* gfortran.dg/finalize_12.f90: Likewise.\n\t* gfortran.dg/finalize_13.f90: Likewise.\n\t* gfortran.dg/finalize_15.f90: Likewise.\n\t* gfortran.dg/finalize_17.f90: Likewise.\n\t* gfortran.dg/finalize_18.f90: Likewise.\n\t* gfortran.dg/finalize_25.f90: Likewise.\n\t* gfortran.dg/finalize_29.f08: Likewise.\n\t* gfortran.dg/finalize_31.f90: Likewise.\n\t* gfortran.dg/float_1.f90: Likewise.\n\t* gfortran.dg/flush_1.f90: Likewise.\n\t* gfortran.dg/fmt_bz_bn.f: Likewise.\n\t* gfortran.dg/fmt_bz_bn_err.f: Likewise.\n\t* gfortran.dg/fmt_cache_1.f: Likewise.\n\t* gfortran.dg/fmt_cache_2.f: Likewise.\n\t* gfortran.dg/fmt_cache_3.f90: Likewise.\n\t* gfortran.dg/fmt_colon.f90: Likewise.\n\t* gfortran.dg/fmt_e.f90: Likewise.\n\t* gfortran.dg/fmt_en.f90: Likewise.\n\t* gfortran.dg/fmt_error_10.f: Likewise.\n\t* gfortran.dg/fmt_error_9.f: Likewise.\n\t* gfortran.dg/fmt_exhaust.f90: Likewise.\n\t* gfortran.dg/fmt_f0_1.f90: Likewise.\n\t* gfortran.dg/fmt_f_an_p.f: Likewise.\n\t* gfortran.dg/fmt_fw_d.f90: Likewise.\n\t* gfortran.dg/fmt_g.f: Likewise.\n\t* gfortran.dg/fmt_g0_1.f08: Likewise.\n\t* gfortran.dg/fmt_g0_2.f08: Likewise.\n\t* gfortran.dg/fmt_g0_4.f08: Likewise.\n\t* gfortran.dg/fmt_g0_5.f08: Likewise.\n\t* gfortran.dg/fmt_g0_6.f08: Likewise.\n\t* gfortran.dg/fmt_g0_7.f08: Likewise.\n\t* gfortran.dg/fmt_g_1.f90: Likewise.\n\t* gfortran.dg/fmt_int_sign.f90: Likewise.\n\t* gfortran.dg/fmt_l.f90: Likewise.\n\t* gfortran.dg/fmt_missing_period_2.f: Likewise.\n\t* gfortran.dg/fmt_missing_period_3.f: Likewise.\n\t* gfortran.dg/fmt_p_1.f90: Likewise.\n\t* gfortran.dg/fmt_pf.f90: Likewise.\n\t* gfortran.dg/fmt_read.f90: Likewise.\n\t* gfortran.dg/fmt_read_bz_bn.f90: Likewise.\n\t* gfortran.dg/fmt_t_1.f90: Likewise.\n\t* gfortran.dg/fmt_t_2.f90: Likewise.\n\t* gfortran.dg/fmt_t_3.f90: Likewise.\n\t* gfortran.dg/fmt_t_4.f90: Likewise.\n\t* gfortran.dg/fmt_t_5.f90: Likewise.\n\t* gfortran.dg/fmt_t_6.f: Likewise.\n\t* gfortran.dg/fmt_t_7.f: Likewise.\n\t* gfortran.dg/fmt_t_9.f: Likewise.\n\t* gfortran.dg/fmt_tl.f: Likewise.\n\t* gfortran.dg/fmt_unlimited.f90: Likewise.\n\t* gfortran.dg/fmt_white.f: Likewise.\n\t* gfortran.dg/fmt_zero_digits.f90: Likewise.\n\t* gfortran.dg/fold_nearest.f90: Likewise.\n\t* gfortran.dg/forall_1.f90: Likewise.\n\t* gfortran.dg/forall_10.f90: Likewise.\n\t* gfortran.dg/forall_12.f90: Likewise.\n\t* gfortran.dg/forall_13.f90: Likewise.\n\t* gfortran.dg/forall_15.f90: Likewise.\n\t* gfortran.dg/forall_4.f90: Likewise.\n\t* gfortran.dg/forall_5.f90: Likewise.\n\t* gfortran.dg/forall_6.f90: Likewise.\n\t* gfortran.dg/forall_7.f90: Likewise.\n\t* gfortran.dg/fraction.f90: Likewise.\n\t* gfortran.dg/fseek.f90: Likewise.\n\t* gfortran.dg/ftell_1.f90: Likewise.\n\t* gfortran.dg/ftell_2.f90: Likewise.\n\t* gfortran.dg/ftell_3.f90: Likewise.\n\t* gfortran.dg/func_assign_2.f90: Likewise.\n\t* gfortran.dg/func_assign_3.f90: Likewise.\n\t* gfortran.dg/func_derived_1.f90: Likewise.\n\t* gfortran.dg/func_derived_2.f90: Likewise.\n\t* gfortran.dg/func_derived_3.f90: Likewise.\n\t* gfortran.dg/func_result_1.f90: Likewise.\n\t* gfortran.dg/func_result_2.f90: Likewise.\n\t* gfortran.dg/func_result_6.f90: Likewise.\n\t* gfortran.dg/function_charlen_2.f90: Likewise.\n\t* gfortran.dg/function_charlen_3.f: Likewise.\n\t* gfortran.dg/function_kinds_1.f90: Likewise.\n\t* gfortran.dg/function_kinds_4.f90: Likewise.\n\t* gfortran.dg/function_optimize_10.f90: Likewise.\n\t* gfortran.dg/function_optimize_11.f90: Likewise.\n\t* gfortran.dg/function_optimize_12.f90: Likewise.\n\t* gfortran.dg/function_optimize_4.f90: Likewise.\n\t* gfortran.dg/function_optimize_8.f90: Likewise.\n\t* gfortran.dg/g77/13037.f: Likewise.\n\t* gfortran.dg/g77/1832.f: Likewise.\n\t* gfortran.dg/g77/19981119-0.f: Likewise.\n\t* gfortran.dg/g77/19990313-0.f: Likewise.\n\t* gfortran.dg/g77/19990313-1.f: Likewise.\n\t* gfortran.dg/g77/19990313-2.f: Likewise.\n\t* gfortran.dg/g77/19990313-3.f: Likewise.\n\t* gfortran.dg/g77/19990419-1.f: Likewise.\n\t* gfortran.dg/g77/19990826-0.f: Likewise.\n\t* gfortran.dg/g77/19990826-2.f: Likewise.\n\t* gfortran.dg/g77/20000503-1.f: Likewise.\n\t* gfortran.dg/g77/20001111.f: Likewise.\n\t* gfortran.dg/g77/20010116.f: Likewise.\n\t* gfortran.dg/g77/20010216-1.f: Likewise.\n\t* gfortran.dg/g77/20010430.f: Likewise.\n\t* gfortran.dg/g77/20010610.f: Likewise.\n\t* gfortran.dg/g77/6177.f: Likewise.\n\t* gfortran.dg/g77/7388.f: Likewise.\n\t* gfortran.dg/g77/947.f: Likewise.\n\t* gfortran.dg/g77/970625-2.f: Likewise.\n\t* gfortran.dg/g77/971102-1.f: Likewise.\n\t* gfortran.dg/g77/980628-0.f: Likewise.\n\t* gfortran.dg/g77/980628-1.f: Likewise.\n\t* gfortran.dg/g77/980628-10.f: Likewise.\n\t* gfortran.dg/g77/980628-2.f: Likewise.\n\t* gfortran.dg/g77/980628-3.f: Likewise.\n\t* gfortran.dg/g77/980628-7.f: Likewise.\n\t* gfortran.dg/g77/980628-8.f: Likewise.\n\t* gfortran.dg/g77/980628-9.f: Likewise.\n\t* gfortran.dg/g77/980701-0.f: Likewise.\n\t* gfortran.dg/g77/980701-1.f: Likewise.\n\t* gfortran.dg/g77/cabs.f: Likewise.\n\t* gfortran.dg/g77/claus.f: Likewise.\n\t* gfortran.dg/g77/complex_1.f: Likewise.\n\t* gfortran.dg/g77/cpp3.F: Likewise.\n\t* gfortran.dg/g77/cpp4.F: Likewise.\n\t* gfortran.dg/g77/cpp5.F: Likewise.\n\t* gfortran.dg/g77/dcomplex.f: Likewise.\n\t* gfortran.dg/g77/dnrm2.f: Likewise.\n\t* gfortran.dg/g77/erfc.f: Likewise.\n\t* gfortran.dg/g77/f77-edit-i-in.f: Likewise.\n\t* gfortran.dg/g77/f77-edit-t-in.f: Likewise.\n\t* gfortran.dg/g77/f90-intrinsic-bit.f: Likewise.\n\t* gfortran.dg/g77/f90-intrinsic-mathematical.f: Likewise.\n\t* gfortran.dg/g77/f90-intrinsic-numeric.f: Likewise.\n\t* gfortran.dg/g77/int8421.f: Likewise.\n\t* gfortran.dg/g77/intrinsic-unix-bessel.f: Likewise.\n\t* gfortran.dg/g77/intrinsic-unix-erf.f: Likewise.\n\t* gfortran.dg/g77/le.f: Likewise.\n\t* gfortran.dg/g77/short.f: Likewise.\n\t* gfortran.dg/gamma_1.f90: Likewise.\n\t* gfortran.dg/gamma_4.f90: Likewise.\n\t* gfortran.dg/gamma_5.f90: Likewise.\n\t* gfortran.dg/generic_13.f90: Likewise.\n\t* gfortran.dg/generic_15.f90: Likewise.\n\t* gfortran.dg/generic_19.f90: Likewise.\n\t* gfortran.dg/generic_20.f90: Likewise.\n\t* gfortran.dg/generic_23.f03: Likewise.\n\t* gfortran.dg/generic_25.f90: Likewise.\n\t* gfortran.dg/generic_27.f90: Likewise.\n\t* gfortran.dg/generic_31.f90: Likewise.\n\t* gfortran.dg/generic_4.f90: Likewise.\n\t* gfortran.dg/global_vars_c_init.f90: Likewise.\n\t* gfortran.dg/global_vars_f90_init.f90: Likewise.\n\t* gfortran.dg/gnu_logical_1.F: Likewise.\n\t* gfortran.dg/goacc/fixed-1.f: Likewise.\n\t* gfortran.dg/goacc/fixed-2.f: Likewise.\n\t* gfortran.dg/goacc/gang-static.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop-2.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop-data-2.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop-data-enter-exit-2.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop-data-enter-exit.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop-data-update.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop-data.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop-n.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop.f95: Likewise.\n\t* gfortran.dg/goacc/omp-fixed.f: Likewise.\n\t* gfortran.dg/gomp/crayptr5.f90: Likewise.\n\t* gfortran.dg/gomp/pr48794-2.f90: Likewise.\n\t* gfortran.dg/gomp/pr48794.f90: Likewise.\n\t* gfortran.dg/gomp/pr72744.f90: Likewise.\n\t* gfortran.dg/gomp/pr77665.f90: Likewise.\n\t* gfortran.dg/gomp/workshare2.f90: Likewise.\n\t* gfortran.dg/gomp/workshare3.f90: Likewise.\n\t* gfortran.dg/goto_1.f: Likewise.\n\t* gfortran.dg/goto_2.f90: Likewise.\n\t* gfortran.dg/goto_4.f90: Likewise.\n\t* gfortran.dg/goto_6.f: Likewise.\n\t* gfortran.dg/graphite/id-26.f03: Likewise.\n\t* gfortran.dg/graphite/id-pr45370.f90: Likewise.\n\t* gfortran.dg/graphite/pr29581.f90: Likewise.\n\t* gfortran.dg/graphite/pr29832.f90: Likewise.\n\t* gfortran.dg/graphite/run-id-1.f: Likewise.\n\t* gfortran.dg/graphite/run-id-2.f90: Likewise.\n\t* gfortran.dg/graphite/run-id-3.f90: Likewise.\n\t* gfortran.dg/hollerith.f90: Likewise.\n\t* gfortran.dg/hollerith4.f90: Likewise.\n\t* gfortran.dg/hollerith6.f90: Likewise.\n\t* gfortran.dg/hollerith8.f90: Likewise.\n\t* gfortran.dg/hollerith_1.f90: Likewise.\n\t* gfortran.dg/hollerith_character_array_constructor.f90: Likewise.\n\t* gfortran.dg/hollerith_f95.f90: Likewise.\n\t* gfortran.dg/hollerith_legacy.f90: Likewise.\n\t* gfortran.dg/host_assoc_call_3.f90: Likewise.\n\t* gfortran.dg/host_assoc_function_1.f90: Likewise.\n\t* gfortran.dg/host_assoc_function_3.f90: Likewise.\n\t* gfortran.dg/host_assoc_function_4.f90: Likewise.\n\t* gfortran.dg/host_assoc_function_9.f90: Likewise.\n\t* gfortran.dg/host_dummy_index_1.f90: Likewise.\n\t* gfortran.dg/hypot_1.f90: Likewise.\n\t* gfortran.dg/iall_iany_iparity_1.f90: Likewise.\n\t* gfortran.dg/iargc.f90: Likewise.\n\t* gfortran.dg/ibits.f90: Likewise.\n\t* gfortran.dg/ichar_1.f90: Likewise.\n\t* gfortran.dg/ichar_2.f90: Likewise.\n\t* gfortran.dg/ieee/ieee_1.F90: Likewise.\n\t* gfortran.dg/ieee/ieee_2.f90: Likewise.\n\t* gfortran.dg/ieee/ieee_3.f90: Likewise.\n\t* gfortran.dg/ieee/ieee_4.f90: Likewise.\n\t* gfortran.dg/ieee/ieee_6.f90: Likewise.\n\t* gfortran.dg/ieee/ieee_7.f90: Likewise.\n\t* gfortran.dg/ieee/ieee_8.f90: Likewise.\n\t* gfortran.dg/ieee/intrinsics_1.f90: Likewise.\n\t* gfortran.dg/ieee/intrinsics_2.F90: Likewise.\n\t* gfortran.dg/ieee/large_1.f90: Likewise.\n\t* gfortran.dg/ieee/large_2.f90: Likewise.\n\t* gfortran.dg/ieee/large_3.F90: Likewise.\n\t* gfortran.dg/ieee/large_4.f90: Likewise.\n\t* gfortran.dg/ieee/rounding_1.f90: Likewise.\n\t* gfortran.dg/ieee/underflow_1.f90: Likewise.\n\t* gfortran.dg/impl_do_var_data.f90: Likewise.\n\t* gfortran.dg/implicit_10.f90: Likewise.\n\t* gfortran.dg/implicit_12.f90: Likewise.\n\t* gfortran.dg/implicit_class_1.f90: Likewise.\n\t* gfortran.dg/implicit_pure_1.f90: Likewise.\n\t* gfortran.dg/implied_do_1.f90: Likewise.\n\t* gfortran.dg/implied_do_io_1.f90: Likewise.\n\t* gfortran.dg/implied_do_io_2.f90: Likewise.\n\t* gfortran.dg/implied_do_io_3.f90: Likewise.\n\t* gfortran.dg/implied_shape_1.f08: Likewise.\n\t* gfortran.dg/import.f90: Likewise.\n\t* gfortran.dg/import4.f90: Likewise.\n\t* gfortran.dg/impure_1.f08: Likewise.\n\t* gfortran.dg/index.f90: Likewise.\n\t* gfortran.dg/index_2.f90: Likewise.\n\t* gfortran.dg/init_flag_1.f90: Likewise.\n\t* gfortran.dg/init_flag_10.f90: Likewise.\n\t* gfortran.dg/init_flag_15.f03: Likewise.\n\t* gfortran.dg/init_flag_2.f90: Likewise.\n\t* gfortran.dg/init_flag_3.f90: Likewise.\n\t* gfortran.dg/init_flag_4.f90: Likewise.\n\t* gfortran.dg/init_flag_5.f90: Likewise.\n\t* gfortran.dg/init_flag_6.f90: Likewise.\n\t* gfortran.dg/init_flag_7.f90: Likewise.\n\t* gfortran.dg/init_flag_9.f90: Likewise.\n\t* gfortran.dg/initialization_11.f90: Likewise.\n\t* gfortran.dg/initialization_19.f90: Likewise.\n\t* gfortran.dg/initialization_2.f90: Likewise.\n\t* gfortran.dg/initialization_22.f90: Likewise.\n\t* gfortran.dg/initialization_27.f90: Likewise.\n\t* gfortran.dg/initialization_5.f90: Likewise.\n\t* gfortran.dg/initialization_6.f90: Likewise.\n\t* gfortran.dg/inline_matmul_1.f90: Likewise.\n\t* gfortran.dg/inline_matmul_10.f90: Likewise.\n\t* gfortran.dg/inline_matmul_11.f90: Likewise.\n\t* gfortran.dg/inline_matmul_13.f90: Likewise.\n\t* gfortran.dg/inline_matmul_14.f90: Likewise.\n\t* gfortran.dg/inline_matmul_16.f90: Likewise.\n\t* gfortran.dg/inline_matmul_17.f90: Likewise.\n\t* gfortran.dg/inline_matmul_18.f90: Likewise.\n\t* gfortran.dg/inline_matmul_19.f90: Likewise.\n\t* gfortran.dg/inline_matmul_2.f90: Likewise.\n\t* gfortran.dg/inline_matmul_20.f90: Likewise.\n\t* gfortran.dg/inline_matmul_22.f90: Likewise.\n\t* gfortran.dg/inline_matmul_3.f90: Likewise.\n\t* gfortran.dg/inline_matmul_4.f90: Likewise.\n\t* gfortran.dg/inline_matmul_5.f90: Likewise.\n\t* gfortran.dg/inline_matmul_6.f90: Likewise.\n\t* gfortran.dg/inline_matmul_7.f90: Likewise.\n\t* gfortran.dg/inline_matmul_8.f90: Likewise.\n\t* gfortran.dg/inline_matmul_9.f90: Likewise.\n\t* gfortran.dg/inline_sum_1.f90: Likewise.\n\t* gfortran.dg/inline_sum_3.f90: Likewise.\n\t* gfortran.dg/inline_sum_5.f90: Likewise.\n\t* gfortran.dg/inquire-complex.f90: Likewise.\n\t* gfortran.dg/inquire.f90: Likewise.\n\t* gfortran.dg/inquire_10.f90: Likewise.\n\t* gfortran.dg/inquire_13.f90: Likewise.\n\t* gfortran.dg/inquire_15.f90: Likewise.\n\t* gfortran.dg/inquire_16.f90: Likewise.\n\t* gfortran.dg/inquire_17.f90: Likewise.\n\t* gfortran.dg/inquire_5.f90: Likewise.\n\t* gfortran.dg/inquire_6.f90: Likewise.\n\t* gfortran.dg/inquire_7.f90: Likewise.\n\t* gfortran.dg/inquire_9.f90: Likewise.\n\t* gfortran.dg/inquire_internal.f90: Likewise.\n\t* gfortran.dg/inquire_recl_f2018.f90: Likewise.\n\t* gfortran.dg/inquire_size.f90: Likewise.\n\t* gfortran.dg/int_1.f90: Likewise.\n\t* gfortran.dg/int_conv_1.f90: Likewise.\n\t* gfortran.dg/int_range_io_1.f90: Likewise.\n\t* gfortran.dg/integer_exponentiation_2.f90: Likewise.\n\t* gfortran.dg/integer_exponentiation_3.F90: Likewise.\n\t* gfortran.dg/integer_exponentiation_5.F90: Likewise.\n\t* gfortran.dg/integer_plus.f90: Likewise.\n\t* gfortran.dg/intent_out_2.f90: Likewise.\n\t* gfortran.dg/intent_out_5.f90: Likewise.\n\t* gfortran.dg/intent_out_6.f90: Likewise.\n\t* gfortran.dg/interface_12.f90: Likewise.\n\t* gfortran.dg/interface_19.f90: Likewise.\n\t* gfortran.dg/interface_4.f90: Likewise.\n\t* gfortran.dg/interface_5.f90: Likewise.\n\t* gfortran.dg/interface_9.f90: Likewise.\n\t* gfortran.dg/interface_assignment_1.f90: Likewise.\n\t* gfortran.dg/interface_assignment_2.f90: Likewise.\n\t* gfortran.dg/internal_dummy_2.f08: Likewise.\n\t* gfortran.dg/internal_dummy_3.f08: Likewise.\n\t* gfortran.dg/internal_dummy_4.f08: Likewise.\n\t* gfortran.dg/internal_pack_1.f90: Likewise.\n\t* gfortran.dg/internal_pack_10.f90: Likewise.\n\t* gfortran.dg/internal_pack_12.f90: Likewise.\n\t* gfortran.dg/internal_pack_13.f90: Likewise.\n\t* gfortran.dg/internal_pack_14.f90: Likewise.\n\t* gfortran.dg/internal_pack_15.f90: Likewise.\n\t* gfortran.dg/internal_pack_2.f90: Likewise.\n\t* gfortran.dg/internal_pack_3.f90: Likewise.\n\t* gfortran.dg/internal_pack_4.f90: Likewise.\n\t* gfortran.dg/internal_pack_6.f90: Likewise.\n\t* gfortran.dg/internal_pack_8.f90: Likewise.\n\t* gfortran.dg/internal_readwrite_1.f90: Likewise.\n\t* gfortran.dg/internal_readwrite_2.f90: Likewise.\n\t* gfortran.dg/internal_readwrite_3.f90: Likewise.\n\t* gfortran.dg/intrinsic_actual_1.f: Likewise.\n\t* gfortran.dg/intrinsic_actual_2.f90: Likewise.\n\t* gfortran.dg/intrinsic_actual_4.f90: Likewise.\n\t* gfortran.dg/intrinsic_argument_conformance_2.f90: Likewise.\n\t* gfortran.dg/intrinsic_char_1.f90: Likewise.\n\t* gfortran.dg/intrinsic_ifunction_1.f90: Likewise.\n\t* gfortran.dg/intrinsic_intkinds_1.f90: Likewise.\n\t* gfortran.dg/intrinsic_modulo_1.f90: Likewise.\n\t* gfortran.dg/intrinsic_pack_1.f90: Likewise.\n\t* gfortran.dg/intrinsic_pack_2.f90: Likewise.\n\t* gfortran.dg/intrinsic_pack_3.f90: Likewise.\n\t* gfortran.dg/intrinsic_pack_5.f90: Likewise.\n\t* gfortran.dg/intrinsic_product_1.f90: Likewise.\n\t* gfortran.dg/intrinsic_sign_1.f90: Likewise.\n\t* gfortran.dg/intrinsic_sign_2.f90: Likewise.\n\t* gfortran.dg/intrinsic_spread_1.f90: Likewise.\n\t* gfortran.dg/intrinsic_spread_2.f90: Likewise.\n\t* gfortran.dg/intrinsic_spread_3.f90: Likewise.\n\t* gfortran.dg/intrinsic_unpack_1.f90: Likewise.\n\t* gfortran.dg/intrinsic_unpack_2.f90: Likewise.\n\t* gfortran.dg/intrinsic_unpack_3.f90: Likewise.\n\t* gfortran.dg/intrinsic_verify_1.f90: Likewise.\n\t* gfortran.dg/intrinsics_kind_argument_1.f90: Likewise.\n\t* gfortran.dg/io_err_1.f90: Likewise.\n\t* gfortran.dg/io_real_boz.f90: Likewise.\n\t* gfortran.dg/iomsg_1.f90: Likewise.\n\t* gfortran.dg/iostat_1.f90: Likewise.\n\t* gfortran.dg/iostat_2.f90: Likewise.\n\t* gfortran.dg/iostat_4.f90: Likewise.\n\t* gfortran.dg/is_iostat_end_eor_1.f90: Likewise.\n\t* gfortran.dg/ishft_1.f90: Likewise.\n\t* gfortran.dg/ishft_2.f90: Likewise.\n\t* gfortran.dg/ishft_4.f90: Likewise.\n\t* gfortran.dg/isnan_1.f90: Likewise.\n\t* gfortran.dg/isnan_2.f90: Likewise.\n\t* gfortran.dg/iso_c_binding_rename_1.f03: Likewise.\n\t* gfortran.dg/iso_c_binding_rename_2.f03: Likewise.\n\t* gfortran.dg/iso_fortran_env_1.f90: Likewise.\n\t* gfortran.dg/iso_fortran_env_3.f90: Likewise.\n\t* gfortran.dg/iso_fortran_env_5.f90: Likewise.\n\t* gfortran.dg/iso_fortran_env_6.f90: Likewise.\n\t* gfortran.dg/itime_idate_1.f: Likewise.\n\t* gfortran.dg/itime_idate_2.f: Likewise.\n\t* gfortran.dg/large_integer_kind_1.f90: Likewise.\n\t* gfortran.dg/large_integer_kind_2.f90: Likewise.\n\t* gfortran.dg/large_real_kind_1.f90: Likewise.\n\t* gfortran.dg/large_real_kind_2.F90: Likewise.\n\t* gfortran.dg/large_real_kind_3.F90: Likewise.\n\t* gfortran.dg/large_real_kind_form_io_1.f90: Likewise.\n\t* gfortran.dg/large_real_kind_form_io_2.f90: Likewise.\n\t* gfortran.dg/large_recl.f90: Likewise.\n\t* gfortran.dg/large_unit_1.f90: Likewise.\n\t* gfortran.dg/large_unit_2.f90: Likewise.\n\t* gfortran.dg/largeequiv_1.f90: Likewise.\n\t* gfortran.dg/leadz_trailz_1.f90: Likewise.\n\t* gfortran.dg/leadz_trailz_2.f90: Likewise.\n\t* gfortran.dg/leadz_trailz_3.f90: Likewise.\n\t* gfortran.dg/list_read_1.f90: Likewise.\n\t* gfortran.dg/list_read_10.f90: Likewise.\n\t* gfortran.dg/list_read_11.f90: Likewise.\n\t* gfortran.dg/list_read_12.f90: Likewise.\n\t* gfortran.dg/list_read_13.f: Likewise.\n\t* gfortran.dg/list_read_14.f90: Likewise.\n\t* gfortran.dg/list_read_2.f90: Likewise.\n\t* gfortran.dg/list_read_3.f90: Likewise.\n\t* gfortran.dg/list_read_4.f90: Likewise.\n\t* gfortran.dg/list_read_5.f90: Likewise.\n\t* gfortran.dg/list_read_6.f90: Likewise.\n\t* gfortran.dg/list_read_7.f90: Likewise.\n\t* gfortran.dg/list_read_8.f90: Likewise.\n\t* gfortran.dg/list_read_9.f90: Likewise.\n\t* gfortran.dg/loc_2.f90: Likewise.\n\t* gfortran.dg/logical_1.f90: Likewise.\n\t* gfortran.dg/logical_dot_product.f90: Likewise.\n\t* gfortran.dg/logical_temp_io.f90: Likewise.\n\t* gfortran.dg/logical_temp_io_kind8.f90: Likewise.\n\t* gfortran.dg/lrshift_1.f90: Likewise.\n\t* gfortran.dg/ltime_gmtime_1.f90: Likewise.\n\t* gfortran.dg/ltime_gmtime_2.f90: Likewise.\n\t* gfortran.dg/lto/pr40725_0.f03: Likewise.\n\t* gfortran.dg/lto/pr41576_1.f90: Likewise.\n\t* gfortran.dg/make_unit.f90: Likewise.\n\t* gfortran.dg/mapping_1.f90: Likewise.\n\t* gfortran.dg/mapping_2.f90: Likewise.\n\t* gfortran.dg/mapping_3.f90: Likewise.\n\t* gfortran.dg/masklr_1.F90: Likewise.\n\t* gfortran.dg/masklr_2.F90: Likewise.\n\t* gfortran.dg/matmul_1.f90: Likewise.\n\t* gfortran.dg/matmul_10.f90: Likewise.\n\t* gfortran.dg/matmul_12.f90: Likewise.\n\t* gfortran.dg/matmul_16.f90: Likewise.\n\t* gfortran.dg/matmul_17.f90: Likewise.\n\t* gfortran.dg/matmul_18.f90: Likewise.\n\t* gfortran.dg/matmul_2.f90: Likewise.\n\t* gfortran.dg/matmul_3.f90: Likewise.\n\t* gfortran.dg/matmul_4.f90: Likewise.\n\t* gfortran.dg/matmul_6.f90: Likewise.\n\t* gfortran.dg/matmul_8.f03: Likewise.\n\t* gfortran.dg/matmul_9.f90: Likewise.\n\t* gfortran.dg/matmul_bounds_12.f90: Likewise.\n\t* gfortran.dg/matmul_bounds_6.f90: Likewise.\n\t* gfortran.dg/matmul_const.f90: Likewise.\n\t* gfortran.dg/maxloc_1.f90: Likewise.\n\t* gfortran.dg/maxloc_2.f90: Likewise.\n\t* gfortran.dg/maxloc_3.f90: Likewise.\n\t* gfortran.dg/maxloc_4.f90: Likewise.\n\t* gfortran.dg/maxloc_string_1.f90: Likewise.\n\t* gfortran.dg/maxlocval_1.f90: Likewise.\n\t* gfortran.dg/maxlocval_2.f90: Likewise.\n\t* gfortran.dg/maxlocval_3.f90: Likewise.\n\t* gfortran.dg/maxlocval_4.f90: Likewise.\n\t* gfortran.dg/maxval_char_1.f90: Likewise.\n\t* gfortran.dg/maxval_char_2.f90: Likewise.\n\t* gfortran.dg/maxval_char_3.f90: Likewise.\n\t* gfortran.dg/maxval_char_4.f90: Likewise.\n\t* gfortran.dg/maxval_parameter_1.f90: Likewise.\n\t* gfortran.dg/mclock.f90: Likewise.\n\t* gfortran.dg/merge_bits_1.F90: Likewise.\n\t* gfortran.dg/merge_bits_2.F90: Likewise.\n\t* gfortran.dg/merge_char_1.f90: Likewise.\n\t* gfortran.dg/merge_init_expr.f90: Likewise.\n\t* gfortran.dg/min_max_optional_1.f90: Likewise.\n\t* gfortran.dg/min_max_optional_5.f90: Likewise.\n\t* gfortran.dg/minloc_1.f90: Likewise.\n\t* gfortran.dg/minloc_2.f90: Likewise.\n\t* gfortran.dg/minloc_3.f90: Likewise.\n\t* gfortran.dg/minloc_4.f90: Likewise.\n\t* gfortran.dg/minloc_string_1.f90: Likewise.\n\t* gfortran.dg/minlocval_1.f90: Likewise.\n\t* gfortran.dg/minlocval_2.f90: Likewise.\n\t* gfortran.dg/minlocval_3.f90: Likewise.\n\t* gfortran.dg/minlocval_4.f90: Likewise.\n\t* gfortran.dg/minmax_char_1.f90: Likewise.\n\t* gfortran.dg/minmaxloc_1.f90: Likewise.\n\t* gfortran.dg/minmaxloc_10.f90: Likewise.\n\t* gfortran.dg/minmaxloc_11.f90: Likewise.\n\t* gfortran.dg/minmaxloc_12.f90: Likewise.\n\t* gfortran.dg/minmaxloc_13.f90: Likewise.\n\t* gfortran.dg/minmaxloc_2.f90: Likewise.\n\t* gfortran.dg/minmaxloc_3.f90: Likewise.\n\t* gfortran.dg/minmaxloc_4.f90: Likewise.\n\t* gfortran.dg/minmaxloc_5.f90: Likewise.\n\t* gfortran.dg/minmaxloc_6.f90: Likewise.\n\t* gfortran.dg/minmaxloc_7.f90: Likewise.\n\t* gfortran.dg/minmaxloc_8.f90: Likewise.\n\t* gfortran.dg/minmaxval_1.f90: Likewise.\n\t* gfortran.dg/minval_char_1.f90: Likewise.\n\t* gfortran.dg/minval_char_2.f90: Likewise.\n\t* gfortran.dg/minval_char_3.f90: Likewise.\n\t* gfortran.dg/minval_char_4.f90: Likewise.\n\t* gfortran.dg/minval_char_5.f90: Likewise.\n\t* gfortran.dg/minval_parameter_1.f90: Likewise.\n\t* gfortran.dg/missing_optional_dummy_1.f90: Likewise.\n\t* gfortran.dg/missing_optional_dummy_2.f90: Likewise.\n\t* gfortran.dg/missing_optional_dummy_6.f90: Likewise.\n\t* gfortran.dg/missing_parens_1.f90: Likewise.\n\t* gfortran.dg/missing_parens_2.f90: Likewise.\n\t* gfortran.dg/mod_large_1.f90: Likewise.\n\t* gfortran.dg/mod_sign0_1.f90: Likewise.\n\t* gfortran.dg/module_blank_common.f90: Likewise.\n\t* gfortran.dg/module_commons_1.f90: Likewise.\n\t* gfortran.dg/module_commons_3.f90: Likewise.\n\t* gfortran.dg/module_double_reuse.f90: Likewise.\n\t* gfortran.dg/module_equivalence_1.f90: Likewise.\n\t* gfortran.dg/module_equivalence_2.f90: Likewise.\n\t* gfortran.dg/module_equivalence_3.f90: Likewise.\n\t* gfortran.dg/module_equivalence_5.f90: Likewise.\n\t* gfortran.dg/module_interface_1.f90: Likewise.\n\t* gfortran.dg/module_nan.f90: Likewise.\n\t* gfortran.dg/module_private_array_refs_1.f90: Likewise.\n\t* gfortran.dg/module_procedure_1.f90: Likewise.\n\t* gfortran.dg/module_read_1.f90: Likewise.\n\t* gfortran.dg/module_read_2.f90: Likewise.\n\t* gfortran.dg/module_widestring_1.f90: Likewise.\n\t* gfortran.dg/move_alloc.f90: Likewise.\n\t* gfortran.dg/move_alloc_10.f90: Likewise.\n\t* gfortran.dg/move_alloc_13.f90: Likewise.\n\t* gfortran.dg/move_alloc_14.f90: Likewise.\n\t* gfortran.dg/move_alloc_15.f90: Likewise.\n\t* gfortran.dg/move_alloc_16.f90: Likewise.\n\t* gfortran.dg/move_alloc_2.f90: Likewise.\n\t* gfortran.dg/move_alloc_5.f90: Likewise.\n\t* gfortran.dg/move_alloc_6.f90: Likewise.\n\t* gfortran.dg/move_alloc_9.f90: Likewise.\n\t* gfortran.dg/multiple_allocation_1.f90: Likewise.\n\t* gfortran.dg/multiple_allocation_3.f90: Likewise.\n\t* gfortran.dg/mvbits_1.f90: Likewise.\n\t* gfortran.dg/mvbits_2.f90: Likewise.\n\t* gfortran.dg/mvbits_3.f90: Likewise.\n\t* gfortran.dg/mvbits_4.f90: Likewise.\n\t* gfortran.dg/mvbits_7.f90: Likewise.\n\t* gfortran.dg/mvbits_8.f90: Likewise.\n\t* gfortran.dg/namelist_11.f: Likewise.\n\t* gfortran.dg/namelist_12.f: Likewise.\n\t* gfortran.dg/namelist_13.f90: Likewise.\n\t* gfortran.dg/namelist_14.f90: Likewise.\n\t* gfortran.dg/namelist_15.f90: Likewise.\n\t* gfortran.dg/namelist_16.f90: Likewise.\n\t* gfortran.dg/namelist_17.f90: Likewise.\n\t* gfortran.dg/namelist_18.f90: Likewise.\n\t* gfortran.dg/namelist_19.f90: Likewise.\n\t* gfortran.dg/namelist_20.f90: Likewise.\n\t* gfortran.dg/namelist_21.f90: Likewise.\n\t* gfortran.dg/namelist_22.f90: Likewise.\n\t* gfortran.dg/namelist_23.f90: Likewise.\n\t* gfortran.dg/namelist_24.f90: Likewise.\n\t* gfortran.dg/namelist_26.f90: Likewise.\n\t* gfortran.dg/namelist_27.f90: Likewise.\n\t* gfortran.dg/namelist_28.f90: Likewise.\n\t* gfortran.dg/namelist_29.f90: Likewise.\n\t* gfortran.dg/namelist_37.f90: Likewise.\n\t* gfortran.dg/namelist_38.f90: Likewise.\n\t* gfortran.dg/namelist_39.f90: Likewise.\n\t* gfortran.dg/namelist_40.f90: Likewise.\n\t* gfortran.dg/namelist_41.f90: Likewise.\n\t* gfortran.dg/namelist_42.f90: Likewise.\n\t* gfortran.dg/namelist_43.f90: Likewise.\n\t* gfortran.dg/namelist_44.f90: Likewise.\n\t* gfortran.dg/namelist_47.f90: Likewise.\n\t* gfortran.dg/namelist_48.f90: Likewise.\n\t* gfortran.dg/namelist_49.f90: Likewise.\n\t* gfortran.dg/namelist_50.f90: Likewise.\n\t* gfortran.dg/namelist_51.f90: Likewise.\n\t* gfortran.dg/namelist_52.f90: Likewise.\n\t* gfortran.dg/namelist_54.f90: Likewise.\n\t* gfortran.dg/namelist_55.f90: Likewise.\n\t* gfortran.dg/namelist_56.f90: Likewise.\n\t* gfortran.dg/namelist_57.f90: Likewise.\n\t* gfortran.dg/namelist_58.f90: Likewise.\n\t* gfortran.dg/namelist_59.f90: Likewise.\n\t* gfortran.dg/namelist_60.f90: Likewise.\n\t* gfortran.dg/namelist_61.f90: Likewise.\n\t* gfortran.dg/namelist_64.f90: Likewise.\n\t* gfortran.dg/namelist_65.f90: Likewise.\n\t* gfortran.dg/namelist_69.f90: Likewise.\n\t* gfortran.dg/namelist_70.f90: Likewise.\n\t* gfortran.dg/namelist_71.f90: Likewise.\n\t* gfortran.dg/namelist_72.f: Likewise.\n\t* gfortran.dg/namelist_73.f90: Likewise.\n\t* gfortran.dg/namelist_77.f90: Likewise.\n\t* gfortran.dg/\u2026", "tree": {"sha": "f340981ebad78f3fa94ca8111f04467926cd823d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f340981ebad78f3fa94ca8111f04467926cd823d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d6ce202609bd8bcbd8618507cef32e793b477e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6ce202609bd8bcbd8618507cef32e793b477e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6ce202609bd8bcbd8618507cef32e793b477e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6ce202609bd8bcbd8618507cef32e793b477e4/comments", "author": null, "committer": null, "parents": [{"sha": "a8399af846a1f9c71f1275f3de74ff3f8a86532a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8399af846a1f9c71f1275f3de74ff3f8a86532a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8399af846a1f9c71f1275f3de74ff3f8a86532a"}], "stats": {"total": 32959, "additions": 17688, "deletions": 15271}, "files": [{"sha": "456a3fb303d77982a3d1e812f417419cdca3ef55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2412, "deletions": 0, "changes": 2412, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4"}, {"sha": "91b961aebce5610f91a5d2995ad514f1f0b15ff4", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-fortran/pr80108-1.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fortran%2Fpr80108-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fortran%2Fpr80108-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-fortran%2Fpr80108-1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -25,11 +25,11 @@ program stream_test\n     rewind(10)\n     read(10,*) str1\n     read(10,*) str2\n-    if(str1 /= rec1 .or. str2 /= rec2) call abort()\n+    if(str1 /= rec1 .or. str2 /= rec2) STOP 1\n     rewind(10)\n     read(10,'(a)') str1\n     read(10,'(a)') str2\n-    if(str1 /= rec1 .or. str2 /= rec2) call abort()\n+    if(str1 /= rec1 .or. str2 /= rec2) STOP 2\n     close(10)\n \n     open(10,form='formatted',access='stream',&\n@@ -40,7 +40,7 @@ program stream_test\n     read(10,*) i,str1\n     read(10,*) r\n     if(i /= 123 .or. str1 /= rec1 .or. r /= 12345.6789) &\n-      call abort()\n+      STOP 3\n     close(10)\n \n     open(unit=10,form='unformatted',access='stream', &\n@@ -49,5 +49,5 @@ program stream_test\n     len = len_trim(rec1//new_line('a')//rec2)\n     rewind(10)\n     read(10) str1(1:len)\n-    if(str1 /= rec1//new_line('a')//rec2) call abort()\n+    if(str1 /= rec1//new_line('a')//rec2) STOP 4\n end program stream_test"}, {"sha": "0ae54eacd234c9596140607413f275be3882a991", "filename": "gcc/testsuite/gfortran.dg/PR19754_2.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2FPR19754_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2FPR19754_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FPR19754_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,15 +8,15 @@ program PR19754_2\n    a = 1. ; b = 2. ;  i = 4\n    c = b - floor( a / b )        ! this caused an ICE\n    d = b - real(floor( a / b ))\n-   if (any (c/=d)) call abort ()\n+   if (any (c/=d)) STOP 1\n    j = aint(b) - floor( a / b )  ! this caused an ICE\n-   if (any(real(j)/=d)) call abort ()\n+   if (any(real(j)/=d)) STOP 2\n    c = i\n-   if (any(real(i)/=c)) call abort ()\n+   if (any(real(i)/=c)) STOP 3\n    c = i + b                     ! this caused an ICE \n    d = real(i) + b\n-   if (any(c/=d)) call abort ()\n+   if (any(c/=d)) STOP 4\n    j = i + aint (a)\n    k = i + a                     ! this caused an ICE\n-   if (any(j/=k)) call abort ()\n+   if (any(j/=k)) STOP 5\n end program PR19754_2"}, {"sha": "f6d3da7ab3a07f3ae0e6a86188800565818784b1", "filename": "gcc/testsuite/gfortran.dg/PR19872.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2FPR19872.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2FPR19872.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FPR19872.f?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -11,10 +11,10 @@\n       close(1)\n       open(1,form='FORMATTED')\n       read(1,*)i\n-      if(i(1).ne.9.or.i(2).ne.8.or.i(3).ne.7.or.i(4).ne.6)call abort\n+      if(i(1).ne.9.or.i(2).ne.8.or.i(3).ne.7.or.i(4).ne.6)STOP 1\n       read(1,*, end=200)i\n ! should only be able to read one line from the file\n-      call abort\n+      STOP 2\n  200  continue\n       close(1,STATUS='delete')\n       end"}, {"sha": "601cc282c719c3bfbcfda37d82735496d6f72910", "filename": "gcc/testsuite/gfortran.dg/PR49268.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2FPR49268.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2FPR49268.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FPR49268.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -44,7 +44,7 @@ subroutine use_foo()\n         do i=1,n\n             do j=1,m\n                boo=foo(i,j)+1.0\n-               if (abs (boo - 2.0) .gt. 1e-6) call abort\n+               if (abs (boo - 2.0) .gt. 1e-6) STOP 1\n             end do\n         end do\n "}, {"sha": "182974d32c4d949fb296706c0fc35ac6a8009c81", "filename": "gcc/testsuite/gfortran.dg/Wall.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2FWall.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2FWall.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FWall.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,5 +8,5 @@ program main\n          world!\" ! { dg-warning \"Missing '&' in continued character constant\" }\n   if (c.ne.&\n                                    \"Hello, world!\")&\n-                               call abort();end program main\n+                               STOP 1;end program main\n "}, {"sha": "a61db6d0e956a1cbeaea770394c45e147524e73b", "filename": "gcc/testsuite/gfortran.dg/Wno-all.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2FWno-all.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2FWno-all.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FWno-all.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,5 +8,5 @@ program main\n          world!\" ! { dg-bogus \"Warning: Missing '&' in continued character constant\" }\n   if (c.ne.&\n                                    \"Hello, world!\")&\n-                               call abort();end program main\n+                               STOP 1;end program main\n "}, {"sha": "5a522ea7816df70194e6a0a548f43c2fa5bfcf94", "filename": "gcc/testsuite/gfortran.dg/abort_shouldfail.f90", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fabort_shouldfail.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fabort_shouldfail.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fabort_shouldfail.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -0,0 +1,5 @@\n+! { dg-do  run }\n+! { dg-shouldfail \"Program aborted.\" }\n+program main\n+  call abort\n+end program main"}, {"sha": "6b3073b17a7eddb0e13504891669c737e3822bb1", "filename": "gcc/testsuite/gfortran.dg/achar_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fachar_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fachar_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fachar_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -4,5 +4,5 @@ program  bug6\n   integer(1) :: i = 65\n   character a\n   a = achar(i)\n-  if (a /= 'A') call abort\n+  if (a /= 'A') STOP 1\n end program  bug6"}, {"sha": "29cc3e756f09f4d9dd316b9767f31839b6482763", "filename": "gcc/testsuite/gfortran.dg/achar_2.f90", "status": "modified", "additions": 1515, "deletions": 1515, "changes": 3030, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fachar_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fachar_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fachar_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4"}, {"sha": "556b42f9eba36711c8ee8d87b3833e7bbd38c446", "filename": "gcc/testsuite/gfortran.dg/achar_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fachar_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fachar_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fachar_4.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -6,7 +6,7 @@\n ! The code comes from http://www.star.le.ac.uk/~cgp/fortran.html (by Clive Page)\n ! Reported by Thomas Koenig <tkoenig@gcc.gnu.org>\n !\n-  if (any (Up (\"AbCdEfGhIjKlM\") .ne. (/\"ABCDEFGHIJKLM\"/))) call abort ()\n+  if (any (Up (\"AbCdEfGhIjKlM\") .ne. (/\"ABCDEFGHIJKLM\"/))) STOP 1\n contains\n   Character (len=20) Function Up (string)\n     Character(len=*) string"}, {"sha": "9226e4cd68403981ecdab774cb33b7e783ab1467", "filename": "gcc/testsuite/gfortran.dg/achar_6.F90", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fachar_6.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fachar_6.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fachar_6.F90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -26,44 +26,44 @@ subroutine test (s1, s4, i, i1, i2, i3, i4)\n   character(kind=4,len=1) :: s4\n   integer :: i, i1, i2, i3, i4\n \n-  if (i /= i1) call abort\n-  if (i /= i2) call abort\n-  if (i /= i3) call abort\n-  if (i /= i4) call abort\n+  if (i /= i1) STOP 1\n+  if (i /= i2) STOP 2\n+  if (i /= i3) STOP 3\n+  if (i /= i4) STOP 4\n \n-  if (iachar (s1) /= i) call abort\n-  if (iachar (s4) /= i) call abort\n+  if (iachar (s1) /= i) STOP 5\n+  if (iachar (s4) /= i) STOP 6\n   \n-  if (ichar (s1) /= i) call abort\n-  if (ichar (s4) /= i) call abort\n+  if (ichar (s1) /= i) STOP 7\n+  if (ichar (s4) /= i) STOP 8\n   \n-  if (achar(i, kind=1) /= s1) call abort\n-  if (achar(i, kind=4) /= s4) call abort\n+  if (achar(i, kind=1) /= s1) STOP 9\n+  if (achar(i, kind=4) /= s4) STOP 10\n \n-  if (char(i, kind=1) /= s1) call abort\n-  if (char(i, kind=4) /= s4) call abort\n+  if (char(i, kind=1) /= s1) STOP 11\n+  if (char(i, kind=4) /= s4) STOP 12\n \n-  if (iachar(achar(i, kind=1)) /= i) call abort\n-  if (iachar(achar(i, kind=4)) /= i) call abort\n+  if (iachar(achar(i, kind=1)) /= i) STOP 13\n+  if (iachar(achar(i, kind=4)) /= i) STOP 14\n \n-  if (ichar(char(i, kind=1)) /= i) call abort\n-  if (ichar(char(i, kind=4)) /= i) call abort\n+  if (ichar(char(i, kind=1)) /= i) STOP 15\n+  if (ichar(char(i, kind=4)) /= i) STOP 16\n \n end subroutine test\n \n subroutine test_bis (s4, i, i2, i4)\n   character(kind=4,len=1) :: s4\n   integer :: i, i2, i4\n \n-  if (i /= i2) call abort\n-  if (i /= i4) call abort\n+  if (i /= i2) STOP 17\n+  if (i /= i4) STOP 18\n \n-  if (iachar (s4) /= i) call abort\n-  if (ichar (s4) /= i) call abort\n-  if (achar(i, kind=4) /= s4) call abort\n-  if (char(i, kind=4) /= s4) call abort\n-  if (iachar(achar(i, kind=4)) /= i) call abort\n-  if (ichar(char(i, kind=4)) /= i) call abort\n+  if (iachar (s4) /= i) STOP 19\n+  if (ichar (s4) /= i) STOP 20\n+  if (achar(i, kind=4) /= s4) STOP 21\n+  if (char(i, kind=4) /= s4) STOP 22\n+  if (iachar(achar(i, kind=4)) /= i) STOP 23\n+  if (ichar(char(i, kind=4)) /= i) STOP 24\n \n end subroutine test_bis\n "}, {"sha": "8ba20ecb437e44bdc3109be92e375c66a2c0df78", "filename": "gcc/testsuite/gfortran.dg/actual_array_constructor_1.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_constructor_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_constructor_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_constructor_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -20,7 +20,7 @@ subroutine p()\n   end subroutine\n   subroutine redirect_ (ch)\n     character(*) :: ch(:)\n-    if (ch(1) /= line) call abort ()\n+    if (ch(1) /= line) STOP 1\n   end subroutine redirect_\n end module global\n \n@@ -40,8 +40,8 @@ subroutine r(ptr, io)\n     use global\n     type(point), pointer :: ptr\n     character(128) :: io(:)\n-    if (associated (ptr)) call abort ()\n-    if (io(1) .ne. line) call abort ()\n+    if (associated (ptr)) STOP 2\n+    if (io(1) .ne. line) STOP 3\n   end subroutine r\n end module my_module\n \n@@ -74,7 +74,7 @@ subroutine option_stopwatch_s(a)\n   end subroutine option_stopwatch_s \n   subroutine option_stopwatch_a (a)\n     character (*) :: a(:)\n-    if (any (a .ne. (/'hello ','hola! ','goddag'/))) call abort ()\n+    if (any (a .ne. (/'hello ','hola! ','goddag'/))) STOP 4\n   end subroutine option_stopwatch_a\n \n end program main"}, {"sha": "d39e97bb3b48c84d7d13145e54a16d6ff41bcd9e", "filename": "gcc/testsuite/gfortran.dg/actual_array_constructor_2.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_constructor_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_constructor_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_constructor_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -11,21 +11,21 @@\n ! Test the original problem\n   call foo ((/( 'abcd',i=1,m )/), c2)\n   if (any(c2(:) .ne. (/'abcd','abcd', &\n-                            'abcd','abcd'/))) call abort ()\n+                            'abcd','abcd'/))) STOP 1\n \n ! Now get a bit smarter\n   call foo ((/\"abcd\", \"efgh\", \"ijkl\", \"mnop\"/), c1) ! worked previously\n   call foo ((/(c1(i), i = m,1,-1)/), c2)            ! was broken\n-  if (any(c2(4:1:-1) .ne. c1)) call abort ()\n+  if (any(c2(4:1:-1) .ne. c1)) STOP 2\n \n ! gfc_todo: Not Implemented: complex character array constructors\n   call foo ((/(c1(i)(i/2+1:i/2+2), i = 1,4)/), c2)  ! Ha! take that..!\n-  if (any (c2 .ne. (/\"ab  \",\"fg  \",\"jk  \",\"op  \"/))) call abort ()\n+  if (any (c2 .ne. (/\"ab  \",\"fg  \",\"jk  \",\"op  \"/))) STOP 3\n \n ! Check functions in the constructor\n   call foo ((/(achar(64+i)//achar(68+i)//achar(72+i)// &\n                achar(76+i),i=1,4 )/), c1)           ! was broken\n-  if (any (c1 .ne. (/\"AEIM\",\"BFJN\",\"CGKO\",\"DHLP\"/))) call abort ()\n+  if (any (c1 .ne. (/\"AEIM\",\"BFJN\",\"CGKO\",\"DHLP\"/))) STOP 4\n contains\n   subroutine foo (chr1, chr2)\n     character(*), dimension(:) :: chr1, chr2"}, {"sha": "8519d67a59774bb4986bbfb194b0073dd9c3fbe0", "filename": "gcc/testsuite/gfortran.dg/actual_array_constructor_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_constructor_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_constructor_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_constructor_3.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -19,7 +19,7 @@ program pr28914\n   enddo\n   summation = abs(summation - 11303932.9138271_8)\n   \n-  if (summation.gt.0.00001)   call abort()\n+  if (summation.gt.0.00001)   STOP 1\n end program pr28914\n \n "}, {"sha": "a78f54611c641bf855216d23c5e403751658fe2c", "filename": "gcc/testsuite/gfortran.dg/actual_array_offset_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_offset_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_offset_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_offset_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -151,12 +151,12 @@ program test_quicksort\n     array%value = int (1000000 * values)\n \n ! It would be pretty perverse if this failed!\n-    if (check (array)) call abort\n+    if (check (array)) STOP 1\n \n     call quicksort( array )\n \n ! Check the the array is correctly ordered\n-    if (.not.check (array)) call abort\n+    if (.not.check (array)) STOP 2\n contains\n      logical function check (arg)\n          type(mysortable), dimension(:) :: arg"}, {"sha": "6a2aa0b5de114577048c89e30338d02def30934c", "filename": "gcc/testsuite/gfortran.dg/actual_array_result_1.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_result_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_result_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_result_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -60,11 +60,11 @@ program main\n   use one\n   integer :: n\n   n = 3\n-  if(any (foo1(n) /= [ 1,2,3 ])) call abort()\n-  if(any (foo2(n) /= [ 1,2,3 ])) call abort()\n+  if(any (foo1(n) /= [ 1,2,3 ])) STOP 1\n+  if(any (foo2(n) /= [ 1,2,3 ])) STOP 2\n   flag = 1\n-  if(any (foo1(n) /= [ 1,2,3 ])) call abort()\n-  if(any (foo2(n) /= [ 1,2,3 ])) call abort()\n+  if(any (foo1(n) /= [ 1,2,3 ])) STOP 3\n+  if(any (foo2(n) /= [ 1,2,3 ])) STOP 4\n   n = 5\n-  if(any (foo3(n) /= [ 0,1,2,3,0 ])) call abort()\n+  if(any (foo3(n) /= [ 0,1,2,3,0 ])) STOP 5\n end program"}, {"sha": "7c10c7020eb30cde5c83c9ab05af1fde1cbb5826", "filename": "gcc/testsuite/gfortran.dg/actual_array_substr_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_substr_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_substr_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_substr_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -13,10 +13,10 @@ program gfcbug33\n contains\n   subroutine foo (chr)\n     character(7) :: chr(:)\n-    if (chr(1)//chr(2) .ne. \"rstuvwxfghijkl\") call abort ()\n+    if (chr(1)//chr(2) .ne. \"rstuvwxfghijkl\") STOP 1\n   end subroutine foo\r\n   subroutine bar (chr)\n     character(*) :: chr(:)\n-    if (trim(chr(1))//trim(chr(2)) .ne. \"ghijkstuvw\") call abort ()\n+    if (trim(chr(1))//trim(chr(2)) .ne. \"ghijkstuvw\") STOP 2\n   end subroutine bar\r\n end program gfcbug33\r"}, {"sha": "fed51342ee0a4c1779ebb55c4739f01fe23b36f5", "filename": "gcc/testsuite/gfortran.dg/actual_array_substr_2.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_substr_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_substr_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_array_substr_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -21,12 +21,12 @@ program pr28174\n \n ! Make sure that variable substring references work.\n   call foo (a(:)(m:m+5), c(:)(n:m+2), d(:)(5:9))\n-  if (any (a .ne. teststring)) call abort ()\n-  if (any (b .ne. teststring)) call abort ()\n+  if (any (a .ne. teststring)) STOP 1\n+  if (any (b .ne. teststring)) STOP 2\n   if (any (c .ne. (/\"ab456789#hij\", &\n-                    \"kl7654321rst\"/))) call abort ()\n+                    \"kl7654321rst\"/))) STOP 3\n   if (any (d .ne. (/\"abc 23456hij\", &\n-                    \"klm 98765rst\"/))) call abort ()\n+                    \"klm 98765rst\"/))) STOP 4\n contains\n   subroutine foo (w, x, y)\n     character(len=*), intent(in) :: w(:)\n@@ -36,7 +36,7 @@ subroutine foo (w, x, y)\n                                           \"$#9876543210\"/)\n ! This next is not required by the standard but tests the\n ! functioning of the gfortran implementation.\n-!   if (all (x(:)(3:7) .eq. y)) call abort ()\n+!   if (all (x(:)(3:7) .eq. y)) STOP 5\n     x = foostring (:)(5 : 4 + len (x))\n     y = foostring (:)(3 : 2 + len (y))\n   end subroutine foo"}, {"sha": "01213fd4e3444cd74f9fa07a54b842eff0a18755", "filename": "gcc/testsuite/gfortran.dg/actual_pointer_function_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_pointer_function_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_pointer_function_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_pointer_function_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -10,8 +10,8 @@\n     INTEGER :: a\r\n   END TYPE cp_logger_type\r\n \r\n-  if (cp_logger_log(cp_get_default_logger (0))) call abort ()\r\n-  if (.not. cp_logger_log(cp_get_default_logger (42))) call abort ()\r\n+  if (cp_logger_log(cp_get_default_logger (0))) STOP 1\r\n+  if (.not. cp_logger_log(cp_get_default_logger (42))) STOP 2\r\n \r\n CONTAINS\r\n \r"}, {"sha": "2686cad1d83d55ed580b6e52c78dceacdb9fb287", "filename": "gcc/testsuite/gfortran.dg/actual_procedure_1.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_procedure_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_procedure_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_procedure_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -32,11 +32,11 @@ function proc_ext (arg, chr)\n   end interface\n ! Check the passing of a module function\n   call foo (proc4, chr)\n-  if (trim (chr) .ne. \"proc4\") call abort\n+  if (trim (chr) .ne. \"proc4\") STOP 1\n ! Check the passing of an external function\n   call foo (proc_ext, chr)\n ! Check the passing of a character function\n-  if (trim (chr) .ne. \"proc_ext\") call abort\n+  if (trim (chr) .ne. \"proc_ext\") STOP 2\n   call bar (chr_proc)\n contains\n   subroutine foo (p, chr)\n@@ -50,15 +50,15 @@ function p (arg, chr)\n       end function\n     end interface\n     i = p (99, chr)\n-    if (any(i .ne. 99)) call abort\n+    if (any(i .ne. 99)) STOP 3\n   end subroutine\n   subroutine bar (p)\n     interface\n       function p ()\n         character(8):: p\n       end function\n     end interface\n-    if (p () .ne. \"chr_proc\") call abort\n+    if (p () .ne. \"chr_proc\") STOP 4\n   end subroutine\n end program \n "}, {"sha": "4871e330d22304f827b9498c78dbf07be6def7e9", "filename": "gcc/testsuite/gfortran.dg/adjustl_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fadjustl_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fadjustl_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fadjustl_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -4,5 +4,5 @@\n PROGRAM test\n   character(len=10) :: u\n   WRITE(unit=u,fmt='(3A)') PACK(ADJUSTL([\" a\", \" b\"]), [.TRUE., .FALSE.])\n-  if (u .ne. 'a    ') call abort\n+  if (u .ne. 'a    ') STOP 1\n END PROGRAM test"}, {"sha": "e41e2b13612d09b2a78beb4c4b868c637942dc9a", "filename": "gcc/testsuite/gfortran.dg/advance_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fadvance_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fadvance_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fadvance_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,6 +8,6 @@ program pr25463\n   write (10,'(TL2,A)') 'c'\n   rewind (10)\n   read (10, '(a)') str\n-  if (str.ne.'abc') call abort()\n+  if (str.ne.'abc') STOP 1\n   close (10, status='delete')\n end"}, {"sha": "bfceca22da151911b66788f7ed758ce28cf6a937", "filename": "gcc/testsuite/gfortran.dg/advance_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fadvance_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fadvance_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fadvance_4.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -6,5 +6,5 @@ program main\n   close (12)\n   read (12, '(6A)') answer\n   close (12, status=\"delete\")\n-  if (answer /= \"XABCDX\") call abort()\n+  if (answer /= \"XABCDX\") STOP 1\n end program main"}, {"sha": "cd2c92a4f9770f0c4237f05488c0de2e56ed49e2", "filename": "gcc/testsuite/gfortran.dg/advance_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fadvance_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fadvance_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fadvance_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -13,5 +13,5 @@\n open(10,file=\"fort.10\",position=\"rewind\")\n read(10,'(a)') b\n close(10, status=\"delete\")\n-if (b.ne.\"abcxxx\") call abort()\n+if (b.ne.\"abcxxx\") STOP 1\n end"}, {"sha": "4673386b351aafefc749d94d139835c40a98aa43", "filename": "gcc/testsuite/gfortran.dg/advance_6.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fadvance_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fadvance_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fadvance_6.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -15,7 +15,7 @@ program main\n   backspace 95\n   c = 'xxx'\n   read (95,'(A)') c\n-  if (c /= 'ab ') call abort\n+  if (c /= 'ab ') STOP 1\n   close (95)\n   call check_end_record\n   \n@@ -34,15 +34,15 @@ program main\n   rewind 95\n   c = 'xxx'\n   read (95,'(A)') c\n-  if (c /= 'ab ') call abort\n+  if (c /= 'ab ') STOP 2\n   close (95)\n   call check_end_record\n \n   call write_file\n   rewind 95\n   c = 'xxx'\n   read (95,'(A)') c\n-  if (c /= 'ab ') call abort\n+  if (c /= 'ab ') STOP 3\n   close (95)\n   call check_end_record\n \n@@ -60,15 +60,15 @@ subroutine check_end_record\n     character(len=1) :: x\n     open(2003, file=fname, status=\"old\", access=\"stream\", form=\"unformatted\")\n     read(2003) x\n-    if (x /= 'a') call abort\n+    if (x /= 'a') STOP 4\n     read(2003) x\n-    if (x /= 'b') call abort\n+    if (x /= 'b') STOP 5\n     read(2003) x\n     if (x /= achar(10)) then\n        read(2003) x\n        if (x /= achar(13)) then\n        else\n-          call abort\n+          STOP 6\n        end if\n     end if\n     close(2003,status=\"delete\")"}, {"sha": "812e9e467ceceeb6e3571e89b00c9e649997a93c", "filename": "gcc/testsuite/gfortran.dg/aint_anint_1.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faint_anint_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faint_anint_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faint_anint_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,19 +8,19 @@ program aint_anint_1\n \n   r1 = aint(r)\n   r2 = aint(r,kind=8)\n-  if (abs(r1 - r2) > 0.1) call abort()\n+  if (abs(r1 - r2) > 0.1) STOP 1\n \n   r1 = anint(r)\n   r2 = anint(r,kind=8)\n-  if (abs(r1 - r2) > 0.1) call abort()\n+  if (abs(r1 - r2) > 0.1) STOP 2\n \n   s1 = aint(s)\n   s2 = aint(s, kind=4)\n-  if (abs(s1 - s2) > 0.1) call abort()\n+  if (abs(s1 - s2) > 0.1) STOP 3\n \n   s1 = anint(s)\n   s2 = anint(s, kind=4)\n-  if (abs(s1 - s2) > 0.1) call abort()\n+  if (abs(s1 - s2) > 0.1) STOP 4\n \n \n end program aint_anint_1"}, {"sha": "a8898fd7abf94a4f02eb5970e14d2e29fefafa07", "filename": "gcc/testsuite/gfortran.dg/aliasing_array_result_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faliasing_array_result_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faliasing_array_result_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faliasing_array_result_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -117,7 +117,7 @@ end function i_ext\n   if (any (c .ne. check)) call myabort (7)\n   call aaa\n   call tobias\n-  if (abort_flag) call abort\n+  if (abort_flag) STOP 1\n contains\n   function f()\n      integer :: f(ONE)"}, {"sha": "dcc2d7c05c852092ba4f6076ccc796f9ded1af31", "filename": "gcc/testsuite/gfortran.dg/aliasing_dummy_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faliasing_dummy_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faliasing_dummy_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faliasing_dummy_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -27,14 +27,14 @@ program test_lex\n \n ! Test 1D with assumed shape (original bug) and assumed size.\n   call bar (table, 2, 4)\n-  if (any (table%list%word.ne.(/\"one  \",\"i=  2\",\"three\",\"i=  4\"/))) call abort ()\n+  if (any (table%list%word.ne.(/\"one  \",\"i=  2\",\"three\",\"i=  4\"/))) STOP 1\n \n   elist = reshape (table%list, (/2,2/))\n \n ! Check 2D is OK with assumed shape and assumed size.\n   call foo3 (elist%word, 1)\n   call foo1 (elist%word, 3)\n-  if (any (elist%word.ne.reshape ((/\"i=  1\",\"i=  2\",\"i=  3\",\"i=  4\"/), (/2,2/)))) call abort ()\n+  if (any (elist%word.ne.reshape ((/\"i=  1\",\"i=  2\",\"i=  3\",\"i=  4\"/), (/2,2/)))) STOP 2\n \n contains\n "}, {"sha": "5f497571360ba50f9ce2c4fc3097fc1685cd0265", "filename": "gcc/testsuite/gfortran.dg/aliasing_dummy_4.f90", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faliasing_dummy_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faliasing_dummy_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faliasing_dummy_4.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -20,17 +20,17 @@ program  test_f90\n \n     call test_sub(s%a(1, 1), 1000) ! Test the original problem.\n \n-    if ( any (s(1, 1)%a(:, :) /= reshape ([1111, 112, 121, 122], [2, 2]))) call abort ()\n-    if ( any (s(1, 2)%a(:, :) /= reshape ([1121, 122, 141, 142], [2, 2]))) call abort ()\n-    if ( any (s(2, 1)%a(:, :) /= reshape ([1112, 114, 122, 124], [2, 2]))) call abort ()\n-    if ( any (s(2, 2)%a(:, :) /= reshape ([1122, 124, 142, 144], [2, 2]))) call abort ()\n+    if ( any (s(1, 1)%a(:, :) /= reshape ([1111, 112, 121, 122], [2, 2]))) STOP 1\n+    if ( any (s(1, 2)%a(:, :) /= reshape ([1121, 122, 141, 142], [2, 2]))) STOP 2\n+    if ( any (s(2, 1)%a(:, :) /= reshape ([1112, 114, 122, 124], [2, 2]))) STOP 3\n+    if ( any (s(2, 2)%a(:, :) /= reshape ([1122, 124, 142, 144], [2, 2]))) STOP 4\n \n     call test_sub(s(1, 1)%a(:, :), 1000)  ! Check \"normal\" references.\n \n-    if ( any (s(1, 1)%a(:, :) /= reshape ([2111,1112,1121,1122], [2, 2]))) call abort ()\n-    if ( any (s(1, 2)%a(:, :) /= reshape ([1121, 122, 141, 142], [2, 2]))) call abort ()\n-    if ( any (s(2, 1)%a(:, :) /= reshape ([1112, 114, 122, 124], [2, 2]))) call abort ()\n-    if ( any (s(2, 2)%a(:, :) /= reshape ([1122, 124, 142, 144], [2, 2]))) call abort ()\n+    if ( any (s(1, 1)%a(:, :) /= reshape ([2111,1112,1121,1122], [2, 2]))) STOP 5\n+    if ( any (s(1, 2)%a(:, :) /= reshape ([1121, 122, 141, 142], [2, 2]))) STOP 6\n+    if ( any (s(2, 1)%a(:, :) /= reshape ([1112, 114, 122, 124], [2, 2]))) STOP 7\n+    if ( any (s(2, 2)%a(:, :) /= reshape ([1122, 124, 142, 144], [2, 2]))) STOP 8\n contains\n   subroutine test_sub(array, offset)\n     integer array(:, :), offset"}, {"sha": "319a4aeaad086382d2fee40649d22315794481e3", "filename": "gcc/testsuite/gfortran.dg/aliasing_dummy_5.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faliasing_dummy_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faliasing_dummy_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faliasing_dummy_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -20,7 +20,7 @@ PROGRAM main\n   IMPLICIT NONE\n   arr = (/ 1, 2, 3 /)\n   CALL bar(arr)\n-  if (any (arr /= (/ 1, 1, 2 /))) call abort()\n+  if (any (arr /= (/ 1, 1, 2 /))) STOP 1\n   CALL test()\n contains\n   subroutine bar(x)\n@@ -37,7 +37,7 @@ SUBROUTINE foobar (arg)\n     INTEGER, TARGET :: arg(:)\n     arr(1) = 5\n     arg(1) = 6\n-    if (arr(1) == 5) call abort()\n+    if (arr(1) == 5) STOP 2\n   END SUBROUTINE foobar\n END MODULE m2\n subroutine test"}, {"sha": "1576bdaf2904a16b18e8081d01fba2420cbc7e5e", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_1.f90", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -17,16 +17,16 @@\n ! An intrinsic assignment must deallocate the l-value and copy across\n ! the array from the r-value.\n   b = a\n-  if (any (b%chars .ne. (/\"h\",\"e\",\"l\",\"l\",\"o\"/))) call abort ()\n-  if (allocated (a%chars) .eqv. .false.) call abort ()\n+  if (any (b%chars .ne. (/\"h\",\"e\",\"l\",\"l\",\"o\"/))) STOP 1\n+  if (allocated (a%chars) .eqv. .false.) STOP 2\n \n ! Scalar to array needs to copy the derived type, to its ultimate components,\n ! to each of the l-value elements.  */\n   x = b\n   x(2)%chars = (/\"g\",\"'\",\"d\",\"a\",\"y\"/)\n-  if (any (x(1)%chars .ne. (/\"h\",\"e\",\"l\",\"l\",\"o\"/))) call abort ()\n-  if (any (x(2)%chars .ne. (/\"g\",\"'\",\"d\",\"a\",\"y\"/))) call abort ()\n-  if (allocated (b%chars) .eqv. .false.) call abort ()\n+  if (any (x(1)%chars .ne. (/\"h\",\"e\",\"l\",\"l\",\"o\"/))) STOP 3\n+  if (any (x(2)%chars .ne. (/\"g\",\"'\",\"d\",\"a\",\"y\"/))) STOP 4\n+  if (allocated (b%chars) .eqv. .false.) STOP 5\n   deallocate (x(1)%chars, x(2)%chars, x(3)%chars)\n \n ! Array intrinsic assignments are like their scalar counterpart and\n@@ -37,21 +37,21 @@\n   x(2)%chars = (/\"g\",\"'\",\"d\",\"a\",\"y\"/)\n   x(3)%chars = (/\"g\",\"o\",\"d\",\"a\",\"g\"/)\n   y(2:1:-1) = x(1:2)\n-  if (any (y(1)%chars .ne. (/\"g\",\"'\",\"d\",\"a\",\"y\"/))) call abort ()\n-  if (any (y(2)%chars .ne. (/\"h\",\"e\",\"l\",\"l\",\"o\"/))) call abort ()\n-  if (any (x(3)%chars .ne. (/\"g\",\"o\",\"d\",\"a\",\"g\"/))) call abort ()\n+  if (any (y(1)%chars .ne. (/\"g\",\"'\",\"d\",\"a\",\"y\"/))) STOP 6\n+  if (any (y(2)%chars .ne. (/\"h\",\"e\",\"l\",\"l\",\"o\"/))) STOP 7\n+  if (any (x(3)%chars .ne. (/\"g\",\"o\",\"d\",\"a\",\"g\"/))) STOP 8\n \n ! In the case of an assignment where there is a dependency, so that a\n ! temporary is necessary, each element must be copied to its\n ! destination after it has been deallocated.\n   y(2:3) = y(1:2)\n-  if (any (y(1)%chars .ne. (/\"g\",\"'\",\"d\",\"a\",\"y\"/))) call abort ()\n-  if (any (y(2)%chars .ne. (/\"g\",\"'\",\"d\",\"a\",\"y\"/))) call abort ()\n-  if (any (y(3)%chars .ne. (/\"h\",\"e\",\"l\",\"l\",\"o\"/))) call abort ()\n+  if (any (y(1)%chars .ne. (/\"g\",\"'\",\"d\",\"a\",\"y\"/))) STOP 9\n+  if (any (y(2)%chars .ne. (/\"g\",\"'\",\"d\",\"a\",\"y\"/))) STOP 10\n+  if (any (y(3)%chars .ne. (/\"h\",\"e\",\"l\",\"l\",\"o\"/))) STOP 11\n \n ! An identity assignment must not do any deallocation....!\n   y = y\n-  if (any (y(1)%chars .ne. (/\"g\",\"'\",\"d\",\"a\",\"y\"/))) call abort ()\n-  if (any (y(2)%chars .ne. (/\"g\",\"'\",\"d\",\"a\",\"y\"/))) call abort ()\n-  if (any (y(3)%chars .ne. (/\"h\",\"e\",\"l\",\"l\",\"o\"/))) call abort ()\n+  if (any (y(1)%chars .ne. (/\"g\",\"'\",\"d\",\"a\",\"y\"/))) STOP 12\n+  if (any (y(2)%chars .ne. (/\"g\",\"'\",\"d\",\"a\",\"y\"/))) STOP 13\n+  if (any (y(3)%chars .ne. (/\"h\",\"e\",\"l\",\"l\",\"o\"/))) STOP 14\n end"}, {"sha": "9f1d35dd08dbd2b76916ae92bdbaf191512ff296", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_10.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_10.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -51,8 +51,8 @@ program tao_program\n   u%design%bunch_params%n_live_particle = [(i, i = 0, n)]\n   u%model = u%design\n   u%model = u%design ! The double assignment was the cause of the ICE\n-  if (.not. allocated (u%model%bunch_params)) call abort\n-  if (any (u%model%bunch_params%n_live_particle .ne. [(i, i = 0, n)])) call abort\n+  if (.not. allocated (u%model%bunch_params)) STOP 1\n+  if (any (u%model%bunch_params%n_live_particle .ne. [(i, i = 0, n)])) STOP 2\n   Deallocate (u%model%bunch_params, u%design%bunch_params)\n   deallocate (u%design, u%model)\n   deallocate (s%u)"}, {"sha": "7817e7e800a6d8123eceeacf56fc42cf46ca97e6", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_11.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_11.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -23,19 +23,19 @@\n !print *, z(1)%a, z(2)%a, x%A, y%A\n if (any (z(1)%a /= 11) .or. z(2)%a(1) /= 22 .or. any (x%A /= 11)  &\n     .or. y%A(1) /= 22)  &\n-  call abort()\n+  STOP 1\n \n x%A(:) = 444\n y%A(:) = 555\n \n !print *, z(1)%a, z(2)%a, x%A, y%A\n if (any (z(1)%a /= 11) .or. z(2)%a(1) /= 22 .or. any (x%A /= 444)  &\n     .or. y%A(1) /= 555)  &\n-  call abort()\n+  STOP 2\n \n z(:) = [ x, y ]\n !print *, z(1)%a, z(2)%a, x%A, y%A\n if (any (z(1)%a /= 444) .or. z(2)%a(1) /= 555 .or. any (x%A /= 444)  &\n     .or. y%A(1) /= 555)  &\n-  call abort()\n+  STOP 3\n end"}, {"sha": "82e5e7abfbcab29c9b5140fed5e1ed8a4d1e156a", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_12.f03", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_12.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_12.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_12.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -18,7 +18,7 @@ subroutine make(this,u)\n     class(foo_t) :: this\n     real, intent(in) :: u(:)\n     this%u = u(int (u))       ! The failure to allocate occurred here.\n-    if (.not.allocated (this%u)) call abort\n+    if (.not.allocated (this%u)) STOP 1\n   end subroutine make\n   function disp(this)\n     implicit none\n@@ -35,8 +35,8 @@ program main2\n   real, allocatable :: u(:)\n   u=real ([3,2,1,4])\n   call o%make(u)\n-  if (any (int (o%disp()) .ne. [1,2,3,4])) call abort\n+  if (any (int (o%disp()) .ne. [1,2,3,4])) STOP 2\n   u=real ([2,1])\n   call o%make(u)\n-  if (any (int (o%disp()) .ne. [1,2])) call abort\n+  if (any (int (o%disp()) .ne. [1,2])) STOP 3\n end program main2"}, {"sha": "d6a22475ad1b31e75c89674002d4ba7d6c39f1ab", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_13.f08", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_13.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_13.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_13.f08?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -15,11 +15,11 @@ program test_allocatable_components\n \n     Me= A(X= 1, Y= 2, C=\"correctly allocated\")\n \n-    if (Me%X /= 1) call abort()\n-    if (.not. allocated(Me%y) .or. Me%y /= 2) call abort()\n-    if (.not. allocated(Me%c)) call abort()\n-    if (len(Me%c) /= 19) call abort()\n-    if (Me%c /= \"correctly allocated\") call abort()\n+    if (Me%X /= 1) STOP 1\n+    if (.not. allocated(Me%y) .or. Me%y /= 2) STOP 2\n+    if (.not. allocated(Me%c)) STOP 3\n+    if (len(Me%c) /= 19) STOP 4\n+    if (Me%c /= \"correctly allocated\") STOP 5\n \n     ! Now check explicitly allocated components.\n     Ea%X = 9\n@@ -28,16 +28,16 @@ program test_allocatable_components\n     ! Implicit allocate on assign in the next line\n     Ea%c = \"13 characters\"\n \n-    if (Ea%X /= 9) call abort()\n-    if (.not. allocated(Ea%y) .or. Ea%y /= 42) call abort()\n-    if (.not. allocated(Ea%c)) call abort()\n-    if (len(Ea%c) /= 13) call abort()\n-    if (Ea%c /= \"13 characters\") call abort()\n+    if (Ea%X /= 9) STOP 6\n+    if (.not. allocated(Ea%y) .or. Ea%y /= 42) STOP 7\n+    if (.not. allocated(Ea%c)) STOP 8\n+    if (len(Ea%c) /= 13) STOP 9\n+    if (Ea%c /= \"13 characters\") STOP 10\n \n     deallocate(Ea%y)\n     deallocate(Ea%c)\n-    if (allocated(Ea%y)) call abort()\n-    if (allocated(Ea%c)) call abort()\n+    if (allocated(Ea%y)) STOP 11\n+    if (allocated(Ea%c)) STOP 12\n end program\n \n ! vim:ts=4:sts=4:sw=4:"}, {"sha": "7b9c681f6bd686fa98e94c6a47f87c603990e552", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_14.f08", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_14.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_14.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_14.f08?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -19,11 +19,11 @@ program test_allocatable_components\n \n     Me= A(X= 1, Y= 2, C=\"correctly allocated\")\n \n-    if (Me%X /= 1) call abort()\n-    if (.not. allocated(Me%y) .or. Me%y /= 2) call abort()\n-    if (.not. allocated(Me%c)) call abort()\n-    if (len(Me%c) /= 19) call abort()\n-    if (Me%c /= \"correctly allocated\") call abort()\n+    if (Me%X /= 1) STOP 1\n+    if (.not. allocated(Me%y) .or. Me%y /= 2) STOP 2\n+    if (.not. allocated(Me%c)) STOP 3\n+    if (len(Me%c) /= 19) STOP 4\n+    if (Me%c /= \"correctly allocated\") STOP 5\n \n     ! Now check explicitly allocated components.\n     Ea%X = 9\n@@ -32,15 +32,15 @@ program test_allocatable_components\n     ! Implicit allocate on assign in the next line\n     Ea%c = \"13 characters\"\n \n-    if (Ea%X /= 9) call abort()\n-    if (.not. allocated(Ea%y) .or. Ea%y /= 42) call abort()\n-    if (.not. allocated(Ea%c)) call abort()\n-    if (len(Ea%c) /= 13) call abort()\n-    if (Ea%c /= \"13 characters\") call abort()\n+    if (Ea%X /= 9) STOP 6\n+    if (.not. allocated(Ea%y) .or. Ea%y /= 42) STOP 7\n+    if (.not. allocated(Ea%c)) STOP 8\n+    if (len(Ea%c) /= 13) STOP 9\n+    if (Ea%c /= \"13 characters\") STOP 10\n \n     deallocate(Ea%y)\n     deallocate(Ea%c)\n-    if (allocated(Ea%y)) call abort()\n-    if (allocated(Ea%c)) call abort()\n+    if (allocated(Ea%y)) STOP 11\n+    if (allocated(Ea%c)) STOP 12\n end program\n "}, {"sha": "23448dde13d35a5c42df4cccacaece8983901501", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_15.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_15.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_15.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_15.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -26,7 +26,7 @@ program Test1\n   allocate(X%P)\n \n   X%P%Source = 'test string'\n-  if (.not.allocated (X%P%Source)) call abort\n-  if (X%P%Source .ne. 'test string') call abort\n+  if (.not.allocated (X%P%Source)) STOP 1\n+  if (X%P%Source .ne. 'test string') STOP 2\n \n end program Test1"}, {"sha": "c1b2149bb719ea8313dd7b621a4858e2749bc459", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_2.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -22,21 +22,21 @@\n   x(2) = a ((/1, 2, 3, 4/) + 10)\n   forall (j = 1:2, i = 1:4, x(j)%i(i) > 2 + (j-1)*10)  x(j)%i(i) =  j*4-i\n   if (any ((/((x(i)%i(j), j = 1,4), i = 1,2)/) .ne. &\n-          (/1, 2, 1, 0, 11, 12, 5, 4/))) call abort ()\n+          (/1, 2, 1, 0, 11, 12, 5, 4/))) STOP 1\n \n   y(1) = b ((/x(1),x(2)/))\n   y(2) = b ((/x(2),x(1)/))\n   forall (k = 1:2, j=1:2, i = 1:4, y(k)%at(j)%i(i) <= 10)\n     y(k)%at(j)%i(i) =  j*4-i+k\n   end forall\n   if (any ((/(((y(k)%at(i)%i(j), j = 1,4), i = 1,2), k = 1,2)/) .ne. &\n-         (/4,3,2,1,11,12,6,5,11,12,3,2,9,8,7,6/))) call abort () \n+         (/4,3,2,1,11,12,6,5,11,12,3,2,9,8,7,6/))) STOP 2 \n \n ! Now simple assignments in WHERE.\n \n   where (y(1)%at(1)%i > 2) y(1)%at(1)%i = 0\n   if (any( (/(((y(k)%at(i)%i(j), j = 1,4), i = 1,2), k = 1,2)/) .ne. &\n-         (/0,0,2,1,11,12,6,5,11,12,3,2,9,8,7,6/))) call abort () \n+         (/0,0,2,1,11,12,6,5,11,12,3,2,9,8,7,6/))) STOP 3 \n \n ! Check that temporaries and full array  alloctable component assignments\n ! are correctly handled in FORALL.\n@@ -46,6 +46,6 @@\n   forall (i=1:2) y(i) = y(3-i)      ! This needs a temporary.\n   forall (i=1:2) z(i) = y(i)\n   if (any ((/(((z(k)%at(i)%i(j), j = 1,4), i = 1,1), k = 1,2)/) .ne. &\n-         (/(/5,6,7,8/),(/1,2,3,4/)/))) call abort ()\n+         (/(/5,6,7,8/),(/1,2,3,4/)/))) STOP 4\n \n end"}, {"sha": "486d4b3d6e696117e6bd50d0a235887c9f765249", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_3.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -25,12 +25,12 @@\n   y(2) = y(1)\n   forall (j=1:2,k=1:4, y(1)%at(j)%i(k) .ne. y(2)%at(j)%i(k)) &\n                              y(1)%at(j)%i(k) = 999\n-  if (any ((/((y(1)%at(j)%i(k), k=1,4),j=1,2)/) .eq. 999)) call abort ()\n+  if (any ((/((y(1)%at(j)%i(k), k=1,4),j=1,2)/) .eq. 999)) STOP 1\n \n \n   z = y\n   forall (i=1:2,j=1:2,k=1:4, z(i)%at(j)%i(k) .ne. y(i)%at(j)%i(k)) &\n                              z(i)%at(j)%i(k) = 999\n-  if (any ((/(((z(i)%at(j)%i(k), k=1,4),j=1,2),i=1,2)/) .eq. 999)) call abort ()\n+  if (any ((/(((z(i)%at(j)%i(k), k=1,4),j=1,2),i=1,2)/) .eq. 999)) STOP 2\n \n end"}, {"sha": "112f2a2fb846ca40a1f6e947b10c320490a56ad4", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_4.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_4.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -31,7 +31,7 @@\n   y(2) = y(1)\n \n   if (any((/((y(2)%at(i)%ch(j),j=1,4),i=1,2)/) .ne. &\n-          (/chr1, chr2/))) call abort ()\n+          (/chr1, chr2/))) STOP 1\n \n   call test_ab6 ()\n \n@@ -56,7 +56,7 @@ subroutine test_ab6 ()\n     p = c((/b(a((/\"Mary\",\"Lamb\"/)))/))\n     bv = p%b(1)\n \n-    if (any ((bv%a%ch(:)) .ne. (/\"Mary\",\"Lamb\"/))) call abort ()\n+    if (any ((bv%a%ch(:)) .ne. (/\"Mary\",\"Lamb\"/))) STOP 2\n \n end subroutine test_ab6\n "}, {"sha": "f8e7f596a53984b4e0c165c1f87c5f5d1c3aeffd", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -19,7 +19,7 @@ program test\n \n   x = f()\n \n-  if (ctr /= 1) call abort ()\n+  if (ctr /= 1) STOP 1\n \n contains\n "}, {"sha": "ef4b178e71b49114c559d6f8710adc89bf10d024", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_6.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_6.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -48,6 +48,6 @@ program VST28\n   res = res//char_a(6:6)\n   if(size(res%chars) /= 2 .or. any(res%chars /= ['e','f'])) then\n     write(*,*) 'ERROR: should be ef, got: ', res%chars, size(res%chars)\n-    call abort ()\n+    STOP 1\n   end if\n end program VST28"}, {"sha": "252558dc78084ca370c49d472ffca2b123dceb9f", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_7.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_7.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -33,6 +33,6 @@ end module PrettyPix_module\n   p = path ([spline([x(1)]),spline([x(2)]),spline([x(3)])])\n   call scene_set_look_at_path(this,p)\n   do i = 1, 3\n-    if (this%look_at_path%r(i)%y2(1) .ne. x(i)) call abort\n+    if (this%look_at_path%r(i)%y2(1) .ne. x(i)) STOP 1\n   end do\n end"}, {"sha": "c4d67f5960e0d817786dd7922730862c1709bcff", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_8.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_8.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -39,10 +39,10 @@ end function neg_at\n   t1%b(1)=1d0\n   t1%b(2)=2d0\n   t2=-t1\n-  if (t2%a .ne. -0.5d0) call abort\n-  if (any(t2%b .ne. [-1d0, -2d0])) call abort\n+  if (t2%a .ne. -0.5d0) STOP 1\n+  if (any(t2%b .ne. [-1d0, -2d0])) STOP 2\n \n   t1=-t1\n-  if (t1%a .ne. -0.5d0) call abort\n-  if (any(t1%b .ne. [-1d0, -2d0])) call abort\n+  if (t1%a .ne. -0.5d0) STOP 3\n+  if (any(t1%b .ne. [-1d0, -2d0])) STOP 4\n end"}, {"sha": "0d0a2bf2874e9ff72bab418ec1641e1ef801160d", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_assign_9.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_assign_9.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -16,5 +16,5 @@ PROGRAM X\n   T1%A = 23\n   T2 = T1\n   T1%A = 42\n-  if (T2%A(1) .NE. 23) CALL ABORT\n+  if (T2%A(1) .NE. 23) STOP 1\n END PROGRAM X"}, {"sha": "d02fb7c8b2c0e3db3ca9a90a29067541c59ddb87", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_auto_array_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_auto_array_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_auto_array_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_auto_array_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -35,8 +35,8 @@ SUBROUTINE extend_lists1\n   SUBROUTINE extend_lists2\n     type(VARYING_STRING),DIMENSION(list_size) :: vocab_swap\n     allocate (vocab_swap(1)%chars(10))\n-    if (.not.allocated(vocab_swap(1)%chars)) call abort ()\n-    if (allocated(vocab_swap(10)%chars)) call abort ()\n+    if (.not.allocated(vocab_swap(1)%chars)) STOP 1\n+    if (allocated(vocab_swap(10)%chars)) STOP 2\n   ENDSUBROUTINE extend_lists2\n   \n ENDPROGRAM vocabulary_word_count"}, {"sha": "4cd5a4c83165834d5f7b1f6ddcc9f278aff33b19", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_auto_array_2.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_auto_array_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_auto_array_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_auto_array_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -18,10 +18,10 @@ subroutine read_grid_header()\n     type(grid_index_region),allocatable :: iregion(:)\n     allocate (iregion(npiece + 1))\n     call read_iregion(npiece,iregion)\n-    if (size(iregion) .ne. npiece + 1) call abort\n-    if (.not.allocated (iregion(npiece)%lons)) call abort\n-    if (allocated (iregion(npiece+1)%lons)) call abort\n-    if (any (iregion(npiece)%lons .ne. [(i, i = 1, npiece)])) call abort\n+    if (size(iregion) .ne. npiece + 1) STOP 1\n+    if (.not.allocated (iregion(npiece)%lons)) STOP 2\n+    if (allocated (iregion(npiece+1)%lons)) STOP 3\n+    if (any (iregion(npiece)%lons .ne. [(i, i = 1, npiece)])) STOP 4\n     deallocate (iregion)\n   end subroutine read_grid_header\n "}, {"sha": "49109a46409fae0f972c7f0fe89a2e671fd796e2", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_basics_1.f90", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -41,7 +41,7 @@ program alloc\n \n     if (allocated(b%a2) .OR. allocated(b%a1)) then\n         write (0, *) 'main - 1'\n-        call abort()\n+        STOP 1\n     end if\n \n     ! 3 calls to _gfortran_deallocate (INTENT(OUT) dummy)\n@@ -75,7 +75,7 @@ subroutine allocate_alloc2(b)\n \n         if (allocated(b%a2) .OR. allocated(b%a1)) then\n             write (0, *) 'allocate_alloc2 - 1'\n-            call abort()\n+            STOP 2\n         end if\n \n         allocate (b%a2(3))\n@@ -86,7 +86,7 @@ subroutine allocate_alloc2(b)\n         do i = 1, 3\n             if (allocated(b%a1(i)%x)) then\n                 write (0, *) 'allocate_alloc2 - 2', i\n-                call abort()\n+                STOP 3\n             end if\n             allocate (b%a1(i)%x(3))\n             b%a1(i)%x = i + [ 1.0, 2.0, 3.0 ]\n@@ -98,7 +98,7 @@ end subroutine allocate_alloc2\n     type(alloc2) function return_alloc2() result(b)\n         if (allocated(b%a2) .OR. allocated(b%a1)) then\n             write (0, *) 'return_alloc2 - 1'\n-            call abort()\n+            STOP 4\n         end if\n \n         allocate (b%a2(3))\n@@ -109,7 +109,7 @@ type(alloc2) function return_alloc2() result(b)\n         do i = 1, 3\n             if (allocated(b%a1(i)%x)) then\n                 write (0, *) 'return_alloc2 - 2', i\n-                call abort()\n+                STOP 5\n             end if\n             allocate (b%a1(i)%x(3))\n             b%a1(i)%x = i + [ 1.0, 2.0, 3.0 ]\n@@ -122,20 +122,20 @@ subroutine check_alloc2(b)\n \n         if (.NOT.(allocated(b%a2) .AND. allocated(b%a1))) then\n             write (0, *) 'check_alloc2 - 1'\n-            call abort()\n+            STOP 6\n         end if\n         if (any(b%a2 /= [ 1, 2, 3 ])) then\n             write (0, *) 'check_alloc2 - 2'\n-            call abort()\n+            STOP 7\n         end if\n         do i = 1, 3\n             if (.NOT.allocated(b%a1(i)%x)) then\n                 write (0, *) 'check_alloc2 - 3', i\n-                call abort()\n+                STOP 8\n             end if\n             if (any(b%a1(i)%x /= i + [ 1.0, 2.0, 3.0 ])) then\n                 write (0, *) 'check_alloc2 - 4', i\n-                call abort()\n+                STOP 9\n             end if\n         end do\n     end subroutine check_alloc2"}, {"sha": "f10eaf7c932859e4bdecdab71e8561ccf126c18a", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_basics_2.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -19,21 +19,21 @@ program main\n   allocate (mol(1))\r\n   allocate (mol(1), stat=i)\r\n   !print *, i  ! /= 0\r\n-  if (i == 0) call abort()\r\n+  if (i == 0) STOP 1\r\n \r\n   allocate (mol(1)%array(5))\r\n   allocate (mol(1)%array(5),stat=i)\r\n   !print *, i  ! /= 0\r\n-  if (i == 0) call abort()\r\n+  if (i == 0) STOP 2\r\n \r\n   allocate (molp(1))\r\n   allocate (molp(1), stat=i)\r\n   !print *, i  ! == 0\r\n-  if (i /= 0) call abort()\r\n+  if (i /= 0) STOP 3\r\n \r\n   allocate (molp(1)%array(5))\r\n   allocate (molp(1)%array(5),stat=i)\r\n   !print *, i  ! /= 0\r\n-  if (i == 0) call abort()\r\n+  if (i == 0) STOP 4\r\n \r\n end program main\r"}, {"sha": "7e88cf26947fcddfa3aa2cbab06e6754718826b0", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_basics_5.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -38,8 +38,8 @@ program tsave\n   integer :: info\n   \n   call bar_foo_ab(info) \n-  if (info .ne. 0) call abort ()\n+  if (info .ne. 0) STOP 1\n   call bar_foo_ab(info) \n-  if (info .ne. 10) call abort ()\n+  if (info .ne. 10) STOP 2\n   \n end program tsave"}, {"sha": "d6ead5842ab15dc3e218d7fd098e412c3e0f893a", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_bounds_1.f90", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_bounds_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_bounds_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_bounds_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -17,15 +17,15 @@ subroutine foo\n     integer(ik4), allocatable :: ia(:)\n     type(struct) :: x\n     allocate(ia(from:to))\n-    if (any(lbound(ia) .ne. -1) .or. any(ubound(ia) .ne. 2)) call abort\n-    if (any(lbound(ia(:)) .ne. 1) .or. any(ubound(ia(:)) .ne. 4)) call abort\n-    if (any(lbound(ia(from:to)) .ne. 1) .or. any(ubound(ia(from:to)) .ne. 4)) call abort\n+    if (any(lbound(ia) .ne. -1) .or. any(ubound(ia) .ne. 2)) STOP 1\n+    if (any(lbound(ia(:)) .ne. 1) .or. any(ubound(ia(:)) .ne. 4)) STOP 2\n+    if (any(lbound(ia(from:to)) .ne. 1) .or. any(ubound(ia(from:to)) .ne. 4)) STOP 3\n     x=struct(ia)\n-    if (any(lbound(x%ib) .ne. -1) .or. any(ubound(x%ib) .ne. 2)) call abort\n+    if (any(lbound(x%ib) .ne. -1) .or. any(ubound(x%ib) .ne. 2)) STOP 4\n     x=struct(ia(:))\n-    if (any(lbound(x%ib) .ne. 1) .or. any(ubound(x%ib) .ne. 4)) call abort\n+    if (any(lbound(x%ib) .ne. 1) .or. any(ubound(x%ib) .ne. 4)) STOP 5\n     x=struct(ia(from:to))\n-    if (any(lbound(x%ib) .ne. 1) .or. any(ubound(x%ib) .ne. 4)) call abort\n+    if (any(lbound(x%ib) .ne. 1) .or. any(ubound(x%ib) .ne. 4)) STOP 6\n     deallocate(ia)\n   end subroutine\n   subroutine bar\n@@ -35,15 +35,15 @@ subroutine bar\n     integer(ik8), allocatable :: ia(:)\n     type(struct) :: x\n     allocate(ia(from:to))\n-    if (any(lbound(ia) .ne. -1) .or. any(ubound(ia) .ne. 2)) call abort\n-    if (any(lbound(ia(:)) .ne. 1) .or. any(ubound(ia(:)) .ne. 4)) call abort\n-    if (any(lbound(ia(from:to)) .ne. 1) .or. any(ubound(ia(from:to)) .ne. 4)) call abort\n+    if (any(lbound(ia) .ne. -1) .or. any(ubound(ia) .ne. 2)) STOP 7\n+    if (any(lbound(ia(:)) .ne. 1) .or. any(ubound(ia(:)) .ne. 4)) STOP 8\n+    if (any(lbound(ia(from:to)) .ne. 1) .or. any(ubound(ia(from:to)) .ne. 4)) STOP 9\n     x=struct(ia)\n-    if (any(lbound(x%ib) .ne. -1) .or. any(ubound(x%ib) .ne. 2)) call abort\n+    if (any(lbound(x%ib) .ne. -1) .or. any(ubound(x%ib) .ne. 2)) STOP 10\n     x=struct(ia(:))\n-    if (any(lbound(x%ib) .ne. 1) .or. any(ubound(x%ib) .ne. 4)) call abort\n+    if (any(lbound(x%ib) .ne. 1) .or. any(ubound(x%ib) .ne. 4)) STOP 11\n     x=struct(ia(from:to))\n-    if (any(lbound(x%ib) .ne. 1) .or. any(ubound(x%ib) .ne. 4)) call abort\n+    if (any(lbound(x%ib) .ne. 1) .or. any(ubound(x%ib) .ne. 4)) STOP 12\n     deallocate(ia)\n   end subroutine\n end"}, {"sha": "722efc80fe13c5fb6d4f8690bc15e55f0f06b48e", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_class_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_class_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_class_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_class_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -23,7 +23,7 @@ end module d_mat_mod\n   allocate (b%a)\n   b%a%i = 42\n   call bug14 (b)\n-  if (allocated (b%a)) call abort\n+  if (allocated (b%a)) STOP 1\n contains\n   subroutine bug14(a)\n     implicit none"}, {"sha": "5aff3381650150df4dc1378d0a3ba19f9d0b3c1c", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_class_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_class_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_class_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_class_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -23,7 +23,7 @@ program bug28\n \n   subroutine cdall(desc)\n     type(desc_type), intent(out)  :: desc\n-    if (allocated(desc%indxmap)) call abort()\n+    if (allocated(desc%indxmap)) STOP 1\n   end subroutine cdall\n \n end program"}, {"sha": "3118b552a3013591da3c6669caec9763ae1411aa", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_class_4.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_class_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_class_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_class_4.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -93,7 +93,7 @@ program test_pr58586\n   call add_t(static_t_init())\n   ! temp = t_init() ! <-- This derefs a null-pointer currently\n   ! Filed as pr66775\n-  if (allocated (temp)) call abort()\n+  if (allocated (temp)) STOP 1\n \n   allocate(od)\n   call add_c(od%init())"}, {"sha": "913ff0c3d99bdc08e7bddc30c47623f7735927f9", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_class_5.f03", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_class_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_class_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_class_5.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -41,7 +41,7 @@ program test_pr61337\n   call add_item(a_list, [.true., .false.])\n   call add_item(a_list, [\"foo\", \"bar\", \"baz\"])\n \n-  if (size(a_list) /= 4) call abort()\n+  if (size(a_list) /= 4) STOP 1\n   do i = 1, size(a_list)\n           call checkarr(a_list(i))\n   end do\n@@ -56,19 +56,19 @@ subroutine checkarr(c)\n     if (allocated(c%items)) then\n       select type (x=>c%items)\n         type is (integer)\n-          if (any(x /= [1, 2])) call abort()\n+          if (any(x /= [1, 2])) STOP 2\n         type is (real(kind=8))\n-          if (any(x /= [3.0_8, 4.0_8])) call abort()\n+          if (any(x /= [3.0_8, 4.0_8])) STOP 3\n         type is (logical)\n-          if (any(x .neqv. [.true., .false.])) call abort()\n+          if (any(x .neqv. [.true., .false.])) STOP 4\n         type is (character(len=*))\n-          if (len(x) /= 3) call abort()\n-          if (any(x /= [\"foo\", \"bar\", \"baz\"])) call abort()\n+          if (len(x) /= 3) STOP 5\n+          if (any(x /= [\"foo\", \"bar\", \"baz\"])) STOP 6\n         class default\n-          call abort()\n+          STOP 7\n       end select\n     else\n-        call abort()\n+        STOP 8\n     end if\n   end subroutine\n end"}, {"sha": "df05f27a4cfc4c64e67e360053b5b905ca3cd167", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_constructor_1.f90", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -31,21 +31,21 @@ Program test_constructor\n \r\n     ! Check that null() works\r\n     x = mytype(null(), null())\r\n-    if (allocated(x%a) .or. allocated(x%q)) call abort()\r\n+    if (allocated(x%a) .or. allocated(x%q)) STOP 1\r\n \r\n     ! Check that unallocated allocatables work\r\n     x = mytype(yy, bar)\r\n-    if (allocated(x%a) .or. allocated(x%q)) call abort()\r\n+    if (allocated(x%a) .or. allocated(x%q)) STOP 2\r\n \r\n     ! Check that non-allocatables work\r\n     x = mytype(y, [foo, foo])\r\n-    if (.not.allocated(x%a) .or. .not.allocated(x%q)) call abort()\r\n-    if (any(lbound(x%a) /= lbound(y))) call abort()\r\n-    if (any(ubound(x%a) /= ubound(y))) call abort()\r\n-    if (any(x%a /= y)) call abort()\r\n-    if (size(x%q) /= 2) call abort()\r\n+    if (.not.allocated(x%a) .or. .not.allocated(x%q)) STOP 3\r\n+    if (any(lbound(x%a) /= lbound(y))) STOP 4\r\n+    if (any(ubound(x%a) /= ubound(y))) STOP 5\r\n+    if (any(x%a /= y)) STOP 6\r\n+    if (size(x%q) /= 2) STOP 7\r\n     do i = 1, 2\r\n-        if (any(x%q(i)%a /= foo%a)) call abort()\r\n+        if (any(x%q(i)%a /= foo%a)) STOP 8\r\n     end do\r\n \r\n     ! Check that allocated allocatables work\r\n@@ -54,22 +54,22 @@ Program test_constructor\n     allocate(bar(2))\r\n     bar = [foo, foo]\r\n     x = mytype(yy, bar)\r\n-    if (.not.allocated(x%a) .or. .not.allocated(x%q)) call abort()\r\n-    if (any(x%a /= y)) call abort()\r\n-    if (size(x%q) /= 2) call abort()\r\n+    if (.not.allocated(x%a) .or. .not.allocated(x%q)) STOP 9\r\n+    if (any(x%a /= y)) STOP 10\r\n+    if (size(x%q) /= 2) STOP 11\r\n     do i = 1, 2\r\n-        if (any(x%q(i)%a /= foo%a)) call abort()\r\n+        if (any(x%q(i)%a /= foo%a)) STOP 12\r\n     end do\r\n \r\n     ! Functions returning arrays\r\n     x = mytype(bluhu(), null())\r\n-    if (.not.allocated(x%a) .or. allocated(x%q)) call abort()\r\n-    if (any(x%a /= reshape ([41, 98, 54, 76], [2,2]))) call abort()\r\n+    if (.not.allocated(x%a) .or. allocated(x%q)) STOP 13\r\n+    if (any(x%a /= reshape ([41, 98, 54, 76], [2,2]))) STOP 14\r\n \r\n     ! Functions returning allocatable arrays\r\n     x = mytype(blaha(), null())\r\n-    if (.not.allocated(x%a) .or. allocated(x%q)) call abort()\r\n-    if (any(x%a /= reshape ([40, 97, 53, 75], [2,2]))) call abort()\r\n+    if (.not.allocated(x%a) .or. allocated(x%q)) STOP 15\r\n+    if (any(x%a /= reshape ([40, 97, 53, 75], [2,2]))) STOP 16\r\n \r\n     ! Check that passing the constructor to a procedure works\r\n     call check_mytype (mytype(y, [foo, foo]))\r\n@@ -80,13 +80,13 @@ subroutine check_mytype(x)\n         type(mytype), intent(in) :: x\r\n         integer :: i\r\n \r\n-        if (.not.allocated(x%a) .or. .not.allocated(x%q)) call abort()\r\n-        if (any(lbound(x%a) /= lbound(y))) call abort()\r\n-        if (any(ubound(x%a) /= ubound(y))) call abort()\r\n-        if (any(x%a /= y)) call abort()\r\n-        if (size(x%q) /= 2) call abort()\r\n+        if (.not.allocated(x%a) .or. .not.allocated(x%q)) STOP 17\r\n+        if (any(lbound(x%a) /= lbound(y))) STOP 18\r\n+        if (any(ubound(x%a) /= ubound(y))) STOP 19\r\n+        if (any(x%a /= y)) STOP 20\r\n+        if (size(x%q) /= 2) STOP 21\r\n         do i = 1, 2\r\n-            if (any(x%q(i)%a /= foo%a)) call abort()\r\n+            if (any(x%q(i)%a /= foo%a)) STOP 22\r\n         end do\r\n \r\n     end subroutine check_mytype\r"}, {"sha": "cd4fb0e95bbe41245bac0aca2b5bb97df35610d4", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_constructor_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -18,9 +18,9 @@\n \n   w = (/thytype(y), thytype (2*y)/)\n   x = mytype (w)\n-  if (any ((/((x%q(j)%h(i),j=1,2),i=1,2)/) .ne. (/1,2,2,4/))) call abort ()\n+  if (any ((/((x%q(j)%h(i),j=1,2),i=1,2)/) .ne. (/1,2,2,4/))) STOP 1\n \n   x = mytype ((/thytype(3*y), thytype (4*y)/))\n-  if (any ((/((x%q(j)%h(i),j=1,2),i=1,2)/) .ne. (/3,4,6,8/))) call abort ()\n+  if (any ((/((x%q(j)%h(i),j=1,2),i=1,2)/) .ne. (/3,4,6,8/))) STOP 2\n \n end"}, {"sha": "73aef7833146ad39466fdf362603478c264514b3", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_constructor_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_3.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -12,5 +12,5 @@\n \n   a = x ((/ 1, 2, 3 /))                             ! This is also pr31320.\n   a = x ((/ a%a, 4 /))\n-  if (any (a%a .ne. (/1,2,3,4/))) call abort ()\n+  if (any (a%a .ne. (/1,2,3,4/))) STOP 1\n end"}, {"sha": "680085b65060f53bd3b878c6c32fc54377766eb2", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_constructor_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_4.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -12,5 +12,5 @@\n   type(a) :: x, y\n   x = a ([1, 2, 3])\n   y = a (x%i(:))  ! used to cause a memory leak and wrong result\n-  if (any (x%i .ne. [1, 2, 3])) call abort\n+  if (any (x%i .ne. [1, 2, 3])) STOP 1\n end"}, {"sha": "df62bde0d4b10dd613645cfe5d311cd4e68c40ed", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_constructor_5.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -18,12 +18,12 @@ Program test_constructor\n     type (thytype), allocatable :: bar(:)\n     type (mytype) :: x, y\n     x = mytype(yy, bar)\n-    if (allocated (x%a) .or. allocated (x%q)) call abort\n+    if (allocated (x%a) .or. allocated (x%q)) STOP 1\n     allocate (yy(2,2))\n     allocate (bar(2))\n     yy = reshape ([10,20,30,40],[2,2])\n     bar = thytype (reshape ([1,2,3,4],[2,2]))\n     ! Check that unallocated allocatables work\n     y = mytype(yy, bar)\n-    if (.not.allocated (y%a) .or. .not.allocated (y%q)) call abort\n+    if (.not.allocated (y%a) .or. .not.allocated (y%q)) STOP 2\n end program test_constructor"}, {"sha": "c235901f3f383c8bd1ebbe19bc9f6ddb59a879f5", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_constructor_6.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_6.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -24,7 +24,7 @@ Program test_constructor\n     subroutine non_alloc\n       type (mytype) :: x\n       x = mytype(yy, bar)\n-      if (allocated (x%a) .or. allocated (x%q)) call abort\n+      if (allocated (x%a) .or. allocated (x%q)) STOP 1\n     end subroutine non_alloc\n     subroutine alloc\n       type (mytype) :: x\n@@ -33,6 +33,6 @@ subroutine alloc\n       yy = reshape ([10,20,30,40],[2,2])\n       bar = thytype (reshape ([1,2,3,4],[2,2]))\n       x = mytype(yy, bar)\n-      if (.not.allocated (x%a) .or. .not.allocated (x%q)) call abort\n+      if (.not.allocated (x%a) .or. .not.allocated (x%q)) STOP 2\n     end subroutine alloc\n end program test_constructor"}, {"sha": "ddc18ba5de5097f604728b3c86714306ad9d0fe5", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_constructor_7.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_7.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -12,7 +12,7 @@\n \n Type(A) :: Me = A(X=1)\n \n-if (allocated(Me%y)) call abort\n-if (allocated(Me%z)) call abort\n+if (allocated(Me%y)) STOP 1\n+if (allocated(Me%z)) STOP 2\n \n end"}, {"sha": "583389604065d0055508c8da68658fdc4b9c9eb3", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_deep_copy_1.f03", "status": "modified", "additions": 174, "deletions": 174, "changes": 348, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_deep_copy_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_deep_copy_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_deep_copy_1.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -24,238 +24,238 @@ program alloc_comp_copy_test\n   o1%i = 42\n \n   call copyO(o1, o2)\n-  if (o2%i /= 42) call abort ()\n-  if (allocated(o2%a_i)) call abort()\n-  if (allocated(o2%it)) call abort()\n-  if (allocated(o2%vec)) call abort()\n+  if (o2%i /= 42) STOP 1\n+  if (allocated(o2%a_i)) STOP 2\n+  if (allocated(o2%it)) STOP 3\n+  if (allocated(o2%vec)) STOP 4\n \n   allocate (o1%a_i, source=2)\n   call copyO(o1, o2)\n-  if (o2%i /= 42) call abort ()\n-  if (.not. allocated(o2%a_i)) call abort()\n-  if (o2%a_i /= 2) call abort()\n-  if (allocated(o2%it)) call abort()\n-  if (allocated(o2%vec)) call abort()\n+  if (o2%i /= 42) STOP 5\n+  if (.not. allocated(o2%a_i)) STOP 6\n+  if (o2%a_i /= 2) STOP 7\n+  if (allocated(o2%it)) STOP 8\n+  if (allocated(o2%vec)) STOP 9\n \n   allocate (o1%it)\n   o1%it%ii = 3\n   call copyO(o1, o2)\n-  if (o2%i /= 42) call abort ()\n-  if (.not. allocated(o2%a_i)) call abort()\n-  if (o2%a_i /= 2) call abort()\n-  if (.not. allocated(o2%it)) call abort()\n-  if (o2%it%ii /= 3) call abort()\n-  if (allocated(o2%it%ai)) call abort()\n-  if (allocated(o2%it%v)) call abort()\n-  if (allocated(o2%vec)) call abort()\n+  if (o2%i /= 42) STOP 10\n+  if (.not. allocated(o2%a_i)) STOP 11\n+  if (o2%a_i /= 2) STOP 12\n+  if (.not. allocated(o2%it)) STOP 13\n+  if (o2%it%ii /= 3) STOP 14\n+  if (allocated(o2%it%ai)) STOP 15\n+  if (allocated(o2%it%v)) STOP 16\n+  if (allocated(o2%vec)) STOP 17\n \n   allocate (o1%it%ai)\n   o1%it%ai = 4\n   call copyO(o1, o2)\n-  if (o2%i /= 42) call abort ()\n-  if (.not. allocated(o2%a_i)) call abort()\n-  if (o2%a_i /= 2) call abort()\n-  if (.not. allocated(o2%it)) call abort()\n-  if (o2%it%ii /= 3) call abort()\n-  if (.not. allocated(o2%it%ai)) call abort()\n-  if (o2%it%ai /= 4) call abort()\n-  if (allocated(o2%it%v)) call abort()\n-  if (allocated(o2%vec)) call abort()\n+  if (o2%i /= 42) STOP 18\n+  if (.not. allocated(o2%a_i)) STOP 19\n+  if (o2%a_i /= 2) STOP 20\n+  if (.not. allocated(o2%it)) STOP 21\n+  if (o2%it%ii /= 3) STOP 22\n+  if (.not. allocated(o2%it%ai)) STOP 23\n+  if (o2%it%ai /= 4) STOP 24\n+  if (allocated(o2%it%v)) STOP 25\n+  if (allocated(o2%vec)) STOP 26\n \n   allocate (o1%it%v(3), source= 5)\n   call copyO(o1, o2)\n-  if (o2%i /= 42) call abort ()\n-  if (.not. allocated(o2%a_i)) call abort()\n-  if (o2%a_i /= 2) call abort()\n-  if (.not. allocated(o2%it)) call abort()\n-  if (o2%it%ii /= 3) call abort()\n-  if (.not. allocated(o2%it%ai)) call abort()\n-  if (o2%it%ai /= 4) call abort()\n-  if (.not. allocated(o2%it%v)) call abort()\n-  if (any (o2%it%v /= 5) .or. size (o2%it%v) /= 3) call abort()\n-  if (allocated(o2%vec)) call abort()\n+  if (o2%i /= 42) STOP 27\n+  if (.not. allocated(o2%a_i)) STOP 28\n+  if (o2%a_i /= 2) STOP 29\n+  if (.not. allocated(o2%it)) STOP 30\n+  if (o2%it%ii /= 3) STOP 31\n+  if (.not. allocated(o2%it%ai)) STOP 32\n+  if (o2%it%ai /= 4) STOP 33\n+  if (.not. allocated(o2%it%v)) STOP 34\n+  if (any (o2%it%v /= 5) .or. size (o2%it%v) /= 3) STOP 35\n+  if (allocated(o2%vec)) STOP 36\n \n   allocate (o1%vec(2))\n   o1%vec(:)%ii = 6\n   call copyO(o1, o2)\n-  if (o2%i /= 42) call abort ()\n-  if (.not. allocated(o2%a_i)) call abort()\n-  if (o2%a_i /= 2) call abort()\n-  if (.not. allocated(o2%it)) call abort()\n-  if (o2%it%ii /= 3) call abort()\n-  if (.not. allocated(o2%it%ai)) call abort()\n-  if (o2%it%ai /= 4) call abort()\n-  if (.not. allocated(o2%it%v)) call abort()\n-  if (size (o2%it%v) /= 3) call abort()\n-  if (any (o2%it%v /= 5)) call abort()\n-  if (.not. allocated(o2%vec)) call abort()\n-  if (size(o2%vec) /= 2) call abort()\n-  if (any(o2%vec(:)%ii /= 6)) call abort()\n-  if (allocated(o2%vec(1)%ai) .or. allocated(o2%vec(2)%ai)) call abort()\n-  if (allocated(o2%vec(1)%v) .or. allocated(o2%vec(2)%v)) call abort()\n+  if (o2%i /= 42) STOP 37\n+  if (.not. allocated(o2%a_i)) STOP 38\n+  if (o2%a_i /= 2) STOP 39\n+  if (.not. allocated(o2%it)) STOP 40\n+  if (o2%it%ii /= 3) STOP 41\n+  if (.not. allocated(o2%it%ai)) STOP 42\n+  if (o2%it%ai /= 4) STOP 43\n+  if (.not. allocated(o2%it%v)) STOP 44\n+  if (size (o2%it%v) /= 3) STOP 45\n+  if (any (o2%it%v /= 5)) STOP 46\n+  if (.not. allocated(o2%vec)) STOP 47\n+  if (size(o2%vec) /= 2) STOP 48\n+  if (any(o2%vec(:)%ii /= 6)) STOP 49\n+  if (allocated(o2%vec(1)%ai) .or. allocated(o2%vec(2)%ai)) STOP 50\n+  if (allocated(o2%vec(1)%v) .or. allocated(o2%vec(2)%v)) STOP 51\n \n   allocate (o1%vec(2)%ai)\n   o1%vec(2)%ai = 7\n   call copyO(o1, o2)\n-  if (o2%i /= 42) call abort ()\n-  if (.not. allocated(o2%a_i)) call abort()\n-  if (o2%a_i /= 2) call abort()\n-  if (.not. allocated(o2%it)) call abort()\n-  if (o2%it%ii /= 3) call abort()\n-  if (.not. allocated(o2%it%ai)) call abort()\n-  if (o2%it%ai /= 4) call abort()\n-  if (.not. allocated(o2%it%v)) call abort()\n-  if (size (o2%it%v) /= 3) call abort()\n-  if (any (o2%it%v /= 5)) call abort()\n-  if (.not. allocated(o2%vec)) call abort()\n-  if (size(o2%vec) /= 2) call abort()\n-  if (any(o2%vec(:)%ii /= 6)) call abort()\n-  if (allocated(o2%vec(1)%ai)) call abort()\n-  if (.not. allocated(o2%vec(2)%ai)) call abort()\n-  if (o2%vec(2)%ai /= 7) call abort()\n-  if (allocated(o2%vec(1)%v) .or. allocated(o2%vec(2)%v)) call abort()\n+  if (o2%i /= 42) STOP 52\n+  if (.not. allocated(o2%a_i)) STOP 53\n+  if (o2%a_i /= 2) STOP 54\n+  if (.not. allocated(o2%it)) STOP 55\n+  if (o2%it%ii /= 3) STOP 56\n+  if (.not. allocated(o2%it%ai)) STOP 57\n+  if (o2%it%ai /= 4) STOP 58\n+  if (.not. allocated(o2%it%v)) STOP 59\n+  if (size (o2%it%v) /= 3) STOP 60\n+  if (any (o2%it%v /= 5)) STOP 61\n+  if (.not. allocated(o2%vec)) STOP 62\n+  if (size(o2%vec) /= 2) STOP 63\n+  if (any(o2%vec(:)%ii /= 6)) STOP 64\n+  if (allocated(o2%vec(1)%ai)) STOP 65\n+  if (.not. allocated(o2%vec(2)%ai)) STOP 66\n+  if (o2%vec(2)%ai /= 7) STOP 67\n+  if (allocated(o2%vec(1)%v) .or. allocated(o2%vec(2)%v)) STOP 68\n \n   allocate (o1%vec(1)%v(3))\n   o1%vec(1)%v = [8, 9, 10]\n   call copyO(o1, o2)\n-  if (o2%i /= 42) call abort ()\n-  if (.not. allocated(o2%a_i)) call abort()\n-  if (o2%a_i /= 2) call abort()\n-  if (.not. allocated(o2%it)) call abort()\n-  if (o2%it%ii /= 3) call abort()\n-  if (.not. allocated(o2%it%ai)) call abort()\n-  if (o2%it%ai /= 4) call abort()\n-  if (.not. allocated(o2%it%v)) call abort()\n-  if (size (o2%it%v) /= 3) call abort()\n-  if (any (o2%it%v /= 5)) call abort()\n-  if (.not. allocated(o2%vec)) call abort()\n-  if (size(o2%vec) /= 2) call abort()\n-  if (any(o2%vec(:)%ii /= 6)) call abort()\n-  if (allocated(o2%vec(1)%ai)) call abort()\n-  if (.not. allocated(o2%vec(2)%ai)) call abort()\n-  if (o2%vec(2)%ai /= 7) call abort()\n-  if (.not. allocated(o2%vec(1)%v)) call abort()\n-  if (any (o2%vec(1)%v /= [8,9,10])) call abort()\n-  if (allocated(o2%vec(2)%v)) call abort()\n+  if (o2%i /= 42) STOP 69\n+  if (.not. allocated(o2%a_i)) STOP 70\n+  if (o2%a_i /= 2) STOP 71\n+  if (.not. allocated(o2%it)) STOP 72\n+  if (o2%it%ii /= 3) STOP 73\n+  if (.not. allocated(o2%it%ai)) STOP 74\n+  if (o2%it%ai /= 4) STOP 75\n+  if (.not. allocated(o2%it%v)) STOP 76\n+  if (size (o2%it%v) /= 3) STOP 77\n+  if (any (o2%it%v /= 5)) STOP 78\n+  if (.not. allocated(o2%vec)) STOP 79\n+  if (size(o2%vec) /= 2) STOP 80\n+  if (any(o2%vec(:)%ii /= 6)) STOP 81\n+  if (allocated(o2%vec(1)%ai)) STOP 82\n+  if (.not. allocated(o2%vec(2)%ai)) STOP 83\n+  if (o2%vec(2)%ai /= 7) STOP 84\n+  if (.not. allocated(o2%vec(1)%v)) STOP 85\n+  if (any (o2%vec(1)%v /= [8,9,10])) STOP 86\n+  if (allocated(o2%vec(2)%v)) STOP 87\n \n   ! Now all the above for class objects.\n   allocate (o3, o4)\n   o3%i = 42\n \n   call copyO(o3, o4)\n-  if (o4%i /= 42) call abort ()\n-  if (allocated(o4%a_i)) call abort()\n-  if (allocated(o4%it)) call abort()\n-  if (allocated(o4%vec)) call abort()\n+  if (o4%i /= 42) STOP 88\n+  if (allocated(o4%a_i)) STOP 89\n+  if (allocated(o4%it)) STOP 90\n+  if (allocated(o4%vec)) STOP 91\n \n   allocate (o3%a_i, source=2)\n   call copyO(o3, o4)\n-  if (o4%i /= 42) call abort ()\n-  if (.not. allocated(o4%a_i)) call abort()\n-  if (o4%a_i /= 2) call abort()\n-  if (allocated(o4%it)) call abort()\n-  if (allocated(o4%vec)) call abort()\n+  if (o4%i /= 42) STOP 92\n+  if (.not. allocated(o4%a_i)) STOP 93\n+  if (o4%a_i /= 2) STOP 94\n+  if (allocated(o4%it)) STOP 95\n+  if (allocated(o4%vec)) STOP 96\n \n   allocate (o3%it)\n   o3%it%ii = 3\n   call copyO(o3, o4)\n-  if (o4%i /= 42) call abort ()\n-  if (.not. allocated(o4%a_i)) call abort()\n-  if (o4%a_i /= 2) call abort()\n-  if (.not. allocated(o4%it)) call abort()\n-  if (o4%it%ii /= 3) call abort()\n-  if (allocated(o4%it%ai)) call abort()\n-  if (allocated(o4%it%v)) call abort()\n-  if (allocated(o4%vec)) call abort()\n+  if (o4%i /= 42) STOP 97\n+  if (.not. allocated(o4%a_i)) STOP 98\n+  if (o4%a_i /= 2) STOP 99\n+  if (.not. allocated(o4%it)) STOP 100\n+  if (o4%it%ii /= 3) STOP 101\n+  if (allocated(o4%it%ai)) STOP 102\n+  if (allocated(o4%it%v)) STOP 103\n+  if (allocated(o4%vec)) STOP 104\n \n   allocate (o3%it%ai)\n   o3%it%ai = 4\n   call copyO(o3, o4)\n-  if (o4%i /= 42) call abort ()\n-  if (.not. allocated(o4%a_i)) call abort()\n-  if (o4%a_i /= 2) call abort()\n-  if (.not. allocated(o4%it)) call abort()\n-  if (o4%it%ii /= 3) call abort()\n-  if (.not. allocated(o4%it%ai)) call abort()\n-  if (o4%it%ai /= 4) call abort()\n-  if (allocated(o4%it%v)) call abort()\n-  if (allocated(o4%vec)) call abort()\n+  if (o4%i /= 42) STOP 105\n+  if (.not. allocated(o4%a_i)) STOP 106\n+  if (o4%a_i /= 2) STOP 107\n+  if (.not. allocated(o4%it)) STOP 108\n+  if (o4%it%ii /= 3) STOP 109\n+  if (.not. allocated(o4%it%ai)) STOP 110\n+  if (o4%it%ai /= 4) STOP 111\n+  if (allocated(o4%it%v)) STOP 112\n+  if (allocated(o4%vec)) STOP 113\n \n   allocate (o3%it%v(3), source= 5)\n   call copyO(o3, o4)\n-  if (o4%i /= 42) call abort ()\n-  if (.not. allocated(o4%a_i)) call abort()\n-  if (o4%a_i /= 2) call abort()\n-  if (.not. allocated(o4%it)) call abort()\n-  if (o4%it%ii /= 3) call abort()\n-  if (.not. allocated(o4%it%ai)) call abort()\n-  if (o4%it%ai /= 4) call abort()\n-  if (.not. allocated(o4%it%v)) call abort()\n-  if (any (o4%it%v /= 5) .or. size (o4%it%v) /= 3) call abort()\n-  if (allocated(o4%vec)) call abort()\n+  if (o4%i /= 42) STOP 114\n+  if (.not. allocated(o4%a_i)) STOP 115\n+  if (o4%a_i /= 2) STOP 116\n+  if (.not. allocated(o4%it)) STOP 117\n+  if (o4%it%ii /= 3) STOP 118\n+  if (.not. allocated(o4%it%ai)) STOP 119\n+  if (o4%it%ai /= 4) STOP 120\n+  if (.not. allocated(o4%it%v)) STOP 121\n+  if (any (o4%it%v /= 5) .or. size (o4%it%v) /= 3) STOP 122\n+  if (allocated(o4%vec)) STOP 123\n \n   allocate (o3%vec(2))\n   o3%vec(:)%ii = 6\n   call copyO(o3, o4)\n-  if (o4%i /= 42) call abort ()\n-  if (.not. allocated(o4%a_i)) call abort()\n-  if (o4%a_i /= 2) call abort()\n-  if (.not. allocated(o4%it)) call abort()\n-  if (o4%it%ii /= 3) call abort()\n-  if (.not. allocated(o4%it%ai)) call abort()\n-  if (o4%it%ai /= 4) call abort()\n-  if (.not. allocated(o4%it%v)) call abort()\n-  if (size (o4%it%v) /= 3) call abort()\n-  if (any (o4%it%v /= 5)) call abort()\n-  if (.not. allocated(o4%vec)) call abort()\n-  if (size(o4%vec) /= 2) call abort()\n-  if (any(o4%vec(:)%ii /= 6)) call abort()\n-  if (allocated(o4%vec(1)%ai) .or. allocated(o4%vec(2)%ai)) call abort()\n-  if (allocated(o4%vec(1)%v) .or. allocated(o4%vec(2)%v)) call abort()\n+  if (o4%i /= 42) STOP 124\n+  if (.not. allocated(o4%a_i)) STOP 125\n+  if (o4%a_i /= 2) STOP 126\n+  if (.not. allocated(o4%it)) STOP 127\n+  if (o4%it%ii /= 3) STOP 128\n+  if (.not. allocated(o4%it%ai)) STOP 129\n+  if (o4%it%ai /= 4) STOP 130\n+  if (.not. allocated(o4%it%v)) STOP 131\n+  if (size (o4%it%v) /= 3) STOP 132\n+  if (any (o4%it%v /= 5)) STOP 133\n+  if (.not. allocated(o4%vec)) STOP 134\n+  if (size(o4%vec) /= 2) STOP 135\n+  if (any(o4%vec(:)%ii /= 6)) STOP 136\n+  if (allocated(o4%vec(1)%ai) .or. allocated(o4%vec(2)%ai)) STOP 137\n+  if (allocated(o4%vec(1)%v) .or. allocated(o4%vec(2)%v)) STOP 138\n \n   allocate (o3%vec(2)%ai)\n   o3%vec(2)%ai = 7\n   call copyO(o3, o4)\n-  if (o4%i /= 42) call abort ()\n-  if (.not. allocated(o4%a_i)) call abort()\n-  if (o4%a_i /= 2) call abort()\n-  if (.not. allocated(o4%it)) call abort()\n-  if (o4%it%ii /= 3) call abort()\n-  if (.not. allocated(o4%it%ai)) call abort()\n-  if (o4%it%ai /= 4) call abort()\n-  if (.not. allocated(o4%it%v)) call abort()\n-  if (size (o4%it%v) /= 3) call abort()\n-  if (any (o4%it%v /= 5)) call abort()\n-  if (.not. allocated(o4%vec)) call abort()\n-  if (size(o4%vec) /= 2) call abort()\n-  if (any(o4%vec(:)%ii /= 6)) call abort()\n-  if (allocated(o4%vec(1)%ai)) call abort()\n-  if (.not. allocated(o4%vec(2)%ai)) call abort()\n-  if (o4%vec(2)%ai /= 7) call abort()\n-  if (allocated(o4%vec(1)%v) .or. allocated(o4%vec(2)%v)) call abort()\n+  if (o4%i /= 42) STOP 139\n+  if (.not. allocated(o4%a_i)) STOP 140\n+  if (o4%a_i /= 2) STOP 141\n+  if (.not. allocated(o4%it)) STOP 142\n+  if (o4%it%ii /= 3) STOP 143\n+  if (.not. allocated(o4%it%ai)) STOP 144\n+  if (o4%it%ai /= 4) STOP 145\n+  if (.not. allocated(o4%it%v)) STOP 146\n+  if (size (o4%it%v) /= 3) STOP 147\n+  if (any (o4%it%v /= 5)) STOP 148\n+  if (.not. allocated(o4%vec)) STOP 149\n+  if (size(o4%vec) /= 2) STOP 150\n+  if (any(o4%vec(:)%ii /= 6)) STOP 151\n+  if (allocated(o4%vec(1)%ai)) STOP 152\n+  if (.not. allocated(o4%vec(2)%ai)) STOP 153\n+  if (o4%vec(2)%ai /= 7) STOP 154\n+  if (allocated(o4%vec(1)%v) .or. allocated(o4%vec(2)%v)) STOP 155\n \n   allocate (o3%vec(1)%v(3))\n   o3%vec(1)%v = [8, 9, 10]\n   call copyO(o3, o4)\n-  if (o4%i /= 42) call abort ()\n-  if (.not. allocated(o4%a_i)) call abort()\n-  if (o4%a_i /= 2) call abort()\n-  if (.not. allocated(o4%it)) call abort()\n-  if (o4%it%ii /= 3) call abort()\n-  if (.not. allocated(o4%it%ai)) call abort()\n-  if (o4%it%ai /= 4) call abort()\n-  if (.not. allocated(o4%it%v)) call abort()\n-  if (size (o4%it%v) /= 3) call abort()\n-  if (any (o4%it%v /= 5)) call abort()\n-  if (.not. allocated(o4%vec)) call abort()\n-  if (size(o4%vec) /= 2) call abort()\n-  if (any(o4%vec(:)%ii /= 6)) call abort()\n-  if (allocated(o4%vec(1)%ai)) call abort()\n-  if (.not. allocated(o4%vec(2)%ai)) call abort()\n-  if (o4%vec(2)%ai /= 7) call abort()\n-  if (.not. allocated(o4%vec(1)%v)) call abort()\n-  if (any (o4%vec(1)%v /= [8,9,10])) call abort()\n-  if (allocated(o4%vec(2)%v)) call abort()\n+  if (o4%i /= 42) STOP 156\n+  if (.not. allocated(o4%a_i)) STOP 157\n+  if (o4%a_i /= 2) STOP 158\n+  if (.not. allocated(o4%it)) STOP 159\n+  if (o4%it%ii /= 3) STOP 160\n+  if (.not. allocated(o4%it%ai)) STOP 161\n+  if (o4%it%ai /= 4) STOP 162\n+  if (.not. allocated(o4%it%v)) STOP 163\n+  if (size (o4%it%v) /= 3) STOP 164\n+  if (any (o4%it%v /= 5)) STOP 165\n+  if (.not. allocated(o4%vec)) STOP 166\n+  if (size(o4%vec) /= 2) STOP 167\n+  if (any(o4%vec(:)%ii /= 6)) STOP 168\n+  if (allocated(o4%vec(1)%ai)) STOP 169\n+  if (.not. allocated(o4%vec(2)%ai)) STOP 170\n+  if (o4%vec(2)%ai /= 7) STOP 171\n+  if (.not. allocated(o4%vec(1)%v)) STOP 172\n+  if (any (o4%vec(1)%v /= [8,9,10])) STOP 173\n+  if (allocated(o4%vec(2)%v)) STOP 174\n \n contains\n "}, {"sha": "595775b32cef8b86d4623f91423f9e0e95cd45ea", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_deep_copy_2.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_deep_copy_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_deep_copy_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_deep_copy_2.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -15,7 +15,7 @@ program alloc_comp_deep_copy_2\n \n   c%g=a(1.) \n   d=c\n-  if (d%g%f /= 1.0) call abort()\n+  if (d%g%f /= 1.0) STOP 1\n   d%g%f = 2.0\n-  if (d%g%f /= 2.0) call abort()\n+  if (d%g%f /= 2.0) STOP 2\n end program"}, {"sha": "20a415e8e15560a71023ac93fa784de8a3484fda", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_deep_copy_3.f03", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_deep_copy_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_deep_copy_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_deep_copy_3.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -22,9 +22,9 @@ program p\n     v(3)%c2%c1 = 11\n     v(4)%c2%c1 = 13\n \n-    if (v(1)%c2%c1 /=  3) call abort\n-    if (v(2)%c2%c1 /=  7) call abort\n-    if (v(3)%c2%c1 /= 11) call abort\n-    if (v(4)%c2%c1 /= 13) call abort\n+    if (v(1)%c2%c1 /=  3) STOP 1\n+    if (v(2)%c2%c1 /=  7) STOP 2\n+    if (v(3)%c2%c1 /= 11) STOP 3\n+    if (v(4)%c2%c1 /= 13) STOP 4\n   end block\n end program p"}, {"sha": "6cc383c7192c48ffb8f84513c180b9aaceb6ba45", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_default_init_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_default_init_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_default_init_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_default_init_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -12,13 +12,13 @@ program boh\n   call mah (1, c2)\r\n   call mah (2, c3)\r\n   !\n-  if (c1 /= c2) call abort\n-  if (c1 /= c3) call abort\r\n+  if (c1 /= c2) STOP 1\n+  if (c1 /= c3) STOP 1\n   !\r\n   call mah0 (c4) ! These calls deal with PR34704\r\n   call mah1 (c5)\r\n   !\n-  if (c4 /= c5) call abort\n+  if (c4 /= c5) STOP 2\n   !\r\n end program boh\r\n !\r"}, {"sha": "d9a386676d7562f80b5cc139fea5afad3f5a68f6", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_default_init_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_default_init_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_default_init_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_default_init_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -11,7 +11,7 @@ program testprog\n   integer, save :: callnb = 0\n   type(t_type) :: this\n   allocate ( this % chars ( 4))\n-  if (.not.recursivefunc (this) .or. (callnb .ne. 10)) call abort ()\n+  if (.not.recursivefunc (this) .or. (callnb .ne. 10)) STOP 1\n contains\n   recursive function recursivefunc ( this ) result ( match )\n     type(t_type), intent(in) :: this"}, {"sha": "1ef5f2ab26274e74ae699326009939ade2f559c5", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_initializer_1.f90", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_initializer_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_initializer_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_initializer_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -37,11 +37,11 @@ program foo\n \n   call p_bld (a, pre)\n \n-  if (associated (wee%ap) .or. wee%i /= 101) call abort ()\n+  if (associated (wee%ap) .or. wee%i /= 101) STOP 1\n   wee%ap => a\n-  if (.not.associated (wee%ap) .or. allocated (wee%av)) call abort ()\n+  if (.not.associated (wee%ap) .or. allocated (wee%av)) STOP 2\n   wee = basep_type ((/m_type ((/201, 202, 203/))/), null (), 99)\n-  if (.not.allocated (wee%av) .or. associated (wee%ap) .or. (wee%i .ne. 99)) call abort () \n+  if (.not.allocated (wee%av) .or. associated (wee%ap) .or. (wee%i .ne. 99)) STOP 3 \n \n contains\n \n@@ -53,18 +53,18 @@ subroutine test_ab8 ()\n     if (.not.allocated(p%basepv)) then \n       allocate(p%basepv(1),stat=ierr)\n     endif\n-    if (allocated (p%basepv) .neqv. .true.) call abort ()\n-    if (allocated (p%basepv(1)%av) .neqv. .false.) call abort\n-    if (p%basepv(1)%i .ne. 101) call abort ()\n+    if (allocated (p%basepv) .neqv. .true.) STOP 4\n+    if (allocated (p%basepv(1)%av) .neqv. .false.) STOP 1\n+    if (p%basepv(1)%i .ne. 101) STOP 5\n \n   end subroutine test_ab8\n \n     subroutine p_bld (a, p)\n       use p_type_mod\n       type (m_type) :: a\n       type(p_type) :: p\n-      if (any (a%p .ne. (/101,102/))) call abort ()\n-      if (allocated (p%basepv) .or. (p%p2 .ne. 1)) call abort ()\n+      if (any (a%p .ne. (/101,102/))) STOP 6\n+      if (allocated (p%basepv) .or. (p%p2 .ne. 1)) STOP 7\n     end subroutine p_bld\n \n end program foo"}, {"sha": "2356e16ddb9dc4dbf68f6a0b0284779bcc4a6152", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_initializer_4.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_initializer_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_initializer_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_initializer_4.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -10,5 +10,5 @@ PROGRAM main\n   END TYPE\n   TYPE(test_typ) :: my_test_typ\n   my_test_typ = test_typ (a = 1.0)\n-  if (abs (my_test_typ%a - 1.0) .gt. 1e-6) call abort\n+  if (abs (my_test_typ%a - 1.0) .gt. 1e-6) STOP 1\n END PROGRAM main"}, {"sha": "3961dc2174d91aca9f5abe6a44ab37a9b04e83f6", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_optional_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_optional_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_optional_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_optional_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -12,10 +12,10 @@ program test_iso\n   type(ivs) :: v_str\n   integer :: i\n   call foo(v_str, i)\n-  if (v_str%chars(1) .ne. \"a\") call abort\n-  if (i .ne. 0) call abort\n+  if (v_str%chars(1) .ne. \"a\") STOP 1\n+  if (i .ne. 0) STOP 2\n   call foo(flag = i)\n-  if (i .ne. 1) call abort\n+  if (i .ne. 1) STOP 3\n contains\n   subroutine foo (arg, flag)\n     type(ivs), optional, intent(out) :: arg"}, {"sha": "bba3a439675043b24699db05ec5074e7f55d567f", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_result_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_result_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_result_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_result_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -28,5 +28,5 @@ program test\n   implicit none\n   type(t_2) x(1)\n   x = a_fun(0)\n-  if (any (x(1)%mons%coeff .ne. 99)) call abort\n+  if (any (x(1)%mons%coeff .ne. 99)) STOP 1\n end program test"}, {"sha": "89ff5ac4182be02d063119baa662eb823fc528d5", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_result_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_result_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_result_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_result_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -17,12 +17,12 @@ function func (a)\n     type(t), pointer :: func\n     type(t), target :: a\n     integer, save :: i = 0\n-    if (i /= 0) call abort ! multiple calls would cause this abort\n+    if (i /= 0) STOP 1! multiple calls would cause this abort\n     i = i + 1\n     func => a\n   end function func\n   subroutine sub (a)\n     type(t), intent(IN), target :: a\n-    if (any (a%A .ne. [1,2,3])) call abort\n+    if (any (a%A .ne. [1,2,3])) STOP 2\n   end subroutine sub\n end"}, {"sha": "14597c3282e731992714c98495fcb90979ab8c02", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_scalar_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_scalar_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_scalar_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_scalar_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -13,5 +13,5 @@ program main\n   a2(1)%entry = 1\n   a1(1:1) = pack (a2(1:1), mask = [.true.])\n   deallocate (a2(1)%entry)\n-  if (a1(1)%entry .ne. 1) call abort\n+  if (a1(1)%entry .ne. 1) STOP 1\n end program main"}, {"sha": "fa5fd5118587dbee90e190f07004811cdd258fcc", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_transformational_1.f90", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_transformational_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_transformational_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_transformational_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -31,24 +31,24 @@ subroutine foo\n     end do\n     a1(1:2) = pack (a2, [.true., .false., .true., .false.])\n     do i = 1, 4\n-      if (.not.allocated (a1(i)%entry)) call abort\n+      if (.not.allocated (a1(i)%entry)) STOP 1\n       if (i .gt. 2) then\n-        if (any (a1(i)%entry .ne. [1,2])) call abort\n+        if (any (a1(i)%entry .ne. [1,2])) STOP 2\n       else\n-        if (any (a1(i)%entry .ne. [3,4])) call abort\n+        if (any (a1(i)%entry .ne. [3,4])) STOP 3\n       end if\n     end do\n !\n ! Now check unpack\n !\n     a1 = unpack (a1, [.true., .true., .false., .false.], a3)\n-    if (any (a1%index .ne. [1,3,3,4])) call abort\n+    if (any (a1%index .ne. [1,3,3,4])) STOP 4\n     do i = 1, 4\n-      if (.not.allocated (a1(i)%entry)) call abort\n+      if (.not.allocated (a1(i)%entry)) STOP 5\n       if (i .gt. 2) then\n-        if (any (a1(i)%entry .ne. [4,5])) call abort\n+        if (any (a1(i)%entry .ne. [4,5])) STOP 6\n       else\n-        if (any (a1(i)%entry .ne. [3,4])) call abort\n+        if (any (a1(i)%entry .ne. [3,4])) STOP 7\n       end if\n     end do\n   end subroutine\n@@ -71,8 +71,8 @@ subroutine bar\n     a1 = transpose (a2)\n     do i = 1, 2\n       do j = 1, 2\n-        if (a1(i,j)%index .ne. i + (j - 1)*2) call abort\n-        if (any (a1(i,j)%entry .ne. [j,i])) call abort\n+        if (a1(i,j)%index .ne. i + (j - 1)*2) STOP 8\n+        if (any (a1(i,j)%entry .ne. [j,i])) STOP 9\n       end do\n     end do\n   end subroutine"}, {"sha": "57a81f2c061f0ec8f4de670ae2971c482e5e6907", "filename": "gcc/testsuite/gfortran.dg/allocatable_dummy_1.f90", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_dummy_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_dummy_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_dummy_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -7,19 +7,19 @@ program alloc_dummy\n     integer, allocatable :: b(:)\n \n     call init(a)\n-    if (.NOT.allocated(a)) call abort()\n-    if (.NOT.all(a == [ 1, 2, 3 ])) call abort()\n+    if (.NOT.allocated(a)) STOP 1\n+    if (.NOT.all(a == [ 1, 2, 3 ])) STOP 2\n \n     call useit(a, b)\n-    if (.NOT.all(b == [ 1, 2, 3 ])) call abort()\n+    if (.NOT.all(b == [ 1, 2, 3 ])) STOP 3\n \n-    if (.NOT.all(whatever(a) == [ 1, 2, 3 ])) call abort()\n+    if (.NOT.all(whatever(a) == [ 1, 2, 3 ])) STOP 4\n \n     call kill(a)\n-    if (allocated(a)) call abort()\n+    if (allocated(a)) STOP 5\n \n     call kill(b)\n-    if (allocated(b)) call abort()\n+    if (allocated(b)) STOP 6\n \n contains\n \n@@ -32,7 +32,7 @@ end subroutine init\n     subroutine useit(x, y)\n         integer, allocatable, intent(in)  :: x(:)\n         integer, allocatable, intent(out) :: y(:)\n-        if (allocated(y)) call abort()\n+        if (allocated(y)) STOP 7\n         call init(y)\n         y = x\n     end subroutine useit"}, {"sha": "b58f08abd550a6cee9c94f0d0d0962c664811b49", "filename": "gcc/testsuite/gfortran.dg/allocatable_dummy_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_dummy_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_dummy_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_dummy_3.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -13,7 +13,7 @@ end subroutine foo\n     end interface\n \n     call foo(a)\n-    if (any(a /= [ 1, 2, 3 ])) call abort()\n+    if (any(a /= [ 1, 2, 3 ])) STOP 1\n \n end program\n "}, {"sha": "f96ebc499e86462a24241513f2842bdf5a0074d2", "filename": "gcc/testsuite/gfortran.dg/allocatable_function_1.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,7 +8,7 @@\n subroutine moobar (a)\n     integer, intent(in) :: a(:)\n \n-    if (.not.all(a == [ 1, 2, 3 ])) call abort()\n+    if (.not.all(a == [ 1, 2, 3 ])) STOP 1\n end subroutine moobar\n \n function foo2 (n)\n@@ -55,21 +55,21 @@ end function foo2\n     end interface\n \n ! 2 _gfortran_internal_free's\n-    if (.not.all(foo1(3) == [ 1, 2, 3 ])) call abort()\n+    if (.not.all(foo1(3) == [ 1, 2, 3 ])) STOP 2\n     a = foo1(size(a))\n \n ! 1 _gfortran_internal_free\n-    if (.not.all(a == [ 1, 2, 3 ])) call abort()\n+    if (.not.all(a == [ 1, 2, 3 ])) STOP 3\n     call foobar(foo1(3))\n \n ! 1 _gfortran_internal_free\n-    if (.not.all(2*bar(size(a)) + 5 == [ 7, 9, 11 ])) call abort()\n+    if (.not.all(2*bar(size(a)) + 5 == [ 7, 9, 11 ])) STOP 4\n \n ! Although the rhs determines the loop size, the lhs reference is\n ! evaluated, in case it has side-effects or is needed for bounds checking.\n ! 3 _gfortran_internal_free's\n     a(1:size (bar (3))) = 2*bar(size(a)) + 2 + a(size (bar (3)))\n-    if (.not.all(a == [ 7, 9, 11 ])) call abort()\n+    if (.not.all(a == [ 7, 9, 11 ])) STOP 5\n \n ! 3 _gfortran_internal_free's\n     call moobar(foo1(3))   ! internal function\n@@ -82,7 +82,7 @@ end function foo2\n     subroutine foobar (a)\n         integer, intent(in) :: a(:)\n \n-        if (.not.all(a == [ 1, 2, 3 ])) call abort()\n+        if (.not.all(a == [ 1, 2, 3 ])) STOP 6\n     end subroutine foobar\n \n     function foo1 (n)"}, {"sha": "2f93bb0f841d72593832f90d6f9eedae60bfb10b", "filename": "gcc/testsuite/gfortran.dg/allocatable_function_10.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_10.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -39,8 +39,8 @@ program p\n   implicit none\n   type(t), dimension(2) :: c\n   c=tt(ts([99,199,1999]),ts([42,142]))\n-  if (any (c(1)%r .ne. [99,199,1999])) call abort\n-  if (any (c(2)%r .ne. [42,142])) call abort\n+  if (any (c(1)%r .ne. [99,199,1999])) STOP 1\n+  if (any (c(2)%r .ne. [42,142])) STOP 2\n   deallocate(c(1)%r)\n   deallocate(c(2)%r)\n end program p"}, {"sha": "9209860f9d186ef949658e48e2f1b4e006ba8b58", "filename": "gcc/testsuite/gfortran.dg/allocatable_function_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_3.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -20,5 +20,5 @@ function transform_to_spectral_from() result(spectral)\n       integer, allocatable :: spectral(:)\n     end function transform_to_spectral_from\n   end interface\n-  if (any (transform_to_spectral_from () .ne. (/1,2/))) call abort ()\n+  if (any (transform_to_spectral_from () .ne. (/1,2/))) STOP 1\n end"}, {"sha": "308db8fb04baaa8ff05fa6aee6f172e30d76fc58", "filename": "gcc/testsuite/gfortran.dg/allocatable_function_5.f90", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -20,20 +20,20 @@ function mbar (carg)\n   use m\n   character (:), allocatable :: lhs\n   lhs = foo (\"foo calling \")\n-  if (lhs .ne. \"foo\") call abort\n-  if (len (lhs) .ne. 3) call abort\n+  if (lhs .ne. \"foo\") STOP 1\n+  if (len (lhs) .ne. 3) STOP 2\n   deallocate (lhs)\n   lhs = bar (\"bar calling - baaaa!\")\n-  if (lhs .ne. \"bar calling\") call abort\n-  if (len (lhs) .ne. 12) call abort\n+  if (lhs .ne. \"bar calling\") STOP 3\n+  if (len (lhs) .ne. 12) STOP 4\n   deallocate (lhs)\n   lhs = mfoo (\"mfoo calling \")\n-  if (lhs .ne. \"foo\") call abort\n-  if (len (lhs) .ne. 3) call abort\n+  if (lhs .ne. \"foo\") STOP 5\n+  if (len (lhs) .ne. 3) STOP 6\n   deallocate (lhs)\n   lhs = mbar (\"mbar calling - baaaa!\")\n-  if (lhs .ne. \"bar calling\") call abort\n-  if (len (lhs) .ne. 12) call abort\n+  if (lhs .ne. \"bar calling\") STOP 7\n+  if (len (lhs) .ne. 12) STOP 8\n contains\n   function foo (carg) result(res)\n     character (:), allocatable :: res"}, {"sha": "8edb40acff9bd230bb8e861ae037ae0465f59384", "filename": "gcc/testsuite/gfortran.dg/allocatable_function_6.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_6.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -6,11 +6,11 @@\n !\n implicit none\n CHARACTER(LEN=:),ALLOCATABLE :: str \n-if (s_to_c(\"ABCdef\") /= \"ABCdef\" .or. len(s_to_c(\"ABCdef\")) /= 6) call abort()\n+if (s_to_c(\"ABCdef\") /= \"ABCdef\" .or. len(s_to_c(\"ABCdef\")) /= 6) STOP 1\n str = s_to_c(\"ABCdef\")\n-if (str /= \"ABCdef\" .or. len(str) /= 6) call abort()\n+if (str /= \"ABCdef\" .or. len(str) /= 6) STOP 2\n str(1:3) = s_to_c(\"123\")\n-if (str /= \"123def\" .or. len(str) /= 6) call abort()\n+if (str /= \"123def\" .or. len(str) /= 6) STOP 3\n \n contains\n "}, {"sha": "6629cd4b3665a1e8781d438b0ae9396d291bb592", "filename": "gcc/testsuite/gfortran.dg/allocatable_function_7.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_7.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -13,11 +13,11 @@ PURE FUNCTION s_to_c(string)\n ENDFUNCTION s_to_c\n end interface\n CHARACTER(LEN=:),ALLOCATABLE :: str \n-if (s_to_c(\"ABCdef\") /= \"ABCdef\" .or. len(s_to_c(\"ABCdef\")) /= 6) call abort()\n+if (s_to_c(\"ABCdef\") /= \"ABCdef\" .or. len(s_to_c(\"ABCdef\")) /= 6) STOP 1\n str = s_to_c(\"ABCdef\")\n-if (str /= \"ABCdef\" .or. len(str) /= 6) call abort()\n+if (str /= \"ABCdef\" .or. len(str) /= 6) STOP 2\n str(1:3) = s_to_c(\"123\")\n-if (str /= \"123def\" .or. len(str) /= 6) call abort()\n+if (str /= \"123def\" .or. len(str) /= 6) STOP 3\n \n end\n "}, {"sha": "b80327545f6d06c884d68c674dade7a1e40d2548", "filename": "gcc/testsuite/gfortran.dg/allocatable_function_8.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_function_8.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -45,10 +45,10 @@ program main\n    real, dimension(2) :: x = 1.0, y\n ! PR61459\n    y = f_workaround (x)\n-   if (any (f_segfault (x) .ne. y)) call abort\n-   if (any (f_segfault_plus (x) .ne. y)) call abort\n+   if (any (f_segfault (x) .ne. y)) STOP 1\n+   if (any (f_segfault_plus (x) .ne. y)) STOP 2\n ! PR58883\n-   if (any (foo () .ne. reshape([1,2,3,4,5,6,7,8],[2,4]))) call abort\n+   if (any (foo () .ne. reshape([1,2,3,4,5,6,7,8],[2,4]))) STOP 3\n contains\n   function foo()\n     integer, allocatable  :: foo(:,:)"}, {"sha": "12731940e052febd820ec5c743595d6cd4d9e641", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -10,9 +10,9 @@\n allocate(scalar)\n scalar = exp(1.)\n print *,scalar\n-if (.not. allocated(scalar)) call abort()\n+if (.not. allocated(scalar)) STOP 1\n deallocate(scalar)\n-if (allocated(scalar)) call abort()\n+if (allocated(scalar)) STOP 2\n \n end\n "}, {"sha": "d648554c6bf41a43434c34003a8484ac8255b1fc", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_10.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_10.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -10,5 +10,5 @@\n type(t), allocatable :: a\n \n deallocate(a,stat=istat)\n-if (istat == 0) call abort()\n+if (istat == 0) STOP 1\n end "}, {"sha": "3521468e4918a069dbb12009ac2d24d9b3eab9e3", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_12.f90", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_12.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,23 +8,23 @@\n character(len=5), allocatable :: str\n allocate(str)\n str = '1bcde'\n-if(str /= '1bcde') call abort()\n+if(str /= '1bcde') STOP 1\n call sub(str,len(str))\n-if(str /= '1bcde') call abort()\n+if(str /= '1bcde') STOP 2\n call subOUT(str,len(str))\n-if (len(str) /= 5) call abort()\n-if(allocated(str)) call abort()\n+if (len(str) /= 5) STOP 3\n+if(allocated(str)) STOP 4\n contains\n   subroutine sub(x,n)\n      integer :: n\n      character(len=n), allocatable :: x\n-     if(len(x) /= 5) call abort()\n-     if(x /= '1bcde') call abort()\n+     if(len(x) /= 5) STOP 5\n+     if(x /= '1bcde') STOP 6\n   end subroutine sub\n   subroutine subOUT(x,n)\n      integer :: n\n      character(len=n), allocatable,intent(out) :: x\n-     if(allocated(x)) call abort()\n-     if(len(x) /= 5) call abort()\n+     if(allocated(x)) STOP 7\n+     if(len(x) /= 5) STOP 8\n   end subroutine subOUT\n end"}, {"sha": "df403a0143fc914d55584f5c0af2d82d9dd96491", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_13.f90", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_13.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -21,17 +21,17 @@ subroutine newRealVec\n     allocate(d,source=subdata(1)) ! memory was lost, now OK\n     allocate(e,source=d) ! OK\n     allocate(f,source=create (99)) ! memory was lost, now OK\n-    if (d%b .ne. 1) call abort\n-    if (e%b .ne. 1) call abort\n-    if (f%b .ne. 99) call abort\n+    if (d%b .ne. 1) STOP 1\n+    if (e%b .ne. 1) STOP 2\n+    if (f%b .ne. 99) STOP 3\n     allocate (g, source = greeting1(\"good day\"))\n-    if (g .ne. \"good day\") call abort\n+    if (g .ne. \"good day\") STOP 4\n     allocate (h, source = greeting2(\"hello\"))\n-    if (h .ne. \"hello\") call abort\n+    if (h .ne. \"hello\") STOP 5\n     allocate (i, source = greeting3(\"hiya!\"))\n-    if (i .ne. \"hiya!\") call abort\n+    if (i .ne. \"hiya!\") STOP 6\n     call greeting4 (j, \"Goodbye \") ! Test that dummy arguments are OK\n-    if (j .ne. \"Goodbye \") call abort\n+    if (j .ne. \"Goodbye \") STOP 7\n   end subroutine\n \n   function create (arg) result(res)\n@@ -56,7 +56,7 @@ function greeting3 (arg) result(res)\n     character(5) :: arg\n     Character(5), allocatable :: res, res1\n     allocate(res, res1, source = arg) ! Caused an ICE\n-    if (res1 .ne. res) call abort\n+    if (res1 .ne. res) STOP 8\n   end function\n \n   subroutine greeting4 (res, arg)"}, {"sha": "bdeff0cab5ec4ff2f2693e9c13a7d0a4cabb1a5f", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_3.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -16,10 +16,10 @@\n \n x%i = 13\n print *,x%i\n-if (.not. allocated(x%i)) call abort()\n+if (.not. allocated(x%i)) STOP 1\n \n deallocate(x%i)\n \n-if (allocated(x%i)) call abort()\n+if (allocated(x%i)) STOP 2\n \n end"}, {"sha": "57afbd4eccd83d778e8d549f12626e2586cfc283", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_4.f90", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_4.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -9,85 +9,85 @@ program test\n   integer, allocatable :: b\n   allocate(a)\n   call foo(a)\n-  if(.not. allocated(a)) call abort()\n-  if (a /= 5) call abort()\n+  if(.not. allocated(a)) STOP 1\n+  if (a /= 5) STOP 2\n \n   call bar(a)\n-  if (a /= 7) call abort()\n+  if (a /= 7) STOP 3\n \n   deallocate(a)\n-  if(allocated(a)) call abort()\n+  if(allocated(a)) STOP 4\n   call check3(a)\n-  if(.not. allocated(a)) call abort()\n-  if(a /= 6874) call abort()\n+  if(.not. allocated(a)) STOP 5\n+  if(a /= 6874) STOP 6\n   call check4(a)\n-  if(.not. allocated(a)) call abort()\n-  if(a /= -478) call abort()\n+  if(.not. allocated(a)) STOP 7\n+  if(a /= -478) STOP 8\n \n   allocate(b)\n   b = 7482\n   call checkOptional(.false.,.true., 7482)\n-  if (b /= 7482) call abort()\n+  if (b /= 7482) STOP 9\n   call checkOptional(.true., .true., 7482, b)\n-  if (b /= 46) call abort()\n+  if (b /= 46) STOP 10\n contains\n   subroutine foo(a)\n     integer, allocatable, intent(out)  :: a\n-    if(allocated(a)) call abort()\n+    if(allocated(a)) STOP 11\n     allocate(a)\n     a = 5\n   end subroutine foo\n \n   subroutine bar(a)\n     integer, allocatable, intent(inout)  :: a\n-    if(.not. allocated(a)) call abort()\n-    if (a /= 5) call abort()\n+    if(.not. allocated(a)) STOP 12\n+    if (a /= 5) STOP 13\n     a = 7\n   end subroutine bar\n \n   subroutine check3(a)\n     integer, allocatable, intent(inout)  :: a\n-    if(allocated(a)) call abort()\n+    if(allocated(a)) STOP 14\n     allocate(a)\n     a = 6874\n   end subroutine check3\n \n   subroutine check4(a)\n     integer, allocatable, intent(inout)  :: a\n-    if(.not.allocated(a)) call abort()\n-    if (a /= 6874) call abort\n+    if(.not.allocated(a)) STOP 15\n+    if (a /= 6874) STOP 1\n     deallocate(a)\n-    if(allocated(a)) call abort()\n+    if(allocated(a)) STOP 16\n     allocate(a)\n-    if(.not.allocated(a)) call abort()\n+    if(.not.allocated(a)) STOP 17\n     a = -478\n   end subroutine check4\n \n   subroutine checkOptional(prsnt, alloc, val, x)\n     logical, intent(in) :: prsnt, alloc\n     integer, allocatable, optional :: x\n     integer, intent(in) :: val\n-    if (present(x) .neqv. prsnt) call abort()\n+    if (present(x) .neqv. prsnt) STOP 18\n     if (present(x)) then\n-      if (allocated(x) .neqv. alloc) call abort()\n+      if (allocated(x) .neqv. alloc) STOP 19\n     end if\n     if (present(x)) then\n       if (allocated(x)) then\n-        if (x /= val) call abort()\n+        if (x /= val) STOP 20\n       end if\n     end if\n     call checkOptional2(x)\n     if (present(x)) then\n-      if (.not. allocated(x)) call abort()\n-      if (x /= -6784) call abort()\n+      if (.not. allocated(x)) STOP 21\n+      if (x /= -6784) STOP 22\n       x = 46\n     end if\n     call checkOptional2()\n   end subroutine checkOptional\n   subroutine checkOptional2(x)\n     integer, allocatable, optional, intent(out) :: x\n     if (present(x)) then\n-      if (allocated(x)) call abort()\n+      if (allocated(x)) STOP 23\n       allocate(x)\n       x = -6784\n     end if"}, {"sha": "8a9bfaf1a1bd7a9719255368d703f79bb274d0bf", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_5.f90", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -10,28 +10,28 @@ program test\n   integer, allocatable :: a\n   integer :: b\n \n-  if (allocated (a)) call abort ()\n+  if (allocated (a)) STOP 1\n   b = 7\n   b = func(.true.)\n-  if (b /= 5332) call abort () \n+  if (b /= 5332) STOP 2 \n   b = 7\n   b = func(.true.) + 1\n-  if (b /= 5333) call abort () \n+  if (b /= 5333) STOP 3 \n    \n   call intout (a, .false.)\n-  if (allocated (a)) call abort ()\n+  if (allocated (a)) STOP 4\n   call intout (a, .true.)\n-  if (.not.allocated (a)) call abort ()\n-  if (a /= 764) call abort ()\n+  if (.not.allocated (a)) STOP 5\n+  if (a /= 764) STOP 6\n   call intout2 (a)\n-  if (allocated (a)) call abort ()\n+  if (allocated (a)) STOP 7\n \n contains\n \n   function func (alloc)\n     integer, allocatable ::  func\n     logical :: alloc\n-    if (allocated (func)) call abort ()\n+    if (allocated (func)) STOP 8\n     if (alloc) then\n       allocate(func)\n       func = 5332\n@@ -42,7 +42,7 @@ subroutine intout (dum, alloc)\n     implicit none\n     integer, allocatable,intent(out) :: dum\n     logical :: alloc\n-    if (allocated (dum)) call abort()\n+    if (allocated (dum)) STOP 9\n     if (alloc) then\n       allocate (dum)\n       dum = 764"}, {"sha": "d21e8daea0e9140d79fafcc3605a4fe17fb17217", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_6.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_6.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -11,16 +11,16 @@ program test\n   integer :: stat\n   stat=99\n   allocate(a, stat=stat)\n-  if (stat /= 0) call abort ()\n+  if (stat /= 0) STOP 1\n   allocate(a, stat=stat)\n-  if (stat == 0) call abort ()\n+  if (stat == 0) STOP 2\n \n   allocate (b)\n   deallocate (b, stat=stat)\n-  if (stat /= 0) call abort ()\n+  if (stat /= 0) STOP 3\n   deallocate (b, stat=stat)\n-  if (stat == 0) call abort ()\n+  if (stat == 0) STOP 4\n \n   deallocate (c, stat=stat)\n-  if (stat == 0) call abort ()\n+  if (stat == 0) STOP 5\n end program test"}, {"sha": "0963e6fc9026eeb975beb56c7ebc493da7af25e2", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_7.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_7.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -14,13 +14,13 @@ subroutine sub (no)\n     integer, intent(in) :: no\n     integer, allocatable, save :: a\n     if (no == 0) then\n-      if (allocated (a)) call abort ()\n+      if (allocated (a)) STOP 1\n       allocate (a)\n     else if (no == 1) then\n-      if (.not. allocated (a)) call abort ()\n+      if (.not. allocated (a)) STOP 2\n       deallocate (a)\n     else\n-      if (allocated (a)) call abort ()\n+      if (allocated (a)) STOP 3\n     end if\n   end subroutine sub\n end program test"}, {"sha": "de5d11090720877b61155125661bc43a95213e9c", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_8.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_8.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -6,11 +6,11 @@\n !\n program test\n   implicit none\n-  if (func () /= 'abc') call abort ()\n+  if (func () /= 'abc') STOP 1\n contains\n   function func() result (str)\n     character(len=3), allocatable :: str\n-    if (allocated (str)) call abort ()\n+    if (allocated (str)) STOP 2\n     allocate (str)\n     str = 'abc'\n   end function func"}, {"sha": "7bf84ef79c883933c59edadbad6984d6c91b5dcb", "filename": "gcc/testsuite/gfortran.dg/allocatable_scalar_9.f90", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocatable_scalar_9.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -36,19 +36,19 @@ end module m\n \n allocatable :: a1, a2, a3, a4, aa1, aa2, aa3,aa4\n \n-if(allocated(a1)) call abort()\n-if(allocated(a2)) call abort()\n-if(allocated(a3)) call abort()\n-if(allocated(a4)) call abort()\n-if(allocated(aa1)) call abort()\n-if(allocated(aa2)) call abort()\n-if(allocated(aa3)) call abort()\n-if(allocated(aa4)) call abort()\n+if(allocated(a1)) STOP 1\n+if(allocated(a2)) STOP 2\n+if(allocated(a3)) STOP 3\n+if(allocated(a4)) STOP 4\n+if(allocated(aa1)) STOP 5\n+if(allocated(aa2)) STOP 6\n+if(allocated(aa3)) STOP 7\n+if(allocated(aa4)) STOP 8\n \n-if(allocated(na1%b1)) call abort()\n-if(allocated(na2%b2)) call abort()\n-if(allocated(na3%b3)) call abort()\n-if(allocated(na4%b4)) call abort()\n+if(allocated(na1%b1)) STOP 9\n+if(allocated(na2%b2)) STOP 10\n+if(allocated(na3%b3)) STOP 11\n+if(allocated(na4%b4)) STOP 12\n end block\n end\n "}, {"sha": "f9d92381f952e6712f373f0cafc7c8a132949416", "filename": "gcc/testsuite/gfortran.dg/allocate_alloc_opt_10.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_10.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -24,10 +24,10 @@\n select type (x)\n type is (t2)\n   print *,x%j\n-  if (x%j/=4) call abort\n+  if (x%j/=4) STOP 1\n   x%j = 5\n class default\n-  call abort()\n+  STOP 1\n end select\n \n \n@@ -38,9 +38,9 @@\n select type (y)\n type is (t2)\n   print *,y%j\n-  if (y%j/=4) call abort\n+  if (y%j/=4) STOP 2\n class default\n-  call abort()\n+  STOP 2\n end select\n \n end"}, {"sha": "cf8e1d61446be88265f5bdaac1790fd6ead23136", "filename": "gcc/testsuite/gfortran.dg/allocate_alloc_opt_3.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_3.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -10,24 +10,24 @@ program a\n \n   e1 = 'No error'\n   allocate(i(4), stat=n, errmsg=e1)\n-  if (trim(e1) /= 'No error') call abort\n+  if (trim(e1) /= 'No error') STOP 1\n   deallocate(i)\n \n   e2 = 'No error'\n   allocate(i(4),stat=n, errmsg=e2)\n-  if (trim(e2) /= 'No error') call abort\n+  if (trim(e2) /= 'No error') STOP 2\n   deallocate(i)\n \n \n   e1 = 'No error'\n   allocate(i(4), stat=n, errmsg=e1)\n   allocate(i(4), stat=n, errmsg=e1)\n-  if (trim(e1) /= 'Attempt to allocate an allocated object') call abort\n+  if (trim(e1) /= 'Attempt to allocate an allocated object') STOP 3\n   deallocate(i)\n \n   e2 = 'No error'\n   allocate(i(4), stat=n, errmsg=e2)\n   allocate(i(4), stat=n, errmsg=e2)\n-  if (trim(e2) /= 'Attempt to allocate an allocat') call abort\n+  if (trim(e2) /= 'Attempt to allocate an allocat') STOP 4\n \n end program a"}, {"sha": "b9edf9ca6947c2b26d6b5efedf957eb047d84163", "filename": "gcc/testsuite/gfortran.dg/allocate_alloc_opt_6.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_alloc_opt_6.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -18,17 +18,17 @@ program a\n   z = 99.\n \n   allocate(i(4), source=n)\n-  if (any(i /= 42)) call abort\n+  if (any(i /= 42)) STOP 1\n \n   allocate(x(4), source=z)\n-  if (any(x /= 99.)) call abort\n+  if (any(x /= 99.)) STOP 2\n \n   allocate(t, source=mytype(1.0,2))\n-  if (t%r /= 1. .or. t%i /= 2) call abort\n+  if (t%r /= 1. .or. t%i /= 2) STOP 3\n \n   deallocate(i)\n   allocate(i(3), source=(/1, 2, 3/))\n-  if (i(1) /= 1 .or. i(2) /= 2 .or. i(3) /= 3) call abort\n+  if (i(1) /= 1 .or. i(2) /= 2 .or. i(3) /= 3) STOP 4\n \n   call sub1(i)\n \n@@ -38,5 +38,5 @@ subroutine sub1(j)\n    integer, intent(in) :: j(*)\n    integer, allocatable :: k(:)\n    allocate(k(2), source=j(1:2))\n-   if (k(1) /= 1 .or. k(2) /= 2) call abort\n+   if (k(1) /= 1 .or. k(2) /= 2) STOP 5\n end subroutine sub1"}, {"sha": "bef620d9e6d0f3eb550fef4290354dbc3207e905", "filename": "gcc/testsuite/gfortran.dg/allocate_assumed_charlen_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_assumed_charlen_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_assumed_charlen_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_assumed_charlen_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -12,8 +12,8 @@\n \n    call alloc( foo , foofoo)\n \n-   if (len(foo) .ne. 42) call abort\n-   if (len(foofoo) .ne. 22) call abort\n+   if (len(foo) .ne. 42) STOP 1\n+   if (len(foofoo) .ne. 22) STOP 2\n \n contains\n "}, {"sha": "df5d3aa9722a176769f8a5b0d341e28d775b3408", "filename": "gcc/testsuite/gfortran.dg/allocate_assumed_charlen_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_assumed_charlen_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_assumed_charlen_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_assumed_charlen_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -5,8 +5,8 @@ program a\n  character(len=42), allocatable :: f\n  character(len=22), allocatable :: ff\n  call alloc(f, ff)\n- if (len(f) .ne. 42) call abort\n- if (len(ff) .ne. 22) call abort\n+ if (len(f) .ne. 42) STOP 1\n+ if (len(ff) .ne. 22) STOP 2\n contains\n  subroutine alloc( a, b )\n   character(len=*), allocatable  :: a"}, {"sha": "44de36e36082fd9c21dcb2f4b7de24e0bd902ccd", "filename": "gcc/testsuite/gfortran.dg/allocate_class_3.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_class_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_class_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_class_3.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -73,7 +73,7 @@ subroutine AddArray4 (P, Pt)\n   call AddArray1 (P, Pt)\n   select type (x => Pt%p)\n     type is (t)\n-      if (any (x%i .ne. [1,2])) call abort\n+      if (any (x%i .ne. [1,2])) STOP 1\n   end select\n   deallocate (P)\n   deallocate (pt)\n@@ -83,7 +83,7 @@ subroutine AddArray4 (P, Pt)\n   call AddArray2 (P, Pt)\n   select type (x => Pt%p)\n     type is (t)\n-      if (any (x%i .ne. [3,4,5])) call abort\n+      if (any (x%i .ne. [3,4,5])) STOP 2\n   end select\n   deallocate (P)\n   deallocate (pt)\n@@ -92,15 +92,15 @@ subroutine AddArray4 (P, Pt)\n   call AddArray3 (t(6), Pt)\n   select type (x => Pt%p)\n     type is (t)\n-      if (any (x%i .ne. [6,6,6,6])) call abort\n+      if (any (x%i .ne. [6,6,6,6])) STOP 3\n   end select\n   deallocate (pt)\n \n   allocate (Pt, source = Object_array_pointer(NULL()))\n   call AddArray4 ([t(7), t(8)], Pt)\n   select type (x => Pt%p)\n     type is (t)\n-      if (any (x%i .ne. [7,8])) call abort\n+      if (any (x%i .ne. [7,8])) STOP 4\n   end select\n   deallocate (pt)\n  end"}, {"sha": "9117ffe29d204fb5d125e24d32bd366dcdd48b44", "filename": "gcc/testsuite/gfortran.dg/allocate_deferred_char_scalar_1.f03", "status": "modified", "additions": 106, "deletions": 106, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_deferred_char_scalar_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_deferred_char_scalar_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_deferred_char_scalar_1.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -25,27 +25,27 @@ subroutine source_check()\n     character(len=:), pointer :: str4, str5\n     nullify(str4)\n     str3 = 'AbCdEfGhIj'\n-    if(allocated(str)) call abort()\n+    if(allocated(str)) STOP 1\n     allocate(str, source=str3)\n-    if(.not.allocated(str)) call abort()\n-    if(len(str) /= 8) call abort()\n-    if(str /= 'AbCdEfGh') call abort()\n-    if(associated(str4)) call abort()\n+    if(.not.allocated(str)) STOP 2\n+    if(len(str) /= 8) STOP 3\n+    if(str /= 'AbCdEfGh') STOP 4\n+    if(associated(str4)) STOP 5\n     str4 => str\n-    if(str4 /= str .or. len(str4)/=8) call abort()\n-    if(.not.associated(str4, str)) call abort()\n+    if(str4 /= str .or. len(str4)/=8) STOP 6\n+    if(.not.associated(str4, str)) STOP 7\n     str4 => null()\n     str = '12a56b78'\n-    if(str4 == '12a56b78') call abort()\n+    if(str4 == '12a56b78') STOP 8\n     str4 = 'ABCDEFGH'\n-    if(str == 'ABCDEFGH') call abort()\n+    if(str == 'ABCDEFGH') STOP 9\n     allocate(str5, source=str)\n-    if(associated(str5, str)) call abort()\n-    if(str5 /= '12a56b78' .or. len(str5)/=8) call abort()\n+    if(associated(str5, str)) STOP 10\n+    if(str5 /= '12a56b78' .or. len(str5)/=8) STOP 11\n     str = 'abcdef'\n-    if(str5 == 'abcdef') call abort()\n+    if(str5 == 'abcdef') STOP 12\n     str5 = 'ABCDEF'\n-    if(str == 'ABCDEF') call abort()\n+    if(str == 'ABCDEF') STOP 13\n   end subroutine source_check\n   subroutine source_check4()\n     character(kind=4,len=:), allocatable :: str, str2\n@@ -54,27 +54,27 @@ subroutine source_check4()\n     character(kind=4,len=:), pointer :: str4, str5\n     nullify(str4)\n     str3 = 4_'AbCdEfGhIj'\n-    if(allocated(str)) call abort()\n+    if(allocated(str)) STOP 14\n     allocate(str, source=str3)\n-    if(.not.allocated(str)) call abort()\n-    if(len(str) /= 8) call abort()\n-    if(str /= 4_'AbCdEfGh') call abort()\n-    if(associated(str4)) call abort()\n+    if(.not.allocated(str)) STOP 15\n+    if(len(str) /= 8) STOP 16\n+    if(str /= 4_'AbCdEfGh') STOP 17\n+    if(associated(str4)) STOP 18\n     str4 => str\n-    if(str4 /= str .or. len(str4)/=8) call abort()\n-    if(.not.associated(str4, str)) call abort()\n+    if(str4 /= str .or. len(str4)/=8) STOP 19\n+    if(.not.associated(str4, str)) STOP 20\n     str4 => null()\n     str = 4_'12a56b78'\n-    if(str4 == 4_'12a56b78') call abort()\n+    if(str4 == 4_'12a56b78') STOP 21\n     str4 = 4_'ABCDEFGH'\n-    if(str == 4_'ABCDEFGH') call abort()\n+    if(str == 4_'ABCDEFGH') STOP 22\n     allocate(str5, source=str)\n-    if(associated(str5, str)) call abort()\n-    if(str5 /= 4_'12a56b78' .or. len(str5)/=8) call abort()\n+    if(associated(str5, str)) STOP 23\n+    if(str5 /= 4_'12a56b78' .or. len(str5)/=8) STOP 24\n     str = 4_'abcdef'\n-    if(str5 == 4_'abcdef') call abort()\n+    if(str5 == 4_'abcdef') STOP 25\n     str5 = 4_'ABCDEF'\n-    if(str == 4_'ABCDEF') call abort()\n+    if(str == 4_'ABCDEF') STOP 26\n   end subroutine source_check4\n   subroutine mold_check()\n     character(len=:), allocatable :: str, str2\n@@ -83,26 +83,26 @@ subroutine mold_check()\n     nullify(str4)\n     str2 = \"ABCE\"\n     ALLOCATE( str, MOLD=str3)\n-    if (len(str) /= 8) call abort()\n+    if (len(str) /= 8) STOP 27\n     DEALLOCATE(str)\n     ALLOCATE( str, MOLD=str2)\n-    if (len(str) /= 4) call abort()\n+    if (len(str) /= 4) STOP 28\n \n-    IF (associated(str4)) call abort()\n+    IF (associated(str4)) STOP 29\n     ALLOCATE( str4, MOLD=str3)\n-    IF (.not.associated(str4)) call abort()\n+    IF (.not.associated(str4)) STOP 30\n     str4 = '12345678'\n-    if (len(str4) /= 8) call abort()\n-    if(str4 /= '12345678') call abort()\n+    if (len(str4) /= 8) STOP 31\n+    if(str4 /= '12345678') STOP 32\n     DEALLOCATE(str4)\n     ALLOCATE( str4, MOLD=str2)\n     str4 = 'ABCD'\n-    if (len(str4) /= 4) call abort()\n-    if (str4 /= 'ABCD') call abort()\n+    if (len(str4) /= 4) STOP 33\n+    if (str4 /= 'ABCD') STOP 34\n     str5 => str4\n-    if(.not.associated(str4,str5)) call abort()\n-    if(len(str5) /= 4 .or. len(str4) /= len(str5)) call abort()\n-    if(str5 /= str4) call abort()\n+    if(.not.associated(str4,str5)) STOP 35\n+    if(len(str5) /= 4 .or. len(str4) /= len(str5)) STOP 36\n+    if(str5 /= str4) STOP 37\n     deallocate(str4) \n   end subroutine mold_check\n   subroutine mold_check4()\n@@ -112,49 +112,49 @@ subroutine mold_check4()\n     nullify(str4)\n     str2 = 4_\"ABCE\"\n     ALLOCATE( str, MOLD=str3)\n-    if (len(str) /= 8) call abort()\n+    if (len(str) /= 8) STOP 38\n     DEALLOCATE(str)\n     ALLOCATE( str, MOLD=str2)\n-    if (len(str) /= 4) call abort()\n+    if (len(str) /= 4) STOP 39\n \n-    IF (associated(str4)) call abort()\n+    IF (associated(str4)) STOP 40\n     ALLOCATE( str4, MOLD=str3)\n-    IF (.not.associated(str4)) call abort()\n+    IF (.not.associated(str4)) STOP 41\n     str4 = 4_'12345678'\n-    if (len(str4) /= 8) call abort()\n-    if(str4 /= 4_'12345678') call abort()\n+    if (len(str4) /= 8) STOP 42\n+    if(str4 /= 4_'12345678') STOP 43\n     DEALLOCATE(str4)\n     ALLOCATE( str4, MOLD=str2)\n     str4 = 4_'ABCD'\n-    if (len(str4) /= 4) call abort()\n-    if (str4 /= 4_'ABCD') call abort()\n+    if (len(str4) /= 4) STOP 44\n+    if (str4 /= 4_'ABCD') STOP 45\n     str5 => str4\n-    if(.not.associated(str4,str5)) call abort()\n-    if(len(str5) /= 4 .or. len(str4) /= len(str5)) call abort()\n-    if(str5 /= str4) call abort()\n+    if(.not.associated(str4,str5)) STOP 46\n+    if(len(str5) /= 4 .or. len(str4) /= len(str5)) STOP 47\n+    if(str5 /= str4) STOP 48\n     deallocate(str4) \n   end subroutine mold_check4\n   subroutine ftn_test()\n     character(len=:), allocatable :: str_a\n     character(len=:), pointer     :: str_p\n     nullify(str_p) \n     call proc_test(str_a, str_p, .false.)\n-    if (str_p /= '123457890abcdef') call abort()\n-    if (len(str_p) /= 50) call abort()\n-    if (str_a(1:5) /= 'ABCDE ') call abort()\n-    if (len(str_a) /= 50) call abort()\n+    if (str_p /= '123457890abcdef') STOP 49\n+    if (len(str_p) /= 50) STOP 50\n+    if (str_a(1:5) /= 'ABCDE ') STOP 51\n+    if (len(str_a) /= 50) STOP 52\n     deallocate(str_p)\n     str_a = '1245'\n-    if(len(str_a) /= 4) call abort()\n-    if(str_a /= '1245') call abort()\n+    if(len(str_a) /= 4) STOP 53\n+    if(str_a /= '1245') STOP 54\n     allocate(character(len=6) :: str_p)\n-    if(len(str_p) /= 6) call abort()\n+    if(len(str_p) /= 6) STOP 55\n     str_p = 'AbCdEf'\n     call proc_test(str_a, str_p, .true.)\n-    if (str_p /= '123457890abcdef') call abort()\n-    if (len(str_p) /= 50) call abort()\n-    if (str_a(1:5) /= 'ABCDE ') call abort()\n-    if (len(str_a) /= 50) call abort()\n+    if (str_p /= '123457890abcdef') STOP 56\n+    if (len(str_p) /= 50) STOP 57\n+    if (str_a(1:5) /= 'ABCDE ') STOP 58\n+    if (len(str_a) /= 50) STOP 59\n     deallocate(str_p)\n   end subroutine ftn_test\n   subroutine proc_test(a, p, alloc)\n@@ -163,56 +163,56 @@ subroutine proc_test(a, p, alloc)\n     character(len=5), target :: loc\n     logical :: alloc\n     if (.not.  alloc) then\n-      if(associated(p)) call abort()\n-      if(allocated(a)) call abort()\n+      if(associated(p)) STOP 60\n+      if(allocated(a)) STOP 61\n     else\n-      if(len(a) /= 4) call abort()\n-      if(a /= '1245') call abort()\n-      if(len(p) /= 6) call abort()\n-      if(p /= 'AbCdEf') call abort()\n+      if(len(a) /= 4) STOP 62\n+      if(a /= '1245') STOP 63\n+      if(len(p) /= 6) STOP 64\n+      if(p /= 'AbCdEf') STOP 65\n       deallocate(a)\n       nullify(p)\n     end if\n     allocate(character(len=50) :: a)\n     a(1:5) = 'ABCDE'\n-    if(len(a) /= 50) call abort()\n-    if(a(1:5) /= \"ABCDE\") call abort()\n+    if(len(a) /= 50) STOP 66\n+    if(a(1:5) /= \"ABCDE\") STOP 67\n     loc = '12345'\n     p => loc\n-    if (len(p) /= 5) call abort()\n-    if (p /= '12345') call abort()\n+    if (len(p) /= 5) STOP 68\n+    if (p /= '12345') STOP 69\n     p = '12345679'\n-    if (len(p) /= 5) call abort()\n-    if (p /= '12345') call abort()\n+    if (len(p) /= 5) STOP 70\n+    if (p /= '12345') STOP 71\n     p = 'ABC'\n-    if (loc /= 'ABC  ') call abort()\n+    if (loc /= 'ABC  ') STOP 72\n     allocate(p, mold=a)\n-    if (.not.associated(p)) call abort()\n+    if (.not.associated(p)) STOP 73\n     p = '123457890abcdef'\n-    if (p /= '123457890abcdef') call abort()\n-    if (len(p) /= 50) call abort()\n+    if (p /= '123457890abcdef') STOP 74\n+    if (len(p) /= 50) STOP 75\n   end subroutine proc_test\n   subroutine ftn_test4()\n     character(len=:,kind=4), allocatable :: str_a\n     character(len=:,kind=4), pointer     :: str_p\n     nullify(str_p) \n     call proc_test4(str_a, str_p, .false.)\n-    if (str_p /= 4_'123457890abcdef') call abort()\n-    if (len(str_p) /= 50) call abort()\n-    if (str_a(1:5) /= 4_'ABCDE ') call abort()\n-    if (len(str_a) /= 50) call abort()\n+    if (str_p /= 4_'123457890abcdef') STOP 76\n+    if (len(str_p) /= 50) STOP 77\n+    if (str_a(1:5) /= 4_'ABCDE ') STOP 78\n+    if (len(str_a) /= 50) STOP 79\n     deallocate(str_p)\n     str_a = 4_'1245'\n-    if(len(str_a) /= 4) call abort()\n-    if(str_a /= 4_'1245') call abort()\n+    if(len(str_a) /= 4) STOP 80\n+    if(str_a /= 4_'1245') STOP 81\n     allocate(character(len=6, kind = 4) :: str_p)\n-    if(len(str_p) /= 6) call abort()\n+    if(len(str_p) /= 6) STOP 82\n     str_p = 4_'AbCdEf'\n     call proc_test4(str_a, str_p, .true.)\n-    if (str_p /= 4_'123457890abcdef') call abort()\n-    if (len(str_p) /= 50) call abort()\n-    if (str_a(1:5) /= 4_'ABCDE ') call abort()\n-    if (len(str_a) /= 50) call abort()\n+    if (str_p /= 4_'123457890abcdef') STOP 83\n+    if (len(str_p) /= 50) STOP 84\n+    if (str_a(1:5) /= 4_'ABCDE ') STOP 85\n+    if (len(str_a) /= 50) STOP 86\n     deallocate(str_p)\n   end subroutine ftn_test4\n   subroutine proc_test4(a, p, alloc)\n@@ -221,48 +221,48 @@ subroutine proc_test4(a, p, alloc)\n     character(len=5,kind=4), target :: loc\n     logical :: alloc\n     if (.not.  alloc) then\n-      if(associated(p)) call abort()\n-      if(allocated(a)) call abort()\n+      if(associated(p)) STOP 87\n+      if(allocated(a)) STOP 88\n     else\n-      if(len(a) /= 4) call abort()\n-      if(a /= 4_'1245') call abort()\n-      if(len(p) /= 6) call abort()\n-      if(p /= 4_'AbCdEf') call abort()\n+      if(len(a) /= 4) STOP 89\n+      if(a /= 4_'1245') STOP 90\n+      if(len(p) /= 6) STOP 91\n+      if(p /= 4_'AbCdEf') STOP 92\n       deallocate(a)\n       nullify(p)\n     end if\n     allocate(character(len=50,kind=4) :: a)\n     a(1:5) = 4_'ABCDE'\n-    if(len(a) /= 50) call abort()\n-    if(a(1:5) /= 4_\"ABCDE\") call abort()\n+    if(len(a) /= 50) STOP 93\n+    if(a(1:5) /= 4_\"ABCDE\") STOP 94\n     loc = '12345'\n     p => loc\n-    if (len(p) /= 5) call abort()\n-    if (p /= 4_'12345') call abort()\n+    if (len(p) /= 5) STOP 95\n+    if (p /= 4_'12345') STOP 96\n     p = 4_'12345679'\n-    if (len(p) /= 5) call abort()\n-    if (p /= 4_'12345') call abort()\n+    if (len(p) /= 5) STOP 97\n+    if (p /= 4_'12345') STOP 98\n     p = 4_'ABC'\n-    if (loc /= 4_'ABC  ') call abort()\n+    if (loc /= 4_'ABC  ') STOP 99\n     allocate(p, mold=a)\n-    if (.not.associated(p)) call abort()\n+    if (.not.associated(p)) STOP 100\n     p = 4_'123457890abcdef'\n-    if (p /= 4_'123457890abcdef') call abort()\n-    if (len(p) /= 50) call abort()\n+    if (p /= 4_'123457890abcdef') STOP 101\n+    if (len(p) /= 50) STOP 102\n   end subroutine proc_test4\n   subroutine source3()\n      character(len=:, kind=1), allocatable :: a1\n      character(len=:, kind=4), allocatable :: a4\n      character(len=:, kind=1), pointer     :: p1\n      character(len=:, kind=4), pointer     :: p4\n      allocate(a1, source='ABC') ! << ICE\n-     if(len(a1) /= 3 .or. a1 /= 'ABC') call abort()\n+     if(len(a1) /= 3 .or. a1 /= 'ABC') STOP 103\n      allocate(a4, source=4_'12345') ! << ICE\n-     if(len(a4) /= 5 .or. a4 /= 4_'12345') call abort()\n+     if(len(a4) /= 5 .or. a4 /= 4_'12345') STOP 104\n      allocate(p1, mold='AB') ! << ICE\n-     if(len(p1) /= 2) call abort()\n+     if(len(p1) /= 2) STOP 105\n      allocate(p4, mold=4_'145') ! << ICE\n-     if(len(p4) /= 3) call abort()\n+     if(len(p4) /= 3) STOP 106\n   end subroutine source3\n end program test\n ! Spurious -Wstringop-overflow warning with -O1"}, {"sha": "0c9314987a694103e1b6d5d065dde10b53c84172", "filename": "gcc/testsuite/gfortran.dg/allocate_deferred_char_scalar_2.f03", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_deferred_char_scalar_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_deferred_char_scalar_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_deferred_char_scalar_2.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -11,11 +11,11 @@ program note7_35\n    integer n\n    n = 10\n    allocate(name, SOURCE=repeat('x',n))\n-   if (name .ne. 'xxxxxxxxxx') call abort\n-   if (len (name) .ne. 10 ) call abort\n+   if (name .ne. 'xxxxxxxxxx') STOP 1\n+   if (len (name) .ne. 10 ) STOP 2\n    deallocate(name)\n    src = 'xyxy'\n    allocate(name, SOURCE=repeat(src,n))\n-   if (name(37:40) .ne. 'xyxy') call abort\n-   if (len (name) .ne. 40 ) call abort\n+   if (name(37:40) .ne. 'xyxy') STOP 3\n+   if (len (name) .ne. 40 ) STOP 4\n end program note7_35"}, {"sha": "00aa0cc8a6b345776ca5b4e8618c0c8d34ee4fba", "filename": "gcc/testsuite/gfortran.dg/allocate_derived_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_derived_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_derived_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_derived_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -16,5 +16,5 @@ program fail1\n    type(b), allocatable :: c(:)\n \n    allocate(c(1))\n-   if (c(1) % acomp % i /= 5) call abort()\n+   if (c(1) % acomp % i /= 5) STOP 1\n end program fail1"}, {"sha": "0bec9bb3961794c14ef783e26854dbcf68144202", "filename": "gcc/testsuite/gfortran.dg/allocate_with_arrayspec_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_arrayspec_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_arrayspec_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_arrayspec_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -23,7 +23,7 @@ PROGRAM example\n    USE mo_test\n    INTEGER, ALLOCATABLE :: query_buf(:)\n    ALLOCATE(query_buf(nquery()))\n-   if (n /= 1 .or. size(query_buf) /= n) call abort()\n+   if (n /= 1 .or. size(query_buf) /= n) STOP 1\n END PROGRAM example\n \n ! { dg-final { scan-tree-dump-times \"nquery\" 5 \"original\" } }"}, {"sha": "fd47abf0c24b94d518f87946c47747fc368e323b", "filename": "gcc/testsuite/gfortran.dg/allocate_with_mold_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_mold_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_mold_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_mold_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -37,7 +37,7 @@ subroutine foo\n       class default\n         i = 2\n     end select\n-    if (i .ne. 1) call abort\n+    if (i .ne. 1) STOP 1\n   end subroutine\n end module UnstructuredGridImages\n "}, {"sha": "da012369bc959364523f4e4e5a3cae009a99038b", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -23,6 +23,6 @@ program note7_35\n   integer n\n   n = 10\n   allocate(name, SOURCE=repeat('x',bar()))\n-  if (name .ne. 'xxxxxxxxxx') call abort\n-  if (len (name) .ne. 10 ) call abort\n+  if (name .ne. 'xxxxxxxxxx') STOP 1\n+  if (len (name) .ne. 10 ) STOP 2\n end program note7_35"}, {"sha": "764ab31bc513e56feea8a05ad4d34277aa1623e4", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_10.f08", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_10.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_10.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_10.f08?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -37,8 +37,8 @@ subroutine evaluate (t3)\n     type(t1_t), dimension(:), allocatable :: p_born\n     allocate (p_born(1:size(t3%int_born%func ())), &\n          source = t3%int_born%func ())\n-    if (.not. allocated(p_born)) call abort()\n-    if (size(p_born) /= 5) call abort()\n+    if (.not. allocated(p_born)) STOP 1\n+    if (size(p_born) /= 5) STOP 2\n   end subroutine evaluate\n \n end module processes"}, {"sha": "e8815c68aa0d844b404f3a6b4ddc80369fc3d396", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_11.f08", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_11.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_11.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_11.f08?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -37,8 +37,8 @@ subroutine evaluate (t3)\n     type(t1_t), dimension(:), allocatable :: p_born\n     allocate (p_born(1:size(t3%int_born%func ())), &\n          source = t3%int_born%func ())\n-    if (.not. allocated(p_born)) call abort()\n-    if (size(p_born) /= 5) call abort()\n+    if (.not. allocated(p_born)) STOP 1\n+    if (size(p_born) /= 5) STOP 2\n   end subroutine evaluate\n \n end module processes"}, {"sha": "5dcf0ec9bf642995214b3c7e314c43bf52225a3f", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_12.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_12.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_12.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_12.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -21,11 +21,11 @@ program z\n !  write (*,*) tmp( 1, :)\n \n   allocate (d(DIM1_SIZE / 2, 2), source = tmp(1 : DIM1_SIZE / 2, :) , stat=errstat)\n-  if (any (d .ne. tmp(1:DIM1_SIZE/2,:))) call abort\n+  if (any (d .ne. tmp(1:DIM1_SIZE/2,:))) STOP 1\n   deallocate (d)\n \n   allocate (d(DIM1_SIZE / 2, 2), source = foo (tmp(1 : DIM1_SIZE / 2, :)) , stat=errstat)\n-  if (any (d .ne. tmp(1 : DIM1_SIZE / 2, :))) call abort\n+  if (any (d .ne. tmp(1 : DIM1_SIZE / 2, :))) STOP 2\n \n   deallocate (tmp , d)\n "}, {"sha": "b22c8fe5d6d987ee1fa6a212eb61ad0ce6c90272", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_15.f03", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_15.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_15.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_15.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -64,10 +64,10 @@ subroutine Typeme(this)\n       end select\n     end do\n !    print \"(10i6,/)\", j\n-    if (any (j .ne. [(i, i = 1,20)])) call abort\n+    if (any (j .ne. [(i, i = 1,20)])) STOP 1\n !    print \"(10f6.2,/)\", r\n-    if (any (r(1:10) .ne. [(real (2 * i), i = 1,10)])) call abort\n-    if (any (r(11:20) .ne. zero)) call abort\n+    if (any (r(1:10) .ne. [(real (2 * i), i = 1,10)])) STOP 2\n+    if (any (r(11:20) .ne. zero)) STOP 3\n   end subroutine Typeme\n end module test_mod\n "}, {"sha": "0f1e9b67287b62b2d8a9ef266247cbf25d0e0e15", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_16.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_16.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -62,14 +62,14 @@ function construct(self, previous)\n   c1%steps= 1\n   d=> c1%construct(prev)\n \n-  if (.not. associated(d) ) call abort()\n+  if (.not. associated(d) ) STOP 1\n   select type (d)\n     class is (exttype)\n-      if (d%i2 /= 5) call abort()\n+      if (d%i2 /= 5) STOP 2\n     class default\n-      call abort()\n+      STOP 3\n   end select \n-  if (d%i /= 2) call abort()\n+  if (d%i /= 2) STOP 4\n   deallocate(c1)\n   deallocate(prev)\n   deallocate(d)"}, {"sha": "191da595c96c79163dcc8aa58d7ba7d32fb12241", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_17.f03", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_17.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_17.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_17.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -25,11 +25,11 @@ program main\n   subroutine check\n     select type (z => a%x)\n       type is (real(8))\n-        if (any (z .ne. r)) call abort\n+        if (any (z .ne. r)) STOP 1\n       type is (character(kind = 1, len = *))\n-        if (any(z .ne. chr1)) call abort\n+        if (any(z .ne. chr1)) STOP 2\n       type is (character(kind = 4, len = *))\n-        if (any(z .ne. chr4)) call abort\n+        if (any(z .ne. chr4)) STOP 3\n     end select\n     deallocate (a%x)\n   end subroutine"}, {"sha": "c9665309bc1ed99f13e9596da472cd3c60ea52f6", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_18.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_18.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_18.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_18.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -22,8 +22,8 @@ subroutine allocate_test(var)\n         select type (copyofvar)\n             type is (character(len=*))\n !                print*, len(copyofvar), copyofvar\n-                if (len(copyofvar) /= 11) call abort ()\n-                if (copyofvar /= \"A test case\") call abort ()\n+                if (len(copyofvar) /= 11) STOP 1\n+                if (copyofvar /= \"A test case\") STOP 2\n         end select\n         deallocate(copyofvar)\n     end subroutine"}, {"sha": "16732e23f1cf08fdde4487478de37153da80a821", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -10,7 +10,7 @@ program helloworld\n   character(:),allocatable::string\n   real::rnd\n   call hello(5, string)\n-  if (string /= 'hello' .or. len(string) /= 5) call abort\n+  if (string /= 'hello' .or. len(string) /= 5) STOP 1\n contains\n   subroutine hello (n,string)\n     character(:),allocatable,intent(out)::string"}, {"sha": "243214bd9625760b7449c86fa22067deea43e670", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_20.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_20.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_20.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_20.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -14,8 +14,8 @@ program p\n    character(3), parameter :: c = 'abc'\n    character(:), allocatable :: z\n    allocate (z, source=repeat(c(2:1), f()))\n-   if (len(z) /= 0) call abort()\n-   if (z /= \"\") call abort()\n+   if (len(z) /= 0) STOP 1\n+   if (z /= \"\") STOP 2\n end\n \n "}, {"sha": "38131b914569eae0251155d650e96a34b3963a07", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_22.f03", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_22.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_22.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_22.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -19,29 +19,29 @@ subroutine test_class()\n   class(t), allocatable, dimension(:) :: a, b\n   allocate(tt::a(1:2))\n   a(:)%i = [ 1,2 ]\n-  if (size(a) /= 2) call abort()\n-  if (any(a(:)%i /= [ 1,2])) call abort()\n+  if (size(a) /= 2) STOP 1\n+  if (any(a(:)%i /= [ 1,2])) STOP 2\n \n   allocate(b(1:4), source=a)\n   ! b is incorrectly initialized here.  This only is diagnosed when compiled\n   ! with -fcheck=bounds.\n-  if (size(b) /= 4) call abort()\n-  if (any(b(1:2)%i /= [ 1,2])) call abort()\n+  if (size(b) /= 4) STOP 3\n+  if (any(b(1:2)%i /= [ 1,2])) STOP 4\n   select type (b1 => b(1))\n     class is (tt)\n       continue\n     class default\n-      call abort()\n+      STOP 5\n   end select\n end subroutine\n \n subroutine test_type()\n   type(t), allocatable, dimension(:) :: a, b\n   allocate(a(1:2))\n-  if (size(a) /= 2) call abort()\n+  if (size(a) /= 2) STOP 6\n \n   allocate(b(1:4), source=a)\n-  if (size(b) /= 4) call abort()\n+  if (size(b) /= 4) STOP 7\n end subroutine\n end program allocate_source\n "}, {"sha": "c47e63049986fed07f166a9f8f2988595d5be91b", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_23.f03", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_23.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_23.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_23.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -22,45 +22,45 @@ subroutine test_class_correct()\n   class(t), allocatable, dimension(:) :: a, b\n   allocate(tt::a(1:2))\n   a(:)%i = [ 1,2 ]\n-  if (size(a) /= 2) call abort()\n-  if (any(a(:)%i /= [ 1,2])) call abort()\n+  if (size(a) /= 2) STOP 1\n+  if (any(a(:)%i /= [ 1,2])) STOP 2\n \n   allocate(b(1:4), source=a(1))\n-  if (size(b) /= 4) call abort()\n-  if (any(b(:)%i /= [ 1,1,1,1])) call abort()\n+  if (size(b) /= 4) STOP 3\n+  if (any(b(:)%i /= [ 1,1,1,1])) STOP 4\n   select type (b1 => b(1))\n     class is (tt)\n       continue\n     class default\n-      call abort()\n+      STOP 5\n   end select\n end subroutine\n \n subroutine test_class_fail()\n   class(t), allocatable, dimension(:) :: a, b\n   allocate(tt::a(1:2))\n   a(:)%i = [ 1,2 ]\n-  if (size(a) /= 2) call abort()\n-  if (any(a(:)%i /= [ 1,2])) call abort()\n+  if (size(a) /= 2) STOP 6\n+  if (any(a(:)%i /= [ 1,2])) STOP 7\n \n   allocate(b(1:4), source=a) ! Fail expected: sizes do not conform\n-  if (size(b) /= 4) call abort()\n-  if (any(b(1:2)%i /= [ 1,2])) call abort()\n+  if (size(b) /= 4) STOP 8\n+  if (any(b(1:2)%i /= [ 1,2])) STOP 9\n   select type (b1 => b(1))\n     class is (tt)\n       continue\n     class default\n-      call abort()\n+      STOP 10\n   end select\n end subroutine\n \n subroutine test_type()\n   type(t), allocatable, dimension(:) :: a, b\n   allocate(a(1:2))\n-  if (size(a) /= 2) call abort()\n+  if (size(a) /= 2) STOP 11\n \n   allocate(b(1:4), source=a)\n-  if (size(b) /= 4) call abort()\n+  if (size(b) /= 4) STOP 12\n end subroutine\n end program allocate_source\n "}, {"sha": "a26ae0c62afb69007d7a80c65abfb4d6848fc9aa", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_24.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_24.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_24.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_24.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -117,16 +117,16 @@ subroutine copy(prt, prt_src)\n     type(field_data_t), intent(in) :: prt_src\n     integer :: i\n     if (allocated (prt_src%name)) then\n-       if (prt_src%name(1) /= \"foo\") call abort()\n-       if (prt_src%name(2) /= \"bar\") call abort()\n+       if (prt_src%name(1) /= \"foo\") STOP 1\n+       if (prt_src%name(2) /= \"bar\") STOP 2\n \n        if (allocated (prt%name))  deallocate (prt%name)\n        allocate (prt%name (size (prt_src%name)), source = prt_src%name)\n        ! The issue was, that prt_src was empty after sourced-allocate.\n-       if (prt_src%name(1) /= \"foo\") call abort()\n-       if (prt_src%name(2) /= \"bar\") call abort()\n-       if (prt%name(1) /= \"foo\") call abort()\n-       if (prt%name(2) /= \"bar\") call abort()\n+       if (prt_src%name(1) /= \"foo\") STOP 3\n+       if (prt_src%name(2) /= \"bar\") STOP 4\n+       if (prt%name(1) /= \"foo\") STOP 5\n+       if (prt%name(2) /= \"bar\") STOP 6\n     end if\n   end subroutine copy\n "}, {"sha": "e2a9735f558b6fb44a2c96a7c08c99c367b1de46", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_5.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -116,9 +116,9 @@ subroutine t2_init (this)\n     class(t2), intent(inout) :: this\n     character(32), dimension(:), allocatable :: md5\n     allocate (md5 (this%n), source=this%md5)\n-    if (md5(1) /= \"tst                             \") call abort()\n-    if (md5(2) /= \"                                \") call abort()\n-    if (md5(3) /= \"fooblabar                       \") call abort()\n+    if (md5(1) /= \"tst                             \") STOP 1\n+    if (md5(2) /= \"                                \") STOP 2\n+    if (md5(3) /= \"fooblabar                       \") STOP 3\n   end subroutine t2_init\n end module foo2\n \n@@ -136,14 +136,14 @@ program test\n \n   call sel%init([2., 0., 3., 0., 4.])\n \n-  if (any(sel%map /= [1, 3, 5])) call abort()\n-  if (any(abs(sel%weight - [2., 3., 4.] / 9.) > 1E-6)) call abort()\n+  if (any(sel%map /= [1, 3, 5])) STOP 4\n+  if (any(abs(sel%weight - [2., 3., 4.] / 9.) > 1E-6)) STOP 5\n \n   phs_config%n_in = 2\n   allocate (phs_config%flv (phs_config%n_in, 1))\n   call phs_base_init (phs, phs_config)\n \n-  if (any(abs(phs%m_in - [42.0, 42.0]) > 1E-6)) call abort()\n+  if (any(abs(phs%m_in - [42.0, 42.0]) > 1E-6)) STOP 6\n \n   o%n = 2\n   allocate (o%val(0:1,4))"}, {"sha": "ab9689696952a22e4a2a5310a69c1105765a6f99", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_6.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_6.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -118,9 +118,9 @@ subroutine t2_init (this)\n     class(t2), intent(inout) :: this\n     character(32), dimension(:), allocatable :: md5\n     allocate (md5 (this%n), source=this%md5)\n-    if (md5(1) /= \"tst                             \") call abort()\n-    if (md5(2) /= \"                                \") call abort()\n-    if (md5(3) /= \"fooblabar                       \") call abort()\n+    if (md5(1) /= \"tst                             \") STOP 1\n+    if (md5(2) /= \"                                \") STOP 2\n+    if (md5(3) /= \"fooblabar                       \") STOP 3\n   end subroutine t2_init\n end module foo2\n \n@@ -138,14 +138,14 @@ program test\n \n   call sel%init([2., 0., 3., 0., 4.])\n \n-  if (any(sel%map /= [1, 3, 5])) call abort()\n-  if (any(abs(sel%weight - [2., 3., 4.] / 9.) > 1E-6)) call abort()\n+  if (any(sel%map /= [1, 3, 5])) STOP 4\n+  if (any(abs(sel%weight - [2., 3., 4.] / 9.) > 1E-6)) STOP 5\n \n   phs_config%n_in = 2\n   allocate (phs_config%flv (phs_config%n_in, 1))\n   call phs_base_init (phs, phs_config)\n \n-  if (any(abs(phs%m_in - [42.0, 42.0]) > 1E-6)) call abort()\n+  if (any(abs(phs%m_in - [42.0, 42.0]) > 1E-6)) STOP 6\n \n   o%n = 2\n   allocate (o%val(0:1,4))"}, {"sha": "f5b3da8c25db2e1dba7467759ce869cabe146c52", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_7.f08", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_7.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_7.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_7.f08?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -26,7 +26,7 @@ program allocate_with_source_6\n   deallocate(a)\n   allocate(a, source=c)\n   allocate(m, source=[(I, I=1, num_params_used)])\n-  if (any(m /= [(I, I=1, num_params_used)])) call abort()\n+  if (any(m /= [(I, I=1, num_params_used)])) STOP 1\n   deallocate(a,b,m)\n   call testArrays()\n \n@@ -45,34 +45,34 @@ subroutine testArrays()\n     select type (R => Y%X)\n       type is (real)\n         if (any(reshape(R, [15]) /= [5,5,5,5,5, 5,5,5,5,5, 5,5,5,5,5])) &\n-          call abort()\n+          STOP 2\n       class default\n-        call abort()\n+        STOP 3\n     end select\n     deallocate(Y%X)\n \n     allocate(Y%X, source=arr(2:3,3:4))\n     select type (R => Y%X)\n       type is (real)\n         if (any(reshape(R, [4]) /= [5,5,5,5])) &\n-          call abort()\n+          STOP 4\n       class default\n-        call abort()\n+        STOP 5\n     end select\n     deallocate(Y%X)\n \n     allocate(o%v, source=arr(2,3:4))\n     select type (R => o%v)\n       type is (real)\n         if (any(R /= [5,5])) &\n-          call abort()\n+          STOP 6\n       class default\n-        call abort()\n+        STOP 7\n     end select\n     deallocate(o%v)\n \n     allocate(v, source=arr(2,1:5))\n-    if (any(v /= [5,5,5,5,5])) call abort()\n+    if (any(v /= [5,5,5,5,5])) STOP 8\n     deallocate(v)\n   end subroutine testArrays\n end"}, {"sha": "3d7c10d542be2ffb742f7e642c1e55256e037426", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_8.f08", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_8.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_8.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_8.f08?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -17,60 +17,60 @@ program assumed_shape_01\n   integer, parameter :: lcim(2,10) = reshape([(i, i=1,10),(i,i=1,10)], [2,10])\n \n   allocate(iv, source= [ 1, 2, 3, 4])\n-  if (any(iv /= [ 1, 2, 3, 4])) call abort()\n+  if (any(iv /= [ 1, 2, 3, 4])) STOP 1\n   deallocate(iv)\n \n   allocate(iv, source=(/(i, i=1,10)/))\n-  if (any(iv /= (/(i, i=1,10)/))) call abort()\n+  if (any(iv /= (/(i, i=1,10)/))) STOP 2\n \n   ! Now 2D\n   allocate(im, source= cim)\n-  if (any(im /= cim)) call abort()\n+  if (any(im /= cim)) STOP 3\n   deallocate(im)\n \n   allocate(im, source= reshape([iv, iv], [2, size(iv, 1)]))\n-  if (any(im /= lcim)) call abort()\n+  if (any(im /= lcim)) STOP 4\n   deallocate(im)\n   deallocate(iv)\n \n   allocate(u, source=[cstruct( 4, [1.1,2.2] )] )\n-  if (any(u(:)%i /= 4) .or. any(abs(u(1)%r(:) - [1.1,2.2]) > 1E-6)) call abort()\n+  if (any(u(:)%i /= 4) .or. any(abs(u(1)%r(:) - [1.1,2.2]) > 1E-6)) STOP 5\n   deallocate (u)\n \n   allocate(iv, source= arrval())\n-  if (any(iv /= [ 1, 2, 4, 5, 6])) call abort()\n+  if (any(iv /= [ 1, 2, 4, 5, 6])) STOP 6\n   ! Check simple array assign\n   allocate(iv2, source=iv)\n-  if (any(iv2 /= [ 1, 2, 4, 5, 6])) call abort()\n+  if (any(iv2 /= [ 1, 2, 4, 5, 6])) STOP 7\n   deallocate(iv, iv2)\n \n   ! Now check for mold=\n   allocate(iv, mold= [ 1, 2, 3, 4])\n-  if (any(shape(iv) /= [4])) call abort()\n+  if (any(shape(iv) /= [4])) STOP 8\n   deallocate(iv)\n \n   allocate(iv, mold=(/(i, i=1,10)/))\n-  if (any(shape(iv) /= [10])) call abort()\n+  if (any(shape(iv) /= [10])) STOP 9\n \n   ! Now 2D\n   allocate(im, mold= cim)\n-  if (any(shape(im) /= shape(cim))) call abort()\n+  if (any(shape(im) /= shape(cim))) STOP 10\n   deallocate(im)\n \n   allocate(im, mold= reshape([iv, iv], [2, size(iv, 1)]))\n-  if (any(shape(im) /= shape(lcim))) call abort()\n+  if (any(shape(im) /= shape(lcim))) STOP 11\n   deallocate(im)\n   deallocate(iv)\n \n   allocate(u, mold=[cstruct( 4, [1.1,2.2] )] )\n-  if (any(shape(u(1)%r(:)) /= 2)) call abort()\n+  if (any(shape(u(1)%r(:)) /= 2)) STOP 12\n   deallocate (u)\n \n   allocate(iv, mold= arrval())\n-  if (any(shape(iv) /= [5])) call abort()\n+  if (any(shape(iv) /= [5])) STOP 13\n   ! Check simple array assign\n   allocate(iv2, mold=iv)\n-  if (any(shape(iv2) /= [5])) call abort()\n+  if (any(shape(iv2) /= [5])) STOP 14\n   deallocate(iv, iv2)\n \n   call addData([4, 5])\n@@ -87,23 +87,23 @@ subroutine addData(P)\n     allocate (cP, source= P)\n     select type (cP)\n       type is (integer)\n-        if (any(cP /= [4,5])) call abort()\n+        if (any(cP /= [4,5])) STOP 15\n       type is (character(*))\n-        if (len(cP) /= 3) call abort()\n-        if (any(cP /= [\"foo\", \"bar\"])) call abort()\n+        if (len(cP) /= 3) STOP 16\n+        if (any(cP /= [\"foo\", \"bar\"])) STOP 17\n       class default\n-        call abort()\n+        STOP 18\n     end select\n     deallocate (cP)\n     allocate (cP, mold= P)\n     select type (cP)\n       type is (integer)\n-        if (any(size(cP) /= [2])) call abort()\n+        if (any(size(cP) /= [2])) STOP 19\n       type is (character(*))\n-        if (len(cP) /= 3) call abort()\n-        if (any(size(cP) /= [2])) call abort()\n+        if (len(cP) /= 3) STOP 20\n+        if (any(size(cP) /= [2])) STOP 21\n       class default\n-        call abort()\n+        STOP 22\n     end select\n     deallocate (cP)\n   end subroutine"}, {"sha": "5be70c996558b6313358abc16cf6e2fdd5627e0a", "filename": "gcc/testsuite/gfortran.dg/allocate_with_source_9.f08", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_9.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_9.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_with_source_9.f08?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -18,12 +18,12 @@ program main\n   ub = lb + 2\n   allocate(o1%acc, source=vec)\n   allocate(o2%acc, source=o1%acc(lb:ub))\n-  if (any (o2%acc /= [7, 8, 9])) call abort()\n+  if (any (o2%acc /= [7, 8, 9])) STOP 1\n   block\n     real, dimension(0:n) :: a\n     real, dimension(:), allocatable :: c\n     call random_number(a)\n     allocate(c,source=a(:))\n-    if (any (abs(a - c) > 1E-6)) call abort()\n+    if (any (abs(a - c) > 1E-6)) STOP 2\n   end block\n end program main"}, {"sha": "158624e86ee948eac5e006ad319868c1f02e8241", "filename": "gcc/testsuite/gfortran.dg/allocate_zerosize_1.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_zerosize_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_zerosize_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_zerosize_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -9,23 +9,23 @@ program main\n   two = ' 2'\n \n   allocate (a(1:-1))\n-  if (size(a) /= 0) call abort\n+  if (size(a) /= 0) STOP 1\n   deallocate (a)\n \n   allocate (b(1:-1,0:10))\n-  if (size(b) /= 0) call abort\n+  if (size(b) /= 0) STOP 2\n   deallocate (b)\n \n   ! Use variables for array bounds.  The internal reads\n   ! are there to hide fact that these are actually constant.\n \n   read (unit=one, fmt='(I2)') n\n   allocate (a(n:-1))\n-  if (size(a) /= 0) call abort\n+  if (size(a) /= 0) STOP 3\n   deallocate (a)\n \n   read (unit=two, fmt='(I2)') m\n   allocate (b(1:3, m:0))\n-  if (size(b) /= 0) call abort\n+  if (size(b) /= 0) STOP 4\n   deallocate (b)\n end program main"}, {"sha": "7c4c8c22cfb2eb5f763b7c98ca1429629d65efa8", "filename": "gcc/testsuite/gfortran.dg/allocate_zerosize_3.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_zerosize_3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_zerosize_3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_zerosize_3.f?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -28,12 +28,12 @@ SUBROUTINE LF0030(nf10)\n \n       DO J1 = 1,7\n       IVAL = 3-J1\n-      IF (ILA1(J1) .NE. IVAL) call abort ()\n+      IF (ILA1(J1) .NE. IVAL) STOP 1\n   100 ENDDO\n \n       DO J1 = 1,7\n       IVAL = 2+J1\n-      IF (ILA2(J1) .NE. IVAL) call abort ()\n+      IF (ILA2(J1) .NE. IVAL) STOP 2\n   101 ENDDO\n \n       END SUBROUTINE"}, {"sha": "8da65a373a5b4e934d65e1d4c8200d426b5a1254", "filename": "gcc/testsuite/gfortran.dg/altreturn_3.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_3.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -34,11 +34,11 @@ program test\n   implicit none\n   integer :: i = 0\n   call gen (i, *10)\n-  if (i /= -2) call abort ()\n+  if (i /= -2) STOP 1\n   i = 2\n   call gen (i, *20)\n  10 continue\n-  call abort()\n+  STOP 2\n  20 continue\n-  if (i /= -1) call abort ()\n+  if (i /= -1) STOP 3\n end"}, {"sha": "1a4b22d8888a28d300c796197c8ceb9329cfc40b", "filename": "gcc/testsuite/gfortran.dg/altreturn_5.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -26,7 +26,7 @@ SUBROUTINE PHLOAD (READER, i, res)\n       EXTERNAL R\r\n       character(3) res\r\n       call PHLOAD (R, 1, res)\r\n-      if (res .ne. \"one\") call abort ()\r\n+      if (res .ne. \"one\") STOP 1\r\n       CALL PHLOAD (R, 2, res)\r\n-      if (res .ne. \"two\") call abort ()\r\n+      if (res .ne. \"two\") STOP 2\r\n       END\r"}, {"sha": "71b6a62c73b54adff2611ee27ea9402cb1c6b744", "filename": "gcc/testsuite/gfortran.dg/altreturn_7.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_7.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -27,6 +27,6 @@ SUBROUTINE M2(I,J)\n \n   USE TT\n   CALL M(1,*2)\n-  CALL ABORT()\n+  STOP 1\n 2 CONTINUE\n END"}, {"sha": "75f842cc3126385b73a6a369b37a09dc16c5e525", "filename": "gcc/testsuite/gfortran.dg/and_or_xor.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fand_or_xor.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fand_or_xor.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fand_or_xor.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -1,7 +1,7 @@\n ! { dg-do run }\n program L\n-   if (and(.TRUE._1, .TRUE._1) .neqv. .true.) call abort\n-   if (or(.TRUE._1, .TRUE._1) .neqv. .true.) call abort\n-   if (xor(.TRUE._1, .TRUE._1) .neqv. .false.) call abort\n+   if (and(.TRUE._1, .TRUE._1) .neqv. .true.) STOP 1\n+   if (or(.TRUE._1, .TRUE._1) .neqv. .true.) STOP 2\n+   if (xor(.TRUE._1, .TRUE._1) .neqv. .false.) STOP 3\n end program L\n "}, {"sha": "c4176790ff63a806e8a4095f6aee49becc8e5c36", "filename": "gcc/testsuite/gfortran.dg/anint_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fanint_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fanint_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fanint_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -12,5 +12,5 @@ PROGRAM Test\n   A = ANINT ( A , DP)\n   B = A\n   A = ANINT ( A)\n-  if (any (A .ne. B)) call abort ()\n+  if (any (A .ne. B)) STOP 1\n END PROGRAM Test"}, {"sha": "169cb77625c11e8973abe98a9d6d42ad48a608ee", "filename": "gcc/testsuite/gfortran.dg/any_all_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fany_all_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fany_all_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fany_all_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -10,9 +10,9 @@ program main\n \n   i = 16843009 ! Initialize i to put junk into b\n   b = any(a>0.5,dim=1)\n-  if (b(2) .or. .not. b(1)) call abort\n+  if (b(2) .or. .not. b(1)) STOP 1\n \n   i = 16843009  ! Initialize i to put junk into b\n   b = all(a>0.5,dim=1)\n-  if (b(2) .or. .not. b(1)) call abort\n+  if (b(2) .or. .not. b(1)) STOP 2\n end program main"}, {"sha": "efc406d90bc5c1d048c91e85b8fa980404a0515d", "filename": "gcc/testsuite/gfortran.dg/anyallcount_1.f90", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fanyallcount_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fanyallcount_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fanyallcount_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -16,56 +16,56 @@ program main\n    m8 = a > 0\n \n    write (unit=res,fmt=f) any(m1,dim=1)\n-   if (res /= 'FTT') call abort\n+   if (res /= 'FTT') STOP 1\n    write (unit=res,fmt=f) any(m2,dim=1)\n-   if (res /= 'FTT') call abort\n+   if (res /= 'FTT') STOP 2\n    write (unit=res,fmt=f) any(m4,dim=1)\n-   if (res /= 'FTT') call abort\n+   if (res /= 'FTT') STOP 3\n    write (unit=res,fmt=f) any(m8,dim=1)\n-   if (res /= 'FTT') call abort\n+   if (res /= 'FTT') STOP 4\n    write (unit=res,fmt=f) any(m1,dim=2)\n-   if (res /= 'TTT') call abort\n+   if (res /= 'TTT') STOP 5\n    write (unit=res,fmt=f) any(m2,dim=2)\n-   if (res /= 'TTT') call abort\n+   if (res /= 'TTT') STOP 6\n    write (unit=res,fmt=f) any(m4,dim=2)\n-   if (res /= 'TTT') call abort\n+   if (res /= 'TTT') STOP 7\n    write (unit=res,fmt=f) any(m8,dim=2)\n-   if (res /= 'TTT') call abort\n+   if (res /= 'TTT') STOP 8\n \n    write (unit=res,fmt=f) all(m1,dim=1)\n-   if (res /= 'FFT') call abort\n+   if (res /= 'FFT') STOP 9\n    write (unit=res,fmt=f) all(m2,dim=1)\n-   if (res /= 'FFT') call abort\n+   if (res /= 'FFT') STOP 10\n    write (unit=res,fmt=f) all(m4,dim=1)\n-   if (res /= 'FFT') call abort\n+   if (res /= 'FFT') STOP 11\n    write (unit=res,fmt=f) all(m8,dim=1)\n-   if (res /= 'FFT') call abort\n+   if (res /= 'FFT') STOP 12\n \n    write (unit=res,fmt=f) all(m1,dim=2)\n-   if (res /= 'FFF') call abort\n+   if (res /= 'FFF') STOP 13\n    write (unit=res,fmt=f) all(m2,dim=2)\n-   if (res /= 'FFF') call abort\n+   if (res /= 'FFF') STOP 14\n    write (unit=res,fmt=f) all(m4,dim=2)\n-   if (res /= 'FFF') call abort\n+   if (res /= 'FFF') STOP 15\n    write (unit=res,fmt=f) all(m8,dim=2)\n-   if (res /= 'FFF') call abort\n+   if (res /= 'FFF') STOP 16\n \n    write (unit=res,fmt=g) count(m1,dim=1)\n-   if (res /= '023') call abort\n+   if (res /= '023') STOP 17\n    write (unit=res,fmt=g) count(m2,dim=1)\n-   if (res /= '023') call abort\n+   if (res /= '023') STOP 18\n    write (unit=res,fmt=g) count(m4,dim=1)\n-   if (res /= '023') call abort\n+   if (res /= '023') STOP 19\n    write (unit=res,fmt=g) count(m8,dim=1)\n-   if (res /= '023') call abort\n+   if (res /= '023') STOP 20\n \n    write (unit=res,fmt=g) count(m1,dim=2)\n-   if (res /= '221') call abort\n+   if (res /= '221') STOP 21\n    write (unit=res,fmt=g) count(m2,dim=2)\n-   if (res /= '221') call abort\n+   if (res /= '221') STOP 22\n    write (unit=res,fmt=g) count(m4,dim=2)\n-   if (res /= '221') call abort\n+   if (res /= '221') STOP 23\n    write (unit=res,fmt=g) count(m8,dim=2)\n-   if (res /= '221') call abort\n+   if (res /= '221') STOP 24\n \n end program main"}, {"sha": "824b418552455249f5ad4d17d03b9c65cfb7f0d7", "filename": "gcc/testsuite/gfortran.dg/append_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fappend_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fappend_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fappend_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -4,7 +4,7 @@\n ! { dg-do run }\n       subroutine failed\n         close (10,status='delete')\n-        call abort\n+        STOP 1\n       end subroutine failed\n \n       integer,parameter :: n = 13"}, {"sha": "ec89b9708c67765bf85e90867f7bc5e190bd3e94", "filename": "gcc/testsuite/gfortran.dg/argument_checking_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -7,15 +7,15 @@ program main\n   character :: digit_arr(10)\n   call copy(digit_string, digit_arr)\n   call copy(digit_arr,str)\n-  if(str /= '123456789') call abort()\n+  if(str /= '123456789') STOP 1\n   digit_string = 'qwertasdf'\n   call copy2(digit_string, digit_arr)\n   call copy2(digit_arr,str)\n-  if(str /= 'qwertasdf') call abort()\n+  if(str /= 'qwertasdf') STOP 2\n   digit_string = '1qayxsw23e'\n   call copy3(\"1qayxsw23e\", digit_arr)\n   call copy3(digit_arr,str)\n-  if(str /= '1qayxsw23e') call abort()\n+  if(str /= '1qayxsw23e') STOP 3\n contains\n   subroutine copy(in, out)\n     character, dimension(*)  :: in"}, {"sha": "848a7ac14f5f30cf13a3b68bd30b433200172554", "filename": "gcc/testsuite/gfortran.dg/argument_checking_2.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,15 +8,15 @@ program main\n   character :: digit_arr(10)\n   call copy(digit_string, digit_arr)  ! { dg-error \"Scalar CHARACTER actual argument with array dummy argument 'in'\" }\n   call copy(digit_arr,str)            ! { dg-error \"Scalar CHARACTER actual argument with array dummy argument 'out'\" }\n-  if(str /= '123456789') call abort()\n+  if(str /= '123456789') STOP 1\n   digit_string = 'qwertasdf'\n   call copy2(digit_string, digit_arr) ! { dg-error \"Scalar CHARACTER actual argument with array dummy argument 'in'\" }\n   call copy2(digit_arr,str) ! { dg-error \"Scalar CHARACTER actual argument with array dummy argument 'out'\" }\n-  if(str /= 'qwertasdf') call abort()\n+  if(str /= 'qwertasdf') STOP 2\n   digit_string = '1qayxsw23e'\n   call copy('1qayxsw23e', digit_arr) ! { dg-error \"Scalar CHARACTER actual argument with array dummy argument 'in'\" }\n   call copy(digit_arr,str) ! { dg-error \"Scalar CHARACTER actual argument with array dummy argument 'out'\" }\n-  if(str /= '1qayxsw23e') call abort()\n+  if(str /= '1qayxsw23e') STOP 3\n contains\n   subroutine copy(in, out)\n     character, dimension(*)  :: in"}, {"sha": "25124dfa5a7a53ff40db93c4a7ca2ded6e468690", "filename": "gcc/testsuite/gfortran.dg/argument_checking_8.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_8.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -21,8 +21,8 @@ program test\n   character(10) astr\n   integer i\n   write(astr,'(a)') ouch('YOW!      ','jerry      ')\n-  if (astr(1:5) /= \"3*%SY\") call abort\n+  if (astr(1:5) /= \"3*%SY\") STOP 1\n   do i=6,10\n-    if (astr(i:i) /= achar(0)) call abort\n+    if (astr(i:i) /= achar(0)) STOP 2\n   end do    \n end program test"}, {"sha": "995d985b5055210ec5340a18a95c6d4cf03a2b2b", "filename": "gcc/testsuite/gfortran.dg/arithmetic_if.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farithmetic_if.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farithmetic_if.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farithmetic_if.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -13,16 +13,16 @@ program pr28439\n    integer myfunc\n       \n    if (myfunc(0)) 10, 20, 30  ! Should go to 30\n-10 call abort\n-20 call abort\n+10 STOP 1\n+20 STOP 2\n \n 30 if (myfunc(0)) 40, 50, 60  ! Should go to 50\n-40 call abort\n-60 call abort\n+40 STOP 3\n+60 STOP 4\n \n 50 if (myfunc(0)) 70, 80, 90  ! Should go to 70\n-80 call abort\n-90 call abort\n+80 STOP 5\n+90 STOP 6\n \n 70 continue\n "}, {"sha": "e976d171b3917d218c0f4f1570bf1b74eed82d0c", "filename": "gcc/testsuite/gfortran.dg/array_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -20,7 +20,7 @@ program arrpack\n                 21, 22, 23, 24, 25, 26,  &\n                 31, 32, 33, 34, 35, 36,  &\n                 41, 42, 43, 44, 45, 46,  &\n-                51, 52, 53, 54, 55, 56 /))) call abort ()\n+                51, 52, 53, 54, 55, 56 /))) STOP 1\n   \n contains\n   "}, {"sha": "982daa75a915f7fce42ad81bf31baaed1de6939f", "filename": "gcc/testsuite/gfortran.dg/array_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -11,7 +11,7 @@ program test\n   pre = 3.0\n   call EOS(N, rho, pre, cs, gamma)\n   if (abs(CS(1) - sqrt(gamma*pre(1)/rho(1))) > epsilon(cs)) &\n-     call abort()\n+     STOP 1\n contains\n       SUBROUTINE EOS(NODES, DENS, PRES, CS, CGAMMA)\n       IMPLICIT NONE"}, {"sha": "6b770779c6fc250076560f62a3efd956e2f2b936", "filename": "gcc/testsuite/gfortran.dg/array_alloc_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_alloc_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_alloc_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_alloc_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -9,7 +9,7 @@ subroutine test (x)\n     integer, dimension (10) :: x\n     integer :: i\n     do i = 1, 10\n-      if (x (i) .ne. i * 100) call abort\n+      if (x (i) .ne. i * 100) STOP 1\n     end do\n   end subroutine test\n "}, {"sha": "c321518e2a2188f841f05548fa36c26241168640", "filename": "gcc/testsuite/gfortran.dg/array_alloc_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_alloc_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_alloc_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_alloc_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -11,9 +11,9 @@ program main\n   subroutine test (expected, x)\n     integer, dimension (:) :: x\n     integer :: i, expected\n-    if (size (x, 1) .ne. expected) call abort\n+    if (size (x, 1) .ne. expected) STOP 1\n     do i = 1, expected\n-      if (x (i) .ne. i * 100) call abort\n+      if (x (i) .ne. i * 100) STOP 2\n     end do\n   end subroutine test\n "}, {"sha": "97a90c50333f46b4548076ef8db9df3f01977605", "filename": "gcc/testsuite/gfortran.dg/array_alloc_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_alloc_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_alloc_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_alloc_3.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -9,12 +9,12 @@ subroutine test (expected, x)\n     integer, dimension (3) :: expected\n     integer :: i, i1, i2, i3\n     do i = 1, 3\n-      if (size (x, i) .ne. expected (i)) call abort\n+      if (size (x, i) .ne. expected (i)) STOP 1\n     end do\n     do i1 = 1, expected (1)\n       do i2 = 1, expected (2)\n         do i3 = 1, expected (3)\n-          if (x (i1, i2, i3) .ne. i1 + i2 * 10 + i3 * 100) call abort\n+          if (x (i1, i2, i3) .ne. i1 + i2 * 10 + i3 * 100) STOP 2\n         end do\n       end do\n     end do"}, {"sha": "830b0caa504eb4e68d9334d4712b29d9c829dd97", "filename": "gcc/testsuite/gfortran.dg/array_assignment_1.F90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_assignment_1.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_assignment_1.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_assignment_1.F90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -6,7 +6,7 @@\n ! a temporary) match.\n #define TST(b,c,d,e,f,g,r) a=init; a(b:c:d) = a(e:f:g); \\\n        write(unit=line ,fmt=\"(9I1)\") a;\\\n-       if (line /= r) call abort ; \\\n+       if (line /= r) STOP 1; \\\n        call mytst(b,c,d,e,f,g,r);\n \n program main\n@@ -35,5 +35,5 @@ subroutine mytst(b,c,d,e,f,g,r)\n   a = (/(i,i=1,9)/)\n   a(b:c:d) = a(e:f:g)\n   write (unit=line,fmt='(9I1)') a\n-  if (line /= r) call abort\n+  if (line /= r) STOP 2\n end subroutine mytst"}, {"sha": "fffb6104f640d60c55724692977b579499d39a6c", "filename": "gcc/testsuite/gfortran.dg/array_assignment_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_assignment_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_assignment_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_assignment_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -12,5 +12,5 @@ PROGRAM test\n   fileNames = (/ \"file1\", \"file2\" /)\n   fullNames = SPREAD(TRIM(pathName),1,2) // fileNames\n   if (fullNames(1) /= '/dir1/dir2/file1' .or. &\n-       & fullnames(2) /= '/dir1/dir2/file2') call abort\n+       & fullnames(2) /= '/dir1/dir2/file2') STOP 1\n END PROGRAM test"}, {"sha": "7654c10046a698aeefc5f63623ad3583b95e6124", "filename": "gcc/testsuite/gfortran.dg/array_constructor_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -6,12 +6,12 @@ program bracket_array_constructor\n \n     a = [ 1, 2, 3, 4 ]\n     do i = 1, size(a)\n-        if (a(i) /= i) call abort()\n+        if (a(i) /= i) STOP 1\n     end do\n \n     a = [ (/ 1, 2, 3, 4 /) ]\n     do i = 1, size(a)\n-        if (a(i) /= i) call abort()\n+        if (a(i) /= i) STOP 2\n     end do\n \n end program bracket_array_constructor"}, {"sha": "a1e55384c5c3ef6fd2ffdca39c929ee1293155e5", "filename": "gcc/testsuite/gfortran.dg/array_constructor_10.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_10.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -17,11 +17,11 @@ subroutine test (order, values)\n     integer, dimension (3:) :: values\n     integer :: order, i\n \n-    if (size (values, dim = 1) .ne. order * 3) call abort\n+    if (size (values, dim = 1) .ne. order * 3) STOP 1\n     do i = 1, order\n-      if (values (i * 3) .ne. i) call abort\n-      if (values (i * 3 + 1) .ne. i) call abort\n-      if (values (i * 3 + 2) .ne. i * 2) call abort\n+      if (values (i * 3) .ne. i) STOP 2\n+      if (values (i * 3 + 1) .ne. i) STOP 3\n+      if (values (i * 3 + 2) .ne. i * 2) STOP 4\n     end do\n   end subroutine test\n end program main"}, {"sha": "8816db5bbb6ac0b448d3b651de81ea19d4e4c348", "filename": "gcc/testsuite/gfortran.dg/array_constructor_11.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_11.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -41,8 +41,8 @@ subroutine test (from, to, step, values)\n     last = 0\n     do i = from, to, step\n       last = last + 1\n-      if (values (last) .ne. i) call abort\n+      if (values (last) .ne. i) STOP 1\n     end do\n-    if (size (values, dim = 1) .ne. last) call abort\n+    if (size (values, dim = 1) .ne. last) STOP 2\n   end subroutine test\n end program main"}, {"sha": "8d98964982977491ab2f9ddfb3b7d15aceedcc1c", "filename": "gcc/testsuite/gfortran.dg/array_constructor_12.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_12.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -43,9 +43,9 @@ subroutine test (a, l, u, step)\n \n     j = 1\n     do i = l, u, step\n-      if (a (j) .ne. i) call abort\n+      if (a (j) .ne. i) STOP 1\n       j = j + 1\n     end do\n-    if (size (a, 1) .ne. j - 1) call abort\n+    if (size (a, 1) .ne. j - 1) STOP 2\n   end subroutine test\n end program main"}, {"sha": "245f91f0b5985cd4d207a91402bdf39463713b57", "filename": "gcc/testsuite/gfortran.dg/array_constructor_15.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_15.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do compile }\n ! { dg-options \"-O2 -fdump-tree-original\" }\n   integer :: x(2,2)\n-  if (any(x(:,:) .ne. reshape ((/ 3, 1, 4, 1 /), (/ 2, 2 /)))) call abort ()\n+  if (any(x(:,:) .ne. reshape ((/ 3, 1, 4, 1 /), (/ 2, 2 /)))) STOP 1\n end\n ! { dg-final { scan-tree-dump-times \"atmp\" 0 \"original\" } }"}, {"sha": "2d87680b5abf7c886337662ea60705af8bb2950a", "filename": "gcc/testsuite/gfortran.dg/array_constructor_16.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_16.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -26,9 +26,9 @@ SUBROUTINE two\n     ii = 0\n     iii = 0\n     CALL one\n-    IF (i .NE. 0) CALL ABORT ()\n-    IF (ii .NE. 99) CALL ABORT ()\n-    IF (iii .NE. 999) CALL ABORT ()\n+    IF (i .NE. 0) STOP 1\n+    IF (ii .NE. 99) STOP 2\n+    IF (iii .NE. 999) STOP 3\n   END SUBROUTINE\n END\n "}, {"sha": "37ac34af4c5caa0493d26a14921ff2d95f01c46e", "filename": "gcc/testsuite/gfortran.dg/array_constructor_17.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_17.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -9,7 +9,7 @@\n   CHARACTER(LEN = 8) :: str\n   J = 3\n   write (str,'(2A4)') (/( F(I, J), I = 1, 2)/)\n-  IF (str .NE. \" ODD EVE\") call abort ()\n+  IF (str .NE. \" ODD EVE\") STOP 1\n \n ! Comment #1 from F-X Coudert (noted by T. Burnus) that\n ! actually exercises a different part of the bug.\n@@ -33,8 +33,8 @@ function g(k) result(i)\n   end function\n   subroutine gee(a)\n     character(*),dimension(1) :: a\n-    if(len (a) /= 3) call abort ()\n-    if(a(1) /= '123') call abort ()\n+    if(len (a) /= 3) STOP 2\n+    if(a(1) /= '123') STOP 3\n   end subroutine gee\n \n END"}, {"sha": "f4af94bece76ff272a68e6c51d9136705ef0c86c", "filename": "gcc/testsuite/gfortran.dg/array_constructor_19.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_19.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_19.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_19.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -10,8 +10,8 @@\n   real, parameter :: x3(1) = -(/ x /)\n   real, parameter :: x4(2) = (/ x, 1. /) + (/ 2, (/3/) /)\n \n-  if (any (x1 /= (/43./))) call abort\n-  if (any (x2 /= (/43./))) call abort\n-  if (any (x3 /= (/-42./))) call abort\n-  if (any (x4 /= (/44., 4./))) call abort\n+  if (any (x1 /= (/43./))) STOP 1\n+  if (any (x2 /= (/43./))) STOP 2\n+  if (any (x3 /= (/-42./))) STOP 3\n+  if (any (x4 /= (/44., 4./))) STOP 4\n end"}, {"sha": "43fa3a87724fd8b6075d049db0fa4e319561b875", "filename": "gcc/testsuite/gfortran.dg/array_constructor_23.f", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_23.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_23.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_23.f?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -20,7 +20,7 @@ subroutine  FA6013 (nf10, nf1, mf1)\n       DDA1 = ATAN2 ((/(REAL(J1,KV),J1=1,10)/),\n      $                 REAL((/(J1,J1=nf10,nf1,mf1)/), KV))   !fails\n       DDA2 = ATAN2 (DDA, DDA(10:1:-1))\n-      if (any (DDA1 - DDA2 .gt. epsilon(dval))) call abort ()\n+      if (any (DDA1 - DDA2 .gt. epsilon(dval))) STOP 1\n       END\n \n       subroutine FA6077 (nf10,nf1,mf1, ida)\n@@ -29,7 +29,7 @@ subroutine FA6077 (nf10,nf1,mf1, ida)\n       IDA1 = IEOR((/1,2,3,4,5,6,7,8,9,10/),\n      $            (/(IDA(J1),J1=10,1,-1)/) )\n       IDA2 = IEOR ((/1,2,3,4,5,6,7,8,9,10/), (/10,9,8,7,6,5,4,3,2,1/) )\n-      if (any (ida1 .ne. ida2)) call abort ()\n+      if (any (ida1 .ne. ida2)) STOP 2\n       END SUBROUTINE\n \n       subroutine fa2083\n@@ -42,7 +42,7 @@ subroutine fa2083\n       QDA1 = MOD ( 1.1_k*( QDA(1) -5.0_k), P=( QDA -2.5_k))\n       DO J1 = 1,10\n         QVAL = MOD(1.1_k*(QDA(1)-5.0_k),P=(QDA(J1)-2.5_k))\n-        if (qval - qda1(j1) .gt. epsilon(qval)) call abort ()\n+        if (qval - qda1(j1) .gt. epsilon(qval)) STOP 3\n       ENDDO\n       END\n "}, {"sha": "09613975612b5f6e36cc595360dbcf23707aab26", "filename": "gcc/testsuite/gfortran.dg/array_constructor_24.f", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_24.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_24.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_24.f?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -19,7 +19,7 @@ subroutine  FA6013 (nf10, nf1, mf1)\n       DDA1 = ATAN2 ((/(REAL(J1,KV),J1=1,10)/),\n      $                 REAL((/(J1,J1=nf10,nf1,mf1)/), KV))   !fails\n       DDA2 = ATAN2 (DDA, DDA(10:1:-1))\n-      if (any (abs(DDA1-DDA2) .gt. 1.0e-6)) call abort ()\n+      if (any (abs(DDA1-DDA2) .gt. 1.0e-6)) STOP 1\n       END\n \n       subroutine FA6077 (nf10,nf1,mf1, ida)\n@@ -28,7 +28,7 @@ subroutine FA6077 (nf10,nf1,mf1, ida)\n       IDA1 = IEOR((/1,2,3,4,5,6,7,8,9,10/),\n      $            (/(IDA(J1),J1=10,1,-1)/) )\n       IDA2 = IEOR ((/1,2,3,4,5,6,7,8,9,10/), (/10,9,8,7,6,5,4,3,2,1/) )\n-      if (any (ida1 .ne. ida2)) call abort ()\n+      if (any (ida1 .ne. ida2)) STOP 2\n       END SUBROUTINE\n \n       subroutine fa2083\n@@ -41,7 +41,7 @@ subroutine fa2083\n       QDA1 = MOD ( 1.1_k*( QDA(1) -5.0_k), P=( QDA -2.5_k))\n       DO J1 = 1,10\n         QVAL = MOD(1.1_k*(QDA(1)-5.0_k),P=(QDA(J1)-2.5_k))\n-        if (qval .ne. qda1(j1)) call abort ()\n+        if (qval .ne. qda1(j1)) STOP 3\n       ENDDO\n       END\n "}, {"sha": "5b2dbf29da94691096e4593f541fe0eb4200f946", "filename": "gcc/testsuite/gfortran.dg/array_constructor_32.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_32.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_32.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_32.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -20,9 +20,9 @@\n   data (b(i), i = 1, n) /a(d1), a(d2), a(d3)/\n   data (z(i), i = 1, n) / 1, 2, 3/\n \n-  if (any(z.ne.[1, 2, 3])) call abort\n+  if (any(z.ne.[1, 2, 3])) STOP 1\n   if (any(b(1)%x.ne.[1, 2, 3]) .or. &\n       any(b(2)%x.ne.[4, 5, 6]) .or. &\n-      any(b(3)%x.ne.[7, 8, 9])) call abort\n+      any(b(3)%x.ne.[7, 8, 9])) STOP 2\n end\n "}, {"sha": "87b91a6261302a40185492f040958c3b55cbd37e", "filename": "gcc/testsuite/gfortran.dg/array_constructor_36.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_36.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_36.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_36.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -15,7 +15,7 @@ program main\n   q = 'xy'\n   i = 2\n   write (buffer, fmt) (/ trim(q), 'ae' /)//'c'\n-  if (buffer .ne. test) Call abort\n+  if (buffer .ne. test) STOP 1\n   write (buffer, FMT) (/ q(1:i), 'ae' /)//'c'\n-  if (buffer .ne. test) Call abort\n+  if (buffer .ne. test) STOP 2\n end program main"}, {"sha": "90c2d545c185a2f92c5a10cb555f987e9dd1a705", "filename": "gcc/testsuite/gfortran.dg/array_constructor_39.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_39.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_39.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_39.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -7,7 +7,7 @@\n ! Original testcase by Vittorio Zecca <zeccav@gmail.com>\n !\n       I=5\n-      if (any((/(i,i=1,I)/) /= (/1,2,3,4,5/))) call abort ! { dg-warning \"final expression references control variable\" }\n-      if (I /= 5) call abort\n+      if (any((/(i,i=1,I)/) /= (/1,2,3,4,5/))) STOP 1! { dg-warning \"final expression references control variable\" }\n+      if (I /= 5) STOP 2\n       end\n "}, {"sha": "1c3fc2c1bd8f78b7a8159866c96b1a9d487f0540", "filename": "gcc/testsuite/gfortran.dg/array_constructor_4.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_4.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -6,18 +6,18 @@\n \n n = 5\n i = (/ (m, m = n, 1, -1) /)\n-if (any (i /= (/ 5, 4, 3, 2, 1 /))) call abort\n+if (any (i /= (/ 5, 4, 3, 2, 1 /))) STOP 1\n \n k = 1\n \n i(5:1:-1) = (/ (m, m = n, k, -1) /)\n-if (any (i /= (/ 1, 2, 3, 4, 5 /))) call abort\n+if (any (i /= (/ 1, 2, 3, 4, 5 /))) STOP 2\n \n l = -1\n \n i = (/ (m, m = n, 1, l) /)\n-if (any (i /= (/ 5, 4, 3, 2, 1 /))) call abort\n+if (any (i /= (/ 5, 4, 3, 2, 1 /))) STOP 3\n \n i(5:1:-1) = (/ (m, m = n, k, l) /)\n-if (any (i /= (/ 1, 2, 3, 4, 5 /))) call abort\n+if (any (i /= (/ 1, 2, 3, 4, 5 /))) STOP 4\n end"}, {"sha": "ad42f9abcb473415a0712b7e7fd889efff4708c2", "filename": "gcc/testsuite/gfortran.dg/array_constructor_40.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_40.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_40.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_40.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -44,8 +44,8 @@ program main\n   lo = .false.\n   lo(3,3) = .true.\n   call bar(a,b,c,lo)\n-  if (c /= 1) call abort\n+  if (c /= 1) STOP 1\n   call baz(a,b,res);\n-  if (abs(res - 8.1) > 1e-5) call abort\n+  if (abs(res - 8.1) > 1e-5) STOP 2\n end program main\n ! { dg-final { scan-tree-dump-times \"while\" 5 \"original\" } }"}, {"sha": "71cabab9f7acbdedf6cb3ee0a44859a058682dba", "filename": "gcc/testsuite/gfortran.dg/array_constructor_44.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_44.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_44.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_44.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,5 +8,5 @@\n   s = 2.0\n   m = 4\n   res = SUM([(s**(REAL(k-1)/REAL(m-1)),k=1,m)])\n-  if (abs(res - 5.84732246) > 1e-6) call abort\n+  if (abs(res - 5.84732246) > 1e-6) STOP 1\n   end"}, {"sha": "34d1b06d5d4550f7f97e74e98eadf3afe12af27f", "filename": "gcc/testsuite/gfortran.dg/array_constructor_45.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_45.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_45.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_45.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -11,5 +11,5 @@ program main\n   s = 1000.\n \n   res = SUM([3.0,(s**(REAL(k-1)/REAL(m-1)),k=1,m),17.])\n-  if (abs(res - 1021.)>1e-4) call abort\n+  if (abs(res - 1021.)>1e-4) STOP 1\n end"}, {"sha": "f6511fcb7367b590814e68a6b4d9b5671129f776", "filename": "gcc/testsuite/gfortran.dg/array_constructor_46.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_46.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_46.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_46.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -9,6 +9,6 @@ program main\n \n   data a /2._dp,3._dp,5._dp,7._dp/\n   thirteen = 13._dp\n-  if (abs (product([[11._dp, thirteen], a]) - 30030._dp) > 1e-8) call abort\n+  if (abs (product([[11._dp, thirteen], a]) - 30030._dp) > 1e-8) STOP 1\n end program main\n ! { dg-final { scan-tree-dump-times \"while\" 2 \"original\" } }"}, {"sha": "19ec8c8fd8fc2a1576293dcf070f63601cada76f", "filename": "gcc/testsuite/gfortran.dg/array_constructor_47.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_47.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_47.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_47.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -10,7 +10,7 @@ program main\n \n   data a /2._dp,3._dp,5._dp,7._dp/\n   thirteen = 13._dp\n-  if (abs (product([[sum([eleven_ones()]), thirteen], a]) - 30030._dp) > 1e-8) call abort\n+  if (abs (product([[sum([eleven_ones()]), thirteen], a]) - 30030._dp) > 1e-8) STOP 1\n  contains\n   function eleven_ones()\n     real(kind=dp) :: eleven_ones(11)"}, {"sha": "bfba188e9dc813d28784a9e5c1d041c7b9f64262", "filename": "gcc/testsuite/gfortran.dg/array_constructor_49.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_49.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_49.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_49.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -7,6 +7,6 @@ program t\n   integer :: ndim=2, ndfp=4, i\n   character (len=8) :: line\n   write (unit=line,fmt='(4I2)') (/ ( i, i = 1, ndfp ) /) + ndim\n-  if (line /= ' 3 4 5 6') call abort\n+  if (line /= ' 3 4 5 6') STOP 1\n end program t\n ! { dg-final { scan-tree-dump-times \"__var\" 3 \"original\" } }"}, {"sha": "773128fada59d7ee2d225a879307a79dc2bfebe4", "filename": "gcc/testsuite/gfortran.dg/array_constructor_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -6,6 +6,6 @@ program array_constructor\n     i = 6\n     a = (/ 1, 2, 3, 4, 5, i /)\n     do i = 1, 6\n-        if (a(i) /= i) call abort()\n+        if (a(i) /= i) STOP 1\n     end do\n end program array_constructor"}, {"sha": "843031fa37086025f68fd7e85434c987dbeef369", "filename": "gcc/testsuite/gfortran.dg/array_constructor_50.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_50.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_50.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_50.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -15,7 +15,7 @@ program test\n      a = 2\n \n      ra = (/ (any(a(i).eq.(/1,2,3/)) ,i=1,n) /)\n-     if (.not. all(ra)) call abort\n+     if (.not. all(ra)) STOP 1\n      rs = any ( (/ (any(a(i).eq.(/1,2,3/)) ,i=1,n) /) )\n-     if (.not. rs) call abort\n+     if (.not. rs) STOP 2\n    end program test"}, {"sha": "a652dacea569d089818d0e41886bb2a5e0255274", "filename": "gcc/testsuite/gfortran.dg/array_constructor_6.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_6.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -17,9 +17,9 @@ subroutine test (order, values)\n     integer, dimension (:) :: values\n     integer :: order, i\n \n-    if (size (values, dim = 1) .ne. order) call abort\n+    if (size (values, dim = 1) .ne. order) STOP 1\n     do i = 1, order\n-      if (values (i) .ne. i * 2) call abort\n+      if (values (i) .ne. i * 2) STOP 2\n     end do\n   end subroutine test\n end program main"}, {"sha": "8046ae4ee959bb851cfd7b9fb8133169d58a4b33", "filename": "gcc/testsuite/gfortran.dg/array_constructor_7.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_7.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -16,10 +16,10 @@ subroutine test (order, values)\n     integer, dimension (:) :: values\n     integer :: order, i, j\n \n-    if (size (values, dim = 1) .ne. order * (order + 1) / 2) call abort\n+    if (size (values, dim = 1) .ne. order * (order + 1) / 2) STOP 1\n     do i = 1, order\n       do j = 1, i\n-        if (values (i * (i - 1) / 2 + j) .ne. (j + 100) * i) call abort\n+        if (values (i * (i - 1) / 2 + j) .ne. (j + 100) * i) STOP 2\n       end do\n     end do\n   end subroutine test"}, {"sha": "49013076795e814a173bfb24d3b2a34f4899c12e", "filename": "gcc/testsuite/gfortran.dg/array_constructor_8.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_8.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -35,12 +35,12 @@ subroutine test (order, repeat, trail, values)\n     integer, dimension (:) :: values\n     integer :: order, repeat, trail, i\n \n-    if (size (values, dim = 1) .ne. order * repeat + trail) call abort\n+    if (size (values, dim = 1) .ne. order * repeat + trail) STOP 1\n     do i = 1, order * repeat\n-      if (values (i) .ne. mod (i - 1, repeat) + 1) call abort\n+      if (values (i) .ne. mod (i - 1, repeat) + 1) STOP 2\n     end do\n     do i = 1, trail\n-      if (values (i + order * repeat) .ne. i * 100) call abort\n+      if (values (i + order * repeat) .ne. i * 100) STOP 3\n     end do\n   end subroutine test\n end program main"}, {"sha": "2f92fe0f28451b914a7b41b83874aed43589570a", "filename": "gcc/testsuite/gfortran.dg/array_constructor_9.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_9.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -29,15 +29,15 @@ subroutine test (order, prefix, values)\n     do i = 1, order\n       do j = 1, prefix\n         last = last + 1\n-        if (values (last) .ne. 1.5) call abort\n+        if (values (last) .ne. 1.5) STOP 1\n       end do\n       do j = 1, i + 1\n         do k = 1, i\n           last = last + 1\n-          if (values (last) .ne. j + k * k) call abort\n+          if (values (last) .ne. j + k * k) STOP 2\n         end do\n       end do\n     end do\n-    if (size (values, dim = 1) .ne. last) call abort\n+    if (size (values, dim = 1) .ne. last) STOP 3\n   end subroutine test\n end program main"}, {"sha": "07ecbccfa3d93d3cf983efb1799e4dc788b2a279", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_1.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_1.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -12,6 +12,6 @@ PROGRAM test\n \n   IF (array(1) /= 18 .OR. array(2) /= 12 .OR. &\n       array(3) /= 31 .OR. array(4) /=  3 .OR. array(5) /= 42) THEN\n-      CALL abort()\n+      STOP 1\n   END IF\n END PROGRAM test"}, {"sha": "ab0190fa7fed22ddbea2764bb675858674dc0191", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_10.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_10.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_10.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_10.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -17,7 +17,7 @@ SUBROUTINE foo (n, s, shouldBe)\n     INTEGER :: n\n     arr = [ character(len=n) :: s, s ]\n     IF (arr(1) /= shouldBe .OR. arr(2) /= shouldBe) THEN\n-      CALL abort ()\n+      STOP 1\n     END IF\n   END SUBROUTINE foo\n END PROGRAM test"}, {"sha": "e980158d64270dceb55149ae7fb72de56813cacb", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_11.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_11.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_11.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_11.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -6,6 +6,6 @@\n !\n  integer :: i(3)\n  i(3:2) = (/ integer :: /)\n- if (len((/ character(5) :: /)) /= 5) call abort()\n- if (kind((/ integer(8) :: /)) /= 8) call abort()\n+ if (len((/ character(5) :: /)) /= 5) STOP 1\n+ if (kind((/ integer(8) :: /)) /= 8) STOP 2\n end"}, {"sha": "a59734fdb8da8c0e135874728efb805f63ceaffb", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_12.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_12.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_12.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_12.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,5 +8,5 @@\n integer :: j(3)\n a = (/ integer :: 1.4, 2.2, 3.33  /)\n j = (/ 1.4, 2.2, 3.33  /)\n-if( any(a /= j )) call abort()\n+if( any(a /= j )) STOP 1\n end"}, {"sha": "a6a64c0e825ccb4bb2a916977184e9cbadc07d00", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_13.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_13.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -10,5 +10,5 @@\n integer :: j(3)\n a = (/ integer :: 1.4, 2.2, 3.33  /) ! { dg-error \"Fortran 2003\" }\n j = (/ 1.4, 2.2, 3.33  /)\n-if( any(a /= j )) call abort()\n+if( any(a /= j )) STOP 1\n end"}, {"sha": "c55d25c3328f385368b0d7118f0b894a00e8b0d7", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_14.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_14.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_14.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_14.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -19,6 +19,6 @@ PROGRAM test\n   arr = (/ foo :: x, foo(0, 1.) /)\n   IF (arr(1)%i /= 42 .OR. arr(1)%x /= 42. .OR. &\n       arr(2)%i /= 0 .OR. arr(2)%x /= 1.) THEN\n-    CALL abort()\n+    STOP 1\n   END IF\n END PROGRAM test"}, {"sha": "ec6e21f4c3fbafc988358a749187004506e79ef4", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_16.f03", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_16.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_16.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_16.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -10,16 +10,16 @@ PROGRAM test\n   CHARACTER(len=6) :: carr(3)\n \n   arr = (/ INTEGER(KIND=8) :: 4, [ INTEGER(KIND=4) :: 42, 12 ] /)\n-  IF (arr(1) /= 4 .OR. arr(2) /= 42 .OR. arr(3) /= 12) CALL abort()\n+  IF (arr(1) /= 4 .OR. arr(2) /= 42 .OR. arr(3) /= 12) STOP 1\n   arr = (/ INTEGER(KIND=8) :: [ INTEGER(KIND=4) :: 4, 42, 12 ] /)\n-  IF (arr(1) /= 4 .OR. arr(2) /= 42 .OR. arr(3) /= 12) CALL abort()\n+  IF (arr(1) /= 4 .OR. arr(2) /= 42 .OR. arr(3) /= 12) STOP 2\n   arr = (/ INTEGER(KIND=8) :: [ INTEGER(KIND=4) :: 4, 42 ], 12 /)\n-  IF (arr(1) /= 4 .OR. arr(2) /= 42 .OR. arr(3) /= 12) CALL abort()\n+  IF (arr(1) /= 4 .OR. arr(2) /= 42 .OR. arr(3) /= 12) STOP 3\n   arr = (/ INTEGER(KIND=8) :: [ INTEGER(KIND=4) :: ], 4, 42, 12 /)\n-  IF (arr(1) /= 4 .OR. arr(2) /= 42 .OR. arr(3) /= 12) CALL abort()\n+  IF (arr(1) /= 4 .OR. arr(2) /= 42 .OR. arr(3) /= 12) STOP 4\n \n   carr = [ CHARACTER(len=6) :: \"foo\", [ CHARACTER(len=4) :: \"foobar\", \"xyz\" ] ]\n   IF (carr(1) /= \"foo\" .OR. carr(2) /= \"foob\" .OR. carr(3) /= \"xyz\") THEN\n-    CALL abort()\n+    STOP 5\n   END IF\n END PROGRAM test"}, {"sha": "403013be396159d101b61550e5b3742c1cf4f79e", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_2.f03", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_2.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,13 +8,13 @@ program test\n   implicit none\n   character(15) :: a(3)\n   a =  (/ character(len=7) :: 'Takata', 'Tanaka', 'Hayashi' /)\n-  if ( len([ character(len=7) :: ]) /= 7) call abort()\n-  if ( size([ integer :: ]) /= 0) call abort()\n+  if ( len([ character(len=7) :: ]) /= 7) STOP 1\n+  if ( size([ integer :: ]) /= 0) STOP 2\n   if(     a(1) /= 'Takata'  .or. a(1)(7:7)   /= achar(32) &\n                             .or. a(1)(15:15) /= achar(32) &\n      .or. a(2) /= 'Tanaka'  .or. a(2)(7:7)   /= achar(32) &\n                             .or. a(2)(15:15) /= achar(32) &\n      .or. a(3) /= 'Hayashi' .or. a(3)(8:8)   /= achar(32) &\n                             .or. a(3)(15:15) /= achar(32))&\n-   call abort()\n+   STOP 3\n end program test"}, {"sha": "6562297e6ca148917d122c182309f495fc9dcb7d", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_22.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_22.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_22.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_22.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -24,6 +24,6 @@ program foo\n \n    p = [real(kind=4) :: x,  y]\n    q = [real(kind=8) :: x,  y]\n-   if (any(p .ne. r2)) call abort\n-   if (any(q .ne. r3)) call abort\n+   if (any(p .ne. r2)) STOP 1\n+   if (any(q .ne. r3)) STOP 2\n end program foo"}, {"sha": "e8d10bf37f6f3daf3441a3f400560260bdc032d1", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_3.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_3.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -11,6 +11,6 @@ PROGRAM test\n   array = (/ 5, [INTEGER ::], 6 /)\n \n   IF (array(1) /= 5 .OR. array(2) /= 6) THEN\n-      CALL abort()\n+      STOP 1\n   END IF\n END PROGRAM test"}, {"sha": "8e54fc5782b6c8becc57b2d7456c7d5d45f7c557", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_4.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_4.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_4.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_4.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -10,6 +10,6 @@ PROGRAM test\n \n   array = [ INTEGER ]\n   IF (array(1) /= 42) THEN\n-    CALL abort()\n+    STOP 1\n   END IF\n END PROGRAM test"}, {"sha": "905f1d27551b078ea5c5c4b9dc1a4df54ef3fb7f", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_5.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_5.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -14,5 +14,5 @@ program test\n                          .or. a(2)(15:15) /= achar(32) &\n      .or. a(3) /= 'Hay'  .or. a(3)(4:4)   /= achar(32) &\n                          .or. a(3)(15:15) /= achar(32))&\n-   call abort()\n+   STOP 1\n end program test"}, {"sha": "70211d5628c660590195aa32059a9d46b34582a0", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_6.f03", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_6.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -14,17 +14,17 @@ program test\n \n   a =  (/ character(len=7) :: trim(b(1)), trim(b(2)), trim(b(3)) /)\n   if (a(1) /= 'Takata' .or. a(2) /= 'Tanaka' .or. a(3) /= 'Hayashi') then\n-    call abort ()\n+    STOP 1\n   end if\n \n   a =  (/ character(len=2) :: trim(b(1)), trim(b(2)), trim(b(3)) /)\n   if (a(1) /= 'Ta' .or. a(2) /= 'Ta' .or. a(3) /= 'Ha') then\n-    call abort ()\n+    STOP 2\n   end if\n \n   a =  (/ character(len=8) :: trim(b(1)), trim(b(2)), trim(b(3)) /)\n   if (a(1) /= 'Takata' .or. a(2) /= 'Tanaka' .or. a(3) /= 'Hayashi') then\n-    call abort ()\n+    STOP 3\n   end if\n \n end program test"}, {"sha": "13604ee3183d53dfa450b8b03adbd64f5338cb1f", "filename": "gcc/testsuite/gfortran.dg/array_constructor_type_7.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_7.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_7.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_type_7.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -17,7 +17,7 @@ SUBROUTINE foo (n, s, a1, a2)\n     INTEGER :: n\n     arr = [ character(len=n) :: 'test', s ]\n     IF (arr(1) /= a1 .OR. arr(2) /= a2) THEN\n-      CALL abort ()\n+      STOP 1\n     END IF\n   END SUBROUTINE foo\n END PROGRAM test"}, {"sha": "34f363495d3d530312b7bb7dacd5eb58c1939c68", "filename": "gcc/testsuite/gfortran.dg/array_function_1.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_function_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_function_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_function_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,16 +8,16 @@ program array_function_1\n   a = (/ 1, 2, 3, 4, 5 /)\n \n   b = f(a(l:u) - 2)\n-  if (b /= 0) call abort\n+  if (b /= 0) STOP 1\n \n   b = f(a(4:2) - 2)\n-  if (b /= 0) call abort\n+  if (b /= 0) STOP 2\n \n   b = f(a(u:l) - 2)\n-  if (b /= 3) call abort\n+  if (b /= 3) STOP 3\n \n   b = f(a(2:4) - 2)\n-  if (b /= 3) call abort\n+  if (b /= 3) STOP 4\n \n   contains\n     integer function f(x)"}, {"sha": "c5e5aa0de3aee3f2b56526264490f291eba3307d", "filename": "gcc/testsuite/gfortran.dg/array_function_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_function_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_function_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_function_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -13,5 +13,5 @@ program bug\n   matB=matmul(transpose(0.5*matA),matA)\n   matC = transpose(0.5*matA)\n   matC = matmul(matC, matA)\n-  if (any(matB.ne.matC)) call abort()\n+  if (any(matB.ne.matC)) STOP 1\n end program bug"}, {"sha": "d4f5e940c1067b5532ed6f535ab60b5b0a7eaeff", "filename": "gcc/testsuite/gfortran.dg/array_initializer_1.f90", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_initializer_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_initializer_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_initializer_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -21,15 +21,15 @@\n   character(4), parameter :: chrt(2) = (/chr(2:2)(2:3), chr(ii-1)(3:ii)/)\r\n   character(2), parameter :: chrx(2) = (/(chr(i)(i:i+1), i=2,3)/)\r\n \r\n-  if (any (y .ne. (/5., 6., 15., 16./))) call abort ()\r\n-  if (any (z .ne. (/11., 12./))) call abort ()\r\n-  if (any (r .ne. (/1., 2., 6., 7., 11., 12./))) call abort ()\r\n+  if (any (y .ne. (/5., 6., 15., 16./))) STOP 1\r\n+  if (any (z .ne. (/11., 12./))) STOP 2\r\n+  if (any (r .ne. (/1., 2., 6., 7., 11., 12./))) STOP 3\r\n   if (any (s .ne. (/11., 7., 3., 16., 12., 8., 4., &\r\n-                    11., 7.,     16., 12., 8. /))) call abort ()\r\n+                    11., 7.,     16., 12., 8. /))) STOP 4\r\n \r\n-  if (any (t .ne. (/11., 12., 8., 6., 11., 12., 27., 15. /))) call abort ()\r\n+  if (any (t .ne. (/11., 12., 8., 6., 11., 12., 27., 15. /))) STOP 5\r\n \r\n-  if (chrs .ne. \"noef\") call abort ()\r\n-  if (any (chrt .ne. (/\"fg\", \"kl\"/))) call abort ()\r\n-  if (any (chrx .ne. (/\"fg\", \"kl\"/))) call abort ()\r\n+  if (chrs .ne. \"noef\") STOP 6\r\n+  if (any (chrt .ne. (/\"fg\", \"kl\"/))) STOP 7\r\n+  if (any (chrx .ne. (/\"fg\", \"kl\"/))) STOP 8\r\n end\r"}, {"sha": "331678dabfb9759c75b125f2644b35a878221df0", "filename": "gcc/testsuite/gfortran.dg/array_initializer_2.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_initializer_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_initializer_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_initializer_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -21,11 +21,11 @@\n !\n ! PR28496\n !\n-  if (any (b .ne. (/1,2,3/))) call abort ()\n-  if (any (reshape(d,(/6/)) .ne. (/3, 2, 6, 5, 9, 8/))) call abort () \n-  if (any (reshape(f,(/6/)) .ne. (/2, 1, 5, 4, 8, 7/))) call abort () \n+  if (any (b .ne. (/1,2,3/))) STOP 1\n+  if (any (reshape(d,(/6/)) .ne. (/3, 2, 6, 5, 9, 8/))) STOP 2 \n+  if (any (reshape(f,(/6/)) .ne. (/2, 1, 5, 4, 8, 7/))) STOP 3 \n !\n ! PR29975\n !\n-  IF (all(h(2:2) /= g(3:4))) call abort ()\n+  IF (all(h(2:2) /= g(3:4))) STOP 4\n end"}, {"sha": "cda4bbef0dfad6ecd340893e90d0bb4b23053784", "filename": "gcc/testsuite/gfortran.dg/array_memcpy_5.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_memcpy_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_memcpy_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_memcpy_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -14,9 +14,9 @@ program main\n   a%i = 0\n   print *, a\n   a%i = (/ 12, 2/)\n-  if (any (a%c .ne. (/\"uvw\", \"xyz\"/))) call abort ()\n-  if (any (a%i .ne. (/12, 2/))) call abort ()\n+  if (any (a%c .ne. (/\"uvw\", \"xyz\"/))) STOP 1\n+  if (any (a%i .ne. (/12, 2/))) STOP 2\n   a%i = b%i\n-  if (any (a%c .ne. (/\"uvw\", \"xyz\"/))) call abort ()\n-  if (any (a%i .ne. (/101, 102/))) call abort ()\n+  if (any (a%c .ne. (/\"uvw\", \"xyz\"/))) STOP 3\n+  if (any (a%i .ne. (/101, 102/))) STOP 4\n end program main"}, {"sha": "06f33653d7d26cf4a2c1a164eacf05a5d6932fa7", "filename": "gcc/testsuite/gfortran.dg/array_memset_2.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_memset_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_memset_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_memset_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -25,11 +25,11 @@ program test\n   d(:,1) = 0.    ! This can't be otimized to a memset.\n   call bar(e)\n \n-  if (any(a /= reshape((/ 0.0, 1.0, 0.0, 1.0/), shape(a)))) call abort\n-  if (any(b /= 0.)) call abort\n-  if (any(c /= 0.)) call abort\n-  if (any(d /= reshape((/ 0.0, 0.0, 1.0, 1.0/), shape(d)))) call abort\n-  if (any(e /= reshape((/ 0.0, 1.0, 0.0, 1.0/), shape(e)))) call abort\n+  if (any(a /= reshape((/ 0.0, 1.0, 0.0, 1.0/), shape(a)))) STOP 1\n+  if (any(b /= 0.)) STOP 2\n+  if (any(c /= 0.)) STOP 3\n+  if (any(d /= reshape((/ 0.0, 0.0, 1.0, 1.0/), shape(d)))) STOP 4\n+  if (any(e /= reshape((/ 0.0, 1.0, 0.0, 1.0/), shape(e)))) STOP 5\n \n end program\n "}, {"sha": "246f8ceacaa33687769f437ab31452a24819d85b", "filename": "gcc/testsuite/gfortran.dg/array_reference_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_reference_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_reference_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_reference_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -20,7 +20,7 @@ subroutine PR31994\n     b=conjg (transpose (a))\r\n     c=transpose (a)\r\n     c=conjg (c)\r\n-    if (any (b .ne. c)) call abort ()\n+    if (any (b .ne. c)) STOP 1\n   end subroutine PR31994\n   subroutine PR31994_comment6\n     implicit none\r\n@@ -30,6 +30,6 @@ subroutine PR31994_comment6\n     b=int (transpose(a))\n     c = int (a)\n     c = transpose (c)\n-    if (any (b .ne. c)) call abort ()\n+    if (any (b .ne. c)) STOP 2\n   end subroutine PR31994_comment6\r\n END program main\r"}, {"sha": "5a35f28465acf39e1039ec0feb28cff21ac35fdc", "filename": "gcc/testsuite/gfortran.dg/array_return_value_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_return_value_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_return_value_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_return_value_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -10,9 +10,9 @@ PROGRAM Test\n     INTEGER :: Array(2, 3) = reshape ((/1,4,2,5,3,6/),(/2,3/))\n     integer :: Brray(2, 3) = 0\n     Brray(1,:) = Function_Test (Array(1,:))\n-    if (any(reshape (Brray, (/6/)) .ne. (/11, 0, 12, 0, 13, 0/))) call abort ()\n+    if (any(reshape (Brray, (/6/)) .ne. (/11, 0, 12, 0, 13, 0/))) STOP 1\n     Array(1,:) = Function_Test (Array(1,:))\n-    if (any(reshape (Array, (/6/)) .ne. (/11, 4, 12, 5, 13, 6/))) call abort ()\n+    if (any(reshape (Array, (/6/)) .ne. (/11, 4, 12, 5, 13, 6/))) STOP 2\n \n   contains\n       FUNCTION Function_Test (Input)"}, {"sha": "59f25412e705e25a995f2c1cf07585ea0af607da", "filename": "gcc/testsuite/gfortran.dg/array_section_1.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_section_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_section_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_section_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -13,23 +13,23 @@\n ! Check the lhs references\n     cnt = 0\n     a(bar(1):3) = b\n-    if (cnt /= 1) call abort ()\n+    if (cnt /= 1) STOP 1\n     cnt = 0\n     a(1:bar(3)) = b\n-    if (cnt /= 1) call abort ()\n+    if (cnt /= 1) STOP 2\n     cnt = 0\n     a(1:3:bar(1)) = b\n-    if (cnt /= 1) call abort ()\n+    if (cnt /= 1) STOP 3\n ! Check the rhs references\n     cnt = 0\n     a(1:3) = b(bar(1):3)\n-    if (cnt /= 1) call abort ()\n+    if (cnt /= 1) STOP 4\n     cnt = 0\n     a(1:3) = b(1:bar(3))\n-    if (cnt /= 1) call abort ()\n+    if (cnt /= 1) STOP 5\n     cnt = 0\n     a(1:3) = b(1:3:bar(1))\n-    if (cnt /= 1) call abort ()\n+    if (cnt /= 1) STOP 6\n contains\n     integer function bar(n)\n         integer, intent(in) :: n"}, {"sha": "e3bb560b6abb8b1ec2e579fd4e67b34cf8d8837e", "filename": "gcc/testsuite/gfortran.dg/array_temporaries_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_temporaries_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_temporaries_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_temporaries_3.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -25,5 +25,5 @@ end subroutine xmain\n end module bar\n   use bar\n   call xmain\n-  if (c(1) .ne. \"ab\") call abort\n+  if (c(1) .ne. \"ab\") STOP 1\n end"}, {"sha": "b5b583162ba5cb93acb8c5875c424e248c5b43bb", "filename": "gcc/testsuite/gfortran.dg/arrayio_1.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -12,21 +12,21 @@ program arrayio_1\n       write(r,'(3(2x,i4/)/3(3x,i6/))') i\n       i = 0\n       read(r,'(3(2x,i4/)/3(3x,i6/))') i\n-      if (any(i.ne.(/(j,j=1,6)/))) call abort()\n+      if (any(i.ne.(/(j,j=1,6)/))) STOP 1\n       do j=1,12\n          do k=1,2\n             if ((j.gt.8.and.k.eq.1).or.(k.eq.2)) then\n-              if (r(j,k).ne.'0123456789AB') call abort()\n+              if (r(j,k).ne.'0123456789AB') STOP 2\n             end if\n          end do\n       end do\n \n  ! Write to a portion of a character array      \n       r = '0123456789AB'\n       write(r(3:9,1),'(6(i12/))') i\n-      if (r(2,1).ne.'0123456789AB') call abort()\n+      if (r(2,1).ne.'0123456789AB') STOP 3\n       do j=3,8\n-        if (iachar(trim(adjustl(r(j,1))))-46.ne.j) call abort()\n+        if (iachar(trim(adjustl(r(j,1))))-46.ne.j) STOP 4\n       end do\n-      if (r(9,1).ne.'            ') call abort()\n+      if (r(9,1).ne.'            ') STOP 5\n       end program arrayio_1"}, {"sha": "22139a2cfabd9ab3466298604d43a06f07c2b28d", "filename": "gcc/testsuite/gfortran.dg/arrayio_10.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_10.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -6,7 +6,7 @@ program pr29563\n   character(len=4), dimension(3)::arraydata = (/'1123',' 456','789 '/)\n   real(kind=8), dimension(3) :: tmp\n   read(arraydata,*,iostat=iostat)tmp\n-  if (tmp(1).ne.1123.0) call abort()\n-  if (tmp(2).ne.456.0) call abort()\n-  if (tmp(3).ne.789.0) call abort()\n+  if (tmp(1).ne.1123.0) STOP 1\n+  if (tmp(2).ne.456.0) STOP 2\n+  if (tmp(3).ne.789.0) STOP 3\n end program pr29563\n\\ No newline at end of file"}, {"sha": "243d960f8a28b136673cc52acb4d48c01ba2b824", "filename": "gcc/testsuite/gfortran.dg/arrayio_11.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_11.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -22,11 +22,11 @@ program gfcbug51\n                 '200812231200'/)\n \n   call date_to_year (FILE)\n-  if (any (time%year .ne. (/2006, 2007, 2008/))) call abort ()\n+  if (any (time%year .ne. (/2006, 2007, 2008/))) STOP 1\n \n   call month_to_date ((/8, 9, 10/), FILE)\n   if ( any (file%date .ne. (/'200608231200', '200709231200', &\n-                             '200810231200'/))) call abort ()\n+                             '200810231200'/))) STOP 2\n \n contains\n "}, {"sha": "5f34c4d0f8d018becde09c58e7a1ae83967e756f", "filename": "gcc/testsuite/gfortran.dg/arrayio_12.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_12.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -19,11 +19,11 @@ program gfcbug51\n             '200812231200'/)\n \n   call date_to_year (cdate)\n-  if (any (time%year .ne. (/2006, 2007, 2008/))) call abort ()\n+  if (any (time%year .ne. (/2006, 2007, 2008/))) STOP 1\n \n   call month_to_date ((/8, 9, 10/), cdate)\n   if ( any (cdate .ne. (/'200608231200', '200709231200', &\n-                         '200810231200'/))) call abort ()\n+                         '200810231200'/))) STOP 2\n \n contains\n "}, {"sha": "aaa4d8fd8a4a815d4205e605e4d0e51569b9e367", "filename": "gcc/testsuite/gfortran.dg/arrayio_13.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_13.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -9,6 +9,6 @@ program readstrlist\n   ver(1) = '285 383'\n   ver(2) = '985'\n   read( ver, *) a, b, c\n-  if (a /= 285 .or. b /= 383 .or. c /= 985) call abort\n+  if (a /= 285 .or. b /= 383 .or. c /= 985) STOP 1\n   !write ( *, *) a, b, c\n end"}, {"sha": "441fcd4951be663f3244a249ddad2e8e6eba0280", "filename": "gcc/testsuite/gfortran.dg/arrayio_14.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_14.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -14,5 +14,5 @@ program read_internal\n \n   call init_data\n   read(source,*) (x(i), i=1,6)\n-  if (any(x/=[1,1,1,4,4,4])) call abort\n+  if (any(x/=[1,1,1,4,4,4])) STOP 1\n end program read_internal"}, {"sha": "21c66fdbe9bfa8371ad50235ddafee906dc1eb43", "filename": "gcc/testsuite/gfortran.dg/arrayio_16.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_16.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -9,5 +9,5 @@ program read_internal\n   source=[4_\"  1   1  -1\",4_\"  1  -1   1\",4_\" -1   1   1\"]\n   !print *, (trim(source(i)), i=1,3)\n   read(source,*) (x(i), i=1,9) ! This read fails for KIND=4 character\n-  if (any(x /= y )) call abort\n+  if (any(x /= y )) STOP 1\n end program read_internal"}, {"sha": "5c9f297be359c54a3cc560f68e5ac8691441ffcf", "filename": "gcc/testsuite/gfortran.dg/arrayio_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -23,6 +23,6 @@ program arrayio_2\n           r(1,2).ne.'HELLO !     ' .or. &\n           r(2,2).ne.'WORLD       ' .or. &\n           r(3,2).ne.'0123456789ab' .or. &\n-          r(4,2).ne.'0123456789ab') call abort()\n+          r(4,2).ne.'0123456789ab') STOP 1\n \n      end program arrayio_2 "}, {"sha": "25add0001cc826eb400fc10869da1e368f5af814", "filename": "gcc/testsuite/gfortran.dg/arrayio_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_3.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -12,5 +12,5 @@ program arrayio_3\n \n       i = (/(j,j=1,6)/)\n       write(r,'(3(2x,i4/)/3(4x,i9/))', iostat=ierr) i\n-      if (ierr.ne.-2) call abort()\n+      if (ierr.ne.-2) STOP 1\n       end program arrayio_3"}, {"sha": "b3261893293390d1d821c0b8a9aaaa07da210838", "filename": "gcc/testsuite/gfortran.dg/arrayio_4.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_4.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,15 +8,15 @@ program arrayio_4\n   character(12)  :: r(2,3,4) = '0123456789AB'\n    \n   write(r(::2,:,::1),'(i5)', iostat=ierr) 1,2,3,4,5\n-  if (ierr.ne.0) call abort()\n+  if (ierr.ne.0) STOP 1\n \n   write(r(:,:,::2),'(i5)', iostat=ierr) 1,2,3,4,5\n-  if (ierr.ne.0) call abort()\n+  if (ierr.ne.0) STOP 2\n \n   write(r(::1,::2,::1),'(i5)', iostat=ierr) 1,2,3,4,5\n-  if (ierr.ne.0) call abort()\n+  if (ierr.ne.0) STOP 3\n \n   write(r(::1,::1,::1),'(i5)', iostat=ierr) 1,2,3,4,5\n-  if (ierr.ne.0) call abort()\n+  if (ierr.ne.0) STOP 4\n end program arrayio_4\n "}, {"sha": "ef290c84b9328cc818b35c09c5509d9f884a97a8", "filename": "gcc/testsuite/gfortran.dg/arrayio_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,6 +8,6 @@ program arrayio_5\n   character(12)  :: r(10) = '0123456789AB'\n \n   write(r,'(i12)',iostat=ierr) 1,2,3,4,5,6,7,8,9,10,11\n-  if (ierr.ne.-1) call abort()\n+  if (ierr.ne.-1) STOP 1\n  end program arrayio_5\n "}, {"sha": "53128b75b539ae1091950d0fec37994b3f276131", "filename": "gcc/testsuite/gfortran.dg/arrayio_6.f90", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_6.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -11,21 +11,21 @@ program arrayio_6\n       i = (/(j,j=1,3)/)\n       write(r(1:4:2,2:4:1,3:4:2),'(3(2x,i4/)/3(3x,i6/))') i\n \n-      if (s(36).ne.'0123456789AB') call abort()\n-      if (s(37).ne.'     1      ') call abort()\n-      if (s(38).ne.'0123456789AB') call abort()\n-      if (s(39).ne.'     2      ') call abort()\n-      if (s(40).ne.'0123456789AB') call abort()\n-      if (s(41).ne.'     3      ') call abort()\n-      if (s(42).ne.'0123456789AB') call abort()\n-      if (s(43).ne.'            ') call abort()\n-      if (s(44).ne.'0123456789AB') call abort()\n-      if (s(45).ne.'            ') call abort()\n-      if (s(46).ne.'0123456789AB') call abort()\n+      if (s(36).ne.'0123456789AB') STOP 1\n+      if (s(37).ne.'     1      ') STOP 2\n+      if (s(38).ne.'0123456789AB') STOP 3\n+      if (s(39).ne.'     2      ') STOP 4\n+      if (s(40).ne.'0123456789AB') STOP 5\n+      if (s(41).ne.'     3      ') STOP 6\n+      if (s(42).ne.'0123456789AB') STOP 7\n+      if (s(43).ne.'            ') STOP 8\n+      if (s(44).ne.'0123456789AB') STOP 9\n+      if (s(45).ne.'            ') STOP 10\n+      if (s(46).ne.'0123456789AB') STOP 11\n  \n       k = i\n       i = 0\n       read(r(1:4:2,2:4:1,3:4:2),'(3(2x,i4/)/3(3x,i6/))') i\n-      if (any(i.ne.k)) call abort()\n+      if (any(i.ne.k)) STOP 12\n       \n       end program arrayio_6"}, {"sha": "f1d200c013c8b91a4ad1aa3dec7ec20d0601ec9e", "filename": "gcc/testsuite/gfortran.dg/arrayio_7.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_7.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -11,5 +11,5 @@ program arrayio_7\n   character*8 :: a\n   equivalence (buf,abuf)\n   read(buf(2, 1:3:2), '(a8)') a\n-  if (a.ne.\"4567\") call abort()\n+  if (a.ne.\"4567\") STOP 1\n end program arrayio_7"}, {"sha": "c2fcbbf6995a606cae0b769c6b84081c8e243bec", "filename": "gcc/testsuite/gfortran.dg/arrayio_8.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_8.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -9,9 +9,9 @@ program main\n       character*8      rec(3)\n       rec = \"\"\n       write (rec,fmt=99999)\n-      if (rec(1).ne.'12345678') call abort()\n-      if (rec(2).ne.'record2') call abort()\n-      if (rec(3).ne.'record3') call abort()\n+      if (rec(1).ne.'12345678') STOP 1\n+      if (rec(2).ne.'record2') STOP 2\n+      if (rec(3).ne.'record3') STOP 3\n 99999 format ('12345678',/'record2',/'record3')\n       end\n "}, {"sha": "3e1fcbaf395e2c53e6e9a16b62201ea537b0b9bd", "filename": "gcc/testsuite/gfortran.dg/arrayio_9.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_9.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -7,5 +7,5 @@ program pr29563\n   real(kind=8), dimension(3,3) :: tmp\n   tmp = 0.0\n   read(arraydata,*,iostat=iostat)((tmp(i,j),j=1,3),i=1,3)\n-  if (tmp(3,3)-9.0.gt.0.0000001) call abort()\n+  if (tmp(3,3)-9.0.gt.0.0000001) STOP 1\n end program pr29563\n\\ No newline at end of file"}, {"sha": "2192a96255d8f3823d7c8e789bbbe0a0c4c02dc6", "filename": "gcc/testsuite/gfortran.dg/arrayio_derived_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_derived_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_derived_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farrayio_derived_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -17,7 +17,7 @@ program arrayio_derived_1\n   read(a, *) b\n   do i = 1, 5\n      if (b(i) /= 256) then\n-        call abort ()\n+        STOP 1\n      end if\n   end do\n   write(a, *) x ! Just test that the library doesn't abort.\n@@ -26,7 +26,7 @@ program arrayio_derived_1\n   read(a, *) b\n   do i = 1, 5\n      if (b(i) /= 256) then\n-        call abort ()\n+        STOP 2\n      end if\n   end do\n "}, {"sha": "42f66e5b5337dcf6ec83a88a03942a3d47a84aad", "filename": "gcc/testsuite/gfortran.dg/assign_10.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_10.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -15,8 +15,8 @@\n   q4(q4) = (/(i, i = 1, 4)/)\n   p8(q8) = (/(i, i = 1, 4)/)\n   q8(q8) = (/(i, i = 1, 4)/)\n-  if (any(p4 .ne. q4)) call abort ()\n-  if (any(p8 .ne. q8)) call abort ()\n+  if (any(p4 .ne. q4)) STOP 1\n+  if (any(p8 .ne. q8)) STOP 2\n end\n ! Whichever is the default length for array indices will yield\n ! parm 18 times, because a temporary is not necessary.  The other"}, {"sha": "05e85b5b3b216c3922b0e98cd37b899fe285e355", "filename": "gcc/testsuite/gfortran.dg/assign_9.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_9.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -9,6 +9,6 @@\n   integer(8) :: q(4) = (/2,4,1,3/)\n   p(p) = (/(i, i = 1, 4)/)\n   q(q) = (/(i, i = 1, 4)/)\n-  if (any(p .ne. q)) call abort ()\n+  if (any(p .ne. q)) STOP 1\n end\n "}, {"sha": "ee9fd79e61ee9f37c95c42b632f4df4a354f78e7", "filename": "gcc/testsuite/gfortran.dg/assign_func_dtcomp_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_func_dtcomp_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_func_dtcomp_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_func_dtcomp_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -26,13 +26,13 @@ program assign_func_dtcomp\n  z(:)%y = foo (b)\n \n \n- if (any(z%x.ne.a).or.any(z%y.ne.b)) call abort ()\n+ if (any(z%x.ne.a).or.any(z%y.ne.b)) STOP 1\n \n ! Make sure we did not break anything on the way.\n  w%x(:) = foo (b)\n  a = foo (b)\n \n- if (any(w%x.ne.b).or.any(a.ne.b)) call abort ()\n+ if (any(w%x.ne.b).or.any(a.ne.b)) STOP 2\n \n contains\n "}, {"sha": "067b701ce4e0544fb67f88107ab4e9f506f5ed23", "filename": "gcc/testsuite/gfortran.dg/assignment_1.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassignment_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassignment_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassignment_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -14,15 +14,15 @@\n ! We didn't dereference the pointer in the following line.\n p = f() ! { dg-warning \"POINTER-valued function\" }\n p = p+1\n-if (p.ne.2) call abort()\n-if (p.ne.s) call abort()\n+if (p.ne.2) STOP 1\n+if (p.ne.s) STOP 2\n \n !!$! verify that we also dereference correctly the result of a function \n !!$! which returns its result by reference\n !!$c = \"Hallo\"\n !!$d => e\n !!$d = g() !  dg-warning \"POINTER valued function\" \"\" \n-!!$if (d.ne.\"Hallo\") call abort()\n+!!$if (d.ne.\"Hallo\") STOP 3\n \n contains\n function f()"}, {"sha": "f9a27e043f4abfe2a5b2dc0bd2ddd7e3dd840f0f", "filename": "gcc/testsuite/gfortran.dg/associate_1.f03", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_1.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run }\n-! { dg-options \"-std=f2003 -fall-intrinsics -cpp\" }\n+! { dg-options \"-std=f2003  -cpp\" }\n \n ! PR fortran/38936\n ! Check the basic semantics of the ASSOCIATE construct.\n@@ -23,65 +23,65 @@ PROGRAM main\n   ! Simple association to expressions.\n   ASSOCIATE (r => SQRT (a**2 + b**2 + c**2), t => a + b)\n     PRINT *, t, a, b\n-    IF (ABS (r - SQRT (4.0 + 9.0 + 16.0)) > 1.0e-3) CALL abort ()\n-    IF (ABS (t - a - b) > 1.0e-3) CALL abort ()\n+    IF (ABS (r - SQRT (4.0 + 9.0 + 16.0)) > 1.0e-3) STOP 1\n+    IF (ABS (t - a - b) > 1.0e-3) STOP 2\n   END ASSOCIATE\n \n   ! Test association to arrays.\n   ALLOCATE (arr(3))\n   arr = (/ 1, 2, 3 /)\n   ASSOCIATE (doubled => 2 * arr, xyz => func ())\n-    IF (SIZE (doubled) /= SIZE (arr)) CALL abort ()\n+    IF (SIZE (doubled) /= SIZE (arr)) STOP 3\n     IF (doubled(1) /= 2 .OR. doubled(2) /= 4 .OR. doubled(3) /= 6) &\n-      CALL abort ()\n+      STOP 4\n \n-    IF (ANY (xyz /= (/ 1, 3, 5 /))) CALL abort ()\n+    IF (ANY (xyz /= (/ 1, 3, 5 /))) STOP 5\n   END ASSOCIATE\n \n   ! Target is vector-indexed.\n   ASSOCIATE (foo => arr((/ 3, 1 /)))\n-    IF (LBOUND (foo, 1) /= 1 .OR. UBOUND (foo, 1) /= 2) CALL abort ()\n-    IF (foo(1) /= 3 .OR. foo(2) /= 1) CALL abort ()\n+    IF (LBOUND (foo, 1) /= 1 .OR. UBOUND (foo, 1) /= 2) STOP 6\n+    IF (foo(1) /= 3 .OR. foo(2) /= 1) STOP 7\n   END ASSOCIATE\n \n   ! Named and nested associate.\n   myname: ASSOCIATE (x => a - b * c)\n     ASSOCIATE (y => 2.0 * x)\n-      IF (ABS (y - 2.0 * (a - b * c)) > 1.0e-3) CALL abort ()\n+      IF (ABS (y - 2.0 * (a - b * c)) > 1.0e-3) STOP 8\n     END ASSOCIATE\n   END ASSOCIATE myname ! Matching end-label.\n \n   ! Correct behavior when shadowing already existing names.\n   ASSOCIATE (a => 1 * b, b => 1 * a, x => 1, y => 2)\n-    IF (ABS (a - 3.0) > 1.0e-3 .OR. ABS (b + 2.0) > 1.0e-3) CALL abort ()\n+    IF (ABS (a - 3.0) > 1.0e-3 .OR. ABS (b + 2.0) > 1.0e-3) STOP 9\n     ASSOCIATE (x => 1 * y, y => 1 * x)\n-      IF (x /= 2 .OR. y /= 1) CALL abort ()\n+      IF (x /= 2 .OR. y /= 1) STOP 10\n     END ASSOCIATE\n   END ASSOCIATE\n \n   ! Association to variables.\n   mat = 0\n   mat(2, 2) = 5;\n   ASSOCIATE (x => arr(2), y => mat(2:3, 1:2))\n-    IF (x /= 2) CALL abort ()\n+    IF (x /= 2) STOP 11\n     IF (ANY (LBOUND (y) /= (/ 1, 1 /) .OR. UBOUND (y) /= (/ 2, 2 /))) &\n-      CALL abort ()\n-    IF (y(1, 2) /= 5) CALL abort ()\n+      STOP 12\n+    IF (y(1, 2) /= 5) STOP 13\n \n     x = 7\n     y = 8\n   END ASSOCIATE\n-  IF (arr(2) /= 7 .OR. ANY (mat(2:3, 1:2) /= 8)) CALL abort ()\n+  IF (arr(2) /= 7 .OR. ANY (mat(2:3, 1:2) /= 8)) STOP 14\n \n   ! Association to derived type and component.\n   tp = myt (1)\n   ASSOCIATE (x => tp, y => tp%comp)\n-    IF (x%comp /= 1) CALL abort ()\n-    IF (y /= 1) CALL abort ()\n+    IF (x%comp /= 1) STOP 15\n+    IF (y /= 1) STOP 16\n     y = 5\n-    IF (x%comp /= 5) CALL abort ()\n+    IF (x%comp /= 5) STOP 17\n   END ASSOCIATE\n-  IF (tp%comp /= 5) CALL abort ()\n+  IF (tp%comp /= 5) STOP 18\n \n   ! Association to character variables.\n   CALL test_char (5)\n@@ -101,11 +101,11 @@ SUBROUTINE test_char (n)\n \n     str = \"foobar\"\n     ASSOCIATE (my => str)\n-      IF (LEN (my) /= n) CALL abort ()\n-      IF (my /= \"fooba\") CALL abort ()\n+      IF (LEN (my) /= n) STOP 19\n+      IF (my /= \"fooba\") STOP 20\n       my = \"abcdef\"\n     END ASSOCIATE\n-    IF (str /= \"abcde\") CALL abort ()\n+    IF (str /= \"abcde\") STOP 21\n   END SUBROUTINE test_char\n \n END PROGRAM main"}, {"sha": "3f2c7d80ca0b5bc6f0f40e4c6387ad2ecac7df75", "filename": "gcc/testsuite/gfortran.dg/associate_11.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_11.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -13,7 +13,7 @@ program bug\n     call foo(a)\n   end associate\n ! write(*,*) i\n-  if (i(1) /= 2) call abort\n+  if (i(1) /= 2) STOP 1\n contains\n   subroutine foo(v)\n     integer, dimension(*) :: v"}, {"sha": "bd89264842c6ac4136791ace6fe4761fdbc11886", "filename": "gcc/testsuite/gfortran.dg/associate_13.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_13.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -17,5 +17,5 @@\n   associate (template => initial(1)%variant_def)\n     template%i = 77\n   end associate\n-  if (initial(1)%variant_def%i .ne. 77) call abort\n+  if (initial(1)%variant_def%i .ne. 77) STOP 1\n end"}, {"sha": "cadc9e7ce98431ad7d67280ead7a71c7a41399e3", "filename": "gcc/testsuite/gfortran.dg/associate_15.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_15.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -20,21 +20,21 @@ function bar (arg) result (res)\n     b = x(2)\n     write (line1, *) a, b\n     write (line2, *) x\n-    if (trim (line1) .ne. trim (line2)) call abort\n+    if (trim (line1) .ne. trim (line2)) STOP 1\n   end associate\n   associate (x=>[1,2])\n     a = x(1)\n     b = x(2)\n     write (line1, *) a, b\n     write (line2, *) x\n-    if (trim (line1) .ne. trim (line2)) call abort\n+    if (trim (line1) .ne. trim (line2)) STOP 2\n   end associate\n   associate (x=>bar(5)) ! make sure that we haven't broken function association\n     a = x(1)\n     b = x(2)\n     c = x(3)\n     write (line1, *) a, b, c\n     write (line2, *) x\n-    if (trim (line1) .ne. trim (line2)) call abort\n+    if (trim (line1) .ne. trim (line2)) STOP 3\n   end associate\n end"}, {"sha": "b25bcc265d6c5dd0a5fb22e4f3732dae7cf85fff", "filename": "gcc/testsuite/gfortran.dg/associate_17.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_17.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -6,7 +6,7 @@ program test\n   real :: theta = 1.0\n \n   associate (n => [cos(theta), sin(theta)])\n-    if (abs (norm2(n) - 1.0) .gt. 1.0e-4) call abort\n+    if (abs (norm2(n) - 1.0) .gt. 1.0e-4) STOP 1\n   end associate\n \n end program test"}, {"sha": "37f1d242761450233774dff5367d328b4ec211b8", "filename": "gcc/testsuite/gfortran.dg/associate_18.f08", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_18.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_18.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_18.f08?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -25,36 +25,36 @@ program associate_18\n   associate(i => av(1))\n     i%map = 2\n   end associate\n-  if (any (av%map /= [2,1])) call abort()\n+  if (any (av%map /= [2,1])) STOP 1\n   deallocate(av)\n \n   allocate(am(3,4))\n   associate(pam => am(2:3, 2:3))\n     pam%map = 7\n     pam(1,2)%map = 8\n   end associate\n-  if (any (reshape(am%map, [12]) /= [1,1,1, 1,7,7, 1,8,7, 1,1,1])) call abort()\n+  if (any (reshape(am%map, [12]) /= [1,1,1, 1,7,7, 1,8,7, 1,1,1])) STOP 2\n   deallocate(am)\n \n   allocate(pv(2))\n   associate(i => pv(1))\n     i%map = 2\n   end associate\n-  if (any (pv%map /= [2,1])) call abort()\n+  if (any (pv%map /= [2,1])) STOP 3\n   deallocate(pv)\n \n   allocate(pm(3,4))\n   associate(ppm => pm(2:3, 2:3))\n     ppm%map = 7\n     ppm(1,2)%map = 8\n   end associate\n-  if (any (reshape(pm%map, [12]) /= [1,1,1, 1,7,7, 1,8,7, 1,1,1])) call abort()\n+  if (any (reshape(pm%map, [12]) /= [1,1,1, 1,7,7, 1,8,7, 1,1,1])) STOP 4\n   deallocate(pm)\n \n   associate(i => iv(1))\n     i = 7\n   end associate\n-  if (any (iv /= [7, 17, 17, 17, 17])) call abort()\n+  if (any (iv /= [7, 17, 17, 17, 17])) STOP 5\n \n   associate(pam => im(2:3, 2:3))\n     pam = 9\n@@ -64,15 +64,15 @@ program associate_18\n     end do\n   end associate\n   if (any (reshape(im, [20]) /= [23,23,23,23, 23,9,0,23, &\n-        23,10,0,23, 23,23,23,23, 23,23,23,23])) call abort()\n+        23,10,0,23, 23,23,23,23, 23,23,23,23])) STOP 6\n \n   expect(2:3) = 9\n   do c = 1, 5\n     im = 23\n     associate(pam => im(:, c))\n       pam(2:3) = 9\n     end associate\n-    if (any (reshape(im, [20]) /= expect)) call abort()\n+    if (any (reshape(im, [20]) /= expect)) STOP 7\n     ! Shift expect\n     expect = [expect(17:), expect(:16)]\n   end do"}, {"sha": "e85873f775ed39c3747ff7a42458f6b7df1d0f10", "filename": "gcc/testsuite/gfortran.dg/associate_19.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_19.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_19.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_19.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -16,8 +16,8 @@ program p\n   i(:,2) = (/ 4 , 5 , 6 /)\n \n   associate( ai => a(:,i(:,1)) )\n-    if (any(shape(ai) /= [2, 3])) call abort()\n-    if (any(reshape(ai, [6]) /= [1 , -10, 3, -30, 5, -50])) call abort()\n+    if (any(shape(ai) /= [2, 3])) STOP 1\n+    if (any(reshape(ai, [6]) /= [1 , -10, 3, -30, 5, -50])) STOP 2\n   end associate\n \n end program p"}, {"sha": "884931155f72cd0ce476ef736e84a5b31fd32d4b", "filename": "gcc/testsuite/gfortran.dg/associate_20.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_20.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_20.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_20.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -23,8 +23,8 @@ program p\n   i(:,2) = (/ 4 , 5 , 6 /)\n \n   associate( ai => a(:,i(:,1))%i )\n-    if (any(shape(ai) /= [2, 3])) call abort()\n-    if (any(reshape(ai, [6]) /= [1 , -10, 3, -30, 5, -50])) call abort()\n+    if (any(shape(ai) /= [2, 3])) STOP 1\n+    if (any(reshape(ai, [6]) /= [1 , -10, 3, -30, 5, -50])) STOP 2\n   end associate\n \n   deallocate(a)"}, {"sha": "2e2fb58cdba3dc3e5a3532fc7e61225f16885151", "filename": "gcc/testsuite/gfortran.dg/associate_22.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_22.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -9,30 +9,30 @@ program foo\n    ! This works.\n    s = 'abc'\n    associate(t => s)\n-      if (trim(t) /= 'abc') call abort\n+      if (trim(t) /= 'abc') STOP 1\n    end associate\n \n    ! This failed.\n    associate(u => 'abc')\n-      if (trim(u) /= 'abc') call abort\n+      if (trim(u) /= 'abc') STOP 2\n    end associate\n \n    ! This failed.\n    a = s // 'abc'\n    associate(v => s // 'abc')\n-      if (trim(v) /= trim(a)) call abort\n+      if (trim(v) /= trim(a)) STOP 3\n    end associate\n \n    ! This failed.\n    ! This still doesn't work correctly, see PR 83344\n !   a = trim(s) // 'abc'\n !   associate(w => trim(s) // 'abc')\n-!      if (trim(w) /= trim(a)) call abort\n+!      if (trim(w) /= trim(a)) STOP 4\n !   end associate\n \n    ! This failed.\n    associate(x => trim('abc'))\n-      if (trim(x) /= 'abc') call abort\n+      if (trim(x) /= 'abc') STOP 5\n    end associate\n \n end program foo"}, {"sha": "7bbf2eddf5cd88eeb6365be279df8bfa9f93a43a", "filename": "gcc/testsuite/gfortran.dg/associate_23.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_23.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -15,22 +15,22 @@ program test_this\n     write (buffer, *) should_work(5:14)\n   END ASSOCIATE\n \n-  if (trim (buffer) .ne. \"  succesful\") call abort\n+  if (trim (buffer) .ne. \"  succesful\") STOP 1\n \n ! Found to be failing during debugging\n   ASSOCIATE(should_work=>char_var_dim)\n     should_work = [\"test SUCCESFUL\", \"test_SUCCESFUL\", \"test.SUCCESFUL\"]\n     write (buffer, *) should_work(:)(5:14)\n   END ASSOCIATE\n \n-  if (trim (buffer) .ne. \"  SUCCESFUL_SUCCESFUL.SUCCESFUL\") call abort\n+  if (trim (buffer) .ne. \"  SUCCESFUL_SUCCESFUL.SUCCESFUL\") STOP 2\n \n ! Found to be failing during debugging\n   ASSOCIATE(should_work=>char_var_dim(1:2))\n     should_work = [\"test SUCCESFUL\", \"test_SUCCESFUL\"]\n     write (buffer, *) should_work(:)(5:14)\n   END ASSOCIATE\n \n-  if (trim (buffer) .ne. \"  SUCCESFUL_SUCCESFUL\") call abort\n+  if (trim (buffer) .ne. \"  SUCCESFUL_SUCCESFUL\") STOP 3\n \n end program"}, {"sha": "68334c899a66b093615dc5569cd46c8f5010039a", "filename": "gcc/testsuite/gfortran.dg/associate_24.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_24.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_24.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_24.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -27,7 +27,7 @@ PROGRAM X\n contains\n     subroutine check (lbnd, ubnd, lower, upper)\n       integer :: lbnd, ubnd, lower, upper\n-      if (lbnd .ne. lower) call abort\n-      if (ubnd .ne. upper) call abort\n+      if (lbnd .ne. lower) STOP 1\n+      if (ubnd .ne. upper) STOP 2\n     end subroutine\n END PROGRAM X"}, {"sha": "d31373002829740c4b8fef5bafbc69dc30ad936c", "filename": "gcc/testsuite/gfortran.dg/associate_25.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_25.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_25.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_25.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -23,7 +23,7 @@ subroutine Testf()\n     end associate\n ! This should now be 4 but the finalization is not happening.\n ! TODO put it right!\n-    if (final_flag .ne. 2) call abort\n+    if (final_flag .ne. 2) STOP 1\n   end subroutine Testf\n end module\n "}, {"sha": "b677438d688f6a4951d009738099c8270fa7a11d", "filename": "gcc/testsuite/gfortran.dg/associate_27.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_27.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_27.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_27.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -16,8 +16,8 @@ program p\n  x%text(2) = \"defgh\"\n \n  associate( c => x%text )\n-   if (c(1)(:maxval(len_trim(c))) .ne. trim (x%text(1))) call abort\n-   if (c(2)(:maxval(len_trim(c))) .ne. trim (x%text(2))) call abort\n+   if (c(1)(:maxval(len_trim(c))) .ne. trim (x%text(1))) STOP 1\n+   if (c(2)(:maxval(len_trim(c))) .ne. trim (x%text(2))) STOP 2\n  end associate\n \n end program p"}, {"sha": "d2279a037f8d88aaa8ed3806b1b93543cb7bf3b7", "filename": "gcc/testsuite/gfortran.dg/associate_28.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_28.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_28.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_28.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -44,7 +44,7 @@ End Module TestMod_C\n         End Do\n       end associate\n     End block outer\n-    if (sum_a .ne. 30) call abort\n+    if (sum_a .ne. 30) STOP 1\n   End Procedure\n End Submodule SetPt\n Program Test"}, {"sha": "9d771e81eb0b54cc87eb8691351787193aadda69", "filename": "gcc/testsuite/gfortran.dg/associate_32.f03", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_32.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_32.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_32.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -18,46 +18,46 @@ program test\n \n    s = 'ab'\n    associate(ss => s)\n-     if (ss .ne. 'ab') call abort ! This is the original bug.\n+     if (ss .ne. 'ab') STOP 1! This is the original bug.\n      ss = 'c'\n    end associate\n-   if (s .ne. 'c ') call abort ! No reallocation within ASSOCIATE block!\n+   if (s .ne. 'c ') STOP 2! No reallocation within ASSOCIATE block!\n \n    sf = 'c'\n    associate(ss => sf)\n-     if (ss .ne. 'c ') call abort ! This the bug in comment #2 of the PR.\n+     if (ss .ne. 'c ') STOP 3! This the bug in comment #2 of the PR.\n      ss = 'cd'\n    end associate\n \n    sd = [s, sf]\n    associate(ss => sd)\n-     if (any (ss .ne. ['c ','cd'])) call abort\n+     if (any (ss .ne. ['c ','cd'])) STOP 4\n    end associate\n \n    sfd = [sd,'ef']\n    associate(ss => sfd)\n-     if (any (ss .ne. ['c ','cd','ef'])) call abort\n+     if (any (ss .ne. ['c ','cd','ef'])) STOP 5\n      ss = ['gh']\n    end associate\n-     if (any (sfd .ne. ['gh','cd','ef'])) call abort ! No reallocation!\n+     if (any (sfd .ne. ['gh','cd','ef'])) STOP 6! No reallocation!\n \n    string%str = 'xyz'\n    associate(ss => string%str)\n-     if (ss .ne. 'xyz') call abort\n+     if (ss .ne. 'xyz') STOP 7\n      ss = 'c'\n    end associate\n-   if (string%str .ne. 'c  ') call abort ! No reallocation!\n+   if (string%str .ne. 'c  ') STOP 8! No reallocation!\n \n    str = \"foobar\"\n    call test_char (5 , str)\n-   IF (str /= \"abcder\") call abort\n+   IF (str /= \"abcder\") STOP 9\n \n    associate(ss => foo())\n-     if (ss .ne. 'pqrst') call abort\n+     if (ss .ne. 'pqrst') STOP 10\n    end associate\n \n    associate(ss => bar())\n-     if (ss(2) .ne. 'uvwxy') call abort\n+     if (ss(2) .ne. 'uvwxy') STOP 11\n    end associate\n \n ! The deallocation is not strictly necessary but it does allow\n@@ -73,11 +73,11 @@ SUBROUTINE test_char (n, str)\n     CHARACTER(LEN=n) :: str\n \n     ASSOCIATE (my => str)\n-      IF (LEN (my) /= n) call abort\n-      IF (my /= \"fooba\") call abort\n+      IF (LEN (my) /= n) STOP 12\n+      IF (my /= \"fooba\") STOP 13\n       my = \"abcde\"\n     END ASSOCIATE\n-    IF (str /= \"abcde\") call abort\n+    IF (str /= \"abcde\") STOP 14\n   END SUBROUTINE test_char\n \n    function foo() result(res)"}, {"sha": "a4fcfd6f2a1a571125b61593ba8cfeb5f50f182b", "filename": "gcc/testsuite/gfortran.dg/associate_33.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_33.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_33.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_33.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -6,6 +6,6 @@\n !\n program p\n    associate (x => ['1','2'])\n-      if (any (x .ne. ['1','2'])) call abort\n+      if (any (x .ne. ['1','2'])) STOP 1\n    end associate\n end"}, {"sha": "925dee9ff741dc98968d0474a8f71c748e628ddd", "filename": "gcc/testsuite/gfortran.dg/associate_34.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_34.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_34.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_34.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -15,7 +15,7 @@ subroutine s(x, carg)\n     character(:), allocatable :: x\n     character(*) :: carg\n     associate (y => x)\n-      if (y .ne. carg) call abort\n+      if (y .ne. carg) STOP 1\n     end associate\n   end\n end"}, {"sha": "8f864364b6e2f80f04e160fb164d98b551e62022", "filename": "gcc/testsuite/gfortran.dg/associate_6.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_6.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -30,8 +30,8 @@ PROGRAM main\n   ASSOCIATE (arr => func (4))\n     ! func should only be called once here, not again for the bounds!\n \n-    IF (LBOUND (arr, 1) /= 1 .OR. UBOUND (arr, 1) /= 4) CALL abort ()\n-    IF (arr(1) /= 1 .OR. arr(4) /= 4) CALL abort ()\n+    IF (LBOUND (arr, 1) /= 1 .OR. UBOUND (arr, 1) /= 4) STOP 1\n+    IF (arr(1) /= 1 .OR. arr(4) /= 4) STOP 2\n   END ASSOCIATE\n END PROGRAM main\n ! { dg-final { scan-tree-dump-times \"func\" 2 \"original\" } }"}, {"sha": "cd37259443eb222119cf754ba16c45a40c47e30e", "filename": "gcc/testsuite/gfortran.dg/associate_7.f03", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_7.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_7.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_7.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run }\n-! { dg-options \"-std=f2003 -fall-intrinsics\" }\n+! { dg-options \"-std=f2003 \" }\n \n ! PR fortran/38936\n ! Check association and pointers.\n@@ -14,8 +14,8 @@ PROGRAM main\n   tgt = 1\n   ASSOCIATE (x => tgt)\n     ptr => x\n-    IF (ptr /= 1) CALL abort ()\n+    IF (ptr /= 1) STOP 1\n     ptr = 2\n   END ASSOCIATE\n-  IF (tgt /= 2) CALL abort ()\n+  IF (tgt /= 2) STOP 2\n END PROGRAM main"}, {"sha": "f6c286f30fd2db89e29cef9784aadb78c7a73b99", "filename": "gcc/testsuite/gfortran.dg/associate_8.f03", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_8.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_8.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_8.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run }\n-! { dg-options \"-std=f2003 -fall-intrinsics\" }\n+! { dg-options \"-std=f2003 \" }\n \n ! PR fortran/38936\n ! Check associate to polymorphic entities.\n@@ -19,19 +19,19 @@\n associate ( one => a, two => b)\n   select type(two)\n     type is (t)\n-      call abort ()\n+      STOP 1\n     type is (t2)\n       print *, 'OK', two\n     class default\n-      call abort ()\n+      STOP 2\n   end select\n   select type(one)\n     type is (t2)\n-      call abort ()\n+      STOP 3\n     type is (t)\n       print *, 'OK', one\n     class default\n-      call abort ()\n+      STOP 4\n   end select\n end associate\n end"}, {"sha": "f5f4fe2a8ad4c898be689b2822c3f0957647000d", "filename": "gcc/testsuite/gfortran.dg/associate_9.f03", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_9.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_9.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_9.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run }\n-! { dg-options \"-std=f2003 -fall-intrinsics\" }\n+! { dg-options \"-std=f2003 \" }\n \n \n ! PR fortran/38936\n@@ -38,10 +38,10 @@ PROGRAM main\n   a = mynum (5)\n \n   ASSOCIATE (x => add (a, a))\n-    IF (x%comp /= 10) CALL abort ()\n+    IF (x%comp /= 10) STOP 1\n   END ASSOCIATE\n \n   ASSOCIATE (x => a + a)\n-    IF (x%comp /= 10) CALL abort ()\n+    IF (x%comp /= 10) STOP 2\n   END ASSOCIATE\n END PROGRAM main"}, {"sha": "6fe3f05907555a40c234cd30637b2fd26025d372", "filename": "gcc/testsuite/gfortran.dg/associated_1.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -5,16 +5,16 @@ program test\n    real, pointer :: a, b\n \n    nullify(a,b)\n-   if(associated(a,b).or.associated(a,a)) call abort()\n+   if(associated(a,b).or.associated(a,a)) STOP 1\n    allocate(a)\n-   if(associated(b,a)) call abort()\n-   if (.not.associated(x(a))) call abort ()\n-   if (.not.associated(a, x(a))) call abort ()\n+   if(associated(b,a)) STOP 2\n+   if (.not.associated(x(a))) STOP 3\n+   if (.not.associated(a, x(a))) STOP 4\n \n    nullify(b)\n-   if (associated(x(b))) call abort ()\n+   if (associated(x(b))) STOP 5\n    allocate(b)\n-   if (associated(x(b), x(a))) call abort ()\n+   if (associated(x(b), x(a))) STOP 6\n \n contains\n "}, {"sha": "3089c7b514f6364aad4cef0ca2a936f8f132268b", "filename": "gcc/testsuite/gfortran.dg/associated_2.f90", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -15,25 +15,25 @@ subroutine test1 ()\n     b => a\n ! Even though b is zero length, associated returns true because\n ! the target argument is not present (case (i))\n-    if (.not. associated (b)) call abort ()\n+    if (.not. associated (b)) STOP 1\n     deallocate (a)\n     nullify(a)\n-    if(associated(a,a)) call abort()\n+    if(associated(a,a)) STOP 2\n     allocate (a(2,1,2))\n     b => a\n-    if (.not.associated (b)) call abort ()\n+    if (.not.associated (b)) STOP 3\n     deallocate (a)\n   end subroutine test1\n   subroutine test2 ()\n     integer, pointer, dimension(:, :, :)  :: a, b\n     allocate (a(2,0,2))\n     b => a\n ! Associated returns false because target is present (case(iii)).\n-    if (associated (b, a)) call abort ()\n+    if (associated (b, a)) STOP 4\n     deallocate (a)\n     allocate (a(2,1,2))\n     b => a\n-    if (.not.associated (b, a)) call abort ()\n+    if (.not.associated (b, a)) STOP 5\n     deallocate (a)\n   end subroutine test2\n   subroutine test3 (n)\n@@ -43,9 +43,9 @@ subroutine test3 (n)\n     b => a\n ! Again, with zero character length associated returns false\n ! if target is present.\n-    if (associated (b, a) .and. (n .eq. 0)) call abort ()\n+    if (associated (b, a) .and. (n .eq. 0)) STOP 6\n !\n-    if ((.not.associated (b, a))  .and. (n .ne. 0)) call abort ()\n+    if ((.not.associated (b, a))  .and. (n .ne. 0)) STOP 7\n     deallocate (a)\n   end subroutine test3\n end"}, {"sha": "d70e5f5a18e2fcb868998e3673cfc4eea433c5af", "filename": "gcc/testsuite/gfortran.dg/associated_5.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -13,7 +13,7 @@ SUBROUTINE MF1053 (nf1, nf2, nf3, nf4)\n \n       ptr => ILA1\n \n-      if (ASSOCIATED (ptr, ILA1(NF1:NF2,NF4:NF3) ) ) call abort\n-      if ( .not. ASSOCIATED(ptr) )  call abort\n+      if (ASSOCIATED (ptr, ILA1(NF1:NF2,NF4:NF3) ) ) STOP 1\n+      if ( .not. ASSOCIATED(ptr) )  STOP 2\n \n       END SUBROUTINE"}, {"sha": "08bdf6cb3d492299b3798e707e4f39dc451ab6cf", "filename": "gcc/testsuite/gfortran.dg/associated_6.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_6.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -12,9 +12,9 @@\n \r\n   type(treeNode) :: n\r\n \r\n-  if (associated(RightOf(n))) call abort()\r\n+  if (associated(RightOf(n))) STOP 1\r\n   allocate(n%right)\r\n-  if (.not.associated(RightOf(n))) call abort()\r\n+  if (.not.associated(RightOf(n))) STOP 2\r\n   deallocate(n%right)\r\n   \r\n contains\r"}, {"sha": "300c73410edeb980c0758b82af1fa864148b337d", "filename": "gcc/testsuite/gfortran.dg/associated_target_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_3.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -20,14 +20,14 @@ end module m\n implicit none\n type(t2), pointer :: a\n allocate(a)\n-if (.not. associated(a,f(a))) call abort()\n+if (.not. associated(a,f(a))) STOP 1\n call cmpPtr(a,f2(a))\n call cmpPtr(a,f(a))\n deallocate(a)\n contains\n   subroutine cmpPtr(a,b)\n     type(t2), pointer :: a,b\n !    print *, associated(a,b)\n-    if (.not. associated (a, b)) call abort()\n+    if (.not. associated (a, b)) STOP 2\n   end subroutine cmpPtr\n end"}, {"sha": "4596f337f773d82093b7934c0a08f300e20cf909", "filename": "gcc/testsuite/gfortran.dg/associated_target_4.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_4.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -19,5 +19,5 @@ program rte1\n   root%child%id=2\n   print *,root%child%id,\" is child of \",root%id,\":\"\n   print *,root%child%parent%id,root%id\n-  if (.not. associated(root%child%parent,root)) call abort()\n+  if (.not. associated(root%child%parent,root)) STOP 1\n end program rte1"}, {"sha": "b7125967ee1322105e0790f3e7327532dac546a6", "filename": "gcc/testsuite/gfortran.dg/associated_target_5.f03", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_5.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_5.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_5.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -15,22 +15,22 @@ program test_associate\n   associate (a => t%a)\n ! Test 'a' is OK on lhs and/or rhs of assignments\n     c = a - 1\n-    if (any (c .ne. [-1,0,1,2])) call abort\n+    if (any (c .ne. [-1,0,1,2])) STOP 1\n     a = a + 1\n-    if (any (a .ne. [1,2,3,4])) call abort\n+    if (any (a .ne. [1,2,3,4])) STOP 2\n     a = t%b\n-    if (any (a .ne. t%b)) call abort\n+    if (any (a .ne. t%b)) STOP 3\n ! Test 'a' is OK as an actual argument\n     c = foo(a)\n-    if (any (c .ne. t%b + 10)) call abort\n+    if (any (c .ne. t%b + 10)) STOP 4\n   end associate\n ! Make sure that the fix works for multi-dimensional arrays...\n   associate (a => u%a)\n-    if (any (a .ne. reshape ([1,1,1,1],[2,2]))) call abort\n+    if (any (a .ne. reshape ([1,1,1,1],[2,2]))) STOP 5\n   end associate\n ! ...and sections\n   associate (a => t(2:3)%b)\n-    if (any (a .ne. [5,6])) call abort\n+    if (any (a .ne. [5,6])) STOP 6\n   end associate\n contains\n   function foo(arg) result(res)"}, {"sha": "afca85434b316e506caa3bf397387500719c7135", "filename": "gcc/testsuite/gfortran.dg/associated_target_6.f03", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociated_target_6.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -42,8 +42,8 @@ program p\n    !.. create i with some value\n    allocate (i, source=42)\n    call foo%setptr (i)\n-   if (.not.associated (i, foo%iptr())) call abort () ! Gave bad result.\n-   if (.not.associated (foo%iptr(), i)) call abort () ! Was OK.\n+   if (.not.associated (i, foo%iptr())) STOP 1 ! Gave bad result.\n+   if (.not.associated (foo%iptr(), i)) STOP 2 ! Was OK.\n    j => foo%iptr()\n-   if (.not.associated (i, j)) call abort ! Was OK.\n+   if (.not.associated (i, j)) STOP 1! Was OK.\n end program p"}, {"sha": "a3bf08b23921074ec4a6e3b210b3ee1bfda6954c", "filename": "gcc/testsuite/gfortran.dg/assumed_dummy_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_dummy_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_dummy_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_dummy_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -34,7 +34,7 @@ END SUBROUTINE foo\n   call foo (y, j)\n   call goo (y, j)\n   call roo (y, j)\n-  if (any(y.ne.(/21.0, 99.0, 42.0/))) call abort ()\n+  if (any(y.ne.(/21.0, 99.0, 42.0/))) STOP 1\n contains\n   SUBROUTINE roo (x, i)\n     REAL, DIMENSION(i:)     :: x"}, {"sha": "547836c1b5825d3a74632115b75a6aed0201cb49", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_1.f90", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -23,23 +23,23 @@ subroutine check_value(b, n, val)\n \n allocate(z(1:4, -2:5, 4, 10:11))\n \n-if (rank(x) /= 2) call abort ()\n+if (rank(x) /= 2) STOP 1\n val = [(2*i+3, i = 1, size(x))]\n x = reshape (val, shape(x))\n call foo(x, rank(x), lbound(x), ubound(x), val)\n call foo2(x, rank(x), lbound(x), ubound(x), val)\n call bar(x,x,.true.)\n call bar(x,prsnt=.false.)\n \n-if (rank(y) /= 1) call abort ()\n+if (rank(y) /= 1) STOP 2\n val = [(2*i+7, i = 1, size(y))]\n y = reshape (val, shape(y))\n call foo(y, rank(y), lbound(y), ubound(y), val)\n call foo2(y, rank(y), lbound(y), ubound(y), val)\n call bar(y,y,.true.)\n call bar(y,prsnt=.false.)\n \n-if (rank(z) /= 4) call abort ()\n+if (rank(z) /= 4) STOP 3\n val = [(2*i+5, i = 1, size(z))]\n z(:,:,:,:) = reshape (val, shape(z))\n call foo(z, rank(z), lbound(z), ubound(z), val)\n@@ -52,16 +52,16 @@ subroutine check_value(b, n, val)\n   subroutine bar(a,b, prsnt)\n     integer, pointer, optional, intent(in) :: a(..),b(..)\n     logical, value :: prsnt\n-    if (.not. associated(a)) call abort()\n+    if (.not. associated(a)) STOP 4\n     if (present(b)) then\n        ! The following is not valid.\n        ! Technically, it could be allowed and might be in Fortran 2015:\n-       ! if (.not. associated(a,b)) call abort()\n+       ! if (.not. associated(a,b)) STOP 5\n     else\n-      if (.not. associated(a)) call abort()\n+      if (.not. associated(a)) STOP 6\n     end if\n-    if (.not. present(a)) call abort()\n-    if (prsnt .neqv. present(b)) call abort()\n+    if (.not. present(a)) STOP 7\n+    if (prsnt .neqv. present(b)) STOP 8\n   end subroutine\n \n   ! POINTER argument - bounds as specified before\n@@ -73,20 +73,20 @@ subroutine foo(a, rnk, low, high, val)\n \n \n \n-    if (rank(a) /= rnk) call abort()\n-    if (size(low) /= rnk .or. size(high) /= rnk) call abort()\n-    if (size(a) /= product (high - low +1)) call abort()\n+    if (rank(a) /= rnk) STOP 9\n+    if (size(low) /= rnk .or. size(high) /= rnk) STOP 10\n+    if (size(a) /= product (high - low +1)) STOP 11\n \n     if (rnk > 0) then\n-      if (low(1) /= lbound(a,1)) call abort()\n-      if (high(1) /= ubound(a,1)) call abort()\n-      if (size (a,1) /= high(1)-low(1)+1) call abort()\n+      if (low(1) /= lbound(a,1)) STOP 12\n+      if (high(1) /= ubound(a,1)) STOP 13\n+      if (size (a,1) /= high(1)-low(1)+1) STOP 14\n     end if\n \n     do i = 1, rnk\n-      if (low(i) /= lbound(a,i)) call abort()\n-      if (high(i) /= ubound(a,i)) call abort()\n-      if (size (a,i) /= high(i)-low(i)+1) call abort()\n+      if (low(i) /= lbound(a,i)) STOP 15\n+      if (high(i) /= ubound(a,i)) STOP 16\n+      if (size (a,i) /= high(i)-low(i)+1) STOP 17\n     end do\n     call check_value (a, rnk, val)\n     call foo2(a, rnk, low, high, val)\n@@ -99,20 +99,20 @@ subroutine foo2(a, rnk, low, high, val)\n     integer, intent(in) :: low(:), high(:), val(:)\n     integer :: i\n \n-    if (rank(a) /= rnk) call abort()\n-    if (size(low) /= rnk .or. size(high) /= rnk) call abort()\n-    if (size(a) /= product (high - low +1)) call abort()\n+    if (rank(a) /= rnk) STOP 18\n+    if (size(low) /= rnk .or. size(high) /= rnk) STOP 19\n+    if (size(a) /= product (high - low +1)) STOP 20\n \n     if (rnk > 0) then\n-      if (1 /= lbound(a,1)) call abort()\n-      if (high(1)-low(1)+1 /= ubound(a,1)) call abort()\n-      if (size (a,1) /= high(1)-low(1)+1) call abort()\n+      if (1 /= lbound(a,1)) STOP 21\n+      if (high(1)-low(1)+1 /= ubound(a,1)) STOP 22\n+      if (size (a,1) /= high(1)-low(1)+1) STOP 23\n     end if\n \n     do i = 1, rnk\n-      if (1 /= lbound(a,i)) call abort()\n-      if (high(i)-low(i)+1 /= ubound(a,i)) call abort()\n-      if (size (a,i) /= high(i)-low(i)+1) call abort()\n+      if (1 /= lbound(a,i)) STOP 24\n+      if (high(i)-low(i)+1 /= ubound(a,i)) STOP 25\n+      if (size (a,i) /= high(i)-low(i)+1) STOP 26\n     end do\n     call check_value (a, rnk, val)\n   end subroutine foo2\n@@ -124,20 +124,20 @@ subroutine foo3 (a, rnk, low, high, val)\n     integer, intent(in) :: low(:), high(:), val(:)\n     integer :: i\n \n-    if (rank(a) /= rnk) call abort()\n-    if (size(low) /= rnk .or. size(high) /= rnk) call abort()\n-    if (size(a) /= product (high - low +1)) call abort()\n+    if (rank(a) /= rnk) STOP 27\n+    if (size(low) /= rnk .or. size(high) /= rnk) STOP 28\n+    if (size(a) /= product (high - low +1)) STOP 29\n \n     if (rnk > 0) then\n-      if (low(1) /= lbound(a,1)) call abort()\n-      if (high(1) /= ubound(a,1)) call abort()\n-      if (size (a,1) /= high(1)-low(1)+1) call abort()\n+      if (low(1) /= lbound(a,1)) STOP 30\n+      if (high(1) /= ubound(a,1)) STOP 31\n+      if (size (a,1) /= high(1)-low(1)+1) STOP 32\n     end if\n \n     do i = 1, rnk\n-      if (low(i) /= lbound(a,i)) call abort()\n-      if (high(i) /= ubound(a,i)) call abort()\n-      if (size (a,i) /= high(i)-low(i)+1) call abort()\n+      if (low(i) /= lbound(a,i)) STOP 33\n+      if (high(i) /= ubound(a,i)) STOP 34\n+      if (size (a,i) /= high(i)-low(i)+1) STOP 35\n     end do\n     call check_value (a, rnk, val)\n     call foo(a, rnk, low, high, val)"}, {"sha": "6a3cc94483ef25b6d6619a84841fad71da4a6055", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_10.f90", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_10.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -30,23 +30,23 @@ program test\n  jjp = t(88)\n \n  call faa(iia, jja) ! Copy back\n- if (iia /= 7 .and. jja%aa /= 88) call abort ()\n+ if (iia /= 7 .and. jja%aa /= 88) STOP 1\n  call fai(iia, jja) ! No copy back\n- if (iia /= 7 .and. jja%aa /= 88) call abort ()\n+ if (iia /= 7 .and. jja%aa /= 88) STOP 2\n \n  call fpa(iip, jjp) ! Copy back\n- if (iip /= 7 .and. jjp%aa /= 88) call abort ()\n+ if (iip /= 7 .and. jjp%aa /= 88) STOP 3\n  call fpi(iip, jjp) ! No copy back\n- if (iip /= 7 .and. jjp%aa /= 88) call abort ()\n+ if (iip /= 7 .and. jjp%aa /= 88) STOP 4\n \n  call fnn(iia, jja) ! No copy back\n- if (iia /= 7 .and. jja%aa /= 88) call abort ()\n+ if (iia /= 7 .and. jja%aa /= 88) STOP 5\n  call fno(iia, jja) ! No copy back\n- if (iia /= 7 .and. jja%aa /= 88) call abort ()\n+ if (iia /= 7 .and. jja%aa /= 88) STOP 6\n  call fnn(iip, jjp) ! No copy back\n- if (iip /= 7 .and. jjp%aa /= 88) call abort ()\n+ if (iip /= 7 .and. jjp%aa /= 88) STOP 7\n  call fno(iip, jjp) ! No copy back\n- if (iip /= 7 .and. jjp%aa /= 88) call abort ()\n+ if (iip /= 7 .and. jjp%aa /= 88) STOP 8\n \n  is_present = .false.\n \n@@ -61,27 +61,27 @@ program test\n   subroutine faa (xx1, yy1)\n     integer, allocatable :: xx1(..)\n     type(t), allocatable :: yy1(..)\n-    if (.not. allocated (xx1)) call abort ()\n-    if (.not. allocated (yy1)) call abort ()\n+    if (.not. allocated (xx1)) STOP 9\n+    if (.not. allocated (yy1)) STOP 10\n   end subroutine faa\n   subroutine fai (xx1, yy1)\n     integer, allocatable, intent(in) :: xx1(..)\n     type(t), allocatable, intent(in) :: yy1(..)\n-    if (.not. allocated (xx1)) call abort ()\n-    if (.not. allocated (yy1)) call abort ()\n+    if (.not. allocated (xx1)) STOP 11\n+    if (.not. allocated (yy1)) STOP 12\n   end subroutine fai\n   subroutine fpa (xx1, yy1)\n     integer, pointer :: xx1(..)\n     type(t), pointer :: yy1(..)\n-    if (is_present .neqv. associated (xx1)) call abort ()\n-    if (is_present .neqv. associated (yy1)) call abort ()\n+    if (is_present .neqv. associated (xx1)) STOP 13\n+    if (is_present .neqv. associated (yy1)) STOP 14\n   end subroutine fpa\n \n   subroutine fpi (xx1, yy1)\n     integer, pointer, intent(in) :: xx1(..)\n     type(t), pointer, intent(in) :: yy1(..)\n-    if (is_present .neqv. associated (xx1)) call abort ()\n-    if (is_present .neqv. associated (yy1)) call abort ()\n+    if (is_present .neqv. associated (xx1)) STOP 15\n+    if (is_present .neqv. associated (yy1)) STOP 16\n   end subroutine fpi\n \n   subroutine fnn(xx2,yy2)\n@@ -92,8 +92,8 @@ end subroutine fnn\n   subroutine fno(xx2,yy2)\n     integer, optional  :: xx2(..)\n     type(t), optional  :: yy2(..)\n-    if (is_present .neqv. present (xx2)) call abort ()\n-    if (is_present .neqv. present (yy2)) call abort ()\n+    if (is_present .neqv. present (xx2)) STOP 17\n+    if (is_present .neqv. present (yy2)) STOP 18\n   end subroutine fno\n end program test\n "}, {"sha": "cdc75933e5ee2c8565361d712b9841f10e4ac726", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_2.f90", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -16,23 +16,23 @@\n \n allocate(z(1:4, -2:5, 4, 10:11))\n \n-if (rank(x) /= 2) call abort ()\n+if (rank(x) /= 2) STOP 1\n val = [(2*i+3, i = 1, size(x))]\n x = reshape (val, shape(x))\n call foo(x, rank(x), lbound(x), ubound(x), val)\n call foo2(x, rank(x), lbound(x), ubound(x), val)\n call bar(x,x,.true.)\n call bar(x,prsnt=.false.)\n \n-if (rank(y) /= 1) call abort ()\n+if (rank(y) /= 1) STOP 2\n val = [(2*i+7, i = 1, size(y))]\n y = reshape (val, shape(y))\n call foo(y, rank(y), lbound(y), ubound(y), val)\n call foo2(y, rank(y), lbound(y), ubound(y), val)\n call bar(y,y,.true.)\n call bar(y,prsnt=.false.)\n \n-if (rank(z) /= 4) call abort ()\n+if (rank(z) /= 4) STOP 3\n val = [(2*i+5, i = 1, size(z))]\n z(:,:,:,:) = reshape (val, shape(z))\n call foo(z, rank(z), lbound(z), ubound(z), val)\n@@ -45,16 +45,16 @@\n   subroutine bar(a,b, prsnt)\n     integer, pointer, optional, intent(in) :: a(..),b(..)\n     logical, value :: prsnt\n-    if (.not. associated(a)) call abort()\n+    if (.not. associated(a)) STOP 4\n     if (present(b)) then\n       ! The following is not valid\n       ! Technically, it could be allowed and might be in Fortran 2015:\n-      ! if (.not. associated(a,b)) call abort()\n+      ! if (.not. associated(a,b)) STOP 5\n     else\n-      if (.not. associated(a)) call abort()\n+      if (.not. associated(a)) STOP 6\n     end if\n-    if (.not. present(a)) call abort()\n-    if (prsnt .neqv. present(b)) call abort()\n+    if (.not. present(a)) STOP 7\n+    if (prsnt .neqv. present(b)) STOP 8\n   end subroutine\n \n   ! POINTER argument - bounds as specified before\n@@ -66,20 +66,20 @@ subroutine foo(a, rnk, low, high, val)\n \n \n \n-    if (rank(a) /= rnk) call abort()\n-    if (size(low) /= rnk .or. size(high) /= rnk) call abort()\n-    if (size(a) /= product (high - low +1)) call abort()\n+    if (rank(a) /= rnk) STOP 9\n+    if (size(low) /= rnk .or. size(high) /= rnk) STOP 10\n+    if (size(a) /= product (high - low +1)) STOP 11\n \n     if (rnk > 0) then\n-      if (low(1) /= lbound(a,1)) call abort()\n-      if (high(1) /= ubound(a,1)) call abort()\n-      if (size (a,1) /= high(1)-low(1)+1) call abort()\n+      if (low(1) /= lbound(a,1)) STOP 12\n+      if (high(1) /= ubound(a,1)) STOP 13\n+      if (size (a,1) /= high(1)-low(1)+1) STOP 14\n     end if\n \n     do i = 1, rnk\n-      if (low(i) /= lbound(a,i)) call abort()\n-      if (high(i) /= ubound(a,i)) call abort()\n-      if (size (a,i) /= high(i)-low(i)+1) call abort()\n+      if (low(i) /= lbound(a,i)) STOP 15\n+      if (high(i) /= ubound(a,i)) STOP 16\n+      if (size (a,i) /= high(i)-low(i)+1) STOP 17\n     end do\n     call foo2(a, rnk, low, high, val)\n   end subroutine\n@@ -91,20 +91,20 @@ subroutine foo2(a, rnk, low, high, val)\n     integer, intent(in) :: low(:), high(:), val(:)\n     integer :: i\n \n-    if (rank(a) /= rnk) call abort()\n-    if (size(low) /= rnk .or. size(high) /= rnk) call abort()\n-    if (size(a) /= product (high - low +1)) call abort()\n+    if (rank(a) /= rnk) STOP 18\n+    if (size(low) /= rnk .or. size(high) /= rnk) STOP 19\n+    if (size(a) /= product (high - low +1)) STOP 20\n \n     if (rnk > 0) then\n-      if (1 /= lbound(a,1)) call abort()\n-      if (high(1)-low(1)+1 /= ubound(a,1)) call abort()\n-      if (size (a,1) /= high(1)-low(1)+1) call abort()\n+      if (1 /= lbound(a,1)) STOP 21\n+      if (high(1)-low(1)+1 /= ubound(a,1)) STOP 22\n+      if (size (a,1) /= high(1)-low(1)+1) STOP 23\n     end if\n \n     do i = 1, rnk\n-      if (1 /= lbound(a,i)) call abort()\n-      if (high(i)-low(i)+1 /= ubound(a,i)) call abort()\n-      if (size (a,i) /= high(i)-low(i)+1) call abort()\n+      if (1 /= lbound(a,i)) STOP 24\n+      if (high(i)-low(i)+1 /= ubound(a,i)) STOP 25\n+      if (size (a,i) /= high(i)-low(i)+1) STOP 26\n     end do\n   end subroutine foo2\n \n@@ -115,20 +115,20 @@ subroutine foo3 (a, rnk, low, high, val)\n     integer, intent(in) :: low(:), high(:), val(:)\n     integer :: i\n \n-    if (rank(a) /= rnk) call abort()\n-    if (size(low) /= rnk .or. size(high) /= rnk) call abort()\n-    if (size(a) /= product (high - low +1)) call abort()\n+    if (rank(a) /= rnk) STOP 27\n+    if (size(low) /= rnk .or. size(high) /= rnk) STOP 28\n+    if (size(a) /= product (high - low +1)) STOP 29\n \n     if (rnk > 0) then\n-      if (low(1) /= lbound(a,1)) call abort()\n-      if (high(1) /= ubound(a,1)) call abort()\n-      if (size (a,1) /= high(1)-low(1)+1) call abort()\n+      if (low(1) /= lbound(a,1)) STOP 30\n+      if (high(1) /= ubound(a,1)) STOP 31\n+      if (size (a,1) /= high(1)-low(1)+1) STOP 32\n     end if\n \n     do i = 1, rnk\n-      if (low(i) /= lbound(a,i)) call abort()\n-      if (high(i) /= ubound(a,i)) call abort()\n-      if (size (a,i) /= high(i)-low(i)+1) call abort()\n+      if (low(i) /= lbound(a,i)) STOP 33\n+      if (high(i) /= ubound(a,i)) STOP 34\n+      if (size (a,i) /= high(i)-low(i)+1) STOP 35\n     end do\n     call foo(a, rnk, low, high, val)\n   end subroutine"}, {"sha": "183b1e8b7969e3dcab83c81714a50adb2c6d1432", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_7.f90", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_7.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -22,43 +22,43 @@\n call foo(at)\n call bar(ac)\n call bar(at)\n-if (i /= 12) call abort()\n+if (i /= 12) STOP 1\n \n contains\n   subroutine bar(x)\n     type(t) :: x(..)\n-    if (lbound(x,1) /= 1 .or. lbound(x,2) /= 1) call abort()\n-    if (size(x) /= 6) call abort()\n-    if (size(x,1) /= 2 .or. size(x,2) /= 3) call abort()\n-    if (ubound(x,1) /= 2 .or. ubound(x,2) /= 3) call abort()\n+    if (lbound(x,1) /= 1 .or. lbound(x,2) /= 1) STOP 2\n+    if (size(x) /= 6) STOP 3\n+    if (size(x,1) /= 2 .or. size(x,2) /= 3) STOP 4\n+    if (ubound(x,1) /= 2 .or. ubound(x,2) /= 3) STOP 5\n     i = i + 1\n     call foo(x)\n     call bar2(x)\n   end subroutine\n   subroutine bar2(x)\n     type(t) :: x(..)\n-    if (lbound(x,1) /= 1 .or. lbound(x,2) /= 1) call abort()\n-    if (size(x) /= 6) call abort()\n-    if (size(x,1) /= 2 .or. size(x,2) /= 3) call abort()\n-    if (ubound(x,1) /= 2 .or. ubound(x,2) /= 3) call abort()\n+    if (lbound(x,1) /= 1 .or. lbound(x,2) /= 1) STOP 6\n+    if (size(x) /= 6) STOP 7\n+    if (size(x,1) /= 2 .or. size(x,2) /= 3) STOP 8\n+    if (ubound(x,1) /= 2 .or. ubound(x,2) /= 3) STOP 9\n     i = i + 1\n   end subroutine\n   subroutine foo(x)\n     class(t) :: x(..)\n-    if (lbound(x,1) /= 1 .or. lbound(x,2) /= 1) call abort()\n-    if (size(x) /= 6) call abort()\n-    if (size(x,1) /= 2 .or. size(x,2) /= 3) call abort()\n-    if (ubound(x,1) /= 2 .or. ubound(x,2) /= 3) call abort()\n+    if (lbound(x,1) /= 1 .or. lbound(x,2) /= 1) STOP 10\n+    if (size(x) /= 6) STOP 11\n+    if (size(x,1) /= 2 .or. size(x,2) /= 3) STOP 12\n+    if (ubound(x,1) /= 2 .or. ubound(x,2) /= 3) STOP 13\n     i = i + 1\n     call foo2(x)\n !    call bar2(x) ! Passing a CLASS to a TYPE does not yet work\n   end subroutine\n   subroutine foo2(x)\n     class(t) :: x(..)\n-    if (lbound(x,1) /= 1 .or. lbound(x,2) /= 1) call abort()\n-    if (size(x) /= 6) call abort()\n-    if (size(x,1) /= 2 .or. size(x,2) /= 3) call abort()\n-    if (ubound(x,1) /= 2 .or. ubound(x,2) /= 3) call abort()\n+    if (lbound(x,1) /= 1 .or. lbound(x,2) /= 1) STOP 14\n+    if (size(x) /= 6) STOP 15\n+    if (size(x,1) /= 2 .or. size(x,2) /= 3) STOP 16\n+    if (ubound(x,1) /= 2 .or. ubound(x,2) /= 3) STOP 17\n     i = i + 1\n   end subroutine\n end "}, {"sha": "5873296a7a5818383a33aceeb438b73a26dbc861", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_8.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_8.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -24,28 +24,28 @@ end subroutine check\n   call f ()\n   call f (null())\n   call f (kk)\n-  if (j /= 2) call abort()\n+  if (j /= 2) STOP 1\n \n   j = 0\n   nullify (ll)\n   call g (null())\n   call g (ll)\n   call g (ii)\n-  if (j /= 1) call abort()\n+  if (j /= 1) STOP 2\n \n   j = 0\n   call h (kk)\n   kk = 489\n   call h (kk)\n-  if (j /= 1) call abort()\n+  if (j /= 1) STOP 3\n \n contains\n \n   subroutine f (x)\n     integer, optional :: x(..)\n \n     if (.not. present (x)) return\n-    if (rank (x) /= 0) call abort\n+    if (rank (x) /= 0) STOP 1\n     call check (x)\n     j = j + 1\n   end subroutine\n@@ -54,7 +54,7 @@ subroutine g (x)\n     integer, pointer, intent(in) :: x(..)\n \n     if (.not. associated (x)) return\n-    if (rank (x) /= 0) call abort ()\n+    if (rank (x) /= 0) STOP 4\n     call check (x)\n     j = j + 1\n   end subroutine\n@@ -63,7 +63,7 @@ subroutine h (x)\n     integer, allocatable :: x(..)\n \n     if (.not. allocated (x)) return\n-    if (rank (x) /= 0) call abort\n+    if (rank (x) /= 0) STOP 2\n     call check (x)\n     j = j + 1\n   end subroutine"}, {"sha": "1296d068959cbbcc73dcbdf2c957fd0f4080f399", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_9.f90", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_9.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -35,53 +35,53 @@ end subroutine check2\n   call fc(null())\n   call fc(y)\n   call fc(yac)\n-  if (j /= 2) call abort ()\n+  if (j /= 2) STOP 1\n \n   j = 0\n   call gc(null())\n   call gc(y)\n   call gc(yac)\n   deallocate (yac)\n   call gc(yac)\n-  if (j /= 2) call abort ()\n+  if (j /= 2) STOP 2\n \n   j = 0\n   call hc(yac)\n   allocate (yac)\n   yac%i = 489\n   call hc(yac)\n-  if (j /= 1) call abort ()\n+  if (j /= 1) STOP 3\n \n   j = 0\n   call ft()\n   call ft(null())\n   call ft(y)\n   call ft(yac)\n-  if (j /= 2) call abort ()\n+  if (j /= 2) STOP 4\n \n   j = 0\n   call gt(null())\n   call gt(y)\n   call gt(yac)\n   deallocate (yac)\n   call gt(yac)\n-  if (j /= 2) call abort ()\n+  if (j /= 2) STOP 5\n \n   j = 0\n   call ht(yac)\n   allocate (yac)\n   yac%i = 489\n   call ht(yac)\n-  if (j /= 1) call abort ()\n+  if (j /= 1) STOP 6\n \n contains\n \n   subroutine fc (x)\n     class(t), optional :: x(..)\n \n     if (.not. present (x)) return\n-    if (.not. SAME_TYPE_AS (x, yac)) call abort ()\n-    if (rank (x) /= 0) call abort\n+    if (.not. SAME_TYPE_AS (x, yac)) STOP 7\n+    if (rank (x) /= 0) STOP 1\n     call check2 (x)\n     j = j + 1\n   end subroutine\n@@ -90,8 +90,8 @@ subroutine gc (x)\n     class(t), pointer, intent(in) :: x(..)\n \n     if (.not. associated (x)) return\n-    if (.not. SAME_TYPE_AS (x, yac)) call abort ()\n-    if (rank (x) /= 0) call abort ()\n+    if (.not. SAME_TYPE_AS (x, yac)) STOP 8\n+    if (rank (x) /= 0) STOP 9\n     call check2 (x)\n     j = j + 1\n   end subroutine\n@@ -100,8 +100,8 @@ subroutine hc (x)\n     class(t), allocatable :: x(..)\n \n     if (.not. allocated (x)) return\n-    if (.not. SAME_TYPE_AS (x, yac)) call abort ()\n-    if (rank (x) /= 0) call abort\n+    if (.not. SAME_TYPE_AS (x, yac)) STOP 10\n+    if (rank (x) /= 0) STOP 2\n     call check2 (x)\n     j = j + 1\n   end subroutine\n@@ -110,8 +110,8 @@ subroutine ft (x)\n     type(t), optional :: x(..)\n \n     if (.not. present (x)) return\n-    if (.not. SAME_TYPE_AS (x, yac)) call abort ()\n-    if (rank (x) /= 0) call abort\n+    if (.not. SAME_TYPE_AS (x, yac)) STOP 11\n+    if (rank (x) /= 0) STOP 3\n     call check2 (x)\n     j = j + 1\n   end subroutine\n@@ -120,8 +120,8 @@ subroutine gt (x)\n     type(t), pointer, intent(in) :: x(..)\n \n     if (.not. associated (x)) return\n-    if (.not. SAME_TYPE_AS (x, yac)) call abort ()\n-    if (rank (x) /= 0) call abort ()\n+    if (.not. SAME_TYPE_AS (x, yac)) STOP 12\n+    if (rank (x) /= 0) STOP 13\n     call check2 (x)\n     j = j + 1\n   end subroutine\n@@ -130,8 +130,8 @@ subroutine ht (x)\n     type(t), allocatable :: x(..)\n \n     if (.not. allocated (x)) return\n-    if (.not. SAME_TYPE_AS (x, yac)) call abort ()\n-    if (rank (x) /= 0) call abort\n+    if (.not. SAME_TYPE_AS (x, yac)) STOP 14\n+    if (rank (x) /= 0) STOP 4\n     call check2 (x)\n     j = j + 1\n   end subroutine"}, {"sha": "7fb6a886971a786153a90c1e88a2f96900eb509e", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_bounds_1.f90", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_bounds_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_bounds_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_bounds_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -27,110 +27,110 @@ subroutine foo(arg)\n \n     !print *, lbound(arg)\n     !print *, id(lbound(arg))\n-    if (any(lbound(arg) /= [1, 1])) call abort\n-    if (any(id(lbound(arg)) /= [1, 1])) call abort\n+    if (any(lbound(arg) /= [1, 1])) STOP 1\n+    if (any(id(lbound(arg)) /= [1, 1])) STOP 2\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) lbound(arg)\n-    if (buffer /= '           1           1') call abort\n+    if (buffer /= '           1           1') STOP 3\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) id(lbound(arg))\n-    if (buffer /= '           1           1') call abort\n+    if (buffer /= '           1           1') STOP 4\n \n     !print *, ubound(arg)\n     !print *, id(ubound(arg))\n-    if (any(ubound(arg) /= [3, 8])) call abort\n-    if (any(id(ubound(arg)) /= [3, 8])) call abort\n+    if (any(ubound(arg) /= [3, 8])) STOP 5\n+    if (any(id(ubound(arg)) /= [3, 8])) STOP 6\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) ubound(arg)\n-    if (buffer /= '           3           8') call abort\n+    if (buffer /= '           3           8') STOP 7\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) id(ubound(arg))\n-    if (buffer /= '           3           8') call abort\n+    if (buffer /= '           3           8') STOP 8\n \n     !print *, shape(arg)\n     !print *, id(shape(arg))\n-    if (any(shape(arg) /= [3, 8])) call abort\n-    if (any(id(shape(arg)) /= [3, 8])) call abort\n+    if (any(shape(arg) /= [3, 8])) STOP 9\n+    if (any(id(shape(arg)) /= [3, 8])) STOP 10\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) shape(arg)\n-    if (buffer /= '           3           8') call abort\n+    if (buffer /= '           3           8') STOP 11\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) id(shape(arg))\n-    if (buffer /= '           3           8') call abort\n+    if (buffer /= '           3           8') STOP 12\n \n   end subroutine foo\n   subroutine bar(arg)\n     integer, allocatable :: arg(:,:)\n \n     !print *, lbound(arg)\n     !print *, id(lbound(arg))\n-    if (any(lbound(arg) /= [2, -2])) call abort\n-    if (any(id(lbound(arg)) /= [2, -2])) call abort\n+    if (any(lbound(arg) /= [2, -2])) STOP 13\n+    if (any(id(lbound(arg)) /= [2, -2])) STOP 14\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) lbound(arg)\n-    if (buffer /= '           2          -2') call abort\n+    if (buffer /= '           2          -2') STOP 15\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) id(lbound(arg))\n-    if (buffer /= '           2          -2') call abort\n+    if (buffer /= '           2          -2') STOP 16\n \n     !print *, ubound(arg)\n     !print *, id(ubound(arg))\n-    if (any(ubound(arg) /= [4, 5])) call abort\n-    if (any(id(ubound(arg)) /= [4, 5])) call abort\n+    if (any(ubound(arg) /= [4, 5])) STOP 17\n+    if (any(id(ubound(arg)) /= [4, 5])) STOP 18\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) ubound(arg)\n-    if (buffer /= '           4           5') call abort\n+    if (buffer /= '           4           5') STOP 19\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) id(ubound(arg))\n-    if (buffer /= '           4           5') call abort\n+    if (buffer /= '           4           5') STOP 20\n \n     !print *, shape(arg)\n     !print *, id(shape(arg))\n-    if (any(shape(arg) /= [3, 8])) call abort\n-    if (any(id(shape(arg)) /= [3, 8])) call abort\n+    if (any(shape(arg) /= [3, 8])) STOP 21\n+    if (any(id(shape(arg)) /= [3, 8])) STOP 22\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) shape(arg)\n-    if (buffer /= '           3           8') call abort\n+    if (buffer /= '           3           8') STOP 23\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) id(shape(arg))\n-    if (buffer /= '           3           8') call abort\n+    if (buffer /= '           3           8') STOP 24\n \n   end subroutine bar\n   subroutine baz(arg)\n     integer, pointer :: arg(..)\n \n     !print *, lbound(arg)\n     !print *, id(lbound(arg))\n-    if (any(lbound(arg) /= [2, -2])) call abort\n-    if (any(id(lbound(arg)) /= [2, -2])) call abort\n+    if (any(lbound(arg) /= [2, -2])) STOP 25\n+    if (any(id(lbound(arg)) /= [2, -2])) STOP 26\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) lbound(arg)\n-    if (buffer /= '           2          -2') call abort\n+    if (buffer /= '           2          -2') STOP 27\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) id(lbound(arg))\n-    if (buffer /= '           2          -2') call abort\n+    if (buffer /= '           2          -2') STOP 28\n \n     !print *, ubound(arg)\n     !print *, id(ubound(arg))\n-    if (any(ubound(arg) /= [4, 5])) call abort\n-    if (any(id(ubound(arg)) /= [4, 5])) call abort\n+    if (any(ubound(arg) /= [4, 5])) STOP 29\n+    if (any(id(ubound(arg)) /= [4, 5])) STOP 30\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) ubound(arg)\n-    if (buffer /= '           4           5') call abort\n+    if (buffer /= '           4           5') STOP 31\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) id(ubound(arg))\n-    if (buffer /= '           4           5') call abort\n+    if (buffer /= '           4           5') STOP 32\n \n     !print *, shape(arg)\n     !print *, id(shape(arg))\n-    if (any(shape(arg) /= [3, 8])) call abort\n-    if (any(id(shape(arg)) /= [3, 8])) call abort\n+    if (any(shape(arg) /= [3, 8])) STOP 33\n+    if (any(id(shape(arg)) /= [3, 8])) STOP 34\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) shape(arg)\n-    if (buffer /= '           3           8') call abort\n+    if (buffer /= '           3           8') STOP 35\n     buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n     write(buffer,*) id(shape(arg))\n-    if (buffer /= '           3           8') call abort\n+    if (buffer /= '           3           8') STOP 36\n \n   end subroutine baz\n   elemental function id(arg)"}, {"sha": "b5d06269bc8380e0d309b3bb4816fcd1d4779ac1", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_bounds_2.f90", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_bounds_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_bounds_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_bounds_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -14,64 +14,64 @@ program test\n \n   b = foo(a)\n   !print *,b(:,1)\n-  if (any(b(:,1) /= [11, 101])) call abort\n+  if (any(b(:,1) /= [11, 101])) STOP 1\n   buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n   write(buffer,*) b(:,1)\n-  if (buffer /= '          11         101') call abort\n+  if (buffer /= '          11         101') STOP 2\n \n   !print *,b(:,2)\n-  if (any(b(:,2) /= [3, 8])) call abort\n+  if (any(b(:,2) /= [3, 8])) STOP 3\n   buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n   write(buffer,*) b(:,2)\n-  if (buffer /= '           3           8') call abort\n+  if (buffer /= '           3           8') STOP 4\n \n   !print *,b(:,3)\n-  if (any(b(:,3) /= [13, 108])) call abort\n+  if (any(b(:,3) /= [13, 108])) STOP 5\n   buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n   write(buffer,*) b(:,3)\n-  if (buffer /= '          13         108') call abort\n+  if (buffer /= '          13         108') STOP 6\n \n \n   allocate(c(1:2,-3:6))\n   b = bar(c)\n   !print *,b(:,1)\n-  if (any(b(:,1) /= [11, 97])) call abort\n+  if (any(b(:,1) /= [11, 97])) STOP 7\n   buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n   write(buffer,*) b(:,1)\n-  if (buffer /= '          11          97') call abort\n+  if (buffer /= '          11          97') STOP 8\n \n   !print *,b(:,2)\n-  if (any(b(:,2) /= [12, 106])) call abort\n+  if (any(b(:,2) /= [12, 106])) STOP 9\n   buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n   write(buffer,*) b(:,2)\n-  if (buffer /= '          12         106') call abort\n+  if (buffer /= '          12         106') STOP 10\n \n   !print *,b(:,3)\n-  if (any(b(:,3) /= [2, 10])) call abort\n+  if (any(b(:,3) /= [2, 10])) STOP 11\n   buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n   write(buffer,*) b(:,3)\n-  if (buffer /= '           2          10') call abort\n+  if (buffer /= '           2          10') STOP 12\n \n \n   allocate(d(3:5,-1:10))\n   b = baz(d)\n   !print *,b(:,1)\n-  if (any(b(:,1) /= [3, -1])) call abort\n+  if (any(b(:,1) /= [3, -1])) STOP 13\n   buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n   write(buffer,*) b(:,1)\n-  if (buffer /= '           3          -1') call abort\n+  if (buffer /= '           3          -1') STOP 14\n \n   !print *,b(:,2)\n-  if (any(b(:,2) /= [15, 110])) call abort\n+  if (any(b(:,2) /= [15, 110])) STOP 15\n   buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n   write(buffer,*) b(:,2)\n-  if (buffer /= '          15         110') call abort\n+  if (buffer /= '          15         110') STOP 16\n \n   !print *,b(:,3)\n-  if (any(b(:,3) /= [13, 112])) call abort\n+  if (any(b(:,3) /= [13, 112])) STOP 17\n   buffer = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n   write(buffer,*) b(:,3)\n-  if (buffer /= '          13         112') call abort\n+  if (buffer /= '          13         112') STOP 18\n \n \n contains"}, {"sha": "8d6f2393c7b66a379e80aaaf1b58662cdddadcda", "filename": "gcc/testsuite/gfortran.dg/assumed_shape_ranks_2.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_shape_ranks_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_shape_ranks_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_shape_ranks_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -33,13 +33,13 @@ end module mod1\n \n   i = 0\n   call foo (1e0, i)\n-  if (i .ne. 1) call abort ()\n+  if (i .ne. 1) STOP 1\n \n   i = 0\n   call foo (bar(1), i)\n-  if (i .ne. 1) call abort ()\n+  if (i .ne. 1) STOP 2\n \n   i = 0\n   call foo (bar, i)\n-  if (i .ne. 2) call abort ()\n+  if (i .ne. 2) STOP 3\n end"}, {"sha": "acf587386c55555faa7fea33cda03d203a2a2acd", "filename": "gcc/testsuite/gfortran.dg/assumed_type_2.f90", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_type_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -26,20 +26,20 @@ subroutine sub_scalar (arg1, presnt)\n      type(*), target, optional :: arg1\n      logical :: presnt\n      type(c_ptr) :: cpt\n-     if (presnt .neqv. present (arg1)) call abort ()\n+     if (presnt .neqv. present (arg1)) STOP 1\n      cpt = c_loc (arg1)\n   end subroutine sub_scalar\n \n   subroutine sub_array_shape (arg2, lbounds, ubounds)\n      type(*), target :: arg2(:,:)\n      type(c_ptr) :: cpt\n      integer :: lbounds(2), ubounds(2)\n-     if (any (lbound(arg2) /= lbounds)) call abort ()\n-     if (any (ubound(arg2) /= ubounds)) call abort ()\n-     if (any (shape(arg2) /= ubounds-lbounds+1)) call abort ()\n-     if (size(arg2) /= product (ubounds-lbounds+1)) call abort ()\n-     if (rank (arg2) /= 2) call abort ()\n-!     if (.not. is_continuous (arg2)) call abort () !<< Not yet implemented\n+     if (any (lbound(arg2) /= lbounds)) STOP 2\n+     if (any (ubound(arg2) /= ubounds)) STOP 3\n+     if (any (shape(arg2) /= ubounds-lbounds+1)) STOP 4\n+     if (size(arg2) /= product (ubounds-lbounds+1)) STOP 5\n+     if (rank (arg2) /= 2) STOP 6\n+!     if (.not. is_continuous (arg2)) STOP 7 !<< Not yet implemented\n !     cpt = c_loc (arg2) ! << FIXME: Valid since TS29113\n      call sub_array_assumed (arg2)\n   end subroutine sub_array_shape"}, {"sha": "df9381b113792378d934b9e6cc23324ec0e12aec", "filename": "gcc/testsuite/gfortran.dg/atan2_1.f90", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fatan2_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fatan2_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fatan2_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -10,28 +10,28 @@\n real, parameter :: pi4 = 2*acos(0.0)\n real, parameter :: pi8 = 2*acos(0.0d0)\n do i = 1, 10\n-  if(atan(1.0,  i/10.0)  -atan2(1.0,  i/10.)    /= 0.0)   call abort()\n-  if(atan(1.0d0,i/10.0d0)-atan2(1.0d0,i/10.0d0) /= 0.0d0) call abort()\n+  if(atan(1.0,  i/10.0)  -atan2(1.0,  i/10.)    /= 0.0)   STOP 1\n+  if(atan(1.0d0,i/10.0d0)-atan2(1.0d0,i/10.0d0) /= 0.0d0) STOP 2\n end do\n \n ! Atan(1,1) = Pi/4\n-if (abs(atan(1.0,1.0)    -pi4/4.0)   > epsilon(pi4)) call abort()\n-if (abs(atan(1.0d0,1.0d0)-pi8/4.0d0) > epsilon(pi8)) call abort()\n+if (abs(atan(1.0,1.0)    -pi4/4.0)   > epsilon(pi4)) STOP 3\n+if (abs(atan(1.0d0,1.0d0)-pi8/4.0d0) > epsilon(pi8)) STOP 4\n \n ! Atan(-1,1) = -Pi/4\n-if (abs(atan(-1.0,1.0)    +pi4/4.0)   > epsilon(pi4)) call abort()\n-if (abs(atan(-1.0d0,1.0d0)+pi8/4.0d0) > epsilon(pi8)) call abort()\n+if (abs(atan(-1.0,1.0)    +pi4/4.0)   > epsilon(pi4)) STOP 5\n+if (abs(atan(-1.0d0,1.0d0)+pi8/4.0d0) > epsilon(pi8)) STOP 6\n \n ! Atan(1,-1) = 3/4*Pi\n-if (abs(atan(1.0,-1.0)    -3.0*pi4/4.0)     > epsilon(pi4)) call abort()\n-if (abs(atan(1.0d0,-1.0d0)-3.0d0*pi8/4.0d0) > epsilon(pi8)) call abort()\n+if (abs(atan(1.0,-1.0)    -3.0*pi4/4.0)     > epsilon(pi4)) STOP 7\n+if (abs(atan(1.0d0,-1.0d0)-3.0d0*pi8/4.0d0) > epsilon(pi8)) STOP 8\n \n ! Atan(-1,-1) = -3/4*Pi\n-if (abs(atan(-1.0,-1.0)    +3.0*pi4/4.0)     > epsilon(pi4)) call abort()\n-if (abs(atan(-1.0d0,-1.0d0)+3.0d0*pi8/4.0d0) > epsilon(pi8)) call abort()\n+if (abs(atan(-1.0,-1.0)    +3.0*pi4/4.0)     > epsilon(pi4)) STOP 9\n+if (abs(atan(-1.0d0,-1.0d0)+3.0d0*pi8/4.0d0) > epsilon(pi8)) STOP 10\n \n ! Atan(3,-5) = 2.60117315331920908301906501867... = Pi - 3/2 atan(3/5)\n-if (abs(atan(3.0,-5.0)    -2.60117315331920908301906501867) > epsilon(pi4)) call abort()\n-if (abs(atan(3.0d0,-5.0d0)-2.60117315331920908301906501867d0) > epsilon(pi8)) call abort()\n+if (abs(atan(3.0,-5.0)    -2.60117315331920908301906501867) > epsilon(pi4)) STOP 11\n+if (abs(atan(3.0d0,-5.0d0)-2.60117315331920908301906501867d0) > epsilon(pi8)) STOP 12\n \n end"}, {"sha": "e33e2ced51ae3349fd198cd0d568f10b52a50a95", "filename": "gcc/testsuite/gfortran.dg/auto_array_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_array_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_array_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_array_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -21,7 +21,7 @@ subroutine foo(m)\n     \n       ! Check it worked.\n       if (any (z .ne. reshape ((/1, 2, 3, 4, 5, 6, 7, 8, 9/), (/3, 3/)))) &\n-        call abort\n+        STOP 1\n     end subroutine foo\n \n     subroutine foo1(n,x)"}, {"sha": "d94f81af3c62a7ca9cce11932c35d7fa6b6cb532", "filename": "gcc/testsuite/gfortran.dg/auto_char_dummy_array_1.f90", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_dummy_array_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_dummy_array_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_dummy_array_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -14,20 +14,20 @@ program oh_no_not_pr15908_again\n   nullify(ptr)\n \n   call a (ptr, 12)\n-  if (.not.associated (ptr) ) call abort ()\n-  if (any (ptr.ne.\"abc\")) call abort ()\n+  if (.not.associated (ptr) ) STOP 1\n+  if (any (ptr.ne.\"abc\")) STOP 2\n \n   ptr => null ()              ! ptr points to 't' here.\n   allocate (ptr(3))\n   ptr = \"xyz\"\n   call a (ptr, 12)\n \n-  if (.not.associated (ptr)) call abort ()\n-  if (any (ptr.ne.\"lmn\")) call abort ()\n+  if (.not.associated (ptr)) STOP 3\n+  if (any (ptr.ne.\"lmn\")) STOP 4\n \n   call a (ptr, 0)\n \n-  if (associated (ptr)) call abort ()\n+  if (associated (ptr)) STOP 5\n \n contains\n \n@@ -48,8 +48,8 @@ subroutine a (p, l)\n       t = \"abc\"\n       p => t\n     else\n-      if (size (p,1).ne.3) call abort ()\n-      if (any (p.ne.\"xyz\")) call abort ()\n+      if (size (p,1).ne.3) STOP 6\n+      if (any (p.ne.\"xyz\")) STOP 7\n       p = s\n     end if\n   end subroutine a"}, {"sha": "85f3e4cb8d3a26cbeff3edb85287081a2824070a", "filename": "gcc/testsuite/gfortran.dg/auto_char_dummy_array_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_dummy_array_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_dummy_array_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_dummy_array_3.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -19,7 +19,7 @@ SUBROUTINE s (nb)\n     CHARACTER(MAX (80, nb)) :: bad_rec(1)\n \n     bad_rec(1)(1:2) = 'abc'\n-    IF (bad_rec(1)(1:2) /= 'ab') CALL abort ()\n+    IF (bad_rec(1)(1:2) /= 'ab') STOP 1\n   END SUBROUTINE s\n \n END PROGRAM main"}, {"sha": "d709c4cc3dd6ecdcf1105271db5ead804ec98725", "filename": "gcc/testsuite/gfortran.dg/auto_char_len_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_len_3.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -21,5 +21,5 @@ program TestStringTools\n         (/(char(i+64),char(i+96), i = 1,26)/)\n   txt = chararray2string(chararr)\n   if (txt .ne. \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") &\n-        call abort ()\n+        STOP 1\n end program TestStringTools"}, {"sha": "1ae0d9b1e355dfe08be73cc146c308f89411f86e", "filename": "gcc/testsuite/gfortran.dg/auto_char_pointer_array_result_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_pointer_array_result_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_pointer_array_result_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_char_pointer_array_result_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,10 +8,10 @@\n   character(10), dimension (2) :: source\n   source = \"abcdefghij\"\n   explicit_result = join_1(source)\n-  if (any (explicit_result .ne. source)) call abort () \n+  if (any (explicit_result .ne. source)) STOP 1 \n \n   implicit_result = reallocate_hnv (source, size(source, 1), LEN (source))\n-  if (any (implicit_result .ne. source)) call abort () \n+  if (any (implicit_result .ne. source)) STOP 2 \n \n contains\n "}, {"sha": "781aa2e09604e76a920906eb424119ffaad91900", "filename": "gcc/testsuite/gfortran.dg/auto_internal_assumed.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_internal_assumed.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_internal_assumed.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_internal_assumed.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -4,7 +4,7 @@\n !\n character (6) :: c\n   c = f1 ()\n-  if (c .ne. 'abcdef') call abort\n+  if (c .ne. 'abcdef') STOP 1\n contains\n   function f1 () ! { dg-error \"must not be assumed length\" }\n     character (*) :: f1"}, {"sha": "1cd5fcbdc7f6b4b0ef8b984753e2afed70c470ba", "filename": "gcc/testsuite/gfortran.dg/auto_pointer_array_result_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_pointer_array_result_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_pointer_array_result_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_pointer_array_result_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,10 +8,10 @@\n   character(10), dimension (2) :: source\n   source = \"abcdefghij\"\n   explicit_result = join_1(source)\n-  if (any (explicit_result .ne. source)) call abort () \n+  if (any (explicit_result .ne. source)) STOP 1 \n \n   implicit_result = reallocate_hnv (source, size(source, 1), LEN (source))\n-  if (any (implicit_result .ne. source)) call abort () \n+  if (any (implicit_result .ne. source)) STOP 2 \n \n contains\n "}, {"sha": "c93f0b07c7bdb28dd0344a1388b357280d4ddf51", "filename": "gcc/testsuite/gfortran.dg/auto_save_2.f90", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_save_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_save_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_save_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -60,22 +60,22 @@ recursive function g2 (x)\n integer f, f2, g, g2\n \n ! Should return static value of a; accumulates y\n-if ( f(3) .ne. 3 ) call abort ()\n-if ( f(4) .ne. 7 ) call abort ()\n-if ( f(2) .ne. 9 ) call abort ()\n+if ( f(3) .ne. 3 ) STOP 1\n+if ( f(4) .ne. 7 ) STOP 2\n+if ( f(2) .ne. 9 ) STOP 3\n \n-if ( f2(3) .ne. 3 ) call abort ()\n-if ( f2(4) .ne. 7 ) call abort ()\n-if ( f2(2) .ne. 9 ) call abort ()\n+if ( f2(3) .ne. 3 ) STOP 4\n+if ( f2(4) .ne. 7 ) STOP 5\n+if ( f2(2) .ne. 9 ) STOP 6\n \n ! Should return automatic value of a; equal to y each time\n-if ( g(3) .ne. 3 ) call abort ()\n-if ( g(4) .ne. 4 ) call abort ()\n-if ( g(2) .ne. 2 ) call abort ()\n+if ( g(3) .ne. 3 ) STOP 7\n+if ( g(4) .ne. 4 ) STOP 8\n+if ( g(2) .ne. 2 ) STOP 9\n \n-if ( g2(3) .ne. 3 ) call abort ()\n-if ( g2(4) .ne. 4 ) call abort ()\n-if ( g2(2) .ne. 2 ) call abort ()\n+if ( g2(3) .ne. 3 ) STOP 10\n+if ( g2(4) .ne. 4 ) STOP 11\n+if ( g2(2) .ne. 2 ) STOP 12\n \n end\n "}, {"sha": "571ece95d7884bc1a7acaa4bbe456f67a7cc366a", "filename": "gcc/testsuite/gfortran.dg/automatic_default_init_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fautomatic_default_init_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fautomatic_default_init_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fautomatic_default_init_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -12,7 +12,7 @@ MODULE M1\n   SUBROUTINE S1(I) \n     INTEGER, INTENT(IN) :: I \n     TYPE(T1) :: D(1:I)\n-    IF (any (D(:)%I.NE.7)) CALL ABORT() \n+    IF (any (D(:)%I.NE.7)) STOP 1 \n   END SUBROUTINE S1 \n END MODULE M1\n   USE M1 "}, {"sha": "8785c8b844d6cc3629c7139babf5a7feb114fda5", "filename": "gcc/testsuite/gfortran.dg/backslash_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackslash_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackslash_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackslash_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -4,5 +4,5 @@\n       write (10,'(A)') '1\\n2'\n       rewind (10)\n       read (10,'(A)') a\n-      if (a /= '1\\n2') call abort\n+      if (a /= '1\\n2') STOP 1\n       end"}, {"sha": "1e9d1c3b5466f74b7c80fa4a1df4d34c7cbf6922", "filename": "gcc/testsuite/gfortran.dg/backslash_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackslash_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackslash_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackslash_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -5,7 +5,7 @@\n       write (10,'(A)') '1\\n2'\n       rewind (10)\n       read (10,*,iostat=e) i\n-      if (e /= 0 .or. i /= 1) call abort\n+      if (e /= 0 .or. i /= 1) STOP 1\n       read (10,*,iostat=e) i\n-      if (e /= 0 .or. i /= 2) call abort\n+      if (e /= 0 .or. i /= 2) STOP 2\n       end"}, {"sha": "96f459834176fbea70ba661ae5fdc8676edda850", "filename": "gcc/testsuite/gfortran.dg/backslash_3.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackslash_3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackslash_3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackslash_3.f?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -11,14 +11,14 @@ program a\n       rewind(10)\n       read(10,'(A34)') str1\n       str2 = 'Does ' // c1 // 'ackslash result in ' // c1 // 'ackslash'\n-      if (str1 .ne. str2) call abort\n+      if (str1 .ne. str2) STOP 1\n \n       rewind(10)\n       write (10, 200)\n       rewind(10)\n       read(10,'(A37)') str3\n       str4 = 'Does ' //c2// 'backslash result in ' //c2// 'backslash'\n-      if (str3 .ne. str4) call abort\n+      if (str3 .ne. str4) STOP 2\n \n       stop\n  100  format ('Does \\backslash result in \\backslash')"}, {"sha": "6067901caf5008f6719b196b82734cd899e5a30a", "filename": "gcc/testsuite/gfortran.dg/backspace_1.f", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_1.f?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -11,26 +11,26 @@\n       write (20,*) 3\n       rewind (20)\n       read (20,*) i\n-      if (i .ne. 1) call abort\n+      if (i .ne. 1) STOP 1\n       write (*,*) ' '\n       backspace (20)\n       read (20,*) i\n-      if (i .ne. 1) call abort\n+      if (i .ne. 1) STOP 2\n       close (20)\n \n ! PR libfortran/20125\n       open (20, status='scratch')\n       write (20,*) 7\n       backspace (20)\n       read (20,*) i\n-      if (i .ne. 7) call abort\n+      if (i .ne. 7) STOP 3\n       close (20)\n \n       open (20, status='scratch', form='unformatted')\n       write (20) 8\n       backspace (20)\n       read (20) i\n-      if (i .ne. 8) call abort\n+      if (i .ne. 8) STOP 4\n       close (20)\n \n ! PR libfortran/20471\n@@ -44,7 +44,7 @@\n       read (3) (y(n),n=1,10)\n \n       do n = 1, 10\n-        if (abs(x(n)-y(n)) > 0.00001) call abort\n+        if (abs(x(n)-y(n)) > 0.00001) STOP 5\n       end do\n       close (3)\n \n@@ -61,22 +61,22 @@\n       nr = nr + 1\n       goto 20\n   30  continue\n-      if (nr .ne. 5) call abort\n+      if (nr .ne. 5) STOP 6\n \n       do i = 1, nr+1\n         backspace (3)\n       end do\n \n       do i = 1, nr\n         read(3,end=70,err=90) n, (x(n),n=1,10)\n-        if (abs(x(1) - i) .gt. 0.001) call abort\n+        if (abs(x(1) - i) .gt. 0.001) STOP 7\n       end do\n       close (3)\n       stop\n \n   70  continue\n-      call abort\n+      STOP 8\n   90  continue\n-      call abort\n+      STOP 9\n \n       end"}, {"sha": "a5c48246e4a8efda8aabeb7ef0ca83b7eb81d667", "filename": "gcc/testsuite/gfortran.dg/backspace_10.f90", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_10.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -17,21 +17,21 @@ program gfcbug69b\n   open (iunit, action=\"read\", status=\"old\")\n   \n   read (iunit,'(a)',iostat=ios) line\n-  if (ios /= 0) call abort\n+  if (ios /= 0) STOP 1\n   read (iunit,'(a)',iostat=ios) line\n-  if (ios /= 0) call abort\n+  if (ios /= 0) STOP 2\n   read (iunit,'(a)',iostat=ios) line\n-  if (ios /= 0) call abort\n+  if (ios /= 0) STOP 3\n   read (iunit,'(a)',iostat=ios) line\n   if (ios /= 0) backspace (iunit)\n   rewind (iunit)\n   read (iunit,'(a)',iostat=ios) line\n-  if (ios /= 0) call abort\n+  if (ios /= 0) STOP 4\n   read (iunit,'(a)',iostat=ios) line\n-  if (ios /= 0) call abort\n+  if (ios /= 0) STOP 5\n   read (iunit,'(a)',iostat=ios) line\n-  if (ios /= 0) call abort\n+  if (ios /= 0) STOP 6\n   read (iunit,'(a)',iostat=ios) line\n-  if (ios /= -1) call abort\n+  if (ios /= -1) STOP 7\n   close (iunit, status=\"delete\")\n end program gfcbug69b"}, {"sha": "f222a2c279c66db6ae5bc0429b30c71a605dfa1d", "filename": "gcc/testsuite/gfortran.dg/backspace_11.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_11.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -14,11 +14,11 @@ program backspace_11\n  !the file pointer is now at EOF\n \n  read(10,*,end=2) str\n- call abort\n+ STOP 1\n 2 backspace 10\n  !the file pointer is now at EOF\n \n  read(10,'(A)',end=3) str\n- call abort\n+ STOP 2\n 3 continue\n end program backspace_11"}, {"sha": "4fdcb27f97a774aca0acb910f86d417a886240b2", "filename": "gcc/testsuite/gfortran.dg/backspace_2.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_2.f?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -8,12 +8,12 @@\n       rewind 11\n       write(11) dat\n       read(11,end=1008) dat\n-      call abort()\n+      STOP 1\n  1008 continue\n       backspace 11\n       write(11) dat\n       read(11,end=1011) dat\n-      call abort()\n+      STOP 2\n  1011 continue\n       backspace 11\n       backspace 11"}, {"sha": "80fd40129a4e591c981ef671ef9aa7cfea6bf152", "filename": "gcc/testsuite/gfortran.dg/backspace_3.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_3.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_3.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_3.f?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -7,14 +7,14 @@\n        open(unit=11,status='scratch',form='unformatted')\n        write(11)data\n        read(11,end=        1000 )data\n-       call abort()\n+       STOP 1\n  1000  continue\n        backspace 11\n        backspace 11\n        backspace 11\n        read(11,end=        1001 )data\n  1001  continue\n-       if (data.ne.-1) call abort\n+       if (data.ne.-1) STOP 1\n        close(11)\n        end\n "}, {"sha": "8d28e6184f102edd7948f270170d987638fd23bc", "filename": "gcc/testsuite/gfortran.dg/backspace_4.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_4.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_4.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_4.f?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -7,12 +7,12 @@\n        open(unit=11,status='scratch',form='unformatted')\n        write(11)data\n        read(11,end=        1000 )data\n-       call abort()\n+       STOP 1\n  1000  continue\n        backspace 11\n        backspace 11\n        read(11,end=        1001 )data\n  1001  continue\n-       if (data.ne.-1) call abort\n+       if (data.ne.-1) STOP 1\n        close(11)\n        end"}, {"sha": "ed7f0ff7c9db5359856f05f2b417d81d3481a5ac", "filename": "gcc/testsuite/gfortran.dg/backspace_5.f", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_5.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_5.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_5.f?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -20,16 +20,16 @@ program test\n         idata(  datasize)   =  -5\n        write(11)idata\n        read(11,end=        1000 )idata\n-       call abort()\n+       STOP 1\n  1000  continue\n        backspace 11\n        backspace 11\n        backspace 11\n        read(11,end=        1001 )idata\n-       if(idata(1).ne.-3 .or. idata(datasize).ne.-4) call abort()\n+       if(idata(1).ne.-3 .or. idata(datasize).ne.-4) STOP 2\n        stop\n  1001  continue\n-       call abort()\n+       STOP 3\n  1010  stop\n        end\n "}, {"sha": "d76a6bf59b1d8c5e0dd944a4500dcf3611f5ab9e", "filename": "gcc/testsuite/gfortran.dg/backspace_6.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_6.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_6.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_6.f?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -22,12 +22,12 @@ program test\n         idata(datasize)   =  -3\n        write(11)idata\n        read(11,end=        1003 )idata\n-       call abort()\n+       STOP 1\n  1003  continue\n        backspace 11\n        backspace 11\n        read(11,end=        1004 )idata\n-       if(idata(1).ne.-2 .or.idata(datasize).ne.-3) call abort()\n+       if(idata(1).ne.-2 .or.idata(datasize).ne.-3) STOP 2\n        stop\n  1004  continue\n        end"}, {"sha": "d2ce623f68cf52aa5bdd792d86ff4cd9a49efb6d", "filename": "gcc/testsuite/gfortran.dg/backspace_7.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_7.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -7,5 +7,5 @@\n        backspace(10)\n        backspace(10)\n        read(10,*)I\n-       if (I.NE.199) call abort\n+       if (I.NE.199) STOP 1\n        end"}, {"sha": "26b60c2bbf17663f0f39341df21619323ca43ba3", "filename": "gcc/testsuite/gfortran.dg/backspace_8.f", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_8.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_8.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_8.f?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -11,10 +11,10 @@ program main\n       rewind (21)\n       read (21) i,j\n       read (21,err=100,end=100) i,j,k\n-      call abort\n+      STOP 1\n  100  continue\n       backspace 21\n       read (21) i,j\n-      if (i .ne. 4711 .or. j .ne. 4712) call abort\n+      if (i .ne. 4711 .or. j .ne. 4712) STOP 2\n       close (21,status=\"delete\")\n       end"}, {"sha": "ce93f5400538c300c527e9e2642d39a3d2110133", "filename": "gcc/testsuite/gfortran.dg/backspace_9.f", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_9.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_9.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbackspace_9.f?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -17,7 +17,7 @@ program main\n       call inlist(ncards)\n \n       read(input,1000)a\n-      if (a.ne.\"Three\") call abort\n+      if (a.ne.\"Three\") STOP 1\n       close(10,status=\"delete\")\n       stop\n  1000 format(a10)\n@@ -38,9 +38,9 @@ subroutine inlist(ncards)\n    30 read(input,1000,end=60)   data\n    40 kard=kard + 1\n    50 continue\n-      if ((kard .eq. 1) .and. (DATA(1) .ne. \"One\")) call abort\n-      if ((kard .eq. 2) .and. (DATA(1) .ne. \"Two\")) call abort\n-      if ((kard .eq. 3) .and. (DATA(1) .ne. \"Thre\")) call abort\n+      if ((kard .eq. 1) .and. (DATA(1) .ne. \"One\")) STOP 2\n+      if ((kard .eq. 2) .and. (DATA(1) .ne. \"Two\")) STOP 3\n+      if ((kard .eq. 3) .and. (DATA(1) .ne. \"Thre\")) STOP 4\n \n       go to 30\n    60 continue"}, {"sha": "3493d7e1103f861232ac78c0637710ad3069422d", "filename": "gcc/testsuite/gfortran.dg/bessel_1.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_1.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -28,10 +28,10 @@ program test\n contains\n   subroutine check_r4 (a, b)\n     real(kind=4), intent(in) :: a, b\n-    if (abs(a - b) > 1.e-5 * abs(b)) call abort\n+    if (abs(a - b) > 1.e-5 * abs(b)) STOP 1\n   end subroutine\n   subroutine check_r8 (a, b)\n     real(kind=8), intent(in) :: a, b\n-    if (abs(a - b) > 1.e-7 * abs(b)) call abort\n+    if (abs(a - b) > 1.e-7 * abs(b)) STOP 2\n   end subroutine\n end program test"}, {"sha": "f57799e9f729635c88950e510d003ee89b3eb333", "filename": "gcc/testsuite/gfortran.dg/bessel_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_2.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -13,5 +13,5 @@ program bug3\n    integer, parameter :: kind_if_real = &\n       (1-is_int)*k2+is_int*kind(1.0)\n    complex :: z = cmplx(0,1,kind_if_real) ! FAILS\n-   if (kind_if_real /= kind(Qarg1)) call abort ()\n+   if (kind_if_real /= kind(Qarg1)) STOP 1\n end program bug3"}, {"sha": "e61ec4baba14f9f1e8800fef39ab20a57001305b", "filename": "gcc/testsuite/gfortran.dg/bessel_5.f90", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_5.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -21,15 +21,15 @@\n if (any (abs (BESSEL_JN(2, 5, 2.457) - [(BESSEL_JN(i, 2.457), i = 2, 5)]) &\n           > epsilon(0.0))) then\n   print *, 'FAIL 1'\n-  call abort()\n+  STOP 1\n end if\n \n \n ! Difference to mpfr_yn <= 4 epsilon\n \n if (any (abs (BESSEL_YN(2, 5, 2.457) - [(BESSEL_YN(i, 2.457), i = 2, 5)]) &\n          > epsilon(0.0)*4)) then\n-  call abort()\n+  STOP 2\n end if\n \n \n@@ -38,7 +38,7 @@\n if (any (abs (BESSEL_JN(0, 10, 4.457) &\n               - [ (BESSEL_JN(i, 4.457), i = 0, 10) ]) &\n          > epsilon(0.0))) then\n-  call abort()\n+  STOP 3\n end if\n \n \n@@ -47,23 +47,23 @@\n if (any (abs (BESSEL_YN(0, 10, 4.457) &\n               - [ (BESSEL_YN(i, 4.457), i = 0, 10) ]) &\n          > epsilon(0.0)*192)) then\n-  call abort()\n+  STOP 4\n end if\n \n \n ! Difference to mpfr_jn: None.  (Special case: X = 0.0)\n \n if (any (BESSEL_JN(0, 10, 0.0) /= [ (BESSEL_JN(i, 0.0), i = 0, 10) ])) &\n then\n-  call abort()\n+  STOP 5\n end if\n \n \n ! Difference to mpfr_yn: None.  (Special case: X = 0.0)\n \n if (any (BESSEL_YN(0, 10, 0.0) /= [ (BESSEL_YN(i, 0.0), i = 0, 10) ])) &\n then\n-  call abort()\n+  STOP 6\n end if\n \n \n@@ -72,15 +72,15 @@\n if (any (abs (BESSEL_JN(0, 10, 1.0) &\n               - [ (BESSEL_JN(i, 1.0), i = 0, 10) ]) &\n          > epsilon(0.0)*1)) then\n- call abort()\n+ STOP 7\n end if\n \n ! Difference to mpfr_yn <= 32 epsilon\n \n if (any (abs (BESSEL_YN(0, 10, 1.0) &\n               - [ (BESSEL_YN(i, 1.0), i = 0, 10) ]) &\n          > epsilon(0.0)*32)) then\n-  call abort()\n+  STOP 8\n end if\n \n end"}, {"sha": "e2336a2b4a049e62f0c89209f0399b1d49773603", "filename": "gcc/testsuite/gfortran.dg/bessel_6.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_6.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -43,7 +43,7 @@ subroutine compare(mymax, X, myeps)\n !        rec(i) == lib(i), abs((rec(i)-lib(i))/rec(i)) < myeps\n if (rec(i) == lib(i)) CYCLE\n if (abs((rec(i)-lib(i))/rec(i)) > myeps) &\n-  call abort()\n+  STOP 1\n end do\n \n end"}, {"sha": "16bb4847e2759d934582021218b6695f0e95b569", "filename": "gcc/testsuite/gfortran.dg/bessel_7.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbessel_7.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -49,9 +49,9 @@ subroutine compare(X, myeps, nit, myeps2)\n !        rec(i) == lib(i) .or. abs((rec(i)-lib(i))/rec(i)) < myeps\n if (.not. (i > nit .or. rec(i) == lib(i) &\n                    .or. abs((rec(i)-lib(i))/rec(i)) < myeps2)) &\n-  call abort ()\n+  STOP 1\n if (.not. (rec(i) == lib(i) .or. abs((rec(i)-lib(i))/rec(i)) < myeps)) &\n-  call abort ()\n+  STOP 2\n end do\n \n end"}, {"sha": "fc77d1e2a45badb7d9182346b03d1aa8cde9ee55", "filename": "gcc/testsuite/gfortran.dg/bind_c_dts_2.f03", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_dts_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_dts_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_dts_2.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -30,32 +30,32 @@ subroutine sub0(my_type, expected_i, expected_nested_c_address, &\n     integer(c_int), value :: expected_j\n \n     if (my_type%my_nested_type%i .ne. expected_i) then\n-       call abort ()\n+       STOP 1\n     end if\n \n     if (.not. c_associated(my_type%my_nested_type%nested_c_address, &\n          expected_nested_c_address)) then\n-       call abort ()\n+       STOP 2\n     end if\n \n     if (my_type%my_nested_type%array(1) .ne. expected_array_1) then\n-       call abort ()\n+       STOP 3\n     end if\n \n     if (my_type%my_nested_type%array(2) .ne. expected_array_2) then\n-       call abort ()\n+       STOP 4\n     end if\n \n     if (my_type%my_nested_type%array(3) .ne. expected_array_3) then\n-       call abort ()\n+       STOP 5\n     end if\n \n     if (.not. c_associated(my_type%c_address, expected_c_address)) then\n-       call abort ()\n+       STOP 6\n     end if\n \n     if (my_type%j .ne. expected_j) then\n-       call abort ()\n+       STOP 7\n     end if\n   end subroutine sub0\n end module bind_c_dts_2"}, {"sha": "71a9b4c50b82ffbf04af9c1edd4a13301e1ebfa0", "filename": "gcc/testsuite/gfortran.dg/bind_c_dts_3.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_dts_3.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_dts_3.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_dts_3.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -31,7 +31,7 @@ subroutine sub0(my_type, expected_value) bind(c)\n     integer(c_int), value :: expected_value\n \n     if (my_type%my_nested_type%i .ne. expected_value) then\n-       call abort ()\n+       STOP 1\n     end if\n   end subroutine sub0\n end module bind_c_dts_3"}, {"sha": "5e5495e9226886d542adcf82c61812a4d8f882ef", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_15.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_15.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -25,5 +25,5 @@ program main\n   integer(c_int) :: x\n   x = -44\n   call gen(x)\n-  if(x /= 17) call abort()\n+  if(x /= 17) STOP 1\n end program main"}, {"sha": "45305812a2881b17829af20767c803b18d949e55", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_16.f03", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_16.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_16.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_16.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -35,23 +35,23 @@ subroutine test() bind(c)\n   d = 'uuuuu'\n \n   a = bar('x')\n-  if (a /= 'A') call abort()\n+  if (a /= 'A') STOP 1\n   b = bar('y')\n-  if (b /= 'A' .or. iachar(b(2:2))/=32 .or. iachar(b(3:3))/=32) call abort()\n+  if (b /= 'A' .or. iachar(b(2:2))/=32 .or. iachar(b(3:3))/=32) STOP 2\n   c = bar('x')\n-  if (any(c /= 'A')) call abort()\n+  if (any(c /= 'A')) STOP 3\n   d = bar('y')\n-  if (any(d /= 'A')) call abort()\n+  if (any(d /= 'A')) STOP 4\n \n   a = foo()\n-  if (a /= 'B') call abort()\n+  if (a /= 'B') STOP 5\n   b = foo()\n-  if (b /= 'B') call abort()\n+  if (b /= 'B') STOP 6\n   c = foo()\n-  if (any(c /= 'B')) call abort()\n+  if (any(c /= 'B')) STOP 7\n   d = foo()\n-  if (any(d /= 'B')) call abort()\n+  if (any(d /= 'B')) STOP 8\n   do i = 1,3\n-    if(iachar(d(i)(2:2)) /=32 .or. iachar(d(i)(3:3)) /= 32) call abort()\n+    if(iachar(d(i)(2:2)) /=32 .or. iachar(d(i)(3:3)) /= 32) STOP 9\n   end do\n end subroutine"}, {"sha": "69702c43bb14119630b075627d775a70936f43da", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_17.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_17.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -22,15 +22,15 @@ PROGRAM test\n   str1 = 'x'\n   str4 = 'xyzz'\n   str1 = cdir()\n-  if(str1 /= '/') call abort()\n+  if(str1 /= '/') STOP 1\n   str4 = cdir()\n-  if(str4 /= '/' .or. ichar(str4(2:2)) /= 32) call abort()\n+  if(str4 /= '/' .or. ichar(str4(2:2)) /= 32) STOP 2\n   i   = ICHAR(cdir())\n-  if (i /= 47) call abort()\n+  if (i /= 47) STOP 3\n   str4 = 'xyzz'\n   WRITE(str4,'(a)') cdir()\n-  if(str4 /= '/' .or. ichar(str4(2:2)) /= 32) call abort()\n+  if(str4 /= '/' .or. ichar(str4(2:2)) /= 32) STOP 4\n   str4 = 'xyzz'\n   WRITE(str4,'(i0)') ICHAR(cdir())\n-  if(str4 /= '47' .or. ichar(str4(3:3)) /= 32) call abort()\n+  if(str4 /= '47' .or. ichar(str4(3:3)) /= 32) STOP 5\n END PROGRAM"}, {"sha": "a3167a5672190a0ed890a0ab4ee7ac4117de8345", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_24.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_24.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_24.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_24.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -20,11 +20,11 @@ subroutine subtest (is_present, var) bind(C)\n     logical(c_bool), intent(in),    value    :: is_present\n     integer(c_int),  intent(inout), optional :: var\n     if (is_present) then\n-      if (.not. present (var)) call abort ()\n-      if (var /= 43) call abort ()\n+      if (.not. present (var)) STOP 1\n+      if (var /= 43) STOP 2\n       var = -45\n     else\n-      if (present (var)) call abort ()\n+      if (present (var)) STOP 3\n     end if\n   end subroutine subtest\n end module m\n@@ -37,5 +37,5 @@ program test\n   val = 4\n   call c_proc (.false._c_bool)\n   call c_proc (.true._c_bool, val)\n-  if (val /= 7) call abort ()\n+  if (val /= 7) STOP 4\n end program test"}, {"sha": "30ad436559cd2d201d5ac068611306573bf47d9a", "filename": "gcc/testsuite/gfortran.dg/binding_c_table_15_1.f03", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_c_table_15_1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_c_table_15_1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_c_table_15_1.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -3,12 +3,12 @@\n program a\n   use, intrinsic :: iso_c_binding\n   implicit none\n-  if (C_NULL_CHAR       /=  CHAR(0) ) call abort\n-  if (C_ALERT           /= ACHAR(7) ) call abort\n-  if (C_BACKSPACE       /= ACHAR(8) ) call abort\n-  if (C_FORM_FEED       /= ACHAR(12)) call abort\n-  if (C_NEW_LINE        /= ACHAR(10)) call abort\n-  if (C_CARRIAGE_RETURN /= ACHAR(13)) call abort\n-  if (C_HORIZONTAL_TAB  /= ACHAR(9) ) call abort\n-  if (C_VERTICAL_TAB    /= ACHAR(11)) call abort\n+  if (C_NULL_CHAR       /=  CHAR(0) ) STOP 1\n+  if (C_ALERT           /= ACHAR(7) ) STOP 2\n+  if (C_BACKSPACE       /= ACHAR(8) ) STOP 3\n+  if (C_FORM_FEED       /= ACHAR(12)) STOP 4\n+  if (C_NEW_LINE        /= ACHAR(10)) STOP 5\n+  if (C_CARRIAGE_RETURN /= ACHAR(13)) STOP 6\n+  if (C_HORIZONTAL_TAB  /= ACHAR(9) ) STOP 7\n+  if (C_VERTICAL_TAB    /= ACHAR(11)) STOP 8\n end program a"}, {"sha": "b7f6e034c77bde920e17289a580e3be071884e57", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_16.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_16.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_16.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_16.f03?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -17,5 +17,5 @@ program prog\n use n, b=>a\n implicit none\n   print *, a, b\n-  if (a /= 5 .or. b /= -5) call abort()\n+  if (a /= 5 .or. b /= -5) STOP 1\n end program prog"}, {"sha": "f31abe9c00cb041e5886c1e98a620f8362c78cde", "filename": "gcc/testsuite/gfortran.dg/binding_label_tests_23.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbinding_label_tests_23.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -4,7 +4,7 @@\n !\n integer function foo(x)\n   integer :: x\n-  call abort()\n+  STOP 1\n   foo = 99\n end function foo\n \n@@ -17,5 +17,5 @@ program test\n     integer function foo() bind(C, name=\"bar\")\n     end function foo\n   end interface\n-  if (foo() /= 42) call abort()  ! Ensure that the binding name is all what counts\n+  if (foo() /= 42) STOP 2  ! Ensure that the binding name is all what counts\n end program test"}, {"sha": "2a17e5a44dea556b41b63f7b3099777ae069dac0", "filename": "gcc/testsuite/gfortran.dg/bit_comparison_1.F90", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbit_comparison_1.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbit_comparison_1.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbit_comparison_1.F90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -32,14 +32,14 @@\n   end interface\n \n #define CHECK(I,J,RES) \\\n-  if (bge(I,J) .neqv. RES) call abort ; \\\n-  if (run_bge(I,J) .neqv. RES) call abort ; \\\n-  if (bgt(I,J) .neqv. (RES .and. (I/=J))) call abort ; \\\n-  if (run_bgt(I,J) .neqv. (RES .and. (I/=J))) call abort ; \\\n-  if (ble(J,I) .neqv. RES) call abort ; \\\n-  if (run_ble(J,I) .neqv. RES) call abort ; \\\n-  if (blt(J,I) .neqv. (RES .and. (I/=J))) call abort ; \\\n-  if (run_blt(J,I) .neqv. (RES .and. (I/=J))) call abort\n+  if (bge(I,J) .neqv. RES) STOP 1; \\\n+  if (run_bge(I,J) .neqv. RES) STOP 2; \\\n+  if (bgt(I,J) .neqv. (RES .and. (I/=J))) STOP 3; \\\n+  if (run_bgt(I,J) .neqv. (RES .and. (I/=J))) STOP 4; \\\n+  if (ble(J,I) .neqv. RES) STOP 5; \\\n+  if (run_ble(J,I) .neqv. RES) STOP 6; \\\n+  if (blt(J,I) .neqv. (RES .and. (I/=J))) STOP 7; \\\n+  if (run_blt(J,I) .neqv. (RES .and. (I/=J))) STOP 8\n \n #define T .true.\n #define F .false."}, {"sha": "71513ed2dccbb8d67c9ec7f05e02f66a04a408d7", "filename": "gcc/testsuite/gfortran.dg/bit_comparison_2.F90", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbit_comparison_2.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fbit_comparison_2.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbit_comparison_2.F90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -5,14 +5,14 @@\n ! { dg-require-effective-target fortran_integer_16 }\n \n #define CHECK(I,J,RES) \\\n-  if (bge(I,J) .neqv. RES) call abort ; \\\n-  if (run_bge(I,J) .neqv. RES) call abort ; \\\n-  if (bgt(I,J) .neqv. (RES .and. (I/=J))) call abort ; \\\n-  if (run_bgt(I,J) .neqv. (RES .and. (I/=J))) call abort ; \\\n-  if (ble(J,I) .neqv. RES) call abort ; \\\n-  if (run_ble(J,I) .neqv. RES) call abort ; \\\n-  if (blt(J,I) .neqv. (RES .and. (I/=J))) call abort ; \\\n-  if (run_blt(J,I) .neqv. (RES .and. (I/=J))) call abort\n+  if (bge(I,J) .neqv. RES) STOP 1; \\\n+  if (run_bge(I,J) .neqv. RES) STOP 2; \\\n+  if (bgt(I,J) .neqv. (RES .and. (I/=J))) STOP 3; \\\n+  if (run_bgt(I,J) .neqv. (RES .and. (I/=J))) STOP 4; \\\n+  if (ble(J,I) .neqv. RES) STOP 5; \\\n+  if (run_ble(J,I) .neqv. RES) STOP 6; \\\n+  if (blt(J,I) .neqv. (RES .and. (I/=J))) STOP 7; \\\n+  if (run_blt(J,I) .neqv. (RES .and. (I/=J))) STOP 8\n \n #define T .true.\n #define F .false."}, {"sha": "8f9ff5750173e5a80e2158cdef4ce982d4273ad7", "filename": "gcc/testsuite/gfortran.dg/block_1.f08", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_1.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_1.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_1.f08?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run }\n-! { dg-options \"-std=f2008 -fall-intrinsics\" }\n+! { dg-options \"-std=f2008 \" }\n \n ! Basic Fortran 2008 BLOCK construct test.\n \n@@ -15,20 +15,20 @@ PROGRAM main\n \n   ! Block without local variables but name.\n   BLOCK\n-    IF (i /= 42) CALL abort ()\n+    IF (i /= 42) STOP 1\n     i = 5\n   END BLOCK\n-  IF (i /= 5) CALL abort ()\n+  IF (i /= 5) STOP 2\n \n   ! Named block with local variable and nested block.\n   myblock: BLOCK\n     INTEGER :: i\n     i = -1\n     BLOCK\n-      IF (i /= -1) CALL abort ()\n+      IF (i /= -1) STOP 3\n       i = -2\n     END BLOCK\n-    IF (i /= -2) CALL abort ()\n+    IF (i /= -2) STOP 4\n   END BLOCK myblock ! Matching end-label.\n-  IF (i /= 5) CALL abort ()\n+  IF (i /= 5) STOP 5\n END PROGRAM main"}, {"sha": "b3df6aa440d24af10a6f4eb93bc6ba355ab3ba56", "filename": "gcc/testsuite/gfortran.dg/block_13.f08", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_13.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_13.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_13.f08?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -41,13 +41,13 @@ program main\n contains\n   subroutine check (arg1, arg2)\n     real :: arg1, arg2\n-    if (arg1 .ne. arg2) call abort ()\n+    if (arg1 .ne. arg2) STOP 1\n   end subroutine\n \n   subroutine check_chr (arg1, arg2)\n     character(*) :: arg1, arg2\n-    if (len (arg1) .ne. len (arg2)) call abort\n-    if (arg1 .ne. arg2) call abort\n+    if (len (arg1) .ne. len (arg2)) STOP 1\n+    if (arg1 .ne. arg2) STOP 2\n   end subroutine\n \n   type(type1) function foo (arg)"}, {"sha": "824cb6ab2b7dd75ca52430312cdca7755a06b82b", "filename": "gcc/testsuite/gfortran.dg/block_14.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_14.f90?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -17,5 +17,5 @@ program main\n       end block\n     end block\n   end block\n-  if (s /= 9) call abort\n+  if (s /= 9) STOP 1\n end program main"}, {"sha": "319fca79e95ce176cc42c816566cc061f761c2db", "filename": "gcc/testsuite/gfortran.dg/block_2.f08", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_2.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_2.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_2.f08?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run }\n-! { dg-options \"-std=f2008 -fall-intrinsics -fdump-tree-original\" }\n+! { dg-options \"-std=f2008  -fdump-tree-original\" }\n \n ! More sophisticated BLOCK runtime checks for correct initialization/clean-up.\n \n@@ -11,28 +11,28 @@ PROGRAM main\n \n   myblock: BLOCK\n     INTEGER :: arr(n)\n-    IF (SIZE (arr) /= 5) CALL abort ()\n+    IF (SIZE (arr) /= 5) STOP 1\n     BLOCK\n       INTEGER :: arr(2*n)\n-      IF (SIZE (arr) /= 10) CALL abort ()\n+      IF (SIZE (arr) /= 10) STOP 2\n     END BLOCK\n-    IF (SIZE (arr) /= 5) CALL abort ()\n+    IF (SIZE (arr) /= 5) STOP 3\n   END BLOCK myblock\n \n   BLOCK\n     INTEGER, ALLOCATABLE :: alloc_arr(:)\n-    IF (ALLOCATED (alloc_arr)) CALL abort ()\n+    IF (ALLOCATED (alloc_arr)) STOP 4\n     ALLOCATE (alloc_arr(n))\n-    IF (SIZE (alloc_arr) /= 5) CALL abort ()\n+    IF (SIZE (alloc_arr) /= 5) STOP 5\n     ! Should be free'ed here (but at least somewhere), this is checked\n     ! with pattern below.\n   END BLOCK\n \n   BLOCK\n     CHARACTER(LEN=n) :: str\n-    IF (LEN (str) /= 5) CALL abort ()\n+    IF (LEN (str) /= 5) STOP 6\n     str = \"123456789\"\n-    IF (str /= \"12345\") CALL abort ()\n+    IF (str /= \"12345\") STOP 7\n   END BLOCK\n END PROGRAM main\n ! { dg-final { scan-tree-dump-times \"free \\\\(\\\\(void \\\\*\\\\) alloc_arr\\\\.data\" 1 \"original\" } }"}, {"sha": "c8cadb34d327b55727015e82e43c1590238bb81a", "filename": "gcc/testsuite/gfortran.dg/block_6.f08", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_6.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ce202609bd8bcbd8618507cef32e793b477e4/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_6.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fblock_6.f08?ref=7d6ce202609bd8bcbd8618507cef32e793b477e4", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do run { xfail *-*-* } }\n-! { dg-options \"-std=f2008 -fall-intrinsics\" }\n+! { dg-options \"-std=f2008 \" }\n \n ! Check for correct scope of variables that are implicit typed within a BLOCK.\n ! This is not yet implemented, thus XFAIL'ed the test.\n@@ -13,5 +13,5 @@ PROGRAM main\n   END BLOCK\n \n   ! Here, we should still access the same a that was set above.\n-  IF (a /= 42) CALL abort ()\n+  IF (a /= 42) STOP 1\n END PROGRAM main"}]}