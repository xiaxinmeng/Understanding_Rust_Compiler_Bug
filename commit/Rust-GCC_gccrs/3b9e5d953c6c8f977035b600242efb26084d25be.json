{"sha": "3b9e5d953c6c8f977035b600242efb26084d25be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I5ZTVkOTUzYzZjOGY5NzcwMzViNjAwMjQyZWZiMjYwODRkMjViZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-18T21:49:29Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-04-18T21:49:29Z"}, "message": "fold-const.c (fold_comparison): Use ssizetype.\n\n2010-04-18 \u00a0Eric Botcazou \u00a0<ebotcazou@adacore.com>\n\n\t* fold-const.c (fold_comparison): Use ssizetype.\n\t* gimple-fold.c (maybe_fold_offset_to_array_ref): Likewise.\n\t* ipa-prop.c (ipa_modify_call_arguments): Use sizetype.\n\t* tree-loop-distribution.c (build_size_arg_loc): Likewise.\n\t* tree-object-size.c (compute_object_sizes): Use size_type_node.\n\n\t* tree.h (initialize_sizetypes): Remove parameter.\n\t(build_common_tree_nodes): Remove second parameter.\n\t* stor-layout.c (initialize_sizetypes): Remove parameter.\n\tAlways create an unsigned type.\n\t(set_sizetype): Assert that the passed type is unsigned and simplify.\n\t* tree.c (build_common_tree_nodes): Remove second parameter.\n\tAdjust call to initialize_sizetypes.\n\t* c-decl.c (c_init_decl_processing): Remove second argument in call to\n\tbuild_common_tree_nodes.\ncp/\n\t* decl.c (cxx_init_decl_processing): Remove second argument in call to\n\tbuild_common_tree_nodes.\njava/\n\t* decl.c (java_init_decl_processing): Remove argument in call to\n\tinitialize_sizetypes\nfortran/\n\t* f95-lang.c (gfc_init_decl_processing): Remove second argument in call\n\tto build_common_tree_nodes.\nada/\n\t* gcc-interface/misc.c (gnat_init): Remove second argument in call to\n\tbuild_common_tree_nodes.\nlto/\n\t* lto-lang.c (lto_init): Remove second argument in call to\n\tbuild_common_tree_nodes.\n\nFrom-SVN: r158496", "tree": {"sha": "abb5e5a28274a29b2192f0299a551011760fbf42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abb5e5a28274a29b2192f0299a551011760fbf42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b9e5d953c6c8f977035b600242efb26084d25be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b9e5d953c6c8f977035b600242efb26084d25be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b9e5d953c6c8f977035b600242efb26084d25be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b9e5d953c6c8f977035b600242efb26084d25be/comments", "author": null, "committer": null, "parents": [{"sha": "b3c359652e9323f202e530d5948185504b2b4882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3c359652e9323f202e530d5948185504b2b4882", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3c359652e9323f202e530d5948185504b2b4882"}], "stats": {"total": 178, "additions": 98, "deletions": 80}, "files": [{"sha": "2490cb2b0e4781da26969521f9c45b585868c2d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -1,3 +1,21 @@\n+2010-04-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fold-const.c (fold_comparison): Use ssizetype.\n+\t* gimple-fold.c (maybe_fold_offset_to_array_ref): Likewise.\n+\t* ipa-prop.c (ipa_modify_call_arguments): Use sizetype.\n+\t* tree-loop-distribution.c (build_size_arg_loc): Likewise.\n+\t* tree-object-size.c (compute_object_sizes): Use size_type_node.\n+\n+\t* tree.h (initialize_sizetypes): Remove parameter.\n+\t(build_common_tree_nodes): Remove second parameter.\n+\t* stor-layout.c (initialize_sizetypes): Remove parameter.\n+\tAlways create an unsigned type.\n+\t(set_sizetype): Assert that the passed type is unsigned and simplify.\n+\t* tree.c (build_common_tree_nodes): Remove second parameter.\n+\tAdjust call to initialize_sizetypes.\n+\t* c-decl.c (c_init_decl_processing): Remove second argument in call to\n+\tbuild_common_tree_nodes.\n+\n 2010-04-18  Matthias Klose  <doko@ubuntu.com>\n \n \t* gcc.c (main): Search for liblto_plugin.so with mode R_OK."}, {"sha": "76aa31591c1355ee1319b401a31a59253d2db021", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -1,3 +1,8 @@\n+2010-04-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/misc.c (gnat_init): Remove second argument in call to\n+\tbuild_common_tree_nodes.\n+\n 2010-04-18  Ozkan Sezer  <sezeroz@gmail.com>\n \n \t* gsocket.h: Make sure that winsock2.h is included before windows.h."}, {"sha": "41c61853c7065441d40a4ca35a661129181e021b", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -391,7 +391,7 @@ gnat_init (void)\n   /* Do little here, most of the standard declarations are set up after the\n      front-end has been run.  Use the same `char' as C, this doesn't really\n      matter since we'll use the explicit `unsigned char' for Character.  */\n-  build_common_tree_nodes (flag_signed_char, false);\n+  build_common_tree_nodes (flag_signed_char);\n \n   /* In Ada, we use the unsigned type corresponding to the width of Pmode as\n      SIZETYPE.  In most cases when ptr_mode and Pmode differ, C will use the"}, {"sha": "230b4aada9468f2741f2c2df1452c6dfcdbc4843", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -3454,7 +3454,7 @@ c_init_decl_processing (void)\n      using preprocessed headers.  */\n   input_location = BUILTINS_LOCATION;\n \n-  build_common_tree_nodes (flag_signed_char, false);\n+  build_common_tree_nodes (flag_signed_char);\n \n   c_common_nodes_and_builtins ();\n "}, {"sha": "0c59a92d3e3f6eba081c0e399cec78f16f2ab9a7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -1,3 +1,8 @@\n+2010-04-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* decl.c (cxx_init_decl_processing): Remove second argument in call to\n+\tbuild_common_tree_nodes.\n+\n 2010-04-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/36625"}, {"sha": "c31aa5ccefc6061ac7ed00caef0bf3e84d71e5bc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -3358,7 +3358,7 @@ cxx_init_decl_processing (void)\n   tree void_ftype;\n   tree void_ftype_ptr;\n \n-  build_common_tree_nodes (flag_signed_char, false);\n+  build_common_tree_nodes (flag_signed_char);\n \n   /* Create all the identifiers we need.  */\n   initialize_predefined_identifiers ();"}, {"sha": "85f9cd1fd91611f6ff79f552bef4c87aa76ee5bc", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -8695,24 +8695,19 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t\t   && ((code == EQ_EXPR || code == NE_EXPR)\n \t\t       || POINTER_TYPE_OVERFLOW_UNDEFINED))\n \t    {\n-\t      tree signed_size_type_node;\n-\t      signed_size_type_node = signed_type_for (size_type_node);\n-\n \t      /* By converting to signed size type we cover middle-end pointer\n \t         arithmetic which operates on unsigned pointer types of size\n \t         type size and ARRAY_REF offsets which are properly sign or\n \t         zero extended from their type in case it is narrower than\n \t         size type.  */\n \t      if (offset0 == NULL_TREE)\n-\t\toffset0 = build_int_cst (signed_size_type_node, 0);\n+\t\toffset0 = build_int_cst (ssizetype, 0);\n \t      else\n-\t\toffset0 = fold_convert_loc (loc, signed_size_type_node,\n-\t\t\t\t\t    offset0);\n+\t\toffset0 = fold_convert_loc (loc, ssizetype, offset0);\n \t      if (offset1 == NULL_TREE)\n-\t\toffset1 = build_int_cst (signed_size_type_node, 0);\n+\t\toffset1 = build_int_cst (ssizetype, 0);\n \t      else\n-\t\toffset1 = fold_convert_loc (loc, signed_size_type_node,\n-\t\t\t\t\t    offset1);\n+\t\toffset1 = fold_convert_loc (loc, ssizetype, offset1);\n \n \t      if (code != EQ_EXPR\n \t\t  && code != NE_EXPR"}, {"sha": "61297f9f12c46537dab53abdb5ecee98318d2147", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -1,12 +1,17 @@\n+2010-04-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* f95-lang.c (gfc_init_decl_processing): Remove second argument in call\n+\tto build_common_tree_nodes.\n+\n 2010-04-17  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n-   PR fortran/31538\n-   * fortran/trans-array.c (gfc_conv_ss_startstride): Remove the use of\n-   gfc_msg_bounds by using 'Array bound mismatch' directly.\n-   (gfc_trans_dummy_array_bias):  Remove the use of gfc_msg_bounds.  Reword\n-   error message to include the mismatch in the extent of array bound.\n-   * fortran/trans.c: Remove gfc_msg_bounds.  It is only used in one place.\n-   * fortran/trans.h: Remove extern definition of gfc_msg_bounds.\n+\tPR fortran/31538\n+\t* fortran/trans-array.c (gfc_conv_ss_startstride): Remove the use of\n+\tgfc_msg_bounds by using 'Array bound mismatch' directly.\n+\t(gfc_trans_dummy_array_bias):  Remove the use of gfc_msg_bounds.  Reword\n+\terror message to include the mismatch in the extent of array bound.\n+\t* fortran/trans.c: Remove gfc_msg_bounds.  It is only used in one place.\n+\t* fortran/trans.h: Remove extern definition of gfc_msg_bounds.\n \n 2010-04-17  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n "}, {"sha": "96ff8bb2ef3f9c65f6b4209382c1f26f32d9760d", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -542,7 +542,7 @@ gfc_init_decl_processing (void)\n   /* Build common tree nodes. char_type_node is unsigned because we\n      only use it for actual characters, not for INTEGER(1). Also, we\n      want double_type_node to actually have double precision.  */\n-  build_common_tree_nodes (false, false);\n+  build_common_tree_nodes (false);\n   /* x86_64 mingw32 has a sizetype of \"unsigned long long\", most other hosts\n      have a sizetype of \"unsigned long\". Therefore choose the correct size\n      in mostly target independent way.  */"}, {"sha": "ab076348be0e216fc3a4b27aac25e61c2cc1df04", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -159,7 +159,7 @@ maybe_fold_offset_to_array_ref (location_t loc, tree base, tree offset,\n     return NULL_TREE;\n \n   /* Use signed size type for intermediate computation on the index.  */\n-  idx_type = signed_type_for (size_type_node);\n+  idx_type = ssizetype;\n \n   /* If OFFSET and ELT_OFFSET are zero, we don't care about the size of the\n      element type (so we can use the alignment if it's not constant)."}, {"sha": "ec9f63d89a7b4abc9077759b8eefabcf39047c14", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -1700,7 +1700,7 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gimple stmt,\n \t      if (!useless_type_conversion_p (ptrtype, TREE_TYPE (expr)))\n \t\texpr = fold_convert (ptrtype, expr);\n \t      expr = fold_build2 (POINTER_PLUS_EXPR, ptrtype, expr,\n-\t\t\t\t  build_int_cst (size_type_node,\n+\t\t\t\t  build_int_cst (sizetype,\n \t\t\t\t\t\t adj->offset / BITS_PER_UNIT));\n \t      if (!adj->by_ref)\n \t\texpr = fold_build1 (INDIRECT_REF, adj->type, expr);"}, {"sha": "b88bd1974ed49777f37ce4ac169a6b16d7705f3a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -1,3 +1,8 @@\n+2010-04-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* decl.c (java_init_decl_processing): Remove argument in call to\n+\tinitialize_sizetypes\n+\n 2010-04-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* exception.cc (_Jv_Throw): Avoid set but not used warning."}, {"sha": "4cd4d9668dc77e484361c8fc4fdf47afa77b5d98", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -579,7 +579,7 @@ java_init_decl_processing (void)\n   TREE_TYPE (error_mark_node) = error_mark_node;\n \n   /* Create sizetype first - needed for other types. */\n-  initialize_sizetypes (false);\n+  initialize_sizetypes ();\n \n   byte_type_node = make_signed_type (8);\n   pushdecl (build_decl (BUILTINS_LOCATION,"}, {"sha": "464a2ef28c3fe8f1f6910dd77fb6c7df298db50e", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -1,3 +1,8 @@\n+2010-04-18  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* lto-lang.c (lto_init): Remove second argument in call to\n+\tbuild_common_tree_nodes.\n+\n 2010-04-16  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* lto-elf.c [!HAVE_ELF_GETSHDRSTRNDX] (elf_getshdrstrndx): New"}, {"sha": "aea5ab22d35a690dd71f924efccfc5627f1b8454", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -1039,7 +1039,7 @@ lto_init (void)\n   linemap_add (line_table, LC_RENAME, 0, NULL, 0);\n \n   /* Create the basic integer types.  */\n-  build_common_tree_nodes (flag_signed_char, /*signed_sizetype=*/false);\n+  build_common_tree_nodes (flag_signed_char);\n \n   /* Share char_type_node with whatever would be the default for the target.\n      char_type_node will be used for internal types such as"}, {"sha": "151092c06a4af9e667a2362e2e4668b5afb595cc", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 27, "deletions": 45, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -2214,37 +2214,35 @@ make_accum_type (int precision, int unsignedp, int satp)\n    value to enable integer types to be created.  */\n \n void\n-initialize_sizetypes (bool signed_p)\n+initialize_sizetypes (void)\n {\n   tree t = make_node (INTEGER_TYPE);\n   int precision = GET_MODE_BITSIZE (SImode);\n \n   SET_TYPE_MODE (t, SImode);\n   TYPE_ALIGN (t) = GET_MODE_ALIGNMENT (SImode);\n-  TYPE_USER_ALIGN (t) = 0;\n   TYPE_IS_SIZETYPE (t) = 1;\n-  TYPE_UNSIGNED (t) = !signed_p;\n+  TYPE_UNSIGNED (t) = 1;\n   TYPE_SIZE (t) = build_int_cst (t, precision);\n   TYPE_SIZE_UNIT (t) = build_int_cst (t, GET_MODE_SIZE (SImode));\n   TYPE_PRECISION (t) = precision;\n \n-  /* Set TYPE_MIN_VALUE and TYPE_MAX_VALUE.  */\n-  set_min_and_max_values_for_integral_type (t, precision, !signed_p);\n+  set_min_and_max_values_for_integral_type (t, precision, true);\n \n   sizetype = t;\n   bitsizetype = build_distinct_type_copy (t);\n }\n \n-/* Make sizetype a version of TYPE, and initialize *sizetype\n-   accordingly.  We do this by overwriting the stub sizetype and\n-   bitsizetype nodes created by initialize_sizetypes.  This makes sure\n-   that (a) anything stubby about them no longer exists, (b) any\n-   INTEGER_CSTs created with such a type, remain valid.  */\n+/* Make sizetype a version of TYPE, and initialize *sizetype accordingly.\n+   We do this by overwriting the stub sizetype and bitsizetype nodes created\n+   by initialize_sizetypes.  This makes sure that (a) anything stubby about\n+   them no longer exists and (b) any INTEGER_CSTs created with such a type,\n+   remain valid.  */\n \n void\n set_sizetype (tree type)\n {\n-  tree t;\n+  tree t, max;\n   int oprecision = TYPE_PRECISION (type);\n   /* The *bitsizetype types use a precision that avoids overflows when\n      calculating signed sizes / offsets in bits.  However, when\n@@ -2257,11 +2255,11 @@ set_sizetype (tree type)\n   if (precision > HOST_BITS_PER_WIDE_INT * 2)\n     precision = HOST_BITS_PER_WIDE_INT * 2;\n \n-  gcc_assert (TYPE_UNSIGNED (type) == TYPE_UNSIGNED (sizetype));\n+  /* sizetype must be an unsigned type.  */\n+  gcc_assert (TYPE_UNSIGNED (type));\n \n   t = build_distinct_type_copy (type);\n-  /* We do want to use sizetype's cache, as we will be replacing that\n-     type.  */\n+  /* We want to use sizetype's cache, as we will be replacing that type.  */\n   TYPE_CACHED_VALUES (t) = TYPE_CACHED_VALUES (sizetype);\n   TYPE_CACHED_VALUES_P (t) = TYPE_CACHED_VALUES_P (sizetype);\n   TREE_TYPE (TYPE_CACHED_VALUES (t)) = type;\n@@ -2273,10 +2271,17 @@ set_sizetype (tree type)\n   TYPE_MAIN_VARIANT (sizetype) = sizetype;\n   TYPE_CANONICAL (sizetype) = sizetype;\n \n+  /* sizetype is unsigned but we need to fix TYPE_MAX_VALUE so that it is\n+     sign-extended in a way consistent with force_fit_type.  */\n+  max = TYPE_MAX_VALUE (sizetype);\n+  TYPE_MAX_VALUE (sizetype)\n+    = build_int_cst_wide_type (sizetype,\n+\t\t\t       TREE_INT_CST_LOW (max),\n+\t\t\t       TREE_INT_CST_HIGH (max));\n+\n   t = make_node (INTEGER_TYPE);\n   TYPE_NAME (t) = get_identifier (\"bit_size_type\");\n-  /* We do want to use bitsizetype's cache, as we will be replacing that\n-     type.  */\n+  /* We want to use bitsizetype's cache, as we will be replacing that type.  */\n   TYPE_CACHED_VALUES (t) = TYPE_CACHED_VALUES (bitsizetype);\n   TYPE_CACHED_VALUES_P (t) = TYPE_CACHED_VALUES_P (bitsizetype);\n   TYPE_PRECISION (t) = precision;\n@@ -2288,36 +2293,13 @@ set_sizetype (tree type)\n   TYPE_MAIN_VARIANT (bitsizetype) = bitsizetype;\n   TYPE_CANONICAL (bitsizetype) = bitsizetype;\n \n-  if (TYPE_UNSIGNED (type))\n-    {\n-      fixup_unsigned_type (bitsizetype);\n-      ssizetype = make_signed_type (oprecision);\n-      TYPE_IS_SIZETYPE (ssizetype) = 1;\n-      sbitsizetype = make_signed_type (precision);\n-      TYPE_IS_SIZETYPE (sbitsizetype) = 1;\n-    }\n-  else\n-    {\n-      fixup_signed_type (bitsizetype);\n-      ssizetype = sizetype;\n-      sbitsizetype = bitsizetype;\n-    }\n-\n-  /* If SIZETYPE is unsigned, we need to fix TYPE_MAX_VALUE so that\n-     it is sign extended in a way consistent with force_fit_type.  */\n-  if (TYPE_UNSIGNED (type))\n-    {\n-      tree orig_max, new_max;\n+  fixup_unsigned_type (bitsizetype);\n \n-      orig_max = TYPE_MAX_VALUE (sizetype);\n-\n-      /* Build a new node with the same values, but a different type.\n-\t Sign extend it to ensure consistency.  */\n-      new_max = build_int_cst_wide_type (sizetype,\n-\t\t\t\t\t TREE_INT_CST_LOW (orig_max),\n-\t\t\t\t\t TREE_INT_CST_HIGH (orig_max));\n-      TYPE_MAX_VALUE (sizetype) = new_max;\n-    }\n+  /* Create the signed variants of *sizetype.  */\n+  ssizetype = make_signed_type (oprecision);\n+  TYPE_IS_SIZETYPE (ssizetype) = 1;\n+  sbitsizetype = make_signed_type (precision);\n+  TYPE_IS_SIZETYPE (sbitsizetype) = 1;\n }\n \f\n /* TYPE is an integral type, i.e., an INTEGRAL_TYPE, ENUMERAL_TYPE"}, {"sha": "fbab7db96765384db3cfa3ea4ad3ced64091ed20", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -227,12 +227,9 @@ build_size_arg_loc (location_t loc, tree nb_iter, tree op,\n \t\t    gimple_seq *stmt_list)\n {\n   gimple_seq stmts;\n-  tree x;\n-\n-  x = fold_build2_loc (loc, MULT_EXPR, size_type_node,\n-\t\t       fold_convert_loc (loc, size_type_node, nb_iter),\n-\t\t       fold_convert_loc (loc, size_type_node,\n-\t\t\t\t\t TYPE_SIZE_UNIT (TREE_TYPE (op))));\n+  tree x = size_binop_loc (loc, MULT_EXPR,\n+  \t\t\t   fold_convert_loc (loc, sizetype, nb_iter),\n+\t\t\t   TYPE_SIZE_UNIT (TREE_TYPE (op)));\n   x = force_gimple_operand (x, &stmts, true, NULL);\n   gimple_seq_add_seq (stmt_list, stmts);\n "}, {"sha": "2892e84600c26b24447938e91e5215b08a5bfeff", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -1203,7 +1203,8 @@ compute_object_sizes (void)\n \t\t\tresult = fold_convert (size_type_node,\n \t\t\t\t\t       integer_minus_one_node);\n \t\t      else if (object_size_type < 4)\n-\t\t\tresult = size_zero_node;\n+\t\t\tresult = fold_convert (size_type_node,\n+\t\t\t\t\t       integer_zero_node);\n \t\t    }\n \t\t}\n "}, {"sha": "0eab137863b938553608da11f832aa4a7311b6c2", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -8747,12 +8747,12 @@ make_or_reuse_accum_type (unsigned size, int unsignedp, int satp)\n    this function to select one of the types as sizetype.  */\n \n void\n-build_common_tree_nodes (bool signed_char, bool signed_sizetype)\n+build_common_tree_nodes (bool signed_char)\n {\n   error_mark_node = make_node (ERROR_MARK);\n   TREE_TYPE (error_mark_node) = error_mark_node;\n \n-  initialize_sizetypes (signed_sizetype);\n+  initialize_sizetypes ();\n \n   /* Define both `signed char' and `unsigned char'.  */\n   signed_char_type_node = make_signed_type (CHAR_TYPE_SIZE);"}, {"sha": "d900dc08638975c7977d72fa9aad782181d0f797", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9e5d953c6c8f977035b600242efb26084d25be/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3b9e5d953c6c8f977035b600242efb26084d25be", "patch": "@@ -3967,7 +3967,7 @@ extern tree make_unsigned_type (int);\n extern tree signed_or_unsigned_type_for (int, tree);\n extern tree signed_type_for (tree);\n extern tree unsigned_type_for (tree);\n-extern void initialize_sizetypes (bool);\n+extern void initialize_sizetypes (void);\n extern void set_sizetype (tree);\n extern void fixup_unsigned_type (tree);\n extern tree build_pointer_type_for_mode (tree, enum machine_mode, bool);\n@@ -4981,7 +4981,7 @@ extern int real_onep (const_tree);\n extern int real_twop (const_tree);\n extern int real_minus_onep (const_tree);\n extern void init_ttree (void);\n-extern void build_common_tree_nodes (bool, bool);\n+extern void build_common_tree_nodes (bool);\n extern void build_common_tree_nodes_2 (int);\n extern void build_common_builtin_nodes (void);\n extern tree build_nonstandard_integer_type (unsigned HOST_WIDE_INT, int);"}]}