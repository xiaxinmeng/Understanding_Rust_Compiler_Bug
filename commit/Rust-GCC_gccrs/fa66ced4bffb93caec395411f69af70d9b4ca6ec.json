{"sha": "fa66ced4bffb93caec395411f69af70d9b4ca6ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE2NmNlZDRiZmZiOTNjYWVjMzk1NDExZjY5YWY3MGQ5YjRjYTZlYw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2015-05-16T16:49:35Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2015-05-16T16:49:35Z"}, "message": "d-demangle.c (dlang_type_modifiers): New function.\n\nlibiberty/ChangeLog:\n\n2015-05-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\t* d-demangle.c (dlang_type_modifiers): New function.\n\t(dlang_type_modifier_p): New function.\n\t(dlang_call_convention_p): Ignore any kind of type modifier.\n\t(dlang_type): Handle and emit the type modifier after delegate types.\n\t(dlang_parse_symbol): Handle and emit the type modifier after the symbol.\n\t* testsuite/d-demangle-expected: Add coverage tests for all valid\n\tusages of function symbols with type modifiers.\n\nFrom-SVN: r223242", "tree": {"sha": "f1caf4ccb2c5874c46b605a7137f357e001b5bb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1caf4ccb2c5874c46b605a7137f357e001b5bb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa66ced4bffb93caec395411f69af70d9b4ca6ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa66ced4bffb93caec395411f69af70d9b4ca6ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa66ced4bffb93caec395411f69af70d9b4ca6ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa66ced4bffb93caec395411f69af70d9b4ca6ec/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "76b41cad1cdce692cd8756c98dd963a29b770a77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b41cad1cdce692cd8756c98dd963a29b770a77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76b41cad1cdce692cd8756c98dd963a29b770a77"}], "stats": {"total": 185, "additions": 172, "deletions": 13}, "files": [{"sha": "3eac5226392fec18bb6021922de1a00d09ae6767", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa66ced4bffb93caec395411f69af70d9b4ca6ec/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa66ced4bffb93caec395411f69af70d9b4ca6ec/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=fa66ced4bffb93caec395411f69af70d9b4ca6ec", "patch": "@@ -1,3 +1,13 @@\n+2015-05-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-demangle.c (dlang_type_modifiers): New function.\n+\t(dlang_type_modifier_p): New function.\n+\t(dlang_call_convention_p): Ignore any kind of type modifier.\n+\t(dlang_type): Handle and emit the type modifier after delegate types.\n+\t(dlang_parse_symbol): Handle and emit the type modifier after the symbol.\n+\t* testsuite/d-demangle-expected: Add coverage tests for all valid\n+\tusages of function symbols with type modifiers.\n+\n 2015-05-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* d-demangle.c (dlang_call_convention): Return NULL if have reached the"}, {"sha": "98e81606b586c3e8b3f34613782b60d947e38529", "filename": "libiberty/d-demangle.c", "status": "modified", "additions": 98, "deletions": 13, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa66ced4bffb93caec395411f69af70d9b4ca6ec/libiberty%2Fd-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa66ced4bffb93caec395411f69af70d9b4ca6ec/libiberty%2Fd-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fd-demangle.c?ref=fa66ced4bffb93caec395411f69af70d9b4ca6ec", "patch": "@@ -215,6 +215,44 @@ dlang_call_convention (string *decl, const char *mangled)\n   return mangled;\n }\n \n+/* Extract the type modifiers from MANGLED and append them to DECL.\n+   Returns the remaining signature on success or NULL on failure.  */\n+static const char *\n+dlang_type_modifiers (string *decl, const char *mangled)\n+{\n+  if (mangled == NULL || *mangled == '\\0')\n+    return NULL;\n+\n+  switch (*mangled)\n+    {\n+    case 'x': /* const */\n+      mangled++;\n+      string_append (decl, \" const\");\n+      return mangled;\n+    case 'y': /* immutable */\n+      mangled++;\n+      string_append (decl, \" immutable\");\n+      return mangled;\n+    case 'O': /* shared */\n+      mangled++;\n+      string_append (decl, \" shared\");\n+      return dlang_type_modifiers (decl, mangled);\n+    case 'N':\n+      mangled++;\n+      if (*mangled == 'g') /* wild */\n+\t{\n+\t  mangled++;\n+\t  string_append (decl, \" inout\");\n+\t  return dlang_type_modifiers (decl, mangled);\n+\t}\n+      else\n+\treturn NULL;\n+\n+    default:\n+      return mangled;\n+    }\n+}\n+\n /* Demangle the D function attributes from MANGLED and append it to DECL.\n    Return the remaining string on success or NULL on failure.  */\n static const char *\n@@ -476,10 +514,22 @@ dlang_type (string *decl, const char *mangled)\n       mangled++;\n       return dlang_parse_symbol (decl, mangled);\n     case 'D': /* delegate T */\n+    {\n+      string mods;\n+      size_t szmods;\n       mangled++;\n+\n+      string_init (&mods);\n+      mangled = dlang_type_modifiers (&mods, mangled);\n+      szmods = string_length (&mods);\n+\n       mangled = dlang_function_type (decl, mangled);\n       string_append (decl, \"delegate\");\n+      string_appendn (decl, mods.b, szmods);\n+\n+      string_delete (&mods);\n       return mangled;\n+    }\n     case 'B': /* tuple T */\n       mangled++;\n       return dlang_parse_tuple (decl, mangled);\n@@ -1135,28 +1185,54 @@ dlang_value (string *decl, const char *mangled, const char *name, char type)\n   return mangled;\n }\n \n+/* Extract the type modifiers from MANGLED and return the string\n+   length that it consumes in MANGLED on success or 0 on failure.  */\n static int\n-dlang_call_convention_p (const char *mangled)\n+dlang_type_modifier_p (const char *mangled)\n {\n-  size_t i;\n+  int i;\n \n   switch (*mangled)\n     {\n-    case 'F': case 'U': case 'V':\n-    case 'W': case 'R':\n+    case 'x': case 'y':\n       return 1;\n \n-    case 'M': /* Prefix for functions needing 'this' */\n-      i = 1;\n-      if (mangled[i] == 'x')\n-\ti++;\n+    case 'O':\n+      mangled++;\n+      i = dlang_type_modifier_p (mangled);\n+      return i + 1;\n \n-      switch (mangled[i])\n+    case 'N':\n+      mangled++;\n+      if (*mangled == 'g')\n \t{\n-\tcase 'F': case 'U': case 'V':\n-\tcase 'W': case 'R':\n-\t  return 1;\n+\t  mangled++;\n+\t  i = dlang_type_modifier_p (mangled);\n+\t  return i + 2;\n \t}\n+    }\n+\n+  return 0;\n+}\n+\n+/* Extract the function calling convention from MANGLED and\n+   return 1 on success or 0 on failure.  */\n+static int\n+dlang_call_convention_p (const char *mangled)\n+{\n+  /* Prefix for functions needing 'this' */\n+  if (*mangled == 'M')\n+    {\n+      mangled++;\n+      /* Also skip over any type modifiers.  */\n+      mangled += dlang_type_modifier_p (mangled);\n+    }\n+\n+  switch (*mangled)\n+    {\n+    case 'F': case 'U': case 'V':\n+    case 'W': case 'R':\n+      return 1;\n \n     default:\n       return 0;\n@@ -1178,11 +1254,16 @@ dlang_parse_symbol (string *decl, const char *mangled)\n \n       if (mangled && dlang_call_convention_p (mangled))\n \t{\n+\t  string mods;\n \t  int saved;\n \n \t  /* Skip over 'this' parameter.  */\n \t  if (*mangled == 'M')\n-\t    mangled += (mangled[1] == 'x') ? 2 : 1;\n+\t    mangled++;\n+\n+\t  /* Save the type modifiers for appending at the end.  */\n+\t  string_init (&mods);\n+\t  mangled = dlang_type_modifiers (&mods, mangled);\n \n \t  /* Skip over calling convention and attributes in qualified name.  */\n \t  saved = string_length (decl);\n@@ -1201,6 +1282,10 @@ dlang_parse_symbol (string *decl, const char *mangled)\n \t      mangled = dlang_type (decl, mangled);\n \t      string_setlength (decl, saved);\n \t    }\n+\n+\t  /* Add any const/immutable/shared modifier. */\n+\t  string_appendn (decl, mods.b, string_length (&mods));\n+\t  string_delete (&mods);\n \t}\n     }\n   while (mangled && ISDIGIT (*mangled));"}, {"sha": "80445066e7253eda40858b337998a1d6ad51a75e", "filename": "libiberty/testsuite/d-demangle-expected", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa66ced4bffb93caec395411f69af70d9b4ca6ec/libiberty%2Ftestsuite%2Fd-demangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa66ced4bffb93caec395411f69af70d9b4ca6ec/libiberty%2Ftestsuite%2Fd-demangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fd-demangle-expected?ref=fa66ced4bffb93caec395411f69af70d9b4ca6ec", "patch": "@@ -753,6 +753,70 @@ demangle.test!(demangle.S(1, 2))\n _D8demangle35__T4testVS8demangle1SS2i1a3_616263Zv\n demangle.test!(demangle.S(1, \"abc\"))\n #\n+--format=dlang\n+_D8demangle4testMxFZv\n+demangle.test() const\n+#\n+--format=dlang\n+_D8demangle4testMyFZv\n+demangle.test() immutable\n+#\n+--format=dlang\n+_D8demangle4testMNgFZv\n+demangle.test() inout\n+#\n+--format=dlang\n+_D8demangle4testMNgxFZv\n+demangle.test() inout const\n+#\n+--format=dlang\n+_D8demangle4testMOFZv\n+demangle.test() shared\n+#\n+--format=dlang\n+_D8demangle4testMOxFZv\n+demangle.test() shared const\n+#\n+--format=dlang\n+_D8demangle4testMONgFZv\n+demangle.test() shared inout\n+#\n+--format=dlang\n+_D8demangle4testMONgxFZv\n+demangle.test() shared inout const\n+#\n+--format=dlang\n+_D8demangle4testFDxFZaZv\n+demangle.test(char() delegate const)\n+#\n+--format=dlang\n+_D8demangle4testFDyFZaZv\n+demangle.test(char() delegate immutable)\n+#\n+--format=dlang\n+_D8demangle4testFDNgFZaZv\n+demangle.test(char() delegate inout)\n+#\n+--format=dlang\n+_D8demangle4testFDNgxFZaZv\n+demangle.test(char() delegate inout const)\n+#\n+--format=dlang\n+_D8demangle4testFDOFZaZv\n+demangle.test(char() delegate shared)\n+#\n+--format=dlang\n+_D8demangle4testFDOxFZaZv\n+demangle.test(char() delegate shared const)\n+#\n+--format=dlang\n+_D8demangle4testFDONgFZaZv\n+demangle.test(char() delegate shared inout)\n+#\n+--format=dlang\n+_D8demangle4testFDONgxFZaZv\n+demangle.test(char() delegate shared inout const)\n+#\n # Unittests\n #\n --format=dlang"}]}