{"sha": "36ec3f57d305e343ad1bbffa53e3484661a176a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZlYzNmNTdkMzA1ZTM0M2FkMWJiZmZhNTNlMzQ4NDY2MWExNzZhNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-09-05T20:32:55Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2019-09-05T20:32:55Z"}, "message": "RISC-V: Fix bad insn splits with paradoxical subregs.\n\nShifting by more than the size of a SUBREG_REG doesn't work, so we either\nneed to disable splits if an input is paradoxical, or else we need to\ngenerate a clean temporary for intermediate results.\n\nJakub wrote the first version of this patch, so gets primary credit for it.\n\n\tgcc/\n\tPR target/91635\n\t* config/riscv/riscv.md (zero_extendsidi2, zero_extendhi<GPR:mode>2,\n\textend<SHORT:mode><SUPERQI:mode>2): Don't split if\n\tparadoxical_subreg_p (operands[0]).\n\t(*lshrsi3_zero_extend_3+1, *lshrsi3_zero_extend_3+2): Add clobber and\n\tuse as intermediate value.\n\n\tgcc/testsuite/\n\tPR target/91635\n\t* gcc.c-torture/execute/pr91635.c: New test.\n\t* gcc.target/riscv/shift-shift-4.c: New test.\n\t* gcc.target/riscv/shift-shift-5.c: New test.\n\nCo-Authored-By: Jim Wilson <jimw@sifive.com>\n\nFrom-SVN: r275444", "tree": {"sha": "2865b2618fabe876bb58c8f86dd2c67192a09778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2865b2618fabe876bb58c8f86dd2c67192a09778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36ec3f57d305e343ad1bbffa53e3484661a176a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ec3f57d305e343ad1bbffa53e3484661a176a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ec3f57d305e343ad1bbffa53e3484661a176a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ec3f57d305e343ad1bbffa53e3484661a176a6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c0f026505aca54c200b36870256c886b05eb4ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c0f026505aca54c200b36870256c886b05eb4ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c0f026505aca54c200b36870256c886b05eb4ff"}], "stats": {"total": 134, "additions": 125, "deletions": 9}, "files": [{"sha": "d0686d09419dac7f8dc41311eaac6d065112bfa9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ec3f57d305e343ad1bbffa53e3484661a176a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ec3f57d305e343ad1bbffa53e3484661a176a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36ec3f57d305e343ad1bbffa53e3484661a176a6", "patch": "@@ -1,3 +1,13 @@\n+2019-09-05  Jakub Jelinek  <jakub@redhat.com>\n+\t    Jim Wilson  <jimw@sifive.com>\n+\n+\tPR target/91635\n+\t* config/riscv/riscv.md (zero_extendsidi2, zero_extendhi<GPR:mode>2,\n+\textend<SHORT:mode><SUPERQI:mode>2): Don't split if\n+\tparadoxical_subreg_p (operands[0]).\n+\t(*lshrsi3_zero_extend_3+1, *lshrsi3_zero_extend_3+2): Add clobber and\n+\tuse as intermediate value.\n+\n 2019-09-05  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/gcn.md (*movti_insn): Set delayeduse for global_store."}, {"sha": "744a027a1b77e55dc3d6f892b4a247500612effc", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ec3f57d305e343ad1bbffa53e3484661a176a6/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ec3f57d305e343ad1bbffa53e3484661a176a6/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=36ec3f57d305e343ad1bbffa53e3484661a176a6", "patch": "@@ -1051,7 +1051,9 @@\n   \"@\n    #\n    lwu\\t%0,%1\"\n-  \"&& reload_completed && REG_P (operands[1])\"\n+  \"&& reload_completed\n+   && REG_P (operands[1])\n+   && !paradoxical_subreg_p (operands[0])\"\n   [(set (match_dup 0)\n \t(ashift:DI (match_dup 1) (const_int 32)))\n    (set (match_dup 0)\n@@ -1068,7 +1070,9 @@\n   \"@\n    #\n    lhu\\t%0,%1\"\n-  \"&& reload_completed && REG_P (operands[1])\"\n+  \"&& reload_completed\n+   && REG_P (operands[1])\n+   && !paradoxical_subreg_p (operands[0])\"\n   [(set (match_dup 0)\n \t(ashift:GPR (match_dup 1) (match_dup 2)))\n    (set (match_dup 0)\n@@ -1117,7 +1121,9 @@\n   \"@\n    #\n    l<SHORT:size>\\t%0,%1\"\n-  \"&& reload_completed && REG_P (operands[1])\"\n+  \"&& reload_completed\n+   && REG_P (operands[1])\n+   && !paradoxical_subreg_p (operands[0])\"\n   [(set (match_dup 0) (ashift:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0) (ashiftrt:SI (match_dup 0) (match_dup 2)))]\n {\n@@ -1766,15 +1772,20 @@\n ;; Handle AND with 2^N-1 for N from 12 to XLEN.  This can be split into\n ;; two logical shifts.  Otherwise it requires 3 instructions: lui,\n ;; xor/addi/srli, and.\n+\n+;; Generating a temporary for the shift output gives better combiner results;\n+;; and also fixes a problem where op0 could be a paradoxical reg and shifting\n+;; by amounts larger than the size of the SUBREG_REG doesn't work.\n (define_split\n   [(set (match_operand:GPR 0 \"register_operand\")\n \t(and:GPR (match_operand:GPR 1 \"register_operand\")\n-\t\t (match_operand:GPR 2 \"p2m1_shift_operand\")))]\n+\t\t (match_operand:GPR 2 \"p2m1_shift_operand\")))\n+   (clobber (match_operand:GPR 3 \"register_operand\"))]\n   \"\"\n- [(set (match_dup 0)\n+ [(set (match_dup 3)\n        (ashift:GPR (match_dup 1) (match_dup 2)))\n   (set (match_dup 0)\n-       (lshiftrt:GPR (match_dup 0) (match_dup 2)))]\n+       (lshiftrt:GPR (match_dup 3) (match_dup 2)))]\n {\n   /* Op2 is a VOIDmode constant, so get the mode size from op1.  */\n   operands[2] = GEN_INT (GET_MODE_BITSIZE (GET_MODE (operands[1]))\n@@ -1786,12 +1797,13 @@\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\")\n \t(and:DI (match_operand:DI 1 \"register_operand\")\n-\t\t(match_operand:DI 2 \"high_mask_shift_operand\")))]\n+\t\t(match_operand:DI 2 \"high_mask_shift_operand\")))\n+   (clobber (match_operand:DI 3 \"register_operand\"))]\n   \"TARGET_64BIT\"\n-  [(set (match_dup 0)\n+  [(set (match_dup 3)\n \t(lshiftrt:DI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0)\n-\t(ashift:DI (match_dup 0) (match_dup 2)))]\n+\t(ashift:DI (match_dup 3) (match_dup 2)))]\n {\n   operands[2] = GEN_INT (ctz_hwi (INTVAL (operands[2])));\n })"}, {"sha": "e591a27bc120933213c70947a9eda9a9c455ac9d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ec3f57d305e343ad1bbffa53e3484661a176a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ec3f57d305e343ad1bbffa53e3484661a176a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36ec3f57d305e343ad1bbffa53e3484661a176a6", "patch": "@@ -1,3 +1,11 @@\n+2019-09-05  Jakub Jelinek  <jakub@redhat.com>\n+\t    Jim Wilson  <jimw@sifive.com>\n+\n+\tPR target/91635\n+\t* gcc.c-torture/execute/pr91635.c: New test.\n+\t* gcc.target/riscv/shift-shift-4.c: New test.\n+\t* gcc.target/riscv/shift-shift-5.c: New test.\n+\n 2019-09-05  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/91496"}, {"sha": "878a491fc36017dd922ca5670e032752cd14de00", "filename": "gcc/testsuite/gcc.c-torture/execute/pr91635.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ec3f57d305e343ad1bbffa53e3484661a176a6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr91635.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ec3f57d305e343ad1bbffa53e3484661a176a6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr91635.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr91635.c?ref=36ec3f57d305e343ad1bbffa53e3484661a176a6", "patch": "@@ -0,0 +1,57 @@\n+/* PR target/91635 */\n+\n+#if __CHAR_BIT__ == 8 && __SIZEOF_SHORT__ == 2 \\\n+    && __SIZEOF_INT__ == 4 && __SIZEOF_LONG_LONG__ == 8\n+unsigned short b, c;\n+int u, v, w, x;\n+\n+__attribute__ ((noipa)) int\n+foo (unsigned short c)\n+{\n+  c <<= __builtin_add_overflow (-c, -1, &b);\n+  c >>= 1;\n+  return c;\n+}\n+\n+__attribute__ ((noipa)) int\n+bar (unsigned short b)\n+{\n+  b <<= -14 & 15;\n+  b = b >> -~1;\n+  return b;\n+}\n+\n+__attribute__ ((noipa)) int\n+baz (unsigned short e)\n+{\n+  e <<= 1;\n+  e >>= __builtin_add_overflow (8719476735, u, &v);\n+  return e;\n+}\n+\n+__attribute__ ((noipa)) int\n+qux (unsigned int e)\n+{\n+  c = ~1;\n+  c *= e;\n+  c = c >> (-15 & 5);\n+  return c + w + x;\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+#if __CHAR_BIT__ == 8 && __SIZEOF_SHORT__ == 2 \\\n+    && __SIZEOF_INT__ == 4 && __SIZEOF_LONG_LONG__ == 8\n+  if (foo (0xffff) != 0x7fff)\n+    __builtin_abort ();\n+  if (bar (5) != 5)\n+    __builtin_abort ();\n+  if (baz (~0) != 0x7fff)\n+    __builtin_abort ();\n+  if (qux (2) != 0x7ffe)\n+    __builtin_abort ();\n+#endif\n+  return 0;\n+}"}, {"sha": "72a45ee87ae633fcc149de11ad18b85dc2bcec5f", "filename": "gcc/testsuite/gcc.target/riscv/shift-shift-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ec3f57d305e343ad1bbffa53e3484661a176a6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshift-shift-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ec3f57d305e343ad1bbffa53e3484661a176a6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshift-shift-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshift-shift-4.c?ref=36ec3f57d305e343ad1bbffa53e3484661a176a6", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32i -mabi=ilp32 -O2\" } */\n+\n+/* One zero-extend shift can be eliminated by modifying the constant in the\n+   greater than test.  Started working after modifying the splitter\n+   lshrsi3_zero_extend_3+1 to use a temporary reg for the first split dest.  */\n+int\n+sub (int i)\n+{\n+  i &= 0x7fffffff;\n+  return i > 0x7f800000;\n+}\n+/* { dg-final { scan-assembler-not \"srli\" } } */"}, {"sha": "5b2ae89a471d9b1aac74e06b1c8c3cc5662058c2", "filename": "gcc/testsuite/gcc.target/riscv/shift-shift-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36ec3f57d305e343ad1bbffa53e3484661a176a6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshift-shift-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36ec3f57d305e343ad1bbffa53e3484661a176a6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshift-shift-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fshift-shift-5.c?ref=36ec3f57d305e343ad1bbffa53e3484661a176a6", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc -mabi=lp64d -O2\" } */\n+\n+/* Fails if lshrsi3_zero_extend_3+1 uses a temp reg which has no REG_DEST\n+   note.  */\n+unsigned long\n+sub (long l)\n+{\n+  union u {\n+    struct s { int a : 19; unsigned int b : 13; int x; } s;\n+    long l;\n+  } u;\n+  u.l = l;\n+  return u.s.b;\n+}\n+/* { dg-final { scan-assembler \"srliw\" } } */"}]}