{"sha": "0bda47a37afb63ee0162ea39ded62305469eed7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJkYTQ3YTM3YWZiNjNlZTAxNjJlYTM5ZGVkNjIzMDU0NjllZWQ3ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-18T17:32:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-05-18T17:32:59Z"}, "message": "i386.md (*tls_global_dynamic_32_gnu): Split asm template.\n\n\t* config/i386/i386.md (*tls_global_dynamic_32_gnu): Split asm template.\n\t(*tls_global_dynamic_64): Ditto.\n\t(*tls_local_dynamic_base_32_gnu): Ditto.\n\t(*tls_local_dynamic_base_64): Ditto.\n\t(tls_initial_exec_64_sun): Ditto.\n\nFrom-SVN: r173870", "tree": {"sha": "1d97a12a1c21e045d5488ce827f2037a7443e461", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d97a12a1c21e045d5488ce827f2037a7443e461"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bda47a37afb63ee0162ea39ded62305469eed7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bda47a37afb63ee0162ea39ded62305469eed7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bda47a37afb63ee0162ea39ded62305469eed7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bda47a37afb63ee0162ea39ded62305469eed7d/comments", "author": null, "committer": null, "parents": [{"sha": "0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0515f4d2ba0a438d1a6dadb6a88b7c6e5449a129"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "dc2495e9907d54ea6ab8ece1600b3a7e5f74b6d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bda47a37afb63ee0162ea39ded62305469eed7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bda47a37afb63ee0162ea39ded62305469eed7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bda47a37afb63ee0162ea39ded62305469eed7d", "patch": "@@ -1,3 +1,11 @@\n+2011-05-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*tls_global_dynamic_32_gnu): Split asm template.\n+\t(*tls_global_dynamic_64): Ditto.\n+\t(*tls_local_dynamic_base_32_gnu): Ditto.\n+\t(*tls_local_dynamic_base_64): Ditto.\n+\t(tls_initial_exec_64_sun): Ditto.\n+\n 2011-05-18  Stuart Henderson  <shenders@gcc.gnu.org>\n \n \t* doc/invoke.texi (Blackfin Options): -mcpu accepts bf592.\n@@ -7,23 +15,21 @@\n \t* config/bfin/t-bfin-uclinux (MULTILIB_MATCHES): Likewise.\n \t* config/bfin/bfin.c (bfin_cpus): Add bf592.\n \t* config/bfin/bfin.h (TARGET_CPU_CPP_BUILTINS): Define\n-\t__ADSPBF592__ and __ADSPBF59x__ for     BFIN_CPU_BF592.\n+\t__ADSPBF592__ and __ADSPBF59x__ for BFIN_CPU_BF592.\n \t* config/bfin/bfin-opts.h (bfin_cpu_type): Add BFIN_CPU_BF592.\n \t* config/bfin/elf.h (LIB_SPEC): Add bf592.\n \n 2011-05-18  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/arm/arm-opts.h (enum arm_fp16_format_type, enum\n-\tarm_abi_type, enum float_abi_type, enum arm_tp_type): Move from\n-\tarm.h.\n+\tarm_abi_type, enum float_abi_type, enum arm_tp_type): Move from arm.h.\n \t* config/arm/arm.c (arm_float_abi, arm_fp16_format, arm_abi,\n \ttarget_thread_pointer, arm_structure_size_boundary, struct\n \tfloat_abi, all_float_abis, struct fp16_format, all_fp16_formats,\n \tstruct abi_name, arm_all_abis): Remove.\n-\t(arm_option_override) Don't process most enumerated option values\n-\there.  Don't process target_fpe_name here.  Work with integer not\n-\tstring for structure size boundary; use separate diagnostics for\n-\teach case.\n+\t(arm_option_override) Don't process most enumerated option values here.\n+\tDon't process target_fpe_name here.  Work with integer not string for\n+\tstructure size boundary; use separate diagnostics for each case.\n \t* config/arm/arm.h (enum float_abi_type, enum\n \tarm_fp16_format_type, enum arm_abi_type, enum arm_tp_type): Move\n \tto arm-opts.h.\n@@ -33,8 +39,7 @@\n \t(arm_abi_type): New Enum and EnumValue entries.\n \t(mfloat-abi=): Use Enum and Init.\n \t(float_abi_type): New Enum and EnumValue entries.\n-\t(mfp=, mfpe=): Replace by separate Alias entries for each\n-\targument.\n+\t(mfp=, mfpe=): Replace by separate Alias entries for each argument.\n \t(mfp16-format=): Use Enum and Init.\n \t(arm_fp16_format_type): New Enum and EnumValue entries.\n \t(mstructure-size-boundary=): Use UInteger and Init."}, {"sha": "551e25d623ebd837ef615db1c42dea0d01f49f0a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bda47a37afb63ee0162ea39ded62305469eed7d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bda47a37afb63ee0162ea39ded62305469eed7d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0bda47a37afb63ee0162ea39ded62305469eed7d", "patch": "@@ -12364,7 +12364,11 @@\n    (clobber (match_scratch:SI 5 \"=c\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_GNU_TLS\"\n-  \"lea{l}\\t{%a2@tlsgd(,%1,1), %0|%0, %a2@tlsgd[%1*1]}\\;call\\t%P3\"\n+{\n+  output_asm_insn\n+    (\"lea{l}\\t{%a2@tlsgd(,%1,1), %0|%0, %a2@tlsgd[%1*1]}\", operands);\n+  return \"call\\t%P3\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"12\")])\n \n@@ -12387,7 +12391,14 @@\n    (unspec:DI [(match_operand:DI 1 \"tls_symbolic_operand\" \"\")]\n \t      UNSPEC_TLS_GD)]\n   \"TARGET_64BIT\"\n-  { return ASM_BYTE \"0x66\\n\\tlea{q}\\t{%a1@tlsgd(%%rip), %%rdi|rdi, %a1@tlsgd[rip]}\\n\" ASM_SHORT \"0x6666\\n\\trex64\\n\\tcall\\t%P2\"; }\n+{\n+  fputs (ASM_BYTE \"0x66\\n\", asm_out_file);\n+  output_asm_insn\n+    (\"lea{q}\\t{%a1@tlsgd(%%rip), %%rdi|rdi, %a1@tlsgd[rip]}\", operands);\n+  fputs (ASM_SHORT \"0x6666\\n\", asm_out_file);\n+  fputs (\"\\trex64\\n\", asm_out_file);\n+  return \"call\\t%P2\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"16\")])\n \n@@ -12410,7 +12421,11 @@\n    (clobber (match_scratch:SI 4 \"=c\"))\n    (clobber (reg:CC FLAGS_REG))]\n   \"!TARGET_64BIT && TARGET_GNU_TLS\"\n-  \"lea{l}\\t{%&@tlsldm(%1), %0|%0, %&@tlsldm[%1]}\\;call\\t%P2\"\n+{\n+  output_asm_insn\n+    (\"lea{l}\\t{%&@tlsldm(%1), %0|%0, %&@tlsldm[%1]}\", operands);\n+  return \"call\\t%P2\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"11\")])\n \n@@ -12432,7 +12447,11 @@\n \t (match_operand:DI 2 \"\" \"\")))\n    (unspec:DI [(const_int 0)] UNSPEC_TLS_LD_BASE)]\n   \"TARGET_64BIT\"\n-  \"lea{q}\\t{%&@tlsld(%%rip), %%rdi|rdi, %&@tlsld[rip]}\\;call\\t%P1\"\n+{\n+  output_asm_insn\n+    (\"lea{q}\\t{%&@tlsld(%%rip), %%rdi|rdi, %&@tlsld[rip]}\", operands);\n+  return \"call\\t%P1\";\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"12\")])\n \n@@ -12507,7 +12526,11 @@\n \t UNSPEC_TLS_IE_SUN))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && TARGET_SUN_TLS\"\n-  \"mov{q}\\t{%%fs:0, %0|%0, QWORD PTR fs:0}\\n\\tadd{q}\\t{%a1@gottpoff(%%rip), %0|%0, %a1@gottpoff[rip]}\"\n+{\n+  output_asm_insn\n+    (\"mov{q}\\t{%%fs:0, %0|%0, QWORD PTR fs:0}\", operands)\n+  return \"add{q}\\t{%a1@gottpoff(%%rip), %0|%0, %a1@gottpoff[rip]}\";\n+}\n   [(set_attr \"type\" \"multi\")])\n \n ;; GNU2 TLS patterns can be split."}]}