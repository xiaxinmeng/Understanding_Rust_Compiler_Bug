{"sha": "aff507f439b0dcbeaf95354e95a391ea0f0e6a27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZmNTA3ZjQzOWIwZGNiZWFmOTUzNTRlOTVhMzkxZWEwZjBlNmEyNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-06T21:45:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-06T21:45:57Z"}, "message": "(make_call_insn_raw): New function.\n\n(emit_call_insn{,_before}): Use make_call_insn_raw.\n\nFrom-SVN: r7238", "tree": {"sha": "e038380434ca1833c34d5d9af613c1e042bece92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e038380434ca1833c34d5d9af613c1e042bece92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aff507f439b0dcbeaf95354e95a391ea0f0e6a27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff507f439b0dcbeaf95354e95a391ea0f0e6a27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aff507f439b0dcbeaf95354e95a391ea0f0e6a27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aff507f439b0dcbeaf95354e95a391ea0f0e6a27/comments", "author": null, "committer": null, "parents": [{"sha": "f1e7c95f89be637e052cd7ee3e31aaade607404c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e7c95f89be637e052cd7ee3e31aaade607404c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1e7c95f89be637e052cd7ee3e31aaade607404c"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "607dc8ae35385f40d501b5507e18fd8c73277101", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aff507f439b0dcbeaf95354e95a391ea0f0e6a27/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aff507f439b0dcbeaf95354e95a391ea0f0e6a27/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=aff507f439b0dcbeaf95354e95a391ea0f0e6a27", "patch": "@@ -2084,6 +2084,26 @@ make_jump_insn_raw (pattern)\n \n   return insn;\n }\n+\n+/* Like `make_insn' but make a CALL_INSN instead of an insn.  */\n+\n+static rtx\n+make_call_insn_raw (pattern)\n+     rtx pattern;\n+{\n+  register rtx insn;\n+\n+  insn = rtx_alloc (CALL_INSN);\n+  INSN_UID (insn) = cur_insn_uid++;\n+\n+  PATTERN (insn) = pattern;\n+  INSN_CODE (insn) = -1;\n+  LOG_LINKS (insn) = NULL;\n+  REG_NOTES (insn) = NULL;\n+  CALL_INSN_FUNCTION_USAGE (insn) = NULL;\n+\n+  return insn;\n+}\n \f\n /* Add INSN to the end of the doubly-linked list.\n    INSN may be an INSN, JUMP_INSN, CALL_INSN, CODE_LABEL, BARRIER or NOTE.  */\n@@ -2292,8 +2312,17 @@ rtx\n emit_call_insn_before (pattern, before)\n      register rtx pattern, before;\n {\n-  rtx insn = emit_insn_before (pattern, before);\n-  PUT_CODE (insn, CALL_INSN);\n+  register rtx insn;\n+\n+  if (GET_CODE (pattern) == SEQUENCE)\n+    insn = emit_insn_before (pattern, before);\n+  else\n+    {\n+      insn = make_call_insn_raw (pattern);\n+      add_insn_after (insn, PREV_INSN (before));\n+      PUT_CODE (insn, CALL_INSN);\n+    }\n+\n   return insn;\n }\n \n@@ -2609,7 +2638,7 @@ emit_call_insn (pattern)\n     return emit_insn (pattern);\n   else\n     {\n-      register rtx insn = make_insn_raw (pattern);\n+      register rtx insn = make_call_insn_raw (pattern);\n       add_insn (insn);\n       PUT_CODE (insn, CALL_INSN);\n       return insn;"}]}