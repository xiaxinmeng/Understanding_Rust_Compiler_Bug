{"sha": "7f879c9615a980c3874350e9739bce139c67f322", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y4NzljOTYxNWE5ODBjMzg3NDM1MGU5NzM5YmNlMTM5YzY3ZjMyMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-11-16T10:10:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-11-16T10:10:05Z"}, "message": "re PR tree-optimization/34099 (optimizer problem)\n\n2007-11-16  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/34099\n\t* tree-ssa-ccp.c (likely_value): Use a whitelist for operators\n\tthat produce UNDEFINED result if at least one of its operands\n\tis UNDEFINED.  By default the result is only UNDEFINED if all\n\toperands are UNDEFINED.\n\n\t* g++.dg/torture/pr3499.C: New testcase.\n\t* gcc.c-torture/execute/pr34099.c: Likewise.\n\nFrom-SVN: r130222", "tree": {"sha": "68350f8f197b9af4a24605143e5aa07c643cbfdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68350f8f197b9af4a24605143e5aa07c643cbfdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f879c9615a980c3874350e9739bce139c67f322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f879c9615a980c3874350e9739bce139c67f322", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f879c9615a980c3874350e9739bce139c67f322", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f879c9615a980c3874350e9739bce139c67f322/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2c3bcf47b9131455a7fccfaa699269ae108d76b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2c3bcf47b9131455a7fccfaa699269ae108d76b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2c3bcf47b9131455a7fccfaa699269ae108d76b"}], "stats": {"total": 117, "additions": 114, "deletions": 3}, "files": [{"sha": "80dac9c59107f679bb2a5b5e78553dc35118caa4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f879c9615a980c3874350e9739bce139c67f322/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f879c9615a980c3874350e9739bce139c67f322/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f879c9615a980c3874350e9739bce139c67f322", "patch": "@@ -1,3 +1,11 @@\n+2007-11-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/34099\n+\t* tree-ssa-ccp.c (likely_value): Use a whitelist for operators\n+\tthat produce UNDEFINED result if at least one of its operands\n+\tis UNDEFINED.  By default the result is only UNDEFINED if all\n+\toperands are UNDEFINED.\n+\n 2007-11-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR driver/30460"}, {"sha": "9c84667f81fab4f994718d3fbd5d7e5c63cc1f47", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f879c9615a980c3874350e9739bce139c67f322/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f879c9615a980c3874350e9739bce139c67f322/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f879c9615a980c3874350e9739bce139c67f322", "patch": "@@ -1,3 +1,9 @@\n+2007-11-16  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/34099\n+\t* g++.dg/torture/pr3499.C: New testcase.\n+\t* gcc.c-torture/execute/pr34099.c: Likewise.\n+\n 2007-11-16  Olivier Hainque  <hainque@adacore.com>\n \n \t* gnat.dg/release_unc_maxalign.adb: New test."}, {"sha": "49fa9cac1ebc1d5454028208ef8977ff6f6526c5", "filename": "gcc/testsuite/g++.dg/torture/pr34099.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f879c9615a980c3874350e9739bce139c67f322/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34099.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f879c9615a980c3874350e9739bce139c67f322/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34099.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34099.C?ref=7f879c9615a980c3874350e9739bce139c67f322", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+\n+#include <complex>\n+\n+typedef std::complex<double> NumType;\n+\n+void\n+multiply(NumType a, NumType b, unsigned ac, NumType &ab)\n+{\n+  NumType s;\n+  for (unsigned j=0; j<ac; j++)\n+    s = a * b;\n+  ab = s;\n+}\n+extern \"C\" void abort (void);\n+int main()\n+{\n+  NumType a(1,2), b(3,-2), c;\n+  multiply(a, b, 1, c);\n+  if (c.real() != 7\n+      || c.imag() != 4)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "d6f5ad1f6517118d67fad66ebcee920568007ed3", "filename": "gcc/testsuite/gcc.c-torture/execute/pr34099.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f879c9615a980c3874350e9739bce139c67f322/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr34099.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f879c9615a980c3874350e9739bce139c67f322/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr34099.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr34099.c?ref=7f879c9615a980c3874350e9739bce139c67f322", "patch": "@@ -0,0 +1,16 @@\n+int foo (int b, int c)\n+{\n+  int x;\n+  if (b)\n+    return x & c;\n+  else\n+    return 1;\n+}\n+extern void abort (void);\n+int main()\n+{\n+  if (foo(1, 0) != 0)\n+    abort ();\n+  return 0;\n+}\n+"}, {"sha": "fc40449be8db8584d0ee0ca15963e0e8275ffd29", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 59, "deletions": 3, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f879c9615a980c3874350e9739bce139c67f322/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f879c9615a980c3874350e9739bce139c67f322/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=7f879c9615a980c3874350e9739bce139c67f322", "patch": "@@ -507,7 +507,8 @@ set_lattice_value (tree var, prop_value_t new_val)\n \n    If STMT has no operands, then return CONSTANT.\n \n-   Else if any operands of STMT are undefined, then return UNDEFINED.\n+   Else if undefinedness of operands of STMT cause its value to be\n+   undefined, then return UNDEFINED.\n \n    Else if any operands of STMT are constants, then return CONSTANT.\n \n@@ -516,7 +517,7 @@ set_lattice_value (tree var, prop_value_t new_val)\n static ccp_lattice_t\n likely_value (tree stmt)\n {\n-  bool has_constant_operand;\n+  bool has_constant_operand, has_undefined_operand, all_undefined_operands;\n   stmt_ann_t ann;\n   tree use;\n   ssa_op_iter iter;\n@@ -552,17 +553,72 @@ likely_value (tree stmt)\n     return CONSTANT;\n \n   has_constant_operand = false;\n+  has_undefined_operand = false;\n+  all_undefined_operands = true;\n   FOR_EACH_SSA_TREE_OPERAND (use, stmt, iter, SSA_OP_USE | SSA_OP_VUSE)\n     {\n       prop_value_t *val = get_value (use);\n \n       if (val->lattice_val == UNDEFINED)\n-\treturn UNDEFINED;\n+\thas_undefined_operand = true;\n+      else\n+\tall_undefined_operands = false;\n \n       if (val->lattice_val == CONSTANT)\n \thas_constant_operand = true;\n     }\n \n+  /* If the operation combines operands like COMPLEX_EXPR make sure to\n+     not mark the result UNDEFINED if only one part of the result is\n+     undefined.  */\n+  if (has_undefined_operand\n+      && all_undefined_operands)\n+    return UNDEFINED;\n+  else if (TREE_CODE (stmt) == GIMPLE_MODIFY_STMT\n+\t   && has_undefined_operand)\n+    {\n+      switch (TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 1)))\n+\t{\n+\t/* Unary operators are handled with all_undefined_operands.  */\n+\tcase PLUS_EXPR:\n+\tcase MINUS_EXPR:\n+\tcase MULT_EXPR:\n+\tcase POINTER_PLUS_EXPR:\n+\tcase TRUNC_DIV_EXPR:\n+\tcase CEIL_DIV_EXPR:\n+\tcase FLOOR_DIV_EXPR:\n+\tcase ROUND_DIV_EXPR:\n+\tcase TRUNC_MOD_EXPR:\n+\tcase CEIL_MOD_EXPR:\n+\tcase FLOOR_MOD_EXPR:\n+\tcase ROUND_MOD_EXPR:\n+\tcase RDIV_EXPR:\n+\tcase EXACT_DIV_EXPR:\n+\tcase LSHIFT_EXPR:\n+\tcase RSHIFT_EXPR:\n+\tcase LROTATE_EXPR:\n+\tcase RROTATE_EXPR:\n+\tcase EQ_EXPR:\n+\tcase NE_EXPR:\n+\tcase LT_EXPR:\n+\tcase GT_EXPR:\n+\t  /* Not MIN_EXPR, MAX_EXPR.  One VARYING operand may be selected.\n+\t     Not bitwise operators, one VARYING operand may specify the\n+\t     result completely.  Not logical operators for the same reason.\n+\t     Not LE/GE comparisons or unordered comparisons.  Not\n+\t     COMPLEX_EXPR as one VARYING operand makes the result partly\n+\t     not UNDEFINED.  */\n+\t  return UNDEFINED;\n+\n+\tdefault:\n+\t  ;\n+\t}\n+    }\n+  /* If there was an UNDEFINED operand but the result may be not UNDEFINED\n+     fall back to VARYING even if there were CONSTANT operands.  */\n+  if (has_undefined_operand)\n+    return VARYING;\n+\n   if (has_constant_operand\n       /* We do not consider virtual operands here -- load from read-only\n \t memory may have only VARYING virtual operands, but still be"}]}