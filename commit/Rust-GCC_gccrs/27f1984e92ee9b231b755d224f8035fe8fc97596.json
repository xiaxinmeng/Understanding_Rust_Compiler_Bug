{"sha": "27f1984e92ee9b231b755d224f8035fe8fc97596", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdmMTk4NGU5MmVlOWIyMzFiNzU1ZDIyNGY4MDM1ZmU4ZmM5NzU5Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2004-07-16T17:11:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2004-07-16T17:11:06Z"}, "message": "undo reversion\n\nFrom-SVN: r84822", "tree": {"sha": "e387efecd2bb3f8000354d5a9b552e1c4c83bd00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e387efecd2bb3f8000354d5a9b552e1c4c83bd00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27f1984e92ee9b231b755d224f8035fe8fc97596", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f1984e92ee9b231b755d224f8035fe8fc97596", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f1984e92ee9b231b755d224f8035fe8fc97596", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f1984e92ee9b231b755d224f8035fe8fc97596/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a23ee064e26afca80e24ccc9036ef01f54b1f377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a23ee064e26afca80e24ccc9036ef01f54b1f377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a23ee064e26afca80e24ccc9036ef01f54b1f377"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "f34b38ece3c8d4784edb2eb4559dca189ac97328", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f1984e92ee9b231b755d224f8035fe8fc97596/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f1984e92ee9b231b755d224f8035fe8fc97596/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=27f1984e92ee9b231b755d224f8035fe8fc97596", "patch": "@@ -60,6 +60,11 @@\n \t(add_conversions): Likewise.\n \t* semantics.c (finish_member_declaration): Adjust call to add_method.\n \n+2004-07-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-lang.c (cxx_types_compatible_p): To the middle-end,\n+\treferences and pointers are compatible.\n+\n 2004-07-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* decl.c (xref_basetypes): Refactor."}, {"sha": "b6e933fede6f8b9ce75fd877d42fed3aafdb31b4", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27f1984e92ee9b231b755d224f8035fe8fc97596/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27f1984e92ee9b231b755d224f8035fe8fc97596/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=27f1984e92ee9b231b755d224f8035fe8fc97596", "patch": "@@ -317,9 +317,23 @@ cp_var_mod_type_p (tree type, tree fn)\n   return false;\n }\n \n+/* This compares two types for equivalence (\"compatible\" in C-based languages).\n+   This routine should only return 1 if it is sure.  It should not be used\n+   in contexts where erroneously returning 0 causes problems.  */\n+\n static int cxx_types_compatible_p (tree x, tree y)\n {\n-  return same_type_ignoring_top_level_qualifiers_p (x, y);\n+  if (same_type_ignoring_top_level_qualifiers_p (x, y))\n+    return 1;\n+\n+  /* Once we get to the middle-end, references and pointers are\n+     interchangeable.  FIXME should we try to replace all references with\n+     pointers?  */\n+  if (POINTER_TYPE_P (x) && POINTER_TYPE_P (y)\n+      && same_type_p (TREE_TYPE (x), TREE_TYPE (y)))\n+    return 1;\n+\n+  return 0;\n }\n \n /* Construct a C++-aware pretty-printer for CONTEXT.  It is assumed"}]}