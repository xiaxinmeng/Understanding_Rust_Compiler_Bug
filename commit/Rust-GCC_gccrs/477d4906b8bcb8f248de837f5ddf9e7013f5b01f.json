{"sha": "477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc3ZDQ5MDZiOGJjYjhmMjQ4ZGU4MzdmNWRkZjllNzAxM2Y1YjAxZg==", "commit": {"author": {"name": "Ilya Verbin", "email": "ilya.verbin@intel.com", "date": "2016-04-20T15:48:53Z"}, "committer": {"name": "Ilya Verbin", "email": "iverbin@gcc.gnu.org", "date": "2016-04-20T15:48:53Z"}, "message": "re PR c++/69363 (ICE when doing a pragma simd reduction with max)\n\nFix PR c++/69363\n\ngcc/c-family/\n\tPR c++/69363\n\t* c-cilkplus.c (c_finish_cilk_clauses): Remove function.\n\t* c-common.h (c_finish_cilk_clauses): Remove declaration.\ngcc/c/\n\tPR c++/69363\n\t* c-parser.c (c_parser_cilk_all_clauses): Use c_finish_omp_clauses\n\tinstead of c_finish_cilk_clauses.\n\t* c-tree.h (c_finish_omp_clauses): Add new default argument.\n\t* c-typeck.c (c_finish_omp_clauses): Add new argument.  Allow\n\tfloating-point variables in the linear clause for Cilk Plus.\ngcc/cp/\n\tPR c++/69363\n\t* cp-tree.h (finish_omp_clauses): Add new default argument.\n\t* parser.c (cp_parser_cilk_simd_all_clauses): Use finish_omp_clauses\n\tinstead of c_finish_cilk_clauses.\n\t* semantics.c (finish_omp_clauses): Add new argument.  Allow\n\tfloating-point variables in the linear clause for Cilk Plus.\ngcc/testsuite/\n\tPR c++/69363\n\t* c-c++-common/cilk-plus/PS/clauses3.c: Adjust dg-error string.\n\t* c-c++-common/cilk-plus/PS/clauses4.c: New test.\n\t* c-c++-common/cilk-plus/PS/pr69363.c: New test.\n\nFrom-SVN: r235290", "tree": {"sha": "d16ed1a8023ecf7c6217b7ae8112e22153ff60dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d16ed1a8023ecf7c6217b7ae8112e22153ff60dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/comments", "author": null, "committer": null, "parents": [{"sha": "fad08d127f63c0deff683d38034863abf5201bb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad08d127f63c0deff683d38034863abf5201bb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fad08d127f63c0deff683d38034863abf5201bb0"}], "stats": {"total": 215, "additions": 140, "deletions": 75}, "files": [{"sha": "fc772147ae88a0b95c06e21e3133b044e27a3e0b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "patch": "@@ -1,3 +1,9 @@\n+2016-04-20  Ilya Verbin  <ilya.verbin@intel.com>\n+\n+\tPR c++/69363\n+\t* c-cilkplus.c (c_finish_cilk_clauses): Remove function.\n+\t* c-common.h (c_finish_cilk_clauses): Remove declaration.\n+\n 2016-04-18  Michael Matz  <matz@suse.de>\n \n \t* c-common.c (handle_aligned_attribute): Use SET_TYPE_ALIGN"}, {"sha": "9f1f36471a8e0d5c6156bc0a986b03627fa290ec", "filename": "gcc/c-family/c-cilkplus.c", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fc-family%2Fc-cilkplus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fc-family%2Fc-cilkplus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cilkplus.c?ref=477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "patch": "@@ -41,56 +41,6 @@ c_check_cilk_loop (location_t loc, tree decl)\n   return true;\n }\n \n-/* Validate and emit code for <#pragma simd> clauses.  */\n-\n-tree\n-c_finish_cilk_clauses (tree clauses)\n-{\n-  for (tree c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n-    {\n-      tree prev = clauses;\n-\n-      /* If a variable appears in a linear clause it cannot appear in\n-\t any other OMP clause.  */\n-      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LINEAR)\n-\tfor (tree c2 = clauses; c2; c2 = OMP_CLAUSE_CHAIN (c2))\n-\t  {\n-\t    if (c == c2)\n-\t      continue;\n-\t    enum omp_clause_code code = OMP_CLAUSE_CODE (c2);\n-\n-\t    switch (code)\n-\t      {\n-\t      case OMP_CLAUSE_LINEAR:\n-\t      case OMP_CLAUSE_PRIVATE:\n-\t      case OMP_CLAUSE_FIRSTPRIVATE:\n-\t      case OMP_CLAUSE_LASTPRIVATE:\n-\t      case OMP_CLAUSE_REDUCTION:\n-\t\tbreak;\n-\n-\t      case OMP_CLAUSE_SAFELEN:\n-\t\tgoto next;\n-\n-\t      default:\n-\t\tgcc_unreachable ();\n-\t      }\n-\n-\t    if (OMP_CLAUSE_DECL (c) == OMP_CLAUSE_DECL (c2))\n-\t      {\n-\t\terror_at (OMP_CLAUSE_LOCATION (c2),\n-\t\t\t  \"variable appears in more than one clause\");\n-\t\tinform (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\"other clause defined here\");\n-\t\t// Remove problematic clauses.\n-\t\tOMP_CLAUSE_CHAIN (prev) = OMP_CLAUSE_CHAIN (c2);\n-\t      }\n-\t  next:\n-\t    prev = c2;\n-\t  }\n-    }\n-  return clauses;\n-}\n-\n /* Calculate number of iterations of CILK_FOR.  */\n \n tree"}, {"sha": "663e457dd52b877c28bbb59a807d2a02b4f514f3", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "patch": "@@ -1369,7 +1369,6 @@ extern enum stv_conv scalar_to_vector (location_t loc, enum tree_code code,\n \t\t\t\t       tree op0, tree op1, bool);\n \n /* In c-cilkplus.c  */\n-extern tree c_finish_cilk_clauses (tree);\n extern tree c_validate_cilk_plus_loop (tree *, int *, void *);\n extern bool c_check_cilk_loop (location_t, tree);\n "}, {"sha": "e300200b0094e3268fdf517766b76d70c03c867f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "patch": "@@ -1,3 +1,12 @@\n+2016-04-20  Ilya Verbin  <ilya.verbin@intel.com>\n+\n+\tPR c++/69363\n+\t* c-parser.c (c_parser_cilk_all_clauses): Use c_finish_omp_clauses\n+\tinstead of c_finish_cilk_clauses.\n+\t* c-tree.h (c_finish_omp_clauses): Add new default argument.\n+\t* c-typeck.c (c_finish_omp_clauses): Add new argument.  Allow\n+\tfloating-point variables in the linear clause for Cilk Plus.\n+\n 2016-04-18  Michael Matz  <matz@suse.de>\n \n \t* c-decl.c (merge_decls): Use SET_DECL_ALIGN and SET_TYPE_ALIGN."}, {"sha": "bdd669dec353ee6cde7625909e652719856ac52a", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "patch": "@@ -17509,7 +17509,7 @@ c_parser_cilk_all_clauses (c_parser *parser)\n \n  saw_error:\n   c_parser_skip_to_pragma_eol (parser);\n-  return c_finish_cilk_clauses (clauses);\n+  return c_finish_omp_clauses (clauses, false, false, true);\n }\n \n /* This function helps parse the grainsize pragma for a _Cilk_for statement."}, {"sha": "4633182eef9301d3ef53aadc1b9128d7764baa68", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "patch": "@@ -661,7 +661,7 @@ extern tree c_begin_omp_task (void);\n extern tree c_finish_omp_task (location_t, tree, tree);\n extern void c_finish_omp_cancel (location_t, tree);\n extern void c_finish_omp_cancellation_point (location_t, tree);\n-extern tree c_finish_omp_clauses (tree, bool, bool = false);\n+extern tree c_finish_omp_clauses (tree, bool, bool = false, bool = false);\n extern tree c_build_va_arg (location_t, tree, location_t, tree);\n extern tree c_finish_transaction (location_t, tree, int);\n extern bool c_tree_equal (tree, tree);"}, {"sha": "58c21393e47eeee9e70f9fece638de060896b37e", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "patch": "@@ -12496,7 +12496,8 @@ c_find_omp_placeholder_r (tree *tp, int *, void *data)\n    Remove any elements from the list that are invalid.  */\n \n tree\n-c_finish_omp_clauses (tree clauses, bool is_omp, bool declare_simd)\n+c_finish_omp_clauses (tree clauses, bool is_omp, bool declare_simd,\n+\t\t      bool is_cilk)\n {\n   bitmap_head generic_head, firstprivate_head, lastprivate_head;\n   bitmap_head aligned_head, map_head, map_field_head;\n@@ -12778,14 +12779,31 @@ c_finish_omp_clauses (tree clauses, bool is_omp, bool declare_simd)\n \t\t\t\"clause on %<simd%> or %<for%> constructs\");\n \t      OMP_CLAUSE_LINEAR_KIND (c) = OMP_CLAUSE_LINEAR_DEFAULT;\n \t    }\n-\t  if (!INTEGRAL_TYPE_P (TREE_TYPE (t))\n-\t      && TREE_CODE (TREE_TYPE (t)) != POINTER_TYPE)\n+\t  if (is_cilk)\n \t    {\n-\t      error_at (OMP_CLAUSE_LOCATION (c),\n-\t\t\t\"linear clause applied to non-integral non-pointer \"\n-\t\t\t\"variable with type %qT\", TREE_TYPE (t));\n-\t      remove = true;\n-\t      break;\n+\t      if (!INTEGRAL_TYPE_P (TREE_TYPE (t))\n+\t\t  && !SCALAR_FLOAT_TYPE_P (TREE_TYPE (t))\n+\t\t  && TREE_CODE (TREE_TYPE (t)) != POINTER_TYPE)\n+\t\t{\n+\t\t  error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t    \"linear clause applied to non-integral, \"\n+\t\t\t    \"non-floating, non-pointer variable with type %qT\",\n+\t\t\t    TREE_TYPE (t));\n+\t\t  remove = true;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  else\n+\t    {\n+\t      if (!INTEGRAL_TYPE_P (TREE_TYPE (t))\n+\t\t  && TREE_CODE (TREE_TYPE (t)) != POINTER_TYPE)\n+\t\t{\n+\t\t  error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t    \"linear clause applied to non-integral non-pointer \"\n+\t\t\t    \"variable with type %qT\", TREE_TYPE (t));\n+\t\t  remove = true;\n+\t\t  break;\n+\t\t}\n \t    }\n \t  if (declare_simd)\n \t    {"}, {"sha": "7cccddb3e4461ca016c733c9dc7c2f1dafdbca3f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "patch": "@@ -1,3 +1,12 @@\n+2016-04-20  Ilya Verbin  <ilya.verbin@intel.com>\n+\n+\tPR c++/69363\n+\t* cp-tree.h (finish_omp_clauses): Add new default argument.\n+\t* parser.c (cp_parser_cilk_simd_all_clauses): Use finish_omp_clauses\n+\tinstead of c_finish_cilk_clauses.\n+\t* semantics.c (finish_omp_clauses): Add new argument.  Allow\n+\tfloating-point variables in the linear clause for Cilk Plus.\n+\n 2016-04-20  Nathan Sidwell  <nathan@acm.org>\n \n \t* semantics.c (finish_compound_lteral): Don't wrap VECTOR_TYPEs in a"}, {"sha": "ec92718626c22d52670b0013307b92acbc02609d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "patch": "@@ -6396,7 +6396,8 @@ extern tree omp_reduction_id\t\t\t(enum tree_code, tree, tree);\n extern tree cp_remove_omp_priv_cleanup_stmt\t(tree *, int *, void *);\n extern void cp_check_omp_declare_reduction\t(tree);\n extern void finish_omp_declare_simd_methods\t(tree);\n-extern tree finish_omp_clauses\t\t\t(tree, bool, bool = false);\n+extern tree finish_omp_clauses\t\t\t(tree, bool, bool = false,\n+\t\t\t\t\t\t bool = false);\n extern tree push_omp_privatization_clauses\t(bool);\n extern void pop_omp_privatization_clauses\t(tree);\n extern void save_omp_privatization_clauses\t(vec<tree> &);"}, {"sha": "0a1ed1a971053ff354ea0205678521e45615876a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "patch": "@@ -37714,7 +37714,7 @@ cp_parser_cilk_simd_all_clauses (cp_parser *parser, cp_token *pragma_token)\n   if (clauses == error_mark_node)\n     return error_mark_node;\n   else\n-    return c_finish_cilk_clauses (clauses);\n+    return finish_omp_clauses (clauses, false, false, true);\n }\n \n /* Main entry-point for parsing Cilk Plus <#pragma simd> for loops.  */"}, {"sha": "93b39ac9a77a84a2cba86103d79172960536d377", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "patch": "@@ -5793,7 +5793,8 @@ cp_finish_omp_clause_depend_sink (tree sink_clause)\n    Remove any elements from the list that are invalid.  */\n \n tree\n-finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd)\n+finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd,\n+\t\t    bool is_cilk)\n {\n   bitmap_head generic_head, firstprivate_head, lastprivate_head;\n   bitmap_head aligned_head, map_head, map_field_head;\n@@ -5889,13 +5890,29 @@ finish_omp_clauses (tree clauses, bool allow_fields, bool declare_simd)\n \t\t}\n \t      if (TREE_CODE (type) == REFERENCE_TYPE)\n \t\ttype = TREE_TYPE (type);\n-\t      if (!INTEGRAL_TYPE_P (type)\n-\t\t  && TREE_CODE (type) != POINTER_TYPE)\n+\t      if (is_cilk)\n \t\t{\n-\t\t  error (\"linear clause applied to non-integral non-pointer \"\n-\t\t\t \"variable with %qT type\", TREE_TYPE (t));\n-\t\t  remove = true;\n-\t\t  break;\n+\t\t  if (!INTEGRAL_TYPE_P (type)\n+\t\t      && !SCALAR_FLOAT_TYPE_P (type)\n+\t\t      && TREE_CODE (type) != POINTER_TYPE)\n+\t\t    {\n+\t\t      error (\"linear clause applied to non-integral, \"\n+\t\t\t     \"non-floating, non-pointer variable with %qT type\",\n+\t\t\t     TREE_TYPE (t));\n+\t\t      remove = true;\n+\t\t      break;\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (!INTEGRAL_TYPE_P (type)\n+\t\t      && TREE_CODE (type) != POINTER_TYPE)\n+\t\t    {\n+\t\t      error (\"linear clause applied to non-integral non-pointer\"\n+\t\t\t     \" variable with %qT type\", TREE_TYPE (t));\n+\t\t      remove = true;\n+\t\t      break;\n+\t\t    }\n \t\t}\n \t    }\n \t  t = OMP_CLAUSE_LINEAR_STEP (c);"}, {"sha": "bf59b9b180271e7c5288f7bacf7e56c3996c1c86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "patch": "@@ -1,3 +1,10 @@\n+2016-04-20  Ilya Verbin  <ilya.verbin@intel.com>\n+\n+\tPR c++/69363\n+\t* c-c++-common/cilk-plus/PS/clauses3.c: Adjust dg-error string.\n+\t* c-c++-common/cilk-plus/PS/clauses4.c: New test.\n+\t* c-c++-common/cilk-plus/PS/pr69363.c: New test.\n+\n 2016-04-20  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/56625"}, {"sha": "0b5ace6a1a091fee6e5d2dbfade33471e2e03b87", "filename": "gcc/testsuite/c-c++-common/cilk-plus/PS/clauses3.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FPS%2Fclauses3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FPS%2Fclauses3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FPS%2Fclauses3.c?ref=477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "patch": "@@ -6,31 +6,31 @@\n int A[N], B[N], C[N];\n int main (void)\n {\n-#pragma simd private (B) linear(B:1) /* { dg-error \"more than one clause\" } */\n+#pragma simd private (B) linear(B:1) /* { dg-error \"applied to non-integral\" } */\n   for (int ii = 0; ii < N; ii++)\n     {\n       A[ii] = B[ii] + C[ii];\n     }\n \n-#pragma simd private (B, C) linear(B:1) /* { dg-error \"more than one clause\" } */\n+#pragma simd private (B, C) linear(B:1) /* { dg-error \"applied to non-integral\" } */\n   for (int ii = 0; ii < N; ii++)\n     {\n       A[ii] = B[ii] + C[ii];\n     }\n \n-#pragma simd private (B) linear(C:2, B:1) /* { dg-error \"more than one clause\" } */\n+#pragma simd private (B) linear(C:2, B:1) /* { dg-error \"applied to non-integral\" } */\n   for (int ii = 0; ii < N; ii++)\n     {\n       A[ii] = B[ii] + C[ii];\n     }\n \n-#pragma simd reduction (+:B) linear(B:1) /* { dg-error \"more than one clause\" } */\n+#pragma simd reduction (+:B) linear(B:1) /* { dg-error \"applied to non-integral\" } */\n   for (int ii = 0; ii < N; ii++)\n     {\n       A[ii] = B[ii] + C[ii];\n     }\n \n-#pragma simd reduction (+:B) linear(B) /* { dg-error \"more than one clause\" } */\n+#pragma simd reduction (+:B) linear(B) /* { dg-error \"applied to non-integral\" } */\n   for (int ii = 0; ii < N; ii++)\n     {\n       A[ii] = B[ii] + C[ii];"}, {"sha": "45dcb9f606a072dceb8a4abd5ab8fd994a02fd90", "filename": "gcc/testsuite/c-c++-common/cilk-plus/PS/clauses4.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FPS%2Fclauses4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FPS%2Fclauses4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FPS%2Fclauses4.c?ref=477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus\" } */\n+\n+#define N 1000\n+\n+int B, C;\n+double D;\n+\n+int main (void)\n+{\n+  #pragma simd linear (D:10)\n+  for (int ii = 0; ii < N; ii++)\n+    ;\n+\n+  #pragma simd private (B) linear(B:1) /* { dg-error \"more than once\" } */\n+  for (int ii = 0; ii < N; ii++)\n+    ;\n+\n+  #pragma simd private (B, C) linear(B:1) /* { dg-error \"more than once\" } */\n+  for (int ii = 0; ii < N; ii++)\n+    ;\n+\n+  #pragma simd private (B) linear(C:2, B:1) /* { dg-error \"more than once\" } */\n+  for (int ii = 0; ii < N; ii++)\n+    ;\n+\n+  #pragma simd reduction (+:B) linear(B:1) /* { dg-error \"more than once\" } */\n+  for (int ii = 0; ii < N; ii++)\n+    ;\n+\n+  #pragma simd reduction (+:B) linear(B) /* { dg-error \"more than once\" } */\n+  for (int ii = 0; ii < N; ii++)\n+    ;\n+\n+  return 0;\n+}"}, {"sha": "1d1bb048e4962e54dd8edd800d6ad922f99d8b01", "filename": "gcc/testsuite/c-c++-common/cilk-plus/PS/pr69363.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FPS%2Fpr69363.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/477d4906b8bcb8f248de837f5ddf9e7013f5b01f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FPS%2Fpr69363.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FPS%2Fpr69363.c?ref=477d4906b8bcb8f248de837f5ddf9e7013f5b01f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus\" } */\n+\n+double t1 (double *x, int N)\n+{\n+  double result = 0.0;\n+\n+  #pragma simd reduction (max: result)\n+  for (int i = 0; i < N; ++i)\n+    result = x[i] > result ? x[i] : result;\n+\n+  return result;\n+}"}]}