{"sha": "53881c47e4b3574e2cb2046a6cb154c87a9836b6", "node_id": "C_kwDOANBUbNoAKDUzODgxYzQ3ZTRiMzU3NGUyY2IyMDQ2YTZjYjE1NGM4N2E5ODM2YjY", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-10-24T20:38:23Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-10-24T20:38:23Z"}, "message": "analyzer: simplify sm_state_map lookup\n\ngcc/analyzer/ChangeLog:\n\t* engine.cc (impl_region_model_context::get_malloc_map): Replace\n\twith...\n\t(impl_region_model_context::get_state_map_by_name): ...this.\n\t(impl_region_model_context::get_fd_map): Delete.\n\t(impl_region_model_context::get_taint_map): Delete.\n\t* exploded-graph.h (impl_region_model_context::get_fd_map):\n\tDelete.\n\t(impl_region_model_context::get_malloc_map): Delete.\n\t(impl_region_model_context::get_taint_map): Delete.\n\t(impl_region_model_context::get_state_map_by_name): New.\n\t* region-model.h (region_model_context::get_state_map_by_name):\n\tNew vfunc.\n\t(region_model_context::get_fd_map): Convert from vfunc to\n\tfunction.\n\t(region_model_context::get_malloc_map): Likewise.\n\t(region_model_context::get_taint_map): Likewise.\n\t(noop_region_model_context::get_state_map_by_name): New.\n\t(noop_region_model_context::get_fd_map): Delete.\n\t(noop_region_model_context::get_malloc_map): Delete.\n\t(noop_region_model_context::get_taint_map): Delete.\n\t(region_model_context_decorator::get_state_map_by_name): New.\n\t(region_model_context_decorator::get_fd_map): Delete.\n\t(region_model_context_decorator::get_malloc_map): Delete.\n\t(region_model_context_decorator::get_taint_map): Delete.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "5ef483c2022f811ae72f22e7b73ab4a56959374c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ef483c2022f811ae72f22e7b73ab4a56959374c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53881c47e4b3574e2cb2046a6cb154c87a9836b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53881c47e4b3574e2cb2046a6cb154c87a9836b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53881c47e4b3574e2cb2046a6cb154c87a9836b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53881c47e4b3574e2cb2046a6cb154c87a9836b6/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "792f039fc37faa3446725a643c8018f084e8ccab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/792f039fc37faa3446725a643c8018f084e8ccab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/792f039fc37faa3446725a643c8018f084e8ccab"}], "stats": {"total": 140, "additions": 48, "deletions": 92}, "files": [{"sha": "52978dd0d37a96e8f2c3a6e895143604bb2b2011", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 9, "deletions": 38, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53881c47e4b3574e2cb2046a6cb154c87a9836b6/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53881c47e4b3574e2cb2046a6cb154c87a9836b6/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=53881c47e4b3574e2cb2046a6cb154c87a9836b6", "patch": "@@ -214,50 +214,21 @@ impl_region_model_context::terminate_path ()\n }\n \n bool\n-impl_region_model_context::get_malloc_map (sm_state_map **out_smap,\n-\t\t\t\t\t   const state_machine **out_sm,\n-\t\t\t\t\t   unsigned *out_sm_idx)\n-{\n-  unsigned malloc_sm_idx;\n-  if (!m_ext_state.get_sm_idx_by_name (\"malloc\", &malloc_sm_idx))\n-    return false;\n-\n-  *out_smap = m_new_state->m_checker_states[malloc_sm_idx];\n-  *out_sm = &m_ext_state.get_sm (malloc_sm_idx);\n-  *out_sm_idx = malloc_sm_idx;\n-  return true;\n-}\n-\n-bool\n-impl_region_model_context::get_fd_map (sm_state_map **out_smap,\n-\t\t\t\t       const state_machine **out_sm,\n-\t\t\t\t       unsigned *out_sm_idx)\n-{\n-  unsigned fd_sm_idx;\n-  if (!m_ext_state.get_sm_idx_by_name (\"file-descriptor\", &fd_sm_idx))\n-    return false;\n-\n-  *out_smap = m_new_state->m_checker_states[fd_sm_idx];\n-  *out_sm = &m_ext_state.get_sm (fd_sm_idx);\n-  *out_sm_idx = fd_sm_idx;\n-  return true;\n-}\n-\n-bool\n-impl_region_model_context::get_taint_map (sm_state_map **out_smap,\n-\t\t\t\t\t  const state_machine **out_sm,\n-\t\t\t\t\t  unsigned *out_sm_idx)\n+impl_region_model_context::get_state_map_by_name (const char *name,\n+\t\t\t\t\t\t  sm_state_map **out_smap,\n+\t\t\t\t\t\t  const state_machine **out_sm,\n+\t\t\t\t\t\t  unsigned *out_sm_idx)\n {\n   if (!m_new_state)\n     return false;\n \n-  unsigned taint_sm_idx;\n-  if (!m_ext_state.get_sm_idx_by_name (\"taint\", &taint_sm_idx))\n+  unsigned sm_idx;\n+  if (!m_ext_state.get_sm_idx_by_name (name, &sm_idx))\n     return false;\n \n-  *out_smap = m_new_state->m_checker_states[taint_sm_idx];\n-  *out_sm = &m_ext_state.get_sm (taint_sm_idx);\n-  *out_sm_idx = taint_sm_idx;\n+  *out_smap = m_new_state->m_checker_states[sm_idx];\n+  *out_sm = &m_ext_state.get_sm (sm_idx);\n+  *out_sm_idx = sm_idx;\n   return true;\n }\n "}, {"sha": "5996252f1fbc3aa566c7ecc09586d3c611346b4a", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53881c47e4b3574e2cb2046a6cb154c87a9836b6/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53881c47e4b3574e2cb2046a6cb154c87a9836b6/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=53881c47e4b3574e2cb2046a6cb154c87a9836b6", "patch": "@@ -96,15 +96,10 @@ class impl_region_model_context : public region_model_context\n   {\n     return &m_ext_state;\n   }\n-  bool get_fd_map (sm_state_map **out_smap,\n-\t\t   const state_machine **out_sm,\n-\t\t   unsigned *out_sm_idx) final override;\n-  bool get_malloc_map (sm_state_map **out_smap,\n-\t\t       const state_machine **out_sm,\n-\t\t       unsigned *out_sm_idx) final override;\n-  bool get_taint_map (sm_state_map **out_smap,\n-\t\t       const state_machine **out_sm,\n-\t\t       unsigned *out_sm_idx) final override;\n+  bool get_state_map_by_name (const char *name,\n+\t\t\t      sm_state_map **out_smap,\n+\t\t\t      const state_machine **out_sm,\n+\t\t\t      unsigned *out_sm_idx) override;\n \n   const gimple *get_stmt () const override { return m_stmt; }\n "}, {"sha": "19e8043daa404c36355b99cf10684abcc0f6ee3d", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53881c47e4b3574e2cb2046a6cb154c87a9836b6/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53881c47e4b3574e2cb2046a6cb154c87a9836b6/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=53881c47e4b3574e2cb2046a6cb154c87a9836b6", "patch": "@@ -737,19 +737,33 @@ class region_model_context\n \n   virtual const extrinsic_state *get_ext_state () const = 0;\n \n-  /* Hook for clients to access the \"fd\" state machine in\n+  /* Hook for clients to access the a specific state machine in\n      any underlying program_state.  */\n-  virtual bool get_fd_map (sm_state_map **out_smap,\n-\t\t\t   const state_machine **out_sm,\n-\t\t\t   unsigned *out_sm_idx) = 0;\n-  /* Likewise for the \"malloc\" state machine.  */\n-  virtual bool get_malloc_map (sm_state_map **out_smap,\n-\t\t\t       const state_machine **out_sm,\n-\t\t\t       unsigned *out_sm_idx) = 0;\n-  /* Likewise for the \"taint\" state machine.  */\n-  virtual bool get_taint_map (sm_state_map **out_smap,\n-\t\t\t      const state_machine **out_sm,\n-\t\t\t      unsigned *out_sm_idx) = 0;\n+  virtual bool get_state_map_by_name (const char *name,\n+\t\t\t\t      sm_state_map **out_smap,\n+\t\t\t\t      const state_machine **out_sm,\n+\t\t\t\t      unsigned *out_sm_idx) = 0;\n+\n+  /* Precanned ways for clients to access specific state machines.  */\n+  bool get_fd_map (sm_state_map **out_smap,\n+\t\t   const state_machine **out_sm,\n+\t\t   unsigned *out_sm_idx)\n+  {\n+    return get_state_map_by_name (\"file-descriptor\", out_smap, out_sm,\n+\t\t\t\t  out_sm_idx);\n+  }\n+  bool get_malloc_map (sm_state_map **out_smap,\n+\t\t       const state_machine **out_sm,\n+\t\t       unsigned *out_sm_idx)\n+  {\n+    return get_state_map_by_name (\"malloc\", out_smap, out_sm, out_sm_idx);\n+  }\n+  bool get_taint_map (sm_state_map **out_smap,\n+\t\t      const state_machine **out_sm,\n+\t\t      unsigned *out_sm_idx)\n+  {\n+    return get_state_map_by_name (\"taint\", out_smap, out_sm, out_sm_idx);\n+  }\n \n   /* Get the current statement, if any.  */\n   virtual const gimple *get_stmt () const = 0;\n@@ -796,21 +810,10 @@ class noop_region_model_context : public region_model_context\n \n   const extrinsic_state *get_ext_state () const override { return NULL; }\n \n-  bool get_fd_map (sm_state_map **,\n-\t\t   const state_machine **,\n-\t\t   unsigned *) override\n-  {\n-    return false;\n-  }\n-  bool get_malloc_map (sm_state_map **,\n-\t\t       const state_machine **,\n-\t\t       unsigned *) override\n-  {\n-    return false;\n-  }\n-  bool get_taint_map (sm_state_map **,\n-\t\t      const state_machine **,\n-\t\t      unsigned *) override\n+  bool get_state_map_by_name (const char *,\n+\t\t\t      sm_state_map **,\n+\t\t\t      const state_machine **,\n+\t\t\t      unsigned *) override\n   {\n     return false;\n   }\n@@ -929,25 +932,12 @@ class region_model_context_decorator : public region_model_context\n     return m_inner->get_ext_state ();\n   }\n \n-  bool get_fd_map (sm_state_map **out_smap,\n-\t\t   const state_machine **out_sm,\n-\t\t   unsigned *out_sm_idx) override\n-  {\n-    return m_inner->get_fd_map (out_smap, out_sm, out_sm_idx);\n-  }\n-\n-  bool get_malloc_map (sm_state_map **out_smap,\n-\t\t       const state_machine **out_sm,\n-\t\t       unsigned *out_sm_idx) override\n-  {\n-    return m_inner->get_malloc_map (out_smap, out_sm, out_sm_idx);\n-  }\n-\n-  bool get_taint_map (sm_state_map **out_smap,\n-\t\t      const state_machine **out_sm,\n-\t\t      unsigned *out_sm_idx) override\n+  bool get_state_map_by_name (const char *name,\n+\t\t\t      sm_state_map **out_smap,\n+\t\t\t      const state_machine **out_sm,\n+\t\t\t      unsigned *out_sm_idx) override\n   {\n-    return m_inner->get_taint_map (out_smap, out_sm, out_sm_idx);\n+    return m_inner->get_state_map_by_name (name, out_smap, out_sm, out_sm_idx);\n   }\n \n   const gimple *get_stmt () const override"}]}