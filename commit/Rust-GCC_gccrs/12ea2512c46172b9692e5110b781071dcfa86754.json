{"sha": "12ea2512c46172b9692e5110b781071dcfa86754", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJlYTI1MTJjNDYxNzJiOTY5MmU1MTEwYjc4MTA3MWRjZmE4Njc1NA==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2005-12-16T01:31:39Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2005-12-16T01:31:39Z"}, "message": "predicates.md (m32c_psi_scale): New.\n\n* config/m32c/predicates.md (m32c_psi_scale): New.\n* config/m32c/m32c.c (m32c_expand_neg_mulpsi3): New.\n* config/m32c/muldiv.md (mulpsi3): Support negative constants.\n\nFrom-SVN: r108620", "tree": {"sha": "d42ce2ab6f459bf43ed2bd447cfcde5d0656e0fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d42ce2ab6f459bf43ed2bd447cfcde5d0656e0fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12ea2512c46172b9692e5110b781071dcfa86754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12ea2512c46172b9692e5110b781071dcfa86754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12ea2512c46172b9692e5110b781071dcfa86754", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12ea2512c46172b9692e5110b781071dcfa86754/comments", "author": null, "committer": null, "parents": [{"sha": "6cb8c0591503deecee9e634063ae53a7872b1020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cb8c0591503deecee9e634063ae53a7872b1020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cb8c0591503deecee9e634063ae53a7872b1020"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "584f6e517b55bccfa344675759ae9ed14e99e682", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ea2512c46172b9692e5110b781071dcfa86754/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ea2512c46172b9692e5110b781071dcfa86754/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=12ea2512c46172b9692e5110b781071dcfa86754", "patch": "@@ -1,3 +1,9 @@\n+2005-12-15  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/m32c/predicates.md (m32c_psi_scale): New.\n+\t* config/m32c/m32c.c (m32c_expand_neg_mulpsi3): New.\n+\t* config/m32c/muldiv.md (mulpsi3): Support negative constants.\n+\n 2005-12-16  Jan Hubicka  <jh@suse.cz>\n \n \tPR rtl-optimization/25224"}, {"sha": "8580922a402d939569ffc3c51f3db4cfc3201c57", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ea2512c46172b9692e5110b781071dcfa86754/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ea2512c46172b9692e5110b781071dcfa86754/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=12ea2512c46172b9692e5110b781071dcfa86754", "patch": "@@ -2798,6 +2798,30 @@ m32c_prepare_shift (rtx * operands, int scale, int bits)\n   return 0;\n }\n \n+/* The m32c has a limited range of operations that work on PSImode\n+   values; we have to expand to SI, do the math, and truncate back to\n+   PSI.  Yes, this is expensive, but hopefully gcc will learn to avoid\n+   those cases.  */\n+void\n+m32c_expand_neg_mulpsi3 (rtx * operands)\n+{\n+  /* operands: a = b * i */\n+  rtx temp1; /* b as SI */\n+  rtx temp2; /* -b as SI */\n+  rtx temp3; /* -b as PSI */\n+  rtx scale;\n+\n+  temp1 = gen_reg_rtx (SImode);\n+  temp2 = gen_reg_rtx (SImode);\n+  temp3 = gen_reg_rtx (PSImode);\n+  scale = GEN_INT (- INTVAL (operands[2]));\n+\n+  emit_insn (gen_zero_extendpsisi2 (temp1, operands[1]));\n+  emit_insn (gen_negsi2 (temp2, temp1));\n+  emit_insn (gen_truncsipsi2 (temp3, temp2));\n+  emit_insn (gen_mulpsi3 (operands[0], temp3, scale));\n+}\n+\n /* Pattern Output Functions */\n \n /* Returns TRUE if the current function is a leaf, and thus we can"}, {"sha": "bf6f35755dd9f8ce0c599ef8ceb14e037dcd8983", "filename": "gcc/config/m32c/muldiv.md", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ea2512c46172b9692e5110b781071dcfa86754/gcc%2Fconfig%2Fm32c%2Fmuldiv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ea2512c46172b9692e5110b781071dcfa86754/gcc%2Fconfig%2Fm32c%2Fmuldiv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fmuldiv.md?ref=12ea2512c46172b9692e5110b781071dcfa86754", "patch": "@@ -127,16 +127,29 @@\n \n \n ; GCC expects to be able to multiply pointer-sized integers too, but\n-; fortunately it only multiplies by powers of two.\n-(define_insn \"mulpsi3\"\n+; fortunately it only multiplies by powers of two, although sometimes\n+; they're negative.\n+(define_insn \"mulpsi3_op\"\n   [(set (match_operand:PSI 0 \"mra_operand\" \"=RsiSd\")\n \t(mult:PSI (match_operand:PSI 1 \"mra_operand\" \"%0\")\n-\t\t  (match_operand 2 \"const_int_operand\" \"Ilb\")))]\n+\t\t  (match_operand 2 \"m32c_psi_scale\" \"Ilb\")))]\n   \"TARGET_A24\"\n   \"shl.l\\t%b2,%0\"\n   [(set_attr \"flags\" \"szc\")]\n   )\n \n+(define_expand \"mulpsi3\"\n+  [(set (match_operand:PSI 0 \"mra_operand\" \"=RsiSd\")\n+\t(mult:PSI (match_operand:PSI 1 \"mra_operand\" \"%0\")\n+\t\t  (match_operand 2 \"m32c_psi_scale\" \"Ilb\")))]\n+  \"TARGET_A24\"\n+  \"if (INTVAL(operands[2]) < 0)\n+     {\n+       m32c_expand_neg_mulpsi3 (operands);\n+       DONE;\n+     }\"\n+  )\n+\n \n \n (define_expand \"divmodqi4\""}, {"sha": "0c80e1a5e5a2772a4c6e14ac7935b7930b15bdeb", "filename": "gcc/config/m32c/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12ea2512c46172b9692e5110b781071dcfa86754/gcc%2Fconfig%2Fm32c%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12ea2512c46172b9692e5110b781071dcfa86754/gcc%2Fconfig%2Fm32c%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fpredicates.md?ref=12ea2512c46172b9692e5110b781071dcfa86754", "patch": "@@ -195,3 +195,8 @@\n   (ior (match_operand 0 \"m32c_r0_operand\")\n        (ior (match_operand 0 \"m32c_mem0_operand\")\n \t    (match_code \"parallel\"))))\n+\n+; TRUE for constants we can multiply pointers by\n+(define_predicate \"m32c_psi_scale\"\n+  (and (match_operand 0 \"const_int_operand\")\n+       (match_test \"m32c_const_ok_for_constraint_p(INTVAL(op), 'I', \\\"Ilb\\\")\")))"}]}