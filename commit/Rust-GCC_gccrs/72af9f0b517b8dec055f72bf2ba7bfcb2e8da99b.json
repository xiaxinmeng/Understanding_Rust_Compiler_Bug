{"sha": "72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJhZjlmMGI1MTdiOGRlYzA1NWY3MmJmMmJhN2JmY2IyZThkYTk5Yg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-07-13T05:07:35Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-07-13T05:07:35Z"}, "message": "re PR fortran/28174 (Corruption of multiple character arrays when passing array sections)\n\n2006-07-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/28174\n\t* trans-expr.c (gfc_conv_aliased_arg): Missing formal arg means\n\tthat intent is INOUT (fixes regression).\n\n\tPR fortran/25097\n\t* check.c (check_present): The only permitted reference is a\n\tfull array reference.\n\n\tPR fortran/20903\n\t* decl.c (variable_decl): Add error if a derived type is not\n\tfrom the current namespace if the namespace is an interface\n\tbody.\n\n2006-07-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/25097\n\t* gfortran.dg/present_1.f90: New test.\n\n\tPR fortran/20903\n\t* gfortran.dg/interface_derived_type_1.f90: New test.\n\nFrom-SVN: r115410", "tree": {"sha": "677273f32ea31a251f8e44292ca967e69e8d4e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/677273f32ea31a251f8e44292ca967e69e8d4e7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b/comments", "author": null, "committer": null, "parents": [{"sha": "3fb8727b3b054dbb2c934baf33bb8946eeb3fae1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb8727b3b054dbb2c934baf33bb8946eeb3fae1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fb8727b3b054dbb2c934baf33bb8946eeb3fae1"}], "stats": {"total": 130, "additions": 129, "deletions": 1}, "files": [{"sha": "c9a95ce7a978dad5bbac1571f01c9cce0e962218", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b", "patch": "@@ -1,3 +1,18 @@\n+006-07-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/28174\n+\t* trans-expr.c (gfc_conv_aliased_arg): Missing formal arg means\n+\tthat intent is INOUT (fixes regression).\n+\n+\tPR fortran/25097\n+\t* check.c (check_present): The only permitted reference is a\n+\tfull array reference.\n+\n+\tPR fortran/20903\n+\t* decl.c (variable_decl): Add error if a derived type is not\n+\tfrom the current namespace if the namespace is an interface\n+\tbody.\n+\n 2006-07-12  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/28163"}, {"sha": "1332c2bd6aa8a2c2e0395ca4e961d7a8e72a4d27", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b", "patch": "@@ -1867,6 +1867,22 @@ gfc_check_present (gfc_expr * a)\n       return FAILURE;\n     }\n \n+/*  13.14.82  PRESENT(A)\n+......\n+  Argument.  A shall be the name of an optional dummy argument that is accessible\n+  in the subprogram in which the PRESENT function reference appears...  */\n+\n+  if (a->ref != NULL\n+\t&& !(a->ref->next == NULL\n+\t       && a->ref->type == REF_ARRAY\n+\t       && a->ref->u.ar.type == AR_FULL))\n+    {\n+      gfc_error (\"'%s' argument of '%s' intrinsic at %L must not be a sub-\"\n+\t\t \"object of '%s'\", gfc_current_intrinsic_arg[0],\n+\t\t gfc_current_intrinsic, &a->where, sym->name);\n+      return FAILURE;\n+    }\n+\n   return SUCCESS;\n }\n "}, {"sha": "fb980d63451b6e9cf1181e85a0396ff2c03027dc", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b", "patch": "@@ -1176,6 +1176,20 @@ variable_decl (int elem)\n       goto cleanup;\n     }\n \n+  /* An interface body specifies all of the procedure's characteristics and these\n+     shall be consistent with those specified in the procedure definition, except\n+     that the interface may specify a procedure that is not pure if the procedure\n+     is defined to be pure(12.3.2).  */\n+  if (current_ts.type == BT_DERIVED\n+\t&& gfc_current_ns->proc_name->attr.if_source == IFSRC_IFBODY\n+\t&& current_ts.derived->ns != gfc_current_ns)\n+    {\n+      gfc_error (\"the type of '%s' at %C has not been declared within the \"\n+\t\t \"interface\", name);\n+      m = MATCH_ERROR;\n+      goto cleanup;\n+    }\n+\n   /* In functions that have a RESULT variable defined, the function\n      name always refers to function calls.  Therefore, the name is\n      not allowed to appear in specification statements.  */"}, {"sha": "de003ec52234a66d13261fb6b1572004ea1cf8d0", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b", "patch": "@@ -1981,7 +1981,8 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t\t   array of derived types.  In this case, the argument\n \t\t   is converted to a temporary, which is passed and then\n \t\t   written back after the procedure call.  */\n-\t\tgfc_conv_aliased_arg (&parmse, e, f, fsym->attr.intent);\n+\t\tgfc_conv_aliased_arg (&parmse, e, f,\n+\t\t\tfsym ? fsym->attr.intent : INTENT_INOUT);\n \t      else\n \t        gfc_conv_array_parameter (&parmse, e, argss, f);\n "}, {"sha": "e196166193503cf99588edf77ffb966f62e2b9bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b", "patch": "@@ -1,3 +1,11 @@\n+2006-07-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/25097\n+\t* gfortran.dg/present_1.f90: New test.\n+\n+\tPR fortran/20903\n+\t* gfortran.dg/interface_derived_type_1.f90: New test.\n+\n 2006-07-11  Feng Wang  <fengwang@nudt.edu.cn>\n \n \tPR fortran/28213"}, {"sha": "7c165b336e9c0c9a8fc097993c70b311beaea7c9", "filename": "gcc/testsuite/gfortran.dg/interface_derived_type_1.f90", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_derived_type_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_derived_type_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_derived_type_1.f90?ref=72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b", "patch": "@@ -0,0 +1,54 @@\n+! { dg-do compile }\n+! Test the fix for PR20903, in which derived types could be host associated within\n+! interface bodies.\n+!\n+! Contributed by Joost VandeVondele <jv244@cam.ac.uk>\n+! \n+module test\n+  implicit none\n+  type fcnparms\n+    integer :: i\n+  end type fcnparms\n+contains\n+  subroutine sim_1(func1,params)\n+    interface\n+      function func1(fparams)\n+        type(fcnparms) :: fparams ! { dg-error \"not been declared within the interface\" }\n+        real :: func1\n+      end function func1\n+    end interface\n+    type(fcnparms)     :: params\n+   end subroutine sim_1\n+\n+  subroutine sim_2(func2,params)\n+    interface\n+      function func2(fparams)     ! This is OK because of the derived type decl.\n+        type fcnparms\n+          integer :: i\n+        end type fcnparms\n+        type(fcnparms)  :: fparams\n+        real :: func2\n+      end function func2\n+    end interface\n+    type(fcnparms)      :: params ! This is OK, of course\n+   end subroutine sim_2\n+end module  test\n+\n+module type_decl\n+  implicit none\n+  type fcnparms\n+    integer :: i\n+  end type fcnparms\n+end module type_decl\n+\n+subroutine sim_3(func3,params)\n+  use type_decl\n+  interface\n+    function func3(fparams)\n+      use type_decl\n+      type(fcnparms)   :: fparams ! This is OK - use associated\n+      real :: func3\n+    end function func3\n+  end interface\n+  type(fcnparms)       :: params  !         -ditto-\n+end subroutine sim_3"}, {"sha": "b7b983610c40e3d7cad8ac1d796a7462114d023e", "filename": "gcc/testsuite/gfortran.dg/present_1.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpresent_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpresent_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpresent_1.f90?ref=72af9f0b517b8dec055f72bf2ba7bfcb2e8da99b", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile }\n+! Test the fix for PR25097, in which subobjects of the optional dummy argument\n+! could appear as argument A of the PRESENT intrinsic.\n+! \n+! Contributed by Joost VandeVondele <jv244@cam.ac.uk>\n+!\n+ MODULE M1\n+  TYPE T1\n+   INTEGER :: I\n+  END TYPE T1\n+ CONTAINS\n+  SUBROUTINE S1(D1)\n+   TYPE(T1), OPTIONAL :: D1(4)\n+   write(6,*) PRESENT(D1%I)  ! { dg-error \"must not be a sub-object\" }\n+   write(6,*) PRESENT(D1(1)) ! { dg-error \"must not be a sub-object\" }\n+   write(6,*) PRESENT(D1)\n+  END SUBROUTINE S1\n+ END MODULE\n+ END\n+"}]}