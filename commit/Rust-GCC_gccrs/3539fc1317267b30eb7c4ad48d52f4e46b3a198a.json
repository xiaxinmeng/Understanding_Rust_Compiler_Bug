{"sha": "3539fc1317267b30eb7c4ad48d52f4e46b3a198a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUzOWZjMTMxNzI2N2IzMGViN2M0YWQ0OGQ1MmY0ZTQ2YjNhMTk4YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-01T02:59:48Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-03T14:21:06Z"}, "message": "c++: Fix cast to pointer to VLA.\n\nThe C front-end fixed this issue in r257620 by adding a DECL_EXPR from\ngrokdeclarator.  We don't have an easy way to do that in the C++ front-end,\nbut it works fine to create and prepend a DECL_EXPR when we are genericizing\nthe NOP_EXPR for the cast.\n\nThe C patch wraps the DECL_EXPR in a BIND_EXPR, but that seems unnecessary\nin C++; this is just a hook to run gimplify_type_sizes, we aren't actually\ndeclaring anything that we need to worry about scoping for.\n\n\tPR c++/88256\n\t* cp-gimplify.c (predeclare_vla): New.\n\t(cp_genericize_r) [NOP_EXPR]: Call it.", "tree": {"sha": "7bb9a2798fc1b9e3a94539e44b31f861b3f99194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bb9a2798fc1b9e3a94539e44b31f861b3f99194"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3539fc1317267b30eb7c4ad48d52f4e46b3a198a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3539fc1317267b30eb7c4ad48d52f4e46b3a198a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3539fc1317267b30eb7c4ad48d52f4e46b3a198a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3539fc1317267b30eb7c4ad48d52f4e46b3a198a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44f77a6dea2f312ee1743f3dde465c1b8453ee13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f77a6dea2f312ee1743f3dde465c1b8453ee13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f77a6dea2f312ee1743f3dde465c1b8453ee13"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "3144688f090c406a38fc16aeb95e045f27bd08b5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3539fc1317267b30eb7c4ad48d52f4e46b3a198a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3539fc1317267b30eb7c4ad48d52f4e46b3a198a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3539fc1317267b30eb7c4ad48d52f4e46b3a198a", "patch": "@@ -1,3 +1,9 @@\n+2020-02-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/88256\n+\t* cp-gimplify.c (predeclare_vla): New.\n+\t(cp_genericize_r) [NOP_EXPR]: Call it.\n+\n 2020-02-03  Jun Ma <JunMa@linux.alibaba.com>\n \n \t* coroutines.cc (transform_await_wrapper): Set actor funcion as"}, {"sha": "10ab99515e66594b3175e22737cd543ea1f5b03a", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3539fc1317267b30eb7c4ad48d52f4e46b3a198a/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3539fc1317267b30eb7c4ad48d52f4e46b3a198a/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=3539fc1317267b30eb7c4ad48d52f4e46b3a198a", "patch": "@@ -1188,6 +1188,36 @@ static tree genericize_spaceship (tree expr)\n   return genericize_spaceship (type, op0, op1);\n }\n \n+/* If EXPR involves an anonymous VLA type, prepend a DECL_EXPR for that type\n+   to trigger gimplify_type_sizes; otherwise a cast to pointer-to-VLA confuses\n+   the middle-end (c++/88256).  */\n+\n+static tree\n+predeclare_vla (tree expr)\n+{\n+  tree type = TREE_TYPE (expr);\n+  if (type == error_mark_node)\n+    return expr;\n+\n+  /* We need to strip pointers for gimplify_type_sizes.  */\n+  tree vla = type;\n+  while (POINTER_TYPE_P (vla))\n+    {\n+      if (TYPE_NAME (vla))\n+\treturn expr;\n+      vla = TREE_TYPE (vla);\n+    }\n+  if (TYPE_NAME (vla) || !variably_modified_type_p (vla, NULL_TREE))\n+    return expr;\n+\n+  tree decl = build_decl (input_location, TYPE_DECL, NULL_TREE, vla);\n+  DECL_ARTIFICIAL (decl) = 1;\n+  TYPE_NAME (vla) = decl;\n+  tree dexp = build_stmt (input_location, DECL_EXPR, decl);\n+  expr = build2 (COMPOUND_EXPR, type, dexp, expr);\n+  return expr;\n+}\n+\n /* Perform any pre-gimplification lowering of C++ front end trees to\n    GENERIC.  */\n \n@@ -1648,6 +1678,7 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n       break;\n \n     case NOP_EXPR:\n+      *stmt_p = predeclare_vla (*stmt_p);\n       if (!wtd->no_sanitize_p\n \t  && sanitize_flags_p (SANITIZE_NULL | SANITIZE_ALIGNMENT)\n \t  && TYPE_REF_P (TREE_TYPE (stmt)))"}, {"sha": "27150dd5328d64f893ca3b2a44886e3d7fb66350", "filename": "gcc/testsuite/c-c++-common/pr84305.c", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3539fc1317267b30eb7c4ad48d52f4e46b3a198a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr84305.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3539fc1317267b30eb7c4ad48d52f4e46b3a198a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr84305.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr84305.c?ref=3539fc1317267b30eb7c4ad48d52f4e46b3a198a", "patch": "@@ -1,3 +1,5 @@\n+// { dg-additional-options -O3 }\n+\n int res, a, b;\n void *foo;\n static void f2 (int arg) { res = ((int (*)[arg][b]) foo)[0][0][0]; }", "previous_filename": "gcc/testsuite/gcc.c-torture/compile/pr84305.c"}]}