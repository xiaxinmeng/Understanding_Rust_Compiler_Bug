{"sha": "b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNiNzVlNjY0YTYxOWRhZTk4NTcxYTBiM2FjODAzNGY1ZmE3YzJiZQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-01-10T22:23:44Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2020-01-10T22:23:44Z"}, "message": "Further changes for the OpenACC 'if_present' clause on the 'host_data' construct\n\n\tgcc/\n\t* tree.h (OMP_CLAUSE_USE_DEVICE_PTR_IF_PRESENT): New definition.\n\t* tree-core.h: Document it.\n\t* gimplify.c (gimplify_omp_workshare): Set it.\n\t* omp-low.c (lower_omp_target): Use it.\n\t* tree-pretty-print.c (dump_omp_clause): Print it.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/host_data-1.c: Extend.\n\t* gfortran.dg/goacc/host_data-tree.f95: Likewise.\n\n\tgcc/\n\t* omp-low.c (lower_omp_target) <OMP_CLAUSE_USE_DEVICE_PTR etc.>:\n\tAssert that for OpenACC we always have 'GOMP_MAP_USE_DEVICE_PTR'.\n\n\tlibgomp/\n\t* target.c (gomp_map_vars_internal)\n\t<GOMP_MAP_USE_DEVICE_PTR_IF_PRESENT>: Clean up/elaborate code\n\tpaths.\n\nFrom-SVN: r280149", "tree": {"sha": "c557ed2e8d6ac3cf602df662f0fb8d72c3b56888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c557ed2e8d6ac3cf602df662f0fb8d72c3b56888"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68be73fc42b969d8d595aeda98e3ea962a7a9ed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68be73fc42b969d8d595aeda98e3ea962a7a9ed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68be73fc42b969d8d595aeda98e3ea962a7a9ed5"}], "stats": {"total": 188, "additions": 133, "deletions": 55}, "files": [{"sha": "a195863212ea94a191c4377c1e4a6704ed278540", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "patch": "@@ -1,3 +1,14 @@\n+2020-01-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* tree.h (OMP_CLAUSE_USE_DEVICE_PTR_IF_PRESENT): New definition.\n+\t* tree-core.h: Document it.\n+\t* gimplify.c (gimplify_omp_workshare): Set it.\n+\t* omp-low.c (lower_omp_target): Use it.\n+\t* tree-pretty-print.c (dump_omp_clause): Print it.\n+\n+\t* omp-low.c (lower_omp_target) <OMP_CLAUSE_USE_DEVICE_PTR etc.>:\n+\tAssert that for OpenACC we always have 'GOMP_MAP_USE_DEVICE_PTR'.\n+\n 2020-01-10  David Malcolm  <dmalcolm@redhat.com>\n \n \t* Makefile.in (OBJS): Add tree-diagnostic-path.o."}, {"sha": "fe7236de4c3ffdb8d43f8577956d21e6be0ebb13", "filename": "gcc/gimplify.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "patch": "@@ -12802,14 +12802,21 @@ gimplify_omp_workshare (tree *expr_p, gimple_seq *pre_p)\n       stmt = gimple_build_omp_target (body, GF_OMP_TARGET_KIND_OACC_DATA,\n \t\t\t\t      OMP_CLAUSES (expr));\n       break;\n-    case OACC_KERNELS:\n-      stmt = gimple_build_omp_target (body, GF_OMP_TARGET_KIND_OACC_KERNELS,\n-\t\t\t\t      OMP_CLAUSES (expr));\n-      break;\n     case OACC_HOST_DATA:\n+      if (omp_find_clause (OMP_CLAUSES (expr), OMP_CLAUSE_IF_PRESENT))\n+\t{\n+\t  for (tree c = OMP_CLAUSES (expr); c; c = OMP_CLAUSE_CHAIN (c))\n+\t    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_USE_DEVICE_PTR)\n+\t      OMP_CLAUSE_USE_DEVICE_PTR_IF_PRESENT (c) = 1;\n+\t}\n+\n       stmt = gimple_build_omp_target (body, GF_OMP_TARGET_KIND_OACC_HOST_DATA,\n \t\t\t\t      OMP_CLAUSES (expr));\n       break;\n+    case OACC_KERNELS:\n+      stmt = gimple_build_omp_target (body, GF_OMP_TARGET_KIND_OACC_KERNELS,\n+\t\t\t\t      OMP_CLAUSES (expr));\n+      break;\n     case OACC_PARALLEL:\n       stmt = gimple_build_omp_target (body, GF_OMP_TARGET_KIND_OACC_PARALLEL,\n \t\t\t\t      OMP_CLAUSES (expr));"}, {"sha": "eb3fe9688fe479c739fcea1d3778f772bd834d39", "filename": "gcc/omp-low.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "patch": "@@ -12006,9 +12006,15 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t\ttkind = GOMP_MAP_FIRSTPRIVATE_INT;\n \t\tx = build_sender_ref (ovar, ctx);\n \t      }\n-\t    if (tkind == GOMP_MAP_USE_DEVICE_PTR\n-\t\t&& omp_find_clause (clauses, OMP_CLAUSE_IF_PRESENT))\n-\t      tkind = GOMP_MAP_USE_DEVICE_PTR_IF_PRESENT;\n+\n+\t    if (is_gimple_omp_oacc (ctx->stmt))\n+\t      {\n+\t\tgcc_assert (tkind == GOMP_MAP_USE_DEVICE_PTR);\n+\n+\t\tif (OMP_CLAUSE_USE_DEVICE_PTR_IF_PRESENT (c))\n+\t\t  tkind = GOMP_MAP_USE_DEVICE_PTR_IF_PRESENT;\n+\t      }\n+\n \t    type = TREE_TYPE (ovar);\n \t    if (lang_hooks.decls.omp_array_data (ovar, true))\n \t      var = lang_hooks.decls.omp_array_data (ovar, false);"}, {"sha": "cccc2853ed59563025b2fea260561986c2f5f071", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "patch": "@@ -1,3 +1,8 @@\n+2020-01-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/host_data-1.c: Extend.\n+\t* gfortran.dg/goacc/host_data-tree.f95: Likewise.\n+\n 2020-01-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/93210"}, {"sha": "ac24446146728619e64b323325209c403103029a", "filename": "gcc/testsuite/c-c++-common/goacc/host_data-1.c", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fhost_data-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fhost_data-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fhost_data-1.c?ref=b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "patch": "@@ -1,22 +1,28 @@\n /* Test valid use of host_data directive.  */\n \n+/* { dg-additional-options \"-fdump-tree-original -fdump-tree-gimple\" } */\n+\n int v1[3][3];\n \n void\n f (void)\n {\n #pragma acc host_data use_device(v1)\n+  /* { dg-final { scan-tree-dump-times \"(?n)#pragma acc host_data use_device_ptr\\\\(v1\\\\)$\" 1 \"original\" } }\n+     { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_host_data use_device_ptr\\\\(v1\\\\)$\" 1 \"gimple\" } } */\n   ;\n \n #pragma acc host_data use_device(v1) if_present\n+  /* { dg-final { scan-tree-dump-times \"(?n)#pragma acc host_data if_present use_device_ptr\\\\(v1\\\\)$\" 1 \"original\" } }\n+     { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_host_data if_present use_device_ptr\\\\(if_present:v1\\\\)$\" 1 \"gimple\" } } */\n   ;\n }\n \n \n void bar (float *, float *);\n \n void\n-foo (float *x, float *y)\n+foo (float *x, float *y, float *yy)\n {\n   int n = 1 << 10;\n #pragma acc data create(x[0:n])\n@@ -25,26 +31,38 @@ foo (float *x, float *y)\n \n     /* This should fail at run time because y is not mapped.  */\n #pragma acc host_data use_device(x,y)\n+    /* { dg-final { scan-tree-dump-times \"(?n)#pragma acc host_data use_device_ptr\\\\(y\\\\) use_device_ptr\\\\(x\\\\)$\" 1 \"original\" } }\n+       { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_host_data use_device_ptr\\\\(y\\\\) use_device_ptr\\\\(x\\\\)$\" 1 \"gimple\" } } */\n     bar (x, y);\n \n     /* y is still not mapped, but this should not fail at run time but\n        continue execution with y remaining as the host address.  */\n #pragma acc host_data use_device(x,y) if_present\n+    /* { dg-final { scan-tree-dump-times \"(?n)#pragma acc host_data if_present use_device_ptr\\\\(y\\\\) use_device_ptr\\\\(x\\\\)$\" 1 \"original\" } }\n+       { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_host_data if_present use_device_ptr\\\\(if_present:y\\\\) use_device_ptr\\\\(if_present:x\\\\)$\" 1 \"gimple\" } } */\n     bar (x, y);\n \n-#pragma acc data copyout(y[0:n])\n+#pragma acc data copyout(yy[0:n])\n     {\n-#pragma acc host_data use_device(x,y)\n-      bar (x, y);\n+#pragma acc host_data use_device(x,yy)\n+      /* { dg-final { scan-tree-dump-times \"(?n)#pragma acc host_data use_device_ptr\\\\(yy\\\\) use_device_ptr\\\\(x\\\\)$\" 1 \"original\" } }\n+\t { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_host_data use_device_ptr\\\\(yy\\\\) use_device_ptr\\\\(x\\\\)$\" 1 \"gimple\" } } */\n+      bar (x, yy);\n \n-#pragma acc host_data use_device(x,y) if_present\n-      bar (x, y);\n+#pragma acc host_data use_device(x,yy) if_present\n+      /* { dg-final { scan-tree-dump-times \"(?n)#pragma acc host_data if_present use_device_ptr\\\\(yy\\\\) use_device_ptr\\\\(x\\\\)$\" 1 \"original\" } }\n+\t { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_host_data if_present use_device_ptr\\\\(if_present:yy\\\\) use_device_ptr\\\\(if_present:x\\\\)$\" 1 \"gimple\" } } */\n+      bar (x, yy);\n \n-#pragma acc host_data use_device(x,y) if(x != y)\n-      bar (x, y);\n+#pragma acc host_data use_device(x,yy) if(x != yy)\n+      /* { dg-final { scan-tree-dump-times \"(?n)#pragma acc host_data if\\\\(x \\\\!= yy\\\\) use_device_ptr\\\\(yy\\\\) use_device_ptr\\\\(x\\\\)$\" 1 \"original\" } }\n+\t { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_host_data if\\\\(D\\\\.\\[0-9\\]+\\\\) use_device_ptr\\\\(yy\\\\) use_device_ptr\\\\(x\\\\)$\" 1 \"gimple\" } } */\n+      bar (x, yy);\n \n-#pragma acc host_data use_device(x,y) if_present if(x != y)\n-      bar (x, y);\n+#pragma acc host_data use_device(x,yy) if_present if(x == yy)\n+      /* { dg-final { scan-tree-dump-times \"(?n)#pragma acc host_data if\\\\(x == yy\\\\) if_present use_device_ptr\\\\(yy\\\\) use_device_ptr\\\\(x\\\\)$\" 1 \"original\" } }\n+\t { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_host_data if\\\\(D\\\\.\\[0-9\\]+\\\\) if_present use_device_ptr\\\\(if_present:yy\\\\) use_device_ptr\\\\(if_present:x\\\\)$\" 1 \"gimple\" } } */\n+      bar (x, yy);\n     }\n   }\n }"}, {"sha": "558e80014d758b3ffc9edb991a8af7a7260a5166", "filename": "gcc/testsuite/gfortran.dg/goacc/host_data-tree.f95", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fhost_data-tree.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fhost_data-tree.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fhost_data-tree.f95?ref=b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "patch": "@@ -1,21 +1,23 @@\n-! { dg-do compile } \n-! { dg-additional-options \"-fdump-tree-original\" } \n+! { dg-additional-options \"-fdump-tree-original -fdump-tree-gimple\" }\n \n program test\n   implicit none\n   integer, pointer :: p\n \n   !$acc host_data use_device(p)\n+  ! { dg-final { scan-tree-dump-times \"(?n)#pragma acc host_data use_device_ptr\\\\(p\\\\)$\" 1 \"original\" } }\n+  ! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_host_data use_device_ptr\\\\(p\\\\)$\" 1 \"gimple\" } }\n   !$acc end host_data\n \n   !$acc host_data use_device(p) if (p == 42)\n+  ! { dg-final { scan-tree-dump-times \"(?n)D\\\\.\\[0-9\\]+ = \\\\*p == 42;$\" 1 \"original\" } }\n+  ! { dg-final { scan-tree-dump-times \"(?n)#pragma acc host_data use_device_ptr\\\\(p\\\\) if\\\\(D\\\\.\\[0-9\\]+\\\\)$\" 1 \"original\" } }\n+  ! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_host_data use_device_ptr\\\\(p\\\\) if\\\\(D\\\\.\\[0-9\\]+\\\\)$\" 1 \"gimple\" } }\n   !$acc end host_data\n \n   !$acc host_data use_device(p) if_present if (p == 43)\n+  ! { dg-final { scan-tree-dump-times \"(?n)D\\\\.\\[0-9\\]+ = \\\\*p == 43;$\" 1 \"original\" } }\n+  ! { dg-final { scan-tree-dump-times \"(?n)#pragma acc host_data use_device_ptr\\\\(p\\\\) if\\\\(D\\\\.\\[0-9\\]+\\\\) if_present$\" 1 \"original\" } }\n+  ! { dg-final { scan-tree-dump-times \"(?n)#pragma omp target oacc_host_data use_device_ptr\\\\(if_present:p\\\\) if\\\\(D\\\\.\\[0-9\\]+\\\\) if_present$\" 1 \"gimple\" } }\n   !$acc end host_data\n end program test\n-! { dg-final { scan-tree-dump-times \"pragma acc host_data use_device_ptr\\\\(p\\\\)\" 3 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = \\\\*p == 42;\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"pragma acc host_data use_device_ptr\\\\(p\\\\) if\\\\(D.\\[0-9\\]+\\\\)\" 2 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"D.\\[0-9\\]+ = \\\\*p == 43;\" 1 \"original\" } }\n-! { dg-final { scan-tree-dump-times \"pragma acc host_data use_device_ptr\\\\(p\\\\) if\\\\(D.\\[0-9\\]+\\\\) if_present\" 1 \"original\" } }"}, {"sha": "765ea2a9542309ad739a5ccebca4dd1867200ec7", "filename": "gcc/tree-core.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "patch": "@@ -1175,6 +1175,9 @@ struct GTY(()) tree_base {\n        OMP_CLAUSE_REDUCTION_OMP_ORIG_REF in\n \t   OMP_CLAUSE_{,TASK_,IN_}REDUCTION\n \n+       OMP_CLAUSE_USE_DEVICE_PTR_IF_PRESENT in\n+\t   OMP_CLAUSE_USE_DEVICE_PTR\n+\n        TRANSACTION_EXPR_RELAXED in\n \t   TRANSACTION_EXPR\n "}, {"sha": "fe2e62b31ba0a8d701d86d1f13756111cf085ea9", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "patch": "@@ -432,7 +432,7 @@ static void\n dump_omp_clause (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n {\n   const char *name;\n-\n+  const char *modifier = NULL;\n   switch (OMP_CLAUSE_CODE (clause))\n     {\n     case OMP_CLAUSE_PRIVATE:\n@@ -446,13 +446,9 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n       goto print_remap;\n     case OMP_CLAUSE_LASTPRIVATE:\n       name = \"lastprivate\";\n-      if (!OMP_CLAUSE_LASTPRIVATE_CONDITIONAL (clause))\n-\tgoto print_remap;\n-      pp_string (pp, \"lastprivate(conditional:\");\n-      dump_generic_node (pp, OMP_CLAUSE_DECL (clause),\n-\t\t\t spc, flags, false);\n-      pp_right_paren (pp);\n-      break;\n+      if (OMP_CLAUSE_LASTPRIVATE_CONDITIONAL (clause))\n+\tmodifier = \"conditional:\";\n+      goto print_remap;\n     case OMP_CLAUSE_COPYIN:\n       name = \"copyin\";\n       goto print_remap;\n@@ -464,6 +460,8 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n       goto print_remap;\n     case OMP_CLAUSE_USE_DEVICE_PTR:\n       name = \"use_device_ptr\";\n+      if (OMP_CLAUSE_USE_DEVICE_PTR_IF_PRESENT (clause))\n+\tmodifier = \"if_present:\";\n       goto print_remap;\n     case OMP_CLAUSE_USE_DEVICE_ADDR:\n       name = \"use_device_addr\";\n@@ -501,6 +499,8 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n   print_remap:\n       pp_string (pp, name);\n       pp_left_paren (pp);\n+      if (modifier)\n+\tpp_string (pp, modifier);\n       dump_generic_node (pp, OMP_CLAUSE_DECL (clause),\n \t\t\t spc, flags, false);\n       pp_right_paren (pp);"}, {"sha": "93422206b63de5e6a907c2f845a25ff4dd7c8b55", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "patch": "@@ -1627,6 +1627,11 @@ class auto_suppress_location_wrappers\n #define OMP_CLAUSE_MAP_IN_REDUCTION(NODE) \\\n   TREE_PRIVATE (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_MAP))\n \n+/* True on an OMP_CLAUSE_USE_DEVICE_PTR with an OpenACC 'if_present'\n+   clause.  */\n+#define OMP_CLAUSE_USE_DEVICE_PTR_IF_PRESENT(NODE) \\\n+  (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_USE_DEVICE_PTR)->base.public_flag)\n+\n #define OMP_CLAUSE_PROC_BIND_KIND(NODE) \\\n   (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_PROC_BIND)->omp_clause.subcode.proc_bind_kind)\n "}, {"sha": "81d0c164a3a4bf0e9a6aef9f2b6450cb2b5a8dd7", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "patch": "@@ -1,3 +1,9 @@\n+2020-01-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* target.c (gomp_map_vars_internal)\n+\t<GOMP_MAP_USE_DEVICE_PTR_IF_PRESENT>: Clean up/elaborate code\n+\tpaths.\n+\n 2020-01-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgomp/93219"}, {"sha": "38de1c0cf922b752e40c365cdba21bb67568658b", "filename": "libgomp/target.c", "status": "modified", "additions": 38, "deletions": 23, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3b75e664a619dae98571a0b3ac8034f5fa7c2be/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=b3b75e664a619dae98571a0b3ac8034f5fa7c2be", "patch": "@@ -740,22 +740,24 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t      cur_node.host_start = (uintptr_t) hostaddrs[i];\n \t      cur_node.host_end = cur_node.host_start;\n \t      splay_tree_key n = gomp_map_lookup (mem_map, &cur_node);\n-\t      if (n == NULL)\n+\t      if (n != NULL)\n+\t\t{\n+\t\t  cur_node.host_start -= n->host_start;\n+\t\t  hostaddrs[i]\n+\t\t    = (void *) (n->tgt->tgt_start + n->tgt_offset\n+\t\t\t\t+ cur_node.host_start);\n+\t\t}\n+\t      else if ((kind & typemask) == GOMP_MAP_USE_DEVICE_PTR)\n \t\t{\n-\t\t  if ((kind & typemask) == GOMP_MAP_USE_DEVICE_PTR_IF_PRESENT)\n-\t\t    {\n-\t\t      /* If not present, continue using the host address.  */\n-\t\t      tgt->list[i].offset = 0;\n-\t\t      continue;\n-\t\t    }\n \t\t  gomp_mutex_unlock (&devicep->lock);\n \t\t  gomp_fatal (\"use_device_ptr pointer wasn't mapped\");\n \t\t}\n-\t      cur_node.host_start -= n->host_start;\n-\t      hostaddrs[i]\n-\t\t= (void *) (n->tgt->tgt_start + n->tgt_offset\n-\t\t\t    + cur_node.host_start);\n-\t      tgt->list[i].offset = ~(uintptr_t) 0;\n+\t      else if ((kind & typemask) == GOMP_MAP_USE_DEVICE_PTR_IF_PRESENT)\n+\t\t/* If not present, continue using the host address.  */\n+\t\t;\n+\t      else\n+\t\t__builtin_unreachable ();\n+\t      tgt->list[i].offset = OFFSET_INLINED;\n \t    }\n \t  else\n \t    tgt->list[i].offset = 0;\n@@ -980,27 +982,40 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \t      case GOMP_MAP_FIRSTPRIVATE_INT:\n \t      case GOMP_MAP_ZERO_LEN_ARRAY_SECTION:\n \t\tcontinue;\n-\t      case GOMP_MAP_USE_DEVICE_PTR:\n \t      case GOMP_MAP_USE_DEVICE_PTR_IF_PRESENT:\n+\t\t/* The OpenACC 'host_data' construct only allows 'use_device'\n+\t\t   \"mapping\" clauses, so in the first loop, 'not_found_cnt'\n+\t\t   must always have been zero, so all OpenACC 'use_device'\n+\t\t   clauses have already been handled.  (We can only easily test\n+\t\t   'use_device' with 'if_present' clause here.)  */\n+\t\tassert (tgt->list[i].offset == OFFSET_INLINED);\n+\t\t/* Nevertheless, FALLTHRU to the normal handling, to keep the\n+\t\t   code conceptually simple, similar to the first loop.  */\n+\t      case GOMP_MAP_USE_DEVICE_PTR:\n \t\tif (tgt->list[i].offset == 0)\n \t\t  {\n \t\t    cur_node.host_start = (uintptr_t) hostaddrs[i];\n \t\t    cur_node.host_end = cur_node.host_start;\n \t\t    n = gomp_map_lookup (mem_map, &cur_node);\n-\t\t    if (n == NULL)\n+\t\t    if (n != NULL)\n+\t\t      {\n+\t\t\tcur_node.host_start -= n->host_start;\n+\t\t\thostaddrs[i]\n+\t\t\t  = (void *) (n->tgt->tgt_start + n->tgt_offset\n+\t\t\t\t      + cur_node.host_start);\n+\t\t      }\n+\t\t    else if ((kind & typemask) == GOMP_MAP_USE_DEVICE_PTR)\n \t\t      {\n-\t\t\tif ((kind & typemask)\n-\t\t\t    == GOMP_MAP_USE_DEVICE_PTR_IF_PRESENT)\n-\t\t\t  /* If not present, continue using the host address.  */\n-\t\t\t  continue;\n \t\t\tgomp_mutex_unlock (&devicep->lock);\n \t\t\tgomp_fatal (\"use_device_ptr pointer wasn't mapped\");\n \t\t      }\n-\t\t    cur_node.host_start -= n->host_start;\n-\t\t    hostaddrs[i]\n-\t\t      = (void *) (n->tgt->tgt_start + n->tgt_offset\n-\t\t\t\t  + cur_node.host_start);\n-\t\t    tgt->list[i].offset = ~(uintptr_t) 0;\n+\t\t    else if ((kind & typemask)\n+\t\t\t     == GOMP_MAP_USE_DEVICE_PTR_IF_PRESENT)\n+\t\t      /* If not present, continue using the host address.  */\n+\t\t      ;\n+\t\t    else\n+\t\t      __builtin_unreachable ();\n+\t\t    tgt->list[i].offset = OFFSET_INLINED;\n \t\t  }\n \t\tcontinue;\n \t      case GOMP_MAP_STRUCT:"}]}